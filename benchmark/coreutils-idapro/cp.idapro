LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : E966360F0542370032FF26B05D0C252D479B5D8554663A13FD8BDD3A07CEBB5E
LOAD:0000000000000000 ; Input MD5    : B04FA6781FA59FBA4497E79BB1678496
LOAD:0000000000000000 ; Input CRC32  : 65BCD992
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/cp
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'copy.c'
LOAD:0000000000000000 ; Source File : 'cp.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'cp-hash.c'
LOAD:0000000000000000 ; Source File : 'extent-scan.c'
LOAD:0000000000000000 ; Source File : 'force-link.c'
LOAD:0000000000000000 ; Source File : 'selinux.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'copy-acl.c'
LOAD:0000000000000000 ; Source File : 'set-acl.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'backupfile.c'
LOAD:0000000000000000 ; Source File : 'backup-rename.c'
LOAD:0000000000000000 ; Source File : 'backup-find.c'
LOAD:0000000000000000 ; Source File : 'buffer-lcm.c'
LOAD:0000000000000000 ; Source File : 'closein.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'stripslash.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'filemode.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'full-write.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'qcopy-acl.c'
LOAD:0000000000000000 ; Source File : 'qset-acl.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'renameatu.c'
LOAD:0000000000000000 ; Source File : 'safe-write.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'savedir.c'
LOAD:0000000000000000 ; Source File : 'tempname.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'utimecmp.c'
LOAD:0000000000000000 ; Source File : 'utimens.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'write-any-file.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'yesno.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'freadahead.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'acl-internal.c'
LOAD:0000000000000000 ; Source File : 'get-permissions.c'
LOAD:0000000000000000 ; Source File : 'set-permissions.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'opendir-safer.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'randint.c'
LOAD:0000000000000000 ; Source File : 'randread.c'
LOAD:0000000000000000 ; Source File : 'rand-isaac.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 854C8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 18AE0h               ; Size in file image
LOAD:00000000000000D8                 dq 18AE0h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 19530h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 219530h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 0B70h                ; Size in file image
LOAD:0000000000000110                 dq 11E8h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 19A58h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 219A58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 15C60h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 15C60h               ; Physical address
LOAD:00000000000001B0                 dq 76Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 76Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 19530h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 219530h              ; Physical address
LOAD:0000000000000220                 dq 0AD0h                ; Size in file image
LOAD:0000000000000228                 dq 0AD0h                ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 1Ch, 6Dh, 0A6h, 0BDh, 36h, 98h, 2Fh, 25h, 0F4h, 0A5h ; Desc
LOAD:0000000000000284                 db 27h, 3Ch, 1Bh, 8Ch, 67h, 61h, 67h, 35h, 0A6h, 9Ah
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 74h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 74h, 75h, 7Bh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_E98, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_E98, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aUtimensat - offset byte_E98, 12h, 0, 0, \ ; "utimensat"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_E98, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aUnlink - offset byte_E98, 12h, 0, 0, \ ; "unlink"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_E98, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_E98, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_E98, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aStrcpy - offset byte_E98, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFpending - offset byte_E98, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aReadChk - offset byte_E98, 12h, 0, 0, \ ; "__read_chk"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aMkdir - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "mkdir"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aUnlinkat - offset byte_E98, 12h, 0, 0, \ ; "unlinkat"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aQsort - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:0000000000000448                            0>
LOAD:0000000000000460                 Elf64_Sym <offset aReadlink - offset byte_E98, 12h, 0, 0, \ ; "readlink"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFcntl - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000478                            0>
LOAD:0000000000000490                 Elf64_Sym <offset aClockGettime - offset byte_E98, 12h, 0, 0, \ ; "clock_gettime"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFwrite+1 - offset byte_E98, 12h, 0, 0, \ ; "write"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aGetpid - offset byte_E98, 12h, 0, 0, \ ; "getpid"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aFreadUnlocked - offset byte_E98, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_E98, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aFpathconf+1 - offset byte_E98, 12h, 0, 0, \ ; "pathconf"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFclose - offset byte_E98, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aFdopendir+2 - offset byte_E98, 12h, 0, 0, \ ; "opendir"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aBindtextdomain - offset byte_E98, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aStpcpy - offset byte_E98, 12h, 0, 0, \ ; "stpcpy"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aRmdir - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "rmdir"
LOAD:0000000000000580                            0>
LOAD:0000000000000598                 Elf64_Sym <offset aDcgettext - offset byte_E98, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_E98, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrlen - offset byte_E98, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aLxstat - offset byte_E98, 12h, 0, 0, \ ; "__lxstat"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aOpenat - offset byte_E98, 12h, 0, 0, \ ; "openat"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aStackChkFail - offset byte_E98, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aGetuid - offset byte_E98, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aGetoptLong - offset byte_E98, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMbrtowc - offset byte_E98, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrchr - offset byte_E98, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFxstatat - offset byte_E98, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aOverflow - offset byte_E98, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aStrrchr - offset byte_E98, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFtruncate - offset byte_E98, 12h, 0, 0, \ ; "ftruncate"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aLseek - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000006E8                            0>
LOAD:0000000000000700                 Elf64_Sym <offset aGettimeofday - offset byte_E98, 12h, 0, 0, \ ; "gettimeofday"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aAssertFail - offset byte_E98, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMemset - offset byte_E98, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aGeteuid - offset byte_E98, 12h, 0, 0, \ ; "geteuid"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aIoctl - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "ioctl"
LOAD:0000000000000760                            0>
LOAD:0000000000000778                 Elf64_Sym <offset aCanonicalizeFi - offset byte_E98, 12h, 0, 0, \ ; "canonicalize_file_name"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFclose+1 - offset byte_E98, 12h, 0, 0, \ ; "close"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aRewinddir - offset byte_E98, 12h, 0, 0, \ ; "rewinddir"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aStrspn - offset byte_E98, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aClosedir - offset byte_E98, 12h, 0, 0, \ ; "closedir"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aPosixFadvise - offset byte_E98, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aRead - offset byte_E98, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000808                            0>
LOAD:0000000000000820                 Elf64_Sym <offset aLibcStartMain - offset byte_E98, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aMemcmp - offset byte_E98, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFallocate - offset byte_E98, 12h, 0, 0, \ ; "fallocate"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFputsUnlocked - offset byte_E98, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aUtimes - offset byte_E98, 12h, 0, 0, \ ; "utimes"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aCalloc - offset byte_E98, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aGetdelim - offset byte_E98, 12h, 0, 0, \ ; "__getdelim"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aStrcmp - offset byte_E98, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aDirfd - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:00000000000008E0                            0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFpathconf - offset byte_E98, 12h, 0, 0, \ ; "fpathconf"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aRpmatch - offset byte_E98, 12h, 0, 0, \ ; "rpmatch"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aSyscall - offset byte_E98, 12h, 0, 0, \ ; "syscall"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aMkfifo - offset byte_E98, 12h, 0, 0, \ ; "mkfifo"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aGmonStart - offset byte_E98, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aUmask - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "umask"
LOAD:0000000000000970                            0>
LOAD:0000000000000988                 Elf64_Sym <offset aMemcpy - offset byte_E98, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aXmknod - offset byte_E98, 12h, 0, 0, \ ; "__xmknod"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aFileno - offset byte_E98, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aGetgid - offset byte_E98, 12h, 0, 0, \ ; "getgid"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aXstat - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000009E8                            0>
LOAD:0000000000000A00                 Elf64_Sym <offset aReaddir - offset byte_E98, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aMalloc - offset byte_E98, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aFflush - offset byte_E98, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aNlLanginfo - offset byte_E98, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aFxstat - offset byte_E98, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aLchown - offset byte_E98, 12h, 0, 0, \ ; "lchown"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aFreading - offset byte_E98, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000A90                            offset dword_0, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aRealloc - offset byte_E98, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aFdopen - offset byte_E98, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000AC0                            offset dword_0, 0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aSymlinkat+3 - offset byte_E98, 12h, 0, 0, \ ; "linkat"
LOAD:0000000000000AD8                            offset dword_0, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aSetlocale - offset byte_E98, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000AF0                            offset dword_0, 0>
LOAD:0000000000000B08                 Elf64_Sym <offset aPrintfChk - offset byte_E98, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000B08                            offset dword_0, 0>
LOAD:0000000000000B20                 Elf64_Sym <offset aFchmod - offset byte_E98, 12h, 0, 0, \ ; "fchmod"
LOAD:0000000000000B20                            offset dword_0, 0>
LOAD:0000000000000B38                 Elf64_Sym <offset aSetvbuf - offset byte_E98, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000B38                            offset dword_0, 0>
LOAD:0000000000000B50                 Elf64_Sym <offset aFchmod+1 - offset byte_E98, 12h, 0, 0, \ ; "chmod"
LOAD:0000000000000B50                            offset dword_0, 0>
LOAD:0000000000000B68                 Elf64_Sym <offset aMempcpy - offset byte_E98, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000B68                            offset dword_0, 0>
LOAD:0000000000000B80                 Elf64_Sym <offset aError - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000B80                            0>
LOAD:0000000000000B98                 Elf64_Sym <offset aExplicitBzeroC - offset byte_E98, 12h, 0, 0, \ ; "__explicit_bzero_chk"
LOAD:0000000000000B98                            offset dword_0, 0>
LOAD:0000000000000BB0                 Elf64_Sym <offset aFdopen+2 - offset byte_E98, 12h, 0, 0, \ ; "open"
LOAD:0000000000000BB0                            offset dword_0, 0>
LOAD:0000000000000BC8                 Elf64_Sym <offset aFseeko - offset byte_E98, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000BC8                            offset dword_0, 0>
LOAD:0000000000000BE0                 Elf64_Sym <offset aFchown - offset byte_E98, 12h, 0, 0, \ ; "fchown"
LOAD:0000000000000BE0                            offset dword_0, 0>
LOAD:0000000000000BF8                 Elf64_Sym <offset aFopen - offset byte_E98, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000BF8                            0>
LOAD:0000000000000C10                 Elf64_Sym <offset aRename - offset byte_E98, 12h, 0, 0, \ ; "rename"
LOAD:0000000000000C10                            offset dword_0, 0>
LOAD:0000000000000C28                 Elf64_Sym <offset aFdopendir - offset byte_E98, 12h, 0, 0, \ ; "fdopendir"
LOAD:0000000000000C28                            offset dword_0, 0>
LOAD:0000000000000C40                 Elf64_Sym <offset aFutimens - offset byte_E98, 12h, 0, 0, \ ; "futimens"
LOAD:0000000000000C40                            offset dword_0, 0>
LOAD:0000000000000C58                 Elf64_Sym <offset aEuidaccess - offset byte_E98, 12h, 0, 0, \ ; "euidaccess"
LOAD:0000000000000C58                            offset dword_0, 0>
LOAD:0000000000000C70                 Elf64_Sym <offset aCxaAtexit - offset byte_E98, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000C70                            offset dword_0, 0>
LOAD:0000000000000C88                 Elf64_Sym <offset aRenameat - offset byte_E98, 12h, 0, 0, \ ; "renameat"
LOAD:0000000000000C88                            offset dword_0, 0>
LOAD:0000000000000CA0                 Elf64_Sym <offset aGetpagesize - offset byte_E98, 12h, 0, 0, \ ; "getpagesize"
LOAD:0000000000000CA0                            offset dword_0, 0>
LOAD:0000000000000CB8                 Elf64_Sym <offset aGetppid - offset byte_E98, 12h, 0, 0, \ ; "getppid"
LOAD:0000000000000CB8                            offset dword_0, 0>
LOAD:0000000000000CD0                 Elf64_Sym <offset aExit+1 - offset byte_E98, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000CD0                            offset dword_0, 0>
LOAD:0000000000000CE8                 Elf64_Sym <offset aFwrite - offset byte_E98, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000CE8                            offset dword_0, 0>
LOAD:0000000000000D00                 Elf64_Sym <offset aFprintfChk - offset byte_E98, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000D00                            offset dword_0, 0>
LOAD:0000000000000D18                 Elf64_Sym <offset aItmRegistertmc - offset byte_E98, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000D18                            offset dword_0, 0>
LOAD:0000000000000D30                 Elf64_Sym <offset aMbsinit - offset byte_E98, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000D30                            offset dword_0, 0>
LOAD:0000000000000D48                 Elf64_Sym <offset aSymlinkat - offset byte_E98, 12h, 0, 0, \ ; "symlinkat"
LOAD:0000000000000D48                            offset dword_0, 0>
LOAD:0000000000000D60                 Elf64_Sym <offset aIswprint - offset byte_E98, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000D60                            offset dword_0, 0>
LOAD:0000000000000D78                 Elf64_Sym <offset aCxaFinalize - offset byte_E98, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000D78                            offset dword_0, 0>
LOAD:0000000000000D90                 Elf64_Sym <offset aFutimesat - offset byte_E98, 12h, 0, 0, \ ; "futimesat"
LOAD:0000000000000D90                            offset dword_0, 0>
LOAD:0000000000000DA8                 Elf64_Sym <offset aCtypeBLoc - offset byte_E98, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000DA8                            offset dword_0, 0>
LOAD:0000000000000DC0                 Elf64_Sym <offset aStdout - offset byte_E98, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000DC0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000DD8                 Elf64_Sym <offset aProgname - offset byte_E98, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000DD8                            offset __bss_start, 8>
LOAD:0000000000000DF0                 Elf64_Sym <offset aStdin - offset byte_E98, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000DF0                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000E08                 Elf64_Sym <offset aProgramInvocat - offset byte_E98, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000E08                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000E20                 Elf64_Sym <offset aPrognameFull - offset byte_E98, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000E20                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000E38                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_E98, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000E38                            offset __bss_start, 8>
LOAD:0000000000000E50                 Elf64_Sym <offset aStderr - offset byte_E98, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000E50                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000E68                 Elf64_Sym <offset aOptind - offset byte_E98, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000E68                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000E80                 Elf64_Sym <offset aOptarg - offset byte_E98, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000E80                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000E98 ; ELF String Table
LOAD:0000000000000E98 byte_E98        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000E98                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000E99 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001488↓o
LOAD:0000000000000EA3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000EAA aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000EB1 aFchmod         db 'fchmod',0           ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000EB1                                         ; LOAD:0000000000000B50↑o
LOAD:0000000000000EB8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000EC5 aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000ECD aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000ED7 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000EDF aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000BF8↑o
LOAD:0000000000000EE5 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000EED aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000EF7 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000E68↑o
LOAD:0000000000000EFE aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000F06 aRpmatch        db 'rpmatch',0          ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000F0E aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000F18 aUnlinkat       db 'unlinkat',0         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000F21 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000F2A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000B80↑o
LOAD:0000000000000F30 aReadChk        db '__read_chk',0       ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000F3B aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000F4C aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000F55 aUnlink         db 'unlink',0           ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000F5C aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000D60↑o
LOAD:0000000000000F65 aMkdir          db 'mkdir',0            ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000F6B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000F73 aRewinddir      db 'rewinddir',0        ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000F7D aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000F83 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000DF0↑o
LOAD:0000000000000F89 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000F89                                         ; LOAD:0000000000000CD0↑o
LOAD:0000000000000F8F aGetpid         db 'getpid',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000F96 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000F9D aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000F9D                                         ; DATA XREF: LOAD:0000000000000E08↑o
LOAD:0000000000000FB5 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000FC3 aFallocate      db 'fallocate',0        ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000FCD aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000FCD                                         ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000FE4 aLchown         db 'lchown',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000FEB aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000FF9 aGetppid        db 'getppid',0          ; DATA XREF: LOAD:0000000000000CB8↑o
LOAD:0000000000001001 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000001008 aRenameat       db 'renameat',0         ; DATA XREF: LOAD:0000000000000C88↑o
LOAD:0000000000001011 aFutimens       db 'futimens',0         ; DATA XREF: LOAD:0000000000000C40↑o
LOAD:000000000000101A aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000001021 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000001030 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000001037 aUtimensat      db 'utimensat',0        ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000001041 aRmdir          db 'rmdir',0            ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000001047 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000001058 aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000808↑o
LOAD:000000000000105D aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000001064 aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:0000000000000CA0↑o
LOAD:0000000000001070 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:0000000000001078 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000D00↑o
LOAD:0000000000001086 aFchown         db 'fchown',0           ; DATA XREF: LOAD:0000000000000BE0↑o
LOAD:000000000000108D aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000DC0↑o
LOAD:0000000000001094 aFpathconf      db 'fpathconf',0        ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000001094                                         ; LOAD:0000000000000508↑o
LOAD:000000000000109E aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:00000000000010A4 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:00000000000010AB aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000010AB                                         ; LOAD:0000000000000790↑o
LOAD:00000000000010B2 aEuidaccess     db 'euidaccess',0       ; DATA XREF: LOAD:0000000000000C58↑o
LOAD:00000000000010BD aSymlinkat      db 'symlinkat',0        ; DATA XREF: LOAD:0000000000000D48↑o
LOAD:00000000000010BD                                         ; LOAD:0000000000000AD8↑o
LOAD:00000000000010C7 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:00000000000010CE aUmask          db 'umask',0            ; DATA XREF: LOAD:0000000000000970↑o
LOAD:00000000000010D4 aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:0000000000000C28↑o
LOAD:00000000000010D4                                         ; LOAD:0000000000000538↑o
LOAD:00000000000010DE aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000D30↑o
LOAD:00000000000010E6 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:00000000000010ED aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:00000000000010F9 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000DA8↑o
LOAD:0000000000001107 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:000000000000110E aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000E80↑o
LOAD:0000000000001115 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000001120 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000E50↑o
LOAD:0000000000001127 aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:0000000000000760↑o
LOAD:000000000000112D aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000001134 aReadlink       db 'readlink',0         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:000000000000113D aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000001149 aXmknod         db '__xmknod',0         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000001152 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:000000000000115B aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000001162 aUtimes         db 'utimes',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000001169 aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000001174 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000CE8↑o
LOAD:0000000000001174                                         ; LOAD:00000000000004A8↑o
LOAD:000000000000117B aGettimeofday   db 'gettimeofday',0     ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000001188 aRename         db 'rename',0           ; DATA XREF: LOAD:0000000000000C10↑o
LOAD:000000000000118F aExplicitBzeroC db '__explicit_bzero_chk',0
LOAD:000000000000118F                                         ; DATA XREF: LOAD:0000000000000B98↑o
LOAD:00000000000011A4 aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000011AC aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000011BA aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000011C5 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:00000000000011CC aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000011CC                                         ; DATA XREF: LOAD:0000000000000E38↑o
LOAD:00000000000011EA aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:00000000000011EA                                         ; LOAD:0000000000000BB0↑o
LOAD:00000000000011F1 aQsort          db 'qsort',0            ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000011F7 aCanonicalizeFi db 'canonicalize_file_name',0
LOAD:00000000000011F7                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:000000000000120E aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000D78↑o
LOAD:000000000000121D aSyscall        db 'syscall',0          ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000001225 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:000000000000122D aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000001233 aOpenat         db 'openat',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:000000000000123A aFutimesat      db 'futimesat',0        ; DATA XREF: LOAD:0000000000000D90↑o
LOAD:0000000000001244 aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:000000000000124C aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:000000000000124C                                         ; LOAD:00000000000004F0↑o
LOAD:000000000000125B aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000001266 aMkfifo         db 'mkfifo',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:000000000000126D aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000001274 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000001274                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000001286 aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:000000000000128C aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000001293 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000BC8↑o
LOAD:000000000000129A aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000012A5 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000012B4 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:00000000000012B9 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000DD8↑o
LOAD:00000000000012C4 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000E20↑o
LOAD:00000000000012D4 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000C70↑o
LOAD:00000000000012E1 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001498↓o
LOAD:00000000000012EB aGlibc225       db 'GLIBC_2.25',0       ; DATA XREF: LOAD:00000000000014A8↓o
LOAD:00000000000012F6 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000014B8↓o
LOAD:0000000000001302 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:00000000000014C8↓o
LOAD:000000000000130D aGlibc210       db 'GLIBC_2.10',0       ; DATA XREF: LOAD:00000000000014D8↓o
LOAD:0000000000001318 aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:00000000000014E8↓o
LOAD:0000000000001323 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000014F8↓o
LOAD:000000000000132D aGlibc26        db 'GLIBC_2.6',0        ; DATA XREF: LOAD:0000000000001508↓o
LOAD:0000000000001337 aGlibc225_0     db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001518↓o
LOAD:0000000000001343 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000001343                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:000000000000135F aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000958↑o
LOAD:000000000000136E aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:000000000000136E                                         ; DATA XREF: LOAD:0000000000000D18↑o
LOAD:0000000000001388 ; ELF GNU Symbol Version Table
LOAD:0000000000001388                 dw 0
LOAD:000000000000138A                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:000000000000138C                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:000000000000138E                 dw 3                    ; utimensat@@GLIBC_2.6
LOAD:0000000000001390                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000001392                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000001394                 dw 2                    ; unlink@@GLIBC_2.2.5
LOAD:0000000000001396                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000001398                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:000000000000139A                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:000000000000139C                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:000000000000139E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:00000000000013A0                 dw 4                    ; __read_chk@@GLIBC_2.4
LOAD:00000000000013A2                 dw 2                    ; mkdir@@GLIBC_2.2.5
LOAD:00000000000013A4                 dw 4                    ; unlinkat@@GLIBC_2.4
LOAD:00000000000013A6                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:00000000000013A8                 dw 2                    ; readlink@@GLIBC_2.2.5
LOAD:00000000000013AA                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:00000000000013AC                 dw 5                    ; clock_gettime@@GLIBC_2.17
LOAD:00000000000013AE                 dw 2                    ; write@@GLIBC_2.2.5
LOAD:00000000000013B0                 dw 2                    ; getpid@@GLIBC_2.2.5
LOAD:00000000000013B2                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:00000000000013B4                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:00000000000013B6                 dw 2                    ; pathconf@@GLIBC_2.2.5
LOAD:00000000000013B8                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:00000000000013BA                 dw 2                    ; opendir@@GLIBC_2.2.5
LOAD:00000000000013BC                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:00000000000013BE                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:00000000000013C0                 dw 2                    ; rmdir@@GLIBC_2.2.5
LOAD:00000000000013C2                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:00000000000013C4                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:00000000000013C6                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:00000000000013C8                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:00000000000013CA                 dw 4                    ; openat@@GLIBC_2.4
LOAD:00000000000013CC                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:00000000000013CE                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:00000000000013D0                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:00000000000013D2                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:00000000000013D4                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:00000000000013D6                 dw 4                    ; __fxstatat@@GLIBC_2.4
LOAD:00000000000013D8                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:00000000000013DA                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:00000000000013DC                 dw 2                    ; ftruncate@@GLIBC_2.2.5
LOAD:00000000000013DE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:00000000000013E0                 dw 2                    ; gettimeofday@@GLIBC_2.2.5
LOAD:00000000000013E2                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:00000000000013E4                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:00000000000013E6                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:00000000000013E8                 dw 2                    ; ioctl@@GLIBC_2.2.5
LOAD:00000000000013EA                 dw 2                    ; canonicalize_file_name@@GLIBC_2.2.5
LOAD:00000000000013EC                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:00000000000013EE                 dw 2                    ; rewinddir@@GLIBC_2.2.5
LOAD:00000000000013F0                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:00000000000013F2                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:00000000000013F4                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:00000000000013F6                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:00000000000013F8                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:00000000000013FA                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:00000000000013FC                 dw 6                    ; fallocate@@GLIBC_2.10
LOAD:00000000000013FE                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000001400                 dw 2                    ; utimes@@GLIBC_2.2.5
LOAD:0000000000001402                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000001404                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000001406                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000001408                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:000000000000140A                 dw 2                    ; fpathconf@@GLIBC_2.2.5
LOAD:000000000000140C                 dw 2                    ; rpmatch@@GLIBC_2.2.5
LOAD:000000000000140E                 dw 2                    ; syscall@@GLIBC_2.2.5
LOAD:0000000000001410                 dw 2                    ; mkfifo@@GLIBC_2.2.5
LOAD:0000000000001412                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000001414                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:0000000000001416                 dw 7                    ; memcpy@@GLIBC_2.14
LOAD:0000000000001418                 dw 2                    ; __xmknod@@GLIBC_2.2.5
LOAD:000000000000141A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:000000000000141C                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:000000000000141E                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000001420                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000001422                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000001424                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000001426                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000001428                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:000000000000142A                 dw 2                    ; lchown@@GLIBC_2.2.5
LOAD:000000000000142C                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:000000000000142E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000001430                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000001432                 dw 4                    ; linkat@@GLIBC_2.4
LOAD:0000000000001434                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000001436                 dw 8                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000001438                 dw 2                    ; fchmod@@GLIBC_2.2.5
LOAD:000000000000143A                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:000000000000143C                 dw 2                    ; chmod@@GLIBC_2.2.5
LOAD:000000000000143E                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000001440                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000001442                 dw 9                    ; __explicit_bzero_chk@@GLIBC_2.25
LOAD:0000000000001444                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000001446                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000001448                 dw 2                    ; fchown@@GLIBC_2.2.5
LOAD:000000000000144A                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:000000000000144C                 dw 2                    ; rename@@GLIBC_2.2.5
LOAD:000000000000144E                 dw 4                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000001450                 dw 3                    ; futimens@@GLIBC_2.6
LOAD:0000000000001452                 dw 2                    ; euidaccess@@GLIBC_2.2.5
LOAD:0000000000001454                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000001456                 dw 4                    ; renameat@@GLIBC_2.4
LOAD:0000000000001458                 dw 2                    ; getpagesize@@GLIBC_2.2.5
LOAD:000000000000145A                 dw 2                    ; getppid@@GLIBC_2.2.5
LOAD:000000000000145C                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:000000000000145E                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000001460                 dw 8                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000001462                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000001464                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000001466                 dw 4                    ; symlinkat@@GLIBC_2.4
LOAD:0000000000001468                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:000000000000146A                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:000000000000146C                 dw 4                    ; futimesat@@GLIBC_2.4
LOAD:000000000000146E                 dw 0Ah                  ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000001470                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000001472                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000001474                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000001476                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000001478                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:000000000000147A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:000000000000147C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:000000000000147E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000001480                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000001482                 dw 0
LOAD:0000000000001484                 dw 0
LOAD:0000000000001486                 dw 0
LOAD:0000000000001488 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001488                 Elf64_Verneed <1, 9, offset aLibcSo6 - offset byte_E98, 10h, 0> ; "libc.so.6"
LOAD:0000000000001498                 Elf64_Vernaux <0D696913h, 0, 0Ah, offset aGlibc23 - offset byte_E98, \ ; "GLIBC_2.3"
LOAD:0000000000001498                                10h>
LOAD:00000000000014A8                 Elf64_Vernaux <6969185h, 0, 9, offset aGlibc225 - offset byte_E98, \ ; "GLIBC_2.25"
LOAD:00000000000014A8                                10h>
LOAD:00000000000014B8                 Elf64_Vernaux <9691974h, 0, 8, offset aGlibc234 - offset byte_E98, \ ; "GLIBC_2.3.4"
LOAD:00000000000014B8                                10h>
LOAD:00000000000014C8                 Elf64_Vernaux <6969194h, 0, 7, offset aGlibc214 - offset byte_E98, \ ; "GLIBC_2.14"
LOAD:00000000000014C8                                10h>
LOAD:00000000000014D8                 Elf64_Vernaux <6969190h, 0, 6, offset aGlibc210 - offset byte_E98, \ ; "GLIBC_2.10"
LOAD:00000000000014D8                                10h>
LOAD:00000000000014E8                 Elf64_Vernaux <6969197h, 0, 5, offset aGlibc217 - offset byte_E98, \ ; "GLIBC_2.17"
LOAD:00000000000014E8                                10h>
LOAD:00000000000014F8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_E98, \ ; "GLIBC_2.4"
LOAD:00000000000014F8                                10h>
LOAD:0000000000001508                 Elf64_Vernaux <0D696916h, 0, 3, offset aGlibc26 - offset byte_E98, \ ; "GLIBC_2.6"
LOAD:0000000000001508                                10h>
LOAD:0000000000001518                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225_0 - offset byte_E98, \ ; "GLIBC_2.2.5"
LOAD:0000000000001518                                0>
LOAD:0000000000001528 ; ELF RELA Relocation Table
LOAD:0000000000001528                 Elf64_Rela <219530h, 8, 37D0h> ; R_X86_64_RELATIVE +37D0h
LOAD:0000000000001540                 Elf64_Rela <219538h, 8, 3790h> ; R_X86_64_RELATIVE +3790h
LOAD:0000000000001558                 Elf64_Rela <219540h, 8, 12AC9h> ; R_X86_64_RELATIVE +12AC9h
LOAD:0000000000001570                 Elf64_Rela <219548h, 8, 12ACEh> ; R_X86_64_RELATIVE +12ACEh
LOAD:0000000000001588                 Elf64_Rela <219550h, 8, 12AD9h> ; R_X86_64_RELATIVE +12AD9h
LOAD:00000000000015A0                 Elf64_Rela <219558h, 8, 12AE3h> ; R_X86_64_RELATIVE +12AE3h
LOAD:00000000000015B8                 Elf64_Rela <219560h, 8, 12AE9h> ; R_X86_64_RELATIVE +12AE9h
LOAD:00000000000015D0                 Elf64_Rela <219568h, 8, 12AF1h> ; R_X86_64_RELATIVE +12AF1h
LOAD:00000000000015E8                 Elf64_Rela <219570h, 8, 12AF7h> ; R_X86_64_RELATIVE +12AF7h
LOAD:0000000000001600                 Elf64_Rela <219580h, 8, 12AFBh> ; R_X86_64_RELATIVE +12AFBh
LOAD:0000000000001618                 Elf64_Rela <2195A0h, 8, 12B03h> ; R_X86_64_RELATIVE +12B03h
LOAD:0000000000001630                 Elf64_Rela <2195C0h, 8, 12B13h> ; R_X86_64_RELATIVE +12B13h
LOAD:0000000000001648                 Elf64_Rela <2195E0h, 8, 12B1Ah> ; R_X86_64_RELATIVE +12B1Ah
LOAD:0000000000001660                 Elf64_Rela <219600h, 8, 12B48h> ; R_X86_64_RELATIVE +12B48h
LOAD:0000000000001678                 Elf64_Rela <219620h, 8, 12B28h> ; R_X86_64_RELATIVE +12B28h
LOAD:0000000000001690                 Elf64_Rela <219640h, 8, 12B2Eh> ; R_X86_64_RELATIVE +12B2Eh
LOAD:00000000000016A8                 Elf64_Rela <219660h, 8, 12BC9h> ; R_X86_64_RELATIVE +12BC9h
LOAD:00000000000016C0                 Elf64_Rela <219680h, 8, 12B3Ah> ; R_X86_64_RELATIVE +12B3Ah
LOAD:00000000000016D8                 Elf64_Rela <2196A0h, 8, 12B45h> ; R_X86_64_RELATIVE +12B45h
LOAD:00000000000016F0                 Elf64_Rela <2196C0h, 8, 128F1h> ; R_X86_64_RELATIVE +128F1h
LOAD:0000000000001708                 Elf64_Rela <2196E0h, 8, 12B54h> ; R_X86_64_RELATIVE +12B54h
LOAD:0000000000001720                 Elf64_Rela <219700h, 8, 12B68h> ; R_X86_64_RELATIVE +12B68h
LOAD:0000000000001738                 Elf64_Rela <219720h, 8, 12B78h> ; R_X86_64_RELATIVE +12B78h
LOAD:0000000000001750                 Elf64_Rela <219740h, 8, 12B80h> ; R_X86_64_RELATIVE +12B80h
LOAD:0000000000001768                 Elf64_Rela <219760h, 8, 128E6h> ; R_X86_64_RELATIVE +128E6h
LOAD:0000000000001780                 Elf64_Rela <219780h, 8, 12B85h> ; R_X86_64_RELATIVE +12B85h
LOAD:0000000000001798                 Elf64_Rela <2197A0h, 8, 12B8Fh> ; R_X86_64_RELATIVE +12B8Fh
LOAD:00000000000017B0                 Elf64_Rela <2197C0h, 8, 12A65h> ; R_X86_64_RELATIVE +12A65h
LOAD:00000000000017C8                 Elf64_Rela <2197E0h, 8, 12A6Eh> ; R_X86_64_RELATIVE +12A6Eh
LOAD:00000000000017E0                 Elf64_Rela <219800h, 8, 12BA2h> ; R_X86_64_RELATIVE +12BA2h
LOAD:00000000000017F8                 Elf64_Rela <219820h, 8, 12BB9h> ; R_X86_64_RELATIVE +12BB9h
LOAD:0000000000001810                 Elf64_Rela <219840h, 8, 12BC0h> ; R_X86_64_RELATIVE +12BC0h
LOAD:0000000000001828                 Elf64_Rela <219860h, 8, 12B57h> ; R_X86_64_RELATIVE +12B57h
LOAD:0000000000001840                 Elf64_Rela <219880h, 8, 12BCEh> ; R_X86_64_RELATIVE +12BCEh
LOAD:0000000000001858                 Elf64_Rela <2198A0h, 8, 12BD5h> ; R_X86_64_RELATIVE +12BD5h
LOAD:0000000000001870                 Elf64_Rela <2198C0h, 8, 12AE9h> ; R_X86_64_RELATIVE +12AE9h
LOAD:0000000000001888                 Elf64_Rela <2198E0h, 8, 12BDDh> ; R_X86_64_RELATIVE +12BDDh
LOAD:00000000000018A0                 Elf64_Rela <219900h, 8, 12BE2h> ; R_X86_64_RELATIVE +12BE2h
LOAD:00000000000018B8                 Elf64_Rela <219940h, 8, 12BEAh> ; R_X86_64_RELATIVE +12BEAh
LOAD:00000000000018D0                 Elf64_Rela <219948h, 8, 1536Eh> ; R_X86_64_RELATIVE +1536Eh
LOAD:00000000000018E8                 Elf64_Rela <219950h, 8, 12BEFh> ; R_X86_64_RELATIVE +12BEFh
LOAD:0000000000001900                 Elf64_Rela <219960h, 8, 12BEFh> ; R_X86_64_RELATIVE +12BEFh
LOAD:0000000000001918                 Elf64_Rela <219968h, 8, 12BEAh> ; R_X86_64_RELATIVE +12BEAh
LOAD:0000000000001930                 Elf64_Rela <219970h, 8, 1536Eh> ; R_X86_64_RELATIVE +1536Eh
LOAD:0000000000001948                 Elf64_Rela <219980h, 8, 151B8h> ; R_X86_64_RELATIVE +151B8h
LOAD:0000000000001960                 Elf64_Rela <219988h, 8, 151BDh> ; R_X86_64_RELATIVE +151BDh
LOAD:0000000000001978                 Elf64_Rela <219990h, 8, 151C1h> ; R_X86_64_RELATIVE +151C1h
LOAD:0000000000001990                 Elf64_Rela <219998h, 8, 12BEFh> ; R_X86_64_RELATIVE +12BEFh
LOAD:00000000000019A8                 Elf64_Rela <2199A0h, 8, 151C8h> ; R_X86_64_RELATIVE +151C8h
LOAD:00000000000019C0                 Elf64_Rela <2199A8h, 8, 151D1h> ; R_X86_64_RELATIVE +151D1h
LOAD:00000000000019D8                 Elf64_Rela <2199B0h, 8, 151D5h> ; R_X86_64_RELATIVE +151D5h
LOAD:00000000000019F0                 Elf64_Rela <2199B8h, 8, 12AEFh> ; R_X86_64_RELATIVE +12AEFh
LOAD:0000000000001A08                 Elf64_Rela <2199E0h, 8, 15339h> ; R_X86_64_RELATIVE +15339h
LOAD:0000000000001A20                 Elf64_Rela <2199E8h, 8, 15341h> ; R_X86_64_RELATIVE +15341h
LOAD:0000000000001A38                 Elf64_Rela <2199F0h, 8, 15347h> ; R_X86_64_RELATIVE +15347h
LOAD:0000000000001A50                 Elf64_Rela <2199F8h, 8, 15354h> ; R_X86_64_RELATIVE +15354h
LOAD:0000000000001A68                 Elf64_Rela <219A00h, 8, 15361h> ; R_X86_64_RELATIVE +15361h
LOAD:0000000000001A80                 Elf64_Rela <219A08h, 8, 15062h> ; R_X86_64_RELATIVE +15062h
LOAD:0000000000001A98                 Elf64_Rela <219A10h, 8, 15375h> ; R_X86_64_RELATIVE +15375h
LOAD:0000000000001AB0                 Elf64_Rela <219A18h, 8, 1535Ah> ; R_X86_64_RELATIVE +1535Ah
LOAD:0000000000001AC8                 Elf64_Rela <219A20h, 8, 12A4Ch> ; R_X86_64_RELATIVE +12A4Ch
LOAD:0000000000001AE0                 Elf64_Rela <219A28h, 8, 1537Dh> ; R_X86_64_RELATIVE +1537Dh
LOAD:0000000000001AF8                 Elf64_Rela <219A48h, 8, 0F280h> ; R_X86_64_RELATIVE +0F280h
LOAD:0000000000001B10                 Elf64_Rela <219A50h, 8, 0F260h> ; R_X86_64_RELATIVE +0F260h
LOAD:0000000000001B28                 Elf64_Rela <21A008h, 8, 21A008h> ; R_X86_64_RELATIVE +21A008h
LOAD:0000000000001B40                 Elf64_Rela <21A020h, 8, 15131h> ; R_X86_64_RELATIVE +15131h
LOAD:0000000000001B58                 Elf64_Rela <21A028h, 8, 0A770h> ; R_X86_64_RELATIVE +0A770h
LOAD:0000000000001B70                 Elf64_Rela <21A080h, 8, 21A090h> ; R_X86_64_RELATIVE +21A090h
LOAD:0000000000001B88                 Elf64_Rela <21A098h, 8, 21A5C0h> ; R_X86_64_RELATIVE +21A5C0h
LOAD:0000000000001BA0                 Elf64_Rela <219FC8h, 200000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001BB8                 Elf64_Rela <219FD0h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001BD0                 Elf64_Rela <219FD8h, 3800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001BE8                 Elf64_Rela <219FE0h, 4500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001C00                 Elf64_Rela <219FE8h, 6D00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001C18                 Elf64_Rela <219FF0h, 7100000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001C30                 Elf64_Rela <21A0A0h, 7500000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001C48                 Elf64_Rela <21A0A8h, 7400000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001C60                 Elf64_Rela <21A0B0h, 7600000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001C78                 Elf64_Rela <21A0B8h, 7B00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001C90                 Elf64_Rela <21A0C0h, 7C00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001CA8                 Elf64_Rela <21A0C8h, 7800000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001CC0                 Elf64_Rela <21A0E0h, 7A00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001CD8 ; ELF JMPREL Relocation Table
LOAD:0000000000001CD8                 Elf64_Rela <219C60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001CF0                 Elf64_Rela <219C68h, 300000007h, 0> ; R_X86_64_JUMP_SLOT utimensat
LOAD:0000000000001D08                 Elf64_Rela <219C70h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001D20                 Elf64_Rela <219C78h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001D38                 Elf64_Rela <219C80h, 600000007h, 0> ; R_X86_64_JUMP_SLOT unlink
LOAD:0000000000001D50                 Elf64_Rela <219C88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001D68                 Elf64_Rela <219C90h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001D80                 Elf64_Rela <219C98h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001D98                 Elf64_Rela <219CA0h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001DB0                 Elf64_Rela <219CA8h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __read_chk
LOAD:0000000000001DC8                 Elf64_Rela <219CB0h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT mkdir
LOAD:0000000000001DE0                 Elf64_Rela <219CB8h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT unlinkat
LOAD:0000000000001DF8                 Elf64_Rela <219CC0h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000001E10                 Elf64_Rela <219CC8h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000001E28                 Elf64_Rela <219CD0h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001E40                 Elf64_Rela <219CD8h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:0000000000001E58                 Elf64_Rela <219CE0h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:0000000000001E70                 Elf64_Rela <219CE8h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT getpid
LOAD:0000000000001E88                 Elf64_Rela <219CF0h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001EA0                 Elf64_Rela <219CF8h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001EB8                 Elf64_Rela <219D00h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT pathconf
LOAD:0000000000001ED0                 Elf64_Rela <219D08h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001EE8                 Elf64_Rela <219D10h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT opendir
LOAD:0000000000001F00                 Elf64_Rela <219D18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001F18                 Elf64_Rela <219D20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001F30                 Elf64_Rela <219D28h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT rmdir
LOAD:0000000000001F48                 Elf64_Rela <219D30h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001F60                 Elf64_Rela <219D38h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001F78                 Elf64_Rela <219D40h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001F90                 Elf64_Rela <219D48h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001FA8                 Elf64_Rela <219D50h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000001FC0                 Elf64_Rela <219D58h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001FD8                 Elf64_Rela <219D60h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:0000000000001FF0                 Elf64_Rela <219D68h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000002008                 Elf64_Rela <219D70h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000002020                 Elf64_Rela <219D78h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000002038                 Elf64_Rela <219D80h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000002050                 Elf64_Rela <219D88h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000002068                 Elf64_Rela <219D90h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000002080                 Elf64_Rela <219D98h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:0000000000002098                 Elf64_Rela <219DA0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000020B0                 Elf64_Rela <219DA8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT gettimeofday
LOAD:00000000000020C8                 Elf64_Rela <219DB0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000020E0                 Elf64_Rela <219DB8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000020F8                 Elf64_Rela <219DC0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:0000000000002110                 Elf64_Rela <219DC8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:0000000000002128                 Elf64_Rela <219DD0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT canonicalize_file_name
LOAD:0000000000002140                 Elf64_Rela <219DD8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000002158                 Elf64_Rela <219DE0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT rewinddir
LOAD:0000000000002170                 Elf64_Rela <219DE8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000002188                 Elf64_Rela <219DF0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:00000000000021A0                 Elf64_Rela <219DF8h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000021B8                 Elf64_Rela <219E00h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:00000000000021D0                 Elf64_Rela <219E08h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000021E8                 Elf64_Rela <219E10h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fallocate
LOAD:0000000000002200                 Elf64_Rela <219E18h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000002218                 Elf64_Rela <219E20h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT utimes
LOAD:0000000000002230                 Elf64_Rela <219E28h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000002248                 Elf64_Rela <219E30h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000002260                 Elf64_Rela <219E38h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000002278                 Elf64_Rela <219E40h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000002290                 Elf64_Rela <219E48h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fpathconf
LOAD:00000000000022A8                 Elf64_Rela <219E50h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT rpmatch
LOAD:00000000000022C0                 Elf64_Rela <219E58h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT syscall
LOAD:00000000000022D8                 Elf64_Rela <219E60h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT mkfifo
LOAD:00000000000022F0                 Elf64_Rela <219E68h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:0000000000002308                 Elf64_Rela <219E70h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000002320                 Elf64_Rela <219E78h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __xmknod
LOAD:0000000000002338                 Elf64_Rela <219E80h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000002350                 Elf64_Rela <219E88h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000002368                 Elf64_Rela <219E90h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000002380                 Elf64_Rela <219E98h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000002398                 Elf64_Rela <219EA0h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000023B0                 Elf64_Rela <219EA8h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000023C8                 Elf64_Rela <219EB0h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000023E0                 Elf64_Rela <219EB8h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000023F8                 Elf64_Rela <219EC0h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT lchown
LOAD:0000000000002410                 Elf64_Rela <219EC8h, 5200000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000002428                 Elf64_Rela <219ED0h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000002440                 Elf64_Rela <219ED8h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000002458                 Elf64_Rela <219EE0h, 5500000007h, 0> ; R_X86_64_JUMP_SLOT linkat
LOAD:0000000000002470                 Elf64_Rela <219EE8h, 5600000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000002488                 Elf64_Rela <219EF0h, 5700000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000024A0                 Elf64_Rela <219EF8h, 5800000007h, 0> ; R_X86_64_JUMP_SLOT fchmod
LOAD:00000000000024B8                 Elf64_Rela <219F00h, 5900000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:00000000000024D0                 Elf64_Rela <219F08h, 5A00000007h, 0> ; R_X86_64_JUMP_SLOT chmod
LOAD:00000000000024E8                 Elf64_Rela <219F10h, 5B00000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000002500                 Elf64_Rela <219F18h, 5C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000002518                 Elf64_Rela <219F20h, 5D00000007h, 0> ; R_X86_64_JUMP_SLOT __explicit_bzero_chk
LOAD:0000000000002530                 Elf64_Rela <219F28h, 5E00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000002548                 Elf64_Rela <219F30h, 5F00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000002560                 Elf64_Rela <219F38h, 6000000007h, 0> ; R_X86_64_JUMP_SLOT fchown
LOAD:0000000000002578                 Elf64_Rela <219F40h, 6100000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000002590                 Elf64_Rela <219F48h, 6200000007h, 0> ; R_X86_64_JUMP_SLOT rename
LOAD:00000000000025A8                 Elf64_Rela <219F50h, 6300000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:00000000000025C0                 Elf64_Rela <219F58h, 6400000007h, 0> ; R_X86_64_JUMP_SLOT futimens
LOAD:00000000000025D8                 Elf64_Rela <219F60h, 6500000007h, 0> ; R_X86_64_JUMP_SLOT euidaccess
LOAD:00000000000025F0                 Elf64_Rela <219F68h, 6600000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000002608                 Elf64_Rela <219F70h, 6700000007h, 0> ; R_X86_64_JUMP_SLOT renameat
LOAD:0000000000002620                 Elf64_Rela <219F78h, 6800000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:0000000000002638                 Elf64_Rela <219F80h, 6900000007h, 0> ; R_X86_64_JUMP_SLOT getppid
LOAD:0000000000002650                 Elf64_Rela <219F88h, 6A00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000002668                 Elf64_Rela <219F90h, 6B00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000002680                 Elf64_Rela <219F98h, 6C00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000002698                 Elf64_Rela <219FA0h, 6E00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000026B0                 Elf64_Rela <219FA8h, 6F00000007h, 0> ; R_X86_64_JUMP_SLOT symlinkat
LOAD:00000000000026C8                 Elf64_Rela <219FB0h, 7000000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000026E0                 Elf64_Rela <219FB8h, 7200000007h, 0> ; R_X86_64_JUMP_SLOT futimesat
LOAD:00000000000026F8                 Elf64_Rela <219FC0h, 7300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000026F8 LOAD            ends
LOAD:00000000000026F8
.init:0000000000002710 ; ===========================================================================
.init:0000000000002710
.init:0000000000002710 ; Segment type: Pure code
.init:0000000000002710 ; Segment permissions: Read/Execute
.init:0000000000002710 _init           segment dword public 'CODE' use64
.init:0000000000002710                 assume cs:_init
.init:0000000000002710                 ;org 2710h
.init:0000000000002710                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000002710
.init:0000000000002710 ; =============== S U B R O U T I N E =======================================
.init:0000000000002710
.init:0000000000002710
.init:0000000000002710                 public _init_proc
.init:0000000000002710 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000002710                 sub     rsp, 8          ; _init
.init:0000000000002714                 mov     rax, cs:__gmon_start___ptr
.init:000000000000271B                 test    rax, rax
.init:000000000000271E                 jz      short loc_2722
.init:0000000000002720                 call    rax ; __gmon_start__
.init:0000000000002722
.init:0000000000002722 loc_2722:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000002722                 add     rsp, 8
.init:0000000000002726                 retn
.init:0000000000002726 _init_proc      endp
.init:0000000000002726
.init:0000000000002726 _init           ends
.init:0000000000002726
LOAD:0000000000002727 ; ===========================================================================
LOAD:0000000000002727
LOAD:0000000000002727 ; Segment type: Pure code
LOAD:0000000000002727 ; Segment permissions: Read/Execute
LOAD:0000000000002727 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002727                 assume cs:LOAD
LOAD:0000000000002727                 ;org 2727h
LOAD:0000000000002727                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002727                 align 10h
LOAD:0000000000002727 LOAD            ends
LOAD:0000000000002727
.plt:0000000000002730 ; ===========================================================================
.plt:0000000000002730
.plt:0000000000002730 ; Segment type: Pure code
.plt:0000000000002730 ; Segment permissions: Read/Execute
.plt:0000000000002730 _plt            segment para public 'CODE' use64
.plt:0000000000002730                 assume cs:_plt
.plt:0000000000002730                 ;org 2730h
.plt:0000000000002730                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000002730
.plt:0000000000002730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002730
.plt:0000000000002730
.plt:0000000000002730 sub_2730        proc near               ; CODE XREF: .plt:000000000000274B↓j
.plt:0000000000002730                                         ; .plt:000000000000275B↓j ...
.plt:0000000000002730 ; __unwind {
.plt:0000000000002730                 push    cs:qword_219C50
.plt:0000000000002736                 jmp     cs:qword_219C58
.plt:0000000000002736 sub_2730        endp
.plt:0000000000002736
.plt:0000000000002736 ; ---------------------------------------------------------------------------
.plt:000000000000273C                 align 20h
.plt:0000000000002740
.plt:0000000000002740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002740
.plt:0000000000002740 ; Attributes: thunk
.plt:0000000000002740
.plt:0000000000002740 ; char *getenv(const char *name)
.plt:0000000000002740 _getenv         proc near               ; CODE XREF: main+147↓p
.plt:0000000000002740                                         ; set_simple_backup_suffix+37↓p ...
.plt:0000000000002740                 jmp     cs:getenv_ptr
.plt:0000000000002740 _getenv         endp
.plt:0000000000002740
.plt:0000000000002746 ; ---------------------------------------------------------------------------
.plt:0000000000002746                 push    0
.plt:000000000000274B                 jmp     sub_2730
.plt:0000000000002750
.plt:0000000000002750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002750
.plt:0000000000002750 ; Attributes: thunk
.plt:0000000000002750
.plt:0000000000002750 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
.plt:0000000000002750 _utimensat      proc near               ; CODE XREF: utimecmpat+4F9↓p
.plt:0000000000002750                                         ; utimecmpat+74F↓p ...
.plt:0000000000002750                 jmp     cs:utimensat_ptr
.plt:0000000000002750 _utimensat      endp
.plt:0000000000002750
.plt:0000000000002756 ; ---------------------------------------------------------------------------
.plt:0000000000002756                 push    1
.plt:000000000000275B                 jmp     sub_2730
.plt:0000000000002760
.plt:0000000000002760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002760
.plt:0000000000002760 ; Attributes: noreturn thunk
.plt:0000000000002760
.plt:0000000000002760 ; void __noreturn abort(void)
.plt:0000000000002760 _abort          proc near               ; CODE XREF: decode_preserve_arg:def_388B↓p
.plt:0000000000002760                                         ; safe_hasher:loc_BC3D↓p ...
.plt:0000000000002760                 jmp     cs:abort_ptr
.plt:0000000000002760 _abort          endp
.plt:0000000000002760
.plt:0000000000002766 ; ---------------------------------------------------------------------------
.plt:0000000000002766                 push    2
.plt:000000000000276B                 jmp     sub_2730
.plt:0000000000002770
.plt:0000000000002770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002770
.plt:0000000000002770 ; Attributes: thunk
.plt:0000000000002770
.plt:0000000000002770 ; int *__errno_location(void)
.plt:0000000000002770 ___errno_location proc near             ; CODE XREF: restore_default_fscreatecon_or_die+1↓p
.plt:0000000000002770                                         ; main:loc_3643↓p ...
.plt:0000000000002770                 jmp     cs:__errno_location_ptr
.plt:0000000000002770 ___errno_location endp
.plt:0000000000002770
.plt:0000000000002776 ; ---------------------------------------------------------------------------
.plt:0000000000002776                 push    3
.plt:000000000000277B                 jmp     sub_2730
.plt:0000000000002780
.plt:0000000000002780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002780
.plt:0000000000002780 ; Attributes: thunk
.plt:0000000000002780
.plt:0000000000002780 ; int unlink(const char *name)
.plt:0000000000002780 _unlink         proc near               ; CODE XREF: copy_internal+9C1↓p
.plt:0000000000002780                                         ; copy_internal+23EA↓p ...
.plt:0000000000002780                 jmp     cs:unlink_ptr
.plt:0000000000002780 _unlink         endp
.plt:0000000000002780
.plt:0000000000002786 ; ---------------------------------------------------------------------------
.plt:0000000000002786                 push    4
.plt:000000000000278B                 jmp     sub_2730
.plt:0000000000002790
.plt:0000000000002790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002790
.plt:0000000000002790 ; Attributes: thunk
.plt:0000000000002790
.plt:0000000000002790 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000002790 _strncmp        proc near               ; CODE XREF: usage+47C↓p
.plt:0000000000002790                                         ; usage+53D↓p ...
.plt:0000000000002790                 jmp     cs:strncmp_ptr
.plt:0000000000002790 _strncmp        endp
.plt:0000000000002790
.plt:0000000000002796 ; ---------------------------------------------------------------------------
.plt:0000000000002796                 push    5
.plt:000000000000279B                 jmp     sub_2730
.plt:00000000000027A0
.plt:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027A0
.plt:00000000000027A0 ; Attributes: noreturn thunk
.plt:00000000000027A0
.plt:00000000000027A0 ; void __noreturn _exit(int status)
.plt:00000000000027A0 __exit          proc near               ; CODE XREF: close_stdin+AE↓p
.plt:00000000000027A0                                         ; close_stdout+88↓p
.plt:00000000000027A0                 jmp     cs:_exit_ptr
.plt:00000000000027A0 __exit          endp
.plt:00000000000027A0
.plt:00000000000027A6 ; ---------------------------------------------------------------------------
.plt:00000000000027A6                 push    6
.plt:00000000000027AB                 jmp     sub_2730
.plt:00000000000027B0
.plt:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027B0
.plt:00000000000027B0 ; Attributes: thunk
.plt:00000000000027B0
.plt:00000000000027B0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000027B0 _strcpy         proc near               ; CODE XREF: copy_internal+28AD↓p
.plt:00000000000027B0                 jmp     cs:strcpy_ptr
.plt:00000000000027B0 _strcpy         endp
.plt:00000000000027B0
.plt:00000000000027B6 ; ---------------------------------------------------------------------------
.plt:00000000000027B6                 push    7
.plt:00000000000027BB                 jmp     sub_2730
.plt:00000000000027C0
.plt:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027C0
.plt:00000000000027C0 ; Attributes: thunk
.plt:00000000000027C0
.plt:00000000000027C0 ; size_t __fpending(FILE *fp)
.plt:00000000000027C0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000027C0                 jmp     cs:__fpending_ptr
.plt:00000000000027C0 ___fpending     endp
.plt:00000000000027C0
.plt:00000000000027C6 ; ---------------------------------------------------------------------------
.plt:00000000000027C6                 push    8
.plt:00000000000027CB                 jmp     sub_2730
.plt:00000000000027D0
.plt:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027D0
.plt:00000000000027D0 ; Attributes: thunk
.plt:00000000000027D0
.plt:00000000000027D0 ___read_chk     proc near               ; CODE XREF: randread_new+118↓p
.plt:00000000000027D0                 jmp     cs:__read_chk_ptr
.plt:00000000000027D0 ___read_chk     endp
.plt:00000000000027D0
.plt:00000000000027D6 ; ---------------------------------------------------------------------------
.plt:00000000000027D6                 push    9
.plt:00000000000027DB                 jmp     sub_2730
.plt:00000000000027E0
.plt:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027E0
.plt:00000000000027E0 ; Attributes: thunk
.plt:00000000000027E0
.plt:00000000000027E0 ; int mkdir(const char *path, __mode_t mode)
.plt:00000000000027E0 _mkdir          proc near               ; CODE XREF: make_dir_parents_private+2EF↓p
.plt:00000000000027E0                                         ; copy_internal+14B6↓p ...
.plt:00000000000027E0                 jmp     cs:mkdir_ptr
.plt:00000000000027E0 _mkdir          endp
.plt:00000000000027E0
.plt:00000000000027E6 ; ---------------------------------------------------------------------------
.plt:00000000000027E6                 push    0Ah
.plt:00000000000027EB                 jmp     sub_2730
.plt:00000000000027F0
.plt:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027F0
.plt:00000000000027F0 ; Attributes: thunk
.plt:00000000000027F0
.plt:00000000000027F0 ; int unlinkat(int fd, const char *name, int flag)
.plt:00000000000027F0 _unlinkat       proc near               ; CODE XREF: force_linkat+142↓p
.plt:00000000000027F0                                         ; force_symlinkat+131↓p
.plt:00000000000027F0                 jmp     cs:unlinkat_ptr
.plt:00000000000027F0 _unlinkat       endp
.plt:00000000000027F0
.plt:00000000000027F6 ; ---------------------------------------------------------------------------
.plt:00000000000027F6                 push    0Bh
.plt:00000000000027FB                 jmp     sub_2730
.plt:0000000000002800
.plt:0000000000002800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002800
.plt:0000000000002800 ; Attributes: thunk
.plt:0000000000002800
.plt:0000000000002800 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000002800 _qsort          proc near               ; CODE XREF: streamsavedir+18F↓p
.plt:0000000000002800                 jmp     cs:qsort_ptr
.plt:0000000000002800 _qsort          endp
.plt:0000000000002800
.plt:0000000000002806 ; ---------------------------------------------------------------------------
.plt:0000000000002806                 push    0Ch
.plt:000000000000280B                 jmp     sub_2730
.plt:0000000000002810
.plt:0000000000002810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002810
.plt:0000000000002810 ; Attributes: thunk
.plt:0000000000002810
.plt:0000000000002810 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:0000000000002810 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:0000000000002810                 jmp     cs:readlink_ptr
.plt:0000000000002810 _readlink       endp
.plt:0000000000002810
.plt:0000000000002816 ; ---------------------------------------------------------------------------
.plt:0000000000002816                 push    0Dh
.plt:000000000000281B                 jmp     sub_2730
.plt:0000000000002820
.plt:0000000000002820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002820
.plt:0000000000002820 ; Attributes: thunk
.plt:0000000000002820
.plt:0000000000002820 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000002820 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000002820                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000002820                 jmp     cs:fcntl_ptr
.plt:0000000000002820 _fcntl          endp
.plt:0000000000002820
.plt:0000000000002826 ; ---------------------------------------------------------------------------
.plt:0000000000002826                 push    0Eh
.plt:000000000000282B                 jmp     sub_2730
.plt:0000000000002830
.plt:0000000000002830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002830
.plt:0000000000002830 ; Attributes: thunk
.plt:0000000000002830
.plt:0000000000002830 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:0000000000002830 _clock_gettime  proc near               ; CODE XREF: gettime+5↓j
.plt:0000000000002830                                         ; current_timespec+19↓p
.plt:0000000000002830                 jmp     cs:clock_gettime_ptr
.plt:0000000000002830 _clock_gettime  endp
.plt:0000000000002830
.plt:0000000000002836 ; ---------------------------------------------------------------------------
.plt:0000000000002836                 push    0Fh
.plt:000000000000283B                 jmp     sub_2730
.plt:0000000000002840
.plt:0000000000002840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002840
.plt:0000000000002840 ; Attributes: thunk
.plt:0000000000002840
.plt:0000000000002840 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:0000000000002840 _write          proc near               ; CODE XREF: safe_write+21↓p
.plt:0000000000002840                 jmp     cs:write_ptr
.plt:0000000000002840 _write          endp
.plt:0000000000002840
.plt:0000000000002846 ; ---------------------------------------------------------------------------
.plt:0000000000002846                 push    10h
.plt:000000000000284B                 jmp     sub_2730
.plt:0000000000002850
.plt:0000000000002850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002850
.plt:0000000000002850 ; Attributes: thunk
.plt:0000000000002850
.plt:0000000000002850 ; __pid_t getpid(void)
.plt:0000000000002850 _getpid         proc near               ; CODE XREF: randread_new+197↓p
.plt:0000000000002850                                         ; randread_new+2C2↓p
.plt:0000000000002850                 jmp     cs:getpid_ptr
.plt:0000000000002850 _getpid         endp
.plt:0000000000002850
.plt:0000000000002856 ; ---------------------------------------------------------------------------
.plt:0000000000002856                 push    11h
.plt:000000000000285B                 jmp     sub_2730
.plt:0000000000002860
.plt:0000000000002860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002860
.plt:0000000000002860 ; Attributes: thunk
.plt:0000000000002860
.plt:0000000000002860 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000002860 _fread_unlocked proc near               ; CODE XREF: randread+61↓p
.plt:0000000000002860                 jmp     cs:fread_unlocked_ptr
.plt:0000000000002860 _fread_unlocked endp
.plt:0000000000002860
.plt:0000000000002866 ; ---------------------------------------------------------------------------
.plt:0000000000002866                 push    12h
.plt:000000000000286B                 jmp     sub_2730
.plt:0000000000002870
.plt:0000000000002870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002870
.plt:0000000000002870 ; Attributes: thunk
.plt:0000000000002870
.plt:0000000000002870 ; char *textdomain(const char *domainname)
.plt:0000000000002870 _textdomain     proc near               ; CODE XREF: main+76↓p
.plt:0000000000002870                 jmp     cs:textdomain_ptr
.plt:0000000000002870 _textdomain     endp
.plt:0000000000002870
.plt:0000000000002876 ; ---------------------------------------------------------------------------
.plt:0000000000002876                 push    13h
.plt:000000000000287B                 jmp     sub_2730
.plt:0000000000002880
.plt:0000000000002880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002880
.plt:0000000000002880 ; Attributes: thunk
.plt:0000000000002880
.plt:0000000000002880 ; __int64 pathconf(const char *path, int name)
.plt:0000000000002880 _pathconf       proc near               ; CODE XREF: backupfile_internal+5AF↓p
.plt:0000000000002880                 jmp     cs:pathconf_ptr
.plt:0000000000002880 _pathconf       endp
.plt:0000000000002880
.plt:0000000000002886 ; ---------------------------------------------------------------------------
.plt:0000000000002886                 push    14h
.plt:000000000000288B                 jmp     sub_2730
.plt:0000000000002890
.plt:0000000000002890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002890
.plt:0000000000002890 ; Attributes: thunk
.plt:0000000000002890
.plt:0000000000002890 ; int fclose(FILE *stream)
.plt:0000000000002890 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000002890                                         ; rpl_fclose+6B↓j
.plt:0000000000002890                 jmp     cs:fclose_ptr
.plt:0000000000002890 _fclose         endp
.plt:0000000000002890
.plt:0000000000002896 ; ---------------------------------------------------------------------------
.plt:0000000000002896                 push    15h
.plt:000000000000289B                 jmp     sub_2730
.plt:00000000000028A0
.plt:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028A0
.plt:00000000000028A0 ; Attributes: thunk
.plt:00000000000028A0
.plt:00000000000028A0 ; DIR *opendir(const char *name)
.plt:00000000000028A0 _opendir        proc near               ; CODE XREF: opendir_safer+8↓p
.plt:00000000000028A0                 jmp     cs:opendir_ptr
.plt:00000000000028A0 _opendir        endp
.plt:00000000000028A0
.plt:00000000000028A6 ; ---------------------------------------------------------------------------
.plt:00000000000028A6                 push    16h
.plt:00000000000028AB                 jmp     sub_2730
.plt:00000000000028B0
.plt:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028B0
.plt:00000000000028B0 ; Attributes: thunk
.plt:00000000000028B0
.plt:00000000000028B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000028B0 _bindtextdomain proc near               ; CODE XREF: main+6A↓p
.plt:00000000000028B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000028B0 _bindtextdomain endp
.plt:00000000000028B0
.plt:00000000000028B6 ; ---------------------------------------------------------------------------
.plt:00000000000028B6                 push    17h
.plt:00000000000028BB                 jmp     sub_2730
.plt:00000000000028C0
.plt:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028C0
.plt:00000000000028C0 ; Attributes: thunk
.plt:00000000000028C0
.plt:00000000000028C0 ; char *stpcpy(char *dest, const char *src)
.plt:00000000000028C0 _stpcpy         proc near               ; CODE XREF: streamsavedir+1B8↓p
.plt:00000000000028C0                 jmp     cs:stpcpy_ptr
.plt:00000000000028C0 _stpcpy         endp
.plt:00000000000028C0
.plt:00000000000028C6 ; ---------------------------------------------------------------------------
.plt:00000000000028C6                 push    18h
.plt:00000000000028CB                 jmp     sub_2730
.plt:00000000000028D0
.plt:00000000000028D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028D0
.plt:00000000000028D0 ; Attributes: thunk
.plt:00000000000028D0
.plt:00000000000028D0 ; int rmdir(const char *path)
.plt:00000000000028D0 _rmdir          proc near               ; CODE XREF: copy_internal:loc_74A0↓p
.plt:00000000000028D0                 jmp     cs:rmdir_ptr
.plt:00000000000028D0 _rmdir          endp
.plt:00000000000028D0
.plt:00000000000028D6 ; ---------------------------------------------------------------------------
.plt:00000000000028D6                 push    19h
.plt:00000000000028DB                 jmp     sub_2730
.plt:00000000000028E0
.plt:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028E0
.plt:00000000000028E0 ; Attributes: thunk
.plt:00000000000028E0
.plt:00000000000028E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000028E0 _dcgettext      proc near               ; CODE XREF: restore_default_fscreatecon_or_die+1D↓p
.plt:00000000000028E0                                         ; main+4BA↓p ...
.plt:00000000000028E0                 jmp     cs:dcgettext_ptr
.plt:00000000000028E0 _dcgettext      endp
.plt:00000000000028E0
.plt:00000000000028E6 ; ---------------------------------------------------------------------------
.plt:00000000000028E6                 push    1Ah
.plt:00000000000028EB                 jmp     sub_2730
.plt:00000000000028F0
.plt:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028F0
.plt:00000000000028F0 ; Attributes: thunk
.plt:00000000000028F0
.plt:00000000000028F0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000028F0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000028F0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000028F0 ___ctype_get_mb_cur_max endp
.plt:00000000000028F0
.plt:00000000000028F6 ; ---------------------------------------------------------------------------
.plt:00000000000028F6                 push    1Bh
.plt:00000000000028FB                 jmp     sub_2730
.plt:0000000000002900
.plt:0000000000002900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002900
.plt:0000000000002900 ; Attributes: thunk
.plt:0000000000002900
.plt:0000000000002900 ; size_t strlen(const char *s)
.plt:0000000000002900 _strlen         proc near               ; CODE XREF: make_dir_parents_private+41↓p
.plt:0000000000002900                                         ; re_protect+2C↓p ...
.plt:0000000000002900                 jmp     cs:strlen_ptr
.plt:0000000000002900 _strlen         endp
.plt:0000000000002900
.plt:0000000000002906 ; ---------------------------------------------------------------------------
.plt:0000000000002906                 push    1Ch
.plt:000000000000290B                 jmp     sub_2730
.plt:0000000000002910
.plt:0000000000002910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002910
.plt:0000000000002910 ; Attributes: thunk
.plt:0000000000002910
.plt:0000000000002910 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002910 ___lxstat       proc near               ; CODE XREF: make_dir_parents_private+330↓p
.plt:0000000000002910                                         ; copy_internal+5D8↓p ...
.plt:0000000000002910                 jmp     cs:__lxstat_ptr
.plt:0000000000002910 ___lxstat       endp
.plt:0000000000002910
.plt:0000000000002916 ; ---------------------------------------------------------------------------
.plt:0000000000002916                 push    1Dh
.plt:000000000000291B                 jmp     sub_2730
.plt:0000000000002920
.plt:0000000000002920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002920
.plt:0000000000002920 ; Attributes: thunk
.plt:0000000000002920
.plt:0000000000002920 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000002920 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:0000000000002920                 jmp     cs:openat_ptr
.plt:0000000000002920 _openat         endp
.plt:0000000000002920
.plt:0000000000002926 ; ---------------------------------------------------------------------------
.plt:0000000000002926                 push    1Eh
.plt:000000000000292B                 jmp     sub_2730
.plt:0000000000002930
.plt:0000000000002930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002930
.plt:0000000000002930 ; Attributes: noreturn thunk
.plt:0000000000002930
.plt:0000000000002930 ___stack_chk_fail proc near             ; CODE XREF: main:loc_361A↓p
.plt:0000000000002930                                         ; make_dir_parents_private:loc_3FBB↓p ...
.plt:0000000000002930                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000002930 ___stack_chk_fail endp
.plt:0000000000002930
.plt:0000000000002936 ; ---------------------------------------------------------------------------
.plt:0000000000002936                 push    1Fh
.plt:000000000000293B                 jmp     sub_2730
.plt:0000000000002940
.plt:0000000000002940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002940
.plt:0000000000002940 ; Attributes: thunk
.plt:0000000000002940
.plt:0000000000002940 ; __uid_t getuid(void)
.plt:0000000000002940 _getuid         proc near               ; CODE XREF: randread_new+1C4↓p
.plt:0000000000002940                 jmp     cs:getuid_ptr
.plt:0000000000002940 _getuid         endp
.plt:0000000000002940
.plt:0000000000002946 ; ---------------------------------------------------------------------------
.plt:0000000000002946                 push    20h ; ' '
.plt:000000000000294B                 jmp     sub_2730
.plt:0000000000002950
.plt:0000000000002950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002950
.plt:0000000000002950 ; Attributes: thunk
.plt:0000000000002950
.plt:0000000000002950 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000002950 _getopt_long    proc near               ; CODE XREF: main+1BB↓p
.plt:0000000000002950                 jmp     cs:getopt_long_ptr
.plt:0000000000002950 _getopt_long    endp
.plt:0000000000002950
.plt:0000000000002956 ; ---------------------------------------------------------------------------
.plt:0000000000002956                 push    21h ; '!'
.plt:000000000000295B                 jmp     sub_2730
.plt:0000000000002960
.plt:0000000000002960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002960
.plt:0000000000002960 ; Attributes: thunk
.plt:0000000000002960
.plt:0000000000002960 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000002960 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000002960                 jmp     cs:mbrtowc_ptr
.plt:0000000000002960 _mbrtowc        endp
.plt:0000000000002960
.plt:0000000000002966 ; ---------------------------------------------------------------------------
.plt:0000000000002966                 push    22h ; '"'
.plt:000000000000296B                 jmp     sub_2730
.plt:0000000000002970
.plt:0000000000002970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002970
.plt:0000000000002970 ; Attributes: thunk
.plt:0000000000002970
.plt:0000000000002970 ; char *strchr(const char *s, int c)
.plt:0000000000002970 _strchr         proc near               ; CODE XREF: decode_preserve_arg+5B↓p
.plt:0000000000002970                                         ; make_dir_parents_private+105↓p
.plt:0000000000002970                 jmp     cs:strchr_ptr
.plt:0000000000002970 _strchr         endp
.plt:0000000000002970
.plt:0000000000002976 ; ---------------------------------------------------------------------------
.plt:0000000000002976                 push    23h ; '#'
.plt:000000000000297B                 jmp     sub_2730
.plt:0000000000002980
.plt:0000000000002980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002980
.plt:0000000000002980 ; Attributes: thunk
.plt:0000000000002980
.plt:0000000000002980 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000002980 ___fxstatat     proc near               ; CODE XREF: copy_internal+1E3↓p
.plt:0000000000002980                                         ; renameat2+13C↓p ...
.plt:0000000000002980                 jmp     cs:__fxstatat_ptr
.plt:0000000000002980 ___fxstatat     endp
.plt:0000000000002980
.plt:0000000000002986 ; ---------------------------------------------------------------------------
.plt:0000000000002986                 push    24h ; '$'
.plt:000000000000298B                 jmp     sub_2730
.plt:0000000000002990
.plt:0000000000002990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002990
.plt:0000000000002990 ; Attributes: thunk
.plt:0000000000002990
.plt:0000000000002990 ; int __overflow(_IO_FILE *, int)
.plt:0000000000002990 ___overflow     proc near               ; CODE XREF: emit_verbose+B1↓j
.plt:0000000000002990                                         ; argmatch_valid+11B↓j
.plt:0000000000002990                 jmp     cs:__overflow_ptr
.plt:0000000000002990 ___overflow     endp
.plt:0000000000002990
.plt:0000000000002996 ; ---------------------------------------------------------------------------
.plt:0000000000002996                 push    25h ; '%'
.plt:000000000000299B                 jmp     sub_2730
.plt:00000000000029A0
.plt:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029A0
.plt:00000000000029A0 ; Attributes: thunk
.plt:00000000000029A0
.plt:00000000000029A0 ; char *strrchr(const char *s, int c)
.plt:00000000000029A0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000029A0                 jmp     cs:strrchr_ptr
.plt:00000000000029A0 _strrchr        endp
.plt:00000000000029A0
.plt:00000000000029A6 ; ---------------------------------------------------------------------------
.plt:00000000000029A6                 push    26h ; '&'
.plt:00000000000029AB                 jmp     sub_2730
.plt:00000000000029B0
.plt:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029B0
.plt:00000000000029B0 ; Attributes: thunk
.plt:00000000000029B0
.plt:00000000000029B0 ; int ftruncate(int fd, __off_t length)
.plt:00000000000029B0 _ftruncate      proc near               ; CODE XREF: copy_internal+3B6D↓p
.plt:00000000000029B0                                         ; copy_internal+3C42↓p
.plt:00000000000029B0                 jmp     cs:ftruncate_ptr
.plt:00000000000029B0 _ftruncate      endp
.plt:00000000000029B0
.plt:00000000000029B6 ; ---------------------------------------------------------------------------
.plt:00000000000029B6                 push    27h ; '''
.plt:00000000000029BB                 jmp     sub_2730
.plt:00000000000029C0
.plt:00000000000029C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029C0
.plt:00000000000029C0 ; Attributes: thunk
.plt:00000000000029C0
.plt:00000000000029C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000029C0 _lseek          proc near               ; CODE XREF: create_hole+1D↓p
.plt:00000000000029C0                                         ; copy_internal+322B↓p ...
.plt:00000000000029C0                 jmp     cs:lseek_ptr
.plt:00000000000029C0 _lseek          endp
.plt:00000000000029C0
.plt:00000000000029C6 ; ---------------------------------------------------------------------------
.plt:00000000000029C6                 push    28h ; '('
.plt:00000000000029CB                 jmp     sub_2730
.plt:00000000000029D0
.plt:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029D0
.plt:00000000000029D0 ; Attributes: thunk
.plt:00000000000029D0
.plt:00000000000029D0 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
.plt:00000000000029D0 _gettimeofday   proc near               ; CODE XREF: randread_new+188↓p
.plt:00000000000029D0                                         ; randread_new+278↓p
.plt:00000000000029D0                 jmp     cs:gettimeofday_ptr
.plt:00000000000029D0 _gettimeofday   endp
.plt:00000000000029D0
.plt:00000000000029D6 ; ---------------------------------------------------------------------------
.plt:00000000000029D6                 push    29h ; ')'
.plt:00000000000029DB                 jmp     sub_2730
.plt:00000000000029E0
.plt:00000000000029E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029E0
.plt:00000000000029E0 ; Attributes: noreturn thunk
.plt:00000000000029E0
.plt:00000000000029E0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000029E0 ___assert_fail  proc near               ; CODE XREF: copy+C0↓p
.plt:00000000000029E0                                         ; copy+DF↓p ...
.plt:00000000000029E0                 jmp     cs:__assert_fail_ptr
.plt:00000000000029E0 ___assert_fail  endp
.plt:00000000000029E0
.plt:00000000000029E6 ; ---------------------------------------------------------------------------
.plt:00000000000029E6                 push    2Ah ; '*'
.plt:00000000000029EB                 jmp     sub_2730
.plt:00000000000029F0
.plt:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029F0
.plt:00000000000029F0 ; Attributes: thunk
.plt:00000000000029F0
.plt:00000000000029F0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000029F0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000029F0                                         ; xzalloc+12↓j
.plt:00000000000029F0                 jmp     cs:memset_ptr
.plt:00000000000029F0 _memset         endp
.plt:00000000000029F0
.plt:00000000000029F6 ; ---------------------------------------------------------------------------
.plt:00000000000029F6                 push    2Bh ; '+'
.plt:00000000000029FB                 jmp     sub_2730
.plt:0000000000002A00
.plt:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A00
.plt:0000000000002A00 ; Attributes: thunk
.plt:0000000000002A00
.plt:0000000000002A00 ; __uid_t geteuid(void)
.plt:0000000000002A00 _geteuid        proc near               ; CODE XREF: cp_options_default+1B↓p
.plt:0000000000002A00                                         ; copy_internal:loc_9ADE↓p ...
.plt:0000000000002A00                 jmp     cs:geteuid_ptr
.plt:0000000000002A00 _geteuid        endp
.plt:0000000000002A00
.plt:0000000000002A06 ; ---------------------------------------------------------------------------
.plt:0000000000002A06                 push    2Ch ; ','
.plt:0000000000002A0B                 jmp     sub_2730
.plt:0000000000002A10
.plt:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A10
.plt:0000000000002A10 ; Attributes: thunk
.plt:0000000000002A10
.plt:0000000000002A10 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:0000000000002A10 _ioctl          proc near               ; CODE XREF: copy_internal+3D57↓p
.plt:0000000000002A10                                         ; extent_scan_read+79↓p
.plt:0000000000002A10                 jmp     cs:ioctl_ptr
.plt:0000000000002A10 _ioctl          endp
.plt:0000000000002A10
.plt:0000000000002A16 ; ---------------------------------------------------------------------------
.plt:0000000000002A16                 push    2Dh ; '-'
.plt:0000000000002A1B                 jmp     sub_2730
.plt:0000000000002A20
.plt:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A20
.plt:0000000000002A20 ; Attributes: thunk
.plt:0000000000002A20
.plt:0000000000002A20 ; char *canonicalize_file_name(const char *name)
.plt:0000000000002A20 _canonicalize_file_name proc near       ; CODE XREF: copy_internal+1717↓p
.plt:0000000000002A20                 jmp     cs:canonicalize_file_name_ptr
.plt:0000000000002A20 _canonicalize_file_name endp
.plt:0000000000002A20
.plt:0000000000002A26 ; ---------------------------------------------------------------------------
.plt:0000000000002A26                 push    2Eh ; '.'
.plt:0000000000002A2B                 jmp     sub_2730
.plt:0000000000002A30
.plt:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A30
.plt:0000000000002A30 ; Attributes: thunk
.plt:0000000000002A30
.plt:0000000000002A30 ; int close(int fd)
.plt:0000000000002A30 _close          proc near               ; CODE XREF: copy_internal+2165↓p
.plt:0000000000002A30                                         ; copy_internal+32A2↓p ...
.plt:0000000000002A30                 jmp     cs:close_ptr
.plt:0000000000002A30 _close          endp
.plt:0000000000002A30
.plt:0000000000002A36 ; ---------------------------------------------------------------------------
.plt:0000000000002A36                 push    2Fh ; '/'
.plt:0000000000002A3B                 jmp     sub_2730
.plt:0000000000002A40
.plt:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A40
.plt:0000000000002A40 ; Attributes: thunk
.plt:0000000000002A40
.plt:0000000000002A40 ; void rewinddir(DIR *dirp)
.plt:0000000000002A40 _rewinddir      proc near               ; CODE XREF: backupfile_internal+101↓p
.plt:0000000000002A40                 jmp     cs:rewinddir_ptr
.plt:0000000000002A40 _rewinddir      endp
.plt:0000000000002A40
.plt:0000000000002A46 ; ---------------------------------------------------------------------------
.plt:0000000000002A46                 push    30h ; '0'
.plt:0000000000002A4B                 jmp     sub_2730
.plt:0000000000002A50
.plt:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A50
.plt:0000000000002A50 ; Attributes: thunk
.plt:0000000000002A50
.plt:0000000000002A50 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000002A50 _strspn         proc near               ; CODE XREF: try_tempname_len+68↓p
.plt:0000000000002A50                 jmp     cs:strspn_ptr
.plt:0000000000002A50 _strspn         endp
.plt:0000000000002A50
.plt:0000000000002A56 ; ---------------------------------------------------------------------------
.plt:0000000000002A56                 push    31h ; '1'
.plt:0000000000002A5B                 jmp     sub_2730
.plt:0000000000002A60
.plt:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A60
.plt:0000000000002A60 ; Attributes: thunk
.plt:0000000000002A60
.plt:0000000000002A60 ; int closedir(DIR *dirp)
.plt:0000000000002A60 _closedir       proc near               ; CODE XREF: backupfile_internal+377↓p
.plt:0000000000002A60                                         ; backupfile_internal+5DA↓p ...
.plt:0000000000002A60                 jmp     cs:closedir_ptr
.plt:0000000000002A60 _closedir       endp
.plt:0000000000002A60
.plt:0000000000002A66 ; ---------------------------------------------------------------------------
.plt:0000000000002A66                 push    32h ; '2'
.plt:0000000000002A6B                 jmp     sub_2730
.plt:0000000000002A70
.plt:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A70
.plt:0000000000002A70 ; Attributes: thunk
.plt:0000000000002A70
.plt:0000000000002A70 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000002A70 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000002A70                                         ; fadvise+16↓j
.plt:0000000000002A70                 jmp     cs:posix_fadvise_ptr
.plt:0000000000002A70 _posix_fadvise  endp
.plt:0000000000002A70
.plt:0000000000002A76 ; ---------------------------------------------------------------------------
.plt:0000000000002A76                 push    33h ; '3'
.plt:0000000000002A7B                 jmp     sub_2730
.plt:0000000000002A80
.plt:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A80
.plt:0000000000002A80 ; Attributes: thunk
.plt:0000000000002A80
.plt:0000000000002A80 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000002A80 _read           proc near               ; CODE XREF: sparse_copy+B0↓p
.plt:0000000000002A80                 jmp     cs:read_ptr
.plt:0000000000002A80 _read           endp
.plt:0000000000002A80
.plt:0000000000002A86 ; ---------------------------------------------------------------------------
.plt:0000000000002A86                 push    34h ; '4'
.plt:0000000000002A8B                 jmp     sub_2730
.plt:0000000000002A90
.plt:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A90
.plt:0000000000002A90 ; Attributes: thunk
.plt:0000000000002A90
.plt:0000000000002A90 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000002A90 _memcmp         proc near               ; CODE XREF: sparse_copy+1A2↓p
.plt:0000000000002A90                                         ; copy_internal+2832↓p ...
.plt:0000000000002A90                 jmp     cs:memcmp_ptr
.plt:0000000000002A90 _memcmp         endp
.plt:0000000000002A90
.plt:0000000000002A96 ; ---------------------------------------------------------------------------
.plt:0000000000002A96                 push    35h ; '5'
.plt:0000000000002A9B                 jmp     sub_2730
.plt:0000000000002AA0
.plt:0000000000002AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AA0
.plt:0000000000002AA0 ; Attributes: thunk
.plt:0000000000002AA0
.plt:0000000000002AA0 ; int fallocate(int fd, int mode, __off_t offset, __off_t len)
.plt:0000000000002AA0 _fallocate      proc near               ; CODE XREF: punch_hole+C↓p
.plt:0000000000002AA0                 jmp     cs:fallocate_ptr
.plt:0000000000002AA0 _fallocate      endp
.plt:0000000000002AA0
.plt:0000000000002AA6 ; ---------------------------------------------------------------------------
.plt:0000000000002AA6                 push    36h ; '6'
.plt:0000000000002AAB                 jmp     sub_2730
.plt:0000000000002AB0
.plt:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AB0
.plt:0000000000002AB0 ; Attributes: thunk
.plt:0000000000002AB0
.plt:0000000000002AB0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000002AB0 _fputs_unlocked proc near               ; CODE XREF: usage+A3↓p
.plt:0000000000002AB0                                         ; usage+C8↓p ...
.plt:0000000000002AB0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000002AB0 _fputs_unlocked endp
.plt:0000000000002AB0
.plt:0000000000002AB6 ; ---------------------------------------------------------------------------
.plt:0000000000002AB6                 push    37h ; '7'
.plt:0000000000002ABB                 jmp     sub_2730
.plt:0000000000002AC0
.plt:0000000000002AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AC0
.plt:0000000000002AC0 ; Attributes: thunk
.plt:0000000000002AC0
.plt:0000000000002AC0 ; int utimes(const char *file, const struct timeval tvp[2])
.plt:0000000000002AC0 _utimes         proc near               ; CODE XREF: fdutimens+350↓p
.plt:0000000000002AC0                 jmp     cs:utimes_ptr
.plt:0000000000002AC0 _utimes         endp
.plt:0000000000002AC0
.plt:0000000000002AC6 ; ---------------------------------------------------------------------------
.plt:0000000000002AC6                 push    38h ; '8'
.plt:0000000000002ACB                 jmp     sub_2730
.plt:0000000000002AD0
.plt:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AD0
.plt:0000000000002AD0 ; Attributes: thunk
.plt:0000000000002AD0
.plt:0000000000002AD0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002AD0 _calloc         proc near               ; CODE XREF: write_zeros+74↓p
.plt:0000000000002AD0                                         ; hash_initialize+B1↓p ...
.plt:0000000000002AD0                 jmp     cs:calloc_ptr
.plt:0000000000002AD0 _calloc         endp
.plt:0000000000002AD0
.plt:0000000000002AD6 ; ---------------------------------------------------------------------------
.plt:0000000000002AD6                 push    39h ; '9'
.plt:0000000000002ADB                 jmp     sub_2730
.plt:0000000000002AE0
.plt:0000000000002AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AE0
.plt:0000000000002AE0 ; Attributes: thunk
.plt:0000000000002AE0
.plt:0000000000002AE0 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000002AE0 ___getdelim     proc near               ; CODE XREF: yesno+3F↓p
.plt:0000000000002AE0                 jmp     cs:__getdelim_ptr
.plt:0000000000002AE0 ___getdelim     endp
.plt:0000000000002AE0
.plt:0000000000002AE6 ; ---------------------------------------------------------------------------
.plt:0000000000002AE6                 push    3Ah ; ':'
.plt:0000000000002AEB                 jmp     sub_2730
.plt:0000000000002AF0
.plt:0000000000002AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AF0
.plt:0000000000002AF0 ; Attributes: thunk
.plt:0000000000002AF0
.plt:0000000000002AF0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002AF0 _strcmp         proc near               ; CODE XREF: do_copy+BB↓p
.plt:0000000000002AF0                                         ; copy_internal+284E↓p ...
.plt:0000000000002AF0                 jmp     cs:strcmp_ptr
.plt:0000000000002AF0 _strcmp         endp
.plt:0000000000002AF0
.plt:0000000000002AF6 ; ---------------------------------------------------------------------------
.plt:0000000000002AF6                 push    3Bh ; ';'
.plt:0000000000002AFB                 jmp     sub_2730
.plt:0000000000002B00
.plt:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B00
.plt:0000000000002B00 ; Attributes: thunk
.plt:0000000000002B00
.plt:0000000000002B00 ; int dirfd(DIR *dirp)
.plt:0000000000002B00 _dirfd          proc near               ; CODE XREF: opendir_safer+18↓p
.plt:0000000000002B00                 jmp     cs:dirfd_ptr
.plt:0000000000002B00 _dirfd          endp
.plt:0000000000002B00
.plt:0000000000002B06 ; ---------------------------------------------------------------------------
.plt:0000000000002B06                 push    3Ch ; '<'
.plt:0000000000002B0B                 jmp     sub_2730
.plt:0000000000002B10
.plt:0000000000002B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B10
.plt:0000000000002B10 ; Attributes: thunk
.plt:0000000000002B10
.plt:0000000000002B10 ; __int64 fpathconf(int fd, int name)
.plt:0000000000002B10 _fpathconf      proc near               ; CODE XREF: backupfile_internal+463↓p
.plt:0000000000002B10                 jmp     cs:fpathconf_ptr
.plt:0000000000002B10 _fpathconf      endp
.plt:0000000000002B10
.plt:0000000000002B16 ; ---------------------------------------------------------------------------
.plt:0000000000002B16                 push    3Dh ; '='
.plt:0000000000002B1B                 jmp     sub_2730
.plt:0000000000002B20
.plt:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B20
.plt:0000000000002B20 ; Attributes: thunk
.plt:0000000000002B20
.plt:0000000000002B20 ; int rpmatch(const char *response)
.plt:0000000000002B20 _rpmatch        proc near               ; CODE XREF: yesno:loc_11308↓p
.plt:0000000000002B20                 jmp     cs:rpmatch_ptr
.plt:0000000000002B20 _rpmatch        endp
.plt:0000000000002B20
.plt:0000000000002B26 ; ---------------------------------------------------------------------------
.plt:0000000000002B26                 push    3Eh ; '>'
.plt:0000000000002B2B                 jmp     sub_2730
.plt:0000000000002B30
.plt:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B30
.plt:0000000000002B30 ; Attributes: thunk
.plt:0000000000002B30
.plt:0000000000002B30 ; __int64 syscall(__int64 sysno, ...)
.plt:0000000000002B30 _syscall        proc near               ; CODE XREF: renameat2+46↓p
.plt:0000000000002B30                 jmp     cs:syscall_ptr
.plt:0000000000002B30 _syscall        endp
.plt:0000000000002B30
.plt:0000000000002B36 ; ---------------------------------------------------------------------------
.plt:0000000000002B36                 push    3Fh ; '?'
.plt:0000000000002B3B                 jmp     sub_2730
.plt:0000000000002B40
.plt:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B40
.plt:0000000000002B40 ; Attributes: thunk
.plt:0000000000002B40
.plt:0000000000002B40 ; int mkfifo(const char *path, __mode_t mode)
.plt:0000000000002B40 _mkfifo         proc near               ; CODE XREF: copy_internal+29CD↓p
.plt:0000000000002B40                 jmp     cs:mkfifo_ptr
.plt:0000000000002B40 _mkfifo         endp
.plt:0000000000002B40
.plt:0000000000002B46 ; ---------------------------------------------------------------------------
.plt:0000000000002B46                 push    40h ; '@'
.plt:0000000000002B4B                 jmp     sub_2730
.plt:0000000000002B50
.plt:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B50
.plt:0000000000002B50 ; Attributes: thunk
.plt:0000000000002B50
.plt:0000000000002B50 ; __mode_t umask(__mode_t mask)
.plt:0000000000002B50 _umask          proc near               ; CODE XREF: cached_umask+12↓p
.plt:0000000000002B50                                         ; cached_umask+21↓p
.plt:0000000000002B50                 jmp     cs:umask_ptr
.plt:0000000000002B50 _umask          endp
.plt:0000000000002B50
.plt:0000000000002B56 ; ---------------------------------------------------------------------------
.plt:0000000000002B56                 push    41h ; 'A'
.plt:0000000000002B5B                 jmp     sub_2730
.plt:0000000000002B60
.plt:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B60
.plt:0000000000002B60 ; Attributes: thunk
.plt:0000000000002B60
.plt:0000000000002B60 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000002B60 _memcpy         proc near               ; CODE XREF: make_dir_parents_private+61↓p
.plt:0000000000002B60                                         ; make_dir_parents_private+91↓p ...
.plt:0000000000002B60                 jmp     cs:memcpy_ptr
.plt:0000000000002B60 _memcpy         endp
.plt:0000000000002B60
.plt:0000000000002B66 ; ---------------------------------------------------------------------------
.plt:0000000000002B66                 push    42h ; 'B'
.plt:0000000000002B6B                 jmp     sub_2730
.plt:0000000000002B70
.plt:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B70
.plt:0000000000002B70 ; Attributes: thunk
.plt:0000000000002B70
.plt:0000000000002B70 ; int __xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
.plt:0000000000002B70 ___xmknod       proc near               ; CODE XREF: copy_internal+25DF↓p
.plt:0000000000002B70                                         ; copy_internal+29A8↓p
.plt:0000000000002B70                 jmp     cs:__xmknod_ptr
.plt:0000000000002B70 ___xmknod       endp
.plt:0000000000002B70
.plt:0000000000002B76 ; ---------------------------------------------------------------------------
.plt:0000000000002B76                 push    43h ; 'C'
.plt:0000000000002B7B                 jmp     sub_2730
.plt:0000000000002B80
.plt:0000000000002B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B80
.plt:0000000000002B80 ; Attributes: thunk
.plt:0000000000002B80
.plt:0000000000002B80 ; int fileno(FILE *stream)
.plt:0000000000002B80 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000002B80                                         ; rpl_fseeko+2E↓p ...
.plt:0000000000002B80                 jmp     cs:fileno_ptr
.plt:0000000000002B80 _fileno         endp
.plt:0000000000002B80
.plt:0000000000002B86 ; ---------------------------------------------------------------------------
.plt:0000000000002B86                 push    44h ; 'D'
.plt:0000000000002B8B                 jmp     sub_2730
.plt:0000000000002B90
.plt:0000000000002B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B90
.plt:0000000000002B90 ; Attributes: thunk
.plt:0000000000002B90
.plt:0000000000002B90 ; __gid_t getgid(void)
.plt:0000000000002B90 _getgid         proc near               ; CODE XREF: randread_new+1FC↓p
.plt:0000000000002B90                 jmp     cs:getgid_ptr
.plt:0000000000002B90 _getgid         endp
.plt:0000000000002B90
.plt:0000000000002B96 ; ---------------------------------------------------------------------------
.plt:0000000000002B96                 push    45h ; 'E'
.plt:0000000000002B9B                 jmp     sub_2730
.plt:0000000000002BA0
.plt:0000000000002BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BA0
.plt:0000000000002BA0 ; Attributes: thunk
.plt:0000000000002BA0
.plt:0000000000002BA0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002BA0 ___xstat        proc near               ; CODE XREF: main+46C↓p
.plt:0000000000002BA0                                         ; target_directory_operand+1F↓p ...
.plt:0000000000002BA0                 jmp     cs:__xstat_ptr
.plt:0000000000002BA0 ___xstat        endp
.plt:0000000000002BA0
.plt:0000000000002BA6 ; ---------------------------------------------------------------------------
.plt:0000000000002BA6                 push    46h ; 'F'
.plt:0000000000002BAB                 jmp     sub_2730
.plt:0000000000002BB0
.plt:0000000000002BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BB0
.plt:0000000000002BB0 ; Attributes: thunk
.plt:0000000000002BB0
.plt:0000000000002BB0 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000002BB0 _readdir        proc near               ; CODE XREF: backupfile_internal+133↓p
.plt:0000000000002BB0                                         ; backupfile_internal+2DA↓p ...
.plt:0000000000002BB0                 jmp     cs:readdir_ptr
.plt:0000000000002BB0 _readdir        endp
.plt:0000000000002BB0
.plt:0000000000002BB6 ; ---------------------------------------------------------------------------
.plt:0000000000002BB6                 push    47h ; 'G'
.plt:0000000000002BBB                 jmp     sub_2730
.plt:0000000000002BC0
.plt:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BC0
.plt:0000000000002BC0 ; Attributes: thunk
.plt:0000000000002BC0
.plt:0000000000002BC0 ; void *malloc(size_t size)
.plt:0000000000002BC0 _malloc         proc near               ; CODE XREF: samedir_template+22↓p
.plt:0000000000002BC0                                         ; areadlink_with_size+43↓p ...
.plt:0000000000002BC0                 jmp     cs:malloc_ptr
.plt:0000000000002BC0 _malloc         endp
.plt:0000000000002BC0
.plt:0000000000002BC6 ; ---------------------------------------------------------------------------
.plt:0000000000002BC6                 push    48h ; 'H'
.plt:0000000000002BCB                 jmp     sub_2730
.plt:0000000000002BD0
.plt:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BD0
.plt:0000000000002BD0 ; Attributes: thunk
.plt:0000000000002BD0
.plt:0000000000002BD0 ; int fflush(FILE *stream)
.plt:0000000000002BD0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000002BD0                                         ; rpl_fflush+3B↓j
.plt:0000000000002BD0                 jmp     cs:fflush_ptr
.plt:0000000000002BD0 _fflush         endp
.plt:0000000000002BD0
.plt:0000000000002BD6 ; ---------------------------------------------------------------------------
.plt:0000000000002BD6                 push    49h ; 'I'
.plt:0000000000002BDB                 jmp     sub_2730
.plt:0000000000002BE0
.plt:0000000000002BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BE0
.plt:0000000000002BE0 ; Attributes: thunk
.plt:0000000000002BE0
.plt:0000000000002BE0 ; char *nl_langinfo(nl_item item)
.plt:0000000000002BE0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000002BE0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002BE0 _nl_langinfo    endp
.plt:0000000000002BE0
.plt:0000000000002BE6 ; ---------------------------------------------------------------------------
.plt:0000000000002BE6                 push    4Ah ; 'J'
.plt:0000000000002BEB                 jmp     sub_2730
.plt:0000000000002BF0
.plt:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BF0
.plt:0000000000002BF0 ; Attributes: thunk
.plt:0000000000002BF0
.plt:0000000000002BF0 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000002BF0 ___fxstat       proc near               ; CODE XREF: copy_internal+20E1↓p
.plt:0000000000002BF0                                         ; copy_internal+2EC2↓p ...
.plt:0000000000002BF0                 jmp     cs:__fxstat_ptr
.plt:0000000000002BF0 ___fxstat       endp
.plt:0000000000002BF0
.plt:0000000000002BF6 ; ---------------------------------------------------------------------------
.plt:0000000000002BF6                 push    4Bh ; 'K'
.plt:0000000000002BFB                 jmp     sub_2730
.plt:0000000000002C00
.plt:0000000000002C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C00
.plt:0000000000002C00 ; Attributes: thunk
.plt:0000000000002C00
.plt:0000000000002C00 ; int lchown(const char *file, __uid_t owner, __gid_t group)
.plt:0000000000002C00 _lchown         proc near               ; CODE XREF: re_protect+149↓p
.plt:0000000000002C00                                         ; re_protect+174↓p ...
.plt:0000000000002C00                 jmp     cs:lchown_ptr
.plt:0000000000002C00 _lchown         endp
.plt:0000000000002C00
.plt:0000000000002C06 ; ---------------------------------------------------------------------------
.plt:0000000000002C06                 push    4Ch ; 'L'
.plt:0000000000002C0B                 jmp     sub_2730
.plt:0000000000002C10
.plt:0000000000002C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C10
.plt:0000000000002C10 ; Attributes: thunk
.plt:0000000000002C10
.plt:0000000000002C10 ; int __freading(FILE *fp)
.plt:0000000000002C10 ___freading     proc near               ; CODE XREF: rpl_fflush+9↓p
.plt:0000000000002C10                                         ; rpl_fclose+13↓p
.plt:0000000000002C10                 jmp     cs:__freading_ptr
.plt:0000000000002C10 ___freading     endp
.plt:0000000000002C10
.plt:0000000000002C16 ; ---------------------------------------------------------------------------
.plt:0000000000002C16                 push    4Dh ; 'M'
.plt:0000000000002C1B                 jmp     sub_2730
.plt:0000000000002C20
.plt:0000000000002C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C20
.plt:0000000000002C20 ; Attributes: thunk
.plt:0000000000002C20
.plt:0000000000002C20 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002C20 _realloc        proc near               ; CODE XREF: backupfile_internal+261↓p
.plt:0000000000002C20                                         ; xrealloc+11↓p
.plt:0000000000002C20                 jmp     cs:realloc_ptr
.plt:0000000000002C20 _realloc        endp
.plt:0000000000002C20
.plt:0000000000002C26 ; ---------------------------------------------------------------------------
.plt:0000000000002C26                 push    4Eh ; 'N'
.plt:0000000000002C2B                 jmp     sub_2730
.plt:0000000000002C30
.plt:0000000000002C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C30
.plt:0000000000002C30 ; Attributes: thunk
.plt:0000000000002C30
.plt:0000000000002C30 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000002C30 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000002C30                 jmp     cs:fdopen_ptr
.plt:0000000000002C30 _fdopen         endp
.plt:0000000000002C30
.plt:0000000000002C36 ; ---------------------------------------------------------------------------
.plt:0000000000002C36                 push    4Fh ; 'O'
.plt:0000000000002C3B                 jmp     sub_2730
.plt:0000000000002C40
.plt:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C40
.plt:0000000000002C40 ; Attributes: thunk
.plt:0000000000002C40
.plt:0000000000002C40 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
.plt:0000000000002C40 _linkat         proc near               ; CODE XREF: try_link+13↓j
.plt:0000000000002C40                                         ; force_linkat+F7↓p
.plt:0000000000002C40                 jmp     cs:linkat_ptr
.plt:0000000000002C40 _linkat         endp
.plt:0000000000002C40
.plt:0000000000002C46 ; ---------------------------------------------------------------------------
.plt:0000000000002C46                 push    50h ; 'P'
.plt:0000000000002C4B                 jmp     sub_2730
.plt:0000000000002C50
.plt:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C50
.plt:0000000000002C50 ; Attributes: thunk
.plt:0000000000002C50
.plt:0000000000002C50 ; char *setlocale(int category, const char *locale)
.plt:0000000000002C50 _setlocale      proc near               ; CODE XREF: main+57↓p
.plt:0000000000002C50                                         ; usage+463↓p ...
.plt:0000000000002C50                 jmp     cs:setlocale_ptr
.plt:0000000000002C50 _setlocale      endp
.plt:0000000000002C50
.plt:0000000000002C56 ; ---------------------------------------------------------------------------
.plt:0000000000002C56                 push    51h ; 'Q'
.plt:0000000000002C5B                 jmp     sub_2730
.plt:0000000000002C60
.plt:0000000000002C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C60
.plt:0000000000002C60 ; Attributes: thunk
.plt:0000000000002C60
.plt:0000000000002C60 ___printf_chk   proc near               ; CODE XREF: make_dir_parents_private+31C↓p
.plt:0000000000002C60                                         ; usage+7E↓p ...
.plt:0000000000002C60                 jmp     cs:__printf_chk_ptr
.plt:0000000000002C60 ___printf_chk   endp
.plt:0000000000002C60
.plt:0000000000002C66 ; ---------------------------------------------------------------------------
.plt:0000000000002C66                 push    52h ; 'R'
.plt:0000000000002C6B                 jmp     sub_2730
.plt:0000000000002C70
.plt:0000000000002C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C70
.plt:0000000000002C70 ; Attributes: thunk
.plt:0000000000002C70
.plt:0000000000002C70 ; int fchmod(int fd, __mode_t mode)
.plt:0000000000002C70 _fchmod         proc near               ; CODE XREF: fchmod_or_lchmod+9↓j
.plt:0000000000002C70                                         ; chmod_or_fchmod+B↓j
.plt:0000000000002C70                 jmp     cs:fchmod_ptr
.plt:0000000000002C70 _fchmod         endp
.plt:0000000000002C70
.plt:0000000000002C76 ; ---------------------------------------------------------------------------
.plt:0000000000002C76                 push    53h ; 'S'
.plt:0000000000002C7B                 jmp     sub_2730
.plt:0000000000002C80
.plt:0000000000002C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C80
.plt:0000000000002C80 ; Attributes: thunk
.plt:0000000000002C80
.plt:0000000000002C80 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000002C80 _setvbuf        proc near               ; CODE XREF: randread_new+82↓p
.plt:0000000000002C80                 jmp     cs:setvbuf_ptr
.plt:0000000000002C80 _setvbuf        endp
.plt:0000000000002C80
.plt:0000000000002C86 ; ---------------------------------------------------------------------------
.plt:0000000000002C86                 push    54h ; 'T'
.plt:0000000000002C8B                 jmp     sub_2730
.plt:0000000000002C90
.plt:0000000000002C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C90
.plt:0000000000002C90 ; Attributes: thunk
.plt:0000000000002C90
.plt:0000000000002C90 ; int chmod(const char *file, __mode_t mode)
.plt:0000000000002C90 _chmod          proc near               ; CODE XREF: fchmod_or_lchmod+11↓j
.plt:0000000000002C90                                         ; make_dir_parents_private+38D↓p ...
.plt:0000000000002C90                 jmp     cs:chmod_ptr
.plt:0000000000002C90 _chmod          endp
.plt:0000000000002C90
.plt:0000000000002C96 ; ---------------------------------------------------------------------------
.plt:0000000000002C96                 push    55h ; 'U'
.plt:0000000000002C9B                 jmp     sub_2730
.plt:0000000000002CA0
.plt:0000000000002CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CA0
.plt:0000000000002CA0 ; Attributes: thunk
.plt:0000000000002CA0
.plt:0000000000002CA0 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000002CA0 _mempcpy        proc near               ; CODE XREF: copy_internal+28A2↓p
.plt:0000000000002CA0                                         ; samedir_template+3A↓p ...
.plt:0000000000002CA0                 jmp     cs:mempcpy_ptr
.plt:0000000000002CA0 _mempcpy        endp
.plt:0000000000002CA0
.plt:0000000000002CA6 ; ---------------------------------------------------------------------------
.plt:0000000000002CA6                 push    56h ; 'V'
.plt:0000000000002CAB                 jmp     sub_2730
.plt:0000000000002CB0
.plt:0000000000002CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CB0
.plt:0000000000002CB0 ; Attributes: thunk
.plt:0000000000002CB0
.plt:0000000000002CB0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002CB0 _error          proc near               ; CODE XREF: restore_default_fscreatecon_or_die+2E↓p
.plt:0000000000002CB0                                         ; main+4CE↓p ...
.plt:0000000000002CB0                 jmp     cs:error_ptr
.plt:0000000000002CB0 _error          endp
.plt:0000000000002CB0
.plt:0000000000002CB6 ; ---------------------------------------------------------------------------
.plt:0000000000002CB6                 push    57h ; 'W'
.plt:0000000000002CBB                 jmp     sub_2730
.plt:0000000000002CC0
.plt:0000000000002CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CC0
.plt:0000000000002CC0 ; Attributes: thunk
.plt:0000000000002CC0
.plt:0000000000002CC0 ___explicit_bzero_chk proc near         ; CODE XREF: randint_free+10↓p
.plt:0000000000002CC0                                         ; randint_all_free+32↓p ...
.plt:0000000000002CC0                 jmp     cs:__explicit_bzero_chk_ptr
.plt:0000000000002CC0 ___explicit_bzero_chk endp
.plt:0000000000002CC0
.plt:0000000000002CC6 ; ---------------------------------------------------------------------------
.plt:0000000000002CC6                 push    58h ; 'X'
.plt:0000000000002CCB                 jmp     sub_2730
.plt:0000000000002CD0
.plt:0000000000002CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CD0
.plt:0000000000002CD0 ; Attributes: thunk
.plt:0000000000002CD0
.plt:0000000000002CD0 ; int open(const char *file, int oflag, ...)
.plt:0000000000002CD0 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000002CD0                                         ; try_file+11↓j ...
.plt:0000000000002CD0                 jmp     cs:open_ptr
.plt:0000000000002CD0 _open           endp
.plt:0000000000002CD0
.plt:0000000000002CD6 ; ---------------------------------------------------------------------------
.plt:0000000000002CD6                 push    59h ; 'Y'
.plt:0000000000002CDB                 jmp     sub_2730
.plt:0000000000002CE0
.plt:0000000000002CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CE0
.plt:0000000000002CE0 ; Attributes: thunk
.plt:0000000000002CE0
.plt:0000000000002CE0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002CE0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_113CA↓j
.plt:0000000000002CE0                 jmp     cs:fseeko_ptr
.plt:0000000000002CE0 _fseeko         endp
.plt:0000000000002CE0
.plt:0000000000002CE6 ; ---------------------------------------------------------------------------
.plt:0000000000002CE6                 push    5Ah ; 'Z'
.plt:0000000000002CEB                 jmp     sub_2730
.plt:0000000000002CF0
.plt:0000000000002CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002CF0
.plt:0000000000002CF0 ; Attributes: thunk
.plt:0000000000002CF0
.plt:0000000000002CF0 ; int fchown(int fd, __uid_t owner, __gid_t group)
.plt:0000000000002CF0 _fchown         proc near               ; CODE XREF: set_owner+62↓p
.plt:0000000000002CF0                                         ; set_owner+1F2↓p
.plt:0000000000002CF0                 jmp     cs:fchown_ptr
.plt:0000000000002CF0 _fchown         endp
.plt:0000000000002CF0
.plt:0000000000002CF6 ; ---------------------------------------------------------------------------
.plt:0000000000002CF6                 push    5Bh ; '['
.plt:0000000000002CFB                 jmp     sub_2730
.plt:0000000000002D00
.plt:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D00
.plt:0000000000002D00 ; Attributes: thunk
.plt:0000000000002D00
.plt:0000000000002D00 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000002D00 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000002D00                 jmp     cs:fopen_ptr
.plt:0000000000002D00 _fopen          endp
.plt:0000000000002D00
.plt:0000000000002D06 ; ---------------------------------------------------------------------------
.plt:0000000000002D06                 push    5Ch ; '\'
.plt:0000000000002D0B                 jmp     sub_2730
.plt:0000000000002D10
.plt:0000000000002D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D10
.plt:0000000000002D10 ; Attributes: thunk
.plt:0000000000002D10
.plt:0000000000002D10 ; int rename(const char *old, const char *new)
.plt:0000000000002D10 _rename         proc near               ; CODE XREF: copy_internal+96D↓p
.plt:0000000000002D10                                         ; copy_internal+FC2↓p
.plt:0000000000002D10                 jmp     cs:rename_ptr
.plt:0000000000002D10 _rename         endp
.plt:0000000000002D10
.plt:0000000000002D16 ; ---------------------------------------------------------------------------
.plt:0000000000002D16                 push    5Dh ; ']'
.plt:0000000000002D1B                 jmp     sub_2730
.plt:0000000000002D20
.plt:0000000000002D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D20
.plt:0000000000002D20 ; Attributes: thunk
.plt:0000000000002D20
.plt:0000000000002D20 ; DIR *fdopendir(int fd)
.plt:0000000000002D20 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:0000000000002D20                                         ; opendir_safer+7B↓p
.plt:0000000000002D20                 jmp     cs:fdopendir_ptr
.plt:0000000000002D20 _fdopendir      endp
.plt:0000000000002D20
.plt:0000000000002D26 ; ---------------------------------------------------------------------------
.plt:0000000000002D26                 push    5Eh ; '^'
.plt:0000000000002D2B                 jmp     sub_2730
.plt:0000000000002D30
.plt:0000000000002D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D30
.plt:0000000000002D30 ; Attributes: thunk
.plt:0000000000002D30
.plt:0000000000002D30 ; int futimens(int fd, const struct timespec times[2])
.plt:0000000000002D30 _futimens       proc near               ; CODE XREF: fdutimens+8D↓p
.plt:0000000000002D30                 jmp     cs:futimens_ptr
.plt:0000000000002D30 _futimens       endp
.plt:0000000000002D30
.plt:0000000000002D36 ; ---------------------------------------------------------------------------
.plt:0000000000002D36                 push    5Fh ; '_'
.plt:0000000000002D3B                 jmp     sub_2730
.plt:0000000000002D40
.plt:0000000000002D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D40
.plt:0000000000002D40 ; Attributes: thunk
.plt:0000000000002D40
.plt:0000000000002D40 ; int euidaccess(const char *name, int type)
.plt:0000000000002D40 _euidaccess     proc near               ; CODE XREF: writable_destination+38↓p
.plt:0000000000002D40                 jmp     cs:euidaccess_ptr
.plt:0000000000002D40 _euidaccess     endp
.plt:0000000000002D40
.plt:0000000000002D46 ; ---------------------------------------------------------------------------
.plt:0000000000002D46                 push    60h ; '`'
.plt:0000000000002D4B                 jmp     sub_2730
.plt:0000000000002D50
.plt:0000000000002D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D50
.plt:0000000000002D50 ; Attributes: thunk
.plt:0000000000002D50
.plt:0000000000002D50 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002D50 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002D50                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002D50 ___cxa_atexit   endp
.plt:0000000000002D50
.plt:0000000000002D56 ; ---------------------------------------------------------------------------
.plt:0000000000002D56                 push    61h ; 'a'
.plt:0000000000002D5B                 jmp     sub_2730
.plt:0000000000002D60
.plt:0000000000002D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D60
.plt:0000000000002D60 ; Attributes: thunk
.plt:0000000000002D60
.plt:0000000000002D60 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
.plt:0000000000002D60 _renameat       proc near               ; CODE XREF: force_linkat+122↓p
.plt:0000000000002D60                                         ; force_symlinkat+10A↓p ...
.plt:0000000000002D60                 jmp     cs:renameat_ptr
.plt:0000000000002D60 _renameat       endp
.plt:0000000000002D60
.plt:0000000000002D66 ; ---------------------------------------------------------------------------
.plt:0000000000002D66                 push    62h ; 'b'
.plt:0000000000002D6B                 jmp     sub_2730
.plt:0000000000002D70
.plt:0000000000002D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D70
.plt:0000000000002D70 ; Attributes: thunk
.plt:0000000000002D70
.plt:0000000000002D70 ; int getpagesize(void)
.plt:0000000000002D70 _getpagesize    proc near               ; CODE XREF: copy_internal:loc_896C↓p
.plt:0000000000002D70                 jmp     cs:getpagesize_ptr
.plt:0000000000002D70 _getpagesize    endp
.plt:0000000000002D70
.plt:0000000000002D76 ; ---------------------------------------------------------------------------
.plt:0000000000002D76                 push    63h ; 'c'
.plt:0000000000002D7B                 jmp     sub_2730
.plt:0000000000002D80
.plt:0000000000002D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D80
.plt:0000000000002D80 ; Attributes: thunk
.plt:0000000000002D80
.plt:0000000000002D80 ; __pid_t getppid(void)
.plt:0000000000002D80 _getppid        proc near               ; CODE XREF: randread_new+1A3↓p
.plt:0000000000002D80                                         ; randread_new+2F7↓p
.plt:0000000000002D80                 jmp     cs:getppid_ptr
.plt:0000000000002D80 _getppid        endp
.plt:0000000000002D80
.plt:0000000000002D86 ; ---------------------------------------------------------------------------
.plt:0000000000002D86                 push    64h ; 'd'
.plt:0000000000002D8B                 jmp     sub_2730
.plt:0000000000002D90
.plt:0000000000002D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002D90
.plt:0000000000002D90 ; Attributes: noreturn thunk
.plt:0000000000002D90
.plt:0000000000002D90 ; void __noreturn exit(int status)
.plt:0000000000002D90 _exit           proc near               ; CODE XREF: main+356↓p
.plt:0000000000002D90                                         ; usage+58↓p
.plt:0000000000002D90                 jmp     cs:exit_ptr
.plt:0000000000002D90 _exit           endp
.plt:0000000000002D90
.plt:0000000000002D96 ; ---------------------------------------------------------------------------
.plt:0000000000002D96                 push    65h ; 'e'
.plt:0000000000002D9B                 jmp     sub_2730
.plt:0000000000002DA0
.plt:0000000000002DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DA0
.plt:0000000000002DA0 ; Attributes: thunk
.plt:0000000000002DA0
.plt:0000000000002DA0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002DA0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000002DA0                 jmp     cs:fwrite_ptr
.plt:0000000000002DA0 _fwrite         endp
.plt:0000000000002DA0
.plt:0000000000002DA6 ; ---------------------------------------------------------------------------
.plt:0000000000002DA6                 push    66h ; 'f'
.plt:0000000000002DAB                 jmp     sub_2730
.plt:0000000000002DB0
.plt:0000000000002DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DB0
.plt:0000000000002DB0 ; Attributes: thunk
.plt:0000000000002DB0
.plt:0000000000002DB0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000002DB0                                         ; overwrite_ok_isra_12+B8↓p ...
.plt:0000000000002DB0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002DB0 ___fprintf_chk  endp
.plt:0000000000002DB0
.plt:0000000000002DB6 ; ---------------------------------------------------------------------------
.plt:0000000000002DB6                 push    67h ; 'g'
.plt:0000000000002DBB                 jmp     sub_2730
.plt:0000000000002DC0
.plt:0000000000002DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DC0
.plt:0000000000002DC0 ; Attributes: thunk
.plt:0000000000002DC0
.plt:0000000000002DC0 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002DC0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000002DC0                 jmp     cs:mbsinit_ptr
.plt:0000000000002DC0 _mbsinit        endp
.plt:0000000000002DC0
.plt:0000000000002DC6 ; ---------------------------------------------------------------------------
.plt:0000000000002DC6                 push    68h ; 'h'
.plt:0000000000002DCB                 jmp     sub_2730
.plt:0000000000002DD0
.plt:0000000000002DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DD0
.plt:0000000000002DD0 ; Attributes: thunk
.plt:0000000000002DD0
.plt:0000000000002DD0 ; int symlinkat(const char *from, int tofd, const char *to)
.plt:0000000000002DD0 _symlinkat      proc near               ; CODE XREF: try_symlink+C↓j
.plt:0000000000002DD0                                         ; force_symlinkat+DC↓p
.plt:0000000000002DD0                 jmp     cs:symlinkat_ptr
.plt:0000000000002DD0 _symlinkat      endp
.plt:0000000000002DD0
.plt:0000000000002DD6 ; ---------------------------------------------------------------------------
.plt:0000000000002DD6                 push    69h ; 'i'
.plt:0000000000002DDB                 jmp     sub_2730
.plt:0000000000002DE0
.plt:0000000000002DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DE0
.plt:0000000000002DE0 ; Attributes: thunk
.plt:0000000000002DE0
.plt:0000000000002DE0 ; int iswprint(wint_t wc)
.plt:0000000000002DE0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000002DE0                 jmp     cs:iswprint_ptr
.plt:0000000000002DE0 _iswprint       endp
.plt:0000000000002DE0
.plt:0000000000002DE6 ; ---------------------------------------------------------------------------
.plt:0000000000002DE6                 push    6Ah ; 'j'
.plt:0000000000002DEB                 jmp     sub_2730
.plt:0000000000002DF0
.plt:0000000000002DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002DF0
.plt:0000000000002DF0 ; Attributes: thunk
.plt:0000000000002DF0
.plt:0000000000002DF0 ; int futimesat(int fd, const char *file, const struct timeval tvp[2])
.plt:0000000000002DF0 _futimesat      proc near               ; CODE XREF: fdutimens+139↓p
.plt:0000000000002DF0                                         ; fdutimens+210↓p ...
.plt:0000000000002DF0                 jmp     cs:futimesat_ptr
.plt:0000000000002DF0 _futimesat      endp
.plt:0000000000002DF0
.plt:0000000000002DF6 ; ---------------------------------------------------------------------------
.plt:0000000000002DF6                 push    6Bh ; 'k'
.plt:0000000000002DFB                 jmp     sub_2730
.plt:0000000000002E00
.plt:0000000000002E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002E00
.plt:0000000000002E00 ; Attributes: thunk
.plt:0000000000002E00
.plt:0000000000002E00 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000002E00 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000002E00                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000002E00 ___ctype_b_loc  endp
.plt:0000000000002E00
.plt:0000000000002E06 ; ---------------------------------------------------------------------------
.plt:0000000000002E06                 push    6Ch ; 'l'
.plt:0000000000002E0B                 jmp     sub_2730
.plt:0000000000002E0B ; } // starts at 2730
.plt:0000000000002E0B _plt            ends
.plt:0000000000002E0B
.plt.got:0000000000002E10 ; ===========================================================================
.plt.got:0000000000002E10
.plt.got:0000000000002E10 ; Segment type: Pure code
.plt.got:0000000000002E10 ; Segment permissions: Read/Execute
.plt.got:0000000000002E10 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002E10                 assume cs:_plt_got
.plt.got:0000000000002E10                 ;org 2E10h
.plt.got:0000000000002E10                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002E10
.plt.got:0000000000002E10 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002E10
.plt.got:0000000000002E10 ; Attributes: thunk
.plt.got:0000000000002E10
.plt.got:0000000000002E10 ; void free(void *ptr)
.plt.got:0000000000002E10 free            proc near               ; CODE XREF: decode_preserve_arg+DB↓j
.plt.got:0000000000002E10                                         ; do_copy+252↓p ...
.plt.got:0000000000002E10 ; __unwind {
.plt.got:0000000000002E10                 jmp     cs:free_ptr
.plt.got:0000000000002E10 free            endp
.plt.got:0000000000002E10
.plt.got:0000000000002E10 ; ---------------------------------------------------------------------------
.plt.got:0000000000002E16                 align 8
.plt.got:0000000000002E18
.plt.got:0000000000002E18 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002E18
.plt.got:0000000000002E18 ; Attributes: thunk
.plt.got:0000000000002E18
.plt.got:0000000000002E18 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002E18 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002E18                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002E18 __cxa_finalize  endp
.plt.got:0000000000002E18
.plt.got:0000000000002E18 ; ---------------------------------------------------------------------------
.plt.got:0000000000002E1E                 align 20h
.plt.got:0000000000002E1E ; } // starts at 2E10
.plt.got:0000000000002E1E _plt_got        ends
.plt.got:0000000000002E1E
.text:0000000000002E20 ; ===========================================================================
.text:0000000000002E20
.text:0000000000002E20 ; Segment type: Pure code
.text:0000000000002E20 ; Segment permissions: Read/Execute
.text:0000000000002E20 _text           segment para public 'CODE' use64
.text:0000000000002E20                 assume cs:_text
.text:0000000000002E20                 ;org 2E20h
.text:0000000000002E20                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002E20
.text:0000000000002E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E20
.text:0000000000002E20
.text:0000000000002E20 fchmod_or_lchmod proc near              ; CODE XREF: copy_internal+36AA↓p
.text:0000000000002E20                                         ; copy_internal+407D↓p ...
.text:0000000000002E20 ; __unwind {
.text:0000000000002E20                 test    edi, edi
.text:0000000000002E22                 mov     rax, rsi
.text:0000000000002E25                 mov     esi, edx        ; mode
.text:0000000000002E27                 js      short loc_2E2E
.text:0000000000002E29                 jmp     _fchmod
.text:0000000000002E2E ; ---------------------------------------------------------------------------
.text:0000000000002E2E
.text:0000000000002E2E loc_2E2E:                               ; CODE XREF: fchmod_or_lchmod+7↑j
.text:0000000000002E2E                 mov     rdi, rax        ; file
.text:0000000000002E31                 jmp     _chmod
.text:0000000000002E31 ; } // starts at 2E20
.text:0000000000002E31 fchmod_or_lchmod endp
.text:0000000000002E31
.text:0000000000002E36
.text:0000000000002E36 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E36
.text:0000000000002E36
.text:0000000000002E36 restore_default_fscreatecon_or_die proc near
.text:0000000000002E36                                         ; CODE XREF: copy_internal:loc_6B90↓p
.text:0000000000002E36 ; __unwind {
.text:0000000000002E36                 push    rbx
.text:0000000000002E37                 call    ___errno_location
.text:0000000000002E3C                 lea     rsi, msgid      ; "failed to restore the default file crea"...
.text:0000000000002E43                 mov     rbx, rax
.text:0000000000002E46                 mov     edx, 5          ; category
.text:0000000000002E4B                 xor     edi, edi        ; domainname
.text:0000000000002E4D                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000002E53                 call    _dcgettext
.text:0000000000002E58                 mov     esi, [rbx]      ; errnum
.text:0000000000002E5A                 mov     rdx, rax        ; format
.text:0000000000002E5D                 mov     edi, 1          ; status
.text:0000000000002E62                 xor     eax, eax
.text:0000000000002E64                 call    _error
.text:0000000000002E64 ; } // starts at 2E36
.text:0000000000002E69                 nop     dword ptr [rax+00000000h]
.text:0000000000002E69 restore_default_fscreatecon_or_die endp ; sp-analysis failed
.text:0000000000002E69
.text:0000000000002E70
.text:0000000000002E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E70
.text:0000000000002E70
.text:0000000000002E70 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002E70                 public main
.text:0000000000002E70 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002E70
.text:0000000000002E70 var_158         = qword ptr -158h
.text:0000000000002E70 var_150         = qword ptr -150h
.text:0000000000002E70 var_148         = qword ptr -148h
.text:0000000000002E70 var_13B         = byte ptr -13Bh
.text:0000000000002E70 var_13A         = byte ptr -13Ah
.text:0000000000002E70 var_139         = byte ptr -139h
.text:0000000000002E70 var_138         = qword ptr -138h
.text:0000000000002E70 stat_buf        = qword ptr -130h
.text:0000000000002E70 var_128         = dword ptr -128h
.text:0000000000002E70 var_124         = dword ptr -124h
.text:0000000000002E70 var_120         = dword ptr -120h
.text:0000000000002E70 var_11C         = dword ptr -11Ch
.text:0000000000002E70 var_118         = dword ptr -118h
.text:0000000000002E70 var_114         = byte ptr -114h
.text:0000000000002E70 var_113         = byte ptr -113h
.text:0000000000002E70 var_112         = byte ptr -112h
.text:0000000000002E70 var_111         = byte ptr -111h
.text:0000000000002E70 var_110         = byte ptr -110h
.text:0000000000002E70 var_10F         = byte ptr -10Fh
.text:0000000000002E70 var_10C         = byte ptr -10Ch
.text:0000000000002E70 var_10B         = byte ptr -10Bh
.text:0000000000002E70 var_10A         = byte ptr -10Ah
.text:0000000000002E70 var_109         = byte ptr -109h
.text:0000000000002E70 var_108         = byte ptr -108h
.text:0000000000002E70 var_107         = byte ptr -107h
.text:0000000000002E70 var_106         = byte ptr -106h
.text:0000000000002E70 var_105         = byte ptr -105h
.text:0000000000002E70 var_104         = byte ptr -104h
.text:0000000000002E70 var_103         = byte ptr -103h
.text:0000000000002E70 var_102         = byte ptr -102h
.text:0000000000002E70 var_101         = byte ptr -101h
.text:0000000000002E70 var_100         = byte ptr -100h
.text:0000000000002E70 var_FF          = byte ptr -0FFh
.text:0000000000002E70 var_FE          = byte ptr -0FEh
.text:0000000000002E70 var_FD          = byte ptr -0FDh
.text:0000000000002E70 var_FC          = byte ptr -0FCh
.text:0000000000002E70 var_FB          = byte ptr -0FBh
.text:0000000000002E70 var_FA          = byte ptr -0FAh
.text:0000000000002E70 var_F9          = byte ptr -0F9h
.text:0000000000002E70 var_F8          = byte ptr -0F8h
.text:0000000000002E70 var_F0          = dword ptr -0F0h
.text:0000000000002E70 var_E8          = qword ptr -0E8h
.text:0000000000002E70 var_E0          = qword ptr -0E0h
.text:0000000000002E70 var_D8          = byte ptr -0D8h
.text:0000000000002E70 var_C0          = dword ptr -0C0h
.text:0000000000002E70 var_40          = qword ptr -40h
.text:0000000000002E70
.text:0000000000002E70 ; __unwind {
.text:0000000000002E70                 push    r15
.text:0000000000002E72                 push    r14
.text:0000000000002E74                 mov     r14d, 1
.text:0000000000002E7A                 push    r13
.text:0000000000002E7C                 push    r12
.text:0000000000002E7E                 mov     r12d, edi
.text:0000000000002E81                 push    rbp
.text:0000000000002E82                 push    rbx
.text:0000000000002E83                 mov     rbp, rsi
.text:0000000000002E86                 lea     r13, long_opts
.text:0000000000002E8D                 lea     rbx, jpt_3050
.text:0000000000002E94                 sub     rsp, 128h
.text:0000000000002E9B                 mov     rdi, [rsi]
.text:0000000000002E9E                 mov     rax, fs:28h
.text:0000000000002EA7                 mov     [rsp+158h+var_40], rax
.text:0000000000002EAF                 xor     eax, eax
.text:0000000000002EB1                 lea     r15, [rsp+158h+var_128]
.text:0000000000002EB6                 call    set_program_name
.text:0000000000002EBB                 lea     rsi, aSSUnbackup+14h ; locale
.text:0000000000002EC2                 mov     edi, 6          ; category
.text:0000000000002EC7                 call    _setlocale
.text:0000000000002ECC                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002ED3                 lea     rdi, domainname ; "coreutils"
.text:0000000000002EDA                 call    _bindtextdomain
.text:0000000000002EDF                 lea     rdi, domainname ; "coreutils"
.text:0000000000002EE6                 call    _textdomain
.text:0000000000002EEB                 lea     rdi, close_stdin
.text:0000000000002EF2                 call    atexit
.text:0000000000002EF7                 mov     rdi, r15
.text:0000000000002EFA                 mov     cs:selinux_enabled, 0
.text:0000000000002F01                 call    cp_options_default
.text:0000000000002F06                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000002F0D                 mov     [rsp+158h+var_114], 1
.text:0000000000002F12                 mov     [rsp+158h+var_124], 1
.text:0000000000002F1A                 mov     [rsp+158h+var_113], 0
.text:0000000000002F1F                 mov     [rsp+158h+var_112], 0
.text:0000000000002F24                 mov     [rsp+158h+var_111], 0
.text:0000000000002F29                 mov     [rsp+158h+var_120], 4
.text:0000000000002F31                 mov     [rsp+158h+var_110], 0
.text:0000000000002F36                 mov     [rsp+158h+var_10F], 0
.text:0000000000002F3B                 mov     [rsp+158h+var_10C], 0
.text:0000000000002F40                 mov     [rsp+158h+var_F0], 0
.text:0000000000002F48                 mov     [rsp+158h+var_10B], 0
.text:0000000000002F4D                 mov     [rsp+158h+var_106], 0
.text:0000000000002F52                 mov     [rsp+158h+var_10A], 0
.text:0000000000002F57                 mov     [rsp+158h+var_109], 0
.text:0000000000002F5C                 mov     [rsp+158h+var_108], 0
.text:0000000000002F61                 mov     [rsp+158h+var_103], 0
.text:0000000000002F66                 mov     [rsp+158h+var_102], 0
.text:0000000000002F6B                 mov     [rsp+158h+var_107], 0
.text:0000000000002F70                 mov     [rsp+158h+var_101], 0
.text:0000000000002F75                 mov     [rsp+158h+var_FF], 0
.text:0000000000002F7A                 mov     [rsp+158h+var_100], 0
.text:0000000000002F7F                 mov     [rsp+158h+var_105], 1
.text:0000000000002F84                 mov     [rsp+158h+var_104], 0
.text:0000000000002F89                 mov     [rsp+158h+var_FE], 0
.text:0000000000002F8E                 mov     [rsp+158h+var_11C], 2
.text:0000000000002F96                 mov     [rsp+158h+var_FC], 0
.text:0000000000002F9B                 mov     [rsp+158h+var_FD], 0
.text:0000000000002FA0                 mov     [rsp+158h+var_118], 0
.text:0000000000002FA8                 mov     [rsp+158h+var_F9], 0
.text:0000000000002FAD                 mov     [rsp+158h+var_FB], 0
.text:0000000000002FB2                 mov     [rsp+158h+var_FA], 0
.text:0000000000002FB7                 call    _getenv
.text:0000000000002FBC                 test    rax, rax
.text:0000000000002FBF                 lea     rax, [rsp+158h+var_D8]
.text:0000000000002FC7                 mov     [rsp+158h+var_E8], 0
.text:0000000000002FD0                 setnz   [rsp+158h+var_F8]
.text:0000000000002FD5                 mov     [rsp+158h+var_E0], 0
.text:0000000000002FDE                 mov     [rsp+158h+var_138], 0
.text:0000000000002FE7                 mov     [rsp+158h+var_13A], 0
.text:0000000000002FEC                 mov     [rsp+158h+var_158], 0
.text:0000000000002FF4                 mov     [rsp+158h+var_139], 0
.text:0000000000002FF9                 mov     [rsp+158h+var_150], 0
.text:0000000000003002                 mov     [rsp+158h+var_148], 0
.text:000000000000300B                 mov     [rsp+158h+var_13B], 0
.text:0000000000003010                 mov     [rsp+158h+stat_buf], rax
.text:0000000000003015                 nop     dword ptr [rax]
.text:0000000000003018
.text:0000000000003018 loc_3018:                               ; CODE XREF: main+206↓j
.text:0000000000003018                                         ; main+210↓j ...
.text:0000000000003018                 lea     rdx, shortopts  ; "abdfHilLnprst:uvxPRS:TZ"
.text:000000000000301F                 xor     r8d, r8d        ; longind
.text:0000000000003022                 mov     rcx, r13        ; longopts
.text:0000000000003025                 mov     rsi, rbp        ; argv
.text:0000000000003028                 mov     edi, r12d       ; argc
.text:000000000000302B                 call    _getopt_long
.text:0000000000003030                 cmp     eax, 0FFFFFFFFh
.text:0000000000003033                 jz      loc_33A0
.text:0000000000003039                 add     eax, 83h        ; switch 268 cases
.text:000000000000303E                 cmp     eax, 10Bh
.text:0000000000003043                 ja      def_3050        ; jumptable 0000000000003050 default case, cases -129-71,73-75,77-79,81,85-89,91-96,99,101,103,104,106,107,109,111,113,119,121-127
.text:0000000000003049                 movsxd  rax, ds:(jpt_3050 - 12C1Ch)[rbx+rax*4]
.text:000000000000304D                 add     rax, rbx
.text:0000000000003050                 jmp     rax             ; switch jump
.text:0000000000003052 ; ---------------------------------------------------------------------------
.text:0000000000003052
.text:0000000000003052 loc_3052:                               ; CODE XREF: main+1E0↑j
.text:0000000000003052                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003052                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003050 case 132
.text:0000000000003059                 test    rdi, rdi
.text:000000000000305C                 jnz     loc_334D
.text:0000000000003062
.text:0000000000003062 loc_3062:                               ; CODE XREF: main+1E0↑j
.text:0000000000003062                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003062                 mov     [rsp+158h+var_10B], r14b ; jumptable 0000000000003050 case 112
.text:0000000000003067                 mov     [rsp+158h+var_10A], r14b
.text:000000000000306C                 mov     [rsp+158h+var_109], r14b
.text:0000000000003071                 mov     [rsp+158h+var_104], r14b
.text:0000000000003076                 jmp     short loc_3018
.text:0000000000003078 ; ---------------------------------------------------------------------------
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: main+1E0↑j
.text:0000000000003078                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003078                 mov     [rsp+158h+var_120], 2 ; jumptable 0000000000003050 case 110
.text:0000000000003080                 jmp     short loc_3018
.text:0000000000003082 ; ---------------------------------------------------------------------------
.text:0000000000003082
.text:0000000000003082 loc_3082:                               ; CODE XREF: main+1E0↑j
.text:0000000000003082                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003082                 mov     [rsp+158h+var_111], r14b ; jumptable 0000000000003050 case 108
.text:0000000000003087                 jmp     short loc_3018
.text:0000000000003089 ; ---------------------------------------------------------------------------
.text:0000000000003089
.text:0000000000003089 loc_3089:                               ; CODE XREF: main+1E0↑j
.text:0000000000003089                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003089                 mov     [rsp+158h+var_120], 3 ; jumptable 0000000000003050 case 105
.text:0000000000003091                 jmp     short loc_3018
.text:0000000000003093 ; ---------------------------------------------------------------------------
.text:0000000000003093
.text:0000000000003093 loc_3093:                               ; CODE XREF: main+1E0↑j
.text:0000000000003093                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003093                 mov     [rsp+158h+var_112], r14b ; jumptable 0000000000003050 case 102
.text:0000000000003098                 jmp     loc_3018
.text:000000000000309D ; ---------------------------------------------------------------------------
.text:000000000000309D
.text:000000000000309D loc_309D:                               ; CODE XREF: main+1E0↑j
.text:000000000000309D                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:000000000000309D                 mov     [rsp+158h+var_106], r14b ; jumptable 0000000000003050 case 100
.text:00000000000030A2                 mov     [rsp+158h+var_124], 2
.text:00000000000030AA                 jmp     loc_3018
.text:00000000000030AF ; ---------------------------------------------------------------------------
.text:00000000000030AF
.text:00000000000030AF loc_30AF:                               ; CODE XREF: main+1E0↑j
.text:00000000000030AF                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000030AF                 mov     rax, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003050 case 98
.text:00000000000030B6                 mov     [rsp+158h+var_13B], 1
.text:00000000000030BB                 test    rax, rax
.text:00000000000030BE                 cmovz   rax, [rsp+158h+var_150]
.text:00000000000030C4                 mov     [rsp+158h+var_150], rax
.text:00000000000030C9                 jmp     loc_3018
.text:00000000000030CE ; ---------------------------------------------------------------------------
.text:00000000000030CE
.text:00000000000030CE loc_30CE:                               ; CODE XREF: main+1E0↑j
.text:00000000000030CE                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000030CE                 cmp     cs:selinux_enabled, 0 ; jumptable 0000000000003050 case 97
.text:00000000000030D5                 mov     [rsp+158h+var_124], 2
.text:00000000000030DD                 mov     [rsp+158h+var_106], r14b
.text:00000000000030E2                 mov     [rsp+158h+var_10B], r14b
.text:00000000000030E7                 mov     [rsp+158h+var_10A], r14b
.text:00000000000030EC                 mov     [rsp+158h+var_109], r14b
.text:00000000000030F1                 mov     [rsp+158h+var_104], r14b
.text:00000000000030F6                 jz      short loc_30FD
.text:00000000000030F8                 mov     [rsp+158h+var_103], r14b
.text:00000000000030FD
.text:00000000000030FD loc_30FD:                               ; CODE XREF: main+286↑j
.text:00000000000030FD                 mov     [rsp+158h+var_101], r14b
.text:0000000000003102                 mov     [rsp+158h+var_FF], r14b
.text:0000000000003107                 mov     [rsp+158h+var_FE], r14b
.text:000000000000310C                 jmp     loc_3018
.text:0000000000003111 ; ---------------------------------------------------------------------------
.text:0000000000003111
.text:0000000000003111 loc_3111:                               ; CODE XREF: main+1E0↑j
.text:0000000000003111                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003111                 cmp     cs:selinux_enabled, 0 ; jumptable 0000000000003050 case 90
.text:0000000000003118                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:000000000000311F                 jz      loc_3364
.text:0000000000003125                 test    rax, rax
.text:0000000000003128                 jz      loc_3571
.text:000000000000312E                 mov     [rsp+158h+var_138], rax
.text:0000000000003133                 jmp     loc_3018
.text:0000000000003138 ; ---------------------------------------------------------------------------
.text:0000000000003138
.text:0000000000003138 loc_3138:                               ; CODE XREF: main+1E0↑j
.text:0000000000003138                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003138                 mov     [rsp+158h+var_13A], 1 ; jumptable 0000000000003050 case 84
.text:000000000000313D                 jmp     loc_3018
.text:0000000000003142 ; ---------------------------------------------------------------------------
.text:0000000000003142
.text:0000000000003142 loc_3142:                               ; CODE XREF: main+1E0↑j
.text:0000000000003142                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003142                 mov     rax, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003050 case 83
.text:0000000000003149                 mov     [rsp+158h+var_13B], 1
.text:000000000000314E                 mov     [rsp+158h+var_148], rax
.text:0000000000003153                 jmp     loc_3018
.text:0000000000003158 ; ---------------------------------------------------------------------------
.text:0000000000003158
.text:0000000000003158 loc_3158:                               ; CODE XREF: main+1E0↑j
.text:0000000000003158                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003158                 mov     [rsp+158h+var_FE], r14b ; jumptable 0000000000003050 cases 82,114
.text:000000000000315D                 jmp     loc_3018
.text:0000000000003162 ; ---------------------------------------------------------------------------
.text:0000000000003162
.text:0000000000003162 loc_3162:                               ; CODE XREF: main+1E0↑j
.text:0000000000003162                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003162                 mov     [rsp+158h+var_124], 2 ; jumptable 0000000000003050 case 80
.text:000000000000316A                 jmp     loc_3018
.text:000000000000316F ; ---------------------------------------------------------------------------
.text:000000000000316F
.text:000000000000316F loc_316F:                               ; CODE XREF: main+1E0↑j
.text:000000000000316F                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:000000000000316F                 mov     [rsp+158h+var_124], 4 ; jumptable 0000000000003050 case 76
.text:0000000000003177                 jmp     loc_3018
.text:000000000000317C ; ---------------------------------------------------------------------------
.text:000000000000317C
.text:000000000000317C loc_317C:                               ; CODE XREF: main+1E0↑j
.text:000000000000317C                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:000000000000317C                 mov     [rsp+158h+var_124], 3 ; jumptable 0000000000003050 case 72
.text:0000000000003184                 jmp     loc_3018
.text:0000000000003189 ; ---------------------------------------------------------------------------
.text:0000000000003189
.text:0000000000003189 loc_3189:                               ; CODE XREF: main+1E0↑j
.text:0000000000003189                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003189                 lea     rax, aJimMeyering ; jumptable 0000000000003050 case -131
.text:0000000000003190                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000003197                 mov     rcx, cs:Version
.text:000000000000319E                 push    0
.text:00000000000031A0                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:00000000000031A7                 lea     r8, aTorbjornGranlu ; "Torbjorn Granlund"
.text:00000000000031AE                 push    rax
.text:00000000000031AF                 lea     rdx, unk_129BE
.text:00000000000031B6                 lea     rsi, aCp        ; "cp"
.text:00000000000031BD                 xor     eax, eax
.text:00000000000031BF                 call    version_etc
.text:00000000000031C4                 xor     edi, edi        ; status
.text:00000000000031C6                 call    _exit
.text:00000000000031CB ; ---------------------------------------------------------------------------
.text:00000000000031CB
.text:00000000000031CB loc_31CB:                               ; CODE XREF: main+1E0↑j
.text:00000000000031CB                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000031CB                 mov     [rsp+158h+var_113], r14b ; jumptable 0000000000003050 case 136
.text:00000000000031D0                 jmp     loc_3018
.text:00000000000031D5 ; ---------------------------------------------------------------------------
.text:00000000000031D5
.text:00000000000031D5 loc_31D5:                               ; CODE XREF: main+1E0↑j
.text:00000000000031D5                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000031D5                 mov     cs:remove_trailing_slashes, r14b ; jumptable 0000000000003050 case 135
.text:00000000000031DC                 jmp     loc_3018
.text:00000000000031E1 ; ---------------------------------------------------------------------------
.text:00000000000031E1
.text:00000000000031E1 loc_31E1:                               ; CODE XREF: main+1E0↑j
.text:00000000000031E1                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000031E1                 mov     r9, cs:argmatch_die ; jumptable 0000000000003050 case 134
.text:00000000000031E8                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:00000000000031EF                 lea     rdx, sparse_type_string
.text:00000000000031F6                 lea     rcx, sparse_type
.text:00000000000031FD                 lea     rdi, aSparse    ; "--sparse"
.text:0000000000003204                 mov     r8d, 4
.text:000000000000320A                 call    __xargmatch_internal
.text:000000000000320F                 lea     rdx, sparse_type
.text:0000000000003216                 mov     eax, [rdx+rax*4]
.text:0000000000003219                 mov     [rsp+158h+var_11C], eax
.text:000000000000321D                 jmp     loc_3018
.text:0000000000003222 ; ---------------------------------------------------------------------------
.text:0000000000003222
.text:0000000000003222 loc_3222:                               ; CODE XREF: main+1E0↑j
.text:0000000000003222                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003222                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003050 case 133
.text:0000000000003229                 test    rsi, rsi
.text:000000000000322C                 jz      loc_3393
.text:0000000000003232                 mov     r9, cs:argmatch_die
.text:0000000000003239                 lea     rdx, reflink_type_string
.text:0000000000003240                 lea     rcx, reflink_type
.text:0000000000003247                 lea     rdi, aReflink   ; "--reflink"
.text:000000000000324E                 mov     r8d, 4
.text:0000000000003254                 call    __xargmatch_internal
.text:0000000000003259                 lea     rdx, reflink_type
.text:0000000000003260                 mov     eax, [rdx+rax*4]
.text:0000000000003263                 mov     [rsp+158h+var_F0], eax
.text:0000000000003267                 jmp     loc_3018
.text:000000000000326C ; ---------------------------------------------------------------------------
.text:000000000000326C
.text:000000000000326C loc_326C:                               ; CODE XREF: main+1E0↑j
.text:000000000000326C                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:000000000000326C                 mov     cs:parents_option, r14b ; jumptable 0000000000003050 case 131
.text:0000000000003273                 jmp     loc_3018
.text:0000000000003278 ; ---------------------------------------------------------------------------
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: main+1E0↑j
.text:0000000000003278                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003278                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003050 case 130
.text:000000000000327F                 xor     edx, edx
.text:0000000000003281                 mov     rsi, r15
.text:0000000000003284                 call    decode_preserve_arg
.text:0000000000003289                 jmp     loc_3018
.text:000000000000328E ; ---------------------------------------------------------------------------
.text:000000000000328E
.text:000000000000328E loc_328E:                               ; CODE XREF: main+1E0↑j
.text:000000000000328E                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:000000000000328E                 mov     [rsp+158h+var_139], 1 ; jumptable 0000000000003050 case 129
.text:0000000000003293                 jmp     loc_3018
.text:0000000000003298 ; ---------------------------------------------------------------------------
.text:0000000000003298
.text:0000000000003298 loc_3298:                               ; CODE XREF: main+1E0↑j
.text:0000000000003298                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003298                 mov     [rsp+158h+var_105], 0 ; jumptable 0000000000003050 case 128
.text:000000000000329D                 jmp     loc_3018
.text:00000000000032A2 ; ---------------------------------------------------------------------------
.text:00000000000032A2
.text:00000000000032A2 loc_32A2:                               ; CODE XREF: main+1E0↑j
.text:00000000000032A2                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000032A2                 mov     [rsp+158h+var_10C], r14b ; jumptable 0000000000003050 case 120
.text:00000000000032A7                 jmp     loc_3018
.text:00000000000032AC ; ---------------------------------------------------------------------------
.text:00000000000032AC
.text:00000000000032AC loc_32AC:                               ; CODE XREF: main+1E0↑j
.text:00000000000032AC                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000032AC                 mov     [rsp+158h+var_FA], r14b ; jumptable 0000000000003050 case 118
.text:00000000000032B1                 jmp     loc_3018
.text:00000000000032B6 ; ---------------------------------------------------------------------------
.text:00000000000032B6
.text:00000000000032B6 loc_32B6:                               ; CODE XREF: main+1E0↑j
.text:00000000000032B6                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000032B6                 mov     [rsp+158h+var_FB], r14b ; jumptable 0000000000003050 case 117
.text:00000000000032BB                 jmp     loc_3018
.text:00000000000032C0 ; ---------------------------------------------------------------------------
.text:00000000000032C0
.text:00000000000032C0 loc_32C0:                               ; CODE XREF: main+1E0↑j
.text:00000000000032C0                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000032C0                 cmp     [rsp+158h+var_158], 0 ; jumptable 0000000000003050 case 116
.text:00000000000032C5                 jnz     loc_35F6
.text:00000000000032CB                 mov     rdx, [rsp+158h+stat_buf] ; stat_buf
.text:00000000000032D0                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; filename
.text:00000000000032D7                 mov     edi, 1          ; ver
.text:00000000000032DC                 call    ___xstat
.text:00000000000032E1                 test    eax, eax
.text:00000000000032E3                 jnz     loc_3685
.text:00000000000032E9                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000032F0                 mov     [rsp+158h+var_158], rax
.text:00000000000032F4                 mov     eax, [rsp+158h+var_C0]
.text:00000000000032FB                 and     eax, 0F000h
.text:0000000000003300                 cmp     eax, 4000h
.text:0000000000003305                 jz      loc_3018
.text:000000000000330B                 mov     rsi, [rsp+158h+var_158]
.text:000000000000330F                 mov     edi, 4
.text:0000000000003314                 call    quotearg_style
.text:0000000000003319                 lea     rsi, aTargetSIsNotAD ; "target %s is not a directory"
.text:0000000000003320                 mov     rbx, rax
.text:0000000000003323                 mov     edx, 5          ; category
.text:0000000000003328                 xor     edi, edi        ; domainname
.text:000000000000332A                 call    _dcgettext
.text:000000000000332F                 mov     rcx, rbx
.text:0000000000003332                 mov     rdx, rax        ; format
.text:0000000000003335                 xor     esi, esi        ; errnum
.text:0000000000003337                 mov     edi, 1          ; status
.text:000000000000333C                 xor     eax, eax
.text:000000000000333E                 call    _error
.text:0000000000003343
.text:0000000000003343 loc_3343:                               ; CODE XREF: main+1E0↑j
.text:0000000000003343                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:0000000000003343                 mov     [rsp+158h+var_FC], r14b ; jumptable 0000000000003050 case 115
.text:0000000000003348                 jmp     loc_3018
.text:000000000000334D ; ---------------------------------------------------------------------------
.text:000000000000334D
.text:000000000000334D loc_334D:                               ; CODE XREF: main+1EC↑j
.text:000000000000334D                 mov     edx, 1
.text:0000000000003352                 mov     rsi, r15
.text:0000000000003355                 call    decode_preserve_arg
.text:000000000000335A                 mov     [rsp+158h+var_104], r14b
.text:000000000000335F                 jmp     loc_3018
.text:0000000000003364 ; ---------------------------------------------------------------------------
.text:0000000000003364
.text:0000000000003364 loc_3364:                               ; CODE XREF: main+2AF↑j
.text:0000000000003364                 test    rax, rax
.text:0000000000003367                 jz      loc_3018
.text:000000000000336D                 lea     rsi, aWarningIgnorin ; "warning: ignoring --context; it require"...
.text:0000000000003374                 xor     edi, edi        ; domainname
.text:0000000000003376                 mov     edx, 5          ; category
.text:000000000000337B                 call    _dcgettext
.text:0000000000003380                 xor     esi, esi        ; errnum
.text:0000000000003382                 mov     rdx, rax        ; format
.text:0000000000003385                 xor     edi, edi        ; status
.text:0000000000003387                 xor     eax, eax
.text:0000000000003389                 call    _error
.text:000000000000338E                 jmp     loc_3018
.text:0000000000003393 ; ---------------------------------------------------------------------------
.text:0000000000003393
.text:0000000000003393 loc_3393:                               ; CODE XREF: main+3BC↑j
.text:0000000000003393                 mov     [rsp+158h+var_F0], 2
.text:000000000000339B                 jmp     loc_3018
.text:00000000000033A0 ; ---------------------------------------------------------------------------
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: main+1C3↑j
.text:00000000000033A0                 cmp     [rsp+158h+var_111], 0
.text:00000000000033A5                 jnz     loc_34A2
.text:00000000000033AB
.text:00000000000033AB loc_33AB:                               ; CODE XREF: main+637↓j
.text:00000000000033AB                 cmp     [rsp+158h+var_120], 2
.text:00000000000033B0                 jz      loc_34BE
.text:00000000000033B6                 cmp     [rsp+158h+var_13B], 0
.text:00000000000033BB                 jz      loc_34CE
.text:00000000000033C1                 cmp     [rsp+158h+var_F0], 2
.text:00000000000033C6                 jz      loc_357B
.text:00000000000033CC
.text:00000000000033CC loc_33CC:                               ; CODE XREF: main+710↓j
.text:00000000000033CC                 lea     rsi, aBackupType ; "backup type"
.text:00000000000033D3                 xor     edi, edi        ; domainname
.text:00000000000033D5                 mov     edx, 5          ; category
.text:00000000000033DA                 call    _dcgettext
.text:00000000000033DF                 mov     rsi, [rsp+158h+var_150]
.text:00000000000033E4                 mov     rdi, rax
.text:00000000000033E7                 call    xget_version
.text:00000000000033EC
.text:00000000000033EC loc_33EC:                               ; CODE XREF: main+665↓j
.text:00000000000033EC                                         ; main+670↓j
.text:00000000000033EC                 mov     rdi, [rsp+158h+var_148]
.text:00000000000033F1                 mov     [rsp+158h+var_128], eax
.text:00000000000033F5                 call    set_simple_backup_suffix
.text:00000000000033FA                 cmp     [rsp+158h+var_124], 1
.text:00000000000033FF                 jz      loc_34F7
.text:0000000000003405
.text:0000000000003405 loc_3405:                               ; CODE XREF: main+6FC↓j
.text:0000000000003405                 cmp     [rsp+158h+var_FE], 0
.text:000000000000340A                 jnz     loc_350D
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: main+6A6↓j
.text:0000000000003410                 cmp     [rsp+158h+var_107], 0
.text:0000000000003415                 movzx   eax, [rsp+158h+var_102]
.text:000000000000341A                 jnz     short loc_3428
.text:000000000000341C                 cmp     [rsp+158h+var_138], 0
.text:0000000000003422                 jz      loc_3546
.text:0000000000003428
.text:0000000000003428 loc_3428:                               ; CODE XREF: main+5AA↑j
.text:0000000000003428                 test    al, al
.text:000000000000342A                 jnz     loc_351B
.text:0000000000003430                 mov     [rsp+158h+var_103], 0
.text:0000000000003435
.text:0000000000003435 loc_3435:                               ; CODE XREF: main+6EC↓j
.text:0000000000003435                 cmp     [rsp+158h+var_138], 0
.text:000000000000343B                 jnz     loc_3643
.text:0000000000003441
.text:0000000000003441 loc_3441:                               ; CODE XREF: main+6DF↓j
.text:0000000000003441                                         ; main+71D↓j ...
.text:0000000000003441                 cmp     [rsp+158h+var_100], 0
.text:0000000000003446                 jnz     loc_361F
.text:000000000000344C                 call    hash_init
.text:0000000000003451                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:0000000000003458                 movzx   ecx, [rsp+158h+var_13A]
.text:000000000000345D                 mov     edi, r12d
.text:0000000000003460                 mov     r8, r15
.text:0000000000003463                 sub     edi, edx
.text:0000000000003465                 lea     rsi, [rbp+rdx*8+0]
.text:000000000000346A                 mov     rdx, [rsp+158h+var_158]
.text:000000000000346E                 call    do_copy
.text:0000000000003473                 xor     eax, 1
.text:0000000000003476                 mov     rcx, [rsp+158h+var_40]
.text:000000000000347E                 xor     rcx, fs:28h
.text:0000000000003487                 movzx   eax, al
.text:000000000000348A                 jnz     loc_361A
.text:0000000000003490                 add     rsp, 128h
.text:0000000000003497                 pop     rbx
.text:0000000000003498                 pop     rbp
.text:0000000000003499                 pop     r12
.text:000000000000349B                 pop     r13
.text:000000000000349D                 pop     r14
.text:000000000000349F                 pop     r15
.text:00000000000034A1                 retn
.text:00000000000034A2 ; ---------------------------------------------------------------------------
.text:00000000000034A2
.text:00000000000034A2 loc_34A2:                               ; CODE XREF: main+535↑j
.text:00000000000034A2                 cmp     [rsp+158h+var_FC], 0
.text:00000000000034A7                 jz      loc_33AB
.text:00000000000034AD                 mov     edx, 5
.text:00000000000034B2                 lea     rsi, aCannotMakeBoth ; "cannot make both hard and symbolic link"...
.text:00000000000034B9                 jmp     loc_35D7
.text:00000000000034BE ; ---------------------------------------------------------------------------
.text:00000000000034BE
.text:00000000000034BE loc_34BE:                               ; CODE XREF: main+540↑j
.text:00000000000034BE                 cmp     [rsp+158h+var_13B], 0
.text:00000000000034C3                 mov     [rsp+158h+var_FB], 0
.text:00000000000034C8                 jnz     loc_35CB
.text:00000000000034CE
.text:00000000000034CE loc_34CE:                               ; CODE XREF: main+54B↑j
.text:00000000000034CE                 xor     eax, eax
.text:00000000000034D0                 cmp     [rsp+158h+var_F0], 2
.text:00000000000034D5                 jnz     loc_33EC
.text:00000000000034DB                 cmp     [rsp+158h+var_11C], 2
.text:00000000000034E0                 jz      loc_33EC
.text:00000000000034E6
.text:00000000000034E6 loc_34E6:                               ; CODE XREF: main+716↓j
.text:00000000000034E6                 mov     edx, 5
.text:00000000000034EB                 lea     rsi, aReflinkCanBeUs ; "--reflink can be used only with --spars"...
.text:00000000000034F2                 jmp     loc_35D7
.text:00000000000034F7 ; ---------------------------------------------------------------------------
.text:00000000000034F7
.text:00000000000034F7 loc_34F7:                               ; CODE XREF: main+58F↑j
.text:00000000000034F7                 cmp     [rsp+158h+var_FE], 0
.text:00000000000034FC                 jz      short loc_3564
.text:00000000000034FE                 cmp     [rsp+158h+var_111], 0
.text:0000000000003503                 jnz     short loc_3564
.text:0000000000003505                 mov     [rsp+158h+var_124], 2
.text:000000000000350D
.text:000000000000350D loc_350D:                               ; CODE XREF: main+59A↑j
.text:000000000000350D                 movzx   eax, [rsp+158h+var_139]
.text:0000000000003512                 mov     [rsp+158h+var_114], al
.text:0000000000003516                 jmp     loc_3410
.text:000000000000351B ; ---------------------------------------------------------------------------
.text:000000000000351B
.text:000000000000351B loc_351B:                               ; CODE XREF: main+5BA↑j
.text:000000000000351B                 cmp     [rsp+158h+var_103], 0
.text:0000000000003520                 jz      short loc_3555
.text:0000000000003522                 lea     rsi, aCannotSetTarge ; "cannot set target context and preserve "...
.text:0000000000003529                 mov     edx, 5          ; category
.text:000000000000352E                 xor     edi, edi        ; domainname
.text:0000000000003530                 call    _dcgettext
.text:0000000000003535                 xor     esi, esi        ; errnum
.text:0000000000003537                 mov     rdx, rax        ; format
.text:000000000000353A                 mov     edi, 1          ; status
.text:000000000000353F                 xor     eax, eax
.text:0000000000003541                 call    _error
.text:0000000000003546
.text:0000000000003546 loc_3546:                               ; CODE XREF: main+5B2↑j
.text:0000000000003546                 cmp     [rsp+158h+var_103], 0
.text:000000000000354B                 jz      short loc_358B
.text:000000000000354D                 test    al, al
.text:000000000000354F                 jz      loc_3441
.text:0000000000003555
.text:0000000000003555 loc_3555:                               ; CODE XREF: main+6B0↑j
.text:0000000000003555                 cmp     cs:selinux_enabled, 0
.text:000000000000355C                 jnz     loc_3435
.text:0000000000003562                 jmp     short loc_35A0
.text:0000000000003564 ; ---------------------------------------------------------------------------
.text:0000000000003564
.text:0000000000003564 loc_3564:                               ; CODE XREF: main+68C↑j
.text:0000000000003564                                         ; main+693↑j
.text:0000000000003564                 mov     [rsp+158h+var_124], 4
.text:000000000000356C                 jmp     loc_3405
.text:0000000000003571 ; ---------------------------------------------------------------------------
.text:0000000000003571
.text:0000000000003571 loc_3571:                               ; CODE XREF: main+2B8↑j
.text:0000000000003571                 mov     [rsp+158h+var_107], r14b
.text:0000000000003576                 jmp     loc_3018
.text:000000000000357B ; ---------------------------------------------------------------------------
.text:000000000000357B
.text:000000000000357B loc_357B:                               ; CODE XREF: main+556↑j
.text:000000000000357B                 cmp     [rsp+158h+var_11C], 2
.text:0000000000003580                 jz      loc_33CC
.text:0000000000003586                 jmp     loc_34E6
.text:000000000000358B ; ---------------------------------------------------------------------------
.text:000000000000358B
.text:000000000000358B loc_358B:                               ; CODE XREF: main+6DB↑j
.text:000000000000358B                 test    al, al
.text:000000000000358D                 jz      loc_3441
.text:0000000000003593                 cmp     cs:selinux_enabled, 0
.text:000000000000359A                 jnz     loc_3441
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: main+6F2↑j
.text:00000000000035A0                 lea     rsi, aCannotPreserve ; "cannot preserve security context withou"...
.text:00000000000035A7                 mov     edx, 5          ; category
.text:00000000000035AC                 xor     edi, edi        ; domainname
.text:00000000000035AE                 call    _dcgettext
.text:00000000000035B3                 xor     esi, esi        ; errnum
.text:00000000000035B5                 mov     rdx, rax        ; format
.text:00000000000035B8                 mov     edi, 1          ; status
.text:00000000000035BD                 xor     eax, eax
.text:00000000000035BF                 call    _error
.text:00000000000035C4
.text:00000000000035C4 loc_35C4:                               ; CODE XREF: main+1E0↑j
.text:00000000000035C4                                         ; DATA XREF: .rodata:jpt_3050↓o
.text:00000000000035C4                 xor     edi, edi        ; jumptable 0000000000003050 case -130
.text:00000000000035C6                 call    usage
.text:00000000000035CB ; ---------------------------------------------------------------------------
.text:00000000000035CB
.text:00000000000035CB loc_35CB:                               ; CODE XREF: main+658↑j
.text:00000000000035CB                 lea     rsi, aOptionsBackupA ; "options --backup and --no-clobber are m"...
.text:00000000000035D2                 mov     edx, 5          ; category
.text:00000000000035D7
.text:00000000000035D7 loc_35D7:                               ; CODE XREF: main+649↑j
.text:00000000000035D7                                         ; main+682↑j
.text:00000000000035D7                 xor     edi, edi        ; domainname
.text:00000000000035D9                 call    _dcgettext
.text:00000000000035DE                 xor     esi, esi        ; errnum
.text:00000000000035E0                 mov     rdx, rax        ; format
.text:00000000000035E3                 xor     edi, edi        ; status
.text:00000000000035E5                 xor     eax, eax
.text:00000000000035E7                 call    _error
.text:00000000000035EC
.text:00000000000035EC def_3050:                               ; CODE XREF: main+1D3↑j
.text:00000000000035EC                                         ; main+1E0↑j
.text:00000000000035EC                                         ; DATA XREF: ...
.text:00000000000035EC                 mov     edi, 1          ; jumptable 0000000000003050 default case, cases -129-71,73-75,77-79,81,85-89,91-96,99,101,103,104,106,107,109,111,113,119,121-127
.text:00000000000035F1                 call    usage
.text:00000000000035F6 ; ---------------------------------------------------------------------------
.text:00000000000035F6
.text:00000000000035F6 loc_35F6:                               ; CODE XREF: main+455↑j
.text:00000000000035F6                 lea     rsi, aMultipleTarget ; "multiple target directories specified"
.text:00000000000035FD                 mov     edx, 5          ; category
.text:0000000000003602                 xor     edi, edi        ; domainname
.text:0000000000003604                 call    _dcgettext
.text:0000000000003609                 xor     esi, esi        ; errnum
.text:000000000000360B                 mov     rdx, rax        ; format
.text:000000000000360E                 mov     edi, 1          ; status
.text:0000000000003613                 xor     eax, eax
.text:0000000000003615                 call    _error
.text:000000000000361A
.text:000000000000361A loc_361A:                               ; CODE XREF: main+61A↑j
.text:000000000000361A                 call    ___stack_chk_fail
.text:000000000000361F ; ---------------------------------------------------------------------------
.text:000000000000361F
.text:000000000000361F loc_361F:                               ; CODE XREF: main+5D6↑j
.text:000000000000361F                 lea     rsi, aCannotPreserve_0 ; "cannot preserve extended attributes, cp"...
.text:0000000000003626                 mov     edx, 5          ; category
.text:000000000000362B                 xor     edi, edi        ; domainname
.text:000000000000362D                 call    _dcgettext
.text:0000000000003632                 xor     esi, esi        ; errnum
.text:0000000000003634                 mov     rdx, rax        ; format
.text:0000000000003637                 mov     edi, 1          ; status
.text:000000000000363C                 xor     eax, eax
.text:000000000000363E                 call    _error
.text:0000000000003643
.text:0000000000003643 loc_3643:                               ; CODE XREF: main+5CB↑j
.text:0000000000003643                 call    ___errno_location
.text:0000000000003648                 mov     rdi, [rsp+158h+var_138]
.text:000000000000364D                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000003653                 mov     rbx, rax
.text:0000000000003656                 call    quote
.text:000000000000365B                 lea     rsi, aFailedToSetDef ; "failed to set default file creation con"...
.text:0000000000003662                 mov     edx, 5          ; category
.text:0000000000003667                 xor     edi, edi        ; domainname
.text:0000000000003669                 mov     rbp, rax
.text:000000000000366C                 call    _dcgettext
.text:0000000000003671                 mov     esi, [rbx]      ; errnum
.text:0000000000003673                 mov     rdx, rax        ; format
.text:0000000000003676                 mov     rcx, rbp
.text:0000000000003679                 mov     edi, 1          ; status
.text:000000000000367E                 xor     eax, eax
.text:0000000000003680                 call    _error
.text:0000000000003685
.text:0000000000003685 loc_3685:                               ; CODE XREF: main+473↑j
.text:0000000000003685                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:000000000000368C                 mov     edi, 4
.text:0000000000003691                 call    quotearg_style
.text:0000000000003696                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:000000000000369D                 mov     edx, 5          ; category
.text:00000000000036A2                 xor     edi, edi        ; domainname
.text:00000000000036A4                 mov     rbp, rax
.text:00000000000036A7                 call    _dcgettext
.text:00000000000036AC                 mov     rbx, rax
.text:00000000000036AF                 call    ___errno_location
.text:00000000000036B4                 mov     esi, [rax]      ; errnum
.text:00000000000036B6                 mov     rcx, rbp
.text:00000000000036B9                 mov     rdx, rbx        ; format
.text:00000000000036BC                 mov     edi, 1          ; status
.text:00000000000036C1                 xor     eax, eax
.text:00000000000036C3                 call    _error
.text:00000000000036C3 ; } // starts at 2E70
.text:00000000000036C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000036C8 main            endp ; sp-analysis failed
.text:00000000000036C8
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000036D0
.text:00000000000036D0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000036D0                 public start
.text:00000000000036D0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 xor     ebp, ebp
.text:00000000000036D2                 mov     r9, rdx         ; rtld_fini
.text:00000000000036D5                 pop     rsi             ; argc
.text:00000000000036D6                 mov     rdx, rsp        ; ubp_av
.text:00000000000036D9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000036DD                 push    rax
.text:00000000000036DE                 push    rsp             ; stack_end
.text:00000000000036DF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000036E6                 lea     rcx, __libc_csu_init ; init
.text:00000000000036ED                 lea     rdi, main       ; main
.text:00000000000036F4                 call    cs:__libc_start_main_ptr
.text:00000000000036FA                 hlt
.text:00000000000036FA ; } // starts at 36D0
.text:00000000000036FA start           endp
.text:00000000000036FA
.text:00000000000036FA ; ---------------------------------------------------------------------------
.text:00000000000036FB                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003700
.text:0000000000003700 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_37B3↓p
.text:0000000000003700                 lea     rdi, __bss_start
.text:0000000000003707                 push    rbp
.text:0000000000003708                 lea     rax, __bss_start
.text:000000000000370F                 cmp     rax, rdi
.text:0000000000003712                 mov     rbp, rsp
.text:0000000000003715                 jz      short loc_3730
.text:0000000000003717                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000371E                 test    rax, rax
.text:0000000000003721                 jz      short loc_3730
.text:0000000000003723                 pop     rbp
.text:0000000000003724                 jmp     rax
.text:0000000000003724 ; ---------------------------------------------------------------------------
.text:0000000000003726                 align 10h
.text:0000000000003730
.text:0000000000003730 loc_3730:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003730                                         ; deregister_tm_clones+21↑j
.text:0000000000003730                 pop     rbp
.text:0000000000003731                 retn
.text:0000000000003731 deregister_tm_clones endp
.text:0000000000003731
.text:0000000000003731 ; ---------------------------------------------------------------------------
.text:0000000000003732                 align 20h
.text:0000000000003740
.text:0000000000003740 ; =============== S U B R O U T I N E =======================================
.text:0000000000003740
.text:0000000000003740 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003740
.text:0000000000003740 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003740                 lea     rdi, __bss_start
.text:0000000000003747                 lea     rsi, __bss_start
.text:000000000000374E                 push    rbp
.text:000000000000374F                 sub     rsi, rdi
.text:0000000000003752                 mov     rbp, rsp
.text:0000000000003755                 sar     rsi, 3
.text:0000000000003759                 mov     rax, rsi
.text:000000000000375C                 shr     rax, 3Fh
.text:0000000000003760                 add     rsi, rax
.text:0000000000003763                 sar     rsi, 1
.text:0000000000003766                 jz      short loc_3780
.text:0000000000003768                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000376F                 test    rax, rax
.text:0000000000003772                 jz      short loc_3780
.text:0000000000003774                 pop     rbp
.text:0000000000003775                 jmp     rax
.text:0000000000003775 ; ---------------------------------------------------------------------------
.text:0000000000003777                 align 20h
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003780                                         ; register_tm_clones+32↑j
.text:0000000000003780                 pop     rbp
.text:0000000000003781                 retn
.text:0000000000003781 register_tm_clones endp
.text:0000000000003781
.text:0000000000003781 ; ---------------------------------------------------------------------------
.text:0000000000003782                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790 ; Attributes: info_from_lumina
.text:0000000000003790
.text:0000000000003790 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003790                 cmp     cs:completed_7697, 0
.text:0000000000003797                 jnz     short locret_37C8
.text:0000000000003799                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000037A1                 push    rbp
.text:00000000000037A2                 mov     rbp, rsp
.text:00000000000037A5                 jz      short loc_37B3
.text:00000000000037A7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000037AE                 call    __cxa_finalize
.text:00000000000037B3
.text:00000000000037B3 loc_37B3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000037B3                 call    deregister_tm_clones
.text:00000000000037B8                 mov     cs:completed_7697, 1
.text:00000000000037BF                 pop     rbp
.text:00000000000037C0                 retn
.text:00000000000037C0 ; ---------------------------------------------------------------------------
.text:00000000000037C1                 align 8
.text:00000000000037C8
.text:00000000000037C8 locret_37C8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000037C8                 rep retn
.text:00000000000037C8 __do_global_dtors_aux endp
.text:00000000000037C8
.text:00000000000037C8 ; ---------------------------------------------------------------------------
.text:00000000000037CA                 align 10h
.text:00000000000037D0
.text:00000000000037D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037D0
.text:00000000000037D0 ; Attributes: bp-based frame
.text:00000000000037D0
.text:00000000000037D0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000037D0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000037D0                 push    rbp
.text:00000000000037D1                 mov     rbp, rsp
.text:00000000000037D4                 pop     rbp
.text:00000000000037D5                 jmp     register_tm_clones
.text:00000000000037D5 frame_dummy     endp
.text:00000000000037D5
.text:00000000000037D5 ; ---------------------------------------------------------------------------
.text:00000000000037DA                 align 20h
.text:00000000000037E0
.text:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037E0
.text:00000000000037E0
.text:00000000000037E0 decode_preserve_arg proc near           ; CODE XREF: main+414↑p
.text:00000000000037E0                                         ; main+4E5↑p
.text:00000000000037E0
.text:00000000000037E0 var_48          = qword ptr -48h
.text:00000000000037E0 ptr             = qword ptr -40h
.text:00000000000037E0
.text:00000000000037E0 ; __unwind {
.text:00000000000037E0                 push    r15
.text:00000000000037E2                 push    r14
.text:00000000000037E4                 lea     r14, aPreserve  ; "--preserve"
.text:00000000000037EB                 push    r13
.text:00000000000037ED                 push    r12
.text:00000000000037EF                 mov     r12d, edx
.text:00000000000037F2                 push    rbp
.text:00000000000037F3                 push    rbx
.text:00000000000037F4                 mov     rbp, rsi
.text:00000000000037F7                 mov     ebx, edx
.text:00000000000037F9                 lea     r13, preserve_vals_7370
.text:0000000000003800                 sub     rsp, 18h
.text:0000000000003804                 call    xstrdup
.text:0000000000003809                 mov     r15, rax
.text:000000000000380C                 mov     [rsp+48h+ptr], rax
.text:0000000000003811                 lea     rax, aNoPreserve ; "--no-preserve"
.text:0000000000003818                 test    r12b, r12b
.text:000000000000381B                 lea     r12, jpt_388B
.text:0000000000003822                 cmovnz  rax, r14
.text:0000000000003826                 mov     [rsp+48h+var_48], rax
.text:000000000000382A                 nop     word ptr [rax+rax+00h]
.text:0000000000003830
.text:0000000000003830 loc_3830:                               ; CODE XREF: decode_preserve_arg+C6↓j
.text:0000000000003830                 mov     esi, 2Ch ; ','  ; c
.text:0000000000003835                 mov     rdi, r15        ; s
.text:0000000000003838                 xor     r14d, r14d
.text:000000000000383B                 call    _strchr
.text:0000000000003840                 test    rax, rax
.text:0000000000003843                 jz      short loc_384C
.text:0000000000003845                 lea     r14, [rax+1]
.text:0000000000003849                 mov     byte ptr [rax], 0
.text:000000000000384C
.text:000000000000384C loc_384C:                               ; CODE XREF: decode_preserve_arg+63↑j
.text:000000000000384C                 mov     r9, cs:argmatch_die
.text:0000000000003853                 mov     rdi, [rsp+48h+var_48]
.text:0000000000003857                 lea     rcx, preserve_vals_7370
.text:000000000000385E                 lea     rdx, preserve_args_7371
.text:0000000000003865                 mov     r8d, 4
.text:000000000000386B                 mov     rsi, r15
.text:000000000000386E                 call    __xargmatch_internal
.text:0000000000003873                 cmp     dword ptr [r13+rax*4+0], 6 ; switch 7 cases
.text:0000000000003879                 ja      def_388B        ; jumptable 000000000000388B default case
.text:000000000000387F                 mov     eax, [r13+rax*4+0]
.text:0000000000003884                 movsxd  rax, ds:(jpt_388B - 12C00h)[r12+rax*4]
.text:0000000000003888                 add     rax, r12
.text:000000000000388B                 jmp     rax             ; switch jump
.text:000000000000388B ; ---------------------------------------------------------------------------
.text:000000000000388D                 align 10h
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: decode_preserve_arg+AB↑j
.text:0000000000003890                                         ; DATA XREF: .rodata:jpt_388B↓o
.text:0000000000003890                 mov     [rbp+27h], bl   ; jumptable 000000000000388B case 5
.text:0000000000003893                 mov     [rbp+28h], bl
.text:0000000000003896                 db      2Eh
.text:0000000000003896                 nop     word ptr [rax+rax+00000000h]
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: decode_preserve_arg+E6↓j
.text:00000000000038A0                                         ; decode_preserve_arg+F3↓j ...
.text:00000000000038A0                 test    r14, r14
.text:00000000000038A3                 mov     r15, r14
.text:00000000000038A6                 jnz     short loc_3830
.text:00000000000038A8                 mov     rdi, [rsp+48h+ptr] ; ptr
.text:00000000000038AD                 add     rsp, 18h
.text:00000000000038B1                 pop     rbx
.text:00000000000038B2                 pop     rbp
.text:00000000000038B3                 pop     r12
.text:00000000000038B5                 pop     r13
.text:00000000000038B7                 pop     r14
.text:00000000000038B9                 pop     r15
.text:00000000000038BB                 jmp     free
.text:00000000000038C0 ; ---------------------------------------------------------------------------
.text:00000000000038C0
.text:00000000000038C0 loc_38C0:                               ; CODE XREF: decode_preserve_arg+AB↑j
.text:00000000000038C0                                         ; DATA XREF: .rodata:jpt_388B↓o
.text:00000000000038C0                 mov     [rbp+26h], bl   ; jumptable 000000000000388B case 4
.text:00000000000038C3                 mov     [rbp+25h], bl
.text:00000000000038C6                 jmp     short loc_38A0
.text:00000000000038C6 ; ---------------------------------------------------------------------------
.text:00000000000038C8                 align 10h
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: decode_preserve_arg+AB↑j
.text:00000000000038D0                                         ; DATA XREF: .rodata:jpt_388B↓o
.text:00000000000038D0                 mov     [rbp+22h], bl   ; jumptable 000000000000388B case 3
.text:00000000000038D3                 jmp     short loc_38A0
.text:00000000000038D3 ; ---------------------------------------------------------------------------
.text:00000000000038D5                 align 8
.text:00000000000038D8
.text:00000000000038D8 loc_38D8:                               ; CODE XREF: decode_preserve_arg+AB↑j
.text:00000000000038D8                                         ; DATA XREF: .rodata:jpt_388B↓o
.text:00000000000038D8                 mov     [rbp+1Dh], bl   ; jumptable 000000000000388B case 2
.text:00000000000038DB                 jmp     short loc_38A0
.text:00000000000038DB ; ---------------------------------------------------------------------------
.text:00000000000038DD                 align 20h
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: decode_preserve_arg+AB↑j
.text:00000000000038E0                                         ; DATA XREF: .rodata:jpt_388B↓o
.text:00000000000038E0                 mov     [rbp+1Fh], bl   ; jumptable 000000000000388B case 1
.text:00000000000038E3                 jmp     short loc_38A0
.text:00000000000038E3 ; ---------------------------------------------------------------------------
.text:00000000000038E5                 align 8
.text:00000000000038E8
.text:00000000000038E8 loc_38E8:                               ; CODE XREF: decode_preserve_arg+AB↑j
.text:00000000000038E8                                         ; DATA XREF: .rodata:jpt_388B↓o
.text:00000000000038E8                 mov     eax, ebx        ; jumptable 000000000000388B case 0
.text:00000000000038EA                 mov     [rbp+1Eh], bl
.text:00000000000038ED                 xor     eax, 1
.text:00000000000038F0                 mov     [rbp+20h], al
.text:00000000000038F3                 jmp     short loc_38A0
.text:00000000000038F3 ; ---------------------------------------------------------------------------
.text:00000000000038F5                 align 8
.text:00000000000038F8
.text:00000000000038F8 loc_38F8:                               ; CODE XREF: decode_preserve_arg+AB↑j
.text:00000000000038F8                                         ; DATA XREF: .rodata:jpt_388B↓o
.text:00000000000038F8                 mov     eax, ebx        ; jumptable 000000000000388B case 6
.text:00000000000038FA                 mov     [rbp+1Eh], bl
.text:00000000000038FD                 mov     [rbp+1Fh], bl
.text:0000000000003900                 xor     eax, 1
.text:0000000000003903                 cmp     cs:selinux_enabled, 0
.text:000000000000390A                 mov     [rbp+1Dh], bl
.text:000000000000390D                 mov     [rbp+22h], bl
.text:0000000000003910                 mov     [rbp+20h], al
.text:0000000000003913                 jz      short loc_3918
.text:0000000000003915                 mov     [rbp+25h], bl
.text:0000000000003918
.text:0000000000003918 loc_3918:                               ; CODE XREF: decode_preserve_arg+133↑j
.text:0000000000003918                 mov     [rbp+27h], bl
.text:000000000000391B                 jmp     short loc_38A0
.text:000000000000391D ; ---------------------------------------------------------------------------
.text:000000000000391D
.text:000000000000391D def_388B:                               ; CODE XREF: decode_preserve_arg+99↑j
.text:000000000000391D                 call    _abort          ; jumptable 000000000000388B default case
.text:000000000000391D ; } // starts at 37E0
.text:000000000000391D decode_preserve_arg endp
.text:000000000000391D
.text:000000000000391D ; ---------------------------------------------------------------------------
.text:0000000000003922                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930 ; __int64 __fastcall target_directory_operand(char *filename, struct stat *stat_buf)
.text:0000000000003930 target_directory_operand proc near      ; CODE XREF: do_copy+8D↓p
.text:0000000000003930                                         ; do_copy+3E5↓p
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 push    r14
.text:0000000000003932                 push    r13
.text:0000000000003934                 mov     r14, rdx
.text:0000000000003937                 push    r12
.text:0000000000003939                 push    rbp
.text:000000000000393A                 mov     rdx, rsi        ; stat_buf
.text:000000000000393D                 push    rbx
.text:000000000000393E                 mov     rbp, rdi
.text:0000000000003941                 mov     rbx, rsi
.text:0000000000003944                 mov     rsi, rdi        ; filename
.text:0000000000003947                 mov     edi, 1          ; ver
.text:000000000000394C                 mov     r13d, ecx
.text:000000000000394F                 call    ___xstat
.text:0000000000003954                 test    eax, eax
.text:0000000000003956                 jnz     short loc_3975
.text:0000000000003958                 mov     edx, [rbx+18h]
.text:000000000000395B                 and     edx, 0F000h
.text:0000000000003961                 cmp     edx, 4000h
.text:0000000000003967                 jz      short loc_39AD
.text:0000000000003969
.text:0000000000003969 loc_3969:                               ; CODE XREF: target_directory_operand+65↓j
.text:0000000000003969                 and     eax, 1
.text:000000000000396C
.text:000000000000396C loc_396C:                               ; CODE XREF: target_directory_operand+7B↓j
.text:000000000000396C                                         ; target_directory_operand+82↓j ...
.text:000000000000396C                 pop     rbx
.text:000000000000396D                 pop     rbp
.text:000000000000396E                 pop     r12
.text:0000000000003970                 pop     r13
.text:0000000000003972                 pop     r14
.text:0000000000003974                 retn
.text:0000000000003975 ; ---------------------------------------------------------------------------
.text:0000000000003975
.text:0000000000003975 loc_3975:                               ; CODE XREF: target_directory_operand+26↑j
.text:0000000000003975                 call    ___errno_location
.text:000000000000397A                 mov     r12d, [rax]
.text:000000000000397D                 test    r12d, r12d
.text:0000000000003980                 jnz     short loc_3997
.text:0000000000003982                 mov     eax, [rbx+18h]
.text:0000000000003985                 and     eax, 0F000h
.text:000000000000398A                 cmp     eax, 4000h
.text:000000000000398F                 setz    al
.text:0000000000003992                 movzx   eax, al
.text:0000000000003995                 jmp     short loc_3969
.text:0000000000003997 ; ---------------------------------------------------------------------------
.text:0000000000003997
.text:0000000000003997 loc_3997:                               ; CODE XREF: target_directory_operand+50↑j
.text:0000000000003997                 cmp     r12d, 2
.text:000000000000399B                 jz      short loc_39B4
.text:000000000000399D                 test    r13b, r13b
.text:00000000000039A0                 jz      short loc_39BC
.text:00000000000039A2                 mov     dword ptr [rbx+18h], 0
.text:00000000000039A9                 xor     eax, eax
.text:00000000000039AB                 jmp     short loc_396C
.text:00000000000039AD ; ---------------------------------------------------------------------------
.text:00000000000039AD
.text:00000000000039AD loc_39AD:                               ; CODE XREF: target_directory_operand+37↑j
.text:00000000000039AD                 mov     eax, 1
.text:00000000000039B2                 jmp     short loc_396C
.text:00000000000039B4 ; ---------------------------------------------------------------------------
.text:00000000000039B4
.text:00000000000039B4 loc_39B4:                               ; CODE XREF: target_directory_operand+6B↑j
.text:00000000000039B4                 mov     byte ptr [r14], 1
.text:00000000000039B8                 xor     eax, eax
.text:00000000000039BA                 jmp     short loc_396C
.text:00000000000039BC ; ---------------------------------------------------------------------------
.text:00000000000039BC
.text:00000000000039BC loc_39BC:                               ; CODE XREF: target_directory_operand+70↑j
.text:00000000000039BC                 mov     rsi, rbp
.text:00000000000039BF                 mov     edi, 4
.text:00000000000039C4                 call    quotearg_style
.text:00000000000039C9                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:00000000000039D0                 mov     rbx, rax
.text:00000000000039D3                 mov     edx, 5          ; category
.text:00000000000039D8                 xor     edi, edi        ; domainname
.text:00000000000039DA                 call    _dcgettext
.text:00000000000039DF                 mov     rcx, rbx
.text:00000000000039E2                 mov     rdx, rax        ; format
.text:00000000000039E5                 mov     esi, r12d       ; errnum
.text:00000000000039E8                 mov     edi, 1          ; status
.text:00000000000039ED                 xor     eax, eax
.text:00000000000039EF                 call    _error
.text:00000000000039EF ; } // starts at 3930
.text:00000000000039F4                 xchg    ax, ax
.text:00000000000039F6                 db      2Eh
.text:00000000000039F6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000039F6 target_directory_operand endp ; sp-analysis failed
.text:00000000000039F6
.text:0000000000003A00
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00
.text:0000000000003A00 ; Attributes: bp-based frame
.text:0000000000003A00
.text:0000000000003A00 ; __int64 __fastcall make_dir_parents_private(void *src)
.text:0000000000003A00 make_dir_parents_private proc near      ; CODE XREF: do_copy+22C↓p
.text:0000000000003A00
.text:0000000000003A00 var_190         = qword ptr -190h
.text:0000000000003A00 var_181         = byte ptr -181h
.text:0000000000003A00 var_180         = qword ptr -180h
.text:0000000000003A00 var_178         = qword ptr -178h
.text:0000000000003A00 var_170         = qword ptr -170h
.text:0000000000003A00 filename        = qword ptr -168h
.text:0000000000003A00 stat_buf        = stat ptr -160h
.text:0000000000003A00 var_D0          = xmmword ptr -0D0h
.text:0000000000003A00 var_C0          = xmmword ptr -0C0h
.text:0000000000003A00 var_B0          = xmmword ptr -0B0h
.text:0000000000003A00 var_A0          = xmmword ptr -0A0h
.text:0000000000003A00 var_90          = xmmword ptr -90h
.text:0000000000003A00 var_80          = xmmword ptr -80h
.text:0000000000003A00 var_70          = xmmword ptr -70h
.text:0000000000003A00 var_60          = xmmword ptr -60h
.text:0000000000003A00 var_50          = xmmword ptr -50h
.text:0000000000003A00 var_38          = qword ptr -38h
.text:0000000000003A00
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 push    rbp
.text:0000000000003A01                 mov     rbp, rsp
.text:0000000000003A04                 push    r15
.text:0000000000003A06                 push    r14
.text:0000000000003A08                 push    r13
.text:0000000000003A0A                 push    r12
.text:0000000000003A0C                 mov     r13, r9
.text:0000000000003A0F                 push    rbx
.text:0000000000003A10                 mov     r15, rsi
.text:0000000000003A13                 mov     rbx, rdi
.text:0000000000003A16                 sub     rsp, 168h
.text:0000000000003A1D                 mov     [rbp+var_180], rcx
.text:0000000000003A24                 mov     [rbp+var_178], r8
.text:0000000000003A2B                 mov     [rbp+var_190], rdx
.text:0000000000003A32                 mov     rdx, fs:28h
.text:0000000000003A3B                 mov     [rbp+var_38], rdx
.text:0000000000003A3F                 xor     edx, edx
.text:0000000000003A41                 call    _strlen
.text:0000000000003A46                 lea     rdx, [rax+1]    ; n
.text:0000000000003A4A                 add     rax, 1Fh
.text:0000000000003A4E                 mov     rsi, rbx        ; src
.text:0000000000003A51                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000003A55                 sub     rsp, rax
.text:0000000000003A58                 lea     rdi, [rsp+190h+var_181]
.text:0000000000003A5D                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:0000000000003A61                 call    _memcpy
.text:0000000000003A66                 mov     rdi, rax
.text:0000000000003A69                 mov     r12, rax
.text:0000000000003A6C                 call    dir_len
.text:0000000000003A71                 mov     r14, rax
.text:0000000000003A74                 add     rax, 1Fh
.text:0000000000003A78                 mov     rsi, r12        ; src
.text:0000000000003A7B                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000003A7F                 mov     rdx, r14        ; n
.text:0000000000003A82                 sub     rsp, rax
.text:0000000000003A85                 lea     rbx, [rsp+190h+var_181]
.text:0000000000003A8A                 and     rbx, 0FFFFFFFFFFFFFFF0h
.text:0000000000003A8E                 mov     rdi, rbx        ; dest
.text:0000000000003A91                 call    _memcpy
.text:0000000000003A96                 mov     rax, [rbp+var_180]
.text:0000000000003A9D                 mov     byte ptr [rbx+r14], 0
.text:0000000000003AA2                 mov     rsi, rbx        ; filename
.text:0000000000003AA5                 mov     edi, 1          ; ver
.text:0000000000003AAA                 mov     qword ptr [rax], 0
.text:0000000000003AB1                 lea     rax, [rbp+stat_buf]
.text:0000000000003AB8                 mov     rdx, rax        ; stat_buf
.text:0000000000003ABB                 mov     [rbp+var_170], rax
.text:0000000000003AC2                 call    ___xstat
.text:0000000000003AC7                 test    eax, eax
.text:0000000000003AC9                 jz      loc_3E80
.text:0000000000003ACF                 lea     rdi, [r12+r15]
.text:0000000000003AD3                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000003AD6                 mov     [rbp+filename], rdi
.text:0000000000003ADD                 jnz     loc_3F28
.text:0000000000003AE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: make_dir_parents_private+EF↓j
.text:0000000000003AE8                 add     rdi, 1          ; s
.text:0000000000003AEC                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000003AEF                 jz      short loc_3AE8
.text:0000000000003AF1
.text:0000000000003AF1 loc_3AF1:                               ; CODE XREF: make_dir_parents_private+52F↓j
.text:0000000000003AF1                 lea     rax, [rbp+var_D0]
.text:0000000000003AF8                 mov     [rbp-188h], rax
.text:0000000000003AFF                 nop
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: make_dir_parents_private+19F↓j
.text:0000000000003B00                                         ; make_dir_parents_private+1B1↓j
.text:0000000000003B00                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000003B05                 call    _strchr
.text:0000000000003B0A                 test    rax, rax
.text:0000000000003B0D                 mov     rbx, rax
.text:0000000000003B10                 jz      loc_3E9C
.text:0000000000003B16                 mov     rdx, [rbp+var_170] ; stat_buf
.text:0000000000003B1D                 mov     byte ptr [rbx], 0
.text:0000000000003B20                 mov     rsi, r12        ; filename
.text:0000000000003B23                 mov     edi, 1          ; ver
.text:0000000000003B28                 call    ___xstat
.text:0000000000003B2D                 test    eax, eax
.text:0000000000003B2F                 mov     r14d, eax
.text:0000000000003B32                 jnz     loc_3BC0
.text:0000000000003B38                 test    dword ptr [r13+1Ch], 0FFFFFF00h
.text:0000000000003B40                 jnz     short loc_3BC0
.text:0000000000003B42
.text:0000000000003B42 loc_3B42:                               ; CODE XREF: make_dir_parents_private+28C↓j
.text:0000000000003B42                 mov     rdi, [rbp+filename]
.text:0000000000003B49                 xor     ecx, ecx
.text:0000000000003B4B                 xor     edx, edx
.text:0000000000003B4D                 mov     r8, r13
.text:0000000000003B50                 mov     rsi, r12
.text:0000000000003B53                 call    set_process_security_ctx
.text:0000000000003B58                 test    al, al
.text:0000000000003B5A                 jz      loc_3E65
.text:0000000000003B60                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000003B66                 and     eax, 0F000h
.text:0000000000003B6B                 cmp     eax, 4000h
.text:0000000000003B70                 jnz     loc_3F77
.text:0000000000003B76                 mov     rax, [rbp+var_178]
.text:0000000000003B7D                 mov     byte ptr [rax], 0
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: make_dir_parents_private+3AA↓j
.text:0000000000003B80                 mov     rax, 0FF000000FF00h
.text:0000000000003B8A                 test    [r13+20h], rax
.text:0000000000003B8E                 jnz     loc_3E40
.text:0000000000003B94
.text:0000000000003B94 loc_3B94:                               ; CODE XREF: make_dir_parents_private+3A4↓j
.text:0000000000003B94                                         ; make_dir_parents_private+454↓j ...
.text:0000000000003B94                 cmp     byte ptr [rbx+1], 2Fh ; '/'
.text:0000000000003B98                 lea     rdi, [rbx+1]
.text:0000000000003B9C                 mov     byte ptr [rbx], 2Fh ; '/'
.text:0000000000003B9F                 jnz     loc_3B00
.text:0000000000003BA5                 nop     dword ptr [rax]
.text:0000000000003BA8
.text:0000000000003BA8 loc_3BA8:                               ; CODE XREF: make_dir_parents_private+1AF↓j
.text:0000000000003BA8                 add     rdi, 1
.text:0000000000003BAC                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000003BAF                 jz      short loc_3BA8
.text:0000000000003BB1                 jmp     loc_3B00
.text:0000000000003BB1 ; ---------------------------------------------------------------------------
.text:0000000000003BB6                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: make_dir_parents_private+132↑j
.text:0000000000003BC0                                         ; make_dir_parents_private+140↑j
.text:0000000000003BC0                 mov     rdx, [rbp-188h] ; stat_buf
.text:0000000000003BC7                 mov     rsi, [rbp+filename] ; filename
.text:0000000000003BCE                 mov     edi, 1          ; ver
.text:0000000000003BD3                 call    ___xstat
.text:0000000000003BD8                 test    eax, eax
.text:0000000000003BDA                 jz      loc_3DB0
.text:0000000000003BE0                 call    ___errno_location
.text:0000000000003BE5                 mov     r8d, [rax]
.text:0000000000003BE8                 test    r8d, r8d
.text:0000000000003BEB                 jnz     loc_3DCC
.text:0000000000003BF1
.text:0000000000003BF1 loc_3BF1:                               ; CODE XREF: make_dir_parents_private+3C0↓j
.text:0000000000003BF1                 mov     edi, 0A8h
.text:0000000000003BF6                 call    xmalloc
.text:0000000000003BFB                 movdqa  xmm0, [rbp+var_D0]
.text:0000000000003C03                 mov     r15, rax
.text:0000000000003C06                 mov     rcx, [rbp+var_180]
.text:0000000000003C0D                 movups  xmmword ptr [rax], xmm0
.text:0000000000003C10                 movdqa  xmm0, [rbp+var_C0]
.text:0000000000003C18                 movups  xmmword ptr [rax+10h], xmm0
.text:0000000000003C1C                 movdqa  xmm0, [rbp+var_B0]
.text:0000000000003C24                 movups  xmmword ptr [rax+20h], xmm0
.text:0000000000003C28                 movdqa  xmm0, [rbp+var_A0]
.text:0000000000003C30                 movups  xmmword ptr [rax+30h], xmm0
.text:0000000000003C34                 movdqa  xmm0, [rbp+var_90]
.text:0000000000003C3C                 movups  xmmword ptr [rax+40h], xmm0
.text:0000000000003C40                 movdqa  xmm0, [rbp+var_80]
.text:0000000000003C45                 movups  xmmword ptr [rax+50h], xmm0
.text:0000000000003C49                 movdqa  xmm0, [rbp+var_70]
.text:0000000000003C4E                 movups  xmmword ptr [rax+60h], xmm0
.text:0000000000003C52                 movdqa  xmm0, [rbp+var_60]
.text:0000000000003C57                 movups  xmmword ptr [rax+70h], xmm0
.text:0000000000003C5B                 movdqa  xmm0, [rbp+var_50]
.text:0000000000003C60                 movups  xmmword ptr [rax+80h], xmm0
.text:0000000000003C67                 mov     rax, rbx
.text:0000000000003C6A                 mov     byte ptr [r15+90h], 0
.text:0000000000003C72                 sub     rax, r12
.text:0000000000003C75                 test    r14d, r14d
.text:0000000000003C78                 mov     [r15+98h], rax
.text:0000000000003C7F                 mov     rax, [rcx]
.text:0000000000003C82                 mov     [rcx], r15
.text:0000000000003C85                 mov     [r15+0A0h], rax
.text:0000000000003C8C                 jz      loc_3B42
.text:0000000000003C92                 mov     edx, [r15+18h]
.text:0000000000003C96                 mov     rdi, [rbp+filename]
.text:0000000000003C9D                 mov     r8, r13
.text:0000000000003CA0                 mov     ecx, 1
.text:0000000000003CA5                 mov     rsi, r12
.text:0000000000003CA8                 call    set_process_security_ctx
.text:0000000000003CAD                 test    al, al
.text:0000000000003CAF                 jz      loc_3E65
.text:0000000000003CB5                 mov     rax, [rbp+var_178]
.text:0000000000003CBC                 mov     esi, [r15+18h]
.text:0000000000003CC0                 mov     byte ptr [rax], 1
.text:0000000000003CC3                 cmp     byte ptr [r13+1Dh], 0
.text:0000000000003CC8                 jz      loc_3E20
.text:0000000000003CCE                 mov     r14d, esi
.text:0000000000003CD1                 and     r14d, 3Fh
.text:0000000000003CD5                 mov     eax, r14d
.text:0000000000003CD8                 xor     eax, 0FFFh
.text:0000000000003CDD
.text:0000000000003CDD loc_3CDD:                               ; CODE XREF: make_dir_parents_private+436↓j
.text:0000000000003CDD                                         ; make_dir_parents_private+478↓j
.text:0000000000003CDD                 cmp     byte ptr [r13+20h], 0
.text:0000000000003CE2                 mov     edx, 1FFh
.text:0000000000003CE7                 mov     rdi, r12        ; path
.text:0000000000003CEA                 cmovnz  esi, edx
.text:0000000000003CED                 and     esi, eax        ; mode
.text:0000000000003CEF                 call    _mkdir
.text:0000000000003CF4                 test    eax, eax
.text:0000000000003CF6                 jnz     loc_3F34
.text:0000000000003CFC                 mov     rax, [rbp+var_190]
.text:0000000000003D03                 test    rax, rax
.text:0000000000003D06                 jz      short loc_3D21
.text:0000000000003D08                 mov     rdx, [rbp+filename]
.text:0000000000003D0F                 mov     rsi, rax
.text:0000000000003D12                 mov     rcx, r12
.text:0000000000003D15                 mov     edi, 1
.text:0000000000003D1A                 xor     eax, eax
.text:0000000000003D1C                 call    ___printf_chk
.text:0000000000003D21
.text:0000000000003D21 loc_3D21:                               ; CODE XREF: make_dir_parents_private+306↑j
.text:0000000000003D21                 mov     rdx, [rbp+var_170] ; stat_buf
.text:0000000000003D28                 mov     rsi, r12        ; filename
.text:0000000000003D2B                 mov     edi, 1          ; ver
.text:0000000000003D30                 call    ___lxstat
.text:0000000000003D35                 test    eax, eax
.text:0000000000003D37                 jnz     loc_3F7F
.text:0000000000003D3D                 cmp     byte ptr [r13+1Eh], 0
.text:0000000000003D42                 mov     esi, [rbp+stat_buf.st_mode]
.text:0000000000003D48                 jnz     short loc_3D76
.text:0000000000003D4A                 mov     eax, esi
.text:0000000000003D4C                 not     eax
.text:0000000000003D4E                 test    eax, r14d
.text:0000000000003D51                 jnz     loc_3F00
.text:0000000000003D57
.text:0000000000003D57 loc_3D57:                               ; CODE XREF: make_dir_parents_private+51F↓j
.text:0000000000003D57                 mov     eax, esi
.text:0000000000003D59                 and     eax, 1C0h
.text:0000000000003D5E                 cmp     eax, 1C0h
.text:0000000000003D63                 jz      short loc_3D9A
.text:0000000000003D65                 mov     eax, esi
.text:0000000000003D67
.text:0000000000003D67 loc_3D67:                               ; CODE XREF: make_dir_parents_private+519↓j
.text:0000000000003D67                 or      r14d, eax
.text:0000000000003D6A                 mov     byte ptr [r15+90h], 1
.text:0000000000003D72                 mov     [r15+18h], r14d
.text:0000000000003D76
.text:0000000000003D76 loc_3D76:                               ; CODE XREF: make_dir_parents_private+348↑j
.text:0000000000003D76                 mov     eax, esi
.text:0000000000003D78                 and     eax, 1C0h
.text:0000000000003D7D                 cmp     eax, 1C0h
.text:0000000000003D82                 jz      short loc_3D9A
.text:0000000000003D84                 or      esi, 1C0h       ; mode
.text:0000000000003D8A                 mov     rdi, r12        ; file
.text:0000000000003D8D                 call    _chmod
.text:0000000000003D92                 test    eax, eax
.text:0000000000003D94                 jnz     loc_3F9D
.text:0000000000003D9A
.text:0000000000003D9A loc_3D9A:                               ; CODE XREF: make_dir_parents_private+363↑j
.text:0000000000003D9A                                         ; make_dir_parents_private+382↑j
.text:0000000000003D9A                 mov     rax, [rbp+var_178]
.text:0000000000003DA1                 cmp     byte ptr [rax], 0
.text:0000000000003DA4                 jnz     loc_3B94
.text:0000000000003DAA                 jmp     loc_3B80
.text:0000000000003DAA ; ---------------------------------------------------------------------------
.text:0000000000003DAF                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: make_dir_parents_private+1DA↑j
.text:0000000000003DB0                 mov     eax, dword ptr [rbp+var_C0+8]
.text:0000000000003DB6                 and     eax, 0F000h
.text:0000000000003DBB                 cmp     eax, 4000h
.text:0000000000003DC0                 jz      loc_3BF1
.text:0000000000003DC6                 mov     r8d, 14h
.text:0000000000003DCC
.text:0000000000003DCC loc_3DCC:                               ; CODE XREF: make_dir_parents_private+1EB↑j
.text:0000000000003DCC                 mov     rsi, [rbp+filename]
.text:0000000000003DD3                 mov     edi, 4
.text:0000000000003DD8                 mov     dword ptr [rbp+var_170], r8d
.text:0000000000003DDF                 call    quotearg_style
.text:0000000000003DE4                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:0000000000003DEB                 mov     edx, 5          ; category
.text:0000000000003DF0                 xor     edi, edi        ; domainname
.text:0000000000003DF2                 mov     rbx, rax
.text:0000000000003DF5                 call    _dcgettext
.text:0000000000003DFA                 mov     r8d, dword ptr [rbp+var_170]
.text:0000000000003E01                 mov     rdx, rax        ; format
.text:0000000000003E04                 mov     rcx, rbx
.text:0000000000003E07                 xor     eax, eax
.text:0000000000003E09                 xor     edi, edi        ; status
.text:0000000000003E0B                 mov     esi, r8d        ; errnum
.text:0000000000003E0E                 call    _error
.text:0000000000003E13                 xor     eax, eax
.text:0000000000003E15                 jmp     loc_3EA1
.text:0000000000003E15 ; ---------------------------------------------------------------------------
.text:0000000000003E1A                 align 20h
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: make_dir_parents_private+2C8↑j
.text:0000000000003E20                 cmp     byte ptr [r13+1Eh], 0
.text:0000000000003E25                 jz      short loc_3E70
.text:0000000000003E27                 mov     r14d, esi
.text:0000000000003E2A                 and     r14d, 12h
.text:0000000000003E2E                 mov     eax, r14d
.text:0000000000003E31                 xor     eax, 0FFFh
.text:0000000000003E36                 jmp     loc_3CDD
.text:0000000000003E36 ; ---------------------------------------------------------------------------
.text:0000000000003E3B                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: make_dir_parents_private+18E↑j
.text:0000000000003E40                 movzx   esi, byte ptr [r13+25h]
.text:0000000000003E45                 xor     edx, edx
.text:0000000000003E47                 mov     rcx, r13
.text:0000000000003E4A                 mov     rdi, r12
.text:0000000000003E4D                 call    set_file_security_ctx
.text:0000000000003E52                 test    al, al
.text:0000000000003E54                 jnz     loc_3B94
.text:0000000000003E5A                 cmp     byte ptr [r13+26h], 0
.text:0000000000003E5F                 jz      loc_3B94
.text:0000000000003E65
.text:0000000000003E65 loc_3E65:                               ; CODE XREF: make_dir_parents_private+15A↑j
.text:0000000000003E65                                         ; make_dir_parents_private+2AF↑j
.text:0000000000003E65                 xor     eax, eax
.text:0000000000003E67                 jmp     short loc_3EA1
.text:0000000000003E67 ; ---------------------------------------------------------------------------
.text:0000000000003E69                 align 10h
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: make_dir_parents_private+425↑j
.text:0000000000003E70                 xor     r14d, r14d
.text:0000000000003E73                 mov     eax, 0FFFh
.text:0000000000003E78                 jmp     loc_3CDD
.text:0000000000003E78 ; ---------------------------------------------------------------------------
.text:0000000000003E7D                 align 20h
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: make_dir_parents_private+C9↑j
.text:0000000000003E80                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000003E86                 and     eax, 0F000h
.text:0000000000003E8B                 cmp     eax, 4000h
.text:0000000000003E90                 jnz     short loc_3EC3
.text:0000000000003E92                 mov     rax, [rbp+var_178]
.text:0000000000003E99                 mov     byte ptr [rax], 0
.text:0000000000003E9C
.text:0000000000003E9C loc_3E9C:                               ; CODE XREF: make_dir_parents_private+110↑j
.text:0000000000003E9C                 mov     eax, 1
.text:0000000000003EA1
.text:0000000000003EA1 loc_3EA1:                               ; CODE XREF: make_dir_parents_private+415↑j
.text:0000000000003EA1                                         ; make_dir_parents_private+467↑j ...
.text:0000000000003EA1                 mov     rcx, [rbp+var_38]
.text:0000000000003EA5                 xor     rcx, fs:28h
.text:0000000000003EAE                 jnz     loc_3FBB
.text:0000000000003EB4                 lea     rsp, [rbp-28h]
.text:0000000000003EB8                 pop     rbx
.text:0000000000003EB9                 pop     r12
.text:0000000000003EBB                 pop     r13
.text:0000000000003EBD                 pop     r14
.text:0000000000003EBF                 pop     r15
.text:0000000000003EC1                 pop     rbp
.text:0000000000003EC2                 retn
.text:0000000000003EC3 ; ---------------------------------------------------------------------------
.text:0000000000003EC3
.text:0000000000003EC3 loc_3EC3:                               ; CODE XREF: make_dir_parents_private+490↑j
.text:0000000000003EC3                 mov     rsi, rbx
.text:0000000000003EC6
.text:0000000000003EC6 loc_3EC6:                               ; CODE XREF: make_dir_parents_private+57A↓j
.text:0000000000003EC6                 mov     edi, 4
.text:0000000000003ECB                 call    quotearg_style
.text:0000000000003ED0                 lea     rsi, aSExistsButIsNo ; "%s exists but is not a directory"
.text:0000000000003ED7                 mov     rbx, rax
.text:0000000000003EDA                 mov     edx, 5          ; category
.text:0000000000003EDF                 xor     edi, edi        ; domainname
.text:0000000000003EE1                 call    _dcgettext
.text:0000000000003EE6                 mov     rcx, rbx
.text:0000000000003EE9                 mov     rdx, rax        ; format
.text:0000000000003EEC                 xor     esi, esi        ; errnum
.text:0000000000003EEE                 xor     eax, eax
.text:0000000000003EF0                 xor     edi, edi        ; status
.text:0000000000003EF2                 call    _error
.text:0000000000003EF7                 xor     eax, eax
.text:0000000000003EF9                 jmp     short loc_3EA1
.text:0000000000003EF9 ; ---------------------------------------------------------------------------
.text:0000000000003EFB                 align 20h
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: make_dir_parents_private+351↑j
.text:0000000000003F00                 call    cached_umask
.text:0000000000003F05                 mov     esi, [rbp+stat_buf.st_mode]
.text:0000000000003F0B                 not     eax
.text:0000000000003F0D                 and     r14d, eax
.text:0000000000003F10                 mov     edx, esi
.text:0000000000003F12                 mov     eax, esi
.text:0000000000003F14                 not     edx
.text:0000000000003F16                 test    edx, r14d
.text:0000000000003F19                 jnz     loc_3D67
.text:0000000000003F1F                 jmp     loc_3D57
.text:0000000000003F1F ; ---------------------------------------------------------------------------
.text:0000000000003F24                 align 8
.text:0000000000003F28
.text:0000000000003F28 loc_3F28:                               ; CODE XREF: make_dir_parents_private+DD↑j
.text:0000000000003F28                 mov     rdi, [rbp+filename]
.text:0000000000003F2F                 jmp     loc_3AF1
.text:0000000000003F34 ; ---------------------------------------------------------------------------
.text:0000000000003F34
.text:0000000000003F34 loc_3F34:                               ; CODE XREF: make_dir_parents_private+2F6↑j
.text:0000000000003F34                 mov     rsi, r12
.text:0000000000003F37                 mov     edi, 4
.text:0000000000003F3C                 call    quotearg_style
.text:0000000000003F41                 lea     rsi, aCannotMakeDire ; "cannot make directory %s"
.text:0000000000003F48                 mov     r12, rax
.text:0000000000003F4B                 mov     edx, 5          ; category
.text:0000000000003F50
.text:0000000000003F50 loc_3F50:                               ; CODE XREF: make_dir_parents_private+59B↓j
.text:0000000000003F50                                         ; make_dir_parents_private+5B9↓j
.text:0000000000003F50                 xor     edi, edi        ; domainname
.text:0000000000003F52                 call    _dcgettext
.text:0000000000003F57                 mov     rbx, rax
.text:0000000000003F5A                 call    ___errno_location
.text:0000000000003F5F                 mov     esi, [rax]      ; errnum
.text:0000000000003F61                 mov     rcx, r12
.text:0000000000003F64                 xor     eax, eax
.text:0000000000003F66                 mov     rdx, rbx        ; format
.text:0000000000003F69                 xor     edi, edi        ; status
.text:0000000000003F6B                 call    _error
.text:0000000000003F70                 xor     eax, eax
.text:0000000000003F72                 jmp     loc_3EA1
.text:0000000000003F77 ; ---------------------------------------------------------------------------
.text:0000000000003F77
.text:0000000000003F77 loc_3F77:                               ; CODE XREF: make_dir_parents_private+170↑j
.text:0000000000003F77                 mov     rsi, r12
.text:0000000000003F7A                 jmp     loc_3EC6
.text:0000000000003F7F ; ---------------------------------------------------------------------------
.text:0000000000003F7F
.text:0000000000003F7F loc_3F7F:                               ; CODE XREF: make_dir_parents_private+337↑j
.text:0000000000003F7F                 mov     rsi, r12
.text:0000000000003F82                 mov     edi, 4
.text:0000000000003F87                 call    quotearg_style
.text:0000000000003F8C                 mov     edx, 5
.text:0000000000003F91                 mov     r12, rax
.text:0000000000003F94                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:0000000000003F9B                 jmp     short loc_3F50
.text:0000000000003F9D ; ---------------------------------------------------------------------------
.text:0000000000003F9D
.text:0000000000003F9D loc_3F9D:                               ; CODE XREF: make_dir_parents_private+394↑j
.text:0000000000003F9D                 mov     rsi, r12
.text:0000000000003FA0                 mov     edi, 4
.text:0000000000003FA5                 call    quotearg_style
.text:0000000000003FAA                 mov     edx, 5
.text:0000000000003FAF                 mov     r12, rax
.text:0000000000003FB2                 lea     rsi, aSettingPermiss ; "setting permissions for %s"
.text:0000000000003FB9                 jmp     short loc_3F50
.text:0000000000003FBB ; ---------------------------------------------------------------------------
.text:0000000000003FBB
.text:0000000000003FBB loc_3FBB:                               ; CODE XREF: make_dir_parents_private+4AE↑j
.text:0000000000003FBB                 call    ___stack_chk_fail
.text:0000000000003FBB ; } // starts at 3A00
.text:0000000000003FBB make_dir_parents_private endp
.text:0000000000003FBB
.text:0000000000003FC0
.text:0000000000003FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FC0
.text:0000000000003FC0 ; Attributes: bp-based frame
.text:0000000000003FC0
.text:0000000000003FC0 ; __int64 __fastcall re_protect(void *src)
.text:0000000000003FC0 re_protect      proc near               ; CODE XREF: do_copy+33D↓p
.text:0000000000003FC0
.text:0000000000003FC0 var_61          = byte ptr -61h
.text:0000000000003FC0 var_60          = qword ptr -60h
.text:0000000000003FC0 var_58          = qword ptr -58h
.text:0000000000003FC0 var_50          = qword ptr -50h
.text:0000000000003FC0 var_48          = qword ptr -48h
.text:0000000000003FC0 var_38          = qword ptr -38h
.text:0000000000003FC0
.text:0000000000003FC0 ; __unwind {
.text:0000000000003FC0                 push    rbp
.text:0000000000003FC1                 mov     rbp, rsp
.text:0000000000003FC4                 push    r15
.text:0000000000003FC6                 push    r14
.text:0000000000003FC8                 push    r13
.text:0000000000003FCA                 push    r12
.text:0000000000003FCC                 mov     r14, rsi
.text:0000000000003FCF                 push    rbx
.text:0000000000003FD0                 mov     r12, rdi
.text:0000000000003FD3                 mov     rbx, rdx
.text:0000000000003FD6                 mov     r13, rcx
.text:0000000000003FD9                 sub     rsp, 48h
.text:0000000000003FDD                 mov     rax, fs:28h
.text:0000000000003FE6                 mov     [rbp+var_38], rax
.text:0000000000003FEA                 xor     eax, eax
.text:0000000000003FEC                 call    _strlen
.text:0000000000003FF1                 lea     rdx, [rax+1]    ; n
.text:0000000000003FF5                 add     rax, 1Fh
.text:0000000000003FF9                 mov     rsi, r12        ; src
.text:0000000000003FFC                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000004000                 sub     rsp, rax
.text:0000000000004003                 lea     rdi, [rsp+70h+var_61]
.text:0000000000004008                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:000000000000400C                 call    _memcpy
.text:0000000000004011                 mov     r12, rax
.text:0000000000004014                 add     rax, r14
.text:0000000000004017                 test    rbx, rbx
.text:000000000000401A                 mov     [rbp-68h], rax
.text:000000000000401E                 jz      loc_41D0
.text:0000000000004024                 lea     r15, [rbp+var_60]
.text:0000000000004028                 jmp     short loc_4072
.text:0000000000004028 ; ---------------------------------------------------------------------------
.text:000000000000402A                 align 10h
.text:0000000000004030
.text:0000000000004030 loc_4030:                               ; CODE XREF: re_protect+C3↓j
.text:0000000000004030                                         ; re_protect+F2↓j
.text:0000000000004030                 cmp     byte ptr [r13+1Dh], 0
.text:0000000000004035                 jnz     loc_4100
.text:000000000000403B
.text:000000000000403B loc_403B:                               ; CODE XREF: re_protect+150↓j
.text:000000000000403B                 movzx   r14d, byte ptr [r13+1Eh]
.text:0000000000004040                 test    r14b, r14b
.text:0000000000004043                 jnz     loc_4150
.text:0000000000004049
.text:0000000000004049 loc_4049:                               ; CODE XREF: re_protect+181↓j
.text:0000000000004049                 cmp     byte ptr [rbx+90h], 0
.text:0000000000004050                 jnz     loc_4178
.text:0000000000004056
.text:0000000000004056 loc_4056:                               ; CODE XREF: re_protect+1A9↓j
.text:0000000000004056                                         ; re_protect+1C5↓j
.text:0000000000004056                 mov     rax, [rbx+98h]
.text:000000000000405D                 mov     byte ptr [r12+rax], 2Fh ; '/'
.text:0000000000004062                 mov     rbx, [rbx+0A0h]
.text:0000000000004069                 test    rbx, rbx
.text:000000000000406C                 jz      loc_41D0
.text:0000000000004072
.text:0000000000004072 loc_4072:                               ; CODE XREF: re_protect+68↑j
.text:0000000000004072                 cmp     byte ptr [r13+1Fh], 0
.text:0000000000004077                 mov     rax, [rbx+98h]
.text:000000000000407E                 mov     byte ptr [r12+rax], 0
.text:0000000000004083                 jz      short loc_4030
.text:0000000000004085                 mov     rax, [rbx+50h]
.text:0000000000004089                 mov     rdx, [rbx+48h]
.text:000000000000408D                 mov     rsi, r15
.text:0000000000004090                 mov     rdi, r12        ; path
.text:0000000000004093                 mov     [rbp+var_60], rdx
.text:0000000000004097                 mov     [rbp+var_58], rax
.text:000000000000409B                 mov     rdx, [rbx+58h]
.text:000000000000409F                 mov     rax, [rbx+60h]
.text:00000000000040A3                 mov     [rbp+var_50], rdx
.text:00000000000040A7                 mov     [rbp+var_48], rax
.text:00000000000040AB                 call    utimens
.text:00000000000040B0                 test    eax, eax
.text:00000000000040B2                 jz      loc_4030
.text:00000000000040B8                 mov     rsi, r12
.text:00000000000040BB                 mov     edi, 4
.text:00000000000040C0                 xor     r14d, r14d
.text:00000000000040C3                 call    quotearg_style
.text:00000000000040C8                 lea     rsi, aFailedToPreser ; "failed to preserve times for %s"
.text:00000000000040CF                 mov     edx, 5          ; category
.text:00000000000040D4                 xor     edi, edi        ; domainname
.text:00000000000040D6                 mov     r12, rax
.text:00000000000040D9                 call    _dcgettext
.text:00000000000040DE                 mov     rbx, rax
.text:00000000000040E1                 call    ___errno_location
.text:00000000000040E6                 mov     esi, [rax]      ; errnum
.text:00000000000040E8                 mov     rcx, r12
.text:00000000000040EB                 mov     rdx, rbx        ; format
.text:00000000000040EE                 xor     edi, edi        ; status
.text:00000000000040F0                 xor     eax, eax
.text:00000000000040F2                 call    _error
.text:00000000000040F7                 jmp     loc_41D6
.text:00000000000040F7 ; ---------------------------------------------------------------------------
.text:00000000000040FC                 align 20h
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: re_protect+75↑j
.text:0000000000004100                 mov     edx, [rbx+20h]  ; group
.text:0000000000004103                 mov     esi, [rbx+1Ch]  ; owner
.text:0000000000004106                 mov     rdi, r12        ; file
.text:0000000000004109                 call    _lchown
.text:000000000000410E                 test    eax, eax
.text:0000000000004110                 jz      loc_403B
.text:0000000000004116                 mov     rdi, r13
.text:0000000000004119                 call    chown_failure_ok
.text:000000000000411E                 test    al, al
.text:0000000000004120                 mov     r14d, eax
.text:0000000000004123                 jz      loc_41F7
.text:0000000000004129                 mov     edx, [rbx+20h]  ; group
.text:000000000000412C                 mov     esi, 0FFFFFFFFh ; owner
.text:0000000000004131                 mov     rdi, r12        ; file
.text:0000000000004134                 call    _lchown
.text:0000000000004139                 movzx   r14d, byte ptr [r13+1Eh]
.text:000000000000413E                 test    r14b, r14b
.text:0000000000004141                 jz      loc_4049
.text:0000000000004147                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004150
.text:0000000000004150 loc_4150:                               ; CODE XREF: re_protect+83↑j
.text:0000000000004150                 mov     r8d, [rbx+18h]
.text:0000000000004154                 mov     rdi, [rbp-68h]
.text:0000000000004158                 mov     ecx, 0FFFFFFFFh
.text:000000000000415D                 mov     rdx, r12
.text:0000000000004160                 mov     esi, ecx
.text:0000000000004162                 call    copy_acl
.text:0000000000004167                 test    eax, eax
.text:0000000000004169                 jz      loc_4056
.text:000000000000416F                 xor     r14d, r14d
.text:0000000000004172                 jmp     short loc_41D6
.text:0000000000004172 ; ---------------------------------------------------------------------------
.text:0000000000004174                 align 8
.text:0000000000004178
.text:0000000000004178 loc_4178:                               ; CODE XREF: re_protect+90↑j
.text:0000000000004178                 mov     esi, [rbx+18h]  ; mode
.text:000000000000417B                 mov     rdi, r12        ; file
.text:000000000000417E                 call    _chmod
.text:0000000000004183                 test    eax, eax
.text:0000000000004185                 jz      loc_4056
.text:000000000000418B                 mov     rsi, r12
.text:000000000000418E                 mov     edi, 4
.text:0000000000004193                 call    quotearg_style
.text:0000000000004198                 lea     rsi, aFailedToPreser_0 ; "failed to preserve permissions for %s"
.text:000000000000419F                 mov     r12, rax
.text:00000000000041A2                 mov     edx, 5          ; category
.text:00000000000041A7
.text:00000000000041A7 loc_41A7:                               ; CODE XREF: re_protect+253↓j
.text:00000000000041A7                 xor     edi, edi        ; domainname
.text:00000000000041A9                 call    _dcgettext
.text:00000000000041AE                 mov     rbx, rax
.text:00000000000041B1                 call    ___errno_location
.text:00000000000041B6                 mov     esi, [rax]      ; errnum
.text:00000000000041B8                 mov     rcx, r12
.text:00000000000041BB                 mov     rdx, rbx        ; format
.text:00000000000041BE                 xor     edi, edi        ; status
.text:00000000000041C0                 xor     eax, eax
.text:00000000000041C2                 call    _error
.text:00000000000041C7                 jmp     short loc_41D6
.text:00000000000041C7 ; ---------------------------------------------------------------------------
.text:00000000000041C9                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: re_protect+5E↑j
.text:00000000000041D0                                         ; re_protect+AC↑j
.text:00000000000041D0                 mov     r14d, 1
.text:00000000000041D6
.text:00000000000041D6 loc_41D6:                               ; CODE XREF: re_protect+137↑j
.text:00000000000041D6                                         ; re_protect+1B2↑j ...
.text:00000000000041D6                 mov     rcx, [rbp+var_38]
.text:00000000000041DA                 xor     rcx, fs:28h
.text:00000000000041E3                 mov     eax, r14d
.text:00000000000041E6                 jnz     short loc_4215
.text:00000000000041E8                 lea     rsp, [rbp-28h]
.text:00000000000041EC                 pop     rbx
.text:00000000000041ED                 pop     r12
.text:00000000000041EF                 pop     r13
.text:00000000000041F1                 pop     r14
.text:00000000000041F3                 pop     r15
.text:00000000000041F5                 pop     rbp
.text:00000000000041F6                 retn
.text:00000000000041F7 ; ---------------------------------------------------------------------------
.text:00000000000041F7
.text:00000000000041F7 loc_41F7:                               ; CODE XREF: re_protect+163↑j
.text:00000000000041F7                 mov     rsi, r12
.text:00000000000041FA                 mov     edi, 4
.text:00000000000041FF                 call    quotearg_style
.text:0000000000004204                 mov     edx, 5
.text:0000000000004209                 mov     r12, rax
.text:000000000000420C                 lea     rsi, aFailedToPreser_1 ; "failed to preserve ownership for %s"
.text:0000000000004213                 jmp     short loc_41A7
.text:0000000000004215 ; ---------------------------------------------------------------------------
.text:0000000000004215
.text:0000000000004215 loc_4215:                               ; CODE XREF: re_protect+226↑j
.text:0000000000004215                 call    ___stack_chk_fail
.text:0000000000004215 ; } // starts at 3FC0
.text:0000000000004215 re_protect      endp
.text:0000000000004215
.text:0000000000004215 ; ---------------------------------------------------------------------------
.text:000000000000421A                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: noreturn
.text:0000000000004220
.text:0000000000004220 ; void __fastcall __noreturn usage(int status)
.text:0000000000004220                 public usage
.text:0000000000004220 usage           proc near               ; CODE XREF: main+756↑p
.text:0000000000004220                                         ; main+781↑p ...
.text:0000000000004220
.text:0000000000004220 var_A8          = qword ptr -0A8h
.text:0000000000004220 var_A0          = qword ptr -0A0h
.text:0000000000004220 var_98          = qword ptr -98h
.text:0000000000004220 var_90          = qword ptr -90h
.text:0000000000004220 var_88          = qword ptr -88h
.text:0000000000004220 var_80          = qword ptr -80h
.text:0000000000004220 var_78          = qword ptr -78h
.text:0000000000004220 var_70          = qword ptr -70h
.text:0000000000004220 var_68          = qword ptr -68h
.text:0000000000004220 var_60          = qword ptr -60h
.text:0000000000004220 var_58          = qword ptr -58h
.text:0000000000004220 var_50          = qword ptr -50h
.text:0000000000004220 var_48          = qword ptr -48h
.text:0000000000004220 var_40          = qword ptr -40h
.text:0000000000004220 var_30          = qword ptr -30h
.text:0000000000004220
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 push    r13
.text:0000000000004222                 push    r12
.text:0000000000004224                 mov     edx, 5          ; category
.text:0000000000004229                 push    rbp
.text:000000000000422A                 push    rbx
.text:000000000000422B                 mov     ebp, edi
.text:000000000000422D                 sub     rsp, 88h
.text:0000000000004234                 mov     rbx, cs:program_name
.text:000000000000423B                 mov     rax, fs:28h
.text:0000000000004244                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004249                 xor     eax, eax
.text:000000000000424B                 test    edi, edi
.text:000000000000424D                 jz      short loc_427D
.text:000000000000424F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004256                 xor     edi, edi        ; domainname
.text:0000000000004258                 call    _dcgettext
.text:000000000000425D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004264                 mov     rdx, rax
.text:0000000000004267                 mov     rcx, rbx
.text:000000000000426A                 mov     esi, 1
.text:000000000000426F                 xor     eax, eax
.text:0000000000004271                 call    ___fprintf_chk
.text:0000000000004276
.text:0000000000004276 loc_4276:                               ; CODE XREF: usage+4F6↓j
.text:0000000000004276                 mov     edi, ebp        ; status
.text:0000000000004278                 call    _exit
.text:000000000000427D ; ---------------------------------------------------------------------------
.text:000000000000427D
.text:000000000000427D loc_427D:                               ; CODE XREF: usage+2D↑j
.text:000000000000427D                 lea     rsi, aUsageSOptionTS ; "Usage: %s [OPTION]... [-T] SOURCE DEST"...
.text:0000000000004284                 xor     edi, edi        ; domainname
.text:0000000000004286                 call    _dcgettext
.text:000000000000428B                 mov     r8, rbx
.text:000000000000428E                 mov     rcx, rbx
.text:0000000000004291                 mov     rdx, rbx
.text:0000000000004294                 mov     rsi, rax
.text:0000000000004297                 mov     edi, 1
.text:000000000000429C                 xor     eax, eax
.text:000000000000429E                 call    ___printf_chk
.text:00000000000042A3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042AA                 lea     rsi, aCopySourceToDe ; "Copy SOURCE to DEST, or multiple SOURCE"...
.text:00000000000042B1                 mov     edx, 5          ; category
.text:00000000000042B6                 xor     edi, edi        ; domainname
.text:00000000000042B8                 call    _dcgettext
.text:00000000000042BD                 mov     rsi, rbx        ; stream
.text:00000000000042C0                 mov     rdi, rax        ; s
.text:00000000000042C3                 call    _fputs_unlocked
.text:00000000000042C8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042CF                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000042D6                 mov     edx, 5          ; category
.text:00000000000042DB                 xor     edi, edi        ; domainname
.text:00000000000042DD                 call    _dcgettext
.text:00000000000042E2                 mov     rsi, rbx        ; stream
.text:00000000000042E5                 mov     rdi, rax        ; s
.text:00000000000042E8                 call    _fputs_unlocked
.text:00000000000042ED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042F4                 lea     rsi, aAArchiveSameAs ; "  -a, --archive                same as "...
.text:00000000000042FB                 mov     edx, 5          ; category
.text:0000000000004300                 xor     edi, edi        ; domainname
.text:0000000000004302                 call    _dcgettext
.text:0000000000004307                 mov     rsi, rbx        ; stream
.text:000000000000430A                 mov     rdi, rax        ; s
.text:000000000000430D                 call    _fputs_unlocked
.text:0000000000004312                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004319                 lea     rsi, aFForceIfAnExis ; "  -f, --force                  if an ex"...
.text:0000000000004320                 mov     edx, 5          ; category
.text:0000000000004325                 xor     edi, edi        ; domainname
.text:0000000000004327                 call    _dcgettext
.text:000000000000432C                 mov     rsi, rbx        ; stream
.text:000000000000432F                 mov     rdi, rax        ; s
.text:0000000000004332                 call    _fputs_unlocked
.text:0000000000004337                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000433E                 lea     rsi, aLLinkHardLinkF ; "  -l, --link                   hard lin"...
.text:0000000000004345                 mov     edx, 5          ; category
.text:000000000000434A                 xor     edi, edi        ; domainname
.text:000000000000434C                 call    _dcgettext
.text:0000000000004351                 mov     rsi, rbx        ; stream
.text:0000000000004354                 mov     rdi, rax        ; s
.text:0000000000004357                 call    _fputs_unlocked
.text:000000000000435C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004363                 lea     rsi, aNNoClobberDoNo ; "  -n, --no-clobber             do not o"...
.text:000000000000436A                 mov     edx, 5          ; category
.text:000000000000436F                 xor     edi, edi        ; domainname
.text:0000000000004371                 call    _dcgettext
.text:0000000000004376                 mov     rsi, rbx        ; stream
.text:0000000000004379                 mov     rdi, rax        ; s
.text:000000000000437C                 call    _fputs_unlocked
.text:0000000000004381                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004388                 lea     rsi, aPSameAsPreserv ; "  -p                           same as "...
.text:000000000000438F                 mov     edx, 5          ; category
.text:0000000000004394                 xor     edi, edi        ; domainname
.text:0000000000004396                 call    _dcgettext
.text:000000000000439B                 mov     rsi, rbx        ; stream
.text:000000000000439E                 mov     rdi, rax        ; s
.text:00000000000043A1                 call    _fputs_unlocked
.text:00000000000043A6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043AD                 lea     rsi, aNoPreserveAttr ; "      --no-preserve=ATTR_LIST  don't pr"...
.text:00000000000043B4                 mov     edx, 5          ; category
.text:00000000000043B9                 xor     edi, edi        ; domainname
.text:00000000000043BB                 call    _dcgettext
.text:00000000000043C0                 mov     rsi, rbx        ; stream
.text:00000000000043C3                 mov     rdi, rax        ; s
.text:00000000000043C6                 call    _fputs_unlocked
.text:00000000000043CB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043D2                 lea     rsi, aRRRecursiveCop ; "  -R, -r, --recursive          copy dir"...
.text:00000000000043D9                 mov     edx, 5          ; category
.text:00000000000043DE                 xor     edi, edi        ; domainname
.text:00000000000043E0                 call    _dcgettext
.text:00000000000043E5                 mov     rsi, rbx        ; stream
.text:00000000000043E8                 mov     rdi, rax        ; s
.text:00000000000043EB                 call    _fputs_unlocked
.text:00000000000043F0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043F7                 lea     rsi, aSparseWhenCont ; "      --sparse=WHEN            control "...
.text:00000000000043FE                 mov     edx, 5          ; category
.text:0000000000004403                 xor     edi, edi        ; domainname
.text:0000000000004405                 call    _dcgettext
.text:000000000000440A                 mov     rsi, rbx        ; stream
.text:000000000000440D                 mov     rdi, rax        ; s
.text:0000000000004410                 call    _fputs_unlocked
.text:0000000000004415                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000441C                 lea     rsi, aSSymbolicLinkM ; "  -s, --symbolic-link          make sym"...
.text:0000000000004423                 mov     edx, 5          ; category
.text:0000000000004428                 xor     edi, edi        ; domainname
.text:000000000000442A                 call    _dcgettext
.text:000000000000442F                 mov     rsi, rbx        ; stream
.text:0000000000004432                 mov     rdi, rax        ; s
.text:0000000000004435                 call    _fputs_unlocked
.text:000000000000443A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004441                 lea     rsi, aUUpdateCopyOnl ; "  -u, --update                 copy onl"...
.text:0000000000004448                 mov     edx, 5          ; category
.text:000000000000444D                 xor     edi, edi        ; domainname
.text:000000000000444F                 call    _dcgettext
.text:0000000000004454                 mov     rsi, rbx        ; stream
.text:0000000000004457                 mov     rdi, rax        ; s
.text:000000000000445A                 call    _fputs_unlocked
.text:000000000000445F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004466                 lea     rsi, aZSetSelinuxSec ; "  -Z                           set SELi"...
.text:000000000000446D                 mov     edx, 5          ; category
.text:0000000000004472                 xor     edi, edi        ; domainname
.text:0000000000004474                 call    _dcgettext
.text:0000000000004479                 mov     rsi, rbx        ; stream
.text:000000000000447C                 mov     rdi, rax        ; s
.text:000000000000447F                 call    _fputs_unlocked
.text:0000000000004484                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000448B                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000004492                 mov     edx, 5          ; category
.text:0000000000004497                 xor     edi, edi        ; domainname
.text:0000000000004499                 call    _dcgettext
.text:000000000000449E                 mov     rsi, rbx        ; stream
.text:00000000000044A1                 mov     rdi, rax        ; s
.text:00000000000044A4                 call    _fputs_unlocked
.text:00000000000044A9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044B0                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000044B7                 mov     edx, 5          ; category
.text:00000000000044BC                 xor     edi, edi        ; domainname
.text:00000000000044BE                 call    _dcgettext
.text:00000000000044C3                 mov     rsi, rbx        ; stream
.text:00000000000044C6                 mov     rdi, rax        ; s
.text:00000000000044C9                 call    _fputs_unlocked
.text:00000000000044CE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044D5                 lea     rsi, aByDefaultSpars ; "\nBy default, sparse SOURCE files are d"...
.text:00000000000044DC                 mov     edx, 5          ; category
.text:00000000000044E1                 xor     edi, edi        ; domainname
.text:00000000000044E3                 call    _dcgettext
.text:00000000000044E8                 mov     rsi, rbx        ; stream
.text:00000000000044EB                 mov     rdi, rax        ; s
.text:00000000000044EE                 call    _fputs_unlocked
.text:00000000000044F3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044FA                 lea     rsi, aWhenReflinkAlw ; "\nWhen --reflink[=always] is specified,"...
.text:0000000000004501                 mov     edx, 5          ; category
.text:0000000000004506                 xor     edi, edi        ; domainname
.text:0000000000004508                 call    _dcgettext
.text:000000000000450D                 mov     rsi, rbx        ; stream
.text:0000000000004510                 mov     rdi, rax        ; s
.text:0000000000004513                 call    _fputs_unlocked
.text:0000000000004518                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000451F                 lea     rsi, aTheBackupSuffi ; "\nThe backup suffix is '~', unless set "...
.text:0000000000004526                 mov     edx, 5          ; category
.text:000000000000452B                 xor     edi, edi        ; domainname
.text:000000000000452D                 call    _dcgettext
.text:0000000000004532                 mov     rsi, rbx        ; stream
.text:0000000000004535                 mov     rdi, rax        ; s
.text:0000000000004538                 call    _fputs_unlocked
.text:000000000000453D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004544                 lea     rsi, aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:000000000000454B                 mov     edx, 5          ; category
.text:0000000000004550                 xor     edi, edi        ; domainname
.text:0000000000004552                 call    _dcgettext
.text:0000000000004557                 mov     rsi, rbx        ; stream
.text:000000000000455A                 mov     rdi, rax        ; s
.text:000000000000455D                 call    _fputs_unlocked
.text:0000000000004562                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004569                 lea     rsi, aAsASpecialCase ; "\nAs a special case, cp makes a backup "...
.text:0000000000004570                 mov     edx, 5          ; category
.text:0000000000004575                 xor     edi, edi        ; domainname
.text:0000000000004577                 call    _dcgettext
.text:000000000000457C                 mov     rsi, rbx        ; stream
.text:000000000000457F                 mov     rdi, rax        ; s
.text:0000000000004582                 lea     rbx, aCp        ; "cp"
.text:0000000000004589                 call    _fputs_unlocked
.text:000000000000458E                 lea     rax, asc_12948  ; "["
.text:0000000000004595                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000459C                 mov     [rsp+0A8h+var_48], 0
.text:00000000000045A5                 mov     [rsp+0A8h+var_40], 0
.text:00000000000045AE                 mov     rdx, rsp
.text:00000000000045B1                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000045B5                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000045BC                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000045C1                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000045C8                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000045CD                 lea     rax, domainname ; "coreutils"
.text:00000000000045D4                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000045D9                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000045E0                 mov     [rsp+0A8h+var_98], rax
.text:00000000000045E5                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000045EC                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000045F1                 mov     [rsp+0A8h+var_90], rax
.text:00000000000045F6                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000045FD                 mov     [rsp+0A8h+var_88], rax
.text:0000000000004602                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000004609                 mov     [rsp+0A8h+var_80], rax
.text:000000000000460E                 mov     [rsp+0A8h+var_70], rax
.text:0000000000004613                 mov     [rsp+0A8h+var_60], rax
.text:0000000000004618                 mov     [rsp+0A8h+var_50], rax
.text:000000000000461D                 nop     dword ptr [rax]
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: usage+41D↓j
.text:0000000000004620                 add     rdx, 10h
.text:0000000000004624                 mov     rdi, [rdx]
.text:0000000000004627                 test    rdi, rdi
.text:000000000000462A                 jz      short loc_463F
.text:000000000000462C                 mov     ecx, 3
.text:0000000000004631                 mov     rsi, rbx
.text:0000000000004634                 repe cmpsb
.text:0000000000004636                 setnbe  al
.text:0000000000004639                 sbb     al, 0
.text:000000000000463B                 test    al, al
.text:000000000000463D                 jnz     short loc_4620
.text:000000000000463F
.text:000000000000463F loc_463F:                               ; CODE XREF: usage+40A↑j
.text:000000000000463F                 mov     r12, [rdx+8]
.text:0000000000004643                 xor     edi, edi        ; domainname
.text:0000000000004645                 mov     edx, 5          ; category
.text:000000000000464A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000004651                 test    r12, r12
.text:0000000000004654                 jz      loc_471B
.text:000000000000465A                 call    _dcgettext
.text:000000000000465F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004666                 lea     rdx, unk_129BE
.text:000000000000466D                 mov     rsi, rax
.text:0000000000004670                 mov     edi, 1
.text:0000000000004675                 xor     eax, eax
.text:0000000000004677                 call    ___printf_chk
.text:000000000000467C                 xor     esi, esi        ; locale
.text:000000000000467E                 mov     edi, 5          ; category
.text:0000000000004683                 call    _setlocale
.text:0000000000004688                 test    rax, rax
.text:000000000000468B                 jz      short loc_46A9
.text:000000000000468D                 lea     rsi, s2         ; "en_"
.text:0000000000004694                 mov     edx, 3          ; n
.text:0000000000004699                 mov     rdi, rax        ; s1
.text:000000000000469C                 call    _strncmp
.text:00000000000046A1                 test    eax, eax
.text:00000000000046A3                 jnz     loc_47B0
.text:00000000000046A9
.text:00000000000046A9 loc_46A9:                               ; CODE XREF: usage+46B↑j
.text:00000000000046A9                                         ; usage+5B5↓j
.text:00000000000046A9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000046B0                 xor     edi, edi        ; domainname
.text:00000000000046B2                 mov     edx, 5          ; category
.text:00000000000046B7                 call    _dcgettext
.text:00000000000046BC                 lea     rcx, aCp        ; "cp"
.text:00000000000046C3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000046CA                 mov     rsi, rax
.text:00000000000046CD                 mov     edi, 1
.text:00000000000046D2                 xor     eax, eax
.text:00000000000046D4                 call    ___printf_chk
.text:00000000000046D9                 cmp     r12, rbx
.text:00000000000046DC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000046E3                 lea     rbx, aSSUnbackup+14h ; ""
.text:00000000000046EA                 cmovz   rbx, rcx
.text:00000000000046EE
.text:00000000000046EE loc_46EE:                               ; CODE XREF: usage+584↓j
.text:00000000000046EE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000046F5                 xor     edi, edi        ; domainname
.text:00000000000046F7                 mov     edx, 5          ; category
.text:00000000000046FC                 call    _dcgettext
.text:0000000000004701                 mov     rcx, rbx
.text:0000000000004704                 mov     rsi, rax
.text:0000000000004707                 mov     rdx, r12
.text:000000000000470A                 mov     edi, 1
.text:000000000000470F                 xor     eax, eax
.text:0000000000004711                 call    ___printf_chk
.text:0000000000004716                 jmp     loc_4276
.text:000000000000471B ; ---------------------------------------------------------------------------
.text:000000000000471B
.text:000000000000471B loc_471B:                               ; CODE XREF: usage+434↑j
.text:000000000000471B                 call    _dcgettext
.text:0000000000004720                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004727                 lea     rdx, unk_129BE
.text:000000000000472E                 mov     rsi, rax
.text:0000000000004731                 mov     edi, 1
.text:0000000000004736                 xor     eax, eax
.text:0000000000004738                 call    ___printf_chk
.text:000000000000473D                 xor     esi, esi        ; locale
.text:000000000000473F                 mov     edi, 5          ; category
.text:0000000000004744                 call    _setlocale
.text:0000000000004749                 test    rax, rax
.text:000000000000474C                 jz      short loc_4766
.text:000000000000474E                 lea     rsi, s2         ; "en_"
.text:0000000000004755                 mov     edx, 3          ; n
.text:000000000000475A                 mov     rdi, rax        ; s1
.text:000000000000475D                 call    _strncmp
.text:0000000000004762                 test    eax, eax
.text:0000000000004764                 jnz     short loc_47A9
.text:0000000000004766
.text:0000000000004766 loc_4766:                               ; CODE XREF: usage+52C↑j
.text:0000000000004766                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000476D                 mov     edx, 5          ; category
.text:0000000000004772                 xor     edi, edi        ; domainname
.text:0000000000004774                 lea     r12, aCp        ; "cp"
.text:000000000000477B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004782                 call    _dcgettext
.text:0000000000004787                 lea     rcx, aCp        ; "cp"
.text:000000000000478E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004795                 mov     rsi, rax
.text:0000000000004798                 mov     edi, 1
.text:000000000000479D                 xor     eax, eax
.text:000000000000479F                 call    ___printf_chk
.text:00000000000047A4                 jmp     loc_46EE
.text:00000000000047A9 ; ---------------------------------------------------------------------------
.text:00000000000047A9
.text:00000000000047A9 loc_47A9:                               ; CODE XREF: usage+544↑j
.text:00000000000047A9                 lea     r12, aCp        ; "cp"
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: usage+483↑j
.text:00000000000047B0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000047B7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000047BE                 xor     edi, edi        ; domainname
.text:00000000000047C0                 mov     edx, 5          ; category
.text:00000000000047C5                 call    _dcgettext
.text:00000000000047CA                 mov     rsi, r13        ; stream
.text:00000000000047CD                 mov     rdi, rax        ; s
.text:00000000000047D0                 call    _fputs_unlocked
.text:00000000000047D5                 jmp     loc_46A9
.text:00000000000047D5 ; } // starts at 4220
.text:00000000000047D5 usage           endp
.text:00000000000047D5
.text:00000000000047D5 ; ---------------------------------------------------------------------------
.text:00000000000047DA                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0 ; Attributes: bp-based frame
.text:00000000000047E0
.text:00000000000047E0 do_copy         proc near               ; CODE XREF: main+5FE↑p
.text:00000000000047E0
.text:00000000000047E0 var_110         = qword ptr -110h
.text:00000000000047E0 var_108         = qword ptr -108h
.text:00000000000047E0 var_100         = qword ptr -100h
.text:00000000000047E0 src             = qword ptr -0F8h
.text:00000000000047E0 var_E2          = byte ptr -0E2h
.text:00000000000047E0 var_E1          = byte ptr -0E1h
.text:00000000000047E0 ptr             = qword ptr -0E0h
.text:00000000000047E0 var_D8          = qword ptr -0D8h
.text:00000000000047E0 stat_buf        = stat ptr -0D0h
.text:00000000000047E0 var_38          = qword ptr -38h
.text:00000000000047E0
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 push    rbp
.text:00000000000047E1                 mov     rbp, rsp
.text:00000000000047E4                 push    r15
.text:00000000000047E6                 push    r14
.text:00000000000047E8                 push    r13
.text:00000000000047EA                 push    r12
.text:00000000000047EC                 movsxd  r12, edi
.text:00000000000047EF                 push    rbx
.text:00000000000047F0                 mov     rbx, rsi
.text:00000000000047F3                 sub     rsp, 0E8h
.text:00000000000047FA                 mov     [rbp+src], rdx
.text:0000000000004801                 mov     [rbp+var_E2], 0
.text:0000000000004808                 mov     rax, fs:28h
.text:0000000000004811                 mov     [rbp+var_38], rax
.text:0000000000004815                 xor     eax, eax
.text:0000000000004817                 test    dword ptr [r8+14h], 0FFFF00h
.text:000000000000481F                 setnz   al
.text:0000000000004822                 test    rdx, rdx
.text:0000000000004825                 setz    dl
.text:0000000000004828                 movzx   edx, dl
.text:000000000000482B                 cmp     edx, r12d
.text:000000000000482E                 jge     loc_4C93
.text:0000000000004834                 test    cl, cl
.text:0000000000004836                 mov     r14, r8
.text:0000000000004839                 jz      loc_4936
.text:000000000000483F                 cmp     [rbp+src], 0
.text:0000000000004847                 jnz     loc_4C6F
.text:000000000000484D                 cmp     r12d, 2
.text:0000000000004851                 jg      loc_4C30
.text:0000000000004857                 mov     rdi, [rbx+r12*8-8] ; filename
.text:000000000000485C                 lea     rdx, [rbp+var_E2]
.text:0000000000004863                 lea     rsi, [rbp+stat_buf] ; stat_buf
.text:000000000000486A                 movzx   ecx, al
.text:000000000000486D                 call    target_directory_operand
.text:0000000000004872
.text:0000000000004872 loc_4872:                               ; CODE XREF: do_copy+3C2↓j
.text:0000000000004872                                         ; do_copy+3F2↓j ...
.text:0000000000004872                 cmp     cs:parents_option, 0
.text:0000000000004879                 mov     r12, [rbx]
.text:000000000000487C                 mov     rbx, [rbx+8]
.text:0000000000004880                 jnz     loc_4CBC
.text:0000000000004886                 cmp     byte ptr [r14+16h], 0
.text:000000000000488B                 jz      short loc_48F4
.text:000000000000488D                 mov     r13d, [r14]
.text:0000000000004890                 test    r13d, r13d
.text:0000000000004893                 jz      short loc_48F4
.text:0000000000004895                 mov     rsi, rbx        ; s2
.text:0000000000004898                 mov     rdi, r12        ; s1
.text:000000000000489B                 call    _strcmp
.text:00000000000048A0                 test    eax, eax
.text:00000000000048A2                 jnz     short loc_48F4
.text:00000000000048A4                 cmp     [rbp+var_E2], 0
.text:00000000000048AB                 jnz     short loc_48F4
.text:00000000000048AD                 mov     eax, [rbp+stat_buf.st_mode]
.text:00000000000048B3                 and     eax, 0F000h
.text:00000000000048B8                 cmp     eax, 8000h
.text:00000000000048BD                 jnz     short loc_48F4
.text:00000000000048BF                 mov     rsi, rbx
.text:00000000000048C2                 mov     edi, 0FFFFFF9Ch
.text:00000000000048C7                 mov     edx, r13d
.text:00000000000048CA                 call    find_backup_file_name
.text:00000000000048CF                 mov     rsi, r14
.text:00000000000048D2                 lea     r14, x_tmp_7353
.text:00000000000048D9                 lea     rdi, x_tmp_7353
.text:00000000000048E0                 mov     ecx, 14h
.text:00000000000048E5                 mov     rbx, rax
.text:00000000000048E8                 rep movsd
.text:00000000000048EA                 mov     cs:x_tmp_7353, 0
.text:00000000000048F4
.text:00000000000048F4 loc_48F4:                               ; CODE XREF: do_copy+AB↑j
.text:00000000000048F4                                         ; do_copy+B3↑j ...
.text:00000000000048F4                 lea     r8, [rbp+var_D8]
.text:00000000000048FB                 xor     r9d, r9d
.text:00000000000048FE                 mov     rcx, r14
.text:0000000000004901                 xor     edx, edx
.text:0000000000004903                 mov     rsi, rbx
.text:0000000000004906                 mov     rdi, r12
.text:0000000000004909                 call    copy
.text:000000000000490E                 mov     r15d, eax
.text:0000000000004911
.text:0000000000004911 loc_4911:                               ; CODE XREF: do_copy+25E↓j
.text:0000000000004911                 mov     rcx, [rbp+var_38]
.text:0000000000004915                 xor     rcx, fs:28h
.text:000000000000491E                 mov     eax, r15d
.text:0000000000004921                 jnz     loc_4CB7
.text:0000000000004927                 lea     rsp, [rbp-28h]
.text:000000000000492B                 pop     rbx
.text:000000000000492C                 pop     r12
.text:000000000000492E                 pop     r13
.text:0000000000004930                 pop     r14
.text:0000000000004932                 pop     r15
.text:0000000000004934                 pop     rbp
.text:0000000000004935                 retn
.text:0000000000004936 ; ---------------------------------------------------------------------------
.text:0000000000004936
.text:0000000000004936 loc_4936:                               ; CODE XREF: do_copy+59↑j
.text:0000000000004936                 cmp     [rbp+src], 0
.text:000000000000493E                 jz      loc_4B9E
.text:0000000000004944
.text:0000000000004944 loc_4944:                               ; CODE XREF: do_copy+445↓j
.text:0000000000004944                 cmp     r12d, 1
.text:0000000000004948                 jnz     loc_4B89
.text:000000000000494E
.text:000000000000494E loc_494E:                               ; CODE XREF: do_copy+3B9↓j
.text:000000000000494E                 lea     eax, [r12-1]
.text:0000000000004953                 mov     r15d, 1
.text:0000000000004959                 lea     rax, [rbx+rax*8+8]
.text:000000000000495E                 mov     [rbp+var_100], rax
.text:0000000000004965                 lea     rax, [rbp+var_E1]
.text:000000000000496C                 mov     [rbp+var_110], rax
.text:0000000000004973                 lea     rax, [rbp+var_D8]
.text:000000000000497A                 mov     [rbp+var_108], rax
.text:0000000000004981                 jmp     loc_4A44
.text:0000000000004981 ; ---------------------------------------------------------------------------
.text:0000000000004986                 align 10h
.text:0000000000004990
.text:0000000000004990 loc_4990:                               ; CODE XREF: do_copy+289↓j
.text:0000000000004990                 call    _strlen
.text:0000000000004995                 lea     rdx, [rax+1]    ; n
.text:0000000000004999                 add     rax, 1Fh
.text:000000000000499D                 mov     rsi, r13        ; src
.text:00000000000049A0                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:00000000000049A4                 sub     rsp, rax
.text:00000000000049A7                 lea     rdi, [rsp+110h+var_108+7]
.text:00000000000049AC                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:00000000000049B0                 call    _memcpy
.text:00000000000049B5                 mov     rdi, rax
.text:00000000000049B8                 mov     r12, rax
.text:00000000000049BB                 call    strip_trailing_slashes
.text:00000000000049C0                 mov     rdx, [rbp+var_108]
.text:00000000000049C7                 mov     rdi, [rbp+src]
.text:00000000000049CE                 mov     rsi, r12
.text:00000000000049D1                 call    file_name_concat
.text:00000000000049D6                 cmp     byte ptr [r14+2Eh], 0
.text:00000000000049DB                 mov     rsi, [rbp+var_D8]
.text:00000000000049E2                 mov     r12, rax
.text:00000000000049E5                 lea     rax, aSS        ; "%s -> %s\n"
.text:00000000000049EC                 mov     edx, 0
.text:00000000000049F1                 lea     rcx, [rbp+ptr]
.text:00000000000049F8                 lea     r8, [rbp+var_E2]
.text:00000000000049FF                 mov     r9, r14
.text:0000000000004A02                 mov     rdi, r12        ; src
.text:0000000000004A05                 cmovnz  rdx, rax
.text:0000000000004A09                 sub     rsi, r12
.text:0000000000004A0C                 call    make_dir_parents_private
.text:0000000000004A11                 test    al, al
.text:0000000000004A13                 jnz     loc_4AD7
.text:0000000000004A19                 movzx   eax, cs:parents_option
.text:0000000000004A20                 xor     r15d, r15d
.text:0000000000004A23
.text:0000000000004A23 loc_4A23:                               ; CODE XREF: do_copy+34C↓j
.text:0000000000004A23                 test    al, al
.text:0000000000004A25                 jnz     loc_4B4B
.text:0000000000004A2B
.text:0000000000004A2B loc_4A2B:                               ; CODE XREF: do_copy+320↓j
.text:0000000000004A2B                                         ; do_copy+377↓j
.text:0000000000004A2B                 mov     rdi, r12        ; ptr
.text:0000000000004A2E                 add     rbx, 8
.text:0000000000004A32                 call    free
.text:0000000000004A37                 cmp     [rbp+var_100], rbx
.text:0000000000004A3E                 jz      loc_4911
.text:0000000000004A44
.text:0000000000004A44 loc_4A44:                               ; CODE XREF: do_copy+1A1↑j
.text:0000000000004A44                 cmp     cs:remove_trailing_slashes, 0
.text:0000000000004A4B                 mov     [rbp+var_D8], 0
.text:0000000000004A56                 mov     r13, [rbx]
.text:0000000000004A59                 jnz     loc_4B60
.text:0000000000004A5F
.text:0000000000004A5F loc_4A5F:                               ; CODE XREF: do_copy+388↓j
.text:0000000000004A5F                 cmp     cs:parents_option, 0
.text:0000000000004A66                 mov     rdi, r13        ; s
.text:0000000000004A69                 jnz     loc_4990
.text:0000000000004A6F                 call    last_component
.text:0000000000004A74                 mov     rdi, rax        ; s
.text:0000000000004A77                 mov     r12, rax
.text:0000000000004A7A                 call    _strlen
.text:0000000000004A7F                 lea     rdx, [rax+1]    ; n
.text:0000000000004A83                 add     rax, 1Fh
.text:0000000000004A87                 mov     rsi, r12        ; src
.text:0000000000004A8A                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000004A8E                 sub     rsp, rax
.text:0000000000004A91                 lea     rdi, [rsp+110h+var_108+7]
.text:0000000000004A96                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:0000000000004A9A                 call    _memcpy
.text:0000000000004A9F                 mov     rdi, rax
.text:0000000000004AA2                 mov     r12, rax
.text:0000000000004AA5                 call    strip_trailing_slashes
.text:0000000000004AAA                 lea     rdi, asc_12A38  ; ".."
.text:0000000000004AB1                 mov     ecx, 3
.text:0000000000004AB6                 mov     rsi, r12
.text:0000000000004AB9                 repe cmpsb
.text:0000000000004ABB                 setnbe  al
.text:0000000000004ABE                 sbb     al, 0
.text:0000000000004AC0                 test    al, al
.text:0000000000004AC2                 jnz     loc_4B70
.text:0000000000004AC8                 mov     rdi, [rbp+src]  ; src
.text:0000000000004ACF                 call    xstrdup
.text:0000000000004AD4                 mov     r12, rax
.text:0000000000004AD7
.text:0000000000004AD7 loc_4AD7:                               ; CODE XREF: do_copy+233↑j
.text:0000000000004AD7                                         ; do_copy+3A4↓j
.text:0000000000004AD7                 movzx   edx, [rbp+var_E2]
.text:0000000000004ADE                 mov     r8, [rbp+var_110]
.text:0000000000004AE5                 xor     r9d, r9d
.text:0000000000004AE8                 mov     rcx, r14
.text:0000000000004AEB                 mov     rsi, r12
.text:0000000000004AEE                 mov     rdi, r13
.text:0000000000004AF1                 call    copy
.text:0000000000004AF6                 and     r15d, eax
.text:0000000000004AF9                 cmp     cs:parents_option, 0
.text:0000000000004B00                 jz      loc_4A2B
.text:0000000000004B06                 mov     rsi, [rbp+var_D8]
.text:0000000000004B0D                 mov     rdx, [rbp+ptr]
.text:0000000000004B14                 mov     rcx, r14
.text:0000000000004B17                 mov     rdi, r12        ; src
.text:0000000000004B1A                 sub     rsi, r12
.text:0000000000004B1D                 call    re_protect
.text:0000000000004B22                 and     r15d, eax
.text:0000000000004B25                 movzx   eax, cs:parents_option
.text:0000000000004B2C                 jmp     loc_4A23
.text:0000000000004B2C ; ---------------------------------------------------------------------------
.text:0000000000004B31                 align 8
.text:0000000000004B38
.text:0000000000004B38 loc_4B38:                               ; CODE XREF: do_copy+375↓j
.text:0000000000004B38                 mov     rax, [rdi+0A0h]
.text:0000000000004B3F                 mov     [rbp+ptr], rax
.text:0000000000004B46                 call    free
.text:0000000000004B4B
.text:0000000000004B4B loc_4B4B:                               ; CODE XREF: do_copy+245↑j
.text:0000000000004B4B                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000004B52                 test    rdi, rdi
.text:0000000000004B55                 jnz     short loc_4B38
.text:0000000000004B57                 jmp     loc_4A2B
.text:0000000000004B57 ; ---------------------------------------------------------------------------
.text:0000000000004B5C                 align 20h
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: do_copy+279↑j
.text:0000000000004B60                 mov     rdi, r13
.text:0000000000004B63                 call    strip_trailing_slashes
.text:0000000000004B68                 jmp     loc_4A5F
.text:0000000000004B68 ; ---------------------------------------------------------------------------
.text:0000000000004B6D                 align 10h
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: do_copy+2E2↑j
.text:0000000000004B70                 mov     rdi, [rbp+src]
.text:0000000000004B77                 mov     rsi, r12
.text:0000000000004B7A                 xor     edx, edx
.text:0000000000004B7C                 call    file_name_concat
.text:0000000000004B81                 mov     r12, rax
.text:0000000000004B84                 jmp     loc_4AD7
.text:0000000000004B89 ; ---------------------------------------------------------------------------
.text:0000000000004B89
.text:0000000000004B89 loc_4B89:                               ; CODE XREF: do_copy+168↑j
.text:0000000000004B89                 mov     rdi, r14
.text:0000000000004B8C                 call    dest_info_init
.text:0000000000004B91                 mov     rdi, r14
.text:0000000000004B94                 call    src_info_init
.text:0000000000004B99                 jmp     loc_494E
.text:0000000000004B9E ; ---------------------------------------------------------------------------
.text:0000000000004B9E
.text:0000000000004B9E loc_4B9E:                               ; CODE XREF: do_copy+15E↑j
.text:0000000000004B9E                 cmp     r12d, 1
.text:0000000000004BA2                 jz      loc_4872
.text:0000000000004BA8                 movsxd  rdx, r12d
.text:0000000000004BAB                 movzx   ecx, al
.text:0000000000004BAE                 lea     r13, [rsi+rdx*8-8]
.text:0000000000004BB3                 lea     rdx, [rbp+var_E2]
.text:0000000000004BBA                 lea     rsi, [rbp+stat_buf] ; stat_buf
.text:0000000000004BC1                 mov     rdi, [r13+0]    ; filename
.text:0000000000004BC5                 call    target_directory_operand
.text:0000000000004BCA                 test    al, al
.text:0000000000004BCC                 jnz     short loc_4C10
.text:0000000000004BCE                 cmp     r12d, 2
.text:0000000000004BD2                 jz      loc_4872
.text:0000000000004BD8                 mov     rsi, [r13+0]
.text:0000000000004BDC                 mov     edi, 4
.text:0000000000004BE1                 call    quotearg_style
.text:0000000000004BE6                 lea     rsi, aTargetSIsNotAD ; "target %s is not a directory"
.text:0000000000004BED                 mov     rbx, rax
.text:0000000000004BF0                 mov     edx, 5          ; category
.text:0000000000004BF5                 xor     edi, edi        ; domainname
.text:0000000000004BF7                 call    _dcgettext
.text:0000000000004BFC                 mov     rcx, rbx
.text:0000000000004BFF                 mov     rdx, rax        ; format
.text:0000000000004C02                 xor     esi, esi        ; errnum
.text:0000000000004C04                 mov     edi, 1          ; status
.text:0000000000004C09                 xor     eax, eax
.text:0000000000004C0B                 call    _error
.text:0000000000004C10
.text:0000000000004C10 loc_4C10:                               ; CODE XREF: do_copy+3EC↑j
.text:0000000000004C10                 sub     r12d, 1
.text:0000000000004C14                 movsxd  rax, r12d
.text:0000000000004C17                 mov     rax, [rbx+rax*8]
.text:0000000000004C1B                 test    rax, rax
.text:0000000000004C1E                 mov     [rbp+src], rax
.text:0000000000004C25                 jnz     loc_4944
.text:0000000000004C2B                 jmp     loc_4872
.text:0000000000004C30 ; ---------------------------------------------------------------------------
.text:0000000000004C30
.text:0000000000004C30 loc_4C30:                               ; CODE XREF: do_copy+71↑j
.text:0000000000004C30                 mov     rsi, [rsi+10h]
.text:0000000000004C34                 mov     edi, 4
.text:0000000000004C39                 call    quotearg_style
.text:0000000000004C3E                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000004C45                 mov     rbx, rax
.text:0000000000004C48                 mov     edx, 5          ; category
.text:0000000000004C4D
.text:0000000000004C4D loc_4C4D:                               ; CODE XREF: do_copy+4D5↓j
.text:0000000000004C4D                 xor     edi, edi        ; domainname
.text:0000000000004C4F                 call    _dcgettext
.text:0000000000004C54                 mov     rcx, rbx
.text:0000000000004C57                 mov     rdx, rax        ; format
.text:0000000000004C5A                 xor     esi, esi        ; errnum
.text:0000000000004C5C                 xor     edi, edi        ; status
.text:0000000000004C5E                 xor     eax, eax
.text:0000000000004C60                 call    _error
.text:0000000000004C65
.text:0000000000004C65 loc_4C65:                               ; CODE XREF: do_copy+4FD↓j
.text:0000000000004C65                 mov     edi, 1          ; status
.text:0000000000004C6A                 call    usage
.text:0000000000004C6F ; ---------------------------------------------------------------------------
.text:0000000000004C6F
.text:0000000000004C6F loc_4C6F:                               ; CODE XREF: do_copy+67↑j
.text:0000000000004C6F                 lea     rsi, aCannotCombineT ; "cannot combine --target-directory (-t) "...
.text:0000000000004C76                 mov     edx, 5          ; category
.text:0000000000004C7B                 xor     edi, edi        ; domainname
.text:0000000000004C7D                 call    _dcgettext
.text:0000000000004C82                 xor     esi, esi        ; errnum
.text:0000000000004C84                 mov     rdx, rax        ; format
.text:0000000000004C87                 mov     edi, 1          ; status
.text:0000000000004C8C                 xor     eax, eax
.text:0000000000004C8E                 call    _error
.text:0000000000004C93
.text:0000000000004C93 loc_4C93:                               ; CODE XREF: do_copy+4E↑j
.text:0000000000004C93                 sub     r12d, 1
.text:0000000000004C97                 jnz     short loc_4CDF
.text:0000000000004C99                 mov     rsi, [rsi]
.text:0000000000004C9C                 mov     edi, 4
.text:0000000000004CA1                 call    quotearg_style
.text:0000000000004CA6                 mov     edx, 5
.text:0000000000004CAB                 mov     rbx, rax
.text:0000000000004CAE                 lea     rsi, aMissingDestina ; "missing destination file operand after "...
.text:0000000000004CB5                 jmp     short loc_4C4D
.text:0000000000004CB7 ; ---------------------------------------------------------------------------
.text:0000000000004CB7
.text:0000000000004CB7 loc_4CB7:                               ; CODE XREF: do_copy+141↑j
.text:0000000000004CB7                 call    ___stack_chk_fail
.text:0000000000004CBC ; ---------------------------------------------------------------------------
.text:0000000000004CBC
.text:0000000000004CBC loc_4CBC:                               ; CODE XREF: do_copy+A0↑j
.text:0000000000004CBC                 lea     rsi, aWithParentsThe ; "with --parents, the destination must be"...
.text:0000000000004CC3                 mov     edx, 5          ; category
.text:0000000000004CC8
.text:0000000000004CC8 loc_4CC8:                               ; CODE XREF: do_copy+50B↓j
.text:0000000000004CC8                 xor     edi, edi        ; domainname
.text:0000000000004CCA                 call    _dcgettext
.text:0000000000004CCF                 xor     esi, esi        ; errnum
.text:0000000000004CD1                 mov     rdx, rax        ; format
.text:0000000000004CD4                 xor     edi, edi        ; status
.text:0000000000004CD6                 xor     eax, eax
.text:0000000000004CD8                 call    _error
.text:0000000000004CDD                 jmp     short loc_4C65
.text:0000000000004CDF ; ---------------------------------------------------------------------------
.text:0000000000004CDF
.text:0000000000004CDF loc_4CDF:                               ; CODE XREF: do_copy+4B7↑j
.text:0000000000004CDF                 mov     edx, 5
.text:0000000000004CE4                 lea     rsi, aMissingFileOpe ; "missing file operand"
.text:0000000000004CEB                 jmp     short loc_4CC8
.text:0000000000004CEB ; } // starts at 47E0
.text:0000000000004CEB do_copy         endp
.text:0000000000004CEB
.text:0000000000004CEB ; ---------------------------------------------------------------------------
.text:0000000000004CED                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0
.text:0000000000004CF0 ; __int64 __fastcall writable_destination(char *name)
.text:0000000000004CF0 writable_destination proc near          ; CODE XREF: overwrite_ok_isra_12+2A↓p
.text:0000000000004CF0                                         ; copy_internal+123B↓p
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 and     esi, 0F000h
.text:0000000000004CF6                 cmp     esi, 0A000h
.text:0000000000004CFC                 jz      short loc_4D18
.text:0000000000004CFE                 push    rbx
.text:0000000000004CFF                 mov     rbx, rdi
.text:0000000000004D02                 call    can_write_any_file
.text:0000000000004D07                 test    al, al
.text:0000000000004D09                 jz      short loc_4D20
.text:0000000000004D0B                 mov     eax, 1
.text:0000000000004D10                 pop     rbx
.text:0000000000004D11                 retn
.text:0000000000004D11 ; ---------------------------------------------------------------------------
.text:0000000000004D12                 align 8
.text:0000000000004D18
.text:0000000000004D18 loc_4D18:                               ; CODE XREF: writable_destination+C↑j
.text:0000000000004D18                 mov     eax, 1
.text:0000000000004D1D                 retn
.text:0000000000004D1D ; ---------------------------------------------------------------------------
.text:0000000000004D1E                 align 20h
.text:0000000000004D20
.text:0000000000004D20 loc_4D20:                               ; CODE XREF: writable_destination+19↑j
.text:0000000000004D20                 mov     rdi, rbx        ; name
.text:0000000000004D23                 mov     esi, 2          ; type
.text:0000000000004D28                 call    _euidaccess
.text:0000000000004D2D                 test    eax, eax
.text:0000000000004D2F                 setz    al
.text:0000000000004D32                 pop     rbx
.text:0000000000004D33                 retn
.text:0000000000004D33 ; } // starts at 4CF0
.text:0000000000004D33 writable_destination endp
.text:0000000000004D33
.text:0000000000004D33 ; ---------------------------------------------------------------------------
.text:0000000000004D34                 align 20h
.text:0000000000004D40
.text:0000000000004D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D40
.text:0000000000004D40
.text:0000000000004D40 ; __int64 __fastcall write_zeros(int fd)
.text:0000000000004D40 write_zeros     proc near               ; CODE XREF: copy_internal+39B1↓p
.text:0000000000004D40                                         ; copy_internal+3CBB↓p
.text:0000000000004D40 ; __unwind {
.text:0000000000004D40                 cmp     cs:zeros_7570, 0
.text:0000000000004D48                 push    r12
.text:0000000000004D4A                 mov     r12d, edi
.text:0000000000004D4D                 push    rbp
.text:0000000000004D4E                 push    rbx
.text:0000000000004D4F                 mov     rbx, rsi
.text:0000000000004D52                 jz      short loc_4DA8
.text:0000000000004D54
.text:0000000000004D54 loc_4D54:                               ; CODE XREF: write_zeros+85↓j
.text:0000000000004D54                                         ; write_zeros+A0↓j
.text:0000000000004D54                 test    rbx, rbx
.text:0000000000004D57                 jnz     short loc_4D65
.text:0000000000004D59                 jmp     short loc_4D98
.text:0000000000004D59 ; ---------------------------------------------------------------------------
.text:0000000000004D5B                 align 20h
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: write_zeros+4C↓j
.text:0000000000004D60                 sub     rbx, rax
.text:0000000000004D63                 jz      short loc_4D98
.text:0000000000004D65
.text:0000000000004D65 loc_4D65:                               ; CODE XREF: write_zeros+17↑j
.text:0000000000004D65                 cmp     cs:nz_7571, rbx
.text:0000000000004D6C                 mov     rbp, rbx
.text:0000000000004D6F                 mov     rsi, cs:zeros_7570 ; buf
.text:0000000000004D76                 cmovbe  rbp, cs:nz_7571
.text:0000000000004D7E                 mov     edi, r12d       ; fd
.text:0000000000004D81                 mov     rdx, rbp        ; n
.text:0000000000004D84                 call    full_write
.text:0000000000004D89                 cmp     rax, rbp
.text:0000000000004D8C                 jz      short loc_4D60
.text:0000000000004D8E                 pop     rbx
.text:0000000000004D8F                 xor     eax, eax
.text:0000000000004D91                 pop     rbp
.text:0000000000004D92                 pop     r12
.text:0000000000004D94                 retn
.text:0000000000004D94 ; ---------------------------------------------------------------------------
.text:0000000000004D95                 align 8
.text:0000000000004D98
.text:0000000000004D98 loc_4D98:                               ; CODE XREF: write_zeros+19↑j
.text:0000000000004D98                                         ; write_zeros+23↑j
.text:0000000000004D98                 pop     rbx
.text:0000000000004D99                 mov     eax, 1
.text:0000000000004D9E                 pop     rbp
.text:0000000000004D9F                 pop     r12
.text:0000000000004DA1                 retn
.text:0000000000004DA1 ; ---------------------------------------------------------------------------
.text:0000000000004DA2                 align 8
.text:0000000000004DA8
.text:0000000000004DA8 loc_4DA8:                               ; CODE XREF: write_zeros+12↑j
.text:0000000000004DA8                 mov     rdi, cs:nz_7571 ; nmemb
.text:0000000000004DAF                 mov     esi, 1          ; size
.text:0000000000004DB4                 call    _calloc
.text:0000000000004DB9                 test    rax, rax
.text:0000000000004DBC                 jz      short loc_4DC7
.text:0000000000004DBE                 mov     cs:zeros_7570, rax
.text:0000000000004DC5                 jmp     short loc_4D54
.text:0000000000004DC7 ; ---------------------------------------------------------------------------
.text:0000000000004DC7
.text:0000000000004DC7 loc_4DC7:                               ; CODE XREF: write_zeros+7C↑j
.text:0000000000004DC7                 lea     rax, fallback_7572
.text:0000000000004DCE                 mov     cs:nz_7571, 400h
.text:0000000000004DD9                 mov     cs:zeros_7570, rax
.text:0000000000004DE0                 jmp     loc_4D54
.text:0000000000004DE0 ; } // starts at 4D40
.text:0000000000004DE0 write_zeros     endp
.text:0000000000004DE0
.text:0000000000004DE0 ; ---------------------------------------------------------------------------
.text:0000000000004DE5                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0 punch_hole      proc near               ; CODE XREF: create_hole+4B↓p
.text:0000000000004DF0                                         ; copy_internal+3C7C↓p
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 push    rbx
.text:0000000000004DF1                 mov     rcx, rdx        ; len
.text:0000000000004DF4                 mov     rdx, rsi        ; offset
.text:0000000000004DF7                 mov     esi, 3          ; mode
.text:0000000000004DFC                 call    _fallocate
.text:0000000000004E01                 test    eax, eax
.text:0000000000004E03                 mov     ebx, eax
.text:0000000000004E05                 js      short loc_4E10
.text:0000000000004E07
.text:0000000000004E07 loc_4E07:                               ; CODE XREF: punch_hole+2F↓j
.text:0000000000004E07                 mov     eax, ebx
.text:0000000000004E09                 pop     rbx
.text:0000000000004E0A                 retn
.text:0000000000004E0A ; ---------------------------------------------------------------------------
.text:0000000000004E0B                 align 10h
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: punch_hole+15↑j
.text:0000000000004E10                 call    ___errno_location
.text:0000000000004E15                 mov     eax, [rax]
.text:0000000000004E17                 cmp     eax, 26h ; '&'
.text:0000000000004E1A                 jz      short loc_4E21
.text:0000000000004E1C                 cmp     eax, 5Fh ; '_'
.text:0000000000004E1F                 jnz     short loc_4E07
.text:0000000000004E21
.text:0000000000004E21 loc_4E21:                               ; CODE XREF: punch_hole+2A↑j
.text:0000000000004E21                 xor     ebx, ebx
.text:0000000000004E23                 mov     eax, ebx
.text:0000000000004E25                 pop     rbx
.text:0000000000004E26                 retn
.text:0000000000004E26 ; } // starts at 4DF0
.text:0000000000004E26 punch_hole      endp
.text:0000000000004E26
.text:0000000000004E26 ; ---------------------------------------------------------------------------
.text:0000000000004E27                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30
.text:0000000000004E30 emit_verbose    proc near               ; CODE XREF: copy_internal+A3B↓p
.text:0000000000004E30                                         ; copy_internal+13C7↓p ...
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 push    r12
.text:0000000000004E32                 push    rbp
.text:0000000000004E33                 mov     r12, rdi
.text:0000000000004E36                 push    rbx
.text:0000000000004E37                 mov     edi, 1
.text:0000000000004E3C                 mov     rbx, rdx
.text:0000000000004E3F                 mov     rdx, rsi
.text:0000000000004E42                 mov     esi, 4
.text:0000000000004E47                 call    quotearg_n_style
.text:0000000000004E4C                 xor     edi, edi
.text:0000000000004E4E                 mov     rdx, r12
.text:0000000000004E51                 mov     esi, 4
.text:0000000000004E56                 mov     rbp, rax
.text:0000000000004E59                 call    quotearg_n_style
.text:0000000000004E5E                 lea     rsi, aSS_0      ; "%s -> %s"
.text:0000000000004E65                 mov     rdx, rax
.text:0000000000004E68                 mov     rcx, rbp
.text:0000000000004E6B                 xor     eax, eax
.text:0000000000004E6D                 mov     edi, 1
.text:0000000000004E72                 call    ___printf_chk
.text:0000000000004E77                 test    rbx, rbx
.text:0000000000004E7A                 jz      short loc_4EB1
.text:0000000000004E7C                 mov     rsi, rbx
.text:0000000000004E7F                 mov     edi, 4
.text:0000000000004E84                 call    quotearg_style
.text:0000000000004E89                 lea     rsi, aBackupS   ; " (backup: %s)"
.text:0000000000004E90                 mov     rbx, rax
.text:0000000000004E93                 mov     edx, 5          ; category
.text:0000000000004E98                 xor     edi, edi        ; domainname
.text:0000000000004E9A                 call    _dcgettext
.text:0000000000004E9F                 mov     rdx, rbx
.text:0000000000004EA2                 mov     rsi, rax
.text:0000000000004EA5                 mov     edi, 1
.text:0000000000004EAA                 xor     eax, eax
.text:0000000000004EAC                 call    ___printf_chk
.text:0000000000004EB1
.text:0000000000004EB1 loc_4EB1:                               ; CODE XREF: emit_verbose+4A↑j
.text:0000000000004EB1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004EB8                 mov     rax, [rdi+28h]
.text:0000000000004EBC                 cmp     rax, [rdi+30h]
.text:0000000000004EC0                 jnb     short loc_4ED8
.text:0000000000004EC2                 lea     rdx, [rax+1]
.text:0000000000004EC6                 mov     [rdi+28h], rdx
.text:0000000000004ECA                 mov     byte ptr [rax], 0Ah
.text:0000000000004ECD                 pop     rbx
.text:0000000000004ECE                 pop     rbp
.text:0000000000004ECF                 pop     r12
.text:0000000000004ED1                 retn
.text:0000000000004ED1 ; ---------------------------------------------------------------------------
.text:0000000000004ED2                 align 8
.text:0000000000004ED8
.text:0000000000004ED8 loc_4ED8:                               ; CODE XREF: emit_verbose+90↑j
.text:0000000000004ED8                 pop     rbx
.text:0000000000004ED9                 pop     rbp
.text:0000000000004EDA                 pop     r12
.text:0000000000004EDC                 mov     esi, 0Ah        ; int
.text:0000000000004EE1                 jmp     ___overflow
.text:0000000000004EE1 ; } // starts at 4E30
.text:0000000000004EE1 emit_verbose    endp
.text:0000000000004EE1
.text:0000000000004EE1 ; ---------------------------------------------------------------------------
.text:0000000000004EE6                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0
.text:0000000000004EF0 create_hard_link proc near              ; CODE XREF: copy_internal+2F4↓p
.text:0000000000004EF0                                         ; copy_internal+56F↓p ...
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 push    r13
.text:0000000000004EF2                 push    r12
.text:0000000000004EF4                 movzx   r9d, dl
.text:0000000000004EF8                 push    rbp
.text:0000000000004EF9                 push    rbx
.text:0000000000004EFA                 mov     edx, 0FFFFFF9Ch
.text:0000000000004EFF                 mov     r13, rdi
.text:0000000000004F02                 mov     r12, rsi
.text:0000000000004F05                 mov     ebp, ecx
.text:0000000000004F07                 sub     rsp, 10h
.text:0000000000004F0B                 test    r8b, r8b
.text:0000000000004F0E                 mov     rcx, rsi
.text:0000000000004F11                 setnz   r8b
.text:0000000000004F15                 push    0FFFFFFFFFFFFFFFFh
.text:0000000000004F17                 mov     rsi, rdi
.text:0000000000004F1A                 movzx   r8d, r8b
.text:0000000000004F1E                 mov     edi, edx
.text:0000000000004F20                 shl     r8d, 0Ah
.text:0000000000004F24                 call    force_linkat
.text:0000000000004F29                 test    eax, eax
.text:0000000000004F2B                 mov     ebx, eax
.text:0000000000004F2D                 pop     rdx
.text:0000000000004F2E                 pop     rcx
.text:0000000000004F2F                 jg      short loc_4F98
.text:0000000000004F31                 shr     ebx, 1Fh
.text:0000000000004F34                 and     bl, bpl
.text:0000000000004F37                 jnz     short loc_4F50
.text:0000000000004F39                 add     rsp, 8
.text:0000000000004F3D                 mov     ebx, 1
.text:0000000000004F42                 mov     eax, ebx
.text:0000000000004F44                 pop     rbx
.text:0000000000004F45                 pop     rbp
.text:0000000000004F46                 pop     r12
.text:0000000000004F48                 pop     r13
.text:0000000000004F4A                 retn
.text:0000000000004F4A ; ---------------------------------------------------------------------------
.text:0000000000004F4B                 align 10h
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: create_hard_link+47↑j
.text:0000000000004F50                 mov     rsi, r12
.text:0000000000004F53                 mov     edi, 4
.text:0000000000004F58                 call    quotearg_style
.text:0000000000004F5D                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000004F64                 mov     rbp, rax
.text:0000000000004F67                 mov     edx, 5          ; category
.text:0000000000004F6C                 xor     edi, edi        ; domainname
.text:0000000000004F6E                 call    _dcgettext
.text:0000000000004F73                 mov     rdx, rbp
.text:0000000000004F76                 mov     rsi, rax
.text:0000000000004F79                 mov     edi, 1
.text:0000000000004F7E                 xor     eax, eax
.text:0000000000004F80                 call    ___printf_chk
.text:0000000000004F85                 add     rsp, 8
.text:0000000000004F89                 mov     eax, ebx
.text:0000000000004F8B                 pop     rbx
.text:0000000000004F8C                 pop     rbp
.text:0000000000004F8D                 pop     r12
.text:0000000000004F8F                 pop     r13
.text:0000000000004F91                 retn
.text:0000000000004F91 ; ---------------------------------------------------------------------------
.text:0000000000004F92                 align 8
.text:0000000000004F98
.text:0000000000004F98 loc_4F98:                               ; CODE XREF: create_hard_link+3F↑j
.text:0000000000004F98                 mov     rdx, r13
.text:0000000000004F9B                 mov     esi, 4
.text:0000000000004FA0                 mov     edi, 1
.text:0000000000004FA5                 call    quotearg_n_style
.text:0000000000004FAA                 mov     rdx, r12
.text:0000000000004FAD                 mov     esi, 4
.text:0000000000004FB2                 xor     edi, edi
.text:0000000000004FB4                 mov     r13, rax
.text:0000000000004FB7                 call    quotearg_n_style
.text:0000000000004FBC                 lea     rsi, aCannotCreateHa ; "cannot create hard link %s to %s"
.text:0000000000004FC3                 mov     rbp, rax
.text:0000000000004FC6                 mov     edx, 5          ; category
.text:0000000000004FCB                 xor     edi, edi        ; domainname
.text:0000000000004FCD                 call    _dcgettext
.text:0000000000004FD2                 mov     r8, r13
.text:0000000000004FD5                 mov     rcx, rbp
.text:0000000000004FD8                 mov     rdx, rax        ; format
.text:0000000000004FDB                 mov     esi, ebx        ; errnum
.text:0000000000004FDD                 xor     eax, eax
.text:0000000000004FDF                 xor     edi, edi        ; status
.text:0000000000004FE1                 call    _error
.text:0000000000004FE6                 xor     ebx, ebx
.text:0000000000004FE8                 add     rsp, 8
.text:0000000000004FEC                 mov     eax, ebx
.text:0000000000004FEE                 pop     rbx
.text:0000000000004FEF                 pop     rbp
.text:0000000000004FF0                 pop     r12
.text:0000000000004FF2                 pop     r13
.text:0000000000004FF4                 retn
.text:0000000000004FF4 ; } // starts at 4EF0
.text:0000000000004FF4 create_hard_link endp
.text:0000000000004FF4
.text:0000000000004FF4 ; ---------------------------------------------------------------------------
.text:0000000000004FF5                 align 20h
.text:0000000000005000
.text:0000000000005000 ; =============== S U B R O U T I N E =======================================
.text:0000000000005000
.text:0000000000005000
.text:0000000000005000 overwrite_ok_isra_12 proc near          ; CODE XREF: copy_internal+C6C↓p
.text:0000000000005000                                         ; copy_internal+1277↓p
.text:0000000000005000
.text:0000000000005000 var_3C          = byte ptr -3Ch
.text:0000000000005000 var_32          = byte ptr -32h
.text:0000000000005000 var_30          = qword ptr -30h
.text:0000000000005000
.text:0000000000005000 ; __unwind {
.text:0000000000005000                 push    r14
.text:0000000000005002                 push    r13
.text:0000000000005004                 mov     r13, rdi
.text:0000000000005007                 push    r12
.text:0000000000005009                 push    rbp
.text:000000000000500A                 mov     rbp, rdx
.text:000000000000500D                 push    rbx
.text:000000000000500E                 mov     rbx, rsi
.text:0000000000005011                 mov     rdi, rbx        ; name
.text:0000000000005014                 sub     rsp, 20h
.text:0000000000005018                 mov     esi, [rdx]
.text:000000000000501A                 mov     rax, fs:28h
.text:0000000000005023                 mov     [rsp+48h+var_30], rax
.text:0000000000005028                 xor     eax, eax
.text:000000000000502A                 call    writable_destination
.text:000000000000502F                 test    al, al
.text:0000000000005031                 jnz     loc_50C8
.text:0000000000005037                 mov     edi, [rbp+0]
.text:000000000000503A                 lea     r12, [rsp+48h+var_3C]
.text:000000000000503F                 mov     rsi, r12
.text:0000000000005042                 call    strmode
.text:0000000000005047                 mov     ebp, [rbp+0]
.text:000000000000504A                 mov     rsi, rbx
.text:000000000000504D                 mov     edi, 4
.text:0000000000005052                 mov     [rsp+48h+var_32], 0
.text:0000000000005057                 call    quotearg_style
.text:000000000000505C                 and     ebp, 0FFFh
.text:0000000000005062                 cmp     byte ptr [r13+18h], 0
.text:0000000000005067                 mov     r14, rax
.text:000000000000506A                 mov     rbx, cs:program_name
.text:0000000000005071                 mov     edx, 5          ; category
.text:0000000000005076                 jnz     short loc_5086
.text:0000000000005078                 test    dword ptr [r13+14h], 0FFFF00h
.text:0000000000005080                 jz      loc_5130
.text:0000000000005086
.text:0000000000005086 loc_5086:                               ; CODE XREF: overwrite_ok_isra_12+76↑j
.text:0000000000005086                 lea     rsi, aSReplaceSOverr ; "%s: replace %s, overriding mode %04lo ("...
.text:000000000000508D                 xor     edi, edi        ; domainname
.text:000000000000508F                 call    _dcgettext
.text:0000000000005094                 mov     rdx, rax
.text:0000000000005097
.text:0000000000005097 loc_5097:                               ; CODE XREF: overwrite_ok_isra_12+141↓j
.text:0000000000005097                 sub     rsp, 8
.text:000000000000509B                 add     r12, 1
.text:000000000000509F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000050A6                 push    r12
.text:00000000000050A8                 mov     r9, rbp
.text:00000000000050AB                 mov     r8, r14
.text:00000000000050AE                 mov     rcx, rbx
.text:00000000000050B1                 mov     esi, 1
.text:00000000000050B6                 xor     eax, eax
.text:00000000000050B8                 call    ___fprintf_chk
.text:00000000000050BD                 pop     rax
.text:00000000000050BE                 pop     rdx
.text:00000000000050BF                 jmp     short loc_510E
.text:00000000000050BF ; ---------------------------------------------------------------------------
.text:00000000000050C1                 align 8
.text:00000000000050C8
.text:00000000000050C8 loc_50C8:                               ; CODE XREF: overwrite_ok_isra_12+31↑j
.text:00000000000050C8                 mov     rsi, rbx
.text:00000000000050CB                 mov     edi, 4
.text:00000000000050D0                 call    quotearg_style
.text:00000000000050D5                 lea     rsi, aSOverwriteS ; "%s: overwrite %s? "
.text:00000000000050DC                 mov     rbx, cs:program_name
.text:00000000000050E3                 mov     edx, 5          ; category
.text:00000000000050E8                 xor     edi, edi        ; domainname
.text:00000000000050EA                 mov     rbp, rax
.text:00000000000050ED                 call    _dcgettext
.text:00000000000050F2                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000050F9                 mov     rdx, rax
.text:00000000000050FC                 mov     r8, rbp
.text:00000000000050FF                 mov     rcx, rbx
.text:0000000000005102                 mov     esi, 1
.text:0000000000005107                 xor     eax, eax
.text:0000000000005109                 call    ___fprintf_chk
.text:000000000000510E
.text:000000000000510E loc_510E:                               ; CODE XREF: overwrite_ok_isra_12+BF↑j
.text:000000000000510E                 call    yesno
.text:0000000000005113                 mov     rcx, [rsp+48h+var_30]
.text:0000000000005118                 xor     rcx, fs:28h
.text:0000000000005121                 jnz     short loc_5146
.text:0000000000005123                 add     rsp, 20h
.text:0000000000005127                 pop     rbx
.text:0000000000005128                 pop     rbp
.text:0000000000005129                 pop     r12
.text:000000000000512B                 pop     r13
.text:000000000000512D                 pop     r14
.text:000000000000512F                 retn
.text:0000000000005130 ; ---------------------------------------------------------------------------
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: overwrite_ok_isra_12+80↑j
.text:0000000000005130                 lea     rsi, aSUnwritableSMo ; "%s: unwritable %s (mode %04lo, %s); try"...
.text:0000000000005137                 xor     edi, edi        ; domainname
.text:0000000000005139                 call    _dcgettext
.text:000000000000513E                 mov     rdx, rax
.text:0000000000005141                 jmp     loc_5097
.text:0000000000005146 ; ---------------------------------------------------------------------------
.text:0000000000005146
.text:0000000000005146 loc_5146:                               ; CODE XREF: overwrite_ok_isra_12+121↑j
.text:0000000000005146                 call    ___stack_chk_fail
.text:0000000000005146 ; } // starts at 5000
.text:0000000000005146 overwrite_ok_isra_12 endp
.text:0000000000005146
.text:0000000000005146 ; ---------------------------------------------------------------------------
.text:000000000000514B                 align 10h
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150
.text:0000000000005150 create_hole     proc near               ; CODE XREF: sparse_copy+277↓j
.text:0000000000005150                                         ; sparse_copy+2B8↓p ...
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 push    r13
.text:0000000000005152                 push    r12
.text:0000000000005154                 mov     r13, rsi
.text:0000000000005157                 push    rbp
.text:0000000000005158                 push    rbx
.text:0000000000005159                 mov     r12d, edx
.text:000000000000515C                 mov     rsi, rcx        ; offset
.text:000000000000515F                 mov     edx, 1          ; whence
.text:0000000000005164                 mov     ebp, edi
.text:0000000000005166                 sub     rsp, 8
.text:000000000000516A                 mov     rbx, rcx
.text:000000000000516D                 call    _lseek
.text:0000000000005172                 test    rax, rax
.text:0000000000005175                 js      short loc_51F0
.text:0000000000005177                 test    r12b, r12b
.text:000000000000517A                 jnz     short loc_5190
.text:000000000000517C
.text:000000000000517C loc_517C:                               ; CODE XREF: create_hole+52↓j
.text:000000000000517C                 add     rsp, 8
.text:0000000000005180                 mov     eax, 1
.text:0000000000005185                 pop     rbx
.text:0000000000005186                 pop     rbp
.text:0000000000005187                 pop     r12
.text:0000000000005189                 pop     r13
.text:000000000000518B                 retn
.text:000000000000518B ; ---------------------------------------------------------------------------
.text:000000000000518C                 align 10h
.text:0000000000005190
.text:0000000000005190 loc_5190:                               ; CODE XREF: create_hole+2A↑j
.text:0000000000005190                 sub     rax, rbx
.text:0000000000005193                 mov     rdx, rbx
.text:0000000000005196                 mov     edi, ebp
.text:0000000000005198                 mov     rsi, rax
.text:000000000000519B                 call    punch_hole
.text:00000000000051A0                 test    eax, eax
.text:00000000000051A2                 jns     short loc_517C
.text:00000000000051A4                 mov     rsi, r13
.text:00000000000051A7                 mov     edi, 4
.text:00000000000051AC                 call    quotearg_style
.text:00000000000051B1                 lea     rsi, aErrorDeallocat ; "error deallocating %s"
.text:00000000000051B8                 mov     rbp, rax
.text:00000000000051BB                 mov     edx, 5          ; category
.text:00000000000051C0
.text:00000000000051C0 loc_51C0:                               ; CODE XREF: create_hole+BC↓j
.text:00000000000051C0                 xor     edi, edi        ; domainname
.text:00000000000051C2                 call    _dcgettext
.text:00000000000051C7                 mov     rbx, rax
.text:00000000000051CA                 call    ___errno_location
.text:00000000000051CF                 mov     esi, [rax]      ; errnum
.text:00000000000051D1                 mov     rcx, rbp
.text:00000000000051D4                 mov     rdx, rbx        ; format
.text:00000000000051D7                 xor     eax, eax
.text:00000000000051D9                 xor     edi, edi        ; status
.text:00000000000051DB                 call    _error
.text:00000000000051E0                 add     rsp, 8
.text:00000000000051E4                 xor     eax, eax
.text:00000000000051E6                 pop     rbx
.text:00000000000051E7                 pop     rbp
.text:00000000000051E8                 pop     r12
.text:00000000000051EA                 pop     r13
.text:00000000000051EC                 retn
.text:00000000000051EC ; ---------------------------------------------------------------------------
.text:00000000000051ED                 align 10h
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: create_hole+25↑j
.text:00000000000051F0                 mov     rsi, r13
.text:00000000000051F3                 mov     edi, 4
.text:00000000000051F8                 call    quotearg_style
.text:00000000000051FD                 mov     edx, 5
.text:0000000000005202                 mov     rbp, rax
.text:0000000000005205                 lea     rsi, aCannotLseekS ; "cannot lseek %s"
.text:000000000000520C                 jmp     short loc_51C0
.text:000000000000520C ; } // starts at 5150
.text:000000000000520C create_hole     endp
.text:000000000000520C
.text:000000000000520C ; ---------------------------------------------------------------------------
.text:000000000000520E                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210
.text:0000000000005210 sparse_copy     proc near               ; CODE XREF: copy_internal+316A↓p
.text:0000000000005210                                         ; copy_internal+3B42↓p
.text:0000000000005210
.text:0000000000005210 var_A0          = qword ptr -0A0h
.text:0000000000005210 var_98          = qword ptr -98h
.text:0000000000005210 var_90          = dword ptr -90h
.text:0000000000005210 var_8B          = byte ptr -8Bh
.text:0000000000005210 var_8A          = byte ptr -8Ah
.text:0000000000005210 var_89          = byte ptr -89h
.text:0000000000005210 buf             = qword ptr -88h
.text:0000000000005210 var_80          = qword ptr -80h
.text:0000000000005210 var_78          = qword ptr -78h
.text:0000000000005210 nbytes          = qword ptr -70h
.text:0000000000005210 var_68          = qword ptr -68h
.text:0000000000005210 var_60          = qword ptr -60h
.text:0000000000005210 var_58          = qword ptr -58h
.text:0000000000005210 var_50          = qword ptr -50h
.text:0000000000005210 var_48          = qword ptr -48h
.text:0000000000005210 fd              = dword ptr -40h
.text:0000000000005210 var_3C          = dword ptr -3Ch
.text:0000000000005210 arg_0           = qword ptr  8
.text:0000000000005210 arg_8           = qword ptr  10h
.text:0000000000005210 arg_10          = qword ptr  18h
.text:0000000000005210 arg_18          = qword ptr  20h
.text:0000000000005210 arg_20          = qword ptr  28h
.text:0000000000005210
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 push    r15
.text:0000000000005212                 push    r14
.text:0000000000005214                 push    r13
.text:0000000000005216                 push    r12
.text:0000000000005218                 push    rbp
.text:0000000000005219                 push    rbx
.text:000000000000521A                 sub     rsp, 78h
.text:000000000000521E                 mov     rax, [rsp+0A8h+arg_0]
.text:0000000000005226                 mov     rbx, [rsp+0A8h+arg_18]
.text:000000000000522E                 mov     r10, [rsp+0A8h+arg_20]
.text:0000000000005236                 mov     [rsp+0A8h+var_89], r9b
.text:000000000000523B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000005240                 mov     rax, [rsp+0A8h+arg_8]
.text:0000000000005248                 mov     byte ptr [r10], 0
.text:000000000000524C                 mov     [rsp+0A8h+var_68], rbx
.text:0000000000005251                 mov     [rsp+0A8h+var_48], r10
.text:0000000000005256                 mov     qword ptr [rbx], 0
.text:000000000000525D                 mov     [rsp+0A8h+var_98], rax
.text:0000000000005262                 mov     rax, [rsp+0A8h+arg_10]
.text:000000000000526A                 test    rax, rax
.text:000000000000526D                 mov     [rsp+0A8h+var_80], rax
.text:0000000000005272                 jz      loc_5613
.text:0000000000005278                 test    r8, r8
.text:000000000000527B                 mov     [rsp+0A8h+var_58], r8
.text:0000000000005280                 mov     [rsp+0A8h+var_3C], r9d
.text:0000000000005285                 cmovz   r8, rcx
.text:0000000000005289                 mov     [rsp+0A8h+nbytes], rcx
.text:000000000000528E                 mov     [rsp+0A8h+buf], rdx
.text:0000000000005293                 mov     [rsp+0A8h+var_90], esi
.text:0000000000005297                 mov     [rsp+0A8h+fd], edi
.text:000000000000529B                 xor     r13d, r13d
.text:000000000000529E                 mov     [rsp+0A8h+var_60], r8
.text:00000000000052A3                 xor     r15d, r15d
.text:00000000000052A6
.text:00000000000052A6 loc_52A6:                               ; CODE XREF: sparse_copy+C7↓j
.text:00000000000052A6                                         ; sparse_copy+249↓j
.text:00000000000052A6                 mov     rax, [rsp+0A8h+nbytes]
.text:00000000000052AB                 mov     rdx, [rsp+0A8h+var_80]
.text:00000000000052B0                 mov     rsi, [rsp+0A8h+buf] ; buf
.text:00000000000052B5                 mov     edi, [rsp+0A8h+fd] ; fd
.text:00000000000052B9                 cmp     rax, rdx
.text:00000000000052BC                 cmovbe  rdx, rax        ; nbytes
.text:00000000000052C0                 call    _read
.text:00000000000052C5                 test    rax, rax
.text:00000000000052C8                 mov     [rsp+0A8h+var_78], rax
.text:00000000000052CD                 jns     short loc_5330
.text:00000000000052CF                 call    ___errno_location
.text:00000000000052D4                 cmp     dword ptr [rax], 4
.text:00000000000052D7                 jz      short loc_52A6
.text:00000000000052D9                 mov     rsi, [rsp+0A8h+var_50]
.text:00000000000052DE                 mov     edi, 4
.text:00000000000052E3                 mov     rbx, rax
.text:00000000000052E6                 xor     r15d, r15d
.text:00000000000052E9                 call    quotearg_style
.text:00000000000052EE                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:00000000000052F5                 mov     edx, 5          ; category
.text:00000000000052FA                 xor     edi, edi        ; domainname
.text:00000000000052FC                 mov     rbp, rax
.text:00000000000052FF                 call    _dcgettext
.text:0000000000005304                 mov     esi, [rbx]      ; errnum
.text:0000000000005306                 mov     rdx, rax        ; format
.text:0000000000005309                 mov     rcx, rbp
.text:000000000000530C                 xor     edi, edi        ; status
.text:000000000000530E                 xor     eax, eax
.text:0000000000005310                 call    _error
.text:0000000000005315
.text:0000000000005315 loc_5315:                               ; CODE XREF: sparse_copy+2CE↓j
.text:0000000000005315                                         ; sparse_copy+3A9↓j ...
.text:0000000000005315                 add     rsp, 78h
.text:0000000000005319                 mov     eax, r15d
.text:000000000000531C                 pop     rbx
.text:000000000000531D                 pop     rbp
.text:000000000000531E                 pop     r12
.text:0000000000005320                 pop     r13
.text:0000000000005322                 pop     r14
.text:0000000000005324                 pop     r15
.text:0000000000005326                 retn
.text:0000000000005326 ; ---------------------------------------------------------------------------
.text:0000000000005327                 align 10h
.text:0000000000005330
.text:0000000000005330 loc_5330:                               ; CODE XREF: sparse_copy+BD↑j
.text:0000000000005330                 jz      loc_545F
.text:0000000000005336                 mov     rax, [rsp+0A8h+var_68]
.text:000000000000533B                 mov     rbp, [rsp+0A8h+var_78]
.text:0000000000005340                 mov     ecx, r15d
.text:0000000000005343                 mov     r14, [rsp+0A8h+buf]
.text:0000000000005348                 mov     r10, [rsp+0A8h+var_60]
.text:000000000000534D                 add     [rax], rbp
.text:0000000000005350                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000005356                 mov     r11, r14
.text:0000000000005359                 mov     r15, r10
.text:000000000000535C                 setnz   [rsp+0A8h+var_8B]
.text:0000000000005361                 nop     dword ptr [rax+00000000h]
.text:0000000000005368
.text:0000000000005368 loc_5368:                               ; CODE XREF: sparse_copy+306↓j
.text:0000000000005368                 cmp     rbp, r15
.text:000000000000536B                 mov     rbx, r15
.text:000000000000536E                 cmovbe  rbx, rbp
.text:0000000000005372                 test    rbx, rbx
.text:0000000000005375                 setnz   r12b
.text:0000000000005379                 and     r12b, [rsp+0A8h+var_8B]
.text:000000000000537E                 jz      loc_5490
.text:0000000000005384                 mov     rsi, r14
.text:0000000000005387                 mov     rdx, rbx
.text:000000000000538A
.text:000000000000538A loc_538A:                               ; CODE XREF: sparse_copy+194↓j
.text:000000000000538A                 cmp     byte ptr [rsi], 0
.text:000000000000538D                 jnz     loc_55C0
.text:0000000000005393                 add     rsi, 1          ; s2
.text:0000000000005397                 sub     rdx, 1          ; n
.text:000000000000539B                 jz      loc_5528
.text:00000000000053A1                 test    dl, 0Fh
.text:00000000000053A4                 jnz     short loc_538A
.text:00000000000053A6                 mov     rdi, r14        ; s1
.text:00000000000053A9                 mov     [rsp+0A8h+var_A0], r11
.text:00000000000053AE                 mov     [rsp+0A8h+var_8A], cl
.text:00000000000053B2                 call    _memcmp
.text:00000000000053B7                 movzx   ecx, [rsp+0A8h+var_8A]
.text:00000000000053BC                 test    eax, eax
.text:00000000000053BE                 mov     r11, [rsp+0A8h+var_A0]
.text:00000000000053C3                 setz    r12b
.text:00000000000053C7                 mov     edx, r12d
.text:00000000000053CA                 xor     edx, ecx
.text:00000000000053CC                 test    eax, eax
.text:00000000000053CE                 setnz   al
.text:00000000000053D1
.text:00000000000053D1 loc_53D1:                               ; CODE XREF: sparse_copy+3B8↓j
.text:00000000000053D1                 test    r13, r13
.text:00000000000053D4                 setnz   r9b
.text:00000000000053D8                 and     r9d, edx
.text:00000000000053DB                 cmp     rbp, r15
.text:00000000000053DE                 ja      loc_5538
.text:00000000000053E4                 test    al, al
.text:00000000000053E6                 jz      loc_5538
.text:00000000000053EC                 test    r9b, r9b
.text:00000000000053EF                 jz      loc_549A
.text:00000000000053F5                 mov     r15d, 1
.text:00000000000053FB
.text:00000000000053FB loc_53FB:                               ; CODE XREF: sparse_copy+330↓j
.text:00000000000053FB                 test    cl, cl
.text:00000000000053FD                 mov     [rsp+0A8h+var_8A], cl
.text:0000000000005401                 jnz     loc_54B2
.text:0000000000005407
.text:0000000000005407 loc_5407:                               ; CODE XREF: sparse_copy+29C↓j
.text:0000000000005407                 mov     edi, [rsp+0A8h+var_90] ; fd
.text:000000000000540B                 mov     rdx, r13        ; n
.text:000000000000540E                 mov     rsi, r11        ; buf
.text:0000000000005411                 mov     byte ptr [rsp+0A8h+var_A0], r9b
.text:0000000000005416                 call    full_write
.text:000000000000541B                 cmp     r13, rax
.text:000000000000541E                 movzx   r9d, byte ptr [rsp+0A8h+var_A0]
.text:0000000000005424                 movzx   ecx, [rsp+0A8h+var_8A]
.text:0000000000005429                 jnz     loc_55CD
.text:000000000000542F
.text:000000000000542F loc_542F:                               ; CODE XREF: sparse_copy+2C5↓j
.text:000000000000542F                 test    r15d, r15d
.text:0000000000005432                 mov     r13, rbx
.text:0000000000005435                 jz      loc_5548
.text:000000000000543B                 test    rbx, rbx
.text:000000000000543E                 jnz     loc_5560
.text:0000000000005444
.text:0000000000005444 loc_5444:                               ; CODE XREF: sparse_copy+30F↓j
.text:0000000000005444                 mov     rdi, [rsp+0A8h+var_78]
.text:0000000000005449                 sub     [rsp+0A8h+var_80], rdi
.text:000000000000544E                 mov     r15d, r12d
.text:0000000000005451                 mov     rax, [rsp+0A8h+var_48]
.text:0000000000005456                 mov     [rax], r12b
.text:0000000000005459                 jnz     loc_52A6
.text:000000000000545F
.text:000000000000545F loc_545F:                               ; CODE XREF: sparse_copy:loc_5330↑j
.text:000000000000545F                 test    r15b, r15b
.text:0000000000005462                 jz      loc_5613
.text:0000000000005468                 movzx   edx, byte ptr [rsp+0A8h+var_3C]
.text:000000000000546D                 mov     rsi, [rsp+0A8h+var_98]
.text:0000000000005472                 mov     rcx, r13
.text:0000000000005475                 mov     edi, [rsp+0A8h+var_90]
.text:0000000000005479                 add     rsp, 78h
.text:000000000000547D                 pop     rbx
.text:000000000000547E                 pop     rbp
.text:000000000000547F                 pop     r12
.text:0000000000005481                 pop     r13
.text:0000000000005483                 pop     r14
.text:0000000000005485                 pop     r15
.text:0000000000005487                 jmp     create_hole
.text:0000000000005487 ; ---------------------------------------------------------------------------
.text:000000000000548C                 align 10h
.text:0000000000005490
.text:0000000000005490 loc_5490:                               ; CODE XREF: sparse_copy+16E↑j
.text:0000000000005490                 cmp     cl, 1
.text:0000000000005493                 jz      short loc_54E8
.text:0000000000005495                 cmp     rbp, r15
.text:0000000000005498                 ja      short loc_54E8
.text:000000000000549A
.text:000000000000549A loc_549A:                               ; CODE XREF: sparse_copy+1DF↑j
.text:000000000000549A                                         ; sparse_copy+2E0↓j
.text:000000000000549A                 add     r13, rbx
.text:000000000000549D                 xor     r9d, r9d
.text:00000000000054A0                 test    cl, cl
.text:00000000000054A2                 mov     r15d, 1
.text:00000000000054A8                 mov     [rsp+0A8h+var_8A], cl
.text:00000000000054AC                 jz      loc_5407
.text:00000000000054B2
.text:00000000000054B2 loc_54B2:                               ; CODE XREF: sparse_copy+1F1↑j
.text:00000000000054B2                 movzx   edx, [rsp+0A8h+var_89]
.text:00000000000054B7                 mov     rsi, [rsp+0A8h+var_98]
.text:00000000000054BC                 mov     rcx, r13
.text:00000000000054BF                 mov     edi, [rsp+0A8h+var_90]
.text:00000000000054C3                 mov     [rsp+0A8h+var_8A], r9b
.text:00000000000054C8                 call    create_hole
.text:00000000000054CD                 test    al, al
.text:00000000000054CF                 movzx   r9d, [rsp+0A8h+var_8A]
.text:00000000000054D5                 jnz     loc_542F
.text:00000000000054DB                 mov     r15d, eax
.text:00000000000054DE                 jmp     loc_5315
.text:00000000000054DE ; ---------------------------------------------------------------------------
.text:00000000000054E3                 align 8
.text:00000000000054E8
.text:00000000000054E8 loc_54E8:                               ; CODE XREF: sparse_copy+283↑j
.text:00000000000054E8                                         ; sparse_copy+288↑j
.text:00000000000054E8                 test    rbx, rbx
.text:00000000000054EB                 jnz     short loc_54F8
.text:00000000000054ED                 mov     r12d, ecx
.text:00000000000054F0                 jmp     short loc_549A
.text:00000000000054F2 ; ---------------------------------------------------------------------------
.text:00000000000054F2
.text:00000000000054F2 loc_54F2:                               ; CODE XREF: sparse_copy+32B↓j
.text:00000000000054F2                 mov     ecx, r12d
.text:00000000000054F5                 nop     dword ptr [rax]
.text:00000000000054F8
.text:00000000000054F8 loc_54F8:                               ; CODE XREF: sparse_copy+2DB↑j
.text:00000000000054F8                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000005502                 sub     rax, rbx
.text:0000000000005505                 cmp     rax, r13
.text:0000000000005508                 jb      short loc_5580
.text:000000000000550A                 add     r13, rbx
.text:000000000000550D                 add     r14, rbx
.text:0000000000005510                 mov     r15, rbx
.text:0000000000005513
.text:0000000000005513 loc_5513:                               ; CODE XREF: sparse_copy+344↓j
.text:0000000000005513                                         ; sparse_copy+35C↓j ...
.text:0000000000005513                 sub     rbp, r15
.text:0000000000005516                 jnz     loc_5368
.text:000000000000551C                 mov     r12d, ecx
.text:000000000000551F                 jmp     loc_5444
.text:000000000000551F ; ---------------------------------------------------------------------------
.text:0000000000005524                 align 8
.text:0000000000005528
.text:0000000000005528 loc_5528:                               ; CODE XREF: sparse_copy+18B↑j
.text:0000000000005528                 mov     r9d, ecx
.text:000000000000552B                 xor     r9d, 1
.text:000000000000552F                 test    r13, r13
.text:0000000000005532                 setnz   al
.text:0000000000005535                 and     r9d, eax
.text:0000000000005538
.text:0000000000005538 loc_5538:                               ; CODE XREF: sparse_copy+1CE↑j
.text:0000000000005538                                         ; sparse_copy+1D6↑j
.text:0000000000005538                 test    r9b, r9b
.text:000000000000553B                 jz      short loc_54F2
.text:000000000000553D                 xor     r15d, r15d
.text:0000000000005540                 jmp     loc_53FB
.text:0000000000005540 ; ---------------------------------------------------------------------------
.text:0000000000005545                 align 8
.text:0000000000005548
.text:0000000000005548 loc_5548:                               ; CODE XREF: sparse_copy+225↑j
.text:0000000000005548                 mov     r11, r14
.text:000000000000554B                 mov     ecx, r12d
.text:000000000000554E                 add     r14, rbx
.text:0000000000005551                 mov     r15, rbx
.text:0000000000005554                 jmp     short loc_5513
.text:0000000000005554 ; ---------------------------------------------------------------------------
.text:0000000000005556                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: sparse_copy+22E↑j
.text:0000000000005560                 xor     r15d, r15d
.text:0000000000005563                 test    r9b, r9b
.text:0000000000005566                 mov     ecx, r12d
.text:0000000000005569                 mov     r11, r14
.text:000000000000556C                 jnz     short loc_5513
.text:000000000000556E                 add     r14, rbx
.text:0000000000005571                 mov     r15, rbx
.text:0000000000005574                 xor     r13d, r13d
.text:0000000000005577                 jmp     short loc_5513
.text:0000000000005577 ; ---------------------------------------------------------------------------
.text:0000000000005579                 align 20h
.text:0000000000005580
.text:0000000000005580 loc_5580:                               ; CODE XREF: sparse_copy+2F8↑j
.text:0000000000005580                 mov     rsi, [rsp+0A8h+var_50]
.text:0000000000005585                 mov     edi, 4
.text:000000000000558A                 xor     r15d, r15d
.text:000000000000558D                 call    quotearg_style
.text:0000000000005592                 lea     rsi, aOverflowReadin ; "overflow reading %s"
.text:0000000000005599                 mov     rbx, rax
.text:000000000000559C                 mov     edx, 5          ; category
.text:00000000000055A1                 xor     edi, edi        ; domainname
.text:00000000000055A3                 call    _dcgettext
.text:00000000000055A8                 mov     rcx, rbx
.text:00000000000055AB                 mov     rdx, rax        ; format
.text:00000000000055AE                 xor     esi, esi        ; errnum
.text:00000000000055B0                 xor     edi, edi        ; status
.text:00000000000055B2                 xor     eax, eax
.text:00000000000055B4                 call    _error
.text:00000000000055B9                 jmp     loc_5315
.text:00000000000055B9 ; ---------------------------------------------------------------------------
.text:00000000000055BE                 align 20h
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: sparse_copy+17D↑j
.text:00000000000055C0                 mov     eax, r12d
.text:00000000000055C3                 mov     edx, ecx
.text:00000000000055C5                 xor     r12d, r12d
.text:00000000000055C8                 jmp     loc_53D1
.text:00000000000055CD ; ---------------------------------------------------------------------------
.text:00000000000055CD
.text:00000000000055CD loc_55CD:                               ; CODE XREF: sparse_copy+219↑j
.text:00000000000055CD                 mov     rsi, [rsp+0A8h+var_98]
.text:00000000000055D2                 mov     edi, 4
.text:00000000000055D7                 mov     r15d, ecx
.text:00000000000055DA                 call    quotearg_style
.text:00000000000055DF                 lea     rsi, aErrorWritingS ; "error writing %s"
.text:00000000000055E6                 xor     edi, edi        ; domainname
.text:00000000000055E8                 mov     edx, 5          ; category
.text:00000000000055ED                 mov     rbp, rax
.text:00000000000055F0                 call    _dcgettext
.text:00000000000055F5                 mov     rbx, rax
.text:00000000000055F8                 call    ___errno_location
.text:00000000000055FD                 mov     esi, [rax]      ; errnum
.text:00000000000055FF                 mov     rcx, rbp
.text:0000000000005602                 mov     rdx, rbx        ; format
.text:0000000000005605                 xor     edi, edi        ; status
.text:0000000000005607                 xor     eax, eax
.text:0000000000005609                 call    _error
.text:000000000000560E                 jmp     loc_5315
.text:0000000000005613 ; ---------------------------------------------------------------------------
.text:0000000000005613
.text:0000000000005613 loc_5613:                               ; CODE XREF: sparse_copy+62↑j
.text:0000000000005613                                         ; sparse_copy+252↑j
.text:0000000000005613                 mov     r15d, 1
.text:0000000000005619                 jmp     loc_5315
.text:0000000000005619 ; } // starts at 5210
.text:0000000000005619 sparse_copy     endp
.text:0000000000005619
.text:0000000000005619 ; ---------------------------------------------------------------------------
.text:000000000000561E                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620                 public set_process_security_ctx
.text:0000000000005620 set_process_security_ctx proc near      ; CODE XREF: make_dir_parents_private+153↑p
.text:0000000000005620                                         ; make_dir_parents_private+2A8↑p ...
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 push    r13
.text:0000000000005622                 push    r12
.text:0000000000005624                 push    rbp
.text:0000000000005625                 push    rbx
.text:0000000000005626                 mov     rbp, r8
.text:0000000000005629                 sub     rsp, 8
.text:000000000000562D                 cmp     byte ptr [r8+25h], 0
.text:0000000000005632                 jz      short loc_56A0
.text:0000000000005634                 mov     r13, rdi
.text:0000000000005637                 call    ___errno_location
.text:000000000000563C                 cmp     byte ptr [rbp+23h], 0
.text:0000000000005640                 mov     r12, rax
.text:0000000000005643                 jnz     short loc_56C0
.text:0000000000005645
.text:0000000000005645 loc_5645:                               ; CODE XREF: set_process_security_ctx+A6↓j
.text:0000000000005645                 mov     rsi, r13
.text:0000000000005648                 mov     edi, 4
.text:000000000000564D                 mov     dword ptr [r12], 5Fh ; '_'
.text:0000000000005655                 call    quotearg_style
.text:000000000000565A                 lea     rsi, aFailedToGetSec ; "failed to get security context of %s"
.text:0000000000005661                 mov     edx, 5          ; category
.text:0000000000005666                 xor     edi, edi        ; domainname
.text:0000000000005668                 mov     rbx, rax
.text:000000000000566B                 call    _dcgettext
.text:0000000000005670                 mov     esi, [r12]      ; errnum
.text:0000000000005674                 mov     rcx, rbx
.text:0000000000005677                 mov     rdx, rax        ; format
.text:000000000000567A                 xor     edi, edi        ; status
.text:000000000000567C                 xor     eax, eax
.text:000000000000567E                 call    _error
.text:0000000000005683                 movzx   ebx, byte ptr [rbp+26h]
.text:0000000000005687
.text:0000000000005687 loc_5687:                               ; CODE XREF: set_process_security_ctx+B2↓j
.text:0000000000005687                 add     rsp, 8
.text:000000000000568B                 xor     ebx, 1
.text:000000000000568E                 mov     eax, ebx
.text:0000000000005690                 pop     rbx
.text:0000000000005691                 pop     rbp
.text:0000000000005692                 pop     r12
.text:0000000000005694                 pop     r13
.text:0000000000005696                 retn
.text:0000000000005696 ; ---------------------------------------------------------------------------
.text:0000000000005697                 align 20h
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: set_process_security_ctx+12↑j
.text:00000000000056A0                 mov     ebx, ecx
.text:00000000000056A2                 and     bl, [r8+21h]
.text:00000000000056A6                 jnz     short loc_56D8
.text:00000000000056A8                 add     rsp, 8
.text:00000000000056AC                 mov     ebx, 1
.text:00000000000056B1                 mov     eax, ebx
.text:00000000000056B3                 pop     rbx
.text:00000000000056B4                 pop     rbp
.text:00000000000056B5                 pop     r12
.text:00000000000056B7                 pop     r13
.text:00000000000056B9                 retn
.text:00000000000056B9 ; ---------------------------------------------------------------------------
.text:00000000000056BA                 align 20h
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: set_process_security_ctx+23↑j
.text:00000000000056C0                 movzx   ebx, byte ptr [rbp+26h]
.text:00000000000056C4                 test    bl, bl
.text:00000000000056C6                 jnz     loc_5645
.text:00000000000056CC                 mov     dword ptr [rax], 5Fh ; '_'
.text:00000000000056D2                 jmp     short loc_5687
.text:00000000000056D2 ; ---------------------------------------------------------------------------
.text:00000000000056D4                 align 8
.text:00000000000056D8
.text:00000000000056D8 loc_56D8:                               ; CODE XREF: set_process_security_ctx+86↑j
.text:00000000000056D8                 call    ___errno_location
.text:00000000000056DD                 mov     dword ptr [rax], 5Fh ; '_'
.text:00000000000056E3                 add     rsp, 8
.text:00000000000056E7                 mov     eax, ebx
.text:00000000000056E9                 pop     rbx
.text:00000000000056EA                 pop     rbp
.text:00000000000056EB                 pop     r12
.text:00000000000056ED                 pop     r13
.text:00000000000056EF                 retn
.text:00000000000056EF ; } // starts at 5620
.text:00000000000056EF set_process_security_ctx endp
.text:00000000000056EF
.text:00000000000056F0
.text:00000000000056F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056F0
.text:00000000000056F0
.text:00000000000056F0                 public set_file_security_ctx
.text:00000000000056F0 set_file_security_ctx proc near         ; CODE XREF: make_dir_parents_private+44D↑p
.text:00000000000056F0                                         ; copy_internal+1381↓p ...
.text:00000000000056F0 ; __unwind {
.text:00000000000056F0                 push    r12
.text:00000000000056F2                 push    rbp
.text:00000000000056F3                 mov     rbp, rcx
.text:00000000000056F6                 push    rbx
.text:00000000000056F7                 mov     r12, rdi
.text:00000000000056FA                 call    ___errno_location
.text:00000000000056FF                 cmp     byte ptr [rbp+23h], 0
.text:0000000000005703                 mov     rbx, rax
.text:0000000000005706                 jz      short loc_570E
.text:0000000000005708                 cmp     byte ptr [rbp+26h], 0
.text:000000000000570C                 jz      short loc_5758
.text:000000000000570E
.text:000000000000570E loc_570E:                               ; CODE XREF: set_file_security_ctx+16↑j
.text:000000000000570E                 mov     rdx, r12
.text:0000000000005711                 mov     dword ptr [rbx], 5Fh ; '_'
.text:0000000000005717                 mov     esi, 4
.text:000000000000571C                 xor     edi, edi
.text:000000000000571E                 call    quotearg_n_style
.text:0000000000005723                 lea     rsi, aFailedToSetThe ; "failed to set the security context of %"...
.text:000000000000572A                 mov     edx, 5          ; category
.text:000000000000572F                 xor     edi, edi        ; domainname
.text:0000000000005731                 mov     rbp, rax
.text:0000000000005734                 call    _dcgettext
.text:0000000000005739                 mov     esi, [rbx]      ; errnum
.text:000000000000573B                 mov     rcx, rbp
.text:000000000000573E                 mov     rdx, rax        ; format
.text:0000000000005741                 xor     edi, edi        ; status
.text:0000000000005743                 xor     eax, eax
.text:0000000000005745                 call    _error
.text:000000000000574A                 pop     rbx
.text:000000000000574B                 xor     eax, eax
.text:000000000000574D                 pop     rbp
.text:000000000000574E                 pop     r12
.text:0000000000005750                 retn
.text:0000000000005750 ; ---------------------------------------------------------------------------
.text:0000000000005751                 align 8
.text:0000000000005758
.text:0000000000005758 loc_5758:                               ; CODE XREF: set_file_security_ctx+1C↑j
.text:0000000000005758                 mov     dword ptr [rax], 5Fh ; '_'
.text:000000000000575E                 xor     eax, eax
.text:0000000000005760                 pop     rbx
.text:0000000000005761                 pop     rbp
.text:0000000000005762                 pop     r12
.text:0000000000005764                 retn
.text:0000000000005764 ; } // starts at 56F0
.text:0000000000005764 set_file_security_ctx endp
.text:0000000000005764
.text:0000000000005764 ; ---------------------------------------------------------------------------
.text:0000000000005765                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770
.text:0000000000005770                 public dest_info_init
.text:0000000000005770 dest_info_init  proc near               ; CODE XREF: do_copy+3AC↑p
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 lea     r8, triple_free
.text:0000000000005777                 lea     rcx, triple_compare
.text:000000000000577E                 xor     esi, esi
.text:0000000000005780                 lea     rdx, triple_hash
.text:0000000000005787                 push    rbx
.text:0000000000005788                 mov     rbx, rdi
.text:000000000000578B                 mov     edi, 3Dh ; '='
.text:0000000000005790                 call    hash_initialize
.text:0000000000005795                 mov     [rbx+40h], rax
.text:0000000000005799                 pop     rbx
.text:000000000000579A                 retn
.text:000000000000579A ; } // starts at 5770
.text:000000000000579A dest_info_init  endp
.text:000000000000579A
.text:000000000000579A ; ---------------------------------------------------------------------------
.text:000000000000579B                 align 20h
.text:00000000000057A0
.text:00000000000057A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057A0
.text:00000000000057A0
.text:00000000000057A0                 public src_info_init
.text:00000000000057A0 src_info_init   proc near               ; CODE XREF: do_copy+3B4↑p
.text:00000000000057A0 ; __unwind {
.text:00000000000057A0                 lea     r8, triple_free
.text:00000000000057A7                 lea     rcx, triple_compare
.text:00000000000057AE                 xor     esi, esi
.text:00000000000057B0                 lea     rdx, triple_hash_no_name
.text:00000000000057B7                 push    rbx
.text:00000000000057B8                 mov     rbx, rdi
.text:00000000000057BB                 mov     edi, 3Dh ; '='
.text:00000000000057C0                 call    hash_initialize
.text:00000000000057C5                 mov     [rbx+48h], rax
.text:00000000000057C9                 pop     rbx
.text:00000000000057CA                 retn
.text:00000000000057CA ; } // starts at 57A0
.text:00000000000057CA src_info_init   endp
.text:00000000000057CA
.text:00000000000057CA ; ---------------------------------------------------------------------------
.text:00000000000057CB                 align 10h
.text:00000000000057D0
.text:00000000000057D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057D0
.text:00000000000057D0
.text:00000000000057D0                 public cp_options_default
.text:00000000000057D0 cp_options_default proc near            ; CODE XREF: main+91↑p
.text:00000000000057D0 ; __unwind {
.text:00000000000057D0                 pxor    xmm0, xmm0
.text:00000000000057D4                 push    rbx
.text:00000000000057D5                 mov     rbx, rdi
.text:00000000000057D8                 movups  xmmword ptr [rdi], xmm0
.text:00000000000057DB                 movups  xmmword ptr [rdi+10h], xmm0
.text:00000000000057DF                 movups  xmmword ptr [rdi+20h], xmm0
.text:00000000000057E3                 movups  xmmword ptr [rdi+30h], xmm0
.text:00000000000057E7                 movups  xmmword ptr [rdi+40h], xmm0
.text:00000000000057EB                 call    _geteuid
.text:00000000000057F0                 test    eax, eax
.text:00000000000057F2                 mov     dword ptr [rbx+34h], 0FFFFFFFFh
.text:00000000000057F9                 setz    al
.text:00000000000057FC                 mov     [rbx+1Bh], al
.text:00000000000057FF                 mov     [rbx+1Ah], al
.text:0000000000005802                 pop     rbx
.text:0000000000005803                 retn
.text:0000000000005803 ; } // starts at 57D0
.text:0000000000005803 cp_options_default endp
.text:0000000000005803
.text:0000000000005803 ; ---------------------------------------------------------------------------
.text:0000000000005804                 align 10h
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810
.text:0000000000005810                 public chown_failure_ok
.text:0000000000005810 chown_failure_ok proc near              ; CODE XREF: re_protect+159↑p
.text:0000000000005810                                         ; set_owner+8D↓p ...
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 push    rbx
.text:0000000000005811                 mov     rbx, rdi
.text:0000000000005814                 call    ___errno_location
.text:0000000000005819                 mov     edx, [rax]
.text:000000000000581B                 cmp     edx, 1
.text:000000000000581E                 setz    al
.text:0000000000005821                 cmp     edx, 16h
.text:0000000000005824                 setz    dl
.text:0000000000005827                 or      al, dl
.text:0000000000005829                 jz      short loc_5832
.text:000000000000582B                 movzx   eax, byte ptr [rbx+1Ah]
.text:000000000000582F                 xor     eax, 1
.text:0000000000005832
.text:0000000000005832 loc_5832:                               ; CODE XREF: chown_failure_ok+19↑j
.text:0000000000005832                 pop     rbx
.text:0000000000005833                 retn
.text:0000000000005833 ; } // starts at 5810
.text:0000000000005833 chown_failure_ok endp
.text:0000000000005833
.text:0000000000005833 ; ---------------------------------------------------------------------------
.text:0000000000005834                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840
.text:0000000000005840 set_owner       proc near               ; CODE XREF: copy_internal+723↓p
.text:0000000000005840                                         ; copy_internal+3608↓p
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 push    r15
.text:0000000000005842                 push    r14
.text:0000000000005844                 push    r13
.text:0000000000005846                 push    r12
.text:0000000000005848                 mov     r13, rsi
.text:000000000000584B                 push    rbp
.text:000000000000584C                 push    rbx
.text:000000000000584D                 mov     rbp, rdi
.text:0000000000005850                 mov     ebx, edx
.text:0000000000005852                 sub     rsp, 8
.text:0000000000005856                 test    r8b, r8b
.text:0000000000005859                 mov     r14d, [rcx+1Ch]
.text:000000000000585D                 mov     r12d, [rcx+20h]
.text:0000000000005861                 jnz     short loc_5895
.text:0000000000005863                 mov     rax, 0FF0000000000FFh
.text:000000000000586D                 test    [rdi+18h], rax
.text:0000000000005871                 jz      loc_5910
.text:0000000000005877                 mov     esi, [r9+18h]
.text:000000000000587B                 mov     edx, [rcx+18h]
.text:000000000000587E
.text:000000000000587E loc_587E:                               ; CODE XREF: set_owner+E1↓j
.text:000000000000587E                 mov     eax, edx
.text:0000000000005880                 mov     ecx, esi
.text:0000000000005882                 not     eax
.text:0000000000005884                 and     ecx, 0FFFh
.text:000000000000588A                 or      ah, 0Eh
.text:000000000000588D                 test    eax, ecx
.text:000000000000588F                 jnz     loc_5960
.text:0000000000005895
.text:0000000000005895 loc_5895:                               ; CODE XREF: set_owner+21↑j
.text:0000000000005895                                         ; set_owner+D4↓j ...
.text:0000000000005895                 cmp     ebx, 0FFFFFFFFh
.text:0000000000005898                 mov     edx, r12d       ; group
.text:000000000000589B                 mov     esi, r14d       ; owner
.text:000000000000589E                 jz      short loc_58F0
.text:00000000000058A0                 mov     edi, ebx        ; fd
.text:00000000000058A2                 call    _fchown
.text:00000000000058A7                 test    eax, eax
.text:00000000000058A9                 jz      short loc_58FC
.text:00000000000058AB                 call    ___errno_location
.text:00000000000058B0                 mov     r14d, [rax]
.text:00000000000058B3                 mov     r15, rax
.text:00000000000058B6                 cmp     r14d, 1
.text:00000000000058BA                 jz      loc_5A28
.text:00000000000058C0                 cmp     r14d, 16h
.text:00000000000058C4                 jz      loc_5A28
.text:00000000000058CA
.text:00000000000058CA loc_58CA:                               ; CODE XREF: set_owner+102↓j
.text:00000000000058CA                                         ; set_owner+11B↓j ...
.text:00000000000058CA                 mov     rdi, rbp
.text:00000000000058CD                 call    chown_failure_ok
.text:00000000000058D2                 mov     edx, eax
.text:00000000000058D4                 xor     eax, eax
.text:00000000000058D6                 test    dl, dl
.text:00000000000058D8                 jz      loc_59D0
.text:00000000000058DE                 add     rsp, 8
.text:00000000000058E2                 pop     rbx
.text:00000000000058E3                 pop     rbp
.text:00000000000058E4                 pop     r12
.text:00000000000058E6                 pop     r13
.text:00000000000058E8                 pop     r14
.text:00000000000058EA                 pop     r15
.text:00000000000058EC                 retn
.text:00000000000058EC ; ---------------------------------------------------------------------------
.text:00000000000058ED                 align 10h
.text:00000000000058F0
.text:00000000000058F0 loc_58F0:                               ; CODE XREF: set_owner+5E↑j
.text:00000000000058F0                 mov     rdi, r13        ; file
.text:00000000000058F3                 call    _lchown
.text:00000000000058F8                 test    eax, eax
.text:00000000000058FA                 jnz     short loc_5930
.text:00000000000058FC
.text:00000000000058FC loc_58FC:                               ; CODE XREF: set_owner+69↑j
.text:00000000000058FC                 add     rsp, 8
.text:0000000000005900                 mov     eax, 1
.text:0000000000005905                 pop     rbx
.text:0000000000005906                 pop     rbp
.text:0000000000005907                 pop     r12
.text:0000000000005909                 pop     r13
.text:000000000000590B                 pop     r14
.text:000000000000590D                 pop     r15
.text:000000000000590F                 retn
.text:0000000000005910 ; ---------------------------------------------------------------------------
.text:0000000000005910
.text:0000000000005910 loc_5910:                               ; CODE XREF: set_owner+31↑j
.text:0000000000005910                 cmp     byte ptr [rdi+2Bh], 0
.text:0000000000005914                 jz      loc_5895
.text:000000000000591A                 mov     esi, [r9+18h]
.text:000000000000591E                 mov     edx, [rdi+10h]
.text:0000000000005921                 jmp     loc_587E
.text:0000000000005921 ; ---------------------------------------------------------------------------
.text:0000000000005926                 align 10h
.text:0000000000005930
.text:0000000000005930 loc_5930:                               ; CODE XREF: set_owner+BA↑j
.text:0000000000005930                 call    ___errno_location
.text:0000000000005935                 mov     ebx, [rax]
.text:0000000000005937                 mov     r14, rax
.text:000000000000593A                 cmp     ebx, 1
.text:000000000000593D                 jz      short loc_5948
.text:000000000000593F                 cmp     ebx, 16h
.text:0000000000005942                 jnz     loc_58CA
.text:0000000000005948
.text:0000000000005948 loc_5948:                               ; CODE XREF: set_owner+FD↑j
.text:0000000000005948                 mov     edx, r12d       ; group
.text:000000000000594B                 mov     esi, 0FFFFFFFFh ; owner
.text:0000000000005950                 mov     rdi, r13        ; file
.text:0000000000005953                 call    _lchown
.text:0000000000005958                 mov     [r14], ebx
.text:000000000000595B                 jmp     loc_58CA
.text:0000000000005960 ; ---------------------------------------------------------------------------
.text:0000000000005960
.text:0000000000005960 loc_5960:                               ; CODE XREF: set_owner+4F↑j
.text:0000000000005960                 and     edx, esi
.text:0000000000005962                 mov     rdi, r13
.text:0000000000005965                 mov     esi, ebx
.text:0000000000005967                 and     edx, 1C0h
.text:000000000000596D                 call    qset_acl
.text:0000000000005972                 test    eax, eax
.text:0000000000005974                 jz      loc_5895
.text:000000000000597A                 call    ___errno_location
.text:000000000000597F                 mov     rbx, rax
.text:0000000000005982                 mov     eax, [rax]
.text:0000000000005984                 cmp     eax, 1
.text:0000000000005987                 jz      loc_5A40
.text:000000000000598D                 cmp     eax, 16h
.text:0000000000005990                 jz      loc_5A40
.text:0000000000005996
.text:0000000000005996 loc_5996:                               ; CODE XREF: set_owner+204↓j
.text:0000000000005996                 mov     rsi, r13
.text:0000000000005999                 mov     edi, 4
.text:000000000000599E                 call    quotearg_style
.text:00000000000059A3                 lea     rsi, aClearingPermis ; "clearing permissions for %s"
.text:00000000000059AA                 xor     edi, edi        ; domainname
.text:00000000000059AC                 mov     edx, 5          ; category
.text:00000000000059B1                 mov     r12, rax
.text:00000000000059B4                 call    _dcgettext
.text:00000000000059B9                 mov     esi, [rbx]      ; errnum
.text:00000000000059BB                 mov     rdx, rax        ; format
.text:00000000000059BE                 mov     rcx, r12
.text:00000000000059C1                 xor     edi, edi        ; status
.text:00000000000059C3                 xor     eax, eax
.text:00000000000059C5                 call    _error
.text:00000000000059CA                 jmp     short loc_5A0C
.text:00000000000059CA ; ---------------------------------------------------------------------------
.text:00000000000059CC                 align 10h
.text:00000000000059D0
.text:00000000000059D0 loc_59D0:                               ; CODE XREF: set_owner+98↑j
.text:00000000000059D0                 mov     rsi, r13
.text:00000000000059D3                 mov     edi, 4
.text:00000000000059D8                 call    quotearg_style
.text:00000000000059DD                 lea     rsi, aFailedToPreser_1 ; "failed to preserve ownership for %s"
.text:00000000000059E4                 mov     edx, 5          ; category
.text:00000000000059E9                 xor     edi, edi        ; domainname
.text:00000000000059EB                 mov     r12, rax
.text:00000000000059EE                 call    _dcgettext
.text:00000000000059F3                 mov     rbx, rax
.text:00000000000059F6                 call    ___errno_location
.text:00000000000059FB                 mov     esi, [rax]      ; errnum
.text:00000000000059FD                 mov     rcx, r12
.text:0000000000005A00                 mov     rdx, rbx        ; format
.text:0000000000005A03                 xor     edi, edi        ; status
.text:0000000000005A05                 xor     eax, eax
.text:0000000000005A07                 call    _error
.text:0000000000005A0C
.text:0000000000005A0C loc_5A0C:                               ; CODE XREF: set_owner+18A↑j
.text:0000000000005A0C                                         ; set_owner+20A↓j
.text:0000000000005A0C                 movzx   eax, byte ptr [rbp+24h]
.text:0000000000005A10                 add     rsp, 8
.text:0000000000005A14                 pop     rbx
.text:0000000000005A15                 pop     rbp
.text:0000000000005A16                 pop     r12
.text:0000000000005A18                 neg     eax
.text:0000000000005A1A                 pop     r13
.text:0000000000005A1C                 pop     r14
.text:0000000000005A1E                 pop     r15
.text:0000000000005A20                 retn
.text:0000000000005A20 ; ---------------------------------------------------------------------------
.text:0000000000005A21                 align 8
.text:0000000000005A28
.text:0000000000005A28 loc_5A28:                               ; CODE XREF: set_owner+7A↑j
.text:0000000000005A28                                         ; set_owner+84↑j
.text:0000000000005A28                 mov     edx, r12d       ; group
.text:0000000000005A2B                 mov     esi, 0FFFFFFFFh ; owner
.text:0000000000005A30                 mov     edi, ebx        ; fd
.text:0000000000005A32                 call    _fchown
.text:0000000000005A37                 mov     [r15], r14d
.text:0000000000005A3A                 jmp     loc_58CA
.text:0000000000005A3A ; ---------------------------------------------------------------------------
.text:0000000000005A3F                 align 20h
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: set_owner+147↑j
.text:0000000000005A40                                         ; set_owner+150↑j
.text:0000000000005A40                 cmp     byte ptr [rbp+1Bh], 0
.text:0000000000005A44                 jnz     loc_5996
.text:0000000000005A4A                 jmp     short loc_5A0C
.text:0000000000005A4A ; } // starts at 5840
.text:0000000000005A4A set_owner       endp
.text:0000000000005A4A
.text:0000000000005A4A ; ---------------------------------------------------------------------------
.text:0000000000005A4C                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50
.text:0000000000005A50                 public cached_umask
.text:0000000000005A50 cached_umask    proc near               ; CODE XREF: make_dir_parents_private:loc_3F00↑p
.text:0000000000005A50                                         ; copy_internal:loc_8841↓p ...
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 push    rbx
.text:0000000000005A51                 mov     ebx, cs:mask_7898
.text:0000000000005A57                 cmp     ebx, 0FFFFFFFFh
.text:0000000000005A5A                 jz      short loc_5A60
.text:0000000000005A5C                 mov     eax, ebx
.text:0000000000005A5E                 pop     rbx
.text:0000000000005A5F                 retn
.text:0000000000005A60 ; ---------------------------------------------------------------------------
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: cached_umask+A↑j
.text:0000000000005A60                 xor     edi, edi        ; mask
.text:0000000000005A62                 call    _umask
.text:0000000000005A67                 mov     ebx, eax
.text:0000000000005A69                 mov     edi, eax        ; mask
.text:0000000000005A6B                 mov     cs:mask_7898, eax
.text:0000000000005A71                 call    _umask
.text:0000000000005A76                 mov     eax, ebx
.text:0000000000005A78                 pop     rbx
.text:0000000000005A79                 retn
.text:0000000000005A79 ; } // starts at 5A50
.text:0000000000005A79 cached_umask    endp
.text:0000000000005A79
.text:0000000000005A79 ; ---------------------------------------------------------------------------
.text:0000000000005A7A                 align 20h
.text:0000000000005A80
.text:0000000000005A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A80
.text:0000000000005A80 ; Attributes: bp-based frame
.text:0000000000005A80
.text:0000000000005A80 copy_internal   proc near               ; CODE XREF: copy_internal+1EDD↓p
.text:0000000000005A80                                         ; copy+80↓p
.text:0000000000005A80
.text:0000000000005A80 var_3E1         = byte ptr -3E1h
.text:0000000000005A80 var_3C0         = qword ptr -3C0h
.text:0000000000005A80 var_3B1         = byte ptr -3B1h
.text:0000000000005A80 var_3B0         = qword ptr -3B0h
.text:0000000000005A80 var_3A5         = byte ptr -3A5h
.text:0000000000005A80 var_3A4         = dword ptr -3A4h
.text:0000000000005A80 var_3A0         = qword ptr -3A0h
.text:0000000000005A80 var_398         = qword ptr -398h
.text:0000000000005A80 var_390         = dword ptr -390h
.text:0000000000005A80 var_38C         = dword ptr -38Ch
.text:0000000000005A80 var_388         = qword ptr -388h
.text:0000000000005A80 length          = qword ptr -380h
.text:0000000000005A80 var_378         = qword ptr -378h
.text:0000000000005A80 var_370         = qword ptr -370h
.text:0000000000005A80 s               = qword ptr -368h
.text:0000000000005A80 var_360         = dword ptr -360h
.text:0000000000005A80 var_35C         = dword ptr -35Ch
.text:0000000000005A80 s2              = qword ptr -358h
.text:0000000000005A80 old             = qword ptr -350h
.text:0000000000005A80 var_348         = qword ptr -348h
.text:0000000000005A80 var_340         = qword ptr -340h
.text:0000000000005A80 format          = qword ptr -338h
.text:0000000000005A80 ptr             = qword ptr -330h
.text:0000000000005A80 fd              = dword ptr -328h
.text:0000000000005A80 fildes          = dword ptr -320h
.text:0000000000005A80 var_315         = byte ptr -315h
.text:0000000000005A80 var_314         = dword ptr -314h
.text:0000000000005A80 filename        = qword ptr -310h
.text:0000000000005A80 file            = qword ptr -308h
.text:0000000000005A80 var_2F9         = byte ptr -2F9h
.text:0000000000005A80 var_2F8         = qword ptr -2F8h
.text:0000000000005A80 dev             = qword ptr -2F0h
.text:0000000000005A80 var_2E0         = xmmword ptr -2E0h
.text:0000000000005A80 var_2D0         = qword ptr -2D0h
.text:0000000000005A80 var_2C0         = xmmword ptr -2C0h
.text:0000000000005A80 var_2B0         = xmmword ptr -2B0h
.text:0000000000005A80 var_2A0         = qword ptr -2A0h
.text:0000000000005A80 var_298         = qword ptr -298h
.text:0000000000005A80 var_290         = qword ptr -290h
.text:0000000000005A80 var_288         = qword ptr -288h
.text:0000000000005A80 stat_buf        = stat ptr -280h
.text:0000000000005A80 var_1F0         = stat ptr -1F0h
.text:0000000000005A80 var_160         = stat ptr -160h
.text:0000000000005A80 var_D0          = stat ptr -0D0h
.text:0000000000005A80 var_38          = qword ptr -38h
.text:0000000000005A80 arg_0           = dword ptr  10h
.text:0000000000005A80 arg_8           = qword ptr  18h
.text:0000000000005A80 arg_10          = qword ptr  20h
.text:0000000000005A80 arg_18          = qword ptr  28h
.text:0000000000005A80
.text:0000000000005A80 ; __unwind {
.text:0000000000005A80                 push    rbp
.text:0000000000005A81                 mov     rbp, rsp
.text:0000000000005A84                 push    r15
.text:0000000000005A86                 push    r14
.text:0000000000005A88                 push    r13
.text:0000000000005A8A                 push    r12
.text:0000000000005A8C                 mov     r14d, edx
.text:0000000000005A8F                 push    rbx
.text:0000000000005A90                 mov     rbx, r9
.text:0000000000005A93                 sub     rsp, 398h
.text:0000000000005A9A                 mov     rax, [rbp+arg_8]
.text:0000000000005A9E                 mov     r13d, [rbp+arg_0]
.text:0000000000005AA2                 mov     [rbp+var_348], rcx
.text:0000000000005AA9                 mov     rcx, [rbp+arg_18]
.text:0000000000005AAD                 mov     [rbp+filename], rdi
.text:0000000000005AB4                 mov     [rbp+file], rsi
.text:0000000000005ABB                 mov     [rbp+format], rax
.text:0000000000005AC2                 mov     rax, [rbp+arg_10]
.text:0000000000005AC6                 mov     qword ptr [rbp+fildes], rcx
.text:0000000000005ACD                 mov     [rbp+ptr], r8
.text:0000000000005AD4                 mov     rcx, fs:28h
.text:0000000000005ADD                 mov     [rbp+var_38], rcx
.text:0000000000005AE1                 xor     ecx, ecx
.text:0000000000005AE3                 mov     byte ptr [rax], 0
.text:0000000000005AE6                 movzx   r12d, byte ptr [r9+18h]
.text:0000000000005AEB                 mov     [rbp+var_340], rax
.text:0000000000005AF2                 mov     [rbp+var_315], r13b
.text:0000000000005AF9                 mov     r15d, [r9+34h]
.text:0000000000005AFD                 test    r12b, r12b
.text:0000000000005B00                 jz      short loc_5B21
.text:0000000000005B02                 test    r15d, r15d
.text:0000000000005B05                 js      loc_5DA0
.text:0000000000005B0B
.text:0000000000005B0B loc_5B0B:                               ; CODE XREF: copy_internal+EB8↓j
.text:0000000000005B0B                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005B12                 test    r15d, r15d
.text:0000000000005B15                 setz    r14b
.text:0000000000005B19                 test    rax, rax
.text:0000000000005B1C                 jz      short loc_5B21
.text:0000000000005B1E                 mov     [rax], r14b
.text:0000000000005B21
.text:0000000000005B21 loc_5B21:                               ; CODE XREF: copy_internal+80↑j
.text:0000000000005B21                                         ; copy_internal+9C↑j
.text:0000000000005B21                 test    r15d, r15d
.text:0000000000005B24                 jz      loc_5DD8
.text:0000000000005B2A                 cmp     r15d, 11h
.text:0000000000005B2E                 mov     r12, [rbp+filename]
.text:0000000000005B35                 jz      loc_6338
.text:0000000000005B3B
.text:0000000000005B3B loc_5B3B:                               ; CODE XREF: copy_internal+368↓j
.text:0000000000005B3B                                         ; copy_internal+8C2↓j
.text:0000000000005B3B                 cmp     dword ptr [rbx+4], 2
.text:0000000000005B3F                 lea     r10, [rbp+stat_buf]
.text:0000000000005B46                 mov     rsi, r12        ; filename
.text:0000000000005B49                 mov     edi, 1          ; ver
.text:0000000000005B4E                 mov     rdx, r10        ; stat_buf
.text:0000000000005B51                 jz      loc_6350
.text:0000000000005B57                 call    ___xstat
.text:0000000000005B5C                 test    eax, eax
.text:0000000000005B5E                 mov     rsi, r12
.text:0000000000005B61                 setnz   al
.text:0000000000005B64                 test    al, al
.text:0000000000005B66                 jnz     loc_6365
.text:0000000000005B6C
.text:0000000000005B6C loc_5B6C:                               ; CODE XREF: copy_internal+8DF↓j
.text:0000000000005B6C                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000005B72                 mov     [rbp+var_314], eax
.text:0000000000005B78                 and     eax, 0F000h
.text:0000000000005B7D                 cmp     eax, 4000h
.text:0000000000005B82                 jz      loc_6648
.text:0000000000005B88
.text:0000000000005B88 loc_5B88:                               ; CODE XREF: copy_internal+373↓j
.text:0000000000005B88                                         ; copy_internal+8BC↓j ...
.text:0000000000005B88                 test    r13b, r13b
.text:0000000000005B8B                 jz      short loc_5BCA
.text:0000000000005B8D                 mov     rdi, [rbx+48h]
.text:0000000000005B91                 test    rdi, rdi
.text:0000000000005B94                 jz      short loc_5BCA
.text:0000000000005B96                 mov     eax, [rbp+var_314]
.text:0000000000005B9C                 lea     r10, [rbp+stat_buf]
.text:0000000000005BA3                 and     eax, 0F000h
.text:0000000000005BA8                 cmp     eax, 4000h
.text:0000000000005BAD                 jz      short loc_5BBB
.text:0000000000005BAF                 mov     r11d, [rbx]
.text:0000000000005BB2                 test    r11d, r11d
.text:0000000000005BB5                 jz      loc_64C8
.text:0000000000005BBB
.text:0000000000005BBB loc_5BBB:                               ; CODE XREF: copy_internal+12D↑j
.text:0000000000005BBB                                         ; copy_internal+A74↓j
.text:0000000000005BBB                 mov     rsi, [rbp+filename]
.text:0000000000005BC2                 mov     rdx, r10
.text:0000000000005BC5                 call    record_file
.text:0000000000005BCA
.text:0000000000005BCA loc_5BCA:                               ; CODE XREF: copy_internal+10B↑j
.text:0000000000005BCA                                         ; copy_internal+114↑j
.text:0000000000005BCA                 mov     eax, [rbx+4]
.text:0000000000005BCD                 mov     [rbp+fd], 1
.text:0000000000005BD7                 cmp     eax, 4
.text:0000000000005BDA                 jz      short loc_5BEE
.text:0000000000005BDC                 cmp     eax, 3
.text:0000000000005BDF                 setz    al
.text:0000000000005BE2                 movzx   eax, al
.text:0000000000005BE5                 and     eax, r13d
.text:0000000000005BE8                 mov     [rbp+fd], eax
.text:0000000000005BEE
.text:0000000000005BEE loc_5BEE:                               ; CODE XREF: copy_internal+15A↑j
.text:0000000000005BEE                 test    r14b, r14b
.text:0000000000005BF1                 jnz     loc_5E00
.text:0000000000005BF7                 cmp     r15d, 11h
.text:0000000000005BFB                 jz      loc_6560
.text:0000000000005C01
.text:0000000000005C01 loc_5C01:                               ; CODE XREF: copy_internal+AE4↓j
.text:0000000000005C01                 mov     eax, [rbp+var_314]
.text:0000000000005C07                 and     eax, 0F000h
.text:0000000000005C0C                 cmp     eax, 8000h
.text:0000000000005C11                 jz      loc_6500
.text:0000000000005C17                 cmp     eax, 0A000h
.text:0000000000005C1C                 mov     r8d, 100h       ; flag
.text:0000000000005C22                 setz    r9b
.text:0000000000005C26                 cmp     eax, 4000h
.text:0000000000005C2B                 setz    al
.text:0000000000005C2E                 or      r9d, eax
.text:0000000000005C31                 movzx   eax, byte ptr [rbx+14h]
.text:0000000000005C35                 xor     eax, 1
.text:0000000000005C38                 or      r9b, al
.text:0000000000005C3B                 jz      loc_6500
.text:0000000000005C41
.text:0000000000005C41 loc_5C41:                               ; CODE XREF: copy_internal+A8E↓j
.text:0000000000005C41                                         ; copy_internal+A9C↓j ...
.text:0000000000005C41                 lea     r12, [rbp+var_1F0]
.text:0000000000005C48                 mov     rdx, [rbp+file] ; filename
.text:0000000000005C4F                 mov     esi, 0FFFFFF9Ch ; fildes
.text:0000000000005C54                 mov     edi, 1          ; ver
.text:0000000000005C59                 mov     byte ptr [rbp+old], r9b
.text:0000000000005C60                 mov     rcx, r12        ; stat_buf
.text:0000000000005C63                 call    ___fxstatat
.text:0000000000005C68                 test    eax, eax
.text:0000000000005C6A                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000005C72                 jnz     loc_62F0
.text:0000000000005C78                 xor     r8d, r8d
.text:0000000000005C7B
.text:0000000000005C7B loc_5C7B:                               ; CODE XREF: copy_internal+899↓j
.text:0000000000005C7B                 cmp     dword ptr [rbx+8], 2
.text:0000000000005C7F                 jz      short loc_5C9F
.text:0000000000005C81                 mov     rax, [rbp+var_1F0.st_ino]
.text:0000000000005C88                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000005C8F                 jz      loc_6E58
.text:0000000000005C95
.text:0000000000005C95 loc_5C95:                               ; CODE XREF: copy_internal+13E6↓j
.text:0000000000005C95                 cmp     dword ptr [rbx+4], 2
.text:0000000000005C99                 jz      loc_7010
.text:0000000000005C9F
.text:0000000000005C9F loc_5C9F:                               ; CODE XREF: copy_internal+1FF↑j
.text:0000000000005C9F                                         ; copy_internal+AF0↓j ...
.text:0000000000005C9F                 cmp     byte ptr [rbx+2Dh], 0
.text:0000000000005CA3                 jz      loc_66A0
.text:0000000000005CA9                 mov     eax, [rbp+var_314]
.text:0000000000005CAF                 and     eax, 0F000h
.text:0000000000005CB4                 cmp     eax, 4000h
.text:0000000000005CB9                 jz      loc_70E0
.text:0000000000005CBF                 xor     ecx, ecx
.text:0000000000005CC1                 cmp     byte ptr [rbx+1Fh], 0
.text:0000000000005CC5                 jz      short loc_5CE5
.text:0000000000005CC7                 cmp     byte ptr [rbx+18h], 0
.text:0000000000005CCB                 mov     ecx, 1
.text:0000000000005CD0                 jz      short loc_5CE5
.text:0000000000005CD2                 xor     ecx, ecx
.text:0000000000005CD4                 mov     rax, [rbp+stat_buf.st_dev]
.text:0000000000005CDB                 cmp     [rbp+var_1F0.st_dev], rax
.text:0000000000005CE2                 setnz   cl
.text:0000000000005CE5
.text:0000000000005CE5 loc_5CE5:                               ; CODE XREF: copy_internal+245↑j
.text:0000000000005CE5                                         ; copy_internal+250↑j
.text:0000000000005CE5                 lea     r10, [rbp+stat_buf]
.text:0000000000005CEC                 mov     rdi, [rbp+file]
.text:0000000000005CF3                 lea     rsi, [rbp+var_1F0]
.text:0000000000005CFA                 mov     byte ptr [rbp+s2], r9b
.text:0000000000005D01                 mov     byte ptr [rbp+old], r8b
.text:0000000000005D08                 mov     rdx, r10
.text:0000000000005D0B                 call    utimecmp
.text:0000000000005D10                 test    eax, eax
.text:0000000000005D12                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000005D1A                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000005D22                 js      loc_6C70
.text:0000000000005D28                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005D2F                 test    rax, rax
.text:0000000000005D32                 jz      short loc_5D37
.text:0000000000005D34                 mov     byte ptr [rax], 1
.text:0000000000005D37
.text:0000000000005D37 loc_5D37:                               ; CODE XREF: copy_internal+2B2↑j
.text:0000000000005D37                 mov     rdx, [rbp+stat_buf.st_dev]
.text:0000000000005D3E                 mov     rsi, [rbp+stat_buf.st_ino]
.text:0000000000005D45                 mov     rdi, [rbp+file] ; src
.text:0000000000005D4C                 call    remember_copied
.text:0000000000005D51                 test    rax, rax
.text:0000000000005D54                 jz      loc_62C0
.text:0000000000005D5A                 movzx   ecx, byte ptr [rbx+2Eh]
.text:0000000000005D5E                 mov     r8d, [rbp+fd]
.text:0000000000005D65                 mov     edx, 1
.text:0000000000005D6A                 mov     rsi, [rbp+file]
.text:0000000000005D71                 mov     rdi, rax
.text:0000000000005D74                 call    create_hard_link
.text:0000000000005D79                 test    al, al
.text:0000000000005D7B                 jnz     loc_62C0
.text:0000000000005D81                 cmp     byte ptr [rbx+25h], 0
.text:0000000000005D85                 jnz     loc_6B90
.text:0000000000005D8B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: copy_internal+522↓j
.text:0000000000005D90                                         ; copy_internal+6CE↓j ...
.text:0000000000005D90                 xor     r12d, r12d
.text:0000000000005D93                 jmp     loc_62C6
.text:0000000000005D93 ; ---------------------------------------------------------------------------
.text:0000000000005D98                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: copy_internal+85↑j
.text:0000000000005DA0                 mov     edx, 0FFFFFF9Ch
.text:0000000000005DA5                 mov     rcx, rsi
.text:0000000000005DA8                 mov     r8d, 1
.text:0000000000005DAE                 mov     rsi, rdi
.text:0000000000005DB1                 mov     edi, edx
.text:0000000000005DB3                 call    renameat2
.text:0000000000005DB8                 test    eax, eax
.text:0000000000005DBA                 jnz     loc_6930
.text:0000000000005DC0                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005DC7                 mov     r14d, r12d
.text:0000000000005DCA                 test    rax, rax
.text:0000000000005DCD                 jz      short loc_5DD8
.text:0000000000005DCF                 mov     byte ptr [rax], 1
.text:0000000000005DD2                 nop     word ptr [rax+rax+00h]
.text:0000000000005DD8
.text:0000000000005DD8 loc_5DD8:                               ; CODE XREF: copy_internal+A4↑j
.text:0000000000005DD8                                         ; copy_internal+34D↑j
.text:0000000000005DD8                 cmp     byte ptr [rbx+31h], 0
.text:0000000000005DDC                 jnz     short loc_5DF0
.text:0000000000005DDE                 mov     r12, [rbp+file]
.text:0000000000005DE5                 xor     r15d, r15d
.text:0000000000005DE8                 jmp     loc_5B3B
.text:0000000000005DE8 ; ---------------------------------------------------------------------------
.text:0000000000005DED                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: copy_internal+35C↑j
.text:0000000000005DF0                 xor     r15d, r15d
.text:0000000000005DF3                 jmp     loc_5B88
.text:0000000000005DF3 ; ---------------------------------------------------------------------------
.text:0000000000005DF8                 align 20h
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: copy_internal+171↑j
.text:0000000000005E00                 xor     r9d, r9d
.text:0000000000005E03                 mov     [rbp+old], 0
.text:0000000000005E0E
.text:0000000000005E0E loc_5E0E:                               ; CODE XREF: copy_internal+8AD↓j
.text:0000000000005E0E                                         ; copy_internal+E49↓j ...
.text:0000000000005E0E                 test    r13b, r13b
.text:0000000000005E11                 jz      loc_5ED0
.text:0000000000005E17                 cmp     qword ptr [rbx+40h], 0
.text:0000000000005E1C                 jz      loc_5ED0
.text:0000000000005E22
.text:0000000000005E22 loc_5E22:                               ; CODE XREF: copy_internal+2D41↓j
.text:0000000000005E22                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000005E27                 test    r12b, r12b
.text:0000000000005E2A                 jnz     loc_5ED0
.text:0000000000005E30                 mov     edx, [rbx]
.text:0000000000005E32                 test    edx, edx
.text:0000000000005E34                 jnz     loc_6AB8
.text:0000000000005E3A                 test    r9b, r9b
.text:0000000000005E3D                 lea     rdx, [rbp+var_1F0]
.text:0000000000005E44                 jz      loc_76C0
.text:0000000000005E4A
.text:0000000000005E4A loc_5E4A:                               ; CODE XREF: copy_internal+1C74↓j
.text:0000000000005E4A                 mov     eax, [rdx+18h]
.text:0000000000005E4D                 and     eax, 0F000h
.text:0000000000005E52                 cmp     eax, 0A000h
.text:0000000000005E57                 jnz     short loc_5ED0
.text:0000000000005E59                 mov     rdi, [rbx+40h]
.text:0000000000005E5D                 mov     rsi, [rbp+file]
.text:0000000000005E64                 call    seen_file
.text:0000000000005E69                 test    al, al
.text:0000000000005E6B                 jz      short loc_5ED0
.text:0000000000005E6D                 mov     rdx, [rbp+file]
.text:0000000000005E74                 mov     esi, 4
.text:0000000000005E79                 mov     edi, 1
.text:0000000000005E7E                 call    quotearg_n_style
.text:0000000000005E83                 mov     rdx, [rbp+filename]
.text:0000000000005E8A                 xor     edi, edi
.text:0000000000005E8C                 mov     esi, 4
.text:0000000000005E91                 mov     r13, rax
.text:0000000000005E94                 call    quotearg_n_style
.text:0000000000005E99                 lea     rsi, aWillNotCopySTh ; "will not copy %s through just-created s"...
.text:0000000000005EA0                 mov     rbx, rax
.text:0000000000005EA3                 xor     edi, edi        ; domainname
.text:0000000000005EA5                 mov     edx, 5          ; category
.text:0000000000005EAA                 call    _dcgettext
.text:0000000000005EAF                 mov     r8, r13
.text:0000000000005EB2                 mov     rdx, rax        ; format
.text:0000000000005EB5                 mov     rcx, rbx
.text:0000000000005EB8                 xor     esi, esi        ; errnum
.text:0000000000005EBA                 xor     edi, edi        ; status
.text:0000000000005EBC                 xor     eax, eax
.text:0000000000005EBE                 call    _error
.text:0000000000005EC3                 jmp     loc_62C6
.text:0000000000005EC3 ; ---------------------------------------------------------------------------
.text:0000000000005EC8                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 loc_5ED0:                               ; CODE XREF: copy_internal+391↑j
.text:0000000000005ED0                                         ; copy_internal+39C↑j ...
.text:0000000000005ED0                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000005ED4                 jz      short loc_5EE0
.text:0000000000005ED6                 cmp     byte ptr [rbx+18h], 0
.text:0000000000005EDA                 jz      loc_6490
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: copy_internal+454↑j
.text:0000000000005EE0                                         ; copy_internal+A20↓j ...
.text:0000000000005EE0                 test    r15d, r15d
.text:0000000000005EE3                 jz      loc_6280
.text:0000000000005EE9
.text:0000000000005EE9 loc_5EE9:                               ; CODE XREF: copy_internal+104B↓j
.text:0000000000005EE9                                         ; copy_internal+27A1↓j ...
.text:0000000000005EE9                 cmp     byte ptr [rbx+2Ah], 0
.text:0000000000005EED                 jz      short loc_5F05
.text:0000000000005EEF                 mov     eax, [rbp+var_314]
.text:0000000000005EF5                 and     eax, 0F000h
.text:0000000000005EFA                 cmp     eax, 4000h
.text:0000000000005EFF                 jz      loc_6AD0
.text:0000000000005F05
.text:0000000000005F05 loc_5F05:                               ; CODE XREF: copy_internal+46D↑j
.text:0000000000005F05                 movzx   eax, byte ptr [rbx+18h]
.text:0000000000005F09                 test    al, al
.text:0000000000005F0B                 jnz     loc_63B0
.text:0000000000005F11                 cmp     byte ptr [rbx+22h], 0
.text:0000000000005F15                 jnz     loc_7AF0
.text:0000000000005F1B
.text:0000000000005F1B loc_5F1B:                               ; CODE XREF: copy_internal+804↓j
.text:0000000000005F1B                                         ; copy_internal+1045↓j
.text:0000000000005F1B                 movzx   eax, r14b
.text:0000000000005F1F                 mov     [rbp+s2], 0
.text:0000000000005F2A                 mov     [rbp+fildes], eax
.text:0000000000005F30
.text:0000000000005F30 loc_5F30:                               ; CODE XREF: copy_internal+A01↓j
.text:0000000000005F30                                         ; copy_internal+115D↓j ...
.text:0000000000005F30                 mov     r12d, [rbp+var_314]
.text:0000000000005F37                 and     r12d, 0FFFh
.text:0000000000005F3E                 cmp     byte ptr [rbx+2Bh], 0
.text:0000000000005F42                 jz      short loc_5F4F
.text:0000000000005F44                 mov     r12d, [rbx+10h]
.text:0000000000005F48                 and     r12d, 0FFFh
.text:0000000000005F4F
.text:0000000000005F4F loc_5F4F:                               ; CODE XREF: copy_internal+4C2↑j
.text:0000000000005F4F                 cmp     byte ptr [rbx+1Dh], 0
.text:0000000000005F53                 jnz     loc_6578
.text:0000000000005F59                 mov     r15d, [rbp+var_314]
.text:0000000000005F60                 and     r15d, 0F000h
.text:0000000000005F67                 cmp     r15d, 4000h
.text:0000000000005F6E                 jz      loc_6DB0
.text:0000000000005F74                 mov     ecx, [rbp+fildes]
.text:0000000000005F7A                 mov     edx, [rbp+var_314]
.text:0000000000005F80                 mov     r8, rbx
.text:0000000000005F83                 mov     rsi, [rbp+file]
.text:0000000000005F8A                 mov     rdi, [rbp+filename]
.text:0000000000005F91                 call    set_process_security_ctx
.text:0000000000005F96                 test    al, al
.text:0000000000005F98                 mov     [rbp+var_35C], 0
.text:0000000000005FA2                 jz      loc_5D90
.text:0000000000005FA8
.text:0000000000005FA8 loc_5FA8:                               ; CODE XREF: copy_internal+B43↓j
.text:0000000000005FA8                 movzx   eax, byte ptr [rbx+2Ch]
.text:0000000000005FAC                 test    al, al
.text:0000000000005FAE                 mov     byte ptr [rbp+fildes], al
.text:0000000000005FB4                 jnz     loc_6940
.text:0000000000005FBA                 cmp     byte ptr [rbx+17h], 0
.text:0000000000005FBE                 jz      loc_7308
.text:0000000000005FC4                 cmp     byte ptr [rbx+16h], 0
.text:0000000000005FC8                 mov     edx, 1
.text:0000000000005FCD                 jnz     short loc_5FD8
.text:0000000000005FCF                 xor     edx, edx
.text:0000000000005FD1                 cmp     dword ptr [rbx+8], 3
.text:0000000000005FD5                 setz    dl
.text:0000000000005FD8
.text:0000000000005FD8 loc_5FD8:                               ; CODE XREF: copy_internal+54D↑j
.text:0000000000005FD8                 mov     r8d, [rbp+fd]
.text:0000000000005FDF                 mov     rsi, [rbp+file]
.text:0000000000005FE6                 xor     ecx, ecx
.text:0000000000005FE8                 mov     rdi, [rbp+filename]
.text:0000000000005FEF                 call    create_hard_link
.text:0000000000005FF4                 test    al, al
.text:0000000000005FF6                 jz      loc_6A10
.text:0000000000005FFC                 xor     r8d, r8d
.text:0000000000005FFF
.text:0000000000005FFF loc_5FFF:                               ; CODE XREF: copy_internal+F2E↓j
.text:0000000000005FFF                                         ; copy_internal+219F↓j ...
.text:0000000000005FFF                 cmp     r15d, 4000h
.text:0000000000006006                 setnz   r15b
.text:000000000000600A                 test    r14b, r14b
.text:000000000000600D                 jnz     short loc_6022
.text:000000000000600F                 movzx   eax, byte ptr [rbx+14h]
.text:0000000000006013                 xor     eax, 1
.text:0000000000006016                 and     al, r15b
.text:0000000000006019                 mov     r12d, eax
.text:000000000000601C                 jnz     loc_7D50
.text:0000000000006022
.text:0000000000006022 loc_6022:                               ; CODE XREF: copy_internal+58D↑j
.text:0000000000006022                                         ; copy_internal+22E1↓j ...
.text:0000000000006022                 test    r13b, r13b
.text:0000000000006025                 mov     r12d, 1
.text:000000000000602B                 jz      short loc_6082
.text:000000000000602D                 mov     byte ptr [rbp+ptr], 0
.text:0000000000006034
.text:0000000000006034 loc_6034:                               ; CODE XREF: copy_internal+2536↓j
.text:0000000000006034                 cmp     qword ptr [rbx+40h], 0
.text:0000000000006039                 jz      short loc_606D
.text:000000000000603B                 lea     r12, [rbp+var_D0]
.text:0000000000006042                 mov     rsi, [rbp+file] ; filename
.text:0000000000006049                 mov     edi, 1          ; ver
.text:000000000000604E                 mov     byte ptr [rbp+fd], r8b
.text:0000000000006055                 mov     rdx, r12        ; stat_buf
.text:0000000000006058                 call    ___lxstat
.text:000000000000605D                 test    eax, eax
.text:000000000000605F                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000006067                 jz      loc_80B2
.text:000000000000606D
.text:000000000000606D loc_606D:                               ; CODE XREF: copy_internal+5B9↑j
.text:000000000000606D                                         ; copy_internal+264D↓j
.text:000000000000606D                 movzx   eax, byte ptr [rbp+ptr]
.text:0000000000006074                 movzx   r12d, [rbp+var_315]
.text:000000000000607C                 mov     [rbp+var_315], al
.text:0000000000006082
.text:0000000000006082 loc_6082:                               ; CODE XREF: copy_internal+5AB↑j
.text:0000000000006082                 cmp     byte ptr [rbx+17h], 0
.text:0000000000006086                 jz      short loc_6091
.text:0000000000006088                 test    r15b, r15b
.text:000000000000608B                 jnz     loc_62C6
.text:0000000000006091
.text:0000000000006091 loc_6091:                               ; CODE XREF: copy_internal+606↑j
.text:0000000000006091                 test    r8b, r8b
.text:0000000000006094                 jnz     loc_62C6
.text:000000000000609A
.text:000000000000609A loc_609A:                               ; CODE XREF: copy_internal+1F60↓j
.text:000000000000609A                 cmp     byte ptr [rbx+1Fh], 0
.text:000000000000609E                 jz      loc_6158
.text:00000000000060A4                 mov     rax, [rbp+stat_buf.st_atim.tv_sec]
.text:00000000000060AB                 cmp     byte ptr [rbp+fildes], 0
.text:00000000000060B2                 lea     rsi, [rbp+var_D0]
.text:00000000000060B9                 mov     rdi, [rbp+file] ; path
.text:00000000000060C0                 mov     [rbp+var_D0.st_dev], rax
.text:00000000000060C7                 mov     rax, [rbp+stat_buf.st_atim.tv_nsec]
.text:00000000000060CE                 mov     [rbp+var_D0.st_ino], rax
.text:00000000000060D5                 mov     rax, [rbp+stat_buf.st_mtim.tv_sec]
.text:00000000000060DC                 mov     [rbp+var_D0.st_nlink], rax
.text:00000000000060E3                 mov     rax, [rbp+stat_buf.st_mtim.tv_nsec]
.text:00000000000060EA                 mov     qword ptr [rbp+var_D0.st_mode], rax
.text:00000000000060F1                 jz      loc_80A0
.text:00000000000060F7                 call    lutimens
.text:00000000000060FC                 test    eax, eax
.text:00000000000060FE                 jz      short loc_6158
.text:0000000000006100                 call    ___errno_location
.text:0000000000006105                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000006108                 jz      short loc_6158
.text:000000000000610A
.text:000000000000610A loc_610A:                               ; CODE XREF: copy_internal+262D↓j
.text:000000000000610A                 mov     rsi, [rbp+file]
.text:0000000000006111                 mov     edi, 4
.text:0000000000006116                 call    quotearg_style
.text:000000000000611B                 lea     rsi, aPreservingTime ; "preserving times for %s"
.text:0000000000006122                 xor     edi, edi        ; domainname
.text:0000000000006124                 mov     edx, 5          ; category
.text:0000000000006129                 mov     r13, rax
.text:000000000000612C                 call    _dcgettext
.text:0000000000006131                 mov     r15, rax
.text:0000000000006134                 call    ___errno_location
.text:0000000000006139                 mov     esi, [rax]      ; errnum
.text:000000000000613B                 xor     edi, edi        ; status
.text:000000000000613D                 xor     eax, eax
.text:000000000000613F                 mov     rcx, r13
.text:0000000000006142                 mov     rdx, r15        ; format
.text:0000000000006145                 call    _error
.text:000000000000614A                 cmp     byte ptr [rbx+24h], 0
.text:000000000000614E                 jnz     loc_5D90
.text:0000000000006154                 nop     dword ptr [rax+00h]
.text:0000000000006158
.text:0000000000006158 loc_6158:                               ; CODE XREF: copy_internal+61E↑j
.text:0000000000006158                                         ; copy_internal+67E↑j ...
.text:0000000000006158                 cmp     byte ptr [rbp+fildes], 0
.text:000000000000615F                 jnz     loc_62C6
.text:0000000000006165
.text:0000000000006165 loc_6165:                               ; CODE XREF: copy_internal+2627↓j
.text:0000000000006165                 cmp     byte ptr [rbx+1Dh], 0
.text:0000000000006169                 jz      short loc_61C7
.text:000000000000616B                 test    r14b, r14b
.text:000000000000616E                 jnz     short loc_6182
.text:0000000000006170                 mov     eax, [rbp+var_1F0.st_uid]
.text:0000000000006176                 cmp     [rbp+stat_buf.st_uid], eax
.text:000000000000617C                 jz      loc_882A
.text:0000000000006182
.text:0000000000006182 loc_6182:                               ; CODE XREF: copy_internal+6EE↑j
.text:0000000000006182                                         ; copy_internal+2DB6↓j
.text:0000000000006182                 mov     rsi, [rbp+file]
.text:0000000000006189                 lea     rcx, [rbp+stat_buf]
.text:0000000000006190                 lea     r9, [rbp+var_1F0]
.text:0000000000006197                 movzx   r8d, r14b
.text:000000000000619B                 mov     edx, 0FFFFFFFFh
.text:00000000000061A0                 mov     rdi, rbx
.text:00000000000061A3                 call    set_owner
.text:00000000000061A8                 cmp     eax, 0FFFFFFFFh
.text:00000000000061AB                 jz      loc_5D90
.text:00000000000061B1                 mov     ecx, [rbp+var_314]
.text:00000000000061B7                 mov     edx, ecx
.text:00000000000061B9                 and     dh, 0F1h
.text:00000000000061BC                 test    eax, eax
.text:00000000000061BE                 cmovnz  edx, ecx
.text:00000000000061C1                 mov     [rbp+var_314], edx
.text:00000000000061C7
.text:00000000000061C7 loc_61C7:                               ; CODE XREF: copy_internal+6E9↑j
.text:00000000000061C7                                         ; copy_internal+2DBC↓j
.text:00000000000061C7                 mov     rax, 0FF0000000000FFh
.text:00000000000061D1                 test    [rbx+18h], rax
.text:00000000000061D5                 jnz     loc_8270
.text:00000000000061DB                 cmp     byte ptr [rbx+2Bh], 0
.text:00000000000061DF                 jnz     loc_85D5
.text:00000000000061E5                 test    [rbx+20h], r14b
.text:00000000000061E9                 jnz     loc_8889
.text:00000000000061EF                 mov     eax, [rbp+var_35C]
.text:00000000000061F5                 test    eax, eax
.text:00000000000061F7                 jnz     loc_8841
.text:00000000000061FD
.text:00000000000061FD loc_61FD:                               ; CODE XREF: copy_internal+2DCE↓j
.text:00000000000061FD                 cmp     [rbp+var_315], 0
.text:0000000000006204                 jz      loc_62C6
.text:000000000000620A
.text:000000000000620A loc_620A:                               ; CODE XREF: copy_internal+2DDB↓j
.text:000000000000620A                                         ; copy_internal+2DFE↓j
.text:000000000000620A                 mov     esi, [rbp+var_38C]
.text:0000000000006210                 or      esi, [rbp+var_35C] ; mode
.text:0000000000006216                 mov     rdi, [rbp+file] ; file
.text:000000000000621D                 call    _chmod
.text:0000000000006222                 test    eax, eax
.text:0000000000006224                 jz      loc_62C6
.text:000000000000622A                 mov     rsi, [rbp+file]
.text:0000000000006231                 mov     edi, 4
.text:0000000000006236                 call    quotearg_style
.text:000000000000623B                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:0000000000006242                 mov     edx, 5          ; category
.text:0000000000006247                 xor     edi, edi        ; domainname
.text:0000000000006249                 mov     r14, rax
.text:000000000000624C                 call    _dcgettext
.text:0000000000006251                 mov     r13, rax
.text:0000000000006254                 call    ___errno_location
.text:0000000000006259                 mov     esi, [rax]      ; errnum
.text:000000000000625B                 mov     rcx, r14
.text:000000000000625E                 mov     rdx, r13        ; format
.text:0000000000006261                 xor     edi, edi        ; status
.text:0000000000006263                 xor     eax, eax
.text:0000000000006265                 call    _error
.text:000000000000626A
.text:000000000000626A loc_626A:                               ; CODE XREF: copy_internal+2813↓j
.text:000000000000626A                 cmp     byte ptr [rbx+24h], 0
.text:000000000000626E                 jnz     loc_5D90
.text:0000000000006274                 jmp     short loc_62C6
.text:0000000000006274 ; ---------------------------------------------------------------------------
.text:0000000000006276                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: copy_internal+463↑j
.text:0000000000006280                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006284                 jz      loc_5F1B
.text:000000000000628A
.text:000000000000628A loc_628A:                               ; CODE XREF: copy_internal+974↓j
.text:000000000000628A                                         ; copy_internal+985↓j
.text:000000000000628A                 cmp     byte ptr [rbx+2Eh], 0
.text:000000000000628E                 jnz     loc_6E10
.text:0000000000006294
.text:0000000000006294 loc_6294:                               ; CODE XREF: copy_internal+13CC↓j
.text:0000000000006294                 cmp     byte ptr [rbx+21h], 0
.text:0000000000006298                 jnz     loc_6DF0
.text:000000000000629E
.text:000000000000629E loc_629E:                               ; CODE XREF: copy_internal+1386↓j
.text:000000000000629E                 mov     rax, qword ptr [rbp+fildes]
.text:00000000000062A5                 test    rax, rax
.text:00000000000062A8                 jz      short loc_62AD
.text:00000000000062AA                 mov     byte ptr [rax], 1
.text:00000000000062AD
.text:00000000000062AD loc_62AD:                               ; CODE XREF: copy_internal+828↑j
.text:00000000000062AD                 test    r13b, r13b
.text:00000000000062B0                 jz      short loc_62C0
.text:00000000000062B2                 cmp     byte ptr [rbx+31h], 0
.text:00000000000062B6                 jz      loc_6D28
.text:00000000000062BC                 nop     dword ptr [rax+00h]
.text:00000000000062C0
.text:00000000000062C0 loc_62C0:                               ; CODE XREF: copy_internal+2D4↑j
.text:00000000000062C0                                         ; copy_internal+2FB↑j ...
.text:00000000000062C0                 mov     r12d, 1
.text:00000000000062C6
.text:00000000000062C6 loc_62C6:                               ; CODE XREF: copy_internal+313↑j
.text:00000000000062C6                                         ; copy_internal+443↑j ...
.text:00000000000062C6                 mov     rsi, [rbp+var_38]
.text:00000000000062CA                 xor     rsi, fs:28h
.text:00000000000062D3                 mov     eax, r12d
.text:00000000000062D6                 jnz     loc_8FA4
.text:00000000000062DC                 lea     rsp, [rbp-28h]
.text:00000000000062E0                 pop     rbx
.text:00000000000062E1                 pop     r12
.text:00000000000062E3                 pop     r13
.text:00000000000062E5                 pop     r14
.text:00000000000062E7                 pop     r15
.text:00000000000062E9                 pop     rbp
.text:00000000000062EA                 retn
.text:00000000000062EA ; ---------------------------------------------------------------------------
.text:00000000000062EB                 align 10h
.text:00000000000062F0
.text:00000000000062F0 loc_62F0:                               ; CODE XREF: copy_internal+1F2↑j
.text:00000000000062F0                 call    ___errno_location
.text:00000000000062F5                 mov     r9, rax
.text:00000000000062F8                 mov     eax, [rax]
.text:00000000000062FA                 cmp     eax, 28h ; '('
.text:00000000000062FD                 jz      loc_68D0
.text:0000000000006303                 cmp     eax, 2
.text:0000000000006306                 mov     r8d, 1
.text:000000000000630C                 jnz     loc_68DA
.text:0000000000006312
.text:0000000000006312 loc_6312:                               ; CODE XREF: copy_internal+11E3↓j
.text:0000000000006312                 xor     r9d, r9d
.text:0000000000006315                 cmp     r15d, 11h
.text:0000000000006319                 jz      loc_5C7B
.text:000000000000631F                 mov     r14d, r8d
.text:0000000000006322                 mov     [rbp+old], 0
.text:000000000000632D                 jmp     loc_5E0E
.text:000000000000632D ; ---------------------------------------------------------------------------
.text:0000000000006332                 align 8
.text:0000000000006338
.text:0000000000006338 loc_6338:                               ; CODE XREF: copy_internal+B5↑j
.text:0000000000006338                 cmp     dword ptr [rbx+8], 2
.text:000000000000633C                 jz      loc_5B88
.text:0000000000006342                 jmp     loc_5B3B
.text:0000000000006342 ; ---------------------------------------------------------------------------
.text:0000000000006347                 align 10h
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: copy_internal+D1↑j
.text:0000000000006350                 call    ___lxstat
.text:0000000000006355                 test    eax, eax
.text:0000000000006357                 mov     rsi, r12
.text:000000000000635A                 setnz   al
.text:000000000000635D                 test    al, al
.text:000000000000635F                 jz      loc_5B6C
.text:0000000000006365
.text:0000000000006365 loc_6365:                               ; CODE XREF: copy_internal+E6↑j
.text:0000000000006365                                         ; copy_internal+377E↓j
.text:0000000000006365                 mov     edi, 4
.text:000000000000636A                 call    quotearg_style
.text:000000000000636F                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000006376                 mov     r12, rax
.text:0000000000006379                 mov     edx, 5          ; category
.text:000000000000637E
.text:000000000000637E loc_637E:                               ; CODE XREF: copy_internal+1880↓j
.text:000000000000637E                 xor     edi, edi        ; domainname
.text:0000000000006380                 call    _dcgettext
.text:0000000000006385                 mov     rbx, rax
.text:0000000000006388                 call    ___errno_location
.text:000000000000638D                 mov     esi, [rax]      ; errnum
.text:000000000000638F                 mov     rcx, r12
.text:0000000000006392                 mov     rdx, rbx        ; format
.text:0000000000006395                 xor     edi, edi        ; status
.text:0000000000006397                 xor     eax, eax
.text:0000000000006399                 xor     r12d, r12d
.text:000000000000639C                 call    _error
.text:00000000000063A1                 jmp     loc_62C6
.text:00000000000063A1 ; ---------------------------------------------------------------------------
.text:00000000000063A6                 align 10h
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: copy_internal+48B↑j
.text:00000000000063B0                 cmp     [rbp+stat_buf.st_nlink], 1
.text:00000000000063B8                 jz      loc_73E8
.text:00000000000063BE                 cmp     byte ptr [rbx+22h], 0
.text:00000000000063C2                 mov     [rbp+s2], 0
.text:00000000000063CD                 jz      short loc_63D9
.text:00000000000063CF                 cmp     byte ptr [rbx+17h], 0
.text:00000000000063D3                 jz      loc_6B98
.text:00000000000063D9
.text:00000000000063D9 loc_63D9:                               ; CODE XREF: copy_internal+94D↑j
.text:00000000000063D9                                         ; copy_internal+114D↓j
.text:00000000000063D9                 cmp     r15d, 11h
.text:00000000000063DD                 jnz     short loc_640B
.text:00000000000063DF                 mov     rsi, [rbp+file] ; new
.text:00000000000063E6                 mov     rdi, [rbp+filename] ; old
.text:00000000000063ED                 call    _rename
.text:00000000000063F2                 test    eax, eax
.text:00000000000063F4                 jz      loc_628A
.text:00000000000063FA                 call    ___errno_location
.text:00000000000063FF                 mov     r15d, [rax]
.text:0000000000006402                 test    r15d, r15d
.text:0000000000006405                 jz      loc_628A
.text:000000000000640B
.text:000000000000640B loc_640B:                               ; CODE XREF: copy_internal+95D↑j
.text:000000000000640B                 cmp     r15d, 16h
.text:000000000000640F                 jz      loc_7430
.text:0000000000006415                 cmp     r15d, 12h
.text:0000000000006419                 jnz     loc_6BE8
.text:000000000000641F                 mov     r12d, [rbp+var_314]
.text:0000000000006426                 mov     rdi, [rbp+file] ; path
.text:000000000000642D                 and     r12d, 0F000h
.text:0000000000006434                 cmp     r12d, 4000h
.text:000000000000643B                 jz      loc_74A0
.text:0000000000006441                 call    _unlink
.text:0000000000006446                 test    eax, eax
.text:0000000000006448                 jz      short loc_645B
.text:000000000000644A                 call    ___errno_location
.text:000000000000644F                 cmp     dword ptr [rax], 2
.text:0000000000006452                 mov     r14, rax
.text:0000000000006455                 jnz     loc_74BE
.text:000000000000645B
.text:000000000000645B loc_645B:                               ; CODE XREF: copy_internal+9C8↑j
.text:000000000000645B                 cmp     r12d, 4000h
.text:0000000000006462                 setnz   dl
.text:0000000000006465                 and     dl, [rbx+2Eh]
.text:0000000000006468                 mov     r14d, edx
.text:000000000000646B                 jnz     loc_7DB0
.text:0000000000006471
.text:0000000000006471 loc_6471:                               ; CODE XREF: copy_internal+1A27↓j
.text:0000000000006471                                         ; copy_internal+1A38↓j
.text:0000000000006471                 mov     [rbp+fildes], 1
.text:000000000000647B                 mov     r14d, 1
.text:0000000000006481                 jmp     loc_5F30
.text:0000000000006481 ; ---------------------------------------------------------------------------
.text:0000000000006486                 align 10h
.text:0000000000006490
.text:0000000000006490 loc_6490:                               ; CODE XREF: copy_internal+45A↑j
.text:0000000000006490                                         ; copy_internal+103C↓j
.text:0000000000006490                 mov     eax, [rbp+var_314]
.text:0000000000006496                 and     eax, 0F000h
.text:000000000000649B                 cmp     eax, 4000h
.text:00000000000064A0                 jz      loc_5EE0
.text:00000000000064A6                 mov     rdx, [rbp+old]
.text:00000000000064AD                 mov     rsi, [rbp+file]
.text:00000000000064B4                 mov     rdi, [rbp+filename]
.text:00000000000064BB                 call    emit_verbose
.text:00000000000064C0                 jmp     loc_5EE0
.text:00000000000064C0 ; ---------------------------------------------------------------------------
.text:00000000000064C5                 align 8
.text:00000000000064C8
.text:00000000000064C8 loc_64C8:                               ; CODE XREF: copy_internal+135↑j
.text:00000000000064C8                 mov     rsi, [rbp+filename]
.text:00000000000064CF                 mov     rdx, r10
.text:00000000000064D2                 mov     qword ptr [rbp+fd], r10
.text:00000000000064D9                 call    seen_file
.text:00000000000064DE                 test    al, al
.text:00000000000064E0                 mov     r12d, eax
.text:00000000000064E3                 jnz     loc_73A8
.text:00000000000064E9                 mov     rdi, [rbx+48h]
.text:00000000000064ED                 mov     r10, qword ptr [rbp+fd]
.text:00000000000064F4                 jmp     loc_5BBB
.text:00000000000064F4 ; ---------------------------------------------------------------------------
.text:00000000000064F9                 align 20h
.text:0000000000006500
.text:0000000000006500 loc_6500:                               ; CODE XREF: copy_internal+191↑j
.text:0000000000006500                                         ; copy_internal+1BB↑j
.text:0000000000006500                 movzx   r9d, byte ptr [rbx+18h]
.text:0000000000006505                 mov     r8d, 100h
.text:000000000000650B                 test    r9b, r9b
.text:000000000000650E                 jnz     loc_5C41
.text:0000000000006514                 movzx   r9d, byte ptr [rbx+2Ch]
.text:0000000000006519                 test    r9b, r9b
.text:000000000000651C                 jnz     loc_5C41
.text:0000000000006522                 movzx   r9d, byte ptr [rbx+17h]
.text:0000000000006527                 test    r9b, r9b
.text:000000000000652A                 jnz     loc_5C41
.text:0000000000006530                 mov     r10d, [rbx]
.text:0000000000006533                 mov     r9d, 1
.text:0000000000006539                 test    r10d, r10d
.text:000000000000653C                 jnz     loc_5C41
.text:0000000000006542                 movzx   r9d, byte ptr [rbx+15h]
.text:0000000000006547                 xor     r8d, r8d
.text:000000000000654A                 test    r9b, r9b
.text:000000000000654D                 setnz   r8b
.text:0000000000006551                 shl     r8d, 8
.text:0000000000006555                 jmp     loc_5C41
.text:0000000000006555 ; ---------------------------------------------------------------------------
.text:000000000000655A                 align 20h
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: copy_internal+17B↑j
.text:0000000000006560                 cmp     dword ptr [rbx+8], 2
.text:0000000000006564                 jnz     loc_5C01
.text:000000000000656A                 xor     r8d, r8d
.text:000000000000656D                 xor     r9d, r9d
.text:0000000000006570                 jmp     loc_5C9F
.text:0000000000006570 ; ---------------------------------------------------------------------------
.text:0000000000006575                 align 8
.text:0000000000006578
.text:0000000000006578 loc_6578:                               ; CODE XREF: copy_internal+4D3↑j
.text:0000000000006578                 mov     ecx, [rbp+fildes]
.text:000000000000657E                 mov     edx, [rbp+var_314]
.text:0000000000006584                 mov     r8, rbx
.text:0000000000006587                 mov     rsi, [rbp+file]
.text:000000000000658E                 mov     rdi, [rbp+filename]
.text:0000000000006595                 call    set_process_security_ctx
.text:000000000000659A                 test    al, al
.text:000000000000659C                 jz      loc_5D90
.text:00000000000065A2                 mov     r15d, [rbp+var_314]
.text:00000000000065A9                 mov     eax, r12d
.text:00000000000065AC                 and     eax, 3Fh
.text:00000000000065AF                 mov     [rbp+var_35C], eax
.text:00000000000065B5                 and     r15d, 0F000h
.text:00000000000065BC                 cmp     r15d, 4000h
.text:00000000000065C3                 jnz     loc_5FA8
.text:00000000000065C9
.text:00000000000065C9 loc_65C9:                               ; CODE XREF: copy_internal+1366↓j
.text:00000000000065C9                 mov     rax, [rbp+ptr]
.text:00000000000065D0                 mov     rdx, [rbp+stat_buf.st_ino]
.text:00000000000065D7                 mov     rcx, [rbp+stat_buf.st_dev]
.text:00000000000065DE                 test    rax, rax
.text:00000000000065E1                 jnz     short loc_65FC
.text:00000000000065E3                 jmp     loc_6EE0
.text:00000000000065E3 ; ---------------------------------------------------------------------------
.text:00000000000065E8                 align 10h
.text:00000000000065F0
.text:00000000000065F0 loc_65F0:                               ; CODE XREF: copy_internal+B80↓j
.text:00000000000065F0                                         ; copy_internal+B86↓j
.text:00000000000065F0                 mov     rax, [rax]
.text:00000000000065F3                 test    rax, rax
.text:00000000000065F6                 jz      loc_6EE0
.text:00000000000065FC
.text:00000000000065FC loc_65FC:                               ; CODE XREF: copy_internal+B61↑j
.text:00000000000065FC                 cmp     [rax+8], rdx
.text:0000000000006600                 jnz     short loc_65F0
.text:0000000000006602                 cmp     [rax+10h], rcx
.text:0000000000006606                 jnz     short loc_65F0
.text:0000000000006608                 mov     rsi, [rbp+filename]
.text:000000000000660F                 mov     edi, 4
.text:0000000000006614                 call    quotearg_style
.text:0000000000006619                 lea     rsi, aCannotCopyCycl ; "cannot copy cyclic symbolic link %s"
.text:0000000000006620                 mov     r12, rax
.text:0000000000006623                 mov     edx, 5          ; category
.text:0000000000006628
.text:0000000000006628 loc_6628:                               ; CODE XREF: copy_internal+1902↓j
.text:0000000000006628                                         ; copy_internal+224E↓j
.text:0000000000006628                 xor     edi, edi        ; domainname
.text:000000000000662A                 call    _dcgettext
.text:000000000000662F                 mov     rcx, r12
.text:0000000000006632                 mov     rdx, rax        ; format
.text:0000000000006635                 xor     esi, esi        ; errnum
.text:0000000000006637                 xor     edi, edi        ; status
.text:0000000000006639                 xor     eax, eax
.text:000000000000663B                 call    _error
.text:0000000000006640                 jmp     loc_6A10
.text:0000000000006640 ; ---------------------------------------------------------------------------
.text:0000000000006645                 align 8
.text:0000000000006648
.text:0000000000006648 loc_6648:                               ; CODE XREF: copy_internal+102↑j
.text:0000000000006648                 movzx   r12d, byte ptr [rbx+2Ah]
.text:000000000000664D                 test    r12b, r12b
.text:0000000000006650                 jnz     loc_5B88
.text:0000000000006656                 mov     rsi, [rbp+filename]
.text:000000000000665D                 mov     edi, 4
.text:0000000000006662                 call    quotearg_style
.text:0000000000006667                 cmp     byte ptr [rbx+19h], 0
.text:000000000000666B                 mov     r13, rax
.text:000000000000666E                 mov     edx, 5          ; category
.text:0000000000006673                 jnz     loc_7410
.text:0000000000006679                 lea     rsi, aRNotSpecifiedO ; "-r not specified; omitting directory %s"
.text:0000000000006680                 xor     edi, edi        ; domainname
.text:0000000000006682                 call    _dcgettext
.text:0000000000006687                 mov     rdx, rax        ; format
.text:000000000000668A
.text:000000000000668A loc_668A:                               ; CODE XREF: copy_internal+19A1↓j
.text:000000000000668A                 mov     rcx, r13
.text:000000000000668D                 xor     esi, esi        ; errnum
.text:000000000000668F                 xor     edi, edi        ; status
.text:0000000000006691                 xor     eax, eax
.text:0000000000006693                 call    _error
.text:0000000000006698                 jmp     loc_62C6
.text:0000000000006698 ; ---------------------------------------------------------------------------
.text:000000000000669D                 align 20h
.text:00000000000066A0
.text:00000000000066A0 loc_66A0:                               ; CODE XREF: copy_internal+223↑j
.text:00000000000066A0                 cmp     byte ptr [rbx+18h], 0
.text:00000000000066A4                 jnz     loc_6C80
.text:00000000000066AA                 mov     eax, [rbp+var_314]
.text:00000000000066B0                 and     eax, 0F000h
.text:00000000000066B5                 cmp     eax, 4000h
.text:00000000000066BA                 jz      short loc_6710
.text:00000000000066BC
.text:00000000000066BC loc_66BC:                               ; CODE XREF: copy_internal+11F4↓j
.text:00000000000066BC                 mov     eax, [rbx+8]
.text:00000000000066BF                 cmp     eax, 2
.text:00000000000066C2                 jz      loc_62C0
.text:00000000000066C8                 cmp     eax, 3
.text:00000000000066CB                 jnz     short loc_6710
.text:00000000000066CD                 mov     rsi, [rbp+file]
.text:00000000000066D4                 lea     rdx, [rbp+var_1F0.st_mode]
.text:00000000000066DB                 mov     rdi, rbx
.text:00000000000066DE                 mov     byte ptr [rbp+s2], r9b
.text:00000000000066E5                 mov     byte ptr [rbp+old], r8b
.text:00000000000066EC                 call    overwrite_ok_isra_12
.text:00000000000066F1                 test    al, al
.text:00000000000066F3                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000066FB                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006703                 jz      loc_62C0
.text:0000000000006709                 nop     dword ptr [rax+00000000h]
.text:0000000000006710
.text:0000000000006710 loc_6710:                               ; CODE XREF: copy_internal+C3A↑j
.text:0000000000006710                                         ; copy_internal+C4B↑j ...
.text:0000000000006710                 test    r14b, r14b
.text:0000000000006713                 jnz     loc_62C0
.text:0000000000006719                 mov     eax, [rbp+var_1F0.st_mode]
.text:000000000000671F                 mov     r12d, [rbp+var_314]
.text:0000000000006726                 mov     edx, eax
.text:0000000000006728                 and     r12d, 0F000h
.text:000000000000672F                 and     edx, 0F000h
.text:0000000000006735                 cmp     edx, 4000h
.text:000000000000673B                 jz      loc_6D50
.text:0000000000006741                 cmp     r12d, 4000h
.text:0000000000006748                 jz      loc_79E8
.text:000000000000674E                 test    r13b, r13b
.text:0000000000006751                 mov     r15d, [rbx]
.text:0000000000006754                 jz      loc_7273
.text:000000000000675A
.text:000000000000675A loc_675A:                               ; CODE XREF: copy_internal+1F81↓j
.text:000000000000675A                 cmp     r15d, 3
.text:000000000000675E                 jnz     loc_7210
.text:0000000000006764                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006768                 jnz     loc_7A07
.text:000000000000676E
.text:000000000000676E loc_676E:                               ; CODE XREF: copy_internal+1802↓j
.text:000000000000676E                 mov     rdi, [rbp+filename]
.text:0000000000006775                 mov     byte ptr [rbp+s2], r9b
.text:000000000000677C                 mov     byte ptr [rbp+old], r8b
.text:0000000000006783                 call    last_component
.text:0000000000006788                 cmp     byte ptr [rax], 2Eh ; '.'
.text:000000000000678B                 mov     r14, rax
.text:000000000000678E                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006796                 movzx   r9d, byte ptr [rbp+s2]
.text:000000000000679E                 jnz     short loc_67C7
.text:00000000000067A0                 xor     eax, eax
.text:00000000000067A2
.text:00000000000067A2 loc_67A2:                               ; CODE XREF: copy_internal+1FDA↓j
.text:00000000000067A2                 xor     edx, edx
.text:00000000000067A4                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:00000000000067A9                 setz    dl
.text:00000000000067AC                 movzx   edx, byte ptr [r14+rdx+1]
.text:00000000000067B2                 test    dl, dl
.text:00000000000067B4                 jz      loc_7288
.text:00000000000067BA                 cmp     dl, 2Fh ; '/'
.text:00000000000067BD                 jz      loc_7288
.text:00000000000067C3                 test    al, al
.text:00000000000067C5                 jnz     short loc_67DD
.text:00000000000067C7
.text:00000000000067C7 loc_67C7:                               ; CODE XREF: copy_internal+D1E↑j
.text:00000000000067C7                 mov     eax, [rbp+var_1F0.st_mode]
.text:00000000000067CD                 and     eax, 0F000h
.text:00000000000067D2                 cmp     eax, 4000h
.text:00000000000067D7                 jz      loc_72A7
.text:00000000000067DD
.text:00000000000067DD loc_67DD:                               ; CODE XREF: copy_internal+D45↑j
.text:00000000000067DD                                         ; copy_internal+1FCF↓j
.text:00000000000067DD                 cmp     r15d, 3
.text:00000000000067E1                 jz      short loc_6849
.text:00000000000067E3                 mov     rdi, r14        ; s
.text:00000000000067E6                 mov     byte ptr [rbp+var_35C], r9b
.text:00000000000067ED                 call    _strlen
.text:00000000000067F2                 mov     rdi, [rbp+file]
.text:00000000000067F9                 mov     [rbp+old], rax
.text:0000000000006800                 call    last_component
.text:0000000000006805                 mov     rdi, rax        ; s
.text:0000000000006808                 mov     [rbp+s2], rax
.text:000000000000680F                 call    _strlen
.text:0000000000006814                 mov     r15, cs:simple_backup_suffix
.text:000000000000681B                 mov     r12, rax
.text:000000000000681E                 mov     rdi, r15        ; s
.text:0000000000006821                 call    _strlen
.text:0000000000006826                 mov     r8, rax
.text:0000000000006829                 lea     rax, [r12+rax]
.text:000000000000682D                 cmp     [rbp+old], rax
.text:0000000000006834                 mov     rsi, [rbp+s2]   ; s2
.text:000000000000683B                 movzx   r9d, byte ptr [rbp+var_35C]
.text:0000000000006843                 jz      loc_829E
.text:0000000000006849
.text:0000000000006849 loc_6849:                               ; CODE XREF: copy_internal+D61↑j
.text:0000000000006849                                         ; copy_internal+2841↓j ...
.text:0000000000006849                 mov     edx, [rbx]
.text:000000000000684B                 mov     rsi, [rbp+file]
.text:0000000000006852                 mov     edi, 0FFFFFF9Ch
.text:0000000000006857                 mov     byte ptr [rbp+old], r9b
.text:000000000000685E                 call    backup_file_rename
.text:0000000000006863                 test    rax, rax
.text:0000000000006866                 mov     r12, rax
.text:0000000000006869                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000006871                 jz      loc_8191
.text:0000000000006877                 mov     rdi, rax        ; s
.text:000000000000687A                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006881                 mov     r14d, 1
.text:0000000000006887                 call    _strlen
.text:000000000000688C                 lea     rdx, [rax+1]    ; n
.text:0000000000006890                 add     rax, 1Fh
.text:0000000000006894                 mov     rsi, r12        ; src
.text:0000000000006897                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000689B                 mov     r15d, 11h
.text:00000000000068A1                 sub     rsp, rax
.text:00000000000068A4                 lea     rdi, [rsp+3C0h+var_3B1]
.text:00000000000068A9                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:00000000000068AD                 call    _memcpy
.text:00000000000068B2                 mov     rdi, r12        ; ptr
.text:00000000000068B5                 mov     [rbp+old], rax
.text:00000000000068BC                 call    free
.text:00000000000068C1                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000068C9                 jmp     loc_5E0E
.text:00000000000068C9 ; ---------------------------------------------------------------------------
.text:00000000000068CE                 align 10h
.text:00000000000068D0
.text:00000000000068D0 loc_68D0:                               ; CODE XREF: copy_internal+87D↑j
.text:00000000000068D0                 cmp     byte ptr [rbx+16h], 0
.text:00000000000068D4                 jnz     loc_6C60
.text:00000000000068DA
.text:00000000000068DA loc_68DA:                               ; CODE XREF: copy_internal+88C↑j
.text:00000000000068DA                 mov     rsi, [rbp+file]
.text:00000000000068E1                 mov     edi, 4
.text:00000000000068E6                 mov     [rbp+filename], r9
.text:00000000000068ED                 xor     r12d, r12d
.text:00000000000068F0                 call    quotearg_style
.text:00000000000068F5                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:00000000000068FC                 mov     edx, 5          ; category
.text:0000000000006901                 xor     edi, edi        ; domainname
.text:0000000000006903                 mov     rbx, rax
.text:0000000000006906                 call    _dcgettext
.text:000000000000690B                 mov     r9, [rbp+filename]
.text:0000000000006912                 mov     rdx, rax        ; format
.text:0000000000006915                 mov     rcx, rbx
.text:0000000000006918                 xor     edi, edi        ; status
.text:000000000000691A                 xor     eax, eax
.text:000000000000691C                 mov     esi, [r9]       ; errnum
.text:000000000000691F                 call    _error
.text:0000000000006924                 jmp     loc_62C6
.text:0000000000006924 ; ---------------------------------------------------------------------------
.text:0000000000006929                 align 10h
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: copy_internal+33A↑j
.text:0000000000006930                 call    ___errno_location
.text:0000000000006935                 mov     r15d, [rax]
.text:0000000000006938                 jmp     loc_5B0B
.text:0000000000006938 ; ---------------------------------------------------------------------------
.text:000000000000693D                 align 20h
.text:0000000000006940
.text:0000000000006940 loc_6940:                               ; CODE XREF: copy_internal+534↑j
.text:0000000000006940                 mov     rax, [rbp+filename]
.text:0000000000006947                 cmp     byte ptr [rax], 2Fh ; '/'
.text:000000000000694A                 jz      short loc_6984
.text:000000000000694C                 mov     rdi, [rbp+file]
.text:0000000000006953                 call    dir_name
.text:0000000000006958                 lea     r8, asc_12A38+1 ; "."
.text:000000000000695F                 mov     rdi, rax
.text:0000000000006962                 mov     ecx, 2
.text:0000000000006967                 mov     r12, rax
.text:000000000000696A                 mov     rsi, r8
.text:000000000000696D                 repe cmpsb
.text:000000000000696F                 setnbe  al
.text:0000000000006972                 sbb     al, 0
.text:0000000000006974                 test    al, al
.text:0000000000006976                 jnz     loc_7C58
.text:000000000000697C
.text:000000000000697C loc_697C:                               ; CODE XREF: copy_internal+21EE↓j
.text:000000000000697C                                         ; copy_internal+220A↓j ...
.text:000000000000697C                 mov     rdi, r12        ; ptr
.text:000000000000697F                 call    free
.text:0000000000006984
.text:0000000000006984 loc_6984:                               ; CODE XREF: copy_internal+ECA↑j
.text:0000000000006984                 movzx   ecx, byte ptr [rbx+16h]
.text:0000000000006988                 mov     rdx, [rbp+file]
.text:000000000000698F                 mov     r8d, 0FFFFFFFFh
.text:0000000000006995                 mov     rdi, [rbp+filename]
.text:000000000000699C                 mov     esi, 0FFFFFF9Ch
.text:00000000000069A1                 call    force_symlinkat
.text:00000000000069A6                 xor     r8d, r8d
.text:00000000000069A9                 test    eax, eax
.text:00000000000069AB                 mov     r12d, eax
.text:00000000000069AE                 jle     loc_5FFF
.text:00000000000069B4                 mov     rdx, [rbp+filename]
.text:00000000000069BB                 mov     esi, 4
.text:00000000000069C0                 mov     edi, 1
.text:00000000000069C5                 call    quotearg_n_style
.text:00000000000069CA                 mov     rdx, [rbp+file]
.text:00000000000069D1                 mov     esi, 4
.text:00000000000069D6                 xor     edi, edi
.text:00000000000069D8                 mov     r13, rax
.text:00000000000069DB                 call    quotearg_n_style
.text:00000000000069E0                 lea     rsi, aCannotCreateSy ; "cannot create symbolic link %s to %s"
.text:00000000000069E7                 mov     r14, rax
.text:00000000000069EA                 mov     edx, 5          ; category
.text:00000000000069EF                 xor     edi, edi        ; domainname
.text:00000000000069F1                 call    _dcgettext
.text:00000000000069F6                 mov     r8, r13
.text:00000000000069F9                 mov     rdx, rax        ; format
.text:00000000000069FC                 mov     rcx, r14
.text:00000000000069FF                 mov     esi, r12d       ; errnum
.text:0000000000006A02                 xor     edi, edi        ; status
.text:0000000000006A04                 xor     eax, eax
.text:0000000000006A06                 call    _error
.text:0000000000006A0B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006A10
.text:0000000000006A10 loc_6A10:                               ; CODE XREF: copy_internal+576↑j
.text:0000000000006A10                                         ; copy_internal+BC0↑j ...
.text:0000000000006A10                 cmp     byte ptr [rbx+25h], 0
.text:0000000000006A14                 jnz     loc_6B90
.text:0000000000006A1A                 cmp     [rbp+s2], 0
.text:0000000000006A22                 jz      loc_72C0
.text:0000000000006A28
.text:0000000000006A28 loc_6A28:                               ; CODE XREF: copy_internal+110A↓j
.text:0000000000006A28                                         ; copy_internal+1853↓j
.text:0000000000006A28                 mov     rax, [rbp+old]
.text:0000000000006A2F                 test    rax, rax
.text:0000000000006A32                 jz      loc_5D90
.text:0000000000006A38                 mov     rsi, [rbp+file] ; new
.text:0000000000006A3F                 mov     rdi, rax        ; old
.text:0000000000006A42                 call    _rename
.text:0000000000006A47                 test    eax, eax
.text:0000000000006A49                 jnz     loc_72E0
.text:0000000000006A4F                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000006A53                 jz      loc_5D90
.text:0000000000006A59                 mov     rdx, [rbp+file]
.text:0000000000006A60                 mov     esi, 4
.text:0000000000006A65                 mov     edi, 1
.text:0000000000006A6A                 call    quotearg_n_style
.text:0000000000006A6F                 mov     rdx, [rbp+old]
.text:0000000000006A76                 xor     edi, edi
.text:0000000000006A78                 mov     esi, 4
.text:0000000000006A7D                 mov     r12, rax
.text:0000000000006A80                 call    quotearg_n_style
.text:0000000000006A85                 lea     rsi, aSSUnbackup ; "%s -> %s (unbackup)\n"
.text:0000000000006A8C                 mov     rbx, rax
.text:0000000000006A8F                 xor     edi, edi        ; domainname
.text:0000000000006A91                 mov     edx, 5          ; category
.text:0000000000006A96                 call    _dcgettext
.text:0000000000006A9B                 mov     rcx, r12
.text:0000000000006A9E                 mov     rsi, rax
.text:0000000000006AA1                 mov     rdx, rbx
.text:0000000000006AA4                 mov     edi, 1
.text:0000000000006AA9                 xor     eax, eax
.text:0000000000006AAB                 call    ___printf_chk
.text:0000000000006AB0                 jmp     loc_5D90
.text:0000000000006AB0 ; ---------------------------------------------------------------------------
.text:0000000000006AB5                 align 8
.text:0000000000006AB8
.text:0000000000006AB8 loc_6AB8:                               ; CODE XREF: copy_internal+3B4↑j
.text:0000000000006AB8                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000006ABC                 jnz     loc_6490
.text:0000000000006AC2                 test    r15d, r15d
.text:0000000000006AC5                 jz      loc_5F1B
.text:0000000000006ACB                 jmp     loc_5EE9
.text:0000000000006AD0 ; ---------------------------------------------------------------------------
.text:0000000000006AD0
.text:0000000000006AD0 loc_6AD0:                               ; CODE XREF: copy_internal+47F↑j
.text:0000000000006AD0                 test    r13b, r13b
.text:0000000000006AD3                 mov     rdx, [rbp+stat_buf.st_dev]
.text:0000000000006ADA                 mov     rdi, [rbp+stat_buf.st_ino]
.text:0000000000006AE1                 jz      loc_7390
.text:0000000000006AE7                 mov     rsi, rdi
.text:0000000000006AEA                 mov     rdi, [rbp+file] ; src
.text:0000000000006AF1                 call    remember_copied
.text:0000000000006AF6                 mov     [rbp+s2], rax
.text:0000000000006AFD
.text:0000000000006AFD loc_6AFD:                               ; CODE XREF: copy_internal+191F↓j
.text:0000000000006AFD                 cmp     [rbp+s2], 0
.text:0000000000006B05                 jz      loc_7000
.text:0000000000006B0B
.text:0000000000006B0B loc_6B0B:                               ; CODE XREF: copy_internal+1543↓j
.text:0000000000006B0B                 mov     rsi, [rbp+s2]
.text:0000000000006B12                 mov     rdi, [rbp+filename]
.text:0000000000006B19                 call    same_name
.text:0000000000006B1E                 test    al, al
.text:0000000000006B20                 jz      loc_7A60
.text:0000000000006B26                 mov     rdx, cs:top_level_dst_name
.text:0000000000006B2D                 mov     esi, 4
.text:0000000000006B32                 mov     edi, 1
.text:0000000000006B37                 call    quotearg_n_style
.text:0000000000006B3C                 mov     rdx, cs:top_level_src_name
.text:0000000000006B43                 mov     esi, 4
.text:0000000000006B48                 xor     edi, edi
.text:0000000000006B4A                 mov     r13, rax
.text:0000000000006B4D                 call    quotearg_n_style
.text:0000000000006B52                 lea     rsi, aCannotCopyADir ; "cannot copy a directory, %s, into itsel"...
.text:0000000000006B59                 mov     r12, rax
.text:0000000000006B5C                 mov     edx, 5          ; category
.text:0000000000006B61                 xor     edi, edi        ; domainname
.text:0000000000006B63                 call    _dcgettext
.text:0000000000006B68                 mov     r8, r13
.text:0000000000006B6B                 mov     rdx, rax        ; format
.text:0000000000006B6E                 mov     rcx, r12
.text:0000000000006B71                 xor     eax, eax
.text:0000000000006B73                 xor     esi, esi        ; errnum
.text:0000000000006B75                 xor     edi, edi        ; status
.text:0000000000006B77                 call    _error
.text:0000000000006B7C                 mov     rax, [rbp+var_340]
.text:0000000000006B83                 mov     byte ptr [rax], 1
.text:0000000000006B86
.text:0000000000006B86 loc_6B86:                               ; CODE XREF: copy_internal+156E↓j
.text:0000000000006B86                                         ; copy_internal+206B↓j
.text:0000000000006B86                 cmp     byte ptr [rbx+25h], 0
.text:0000000000006B8A                 jz      loc_6A28
.text:0000000000006B90
.text:0000000000006B90 loc_6B90:                               ; CODE XREF: copy_internal+305↑j
.text:0000000000006B90                                         ; copy_internal+F94↑j ...
.text:0000000000006B90                 call    restore_default_fscreatecon_or_die
.text:0000000000006B95                 nop     dword ptr [rax]
.text:0000000000006B98
.text:0000000000006B98 loc_6B98:                               ; CODE XREF: copy_internal+953↑j
.text:0000000000006B98                                         ; copy_internal+2074↓j
.text:0000000000006B98                 cmp     [rbp+stat_buf.st_nlink], 1
.text:0000000000006BA0                 ja      loc_6F88
.text:0000000000006BA6                 test    r13b, r13b
.text:0000000000006BA9                 mov     edx, [rbx+4]
.text:0000000000006BAC                 jz      short loc_6BB7
.text:0000000000006BAE                 cmp     edx, 3
.text:0000000000006BB1                 jz      loc_6F88
.text:0000000000006BB7
.text:0000000000006BB7 loc_6BB7:                               ; CODE XREF: copy_internal+112C↑j
.text:0000000000006BB7                 cmp     edx, 4
.text:0000000000006BBA                 mov     [rbp+s2], 0
.text:0000000000006BC5                 jz      loc_6F88
.text:0000000000006BCB
.text:0000000000006BCB loc_6BCB:                               ; CODE XREF: copy_internal+1584↓j
.text:0000000000006BCB                 test    al, al
.text:0000000000006BCD                 jnz     loc_63D9
.text:0000000000006BD3
.text:0000000000006BD3 loc_6BD3:                               ; CODE XREF: copy_internal+2085↓j
.text:0000000000006BD3                 movzx   eax, r14b
.text:0000000000006BD7                 mov     [rbp+fildes], eax
.text:0000000000006BDD                 jmp     loc_5F30
.text:0000000000006BDD ; ---------------------------------------------------------------------------
.text:0000000000006BE2                 align 8
.text:0000000000006BE8
.text:0000000000006BE8 loc_6BE8:                               ; CODE XREF: copy_internal+999↑j
.text:0000000000006BE8                 mov     rdx, [rbp+file]
.text:0000000000006BEF                 mov     esi, 4
.text:0000000000006BF4                 mov     edi, 1
.text:0000000000006BF9                 call    quotearg_n_style
.text:0000000000006BFE                 mov     rdx, [rbp+filename]
.text:0000000000006C05                 mov     esi, 4
.text:0000000000006C0A                 xor     edi, edi
.text:0000000000006C0C                 mov     r12, rax
.text:0000000000006C0F                 call    quotearg_n_style
.text:0000000000006C14                 lea     rsi, aCannotMoveSToS ; "cannot move %s to %s"
.text:0000000000006C1B                 mov     rbx, rax
.text:0000000000006C1E                 mov     edx, 5          ; category
.text:0000000000006C23                 xor     edi, edi        ; domainname
.text:0000000000006C25                 call    _dcgettext
.text:0000000000006C2A                 mov     r8, r12
.text:0000000000006C2D                 mov     rcx, rbx
.text:0000000000006C30                 mov     rdx, rax        ; format
.text:0000000000006C33                 mov     esi, r15d       ; errnum
.text:0000000000006C36
.text:0000000000006C36 loc_6C36:                               ; CODE XREF: copy_internal+1A8C↓j
.text:0000000000006C36                 xor     edi, edi        ; status
.text:0000000000006C38                 xor     eax, eax
.text:0000000000006C3A                 call    _error
.text:0000000000006C3F                 mov     rsi, [rbp+stat_buf.st_dev]
.text:0000000000006C46                 mov     rdi, [rbp+stat_buf.st_ino]
.text:0000000000006C4D                 call    forget_created
.text:0000000000006C52                 jmp     loc_5D90
.text:0000000000006C52 ; ---------------------------------------------------------------------------
.text:0000000000006C57                 align 20h
.text:0000000000006C60
.text:0000000000006C60 loc_6C60:                               ; CODE XREF: copy_internal+E54↑j
.text:0000000000006C60                 xor     r8d, r8d
.text:0000000000006C63                 jmp     loc_6312
.text:0000000000006C63 ; ---------------------------------------------------------------------------
.text:0000000000006C68                 align 10h
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: copy_internal+2A2↑j
.text:0000000000006C70                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006C74                 jz      loc_66BC
.text:0000000000006C7A                 nop     word ptr [rax+rax+00h]
.text:0000000000006C80
.text:0000000000006C80 loc_6C80:                               ; CODE XREF: copy_internal+C24↑j
.text:0000000000006C80                                         ; copy_internal+166A↓j
.text:0000000000006C80                 mov     eax, [rbx+8]
.text:0000000000006C83                 cmp     eax, 2
.text:0000000000006C86                 jz      short loc_6D04
.text:0000000000006C88                 cmp     eax, 3
.text:0000000000006C8B                 jz      short loc_6CD8
.text:0000000000006C8D                 cmp     eax, 4
.text:0000000000006C90                 jnz     loc_6710
.text:0000000000006C96                 cmp     byte ptr [rbx+2Fh], 0
.text:0000000000006C9A                 jz      loc_6710
.text:0000000000006CA0                 mov     esi, [rbp+var_1F0.st_mode]
.text:0000000000006CA6                 mov     rdi, [rbp+file] ; name
.text:0000000000006CAD                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006CB4                 mov     byte ptr [rbp+old], r8b
.text:0000000000006CBB                 call    writable_destination
.text:0000000000006CC0                 test    al, al
.text:0000000000006CC2                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006CCA                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006CD2                 jnz     loc_6710
.text:0000000000006CD8
.text:0000000000006CD8 loc_6CD8:                               ; CODE XREF: copy_internal+120B↑j
.text:0000000000006CD8                 mov     rsi, [rbp+file]
.text:0000000000006CDF                 lea     rdx, [rbp+var_1F0.st_mode]
.text:0000000000006CE6                 mov     rdi, rbx
.text:0000000000006CE9                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006CF0                 mov     byte ptr [rbp+old], r8b
.text:0000000000006CF7                 call    overwrite_ok_isra_12
.text:0000000000006CFC                 test    al, al
.text:0000000000006CFE                 jnz     loc_8110
.text:0000000000006D04
.text:0000000000006D04 loc_6D04:                               ; CODE XREF: copy_internal+1206↑j
.text:0000000000006D04                                         ; copy_internal+2706↓j
.text:0000000000006D04                 cmp     qword ptr [rbp+fildes], 0
.text:0000000000006D0C                 jz      loc_62C0
.text:0000000000006D12                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000006D19                 mov     byte ptr [rax], 1
.text:0000000000006D1C                 jmp     loc_62C0
.text:0000000000006D1C ; ---------------------------------------------------------------------------
.text:0000000000006D21                 align 8
.text:0000000000006D28
.text:0000000000006D28 loc_6D28:                               ; CODE XREF: copy_internal+836↑j
.text:0000000000006D28                 mov     rdi, [rbx+40h]
.text:0000000000006D2C                 mov     rsi, [rbp+file]
.text:0000000000006D33                 lea     rdx, [rbp+stat_buf]
.text:0000000000006D3A                 mov     r12d, r13d
.text:0000000000006D3D                 call    record_file
.text:0000000000006D42                 jmp     loc_62C6
.text:0000000000006D42 ; ---------------------------------------------------------------------------
.text:0000000000006D47                 align 10h
.text:0000000000006D50
.text:0000000000006D50 loc_6D50:                               ; CODE XREF: copy_internal+CBB↑j
.text:0000000000006D50                 cmp     r12d, 4000h
.text:0000000000006D57                 jz      loc_7270
.text:0000000000006D5D
.text:0000000000006D5D loc_6D5D:                               ; CODE XREF: copy_internal+17EA↓j
.text:0000000000006D5D                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006D61                 jz      short loc_6D6F
.text:0000000000006D63                 mov     r15d, [rbx]
.text:0000000000006D66                 test    r15d, r15d
.text:0000000000006D69                 jnz     loc_7A07
.text:0000000000006D6F
.text:0000000000006D6F loc_6D6F:                               ; CODE XREF: copy_internal+12E1↑j
.text:0000000000006D6F                 mov     rsi, [rbp+file]
.text:0000000000006D76                 mov     edi, 4
.text:0000000000006D7B                 xor     r12d, r12d
.text:0000000000006D7E                 call    quotearg_style
.text:0000000000006D83                 lea     rsi, aCannotOverwrit ; "cannot overwrite directory %s with non-"...
.text:0000000000006D8A                 mov     rbx, rax
.text:0000000000006D8D                 mov     edx, 5          ; category
.text:0000000000006D92                 xor     edi, edi        ; domainname
.text:0000000000006D94                 call    _dcgettext
.text:0000000000006D99                 mov     rcx, rbx
.text:0000000000006D9C                 mov     rdx, rax        ; format
.text:0000000000006D9F                 xor     esi, esi        ; errnum
.text:0000000000006DA1                 xor     edi, edi        ; status
.text:0000000000006DA3                 xor     eax, eax
.text:0000000000006DA5                 call    _error
.text:0000000000006DAA                 jmp     loc_62C6
.text:0000000000006DAA ; ---------------------------------------------------------------------------
.text:0000000000006DAF                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: copy_internal+4EE↑j
.text:0000000000006DB0                 mov     ecx, [rbp+fildes]
.text:0000000000006DB6                 mov     edx, [rbp+var_314]
.text:0000000000006DBC                 mov     r8, rbx
.text:0000000000006DBF                 mov     rsi, [rbp+file]
.text:0000000000006DC6                 mov     rdi, [rbp+filename]
.text:0000000000006DCD                 call    set_process_security_ctx
.text:0000000000006DD2                 test    al, al
.text:0000000000006DD4                 jz      loc_5D90
.text:0000000000006DDA                 mov     eax, r12d
.text:0000000000006DDD                 and     eax, 12h
.text:0000000000006DE0                 mov     [rbp+var_35C], eax
.text:0000000000006DE6                 jmp     loc_65C9
.text:0000000000006DE6 ; ---------------------------------------------------------------------------
.text:0000000000006DEB                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: copy_internal+818↑j
.text:0000000000006DF0                 mov     rdi, [rbp+file]
.text:0000000000006DF7                 mov     rcx, rbx
.text:0000000000006DFA                 mov     edx, 1
.text:0000000000006DFF                 xor     esi, esi
.text:0000000000006E01                 call    set_file_security_ctx
.text:0000000000006E06                 jmp     loc_629E
.text:0000000000006E06 ; ---------------------------------------------------------------------------
.text:0000000000006E0B                 align 10h
.text:0000000000006E10
.text:0000000000006E10 loc_6E10:                               ; CODE XREF: copy_internal+80E↑j
.text:0000000000006E10                 lea     rsi, aRenamed   ; "renamed "
.text:0000000000006E17                 mov     edx, 5          ; category
.text:0000000000006E1C                 xor     edi, edi        ; domainname
.text:0000000000006E1E                 call    _dcgettext
.text:0000000000006E23                 mov     edi, 1
.text:0000000000006E28                 mov     rsi, rax
.text:0000000000006E2B                 xor     eax, eax
.text:0000000000006E2D                 call    ___printf_chk
.text:0000000000006E32                 mov     rdx, [rbp+old]
.text:0000000000006E39                 mov     rsi, [rbp+file]
.text:0000000000006E40                 mov     rdi, [rbp+filename]
.text:0000000000006E47                 call    emit_verbose
.text:0000000000006E4C                 jmp     loc_6294
.text:0000000000006E4C ; ---------------------------------------------------------------------------
.text:0000000000006E51                 align 8
.text:0000000000006E58
.text:0000000000006E58 loc_6E58:                               ; CODE XREF: copy_internal+20F↑j
.text:0000000000006E58                 mov     rax, [rbp+var_1F0.st_dev]
.text:0000000000006E5F                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000006E66                 jnz     loc_5C95
.text:0000000000006E6C                 movzx   eax, byte ptr [rbx+17h]
.text:0000000000006E70                 test    al, al
.text:0000000000006E72                 jnz     loc_7208
.text:0000000000006E78                 cmp     dword ptr [rbx+4], 2
.text:0000000000006E7C                 mov     ecx, 1
.text:0000000000006E81                 mov     r15d, 1
.text:0000000000006E87                 jz      loc_7015
.text:0000000000006E8D                 lea     r12, [rbp+var_160]
.text:0000000000006E94                 mov     rsi, [rbp+file] ; filename
.text:0000000000006E9B                 mov     edi, 1          ; ver
.text:0000000000006EA0                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006EA7                 mov     byte ptr [rbp+old], r8b
.text:0000000000006EAE                 mov     rdx, r12        ; stat_buf
.text:0000000000006EB1                 call    ___lxstat
.text:0000000000006EB6                 test    eax, eax
.text:0000000000006EB8                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006EC0                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006EC8                 jz      loc_7ED2
.text:0000000000006ECE
.text:0000000000006ECE loc_6ECE:                               ; CODE XREF: copy_internal+15C8↓j
.text:0000000000006ECE                                         ; copy_internal+15D2↓j ...
.text:0000000000006ECE                 xor     r14d, r14d
.text:0000000000006ED1                 jmp     loc_5C9F
.text:0000000000006ED1 ; ---------------------------------------------------------------------------
.text:0000000000006ED6                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 loc_6EE0:                               ; CODE XREF: copy_internal+B63↑j
.text:0000000000006EE0                                         ; copy_internal+B76↑j
.text:0000000000006EE0                 sub     rsp, 30h
.text:0000000000006EE4                 mov     rsi, [rbp+ptr]
.text:0000000000006EEB                 lea     rax, [rsp+3F0h+var_3E1]
.text:0000000000006EF0                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000006EF4                 test    r14b, r14b
.text:0000000000006EF7                 mov     qword ptr [rbp+fd], rax
.text:0000000000006EFE                 mov     [rax], rsi
.text:0000000000006F01                 mov     [rax+8], rdx
.text:0000000000006F05                 mov     [rax+10h], rcx
.text:0000000000006F09                 jnz     short loc_6F21
.text:0000000000006F0B                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000006F11                 and     eax, 0F000h
.text:0000000000006F16                 cmp     eax, 4000h
.text:0000000000006F1B                 jz      loc_7F78
.text:0000000000006F21
.text:0000000000006F21 loc_6F21:                               ; CODE XREF: copy_internal+1489↑j
.text:0000000000006F21                 mov     esi, [rbp+var_35C]
.text:0000000000006F27                 mov     r15, [rbp+file]
.text:0000000000006F2E                 not     esi
.text:0000000000006F30                 mov     rdi, r15        ; path
.text:0000000000006F33                 and     esi, r12d       ; mode
.text:0000000000006F36                 call    _mkdir
.text:0000000000006F3B                 test    eax, eax
.text:0000000000006F3D                 jz      loc_7700
.text:0000000000006F43                 mov     rsi, r15
.text:0000000000006F46                 mov     edi, 4
.text:0000000000006F4B                 call    quotearg_style
.text:0000000000006F50                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:0000000000006F57                 mov     r13, rax
.text:0000000000006F5A                 mov     edx, 5          ; category
.text:0000000000006F5F
.text:0000000000006F5F loc_6F5F:                               ; CODE XREF: copy_internal+261B↓j
.text:0000000000006F5F                                         ; copy_internal+26C5↓j ...
.text:0000000000006F5F                 xor     edi, edi        ; domainname
.text:0000000000006F61                 call    _dcgettext
.text:0000000000006F66                 mov     r12, rax
.text:0000000000006F69                 call    ___errno_location
.text:0000000000006F6E                 mov     esi, [rax]      ; errnum
.text:0000000000006F70                 mov     rcx, r13
.text:0000000000006F73                 mov     rdx, r12        ; format
.text:0000000000006F76                 xor     edi, edi        ; status
.text:0000000000006F78                 xor     eax, eax
.text:0000000000006F7A                 call    _error
.text:0000000000006F7F                 jmp     loc_6A10
.text:0000000000006F7F ; ---------------------------------------------------------------------------
.text:0000000000006F84                 align 8
.text:0000000000006F88
.text:0000000000006F88 loc_6F88:                               ; CODE XREF: copy_internal+1120↑j
.text:0000000000006F88                                         ; copy_internal+1131↑j ...
.text:0000000000006F88                 mov     rdx, [rbp+stat_buf.st_dev]
.text:0000000000006F8F                 mov     rsi, [rbp+stat_buf.st_ino]
.text:0000000000006F96                 mov     rdi, [rbp+file] ; src
.text:0000000000006F9D                 call    remember_copied
.text:0000000000006FA2                 mov     [rbp+s2], rax
.text:0000000000006FA9
.text:0000000000006FA9 loc_6FA9:                               ; CODE XREF: copy_internal+1982↓j
.text:0000000000006FA9                 cmp     [rbp+s2], 0
.text:0000000000006FB1                 jz      short loc_7000
.text:0000000000006FB3                 mov     eax, [rbp+var_314]
.text:0000000000006FB9                 and     eax, 0F000h
.text:0000000000006FBE                 cmp     eax, 4000h
.text:0000000000006FC3                 jz      loc_6B0B
.text:0000000000006FC9                 movzx   ecx, byte ptr [rbx+2Eh]
.text:0000000000006FCD                 mov     r8d, [rbp+fd]
.text:0000000000006FD4                 mov     edx, 1
.text:0000000000006FD9                 mov     rsi, [rbp+file]
.text:0000000000006FE0                 mov     rdi, [rbp+s2]
.text:0000000000006FE7                 call    create_hard_link
.text:0000000000006FEC                 test    al, al
.text:0000000000006FEE                 jz      loc_6B86
.text:0000000000006FF4                 jmp     loc_62C0
.text:0000000000006FF4 ; ---------------------------------------------------------------------------
.text:0000000000006FF9                 align 20h
.text:0000000000007000
.text:0000000000007000 loc_7000:                               ; CODE XREF: copy_internal+1085↑j
.text:0000000000007000                                         ; copy_internal+1531↑j ...
.text:0000000000007000                 movzx   eax, byte ptr [rbx+18h]
.text:0000000000007004                 jmp     loc_6BCB
.text:0000000000007004 ; ---------------------------------------------------------------------------
.text:0000000000007009                 align 10h
.text:0000000000007010
.text:0000000000007010 loc_7010:                               ; CODE XREF: copy_internal+219↑j
.text:0000000000007010                 xor     ecx, ecx
.text:0000000000007012                 xor     r15d, r15d
.text:0000000000007015
.text:0000000000007015 loc_7015:                               ; CODE XREF: copy_internal+1407↑j
.text:0000000000007015                 mov     eax, [rbp+stat_buf.st_mode]
.text:000000000000701B                 lea     rdx, [rbp+stat_buf]
.text:0000000000007022                 and     eax, 0F000h
.text:0000000000007027                 cmp     eax, 0A000h
.text:000000000000702C                 jz      loc_7CD3
.text:0000000000007032
.text:0000000000007032 loc_7032:                               ; CODE XREF: copy_internal+226A↓j
.text:0000000000007032                                         ; copy_internal+24C6↓j ...
.text:0000000000007032                 mov     esi, [rbx]
.text:0000000000007034                 test    esi, esi
.text:0000000000007036                 jz      loc_7518
.text:000000000000703C                 test    cl, cl
.text:000000000000703E                 jnz     loc_80D2
.text:0000000000007044                 cmp     byte ptr [rbx+18h], 0
.text:0000000000007048                 jnz     loc_6ECE
.text:000000000000704E                 cmp     dword ptr [rbx+4], 2
.text:0000000000007052                 jz      loc_6ECE
.text:0000000000007058                 mov     eax, [rdx+18h]
.text:000000000000705B                 and     eax, 0F000h
.text:0000000000007060                 cmp     eax, 0A000h
.text:0000000000007065                 jnz     loc_6ECE
.text:000000000000706B                 mov     eax, [r12+18h]
.text:0000000000007070                 and     eax, 0F000h
.text:0000000000007075                 cmp     eax, 0A000h
.text:000000000000707A                 jz      loc_6ECE
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: copy_internal+177F↓j
.text:0000000000007080                                         ; copy_internal+1AE1↓j ...
.text:0000000000007080                 mov     rdx, [rbp+file]
.text:0000000000007087                 mov     esi, 4
.text:000000000000708C                 mov     edi, 1
.text:0000000000007091                 call    quotearg_n_style
.text:0000000000007096                 mov     rdx, [rbp+filename]
.text:000000000000709D                 mov     esi, 4
.text:00000000000070A2                 xor     edi, edi
.text:00000000000070A4                 mov     r12, rax
.text:00000000000070A7                 call    quotearg_n_style
.text:00000000000070AC                 lea     rsi, aSAndSAreTheSam ; "%s and %s are the same file"
.text:00000000000070B3                 mov     rbx, rax
.text:00000000000070B6                 mov     edx, 5          ; category
.text:00000000000070BB
.text:00000000000070BB loc_70BB:                               ; CODE XREF: copy_internal+23B6↓j
.text:00000000000070BB                                         ; copy_internal+25A7↓j ...
.text:00000000000070BB                 xor     edi, edi        ; domainname
.text:00000000000070BD                 call    _dcgettext
.text:00000000000070C2                 mov     r8, r12
.text:00000000000070C5                 mov     rdx, rax        ; format
.text:00000000000070C8                 mov     rcx, rbx
.text:00000000000070CB                 xor     esi, esi        ; errnum
.text:00000000000070CD                 xor     edi, edi        ; status
.text:00000000000070CF                 xor     eax, eax
.text:00000000000070D1                 call    _error
.text:00000000000070D6                 jmp     loc_5D90
.text:00000000000070D6 ; ---------------------------------------------------------------------------
.text:00000000000070DB                 align 20h
.text:00000000000070E0
.text:00000000000070E0 loc_70E0:                               ; CODE XREF: copy_internal+239↑j
.text:00000000000070E0                 cmp     byte ptr [rbx+18h], 0
.text:00000000000070E4                 jz      loc_6710
.text:00000000000070EA                 jmp     loc_6C80
.text:00000000000070EA ; ---------------------------------------------------------------------------
.text:00000000000070EF                 align 10h
.text:00000000000070F0
.text:00000000000070F0 loc_70F0:                               ; CODE XREF: copy_internal+1A9F↓j
.text:00000000000070F0                                         ; copy_internal+1AA9↓j
.text:00000000000070F0                 mov     eax, [r12+18h]
.text:00000000000070F5                 and     eax, 0F000h
.text:00000000000070FA                 cmp     eax, 0A000h
.text:00000000000070FF                 jz      loc_5C9F
.text:0000000000007105                 test    cl, cl
.text:0000000000007107                 jz      short loc_7115
.text:0000000000007109                 cmp     qword ptr [r12+10h], 1
.text:000000000000710F                 ja      loc_84CB
.text:0000000000007115
.text:0000000000007115 loc_7115:                               ; CODE XREF: copy_internal+1687↑j
.text:0000000000007115                 mov     eax, [rdx+18h]
.text:0000000000007118                 and     eax, 0F000h
.text:000000000000711D                 cmp     eax, 0A000h
.text:0000000000007122                 jz      short loc_7150
.text:0000000000007124
.text:0000000000007124 loc_7124:                               ; CODE XREF: copy_internal+2ABA↓j
.text:0000000000007124                 mov     rax, [r12+8]
.text:0000000000007129                 cmp     [rdx+8], rax
.text:000000000000712D                 jnz     loc_5C9F
.text:0000000000007133                 mov     rax, [r12]
.text:0000000000007137                 cmp     [rdx], rax
.text:000000000000713A                 jnz     loc_5C9F
.text:0000000000007140                 movzx   eax, byte ptr [rbx+17h]
.text:0000000000007144                 test    al, al
.text:0000000000007146                 jnz     loc_7208
.text:000000000000714C
.text:000000000000714C loc_714C:                               ; CODE XREF: copy_internal+2A9F↓j
.text:000000000000714C                                         ; copy_internal+2AB4↓j
.text:000000000000714C                 movzx   esi, byte ptr [rbx+18h]
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: copy_internal+16A2↑j
.text:0000000000007150                 test    sil, sil
.text:0000000000007153                 jz      loc_7542
.text:0000000000007159                 mov     eax, [rbp+stat_buf.st_mode]
.text:000000000000715F                 and     eax, 0F000h
.text:0000000000007164                 cmp     eax, 0A000h
.text:0000000000007169                 jnz     loc_7542
.text:000000000000716F                 cmp     qword ptr [r12+10h], 1
.text:0000000000007175                 jbe     loc_7542
.text:000000000000717B                 mov     rdi, [rbp+filename] ; name
.text:0000000000007182                 mov     byte ptr [rbp+var_35C], r9b
.text:0000000000007189                 mov     byte ptr [rbp+s2], r8b
.text:0000000000007190                 mov     [rbp+old], rdx
.text:0000000000007197                 call    _canonicalize_file_name
.text:000000000000719C                 test    rax, rax
.text:000000000000719F                 mov     r15, rax
.text:00000000000071A2                 mov     rdx, [rbp+old]
.text:00000000000071A9                 movzx   r8d, byte ptr [rbp+s2]
.text:00000000000071B1                 movzx   r9d, byte ptr [rbp+var_35C]
.text:00000000000071B9                 jz      loc_7542
.text:00000000000071BF                 mov     rsi, [rbp+file]
.text:00000000000071C6                 mov     rdi, rax
.text:00000000000071C9                 mov     byte ptr [rbp+s2], r9b
.text:00000000000071D0                 mov     byte ptr [rbp+old], r8b
.text:00000000000071D7                 call    same_name
.text:00000000000071DC                 mov     rdi, r15        ; ptr
.text:00000000000071DF                 xor     eax, 1
.text:00000000000071E2                 mov     r12d, eax
.text:00000000000071E5                 call    free
.text:00000000000071EA                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000071F2                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000071FA                 xor     eax, eax
.text:00000000000071FC
.text:00000000000071FC loc_71FC:                               ; CODE XREF: copy_internal+22CA↓j
.text:00000000000071FC                                         ; copy_internal+268B↓j ...
.text:00000000000071FC                 test    r12b, r12b
.text:00000000000071FF                 jz      loc_7080
.text:0000000000007205                 nop     dword ptr [rax]
.text:0000000000007208
.text:0000000000007208 loc_7208:                               ; CODE XREF: copy_internal+13F2↑j
.text:0000000000007208                                         ; copy_internal+16C6↑j
.text:0000000000007208                 mov     r14d, eax
.text:000000000000720B                 jmp     loc_5C9F
.text:0000000000007210 ; ---------------------------------------------------------------------------
.text:0000000000007210
.text:0000000000007210 loc_7210:                               ; CODE XREF: copy_internal+CDE↑j
.text:0000000000007210                 mov     rdi, [rbx+40h]
.text:0000000000007214                 mov     rsi, [rbp+file]
.text:000000000000721B                 lea     rdx, [rbp+var_1F0]
.text:0000000000007222                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007229                 mov     byte ptr [rbp+old], r8b
.text:0000000000007230                 call    seen_file
.text:0000000000007235                 test    al, al
.text:0000000000007237                 movzx   r8d, byte ptr [rbp+old]
.text:000000000000723F                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007247                 jnz     loc_8595
.text:000000000000724D                 cmp     r12d, 4000h
.text:0000000000007254                 jz      short loc_7270
.text:0000000000007256                 mov     eax, [rbp+var_1F0.st_mode]
.text:000000000000725C                 mov     edx, eax
.text:000000000000725E                 and     edx, 0F000h
.text:0000000000007264                 cmp     edx, 4000h
.text:000000000000726A                 jz      loc_6D5D
.text:0000000000007270
.text:0000000000007270 loc_7270:                               ; CODE XREF: copy_internal+12D7↑j
.text:0000000000007270                                         ; copy_internal+17D4↑j
.text:0000000000007270                 mov     r15d, [rbx]
.text:0000000000007273
.text:0000000000007273 loc_7273:                               ; CODE XREF: copy_internal+CD4↑j
.text:0000000000007273                 movzx   eax, byte ptr [rbx+18h]
.text:0000000000007277                 test    al, al
.text:0000000000007279                 jnz     loc_7C30
.text:000000000000727F                 test    r15d, r15d
.text:0000000000007282                 jnz     loc_676E
.text:0000000000007288
.text:0000000000007288 loc_7288:                               ; CODE XREF: copy_internal+D34↑j
.text:0000000000007288                                         ; copy_internal+D3D↑j
.text:0000000000007288                 mov     edx, [rbp+var_1F0.st_mode]
.text:000000000000728E                 and     edx, 0F000h
.text:0000000000007294                 cmp     edx, 4000h
.text:000000000000729A                 setz    r12b
.text:000000000000729E                 or      r12b, al
.text:00000000000072A1                 jz      loc_7E3B
.text:00000000000072A7
.text:00000000000072A7 loc_72A7:                               ; CODE XREF: copy_internal+D57↑j
.text:00000000000072A7                                         ; copy_internal+21C9↓j ...
.text:00000000000072A7                 mov     r14d, r8d
.text:00000000000072AA                 mov     r15d, 11h
.text:00000000000072B0                 mov     [rbp+old], 0
.text:00000000000072BB                 jmp     loc_5E0E
.text:00000000000072C0 ; ---------------------------------------------------------------------------
.text:00000000000072C0
.text:00000000000072C0 loc_72C0:                               ; CODE XREF: copy_internal+FA2↑j
.text:00000000000072C0                 mov     rsi, [rbp+stat_buf.st_dev]
.text:00000000000072C7                 mov     rdi, [rbp+stat_buf.st_ino]
.text:00000000000072CE                 call    forget_created
.text:00000000000072D3                 jmp     loc_6A28
.text:00000000000072D3 ; ---------------------------------------------------------------------------
.text:00000000000072D8                 align 20h
.text:00000000000072E0
.text:00000000000072E0 loc_72E0:                               ; CODE XREF: copy_internal+FC9↑j
.text:00000000000072E0                 mov     rsi, [rbp+file]
.text:00000000000072E7                 mov     edi, 4
.text:00000000000072EC                 call    quotearg_style
.text:00000000000072F1                 mov     edx, 5
.text:00000000000072F6                 mov     r12, rax
.text:00000000000072F9                 lea     rsi, aCannotUnBackup ; "cannot un-backup %s"
.text:0000000000007300                 jmp     loc_637E
.text:0000000000007300 ; ---------------------------------------------------------------------------
.text:0000000000007305                 align 8
.text:0000000000007308
.text:0000000000007308 loc_7308:                               ; CODE XREF: copy_internal+53E↑j
.text:0000000000007308                 cmp     r15d, 8000h
.text:000000000000730F                 jz      loc_7B10
.text:0000000000007315                 cmp     r15d, 0A000h
.text:000000000000731C                 setnz   r8b
.text:0000000000007320                 and     r8b, [rbx+14h]
.text:0000000000007324                 jnz     loc_7B10
.text:000000000000732A                 cmp     r15d, 1000h
.text:0000000000007331                 jz      loc_83F2
.text:0000000000007337                 mov     eax, r15d
.text:000000000000733A                 and     ah, 0BFh
.text:000000000000733D                 cmp     eax, 2000h
.text:0000000000007342                 jz      loc_802C
.text:0000000000007348                 cmp     r15d, 0C000h
.text:000000000000734F                 jz      loc_802C
.text:0000000000007355                 cmp     r15d, 0A000h
.text:000000000000735C                 jz      loc_86E0
.text:0000000000007362                 mov     rsi, [rbp+filename]
.text:0000000000007369                 mov     edi, 4
.text:000000000000736E                 call    quotearg_style
.text:0000000000007373                 mov     edx, 5
.text:0000000000007378                 mov     r12, rax
.text:000000000000737B                 lea     rsi, aSHasUnknownFil ; "%s has unknown file type"
.text:0000000000007382                 jmp     loc_6628
.text:0000000000007382 ; ---------------------------------------------------------------------------
.text:0000000000007387                 align 10h
.text:0000000000007390
.text:0000000000007390 loc_7390:                               ; CODE XREF: copy_internal+1061↑j
.text:0000000000007390                 mov     rsi, rdx
.text:0000000000007393                 call    src_to_dest_lookup
.text:0000000000007398                 mov     [rbp+s2], rax
.text:000000000000739F                 jmp     loc_6AFD
.text:000000000000739F ; ---------------------------------------------------------------------------
.text:00000000000073A4                 align 8
.text:00000000000073A8
.text:00000000000073A8 loc_73A8:                               ; CODE XREF: copy_internal+A63↑j
.text:00000000000073A8                 mov     rsi, [rbp+filename]
.text:00000000000073AF                 mov     edi, 4
.text:00000000000073B4                 call    quotearg_style
.text:00000000000073B9                 lea     rsi, aWarningSourceF ; "warning: source file %s specified more "...
.text:00000000000073C0                 mov     rbx, rax
.text:00000000000073C3                 xor     edi, edi        ; domainname
.text:00000000000073C5                 mov     edx, 5          ; category
.text:00000000000073CA                 call    _dcgettext
.text:00000000000073CF                 mov     rcx, rbx
.text:00000000000073D2                 mov     rdx, rax        ; format
.text:00000000000073D5                 xor     esi, esi        ; errnum
.text:00000000000073D7                 xor     edi, edi        ; status
.text:00000000000073D9                 xor     eax, eax
.text:00000000000073DB                 call    _error
.text:00000000000073E0                 jmp     loc_62C6
.text:00000000000073E0 ; ---------------------------------------------------------------------------
.text:00000000000073E5                 align 8
.text:00000000000073E8
.text:00000000000073E8 loc_73E8:                               ; CODE XREF: copy_internal+938↑j
.text:00000000000073E8                 mov     rsi, [rbp+stat_buf.st_dev]
.text:00000000000073EF                 mov     rdi, [rbp+stat_buf.st_ino]
.text:00000000000073F6                 call    src_to_dest_lookup
.text:00000000000073FB                 mov     [rbp+s2], rax
.text:0000000000007402                 jmp     loc_6FA9
.text:0000000000007402 ; ---------------------------------------------------------------------------
.text:0000000000007407                 align 10h
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: copy_internal+BF3↑j
.text:0000000000007410                 lea     rsi, aOmittingDirect ; "omitting directory %s"
.text:0000000000007417                 xor     edi, edi        ; domainname
.text:0000000000007419                 call    _dcgettext
.text:000000000000741E                 mov     rdx, rax
.text:0000000000007421                 jmp     loc_668A
.text:0000000000007421 ; ---------------------------------------------------------------------------
.text:0000000000007426                 align 10h
.text:0000000000007430
.text:0000000000007430 loc_7430:                               ; CODE XREF: copy_internal+98F↑j
.text:0000000000007430                 mov     rdx, cs:top_level_dst_name
.text:0000000000007437                 mov     esi, 4
.text:000000000000743C                 mov     edi, 1
.text:0000000000007441                 call    quotearg_n_style
.text:0000000000007446                 mov     rdx, cs:top_level_src_name
.text:000000000000744D                 mov     esi, 4
.text:0000000000007452                 xor     edi, edi
.text:0000000000007454                 mov     r12, rax
.text:0000000000007457                 call    quotearg_n_style
.text:000000000000745C                 lea     rsi, aCannotMoveSToA ; "cannot move %s to a subdirectory of its"...
.text:0000000000007463                 mov     rbx, rax
.text:0000000000007466                 mov     edx, 5          ; category
.text:000000000000746B                 xor     edi, edi        ; domainname
.text:000000000000746D                 call    _dcgettext
.text:0000000000007472                 mov     r8, r12
.text:0000000000007475                 mov     rdx, rax        ; format
.text:0000000000007478                 mov     rcx, rbx
.text:000000000000747B                 xor     eax, eax
.text:000000000000747D                 xor     esi, esi        ; errnum
.text:000000000000747F                 xor     edi, edi        ; status
.text:0000000000007481                 call    _error
.text:0000000000007486                 mov     rax, [rbp+var_340]
.text:000000000000748D                 mov     r12d, 1
.text:0000000000007493                 mov     byte ptr [rax], 1
.text:0000000000007496                 jmp     loc_62C6
.text:0000000000007496 ; ---------------------------------------------------------------------------
.text:000000000000749B                 align 20h
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: copy_internal+9BB↑j
.text:00000000000074A0                 call    _rmdir
.text:00000000000074A5                 test    eax, eax
.text:00000000000074A7                 jz      loc_6471
.text:00000000000074AD                 call    ___errno_location
.text:00000000000074B2                 cmp     dword ptr [rax], 2
.text:00000000000074B5                 mov     r14, rax
.text:00000000000074B8                 jz      loc_6471
.text:00000000000074BE
.text:00000000000074BE loc_74BE:                               ; CODE XREF: copy_internal+9D5↑j
.text:00000000000074BE                 mov     rdx, [rbp+file]
.text:00000000000074C5                 mov     esi, 4
.text:00000000000074CA                 mov     edi, 1
.text:00000000000074CF                 call    quotearg_n_style
.text:00000000000074D4                 mov     rdx, [rbp+filename]
.text:00000000000074DB                 mov     esi, 4
.text:00000000000074E0                 xor     edi, edi
.text:00000000000074E2                 mov     r12, rax
.text:00000000000074E5                 call    quotearg_n_style
.text:00000000000074EA                 lea     rsi, aInterDeviceMov ; "inter-device move failed: %s to %s; una"...
.text:00000000000074F1                 mov     rbx, rax
.text:00000000000074F4                 mov     edx, 5          ; category
.text:00000000000074F9                 xor     edi, edi        ; domainname
.text:00000000000074FB                 call    _dcgettext
.text:0000000000007500                 mov     r8, r12
.text:0000000000007503                 mov     rcx, rbx
.text:0000000000007506                 mov     rdx, rax
.text:0000000000007509                 mov     esi, [r14]
.text:000000000000750C                 jmp     loc_6C36
.text:000000000000750C ; ---------------------------------------------------------------------------
.text:0000000000007511                 align 8
.text:0000000000007518
.text:0000000000007518 loc_7518:                               ; CODE XREF: copy_internal+15B6↑j
.text:0000000000007518                 movzx   esi, byte ptr [rbx+18h]
.text:000000000000751C                 test    sil, sil
.text:000000000000751F                 jnz     loc_70F0
.text:0000000000007525                 cmp     byte ptr [rbx+15h], 0
.text:0000000000007529                 jnz     loc_70F0
.text:000000000000752F                 mov     eax, [rdx+18h]
.text:0000000000007532                 and     eax, 0F000h
.text:0000000000007537                 cmp     eax, 0A000h
.text:000000000000753C                 jnz     loc_8525
.text:0000000000007542
.text:0000000000007542 loc_7542:                               ; CODE XREF: copy_internal+16D3↑j
.text:0000000000007542                                         ; copy_internal+16E9↑j ...
.text:0000000000007542                 cmp     byte ptr [rbx+2Ch], 0
.text:0000000000007546                 jz      short loc_755D
.text:0000000000007548                 mov     eax, [r12+18h]
.text:000000000000754D                 and     eax, 0F000h
.text:0000000000007552                 cmp     eax, 0A000h
.text:0000000000007557                 jz      loc_5C9F
.text:000000000000755D
.text:000000000000755D loc_755D:                               ; CODE XREF: copy_internal+1AC6↑j
.text:000000000000755D                 cmp     dword ptr [rbx+4], 2
.text:0000000000007561                 jnz     loc_7080
.text:0000000000007567                 mov     eax, [rdx+18h]
.text:000000000000756A                 and     eax, 0F000h
.text:000000000000756F                 cmp     eax, 0A000h
.text:0000000000007574                 jz      loc_8FEC
.text:000000000000757A                 movdqa  xmm0, xmmword ptr [rdx]
.text:000000000000757E                 movaps  xmmword ptr [rbp+var_D0.st_dev], xmm0
.text:0000000000007585                 movdqa  xmm0, xmmword ptr [rdx+10h]
.text:000000000000758A                 movaps  xmmword ptr [rbp+var_D0.st_nlink], xmm0
.text:0000000000007591                 movdqa  xmm0, xmmword ptr [rdx+20h]
.text:0000000000007596                 movaps  xmmword ptr [rbp+var_D0.st_gid], xmm0
.text:000000000000759D                 movdqa  xmm0, xmmword ptr [rdx+30h]
.text:00000000000075A2                 movaps  xmmword ptr [rbp+var_D0.st_size], xmm0
.text:00000000000075A9                 movdqa  xmm0, xmmword ptr [rdx+40h]
.text:00000000000075AE                 movaps  xmmword ptr [rbp+var_D0.st_blocks], xmm0
.text:00000000000075B5                 movdqa  xmm0, xmmword ptr [rdx+50h]
.text:00000000000075BA                 movaps  xmmword ptr [rbp+var_D0.st_atim.tv_nsec], xmm0
.text:00000000000075BE                 movdqa  xmm0, xmmword ptr [rdx+60h]
.text:00000000000075C3                 movaps  xmmword ptr [rbp+var_D0.st_mtim.tv_nsec], xmm0
.text:00000000000075C7                 movdqa  xmm0, xmmword ptr [rdx+70h]
.text:00000000000075CC                 movaps  xmmword ptr [rbp+var_D0.st_ctim.tv_nsec], xmm0
.text:00000000000075D0                 movdqa  xmm0, xmmword ptr [rdx+80h]
.text:00000000000075D8                 movaps  xmmword ptr [rbp+var_D0.__unused+8], xmm0
.text:00000000000075DC
.text:00000000000075DC loc_75DC:                               ; CODE XREF: copy_internal+35A4↓j
.text:00000000000075DC                 mov     eax, [r12+18h]
.text:00000000000075E1                 and     eax, 0F000h
.text:00000000000075E6                 cmp     eax, 0A000h
.text:00000000000075EB                 jz      loc_8FA9
.text:00000000000075F1                 movdqa  xmm0, xmmword ptr [r12]
.text:00000000000075F7                 movaps  xmmword ptr [rbp+var_160.st_dev], xmm0
.text:00000000000075FE                 movdqa  xmm0, xmmword ptr [r12+10h]
.text:0000000000007605                 movaps  xmmword ptr [rbp+var_160.st_nlink], xmm0
.text:000000000000760C                 movdqa  xmm0, xmmword ptr [r12+20h]
.text:0000000000007613                 movaps  xmmword ptr [rbp+var_160.st_gid], xmm0
.text:000000000000761A                 movdqa  xmm0, xmmword ptr [r12+30h]
.text:0000000000007621                 movaps  xmmword ptr [rbp+var_160.st_size], xmm0
.text:0000000000007628                 movdqa  xmm0, xmmword ptr [r12+40h]
.text:000000000000762F                 movaps  xmmword ptr [rbp+var_160.st_blocks], xmm0
.text:0000000000007636                 movdqa  xmm0, xmmword ptr [r12+50h]
.text:000000000000763D                 movaps  xmmword ptr [rbp+var_160.st_atim.tv_nsec], xmm0
.text:0000000000007644                 movdqa  xmm0, xmmword ptr [r12+60h]
.text:000000000000764B                 movaps  xmmword ptr [rbp+var_160.st_mtim.tv_nsec], xmm0
.text:0000000000007652                 movdqa  xmm0, xmmword ptr [r12+70h]
.text:0000000000007659                 movaps  xmmword ptr [rbp+var_160.st_ctim.tv_nsec], xmm0
.text:0000000000007660                 movdqa  xmm0, xmmword ptr [r12+80h]
.text:000000000000766A                 movaps  xmmword ptr [rbp+var_160.__unused+8], xmm0
.text:0000000000007671
.text:0000000000007671 loc_7671:                               ; CODE XREF: copy_internal+3561↓j
.text:0000000000007671                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007678                 cmp     [rbp+var_D0.st_ino], rax
.text:000000000000767F                 jnz     loc_5C9F
.text:0000000000007685                 mov     rax, [rbp+var_160.st_dev]
.text:000000000000768C                 cmp     [rbp+var_D0.st_dev], rax
.text:0000000000007693                 jnz     loc_5C9F
.text:0000000000007699                 cmp     byte ptr [rbx+17h], 0
.text:000000000000769D                 jz      loc_7080
.text:00000000000076A3                 mov     eax, [r12+18h]
.text:00000000000076A8                 and     eax, 0F000h
.text:00000000000076AD                 cmp     eax, 0A000h
.text:00000000000076B2                 setnz   r14b
.text:00000000000076B6                 jmp     loc_5C9F
.text:00000000000076B6 ; ---------------------------------------------------------------------------
.text:00000000000076BB                 align 20h
.text:00000000000076C0
.text:00000000000076C0 loc_76C0:                               ; CODE XREF: copy_internal+3C4↑j
.text:00000000000076C0                 lea     rcx, [rbp+var_D0]
.text:00000000000076C7                 mov     rsi, [rbp+file] ; filename
.text:00000000000076CE                 mov     edi, 1          ; ver
.text:00000000000076D3                 mov     rdx, rcx        ; stat_buf
.text:00000000000076D6                 mov     [rbp+s2], rcx
.text:00000000000076DD                 call    ___lxstat
.text:00000000000076E2                 test    eax, eax
.text:00000000000076E4                 jnz     loc_5ED0
.text:00000000000076EA                 mov     rcx, [rbp+s2]
.text:00000000000076F1                 mov     rdx, rcx
.text:00000000000076F4                 jmp     loc_5E4A
.text:00000000000076F4 ; ---------------------------------------------------------------------------
.text:00000000000076F9                 align 20h
.text:0000000000007700
.text:0000000000007700 loc_7700:                               ; CODE XREF: copy_internal+14BD↑j
.text:0000000000007700                 mov     rsi, [rbp+file] ; filename
.text:0000000000007707                 lea     rdx, [rbp+var_1F0] ; stat_buf
.text:000000000000770E                 mov     edi, 1          ; ver
.text:0000000000007713                 call    ___lxstat
.text:0000000000007718                 test    eax, eax
.text:000000000000771A                 jnz     loc_8125
.text:0000000000007720                 mov     r12d, [rbp+var_1F0.st_mode]
.text:0000000000007727                 mov     byte ptr [rbp+ptr], 0
.text:000000000000772E                 mov     eax, r12d
.text:0000000000007731                 and     eax, 1C0h
.text:0000000000007736                 cmp     eax, 1C0h
.text:000000000000773B                 jz      short loc_7768
.text:000000000000773D                 mov     rdi, [rbp+file] ; file
.text:0000000000007744                 mov     esi, r12d
.text:0000000000007747                 or      esi, 1C0h       ; mode
.text:000000000000774D                 call    _chmod
.text:0000000000007752                 test    eax, eax
.text:0000000000007754                 mov     [rbp+var_38C], r12d
.text:000000000000775B                 mov     byte ptr [rbp+ptr], 1
.text:0000000000007762                 jnz     loc_8783
.text:0000000000007768
.text:0000000000007768 loc_7768:                               ; CODE XREF: copy_internal+1CBB↑j
.text:0000000000007768                 mov     rax, [rbp+format]
.text:000000000000776F                 cmp     byte ptr [rax], 0
.text:0000000000007772                 jz      loc_856C
.text:0000000000007778
.text:0000000000007778 loc_7778:                               ; CODE XREF: copy_internal+2B10↓j
.text:0000000000007778                 cmp     byte ptr [rbx+2Eh], 0
.text:000000000000777C                 jz      short loc_77C8
.text:000000000000777E                 cmp     byte ptr [rbx+18h], 0
.text:0000000000007782                 jz      loc_862D
.text:0000000000007788                 mov     rsi, [rbp+file]
.text:000000000000778F                 mov     edi, 4
.text:0000000000007794                 call    quotearg_style
.text:0000000000007799                 lea     rsi, aCreatedDirecto ; "created directory %s\n"
.text:00000000000077A0                 mov     r12, rax
.text:00000000000077A3                 mov     edx, 5          ; category
.text:00000000000077A8                 xor     edi, edi        ; domainname
.text:00000000000077AA                 call    _dcgettext
.text:00000000000077AF                 mov     rdx, r12
.text:00000000000077B2                 mov     rsi, rax
.text:00000000000077B5                 mov     edi, 1
.text:00000000000077BA                 xor     eax, eax
.text:00000000000077BC                 call    ___printf_chk
.text:00000000000077C1                 nop     dword ptr [rax+00000000h]
.text:00000000000077C8
.text:00000000000077C8 loc_77C8:                               ; CODE XREF: copy_internal+1CFC↑j
.text:00000000000077C8                                         ; copy_internal+251D↓j ...
.text:00000000000077C8                 mov     rax, [rbp+var_348]
.text:00000000000077CF                 test    rax, rax
.text:00000000000077D2                 setnz   r12b
.text:00000000000077D6                 and     r12b, [rbx+1Ch]
.text:00000000000077DA                 jnz     loc_7FBB
.text:00000000000077E0
.text:00000000000077E0 loc_77E0:                               ; CODE XREF: copy_internal+254B↓j
.text:00000000000077E0                 movdqu  xmm0, xmmword ptr [rbx]
.text:00000000000077E4                 mov     esi, 2
.text:00000000000077E9                 mov     rdi, [rbp+filename]
.text:00000000000077F0                 movaps  xmmword ptr [rbp+dev], xmm0
.text:00000000000077F7                 movdqu  xmm0, xmmword ptr [rbx+10h]
.text:00000000000077FC                 movaps  [rbp+var_2E0], xmm0
.text:0000000000007803                 movdqu  xmm0, xmmword ptr [rbx+20h]
.text:0000000000007808                 movaps  xmmword ptr [rbp+var_2D0], xmm0
.text:000000000000780F                 movdqu  xmm0, xmmword ptr [rbx+30h]
.text:0000000000007814                 movaps  [rbp+var_2C0], xmm0
.text:000000000000781B                 movdqu  xmm0, xmmword ptr [rbx+40h]
.text:0000000000007820                 movaps  [rbp+var_2B0], xmm0
.text:0000000000007827                 call    savedir
.text:000000000000782C                 test    rax, rax
.text:000000000000782F                 mov     [rbp+s], rax
.text:0000000000007836                 jz      loc_8698
.text:000000000000783C                 cmp     dword ptr [rbx+4], 3
.text:0000000000007840                 jnz     short loc_784C
.text:0000000000007842                 mov     dword ptr [rbp+dev+4], 2
.text:000000000000784C
.text:000000000000784C loc_784C:                               ; CODE XREF: copy_internal+1DC0↑j
.text:000000000000784C                 mov     rax, [rbp+s]
.text:0000000000007853                 cmp     byte ptr [rax], 0
.text:0000000000007856                 jz      loc_8D95
.text:000000000000785C                 lea     rax, [rbp+dev]
.text:0000000000007863                 lea     r10, [rbp+stat_buf]
.text:000000000000786A                 mov     dword ptr [rbp+length], r13d
.text:0000000000007871                 mov     r15, [rbp+s]
.text:0000000000007878                 mov     r13, [rbp+var_340]
.text:000000000000787F                 mov     r12d, 1
.text:0000000000007885                 mov     [rbp+var_348], rax
.text:000000000000788C                 lea     rax, [rbp+var_2F9]
.text:0000000000007893                 mov     [rbp+var_315], 0
.text:000000000000789A                 mov     byte ptr [rbp+var_370], r14b
.text:00000000000078A1                 mov     [rbp+var_378], rbx
.text:00000000000078A8                 mov     [rbp+old], rax
.text:00000000000078AF                 lea     rax, [rbp+var_2F8]
.text:00000000000078B6                 mov     [rbp+var_340], r10
.text:00000000000078BD                 mov     [rbp+s2], rax
.text:00000000000078C4                 jmp     short loc_78F4
.text:00000000000078C4 ; ---------------------------------------------------------------------------
.text:00000000000078C6                 align 10h
.text:00000000000078D0
.text:00000000000078D0 loc_78D0:                               ; CODE XREF: copy_internal+1F0B↓j
.text:00000000000078D0                 movzx   eax, byte ptr [rbp+var_2F8]
.text:00000000000078D7                 mov     rdi, r15        ; s
.text:00000000000078DA                 or      [rbp+var_315], al
.text:00000000000078E0                 call    _strlen
.text:00000000000078E5                 lea     r15, [r15+rax+1]
.text:00000000000078EA                 cmp     byte ptr [r15], 0
.text:00000000000078EE                 jz      loc_7991
.text:00000000000078F4
.text:00000000000078F4 loc_78F4:                               ; CODE XREF: copy_internal+1E44↑j
.text:00000000000078F4                 mov     rdi, [rbp+filename]
.text:00000000000078FB                 xor     edx, edx
.text:00000000000078FD                 mov     rsi, r15
.text:0000000000007900                 call    file_name_concat
.text:0000000000007905                 mov     rdi, [rbp+file]
.text:000000000000790C                 xor     edx, edx
.text:000000000000790E                 mov     rsi, r15
.text:0000000000007911                 mov     rbx, rax
.text:0000000000007914                 call    file_name_concat
.text:0000000000007919                 mov     r14, rax
.text:000000000000791C                 mov     rax, [rbp+format]
.text:0000000000007923                 mov     r9, [rbp+var_348]
.text:000000000000792A                 mov     r8, qword ptr [rbp+fd]
.text:0000000000007931                 mov     rcx, [rbp+var_340]
.text:0000000000007938                 mov     rsi, r14
.text:000000000000793B                 mov     edx, [rbp+fildes]
.text:0000000000007941                 mov     rdi, rbx
.text:0000000000007944                 movzx   eax, byte ptr [rax]
.text:0000000000007947                 push    0
.text:0000000000007949                 push    [rbp+old]
.text:000000000000794F                 push    [rbp+s2]
.text:0000000000007955                 push    0
.text:0000000000007957                 mov     byte ptr [rbp+var_2F8], al
.text:000000000000795D                 call    copy_internal
.text:0000000000007962                 and     r12d, eax
.text:0000000000007965                 movzx   eax, [rbp+var_2F9]
.text:000000000000796C                 add     rsp, 20h
.text:0000000000007970                 or      [r13+0], al
.text:0000000000007974                 mov     rdi, r14        ; ptr
.text:0000000000007977                 call    free
.text:000000000000797C                 mov     rdi, rbx        ; ptr
.text:000000000000797F                 call    free
.text:0000000000007984                 cmp     [rbp+var_2F9], 0
.text:000000000000798B                 jz      loc_78D0
.text:0000000000007991
.text:0000000000007991 loc_7991:                               ; CODE XREF: copy_internal+1E6E↑j
.text:0000000000007991                 movzx   r14d, byte ptr [rbp+var_370]
.text:0000000000007999                 mov     rbx, [rbp+var_378]
.text:00000000000079A0                 mov     r13d, dword ptr [rbp+length]
.text:00000000000079A7
.text:00000000000079A7 loc_79A7:                               ; CODE XREF: copy_internal+3322↓j
.text:00000000000079A7                 mov     rdi, [rbp+s]    ; ptr
.text:00000000000079AE                 call    free
.text:00000000000079B3                 movzx   ecx, [rbp+var_315]
.text:00000000000079BA                 mov     rax, [rbp+format]
.text:00000000000079C1                 mov     [rax], cl
.text:00000000000079C3
.text:00000000000079C3 loc_79C3:                               ; CODE XREF: copy_internal+2545↓j
.text:00000000000079C3                                         ; copy_internal+2C5B↓j
.text:00000000000079C3                 test    r13b, r13b
.text:00000000000079C6                 jnz     loc_7FA2
.text:00000000000079CC                 movzx   eax, byte ptr [rbp+ptr]
.text:00000000000079D3                 mov     byte ptr [rbp+fildes], 0
.text:00000000000079DA                 mov     [rbp+var_315], al
.text:00000000000079E0                 jmp     loc_609A
.text:00000000000079E0 ; ---------------------------------------------------------------------------
.text:00000000000079E5                 align 8
.text:00000000000079E8
.text:00000000000079E8 loc_79E8:                               ; CODE XREF: copy_internal+CC8↑j
.text:00000000000079E8                 cmp     byte ptr [rbx+18h], 0
.text:00000000000079EC                 jz      loc_7DFB
.text:00000000000079F2                 mov     r15d, [rbx]
.text:00000000000079F5                 test    r15d, r15d
.text:00000000000079F8                 jz      loc_7DFB
.text:00000000000079FE                 test    r13b, r13b
.text:0000000000007A01                 jnz     loc_675A
.text:0000000000007A07
.text:0000000000007A07 loc_7A07:                               ; CODE XREF: copy_internal+CE8↑j
.text:0000000000007A07                                         ; copy_internal+12E9↑j
.text:0000000000007A07                 mov     edx, [rbp+stat_buf.st_mode]
.text:0000000000007A0D                 and     edx, 0F000h
.text:0000000000007A13                 cmp     edx, 4000h
.text:0000000000007A19                 jz      loc_7FD6
.text:0000000000007A1F
.text:0000000000007A1F loc_7A1F:                               ; CODE XREF: copy_internal+21CF↓j
.text:0000000000007A1F                                         ; copy_internal+2569↓j
.text:0000000000007A1F                 mov     rdi, [rbp+filename]
.text:0000000000007A26                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007A2D                 mov     byte ptr [rbp+old], r8b
.text:0000000000007A34                 call    last_component
.text:0000000000007A39                 cmp     byte ptr [rax], 2Eh ; '.'
.text:0000000000007A3C                 mov     r14, rax
.text:0000000000007A3F                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007A47                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007A4F                 jnz     loc_67DD
.text:0000000000007A55                 mov     eax, 1
.text:0000000000007A5A                 jmp     loc_67A2
.text:0000000000007A5A ; ---------------------------------------------------------------------------
.text:0000000000007A5F                 align 20h
.text:0000000000007A60
.text:0000000000007A60 loc_7A60:                               ; CODE XREF: copy_internal+10A0↑j
.text:0000000000007A60                 mov     rsi, [rbp+s2]
.text:0000000000007A67                 mov     rdi, [rbp+file]
.text:0000000000007A6E                 call    same_name
.text:0000000000007A73                 test    al, al
.text:0000000000007A75                 jnz     loc_814A
.text:0000000000007A7B                 mov     eax, [rbx+4]
.text:0000000000007A7E                 cmp     eax, 4
.text:0000000000007A81                 jz      loc_7000
.text:0000000000007A87                 cmp     eax, 3
.text:0000000000007A8A                 jnz     short loc_7A95
.text:0000000000007A8C                 test    r13b, r13b
.text:0000000000007A8F                 jnz     loc_7000
.text:0000000000007A95
.text:0000000000007A95 loc_7A95:                               ; CODE XREF: copy_internal+200A↑j
.text:0000000000007A95                 mov     rdx, [rbp+s2]
.text:0000000000007A9C                 mov     esi, 4
.text:0000000000007AA1                 mov     edi, 1
.text:0000000000007AA6                 call    quotearg_n_style
.text:0000000000007AAB                 mov     rdx, [rbp+file]
.text:0000000000007AB2                 xor     edi, edi
.text:0000000000007AB4                 mov     esi, 4
.text:0000000000007AB9                 mov     r13, rax
.text:0000000000007ABC                 call    quotearg_n_style
.text:0000000000007AC1                 lea     rsi, aWillNotCreateH ; "will not create hard link %s to directo"...
.text:0000000000007AC8                 mov     r12, rax
.text:0000000000007ACB                 xor     edi, edi        ; domainname
.text:0000000000007ACD                 mov     edx, 5          ; category
.text:0000000000007AD2                 call    _dcgettext
.text:0000000000007AD7                 mov     r8, r13
.text:0000000000007ADA                 mov     rdx, rax        ; format
.text:0000000000007ADD                 mov     rcx, r12
.text:0000000000007AE0                 xor     esi, esi        ; errnum
.text:0000000000007AE2                 xor     edi, edi        ; status
.text:0000000000007AE4                 xor     eax, eax
.text:0000000000007AE6                 call    _error
.text:0000000000007AEB                 jmp     loc_6B86
.text:0000000000007AF0 ; ---------------------------------------------------------------------------
.text:0000000000007AF0
.text:0000000000007AF0 loc_7AF0:                               ; CODE XREF: copy_internal+495↑j
.text:0000000000007AF0                 cmp     byte ptr [rbx+17h], 0
.text:0000000000007AF4                 jz      loc_6B98
.text:0000000000007AFA                 mov     [rbp+s2], 0
.text:0000000000007B05                 jmp     loc_6BD3
.text:0000000000007B05 ; ---------------------------------------------------------------------------
.text:0000000000007B0A                 align 10h
.text:0000000000007B10
.text:0000000000007B10 loc_7B10:                               ; CODE XREF: copy_internal+188F↑j
.text:0000000000007B10                                         ; copy_internal+18A4↑j
.text:0000000000007B10                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000007B16                 xor     esi, esi
.text:0000000000007B18                 cmp     dword ptr [rbx+4], 2
.text:0000000000007B1C                 mov     rdi, [rbp+filename]
.text:0000000000007B23                 mov     dword ptr [rbp+var_340], eax
.text:0000000000007B29                 movzx   eax, byte ptr [rbx+23h]
.text:0000000000007B2D                 setz    sil
.text:0000000000007B31                 shl     esi, 11h
.text:0000000000007B34                 mov     byte ptr [rbp+format], al
.text:0000000000007B3A                 xor     eax, eax
.text:0000000000007B3C                 call    open_safer
.text:0000000000007B41                 test    eax, eax
.text:0000000000007B43                 mov     [rbp+fildes], eax
.text:0000000000007B49                 js      loc_824B
.text:0000000000007B4F                 mov     esi, [rbp+fildes] ; fildes
.text:0000000000007B55                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000007B5C                 mov     edi, 1          ; ver
.text:0000000000007B61                 call    ___fxstat
.text:0000000000007B66                 test    eax, eax
.text:0000000000007B68                 jnz     loc_8487
.text:0000000000007B6E                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007B75                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000007B7C                 jnz     short loc_7B92
.text:0000000000007B7E                 mov     rax, [rbp+var_160.st_dev]
.text:0000000000007B85                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000007B8C                 jz      loc_88B6
.text:0000000000007B92
.text:0000000000007B92 loc_7B92:                               ; CODE XREF: copy_internal+20FC↑j
.text:0000000000007B92                 mov     rsi, [rbp+filename]
.text:0000000000007B99                 mov     edi, 4
.text:0000000000007B9E                 call    quotearg_style
.text:0000000000007BA3                 lea     rsi, aSkippingFileSA ; "skipping file %s, as it was replaced wh"...
.text:0000000000007BAA                 mov     r12, rax
.text:0000000000007BAD                 mov     edx, 5          ; category
.text:0000000000007BB2                 xor     edi, edi        ; domainname
.text:0000000000007BB4                 call    _dcgettext
.text:0000000000007BB9                 mov     rcx, r12
.text:0000000000007BBC                 mov     rdx, rax        ; format
.text:0000000000007BBF                 xor     esi, esi        ; errnum
.text:0000000000007BC1
.text:0000000000007BC1 loc_7BC1:                               ; CODE XREF: copy_internal+2A46↓j
.text:0000000000007BC1                                         ; copy_internal+3FBF↓j
.text:0000000000007BC1                 xor     edi, edi        ; status
.text:0000000000007BC3                 xor     eax, eax
.text:0000000000007BC5                 call    _error
.text:0000000000007BCA                 xor     r8d, r8d
.text:0000000000007BCD                 mov     [rbp+ptr], 0
.text:0000000000007BD8
.text:0000000000007BD8 loc_7BD8:                               ; CODE XREF: copy_internal+32B1↓j
.text:0000000000007BD8                                         ; copy_internal+3302↓j ...
.text:0000000000007BD8                 mov     edi, [rbp+fildes] ; fd
.text:0000000000007BDE                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007BE5                 call    _close
.text:0000000000007BEA                 test    eax, eax
.text:0000000000007BEC                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007BF4                 js      loc_8647
.text:0000000000007BFA                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000007C01                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007C08                 call    free
.text:0000000000007C0D                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007C15                 mov     byte ptr [rbp+fildes], 0
.text:0000000000007C1C                 test    r8b, r8b
.text:0000000000007C1F                 jnz     loc_5FFF
.text:0000000000007C25                 jmp     loc_6A10
.text:0000000000007C25 ; ---------------------------------------------------------------------------
.text:0000000000007C2A                 align 10h
.text:0000000000007C30
.text:0000000000007C30 loc_7C30:                               ; CODE XREF: copy_internal+17F9↑j
.text:0000000000007C30                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000007C36                 and     eax, 0F000h
.text:0000000000007C3B                 cmp     eax, 4000h
.text:0000000000007C40                 jz      loc_7FD0
.text:0000000000007C46
.text:0000000000007C46 loc_7C46:                               ; CODE XREF: copy_internal+2560↓j
.text:0000000000007C46                 test    r15d, r15d
.text:0000000000007C49                 jz      loc_72A7
.text:0000000000007C4F                 jmp     loc_7A1F
.text:0000000000007C4F ; ---------------------------------------------------------------------------
.text:0000000000007C54                 align 8
.text:0000000000007C58
.text:0000000000007C58 loc_7C58:                               ; CODE XREF: copy_internal+EF6↑j
.text:0000000000007C58                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000007C5F                 mov     rsi, r8         ; filename
.text:0000000000007C62                 mov     edi, 1          ; ver
.text:0000000000007C67                 call    ___xstat
.text:0000000000007C6C                 test    eax, eax
.text:0000000000007C6E                 jnz     loc_697C
.text:0000000000007C74                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000007C7B                 mov     rsi, r12        ; filename
.text:0000000000007C7E                 mov     edi, 1          ; ver
.text:0000000000007C83                 call    ___xstat
.text:0000000000007C88                 test    eax, eax
.text:0000000000007C8A                 jnz     loc_697C
.text:0000000000007C90                 mov     rax, [rbp+var_D0.st_ino]
.text:0000000000007C97                 cmp     [rbp+var_160.st_ino], rax
.text:0000000000007C9E                 jz      loc_8DA7
.text:0000000000007CA4
.text:0000000000007CA4 loc_7CA4:                               ; CODE XREF: copy_internal+3335↓j
.text:0000000000007CA4                 mov     rdi, r12        ; ptr
.text:0000000000007CA7                 call    free
.text:0000000000007CAC                 mov     rdx, [rbp+file]
.text:0000000000007CB3                 mov     esi, 3
.text:0000000000007CB8                 xor     edi, edi
.text:0000000000007CBA                 call    quotearg_n_style_colon
.text:0000000000007CBF                 mov     edx, 5
.text:0000000000007CC4                 mov     r12, rax
.text:0000000000007CC7                 lea     rsi, aSCanMakeRelati ; "%s: can make relative symbolic links on"...
.text:0000000000007CCE                 jmp     loc_6628
.text:0000000000007CD3 ; ---------------------------------------------------------------------------
.text:0000000000007CD3
.text:0000000000007CD3 loc_7CD3:                               ; CODE XREF: copy_internal+15AC↑j
.text:0000000000007CD3                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000007CD9                 lea     rdx, [rbp+stat_buf]
.text:0000000000007CE0                 and     eax, 0F000h
.text:0000000000007CE5                 cmp     eax, 0A000h
.text:0000000000007CEA                 jnz     loc_7032
.text:0000000000007CF0                 mov     rsi, [rbp+file]
.text:0000000000007CF7                 mov     rdi, [rbp+filename]
.text:0000000000007CFE                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007D05                 mov     byte ptr [rbp+old], r8b
.text:0000000000007D0C                 call    same_name
.text:0000000000007D11                 test    al, al
.text:0000000000007D13                 jnz     loc_7080
.text:0000000000007D19                 mov     edi, [rbx]
.text:0000000000007D1B                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007D23                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007D2B                 test    edi, edi
.text:0000000000007D2D                 jnz     loc_6ECE
.text:0000000000007D33                 test    r15d, r15d
.text:0000000000007D36                 jz      loc_6ECE
.text:0000000000007D3C                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000007D41                 mov     eax, 1
.text:0000000000007D46                 xor     r12d, 1
.text:0000000000007D4A                 jmp     loc_71FC
.text:0000000000007D4A ; ---------------------------------------------------------------------------
.text:0000000000007D4F                 align 10h
.text:0000000000007D50
.text:0000000000007D50 loc_7D50:                               ; CODE XREF: copy_internal+59C↑j
.text:0000000000007D50                 mov     r15d, eax
.text:0000000000007D53                 mov     rax, 0FF000000FF00h
.text:0000000000007D5D                 test    [rbx+20h], rax
.text:0000000000007D61                 jz      loc_6022
.text:0000000000007D67                 movzx   esi, byte ptr [rbx+25h]
.text:0000000000007D6B                 mov     rdi, [rbp+file]
.text:0000000000007D72                 xor     edx, edx
.text:0000000000007D74                 mov     rcx, rbx
.text:0000000000007D77                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007D7E                 call    set_file_security_ctx
.text:0000000000007D83                 test    al, al
.text:0000000000007D85                 mov     r15d, eax
.text:0000000000007D88                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007D90                 jnz     loc_6022
.text:0000000000007D96                 movzx   r14d, byte ptr [rbx+26h]
.text:0000000000007D9B                 test    r14b, r14b
.text:0000000000007D9E                 jnz     loc_6A10
.text:0000000000007DA4                 mov     r15d, r12d
.text:0000000000007DA7                 jmp     loc_6022
.text:0000000000007DA7 ; ---------------------------------------------------------------------------
.text:0000000000007DAC                 align 10h
.text:0000000000007DB0
.text:0000000000007DB0 loc_7DB0:                               ; CODE XREF: copy_internal+9EB↑j
.text:0000000000007DB0                 lea     rsi, aCopied    ; "copied "
.text:0000000000007DB7                 mov     edx, 5          ; category
.text:0000000000007DBC                 xor     edi, edi        ; domainname
.text:0000000000007DBE                 call    _dcgettext
.text:0000000000007DC3                 mov     edi, 1
.text:0000000000007DC8                 mov     rsi, rax
.text:0000000000007DCB                 xor     eax, eax
.text:0000000000007DCD                 call    ___printf_chk
.text:0000000000007DD2                 mov     rdx, [rbp+old]
.text:0000000000007DD9                 mov     rsi, [rbp+file]
.text:0000000000007DE0                 mov     rdi, [rbp+filename]
.text:0000000000007DE7                 call    emit_verbose
.text:0000000000007DEC                 mov     [rbp+fildes], 1
.text:0000000000007DF6                 jmp     loc_5F30
.text:0000000000007DFB ; ---------------------------------------------------------------------------
.text:0000000000007DFB
.text:0000000000007DFB loc_7DFB:                               ; CODE XREF: copy_internal+1F6C↑j
.text:0000000000007DFB                                         ; copy_internal+1F78↑j
.text:0000000000007DFB                 mov     rdx, [rbp+filename]
.text:0000000000007E02                 mov     esi, 4
.text:0000000000007E07                 mov     edi, 1
.text:0000000000007E0C                 call    quotearg_n_style
.text:0000000000007E11                 mov     rdx, [rbp+file]
.text:0000000000007E18                 mov     esi, 4
.text:0000000000007E1D                 xor     edi, edi
.text:0000000000007E1F                 mov     r12, rax
.text:0000000000007E22                 call    quotearg_n_style
.text:0000000000007E27                 mov     edx, 5
.text:0000000000007E2C                 mov     rbx, rax
.text:0000000000007E2F                 lea     rsi, aCannotOverwrit_0 ; "cannot overwrite non-directory %s with "...
.text:0000000000007E36                 jmp     loc_70BB
.text:0000000000007E3B ; ---------------------------------------------------------------------------
.text:0000000000007E3B
.text:0000000000007E3B loc_7E3B:                               ; CODE XREF: copy_internal+1821↑j
.text:0000000000007E3B                 cmp     byte ptr [rbx+15h], 0
.text:0000000000007E3F                 jnz     short loc_7E59
.text:0000000000007E41                 cmp     byte ptr [rbx+22h], 0
.text:0000000000007E45                 jz      loc_8226
.text:0000000000007E4B                 cmp     [rbp+var_1F0.st_nlink], 1
.text:0000000000007E53                 jbe     loc_8226
.text:0000000000007E59
.text:0000000000007E59 loc_7E59:                               ; CODE XREF: copy_internal+23BF↑j
.text:0000000000007E59                                         ; copy_internal+27C0↓j
.text:0000000000007E59                 mov     r14, [rbp+file]
.text:0000000000007E60                 mov     byte ptr [rbp+old], r9b
.text:0000000000007E67                 mov     rdi, r14        ; name
.text:0000000000007E6A                 call    _unlink
.text:0000000000007E6F                 test    eax, eax
.text:0000000000007E71                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000007E79                 jz      loc_81F3
.text:0000000000007E7F                 call    ___errno_location
.text:0000000000007E84                 cmp     dword ptr [rax], 2
.text:0000000000007E87                 mov     r15, rax
.text:0000000000007E8A                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000007E92                 jz      loc_81F3
.text:0000000000007E98                 mov     rsi, r14
.text:0000000000007E9B                 mov     edi, 4
.text:0000000000007EA0                 call    quotearg_style
.text:0000000000007EA5                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:0000000000007EAC                 xor     edi, edi        ; domainname
.text:0000000000007EAE                 mov     edx, 5          ; category
.text:0000000000007EB3                 mov     rbx, rax
.text:0000000000007EB6                 call    _dcgettext
.text:0000000000007EBB                 mov     esi, [r15]      ; errnum
.text:0000000000007EBE                 mov     rdx, rax        ; format
.text:0000000000007EC1                 mov     rcx, rbx
.text:0000000000007EC4                 xor     edi, edi        ; status
.text:0000000000007EC6                 xor     eax, eax
.text:0000000000007EC8                 call    _error
.text:0000000000007ECD                 jmp     loc_62C6
.text:0000000000007ED2 ; ---------------------------------------------------------------------------
.text:0000000000007ED2
.text:0000000000007ED2 loc_7ED2:                               ; CODE XREF: copy_internal+1448↑j
.text:0000000000007ED2                 lea     rax, [rbp+var_D0]
.text:0000000000007ED9                 mov     rsi, [rbp+filename] ; filename
.text:0000000000007EE0                 mov     edi, 1          ; ver
.text:0000000000007EE5                 mov     rdx, rax        ; stat_buf
.text:0000000000007EE8                 mov     [rbp+s], rax
.text:0000000000007EEF                 call    ___lxstat
.text:0000000000007EF4                 test    eax, eax
.text:0000000000007EF6                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007EFE                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007F06                 jnz     loc_6ECE
.text:0000000000007F0C                 xor     ecx, ecx
.text:0000000000007F0E                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007F15                 cmp     [rbp+var_D0.st_ino], rax
.text:0000000000007F1C                 jnz     short loc_7F2F
.text:0000000000007F1E                 mov     rax, [rbp+var_160.st_dev]
.text:0000000000007F25                 cmp     [rbp+var_D0.st_dev], rax
.text:0000000000007F2C                 setz    cl
.text:0000000000007F2F
.text:0000000000007F2F loc_7F2F:                               ; CODE XREF: copy_internal+249C↑j
.text:0000000000007F2F                 mov     eax, [rbp+var_D0.st_mode]
.text:0000000000007F35                 mov     rdx, [rbp+s]
.text:0000000000007F3C                 and     eax, 0F000h
.text:0000000000007F41                 cmp     eax, 0A000h
.text:0000000000007F46                 jnz     loc_7032
.text:0000000000007F4C                 mov     eax, [rbp+var_160.st_mode]
.text:0000000000007F52                 and     eax, 0F000h
.text:0000000000007F57                 cmp     eax, 0A000h
.text:0000000000007F5C                 jnz     loc_7032
.text:0000000000007F62                 cmp     byte ptr [rbx+15h], 0
.text:0000000000007F66                 jz      loc_7032
.text:0000000000007F6C                 jmp     loc_6ECE
.text:0000000000007F6C ; ---------------------------------------------------------------------------
.text:0000000000007F71                 align 8
.text:0000000000007F78
.text:0000000000007F78 loc_7F78:                               ; CODE XREF: copy_internal+149B↑j
.text:0000000000007F78                 mov     rax, 0FF000000FF00h
.text:0000000000007F82                 test    [rbx+20h], rax
.text:0000000000007F86                 jnz     loc_8540
.text:0000000000007F8C
.text:0000000000007F8C loc_7F8C:                               ; CODE XREF: copy_internal+2AD7↓j
.text:0000000000007F8C                                         ; copy_internal+2AE7↓j
.text:0000000000007F8C                 mov     byte ptr [rbp+ptr], 0
.text:0000000000007F93                 mov     [rbp+var_35C], 0
.text:0000000000007F9D                 jmp     loc_77C8
.text:0000000000007FA2 ; ---------------------------------------------------------------------------
.text:0000000000007FA2
.text:0000000000007FA2 loc_7FA2:                               ; CODE XREF: copy_internal+1F46↑j
.text:0000000000007FA2                 mov     [rbp+var_315], r12b
.text:0000000000007FA9                 xor     r15d, r15d
.text:0000000000007FAC                 xor     r8d, r8d
.text:0000000000007FAF                 mov     byte ptr [rbp+fildes], 0
.text:0000000000007FB6                 jmp     loc_6034
.text:0000000000007FBB ; ---------------------------------------------------------------------------
.text:0000000000007FBB
.text:0000000000007FBB loc_7FBB:                               ; CODE XREF: copy_internal+1D5A↑j
.text:0000000000007FBB                 mov     rcx, [rbp+stat_buf.st_dev]
.text:0000000000007FC2                 cmp     [rax], rcx
.text:0000000000007FC5                 jnz     loc_79C3
.text:0000000000007FCB                 jmp     loc_77E0
.text:0000000000007FD0 ; ---------------------------------------------------------------------------
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: copy_internal+21C0↑j
.text:0000000000007FD0                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000007FD6
.text:0000000000007FD6 loc_7FD6:                               ; CODE XREF: copy_internal+1F99↑j
.text:0000000000007FD6                 and     eax, 0F000h
.text:0000000000007FDB                 cmp     eax, 4000h
.text:0000000000007FE0                 jz      loc_7C46
.text:0000000000007FE6                 test    r15d, r15d
.text:0000000000007FE9                 jnz     loc_7A1F
.text:0000000000007FEF                 mov     rdx, [rbp+file]
.text:0000000000007FF6                 mov     esi, 3
.text:0000000000007FFB                 xor     edi, edi
.text:0000000000007FFD                 call    quotearg_n_style_colon
.text:0000000000008002                 mov     rdx, [rbp+filename]
.text:0000000000008009                 mov     esi, 3
.text:000000000000800E                 xor     edi, edi
.text:0000000000008010                 mov     r12, rax
.text:0000000000008013                 call    quotearg_n_style_colon
.text:0000000000008018                 mov     edx, 5
.text:000000000000801D                 mov     rbx, rax
.text:0000000000008020                 lea     rsi, aCannotMoveDire ; "cannot move directory onto non-director"...
.text:0000000000008027                 jmp     loc_70BB
.text:000000000000802C ; ---------------------------------------------------------------------------
.text:000000000000802C
.text:000000000000802C loc_802C:                               ; CODE XREF: copy_internal+18C2↑j
.text:000000000000802C                                         ; copy_internal+18CF↑j
.text:000000000000802C                 mov     edx, [rbp+var_35C]
.text:0000000000008032                 mov     rax, [rbp+stat_buf.st_rdev]
.text:0000000000008039                 lea     rcx, [rbp+dev]  ; dev
.text:0000000000008040                 mov     rsi, [rbp+file] ; path
.text:0000000000008047                 xor     edi, edi        ; ver
.text:0000000000008049                 mov     byte ptr [rbp+fd], r8b
.text:0000000000008050                 not     edx
.text:0000000000008052                 and     edx, [rbp+var_314] ; mode
.text:0000000000008058                 mov     [rbp+dev], rax
.text:000000000000805F                 call    ___xmknod
.text:0000000000008064                 test    eax, eax
.text:0000000000008066                 mov     byte ptr [rbp+fildes], 0
.text:000000000000806D                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000008075                 jz      loc_5FFF
.text:000000000000807B                 mov     rsi, [rbp+file]
.text:0000000000008082                 mov     edi, 4
.text:0000000000008087                 call    quotearg_style
.text:000000000000808C                 mov     edx, 5
.text:0000000000008091                 mov     r13, rax
.text:0000000000008094                 lea     rsi, aCannotCreateSp ; "cannot create special file %s"
.text:000000000000809B                 jmp     loc_6F5F
.text:00000000000080A0 ; ---------------------------------------------------------------------------
.text:00000000000080A0
.text:00000000000080A0 loc_80A0:                               ; CODE XREF: copy_internal+671↑j
.text:00000000000080A0                 call    utimens
.text:00000000000080A5                 test    eax, eax
.text:00000000000080A7                 jz      loc_6165
.text:00000000000080AD                 jmp     loc_610A
.text:00000000000080B2 ; ---------------------------------------------------------------------------
.text:00000000000080B2
.text:00000000000080B2 loc_80B2:                               ; CODE XREF: copy_internal+5E7↑j
.text:00000000000080B2                 mov     rdi, [rbx+40h]
.text:00000000000080B6                 mov     rsi, [rbp+file]
.text:00000000000080BD                 mov     rdx, r12
.text:00000000000080C0                 call    record_file
.text:00000000000080C5                 movzx   r8d, byte ptr [rbp+fd]
.text:00000000000080CD                 jmp     loc_606D
.text:00000000000080D2 ; ---------------------------------------------------------------------------
.text:00000000000080D2
.text:00000000000080D2 loc_80D2:                               ; CODE XREF: copy_internal+15BE↑j
.text:00000000000080D2                 mov     rsi, [rbp+file]
.text:00000000000080D9                 mov     rdi, [rbp+filename]
.text:00000000000080E0                 mov     byte ptr [rbp+s2], r9b
.text:00000000000080E7                 mov     byte ptr [rbp+old], r8b
.text:00000000000080EE                 call    same_name
.text:00000000000080F3                 xor     eax, 1
.text:00000000000080F6                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000080FE                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000008106                 mov     r12d, eax
.text:0000000000008109                 xor     eax, eax
.text:000000000000810B                 jmp     loc_71FC
.text:0000000000008110 ; ---------------------------------------------------------------------------
.text:0000000000008110
.text:0000000000008110 loc_8110:                               ; CODE XREF: copy_internal+127E↑j
.text:0000000000008110                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000008118                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000008120                 jmp     loc_6710
.text:0000000000008125 ; ---------------------------------------------------------------------------
.text:0000000000008125
.text:0000000000008125 loc_8125:                               ; CODE XREF: copy_internal+1C9A↑j
.text:0000000000008125                 mov     rsi, [rbp+file]
.text:000000000000812C                 mov     edi, 4
.text:0000000000008131                 call    quotearg_style
.text:0000000000008136                 mov     edx, 5
.text:000000000000813B                 mov     r13, rax
.text:000000000000813E                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000008145                 jmp     loc_6F5F
.text:000000000000814A ; ---------------------------------------------------------------------------
.text:000000000000814A
.text:000000000000814A loc_814A:                               ; CODE XREF: copy_internal+1FF5↑j
.text:000000000000814A                 mov     rsi, cs:top_level_src_name
.text:0000000000008151                 mov     edi, 4
.text:0000000000008156                 call    quotearg_style
.text:000000000000815B                 lea     rsi, aWarningSourceD ; "warning: source directory %s specified "...
.text:0000000000008162                 xor     edi, edi        ; domainname
.text:0000000000008164                 mov     r12, rax
.text:0000000000008167                 mov     edx, 5          ; category
.text:000000000000816C                 call    _dcgettext
.text:0000000000008171                 xor     esi, esi        ; errnum
.text:0000000000008173                 mov     rdx, rax        ; format
.text:0000000000008176                 xor     edi, edi        ; status
.text:0000000000008178                 xor     eax, eax
.text:000000000000817A                 mov     rcx, r12
.text:000000000000817D                 call    _error
.text:0000000000008182                 cmp     byte ptr [rbx+18h], 0
.text:0000000000008186                 jnz     loc_6D04
.text:000000000000818C                 jmp     loc_62C0
.text:0000000000008191 ; ---------------------------------------------------------------------------
.text:0000000000008191
.text:0000000000008191 loc_8191:                               ; CODE XREF: copy_internal+DF1↑j
.text:0000000000008191                 mov     byte ptr [rbp+old], r9b
.text:0000000000008198                 call    ___errno_location
.text:000000000000819D                 cmp     dword ptr [rax], 2
.text:00000000000081A0                 mov     r12, rax
.text:00000000000081A3                 movzx   r9d, byte ptr [rbp+old]
.text:00000000000081AB                 jz      loc_8611
.text:00000000000081B1                 mov     rsi, [rbp+file]
.text:00000000000081B8                 mov     edi, 4
.text:00000000000081BD                 call    quotearg_style
.text:00000000000081C2                 lea     rsi, aCannotBackupS ; "cannot backup %s"
.text:00000000000081C9                 mov     edx, 5          ; category
.text:00000000000081CE                 xor     edi, edi        ; domainname
.text:00000000000081D0                 mov     rbx, rax
.text:00000000000081D3                 call    _dcgettext
.text:00000000000081D8                 mov     esi, [r12]      ; errnum
.text:00000000000081DC                 mov     rdx, rax        ; format
.text:00000000000081DF                 mov     rcx, rbx
.text:00000000000081E2                 xor     edi, edi        ; status
.text:00000000000081E4                 xor     eax, eax
.text:00000000000081E6                 xor     r12d, r12d
.text:00000000000081E9                 call    _error
.text:00000000000081EE                 jmp     loc_62C6
.text:00000000000081F3 ; ---------------------------------------------------------------------------
.text:00000000000081F3
.text:00000000000081F3 loc_81F3:                               ; CODE XREF: copy_internal+23F9↑j
.text:00000000000081F3                                         ; copy_internal+2412↑j
.text:00000000000081F3                 movzx   r14d, byte ptr [rbx+2Eh]
.text:00000000000081F8                 test    r14b, r14b
.text:00000000000081FB                 jnz     loc_87CC
.text:0000000000008201                 test    r13b, r13b
.text:0000000000008204                 jnz     loc_87A8
.text:000000000000820A                 mov     [rbp+old], 0
.text:0000000000008215                 mov     r14d, 1
.text:000000000000821B                 mov     r15d, 11h
.text:0000000000008221                 jmp     loc_5EE9
.text:0000000000008226 ; ---------------------------------------------------------------------------
.text:0000000000008226
.text:0000000000008226 loc_8226:                               ; CODE XREF: copy_internal+23C5↑j
.text:0000000000008226                                         ; copy_internal+23D3↑j
.text:0000000000008226                 cmp     dword ptr [rbx+4], 2
.text:000000000000822A                 jnz     loc_72A7
.text:0000000000008230                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000008236                 and     eax, 0F000h
.text:000000000000823B                 cmp     eax, 8000h
.text:0000000000008240                 jnz     loc_7E59
.text:0000000000008246                 jmp     loc_72A7
.text:000000000000824B ; ---------------------------------------------------------------------------
.text:000000000000824B
.text:000000000000824B loc_824B:                               ; CODE XREF: copy_internal+20C9↑j
.text:000000000000824B                 mov     rsi, [rbp+filename]
.text:0000000000008252                 mov     edi, 4
.text:0000000000008257                 call    quotearg_style
.text:000000000000825C                 mov     edx, 5
.text:0000000000008261                 mov     r13, rax
.text:0000000000008264                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:000000000000826B                 jmp     loc_6F5F
.text:0000000000008270 ; ---------------------------------------------------------------------------
.text:0000000000008270
.text:0000000000008270 loc_8270:                               ; CODE XREF: copy_internal+755↑j
.text:0000000000008270                 mov     r8d, [rbp+var_314]
.text:0000000000008277                 mov     rdx, [rbp+file]
.text:000000000000827E                 mov     ecx, 0FFFFFFFFh
.text:0000000000008283                 mov     rdi, [rbp+filename]
.text:000000000000828A                 mov     esi, ecx
.text:000000000000828C                 call    copy_acl
.text:0000000000008291                 test    eax, eax
.text:0000000000008293                 jnz     loc_626A
.text:0000000000008299                 jmp     loc_62C6
.text:000000000000829E ; ---------------------------------------------------------------------------
.text:000000000000829E
.text:000000000000829E loc_829E:                               ; CODE XREF: copy_internal+DC3↑j
.text:000000000000829E                 mov     rdx, r12        ; n
.text:00000000000082A1                 mov     rdi, r14        ; s1
.text:00000000000082A4                 mov     byte ptr [rbp+old], r9b
.text:00000000000082AB                 mov     [rbp+s2], r8
.text:00000000000082B2                 call    _memcmp
.text:00000000000082B7                 test    eax, eax
.text:00000000000082B9                 movzx   r9d, byte ptr [rbp+old]
.text:00000000000082C1                 jnz     loc_6849
.text:00000000000082C7                 lea     rdi, [r14+r12]  ; s1
.text:00000000000082CB                 mov     rsi, r15        ; s2
.text:00000000000082CE                 call    _strcmp
.text:00000000000082D3                 test    eax, eax
.text:00000000000082D5                 movzx   r9d, byte ptr [rbp+old]
.text:00000000000082DD                 mov     r8, [rbp+s2]
.text:00000000000082E4                 jnz     loc_6849
.text:00000000000082EA                 mov     rdi, [rbp+file]
.text:00000000000082F1                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000082F5                 repne scasb
.text:00000000000082F7                 mov     rax, rcx
.text:00000000000082FA                 not     rax
.text:00000000000082FD                 lea     r14, [rax-1]
.text:0000000000008301                 lea     rdi, [r14+r8+1]
.text:0000000000008306                 call    xmalloc
.text:000000000000830B                 mov     r15, cs:simple_backup_suffix
.text:0000000000008312                 mov     rsi, [rbp+file] ; src
.text:0000000000008319                 mov     rdx, r14        ; n
.text:000000000000831C                 mov     rdi, rax        ; dest
.text:000000000000831F                 mov     r12, rax
.text:0000000000008322                 call    _mempcpy
.text:0000000000008327                 mov     rsi, r15        ; src
.text:000000000000832A                 mov     rdi, rax        ; dest
.text:000000000000832D                 call    _strcpy
.text:0000000000008332                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000008339                 mov     rsi, r12        ; filename
.text:000000000000833C                 mov     edi, 1          ; ver
.text:0000000000008341                 call    ___xstat
.text:0000000000008346                 mov     rdi, r12        ; ptr
.text:0000000000008349                 mov     r15d, eax
.text:000000000000834C                 call    free
.text:0000000000008351                 test    r15d, r15d
.text:0000000000008354                 movzx   r9d, byte ptr [rbp+old]
.text:000000000000835C                 jnz     loc_6849
.text:0000000000008362                 mov     rax, [rbp+var_D0.st_ino]
.text:0000000000008369                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000008370                 jnz     loc_6849
.text:0000000000008376                 mov     rax, [rbp+var_D0.st_dev]
.text:000000000000837D                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000008384                 jnz     loc_6849
.text:000000000000838A                 cmp     byte ptr [rbx+18h], 0
.text:000000000000838E                 jz      loc_85F6
.text:0000000000008394                 lea     rsi, aBackingUpSMigh ; "backing up %s might destroy source;  %s"...
.text:000000000000839B                 mov     edx, 5          ; category
.text:00000000000083A0                 xor     edi, edi        ; domainname
.text:00000000000083A2                 call    _dcgettext
.text:00000000000083A7                 mov     rbx, rax
.text:00000000000083AA
.text:00000000000083AA loc_83AA:                               ; CODE XREF: copy_internal+2B8C↓j
.text:00000000000083AA                 mov     rdx, [rbp+filename]
.text:00000000000083B1                 mov     esi, 4
.text:00000000000083B6                 mov     edi, 1
.text:00000000000083BB                 call    quotearg_n_style
.text:00000000000083C0                 mov     rdx, [rbp+file]
.text:00000000000083C7                 mov     r12, rax
.text:00000000000083CA                 mov     esi, 4
.text:00000000000083CF                 xor     edi, edi
.text:00000000000083D1                 call    quotearg_n_style
.text:00000000000083D6                 mov     r8, r12
.text:00000000000083D9                 mov     rcx, rax
.text:00000000000083DC                 mov     rdx, rbx        ; format
.text:00000000000083DF                 xor     esi, esi        ; errnum
.text:00000000000083E1                 xor     edi, edi        ; status
.text:00000000000083E3                 xor     eax, eax
.text:00000000000083E5                 call    _error
.text:00000000000083EA                 xor     r12d, r12d
.text:00000000000083ED                 jmp     loc_62C6
.text:00000000000083F2 ; ---------------------------------------------------------------------------
.text:00000000000083F2
.text:00000000000083F2 loc_83F2:                               ; CODE XREF: copy_internal+18B1↑j
.text:00000000000083F2                 mov     r12d, [rbp+var_35C]
.text:00000000000083F9                 mov     rsi, [rbp+file] ; path
.text:0000000000008400                 lea     rcx, [rbp+var_2F8] ; dev
.text:0000000000008407                 xor     edi, edi        ; ver
.text:0000000000008409                 mov     byte ptr [rbp+fildes], r8b
.text:0000000000008410                 mov     [rbp+var_2F8], 0
.text:000000000000841B                 not     r12d
.text:000000000000841E                 and     r12d, [rbp+var_314]
.text:0000000000008425                 mov     edx, r12d       ; mode
.text:0000000000008428                 call    ___xmknod
.text:000000000000842D                 test    eax, eax
.text:000000000000842F                 movzx   r8d, byte ptr [rbp+fildes]
.text:0000000000008437                 jz      loc_5FFF
.text:000000000000843D                 mov     rdi, [rbp+file] ; path
.text:0000000000008444                 mov     esi, r12d
.text:0000000000008447                 and     esi, 0FFFFEFFFh ; mode
.text:000000000000844D                 call    _mkfifo
.text:0000000000008452                 test    eax, eax
.text:0000000000008454                 movzx   r8d, byte ptr [rbp+fildes]
.text:000000000000845C                 jz      loc_5FFF
.text:0000000000008462                 mov     rsi, [rbp+file]
.text:0000000000008469                 mov     edi, 4
.text:000000000000846E                 call    quotearg_style
.text:0000000000008473                 mov     edx, 5
.text:0000000000008478                 mov     r13, rax
.text:000000000000847B                 lea     rsi, aCannotCreateFi ; "cannot create fifo %s"
.text:0000000000008482                 jmp     loc_6F5F
.text:0000000000008487 ; ---------------------------------------------------------------------------
.text:0000000000008487
.text:0000000000008487 loc_8487:                               ; CODE XREF: copy_internal+20E8↑j
.text:0000000000008487                 mov     rsi, [rbp+filename]
.text:000000000000848E                 mov     edi, 4
.text:0000000000008493                 call    quotearg_style
.text:0000000000008498                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:000000000000849F                 mov     edx, 5          ; category
.text:00000000000084A4                 mov     r12, rax
.text:00000000000084A7                 xor     edi, edi        ; domainname
.text:00000000000084A9                 call    _dcgettext
.text:00000000000084AE                 mov     qword ptr [rbp+fd], rax
.text:00000000000084B5                 call    ___errno_location
.text:00000000000084BA                 mov     rcx, r12
.text:00000000000084BD                 mov     rdx, qword ptr [rbp+fd]
.text:00000000000084C4                 mov     esi, [rax]
.text:00000000000084C6                 jmp     loc_7BC1
.text:00000000000084CB ; ---------------------------------------------------------------------------
.text:00000000000084CB
.text:00000000000084CB loc_84CB:                               ; CODE XREF: copy_internal+168F↑j
.text:00000000000084CB                 mov     rsi, [rbp+file]
.text:00000000000084D2                 mov     rdi, [rbp+filename]
.text:00000000000084D9                 mov     byte ptr [rbp+var_35C], r9b
.text:00000000000084E0                 mov     byte ptr [rbp+s2], r8b
.text:00000000000084E7                 mov     [rbp+old], rdx
.text:00000000000084EE                 call    same_name
.text:00000000000084F3                 test    al, al
.text:00000000000084F5                 mov     rdx, [rbp+old]
.text:00000000000084FC                 movzx   r8d, byte ptr [rbp+s2]
.text:0000000000008504                 movzx   r9d, byte ptr [rbp+var_35C]
.text:000000000000850C                 jz      loc_8D87
.text:0000000000008512                 mov     eax, [rdx+18h]
.text:0000000000008515                 and     eax, 0F000h
.text:000000000000851A                 cmp     eax, 0A000h
.text:000000000000851F                 jz      loc_714C
.text:0000000000008525
.text:0000000000008525 loc_8525:                               ; CODE XREF: copy_internal+1ABC↑j
.text:0000000000008525                 mov     eax, [r12+18h]
.text:000000000000852A                 and     eax, 0F000h
.text:000000000000852F                 cmp     eax, 0A000h
.text:0000000000008534                 jz      loc_714C
.text:000000000000853A                 jmp     loc_7124
.text:000000000000853A ; ---------------------------------------------------------------------------
.text:000000000000853F                 align 20h
.text:0000000000008540
.text:0000000000008540 loc_8540:                               ; CODE XREF: copy_internal+2506↑j
.text:0000000000008540                 movzx   esi, byte ptr [rbx+25h]
.text:0000000000008544                 mov     rdi, [rbp+file]
.text:000000000000854B                 xor     edx, edx
.text:000000000000854D                 mov     rcx, rbx
.text:0000000000008550                 call    set_file_security_ctx
.text:0000000000008555                 test    al, al
.text:0000000000008557                 jnz     loc_7F8C
.text:000000000000855D                 cmp     byte ptr [rbx+26h], 0
.text:0000000000008561                 jnz     loc_6A10
.text:0000000000008567                 jmp     loc_7F8C
.text:000000000000856C ; ---------------------------------------------------------------------------
.text:000000000000856C
.text:000000000000856C loc_856C:                               ; CODE XREF: copy_internal+1CF2↑j
.text:000000000000856C                 mov     rdx, [rbp+var_1F0.st_dev]
.text:0000000000008573                 mov     rsi, [rbp+var_1F0.st_ino]
.text:000000000000857A                 mov     rdi, [rbp+file] ; src
.text:0000000000008581                 call    remember_copied
.text:0000000000008586                 mov     rax, [rbp+format]
.text:000000000000858D                 mov     byte ptr [rax], 1
.text:0000000000008590                 jmp     loc_7778
.text:0000000000008595 ; ---------------------------------------------------------------------------
.text:0000000000008595
.text:0000000000008595 loc_8595:                               ; CODE XREF: copy_internal+17C7↑j
.text:0000000000008595                 mov     rdx, [rbp+filename]
.text:000000000000859C                 mov     esi, 4
.text:00000000000085A1                 mov     edi, 1
.text:00000000000085A6                 call    quotearg_n_style
.text:00000000000085AB                 mov     rdx, [rbp+file]
.text:00000000000085B2                 mov     esi, 4
.text:00000000000085B7                 xor     edi, edi
.text:00000000000085B9                 mov     r12, rax
.text:00000000000085BC                 call    quotearg_n_style
.text:00000000000085C1                 mov     edx, 5
.text:00000000000085C6                 mov     rbx, rax
.text:00000000000085C9                 lea     rsi, aWillNotOverwri ; "will not overwrite just-created %s with"...
.text:00000000000085D0                 jmp     loc_70BB
.text:00000000000085D5 ; ---------------------------------------------------------------------------
.text:00000000000085D5
.text:00000000000085D5 loc_85D5:                               ; CODE XREF: copy_internal+75F↑j
.text:00000000000085D5                 mov     edx, [rbx+10h]
.text:00000000000085D8
.text:00000000000085D8 loc_85D8:                               ; CODE XREF: copy_internal+2E31↓j
.text:00000000000085D8                 mov     rdi, [rbp+file]
.text:00000000000085DF                 mov     esi, 0FFFFFFFFh
.text:00000000000085E4                 call    set_acl
.text:00000000000085E9                 test    eax, eax
.text:00000000000085EB                 jnz     loc_5D90
.text:00000000000085F1                 jmp     loc_62C6
.text:00000000000085F6 ; ---------------------------------------------------------------------------
.text:00000000000085F6
.text:00000000000085F6 loc_85F6:                               ; CODE XREF: copy_internal+290E↑j
.text:00000000000085F6                 lea     rsi, aBackingUpSMigh_0 ; "backing up %s might destroy source;  %s"...
.text:00000000000085FD                 mov     edx, 5          ; category
.text:0000000000008602                 xor     edi, edi        ; domainname
.text:0000000000008604                 call    _dcgettext
.text:0000000000008609                 mov     rbx, rax
.text:000000000000860C                 jmp     loc_83AA
.text:0000000000008611 ; ---------------------------------------------------------------------------
.text:0000000000008611
.text:0000000000008611 loc_8611:                               ; CODE XREF: copy_internal+272B↑j
.text:0000000000008611                 mov     [rbp+old], 0
.text:000000000000861C                 mov     r14d, 1
.text:0000000000008622                 mov     r15d, 11h
.text:0000000000008628                 jmp     loc_5E0E
.text:000000000000862D ; ---------------------------------------------------------------------------
.text:000000000000862D
.text:000000000000862D loc_862D:                               ; CODE XREF: copy_internal+1D02↑j
.text:000000000000862D                 mov     rsi, [rbp+file]
.text:0000000000008634                 mov     rdi, [rbp+filename]
.text:000000000000863B                 xor     edx, edx
.text:000000000000863D                 call    emit_verbose
.text:0000000000008642                 jmp     loc_77C8
.text:0000000000008647 ; ---------------------------------------------------------------------------
.text:0000000000008647
.text:0000000000008647 loc_8647:                               ; CODE XREF: copy_internal+2174↑j
.text:0000000000008647                 mov     rsi, [rbp+filename]
.text:000000000000864E                 mov     edi, 4
.text:0000000000008653                 call    quotearg_style
.text:0000000000008658                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:000000000000865F                 xor     edi, edi        ; domainname
.text:0000000000008661                 mov     edx, 5          ; category
.text:0000000000008666                 mov     r12, rax
.text:0000000000008669                 call    _dcgettext
.text:000000000000866E                 mov     r13, rax
.text:0000000000008671                 call    ___errno_location
.text:0000000000008676                 mov     esi, [rax]      ; errnum
.text:0000000000008678                 xor     edi, edi        ; status
.text:000000000000867A                 mov     rcx, r12
.text:000000000000867D                 mov     rdx, r13        ; format
.text:0000000000008680                 xor     eax, eax
.text:0000000000008682                 call    _error
.text:0000000000008687                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000868E                 call    free
.text:0000000000008693                 jmp     loc_6A10
.text:0000000000008698 ; ---------------------------------------------------------------------------
.text:0000000000008698
.text:0000000000008698 loc_8698:                               ; CODE XREF: copy_internal+1DB6↑j
.text:0000000000008698                 mov     rsi, [rbp+filename]
.text:000000000000869F                 mov     edi, 4
.text:00000000000086A4                 call    quotearg_style
.text:00000000000086A9                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:00000000000086B0                 mov     edx, 5          ; category
.text:00000000000086B5                 xor     edi, edi        ; domainname
.text:00000000000086B7                 mov     r12, rax
.text:00000000000086BA                 call    _dcgettext
.text:00000000000086BF                 mov     r15, rax
.text:00000000000086C2                 call    ___errno_location
.text:00000000000086C7                 mov     esi, [rax]      ; errnum
.text:00000000000086C9                 mov     rcx, r12
.text:00000000000086CC                 mov     rdx, r15        ; format
.text:00000000000086CF                 xor     edi, edi        ; status
.text:00000000000086D1                 xor     eax, eax
.text:00000000000086D3                 xor     r12d, r12d
.text:00000000000086D6                 call    _error
.text:00000000000086DB                 jmp     loc_79C3
.text:00000000000086E0 ; ---------------------------------------------------------------------------
.text:00000000000086E0
.text:00000000000086E0 loc_86E0:                               ; CODE XREF: copy_internal+18DC↑j
.text:00000000000086E0                 mov     rsi, [rbp+stat_buf.st_size]
.text:00000000000086E7                 mov     rdi, [rbp+filename] ; path
.text:00000000000086EE                 call    areadlink_with_size
.text:00000000000086F3                 test    rax, rax
.text:00000000000086F6                 mov     r12, rax
.text:00000000000086F9                 jz      loc_8F43
.text:00000000000086FF                 movzx   ecx, byte ptr [rbx+16h]
.text:0000000000008703                 mov     rdx, [rbp+file]
.text:000000000000870A                 mov     r8d, 0FFFFFFFFh
.text:0000000000008710                 mov     esi, 0FFFFFF9Ch
.text:0000000000008715                 mov     rdi, rax
.text:0000000000008718                 call    force_symlinkat
.text:000000000000871D                 test    eax, eax
.text:000000000000871F                 mov     [rbp+fildes], eax
.text:0000000000008725                 jle     loc_8F68
.text:000000000000872B                 cmp     byte ptr [rbx+2Dh], 1
.text:000000000000872F                 jnz     short loc_873A
.text:0000000000008731                 test    r14b, r14b
.text:0000000000008734                 jz      loc_9319
.text:000000000000873A
.text:000000000000873A loc_873A:                               ; CODE XREF: copy_internal+2CAF↑j
.text:000000000000873A                                         ; copy_internal+38A9↓j ...
.text:000000000000873A                 mov     rdi, r12        ; ptr
.text:000000000000873D                 call    free
.text:0000000000008742                 mov     rsi, [rbp+file]
.text:0000000000008749                 mov     edi, 4
.text:000000000000874E                 call    quotearg_style
.text:0000000000008753                 lea     rsi, aCannotCreateSy_0 ; "cannot create symbolic link %s"
.text:000000000000875A                 xor     edi, edi        ; domainname
.text:000000000000875C                 mov     edx, 5          ; category
.text:0000000000008761                 mov     r12, rax
.text:0000000000008764                 call    _dcgettext
.text:0000000000008769                 mov     esi, [rbp+fildes] ; errnum
.text:000000000000876F                 mov     rdx, rax        ; format
.text:0000000000008772                 mov     rcx, r12
.text:0000000000008775                 xor     edi, edi        ; status
.text:0000000000008777                 xor     eax, eax
.text:0000000000008779                 call    _error
.text:000000000000877E                 jmp     loc_6A10
.text:0000000000008783 ; ---------------------------------------------------------------------------
.text:0000000000008783
.text:0000000000008783 loc_8783:                               ; CODE XREF: copy_internal+1CE2↑j
.text:0000000000008783                 mov     rsi, [rbp+file]
.text:000000000000878A                 mov     edi, 4
.text:000000000000878F                 call    quotearg_style
.text:0000000000008794                 mov     edx, 5
.text:0000000000008799                 mov     r13, rax
.text:000000000000879C                 lea     rsi, aSettingPermiss ; "setting permissions for %s"
.text:00000000000087A3                 jmp     loc_6F5F
.text:00000000000087A8 ; ---------------------------------------------------------------------------
.text:00000000000087A8
.text:00000000000087A8 loc_87A8:                               ; CODE XREF: copy_internal+2784↑j
.text:00000000000087A8                 cmp     qword ptr [rbx+40h], 0
.text:00000000000087AD                 mov     r14d, r13d
.text:00000000000087B0                 mov     [rbp+old], 0
.text:00000000000087BB                 mov     r15d, 11h
.text:00000000000087C1                 jnz     loc_5E22
.text:00000000000087C7                 jmp     loc_5EE9
.text:00000000000087CC ; ---------------------------------------------------------------------------
.text:00000000000087CC
.text:00000000000087CC loc_87CC:                               ; CODE XREF: copy_internal+277B↑j
.text:00000000000087CC                 mov     rsi, [rbp+file]
.text:00000000000087D3                 mov     edi, 4
.text:00000000000087D8                 mov     byte ptr [rbp+s2], r9b
.text:00000000000087DF                 mov     r15d, 11h
.text:00000000000087E5                 call    quotearg_style
.text:00000000000087EA                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:00000000000087F1                 mov     r12, rax
.text:00000000000087F4                 mov     edx, 5          ; category
.text:00000000000087F9                 xor     edi, edi        ; domainname
.text:00000000000087FB                 call    _dcgettext
.text:0000000000008800                 mov     rdx, r12
.text:0000000000008803                 mov     rsi, rax
.text:0000000000008806                 mov     edi, 1
.text:000000000000880B                 xor     eax, eax
.text:000000000000880D                 call    ___printf_chk
.text:0000000000008812                 mov     [rbp+old], 0
.text:000000000000881D                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000008825                 jmp     loc_5E0E
.text:000000000000882A ; ---------------------------------------------------------------------------
.text:000000000000882A
.text:000000000000882A loc_882A:                               ; CODE XREF: copy_internal+6FC↑j
.text:000000000000882A                 mov     eax, [rbp+var_1F0.st_gid]
.text:0000000000008830                 cmp     [rbp+stat_buf.st_gid], eax
.text:0000000000008836                 jnz     loc_6182
.text:000000000000883C                 jmp     loc_61C7
.text:0000000000008841 ; ---------------------------------------------------------------------------
.text:0000000000008841
.text:0000000000008841 loc_8841:                               ; CODE XREF: copy_internal+777↑j
.text:0000000000008841                 call    cached_umask
.text:0000000000008846                 not     eax
.text:0000000000008848                 and     [rbp+var_35C], eax
.text:000000000000884E                 jz      loc_61FD
.text:0000000000008854                 cmp     [rbp+var_315], 1
.text:000000000000885B                 jz      loc_620A
.text:0000000000008861                 test    r14b, r14b
.text:0000000000008864                 jnz     loc_91D7
.text:000000000000886A
.text:000000000000886A loc_886A:                               ; CODE XREF: copy_internal+3771↓j
.text:000000000000886A                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000008870                 mov     [rbp+var_38C], eax
.text:0000000000008876                 not     eax
.text:0000000000008878                 test    [rbp+var_35C], eax
.text:000000000000887E                 jnz     loc_620A
.text:0000000000008884                 jmp     loc_62C6
.text:0000000000008889 ; ---------------------------------------------------------------------------
.text:0000000000008889
.text:0000000000008889 loc_8889:                               ; CODE XREF: copy_internal+769↑j
.text:0000000000008889                 mov     eax, [rbp+var_314]
.text:000000000000888F                 mov     edx, 1B6h
.text:0000000000008894                 mov     ebx, 1FFh
.text:0000000000008899                 and     eax, 7000h
.text:000000000000889E                 cmp     eax, 4000h
.text:00000000000088A3                 cmovnz  ebx, edx
.text:00000000000088A6                 call    cached_umask
.text:00000000000088AB                 not     eax
.text:00000000000088AD                 mov     edx, eax
.text:00000000000088AF                 and     edx, ebx
.text:00000000000088B1                 jmp     loc_85D8
.text:00000000000088B6 ; ---------------------------------------------------------------------------
.text:00000000000088B6
.text:00000000000088B6 loc_88B6:                               ; CODE XREF: copy_internal+210C↑j
.text:00000000000088B6                 and     r12d, 1FFh
.text:00000000000088BD                 test    r14b, r14b
.text:00000000000088C0                 mov     [rbp+var_3A4], r12d
.text:00000000000088C7                 jnz     loc_8E60
.text:00000000000088CD                 cmp     byte ptr [rbx+23h], 1
.text:00000000000088D1                 mov     rdi, [rbp+file]
.text:00000000000088D8                 sbb     esi, esi
.text:00000000000088DA                 xor     eax, eax
.text:00000000000088DC                 and     esi, 0FFFFFE00h
.text:00000000000088E2                 add     esi, 201h
.text:00000000000088E8                 call    open_safer
.text:00000000000088ED                 mov     [rbp+fd], eax
.text:00000000000088F3                 call    ___errno_location
.text:00000000000088F8                 mov     r12, rax
.text:00000000000088FB                 mov     rax, 0FF000000FF00h
.text:0000000000008905                 test    [rbx+20h], rax
.text:0000000000008909                 jnz     loc_9195
.text:000000000000890F                 cmp     [rbp+fd], 0
.text:0000000000008916                 js      loc_91A2
.text:000000000000891C
.text:000000000000891C loc_891C:                               ; CODE XREF: copy_internal+3988↓j
.text:000000000000891C                                         ; copy_internal+39A3↓j
.text:000000000000891C                 mov     dword ptr [rbp+var_378], 0
.text:0000000000008926
.text:0000000000008926 loc_8926:                               ; CODE XREF: copy_internal+3963↓j
.text:0000000000008926                 lea     rax, [rbp+var_D0]
.text:000000000000892D                 mov     esi, [rbp+fd]   ; fildes
.text:0000000000008933                 mov     edi, 1          ; ver
.text:0000000000008938                 mov     rdx, rax        ; stat_buf
.text:000000000000893B                 mov     [rbp+s], rax
.text:0000000000008942                 call    ___fxstat
.text:0000000000008947                 test    eax, eax
.text:0000000000008949                 mov     dword ptr [rbp+var_348], eax
.text:000000000000894F                 jnz     loc_94F6
.text:0000000000008955                 cmp     byte ptr [rbp+format], 0
.text:000000000000895C                 jz      loc_902F
.text:0000000000008962                 cmp     dword ptr [rbx+38h], 0
.text:0000000000008966                 jnz     loc_97C4
.text:000000000000896C
.text:000000000000896C loc_896C:                               ; CODE XREF: copy_internal+3D68↓j
.text:000000000000896C                 call    _getpagesize
.text:0000000000008971                 mov     rcx, [rbp+var_D0.st_blksize]
.text:0000000000008978                 movsxd  r12, eax
.text:000000000000897B                 mov     rax, 1FFFFFFFFFFE0000h
.text:0000000000008985                 mov     r8d, 200h
.text:000000000000898B                 mov     edi, [rbp+fildes] ; fd
.text:0000000000008991                 mov     [rbp+ptr], r8
.text:0000000000008998                 lea     rdx, [rcx-20000h]
.text:000000000000899F                 cmp     rdx, rax
.text:00000000000089A2                 mov     eax, 20000h
.text:00000000000089A7                 lea     rdx, [rcx-1]
.text:00000000000089AB                 cmovbe  rax, rcx
.text:00000000000089AF                 mov     [rbp+var_370], rax
.text:00000000000089B6                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:00000000000089C0                 cmp     rdx, rax
.text:00000000000089C3                 cmova   rcx, r8
.text:00000000000089C7                 xor     edx, edx        ; len
.text:00000000000089C9                 xor     esi, esi        ; offset
.text:00000000000089CB                 mov     [rbp+var_398], rcx
.text:00000000000089D2                 mov     ecx, 2          ; advise
.text:00000000000089D7                 call    fdadvise
.text:00000000000089DC                 mov     r9d, [rbp+var_160.st_mode]
.text:00000000000089E3                 mov     r8, [rbp+ptr]
.text:00000000000089EA                 and     r9d, 0F000h
.text:00000000000089F1                 cmp     r9d, 8000h
.text:00000000000089F8                 jz      loc_98DA
.text:00000000000089FE
.text:00000000000089FE loc_89FE:                               ; CODE XREF: copy_internal+3E79↓j
.text:00000000000089FE                 mov     eax, [rbp+var_D0.st_mode]
.text:0000000000008A04                 and     eax, 0F000h
.text:0000000000008A09                 cmp     eax, 8000h
.text:0000000000008A0E                 jz      loc_986F
.text:0000000000008A14
.text:0000000000008A14 loc_8A14:                               ; CODE XREF: copy_internal+3DFE↓j
.text:0000000000008A14                                         ; copy_internal+3E0B↓j
.text:0000000000008A14                 mov     rdi, [rbp+var_160.st_blksize]
.text:0000000000008A1B                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000008A25                 mov     rsi, [rbp+var_370]
.text:0000000000008A2C                 sub     rax, r12
.text:0000000000008A2F                 mov     dword ptr [rbp+length], r9d
.text:0000000000008A36                 mov     r8, rax
.text:0000000000008A39                 mov     rax, 1FFFFFFFFFFE0000h
.text:0000000000008A43                 lea     rdx, [rdi-20000h]
.text:0000000000008A4A                 mov     [rbp+ptr], r8
.text:0000000000008A51                 cmp     rdx, rax
.text:0000000000008A54                 mov     eax, 20000h
.text:0000000000008A59                 mov     rdx, r8
.text:0000000000008A5C                 cmova   rdi, rax
.text:0000000000008A60                 call    buffer_lcm
.text:0000000000008A65                 mov     r9d, dword ptr [rbp+length]
.text:0000000000008A6C                 mov     rcx, rax
.text:0000000000008A6F                 mov     r8, [rbp+ptr]
.text:0000000000008A76                 cmp     r9d, 8000h
.text:0000000000008A7D                 jz      loc_974D
.text:0000000000008A83
.text:0000000000008A83 loc_8A83:                               ; CODE XREF: copy_internal+3CDB↓j
.text:0000000000008A83                                         ; copy_internal+3CEC↓j
.text:0000000000008A83                 mov     rax, [rbp+var_370]
.text:0000000000008A8A                 xor     edx, edx
.text:0000000000008A8C                 lea     rsi, [rcx+rax-1]
.text:0000000000008A91                 mov     rax, rsi
.text:0000000000008A94                 div     rcx
.text:0000000000008A97                 sub     rsi, rdx
.text:0000000000008A9A                 mov     [rbp+var_370], rsi
.text:0000000000008AA1                 jz      loc_9551
.text:0000000000008AA7                 cmp     rsi, r8
.text:0000000000008AAA                 ja      loc_9551
.text:0000000000008AB0
.text:0000000000008AB0 loc_8AB0:                               ; CODE XREF: copy_internal+3AD8↓j
.text:0000000000008AB0                 mov     rax, [rbp+var_370]
.text:0000000000008AB7                 lea     rdi, [r12+rax]
.text:0000000000008ABB                 call    xmalloc
.text:0000000000008AC0                 lea     rcx, [rax+r12-1]
.text:0000000000008AC5                 xor     edx, edx
.text:0000000000008AC7                 mov     [rbp+ptr], rax
.text:0000000000008ACE                 mov     rax, rcx
.text:0000000000008AD1                 div     r12
.text:0000000000008AD4                 sub     rcx, rdx
.text:0000000000008AD7                 cmp     dword ptr [rbp+var_348], 0
.text:0000000000008ADE                 mov     [rbp+var_3B0], rcx
.text:0000000000008AE5                 jz      loc_955D
.text:0000000000008AEB                 mov     [rbp+var_3A5], 0
.text:0000000000008AF2                 mov     [rbp+var_390], 1
.text:0000000000008AFC
.text:0000000000008AFC loc_8AFC:                               ; CODE XREF: copy_internal+3E55↓j
.text:0000000000008AFC                 mov     rax, [rbp+var_160.st_size]
.text:0000000000008B03                 mov     edi, [rbp+fildes]
.text:0000000000008B09                 xor     r12d, r12d
.text:0000000000008B0C                 mov     [rbp+length], rax
.text:0000000000008B13                 lea     rax, [rbp+dev]
.text:0000000000008B1A                 mov     rsi, rax
.text:0000000000008B1D                 mov     [rbp+var_348], rax
.text:0000000000008B24                 call    extent_scan_init
.text:0000000000008B29                 lea     rax, [rbp+var_2F9]
.text:0000000000008B30                 xor     ecx, ecx
.text:0000000000008B32                 mov     [rbp+var_388], rbx
.text:0000000000008B39                 mov     [rbp+var_3A0], 0
.text:0000000000008B44                 mov     rbx, rcx
.text:0000000000008B47                 mov     [rbp+var_360], r13d
.text:0000000000008B4E                 mov     [rbp-3B8h], rax
.text:0000000000008B55                 lea     rax, [rbp+var_2F8]
.text:0000000000008B5C                 mov     [rbp+var_3C0], rax
.text:0000000000008B63
.text:0000000000008B63 loc_8B63:                               ; CODE XREF: copy_internal+3BF7↓j
.text:0000000000008B63                 mov     rdi, [rbp+var_348]
.text:0000000000008B6A                 call    extent_scan_read
.text:0000000000008B6F                 test    al, al
.text:0000000000008B71                 jz      loc_9771
.text:0000000000008B77                 cmp     qword ptr [rbp+var_2E0+8], 0
.text:0000000000008B7F                 jz      loc_964E
.text:0000000000008B85                 mov     rdx, rbx
.text:0000000000008B88                 mov     rcx, r12
.text:0000000000008B8B                 xor     r13d, r13d
.text:0000000000008B8E                 xor     eax, eax
.text:0000000000008B90                 jmp     loc_8C4D
.text:0000000000008B90 ; ---------------------------------------------------------------------------
.text:0000000000008B95                 align 8
.text:0000000000008B98
.text:0000000000008B98 loc_8B98:                               ; CODE XREF: copy_internal+3213↓j
.text:0000000000008B98                                         ; copy_internal+3272↓j
.text:0000000000008B98                 cmp     [rbp+var_390], 3
.text:0000000000008B9F                 mov     r8d, 0
.text:0000000000008BA5                 cmovz   r8, [rbp+var_398]
.text:0000000000008BAD
.text:0000000000008BAD loc_8BAD:                               ; CODE XREF: copy_internal+39C1↓j
.text:0000000000008BAD                 sub     rsp, 8
.text:0000000000008BB1                 mov     rcx, [rbp+var_370]
.text:0000000000008BB8                 mov     rdx, [rbp+var_3B0]
.text:0000000000008BBF                 mov     esi, [rbp+fd]
.text:0000000000008BC5                 mov     edi, [rbp+fildes]
.text:0000000000008BCB                 mov     r9d, 1
.text:0000000000008BD1                 push    qword ptr [rbp-3B8h]
.text:0000000000008BD7                 push    [rbp+var_3C0]
.text:0000000000008BDD                 push    rbx
.text:0000000000008BDE                 push    [rbp+file]
.text:0000000000008BE4                 push    [rbp+filename]
.text:0000000000008BEA                 call    sparse_copy
.text:0000000000008BEF                 add     rsp, 30h
.text:0000000000008BF3                 test    al, al
.text:0000000000008BF5                 jz      loc_8CF8
.text:0000000000008BFB                 mov     rax, [rbp+var_2F8]
.text:0000000000008C02                 lea     rcx, [r12+rax]
.text:0000000000008C06                 test    rax, rax
.text:0000000000008C09                 mov     [rbp+var_3A0], rcx
.text:0000000000008C10                 jz      short loc_8C1F
.text:0000000000008C12                 movzx   eax, [rbp+var_2F9]
.text:0000000000008C19                 mov     byte ptr [rbp+format], al
.text:0000000000008C1F
.text:0000000000008C1F loc_8C1F:                               ; CODE XREF: copy_internal+3190↑j
.text:0000000000008C1F                 mov     rcx, [rbp+var_3A0]
.text:0000000000008C26                 cmp     [rbp+length], rcx
.text:0000000000008C2D                 jz      loc_9647
.text:0000000000008C33                 lea     eax, [r13+1]
.text:0000000000008C37                 cmp     rax, qword ptr [rbp+var_2E0+8]
.text:0000000000008C3E                 mov     rcx, r12
.text:0000000000008C41                 mov     rdx, rbx
.text:0000000000008C44                 mov     r13, rax
.text:0000000000008C47                 jnb     loc_964E
.text:0000000000008C4D
.text:0000000000008C4D loc_8C4D:                               ; CODE XREF: copy_internal+3110↑j
.text:0000000000008C4D                 lea     rsi, [rax+rax*2]
.text:0000000000008C51                 mov     rax, [rbp+var_2D0+8]
.text:0000000000008C58                 lea     rax, [rax+rsi*8]
.text:0000000000008C5C                 mov     rsi, [rbp+length]
.text:0000000000008C63                 mov     r12, [rax]
.text:0000000000008C66                 mov     rbx, [rax+8]
.text:0000000000008C6A                 lea     rax, [r12+rbx]
.text:0000000000008C6E                 cmp     rsi, rax
.text:0000000000008C71                 jge     short loc_8C80
.text:0000000000008C73                 cmp     r12, rsi
.text:0000000000008C76                 cmovg   r12, rsi
.text:0000000000008C7A                 sub     rsi, r12
.text:0000000000008C7D                 mov     rbx, rsi
.text:0000000000008C80
.text:0000000000008C80 loc_8C80:                               ; CODE XREF: copy_internal+31F1↑j
.text:0000000000008C80                 mov     rax, r12
.text:0000000000008C83                 mov     byte ptr [rbp+format], 0
.text:0000000000008C8A                 sub     rax, rcx
.text:0000000000008C8D                 mov     rcx, rax
.text:0000000000008C90                 sub     rcx, rdx
.text:0000000000008C93                 jz      loc_8B98
.text:0000000000008C99                 mov     edi, [rbp+fildes] ; fd
.text:0000000000008C9F                 xor     edx, edx        ; whence
.text:0000000000008CA1                 mov     rsi, r12        ; offset
.text:0000000000008CA4                 mov     [rbp+var_3A0], rcx
.text:0000000000008CAB                 call    _lseek
.text:0000000000008CB0                 test    rax, rax
.text:0000000000008CB3                 mov     rcx, [rbp+var_3A0]
.text:0000000000008CBA                 js      loc_9B2F
.text:0000000000008CC0                 mov     eax, [rbp+var_390]
.text:0000000000008CC6                 cmp     eax, 3
.text:0000000000008CC9                 setz    dl
.text:0000000000008CCC                 sub     eax, 1
.text:0000000000008CCF                 jz      loc_9428
.text:0000000000008CD5                 mov     rsi, [rbp+file]
.text:0000000000008CDC                 mov     edi, [rbp+fd]
.text:0000000000008CE2                 movzx   edx, dl
.text:0000000000008CE5                 call    create_hole
.text:0000000000008CEA                 test    al, al
.text:0000000000008CEC                 mov     byte ptr [rbp+format], al
.text:0000000000008CF2                 jnz     loc_8B98
.text:0000000000008CF8
.text:0000000000008CF8 loc_8CF8:                               ; CODE XREF: copy_internal+3175↑j
.text:0000000000008CF8                 mov     rbx, [rbp+var_388]
.text:0000000000008CFF                 mov     r13d, [rbp+var_360]
.text:0000000000008D06
.text:0000000000008D06 loc_8D06:                               ; CODE XREF: copy_internal+3F2B↓j
.text:0000000000008D06                 mov     rdi, [rbp+var_2D0+8] ; ptr
.text:0000000000008D0D                 call    free
.text:0000000000008D12
.text:0000000000008D12 loc_8D12:                               ; CODE XREF: copy_internal+3610↓j
.text:0000000000008D12                                         ; copy_internal+3A71↓j ...
.text:0000000000008D12                 xor     r8d, r8d
.text:0000000000008D15
.text:0000000000008D15 loc_8D15:                               ; CODE XREF: copy_internal+366F↓j
.text:0000000000008D15                                         ; copy_internal+3691↓j ...
.text:0000000000008D15                 mov     edi, [rbp+fd]   ; fd
.text:0000000000008D1B                 mov     byte ptr [rbp+format], r8b
.text:0000000000008D22                 call    _close
.text:0000000000008D27                 test    eax, eax
.text:0000000000008D29                 movzx   r8d, byte ptr [rbp+format]
.text:0000000000008D31                 jns     loc_7BD8
.text:0000000000008D37                 mov     rsi, [rbp+file]
.text:0000000000008D3E                 mov     edi, 4
.text:0000000000008D43                 call    quotearg_style
.text:0000000000008D48                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:0000000000008D4F                 mov     edx, 5          ; category
.text:0000000000008D54                 xor     edi, edi        ; domainname
.text:0000000000008D56                 mov     r12, rax
.text:0000000000008D59                 call    _dcgettext
.text:0000000000008D5E                 mov     qword ptr [rbp+fd], rax
.text:0000000000008D65                 call    ___errno_location
.text:0000000000008D6A                 mov     rdx, qword ptr [rbp+fd] ; format
.text:0000000000008D71                 mov     esi, [rax]      ; errnum
.text:0000000000008D73                 mov     rcx, r12
.text:0000000000008D76                 xor     edi, edi        ; status
.text:0000000000008D78                 xor     eax, eax
.text:0000000000008D7A                 call    _error
.text:0000000000008D7F                 xor     r8d, r8d
.text:0000000000008D82                 jmp     loc_7BD8
.text:0000000000008D87 ; ---------------------------------------------------------------------------
.text:0000000000008D87
.text:0000000000008D87 loc_8D87:                               ; CODE XREF: copy_internal+2A8C↑j
.text:0000000000008D87                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000008D8C                 xor     r12d, 1
.text:0000000000008D90                 jmp     loc_71FC
.text:0000000000008D95 ; ---------------------------------------------------------------------------
.text:0000000000008D95
.text:0000000000008D95 loc_8D95:                               ; CODE XREF: copy_internal+1DD6↑j
.text:0000000000008D95                 mov     [rbp+var_315], 0
.text:0000000000008D9C                 mov     r12d, 1
.text:0000000000008DA2                 jmp     loc_79A7
.text:0000000000008DA7 ; ---------------------------------------------------------------------------
.text:0000000000008DA7
.text:0000000000008DA7 loc_8DA7:                               ; CODE XREF: copy_internal+221E↑j
.text:0000000000008DA7                 mov     rax, [rbp+var_D0.st_dev]
.text:0000000000008DAE                 cmp     [rbp+var_160.st_dev], rax
.text:0000000000008DB5                 jnz     loc_7CA4
.text:0000000000008DBB                 jmp     loc_697C
.text:0000000000008DC0 ; ---------------------------------------------------------------------------
.text:0000000000008DC0
.text:0000000000008DC0 loc_8DC0:                               ; CODE XREF: copy_internal+372A↓j
.text:0000000000008DC0                 mov     rdi, [rbp+file] ; name
.text:0000000000008DC7                 call    _unlink
.text:0000000000008DCC                 test    eax, eax
.text:0000000000008DCE                 jnz     loc_9A06
.text:0000000000008DD4                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000008DD8                 jz      short loc_8E13
.text:0000000000008DDA                 mov     rsi, [rbp+file]
.text:0000000000008DE1                 mov     edi, 4
.text:0000000000008DE6                 call    quotearg_style
.text:0000000000008DEB                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000008DF2                 mov     r12, rax
.text:0000000000008DF5                 mov     edx, 5          ; category
.text:0000000000008DFA                 xor     edi, edi        ; domainname
.text:0000000000008DFC                 call    _dcgettext
.text:0000000000008E01                 mov     rdx, r12
.text:0000000000008E04                 mov     rsi, rax
.text:0000000000008E07                 mov     edi, 1
.text:0000000000008E0C                 xor     eax, eax
.text:0000000000008E0E                 call    ___printf_chk
.text:0000000000008E13
.text:0000000000008E13 loc_8E13:                               ; CODE XREF: copy_internal+3358↑j
.text:0000000000008E13                 movzx   r14d, byte ptr [rbx+21h]
.text:0000000000008E18                 mov     eax, [rbp+var_35C]
.text:0000000000008E1E                 mov     dword ptr [rbp+var_378], eax
.text:0000000000008E24                 test    r14b, r14b
.text:0000000000008E27                 jz      short loc_8E6C
.text:0000000000008E29                 mov     edx, [rbp+var_3A4]
.text:0000000000008E2F                 mov     rsi, [rbp+file]
.text:0000000000008E36                 mov     r8, rbx
.text:0000000000008E39                 mov     rdi, [rbp+filename]
.text:0000000000008E40                 mov     ecx, 1
.text:0000000000008E45                 call    set_process_security_ctx
.text:0000000000008E4A                 test    al, al
.text:0000000000008E4C                 mov     r8d, eax
.text:0000000000008E4F                 mov     [rbp+ptr], 0
.text:0000000000008E5A                 jz      loc_7BD8
.text:0000000000008E60
.text:0000000000008E60 loc_8E60:                               ; CODE XREF: copy_internal+2E47↑j
.text:0000000000008E60                 mov     eax, [rbp+var_35C]
.text:0000000000008E66                 mov     dword ptr [rbp+var_378], eax
.text:0000000000008E6C
.text:0000000000008E6C loc_8E6C:                               ; CODE XREF: copy_internal+33A7↑j
.text:0000000000008E6C                                         ; copy_internal+3752↓j
.text:0000000000008E6C                 mov     eax, dword ptr [rbp+var_378]
.text:0000000000008E72                 mov     rdi, [rbp+file]
.text:0000000000008E79                 mov     esi, 0C1h
.text:0000000000008E7E                 not     eax
.text:0000000000008E80                 and     eax, [rbp+var_3A4]
.text:0000000000008E86                 mov     edx, eax
.text:0000000000008E88                 mov     dword ptr [rbp+ptr], eax
.text:0000000000008E8E                 xor     eax, eax
.text:0000000000008E90                 call    open_safer
.text:0000000000008E95                 mov     r14d, eax
.text:0000000000008E98                 mov     [rbp+fd], eax
.text:0000000000008E9E                 call    ___errno_location
.text:0000000000008EA3                 mov     r8d, [rax]
.text:0000000000008EA6                 mov     r12, rax
.text:0000000000008EA9                 mov     eax, r14d
.text:0000000000008EAC                 shr     eax, 1Fh
.text:0000000000008EAF                 cmp     r8d, 11h
.text:0000000000008EB3                 setz    dl
.text:0000000000008EB6                 and     dl, al
.text:0000000000008EB8                 mov     r14d, edx
.text:0000000000008EBB                 jz      loc_92C2
.text:0000000000008EC1                 cmp     byte ptr [rbx+18h], 0
.text:0000000000008EC5                 mov     r8d, 11h
.text:0000000000008ECB                 jz      loc_9255
.text:0000000000008ED1
.text:0000000000008ED1 loc_8ED1:                               ; CODE XREF: copy_internal+3969↓j
.text:0000000000008ED1                 mov     r9d, 1
.text:0000000000008ED7
.text:0000000000008ED7 loc_8ED7:                               ; CODE XREF: copy_internal+3738↓j
.text:0000000000008ED7                                         ; copy_internal+3742↓j ...
.text:0000000000008ED7                 mov     rsi, [rbp+file]
.text:0000000000008EDE                 mov     edi, 4
.text:0000000000008EE3                 mov     byte ptr [rbp+ptr], r9b
.text:0000000000008EEA                 mov     [rbp+fd], r8d
.text:0000000000008EF1                 call    quotearg_style
.text:0000000000008EF6                 lea     rsi, aCannotCreateRe ; "cannot create regular file %s"
.text:0000000000008EFD                 mov     edx, 5          ; category
.text:0000000000008F02                 xor     edi, edi        ; domainname
.text:0000000000008F04                 mov     r12, rax
.text:0000000000008F07                 call    _dcgettext
.text:0000000000008F0C                 mov     r8d, [rbp+fd]
.text:0000000000008F13                 mov     rdx, rax        ; format
.text:0000000000008F16                 mov     rcx, r12
.text:0000000000008F19                 xor     edi, edi        ; status
.text:0000000000008F1B                 xor     eax, eax
.text:0000000000008F1D                 mov     esi, r8d        ; errnum
.text:0000000000008F20                 call    _error
.text:0000000000008F25                 movzx   r9d, byte ptr [rbp+ptr]
.text:0000000000008F2D                 xor     r8d, r8d
.text:0000000000008F30                 mov     [rbp+ptr], 0
.text:0000000000008F3B                 mov     r14d, r9d
.text:0000000000008F3E                 jmp     loc_7BD8
.text:0000000000008F43 ; ---------------------------------------------------------------------------
.text:0000000000008F43
.text:0000000000008F43 loc_8F43:                               ; CODE XREF: copy_internal+2C79↑j
.text:0000000000008F43                 mov     rsi, [rbp+filename]
.text:0000000000008F4A                 mov     edi, 4
.text:0000000000008F4F                 call    quotearg_style
.text:0000000000008F54                 mov     edx, 5
.text:0000000000008F59                 mov     r13, rax
.text:0000000000008F5C                 lea     rsi, aCannotReadSymb ; "cannot read symbolic link %s"
.text:0000000000008F63                 jmp     loc_6F5F
.text:0000000000008F68 ; ---------------------------------------------------------------------------
.text:0000000000008F68
.text:0000000000008F68 loc_8F68:                               ; CODE XREF: copy_internal+2CA5↑j
.text:0000000000008F68                 mov     rdi, r12        ; ptr
.text:0000000000008F6B                 call    free
.text:0000000000008F70
.text:0000000000008F70 loc_8F70:                               ; CODE XREF: copy_internal+3918↓j
.text:0000000000008F70                 movzx   r8d, byte ptr [rbx+25h]
.text:0000000000008F75                 test    r8b, r8b
.text:0000000000008F78                 jnz     loc_6B90
.text:0000000000008F7E                 movzx   eax, byte ptr [rbx+1Dh]
.text:0000000000008F82                 test    al, al
.text:0000000000008F84                 mov     byte ptr [rbp+fildes], al
.text:0000000000008F8A                 jnz     loc_9203
.text:0000000000008F90                 movzx   r8d, byte ptr [rbp+fildes]
.text:0000000000008F98                 mov     byte ptr [rbp+fildes], 1
.text:0000000000008F9F                 jmp     loc_5FFF
.text:0000000000008FA4 ; ---------------------------------------------------------------------------
.text:0000000000008FA4
.text:0000000000008FA4 loc_8FA4:                               ; CODE XREF: copy_internal+856↑j
.text:0000000000008FA4                 call    ___stack_chk_fail
.text:0000000000008FA9 ; ---------------------------------------------------------------------------
.text:0000000000008FA9
.text:0000000000008FA9 loc_8FA9:                               ; CODE XREF: copy_internal+1B6B↑j
.text:0000000000008FA9                 mov     rsi, [rbp+file] ; filename
.text:0000000000008FB0                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000008FB7                 mov     edi, 1          ; ver
.text:0000000000008FBC                 mov     byte ptr [rbp+s2], r9b
.text:0000000000008FC3                 mov     byte ptr [rbp+old], r8b
.text:0000000000008FCA                 call    ___xstat
.text:0000000000008FCF                 test    eax, eax
.text:0000000000008FD1                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000008FD9                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000008FE1                 jz      loc_7671
.text:0000000000008FE7                 jmp     loc_5C9F
.text:0000000000008FEC ; ---------------------------------------------------------------------------
.text:0000000000008FEC
.text:0000000000008FEC loc_8FEC:                               ; CODE XREF: copy_internal+1AF4↑j
.text:0000000000008FEC                 mov     rsi, [rbp+filename] ; filename
.text:0000000000008FF3                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000008FFA                 mov     edi, 1          ; ver
.text:0000000000008FFF                 mov     byte ptr [rbp+s2], r9b
.text:0000000000009006                 mov     byte ptr [rbp+old], r8b
.text:000000000000900D                 call    ___xstat
.text:0000000000009012                 test    eax, eax
.text:0000000000009014                 movzx   r8d, byte ptr [rbp+old]
.text:000000000000901C                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000009024                 jz      loc_75DC
.text:000000000000902A                 jmp     loc_5C9F
.text:000000000000902F ; ---------------------------------------------------------------------------
.text:000000000000902F
.text:000000000000902F loc_902F:                               ; CODE XREF: copy_internal+2EDC↑j
.text:000000000000902F                                         ; copy_internal+3D5E↓j
.text:000000000000902F                 mov     [rbp+ptr], 0
.text:000000000000903A
.text:000000000000903A loc_903A:                               ; CODE XREF: copy_internal+3B5A↓j
.text:000000000000903A                                         ; copy_internal+3B74↓j ...
.text:000000000000903A                 cmp     byte ptr [rbx+1Fh], 0
.text:000000000000903E                 jnz     loc_9446
.text:0000000000009044
.text:0000000000009044 loc_9044:                               ; CODE XREF: copy_internal+3A19↓j
.text:0000000000009044                                         ; copy_internal+3A6B↓j
.text:0000000000009044                 cmp     byte ptr [rbx+1Dh], 0
.text:0000000000009048                 jz      short loc_90A4
.text:000000000000904A                 mov     eax, [rbp+var_D0.st_uid]
.text:0000000000009050                 cmp     [rbp+stat_buf.st_uid], eax
.text:0000000000009056                 jnz     short loc_9066
.text:0000000000009058                 mov     eax, [rbp+var_D0.st_gid]
.text:000000000000905E                 cmp     [rbp+stat_buf.st_gid], eax
.text:0000000000009064                 jz      short loc_90A4
.text:0000000000009066
.text:0000000000009066 loc_9066:                               ; CODE XREF: copy_internal+35D6↑j
.text:0000000000009066                 mov     r9, [rbp+s]
.text:000000000000906D                 mov     edx, [rbp+fd]
.text:0000000000009073                 lea     rcx, [rbp+stat_buf]
.text:000000000000907A                 mov     rsi, [rbp+file]
.text:0000000000009081                 movzx   r8d, r14b
.text:0000000000009085                 mov     rdi, rbx
.text:0000000000009088                 call    set_owner
.text:000000000000908D                 cmp     eax, 0FFFFFFFFh
.text:0000000000009090                 jz      loc_8D12
.text:0000000000009096                 test    eax, eax
.text:0000000000009098                 jnz     short loc_90A4
.text:000000000000909A                 and     dword ptr [rbp+var_340], 0FFFFF1FFh
.text:00000000000090A4
.text:00000000000090A4 loc_90A4:                               ; CODE XREF: copy_internal+35C8↑j
.text:00000000000090A4                                         ; copy_internal+35E4↑j ...
.text:00000000000090A4                 cmp     byte ptr [rbx+27h], 0
.text:00000000000090A8                 jz      short loc_90B7
.text:00000000000090AA                 test    byte ptr [rbp+var_D0.st_mode], 80h
.text:00000000000090B1                 jz      loc_9ADE
.text:00000000000090B7
.text:00000000000090B7 loc_90B7:                               ; CODE XREF: copy_internal+3628↑j
.text:00000000000090B7                                         ; copy_internal+4065↓j ...
.text:00000000000090B7                 mov     rax, 0FF0000000000FFh
.text:00000000000090C1                 test    [rbx+18h], rax
.text:00000000000090C5                 jnz     loc_939D
.text:00000000000090CB                 cmp     byte ptr [rbx+2Bh], 0
.text:00000000000090CF                 jnz     loc_9B62
.text:00000000000090D5                 mov     r12d, r14d
.text:00000000000090D8                 and     r12b, [rbx+20h]
.text:00000000000090DC                 jnz     loc_99D7
.text:00000000000090E2                 cmp     dword ptr [rbp+var_378], 0
.text:00000000000090E9                 mov     r8d, 1
.text:00000000000090EF                 jz      loc_8D15
.text:00000000000090F5                 mov     byte ptr [rbp+format], r8b
.text:00000000000090FC                 call    cached_umask
.text:0000000000009101                 not     eax
.text:0000000000009103                 test    dword ptr [rbp+var_378], eax
.text:0000000000009109                 movzx   r8d, byte ptr [rbp+format]
.text:0000000000009111                 jz      loc_8D15
.text:0000000000009117                 mov     edx, [rbp+var_3A4]
.text:000000000000911D                 mov     rsi, [rbp+file]
.text:0000000000009124                 mov     edi, [rbp+fd]
.text:000000000000912A                 call    fchmod_or_lchmod
.text:000000000000912F                 test    eax, eax
.text:0000000000009131                 movzx   r8d, byte ptr [rbp+format]
.text:0000000000009139                 jz      loc_8D15
.text:000000000000913F                 mov     rsi, [rbp+file]
.text:0000000000009146                 mov     edi, 4
.text:000000000000914B                 call    quotearg_style
.text:0000000000009150                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:0000000000009157                 mov     edx, 5          ; category
.text:000000000000915C                 xor     edi, edi        ; domainname
.text:000000000000915E                 mov     r12, rax
.text:0000000000009161                 call    _dcgettext
.text:0000000000009166                 mov     [rbp+format], rax
.text:000000000000916D                 call    ___errno_location
.text:0000000000009172                 mov     rdx, [rbp+format] ; format
.text:0000000000009179                 mov     esi, [rax]      ; errnum
.text:000000000000917B                 mov     rcx, r12
.text:000000000000917E                 xor     edi, edi        ; status
.text:0000000000009180                 xor     eax, eax
.text:0000000000009182                 call    _error
.text:0000000000009187
.text:0000000000009187 loc_9187:                               ; CODE XREF: copy_internal+3951↓j
.text:0000000000009187                 movzx   r8d, byte ptr [rbx+24h]
.text:000000000000918C                 xor     r8d, 1
.text:0000000000009190                 jmp     loc_8D15
.text:0000000000009195 ; ---------------------------------------------------------------------------
.text:0000000000009195
.text:0000000000009195 loc_9195:                               ; CODE XREF: copy_internal+2E89↑j
.text:0000000000009195                 cmp     [rbp+fd], 0
.text:000000000000919C                 jns     loc_93EE
.text:00000000000091A2
.text:00000000000091A2 loc_91A2:                               ; CODE XREF: copy_internal+2E96↑j
.text:00000000000091A2                 movzx   r9d, byte ptr [rbx+16h]
.text:00000000000091A7                 test    r9b, r9b
.text:00000000000091AA                 jnz     loc_8DC0
.text:00000000000091B0                 mov     r8d, [r12]
.text:00000000000091B4                 cmp     r8d, 2
.text:00000000000091B8                 jnz     loc_8ED7
.text:00000000000091BE                 cmp     byte ptr [rbx+18h], 0
.text:00000000000091C2                 jnz     loc_8ED7
.text:00000000000091C8                 mov     dword ptr [rbp+var_378], 0
.text:00000000000091D2                 jmp     loc_8E6C
.text:00000000000091D7 ; ---------------------------------------------------------------------------
.text:00000000000091D7
.text:00000000000091D7 loc_91D7:                               ; CODE XREF: copy_internal+2DE4↑j
.text:00000000000091D7                 mov     rsi, [rbp+file] ; filename
.text:00000000000091DE                 lea     rdx, [rbp+var_1F0] ; stat_buf
.text:00000000000091E5                 mov     edi, 1          ; ver
.text:00000000000091EA                 call    ___lxstat
.text:00000000000091EF                 test    eax, eax
.text:00000000000091F1                 jz      loc_886A
.text:00000000000091F7                 mov     rsi, [rbp+file]
.text:00000000000091FE                 jmp     loc_6365
.text:0000000000009203 ; ---------------------------------------------------------------------------
.text:0000000000009203
.text:0000000000009203 loc_9203:                               ; CODE XREF: copy_internal+350A↑j
.text:0000000000009203                 mov     edx, [rbp+stat_buf.st_gid] ; group
.text:0000000000009209                 mov     esi, [rbp+stat_buf.st_uid] ; owner
.text:000000000000920F                 mov     rdi, [rbp+file] ; file
.text:0000000000009216                 mov     byte ptr [rbp+fd], r8b
.text:000000000000921D                 call    _lchown
.text:0000000000009222                 test    eax, eax
.text:0000000000009224                 movzx   r8d, byte ptr [rbp+fd]
.text:000000000000922C                 jz      loc_5FFF
.text:0000000000009232                 mov     rdi, rbx
.text:0000000000009235                 call    chown_failure_ok
.text:000000000000923A                 test    al, al
.text:000000000000923C                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000009244                 jz      loc_9A44
.text:000000000000924A                 mov     byte ptr [rbp+fildes], al
.text:0000000000009250                 jmp     loc_5FFF
.text:0000000000009255 ; ---------------------------------------------------------------------------
.text:0000000000009255
.text:0000000000009255 loc_9255:                               ; CODE XREF: copy_internal+344B↑j
.text:0000000000009255                 mov     rsi, [rbp+file] ; filename
.text:000000000000925C                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000009263                 mov     edi, 1          ; ver
.text:0000000000009268                 mov     dword ptr [rbp+var_348], r8d
.text:000000000000926F                 call    ___lxstat
.text:0000000000009274                 test    eax, eax
.text:0000000000009276                 mov     r8d, dword ptr [rbp+var_348]
.text:000000000000927D                 jnz     short loc_92C2
.text:000000000000927F                 mov     eax, [rbp+var_D0.st_mode]
.text:0000000000009285                 and     eax, 0F000h
.text:000000000000928A                 cmp     eax, 0A000h
.text:000000000000928F                 jnz     short loc_92C2
.text:0000000000009291                 movzx   r8d, byte ptr [rbx+30h]
.text:0000000000009296                 test    r8b, r8b
.text:0000000000009299                 jz      loc_9A87
.text:000000000000929F                 mov     edx, dword ptr [rbp+ptr]
.text:00000000000092A5                 mov     rdi, [rbp+file]
.text:00000000000092AC                 mov     esi, 41h ; 'A'
.text:00000000000092B1                 xor     eax, eax
.text:00000000000092B3                 call    open_safer
.text:00000000000092B8                 mov     r8d, [r12]
.text:00000000000092BC                 mov     [rbp+fd], eax
.text:00000000000092C2
.text:00000000000092C2 loc_92C2:                               ; CODE XREF: copy_internal+343B↑j
.text:00000000000092C2                                         ; copy_internal+37FD↑j ...
.text:00000000000092C2                 mov     eax, [rbp+fd]
.text:00000000000092C8                 shr     eax, 1Fh
.text:00000000000092CB                 cmp     r8d, 15h
.text:00000000000092CF                 setz    dl
.text:00000000000092D2                 and     dl, al
.text:00000000000092D4                 mov     r9d, edx
.text:00000000000092D7                 jz      loc_93D6
.text:00000000000092DD                 mov     rsi, [rbp+file]
.text:00000000000092E4                 mov     r8d, 15h
.text:00000000000092EA                 cmp     byte ptr [rsi], 0
.text:00000000000092ED                 mov     rdi, rsi
.text:00000000000092F0                 jz      loc_8ED7
.text:00000000000092F6                 xor     eax, eax
.text:00000000000092F8                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000092FC                 xor     r8d, r8d
.text:00000000000092FF                 repne scasb
.text:0000000000009301                 mov     rax, rcx
.text:0000000000009304                 not     rax
.text:0000000000009307                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:000000000000930C                 setnz   r8b
.text:0000000000009310                 add     r8d, 14h
.text:0000000000009314                 jmp     loc_8ED7
.text:0000000000009319 ; ---------------------------------------------------------------------------
.text:0000000000009319
.text:0000000000009319 loc_9319:                               ; CODE XREF: copy_internal+2CB4↑j
.text:0000000000009319                 mov     eax, [rbp+var_1F0.st_mode]
.text:000000000000931F                 and     eax, 0F000h
.text:0000000000009324                 cmp     eax, 0A000h
.text:0000000000009329                 jnz     loc_873A
.text:000000000000932F                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009333                 mov     eax, r14d
.text:0000000000009336                 mov     rdi, r12
.text:0000000000009339                 repne scasb
.text:000000000000933B                 mov     rsi, [rbp+var_1F0.st_size]
.text:0000000000009342                 not     rcx
.text:0000000000009345                 lea     rax, [rcx-1]
.text:0000000000009349                 cmp     rsi, rax
.text:000000000000934C                 jnz     loc_873A
.text:0000000000009352                 mov     rdi, [rbp+file] ; path
.text:0000000000009359                 call    areadlink_with_size
.text:000000000000935E                 test    rax, rax
.text:0000000000009361                 jz      loc_873A
.text:0000000000009367                 mov     rdi, rax        ; s1
.text:000000000000936A                 mov     rsi, r12        ; s2
.text:000000000000936D                 mov     qword ptr [rbp+fd], rax
.text:0000000000009374                 call    _strcmp
.text:0000000000009379                 mov     rdx, qword ptr [rbp+fd]
.text:0000000000009380                 test    eax, eax
.text:0000000000009382                 mov     rdi, rdx        ; ptr
.text:0000000000009385                 jnz     loc_9B82
.text:000000000000938B                 call    free
.text:0000000000009390                 mov     rdi, r12        ; ptr
.text:0000000000009393                 call    free
.text:0000000000009398                 jmp     loc_8F70
.text:000000000000939D ; ---------------------------------------------------------------------------
.text:000000000000939D
.text:000000000000939D loc_939D:                               ; CODE XREF: copy_internal+3645↑j
.text:000000000000939D                 mov     r8d, dword ptr [rbp+var_340]
.text:00000000000093A4                 mov     ecx, [rbp+fd]
.text:00000000000093AA                 mov     rdx, [rbp+file]
.text:00000000000093B1                 mov     esi, [rbp+fildes]
.text:00000000000093B7                 mov     rdi, [rbp+filename]
.text:00000000000093BE                 call    copy_acl
.text:00000000000093C3                 test    eax, eax
.text:00000000000093C5                 mov     r8d, 1
.text:00000000000093CB                 jz      loc_8D15
.text:00000000000093D1                 jmp     loc_9187
.text:00000000000093D6 ; ---------------------------------------------------------------------------
.text:00000000000093D6
.text:00000000000093D6 loc_93D6:                               ; CODE XREF: copy_internal+3857↑j
.text:00000000000093D6                 cmp     [rbp+fd], 0
.text:00000000000093DD                 mov     r14d, 1
.text:00000000000093E3                 jns     loc_8926
.text:00000000000093E9                 jmp     loc_8ED1
.text:00000000000093EE ; ---------------------------------------------------------------------------
.text:00000000000093EE
.text:00000000000093EE loc_93EE:                               ; CODE XREF: copy_internal+371C↑j
.text:00000000000093EE                 movzx   esi, byte ptr [rbx+25h]
.text:00000000000093F2                 mov     rdi, [rbp+file]
.text:00000000000093F9                 xor     edx, edx
.text:00000000000093FB                 mov     rcx, rbx
.text:00000000000093FE                 call    set_file_security_ctx
.text:0000000000009403                 test    al, al
.text:0000000000009405                 mov     r8d, eax
.text:0000000000009408                 jnz     loc_891C
.text:000000000000940E                 cmp     byte ptr [rbx+26h], 0
.text:0000000000009412                 mov     [rbp+ptr], 0
.text:000000000000941D                 jnz     loc_8D15
.text:0000000000009423                 jmp     loc_891C
.text:0000000000009428 ; ---------------------------------------------------------------------------
.text:0000000000009428
.text:0000000000009428 loc_9428:                               ; CODE XREF: copy_internal+324F↑j
.text:0000000000009428                 mov     edi, [rbp+fd]   ; fd
.text:000000000000942E                 mov     rsi, rcx
.text:0000000000009431                 call    write_zeros
.text:0000000000009436                 test    al, al
.text:0000000000009438                 jz      loc_9953
.text:000000000000943E                 xor     r8d, r8d
.text:0000000000009441                 jmp     loc_8BAD
.text:0000000000009446 ; ---------------------------------------------------------------------------
.text:0000000000009446
.text:0000000000009446 loc_9446:                               ; CODE XREF: copy_internal+35BE↑j
.text:0000000000009446                 mov     rax, [rbp+stat_buf.st_atim.tv_sec]
.text:000000000000944D                 mov     rsi, [rbp+file] ; path
.text:0000000000009454                 lea     rdx, [rbp+var_2A0]
.text:000000000000945B                 mov     edi, [rbp+fd]   ; fildes
.text:0000000000009461                 mov     [rbp+var_2A0], rax
.text:0000000000009468                 mov     rax, [rbp+stat_buf.st_atim.tv_nsec]
.text:000000000000946F                 mov     [rbp+var_298], rax
.text:0000000000009476                 mov     rax, [rbp+stat_buf.st_mtim.tv_sec]
.text:000000000000947D                 mov     [rbp+var_290], rax
.text:0000000000009484                 mov     rax, [rbp+stat_buf.st_mtim.tv_nsec]
.text:000000000000948B                 mov     [rbp+var_288], rax
.text:0000000000009492                 call    fdutimens
.text:0000000000009497                 test    eax, eax
.text:0000000000009499                 jz      loc_9044
.text:000000000000949F                 mov     rsi, [rbp+file]
.text:00000000000094A6                 mov     edi, 4
.text:00000000000094AB                 call    quotearg_style
.text:00000000000094B0                 lea     rsi, aPreservingTime ; "preserving times for %s"
.text:00000000000094B7                 xor     edi, edi        ; domainname
.text:00000000000094B9                 mov     edx, 5          ; category
.text:00000000000094BE                 mov     r12, rax
.text:00000000000094C1                 call    _dcgettext
.text:00000000000094C6                 mov     [rbp+format], rax
.text:00000000000094CD                 call    ___errno_location
.text:00000000000094D2                 mov     rdx, [rbp+format] ; format
.text:00000000000094D9                 mov     esi, [rax]      ; errnum
.text:00000000000094DB                 xor     edi, edi        ; status
.text:00000000000094DD                 xor     eax, eax
.text:00000000000094DF                 mov     rcx, r12
.text:00000000000094E2                 call    _error
.text:00000000000094E7                 cmp     byte ptr [rbx+24h], 0
.text:00000000000094EB                 jz      loc_9044
.text:00000000000094F1                 jmp     loc_8D12
.text:00000000000094F6 ; ---------------------------------------------------------------------------
.text:00000000000094F6
.text:00000000000094F6 loc_94F6:                               ; CODE XREF: copy_internal+2ECF↑j
.text:00000000000094F6                 mov     rsi, [rbp+file]
.text:00000000000094FD                 mov     edi, 4
.text:0000000000009502                 call    quotearg_style
.text:0000000000009507                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:000000000000950E                 mov     edx, 5          ; category
.text:0000000000009513                 xor     edi, edi        ; domainname
.text:0000000000009515                 mov     r12, rax
.text:0000000000009518                 call    _dcgettext
.text:000000000000951D                 mov     [rbp+ptr], rax
.text:0000000000009524                 call    ___errno_location
.text:0000000000009529                 mov     rdx, [rbp+ptr]  ; format
.text:0000000000009530                 mov     esi, [rax]      ; errnum
.text:0000000000009532                 mov     rcx, r12
.text:0000000000009535                 xor     edi, edi        ; status
.text:0000000000009537                 xor     eax, eax
.text:0000000000009539                 call    _error
.text:000000000000953E                 xor     r8d, r8d
.text:0000000000009541                 mov     [rbp+ptr], 0
.text:000000000000954C                 jmp     loc_8D15
.text:0000000000009551 ; ---------------------------------------------------------------------------
.text:0000000000009551
.text:0000000000009551 loc_9551:                               ; CODE XREF: copy_internal+3021↑j
.text:0000000000009551                                         ; copy_internal+302A↑j
.text:0000000000009551                 mov     [rbp+var_370], rcx
.text:0000000000009558                 jmp     loc_8AB0
.text:000000000000955D ; ---------------------------------------------------------------------------
.text:000000000000955D
.text:000000000000955D loc_955D:                               ; CODE XREF: copy_internal+3065↑j
.text:000000000000955D                 xor     r9d, r9d
.text:0000000000009560                 cmp     dword ptr [rbx+0Ch], 3
.text:0000000000009564                 lea     rax, [rbp+dev]
.text:000000000000956B                 mov     [rbp+var_398], 0
.text:0000000000009576                 mov     [rbp+var_348], rax
.text:000000000000957D                 setz    r9b
.text:0000000000009581
.text:0000000000009581 loc_9581:                               ; CODE XREF: copy_internal+3D3F↓j
.text:0000000000009581                                         ; copy_internal+3ECE↓j
.text:0000000000009581                 lea     rax, [rbp+var_2F8]
.text:0000000000009588                 sub     rsp, 8
.text:000000000000958C                 mov     r8, [rbp+var_398]
.text:0000000000009593                 mov     rcx, [rbp+var_370]
.text:000000000000959A                 mov     rdx, [rbp+var_3B0]
.text:00000000000095A1                 mov     esi, [rbp+fd]
.text:00000000000095A7                 mov     edi, [rbp+fildes]
.text:00000000000095AD                 push    rax
.text:00000000000095AE                 push    [rbp+var_348]
.text:00000000000095B4                 push    0FFFFFFFFFFFFFFFFh
.text:00000000000095B6                 push    [rbp+file]
.text:00000000000095BC                 push    [rbp+filename]
.text:00000000000095C2                 call    sparse_copy
.text:00000000000095C7                 add     rsp, 30h
.text:00000000000095CB                 test    al, al
.text:00000000000095CD                 jz      loc_8D12
.text:00000000000095D3                 cmp     byte ptr [rbp+var_2F8], 0
.text:00000000000095DA                 jz      loc_903A
.text:00000000000095E0                 mov     rsi, [rbp+dev]  ; length
.text:00000000000095E7                 mov     edi, [rbp+fd]   ; fd
.text:00000000000095ED                 call    _ftruncate
.text:00000000000095F2                 test    eax, eax
.text:00000000000095F4                 jns     loc_903A
.text:00000000000095FA
.text:00000000000095FA loc_95FA:                               ; CODE XREF: copy_internal+3C49↓j
.text:00000000000095FA                                         ; copy_internal+3CC8↓j
.text:00000000000095FA                 mov     rsi, [rbp+file]
.text:0000000000009601                 mov     edi, 4
.text:0000000000009606                 call    quotearg_style
.text:000000000000960B                 lea     rsi, aFailedToExtend ; "failed to extend %s"
.text:0000000000009612                 mov     r12, rax
.text:0000000000009615                 mov     edx, 5          ; category
.text:000000000000961A
.text:000000000000961A loc_961A:                               ; CODE XREF: copy_internal+3CA9↓j
.text:000000000000961A                                         ; copy_internal+3F52↓j
.text:000000000000961A                 xor     edi, edi        ; domainname
.text:000000000000961C                 call    _dcgettext
.text:0000000000009621                 mov     [rbp+format], rax
.text:0000000000009628                 call    ___errno_location
.text:000000000000962D                 mov     rdx, [rbp+format] ; format
.text:0000000000009634                 mov     esi, [rax]      ; errnum
.text:0000000000009636                 mov     rcx, r12
.text:0000000000009639                 xor     edi, edi        ; status
.text:000000000000963B                 xor     eax, eax
.text:000000000000963D                 call    _error
.text:0000000000009642                 jmp     loc_8D12
.text:0000000000009647 ; ---------------------------------------------------------------------------
.text:0000000000009647
.text:0000000000009647 loc_9647:                               ; CODE XREF: copy_internal+31AD↑j
.text:0000000000009647                 mov     byte ptr [rbp+var_2D0+1], 1
.text:000000000000964E
.text:000000000000964E loc_964E:                               ; CODE XREF: copy_internal+30FF↑j
.text:000000000000964E                                         ; copy_internal+31C7↑j
.text:000000000000964E                 mov     rdi, [rbp+var_2D0+8] ; ptr
.text:0000000000009655                 call    free
.text:000000000000965A                 cmp     byte ptr [rbp+var_2D0+1], 0
.text:0000000000009661                 mov     [rbp+var_2D0+8], 0
.text:000000000000966C                 mov     qword ptr [rbp+var_2E0+8], 0
.text:0000000000009677                 jz      loc_8B63
.text:000000000000967D                 mov     rbx, [rbp+var_388]
.text:0000000000009684                 mov     r13d, [rbp+var_360]
.text:000000000000968B
.text:000000000000968B loc_968B:                               ; CODE XREF: copy_internal+3D06↓j
.text:000000000000968B                 mov     rcx, [rbp+var_3A0]
.text:0000000000009692                 cmp     [rbp+length], rcx
.text:0000000000009699                 setnle  r12b
.text:000000000000969D                 jg      short loc_96AC
.text:000000000000969F                 cmp     byte ptr [rbp+format], 0
.text:00000000000096A6                 jz      loc_903A
.text:00000000000096AC
.text:00000000000096AC loc_96AC:                               ; CODE XREF: copy_internal+3C1D↑j
.text:00000000000096AC                 cmp     [rbp+var_390], 1
.text:00000000000096B3                 mov     rsi, [rbp+length] ; length
.text:00000000000096BA                 jz      short loc_972E
.text:00000000000096BC                 mov     edi, [rbp+fd]   ; fd
.text:00000000000096C2                 call    _ftruncate
.text:00000000000096C7                 test    eax, eax
.text:00000000000096C9                 jnz     loc_95FA
.text:00000000000096CF                 cmp     [rbp+var_390], 3
.text:00000000000096D6                 jnz     loc_903A
.text:00000000000096DC                 test    r12b, r12b
.text:00000000000096DF                 jz      loc_903A
.text:00000000000096E5                 mov     rdx, [rbp+length]
.text:00000000000096EC                 mov     rsi, [rbp+var_3A0]
.text:00000000000096F3                 mov     edi, [rbp+fd]
.text:00000000000096F9                 sub     rdx, rsi
.text:00000000000096FC                 call    punch_hole
.text:0000000000009701                 test    eax, eax
.text:0000000000009703                 jns     loc_903A
.text:0000000000009709                 mov     rsi, [rbp+file]
.text:0000000000009710                 mov     edi, 4
.text:0000000000009715                 call    quotearg_style
.text:000000000000971A                 mov     edx, 5
.text:000000000000971F                 mov     r12, rax
.text:0000000000009722                 lea     rsi, aErrorDeallocat ; "error deallocating %s"
.text:0000000000009729                 jmp     loc_961A
.text:000000000000972E ; ---------------------------------------------------------------------------
.text:000000000000972E
.text:000000000000972E loc_972E:                               ; CODE XREF: copy_internal+3C3A↑j
.text:000000000000972E                 sub     rsi, [rbp+var_3A0]
.text:0000000000009735                 mov     edi, [rbp+fd]   ; fd
.text:000000000000973B                 call    write_zeros
.text:0000000000009740                 test    al, al
.text:0000000000009742                 jnz     loc_903A
.text:0000000000009748                 jmp     loc_95FA
.text:000000000000974D ; ---------------------------------------------------------------------------
.text:000000000000974D
.text:000000000000974D loc_974D:                               ; CODE XREF: copy_internal+2FFD↑j
.text:000000000000974D                 mov     rax, [rbp+var_160.st_size]
.text:0000000000009754                 cmp     [rbp+var_370], rax
.text:000000000000975B                 jbe     loc_8A83
.text:0000000000009761                 add     rax, 1
.text:0000000000009765                 mov     [rbp+var_370], rax
.text:000000000000976C                 jmp     loc_8A83
.text:0000000000009771 ; ---------------------------------------------------------------------------
.text:0000000000009771
.text:0000000000009771 loc_9771:                               ; CODE XREF: copy_internal+30F1↑j
.text:0000000000009771                 cmp     byte ptr [rbp+var_2D0+1], 0
.text:0000000000009778                 mov     rbx, [rbp+var_388]
.text:000000000000977F                 mov     r13d, [rbp+var_360]
.text:0000000000009786                 jnz     loc_968B
.text:000000000000978C                 cmp     byte ptr [rbp+var_2D0], 0
.text:0000000000009793                 jz      loc_99B0
.text:0000000000009799                 xor     r9d, r9d
.text:000000000000979C                 cmp     dword ptr [rbx+0Ch], 3
.text:00000000000097A0                 mov     eax, 0
.text:00000000000097A5                 setz    r9b
.text:00000000000097A9                 cmp     [rbp+var_3A5], 0
.text:00000000000097B0                 cmovnz  rax, [rbp+var_398]
.text:00000000000097B8                 mov     [rbp+var_398], rax
.text:00000000000097BF                 jmp     loc_9581
.text:00000000000097C4 ; ---------------------------------------------------------------------------
.text:00000000000097C4
.text:00000000000097C4 loc_97C4:                               ; CODE XREF: copy_internal+2EE6↑j
.text:00000000000097C4                 mov     edx, [rbp+fildes]
.text:00000000000097CA                 mov     edi, [rbp+fd]   ; fd
.text:00000000000097D0                 xor     eax, eax
.text:00000000000097D2                 mov     esi, 40049409h  ; request
.text:00000000000097D7                 call    _ioctl
.text:00000000000097DC                 test    eax, eax
.text:00000000000097DE                 jz      loc_902F
.text:00000000000097E4                 cmp     dword ptr [rbx+38h], 2
.text:00000000000097E8                 jnz     loc_896C
.text:00000000000097EE                 mov     rdx, [rbp+filename]
.text:00000000000097F5                 mov     esi, 4
.text:00000000000097FA                 mov     edi, 1
.text:00000000000097FF                 call    quotearg_n_style
.text:0000000000009804                 mov     rdx, [rbp+file]
.text:000000000000980B                 mov     esi, 4
.text:0000000000009810                 xor     edi, edi
.text:0000000000009812                 mov     r12, rax
.text:0000000000009815                 call    quotearg_n_style
.text:000000000000981A                 lea     rsi, aFailedToCloneS ; "failed to clone %s from %s"
.text:0000000000009821                 mov     edx, 5          ; category
.text:0000000000009826                 xor     edi, edi        ; domainname
.text:0000000000009828                 mov     [rbp+format], rax
.text:000000000000982F                 call    _dcgettext
.text:0000000000009834                 mov     [rbp+ptr], rax
.text:000000000000983B                 call    ___errno_location
.text:0000000000009840                 mov     rcx, [rbp+format]
.text:0000000000009847                 mov     esi, [rax]      ; errnum
.text:0000000000009849                 mov     r8, r12
.text:000000000000984C                 mov     rdx, [rbp+ptr]  ; format
.text:0000000000009853                 xor     edi, edi        ; status
.text:0000000000009855                 xor     eax, eax
.text:0000000000009857                 call    _error
.text:000000000000985C                 xor     r8d, r8d
.text:000000000000985F                 mov     [rbp+ptr], 0
.text:000000000000986A                 jmp     loc_8D15
.text:000000000000986F ; ---------------------------------------------------------------------------
.text:000000000000986F
.text:000000000000986F loc_986F:                               ; CODE XREF: copy_internal+2F8E↑j
.text:000000000000986F                 mov     eax, [rbx+0Ch]
.text:0000000000009872                 cmp     eax, 3
.text:0000000000009875                 jz      loc_98FE
.text:000000000000987B                 cmp     eax, 2
.text:000000000000987E                 jnz     loc_8A14
.text:0000000000009884                 test    byte ptr [rbp+var_348], 1
.text:000000000000988B                 jz      loc_8A14
.text:0000000000009891                 mov     rax, [rbp+var_370]
.text:0000000000009898                 lea     rdi, [r12+rax]
.text:000000000000989C                 call    xmalloc
.text:00000000000098A1                 lea     rcx, [rax+r12-1]
.text:00000000000098A6                 mov     [rbp+ptr], rax
.text:00000000000098AD                 xor     edx, edx
.text:00000000000098AF                 mov     rax, rcx
.text:00000000000098B2                 div     r12
.text:00000000000098B5                 sub     rcx, rdx
.text:00000000000098B8                 mov     [rbp+var_3B0], rcx
.text:00000000000098BF
.text:00000000000098BF loc_98BF:                               ; CODE XREF: copy_internal+3EB3↓j
.text:00000000000098BF                 mov     eax, [rbx+0Ch]
.text:00000000000098C2                 mov     [rbp+var_390], eax
.text:00000000000098C8                 movzx   eax, byte ptr [rbp+format]
.text:00000000000098CF                 mov     [rbp+var_3A5], al
.text:00000000000098D5                 jmp     loc_8AFC
.text:00000000000098DA ; ---------------------------------------------------------------------------
.text:00000000000098DA
.text:00000000000098DA loc_98DA:                               ; CODE XREF: copy_internal+2F78↑j
.text:00000000000098DA                 mov     rax, [rbp+var_160.st_size]
.text:00000000000098E1                 cqo
.text:00000000000098E3                 idiv    r8
.text:00000000000098E6                 cmp     [rbp+var_160.st_blocks], rax
.text:00000000000098ED                 setl    al
.text:00000000000098F0                 movzx   eax, al
.text:00000000000098F3                 mov     dword ptr [rbp+var_348], eax
.text:00000000000098F9                 jmp     loc_89FE
.text:00000000000098FE ; ---------------------------------------------------------------------------
.text:00000000000098FE
.text:00000000000098FE loc_98FE:                               ; CODE XREF: copy_internal+3DF5↑j
.text:00000000000098FE                 mov     rax, [rbp+var_370]
.text:0000000000009905                 lea     rdi, [r12+rax]
.text:0000000000009909                 call    xmalloc
.text:000000000000990E                 lea     rcx, [rax+r12-1]
.text:0000000000009913                 xor     edx, edx
.text:0000000000009915                 mov     [rbp+ptr], rax
.text:000000000000991C                 mov     rax, rcx
.text:000000000000991F                 div     r12
.text:0000000000009922                 sub     rcx, rdx
.text:0000000000009925                 cmp     dword ptr [rbp+var_348], 0
.text:000000000000992C                 mov     [rbp+var_3B0], rcx
.text:0000000000009933                 jnz     short loc_98BF
.text:0000000000009935                 xor     r9d, r9d
.text:0000000000009938                 cmp     dword ptr [rbx+0Ch], 3
.text:000000000000993C                 lea     rax, [rbp+dev]
.text:0000000000009943                 mov     [rbp+var_348], rax
.text:000000000000994A                 setz    r9b
.text:000000000000994E                 jmp     loc_9581
.text:0000000000009953 ; ---------------------------------------------------------------------------
.text:0000000000009953
.text:0000000000009953 loc_9953:                               ; CODE XREF: copy_internal+39B8↑j
.text:0000000000009953                 mov     rdx, [rbp+file]
.text:000000000000995A                 mov     esi, 3
.text:000000000000995F                 xor     edi, edi
.text:0000000000009961                 mov     rbx, [rbp+var_388]
.text:0000000000009968                 mov     r13d, [rbp+var_360]
.text:000000000000996F                 call    quotearg_n_style_colon
.text:0000000000009974                 lea     rsi, aSWriteFailed ; "%s: write failed"
.text:000000000000997B                 mov     r12, rax
.text:000000000000997E                 mov     edx, 5          ; category
.text:0000000000009983
.text:0000000000009983 loc_9983:                               ; CODE XREF: copy_internal+40DD↓j
.text:0000000000009983                 xor     edi, edi        ; domainname
.text:0000000000009985                 call    _dcgettext
.text:000000000000998A                 mov     [rbp+format], rax
.text:0000000000009991                 call    ___errno_location
.text:0000000000009996                 mov     rdx, [rbp+format] ; format
.text:000000000000999D                 mov     esi, [rax]      ; errnum
.text:000000000000999F                 mov     rcx, r12
.text:00000000000099A2                 xor     edi, edi        ; status
.text:00000000000099A4                 xor     eax, eax
.text:00000000000099A6                 call    _error
.text:00000000000099AB                 jmp     loc_8D06
.text:00000000000099B0 ; ---------------------------------------------------------------------------
.text:00000000000099B0
.text:00000000000099B0 loc_99B0:                               ; CODE XREF: copy_internal+3D13↑j
.text:00000000000099B0                 mov     rdx, [rbp+filename]
.text:00000000000099B7                 mov     esi, 3
.text:00000000000099BC                 xor     edi, edi
.text:00000000000099BE                 call    quotearg_n_style_colon
.text:00000000000099C3                 mov     edx, 5
.text:00000000000099C8                 mov     r12, rax
.text:00000000000099CB                 lea     rsi, aSFailedToGetEx ; "%s: failed to get extents info"
.text:00000000000099D2                 jmp     loc_961A
.text:00000000000099D7 ; ---------------------------------------------------------------------------
.text:00000000000099D7
.text:00000000000099D7 loc_99D7:                               ; CODE XREF: copy_internal+365C↑j
.text:00000000000099D7                 call    cached_umask
.text:00000000000099DC                 mov     esi, [rbp+fd]
.text:00000000000099E2                 not     eax
.text:00000000000099E4                 mov     rdi, [rbp+file]
.text:00000000000099EB                 mov     edx, eax
.text:00000000000099ED                 mov     r14d, r12d
.text:00000000000099F0                 and     edx, 1B6h
.text:00000000000099F6                 call    set_acl
.text:00000000000099FB                 test    eax, eax
.text:00000000000099FD                 setz    r8b
.text:0000000000009A01                 jmp     loc_8D15
.text:0000000000009A06 ; ---------------------------------------------------------------------------
.text:0000000000009A06
.text:0000000000009A06 loc_9A06:                               ; CODE XREF: copy_internal+334E↑j
.text:0000000000009A06                 mov     rsi, [rbp+file]
.text:0000000000009A0D                 mov     edi, 4
.text:0000000000009A12                 call    quotearg_style
.text:0000000000009A17                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:0000000000009A1E                 mov     edx, 5          ; category
.text:0000000000009A23                 xor     edi, edi        ; domainname
.text:0000000000009A25                 mov     qword ptr [rbp+fd], rax
.text:0000000000009A2C                 call    _dcgettext
.text:0000000000009A31                 mov     rcx, qword ptr [rbp+fd]
.text:0000000000009A38                 mov     rdx, rax
.text:0000000000009A3B                 mov     esi, [r12]
.text:0000000000009A3F                 jmp     loc_7BC1
.text:0000000000009A44 ; ---------------------------------------------------------------------------
.text:0000000000009A44
.text:0000000000009A44 loc_9A44:                               ; CODE XREF: copy_internal+37C4↑j
.text:0000000000009A44                 lea     rsi, aFailedToPreser_1 ; "failed to preserve ownership for %s"
.text:0000000000009A4B                 xor     edi, edi        ; domainname
.text:0000000000009A4D                 mov     edx, 5          ; category
.text:0000000000009A52                 call    _dcgettext
.text:0000000000009A57                 mov     r12, rax
.text:0000000000009A5A                 call    ___errno_location
.text:0000000000009A5F                 mov     rcx, [rbp+file]
.text:0000000000009A66                 mov     esi, [rax]      ; errnum
.text:0000000000009A68                 xor     edi, edi        ; status
.text:0000000000009A6A                 xor     eax, eax
.text:0000000000009A6C                 mov     rdx, r12        ; format
.text:0000000000009A6F                 call    _error
.text:0000000000009A74                 movzx   r8d, byte ptr [rbx+24h]
.text:0000000000009A79                 test    r8b, r8b
.text:0000000000009A7C                 jnz     loc_6A10
.text:0000000000009A82                 jmp     loc_5FFF
.text:0000000000009A87 ; ---------------------------------------------------------------------------
.text:0000000000009A87
.text:0000000000009A87 loc_9A87:                               ; CODE XREF: copy_internal+3819↑j
.text:0000000000009A87                 mov     rsi, [rbp+file]
.text:0000000000009A8E                 mov     edi, 4
.text:0000000000009A93                 mov     byte ptr [rbp+fd], r8b
.text:0000000000009A9A                 call    quotearg_style
.text:0000000000009A9F                 lea     rsi, aNotWritingThro ; "not writing through dangling symlink %s"
.text:0000000000009AA6                 mov     r12, rax
.text:0000000000009AA9                 mov     edx, 5          ; category
.text:0000000000009AAE                 xor     edi, edi        ; domainname
.text:0000000000009AB0                 call    _dcgettext
.text:0000000000009AB5                 mov     rcx, r12
.text:0000000000009AB8                 mov     rdx, rax        ; format
.text:0000000000009ABB                 xor     esi, esi        ; errnum
.text:0000000000009ABD                 xor     edi, edi        ; status
.text:0000000000009ABF                 xor     eax, eax
.text:0000000000009AC1                 call    _error
.text:0000000000009AC6                 mov     [rbp+ptr], 0
.text:0000000000009AD1                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000009AD9                 jmp     loc_7BD8
.text:0000000000009ADE ; ---------------------------------------------------------------------------
.text:0000000000009ADE
.text:0000000000009ADE loc_9ADE:                               ; CODE XREF: copy_internal+3631↑j
.text:0000000000009ADE                 call    _geteuid
.text:0000000000009AE3                 test    eax, eax
.text:0000000000009AE5                 jz      loc_90B7
.text:0000000000009AEB                 mov     rsi, [rbp+file]
.text:0000000000009AF2                 mov     edi, [rbp+fd]
.text:0000000000009AF8                 mov     edx, 180h
.text:0000000000009AFD                 call    fchmod_or_lchmod
.text:0000000000009B02                 test    eax, eax
.text:0000000000009B04                 jnz     loc_90B7
.text:0000000000009B0A                 mov     edx, dword ptr [rbp+var_378]
.text:0000000000009B10                 mov     rsi, [rbp+file]
.text:0000000000009B17                 mov     edi, [rbp+fd]
.text:0000000000009B1D                 not     edx
.text:0000000000009B1F                 and     edx, [rbp+var_3A4]
.text:0000000000009B25                 call    fchmod_or_lchmod
.text:0000000000009B2A                 jmp     loc_90B7
.text:0000000000009B2F ; ---------------------------------------------------------------------------
.text:0000000000009B2F
.text:0000000000009B2F loc_9B2F:                               ; CODE XREF: copy_internal+323A↑j
.text:0000000000009B2F                 mov     rsi, [rbp+filename]
.text:0000000000009B36                 mov     edi, 4
.text:0000000000009B3B                 mov     rbx, [rbp+var_388]
.text:0000000000009B42                 mov     r13d, [rbp+var_360]
.text:0000000000009B49                 call    quotearg_style
.text:0000000000009B4E                 mov     edx, 5
.text:0000000000009B53                 mov     r12, rax
.text:0000000000009B56                 lea     rsi, aCannotLseekS ; "cannot lseek %s"
.text:0000000000009B5D                 jmp     loc_9983
.text:0000000000009B62 ; ---------------------------------------------------------------------------
.text:0000000000009B62
.text:0000000000009B62 loc_9B62:                               ; CODE XREF: copy_internal+364F↑j
.text:0000000000009B62                 mov     edx, [rbx+10h]
.text:0000000000009B65                 mov     esi, [rbp+fd]
.text:0000000000009B6B                 mov     rdi, [rbp+file]
.text:0000000000009B72                 call    set_acl
.text:0000000000009B77                 test    eax, eax
.text:0000000000009B79                 setz    r8b
.text:0000000000009B7D                 jmp     loc_8D15
.text:0000000000009B82 ; ---------------------------------------------------------------------------
.text:0000000000009B82
.text:0000000000009B82 loc_9B82:                               ; CODE XREF: copy_internal+3905↑j
.text:0000000000009B82                 call    free
.text:0000000000009B87                 jmp     loc_873A
.text:0000000000009B87 ; } // starts at 5A80
.text:0000000000009B87 copy_internal   endp ; sp-analysis failed
.text:0000000000009B87
.text:0000000000009B87 ; ---------------------------------------------------------------------------
.text:0000000000009B8C                 align 10h
.text:0000000000009B90
.text:0000000000009B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B90
.text:0000000000009B90
.text:0000000000009B90                 public copy
.text:0000000000009B90 copy            proc near               ; CODE XREF: do_copy+129↑p
.text:0000000000009B90                                         ; do_copy+311↑p
.text:0000000000009B90
.text:0000000000009B90 var_11          = byte ptr -11h
.text:0000000000009B90 var_10          = qword ptr -10h
.text:0000000000009B90
.text:0000000000009B90 ; __unwind {
.text:0000000000009B90                 sub     rsp, 18h
.text:0000000000009B94                 mov     rax, fs:28h
.text:0000000000009B9D                 mov     [rsp+18h+var_10], rax
.text:0000000000009BA2                 xor     eax, eax
.text:0000000000009BA4                 test    rcx, rcx
.text:0000000000009BA7                 jz      loc_9CD6
.text:0000000000009BAD                 cmp     dword ptr [rcx], 3
.text:0000000000009BB0                 ja      loc_9CB7
.text:0000000000009BB6                 mov     eax, [rcx+0Ch]
.text:0000000000009BB9                 lea     r10d, [rax-1]
.text:0000000000009BBD                 cmp     r10d, 2
.text:0000000000009BC1                 ja      loc_9C98
.text:0000000000009BC7                 mov     r10d, [rcx+38h]
.text:0000000000009BCB                 cmp     r10d, 2
.text:0000000000009BCF                 ja      loc_9C79
.text:0000000000009BD5                 cmp     byte ptr [rcx+17h], 0
.text:0000000000009BD9                 jnz     short loc_9C30
.text:0000000000009BDB
.text:0000000000009BDB loc_9BDB:                               ; CODE XREF: copy+A4↓j
.text:0000000000009BDB                 cmp     eax, 2
.text:0000000000009BDE                 jz      short loc_9BE6
.text:0000000000009BE0                 cmp     r10d, 2
.text:0000000000009BE4                 jz      short loc_9C55
.text:0000000000009BE6
.text:0000000000009BE6 loc_9BE6:                               ; CODE XREF: copy+4E↑j
.text:0000000000009BE6                 mov     [rsp+18h+var_11], 0
.text:0000000000009BEB                 push    r9
.text:0000000000009BED                 movzx   edx, dl
.text:0000000000009BF0                 push    r8
.text:0000000000009BF2                 mov     r9, rcx
.text:0000000000009BF5                 xor     r8d, r8d
.text:0000000000009BF8                 xor     ecx, ecx
.text:0000000000009BFA                 mov     cs:top_level_dst_name, rsi
.text:0000000000009C01                 mov     cs:top_level_src_name, rdi
.text:0000000000009C08                 lea     rax, [rsp+28h+var_11]
.text:0000000000009C0D                 push    rax
.text:0000000000009C0E                 push    1
.text:0000000000009C10                 call    copy_internal
.text:0000000000009C15                 add     rsp, 20h
.text:0000000000009C19                 mov     rsi, [rsp+18h+var_10]
.text:0000000000009C1E                 xor     rsi, fs:28h
.text:0000000000009C27                 jnz     short loc_9C74
.text:0000000000009C29                 add     rsp, 18h
.text:0000000000009C2D                 retn
.text:0000000000009C2D ; ---------------------------------------------------------------------------
.text:0000000000009C2E                 align 10h
.text:0000000000009C30
.text:0000000000009C30 loc_9C30:                               ; CODE XREF: copy+49↑j
.text:0000000000009C30                 cmp     byte ptr [rcx+2Ch], 0
.text:0000000000009C34                 jz      short loc_9BDB
.text:0000000000009C36                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009C3D                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009C44                 lea     rdi, assertion  ; "!(co->hard_link && co->symbolic_link)"
.text:0000000000009C4B                 mov     edx, 0B8Ah      ; line
.text:0000000000009C50                 call    ___assert_fail
.text:0000000000009C55 ; ---------------------------------------------------------------------------
.text:0000000000009C55
.text:0000000000009C55 loc_9C55:                               ; CODE XREF: copy+54↑j
.text:0000000000009C55                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009C5C                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009C63                 lea     rdi, aCoReflinkModeR ; "! (co->reflink_mode == REFLINK_ALWAYS &"...
.text:0000000000009C6A                 mov     edx, 0B8Dh      ; line
.text:0000000000009C6F                 call    ___assert_fail
.text:0000000000009C74 ; ---------------------------------------------------------------------------
.text:0000000000009C74
.text:0000000000009C74 loc_9C74:                               ; CODE XREF: copy+97↑j
.text:0000000000009C74                 call    ___stack_chk_fail
.text:0000000000009C79 ; ---------------------------------------------------------------------------
.text:0000000000009C79
.text:0000000000009C79 loc_9C79:                               ; CODE XREF: copy+3F↑j
.text:0000000000009C79                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009C80                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009C87                 lea     rdi, aValidReflinkMo ; "VALID_REFLINK_MODE (co->reflink_mode)"
.text:0000000000009C8E                 mov     edx, 0B89h      ; line
.text:0000000000009C93                 call    ___assert_fail
.text:0000000000009C98 ; ---------------------------------------------------------------------------
.text:0000000000009C98
.text:0000000000009C98 loc_9C98:                               ; CODE XREF: copy+31↑j
.text:0000000000009C98                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009C9F                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009CA6                 lea     rdi, aValidSparseMod ; "VALID_SPARSE_MODE (co->sparse_mode)"
.text:0000000000009CAD                 mov     edx, 0B88h      ; line
.text:0000000000009CB2                 call    ___assert_fail
.text:0000000000009CB7 ; ---------------------------------------------------------------------------
.text:0000000000009CB7
.text:0000000000009CB7 loc_9CB7:                               ; CODE XREF: copy+20↑j
.text:0000000000009CB7                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009CBE                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009CC5                 lea     rdi, aValidBackupTyp ; "VALID_BACKUP_TYPE (co->backup_type)"
.text:0000000000009CCC                 mov     edx, 0B87h      ; line
.text:0000000000009CD1                 call    ___assert_fail
.text:0000000000009CD6 ; ---------------------------------------------------------------------------
.text:0000000000009CD6
.text:0000000000009CD6 loc_9CD6:                               ; CODE XREF: copy+17↑j
.text:0000000000009CD6                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009CDD                 lea     rsi, file       ; "../coreutils-8.31/src/copy.c"
.text:0000000000009CE4                 lea     rdi, aCoNull    ; "co != NULL"
.text:0000000000009CEB                 mov     edx, 0B86h      ; line
.text:0000000000009CF0                 call    ___assert_fail
.text:0000000000009CF0 ; } // starts at 9B90
.text:0000000000009CF0 copy            endp
.text:0000000000009CF0
.text:0000000000009CF0 ; ---------------------------------------------------------------------------
.text:0000000000009CF5                 align 20h
.text:0000000000009D00
.text:0000000000009D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D00
.text:0000000000009D00
.text:0000000000009D00 src_to_dest_hash proc near              ; DATA XREF: hash_init+E↓o
.text:0000000000009D00 ; __unwind {
.text:0000000000009D00                 mov     rax, [rdi]
.text:0000000000009D03                 xor     edx, edx
.text:0000000000009D05                 div     rsi
.text:0000000000009D08                 mov     rax, rdx
.text:0000000000009D0B                 retn
.text:0000000000009D0B ; } // starts at 9D00
.text:0000000000009D0B src_to_dest_hash endp
.text:0000000000009D0B
.text:0000000000009D0B ; ---------------------------------------------------------------------------
.text:0000000000009D0C                 align 10h
.text:0000000000009D10
.text:0000000000009D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D10
.text:0000000000009D10
.text:0000000000009D10 src_to_dest_compare proc near           ; DATA XREF: hash_init+7↓o
.text:0000000000009D10 ; __unwind {
.text:0000000000009D10                 xor     eax, eax
.text:0000000000009D12                 mov     rdx, [rsi]
.text:0000000000009D15                 cmp     [rdi], rdx
.text:0000000000009D18                 jz      short loc_9D20
.text:0000000000009D1A                 rep retn
.text:0000000000009D1A ; ---------------------------------------------------------------------------
.text:0000000000009D1C                 align 20h
.text:0000000000009D20
.text:0000000000009D20 loc_9D20:                               ; CODE XREF: src_to_dest_compare+8↑j
.text:0000000000009D20                 mov     rax, [rsi+8]
.text:0000000000009D24                 cmp     [rdi+8], rax
.text:0000000000009D28                 setz    al
.text:0000000000009D2B                 retn
.text:0000000000009D2B ; } // starts at 9D10
.text:0000000000009D2B src_to_dest_compare endp
.text:0000000000009D2B
.text:0000000000009D2B ; ---------------------------------------------------------------------------
.text:0000000000009D2C                 align 10h
.text:0000000000009D30
.text:0000000000009D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D30
.text:0000000000009D30
.text:0000000000009D30 ; __int64 __fastcall src_to_dest_free(void *ptr)
.text:0000000000009D30 src_to_dest_free proc near              ; DATA XREF: hash_init↓o
.text:0000000000009D30 ; __unwind {
.text:0000000000009D30                 push    rbx
.text:0000000000009D31                 mov     rbx, rdi
.text:0000000000009D34                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000009D38                 call    free
.text:0000000000009D3D                 mov     rdi, rbx        ; ptr
.text:0000000000009D40                 pop     rbx
.text:0000000000009D41                 jmp     free
.text:0000000000009D41 ; } // starts at 9D30
.text:0000000000009D41 src_to_dest_free endp
.text:0000000000009D41
.text:0000000000009D41 ; ---------------------------------------------------------------------------
.text:0000000000009D46                 align 10h
.text:0000000000009D50
.text:0000000000009D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D50
.text:0000000000009D50
.text:0000000000009D50                 public forget_created
.text:0000000000009D50 forget_created  proc near               ; CODE XREF: copy_internal+11CD↑p
.text:0000000000009D50                                         ; copy_internal+184E↑p
.text:0000000000009D50
.text:0000000000009D50 var_28          = qword ptr -28h
.text:0000000000009D50 var_20          = qword ptr -20h
.text:0000000000009D50 var_18          = qword ptr -18h
.text:0000000000009D50 var_10          = qword ptr -10h
.text:0000000000009D50
.text:0000000000009D50 ; __unwind {
.text:0000000000009D50                 push    rbx
.text:0000000000009D51                 sub     rsp, 20h
.text:0000000000009D55                 mov     [rsp+28h+var_28], rdi
.text:0000000000009D59                 mov     rdi, cs:src_to_dest
.text:0000000000009D60                 mov     [rsp+28h+var_20], rsi
.text:0000000000009D65                 mov     rsi, rsp
.text:0000000000009D68                 mov     [rsp+28h+var_18], 0
.text:0000000000009D71                 mov     rax, fs:28h
.text:0000000000009D7A                 mov     [rsp+28h+var_10], rax
.text:0000000000009D7F                 xor     eax, eax
.text:0000000000009D81                 call    hash_delete
.text:0000000000009D86                 test    rax, rax
.text:0000000000009D89                 jz      short loc_9D9F
.text:0000000000009D8B                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000009D8F                 mov     rbx, rax
.text:0000000000009D92                 call    free
.text:0000000000009D97                 mov     rdi, rbx        ; ptr
.text:0000000000009D9A                 call    free
.text:0000000000009D9F
.text:0000000000009D9F loc_9D9F:                               ; CODE XREF: forget_created+39↑j
.text:0000000000009D9F                 mov     rax, [rsp+28h+var_10]
.text:0000000000009DA4                 xor     rax, fs:28h
.text:0000000000009DAD                 jnz     short loc_9DB5
.text:0000000000009DAF                 add     rsp, 20h
.text:0000000000009DB3                 pop     rbx
.text:0000000000009DB4                 retn
.text:0000000000009DB5 ; ---------------------------------------------------------------------------
.text:0000000000009DB5
.text:0000000000009DB5 loc_9DB5:                               ; CODE XREF: forget_created+5D↑j
.text:0000000000009DB5                 call    ___stack_chk_fail
.text:0000000000009DB5 ; } // starts at 9D50
.text:0000000000009DB5 forget_created  endp
.text:0000000000009DB5
.text:0000000000009DB5 ; ---------------------------------------------------------------------------
.text:0000000000009DBA                 align 20h
.text:0000000000009DC0
.text:0000000000009DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DC0
.text:0000000000009DC0
.text:0000000000009DC0                 public src_to_dest_lookup
.text:0000000000009DC0 src_to_dest_lookup proc near            ; CODE XREF: copy_internal+1913↑p
.text:0000000000009DC0                                         ; copy_internal+1976↑p
.text:0000000000009DC0
.text:0000000000009DC0 var_28          = qword ptr -28h
.text:0000000000009DC0 var_20          = qword ptr -20h
.text:0000000000009DC0 var_10          = qword ptr -10h
.text:0000000000009DC0
.text:0000000000009DC0 ; __unwind {
.text:0000000000009DC0                 sub     rsp, 28h
.text:0000000000009DC4                 mov     [rsp+28h+var_28], rdi
.text:0000000000009DC8                 mov     rdi, cs:src_to_dest
.text:0000000000009DCF                 mov     [rsp+28h+var_20], rsi
.text:0000000000009DD4                 mov     rsi, rsp
.text:0000000000009DD7                 mov     rax, fs:28h
.text:0000000000009DE0                 mov     [rsp+28h+var_10], rax
.text:0000000000009DE5                 xor     eax, eax
.text:0000000000009DE7                 call    hash_lookup
.text:0000000000009DEC                 test    rax, rax
.text:0000000000009DEF                 jz      short loc_9E10
.text:0000000000009DF1                 mov     rax, [rax+10h]
.text:0000000000009DF5
.text:0000000000009DF5 loc_9DF5:                               ; CODE XREF: src_to_dest_lookup+52↓j
.text:0000000000009DF5                 mov     rdx, [rsp+28h+var_10]
.text:0000000000009DFA                 xor     rdx, fs:28h
.text:0000000000009E03                 jnz     short loc_9E14
.text:0000000000009E05                 add     rsp, 28h
.text:0000000000009E09                 retn
.text:0000000000009E09 ; ---------------------------------------------------------------------------
.text:0000000000009E0A                 align 10h
.text:0000000000009E10
.text:0000000000009E10 loc_9E10:                               ; CODE XREF: src_to_dest_lookup+2F↑j
.text:0000000000009E10                 xor     eax, eax
.text:0000000000009E12                 jmp     short loc_9DF5
.text:0000000000009E14 ; ---------------------------------------------------------------------------
.text:0000000000009E14
.text:0000000000009E14 loc_9E14:                               ; CODE XREF: src_to_dest_lookup+43↑j
.text:0000000000009E14                 call    ___stack_chk_fail
.text:0000000000009E14 ; } // starts at 9DC0
.text:0000000000009E14 src_to_dest_lookup endp
.text:0000000000009E14
.text:0000000000009E14 ; ---------------------------------------------------------------------------
.text:0000000000009E19                 align 20h
.text:0000000000009E20
.text:0000000000009E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E20
.text:0000000000009E20
.text:0000000000009E20 ; __int64 __fastcall remember_copied(void *src)
.text:0000000000009E20                 public remember_copied
.text:0000000000009E20 remember_copied proc near               ; CODE XREF: copy_internal+2CC↑p
.text:0000000000009E20                                         ; copy_internal+1071↑p ...
.text:0000000000009E20 ; __unwind {
.text:0000000000009E20                 push    r13
.text:0000000000009E22                 push    r12
.text:0000000000009E24                 mov     r13, rdi
.text:0000000000009E27                 push    rbp
.text:0000000000009E28                 push    rbx
.text:0000000000009E29                 mov     edi, 18h
.text:0000000000009E2E                 mov     r12, rsi
.text:0000000000009E31                 mov     rbp, rdx
.text:0000000000009E34                 sub     rsp, 8
.text:0000000000009E38                 call    xmalloc
.text:0000000000009E3D                 mov     rdi, r13        ; src
.text:0000000000009E40                 mov     rbx, rax
.text:0000000000009E43                 call    xstrdup
.text:0000000000009E48                 mov     rdi, cs:src_to_dest
.text:0000000000009E4F                 mov     rsi, rbx
.text:0000000000009E52                 mov     [rbx+10h], rax
.text:0000000000009E56                 mov     [rbx], r12
.text:0000000000009E59                 mov     [rbx+8], rbp
.text:0000000000009E5D                 call    hash_insert
.text:0000000000009E62                 test    rax, rax
.text:0000000000009E65                 jz      short loc_9E94
.text:0000000000009E67                 cmp     rbx, rax
.text:0000000000009E6A                 mov     rbp, rax
.text:0000000000009E6D                 jz      short loc_9E90
.text:0000000000009E6F                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000009E73                 call    free
.text:0000000000009E78                 mov     rdi, rbx        ; ptr
.text:0000000000009E7B                 call    free
.text:0000000000009E80                 mov     rax, [rbp+10h]
.text:0000000000009E84
.text:0000000000009E84 loc_9E84:                               ; CODE XREF: remember_copied+72↓j
.text:0000000000009E84                 add     rsp, 8
.text:0000000000009E88                 pop     rbx
.text:0000000000009E89                 pop     rbp
.text:0000000000009E8A                 pop     r12
.text:0000000000009E8C                 pop     r13
.text:0000000000009E8E                 retn
.text:0000000000009E8E ; ---------------------------------------------------------------------------
.text:0000000000009E8F                 align 10h
.text:0000000000009E90
.text:0000000000009E90 loc_9E90:                               ; CODE XREF: remember_copied+4D↑j
.text:0000000000009E90                 xor     eax, eax
.text:0000000000009E92                 jmp     short loc_9E84
.text:0000000000009E94 ; ---------------------------------------------------------------------------
.text:0000000000009E94
.text:0000000000009E94 loc_9E94:                               ; CODE XREF: remember_copied+45↑j
.text:0000000000009E94                 call    xalloc_die
.text:0000000000009E94 ; } // starts at 9E20
.text:0000000000009E94 remember_copied endp
.text:0000000000009E94
.text:0000000000009E94 ; ---------------------------------------------------------------------------
.text:0000000000009E99                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EA0
.text:0000000000009EA0
.text:0000000000009EA0                 public hash_init
.text:0000000000009EA0 hash_init       proc near               ; CODE XREF: main+5DC↑p
.text:0000000000009EA0 ; __unwind {
.text:0000000000009EA0                 lea     r8, src_to_dest_free
.text:0000000000009EA7                 lea     rcx, src_to_dest_compare
.text:0000000000009EAE                 lea     rdx, src_to_dest_hash
.text:0000000000009EB5                 sub     rsp, 8
.text:0000000000009EB9                 xor     esi, esi
.text:0000000000009EBB                 mov     edi, 67h ; 'g'
.text:0000000000009EC0                 call    hash_initialize
.text:0000000000009EC5                 test    rax, rax
.text:0000000000009EC8                 mov     cs:src_to_dest, rax
.text:0000000000009ECF                 jz      short loc_9ED6
.text:0000000000009ED1                 add     rsp, 8
.text:0000000000009ED5                 retn
.text:0000000000009ED6 ; ---------------------------------------------------------------------------
.text:0000000000009ED6
.text:0000000000009ED6 loc_9ED6:                               ; CODE XREF: hash_init+2F↑j
.text:0000000000009ED6                 call    xalloc_die
.text:0000000000009ED6 ; } // starts at 9EA0
.text:0000000000009ED6 hash_init       endp
.text:0000000000009ED6
.text:0000000000009ED6 ; ---------------------------------------------------------------------------
.text:0000000000009EDB                 align 20h
.text:0000000000009EE0
.text:0000000000009EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EE0
.text:0000000000009EE0
.text:0000000000009EE0                 public forget_all
.text:0000000000009EE0 forget_all      proc near
.text:0000000000009EE0 ; __unwind {
.text:0000000000009EE0                 mov     rdi, cs:src_to_dest ; ptr
.text:0000000000009EE7                 jmp     hash_free
.text:0000000000009EE7 ; } // starts at 9EE0
.text:0000000000009EE7 forget_all      endp
.text:0000000000009EE7
.text:0000000000009EE7 ; ---------------------------------------------------------------------------
.text:0000000000009EEC                 align 10h
.text:0000000000009EF0
.text:0000000000009EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EF0
.text:0000000000009EF0
.text:0000000000009EF0                 public extent_scan_init
.text:0000000000009EF0 extent_scan_init proc near              ; CODE XREF: copy_internal+30A4↑p
.text:0000000000009EF0 ; __unwind {
.text:0000000000009EF0                 mov     [rsi], edi
.text:0000000000009EF2                 mov     qword ptr [rsi+18h], 0
.text:0000000000009EFA                 mov     qword ptr [rsi+28h], 0
.text:0000000000009F02                 mov     qword ptr [rsi+8], 0
.text:0000000000009F0A                 mov     byte ptr [rsi+20h], 0
.text:0000000000009F0E                 mov     byte ptr [rsi+21h], 0
.text:0000000000009F12                 mov     dword ptr [rsi+10h], 1
.text:0000000000009F19                 retn
.text:0000000000009F19 ; } // starts at 9EF0
.text:0000000000009F19 extent_scan_init endp
.text:0000000000009F19
.text:0000000000009F19 ; ---------------------------------------------------------------------------
.text:0000000000009F1A                 align 20h
.text:0000000000009F20
.text:0000000000009F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F20
.text:0000000000009F20 ; Attributes: bp-based frame
.text:0000000000009F20
.text:0000000000009F20                 public extent_scan_read
.text:0000000000009F20 extent_scan_read proc near              ; CODE XREF: copy_internal+30EA↑p
.text:0000000000009F20
.text:0000000000009F20 var_s0          = qword ptr  0
.text:0000000000009F20 var_s8          = qword ptr  8
.text:0000000000009F20 var_s10         = dword ptr  10h
.text:0000000000009F20 var_s14         = dword ptr  14h
.text:0000000000009F20 var_s18         = dword ptr  18h
.text:0000000000009F20 var_s20         = qword ptr  20h
.text:0000000000009F20 var_s30         = qword ptr  30h
.text:0000000000009F20 var_s1008       = qword ptr  1008h
.text:0000000000009F20
.text:0000000000009F20 ; __unwind {
.text:0000000000009F20                 push    r15
.text:0000000000009F22                 push    r14
.text:0000000000009F24                 xor     r15d, r15d
.text:0000000000009F27                 push    r13
.text:0000000000009F29                 push    r12
.text:0000000000009F2B                 mov     r14, rdi
.text:0000000000009F2E                 push    rbp
.text:0000000000009F2F                 push    rbx
.text:0000000000009F30                 mov     r13, 7FFFFFFFFFFFFFFFh
.text:0000000000009F3A                 sub     rsp, 1018h
.text:0000000000009F41                 mov     rbx, [rdi+28h]
.text:0000000000009F45                 mov     rdx, [rdi+8]
.text:0000000000009F49                 mov     rbp, rsp
.text:0000000000009F4C                 mov     rax, fs:28h
.text:0000000000009F55                 mov     [rsp+var_s1008], rax
.text:0000000000009F5D                 xor     eax, eax
.text:0000000000009F5F                 lea     r12, [rbp+var_s20]
.text:0000000000009F63
.text:0000000000009F63 loc_9F63:                               ; CODE XREF: extent_scan_read+2BA↓j
.text:0000000000009F63                 xor     eax, eax
.text:0000000000009F65                 mov     ecx, 200h
.text:0000000000009F6A                 mov     rdi, rbp
.text:0000000000009F6D                 rep stosq
.text:0000000000009F70                 mov     eax, [r14+10h]
.text:0000000000009F74                 mov     edi, [r14]      ; fd
.text:0000000000009F77                 mov     esi, 0C020660Bh ; request
.text:0000000000009F7C                 mov     [rsp+var_s0], rdx
.text:0000000000009F80                 not     rdx
.text:0000000000009F83                 mov     [rsp+var_s18], 48h ; 'H'
.text:0000000000009F8B                 mov     [rsp+var_s8], rdx
.text:0000000000009F90                 mov     rdx, rbp
.text:0000000000009F93                 mov     [rsp+var_s10], eax
.text:0000000000009F97                 xor     eax, eax
.text:0000000000009F99                 call    _ioctl
.text:0000000000009F9E                 test    eax, eax
.text:0000000000009FA0                 js      loc_A070
.text:0000000000009FA6                 mov     eax, [rsp+var_s14]
.text:0000000000009FAA                 test    eax, eax
.text:0000000000009FAC                 jz      loc_A1E8
.text:0000000000009FB2                 mov     rcx, [r14+18h]
.text:0000000000009FB6                 mov     rdx, rax
.text:0000000000009FB9                 not     rdx
.text:0000000000009FBC                 cmp     rcx, rdx
.text:0000000000009FBF                 ja      loc_A1FA
.text:0000000000009FC5                 mov     rdi, [r14+28h]
.text:0000000000009FC9                 mov     edx, 18h
.text:0000000000009FCE                 add     rcx, rax
.text:0000000000009FD1                 mov     rax, rdx
.text:0000000000009FD4                 xor     esi, esi
.text:0000000000009FD6                 mov     [r14+18h], rcx
.text:0000000000009FDA                 sub     rbx, rdi
.text:0000000000009FDD                 mul     rcx
.text:0000000000009FE0                 jo      loc_A219
.text:0000000000009FE6
.text:0000000000009FE6 loc_9FE6:                               ; CODE XREF: extent_scan_read+2FE↓j
.text:0000000000009FE6                 test    rax, rax
.text:0000000000009FE9                 js      loc_A223
.text:0000000000009FEF                 test    rsi, rsi
.text:0000000000009FF2                 jnz     loc_A223
.text:0000000000009FF8                 lea     rsi, [rcx+rcx*2]
.text:0000000000009FFC                 shl     rsi, 3
.text:000000000000A000                 call    xrealloc
.text:000000000000A005                 mov     r8d, [rsp+var_s14]
.text:000000000000A00A                 add     rbx, rax
.text:000000000000A00D                 mov     [r14+28h], rax
.text:000000000000A011                 test    r8d, r8d
.text:000000000000A014                 jz      loc_A150
.text:000000000000A01A                 mov     rax, [rsp+var_s30]
.text:000000000000A01F                 mov     rdx, [rsp+var_s20]
.text:000000000000A024                 mov     rcx, r13
.text:000000000000A027                 sub     rcx, rax
.text:000000000000A02A                 cmp     rdx, rcx
.text:000000000000A02D                 ja      loc_A10A
.text:000000000000A033                 xor     ecx, ecx
.text:000000000000A035                 mov     rsi, r12
.text:000000000000A038
.text:000000000000A038 loc_A038:                               ; CODE XREF: extent_scan_read+1E4↓j
.text:000000000000A038                 test    r15d, r15d
.text:000000000000A03B                 jz      short loc_A0B0
.text:000000000000A03D                 mov     r9d, [rsi+28h]
.text:000000000000A041                 mov     r10, [rbx+8]
.text:000000000000A045                 mov     rdi, [rbx]
.text:000000000000A048                 mov     r11d, r9d
.text:000000000000A04B                 add     rdi, r10
.text:000000000000A04E                 and     r11d, 0FFFFFFFEh
.text:000000000000A052                 cmp     [rbx+10h], r11d
.text:000000000000A056                 jz      loc_A130
.text:000000000000A05C
.text:000000000000A05C loc_A05C:                               ; CODE XREF: extent_scan_read+213↓j
.text:000000000000A05C                 cmp     rdi, rdx
.text:000000000000A05F                 jbe     short loc_A0BD
.text:000000000000A061
.text:000000000000A061 loc_A061:                               ; CODE XREF: extent_scan_read+197↓j
.text:000000000000A061                 mov     r10, rdi
.text:000000000000A064                 sub     r10, rdx
.text:000000000000A067                 cmp     r10, rax
.text:000000000000A06A                 jnb     loc_A188
.text:000000000000A070
.text:000000000000A070 loc_A070:                               ; CODE XREF: extent_scan_read+80↑j
.text:000000000000A070                 xor     eax, eax
.text:000000000000A072                 cmp     qword ptr [r14+8], 0
.text:000000000000A077                 jnz     short loc_A080
.text:000000000000A079                 mov     byte ptr [r14+20h], 1
.text:000000000000A07E                 xor     eax, eax
.text:000000000000A080
.text:000000000000A080 loc_A080:                               ; CODE XREF: extent_scan_read+157↑j
.text:000000000000A080                                         ; extent_scan_read+291↓j ...
.text:000000000000A080                 mov     rbx, [rsp+var_s1008]
.text:000000000000A088                 xor     rbx, fs:28h
.text:000000000000A091                 jnz     loc_A228
.text:000000000000A097                 add     rsp, 1018h
.text:000000000000A09E                 pop     rbx
.text:000000000000A09F                 pop     rbp
.text:000000000000A0A0                 pop     r12
.text:000000000000A0A2                 pop     r13
.text:000000000000A0A4                 pop     r14
.text:000000000000A0A6                 pop     r15
.text:000000000000A0A8                 retn
.text:000000000000A0A8 ; ---------------------------------------------------------------------------
.text:000000000000A0A9                 align 10h
.text:000000000000A0B0
.text:000000000000A0B0 loc_A0B0:                               ; CODE XREF: extent_scan_read+11B↑j
.text:000000000000A0B0                 mov     rdi, [r14+8]
.text:000000000000A0B4                 cmp     rdi, rdx
.text:000000000000A0B7                 ja      short loc_A061
.text:000000000000A0B9                 mov     r9d, [rsi+28h]
.text:000000000000A0BD
.text:000000000000A0BD loc_A0BD:                               ; CODE XREF: extent_scan_read+13F↑j
.text:000000000000A0BD                 mov     esi, r15d
.text:000000000000A0C0                 add     r15d, 1
.text:000000000000A0C4                 lea     rdi, [rsi+rsi*2]
.text:000000000000A0C8                 mov     rsi, [r14+28h]
.text:000000000000A0CC                 lea     rbx, [rsi+rdi*8]
.text:000000000000A0D0                 mov     [rbx], rdx
.text:000000000000A0D3                 mov     [rbx+8], rax
.text:000000000000A0D7                 mov     [rbx+10h], r9d
.text:000000000000A0DB
.text:000000000000A0DB loc_A0DB:                               ; CODE XREF: extent_scan_read+275↓j
.text:000000000000A0DB                 add     ecx, 1
.text:000000000000A0DE                 cmp     ecx, r8d
.text:000000000000A0E1                 jnb     short loc_A150
.text:000000000000A0E3
.text:000000000000A0E3 loc_A0E3:                               ; CODE XREF: extent_scan_read+22A↓j
.text:000000000000A0E3                 mov     edx, ecx
.text:000000000000A0E5                 mov     rdi, r13
.text:000000000000A0E8                 lea     rax, ds:0[rdx*8]
.text:000000000000A0F0                 sub     rax, rdx
.text:000000000000A0F3                 lea     rsi, [r12+rax*8]
.text:000000000000A0F7                 mov     rax, [rsi+10h]
.text:000000000000A0FB                 mov     rdx, [rsi]
.text:000000000000A0FE                 sub     rdi, rax
.text:000000000000A101                 cmp     rdx, rdi
.text:000000000000A104                 jbe     loc_A038
.text:000000000000A10A
.text:000000000000A10A loc_A10A:                               ; CODE XREF: extent_scan_read+10D↑j
.text:000000000000A10A                 lea     rcx, __PRETTY_FUNCTION___6956 ; "extent_scan_read"
.text:000000000000A111                 lea     rsi, aCoreutils831Sr_0 ; "../coreutils-8.31/src/extent-scan.c"
.text:000000000000A118                 lea     rdi, aFmExtentsIFeLo ; "fm_extents[i].fe_logical <= OFF_T_MAX -"...
.text:000000000000A11F                 mov     edx, 8Dh        ; line
.text:000000000000A124                 call    ___assert_fail
.text:000000000000A124 ; ---------------------------------------------------------------------------
.text:000000000000A129                 align 10h
.text:000000000000A130
.text:000000000000A130 loc_A130:                               ; CODE XREF: extent_scan_read+136↑j
.text:000000000000A130                 cmp     rdi, rdx
.text:000000000000A133                 jnz     loc_A05C
.text:000000000000A139                 add     ecx, 1
.text:000000000000A13C                 add     rax, r10
.text:000000000000A13F                 mov     [rbx+10h], r9d
.text:000000000000A143                 cmp     ecx, r8d
.text:000000000000A146                 mov     [rbx+8], rax
.text:000000000000A14A                 jb      short loc_A0E3
.text:000000000000A14C                 nop     dword ptr [rax+00h]
.text:000000000000A150
.text:000000000000A150 loc_A150:                               ; CODE XREF: extent_scan_read+F4↑j
.text:000000000000A150                                         ; extent_scan_read+1C1↑j
.text:000000000000A150                 test    byte ptr [rbx+10h], 1
.text:000000000000A154                 jnz     short loc_A1A0
.text:000000000000A156                 cmp     r15d, 48h ; 'H'
.text:000000000000A15A                 movzx   eax, byte ptr [r14+21h]
.text:000000000000A15F                 jbe     short loc_A1C0
.text:000000000000A161                 test    al, al
.text:000000000000A163                 jnz     short loc_A1A5
.text:000000000000A165                 lea     eax, [r15-1]
.text:000000000000A169                 mov     rdx, [r14+28h]
.text:000000000000A16D                 lea     rcx, [rax+rax*2]
.text:000000000000A171                 mov     [r14+18h], rax
.text:000000000000A175                 mov     rax, [rdx+rcx*8-18h]
.text:000000000000A17A                 add     rax, [rdx+rcx*8-10h]
.text:000000000000A17F                 mov     [r14+8], rax
.text:000000000000A183                 jmp     short loc_A1AC
.text:000000000000A183 ; ---------------------------------------------------------------------------
.text:000000000000A185                 align 8
.text:000000000000A188
.text:000000000000A188 loc_A188:                               ; CODE XREF: extent_scan_read+14A↑j
.text:000000000000A188                 sub     rax, r10
.text:000000000000A18B                 mov     [rsi], rdi
.text:000000000000A18E                 sub     ecx, 1
.text:000000000000A191                 mov     [rsi+10h], rax
.text:000000000000A195                 jmp     loc_A0DB
.text:000000000000A195 ; ---------------------------------------------------------------------------
.text:000000000000A19A                 align 20h
.text:000000000000A1A0
.text:000000000000A1A0 loc_A1A0:                               ; CODE XREF: extent_scan_read+234↑j
.text:000000000000A1A0                 mov     byte ptr [r14+21h], 1
.text:000000000000A1A5
.text:000000000000A1A5 loc_A1A5:                               ; CODE XREF: extent_scan_read+243↑j
.text:000000000000A1A5                 mov     eax, r15d
.text:000000000000A1A8                 mov     [r14+18h], rax
.text:000000000000A1AC
.text:000000000000A1AC loc_A1AC:                               ; CODE XREF: extent_scan_read+263↑j
.text:000000000000A1AC                                         ; extent_scan_read+2A9↓j ...
.text:000000000000A1AC                 mov     eax, 1
.text:000000000000A1B1                 jmp     loc_A080
.text:000000000000A1B1 ; ---------------------------------------------------------------------------
.text:000000000000A1B6                 align 20h
.text:000000000000A1C0
.text:000000000000A1C0 loc_A1C0:                               ; CODE XREF: extent_scan_read+23F↑j
.text:000000000000A1C0                 mov     ecx, r15d
.text:000000000000A1C3                 test    al, al
.text:000000000000A1C5                 mov     [r14+18h], rcx
.text:000000000000A1C9                 jnz     short loc_A1AC
.text:000000000000A1CB                 mov     rdx, [rbx+8]
.text:000000000000A1CF                 add     rdx, [rbx]
.text:000000000000A1D2                 cmp     r15d, 47h ; 'G'
.text:000000000000A1D6                 mov     [r14+8], rdx
.text:000000000000A1DA                 jbe     loc_9F63
.text:000000000000A1E0                 jmp     short loc_A1AC
.text:000000000000A1E0 ; ---------------------------------------------------------------------------
.text:000000000000A1E2                 align 8
.text:000000000000A1E8
.text:000000000000A1E8 loc_A1E8:                               ; CODE XREF: extent_scan_read+8C↑j
.text:000000000000A1E8                 cmp     qword ptr [r14+8], 0
.text:000000000000A1ED                 mov     byte ptr [r14+21h], 1
.text:000000000000A1F2                 setnz   al
.text:000000000000A1F5                 jmp     loc_A080
.text:000000000000A1FA ; ---------------------------------------------------------------------------
.text:000000000000A1FA
.text:000000000000A1FA loc_A1FA:                               ; CODE XREF: extent_scan_read+9F↑j
.text:000000000000A1FA                 lea     rcx, __PRETTY_FUNCTION___6956 ; "extent_scan_read"
.text:000000000000A201                 lea     rsi, aCoreutils831Sr_0 ; "../coreutils-8.31/src/extent-scan.c"
.text:000000000000A208                 lea     rdi, aScanEiCountSiz ; "scan->ei_count <= SIZE_MAX - fiemap->fm"...
.text:000000000000A20F                 mov     edx, 7Eh ; '~'  ; line
.text:000000000000A214                 call    ___assert_fail
.text:000000000000A219 ; ---------------------------------------------------------------------------
.text:000000000000A219
.text:000000000000A219 loc_A219:                               ; CODE XREF: extent_scan_read+C0↑j
.text:000000000000A219                 mov     esi, 1
.text:000000000000A21E                 jmp     loc_9FE6
.text:000000000000A223 ; ---------------------------------------------------------------------------
.text:000000000000A223
.text:000000000000A223 loc_A223:                               ; CODE XREF: extent_scan_read+C9↑j
.text:000000000000A223                                         ; extent_scan_read+D2↑j
.text:000000000000A223                 call    xalloc_die
.text:000000000000A228 ; ---------------------------------------------------------------------------
.text:000000000000A228
.text:000000000000A228 loc_A228:                               ; CODE XREF: extent_scan_read+171↑j
.text:000000000000A228                 call    ___stack_chk_fail
.text:000000000000A228 ; } // starts at 9F20
.text:000000000000A228 extent_scan_read endp
.text:000000000000A228
.text:000000000000A228 ; ---------------------------------------------------------------------------
.text:000000000000A22D                 align 10h
.text:000000000000A230
.text:000000000000A230 ; =============== S U B R O U T I N E =======================================
.text:000000000000A230
.text:000000000000A230
.text:000000000000A230 ; __int64 __fastcall try_link(char *to)
.text:000000000000A230 try_link        proc near               ; DATA XREF: force_linkat+71↓o
.text:000000000000A230 ; __unwind {
.text:000000000000A230                 mov     rax, rsi
.text:000000000000A233                 mov     rcx, rdi        ; to
.text:000000000000A236                 mov     edx, [rsi+10h]  ; tofd
.text:000000000000A239                 mov     r8d, [rax+14h]  ; flags
.text:000000000000A23D                 mov     rsi, [rsi+8]    ; from
.text:000000000000A241                 mov     edi, [rax]      ; fromfd
.text:000000000000A243                 jmp     _linkat
.text:000000000000A243 ; } // starts at A230
.text:000000000000A243 try_link        endp
.text:000000000000A243
.text:000000000000A243 ; ---------------------------------------------------------------------------
.text:000000000000A248                 align 10h
.text:000000000000A250
.text:000000000000A250 ; =============== S U B R O U T I N E =======================================
.text:000000000000A250
.text:000000000000A250
.text:000000000000A250 ; __int64 __fastcall samedir_template(void *src, void *dest)
.text:000000000000A250 samedir_template proc near              ; CODE XREF: force_linkat+5B↓p
.text:000000000000A250                                         ; force_symlinkat+49↓p
.text:000000000000A250 ; __unwind {
.text:000000000000A250                 push    r12
.text:000000000000A252                 push    rbp
.text:000000000000A253                 mov     rbp, rdi
.text:000000000000A256                 push    rbx
.text:000000000000A257                 mov     r12, rsi
.text:000000000000A25A                 call    last_component
.text:000000000000A25F                 sub     rax, rbp
.text:000000000000A262                 lea     rdi, [rax+9]    ; size
.text:000000000000A266                 mov     rbx, rax
.text:000000000000A269                 cmp     rdi, 100h
.text:000000000000A270                 jbe     short loc_A281
.text:000000000000A272                 call    _malloc
.text:000000000000A277                 mov     r12, rax
.text:000000000000A27A                 xor     eax, eax
.text:000000000000A27C                 test    r12, r12
.text:000000000000A27F                 jz      short loc_A2A3
.text:000000000000A281
.text:000000000000A281 loc_A281:                               ; CODE XREF: samedir_template+20↑j
.text:000000000000A281                 mov     rdx, rbx        ; n
.text:000000000000A284                 mov     rsi, rbp        ; src
.text:000000000000A287                 mov     rdi, r12        ; dest
.text:000000000000A28A                 call    _mempcpy
.text:000000000000A28F                 mov     rcx, 5858585858587543h
.text:000000000000A299                 mov     byte ptr [rax+8], 0
.text:000000000000A29D                 mov     [rax], rcx
.text:000000000000A2A0                 mov     rax, r12
.text:000000000000A2A3
.text:000000000000A2A3 loc_A2A3:                               ; CODE XREF: samedir_template+2F↑j
.text:000000000000A2A3                 pop     rbx
.text:000000000000A2A4                 pop     rbp
.text:000000000000A2A5                 pop     r12
.text:000000000000A2A7                 retn
.text:000000000000A2A7 ; } // starts at A250
.text:000000000000A2A7 samedir_template endp
.text:000000000000A2A7
.text:000000000000A2A7 ; ---------------------------------------------------------------------------
.text:000000000000A2A8                 align 10h
.text:000000000000A2B0
.text:000000000000A2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A2B0
.text:000000000000A2B0
.text:000000000000A2B0 ; __int64 __fastcall try_symlink(char *to)
.text:000000000000A2B0 try_symlink     proc near               ; DATA XREF: force_symlinkat+5F↓o
.text:000000000000A2B0 ; __unwind {
.text:000000000000A2B0                 mov     rax, rsi
.text:000000000000A2B3                 mov     rdx, rdi        ; to
.text:000000000000A2B6                 mov     esi, [rsi+8]    ; tofd
.text:000000000000A2B9                 mov     rdi, [rax]      ; from
.text:000000000000A2BC                 jmp     _symlinkat
.text:000000000000A2BC ; } // starts at A2B0
.text:000000000000A2BC try_symlink     endp
.text:000000000000A2BC
.text:000000000000A2BC ; ---------------------------------------------------------------------------
.text:000000000000A2C1                 align 10h
.text:000000000000A2D0
.text:000000000000A2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A2D0
.text:000000000000A2D0
.text:000000000000A2D0                 public force_linkat
.text:000000000000A2D0 force_linkat    proc near               ; CODE XREF: create_hard_link+34↑p
.text:000000000000A2D0
.text:000000000000A2D0 var_178         = qword ptr -178h
.text:000000000000A2D0 var_16C         = dword ptr -16Ch
.text:000000000000A2D0 var_168         = dword ptr -168h
.text:000000000000A2D0 var_160         = qword ptr -160h
.text:000000000000A2D0 var_158         = dword ptr -158h
.text:000000000000A2D0 var_154         = dword ptr -154h
.text:000000000000A2D0 dest            = byte ptr -148h
.text:000000000000A2D0 var_40          = qword ptr -40h
.text:000000000000A2D0 arg_0           = dword ptr  8
.text:000000000000A2D0
.text:000000000000A2D0 ; __unwind {
.text:000000000000A2D0                 push    r15
.text:000000000000A2D2                 push    r14
.text:000000000000A2D4                 mov     r14d, edi
.text:000000000000A2D7                 push    r13
.text:000000000000A2D9                 push    r12
.text:000000000000A2DB                 mov     r13, rsi
.text:000000000000A2DE                 push    rbp
.text:000000000000A2DF                 push    rbx
.text:000000000000A2E0                 mov     rbx, rcx
.text:000000000000A2E3                 mov     ebp, edx
.text:000000000000A2E5                 mov     r12d, r8d
.text:000000000000A2E8                 sub     rsp, 148h
.text:000000000000A2EF                 mov     ecx, [rsp+178h+arg_0]
.text:000000000000A2F6                 mov     rax, fs:28h
.text:000000000000A2FF                 mov     [rsp+178h+var_40], rax
.text:000000000000A307                 xor     eax, eax
.text:000000000000A309                 test    ecx, ecx
.text:000000000000A30B                 js      loc_A3C0
.text:000000000000A311
.text:000000000000A311 loc_A311:                               ; CODE XREF: force_linkat+10D↓j
.text:000000000000A311                 cmp     r9b, 1
.text:000000000000A315                 jnz     short loc_A390
.text:000000000000A317                 cmp     ecx, 11h
.text:000000000000A31A                 jnz     short loc_A390
.text:000000000000A31C                 lea     rax, [rsp+178h+dest]
.text:000000000000A321                 mov     rdi, rbx        ; src
.text:000000000000A324                 mov     rsi, rax        ; dest
.text:000000000000A327                 mov     [rsp+178h+var_178], rax
.text:000000000000A32B                 call    samedir_template
.text:000000000000A330                 test    rax, rax
.text:000000000000A333                 mov     r15, rax
.text:000000000000A336                 jz      loc_A420
.text:000000000000A33C                 lea     rdx, [rsp+178h+var_168]
.text:000000000000A341                 lea     rcx, try_link
.text:000000000000A348                 xor     esi, esi
.text:000000000000A34A                 mov     r8d, 6
.text:000000000000A350                 mov     rdi, rax        ; s
.text:000000000000A353                 mov     [rsp+178h+var_168], r14d
.text:000000000000A358                 mov     [rsp+178h+var_160], r13
.text:000000000000A35D                 mov     [rsp+178h+var_158], ebp
.text:000000000000A361                 mov     [rsp+178h+var_154], r12d
.text:000000000000A366                 call    try_tempname_len
.text:000000000000A36B                 test    eax, eax
.text:000000000000A36D                 jz      short loc_A3E8
.text:000000000000A36F                 call    ___errno_location
.text:000000000000A374                 mov     ecx, [rax]
.text:000000000000A376
.text:000000000000A376 loc_A376:                               ; CODE XREF: force_linkat+14B↓j
.text:000000000000A376                 cmp     r15, [rsp+178h+var_178]
.text:000000000000A37A                 jz      short loc_A390
.text:000000000000A37C                 mov     rdi, r15        ; ptr
.text:000000000000A37F                 mov     dword ptr [rsp+178h+var_178], ecx
.text:000000000000A382                 call    free
.text:000000000000A387                 mov     ecx, dword ptr [rsp+178h+var_178]
.text:000000000000A38A                 nop     word ptr [rax+rax+00h]
.text:000000000000A390
.text:000000000000A390 loc_A390:                               ; CODE XREF: force_linkat+45↑j
.text:000000000000A390                                         ; force_linkat+4A↑j ...
.text:000000000000A390                 mov     rbx, [rsp+178h+var_40]
.text:000000000000A398                 xor     rbx, fs:28h
.text:000000000000A3A1                 mov     eax, ecx
.text:000000000000A3A3                 jnz     loc_A42C
.text:000000000000A3A9                 add     rsp, 148h
.text:000000000000A3B0                 pop     rbx
.text:000000000000A3B1                 pop     rbp
.text:000000000000A3B2                 pop     r12
.text:000000000000A3B4                 pop     r13
.text:000000000000A3B6                 pop     r14
.text:000000000000A3B8                 pop     r15
.text:000000000000A3BA                 retn
.text:000000000000A3BA ; ---------------------------------------------------------------------------
.text:000000000000A3BB                 align 20h
.text:000000000000A3C0
.text:000000000000A3C0 loc_A3C0:                               ; CODE XREF: force_linkat+3B↑j
.text:000000000000A3C0                 mov     rcx, rbx        ; to
.text:000000000000A3C3                 mov     dword ptr [rsp+178h+var_178], r9d
.text:000000000000A3C7                 call    _linkat
.text:000000000000A3CC                 test    eax, eax
.text:000000000000A3CE                 mov     ecx, eax
.text:000000000000A3D0                 jz      short loc_A390
.text:000000000000A3D2                 call    ___errno_location
.text:000000000000A3D7                 mov     r9d, dword ptr [rsp+178h+var_178]
.text:000000000000A3DB                 mov     ecx, [rax]
.text:000000000000A3DD                 jmp     loc_A311
.text:000000000000A3DD ; ---------------------------------------------------------------------------
.text:000000000000A3E2                 align 8
.text:000000000000A3E8
.text:000000000000A3E8 loc_A3E8:                               ; CODE XREF: force_linkat+9D↑j
.text:000000000000A3E8                 mov     rcx, rbx        ; new
.text:000000000000A3EB                 mov     edx, ebp        ; newfd
.text:000000000000A3ED                 mov     rsi, r15        ; old
.text:000000000000A3F0                 mov     edi, ebp        ; oldfd
.text:000000000000A3F2                 call    _renameat
.text:000000000000A3F7                 test    eax, eax
.text:000000000000A3F9                 mov     ecx, 0FFFFFFFFh
.text:000000000000A3FE                 jz      short loc_A407
.text:000000000000A400                 call    ___errno_location
.text:000000000000A405                 mov     ecx, [rax]
.text:000000000000A407
.text:000000000000A407 loc_A407:                               ; CODE XREF: force_linkat+12E↑j
.text:000000000000A407                 xor     edx, edx        ; flag
.text:000000000000A409                 mov     rsi, r15        ; name
.text:000000000000A40C                 mov     edi, ebp        ; fd
.text:000000000000A40E                 mov     [rsp+178h+var_16C], ecx
.text:000000000000A412                 call    _unlinkat
.text:000000000000A417                 mov     ecx, [rsp+178h+var_16C]
.text:000000000000A41B                 jmp     loc_A376
.text:000000000000A420 ; ---------------------------------------------------------------------------
.text:000000000000A420
.text:000000000000A420 loc_A420:                               ; CODE XREF: force_linkat+66↑j
.text:000000000000A420                 call    ___errno_location
.text:000000000000A425                 mov     ecx, [rax]
.text:000000000000A427                 jmp     loc_A390
.text:000000000000A42C ; ---------------------------------------------------------------------------
.text:000000000000A42C
.text:000000000000A42C loc_A42C:                               ; CODE XREF: force_linkat+D3↑j
.text:000000000000A42C                 call    ___stack_chk_fail
.text:000000000000A42C ; } // starts at A2D0
.text:000000000000A42C force_linkat    endp
.text:000000000000A42C
.text:000000000000A42C ; ---------------------------------------------------------------------------
.text:000000000000A431                 align 20h
.text:000000000000A440
.text:000000000000A440 ; =============== S U B R O U T I N E =======================================
.text:000000000000A440
.text:000000000000A440
.text:000000000000A440                 public force_symlinkat
.text:000000000000A440 force_symlinkat proc near               ; CODE XREF: copy_internal+F21↑p
.text:000000000000A440                                         ; copy_internal+2C98↑p
.text:000000000000A440
.text:000000000000A440 var_14C         = dword ptr -14Ch
.text:000000000000A440 var_148         = qword ptr -148h
.text:000000000000A440 var_140         = dword ptr -140h
.text:000000000000A440 dest            = byte ptr -138h
.text:000000000000A440 var_30          = qword ptr -30h
.text:000000000000A440
.text:000000000000A440 ; __unwind {
.text:000000000000A440                 push    r14
.text:000000000000A442                 push    r13
.text:000000000000A444                 push    r12
.text:000000000000A446                 push    rbp
.text:000000000000A447                 mov     r12, rdi
.text:000000000000A44A                 push    rbx
.text:000000000000A44B                 mov     ebp, esi
.text:000000000000A44D                 mov     rbx, rdx
.text:000000000000A450                 sub     rsp, 130h
.text:000000000000A457                 mov     rax, fs:28h
.text:000000000000A460                 mov     [rsp+158h+var_30], rax
.text:000000000000A468                 xor     eax, eax
.text:000000000000A46A                 test    r8d, r8d
.text:000000000000A46D                 js      loc_A518
.text:000000000000A473
.text:000000000000A473 loc_A473:                               ; CODE XREF: force_symlinkat+F4↓j
.text:000000000000A473                 cmp     cl, 1
.text:000000000000A476                 jnz     short loc_A4E8
.text:000000000000A478                 cmp     r8d, 11h
.text:000000000000A47C                 jnz     short loc_A4E8
.text:000000000000A47E                 lea     r14, [rsp+158h+dest]
.text:000000000000A483                 mov     rdi, rbx        ; src
.text:000000000000A486                 mov     rsi, r14        ; dest
.text:000000000000A489                 call    samedir_template
.text:000000000000A48E                 test    rax, rax
.text:000000000000A491                 mov     r13, rax
.text:000000000000A494                 jz      loc_A580
.text:000000000000A49A                 lea     rdx, [rsp+158h+var_148]
.text:000000000000A49F                 lea     rcx, try_symlink
.text:000000000000A4A6                 xor     esi, esi
.text:000000000000A4A8                 mov     r8d, 6
.text:000000000000A4AE                 mov     rdi, rax        ; s
.text:000000000000A4B1                 mov     [rsp+158h+var_148], r12
.text:000000000000A4B6                 mov     [rsp+158h+var_140], ebp
.text:000000000000A4BA                 call    try_tempname_len
.text:000000000000A4BF                 test    eax, eax
.text:000000000000A4C1                 jz      short loc_A540
.text:000000000000A4C3                 call    ___errno_location
.text:000000000000A4C8                 mov     r8d, [rax]
.text:000000000000A4CB
.text:000000000000A4CB loc_A4CB:                               ; CODE XREF: force_symlinkat+117↓j
.text:000000000000A4CB                                         ; force_symlinkat+13B↓j
.text:000000000000A4CB                 cmp     r13, r14
.text:000000000000A4CE                 jz      short loc_A4E8
.text:000000000000A4D0                 mov     rdi, r13        ; ptr
.text:000000000000A4D3                 mov     [rsp+158h+var_14C], r8d
.text:000000000000A4D8                 call    free
.text:000000000000A4DD                 mov     r8d, [rsp+158h+var_14C]
.text:000000000000A4E2                 nop     word ptr [rax+rax+00h]
.text:000000000000A4E8
.text:000000000000A4E8 loc_A4E8:                               ; CODE XREF: force_symlinkat+36↑j
.text:000000000000A4E8                                         ; force_symlinkat+3C↑j ...
.text:000000000000A4E8                 mov     rbx, [rsp+158h+var_30]
.text:000000000000A4F0                 xor     rbx, fs:28h
.text:000000000000A4F9                 mov     eax, r8d
.text:000000000000A4FC                 jnz     loc_A58D
.text:000000000000A502                 add     rsp, 130h
.text:000000000000A509                 pop     rbx
.text:000000000000A50A                 pop     rbp
.text:000000000000A50B                 pop     r12
.text:000000000000A50D                 pop     r13
.text:000000000000A50F                 pop     r14
.text:000000000000A511                 retn
.text:000000000000A511 ; ---------------------------------------------------------------------------
.text:000000000000A512                 align 8
.text:000000000000A518
.text:000000000000A518 loc_A518:                               ; CODE XREF: force_symlinkat+2D↑j
.text:000000000000A518                 mov     [rsp+158h+var_14C], ecx
.text:000000000000A51C                 call    _symlinkat
.text:000000000000A521                 test    eax, eax
.text:000000000000A523                 mov     r8d, eax
.text:000000000000A526                 jz      short loc_A4E8
.text:000000000000A528                 call    ___errno_location
.text:000000000000A52D                 mov     ecx, [rsp+158h+var_14C]
.text:000000000000A531                 mov     r8d, [rax]
.text:000000000000A534                 jmp     loc_A473
.text:000000000000A534 ; ---------------------------------------------------------------------------
.text:000000000000A539                 align 20h
.text:000000000000A540
.text:000000000000A540 loc_A540:                               ; CODE XREF: force_symlinkat+81↑j
.text:000000000000A540                 mov     rcx, rbx        ; new
.text:000000000000A543                 mov     edx, ebp        ; newfd
.text:000000000000A545                 mov     rsi, r13        ; old
.text:000000000000A548                 mov     edi, ebp        ; oldfd
.text:000000000000A54A                 call    _renameat
.text:000000000000A54F                 test    eax, eax
.text:000000000000A551                 mov     r8d, 0FFFFFFFFh
.text:000000000000A557                 jz      loc_A4CB
.text:000000000000A55D                 call    ___errno_location
.text:000000000000A562                 mov     r8d, [rax]
.text:000000000000A565                 xor     edx, edx        ; flag
.text:000000000000A567                 mov     rsi, r13        ; name
.text:000000000000A56A                 mov     edi, ebp        ; fd
.text:000000000000A56C                 mov     [rsp+158h+var_14C], r8d
.text:000000000000A571                 call    _unlinkat
.text:000000000000A576                 mov     r8d, [rsp+158h+var_14C]
.text:000000000000A57B                 jmp     loc_A4CB
.text:000000000000A580 ; ---------------------------------------------------------------------------
.text:000000000000A580
.text:000000000000A580 loc_A580:                               ; CODE XREF: force_symlinkat+54↑j
.text:000000000000A580                 call    ___errno_location
.text:000000000000A585                 mov     r8d, [rax]
.text:000000000000A588                 jmp     loc_A4E8
.text:000000000000A58D ; ---------------------------------------------------------------------------
.text:000000000000A58D
.text:000000000000A58D loc_A58D:                               ; CODE XREF: force_symlinkat+BC↑j
.text:000000000000A58D                 call    ___stack_chk_fail
.text:000000000000A58D ; } // starts at A440
.text:000000000000A58D force_symlinkat endp
.text:000000000000A58D
.text:000000000000A58D ; ---------------------------------------------------------------------------
.text:000000000000A592                 align 20h
.text:000000000000A5A0
.text:000000000000A5A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5A0
.text:000000000000A5A0
.text:000000000000A5A0                 public copy_acl
.text:000000000000A5A0 copy_acl        proc near               ; CODE XREF: re_protect+1A2↑p
.text:000000000000A5A0                                         ; copy_internal+280C↑p ...
.text:000000000000A5A0 ; __unwind {
.text:000000000000A5A0                 push    r12
.text:000000000000A5A2                 push    rbp
.text:000000000000A5A3                 mov     r12, rdi
.text:000000000000A5A6                 push    rbx
.text:000000000000A5A7                 mov     rbp, rdx
.text:000000000000A5AA                 call    qcopy_acl
.text:000000000000A5AF                 cmp     eax, 0FFFFFFFEh
.text:000000000000A5B2                 mov     ebx, eax
.text:000000000000A5B4                 jz      short loc_A600
.text:000000000000A5B6                 cmp     eax, 0FFFFFFFFh
.text:000000000000A5B9                 jnz     short loc_A5F2
.text:000000000000A5BB                 mov     rdi, rbp
.text:000000000000A5BE                 call    quote
.text:000000000000A5C3                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:000000000000A5CA                 mov     edx, 5          ; category
.text:000000000000A5CF                 xor     edi, edi        ; domainname
.text:000000000000A5D1                 mov     r12, rax
.text:000000000000A5D4                 call    _dcgettext
.text:000000000000A5D9                 mov     rbp, rax
.text:000000000000A5DC                 call    ___errno_location
.text:000000000000A5E1                 mov     esi, [rax]      ; errnum
.text:000000000000A5E3                 mov     rcx, r12
.text:000000000000A5E6                 mov     rdx, rbp        ; format
.text:000000000000A5E9                 xor     edi, edi        ; status
.text:000000000000A5EB                 xor     eax, eax
.text:000000000000A5ED                 call    _error
.text:000000000000A5F2
.text:000000000000A5F2 loc_A5F2:                               ; CODE XREF: copy_acl+19↑j
.text:000000000000A5F2                 mov     eax, ebx
.text:000000000000A5F4                 pop     rbx
.text:000000000000A5F5                 pop     rbp
.text:000000000000A5F6                 pop     r12
.text:000000000000A5F8                 retn
.text:000000000000A5F8 ; ---------------------------------------------------------------------------
.text:000000000000A5F9                 align 20h
.text:000000000000A600
.text:000000000000A600 loc_A600:                               ; CODE XREF: copy_acl+14↑j
.text:000000000000A600                 mov     rdi, r12
.text:000000000000A603                 call    quote
.text:000000000000A608                 mov     rbp, rax
.text:000000000000A60B                 call    ___errno_location
.text:000000000000A610                 mov     esi, [rax]      ; errnum
.text:000000000000A612                 lea     rdx, aS_0+2     ; format
.text:000000000000A619                 mov     rcx, rbp
.text:000000000000A61C                 xor     eax, eax
.text:000000000000A61E                 xor     edi, edi        ; status
.text:000000000000A620                 call    _error
.text:000000000000A625                 mov     eax, ebx
.text:000000000000A627                 pop     rbx
.text:000000000000A628                 pop     rbp
.text:000000000000A629                 pop     r12
.text:000000000000A62B                 retn
.text:000000000000A62B ; } // starts at A5A0
.text:000000000000A62B copy_acl        endp
.text:000000000000A62B
.text:000000000000A62B ; ---------------------------------------------------------------------------
.text:000000000000A62C                 align 10h
.text:000000000000A630
.text:000000000000A630 ; =============== S U B R O U T I N E =======================================
.text:000000000000A630
.text:000000000000A630 ; Attributes: info_from_lumina
.text:000000000000A630
.text:000000000000A630                 public set_acl
.text:000000000000A630 set_acl         proc near               ; CODE XREF: copy_internal+2B64↑p
.text:000000000000A630                                         ; copy_internal+3F76↑p ...
.text:000000000000A630 ; __unwind {
.text:000000000000A630                 push    r12
.text:000000000000A632                 push    rbp
.text:000000000000A633                 mov     rbp, rdi
.text:000000000000A636                 push    rbx
.text:000000000000A637                 call    qset_acl
.text:000000000000A63C                 test    eax, eax
.text:000000000000A63E                 mov     ebx, eax
.text:000000000000A640                 jz      short loc_A679
.text:000000000000A642                 mov     rdi, rbp
.text:000000000000A645                 call    quote
.text:000000000000A64A                 lea     rsi, aSettingPermiss ; "setting permissions for %s"
.text:000000000000A651                 mov     edx, 5          ; category
.text:000000000000A656                 xor     edi, edi        ; domainname
.text:000000000000A658                 mov     r12, rax
.text:000000000000A65B                 call    _dcgettext
.text:000000000000A660                 mov     rbp, rax
.text:000000000000A663                 call    ___errno_location
.text:000000000000A668                 mov     esi, [rax]      ; errnum
.text:000000000000A66A                 mov     rcx, r12
.text:000000000000A66D                 mov     rdx, rbp        ; format
.text:000000000000A670                 xor     edi, edi        ; status
.text:000000000000A672                 xor     eax, eax
.text:000000000000A674                 call    _error
.text:000000000000A679
.text:000000000000A679 loc_A679:                               ; CODE XREF: set_acl+10↑j
.text:000000000000A679                 mov     eax, ebx
.text:000000000000A67B                 pop     rbx
.text:000000000000A67C                 pop     rbp
.text:000000000000A67D                 pop     r12
.text:000000000000A67F                 retn
.text:000000000000A67F ; } // starts at A630
.text:000000000000A67F set_acl         endp
.text:000000000000A67F
.text:000000000000A680
.text:000000000000A680 ; =============== S U B R O U T I N E =======================================
.text:000000000000A680
.text:000000000000A680 ; Attributes: info_from_lumina
.text:000000000000A680
.text:000000000000A680 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:000000000000A680                 public areadlink_with_size
.text:000000000000A680 areadlink_with_size proc near           ; CODE XREF: copy_internal+2C6E↑p
.text:000000000000A680                                         ; copy_internal+38D9↑p
.text:000000000000A680 ; __unwind {
.text:000000000000A680                 push    r15
.text:000000000000A682                 push    r14
.text:000000000000A684                 mov     eax, 401h
.text:000000000000A689                 push    r13
.text:000000000000A68B                 push    r12
.text:000000000000A68D                 mov     r13, rdi
.text:000000000000A690                 push    rbp
.text:000000000000A691                 push    rbx
.text:000000000000A692                 lea     rbx, [rsi+1]
.text:000000000000A696                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:000000000000A6A0                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:000000000000A6AA                 sub     rsp, 8
.text:000000000000A6AE                 cmp     rsi, 401h
.text:000000000000A6B5                 cmovnb  rbx, rax
.text:000000000000A6B9                 nop     dword ptr [rax+00000000h]
.text:000000000000A6C0
.text:000000000000A6C0 loc_A6C0:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:000000000000A6C0                 mov     rdi, rbx        ; size
.text:000000000000A6C3                 call    _malloc
.text:000000000000A6C8                 test    rax, rax
.text:000000000000A6CB                 mov     rbp, rax
.text:000000000000A6CE                 jz      short loc_A70B
.text:000000000000A6D0
.text:000000000000A6D0 loc_A6D0:                               ; CODE XREF: areadlink_with_size+89↓j
.text:000000000000A6D0                 mov     rdx, rbx        ; len
.text:000000000000A6D3                 mov     rsi, rax        ; buf
.text:000000000000A6D6                 mov     rdi, r13        ; path
.text:000000000000A6D9                 call    _readlink
.text:000000000000A6DE                 test    rax, rax
.text:000000000000A6E1                 mov     r12, rax
.text:000000000000A6E4                 js      short loc_A738
.text:000000000000A6E6
.text:000000000000A6E6 loc_A6E6:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:000000000000A6E6                 cmp     rbx, r12
.text:000000000000A6E9                 ja      short loc_A750
.text:000000000000A6EB                 mov     rdi, rbp        ; ptr
.text:000000000000A6EE                 call    free
.text:000000000000A6F3                 cmp     rbx, r14
.text:000000000000A6F6                 ja      short loc_A720
.text:000000000000A6F8                 add     rbx, rbx
.text:000000000000A6FB                 mov     rdi, rbx        ; size
.text:000000000000A6FE                 call    _malloc
.text:000000000000A703                 test    rax, rax
.text:000000000000A706                 mov     rbp, rax
.text:000000000000A709                 jnz     short loc_A6D0
.text:000000000000A70B
.text:000000000000A70B loc_A70B:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:000000000000A70B                                         ; areadlink_with_size+CC↓j ...
.text:000000000000A70B                 add     rsp, 8
.text:000000000000A70F                 mov     rax, rbp
.text:000000000000A712                 pop     rbx
.text:000000000000A713                 pop     rbp
.text:000000000000A714                 pop     r12
.text:000000000000A716                 pop     r13
.text:000000000000A718                 pop     r14
.text:000000000000A71A                 pop     r15
.text:000000000000A71C                 retn
.text:000000000000A71C ; ---------------------------------------------------------------------------
.text:000000000000A71D                 align 20h
.text:000000000000A720
.text:000000000000A720 loc_A720:                               ; CODE XREF: areadlink_with_size+76↑j
.text:000000000000A720                 cmp     rbx, r15
.text:000000000000A723                 ja      short loc_A760
.text:000000000000A725                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:000000000000A72F                 jmp     short loc_A6C0
.text:000000000000A72F ; ---------------------------------------------------------------------------
.text:000000000000A731                 align 8
.text:000000000000A738
.text:000000000000A738 loc_A738:                               ; CODE XREF: areadlink_with_size+64↑j
.text:000000000000A738                 call    ___errno_location
.text:000000000000A73D                 cmp     dword ptr [rax], 22h ; '"'
.text:000000000000A740                 jz      short loc_A6E6
.text:000000000000A742                 mov     rdi, rbp        ; ptr
.text:000000000000A745                 xor     ebp, ebp
.text:000000000000A747                 call    free
.text:000000000000A74C                 jmp     short loc_A70B
.text:000000000000A74C ; ---------------------------------------------------------------------------
.text:000000000000A74E                 align 10h
.text:000000000000A750
.text:000000000000A750 loc_A750:                               ; CODE XREF: areadlink_with_size+69↑j
.text:000000000000A750                 mov     byte ptr [rbp+r12+0], 0
.text:000000000000A756                 jmp     short loc_A70B
.text:000000000000A756 ; ---------------------------------------------------------------------------
.text:000000000000A758                 align 20h
.text:000000000000A760
.text:000000000000A760 loc_A760:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:000000000000A760                 call    ___errno_location
.text:000000000000A765                 xor     ebp, ebp
.text:000000000000A767                 mov     dword ptr [rax], 0Ch
.text:000000000000A76D                 jmp     short loc_A70B
.text:000000000000A76D ; } // starts at A680
.text:000000000000A76D areadlink_with_size endp
.text:000000000000A76D
.text:000000000000A76D ; ---------------------------------------------------------------------------
.text:000000000000A76F                 align 10h
.text:000000000000A770
.text:000000000000A770 ; =============== S U B R O U T I N E =======================================
.text:000000000000A770
.text:000000000000A770 ; Attributes: noreturn
.text:000000000000A770
.text:000000000000A770 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:000000000000A770 ; __unwind {
.text:000000000000A770                 mov     edi, 1          ; status
.text:000000000000A775                 jmp     usage
.text:000000000000A775 ; } // starts at A770
.text:000000000000A775 __argmatch_die  endp
.text:000000000000A775
.text:000000000000A775 ; ---------------------------------------------------------------------------
.text:000000000000A77A                 align 20h
.text:000000000000A780
.text:000000000000A780 ; =============== S U B R O U T I N E =======================================
.text:000000000000A780
.text:000000000000A780 ; Attributes: info_from_lumina
.text:000000000000A780
.text:000000000000A780 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000A780                 public argmatch
.text:000000000000A780 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:000000000000A780
.text:000000000000A780 var_58          = qword ptr -58h
.text:000000000000A780 s2              = qword ptr -50h
.text:000000000000A780 var_41          = byte ptr -41h
.text:000000000000A780 var_40          = qword ptr -40h
.text:000000000000A780
.text:000000000000A780 ; __unwind {
.text:000000000000A780                 push    r15
.text:000000000000A782                 push    r14
.text:000000000000A784                 mov     r15, rsi
.text:000000000000A787                 push    r13
.text:000000000000A789                 push    r12
.text:000000000000A78B                 mov     r13, rcx
.text:000000000000A78E                 push    rbp
.text:000000000000A78F                 push    rbx
.text:000000000000A790                 mov     rbp, rdx
.text:000000000000A793                 sub     rsp, 28h
.text:000000000000A797                 mov     [rsp+58h+s2], rdi
.text:000000000000A79C                 mov     [rsp+58h+var_40], rdx
.text:000000000000A7A1                 call    _strlen
.text:000000000000A7A6                 mov     r14, [r15]
.text:000000000000A7A9                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000A7B1                 test    r14, r14
.text:000000000000A7B4                 jz      loc_A86D
.text:000000000000A7BA                 mov     r12, rax
.text:000000000000A7BD                 mov     [rsp+58h+var_41], 0
.text:000000000000A7C2                 xor     ebx, ebx
.text:000000000000A7C4                 jmp     short loc_A817
.text:000000000000A7C4 ; ---------------------------------------------------------------------------
.text:000000000000A7C6                 align 10h
.text:000000000000A7D0
.text:000000000000A7D0 loc_A7D0:                               ; CODE XREF: argmatch+BD↓j
.text:000000000000A7D0                 mov     rax, [rsp+58h+var_40]
.text:000000000000A7D5                 test    rax, rax
.text:000000000000A7D8                 jz      loc_A880
.text:000000000000A7DE                 mov     rdi, [rsp+58h+var_58]
.text:000000000000A7E2                 mov     rdx, r13        ; n
.text:000000000000A7E5                 mov     rsi, rbp        ; s2
.text:000000000000A7E8                 imul    rdi, r13
.text:000000000000A7EC                 add     rdi, rax        ; s1
.text:000000000000A7EF                 call    _memcmp
.text:000000000000A7F4                 test    eax, eax
.text:000000000000A7F6                 movzx   eax, [rsp+58h+var_41]
.text:000000000000A7FB                 mov     ecx, 1
.text:000000000000A800                 cmovnz  eax, ecx
.text:000000000000A803                 mov     [rsp+58h+var_41], al
.text:000000000000A807
.text:000000000000A807 loc_A807:                               ; CODE XREF: argmatch+A9↓j
.text:000000000000A807                                         ; argmatch+105↓j
.text:000000000000A807                 add     rbx, 1
.text:000000000000A80B                 add     rbp, r13
.text:000000000000A80E                 mov     r14, [r15+rbx*8]
.text:000000000000A812                 test    r14, r14
.text:000000000000A815                 jz      short loc_A858
.text:000000000000A817
.text:000000000000A817 loc_A817:                               ; CODE XREF: argmatch+44↑j
.text:000000000000A817                                         ; argmatch+D1↓j
.text:000000000000A817                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000A81C                 mov     rdx, r12        ; n
.text:000000000000A81F                 mov     rdi, r14        ; s1
.text:000000000000A822                 call    _strncmp
.text:000000000000A827                 test    eax, eax
.text:000000000000A829                 jnz     short loc_A807
.text:000000000000A82B                 mov     rdi, r14        ; s
.text:000000000000A82E                 call    _strlen
.text:000000000000A833                 cmp     rax, r12
.text:000000000000A836                 jz      short loc_A890
.text:000000000000A838                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000A83D                 jnz     short loc_A7D0
.text:000000000000A83F                 mov     [rsp+58h+var_58], rbx
.text:000000000000A843                 add     rbx, 1
.text:000000000000A847                 add     rbp, r13
.text:000000000000A84A                 mov     r14, [r15+rbx*8]
.text:000000000000A84E                 test    r14, r14
.text:000000000000A851                 jnz     short loc_A817
.text:000000000000A853                 nop     dword ptr [rax+rax+00h]
.text:000000000000A858
.text:000000000000A858 loc_A858:                               ; CODE XREF: argmatch+95↑j
.text:000000000000A858                 cmp     [rsp+58h+var_41], 0
.text:000000000000A85D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000A864                 cmovz   rax, [rsp+58h+var_58]
.text:000000000000A869                 mov     [rsp+58h+var_58], rax
.text:000000000000A86D
.text:000000000000A86D loc_A86D:                               ; CODE XREF: argmatch+34↑j
.text:000000000000A86D                                         ; argmatch+114↓j
.text:000000000000A86D                 mov     rax, [rsp+58h+var_58]
.text:000000000000A871                 add     rsp, 28h
.text:000000000000A875                 pop     rbx
.text:000000000000A876                 pop     rbp
.text:000000000000A877                 pop     r12
.text:000000000000A879                 pop     r13
.text:000000000000A87B                 pop     r14
.text:000000000000A87D                 pop     r15
.text:000000000000A87F                 retn
.text:000000000000A880 ; ---------------------------------------------------------------------------
.text:000000000000A880
.text:000000000000A880 loc_A880:                               ; CODE XREF: argmatch+58↑j
.text:000000000000A880                 mov     [rsp+58h+var_41], 1
.text:000000000000A885                 jmp     short loc_A807
.text:000000000000A885 ; ---------------------------------------------------------------------------
.text:000000000000A887                 align 10h
.text:000000000000A890
.text:000000000000A890 loc_A890:                               ; CODE XREF: argmatch+B6↑j
.text:000000000000A890                 mov     [rsp+58h+var_58], rbx
.text:000000000000A894                 jmp     short loc_A86D
.text:000000000000A894 ; } // starts at A780
.text:000000000000A894 argmatch        endp
.text:000000000000A894
.text:000000000000A894 ; ---------------------------------------------------------------------------
.text:000000000000A896                 align 20h
.text:000000000000A8A0
.text:000000000000A8A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A8A0
.text:000000000000A8A0 ; Attributes: info_from_lumina
.text:000000000000A8A0
.text:000000000000A8A0 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:000000000000A8A0                 public argmatch_invalid
.text:000000000000A8A0 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:000000000000A8A0 ; __unwind {
.text:000000000000A8A0                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A8A4                 push    r12
.text:000000000000A8A6                 mov     edx, 5          ; category
.text:000000000000A8AB                 push    rbp
.text:000000000000A8AC                 mov     r12, rsi
.text:000000000000A8AF                 push    rbx
.text:000000000000A8B0                 mov     rbp, rdi
.text:000000000000A8B3                 jz      short loc_A900
.text:000000000000A8B5                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000A8BC                 xor     edi, edi        ; domainname
.text:000000000000A8BE                 call    _dcgettext
.text:000000000000A8C3                 mov     rbx, rax
.text:000000000000A8C6
.text:000000000000A8C6 loc_A8C6:                               ; CODE XREF: argmatch_invalid+71↓j
.text:000000000000A8C6                 mov     rsi, rbp
.text:000000000000A8C9                 mov     edi, 1
.text:000000000000A8CE                 call    quote_n
.text:000000000000A8D3                 mov     rdx, r12
.text:000000000000A8D6                 mov     rbp, rax
.text:000000000000A8D9                 mov     esi, 8
.text:000000000000A8DE                 xor     edi, edi
.text:000000000000A8E0                 call    quotearg_n_style
.text:000000000000A8E5                 mov     r8, rbp
.text:000000000000A8E8                 mov     rdx, rbx        ; format
.text:000000000000A8EB                 mov     rcx, rax
.text:000000000000A8EE                 pop     rbx
.text:000000000000A8EF                 pop     rbp
.text:000000000000A8F0                 pop     r12
.text:000000000000A8F2                 xor     esi, esi        ; errnum
.text:000000000000A8F4                 xor     edi, edi        ; status
.text:000000000000A8F6                 xor     eax, eax
.text:000000000000A8F8                 jmp     _error
.text:000000000000A8F8 ; ---------------------------------------------------------------------------
.text:000000000000A8FD                 align 20h
.text:000000000000A900
.text:000000000000A900 loc_A900:                               ; CODE XREF: argmatch_invalid+13↑j
.text:000000000000A900                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:000000000000A907                 xor     edi, edi        ; domainname
.text:000000000000A909                 call    _dcgettext
.text:000000000000A90E                 mov     rbx, rax
.text:000000000000A911                 jmp     short loc_A8C6
.text:000000000000A911 ; } // starts at A8A0
.text:000000000000A911 argmatch_invalid endp
.text:000000000000A911
.text:000000000000A911 ; ---------------------------------------------------------------------------
.text:000000000000A913                 align 20h
.text:000000000000A920
.text:000000000000A920 ; =============== S U B R O U T I N E =======================================
.text:000000000000A920
.text:000000000000A920 ; Attributes: info_from_lumina
.text:000000000000A920
.text:000000000000A920 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000A920                 public argmatch_valid
.text:000000000000A920 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:000000000000A920 ; __unwind {
.text:000000000000A920                 push    r15
.text:000000000000A922                 push    r14
.text:000000000000A924                 mov     r14, rdi
.text:000000000000A927                 push    r13
.text:000000000000A929                 push    r12
.text:000000000000A92B                 xor     edi, edi        ; domainname
.text:000000000000A92D                 push    rbp
.text:000000000000A92E                 push    rbx
.text:000000000000A92F                 mov     rbp, rsi
.text:000000000000A932                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:000000000000A939                 mov     r12, rdx
.text:000000000000A93C                 mov     edx, 5          ; category
.text:000000000000A941                 sub     rsp, 8
.text:000000000000A945                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000A94C                 call    _dcgettext
.text:000000000000A951                 mov     rdi, rax        ; s
.text:000000000000A954                 mov     rsi, rbx        ; stream
.text:000000000000A957                 call    _fputs_unlocked
.text:000000000000A95C                 mov     r15, [r14]
.text:000000000000A95F                 test    r15, r15
.text:000000000000A962                 jz      loc_A9F8
.text:000000000000A968                 xor     r13d, r13d
.text:000000000000A96B                 xor     ebx, ebx
.text:000000000000A96D                 jmp     short loc_A9A8
.text:000000000000A96D ; ---------------------------------------------------------------------------
.text:000000000000A96F                 align 10h
.text:000000000000A970
.text:000000000000A970 loc_A970:                               ; CODE XREF: argmatch_valid+8B↓j
.text:000000000000A970                                         ; argmatch_valid+9D↓j
.text:000000000000A970                 mov     rdi, r15
.text:000000000000A973                 add     rbx, 1
.text:000000000000A977                 mov     r13, rbp
.text:000000000000A97A                 call    quote
.text:000000000000A97F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000A986                 lea     rdx, aS         ; "\n  - %s"
.text:000000000000A98D                 mov     rcx, rax
.text:000000000000A990                 mov     esi, 1
.text:000000000000A995                 xor     eax, eax
.text:000000000000A997                 add     rbp, r12
.text:000000000000A99A                 call    ___fprintf_chk
.text:000000000000A99F                 mov     r15, [r14+rbx*8]
.text:000000000000A9A3                 test    r15, r15
.text:000000000000A9A6                 jz      short loc_A9F8
.text:000000000000A9A8
.text:000000000000A9A8 loc_A9A8:                               ; CODE XREF: argmatch_valid+4D↑j
.text:000000000000A9A8                                         ; argmatch_valid+D2↓j
.text:000000000000A9A8                 test    rbx, rbx
.text:000000000000A9AB                 jz      short loc_A970
.text:000000000000A9AD                 mov     rdx, r12        ; n
.text:000000000000A9B0                 mov     rsi, rbp        ; s2
.text:000000000000A9B3                 mov     rdi, r13        ; s1
.text:000000000000A9B6                 call    _memcmp
.text:000000000000A9BB                 test    eax, eax
.text:000000000000A9BD                 jnz     short loc_A970
.text:000000000000A9BF                 mov     rdi, r15
.text:000000000000A9C2                 add     rbx, 1
.text:000000000000A9C6                 add     rbp, r12
.text:000000000000A9C9                 call    quote
.text:000000000000A9CE                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000A9D5                 lea     rdx, aS_0       ; ", %s"
.text:000000000000A9DC                 mov     rcx, rax
.text:000000000000A9DF                 mov     esi, 1
.text:000000000000A9E4                 xor     eax, eax
.text:000000000000A9E6                 call    ___fprintf_chk
.text:000000000000A9EB                 mov     r15, [r14+rbx*8]
.text:000000000000A9EF                 test    r15, r15
.text:000000000000A9F2                 jnz     short loc_A9A8
.text:000000000000A9F4                 nop     dword ptr [rax+00h]
.text:000000000000A9F8
.text:000000000000A9F8 loc_A9F8:                               ; CODE XREF: argmatch_valid+42↑j
.text:000000000000A9F8                                         ; argmatch_valid+86↑j
.text:000000000000A9F8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000A9FF                 mov     rax, [rdi+28h]
.text:000000000000AA03                 cmp     rax, [rdi+30h]
.text:000000000000AA07                 jnb     short loc_AA28
.text:000000000000AA09                 lea     rdx, [rax+1]
.text:000000000000AA0D                 mov     [rdi+28h], rdx
.text:000000000000AA11                 mov     byte ptr [rax], 0Ah
.text:000000000000AA14                 add     rsp, 8
.text:000000000000AA18                 pop     rbx
.text:000000000000AA19                 pop     rbp
.text:000000000000AA1A                 pop     r12
.text:000000000000AA1C                 pop     r13
.text:000000000000AA1E                 pop     r14
.text:000000000000AA20                 pop     r15
.text:000000000000AA22                 retn
.text:000000000000AA22 ; ---------------------------------------------------------------------------
.text:000000000000AA23                 align 8
.text:000000000000AA28
.text:000000000000AA28 loc_AA28:                               ; CODE XREF: argmatch_valid+E7↑j
.text:000000000000AA28                 add     rsp, 8
.text:000000000000AA2C                 mov     esi, 0Ah        ; int
.text:000000000000AA31                 pop     rbx
.text:000000000000AA32                 pop     rbp
.text:000000000000AA33                 pop     r12
.text:000000000000AA35                 pop     r13
.text:000000000000AA37                 pop     r14
.text:000000000000AA39                 pop     r15
.text:000000000000AA3B                 jmp     ___overflow
.text:000000000000AA3B ; } // starts at A920
.text:000000000000AA3B argmatch_valid  endp
.text:000000000000AA3B
.text:000000000000AA40
.text:000000000000AA40 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA40
.text:000000000000AA40 ; Attributes: info_from_lumina
.text:000000000000AA40
.text:000000000000AA40 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:000000000000AA40                 public __xargmatch_internal
.text:000000000000AA40 __xargmatch_internal proc near          ; CODE XREF: main+39A↑p
.text:000000000000AA40                                         ; main+3E4↑p ...
.text:000000000000AA40 ; __unwind {
.text:000000000000AA40                 push    r15
.text:000000000000AA42                 push    r14
.text:000000000000AA44                 mov     r14, rdi
.text:000000000000AA47                 push    r13
.text:000000000000AA49                 push    r12
.text:000000000000AA4B                 mov     r12, rsi
.text:000000000000AA4E                 push    rbp
.text:000000000000AA4F                 push    rbx
.text:000000000000AA50                 mov     rbp, rcx
.text:000000000000AA53                 mov     rbx, rdx
.text:000000000000AA56                 mov     rcx, r8
.text:000000000000AA59                 mov     rdx, rbp
.text:000000000000AA5C                 sub     rsp, 8
.text:000000000000AA60                 mov     rsi, rbx
.text:000000000000AA63                 mov     rdi, r12
.text:000000000000AA66                 mov     r15, r8
.text:000000000000AA69                 mov     r13, r9
.text:000000000000AA6C                 call    argmatch
.text:000000000000AA71                 test    rax, rax
.text:000000000000AA74                 js      short loc_AA85
.text:000000000000AA76
.text:000000000000AA76 loc_AA76:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:000000000000AA76                 add     rsp, 8
.text:000000000000AA7A                 pop     rbx
.text:000000000000AA7B                 pop     rbp
.text:000000000000AA7C                 pop     r12
.text:000000000000AA7E                 pop     r13
.text:000000000000AA80                 pop     r14
.text:000000000000AA82                 pop     r15
.text:000000000000AA84                 retn
.text:000000000000AA85 ; ---------------------------------------------------------------------------
.text:000000000000AA85
.text:000000000000AA85 loc_AA85:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:000000000000AA85                 mov     rdx, rax
.text:000000000000AA88                 mov     rsi, r12
.text:000000000000AA8B                 mov     rdi, r14
.text:000000000000AA8E                 call    argmatch_invalid
.text:000000000000AA93                 mov     rdx, r15
.text:000000000000AA96                 mov     rsi, rbp
.text:000000000000AA99                 mov     rdi, rbx
.text:000000000000AA9C                 call    argmatch_valid
.text:000000000000AAA1                 call    r13
.text:000000000000AAA4                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000AAAB                 jmp     short loc_AA76
.text:000000000000AAAB ; } // starts at AA40
.text:000000000000AAAB __xargmatch_internal endp
.text:000000000000AAAB
.text:000000000000AAAB ; ---------------------------------------------------------------------------
.text:000000000000AAAD                 align 10h
.text:000000000000AAB0
.text:000000000000AAB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AAB0
.text:000000000000AAB0 ; Attributes: info_from_lumina
.text:000000000000AAB0
.text:000000000000AAB0 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000AAB0                 public argmatch_to_argument
.text:000000000000AAB0 argmatch_to_argument proc near
.text:000000000000AAB0 ; __unwind {
.text:000000000000AAB0                 push    r14
.text:000000000000AAB2                 push    r13
.text:000000000000AAB4                 push    r12
.text:000000000000AAB6                 push    rbp
.text:000000000000AAB7                 push    rbx
.text:000000000000AAB8                 mov     r14, [rsi]
.text:000000000000AABB                 test    r14, r14
.text:000000000000AABE                 jz      short loc_AAF1
.text:000000000000AAC0                 mov     r12, rcx
.text:000000000000AAC3                 mov     r13, rdi
.text:000000000000AAC6                 mov     rbp, rdx
.text:000000000000AAC9                 lea     rbx, [rsi+8]
.text:000000000000AACD                 jmp     short loc_AADF
.text:000000000000AACD ; ---------------------------------------------------------------------------
.text:000000000000AACF                 align 10h
.text:000000000000AAD0
.text:000000000000AAD0 loc_AAD0:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:000000000000AAD0                 mov     r14, [rbx]
.text:000000000000AAD3                 add     rbp, r12
.text:000000000000AAD6                 add     rbx, 8
.text:000000000000AADA                 test    r14, r14
.text:000000000000AADD                 jz      short loc_AAF1
.text:000000000000AADF
.text:000000000000AADF loc_AADF:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000AADF                 mov     rdx, r12        ; n
.text:000000000000AAE2                 mov     rsi, rbp        ; s2
.text:000000000000AAE5                 mov     rdi, r13        ; s1
.text:000000000000AAE8                 call    _memcmp
.text:000000000000AAED                 test    eax, eax
.text:000000000000AAEF                 jnz     short loc_AAD0
.text:000000000000AAF1
.text:000000000000AAF1 loc_AAF1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:000000000000AAF1                                         ; argmatch_to_argument+2D↑j
.text:000000000000AAF1                 pop     rbx
.text:000000000000AAF2                 mov     rax, r14
.text:000000000000AAF5                 pop     rbp
.text:000000000000AAF6                 pop     r12
.text:000000000000AAF8                 pop     r13
.text:000000000000AAFA                 pop     r14
.text:000000000000AAFC                 retn
.text:000000000000AAFC ; } // starts at AAB0
.text:000000000000AAFC argmatch_to_argument endp
.text:000000000000AAFC
.text:000000000000AAFC ; ---------------------------------------------------------------------------
.text:000000000000AAFD                 align 20h
.text:000000000000AB00
.text:000000000000AB00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB00
.text:000000000000AB00
.text:000000000000AB00                 public set_simple_backup_suffix
.text:000000000000AB00 set_simple_backup_suffix proc near      ; CODE XREF: main+585↑p
.text:000000000000AB00                                         ; backupfile_internal:loc_B134↓p
.text:000000000000AB00 ; __unwind {
.text:000000000000AB00                 test    rdi, rdi
.text:000000000000AB03                 push    rbx
.text:000000000000AB04                 mov     rbx, rdi
.text:000000000000AB07                 jz      short loc_AB30
.text:000000000000AB09
.text:000000000000AB09 loc_AB09:                               ; CODE XREF: set_simple_backup_suffix+44↓j
.text:000000000000AB09                 cmp     byte ptr [rbx], 0
.text:000000000000AB0C                 jnz     short loc_AB20
.text:000000000000AB0E
.text:000000000000AB0E loc_AB0E:                               ; CODE XREF: set_simple_backup_suffix+2B↓j
.text:000000000000AB0E                                         ; set_simple_backup_suffix+42↓j
.text:000000000000AB0E                 lea     rbx, asc_15190  ; "~"
.text:000000000000AB15
.text:000000000000AB15 loc_AB15:                               ; CODE XREF: set_simple_backup_suffix+2D↓j
.text:000000000000AB15                 mov     cs:simple_backup_suffix, rbx
.text:000000000000AB1C                 pop     rbx
.text:000000000000AB1D                 retn
.text:000000000000AB1D ; ---------------------------------------------------------------------------
.text:000000000000AB1E                 align 20h
.text:000000000000AB20
.text:000000000000AB20 loc_AB20:                               ; CODE XREF: set_simple_backup_suffix+C↑j
.text:000000000000AB20                 mov     rdi, rbx
.text:000000000000AB23                 call    last_component
.text:000000000000AB28                 cmp     rax, rbx
.text:000000000000AB2B                 jnz     short loc_AB0E
.text:000000000000AB2D                 jmp     short loc_AB15
.text:000000000000AB2D ; ---------------------------------------------------------------------------
.text:000000000000AB2F                 align 10h
.text:000000000000AB30
.text:000000000000AB30 loc_AB30:                               ; CODE XREF: set_simple_backup_suffix+7↑j
.text:000000000000AB30                 lea     rdi, aSimpleBackupSu ; "SIMPLE_BACKUP_SUFFIX"
.text:000000000000AB37                 call    _getenv
.text:000000000000AB3C                 test    rax, rax
.text:000000000000AB3F                 mov     rbx, rax
.text:000000000000AB42                 jz      short loc_AB0E
.text:000000000000AB44                 jmp     short loc_AB09
.text:000000000000AB44 ; } // starts at AB00
.text:000000000000AB44 set_simple_backup_suffix endp
.text:000000000000AB44
.text:000000000000AB44 ; ---------------------------------------------------------------------------
.text:000000000000AB46                 align 10h
.text:000000000000AB50
.text:000000000000AB50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB50
.text:000000000000AB50
.text:000000000000AB50                 public backupfile_internal
.text:000000000000AB50 backupfile_internal proc near           ; CODE XREF: backup_file_rename+5↓j
.text:000000000000AB50                                         ; find_backup_file_name+6↓p
.text:000000000000AB50
.text:000000000000AB50 fd              = dword ptr -0B0h
.text:000000000000AB50 src             = qword ptr -0A8h
.text:000000000000AB50 var_A0          = qword ptr -0A0h
.text:000000000000AB50 var_98          = dword ptr -98h
.text:000000000000AB50 var_94          = dword ptr -94h
.text:000000000000AB50 var_90          = qword ptr -90h
.text:000000000000AB50 size            = qword ptr -88h
.text:000000000000AB50 n               = qword ptr -80h
.text:000000000000AB50 var_78          = qword ptr -78h
.text:000000000000AB50 var_70          = qword ptr -70h
.text:000000000000AB50 var_68          = qword ptr -68h
.text:000000000000AB50 var_60          = qword ptr -60h
.text:000000000000AB50 var_55          = byte ptr -55h
.text:000000000000AB50 var_54          = dword ptr -54h
.text:000000000000AB50 var_50          = qword ptr -50h
.text:000000000000AB50 var_44          = dword ptr -44h
.text:000000000000AB50 var_40          = qword ptr -40h
.text:000000000000AB50
.text:000000000000AB50 ; __unwind {
.text:000000000000AB50                 push    r15
.text:000000000000AB52                 push    r14
.text:000000000000AB54                 push    r13
.text:000000000000AB56                 push    r12
.text:000000000000AB58                 push    rbp
.text:000000000000AB59                 push    rbx
.text:000000000000AB5A                 mov     rbx, rsi
.text:000000000000AB5D                 sub     rsp, 88h
.text:000000000000AB64                 mov     [rsp+0B8h+var_54], edi
.text:000000000000AB68                 mov     rdi, rsi
.text:000000000000AB6B                 mov     [rsp+0B8h+src], rsi
.text:000000000000AB70                 mov     [rsp+0B8h+var_98], edx
.text:000000000000AB74                 mov     [rsp+0B8h+var_55], cl
.text:000000000000AB78                 mov     rax, fs:28h
.text:000000000000AB81                 mov     [rsp+0B8h+var_40], rax
.text:000000000000AB86                 xor     eax, eax
.text:000000000000AB88                 call    last_component
.text:000000000000AB8D                 mov     rdi, rax        ; s
.text:000000000000AB90                 mov     r14, rax
.text:000000000000AB93                 call    _strlen
.text:000000000000AB98                 mov     rdi, cs:simple_backup_suffix ; s
.text:000000000000AB9F                 sub     r14, rbx
.text:000000000000ABA2                 add     rax, r14
.text:000000000000ABA5                 mov     [rsp+0B8h+var_A0], rax
.text:000000000000ABAA                 test    rdi, rdi
.text:000000000000ABAD                 jz      loc_B134
.text:000000000000ABB3
.text:000000000000ABB3 loc_ABB3:                               ; CODE XREF: backupfile_internal+5F0↓j
.text:000000000000ABB3                 call    _strlen
.text:000000000000ABB8                 mov     rsi, [rsp+0B8h+var_A0]
.text:000000000000ABBD                 add     rax, 1
.text:000000000000ABC1                 cmp     rax, 9
.text:000000000000ABC5                 mov     [rsp+0B8h+var_68], rax
.text:000000000000ABCA                 lea     rdx, [rsi+1]
.text:000000000000ABCE                 mov     rsi, rax
.text:000000000000ABD1                 mov     eax, 9
.text:000000000000ABD6                 cmovnb  rax, rsi
.text:000000000000ABDA                 add     rax, rdx
.text:000000000000ABDD                 mov     [rsp+0B8h+n], rdx
.text:000000000000ABE2                 mov     rdi, rax        ; size
.text:000000000000ABE5                 mov     [rsp+0B8h+var_78], rax
.text:000000000000ABEA                 call    _malloc
.text:000000000000ABEF                 test    rax, rax
.text:000000000000ABF2                 mov     r15, rax
.text:000000000000ABF5                 jz      loc_AEE0
.text:000000000000ABFB                 lea     rax, [rsp+0B8h+var_44]
.text:000000000000AC00                 mov     [rsp+0B8h+var_44], 0FFFFFFFFh
.text:000000000000AC08                 mov     [rsp+0B8h+var_70], 0
.text:000000000000AC11                 xor     r13d, r13d
.text:000000000000AC14                 mov     [rsp+0B8h+var_50], rax
.text:000000000000AC19
.text:000000000000AC19 loc_AC19:                               ; CODE XREF: backupfile_internal+366↓j
.text:000000000000AC19                 mov     rdx, [rsp+0B8h+n] ; n
.text:000000000000AC1E                 mov     rsi, [rsp+0B8h+src] ; src
.text:000000000000AC23                 mov     rdi, r15        ; dest
.text:000000000000AC26                 call    _memcpy
.text:000000000000AC2B                 cmp     [rsp+0B8h+var_98], 1
.text:000000000000AC30                 jz      loc_AF10
.text:000000000000AC36                 lea     rbp, [r15+r14]
.text:000000000000AC3A                 mov     rdi, rbp
.text:000000000000AC3D                 call    base_len
.text:000000000000AC42                 test    r13, r13
.text:000000000000AC45                 mov     r12, rax
.text:000000000000AC48                 jz      loc_AFF0
.text:000000000000AC4E                 mov     rdi, r13        ; dirp
.text:000000000000AC51                 call    _rewinddir
.text:000000000000AC56
.text:000000000000AC56 loc_AC56:                               ; CODE XREF: backupfile_internal+4E1↓j
.text:000000000000AC56                 mov     rax, [rsp+0B8h+var_78]
.text:000000000000AC5B                 mov     [rsp+0B8h+var_90], 1
.text:000000000000AC64                 mov     [rsp+0B8h+var_94], 2
.text:000000000000AC6C                 mov     [rsp+0B8h+size], rax
.text:000000000000AC71                 lea     rax, [r12+4]
.text:000000000000AC76                 mov     qword ptr [rsp+0B8h+fd], rax
.text:000000000000AC7B                 nop     dword ptr [rax+rax+00h]
.text:000000000000AC80
.text:000000000000AC80 loc_AC80:                               ; CODE XREF: backupfile_internal+152↓j
.text:000000000000AC80                                         ; backupfile_internal+16A↓j ...
.text:000000000000AC80                 mov     rdi, r13        ; dirp
.text:000000000000AC83                 call    _readdir
.text:000000000000AC88                 test    rax, rax
.text:000000000000AC8B                 jz      loc_AE40
.text:000000000000AC91
.text:000000000000AC91 loc_AC91:                               ; CODE XREF: backupfile_internal+2E2↓j
.text:000000000000AC91                 lea     rbx, [rax+13h]
.text:000000000000AC95                 mov     rdi, rbx        ; s
.text:000000000000AC98                 call    _strlen
.text:000000000000AC9D                 cmp     rax, qword ptr [rsp+0B8h+fd]
.text:000000000000ACA2                 jb      short loc_AC80
.text:000000000000ACA4                 lea     rbp, [r12+2]
.text:000000000000ACA9                 lea     rdi, [r15+r14]  ; s1
.text:000000000000ACAD                 mov     rsi, rbx        ; s2
.text:000000000000ACB0                 mov     rdx, rbp        ; n
.text:000000000000ACB3                 call    _memcmp
.text:000000000000ACB8                 test    eax, eax
.text:000000000000ACBA                 jnz     short loc_AC80
.text:000000000000ACBC                 add     rbx, rbp
.text:000000000000ACBF                 movzx   eax, byte ptr [rbx]
.text:000000000000ACC2                 lea     edx, [rax-31h]
.text:000000000000ACC5                 cmp     dl, 8
.text:000000000000ACC8                 ja      short loc_AC80
.text:000000000000ACCA                 cmp     al, 39h ; '9'
.text:000000000000ACCC                 movsx   eax, byte ptr [rbx+1]
.text:000000000000ACD0                 mov     ebp, 1
.text:000000000000ACD5                 setz    r8b
.text:000000000000ACD9                 mov     ecx, eax
.text:000000000000ACDB                 sub     eax, 30h ; '0'
.text:000000000000ACDE                 cmp     eax, 9
.text:000000000000ACE1                 ja      short loc_AD03
.text:000000000000ACE3                 nop     dword ptr [rax+rax+00h]
.text:000000000000ACE8
.text:000000000000ACE8 loc_ACE8:                               ; CODE XREF: backupfile_internal+1B1↓j
.text:000000000000ACE8                 cmp     cl, 39h ; '9'
.text:000000000000ACEB                 setz    al
.text:000000000000ACEE                 add     rbp, 1
.text:000000000000ACF2                 and     r8d, eax
.text:000000000000ACF5                 movsx   eax, byte ptr [rbx+rbp]
.text:000000000000ACF9                 mov     ecx, eax
.text:000000000000ACFB                 sub     eax, 30h ; '0'
.text:000000000000ACFE                 cmp     eax, 9
.text:000000000000AD01                 jbe     short loc_ACE8
.text:000000000000AD03
.text:000000000000AD03 loc_AD03:                               ; CODE XREF: backupfile_internal+191↑j
.text:000000000000AD03                 cmp     cl, 7Eh ; '~'
.text:000000000000AD06                 jnz     loc_AC80
.text:000000000000AD0C                 cmp     byte ptr [rbx+rbp+1], 0
.text:000000000000AD11                 jnz     loc_AC80
.text:000000000000AD17                 mov     rdx, [rsp+0B8h+var_90] ; n
.text:000000000000AD1C                 cmp     rdx, rbp
.text:000000000000AD1F                 jb      short loc_AD4C
.text:000000000000AD21                 mov     byte ptr [rsp+0B8h+var_60], r8b
.text:000000000000AD26                 jnz     loc_AC80
.text:000000000000AD2C                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AD31                 mov     rsi, rbx        ; s2
.text:000000000000AD34                 lea     rdi, [r15+rax+2] ; s1
.text:000000000000AD39                 call    _memcmp
.text:000000000000AD3E                 test    eax, eax
.text:000000000000AD40                 movzx   r8d, byte ptr [rsp+0B8h+var_60]
.text:000000000000AD46                 jg      loc_AC80
.text:000000000000AD4C
.text:000000000000AD4C loc_AD4C:                               ; CODE XREF: backupfile_internal+1CF↑j
.text:000000000000AD4C                 movzx   esi, r8b
.text:000000000000AD50                 movzx   r9d, r8b
.text:000000000000AD54                 mov     [rsp+0B8h+var_94], esi
.text:000000000000AD58                 mov     rsi, [rsp+0B8h+var_A0]
.text:000000000000AD5D                 lea     rax, [r9+rbp]
.text:000000000000AD61                 mov     [rsp+0B8h+var_90], rax
.text:000000000000AD66                 lea     rcx, [rsi+rax+4]
.text:000000000000AD6B                 cmp     rcx, [rsp+0B8h+size]
.text:000000000000AD70                 jbe     loc_B0A8
.text:000000000000AD76                 mov     edx, 2
.text:000000000000AD7B                 xor     esi, esi
.text:000000000000AD7D                 mov     rax, rdx
.text:000000000000AD80                 mul     rcx
.text:000000000000AD83                 jo      loc_B153
.text:000000000000AD89
.text:000000000000AD89 loc_AD89:                               ; CODE XREF: backupfile_internal+608↓j
.text:000000000000AD89                 test    rax, rax
.text:000000000000AD8C                 js      loc_B040
.text:000000000000AD92                 test    rsi, rsi
.text:000000000000AD95                 jnz     loc_B040
.text:000000000000AD9B                 lea     rax, [rcx+rcx]
.text:000000000000AD9F                 mov     [rsp+0B8h+size], rax
.text:000000000000ADA4
.text:000000000000ADA4 loc_ADA4:                               ; CODE XREF: backupfile_internal+4F5↓j
.text:000000000000ADA4                 mov     rsi, [rsp+0B8h+size] ; size
.text:000000000000ADA9                 mov     rdi, r15        ; ptr
.text:000000000000ADAC                 mov     [rsp+0B8h+var_60], r9
.text:000000000000ADB1                 call    _realloc
.text:000000000000ADB6                 test    rax, rax
.text:000000000000ADB9                 mov     r8, rax
.text:000000000000ADBC                 mov     r9, [rsp+0B8h+var_60]
.text:000000000000ADC1                 jz      loc_B050
.text:000000000000ADC7
.text:000000000000ADC7 loc_ADC7:                               ; CODE XREF: backupfile_internal+55B↓j
.text:000000000000ADC7                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000ADCC                 lea     rdx, [rbp+2]    ; n
.text:000000000000ADD0                 mov     [rsp+0B8h+var_60], r8
.text:000000000000ADD5                 mov     rsi, rbx        ; src
.text:000000000000ADD8                 add     rax, r8
.text:000000000000ADDB                 mov     r8d, 7E2Eh
.text:000000000000ADE1                 lea     rcx, [rax+r9+2]
.text:000000000000ADE6                 mov     [rax], r8w
.text:000000000000ADEA                 mov     byte ptr [rax+2], 30h ; '0'
.text:000000000000ADEE                 mov     rdi, rcx        ; dest
.text:000000000000ADF1                 call    _memcpy
.text:000000000000ADF6                 add     rbp, rax
.text:000000000000ADF9                 mov     r8, [rsp+0B8h+var_60]
.text:000000000000ADFE                 movzx   edx, byte ptr [rbp-1]
.text:000000000000AE02                 lea     rax, [rbp-1]
.text:000000000000AE06                 cmp     dl, 39h ; '9'
.text:000000000000AE09                 jnz     short loc_AE1F
.text:000000000000AE0B                 nop     dword ptr [rax+rax+00h]
.text:000000000000AE10
.text:000000000000AE10 loc_AE10:                               ; CODE XREF: backupfile_internal+2CD↓j
.text:000000000000AE10                 mov     byte ptr [rax], 30h ; '0'
.text:000000000000AE13                 sub     rax, 1
.text:000000000000AE17                 movzx   edx, byte ptr [rax]
.text:000000000000AE1A                 cmp     dl, 39h ; '9'
.text:000000000000AE1D                 jz      short loc_AE10
.text:000000000000AE1F
.text:000000000000AE1F loc_AE1F:                               ; CODE XREF: backupfile_internal+2B9↑j
.text:000000000000AE1F                 add     edx, 1
.text:000000000000AE22                 mov     rdi, r13        ; dirp
.text:000000000000AE25                 mov     r15, r8
.text:000000000000AE28                 mov     [rax], dl
.text:000000000000AE2A                 call    _readdir
.text:000000000000AE2F                 test    rax, rax
.text:000000000000AE32                 jnz     loc_AC91
.text:000000000000AE38                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000AE40
.text:000000000000AE40 loc_AE40:                               ; CODE XREF: backupfile_internal+13B↑j
.text:000000000000AE40                                         ; backupfile_internal+58D↓j
.text:000000000000AE40                 mov     eax, [rsp+0B8h+var_94]
.text:000000000000AE44                 cmp     eax, 2
.text:000000000000AE47                 jz      loc_AF30
.text:000000000000AE4D                 cmp     eax, 3
.text:000000000000AE50                 jz      loc_B050
.text:000000000000AE56                 cmp     eax, 1
.text:000000000000AE59                 jz      loc_AF60
.text:000000000000AE5F
.text:000000000000AE5F loc_AE5F:                               ; CODE XREF: backupfile_internal+3DA↓j
.text:000000000000AE5F                                         ; backupfile_internal+42A↓j ...
.text:000000000000AE5F                 cmp     [rsp+0B8h+var_55], 0
.text:000000000000AE64                 jz      loc_B11E
.text:000000000000AE6A                 mov     edx, [rsp+0B8h+var_44]
.text:000000000000AE6E                 lea     rcx, [r15+r14]
.text:000000000000AE72                 test    edx, edx
.text:000000000000AE74                 jns     short loc_AE89
.text:000000000000AE76                 mov     [rsp+0B8h+var_44], 0FFFFFF9Ch
.text:000000000000AE7E                 mov     rcx, r15
.text:000000000000AE81                 mov     edx, 0FFFFFF9Ch
.text:000000000000AE86                 xor     r14d, r14d
.text:000000000000AE89
.text:000000000000AE89 loc_AE89:                               ; CODE XREF: backupfile_internal+324↑j
.text:000000000000AE89                 xor     r8d, r8d
.text:000000000000AE8C                 cmp     [rsp+0B8h+var_98], 1
.text:000000000000AE91                 mov     rsi, [rsp+0B8h+src]
.text:000000000000AE96                 mov     edi, 0FFFFFF9Ch
.text:000000000000AE9B                 setnz   r8b
.text:000000000000AE9F                 call    renameat2
.text:000000000000AEA4                 test    eax, eax
.text:000000000000AEA6                 jz      loc_B11E
.text:000000000000AEAC                 call    ___errno_location
.text:000000000000AEB1                 mov     ebp, [rax]
.text:000000000000AEB3                 cmp     ebp, 11h
.text:000000000000AEB6                 jz      loc_AC19
.text:000000000000AEBC                 test    r13, r13
.text:000000000000AEBF                 mov     rbx, rax
.text:000000000000AEC2                 jz      short loc_AECC
.text:000000000000AEC4                 mov     rdi, r13        ; dirp
.text:000000000000AEC7                 call    _closedir
.text:000000000000AECC
.text:000000000000AECC loc_AECC:                               ; CODE XREF: backupfile_internal+372↑j
.text:000000000000AECC                 mov     rdi, r15        ; ptr
.text:000000000000AECF                 xor     r15d, r15d
.text:000000000000AED2                 call    free
.text:000000000000AED7                 mov     [rbx], ebp
.text:000000000000AED9                 nop     dword ptr [rax+00000000h]
.text:000000000000AEE0
.text:000000000000AEE0 loc_AEE0:                               ; CODE XREF: backupfile_internal+A5↑j
.text:000000000000AEE0                                         ; backupfile_internal+516↓j ...
.text:000000000000AEE0                 mov     rsi, [rsp+0B8h+var_40]
.text:000000000000AEE5                 xor     rsi, fs:28h
.text:000000000000AEEE                 mov     rax, r15
.text:000000000000AEF1                 jnz     loc_B15D
.text:000000000000AEF7                 add     rsp, 88h
.text:000000000000AEFE                 pop     rbx
.text:000000000000AEFF                 pop     rbp
.text:000000000000AF00                 pop     r12
.text:000000000000AF02                 pop     r13
.text:000000000000AF04                 pop     r14
.text:000000000000AF06                 pop     r15
.text:000000000000AF08                 retn
.text:000000000000AF08 ; ---------------------------------------------------------------------------
.text:000000000000AF09                 align 10h
.text:000000000000AF10
.text:000000000000AF10 loc_AF10:                               ; CODE XREF: backupfile_internal+E0↑j
.text:000000000000AF10                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AF15                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:000000000000AF1A                 mov     rsi, cs:simple_backup_suffix ; src
.text:000000000000AF21                 lea     rdi, [r15+rax]  ; dest
.text:000000000000AF25                 call    _memcpy
.text:000000000000AF2A                 jmp     loc_AE5F
.text:000000000000AF2A ; ---------------------------------------------------------------------------
.text:000000000000AF2F                 align 10h
.text:000000000000AF30
.text:000000000000AF30 loc_AF30:                               ; CODE XREF: backupfile_internal+2F7↑j
.text:000000000000AF30                 cmp     [rsp+0B8h+var_98], 2
.text:000000000000AF35                 jnz     short loc_AF60
.text:000000000000AF37                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AF3C                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:000000000000AF41                 mov     rsi, cs:simple_backup_suffix ; src
.text:000000000000AF48                 lea     rdi, [r15+rax]  ; dest
.text:000000000000AF4C                 call    _memcpy
.text:000000000000AF51                 mov     [rsp+0B8h+var_98], 1
.text:000000000000AF59                 nop     dword ptr [rax+00000000h]
.text:000000000000AF60
.text:000000000000AF60 loc_AF60:                               ; CODE XREF: backupfile_internal+309↑j
.text:000000000000AF60                                         ; backupfile_internal+3E5↑j
.text:000000000000AF60                 mov     rdi, r15
.text:000000000000AF63                 call    last_component
.text:000000000000AF68                 mov     rdi, rax
.text:000000000000AF6B                 mov     rbx, rax
.text:000000000000AF6E                 call    base_len
.text:000000000000AF73                 cmp     rax, 0Eh
.text:000000000000AF77                 mov     rbp, rax
.text:000000000000AF7A                 jbe     loc_AE5F
.text:000000000000AF80                 cmp     [rsp+0B8h+var_70], 0
.text:000000000000AF86                 jnz     loc_B070
.text:000000000000AF8C                 mov     edi, [rsp+0B8h+var_44]
.text:000000000000AF90                 mov     [rsp+0B8h+fd], edi
.text:000000000000AF94                 call    ___errno_location
.text:000000000000AF99                 mov     edi, [rsp+0B8h+fd] ; fd
.text:000000000000AF9D                 mov     r12, rax
.text:000000000000AFA0                 test    edi, edi
.text:000000000000AFA2                 js      loc_B0E2
.text:000000000000AFA8                 mov     dword ptr [rax], 0
.text:000000000000AFAE                 mov     esi, 3          ; name
.text:000000000000AFB3                 call    _fpathconf
.text:000000000000AFB8                 mov     ecx, [r12]
.text:000000000000AFBC                 xor     edx, edx
.text:000000000000AFBE                 test    ecx, ecx
.text:000000000000AFC0                 setz    dl
.text:000000000000AFC3                 sub     rax, rdx
.text:000000000000AFC6
.text:000000000000AFC6 loc_AFC6:                               ; CODE XREF: backupfile_internal+5C9↓j
.text:000000000000AFC6                 test    rax, rax
.text:000000000000AFC9                 mov     [rsp+0B8h+var_70], rax
.text:000000000000AFCE                 jns     loc_B070
.text:000000000000AFD4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000AFD8                 jnz     loc_B145
.text:000000000000AFDE                 mov     [rsp+0B8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:000000000000AFE7                 jmp     loc_AE5F
.text:000000000000AFE7 ; ---------------------------------------------------------------------------
.text:000000000000AFEC                 align 10h
.text:000000000000AFF0
.text:000000000000AFF0 loc_AFF0:                               ; CODE XREF: backupfile_internal+F8↑j
.text:000000000000AFF0                 mov     rcx, [rsp+0B8h+var_50]
.text:000000000000AFF5                 mov     edi, [rsp+0B8h+var_54]
.text:000000000000AFF9                 mov     r9d, 2Eh ; '.'
.text:000000000000AFFF                 xor     edx, edx
.text:000000000000B001                 movzx   ebx, word ptr [rbp+0]
.text:000000000000B005                 mov     rsi, r15
.text:000000000000B008                 mov     [rbp+0], r9w
.text:000000000000B00D                 call    opendirat
.text:000000000000B012                 test    rax, rax
.text:000000000000B015                 mov     r13, rax
.text:000000000000B018                 lea     rdx, [rbp+r12+0]
.text:000000000000B01D                 jz      loc_B0B0
.text:000000000000B023                 mov     [rbp+0], bx
.text:000000000000B027                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000B02D                 mov     byte ptr [rdx+4], 0
.text:000000000000B031                 jmp     loc_AC56
.text:000000000000B031 ; ---------------------------------------------------------------------------
.text:000000000000B036                 align 20h
.text:000000000000B040
.text:000000000000B040 loc_B040:                               ; CODE XREF: backupfile_internal+23C↑j
.text:000000000000B040                                         ; backupfile_internal+245↑j
.text:000000000000B040                 mov     [rsp+0B8h+size], rcx
.text:000000000000B045                 jmp     loc_ADA4
.text:000000000000B045 ; ---------------------------------------------------------------------------
.text:000000000000B04A                 align 10h
.text:000000000000B050
.text:000000000000B050 loc_B050:                               ; CODE XREF: backupfile_internal+271↑j
.text:000000000000B050                                         ; backupfile_internal+300↑j
.text:000000000000B050                 mov     rdi, r15        ; ptr
.text:000000000000B053                 xor     r15d, r15d
.text:000000000000B056                 call    free
.text:000000000000B05B                 call    ___errno_location
.text:000000000000B060                 mov     dword ptr [rax], 0Ch
.text:000000000000B066                 jmp     loc_AEE0
.text:000000000000B066 ; ---------------------------------------------------------------------------
.text:000000000000B06B                 align 10h
.text:000000000000B070
.text:000000000000B070 loc_B070:                               ; CODE XREF: backupfile_internal+436↑j
.text:000000000000B070                                         ; backupfile_internal+47E↑j
.text:000000000000B070                 cmp     rbp, [rsp+0B8h+var_70]
.text:000000000000B075                 jbe     loc_AE5F
.text:000000000000B07B
.text:000000000000B07B loc_B07B:                               ; CODE XREF: backupfile_internal+5FE↓j
.text:000000000000B07B                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000B080                 mov     rsi, [rsp+0B8h+var_70]
.text:000000000000B085                 add     rax, r15
.text:000000000000B088                 lea     rdx, [rsi-1]
.text:000000000000B08C                 sub     rax, rbx
.text:000000000000B08F                 cmp     rax, rsi
.text:000000000000B092                 cmovnb  rax, rdx
.text:000000000000B096                 mov     byte ptr [rbx+rax], 7Eh ; '~'
.text:000000000000B09A                 mov     byte ptr [rbx+rax+1], 0
.text:000000000000B09F                 jmp     loc_AE5F
.text:000000000000B09F ; ---------------------------------------------------------------------------
.text:000000000000B0A4                 align 8
.text:000000000000B0A8
.text:000000000000B0A8 loc_B0A8:                               ; CODE XREF: backupfile_internal+220↑j
.text:000000000000B0A8                 mov     r8, r15
.text:000000000000B0AB                 jmp     loc_ADC7
.text:000000000000B0B0 ; ---------------------------------------------------------------------------
.text:000000000000B0B0
.text:000000000000B0B0 loc_B0B0:                               ; CODE XREF: backupfile_internal+4CD↑j
.text:000000000000B0B0                 mov     qword ptr [rsp+0B8h+fd], rdx
.text:000000000000B0B5                 call    ___errno_location
.text:000000000000B0BA                 cmp     dword ptr [rax], 0Ch
.text:000000000000B0BD                 mov     rdx, qword ptr [rsp+0B8h+fd]
.text:000000000000B0C2                 mov     [rbp+0], bx
.text:000000000000B0C6                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000B0CC                 mov     byte ptr [rdx+4], 0
.text:000000000000B0D0                 setz    al
.text:000000000000B0D3                 movzx   eax, al
.text:000000000000B0D6                 add     eax, 2
.text:000000000000B0D9                 mov     [rsp+0B8h+var_94], eax
.text:000000000000B0DD                 jmp     loc_AE40
.text:000000000000B0E2 ; ---------------------------------------------------------------------------
.text:000000000000B0E2
.text:000000000000B0E2 loc_B0E2:                               ; CODE XREF: backupfile_internal+452↑j
.text:000000000000B0E2                 movzx   edx, word ptr [rbx]
.text:000000000000B0E5                 mov     esi, 2Eh ; '.'
.text:000000000000B0EA                 mov     rdi, r15        ; path
.text:000000000000B0ED                 mov     [rbx], si
.text:000000000000B0F0                 mov     dword ptr [rax], 0
.text:000000000000B0F6                 mov     esi, 3          ; name
.text:000000000000B0FB                 mov     [rsp+0B8h+fd], edx
.text:000000000000B0FF                 call    _pathconf
.text:000000000000B104                 mov     edi, [r12]
.text:000000000000B108                 mov     edx, [rsp+0B8h+fd]
.text:000000000000B10C                 xor     ecx, ecx
.text:000000000000B10E                 test    edi, edi
.text:000000000000B110                 mov     [rbx], dx
.text:000000000000B113                 setz    cl
.text:000000000000B116                 sub     rax, rcx
.text:000000000000B119                 jmp     loc_AFC6
.text:000000000000B11E ; ---------------------------------------------------------------------------
.text:000000000000B11E
.text:000000000000B11E loc_B11E:                               ; CODE XREF: backupfile_internal+314↑j
.text:000000000000B11E                                         ; backupfile_internal+356↑j
.text:000000000000B11E                 test    r13, r13
.text:000000000000B121                 jz      loc_AEE0
.text:000000000000B127                 mov     rdi, r13        ; dirp
.text:000000000000B12A                 call    _closedir
.text:000000000000B12F                 jmp     loc_AEE0
.text:000000000000B134 ; ---------------------------------------------------------------------------
.text:000000000000B134
.text:000000000000B134 loc_B134:                               ; CODE XREF: backupfile_internal+5D↑j
.text:000000000000B134                 call    set_simple_backup_suffix
.text:000000000000B139                 mov     rdi, cs:simple_backup_suffix
.text:000000000000B140                 jmp     loc_ABB3
.text:000000000000B145 ; ---------------------------------------------------------------------------
.text:000000000000B145
.text:000000000000B145 loc_B145:                               ; CODE XREF: backupfile_internal+488↑j
.text:000000000000B145                 mov     [rsp+0B8h+var_70], 0Eh
.text:000000000000B14E                 jmp     loc_B07B
.text:000000000000B153 ; ---------------------------------------------------------------------------
.text:000000000000B153
.text:000000000000B153 loc_B153:                               ; CODE XREF: backupfile_internal+233↑j
.text:000000000000B153                 mov     esi, 1
.text:000000000000B158                 jmp     loc_AD89
.text:000000000000B15D ; ---------------------------------------------------------------------------
.text:000000000000B15D
.text:000000000000B15D loc_B15D:                               ; CODE XREF: backupfile_internal+3A1↑j
.text:000000000000B15D                 call    ___stack_chk_fail
.text:000000000000B15D ; } // starts at AB50
.text:000000000000B15D backupfile_internal endp
.text:000000000000B15D
.text:000000000000B15D ; ---------------------------------------------------------------------------
.text:000000000000B162                 align 10h
.text:000000000000B170
.text:000000000000B170 ; =============== S U B R O U T I N E =======================================
.text:000000000000B170
.text:000000000000B170
.text:000000000000B170                 public backup_file_rename
.text:000000000000B170 backup_file_rename proc near            ; CODE XREF: copy_internal+DDE↑p
.text:000000000000B170 ; __unwind {
.text:000000000000B170                 mov     ecx, 1
.text:000000000000B175                 jmp     backupfile_internal
.text:000000000000B175 ; } // starts at B170
.text:000000000000B175 backup_file_rename endp
.text:000000000000B175
.text:000000000000B175 ; ---------------------------------------------------------------------------
.text:000000000000B17A                 align 20h
.text:000000000000B180
.text:000000000000B180 ; =============== S U B R O U T I N E =======================================
.text:000000000000B180
.text:000000000000B180
.text:000000000000B180 get_version_part_0 proc near            ; CODE XREF: get_version+A↓j
.text:000000000000B180                                         ; xget_version:loc_B232↓j
.text:000000000000B180 ; __unwind {
.text:000000000000B180                 sub     rsp, 8
.text:000000000000B184                 mov     r9, cs:argmatch_die
.text:000000000000B18B                 lea     rdx, backup_args
.text:000000000000B192                 lea     rcx, backup_types
.text:000000000000B199                 mov     r8d, 4
.text:000000000000B19F                 call    __xargmatch_internal
.text:000000000000B1A4                 lea     rdx, backup_types
.text:000000000000B1AB                 mov     eax, [rdx+rax*4]
.text:000000000000B1AE                 add     rsp, 8
.text:000000000000B1B2                 retn
.text:000000000000B1B2 ; } // starts at B180
.text:000000000000B1B2 get_version_part_0 endp
.text:000000000000B1B2
.text:000000000000B1B2 ; ---------------------------------------------------------------------------
.text:000000000000B1B3                 align 20h
.text:000000000000B1C0
.text:000000000000B1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1C0
.text:000000000000B1C0
.text:000000000000B1C0                 public find_backup_file_name
.text:000000000000B1C0 find_backup_file_name proc near         ; CODE XREF: do_copy+EA↑p
.text:000000000000B1C0 ; __unwind {
.text:000000000000B1C0                 sub     rsp, 8
.text:000000000000B1C4                 xor     ecx, ecx
.text:000000000000B1C6                 call    backupfile_internal
.text:000000000000B1CB                 test    rax, rax
.text:000000000000B1CE                 jz      short loc_B1D5
.text:000000000000B1D0                 add     rsp, 8
.text:000000000000B1D4                 retn
.text:000000000000B1D5 ; ---------------------------------------------------------------------------
.text:000000000000B1D5
.text:000000000000B1D5 loc_B1D5:                               ; CODE XREF: find_backup_file_name+E↑j
.text:000000000000B1D5                 call    xalloc_die
.text:000000000000B1D5 ; } // starts at B1C0
.text:000000000000B1D5 find_backup_file_name endp
.text:000000000000B1D5
.text:000000000000B1D5 ; ---------------------------------------------------------------------------
.text:000000000000B1DA                 align 20h
.text:000000000000B1E0
.text:000000000000B1E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1E0
.text:000000000000B1E0
.text:000000000000B1E0                 public get_version
.text:000000000000B1E0 get_version     proc near
.text:000000000000B1E0 ; __unwind {
.text:000000000000B1E0                 test    rsi, rsi
.text:000000000000B1E3                 jz      short loc_B1F0
.text:000000000000B1E5                 cmp     byte ptr [rsi], 0
.text:000000000000B1E8                 jz      short loc_B1F0
.text:000000000000B1EA                 jmp     short get_version_part_0
.text:000000000000B1EA ; ---------------------------------------------------------------------------
.text:000000000000B1EC                 align 10h
.text:000000000000B1F0
.text:000000000000B1F0 loc_B1F0:                               ; CODE XREF: get_version+3↑j
.text:000000000000B1F0                                         ; get_version+8↑j
.text:000000000000B1F0                 mov     eax, 2
.text:000000000000B1F5                 retn
.text:000000000000B1F5 ; } // starts at B1E0
.text:000000000000B1F5 get_version     endp
.text:000000000000B1F5
.text:000000000000B1F5 ; ---------------------------------------------------------------------------
.text:000000000000B1F6                 align 20h
.text:000000000000B200
.text:000000000000B200 ; =============== S U B R O U T I N E =======================================
.text:000000000000B200
.text:000000000000B200
.text:000000000000B200                 public xget_version
.text:000000000000B200 xget_version    proc near               ; CODE XREF: main+577↑p
.text:000000000000B200 ; __unwind {
.text:000000000000B200                 test    rsi, rsi
.text:000000000000B203                 jz      short loc_B20A
.text:000000000000B205                 cmp     byte ptr [rsi], 0
.text:000000000000B208                 jnz     short loc_B232
.text:000000000000B20A
.text:000000000000B20A loc_B20A:                               ; CODE XREF: xget_version+3↑j
.text:000000000000B20A                 lea     rdi, aVersionControl ; "VERSION_CONTROL"
.text:000000000000B211                 sub     rsp, 8
.text:000000000000B215                 call    _getenv
.text:000000000000B21A                 test    rax, rax
.text:000000000000B21D                 jz      short loc_B240
.text:000000000000B21F                 cmp     byte ptr [rax], 0
.text:000000000000B222                 jz      short loc_B240
.text:000000000000B224                 lea     rdi, unk_151A7
.text:000000000000B22B                 mov     rsi, rax
.text:000000000000B22E                 add     rsp, 8
.text:000000000000B232
.text:000000000000B232 loc_B232:                               ; CODE XREF: xget_version+8↑j
.text:000000000000B232                 jmp     get_version_part_0
.text:000000000000B232 ; ---------------------------------------------------------------------------
.text:000000000000B237                 align 20h
.text:000000000000B240
.text:000000000000B240 loc_B240:                               ; CODE XREF: xget_version+1D↑j
.text:000000000000B240                                         ; xget_version+22↑j
.text:000000000000B240                 mov     eax, 2
.text:000000000000B245                 add     rsp, 8
.text:000000000000B249                 retn
.text:000000000000B249 ; } // starts at B200
.text:000000000000B249 xget_version    endp
.text:000000000000B249
.text:000000000000B249 ; ---------------------------------------------------------------------------
.text:000000000000B24A                 align 10h
.text:000000000000B250
.text:000000000000B250 ; =============== S U B R O U T I N E =======================================
.text:000000000000B250
.text:000000000000B250
.text:000000000000B250                 public buffer_lcm
.text:000000000000B250 buffer_lcm      proc near               ; CODE XREF: copy_internal+2FE0↑p
.text:000000000000B250 ; __unwind {
.text:000000000000B250                 test    rdi, rdi
.text:000000000000B253                 mov     rcx, rdx
.text:000000000000B256                 jnz     short loc_B278
.text:000000000000B258                 test    rsi, rsi
.text:000000000000B25B                 mov     edi, 2000h
.text:000000000000B260                 cmovnz  rdi, rsi
.text:000000000000B264
.text:000000000000B264 loc_B264:                               ; CODE XREF: buffer_lcm+2B↓j
.text:000000000000B264                                         ; buffer_lcm+52↓j ...
.text:000000000000B264                 cmp     rdi, rcx
.text:000000000000B267                 cmovbe  rcx, rdi
.text:000000000000B26B                 mov     r8, rcx
.text:000000000000B26E
.text:000000000000B26E loc_B26E:                               ; CODE XREF: buffer_lcm+61↓j
.text:000000000000B26E                 mov     rax, r8
.text:000000000000B271                 retn
.text:000000000000B271 ; ---------------------------------------------------------------------------
.text:000000000000B272                 align 8
.text:000000000000B278
.text:000000000000B278 loc_B278:                               ; CODE XREF: buffer_lcm+6↑j
.text:000000000000B278                 test    rsi, rsi
.text:000000000000B27B                 jz      short loc_B264
.text:000000000000B27D                 mov     r8, rsi
.text:000000000000B280                 mov     rax, rdi
.text:000000000000B283
.text:000000000000B283 loc_B283:                               ; CODE XREF: buffer_lcm+6E↓j
.text:000000000000B283                 xor     edx, edx
.text:000000000000B285                 div     r8
.text:000000000000B288                 test    rdx, rdx
.text:000000000000B28B                 jnz     short loc_B2B8
.text:000000000000B28D                 xor     edx, edx
.text:000000000000B28F                 mov     rax, rdi
.text:000000000000B292                 div     r8
.text:000000000000B295                 mov     r8, rsi
.text:000000000000B298                 imul    r8, rax
.text:000000000000B29C                 mov     r9, rax
.text:000000000000B29F                 cmp     r8, rcx
.text:000000000000B2A2                 ja      short loc_B264
.text:000000000000B2A4                 xor     edx, edx
.text:000000000000B2A6                 mov     rax, r8
.text:000000000000B2A9                 div     rsi
.text:000000000000B2AC                 cmp     rax, r9
.text:000000000000B2AF                 jnz     short loc_B264
.text:000000000000B2B1                 jmp     short loc_B26E
.text:000000000000B2B1 ; ---------------------------------------------------------------------------
.text:000000000000B2B3                 align 8
.text:000000000000B2B8
.text:000000000000B2B8 loc_B2B8:                               ; CODE XREF: buffer_lcm+3B↑j
.text:000000000000B2B8                 mov     rax, r8
.text:000000000000B2BB                 mov     r8, rdx
.text:000000000000B2BE                 jmp     short loc_B283
.text:000000000000B2BE ; } // starts at B250
.text:000000000000B2BE buffer_lcm      endp
.text:000000000000B2BE
.text:000000000000B2C0
.text:000000000000B2C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2C0
.text:000000000000B2C0
.text:000000000000B2C0                 public close_stdin_set_file_name
.text:000000000000B2C0 close_stdin_set_file_name proc near
.text:000000000000B2C0 ; __unwind {
.text:000000000000B2C0                 mov     cs:file_name, rdi
.text:000000000000B2C7                 retn
.text:000000000000B2C7 ; } // starts at B2C0
.text:000000000000B2C7 close_stdin_set_file_name endp
.text:000000000000B2C7
.text:000000000000B2C7 ; ---------------------------------------------------------------------------
.text:000000000000B2C8                 align 10h
.text:000000000000B2D0
.text:000000000000B2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2D0
.text:000000000000B2D0
.text:000000000000B2D0                 public close_stdin
.text:000000000000B2D0 close_stdin     proc near               ; DATA XREF: main+7B↑o
.text:000000000000B2D0 ; __unwind {
.text:000000000000B2D0                 push    r12
.text:000000000000B2D2                 push    rbp
.text:000000000000B2D3                 push    rbx
.text:000000000000B2D4                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:000000000000B2DB                 mov     rdi, rbx
.text:000000000000B2DE                 call    freadahead
.text:000000000000B2E3                 test    rax, rax
.text:000000000000B2E6                 jnz     loc_B388
.text:000000000000B2EC                 mov     rdi, rbx        ; stream
.text:000000000000B2EF                 call    close_stream
.text:000000000000B2F4                 test    eax, eax
.text:000000000000B2F6                 jnz     short loc_B328
.text:000000000000B2F8                 pop     rbx
.text:000000000000B2F9                 pop     rbp
.text:000000000000B2FA                 pop     r12
.text:000000000000B2FC                 jmp     close_stdout
.text:000000000000B2FC ; ---------------------------------------------------------------------------
.text:000000000000B301                 align 8
.text:000000000000B308
.text:000000000000B308 loc_B308:                               ; CODE XREF: close_stdin+D0↓j
.text:000000000000B308                 call    rpl_fflush
.text:000000000000B30D                 test    eax, eax
.text:000000000000B30F                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000B316                 jz      loc_B3A6
.text:000000000000B31C                 call    close_stream
.text:000000000000B321                 nop     dword ptr [rax+00000000h]
.text:000000000000B328
.text:000000000000B328 loc_B328:                               ; CODE XREF: close_stdin+26↑j
.text:000000000000B328                                         ; close_stdin+DD↓j
.text:000000000000B328                 lea     rsi, aErrorClosingFi ; "error closing file"
.text:000000000000B32F                 xor     edi, edi        ; domainname
.text:000000000000B331                 mov     edx, 5          ; category
.text:000000000000B336                 call    _dcgettext
.text:000000000000B33B                 mov     rbx, cs:file_name
.text:000000000000B342                 mov     r12, rax
.text:000000000000B345                 call    ___errno_location
.text:000000000000B34A                 mov     rbp, rax
.text:000000000000B34D                 test    rbx, rbx
.text:000000000000B350                 jz      short loc_B3C0
.text:000000000000B352                 mov     rdi, rbx
.text:000000000000B355                 call    quotearg_colon
.text:000000000000B35A                 mov     esi, [rbp+0]    ; errnum
.text:000000000000B35D                 lea     rdx, format     ; "%s: %s"
.text:000000000000B364                 mov     rcx, rax
.text:000000000000B367                 mov     r8, r12
.text:000000000000B36A                 xor     edi, edi        ; status
.text:000000000000B36C                 xor     eax, eax
.text:000000000000B36E                 call    _error
.text:000000000000B373
.text:000000000000B373 loc_B373:                               ; CODE XREF: close_stdin+105↓j
.text:000000000000B373                 call    close_stdout
.text:000000000000B378                 mov     edi, cs:exit_failure ; status
.text:000000000000B37E                 call    __exit
.text:000000000000B37E ; ---------------------------------------------------------------------------
.text:000000000000B383                 align 8
.text:000000000000B388
.text:000000000000B388 loc_B388:                               ; CODE XREF: close_stdin+16↑j
.text:000000000000B388                 xor     esi, esi
.text:000000000000B38A                 mov     rdi, rbx
.text:000000000000B38D                 mov     edx, 1
.text:000000000000B392                 call    rpl_fseeko
.text:000000000000B397                 test    eax, eax
.text:000000000000B399                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000B3A0                 jz      loc_B308
.text:000000000000B3A6
.text:000000000000B3A6 loc_B3A6:                               ; CODE XREF: close_stdin+46↑j
.text:000000000000B3A6                 call    close_stream
.text:000000000000B3AB                 test    eax, eax
.text:000000000000B3AD                 jnz     loc_B328
.text:000000000000B3B3                 pop     rbx
.text:000000000000B3B4                 pop     rbp
.text:000000000000B3B5                 pop     r12
.text:000000000000B3B7                 jmp     close_stdout
.text:000000000000B3B7 ; ---------------------------------------------------------------------------
.text:000000000000B3BC                 align 20h
.text:000000000000B3C0
.text:000000000000B3C0 loc_B3C0:                               ; CODE XREF: close_stdin+80↑j
.text:000000000000B3C0                 mov     esi, [rax]      ; errnum
.text:000000000000B3C2                 lea     rdx, aS_0+2     ; format
.text:000000000000B3C9                 mov     rcx, r12
.text:000000000000B3CC                 xor     edi, edi        ; status
.text:000000000000B3CE                 xor     eax, eax
.text:000000000000B3D0                 call    _error
.text:000000000000B3D5                 jmp     short loc_B373
.text:000000000000B3D5 ; } // starts at B2D0
.text:000000000000B3D5 close_stdin     endp
.text:000000000000B3D5
.text:000000000000B3D5 ; ---------------------------------------------------------------------------
.text:000000000000B3D7                 align 20h
.text:000000000000B3E0
.text:000000000000B3E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B3E0
.text:000000000000B3E0
.text:000000000000B3E0                 public close_stdout_set_file_name
.text:000000000000B3E0 close_stdout_set_file_name proc near
.text:000000000000B3E0 ; __unwind {
.text:000000000000B3E0                 mov     cs:file_name_0, rdi
.text:000000000000B3E7                 retn
.text:000000000000B3E7 ; } // starts at B3E0
.text:000000000000B3E7 close_stdout_set_file_name endp
.text:000000000000B3E7
.text:000000000000B3E7 ; ---------------------------------------------------------------------------
.text:000000000000B3E8                 align 10h
.text:000000000000B3F0
.text:000000000000B3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B3F0
.text:000000000000B3F0
.text:000000000000B3F0                 public close_stdout_set_ignore_EPIPE
.text:000000000000B3F0 close_stdout_set_ignore_EPIPE proc near
.text:000000000000B3F0 ; __unwind {
.text:000000000000B3F0                 mov     cs:ignore_EPIPE, dil
.text:000000000000B3F7                 retn
.text:000000000000B3F7 ; } // starts at B3F0
.text:000000000000B3F7 close_stdout_set_ignore_EPIPE endp
.text:000000000000B3F7
.text:000000000000B3F7 ; ---------------------------------------------------------------------------
.text:000000000000B3F8                 align 20h
.text:000000000000B400
.text:000000000000B400 ; =============== S U B R O U T I N E =======================================
.text:000000000000B400
.text:000000000000B400 ; Attributes: info_from_lumina
.text:000000000000B400
.text:000000000000B400 ; void __cdecl close_stdout()
.text:000000000000B400                 public close_stdout
.text:000000000000B400 close_stdout    proc near               ; CODE XREF: close_stdin+2C↑j
.text:000000000000B400                                         ; close_stdin:loc_B373↑p ...
.text:000000000000B400 ; __unwind {
.text:000000000000B400                 push    rbp
.text:000000000000B401                 push    rbx
.text:000000000000B402                 sub     rsp, 8
.text:000000000000B406                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000B40D                 call    close_stream
.text:000000000000B412                 test    eax, eax
.text:000000000000B414                 jz      short loc_B42C
.text:000000000000B416                 call    ___errno_location
.text:000000000000B41B                 cmp     cs:ignore_EPIPE, 0
.text:000000000000B422                 mov     rbx, rax
.text:000000000000B425                 jz      short loc_B443
.text:000000000000B427                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000B42A                 jnz     short loc_B443
.text:000000000000B42C
.text:000000000000B42C loc_B42C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000B42C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:000000000000B433                 call    close_stream
.text:000000000000B438                 test    eax, eax
.text:000000000000B43A                 jnz     short loc_B482
.text:000000000000B43C                 add     rsp, 8
.text:000000000000B440                 pop     rbx
.text:000000000000B441                 pop     rbp
.text:000000000000B442                 retn
.text:000000000000B443 ; ---------------------------------------------------------------------------
.text:000000000000B443
.text:000000000000B443 loc_B443:                               ; CODE XREF: close_stdout+25↑j
.text:000000000000B443                                         ; close_stdout+2A↑j
.text:000000000000B443                 lea     rsi, aWriteError ; "write error"
.text:000000000000B44A                 xor     edi, edi        ; domainname
.text:000000000000B44C                 mov     edx, 5          ; category
.text:000000000000B451                 call    _dcgettext
.text:000000000000B456                 mov     rdi, cs:file_name_0
.text:000000000000B45D                 mov     rbp, rax
.text:000000000000B460                 test    rdi, rdi
.text:000000000000B463                 jz      short loc_B48D
.text:000000000000B465                 call    quotearg_colon
.text:000000000000B46A                 mov     esi, [rbx]      ; errnum
.text:000000000000B46C                 lea     rdx, format     ; "%s: %s"
.text:000000000000B473                 mov     rcx, rax
.text:000000000000B476                 mov     r8, rbp
.text:000000000000B479                 xor     edi, edi        ; status
.text:000000000000B47B                 xor     eax, eax
.text:000000000000B47D                 call    _error
.text:000000000000B482
.text:000000000000B482 loc_B482:                               ; CODE XREF: close_stdout+3A↑j
.text:000000000000B482                                         ; close_stdout+A2↓j
.text:000000000000B482                 mov     edi, cs:exit_failure ; status
.text:000000000000B488                 call    __exit
.text:000000000000B48D ; ---------------------------------------------------------------------------
.text:000000000000B48D
.text:000000000000B48D loc_B48D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000B48D                 mov     esi, [rbx]      ; errnum
.text:000000000000B48F                 lea     rdx, aS_0+2     ; format
.text:000000000000B496                 mov     rcx, rax
.text:000000000000B499                 xor     edi, edi        ; status
.text:000000000000B49B                 xor     eax, eax
.text:000000000000B49D                 call    _error
.text:000000000000B4A2                 jmp     short loc_B482
.text:000000000000B4A2 ; } // starts at B400
.text:000000000000B4A2 close_stdout    endp
.text:000000000000B4A2
.text:000000000000B4A2 ; ---------------------------------------------------------------------------
.text:000000000000B4A4                 align 10h
.text:000000000000B4B0
.text:000000000000B4B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B4B0
.text:000000000000B4B0
.text:000000000000B4B0                 public dir_name
.text:000000000000B4B0 dir_name        proc near               ; CODE XREF: copy_internal+ED3↑p
.text:000000000000B4B0                                         ; same_nameat_part_0+2B↓p ...
.text:000000000000B4B0 ; __unwind {
.text:000000000000B4B0                 sub     rsp, 8
.text:000000000000B4B4                 call    mdir_name
.text:000000000000B4B9                 test    rax, rax
.text:000000000000B4BC                 jz      short loc_B4C3
.text:000000000000B4BE                 add     rsp, 8
.text:000000000000B4C2                 retn
.text:000000000000B4C3 ; ---------------------------------------------------------------------------
.text:000000000000B4C3
.text:000000000000B4C3 loc_B4C3:                               ; CODE XREF: dir_name+C↑j
.text:000000000000B4C3                 call    xalloc_die
.text:000000000000B4C3 ; } // starts at B4B0
.text:000000000000B4C3 dir_name        endp
.text:000000000000B4C3
.text:000000000000B4C3 ; ---------------------------------------------------------------------------
.text:000000000000B4C8                 align 10h
.text:000000000000B4D0
.text:000000000000B4D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B4D0
.text:000000000000B4D0 ; Attributes: info_from_lumina
.text:000000000000B4D0
.text:000000000000B4D0 ; size_t __fastcall dir_len(const char *file)
.text:000000000000B4D0                 public dir_len
.text:000000000000B4D0 dir_len         proc near               ; CODE XREF: make_dir_parents_private+6C↑p
.text:000000000000B4D0                                         ; mdir_name+9↓p
.text:000000000000B4D0 ; __unwind {
.text:000000000000B4D0                 push    rbp
.text:000000000000B4D1                 push    rbx
.text:000000000000B4D2                 xor     ebp, ebp
.text:000000000000B4D4                 mov     rbx, rdi
.text:000000000000B4D7                 sub     rsp, 8
.text:000000000000B4DB                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:000000000000B4DE                 setz    bpl
.text:000000000000B4E2                 call    last_component
.text:000000000000B4E7                 mov     rcx, rax
.text:000000000000B4EA                 sub     rcx, rbx
.text:000000000000B4ED                 cmp     rcx, rbp
.text:000000000000B4F0                 jbe     short loc_B520
.text:000000000000B4F2                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:000000000000B4F6                 lea     rdx, [rcx-1]
.text:000000000000B4FA                 jz      short loc_B50E
.text:000000000000B4FC                 jmp     short loc_B520
.text:000000000000B4FC ; ---------------------------------------------------------------------------
.text:000000000000B4FE                 align 20h
.text:000000000000B500
.text:000000000000B500 loc_B500:                               ; CODE XREF: dir_len+41↓j
.text:000000000000B500                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000B505                 lea     rax, [rdx-1]
.text:000000000000B509                 jnz     short loc_B513
.text:000000000000B50B                 mov     rdx, rax
.text:000000000000B50E
.text:000000000000B50E loc_B50E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000B50E                 cmp     rbp, rdx
.text:000000000000B511                 jnz     short loc_B500
.text:000000000000B513
.text:000000000000B513 loc_B513:                               ; CODE XREF: dir_len+39↑j
.text:000000000000B513                 add     rsp, 8
.text:000000000000B517                 mov     rax, rdx
.text:000000000000B51A                 pop     rbx
.text:000000000000B51B                 pop     rbp
.text:000000000000B51C                 retn
.text:000000000000B51C ; ---------------------------------------------------------------------------
.text:000000000000B51D                 align 20h
.text:000000000000B520
.text:000000000000B520 loc_B520:                               ; CODE XREF: dir_len+20↑j
.text:000000000000B520                                         ; dir_len+2C↑j
.text:000000000000B520                 add     rsp, 8
.text:000000000000B524                 mov     rdx, rcx
.text:000000000000B527                 mov     rax, rdx
.text:000000000000B52A                 pop     rbx
.text:000000000000B52B                 pop     rbp
.text:000000000000B52C                 retn
.text:000000000000B52C ; } // starts at B4D0
.text:000000000000B52C dir_len         endp
.text:000000000000B52C
.text:000000000000B52C ; ---------------------------------------------------------------------------
.text:000000000000B52D                 align 10h
.text:000000000000B530
.text:000000000000B530 ; =============== S U B R O U T I N E =======================================
.text:000000000000B530
.text:000000000000B530 ; Attributes: info_from_lumina
.text:000000000000B530
.text:000000000000B530 ; char *__fastcall mdir_name(const char *file)
.text:000000000000B530                 public mdir_name
.text:000000000000B530 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:000000000000B530 ; __unwind {
.text:000000000000B530                 push    rbp
.text:000000000000B531                 push    rbx
.text:000000000000B532                 mov     rbp, rdi
.text:000000000000B535                 sub     rsp, 8
.text:000000000000B539                 call    dir_len
.text:000000000000B53E                 test    rax, rax
.text:000000000000B541                 mov     rbx, rax
.text:000000000000B544                 setz    al
.text:000000000000B547                 movzx   eax, al
.text:000000000000B54A                 lea     rdi, [rbx+rax+1] ; size
.text:000000000000B54F                 call    _malloc
.text:000000000000B554                 test    rax, rax
.text:000000000000B557                 mov     rcx, rax
.text:000000000000B55A                 jz      short loc_B576
.text:000000000000B55C                 mov     rdx, rbx        ; n
.text:000000000000B55F                 mov     rsi, rbp        ; src
.text:000000000000B562                 mov     rdi, rax        ; dest
.text:000000000000B565                 call    _memcpy
.text:000000000000B56A                 test    rbx, rbx
.text:000000000000B56D                 mov     rcx, rax
.text:000000000000B570                 jz      short loc_B580
.text:000000000000B572
.text:000000000000B572 loc_B572:                               ; CODE XREF: mdir_name+58↓j
.text:000000000000B572                 mov     byte ptr [rcx+rbx], 0
.text:000000000000B576
.text:000000000000B576 loc_B576:                               ; CODE XREF: mdir_name+2A↑j
.text:000000000000B576                 add     rsp, 8
.text:000000000000B57A                 mov     rax, rcx
.text:000000000000B57D                 pop     rbx
.text:000000000000B57E                 pop     rbp
.text:000000000000B57F                 retn
.text:000000000000B580 ; ---------------------------------------------------------------------------
.text:000000000000B580
.text:000000000000B580 loc_B580:                               ; CODE XREF: mdir_name+40↑j
.text:000000000000B580                 mov     byte ptr [rax], 2Eh ; '.'
.text:000000000000B583                 mov     ebx, 1
.text:000000000000B588                 jmp     short loc_B572
.text:000000000000B588 ; } // starts at B530
.text:000000000000B588 mdir_name       endp
.text:000000000000B588
.text:000000000000B588 ; ---------------------------------------------------------------------------
.text:000000000000B58A                 align 10h
.text:000000000000B590
.text:000000000000B590 ; =============== S U B R O U T I N E =======================================
.text:000000000000B590
.text:000000000000B590 ; Attributes: info_from_lumina
.text:000000000000B590
.text:000000000000B590 ; char *__fastcall last_component(const char *name)
.text:000000000000B590                 public last_component
.text:000000000000B590 last_component  proc near               ; CODE XREF: do_copy+28F↑p
.text:000000000000B590                                         ; copy_internal+D03↑p ...
.text:000000000000B590 ; __unwind {
.text:000000000000B590                 movzx   edx, byte ptr [rdi]
.text:000000000000B593                 mov     rax, rdi
.text:000000000000B596                 cmp     dl, 2Fh ; '/'
.text:000000000000B599                 jnz     short loc_B5AC
.text:000000000000B59B                 nop     dword ptr [rax+rax+00h]
.text:000000000000B5A0
.text:000000000000B5A0 loc_B5A0:                               ; CODE XREF: last_component+1A↓j
.text:000000000000B5A0                 add     rax, 1
.text:000000000000B5A4                 movzx   edx, byte ptr [rax]
.text:000000000000B5A7                 cmp     dl, 2Fh ; '/'
.text:000000000000B5AA                 jz      short loc_B5A0
.text:000000000000B5AC
.text:000000000000B5AC loc_B5AC:                               ; CODE XREF: last_component+9↑j
.text:000000000000B5AC                 test    dl, dl
.text:000000000000B5AE                 jz      short locret_B5EA
.text:000000000000B5B0                 mov     rcx, rax
.text:000000000000B5B3                 xor     esi, esi
.text:000000000000B5B5                 jmp     short loc_B5D5
.text:000000000000B5B5 ; ---------------------------------------------------------------------------
.text:000000000000B5B7                 align 20h
.text:000000000000B5C0
.text:000000000000B5C0 loc_B5C0:                               ; CODE XREF: last_component+48↓j
.text:000000000000B5C0                 test    sil, sil
.text:000000000000B5C3                 jz      short loc_B5CA
.text:000000000000B5C5                 mov     rax, rcx
.text:000000000000B5C8                 xor     esi, esi
.text:000000000000B5CA
.text:000000000000B5CA loc_B5CA:                               ; CODE XREF: last_component+33↑j
.text:000000000000B5CA                 add     rcx, 1
.text:000000000000B5CE                 movzx   edx, byte ptr [rcx]
.text:000000000000B5D1                 test    dl, dl
.text:000000000000B5D3                 jz      short locret_B5EA
.text:000000000000B5D5
.text:000000000000B5D5 loc_B5D5:                               ; CODE XREF: last_component+25↑j
.text:000000000000B5D5                                         ; last_component+58↓j
.text:000000000000B5D5                 cmp     dl, 2Fh ; '/'
.text:000000000000B5D8                 jnz     short loc_B5C0
.text:000000000000B5DA                 add     rcx, 1
.text:000000000000B5DE                 movzx   edx, byte ptr [rcx]
.text:000000000000B5E1                 mov     esi, 1
.text:000000000000B5E6                 test    dl, dl
.text:000000000000B5E8                 jnz     short loc_B5D5
.text:000000000000B5EA
.text:000000000000B5EA locret_B5EA:                            ; CODE XREF: last_component+1E↑j
.text:000000000000B5EA                                         ; last_component+43↑j
.text:000000000000B5EA                 rep retn
.text:000000000000B5EA ; } // starts at B590
.text:000000000000B5EA last_component  endp
.text:000000000000B5EA
.text:000000000000B5EA ; ---------------------------------------------------------------------------
.text:000000000000B5EC                 align 10h
.text:000000000000B5F0
.text:000000000000B5F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5F0
.text:000000000000B5F0 ; Attributes: info_from_lumina
.text:000000000000B5F0
.text:000000000000B5F0 ; size_t __fastcall base_len(const char *name)
.text:000000000000B5F0                 public base_len
.text:000000000000B5F0 base_len        proc near               ; CODE XREF: backupfile_internal+ED↑p
.text:000000000000B5F0                                         ; backupfile_internal+41E↑p ...
.text:000000000000B5F0 ; __unwind {
.text:000000000000B5F0                 push    rbx
.text:000000000000B5F1                 mov     rbx, rdi
.text:000000000000B5F4                 call    _strlen
.text:000000000000B5F9                 cmp     rax, 1
.text:000000000000B5FD                 jbe     short loc_B60A
.text:000000000000B5FF                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:000000000000B604                 lea     rdx, [rax-1]
.text:000000000000B608                 jz      short loc_B618
.text:000000000000B60A
.text:000000000000B60A loc_B60A:                               ; CODE XREF: base_len+D↑j
.text:000000000000B60A                 pop     rbx
.text:000000000000B60B                 retn
.text:000000000000B60B ; ---------------------------------------------------------------------------
.text:000000000000B60C                 align 10h
.text:000000000000B610
.text:000000000000B610 loc_B610:                               ; CODE XREF: base_len+37↓j
.text:000000000000B610                 mov     rdx, rax
.text:000000000000B613                 nop     dword ptr [rax+rax+00h]
.text:000000000000B618
.text:000000000000B618 loc_B618:                               ; CODE XREF: base_len+18↑j
.text:000000000000B618                 cmp     rdx, 1
.text:000000000000B61C                 jz      short loc_B630
.text:000000000000B61E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000B623                 lea     rax, [rdx-1]
.text:000000000000B627                 jz      short loc_B610
.text:000000000000B629                 mov     rax, rdx
.text:000000000000B62C                 pop     rbx
.text:000000000000B62D                 retn
.text:000000000000B62D ; ---------------------------------------------------------------------------
.text:000000000000B62E                 align 10h
.text:000000000000B630
.text:000000000000B630 loc_B630:                               ; CODE XREF: base_len+2C↑j
.text:000000000000B630                 mov     eax, 1
.text:000000000000B635                 pop     rbx
.text:000000000000B636                 retn
.text:000000000000B636 ; } // starts at B5F0
.text:000000000000B636 base_len        endp
.text:000000000000B636
.text:000000000000B636 ; ---------------------------------------------------------------------------
.text:000000000000B637                 align 20h
.text:000000000000B640
.text:000000000000B640 ; =============== S U B R O U T I N E =======================================
.text:000000000000B640
.text:000000000000B640
.text:000000000000B640                 public strip_trailing_slashes
.text:000000000000B640 strip_trailing_slashes proc near        ; CODE XREF: do_copy+1DB↑p
.text:000000000000B640                                         ; do_copy+2C5↑p ...
.text:000000000000B640 ; __unwind {
.text:000000000000B640                 push    rbp
.text:000000000000B641                 push    rbx
.text:000000000000B642                 mov     rbp, rdi
.text:000000000000B645                 sub     rsp, 8
.text:000000000000B649                 call    last_component
.text:000000000000B64E                 cmp     byte ptr [rax], 0
.text:000000000000B651                 mov     rbx, rax
.text:000000000000B654                 cmovz   rbx, rbp
.text:000000000000B658                 mov     rdi, rbx
.text:000000000000B65B                 call    base_len
.text:000000000000B660                 add     rbx, rax
.text:000000000000B663                 cmp     byte ptr [rbx], 0
.text:000000000000B666                 mov     byte ptr [rbx], 0
.text:000000000000B669                 setnz   al
.text:000000000000B66C                 add     rsp, 8
.text:000000000000B670                 pop     rbx
.text:000000000000B671                 pop     rbp
.text:000000000000B672                 retn
.text:000000000000B672 ; } // starts at B640
.text:000000000000B672 strip_trailing_slashes endp
.text:000000000000B672
.text:000000000000B672 ; ---------------------------------------------------------------------------
.text:000000000000B673                 align 20h
.text:000000000000B680
.text:000000000000B680 ; =============== S U B R O U T I N E =======================================
.text:000000000000B680
.text:000000000000B680
.text:000000000000B680 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:000000000000B680                 public fdadvise
.text:000000000000B680 fdadvise        proc near               ; CODE XREF: copy_internal+2F57↑p
.text:000000000000B680 ; __unwind {
.text:000000000000B680                 jmp     _posix_fadvise
.text:000000000000B680 ; } // starts at B680
.text:000000000000B680 fdadvise        endp
.text:000000000000B680
.text:000000000000B680 ; ---------------------------------------------------------------------------
.text:000000000000B685                 align 10h
.text:000000000000B690
.text:000000000000B690 ; =============== S U B R O U T I N E =======================================
.text:000000000000B690
.text:000000000000B690
.text:000000000000B690                 public fadvise
.text:000000000000B690 fadvise         proc near
.text:000000000000B690 ; __unwind {
.text:000000000000B690                 test    rdi, rdi
.text:000000000000B693                 jz      short locret_B6B0
.text:000000000000B695                 push    rbx
.text:000000000000B696                 mov     ebx, esi
.text:000000000000B698                 call    _fileno
.text:000000000000B69D                 mov     ecx, ebx        ; advise
.text:000000000000B69F                 xor     edx, edx        ; len
.text:000000000000B6A1                 xor     esi, esi        ; offset
.text:000000000000B6A3                 pop     rbx
.text:000000000000B6A4                 mov     edi, eax        ; fd
.text:000000000000B6A6                 jmp     _posix_fadvise
.text:000000000000B6A6 ; ---------------------------------------------------------------------------
.text:000000000000B6AB                 align 10h
.text:000000000000B6B0
.text:000000000000B6B0 locret_B6B0:                            ; CODE XREF: fadvise+3↑j
.text:000000000000B6B0                 rep retn
.text:000000000000B6B0 ; } // starts at B690
.text:000000000000B6B0 fadvise         endp
.text:000000000000B6B0
.text:000000000000B6B0 ; ---------------------------------------------------------------------------
.text:000000000000B6B2                 align 20h
.text:000000000000B6C0
.text:000000000000B6C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6C0
.text:000000000000B6C0
.text:000000000000B6C0                 public open_safer
.text:000000000000B6C0 open_safer      proc near               ; CODE XREF: copy_internal+20BC↑p
.text:000000000000B6C0                                         ; copy_internal+2E68↑p ...
.text:000000000000B6C0
.text:000000000000B6C0 var_58          = dword ptr -58h
.text:000000000000B6C0 var_50          = qword ptr -50h
.text:000000000000B6C0 var_48          = qword ptr -48h
.text:000000000000B6C0 var_40          = qword ptr -40h
.text:000000000000B6C0 var_38          = byte ptr -38h
.text:000000000000B6C0 var_28          = qword ptr -28h
.text:000000000000B6C0 arg_0           = byte ptr  8
.text:000000000000B6C0
.text:000000000000B6C0 ; __unwind {
.text:000000000000B6C0                 sub     rsp, 58h
.text:000000000000B6C4                 mov     [rsp+58h+var_28], rdx
.text:000000000000B6C9                 xor     edx, edx
.text:000000000000B6CB                 mov     rax, fs:28h
.text:000000000000B6D4                 mov     [rsp+58h+var_40], rax
.text:000000000000B6D9                 xor     eax, eax
.text:000000000000B6DB                 test    sil, 40h
.text:000000000000B6DF                 jnz     short loc_B708
.text:000000000000B6E1
.text:000000000000B6E1 loc_B6E1:                               ; CODE XREF: open_safer+67↓j
.text:000000000000B6E1                 xor     eax, eax
.text:000000000000B6E3                 call    _open
.text:000000000000B6E8                 mov     edi, eax        ; fd
.text:000000000000B6EA                 call    fd_safer_flag
.text:000000000000B6EF                 mov     rcx, [rsp+58h+var_40]
.text:000000000000B6F4                 xor     rcx, fs:28h
.text:000000000000B6FD                 jnz     short loc_B729
.text:000000000000B6FF                 add     rsp, 58h
.text:000000000000B703                 retn
.text:000000000000B703 ; ---------------------------------------------------------------------------
.text:000000000000B704                 align 8
.text:000000000000B708
.text:000000000000B708 loc_B708:                               ; CODE XREF: open_safer+1F↑j
.text:000000000000B708                 lea     rax, [rsp+58h+arg_0]
.text:000000000000B70D                 mov     [rsp+58h+var_58], 10h
.text:000000000000B714                 mov     edx, dword ptr [rsp+58h+var_28]
.text:000000000000B718                 mov     [rsp+58h+var_50], rax
.text:000000000000B71D                 lea     rax, [rsp+58h+var_38]
.text:000000000000B722                 mov     [rsp+58h+var_48], rax
.text:000000000000B727                 jmp     short loc_B6E1
.text:000000000000B729 ; ---------------------------------------------------------------------------
.text:000000000000B729
.text:000000000000B729 loc_B729:                               ; CODE XREF: open_safer+3D↑j
.text:000000000000B729                 call    ___stack_chk_fail
.text:000000000000B729 ; } // starts at B6C0
.text:000000000000B729 open_safer      endp
.text:000000000000B729
.text:000000000000B729 ; ---------------------------------------------------------------------------
.text:000000000000B72E                 align 10h
.text:000000000000B730
.text:000000000000B730 ; =============== S U B R O U T I N E =======================================
.text:000000000000B730
.text:000000000000B730 ; Attributes: info_from_lumina
.text:000000000000B730
.text:000000000000B730 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:000000000000B730                 public record_file
.text:000000000000B730 record_file     proc near               ; CODE XREF: copy_internal+145↑p
.text:000000000000B730                                         ; copy_internal+12BD↑p ...
.text:000000000000B730 ; __unwind {
.text:000000000000B730                 test    rdi, rdi
.text:000000000000B733                 jz      short locret_B7B0
.text:000000000000B735                 push    r13
.text:000000000000B737                 push    r12
.text:000000000000B739                 mov     r13, rdi
.text:000000000000B73C                 push    rbp
.text:000000000000B73D                 push    rbx
.text:000000000000B73E                 mov     r12, rsi
.text:000000000000B741                 mov     edi, 18h
.text:000000000000B746                 mov     rbp, rdx
.text:000000000000B749                 sub     rsp, 8
.text:000000000000B74D                 call    xmalloc
.text:000000000000B752                 mov     rdi, r12        ; src
.text:000000000000B755                 mov     rbx, rax
.text:000000000000B758                 call    xstrdup
.text:000000000000B75D                 mov     [rbx], rax
.text:000000000000B760                 mov     rax, [rbp+8]
.text:000000000000B764                 mov     rsi, rbx
.text:000000000000B767                 mov     rdi, r13
.text:000000000000B76A                 mov     [rbx+8], rax
.text:000000000000B76E                 mov     rax, [rbp+0]
.text:000000000000B772                 mov     [rbx+10h], rax
.text:000000000000B776                 call    hash_insert
.text:000000000000B77B                 test    rax, rax
.text:000000000000B77E                 jz      short loc_B7B2
.text:000000000000B780                 cmp     rbx, rax
.text:000000000000B783                 jz      short loc_B7A0
.text:000000000000B785                 add     rsp, 8
.text:000000000000B789                 mov     rdi, rbx        ; ptr
.text:000000000000B78C                 pop     rbx
.text:000000000000B78D                 pop     rbp
.text:000000000000B78E                 pop     r12
.text:000000000000B790                 pop     r13
.text:000000000000B792                 jmp     triple_free
.text:000000000000B792 ; ---------------------------------------------------------------------------
.text:000000000000B797                 align 20h
.text:000000000000B7A0
.text:000000000000B7A0 loc_B7A0:                               ; CODE XREF: record_file+53↑j
.text:000000000000B7A0                 add     rsp, 8
.text:000000000000B7A4                 pop     rbx
.text:000000000000B7A5                 pop     rbp
.text:000000000000B7A6                 pop     r12
.text:000000000000B7A8                 pop     r13
.text:000000000000B7AA                 retn
.text:000000000000B7AA ; ---------------------------------------------------------------------------
.text:000000000000B7AB                 align 10h
.text:000000000000B7B0
.text:000000000000B7B0 locret_B7B0:                            ; CODE XREF: record_file+3↑j
.text:000000000000B7B0                 rep retn
.text:000000000000B7B2 ; ---------------------------------------------------------------------------
.text:000000000000B7B2
.text:000000000000B7B2 loc_B7B2:                               ; CODE XREF: record_file+4E↑j
.text:000000000000B7B2                 call    xalloc_die
.text:000000000000B7B2 ; } // starts at B730
.text:000000000000B7B2 record_file     endp
.text:000000000000B7B2
.text:000000000000B7B2 ; ---------------------------------------------------------------------------
.text:000000000000B7B7                 align 20h
.text:000000000000B7C0
.text:000000000000B7C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B7C0
.text:000000000000B7C0 ; Attributes: info_from_lumina
.text:000000000000B7C0
.text:000000000000B7C0 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:000000000000B7C0                 public seen_file
.text:000000000000B7C0 seen_file       proc near               ; CODE XREF: copy_internal+3E4↑p
.text:000000000000B7C0                                         ; copy_internal+A59↑p ...
.text:000000000000B7C0
.text:000000000000B7C0 var_28          = qword ptr -28h
.text:000000000000B7C0 var_20          = qword ptr -20h
.text:000000000000B7C0 var_18          = qword ptr -18h
.text:000000000000B7C0 var_10          = qword ptr -10h
.text:000000000000B7C0
.text:000000000000B7C0 ; __unwind {
.text:000000000000B7C0                 sub     rsp, 28h
.text:000000000000B7C4                 mov     rax, fs:28h
.text:000000000000B7CD                 mov     [rsp+28h+var_10], rax
.text:000000000000B7D2                 xor     eax, eax
.text:000000000000B7D4                 test    rdi, rdi
.text:000000000000B7D7                 jz      short loc_B7FC
.text:000000000000B7D9                 mov     rax, [rdx+8]
.text:000000000000B7DD                 mov     [rsp+28h+var_28], rsi
.text:000000000000B7E1                 mov     rsi, rsp
.text:000000000000B7E4                 mov     [rsp+28h+var_20], rax
.text:000000000000B7E9                 mov     rax, [rdx]
.text:000000000000B7EC                 mov     [rsp+28h+var_18], rax
.text:000000000000B7F1                 call    hash_lookup
.text:000000000000B7F6                 test    rax, rax
.text:000000000000B7F9                 setnz   al
.text:000000000000B7FC
.text:000000000000B7FC loc_B7FC:                               ; CODE XREF: seen_file+17↑j
.text:000000000000B7FC                 mov     rcx, [rsp+28h+var_10]
.text:000000000000B801                 xor     rcx, fs:28h
.text:000000000000B80A                 jnz     short loc_B811
.text:000000000000B80C                 add     rsp, 28h
.text:000000000000B810                 retn
.text:000000000000B811 ; ---------------------------------------------------------------------------
.text:000000000000B811
.text:000000000000B811 loc_B811:                               ; CODE XREF: seen_file+4A↑j
.text:000000000000B811                 call    ___stack_chk_fail
.text:000000000000B811 ; } // starts at B7C0
.text:000000000000B811 seen_file       endp
.text:000000000000B811
.text:000000000000B811 ; ---------------------------------------------------------------------------
.text:000000000000B816                 align 20h
.text:000000000000B820
.text:000000000000B820 ; =============== S U B R O U T I N E =======================================
.text:000000000000B820
.text:000000000000B820 ; Attributes: info_from_lumina
.text:000000000000B820
.text:000000000000B820 ; void __fastcall strmode(mode_t mode, char *str)
.text:000000000000B820                 public strmode
.text:000000000000B820 strmode         proc near               ; CODE XREF: overwrite_ok_isra_12+42↑p
.text:000000000000B820                                         ; filemodestring+3↓j
.text:000000000000B820 ; __unwind {
.text:000000000000B820                 mov     edx, edi
.text:000000000000B822                 mov     eax, 2Dh ; '-'
.text:000000000000B827                 and     edx, 0F000h
.text:000000000000B82D                 cmp     edx, 8000h
.text:000000000000B833                 jz      short loc_B890
.text:000000000000B835                 cmp     edx, 4000h
.text:000000000000B83B                 mov     eax, 64h ; 'd'
.text:000000000000B840                 jz      short loc_B890
.text:000000000000B842                 cmp     edx, 6000h
.text:000000000000B848                 mov     eax, 62h ; 'b'
.text:000000000000B84D                 jz      short loc_B890
.text:000000000000B84F                 cmp     edx, 2000h
.text:000000000000B855                 mov     eax, 63h ; 'c'
.text:000000000000B85A                 jz      short loc_B890
.text:000000000000B85C                 cmp     edx, 0A000h
.text:000000000000B862                 mov     eax, 6Ch ; 'l'
.text:000000000000B867                 jz      short loc_B890
.text:000000000000B869                 cmp     edx, 1000h
.text:000000000000B86F                 mov     eax, 70h ; 'p'
.text:000000000000B874                 jz      short loc_B890
.text:000000000000B876                 cmp     edx, 0C000h
.text:000000000000B87C                 mov     eax, 73h ; 's'
.text:000000000000B881                 mov     edx, 3Fh ; '?'
.text:000000000000B886                 cmovnz  eax, edx
.text:000000000000B889                 nop     dword ptr [rax+00000000h]
.text:000000000000B890
.text:000000000000B890 loc_B890:                               ; CODE XREF: strmode+13↑j
.text:000000000000B890                                         ; strmode+20↑j ...
.text:000000000000B890                 mov     [rsi], al
.text:000000000000B892                 mov     eax, edi
.text:000000000000B894                 and     eax, 100h
.text:000000000000B899                 cmp     eax, 1
.text:000000000000B89C                 sbb     eax, eax
.text:000000000000B89E                 and     eax, 0FFFFFFBBh
.text:000000000000B8A1                 add     eax, 72h ; 'r'
.text:000000000000B8A4                 mov     [rsi+1], al
.text:000000000000B8A7                 mov     eax, edi
.text:000000000000B8A9                 and     eax, 80h
.text:000000000000B8AE                 cmp     eax, 1
.text:000000000000B8B1                 sbb     eax, eax
.text:000000000000B8B3                 and     eax, 0FFFFFFB6h
.text:000000000000B8B6                 add     eax, 77h ; 'w'
.text:000000000000B8B9                 mov     [rsi+2], al
.text:000000000000B8BC                 mov     eax, edi
.text:000000000000B8BE                 and     eax, 40h
.text:000000000000B8C1                 cmp     eax, 1
.text:000000000000B8C4                 sbb     eax, eax
.text:000000000000B8C6                 test    edi, 800h
.text:000000000000B8CC                 jz      loc_B970
.text:000000000000B8D2                 and     eax, 0FFFFFFE0h
.text:000000000000B8D5                 add     eax, 73h ; 's'
.text:000000000000B8D8
.text:000000000000B8D8 loc_B8D8:                               ; CODE XREF: strmode+156↓j
.text:000000000000B8D8                 mov     [rsi+3], al
.text:000000000000B8DB                 mov     eax, edi
.text:000000000000B8DD                 and     eax, 20h
.text:000000000000B8E0                 cmp     eax, 1
.text:000000000000B8E3                 sbb     eax, eax
.text:000000000000B8E5                 and     eax, 0FFFFFFBBh
.text:000000000000B8E8                 add     eax, 72h ; 'r'
.text:000000000000B8EB                 mov     [rsi+4], al
.text:000000000000B8EE                 mov     eax, edi
.text:000000000000B8F0                 and     eax, 10h
.text:000000000000B8F3                 cmp     eax, 1
.text:000000000000B8F6                 sbb     eax, eax
.text:000000000000B8F8                 and     eax, 0FFFFFFB6h
.text:000000000000B8FB                 add     eax, 77h ; 'w'
.text:000000000000B8FE                 mov     [rsi+5], al
.text:000000000000B901                 mov     eax, edi
.text:000000000000B903                 and     eax, 8
.text:000000000000B906                 cmp     eax, 1
.text:000000000000B909                 sbb     eax, eax
.text:000000000000B90B                 test    edi, 400h
.text:000000000000B911                 jz      loc_B998
.text:000000000000B917                 and     eax, 0FFFFFFE0h
.text:000000000000B91A                 add     eax, 73h ; 's'
.text:000000000000B91D
.text:000000000000B91D loc_B91D:                               ; CODE XREF: strmode+17E↓j
.text:000000000000B91D                 mov     [rsi+6], al
.text:000000000000B920                 mov     eax, edi
.text:000000000000B922                 and     eax, 4
.text:000000000000B925                 cmp     eax, 1
.text:000000000000B928                 sbb     eax, eax
.text:000000000000B92A                 and     eax, 0FFFFFFBBh
.text:000000000000B92D                 add     eax, 72h ; 'r'
.text:000000000000B930                 mov     [rsi+7], al
.text:000000000000B933                 mov     eax, edi
.text:000000000000B935                 and     eax, 2
.text:000000000000B938                 cmp     eax, 1
.text:000000000000B93B                 sbb     eax, eax
.text:000000000000B93D                 and     eax, 0FFFFFFB6h
.text:000000000000B940                 add     eax, 77h ; 'w'
.text:000000000000B943                 mov     [rsi+8], al
.text:000000000000B946                 mov     eax, edi
.text:000000000000B948                 and     eax, 1
.text:000000000000B94B                 cmp     eax, 1
.text:000000000000B94E                 sbb     eax, eax
.text:000000000000B950                 and     edi, 200h
.text:000000000000B956                 jz      short loc_B980
.text:000000000000B958                 and     eax, 0FFFFFFE0h
.text:000000000000B95B                 add     eax, 74h ; 't'
.text:000000000000B95E                 mov     [rsi+9], al
.text:000000000000B961                 mov     eax, 20h ; ' '
.text:000000000000B966                 mov     [rsi+0Ah], ax
.text:000000000000B96A                 retn
.text:000000000000B96A ; ---------------------------------------------------------------------------
.text:000000000000B96B                 align 10h
.text:000000000000B970
.text:000000000000B970 loc_B970:                               ; CODE XREF: strmode+AC↑j
.text:000000000000B970                 and     eax, 0FFFFFFB5h
.text:000000000000B973                 add     eax, 78h ; 'x'
.text:000000000000B976                 jmp     loc_B8D8
.text:000000000000B976 ; ---------------------------------------------------------------------------
.text:000000000000B97B                 align 20h
.text:000000000000B980
.text:000000000000B980 loc_B980:                               ; CODE XREF: strmode+136↑j
.text:000000000000B980                 and     eax, 0FFFFFFB5h
.text:000000000000B983                 add     eax, 78h ; 'x'
.text:000000000000B986                 mov     [rsi+9], al
.text:000000000000B989                 mov     eax, 20h ; ' '
.text:000000000000B98E                 mov     [rsi+0Ah], ax
.text:000000000000B992                 retn
.text:000000000000B992 ; ---------------------------------------------------------------------------
.text:000000000000B993                 align 8
.text:000000000000B998
.text:000000000000B998 loc_B998:                               ; CODE XREF: strmode+F1↑j
.text:000000000000B998                 and     eax, 0FFFFFFB5h
.text:000000000000B99B                 add     eax, 78h ; 'x'
.text:000000000000B99E                 jmp     loc_B91D
.text:000000000000B99E ; } // starts at B820
.text:000000000000B99E strmode         endp
.text:000000000000B99E
.text:000000000000B99E ; ---------------------------------------------------------------------------
.text:000000000000B9A3                 align 10h
.text:000000000000B9B0
.text:000000000000B9B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B9B0
.text:000000000000B9B0
.text:000000000000B9B0                 public filemodestring
.text:000000000000B9B0 filemodestring  proc near
.text:000000000000B9B0 ; __unwind {
.text:000000000000B9B0                 mov     edi, [rdi+18h]
.text:000000000000B9B3                 jmp     strmode
.text:000000000000B9B3 ; } // starts at B9B0
.text:000000000000B9B3 filemodestring  endp
.text:000000000000B9B3
.text:000000000000B9B3 ; ---------------------------------------------------------------------------
.text:000000000000B9B8                 align 20h
.text:000000000000B9C0
.text:000000000000B9C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B9C0
.text:000000000000B9C0
.text:000000000000B9C0                 public file_name_concat
.text:000000000000B9C0 file_name_concat proc near              ; CODE XREF: do_copy+1F1↑p
.text:000000000000B9C0                                         ; do_copy+39C↑p ...
.text:000000000000B9C0 ; __unwind {
.text:000000000000B9C0                 sub     rsp, 8
.text:000000000000B9C4                 call    mfile_name_concat
.text:000000000000B9C9                 test    rax, rax
.text:000000000000B9CC                 jz      short loc_B9D3
.text:000000000000B9CE                 add     rsp, 8
.text:000000000000B9D2                 retn
.text:000000000000B9D3 ; ---------------------------------------------------------------------------
.text:000000000000B9D3
.text:000000000000B9D3 loc_B9D3:                               ; CODE XREF: file_name_concat+C↑j
.text:000000000000B9D3                 call    xalloc_die
.text:000000000000B9D3 ; } // starts at B9C0
.text:000000000000B9D3 file_name_concat endp
.text:000000000000B9D3
.text:000000000000B9D3 ; ---------------------------------------------------------------------------
.text:000000000000B9D8                 align 20h
.text:000000000000B9E0
.text:000000000000B9E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B9E0
.text:000000000000B9E0
.text:000000000000B9E0 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:000000000000B9E0                 public mfile_name_concat
.text:000000000000B9E0 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:000000000000B9E0
.text:000000000000B9E0 var_48          = qword ptr -48h
.text:000000000000B9E0 var_39          = byte ptr -39h
.text:000000000000B9E0
.text:000000000000B9E0 ; __unwind {
.text:000000000000B9E0                 push    r15
.text:000000000000B9E2                 push    r14
.text:000000000000B9E4                 mov     r15, rdx
.text:000000000000B9E7                 push    r13
.text:000000000000B9E9                 push    r12
.text:000000000000B9EB                 mov     r12, rdi
.text:000000000000B9EE                 push    rbp
.text:000000000000B9EF                 push    rbx
.text:000000000000B9F0                 mov     rbp, rsi
.text:000000000000B9F3                 sub     rsp, 18h
.text:000000000000B9F7                 call    last_component
.text:000000000000B9FC                 mov     rbx, rax
.text:000000000000B9FF                 mov     rdi, rax
.text:000000000000BA02                 call    base_len
.text:000000000000BA07                 sub     rbx, r12
.text:000000000000BA0A                 mov     r13, rax
.text:000000000000BA0D                 mov     rdi, rbp        ; s
.text:000000000000BA10                 add     rbx, rax
.text:000000000000BA13                 call    _strlen
.text:000000000000BA18                 test    r13, r13
.text:000000000000BA1B                 mov     r14, rax
.text:000000000000BA1E                 jz      short loc_BA50
.text:000000000000BA20                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:000000000000BA26                 jz      loc_BAD0
.text:000000000000BA2C                 xor     eax, eax
.text:000000000000BA2E                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000BA32                 mov     edx, 0
.text:000000000000BA37                 setnz   al
.text:000000000000BA3A                 mov     [rsp+48h+var_48], rax
.text:000000000000BA3E                 mov     eax, 2Fh ; '/'
.text:000000000000BA43                 cmovz   eax, edx
.text:000000000000BA46                 mov     [rsp+48h+var_39], al
.text:000000000000BA4A                 jmp     short loc_BA6E
.text:000000000000BA4A ; ---------------------------------------------------------------------------
.text:000000000000BA4C                 align 10h
.text:000000000000BA50
.text:000000000000BA50 loc_BA50:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:000000000000BA50                 xor     eax, eax
.text:000000000000BA52                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000BA56                 mov     edx, 0
.text:000000000000BA5B                 setz    al
.text:000000000000BA5E                 mov     [rsp+48h+var_48], rax
.text:000000000000BA62                 mov     eax, 2Eh ; '.'
.text:000000000000BA67                 cmovnz  eax, edx
.text:000000000000BA6A                 mov     [rsp+48h+var_39], al
.text:000000000000BA6E
.text:000000000000BA6E loc_BA6E:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:000000000000BA6E                                         ; mfile_name_concat+FD↓j
.text:000000000000BA6E                 lea     rdi, [rbx+r14+1]
.text:000000000000BA73                 add     rdi, [rsp+48h+var_48] ; size
.text:000000000000BA77                 call    _malloc
.text:000000000000BA7C                 test    rax, rax
.text:000000000000BA7F                 mov     r13, rax
.text:000000000000BA82                 jz      short loc_BAB6
.text:000000000000BA84                 mov     rdi, rax        ; dest
.text:000000000000BA87                 mov     rdx, rbx        ; n
.text:000000000000BA8A                 mov     rsi, r12        ; src
.text:000000000000BA8D                 call    _mempcpy
.text:000000000000BA92                 movzx   ecx, [rsp+48h+var_39]
.text:000000000000BA97                 mov     rdi, [rsp+48h+var_48]
.text:000000000000BA9B                 add     rdi, rax        ; dest
.text:000000000000BA9E                 test    r15, r15
.text:000000000000BAA1                 mov     [rax], cl
.text:000000000000BAA3                 jz      short loc_BAA8
.text:000000000000BAA5                 mov     [r15], rdi
.text:000000000000BAA8
.text:000000000000BAA8 loc_BAA8:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:000000000000BAA8                 mov     rdx, r14        ; n
.text:000000000000BAAB                 mov     rsi, rbp        ; src
.text:000000000000BAAE                 call    _mempcpy
.text:000000000000BAB3                 mov     byte ptr [rax], 0
.text:000000000000BAB6
.text:000000000000BAB6 loc_BAB6:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:000000000000BAB6                 add     rsp, 18h
.text:000000000000BABA                 mov     rax, r13
.text:000000000000BABD                 pop     rbx
.text:000000000000BABE                 pop     rbp
.text:000000000000BABF                 pop     r12
.text:000000000000BAC1                 pop     r13
.text:000000000000BAC3                 pop     r14
.text:000000000000BAC5                 pop     r15
.text:000000000000BAC7                 retn
.text:000000000000BAC7 ; ---------------------------------------------------------------------------
.text:000000000000BAC8                 align 10h
.text:000000000000BAD0
.text:000000000000BAD0 loc_BAD0:                               ; CODE XREF: mfile_name_concat+46↑j
.text:000000000000BAD0                 mov     [rsp+48h+var_48], 0
.text:000000000000BAD8                 mov     [rsp+48h+var_39], 0
.text:000000000000BADD                 jmp     short loc_BA6E
.text:000000000000BADD ; } // starts at B9E0
.text:000000000000BADD mfile_name_concat endp
.text:000000000000BADD
.text:000000000000BADD ; ---------------------------------------------------------------------------
.text:000000000000BADF                 align 20h
.text:000000000000BAE0
.text:000000000000BAE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BAE0
.text:000000000000BAE0
.text:000000000000BAE0 ; __int64 __fastcall full_write(int fd, void *buf, size_t n)
.text:000000000000BAE0                 public full_write
.text:000000000000BAE0 full_write      proc near               ; CODE XREF: write_zeros+44↑p
.text:000000000000BAE0                                         ; sparse_copy+206↑p
.text:000000000000BAE0 ; __unwind {
.text:000000000000BAE0                 push    r13
.text:000000000000BAE2                 push    r12
.text:000000000000BAE4                 push    rbp
.text:000000000000BAE5                 push    rbx
.text:000000000000BAE6                 sub     rsp, 8
.text:000000000000BAEA                 test    rdx, rdx
.text:000000000000BAED                 jz      short loc_BB51
.text:000000000000BAEF                 mov     r13d, edi
.text:000000000000BAF2                 mov     rbp, rsi
.text:000000000000BAF5                 mov     rbx, rdx
.text:000000000000BAF8                 xor     r12d, r12d
.text:000000000000BAFB                 jmp     short loc_BB10
.text:000000000000BAFB ; ---------------------------------------------------------------------------
.text:000000000000BAFD                 align 20h
.text:000000000000BB00
.text:000000000000BB00 loc_BB00:                               ; CODE XREF: full_write+42↓j
.text:000000000000BB00                 test    rax, rax
.text:000000000000BB03                 jz      short loc_BB38
.text:000000000000BB05                 add     r12, rax
.text:000000000000BB08                 add     rbp, rax
.text:000000000000BB0B                 sub     rbx, rax
.text:000000000000BB0E                 jz      short loc_BB24
.text:000000000000BB10
.text:000000000000BB10 loc_BB10:                               ; CODE XREF: full_write+1B↑j
.text:000000000000BB10                 mov     rdx, rbx        ; n
.text:000000000000BB13                 mov     rsi, rbp        ; buf
.text:000000000000BB16                 mov     edi, r13d       ; fd
.text:000000000000BB19                 call    safe_write
.text:000000000000BB1E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BB22                 jnz     short loc_BB00
.text:000000000000BB24
.text:000000000000BB24 loc_BB24:                               ; CODE XREF: full_write+2E↑j
.text:000000000000BB24                                         ; full_write+74↓j
.text:000000000000BB24                 add     rsp, 8
.text:000000000000BB28                 mov     rax, r12
.text:000000000000BB2B                 pop     rbx
.text:000000000000BB2C                 pop     rbp
.text:000000000000BB2D                 pop     r12
.text:000000000000BB2F                 pop     r13
.text:000000000000BB31                 retn
.text:000000000000BB31 ; ---------------------------------------------------------------------------
.text:000000000000BB32                 align 8
.text:000000000000BB38
.text:000000000000BB38 loc_BB38:                               ; CODE XREF: full_write+23↑j
.text:000000000000BB38                 call    ___errno_location
.text:000000000000BB3D                 mov     dword ptr [rax], 1Ch
.text:000000000000BB43                 add     rsp, 8
.text:000000000000BB47                 mov     rax, r12
.text:000000000000BB4A                 pop     rbx
.text:000000000000BB4B                 pop     rbp
.text:000000000000BB4C                 pop     r12
.text:000000000000BB4E                 pop     r13
.text:000000000000BB50                 retn
.text:000000000000BB51 ; ---------------------------------------------------------------------------
.text:000000000000BB51
.text:000000000000BB51 loc_BB51:                               ; CODE XREF: full_write+D↑j
.text:000000000000BB51                 xor     r12d, r12d
.text:000000000000BB54                 jmp     short loc_BB24
.text:000000000000BB54 ; } // starts at BAE0
.text:000000000000BB54 full_write      endp
.text:000000000000BB54
.text:000000000000BB54 ; ---------------------------------------------------------------------------
.text:000000000000BB56                 align 20h
.text:000000000000BB60
.text:000000000000BB60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BB60
.text:000000000000BB60 ; Attributes: info_from_lumina
.text:000000000000BB60
.text:000000000000BB60 ; size_t __fastcall next_prime(size_t candidate)
.text:000000000000BB60 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:000000000000BB60                                         ; hash_rehash+7B↓p
.text:000000000000BB60 ; __unwind {
.text:000000000000BB60                 cmp     rdi, 0Ah
.text:000000000000BB64                 mov     eax, 0Ah
.text:000000000000BB69                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:000000000000BB73                 cmovb   rdi, rax
.text:000000000000BB77                 or      rdi, 1
.text:000000000000BB7B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000BB7F                 jz      short loc_BBEF
.text:000000000000BB81                 nop     dword ptr [rax+00000000h]
.text:000000000000BB88
.text:000000000000BB88 loc_BB88:                               ; CODE XREF: next_prime+8D↓j
.text:000000000000BB88                 mov     rax, rdi
.text:000000000000BB8B                 mov     rcx, rdi
.text:000000000000BB8E                 mul     r9
.text:000000000000BB91                 mov     rax, rdx
.text:000000000000BB94                 shr     rax, 1
.text:000000000000BB97                 lea     rax, [rax+rax*2]
.text:000000000000BB9B                 sub     rcx, rax
.text:000000000000BB9E                 cmp     rdi, 9
.text:000000000000BBA2                 mov     rax, rcx
.text:000000000000BBA5                 jbe     short loc_BBE0
.text:000000000000BBA7                 test    rcx, rcx
.text:000000000000BBAA                 jz      short loc_BBE5
.text:000000000000BBAC                 mov     r8d, 10h
.text:000000000000BBB2                 mov     esi, 9
.text:000000000000BBB7                 mov     ecx, 3
.text:000000000000BBBC                 jmp     short loc_BBC9
.text:000000000000BBBC ; ---------------------------------------------------------------------------
.text:000000000000BBBE                 align 20h
.text:000000000000BBC0
.text:000000000000BBC0 loc_BBC0:                               ; CODE XREF: next_prime+7E↓j
.text:000000000000BBC0                 add     r8, 8
.text:000000000000BBC4                 test    rdx, rdx
.text:000000000000BBC7                 jz      short loc_BBE5
.text:000000000000BBC9
.text:000000000000BBC9 loc_BBC9:                               ; CODE XREF: next_prime+5C↑j
.text:000000000000BBC9                 add     rcx, 2
.text:000000000000BBCD                 xor     edx, edx
.text:000000000000BBCF                 mov     rax, rdi
.text:000000000000BBD2                 div     rcx
.text:000000000000BBD5                 add     rsi, r8
.text:000000000000BBD8                 cmp     rsi, rdi
.text:000000000000BBDB                 mov     rax, rdx
.text:000000000000BBDE                 jb      short loc_BBC0
.text:000000000000BBE0
.text:000000000000BBE0 loc_BBE0:                               ; CODE XREF: next_prime+45↑j
.text:000000000000BBE0                 test    rax, rax
.text:000000000000BBE3                 jnz     short loc_BBEF
.text:000000000000BBE5
.text:000000000000BBE5 loc_BBE5:                               ; CODE XREF: next_prime+4A↑j
.text:000000000000BBE5                                         ; next_prime+67↑j
.text:000000000000BBE5                 add     rdi, 2
.text:000000000000BBE9                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000BBED                 jnz     short loc_BB88
.text:000000000000BBEF
.text:000000000000BBEF loc_BBEF:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000BBEF                                         ; next_prime+83↑j
.text:000000000000BBEF                 mov     rax, rdi
.text:000000000000BBF2                 retn
.text:000000000000BBF2 ; } // starts at BB60
.text:000000000000BBF2 next_prime      endp
.text:000000000000BBF2
.text:000000000000BBF2 ; ---------------------------------------------------------------------------
.text:000000000000BBF3                 align 20h
.text:000000000000BC00
.text:000000000000BC00 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC00
.text:000000000000BC00
.text:000000000000BC00 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:000000000000BC00 ; __unwind {
.text:000000000000BC00                 mov     rax, rdi
.text:000000000000BC03                 xor     edx, edx
.text:000000000000BC05                 ror     rax, 3
.text:000000000000BC09                 div     rsi
.text:000000000000BC0C                 mov     rax, rdx
.text:000000000000BC0F                 retn
.text:000000000000BC0F ; } // starts at BC00
.text:000000000000BC0F raw_hasher      endp
.text:000000000000BC0F
.text:000000000000BC10
.text:000000000000BC10 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC10
.text:000000000000BC10
.text:000000000000BC10 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:000000000000BC10 ; __unwind {
.text:000000000000BC10                 cmp     rdi, rsi
.text:000000000000BC13                 setz    al
.text:000000000000BC16                 retn
.text:000000000000BC16 ; } // starts at BC10
.text:000000000000BC16 raw_comparator  endp
.text:000000000000BC16
.text:000000000000BC16 ; ---------------------------------------------------------------------------
.text:000000000000BC17                 align 20h
.text:000000000000BC20
.text:000000000000BC20 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC20
.text:000000000000BC20 ; Attributes: info_from_lumina
.text:000000000000BC20
.text:000000000000BC20 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:000000000000BC20 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:000000000000BC20                                         ; transfer_entries+65↓p ...
.text:000000000000BC20 ; __unwind {
.text:000000000000BC20                 push    rbx
.text:000000000000BC21                 mov     rbx, rdi
.text:000000000000BC24                 mov     rdi, rsi
.text:000000000000BC27                 mov     rsi, [rbx+10h]
.text:000000000000BC2B                 call    qword ptr [rbx+30h]
.text:000000000000BC2E                 cmp     [rbx+10h], rax
.text:000000000000BC32                 jbe     short loc_BC3D
.text:000000000000BC34                 shl     rax, 4
.text:000000000000BC38                 add     rax, [rbx]
.text:000000000000BC3B                 pop     rbx
.text:000000000000BC3C                 retn
.text:000000000000BC3D ; ---------------------------------------------------------------------------
.text:000000000000BC3D
.text:000000000000BC3D loc_BC3D:                               ; CODE XREF: safe_hasher+12↑j
.text:000000000000BC3D                 call    _abort
.text:000000000000BC3D ; } // starts at BC20
.text:000000000000BC3D safe_hasher     endp
.text:000000000000BC3D
.text:000000000000BC3D ; ---------------------------------------------------------------------------
.text:000000000000BC42                 align 10h
.text:000000000000BC50
.text:000000000000BC50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC50
.text:000000000000BC50 ; Attributes: info_from_lumina
.text:000000000000BC50
.text:000000000000BC50 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:000000000000BC50 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:000000000000BC50                                         ; hash_insert_if_absent+1CF↓p ...
.text:000000000000BC50 ; __unwind {
.text:000000000000BC50                 push    r14
.text:000000000000BC52                 push    r13
.text:000000000000BC54                 mov     r14, rdx
.text:000000000000BC57                 push    r12
.text:000000000000BC59                 push    rbp
.text:000000000000BC5A                 mov     r12, rdi
.text:000000000000BC5D                 push    rbx
.text:000000000000BC5E                 mov     rbp, rsi
.text:000000000000BC61                 mov     r13d, ecx
.text:000000000000BC64                 call    safe_hasher
.text:000000000000BC69                 mov     [r14], rax
.text:000000000000BC6C                 mov     rsi, [rax]
.text:000000000000BC6F                 test    rsi, rsi
.text:000000000000BC72                 jz      loc_BD60
.text:000000000000BC78                 cmp     rsi, rbp
.text:000000000000BC7B                 mov     rbx, rax
.text:000000000000BC7E                 jz      loc_BD13
.text:000000000000BC84                 mov     rdi, rbp
.text:000000000000BC87                 call    qword ptr [r12+38h]
.text:000000000000BC8C                 test    al, al
.text:000000000000BC8E                 jnz     loc_BD10
.text:000000000000BC94                 mov     rax, [rbx+8]
.text:000000000000BC98                 test    rax, rax
.text:000000000000BC9B                 jz      loc_BD60
.text:000000000000BCA1                 mov     rsi, [rax]
.text:000000000000BCA4                 cmp     rbp, rsi
.text:000000000000BCA7                 jnz     short loc_BCC9
.text:000000000000BCA9                 jmp     short loc_BCDC
.text:000000000000BCA9 ; ---------------------------------------------------------------------------
.text:000000000000BCAB                 align 10h
.text:000000000000BCB0
.text:000000000000BCB0 loc_BCB0:                               ; CODE XREF: hash_find_entry+83↓j
.text:000000000000BCB0                 mov     rbx, [rbx+8]
.text:000000000000BCB4                 mov     rax, [rbx+8]
.text:000000000000BCB8                 test    rax, rax
.text:000000000000BCBB                 jz      loc_BD60
.text:000000000000BCC1                 mov     rsi, [rax]
.text:000000000000BCC4                 cmp     rsi, rbp
.text:000000000000BCC7                 jz      short loc_BCDC
.text:000000000000BCC9
.text:000000000000BCC9 loc_BCC9:                               ; CODE XREF: hash_find_entry+57↑j
.text:000000000000BCC9                 mov     rdi, rbp
.text:000000000000BCCC                 call    qword ptr [r12+38h]
.text:000000000000BCD1                 test    al, al
.text:000000000000BCD3                 jz      short loc_BCB0
.text:000000000000BCD5                 mov     rax, [rbx+8]
.text:000000000000BCD9                 mov     rsi, [rax]
.text:000000000000BCDC
.text:000000000000BCDC loc_BCDC:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000BCDC                                         ; hash_find_entry+77↑j
.text:000000000000BCDC                 test    r13b, r13b
.text:000000000000BCDF                 jz      short loc_BCFE
.text:000000000000BCE1                 mov     rdx, [rax+8]
.text:000000000000BCE5                 mov     [rbx+8], rdx
.text:000000000000BCE9                 mov     qword ptr [rax], 0
.text:000000000000BCF0                 mov     rdx, [r12+48h]
.text:000000000000BCF5                 mov     [rax+8], rdx
.text:000000000000BCF9                 mov     [r12+48h], rax
.text:000000000000BCFE
.text:000000000000BCFE loc_BCFE:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000BCFE                                         ; hash_find_entry+C6↓j ...
.text:000000000000BCFE                 pop     rbx
.text:000000000000BCFF                 mov     rax, rsi
.text:000000000000BD02                 pop     rbp
.text:000000000000BD03                 pop     r12
.text:000000000000BD05                 pop     r13
.text:000000000000BD07                 pop     r14
.text:000000000000BD09                 retn
.text:000000000000BD09 ; ---------------------------------------------------------------------------
.text:000000000000BD0A                 align 10h
.text:000000000000BD10
.text:000000000000BD10 loc_BD10:                               ; CODE XREF: hash_find_entry+3E↑j
.text:000000000000BD10                 mov     rsi, [rbx]
.text:000000000000BD13
.text:000000000000BD13 loc_BD13:                               ; CODE XREF: hash_find_entry+2E↑j
.text:000000000000BD13                 test    r13b, r13b
.text:000000000000BD16                 jz      short loc_BCFE
.text:000000000000BD18                 mov     rax, [rbx+8]
.text:000000000000BD1C                 test    rax, rax
.text:000000000000BD1F                 jz      short loc_BD50
.text:000000000000BD21                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000BD25                 movups  xmmword ptr [rbx], xmm0
.text:000000000000BD28                 mov     qword ptr [rax], 0
.text:000000000000BD2F                 mov     rdx, [r12+48h]
.text:000000000000BD34                 mov     [rax+8], rdx
.text:000000000000BD38                 mov     [r12+48h], rax
.text:000000000000BD3D                 mov     rax, rsi
.text:000000000000BD40                 pop     rbx
.text:000000000000BD41                 pop     rbp
.text:000000000000BD42                 pop     r12
.text:000000000000BD44                 pop     r13
.text:000000000000BD46                 pop     r14
.text:000000000000BD48                 retn
.text:000000000000BD48 ; ---------------------------------------------------------------------------
.text:000000000000BD49                 align 10h
.text:000000000000BD50
.text:000000000000BD50 loc_BD50:                               ; CODE XREF: hash_find_entry+CF↑j
.text:000000000000BD50                 mov     qword ptr [rbx], 0
.text:000000000000BD57                 jmp     short loc_BCFE
.text:000000000000BD57 ; ---------------------------------------------------------------------------
.text:000000000000BD59                 align 20h
.text:000000000000BD60
.text:000000000000BD60 loc_BD60:                               ; CODE XREF: hash_find_entry+22↑j
.text:000000000000BD60                                         ; hash_find_entry+4B↑j ...
.text:000000000000BD60                 xor     esi, esi
.text:000000000000BD62                 pop     rbx
.text:000000000000BD63                 mov     rax, rsi
.text:000000000000BD66                 pop     rbp
.text:000000000000BD67                 pop     r12
.text:000000000000BD69                 pop     r13
.text:000000000000BD6B                 pop     r14
.text:000000000000BD6D                 retn
.text:000000000000BD6D ; } // starts at BC50
.text:000000000000BD6D hash_find_entry endp
.text:000000000000BD6D
.text:000000000000BD6D ; ---------------------------------------------------------------------------
.text:000000000000BD6E                 align 10h
.text:000000000000BD70
.text:000000000000BD70 ; =============== S U B R O U T I N E =======================================
.text:000000000000BD70
.text:000000000000BD70 ; Attributes: info_from_lumina
.text:000000000000BD70
.text:000000000000BD70 ; _Bool check_tuning(Hash_table *table)
.text:000000000000BD70 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:000000000000BD70                                         ; hash_initialize+11B↓p ...
.text:000000000000BD70 ; __unwind {
.text:000000000000BD70                 mov     rdx, [rdi]
.text:000000000000BD73                 lea     rcx, default_tuning
.text:000000000000BD7A                 mov     eax, 1
.text:000000000000BD7F                 cmp     rdx, rcx
.text:000000000000BD82                 jz      short locret_BDE5
.text:000000000000BD84                 movss   xmm0, dword ptr [rdx+8]
.text:000000000000BD89                 ucomiss xmm0, cs:dword_152B4
.text:000000000000BD90                 jbe     short loc_BDE0
.text:000000000000BD92                 movss   xmm1, cs:dword_152B8
.text:000000000000BD9A                 ucomiss xmm1, xmm0
.text:000000000000BD9D                 jbe     short loc_BDE0
.text:000000000000BD9F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:000000000000BDA4                 ucomiss xmm1, cs:dword_152BC
.text:000000000000BDAB                 jbe     short loc_BDE0
.text:000000000000BDAD                 movss   xmm1, dword ptr [rdx]
.text:000000000000BDB1                 ucomiss xmm1, cs:dword_152C0
.text:000000000000BDB8                 jb      short loc_BDE0
.text:000000000000BDBA                 addss   xmm1, cs:dword_152B4
.text:000000000000BDC2                 movss   xmm2, dword ptr [rdx+4]
.text:000000000000BDC7                 ucomiss xmm2, xmm1
.text:000000000000BDCA                 jbe     short loc_BDE0
.text:000000000000BDCC                 movss   xmm3, cs:dword_152C4
.text:000000000000BDD4                 ucomiss xmm3, xmm2
.text:000000000000BDD7                 jb      short loc_BDE0
.text:000000000000BDD9                 ucomiss xmm0, xmm1
.text:000000000000BDDC                 ja      short locret_BDE5
.text:000000000000BDDE                 xchg    ax, ax
.text:000000000000BDE0
.text:000000000000BDE0 loc_BDE0:                               ; CODE XREF: check_tuning+20↑j
.text:000000000000BDE0                                         ; check_tuning+2D↑j ...
.text:000000000000BDE0                 mov     [rdi], rcx
.text:000000000000BDE3                 xor     eax, eax
.text:000000000000BDE5
.text:000000000000BDE5 locret_BDE5:                            ; CODE XREF: check_tuning+12↑j
.text:000000000000BDE5                                         ; check_tuning+6C↑j
.text:000000000000BDE5                 rep retn
.text:000000000000BDE5 ; } // starts at BD70
.text:000000000000BDE5 check_tuning    endp
.text:000000000000BDE5
.text:000000000000BDE5 ; ---------------------------------------------------------------------------
.text:000000000000BDE7                 align 10h
.text:000000000000BDF0
.text:000000000000BDF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDF0
.text:000000000000BDF0 ; Attributes: info_from_lumina
.text:000000000000BDF0
.text:000000000000BDF0 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:000000000000BDF0 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:000000000000BDF0                                         ; hash_rehash+152↓p ...
.text:000000000000BDF0 ; __unwind {
.text:000000000000BDF0                 push    r15
.text:000000000000BDF2                 push    r14
.text:000000000000BDF4                 push    r13
.text:000000000000BDF6                 push    r12
.text:000000000000BDF8                 push    rbp
.text:000000000000BDF9                 push    rbx
.text:000000000000BDFA                 sub     rsp, 8
.text:000000000000BDFE                 mov     r12, [rsi]
.text:000000000000BE01                 cmp     r12, [rsi+8]
.text:000000000000BE05                 jnb     loc_BEE8
.text:000000000000BE0B                 mov     rbp, rdi
.text:000000000000BE0E                 mov     r13, rsi
.text:000000000000BE11                 mov     r14d, edx
.text:000000000000BE14                 nop     dword ptr [rax+00h]
.text:000000000000BE18
.text:000000000000BE18 loc_BE18:                               ; CODE XREF: transfer_entries+F2↓j
.text:000000000000BE18                 mov     r15, [r12]
.text:000000000000BE1C                 test    r15, r15
.text:000000000000BE1F                 jz      loc_BEDA
.text:000000000000BE25                 mov     rbx, [r12+8]
.text:000000000000BE2A                 test    rbx, rbx
.text:000000000000BE2D                 jnz     short loc_BE4C
.text:000000000000BE2F                 jmp     short loc_BE8B
.text:000000000000BE2F ; ---------------------------------------------------------------------------
.text:000000000000BE31                 align 8
.text:000000000000BE38
.text:000000000000BE38 loc_BE38:                               ; CODE XREF: transfer_entries+72↓j
.text:000000000000BE38                 mov     rcx, [rax+8]
.text:000000000000BE3C                 test    rdx, rdx
.text:000000000000BE3F                 mov     [rbx+8], rcx
.text:000000000000BE43                 mov     [rax+8], rbx
.text:000000000000BE47                 mov     rbx, rdx
.text:000000000000BE4A                 jz      short loc_BE87
.text:000000000000BE4C
.text:000000000000BE4C loc_BE4C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000BE4C                                         ; transfer_entries+95↓j
.text:000000000000BE4C                 mov     r15, [rbx]
.text:000000000000BE4F                 mov     rdi, rbp
.text:000000000000BE52                 mov     rsi, r15
.text:000000000000BE55                 call    safe_hasher
.text:000000000000BE5A                 cmp     qword ptr [rax], 0
.text:000000000000BE5E                 mov     rdx, [rbx+8]
.text:000000000000BE62                 jnz     short loc_BE38
.text:000000000000BE64                 mov     [rax], r15
.text:000000000000BE67                 add     qword ptr [rbp+18h], 1
.text:000000000000BE6C                 test    rdx, rdx
.text:000000000000BE6F                 mov     qword ptr [rbx], 0
.text:000000000000BE76                 mov     rax, [rbp+48h]
.text:000000000000BE7A                 mov     [rbx+8], rax
.text:000000000000BE7E                 mov     [rbp+48h], rbx
.text:000000000000BE82                 mov     rbx, rdx
.text:000000000000BE85                 jnz     short loc_BE4C
.text:000000000000BE87
.text:000000000000BE87 loc_BE87:                               ; CODE XREF: transfer_entries+5A↑j
.text:000000000000BE87                 mov     r15, [r12]
.text:000000000000BE8B
.text:000000000000BE8B loc_BE8B:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000BE8B                 test    r14b, r14b
.text:000000000000BE8E                 mov     qword ptr [r12+8], 0
.text:000000000000BE97                 jnz     short loc_BEDA
.text:000000000000BE99                 mov     rsi, r15
.text:000000000000BE9C                 mov     rdi, rbp
.text:000000000000BE9F                 call    safe_hasher
.text:000000000000BEA4                 cmp     qword ptr [rax], 0
.text:000000000000BEA8                 mov     rbx, rax
.text:000000000000BEAB                 jz      short loc_BF00
.text:000000000000BEAD                 mov     rax, [rbp+48h]
.text:000000000000BEB1                 test    rax, rax
.text:000000000000BEB4                 jz      short loc_BF10
.text:000000000000BEB6                 mov     rdx, [rax+8]
.text:000000000000BEBA                 mov     [rbp+48h], rdx
.text:000000000000BEBE
.text:000000000000BEBE loc_BEBE:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000BEBE                 mov     rdx, [rbx+8]
.text:000000000000BEC2                 mov     [rax], r15
.text:000000000000BEC5                 mov     [rax+8], rdx
.text:000000000000BEC9                 mov     [rbx+8], rax
.text:000000000000BECD
.text:000000000000BECD loc_BECD:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000BECD                 mov     qword ptr [r12], 0
.text:000000000000BED5                 sub     qword ptr [r13+18h], 1
.text:000000000000BEDA
.text:000000000000BEDA loc_BEDA:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000BEDA                                         ; transfer_entries+A7↑j
.text:000000000000BEDA                 add     r12, 10h
.text:000000000000BEDE                 cmp     [r13+8], r12
.text:000000000000BEE2                 ja      loc_BE18
.text:000000000000BEE8
.text:000000000000BEE8 loc_BEE8:                               ; CODE XREF: transfer_entries+15↑j
.text:000000000000BEE8                 add     rsp, 8
.text:000000000000BEEC                 mov     eax, 1
.text:000000000000BEF1                 pop     rbx
.text:000000000000BEF2                 pop     rbp
.text:000000000000BEF3                 pop     r12
.text:000000000000BEF5                 pop     r13
.text:000000000000BEF7                 pop     r14
.text:000000000000BEF9                 pop     r15
.text:000000000000BEFB                 retn
.text:000000000000BEFB ; ---------------------------------------------------------------------------
.text:000000000000BEFC                 align 20h
.text:000000000000BF00
.text:000000000000BF00 loc_BF00:                               ; CODE XREF: transfer_entries+BB↑j
.text:000000000000BF00                 mov     [rax], r15
.text:000000000000BF03                 add     qword ptr [rbp+18h], 1
.text:000000000000BF08                 jmp     short loc_BECD
.text:000000000000BF08 ; ---------------------------------------------------------------------------
.text:000000000000BF0A                 align 10h
.text:000000000000BF10
.text:000000000000BF10 loc_BF10:                               ; CODE XREF: transfer_entries+C4↑j
.text:000000000000BF10                 mov     edi, 10h        ; size
.text:000000000000BF15                 call    _malloc
.text:000000000000BF1A                 test    rax, rax
.text:000000000000BF1D                 jnz     short loc_BEBE
.text:000000000000BF1F                 add     rsp, 8
.text:000000000000BF23                 xor     eax, eax
.text:000000000000BF25                 pop     rbx
.text:000000000000BF26                 pop     rbp
.text:000000000000BF27                 pop     r12
.text:000000000000BF29                 pop     r13
.text:000000000000BF2B                 pop     r14
.text:000000000000BF2D                 pop     r15
.text:000000000000BF2F                 retn
.text:000000000000BF2F ; } // starts at BDF0
.text:000000000000BF2F transfer_entries endp
.text:000000000000BF2F
.text:000000000000BF30
.text:000000000000BF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF30
.text:000000000000BF30
.text:000000000000BF30                 public hash_get_n_buckets
.text:000000000000BF30 hash_get_n_buckets proc near
.text:000000000000BF30 ; __unwind {
.text:000000000000BF30                 mov     rax, [rdi+10h]
.text:000000000000BF34                 retn
.text:000000000000BF34 ; } // starts at BF30
.text:000000000000BF34 hash_get_n_buckets endp
.text:000000000000BF34
.text:000000000000BF34 ; ---------------------------------------------------------------------------
.text:000000000000BF35                 align 20h
.text:000000000000BF40
.text:000000000000BF40 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF40
.text:000000000000BF40
.text:000000000000BF40                 public hash_get_n_buckets_used
.text:000000000000BF40 hash_get_n_buckets_used proc near
.text:000000000000BF40 ; __unwind {
.text:000000000000BF40                 mov     rax, [rdi+18h]
.text:000000000000BF44                 retn
.text:000000000000BF44 ; } // starts at BF40
.text:000000000000BF44 hash_get_n_buckets_used endp
.text:000000000000BF44
.text:000000000000BF44 ; ---------------------------------------------------------------------------
.text:000000000000BF45                 align 10h
.text:000000000000BF50
.text:000000000000BF50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF50
.text:000000000000BF50
.text:000000000000BF50                 public hash_get_n_entries
.text:000000000000BF50 hash_get_n_entries proc near
.text:000000000000BF50 ; __unwind {
.text:000000000000BF50                 mov     rax, [rdi+20h]
.text:000000000000BF54                 retn
.text:000000000000BF54 ; } // starts at BF50
.text:000000000000BF54 hash_get_n_entries endp
.text:000000000000BF54
.text:000000000000BF54 ; ---------------------------------------------------------------------------
.text:000000000000BF55                 align 20h
.text:000000000000BF60
.text:000000000000BF60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF60
.text:000000000000BF60 ; Attributes: info_from_lumina
.text:000000000000BF60
.text:000000000000BF60 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:000000000000BF60                 public hash_get_max_bucket_length
.text:000000000000BF60 hash_get_max_bucket_length proc near
.text:000000000000BF60 ; __unwind {
.text:000000000000BF60                 mov     rsi, [rdi]
.text:000000000000BF63                 mov     rdi, [rdi+8]
.text:000000000000BF67                 xor     eax, eax
.text:000000000000BF69                 cmp     rsi, rdi
.text:000000000000BF6C                 jnb     short locret_BFA7
.text:000000000000BF6E                 xchg    ax, ax
.text:000000000000BF70
.text:000000000000BF70 loc_BF70:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:000000000000BF70                 cmp     qword ptr [rsi], 0
.text:000000000000BF74                 jz      short loc_BF9C
.text:000000000000BF76                 mov     rdx, [rsi+8]
.text:000000000000BF7A                 mov     ecx, 1
.text:000000000000BF7F                 test    rdx, rdx
.text:000000000000BF82                 jz      short loc_BF95
.text:000000000000BF84                 nop     dword ptr [rax+00h]
.text:000000000000BF88
.text:000000000000BF88 loc_BF88:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:000000000000BF88                 mov     rdx, [rdx+8]
.text:000000000000BF8C                 add     rcx, 1
.text:000000000000BF90                 test    rdx, rdx
.text:000000000000BF93                 jnz     short loc_BF88
.text:000000000000BF95
.text:000000000000BF95 loc_BF95:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:000000000000BF95                 cmp     rax, rcx
.text:000000000000BF98                 cmovb   rax, rcx
.text:000000000000BF9C
.text:000000000000BF9C loc_BF9C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000BF9C                 add     rsi, 10h
.text:000000000000BFA0                 cmp     rsi, rdi
.text:000000000000BFA3                 jb      short loc_BF70
.text:000000000000BFA5                 rep retn
.text:000000000000BFA7 ; ---------------------------------------------------------------------------
.text:000000000000BFA7
.text:000000000000BFA7 locret_BFA7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:000000000000BFA7                 rep retn
.text:000000000000BFA7 ; } // starts at BF60
.text:000000000000BFA7 hash_get_max_bucket_length endp
.text:000000000000BFA7
.text:000000000000BFA7 ; ---------------------------------------------------------------------------
.text:000000000000BFA9                 align 10h
.text:000000000000BFB0
.text:000000000000BFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFB0
.text:000000000000BFB0 ; Attributes: info_from_lumina
.text:000000000000BFB0
.text:000000000000BFB0 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:000000000000BFB0                 public hash_table_ok
.text:000000000000BFB0 hash_table_ok   proc near
.text:000000000000BFB0 ; __unwind {
.text:000000000000BFB0                 mov     rcx, [rdi]
.text:000000000000BFB3                 mov     r8, [rdi+8]
.text:000000000000BFB7                 xor     edx, edx
.text:000000000000BFB9                 xor     esi, esi
.text:000000000000BFBB                 cmp     rcx, r8
.text:000000000000BFBE                 jnb     short loc_BFF6
.text:000000000000BFC0
.text:000000000000BFC0 loc_BFC0:                               ; CODE XREF: hash_table_ok+44↓j
.text:000000000000BFC0                 cmp     qword ptr [rcx], 0
.text:000000000000BFC4                 jz      short loc_BFED
.text:000000000000BFC6                 mov     rax, [rcx+8]
.text:000000000000BFCA                 add     rsi, 1
.text:000000000000BFCE                 add     rdx, 1
.text:000000000000BFD2                 test    rax, rax
.text:000000000000BFD5                 jz      short loc_BFED
.text:000000000000BFD7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BFE0
.text:000000000000BFE0 loc_BFE0:                               ; CODE XREF: hash_table_ok+3B↓j
.text:000000000000BFE0                 mov     rax, [rax+8]
.text:000000000000BFE4                 add     rdx, 1
.text:000000000000BFE8                 test    rax, rax
.text:000000000000BFEB                 jnz     short loc_BFE0
.text:000000000000BFED
.text:000000000000BFED loc_BFED:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000BFED                                         ; hash_table_ok+25↑j
.text:000000000000BFED                 add     rcx, 10h
.text:000000000000BFF1                 cmp     rcx, r8
.text:000000000000BFF4                 jb      short loc_BFC0
.text:000000000000BFF6
.text:000000000000BFF6 loc_BFF6:                               ; CODE XREF: hash_table_ok+E↑j
.text:000000000000BFF6                 xor     eax, eax
.text:000000000000BFF8                 cmp     [rdi+18h], rsi
.text:000000000000BFFC                 jz      short loc_C000
.text:000000000000BFFE                 rep retn
.text:000000000000C000 ; ---------------------------------------------------------------------------
.text:000000000000C000
.text:000000000000C000 loc_C000:                               ; CODE XREF: hash_table_ok+4C↑j
.text:000000000000C000                 cmp     [rdi+20h], rdx
.text:000000000000C004                 setz    al
.text:000000000000C007                 retn
.text:000000000000C007 ; } // starts at BFB0
.text:000000000000C007 hash_table_ok   endp
.text:000000000000C007
.text:000000000000C007 ; ---------------------------------------------------------------------------
.text:000000000000C008                 align 10h
.text:000000000000C010
.text:000000000000C010 ; =============== S U B R O U T I N E =======================================
.text:000000000000C010
.text:000000000000C010 ; Attributes: info_from_lumina
.text:000000000000C010
.text:000000000000C010 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:000000000000C010                 public hash_print_statistics
.text:000000000000C010 hash_print_statistics proc near
.text:000000000000C010 ; __unwind {
.text:000000000000C010                 push    r13
.text:000000000000C012                 push    r12
.text:000000000000C014                 mov     r12, rsi
.text:000000000000C017                 push    rbp
.text:000000000000C018                 push    rbx
.text:000000000000C019                 xor     ebx, ebx
.text:000000000000C01B                 sub     rsp, 8
.text:000000000000C01F                 mov     rsi, [rdi]
.text:000000000000C022                 mov     rcx, [rdi+20h]
.text:000000000000C026                 mov     rbp, [rdi+10h]
.text:000000000000C02A                 mov     r13, [rdi+18h]
.text:000000000000C02E                 mov     rdi, [rdi+8]
.text:000000000000C032                 cmp     rsi, rdi
.text:000000000000C035                 jnb     short loc_C075
.text:000000000000C037                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C040
.text:000000000000C040 loc_C040:                               ; CODE XREF: hash_print_statistics+63↓j
.text:000000000000C040                 cmp     qword ptr [rsi], 0
.text:000000000000C044                 jz      short loc_C06C
.text:000000000000C046                 mov     rax, [rsi+8]
.text:000000000000C04A                 mov     edx, 1
.text:000000000000C04F                 test    rax, rax
.text:000000000000C052                 jz      short loc_C065
.text:000000000000C054                 nop     dword ptr [rax+00h]
.text:000000000000C058
.text:000000000000C058 loc_C058:                               ; CODE XREF: hash_print_statistics+53↓j
.text:000000000000C058                 mov     rax, [rax+8]
.text:000000000000C05C                 add     rdx, 1
.text:000000000000C060                 test    rax, rax
.text:000000000000C063                 jnz     short loc_C058
.text:000000000000C065
.text:000000000000C065 loc_C065:                               ; CODE XREF: hash_print_statistics+42↑j
.text:000000000000C065                 cmp     rbx, rdx
.text:000000000000C068                 cmovb   rbx, rdx
.text:000000000000C06C
.text:000000000000C06C loc_C06C:                               ; CODE XREF: hash_print_statistics+34↑j
.text:000000000000C06C                 add     rsi, 10h
.text:000000000000C070                 cmp     rsi, rdi
.text:000000000000C073                 jb      short loc_C040
.text:000000000000C075
.text:000000000000C075 loc_C075:                               ; CODE XREF: hash_print_statistics+25↑j
.text:000000000000C075                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000C07C                 mov     esi, 1
.text:000000000000C081                 mov     rdi, r12
.text:000000000000C084                 xor     eax, eax
.text:000000000000C086                 call    ___fprintf_chk
.text:000000000000C08B                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:000000000000C092                 xor     eax, eax
.text:000000000000C094                 mov     rcx, rbp
.text:000000000000C097                 mov     esi, 1
.text:000000000000C09C                 mov     rdi, r12
.text:000000000000C09F                 call    ___fprintf_chk
.text:000000000000C0A4                 test    r13, r13
.text:000000000000C0A7                 js      short loc_C110
.text:000000000000C0A9                 pxor    xmm0, xmm0
.text:000000000000C0AD                 test    rbp, rbp
.text:000000000000C0B0                 cvtsi2sd xmm0, r13
.text:000000000000C0B5                 mulsd   xmm0, cs:qword_152D8
.text:000000000000C0BD                 js      short loc_C139
.text:000000000000C0BF
.text:000000000000C0BF loc_C0BF:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000C0BF                 pxor    xmm1, xmm1
.text:000000000000C0C3                 cvtsi2sd xmm1, rbp
.text:000000000000C0C8
.text:000000000000C0C8 loc_C0C8:                               ; CODE XREF: hash_print_statistics+142↓j
.text:000000000000C0C8                 divsd   xmm0, xmm1
.text:000000000000C0CC                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:000000000000C0D3                 mov     rcx, r13
.text:000000000000C0D6                 mov     rdi, r12
.text:000000000000C0D9                 mov     esi, 1
.text:000000000000C0DE                 mov     eax, 1
.text:000000000000C0E3                 call    ___fprintf_chk
.text:000000000000C0E8                 add     rsp, 8
.text:000000000000C0EC                 mov     rcx, rbx
.text:000000000000C0EF                 mov     rdi, r12
.text:000000000000C0F2                 pop     rbx
.text:000000000000C0F3                 pop     rbp
.text:000000000000C0F4                 pop     r12
.text:000000000000C0F6                 pop     r13
.text:000000000000C0F8                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000C0FF                 mov     esi, 1
.text:000000000000C104                 xor     eax, eax
.text:000000000000C106                 jmp     ___fprintf_chk
.text:000000000000C106 ; ---------------------------------------------------------------------------
.text:000000000000C10B                 align 10h
.text:000000000000C110
.text:000000000000C110 loc_C110:                               ; CODE XREF: hash_print_statistics+97↑j
.text:000000000000C110                 mov     rax, r13
.text:000000000000C113                 mov     rdx, r13
.text:000000000000C116                 pxor    xmm0, xmm0
.text:000000000000C11A                 shr     rax, 1
.text:000000000000C11D                 and     edx, 1
.text:000000000000C120                 or      rax, rdx
.text:000000000000C123                 test    rbp, rbp
.text:000000000000C126                 cvtsi2sd xmm0, rax
.text:000000000000C12B                 addsd   xmm0, xmm0
.text:000000000000C12F                 mulsd   xmm0, cs:qword_152D8
.text:000000000000C137                 jns     short loc_C0BF
.text:000000000000C139
.text:000000000000C139 loc_C139:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:000000000000C139                 mov     rax, rbp
.text:000000000000C13C                 pxor    xmm1, xmm1
.text:000000000000C140                 shr     rax, 1
.text:000000000000C143                 and     ebp, 1
.text:000000000000C146                 or      rax, rbp
.text:000000000000C149                 cvtsi2sd xmm1, rax
.text:000000000000C14E                 addsd   xmm1, xmm1
.text:000000000000C152                 jmp     loc_C0C8
.text:000000000000C152 ; } // starts at C010
.text:000000000000C152 hash_print_statistics endp
.text:000000000000C152
.text:000000000000C152 ; ---------------------------------------------------------------------------
.text:000000000000C157                 align 20h
.text:000000000000C160
.text:000000000000C160 ; =============== S U B R O U T I N E =======================================
.text:000000000000C160
.text:000000000000C160 ; Attributes: info_from_lumina
.text:000000000000C160
.text:000000000000C160 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:000000000000C160                 public hash_lookup
.text:000000000000C160 hash_lookup     proc near               ; CODE XREF: src_to_dest_lookup+27↑p
.text:000000000000C160                                         ; seen_file+31↑p ...
.text:000000000000C160 ; __unwind {
.text:000000000000C160                 push    r12
.text:000000000000C162                 push    rbp
.text:000000000000C163                 mov     r12, rdi
.text:000000000000C166                 push    rbx
.text:000000000000C167                 mov     rbp, rsi
.text:000000000000C16A                 call    safe_hasher
.text:000000000000C16F                 mov     rsi, [rax]
.text:000000000000C172                 test    rsi, rsi
.text:000000000000C175                 jz      short loc_C19D
.text:000000000000C177                 mov     rbx, rax
.text:000000000000C17A                 jmp     short loc_C183
.text:000000000000C17A ; ---------------------------------------------------------------------------
.text:000000000000C17C                 align 20h
.text:000000000000C180
.text:000000000000C180 loc_C180:                               ; CODE XREF: hash_lookup+3B↓j
.text:000000000000C180                 mov     rsi, [rbx]
.text:000000000000C183
.text:000000000000C183 loc_C183:                               ; CODE XREF: hash_lookup+1A↑j
.text:000000000000C183                 cmp     rsi, rbp
.text:000000000000C186                 jz      short loc_C19F
.text:000000000000C188                 mov     rdi, rbp
.text:000000000000C18B                 call    qword ptr [r12+38h]
.text:000000000000C190                 test    al, al
.text:000000000000C192                 jnz     short loc_C1B0
.text:000000000000C194                 mov     rbx, [rbx+8]
.text:000000000000C198                 test    rbx, rbx
.text:000000000000C19B                 jnz     short loc_C180
.text:000000000000C19D
.text:000000000000C19D loc_C19D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000C19D                 xor     esi, esi
.text:000000000000C19F
.text:000000000000C19F loc_C19F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000C19F                 pop     rbx
.text:000000000000C1A0                 mov     rax, rsi
.text:000000000000C1A3                 pop     rbp
.text:000000000000C1A4                 pop     r12
.text:000000000000C1A6                 retn
.text:000000000000C1A6 ; ---------------------------------------------------------------------------
.text:000000000000C1A7                 align 10h
.text:000000000000C1B0
.text:000000000000C1B0 loc_C1B0:                               ; CODE XREF: hash_lookup+32↑j
.text:000000000000C1B0                 mov     rsi, [rbx]
.text:000000000000C1B3                 pop     rbx
.text:000000000000C1B4                 pop     rbp
.text:000000000000C1B5                 mov     rax, rsi
.text:000000000000C1B8                 pop     r12
.text:000000000000C1BA                 retn
.text:000000000000C1BA ; } // starts at C160
.text:000000000000C1BA hash_lookup     endp
.text:000000000000C1BA
.text:000000000000C1BA ; ---------------------------------------------------------------------------
.text:000000000000C1BB                 align 20h
.text:000000000000C1C0
.text:000000000000C1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C1C0
.text:000000000000C1C0 ; Attributes: info_from_lumina
.text:000000000000C1C0
.text:000000000000C1C0 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:000000000000C1C0                 public hash_get_first
.text:000000000000C1C0 hash_get_first  proc near
.text:000000000000C1C0 ; __unwind {
.text:000000000000C1C0                 cmp     qword ptr [rdi+20h], 0
.text:000000000000C1C5                 jz      short loc_C1F3
.text:000000000000C1C7                 mov     rdx, [rdi]
.text:000000000000C1CA                 mov     rcx, [rdi+8]
.text:000000000000C1CE                 cmp     rdx, rcx
.text:000000000000C1D1                 jnb     short loc_C1F8
.text:000000000000C1D3                 mov     rax, [rdx]
.text:000000000000C1D6                 test    rax, rax
.text:000000000000C1D9                 jnz     short locret_C1F6
.text:000000000000C1DB                 nop     dword ptr [rax+rax+00h]
.text:000000000000C1E0
.text:000000000000C1E0 loc_C1E0:                               ; CODE XREF: hash_get_first+2F↓j
.text:000000000000C1E0                 add     rdx, 10h
.text:000000000000C1E4                 cmp     rdx, rcx
.text:000000000000C1E7                 jnb     short loc_C1F8
.text:000000000000C1E9                 mov     rax, [rdx]
.text:000000000000C1EC                 test    rax, rax
.text:000000000000C1EF                 jz      short loc_C1E0
.text:000000000000C1F1                 rep retn
.text:000000000000C1F3 ; ---------------------------------------------------------------------------
.text:000000000000C1F3
.text:000000000000C1F3 loc_C1F3:                               ; CODE XREF: hash_get_first+5↑j
.text:000000000000C1F3                 xor     eax, eax
.text:000000000000C1F5                 retn
.text:000000000000C1F6 ; ---------------------------------------------------------------------------
.text:000000000000C1F6
.text:000000000000C1F6 locret_C1F6:                            ; CODE XREF: hash_get_first+19↑j
.text:000000000000C1F6                 rep retn
.text:000000000000C1F8 ; ---------------------------------------------------------------------------
.text:000000000000C1F8
.text:000000000000C1F8 loc_C1F8:                               ; CODE XREF: hash_get_first+11↑j
.text:000000000000C1F8                                         ; hash_get_first+27↑j
.text:000000000000C1F8                 sub     rsp, 8
.text:000000000000C1FC                 call    _abort
.text:000000000000C1FC ; } // starts at C1C0
.text:000000000000C1FC hash_get_first  endp
.text:000000000000C1FC
.text:000000000000C1FC ; ---------------------------------------------------------------------------
.text:000000000000C201                 align 10h
.text:000000000000C210
.text:000000000000C210 ; =============== S U B R O U T I N E =======================================
.text:000000000000C210
.text:000000000000C210 ; Attributes: info_from_lumina
.text:000000000000C210
.text:000000000000C210 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:000000000000C210                 public hash_get_next
.text:000000000000C210 hash_get_next   proc near
.text:000000000000C210 ; __unwind {
.text:000000000000C210                 push    rbp
.text:000000000000C211                 push    rbx
.text:000000000000C212                 mov     rbp, rdi
.text:000000000000C215                 mov     rbx, rsi
.text:000000000000C218                 sub     rsp, 8
.text:000000000000C21C                 call    safe_hasher
.text:000000000000C221                 mov     rdx, rax
.text:000000000000C224                 mov     rcx, rax
.text:000000000000C227                 mov     rax, [rdx]
.text:000000000000C22A                 mov     rdx, [rdx+8]
.text:000000000000C22E                 cmp     rax, rbx
.text:000000000000C231                 jz      short loc_C249
.text:000000000000C233                 nop     dword ptr [rax+rax+00h]
.text:000000000000C238
.text:000000000000C238 loc_C238:                               ; CODE XREF: hash_get_next+37↓j
.text:000000000000C238                 test    rdx, rdx
.text:000000000000C23B                 jz      short loc_C24E
.text:000000000000C23D                 mov     rax, [rdx]
.text:000000000000C240                 mov     rdx, [rdx+8]
.text:000000000000C244                 cmp     rax, rbx
.text:000000000000C247                 jnz     short loc_C238
.text:000000000000C249
.text:000000000000C249 loc_C249:                               ; CODE XREF: hash_get_next+21↑j
.text:000000000000C249                 test    rdx, rdx
.text:000000000000C24C                 jnz     short loc_C278
.text:000000000000C24E
.text:000000000000C24E loc_C24E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000C24E                 mov     rdx, [rbp+8]
.text:000000000000C252                 jmp     short loc_C260
.text:000000000000C252 ; ---------------------------------------------------------------------------
.text:000000000000C254                 align 8
.text:000000000000C258
.text:000000000000C258 loc_C258:                               ; CODE XREF: hash_get_next+57↓j
.text:000000000000C258                 mov     rax, [rcx]
.text:000000000000C25B                 test    rax, rax
.text:000000000000C25E                 jnz     short loc_C26B
.text:000000000000C260
.text:000000000000C260 loc_C260:                               ; CODE XREF: hash_get_next+42↑j
.text:000000000000C260                 add     rcx, 10h
.text:000000000000C264                 cmp     rdx, rcx
.text:000000000000C267                 ja      short loc_C258
.text:000000000000C269                 xor     eax, eax
.text:000000000000C26B
.text:000000000000C26B loc_C26B:                               ; CODE XREF: hash_get_next+4E↑j
.text:000000000000C26B                 add     rsp, 8
.text:000000000000C26F                 pop     rbx
.text:000000000000C270                 pop     rbp
.text:000000000000C271                 retn
.text:000000000000C271 ; ---------------------------------------------------------------------------
.text:000000000000C272                 align 8
.text:000000000000C278
.text:000000000000C278 loc_C278:                               ; CODE XREF: hash_get_next+3C↑j
.text:000000000000C278                 mov     rax, [rdx]
.text:000000000000C27B                 add     rsp, 8
.text:000000000000C27F                 pop     rbx
.text:000000000000C280                 pop     rbp
.text:000000000000C281                 retn
.text:000000000000C281 ; } // starts at C210
.text:000000000000C281 hash_get_next   endp
.text:000000000000C281
.text:000000000000C281 ; ---------------------------------------------------------------------------
.text:000000000000C282                 align 10h
.text:000000000000C290
.text:000000000000C290 ; =============== S U B R O U T I N E =======================================
.text:000000000000C290
.text:000000000000C290 ; Attributes: info_from_lumina
.text:000000000000C290
.text:000000000000C290 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:000000000000C290                 public hash_get_entries
.text:000000000000C290 hash_get_entries proc near
.text:000000000000C290 ; __unwind {
.text:000000000000C290                 mov     r9, [rdi]
.text:000000000000C293                 cmp     [rdi+8], r9
.text:000000000000C297                 jbe     short loc_C2F2
.text:000000000000C299                 xor     r8d, r8d
.text:000000000000C29C
.text:000000000000C29C loc_C29C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000C29C                 mov     rcx, [r9]
.text:000000000000C29F                 test    rcx, rcx
.text:000000000000C2A2                 jz      short loc_C2DD
.text:000000000000C2A4                 cmp     rdx, r8
.text:000000000000C2A7                 jbe     short loc_C2E7
.text:000000000000C2A9                 mov     [rsi+r8*8], rcx
.text:000000000000C2AD                 mov     rcx, [r9+8]
.text:000000000000C2B1                 lea     rax, [r8+1]
.text:000000000000C2B5                 test    rcx, rcx
.text:000000000000C2B8                 jz      short loc_C2DA
.text:000000000000C2BA                 nop     word ptr [rax+rax+00h]
.text:000000000000C2C0
.text:000000000000C2C0 loc_C2C0:                               ; CODE XREF: hash_get_entries+48↓j
.text:000000000000C2C0                 cmp     rdx, rax
.text:000000000000C2C3                 jz      short locret_C2F0
.text:000000000000C2C5                 mov     r8, [rcx]
.text:000000000000C2C8                 add     rax, 1
.text:000000000000C2CC                 mov     [rsi+rax*8-8], r8
.text:000000000000C2D1                 mov     rcx, [rcx+8]
.text:000000000000C2D5                 test    rcx, rcx
.text:000000000000C2D8                 jnz     short loc_C2C0
.text:000000000000C2DA
.text:000000000000C2DA loc_C2DA:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000C2DA                 mov     r8, rax
.text:000000000000C2DD
.text:000000000000C2DD loc_C2DD:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000C2DD                 add     r9, 10h
.text:000000000000C2E1                 cmp     [rdi+8], r9
.text:000000000000C2E5                 ja      short loc_C29C
.text:000000000000C2E7
.text:000000000000C2E7 loc_C2E7:                               ; CODE XREF: hash_get_entries+17↑j
.text:000000000000C2E7                 mov     rax, r8
.text:000000000000C2EA                 retn
.text:000000000000C2EA ; ---------------------------------------------------------------------------
.text:000000000000C2EB                 align 10h
.text:000000000000C2F0
.text:000000000000C2F0 locret_C2F0:                            ; CODE XREF: hash_get_entries+33↑j
.text:000000000000C2F0                 rep retn
.text:000000000000C2F2 ; ---------------------------------------------------------------------------
.text:000000000000C2F2
.text:000000000000C2F2 loc_C2F2:                               ; CODE XREF: hash_get_entries+7↑j
.text:000000000000C2F2                 xor     eax, eax
.text:000000000000C2F4                 retn
.text:000000000000C2F4 ; } // starts at C290
.text:000000000000C2F4 hash_get_entries endp
.text:000000000000C2F4
.text:000000000000C2F4 ; ---------------------------------------------------------------------------
.text:000000000000C2F5                 align 20h
.text:000000000000C300
.text:000000000000C300 ; =============== S U B R O U T I N E =======================================
.text:000000000000C300
.text:000000000000C300 ; Attributes: info_from_lumina
.text:000000000000C300
.text:000000000000C300 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:000000000000C300                 public hash_do_for_each
.text:000000000000C300 hash_do_for_each proc near
.text:000000000000C300 ; __unwind {
.text:000000000000C300                 push    r15
.text:000000000000C302                 push    r14
.text:000000000000C304                 push    r13
.text:000000000000C306                 push    r12
.text:000000000000C308                 push    rbp
.text:000000000000C309                 push    rbx
.text:000000000000C30A                 sub     rsp, 8
.text:000000000000C30E                 mov     r14, [rdi]
.text:000000000000C311                 cmp     [rdi+8], r14
.text:000000000000C315                 jbe     short loc_C366
.text:000000000000C317                 mov     r13, rdx
.text:000000000000C31A                 mov     r12, rsi
.text:000000000000C31D                 mov     r15, rdi
.text:000000000000C320                 xor     ebp, ebp
.text:000000000000C322
.text:000000000000C322 loc_C322:                               ; CODE XREF: hash_do_for_each+52↓j
.text:000000000000C322                 mov     rdi, [r14]
.text:000000000000C325                 test    rdi, rdi
.text:000000000000C328                 jz      short loc_C34A
.text:000000000000C32A                 mov     rbx, r14
.text:000000000000C32D                 jmp     short loc_C333
.text:000000000000C32D ; ---------------------------------------------------------------------------
.text:000000000000C32F                 align 10h
.text:000000000000C330
.text:000000000000C330 loc_C330:                               ; CODE XREF: hash_do_for_each+48↓j
.text:000000000000C330                 mov     rdi, [rbx]
.text:000000000000C333
.text:000000000000C333 loc_C333:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:000000000000C333                 mov     rsi, r13
.text:000000000000C336                 call    r12
.text:000000000000C339                 test    al, al
.text:000000000000C33B                 jz      short loc_C354
.text:000000000000C33D                 mov     rbx, [rbx+8]
.text:000000000000C341                 add     rbp, 1
.text:000000000000C345                 test    rbx, rbx
.text:000000000000C348                 jnz     short loc_C330
.text:000000000000C34A
.text:000000000000C34A loc_C34A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000C34A                 add     r14, 10h
.text:000000000000C34E                 cmp     [r15+8], r14
.text:000000000000C352                 ja      short loc_C322
.text:000000000000C354
.text:000000000000C354 loc_C354:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:000000000000C354                                         ; hash_do_for_each+68↓j
.text:000000000000C354                 add     rsp, 8
.text:000000000000C358                 mov     rax, rbp
.text:000000000000C35B                 pop     rbx
.text:000000000000C35C                 pop     rbp
.text:000000000000C35D                 pop     r12
.text:000000000000C35F                 pop     r13
.text:000000000000C361                 pop     r14
.text:000000000000C363                 pop     r15
.text:000000000000C365                 retn
.text:000000000000C366 ; ---------------------------------------------------------------------------
.text:000000000000C366
.text:000000000000C366 loc_C366:                               ; CODE XREF: hash_do_for_each+15↑j
.text:000000000000C366                 xor     ebp, ebp
.text:000000000000C368                 jmp     short loc_C354
.text:000000000000C368 ; } // starts at C300
.text:000000000000C368 hash_do_for_each endp
.text:000000000000C368
.text:000000000000C368 ; ---------------------------------------------------------------------------
.text:000000000000C36A                 align 10h
.text:000000000000C370
.text:000000000000C370 ; =============== S U B R O U T I N E =======================================
.text:000000000000C370
.text:000000000000C370 ; Attributes: info_from_lumina
.text:000000000000C370
.text:000000000000C370 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:000000000000C370                 public hash_string
.text:000000000000C370 hash_string     proc near
.text:000000000000C370 ; __unwind {
.text:000000000000C370                 movzx   ecx, byte ptr [rdi]
.text:000000000000C373                 xor     edx, edx
.text:000000000000C375                 test    cl, cl
.text:000000000000C377                 jz      short loc_C39D
.text:000000000000C379                 nop     dword ptr [rax+00000000h]
.text:000000000000C380
.text:000000000000C380 loc_C380:                               ; CODE XREF: hash_string+2B↓j
.text:000000000000C380                 mov     rax, rdx
.text:000000000000C383                 add     rdi, 1
.text:000000000000C387                 shl     rax, 5
.text:000000000000C38B                 sub     rax, rdx
.text:000000000000C38E                 xor     edx, edx
.text:000000000000C390                 add     rax, rcx
.text:000000000000C393                 movzx   ecx, byte ptr [rdi]
.text:000000000000C396                 div     rsi
.text:000000000000C399                 test    cl, cl
.text:000000000000C39B                 jnz     short loc_C380
.text:000000000000C39D
.text:000000000000C39D loc_C39D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000C39D                 mov     rax, rdx
.text:000000000000C3A0                 retn
.text:000000000000C3A0 ; } // starts at C370
.text:000000000000C3A0 hash_string     endp
.text:000000000000C3A0
.text:000000000000C3A0 ; ---------------------------------------------------------------------------
.text:000000000000C3A1                 align 10h
.text:000000000000C3B0
.text:000000000000C3B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C3B0
.text:000000000000C3B0 ; Attributes: info_from_lumina
.text:000000000000C3B0
.text:000000000000C3B0 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:000000000000C3B0                 public hash_reset_tuning
.text:000000000000C3B0 hash_reset_tuning proc near
.text:000000000000C3B0 ; __unwind {
.text:000000000000C3B0                 mov     rax, 3F80000000000000h
.text:000000000000C3BA                 mov     byte ptr [rdi+10h], 0
.text:000000000000C3BE                 mov     [rdi], rax
.text:000000000000C3C1                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000C3CB                 mov     [rdi+8], rax
.text:000000000000C3CF                 retn
.text:000000000000C3CF ; } // starts at C3B0
.text:000000000000C3CF hash_reset_tuning endp
.text:000000000000C3CF
.text:000000000000C3D0
.text:000000000000C3D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C3D0
.text:000000000000C3D0 ; Attributes: info_from_lumina
.text:000000000000C3D0
.text:000000000000C3D0 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:000000000000C3D0                 public hash_initialize
.text:000000000000C3D0 hash_initialize proc near               ; CODE XREF: dest_info_init+20↑p
.text:000000000000C3D0                                         ; src_info_init+20↑p ...
.text:000000000000C3D0 ; __unwind {
.text:000000000000C3D0                 push    r15
.text:000000000000C3D2                 push    r14
.text:000000000000C3D4                 lea     rax, raw_hasher
.text:000000000000C3DB                 push    r13
.text:000000000000C3DD                 push    r12
.text:000000000000C3DF                 mov     r12, rdx
.text:000000000000C3E2                 push    rbp
.text:000000000000C3E3                 push    rbx
.text:000000000000C3E4                 mov     r13, rcx
.text:000000000000C3E7                 mov     rbp, rdi
.text:000000000000C3EA                 mov     edi, 50h ; 'P'  ; size
.text:000000000000C3EF                 mov     r15, rsi
.text:000000000000C3F2                 sub     rsp, 8
.text:000000000000C3F6                 test    rdx, rdx
.text:000000000000C3F9                 mov     r14, r8
.text:000000000000C3FC                 cmovz   r12, rax
.text:000000000000C400                 lea     rax, raw_comparator
.text:000000000000C407                 test    rcx, rcx
.text:000000000000C40A                 cmovz   r13, rax
.text:000000000000C40E                 call    _malloc
.text:000000000000C413                 test    rax, rax
.text:000000000000C416                 mov     rbx, rax
.text:000000000000C419                 jz      loc_C4CA
.text:000000000000C41F                 test    r15, r15
.text:000000000000C422                 lea     rdi, [rax+28h]
.text:000000000000C426                 jz      loc_C4E0
.text:000000000000C42C                 mov     [rax+28h], r15
.text:000000000000C430                 call    check_tuning
.text:000000000000C435                 test    al, al
.text:000000000000C437                 jz      loc_C4C0
.text:000000000000C43D                 cmp     byte ptr [r15+10h], 0
.text:000000000000C442                 jz      loc_C540
.text:000000000000C448
.text:000000000000C448 loc_C448:                               ; CODE XREF: hash_initialize+16A↓j
.text:000000000000C448                                         ; hash_initialize+1A5↓j
.text:000000000000C448                 mov     rdi, rbp
.text:000000000000C44B                 call    next_prime
.text:000000000000C450                 mov     edx, 8
.text:000000000000C455                 mov     rbp, rax
.text:000000000000C458                 xor     ecx, ecx
.text:000000000000C45A                 mov     rax, rdx
.text:000000000000C45D                 mul     rbp
.text:000000000000C460                 jo      loc_C57A
.text:000000000000C466
.text:000000000000C466 loc_C466:                               ; CODE XREF: hash_initialize+1AF↓j
.text:000000000000C466                 test    rax, rax
.text:000000000000C469                 js      short loc_C4C0
.text:000000000000C46B                 test    rcx, rcx
.text:000000000000C46E                 jnz     short loc_C4C0
.text:000000000000C470                 test    rbp, rbp
.text:000000000000C473                 mov     [rbx+10h], rbp
.text:000000000000C477                 jz      short loc_C4C0
.text:000000000000C479                 mov     esi, 10h        ; size
.text:000000000000C47E                 mov     rdi, rbp        ; nmemb
.text:000000000000C481                 call    _calloc
.text:000000000000C486                 test    rax, rax
.text:000000000000C489                 mov     [rbx], rax
.text:000000000000C48C                 jz      short loc_C4C0
.text:000000000000C48E                 shl     rbp, 4
.text:000000000000C492                 mov     qword ptr [rbx+18h], 0
.text:000000000000C49A                 mov     qword ptr [rbx+20h], 0
.text:000000000000C4A2                 add     rbp, rax
.text:000000000000C4A5                 mov     [rbx+30h], r12
.text:000000000000C4A9                 mov     [rbx+38h], r13
.text:000000000000C4AD                 mov     [rbx+8], rbp
.text:000000000000C4B1                 mov     [rbx+40h], r14
.text:000000000000C4B5                 mov     qword ptr [rbx+48h], 0
.text:000000000000C4BD                 jmp     short loc_C4CA
.text:000000000000C4BD ; ---------------------------------------------------------------------------
.text:000000000000C4BF                 align 20h
.text:000000000000C4C0
.text:000000000000C4C0 loc_C4C0:                               ; CODE XREF: hash_initialize+67↑j
.text:000000000000C4C0                                         ; hash_initialize+99↑j ...
.text:000000000000C4C0                 mov     rdi, rbx        ; ptr
.text:000000000000C4C3                 xor     ebx, ebx
.text:000000000000C4C5                 call    free
.text:000000000000C4CA
.text:000000000000C4CA loc_C4CA:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000C4CA                                         ; hash_initialize+ED↑j
.text:000000000000C4CA                 add     rsp, 8
.text:000000000000C4CE                 mov     rax, rbx
.text:000000000000C4D1                 pop     rbx
.text:000000000000C4D2                 pop     rbp
.text:000000000000C4D3                 pop     r12
.text:000000000000C4D5                 pop     r13
.text:000000000000C4D7                 pop     r14
.text:000000000000C4D9                 pop     r15
.text:000000000000C4DB                 retn
.text:000000000000C4DB ; ---------------------------------------------------------------------------
.text:000000000000C4DC                 align 20h
.text:000000000000C4E0
.text:000000000000C4E0 loc_C4E0:                               ; CODE XREF: hash_initialize+56↑j
.text:000000000000C4E0                 lea     rax, default_tuning
.text:000000000000C4E7                 mov     [rbx+28h], rax
.text:000000000000C4EB                 call    check_tuning
.text:000000000000C4F0                 test    al, al
.text:000000000000C4F2                 movss   xmm1, cs:dword_152C8
.text:000000000000C4FA                 jz      short loc_C4C0
.text:000000000000C4FC                 test    rbp, rbp
.text:000000000000C4FF                 js      short loc_C54B
.text:000000000000C501
.text:000000000000C501 loc_C501:                               ; CODE XREF: hash_initialize+179↓j
.text:000000000000C501                 pxor    xmm0, xmm0
.text:000000000000C505                 cvtsi2ss xmm0, rbp
.text:000000000000C50A
.text:000000000000C50A loc_C50A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000C50A                 divss   xmm0, xmm1
.text:000000000000C50E                 ucomiss xmm0, cs:dword_152CC
.text:000000000000C515                 jnb     short loc_C4C0
.text:000000000000C517                 ucomiss xmm0, cs:dword_152D0
.text:000000000000C51E                 jb      short loc_C570
.text:000000000000C520                 subss   xmm0, cs:dword_152D0
.text:000000000000C528                 mov     rax, 8000000000000000h
.text:000000000000C532                 cvttss2si rbp, xmm0
.text:000000000000C537                 xor     rbp, rax
.text:000000000000C53A                 jmp     loc_C448
.text:000000000000C53A ; ---------------------------------------------------------------------------
.text:000000000000C53F                 align 20h
.text:000000000000C540
.text:000000000000C540 loc_C540:                               ; CODE XREF: hash_initialize+72↑j
.text:000000000000C540                 test    rbp, rbp
.text:000000000000C543                 movss   xmm1, dword ptr [r15+8]
.text:000000000000C549                 jns     short loc_C501
.text:000000000000C54B
.text:000000000000C54B loc_C54B:                               ; CODE XREF: hash_initialize+12F↑j
.text:000000000000C54B                 mov     rax, rbp
.text:000000000000C54E                 pxor    xmm0, xmm0
.text:000000000000C552                 shr     rax, 1
.text:000000000000C555                 and     ebp, 1
.text:000000000000C558                 or      rax, rbp
.text:000000000000C55B                 cvtsi2ss xmm0, rax
.text:000000000000C560                 addss   xmm0, xmm0
.text:000000000000C564                 jmp     short loc_C50A
.text:000000000000C564 ; ---------------------------------------------------------------------------
.text:000000000000C566                 align 10h
.text:000000000000C570
.text:000000000000C570 loc_C570:                               ; CODE XREF: hash_initialize+14E↑j
.text:000000000000C570                 cvttss2si rbp, xmm0
.text:000000000000C575                 jmp     loc_C448
.text:000000000000C57A ; ---------------------------------------------------------------------------
.text:000000000000C57A
.text:000000000000C57A loc_C57A:                               ; CODE XREF: hash_initialize+90↑j
.text:000000000000C57A                 mov     ecx, 1
.text:000000000000C57F                 jmp     loc_C466
.text:000000000000C57F ; } // starts at C3D0
.text:000000000000C57F hash_initialize endp
.text:000000000000C57F
.text:000000000000C57F ; ---------------------------------------------------------------------------
.text:000000000000C584                 align 10h
.text:000000000000C590
.text:000000000000C590 ; =============== S U B R O U T I N E =======================================
.text:000000000000C590
.text:000000000000C590 ; Attributes: info_from_lumina
.text:000000000000C590
.text:000000000000C590 ; void __fastcall hash_clear(Hash_table *table)
.text:000000000000C590                 public hash_clear
.text:000000000000C590 hash_clear      proc near
.text:000000000000C590 ; __unwind {
.text:000000000000C590                 push    r12
.text:000000000000C592                 push    rbp
.text:000000000000C593                 mov     rbp, rdi
.text:000000000000C596                 push    rbx
.text:000000000000C597                 mov     r12, [rdi]
.text:000000000000C59A                 cmp     r12, [rdi+8]
.text:000000000000C59E                 jnb     short loc_C60B
.text:000000000000C5A0
.text:000000000000C5A0 loc_C5A0:                               ; CODE XREF: hash_clear+79↓j
.text:000000000000C5A0                 cmp     qword ptr [r12], 0
.text:000000000000C5A5                 jz      short loc_C601
.text:000000000000C5A7                 mov     rbx, [r12+8]
.text:000000000000C5AC                 mov     rax, [rbp+40h]
.text:000000000000C5B0                 test    rbx, rbx
.text:000000000000C5B3                 jz      short loc_C5E5
.text:000000000000C5B5                 nop     dword ptr [rax]
.text:000000000000C5B8
.text:000000000000C5B8 loc_C5B8:                               ; CODE XREF: hash_clear+53↓j
.text:000000000000C5B8                 test    rax, rax
.text:000000000000C5BB                 jz      short loc_C5C6
.text:000000000000C5BD                 mov     rdi, [rbx]
.text:000000000000C5C0                 call    rax
.text:000000000000C5C2                 mov     rax, [rbp+40h]
.text:000000000000C5C6
.text:000000000000C5C6 loc_C5C6:                               ; CODE XREF: hash_clear+2B↑j
.text:000000000000C5C6                 mov     rdx, [rbx+8]
.text:000000000000C5CA                 mov     rcx, [rbp+48h]
.text:000000000000C5CE                 mov     qword ptr [rbx], 0
.text:000000000000C5D5                 test    rdx, rdx
.text:000000000000C5D8                 mov     [rbx+8], rcx
.text:000000000000C5DC                 mov     [rbp+48h], rbx
.text:000000000000C5E0                 mov     rbx, rdx
.text:000000000000C5E3                 jnz     short loc_C5B8
.text:000000000000C5E5
.text:000000000000C5E5 loc_C5E5:                               ; CODE XREF: hash_clear+23↑j
.text:000000000000C5E5                 test    rax, rax
.text:000000000000C5E8                 jz      short loc_C5F0
.text:000000000000C5EA                 mov     rdi, [r12]
.text:000000000000C5EE                 call    rax
.text:000000000000C5F0
.text:000000000000C5F0 loc_C5F0:                               ; CODE XREF: hash_clear+58↑j
.text:000000000000C5F0                 mov     qword ptr [r12], 0
.text:000000000000C5F8                 mov     qword ptr [r12+8], 0
.text:000000000000C601
.text:000000000000C601 loc_C601:                               ; CODE XREF: hash_clear+15↑j
.text:000000000000C601                 add     r12, 10h
.text:000000000000C605                 cmp     [rbp+8], r12
.text:000000000000C609                 ja      short loc_C5A0
.text:000000000000C60B
.text:000000000000C60B loc_C60B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000C60B                 mov     qword ptr [rbp+18h], 0
.text:000000000000C613                 mov     qword ptr [rbp+20h], 0
.text:000000000000C61B                 pop     rbx
.text:000000000000C61C                 pop     rbp
.text:000000000000C61D                 pop     r12
.text:000000000000C61F                 retn
.text:000000000000C61F ; } // starts at C590
.text:000000000000C61F hash_clear      endp
.text:000000000000C61F
.text:000000000000C620
.text:000000000000C620 ; =============== S U B R O U T I N E =======================================
.text:000000000000C620
.text:000000000000C620 ; Attributes: info_from_lumina
.text:000000000000C620
.text:000000000000C620 ; void __fastcall hash_free(Hash_table *table)
.text:000000000000C620                 public hash_free
.text:000000000000C620 hash_free       proc near               ; CODE XREF: forget_all+7↑j
.text:000000000000C620 ; __unwind {
.text:000000000000C620                 push    r12
.text:000000000000C622                 push    rbp
.text:000000000000C623                 mov     r12, rdi
.text:000000000000C626                 push    rbx
.text:000000000000C627                 cmp     qword ptr [rdi+40h], 0
.text:000000000000C62C                 mov     rbp, [rdi]
.text:000000000000C62F                 mov     rax, [rdi+8]
.text:000000000000C633                 jz      short loc_C683
.text:000000000000C635                 cmp     qword ptr [rdi+20h], 0
.text:000000000000C63A                 jz      short loc_C683
.text:000000000000C63C                 cmp     rbp, rax
.text:000000000000C63F                 jnb     short loc_C6BC
.text:000000000000C641                 nop     dword ptr [rax+00000000h]
.text:000000000000C648
.text:000000000000C648 loc_C648:                               ; CODE XREF: hash_free+5D↓j
.text:000000000000C648                 mov     rdi, [rbp+0]
.text:000000000000C64C                 test    rdi, rdi
.text:000000000000C64F                 jz      short loc_C676
.text:000000000000C651                 mov     rbx, rbp
.text:000000000000C654                 jmp     short loc_C663
.text:000000000000C654 ; ---------------------------------------------------------------------------
.text:000000000000C656                 align 20h
.text:000000000000C660
.text:000000000000C660 loc_C660:                               ; CODE XREF: hash_free+4F↓j
.text:000000000000C660                 mov     rdi, [rbx]
.text:000000000000C663
.text:000000000000C663 loc_C663:                               ; CODE XREF: hash_free+34↑j
.text:000000000000C663                 call    qword ptr [r12+40h]
.text:000000000000C668                 mov     rbx, [rbx+8]
.text:000000000000C66C                 test    rbx, rbx
.text:000000000000C66F                 jnz     short loc_C660
.text:000000000000C671                 mov     rax, [r12+8]
.text:000000000000C676
.text:000000000000C676 loc_C676:                               ; CODE XREF: hash_free+2F↑j
.text:000000000000C676                 add     rbp, 10h
.text:000000000000C67A                 cmp     rax, rbp
.text:000000000000C67D                 ja      short loc_C648
.text:000000000000C67F                 mov     rbp, [r12]
.text:000000000000C683
.text:000000000000C683 loc_C683:                               ; CODE XREF: hash_free+13↑j
.text:000000000000C683                                         ; hash_free+1A↑j
.text:000000000000C683                 cmp     rbp, rax
.text:000000000000C686                 jnb     short loc_C6BC
.text:000000000000C688                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000C690
.text:000000000000C690 loc_C690:                               ; CODE XREF: hash_free+9A↓j
.text:000000000000C690                 mov     rdi, [rbp+8]    ; ptr
.text:000000000000C694                 test    rdi, rdi
.text:000000000000C697                 jz      short loc_C6B1
.text:000000000000C699                 nop     dword ptr [rax+00000000h]
.text:000000000000C6A0
.text:000000000000C6A0 loc_C6A0:                               ; CODE XREF: hash_free+8F↓j
.text:000000000000C6A0                 mov     rbx, [rdi+8]
.text:000000000000C6A4                 call    free
.text:000000000000C6A9                 test    rbx, rbx
.text:000000000000C6AC                 mov     rdi, rbx
.text:000000000000C6AF                 jnz     short loc_C6A0
.text:000000000000C6B1
.text:000000000000C6B1 loc_C6B1:                               ; CODE XREF: hash_free+77↑j
.text:000000000000C6B1                 add     rbp, 10h
.text:000000000000C6B5                 cmp     [r12+8], rbp
.text:000000000000C6BA                 ja      short loc_C690
.text:000000000000C6BC
.text:000000000000C6BC loc_C6BC:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000C6BC                                         ; hash_free+66↑j
.text:000000000000C6BC                 mov     rdi, [r12+48h]  ; ptr
.text:000000000000C6C1                 test    rdi, rdi
.text:000000000000C6C4                 jz      short loc_C6E1
.text:000000000000C6C6                 db      2Eh
.text:000000000000C6C6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C6D0
.text:000000000000C6D0 loc_C6D0:                               ; CODE XREF: hash_free+BF↓j
.text:000000000000C6D0                 mov     rbx, [rdi+8]
.text:000000000000C6D4                 call    free
.text:000000000000C6D9                 test    rbx, rbx
.text:000000000000C6DC                 mov     rdi, rbx
.text:000000000000C6DF                 jnz     short loc_C6D0
.text:000000000000C6E1
.text:000000000000C6E1 loc_C6E1:                               ; CODE XREF: hash_free+A4↑j
.text:000000000000C6E1                 mov     rdi, [r12]      ; ptr
.text:000000000000C6E5                 call    free
.text:000000000000C6EA                 pop     rbx
.text:000000000000C6EB                 mov     rdi, r12        ; ptr
.text:000000000000C6EE                 pop     rbp
.text:000000000000C6EF                 pop     r12
.text:000000000000C6F1                 jmp     free
.text:000000000000C6F1 ; } // starts at C620
.text:000000000000C6F1 hash_free       endp
.text:000000000000C6F1
.text:000000000000C6F1 ; ---------------------------------------------------------------------------
.text:000000000000C6F6                 align 20h
.text:000000000000C700
.text:000000000000C700 ; =============== S U B R O U T I N E =======================================
.text:000000000000C700
.text:000000000000C700 ; Attributes: info_from_lumina
.text:000000000000C700
.text:000000000000C700 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:000000000000C700                 public hash_rehash
.text:000000000000C700 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:000000000000C700                                         ; hash_delete+10F↓p
.text:000000000000C700
.text:000000000000C700 ptr             = qword ptr -78h
.text:000000000000C700 var_70          = qword ptr -70h
.text:000000000000C700 var_68          = qword ptr -68h
.text:000000000000C700 var_60          = qword ptr -60h
.text:000000000000C700 var_58          = qword ptr -58h
.text:000000000000C700 var_50          = qword ptr -50h
.text:000000000000C700 var_48          = qword ptr -48h
.text:000000000000C700 var_40          = qword ptr -40h
.text:000000000000C700 var_38          = qword ptr -38h
.text:000000000000C700 var_30          = qword ptr -30h
.text:000000000000C700 var_20          = qword ptr -20h
.text:000000000000C700
.text:000000000000C700 ; __unwind {
.text:000000000000C700                 push    r12
.text:000000000000C702                 push    rbp
.text:000000000000C703                 mov     rbp, rdi
.text:000000000000C706                 push    rbx
.text:000000000000C707                 sub     rsp, 60h
.text:000000000000C70B                 mov     r12, [rdi+28h]
.text:000000000000C70F                 mov     rax, fs:28h
.text:000000000000C718                 mov     [rsp+78h+var_20], rax
.text:000000000000C71D                 xor     eax, eax
.text:000000000000C71F                 cmp     byte ptr [r12+10h], 0
.text:000000000000C725                 jnz     short loc_C778
.text:000000000000C727                 test    rsi, rsi
.text:000000000000C72A                 js      loc_C8A8
.text:000000000000C730                 pxor    xmm0, xmm0
.text:000000000000C734                 cvtsi2ss xmm0, rsi
.text:000000000000C739
.text:000000000000C739 loc_C739:                               ; CODE XREF: hash_rehash+1C1↓j
.text:000000000000C739                 divss   xmm0, dword ptr [r12+8]
.text:000000000000C740                 ucomiss xmm0, cs:dword_152CC
.text:000000000000C747                 jnb     loc_C880
.text:000000000000C74D                 ucomiss xmm0, cs:dword_152D0
.text:000000000000C754                 jb      loc_C8D0
.text:000000000000C75A                 subss   xmm0, cs:dword_152D0
.text:000000000000C762                 mov     rax, 8000000000000000h
.text:000000000000C76C                 cvttss2si rsi, xmm0
.text:000000000000C771                 xor     rsi, rax
.text:000000000000C774                 nop     dword ptr [rax+00h]
.text:000000000000C778
.text:000000000000C778 loc_C778:                               ; CODE XREF: hash_rehash+25↑j
.text:000000000000C778                                         ; hash_rehash+1D5↓j
.text:000000000000C778                 mov     rdi, rsi
.text:000000000000C77B                 call    next_prime
.text:000000000000C780                 mov     edx, 8
.text:000000000000C785                 mov     rbx, rax
.text:000000000000C788                 xor     ecx, ecx
.text:000000000000C78A                 mov     rax, rdx
.text:000000000000C78D                 mul     rbx
.text:000000000000C790                 jo      loc_C92F
.text:000000000000C796
.text:000000000000C796 loc_C796:                               ; CODE XREF: hash_rehash+234↓j
.text:000000000000C796                 test    rax, rax
.text:000000000000C799                 mov     eax, 1
.text:000000000000C79E                 cmovs   rcx, rax
.text:000000000000C7A2                 test    rbx, rbx
.text:000000000000C7A5                 jz      loc_C880
.text:000000000000C7AB                 and     ecx, 1
.text:000000000000C7AE                 jnz     loc_C880
.text:000000000000C7B4                 cmp     [rbp+10h], rbx
.text:000000000000C7B8                 jz      loc_C8E0
.text:000000000000C7BE                 mov     esi, 10h        ; size
.text:000000000000C7C3                 mov     rdi, rbx        ; nmemb
.text:000000000000C7C6                 call    _calloc
.text:000000000000C7CB                 test    rax, rax
.text:000000000000C7CE                 mov     [rsp+78h+ptr], rax
.text:000000000000C7D2                 jz      loc_C880
.text:000000000000C7D8                 mov     [rsp+78h+var_68], rbx
.text:000000000000C7DD                 shl     rbx, 4
.text:000000000000C7E1                 mov     [rsp+78h+var_50], r12
.text:000000000000C7E6                 add     rbx, rax
.text:000000000000C7E9                 mov     rax, [rbp+30h]
.text:000000000000C7ED                 mov     r12, rsp
.text:000000000000C7F0                 xor     edx, edx
.text:000000000000C7F2                 mov     rsi, rbp
.text:000000000000C7F5                 mov     rdi, r12
.text:000000000000C7F8                 mov     [rsp+78h+var_70], rbx
.text:000000000000C7FD                 mov     [rsp+78h+var_60], 0
.text:000000000000C806                 mov     [rsp+78h+var_48], rax
.text:000000000000C80B                 mov     rax, [rbp+38h]
.text:000000000000C80F                 mov     [rsp+78h+var_58], 0
.text:000000000000C818                 mov     [rsp+78h+var_40], rax
.text:000000000000C81D                 mov     rax, [rbp+40h]
.text:000000000000C821                 mov     [rsp+78h+var_38], rax
.text:000000000000C826                 mov     rax, [rbp+48h]
.text:000000000000C82A                 mov     [rsp+78h+var_30], rax
.text:000000000000C82F                 call    transfer_entries
.text:000000000000C834                 test    al, al
.text:000000000000C836                 mov     ebx, eax
.text:000000000000C838                 jnz     loc_C8F0
.text:000000000000C83E                 mov     rax, [rsp+78h+var_30]
.text:000000000000C843                 mov     edx, 1
.text:000000000000C848                 mov     rsi, r12
.text:000000000000C84B                 mov     rdi, rbp
.text:000000000000C84E                 mov     [rbp+48h], rax
.text:000000000000C852                 call    transfer_entries
.text:000000000000C857                 test    al, al
.text:000000000000C859                 jz      loc_C939
.text:000000000000C85F                 xor     edx, edx
.text:000000000000C861                 mov     rsi, r12
.text:000000000000C864                 mov     rdi, rbp
.text:000000000000C867                 call    transfer_entries
.text:000000000000C86C                 test    al, al
.text:000000000000C86E                 jz      loc_C939
.text:000000000000C874                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000C878                 call    free
.text:000000000000C87D                 jmp     short loc_C882
.text:000000000000C87D ; ---------------------------------------------------------------------------
.text:000000000000C87F                 align 20h
.text:000000000000C880
.text:000000000000C880 loc_C880:                               ; CODE XREF: hash_rehash+47↑j
.text:000000000000C880                                         ; hash_rehash+A5↑j ...
.text:000000000000C880                 xor     ebx, ebx
.text:000000000000C882
.text:000000000000C882 loc_C882:                               ; CODE XREF: hash_rehash+17D↑j
.text:000000000000C882                                         ; hash_rehash+1E5↓j ...
.text:000000000000C882                 mov     rcx, [rsp+78h+var_20]
.text:000000000000C887                 xor     rcx, fs:28h
.text:000000000000C890                 mov     eax, ebx
.text:000000000000C892                 jnz     loc_C92A
.text:000000000000C898                 add     rsp, 60h
.text:000000000000C89C                 pop     rbx
.text:000000000000C89D                 pop     rbp
.text:000000000000C89E                 pop     r12
.text:000000000000C8A0                 retn
.text:000000000000C8A0 ; ---------------------------------------------------------------------------
.text:000000000000C8A1                 align 8
.text:000000000000C8A8
.text:000000000000C8A8 loc_C8A8:                               ; CODE XREF: hash_rehash+2A↑j
.text:000000000000C8A8                 mov     rax, rsi
.text:000000000000C8AB                 pxor    xmm0, xmm0
.text:000000000000C8AF                 shr     rax, 1
.text:000000000000C8B2                 and     esi, 1
.text:000000000000C8B5                 or      rax, rsi
.text:000000000000C8B8                 cvtsi2ss xmm0, rax
.text:000000000000C8BD                 addss   xmm0, xmm0
.text:000000000000C8C1                 jmp     loc_C739
.text:000000000000C8C1 ; ---------------------------------------------------------------------------
.text:000000000000C8C6                 align 10h
.text:000000000000C8D0
.text:000000000000C8D0 loc_C8D0:                               ; CODE XREF: hash_rehash+54↑j
.text:000000000000C8D0                 cvttss2si rsi, xmm0
.text:000000000000C8D5                 jmp     loc_C778
.text:000000000000C8D5 ; ---------------------------------------------------------------------------
.text:000000000000C8DA                 align 20h
.text:000000000000C8E0
.text:000000000000C8E0 loc_C8E0:                               ; CODE XREF: hash_rehash+B8↑j
.text:000000000000C8E0                 mov     ebx, 1
.text:000000000000C8E5                 jmp     short loc_C882
.text:000000000000C8E5 ; ---------------------------------------------------------------------------
.text:000000000000C8E7                 align 10h
.text:000000000000C8F0
.text:000000000000C8F0 loc_C8F0:                               ; CODE XREF: hash_rehash+138↑j
.text:000000000000C8F0                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000C8F4                 call    free
.text:000000000000C8F9                 mov     rax, [rsp+78h+ptr]
.text:000000000000C8FD                 mov     [rbp+0], rax
.text:000000000000C901                 mov     rax, [rsp+78h+var_70]
.text:000000000000C906                 mov     [rbp+8], rax
.text:000000000000C90A                 mov     rax, [rsp+78h+var_68]
.text:000000000000C90F                 mov     [rbp+10h], rax
.text:000000000000C913                 mov     rax, [rsp+78h+var_60]
.text:000000000000C918                 mov     [rbp+18h], rax
.text:000000000000C91C                 mov     rax, [rsp+78h+var_30]
.text:000000000000C921                 mov     [rbp+48h], rax
.text:000000000000C925                 jmp     loc_C882
.text:000000000000C92A ; ---------------------------------------------------------------------------
.text:000000000000C92A
.text:000000000000C92A loc_C92A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000C92A                 call    ___stack_chk_fail
.text:000000000000C92F ; ---------------------------------------------------------------------------
.text:000000000000C92F
.text:000000000000C92F loc_C92F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000C92F                 mov     ecx, 1
.text:000000000000C934                 jmp     loc_C796
.text:000000000000C939 ; ---------------------------------------------------------------------------
.text:000000000000C939
.text:000000000000C939 loc_C939:                               ; CODE XREF: hash_rehash+159↑j
.text:000000000000C939                                         ; hash_rehash+16E↑j
.text:000000000000C939                 call    _abort
.text:000000000000C939 ; } // starts at C700
.text:000000000000C939 hash_rehash     endp
.text:000000000000C939
.text:000000000000C939 ; ---------------------------------------------------------------------------
.text:000000000000C93E                 align 20h
.text:000000000000C940
.text:000000000000C940 ; =============== S U B R O U T I N E =======================================
.text:000000000000C940
.text:000000000000C940 ; Attributes: info_from_lumina
.text:000000000000C940
.text:000000000000C940 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:000000000000C940                 public hash_insert_if_absent
.text:000000000000C940 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:000000000000C940
.text:000000000000C940 var_38          = qword ptr -38h
.text:000000000000C940 var_30          = qword ptr -30h
.text:000000000000C940
.text:000000000000C940 ; __unwind {
.text:000000000000C940                 push    r13
.text:000000000000C942                 push    r12
.text:000000000000C944                 push    rbp
.text:000000000000C945                 push    rbx
.text:000000000000C946                 sub     rsp, 18h
.text:000000000000C94A                 mov     rax, fs:28h
.text:000000000000C953                 mov     [rsp+38h+var_30], rax
.text:000000000000C958                 xor     eax, eax
.text:000000000000C95A                 test    rsi, rsi
.text:000000000000C95D                 jz      loc_CB1D
.text:000000000000C963                 mov     r12, rsp
.text:000000000000C966                 xor     ecx, ecx
.text:000000000000C968                 mov     r13, rdx
.text:000000000000C96B                 mov     rdx, r12
.text:000000000000C96E                 mov     rbx, rdi
.text:000000000000C971                 mov     rbp, rsi
.text:000000000000C974                 call    hash_find_entry
.text:000000000000C979                 test    rax, rax
.text:000000000000C97C                 mov     rdx, rax
.text:000000000000C97F                 jz      short loc_C9B0
.text:000000000000C981                 xor     eax, eax
.text:000000000000C983                 test    r13, r13
.text:000000000000C986                 jz      short loc_C98C
.text:000000000000C988                 mov     [r13+0], rdx
.text:000000000000C98C
.text:000000000000C98C loc_C98C:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:000000000000C98C                                         ; hash_insert_if_absent+E9↓j ...
.text:000000000000C98C                 mov     rcx, [rsp+38h+var_30]
.text:000000000000C991                 xor     rcx, fs:28h
.text:000000000000C99A                 jnz     loc_CBBF
.text:000000000000C9A0                 add     rsp, 18h
.text:000000000000C9A4                 pop     rbx
.text:000000000000C9A5                 pop     rbp
.text:000000000000C9A6                 pop     r12
.text:000000000000C9A8                 pop     r13
.text:000000000000C9AA                 retn
.text:000000000000C9AA ; ---------------------------------------------------------------------------
.text:000000000000C9AB                 align 10h
.text:000000000000C9B0
.text:000000000000C9B0 loc_C9B0:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:000000000000C9B0                 mov     rax, [rbx+18h]
.text:000000000000C9B4                 test    rax, rax
.text:000000000000C9B7                 js      short loc_CA30
.text:000000000000C9B9                 pxor    xmm1, xmm1
.text:000000000000C9BD                 mov     rdx, [rbx+28h]
.text:000000000000C9C1                 cvtsi2ss xmm1, rax
.text:000000000000C9C6                 mov     rax, [rbx+10h]
.text:000000000000C9CA                 test    rax, rax
.text:000000000000C9CD                 js      loc_CA5A
.text:000000000000C9D3
.text:000000000000C9D3 loc_C9D3:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:000000000000C9D3                 pxor    xmm0, xmm0
.text:000000000000C9D7                 cvtsi2ss xmm0, rax
.text:000000000000C9DC
.text:000000000000C9DC loc_C9DC:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000C9DC                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000C9E1                 ucomiss xmm1, xmm0
.text:000000000000C9E4                 ja      loc_CA80
.text:000000000000C9EA
.text:000000000000C9EA loc_C9EA:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000C9EA                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000C9EA                 mov     r12, [rsp+38h+var_38]
.text:000000000000C9EE                 cmp     qword ptr [r12], 0
.text:000000000000C9F3                 jz      loc_CB28
.text:000000000000C9F9                 mov     rax, [rbx+48h]
.text:000000000000C9FD                 test    rax, rax
.text:000000000000CA00                 jz      loc_CB40
.text:000000000000CA06                 mov     rdx, [rax+8]
.text:000000000000CA0A                 mov     [rbx+48h], rdx
.text:000000000000CA0E
.text:000000000000CA0E loc_CA0E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000CA0E                 mov     rdx, [r12+8]
.text:000000000000CA13                 mov     [rax], rbp
.text:000000000000CA16                 mov     [rax+8], rdx
.text:000000000000CA1A                 mov     [r12+8], rax
.text:000000000000CA1F                 mov     eax, 1
.text:000000000000CA24                 add     qword ptr [rbx+20h], 1
.text:000000000000CA29                 jmp     loc_C98C
.text:000000000000CA29 ; ---------------------------------------------------------------------------
.text:000000000000CA2E                 align 10h
.text:000000000000CA30
.text:000000000000CA30 loc_CA30:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:000000000000CA30                 mov     rdx, rax
.text:000000000000CA33                 pxor    xmm1, xmm1
.text:000000000000CA37                 and     eax, 1
.text:000000000000CA3A                 shr     rdx, 1
.text:000000000000CA3D                 or      rdx, rax
.text:000000000000CA40                 mov     rax, [rbx+10h]
.text:000000000000CA44                 cvtsi2ss xmm1, rdx
.text:000000000000CA49                 mov     rdx, [rbx+28h]
.text:000000000000CA4D                 test    rax, rax
.text:000000000000CA50                 addss   xmm1, xmm1
.text:000000000000CA54                 jns     loc_C9D3
.text:000000000000CA5A
.text:000000000000CA5A loc_CA5A:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:000000000000CA5A                 mov     rcx, rax
.text:000000000000CA5D                 pxor    xmm0, xmm0
.text:000000000000CA61                 shr     rcx, 1
.text:000000000000CA64                 and     eax, 1
.text:000000000000CA67                 or      rcx, rax
.text:000000000000CA6A                 cvtsi2ss xmm0, rcx
.text:000000000000CA6F                 addss   xmm0, xmm0
.text:000000000000CA73                 jmp     loc_C9DC
.text:000000000000CA73 ; ---------------------------------------------------------------------------
.text:000000000000CA78                 align 20h
.text:000000000000CA80
.text:000000000000CA80 loc_CA80:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:000000000000CA80                 lea     rdi, [rbx+28h]
.text:000000000000CA84                 call    check_tuning
.text:000000000000CA89                 mov     rax, [rbx+10h]
.text:000000000000CA8D                 mov     rdx, [rbx+28h]
.text:000000000000CA91                 test    rax, rax
.text:000000000000CA94                 movss   xmm2, dword ptr [rdx+8]
.text:000000000000CA99                 js      loc_CB60
.text:000000000000CA9F                 pxor    xmm0, xmm0
.text:000000000000CAA3                 cvtsi2ss xmm0, rax
.text:000000000000CAA8
.text:000000000000CAA8 loc_CAA8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:000000000000CAA8                 mov     rax, [rbx+18h]
.text:000000000000CAAC                 test    rax, rax
.text:000000000000CAAF                 js      loc_CB80
.text:000000000000CAB5                 pxor    xmm1, xmm1
.text:000000000000CAB9                 cvtsi2ss xmm1, rax
.text:000000000000CABE
.text:000000000000CABE loc_CABE:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:000000000000CABE                 movaps  xmm3, xmm2
.text:000000000000CAC1                 mulss   xmm3, xmm0
.text:000000000000CAC5                 ucomiss xmm1, xmm3
.text:000000000000CAC8                 jbe     loc_C9EA
.text:000000000000CACE                 cmp     byte ptr [rdx+10h], 0
.text:000000000000CAD2                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:000000000000CAD7                 jnz     short loc_CADD
.text:000000000000CAD9                 mulss   xmm0, xmm2
.text:000000000000CADD
.text:000000000000CADD loc_CADD:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000CADD                 ucomiss xmm0, cs:dword_152CC
.text:000000000000CAE4                 jnb     short loc_CB53
.text:000000000000CAE6                 ucomiss xmm0, cs:dword_152D0
.text:000000000000CAED                 jnb     loc_CBA0
.text:000000000000CAF3                 cvttss2si rsi, xmm0
.text:000000000000CAF8
.text:000000000000CAF8 loc_CAF8:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:000000000000CAF8                 mov     rdi, rbx
.text:000000000000CAFB                 call    hash_rehash
.text:000000000000CB00                 test    al, al
.text:000000000000CB02                 jz      short loc_CB53
.text:000000000000CB04                 xor     ecx, ecx
.text:000000000000CB06                 mov     rdx, r12
.text:000000000000CB09                 mov     rsi, rbp
.text:000000000000CB0C                 mov     rdi, rbx
.text:000000000000CB0F                 call    hash_find_entry
.text:000000000000CB14                 test    rax, rax
.text:000000000000CB17                 jz      loc_C9EA
.text:000000000000CB1D
.text:000000000000CB1D loc_CB1D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000CB1D                 call    _abort
.text:000000000000CB1D ; ---------------------------------------------------------------------------
.text:000000000000CB22                 align 8
.text:000000000000CB28
.text:000000000000CB28 loc_CB28:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:000000000000CB28                 mov     [r12], rbp
.text:000000000000CB2C                 mov     eax, 1
.text:000000000000CB31                 add     qword ptr [rbx+20h], 1
.text:000000000000CB36                 add     qword ptr [rbx+18h], 1
.text:000000000000CB3B                 jmp     loc_C98C
.text:000000000000CB40 ; ---------------------------------------------------------------------------
.text:000000000000CB40
.text:000000000000CB40 loc_CB40:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:000000000000CB40                 mov     edi, 10h        ; size
.text:000000000000CB45                 call    _malloc
.text:000000000000CB4A                 test    rax, rax
.text:000000000000CB4D                 jnz     loc_CA0E
.text:000000000000CB53
.text:000000000000CB53 loc_CB53:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:000000000000CB53                                         ; hash_insert_if_absent+1C2↑j
.text:000000000000CB53                 mov     eax, 0FFFFFFFFh
.text:000000000000CB58                 jmp     loc_C98C
.text:000000000000CB58 ; ---------------------------------------------------------------------------
.text:000000000000CB5D                 align 20h
.text:000000000000CB60
.text:000000000000CB60 loc_CB60:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:000000000000CB60                 mov     rcx, rax
.text:000000000000CB63                 pxor    xmm0, xmm0
.text:000000000000CB67                 shr     rcx, 1
.text:000000000000CB6A                 and     eax, 1
.text:000000000000CB6D                 or      rcx, rax
.text:000000000000CB70                 cvtsi2ss xmm0, rcx
.text:000000000000CB75                 addss   xmm0, xmm0
.text:000000000000CB79                 jmp     loc_CAA8
.text:000000000000CB79 ; ---------------------------------------------------------------------------
.text:000000000000CB7E                 align 20h
.text:000000000000CB80
.text:000000000000CB80 loc_CB80:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:000000000000CB80                 mov     rcx, rax
.text:000000000000CB83                 pxor    xmm1, xmm1
.text:000000000000CB87                 shr     rcx, 1
.text:000000000000CB8A                 and     eax, 1
.text:000000000000CB8D                 or      rcx, rax
.text:000000000000CB90                 cvtsi2ss xmm1, rcx
.text:000000000000CB95                 addss   xmm1, xmm1
.text:000000000000CB99                 jmp     loc_CABE
.text:000000000000CB99 ; ---------------------------------------------------------------------------
.text:000000000000CB9E                 align 20h
.text:000000000000CBA0
.text:000000000000CBA0 loc_CBA0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:000000000000CBA0                 subss   xmm0, cs:dword_152D0
.text:000000000000CBA8                 mov     rax, 8000000000000000h
.text:000000000000CBB2                 cvttss2si rsi, xmm0
.text:000000000000CBB7                 xor     rsi, rax
.text:000000000000CBBA                 jmp     loc_CAF8
.text:000000000000CBBF ; ---------------------------------------------------------------------------
.text:000000000000CBBF
.text:000000000000CBBF loc_CBBF:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000CBBF                 call    ___stack_chk_fail
.text:000000000000CBBF ; } // starts at C940
.text:000000000000CBBF hash_insert_if_absent endp
.text:000000000000CBBF
.text:000000000000CBBF ; ---------------------------------------------------------------------------
.text:000000000000CBC4                 align 10h
.text:000000000000CBD0
.text:000000000000CBD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CBD0
.text:000000000000CBD0 ; Attributes: info_from_lumina
.text:000000000000CBD0
.text:000000000000CBD0 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:000000000000CBD0                 public hash_insert
.text:000000000000CBD0 hash_insert     proc near               ; CODE XREF: remember_copied+3D↑p
.text:000000000000CBD0                                         ; record_file+46↑p ...
.text:000000000000CBD0
.text:000000000000CBD0 var_18          = qword ptr -18h
.text:000000000000CBD0 var_10          = qword ptr -10h
.text:000000000000CBD0
.text:000000000000CBD0 ; __unwind {
.text:000000000000CBD0                 push    rbx
.text:000000000000CBD1                 mov     rbx, rsi
.text:000000000000CBD4                 sub     rsp, 10h
.text:000000000000CBD8                 mov     rdx, rsp
.text:000000000000CBDB                 mov     rax, fs:28h
.text:000000000000CBE4                 mov     [rsp+18h+var_10], rax
.text:000000000000CBE9                 xor     eax, eax
.text:000000000000CBEB                 call    hash_insert_if_absent
.text:000000000000CBF0                 cmp     eax, 0FFFFFFFFh
.text:000000000000CBF3                 jz      short loc_CC20
.text:000000000000CBF5                 test    eax, eax
.text:000000000000CBF7                 jnz     short loc_CBFD
.text:000000000000CBF9                 mov     rbx, [rsp+18h+var_18]
.text:000000000000CBFD
.text:000000000000CBFD loc_CBFD:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000CBFD                                         ; hash_insert+52↓j
.text:000000000000CBFD                 mov     rcx, [rsp+18h+var_10]
.text:000000000000CC02                 xor     rcx, fs:28h
.text:000000000000CC0B                 mov     rax, rbx
.text:000000000000CC0E                 jnz     short loc_CC24
.text:000000000000CC10                 add     rsp, 10h
.text:000000000000CC14                 pop     rbx
.text:000000000000CC15                 retn
.text:000000000000CC15 ; ---------------------------------------------------------------------------
.text:000000000000CC16                 align 20h
.text:000000000000CC20
.text:000000000000CC20 loc_CC20:                               ; CODE XREF: hash_insert+23↑j
.text:000000000000CC20                 xor     ebx, ebx
.text:000000000000CC22                 jmp     short loc_CBFD
.text:000000000000CC24 ; ---------------------------------------------------------------------------
.text:000000000000CC24
.text:000000000000CC24 loc_CC24:                               ; CODE XREF: hash_insert+3E↑j
.text:000000000000CC24                 call    ___stack_chk_fail
.text:000000000000CC24 ; } // starts at CBD0
.text:000000000000CC24 hash_insert     endp
.text:000000000000CC24
.text:000000000000CC24 ; ---------------------------------------------------------------------------
.text:000000000000CC29                 align 10h
.text:000000000000CC30
.text:000000000000CC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC30
.text:000000000000CC30 ; Attributes: info_from_lumina
.text:000000000000CC30
.text:000000000000CC30 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:000000000000CC30                 public hash_delete
.text:000000000000CC30 hash_delete     proc near               ; CODE XREF: forget_created+31↑p
.text:000000000000CC30
.text:000000000000CC30 var_28          = qword ptr -28h
.text:000000000000CC30 var_20          = qword ptr -20h
.text:000000000000CC30
.text:000000000000CC30 ; __unwind {
.text:000000000000CC30                 push    r12
.text:000000000000CC32                 push    rbp
.text:000000000000CC33                 mov     ecx, 1
.text:000000000000CC38                 push    rbx
.text:000000000000CC39                 mov     rbx, rdi
.text:000000000000CC3C                 sub     rsp, 10h
.text:000000000000CC40                 mov     rdx, rsp
.text:000000000000CC43                 mov     rax, fs:28h
.text:000000000000CC4C                 mov     [rsp+28h+var_20], rax
.text:000000000000CC51                 xor     eax, eax
.text:000000000000CC53                 call    hash_find_entry
.text:000000000000CC58                 test    rax, rax
.text:000000000000CC5B                 mov     rbp, rax
.text:000000000000CC5E                 jz      short loc_CC6F
.text:000000000000CC60                 mov     rax, [rsp+28h+var_28]
.text:000000000000CC64                 sub     qword ptr [rbx+20h], 1
.text:000000000000CC69                 cmp     qword ptr [rax], 0
.text:000000000000CC6D                 jz      short loc_CC90
.text:000000000000CC6F
.text:000000000000CC6F loc_CC6F:                               ; CODE XREF: hash_delete+2E↑j
.text:000000000000CC6F                                         ; hash_delete+9F↓j ...
.text:000000000000CC6F                 mov     rcx, [rsp+28h+var_20]
.text:000000000000CC74                 xor     rcx, fs:28h
.text:000000000000CC7D                 mov     rax, rbp
.text:000000000000CC80                 jnz     loc_CE2E
.text:000000000000CC86                 add     rsp, 10h
.text:000000000000CC8A                 pop     rbx
.text:000000000000CC8B                 pop     rbp
.text:000000000000CC8C                 pop     r12
.text:000000000000CC8E                 retn
.text:000000000000CC8E ; ---------------------------------------------------------------------------
.text:000000000000CC8F                 align 10h
.text:000000000000CC90
.text:000000000000CC90 loc_CC90:                               ; CODE XREF: hash_delete+3D↑j
.text:000000000000CC90                 mov     rax, [rbx+18h]
.text:000000000000CC94                 sub     rax, 1
.text:000000000000CC98                 test    rax, rax
.text:000000000000CC9B                 mov     [rbx+18h], rax
.text:000000000000CC9F                 js      loc_CDA0
.text:000000000000CCA5                 pxor    xmm0, xmm0
.text:000000000000CCA9                 cvtsi2ss xmm0, rax
.text:000000000000CCAE
.text:000000000000CCAE loc_CCAE:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000CCAE                 mov     rax, [rbx+10h]
.text:000000000000CCB2                 mov     rdx, [rbx+28h]
.text:000000000000CCB6                 test    rax, rax
.text:000000000000CCB9                 js      loc_CD80
.text:000000000000CCBF                 pxor    xmm1, xmm1
.text:000000000000CCC3                 cvtsi2ss xmm1, rax
.text:000000000000CCC8
.text:000000000000CCC8 loc_CCC8:                               ; CODE XREF: hash_delete+169↓j
.text:000000000000CCC8                 mulss   xmm1, dword ptr [rdx]
.text:000000000000CCCC                 ucomiss xmm1, xmm0
.text:000000000000CCCF                 jbe     short loc_CC6F
.text:000000000000CCD1                 lea     rdi, [rbx+28h]
.text:000000000000CCD5                 call    check_tuning
.text:000000000000CCDA                 mov     rax, [rbx+10h]
.text:000000000000CCDE                 mov     rdx, [rbx+28h]
.text:000000000000CCE2                 test    rax, rax
.text:000000000000CCE5                 js      loc_CE10
.text:000000000000CCEB                 pxor    xmm0, xmm0
.text:000000000000CCEF                 cvtsi2ss xmm0, rax
.text:000000000000CCF4
.text:000000000000CCF4 loc_CCF4:                               ; CODE XREF: hash_delete+1F9↓j
.text:000000000000CCF4                 mov     rax, [rbx+18h]
.text:000000000000CCF8                 test    rax, rax
.text:000000000000CCFB                 js      loc_CDF0
.text:000000000000CD01                 pxor    xmm1, xmm1
.text:000000000000CD05                 cvtsi2ss xmm1, rax
.text:000000000000CD0A
.text:000000000000CD0A loc_CD0A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000CD0A                 movss   xmm2, dword ptr [rdx]
.text:000000000000CD0E                 mulss   xmm2, xmm0
.text:000000000000CD12                 ucomiss xmm2, xmm1
.text:000000000000CD15                 jbe     loc_CC6F
.text:000000000000CD1B                 cmp     byte ptr [rdx+10h], 0
.text:000000000000CD1F                 mulss   xmm0, dword ptr [rdx+4]
.text:000000000000CD24                 jz      loc_CDE0
.text:000000000000CD2A
.text:000000000000CD2A loc_CD2A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000CD2A                 ucomiss xmm0, cs:dword_152D0
.text:000000000000CD31                 jnb     loc_CDC0
.text:000000000000CD37                 cvttss2si rsi, xmm0
.text:000000000000CD3C
.text:000000000000CD3C loc_CD3C:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000CD3C                 mov     rdi, rbx
.text:000000000000CD3F                 call    hash_rehash
.text:000000000000CD44                 test    al, al
.text:000000000000CD46                 jnz     loc_CC6F
.text:000000000000CD4C                 mov     rdi, [rbx+48h]  ; ptr
.text:000000000000CD50                 test    rdi, rdi
.text:000000000000CD53                 jz      short loc_CD69
.text:000000000000CD55                 nop     dword ptr [rax]
.text:000000000000CD58
.text:000000000000CD58 loc_CD58:                               ; CODE XREF: hash_delete+137↓j
.text:000000000000CD58                 mov     r12, [rdi+8]
.text:000000000000CD5C                 call    free
.text:000000000000CD61                 test    r12, r12
.text:000000000000CD64                 mov     rdi, r12
.text:000000000000CD67                 jnz     short loc_CD58
.text:000000000000CD69
.text:000000000000CD69 loc_CD69:                               ; CODE XREF: hash_delete+123↑j
.text:000000000000CD69                 mov     qword ptr [rbx+48h], 0
.text:000000000000CD71                 jmp     loc_CC6F
.text:000000000000CD71 ; ---------------------------------------------------------------------------
.text:000000000000CD76                 align 20h
.text:000000000000CD80
.text:000000000000CD80 loc_CD80:                               ; CODE XREF: hash_delete+89↑j
.text:000000000000CD80                 mov     rcx, rax
.text:000000000000CD83                 pxor    xmm1, xmm1
.text:000000000000CD87                 shr     rcx, 1
.text:000000000000CD8A                 and     eax, 1
.text:000000000000CD8D                 or      rcx, rax
.text:000000000000CD90                 cvtsi2ss xmm1, rcx
.text:000000000000CD95                 addss   xmm1, xmm1
.text:000000000000CD99                 jmp     loc_CCC8
.text:000000000000CD99 ; ---------------------------------------------------------------------------
.text:000000000000CD9E                 align 20h
.text:000000000000CDA0
.text:000000000000CDA0 loc_CDA0:                               ; CODE XREF: hash_delete+6F↑j
.text:000000000000CDA0                 mov     rdx, rax
.text:000000000000CDA3                 pxor    xmm0, xmm0
.text:000000000000CDA7                 shr     rdx, 1
.text:000000000000CDAA                 and     eax, 1
.text:000000000000CDAD                 or      rdx, rax
.text:000000000000CDB0                 cvtsi2ss xmm0, rdx
.text:000000000000CDB5                 addss   xmm0, xmm0
.text:000000000000CDB9                 jmp     loc_CCAE
.text:000000000000CDB9 ; ---------------------------------------------------------------------------
.text:000000000000CDBE                 align 20h
.text:000000000000CDC0
.text:000000000000CDC0 loc_CDC0:                               ; CODE XREF: hash_delete+101↑j
.text:000000000000CDC0                 subss   xmm0, cs:dword_152D0
.text:000000000000CDC8                 mov     rax, 8000000000000000h
.text:000000000000CDD2                 cvttss2si rsi, xmm0
.text:000000000000CDD7                 xor     rsi, rax
.text:000000000000CDDA                 jmp     loc_CD3C
.text:000000000000CDDA ; ---------------------------------------------------------------------------
.text:000000000000CDDF                 align 20h
.text:000000000000CDE0
.text:000000000000CDE0 loc_CDE0:                               ; CODE XREF: hash_delete+F4↑j
.text:000000000000CDE0                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000CDE5                 jmp     loc_CD2A
.text:000000000000CDE5 ; ---------------------------------------------------------------------------
.text:000000000000CDEA                 align 10h
.text:000000000000CDF0
.text:000000000000CDF0 loc_CDF0:                               ; CODE XREF: hash_delete+CB↑j
.text:000000000000CDF0                 mov     rcx, rax
.text:000000000000CDF3                 pxor    xmm1, xmm1
.text:000000000000CDF7                 shr     rcx, 1
.text:000000000000CDFA                 and     eax, 1
.text:000000000000CDFD                 or      rcx, rax
.text:000000000000CE00                 cvtsi2ss xmm1, rcx
.text:000000000000CE05                 addss   xmm1, xmm1
.text:000000000000CE09                 jmp     loc_CD0A
.text:000000000000CE09 ; ---------------------------------------------------------------------------
.text:000000000000CE0E                 align 10h
.text:000000000000CE10
.text:000000000000CE10 loc_CE10:                               ; CODE XREF: hash_delete+B5↑j
.text:000000000000CE10                 mov     rcx, rax
.text:000000000000CE13                 pxor    xmm0, xmm0
.text:000000000000CE17                 shr     rcx, 1
.text:000000000000CE1A                 and     eax, 1
.text:000000000000CE1D                 or      rcx, rax
.text:000000000000CE20                 cvtsi2ss xmm0, rcx
.text:000000000000CE25                 addss   xmm0, xmm0
.text:000000000000CE29                 jmp     loc_CCF4
.text:000000000000CE2E ; ---------------------------------------------------------------------------
.text:000000000000CE2E
.text:000000000000CE2E loc_CE2E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000CE2E                 call    ___stack_chk_fail
.text:000000000000CE2E ; } // starts at CC30
.text:000000000000CE2E hash_delete     endp
.text:000000000000CE2E
.text:000000000000CE2E ; ---------------------------------------------------------------------------
.text:000000000000CE33                 align 20h
.text:000000000000CE40
.text:000000000000CE40 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE40
.text:000000000000CE40 ; Attributes: info_from_lumina
.text:000000000000CE40
.text:000000000000CE40 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:000000000000CE40                 public triple_hash
.text:000000000000CE40 triple_hash     proc near               ; DATA XREF: dest_info_init+10↑o
.text:000000000000CE40 ; __unwind {
.text:000000000000CE40                 push    rbp
.text:000000000000CE41                 push    rbx
.text:000000000000CE42                 mov     rbp, rdi
.text:000000000000CE45                 mov     rbx, rsi
.text:000000000000CE48                 sub     rsp, 8
.text:000000000000CE4C                 mov     rdi, [rdi]
.text:000000000000CE4F                 call    hash_pjw
.text:000000000000CE54                 xor     rax, [rbp+8]
.text:000000000000CE58                 xor     edx, edx
.text:000000000000CE5A                 add     rsp, 8
.text:000000000000CE5E                 div     rbx
.text:000000000000CE61                 pop     rbx
.text:000000000000CE62                 pop     rbp
.text:000000000000CE63                 mov     rax, rdx
.text:000000000000CE66                 retn
.text:000000000000CE66 ; } // starts at CE40
.text:000000000000CE66 triple_hash     endp
.text:000000000000CE66
.text:000000000000CE66 ; ---------------------------------------------------------------------------
.text:000000000000CE67                 align 10h
.text:000000000000CE70
.text:000000000000CE70 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE70
.text:000000000000CE70
.text:000000000000CE70                 public triple_hash_no_name
.text:000000000000CE70 triple_hash_no_name proc near           ; DATA XREF: src_info_init+10↑o
.text:000000000000CE70 ; __unwind {
.text:000000000000CE70                 mov     rax, [rdi+8]
.text:000000000000CE74                 xor     edx, edx
.text:000000000000CE76                 div     rsi
.text:000000000000CE79                 mov     rax, rdx
.text:000000000000CE7C                 retn
.text:000000000000CE7C ; } // starts at CE70
.text:000000000000CE7C triple_hash_no_name endp
.text:000000000000CE7C
.text:000000000000CE7C ; ---------------------------------------------------------------------------
.text:000000000000CE7D                 align 20h
.text:000000000000CE80
.text:000000000000CE80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE80
.text:000000000000CE80 ; Attributes: info_from_lumina
.text:000000000000CE80
.text:000000000000CE80 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:000000000000CE80                 public triple_compare
.text:000000000000CE80 triple_compare  proc near               ; DATA XREF: dest_info_init+7↑o
.text:000000000000CE80                                         ; src_info_init+7↑o
.text:000000000000CE80 ; __unwind {
.text:000000000000CE80                 xor     eax, eax
.text:000000000000CE82                 mov     rdx, [rsi+8]
.text:000000000000CE86                 cmp     [rdi+8], rdx
.text:000000000000CE8A                 jz      short loc_CE90
.text:000000000000CE8C
.text:000000000000CE8C locret_CE8C:                            ; CODE XREF: triple_compare+18↓j
.text:000000000000CE8C                 rep retn
.text:000000000000CE8C ; ---------------------------------------------------------------------------
.text:000000000000CE8E                 align 10h
.text:000000000000CE90
.text:000000000000CE90 loc_CE90:                               ; CODE XREF: triple_compare+A↑j
.text:000000000000CE90                 mov     rcx, [rsi+10h]
.text:000000000000CE94                 cmp     [rdi+10h], rcx
.text:000000000000CE98                 jnz     short locret_CE8C
.text:000000000000CE9A                 sub     rsp, 8
.text:000000000000CE9E                 mov     rsi, [rsi]
.text:000000000000CEA1                 mov     rdi, [rdi]
.text:000000000000CEA4                 call    same_name
.text:000000000000CEA9                 add     rsp, 8
.text:000000000000CEAD                 retn
.text:000000000000CEAD ; } // starts at CE80
.text:000000000000CEAD triple_compare  endp
.text:000000000000CEAD
.text:000000000000CEAD ; ---------------------------------------------------------------------------
.text:000000000000CEAE                 align 10h
.text:000000000000CEB0
.text:000000000000CEB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CEB0
.text:000000000000CEB0 ; Attributes: info_from_lumina
.text:000000000000CEB0
.text:000000000000CEB0 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:000000000000CEB0                 public triple_compare_ino_str
.text:000000000000CEB0 triple_compare_ino_str proc near
.text:000000000000CEB0 ; __unwind {
.text:000000000000CEB0                 xor     eax, eax
.text:000000000000CEB2                 mov     rdx, [rsi+8]
.text:000000000000CEB6                 cmp     [rdi+8], rdx
.text:000000000000CEBA                 jz      short loc_CEC0
.text:000000000000CEBC
.text:000000000000CEBC locret_CEBC:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:000000000000CEBC                 rep retn
.text:000000000000CEBC ; ---------------------------------------------------------------------------
.text:000000000000CEBE                 align 20h
.text:000000000000CEC0
.text:000000000000CEC0 loc_CEC0:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:000000000000CEC0                 mov     rcx, [rsi+10h]
.text:000000000000CEC4                 cmp     [rdi+10h], rcx
.text:000000000000CEC8                 jnz     short locret_CEBC
.text:000000000000CECA                 sub     rsp, 8
.text:000000000000CECE                 mov     rsi, [rsi]      ; s2
.text:000000000000CED1                 mov     rdi, [rdi]      ; s1
.text:000000000000CED4                 call    _strcmp
.text:000000000000CED9                 test    eax, eax
.text:000000000000CEDB                 setz    al
.text:000000000000CEDE                 add     rsp, 8
.text:000000000000CEE2                 retn
.text:000000000000CEE2 ; } // starts at CEB0
.text:000000000000CEE2 triple_compare_ino_str endp
.text:000000000000CEE2
.text:000000000000CEE2 ; ---------------------------------------------------------------------------
.text:000000000000CEE3                 align 10h
.text:000000000000CEF0
.text:000000000000CEF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CEF0
.text:000000000000CEF0
.text:000000000000CEF0 ; __int64 __fastcall triple_free(void *ptr)
.text:000000000000CEF0                 public triple_free
.text:000000000000CEF0 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:000000000000CEF0                                         ; DATA XREF: dest_info_init↑o ...
.text:000000000000CEF0 ; __unwind {
.text:000000000000CEF0                 push    rbx
.text:000000000000CEF1                 mov     rbx, rdi
.text:000000000000CEF4                 mov     rdi, [rdi]      ; ptr
.text:000000000000CEF7                 call    free
.text:000000000000CEFC                 mov     rdi, rbx        ; ptr
.text:000000000000CEFF                 pop     rbx
.text:000000000000CF00                 jmp     free
.text:000000000000CF00 ; } // starts at CEF0
.text:000000000000CF00 triple_free     endp
.text:000000000000CF00
.text:000000000000CF00 ; ---------------------------------------------------------------------------
.text:000000000000CF05                 align 10h
.text:000000000000CF10
.text:000000000000CF10 ; =============== S U B R O U T I N E =======================================
.text:000000000000CF10
.text:000000000000CF10
.text:000000000000CF10                 public opendirat
.text:000000000000CF10 opendirat       proc near               ; CODE XREF: backupfile_internal+4BD↑p
.text:000000000000CF10 ; __unwind {
.text:000000000000CF10                 push    r13
.text:000000000000CF12                 push    r12
.text:000000000000CF14                 or      edx, 90900h
.text:000000000000CF1A                 push    rbp
.text:000000000000CF1B                 push    rbx
.text:000000000000CF1C                 xor     eax, eax
.text:000000000000CF1E                 mov     r12, rcx
.text:000000000000CF21                 sub     rsp, 8
.text:000000000000CF25                 call    openat_safer
.text:000000000000CF2A                 test    eax, eax
.text:000000000000CF2C                 js      short loc_CF80
.text:000000000000CF2E                 mov     edi, eax        ; fd
.text:000000000000CF30                 mov     ebx, eax
.text:000000000000CF32                 call    _fdopendir
.text:000000000000CF37                 test    rax, rax
.text:000000000000CF3A                 mov     rbp, rax
.text:000000000000CF3D                 jz      short loc_CF58
.text:000000000000CF3F                 mov     [r12], ebx
.text:000000000000CF43                 add     rsp, 8
.text:000000000000CF47                 mov     rax, rbp
.text:000000000000CF4A                 pop     rbx
.text:000000000000CF4B                 pop     rbp
.text:000000000000CF4C                 pop     r12
.text:000000000000CF4E                 pop     r13
.text:000000000000CF50                 retn
.text:000000000000CF50 ; ---------------------------------------------------------------------------
.text:000000000000CF51                 align 8
.text:000000000000CF58
.text:000000000000CF58 loc_CF58:                               ; CODE XREF: opendirat+2D↑j
.text:000000000000CF58                 call    ___errno_location
.text:000000000000CF5D                 mov     r13d, [rax]
.text:000000000000CF60                 mov     r12, rax
.text:000000000000CF63                 mov     edi, ebx        ; fd
.text:000000000000CF65                 call    _close
.text:000000000000CF6A                 mov     rax, rbp
.text:000000000000CF6D                 mov     [r12], r13d
.text:000000000000CF71                 add     rsp, 8
.text:000000000000CF75                 pop     rbx
.text:000000000000CF76                 pop     rbp
.text:000000000000CF77                 pop     r12
.text:000000000000CF79                 pop     r13
.text:000000000000CF7B                 retn
.text:000000000000CF7B ; ---------------------------------------------------------------------------
.text:000000000000CF7C                 align 20h
.text:000000000000CF80
.text:000000000000CF80 loc_CF80:                               ; CODE XREF: opendirat+1C↑j
.text:000000000000CF80                 add     rsp, 8
.text:000000000000CF84                 xor     ebp, ebp
.text:000000000000CF86                 pop     rbx
.text:000000000000CF87                 mov     rax, rbp
.text:000000000000CF8A                 pop     rbp
.text:000000000000CF8B                 pop     r12
.text:000000000000CF8D                 pop     r13
.text:000000000000CF8F                 retn
.text:000000000000CF8F ; } // starts at CF10
.text:000000000000CF8F opendirat       endp
.text:000000000000CF8F
.text:000000000000CF90
.text:000000000000CF90 ; =============== S U B R O U T I N E =======================================
.text:000000000000CF90
.text:000000000000CF90
.text:000000000000CF90                 public set_program_name
.text:000000000000CF90 set_program_name proc near              ; CODE XREF: main+46↑p
.text:000000000000CF90 ; __unwind {
.text:000000000000CF90                 test    rdi, rdi
.text:000000000000CF93                 push    rbx
.text:000000000000CF94                 jz      short loc_D00D
.text:000000000000CF96                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000CF9B                 mov     rbx, rdi
.text:000000000000CF9E                 call    _strrchr
.text:000000000000CFA3                 test    rax, rax
.text:000000000000CFA6                 jz      short loc_CFFD
.text:000000000000CFA8                 lea     r8, [rax+1]
.text:000000000000CFAC                 mov     rdx, r8
.text:000000000000CFAF                 sub     rdx, rbx
.text:000000000000CFB2                 cmp     rdx, 6
.text:000000000000CFB6                 jle     short loc_CFFD
.text:000000000000CFB8                 lea     rsi, [rax-6]
.text:000000000000CFBC                 lea     rdi, aLibs      ; "/.libs/"
.text:000000000000CFC3                 mov     ecx, 7
.text:000000000000CFC8                 repe cmpsb
.text:000000000000CFCA                 setnbe  dl
.text:000000000000CFCD                 sbb     dl, 0
.text:000000000000CFD0                 test    dl, dl
.text:000000000000CFD2                 jnz     short loc_CFFD
.text:000000000000CFD4                 lea     rdi, aLt        ; "lt-"
.text:000000000000CFDB                 mov     ecx, 3
.text:000000000000CFE0                 mov     rsi, r8
.text:000000000000CFE3                 mov     rbx, r8
.text:000000000000CFE6                 repe cmpsb
.text:000000000000CFE8                 setnbe  dl
.text:000000000000CFEB                 sbb     dl, 0
.text:000000000000CFEE                 test    dl, dl
.text:000000000000CFF0                 jnz     short loc_CFFD
.text:000000000000CFF2                 lea     rbx, [rax+4]
.text:000000000000CFF6                 mov     cs:__bss_start, rbx
.text:000000000000CFFD
.text:000000000000CFFD loc_CFFD:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000CFFD                                         ; set_program_name+26↑j ...
.text:000000000000CFFD                 mov     cs:program_name, rbx
.text:000000000000D004                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000D00B                 pop     rbx
.text:000000000000D00C                 retn
.text:000000000000D00D ; ---------------------------------------------------------------------------
.text:000000000000D00D
.text:000000000000D00D loc_D00D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000D00D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000D014                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000D01B                 mov     edx, 37h ; '7'  ; n
.text:000000000000D020                 mov     esi, 1          ; size
.text:000000000000D025                 call    _fwrite
.text:000000000000D02A                 call    _abort
.text:000000000000D02A ; } // starts at CF90
.text:000000000000D02A set_program_name endp
.text:000000000000D02A
.text:000000000000D02A ; ---------------------------------------------------------------------------
.text:000000000000D02F                 align 10h
.text:000000000000D030
.text:000000000000D030 ; =============== S U B R O U T I N E =======================================
.text:000000000000D030
.text:000000000000D030
.text:000000000000D030                 public qcopy_acl
.text:000000000000D030 qcopy_acl       proc near               ; CODE XREF: copy_acl+A↑p
.text:000000000000D030
.text:000000000000D030 var_24          = byte ptr -24h
.text:000000000000D030 var_20          = qword ptr -20h
.text:000000000000D030
.text:000000000000D030 ; __unwind {
.text:000000000000D030                 push    r12
.text:000000000000D032                 push    rbp
.text:000000000000D033                 mov     r12d, ecx
.text:000000000000D036                 push    rbx
.text:000000000000D037                 mov     rbp, rdx
.text:000000000000D03A                 mov     edx, r8d
.text:000000000000D03D                 sub     rsp, 10h
.text:000000000000D041                 lea     rbx, [rsp+28h+var_24]
.text:000000000000D046                 mov     rax, fs:28h
.text:000000000000D04F                 mov     [rsp+28h+var_20], rax
.text:000000000000D054                 xor     eax, eax
.text:000000000000D056                 mov     rcx, rbx
.text:000000000000D059                 call    get_permissions
.text:000000000000D05E                 test    eax, eax
.text:000000000000D060                 jnz     short loc_D098
.text:000000000000D062                 mov     rsi, rbp
.text:000000000000D065                 mov     rdi, rbx
.text:000000000000D068                 mov     edx, r12d
.text:000000000000D06B                 call    set_permissions
.text:000000000000D070                 mov     rdi, rbx
.text:000000000000D073                 mov     ebp, eax
.text:000000000000D075                 call    free_permission_context
.text:000000000000D07A
.text:000000000000D07A loc_D07A:                               ; CODE XREF: qcopy_acl+6D↓j
.text:000000000000D07A                 mov     rcx, [rsp+28h+var_20]
.text:000000000000D07F                 xor     rcx, fs:28h
.text:000000000000D088                 mov     eax, ebp
.text:000000000000D08A                 jnz     short loc_D09F
.text:000000000000D08C                 add     rsp, 10h
.text:000000000000D090                 pop     rbx
.text:000000000000D091                 pop     rbp
.text:000000000000D092                 pop     r12
.text:000000000000D094                 retn
.text:000000000000D094 ; ---------------------------------------------------------------------------
.text:000000000000D095                 align 8
.text:000000000000D098
.text:000000000000D098 loc_D098:                               ; CODE XREF: qcopy_acl+30↑j
.text:000000000000D098                 mov     ebp, 0FFFFFFFEh
.text:000000000000D09D                 jmp     short loc_D07A
.text:000000000000D09F ; ---------------------------------------------------------------------------
.text:000000000000D09F
.text:000000000000D09F loc_D09F:                               ; CODE XREF: qcopy_acl+5A↑j
.text:000000000000D09F                 call    ___stack_chk_fail
.text:000000000000D09F ; } // starts at D030
.text:000000000000D09F qcopy_acl       endp
.text:000000000000D09F
.text:000000000000D09F ; ---------------------------------------------------------------------------
.text:000000000000D0A4                 align 10h
.text:000000000000D0B0
.text:000000000000D0B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D0B0
.text:000000000000D0B0
.text:000000000000D0B0                 public qset_acl
.text:000000000000D0B0 qset_acl        proc near               ; CODE XREF: set_owner+12D↑p
.text:000000000000D0B0                                         ; set_acl+7↑p
.text:000000000000D0B0
.text:000000000000D0B0 var_24          = dword ptr -24h
.text:000000000000D0B0 var_20          = qword ptr -20h
.text:000000000000D0B0
.text:000000000000D0B0 ; __unwind {
.text:000000000000D0B0                 push    rbp
.text:000000000000D0B1                 push    rbx
.text:000000000000D0B2                 sub     rsp, 18h
.text:000000000000D0B6                 lea     rbx, [rsp+28h+var_24]
.text:000000000000D0BB                 mov     [rsp+28h+var_24], edx
.text:000000000000D0BF                 mov     edx, esi
.text:000000000000D0C1                 mov     rsi, rdi
.text:000000000000D0C4                 mov     rdi, rbx
.text:000000000000D0C7                 mov     rax, fs:28h
.text:000000000000D0D0                 mov     [rsp+28h+var_20], rax
.text:000000000000D0D5                 xor     eax, eax
.text:000000000000D0D7                 call    set_permissions
.text:000000000000D0DC                 mov     rdi, rbx
.text:000000000000D0DF                 mov     ebp, eax
.text:000000000000D0E1                 call    free_permission_context
.text:000000000000D0E6                 mov     rcx, [rsp+28h+var_20]
.text:000000000000D0EB                 xor     rcx, fs:28h
.text:000000000000D0F4                 jnz     short loc_D0FF
.text:000000000000D0F6                 add     rsp, 18h
.text:000000000000D0FA                 mov     eax, ebp
.text:000000000000D0FC                 pop     rbx
.text:000000000000D0FD                 pop     rbp
.text:000000000000D0FE                 retn
.text:000000000000D0FF ; ---------------------------------------------------------------------------
.text:000000000000D0FF
.text:000000000000D0FF loc_D0FF:                               ; CODE XREF: qset_acl+44↑j
.text:000000000000D0FF                 call    ___stack_chk_fail
.text:000000000000D0FF ; } // starts at D0B0
.text:000000000000D0FF qset_acl        endp
.text:000000000000D0FF
.text:000000000000D0FF ; ---------------------------------------------------------------------------
.text:000000000000D104                 align 10h
.text:000000000000D110
.text:000000000000D110 ; =============== S U B R O U T I N E =======================================
.text:000000000000D110
.text:000000000000D110 ; Attributes: info_from_lumina
.text:000000000000D110
.text:000000000000D110 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:000000000000D110 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:000000000000D110                                         ; quotearg_buffer_restyled+117B↓p
.text:000000000000D110 ; __unwind {
.text:000000000000D110                 push    rbp
.text:000000000000D111                 push    rbx
.text:000000000000D112                 mov     rbp, rdi
.text:000000000000D115                 mov     ebx, esi
.text:000000000000D117                 sub     rsp, 8
.text:000000000000D11B                 call    locale_charset
.text:000000000000D120                 movzx   edx, byte ptr [rax]
.text:000000000000D123                 and     edx, 0FFFFFFDFh
.text:000000000000D126                 cmp     dl, 55h ; 'U'
.text:000000000000D129                 jz      short loc_D1A0
.text:000000000000D12B                 cmp     dl, 47h ; 'G'
.text:000000000000D12E                 jz      short loc_D150
.text:000000000000D130
.text:000000000000D130 loc_D130:                               ; CODE XREF: gettext_quote+4A↓j
.text:000000000000D130                                         ; gettext_quote+50↓j ...
.text:000000000000D130                 lea     rax, unk_15333
.text:000000000000D137                 lea     rdx, asc_15335  ; "'"
.text:000000000000D13E                 cmp     ebx, 9
.text:000000000000D141                 cmovnz  rax, rdx
.text:000000000000D145                 add     rsp, 8
.text:000000000000D149                 pop     rbx
.text:000000000000D14A                 pop     rbp
.text:000000000000D14B                 retn
.text:000000000000D14B ; ---------------------------------------------------------------------------
.text:000000000000D14C                 align 10h
.text:000000000000D150
.text:000000000000D150 loc_D150:                               ; CODE XREF: gettext_quote+1E↑j
.text:000000000000D150                 movzx   edx, byte ptr [rax+1]
.text:000000000000D154                 and     edx, 0FFFFFFDFh
.text:000000000000D157                 cmp     dl, 42h ; 'B'
.text:000000000000D15A                 jnz     short loc_D130
.text:000000000000D15C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:000000000000D160                 jnz     short loc_D130
.text:000000000000D162                 cmp     byte ptr [rax+3], 38h ; '8'
.text:000000000000D166                 jnz     short loc_D130
.text:000000000000D168                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000D16C                 jnz     short loc_D130
.text:000000000000D16E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:000000000000D172                 jnz     short loc_D130
.text:000000000000D174                 cmp     byte ptr [rax+6], 30h ; '0'
.text:000000000000D178                 jnz     short loc_D130
.text:000000000000D17A                 cmp     byte ptr [rax+7], 0
.text:000000000000D17E                 jnz     short loc_D130
.text:000000000000D180                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000D184                 lea     rax, unk_1532C
.text:000000000000D18B                 lea     rdx, unk_15330
.text:000000000000D192                 cmovnz  rax, rdx
.text:000000000000D196                 add     rsp, 8
.text:000000000000D19A                 pop     rbx
.text:000000000000D19B                 pop     rbp
.text:000000000000D19C                 retn
.text:000000000000D19C ; ---------------------------------------------------------------------------
.text:000000000000D19D                 align 20h
.text:000000000000D1A0
.text:000000000000D1A0 loc_D1A0:                               ; CODE XREF: gettext_quote+19↑j
.text:000000000000D1A0                 movzx   edx, byte ptr [rax+1]
.text:000000000000D1A4                 and     edx, 0FFFFFFDFh
.text:000000000000D1A7                 cmp     dl, 54h ; 'T'
.text:000000000000D1AA                 jnz     short loc_D130
.text:000000000000D1AC                 movzx   edx, byte ptr [rax+2]
.text:000000000000D1B0                 and     edx, 0FFFFFFDFh
.text:000000000000D1B3                 cmp     dl, 46h ; 'F'
.text:000000000000D1B6                 jnz     loc_D130
.text:000000000000D1BC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:000000000000D1C0                 jnz     loc_D130
.text:000000000000D1C6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000D1CA                 jnz     loc_D130
.text:000000000000D1D0                 cmp     byte ptr [rax+5], 0
.text:000000000000D1D4                 jnz     loc_D130
.text:000000000000D1DA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000D1DE                 lea     rax, unk_15324
.text:000000000000D1E5                 lea     rdx, unk_15328
.text:000000000000D1EC                 cmovnz  rax, rdx
.text:000000000000D1F0                 add     rsp, 8
.text:000000000000D1F4                 pop     rbx
.text:000000000000D1F5                 pop     rbp
.text:000000000000D1F6                 retn
.text:000000000000D1F6 ; } // starts at D110
.text:000000000000D1F6 gettext_quote   endp
.text:000000000000D1F6
.text:000000000000D1F6 ; ---------------------------------------------------------------------------
.text:000000000000D1F7                 align 20h
.text:000000000000D200
.text:000000000000D200 ; =============== S U B R O U T I N E =======================================
.text:000000000000D200
.text:000000000000D200 ; Attributes: info_from_lumina
.text:000000000000D200
.text:000000000000D200 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:000000000000D200 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:000000000000D200                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:000000000000D200
.text:000000000000D200 var_E0          = dword ptr -0E0h
.text:000000000000D200 var_DB          = byte ptr -0DBh
.text:000000000000D200 var_DA          = byte ptr -0DAh
.text:000000000000D200 var_D9          = byte ptr -0D9h
.text:000000000000D200 s               = qword ptr -0D8h
.text:000000000000D200 n               = qword ptr -0D0h
.text:000000000000D200 var_C8          = qword ptr -0C8h
.text:000000000000D200 ps              = qword ptr -0C0h
.text:000000000000D200 var_B8          = qword ptr -0B8h
.text:000000000000D200 var_B0          = qword ptr -0B0h
.text:000000000000D200 var_A8          = qword ptr -0A8h
.text:000000000000D200 s2              = qword ptr -0A0h
.text:000000000000D200 var_98          = qword ptr -98h
.text:000000000000D200 var_90          = qword ptr -90h
.text:000000000000D200 var_88          = qword ptr -88h
.text:000000000000D200 var_80          = qword ptr -80h
.text:000000000000D200 var_78          = qword ptr -78h
.text:000000000000D200 var_70          = dword ptr -70h
.text:000000000000D200 var_6C          = byte ptr -6Ch
.text:000000000000D200 var_6B          = byte ptr -6Bh
.text:000000000000D200 var_6A          = byte ptr -6Ah
.text:000000000000D200 var_69          = byte ptr -69h
.text:000000000000D200 var_68          = qword ptr -68h
.text:000000000000D200 var_60          = qword ptr -60h
.text:000000000000D200 wc              = dword ptr -4Ch
.text:000000000000D200 var_48          = qword ptr -48h
.text:000000000000D200 var_40          = qword ptr -40h
.text:000000000000D200 arg_0           = qword ptr  8
.text:000000000000D200 arg_8           = qword ptr  10h
.text:000000000000D200 arg_10          = qword ptr  18h
.text:000000000000D200
.text:000000000000D200 ; __unwind {
.text:000000000000D200                 push    r15
.text:000000000000D202                 push    r14
.text:000000000000D204                 mov     r15d, r8d
.text:000000000000D207                 push    r13
.text:000000000000D209                 push    r12
.text:000000000000D20B                 mov     r14, rdi
.text:000000000000D20E                 push    rbp
.text:000000000000D20F                 push    rbx
.text:000000000000D210                 mov     ebx, r9d
.text:000000000000D213                 mov     r13, rsi
.text:000000000000D216                 mov     rbp, rcx
.text:000000000000D219                 and     ebx, 2
.text:000000000000D21C                 sub     rsp, 0B8h
.text:000000000000D223                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000D22B                 mov     [rsp+0E8h+s], rdx
.text:000000000000D230                 mov     [rsp+0E8h+var_E0], r8d
.text:000000000000D235                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000D23A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000D23F                 mov     rax, [rsp+0E8h+arg_8]
.text:000000000000D247                 mov     [rsp+0E8h+var_80], rax
.text:000000000000D24C                 mov     rax, [rsp+0E8h+arg_10]
.text:000000000000D254                 mov     [rsp+0E8h+var_88], rax
.text:000000000000D259                 mov     rax, fs:28h
.text:000000000000D262                 mov     [rsp+0E8h+var_40], rax
.text:000000000000D26A                 xor     eax, eax
.text:000000000000D26C                 call    ___ctype_get_mb_cur_max
.text:000000000000D271                 cmp     r15d, 0Ah       ; switch 11 cases
.text:000000000000D275                 mov     [rsp+0E8h+var_90], rax
.text:000000000000D27A                 ja      def_D291        ; jumptable 00000000000121F1 default case
.text:000000000000D280                 lea     rcx, jpt_D291
.text:000000000000D287                 mov     edx, r15d
.text:000000000000D28A                 movsxd  rax, ds:(jpt_D291 - 153A0h)[rcx+rdx*4]
.text:000000000000D28E                 add     rax, rcx
.text:000000000000D291                 jmp     rax             ; switch jump
.text:000000000000D293 ; ---------------------------------------------------------------------------
.text:000000000000D293
.text:000000000000D293 loc_D293:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000D293                                         ; quotearg_buffer_restyled+C66↓j
.text:000000000000D293                                         ; DATA XREF: ...
.text:000000000000D293                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:000000000000D298                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000D29D                 xor     r12d, r12d
.text:000000000000D2A0                 mov     [rsp+0E8h+var_98], 0
.text:000000000000D2A9                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000D2AE                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000D2B3
.text:000000000000D2B3 loc_D2B3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:000000000000D2B3                 lea     rax, asc_15335  ; "'"
.text:000000000000D2BA                 mov     [rsp+0E8h+n], 1
.text:000000000000D2C3                 xor     r15d, r15d
.text:000000000000D2C6                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000D2CE                 mov     [rsp+0E8h+s2], rax
.text:000000000000D2D3
.text:000000000000D2D3 loc_D2D3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:000000000000D2D3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:000000000000D2D3                 xor     r11d, r11d
.text:000000000000D2D6                 mov     rax, rbp
.text:000000000000D2D9                 mov     r8d, r12d
.text:000000000000D2DC                 mov     rbp, r11
.text:000000000000D2DF                 mov     r11, rax
.text:000000000000D2E2                 nop     word ptr [rax+rax+00h]
.text:000000000000D2E8
.text:000000000000D2E8 loc_D2E8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:000000000000D2E8                                         ; quotearg_buffer_restyled+42C↓j
.text:000000000000D2E8                 cmp     r11, rbp
.text:000000000000D2EB                 setnz   r12b
.text:000000000000D2EF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000D2F3                 jnz     short loc_D302
.text:000000000000D2F5                 mov     rax, [rsp+0E8h+s]
.text:000000000000D2FA                 cmp     byte ptr [rax+rbp], 0
.text:000000000000D2FE                 setnz   r12b
.text:000000000000D302
.text:000000000000D302 loc_D302:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:000000000000D302                 test    r12b, r12b
.text:000000000000D305                 jz      loc_D960
.text:000000000000D30B                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D310                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000D315                 lea     r9, [rdi+rbp]
.text:000000000000D319                 setnz   al
.text:000000000000D31C                 and     al, [rsp+0E8h+var_DB]
.text:000000000000D320                 mov     r10d, eax
.text:000000000000D323                 jz      loc_D3D0
.text:000000000000D329                 mov     rax, [rsp+0E8h+n]
.text:000000000000D32E                 test    rax, rax
.text:000000000000D331                 jz      loc_D760
.text:000000000000D337                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000D33B                 lea     rbx, [rbp+rax+0]
.text:000000000000D340                 jnz     short loc_D370
.text:000000000000D342                 cmp     rax, 1
.text:000000000000D346                 jbe     short loc_D370
.text:000000000000D348                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000D34D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:000000000000D352                 mov     [rsp+0E8h+ps], r9
.text:000000000000D357                 call    _strlen
.text:000000000000D35C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000D362                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000D368                 mov     r11, rax
.text:000000000000D36B                 mov     r9, [rsp+0E8h+ps]
.text:000000000000D370
.text:000000000000D370 loc_D370:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:000000000000D370                                         ; quotearg_buffer_restyled+146↑j
.text:000000000000D370                 cmp     rbx, r11
.text:000000000000D373                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000D378                 ja      loc_D930
.text:000000000000D37E                 mov     rdx, [rsp+0E8h+n] ; n
.text:000000000000D383                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:000000000000D388                 mov     rdi, r9         ; s1
.text:000000000000D38B                 mov     [rsp+0E8h+var_A8], r11
.text:000000000000D390                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000D395                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000D39A                 call    _memcmp
.text:000000000000D39F                 test    eax, eax
.text:000000000000D3A1                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000D3A6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000D3AC                 mov     r11, [rsp+0E8h+var_A8]
.text:000000000000D3B1                 jnz     loc_D930
.text:000000000000D3B7                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D3BC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000D3C2                 jnz     loc_E345
.text:000000000000D3C8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000D3D0
.text:000000000000D3D0 loc_D3D0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:000000000000D3D0                                         ; quotearg_buffer_restyled+733↓j
.text:000000000000D3D0                 movzx   ebx, byte ptr [r9]
.text:000000000000D3D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000D3D7                 ja      def_D3EE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000D3DD                 lea     rcx, jpt_D3EE
.text:000000000000D3E4                 movzx   edx, bl
.text:000000000000D3E7                 movsxd  rax, ds:(jpt_D3EE - 153CCh)[rcx+rdx*4]
.text:000000000000D3EB                 add     rax, rcx
.text:000000000000D3EE                 jmp     rax             ; switch jump
.text:000000000000D3F0 ; ---------------------------------------------------------------------------
.text:000000000000D3F0
.text:000000000000D3F0 loc_D3F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000D3F0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D3F0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:000000000000D3F3
.text:000000000000D3F3 loc_D3F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D3F3                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D3F3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:000000000000D3F7                 setnz   al
.text:000000000000D3FA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000D3FE                 jnz     short loc_D40C
.text:000000000000D400                 mov     rax, [rsp+0E8h+s]
.text:000000000000D405                 cmp     byte ptr [rax+1], 0
.text:000000000000D409                 setnz   al
.text:000000000000D40C
.text:000000000000D40C loc_D40C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000D40C                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D411                 setz    dl
.text:000000000000D414                 test    al, al
.text:000000000000D416                 jz      loc_D668
.text:000000000000D41C
.text:000000000000D41C loc_D41C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000D41C                 xor     r12d, r12d
.text:000000000000D41F                 xor     eax, eax
.text:000000000000D421                 nop     dword ptr [rax+00000000h]
.text:000000000000D428
.text:000000000000D428 loc_D428:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:000000000000D428                                         ; quotearg_buffer_restyled+30C↓j ...
.text:000000000000D428                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000D42D                 jnz     loc_D542
.text:000000000000D433                 test    dl, dl
.text:000000000000D435                 jnz     loc_D542
.text:000000000000D43B
.text:000000000000D43B loc_D43B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000D43B                 mov     rsi, [rsp+0E8h+var_C8]
.text:000000000000D440                 test    rsi, rsi
.text:000000000000D443                 jz      short loc_D459
.text:000000000000D445                 mov     edx, ebx
.text:000000000000D447                 shr     dl, 5
.text:000000000000D44A                 movzx   edx, dl
.text:000000000000D44D                 mov     edx, [rsi+rdx*4]
.text:000000000000D450                 bt      edx, ebx
.text:000000000000D453                 jb      loc_D5A3
.text:000000000000D459
.text:000000000000D459 loc_D459:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:000000000000D459                                         ; quotearg_buffer_restyled+34D↓j ...
.text:000000000000D459                 test    r10b, r10b
.text:000000000000D45C                 jnz     loc_D5A3
.text:000000000000D462                 xor     eax, 1
.text:000000000000D465                 add     rbp, 1
.text:000000000000D469                 and     eax, r8d
.text:000000000000D46C
.text:000000000000D46C loc_D46C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000D46C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000D46C                 test    al, al
.text:000000000000D46E                 jz      short loc_D490
.text:000000000000D470                 cmp     r13, r15
.text:000000000000D473                 jbe     short loc_D47A
.text:000000000000D475                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D47A
.text:000000000000D47A loc_D47A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000D47A                 lea     rax, [r15+1]
.text:000000000000D47E                 cmp     r13, rax
.text:000000000000D481                 jbe     short loc_D489
.text:000000000000D483                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000D489
.text:000000000000D489 loc_D489:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:000000000000D489                 add     r15, 2
.text:000000000000D48D                 xor     r8d, r8d
.text:000000000000D490
.text:000000000000D490 loc_D490:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:000000000000D490                                         ; quotearg_buffer_restyled+403↓j ...
.text:000000000000D490                 cmp     r15, r13
.text:000000000000D493                 jnb     short loc_D499
.text:000000000000D495                 mov     [r14+r15], bl
.text:000000000000D499
.text:000000000000D499 loc_D499:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:000000000000D499                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000D49E                 add     r15, 1
.text:000000000000D4A2                 mov     eax, 0
.text:000000000000D4A7                 test    r12b, r12b
.text:000000000000D4AA                 cmovz   edi, eax
.text:000000000000D4AD                 mov     [rsp+0E8h+var_DA], dil
.text:000000000000D4B2                 jmp     loc_D2E8
.text:000000000000D4B2 ; ---------------------------------------------------------------------------
.text:000000000000D4B7                 align 20h
.text:000000000000D4C0
.text:000000000000D4C0 loc_D4C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000D4C0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D4C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:000000000000D4C3
.text:000000000000D4C3 loc_D4C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D4C3                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D4C3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:000000000000D4C7                 cmp     eax, 2
.text:000000000000D4CA                 jz      loc_DA88
.text:000000000000D4D0                 cmp     eax, 5
.text:000000000000D4D3                 jz      loc_DA48
.text:000000000000D4D9                 cmp     eax, 2
.text:000000000000D4DC                 mov     ebx, 3Fh ; '?'
.text:000000000000D4E1                 setz    dl
.text:000000000000D4E4                 xor     r12d, r12d
.text:000000000000D4E7                 xor     eax, eax
.text:000000000000D4E9                 jmp     loc_D428
.text:000000000000D4E9 ; ---------------------------------------------------------------------------
.text:000000000000D4EE                 align 10h
.text:000000000000D4F0
.text:000000000000D4F0 loc_D4F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000D4F0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D4F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:000000000000D4F3
.text:000000000000D4F3 loc_D4F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D4F3                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D4F3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:000000000000D4F8                 jz      loc_DA00
.text:000000000000D4FE                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000D503                 xor     edx, edx
.text:000000000000D505                 xor     eax, eax
.text:000000000000D507                 mov     ebx, 27h ; '''
.text:000000000000D50C                 jmp     loc_D428
.text:000000000000D50C ; ---------------------------------------------------------------------------
.text:000000000000D511                 align 8
.text:000000000000D518
.text:000000000000D518 loc_D518:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D518                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D518                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000D51D                 mov     ebx, 74h ; 't'
.text:000000000000D522
.text:000000000000D522 loc_D522:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:000000000000D522                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:000000000000D522                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D527                 setz    al
.text:000000000000D52A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000D52E                 jnz     loc_D67E
.text:000000000000D534
.text:000000000000D534 loc_D534:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:000000000000D534                                         ; quotearg_buffer_restyled+45A↓j ...
.text:000000000000D534                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000D539                 jnz     short loc_D5A0
.text:000000000000D53B
.text:000000000000D53B loc_D53B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000D53B                 mov     ebx, edx
.text:000000000000D53D                 xor     r12d, r12d
.text:000000000000D540                 xor     eax, eax
.text:000000000000D542
.text:000000000000D542 loc_D542:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:000000000000D542                                         ; quotearg_buffer_restyled+235↑j
.text:000000000000D542                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D547                 jnz     loc_D43B
.text:000000000000D54D                 jmp     loc_D459
.text:000000000000D54D ; ---------------------------------------------------------------------------
.text:000000000000D552                 align 8
.text:000000000000D558
.text:000000000000D558 loc_D558:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D558                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D558                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000D55D                 mov     ebx, 62h ; 'b'
.text:000000000000D562                 jmp     short loc_D534
.text:000000000000D562 ; ---------------------------------------------------------------------------
.text:000000000000D564                 align 8
.text:000000000000D568
.text:000000000000D568 loc_D568:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D568                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D568                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000D56D                 jz      loc_D940
.text:000000000000D573                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000D578                 jz      loc_D790
.text:000000000000D57E
.text:000000000000D57E loc_D57E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000D57E                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D583                 jz      loc_D790
.text:000000000000D589                 cmp     [rsp+0E8h+n], 0
.text:000000000000D58F                 jnz     loc_D94B
.text:000000000000D595                 mov     ebx, 5Ch ; '\'
.text:000000000000D59A                 nop     word ptr [rax+rax+00h]
.text:000000000000D5A0
.text:000000000000D5A0 loc_D5A0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:000000000000D5A0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:000000000000D5A0                 xor     r12d, r12d
.text:000000000000D5A3
.text:000000000000D5A3 loc_D5A3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:000000000000D5A3                                         ; quotearg_buffer_restyled+25C↑j
.text:000000000000D5A3                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D5A8                 setz    dl
.text:000000000000D5AB                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D5B0                 mov     eax, edx
.text:000000000000D5B2                 jnz     loc_DE08
.text:000000000000D5B8                 mov     eax, r8d
.text:000000000000D5BB                 xor     eax, 1
.text:000000000000D5BE                 and     al, dl
.text:000000000000D5C0                 jz      short loc_D5F1
.text:000000000000D5C2                 cmp     r13, r15
.text:000000000000D5C5                 jbe     short loc_D5CC
.text:000000000000D5C7                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D5CC
.text:000000000000D5CC loc_D5CC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000D5CC                 lea     rdx, [r15+1]
.text:000000000000D5D0                 cmp     r13, rdx
.text:000000000000D5D3                 jbe     short loc_D5DB
.text:000000000000D5D5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000D5DB
.text:000000000000D5DB loc_D5DB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000D5DB                 lea     rdx, [r15+2]
.text:000000000000D5DF                 cmp     r13, rdx
.text:000000000000D5E2                 jbe     short loc_D5EA
.text:000000000000D5E4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000D5EA
.text:000000000000D5EA loc_D5EA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000D5EA                 add     r15, 3
.text:000000000000D5EE                 mov     r8d, eax
.text:000000000000D5F1
.text:000000000000D5F1 loc_D5F1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:000000000000D5F1                 cmp     r13, r15
.text:000000000000D5F4                 jbe     short loc_D5FB
.text:000000000000D5F6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000D5FB
.text:000000000000D5FB loc_D5FB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000D5FB                 add     r15, 1
.text:000000000000D5FF                 add     rbp, 1
.text:000000000000D603                 jmp     loc_D490
.text:000000000000D603 ; ---------------------------------------------------------------------------
.text:000000000000D608                 align 10h
.text:000000000000D610
.text:000000000000D610 loc_D610:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D610                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D610                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:000000000000D615                 jnz     loc_D7E3
.text:000000000000D61B                 xor     edx, edx
.text:000000000000D61D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:000000000000D622                 jz      loc_D53B
.text:000000000000D628                 add     rbp, 1
.text:000000000000D62C                 jmp     loc_D2E8
.text:000000000000D62C ; ---------------------------------------------------------------------------
.text:000000000000D631                 align 8
.text:000000000000D638
.text:000000000000D638 loc_D638:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D638                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D638                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000D63D                 setz    dl
.text:000000000000D640                 xor     eax, eax
.text:000000000000D642                 jmp     loc_D428
.text:000000000000D642 ; ---------------------------------------------------------------------------
.text:000000000000D647                 align 10h
.text:000000000000D650
.text:000000000000D650 loc_D650:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D650                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D650                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:000000000000D655                 mov     ebx, 61h ; 'a'
.text:000000000000D65A                 jmp     loc_D534
.text:000000000000D65A ; ---------------------------------------------------------------------------
.text:000000000000D65F                 align 20h
.text:000000000000D660
.text:000000000000D660 loc_D660:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D660                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D660                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:000000000000D665                 setz    dl
.text:000000000000D668
.text:000000000000D668 loc_D668:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:000000000000D668                                         ; quotearg_buffer_restyled+6A3↓j
.text:000000000000D668                 test    rbp, rbp
.text:000000000000D66B                 jnz     loc_D41C
.text:000000000000D671
.text:000000000000D671 loc_D671:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:000000000000D671                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:000000000000D671                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000D676                 and     al, dl
.text:000000000000D678                 jz      loc_D428
.text:000000000000D67E
.text:000000000000D67E loc_D67E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000D67E                 mov     rbp, r11
.text:000000000000D681                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000D689                 jmp     loc_DD89
.text:000000000000D689 ; ---------------------------------------------------------------------------
.text:000000000000D68E                 align 10h
.text:000000000000D690
.text:000000000000D690 loc_D690:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D690                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D690                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000D695                 setz    dl
.text:000000000000D698                 xor     r12d, r12d
.text:000000000000D69B                 jmp     short loc_D671
.text:000000000000D69B ; ---------------------------------------------------------------------------
.text:000000000000D69D                 align 20h
.text:000000000000D6A0
.text:000000000000D6A0 loc_D6A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D6A0                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D6A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:000000000000D6A5                 mov     ebx, 20h ; ' '
.text:000000000000D6AA                 setz    dl
.text:000000000000D6AD                 jmp     short loc_D671
.text:000000000000D6AD ; ---------------------------------------------------------------------------
.text:000000000000D6AF                 align 10h
.text:000000000000D6B0
.text:000000000000D6B0 loc_D6B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D6B0                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D6B0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:000000000000D6B5                 mov     ebx, 72h ; 'r'
.text:000000000000D6BA                 jmp     loc_D522
.text:000000000000D6BA ; ---------------------------------------------------------------------------
.text:000000000000D6BF                 align 20h
.text:000000000000D6C0
.text:000000000000D6C0 loc_D6C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D6C0                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D6C0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:000000000000D6C5                 mov     ebx, 66h ; 'f'
.text:000000000000D6CA                 jmp     loc_D534
.text:000000000000D6CA ; ---------------------------------------------------------------------------
.text:000000000000D6CF                 align 10h
.text:000000000000D6D0
.text:000000000000D6D0 loc_D6D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D6D0                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D6D0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:000000000000D6D5                 mov     ebx, 76h ; 'v'
.text:000000000000D6DA                 jmp     loc_D534
.text:000000000000D6DA ; ---------------------------------------------------------------------------
.text:000000000000D6DF                 align 20h
.text:000000000000D6E0
.text:000000000000D6E0 loc_D6E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D6E0                                         ; DATA XREF: .rodata:jpt_D3EE↓o
.text:000000000000D6E0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:000000000000D6E5                 mov     ebx, 6Eh ; 'n'
.text:000000000000D6EA                 jmp     loc_D522
.text:000000000000D6EA ; ---------------------------------------------------------------------------
.text:000000000000D6EF                 align 10h
.text:000000000000D6F0
.text:000000000000D6F0 def_D77A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:000000000000D6F0                                         ; quotearg_buffer_restyled+57A↓j
.text:000000000000D6F0                                         ; DATA XREF: ...
.text:000000000000D6F0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000D6F3                 nop     dword ptr [rax+rax+00h]
.text:000000000000D6F8
.text:000000000000D6F8 def_D3EE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:000000000000D6F8                                         ; quotearg_buffer_restyled+1EE↑j
.text:000000000000D6F8                                         ; DATA XREF: ...
.text:000000000000D6F8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000D6FE                 jnz     loc_DAA8
.text:000000000000D704                 mov     [rsp+0E8h+var_B0], r11
.text:000000000000D709                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000D70E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000D713                 call    ___ctype_b_loc
.text:000000000000D718                 mov     rcx, [rax]
.text:000000000000D71B                 movzx   edx, bl
.text:000000000000D71E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000D724                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000D72A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000D72F                 mov     edi, 1
.text:000000000000D734                 movzx   eax, word ptr [rcx+rdx*2]
.text:000000000000D738                 and     ax, 4000h
.text:000000000000D73C                 setnz   r12b
.text:000000000000D740                 setz    al
.text:000000000000D743                 and     al, [rsp+0E8h+var_DB]
.text:000000000000D747
.text:000000000000D747 loc_D747:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:000000000000D747                 test    al, al
.text:000000000000D749                 jnz     loc_E0E1
.text:000000000000D74F                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D754                 setz    dl
.text:000000000000D757                 jmp     loc_D428
.text:000000000000D757 ; ---------------------------------------------------------------------------
.text:000000000000D75C                 align 20h
.text:000000000000D760
.text:000000000000D760 loc_D760:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:000000000000D760                 movzx   ebx, byte ptr [r9]
.text:000000000000D764                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000D767                 ja      short def_D77A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000D769                 lea     rcx, jpt_D77A
.text:000000000000D770                 movzx   edx, bl
.text:000000000000D773                 movsxd  rax, ds:(jpt_D77A - 155C8h)[rcx+rdx*4]
.text:000000000000D777                 add     rax, rcx
.text:000000000000D77A                 jmp     rax             ; switch jump
.text:000000000000D77A ; ---------------------------------------------------------------------------
.text:000000000000D77C                 align 20h
.text:000000000000D780
.text:000000000000D780 loc_D780:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D780                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D780                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:000000000000D783                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000D788                 jnz     loc_D57E
.text:000000000000D78E                 xchg    ax, ax
.text:000000000000D790
.text:000000000000D790 loc_D790:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:000000000000D790                                         ; quotearg_buffer_restyled+383↑j
.text:000000000000D790                 mov     edx, 5Ch ; '\'
.text:000000000000D795                 mov     ebx, 5Ch ; '\'
.text:000000000000D79A                 jmp     loc_D534
.text:000000000000D79A ; ---------------------------------------------------------------------------
.text:000000000000D79F                 align 20h
.text:000000000000D7A0
.text:000000000000D7A0 loc_D7A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D7A0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D7A0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:000000000000D7A5                 xor     r10d, r10d
.text:000000000000D7A8                 mov     ebx, 66h ; 'f'
.text:000000000000D7AD                 jmp     loc_D534
.text:000000000000D7AD ; ---------------------------------------------------------------------------
.text:000000000000D7B2                 align 8
.text:000000000000D7B8
.text:000000000000D7B8 loc_D7B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D7B8                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D7B8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000D7BD                 xor     r10d, r10d
.text:000000000000D7C0                 mov     ebx, 6Eh ; 'n'
.text:000000000000D7C5                 jmp     loc_D522
.text:000000000000D7C5 ; ---------------------------------------------------------------------------
.text:000000000000D7CA                 align 10h
.text:000000000000D7D0
.text:000000000000D7D0 loc_D7D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D7D0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D7D0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:000000000000D7D5                 jmp     loc_D5A0
.text:000000000000D7D5 ; ---------------------------------------------------------------------------
.text:000000000000D7DA                 align 20h
.text:000000000000D7E0
.text:000000000000D7E0 loc_D7E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D7E0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D7E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:000000000000D7E3
.text:000000000000D7E3 loc_D7E3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:000000000000D7E3                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D7E8                 setz    dl
.text:000000000000D7EB                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D7F0                 jnz     loc_E38A
.text:000000000000D7F6                 mov     eax, r8d
.text:000000000000D7F9                 mov     rcx, r15
.text:000000000000D7FC                 xor     eax, 1
.text:000000000000D7FF                 and     al, dl
.text:000000000000D801                 jz      short loc_D830
.text:000000000000D803                 cmp     r13, r15
.text:000000000000D806                 jbe     short loc_D80D
.text:000000000000D808                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D80D
.text:000000000000D80D loc_D80D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000D80D                 lea     rcx, [r15+1]
.text:000000000000D811                 cmp     r13, rcx
.text:000000000000D814                 jbe     short loc_D81C
.text:000000000000D816                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000D81C
.text:000000000000D81C loc_D81C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000D81C                 lea     rcx, [r15+2]
.text:000000000000D820                 cmp     r13, rcx
.text:000000000000D823                 ja      loc_DE59
.text:000000000000D829
.text:000000000000D829 loc_D829:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:000000000000D829                 lea     rcx, [r15+3]
.text:000000000000D82D                 mov     r8d, eax
.text:000000000000D830
.text:000000000000D830 loc_D830:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:000000000000D830                 cmp     r13, rcx
.text:000000000000D833                 jbe     short loc_D83A
.text:000000000000D835                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000D83A
.text:000000000000D83A loc_D83A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000D83A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D83F                 lea     r15, [rcx+1]
.text:000000000000D843                 jz      loc_DE49
.text:000000000000D849                 lea     rax, [rbp+1]
.text:000000000000D84D                 cmp     rax, r11
.text:000000000000D850                 jnb     short loc_D86B
.text:000000000000D852                 mov     rax, [rsp+0E8h+s]
.text:000000000000D857                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000D85C                 mov     byte ptr [rsp+0E8h+ps], al
.text:000000000000D860                 sub     eax, 30h ; '0'
.text:000000000000D863                 cmp     al, 9
.text:000000000000D865                 jbe     loc_E099
.text:000000000000D86B
.text:000000000000D86B loc_D86B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000D86B                 mov     eax, r12d
.text:000000000000D86E                 mov     ebx, 30h ; '0'
.text:000000000000D873                 xor     r12d, r12d
.text:000000000000D876                 jmp     loc_D428
.text:000000000000D876 ; ---------------------------------------------------------------------------
.text:000000000000D87B                 align 20h
.text:000000000000D880
.text:000000000000D880 loc_D880:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D880                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D880                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:000000000000D885                 mov     r12d, r10d
.text:000000000000D888                 setz    dl
.text:000000000000D88B                 xor     r10d, r10d
.text:000000000000D88E                 xor     eax, eax
.text:000000000000D890                 jmp     loc_D428
.text:000000000000D890 ; ---------------------------------------------------------------------------
.text:000000000000D895                 align 8
.text:000000000000D898
.text:000000000000D898 loc_D898:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D898                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D898                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000D89D                 setz    dl
.text:000000000000D8A0                 xor     r10d, r10d
.text:000000000000D8A3                 jmp     loc_D668
.text:000000000000D8A3 ; ---------------------------------------------------------------------------
.text:000000000000D8A8                 align 10h
.text:000000000000D8B0
.text:000000000000D8B0 loc_D8B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D8B0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D8B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000D8B5                 setz    dl
.text:000000000000D8B8                 xor     r10d, r10d
.text:000000000000D8BB                 xor     r12d, r12d
.text:000000000000D8BE                 jmp     loc_D671
.text:000000000000D8BE ; ---------------------------------------------------------------------------
.text:000000000000D8C3                 align 8
.text:000000000000D8C8
.text:000000000000D8C8 loc_D8C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D8C8                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D8C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000D8CD                 mov     r12d, r10d
.text:000000000000D8D0                 mov     ebx, 20h ; ' '
.text:000000000000D8D5                 setz    dl
.text:000000000000D8D8                 xor     r10d, r10d
.text:000000000000D8DB                 jmp     loc_D671
.text:000000000000D8E0 ; ---------------------------------------------------------------------------
.text:000000000000D8E0
.text:000000000000D8E0 loc_D8E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D8E0                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D8E0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:000000000000D8E5                 xor     r10d, r10d
.text:000000000000D8E8                 mov     ebx, 72h ; 'r'
.text:000000000000D8ED                 jmp     loc_D522
.text:000000000000D8ED ; ---------------------------------------------------------------------------
.text:000000000000D8F2                 align 8
.text:000000000000D8F8
.text:000000000000D8F8 loc_D8F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D8F8                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D8F8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000D8FD                 jmp     loc_D5A0
.text:000000000000D8FD ; ---------------------------------------------------------------------------
.text:000000000000D902                 align 8
.text:000000000000D908
.text:000000000000D908 loc_D908:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D908                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D908                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000D90D                 xor     r10d, r10d
.text:000000000000D910                 mov     ebx, 74h ; 't'
.text:000000000000D915                 jmp     loc_D522
.text:000000000000D915 ; ---------------------------------------------------------------------------
.text:000000000000D91A                 align 20h
.text:000000000000D920
.text:000000000000D920 loc_D920:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D920                                         ; DATA XREF: .rodata:jpt_D77A↓o
.text:000000000000D920                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:000000000000D925                 jmp     loc_D5A0
.text:000000000000D925 ; ---------------------------------------------------------------------------
.text:000000000000D92A                 align 10h
.text:000000000000D930
.text:000000000000D930 loc_D930:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:000000000000D930                                         ; quotearg_buffer_restyled+1B1↑j
.text:000000000000D930                 xor     r10d, r10d
.text:000000000000D933                 jmp     loc_D3D0
.text:000000000000D933 ; ---------------------------------------------------------------------------
.text:000000000000D938                 align 20h
.text:000000000000D940
.text:000000000000D940 loc_D940:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:000000000000D940                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D945                 jnz     loc_E2B0
.text:000000000000D94B
.text:000000000000D94B loc_D94B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000D94B                 add     rbp, 1
.text:000000000000D94F                 mov     eax, r8d
.text:000000000000D952                 xor     r12d, r12d
.text:000000000000D955                 mov     ebx, 5Ch ; '\'
.text:000000000000D95A                 jmp     loc_D46C
.text:000000000000D95A ; ---------------------------------------------------------------------------
.text:000000000000D95F                 align 20h
.text:000000000000D960
.text:000000000000D960 loc_D960:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:000000000000D960                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D965                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000D96A                 mov     r12d, r8d
.text:000000000000D96D                 mov     rbp, r11
.text:000000000000D970                 setz    dl
.text:000000000000D973                 mov     eax, ebx
.text:000000000000D975                 test    r15, r15
.text:000000000000D978                 setz    cl
.text:000000000000D97B                 and     eax, edx
.text:000000000000D97D                 and     al, cl
.text:000000000000D97F                 jnz     loc_E3E6
.text:000000000000D985                 mov     eax, ebx
.text:000000000000D987                 xor     eax, 1
.text:000000000000D98A                 and     dl, al
.text:000000000000D98C                 jz      loc_E2FC
.text:000000000000D992                 cmp     [rsp+0E8h+var_6C], 0
.text:000000000000D997                 jz      loc_E2FA
.text:000000000000D99D                 cmp     [rsp+0E8h+var_DA], 0
.text:000000000000D9A2                 jnz     loc_E39D
.text:000000000000D9A8                 test    r13, r13
.text:000000000000D9AB                 setz    al
.text:000000000000D9AE                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000D9B4                 setnz   dl
.text:000000000000D9B7                 and     al, dl
.text:000000000000D9B9                 jz      loc_E3DC
.text:000000000000D9BF                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000D9C4
.text:000000000000D9C4 loc_D9C4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:000000000000D9C4                 lea     rbx, asc_15335  ; "'"
.text:000000000000D9CB                 mov     byte ptr [r14], 27h ; '''
.text:000000000000D9CF                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000D9D7                 mov     r15d, 1
.text:000000000000D9DD                 mov     [rsp+0E8h+n], 1
.text:000000000000D9E6                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000D9EB                 mov     [rsp+0E8h+s2], rbx
.text:000000000000D9F0                 mov     [rsp+0E8h+var_6C], al
.text:000000000000D9F4                 jmp     loc_D2D3
.text:000000000000D9F4 ; ---------------------------------------------------------------------------
.text:000000000000D9F9                 align 20h
.text:000000000000DA00
.text:000000000000DA00 loc_DA00:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:000000000000DA00                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000DA05                 jnz     loc_E2B0
.text:000000000000DA0B                 test    r13, r13
.text:000000000000DA0E                 jz      loc_DE10
.text:000000000000DA14                 xor     edx, edx
.text:000000000000DA16                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000DA1C                 jnz     loc_DE10
.text:000000000000DA22
.text:000000000000DA22 loc_DA22:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:000000000000DA22                                         ; quotearg_buffer_restyled+122A↓j
.text:000000000000DA22                 mov     [rsp+0E8h+var_98], r13
.text:000000000000DA27                 add     r15, 3
.text:000000000000DA2B                 xor     eax, eax
.text:000000000000DA2D                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000DA32                 xor     r8d, r8d
.text:000000000000DA35                 mov     r13, rdx
.text:000000000000DA38                 mov     ebx, 27h ; '''
.text:000000000000DA3D                 jmp     loc_D459
.text:000000000000DA3D ; ---------------------------------------------------------------------------
.text:000000000000DA42                 align 8
.text:000000000000DA48
.text:000000000000DA48 loc_DA48:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:000000000000DA48                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000DA4D                 jz      short loc_DA70
.text:000000000000DA4F                 lea     rcx, [rbp+2]
.text:000000000000DA53                 cmp     rcx, r11
.text:000000000000DA56                 jnb     short loc_DA70
.text:000000000000DA58                 mov     rax, [rsp+0E8h+s]
.text:000000000000DA5D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:000000000000DA62                 jz      loc_E1F2
.text:000000000000DA68                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000DA70
.text:000000000000DA70 loc_DA70:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:000000000000DA70                                         ; quotearg_buffer_restyled+856↑j ...
.text:000000000000DA70                 xor     edx, edx
.text:000000000000DA72                 xor     r12d, r12d
.text:000000000000DA75                 xor     eax, eax
.text:000000000000DA77                 mov     ebx, 3Fh ; '?'
.text:000000000000DA7C                 jmp     loc_D428
.text:000000000000DA7C ; ---------------------------------------------------------------------------
.text:000000000000DA81                 align 8
.text:000000000000DA88
.text:000000000000DA88 loc_DA88:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:000000000000DA88                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000DA8D                 jnz     loc_E2B0
.text:000000000000DA93                 xor     r12d, r12d
.text:000000000000DA96                 xor     eax, eax
.text:000000000000DA98                 mov     ebx, 3Fh ; '?'
.text:000000000000DA9D                 jmp     loc_D459
.text:000000000000DA9D ; ---------------------------------------------------------------------------
.text:000000000000DAA2                 align 8
.text:000000000000DAA8
.text:000000000000DAA8 loc_DAA8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:000000000000DAA8                 lea     rax, [rsp+0E8h+var_48]
.text:000000000000DAB0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000DAB4                 mov     [rsp+0E8h+var_48], 0
.text:000000000000DAC0                 mov     [rsp+0E8h+ps], rax
.text:000000000000DAC5                 jnz     short loc_DAF4
.text:000000000000DAC7                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000DACC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:000000000000DAD1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:000000000000DAD6                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000DADB                 call    _strlen
.text:000000000000DAE0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:000000000000DAE6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000DAEC                 mov     r11, rax
.text:000000000000DAEF                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000DAF4
.text:000000000000DAF4 loc_DAF4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:000000000000DAF4                 lea     rax, [rsp+0E8h+wc]
.text:000000000000DAFC                 xor     ecx, ecx
.text:000000000000DAFE                 mov     [rsp+0E8h+var_6A], bl
.text:000000000000DB02                 mov     [rsp+0E8h+var_6B], r8b
.text:000000000000DB07                 mov     rbx, rcx
.text:000000000000DB0A                 mov     [rsp+0E8h+var_60], r9
.text:000000000000DB12                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000DB17                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000DB1C                 mov     [rsp+0E8h+var_68], r15
.text:000000000000DB24                 mov     [rsp+0E8h+var_A8], r14
.text:000000000000DB29                 mov     [rsp+0E8h+var_78], r13
.text:000000000000DB2E                 mov     [rsp+0E8h+var_B8], r11
.text:000000000000DB33
.text:000000000000DB33 loc_DB33:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:000000000000DB33                 mov     rax, [rsp+0E8h+s]
.text:000000000000DB38                 lea     r14, [rbp+rbx+0]
.text:000000000000DB3D                 mov     rdx, [rsp+0E8h+var_B8]
.text:000000000000DB42                 mov     rcx, [rsp+0E8h+ps]
.text:000000000000DB47                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000DB4C                 lea     r13, [rax+r14]
.text:000000000000DB50                 sub     rdx, r14
.text:000000000000DB53                 mov     rsi, r13
.text:000000000000DB56                 call    rpl_mbrtowc
.text:000000000000DB5B                 test    rax, rax
.text:000000000000DB5E                 mov     r15, rax
.text:000000000000DB61                 jz      short loc_DBB1
.text:000000000000DB63                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DB67                 jz      loc_E185
.text:000000000000DB6D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000DB71                 jz      loc_E111
.text:000000000000DB77                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000DB7C                 setz    al
.text:000000000000DB7F                 and     al, [rsp+0E8h+var_D9]
.text:000000000000DB83                 jnz     loc_DD20
.text:000000000000DB89
.text:000000000000DB89 loc_DB89:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:000000000000DB89                                         ; quotearg_buffer_restyled+B47↓j
.text:000000000000DB89                 mov     edi, [rsp+0E8h+wc] ; wc
.text:000000000000DB90                 call    _iswprint
.text:000000000000DB95                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000DB9A                 test    eax, eax
.text:000000000000DB9C                 mov     eax, 0
.text:000000000000DBA1                 cmovz   r12d, eax
.text:000000000000DBA5                 add     rbx, r15
.text:000000000000DBA8                 call    _mbsinit
.text:000000000000DBAD                 test    eax, eax
.text:000000000000DBAF                 jz      short loc_DB33
.text:000000000000DBB1
.text:000000000000DBB1 loc_DBB1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:000000000000DBB1                 mov     edx, r12d
.text:000000000000DBB4                 mov     rdi, rbx
.text:000000000000DBB7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000DBBD                 xor     edx, 1
.text:000000000000DBC0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000DBC5                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000DBCB                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000DBCF                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000DBD7                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000DBDC                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000DBE1                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000DBE6
.text:000000000000DBE6 loc_DBE6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:000000000000DBE6                                         ; quotearg_buffer_restyled+FB8↓j
.text:000000000000DBE6                 cmp     rdi, 1
.text:000000000000DBEA                 jbe     loc_E1EB
.text:000000000000DBF0
.text:000000000000DBF0 loc_DBF0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:000000000000DBF0                 mov     rcx, rdi
.text:000000000000DBF3                 xor     esi, esi
.text:000000000000DBF5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000DBFB                 add     rcx, rbp
.text:000000000000DBFE                 mov     rdi, [rsp+0E8h+s]
.text:000000000000DC03                 jmp     loc_DCBE
.text:000000000000DC03 ; ---------------------------------------------------------------------------
.text:000000000000DC08                 align 10h
.text:000000000000DC10
.text:000000000000DC10 loc_DC10:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:000000000000DC10                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000DC15                 setz    al
.text:000000000000DC18                 test    r9b, r9b
.text:000000000000DC1B                 jnz     loc_E0D0
.text:000000000000DC21                 mov     esi, r8d
.text:000000000000DC24                 xor     esi, 1
.text:000000000000DC27                 and     al, sil
.text:000000000000DC2A                 jz      short loc_DC5B
.text:000000000000DC2C                 cmp     r13, r15
.text:000000000000DC2F                 jbe     short loc_DC36
.text:000000000000DC31                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000DC36
.text:000000000000DC36 loc_DC36:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:000000000000DC36                 lea     rsi, [r15+1]
.text:000000000000DC3A                 cmp     r13, rsi
.text:000000000000DC3D                 jbe     short loc_DC45
.text:000000000000DC3F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000DC45
.text:000000000000DC45 loc_DC45:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:000000000000DC45                 lea     rsi, [r15+2]
.text:000000000000DC49                 cmp     r13, rsi
.text:000000000000DC4C                 jbe     short loc_DC54
.text:000000000000DC4E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000DC54
.text:000000000000DC54 loc_DC54:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:000000000000DC54                 add     r15, 3
.text:000000000000DC58                 mov     r8d, eax
.text:000000000000DC5B
.text:000000000000DC5B loc_DC5B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000DC5B                 cmp     r13, r15
.text:000000000000DC5E                 jbe     short loc_DC65
.text:000000000000DC60                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000DC65
.text:000000000000DC65 loc_DC65:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:000000000000DC65                 lea     rax, [r15+1]
.text:000000000000DC69                 cmp     r13, rax
.text:000000000000DC6C                 jbe     short loc_DC7B
.text:000000000000DC6E                 mov     eax, ebx
.text:000000000000DC70                 shr     al, 6
.text:000000000000DC73                 add     eax, 30h ; '0'
.text:000000000000DC76                 mov     [r14+r15+1], al
.text:000000000000DC7B
.text:000000000000DC7B loc_DC7B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000DC7B                 lea     rax, [r15+2]
.text:000000000000DC7F                 cmp     r13, rax
.text:000000000000DC82                 jbe     short loc_DC94
.text:000000000000DC84                 mov     eax, ebx
.text:000000000000DC86                 shr     al, 3
.text:000000000000DC89                 and     eax, 7
.text:000000000000DC8C                 add     eax, 30h ; '0'
.text:000000000000DC8F                 mov     [r14+r15+2], al
.text:000000000000DC94
.text:000000000000DC94 loc_DC94:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:000000000000DC94                 and     ebx, 7
.text:000000000000DC97                 add     rbp, 1
.text:000000000000DC9B                 add     r15, 3
.text:000000000000DC9F                 add     ebx, 30h ; '0'
.text:000000000000DCA2                 cmp     rbp, rcx
.text:000000000000DCA5                 jnb     loc_D490
.text:000000000000DCAB                 mov     esi, edx
.text:000000000000DCAD
.text:000000000000DCAD loc_DCAD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000DCAD                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000DCAD                 cmp     r13, r15
.text:000000000000DCB0                 jbe     short loc_DCB6
.text:000000000000DCB2                 mov     [r14+r15], bl
.text:000000000000DCB6
.text:000000000000DCB6 loc_DCB6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:000000000000DCB6                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000DCBA                 add     r15, 1
.text:000000000000DCBE
.text:000000000000DCBE loc_DCBE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000DCBE                 test    dl, dl
.text:000000000000DCC0                 jnz     loc_DC10
.text:000000000000DCC6                 mov     eax, esi
.text:000000000000DCC8                 xor     eax, 1
.text:000000000000DCCB                 and     eax, r8d
.text:000000000000DCCE                 test    r10b, r10b
.text:000000000000DCD1                 jz      short loc_DCE1
.text:000000000000DCD3                 cmp     r13, r15
.text:000000000000DCD6                 jbe     short loc_DCDD
.text:000000000000DCD8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000DCDD
.text:000000000000DCDD loc_DCDD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000DCDD                 add     r15, 1
.text:000000000000DCE1
.text:000000000000DCE1 loc_DCE1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:000000000000DCE1                 add     rbp, 1
.text:000000000000DCE5                 cmp     rbp, rcx
.text:000000000000DCE8                 jnb     loc_D46C
.text:000000000000DCEE                 test    al, al
.text:000000000000DCF0                 jz      loc_E0EE
.text:000000000000DCF6                 cmp     r13, r15
.text:000000000000DCF9                 jbe     short loc_DD00
.text:000000000000DCFB                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000DD00
.text:000000000000DD00 loc_DD00:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:000000000000DD00                 lea     rax, [r15+1]
.text:000000000000DD04                 cmp     r13, rax
.text:000000000000DD07                 jbe     short loc_DD0F
.text:000000000000DD09                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000DD0F
.text:000000000000DD0F loc_DD0F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000DD0F                 add     r15, 2
.text:000000000000DD13                 xor     r10d, r10d
.text:000000000000DD16                 xor     r8d, r8d
.text:000000000000DD19                 jmp     short loc_DCAD
.text:000000000000DD19 ; ---------------------------------------------------------------------------
.text:000000000000DD1B                 align 20h
.text:000000000000DD20
.text:000000000000DD20 loc_DD20:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:000000000000DD20                 cmp     r15, 1
.text:000000000000DD24                 jz      loc_DB89
.text:000000000000DD2A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000DD2F                 lea     rcx, [rdi+r15]
.text:000000000000DD33                 lea     rdx, [rdi+r14+1]
.text:000000000000DD38                 lea     r8, [rcx+r14]
.text:000000000000DD3C                 jmp     short loc_DD4D
.text:000000000000DD3C ; ---------------------------------------------------------------------------
.text:000000000000DD3E                 align 20h
.text:000000000000DD40
.text:000000000000DD40 loc_DD40:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:000000000000DD40                                         ; quotearg_buffer_restyled+B70↓j
.text:000000000000DD40                 add     rdx, 1
.text:000000000000DD44                 cmp     r8, rdx
.text:000000000000DD47                 jz      loc_DB89
.text:000000000000DD4D
.text:000000000000DD4D loc_DD4D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000DD4D                 movzx   ecx, byte ptr [rdx]
.text:000000000000DD50                 sub     ecx, 5Bh ; '['
.text:000000000000DD53                 cmp     cl, 21h ; '!'
.text:000000000000DD56                 ja      short loc_DD40
.text:000000000000DD58                 mov     esi, 1
.text:000000000000DD5D                 shl     rsi, cl
.text:000000000000DD60                 mov     rcx, rsi
.text:000000000000DD63                 mov     rsi, 20000002Bh
.text:000000000000DD6D                 test    rcx, rsi
.text:000000000000DD70                 jz      short loc_DD40
.text:000000000000DD72                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000DD77                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000DD7C                 mov     rbp, [rsp+0E8h+var_B8]
.text:000000000000DD81                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000DD89
.text:000000000000DD89 loc_DD89:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:000000000000DD89                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:000000000000DD89                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000DD8E                 jz      short loc_DDA0
.text:000000000000DD90                 test    al, al
.text:000000000000DD92                 mov     eax, 4
.text:000000000000DD97                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000DD9C                 mov     [rsp+0E8h+var_E0], eax
.text:000000000000DDA0
.text:000000000000DDA0 loc_DDA0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:000000000000DDA0                                         ; quotearg_buffer_restyled+1205↓j
.text:000000000000DDA0                 sub     rsp, 8
.text:000000000000DDA4                 mov     rcx, rbp
.text:000000000000DDA7                 mov     rsi, r13
.text:000000000000DDAA                 push    [rsp+0F0h+var_88]
.text:000000000000DDAE                 push    [rsp+0F8h+var_80]
.text:000000000000DDB2                 mov     rdi, r14
.text:000000000000DDB5                 push    0
.text:000000000000DDB7                 mov     r9d, [rsp+108h+var_70]
.text:000000000000DDBF                 mov     r8d, [rsp+108h+var_E0]
.text:000000000000DDC4                 mov     rdx, [rsp+108h+s]
.text:000000000000DDC9                 and     r9d, 0FFFFFFFDh
.text:000000000000DDCD                 call    quotearg_buffer_restyled
.text:000000000000DDD2                 add     rsp, 20h
.text:000000000000DDD6                 mov     r15, rax
.text:000000000000DDD9
.text:000000000000DDD9 loc_DDD9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:000000000000DDD9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:000000000000DDD9                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000DDE1                 xor     rbx, fs:28h
.text:000000000000DDEA                 mov     rax, r15
.text:000000000000DDED                 jnz     loc_E3F3
.text:000000000000DDF3                 add     rsp, 0B8h
.text:000000000000DDFA                 pop     rbx
.text:000000000000DDFB                 pop     rbp
.text:000000000000DDFC                 pop     r12
.text:000000000000DDFE                 pop     r13
.text:000000000000DE00                 pop     r14
.text:000000000000DE02                 pop     r15
.text:000000000000DE04                 retn
.text:000000000000DE04 ; ---------------------------------------------------------------------------
.text:000000000000DE05                 align 8
.text:000000000000DE08
.text:000000000000DE08 loc_DE08:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:000000000000DE08                 mov     rbp, r11
.text:000000000000DE0B                 jmp     loc_DD89
.text:000000000000DE10 ; ---------------------------------------------------------------------------
.text:000000000000DE10
.text:000000000000DE10 loc_DE10:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:000000000000DE10                                         ; quotearg_buffer_restyled+81C↑j
.text:000000000000DE10                 cmp     r13, r15
.text:000000000000DE13                 jbe     short loc_DE1A
.text:000000000000DE15                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000DE1A
.text:000000000000DE1A loc_DE1A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000DE1A                 lea     rax, [r15+1]
.text:000000000000DE1E                 cmp     r13, rax
.text:000000000000DE21                 jbe     short loc_DE29
.text:000000000000DE23                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:000000000000DE29
.text:000000000000DE29 loc_DE29:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:000000000000DE29                 lea     rax, [r15+2]
.text:000000000000DE2D                 cmp     r13, rax
.text:000000000000DE30                 jbe     loc_E422
.text:000000000000DE36                 mov     rdx, r13
.text:000000000000DE39                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000DE3F                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000DE44                 jmp     loc_DA22
.text:000000000000DE49 ; ---------------------------------------------------------------------------
.text:000000000000DE49
.text:000000000000DE49 loc_DE49:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:000000000000DE49                 mov     eax, r12d
.text:000000000000DE4C                 mov     ebx, 30h ; '0'
.text:000000000000DE51                 xor     r12d, r12d
.text:000000000000DE54                 jmp     loc_D459
.text:000000000000DE59 ; ---------------------------------------------------------------------------
.text:000000000000DE59
.text:000000000000DE59 loc_DE59:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:000000000000DE59                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000DE5F                 jmp     loc_D829
.text:000000000000DE64 ; ---------------------------------------------------------------------------
.text:000000000000DE64
.text:000000000000DE64 loc_DE64:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DE64                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000DE64                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:000000000000DE66                 jnz     loc_D293        ; jumptable 00000000000121F1 case 1
.text:000000000000DE6C                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DE71
.text:000000000000DE71 loc_DE71:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:000000000000DE71                 test    r13, r13
.text:000000000000DE74                 jnz     loc_E40A
.text:000000000000DE7A                 lea     rax, asc_15335  ; "'"
.text:000000000000DE81                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DE8A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DE8F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DE94                 xor     r12d, r12d
.text:000000000000DE97                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000DE9C                 mov     [rsp+0E8h+n], 1
.text:000000000000DEA5                 mov     [rsp+0E8h+s2], rax
.text:000000000000DEAA                 mov     r15d, 1
.text:000000000000DEB0                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000DEB8                 jmp     loc_D2D3
.text:000000000000DEB8 ; ---------------------------------------------------------------------------
.text:000000000000DEBD                 align 20h
.text:000000000000DEC0
.text:000000000000DEC0 loc_DEC0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DEC0                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000DEC0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:000000000000DEC2                 jnz     loc_E2BD
.text:000000000000DEC8                 test    r13, r13
.text:000000000000DECB                 jz      loc_E0F6
.text:000000000000DED1                 mov     byte ptr [r14], 22h ; '"'
.text:000000000000DED5                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DEDA                 xor     r12d, r12d
.text:000000000000DEDD                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DEE2                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DEEB
.text:000000000000DEEB loc_DEEB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000DEEB                 lea     rax, unk_15333
.text:000000000000DEF2                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000DEF7                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DEFC                 mov     [rsp+0E8h+n], 1
.text:000000000000DF05                 mov     r15d, 1
.text:000000000000DF0B                 mov     [rsp+0E8h+s2], rax
.text:000000000000DF10                 jmp     loc_D2D3
.text:000000000000DF15 ; ---------------------------------------------------------------------------
.text:000000000000DF15
.text:000000000000DF15 loc_DF15:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DF15                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000DF15                 lea     rax, unk_15333  ; jumptable 00000000000121F1 case 6
.text:000000000000DF1C                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DF21                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DF26                 xor     r12d, r12d
.text:000000000000DF29                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DF32                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000DF37                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DF3C                 mov     [rsp+0E8h+n], 1
.text:000000000000DF45                 xor     r15d, r15d
.text:000000000000DF48                 mov     [rsp+0E8h+s2], rax
.text:000000000000DF4D                 mov     [rsp+0E8h+var_E0], 5
.text:000000000000DF55                 jmp     loc_D2D3
.text:000000000000DF5A ; ---------------------------------------------------------------------------
.text:000000000000DF5A
.text:000000000000DF5A loc_DF5A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DF5A                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000DF5A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000DF5F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DF64                 xor     r12d, r12d
.text:000000000000DF67                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DF70                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000DF75                 xor     r15d, r15d
.text:000000000000DF78                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DF7D                 mov     [rsp+0E8h+n], 0
.text:000000000000DF86                 mov     [rsp+0E8h+s2], 0
.text:000000000000DF8F                 jmp     loc_D2D3
.text:000000000000DF94 ; ---------------------------------------------------------------------------
.text:000000000000DF94
.text:000000000000DF94 loc_DF94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DF94                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000DF94                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:000000000000DF99                 jz      short loc_DFF1
.text:000000000000DF9B                 lea     rsi, asc_15337  ; "`"
.text:000000000000DFA2                 xor     edi, edi        ; domainname
.text:000000000000DFA4                 mov     edx, 5          ; category
.text:000000000000DFA9                 call    _dcgettext
.text:000000000000DFAE                 mov     rcx, rax
.text:000000000000DFB1                 mov     [rsp+0E8h+var_80], rax
.text:000000000000DFB6                 lea     rax, asc_15337  ; "`"
.text:000000000000DFBD                 cmp     rcx, rax
.text:000000000000DFC0                 jz      loc_E35E
.text:000000000000DFC6
.text:000000000000DFC6 loc_DFC6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:000000000000DFC6                 lea     rsi, asc_15335  ; "'"
.text:000000000000DFCD                 xor     edi, edi        ; domainname
.text:000000000000DFCF                 mov     edx, 5          ; category
.text:000000000000DFD4                 call    _dcgettext
.text:000000000000DFD9                 mov     rcx, rax
.text:000000000000DFDC                 mov     [rsp+0E8h+var_88], rax
.text:000000000000DFE1                 lea     rax, asc_15335  ; "'"
.text:000000000000DFE8                 cmp     rcx, rax
.text:000000000000DFEB                 jz      loc_E374
.text:000000000000DFF1
.text:000000000000DFF1 loc_DFF1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:000000000000DFF1                                         ; quotearg_buffer_restyled+1185↓j
.text:000000000000DFF1                 xor     r15d, r15d
.text:000000000000DFF4                 test    ebx, ebx
.text:000000000000DFF6                 jz      loc_E1BD
.text:000000000000DFFC
.text:000000000000DFFC loc_DFFC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000DFFC                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000DFFC                 test    ebx, ebx
.text:000000000000DFFE                 mov     rbx, [rsp+0E8h+var_88]
.text:000000000000E003                 setnz   [rsp+0E8h+var_D9]
.text:000000000000E008                 xor     r12d, r12d
.text:000000000000E00B                 mov     rdi, rbx        ; s
.text:000000000000E00E                 call    _strlen
.text:000000000000E013                 mov     [rsp+0E8h+s2], rbx
.text:000000000000E018                 mov     [rsp+0E8h+n], rax
.text:000000000000E01D                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E022                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E027                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E030                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E035                 jmp     loc_D2D3
.text:000000000000E03A ; ---------------------------------------------------------------------------
.text:000000000000E03A
.text:000000000000E03A loc_E03A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E03A                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000E03A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000E03F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E044                 xor     r12d, r12d
.text:000000000000E047                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E050                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E055                 xor     r15d, r15d
.text:000000000000E058                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000E05D                 mov     [rsp+0E8h+n], 0
.text:000000000000E066                 mov     [rsp+0E8h+s2], 0
.text:000000000000E06F                 jmp     loc_D2D3
.text:000000000000E074 ; ---------------------------------------------------------------------------
.text:000000000000E074
.text:000000000000E074 loc_E074:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E074                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000E074                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:000000000000E079                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E07E                 xor     r12d, r12d
.text:000000000000E081                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E08A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E08F                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E094                 jmp     loc_D2B3
.text:000000000000E099 ; ---------------------------------------------------------------------------
.text:000000000000E099
.text:000000000000E099 loc_E099:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:000000000000E099                 cmp     r13, r15
.text:000000000000E09C                 jbe     short loc_E0A3
.text:000000000000E09E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:000000000000E0A3
.text:000000000000E0A3 loc_E0A3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:000000000000E0A3                 lea     rax, [rcx+2]
.text:000000000000E0A7                 cmp     r13, rax
.text:000000000000E0AA                 jbe     short loc_E0B2
.text:000000000000E0AC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:000000000000E0B2
.text:000000000000E0B2 loc_E0B2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:000000000000E0B2                 mov     eax, r12d
.text:000000000000E0B5                 lea     r15, [rcx+3]
.text:000000000000E0B9                 xor     r12d, r12d
.text:000000000000E0BC                 mov     ebx, 30h ; '0'
.text:000000000000E0C1                 jmp     loc_D428
.text:000000000000E0C1 ; ---------------------------------------------------------------------------
.text:000000000000E0C6                 align 10h
.text:000000000000E0D0
.text:000000000000E0D0 loc_E0D0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:000000000000E0D0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000E0D5                 mov     rbp, r11
.text:000000000000E0D8                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000E0DC                 jmp     loc_DD89
.text:000000000000E0E1 ; ---------------------------------------------------------------------------
.text:000000000000E0E1
.text:000000000000E0E1 loc_E0E1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:000000000000E0E1                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000E0E6                 xor     r12d, r12d
.text:000000000000E0E9                 jmp     loc_DBF0
.text:000000000000E0EE ; ---------------------------------------------------------------------------
.text:000000000000E0EE
.text:000000000000E0EE loc_E0EE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000E0EE                 xor     r10d, r10d
.text:000000000000E0F1                 jmp     loc_DCAD
.text:000000000000E0F6 ; ---------------------------------------------------------------------------
.text:000000000000E0F6
.text:000000000000E0F6 loc_E0F6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:000000000000E0F6                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E0FF                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E104                 xor     r12d, r12d
.text:000000000000E107                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E10C                 jmp     loc_DEEB
.text:000000000000E111 ; ---------------------------------------------------------------------------
.text:000000000000E111
.text:000000000000E111 loc_E111:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:000000000000E111                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000E116                 mov     rsi, r14
.text:000000000000E119                 mov     rcx, r13
.text:000000000000E11C                 mov     rax, rbx
.text:000000000000E11F                 mov     rdi, rbx
.text:000000000000E122                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000E128                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000E12D                 mov     r9, [rsp+0E8h+var_60]
.text:000000000000E135                 cmp     rsi, r11
.text:000000000000E138                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000E13E                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000E146                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000E14B                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000E150                 jnb     short loc_E178
.text:000000000000E152                 cmp     byte ptr [rcx], 0
.text:000000000000E155                 jnz     short loc_E167
.text:000000000000E157                 jmp     short loc_E178
.text:000000000000E157 ; ---------------------------------------------------------------------------
.text:000000000000E159                 align 20h
.text:000000000000E160
.text:000000000000E160 loc_E160:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:000000000000E160                 cmp     byte ptr [r9+rax], 0
.text:000000000000E165                 jz      short loc_E175
.text:000000000000E167
.text:000000000000E167 loc_E167:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:000000000000E167                 add     rax, 1
.text:000000000000E16B                 lea     rdx, [rbp+rax+0]
.text:000000000000E170                 cmp     r11, rdx
.text:000000000000E173                 ja      short loc_E160
.text:000000000000E175
.text:000000000000E175 loc_E175:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:000000000000E175                 mov     rdi, rax
.text:000000000000E178
.text:000000000000E178 loc_E178:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:000000000000E178                                         ; quotearg_buffer_restyled+F57↑j
.text:000000000000E178                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000E17D                 xor     r12d, r12d
.text:000000000000E180                 jmp     loc_DBE6
.text:000000000000E185 ; ---------------------------------------------------------------------------
.text:000000000000E185
.text:000000000000E185 loc_E185:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:000000000000E185                 mov     rdi, rbx
.text:000000000000E188                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000E18E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000E193                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000E199                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000E1A1                 xor     r12d, r12d
.text:000000000000E1A4                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000E1A9                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000E1AE                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000E1B3                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000E1B8                 jmp     loc_DBE6
.text:000000000000E1BD ; ---------------------------------------------------------------------------
.text:000000000000E1BD
.text:000000000000E1BD loc_E1BD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000E1BD                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000E1C2                 movzx   eax, byte ptr [rdx]
.text:000000000000E1C5                 test    al, al
.text:000000000000E1C7                 jz      loc_DFFC
.text:000000000000E1CD                 nop     dword ptr [rax]
.text:000000000000E1D0
.text:000000000000E1D0 loc_E1D0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:000000000000E1D0                 cmp     r13, r15
.text:000000000000E1D3                 jbe     short loc_E1D9
.text:000000000000E1D5                 mov     [r14+r15], al
.text:000000000000E1D9
.text:000000000000E1D9 loc_E1D9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:000000000000E1D9                 add     r15, 1
.text:000000000000E1DD                 movzx   eax, byte ptr [rdx+r15]
.text:000000000000E1E2                 test    al, al
.text:000000000000E1E4                 jnz     short loc_E1D0
.text:000000000000E1E6                 jmp     loc_DFFC
.text:000000000000E1EB ; ---------------------------------------------------------------------------
.text:000000000000E1EB
.text:000000000000E1EB loc_E1EB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000E1EB                 mov     eax, edx
.text:000000000000E1ED                 jmp     loc_D747
.text:000000000000E1F2 ; ---------------------------------------------------------------------------
.text:000000000000E1F2
.text:000000000000E1F2 loc_E1F2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:000000000000E1F2                 movzx   ebx, byte ptr [rax+rcx]
.text:000000000000E1F6                 cmp     bl, 3Eh ; '>'
.text:000000000000E1F9                 ja      loc_DA70
.text:000000000000E1FF                 mov     rax, 7000A38200000000h
.text:000000000000E209                 bt      rax, rbx
.text:000000000000E20D                 jnb     loc_DA70
.text:000000000000E213                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000E218                 jnz     loc_E402
.text:000000000000E21E                 cmp     r13, r15
.text:000000000000E221                 jbe     short loc_E228
.text:000000000000E223                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:000000000000E228
.text:000000000000E228 loc_E228:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:000000000000E228                 lea     rax, [r15+1]
.text:000000000000E22C                 cmp     r13, rax
.text:000000000000E22F                 jbe     short loc_E237
.text:000000000000E231                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:000000000000E237
.text:000000000000E237 loc_E237:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:000000000000E237                 lea     rax, [r15+2]
.text:000000000000E23B                 cmp     r13, rax
.text:000000000000E23E                 jbe     short loc_E246
.text:000000000000E240                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:000000000000E246
.text:000000000000E246 loc_E246:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:000000000000E246                 lea     rax, [r15+3]
.text:000000000000E24A                 cmp     r13, rax
.text:000000000000E24D                 jbe     short loc_E255
.text:000000000000E24F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:000000000000E255
.text:000000000000E255 loc_E255:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:000000000000E255                 add     r15, 4
.text:000000000000E259                 xor     edx, edx
.text:000000000000E25B                 xor     r12d, r12d
.text:000000000000E25E                 xor     eax, eax
.text:000000000000E260                 mov     rbp, rcx
.text:000000000000E263                 jmp     loc_D428
.text:000000000000E268 ; ---------------------------------------------------------------------------
.text:000000000000E268
.text:000000000000E268 loc_E268:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000E268                                         ; DATA XREF: .rodata:jpt_D291↓o
.text:000000000000E268                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000E26A                 jz      loc_E3F8
.text:000000000000E270                 lea     rax, asc_15335  ; "'"
.text:000000000000E277                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E27C                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E281                 xor     r12d, r12d
.text:000000000000E284                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E28D                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E292                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000E297                 mov     [rsp+0E8h+n], 1
.text:000000000000E2A0                 xor     r15d, r15d
.text:000000000000E2A3                 mov     [rsp+0E8h+s2], rax
.text:000000000000E2A8                 jmp     loc_D2D3
.text:000000000000E2A8 ; ---------------------------------------------------------------------------
.text:000000000000E2AD                 align 10h
.text:000000000000E2B0
.text:000000000000E2B0 loc_E2B0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:000000000000E2B0                                         ; quotearg_buffer_restyled+805↑j ...
.text:000000000000E2B0                 mov     rbp, r11
.text:000000000000E2B3                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000E2B8                 jmp     loc_DD89
.text:000000000000E2BD ; ---------------------------------------------------------------------------
.text:000000000000E2BD
.text:000000000000E2BD loc_E2BD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000E2BD                 lea     rax, unk_15333
.text:000000000000E2C4                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E2C9                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000E2CE                 xor     r12d, r12d
.text:000000000000E2D1                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E2DA                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E2DF                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000E2E4                 mov     [rsp+0E8h+n], 1
.text:000000000000E2ED                 xor     r15d, r15d
.text:000000000000E2F0                 mov     [rsp+0E8h+s2], rax
.text:000000000000E2F5                 jmp     loc_D2D3
.text:000000000000E2FA ; ---------------------------------------------------------------------------
.text:000000000000E2FA
.text:000000000000E2FA loc_E2FA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000E2FA                 mov     eax, edx
.text:000000000000E2FC
.text:000000000000E2FC loc_E2FC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000E2FC                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000E2FC                 mov     rbx, [rsp+0E8h+s2]
.text:000000000000E301                 test    rbx, rbx
.text:000000000000E304                 jz      short loc_E332
.text:000000000000E306                 test    al, al
.text:000000000000E308                 jz      short loc_E332
.text:000000000000E30A                 movzx   ecx, byte ptr [rbx]
.text:000000000000E30D                 mov     rax, rbx
.text:000000000000E310                 test    cl, cl
.text:000000000000E312                 jz      short loc_E332
.text:000000000000E314                 mov     rdx, r15
.text:000000000000E317                 sub     rax, r15
.text:000000000000E31A
.text:000000000000E31A loc_E31A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000E31A                 cmp     r13, rdx
.text:000000000000E31D                 jbe     short loc_E323
.text:000000000000E31F                 mov     [r14+rdx], cl
.text:000000000000E323
.text:000000000000E323 loc_E323:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:000000000000E323                 add     rdx, 1
.text:000000000000E327                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000E32B                 test    cl, cl
.text:000000000000E32D                 jnz     short loc_E31A
.text:000000000000E32F                 mov     r15, rdx
.text:000000000000E332
.text:000000000000E332 loc_E332:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:000000000000E332                                         ; quotearg_buffer_restyled+1108↑j ...
.text:000000000000E332                 cmp     r13, r15
.text:000000000000E335                 jbe     loc_DDD9
.text:000000000000E33B                 mov     byte ptr [r14+r15], 0
.text:000000000000E340                 jmp     loc_DDD9
.text:000000000000E345 ; ---------------------------------------------------------------------------
.text:000000000000E345
.text:000000000000E345 loc_E345:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:000000000000E345                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000E34A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000E34F                 mov     rbp, r11
.text:000000000000E352                 setz    al
.text:000000000000E355                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000E359                 jmp     loc_DD89
.text:000000000000E35E ; ---------------------------------------------------------------------------
.text:000000000000E35E
.text:000000000000E35E loc_E35E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000E35E                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000E362                 mov     rdi, rcx
.text:000000000000E365                 call    gettext_quote
.text:000000000000E36A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000E36F                 jmp     loc_DFC6
.text:000000000000E374 ; ---------------------------------------------------------------------------
.text:000000000000E374
.text:000000000000E374 loc_E374:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:000000000000E374                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000E378                 mov     rdi, rcx
.text:000000000000E37B                 call    gettext_quote
.text:000000000000E380                 mov     [rsp+0E8h+var_88], rax
.text:000000000000E385                 jmp     loc_DFF1
.text:000000000000E38A ; ---------------------------------------------------------------------------
.text:000000000000E38A
.text:000000000000E38A loc_E38A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000E38A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000E38F                 mov     rbp, r11
.text:000000000000E392                 mov     eax, edx
.text:000000000000E394                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000E398                 jmp     loc_DD89
.text:000000000000E39D ; ---------------------------------------------------------------------------
.text:000000000000E39D
.text:000000000000E39D loc_E39D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000E39D                 sub     rsp, 8
.text:000000000000E3A1                 mov     r8d, 5
.text:000000000000E3A7                 mov     rcx, r11
.text:000000000000E3AA                 push    [rsp+0F0h+var_88]
.text:000000000000E3AE                 push    [rsp+0F8h+var_80]
.text:000000000000E3B2                 mov     rdi, r14
.text:000000000000E3B5                 push    [rsp+100h+var_C8]
.text:000000000000E3B9                 mov     r9d, [rsp+108h+var_70]
.text:000000000000E3C1                 mov     rdx, [rsp+108h+s]
.text:000000000000E3C6                 mov     rsi, [rsp+108h+var_98]
.text:000000000000E3CB                 call    quotearg_buffer_restyled
.text:000000000000E3D0                 add     rsp, 20h
.text:000000000000E3D4                 mov     r15, rax
.text:000000000000E3D7                 jmp     loc_DDD9
.text:000000000000E3DC ; ---------------------------------------------------------------------------
.text:000000000000E3DC
.text:000000000000E3DC loc_E3DC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000E3DC                 movzx   eax, [rsp+0E8h+var_6C]
.text:000000000000E3E1                 jmp     loc_E2FC
.text:000000000000E3E6 ; ---------------------------------------------------------------------------
.text:000000000000E3E6
.text:000000000000E3E6 loc_E3E6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:000000000000E3E6                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000E3EE                 jmp     loc_DD89
.text:000000000000E3F3 ; ---------------------------------------------------------------------------
.text:000000000000E3F3
.text:000000000000E3F3 loc_E3F3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:000000000000E3F3                 call    ___stack_chk_fail
.text:000000000000E3F8 ; ---------------------------------------------------------------------------
.text:000000000000E3F8
.text:000000000000E3F8 loc_E3F8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:000000000000E3F8                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000E3FD                 jmp     loc_DE71
.text:000000000000E402 ; ---------------------------------------------------------------------------
.text:000000000000E402
.text:000000000000E402 loc_E402:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:000000000000E402                 mov     rbp, r11
.text:000000000000E405                 jmp     loc_DDA0
.text:000000000000E40A ; ---------------------------------------------------------------------------
.text:000000000000E40A
.text:000000000000E40A loc_E40A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000E40A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E40F                 xor     eax, eax
.text:000000000000E411                 xor     r12d, r12d
.text:000000000000E414                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E41D                 jmp     loc_D9C4
.text:000000000000E422 ; ---------------------------------------------------------------------------
.text:000000000000E422
.text:000000000000E422 loc_E422:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:000000000000E422                 mov     rdx, r13
.text:000000000000E425                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000E42A                 jmp     loc_DA22
.text:000000000000E42F ; ---------------------------------------------------------------------------
.text:000000000000E42F
.text:000000000000E42F def_D291:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000E42F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000E42F ; } // starts at D200
.text:000000000000E42F quotearg_buffer_restyled endp
.text:000000000000E42F
.text:000000000000E42F ; ---------------------------------------------------------------------------
.text:000000000000E434                 align 20h
.text:000000000000E440
.text:000000000000E440 ; =============== S U B R O U T I N E =======================================
.text:000000000000E440
.text:000000000000E440
.text:000000000000E440 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:000000000000E440                                         ; quotearg_n_mem+7↓j ...
.text:000000000000E440
.text:000000000000E440 var_50          = qword ptr -50h
.text:000000000000E440 var_48          = qword ptr -48h
.text:000000000000E440 var_40          = dword ptr -40h
.text:000000000000E440 var_3C          = dword ptr -3Ch
.text:000000000000E440
.text:000000000000E440 ; __unwind {
.text:000000000000E440                 push    r15
.text:000000000000E442                 push    r14
.text:000000000000E444                 movsxd  r15, edi
.text:000000000000E447                 push    r13
.text:000000000000E449                 push    r12
.text:000000000000E44B                 mov     r14, rdx
.text:000000000000E44E                 push    rbp
.text:000000000000E44F                 push    rbx
.text:000000000000E450                 mov     rbp, rcx
.text:000000000000E453                 sub     rsp, 28h
.text:000000000000E457                 mov     [rsp+58h+var_50], rsi
.text:000000000000E45C                 call    ___errno_location
.text:000000000000E461                 mov     r13, rax
.text:000000000000E464                 mov     eax, [rax]
.text:000000000000E466                 test    r15d, r15d
.text:000000000000E469                 mov     rbx, cs:slotvec
.text:000000000000E470                 mov     [rsp+58h+var_40], eax
.text:000000000000E474                 js      loc_E5E1
.text:000000000000E47A                 cmp     cs:nslots, r15d
.text:000000000000E481                 jg      short loc_E4E5
.text:000000000000E483                 cmp     r15d, 7FFFFFFFh
.text:000000000000E48A                 jz      loc_E5E6
.text:000000000000E490                 lea     r12d, [r15+1]
.text:000000000000E494                 lea     rax, slotvec0
.text:000000000000E49B                 movsxd  rsi, r12d
.text:000000000000E49E                 shl     rsi, 4
.text:000000000000E4A2                 cmp     rbx, rax
.text:000000000000E4A5                 jz      loc_E5C0
.text:000000000000E4AB                 mov     rdi, rbx
.text:000000000000E4AE                 call    xrealloc
.text:000000000000E4B3                 mov     rbx, rax
.text:000000000000E4B6                 mov     cs:slotvec, rax
.text:000000000000E4BD
.text:000000000000E4BD loc_E4BD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000E4BD                 movsxd  rdi, cs:nslots
.text:000000000000E4C4                 mov     edx, r12d
.text:000000000000E4C7                 xor     esi, esi        ; c
.text:000000000000E4C9                 sub     edx, edi
.text:000000000000E4CB                 shl     rdi, 4
.text:000000000000E4CF                 movsxd  rdx, edx
.text:000000000000E4D2                 add     rdi, rbx        ; s
.text:000000000000E4D5                 shl     rdx, 4          ; n
.text:000000000000E4D9                 call    _memset
.text:000000000000E4DE                 mov     cs:nslots, r12d
.text:000000000000E4E5
.text:000000000000E4E5 loc_E4E5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:000000000000E4E5                 mov     eax, [rbp+4]
.text:000000000000E4E8                 shl     r15, 4
.text:000000000000E4EC                 sub     rsp, 8
.text:000000000000E4F0                 add     rbx, r15
.text:000000000000E4F3                 lea     r15, [rbp+8]
.text:000000000000E4F7                 mov     r8d, [rbp+0]
.text:000000000000E4FB                 mov     r11, [rbx]
.text:000000000000E4FE                 mov     r12, [rbx+8]
.text:000000000000E502                 mov     rcx, r14
.text:000000000000E505                 or      eax, 1
.text:000000000000E508                 mov     [rsp+60h+var_3C], eax
.text:000000000000E50C                 push    qword ptr [rbp+30h]
.text:000000000000E50F                 mov     r9d, eax
.text:000000000000E512                 push    qword ptr [rbp+28h]
.text:000000000000E515                 push    r15
.text:000000000000E517                 mov     rsi, r11
.text:000000000000E51A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000E51F                 mov     rdi, r12
.text:000000000000E522                 mov     [rsp+78h+var_48], r11
.text:000000000000E527                 call    quotearg_buffer_restyled
.text:000000000000E52C                 add     rsp, 20h
.text:000000000000E530                 mov     r11, [rsp+58h+var_48]
.text:000000000000E535                 cmp     r11, rax
.text:000000000000E538                 ja      short loc_E5A1
.text:000000000000E53A                 lea     rsi, [rax+1]
.text:000000000000E53E                 lea     rax, slot0
.text:000000000000E545                 cmp     r12, rax
.text:000000000000E548                 mov     [rbx], rsi
.text:000000000000E54B                 jz      short loc_E55F
.text:000000000000E54D                 mov     rdi, r12        ; ptr
.text:000000000000E550                 mov     [rsp+58h+var_48], rsi
.text:000000000000E555                 call    free
.text:000000000000E55A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000E55F
.text:000000000000E55F loc_E55F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000E55F                 mov     rdi, rsi
.text:000000000000E562                 mov     [rsp+58h+var_48], rsi
.text:000000000000E567                 call    xmalloc
.text:000000000000E56C                 sub     rsp, 8
.text:000000000000E570                 mov     [rbx+8], rax
.text:000000000000E574                 mov     r8d, [rbp+0]
.text:000000000000E578                 push    qword ptr [rbp+30h]
.text:000000000000E57B                 push    qword ptr [rbp+28h]
.text:000000000000E57E                 mov     rcx, r14
.text:000000000000E581                 push    r15
.text:000000000000E583                 mov     r9d, [rsp+78h+var_3C]
.text:000000000000E588                 mov     rdi, rax
.text:000000000000E58B                 mov     rdx, [rsp+78h+var_50]
.text:000000000000E590                 mov     rsi, [rsp+78h+var_48]
.text:000000000000E595                 mov     r12, rax
.text:000000000000E598                 call    quotearg_buffer_restyled
.text:000000000000E59D                 add     rsp, 20h
.text:000000000000E5A1
.text:000000000000E5A1 loc_E5A1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:000000000000E5A1                 mov     eax, [rsp+58h+var_40]
.text:000000000000E5A5                 mov     [r13+0], eax
.text:000000000000E5A9                 add     rsp, 28h
.text:000000000000E5AD                 mov     rax, r12
.text:000000000000E5B0                 pop     rbx
.text:000000000000E5B1                 pop     rbp
.text:000000000000E5B2                 pop     r12
.text:000000000000E5B4                 pop     r13
.text:000000000000E5B6                 pop     r14
.text:000000000000E5B8                 pop     r15
.text:000000000000E5BA                 retn
.text:000000000000E5BA ; ---------------------------------------------------------------------------
.text:000000000000E5BB                 align 20h
.text:000000000000E5C0
.text:000000000000E5C0 loc_E5C0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:000000000000E5C0                 xor     edi, edi
.text:000000000000E5C2                 call    xrealloc
.text:000000000000E5C7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000E5CF                 mov     rbx, rax
.text:000000000000E5D2                 mov     cs:slotvec, rax
.text:000000000000E5D9                 movups  xmmword ptr [rax], xmm0
.text:000000000000E5DC                 jmp     loc_E4BD
.text:000000000000E5E1 ; ---------------------------------------------------------------------------
.text:000000000000E5E1
.text:000000000000E5E1 loc_E5E1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:000000000000E5E1                 call    _abort
.text:000000000000E5E6 ; ---------------------------------------------------------------------------
.text:000000000000E5E6
.text:000000000000E5E6 loc_E5E6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:000000000000E5E6                 call    xalloc_die
.text:000000000000E5E6 ; } // starts at E440
.text:000000000000E5E6 quotearg_n_options endp
.text:000000000000E5E6
.text:000000000000E5E6 ; ---------------------------------------------------------------------------
.text:000000000000E5EB                 align 10h
.text:000000000000E5F0
.text:000000000000E5F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E5F0
.text:000000000000E5F0 ; Attributes: info_from_lumina
.text:000000000000E5F0
.text:000000000000E5F0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:000000000000E5F0                 public clone_quoting_options
.text:000000000000E5F0 clone_quoting_options proc near
.text:000000000000E5F0 ; __unwind {
.text:000000000000E5F0                 push    r12
.text:000000000000E5F2                 push    rbp
.text:000000000000E5F3                 push    rbx
.text:000000000000E5F4                 mov     rbx, rdi
.text:000000000000E5F7                 call    ___errno_location
.text:000000000000E5FC                 mov     r12d, [rax]
.text:000000000000E5FF                 mov     rbp, rax
.text:000000000000E602                 lea     rax, default_quoting_options
.text:000000000000E609                 test    rbx, rbx
.text:000000000000E60C                 mov     esi, 38h ; '8'  ; n
.text:000000000000E611                 cmovz   rbx, rax
.text:000000000000E615                 mov     rdi, rbx        ; src
.text:000000000000E618                 call    xmemdup
.text:000000000000E61D                 mov     [rbp+0], r12d
.text:000000000000E621                 pop     rbx
.text:000000000000E622                 pop     rbp
.text:000000000000E623                 pop     r12
.text:000000000000E625                 retn
.text:000000000000E625 ; } // starts at E5F0
.text:000000000000E625 clone_quoting_options endp
.text:000000000000E625
.text:000000000000E625 ; ---------------------------------------------------------------------------
.text:000000000000E626                 align 10h
.text:000000000000E630
.text:000000000000E630 ; =============== S U B R O U T I N E =======================================
.text:000000000000E630
.text:000000000000E630
.text:000000000000E630                 public get_quoting_style
.text:000000000000E630 get_quoting_style proc near
.text:000000000000E630 ; __unwind {
.text:000000000000E630                 lea     rax, default_quoting_options
.text:000000000000E637                 test    rdi, rdi
.text:000000000000E63A                 cmovz   rdi, rax
.text:000000000000E63E                 mov     eax, [rdi]
.text:000000000000E640                 retn
.text:000000000000E640 ; } // starts at E630
.text:000000000000E640 get_quoting_style endp
.text:000000000000E640
.text:000000000000E640 ; ---------------------------------------------------------------------------
.text:000000000000E641                 align 10h
.text:000000000000E650
.text:000000000000E650 ; =============== S U B R O U T I N E =======================================
.text:000000000000E650
.text:000000000000E650
.text:000000000000E650                 public set_quoting_style
.text:000000000000E650 set_quoting_style proc near
.text:000000000000E650 ; __unwind {
.text:000000000000E650                 lea     rax, default_quoting_options
.text:000000000000E657                 test    rdi, rdi
.text:000000000000E65A                 cmovz   rdi, rax
.text:000000000000E65E                 mov     [rdi], esi
.text:000000000000E660                 retn
.text:000000000000E660 ; } // starts at E650
.text:000000000000E660 set_quoting_style endp
.text:000000000000E660
.text:000000000000E660 ; ---------------------------------------------------------------------------
.text:000000000000E661                 align 10h
.text:000000000000E670
.text:000000000000E670 ; =============== S U B R O U T I N E =======================================
.text:000000000000E670
.text:000000000000E670 ; Attributes: info_from_lumina
.text:000000000000E670
.text:000000000000E670 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:000000000000E670                 public set_char_quoting
.text:000000000000E670 set_char_quoting proc near
.text:000000000000E670 ; __unwind {
.text:000000000000E670                 lea     rax, default_quoting_options
.text:000000000000E677                 test    rdi, rdi
.text:000000000000E67A                 mov     ecx, esi
.text:000000000000E67C                 cmovz   rdi, rax
.text:000000000000E680                 mov     eax, esi
.text:000000000000E682                 and     ecx, 1Fh
.text:000000000000E685                 shr     al, 5
.text:000000000000E688                 movzx   eax, al
.text:000000000000E68B                 lea     rdi, [rdi+rax*4+8]
.text:000000000000E690                 mov     esi, [rdi]
.text:000000000000E692                 mov     eax, esi
.text:000000000000E694                 shr     eax, cl
.text:000000000000E696                 xor     edx, eax
.text:000000000000E698                 and     eax, 1
.text:000000000000E69B                 and     edx, 1
.text:000000000000E69E                 shl     edx, cl
.text:000000000000E6A0                 xor     edx, esi
.text:000000000000E6A2                 mov     [rdi], edx
.text:000000000000E6A4                 retn
.text:000000000000E6A4 ; } // starts at E670
.text:000000000000E6A4 set_char_quoting endp
.text:000000000000E6A4
.text:000000000000E6A4 ; ---------------------------------------------------------------------------
.text:000000000000E6A5                 align 10h
.text:000000000000E6B0
.text:000000000000E6B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6B0
.text:000000000000E6B0
.text:000000000000E6B0                 public set_quoting_flags
.text:000000000000E6B0 set_quoting_flags proc near
.text:000000000000E6B0 ; __unwind {
.text:000000000000E6B0                 lea     rax, default_quoting_options
.text:000000000000E6B7                 test    rdi, rdi
.text:000000000000E6BA                 cmovz   rdi, rax
.text:000000000000E6BE                 mov     eax, [rdi+4]
.text:000000000000E6C1                 mov     [rdi+4], esi
.text:000000000000E6C4                 retn
.text:000000000000E6C4 ; } // starts at E6B0
.text:000000000000E6C4 set_quoting_flags endp
.text:000000000000E6C4
.text:000000000000E6C4 ; ---------------------------------------------------------------------------
.text:000000000000E6C5                 align 10h
.text:000000000000E6D0
.text:000000000000E6D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6D0
.text:000000000000E6D0 ; Attributes: info_from_lumina
.text:000000000000E6D0
.text:000000000000E6D0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:000000000000E6D0                 public set_custom_quoting
.text:000000000000E6D0 set_custom_quoting proc near
.text:000000000000E6D0 ; __unwind {
.text:000000000000E6D0                 lea     rax, default_quoting_options
.text:000000000000E6D7                 test    rdi, rdi
.text:000000000000E6DA                 cmovz   rdi, rax
.text:000000000000E6DE                 test    rsi, rsi
.text:000000000000E6E1                 mov     dword ptr [rdi], 0Ah
.text:000000000000E6E7                 jz      short loc_E6F7
.text:000000000000E6E9                 test    rdx, rdx
.text:000000000000E6EC                 jz      short loc_E6F7
.text:000000000000E6EE                 mov     [rdi+28h], rsi
.text:000000000000E6F2                 mov     [rdi+30h], rdx
.text:000000000000E6F6                 retn
.text:000000000000E6F7 ; ---------------------------------------------------------------------------
.text:000000000000E6F7
.text:000000000000E6F7 loc_E6F7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:000000000000E6F7                                         ; set_custom_quoting+1C↑j
.text:000000000000E6F7                 sub     rsp, 8
.text:000000000000E6FB                 call    _abort
.text:000000000000E6FB ; } // starts at E6D0
.text:000000000000E6FB set_custom_quoting endp
.text:000000000000E6FB
.text:000000000000E700
.text:000000000000E700 ; =============== S U B R O U T I N E =======================================
.text:000000000000E700
.text:000000000000E700 ; Attributes: info_from_lumina
.text:000000000000E700
.text:000000000000E700 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:000000000000E700                 public quotearg_buffer
.text:000000000000E700 quotearg_buffer proc near
.text:000000000000E700
.text:000000000000E700 var_40          = qword ptr -40h
.text:000000000000E700
.text:000000000000E700 ; __unwind {
.text:000000000000E700                 push    r15
.text:000000000000E702                 push    r14
.text:000000000000E704                 lea     rax, default_quoting_options
.text:000000000000E70B                 push    r13
.text:000000000000E70D                 push    r12
.text:000000000000E70F                 mov     r13, rdi
.text:000000000000E712                 push    rbp
.text:000000000000E713                 push    rbx
.text:000000000000E714                 mov     rbx, r8
.text:000000000000E717                 mov     r14, rsi
.text:000000000000E71A                 mov     r15, rdx
.text:000000000000E71D                 sub     rsp, 18h
.text:000000000000E721                 test    r8, r8
.text:000000000000E724                 cmovz   rbx, rax
.text:000000000000E728                 mov     [rsp+48h+var_40], rcx
.text:000000000000E72D                 call    ___errno_location
.text:000000000000E732                 mov     r12d, [rax]
.text:000000000000E735                 mov     rbp, rax
.text:000000000000E738                 lea     rax, [rbx+8]
.text:000000000000E73C                 sub     rsp, 8
.text:000000000000E740                 mov     r9d, [rbx+4]
.text:000000000000E744                 push    qword ptr [rbx+30h]
.text:000000000000E747                 mov     r8d, [rbx]
.text:000000000000E74A                 push    qword ptr [rbx+28h]
.text:000000000000E74D                 mov     rdx, r15
.text:000000000000E750                 push    rax
.text:000000000000E751                 mov     rcx, [rsp+68h+var_40]
.text:000000000000E756                 mov     rsi, r14
.text:000000000000E759                 mov     rdi, r13
.text:000000000000E75C                 call    quotearg_buffer_restyled
.text:000000000000E761                 mov     [rbp+0], r12d
.text:000000000000E765                 add     rsp, 38h
.text:000000000000E769                 pop     rbx
.text:000000000000E76A                 pop     rbp
.text:000000000000E76B                 pop     r12
.text:000000000000E76D                 pop     r13
.text:000000000000E76F                 pop     r14
.text:000000000000E771                 pop     r15
.text:000000000000E773                 retn
.text:000000000000E773 ; } // starts at E700
.text:000000000000E773 quotearg_buffer endp
.text:000000000000E773
.text:000000000000E773 ; ---------------------------------------------------------------------------
.text:000000000000E774                 align 20h
.text:000000000000E780
.text:000000000000E780 ; =============== S U B R O U T I N E =======================================
.text:000000000000E780
.text:000000000000E780 ; Attributes: info_from_lumina
.text:000000000000E780
.text:000000000000E780 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:000000000000E780                 public quotearg_alloc_mem
.text:000000000000E780 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:000000000000E780
.text:000000000000E780 var_5C          = dword ptr -5Ch
.text:000000000000E780 var_58          = qword ptr -58h
.text:000000000000E780 var_50          = qword ptr -50h
.text:000000000000E780 var_48          = qword ptr -48h
.text:000000000000E780 var_40          = qword ptr -40h
.text:000000000000E780
.text:000000000000E780 ; __unwind {
.text:000000000000E780                 push    r15
.text:000000000000E782                 push    r14
.text:000000000000E784                 lea     rax, default_quoting_options
.text:000000000000E78B                 push    r13
.text:000000000000E78D                 push    r12
.text:000000000000E78F                 mov     r12, rdx
.text:000000000000E792                 push    rbp
.text:000000000000E793                 push    rbx
.text:000000000000E794                 mov     rbx, rcx
.text:000000000000E797                 mov     r14, rdi
.text:000000000000E79A                 mov     r15, rsi
.text:000000000000E79D                 sub     rsp, 38h
.text:000000000000E7A1                 test    rcx, rcx
.text:000000000000E7A4                 cmovz   rbx, rax
.text:000000000000E7A8                 xor     ebp, ebp
.text:000000000000E7AA                 call    ___errno_location
.text:000000000000E7AF                 test    r12, r12
.text:000000000000E7B2                 mov     r13, rax
.text:000000000000E7B5                 mov     eax, [rax]
.text:000000000000E7B7                 setz    bpl
.text:000000000000E7BB                 or      ebp, [rbx+4]
.text:000000000000E7BE                 lea     r10, [rbx+8]
.text:000000000000E7C2                 sub     rsp, 8
.text:000000000000E7C6                 mov     r8d, [rbx]
.text:000000000000E7C9                 mov     rcx, r15
.text:000000000000E7CC                 mov     [rsp+70h+var_5C], eax
.text:000000000000E7D0                 push    qword ptr [rbx+30h]
.text:000000000000E7D3                 mov     rdx, r14
.text:000000000000E7D6                 push    qword ptr [rbx+28h]
.text:000000000000E7D9                 push    r10
.text:000000000000E7DB                 xor     esi, esi
.text:000000000000E7DD                 mov     r9d, ebp
.text:000000000000E7E0                 xor     edi, edi
.text:000000000000E7E2                 mov     [rsp+88h+var_48], r10
.text:000000000000E7E7                 call    quotearg_buffer_restyled
.text:000000000000E7EC                 lea     rsi, [rax+1]
.text:000000000000E7F0                 mov     [rsp+88h+var_40], rax
.text:000000000000E7F5                 add     rsp, 20h
.text:000000000000E7F9                 mov     rdi, rsi
.text:000000000000E7FC                 mov     [rsp+68h+var_50], rsi
.text:000000000000E801                 call    xmalloc
.text:000000000000E806                 mov     [rsp+68h+var_58], rax
.text:000000000000E80B                 sub     rsp, 8
.text:000000000000E80F                 push    qword ptr [rbx+30h]
.text:000000000000E812                 push    qword ptr [rbx+28h]
.text:000000000000E815                 mov     r10, [rsp+80h+var_48]
.text:000000000000E81A                 mov     r9d, ebp
.text:000000000000E81D                 mov     r8d, [rbx]
.text:000000000000E820                 mov     rcx, r15
.text:000000000000E823                 mov     rdx, r14
.text:000000000000E826                 mov     rdi, rax
.text:000000000000E829                 push    r10
.text:000000000000E82B                 mov     rsi, [rsp+88h+var_50]
.text:000000000000E830                 call    quotearg_buffer_restyled
.text:000000000000E835                 mov     eax, [rsp+88h+var_5C]
.text:000000000000E839                 add     rsp, 20h
.text:000000000000E83D                 test    r12, r12
.text:000000000000E840                 mov     [r13+0], eax
.text:000000000000E844                 jz      short loc_E84F
.text:000000000000E846                 mov     r11, [rsp+68h+var_40]
.text:000000000000E84B                 mov     [r12], r11
.text:000000000000E84F
.text:000000000000E84F loc_E84F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000E84F                 mov     rax, [rsp+68h+var_58]
.text:000000000000E854                 add     rsp, 38h
.text:000000000000E858                 pop     rbx
.text:000000000000E859                 pop     rbp
.text:000000000000E85A                 pop     r12
.text:000000000000E85C                 pop     r13
.text:000000000000E85E                 pop     r14
.text:000000000000E860                 pop     r15
.text:000000000000E862                 retn
.text:000000000000E862 ; } // starts at E780
.text:000000000000E862 quotearg_alloc_mem endp
.text:000000000000E862
.text:000000000000E862 ; ---------------------------------------------------------------------------
.text:000000000000E863                 align 10h
.text:000000000000E870
.text:000000000000E870 ; =============== S U B R O U T I N E =======================================
.text:000000000000E870
.text:000000000000E870
.text:000000000000E870                 public quotearg_alloc
.text:000000000000E870 quotearg_alloc  proc near
.text:000000000000E870 ; __unwind {
.text:000000000000E870                 mov     rcx, rdx
.text:000000000000E873                 xor     edx, edx
.text:000000000000E875                 jmp     quotearg_alloc_mem
.text:000000000000E875 ; } // starts at E870
.text:000000000000E875 quotearg_alloc  endp
.text:000000000000E875
.text:000000000000E875 ; ---------------------------------------------------------------------------
.text:000000000000E87A                 align 20h
.text:000000000000E880
.text:000000000000E880 ; =============== S U B R O U T I N E =======================================
.text:000000000000E880
.text:000000000000E880 ; Attributes: info_from_lumina
.text:000000000000E880
.text:000000000000E880 ; void __cdecl quotearg_free()
.text:000000000000E880                 public quotearg_free
.text:000000000000E880 quotearg_free   proc near
.text:000000000000E880 ; __unwind {
.text:000000000000E880                 mov     eax, cs:nslots
.text:000000000000E886                 push    r12
.text:000000000000E888                 mov     r12, cs:slotvec
.text:000000000000E88F                 push    rbp
.text:000000000000E890                 push    rbx
.text:000000000000E891                 cmp     eax, 1
.text:000000000000E894                 jle     short loc_E8C1
.text:000000000000E896                 sub     eax, 2
.text:000000000000E899                 lea     rbx, [r12+18h]
.text:000000000000E89E                 shl     rax, 4
.text:000000000000E8A2                 lea     rbp, [r12+rax+28h]
.text:000000000000E8A7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000E8B0
.text:000000000000E8B0 loc_E8B0:                               ; CODE XREF: quotearg_free+3F↓j
.text:000000000000E8B0                 mov     rdi, [rbx]      ; ptr
.text:000000000000E8B3                 add     rbx, 10h
.text:000000000000E8B7                 call    free
.text:000000000000E8BC                 cmp     rbx, rbp
.text:000000000000E8BF                 jnz     short loc_E8B0
.text:000000000000E8C1
.text:000000000000E8C1 loc_E8C1:                               ; CODE XREF: quotearg_free+14↑j
.text:000000000000E8C1                 mov     rdi, [r12+8]    ; ptr
.text:000000000000E8C6                 lea     rbx, slot0
.text:000000000000E8CD                 cmp     rdi, rbx
.text:000000000000E8D0                 jz      short loc_E8E9
.text:000000000000E8D2                 call    free
.text:000000000000E8D7                 mov     cs:slotvec0, 100h
.text:000000000000E8E2                 mov     cs:off_21A098, rbx
.text:000000000000E8E9
.text:000000000000E8E9 loc_E8E9:                               ; CODE XREF: quotearg_free+50↑j
.text:000000000000E8E9                 lea     rbx, slotvec0
.text:000000000000E8F0                 cmp     r12, rbx
.text:000000000000E8F3                 jz      short loc_E904
.text:000000000000E8F5                 mov     rdi, r12        ; ptr
.text:000000000000E8F8                 call    free
.text:000000000000E8FD                 mov     cs:slotvec, rbx
.text:000000000000E904
.text:000000000000E904 loc_E904:                               ; CODE XREF: quotearg_free+73↑j
.text:000000000000E904                 pop     rbx
.text:000000000000E905                 mov     cs:nslots, 1
.text:000000000000E90F                 pop     rbp
.text:000000000000E910                 pop     r12
.text:000000000000E912                 retn
.text:000000000000E912 ; } // starts at E880
.text:000000000000E912 quotearg_free   endp
.text:000000000000E912
.text:000000000000E912 ; ---------------------------------------------------------------------------
.text:000000000000E913                 align 20h
.text:000000000000E920
.text:000000000000E920 ; =============== S U B R O U T I N E =======================================
.text:000000000000E920
.text:000000000000E920
.text:000000000000E920                 public quotearg_n
.text:000000000000E920 quotearg_n      proc near
.text:000000000000E920 ; __unwind {
.text:000000000000E920                 lea     rcx, default_quoting_options
.text:000000000000E927                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E92E                 jmp     quotearg_n_options
.text:000000000000E92E ; } // starts at E920
.text:000000000000E92E quotearg_n      endp
.text:000000000000E92E
.text:000000000000E92E ; ---------------------------------------------------------------------------
.text:000000000000E933                 align 20h
.text:000000000000E940
.text:000000000000E940 ; =============== S U B R O U T I N E =======================================
.text:000000000000E940
.text:000000000000E940
.text:000000000000E940                 public quotearg_n_mem
.text:000000000000E940 quotearg_n_mem  proc near
.text:000000000000E940 ; __unwind {
.text:000000000000E940                 lea     rcx, default_quoting_options
.text:000000000000E947                 jmp     quotearg_n_options
.text:000000000000E947 ; } // starts at E940
.text:000000000000E947 quotearg_n_mem  endp
.text:000000000000E947
.text:000000000000E947 ; ---------------------------------------------------------------------------
.text:000000000000E94C                 align 10h
.text:000000000000E950
.text:000000000000E950 ; =============== S U B R O U T I N E =======================================
.text:000000000000E950
.text:000000000000E950
.text:000000000000E950                 public quotearg
.text:000000000000E950 quotearg        proc near
.text:000000000000E950 ; __unwind {
.text:000000000000E950                 lea     rcx, default_quoting_options
.text:000000000000E957                 mov     rsi, rdi
.text:000000000000E95A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E961                 xor     edi, edi
.text:000000000000E963                 jmp     quotearg_n_options
.text:000000000000E963 ; } // starts at E950
.text:000000000000E963 quotearg        endp
.text:000000000000E963
.text:000000000000E963 ; ---------------------------------------------------------------------------
.text:000000000000E968                 align 10h
.text:000000000000E970
.text:000000000000E970 ; =============== S U B R O U T I N E =======================================
.text:000000000000E970
.text:000000000000E970
.text:000000000000E970                 public quotearg_mem
.text:000000000000E970 quotearg_mem    proc near
.text:000000000000E970 ; __unwind {
.text:000000000000E970                 lea     rcx, default_quoting_options
.text:000000000000E977                 mov     rdx, rsi
.text:000000000000E97A                 mov     rsi, rdi
.text:000000000000E97D                 xor     edi, edi
.text:000000000000E97F                 jmp     quotearg_n_options
.text:000000000000E97F ; } // starts at E970
.text:000000000000E97F quotearg_mem    endp
.text:000000000000E97F
.text:000000000000E97F ; ---------------------------------------------------------------------------
.text:000000000000E984                 align 10h
.text:000000000000E990
.text:000000000000E990 ; =============== S U B R O U T I N E =======================================
.text:000000000000E990
.text:000000000000E990 ; Attributes: info_from_lumina
.text:000000000000E990
.text:000000000000E990 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:000000000000E990                 public quotearg_n_style
.text:000000000000E990 quotearg_n_style proc near              ; CODE XREF: emit_verbose+17↑p
.text:000000000000E990                                         ; emit_verbose+29↑p ...
.text:000000000000E990
.text:000000000000E990 var_48          = dword ptr -48h
.text:000000000000E990 var_44          = qword ptr -44h
.text:000000000000E990 var_3C          = qword ptr -3Ch
.text:000000000000E990 var_34          = qword ptr -34h
.text:000000000000E990 var_2C          = qword ptr -2Ch
.text:000000000000E990 var_24          = qword ptr -24h
.text:000000000000E990 var_1C          = qword ptr -1Ch
.text:000000000000E990 var_14          = dword ptr -14h
.text:000000000000E990 var_10          = qword ptr -10h
.text:000000000000E990
.text:000000000000E990 ; __unwind {
.text:000000000000E990                 sub     rsp, 48h
.text:000000000000E994                 mov     rax, rdx
.text:000000000000E997                 mov     rdx, fs:28h
.text:000000000000E9A0                 mov     [rsp+48h+var_10], rdx
.text:000000000000E9A5                 xor     edx, edx
.text:000000000000E9A7                 cmp     esi, 0Ah
.text:000000000000E9AA                 jz      short loc_EA14
.text:000000000000E9AC                 mov     [rsp+48h+var_48], esi
.text:000000000000E9AF                 mov     rcx, rsp
.text:000000000000E9B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E9B9                 mov     rsi, rax
.text:000000000000E9BC                 mov     [rsp+48h+var_44], 0
.text:000000000000E9C5                 mov     [rsp+48h+var_3C], 0
.text:000000000000E9CE                 mov     [rsp+48h+var_34], 0
.text:000000000000E9D7                 mov     [rsp+48h+var_2C], 0
.text:000000000000E9E0                 mov     [rsp+48h+var_24], 0
.text:000000000000E9E9                 mov     [rsp+48h+var_1C], 0
.text:000000000000E9F2                 mov     [rsp+48h+var_14], 0
.text:000000000000E9FA                 call    quotearg_n_options
.text:000000000000E9FF                 mov     rcx, [rsp+48h+var_10]
.text:000000000000EA04                 xor     rcx, fs:28h
.text:000000000000EA0D                 jnz     short loc_EA19
.text:000000000000EA0F                 add     rsp, 48h
.text:000000000000EA13                 retn
.text:000000000000EA14 ; ---------------------------------------------------------------------------
.text:000000000000EA14
.text:000000000000EA14 loc_EA14:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:000000000000EA14                 call    _abort
.text:000000000000EA19 ; ---------------------------------------------------------------------------
.text:000000000000EA19
.text:000000000000EA19 loc_EA19:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:000000000000EA19                 call    ___stack_chk_fail
.text:000000000000EA19 ; } // starts at E990
.text:000000000000EA19 quotearg_n_style endp
.text:000000000000EA19
.text:000000000000EA19 ; ---------------------------------------------------------------------------
.text:000000000000EA1E                 align 20h
.text:000000000000EA20
.text:000000000000EA20 ; =============== S U B R O U T I N E =======================================
.text:000000000000EA20
.text:000000000000EA20 ; Attributes: info_from_lumina
.text:000000000000EA20
.text:000000000000EA20 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:000000000000EA20                 public quotearg_n_style_mem
.text:000000000000EA20 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:000000000000EA20
.text:000000000000EA20 var_48          = dword ptr -48h
.text:000000000000EA20 var_44          = qword ptr -44h
.text:000000000000EA20 var_3C          = qword ptr -3Ch
.text:000000000000EA20 var_34          = qword ptr -34h
.text:000000000000EA20 var_2C          = qword ptr -2Ch
.text:000000000000EA20 var_24          = qword ptr -24h
.text:000000000000EA20 var_1C          = qword ptr -1Ch
.text:000000000000EA20 var_14          = dword ptr -14h
.text:000000000000EA20 var_10          = qword ptr -10h
.text:000000000000EA20
.text:000000000000EA20 ; __unwind {
.text:000000000000EA20                 sub     rsp, 48h
.text:000000000000EA24                 mov     rax, rdx
.text:000000000000EA27                 mov     rdx, rcx
.text:000000000000EA2A                 mov     rcx, fs:28h
.text:000000000000EA33                 mov     [rsp+48h+var_10], rcx
.text:000000000000EA38                 xor     ecx, ecx
.text:000000000000EA3A                 cmp     esi, 0Ah
.text:000000000000EA3D                 jz      short loc_EAA0
.text:000000000000EA3F                 mov     [rsp+48h+var_48], esi
.text:000000000000EA42                 mov     rcx, rsp
.text:000000000000EA45                 mov     rsi, rax
.text:000000000000EA48                 mov     [rsp+48h+var_44], 0
.text:000000000000EA51                 mov     [rsp+48h+var_3C], 0
.text:000000000000EA5A                 mov     [rsp+48h+var_34], 0
.text:000000000000EA63                 mov     [rsp+48h+var_2C], 0
.text:000000000000EA6C                 mov     [rsp+48h+var_24], 0
.text:000000000000EA75                 mov     [rsp+48h+var_1C], 0
.text:000000000000EA7E                 mov     [rsp+48h+var_14], 0
.text:000000000000EA86                 call    quotearg_n_options
.text:000000000000EA8B                 mov     rdx, [rsp+48h+var_10]
.text:000000000000EA90                 xor     rdx, fs:28h
.text:000000000000EA99                 jnz     short loc_EAA5
.text:000000000000EA9B                 add     rsp, 48h
.text:000000000000EA9F                 retn
.text:000000000000EAA0 ; ---------------------------------------------------------------------------
.text:000000000000EAA0
.text:000000000000EAA0 loc_EAA0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:000000000000EAA0                 call    _abort
.text:000000000000EAA5 ; ---------------------------------------------------------------------------
.text:000000000000EAA5
.text:000000000000EAA5 loc_EAA5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:000000000000EAA5                 call    ___stack_chk_fail
.text:000000000000EAA5 ; } // starts at EA20
.text:000000000000EAA5 quotearg_n_style_mem endp
.text:000000000000EAA5
.text:000000000000EAA5 ; ---------------------------------------------------------------------------
.text:000000000000EAAA                 align 10h
.text:000000000000EAB0
.text:000000000000EAB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EAB0
.text:000000000000EAB0
.text:000000000000EAB0                 public quotearg_style
.text:000000000000EAB0 quotearg_style  proc near               ; CODE XREF: main+4A4↑p
.text:000000000000EAB0                                         ; main+821↑p ...
.text:000000000000EAB0 ; __unwind {
.text:000000000000EAB0                 mov     rdx, rsi
.text:000000000000EAB3                 mov     esi, edi
.text:000000000000EAB5                 xor     edi, edi
.text:000000000000EAB7                 jmp     quotearg_n_style
.text:000000000000EAB7 ; } // starts at EAB0
.text:000000000000EAB7 quotearg_style  endp
.text:000000000000EAB7
.text:000000000000EAB7 ; ---------------------------------------------------------------------------
.text:000000000000EABC                 align 20h
.text:000000000000EAC0
.text:000000000000EAC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EAC0
.text:000000000000EAC0
.text:000000000000EAC0                 public quotearg_style_mem
.text:000000000000EAC0 quotearg_style_mem proc near
.text:000000000000EAC0 ; __unwind {
.text:000000000000EAC0                 mov     rcx, rdx
.text:000000000000EAC3                 mov     rdx, rsi
.text:000000000000EAC6                 mov     esi, edi
.text:000000000000EAC8                 xor     edi, edi
.text:000000000000EACA                 jmp     quotearg_n_style_mem
.text:000000000000EACA ; } // starts at EAC0
.text:000000000000EACA quotearg_style_mem endp
.text:000000000000EACA
.text:000000000000EACA ; ---------------------------------------------------------------------------
.text:000000000000EACF                 align 10h
.text:000000000000EAD0
.text:000000000000EAD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EAD0
.text:000000000000EAD0 ; Attributes: info_from_lumina
.text:000000000000EAD0
.text:000000000000EAD0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:000000000000EAD0                 public quotearg_char_mem
.text:000000000000EAD0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:000000000000EAD0                                         ; quotearg_colon+C↓j ...
.text:000000000000EAD0
.text:000000000000EAD0 var_48          = xmmword ptr -48h
.text:000000000000EAD0 var_38          = xmmword ptr -38h
.text:000000000000EAD0 var_28          = xmmword ptr -28h
.text:000000000000EAD0 var_18          = qword ptr -18h
.text:000000000000EAD0 var_10          = qword ptr -10h
.text:000000000000EAD0
.text:000000000000EAD0 ; __unwind {
.text:000000000000EAD0                 sub     rsp, 48h
.text:000000000000EAD4                 mov     ecx, edx
.text:000000000000EAD6                 mov     rax, fs:28h
.text:000000000000EADF                 mov     [rsp+48h+var_10], rax
.text:000000000000EAE4                 xor     eax, eax
.text:000000000000EAE6                 mov     rax, cs:qword_21A6F0
.text:000000000000EAED                 mov     r8, rsp
.text:000000000000EAF0                 and     ecx, 1Fh
.text:000000000000EAF3                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000EAFB                 mov     [rsp+48h+var_18], rax
.text:000000000000EB00                 mov     eax, edx
.text:000000000000EB02                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000EB06                 shr     al, 5
.text:000000000000EB09                 movzx   eax, al
.text:000000000000EB0C                 lea     r9, [r8+rax*4+8]
.text:000000000000EB11                 movdqa  xmm0, cs:xmmword_21A6D0
.text:000000000000EB19                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000EB1E                 movdqa  xmm0, cs:xmmword_21A6E0
.text:000000000000EB26                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000EB2B                 mov     edx, [r9]
.text:000000000000EB2E                 mov     eax, edx
.text:000000000000EB30                 shr     eax, cl
.text:000000000000EB32                 not     eax
.text:000000000000EB34                 and     eax, 1
.text:000000000000EB37                 shl     eax, cl
.text:000000000000EB39                 mov     rcx, r8
.text:000000000000EB3C                 xor     eax, edx
.text:000000000000EB3E                 mov     rdx, rsi
.text:000000000000EB41                 mov     rsi, rdi
.text:000000000000EB44                 mov     [r9], eax
.text:000000000000EB47                 xor     edi, edi
.text:000000000000EB49                 call    quotearg_n_options
.text:000000000000EB4E                 mov     rsi, [rsp+48h+var_10]
.text:000000000000EB53                 xor     rsi, fs:28h
.text:000000000000EB5C                 jnz     short loc_EB63
.text:000000000000EB5E                 add     rsp, 48h
.text:000000000000EB62                 retn
.text:000000000000EB63 ; ---------------------------------------------------------------------------
.text:000000000000EB63
.text:000000000000EB63 loc_EB63:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:000000000000EB63                 call    ___stack_chk_fail
.text:000000000000EB63 ; } // starts at EAD0
.text:000000000000EB63 quotearg_char_mem endp
.text:000000000000EB63
.text:000000000000EB63 ; ---------------------------------------------------------------------------
.text:000000000000EB68                 align 10h
.text:000000000000EB70
.text:000000000000EB70 ; =============== S U B R O U T I N E =======================================
.text:000000000000EB70
.text:000000000000EB70
.text:000000000000EB70                 public quotearg_char
.text:000000000000EB70 quotearg_char   proc near
.text:000000000000EB70 ; __unwind {
.text:000000000000EB70                 movsx   edx, sil
.text:000000000000EB74                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000EB7B                 jmp     quotearg_char_mem
.text:000000000000EB7B ; } // starts at EB70
.text:000000000000EB7B quotearg_char   endp
.text:000000000000EB7B
.text:000000000000EB80
.text:000000000000EB80 ; =============== S U B R O U T I N E =======================================
.text:000000000000EB80
.text:000000000000EB80
.text:000000000000EB80                 public quotearg_colon
.text:000000000000EB80 quotearg_colon  proc near               ; CODE XREF: close_stdin+85↑p
.text:000000000000EB80                                         ; close_stdout+65↑p
.text:000000000000EB80 ; __unwind {
.text:000000000000EB80                 mov     edx, 3Ah ; ':'
.text:000000000000EB85                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000EB8C                 jmp     quotearg_char_mem
.text:000000000000EB8C ; } // starts at EB80
.text:000000000000EB8C quotearg_colon  endp
.text:000000000000EB8C
.text:000000000000EB8C ; ---------------------------------------------------------------------------
.text:000000000000EB91                 align 20h
.text:000000000000EBA0
.text:000000000000EBA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EBA0
.text:000000000000EBA0
.text:000000000000EBA0                 public quotearg_colon_mem
.text:000000000000EBA0 quotearg_colon_mem proc near
.text:000000000000EBA0 ; __unwind {
.text:000000000000EBA0                 mov     edx, 3Ah ; ':'
.text:000000000000EBA5                 jmp     quotearg_char_mem
.text:000000000000EBA5 ; } // starts at EBA0
.text:000000000000EBA5 quotearg_colon_mem endp
.text:000000000000EBA5
.text:000000000000EBA5 ; ---------------------------------------------------------------------------
.text:000000000000EBAA                 align 10h
.text:000000000000EBB0
.text:000000000000EBB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EBB0
.text:000000000000EBB0 ; Attributes: info_from_lumina
.text:000000000000EBB0
.text:000000000000EBB0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:000000000000EBB0                 public quotearg_n_style_colon
.text:000000000000EBB0 quotearg_n_style_colon proc near        ; CODE XREF: copy_internal+223A↑p
.text:000000000000EBB0                                         ; copy_internal+257D↑p ...
.text:000000000000EBB0
.text:000000000000EBB0 var_48          = dword ptr -48h
.text:000000000000EBB0 var_44          = qword ptr -44h
.text:000000000000EBB0 var_3C          = qword ptr -3Ch
.text:000000000000EBB0 var_34          = qword ptr -34h
.text:000000000000EBB0 var_2C          = qword ptr -2Ch
.text:000000000000EBB0 var_24          = qword ptr -24h
.text:000000000000EBB0 var_1C          = qword ptr -1Ch
.text:000000000000EBB0 var_14          = dword ptr -14h
.text:000000000000EBB0 var_10          = qword ptr -10h
.text:000000000000EBB0
.text:000000000000EBB0 ; __unwind {
.text:000000000000EBB0                 sub     rsp, 48h
.text:000000000000EBB4                 mov     rax, rdx
.text:000000000000EBB7                 mov     rdx, fs:28h
.text:000000000000EBC0                 mov     [rsp+48h+var_10], rdx
.text:000000000000EBC5                 xor     edx, edx
.text:000000000000EBC7                 cmp     esi, 0Ah
.text:000000000000EBCA                 jz      short loc_EC34
.text:000000000000EBCC                 mov     [rsp+48h+var_48], esi
.text:000000000000EBCF                 mov     rcx, rsp
.text:000000000000EBD2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000EBD9                 mov     rsi, rax
.text:000000000000EBDC                 mov     [rsp+48h+var_44], 0
.text:000000000000EBE5                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000EBEE                 mov     [rsp+48h+var_34], 0
.text:000000000000EBF7                 mov     [rsp+48h+var_2C], 0
.text:000000000000EC00                 mov     [rsp+48h+var_24], 0
.text:000000000000EC09                 mov     [rsp+48h+var_1C], 0
.text:000000000000EC12                 mov     [rsp+48h+var_14], 0
.text:000000000000EC1A                 call    quotearg_n_options
.text:000000000000EC1F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000EC24                 xor     rcx, fs:28h
.text:000000000000EC2D                 jnz     short loc_EC39
.text:000000000000EC2F                 add     rsp, 48h
.text:000000000000EC33                 retn
.text:000000000000EC34 ; ---------------------------------------------------------------------------
.text:000000000000EC34
.text:000000000000EC34 loc_EC34:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:000000000000EC34                 call    _abort
.text:000000000000EC39 ; ---------------------------------------------------------------------------
.text:000000000000EC39
.text:000000000000EC39 loc_EC39:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:000000000000EC39                 call    ___stack_chk_fail
.text:000000000000EC39 ; } // starts at EBB0
.text:000000000000EC39 quotearg_n_style_colon endp
.text:000000000000EC39
.text:000000000000EC39 ; ---------------------------------------------------------------------------
.text:000000000000EC3E                 align 20h
.text:000000000000EC40
.text:000000000000EC40 ; =============== S U B R O U T I N E =======================================
.text:000000000000EC40
.text:000000000000EC40 ; Attributes: info_from_lumina
.text:000000000000EC40
.text:000000000000EC40 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:000000000000EC40                 public quotearg_n_custom_mem
.text:000000000000EC40 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:000000000000EC40                                         ; quotearg_custom+12↓j ...
.text:000000000000EC40
.text:000000000000EC40 var_48          = xmmword ptr -48h
.text:000000000000EC40 var_38          = xmmword ptr -38h
.text:000000000000EC40 var_28          = xmmword ptr -28h
.text:000000000000EC40 var_18          = qword ptr -18h
.text:000000000000EC40 var_10          = qword ptr -10h
.text:000000000000EC40
.text:000000000000EC40 ; __unwind {
.text:000000000000EC40                 sub     rsp, 48h
.text:000000000000EC44                 mov     r9, rcx
.text:000000000000EC47                 mov     rcx, cs:qword_21A6F0
.text:000000000000EC4E                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000EC56                 mov     rax, fs:28h
.text:000000000000EC5F                 mov     [rsp+48h+var_10], rax
.text:000000000000EC64                 xor     eax, eax
.text:000000000000EC66                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000EC6A                 test    rsi, rsi
.text:000000000000EC6D                 mov     [rsp+48h+var_18], rcx
.text:000000000000EC72                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:000000000000EC79                 movdqa  xmm0, cs:xmmword_21A6D0
.text:000000000000EC81                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000EC86                 movdqa  xmm0, cs:xmmword_21A6E0
.text:000000000000EC8E                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000EC93                 jz      short loc_ECC7
.text:000000000000EC95                 test    rdx, rdx
.text:000000000000EC98                 jz      short loc_ECC7
.text:000000000000EC9A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000EC9F                 mov     [rsp+48h+var_18], rdx
.text:000000000000ECA4                 mov     rcx, rsp
.text:000000000000ECA7                 mov     rdx, r8
.text:000000000000ECAA                 mov     rsi, r9
.text:000000000000ECAD                 call    quotearg_n_options
.text:000000000000ECB2                 mov     rdi, [rsp+48h+var_10]
.text:000000000000ECB7                 xor     rdi, fs:28h
.text:000000000000ECC0                 jnz     short loc_ECCC
.text:000000000000ECC2                 add     rsp, 48h
.text:000000000000ECC6                 retn
.text:000000000000ECC7 ; ---------------------------------------------------------------------------
.text:000000000000ECC7
.text:000000000000ECC7 loc_ECC7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:000000000000ECC7                                         ; quotearg_n_custom_mem+58↑j
.text:000000000000ECC7                 call    _abort
.text:000000000000ECCC ; ---------------------------------------------------------------------------
.text:000000000000ECCC
.text:000000000000ECCC loc_ECCC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000ECCC                 call    ___stack_chk_fail
.text:000000000000ECCC ; } // starts at EC40
.text:000000000000ECCC quotearg_n_custom_mem endp
.text:000000000000ECCC
.text:000000000000ECCC ; ---------------------------------------------------------------------------
.text:000000000000ECD1                 align 20h
.text:000000000000ECE0
.text:000000000000ECE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ECE0
.text:000000000000ECE0
.text:000000000000ECE0                 public quotearg_n_custom
.text:000000000000ECE0 quotearg_n_custom proc near
.text:000000000000ECE0 ; __unwind {
.text:000000000000ECE0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000ECE7                 jmp     quotearg_n_custom_mem
.text:000000000000ECE7 ; } // starts at ECE0
.text:000000000000ECE7 quotearg_n_custom endp
.text:000000000000ECE7
.text:000000000000ECE7 ; ---------------------------------------------------------------------------
.text:000000000000ECEC                 align 10h
.text:000000000000ECF0
.text:000000000000ECF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ECF0
.text:000000000000ECF0
.text:000000000000ECF0                 public quotearg_custom
.text:000000000000ECF0 quotearg_custom proc near
.text:000000000000ECF0 ; __unwind {
.text:000000000000ECF0                 mov     rcx, rdx
.text:000000000000ECF3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000ECFA                 mov     rdx, rsi
.text:000000000000ECFD                 mov     rsi, rdi
.text:000000000000ED00                 xor     edi, edi
.text:000000000000ED02                 jmp     quotearg_n_custom_mem
.text:000000000000ED02 ; } // starts at ECF0
.text:000000000000ED02 quotearg_custom endp
.text:000000000000ED02
.text:000000000000ED02 ; ---------------------------------------------------------------------------
.text:000000000000ED07                 align 10h
.text:000000000000ED10
.text:000000000000ED10 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED10
.text:000000000000ED10
.text:000000000000ED10                 public quotearg_custom_mem
.text:000000000000ED10 quotearg_custom_mem proc near
.text:000000000000ED10 ; __unwind {
.text:000000000000ED10                 mov     r8, rcx
.text:000000000000ED13                 mov     rcx, rdx
.text:000000000000ED16                 mov     rdx, rsi
.text:000000000000ED19                 mov     rsi, rdi
.text:000000000000ED1C                 xor     edi, edi
.text:000000000000ED1E                 jmp     quotearg_n_custom_mem
.text:000000000000ED1E ; } // starts at ED10
.text:000000000000ED1E quotearg_custom_mem endp
.text:000000000000ED1E
.text:000000000000ED1E ; ---------------------------------------------------------------------------
.text:000000000000ED23                 align 10h
.text:000000000000ED30
.text:000000000000ED30 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED30
.text:000000000000ED30
.text:000000000000ED30                 public quote_n_mem
.text:000000000000ED30 quote_n_mem     proc near
.text:000000000000ED30 ; __unwind {
.text:000000000000ED30                 lea     rcx, quote_quoting_options
.text:000000000000ED37                 jmp     quotearg_n_options
.text:000000000000ED37 ; } // starts at ED30
.text:000000000000ED37 quote_n_mem     endp
.text:000000000000ED37
.text:000000000000ED37 ; ---------------------------------------------------------------------------
.text:000000000000ED3C                 align 20h
.text:000000000000ED40
.text:000000000000ED40 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED40
.text:000000000000ED40
.text:000000000000ED40                 public quote_mem
.text:000000000000ED40 quote_mem       proc near
.text:000000000000ED40 ; __unwind {
.text:000000000000ED40                 lea     rcx, quote_quoting_options
.text:000000000000ED47                 mov     rdx, rsi
.text:000000000000ED4A                 mov     rsi, rdi
.text:000000000000ED4D                 xor     edi, edi
.text:000000000000ED4F                 jmp     quotearg_n_options
.text:000000000000ED4F ; } // starts at ED40
.text:000000000000ED4F quote_mem       endp
.text:000000000000ED4F
.text:000000000000ED4F ; ---------------------------------------------------------------------------
.text:000000000000ED54                 align 20h
.text:000000000000ED60
.text:000000000000ED60 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED60
.text:000000000000ED60
.text:000000000000ED60                 public quote_n
.text:000000000000ED60 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:000000000000ED60 ; __unwind {
.text:000000000000ED60                 lea     rcx, quote_quoting_options
.text:000000000000ED67                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ED6E                 jmp     quotearg_n_options
.text:000000000000ED6E ; } // starts at ED60
.text:000000000000ED6E quote_n         endp
.text:000000000000ED6E
.text:000000000000ED6E ; ---------------------------------------------------------------------------
.text:000000000000ED73                 align 20h
.text:000000000000ED80
.text:000000000000ED80 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED80
.text:000000000000ED80
.text:000000000000ED80                 public quote
.text:000000000000ED80 quote           proc near               ; CODE XREF: main+7E6↑p
.text:000000000000ED80                                         ; copy_acl+1E↑p ...
.text:000000000000ED80 ; __unwind {
.text:000000000000ED80                 lea     rcx, quote_quoting_options
.text:000000000000ED87                 mov     rsi, rdi
.text:000000000000ED8A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ED91                 xor     edi, edi
.text:000000000000ED93                 jmp     quotearg_n_options
.text:000000000000ED93 ; } // starts at ED80
.text:000000000000ED93 quote           endp
.text:000000000000ED93
.text:000000000000ED93 ; ---------------------------------------------------------------------------
.text:000000000000ED98                 align 20h
.text:000000000000EDA0
.text:000000000000EDA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EDA0
.text:000000000000EDA0 ; Attributes: info_from_lumina
.text:000000000000EDA0
.text:000000000000EDA0                 public renameat2
.text:000000000000EDA0 renameat2       proc near               ; CODE XREF: copy_internal+333↑p
.text:000000000000EDA0                                         ; backupfile_internal+34F↑p
.text:000000000000EDA0
.text:000000000000EDA0 oldfd           = dword ptr -174h
.text:000000000000EDA0 var_170         = qword ptr -170h
.text:000000000000EDA0 stat_buf        = stat ptr -168h
.text:000000000000EDA0 var_D8          = stat ptr -0D8h
.text:000000000000EDA0 var_40          = qword ptr -40h
.text:000000000000EDA0
.text:000000000000EDA0 ; __unwind {
.text:000000000000EDA0                 push    r15
.text:000000000000EDA2                 push    r14
.text:000000000000EDA4                 mov     r9d, r8d
.text:000000000000EDA7                 push    r13
.text:000000000000EDA9                 push    r12
.text:000000000000EDAB                 mov     r14d, edx
.text:000000000000EDAE                 push    rbp
.text:000000000000EDAF                 push    rbx
.text:000000000000EDB0                 mov     r12, rsi
.text:000000000000EDB3                 mov     r13, rcx
.text:000000000000EDB6                 mov     ebp, r8d
.text:000000000000EDB9                 mov     r8, rcx
.text:000000000000EDBC                 sub     rsp, 148h
.text:000000000000EDC3                 mov     ecx, edx
.text:000000000000EDC5                 mov     rdx, rsi
.text:000000000000EDC8                 mov     rax, fs:28h
.text:000000000000EDD1                 mov     [rsp+178h+var_40], rax
.text:000000000000EDD9                 xor     eax, eax
.text:000000000000EDDB                 mov     esi, edi
.text:000000000000EDDD                 mov     [rsp+178h+oldfd], edi
.text:000000000000EDE1                 mov     edi, 13Ch       ; sysno
.text:000000000000EDE6                 call    _syscall
.text:000000000000EDEB                 mov     rbx, rax
.text:000000000000EDEE                 mov     r15d, eax
.text:000000000000EDF1                 call    ___errno_location
.text:000000000000EDF6                 test    ebx, ebx
.text:000000000000EDF8                 js      short loc_EE30
.text:000000000000EDFA
.text:000000000000EDFA loc_EDFA:                               ; CODE XREF: renameat2+A6↓j
.text:000000000000EDFA                                         ; renameat2+F8↓j ...
.text:000000000000EDFA                 mov     rdx, [rsp+178h+var_40]
.text:000000000000EE02                 xor     rdx, fs:28h
.text:000000000000EE0B                 mov     eax, r15d
.text:000000000000EE0E                 jnz     loc_F005
.text:000000000000EE14                 add     rsp, 148h
.text:000000000000EE1B                 pop     rbx
.text:000000000000EE1C                 pop     rbp
.text:000000000000EE1D                 pop     r12
.text:000000000000EE1F                 pop     r13
.text:000000000000EE21                 pop     r14
.text:000000000000EE23                 pop     r15
.text:000000000000EE25                 retn
.text:000000000000EE25 ; ---------------------------------------------------------------------------
.text:000000000000EE26                 align 10h
.text:000000000000EE30
.text:000000000000EE30 loc_EE30:                               ; CODE XREF: renameat2+58↑j
.text:000000000000EE30                 mov     r9, rax
.text:000000000000EE33                 mov     eax, [rax]
.text:000000000000EE35                 lea     ecx, [rax-16h]
.text:000000000000EE38                 and     ecx, 0FFFFFFEFh
.text:000000000000EE3B                 setnz   bl
.text:000000000000EE3E                 cmp     eax, 5Fh ; '_'
.text:000000000000EE41                 setnz   al
.text:000000000000EE44                 and     bl, al
.text:000000000000EE46                 jnz     short loc_EDFA
.text:000000000000EE48                 test    ebp, ebp
.text:000000000000EE4A                 jnz     short loc_EEA0
.text:000000000000EE4C
.text:000000000000EE4C loc_EE4C:                               ; CODE XREF: renameat2+21D↓j
.text:000000000000EE4C                 mov     rdi, r12        ; s
.text:000000000000EE4F                 mov     [rsp+178h+var_170], r9
.text:000000000000EE54                 call    _strlen
.text:000000000000EE59                 mov     rdi, r13        ; s
.text:000000000000EE5C                 mov     rbp, rax
.text:000000000000EE5F                 call    _strlen
.text:000000000000EE64                 test    rbp, rbp
.text:000000000000EE67                 jz      short loc_EE83
.text:000000000000EE69                 test    rax, rax
.text:000000000000EE6C                 mov     r9, [rsp+178h+var_170]
.text:000000000000EE71                 jz      short loc_EE83
.text:000000000000EE73                 cmp     byte ptr [r12+rbp-1], 2Fh ; '/'
.text:000000000000EE79                 jz      short loc_EEC0
.text:000000000000EE7B                 cmp     byte ptr [r13+rax-1], 2Fh ; '/'
.text:000000000000EE81                 jz      short loc_EEC0
.text:000000000000EE83
.text:000000000000EE83 loc_EE83:                               ; CODE XREF: renameat2+C7↑j
.text:000000000000EE83                                         ; renameat2+D1↑j ...
.text:000000000000EE83                 mov     edi, [rsp+178h+oldfd] ; oldfd
.text:000000000000EE87                 mov     rcx, r13        ; new
.text:000000000000EE8A                 mov     edx, r14d       ; newfd
.text:000000000000EE8D                 mov     rsi, r12        ; old
.text:000000000000EE90                 call    _renameat
.text:000000000000EE95                 mov     r15d, eax
.text:000000000000EE98                 jmp     loc_EDFA
.text:000000000000EE98 ; ---------------------------------------------------------------------------
.text:000000000000EE9D                 align 20h
.text:000000000000EEA0
.text:000000000000EEA0 loc_EEA0:                               ; CODE XREF: renameat2+AA↑j
.text:000000000000EEA0                 and     ebp, 0FFFFFFFEh
.text:000000000000EEA3                 jz      short loc_EF10
.text:000000000000EEA5                 mov     dword ptr [r9], 5Fh ; '_'
.text:000000000000EEAC                 mov     r15d, 0FFFFFFFFh
.text:000000000000EEB2                 jmp     loc_EDFA
.text:000000000000EEB2 ; ---------------------------------------------------------------------------
.text:000000000000EEB7                 align 20h
.text:000000000000EEC0
.text:000000000000EEC0 loc_EEC0:                               ; CODE XREF: renameat2+D9↑j
.text:000000000000EEC0                                         ; renameat2+E1↑j
.text:000000000000EEC0                 mov     esi, [rsp+178h+oldfd] ; fildes
.text:000000000000EEC4                 lea     rcx, [rsp+178h+stat_buf] ; stat_buf
.text:000000000000EEC9                 mov     r8d, 100h       ; flag
.text:000000000000EECF                 mov     rdx, r12        ; filename
.text:000000000000EED2                 mov     edi, 1          ; ver
.text:000000000000EED7                 mov     [rsp+178h+var_170], r9
.text:000000000000EEDC                 call    ___fxstatat
.text:000000000000EEE1                 test    eax, eax
.text:000000000000EEE3                 jnz     short loc_EF49
.text:000000000000EEE5                 test    bl, bl
.text:000000000000EEE7                 mov     r9, [rsp+178h+var_170]
.text:000000000000EEEC                 jz      short loc_EF6A
.text:000000000000EEEE                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000EEF2                 and     eax, 0F000h
.text:000000000000EEF7                 cmp     eax, 4000h
.text:000000000000EEFC                 jz      short loc_EE83
.text:000000000000EEFE                 mov     dword ptr [r9], 2
.text:000000000000EF05                 mov     r15d, 0FFFFFFFFh
.text:000000000000EF0B                 jmp     loc_EDFA
.text:000000000000EF10 ; ---------------------------------------------------------------------------
.text:000000000000EF10
.text:000000000000EF10 loc_EF10:                               ; CODE XREF: renameat2+103↑j
.text:000000000000EF10                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:000000000000EF18                 mov     r8d, 100h       ; flag
.text:000000000000EF1E                 mov     rdx, r13        ; filename
.text:000000000000EF21                 mov     esi, r14d       ; fildes
.text:000000000000EF24                 mov     edi, 1          ; ver
.text:000000000000EF29                 mov     [rsp+178h+var_170], r9
.text:000000000000EF2E                 call    ___fxstatat
.text:000000000000EF33                 test    eax, eax
.text:000000000000EF35                 mov     r9, [rsp+178h+var_170]
.text:000000000000EF3A                 jz      short loc_EF58
.text:000000000000EF3C                 mov     eax, [r9]
.text:000000000000EF3F                 cmp     eax, 4Bh ; 'K'
.text:000000000000EF42                 jz      short loc_EF58
.text:000000000000EF44                 cmp     eax, 2
.text:000000000000EF47                 jz      short loc_EFB8
.text:000000000000EF49
.text:000000000000EF49 loc_EF49:                               ; CODE XREF: renameat2+143↑j
.text:000000000000EF49                                         ; renameat2+1FA↓j ...
.text:000000000000EF49                 mov     r15d, 0FFFFFFFFh
.text:000000000000EF4F                 jmp     loc_EDFA
.text:000000000000EF4F ; ---------------------------------------------------------------------------
.text:000000000000EF54                 align 8
.text:000000000000EF58
.text:000000000000EF58 loc_EF58:                               ; CODE XREF: renameat2+19A↑j
.text:000000000000EF58                                         ; renameat2+1A2↑j
.text:000000000000EF58                 mov     dword ptr [r9], 11h
.text:000000000000EF5F                 mov     r15d, 0FFFFFFFFh
.text:000000000000EF65                 jmp     loc_EDFA
.text:000000000000EF6A ; ---------------------------------------------------------------------------
.text:000000000000EF6A
.text:000000000000EF6A loc_EF6A:                               ; CODE XREF: renameat2+14C↑j
.text:000000000000EF6A                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:000000000000EF72                 mov     r8d, 100h       ; flag
.text:000000000000EF78                 mov     rdx, r13        ; filename
.text:000000000000EF7B                 mov     esi, r14d       ; fildes
.text:000000000000EF7E                 mov     edi, 1          ; ver
.text:000000000000EF83                 mov     [rsp+178h+var_170], r9
.text:000000000000EF88                 call    ___fxstatat
.text:000000000000EF8D                 test    eax, eax
.text:000000000000EF8F                 mov     r9, [rsp+178h+var_170]
.text:000000000000EF94                 jz      short loc_EFC2
.text:000000000000EF96                 cmp     dword ptr [r9], 2
.text:000000000000EF9A                 jnz     short loc_EF49
.text:000000000000EF9C                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000EFA0                 and     eax, 0F000h
.text:000000000000EFA5                 cmp     eax, 4000h
.text:000000000000EFAA                 jnz     short loc_EF49
.text:000000000000EFAC                 jmp     loc_EE83
.text:000000000000EFAC ; ---------------------------------------------------------------------------
.text:000000000000EFB1                 align 8
.text:000000000000EFB8
.text:000000000000EFB8 loc_EFB8:                               ; CODE XREF: renameat2+1A7↑j
.text:000000000000EFB8                 mov     ebx, 1
.text:000000000000EFBD                 jmp     loc_EE4C
.text:000000000000EFC2 ; ---------------------------------------------------------------------------
.text:000000000000EFC2
.text:000000000000EFC2 loc_EFC2:                               ; CODE XREF: renameat2+1F4↑j
.text:000000000000EFC2                 mov     eax, [rsp+178h+var_D8.st_mode]
.text:000000000000EFC9                 and     eax, 0F000h
.text:000000000000EFCE                 cmp     eax, 4000h
.text:000000000000EFD3                 jz      short loc_EFE1
.text:000000000000EFD5                 mov     dword ptr [r9], 14h
.text:000000000000EFDC                 jmp     loc_EF49
.text:000000000000EFE1 ; ---------------------------------------------------------------------------
.text:000000000000EFE1
.text:000000000000EFE1 loc_EFE1:                               ; CODE XREF: renameat2+233↑j
.text:000000000000EFE1                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000EFE5                 and     eax, 0F000h
.text:000000000000EFEA                 cmp     eax, 4000h
.text:000000000000EFEF                 jz      loc_EE83
.text:000000000000EFF5                 mov     dword ptr [r9], 15h
.text:000000000000EFFC                 or      r15d, 0FFFFFFFFh
.text:000000000000F000                 jmp     loc_EDFA
.text:000000000000F005 ; ---------------------------------------------------------------------------
.text:000000000000F005
.text:000000000000F005 loc_F005:                               ; CODE XREF: renameat2+6E↑j
.text:000000000000F005                 call    ___stack_chk_fail
.text:000000000000F005 ; } // starts at EDA0
.text:000000000000F005 renameat2       endp
.text:000000000000F005
.text:000000000000F005 ; ---------------------------------------------------------------------------
.text:000000000000F00A                 align 10h
.text:000000000000F010
.text:000000000000F010 ; =============== S U B R O U T I N E =======================================
.text:000000000000F010
.text:000000000000F010
.text:000000000000F010 ; __int64 __fastcall safe_write(int fd, void *buf, size_t n)
.text:000000000000F010                 public safe_write
.text:000000000000F010 safe_write      proc near               ; CODE XREF: full_write+39↑p
.text:000000000000F010 ; __unwind {
.text:000000000000F010                 push    r13
.text:000000000000F012                 push    r12
.text:000000000000F014                 mov     r13d, edi
.text:000000000000F017                 push    rbp
.text:000000000000F018                 push    rbx
.text:000000000000F019                 mov     r12, rsi
.text:000000000000F01C                 mov     rbx, rdx
.text:000000000000F01F                 sub     rsp, 8
.text:000000000000F023                 nop     dword ptr [rax+rax+00h]
.text:000000000000F028
.text:000000000000F028 loc_F028:                               ; CODE XREF: safe_write+38↓j
.text:000000000000F028                                         ; safe_write+4D↓j
.text:000000000000F028                 mov     rdx, rbx        ; n
.text:000000000000F02B                 mov     rsi, r12        ; buf
.text:000000000000F02E                 mov     edi, r13d       ; fd
.text:000000000000F031                 call    _write
.text:000000000000F036                 test    rax, rax
.text:000000000000F039                 mov     rbp, rax
.text:000000000000F03C                 jns     short loc_F060
.text:000000000000F03E                 call    ___errno_location
.text:000000000000F043                 mov     eax, [rax]
.text:000000000000F045                 cmp     eax, 4
.text:000000000000F048                 jz      short loc_F028
.text:000000000000F04A                 cmp     eax, 16h
.text:000000000000F04D                 jnz     short loc_F060
.text:000000000000F04F                 cmp     rbx, 7FF00000h
.text:000000000000F056                 jbe     short loc_F060
.text:000000000000F058                 mov     ebx, 7FF00000h
.text:000000000000F05D                 jmp     short loc_F028
.text:000000000000F05D ; ---------------------------------------------------------------------------
.text:000000000000F05F                 align 20h
.text:000000000000F060
.text:000000000000F060 loc_F060:                               ; CODE XREF: safe_write+2C↑j
.text:000000000000F060                                         ; safe_write+3D↑j ...
.text:000000000000F060                 add     rsp, 8
.text:000000000000F064                 mov     rax, rbp
.text:000000000000F067                 pop     rbx
.text:000000000000F068                 pop     rbp
.text:000000000000F069                 pop     r12
.text:000000000000F06B                 pop     r13
.text:000000000000F06D                 retn
.text:000000000000F06D ; } // starts at F010
.text:000000000000F06D safe_write      endp
.text:000000000000F06D
.text:000000000000F06D ; ---------------------------------------------------------------------------
.text:000000000000F06E                 align 10h
.text:000000000000F070
.text:000000000000F070 ; =============== S U B R O U T I N E =======================================
.text:000000000000F070
.text:000000000000F070
.text:000000000000F070 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:000000000000F070 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:000000000000F070
.text:000000000000F070 var_158         = qword ptr -158h
.text:000000000000F070 var_150         = qword ptr -150h
.text:000000000000F070 stat_buf        = stat ptr -0C8h
.text:000000000000F070 var_30          = qword ptr -30h
.text:000000000000F070
.text:000000000000F070 ; __unwind {
.text:000000000000F070                 push    r13
.text:000000000000F072                 push    r12
.text:000000000000F074                 mov     r13d, edi
.text:000000000000F077                 push    rbp
.text:000000000000F078                 push    rbx
.text:000000000000F079                 mov     rdi, rsi
.text:000000000000F07C                 mov     ebp, edx
.text:000000000000F07E                 mov     r12, rcx
.text:000000000000F081                 sub     rsp, 138h
.text:000000000000F088                 mov     rax, fs:28h
.text:000000000000F091                 mov     [rsp+158h+var_30], rax
.text:000000000000F099                 xor     eax, eax
.text:000000000000F09B                 call    dir_name
.text:000000000000F0A0                 mov     rcx, rsp        ; stat_buf
.text:000000000000F0A3                 mov     r8d, 100h       ; flag
.text:000000000000F0A9                 mov     rdx, rax        ; filename
.text:000000000000F0AC                 mov     esi, r13d       ; fildes
.text:000000000000F0AF                 mov     edi, 1          ; ver
.text:000000000000F0B4                 mov     rbx, rax
.text:000000000000F0B7                 call    ___fxstatat
.text:000000000000F0BC                 test    eax, eax
.text:000000000000F0BE                 jnz     loc_F170
.text:000000000000F0C4
.text:000000000000F0C4 loc_F0C4:                               ; CODE XREF: same_nameat_part_0+11D↓j
.text:000000000000F0C4                 mov     rdi, rbx        ; ptr
.text:000000000000F0C7                 call    free
.text:000000000000F0CC                 mov     rdi, r12
.text:000000000000F0CF                 call    dir_name
.text:000000000000F0D4                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000F0DC                 mov     r8d, 100h       ; flag
.text:000000000000F0E2                 mov     rdx, rax        ; filename
.text:000000000000F0E5                 mov     esi, ebp        ; fildes
.text:000000000000F0E7                 mov     edi, 1          ; ver
.text:000000000000F0EC                 mov     rbx, rax
.text:000000000000F0EF                 call    ___fxstatat
.text:000000000000F0F4                 test    eax, eax
.text:000000000000F0F6                 jnz     short loc_F148
.text:000000000000F0F8
.text:000000000000F0F8 loc_F0F8:                               ; CODE XREF: same_nameat_part_0+F5↓j
.text:000000000000F0F8                 xor     ebp, ebp
.text:000000000000F0FA                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:000000000000F102                 cmp     [rsp+158h+var_150], rax
.text:000000000000F107                 jnz     short loc_F119
.text:000000000000F109                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:000000000000F111                 cmp     [rsp+158h+var_158], rax
.text:000000000000F115                 setz    bpl
.text:000000000000F119
.text:000000000000F119 loc_F119:                               ; CODE XREF: same_nameat_part_0+97↑j
.text:000000000000F119                 mov     rdi, rbx        ; ptr
.text:000000000000F11C                 call    free
.text:000000000000F121                 mov     rdx, [rsp+158h+var_30]
.text:000000000000F129                 xor     rdx, fs:28h
.text:000000000000F132                 mov     eax, ebp
.text:000000000000F134                 jnz     short loc_F192
.text:000000000000F136                 add     rsp, 138h
.text:000000000000F13D                 pop     rbx
.text:000000000000F13E                 pop     rbp
.text:000000000000F13F                 pop     r12
.text:000000000000F141                 pop     r13
.text:000000000000F143                 retn
.text:000000000000F143 ; ---------------------------------------------------------------------------
.text:000000000000F144                 align 8
.text:000000000000F148
.text:000000000000F148 loc_F148:                               ; CODE XREF: same_nameat_part_0+86↑j
.text:000000000000F148                 call    ___errno_location
.text:000000000000F14D                 mov     esi, [rax]      ; errnum
.text:000000000000F14F                 lea     rdx, aS_0+2     ; format
.text:000000000000F156                 mov     rcx, rbx
.text:000000000000F159                 mov     edi, 1          ; status
.text:000000000000F15E                 xor     eax, eax
.text:000000000000F160                 call    _error
.text:000000000000F165                 jmp     short loc_F0F8
.text:000000000000F165 ; ---------------------------------------------------------------------------
.text:000000000000F167                 align 10h
.text:000000000000F170
.text:000000000000F170 loc_F170:                               ; CODE XREF: same_nameat_part_0+4E↑j
.text:000000000000F170                 call    ___errno_location
.text:000000000000F175                 mov     esi, [rax]      ; errnum
.text:000000000000F177                 lea     rdx, aS_0+2     ; format
.text:000000000000F17E                 mov     rcx, rbx
.text:000000000000F181                 mov     edi, 1          ; status
.text:000000000000F186                 xor     eax, eax
.text:000000000000F188                 call    _error
.text:000000000000F18D                 jmp     loc_F0C4
.text:000000000000F192 ; ---------------------------------------------------------------------------
.text:000000000000F192
.text:000000000000F192 loc_F192:                               ; CODE XREF: same_nameat_part_0+C4↑j
.text:000000000000F192                 call    ___stack_chk_fail
.text:000000000000F192 ; } // starts at F070
.text:000000000000F192 same_nameat_part_0 endp
.text:000000000000F192
.text:000000000000F192 ; ---------------------------------------------------------------------------
.text:000000000000F197                 align 20h
.text:000000000000F1A0
.text:000000000000F1A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F1A0
.text:000000000000F1A0
.text:000000000000F1A0                 public same_nameat
.text:000000000000F1A0 same_nameat     proc near               ; CODE XREF: same_name+D↓j
.text:000000000000F1A0
.text:000000000000F1A0 fildes          = dword ptr -3Ch
.text:000000000000F1A0
.text:000000000000F1A0 ; __unwind {
.text:000000000000F1A0                 push    r15
.text:000000000000F1A2                 push    r14
.text:000000000000F1A4                 mov     r15d, edx
.text:000000000000F1A7                 push    r13
.text:000000000000F1A9                 push    r12
.text:000000000000F1AB                 push    rbp
.text:000000000000F1AC                 push    rbx
.text:000000000000F1AD                 mov     rbp, rcx
.text:000000000000F1B0                 mov     rbx, rsi
.text:000000000000F1B3                 sub     rsp, 18h
.text:000000000000F1B7                 mov     [rsp+48h+fildes], edi
.text:000000000000F1BB                 mov     rdi, rsi
.text:000000000000F1BE                 call    last_component
.text:000000000000F1C3                 mov     rdi, rbp
.text:000000000000F1C6                 mov     r12, rax
.text:000000000000F1C9                 call    last_component
.text:000000000000F1CE                 mov     rdi, r12
.text:000000000000F1D1                 mov     r13, rax
.text:000000000000F1D4                 call    base_len
.text:000000000000F1D9                 mov     rdi, r13
.text:000000000000F1DC                 mov     r14, rax
.text:000000000000F1DF                 call    base_len
.text:000000000000F1E4                 cmp     r14, rax
.text:000000000000F1E7                 jz      short loc_F200
.text:000000000000F1E9
.text:000000000000F1E9 loc_F1E9:                               ; CODE XREF: same_nameat+70↓j
.text:000000000000F1E9                 add     rsp, 18h
.text:000000000000F1ED                 xor     eax, eax
.text:000000000000F1EF                 pop     rbx
.text:000000000000F1F0                 pop     rbp
.text:000000000000F1F1                 pop     r12
.text:000000000000F1F3                 pop     r13
.text:000000000000F1F5                 pop     r14
.text:000000000000F1F7                 pop     r15
.text:000000000000F1F9                 retn
.text:000000000000F1F9 ; ---------------------------------------------------------------------------
.text:000000000000F1FA                 align 20h
.text:000000000000F200
.text:000000000000F200 loc_F200:                               ; CODE XREF: same_nameat+47↑j
.text:000000000000F200                 mov     rdx, r14        ; n
.text:000000000000F203                 mov     rsi, r13        ; s2
.text:000000000000F206                 mov     rdi, r12        ; s1
.text:000000000000F209                 call    _memcmp
.text:000000000000F20E                 test    eax, eax
.text:000000000000F210                 jnz     short loc_F1E9
.text:000000000000F212                 mov     edi, [rsp+48h+fildes] ; fildes
.text:000000000000F216                 add     rsp, 18h
.text:000000000000F21A                 mov     rcx, rbp
.text:000000000000F21D                 mov     edx, r15d
.text:000000000000F220                 mov     rsi, rbx
.text:000000000000F223                 pop     rbx
.text:000000000000F224                 pop     rbp
.text:000000000000F225                 pop     r12
.text:000000000000F227                 pop     r13
.text:000000000000F229                 pop     r14
.text:000000000000F22B                 pop     r15
.text:000000000000F22D                 jmp     same_nameat_part_0
.text:000000000000F22D ; } // starts at F1A0
.text:000000000000F22D same_nameat     endp
.text:000000000000F22D
.text:000000000000F22D ; ---------------------------------------------------------------------------
.text:000000000000F232                 align 20h
.text:000000000000F240
.text:000000000000F240 ; =============== S U B R O U T I N E =======================================
.text:000000000000F240
.text:000000000000F240
.text:000000000000F240                 public same_name
.text:000000000000F240 same_name       proc near               ; CODE XREF: copy_internal+1099↑p
.text:000000000000F240                                         ; copy_internal+1757↑p ...
.text:000000000000F240 ; __unwind {
.text:000000000000F240                 mov     edx, 0FFFFFF9Ch
.text:000000000000F245                 mov     rcx, rsi
.text:000000000000F248                 mov     rsi, rdi
.text:000000000000F24B                 mov     edi, edx
.text:000000000000F24D                 jmp     same_nameat
.text:000000000000F24D ; } // starts at F240
.text:000000000000F24D same_name       endp
.text:000000000000F24D
.text:000000000000F24D ; ---------------------------------------------------------------------------
.text:000000000000F252                 align 20h
.text:000000000000F260
.text:000000000000F260 ; =============== S U B R O U T I N E =======================================
.text:000000000000F260
.text:000000000000F260
.text:000000000000F260 direntry_cmp_inode proc near            ; DATA XREF: .data.rel.ro:0000000000219A50↓o
.text:000000000000F260 ; __unwind {
.text:000000000000F260                 mov     rax, [rsi+8]
.text:000000000000F264                 cmp     [rdi+8], rax
.text:000000000000F268                 jb      short loc_F278
.text:000000000000F26A                 setnbe  al
.text:000000000000F26D                 movzx   eax, al
.text:000000000000F270                 retn
.text:000000000000F270 ; ---------------------------------------------------------------------------
.text:000000000000F271                 align 8
.text:000000000000F278
.text:000000000000F278 loc_F278:                               ; CODE XREF: direntry_cmp_inode+8↑j
.text:000000000000F278                 mov     eax, 0FFFFFFFFh
.text:000000000000F27D                 retn
.text:000000000000F27D ; } // starts at F260
.text:000000000000F27D direntry_cmp_inode endp
.text:000000000000F27D
.text:000000000000F27D ; ---------------------------------------------------------------------------
.text:000000000000F27E                 align 20h
.text:000000000000F280
.text:000000000000F280 ; =============== S U B R O U T I N E =======================================
.text:000000000000F280
.text:000000000000F280
.text:000000000000F280 direntry_cmp_name proc near             ; DATA XREF: .data.rel.ro:0000000000219A48↓o
.text:000000000000F280 ; __unwind {
.text:000000000000F280                 mov     rsi, [rsi]      ; s2
.text:000000000000F283                 mov     rdi, [rdi]      ; s1
.text:000000000000F286                 jmp     _strcmp
.text:000000000000F286 ; } // starts at F280
.text:000000000000F286 direntry_cmp_name endp
.text:000000000000F286
.text:000000000000F286 ; ---------------------------------------------------------------------------
.text:000000000000F28B                 align 10h
.text:000000000000F290
.text:000000000000F290 ; =============== S U B R O U T I N E =======================================
.text:000000000000F290
.text:000000000000F290 ; Attributes: info_from_lumina
.text:000000000000F290
.text:000000000000F290 ; __int64 __fastcall streamsavedir(DIR *dirp)
.text:000000000000F290                 public streamsavedir
.text:000000000000F290 streamsavedir   proc near               ; CODE XREF: savedir+18↓p
.text:000000000000F290
.text:000000000000F290 compar          = qword ptr -70h
.text:000000000000F290 ptr             = qword ptr -68h
.text:000000000000F290 n               = qword ptr -60h
.text:000000000000F290 var_58          = qword ptr -58h
.text:000000000000F290 var_50          = qword ptr -50h
.text:000000000000F290 var_48          = qword ptr -48h
.text:000000000000F290 var_40          = qword ptr -40h
.text:000000000000F290
.text:000000000000F290 ; __unwind {
.text:000000000000F290                 push    r15
.text:000000000000F292                 lea     rax, comparison_function_table
.text:000000000000F299                 push    r14
.text:000000000000F29B                 push    r13
.text:000000000000F29D                 push    r12
.text:000000000000F29F                 mov     esi, esi
.text:000000000000F2A1                 push    rbp
.text:000000000000F2A2                 push    rbx
.text:000000000000F2A3                 sub     rsp, 48h
.text:000000000000F2A7                 mov     rax, [rax+rsi*8]
.text:000000000000F2AB                 test    rdi, rdi
.text:000000000000F2AE                 mov     [rsp+78h+compar], rax
.text:000000000000F2B3                 jz      loc_F5BD
.text:000000000000F2B9                 mov     rbx, rdi
.text:000000000000F2BC                 xor     r14d, r14d
.text:000000000000F2BF                 xor     r12d, r12d
.text:000000000000F2C2                 call    ___errno_location
.text:000000000000F2C7                 xor     r13d, r13d
.text:000000000000F2CA                 mov     rbp, rax
.text:000000000000F2CD                 mov     [rsp+78h+var_50], 0
.text:000000000000F2D6                 mov     [rsp+78h+ptr], 0
.text:000000000000F2DF                 mov     [rsp+78h+var_58], 0
.text:000000000000F2E8                 jmp     short loc_F2F4
.text:000000000000F2E8 ; ---------------------------------------------------------------------------
.text:000000000000F2EA                 align 10h
.text:000000000000F2F0
.text:000000000000F2F0 loc_F2F0:                               ; CODE XREF: streamsavedir+89↓j
.text:000000000000F2F0                                         ; streamsavedir+114↓j
.text:000000000000F2F0                 test    al, al
.text:000000000000F2F2                 jnz     short loc_F329
.text:000000000000F2F4
.text:000000000000F2F4 loc_F2F4:                               ; CODE XREF: streamsavedir+58↑j
.text:000000000000F2F4                                         ; streamsavedir+97↓j ...
.text:000000000000F2F4                 mov     dword ptr [rbp+0], 0
.text:000000000000F2FB                 mov     rdi, rbx        ; dirp
.text:000000000000F2FE                 call    _readdir
.text:000000000000F303                 test    rax, rax
.text:000000000000F306                 mov     rcx, rax
.text:000000000000F309                 jz      loc_F3B0
.text:000000000000F30F                 lea     r15, [rax+13h]
.text:000000000000F313                 movzx   eax, byte ptr [rax+13h]
.text:000000000000F317                 cmp     al, 2Eh ; '.'
.text:000000000000F319                 jnz     short loc_F2F0
.text:000000000000F31B                 cmp     byte ptr [rcx+14h], 2Eh ; '.'
.text:000000000000F31F                 jz      short loc_F3A0
.text:000000000000F321                 movzx   eax, byte ptr [rcx+14h]
.text:000000000000F325                 test    al, al
.text:000000000000F327                 jz      short loc_F2F4
.text:000000000000F329
.text:000000000000F329 loc_F329:                               ; CODE XREF: streamsavedir+62↑j
.text:000000000000F329                 mov     rdi, r15        ; s
.text:000000000000F32C                 mov     [rsp+78h+var_48], rcx
.text:000000000000F331                 call    _strlen
.text:000000000000F336                 add     rax, 1
.text:000000000000F33A                 cmp     [rsp+78h+compar], 0
.text:000000000000F340                 mov     [rsp+78h+n], rax
.text:000000000000F345                 jz      loc_F488
.text:000000000000F34B                 cmp     r12, [rsp+78h+var_50]
.text:000000000000F350                 lea     rax, [r12+1]
.text:000000000000F355                 mov     rcx, [rsp+78h+var_48]
.text:000000000000F35A                 mov     [rsp+78h+var_40], rax
.text:000000000000F35F                 jz      loc_F511
.text:000000000000F365
.text:000000000000F365 loc_F365:                               ; CODE XREF: streamsavedir+2CE↓j
.text:000000000000F365                 shl     r12, 4
.text:000000000000F369                 mov     rdi, r15        ; src
.text:000000000000F36C                 add     r12, [rsp+78h+ptr]
.text:000000000000F371                 mov     [rsp+78h+var_48], rcx
.text:000000000000F376                 call    xstrdup
.text:000000000000F37B                 mov     rcx, [rsp+78h+var_48]
.text:000000000000F380                 add     r14, [rsp+78h+n]
.text:000000000000F385                 mov     [r12], rax
.text:000000000000F389                 mov     rax, [rcx]
.text:000000000000F38C                 mov     [r12+8], rax
.text:000000000000F391                 mov     r12, [rsp+78h+var_40]
.text:000000000000F396                 jmp     loc_F2F4
.text:000000000000F396 ; ---------------------------------------------------------------------------
.text:000000000000F39B                 align 20h
.text:000000000000F3A0
.text:000000000000F3A0 loc_F3A0:                               ; CODE XREF: streamsavedir+8F↑j
.text:000000000000F3A0                 movzx   eax, byte ptr [rcx+15h]
.text:000000000000F3A4                 jmp     loc_F2F0
.text:000000000000F3A4 ; ---------------------------------------------------------------------------
.text:000000000000F3A9                 align 10h
.text:000000000000F3B0
.text:000000000000F3B0 loc_F3B0:                               ; CODE XREF: streamsavedir+79↑j
.text:000000000000F3B0                 mov     ebx, [rbp+0]
.text:000000000000F3B3                 test    ebx, ebx
.text:000000000000F3B5                 jnz     loc_F5A0
.text:000000000000F3BB                 cmp     [rsp+78h+compar], 0
.text:000000000000F3C1                 jz      loc_F470
.text:000000000000F3C7                 test    r12, r12
.text:000000000000F3CA                 lea     rbx, [r14+1]
.text:000000000000F3CE                 jnz     short loc_F400
.text:000000000000F3D0                 mov     rdi, rbx
.text:000000000000F3D3                 call    xmalloc
.text:000000000000F3D8                 mov     r13, rax
.text:000000000000F3DB                 mov     rbx, rax
.text:000000000000F3DE
.text:000000000000F3DE loc_F3DE:                               ; CODE XREF: streamsavedir+1D6↓j
.text:000000000000F3DE                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000F3E3                 call    free
.text:000000000000F3E8
.text:000000000000F3E8 loc_F3E8:                               ; CODE XREF: streamsavedir+1F0↓j
.text:000000000000F3E8                                         ; streamsavedir+2EA↓j
.text:000000000000F3E8                 mov     byte ptr [rbx], 0
.text:000000000000F3EB
.text:000000000000F3EB loc_F3EB:                               ; CODE XREF: streamsavedir+328↓j
.text:000000000000F3EB                                         ; streamsavedir+330↓j
.text:000000000000F3EB                 add     rsp, 48h
.text:000000000000F3EF                 mov     rax, r13
.text:000000000000F3F2                 pop     rbx
.text:000000000000F3F3                 pop     rbp
.text:000000000000F3F4                 pop     r12
.text:000000000000F3F6                 pop     r13
.text:000000000000F3F8                 pop     r14
.text:000000000000F3FA                 pop     r15
.text:000000000000F3FC                 retn
.text:000000000000F3FC ; ---------------------------------------------------------------------------
.text:000000000000F3FD                 align 20h
.text:000000000000F400
.text:000000000000F400 loc_F400:                               ; CODE XREF: streamsavedir+13E↑j
.text:000000000000F400                 mov     r15, [rsp+78h+ptr]
.text:000000000000F405                 mov     rcx, [rsp+78h+compar] ; compar
.text:000000000000F40A                 mov     rsi, r12        ; nmemb
.text:000000000000F40D                 mov     edx, 10h        ; size
.text:000000000000F412                 shl     r12, 4
.text:000000000000F416                 mov     rdi, r15        ; base
.text:000000000000F419                 mov     rbp, r15
.text:000000000000F41C                 add     r12, r15
.text:000000000000F41F                 call    _qsort
.text:000000000000F424                 mov     rdi, rbx
.text:000000000000F427                 xor     ebx, ebx
.text:000000000000F429                 call    xmalloc
.text:000000000000F42E                 mov     r13, rax
.text:000000000000F431                 nop     dword ptr [rax+00000000h]
.text:000000000000F438
.text:000000000000F438 loc_F438:                               ; CODE XREF: streamsavedir+1D1↓j
.text:000000000000F438                 mov     rsi, [rbp+0]    ; src
.text:000000000000F43C                 lea     r14, [r13+rbx+0]
.text:000000000000F441                 add     rbp, 10h
.text:000000000000F445                 mov     rdi, r14        ; dest
.text:000000000000F448                 call    _stpcpy
.text:000000000000F44D                 mov     rdi, [rbp-10h]  ; ptr
.text:000000000000F451                 sub     rax, r14
.text:000000000000F454                 lea     rbx, [rbx+rax+1]
.text:000000000000F459                 call    free
.text:000000000000F45E                 cmp     r12, rbp
.text:000000000000F461                 jnz     short loc_F438
.text:000000000000F463                 add     rbx, r13
.text:000000000000F466                 jmp     loc_F3DE
.text:000000000000F466 ; ---------------------------------------------------------------------------
.text:000000000000F46B                 align 10h
.text:000000000000F470
.text:000000000000F470 loc_F470:                               ; CODE XREF: streamsavedir+131↑j
.text:000000000000F470                 cmp     [rsp+78h+var_58], r14
.text:000000000000F475                 jz      loc_F563
.text:000000000000F47B                 lea     rbx, [r13+r14+0]
.text:000000000000F480                 jmp     loc_F3E8
.text:000000000000F480 ; ---------------------------------------------------------------------------
.text:000000000000F485                 align 8
.text:000000000000F488
.text:000000000000F488 loc_F488:                               ; CODE XREF: streamsavedir+B5↑j
.text:000000000000F488                 mov     rsi, [rsp+78h+n]
.text:000000000000F48D                 mov     rax, [rsp+78h+var_58]
.text:000000000000F492                 mov     rdx, rsi
.text:000000000000F495                 sub     rax, r14
.text:000000000000F498                 add     rdx, r14
.text:000000000000F49B                 mov     [rsp+78h+var_48], rdx
.text:000000000000F4A0                 setb    dl
.text:000000000000F4A3                 cmp     rax, rsi
.text:000000000000F4A6                 movzx   edx, dl
.text:000000000000F4A9                 ja      short loc_F4F5
.text:000000000000F4AB                 test    rdx, rdx
.text:000000000000F4AE                 jnz     loc_F599
.text:000000000000F4B4                 test    r13, r13
.text:000000000000F4B7                 mov     rdx, [rsp+78h+var_48]
.text:000000000000F4BC                 jz      loc_F57F
.text:000000000000F4C2                 mov     rax, 5555555555555553h
.text:000000000000F4CC                 cmp     rdx, rax
.text:000000000000F4CF                 ja      loc_F599
.text:000000000000F4D5                 mov     rax, rdx
.text:000000000000F4D8                 shr     rax, 1
.text:000000000000F4DB                 lea     rax, [rdx+rax+1]
.text:000000000000F4E0                 mov     [rsp+78h+var_58], rax
.text:000000000000F4E5
.text:000000000000F4E5 loc_F4E5:                               ; CODE XREF: streamsavedir+303↓j
.text:000000000000F4E5                 mov     rsi, [rsp+78h+var_58]
.text:000000000000F4EA                 mov     rdi, r13
.text:000000000000F4ED                 call    xrealloc
.text:000000000000F4F2                 mov     r13, rax
.text:000000000000F4F5
.text:000000000000F4F5 loc_F4F5:                               ; CODE XREF: streamsavedir+219↑j
.text:000000000000F4F5                 mov     rdx, [rsp+78h+n] ; n
.text:000000000000F4FA                 lea     rdi, [r13+r14+0] ; dest
.text:000000000000F4FF                 mov     rsi, r15        ; src
.text:000000000000F502                 call    _memcpy
.text:000000000000F507                 mov     r14, [rsp+78h+var_48]
.text:000000000000F50C                 jmp     loc_F2F4
.text:000000000000F511 ; ---------------------------------------------------------------------------
.text:000000000000F511
.text:000000000000F511 loc_F511:                               ; CODE XREF: streamsavedir+CF↑j
.text:000000000000F511                 cmp     [rsp+78h+ptr], 0
.text:000000000000F517                 jz      loc_F5C5
.text:000000000000F51D                 mov     rax, 555555555555554h
.text:000000000000F527                 cmp     r12, rax
.text:000000000000F52A                 ja      short loc_F599
.text:000000000000F52C                 mov     rax, r12
.text:000000000000F52F                 shr     rax, 1
.text:000000000000F532                 add     rax, [rsp+78h+var_40]
.text:000000000000F537                 mov     [rsp+78h+var_50], rax
.text:000000000000F53C
.text:000000000000F53C loc_F53C:                               ; CODE XREF: streamsavedir+36C↓j
.text:000000000000F53C                 mov     rsi, [rsp+78h+var_50]
.text:000000000000F541                 mov     rdi, [rsp+78h+ptr]
.text:000000000000F546                 mov     [rsp+78h+var_48], rcx
.text:000000000000F54B                 shl     rsi, 4
.text:000000000000F54F                 call    xrealloc
.text:000000000000F554                 mov     rcx, [rsp+78h+var_48]
.text:000000000000F559                 mov     [rsp+78h+ptr], rax
.text:000000000000F55E                 jmp     loc_F365
.text:000000000000F563 ; ---------------------------------------------------------------------------
.text:000000000000F563
.text:000000000000F563 loc_F563:                               ; CODE XREF: streamsavedir+1E5↑j
.text:000000000000F563                 mov     rbx, [rsp+78h+var_58]
.text:000000000000F568                 mov     rdi, r13
.text:000000000000F56B                 lea     rsi, [rbx+1]
.text:000000000000F56F                 call    xrealloc
.text:000000000000F574                 mov     r13, rax
.text:000000000000F577                 add     rbx, rax
.text:000000000000F57A                 jmp     loc_F3E8
.text:000000000000F57F ; ---------------------------------------------------------------------------
.text:000000000000F57F
.text:000000000000F57F loc_F57F:                               ; CODE XREF: streamsavedir+22C↑j
.text:000000000000F57F                 test    rdx, rdx
.text:000000000000F582                 mov     eax, 80h
.text:000000000000F587                 cmovnz  rax, rdx
.text:000000000000F58B                 test    rax, rax
.text:000000000000F58E                 mov     [rsp+78h+var_58], rax
.text:000000000000F593                 jns     loc_F4E5
.text:000000000000F599
.text:000000000000F599 loc_F599:                               ; CODE XREF: streamsavedir+21E↑j
.text:000000000000F599                                         ; streamsavedir+23F↑j ...
.text:000000000000F599                 call    xalloc_die
.text:000000000000F599 ; ---------------------------------------------------------------------------
.text:000000000000F59E                 align 20h
.text:000000000000F5A0
.text:000000000000F5A0 loc_F5A0:                               ; CODE XREF: streamsavedir+125↑j
.text:000000000000F5A0                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000F5A5                 call    free
.text:000000000000F5AA                 mov     rdi, r13        ; ptr
.text:000000000000F5AD                 xor     r13d, r13d
.text:000000000000F5B0                 call    free
.text:000000000000F5B5                 mov     [rbp+0], ebx
.text:000000000000F5B8                 jmp     loc_F3EB
.text:000000000000F5BD ; ---------------------------------------------------------------------------
.text:000000000000F5BD
.text:000000000000F5BD loc_F5BD:                               ; CODE XREF: streamsavedir+23↑j
.text:000000000000F5BD                 xor     r13d, r13d
.text:000000000000F5C0                 jmp     loc_F3EB
.text:000000000000F5C5 ; ---------------------------------------------------------------------------
.text:000000000000F5C5
.text:000000000000F5C5 loc_F5C5:                               ; CODE XREF: streamsavedir+287↑j
.text:000000000000F5C5                 test    r12, r12
.text:000000000000F5C8                 mov     eax, 8
.text:000000000000F5CD                 mov     edx, 10h
.text:000000000000F5D2                 cmovnz  rax, r12
.text:000000000000F5D6                 xor     esi, esi
.text:000000000000F5D8                 mov     rdi, rax
.text:000000000000F5DB                 mov     [rsp+78h+var_50], rax
.text:000000000000F5E0                 mov     rax, rdx
.text:000000000000F5E3                 mul     rdi
.text:000000000000F5E6                 jo      short loc_F601
.text:000000000000F5E8
.text:000000000000F5E8 loc_F5E8:                               ; CODE XREF: streamsavedir+376↓j
.text:000000000000F5E8                 test    rax, rax
.text:000000000000F5EB                 js      short loc_F599
.text:000000000000F5ED                 test    rsi, rsi
.text:000000000000F5F0                 jnz     short loc_F599
.text:000000000000F5F2                 lea     rax, [r12+1]
.text:000000000000F5F7                 mov     [rsp+78h+var_40], rax
.text:000000000000F5FC                 jmp     loc_F53C
.text:000000000000F601 ; ---------------------------------------------------------------------------
.text:000000000000F601
.text:000000000000F601 loc_F601:                               ; CODE XREF: streamsavedir+356↑j
.text:000000000000F601                 mov     esi, 1
.text:000000000000F606                 jmp     short loc_F5E8
.text:000000000000F606 ; } // starts at F290
.text:000000000000F606 streamsavedir   endp
.text:000000000000F606
.text:000000000000F606 ; ---------------------------------------------------------------------------
.text:000000000000F608                 align 10h
.text:000000000000F610
.text:000000000000F610 ; =============== S U B R O U T I N E =======================================
.text:000000000000F610
.text:000000000000F610
.text:000000000000F610                 public savedir
.text:000000000000F610 savedir         proc near               ; CODE XREF: copy_internal+1DA7↑p
.text:000000000000F610 ; __unwind {
.text:000000000000F610                 push    r12
.text:000000000000F612                 push    rbp
.text:000000000000F613                 mov     ebp, esi
.text:000000000000F615                 push    rbx
.text:000000000000F616                 call    opendir_safer
.text:000000000000F61B                 test    rax, rax
.text:000000000000F61E                 jz      short loc_F648
.text:000000000000F620                 mov     esi, ebp
.text:000000000000F622                 mov     rbx, rax
.text:000000000000F625                 mov     rdi, rax        ; dirp
.text:000000000000F628                 call    streamsavedir
.text:000000000000F62D                 mov     rdi, rbx        ; dirp
.text:000000000000F630                 mov     rbp, rax
.text:000000000000F633                 call    _closedir
.text:000000000000F638                 test    eax, eax
.text:000000000000F63A                 jnz     short loc_F650
.text:000000000000F63C
.text:000000000000F63C loc_F63C:                               ; CODE XREF: savedir+3A↓j
.text:000000000000F63C                                         ; savedir+58↓j
.text:000000000000F63C                 mov     rax, rbp
.text:000000000000F63F                 pop     rbx
.text:000000000000F640                 pop     rbp
.text:000000000000F641                 pop     r12
.text:000000000000F643                 retn
.text:000000000000F643 ; ---------------------------------------------------------------------------
.text:000000000000F644                 align 8
.text:000000000000F648
.text:000000000000F648 loc_F648:                               ; CODE XREF: savedir+E↑j
.text:000000000000F648                 xor     ebp, ebp
.text:000000000000F64A                 jmp     short loc_F63C
.text:000000000000F64A ; ---------------------------------------------------------------------------
.text:000000000000F64C                 align 10h
.text:000000000000F650
.text:000000000000F650 loc_F650:                               ; CODE XREF: savedir+2A↑j
.text:000000000000F650                 call    ___errno_location
.text:000000000000F655                 mov     r12d, [rax]
.text:000000000000F658                 mov     rbx, rax
.text:000000000000F65B                 mov     rdi, rbp        ; ptr
.text:000000000000F65E                 call    free
.text:000000000000F663                 xor     ebp, ebp
.text:000000000000F665                 mov     [rbx], r12d
.text:000000000000F668                 jmp     short loc_F63C
.text:000000000000F668 ; } // starts at F610
.text:000000000000F668 savedir         endp
.text:000000000000F668
.text:000000000000F668 ; ---------------------------------------------------------------------------
.text:000000000000F66A                 align 10h
.text:000000000000F670
.text:000000000000F670 ; =============== S U B R O U T I N E =======================================
.text:000000000000F670
.text:000000000000F670
.text:000000000000F670 ; __int64 __fastcall try_nocreate(char *filename)
.text:000000000000F670 try_nocreate    proc near               ; DATA XREF: gen_tempname_len+3D↓o
.text:000000000000F670
.text:000000000000F670 var_10          = qword ptr -10h
.text:000000000000F670
.text:000000000000F670 ; __unwind {
.text:000000000000F670                 push    rbx
.text:000000000000F671                 mov     rsi, rdi        ; filename
.text:000000000000F674                 mov     edi, 1          ; ver
.text:000000000000F679                 sub     rsp, 0A0h
.text:000000000000F680                 mov     rdx, rsp        ; stat_buf
.text:000000000000F683                 mov     rax, fs:28h
.text:000000000000F68C                 mov     [rsp+0A8h+var_10], rax
.text:000000000000F694                 xor     eax, eax
.text:000000000000F696                 call    ___lxstat
.text:000000000000F69B                 mov     ebx, eax
.text:000000000000F69D                 call    ___errno_location
.text:000000000000F6A2                 test    ebx, ebx
.text:000000000000F6A4                 jz      short loc_F6C0
.text:000000000000F6A6                 mov     edx, [rax]
.text:000000000000F6A8                 cmp     edx, 4Bh ; 'K'
.text:000000000000F6AB                 jz      short loc_F6C0
.text:000000000000F6AD                 xor     eax, eax
.text:000000000000F6AF                 cmp     edx, 2
.text:000000000000F6B2                 setnz   al
.text:000000000000F6B5                 neg     eax
.text:000000000000F6B7                 jmp     short loc_F6CB
.text:000000000000F6B7 ; ---------------------------------------------------------------------------
.text:000000000000F6B9                 align 20h
.text:000000000000F6C0
.text:000000000000F6C0 loc_F6C0:                               ; CODE XREF: try_nocreate+34↑j
.text:000000000000F6C0                                         ; try_nocreate+3B↑j
.text:000000000000F6C0                 mov     dword ptr [rax], 11h
.text:000000000000F6C6                 mov     eax, 0FFFFFFFFh
.text:000000000000F6CB
.text:000000000000F6CB loc_F6CB:                               ; CODE XREF: try_nocreate+47↑j
.text:000000000000F6CB                 mov     rcx, [rsp+0A8h+var_10]
.text:000000000000F6D3                 xor     rcx, fs:28h
.text:000000000000F6DC                 jnz     short loc_F6E7
.text:000000000000F6DE                 add     rsp, 0A0h
.text:000000000000F6E5                 pop     rbx
.text:000000000000F6E6                 retn
.text:000000000000F6E7 ; ---------------------------------------------------------------------------
.text:000000000000F6E7
.text:000000000000F6E7 loc_F6E7:                               ; CODE XREF: try_nocreate+6C↑j
.text:000000000000F6E7                 call    ___stack_chk_fail
.text:000000000000F6E7 ; } // starts at F670
.text:000000000000F6E7 try_nocreate    endp
.text:000000000000F6E7
.text:000000000000F6E7 ; ---------------------------------------------------------------------------
.text:000000000000F6EC                 align 10h
.text:000000000000F6F0
.text:000000000000F6F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F6F0
.text:000000000000F6F0
.text:000000000000F6F0 try_dir         proc near               ; DATA XREF: gen_tempname_len+75↓o
.text:000000000000F6F0 ; __unwind {
.text:000000000000F6F0                 mov     esi, 1C0h       ; mode
.text:000000000000F6F5                 jmp     _mkdir
.text:000000000000F6F5 ; } // starts at F6F0
.text:000000000000F6F5 try_dir         endp
.text:000000000000F6F5
.text:000000000000F6F5 ; ---------------------------------------------------------------------------
.text:000000000000F6FA                 align 20h
.text:000000000000F700
.text:000000000000F700 ; =============== S U B R O U T I N E =======================================
.text:000000000000F700
.text:000000000000F700
.text:000000000000F700 try_file        proc near               ; DATA XREF: gen_tempname_len+55↓o
.text:000000000000F700 ; __unwind {
.text:000000000000F700                 mov     esi, [rsi]
.text:000000000000F702                 mov     edx, 180h
.text:000000000000F707                 xor     eax, eax
.text:000000000000F709                 and     sil, 3Ch
.text:000000000000F70D                 or      sil, 0C2h       ; oflag
.text:000000000000F711                 jmp     _open
.text:000000000000F711 ; } // starts at F700
.text:000000000000F711 try_file        endp
.text:000000000000F711
.text:000000000000F711 ; ---------------------------------------------------------------------------
.text:000000000000F716                 align 20h
.text:000000000000F720
.text:000000000000F720 ; =============== S U B R O U T I N E =======================================
.text:000000000000F720
.text:000000000000F720
.text:000000000000F720 ; __int64 __fastcall try_tempname_len(char *s)
.text:000000000000F720                 public try_tempname_len
.text:000000000000F720 try_tempname_len proc near              ; CODE XREF: force_linkat+96↑p
.text:000000000000F720                                         ; force_symlinkat+7A↑p ...
.text:000000000000F720
.text:000000000000F720 var_68          = qword ptr -68h
.text:000000000000F720 var_60          = qword ptr -60h
.text:000000000000F720 var_58          = qword ptr -58h
.text:000000000000F720 var_50          = qword ptr -50h
.text:000000000000F720 var_48          = qword ptr -48h
.text:000000000000F720 var_3C          = dword ptr -3Ch
.text:000000000000F720
.text:000000000000F720 ; __unwind {
.text:000000000000F720                 push    r15
.text:000000000000F722                 push    r14
.text:000000000000F724                 mov     r15, rdi
.text:000000000000F727                 push    r13
.text:000000000000F729                 push    r12
.text:000000000000F72B                 mov     r14, r8
.text:000000000000F72E                 push    rbp
.text:000000000000F72F                 push    rbx
.text:000000000000F730                 mov     ebp, esi
.text:000000000000F732                 sub     rsp, 38h
.text:000000000000F736                 mov     [rsp+68h+var_50], rdx
.text:000000000000F73B                 mov     [rsp+68h+var_68], rdi
.text:000000000000F73F                 mov     [rsp+68h+var_48], rcx
.text:000000000000F744                 call    ___errno_location
.text:000000000000F749                 mov     [rsp+68h+var_60], rax
.text:000000000000F74E                 mov     eax, [rax]
.text:000000000000F750                 mov     rdi, r15        ; s
.text:000000000000F753                 mov     [rsp+68h+var_3C], eax
.text:000000000000F757                 call    _strlen
.text:000000000000F75C                 movsxd  rsi, ebp
.text:000000000000F75F                 lea     rdx, [rsi+r14]
.text:000000000000F763                 cmp     rdx, rax
.text:000000000000F766                 ja      loc_F87B
.text:000000000000F76C                 sub     rax, r14
.text:000000000000F76F                 mov     rbx, rax
.text:000000000000F772                 sub     rbx, rsi
.text:000000000000F775                 lea     rsi, aSimpleBackupSu+13h ; accept
.text:000000000000F77C                 lea     rax, [r15+rbx]
.text:000000000000F780                 mov     rdi, rax        ; s
.text:000000000000F783                 mov     [rsp+68h+var_58], rax
.text:000000000000F788                 call    _strspn
.text:000000000000F78D                 cmp     r14, rax
.text:000000000000F790                 ja      loc_F87B
.text:000000000000F796                 xor     edi, edi
.text:000000000000F798                 mov     rsi, r14
.text:000000000000F79B                 call    randint_all_new
.text:000000000000F7A0                 test    rax, rax
.text:000000000000F7A3                 mov     rbp, rax
.text:000000000000F7A6                 jz      loc_F88D
.text:000000000000F7AC                 mov     rax, [rsp+68h+var_68]
.text:000000000000F7B0                 lea     r12, letters    ; "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM"...
.text:000000000000F7B7                 mov     r13d, 3A2F8h
.text:000000000000F7BD                 add     rax, r14
.text:000000000000F7C0                 add     rbx, rax
.text:000000000000F7C3                 nop     dword ptr [rax+rax+00h]
.text:000000000000F7C8
.text:000000000000F7C8 loc_F7C8:                               ; CODE XREF: try_tempname_len+FD↓j
.text:000000000000F7C8                 test    r14, r14
.text:000000000000F7CB                 mov     r15, [rsp+68h+var_58]
.text:000000000000F7D0                 jz      short loc_F7F7
.text:000000000000F7D2                 nop     word ptr [rax+rax+00h]
.text:000000000000F7D8
.text:000000000000F7D8 loc_F7D8:                               ; CODE XREF: try_tempname_len+D5↓j
.text:000000000000F7D8                 mov     esi, 3Dh ; '='
.text:000000000000F7DD                 mov     rdi, rbp
.text:000000000000F7E0                 add     r15, 1
.text:000000000000F7E4                 call    randint_genmax
.text:000000000000F7E9                 movzx   eax, byte ptr [r12+rax]
.text:000000000000F7EE                 mov     [r15-1], al
.text:000000000000F7F2                 cmp     r15, rbx
.text:000000000000F7F5                 jnz     short loc_F7D8
.text:000000000000F7F7
.text:000000000000F7F7 loc_F7F7:                               ; CODE XREF: try_tempname_len+B0↑j
.text:000000000000F7F7                 mov     rsi, [rsp+68h+var_50]
.text:000000000000F7FC                 mov     rdi, [rsp+68h+var_68]
.text:000000000000F800                 mov     rax, [rsp+68h+var_48]
.text:000000000000F805                 call    rax
.text:000000000000F807                 test    eax, eax
.text:000000000000F809                 mov     edx, eax
.text:000000000000F80B                 jns     short loc_F839
.text:000000000000F80D                 mov     rax, [rsp+68h+var_60]
.text:000000000000F812                 mov     ecx, [rax]
.text:000000000000F814                 cmp     ecx, 11h
.text:000000000000F817                 jnz     short loc_F874
.text:000000000000F819                 sub     r13d, 1
.text:000000000000F81D                 jnz     short loc_F7C8
.text:000000000000F81F                 mov     rdi, rbp        ; ptr
.text:000000000000F822                 call    randint_all_free
.text:000000000000F827                 mov     rax, [rsp+68h+var_60]
.text:000000000000F82C                 mov     edx, 0FFFFFFFFh
.text:000000000000F831                 mov     dword ptr [rax], 11h
.text:000000000000F837                 jmp     short loc_F863
.text:000000000000F839 ; ---------------------------------------------------------------------------
.text:000000000000F839
.text:000000000000F839 loc_F839:                               ; CODE XREF: try_tempname_len+EB↑j
.text:000000000000F839                 mov     rcx, [rsp+68h+var_60]
.text:000000000000F83E                 mov     eax, [rsp+68h+var_3C]
.text:000000000000F842                 mov     [rcx], eax
.text:000000000000F844                 mov     ecx, eax
.text:000000000000F846
.text:000000000000F846 loc_F846:                               ; CODE XREF: try_tempname_len+159↓j
.text:000000000000F846                 mov     rdi, rbp        ; ptr
.text:000000000000F849                 mov     dword ptr [rsp+68h+var_58], edx
.text:000000000000F84D                 mov     dword ptr [rsp+68h+var_68], ecx
.text:000000000000F850                 call    randint_all_free
.text:000000000000F855                 mov     rax, [rsp+68h+var_60]
.text:000000000000F85A                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:000000000000F85D                 mov     edx, dword ptr [rsp+68h+var_58]
.text:000000000000F861                 mov     [rax], ecx
.text:000000000000F863
.text:000000000000F863 loc_F863:                               ; CODE XREF: try_tempname_len+117↑j
.text:000000000000F863                                         ; try_tempname_len+16B↓j ...
.text:000000000000F863                 add     rsp, 38h
.text:000000000000F867                 mov     eax, edx
.text:000000000000F869                 pop     rbx
.text:000000000000F86A                 pop     rbp
.text:000000000000F86B                 pop     r12
.text:000000000000F86D                 pop     r13
.text:000000000000F86F                 pop     r14
.text:000000000000F871                 pop     r15
.text:000000000000F873                 retn
.text:000000000000F874 ; ---------------------------------------------------------------------------
.text:000000000000F874
.text:000000000000F874 loc_F874:                               ; CODE XREF: try_tempname_len+F7↑j
.text:000000000000F874                 mov     edx, 0FFFFFFFFh
.text:000000000000F879                 jmp     short loc_F846
.text:000000000000F87B ; ---------------------------------------------------------------------------
.text:000000000000F87B
.text:000000000000F87B loc_F87B:                               ; CODE XREF: try_tempname_len+46↑j
.text:000000000000F87B                                         ; try_tempname_len+70↑j
.text:000000000000F87B                 mov     rax, [rsp+68h+var_60]
.text:000000000000F880                 mov     edx, 0FFFFFFFFh
.text:000000000000F885                 mov     dword ptr [rax], 16h
.text:000000000000F88B                 jmp     short loc_F863
.text:000000000000F88D ; ---------------------------------------------------------------------------
.text:000000000000F88D
.text:000000000000F88D loc_F88D:                               ; CODE XREF: try_tempname_len+86↑j
.text:000000000000F88D                 mov     edx, 0FFFFFFFFh
.text:000000000000F892                 jmp     short loc_F863
.text:000000000000F892 ; } // starts at F720
.text:000000000000F892 try_tempname_len endp
.text:000000000000F892
.text:000000000000F892 ; ---------------------------------------------------------------------------
.text:000000000000F894                 align 20h
.text:000000000000F8A0
.text:000000000000F8A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F8A0
.text:000000000000F8A0
.text:000000000000F8A0                 public gen_tempname_len
.text:000000000000F8A0 gen_tempname_len proc near              ; CODE XREF: gen_tempname+6↓j
.text:000000000000F8A0
.text:000000000000F8A0 var_C           = dword ptr -0Ch
.text:000000000000F8A0
.text:000000000000F8A0 ; __unwind {
.text:000000000000F8A0                 sub     rsp, 18h
.text:000000000000F8A4                 cmp     ecx, 1
.text:000000000000F8A7                 mov     [rsp+18h+var_C], edx
.text:000000000000F8AB                 jz      short loc_F910
.text:000000000000F8AD                 cmp     ecx, 2
.text:000000000000F8B0                 jz      short loc_F8D8
.text:000000000000F8B2                 test    ecx, ecx
.text:000000000000F8B4                 jz      short loc_F8F0
.text:000000000000F8B6                 lea     rcx, __PRETTY_FUNCTION___5642 ; "gen_tempname_len"
.text:000000000000F8BD                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/tempname.c"
.text:000000000000F8C4                 lea     rdi, s          ; "! \"invalid KIND in __gen_tempname\""
.text:000000000000F8CB                 mov     edx, 147h       ; line
.text:000000000000F8D0                 call    ___assert_fail
.text:000000000000F8D0 ; ---------------------------------------------------------------------------
.text:000000000000F8D5                 align 8
.text:000000000000F8D8
.text:000000000000F8D8 loc_F8D8:                               ; CODE XREF: gen_tempname_len+10↑j
.text:000000000000F8D8                 lea     rdx, [rsp+18h+var_C]
.text:000000000000F8DD                 lea     rcx, try_nocreate
.text:000000000000F8E4                 call    try_tempname_len
.text:000000000000F8E9                 add     rsp, 18h
.text:000000000000F8ED                 retn
.text:000000000000F8ED ; ---------------------------------------------------------------------------
.text:000000000000F8EE                 align 10h
.text:000000000000F8F0
.text:000000000000F8F0 loc_F8F0:                               ; CODE XREF: gen_tempname_len+14↑j
.text:000000000000F8F0                 lea     rdx, [rsp+18h+var_C]
.text:000000000000F8F5                 lea     rcx, try_file
.text:000000000000F8FC                 call    try_tempname_len
.text:000000000000F901                 add     rsp, 18h
.text:000000000000F905                 retn
.text:000000000000F905 ; ---------------------------------------------------------------------------
.text:000000000000F906                 align 10h
.text:000000000000F910
.text:000000000000F910 loc_F910:                               ; CODE XREF: gen_tempname_len+B↑j
.text:000000000000F910                 lea     rdx, [rsp+18h+var_C]
.text:000000000000F915                 lea     rcx, try_dir
.text:000000000000F91C                 call    try_tempname_len
.text:000000000000F921                 add     rsp, 18h
.text:000000000000F925                 retn
.text:000000000000F925 ; } // starts at F8A0
.text:000000000000F925 gen_tempname_len endp
.text:000000000000F925
.text:000000000000F925 ; ---------------------------------------------------------------------------
.text:000000000000F926                 align 10h
.text:000000000000F930
.text:000000000000F930 ; =============== S U B R O U T I N E =======================================
.text:000000000000F930
.text:000000000000F930
.text:000000000000F930                 public gen_tempname
.text:000000000000F930 gen_tempname    proc near
.text:000000000000F930 ; __unwind {
.text:000000000000F930                 mov     r8d, 6
.text:000000000000F936                 jmp     gen_tempname_len
.text:000000000000F936 ; } // starts at F930
.text:000000000000F936 gen_tempname    endp
.text:000000000000F936
.text:000000000000F936 ; ---------------------------------------------------------------------------
.text:000000000000F93B                 align 20h
.text:000000000000F940
.text:000000000000F940 ; =============== S U B R O U T I N E =======================================
.text:000000000000F940
.text:000000000000F940
.text:000000000000F940                 public try_tempname
.text:000000000000F940 try_tempname    proc near
.text:000000000000F940 ; __unwind {
.text:000000000000F940                 mov     r8d, 6
.text:000000000000F946                 jmp     try_tempname_len
.text:000000000000F946 ; } // starts at F940
.text:000000000000F946 try_tempname    endp
.text:000000000000F946
.text:000000000000F946 ; ---------------------------------------------------------------------------
.text:000000000000F94B                 align 10h
.text:000000000000F950
.text:000000000000F950 ; =============== S U B R O U T I N E =======================================
.text:000000000000F950
.text:000000000000F950 ; Attributes: info_from_lumina
.text:000000000000F950
.text:000000000000F950 ; __int64 __fastcall fd_safer_flag(int fd)
.text:000000000000F950                 public fd_safer_flag
.text:000000000000F950 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:000000000000F950                                         ; openat_safer+29↓p
.text:000000000000F950 ; __unwind {
.text:000000000000F950                 push    r13
.text:000000000000F952                 push    r12
.text:000000000000F954                 push    rbp
.text:000000000000F955                 push    rbx
.text:000000000000F956                 mov     ebx, edi
.text:000000000000F958                 sub     rsp, 8
.text:000000000000F95C                 cmp     edi, 2
.text:000000000000F95F                 ja      short loc_F982
.text:000000000000F961                 call    dup_safer
.text:000000000000F966                 mov     r12d, eax
.text:000000000000F969                 call    ___errno_location
.text:000000000000F96E                 mov     r13d, [rax]
.text:000000000000F971                 mov     rbp, rax
.text:000000000000F974                 mov     edi, ebx        ; fd
.text:000000000000F976                 call    _close
.text:000000000000F97B                 mov     ebx, r12d
.text:000000000000F97E                 mov     [rbp+0], r13d
.text:000000000000F982
.text:000000000000F982 loc_F982:                               ; CODE XREF: fd_safer_flag+F↑j
.text:000000000000F982                 add     rsp, 8
.text:000000000000F986                 mov     eax, ebx
.text:000000000000F988                 pop     rbx
.text:000000000000F989                 pop     rbp
.text:000000000000F98A                 pop     r12
.text:000000000000F98C                 pop     r13
.text:000000000000F98E                 retn
.text:000000000000F98E ; } // starts at F950
.text:000000000000F98E fd_safer_flag   endp
.text:000000000000F98E
.text:000000000000F98E ; ---------------------------------------------------------------------------
.text:000000000000F98F                 align 10h
.text:000000000000F990
.text:000000000000F990 ; =============== S U B R O U T I N E =======================================
.text:000000000000F990
.text:000000000000F990
.text:000000000000F990 dev_info_hash   proc near               ; DATA XREF: utimecmpat+637↓o
.text:000000000000F990 ; __unwind {
.text:000000000000F990                 mov     rax, [rdi]
.text:000000000000F993                 xor     edx, edx
.text:000000000000F995                 div     rsi
.text:000000000000F998                 mov     rax, rdx
.text:000000000000F99B                 retn
.text:000000000000F99B ; } // starts at F990
.text:000000000000F99B dev_info_hash   endp
.text:000000000000F99B
.text:000000000000F99B ; ---------------------------------------------------------------------------
.text:000000000000F99C                 align 20h
.text:000000000000F9A0
.text:000000000000F9A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F9A0
.text:000000000000F9A0
.text:000000000000F9A0 dev_info_compare proc near              ; DATA XREF: utimecmpat+63E↓o
.text:000000000000F9A0 ; __unwind {
.text:000000000000F9A0                 mov     rax, [rsi]
.text:000000000000F9A3                 cmp     [rdi], rax
.text:000000000000F9A6                 setz    al
.text:000000000000F9A9                 retn
.text:000000000000F9A9 ; } // starts at F9A0
.text:000000000000F9A9 dev_info_compare endp
.text:000000000000F9A9
.text:000000000000F9A9 ; ---------------------------------------------------------------------------
.text:000000000000F9AA                 align 10h
.text:000000000000F9B0
.text:000000000000F9B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F9B0
.text:000000000000F9B0
.text:000000000000F9B0                 public utimecmpat
.text:000000000000F9B0 utimecmpat      proc near               ; CODE XREF: utimecmp+11↓j
.text:000000000000F9B0
.text:000000000000F9B0 filename        = qword ptr -150h
.text:000000000000F9B0 var_148         = qword ptr -148h
.text:000000000000F9B0 var_140         = qword ptr -140h
.text:000000000000F9B0 fd              = dword ptr -138h
.text:000000000000F9B0 path            = qword ptr -130h
.text:000000000000F9B0 var_128         = qword ptr -128h
.text:000000000000F9B0 fildes          = dword ptr -120h
.text:000000000000F9B0 var_11C         = dword ptr -11Ch
.text:000000000000F9B0 var_118         = qword ptr -118h
.text:000000000000F9B0 var_110         = qword ptr -110h
.text:000000000000F9B0 var_108         = qword ptr -108h
.text:000000000000F9B0 var_100         = dword ptr -100h
.text:000000000000F9B0 var_FC          = byte ptr -0FCh
.text:000000000000F9B0 times           = timespec ptr -0F8h
.text:000000000000F9B0 var_E8          = qword ptr -0E8h
.text:000000000000F9B0 var_E0          = qword ptr -0E0h
.text:000000000000F9B0 stat_buf        = stat ptr -0D8h
.text:000000000000F9B0 var_40          = qword ptr -40h
.text:000000000000F9B0
.text:000000000000F9B0 ; __unwind {
.text:000000000000F9B0                 push    r15
.text:000000000000F9B2                 push    r14
.text:000000000000F9B4                 push    r13
.text:000000000000F9B6                 push    r12
.text:000000000000F9B8                 push    rbp
.text:000000000000F9B9                 push    rbx
.text:000000000000F9BA                 mov     ebx, r8d
.text:000000000000F9BD                 and     ebx, 1
.text:000000000000F9C0                 sub     rsp, 128h
.text:000000000000F9C7                 mov     r13, [rcx+60h]
.text:000000000000F9CB                 mov     r14, [rdx+58h]
.text:000000000000F9CF                 mov     rax, fs:28h
.text:000000000000F9D8                 mov     [rsp+158h+var_40], rax
.text:000000000000F9E0                 xor     eax, eax
.text:000000000000F9E2                 test    ebx, ebx
.text:000000000000F9E4                 mov     r12, [rcx+58h]
.text:000000000000F9E8                 mov     r15, [rdx+60h]
.text:000000000000F9EC                 mov     r9d, r13d
.text:000000000000F9EF                 jz      loc_FAD8
.text:000000000000F9F5                 cmp     r14, r12
.text:000000000000F9F8                 mov     r10d, edi
.text:000000000000F9FB                 setz    byte ptr [rsp+158h+fildes]
.text:000000000000FA00                 movzx   edi, byte ptr [rsp+158h+fildes]
.text:000000000000FA05                 cmp     r15d, r13d
.text:000000000000FA08                 setz    al
.text:000000000000FA0B                 and     al, dil
.text:000000000000FA0E                 mov     byte ptr [rsp+158h+filename], al
.text:000000000000FA12                 jnz     loc_FB20
.text:000000000000FA18                 lea     rax, [r12-1]
.text:000000000000FA1D                 cmp     rax, r14
.text:000000000000FA20                 jg      loc_FB28
.text:000000000000FA26                 lea     rax, [r14-1]
.text:000000000000FA2A                 cmp     rax, r12
.text:000000000000FA2D                 jg      loc_FAEF
.text:000000000000FA33                 mov     rbp, rdx
.text:000000000000FA36                 mov     rdx, cs:ht_5307
.text:000000000000FA3D                 mov     r11, rsi
.text:000000000000FA40                 test    rdx, rdx
.text:000000000000FA43                 jz      loc_FFE0
.text:000000000000FA49
.text:000000000000FA49 loc_FA49:                               ; CODE XREF: utimecmpat+67C↓j
.text:000000000000FA49                 mov     rsi, cs:new_dst_res_5308
.text:000000000000FA50                 test    rsi, rsi
.text:000000000000FA53                 jz      loc_FB30
.text:000000000000FA59
.text:000000000000FA59 loc_FA59:                               ; CODE XREF: utimecmpat+1CC↓j
.text:000000000000FA59                 mov     rax, [rbp+0]
.text:000000000000FA5D                 mov     rdi, rdx
.text:000000000000FA60                 mov     [rsp+158h+path], r11
.text:000000000000FA65                 mov     [rsp+158h+fd], r10d
.text:000000000000FA6A                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000FA6F                 mov     [rsi], rax
.text:000000000000FA72                 call    hash_insert
.text:000000000000FA77                 test    rax, rax
.text:000000000000FA7A                 mov     [rsp+158h+var_148], rax
.text:000000000000FA7F                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000FA84                 mov     r10d, [rsp+158h+fd]
.text:000000000000FA89                 mov     r11, [rsp+158h+path]
.text:000000000000FA8E                 jz      loc_FB88
.text:000000000000FA94                 cmp     cs:new_dst_res_5308, rax
.text:000000000000FA9B                 jz      loc_10040
.text:000000000000FAA1
.text:000000000000FAA1 loc_FAA1:                               ; CODE XREF: utimecmpat+231↓j
.text:000000000000FAA1                                         ; utimecmpat+69B↓j
.text:000000000000FAA1                 mov     rax, [rsp+158h+var_148]
.text:000000000000FAA6                 cmp     byte ptr [rax+0Ch], 0
.text:000000000000FAAA                 mov     esi, [rax+8]
.text:000000000000FAAD                 mov     dword ptr [rsp+158h+var_140], esi
.text:000000000000FAB1                 jz      loc_FC0A
.text:000000000000FAB7                 xor     eax, eax
.text:000000000000FAB9                 cmp     esi, 77359400h
.text:000000000000FABF                 setz    al
.text:000000000000FAC2                 not     eax
.text:000000000000FAC4                 cdqe
.text:000000000000FAC6                 and     r12, rax
.text:000000000000FAC9                 mov     eax, r9d
.text:000000000000FACC                 mov     r9d, r13d
.text:000000000000FACF                 cdq
.text:000000000000FAD0                 idiv    esi
.text:000000000000FAD2                 sub     r9d, edx
.text:000000000000FAD5                 nop     dword ptr [rax]
.text:000000000000FAD8
.text:000000000000FAD8 loc_FAD8:                               ; CODE XREF: utimecmpat+3F↑j
.text:000000000000FAD8                                         ; utimecmpat+624↓j
.text:000000000000FAD8                 cmp     r12, r14
.text:000000000000FADB                 jg      short loc_FB28
.text:000000000000FADD                 mov     ebx, 1
.text:000000000000FAE2                 jl      short loc_FAEF
.text:000000000000FAE4                 cmp     r9d, r15d
.text:000000000000FAE7                 jg      short loc_FB28
.text:000000000000FAE9                 setl    bl
.text:000000000000FAEC                 movzx   ebx, bl
.text:000000000000FAEF
.text:000000000000FAEF loc_FAEF:                               ; CODE XREF: utimecmpat+7D↑j
.text:000000000000FAEF                                         ; utimecmpat+132↑j ...
.text:000000000000FAEF                 mov     rsi, [rsp+158h+var_40]
.text:000000000000FAF7                 xor     rsi, fs:28h
.text:000000000000FB00                 mov     eax, ebx
.text:000000000000FB02                 jnz     loc_100D8
.text:000000000000FB08                 add     rsp, 128h
.text:000000000000FB0F                 pop     rbx
.text:000000000000FB10                 pop     rbp
.text:000000000000FB11                 pop     r12
.text:000000000000FB13                 pop     r13
.text:000000000000FB15                 pop     r14
.text:000000000000FB17                 pop     r15
.text:000000000000FB19                 retn
.text:000000000000FB19 ; ---------------------------------------------------------------------------
.text:000000000000FB1A                 align 20h
.text:000000000000FB20
.text:000000000000FB20 loc_FB20:                               ; CODE XREF: utimecmpat+62↑j
.text:000000000000FB20                 xor     ebx, ebx
.text:000000000000FB22                 jmp     short loc_FAEF
.text:000000000000FB22 ; ---------------------------------------------------------------------------
.text:000000000000FB24                 align 8
.text:000000000000FB28
.text:000000000000FB28 loc_FB28:                               ; CODE XREF: utimecmpat+70↑j
.text:000000000000FB28                                         ; utimecmpat+12B↑j ...
.text:000000000000FB28                 mov     ebx, 0FFFFFFFFh
.text:000000000000FB2D                 jmp     short loc_FAEF
.text:000000000000FB2D ; ---------------------------------------------------------------------------
.text:000000000000FB2F                 align 10h
.text:000000000000FB30
.text:000000000000FB30 loc_FB30:                               ; CODE XREF: utimecmpat+A3↑j
.text:000000000000FB30                 mov     edi, 10h        ; size
.text:000000000000FB35                 mov     [rsp+158h+path], r11
.text:000000000000FB3A                 mov     [rsp+158h+fd], r10d
.text:000000000000FB3F                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000FB44                 mov     [rsp+158h+var_148], rdx
.text:000000000000FB49                 call    _malloc
.text:000000000000FB4E                 test    rax, rax
.text:000000000000FB51                 mov     rsi, rax
.text:000000000000FB54                 mov     cs:new_dst_res_5308, rax
.text:000000000000FB5B                 mov     rdx, [rsp+158h+var_148]
.text:000000000000FB60                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000FB65                 mov     r10d, [rsp+158h+fd]
.text:000000000000FB6A                 mov     r11, [rsp+158h+path]
.text:000000000000FB6F                 jz      short loc_FB98
.text:000000000000FB71                 mov     dword ptr [rax+8], 77359400h
.text:000000000000FB78                 mov     byte ptr [rax+0Ch], 0
.text:000000000000FB7C                 jmp     loc_FA59
.text:000000000000FB7C ; ---------------------------------------------------------------------------
.text:000000000000FB81                 align 8
.text:000000000000FB88
.text:000000000000FB88 loc_FB88:                               ; CODE XREF: utimecmpat+DE↑j
.text:000000000000FB88                 mov     rdx, cs:ht_5307
.text:000000000000FB8F                 test    rdx, rdx
.text:000000000000FB92                 jz      loc_10032
.text:000000000000FB98
.text:000000000000FB98 loc_FB98:                               ; CODE XREF: utimecmpat+1BF↑j
.text:000000000000FB98                 lea     rcx, [rsp+158h+var_108]
.text:000000000000FB9D                 mov     rax, [rbp+0]
.text:000000000000FBA1                 mov     rdi, rdx
.text:000000000000FBA4                 mov     [rsp+158h+var_128], r11
.text:000000000000FBA9                 mov     dword ptr [rsp+158h+path], r10d
.text:000000000000FBAE                 mov     rsi, rcx
.text:000000000000FBB1                 mov     [rsp+158h+fd], r9d
.text:000000000000FBB6                 mov     [rsp+158h+var_140], rcx
.text:000000000000FBBB                 mov     [rsp+158h+var_108], rax
.text:000000000000FBC0                 call    hash_lookup
.text:000000000000FBC5                 test    rax, rax
.text:000000000000FBC8                 mov     [rsp+158h+var_148], rax
.text:000000000000FBCD                 mov     rcx, [rsp+158h+var_140]
.text:000000000000FBD2                 mov     r9d, [rsp+158h+fd]
.text:000000000000FBD7                 mov     r10d, dword ptr [rsp+158h+path]
.text:000000000000FBDC                 mov     r11, [rsp+158h+var_128]
.text:000000000000FBE1                 jnz     loc_FAA1
.text:000000000000FBE7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000FBF0
.text:000000000000FBF0 loc_FBF0:                               ; CODE XREF: utimecmpat+687↓j
.text:000000000000FBF0                 mov     [rsp+158h+var_100], 77359400h
.text:000000000000FBF8                 mov     [rsp+158h+var_FC], 0
.text:000000000000FBFD                 mov     dword ptr [rsp+158h+var_140], 77359400h
.text:000000000000FC05                 mov     [rsp+158h+var_148], rcx
.text:000000000000FC0A
.text:000000000000FC0A loc_FC0A:                               ; CODE XREF: utimecmpat+101↑j
.text:000000000000FC0A                 mov     rcx, [rbp+50h]
.text:000000000000FC0E                 mov     eax, 66666667h
.text:000000000000FC13                 mov     rsi, [rbp+70h]
.text:000000000000FC17                 imul    ecx
.text:000000000000FC19                 mov     eax, ecx
.text:000000000000FC1B                 mov     [rsp+158h+path], rcx
.text:000000000000FC20                 sar     eax, 1Fh
.text:000000000000FC23                 sar     edx, 2
.text:000000000000FC26                 sub     edx, eax
.text:000000000000FC28                 lea     eax, [rdx+rdx*4]
.text:000000000000FC2B                 mov     [rsp+158h+fd], edx
.text:000000000000FC2F                 add     eax, eax
.text:000000000000FC31                 sub     ecx, eax
.text:000000000000FC33                 mov     eax, 66666667h
.text:000000000000FC38                 imul    esi
.text:000000000000FC3A                 mov     eax, esi
.text:000000000000FC3C                 sar     eax, 1Fh
.text:000000000000FC3F                 sar     edx, 2
.text:000000000000FC42                 mov     edi, edx
.text:000000000000FC44                 sub     edi, eax
.text:000000000000FC46                 lea     eax, [rdi+rdi*4]
.text:000000000000FC49                 add     eax, eax
.text:000000000000FC4B                 sub     esi, eax
.text:000000000000FC4D                 mov     eax, 66666667h
.text:000000000000FC52                 imul    r15d
.text:000000000000FC55                 mov     eax, r15d
.text:000000000000FC58                 or      ecx, esi
.text:000000000000FC5A                 sar     eax, 1Fh
.text:000000000000FC5D                 mov     esi, r15d
.text:000000000000FC60                 sar     edx, 2
.text:000000000000FC63                 mov     r8d, edx
.text:000000000000FC66                 sub     r8d, eax
.text:000000000000FC69                 lea     eax, [r8+r8*4]
.text:000000000000FC6D                 add     eax, eax
.text:000000000000FC6F                 sub     esi, eax
.text:000000000000FC71                 or      ecx, esi
.text:000000000000FC73                 jnz     loc_FFC8
.text:000000000000FC79                 cmp     dword ptr [rsp+158h+var_140], 0Ah
.text:000000000000FC7E                 mov     rax, [rbp+48h]
.text:000000000000FC82                 mov     ecx, edi
.text:000000000000FC84                 mov     edx, [rsp+158h+fd]
.text:000000000000FC88                 mov     esi, r8d
.text:000000000000FC8B                 mov     [rsp+158h+var_110], rax
.text:000000000000FC90                 mov     dword ptr [rsp+158h+var_128], edx
.text:000000000000FC94                 jle     loc_100A8
.text:000000000000FC9A                 mov     eax, 66666667h
.text:000000000000FC9F                 imul    edi
.text:000000000000FCA1                 mov     eax, edi
.text:000000000000FCA3                 sar     eax, 1Fh
.text:000000000000FCA6                 sar     edx, 2
.text:000000000000FCA9                 sub     edx, eax
.text:000000000000FCAB                 lea     eax, [rdx+rdx*4]
.text:000000000000FCAE                 add     eax, eax
.text:000000000000FCB0                 sub     edi, eax
.text:000000000000FCB2                 mov     eax, 66666667h
.text:000000000000FCB7                 imul    [rsp+158h+fd]
.text:000000000000FCBB                 mov     eax, [rsp+158h+fd]
.text:000000000000FCBF                 sar     eax, 1Fh
.text:000000000000FCC2                 sar     edx, 2
.text:000000000000FCC5                 sub     edx, eax
.text:000000000000FCC7                 lea     eax, [rdx+rdx*4]
.text:000000000000FCCA                 mov     edx, [rsp+158h+fd]
.text:000000000000FCCE                 mov     [rsp+158h+fd], 0Ah
.text:000000000000FCD6                 add     eax, eax
.text:000000000000FCD8                 sub     edx, eax
.text:000000000000FCDA                 mov     eax, 66666667h
.text:000000000000FCDF                 or      edi, edx
.text:000000000000FCE1                 imul    r8d
.text:000000000000FCE4                 mov     eax, r8d
.text:000000000000FCE7                 mov     [rsp+158h+var_11C], edi
.text:000000000000FCEB                 sar     eax, 1Fh
.text:000000000000FCEE                 mov     edi, 66666667h
.text:000000000000FCF3                 sar     edx, 2
.text:000000000000FCF6                 sub     edx, eax
.text:000000000000FCF8                 lea     eax, [rdx+rdx*4]
.text:000000000000FCFB                 mov     edx, 8
.text:000000000000FD00                 add     eax, eax
.text:000000000000FD02                 sub     r8d, eax
.text:000000000000FD05                 mov     eax, [rsp+158h+var_11C]
.text:000000000000FD09                 or      eax, r8d
.text:000000000000FD0C                 jnz     loc_100C4
.text:000000000000FD12                 mov     [rsp+158h+var_11C], r9d
.text:000000000000FD17                 mov     [rsp+158h+var_118], r14
.text:000000000000FD1C                 mov     r9d, 0Ah
.text:000000000000FD22                 mov     r8d, dword ptr [rsp+158h+var_128]
.text:000000000000FD27                 mov     qword ptr [rsp+158h+fd], r12
.text:000000000000FD2C                 mov     r14d, edx
.text:000000000000FD2F                 mov     [rsp+158h+var_128], rbp
.text:000000000000FD34
.text:000000000000FD34 loc_FD34:                               ; CODE XREF: utimecmpat+41E↓j
.text:000000000000FD34                 mov     eax, r8d
.text:000000000000FD37                 sar     r8d, 1Fh
.text:000000000000FD3B                 lea     ebp, [r9+r9*4]
.text:000000000000FD3F                 imul    edi
.text:000000000000FD41                 mov     eax, ecx
.text:000000000000FD43                 sar     ecx, 1Fh
.text:000000000000FD46                 add     ebp, ebp
.text:000000000000FD48                 mov     r9d, ebp
.text:000000000000FD4B                 sar     edx, 2
.text:000000000000FD4E                 sub     edx, r8d
.text:000000000000FD51                 mov     r8d, edx
.text:000000000000FD54                 imul    edi
.text:000000000000FD56                 mov     eax, esi
.text:000000000000FD58                 sar     esi, 1Fh
.text:000000000000FD5B                 sar     edx, 2
.text:000000000000FD5E                 sub     edx, ecx
.text:000000000000FD60                 mov     ecx, edx
.text:000000000000FD62                 imul    edi
.text:000000000000FD64                 sar     edx, 2
.text:000000000000FD67                 sub     edx, esi
.text:000000000000FD69                 cmp     ebp, dword ptr [rsp+158h+var_140]
.text:000000000000FD6D                 mov     esi, edx
.text:000000000000FD6F                 jge     loc_10050
.text:000000000000FD75                 mov     eax, r8d
.text:000000000000FD78                 mov     r12d, r8d
.text:000000000000FD7B                 imul    edi
.text:000000000000FD7D                 mov     eax, r8d
.text:000000000000FD80                 sar     eax, 1Fh
.text:000000000000FD83                 sar     edx, 2
.text:000000000000FD86                 sub     edx, eax
.text:000000000000FD88                 lea     eax, [rdx+rdx*4]
.text:000000000000FD8B                 add     eax, eax
.text:000000000000FD8D                 sub     r12d, eax
.text:000000000000FD90                 mov     eax, ecx
.text:000000000000FD92                 imul    edi
.text:000000000000FD94                 mov     eax, ecx
.text:000000000000FD96                 sar     eax, 1Fh
.text:000000000000FD99                 sar     edx, 2
.text:000000000000FD9C                 sub     edx, eax
.text:000000000000FD9E                 lea     eax, [rdx+rdx*4]
.text:000000000000FDA1                 mov     edx, ecx
.text:000000000000FDA3                 add     eax, eax
.text:000000000000FDA5                 sub     edx, eax
.text:000000000000FDA7                 mov     eax, esi
.text:000000000000FDA9                 or      r12d, edx
.text:000000000000FDAC                 imul    edi
.text:000000000000FDAE                 mov     eax, esi
.text:000000000000FDB0                 sar     eax, 1Fh
.text:000000000000FDB3                 sar     edx, 2
.text:000000000000FDB6                 sub     edx, eax
.text:000000000000FDB8                 lea     eax, [rdx+rdx*4]
.text:000000000000FDBB                 mov     edx, esi
.text:000000000000FDBD                 add     eax, eax
.text:000000000000FDBF                 sub     edx, eax
.text:000000000000FDC1                 or      r12d, edx
.text:000000000000FDC4                 jnz     loc_10050
.text:000000000000FDCA                 sub     r14d, 1
.text:000000000000FDCE                 jnz     loc_FD34
.text:000000000000FDD4                 mov     r14, [rsp+158h+var_118]
.text:000000000000FDD9                 mov     rbp, [rsp+158h+var_128]
.text:000000000000FDDE                 mov     rax, [rsp+158h+var_110]
.text:000000000000FDE3                 mov     r12, qword ptr [rsp+158h+fd]
.text:000000000000FDE8                 mov     r9d, [rsp+158h+var_11C]
.text:000000000000FDED                 or      rax, r14
.text:000000000000FDF0                 or      rax, [rbp+68h]
.text:000000000000FDF4                 test    al, 1
.text:000000000000FDF6                 mov     rax, [rsp+158h+var_148]
.text:000000000000FDFB                 jz      loc_10088
.text:000000000000FE01                 mov     dword ptr [rax+8], 3B9ACA00h
.text:000000000000FE08                 mov     [rsp+158h+fd], 3B9ACA00h
.text:000000000000FE10                 mov     rax, r12
.text:000000000000FE13
.text:000000000000FE13 loc_FE13:                               ; CODE XREF: utimecmpat+6D3↓j
.text:000000000000FE13                                         ; utimecmpat+6F3↓j ...
.text:000000000000FE13                 cmp     r14, r12
.text:000000000000FE16                 jg      loc_FAEF
.text:000000000000FE1C                 cmp     r15d, r13d
.text:000000000000FE1F                 jl      short loc_FE2C
.text:000000000000FE21                 cmp     byte ptr [rsp+158h+fildes], 0
.text:000000000000FE26                 jnz     loc_FAEF
.text:000000000000FE2C
.text:000000000000FE2C loc_FE2C:                               ; CODE XREF: utimecmpat+46F↑j
.text:000000000000FE2C                 cmp     r14, rax
.text:000000000000FE2F                 jl      loc_FB28
.text:000000000000FE35                 jnz     short loc_FE4D
.text:000000000000FE37                 mov     eax, r9d
.text:000000000000FE3A                 cdq
.text:000000000000FE3B                 idiv    [rsp+158h+fd]
.text:000000000000FE3F                 mov     eax, r13d
.text:000000000000FE42                 sub     eax, edx
.text:000000000000FE44                 cmp     eax, r15d
.text:000000000000FE47                 jg      loc_FB28
.text:000000000000FE4D
.text:000000000000FE4D loc_FE4D:                               ; CODE XREF: utimecmpat+485↑j
.text:000000000000FE4D                 mov     rax, [rsp+158h+var_110]
.text:000000000000FE52                 mov     edx, 38E38E39h
.text:000000000000FE57                 lea     rbp, [rsp+158h+times]
.text:000000000000FE5C                 mov     rsi, r11        ; path
.text:000000000000FE5F                 mov     edi, r10d       ; fd
.text:000000000000FE62                 mov     ecx, 100h       ; flags
.text:000000000000FE67                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000FE6C                 mov     [rsp+158h+fildes], r10d
.text:000000000000FE71                 mov     [rsp+158h+times.tv_sec], rax
.text:000000000000FE76                 movsxd  rax, dword ptr [rsp+158h+path]
.text:000000000000FE7B                 mov     [rsp+158h+times.tv_nsec], rax
.text:000000000000FE80                 movzx   eax, byte ptr [rsp+158h+filename]
.text:000000000000FE85                 mov     [rsp+158h+filename], r11
.text:000000000000FE8A                 or      rax, r14
.text:000000000000FE8D                 mov     [rsp+158h+var_E8], rax
.text:000000000000FE92                 mov     eax, [rsp+158h+fd]
.text:000000000000FE96                 mul     edx
.text:000000000000FE98                 mov     eax, edx
.text:000000000000FE9A                 mov     rdx, rbp        ; times
.text:000000000000FE9D                 shr     eax, 1
.text:000000000000FE9F                 add     eax, r15d
.text:000000000000FEA2                 cdqe
.text:000000000000FEA4                 mov     [rsp+158h+var_E0], rax
.text:000000000000FEA9                 call    _utimensat
.text:000000000000FEAE                 test    eax, eax
.text:000000000000FEB0                 mov     r10d, [rsp+158h+fildes]
.text:000000000000FEB5                 mov     r11, [rsp+158h+filename]
.text:000000000000FEBA                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000FEBF                 jz      short loc_FECB
.text:000000000000FEC1
.text:000000000000FEC1 loc_FEC1:                               ; CODE XREF: utimecmpat+761↓j
.text:000000000000FEC1                 mov     ebx, 0FFFFFFFEh
.text:000000000000FEC6                 jmp     loc_FAEF
.text:000000000000FECB ; ---------------------------------------------------------------------------
.text:000000000000FECB
.text:000000000000FECB loc_FECB:                               ; CODE XREF: utimecmpat+50F↑j
.text:000000000000FECB                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000FED3                 mov     rdx, r11        ; filename
.text:000000000000FED6                 mov     r8d, 100h       ; flag
.text:000000000000FEDC                 mov     esi, r10d       ; fildes
.text:000000000000FEDF                 mov     edi, 1          ; ver
.text:000000000000FEE4                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000FEE9                 mov     [rsp+158h+filename], r11
.text:000000000000FEEE                 mov     [rsp+158h+fildes], r10d
.text:000000000000FEF3                 call    ___fxstatat
.text:000000000000FEF8                 mov     rcx, [rsp+158h+stat_buf.st_mtim.tv_nsec]
.text:000000000000FF00                 mov     r8d, eax
.text:000000000000FF03                 mov     rax, [rsp+158h+stat_buf.st_mtim.tv_sec]
.text:000000000000FF0B                 movsxd  rdx, r15d
.text:000000000000FF0E                 mov     r10d, [rsp+158h+fildes]
.text:000000000000FF13                 mov     r11, [rsp+158h+filename]
.text:000000000000FF18                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000FF1D                 xor     rcx, rdx
.text:000000000000FF20                 xor     rax, r14
.text:000000000000FF23                 or      rax, rcx
.text:000000000000FF26                 movsxd  rcx, r8d
.text:000000000000FF29                 or      rax, rcx
.text:000000000000FF2C                 jnz     loc_100DD
.text:000000000000FF32
.text:000000000000FF32 loc_FF32:                               ; CODE XREF: utimecmpat+767↓j
.text:000000000000FF32                 mov     ecx, dword ptr [rsp+158h+stat_buf.st_mtim.tv_sec]
.text:000000000000FF39                 mov     esi, 0Ah
.text:000000000000FF3E                 and     ecx, 1
.text:000000000000FF41                 imul    ecx, 3B9ACA00h
.text:000000000000FF47                 add     ecx, dword ptr [rsp+158h+stat_buf.st_mtim.tv_nsec]
.text:000000000000FF4E                 mov     eax, ecx
.text:000000000000FF50                 cdq
.text:000000000000FF51                 idiv    esi
.text:000000000000FF53                 test    edx, edx
.text:000000000000FF55                 jnz     loc_10125
.text:000000000000FF5B                 cmp     [rsp+158h+fd], 0Ah
.text:000000000000FF60                 jz      short loc_FF9D
.text:000000000000FF62                 mov     r8d, 9
.text:000000000000FF68                 mov     esi, 0Ah
.text:000000000000FF6D                 mov     edi, 0Ah
.text:000000000000FF72                 jmp     short loc_FF7D
.text:000000000000FF74 ; ---------------------------------------------------------------------------
.text:000000000000FF74
.text:000000000000FF74 loc_FF74:                               ; CODE XREF: utimecmpat+5E3↓j
.text:000000000000FF74                 imul    esi, 0Ah
.text:000000000000FF77                 cmp     esi, [rsp+158h+fd]
.text:000000000000FF7B                 jz      short loc_FF9D
.text:000000000000FF7D
.text:000000000000FF7D loc_FF7D:                               ; CODE XREF: utimecmpat+5C2↑j
.text:000000000000FF7D                 mov     eax, ecx
.text:000000000000FF7F                 cdq
.text:000000000000FF80                 idiv    edi
.text:000000000000FF82                 cdq
.text:000000000000FF83                 mov     ecx, eax
.text:000000000000FF85                 idiv    edi
.text:000000000000FF87                 test    edx, edx
.text:000000000000FF89                 jnz     loc_1011C
.text:000000000000FF8F                 sub     r8d, 1
.text:000000000000FF93                 jnz     short loc_FF74
.text:000000000000FF95                 mov     [rsp+158h+fd], 77359400h
.text:000000000000FF9D
.text:000000000000FF9D loc_FF9D:                               ; CODE XREF: utimecmpat+5B0↑j
.text:000000000000FF9D                                         ; utimecmpat+5CB↑j ...
.text:000000000000FF9D                 mov     esi, [rsp+158h+fd]
.text:000000000000FFA1                 xor     eax, eax
.text:000000000000FFA3                 cmp     esi, 77359400h
.text:000000000000FFA9                 mov     ebx, esi
.text:000000000000FFAB                 setz    al
.text:000000000000FFAE                 not     eax
.text:000000000000FFB0                 cdqe
.text:000000000000FFB2                 and     r12, rax
.text:000000000000FFB5                 mov     eax, r9d
.text:000000000000FFB8                 mov     r9d, r13d
.text:000000000000FFBB                 cdq
.text:000000000000FFBC                 idiv    esi
.text:000000000000FFBE                 sub     r9d, edx
.text:000000000000FFC1                 nop     dword ptr [rax+00000000h]
.text:000000000000FFC8
.text:000000000000FFC8 loc_FFC8:                               ; CODE XREF: utimecmpat+2C3↑j
.text:000000000000FFC8                 mov     rax, [rsp+158h+var_148]
.text:000000000000FFCD                 mov     [rax+8], ebx
.text:000000000000FFD0                 mov     byte ptr [rax+0Ch], 1
.text:000000000000FFD4                 jmp     loc_FAD8
.text:000000000000FFD4 ; ---------------------------------------------------------------------------
.text:000000000000FFD9                 align 20h
.text:000000000000FFE0
.text:000000000000FFE0 loc_FFE0:                               ; CODE XREF: utimecmpat+93↑j
.text:000000000000FFE0                 mov     r8, cs:free_ptr
.text:000000000000FFE7                 lea     rdx, dev_info_hash
.text:000000000000FFEE                 lea     rcx, dev_info_compare
.text:000000000000FFF5                 mov     qword ptr [rsp+158h+fd], rsi
.text:000000000000FFFA                 mov     edi, 10h
.text:000000000000FFFF                 xor     esi, esi
.text:0000000000010001                 mov     dword ptr [rsp+158h+var_140], r10d
.text:0000000000010006                 mov     dword ptr [rsp+158h+var_148], r13d
.text:000000000001000B                 call    hash_initialize
.text:0000000000010010                 test    rax, rax
.text:0000000000010013                 mov     rdx, rax
.text:0000000000010016                 mov     cs:ht_5307, rax
.text:000000000001001D                 mov     r9d, dword ptr [rsp+158h+var_148]
.text:0000000000010022                 mov     r10d, dword ptr [rsp+158h+var_140]
.text:0000000000010027                 mov     r11, qword ptr [rsp+158h+fd]
.text:000000000001002C                 jnz     loc_FA49
.text:0000000000010032
.text:0000000000010032 loc_10032:                              ; CODE XREF: utimecmpat+1E2↑j
.text:0000000000010032                 lea     rcx, [rsp+158h+var_108]
.text:0000000000010037                 jmp     loc_FBF0
.text:0000000000010037 ; ---------------------------------------------------------------------------
.text:000000000001003C                 align 20h
.text:0000000000010040
.text:0000000000010040 loc_10040:                              ; CODE XREF: utimecmpat+EB↑j
.text:0000000000010040                 mov     cs:new_dst_res_5308, 0
.text:000000000001004B                 jmp     loc_FAA1
.text:0000000000010050 ; ---------------------------------------------------------------------------
.text:0000000000010050
.text:0000000000010050 loc_10050:                              ; CODE XREF: utimecmpat+3BF↑j
.text:0000000000010050                                         ; utimecmpat+414↑j
.text:0000000000010050                 cmp     ebp, 77359400h
.text:0000000000010056                 mov     r12, qword ptr [rsp+158h+fd]
.text:000000000001005B                 mov     rsi, [rsp+158h+var_148]
.text:0000000000010060                 setz    byte ptr [rsp+158h+filename]
.text:0000000000010065                 movzx   eax, byte ptr [rsp+158h+filename]
.text:000000000001006A                 mov     [rsp+158h+fd], r9d
.text:000000000001006F                 mov     r14, [rsp+158h+var_118]
.text:0000000000010074                 mov     r9d, [rsp+158h+var_11C]
.text:0000000000010079                 mov     [rsi+8], ebp
.text:000000000001007C                 not     eax
.text:000000000001007E                 cdqe
.text:0000000000010080                 and     rax, r12
.text:0000000000010083                 jmp     loc_FE13
.text:0000000000010088 ; ---------------------------------------------------------------------------
.text:0000000000010088
.text:0000000000010088 loc_10088:                              ; CODE XREF: utimecmpat+44B↑j
.text:0000000000010088                 mov     dword ptr [rax+8], 77359400h
.text:000000000001008F                 mov     rax, r12
.text:0000000000010092                 mov     byte ptr [rsp+158h+filename], 1
.text:0000000000010097                 and     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001009B                 mov     [rsp+158h+fd], 77359400h
.text:00000000000100A3                 jmp     loc_FE13
.text:00000000000100A8 ; ---------------------------------------------------------------------------
.text:00000000000100A8
.text:00000000000100A8 loc_100A8:                              ; CODE XREF: utimecmpat+2E4↑j
.text:00000000000100A8                 mov     rax, [rsp+158h+var_148]
.text:00000000000100AD                 mov     [rsp+158h+fd], 0Ah
.text:00000000000100B5                 mov     dword ptr [rax+8], 0Ah
.text:00000000000100BC                 mov     rax, r12
.text:00000000000100BF                 jmp     loc_FE13
.text:00000000000100C4 ; ---------------------------------------------------------------------------
.text:00000000000100C4
.text:00000000000100C4 loc_100C4:                              ; CODE XREF: utimecmpat+35C↑j
.text:00000000000100C4                 mov     rax, [rsp+158h+var_148]
.text:00000000000100C9                 mov     dword ptr [rax+8], 0Ah
.text:00000000000100D0                 mov     rax, r12
.text:00000000000100D3                 jmp     loc_FE13
.text:00000000000100D8 ; ---------------------------------------------------------------------------
.text:00000000000100D8
.text:00000000000100D8 loc_100D8:                              ; CODE XREF: utimecmpat+152↑j
.text:00000000000100D8                 call    ___stack_chk_fail
.text:00000000000100DD ; ---------------------------------------------------------------------------
.text:00000000000100DD
.text:00000000000100DD loc_100DD:                              ; CODE XREF: utimecmpat+57C↑j
.text:00000000000100DD                 mov     [rsp+158h+var_E0], rdx
.text:00000000000100E2                 mov     ecx, 100h       ; flags
.text:00000000000100E7                 mov     rdx, rbp        ; times
.text:00000000000100EA                 mov     rsi, r11        ; path
.text:00000000000100ED                 mov     edi, r10d       ; fd
.text:00000000000100F0                 mov     dword ptr [rsp+158h+filename], r8d
.text:00000000000100F5                 mov     [rsp+158h+fildes], r9d
.text:00000000000100FA                 mov     [rsp+158h+var_E8], r14
.text:00000000000100FF                 call    _utimensat
.text:0000000000010104                 mov     r8d, dword ptr [rsp+158h+filename]
.text:0000000000010109                 mov     r9d, [rsp+158h+fildes]
.text:000000000001010E                 test    r8d, r8d
.text:0000000000010111                 jnz     loc_FEC1
.text:0000000000010117                 jmp     loc_FF32
.text:000000000001011C ; ---------------------------------------------------------------------------
.text:000000000001011C
.text:000000000001011C loc_1011C:                              ; CODE XREF: utimecmpat+5D9↑j
.text:000000000001011C                 mov     [rsp+158h+fd], esi
.text:0000000000010120                 jmp     loc_FF9D
.text:0000000000010125 ; ---------------------------------------------------------------------------
.text:0000000000010125
.text:0000000000010125 loc_10125:                              ; CODE XREF: utimecmpat+5A5↑j
.text:0000000000010125                 mov     [rsp+158h+fd], ebx
.text:0000000000010129                 jmp     loc_FF9D
.text:0000000000010129 ; } // starts at F9B0
.text:0000000000010129 utimecmpat      endp
.text:0000000000010129
.text:0000000000010129 ; ---------------------------------------------------------------------------
.text:000000000001012E                 align 10h
.text:0000000000010130
.text:0000000000010130 ; =============== S U B R O U T I N E =======================================
.text:0000000000010130
.text:0000000000010130
.text:0000000000010130                 public utimecmp
.text:0000000000010130 utimecmp        proc near               ; CODE XREF: copy_internal+28B↑p
.text:0000000000010130 ; __unwind {
.text:0000000000010130                 mov     r8d, ecx
.text:0000000000010133                 mov     rcx, rdx
.text:0000000000010136                 mov     rdx, rsi
.text:0000000000010139                 mov     rsi, rdi
.text:000000000001013C                 mov     edi, 0FFFFFF9Ch
.text:0000000000010141                 jmp     utimecmpat
.text:0000000000010141 ; } // starts at 10130
.text:0000000000010141 utimecmp        endp
.text:0000000000010141
.text:0000000000010141 ; ---------------------------------------------------------------------------
.text:0000000000010146                 align 10h
.text:0000000000010150
.text:0000000000010150 ; =============== S U B R O U T I N E =======================================
.text:0000000000010150
.text:0000000000010150
.text:0000000000010150 update_timespec proc near               ; CODE XREF: fdutimens+264↓p
.text:0000000000010150                                         ; lutimens+C5↓p
.text:0000000000010150
.text:0000000000010150 var_19          = byte ptr -19h
.text:0000000000010150
.text:0000000000010150 ; __unwind {
.text:0000000000010150                 push    rbp
.text:0000000000010151                 push    rbx
.text:0000000000010152                 mov     rbp, rdi
.text:0000000000010155                 sub     rsp, 18h
.text:0000000000010159                 mov     rbx, [rsi]
.text:000000000001015C                 mov     rax, [rbx+8]
.text:0000000000010160                 mov     rdx, [rbx+18h]
.text:0000000000010164                 cmp     rax, 3FFFFFFEh
.text:000000000001016A                 jz      short loc_101D0
.text:000000000001016C                 cmp     rax, 3FFFFFFFh
.text:0000000000010172                 jz      short loc_10190
.text:0000000000010174                 cmp     rdx, 3FFFFFFEh
.text:000000000001017B                 jz      short loc_101AE
.text:000000000001017D
.text:000000000001017D loc_1017D:                              ; CODE XREF: update_timespec+5C↓j
.text:000000000001017D                 xor     eax, eax
.text:000000000001017F                 cmp     rdx, 3FFFFFFFh
.text:0000000000010186                 jz      short loc_101F8
.text:0000000000010188
.text:0000000000010188 loc_10188:                              ; CODE XREF: update_timespec+8C↓j
.text:0000000000010188                                         ; update_timespec+A6↓j ...
.text:0000000000010188                 add     rsp, 18h
.text:000000000001018C                 pop     rbx
.text:000000000001018D                 pop     rbp
.text:000000000001018E                 retn
.text:000000000001018E ; ---------------------------------------------------------------------------
.text:000000000001018F                 align 10h
.text:0000000000010190
.text:0000000000010190 loc_10190:                              ; CODE XREF: update_timespec+22↑j
.text:0000000000010190                 cmp     rdx, 3FFFFFFFh
.text:0000000000010197                 jz      short loc_10218
.text:0000000000010199                 mov     rdi, rbx        ; tp
.text:000000000001019C                 call    gettime
.text:00000000000101A1                 mov     rdx, [rbx+18h]
.text:00000000000101A5                 cmp     rdx, 3FFFFFFEh
.text:00000000000101AC                 jnz     short loc_1017D
.text:00000000000101AE
.text:00000000000101AE loc_101AE:                              ; CODE XREF: update_timespec+2B↑j
.text:00000000000101AE                 mov     rax, [rbp+60h]
.text:00000000000101B2                 mov     rdx, [rbp+58h]
.text:00000000000101B6                 mov     [rbx+18h], rax
.text:00000000000101BA                 mov     [rbx+10h], rdx
.text:00000000000101BE                 add     rsp, 18h
.text:00000000000101C2                 xor     eax, eax
.text:00000000000101C4                 pop     rbx
.text:00000000000101C5                 pop     rbp
.text:00000000000101C6                 retn
.text:00000000000101C6 ; ---------------------------------------------------------------------------
.text:00000000000101C7                 align 10h
.text:00000000000101D0
.text:00000000000101D0 loc_101D0:                              ; CODE XREF: update_timespec+1A↑j
.text:00000000000101D0                 cmp     rdx, 3FFFFFFEh
.text:00000000000101D7                 mov     eax, 1
.text:00000000000101DC                 jz      short loc_10188
.text:00000000000101DE                 mov     rax, [rdi+50h]
.text:00000000000101E2                 mov     rcx, [rdi+48h]
.text:00000000000101E6                 mov     [rbx+8], rax
.text:00000000000101EA                 xor     eax, eax
.text:00000000000101EC                 cmp     rdx, 3FFFFFFFh
.text:00000000000101F3                 mov     [rbx], rcx
.text:00000000000101F6                 jnz     short loc_10188
.text:00000000000101F8
.text:00000000000101F8 loc_101F8:                              ; CODE XREF: update_timespec+36↑j
.text:00000000000101F8                 lea     rdi, [rbx+10h]  ; tp
.text:00000000000101FC                 mov     [rsp+28h+var_19], al
.text:0000000000010200                 call    gettime
.text:0000000000010205                 movzx   eax, [rsp+28h+var_19]
.text:000000000001020A                 add     rsp, 18h
.text:000000000001020E                 pop     rbx
.text:000000000001020F                 pop     rbp
.text:0000000000010210                 retn
.text:0000000000010210 ; ---------------------------------------------------------------------------
.text:0000000000010211                 align 8
.text:0000000000010218
.text:0000000000010218 loc_10218:                              ; CODE XREF: update_timespec+47↑j
.text:0000000000010218                 mov     qword ptr [rsi], 0
.text:000000000001021F                 xor     eax, eax
.text:0000000000010221                 jmp     loc_10188
.text:0000000000010221 ; } // starts at 10150
.text:0000000000010221 update_timespec endp
.text:0000000000010221
.text:0000000000010221 ; ---------------------------------------------------------------------------
.text:0000000000010226                 align 10h
.text:0000000000010230
.text:0000000000010230 ; =============== S U B R O U T I N E =======================================
.text:0000000000010230
.text:0000000000010230
.text:0000000000010230 validate_timespec proc near             ; CODE XREF: fdutimens+4D↓p
.text:0000000000010230                                         ; lutimens+47↓p
.text:0000000000010230 ; __unwind {
.text:0000000000010230                 mov     r9, [rdi+8]
.text:0000000000010234                 lea     rcx, [r9-3FFFFFFEh]
.text:000000000001023B                 cmp     rcx, 1
.text:000000000001023F                 jbe     short loc_1024A
.text:0000000000010241                 cmp     r9, 3B9AC9FFh
.text:0000000000010248                 ja      short loc_102C0
.text:000000000001024A
.text:000000000001024A loc_1024A:                              ; CODE XREF: validate_timespec+F↑j
.text:000000000001024A                 mov     rdx, [rdi+18h]
.text:000000000001024E                 lea     r8, [rdx-3FFFFFFEh]
.text:0000000000010255                 cmp     r8, 1
.text:0000000000010259                 jbe     short loc_10264
.text:000000000001025B                 cmp     rdx, 3B9AC9FFh
.text:0000000000010262                 ja      short loc_102C0
.text:0000000000010264
.text:0000000000010264 loc_10264:                              ; CODE XREF: validate_timespec+29↑j
.text:0000000000010264                 xor     esi, esi
.text:0000000000010266                 xor     r10d, r10d
.text:0000000000010269                 cmp     rcx, 1
.text:000000000001026D                 ja      short loc_10289
.text:000000000001026F                 xor     esi, esi
.text:0000000000010271                 cmp     r9, 3FFFFFFEh
.text:0000000000010278                 mov     qword ptr [rdi], 0
.text:000000000001027F                 setz    sil
.text:0000000000010283                 mov     r10d, 1
.text:0000000000010289
.text:0000000000010289 loc_10289:                              ; CODE XREF: validate_timespec+3D↑j
.text:0000000000010289                 cmp     r8, 1
.text:000000000001028D                 ja      short loc_102AB
.text:000000000001028F                 xor     eax, eax
.text:0000000000010291                 cmp     rdx, 3FFFFFFEh
.text:0000000000010298                 mov     qword ptr [rdi+10h], 0
.text:00000000000102A0                 setz    al
.text:00000000000102A3                 mov     r10d, 1
.text:00000000000102A9                 add     esi, eax
.text:00000000000102AB
.text:00000000000102AB loc_102AB:                              ; CODE XREF: validate_timespec+5D↑j
.text:00000000000102AB                 xor     eax, eax
.text:00000000000102AD                 cmp     esi, 1
.text:00000000000102B0                 setz    al
.text:00000000000102B3                 add     eax, r10d
.text:00000000000102B6                 retn
.text:00000000000102B6 ; ---------------------------------------------------------------------------
.text:00000000000102B7                 align 20h
.text:00000000000102C0
.text:00000000000102C0 loc_102C0:                              ; CODE XREF: validate_timespec+18↑j
.text:00000000000102C0                                         ; validate_timespec+32↑j
.text:00000000000102C0                 sub     rsp, 8
.text:00000000000102C4                 call    ___errno_location
.text:00000000000102C9                 mov     dword ptr [rax], 16h
.text:00000000000102CF                 mov     eax, 0FFFFFFFFh
.text:00000000000102D4                 add     rsp, 8
.text:00000000000102D8                 retn
.text:00000000000102D8 ; } // starts at 10230
.text:00000000000102D8 validate_timespec endp
.text:00000000000102D8
.text:00000000000102D8 ; ---------------------------------------------------------------------------
.text:00000000000102D9                 align 20h
.text:00000000000102E0
.text:00000000000102E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000102E0
.text:00000000000102E0
.text:00000000000102E0                 public lutimensat
.text:00000000000102E0 lutimensat      proc near
.text:00000000000102E0 ; __unwind {
.text:00000000000102E0                 mov     ecx, 100h       ; flags
.text:00000000000102E5                 jmp     _utimensat
.text:00000000000102E5 ; } // starts at 102E0
.text:00000000000102E5 lutimensat      endp
.text:00000000000102E5
.text:00000000000102E5 ; ---------------------------------------------------------------------------
.text:00000000000102EA                 align 10h
.text:00000000000102F0
.text:00000000000102F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000102F0
.text:00000000000102F0 ; Attributes: info_from_lumina
.text:00000000000102F0
.text:00000000000102F0 ; __int64 __fastcall fdutimens(int fildes, char *path)
.text:00000000000102F0                 public fdutimens
.text:00000000000102F0 fdutimens       proc near               ; CODE XREF: copy_internal+3A12↑p
.text:00000000000102F0                                         ; utimens+B↓j ...
.text:00000000000102F0
.text:00000000000102F0 times           = qword ptr -130h
.text:00000000000102F0 var_128         = xmmword ptr -128h
.text:00000000000102F0 var_118         = xmmword ptr -118h
.text:00000000000102F0 tvp             = timeval ptr -108h
.text:00000000000102F0 var_F8          = qword ptr -0F8h
.text:00000000000102F0 var_F0          = qword ptr -0F0h
.text:00000000000102F0 var_E8          = timeval ptr -0E8h
.text:00000000000102F0 var_D8          = xmmword ptr -0D8h
.text:00000000000102F0 stat_buf        = stat ptr -0C8h
.text:00000000000102F0 var_30          = qword ptr -30h
.text:00000000000102F0
.text:00000000000102F0 ; __unwind {
.text:00000000000102F0                 push    r14
.text:00000000000102F2                 push    r13
.text:00000000000102F4                 push    r12
.text:00000000000102F6                 push    rbp
.text:00000000000102F7                 mov     r12, rsi
.text:00000000000102FA                 push    rbx
.text:00000000000102FB                 mov     ebx, edi
.text:00000000000102FD                 sub     rsp, 110h
.text:0000000000010304                 mov     rax, fs:28h
.text:000000000001030D                 mov     [rsp+138h+var_30], rax
.text:0000000000010315                 xor     eax, eax
.text:0000000000010317                 test    rdx, rdx
.text:000000000001031A                 jz      loc_105E0
.text:0000000000010320                 movdqu  xmm0, xmmword ptr [rdx]
.text:0000000000010324                 lea     rdi, [rsp+138h+var_128]
.text:0000000000010329                 movaps  [rsp+138h+var_128], xmm0
.text:000000000001032E                 mov     [rsp+138h+times], rdi
.text:0000000000010333                 movdqu  xmm0, xmmword ptr [rdx+10h]
.text:0000000000010338                 movaps  [rsp+138h+var_118], xmm0
.text:000000000001033D                 call    validate_timespec
.text:0000000000010342                 test    eax, eax
.text:0000000000010344                 mov     r13d, eax
.text:0000000000010347                 js      loc_10703
.text:000000000001034D
.text:000000000001034D loc_1034D:                              ; CODE XREF: fdutimens+2FC↓j
.text:000000000001034D                 test    ebx, ebx
.text:000000000001034F                 jns     short loc_1035A
.text:0000000000010351                 test    r12, r12
.text:0000000000010354                 jz      loc_106F8
.text:000000000001035A
.text:000000000001035A loc_1035A:                              ; CODE XREF: fdutimens+5F↑j
.text:000000000001035A                 mov     eax, cs:utimensat_works_really
.text:0000000000010360                 test    eax, eax
.text:0000000000010362                 js      short loc_10398
.text:0000000000010364                 cmp     r13d, 2
.text:0000000000010368                 jz      loc_10570
.text:000000000001036E                 mov     rsi, [rsp+138h+times] ; times
.text:0000000000010373
.text:0000000000010373 loc_10373:                              ; CODE XREF: fdutimens+2C7↓j
.text:0000000000010373                                         ; fdutimens+2E5↓j ...
.text:0000000000010373                 test    ebx, ebx
.text:0000000000010375                 js      loc_106A0
.text:000000000001037B                 mov     edi, ebx        ; fd
.text:000000000001037D                 call    _futimens       ; PIC mode
.text:0000000000010382                 cmp     eax, 0
.text:0000000000010385                 mov     ebp, eax
.text:0000000000010387                 jle     loc_106BD
.text:000000000001038D
.text:000000000001038D loc_1038D:                              ; CODE XREF: fdutimens+3C7↓j
.text:000000000001038D                 call    ___errno_location ; PIC mode
.text:0000000000010392                 mov     dword ptr [rax], 26h ; '&'
.text:0000000000010398
.text:0000000000010398 loc_10398:                              ; CODE XREF: fdutimens+72↑j
.text:0000000000010398                                         ; fdutimens+459↓j
.text:0000000000010398                 test    r13d, r13d
.text:000000000001039B                 mov     cs:utimensat_works_really, 0FFFFFFFFh
.text:00000000000103A5                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:00000000000103AF                 jnz     loc_10510
.text:00000000000103B5
.text:00000000000103B5 loc_103B5:                              ; CODE XREF: fdutimens+26B↓j
.text:00000000000103B5                 mov     rsi, [rsp+138h+times]
.text:00000000000103BA                 test    rsi, rsi
.text:00000000000103BD                 jz      loc_10650
.text:00000000000103C3                 mov     rax, [rsi]
.text:00000000000103C6                 mov     rdi, [rsi+8]
.text:00000000000103CA                 mov     rcx, 20C49BA5E353F7CFh
.text:00000000000103D4                 lea     r13, [rsp+138h+tvp]
.text:00000000000103D9                 mov     [rsp+138h+tvp.tv_sec], rax
.text:00000000000103DE                 mov     rax, rdi
.text:00000000000103E1                 sar     rdi, 3Fh
.text:00000000000103E5                 imul    rcx
.text:00000000000103E8                 mov     rax, [rsi+10h]
.text:00000000000103EC                 mov     rsi, [rsi+18h]
.text:00000000000103F0                 mov     [rsp+138h+var_F8], rax
.text:00000000000103F5                 mov     rax, rsi
.text:00000000000103F8                 sar     rsi, 3Fh
.text:00000000000103FC                 sar     rdx, 7
.text:0000000000010400                 sub     rdx, rdi
.text:0000000000010403                 mov     [rsp+138h+tvp.tv_usec], rdx
.text:0000000000010408                 imul    rcx
.text:000000000001040B                 mov     rcx, rdx
.text:000000000001040E                 sar     rcx, 7
.text:0000000000010412                 sub     rcx, rsi
.text:0000000000010415                 mov     [rsp+138h+var_F0], rcx
.text:000000000001041A
.text:000000000001041A loc_1041A:                              ; CODE XREF: fdutimens+363↓j
.text:000000000001041A                 test    ebx, ebx
.text:000000000001041C                 mov     rdx, r13        ; tvp
.text:000000000001041F                 js      loc_105F8
.text:0000000000010425                 xor     esi, esi        ; file
.text:0000000000010427                 mov     edi, ebx        ; fd
.text:0000000000010429                 call    _futimesat      ; PIC mode
.text:000000000001042E                 test    eax, eax
.text:0000000000010430                 mov     ebp, eax
.text:0000000000010432                 jnz     loc_10630
.text:0000000000010438                 test    r13, r13
.text:000000000001043B                 jz      loc_10607
.text:0000000000010441                 cmp     qword ptr [r13+8], 7A11Fh
.text:0000000000010449                 setnle  r12b
.text:000000000001044D                 cmp     qword ptr [r13+18h], 7A11Fh
.text:0000000000010455                 setnle  r14b
.text:0000000000010459                 test    r12b, r12b
.text:000000000001045C                 jnz     short loc_10467
.text:000000000001045E                 test    r14b, r14b
.text:0000000000010461                 jz      loc_10607
.text:0000000000010467
.text:0000000000010467 loc_10467:                              ; CODE XREF: fdutimens+16C↑j
.text:0000000000010467                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:000000000001046C                 mov     esi, ebx        ; fildes
.text:000000000001046E                 mov     edi, 1          ; ver
.text:0000000000010473                 call    ___fxstat       ; PIC mode
.text:0000000000010478                 test    eax, eax
.text:000000000001047A                 jnz     loc_10607
.text:0000000000010480                 mov     rdx, [rsp+138h+stat_buf.st_mtim.tv_sec]
.text:0000000000010488                 sub     rdx, [r13+10h]
.text:000000000001048C                 mov     rax, [rsp+138h+stat_buf.st_atim.tv_sec]
.text:0000000000010494                 sub     rax, [r13+0]
.text:0000000000010498                 movdqa  xmm0, xmmword ptr [r13+0]
.text:000000000001049E                 cmp     rdx, 1
.text:00000000000104A2                 setz    dl
.text:00000000000104A5                 movaps  xmmword ptr [rsp+138h+var_E8.tv_sec], xmm0
.text:00000000000104AA                 and     r14d, edx
.text:00000000000104AD                 cmp     rax, 1
.text:00000000000104B1                 movdqa  xmm0, xmmword ptr [r13+10h]
.text:00000000000104B7                 movaps  [rsp+138h+var_D8], xmm0
.text:00000000000104BC                 jnz     loc_10710
.text:00000000000104C2                 test    r12b, r12b
.text:00000000000104C5                 jz      loc_10710
.text:00000000000104CB                 cmp     [rsp+138h+stat_buf.st_atim.tv_nsec], 0
.text:00000000000104D4                 jnz     loc_10710
.text:00000000000104DA                 test    r14b, r14b
.text:00000000000104DD                 mov     [rsp+138h+var_E8.tv_usec], 0
.text:00000000000104E6                 jz      short loc_104F7
.text:00000000000104E8                 cmp     [rsp+138h+stat_buf.st_mtim.tv_nsec], 0
.text:00000000000104F1                 jz      loc_10728
.text:00000000000104F7
.text:00000000000104F7 loc_104F7:                              ; CODE XREF: fdutimens+1F6↑j
.text:00000000000104F7                                         ; fdutimens+441↓j
.text:00000000000104F7                 lea     rdx, [rsp+138h+var_E8] ; tvp
.text:00000000000104FC                 xor     esi, esi        ; file
.text:00000000000104FE                 mov     edi, ebx        ; fd
.text:0000000000010500                 call    _futimesat      ; PIC mode
.text:0000000000010505
.text:0000000000010505 loc_10505:                              ; CODE XREF: fdutimens+423↓j
.text:0000000000010505                                         ; fdutimens+432↓j
.text:0000000000010505                 xor     ebp, ebp
.text:0000000000010507                 jmp     loc_10607
.text:0000000000010507 ; ---------------------------------------------------------------------------
.text:000000000001050C                 align 10h
.text:0000000000010510
.text:0000000000010510 loc_10510:                              ; CODE XREF: fdutimens+BF↑j
.text:0000000000010510                 cmp     r13d, 3
.text:0000000000010514                 jz      short loc_1053C
.text:0000000000010516                 test    ebx, ebx
.text:0000000000010518                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:000000000001051D                 js      loc_10660
.text:0000000000010523                 mov     esi, ebx        ; fildes
.text:0000000000010525                 mov     edi, 1          ; ver
.text:000000000001052A                 call    ___fxstat       ; PIC mode
.text:000000000001052F                 test    eax, eax
.text:0000000000010531                 setnz   al
.text:0000000000010534
.text:0000000000010534 loc_10534:                              ; CODE XREF: fdutimens+382↓j
.text:0000000000010534                 test    al, al
.text:0000000000010536                 jnz     loc_10703
.text:000000000001053C
.text:000000000001053C loc_1053C:                              ; CODE XREF: fdutimens+224↑j
.text:000000000001053C                 cmp     [rsp+138h+times], 0
.text:0000000000010542                 jz      loc_10650
.text:0000000000010548                 lea     rsi, [rsp+138h+times]
.text:000000000001054D                 lea     rdi, [rsp+138h+stat_buf]
.text:0000000000010552                 xor     ebp, ebp
.text:0000000000010554                 call    update_timespec
.text:0000000000010559                 test    al, al
.text:000000000001055B                 jz      loc_103B5
.text:0000000000010561                 jmp     loc_10607
.text:0000000000010561 ; ---------------------------------------------------------------------------
.text:0000000000010566                 align 10h
.text:0000000000010570
.text:0000000000010570 loc_10570:                              ; CODE XREF: fdutimens+78↑j
.text:0000000000010570                 test    ebx, ebx
.text:0000000000010572                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:0000000000010577                 js      loc_10680
.text:000000000001057D                 mov     esi, ebx        ; fildes
.text:000000000001057F                 mov     edi, 1          ; ver
.text:0000000000010584                 call    ___fxstat       ; PIC mode
.text:0000000000010589                 test    eax, eax
.text:000000000001058B                 setnz   al
.text:000000000001058E
.text:000000000001058E loc_1058E:                              ; CODE XREF: fdutimens+3A2↓j
.text:000000000001058E                 test    al, al
.text:0000000000010590                 jnz     loc_10703
.text:0000000000010596                 mov     rsi, [rsp+138h+times]
.text:000000000001059B                 cmp     qword ptr [rsi+8], 3FFFFFFEh
.text:00000000000105A3                 jz      loc_106D0
.text:00000000000105A9                 cmp     qword ptr [rsi+18h], 3FFFFFFEh
.text:00000000000105B1                 mov     r13d, 3
.text:00000000000105B7                 jnz     loc_10373
.text:00000000000105BD                 mov     rax, [rsp+138h+stat_buf.st_mtim.tv_nsec]
.text:00000000000105C5                 mov     rdx, [rsp+138h+stat_buf.st_mtim.tv_sec]
.text:00000000000105CD                 mov     [rsi+18h], rax
.text:00000000000105D1                 mov     [rsi+10h], rdx
.text:00000000000105D5                 jmp     loc_10373
.text:00000000000105D5 ; ---------------------------------------------------------------------------
.text:00000000000105DA                 align 20h
.text:00000000000105E0
.text:00000000000105E0 loc_105E0:                              ; CODE XREF: fdutimens+2A↑j
.text:00000000000105E0                 mov     [rsp+138h+times], 0
.text:00000000000105E9                 xor     r13d, r13d
.text:00000000000105EC                 jmp     loc_1034D
.text:00000000000105EC ; ---------------------------------------------------------------------------
.text:00000000000105F1                 align 8
.text:00000000000105F8
.text:00000000000105F8 loc_105F8:                              ; CODE XREF: fdutimens+12F↑j
.text:00000000000105F8                 mov     rsi, r12        ; file
.text:00000000000105FB                 mov     edi, 0FFFFFF9Ch ; fd
.text:0000000000010600                 call    _futimesat      ; PIC mode
.text:0000000000010605                 mov     ebp, eax
.text:0000000000010607
.text:0000000000010607 loc_10607:                              ; CODE XREF: fdutimens+14B↑j
.text:0000000000010607                                         ; fdutimens+171↑j ...
.text:0000000000010607                 mov     rcx, [rsp+138h+var_30]
.text:000000000001060F                 xor     rcx, fs:28h
.text:0000000000010618                 mov     eax, ebp
.text:000000000001061A                 jnz     loc_10736
.text:0000000000010620                 add     rsp, 110h
.text:0000000000010627                 pop     rbx
.text:0000000000010628                 pop     rbp
.text:0000000000010629                 pop     r12
.text:000000000001062B                 pop     r13
.text:000000000001062D                 pop     r14
.text:000000000001062F                 retn
.text:0000000000010630 ; ---------------------------------------------------------------------------
.text:0000000000010630
.text:0000000000010630 loc_10630:                              ; CODE XREF: fdutimens+142↑j
.text:0000000000010630                 test    r12, r12
.text:0000000000010633                 mov     ebp, 0FFFFFFFFh
.text:0000000000010638                 jz      short loc_10607
.text:000000000001063A                 mov     rsi, r13        ; tvp
.text:000000000001063D                 mov     rdi, r12        ; file
.text:0000000000010640                 call    _utimes         ; PIC mode
.text:0000000000010645                 mov     ebp, eax
.text:0000000000010647                 jmp     short loc_10607
.text:0000000000010647 ; ---------------------------------------------------------------------------
.text:0000000000010649                 align 10h
.text:0000000000010650
.text:0000000000010650 loc_10650:                              ; CODE XREF: fdutimens+CD↑j
.text:0000000000010650                                         ; fdutimens+252↑j
.text:0000000000010650                 xor     r13d, r13d
.text:0000000000010653                 jmp     loc_1041A
.text:0000000000010653 ; ---------------------------------------------------------------------------
.text:0000000000010658                 align 20h
.text:0000000000010660
.text:0000000000010660 loc_10660:                              ; CODE XREF: fdutimens+22D↑j
.text:0000000000010660                 mov     rsi, r12        ; filename
.text:0000000000010663                 mov     edi, 1          ; ver
.text:0000000000010668                 call    ___xstat        ; PIC mode
.text:000000000001066D                 test    eax, eax
.text:000000000001066F                 setnz   al
.text:0000000000010672                 jmp     loc_10534
.text:0000000000010672 ; ---------------------------------------------------------------------------
.text:0000000000010677                 align 20h
.text:0000000000010680
.text:0000000000010680 loc_10680:                              ; CODE XREF: fdutimens+287↑j
.text:0000000000010680                 mov     rsi, r12        ; filename
.text:0000000000010683                 mov     edi, 1          ; ver
.text:0000000000010688                 call    ___xstat        ; PIC mode
.text:000000000001068D                 test    eax, eax
.text:000000000001068F                 setnz   al
.text:0000000000010692                 jmp     loc_1058E
.text:0000000000010692 ; ---------------------------------------------------------------------------
.text:0000000000010697                 align 20h
.text:00000000000106A0
.text:00000000000106A0 loc_106A0:                              ; CODE XREF: fdutimens+85↑j
.text:00000000000106A0                 xor     ecx, ecx        ; flags
.text:00000000000106A2                 mov     rdx, rsi        ; times
.text:00000000000106A5                 mov     edi, 0FFFFFF9Ch ; fd
.text:00000000000106AA                 mov     rsi, r12        ; path
.text:00000000000106AD                 call    _utimensat      ; PIC mode
.text:00000000000106B2                 cmp     eax, 0
.text:00000000000106B5                 mov     ebp, eax
.text:00000000000106B7                 jg      loc_1038D
.text:00000000000106BD
.text:00000000000106BD loc_106BD:                              ; CODE XREF: fdutimens+97↑j
.text:00000000000106BD                 jnz     short loc_1073B
.text:00000000000106BF
.text:00000000000106BF loc_106BF:                              ; CODE XREF: fdutimens+453↓j
.text:00000000000106BF                 mov     cs:utimensat_works_really, 1
.text:00000000000106C9                 jmp     loc_10607
.text:00000000000106C9 ; ---------------------------------------------------------------------------
.text:00000000000106CE                 align 10h
.text:00000000000106D0
.text:00000000000106D0 loc_106D0:                              ; CODE XREF: fdutimens+2B3↑j
.text:00000000000106D0                 mov     rax, [rsp+138h+stat_buf.st_atim.tv_nsec]
.text:00000000000106D8                 mov     rdx, [rsp+138h+stat_buf.st_atim.tv_sec]
.text:00000000000106E0                 mov     r13d, 3
.text:00000000000106E6                 mov     [rsi], rdx
.text:00000000000106E9                 mov     [rsi+8], rax
.text:00000000000106ED                 jmp     loc_10373
.text:00000000000106ED ; ---------------------------------------------------------------------------
.text:00000000000106F2                 align 8
.text:00000000000106F8
.text:00000000000106F8 loc_106F8:                              ; CODE XREF: fdutimens+64↑j
.text:00000000000106F8                 call    ___errno_location ; PIC mode
.text:00000000000106FD                 mov     dword ptr [rax], 9
.text:0000000000010703
.text:0000000000010703 loc_10703:                              ; CODE XREF: fdutimens+57↑j
.text:0000000000010703                                         ; fdutimens+246↑j ...
.text:0000000000010703                 mov     ebp, 0FFFFFFFFh
.text:0000000000010708                 jmp     loc_10607
.text:0000000000010708 ; ---------------------------------------------------------------------------
.text:000000000001070D                 align 10h
.text:0000000000010710
.text:0000000000010710 loc_10710:                              ; CODE XREF: fdutimens+1CC↑j
.text:0000000000010710                                         ; fdutimens+1D5↑j ...
.text:0000000000010710                 test    r14b, r14b
.text:0000000000010713                 jz      loc_10505
.text:0000000000010719                 cmp     [rsp+138h+stat_buf.st_mtim.tv_nsec], 0
.text:0000000000010722                 jnz     loc_10505
.text:0000000000010728
.text:0000000000010728 loc_10728:                              ; CODE XREF: fdutimens+201↑j
.text:0000000000010728                 mov     qword ptr [rsp+138h+var_D8+8], 0
.text:0000000000010731                 jmp     loc_104F7
.text:0000000000010736 ; ---------------------------------------------------------------------------
.text:0000000000010736
.text:0000000000010736 loc_10736:                              ; CODE XREF: fdutimens+32A↑j
.text:0000000000010736                 call    ___stack_chk_fail ; PIC mode
.text:000000000001073B ; ---------------------------------------------------------------------------
.text:000000000001073B
.text:000000000001073B loc_1073B:                              ; CODE XREF: fdutimens:loc_106BD↑j
.text:000000000001073B                 call    ___errno_location ; PIC mode
.text:0000000000010740                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000010743                 jnz     loc_106BF
.text:0000000000010749                 jmp     loc_10398
.text:0000000000010749 ; } // starts at 102F0
.text:0000000000010749 fdutimens       endp
.text:0000000000010749
.text:0000000000010749 ; ---------------------------------------------------------------------------
.text:000000000001074E                 align 10h
.text:0000000000010750
.text:0000000000010750 ; =============== S U B R O U T I N E =======================================
.text:0000000000010750
.text:0000000000010750
.text:0000000000010750 ; __int64 __fastcall utimens(char *path)
.text:0000000000010750                 public utimens
.text:0000000000010750 utimens         proc near               ; CODE XREF: re_protect+EB↑p
.text:0000000000010750                                         ; copy_internal:loc_80A0↑p
.text:0000000000010750 ; __unwind {
.text:0000000000010750                 mov     rdx, rsi
.text:0000000000010753                 mov     rsi, rdi        ; path
.text:0000000000010756                 mov     edi, 0FFFFFFFFh ; fildes
.text:000000000001075B                 jmp     fdutimens
.text:000000000001075B ; } // starts at 10750
.text:000000000001075B utimens         endp
.text:000000000001075B
.text:0000000000010760
.text:0000000000010760 ; =============== S U B R O U T I N E =======================================
.text:0000000000010760
.text:0000000000010760 ; Attributes: info_from_lumina
.text:0000000000010760
.text:0000000000010760 ; int __fastcall lutimens(const char *file, const timespec *timespec)
.text:0000000000010760                 public lutimens
.text:0000000000010760 lutimens        proc near               ; CODE XREF: copy_internal+677↑p
.text:0000000000010760
.text:0000000000010760 times           = qword ptr -0E0h
.text:0000000000010760 var_D8          = xmmword ptr -0D8h
.text:0000000000010760 var_C8          = xmmword ptr -0C8h
.text:0000000000010760 stat_buf        = stat ptr -0B8h
.text:0000000000010760 var_20          = qword ptr -20h
.text:0000000000010760
.text:0000000000010760 ; __unwind {
.text:0000000000010760                 push    r12
.text:0000000000010762                 push    rbp
.text:0000000000010763                 mov     r12, rdi
.text:0000000000010766                 push    rbx
.text:0000000000010767                 sub     rsp, 0D0h
.text:000000000001076E                 mov     rax, fs:28h
.text:0000000000010777                 mov     [rsp+0E8h+var_20], rax
.text:000000000001077F                 xor     eax, eax
.text:0000000000010781                 test    rsi, rsi
.text:0000000000010784                 jz      loc_10880
.text:000000000001078A                 movdqu  xmm0, xmmword ptr [rsi]
.text:000000000001078E                 lea     rdi, [rsp+0E8h+var_D8]
.text:0000000000010793                 movaps  [rsp+0E8h+var_D8], xmm0
.text:0000000000010798                 mov     [rsp+0E8h+times], rdi
.text:000000000001079D                 movdqu  xmm0, xmmword ptr [rsi+10h]
.text:00000000000107A2                 movaps  [rsp+0E8h+var_C8], xmm0
.text:00000000000107A7                 call    validate_timespec
.text:00000000000107AC                 test    eax, eax
.text:00000000000107AE                 mov     ebx, eax
.text:00000000000107B0                 js      loc_108C0
.text:00000000000107B6                 mov     eax, cs:lutimensat_works_really
.text:00000000000107BC                 test    eax, eax
.text:00000000000107BE                 js      short loc_107F6
.text:00000000000107C0                 cmp     ebx, 2
.text:00000000000107C3                 jz      loc_108F0
.text:00000000000107C9                 mov     rdx, [rsp+0E8h+times] ; times
.text:00000000000107CE
.text:00000000000107CE loc_107CE:                              ; CODE XREF: lutimens+135↓j
.text:00000000000107CE                                         ; lutimens+1C2↓j ...
.text:00000000000107CE                 mov     ecx, 100h       ; flags
.text:00000000000107D3                 mov     rsi, r12        ; path
.text:00000000000107D6                 mov     edi, 0FFFFFF9Ch ; fd
.text:00000000000107DB                 call    _utimensat
.text:00000000000107E0                 cmp     eax, 0
.text:00000000000107E3                 mov     ebp, eax
.text:00000000000107E5                 jle     loc_108D0
.text:00000000000107EB                 call    ___errno_location
.text:00000000000107F0                 mov     dword ptr [rax], 26h ; '&'
.text:00000000000107F6
.text:00000000000107F6 loc_107F6:                              ; CODE XREF: lutimens+5E↑j
.text:00000000000107F6                                         ; lutimens+259↓j
.text:00000000000107F6                 test    ebx, ebx
.text:00000000000107F8                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:0000000000010802                 jz      loc_108A5
.text:0000000000010808                 cmp     ebx, 3
.text:000000000001080B                 jnz     loc_10948
.text:0000000000010811                 cmp     [rsp+0E8h+times], 0
.text:0000000000010817                 jz      short loc_10830
.text:0000000000010819
.text:0000000000010819 loc_10819:                              ; CODE XREF: lutimens+208↓j
.text:0000000000010819                 lea     rsi, [rsp+0E8h+times]
.text:000000000001081E                 lea     rdi, [rsp+0E8h+stat_buf]
.text:0000000000010823                 xor     ebp, ebp
.text:0000000000010825                 call    update_timespec
.text:000000000001082A                 test    al, al
.text:000000000001082C                 jnz     short loc_10858
.text:000000000001082E                 xchg    ax, ax
.text:0000000000010830
.text:0000000000010830 loc_10830:                              ; CODE XREF: lutimens+B7↑j
.text:0000000000010830                                         ; lutimens+159↓j ...
.text:0000000000010830                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000010834                 and     eax, 0F000h
.text:0000000000010839                 cmp     eax, 0A000h
.text:000000000001083E                 jz      loc_10996
.text:0000000000010844                 mov     rdx, [rsp+0E8h+times]
.text:0000000000010849                 mov     rsi, r12        ; path
.text:000000000001084C                 mov     edi, 0FFFFFFFFh ; fildes
.text:0000000000010851                 call    fdutimens
.text:0000000000010856                 mov     ebp, eax
.text:0000000000010858
.text:0000000000010858 loc_10858:                              ; CODE XREF: lutimens+CC↑j
.text:0000000000010858                                         ; lutimens+165↓j ...
.text:0000000000010858                 mov     rcx, [rsp+0E8h+var_20]
.text:0000000000010860                 xor     rcx, fs:28h
.text:0000000000010869                 mov     eax, ebp
.text:000000000001086B                 jnz     loc_109A6
.text:0000000000010871                 add     rsp, 0D0h
.text:0000000000010878                 pop     rbx
.text:0000000000010879                 pop     rbp
.text:000000000001087A                 pop     r12
.text:000000000001087C                 retn
.text:000000000001087C ; ---------------------------------------------------------------------------
.text:000000000001087D                 align 20h
.text:0000000000010880
.text:0000000000010880 loc_10880:                              ; CODE XREF: lutimens+24↑j
.text:0000000000010880                 mov     ecx, cs:lutimensat_works_really
.text:0000000000010886                 xor     edx, edx
.text:0000000000010888                 xor     ebx, ebx
.text:000000000001088A                 mov     [rsp+0E8h+times], 0
.text:0000000000010893                 test    ecx, ecx
.text:0000000000010895                 jns     loc_107CE
.text:000000000001089B                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:00000000000108A5
.text:00000000000108A5 loc_108A5:                              ; CODE XREF: lutimens+A2↑j
.text:00000000000108A5                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:00000000000108AA                 mov     rsi, r12        ; filename
.text:00000000000108AD                 mov     edi, 1          ; ver
.text:00000000000108B2                 call    ___lxstat
.text:00000000000108B7                 test    eax, eax
.text:00000000000108B9                 jz      loc_10830
.text:00000000000108BF                 nop
.text:00000000000108C0
.text:00000000000108C0 loc_108C0:                              ; CODE XREF: lutimens+50↑j
.text:00000000000108C0                                         ; lutimens+1A4↓j ...
.text:00000000000108C0                 mov     ebp, 0FFFFFFFFh
.text:00000000000108C5                 jmp     short loc_10858
.text:00000000000108C5 ; ---------------------------------------------------------------------------
.text:00000000000108C7                 align 10h
.text:00000000000108D0
.text:00000000000108D0 loc_108D0:                              ; CODE XREF: lutimens+85↑j
.text:00000000000108D0                 jnz     loc_109AB
.text:00000000000108D6
.text:00000000000108D6 loc_108D6:                              ; CODE XREF: lutimens+253↓j
.text:00000000000108D6                 mov     cs:utimensat_works_really, 1
.text:00000000000108E0                 mov     cs:lutimensat_works_really, 1
.text:00000000000108EA                 jmp     loc_10858
.text:00000000000108EA ; ---------------------------------------------------------------------------
.text:00000000000108EF                 align 10h
.text:00000000000108F0
.text:00000000000108F0 loc_108F0:                              ; CODE XREF: lutimens+63↑j
.text:00000000000108F0                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:00000000000108F5                 mov     rsi, r12        ; filename
.text:00000000000108F8                 mov     edi, 1          ; ver
.text:00000000000108FD                 call    ___lxstat
.text:0000000000010902                 test    eax, eax
.text:0000000000010904                 jnz     short loc_108C0
.text:0000000000010906                 mov     rdx, [rsp+0E8h+times]
.text:000000000001090B                 cmp     qword ptr [rdx+8], 3FFFFFFEh
.text:0000000000010913                 jz      short loc_10978
.text:0000000000010915                 cmp     qword ptr [rdx+18h], 3FFFFFFEh
.text:000000000001091D                 mov     ebx, 3
.text:0000000000010922                 jnz     loc_107CE
.text:0000000000010928                 mov     rax, [rsp+0E8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000010930                 mov     rcx, [rsp+0E8h+stat_buf.st_mtim.tv_sec]
.text:0000000000010938                 mov     [rdx+18h], rax
.text:000000000001093C                 mov     [rdx+10h], rcx
.text:0000000000010940                 jmp     loc_107CE
.text:0000000000010940 ; ---------------------------------------------------------------------------
.text:0000000000010945                 align 8
.text:0000000000010948
.text:0000000000010948 loc_10948:                              ; CODE XREF: lutimens+AB↑j
.text:0000000000010948                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000001094D                 mov     rsi, r12        ; filename
.text:0000000000010950                 mov     edi, 1          ; ver
.text:0000000000010955                 call    ___lxstat
.text:000000000001095A                 test    eax, eax
.text:000000000001095C                 jnz     loc_108C0
.text:0000000000010962                 cmp     [rsp+0E8h+times], 0
.text:0000000000010968                 jnz     loc_10819
.text:000000000001096E                 jmp     loc_10830
.text:000000000001096E ; ---------------------------------------------------------------------------
.text:0000000000010973                 align 8
.text:0000000000010978
.text:0000000000010978 loc_10978:                              ; CODE XREF: lutimens+1B3↑j
.text:0000000000010978                 mov     rax, [rsp+0E8h+stat_buf.st_atim.tv_nsec]
.text:0000000000010980                 mov     rcx, [rsp+0E8h+stat_buf.st_atim.tv_sec]
.text:0000000000010985                 mov     ebx, 3
.text:000000000001098A                 mov     [rdx], rcx
.text:000000000001098D                 mov     [rdx+8], rax
.text:0000000000010991                 jmp     loc_107CE
.text:0000000000010996 ; ---------------------------------------------------------------------------
.text:0000000000010996
.text:0000000000010996 loc_10996:                              ; CODE XREF: lutimens+DE↑j
.text:0000000000010996                 call    ___errno_location
.text:000000000001099B                 mov     dword ptr [rax], 26h ; '&'
.text:00000000000109A1                 jmp     loc_108C0
.text:00000000000109A6 ; ---------------------------------------------------------------------------
.text:00000000000109A6
.text:00000000000109A6 loc_109A6:                              ; CODE XREF: lutimens+10B↑j
.text:00000000000109A6                 call    ___stack_chk_fail
.text:00000000000109AB ; ---------------------------------------------------------------------------
.text:00000000000109AB
.text:00000000000109AB loc_109AB:                              ; CODE XREF: lutimens:loc_108D0↑j
.text:00000000000109AB                 call    ___errno_location
.text:00000000000109B0                 cmp     dword ptr [rax], 26h ; '&'
.text:00000000000109B3                 jnz     loc_108D6
.text:00000000000109B9                 jmp     loc_107F6
.text:00000000000109B9 ; } // starts at 10760
.text:00000000000109B9 lutimens        endp
.text:00000000000109B9
.text:00000000000109B9 ; ---------------------------------------------------------------------------
.text:00000000000109BE                 align 20h
.text:00000000000109C0
.text:00000000000109C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000109C0
.text:00000000000109C0
.text:00000000000109C0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000109C0                 public version_etc_arn
.text:00000000000109C0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_10DFB↓j
.text:00000000000109C0                                         ; version_etc_va:loc_10E4B↓p ...
.text:00000000000109C0
.text:00000000000109C0 var_58          = qword ptr -58h
.text:00000000000109C0 var_50          = qword ptr -50h
.text:00000000000109C0 var_48          = qword ptr -48h
.text:00000000000109C0 var_40          = qword ptr -40h
.text:00000000000109C0
.text:00000000000109C0 ; __unwind {
.text:00000000000109C0                 push    r15
.text:00000000000109C2                 push    r14
.text:00000000000109C4                 push    r13
.text:00000000000109C6                 push    r12
.text:00000000000109C8                 mov     r12, r9
.text:00000000000109CB                 push    rbp
.text:00000000000109CC                 push    rbx
.text:00000000000109CD                 mov     rbp, rdi
.text:00000000000109D0                 mov     rbx, r8
.text:00000000000109D3                 sub     rsp, 28h
.text:00000000000109D7                 test    rsi, rsi
.text:00000000000109DA                 jz      loc_10AF8
.text:00000000000109E0                 mov     r8, rdx
.text:00000000000109E3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000109EA                 mov     r9, rcx
.text:00000000000109ED                 xor     eax, eax
.text:00000000000109EF                 mov     rcx, rsi
.text:00000000000109F2                 mov     esi, 1
.text:00000000000109F7                 call    ___fprintf_chk
.text:00000000000109FC
.text:00000000000109FC loc_109FC:                              ; CODE XREF: version_etc_arn+151↓j
.text:00000000000109FC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000010A03                 xor     edi, edi        ; domainname
.text:0000000000010A05                 mov     edx, 5          ; category
.text:0000000000010A0A                 call    _dcgettext
.text:0000000000010A0F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000010A16                 mov     rcx, rax
.text:0000000000010A19                 mov     r8d, 7E3h
.text:0000000000010A1F                 mov     esi, 1
.text:0000000000010A24                 mov     rdi, rbp
.text:0000000000010A27                 xor     eax, eax
.text:0000000000010A29                 call    ___fprintf_chk
.text:0000000000010A2E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000010A35                 xor     edi, edi        ; domainname
.text:0000000000010A37                 mov     edx, 5          ; category
.text:0000000000010A3C                 call    _dcgettext
.text:0000000000010A41                 mov     rsi, rbp        ; stream
.text:0000000000010A44                 mov     rdi, rax        ; s
.text:0000000000010A47                 call    _fputs_unlocked
.text:0000000000010A4C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000010A50                 ja      def_10A64       ; jumptable 0000000000010A64 default case
.text:0000000000010A56                 lea     rdx, jpt_10A64
.text:0000000000010A5D                 movsxd  rax, ds:(jpt_10A64 - 15BB8h)[rdx+r12*4]
.text:0000000000010A61                 add     rax, rdx
.text:0000000000010A64                 jmp     rax             ; switch jump
.text:0000000000010A64 ; ---------------------------------------------------------------------------
.text:0000000000010A66                 align 10h
.text:0000000000010A70
.text:0000000000010A70 loc_10A70:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010A70                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010A70                 mov     r9, [rbx+38h]   ; jumptable 0000000000010A64 case 8
.text:0000000000010A74                 mov     rax, [rbx+10h]
.text:0000000000010A78                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000010A7F                 mov     r8, [rbx+8]
.text:0000000000010A83                 mov     edx, 5          ; category
.text:0000000000010A88                 xor     edi, edi        ; domainname
.text:0000000000010A8A                 mov     r13, [rbx+30h]
.text:0000000000010A8E                 mov     r12, [rbx+28h]
.text:0000000000010A92                 mov     [rsp+58h+var_48], r9
.text:0000000000010A97                 mov     r15, [rbx+20h]
.text:0000000000010A9B                 mov     r14, [rbx+18h]
.text:0000000000010A9F                 mov     [rsp+58h+var_58], rax
.text:0000000000010AA3                 mov     [rsp+58h+var_50], r8
.text:0000000000010AA8                 mov     rbx, [rbx]
.text:0000000000010AAB                 call    _dcgettext
.text:0000000000010AB0                 sub     rsp, 8
.text:0000000000010AB4
.text:0000000000010AB4 loc_10AB4:                              ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000010AB4                 mov     r9, [rsp+60h+var_48]
.text:0000000000010AB9                 mov     rdx, rax
.text:0000000000010ABC                 mov     rcx, rbx
.text:0000000000010ABF                 mov     esi, 1
.text:0000000000010AC4                 mov     rdi, rbp
.text:0000000000010AC7                 xor     eax, eax
.text:0000000000010AC9                 push    r9
.text:0000000000010ACB                 push    r13
.text:0000000000010ACD                 push    r12
.text:0000000000010ACF                 push    r15
.text:0000000000010AD1                 push    r14
.text:0000000000010AD3                 mov     r9, [rsp+88h+var_58]
.text:0000000000010AD8                 mov     r8, [rsp+88h+var_50]
.text:0000000000010ADD                 call    ___fprintf_chk
.text:0000000000010AE2                 add     rsp, 30h
.text:0000000000010AE6
.text:0000000000010AE6 loc_10AE6:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010AE6                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010AE6                 add     rsp, 28h        ; jumptable 0000000000010A64 case 0
.text:0000000000010AEA                 pop     rbx
.text:0000000000010AEB                 pop     rbp
.text:0000000000010AEC                 pop     r12
.text:0000000000010AEE                 pop     r13
.text:0000000000010AF0                 pop     r14
.text:0000000000010AF2                 pop     r15
.text:0000000000010AF4                 retn
.text:0000000000010AF4 ; ---------------------------------------------------------------------------
.text:0000000000010AF5                 align 8
.text:0000000000010AF8
.text:0000000000010AF8 loc_10AF8:                              ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000010AF8                 mov     r8, rcx
.text:0000000000010AFB                 mov     rcx, rdx
.text:0000000000010AFE                 lea     rdx, aSS_2      ; "%s %s\n"
.text:0000000000010B05                 mov     esi, 1
.text:0000000000010B0A                 xor     eax, eax
.text:0000000000010B0C                 call    ___fprintf_chk
.text:0000000000010B11                 jmp     loc_109FC
.text:0000000000010B11 ; ---------------------------------------------------------------------------
.text:0000000000010B16                 align 20h
.text:0000000000010B20
.text:0000000000010B20 loc_10B20:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010B20                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010B20                 mov     r10, [rbx+40h]  ; jumptable 0000000000010A64 case 9
.text:0000000000010B24                 mov     r9, [rbx+38h]
.text:0000000000010B28                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000010B2F                 mov     rax, [rbx+10h]
.text:0000000000010B33                 mov     r8, [rbx+8]
.text:0000000000010B37                 mov     edx, 5          ; category
.text:0000000000010B3C                 mov     r13, [rbx+30h]
.text:0000000000010B40                 mov     r12, [rbx+28h]
.text:0000000000010B44                 mov     r15, [rbx+20h]
.text:0000000000010B48                 mov     r14, [rbx+18h]
.text:0000000000010B4C                 mov     rbx, [rbx]
.text:0000000000010B4F                 mov     [rsp+58h+var_40], r10
.text:0000000000010B54                 mov     [rsp+58h+var_48], r9
.text:0000000000010B59                 mov     [rsp+58h+var_58], rax
.text:0000000000010B5D                 mov     [rsp+58h+var_50], r8
.text:0000000000010B62
.text:0000000000010B62 loc_10B62:                              ; CODE XREF: version_etc_arn+412↓j
.text:0000000000010B62                 xor     edi, edi        ; domainname
.text:0000000000010B64                 call    _dcgettext
.text:0000000000010B69                 mov     r10, [rsp+58h+var_40]
.text:0000000000010B6E                 push    r10
.text:0000000000010B70                 jmp     loc_10AB4
.text:0000000000010B70 ; ---------------------------------------------------------------------------
.text:0000000000010B75                 align 8
.text:0000000000010B78
.text:0000000000010B78 loc_10B78:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010B78                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010B78                 mov     rbx, [rbx]      ; jumptable 0000000000010A64 case 1
.text:0000000000010B7B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000010B82                 mov     edx, 5          ; category
.text:0000000000010B87                 xor     edi, edi        ; domainname
.text:0000000000010B89                 call    _dcgettext
.text:0000000000010B8E                 add     rsp, 28h
.text:0000000000010B92                 mov     rcx, rbx
.text:0000000000010B95                 mov     rdi, rbp
.text:0000000000010B98                 pop     rbx
.text:0000000000010B99                 pop     rbp
.text:0000000000010B9A                 pop     r12
.text:0000000000010B9C                 pop     r13
.text:0000000000010B9E                 pop     r14
.text:0000000000010BA0                 pop     r15
.text:0000000000010BA2                 mov     rdx, rax
.text:0000000000010BA5                 mov     esi, 1
.text:0000000000010BAA                 xor     eax, eax
.text:0000000000010BAC                 jmp     ___fprintf_chk
.text:0000000000010BAC ; ---------------------------------------------------------------------------
.text:0000000000010BB1                 align 8
.text:0000000000010BB8
.text:0000000000010BB8 loc_10BB8:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010BB8                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010BB8                 mov     r12, [rbx+8]    ; jumptable 0000000000010A64 case 2
.text:0000000000010BBC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000010BC3                 mov     rbx, [rbx]
.text:0000000000010BC6                 mov     edx, 5          ; category
.text:0000000000010BCB                 xor     edi, edi        ; domainname
.text:0000000000010BCD                 call    _dcgettext
.text:0000000000010BD2                 add     rsp, 28h
.text:0000000000010BD6                 mov     r8, r12
.text:0000000000010BD9                 mov     rcx, rbx
.text:0000000000010BDC                 mov     rdi, rbp
.text:0000000000010BDF                 mov     rdx, rax
.text:0000000000010BE2                 mov     esi, 1
.text:0000000000010BE7                 pop     rbx
.text:0000000000010BE8                 pop     rbp
.text:0000000000010BE9                 pop     r12
.text:0000000000010BEB                 pop     r13
.text:0000000000010BED                 pop     r14
.text:0000000000010BEF                 pop     r15
.text:0000000000010BF1                 xor     eax, eax
.text:0000000000010BF3                 jmp     ___fprintf_chk
.text:0000000000010BF3 ; ---------------------------------------------------------------------------
.text:0000000000010BF8                 align 20h
.text:0000000000010C00
.text:0000000000010C00 loc_10C00:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010C00                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010C00                 mov     r13, [rbx+10h]  ; jumptable 0000000000010A64 case 3
.text:0000000000010C04                 mov     r12, [rbx+8]
.text:0000000000010C08                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000010C0F                 mov     rbx, [rbx]
.text:0000000000010C12                 mov     edx, 5          ; category
.text:0000000000010C17                 xor     edi, edi        ; domainname
.text:0000000000010C19                 call    _dcgettext
.text:0000000000010C1E                 add     rsp, 28h
.text:0000000000010C22                 mov     r9, r13
.text:0000000000010C25                 mov     r8, r12
.text:0000000000010C28                 mov     rcx, rbx
.text:0000000000010C2B                 mov     rdi, rbp
.text:0000000000010C2E                 mov     rdx, rax
.text:0000000000010C31                 pop     rbx
.text:0000000000010C32                 pop     rbp
.text:0000000000010C33                 pop     r12
.text:0000000000010C35                 pop     r13
.text:0000000000010C37                 pop     r14
.text:0000000000010C39                 pop     r15
.text:0000000000010C3B                 mov     esi, 1
.text:0000000000010C40                 xor     eax, eax
.text:0000000000010C42                 jmp     ___fprintf_chk
.text:0000000000010C42 ; ---------------------------------------------------------------------------
.text:0000000000010C47                 align 10h
.text:0000000000010C50
.text:0000000000010C50 loc_10C50:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010C50                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010C50                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000010A64 case 4
.text:0000000000010C57                 mov     edx, 5          ; category
.text:0000000000010C5C                 xor     edi, edi        ; domainname
.text:0000000000010C5E                 mov     r14, [rbx+18h]
.text:0000000000010C62                 mov     r13, [rbx+10h]
.text:0000000000010C66                 mov     r12, [rbx+8]
.text:0000000000010C6A                 mov     rbx, [rbx]
.text:0000000000010C6D                 call    _dcgettext
.text:0000000000010C72                 sub     rsp, 8
.text:0000000000010C76
.text:0000000000010C76 loc_10C76:                              ; CODE XREF: version_etc_arn+310↓j
.text:0000000000010C76                 push    r14
.text:0000000000010C78                 mov     rdx, rax
.text:0000000000010C7B                 mov     r9, r13
.text:0000000000010C7E                 mov     r8, r12
.text:0000000000010C81                 mov     rcx, rbx
.text:0000000000010C84                 mov     rdi, rbp
.text:0000000000010C87                 mov     esi, 1
.text:0000000000010C8C                 xor     eax, eax
.text:0000000000010C8E                 call    ___fprintf_chk
.text:0000000000010C93                 pop     rax
.text:0000000000010C94                 pop     rdx
.text:0000000000010C95                 add     rsp, 28h
.text:0000000000010C99                 pop     rbx
.text:0000000000010C9A                 pop     rbp
.text:0000000000010C9B                 pop     r12
.text:0000000000010C9D                 pop     r13
.text:0000000000010C9F                 pop     r14
.text:0000000000010CA1                 pop     r15
.text:0000000000010CA3                 retn
.text:0000000000010CA3 ; ---------------------------------------------------------------------------
.text:0000000000010CA4                 align 8
.text:0000000000010CA8
.text:0000000000010CA8 loc_10CA8:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010CA8                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010CA8                 mov     r15, [rbx+20h]  ; jumptable 0000000000010A64 case 5
.text:0000000000010CAC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000010CB3                 mov     edx, 5          ; category
.text:0000000000010CB8                 xor     edi, edi        ; domainname
.text:0000000000010CBA                 mov     r14, [rbx+18h]
.text:0000000000010CBE                 mov     r13, [rbx+10h]
.text:0000000000010CC2                 mov     r12, [rbx+8]
.text:0000000000010CC6                 mov     rbx, [rbx]
.text:0000000000010CC9                 call    _dcgettext
.text:0000000000010CCE                 push    r15
.text:0000000000010CD0                 jmp     short loc_10C76
.text:0000000000010CD0 ; ---------------------------------------------------------------------------
.text:0000000000010CD2                 align 8
.text:0000000000010CD8
.text:0000000000010CD8 loc_10CD8:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010CD8                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010CD8                 mov     r8, [rbx+8]     ; jumptable 0000000000010A64 case 6
.text:0000000000010CDC                 mov     r12, [rbx+28h]
.text:0000000000010CE0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000010CE7                 mov     r15, [rbx+20h]
.text:0000000000010CEB                 mov     r14, [rbx+18h]
.text:0000000000010CEF                 mov     edx, 5          ; category
.text:0000000000010CF4                 mov     r13, [rbx+10h]
.text:0000000000010CF8                 xor     edi, edi        ; domainname
.text:0000000000010CFA                 mov     rbx, [rbx]
.text:0000000000010CFD                 mov     [rsp+58h+var_58], r8
.text:0000000000010D01                 call    _dcgettext
.text:0000000000010D06                 sub     rsp, 8
.text:0000000000010D0A                 mov     r9, r13
.text:0000000000010D0D                 push    r12
.text:0000000000010D0F                 push    r15
.text:0000000000010D11                 push    r14
.text:0000000000010D13
.text:0000000000010D13 loc_10D13:                              ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000010D13                 mov     r8, [rsp+78h+var_58]
.text:0000000000010D18                 mov     rcx, rbx
.text:0000000000010D1B                 mov     rdx, rax
.text:0000000000010D1E                 mov     rdi, rbp
.text:0000000000010D21                 mov     esi, 1
.text:0000000000010D26                 xor     eax, eax
.text:0000000000010D28                 call    ___fprintf_chk
.text:0000000000010D2D                 add     rsp, 20h
.text:0000000000010D31                 add     rsp, 28h
.text:0000000000010D35                 pop     rbx
.text:0000000000010D36                 pop     rbp
.text:0000000000010D37                 pop     r12
.text:0000000000010D39                 pop     r13
.text:0000000000010D3B                 pop     r14
.text:0000000000010D3D                 pop     r15
.text:0000000000010D3F                 retn
.text:0000000000010D40 ; ---------------------------------------------------------------------------
.text:0000000000010D40
.text:0000000000010D40 loc_10D40:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010D40                                         ; DATA XREF: .rodata:jpt_10A64↓o
.text:0000000000010D40                 mov     r9, [rbx+10h]   ; jumptable 0000000000010A64 case 7
.text:0000000000010D44                 mov     r13, [rbx+30h]
.text:0000000000010D48                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000010D4F                 mov     r12, [rbx+28h]
.text:0000000000010D53                 mov     r15, [rbx+20h]
.text:0000000000010D57                 mov     edx, 5          ; category
.text:0000000000010D5C                 mov     r14, [rbx+18h]
.text:0000000000010D60                 mov     r8, [rbx+8]
.text:0000000000010D64                 xor     edi, edi        ; domainname
.text:0000000000010D66                 mov     [rsp+58h+var_50], r9
.text:0000000000010D6B                 mov     rbx, [rbx]
.text:0000000000010D6E                 mov     [rsp+58h+var_58], r8
.text:0000000000010D72                 call    _dcgettext
.text:0000000000010D77                 push    r13
.text:0000000000010D79                 push    r12
.text:0000000000010D7B                 push    r15
.text:0000000000010D7D                 push    r14
.text:0000000000010D7F                 mov     r9, [rsp+78h+var_50]
.text:0000000000010D84                 jmp     short loc_10D13
.text:0000000000010D84 ; ---------------------------------------------------------------------------
.text:0000000000010D86                 align 10h
.text:0000000000010D90
.text:0000000000010D90 def_10A64:                              ; CODE XREF: version_etc_arn+90↑j
.text:0000000000010D90                 mov     r10, [rbx+40h]  ; jumptable 0000000000010A64 default case
.text:0000000000010D94                 mov     r9, [rbx+38h]
.text:0000000000010D98                 mov     edx, 5
.text:0000000000010D9D                 mov     rax, [rbx+10h]
.text:0000000000010DA1                 mov     r8, [rbx+8]
.text:0000000000010DA5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000010DAC                 mov     r13, [rbx+30h]
.text:0000000000010DB0                 mov     r12, [rbx+28h]
.text:0000000000010DB4                 mov     r15, [rbx+20h]
.text:0000000000010DB8                 mov     r14, [rbx+18h]
.text:0000000000010DBC                 mov     [rsp+58h+var_40], r10
.text:0000000000010DC1                 mov     [rsp+58h+var_48], r9
.text:0000000000010DC6                 mov     [rsp+58h+var_58], rax
.text:0000000000010DCA                 mov     [rsp+58h+var_50], r8
.text:0000000000010DCF                 mov     rbx, [rbx]
.text:0000000000010DD2                 jmp     loc_10B62
.text:0000000000010DD2 ; } // starts at 109C0
.text:0000000000010DD2 version_etc_arn endp
.text:0000000000010DD2
.text:0000000000010DD2 ; ---------------------------------------------------------------------------
.text:0000000000010DD7                 align 20h
.text:0000000000010DE0
.text:0000000000010DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010DE0
.text:0000000000010DE0 ; Attributes: info_from_lumina
.text:0000000000010DE0
.text:0000000000010DE0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000010DE0                 public version_etc_ar
.text:0000000000010DE0 version_etc_ar  proc near
.text:0000000000010DE0 ; __unwind {
.text:0000000000010DE0                 xor     r9d, r9d
.text:0000000000010DE3                 cmp     qword ptr [r8], 0
.text:0000000000010DE7                 jz      short loc_10DFB
.text:0000000000010DE9                 nop     dword ptr [rax+00000000h]
.text:0000000000010DF0
.text:0000000000010DF0 loc_10DF0:                              ; CODE XREF: version_etc_ar+19↓j
.text:0000000000010DF0                 add     r9, 1
.text:0000000000010DF4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000010DF9                 jnz     short loc_10DF0
.text:0000000000010DFB
.text:0000000000010DFB loc_10DFB:                              ; CODE XREF: version_etc_ar+7↑j
.text:0000000000010DFB                 jmp     version_etc_arn
.text:0000000000010DFB ; } // starts at 10DE0
.text:0000000000010DFB version_etc_ar  endp
.text:0000000000010DFB
.text:0000000000010E00
.text:0000000000010E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000010E00
.text:0000000000010E00 ; Attributes: info_from_lumina
.text:0000000000010E00
.text:0000000000010E00 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000010E00                 public version_etc_va
.text:0000000000010E00 version_etc_va  proc near
.text:0000000000010E00
.text:0000000000010E00 authtab         = qword ptr -68h
.text:0000000000010E00 var_10          = qword ptr -10h
.text:0000000000010E00
.text:0000000000010E00 ; __unwind {
.text:0000000000010E00                 sub     rsp, 68h
.text:0000000000010E04                 mov     r10, r8
.text:0000000000010E07                 xor     r9d, r9d
.text:0000000000010E0A                 mov     rax, fs:28h
.text:0000000000010E13                 mov     [rsp+68h+var_10], rax
.text:0000000000010E18                 xor     eax, eax
.text:0000000000010E1A                 mov     r8, rsp
.text:0000000000010E1D                 nop     dword ptr [rax]
.text:0000000000010E20
.text:0000000000010E20 loc_10E20:                              ; CODE XREF: version_etc_va+49↓j
.text:0000000000010E20                 mov     eax, [r10]
.text:0000000000010E23                 cmp     eax, 2Fh ; '/'
.text:0000000000010E26                 ja      short loc_10E6A
.text:0000000000010E28                 mov     r11d, eax
.text:0000000000010E2B                 add     r11, [r10+10h]
.text:0000000000010E2F                 add     eax, 8
.text:0000000000010E32                 mov     [r10], eax
.text:0000000000010E35
.text:0000000000010E35 loc_10E35:                              ; CODE XREF: version_etc_va+76↓j
.text:0000000000010E35                 mov     rax, [r11]
.text:0000000000010E38                 test    rax, rax
.text:0000000000010E3B                 mov     [r8+r9*8], rax
.text:0000000000010E3F                 jz      short loc_10E4B
.text:0000000000010E41                 add     r9, 1
.text:0000000000010E45                 cmp     r9, 0Ah
.text:0000000000010E49                 jnz     short loc_10E20
.text:0000000000010E4B
.text:0000000000010E4B loc_10E4B:                              ; CODE XREF: version_etc_va+3F↑j
.text:0000000000010E4B                 call    version_etc_arn
.text:0000000000010E50                 mov     rax, [rsp+68h+var_10]
.text:0000000000010E55                 xor     rax, fs:28h
.text:0000000000010E5E                 jnz     short loc_10E65
.text:0000000000010E60                 add     rsp, 68h
.text:0000000000010E64                 retn
.text:0000000000010E65 ; ---------------------------------------------------------------------------
.text:0000000000010E65
.text:0000000000010E65 loc_10E65:                              ; CODE XREF: version_etc_va+5E↑j
.text:0000000000010E65                 call    ___stack_chk_fail
.text:0000000000010E6A ; ---------------------------------------------------------------------------
.text:0000000000010E6A
.text:0000000000010E6A loc_10E6A:                              ; CODE XREF: version_etc_va+26↑j
.text:0000000000010E6A                 mov     r11, [r10+8]
.text:0000000000010E6E                 lea     rax, [r11+8]
.text:0000000000010E72                 mov     [r10+8], rax
.text:0000000000010E76                 jmp     short loc_10E35
.text:0000000000010E76 ; } // starts at 10E00
.text:0000000000010E76 version_etc_va  endp
.text:0000000000010E76
.text:0000000000010E76 ; ---------------------------------------------------------------------------
.text:0000000000010E78                 align 20h
.text:0000000000010E80
.text:0000000000010E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000010E80
.text:0000000000010E80 ; Attributes: info_from_lumina
.text:0000000000010E80
.text:0000000000010E80 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000010E80                 public version_etc
.text:0000000000010E80 version_etc     proc near               ; CODE XREF: main+34F↑p
.text:0000000000010E80
.text:0000000000010E80 var_C0          = dword ptr -0C0h
.text:0000000000010E80 var_B8          = qword ptr -0B8h
.text:0000000000010E80 var_B0          = qword ptr -0B0h
.text:0000000000010E80 var_A8          = byte ptr -0A8h
.text:0000000000010E80 var_50          = qword ptr -50h
.text:0000000000010E80 var_48          = byte ptr -48h
.text:0000000000010E80 var_28          = qword ptr -28h
.text:0000000000010E80 var_20          = qword ptr -20h
.text:0000000000010E80 arg_0           = byte ptr  8
.text:0000000000010E80
.text:0000000000010E80 ; __unwind {
.text:0000000000010E80                 push    rbp
.text:0000000000010E81                 push    rbx
.text:0000000000010E82                 mov     r10d, 20h ; ' '
.text:0000000000010E88                 xor     r11d, r11d
.text:0000000000010E8B                 sub     rsp, 0B8h
.text:0000000000010E92                 mov     rax, fs:28h
.text:0000000000010E9B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000010EA0                 xor     eax, eax
.text:0000000000010EA2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000010EAA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000010EB2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000010EBA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000010EBF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000010EC7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000010ECF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000010ED4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000010EDC                 xor     r9d, r9d
.text:0000000000010EDF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000010EE4                 mov     rbp, rax
.text:0000000000010EE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010EF0
.text:0000000000010EF0 loc_10EF0:                              ; CODE XREF: version_etc+9A↓j
.text:0000000000010EF0                 cmp     r10d, 2Fh ; '/'
.text:0000000000010EF4                 ja      short loc_10F4C
.text:0000000000010EF6                 mov     eax, r10d
.text:0000000000010EF9                 mov     r11d, 1
.text:0000000000010EFF                 add     r10d, 8
.text:0000000000010F03                 add     rax, rbp
.text:0000000000010F06
.text:0000000000010F06 loc_10F06:                              ; CODE XREF: version_etc+D3↓j
.text:0000000000010F06                 mov     rax, [rax]
.text:0000000000010F09                 test    rax, rax
.text:0000000000010F0C                 mov     [r8+r9*8], rax
.text:0000000000010F10                 jz      short loc_10F1C
.text:0000000000010F12                 add     r9, 1
.text:0000000000010F16                 cmp     r9, 0Ah
.text:0000000000010F1A                 jnz     short loc_10EF0
.text:0000000000010F1C
.text:0000000000010F1C loc_10F1C:                              ; CODE XREF: version_etc+90↑j
.text:0000000000010F1C                 test    r11b, r11b
.text:0000000000010F1F                 jnz     short loc_10F45
.text:0000000000010F21
.text:0000000000010F21 loc_10F21:                              ; CODE XREF: version_etc+CA↓j
.text:0000000000010F21                 call    version_etc_arn
.text:0000000000010F26                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000010F2B                 xor     rax, fs:28h
.text:0000000000010F34                 jnz     short loc_10F40
.text:0000000000010F36                 add     rsp, 0B8h
.text:0000000000010F3D                 pop     rbx
.text:0000000000010F3E                 pop     rbp
.text:0000000000010F3F                 retn
.text:0000000000010F40 ; ---------------------------------------------------------------------------
.text:0000000000010F40
.text:0000000000010F40 loc_10F40:                              ; CODE XREF: version_etc+B4↑j
.text:0000000000010F40                 call    ___stack_chk_fail
.text:0000000000010F45 ; ---------------------------------------------------------------------------
.text:0000000000010F45
.text:0000000000010F45 loc_10F45:                              ; CODE XREF: version_etc+9F↑j
.text:0000000000010F45                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000010F4A                 jmp     short loc_10F21
.text:0000000000010F4C ; ---------------------------------------------------------------------------
.text:0000000000010F4C
.text:0000000000010F4C loc_10F4C:                              ; CODE XREF: version_etc+74↑j
.text:0000000000010F4C                 mov     rax, rbx
.text:0000000000010F4F                 add     rbx, 8
.text:0000000000010F53                 jmp     short loc_10F06
.text:0000000000010F53 ; } // starts at 10E80
.text:0000000000010F53 version_etc     endp
.text:0000000000010F53
.text:0000000000010F53 ; ---------------------------------------------------------------------------
.text:0000000000010F55                 align 20h
.text:0000000000010F60
.text:0000000000010F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000010F60
.text:0000000000010F60 ; Attributes: info_from_lumina
.text:0000000000010F60
.text:0000000000010F60 ; void __cdecl emit_bug_reporting_address()
.text:0000000000010F60                 public emit_bug_reporting_address
.text:0000000000010F60 emit_bug_reporting_address proc near
.text:0000000000010F60 ; __unwind {
.text:0000000000010F60                 push    rbx
.text:0000000000010F61                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000010F68                 mov     edx, 5          ; category
.text:0000000000010F6D                 xor     edi, edi        ; domainname
.text:0000000000010F6F                 call    _dcgettext
.text:0000000000010F74                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000010F7B                 mov     rsi, rax
.text:0000000000010F7E                 mov     edi, 1
.text:0000000000010F83                 xor     eax, eax
.text:0000000000010F85                 call    ___printf_chk
.text:0000000000010F8A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000010F91                 mov     edx, 5          ; category
.text:0000000000010F96                 xor     edi, edi        ; domainname
.text:0000000000010F98                 call    _dcgettext
.text:0000000000010F9D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000010FA4                 lea     rdx, unk_129BE
.text:0000000000010FAB                 mov     rsi, rax
.text:0000000000010FAE                 mov     edi, 1
.text:0000000000010FB3                 xor     eax, eax
.text:0000000000010FB5                 call    ___printf_chk
.text:0000000000010FBA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000010FC1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000010FC8                 xor     edi, edi        ; domainname
.text:0000000000010FCA                 mov     edx, 5          ; category
.text:0000000000010FCF                 call    _dcgettext
.text:0000000000010FD4                 mov     rsi, rbx        ; stream
.text:0000000000010FD7                 mov     rdi, rax        ; s
.text:0000000000010FDA                 pop     rbx
.text:0000000000010FDB                 jmp     _fputs_unlocked
.text:0000000000010FDB ; } // starts at 10F60
.text:0000000000010FDB emit_bug_reporting_address endp
.text:0000000000010FDB
.text:0000000000010FE0
.text:0000000000010FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010FE0
.text:0000000000010FE0
.text:0000000000010FE0                 public can_write_any_file
.text:0000000000010FE0 can_write_any_file proc near            ; CODE XREF: writable_destination+12↑p
.text:0000000000010FE0 ; __unwind {
.text:0000000000010FE0                 cmp     cs:initialized_3064, 0
.text:0000000000010FE7                 jz      short loc_10FF8
.text:0000000000010FE9                 movzx   eax, cs:can_write_3065
.text:0000000000010FF0                 retn
.text:0000000000010FF0 ; ---------------------------------------------------------------------------
.text:0000000000010FF1                 align 8
.text:0000000000010FF8
.text:0000000000010FF8 loc_10FF8:                              ; CODE XREF: can_write_any_file+7↑j
.text:0000000000010FF8                 sub     rsp, 8
.text:0000000000010FFC                 call    _geteuid
.text:0000000000011001                 test    eax, eax
.text:0000000000011003                 mov     cs:initialized_3064, 1
.text:000000000001100A                 setz    al
.text:000000000001100D                 mov     cs:can_write_3065, al
.text:0000000000011013                 add     rsp, 8
.text:0000000000011017                 retn
.text:0000000000011017 ; } // starts at 10FE0
.text:0000000000011017 can_write_any_file endp
.text:0000000000011017
.text:0000000000011017 ; ---------------------------------------------------------------------------
.text:0000000000011018                 align 20h
.text:0000000000011020
.text:0000000000011020 ; =============== S U B R O U T I N E =======================================
.text:0000000000011020
.text:0000000000011020
.text:0000000000011020                 public xmalloc
.text:0000000000011020 xmalloc         proc near               ; CODE XREF: make_dir_parents_private+1F6↑p
.text:0000000000011020                                         ; copy_internal+2886↑p ...
.text:0000000000011020 ; __unwind {
.text:0000000000011020                 push    rbx
.text:0000000000011021                 mov     rbx, rdi
.text:0000000000011024                 call    _malloc
.text:0000000000011029                 test    rax, rax
.text:000000000001102C                 jnz     short loc_11033
.text:000000000001102E                 test    rbx, rbx
.text:0000000000011031                 jnz     short loc_11035
.text:0000000000011033
.text:0000000000011033 loc_11033:                              ; CODE XREF: xmalloc+C↑j
.text:0000000000011033                 pop     rbx
.text:0000000000011034                 retn
.text:0000000000011035 ; ---------------------------------------------------------------------------
.text:0000000000011035
.text:0000000000011035 loc_11035:                              ; CODE XREF: xmalloc+11↑j
.text:0000000000011035                 call    xalloc_die
.text:0000000000011035 ; } // starts at 11020
.text:0000000000011035 xmalloc         endp
.text:0000000000011035
.text:0000000000011035 ; ---------------------------------------------------------------------------
.text:000000000001103A                 align 20h
.text:0000000000011040
.text:0000000000011040 ; =============== S U B R O U T I N E =======================================
.text:0000000000011040
.text:0000000000011040 ; Attributes: info_from_lumina
.text:0000000000011040
.text:0000000000011040 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000011040                 public xnmalloc
.text:0000000000011040 xnmalloc        proc near
.text:0000000000011040 ; __unwind {
.text:0000000000011040                 mov     rax, rdi
.text:0000000000011043                 mul     rsi
.text:0000000000011046                 mov     rdi, rax
.text:0000000000011049                 seto    al
.text:000000000001104C                 test    rdi, rdi
.text:000000000001104F                 js      short loc_1105B
.text:0000000000011051                 movzx   eax, al
.text:0000000000011054                 test    rax, rax
.text:0000000000011057                 jnz     short loc_1105B
.text:0000000000011059                 jmp     short xmalloc
.text:000000000001105B ; ---------------------------------------------------------------------------
.text:000000000001105B
.text:000000000001105B loc_1105B:                              ; CODE XREF: xnmalloc+F↑j
.text:000000000001105B                                         ; xnmalloc+17↑j
.text:000000000001105B                 sub     rsp, 8
.text:000000000001105F                 call    xalloc_die
.text:000000000001105F ; } // starts at 11040
.text:000000000001105F xnmalloc        endp
.text:000000000001105F
.text:000000000001105F ; ---------------------------------------------------------------------------
.text:0000000000011064                 align 10h
.text:0000000000011070
.text:0000000000011070 ; =============== S U B R O U T I N E =======================================
.text:0000000000011070
.text:0000000000011070
.text:0000000000011070                 public xcharalloc
.text:0000000000011070 xcharalloc      proc near
.text:0000000000011070 ; __unwind {
.text:0000000000011070                 jmp     short xmalloc
.text:0000000000011070 ; } // starts at 11070
.text:0000000000011070 xcharalloc      endp
.text:0000000000011070
.text:0000000000011070 ; ---------------------------------------------------------------------------
.text:0000000000011072                 align 20h
.text:0000000000011080
.text:0000000000011080 ; =============== S U B R O U T I N E =======================================
.text:0000000000011080
.text:0000000000011080 ; Attributes: info_from_lumina
.text:0000000000011080
.text:0000000000011080 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000011080                 public xrealloc
.text:0000000000011080 xrealloc        proc near               ; CODE XREF: extent_scan_read+E0↑p
.text:0000000000011080                                         ; quotearg_n_options+6E↑p ...
.text:0000000000011080 ; __unwind {
.text:0000000000011080                 test    rsi, rsi
.text:0000000000011083                 push    rbx
.text:0000000000011084                 mov     rbx, rsi
.text:0000000000011087                 jnz     short loc_1108E
.text:0000000000011089                 test    rdi, rdi
.text:000000000001108C                 jnz     short loc_110A8
.text:000000000001108E
.text:000000000001108E loc_1108E:                              ; CODE XREF: xrealloc+7↑j
.text:000000000001108E                 mov     rsi, rbx        ; size
.text:0000000000011091                 call    _realloc
.text:0000000000011096                 test    rax, rax
.text:0000000000011099                 jnz     short loc_110A0
.text:000000000001109B                 test    rbx, rbx
.text:000000000001109E                 jnz     short loc_110B1
.text:00000000000110A0
.text:00000000000110A0 loc_110A0:                              ; CODE XREF: xrealloc+19↑j
.text:00000000000110A0                 pop     rbx
.text:00000000000110A1                 retn
.text:00000000000110A1 ; ---------------------------------------------------------------------------
.text:00000000000110A2                 align 8
.text:00000000000110A8
.text:00000000000110A8 loc_110A8:                              ; CODE XREF: xrealloc+C↑j
.text:00000000000110A8                 call    free
.text:00000000000110AD                 xor     eax, eax
.text:00000000000110AF                 pop     rbx
.text:00000000000110B0                 retn
.text:00000000000110B1 ; ---------------------------------------------------------------------------
.text:00000000000110B1
.text:00000000000110B1 loc_110B1:                              ; CODE XREF: xrealloc+1E↑j
.text:00000000000110B1                 call    xalloc_die
.text:00000000000110B1 ; } // starts at 11080
.text:00000000000110B1 xrealloc        endp
.text:00000000000110B1
.text:00000000000110B1 ; ---------------------------------------------------------------------------
.text:00000000000110B6                 align 20h
.text:00000000000110C0
.text:00000000000110C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000110C0
.text:00000000000110C0 ; Attributes: info_from_lumina
.text:00000000000110C0
.text:00000000000110C0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000110C0                 public xnrealloc
.text:00000000000110C0 xnrealloc       proc near
.text:00000000000110C0 ; __unwind {
.text:00000000000110C0                 mov     rax, rsi
.text:00000000000110C3                 mul     rdx
.text:00000000000110C6                 mov     rsi, rax
.text:00000000000110C9                 seto    al
.text:00000000000110CC                 test    rsi, rsi
.text:00000000000110CF                 js      short loc_110DB
.text:00000000000110D1                 movzx   eax, al
.text:00000000000110D4                 test    rax, rax
.text:00000000000110D7                 jnz     short loc_110DB
.text:00000000000110D9                 jmp     short xrealloc
.text:00000000000110DB ; ---------------------------------------------------------------------------
.text:00000000000110DB
.text:00000000000110DB loc_110DB:                              ; CODE XREF: xnrealloc+F↑j
.text:00000000000110DB                                         ; xnrealloc+17↑j
.text:00000000000110DB                 sub     rsp, 8
.text:00000000000110DF                 call    xalloc_die
.text:00000000000110DF ; } // starts at 110C0
.text:00000000000110DF xnrealloc       endp
.text:00000000000110DF
.text:00000000000110DF ; ---------------------------------------------------------------------------
.text:00000000000110E4                 align 10h
.text:00000000000110F0
.text:00000000000110F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000110F0
.text:00000000000110F0 ; Attributes: info_from_lumina
.text:00000000000110F0
.text:00000000000110F0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000110F0                 public x2nrealloc
.text:00000000000110F0 x2nrealloc      proc near
.text:00000000000110F0 ; __unwind {
.text:00000000000110F0                 test    rdi, rdi
.text:00000000000110F3                 mov     r9, rdx
.text:00000000000110F6                 mov     rcx, [rsi]
.text:00000000000110F9                 jz      short loc_11130
.text:00000000000110FB                 xor     edx, edx
.text:00000000000110FD                 mov     rax, 5555555555555554h
.text:0000000000011107                 div     r9
.text:000000000001110A                 cmp     rax, rcx
.text:000000000001110D                 jbe     short loc_1114B
.text:000000000001110F                 mov     rax, rcx
.text:0000000000011112                 shr     rax, 1
.text:0000000000011115                 lea     rcx, [rax+rcx+1]
.text:000000000001111A
.text:000000000001111A loc_1111A:                              ; CODE XREF: x2nrealloc+59↓j
.text:000000000001111A                 mov     [rsi], rcx
.text:000000000001111D                 imul    rcx, r9
.text:0000000000011121                 mov     rsi, rcx
.text:0000000000011124                 jmp     xrealloc
.text:0000000000011124 ; ---------------------------------------------------------------------------
.text:0000000000011129                 align 10h
.text:0000000000011130
.text:0000000000011130 loc_11130:                              ; CODE XREF: x2nrealloc+9↑j
.text:0000000000011130                 test    rcx, rcx
.text:0000000000011133                 jz      short loc_11158
.text:0000000000011135
.text:0000000000011135 loc_11135:                              ; CODE XREF: x2nrealloc+80↓j
.text:0000000000011135                 mov     rax, rcx
.text:0000000000011138                 mul     r9
.text:000000000001113B                 seto    dl
.text:000000000001113E                 test    rax, rax
.text:0000000000011141                 movzx   edx, dl
.text:0000000000011144                 js      short loc_1114B
.text:0000000000011146                 test    rdx, rdx
.text:0000000000011149                 jz      short loc_1111A
.text:000000000001114B
.text:000000000001114B loc_1114B:                              ; CODE XREF: x2nrealloc+1D↑j
.text:000000000001114B                                         ; x2nrealloc+54↑j
.text:000000000001114B                 sub     rsp, 8
.text:000000000001114F                 call    xalloc_die
.text:000000000001114F ; ---------------------------------------------------------------------------
.text:0000000000011154                 align 8
.text:0000000000011158
.text:0000000000011158 loc_11158:                              ; CODE XREF: x2nrealloc+43↑j
.text:0000000000011158                 xor     edx, edx
.text:000000000001115A                 mov     eax, 80h
.text:000000000001115F                 xor     r8d, r8d
.text:0000000000011162                 div     r9
.text:0000000000011165                 test    rax, rax
.text:0000000000011168                 setz    r8b
.text:000000000001116C                 lea     rcx, [r8+rax]
.text:0000000000011170                 jmp     short loc_11135
.text:0000000000011170 ; } // starts at 110F0
.text:0000000000011170 x2nrealloc      endp
.text:0000000000011170
.text:0000000000011170 ; ---------------------------------------------------------------------------
.text:0000000000011172                 align 20h
.text:0000000000011180
.text:0000000000011180 ; =============== S U B R O U T I N E =======================================
.text:0000000000011180
.text:0000000000011180 ; Attributes: info_from_lumina
.text:0000000000011180
.text:0000000000011180 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000011180                 public x2realloc
.text:0000000000011180 x2realloc       proc near
.text:0000000000011180 ; __unwind {
.text:0000000000011180                 test    rdi, rdi
.text:0000000000011183                 mov     rax, [rsi]
.text:0000000000011186                 jz      short loc_111B0
.text:0000000000011188                 mov     rdx, 5555555555555553h
.text:0000000000011192                 cmp     rax, rdx
.text:0000000000011195                 ja      short loc_111C1
.text:0000000000011197                 mov     rdx, rax
.text:000000000001119A                 shr     rdx, 1
.text:000000000001119D                 lea     rax, [rdx+rax+1]
.text:00000000000111A2
.text:00000000000111A2 loc_111A2:                              ; CODE XREF: x2realloc+3F↓j
.text:00000000000111A2                 mov     [rsi], rax
.text:00000000000111A5                 mov     rsi, rax
.text:00000000000111A8                 jmp     xrealloc
.text:00000000000111A8 ; ---------------------------------------------------------------------------
.text:00000000000111AD                 align 10h
.text:00000000000111B0
.text:00000000000111B0 loc_111B0:                              ; CODE XREF: x2realloc+6↑j
.text:00000000000111B0                 test    rax, rax
.text:00000000000111B3                 mov     edx, 80h
.text:00000000000111B8                 cmovz   rax, rdx
.text:00000000000111BC                 test    rax, rax
.text:00000000000111BF                 jns     short loc_111A2
.text:00000000000111C1
.text:00000000000111C1 loc_111C1:                              ; CODE XREF: x2realloc+15↑j
.text:00000000000111C1                 sub     rsp, 8
.text:00000000000111C5                 call    xalloc_die
.text:00000000000111C5 ; } // starts at 11180
.text:00000000000111C5 x2realloc       endp
.text:00000000000111C5
.text:00000000000111C5 ; ---------------------------------------------------------------------------
.text:00000000000111CA                 align 10h
.text:00000000000111D0
.text:00000000000111D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000111D0
.text:00000000000111D0
.text:00000000000111D0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000111D0                 public xzalloc
.text:00000000000111D0 xzalloc         proc near
.text:00000000000111D0 ; __unwind {
.text:00000000000111D0                 push    rbx
.text:00000000000111D1                 mov     rbx, rdi
.text:00000000000111D4                 call    xmalloc
.text:00000000000111D9                 mov     rdx, rbx        ; n
.text:00000000000111DC                 xor     esi, esi        ; c
.text:00000000000111DE                 mov     rdi, rax        ; s
.text:00000000000111E1                 pop     rbx
.text:00000000000111E2                 jmp     _memset
.text:00000000000111E2 ; } // starts at 111D0
.text:00000000000111E2 xzalloc         endp
.text:00000000000111E2
.text:00000000000111E2 ; ---------------------------------------------------------------------------
.text:00000000000111E7                 align 10h
.text:00000000000111F0
.text:00000000000111F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000111F0
.text:00000000000111F0 ; Attributes: info_from_lumina
.text:00000000000111F0
.text:00000000000111F0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000111F0                 public xcalloc
.text:00000000000111F0 xcalloc         proc near
.text:00000000000111F0 ; __unwind {
.text:00000000000111F0                 mov     rax, rdi
.text:00000000000111F3                 sub     rsp, 8
.text:00000000000111F7                 mul     rsi
.text:00000000000111FA                 seto    dl
.text:00000000000111FD                 test    rax, rax
.text:0000000000011200                 js      short loc_11219
.text:0000000000011202                 movzx   edx, dl
.text:0000000000011205                 test    rdx, rdx
.text:0000000000011208                 jnz     short loc_11219
.text:000000000001120A                 call    _calloc
.text:000000000001120F                 test    rax, rax
.text:0000000000011212                 jz      short loc_11219
.text:0000000000011214                 add     rsp, 8
.text:0000000000011218                 retn
.text:0000000000011219 ; ---------------------------------------------------------------------------
.text:0000000000011219
.text:0000000000011219 loc_11219:                              ; CODE XREF: xcalloc+10↑j
.text:0000000000011219                                         ; xcalloc+18↑j ...
.text:0000000000011219                 call    xalloc_die
.text:0000000000011219 ; } // starts at 111F0
.text:0000000000011219 xcalloc         endp
.text:0000000000011219
.text:0000000000011219 ; ---------------------------------------------------------------------------
.text:000000000001121E                 align 20h
.text:0000000000011220
.text:0000000000011220 ; =============== S U B R O U T I N E =======================================
.text:0000000000011220
.text:0000000000011220 ; Attributes: info_from_lumina
.text:0000000000011220
.text:0000000000011220 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000011220                 public xmemdup
.text:0000000000011220 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000011220                                         ; xstrdup+11↓j
.text:0000000000011220 ; __unwind {
.text:0000000000011220                 push    rbp
.text:0000000000011221                 push    rbx
.text:0000000000011222                 mov     rbp, rdi
.text:0000000000011225                 mov     rdi, rsi
.text:0000000000011228                 mov     rbx, rsi
.text:000000000001122B                 sub     rsp, 8
.text:000000000001122F                 call    xmalloc
.text:0000000000011234                 add     rsp, 8
.text:0000000000011238                 mov     rdx, rbx        ; n
.text:000000000001123B                 mov     rsi, rbp        ; src
.text:000000000001123E                 pop     rbx
.text:000000000001123F                 pop     rbp
.text:0000000000011240                 mov     rdi, rax        ; dest
.text:0000000000011243                 jmp     _memcpy
.text:0000000000011243 ; } // starts at 11220
.text:0000000000011243 xmemdup         endp
.text:0000000000011243
.text:0000000000011243 ; ---------------------------------------------------------------------------
.text:0000000000011248                 align 10h
.text:0000000000011250
.text:0000000000011250 ; =============== S U B R O U T I N E =======================================
.text:0000000000011250
.text:0000000000011250
.text:0000000000011250 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000011250                 public xstrdup
.text:0000000000011250 xstrdup         proc near               ; CODE XREF: decode_preserve_arg+24↑p
.text:0000000000011250                                         ; do_copy+2EF↑p ...
.text:0000000000011250 ; __unwind {
.text:0000000000011250                 push    rbx
.text:0000000000011251                 mov     rbx, rdi
.text:0000000000011254                 call    _strlen
.text:0000000000011259                 mov     rdi, rbx        ; src
.text:000000000001125C                 lea     rsi, [rax+1]    ; n
.text:0000000000011260                 pop     rbx
.text:0000000000011261                 jmp     short xmemdup
.text:0000000000011261 ; } // starts at 11250
.text:0000000000011261 xstrdup         endp
.text:0000000000011261
.text:0000000000011261 ; ---------------------------------------------------------------------------
.text:0000000000011263                 align 10h
.text:0000000000011270
.text:0000000000011270 ; =============== S U B R O U T I N E =======================================
.text:0000000000011270
.text:0000000000011270 ; Attributes: noreturn info_from_lumina
.text:0000000000011270
.text:0000000000011270 ; void __cdecl xalloc_die()
.text:0000000000011270                 public xalloc_die
.text:0000000000011270 xalloc_die      proc near               ; CODE XREF: remember_copied:loc_9E94↑p
.text:0000000000011270                                         ; hash_init:loc_9ED6↑p ...
.text:0000000000011270 ; __unwind {
.text:0000000000011270                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000011277                 sub     rsp, 8
.text:000000000001127B                 mov     edx, 5          ; category
.text:0000000000011280                 xor     edi, edi        ; domainname
.text:0000000000011282                 call    _dcgettext
.text:0000000000011287                 mov     edi, cs:exit_failure ; status
.text:000000000001128D                 lea     rdx, aS_0+2     ; format
.text:0000000000011294                 mov     rcx, rax
.text:0000000000011297                 xor     esi, esi        ; errnum
.text:0000000000011299                 xor     eax, eax
.text:000000000001129B                 call    _error
.text:00000000000112A0                 call    _abort
.text:00000000000112A0 ; } // starts at 11270
.text:00000000000112A0 xalloc_die      endp
.text:00000000000112A0
.text:00000000000112A0 ; ---------------------------------------------------------------------------
.text:00000000000112A5                 align 10h
.text:00000000000112B0
.text:00000000000112B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000112B0
.text:00000000000112B0
.text:00000000000112B0                 public yesno
.text:00000000000112B0 yesno           proc near               ; CODE XREF: overwrite_ok_isra_12:loc_510E↑p
.text:00000000000112B0
.text:00000000000112B0 lineptr         = qword ptr -20h
.text:00000000000112B0 n               = qword ptr -18h
.text:00000000000112B0 var_10          = qword ptr -10h
.text:00000000000112B0
.text:00000000000112B0 ; __unwind {
.text:00000000000112B0                 push    rbx
.text:00000000000112B1                 mov     edx, 0Ah        ; delimiter
.text:00000000000112B6                 xor     ebx, ebx
.text:00000000000112B8                 sub     rsp, 20h
.text:00000000000112BC                 mov     rcx, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000112C3                 lea     rsi, [rsp+28h+n] ; n
.text:00000000000112C8                 lea     rdi, [rsp+28h+lineptr] ; lineptr
.text:00000000000112CD                 mov     [rsp+28h+lineptr], 0
.text:00000000000112D6                 mov     rax, fs:28h
.text:00000000000112DF                 mov     [rsp+28h+var_10], rax
.text:00000000000112E4                 xor     eax, eax
.text:00000000000112E6                 mov     [rsp+28h+n], 0
.text:00000000000112EF                 call    ___getdelim
.text:00000000000112F4                 test    rax, rax
.text:00000000000112F7                 jle     short loc_11312
.text:00000000000112F9                 mov     rdi, [rsp+28h+lineptr] ; response
.text:00000000000112FE                 lea     rax, [rdi+rax-1]
.text:0000000000011303                 cmp     byte ptr [rax], 0Ah
.text:0000000000011306                 jz      short loc_11338
.text:0000000000011308
.text:0000000000011308 loc_11308:                              ; CODE XREF: yesno+90↓j
.text:0000000000011308                 call    _rpmatch
.text:000000000001130D                 test    eax, eax
.text:000000000001130F                 setnle  bl
.text:0000000000011312
.text:0000000000011312 loc_11312:                              ; CODE XREF: yesno+47↑j
.text:0000000000011312                 mov     rdi, [rsp+28h+lineptr] ; ptr
.text:0000000000011317                 call    free
.text:000000000001131C                 mov     rdx, [rsp+28h+var_10]
.text:0000000000011321                 xor     rdx, fs:28h
.text:000000000001132A                 mov     eax, ebx
.text:000000000001132C                 jnz     short loc_11342
.text:000000000001132E                 add     rsp, 20h
.text:0000000000011332                 pop     rbx
.text:0000000000011333                 retn
.text:0000000000011333 ; ---------------------------------------------------------------------------
.text:0000000000011334                 align 8
.text:0000000000011338
.text:0000000000011338 loc_11338:                              ; CODE XREF: yesno+56↑j
.text:0000000000011338                 mov     byte ptr [rax], 0
.text:000000000001133B                 mov     rdi, [rsp+28h+lineptr]
.text:0000000000011340                 jmp     short loc_11308
.text:0000000000011342 ; ---------------------------------------------------------------------------
.text:0000000000011342
.text:0000000000011342 loc_11342:                              ; CODE XREF: yesno+7C↑j
.text:0000000000011342                 call    ___stack_chk_fail
.text:0000000000011342 ; } // starts at 112B0
.text:0000000000011342 yesno           endp
.text:0000000000011342
.text:0000000000011342 ; ---------------------------------------------------------------------------
.text:0000000000011347                 align 10h
.text:0000000000011350
.text:0000000000011350 ; =============== S U B R O U T I N E =======================================
.text:0000000000011350
.text:0000000000011350 ; Attributes: info_from_lumina
.text:0000000000011350
.text:0000000000011350 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000011350                 public rpl_fflush
.text:0000000000011350 rpl_fflush      proc near               ; CODE XREF: close_stdin:loc_B308↑p
.text:0000000000011350                                         ; rpl_fclose+1F↓p
.text:0000000000011350 ; __unwind {
.text:0000000000011350                 test    rdi, rdi
.text:0000000000011353                 push    rbx
.text:0000000000011354                 mov     rbx, rdi
.text:0000000000011357                 jz      short loc_1136A
.text:0000000000011359                 call    ___freading
.text:000000000001135E                 test    eax, eax
.text:0000000000011360                 jz      short loc_1136A
.text:0000000000011362                 test    dword ptr [rbx], 100h
.text:0000000000011368                 jnz     short loc_11378
.text:000000000001136A
.text:000000000001136A loc_1136A:                              ; CODE XREF: rpl_fflush+7↑j
.text:000000000001136A                                         ; rpl_fflush+10↑j
.text:000000000001136A                 mov     rdi, rbx        ; stream
.text:000000000001136D                 pop     rbx
.text:000000000001136E                 jmp     _fflush
.text:000000000001136E ; ---------------------------------------------------------------------------
.text:0000000000011373                 align 8
.text:0000000000011378
.text:0000000000011378 loc_11378:                              ; CODE XREF: rpl_fflush+18↑j
.text:0000000000011378                 mov     rdi, rbx
.text:000000000001137B                 mov     edx, 1
.text:0000000000011380                 xor     esi, esi
.text:0000000000011382                 call    rpl_fseeko
.text:0000000000011387                 mov     rdi, rbx        ; stream
.text:000000000001138A                 pop     rbx
.text:000000000001138B                 jmp     _fflush
.text:000000000001138B ; } // starts at 11350
.text:000000000001138B rpl_fflush      endp
.text:000000000001138B
.text:0000000000011390
.text:0000000000011390 ; =============== S U B R O U T I N E =======================================
.text:0000000000011390
.text:0000000000011390
.text:0000000000011390                 public freadahead
.text:0000000000011390 freadahead      proc near               ; CODE XREF: close_stdin+E↑p
.text:0000000000011390 ; __unwind {
.text:0000000000011390                 xor     eax, eax
.text:0000000000011392                 mov     rcx, [rdi+20h]
.text:0000000000011396                 cmp     [rdi+28h], rcx
.text:000000000001139A                 ja      short locret_113B7
.text:000000000001139C                 mov     rax, [rdi+10h]
.text:00000000000113A0                 sub     rax, [rdi+8]
.text:00000000000113A4                 test    dword ptr [rdi], 100h
.text:00000000000113AA                 jz      short locret_113B7
.text:00000000000113AC                 mov     rdx, [rdi+58h]
.text:00000000000113B0                 sub     rdx, [rdi+48h]
.text:00000000000113B4                 add     rax, rdx
.text:00000000000113B7
.text:00000000000113B7 locret_113B7:                           ; CODE XREF: freadahead+A↑j
.text:00000000000113B7                                         ; freadahead+1A↑j
.text:00000000000113B7                 rep retn
.text:00000000000113B7 ; } // starts at 11390
.text:00000000000113B7 freadahead      endp
.text:00000000000113B7
.text:00000000000113B7 ; ---------------------------------------------------------------------------
.text:00000000000113B9                 align 20h
.text:00000000000113C0
.text:00000000000113C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000113C0
.text:00000000000113C0 ; Attributes: info_from_lumina
.text:00000000000113C0
.text:00000000000113C0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000113C0                 public rpl_fseeko
.text:00000000000113C0 rpl_fseeko      proc near               ; CODE XREF: close_stdin+C2↑p
.text:00000000000113C0                                         ; rpl_fflush+32↑p
.text:00000000000113C0 ; __unwind {
.text:00000000000113C0                 mov     rax, [rdi+8]
.text:00000000000113C4                 cmp     [rdi+10h], rax
.text:00000000000113C8                 jz      short loc_113D0
.text:00000000000113CA
.text:00000000000113CA loc_113CA:                              ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000113CA                                         ; rpl_fseeko+1F↓j
.text:00000000000113CA                 jmp     _fseeko
.text:00000000000113CA ; ---------------------------------------------------------------------------
.text:00000000000113CF                 align 10h
.text:00000000000113D0
.text:00000000000113D0 loc_113D0:                              ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000113D0                 mov     rax, [rdi+20h]
.text:00000000000113D4                 cmp     [rdi+28h], rax
.text:00000000000113D8                 jnz     short loc_113CA
.text:00000000000113DA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000113DF                 jnz     short loc_113CA
.text:00000000000113E1                 push    r12
.text:00000000000113E3                 push    rbp
.text:00000000000113E4                 mov     r12d, edx
.text:00000000000113E7                 push    rbx
.text:00000000000113E8                 mov     rbp, rsi
.text:00000000000113EB                 mov     rbx, rdi
.text:00000000000113EE                 call    _fileno
.text:00000000000113F3                 mov     edx, r12d       ; whence
.text:00000000000113F6                 mov     rsi, rbp        ; offset
.text:00000000000113F9                 mov     edi, eax        ; fd
.text:00000000000113FB                 call    _lseek
.text:0000000000011400                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000011404                 jz      short loc_11412
.text:0000000000011406                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000011409                 mov     [rbx+90h], rax
.text:0000000000011410                 xor     eax, eax
.text:0000000000011412
.text:0000000000011412 loc_11412:                              ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000011412                 pop     rbx
.text:0000000000011413                 pop     rbp
.text:0000000000011414                 pop     r12
.text:0000000000011416                 retn
.text:0000000000011416 ; } // starts at 113C0
.text:0000000000011416 rpl_fseeko      endp
.text:0000000000011416
.text:0000000000011416 ; ---------------------------------------------------------------------------
.text:0000000000011417                 align 20h
.text:0000000000011420
.text:0000000000011420 ; =============== S U B R O U T I N E =======================================
.text:0000000000011420
.text:0000000000011420 ; Attributes: info_from_lumina
.text:0000000000011420
.text:0000000000011420 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000011420                 public rpl_mbrtowc
.text:0000000000011420 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000011420
.text:0000000000011420 pwc             = dword ptr -34h
.text:0000000000011420 var_30          = qword ptr -30h
.text:0000000000011420
.text:0000000000011420 ; __unwind {
.text:0000000000011420                 push    r13
.text:0000000000011422                 push    r12
.text:0000000000011424                 mov     r13, rsi
.text:0000000000011427                 push    rbp
.text:0000000000011428                 push    rbx
.text:0000000000011429                 mov     rbx, rdi
.text:000000000001142C                 mov     r12, rdx
.text:000000000001142F                 sub     rsp, 18h
.text:0000000000011433                 mov     rax, fs:28h
.text:000000000001143C                 mov     [rsp+38h+var_30], rax
.text:0000000000011441                 xor     eax, eax
.text:0000000000011443                 lea     rax, [rsp+38h+pwc]
.text:0000000000011448                 test    rdi, rdi
.text:000000000001144B                 cmovz   rbx, rax
.text:000000000001144F                 mov     rdi, rbx        ; pwc
.text:0000000000011452                 call    _mbrtowc
.text:0000000000011457                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000001145B                 mov     rbp, rax
.text:000000000001145E                 jbe     short loc_11480
.text:0000000000011460                 test    r12, r12
.text:0000000000011463                 jz      short loc_11480
.text:0000000000011465                 xor     edi, edi
.text:0000000000011467                 call    hard_locale
.text:000000000001146C                 test    al, al
.text:000000000001146E                 jnz     short loc_11480
.text:0000000000011470                 movzx   eax, byte ptr [r13+0]
.text:0000000000011475                 mov     ebp, 1
.text:000000000001147A                 mov     [rbx], eax
.text:000000000001147C                 nop     dword ptr [rax+00h]
.text:0000000000011480
.text:0000000000011480 loc_11480:                              ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000011480                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000011480                 mov     rdx, [rsp+38h+var_30]
.text:0000000000011485                 xor     rdx, fs:28h
.text:000000000001148E                 mov     rax, rbp
.text:0000000000011491                 jnz     short loc_1149E
.text:0000000000011493                 add     rsp, 18h
.text:0000000000011497                 pop     rbx
.text:0000000000011498                 pop     rbp
.text:0000000000011499                 pop     r12
.text:000000000001149B                 pop     r13
.text:000000000001149D                 retn
.text:000000000001149E ; ---------------------------------------------------------------------------
.text:000000000001149E
.text:000000000001149E loc_1149E:                              ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000001149E                 call    ___stack_chk_fail
.text:000000000001149E ; } // starts at 11420
.text:000000000001149E rpl_mbrtowc     endp
.text:000000000001149E
.text:000000000001149E ; ---------------------------------------------------------------------------
.text:00000000000114A3                 align 10h
.text:00000000000114B0
.text:00000000000114B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000114B0
.text:00000000000114B0
.text:00000000000114B0                 public free_permission_context
.text:00000000000114B0 free_permission_context proc near       ; CODE XREF: qcopy_acl+45↑p
.text:00000000000114B0                                         ; qset_acl+31↑p
.text:00000000000114B0 ; __unwind {
.text:00000000000114B0                 rep retn
.text:00000000000114B0 ; } // starts at 114B0
.text:00000000000114B0 free_permission_context endp
.text:00000000000114B0
.text:00000000000114B0 ; ---------------------------------------------------------------------------
.text:00000000000114B2                 align 20h
.text:00000000000114C0
.text:00000000000114C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000114C0
.text:00000000000114C0
.text:00000000000114C0                 public get_permissions
.text:00000000000114C0 get_permissions proc near               ; CODE XREF: qcopy_acl+29↑p
.text:00000000000114C0 ; __unwind {
.text:00000000000114C0                 mov     [rcx], edx
.text:00000000000114C2                 xor     eax, eax
.text:00000000000114C4                 retn
.text:00000000000114C4 ; } // starts at 114C0
.text:00000000000114C4 get_permissions endp
.text:00000000000114C4
.text:00000000000114C4 ; ---------------------------------------------------------------------------
.text:00000000000114C5                 align 10h
.text:00000000000114D0
.text:00000000000114D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000114D0
.text:00000000000114D0
.text:00000000000114D0                 public chmod_or_fchmod
.text:00000000000114D0 chmod_or_fchmod proc near               ; CODE XREF: set_permissions+E↓p
.text:00000000000114D0 ; __unwind {
.text:00000000000114D0                 mov     eax, esi
.text:00000000000114D2                 mov     esi, edx        ; mode
.text:00000000000114D4                 cmp     eax, 0FFFFFFFFh
.text:00000000000114D7                 jz      short loc_114E0
.text:00000000000114D9                 mov     edi, eax        ; file
.text:00000000000114DB                 jmp     _fchmod
.text:00000000000114E0 ; ---------------------------------------------------------------------------
.text:00000000000114E0
.text:00000000000114E0 loc_114E0:                              ; CODE XREF: chmod_or_fchmod+7↑j
.text:00000000000114E0                 jmp     _chmod
.text:00000000000114E0 ; } // starts at 114D0
.text:00000000000114E0 chmod_or_fchmod endp
.text:00000000000114E0
.text:00000000000114E0 ; ---------------------------------------------------------------------------
.text:00000000000114E5                 align 10h
.text:00000000000114F0
.text:00000000000114F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000114F0
.text:00000000000114F0 ; Attributes: info_from_lumina
.text:00000000000114F0
.text:00000000000114F0                 public set_permissions
.text:00000000000114F0 set_permissions proc near               ; CODE XREF: qcopy_acl+3B↑p
.text:00000000000114F0                                         ; qset_acl+27↑p
.text:00000000000114F0 ; __unwind {
.text:00000000000114F0                 sub     rsp, 8
.text:00000000000114F4                 mov     rax, rsi
.text:00000000000114F7                 mov     esi, edx
.text:00000000000114F9                 mov     edx, [rdi]
.text:00000000000114FB                 mov     rdi, rax
.text:00000000000114FE                 call    chmod_or_fchmod
.text:0000000000011503                 test    eax, eax
.text:0000000000011505                 setnz   al
.text:0000000000011508                 add     rsp, 8
.text:000000000001150C                 movzx   eax, al
.text:000000000001150F                 neg     eax
.text:0000000000011511                 retn
.text:0000000000011511 ; } // starts at 114F0
.text:0000000000011511 set_permissions endp
.text:0000000000011511
.text:0000000000011511 ; ---------------------------------------------------------------------------
.text:0000000000011512                 align 20h
.text:0000000000011520
.text:0000000000011520 ; =============== S U B R O U T I N E =======================================
.text:0000000000011520
.text:0000000000011520 ; Attributes: info_from_lumina
.text:0000000000011520
.text:0000000000011520 ; int __fastcall close_stream(FILE *stream)
.text:0000000000011520                 public close_stream
.text:0000000000011520 close_stream    proc near               ; CODE XREF: close_stdin+1F↑p
.text:0000000000011520                                         ; close_stdin+4C↑p ...
.text:0000000000011520 ; __unwind {
.text:0000000000011520                 push    r12
.text:0000000000011522                 push    rbp
.text:0000000000011523                 mov     rbp, rdi
.text:0000000000011526                 push    rbx
.text:0000000000011527                 call    ___fpending
.text:000000000001152C                 mov     ebx, [rbp+0]
.text:000000000001152F                 mov     rdi, rbp        ; stream
.text:0000000000011532                 mov     r12, rax
.text:0000000000011535                 call    rpl_fclose
.text:000000000001153A                 and     ebx, 20h
.text:000000000001153D                 test    ebx, ebx
.text:000000000001153F                 jnz     short loc_11558
.text:0000000000011541                 test    eax, eax
.text:0000000000011543                 jz      short loc_1154F
.text:0000000000011545                 test    r12, r12
.text:0000000000011548                 mov     eax, 0FFFFFFFFh
.text:000000000001154D                 jz      short loc_11588
.text:000000000001154F
.text:000000000001154F loc_1154F:                              ; CODE XREF: close_stream+23↑j
.text:000000000001154F                 pop     rbx
.text:0000000000011550                 pop     rbp
.text:0000000000011551                 pop     r12
.text:0000000000011553                 retn
.text:0000000000011553 ; ---------------------------------------------------------------------------
.text:0000000000011554                 align 8
.text:0000000000011558
.text:0000000000011558 loc_11558:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000011558                 test    eax, eax
.text:000000000001155A                 jnz     short loc_11578
.text:000000000001155C                 call    ___errno_location
.text:0000000000011561                 mov     dword ptr [rax], 0
.text:0000000000011567                 mov     eax, 0FFFFFFFFh
.text:000000000001156C                 pop     rbx
.text:000000000001156D                 pop     rbp
.text:000000000001156E                 pop     r12
.text:0000000000011570                 retn
.text:0000000000011570 ; ---------------------------------------------------------------------------
.text:0000000000011571                 align 8
.text:0000000000011578
.text:0000000000011578 loc_11578:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000011578                 pop     rbx
.text:0000000000011579                 mov     eax, 0FFFFFFFFh
.text:000000000001157E                 pop     rbp
.text:000000000001157F                 pop     r12
.text:0000000000011581                 retn
.text:0000000000011581 ; ---------------------------------------------------------------------------
.text:0000000000011582                 align 8
.text:0000000000011588
.text:0000000000011588 loc_11588:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000011588                 call    ___errno_location
.text:000000000001158D                 cmp     dword ptr [rax], 9
.text:0000000000011590                 pop     rbx
.text:0000000000011591                 pop     rbp
.text:0000000000011592                 pop     r12
.text:0000000000011594                 setnz   al
.text:0000000000011597                 movzx   eax, al
.text:000000000001159A                 neg     eax
.text:000000000001159C                 retn
.text:000000000001159C ; } // starts at 11520
.text:000000000001159C close_stream    endp
.text:000000000001159C
.text:000000000001159C ; ---------------------------------------------------------------------------
.text:000000000001159D                 align 20h
.text:00000000000115A0
.text:00000000000115A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000115A0
.text:00000000000115A0
.text:00000000000115A0                 public opendir_safer
.text:00000000000115A0 opendir_safer   proc near               ; CODE XREF: savedir+6↑p
.text:00000000000115A0 ; __unwind {
.text:00000000000115A0                 push    r14
.text:00000000000115A2                 push    r13
.text:00000000000115A4                 push    r12
.text:00000000000115A6                 push    rbp
.text:00000000000115A7                 push    rbx             ; char
.text:00000000000115A8                 call    _opendir
.text:00000000000115AD                 test    rax, rax
.text:00000000000115B0                 mov     rbx, rax
.text:00000000000115B3                 jz      short loc_115C2
.text:00000000000115B5                 mov     rdi, rax        ; dirp
.text:00000000000115B8                 call    _dirfd
.text:00000000000115BD                 cmp     eax, 2
.text:00000000000115C0                 jbe     short loc_115D0
.text:00000000000115C2
.text:00000000000115C2 loc_115C2:                              ; CODE XREF: opendir_safer+13↑j
.text:00000000000115C2                 mov     rax, rbx
.text:00000000000115C5                 pop     rbx
.text:00000000000115C6                 pop     rbp
.text:00000000000115C7                 pop     r12
.text:00000000000115C9                 pop     r13
.text:00000000000115CB                 pop     r14
.text:00000000000115CD                 retn
.text:00000000000115CD ; ---------------------------------------------------------------------------
.text:00000000000115CE                 align 10h
.text:00000000000115D0
.text:00000000000115D0 loc_115D0:                              ; CODE XREF: opendir_safer+20↑j
.text:00000000000115D0                 mov     edi, eax        ; fd
.text:00000000000115D2                 mov     edx, 3
.text:00000000000115D7                 mov     esi, 406h
.text:00000000000115DC                 xor     eax, eax
.text:00000000000115DE                 call    rpl_fcntl
.text:00000000000115E3                 mov     r12d, eax
.text:00000000000115E6                 call    ___errno_location
.text:00000000000115EB                 test    r12d, r12d
.text:00000000000115EE                 mov     rbp, rax
.text:00000000000115F1                 jns     short loc_11618
.text:00000000000115F3                 mov     r14d, [rax]
.text:00000000000115F6                 xor     r13d, r13d
.text:00000000000115F9
.text:00000000000115F9 loc_115F9:                              ; CODE XREF: opendir_safer+8A↓j
.text:00000000000115F9                                         ; opendir_safer+94↓j
.text:00000000000115F9                 mov     rdi, rbx        ; dirp
.text:00000000000115FC                 mov     rbx, r13
.text:00000000000115FF                 call    _closedir
.text:0000000000011604                 mov     [rbp+0], r14d
.text:0000000000011608                 mov     rax, rbx
.text:000000000001160B                 pop     rbx
.text:000000000001160C                 pop     rbp
.text:000000000001160D                 pop     r12
.text:000000000001160F                 pop     r13
.text:0000000000011611                 pop     r14
.text:0000000000011613                 retn
.text:0000000000011613 ; ---------------------------------------------------------------------------
.text:0000000000011614                 align 8
.text:0000000000011618
.text:0000000000011618 loc_11618:                              ; CODE XREF: opendir_safer+51↑j
.text:0000000000011618                 mov     edi, r12d       ; fd
.text:000000000001161B                 call    _fdopendir
.text:0000000000011620                 test    rax, rax
.text:0000000000011623                 mov     r13, rax
.text:0000000000011626                 mov     r14d, [rbp+0]
.text:000000000001162A                 jnz     short loc_115F9
.text:000000000001162C                 mov     edi, r12d       ; fd
.text:000000000001162F                 call    _close
.text:0000000000011634                 jmp     short loc_115F9
.text:0000000000011634 ; } // starts at 115A0
.text:0000000000011634 opendir_safer   endp
.text:0000000000011634
.text:0000000000011634 ; ---------------------------------------------------------------------------
.text:0000000000011636                 align 20h
.text:0000000000011640
.text:0000000000011640 ; =============== S U B R O U T I N E =======================================
.text:0000000000011640
.text:0000000000011640
.text:0000000000011640 ; __int64 __fastcall gettime(struct timespec *tp)
.text:0000000000011640                 public gettime
.text:0000000000011640 gettime         proc near               ; CODE XREF: update_timespec+4C↑p
.text:0000000000011640                                         ; update_timespec+B0↑p
.text:0000000000011640 ; __unwind {
.text:0000000000011640                 mov     rsi, rdi        ; tp
.text:0000000000011643                 xor     edi, edi        ; clock_id
.text:0000000000011645                 jmp     _clock_gettime
.text:0000000000011645 ; } // starts at 11640
.text:0000000000011645 gettime         endp
.text:0000000000011645
.text:0000000000011645 ; ---------------------------------------------------------------------------
.text:000000000001164A                 align 10h
.text:0000000000011650
.text:0000000000011650 ; =============== S U B R O U T I N E =======================================
.text:0000000000011650
.text:0000000000011650
.text:0000000000011650                 public current_timespec
.text:0000000000011650 current_timespec proc near
.text:0000000000011650
.text:0000000000011650 var_28          = qword ptr -28h
.text:0000000000011650 var_20          = qword ptr -20h
.text:0000000000011650 var_10          = qword ptr -10h
.text:0000000000011650
.text:0000000000011650 ; __unwind {
.text:0000000000011650                 sub     rsp, 28h
.text:0000000000011654                 xor     edi, edi        ; clock_id
.text:0000000000011656                 mov     rsi, rsp        ; tp
.text:0000000000011659                 mov     rax, fs:28h
.text:0000000000011662                 mov     [rsp+28h+var_10], rax
.text:0000000000011667                 xor     eax, eax
.text:0000000000011669                 call    _clock_gettime
.text:000000000001166E                 mov     rcx, [rsp+28h+var_10]
.text:0000000000011673                 xor     rcx, fs:28h
.text:000000000001167C                 mov     rax, [rsp+28h+var_28]
.text:0000000000011680                 mov     rdx, [rsp+28h+var_20]
.text:0000000000011685                 jnz     short loc_1168C
.text:0000000000011687                 add     rsp, 28h
.text:000000000001168B                 retn
.text:000000000001168C ; ---------------------------------------------------------------------------
.text:000000000001168C
.text:000000000001168C loc_1168C:                              ; CODE XREF: current_timespec+35↑j
.text:000000000001168C                 call    ___stack_chk_fail
.text:000000000001168C ; } // starts at 11650
.text:000000000001168C current_timespec endp
.text:000000000001168C
.text:000000000001168C ; ---------------------------------------------------------------------------
.text:0000000000011691                 align 20h
.text:00000000000116A0
.text:00000000000116A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000116A0
.text:00000000000116A0
.text:00000000000116A0                 public hard_locale
.text:00000000000116A0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000116A0 ; __unwind {
.text:00000000000116A0                 sub     rsp, 8
.text:00000000000116A4                 xor     esi, esi        ; locale
.text:00000000000116A6                 call    _setlocale
.text:00000000000116AB                 mov     rdx, rax
.text:00000000000116AE                 mov     eax, 1
.text:00000000000116B3                 test    rdx, rdx
.text:00000000000116B6                 jz      short loc_116D5
.text:00000000000116B8                 lea     rdi, aC         ; "C"
.text:00000000000116BF                 mov     ecx, 2
.text:00000000000116C4                 mov     rsi, rdx
.text:00000000000116C7                 repe cmpsb
.text:00000000000116C9                 setnbe  cl
.text:00000000000116CC                 sbb     cl, 0
.text:00000000000116CF                 xor     eax, eax
.text:00000000000116D1                 test    cl, cl
.text:00000000000116D3                 jnz     short loc_116E0
.text:00000000000116D5
.text:00000000000116D5 loc_116D5:                              ; CODE XREF: hard_locale+16↑j
.text:00000000000116D5                 add     rsp, 8
.text:00000000000116D9                 retn
.text:00000000000116D9 ; ---------------------------------------------------------------------------
.text:00000000000116DA                 align 20h
.text:00000000000116E0
.text:00000000000116E0 loc_116E0:                              ; CODE XREF: hard_locale+33↑j
.text:00000000000116E0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000116E7                 mov     ecx, 6
.text:00000000000116EC                 mov     rsi, rdx
.text:00000000000116EF                 repe cmpsb
.text:00000000000116F1                 setnbe  al
.text:00000000000116F4                 sbb     al, 0
.text:00000000000116F6                 test    al, al
.text:00000000000116F8                 setnz   al
.text:00000000000116FB                 add     rsp, 8
.text:00000000000116FF                 retn
.text:00000000000116FF ; } // starts at 116A0
.text:00000000000116FF hard_locale     endp
.text:00000000000116FF
.text:0000000000011700
.text:0000000000011700 ; =============== S U B R O U T I N E =======================================
.text:0000000000011700
.text:0000000000011700 ; Attributes: info_from_lumina
.text:0000000000011700
.text:0000000000011700 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:0000000000011700                 public hash_pjw
.text:0000000000011700 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:0000000000011700 ; __unwind {
.text:0000000000011700                 movsx   rcx, byte ptr [rdi]
.text:0000000000011704                 test    cl, cl
.text:0000000000011706                 jz      short loc_11730
.text:0000000000011708                 xor     eax, eax
.text:000000000001170A                 nop     word ptr [rax+rax+00h]
.text:0000000000011710
.text:0000000000011710 loc_11710:                              ; CODE XREF: hash_pjw+21↓j
.text:0000000000011710                 rol     rax, 9
.text:0000000000011714                 add     rdi, 1
.text:0000000000011718                 add     rax, rcx
.text:000000000001171B                 movsx   rcx, byte ptr [rdi]
.text:000000000001171F                 test    cl, cl
.text:0000000000011721                 jnz     short loc_11710
.text:0000000000011723                 xor     edx, edx
.text:0000000000011725                 div     rsi
.text:0000000000011728                 mov     rax, rdx
.text:000000000001172B                 retn
.text:000000000001172B ; ---------------------------------------------------------------------------
.text:000000000001172C                 align 10h
.text:0000000000011730
.text:0000000000011730 loc_11730:                              ; CODE XREF: hash_pjw+6↑j
.text:0000000000011730                 xor     edx, edx
.text:0000000000011732                 mov     rax, rdx
.text:0000000000011735                 retn
.text:0000000000011735 ; } // starts at 11700
.text:0000000000011735 hash_pjw        endp
.text:0000000000011735
.text:0000000000011735 ; ---------------------------------------------------------------------------
.text:0000000000011736                 align 20h
.text:0000000000011740
.text:0000000000011740 ; =============== S U B R O U T I N E =======================================
.text:0000000000011740
.text:0000000000011740
.text:0000000000011740                 public locale_charset
.text:0000000000011740 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000011740 ; __unwind {
.text:0000000000011740                 sub     rsp, 8
.text:0000000000011744                 mov     edi, 0Eh        ; item
.text:0000000000011749                 call    _nl_langinfo
.text:000000000001174E                 test    rax, rax
.text:0000000000011751                 jz      short loc_11770
.text:0000000000011753                 cmp     byte ptr [rax], 0
.text:0000000000011756                 lea     rdx, aAscii     ; "ASCII"
.text:000000000001175D                 cmovz   rax, rdx
.text:0000000000011761                 add     rsp, 8
.text:0000000000011765                 retn
.text:0000000000011765 ; ---------------------------------------------------------------------------
.text:0000000000011766                 align 10h
.text:0000000000011770
.text:0000000000011770 loc_11770:                              ; CODE XREF: locale_charset+11↑j
.text:0000000000011770                 lea     rax, aAscii     ; "ASCII"
.text:0000000000011777                 add     rsp, 8
.text:000000000001177B                 retn
.text:000000000001177B ; } // starts at 11740
.text:000000000001177B locale_charset  endp
.text:000000000001177B
.text:000000000001177B ; ---------------------------------------------------------------------------
.text:000000000001177C                 align 20h
.text:0000000000011780
.text:0000000000011780 ; =============== S U B R O U T I N E =======================================
.text:0000000000011780
.text:0000000000011780
.text:0000000000011780                 public openat_safer
.text:0000000000011780 openat_safer    proc near               ; CODE XREF: opendirat+15↑p
.text:0000000000011780
.text:0000000000011780 var_58          = dword ptr -58h
.text:0000000000011780 var_50          = qword ptr -50h
.text:0000000000011780 var_48          = qword ptr -48h
.text:0000000000011780 var_40          = qword ptr -40h
.text:0000000000011780 var_38          = byte ptr -38h
.text:0000000000011780 var_20          = qword ptr -20h
.text:0000000000011780 arg_0           = byte ptr  8
.text:0000000000011780
.text:0000000000011780 ; __unwind {
.text:0000000000011780                 sub     rsp, 58h
.text:0000000000011784                 mov     [rsp+58h+var_20], rcx
.text:0000000000011789                 xor     ecx, ecx
.text:000000000001178B                 mov     rax, fs:28h
.text:0000000000011794                 mov     [rsp+58h+var_40], rax
.text:0000000000011799                 xor     eax, eax
.text:000000000001179B                 test    dl, 40h
.text:000000000001179E                 jnz     short loc_117C8
.text:00000000000117A0
.text:00000000000117A0 loc_117A0:                              ; CODE XREF: openat_safer+67↓j
.text:00000000000117A0                 xor     eax, eax
.text:00000000000117A2                 call    _openat
.text:00000000000117A7                 mov     edi, eax        ; fd
.text:00000000000117A9                 call    fd_safer_flag
.text:00000000000117AE                 mov     rsi, [rsp+58h+var_40]
.text:00000000000117B3                 xor     rsi, fs:28h
.text:00000000000117BC                 jnz     short loc_117E9
.text:00000000000117BE                 add     rsp, 58h
.text:00000000000117C2                 retn
.text:00000000000117C2 ; ---------------------------------------------------------------------------
.text:00000000000117C3                 align 8
.text:00000000000117C8
.text:00000000000117C8 loc_117C8:                              ; CODE XREF: openat_safer+1E↑j
.text:00000000000117C8                 lea     rax, [rsp+58h+arg_0]
.text:00000000000117CD                 mov     [rsp+58h+var_58], 18h
.text:00000000000117D4                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:00000000000117D8                 mov     [rsp+58h+var_50], rax
.text:00000000000117DD                 lea     rax, [rsp+58h+var_38]
.text:00000000000117E2                 mov     [rsp+58h+var_48], rax
.text:00000000000117E7                 jmp     short loc_117A0
.text:00000000000117E9 ; ---------------------------------------------------------------------------
.text:00000000000117E9
.text:00000000000117E9 loc_117E9:                              ; CODE XREF: openat_safer+3C↑j
.text:00000000000117E9                 call    ___stack_chk_fail
.text:00000000000117E9 ; } // starts at 11780
.text:00000000000117E9 openat_safer    endp
.text:00000000000117E9
.text:00000000000117E9 ; ---------------------------------------------------------------------------
.text:00000000000117EE                 align 10h
.text:00000000000117F0
.text:00000000000117F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000117F0
.text:00000000000117F0
.text:00000000000117F0                 public randint_new
.text:00000000000117F0 randint_new     proc near
.text:00000000000117F0 ; __unwind {
.text:00000000000117F0                 push    rbx
.text:00000000000117F1                 mov     rbx, rdi
.text:00000000000117F4                 mov     edi, 18h
.text:00000000000117F9                 call    xmalloc
.text:00000000000117FE                 mov     [rax], rbx
.text:0000000000011801                 mov     qword ptr [rax+10h], 0
.text:0000000000011809                 mov     qword ptr [rax+8], 0
.text:0000000000011811                 pop     rbx
.text:0000000000011812                 retn
.text:0000000000011812 ; } // starts at 117F0
.text:0000000000011812 randint_new     endp
.text:0000000000011812
.text:0000000000011812 ; ---------------------------------------------------------------------------
.text:0000000000011813                 align 20h
.text:0000000000011820
.text:0000000000011820 ; =============== S U B R O U T I N E =======================================
.text:0000000000011820
.text:0000000000011820
.text:0000000000011820                 public randint_all_new
.text:0000000000011820 randint_all_new proc near               ; CODE XREF: try_tempname_len+7B↑p
.text:0000000000011820 ; __unwind {
.text:0000000000011820                 push    rbx
.text:0000000000011821                 call    randread_new
.text:0000000000011826                 test    rax, rax
.text:0000000000011829                 jz      short loc_11850
.text:000000000001182B                 mov     rbx, rax
.text:000000000001182E                 mov     edi, 18h
.text:0000000000011833                 call    xmalloc
.text:0000000000011838                 mov     [rax], rbx
.text:000000000001183B                 mov     qword ptr [rax+10h], 0
.text:0000000000011843                 mov     qword ptr [rax+8], 0
.text:000000000001184B                 pop     rbx
.text:000000000001184C                 retn
.text:000000000001184C ; ---------------------------------------------------------------------------
.text:000000000001184D                 align 10h
.text:0000000000011850
.text:0000000000011850 loc_11850:                              ; CODE XREF: randint_all_new+9↑j
.text:0000000000011850                 xor     eax, eax
.text:0000000000011852                 pop     rbx
.text:0000000000011853                 retn
.text:0000000000011853 ; } // starts at 11820
.text:0000000000011853 randint_all_new endp
.text:0000000000011853
.text:0000000000011853 ; ---------------------------------------------------------------------------
.text:0000000000011854                 align 20h
.text:0000000000011860
.text:0000000000011860 ; =============== S U B R O U T I N E =======================================
.text:0000000000011860
.text:0000000000011860
.text:0000000000011860                 public randint_get_source
.text:0000000000011860 randint_get_source proc near
.text:0000000000011860 ; __unwind {
.text:0000000000011860                 mov     rax, [rdi]
.text:0000000000011863                 retn
.text:0000000000011863 ; } // starts at 11860
.text:0000000000011863 randint_get_source endp
.text:0000000000011863
.text:0000000000011863 ; ---------------------------------------------------------------------------
.text:0000000000011864                 align 10h
.text:0000000000011870
.text:0000000000011870 ; =============== S U B R O U T I N E =======================================
.text:0000000000011870
.text:0000000000011870
.text:0000000000011870                 public randint_genmax
.text:0000000000011870 randint_genmax  proc near               ; CODE XREF: try_tempname_len+C4↑p
.text:0000000000011870
.text:0000000000011870 var_50          = qword ptr -50h
.text:0000000000011870 var_48          = byte ptr -48h
.text:0000000000011870 var_40          = qword ptr -40h
.text:0000000000011870
.text:0000000000011870 ; __unwind {
.text:0000000000011870                 push    r15
.text:0000000000011872                 push    r14
.text:0000000000011874                 lea     r15, [rsi+1]
.text:0000000000011878                 push    r13
.text:000000000001187A                 push    r12
.text:000000000001187C                 mov     r13, rdi
.text:000000000001187F                 push    rbp
.text:0000000000011880                 push    rbx
.text:0000000000011881                 mov     r14, rsi
.text:0000000000011884                 sub     rsp, 28h
.text:0000000000011888                 mov     rbp, [rdi+8]
.text:000000000001188C                 mov     rbx, [rdi+10h]
.text:0000000000011890                 mov     rax, fs:28h
.text:0000000000011899                 mov     [rsp+58h+var_40], rax
.text:000000000001189E                 xor     eax, eax
.text:00000000000118A0                 mov     rax, [rdi]
.text:00000000000118A3                 lea     r12, [rsp+58h+var_48]
.text:00000000000118A8                 mov     [rsp+58h+var_50], rax
.text:00000000000118AD                 jmp     short loc_118E5
.text:00000000000118AD ; ---------------------------------------------------------------------------
.text:00000000000118AF                 align 10h
.text:00000000000118B0
.text:00000000000118B0 loc_118B0:                              ; CODE XREF: randint_genmax+78↓j
.text:00000000000118B0                 cmp     rbx, r14
.text:00000000000118B3                 jz      loc_1193F
.text:00000000000118B9
.text:00000000000118B9 loc_118B9:                              ; CODE XREF: randint_genmax+C9↓j
.text:00000000000118B9                 mov     rax, rbx
.text:00000000000118BC                 xor     edx, edx
.text:00000000000118BE                 sub     rax, r14
.text:00000000000118C1                 div     r15
.text:00000000000118C4                 sub     rbx, rdx
.text:00000000000118C7                 mov     rdi, rdx
.text:00000000000118CA                 mov     rsi, rax
.text:00000000000118CD                 xor     edx, edx
.text:00000000000118CF                 mov     rax, rbp
.text:00000000000118D2                 div     r15
.text:00000000000118D5                 cmp     rbp, rbx
.text:00000000000118D8                 jbe     loc_11978
.text:00000000000118DE                 lea     rbx, [rdi-1]
.text:00000000000118E2                 mov     rbp, rdx
.text:00000000000118E5
.text:00000000000118E5 loc_118E5:                              ; CODE XREF: randint_genmax+3D↑j
.text:00000000000118E5                 cmp     rbx, r14
.text:00000000000118E8                 jnb     short loc_118B0
.text:00000000000118EA                 mov     rax, rbx
.text:00000000000118ED                 xor     edx, edx
.text:00000000000118EF                 nop
.text:00000000000118F0
.text:00000000000118F0 loc_118F0:                              ; CODE XREF: randint_genmax+91↓j
.text:00000000000118F0                 shl     rax, 8
.text:00000000000118F4                 add     rdx, 1
.text:00000000000118F8                 add     rax, 0FFh
.text:00000000000118FE                 cmp     r14, rax
.text:0000000000011901                 ja      short loc_118F0
.text:0000000000011903                 mov     rdi, [rsp+58h+var_50]
.text:0000000000011908                 mov     rsi, r12
.text:000000000001190B                 call    randread
.text:0000000000011910                 mov     rax, r12
.text:0000000000011913                 nop     dword ptr [rax+rax+00h]
.text:0000000000011918
.text:0000000000011918 loc_11918:                              ; CODE XREF: randint_genmax+C4↓j
.text:0000000000011918                 movzx   edx, byte ptr [rax]
.text:000000000001191B                 shl     rbx, 8
.text:000000000001191F                 shl     rbp, 8
.text:0000000000011923                 add     rbx, 0FFh
.text:000000000001192A                 add     rax, 1
.text:000000000001192E                 add     rbp, rdx
.text:0000000000011931                 cmp     r14, rbx
.text:0000000000011934                 ja      short loc_11918
.text:0000000000011936                 cmp     rbx, r14
.text:0000000000011939                 jnz     loc_118B9
.text:000000000001193F
.text:000000000001193F loc_1193F:                              ; CODE XREF: randint_genmax+43↑j
.text:000000000001193F                 mov     qword ptr [r13+10h], 0
.text:0000000000011947                 mov     qword ptr [r13+8], 0
.text:000000000001194F
.text:000000000001194F loc_1194F:                              ; CODE XREF: randint_genmax+113↓j
.text:000000000001194F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000011954                 xor     rcx, fs:28h
.text:000000000001195D                 mov     rax, rbp
.text:0000000000011960                 jnz     short loc_11985
.text:0000000000011962                 add     rsp, 28h
.text:0000000000011966                 pop     rbx
.text:0000000000011967                 pop     rbp
.text:0000000000011968                 pop     r12
.text:000000000001196A                 pop     r13
.text:000000000001196C                 pop     r14
.text:000000000001196E                 pop     r15
.text:0000000000011970                 retn
.text:0000000000011970 ; ---------------------------------------------------------------------------
.text:0000000000011971                 align 8
.text:0000000000011978
.text:0000000000011978 loc_11978:                              ; CODE XREF: randint_genmax+68↑j
.text:0000000000011978                 mov     [r13+8], rax
.text:000000000001197C                 mov     [r13+10h], rsi
.text:0000000000011980                 mov     rbp, rdx
.text:0000000000011983                 jmp     short loc_1194F
.text:0000000000011985 ; ---------------------------------------------------------------------------
.text:0000000000011985
.text:0000000000011985 loc_11985:                              ; CODE XREF: randint_genmax+F0↑j
.text:0000000000011985                 call    ___stack_chk_fail
.text:0000000000011985 ; } // starts at 11870
.text:0000000000011985 randint_genmax  endp
.text:0000000000011985
.text:0000000000011985 ; ---------------------------------------------------------------------------
.text:000000000001198A                 align 10h
.text:0000000000011990
.text:0000000000011990 ; =============== S U B R O U T I N E =======================================
.text:0000000000011990
.text:0000000000011990
.text:0000000000011990 ; __int64 __fastcall randint_free(void *ptr)
.text:0000000000011990                 public randint_free
.text:0000000000011990 randint_free    proc near
.text:0000000000011990 ; __unwind {
.text:0000000000011990                 push    rbx
.text:0000000000011991                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011998                 mov     rbx, rdi
.text:000000000001199B                 mov     esi, 18h
.text:00000000000119A0                 call    ___explicit_bzero_chk
.text:00000000000119A5                 mov     rdi, rbx        ; ptr
.text:00000000000119A8                 pop     rbx
.text:00000000000119A9                 jmp     free
.text:00000000000119A9 ; } // starts at 11990
.text:00000000000119A9 randint_free    endp
.text:00000000000119A9
.text:00000000000119A9 ; ---------------------------------------------------------------------------
.text:00000000000119AE                 align 10h
.text:00000000000119B0
.text:00000000000119B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000119B0
.text:00000000000119B0
.text:00000000000119B0 ; __int64 __fastcall randint_all_free(void *ptr)
.text:00000000000119B0                 public randint_all_free
.text:00000000000119B0 randint_all_free proc near              ; CODE XREF: try_tempname_len+102↑p
.text:00000000000119B0                                         ; try_tempname_len+130↑p
.text:00000000000119B0 ; __unwind {
.text:00000000000119B0                 push    r13
.text:00000000000119B2                 push    r12
.text:00000000000119B4                 push    rbp
.text:00000000000119B5                 push    rbx
.text:00000000000119B6                 mov     rbx, rdi
.text:00000000000119B9                 sub     rsp, 8
.text:00000000000119BD                 mov     rdi, [rdi]      ; ptr
.text:00000000000119C0                 call    randread_free
.text:00000000000119C5                 mov     r12d, eax
.text:00000000000119C8                 call    ___errno_location
.text:00000000000119CD                 mov     r13d, [rax]
.text:00000000000119D0                 mov     rdi, rbx
.text:00000000000119D3                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000119DA                 mov     esi, 18h
.text:00000000000119DF                 mov     rbp, rax
.text:00000000000119E2                 call    ___explicit_bzero_chk
.text:00000000000119E7                 mov     rdi, rbx        ; ptr
.text:00000000000119EA                 call    free
.text:00000000000119EF                 mov     [rbp+0], r13d
.text:00000000000119F3                 add     rsp, 8
.text:00000000000119F7                 mov     eax, r12d
.text:00000000000119FA                 pop     rbx
.text:00000000000119FB                 pop     rbp
.text:00000000000119FC                 pop     r12
.text:00000000000119FE                 pop     r13
.text:0000000000011A00                 retn
.text:0000000000011A00 ; } // starts at 119B0
.text:0000000000011A00 randint_all_free endp
.text:0000000000011A00
.text:0000000000011A00 ; ---------------------------------------------------------------------------
.text:0000000000011A01                 align 10h
.text:0000000000011A10
.text:0000000000011A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000011A10
.text:0000000000011A10 ; Attributes: noreturn
.text:0000000000011A10
.text:0000000000011A10 randread_error  proc near               ; DATA XREF: randread_new+5A↓o
.text:0000000000011A10                                         ; randread_new+C4↓o ...
.text:0000000000011A10 ; __unwind {
.text:0000000000011A10                 push    rbp
.text:0000000000011A11                 push    rbx
.text:0000000000011A12                 sub     rsp, 8
.text:0000000000011A16                 test    rdi, rdi
.text:0000000000011A19                 jz      short loc_11A58
.text:0000000000011A1B                 call    quote
.text:0000000000011A20                 mov     rbp, rax
.text:0000000000011A23                 call    ___errno_location
.text:0000000000011A28                 cmp     dword ptr [rax], 0
.text:0000000000011A2B                 mov     rbx, rax
.text:0000000000011A2E                 mov     edx, 5          ; category
.text:0000000000011A33                 jz      short loc_11A5D
.text:0000000000011A35                 lea     rsi, aSReadError ; "%s: read error"
.text:0000000000011A3C                 xor     edi, edi        ; domainname
.text:0000000000011A3E                 call    _dcgettext
.text:0000000000011A43
.text:0000000000011A43 loc_11A43:                              ; CODE XREF: randread_error+5B↓j
.text:0000000000011A43                 mov     edi, cs:exit_failure ; status
.text:0000000000011A49                 mov     esi, [rbx]      ; errnum
.text:0000000000011A4B                 mov     rdx, rax        ; format
.text:0000000000011A4E                 mov     rcx, rbp
.text:0000000000011A51                 xor     eax, eax
.text:0000000000011A53                 call    _error
.text:0000000000011A58
.text:0000000000011A58 loc_11A58:                              ; CODE XREF: randread_error+9↑j
.text:0000000000011A58                 call    _abort
.text:0000000000011A5D ; ---------------------------------------------------------------------------
.text:0000000000011A5D
.text:0000000000011A5D loc_11A5D:                              ; CODE XREF: randread_error+23↑j
.text:0000000000011A5D                 lea     rsi, aSEndOfFile ; "%s: end of file"
.text:0000000000011A64                 xor     edi, edi        ; domainname
.text:0000000000011A66                 call    _dcgettext
.text:0000000000011A6B                 jmp     short loc_11A43
.text:0000000000011A6B ; } // starts at 11A10
.text:0000000000011A6B randread_error  endp
.text:0000000000011A6B
.text:0000000000011A6B ; ---------------------------------------------------------------------------
.text:0000000000011A6D                 align 10h
.text:0000000000011A70
.text:0000000000011A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000011A70
.text:0000000000011A70
.text:0000000000011A70                 public randread_new
.text:0000000000011A70 randread_new    proc near               ; CODE XREF: randint_all_new+1↑p
.text:0000000000011A70
.text:0000000000011A70 var_68          = qword ptr -68h
.text:0000000000011A70 var_60          = qword ptr -60h
.text:0000000000011A70 tv              = timeval ptr -58h
.text:0000000000011A70 var_40          = qword ptr -40h
.text:0000000000011A70
.text:0000000000011A70 ; __unwind {
.text:0000000000011A70                 push    r15
.text:0000000000011A72                 push    r14
.text:0000000000011A74                 push    r13
.text:0000000000011A76                 push    r12
.text:0000000000011A78                 push    rbp
.text:0000000000011A79                 push    rbx
.text:0000000000011A7A                 sub     rsp, 38h
.text:0000000000011A7E                 mov     rax, fs:28h
.text:0000000000011A87                 mov     [rsp+68h+var_40], rax
.text:0000000000011A8C                 xor     eax, eax
.text:0000000000011A8E                 test    rsi, rsi
.text:0000000000011A91                 jz      loc_11BB8
.text:0000000000011A97                 test    rdi, rdi
.text:0000000000011A9A                 mov     r12, rdi
.text:0000000000011A9D                 mov     rbp, rsi
.text:0000000000011AA0                 jz      short loc_11B20
.text:0000000000011AA2                 lea     rsi, aRb        ; "rb"
.text:0000000000011AA9                 call    fopen_safer
.text:0000000000011AAE                 test    rax, rax
.text:0000000000011AB1                 mov     r13, rax
.text:0000000000011AB4                 jz      loc_11CB8
.text:0000000000011ABA                 mov     edi, 1038h
.text:0000000000011ABF                 call    xmalloc
.text:0000000000011AC4                 mov     rbx, rax
.text:0000000000011AC7                 mov     [rax], r13
.text:0000000000011ACA                 lea     rax, randread_error
.text:0000000000011AD1                 cmp     rbp, 1000h
.text:0000000000011AD8                 mov     ecx, 1000h
.text:0000000000011ADD                 lea     rsi, [rbx+18h]  ; buf
.text:0000000000011AE1                 cmovbe  rcx, rbp        ; n
.text:0000000000011AE5                 mov     [rbx+8], rax
.text:0000000000011AE9                 mov     [rbx+10h], r12
.text:0000000000011AED                 xor     edx, edx        ; modes
.text:0000000000011AEF                 mov     rdi, r13        ; stream
.text:0000000000011AF2                 call    _setvbuf
.text:0000000000011AF7
.text:0000000000011AF7 loc_11AF7:                              ; CODE XREF: randread_new+13D↓j
.text:0000000000011AF7                                         ; randread_new+16F↓j ...
.text:0000000000011AF7                 mov     rdx, [rsp+68h+var_40]
.text:0000000000011AFC                 xor     rdx, fs:28h
.text:0000000000011B05                 mov     rax, rbx
.text:0000000000011B08                 jnz     loc_11CBF
.text:0000000000011B0E                 add     rsp, 38h
.text:0000000000011B12                 pop     rbx
.text:0000000000011B13                 pop     rbp
.text:0000000000011B14                 pop     r12
.text:0000000000011B16                 pop     r13
.text:0000000000011B18                 pop     r14
.text:0000000000011B1A                 pop     r15
.text:0000000000011B1C                 retn
.text:0000000000011B1C ; ---------------------------------------------------------------------------
.text:0000000000011B1D                 align 20h
.text:0000000000011B20
.text:0000000000011B20 loc_11B20:                              ; CODE XREF: randread_new+30↑j
.text:0000000000011B20                 mov     edi, 1038h
.text:0000000000011B25                 call    xmalloc
.text:0000000000011B2A                 mov     rbx, rax
.text:0000000000011B2D                 mov     qword ptr [rax], 0
.text:0000000000011B34                 lea     rax, randread_error
.text:0000000000011B3B                 lea     rdi, aDevUrandom ; "/dev/urandom"
.text:0000000000011B42                 xor     esi, esi        ; oflag
.text:0000000000011B44                 mov     qword ptr [rbx+10h], 0
.text:0000000000011B4C                 mov     [rbx+8], rax
.text:0000000000011B50                 mov     qword ptr [rbx+18h], 0
.text:0000000000011B58                 xor     eax, eax
.text:0000000000011B5A                 call    _open
.text:0000000000011B5F                 test    eax, eax
.text:0000000000011B61                 lea     r13, [rbx+20h]
.text:0000000000011B65                 mov     r15d, eax
.text:0000000000011B68                 js      short loc_11BE8
.text:0000000000011B6A                 cmp     rbp, 800h
.text:0000000000011B71                 mov     rdx, rbp
.text:0000000000011B74                 mov     r14d, 800h
.text:0000000000011B7A                 cmova   rdx, r14
.text:0000000000011B7E                 mov     ecx, 1018h
.text:0000000000011B83                 mov     rsi, r13
.text:0000000000011B86                 mov     edi, eax
.text:0000000000011B88                 call    ___read_chk
.text:0000000000011B8D                 mov     edi, r15d       ; fd
.text:0000000000011B90                 mov     rbp, rax
.text:0000000000011B93                 call    _close
.text:0000000000011B98                 cmp     rbp, 7FFh
.text:0000000000011B9F                 jle     loc_11CC4
.text:0000000000011BA5
.text:0000000000011BA5 loc_11BA5:                              ; CODE XREF: randread_new+1F6↓j
.text:0000000000011BA5                                         ; randread_new+223↓j ...
.text:0000000000011BA5                 mov     rdi, r13
.text:0000000000011BA8                 call    isaac_seed
.text:0000000000011BAD                 jmp     loc_11AF7
.text:0000000000011BAD ; ---------------------------------------------------------------------------
.text:0000000000011BB2                 align 8
.text:0000000000011BB8
.text:0000000000011BB8 loc_11BB8:                              ; CODE XREF: randread_new+21↑j
.text:0000000000011BB8                 mov     edi, 1038h
.text:0000000000011BBD                 call    xmalloc
.text:0000000000011BC2                 mov     rbx, rax
.text:0000000000011BC5                 mov     qword ptr [rax], 0
.text:0000000000011BCC                 lea     rax, randread_error
.text:0000000000011BD3                 mov     qword ptr [rbx+10h], 0
.text:0000000000011BDB                 mov     [rbx+8], rax
.text:0000000000011BDF                 jmp     loc_11AF7
.text:0000000000011BDF ; ---------------------------------------------------------------------------
.text:0000000000011BE4                 align 8
.text:0000000000011BE8
.text:0000000000011BE8 loc_11BE8:                              ; CODE XREF: randread_new+F8↑j
.text:0000000000011BE8                 lea     r12, [rsp+68h+tv]
.text:0000000000011BED                 xor     esi, esi        ; tz
.text:0000000000011BEF                 mov     r14d, 18h
.text:0000000000011BF5                 mov     rdi, r12        ; tv
.text:0000000000011BF8                 call    _gettimeofday
.text:0000000000011BFD                 movdqa  xmm0, xmmword ptr [rsp+68h+tv.tv_sec]
.text:0000000000011C03                 movups  xmmword ptr [rbx+20h], xmm0
.text:0000000000011C07                 call    _getpid
.text:0000000000011C0C                 mov     [rbx+30h], eax
.text:0000000000011C0F                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000011C13                 call    _getppid
.text:0000000000011C18                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000011C1C                 mov     [rbx+34h], eax
.text:0000000000011C1F
.text:0000000000011C1F loc_11C1F:                              ; CODE XREF: randread_new+324↓j
.text:0000000000011C1F                 mov     ebp, 800h
.text:0000000000011C24                 mov     eax, 4
.text:0000000000011C29                 sub     rbp, r14
.text:0000000000011C2C                 cmp     rbp, 4
.text:0000000000011C30                 cmova   rbp, rax
.text:0000000000011C34                 call    _getuid
.text:0000000000011C39                 test    ebp, ebp
.text:0000000000011C3B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000011C3F                 lea     rcx, [r13+r14+0]
.text:0000000000011C44                 mov     esi, ebp
.text:0000000000011C46                 jz      short loc_11C5C
.text:0000000000011C48                 xor     eax, eax
.text:0000000000011C4A
.text:0000000000011C4A loc_11C4A:                              ; CODE XREF: randread_new+1EA↓j
.text:0000000000011C4A                 mov     edx, eax
.text:0000000000011C4C                 add     eax, 1
.text:0000000000011C4F                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000011C54                 cmp     eax, esi
.text:0000000000011C56                 mov     [rcx+rdx], dil
.text:0000000000011C5A                 jb      short loc_11C4A
.text:0000000000011C5C
.text:0000000000011C5C loc_11C5C:                              ; CODE XREF: randread_new+1D6↑j
.text:0000000000011C5C                 add     rbp, r14
.text:0000000000011C5F                 cmp     rbp, 7FFh
.text:0000000000011C66                 ja      loc_11BA5
.text:0000000000011C6C                 call    _getgid
.text:0000000000011C71                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000011C75                 mov     eax, 800h
.text:0000000000011C7A                 mov     edx, 4
.text:0000000000011C7F                 sub     rax, rbp
.text:0000000000011C82                 lea     rcx, [r13+rbp+0]
.text:0000000000011C87                 cmp     rax, 4
.text:0000000000011C8B                 cmova   rax, rdx
.text:0000000000011C8F                 test    eax, eax
.text:0000000000011C91                 mov     esi, eax
.text:0000000000011C93                 jz      loc_11BA5
.text:0000000000011C99                 xor     eax, eax
.text:0000000000011C9B
.text:0000000000011C9B loc_11C9B:                              ; CODE XREF: randread_new+23B↓j
.text:0000000000011C9B                 mov     edx, eax
.text:0000000000011C9D                 add     eax, 1
.text:0000000000011CA0                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000011CA5                 cmp     eax, esi
.text:0000000000011CA7                 mov     [rcx+rdx], dil
.text:0000000000011CAB                 jb      short loc_11C9B
.text:0000000000011CAD                 jmp     loc_11BA5
.text:0000000000011CAD ; ---------------------------------------------------------------------------
.text:0000000000011CB2                 align 8
.text:0000000000011CB8
.text:0000000000011CB8 loc_11CB8:                              ; CODE XREF: randread_new+44↑j
.text:0000000000011CB8                 xor     ebx, ebx
.text:0000000000011CBA                 jmp     loc_11AF7
.text:0000000000011CBF ; ---------------------------------------------------------------------------
.text:0000000000011CBF
.text:0000000000011CBF loc_11CBF:                              ; CODE XREF: randread_new+98↑j
.text:0000000000011CBF                 call    ___stack_chk_fail
.text:0000000000011CC4 ; ---------------------------------------------------------------------------
.text:0000000000011CC4
.text:0000000000011CC4 loc_11CC4:                              ; CODE XREF: randread_new+12F↑j
.text:0000000000011CC4                 test    rbp, rbp
.text:0000000000011CC7                 mov     r15, r14
.text:0000000000011CCA                 mov     eax, 10h
.text:0000000000011CCF                 cmovs   rbp, r12
.text:0000000000011CD3                 lea     r12, [rsp+68h+tv]
.text:0000000000011CD8                 sub     r15, rbp
.text:0000000000011CDB                 cmp     r15, 10h
.text:0000000000011CDF                 mov     rdi, r12        ; tv
.text:0000000000011CE2                 cmova   r15, rax
.text:0000000000011CE6                 xor     esi, esi        ; tz
.text:0000000000011CE8                 call    _gettimeofday
.text:0000000000011CED                 lea     rax, [r13+rbp+0]
.text:0000000000011CF2                 add     rbp, r15
.text:0000000000011CF5                 mov     ecx, r15d
.text:0000000000011CF8                 cmp     rbp, 7FFh
.text:0000000000011CFF                 mov     rsi, r12
.text:0000000000011D02                 mov     rdi, rax
.text:0000000000011D05                 rep movsb
.text:0000000000011D07                 ja      loc_11BA5
.text:0000000000011D0D                 mov     r15, r14
.text:0000000000011D10                 mov     r8d, 4
.text:0000000000011D16                 sub     r15, rbp
.text:0000000000011D19                 mov     [rsp+68h+var_60], r8
.text:0000000000011D1E                 cmp     r15, 4
.text:0000000000011D22                 cmova   r15, r8
.text:0000000000011D26                 lea     rdx, [rbp+r15+0]
.text:0000000000011D2B                 add     rbp, r13
.text:0000000000011D2E                 mov     [rsp+68h+var_68], rdx
.text:0000000000011D32                 call    _getpid
.text:0000000000011D37                 mov     rdx, [rsp+68h+var_68]
.text:0000000000011D3B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000011D3F                 mov     ecx, r15d
.text:0000000000011D42                 mov     rdi, rbp
.text:0000000000011D45                 mov     rsi, r12
.text:0000000000011D48                 mov     r8, [rsp+68h+var_60]
.text:0000000000011D4D                 rep movsb
.text:0000000000011D4F                 cmp     rdx, 7FFh
.text:0000000000011D56                 jg      loc_11BA5
.text:0000000000011D5C                 sub     r14, rdx
.text:0000000000011D5F                 cmp     r14, 4
.text:0000000000011D63                 cmova   r14, r8
.text:0000000000011D67                 call    _getppid
.text:0000000000011D6C                 mov     rdx, [rsp+68h+var_68]
.text:0000000000011D70                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000011D74                 mov     ecx, r14d
.text:0000000000011D77                 mov     rsi, r12
.text:0000000000011D7A                 lea     rax, [r13+rdx+0]
.text:0000000000011D7F                 add     r14, rdx
.text:0000000000011D82                 cmp     r14, 7FFh
.text:0000000000011D89                 mov     rdi, rax
.text:0000000000011D8C                 rep movsb
.text:0000000000011D8E                 ja      loc_11BA5
.text:0000000000011D94                 jmp     loc_11C1F
.text:0000000000011D94 ; } // starts at 11A70
.text:0000000000011D94 randread_new    endp
.text:0000000000011D94
.text:0000000000011D94 ; ---------------------------------------------------------------------------
.text:0000000000011D99                 align 20h
.text:0000000000011DA0
.text:0000000000011DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011DA0
.text:0000000000011DA0
.text:0000000000011DA0                 public randread_set_handler
.text:0000000000011DA0 randread_set_handler proc near
.text:0000000000011DA0 ; __unwind {
.text:0000000000011DA0                 mov     [rdi+8], rsi
.text:0000000000011DA4                 retn
.text:0000000000011DA4 ; } // starts at 11DA0
.text:0000000000011DA4 randread_set_handler endp
.text:0000000000011DA4
.text:0000000000011DA4 ; ---------------------------------------------------------------------------
.text:0000000000011DA5                 align 10h
.text:0000000000011DB0
.text:0000000000011DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011DB0
.text:0000000000011DB0
.text:0000000000011DB0                 public randread_set_handler_arg
.text:0000000000011DB0 randread_set_handler_arg proc near
.text:0000000000011DB0 ; __unwind {
.text:0000000000011DB0                 mov     [rdi+10h], rsi
.text:0000000000011DB4                 retn
.text:0000000000011DB4 ; } // starts at 11DB0
.text:0000000000011DB4 randread_set_handler_arg endp
.text:0000000000011DB4
.text:0000000000011DB4 ; ---------------------------------------------------------------------------
.text:0000000000011DB5                 align 20h
.text:0000000000011DC0
.text:0000000000011DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011DC0
.text:0000000000011DC0
.text:0000000000011DC0                 public randread
.text:0000000000011DC0 randread        proc near               ; CODE XREF: randint_genmax+9B↑p
.text:0000000000011DC0
.text:0000000000011DC0 src             = qword ptr -40h
.text:0000000000011DC0
.text:0000000000011DC0 ; __unwind {
.text:0000000000011DC0                 push    r15
.text:0000000000011DC2                 push    r14
.text:0000000000011DC4                 push    r13
.text:0000000000011DC6                 push    r12
.text:0000000000011DC8                 mov     r12, rdi
.text:0000000000011DCB                 push    rbp
.text:0000000000011DCC                 push    rbx
.text:0000000000011DCD                 mov     rbp, rdx
.text:0000000000011DD0                 mov     rbx, rsi
.text:0000000000011DD3                 sub     rsp, 18h
.text:0000000000011DD7                 mov     rcx, [rdi]
.text:0000000000011DDA                 test    rcx, rcx
.text:0000000000011DDD                 mov     [rsp+48h+src], rcx
.text:0000000000011DE2                 jz      short loc_11E48
.text:0000000000011DE4                 call    ___errno_location
.text:0000000000011DE9                 mov     rcx, [rsp+48h+src]
.text:0000000000011DEE                 mov     r13, rax
.text:0000000000011DF1                 jmp     short loc_11E16
.text:0000000000011DF1 ; ---------------------------------------------------------------------------
.text:0000000000011DF3                 align 8
.text:0000000000011DF8
.text:0000000000011DF8 loc_11DF8:                              ; CODE XREF: randread+70↓j
.text:0000000000011DF8                 mov     rax, [r12]
.text:0000000000011DFC                 mov     rdi, [r12+10h]
.text:0000000000011E01                 mov     eax, [rax]
.text:0000000000011E03                 and     eax, 20h
.text:0000000000011E06                 cmovnz  eax, edx
.text:0000000000011E09                 mov     [r13+0], eax
.text:0000000000011E0D                 call    qword ptr [r12+8]
.text:0000000000011E12                 mov     rcx, [r12]      ; stream
.text:0000000000011E16
.text:0000000000011E16 loc_11E16:                              ; CODE XREF: randread+31↑j
.text:0000000000011E16                 mov     rdx, rbp        ; n
.text:0000000000011E19                 mov     rdi, rbx        ; ptr
.text:0000000000011E1C                 mov     esi, 1          ; size
.text:0000000000011E21                 call    _fread_unlocked
.text:0000000000011E26                 add     rbx, rax
.text:0000000000011E29                 sub     rbp, rax
.text:0000000000011E2C                 mov     edx, [r13+0]
.text:0000000000011E30                 jnz     short loc_11DF8
.text:0000000000011E32
.text:0000000000011E32 loc_11E32:                              ; CODE XREF: randread+16E↓j
.text:0000000000011E32                 add     rsp, 18h
.text:0000000000011E36                 pop     rbx
.text:0000000000011E37                 pop     rbp
.text:0000000000011E38                 pop     r12
.text:0000000000011E3A                 pop     r13
.text:0000000000011E3C                 pop     r14
.text:0000000000011E3E                 pop     r15
.text:0000000000011E40                 retn
.text:0000000000011E40 ; ---------------------------------------------------------------------------
.text:0000000000011E41                 align 8
.text:0000000000011E48
.text:0000000000011E48 loc_11E48:                              ; CODE XREF: randread+22↑j
.text:0000000000011E48                 mov     r14, [rdi+18h]
.text:0000000000011E4C                 lea     rax, [rdi+838h]
.text:0000000000011E53                 lea     r13, [rdi+20h]
.text:0000000000011E57                 mov     [rsp+48h+src], rax
.text:0000000000011E5C                 cmp     rdx, r14
.text:0000000000011E5F                 jbe     loc_11F42
.text:0000000000011E65
.text:0000000000011E65 loc_11E65:                              ; CODE XREF: randread+14A↓j
.text:0000000000011E65                 mov     esi, 800h
.text:0000000000011E6A                 mov     rdi, rbx        ; dest
.text:0000000000011E6D                 mov     rdx, r14        ; n
.text:0000000000011E70                 sub     rsi, r14
.text:0000000000011E73                 add     rsi, [rsp+48h+src] ; src
.text:0000000000011E78                 add     rbx, r14
.text:0000000000011E7B                 sub     rbp, r14
.text:0000000000011E7E                 call    _memcpy
.text:0000000000011E83                 test    bl, 7
.text:0000000000011E86                 jnz     short loc_11EF0
.text:0000000000011E88                 cmp     rbp, 7FFh
.text:0000000000011E8F                 jbe     loc_11F33
.text:0000000000011E95                 lea     r15, [rbp-800h]
.text:0000000000011E9C                 mov     r14, r15
.text:0000000000011E9F                 and     r14d, 7FFh
.text:0000000000011EA6                 jmp     short loc_11EBC
.text:0000000000011EA6 ; ---------------------------------------------------------------------------
.text:0000000000011EA8                 align 10h
.text:0000000000011EB0
.text:0000000000011EB0 loc_11EB0:                              ; CODE XREF: randread+114↓j
.text:0000000000011EB0                 cmp     r15, r14
.text:0000000000011EB3                 jz      short loc_11EF0
.text:0000000000011EB5                 sub     r15, 800h
.text:0000000000011EBC
.text:0000000000011EBC loc_11EBC:                              ; CODE XREF: randread+E6↑j
.text:0000000000011EBC                 mov     rsi, rbx
.text:0000000000011EBF                 mov     rdi, r13
.text:0000000000011EC2                 add     rbx, 800h
.text:0000000000011EC9                 call    isaac_refill
.text:0000000000011ECE                 test    r15, r15
.text:0000000000011ED1                 mov     rbp, r15
.text:0000000000011ED4                 jnz     short loc_11EB0
.text:0000000000011ED6                 mov     qword ptr [r12+18h], 0
.text:0000000000011EDF                 add     rsp, 18h
.text:0000000000011EE3                 pop     rbx
.text:0000000000011EE4                 pop     rbp
.text:0000000000011EE5                 pop     r12
.text:0000000000011EE7                 pop     r13
.text:0000000000011EE9                 pop     r14
.text:0000000000011EEB                 pop     r15
.text:0000000000011EED                 retn
.text:0000000000011EED ; ---------------------------------------------------------------------------
.text:0000000000011EEE                 align 10h
.text:0000000000011EF0
.text:0000000000011EF0 loc_11EF0:                              ; CODE XREF: randread+C6↑j
.text:0000000000011EF0                                         ; randread+F3↑j
.text:0000000000011EF0                 mov     rsi, [rsp+48h+src]
.text:0000000000011EF5                 mov     rdi, r13
.text:0000000000011EF8                 mov     r14d, 800h
.text:0000000000011EFE                 call    isaac_refill
.text:0000000000011F03                 cmp     rbp, 800h
.text:0000000000011F0A                 ja      loc_11E65
.text:0000000000011F10
.text:0000000000011F10 loc_11F10:                              ; CODE XREF: randread+180↓j
.text:0000000000011F10                 mov     r14d, 800h
.text:0000000000011F16
.text:0000000000011F16 loc_11F16:                              ; CODE XREF: randread+194↓j
.text:0000000000011F16                 mov     rsi, [rsp+48h+src] ; src
.text:0000000000011F1B                 mov     rdx, rbp        ; n
.text:0000000000011F1E                 mov     rdi, rbx        ; dest
.text:0000000000011F21                 sub     r14, rbp
.text:0000000000011F24                 call    _memcpy
.text:0000000000011F29                 mov     [r12+18h], r14
.text:0000000000011F2E                 jmp     loc_11E32
.text:0000000000011F33 ; ---------------------------------------------------------------------------
.text:0000000000011F33
.text:0000000000011F33 loc_11F33:                              ; CODE XREF: randread+CF↑j
.text:0000000000011F33                 mov     rsi, [rsp+48h+src]
.text:0000000000011F38                 mov     rdi, r13
.text:0000000000011F3B                 call    isaac_refill
.text:0000000000011F40                 jmp     short loc_11F10
.text:0000000000011F42 ; ---------------------------------------------------------------------------
.text:0000000000011F42
.text:0000000000011F42 loc_11F42:                              ; CODE XREF: randread+9F↑j
.text:0000000000011F42                 mov     r15, rax
.text:0000000000011F45                 sub     r15, r14
.text:0000000000011F48                 lea     rax, [r15+800h]
.text:0000000000011F4F                 mov     [rsp+48h+src], rax
.text:0000000000011F54                 jmp     short loc_11F16
.text:0000000000011F54 ; } // starts at 11DC0
.text:0000000000011F54 randread        endp
.text:0000000000011F54
.text:0000000000011F54 ; ---------------------------------------------------------------------------
.text:0000000000011F56                 align 20h
.text:0000000000011F60
.text:0000000000011F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000011F60
.text:0000000000011F60
.text:0000000000011F60 ; __int64 __fastcall randread_free(void *ptr)
.text:0000000000011F60                 public randread_free
.text:0000000000011F60 randread_free   proc near               ; CODE XREF: randint_all_free+10↑p
.text:0000000000011F60 ; __unwind {
.text:0000000000011F60                 push    rbp
.text:0000000000011F61                 push    rbx
.text:0000000000011F62                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011F69                 mov     rbx, rdi
.text:0000000000011F6C                 mov     esi, 1038h
.text:0000000000011F71                 sub     rsp, 8
.text:0000000000011F75                 mov     rbp, [rdi]
.text:0000000000011F78                 call    ___explicit_bzero_chk
.text:0000000000011F7D                 mov     rdi, rbx        ; ptr
.text:0000000000011F80                 call    free
.text:0000000000011F85                 test    rbp, rbp
.text:0000000000011F88                 jz      short loc_11FA0
.text:0000000000011F8A                 add     rsp, 8
.text:0000000000011F8E                 mov     rdi, rbp        ; stream
.text:0000000000011F91                 pop     rbx
.text:0000000000011F92                 pop     rbp
.text:0000000000011F93                 jmp     rpl_fclose
.text:0000000000011F93 ; ---------------------------------------------------------------------------
.text:0000000000011F98                 align 20h
.text:0000000000011FA0
.text:0000000000011FA0 loc_11FA0:                              ; CODE XREF: randread_free+28↑j
.text:0000000000011FA0                 add     rsp, 8
.text:0000000000011FA4                 xor     eax, eax
.text:0000000000011FA6                 pop     rbx
.text:0000000000011FA7                 pop     rbp
.text:0000000000011FA8                 retn
.text:0000000000011FA8 ; } // starts at 11F60
.text:0000000000011FA8 randread_free   endp
.text:0000000000011FA8
.text:0000000000011FA8 ; ---------------------------------------------------------------------------
.text:0000000000011FA9                 align 10h
.text:0000000000011FB0
.text:0000000000011FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011FB0
.text:0000000000011FB0
.text:0000000000011FB0                 public isaac_refill
.text:0000000000011FB0 isaac_refill    proc near               ; CODE XREF: randread+109↑p
.text:0000000000011FB0                                         ; randread+13E↑p ...
.text:0000000000011FB0 ; __unwind {
.text:0000000000011FB0                 mov     rax, [rdi+810h]
.text:0000000000011FB7                 mov     rdx, [rdi+800h]
.text:0000000000011FBE                 lea     r9, [rdi+400h]
.text:0000000000011FC5                 lea     rcx, [rax+1]
.text:0000000000011FC9                 mov     rax, rdi
.text:0000000000011FCC                 mov     [rdi+810h], rcx
.text:0000000000011FD3                 add     rcx, [rdi+808h]
.text:0000000000011FDA                 nop     word ptr [rax+rax+00h]
.text:0000000000011FE0
.text:0000000000011FE0 loc_11FE0:                              ; CODE XREF: isaac_refill+149↓j
.text:0000000000011FE0                 mov     r8, rdx
.text:0000000000011FE3                 shl     r8, 15h
.text:0000000000011FE7                 xor     rdx, r8
.text:0000000000011FEA                 mov     r8, [rax]
.text:0000000000011FED                 not     rdx
.text:0000000000011FF0                 add     rdx, [rax+400h]
.text:0000000000011FF7                 mov     r10, r8
.text:0000000000011FFA                 and     r10d, 7F8h
.text:0000000000012001                 mov     r11, [rdi+r10]
.text:0000000000012005                 mov     r10, rdx
.text:0000000000012008                 shr     r10, 5
.text:000000000001200C                 add     r11, rdx
.text:000000000001200F                 xor     rdx, r10
.text:0000000000012012                 add     rcx, r11
.text:0000000000012015                 mov     [rax], rcx
.text:0000000000012018                 shr     rcx, 8
.text:000000000001201C                 and     ecx, 7F8h
.text:0000000000012022                 mov     r11, [rdi+rcx]
.text:0000000000012026                 add     r11, r8
.text:0000000000012029                 mov     [rsi], r11
.text:000000000001202C                 add     rdx, [rax+408h]
.text:0000000000012033                 mov     rcx, [rax+8]
.text:0000000000012037                 mov     r10, rdx
.text:000000000001203A                 mov     rdx, rcx
.text:000000000001203D                 and     edx, 7F8h
.text:0000000000012043                 mov     r8, [rdi+rdx]
.text:0000000000012047                 mov     rdx, r10
.text:000000000001204A                 shl     rdx, 0Ch
.text:000000000001204E                 xor     rdx, r10
.text:0000000000012051                 add     r8, r10
.text:0000000000012054                 add     r8, r11
.text:0000000000012057                 mov     [rax+8], r8
.text:000000000001205B                 shr     r8, 8
.text:000000000001205F                 and     r8d, 7F8h
.text:0000000000012066                 add     rcx, [rdi+r8]
.text:000000000001206A                 mov     [rsi+8], rcx
.text:000000000001206E                 mov     r8, [rax+10h]
.text:0000000000012072                 mov     r11, rcx
.text:0000000000012075                 add     rdx, [rax+410h]
.text:000000000001207C                 mov     rcx, r8
.text:000000000001207F                 and     ecx, 7F8h
.text:0000000000012085                 mov     r10, [rdi+rcx]
.text:0000000000012089                 add     r10, rdx
.text:000000000001208C                 mov     rcx, r10
.text:000000000001208F                 add     rcx, r11
.text:0000000000012092                 mov     [rax+10h], rcx
.text:0000000000012096                 shr     rcx, 8
.text:000000000001209A                 and     ecx, 7F8h
.text:00000000000120A0                 mov     r10, [rdi+rcx]
.text:00000000000120A4                 mov     rcx, rdx
.text:00000000000120A7                 shr     rcx, 21h
.text:00000000000120AB                 xor     rdx, rcx
.text:00000000000120AE                 add     r10, r8
.text:00000000000120B1                 mov     [rsi+10h], r10
.text:00000000000120B5                 mov     rcx, [rax+18h]
.text:00000000000120B9                 add     rdx, [rax+418h]
.text:00000000000120C0                 mov     r8, rcx
.text:00000000000120C3                 and     r8d, 7F8h
.text:00000000000120CA                 mov     r11, [rdi+r8]
.text:00000000000120CE                 add     r11, rdx
.text:00000000000120D1                 mov     r8, r11
.text:00000000000120D4                 add     r8, r10
.text:00000000000120D7                 add     rax, 20h ; ' '
.text:00000000000120DB                 add     rsi, 20h ; ' '
.text:00000000000120DF                 mov     [rax-8], r8
.text:00000000000120E3                 shr     r8, 8
.text:00000000000120E7                 and     r8d, 7F8h
.text:00000000000120EE                 add     rcx, [rdi+r8]
.text:00000000000120F2                 mov     [rsi-8], rcx
.text:00000000000120F6                 cmp     rax, r9
.text:00000000000120F9                 jb      loc_11FE0
.text:00000000000120FF                 lea     r9, [rdi+800h]
.text:0000000000012106                 db      2Eh
.text:0000000000012106                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012110
.text:0000000000012110 loc_12110:                              ; CODE XREF: isaac_refill+279↓j
.text:0000000000012110                 mov     r8, rdx
.text:0000000000012113                 shl     r8, 15h
.text:0000000000012117                 xor     rdx, r8
.text:000000000001211A                 mov     r8, [rax]
.text:000000000001211D                 not     rdx
.text:0000000000012120                 add     rdx, [rax-400h]
.text:0000000000012127                 mov     r10, r8
.text:000000000001212A                 and     r10d, 7F8h
.text:0000000000012131                 mov     r11, [rdi+r10]
.text:0000000000012135                 mov     r10, rdx
.text:0000000000012138                 shr     r10, 5
.text:000000000001213C                 add     r11, rdx
.text:000000000001213F                 xor     rdx, r10
.text:0000000000012142                 add     rcx, r11
.text:0000000000012145                 mov     [rax], rcx
.text:0000000000012148                 shr     rcx, 8
.text:000000000001214C                 and     ecx, 7F8h
.text:0000000000012152                 mov     r11, [rdi+rcx]
.text:0000000000012156                 add     r11, r8
.text:0000000000012159                 mov     [rsi], r11
.text:000000000001215C                 add     rdx, [rax-3F8h]
.text:0000000000012163                 mov     rcx, [rax+8]
.text:0000000000012167                 mov     r10, rdx
.text:000000000001216A                 mov     rdx, rcx
.text:000000000001216D                 and     edx, 7F8h
.text:0000000000012173                 mov     r8, [rdi+rdx]
.text:0000000000012177                 mov     rdx, r10
.text:000000000001217A                 shl     rdx, 0Ch
.text:000000000001217E                 xor     rdx, r10
.text:0000000000012181                 add     r8, r10
.text:0000000000012184                 add     r8, r11
.text:0000000000012187                 mov     [rax+8], r8
.text:000000000001218B                 shr     r8, 8
.text:000000000001218F                 and     r8d, 7F8h
.text:0000000000012196                 add     rcx, [rdi+r8]
.text:000000000001219A                 mov     [rsi+8], rcx
.text:000000000001219E                 mov     r8, [rax+10h]
.text:00000000000121A2                 mov     r11, rcx
.text:00000000000121A5                 add     rdx, [rax-3F0h]
.text:00000000000121AC                 mov     rcx, r8
.text:00000000000121AF                 and     ecx, 7F8h
.text:00000000000121B5                 mov     r10, [rdi+rcx]
.text:00000000000121B9                 add     r10, rdx
.text:00000000000121BC                 mov     rcx, r10
.text:00000000000121BF                 add     rcx, r11
.text:00000000000121C2                 mov     [rax+10h], rcx
.text:00000000000121C6                 shr     rcx, 8
.text:00000000000121CA                 and     ecx, 7F8h
.text:00000000000121D0                 mov     r10, [rdi+rcx]
.text:00000000000121D4                 mov     rcx, rdx
.text:00000000000121D7                 shr     rcx, 21h
.text:00000000000121DB                 xor     rdx, rcx
.text:00000000000121DE                 add     r10, r8
.text:00000000000121E1                 mov     [rsi+10h], r10
.text:00000000000121E5                 mov     rcx, [rax+18h]
.text:00000000000121E9                 add     rdx, [rax-3E8h]
.text:00000000000121F0                 mov     r8, rcx
.text:00000000000121F3                 and     r8d, 7F8h
.text:00000000000121FA                 mov     r11, [rdi+r8]
.text:00000000000121FE                 add     r11, rdx
.text:0000000000012201                 mov     r8, r11
.text:0000000000012204                 add     r8, r10
.text:0000000000012207                 add     rax, 20h ; ' '
.text:000000000001220B                 add     rsi, 20h ; ' '
.text:000000000001220F                 mov     [rax-8], r8
.text:0000000000012213                 shr     r8, 8
.text:0000000000012217                 and     r8d, 7F8h
.text:000000000001221E                 add     rcx, [rdi+r8]
.text:0000000000012222                 mov     [rsi-8], rcx
.text:0000000000012226                 cmp     rax, r9
.text:0000000000012229                 jb      loc_12110
.text:000000000001222F                 mov     [rdi+800h], rdx
.text:0000000000012236                 mov     [rdi+808h], rcx
.text:000000000001223D                 retn
.text:000000000001223D ; } // starts at 11FB0
.text:000000000001223D isaac_refill    endp
.text:000000000001223D
.text:000000000001223D ; ---------------------------------------------------------------------------
.text:000000000001223E                 align 20h
.text:0000000000012240
.text:0000000000012240 ; =============== S U B R O U T I N E =======================================
.text:0000000000012240
.text:0000000000012240
.text:0000000000012240                 public isaac_seed
.text:0000000000012240 isaac_seed      proc near               ; CODE XREF: randread_new+138↑p
.text:0000000000012240 ; __unwind {
.text:0000000000012240                 push    r13
.text:0000000000012242                 push    r12
.text:0000000000012244                 lea     r12, [rdi+800h]
.text:000000000001224B                 push    rbp
.text:000000000001224C                 mov     rdx, rdi
.text:000000000001224F                 push    rbx
.text:0000000000012250                 mov     rax, rdi
.text:0000000000012253                 mov     rcx, 98F5704F6C44C0ABh
.text:000000000001225D                 mov     r10, 0AE985BF2CBFC89EDh
.text:0000000000012267                 mov     rbp, 48FE4A0FA5A09315h
.text:0000000000012271                 mov     rsi, 82F053DB8355E0CEh
.text:000000000001227B                 mov     r8, 0B29B2E824A595524h
.text:0000000000012285                 mov     rbx, 8C0EA5053D4712A0h
.text:000000000001228F                 mov     r11, 0B9F8B322C73AC862h
.text:0000000000012299                 mov     r9, 647C4677A2884B7Ch
.text:00000000000122A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000122A8
.text:00000000000122A8 loc_122A8:                              ; CODE XREF: isaac_seed+13A↓j
.text:00000000000122A8                 add     rsi, [rax+20h]
.text:00000000000122AC                 add     rcx, [rax+38h]
.text:00000000000122B0                 mov     r13, [rax]
.text:00000000000122B3                 add     rbp, [rax+28h]
.text:00000000000122B7                 add     r10, [rax+30h]
.text:00000000000122BB                 sub     r13, rsi
.text:00000000000122BE                 add     r9, r13
.text:00000000000122C1                 mov     r13, rcx
.text:00000000000122C4                 shr     r13, 9
.text:00000000000122C8                 add     rcx, r9
.text:00000000000122CB                 xor     rbp, r13
.text:00000000000122CE                 mov     r13, [rax+8]
.text:00000000000122D2                 sub     r13, rbp
.text:00000000000122D5                 add     r11, r13
.text:00000000000122D8                 mov     r13, r9
.text:00000000000122DB                 shl     r13, 9
.text:00000000000122DF                 add     r9, r11
.text:00000000000122E2                 xor     r10, r13
.text:00000000000122E5                 mov     r13, [rax+10h]
.text:00000000000122E9                 sub     r13, r10
.text:00000000000122EC                 add     rbx, r13
.text:00000000000122EF                 mov     r13, r11
.text:00000000000122F2                 shr     r13, 17h
.text:00000000000122F6                 add     r11, rbx
.text:00000000000122F9                 xor     rcx, r13
.text:00000000000122FC                 mov     r13, [rax+18h]
.text:0000000000012300                 sub     r13, rcx
.text:0000000000012303                 add     r8, r13
.text:0000000000012306                 mov     r13, rbx
.text:0000000000012309                 shl     r13, 0Fh
.text:000000000001230D                 add     rbx, r8
.text:0000000000012310                 xor     r9, r13
.text:0000000000012313                 mov     r13, r8
.text:0000000000012316                 sub     rsi, r9
.text:0000000000012319                 shr     r13, 0Eh
.text:000000000001231D                 mov     [rax], r9
.text:0000000000012320                 xor     r11, r13
.text:0000000000012323                 mov     r13, rsi
.text:0000000000012326                 add     r8, rsi
.text:0000000000012329                 sub     rbp, r11
.text:000000000001232C                 shl     r13, 14h
.text:0000000000012330                 mov     [rax+8], r11
.text:0000000000012334                 xor     rbx, r13
.text:0000000000012337                 lea     r13, [rsi+rbp]
.text:000000000001233B                 mov     rsi, rbp
.text:000000000001233E                 sub     r10, rbx
.text:0000000000012341                 shr     rsi, 11h
.text:0000000000012345                 mov     [rax+10h], rbx
.text:0000000000012349                 xor     r8, rsi
.text:000000000001234C                 mov     rsi, r10
.text:000000000001234F                 add     rbp, r10
.text:0000000000012352                 sub     rcx, r8
.text:0000000000012355                 shl     rsi, 0Eh
.text:0000000000012359                 mov     [rax+18h], r8
.text:000000000001235D                 xor     rsi, r13
.text:0000000000012360                 add     r10, rcx
.text:0000000000012363                 mov     [rax+28h], rbp
.text:0000000000012367                 mov     [rax+20h], rsi
.text:000000000001236B                 mov     [rax+30h], r10
.text:000000000001236F                 add     rax, 40h ; '@'
.text:0000000000012373                 mov     [rax-8], rcx
.text:0000000000012377                 cmp     r12, rax
.text:000000000001237A                 jnz     loc_122A8
.text:0000000000012380
.text:0000000000012380 loc_12380:                              ; CODE XREF: isaac_seed+212↓j
.text:0000000000012380                 add     rsi, [rdx+20h]
.text:0000000000012384                 add     rcx, [rdx+38h]
.text:0000000000012388                 mov     r12, [rdx]
.text:000000000001238B                 add     rbp, [rdx+28h]
.text:000000000001238F                 add     r10, [rdx+30h]
.text:0000000000012393                 sub     r12, rsi
.text:0000000000012396                 add     r9, r12
.text:0000000000012399                 mov     r12, rcx
.text:000000000001239C                 shr     r12, 9
.text:00000000000123A0                 add     rcx, r9
.text:00000000000123A3                 xor     rbp, r12
.text:00000000000123A6                 mov     r12, [rdx+8]
.text:00000000000123AA                 sub     r12, rbp
.text:00000000000123AD                 add     r11, r12
.text:00000000000123B0                 mov     r12, r9
.text:00000000000123B3                 shl     r12, 9
.text:00000000000123B7                 add     r9, r11
.text:00000000000123BA                 xor     r10, r12
.text:00000000000123BD                 mov     r12, [rdx+10h]
.text:00000000000123C1                 sub     r12, r10
.text:00000000000123C4                 add     rbx, r12
.text:00000000000123C7                 mov     r12, r11
.text:00000000000123CA                 shr     r12, 17h
.text:00000000000123CE                 add     r11, rbx
.text:00000000000123D1                 xor     rcx, r12
.text:00000000000123D4                 mov     r12, [rdx+18h]
.text:00000000000123D8                 sub     r12, rcx
.text:00000000000123DB                 add     r8, r12
.text:00000000000123DE                 mov     r12, rbx
.text:00000000000123E1                 shl     r12, 0Fh
.text:00000000000123E5                 add     rbx, r8
.text:00000000000123E8                 xor     r9, r12
.text:00000000000123EB                 mov     r12, r8
.text:00000000000123EE                 sub     rsi, r9
.text:00000000000123F1                 shr     r12, 0Eh
.text:00000000000123F5                 mov     [rdx], r9
.text:00000000000123F8                 xor     r11, r12
.text:00000000000123FB                 mov     r12, rsi
.text:00000000000123FE                 add     r8, rsi
.text:0000000000012401                 sub     rbp, r11
.text:0000000000012404                 shl     r12, 14h
.text:0000000000012408                 mov     [rdx+8], r11
.text:000000000001240C                 xor     rbx, r12
.text:000000000001240F                 lea     r12, [rsi+rbp]
.text:0000000000012413                 mov     rsi, rbp
.text:0000000000012416                 sub     r10, rbx
.text:0000000000012419                 shr     rsi, 11h
.text:000000000001241D                 mov     [rdx+10h], rbx
.text:0000000000012421                 xor     r8, rsi
.text:0000000000012424                 mov     rsi, r10
.text:0000000000012427                 add     rbp, r10
.text:000000000001242A                 sub     rcx, r8
.text:000000000001242D                 shl     rsi, 0Eh
.text:0000000000012431                 mov     [rdx+18h], r8
.text:0000000000012435                 xor     rsi, r12
.text:0000000000012438                 add     r10, rcx
.text:000000000001243B                 mov     [rdx+28h], rbp
.text:000000000001243F                 mov     [rdx+20h], rsi
.text:0000000000012443                 mov     [rdx+30h], r10
.text:0000000000012447                 add     rdx, 40h ; '@'
.text:000000000001244B                 mov     [rdx-8], rcx
.text:000000000001244F                 cmp     rax, rdx
.text:0000000000012452                 jnz     loc_12380
.text:0000000000012458                 pop     rbx
.text:0000000000012459                 mov     qword ptr [rdi+810h], 0
.text:0000000000012464                 mov     qword ptr [rdi+808h], 0
.text:000000000001246F                 pop     rbp
.text:0000000000012470                 mov     qword ptr [rdi+800h], 0
.text:000000000001247B                 pop     r12
.text:000000000001247D                 pop     r13
.text:000000000001247F                 retn
.text:000000000001247F ; } // starts at 12240
.text:000000000001247F isaac_seed      endp
.text:000000000001247F
.text:0000000000012480
.text:0000000000012480 ; =============== S U B R O U T I N E =======================================
.text:0000000000012480
.text:0000000000012480
.text:0000000000012480                 public dup_safer
.text:0000000000012480 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000012480                                         ; fopen_safer+32↓p
.text:0000000000012480 ; __unwind {
.text:0000000000012480                 mov     edx, 3
.text:0000000000012485                 xor     esi, esi
.text:0000000000012487                 xor     eax, eax
.text:0000000000012489                 jmp     rpl_fcntl
.text:0000000000012489 ; } // starts at 12480
.text:0000000000012489 dup_safer       endp
.text:0000000000012489
.text:0000000000012489 ; ---------------------------------------------------------------------------
.text:000000000001248E                 align 10h
.text:0000000000012490
.text:0000000000012490 ; =============== S U B R O U T I N E =======================================
.text:0000000000012490
.text:0000000000012490 ; Attributes: info_from_lumina
.text:0000000000012490
.text:0000000000012490 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000012490                 public rpl_fclose
.text:0000000000012490 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000012490                                         ; randread_free+33↑j ...
.text:0000000000012490 ; __unwind {
.text:0000000000012490                 push    r12
.text:0000000000012492                 push    rbp
.text:0000000000012493                 push    rbx
.text:0000000000012494                 mov     rbx, rdi
.text:0000000000012497                 call    _fileno
.text:000000000001249C                 test    eax, eax
.text:000000000001249E                 mov     rdi, rbx        ; fp
.text:00000000000124A1                 js      short loc_124F7
.text:00000000000124A3                 call    ___freading
.text:00000000000124A8                 test    eax, eax
.text:00000000000124AA                 jnz     short loc_124D8
.text:00000000000124AC
.text:00000000000124AC loc_124AC:                              ; CODE XREF: rpl_fclose+62↓j
.text:00000000000124AC                 mov     rdi, rbx        ; stream
.text:00000000000124AF                 call    rpl_fflush
.text:00000000000124B4                 test    eax, eax
.text:00000000000124B6                 jz      short loc_124F4
.text:00000000000124B8                 call    ___errno_location
.text:00000000000124BD                 mov     r12d, [rax]
.text:00000000000124C0                 mov     rdi, rbx        ; stream
.text:00000000000124C3                 mov     rbp, rax
.text:00000000000124C6                 call    _fclose
.text:00000000000124CB                 test    r12d, r12d
.text:00000000000124CE                 jnz     short loc_12500
.text:00000000000124D0
.text:00000000000124D0 loc_124D0:                              ; CODE XREF: rpl_fclose+79↓j
.text:00000000000124D0                 pop     rbx
.text:00000000000124D1                 pop     rbp
.text:00000000000124D2                 pop     r12
.text:00000000000124D4                 retn
.text:00000000000124D4 ; ---------------------------------------------------------------------------
.text:00000000000124D5                 align 8
.text:00000000000124D8
.text:00000000000124D8 loc_124D8:                              ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000124D8                 mov     rdi, rbx        ; stream
.text:00000000000124DB                 call    _fileno
.text:00000000000124E0                 xor     esi, esi        ; offset
.text:00000000000124E2                 mov     edx, 1          ; whence
.text:00000000000124E7                 mov     edi, eax        ; fd
.text:00000000000124E9                 call    _lseek
.text:00000000000124EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000124F2                 jnz     short loc_124AC
.text:00000000000124F4
.text:00000000000124F4 loc_124F4:                              ; CODE XREF: rpl_fclose+26↑j
.text:00000000000124F4                 mov     rdi, rbx        ; stream
.text:00000000000124F7
.text:00000000000124F7 loc_124F7:                              ; CODE XREF: rpl_fclose+11↑j
.text:00000000000124F7                 pop     rbx
.text:00000000000124F8                 pop     rbp
.text:00000000000124F9                 pop     r12
.text:00000000000124FB                 jmp     _fclose
.text:0000000000012500 ; ---------------------------------------------------------------------------
.text:0000000000012500
.text:0000000000012500 loc_12500:                              ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000012500                 mov     [rbp+0], r12d
.text:0000000000012504                 mov     eax, 0FFFFFFFFh
.text:0000000000012509                 jmp     short loc_124D0
.text:0000000000012509 ; } // starts at 12490
.text:0000000000012509 rpl_fclose      endp
.text:0000000000012509
.text:0000000000012509 ; ---------------------------------------------------------------------------
.text:000000000001250B                 align 10h
.text:0000000000012510
.text:0000000000012510 ; =============== S U B R O U T I N E =======================================
.text:0000000000012510
.text:0000000000012510
.text:0000000000012510 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000012510                 public rpl_fcntl
.text:0000000000012510 rpl_fcntl       proc near               ; CODE XREF: opendir_safer+3E↑p
.text:0000000000012510                                         ; dup_safer+9↑j
.text:0000000000012510
.text:0000000000012510 var_68          = dword ptr -68h
.text:0000000000012510 var_60          = qword ptr -60h
.text:0000000000012510 var_58          = qword ptr -58h
.text:0000000000012510 var_50          = qword ptr -50h
.text:0000000000012510 var_48          = byte ptr -48h
.text:0000000000012510 var_38          = qword ptr -38h
.text:0000000000012510 var_30          = qword ptr -30h
.text:0000000000012510 var_28          = qword ptr -28h
.text:0000000000012510 var_20          = qword ptr -20h
.text:0000000000012510 arg_0           = byte ptr  8
.text:0000000000012510
.text:0000000000012510 ; __unwind {
.text:0000000000012510                 push    r12
.text:0000000000012512                 push    rbp
.text:0000000000012513                 mov     ebp, edi
.text:0000000000012515                 push    rbx
.text:0000000000012516                 sub     rsp, 50h
.text:000000000001251A                 mov     rax, fs:28h
.text:0000000000012523                 mov     [rsp+68h+var_50], rax
.text:0000000000012528                 xor     eax, eax
.text:000000000001252A                 lea     rax, [rsp+68h+arg_0]
.text:000000000001252F                 test    esi, esi
.text:0000000000012531                 mov     [rsp+68h+var_38], rdx
.text:0000000000012536                 mov     [rsp+68h+var_30], rcx
.text:000000000001253B                 mov     [rsp+68h+var_28], r8
.text:0000000000012540                 mov     [rsp+68h+var_60], rax
.text:0000000000012545                 lea     rax, [rsp+68h+var_48]
.text:000000000001254A                 mov     [rsp+68h+var_20], r9
.text:000000000001254F                 mov     [rsp+68h+var_68], 10h
.text:0000000000012556                 mov     [rsp+68h+var_58], rax
.text:000000000001255B                 jz      loc_12762
.text:0000000000012561                 cmp     esi, 406h
.text:0000000000012567                 jnz     short loc_125B0
.text:0000000000012569                 mov     rax, [rsp+68h+var_58]
.text:000000000001256E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000012575                 mov     [rsp+68h+var_68], 18h
.text:000000000001257C                 mov     r12d, [rax+10h]
.text:0000000000012580                 mov     edx, r12d
.text:0000000000012583                 js      loc_126B3
.text:0000000000012589                 xor     eax, eax
.text:000000000001258B                 mov     esi, 406h       ; cmd
.text:0000000000012590                 call    _fcntl
.text:0000000000012595                 test    eax, eax
.text:0000000000012597                 mov     ebx, eax
.text:0000000000012599                 js      loc_12728
.text:000000000001259F
.text:000000000001259F loc_1259F:                              ; CODE XREF: rpl_fcntl+220↓j
.text:000000000001259F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:00000000000125A9                 jmp     short loc_125F0
.text:00000000000125A9 ; ---------------------------------------------------------------------------
.text:00000000000125AB                 align 10h
.text:00000000000125B0
.text:00000000000125B0 loc_125B0:                              ; CODE XREF: rpl_fcntl+57↑j
.text:00000000000125B0                 cmp     esi, 0Bh
.text:00000000000125B3                 jz      short loc_125E0
.text:00000000000125B5                 jg      short loc_12610
.text:00000000000125B7                 cmp     esi, 4
.text:00000000000125BA                 jz      loc_12690
.text:00000000000125C0                 jg      loc_12680
.text:00000000000125C6                 cmp     esi, 2
.text:00000000000125C9                 jz      loc_12690
.text:00000000000125CF                 jg      short loc_125E0
.text:00000000000125D1                 cmp     esi, 1
.text:00000000000125D4                 jnz     short loc_12638
.text:00000000000125D6                 db      2Eh
.text:00000000000125D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000125E0
.text:00000000000125E0 loc_125E0:                              ; CODE XREF: rpl_fcntl+A3↑j
.text:00000000000125E0                                         ; rpl_fcntl+BF↑j ...
.text:00000000000125E0                 mov     edi, ebp        ; fd
.text:00000000000125E2                 xor     eax, eax
.text:00000000000125E4                 call    _fcntl
.text:00000000000125E9                 mov     ebx, eax
.text:00000000000125EB                 nop     dword ptr [rax+rax+00h]
.text:00000000000125F0
.text:00000000000125F0 loc_125F0:                              ; CODE XREF: rpl_fcntl+99↑j
.text:00000000000125F0                                         ; rpl_fcntl+147↓j ...
.text:00000000000125F0                 mov     rcx, [rsp+68h+var_50]
.text:00000000000125F5                 xor     rcx, fs:28h
.text:00000000000125FE                 mov     eax, ebx
.text:0000000000012600                 jnz     loc_1275D
.text:0000000000012606                 add     rsp, 50h
.text:000000000001260A                 pop     rbx
.text:000000000001260B                 pop     rbp
.text:000000000001260C                 pop     r12
.text:000000000001260E                 retn
.text:000000000001260E ; ---------------------------------------------------------------------------
.text:000000000001260F                 align 10h
.text:0000000000012610
.text:0000000000012610 loc_12610:                              ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000012610                 cmp     esi, 407h
.text:0000000000012616                 jg      short loc_12660
.text:0000000000012618                 cmp     esi, 406h
.text:000000000001261E                 jge     short loc_12690
.text:0000000000012620                 cmp     esi, 401h
.text:0000000000012626                 jz      short loc_125E0
.text:0000000000012628                 cmp     esi, 402h
.text:000000000001262E                 jz      short loc_12690
.text:0000000000012630                 cmp     esi, 400h
.text:0000000000012636                 jz      short loc_12690
.text:0000000000012638
.text:0000000000012638 loc_12638:                              ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000012638                                         ; rpl_fcntl+164↓j ...
.text:0000000000012638                 mov     eax, [rsp+68h+var_68]
.text:000000000001263B                 cmp     eax, 2Fh ; '/'
.text:000000000001263E                 ja      loc_1277A
.text:0000000000012644                 add     rax, [rsp+68h+var_58]
.text:0000000000012649
.text:0000000000012649 loc_12649:                              ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000012649                 mov     rdx, [rax]
.text:000000000001264C                 mov     edi, ebp        ; fd
.text:000000000001264E                 xor     eax, eax
.text:0000000000012650                 call    _fcntl
.text:0000000000012655                 mov     ebx, eax
.text:0000000000012657                 jmp     short loc_125F0
.text:0000000000012657 ; ---------------------------------------------------------------------------
.text:0000000000012659                 align 20h
.text:0000000000012660
.text:0000000000012660 loc_12660:                              ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000012660                 cmp     esi, 409h
.text:0000000000012666                 jz      short loc_12690
.text:0000000000012668                 jl      loc_125E0
.text:000000000001266E                 cmp     esi, 40Ah
.text:0000000000012674                 jnz     short loc_12638
.text:0000000000012676                 jmp     loc_125E0
.text:0000000000012676 ; ---------------------------------------------------------------------------
.text:000000000001267B                 align 20h
.text:0000000000012680
.text:0000000000012680 loc_12680:                              ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000012680                 cmp     esi, 9
.text:0000000000012683                 jz      loc_125E0
.text:0000000000012689                 jg      short loc_12690
.text:000000000001268B                 cmp     esi, 8
.text:000000000001268E                 jnz     short loc_12638
.text:0000000000012690
.text:0000000000012690 loc_12690:                              ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000012690                                         ; rpl_fcntl+B9↑j ...
.text:0000000000012690                 mov     eax, [rsp+68h+var_68]
.text:0000000000012693                 cmp     eax, 2Fh ; '/'
.text:0000000000012696                 ja      loc_12784
.text:000000000001269C                 add     rax, [rsp+68h+var_58]
.text:00000000000126A1
.text:00000000000126A1 loc_126A1:                              ; CODE XREF: rpl_fcntl+279↓j
.text:00000000000126A1                 mov     edx, [rax]
.text:00000000000126A3                 mov     edi, ebp        ; fd
.text:00000000000126A5                 xor     eax, eax
.text:00000000000126A7                 call    _fcntl
.text:00000000000126AC                 mov     ebx, eax
.text:00000000000126AE                 jmp     loc_125F0
.text:00000000000126B3 ; ---------------------------------------------------------------------------
.text:00000000000126B3
.text:00000000000126B3 loc_126B3:                              ; CODE XREF: rpl_fcntl+73↑j
.text:00000000000126B3                 xor     esi, esi        ; cmd
.text:00000000000126B5                 xor     eax, eax
.text:00000000000126B7                 call    _fcntl
.text:00000000000126BC                 test    eax, eax
.text:00000000000126BE                 mov     ebx, eax
.text:00000000000126C0                 js      loc_125F0
.text:00000000000126C6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000126CD                 jnz     loc_125F0
.text:00000000000126D3
.text:00000000000126D3 loc_126D3:                              ; CODE XREF: rpl_fcntl+248↓j
.text:00000000000126D3                 xor     eax, eax
.text:00000000000126D5                 mov     esi, 1          ; cmd
.text:00000000000126DA                 mov     edi, ebx        ; fd
.text:00000000000126DC                 call    _fcntl
.text:00000000000126E1                 test    eax, eax
.text:00000000000126E3                 js      short loc_12701
.text:00000000000126E5                 or      eax, 1
.text:00000000000126E8                 mov     esi, 2          ; cmd
.text:00000000000126ED                 mov     edi, ebx        ; fd
.text:00000000000126EF                 mov     edx, eax
.text:00000000000126F1                 xor     eax, eax
.text:00000000000126F3                 call    _fcntl
.text:00000000000126F8                 cmp     eax, 0FFFFFFFFh
.text:00000000000126FB                 jnz     loc_125F0
.text:0000000000012701
.text:0000000000012701 loc_12701:                              ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000012701                 call    ___errno_location
.text:0000000000012706                 mov     r12d, [rax]
.text:0000000000012709                 mov     rbp, rax
.text:000000000001270C                 mov     edi, ebx        ; fd
.text:000000000001270E                 call    _close
.text:0000000000012713                 mov     ebx, 0FFFFFFFFh
.text:0000000000012718                 mov     [rbp+0], r12d
.text:000000000001271C                 jmp     loc_125F0
.text:000000000001271C ; ---------------------------------------------------------------------------
.text:0000000000012721                 align 8
.text:0000000000012728
.text:0000000000012728 loc_12728:                              ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000012728                 call    ___errno_location
.text:000000000001272D                 cmp     dword ptr [rax], 16h
.text:0000000000012730                 jnz     loc_1259F
.text:0000000000012736                 xor     esi, esi        ; cmd
.text:0000000000012738                 xor     eax, eax
.text:000000000001273A                 mov     edx, r12d
.text:000000000001273D                 mov     edi, ebp        ; fd
.text:000000000001273F                 call    _fcntl
.text:0000000000012744                 test    eax, eax
.text:0000000000012746                 mov     ebx, eax
.text:0000000000012748                 js      loc_125F0
.text:000000000001274E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000012758                 jmp     loc_126D3
.text:000000000001275D ; ---------------------------------------------------------------------------
.text:000000000001275D
.text:000000000001275D loc_1275D:                              ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000001275D                 call    ___stack_chk_fail
.text:0000000000012762 ; ---------------------------------------------------------------------------
.text:0000000000012762
.text:0000000000012762 loc_12762:                              ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000012762                 mov     rax, [rsp+68h+var_58]
.text:0000000000012767                 xor     esi, esi        ; cmd
.text:0000000000012769                 mov     edx, [rax+10h]
.text:000000000001276C                 xor     eax, eax
.text:000000000001276E                 call    _fcntl
.text:0000000000012773                 mov     ebx, eax
.text:0000000000012775                 jmp     loc_125F0
.text:000000000001277A ; ---------------------------------------------------------------------------
.text:000000000001277A
.text:000000000001277A loc_1277A:                              ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000001277A                 mov     rax, [rsp+68h+var_60]
.text:000000000001277F                 jmp     loc_12649
.text:0000000000012784 ; ---------------------------------------------------------------------------
.text:0000000000012784
.text:0000000000012784 loc_12784:                              ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000012784                 mov     rax, [rsp+68h+var_60]
.text:0000000000012789                 jmp     loc_126A1
.text:0000000000012789 ; } // starts at 12510
.text:0000000000012789 rpl_fcntl       endp
.text:0000000000012789
.text:0000000000012789 ; ---------------------------------------------------------------------------
.text:000000000001278E                 align 10h
.text:0000000000012790
.text:0000000000012790 ; =============== S U B R O U T I N E =======================================
.text:0000000000012790
.text:0000000000012790
.text:0000000000012790                 public fopen_safer
.text:0000000000012790 fopen_safer     proc near               ; CODE XREF: randread_new+39↑p
.text:0000000000012790 ; __unwind {
.text:0000000000012790                 push    r12
.text:0000000000012792                 push    rbp
.text:0000000000012793                 mov     rbp, rsi
.text:0000000000012796                 push    rbx
.text:0000000000012797                 call    _fopen
.text:000000000001279C                 test    rax, rax
.text:000000000001279F                 mov     rbx, rax
.text:00000000000127A2                 jz      short loc_127B1
.text:00000000000127A4                 mov     rdi, rax        ; stream
.text:00000000000127A7                 call    _fileno
.text:00000000000127AC                 cmp     eax, 2
.text:00000000000127AF                 jbe     short loc_127C0
.text:00000000000127B1
.text:00000000000127B1 loc_127B1:                              ; CODE XREF: fopen_safer+12↑j
.text:00000000000127B1                                         ; fopen_safer+5B↓j ...
.text:00000000000127B1                 mov     rax, rbx
.text:00000000000127B4                 pop     rbx
.text:00000000000127B5                 pop     rbp
.text:00000000000127B6                 pop     r12
.text:00000000000127B8                 retn
.text:00000000000127B8 ; ---------------------------------------------------------------------------
.text:00000000000127B9                 align 20h
.text:00000000000127C0
.text:00000000000127C0 loc_127C0:                              ; CODE XREF: fopen_safer+1F↑j
.text:00000000000127C0                 mov     edi, eax
.text:00000000000127C2                 call    dup_safer
.text:00000000000127C7                 test    eax, eax
.text:00000000000127C9                 mov     r12d, eax
.text:00000000000127CC                 js      short loc_12808
.text:00000000000127CE                 mov     rdi, rbx        ; stream
.text:00000000000127D1                 call    rpl_fclose
.text:00000000000127D6                 test    eax, eax
.text:00000000000127D8                 jnz     short loc_127ED
.text:00000000000127DA                 mov     rsi, rbp        ; modes
.text:00000000000127DD                 mov     edi, r12d       ; fd
.text:00000000000127E0                 call    _fdopen
.text:00000000000127E5                 test    rax, rax
.text:00000000000127E8                 mov     rbx, rax
.text:00000000000127EB                 jnz     short loc_127B1
.text:00000000000127ED
.text:00000000000127ED loc_127ED:                              ; CODE XREF: fopen_safer+48↑j
.text:00000000000127ED                 call    ___errno_location
.text:00000000000127F2                 mov     ebp, [rax]
.text:00000000000127F4                 mov     rbx, rax
.text:00000000000127F7                 mov     edi, r12d       ; fd
.text:00000000000127FA                 call    _close
.text:00000000000127FF                 mov     [rbx], ebp
.text:0000000000012801                 xor     ebx, ebx
.text:0000000000012803                 jmp     short loc_127B1
.text:0000000000012803 ; ---------------------------------------------------------------------------
.text:0000000000012805                 align 8
.text:0000000000012808
.text:0000000000012808 loc_12808:                              ; CODE XREF: fopen_safer+3C↑j
.text:0000000000012808                 call    ___errno_location
.text:000000000001280D                 mov     r12d, [rax]
.text:0000000000012810                 mov     rbp, rax
.text:0000000000012813                 mov     rdi, rbx        ; stream
.text:0000000000012816                 call    rpl_fclose
.text:000000000001281B                 xor     ebx, ebx
.text:000000000001281D                 mov     [rbp+0], r12d
.text:0000000000012821                 jmp     short loc_127B1
.text:0000000000012821 ; } // starts at 12790
.text:0000000000012821 fopen_safer     endp
.text:0000000000012821
.text:0000000000012821 ; ---------------------------------------------------------------------------
.text:0000000000012823                 align 10h
.text:0000000000012830
.text:0000000000012830 ; =============== S U B R O U T I N E =======================================
.text:0000000000012830
.text:0000000000012830 ; Attributes: info_from_lumina
.text:0000000000012830
.text:0000000000012830 ; void _libc_csu_init(void)
.text:0000000000012830                 public __libc_csu_init
.text:0000000000012830 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000012830 ; __unwind {
.text:0000000000012830                 push    r15
.text:0000000000012832                 push    r14
.text:0000000000012834                 mov     r15, rdx
.text:0000000000012837                 push    r13
.text:0000000000012839                 push    r12
.text:000000000001283B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000012842                 push    rbp
.text:0000000000012843                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000001284A                 push    rbx
.text:000000000001284B                 mov     r13d, edi
.text:000000000001284E                 mov     r14, rsi
.text:0000000000012851                 sub     rbp, r12
.text:0000000000012854                 sub     rsp, 8
.text:0000000000012858                 sar     rbp, 3
.text:000000000001285C                 call    _init_proc
.text:0000000000012861                 test    rbp, rbp
.text:0000000000012864                 jz      short loc_12886
.text:0000000000012866                 xor     ebx, ebx
.text:0000000000012868                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000012870
.text:0000000000012870 loc_12870:                              ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000012870                 mov     rdx, r15
.text:0000000000012873                 mov     rsi, r14
.text:0000000000012876                 mov     edi, r13d
.text:0000000000012879                 call    ds:(__frame_dummy_init_array_entry - 219530h)[r12+rbx*8]
.text:000000000001287D                 add     rbx, 1
.text:0000000000012881                 cmp     rbp, rbx
.text:0000000000012884                 jnz     short loc_12870
.text:0000000000012886
.text:0000000000012886 loc_12886:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000012886                 add     rsp, 8
.text:000000000001288A                 pop     rbx
.text:000000000001288B                 pop     rbp
.text:000000000001288C                 pop     r12
.text:000000000001288E                 pop     r13
.text:0000000000012890                 pop     r14
.text:0000000000012892                 pop     r15
.text:0000000000012894                 retn
.text:0000000000012894 ; } // starts at 12830
.text:0000000000012894 __libc_csu_init endp
.text:0000000000012894
.text:0000000000012894 ; ---------------------------------------------------------------------------
.text:0000000000012895                 align 20h
.text:00000000000128A0
.text:00000000000128A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000128A0
.text:00000000000128A0
.text:00000000000128A0 ; void _libc_csu_fini(void)
.text:00000000000128A0                 public __libc_csu_fini
.text:00000000000128A0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000128A0 ; __unwind {
.text:00000000000128A0                 rep retn
.text:00000000000128A0 ; } // starts at 128A0
.text:00000000000128A0 __libc_csu_fini endp
.text:00000000000128A0
.text:00000000000128A0 ; ---------------------------------------------------------------------------
.text:00000000000128A2                 align 10h
.text:00000000000128B0
.text:00000000000128B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000128B0
.text:00000000000128B0
.text:00000000000128B0 atexit          proc near               ; CODE XREF: main+82↑p
.text:00000000000128B0 ; __unwind {
.text:00000000000128B0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000128B7                 xor     esi, esi        ; obj
.text:00000000000128B9                 jmp     ___cxa_atexit
.text:00000000000128B9 ; } // starts at 128B0
.text:00000000000128B9 atexit          endp
.text:00000000000128B9
.text:00000000000128B9 _text           ends
.text:00000000000128B9
LOAD:00000000000128BE ; ===========================================================================
LOAD:00000000000128BE
LOAD:00000000000128BE ; Segment type: Pure code
LOAD:00000000000128BE ; Segment permissions: Read/Execute
LOAD:00000000000128BE LOAD            segment byte public 'CODE' use64
LOAD:00000000000128BE                 assume cs:LOAD
LOAD:00000000000128BE                 ;org 128BEh
LOAD:00000000000128BE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000128BE                 align 20h
LOAD:00000000000128BE LOAD            ends
LOAD:00000000000128BE
.fini:00000000000128C0 ; ===========================================================================
.fini:00000000000128C0
.fini:00000000000128C0 ; Segment type: Pure code
.fini:00000000000128C0 ; Segment permissions: Read/Execute
.fini:00000000000128C0 _fini           segment dword public 'CODE' use64
.fini:00000000000128C0                 assume cs:_fini
.fini:00000000000128C0                 ;org 128C0h
.fini:00000000000128C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000128C0
.fini:00000000000128C0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000128C0
.fini:00000000000128C0
.fini:00000000000128C0                 public _term_proc
.fini:00000000000128C0 _term_proc      proc near
.fini:00000000000128C0                 sub     rsp, 8          ; _fini
.fini:00000000000128C4                 add     rsp, 8
.fini:00000000000128C8                 retn
.fini:00000000000128C8 _term_proc      endp
.fini:00000000000128C8
.fini:00000000000128C8 _fini           ends
.fini:00000000000128C8
LOAD:00000000000128C9 ; ===========================================================================
LOAD:00000000000128C9
LOAD:00000000000128C9 ; Segment type: Pure code
LOAD:00000000000128C9 ; Segment permissions: Read/Execute
LOAD:00000000000128C9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000128C9                 assume cs:LOAD
LOAD:00000000000128C9                 ;org 128C9h
LOAD:00000000000128C9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000128C9                 align 20h
LOAD:00000000000128C9 LOAD            ends
LOAD:00000000000128C9
.rodata:00000000000128E0 ; ===========================================================================
.rodata:00000000000128E0
.rodata:00000000000128E0 ; Segment type: Pure data
.rodata:00000000000128E0 ; Segment permissions: Read
.rodata:00000000000128E0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000128E0                 assume cs:_rodata
.rodata:00000000000128E0                 ;org 128E0h
.rodata:00000000000128E0                 public _IO_stdin_used
.rodata:00000000000128E0 _IO_stdin_used  db    1
.rodata:00000000000128E1                 db    0
.rodata:00000000000128E2                 db    2
.rodata:00000000000128E3                 db    0
.rodata:00000000000128E4 aPreserve       db '--preserve',0       ; DATA XREF: decode_preserve_arg+4↑o
.rodata:00000000000128E4                                         ; .data.rel.ro:0000000000219760↓o
.rodata:00000000000128EF aNoPreserve     db '--no-preserve',0    ; DATA XREF: decode_preserve_arg+31↑o
.rodata:00000000000128EF                                         ; .data.rel.ro:00000000002196C0↓o
.rodata:00000000000128FD ; const char aFailedToAccess[]
.rodata:00000000000128FD aFailedToAccess db 'failed to access %s',0
.rodata:00000000000128FD                                         ; DATA XREF: main+826↑o
.rodata:00000000000128FD                                         ; target_directory_operand+99↑o
.rodata:0000000000012911 ; const char aCannotMakeDire[]
.rodata:0000000000012911 aCannotMakeDire db 'cannot make directory %s',0
.rodata:0000000000012911                                         ; DATA XREF: make_dir_parents_private+541↑o
.rodata:000000000001292A ; const char aSettingPermiss[]
.rodata:000000000001292A aSettingPermiss db 'setting permissions for %s',0
.rodata:000000000001292A                                         ; DATA XREF: make_dir_parents_private+5B2↑o
.rodata:000000000001292A                                         ; copy_internal+2D1C↑o ...
.rodata:0000000000012945 aCp             db 'cp',0               ; DATA XREF: main+346↑o
.rodata:0000000000012945                                         ; usage+362↑o ...
.rodata:0000000000012948 asc_12948       db '[',0                ; DATA XREF: usage+36E↑o
.rodata:000000000001294A aTestInvocation db 'test invocation',0  ; DATA XREF: usage+395↑o
.rodata:000000000001295A aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000001295A                                         ; DATA XREF: usage+3C5↑o
.rodata:000000000001295A                                         ; usage+4BC↑o ...
.rodata:0000000000012970 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+3D6↑o
.rodata:000000000001297A aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+3E2↑o
.rodata:0000000000012989 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+375↑o
.rodata:0000000000012993 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+3A1↑o
.rodata:000000000001299D aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+3B9↑o
.rodata:00000000000129A7 ; const char aSOnlineHelpS[]
.rodata:00000000000129A7 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+42A↑o
.rodata:00000000000129A7                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000129BE unk_129BE       db  47h ; G             ; DATA XREF: main+33F↑o
.rodata:00000000000129BE                                         ; usage+446↑o ...
.rodata:00000000000129BF                 db  4Eh ; N
.rodata:00000000000129C0                 db  55h ; U
.rodata:00000000000129C1                 db  20h
.rodata:00000000000129C2 ; const char domainname[]
.rodata:00000000000129C2 domainname      db 'coreutils',0        ; DATA XREF: main+63↑o
.rodata:00000000000129C2                                         ; main+6F↑o ...
.rodata:00000000000129CC ; const char s2[]
.rodata:00000000000129CC s2              db 'en_',0              ; DATA XREF: usage+46D↑o
.rodata:00000000000129CC                                         ; usage+52E↑o
.rodata:00000000000129D0 ; const char aFullDocumentat[]
.rodata:00000000000129D0 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000129D0                                         ; DATA XREF: usage:loc_46A9↑o
.rodata:00000000000129D0                                         ; usage:loc_4766↑o
.rodata:00000000000129EB aSS             db '%s -> %s',0Ah,0     ; DATA XREF: do_copy+205↑o
.rodata:00000000000129F5 aMissingFileOpe db 'missing file operand',0
.rodata:00000000000129F5                                         ; DATA XREF: do_copy+504↑o
.rodata:0000000000012A0A ; const char aExtraOperandS[]
.rodata:0000000000012A0A aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: do_copy+45E↑o
.rodata:0000000000012A1B ; const char aTargetSIsNotAD[]
.rodata:0000000000012A1B aTargetSIsNotAD db 'target %s is not a directory',0
.rodata:0000000000012A1B                                         ; DATA XREF: main+4A9↑o
.rodata:0000000000012A1B                                         ; do_copy+406↑o
.rodata:0000000000012A38 asc_12A38       db '..',0               ; DATA XREF: do_copy+2CA↑o
.rodata:0000000000012A38                                         ; copy_internal+ED8↑o
.rodata:0000000000012A3B ; const char dirname[]
.rodata:0000000000012A3B dirname         db '/usr/local/share/locale',0
.rodata:0000000000012A3B                                         ; DATA XREF: main+5C↑o
.rodata:0000000000012A53 ; const char name[]
.rodata:0000000000012A53 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+96↑o
.rodata:0000000000012A63 aSparse         db '--sparse',0         ; DATA XREF: main+38D↑o
.rodata:0000000000012A63                                         ; .data.rel.ro:00000000002197C0↓o
.rodata:0000000000012A6C aReflink        db '--reflink',0        ; DATA XREF: main+3D7↑o
.rodata:0000000000012A6C                                         ; .data.rel.ro:00000000002197E0↓o
.rodata:0000000000012A76 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+330↑o
.rodata:0000000000012A86 aTorbjornGranlu db 'Torbjorn Granlund',0
.rodata:0000000000012A86                                         ; DATA XREF: main+337↑o
.rodata:0000000000012A98 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main:loc_3189↑o
.rodata:0000000000012AA5 ; const char shortopts[]
.rodata:0000000000012AA5 shortopts       db 'abdfHilLnprst:uvxPRS:TZ',0
.rodata:0000000000012AA5                                         ; DATA XREF: main:loc_3018↑o
.rodata:0000000000012ABD ; const char aBackupType[]
.rodata:0000000000012ABD aBackupType     db 'backup type',0      ; DATA XREF: main:loc_33CC↑o
.rodata:0000000000012AC9 aMode           db 'mode',0             ; DATA XREF: .data.rel.ro:preserve_args_7371↓o
.rodata:0000000000012ACE aTimestamps     db 'timestamps',0       ; DATA XREF: .data.rel.ro:0000000000219548↓o
.rodata:0000000000012AD9 aOwnership      db 'ownership',0        ; DATA XREF: .data.rel.ro:0000000000219550↓o
.rodata:0000000000012AE3 aLinks          db 'links',0            ; DATA XREF: .data.rel.ro:0000000000219558↓o
.rodata:0000000000012AE9 aContext        db 'context',0          ; DATA XREF: .data.rel.ro:0000000000219560↓o
.rodata:0000000000012AE9                                         ; .data.rel.ro:00000000002198C0↓o ...
.rodata:0000000000012AF1 aXattr          db 'xattr',0            ; DATA XREF: .data.rel.ro:0000000000219568↓o
.rodata:0000000000012AF7 aAll            db 'all',0              ; DATA XREF: .data.rel.ro:0000000000219570↓o
.rodata:0000000000012AFB aArchive        db 'archive',0          ; DATA XREF: .data.rel.ro:long_opts↓o
.rodata:0000000000012B03 aAttributesOnly db 'attributes-only',0  ; DATA XREF: .data.rel.ro:00000000002195A0↓o
.rodata:0000000000012B13 aBackup         db 'backup',0           ; DATA XREF: .data.rel.ro:00000000002195C0↓o
.rodata:0000000000012B1A aCopyContents   db 'copy-contents',0    ; DATA XREF: .data.rel.ro:00000000002195E0↓o
.rodata:0000000000012B28 aForce          db 'force',0            ; DATA XREF: .data.rel.ro:0000000000219620↓o
.rodata:0000000000012B2E aInteractive    db 'interactive',0      ; DATA XREF: .data.rel.ro:0000000000219640↓o
.rodata:0000000000012B3A aNoClobber      db 'no-clobber',0       ; DATA XREF: .data.rel.ro:0000000000219680↓o
.rodata:0000000000012B45 aNoDereference  db 'no-dereference',0   ; DATA XREF: .data.rel.ro:00000000002196A0↓o
.rodata:0000000000012B45                                         ; .data.rel.ro:0000000000219600↓o
.rodata:0000000000012B54 aNoTargetDirect db 'no-target-directory',0
.rodata:0000000000012B54                                         ; DATA XREF: .data.rel.ro:00000000002196E0↓o
.rodata:0000000000012B54                                         ; .data.rel.ro:0000000000219860↓o
.rodata:0000000000012B68 aOneFileSystem  db 'one-file-system',0  ; DATA XREF: .data.rel.ro:0000000000219700↓o
.rodata:0000000000012B78 aParents        db 'parents',0          ; DATA XREF: .data.rel.ro:0000000000219720↓o
.rodata:0000000000012B80 aPath           db 'path',0             ; DATA XREF: .data.rel.ro:0000000000219740↓o
.rodata:0000000000012B85 aRecursive      db 'recursive',0        ; DATA XREF: .data.rel.ro:0000000000219780↓o
.rodata:0000000000012B8F aRemoveDestinat db 'remove-destination',0
.rodata:0000000000012B8F                                         ; DATA XREF: .data.rel.ro:00000000002197A0↓o
.rodata:0000000000012BA2 aStripTrailingS db 'strip-trailing-slashes',0
.rodata:0000000000012BA2                                         ; DATA XREF: .data.rel.ro:0000000000219800↓o
.rodata:0000000000012BB9 aSuffix         db 'suffix',0           ; DATA XREF: .data.rel.ro:0000000000219820↓o
.rodata:0000000000012BC0 aSymbolicLink   db 'symbolic-link',0    ; DATA XREF: .data.rel.ro:0000000000219840↓o
.rodata:0000000000012BC0                                         ; .data.rel.ro:0000000000219660↓o
.rodata:0000000000012BCE aUpdate         db 'update',0           ; DATA XREF: .data.rel.ro:0000000000219880↓o
.rodata:0000000000012BD5 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:00000000002198A0↓o
.rodata:0000000000012BDD aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:00000000002198E0↓o
.rodata:0000000000012BE2 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000219900↓o
.rodata:0000000000012BEA aAuto           db 'auto',0             ; DATA XREF: .data.rel.ro:reflink_type_string↓o
.rodata:0000000000012BEA                                         ; .data.rel.ro:0000000000219968↓o
.rodata:0000000000012BEF aNever          db 'never',0            ; DATA XREF: .data.rel.ro:0000000000219950↓o
.rodata:0000000000012BEF                                         ; .data.rel.ro:sparse_type_string↓o ...
.rodata:0000000000012BF5                 align 20h
.rodata:0000000000012C00 jpt_388B        dd offset loc_38E8 - 12C00h
.rodata:0000000000012C00                                         ; DATA XREF: decode_preserve_arg+3B↑o
.rodata:0000000000012C00                                         ; decode_preserve_arg+A4↑r
.rodata:0000000000012C00                 dd offset loc_38E0 - 12C00h ; jump table for switch statement
.rodata:0000000000012C00                 dd offset loc_38D8 - 12C00h
.rodata:0000000000012C00                 dd offset loc_38D0 - 12C00h
.rodata:0000000000012C00                 dd offset loc_38C0 - 12C00h
.rodata:0000000000012C00                 dd offset loc_3890 - 12C00h
.rodata:0000000000012C00                 dd offset loc_38F8 - 12C00h
.rodata:0000000000012C1C jpt_3050        dd offset loc_3189 - 12C1Ch, offset loc_35C4 - 12C1Ch
.rodata:0000000000012C1C                                         ; DATA XREF: main+1D↑o
.rodata:0000000000012C1C                                         ; main+1D9↑r
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch ; jump table for switch statement
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_317C - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_316F - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3162 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3158 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_3142 - 12C1Ch, offset loc_3138 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3111 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_30CE - 12C1Ch, offset loc_30AF - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_309D - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3093 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_3089 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3082 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3078 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3062 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3158 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_3343 - 12C1Ch, offset loc_32C0 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_32B6 - 12C1Ch, offset loc_32AC - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_32A2 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset def_3050 - 12C1Ch
.rodata:0000000000012C1C                 dd offset def_3050 - 12C1Ch, offset loc_3298 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_328E - 12C1Ch, offset loc_3278 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_326C - 12C1Ch, offset loc_3052 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_3222 - 12C1Ch, offset loc_31E1 - 12C1Ch
.rodata:0000000000012C1C                 dd offset loc_31D5 - 12C1Ch, offset loc_31CB - 12C1Ch
.rodata:000000000001304C                 align 10h
.rodata:0000000000013050 preserve_vals_7370 db    0              ; DATA XREF: decode_preserve_arg+19↑o
.rodata:0000000000013050                                         ; decode_preserve_arg+77↑o
.rodata:0000000000013051                 db    0
.rodata:0000000000013052                 db    0
.rodata:0000000000013053                 db    0
.rodata:0000000000013054                 db    1
.rodata:0000000000013055                 db    0
.rodata:0000000000013056                 db    0
.rodata:0000000000013057                 db    0
.rodata:0000000000013058                 db    2
.rodata:0000000000013059                 db    0
.rodata:000000000001305A                 db    0
.rodata:000000000001305B                 db    0
.rodata:000000000001305C                 db    3
.rodata:000000000001305D                 db    0
.rodata:000000000001305E                 db    0
.rodata:000000000001305F                 db    0
.rodata:0000000000013060                 db    4
.rodata:0000000000013061                 db    0
.rodata:0000000000013062                 db    0
.rodata:0000000000013063                 db    0
.rodata:0000000000013064                 db    5
.rodata:0000000000013065                 db    0
.rodata:0000000000013066                 db    0
.rodata:0000000000013067                 db    0
.rodata:0000000000013068                 db    6
.rodata:0000000000013069                 db    0
.rodata:000000000001306A                 db    0
.rodata:000000000001306B                 db    0
.rodata:000000000001306C                 db    0
.rodata:000000000001306D                 db    0
.rodata:000000000001306E                 db    0
.rodata:000000000001306F                 db    0
.rodata:0000000000013070 reflink_type    db    1                 ; DATA XREF: main+3D0↑o
.rodata:0000000000013070                                         ; main+3E9↑o
.rodata:0000000000013071                 db    0
.rodata:0000000000013072                 db    0
.rodata:0000000000013073                 db    0
.rodata:0000000000013074                 db    2
.rodata:0000000000013075                 db    0
.rodata:0000000000013076                 db    0
.rodata:0000000000013077                 db    0
.rodata:0000000000013078                 db    0
.rodata:0000000000013079                 db    0
.rodata:000000000001307A                 db    0
.rodata:000000000001307B                 db    0
.rodata:000000000001307C                 db    0
.rodata:000000000001307D                 db    0
.rodata:000000000001307E                 db    0
.rodata:000000000001307F                 db    0
.rodata:0000000000013080 sparse_type     db    1                 ; DATA XREF: main+386↑o
.rodata:0000000000013080                                         ; main+39F↑o
.rodata:0000000000013081                 db    0
.rodata:0000000000013082                 db    0
.rodata:0000000000013083                 db    0
.rodata:0000000000013084                 db    2
.rodata:0000000000013085                 db    0
.rodata:0000000000013086                 db    0
.rodata:0000000000013087                 db    0
.rodata:0000000000013088                 db    3
.rodata:0000000000013089                 db    0
.rodata:000000000001308A                 db    0
.rodata:000000000001308B                 db    0
.rodata:000000000001308C                 db    0
.rodata:000000000001308D                 db    0
.rodata:000000000001308E                 db    0
.rodata:000000000001308F                 db    0
.rodata:0000000000013090 ; const char aFailedToGetAtt[]
.rodata:0000000000013090 aFailedToGetAtt db 'failed to get attributes of %s',0
.rodata:0000000000013090                                         ; DATA XREF: make_dir_parents_private+3E4↑o
.rodata:0000000000013090                                         ; make_dir_parents_private+594↑o
.rodata:00000000000130AF                 align 10h
.rodata:00000000000130B0 ; const char aSExistsButIsNo[]
.rodata:00000000000130B0 aSExistsButIsNo db '%s exists but is not a directory',0
.rodata:00000000000130B0                                         ; DATA XREF: make_dir_parents_private+4D0↑o
.rodata:00000000000130D1                 align 8
.rodata:00000000000130D8 ; const char aFailedToPreser[]
.rodata:00000000000130D8 aFailedToPreser db 'failed to preserve times for %s',0
.rodata:00000000000130D8                                         ; DATA XREF: re_protect+108↑o
.rodata:00000000000130F8 ; const char aFailedToPreser_1[]
.rodata:00000000000130F8 aFailedToPreser_1 db 'failed to preserve ownership for %s',0
.rodata:00000000000130F8                                         ; DATA XREF: re_protect+24C↑o
.rodata:00000000000130F8                                         ; set_owner+19D↑o ...
.rodata:000000000001311C                 align 20h
.rodata:0000000000013120 ; const char aFailedToPreser_0[]
.rodata:0000000000013120 aFailedToPreser_0 db 'failed to preserve permissions for %s',0
.rodata:0000000000013120                                         ; DATA XREF: re_protect+1D8↑o
.rodata:0000000000013146                 align 8
.rodata:0000000000013148 ; const char aTrySHelpForMor[]
.rodata:0000000000013148 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000013148                                         ; DATA XREF: usage+2F↑o
.rodata:000000000001316F                 align 10h
.rodata:0000000000013170 ; const char aUsageSOptionTS[]
.rodata:0000000000013170 aUsageSOptionTS db 'Usage: %s [OPTION]... [-T] SOURCE DEST',0Ah
.rodata:0000000000013170                                         ; DATA XREF: usage:loc_427D↑o
.rodata:0000000000013170                 db '  or:  %s [OPTION]... SOURCE... DIRECTORY',0Ah
.rodata:0000000000013170                 db '  or:  %s [OPTION]... -t DIRECTORY SOURCE...',0Ah,0
.rodata:00000000000131EF                 align 10h
.rodata:00000000000131F0 ; const char aCopySourceToDe[]
.rodata:00000000000131F0 aCopySourceToDe db 'Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.',0Ah,0
.rodata:00000000000131F0                                         ; DATA XREF: usage+8A↑o
.rodata:000000000001322A                 align 10h
.rodata:0000000000013230 ; const char aMandatoryArgum[]
.rodata:0000000000013230 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:0000000000013230                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000013230                 db 'ns too.',0Ah,0
.rodata:000000000001327B                 align 20h
.rodata:0000000000013280 ; const char aAArchiveSameAs[]
.rodata:0000000000013280 aAArchiveSameAs db '  -a, --archive                same as -dR --preserve=all',0Ah
.rodata:0000000000013280                                         ; DATA XREF: usage+D4↑o
.rodata:0000000000013280                 db '      --attributes-only        don',27h,'t copy the file data, ju'
.rodata:0000000000013280                 db 'st the attributes',0Ah
.rodata:0000000000013280                 db '      --backup[=CONTROL]       make a backup of each existing des'
.rodata:0000000000013280                 db 'tination file',0Ah
.rodata:0000000000013280                 db '  -b                           like --backup but does not accept '
.rodata:0000000000013280                 db 'an argument',0Ah
.rodata:0000000000013280                 db '      --copy-contents          copy contents of special files whe'
.rodata:0000000000013280                 db 'n recursive',0Ah
.rodata:0000000000013280                 db '  -d                           same as --no-dereference --preserv'
.rodata:0000000000013280                 db 'e=links',0Ah,0
.rodata:000000000001343A                 align 20h
.rodata:0000000000013440 ; const char aFForceIfAnExis[]
.rodata:0000000000013440 aFForceIfAnExis db '  -f, --force                  if an existing destination file ca'
.rodata:0000000000013440                                         ; DATA XREF: usage+F9↑o
.rodata:0000000000013440                 db 'nnot be',0Ah
.rodata:0000000000013440                 db '                                 opened, remove it and try again '
.rodata:0000000000013440                 db '(this option',0Ah
.rodata:0000000000013440                 db '                                 is ignored when the -n option is'
.rodata:0000000000013440                 db ' also used)',0Ah
.rodata:0000000000013440                 db '  -i, --interactive            prompt before overwrite (overrides'
.rodata:0000000000013440                 db ' a previous -n',0Ah
.rodata:0000000000013440                 db '                                  option)',0Ah
.rodata:0000000000013440                 db '  -H                           follow command-line symbolic links'
.rodata:0000000000013440                 db ' in SOURCE',0Ah,0
.rodata:00000000000135EB                 align 10h
.rodata:00000000000135F0 ; const char aLLinkHardLinkF[]
.rodata:00000000000135F0 aLLinkHardLinkF db '  -l, --link                   hard link files instead of copying'
.rodata:00000000000135F0                                         ; DATA XREF: usage+11E↑o
.rodata:00000000000135F0                 db 0Ah
.rodata:00000000000135F0                 db '  -L, --dereference            always follow symbolic links in SO'
.rodata:00000000000135F0                 db 'URCE',0Ah,0
.rodata:0000000000013679                 align 20h
.rodata:0000000000013680 ; const char aNNoClobberDoNo[]
.rodata:0000000000013680 aNNoClobberDoNo db '  -n, --no-clobber             do not overwrite an existing file '
.rodata:0000000000013680                                         ; DATA XREF: usage+143↑o
.rodata:0000000000013680                 db '(overrides',0Ah
.rodata:0000000000013680                 db '                                 a previous -i option)',0Ah
.rodata:0000000000013680                 db '  -P, --no-dereference         never follow symbolic links in SOU'
.rodata:0000000000013680                 db 'RCE',0Ah,0
.rodata:0000000000013749                 align 10h
.rodata:0000000000013750 ; const char aPSameAsPreserv[]
.rodata:0000000000013750 aPSameAsPreserv db '  -p                           same as --preserve=mode,ownership,'
.rodata:0000000000013750                                         ; DATA XREF: usage+168↑o
.rodata:0000000000013750                 db 'timestamps',0Ah
.rodata:0000000000013750                 db '      --preserve[=ATTR_LIST]   preserve the specified attributes '
.rodata:0000000000013750                 db '(default:',0Ah
.rodata:0000000000013750                 db '                                 mode,ownership,timestamps), if p'
.rodata:0000000000013750                 db 'ossible',0Ah
.rodata:0000000000013750                 db '                                 additional attributes: context, '
.rodata:0000000000013750                 db 'links, xattr,',0Ah
.rodata:0000000000013750                 db '                                 all',0Ah,0
.rodata:00000000000138A5                 align 8
.rodata:00000000000138A8 ; const char aNoPreserveAttr[]
.rodata:00000000000138A8 aNoPreserveAttr db '      --no-preserve=ATTR_LIST  don',27h,'t preserve the specified'
.rodata:00000000000138A8                                         ; DATA XREF: usage+18D↑o
.rodata:00000000000138A8                 db ' attributes',0Ah
.rodata:00000000000138A8                 db '      --parents                use full source file name under DI'
.rodata:00000000000138A8                 db 'RECTORY',0Ah,0
.rodata:0000000000013939                 align 20h
.rodata:0000000000013940 ; const char aRRRecursiveCop[]
.rodata:0000000000013940 aRRRecursiveCop db '  -R, -r, --recursive          copy directories recursively',0Ah
.rodata:0000000000013940                                         ; DATA XREF: usage+1B2↑o
.rodata:0000000000013940                 db '      --reflink[=WHEN]         control clone/CoW copies. See belo'
.rodata:0000000000013940                 db 'w',0Ah
.rodata:0000000000013940                 db '      --remove-destination     remove each existing destination f'
.rodata:0000000000013940                 db 'ile before',0Ah
.rodata:0000000000013940                 db '                                 attempting to open it (contrast '
.rodata:0000000000013940                 db 'with --force)',0Ah,0
.rodata:0000000000013A5B                 align 20h
.rodata:0000000000013A60 ; const char aSparseWhenCont[]
.rodata:0000000000013A60 aSparseWhenCont db '      --sparse=WHEN            control creation of sparse files. '
.rodata:0000000000013A60                                         ; DATA XREF: usage+1D7↑o
.rodata:0000000000013A60                 db 'See below',0Ah
.rodata:0000000000013A60                 db '      --strip-trailing-slashes  remove any trailing slashes from '
.rodata:0000000000013A60                 db 'each SOURCE',0Ah
.rodata:0000000000013A60                 db '                                 argument',0Ah,0
.rodata:0000000000013B23                 align 8
.rodata:0000000000013B28 ; const char aSSymbolicLinkM[]
.rodata:0000000000013B28 aSSymbolicLinkM db '  -s, --symbolic-link          make symbolic links instead of cop'
.rodata:0000000000013B28                                         ; DATA XREF: usage+1FC↑o
.rodata:0000000000013B28                 db 'ying',0Ah
.rodata:0000000000013B28                 db '  -S, --suffix=SUFFIX          override the usual backup suffix',0Ah
.rodata:0000000000013B28                 db '  -t, --target-directory=DIRECTORY  copy all SOURCE arguments int'
.rodata:0000000000013B28                 db 'o DIRECTORY',0Ah
.rodata:0000000000013B28                 db '  -T, --no-target-directory    treat DEST as a normal file',0Ah,0
.rodata:0000000000013C37                 align 8
.rodata:0000000000013C38 ; const char aUUpdateCopyOnl[]
.rodata:0000000000013C38 aUUpdateCopyOnl db '  -u, --update                 copy only when the SOURCE file is '
.rodata:0000000000013C38                                         ; DATA XREF: usage+221↑o
.rodata:0000000000013C38                 db 'newer',0Ah
.rodata:0000000000013C38                 db '                                 than the destination file or whe'
.rodata:0000000000013C38                 db 'n the',0Ah
.rodata:0000000000013C38                 db '                                 destination file is missing',0Ah
.rodata:0000000000013C38                 db '  -v, --verbose                explain what is being done',0Ah
.rodata:0000000000013C38                 db '  -x, --one-file-system        stay on this file system',0Ah,0
.rodata:0000000000013D76                 align 8
.rodata:0000000000013D78 ; const char aZSetSelinuxSec[]
.rodata:0000000000013D78 aZSetSelinuxSec db '  -Z                           set SELinux security context of de'
.rodata:0000000000013D78                                         ; DATA XREF: usage+246↑o
.rodata:0000000000013D78                 db 'stination',0Ah
.rodata:0000000000013D78                 db '                                 file to default type',0Ah
.rodata:0000000000013D78                 db '      --context[=CTX]          like -Z, or if CTX is specified th'
.rodata:0000000000013D78                 db 'en set the',0Ah
.rodata:0000000000013D78                 db '                                 SELinux or SMACK security contex'
.rodata:0000000000013D78                 db 't to CTX',0Ah,0
.rodata:0000000000013E90 ; const char aHelpDisplayThi[]
.rodata:0000000000013E90 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000013E90                                         ; DATA XREF: usage+26B↑o
.rodata:0000000000013EBD                 align 20h
.rodata:0000000000013EC0 ; const char aVersionOutputV[]
.rodata:0000000000013EC0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000013EC0                                         ; DATA XREF: usage+290↑o
.rodata:0000000000013EF6                 align 8
.rodata:0000000000013EF8 ; const char aByDefaultSpars[]
.rodata:0000000000013EF8 aByDefaultSpars db 0Ah                  ; DATA XREF: usage+2B5↑o
.rodata:0000000000013EF8                 db 'By default, sparse SOURCE files are detected by a crude heuristic'
.rodata:0000000000013EF8                 db ' and the',0Ah
.rodata:0000000000013EF8                 db 'corresponding DEST file is made sparse as well.  That is the beha'
.rodata:0000000000013EF8                 db 'vior',0Ah
.rodata:0000000000013EF8                 db 'selected by --sparse=auto.  Specify --sparse=always to create a s'
.rodata:0000000000013EF8                 db 'parse DEST',0Ah
.rodata:0000000000013EF8                 db 'file whenever the SOURCE file contains a long enough sequence of '
.rodata:0000000000013EF8                 db 'zero bytes.',0Ah
.rodata:0000000000013EF8                 db 'Use --sparse=never to inhibit creation of sparse files.',0Ah,0
.rodata:000000000001405B                 align 20h
.rodata:0000000000014060 ; const char aWhenReflinkAlw[]
.rodata:0000000000014060 aWhenReflinkAlw db 0Ah                  ; DATA XREF: usage+2DA↑o
.rodata:0000000000014060                 db 'When --reflink[=always] is specified, perform a lightweight copy,'
.rodata:0000000000014060                 db ' where the',0Ah
.rodata:0000000000014060                 db 'data blocks are copied only when modified.  If this is not possib'
.rodata:0000000000014060                 db 'le the copy',0Ah
.rodata:0000000000014060                 db 'fails, or if --reflink=auto is specified, fall back to a standard'
.rodata:0000000000014060                 db ' copy.',0Ah
.rodata:0000000000014060                 db 'Use --reflink=never to ensure a standard copy is performed.',0Ah,0
.rodata:000000000001417F                 align 20h
.rodata:0000000000014180 ; const char aTheBackupSuffi[]
.rodata:0000000000014180 aTheBackupSuffi db 0Ah                  ; DATA XREF: usage+2FF↑o
.rodata:0000000000014180                 db 'The backup suffix is ',27h,'~',27h,', unless set with --suffix or'
.rodata:0000000000014180                 db ' SIMPLE_BACKUP_SUFFIX.',0Ah
.rodata:0000000000014180                 db 'The version control method may be selected via the --backup optio'
.rodata:0000000000014180                 db 'n or through',0Ah
.rodata:0000000000014180                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.rodata:0000000000014180                 db 0Ah,0
.rodata:000000000001425D                 align 20h
.rodata:0000000000014260 ; const char aNoneOffNeverMa[]
.rodata:0000000000014260 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.rodata:0000000000014260                                         ; DATA XREF: usage+324↑o
.rodata:0000000000014260                 db '  numbered, t     make numbered backups',0Ah
.rodata:0000000000014260                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.rodata:0000000000014260                 db 'rwise',0Ah
.rodata:0000000000014260                 db '  simple, never   always make simple backups',0Ah,0
.rodata:000000000001433E                 align 20h
.rodata:0000000000014340 ; const char aAsASpecialCase[]
.rodata:0000000000014340 aAsASpecialCase db 0Ah                  ; DATA XREF: usage+349↑o
.rodata:0000000000014340                 db 'As a special case, cp makes a backup of SOURCE when the force and'
.rodata:0000000000014340                 db ' backup',0Ah
.rodata:0000000000014340                 db 'options are given and SOURCE and DEST are the same name for an ex'
.rodata:0000000000014340                 db 'isting,',0Ah
.rodata:0000000000014340                 db 'regular file.',0Ah,0
.rodata:00000000000143E2                 align 8
.rodata:00000000000143E8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000143E8                                         ; DATA XREF: usage+43F↑o
.rodata:00000000000143E8                                         ; usage+4A3↑o ...
.rodata:0000000000014410 ; const char aReportAnyTrans[]
.rodata:0000000000014410 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000014410                                         ; DATA XREF: usage+597↑o
.rodata:0000000000014410                 db 'am/>',0Ah,0
.rodata:0000000000014457                 align 8
.rodata:0000000000014458 ; const char aOrAvailableLoc[]
.rodata:0000000000014458 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000014458                                         ; DATA XREF: usage:loc_46EE↑o
.rodata:000000000001448B                 align 10h
.rodata:0000000000014490 aMissingDestina db 'missing destination file operand after %s',0
.rodata:0000000000014490                                         ; DATA XREF: do_copy+4CE↑o
.rodata:00000000000144BA                 align 20h
.rodata:00000000000144C0 ; const char aCannotCombineT[]
.rodata:00000000000144C0 aCannotCombineT db 'cannot combine --target-directory (-t) and --no-target-directory '
.rodata:00000000000144C0                                         ; DATA XREF: do_copy:loc_4C6F↑o
.rodata:00000000000144C0                 db '(-T)',0
.rodata:0000000000014506                 align 8
.rodata:0000000000014508 ; const char aWithParentsThe[]
.rodata:0000000000014508 aWithParentsThe db 'with --parents, the destination must be a directory',0
.rodata:0000000000014508                                         ; DATA XREF: do_copy:loc_4CBC↑o
.rodata:000000000001453C                 align 20h
.rodata:0000000000014540 ; const char aMultipleTarget[]
.rodata:0000000000014540 aMultipleTarget db 'multiple target directories specified',0
.rodata:0000000000014540                                         ; DATA XREF: main:loc_35F6↑o
.rodata:0000000000014566                 align 8
.rodata:0000000000014568 ; const char aWarningIgnorin[]
.rodata:0000000000014568 aWarningIgnorin db 'warning: ignoring --context; it requires an SELinux-enabled kerne'
.rodata:0000000000014568                                         ; DATA XREF: main+4FD↑o
.rodata:0000000000014568                 db 'l',0
.rodata:00000000000145AB                 align 10h
.rodata:00000000000145B0 aCannotMakeBoth db 'cannot make both hard and symbolic links',0
.rodata:00000000000145B0                                         ; DATA XREF: main+642↑o
.rodata:00000000000145D9                 align 20h
.rodata:00000000000145E0 ; const char aOptionsBackupA[]
.rodata:00000000000145E0 aOptionsBackupA db 'options --backup and --no-clobber are mutually exclusive',0
.rodata:00000000000145E0                                         ; DATA XREF: main:loc_35CB↑o
.rodata:0000000000014619                 align 20h
.rodata:0000000000014620 aReflinkCanBeUs db '--reflink can be used only with --sparse=auto',0
.rodata:0000000000014620                                         ; DATA XREF: main+67B↑o
.rodata:000000000001464E                 align 10h
.rodata:0000000000014650 ; const char aCannotSetTarge[]
.rodata:0000000000014650 aCannotSetTarge db 'cannot set target context and preserve it',0
.rodata:0000000000014650                                         ; DATA XREF: main+6B2↑o
.rodata:000000000001467A                 align 20h
.rodata:0000000000014680 ; const char aCannotPreserve[]
.rodata:0000000000014680 aCannotPreserve db 'cannot preserve security context without an SELinux-enabled kerne'
.rodata:0000000000014680                                         ; DATA XREF: main:loc_35A0↑o
.rodata:0000000000014680                 db 'l',0
.rodata:00000000000146C3                 align 8
.rodata:00000000000146C8 ; const char aFailedToSetDef[]
.rodata:00000000000146C8 aFailedToSetDef db 'failed to set default file creation context to %s',0
.rodata:00000000000146C8                                         ; DATA XREF: main+7EB↑o
.rodata:00000000000146FA                 align 20h
.rodata:0000000000014700 ; const char aCannotPreserve_0[]
.rodata:0000000000014700 aCannotPreserve_0 db 'cannot preserve extended attributes, cp is built without xattr su'
.rodata:0000000000014700                                         ; DATA XREF: main:loc_361F↑o
.rodata:0000000000014700                 db 'pport',0
.rodata:0000000000014747                 align 8
.rodata:0000000000014748 ; const char msgid[]
.rodata:0000000000014748 msgid           db 'failed to restore the default file creation context',0
.rodata:0000000000014748                                         ; DATA XREF: restore_default_fscreatecon_or_die+6↑o
.rodata:000000000001477C                 align 20h
.rodata:0000000000014780 ; const char aCannotCreateHa[]
.rodata:0000000000014780 aCannotCreateHa db 'cannot create hard link %s to %s',0
.rodata:0000000000014780                                         ; DATA XREF: create_hard_link+CC↑o
.rodata:00000000000147A1                 align 8
.rodata:00000000000147A8 ; const char aSReplaceSOverr[]
.rodata:00000000000147A8 aSReplaceSOverr db '%s: replace %s, overriding mode %04lo (%s)? ',0
.rodata:00000000000147A8                                         ; DATA XREF: overwrite_ok_isra_12:loc_5086↑o
.rodata:00000000000147D5                 align 8
.rodata:00000000000147D8 ; const char aSUnwritableSMo[]
.rodata:00000000000147D8 aSUnwritableSMo db '%s: unwritable %s (mode %04lo, %s); try anyway? ',0
.rodata:00000000000147D8                                         ; DATA XREF: overwrite_ok_isra_12:loc_5130↑o
.rodata:0000000000014809                 align 10h
.rodata:0000000000014810 ; const char aFailedToGetSec[]
.rodata:0000000000014810 aFailedToGetSec db 'failed to get security context of %s',0
.rodata:0000000000014810                                         ; DATA XREF: set_process_security_ctx+3A↑o
.rodata:0000000000014835                 align 8
.rodata:0000000000014838 ; const char aFailedToSetThe[]
.rodata:0000000000014838 aFailedToSetThe db 'failed to set the security context of %s',0
.rodata:0000000000014838                                         ; DATA XREF: set_file_security_ctx+33↑o
.rodata:0000000000014861                 align 8
.rodata:0000000000014868 ; const char aRNotSpecifiedO[]
.rodata:0000000000014868 aRNotSpecifiedO db '-r not specified; omitting directory %s',0
.rodata:0000000000014868                                         ; DATA XREF: copy_internal+BF9↑o
.rodata:0000000000014890 ; const char aWarningSourceF[]
.rodata:0000000000014890 aWarningSourceF db 'warning: source file %s specified more than once',0
.rodata:0000000000014890                                         ; DATA XREF: copy_internal+1939↑o
.rodata:00000000000148C1                 align 8
.rodata:00000000000148C8 aCannotOverwrit_0 db 'cannot overwrite non-directory %s with directory %s',0
.rodata:00000000000148C8                                         ; DATA XREF: copy_internal+23AF↑o
.rodata:00000000000148FC                 align 20h
.rodata:0000000000014900 aWillNotOverwri db 'will not overwrite just-created %s with %s',0
.rodata:0000000000014900                                         ; DATA XREF: copy_internal+2B49↑o
.rodata:000000000001492B                 align 10h
.rodata:0000000000014930 ; const char aCannotOverwrit[]
.rodata:0000000000014930 aCannotOverwrit db 'cannot overwrite directory %s with non-directory',0
.rodata:0000000000014930                                         ; DATA XREF: copy_internal+1303↑o
.rodata:0000000000014961                 align 8
.rodata:0000000000014968 aCannotMoveDire db 'cannot move directory onto non-directory: %s -> %s',0
.rodata:0000000000014968                                         ; DATA XREF: copy_internal+25A0↑o
.rodata:000000000001499B                 align 20h
.rodata:00000000000149A0 ; const char aBackingUpSMigh[]
.rodata:00000000000149A0 aBackingUpSMigh db 'backing up %s might destroy source;  %s not moved',0
.rodata:00000000000149A0                                         ; DATA XREF: copy_internal+2914↑o
.rodata:00000000000149D2                 align 8
.rodata:00000000000149D8 ; const char aBackingUpSMigh_0[]
.rodata:00000000000149D8 aBackingUpSMigh_0 db 'backing up %s might destroy source;  %s not copied',0
.rodata:00000000000149D8                                         ; DATA XREF: copy_internal:loc_85F6↑o
.rodata:0000000000014A0B                 align 10h
.rodata:0000000000014A10 ; const char aWillNotCopySTh[]
.rodata:0000000000014A10 aWillNotCopySTh db 'will not copy %s through just-created symlink %s',0
.rodata:0000000000014A10                                         ; DATA XREF: copy_internal+419↑o
.rodata:0000000000014A41                 align 8
.rodata:0000000000014A48 ; const char aCannotCopyADir[]
.rodata:0000000000014A48 aCannotCopyADir db 'cannot copy a directory, %s, into itself, %s',0
.rodata:0000000000014A48                                         ; DATA XREF: copy_internal+10D2↑o
.rodata:0000000000014A75                 align 8
.rodata:0000000000014A78 ; const char aWarningSourceD[]
.rodata:0000000000014A78 aWarningSourceD db 'warning: source directory %s specified more than once',0
.rodata:0000000000014A78                                         ; DATA XREF: copy_internal+26DB↑o
.rodata:0000000000014AAE                 align 10h
.rodata:0000000000014AB0 ; const char aWillNotCreateH[]
.rodata:0000000000014AB0 aWillNotCreateH db 'will not create hard link %s to directory %s',0
.rodata:0000000000014AB0                                         ; DATA XREF: copy_internal+2041↑o
.rodata:0000000000014ADD                 align 20h
.rodata:0000000000014AE0 ; const char aCannotMoveSToA[]
.rodata:0000000000014AE0 aCannotMoveSToA db 'cannot move %s to a subdirectory of itself, %s',0
.rodata:0000000000014AE0                                         ; DATA XREF: copy_internal+19DC↑o
.rodata:0000000000014B0F                 align 10h
.rodata:0000000000014B10 ; const char aInterDeviceMov[]
.rodata:0000000000014B10 aInterDeviceMov db 'inter-device move failed: %s to %s; unable to remove target',0
.rodata:0000000000014B10                                         ; DATA XREF: copy_internal+1A6A↑o
.rodata:0000000000014B4C                 align 10h
.rodata:0000000000014B50 ; const char aCannotCreateSy[]
.rodata:0000000000014B50 aCannotCreateSy db 'cannot create symbolic link %s to %s',0
.rodata:0000000000014B50                                         ; DATA XREF: copy_internal+F60↑o
.rodata:0000000000014B75                 align 8
.rodata:0000000000014B78 ; const char aSkippingFileSA[]
.rodata:0000000000014B78 aSkippingFileSA db 'skipping file %s, as it was replaced while being copied',0
.rodata:0000000000014B78                                         ; DATA XREF: copy_internal+2123↑o
.rodata:0000000000014BB0 ; const char aNotWritingThro[]
.rodata:0000000000014BB0 aNotWritingThro db 'not writing through dangling symlink %s',0
.rodata:0000000000014BB0                                         ; DATA XREF: copy_internal+401F↑o
.rodata:0000000000014BD8 aSFailedToGetEx db '%s: failed to get extents info',0
.rodata:0000000000014BD8                                         ; DATA XREF: copy_internal+3F4B↑o
.rodata:0000000000014BF7                 align 8
.rodata:0000000000014BF8 ; const char aCannotCopyCycl[]
.rodata:0000000000014BF8 aCannotCopyCycl db 'cannot copy cyclic symbolic link %s',0
.rodata:0000000000014BF8                                         ; DATA XREF: copy_internal+B99↑o
.rodata:0000000000014C1C                 align 20h
.rodata:0000000000014C20 aSCanMakeRelati db '%s: can make relative symbolic links only in current directory',0
.rodata:0000000000014C20                                         ; DATA XREF: copy_internal+2247↑o
.rodata:0000000000014C5F                 align 20h
.rodata:0000000000014C60 ; const char aCannotCreateSy_0[]
.rodata:0000000000014C60 aCannotCreateSy_0 db 'cannot create symbolic link %s',0
.rodata:0000000000014C60                                         ; DATA XREF: copy_internal+2CD3↑o
.rodata:0000000000014C7F                 align 20h
.rodata:0000000000014C80 ; const char aValidBackupTyp[]
.rodata:0000000000014C80 aValidBackupTyp db 'VALID_BACKUP_TYPE (co->backup_type)',0
.rodata:0000000000014C80                                         ; DATA XREF: copy+135↑o
.rodata:0000000000014CA4                 align 8
.rodata:0000000000014CA8 ; const char aValidSparseMod[]
.rodata:0000000000014CA8 aValidSparseMod db 'VALID_SPARSE_MODE (co->sparse_mode)',0
.rodata:0000000000014CA8                                         ; DATA XREF: copy+116↑o
.rodata:0000000000014CCC                 align 10h
.rodata:0000000000014CD0 ; const char aValidReflinkMo[]
.rodata:0000000000014CD0 aValidReflinkMo db 'VALID_REFLINK_MODE (co->reflink_mode)',0
.rodata:0000000000014CD0                                         ; DATA XREF: copy+F7↑o
.rodata:0000000000014CF6                 align 8
.rodata:0000000000014CF8 ; const char assertion[]
.rodata:0000000000014CF8 assertion       db '!(co->hard_link && co->symbolic_link)',0
.rodata:0000000000014CF8                                         ; DATA XREF: copy+B4↑o
.rodata:0000000000014D1E                 align 20h
.rodata:0000000000014D20 ; const char aCoReflinkModeR[]
.rodata:0000000000014D20 aCoReflinkModeR db '! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARS'
.rodata:0000000000014D20                                         ; DATA XREF: copy+D3↑o
.rodata:0000000000014D20                 db 'E_AUTO)',0
.rodata:0000000000014D69 aSS_0           db '%s -> %s',0         ; DATA XREF: emit_verbose+2E↑o
.rodata:0000000000014D72 ; const char aBackupS[]
.rodata:0000000000014D72 aBackupS        db ' (backup: %s)',0    ; DATA XREF: emit_verbose+59↑o
.rodata:0000000000014D80 ; const char aRemovedS[]
.rodata:0000000000014D80 aRemovedS       db 'removed %s',0Ah,0   ; DATA XREF: create_hard_link+6D↑o
.rodata:0000000000014D80                                         ; copy_internal+2D6A↑o ...
.rodata:0000000000014D8C ; const char aSOverwriteS[]
.rodata:0000000000014D8C aSOverwriteS    db '%s: overwrite %s? ',0
.rodata:0000000000014D8C                                         ; DATA XREF: overwrite_ok_isra_12+D5↑o
.rodata:0000000000014D9F aCannotLseekS   db 'cannot lseek %s',0  ; DATA XREF: create_hole+B5↑o
.rodata:0000000000014D9F                                         ; copy_internal+40D6↑o
.rodata:0000000000014DAF ; const char aErrorDeallocat[]
.rodata:0000000000014DAF aErrorDeallocat db 'error deallocating %s',0
.rodata:0000000000014DAF                                         ; DATA XREF: create_hole+61↑o
.rodata:0000000000014DAF                                         ; copy_internal+3CA2↑o
.rodata:0000000000014DC5 ; const char aErrorReadingS[]
.rodata:0000000000014DC5 aErrorReadingS  db 'error reading %s',0 ; DATA XREF: sparse_copy+DE↑o
.rodata:0000000000014DD6 ; const char aErrorWritingS[]
.rodata:0000000000014DD6 aErrorWritingS  db 'error writing %s',0 ; DATA XREF: sparse_copy+3CF↑o
.rodata:0000000000014DE7 ; const char aOverflowReadin[]
.rodata:0000000000014DE7 aOverflowReadin db 'overflow reading %s',0
.rodata:0000000000014DE7                                         ; DATA XREF: sparse_copy+382↑o
.rodata:0000000000014DFB ; const char aClearingPermis[]
.rodata:0000000000014DFB aClearingPermis db 'clearing permissions for %s',0
.rodata:0000000000014DFB                                         ; DATA XREF: set_owner+163↑o
.rodata:0000000000014E17 ; const char aCannotStatS[]
.rodata:0000000000014E17 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: copy_internal+8EF↑o
.rodata:0000000000014E17                                         ; copy_internal+E75↑o ...
.rodata:0000000000014E26 ; const char aOmittingDirect[]
.rodata:0000000000014E26 aOmittingDirect db 'omitting directory %s',0
.rodata:0000000000014E26                                         ; DATA XREF: copy_internal:loc_7410↑o
.rodata:0000000000014E3C ; const char aSAndSAreTheSam[]
.rodata:0000000000014E3C aSAndSAreTheSam db '%s and %s are the same file',0
.rodata:0000000000014E3C                                         ; DATA XREF: copy_internal+162C↑o
.rodata:0000000000014E58 ; const char aCannotBackupS[]
.rodata:0000000000014E58 aCannotBackupS  db 'cannot backup %s',0 ; DATA XREF: copy_internal+2742↑o
.rodata:0000000000014E69 ; const char aCannotRemoveS[]
.rodata:0000000000014E69 aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: copy_internal+2425↑o
.rodata:0000000000014E69                                         ; copy_internal+3F97↑o
.rodata:0000000000014E7A ; const char aRenamed[]
.rodata:0000000000014E7A aRenamed        db 'renamed ',0         ; DATA XREF: copy_internal:loc_6E10↑o
.rodata:0000000000014E83 ; const char aCannotMoveSToS[]
.rodata:0000000000014E83 aCannotMoveSToS db 'cannot move %s to %s',0
.rodata:0000000000014E83                                         ; DATA XREF: copy_internal+1194↑o
.rodata:0000000000014E98 ; const char aCopied[]
.rodata:0000000000014E98 aCopied         db 'copied ',0          ; DATA XREF: copy_internal:loc_7DB0↑o
.rodata:0000000000014EA0 ; const char aCannotCreateDi[]
.rodata:0000000000014EA0 aCannotCreateDi db 'cannot create directory %s',0
.rodata:0000000000014EA0                                         ; DATA XREF: copy_internal+14D0↑o
.rodata:0000000000014EBB ; const char aCreatedDirecto[]
.rodata:0000000000014EBB aCreatedDirecto db 'created directory %s',0Ah,0
.rodata:0000000000014EBB                                         ; DATA XREF: copy_internal+1D19↑o
.rodata:0000000000014ED1 ; const char aCannotAccessS[]
.rodata:0000000000014ED1 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: copy_internal+2C29↑o
.rodata:0000000000014EE2 aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:0000000000014EE2                                         ; DATA XREF: copy_internal+27E4↑o
.rodata:0000000000014EFD ; const char aCannotFstatS[]
.rodata:0000000000014EFD aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: copy_internal+2A18↑o
.rodata:0000000000014EFD                                         ; copy_internal+3A87↑o
.rodata:0000000000014F0D ; const char aCannotCreateRe[]
.rodata:0000000000014F0D aCannotCreateRe db 'cannot create regular file %s',0
.rodata:0000000000014F0D                                         ; DATA XREF: copy_internal+3476↑o
.rodata:0000000000014F2B ; const char aFailedToCloneS[]
.rodata:0000000000014F2B aFailedToCloneS db 'failed to clone %s from %s',0
.rodata:0000000000014F2B                                         ; DATA XREF: copy_internal+3D9A↑o
.rodata:0000000000014F46 ; const char aSWriteFailed[]
.rodata:0000000000014F46 aSWriteFailed   db '%s: write failed',0 ; DATA XREF: copy_internal+3EF4↑o
.rodata:0000000000014F57 ; const char aFailedToExtend[]
.rodata:0000000000014F57 aFailedToExtend db 'failed to extend %s',0
.rodata:0000000000014F57                                         ; DATA XREF: copy_internal+3B8B↑o
.rodata:0000000000014F6B ; const char aPreservingTime[]
.rodata:0000000000014F6B aPreservingTime db 'preserving times for %s',0
.rodata:0000000000014F6B                                         ; DATA XREF: copy_internal+69B↑o
.rodata:0000000000014F6B                                         ; copy_internal+3A30↑o
.rodata:0000000000014F83 ; const char aPreservingPerm[]
.rodata:0000000000014F83 aPreservingPerm db 'preserving permissions for %s',0
.rodata:0000000000014F83                                         ; DATA XREF: copy_internal+7BB↑o
.rodata:0000000000014F83                                         ; copy_internal+36D0↑o ...
.rodata:0000000000014FA1 ; const char aFailedToCloseS[]
.rodata:0000000000014FA1 aFailedToCloseS db 'failed to close %s',0
.rodata:0000000000014FA1                                         ; DATA XREF: copy_internal+2BD8↑o
.rodata:0000000000014FA1                                         ; copy_internal+32C8↑o
.rodata:0000000000014FB4 aCannotCreateFi db 'cannot create fifo %s',0
.rodata:0000000000014FB4                                         ; DATA XREF: copy_internal+29FB↑o
.rodata:0000000000014FCA aCannotCreateSp db 'cannot create special file %s',0
.rodata:0000000000014FCA                                         ; DATA XREF: copy_internal+2614↑o
.rodata:0000000000014FE8 aCannotReadSymb db 'cannot read symbolic link %s',0
.rodata:0000000000014FE8                                         ; DATA XREF: copy_internal+34DC↑o
.rodata:0000000000015005 aSHasUnknownFil db '%s has unknown file type',0
.rodata:0000000000015005                                         ; DATA XREF: copy_internal+18FB↑o
.rodata:000000000001501E aCannotUnBackup db 'cannot un-backup %s',0
.rodata:000000000001501E                                         ; DATA XREF: copy_internal+1879↑o
.rodata:0000000000015032 ; const char aSSUnbackup[]
.rodata:0000000000015032 aSSUnbackup     db '%s -> %s (unbackup)',0Ah,0
.rodata:0000000000015032                                         ; DATA XREF: copy_internal+1005↑o
.rodata:0000000000015047 ; const char file[]
.rodata:0000000000015047 file            db '../coreutils-8.31/src/copy.c',0
.rodata:0000000000015047                                         ; DATA XREF: copy+AD↑o
.rodata:0000000000015047                                         ; copy+CC↑o ...
.rodata:0000000000015064 ; const char aCoNull[]
.rodata:0000000000015064 aCoNull         db 'co != NULL',0       ; DATA XREF: copy+154↑o
.rodata:000000000001506F                 align 10h
.rodata:0000000000015070 ; const char _PRETTY_FUNCTION___7875[]
.rodata:0000000000015070 __PRETTY_FUNCTION___7875 db 'valid_options',0
.rodata:0000000000015070                                         ; DATA XREF: copy+A6↑o
.rodata:0000000000015070                                         ; copy:loc_9C55↑o ...
.rodata:000000000001507E                 align 20h
.rodata:0000000000015080 ; const char aCoreutils831Sr_0[]
.rodata:0000000000015080 aCoreutils831Sr_0 db '../coreutils-8.31/src/extent-scan.c',0
.rodata:0000000000015080                                         ; DATA XREF: extent_scan_read+1F1↑o
.rodata:0000000000015080                                         ; extent_scan_read+2E1↑o
.rodata:00000000000150A4                 align 8
.rodata:00000000000150A8 ; const char aScanEiCountSiz[]
.rodata:00000000000150A8 aScanEiCountSiz db 'scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents',0
.rodata:00000000000150A8                                         ; DATA XREF: extent_scan_read+2E8↑o
.rodata:00000000000150DF                 align 20h
.rodata:00000000000150E0 ; const char aFmExtentsIFeLo[]
.rodata:00000000000150E0 aFmExtentsIFeLo db 'fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length',0
.rodata:00000000000150E0                                         ; DATA XREF: extent_scan_read+1F8↑o
.rodata:0000000000015120 ; const char _PRETTY_FUNCTION___6956[]
.rodata:0000000000015120 __PRETTY_FUNCTION___6956 db 'extent_scan_read',0
.rodata:0000000000015120                                         ; DATA XREF: extent_scan_read:loc_A10A↑o
.rodata:0000000000015120                                         ; extent_scan_read:loc_A1FA↑o
.rodata:0000000000015131 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000015136 ; const char aInvalidArgumen[]
.rodata:0000000000015136 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000015136                                         ; DATA XREF: argmatch_invalid:loc_A900↑o
.rodata:0000000000015151 ; const char aAmbiguousArgum[]
.rodata:0000000000015151 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000015151                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000001516E ; const char aValidArguments[]
.rodata:000000000001516E aValidArguments db 'Valid arguments are:',0
.rodata:000000000001516E                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000015183 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000015183                 db '  - %s',0
.rodata:000000000001518B aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000001518B                                         ; copy_acl+72↑o ...
.rodata:0000000000015190 asc_15190       db '~',0                ; DATA XREF: set_simple_backup_suffix:loc_AB0E↑o
.rodata:0000000000015192 ; const char aSimpleBackupSu[]
.rodata:0000000000015192 aSimpleBackupSu db 'SIMPLE_BACKUP_SUFFIX',0
.rodata:0000000000015192                                         ; DATA XREF: set_simple_backup_suffix:loc_AB30↑o
.rodata:00000000000151A7 unk_151A7       db  24h ; $             ; DATA XREF: xget_version+24↑o
.rodata:00000000000151A8 ; const char aVersionControl[]
.rodata:00000000000151A8 aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: xget_version:loc_B20A↑o
.rodata:00000000000151B8 aNone           db 'none',0             ; DATA XREF: .data.rel.ro:backup_args↓o
.rodata:00000000000151BD aOff            db 'off',0              ; DATA XREF: .data.rel.ro:0000000000219988↓o
.rodata:00000000000151C1 aSimple         db 'simple',0           ; DATA XREF: .data.rel.ro:0000000000219990↓o
.rodata:00000000000151C8 aExisting       db 'existing',0         ; DATA XREF: .data.rel.ro:00000000002199A0↓o
.rodata:00000000000151D1 aNil            db 'nil',0              ; DATA XREF: .data.rel.ro:00000000002199A8↓o
.rodata:00000000000151D5 aNumbered       db 'numbered',0         ; DATA XREF: .data.rel.ro:00000000002199B0↓o
.rodata:00000000000151DE                 align 20h
.rodata:00000000000151E0 backup_types    db    0                 ; DATA XREF: get_version_part_0+12↑o
.rodata:00000000000151E0                                         ; get_version_part_0+24↑o
.rodata:00000000000151E1                 db    0
.rodata:00000000000151E2                 db    0
.rodata:00000000000151E3                 db    0
.rodata:00000000000151E4                 db    0
.rodata:00000000000151E5                 db    0
.rodata:00000000000151E6                 db    0
.rodata:00000000000151E7                 db    0
.rodata:00000000000151E8                 db    1
.rodata:00000000000151E9                 db    0
.rodata:00000000000151EA                 db    0
.rodata:00000000000151EB                 db    0
.rodata:00000000000151EC                 db    1
.rodata:00000000000151ED                 db    0
.rodata:00000000000151EE                 db    0
.rodata:00000000000151EF                 db    0
.rodata:00000000000151F0                 db    2
.rodata:00000000000151F1                 db    0
.rodata:00000000000151F2                 db    0
.rodata:00000000000151F3                 db    0
.rodata:00000000000151F4                 db    2
.rodata:00000000000151F5                 db    0
.rodata:00000000000151F6                 db    0
.rodata:00000000000151F7                 db    0
.rodata:00000000000151F8                 db    3
.rodata:00000000000151F9                 db    0
.rodata:00000000000151FA                 db    0
.rodata:00000000000151FB                 db    0
.rodata:00000000000151FC                 db    3
.rodata:00000000000151FD                 db    0
.rodata:00000000000151FE                 db    0
.rodata:00000000000151FF                 db    0
.rodata:0000000000015200 ; const char aErrorClosingFi[]
.rodata:0000000000015200 aErrorClosingFi db 'error closing file',0
.rodata:0000000000015200                                         ; DATA XREF: close_stdin:loc_B328↑o
.rodata:0000000000015213 ; const char format[]
.rodata:0000000000015213 format          db '%s: %s',0           ; DATA XREF: close_stdin+8D↑o
.rodata:0000000000015213                                         ; close_stdout+6C↑o
.rodata:000000000001521A ; const char aWriteError[]
.rodata:000000000001521A aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_B443↑o
.rodata:0000000000015226 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:0000000000015226                                         ; DATA XREF: hash_print_statistics:loc_C075↑o
.rodata:000000000001523E aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000001523E                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:0000000000015256 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:0000000000015256                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000001526E                 align 10h
.rodata:0000000000015270 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:0000000000015270                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:0000000000015291                 align 20h
.rodata:00000000000152A0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:00000000000152A0                                         ; hash_initialize:loc_C4E0↑o
.rodata:00000000000152A1                 db    0
.rodata:00000000000152A2                 db    0
.rodata:00000000000152A3                 db    0
.rodata:00000000000152A4                 db    0
.rodata:00000000000152A5                 db    0
.rodata:00000000000152A6                 db  80h
.rodata:00000000000152A7                 db  3Fh ; ?
.rodata:00000000000152A8                 db 0CDh
.rodata:00000000000152A9                 db 0CCh
.rodata:00000000000152AA                 db  4Ch ; L
.rodata:00000000000152AB                 db  3Fh ; ?
.rodata:00000000000152AC                 db 0F4h
.rodata:00000000000152AD                 db 0FDh
.rodata:00000000000152AE                 db 0B4h
.rodata:00000000000152AF                 db  3Fh ; ?
.rodata:00000000000152B0                 db    0
.rodata:00000000000152B1                 db    0
.rodata:00000000000152B2                 db    0
.rodata:00000000000152B3                 db    0
.rodata:00000000000152B4 dword_152B4     dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:00000000000152B4                                         ; check_tuning+4A↑r
.rodata:00000000000152B8 dword_152B8     dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:00000000000152BC dword_152BC     dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:00000000000152C0 dword_152C0     dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:00000000000152C4 dword_152C4     dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:00000000000152C8 dword_152C8     dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:00000000000152CC dword_152CC     dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:00000000000152CC                                         ; hash_rehash+40↑r ...
.rodata:00000000000152D0 dword_152D0     dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:00000000000152D0                                         ; hash_initialize+150↑r ...
.rodata:00000000000152D4                 align 8
.rodata:00000000000152D8 qword_152D8     dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:00000000000152D8                                         ; hash_print_statistics+11F↑r
.rodata:00000000000152E0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000152E0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000015318 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000015320 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000015324 unk_15324       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000015325                 db  80h
.rodata:0000000000015326                 db  98h
.rodata:0000000000015327                 db    0
.rodata:0000000000015328 unk_15328       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000015329                 db  80h
.rodata:000000000001532A                 db  99h
.rodata:000000000001532B                 db    0
.rodata:000000000001532C unk_1532C       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000001532D                 db    7
.rodata:000000000001532E                 db  65h ; e
.rodata:000000000001532F                 db    0
.rodata:0000000000015330 unk_15330       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000015331                 db 0AFh
.rodata:0000000000015332                 db    0
.rodata:0000000000015333 unk_15333       db  22h ; "             ; DATA XREF: gettext_quote:loc_D130↑o
.rodata:0000000000015333                                         ; quotearg_buffer_restyled:loc_DEEB↑o ...
.rodata:0000000000015334                 db    0
.rodata:0000000000015335 ; const char asc_15335[2]
.rodata:0000000000015335 asc_15335       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000015335                                         ; quotearg_buffer_restyled:loc_D2B3↑o ...
.rodata:0000000000015337 ; const char asc_15337[2]
.rodata:0000000000015337 asc_15337       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000015337                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000015339 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000015341 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:00000000002199E8↓o
.rodata:0000000000015347 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:00000000002199F0↓o
.rodata:0000000000015354 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:00000000002199F8↓o
.rodata:0000000000015354                                         ; .data.rel.ro:0000000000219A18↓o
.rodata:0000000000015361 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000015361                                         ; DATA XREF: .data.rel.ro:0000000000219A00↓o
.rodata:0000000000015361                                         ; .data.rel.ro:0000000000219948↓o ...
.rodata:0000000000015375 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000219A10↓o
.rodata:000000000001537D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000219A28↓o
.rodata:0000000000015385                 align 20h
.rodata:00000000000153A0 jpt_D291        dd offset loc_E03A - 153A0h
.rodata:00000000000153A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000153A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000153A0                 dd offset loc_D293 - 153A0h ; jump table for switch statement
.rodata:00000000000153A0                 dd offset loc_E268 - 153A0h
.rodata:00000000000153A0                 dd offset loc_E074 - 153A0h
.rodata:00000000000153A0                 dd offset loc_DE64 - 153A0h
.rodata:00000000000153A0                 dd offset loc_DEC0 - 153A0h
.rodata:00000000000153A0                 dd offset loc_DF15 - 153A0h
.rodata:00000000000153A0                 dd offset loc_DF5A - 153A0h
.rodata:00000000000153A0                 dd offset loc_DF94 - 153A0h
.rodata:00000000000153A0                 dd offset loc_DF94 - 153A0h
.rodata:00000000000153A0                 dd offset loc_DF94 - 153A0h
.rodata:00000000000153CC jpt_D3EE        dd offset loc_D610 - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000153CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh ; jump table for switch statement
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset loc_D650 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D558 - 153CCh, offset loc_D518 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D6E0 - 153CCh, offset loc_D6D0 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D6C0 - 153CCh, offset loc_D6B0 - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset def_D3EE - 153CCh
.rodata:00000000000153CC                 dd offset loc_D6A0 - 153CCh, offset loc_D690 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D660 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D4F3 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D690 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D690 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D690 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D4C3 - 153CCh
.rodata:00000000000153CC                 dd offset def_D3EE - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D690 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D568 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D638 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D638 - 153CCh, offset loc_D3F3 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D690 - 153CCh, offset loc_D3F3 - 153CCh
.rodata:00000000000153CC                 dd offset loc_D660 - 153CCh
.rodata:00000000000155C8 jpt_D77A        dd offset loc_D7E0 - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000155C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h ; jump table for switch statement
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset loc_D7D0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D920 - 155C8h, offset loc_D908 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D7B8 - 155C8h, offset loc_D8F8 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D7A0 - 155C8h, offset loc_D8E0 - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset def_D77A - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8C8 - 155C8h, offset loc_D8B0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D898 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D4F0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D8B0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D8B0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D8B0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D4C0 - 155C8h
.rodata:00000000000155C8                 dd offset def_D77A - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D8B0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D780 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D880 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D880 - 155C8h, offset loc_D3F0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D8B0 - 155C8h, offset loc_D3F0 - 155C8h
.rodata:00000000000155C8                 dd offset loc_D898 - 155C8h
.rodata:00000000000157C4                 align 20h
.rodata:00000000000157E0                 public quoting_style_vals
.rodata:00000000000157E0 quoting_style_vals db    0
.rodata:00000000000157E1                 db    0
.rodata:00000000000157E2                 db    0
.rodata:00000000000157E3                 db    0
.rodata:00000000000157E4                 db    1
.rodata:00000000000157E5                 db    0
.rodata:00000000000157E6                 db    0
.rodata:00000000000157E7                 db    0
.rodata:00000000000157E8                 db    2
.rodata:00000000000157E9                 db    0
.rodata:00000000000157EA                 db    0
.rodata:00000000000157EB                 db    0
.rodata:00000000000157EC                 db    3
.rodata:00000000000157ED                 db    0
.rodata:00000000000157EE                 db    0
.rodata:00000000000157EF                 db    0
.rodata:00000000000157F0                 db    4
.rodata:00000000000157F1                 db    0
.rodata:00000000000157F2                 db    0
.rodata:00000000000157F3                 db    0
.rodata:00000000000157F4                 db    5
.rodata:00000000000157F5                 db    0
.rodata:00000000000157F6                 db    0
.rodata:00000000000157F7                 db    0
.rodata:00000000000157F8                 db    6
.rodata:00000000000157F9                 db    0
.rodata:00000000000157FA                 db    0
.rodata:00000000000157FB                 db    0
.rodata:00000000000157FC                 db    7
.rodata:00000000000157FD                 db    0
.rodata:00000000000157FE                 db    0
.rodata:00000000000157FF                 db    0
.rodata:0000000000015800                 db    8
.rodata:0000000000015801                 db    0
.rodata:0000000000015802                 db    0
.rodata:0000000000015803                 db    0
.rodata:0000000000015804                 db    9
.rodata:0000000000015805                 db    0
.rodata:0000000000015806                 db    0
.rodata:0000000000015807                 db    0
.rodata:0000000000015808 ; const char aCoreutils831Li[]
.rodata:0000000000015808 aCoreutils831Li db '../coreutils-8.31/lib/tempname.c',0
.rodata:0000000000015808                                         ; DATA XREF: gen_tempname_len+1D↑o
.rodata:0000000000015829                 align 10h
.rodata:0000000000015830 ; const char s[]
.rodata:0000000000015830 s               db '! "invalid KIND in __gen_tempname"',0
.rodata:0000000000015830                                         ; DATA XREF: gen_tempname_len+24↑o
.rodata:0000000000015853                 align 20h
.rodata:0000000000015860 ; const char _PRETTY_FUNCTION___5642[]
.rodata:0000000000015860 __PRETTY_FUNCTION___5642 db 'gen_tempname_len',0
.rodata:0000000000015860                                         ; DATA XREF: gen_tempname_len+16↑o
.rodata:0000000000015871                 align 20h
.rodata:0000000000015880 letters         db 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.rodata:0000000000015880                                         ; DATA XREF: try_tempname_len+90↑o
.rodata:00000000000158BF aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000158CB aSS_2           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000158D2 ; const char aC_0[]
.rodata:00000000000158D2 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_109FC↑o
.rodata:00000000000158D6 ; const char aWrittenByS[]
.rodata:00000000000158D6 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000158D6                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000158E6 ; const char aWrittenBySAndS[]
.rodata:00000000000158E6 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000158E6                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000158FD ; const char aWrittenBySSAnd[]
.rodata:00000000000158FD aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000158FD                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000015919 ; const char aReportBugsToS[]
.rodata:0000000000015919 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000015919                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000001592E aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000001592E                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000015944 ; const char aSHomePageS[]
.rodata:0000000000015944 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000015944                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000015958 ; const char aLicenseGplv3Gn[]
.rodata:0000000000015958 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000015958                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000015958                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000015958                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000015958                 db '.',0Ah
.rodata:0000000000015958                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000015958                 db 0Ah,0
.rodata:0000000000015A24                 align 8
.rodata:0000000000015A28 ; const char aWrittenBySSSAn[]
.rodata:0000000000015A28 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015A28                                         ; DATA XREF: version_etc_arn:loc_10C50↑o
.rodata:0000000000015A28                 db 'and %s.',0Ah,0
.rodata:0000000000015A48 ; const char aWrittenBySSSSA[]
.rodata:0000000000015A48 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015A48                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000015A48                 db '%s, and %s.',0Ah,0
.rodata:0000000000015A6C                 align 10h
.rodata:0000000000015A70 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000015A70 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015A70                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000015A70                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000015A98 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000015A98 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015A98                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000015A98                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000015AC4                 align 8
.rodata:0000000000015AC8 ; const char aWrittenBySSSSS[]
.rodata:0000000000015AC8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015AC8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000015AC8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000015AC8                 db 'and %s.',0Ah,0
.rodata:0000000000015AF8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000015AF8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015AF8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000015AF8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000015AF8                 db '%s, and %s.',0Ah,0
.rodata:0000000000015B2C                 align 10h
.rodata:0000000000015B30 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015B30                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000015B30                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000015B30                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000015B6C                 align 10h
.rodata:0000000000015B70 ; const char aGeneralHelpUsi[]
.rodata:0000000000015B70 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000015B70                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000015B70                 db 0
.rodata:0000000000015BB1                 align 8
.rodata:0000000000015BB8 jpt_10A64       dd offset loc_10AE6 - 15BB8h
.rodata:0000000000015BB8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000015BB8                                         ; version_etc_arn+9D↑r
.rodata:0000000000015BB8                 dd offset loc_10B78 - 15BB8h ; jump table for switch statement
.rodata:0000000000015BB8                 dd offset loc_10BB8 - 15BB8h
.rodata:0000000000015BB8                 dd offset loc_10C00 - 15BB8h
.rodata:0000000000015BB8                 dd offset loc_10C50 - 15BB8h
.rodata:0000000000015BB8                 dd offset loc_10CA8 - 15BB8h
.rodata:0000000000015BB8                 dd offset loc_10CD8 - 15BB8h
.rodata:0000000000015BB8                 dd offset loc_10D40 - 15BB8h
.rodata:0000000000015BB8                 dd offset loc_10A70 - 15BB8h
.rodata:0000000000015BB8                 dd offset loc_10B20 - 15BB8h
.rodata:0000000000015BE0                 public version_etc_copyright
.rodata:0000000000015BE0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000015BE0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000015C0F ; const char aMemoryExhauste[]
.rodata:0000000000015C0F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000015C20 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000015C22 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_116E0↑o
.rodata:0000000000015C28 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000015C28                                         ; locale_charset:loc_11770↑o
.rodata:0000000000015C2E ; const char aSEndOfFile[]
.rodata:0000000000015C2E aSEndOfFile     db '%s: end of file',0  ; DATA XREF: randread_error:loc_11A5D↑o
.rodata:0000000000015C3E ; const char aSReadError[]
.rodata:0000000000015C3E aSReadError     db '%s: read error',0   ; DATA XREF: randread_error+25↑o
.rodata:0000000000015C4D ; const char aDevUrandom[]
.rodata:0000000000015C4D aDevUrandom     db '/dev/urandom',0     ; DATA XREF: randread_new+CB↑o
.rodata:0000000000015C5A aRb             db 'rb',0               ; DATA XREF: randread_new+32↑o
.rodata:0000000000015C5A _rodata         ends
.rodata:0000000000015C5A
LOAD:0000000000015C5D ; ===========================================================================
LOAD:0000000000015C5D
LOAD:0000000000015C5D ; Segment type: Pure code
LOAD:0000000000015C5D ; Segment permissions: Read/Execute
LOAD:0000000000015C5D LOAD            segment byte public 'CODE' use64
LOAD:0000000000015C5D                 assume cs:LOAD
LOAD:0000000000015C5D                 ;org 15C5Dh
LOAD:0000000000015C5D                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000015C5D                 align 20h
LOAD:0000000000015C5D LOAD            ends
LOAD:0000000000015C5D
.eh_frame_hdr:0000000000015C60 ; ===========================================================================
.eh_frame_hdr:0000000000015C60
.eh_frame_hdr:0000000000015C60 ; Segment type: Pure data
.eh_frame_hdr:0000000000015C60 ; Segment permissions: Read
.eh_frame_hdr:0000000000015C60 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000015C60                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000015C60                 ;org 15C60h
.eh_frame_hdr:0000000000015C60 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000015C61                 db  1Bh
.eh_frame_hdr:0000000000015C62                 db    3
.eh_frame_hdr:0000000000015C63                 db  3Bh ; ;
.eh_frame_hdr:0000000000015C64                 db  6Ch ; l
.eh_frame_hdr:0000000000015C65                 db    7
.eh_frame_hdr:0000000000015C66                 db    0
.eh_frame_hdr:0000000000015C67                 db    0
.eh_frame_hdr:0000000000015C68                 db 0ECh
.eh_frame_hdr:0000000000015C69                 db    0
.eh_frame_hdr:0000000000015C6A                 db    0
.eh_frame_hdr:0000000000015C6B                 db    0
.eh_frame_hdr:0000000000015C6C                 db 0D0h
.eh_frame_hdr:0000000000015C6D                 db 0CAh
.eh_frame_hdr:0000000000015C6E                 db 0FEh
.eh_frame_hdr:0000000000015C6F                 db 0FFh
.eh_frame_hdr:0000000000015C70                 db 0B8h
.eh_frame_hdr:0000000000015C71                 db    7
.eh_frame_hdr:0000000000015C72                 db    0
.eh_frame_hdr:0000000000015C73                 db    0
.eh_frame_hdr:0000000000015C74                 db 0B0h
.eh_frame_hdr:0000000000015C75                 db 0D1h
.eh_frame_hdr:0000000000015C76                 db 0FEh
.eh_frame_hdr:0000000000015C77                 db 0FFh
.eh_frame_hdr:0000000000015C78                 db 0E0h
.eh_frame_hdr:0000000000015C79                 db    7
.eh_frame_hdr:0000000000015C7A                 db    0
.eh_frame_hdr:0000000000015C7B                 db    0
.eh_frame_hdr:0000000000015C7C                 db 0C0h
.eh_frame_hdr:0000000000015C7D                 db 0D1h
.eh_frame_hdr:0000000000015C7E                 db 0FEh
.eh_frame_hdr:0000000000015C7F                 db 0FFh
.eh_frame_hdr:0000000000015C80                 db  18h
.eh_frame_hdr:0000000000015C81                 db  0Ah
.eh_frame_hdr:0000000000015C82                 db    0
.eh_frame_hdr:0000000000015C83                 db    0
.eh_frame_hdr:0000000000015C84                 db 0D6h
.eh_frame_hdr:0000000000015C85                 db 0D1h
.eh_frame_hdr:0000000000015C86                 db 0FEh
.eh_frame_hdr:0000000000015C87                 db 0FFh
.eh_frame_hdr:0000000000015C88                 db  2Ch ; ,
.eh_frame_hdr:0000000000015C89                 db  0Ah
.eh_frame_hdr:0000000000015C8A                 db    0
.eh_frame_hdr:0000000000015C8B                 db    0
.eh_frame_hdr:0000000000015C8C                 db  10h
.eh_frame_hdr:0000000000015C8D                 db 0D2h
.eh_frame_hdr:0000000000015C8E                 db 0FEh
.eh_frame_hdr:0000000000015C8F                 db 0FFh
.eh_frame_hdr:0000000000015C90                 db  3Ch ; <
.eh_frame_hdr:0000000000015C91                 db    9
.eh_frame_hdr:0000000000015C92                 db    0
.eh_frame_hdr:0000000000015C93                 db    0
.eh_frame_hdr:0000000000015C94                 db  70h ; p
.eh_frame_hdr:0000000000015C95                 db 0DAh
.eh_frame_hdr:0000000000015C96                 db 0FEh
.eh_frame_hdr:0000000000015C97                 db 0FFh
.eh_frame_hdr:0000000000015C98                 db  88h
.eh_frame_hdr:0000000000015C99                 db    7
.eh_frame_hdr:0000000000015C9A                 db    0
.eh_frame_hdr:0000000000015C9B                 db    0
.eh_frame_hdr:0000000000015C9C                 db  80h
.eh_frame_hdr:0000000000015C9D                 db 0DBh
.eh_frame_hdr:0000000000015C9E                 db 0FEh
.eh_frame_hdr:0000000000015C9F                 db 0FFh
.eh_frame_hdr:0000000000015CA0                 db 0F8h
.eh_frame_hdr:0000000000015CA1                 db    7
.eh_frame_hdr:0000000000015CA2                 db    0
.eh_frame_hdr:0000000000015CA3                 db    0
.eh_frame_hdr:0000000000015CA4                 db 0D0h
.eh_frame_hdr:0000000000015CA5                 db 0DCh
.eh_frame_hdr:0000000000015CA6                 db 0FEh
.eh_frame_hdr:0000000000015CA7                 db 0FFh
.eh_frame_hdr:0000000000015CA8                 db  44h ; D
.eh_frame_hdr:0000000000015CA9                 db    8
.eh_frame_hdr:0000000000015CAA                 db    0
.eh_frame_hdr:0000000000015CAB                 db    0
.eh_frame_hdr:0000000000015CAC                 db 0A0h
.eh_frame_hdr:0000000000015CAD                 db 0DDh
.eh_frame_hdr:0000000000015CAE                 db 0FEh
.eh_frame_hdr:0000000000015CAF                 db 0FFh
.eh_frame_hdr:0000000000015CB0                 db  80h
.eh_frame_hdr:0000000000015CB1                 db    8
.eh_frame_hdr:0000000000015CB2                 db    0
.eh_frame_hdr:0000000000015CB3                 db    0
.eh_frame_hdr:0000000000015CB4                 db  60h ; `
.eh_frame_hdr:0000000000015CB5                 db 0E3h
.eh_frame_hdr:0000000000015CB6                 db 0FEh
.eh_frame_hdr:0000000000015CB7                 db 0FFh
.eh_frame_hdr:0000000000015CB8                 db 0B0h
.eh_frame_hdr:0000000000015CB9                 db    8
.eh_frame_hdr:0000000000015CBA                 db    0
.eh_frame_hdr:0000000000015CBB                 db    0
.eh_frame_hdr:0000000000015CBC                 db 0C0h
.eh_frame_hdr:0000000000015CBD                 db 0E5h
.eh_frame_hdr:0000000000015CBE                 db 0FEh
.eh_frame_hdr:0000000000015CBF                 db 0FFh
.eh_frame_hdr:0000000000015CC0                 db 0E0h
.eh_frame_hdr:0000000000015CC1                 db    8
.eh_frame_hdr:0000000000015CC2                 db    0
.eh_frame_hdr:0000000000015CC3                 db    0
.eh_frame_hdr:0000000000015CC4                 db  80h
.eh_frame_hdr:0000000000015CC5                 db 0EBh
.eh_frame_hdr:0000000000015CC6                 db 0FEh
.eh_frame_hdr:0000000000015CC7                 db 0FFh
.eh_frame_hdr:0000000000015CC8                 db  0Ch
.eh_frame_hdr:0000000000015CC9                 db    9
.eh_frame_hdr:0000000000015CCA                 db    0
.eh_frame_hdr:0000000000015CCB                 db    0
.eh_frame_hdr:0000000000015CCC                 db  90h
.eh_frame_hdr:0000000000015CCD                 db 0F0h
.eh_frame_hdr:0000000000015CCE                 db 0FEh
.eh_frame_hdr:0000000000015CCF                 db 0FFh
.eh_frame_hdr:0000000000015CD0                 db  98h
.eh_frame_hdr:0000000000015CD1                 db    9
.eh_frame_hdr:0000000000015CD2                 db    0
.eh_frame_hdr:0000000000015CD3                 db    0
.eh_frame_hdr:0000000000015CD4                 db 0E0h
.eh_frame_hdr:0000000000015CD5                 db 0F0h
.eh_frame_hdr:0000000000015CD6                 db 0FEh
.eh_frame_hdr:0000000000015CD7                 db 0FFh
.eh_frame_hdr:0000000000015CD8                 db 0BCh
.eh_frame_hdr:0000000000015CD9                 db    9
.eh_frame_hdr:0000000000015CDA                 db    0
.eh_frame_hdr:0000000000015CDB                 db    0
.eh_frame_hdr:0000000000015CDC                 db  90h
.eh_frame_hdr:0000000000015CDD                 db 0F1h
.eh_frame_hdr:0000000000015CDE                 db 0FEh
.eh_frame_hdr:0000000000015CDF                 db 0FFh
.eh_frame_hdr:0000000000015CE0                 db 0F8h
.eh_frame_hdr:0000000000015CE1                 db    9
.eh_frame_hdr:0000000000015CE2                 db    0
.eh_frame_hdr:0000000000015CE3                 db    0
.eh_frame_hdr:0000000000015CE4                 db 0D0h
.eh_frame_hdr:0000000000015CE5                 db 0F1h
.eh_frame_hdr:0000000000015CE6                 db 0FEh
.eh_frame_hdr:0000000000015CE7                 db 0FFh
.eh_frame_hdr:0000000000015CE8                 db  44h ; D
.eh_frame_hdr:0000000000015CE9                 db  0Ah
.eh_frame_hdr:0000000000015CEA                 db    0
.eh_frame_hdr:0000000000015CEB                 db    0
.eh_frame_hdr:0000000000015CEC                 db  90h
.eh_frame_hdr:0000000000015CED                 db 0F2h
.eh_frame_hdr:0000000000015CEE                 db 0FEh
.eh_frame_hdr:0000000000015CEF                 db 0FFh
.eh_frame_hdr:0000000000015CF0                 db  7Ch ; |
.eh_frame_hdr:0000000000015CF1                 db  0Ah
.eh_frame_hdr:0000000000015CF2                 db    0
.eh_frame_hdr:0000000000015CF3                 db    0
.eh_frame_hdr:0000000000015CF4                 db 0A0h
.eh_frame_hdr:0000000000015CF5                 db 0F3h
.eh_frame_hdr:0000000000015CF6                 db 0FEh
.eh_frame_hdr:0000000000015CF7                 db 0FFh
.eh_frame_hdr:0000000000015CF8                 db 0E4h
.eh_frame_hdr:0000000000015CF9                 db  0Ah
.eh_frame_hdr:0000000000015CFA                 db    0
.eh_frame_hdr:0000000000015CFB                 db    0
.eh_frame_hdr:0000000000015CFC                 db 0F0h
.eh_frame_hdr:0000000000015CFD                 db 0F4h
.eh_frame_hdr:0000000000015CFE                 db 0FEh
.eh_frame_hdr:0000000000015CFF                 db 0FFh
.eh_frame_hdr:0000000000015D00                 db  34h ; 4
.eh_frame_hdr:0000000000015D01                 db  0Bh
.eh_frame_hdr:0000000000015D02                 db    0
.eh_frame_hdr:0000000000015D03                 db    0
.eh_frame_hdr:0000000000015D04                 db 0B0h
.eh_frame_hdr:0000000000015D05                 db 0F5h
.eh_frame_hdr:0000000000015D06                 db 0FEh
.eh_frame_hdr:0000000000015D07                 db 0FFh
.eh_frame_hdr:0000000000015D08                 db  84h
.eh_frame_hdr:0000000000015D09                 db  0Bh
.eh_frame_hdr:0000000000015D0A                 db    0
.eh_frame_hdr:0000000000015D0B                 db    0
.eh_frame_hdr:0000000000015D0C                 db 0C0h
.eh_frame_hdr:0000000000015D0D                 db 0F9h
.eh_frame_hdr:0000000000015D0E                 db 0FEh
.eh_frame_hdr:0000000000015D0F                 db 0FFh
.eh_frame_hdr:0000000000015D10                 db 0ECh
.eh_frame_hdr:0000000000015D11                 db  0Bh
.eh_frame_hdr:0000000000015D12                 db    0
.eh_frame_hdr:0000000000015D13                 db    0
.eh_frame_hdr:0000000000015D14                 db  90h
.eh_frame_hdr:0000000000015D15                 db 0FAh
.eh_frame_hdr:0000000000015D16                 db 0FEh
.eh_frame_hdr:0000000000015D17                 db 0FFh
.eh_frame_hdr:0000000000015D18                 db  48h ; H
.eh_frame_hdr:0000000000015D19                 db  0Ch
.eh_frame_hdr:0000000000015D1A                 db    0
.eh_frame_hdr:0000000000015D1B                 db    0
.eh_frame_hdr:0000000000015D1C                 db  10h
.eh_frame_hdr:0000000000015D1D                 db 0FBh
.eh_frame_hdr:0000000000015D1E                 db 0FEh
.eh_frame_hdr:0000000000015D1F                 db 0FFh
.eh_frame_hdr:0000000000015D20                 db  80h
.eh_frame_hdr:0000000000015D21                 db  0Ch
.eh_frame_hdr:0000000000015D22                 db    0
.eh_frame_hdr:0000000000015D23                 db    0
.eh_frame_hdr:0000000000015D24                 db  40h ; @
.eh_frame_hdr:0000000000015D25                 db 0FBh
.eh_frame_hdr:0000000000015D26                 db 0FEh
.eh_frame_hdr:0000000000015D27                 db 0FFh
.eh_frame_hdr:0000000000015D28                 db  9Ch
.eh_frame_hdr:0000000000015D29                 db  0Ch
.eh_frame_hdr:0000000000015D2A                 db    0
.eh_frame_hdr:0000000000015D2B                 db    0
.eh_frame_hdr:0000000000015D2C                 db  70h ; p
.eh_frame_hdr:0000000000015D2D                 db 0FBh
.eh_frame_hdr:0000000000015D2E                 db 0FEh
.eh_frame_hdr:0000000000015D2F                 db 0FFh
.eh_frame_hdr:0000000000015D30                 db 0B8h
.eh_frame_hdr:0000000000015D31                 db  0Ch
.eh_frame_hdr:0000000000015D32                 db    0
.eh_frame_hdr:0000000000015D33                 db    0
.eh_frame_hdr:0000000000015D34                 db 0B0h
.eh_frame_hdr:0000000000015D35                 db 0FBh
.eh_frame_hdr:0000000000015D36                 db 0FEh
.eh_frame_hdr:0000000000015D37                 db 0FFh
.eh_frame_hdr:0000000000015D38                 db 0D4h
.eh_frame_hdr:0000000000015D39                 db  0Ch
.eh_frame_hdr:0000000000015D3A                 db    0
.eh_frame_hdr:0000000000015D3B                 db    0
.eh_frame_hdr:0000000000015D3C                 db 0E0h
.eh_frame_hdr:0000000000015D3D                 db 0FBh
.eh_frame_hdr:0000000000015D3E                 db 0FEh
.eh_frame_hdr:0000000000015D3F                 db 0FFh
.eh_frame_hdr:0000000000015D40                 db 0F0h
.eh_frame_hdr:0000000000015D41                 db  0Ch
.eh_frame_hdr:0000000000015D42                 db    0
.eh_frame_hdr:0000000000015D43                 db    0
.eh_frame_hdr:0000000000015D44                 db 0F0h
.eh_frame_hdr:0000000000015D45                 db 0FDh
.eh_frame_hdr:0000000000015D46                 db 0FEh
.eh_frame_hdr:0000000000015D47                 db 0FFh
.eh_frame_hdr:0000000000015D48                 db  70h ; p
.eh_frame_hdr:0000000000015D49                 db  0Dh
.eh_frame_hdr:0000000000015D4A                 db    0
.eh_frame_hdr:0000000000015D4B                 db    0
.eh_frame_hdr:0000000000015D4C                 db  20h
.eh_frame_hdr:0000000000015D4D                 db 0FEh
.eh_frame_hdr:0000000000015D4E                 db 0FEh
.eh_frame_hdr:0000000000015D4F                 db 0FFh
.eh_frame_hdr:0000000000015D50                 db  90h
.eh_frame_hdr:0000000000015D51                 db  0Dh
.eh_frame_hdr:0000000000015D52                 db    0
.eh_frame_hdr:0000000000015D53                 db    0
.eh_frame_hdr:0000000000015D54                 db  30h ; 0
.eh_frame_hdr:0000000000015D55                 db  3Fh ; ?
.eh_frame_hdr:0000000000015D56                 db 0FFh
.eh_frame_hdr:0000000000015D57                 db 0FFh
.eh_frame_hdr:0000000000015D58                 db 0C0h
.eh_frame_hdr:0000000000015D59                 db  0Dh
.eh_frame_hdr:0000000000015D5A                 db    0
.eh_frame_hdr:0000000000015D5B                 db    0
.eh_frame_hdr:0000000000015D5C                 db 0A0h
.eh_frame_hdr:0000000000015D5D                 db  40h ; @
.eh_frame_hdr:0000000000015D5E                 db 0FFh
.eh_frame_hdr:0000000000015D5F                 db 0FFh
.eh_frame_hdr:0000000000015D60                 db 0F0h
.eh_frame_hdr:0000000000015D61                 db  0Dh
.eh_frame_hdr:0000000000015D62                 db    0
.eh_frame_hdr:0000000000015D63                 db    0
.eh_frame_hdr:0000000000015D64                 db 0B0h
.eh_frame_hdr:0000000000015D65                 db  40h ; @
.eh_frame_hdr:0000000000015D66                 db 0FFh
.eh_frame_hdr:0000000000015D67                 db 0FFh
.eh_frame_hdr:0000000000015D68                 db    4
.eh_frame_hdr:0000000000015D69                 db  0Eh
.eh_frame_hdr:0000000000015D6A                 db    0
.eh_frame_hdr:0000000000015D6B                 db    0
.eh_frame_hdr:0000000000015D6C                 db 0D0h
.eh_frame_hdr:0000000000015D6D                 db  40h ; @
.eh_frame_hdr:0000000000015D6E                 db 0FFh
.eh_frame_hdr:0000000000015D6F                 db 0FFh
.eh_frame_hdr:0000000000015D70                 db  18h
.eh_frame_hdr:0000000000015D71                 db  0Eh
.eh_frame_hdr:0000000000015D72                 db    0
.eh_frame_hdr:0000000000015D73                 db    0
.eh_frame_hdr:0000000000015D74                 db 0F0h
.eh_frame_hdr:0000000000015D75                 db  40h ; @
.eh_frame_hdr:0000000000015D76                 db 0FFh
.eh_frame_hdr:0000000000015D77                 db 0FFh
.eh_frame_hdr:0000000000015D78                 db  34h ; 4
.eh_frame_hdr:0000000000015D79                 db  0Eh
.eh_frame_hdr:0000000000015D7A                 db    0
.eh_frame_hdr:0000000000015D7B                 db    0
.eh_frame_hdr:0000000000015D7C                 db  60h ; `
.eh_frame_hdr:0000000000015D7D                 db  41h ; A
.eh_frame_hdr:0000000000015D7E                 db 0FFh
.eh_frame_hdr:0000000000015D7F                 db 0FFh
.eh_frame_hdr:0000000000015D80                 db  58h ; X
.eh_frame_hdr:0000000000015D81                 db  0Eh
.eh_frame_hdr:0000000000015D82                 db    0
.eh_frame_hdr:0000000000015D83                 db    0
.eh_frame_hdr:0000000000015D84                 db 0C0h
.eh_frame_hdr:0000000000015D85                 db  41h ; A
.eh_frame_hdr:0000000000015D86                 db 0FFh
.eh_frame_hdr:0000000000015D87                 db 0FFh
.eh_frame_hdr:0000000000015D88                 db  74h ; t
.eh_frame_hdr:0000000000015D89                 db  0Eh
.eh_frame_hdr:0000000000015D8A                 db    0
.eh_frame_hdr:0000000000015D8B                 db    0
.eh_frame_hdr:0000000000015D8C                 db  40h ; @
.eh_frame_hdr:0000000000015D8D                 db  42h ; B
.eh_frame_hdr:0000000000015D8E                 db 0FFh
.eh_frame_hdr:0000000000015D8F                 db 0FFh
.eh_frame_hdr:0000000000015D90                 db 0B0h
.eh_frame_hdr:0000000000015D91                 db  0Eh
.eh_frame_hdr:0000000000015D92                 db    0
.eh_frame_hdr:0000000000015D93                 db    0
.eh_frame_hdr:0000000000015D94                 db  80h
.eh_frame_hdr:0000000000015D95                 db  42h ; B
.eh_frame_hdr:0000000000015D96                 db 0FFh
.eh_frame_hdr:0000000000015D97                 db 0FFh
.eh_frame_hdr:0000000000015D98                 db 0CCh
.eh_frame_hdr:0000000000015D99                 db  0Eh
.eh_frame_hdr:0000000000015D9A                 db    0
.eh_frame_hdr:0000000000015D9B                 db    0
.eh_frame_hdr:0000000000015D9C                 db  90h
.eh_frame_hdr:0000000000015D9D                 db  42h ; B
.eh_frame_hdr:0000000000015D9E                 db 0FFh
.eh_frame_hdr:0000000000015D9F                 db 0FFh
.eh_frame_hdr:0000000000015DA0                 db 0E0h
.eh_frame_hdr:0000000000015DA1                 db  0Eh
.eh_frame_hdr:0000000000015DA2                 db    0
.eh_frame_hdr:0000000000015DA3                 db    0
.eh_frame_hdr:0000000000015DA4                 db 0C0h
.eh_frame_hdr:0000000000015DA5                 db  42h ; B
.eh_frame_hdr:0000000000015DA6                 db 0FFh
.eh_frame_hdr:0000000000015DA7                 db 0FFh
.eh_frame_hdr:0000000000015DA8                 db 0F4h
.eh_frame_hdr:0000000000015DA9                 db  0Eh
.eh_frame_hdr:0000000000015DAA                 db    0
.eh_frame_hdr:0000000000015DAB                 db    0
.eh_frame_hdr:0000000000015DAC                 db 0D0h
.eh_frame_hdr:0000000000015DAD                 db  45h ; E
.eh_frame_hdr:0000000000015DAE                 db 0FFh
.eh_frame_hdr:0000000000015DAF                 db 0FFh
.eh_frame_hdr:0000000000015DB0                 db  48h ; H
.eh_frame_hdr:0000000000015DB1                 db  0Fh
.eh_frame_hdr:0000000000015DB2                 db    0
.eh_frame_hdr:0000000000015DB3                 db    0
.eh_frame_hdr:0000000000015DB4                 db 0F0h
.eh_frame_hdr:0000000000015DB5                 db  45h ; E
.eh_frame_hdr:0000000000015DB6                 db 0FFh
.eh_frame_hdr:0000000000015DB7                 db 0FFh
.eh_frame_hdr:0000000000015DB8                 db  5Ch ; \
.eh_frame_hdr:0000000000015DB9                 db  0Fh
.eh_frame_hdr:0000000000015DBA                 db    0
.eh_frame_hdr:0000000000015DBB                 db    0
.eh_frame_hdr:0000000000015DBC                 db  50h ; P
.eh_frame_hdr:0000000000015DBD                 db  46h ; F
.eh_frame_hdr:0000000000015DBE                 db 0FFh
.eh_frame_hdr:0000000000015DBF                 db 0FFh
.eh_frame_hdr:0000000000015DC0                 db  88h
.eh_frame_hdr:0000000000015DC1                 db  0Fh
.eh_frame_hdr:0000000000015DC2                 db    0
.eh_frame_hdr:0000000000015DC3                 db    0
.eh_frame_hdr:0000000000015DC4                 db  70h ; p
.eh_frame_hdr:0000000000015DC5                 db  46h ; F
.eh_frame_hdr:0000000000015DC6                 db 0FFh
.eh_frame_hdr:0000000000015DC7                 db 0FFh
.eh_frame_hdr:0000000000015DC8                 db  9Ch
.eh_frame_hdr:0000000000015DC9                 db  0Fh
.eh_frame_hdr:0000000000015DCA                 db    0
.eh_frame_hdr:0000000000015DCB                 db    0
.eh_frame_hdr:0000000000015DCC                 db 0E0h
.eh_frame_hdr:0000000000015DCD                 db  47h ; G
.eh_frame_hdr:0000000000015DCE                 db 0FFh
.eh_frame_hdr:0000000000015DCF                 db 0FFh
.eh_frame_hdr:0000000000015DD0                 db 0E8h
.eh_frame_hdr:0000000000015DD1                 db  0Fh
.eh_frame_hdr:0000000000015DD2                 db    0
.eh_frame_hdr:0000000000015DD3                 db    0
.eh_frame_hdr:0000000000015DD4                 db  40h ; @
.eh_frame_hdr:0000000000015DD5                 db  49h ; I
.eh_frame_hdr:0000000000015DD6                 db 0FFh
.eh_frame_hdr:0000000000015DD7                 db 0FFh
.eh_frame_hdr:0000000000015DD8                 db  30h ; 0
.eh_frame_hdr:0000000000015DD9                 db  10h
.eh_frame_hdr:0000000000015DDA                 db    0
.eh_frame_hdr:0000000000015DDB                 db    0
.eh_frame_hdr:0000000000015DDC                 db 0D0h
.eh_frame_hdr:0000000000015DDD                 db  49h ; I
.eh_frame_hdr:0000000000015DDE                 db 0FFh
.eh_frame_hdr:0000000000015DDF                 db 0FFh
.eh_frame_hdr:0000000000015DE0                 db  68h ; h
.eh_frame_hdr:0000000000015DE1                 db  10h
.eh_frame_hdr:0000000000015DE2                 db    0
.eh_frame_hdr:0000000000015DE3                 db    0
.eh_frame_hdr:0000000000015DE4                 db  20h
.eh_frame_hdr:0000000000015DE5                 db  4Ah ; J
.eh_frame_hdr:0000000000015DE6                 db 0FFh
.eh_frame_hdr:0000000000015DE7                 db 0FFh
.eh_frame_hdr:0000000000015DE8                 db  98h
.eh_frame_hdr:0000000000015DE9                 db  10h
.eh_frame_hdr:0000000000015DEA                 db    0
.eh_frame_hdr:0000000000015DEB                 db    0
.eh_frame_hdr:0000000000015DEC                 db  10h
.eh_frame_hdr:0000000000015DED                 db  4Bh ; K
.eh_frame_hdr:0000000000015DEE                 db 0FFh
.eh_frame_hdr:0000000000015DEF                 db 0FFh
.eh_frame_hdr:0000000000015DF0                 db 0E8h
.eh_frame_hdr:0000000000015DF1                 db  10h
.eh_frame_hdr:0000000000015DF2                 db    0
.eh_frame_hdr:0000000000015DF3                 db    0
.eh_frame_hdr:0000000000015DF4                 db  20h
.eh_frame_hdr:0000000000015DF5                 db  4Bh ; K
.eh_frame_hdr:0000000000015DF6                 db 0FFh
.eh_frame_hdr:0000000000015DF7                 db 0FFh
.eh_frame_hdr:0000000000015DF8                 db 0FCh
.eh_frame_hdr:0000000000015DF9                 db  10h
.eh_frame_hdr:0000000000015DFA                 db    0
.eh_frame_hdr:0000000000015DFB                 db    0
.eh_frame_hdr:0000000000015DFC                 db  40h ; @
.eh_frame_hdr:0000000000015DFD                 db  4Ch ; L
.eh_frame_hdr:0000000000015DFE                 db 0FFh
.eh_frame_hdr:0000000000015DFF                 db 0FFh
.eh_frame_hdr:0000000000015E00                 db  48h ; H
.eh_frame_hdr:0000000000015E01                 db  11h
.eh_frame_hdr:0000000000015E02                 db    0
.eh_frame_hdr:0000000000015E03                 db    0
.eh_frame_hdr:0000000000015E04                 db 0C0h
.eh_frame_hdr:0000000000015E05                 db  4Ch ; L
.eh_frame_hdr:0000000000015E06                 db 0FFh
.eh_frame_hdr:0000000000015E07                 db 0FFh
.eh_frame_hdr:0000000000015E08                 db  74h ; t
.eh_frame_hdr:0000000000015E09                 db  11h
.eh_frame_hdr:0000000000015E0A                 db    0
.eh_frame_hdr:0000000000015E0B                 db    0
.eh_frame_hdr:0000000000015E0C                 db 0E0h
.eh_frame_hdr:0000000000015E0D                 db  4Dh ; M
.eh_frame_hdr:0000000000015E0E                 db 0FFh
.eh_frame_hdr:0000000000015E0F                 db 0FFh
.eh_frame_hdr:0000000000015E10                 db 0D4h
.eh_frame_hdr:0000000000015E11                 db  11h
.eh_frame_hdr:0000000000015E12                 db    0
.eh_frame_hdr:0000000000015E13                 db    0
.eh_frame_hdr:0000000000015E14                 db  50h ; P
.eh_frame_hdr:0000000000015E15                 db  4Eh ; N
.eh_frame_hdr:0000000000015E16                 db 0FFh
.eh_frame_hdr:0000000000015E17                 db 0FFh
.eh_frame_hdr:0000000000015E18                 db  20h
.eh_frame_hdr:0000000000015E19                 db  12h
.eh_frame_hdr:0000000000015E1A                 db    0
.eh_frame_hdr:0000000000015E1B                 db    0
.eh_frame_hdr:0000000000015E1C                 db 0A0h
.eh_frame_hdr:0000000000015E1D                 db  4Eh ; N
.eh_frame_hdr:0000000000015E1E                 db 0FFh
.eh_frame_hdr:0000000000015E1F                 db 0FFh
.eh_frame_hdr:0000000000015E20                 db  60h ; `
.eh_frame_hdr:0000000000015E21                 db  12h
.eh_frame_hdr:0000000000015E22                 db    0
.eh_frame_hdr:0000000000015E23                 db    0
.eh_frame_hdr:0000000000015E24                 db 0F0h
.eh_frame_hdr:0000000000015E25                 db  4Eh ; N
.eh_frame_hdr:0000000000015E26                 db 0FFh
.eh_frame_hdr:0000000000015E27                 db 0FFh
.eh_frame_hdr:0000000000015E28                 db  7Ch ; |
.eh_frame_hdr:0000000000015E29                 db  12h
.eh_frame_hdr:0000000000015E2A                 db    0
.eh_frame_hdr:0000000000015E2B                 db    0
.eh_frame_hdr:0000000000015E2C                 db  10h
.eh_frame_hdr:0000000000015E2D                 db  55h ; U
.eh_frame_hdr:0000000000015E2E                 db 0FFh
.eh_frame_hdr:0000000000015E2F                 db 0FFh
.eh_frame_hdr:0000000000015E30                 db 0D0h
.eh_frame_hdr:0000000000015E31                 db  12h
.eh_frame_hdr:0000000000015E32                 db    0
.eh_frame_hdr:0000000000015E33                 db    0
.eh_frame_hdr:0000000000015E34                 db  20h
.eh_frame_hdr:0000000000015E35                 db  55h ; U
.eh_frame_hdr:0000000000015E36                 db 0FFh
.eh_frame_hdr:0000000000015E37                 db 0FFh
.eh_frame_hdr:0000000000015E38                 db 0E8h
.eh_frame_hdr:0000000000015E39                 db  12h
.eh_frame_hdr:0000000000015E3A                 db    0
.eh_frame_hdr:0000000000015E3B                 db    0
.eh_frame_hdr:0000000000015E3C                 db  60h ; `
.eh_frame_hdr:0000000000015E3D                 db  55h ; U
.eh_frame_hdr:0000000000015E3E                 db 0FFh
.eh_frame_hdr:0000000000015E3F                 db 0FFh
.eh_frame_hdr:0000000000015E40                 db    0
.eh_frame_hdr:0000000000015E41                 db  13h
.eh_frame_hdr:0000000000015E42                 db    0
.eh_frame_hdr:0000000000015E43                 db    0
.eh_frame_hdr:0000000000015E44                 db  80h
.eh_frame_hdr:0000000000015E45                 db  55h ; U
.eh_frame_hdr:0000000000015E46                 db 0FFh
.eh_frame_hdr:0000000000015E47                 db 0FFh
.eh_frame_hdr:0000000000015E48                 db  1Ch
.eh_frame_hdr:0000000000015E49                 db  13h
.eh_frame_hdr:0000000000015E4A                 db    0
.eh_frame_hdr:0000000000015E4B                 db    0
.eh_frame_hdr:0000000000015E4C                 db 0A0h
.eh_frame_hdr:0000000000015E4D                 db  55h ; U
.eh_frame_hdr:0000000000015E4E                 db 0FFh
.eh_frame_hdr:0000000000015E4F                 db 0FFh
.eh_frame_hdr:0000000000015E50                 db  30h ; 0
.eh_frame_hdr:0000000000015E51                 db  13h
.eh_frame_hdr:0000000000015E52                 db    0
.eh_frame_hdr:0000000000015E53                 db    0
.eh_frame_hdr:0000000000015E54                 db 0F0h
.eh_frame_hdr:0000000000015E55                 db  55h ; U
.eh_frame_hdr:0000000000015E56                 db 0FFh
.eh_frame_hdr:0000000000015E57                 db 0FFh
.eh_frame_hdr:0000000000015E58                 db  50h ; P
.eh_frame_hdr:0000000000015E59                 db  13h
.eh_frame_hdr:0000000000015E5A                 db    0
.eh_frame_hdr:0000000000015E5B                 db    0
.eh_frame_hdr:0000000000015E5C                 db  60h ; `
.eh_frame_hdr:0000000000015E5D                 db  56h ; V
.eh_frame_hdr:0000000000015E5E                 db 0FFh
.eh_frame_hdr:0000000000015E5F                 db 0FFh
.eh_frame_hdr:0000000000015E60                 db  68h ; h
.eh_frame_hdr:0000000000015E61                 db  13h
.eh_frame_hdr:0000000000015E62                 db    0
.eh_frame_hdr:0000000000015E63                 db    0
.eh_frame_hdr:0000000000015E64                 db  70h ; p
.eh_frame_hdr:0000000000015E65                 db  56h ; V
.eh_frame_hdr:0000000000015E66                 db 0FFh
.eh_frame_hdr:0000000000015E67                 db 0FFh
.eh_frame_hdr:0000000000015E68                 db  7Ch ; |
.eh_frame_hdr:0000000000015E69                 db  13h
.eh_frame_hdr:0000000000015E6A                 db    0
.eh_frame_hdr:0000000000015E6B                 db    0
.eh_frame_hdr:0000000000015E6C                 db  80h
.eh_frame_hdr:0000000000015E6D                 db  57h ; W
.eh_frame_hdr:0000000000015E6E                 db 0FFh
.eh_frame_hdr:0000000000015E6F                 db 0FFh
.eh_frame_hdr:0000000000015E70                 db 0B8h
.eh_frame_hdr:0000000000015E71                 db  13h
.eh_frame_hdr:0000000000015E72                 db    0
.eh_frame_hdr:0000000000015E73                 db    0
.eh_frame_hdr:0000000000015E74                 db  90h
.eh_frame_hdr:0000000000015E75                 db  57h ; W
.eh_frame_hdr:0000000000015E76                 db 0FFh
.eh_frame_hdr:0000000000015E77                 db 0FFh
.eh_frame_hdr:0000000000015E78                 db 0CCh
.eh_frame_hdr:0000000000015E79                 db  13h
.eh_frame_hdr:0000000000015E7A                 db    0
.eh_frame_hdr:0000000000015E7B                 db    0
.eh_frame_hdr:0000000000015E7C                 db 0A0h
.eh_frame_hdr:0000000000015E7D                 db  57h ; W
.eh_frame_hdr:0000000000015E7E                 db 0FFh
.eh_frame_hdr:0000000000015E7F                 db 0FFh
.eh_frame_hdr:0000000000015E80                 db 0E0h
.eh_frame_hdr:0000000000015E81                 db  13h
.eh_frame_hdr:0000000000015E82                 db    0
.eh_frame_hdr:0000000000015E83                 db    0
.eh_frame_hdr:0000000000015E84                 db  50h ; P
.eh_frame_hdr:0000000000015E85                 db  58h ; X
.eh_frame_hdr:0000000000015E86                 db 0FFh
.eh_frame_hdr:0000000000015E87                 db 0FFh
.eh_frame_hdr:0000000000015E88                 db  10h
.eh_frame_hdr:0000000000015E89                 db  14h
.eh_frame_hdr:0000000000015E8A                 db    0
.eh_frame_hdr:0000000000015E8B                 db    0
.eh_frame_hdr:0000000000015E8C                 db  70h ; p
.eh_frame_hdr:0000000000015E8D                 db  58h ; X
.eh_frame_hdr:0000000000015E8E                 db 0FFh
.eh_frame_hdr:0000000000015E8F                 db 0FFh
.eh_frame_hdr:0000000000015E90                 db  30h ; 0
.eh_frame_hdr:0000000000015E91                 db  14h
.eh_frame_hdr:0000000000015E92                 db    0
.eh_frame_hdr:0000000000015E93                 db    0
.eh_frame_hdr:0000000000015E94                 db 0D0h
.eh_frame_hdr:0000000000015E95                 db  58h ; X
.eh_frame_hdr:0000000000015E96                 db 0FFh
.eh_frame_hdr:0000000000015E97                 db 0FFh
.eh_frame_hdr:0000000000015E98                 db  64h ; d
.eh_frame_hdr:0000000000015E99                 db  14h
.eh_frame_hdr:0000000000015E9A                 db    0
.eh_frame_hdr:0000000000015E9B                 db    0
.eh_frame_hdr:0000000000015E9C                 db  30h ; 0
.eh_frame_hdr:0000000000015E9D                 db  59h ; Y
.eh_frame_hdr:0000000000015E9E                 db 0FFh
.eh_frame_hdr:0000000000015E9F                 db 0FFh
.eh_frame_hdr:0000000000015EA0                 db  90h
.eh_frame_hdr:0000000000015EA1                 db  14h
.eh_frame_hdr:0000000000015EA2                 db    0
.eh_frame_hdr:0000000000015EA3                 db    0
.eh_frame_hdr:0000000000015EA4                 db  90h
.eh_frame_hdr:0000000000015EA5                 db  59h ; Y
.eh_frame_hdr:0000000000015EA6                 db 0FFh
.eh_frame_hdr:0000000000015EA7                 db 0FFh
.eh_frame_hdr:0000000000015EA8                 db 0A4h
.eh_frame_hdr:0000000000015EA9                 db  14h
.eh_frame_hdr:0000000000015EAA                 db    0
.eh_frame_hdr:0000000000015EAB                 db    0
.eh_frame_hdr:0000000000015EAC                 db 0E0h
.eh_frame_hdr:0000000000015EAD                 db  59h ; Y
.eh_frame_hdr:0000000000015EAE                 db 0FFh
.eh_frame_hdr:0000000000015EAF                 db 0FFh
.eh_frame_hdr:0000000000015EB0                 db 0D0h
.eh_frame_hdr:0000000000015EB1                 db  14h
.eh_frame_hdr:0000000000015EB2                 db    0
.eh_frame_hdr:0000000000015EB3                 db    0
.eh_frame_hdr:0000000000015EB4                 db  20h
.eh_frame_hdr:0000000000015EB5                 db  5Ah ; Z
.eh_frame_hdr:0000000000015EB6                 db 0FFh
.eh_frame_hdr:0000000000015EB7                 db 0FFh
.eh_frame_hdr:0000000000015EB8                 db 0F8h
.eh_frame_hdr:0000000000015EB9                 db  14h
.eh_frame_hdr:0000000000015EBA                 db    0
.eh_frame_hdr:0000000000015EBB                 db    0
.eh_frame_hdr:0000000000015EBC                 db  30h ; 0
.eh_frame_hdr:0000000000015EBD                 db  5Ah ; Z
.eh_frame_hdr:0000000000015EBE                 db 0FFh
.eh_frame_hdr:0000000000015EBF                 db 0FFh
.eh_frame_hdr:0000000000015EC0                 db  0Ch
.eh_frame_hdr:0000000000015EC1                 db  15h
.eh_frame_hdr:0000000000015EC2                 db    0
.eh_frame_hdr:0000000000015EC3                 db    0
.eh_frame_hdr:0000000000015EC4                 db  60h ; `
.eh_frame_hdr:0000000000015EC5                 db  5Ah ; Z
.eh_frame_hdr:0000000000015EC6                 db 0FFh
.eh_frame_hdr:0000000000015EC7                 db 0FFh
.eh_frame_hdr:0000000000015EC8                 db  28h ; (
.eh_frame_hdr:0000000000015EC9                 db  15h
.eh_frame_hdr:0000000000015ECA                 db    0
.eh_frame_hdr:0000000000015ECB                 db    0
.eh_frame_hdr:0000000000015ECC                 db 0D0h
.eh_frame_hdr:0000000000015ECD                 db  5Ah ; Z
.eh_frame_hdr:0000000000015ECE                 db 0FFh
.eh_frame_hdr:0000000000015ECF                 db 0FFh
.eh_frame_hdr:0000000000015ED0                 db  48h ; H
.eh_frame_hdr:0000000000015ED1                 db  15h
.eh_frame_hdr:0000000000015ED2                 db    0
.eh_frame_hdr:0000000000015ED3                 db    0
.eh_frame_hdr:0000000000015ED4                 db  60h ; `
.eh_frame_hdr:0000000000015ED5                 db  5Bh ; [
.eh_frame_hdr:0000000000015ED6                 db 0FFh
.eh_frame_hdr:0000000000015ED7                 db 0FFh
.eh_frame_hdr:0000000000015ED8                 db 0A8h
.eh_frame_hdr:0000000000015ED9                 db  15h
.eh_frame_hdr:0000000000015EDA                 db    0
.eh_frame_hdr:0000000000015EDB                 db    0
.eh_frame_hdr:0000000000015EDC                 db 0C0h
.eh_frame_hdr:0000000000015EDD                 db  5Bh ; [
.eh_frame_hdr:0000000000015EDE                 db 0FFh
.eh_frame_hdr:0000000000015EDF                 db 0FFh
.eh_frame_hdr:0000000000015EE0                 db 0C8h
.eh_frame_hdr:0000000000015EE1                 db  15h
.eh_frame_hdr:0000000000015EE2                 db    0
.eh_frame_hdr:0000000000015EE3                 db    0
.eh_frame_hdr:0000000000015EE4                 db  50h ; P
.eh_frame_hdr:0000000000015EE5                 db  5Dh ; ]
.eh_frame_hdr:0000000000015EE6                 db 0FFh
.eh_frame_hdr:0000000000015EE7                 db 0FFh
.eh_frame_hdr:0000000000015EE8                 db 0DCh
.eh_frame_hdr:0000000000015EE9                 db  15h
.eh_frame_hdr:0000000000015EEA                 db    0
.eh_frame_hdr:0000000000015EEB                 db    0
.eh_frame_hdr:0000000000015EEC                 db  60h ; `
.eh_frame_hdr:0000000000015EED                 db  5Dh ; ]
.eh_frame_hdr:0000000000015EEE                 db 0FFh
.eh_frame_hdr:0000000000015EEF                 db 0FFh
.eh_frame_hdr:0000000000015EF0                 db 0F0h
.eh_frame_hdr:0000000000015EF1                 db  15h
.eh_frame_hdr:0000000000015EF2                 db    0
.eh_frame_hdr:0000000000015EF3                 db    0
.eh_frame_hdr:0000000000015EF4                 db  80h
.eh_frame_hdr:0000000000015EF5                 db  5Dh ; ]
.eh_frame_hdr:0000000000015EF6                 db 0FFh
.eh_frame_hdr:0000000000015EF7                 db 0FFh
.eh_frame_hdr:0000000000015EF8                 db  10h
.eh_frame_hdr:0000000000015EF9                 db  16h
.eh_frame_hdr:0000000000015EFA                 db    0
.eh_frame_hdr:0000000000015EFB                 db    0
.eh_frame_hdr:0000000000015EFC                 db  80h
.eh_frame_hdr:0000000000015EFD                 db  5Eh ; ^
.eh_frame_hdr:0000000000015EFE                 db 0FFh
.eh_frame_hdr:0000000000015EFF                 db 0FFh
.eh_frame_hdr:0000000000015F00                 db  60h ; `
.eh_frame_hdr:0000000000015F01                 db  16h
.eh_frame_hdr:0000000000015F02                 db    0
.eh_frame_hdr:0000000000015F03                 db    0
.eh_frame_hdr:0000000000015F04                 db    0
.eh_frame_hdr:0000000000015F05                 db  5Fh ; _
.eh_frame_hdr:0000000000015F06                 db 0FFh
.eh_frame_hdr:0000000000015F07                 db 0FFh
.eh_frame_hdr:0000000000015F08                 db 0B0h
.eh_frame_hdr:0000000000015F09                 db  16h
.eh_frame_hdr:0000000000015F0A                 db    0
.eh_frame_hdr:0000000000015F0B                 db    0
.eh_frame_hdr:0000000000015F0C                 db 0A0h
.eh_frame_hdr:0000000000015F0D                 db  5Fh ; _
.eh_frame_hdr:0000000000015F0E                 db 0FFh
.eh_frame_hdr:0000000000015F0F                 db 0FFh
.eh_frame_hdr:0000000000015F10                 db 0C4h
.eh_frame_hdr:0000000000015F11                 db  16h
.eh_frame_hdr:0000000000015F12                 db    0
.eh_frame_hdr:0000000000015F13                 db    0
.eh_frame_hdr:0000000000015F14                 db 0B0h
.eh_frame_hdr:0000000000015F15                 db  5Fh ; _
.eh_frame_hdr:0000000000015F16                 db 0FFh
.eh_frame_hdr:0000000000015F17                 db 0FFh
.eh_frame_hdr:0000000000015F18                 db 0D8h
.eh_frame_hdr:0000000000015F19                 db  16h
.eh_frame_hdr:0000000000015F1A                 db    0
.eh_frame_hdr:0000000000015F1B                 db    0
.eh_frame_hdr:0000000000015F1C                 db 0C0h
.eh_frame_hdr:0000000000015F1D                 db  5Fh ; _
.eh_frame_hdr:0000000000015F1E                 db 0FFh
.eh_frame_hdr:0000000000015F1F                 db 0FFh
.eh_frame_hdr:0000000000015F20                 db 0ECh
.eh_frame_hdr:0000000000015F21                 db  16h
.eh_frame_hdr:0000000000015F22                 db    0
.eh_frame_hdr:0000000000015F23                 db    0
.eh_frame_hdr:0000000000015F24                 db 0F0h
.eh_frame_hdr:0000000000015F25                 db  5Fh ; _
.eh_frame_hdr:0000000000015F26                 db 0FFh
.eh_frame_hdr:0000000000015F27                 db 0FFh
.eh_frame_hdr:0000000000015F28                 db    8
.eh_frame_hdr:0000000000015F29                 db  17h
.eh_frame_hdr:0000000000015F2A                 db    0
.eh_frame_hdr:0000000000015F2B                 db    0
.eh_frame_hdr:0000000000015F2C                 db  10h
.eh_frame_hdr:0000000000015F2D                 db  61h ; a
.eh_frame_hdr:0000000000015F2E                 db 0FFh
.eh_frame_hdr:0000000000015F2F                 db 0FFh
.eh_frame_hdr:0000000000015F30                 db  68h ; h
.eh_frame_hdr:0000000000015F31                 db  17h
.eh_frame_hdr:0000000000015F32                 db    0
.eh_frame_hdr:0000000000015F33                 db    0
.eh_frame_hdr:0000000000015F34                 db  90h
.eh_frame_hdr:0000000000015F35                 db  61h ; a
.eh_frame_hdr:0000000000015F36                 db 0FFh
.eh_frame_hdr:0000000000015F37                 db 0FFh
.eh_frame_hdr:0000000000015F38                 db  7Ch ; |
.eh_frame_hdr:0000000000015F39                 db  17h
.eh_frame_hdr:0000000000015F3A                 db    0
.eh_frame_hdr:0000000000015F3B                 db    0
.eh_frame_hdr:0000000000015F3C                 db 0D0h
.eh_frame_hdr:0000000000015F3D                 db  62h ; b
.eh_frame_hdr:0000000000015F3E                 db 0FFh
.eh_frame_hdr:0000000000015F3F                 db 0FFh
.eh_frame_hdr:0000000000015F40                 db 0DCh
.eh_frame_hdr:0000000000015F41                 db  17h
.eh_frame_hdr:0000000000015F42                 db    0
.eh_frame_hdr:0000000000015F43                 db    0
.eh_frame_hdr:0000000000015F44                 db 0E0h
.eh_frame_hdr:0000000000015F45                 db  62h ; b
.eh_frame_hdr:0000000000015F46                 db 0FFh
.eh_frame_hdr:0000000000015F47                 db 0FFh
.eh_frame_hdr:0000000000015F48                 db 0F0h
.eh_frame_hdr:0000000000015F49                 db  17h
.eh_frame_hdr:0000000000015F4A                 db    0
.eh_frame_hdr:0000000000015F4B                 db    0
.eh_frame_hdr:0000000000015F4C                 db 0F0h
.eh_frame_hdr:0000000000015F4D                 db  62h ; b
.eh_frame_hdr:0000000000015F4E                 db 0FFh
.eh_frame_hdr:0000000000015F4F                 db 0FFh
.eh_frame_hdr:0000000000015F50                 db    4
.eh_frame_hdr:0000000000015F51                 db  18h
.eh_frame_hdr:0000000000015F52                 db    0
.eh_frame_hdr:0000000000015F53                 db    0
.eh_frame_hdr:0000000000015F54                 db    0
.eh_frame_hdr:0000000000015F55                 db  63h ; c
.eh_frame_hdr:0000000000015F56                 db 0FFh
.eh_frame_hdr:0000000000015F57                 db 0FFh
.eh_frame_hdr:0000000000015F58                 db  18h
.eh_frame_hdr:0000000000015F59                 db  18h
.eh_frame_hdr:0000000000015F5A                 db    0
.eh_frame_hdr:0000000000015F5B                 db    0
.eh_frame_hdr:0000000000015F5C                 db  50h ; P
.eh_frame_hdr:0000000000015F5D                 db  63h ; c
.eh_frame_hdr:0000000000015F5E                 db 0FFh
.eh_frame_hdr:0000000000015F5F                 db 0FFh
.eh_frame_hdr:0000000000015F60                 db  2Ch ; ,
.eh_frame_hdr:0000000000015F61                 db  18h
.eh_frame_hdr:0000000000015F62                 db    0
.eh_frame_hdr:0000000000015F63                 db    0
.eh_frame_hdr:0000000000015F64                 db 0B0h
.eh_frame_hdr:0000000000015F65                 db  63h ; c
.eh_frame_hdr:0000000000015F66                 db 0FFh
.eh_frame_hdr:0000000000015F67                 db 0FFh
.eh_frame_hdr:0000000000015F68                 db  40h ; @
.eh_frame_hdr:0000000000015F69                 db  18h
.eh_frame_hdr:0000000000015F6A                 db    0
.eh_frame_hdr:0000000000015F6B                 db    0
.eh_frame_hdr:0000000000015F6C                 db    0
.eh_frame_hdr:0000000000015F6D                 db  65h ; e
.eh_frame_hdr:0000000000015F6E                 db 0FFh
.eh_frame_hdr:0000000000015F6F                 db 0FFh
.eh_frame_hdr:0000000000015F70                 db  7Ch ; |
.eh_frame_hdr:0000000000015F71                 db  18h
.eh_frame_hdr:0000000000015F72                 db    0
.eh_frame_hdr:0000000000015F73                 db    0
.eh_frame_hdr:0000000000015F74                 db  60h ; `
.eh_frame_hdr:0000000000015F75                 db  65h ; e
.eh_frame_hdr:0000000000015F76                 db 0FFh
.eh_frame_hdr:0000000000015F77                 db 0FFh
.eh_frame_hdr:0000000000015F78                 db 0B4h
.eh_frame_hdr:0000000000015F79                 db  18h
.eh_frame_hdr:0000000000015F7A                 db    0
.eh_frame_hdr:0000000000015F7B                 db    0
.eh_frame_hdr:0000000000015F7C                 db 0B0h
.eh_frame_hdr:0000000000015F7D                 db  65h ; e
.eh_frame_hdr:0000000000015F7E                 db 0FFh
.eh_frame_hdr:0000000000015F7F                 db 0FFh
.eh_frame_hdr:0000000000015F80                 db 0C8h
.eh_frame_hdr:0000000000015F81                 db  18h
.eh_frame_hdr:0000000000015F82                 db    0
.eh_frame_hdr:0000000000015F83                 db    0
.eh_frame_hdr:0000000000015F84                 db  30h ; 0
.eh_frame_hdr:0000000000015F85                 db  66h ; f
.eh_frame_hdr:0000000000015F86                 db 0FFh
.eh_frame_hdr:0000000000015F87                 db 0FFh
.eh_frame_hdr:0000000000015F88                 db 0FCh
.eh_frame_hdr:0000000000015F89                 db  18h
.eh_frame_hdr:0000000000015F8A                 db    0
.eh_frame_hdr:0000000000015F8B                 db    0
.eh_frame_hdr:0000000000015F8C                 db 0A0h
.eh_frame_hdr:0000000000015F8D                 db  66h ; f
.eh_frame_hdr:0000000000015F8E                 db 0FFh
.eh_frame_hdr:0000000000015F8F                 db 0FFh
.eh_frame_hdr:0000000000015F90                 db  10h
.eh_frame_hdr:0000000000015F91                 db  19h
.eh_frame_hdr:0000000000015F92                 db    0
.eh_frame_hdr:0000000000015F93                 db    0
.eh_frame_hdr:0000000000015F94                 db  10h
.eh_frame_hdr:0000000000015F95                 db  67h ; g
.eh_frame_hdr:0000000000015F96                 db 0FFh
.eh_frame_hdr:0000000000015F97                 db 0FFh
.eh_frame_hdr:0000000000015F98                 db  5Ch ; \
.eh_frame_hdr:0000000000015F99                 db  19h
.eh_frame_hdr:0000000000015F9A                 db    0
.eh_frame_hdr:0000000000015F9B                 db    0
.eh_frame_hdr:0000000000015F9C                 db  50h ; P
.eh_frame_hdr:0000000000015F9D                 db  67h ; g
.eh_frame_hdr:0000000000015F9E                 db 0FFh
.eh_frame_hdr:0000000000015F9F                 db 0FFh
.eh_frame_hdr:0000000000015FA0                 db  70h ; p
.eh_frame_hdr:0000000000015FA1                 db  19h
.eh_frame_hdr:0000000000015FA2                 db    0
.eh_frame_hdr:0000000000015FA3                 db    0
.eh_frame_hdr:0000000000015FA4                 db  70h ; p
.eh_frame_hdr:0000000000015FA5                 db  67h ; g
.eh_frame_hdr:0000000000015FA6                 db 0FFh
.eh_frame_hdr:0000000000015FA7                 db 0FFh
.eh_frame_hdr:0000000000015FA8                 db  84h
.eh_frame_hdr:0000000000015FA9                 db  19h
.eh_frame_hdr:0000000000015FAA                 db    0
.eh_frame_hdr:0000000000015FAB                 db    0
.eh_frame_hdr:0000000000015FAC                 db  30h ; 0
.eh_frame_hdr:0000000000015FAD                 db  69h ; i
.eh_frame_hdr:0000000000015FAE                 db 0FFh
.eh_frame_hdr:0000000000015FAF                 db 0FFh
.eh_frame_hdr:0000000000015FB0                 db 0D0h
.eh_frame_hdr:0000000000015FB1                 db  19h
.eh_frame_hdr:0000000000015FB2                 db    0
.eh_frame_hdr:0000000000015FB3                 db    0
.eh_frame_hdr:0000000000015FB4                 db 0C0h
.eh_frame_hdr:0000000000015FB5                 db  69h ; i
.eh_frame_hdr:0000000000015FB6                 db 0FFh
.eh_frame_hdr:0000000000015FB7                 db 0FFh
.eh_frame_hdr:0000000000015FB8                 db 0FCh
.eh_frame_hdr:0000000000015FB9                 db  19h
.eh_frame_hdr:0000000000015FBA                 db    0
.eh_frame_hdr:0000000000015FBB                 db    0
.eh_frame_hdr:0000000000015FBC                 db 0A0h
.eh_frame_hdr:0000000000015FBD                 db  6Ah ; j
.eh_frame_hdr:0000000000015FBE                 db 0FFh
.eh_frame_hdr:0000000000015FBF                 db 0FFh
.eh_frame_hdr:0000000000015FC0                 db  28h ; (
.eh_frame_hdr:0000000000015FC1                 db  1Ah
.eh_frame_hdr:0000000000015FC2                 db    0
.eh_frame_hdr:0000000000015FC3                 db    0
.eh_frame_hdr:0000000000015FC4                 db 0E0h
.eh_frame_hdr:0000000000015FC5                 db  6Ch ; l
.eh_frame_hdr:0000000000015FC6                 db 0FFh
.eh_frame_hdr:0000000000015FC7                 db 0FFh
.eh_frame_hdr:0000000000015FC8                 db  60h ; `
.eh_frame_hdr:0000000000015FC9                 db  1Ah
.eh_frame_hdr:0000000000015FCA                 db    0
.eh_frame_hdr:0000000000015FCB                 db    0
.eh_frame_hdr:0000000000015FCC                 db  70h ; p
.eh_frame_hdr:0000000000015FCD                 db  6Fh ; o
.eh_frame_hdr:0000000000015FCE                 db 0FFh
.eh_frame_hdr:0000000000015FCF                 db 0FFh
.eh_frame_hdr:0000000000015FD0                 db  9Ch
.eh_frame_hdr:0000000000015FD1                 db  1Ah
.eh_frame_hdr:0000000000015FD2                 db    0
.eh_frame_hdr:0000000000015FD3                 db    0
.eh_frame_hdr:0000000000015FD4                 db 0D0h
.eh_frame_hdr:0000000000015FD5                 db  6Fh ; o
.eh_frame_hdr:0000000000015FD6                 db 0FFh
.eh_frame_hdr:0000000000015FD7                 db 0FFh
.eh_frame_hdr:0000000000015FD8                 db 0C0h
.eh_frame_hdr:0000000000015FD9                 db  1Ah
.eh_frame_hdr:0000000000015FDA                 db    0
.eh_frame_hdr:0000000000015FDB                 db    0
.eh_frame_hdr:0000000000015FDC                 db 0E0h
.eh_frame_hdr:0000000000015FDD                 db  71h ; q
.eh_frame_hdr:0000000000015FDE                 db 0FFh
.eh_frame_hdr:0000000000015FDF                 db 0FFh
.eh_frame_hdr:0000000000015FE0                 db 0F8h
.eh_frame_hdr:0000000000015FE1                 db  1Ah
.eh_frame_hdr:0000000000015FE2                 db    0
.eh_frame_hdr:0000000000015FE3                 db    0
.eh_frame_hdr:0000000000015FE4                 db  10h
.eh_frame_hdr:0000000000015FE5                 db  72h ; r
.eh_frame_hdr:0000000000015FE6                 db 0FFh
.eh_frame_hdr:0000000000015FE7                 db 0FFh
.eh_frame_hdr:0000000000015FE8                 db  20h
.eh_frame_hdr:0000000000015FE9                 db  1Bh
.eh_frame_hdr:0000000000015FEA                 db    0
.eh_frame_hdr:0000000000015FEB                 db    0
.eh_frame_hdr:0000000000015FEC                 db  20h
.eh_frame_hdr:0000000000015FED                 db  72h ; r
.eh_frame_hdr:0000000000015FEE                 db 0FFh
.eh_frame_hdr:0000000000015FEF                 db 0FFh
.eh_frame_hdr:0000000000015FF0                 db  34h ; 4
.eh_frame_hdr:0000000000015FF1                 db  1Bh
.eh_frame_hdr:0000000000015FF2                 db    0
.eh_frame_hdr:0000000000015FF3                 db    0
.eh_frame_hdr:0000000000015FF4                 db  50h ; P
.eh_frame_hdr:0000000000015FF5                 db  72h ; r
.eh_frame_hdr:0000000000015FF6                 db 0FFh
.eh_frame_hdr:0000000000015FF7                 db 0FFh
.eh_frame_hdr:0000000000015FF8                 db  4Ch ; L
.eh_frame_hdr:0000000000015FF9                 db  1Bh
.eh_frame_hdr:0000000000015FFA                 db    0
.eh_frame_hdr:0000000000015FFB                 db    0
.eh_frame_hdr:0000000000015FFC                 db  90h
.eh_frame_hdr:0000000000015FFD                 db  72h ; r
.eh_frame_hdr:0000000000015FFE                 db 0FFh
.eh_frame_hdr:0000000000015FFF                 db 0FFh
.eh_frame_hdr:0000000000016000                 db  64h ; d
.eh_frame_hdr:0000000000016001                 db  1Bh
.eh_frame_hdr:0000000000016002                 db    0
.eh_frame_hdr:0000000000016003                 db    0
.eh_frame_hdr:0000000000016004                 db 0B0h
.eh_frame_hdr:0000000000016005                 db  72h ; r
.eh_frame_hdr:0000000000016006                 db 0FFh
.eh_frame_hdr:0000000000016007                 db 0FFh
.eh_frame_hdr:0000000000016008                 db  80h
.eh_frame_hdr:0000000000016009                 db  1Bh
.eh_frame_hdr:000000000001600A                 db    0
.eh_frame_hdr:000000000001600B                 db    0
.eh_frame_hdr:000000000001600C                 db  30h ; 0
.eh_frame_hdr:000000000001600D                 db  73h ; s
.eh_frame_hdr:000000000001600E                 db 0FFh
.eh_frame_hdr:000000000001600F                 db 0FFh
.eh_frame_hdr:0000000000016010                 db 0E0h
.eh_frame_hdr:0000000000016011                 db  1Bh
.eh_frame_hdr:0000000000016012                 db    0
.eh_frame_hdr:0000000000016013                 db    0
.eh_frame_hdr:0000000000016014                 db 0D0h
.eh_frame_hdr:0000000000016015                 db  73h ; s
.eh_frame_hdr:0000000000016016                 db 0FFh
.eh_frame_hdr:0000000000016017                 db 0FFh
.eh_frame_hdr:0000000000016018                 db    0
.eh_frame_hdr:0000000000016019                 db  1Ch
.eh_frame_hdr:000000000001601A                 db    0
.eh_frame_hdr:000000000001601B                 db    0
.eh_frame_hdr:000000000001601C                 db  50h ; P
.eh_frame_hdr:000000000001601D                 db  74h ; t
.eh_frame_hdr:000000000001601E                 db 0FFh
.eh_frame_hdr:000000000001601F                 db 0FFh
.eh_frame_hdr:0000000000016020                 db  38h ; 8
.eh_frame_hdr:0000000000016021                 db  1Ch
.eh_frame_hdr:0000000000016022                 db    0
.eh_frame_hdr:0000000000016023                 db    0
.eh_frame_hdr:0000000000016024                 db 0B0h
.eh_frame_hdr:0000000000016025                 db  74h ; t
.eh_frame_hdr:0000000000016026                 db 0FFh
.eh_frame_hdr:0000000000016027                 db 0FFh
.eh_frame_hdr:0000000000016028                 db  68h ; h
.eh_frame_hdr:0000000000016029                 db  1Ch
.eh_frame_hdr:000000000001602A                 db    0
.eh_frame_hdr:000000000001602B                 db    0
.eh_frame_hdr:000000000001602C                 db 0A0h
.eh_frame_hdr:000000000001602D                 db  75h ; u
.eh_frame_hdr:000000000001602E                 db 0FFh
.eh_frame_hdr:000000000001602F                 db 0FFh
.eh_frame_hdr:0000000000016030                 db 0ACh
.eh_frame_hdr:0000000000016031                 db  1Ch
.eh_frame_hdr:0000000000016032                 db    0
.eh_frame_hdr:0000000000016033                 db    0
.eh_frame_hdr:0000000000016034                 db 0E0h
.eh_frame_hdr:0000000000016035                 db  87h
.eh_frame_hdr:0000000000016036                 db 0FFh
.eh_frame_hdr:0000000000016037                 db 0FFh
.eh_frame_hdr:0000000000016038                 db  24h ; $
.eh_frame_hdr:0000000000016039                 db  1Dh
.eh_frame_hdr:000000000001603A                 db    0
.eh_frame_hdr:000000000001603B                 db    0
.eh_frame_hdr:000000000001603C                 db  90h
.eh_frame_hdr:000000000001603D                 db  89h
.eh_frame_hdr:000000000001603E                 db 0FFh
.eh_frame_hdr:000000000001603F                 db 0FFh
.eh_frame_hdr:0000000000016040                 db  90h
.eh_frame_hdr:0000000000016041                 db  1Dh
.eh_frame_hdr:0000000000016042                 db    0
.eh_frame_hdr:0000000000016043                 db    0
.eh_frame_hdr:0000000000016044                 db 0D0h
.eh_frame_hdr:0000000000016045                 db  89h
.eh_frame_hdr:0000000000016046                 db 0FFh
.eh_frame_hdr:0000000000016047                 db 0FFh
.eh_frame_hdr:0000000000016048                 db 0BCh
.eh_frame_hdr:0000000000016049                 db  1Dh
.eh_frame_hdr:000000000001604A                 db    0
.eh_frame_hdr:000000000001604B                 db    0
.eh_frame_hdr:000000000001604C                 db 0F0h
.eh_frame_hdr:000000000001604D                 db  89h
.eh_frame_hdr:000000000001604E                 db 0FFh
.eh_frame_hdr:000000000001604F                 db 0FFh
.eh_frame_hdr:0000000000016050                 db 0D0h
.eh_frame_hdr:0000000000016051                 db  1Dh
.eh_frame_hdr:0000000000016052                 db    0
.eh_frame_hdr:0000000000016053                 db    0
.eh_frame_hdr:0000000000016054                 db  10h
.eh_frame_hdr:0000000000016055                 db  8Ah
.eh_frame_hdr:0000000000016056                 db 0FFh
.eh_frame_hdr:0000000000016057                 db 0FFh
.eh_frame_hdr:0000000000016058                 db 0E4h
.eh_frame_hdr:0000000000016059                 db  1Dh
.eh_frame_hdr:000000000001605A                 db    0
.eh_frame_hdr:000000000001605B                 db    0
.eh_frame_hdr:000000000001605C                 db  50h ; P
.eh_frame_hdr:000000000001605D                 db  8Ah
.eh_frame_hdr:000000000001605E                 db 0FFh
.eh_frame_hdr:000000000001605F                 db 0FFh
.eh_frame_hdr:0000000000016060                 db 0F8h
.eh_frame_hdr:0000000000016061                 db  1Dh
.eh_frame_hdr:0000000000016062                 db    0
.eh_frame_hdr:0000000000016063                 db    0
.eh_frame_hdr:0000000000016064                 db  70h ; p
.eh_frame_hdr:0000000000016065                 db  8Ah
.eh_frame_hdr:0000000000016066                 db 0FFh
.eh_frame_hdr:0000000000016067                 db 0FFh
.eh_frame_hdr:0000000000016068                 db  0Ch
.eh_frame_hdr:0000000000016069                 db  1Eh
.eh_frame_hdr:000000000001606A                 db    0
.eh_frame_hdr:000000000001606B                 db    0
.eh_frame_hdr:000000000001606C                 db 0A0h
.eh_frame_hdr:000000000001606D                 db  8Ah
.eh_frame_hdr:000000000001606E                 db 0FFh
.eh_frame_hdr:000000000001606F                 db 0FFh
.eh_frame_hdr:0000000000016070                 db  20h
.eh_frame_hdr:0000000000016071                 db  1Eh
.eh_frame_hdr:0000000000016072                 db    0
.eh_frame_hdr:0000000000016073                 db    0
.eh_frame_hdr:0000000000016074                 db  20h
.eh_frame_hdr:0000000000016075                 db  8Bh
.eh_frame_hdr:0000000000016076                 db 0FFh
.eh_frame_hdr:0000000000016077                 db 0FFh
.eh_frame_hdr:0000000000016078                 db  74h ; t
.eh_frame_hdr:0000000000016079                 db  1Eh
.eh_frame_hdr:000000000001607A                 db    0
.eh_frame_hdr:000000000001607B                 db    0
.eh_frame_hdr:000000000001607C                 db  10h
.eh_frame_hdr:000000000001607D                 db  8Ch
.eh_frame_hdr:000000000001607E                 db 0FFh
.eh_frame_hdr:000000000001607F                 db 0FFh
.eh_frame_hdr:0000000000016080                 db 0E0h
.eh_frame_hdr:0000000000016081                 db  1Eh
.eh_frame_hdr:0000000000016082                 db    0
.eh_frame_hdr:0000000000016083                 db    0
.eh_frame_hdr:0000000000016084                 db  20h
.eh_frame_hdr:0000000000016085                 db  8Ch
.eh_frame_hdr:0000000000016086                 db 0FFh
.eh_frame_hdr:0000000000016087                 db 0FFh
.eh_frame_hdr:0000000000016088                 db 0F4h
.eh_frame_hdr:0000000000016089                 db  1Eh
.eh_frame_hdr:000000000001608A                 db    0
.eh_frame_hdr:000000000001608B                 db    0
.eh_frame_hdr:000000000001608C                 db 0C0h
.eh_frame_hdr:000000000001608D                 db  8Ch
.eh_frame_hdr:000000000001608E                 db 0FFh
.eh_frame_hdr:000000000001608F                 db 0FFh
.eh_frame_hdr:0000000000016090                 db  20h
.eh_frame_hdr:0000000000016091                 db  1Fh
.eh_frame_hdr:0000000000016092                 db    0
.eh_frame_hdr:0000000000016093                 db    0
.eh_frame_hdr:0000000000016094                 db 0E0h
.eh_frame_hdr:0000000000016095                 db  8Ch
.eh_frame_hdr:0000000000016096                 db 0FFh
.eh_frame_hdr:0000000000016097                 db 0FFh
.eh_frame_hdr:0000000000016098                 db  34h ; 4
.eh_frame_hdr:0000000000016099                 db  1Fh
.eh_frame_hdr:000000000001609A                 db    0
.eh_frame_hdr:000000000001609B                 db    0
.eh_frame_hdr:000000000001609C                 db 0F0h
.eh_frame_hdr:000000000001609D                 db  8Ch
.eh_frame_hdr:000000000001609E                 db 0FFh
.eh_frame_hdr:000000000001609F                 db 0FFh
.eh_frame_hdr:00000000000160A0                 db  48h ; H
.eh_frame_hdr:00000000000160A1                 db  1Fh
.eh_frame_hdr:00000000000160A2                 db    0
.eh_frame_hdr:00000000000160A3                 db    0
.eh_frame_hdr:00000000000160A4                 db  10h
.eh_frame_hdr:00000000000160A5                 db  8Dh
.eh_frame_hdr:00000000000160A6                 db 0FFh
.eh_frame_hdr:00000000000160A7                 db 0FFh
.eh_frame_hdr:00000000000160A8                 db  5Ch ; \
.eh_frame_hdr:00000000000160A9                 db  1Fh
.eh_frame_hdr:00000000000160AA                 db    0
.eh_frame_hdr:00000000000160AB                 db    0
.eh_frame_hdr:00000000000160AC                 db  30h ; 0
.eh_frame_hdr:00000000000160AD                 db  8Dh
.eh_frame_hdr:00000000000160AE                 db 0FFh
.eh_frame_hdr:00000000000160AF                 db 0FFh
.eh_frame_hdr:00000000000160B0                 db  70h ; p
.eh_frame_hdr:00000000000160B1                 db  1Fh
.eh_frame_hdr:00000000000160B2                 db    0
.eh_frame_hdr:00000000000160B3                 db    0
.eh_frame_hdr:00000000000160B4                 db 0C0h
.eh_frame_hdr:00000000000160B5                 db  8Dh
.eh_frame_hdr:00000000000160B6                 db 0FFh
.eh_frame_hdr:00000000000160B7                 db 0FFh
.eh_frame_hdr:00000000000160B8                 db  8Ch
.eh_frame_hdr:00000000000160B9                 db  1Fh
.eh_frame_hdr:00000000000160BA                 db    0
.eh_frame_hdr:00000000000160BB                 db    0
.eh_frame_hdr:00000000000160BC                 db  50h ; P
.eh_frame_hdr:00000000000160BD                 db  8Eh
.eh_frame_hdr:00000000000160BE                 db 0FFh
.eh_frame_hdr:00000000000160BF                 db 0FFh
.eh_frame_hdr:00000000000160C0                 db 0A8h
.eh_frame_hdr:00000000000160C1                 db  1Fh
.eh_frame_hdr:00000000000160C2                 db    0
.eh_frame_hdr:00000000000160C3                 db    0
.eh_frame_hdr:00000000000160C4                 db  60h ; `
.eh_frame_hdr:00000000000160C5                 db  8Eh
.eh_frame_hdr:00000000000160C6                 db 0FFh
.eh_frame_hdr:00000000000160C7                 db 0FFh
.eh_frame_hdr:00000000000160C8                 db 0BCh
.eh_frame_hdr:00000000000160C9                 db  1Fh
.eh_frame_hdr:00000000000160CA                 db    0
.eh_frame_hdr:00000000000160CB                 db    0
.eh_frame_hdr:00000000000160CC                 db  70h ; p
.eh_frame_hdr:00000000000160CD                 db  8Eh
.eh_frame_hdr:00000000000160CE                 db 0FFh
.eh_frame_hdr:00000000000160CF                 db 0FFh
.eh_frame_hdr:00000000000160D0                 db 0D0h
.eh_frame_hdr:00000000000160D1                 db  1Fh
.eh_frame_hdr:00000000000160D2                 db    0
.eh_frame_hdr:00000000000160D3                 db    0
.eh_frame_hdr:00000000000160D4                 db  10h
.eh_frame_hdr:00000000000160D5                 db  8Fh
.eh_frame_hdr:00000000000160D6                 db 0FFh
.eh_frame_hdr:00000000000160D7                 db 0FFh
.eh_frame_hdr:00000000000160D8                 db 0ECh
.eh_frame_hdr:00000000000160D9                 db  1Fh
.eh_frame_hdr:00000000000160DA                 db    0
.eh_frame_hdr:00000000000160DB                 db    0
.eh_frame_hdr:00000000000160DC                 db  20h
.eh_frame_hdr:00000000000160DD                 db  8Fh
.eh_frame_hdr:00000000000160DE                 db 0FFh
.eh_frame_hdr:00000000000160DF                 db 0FFh
.eh_frame_hdr:00000000000160E0                 db    0
.eh_frame_hdr:00000000000160E1                 db  20h
.eh_frame_hdr:00000000000160E2                 db    0
.eh_frame_hdr:00000000000160E3                 db    0
.eh_frame_hdr:00000000000160E4                 db  40h ; @
.eh_frame_hdr:00000000000160E5                 db  8Fh
.eh_frame_hdr:00000000000160E6                 db 0FFh
.eh_frame_hdr:00000000000160E7                 db 0FFh
.eh_frame_hdr:00000000000160E8                 db  14h
.eh_frame_hdr:00000000000160E9                 db  20h
.eh_frame_hdr:00000000000160EA                 db    0
.eh_frame_hdr:00000000000160EB                 db    0
.eh_frame_hdr:00000000000160EC                 db  50h ; P
.eh_frame_hdr:00000000000160ED                 db  8Fh
.eh_frame_hdr:00000000000160EE                 db 0FFh
.eh_frame_hdr:00000000000160EF                 db 0FFh
.eh_frame_hdr:00000000000160F0                 db  28h ; (
.eh_frame_hdr:00000000000160F1                 db  20h
.eh_frame_hdr:00000000000160F2                 db    0
.eh_frame_hdr:00000000000160F3                 db    0
.eh_frame_hdr:00000000000160F4                 db 0E0h
.eh_frame_hdr:00000000000160F5                 db  8Fh
.eh_frame_hdr:00000000000160F6                 db 0FFh
.eh_frame_hdr:00000000000160F7                 db 0FFh
.eh_frame_hdr:00000000000160F8                 db  44h ; D
.eh_frame_hdr:00000000000160F9                 db  20h
.eh_frame_hdr:00000000000160FA                 db    0
.eh_frame_hdr:00000000000160FB                 db    0
.eh_frame_hdr:00000000000160FC                 db  80h
.eh_frame_hdr:00000000000160FD                 db  90h
.eh_frame_hdr:00000000000160FE                 db 0FFh
.eh_frame_hdr:00000000000160FF                 db 0FFh
.eh_frame_hdr:0000000000016100                 db  60h ; `
.eh_frame_hdr:0000000000016101                 db  20h
.eh_frame_hdr:0000000000016102                 db    0
.eh_frame_hdr:0000000000016103                 db    0
.eh_frame_hdr:0000000000016104                 db  90h
.eh_frame_hdr:0000000000016105                 db  90h
.eh_frame_hdr:0000000000016106                 db 0FFh
.eh_frame_hdr:0000000000016107                 db 0FFh
.eh_frame_hdr:0000000000016108                 db  74h ; t
.eh_frame_hdr:0000000000016109                 db  20h
.eh_frame_hdr:000000000001610A                 db    0
.eh_frame_hdr:000000000001610B                 db    0
.eh_frame_hdr:000000000001610C                 db 0B0h
.eh_frame_hdr:000000000001610D                 db  90h
.eh_frame_hdr:000000000001610E                 db 0FFh
.eh_frame_hdr:000000000001610F                 db 0FFh
.eh_frame_hdr:0000000000016110                 db  88h
.eh_frame_hdr:0000000000016111                 db  20h
.eh_frame_hdr:0000000000016112                 db    0
.eh_frame_hdr:0000000000016113                 db    0
.eh_frame_hdr:0000000000016114                 db 0D0h
.eh_frame_hdr:0000000000016115                 db  90h
.eh_frame_hdr:0000000000016116                 db 0FFh
.eh_frame_hdr:0000000000016117                 db 0FFh
.eh_frame_hdr:0000000000016118                 db  9Ch
.eh_frame_hdr:0000000000016119                 db  20h
.eh_frame_hdr:000000000001611A                 db    0
.eh_frame_hdr:000000000001611B                 db    0
.eh_frame_hdr:000000000001611C                 db 0E0h
.eh_frame_hdr:000000000001611D                 db  90h
.eh_frame_hdr:000000000001611E                 db 0FFh
.eh_frame_hdr:000000000001611F                 db 0FFh
.eh_frame_hdr:0000000000016120                 db 0B0h
.eh_frame_hdr:0000000000016121                 db  20h
.eh_frame_hdr:0000000000016122                 db    0
.eh_frame_hdr:0000000000016123                 db    0
.eh_frame_hdr:0000000000016124                 db    0
.eh_frame_hdr:0000000000016125                 db  91h
.eh_frame_hdr:0000000000016126                 db 0FFh
.eh_frame_hdr:0000000000016127                 db 0FFh
.eh_frame_hdr:0000000000016128                 db 0C4h
.eh_frame_hdr:0000000000016129                 db  20h
.eh_frame_hdr:000000000001612A                 db    0
.eh_frame_hdr:000000000001612B                 db    0
.eh_frame_hdr:000000000001612C                 db  20h
.eh_frame_hdr:000000000001612D                 db  91h
.eh_frame_hdr:000000000001612E                 db 0FFh
.eh_frame_hdr:000000000001612F                 db 0FFh
.eh_frame_hdr:0000000000016130                 db 0D8h
.eh_frame_hdr:0000000000016131                 db  20h
.eh_frame_hdr:0000000000016132                 db    0
.eh_frame_hdr:0000000000016133                 db    0
.eh_frame_hdr:0000000000016134                 db  40h ; @
.eh_frame_hdr:0000000000016135                 db  91h
.eh_frame_hdr:0000000000016136                 db 0FFh
.eh_frame_hdr:0000000000016137                 db 0FFh
.eh_frame_hdr:0000000000016138                 db 0F0h
.eh_frame_hdr:0000000000016139                 db  20h
.eh_frame_hdr:000000000001613A                 db    0
.eh_frame_hdr:000000000001613B                 db    0
.eh_frame_hdr:000000000001613C                 db 0B0h
.eh_frame_hdr:000000000001613D                 db  93h
.eh_frame_hdr:000000000001613E                 db 0FFh
.eh_frame_hdr:000000000001613F                 db 0FFh
.eh_frame_hdr:0000000000016140                 db  40h ; @
.eh_frame_hdr:0000000000016141                 db  21h ; !
.eh_frame_hdr:0000000000016142                 db    0
.eh_frame_hdr:0000000000016143                 db    0
.eh_frame_hdr:0000000000016144                 db  10h
.eh_frame_hdr:0000000000016145                 db  94h
.eh_frame_hdr:0000000000016146                 db 0FFh
.eh_frame_hdr:0000000000016147                 db 0FFh
.eh_frame_hdr:0000000000016148                 db  78h ; x
.eh_frame_hdr:0000000000016149                 db  21h ; !
.eh_frame_hdr:000000000001614A                 db    0
.eh_frame_hdr:000000000001614B                 db    0
.eh_frame_hdr:000000000001614C                 db  40h ; @
.eh_frame_hdr:000000000001614D                 db  95h
.eh_frame_hdr:000000000001614E                 db 0FFh
.eh_frame_hdr:000000000001614F                 db 0FFh
.eh_frame_hdr:0000000000016150                 db 0B4h
.eh_frame_hdr:0000000000016151                 db  21h ; !
.eh_frame_hdr:0000000000016152                 db    0
.eh_frame_hdr:0000000000016153                 db    0
.eh_frame_hdr:0000000000016154                 db 0E0h
.eh_frame_hdr:0000000000016155                 db  95h
.eh_frame_hdr:0000000000016156                 db 0FFh
.eh_frame_hdr:0000000000016157                 db 0FFh
.eh_frame_hdr:0000000000016158                 db  14h
.eh_frame_hdr:0000000000016159                 db  22h ; "
.eh_frame_hdr:000000000001615A                 db    0
.eh_frame_hdr:000000000001615B                 db    0
.eh_frame_hdr:000000000001615C                 db    0
.eh_frame_hdr:000000000001615D                 db  96h
.eh_frame_hdr:000000000001615E                 db 0FFh
.eh_frame_hdr:000000000001615F                 db 0FFh
.eh_frame_hdr:0000000000016160                 db  28h ; (
.eh_frame_hdr:0000000000016161                 db  22h ; "
.eh_frame_hdr:0000000000016162                 db    0
.eh_frame_hdr:0000000000016163                 db    0
.eh_frame_hdr:0000000000016164                 db  20h
.eh_frame_hdr:0000000000016165                 db  96h
.eh_frame_hdr:0000000000016166                 db 0FFh
.eh_frame_hdr:0000000000016167                 db 0FFh
.eh_frame_hdr:0000000000016168                 db  3Ch ; <
.eh_frame_hdr:0000000000016169                 db  22h ; "
.eh_frame_hdr:000000000001616A                 db    0
.eh_frame_hdr:000000000001616B                 db    0
.eh_frame_hdr:000000000001616C                 db  30h ; 0
.eh_frame_hdr:000000000001616D                 db  96h
.eh_frame_hdr:000000000001616E                 db 0FFh
.eh_frame_hdr:000000000001616F                 db 0FFh
.eh_frame_hdr:0000000000016170                 db  50h ; P
.eh_frame_hdr:0000000000016171                 db  22h ; "
.eh_frame_hdr:0000000000016172                 db    0
.eh_frame_hdr:0000000000016173                 db    0
.eh_frame_hdr:0000000000016174                 db 0B0h
.eh_frame_hdr:0000000000016175                 db  99h
.eh_frame_hdr:0000000000016176                 db 0FFh
.eh_frame_hdr:0000000000016177                 db 0FFh
.eh_frame_hdr:0000000000016178                 db 0A0h
.eh_frame_hdr:0000000000016179                 db  22h ; "
.eh_frame_hdr:000000000001617A                 db    0
.eh_frame_hdr:000000000001617B                 db    0
.eh_frame_hdr:000000000001617C                 db  10h
.eh_frame_hdr:000000000001617D                 db  9Ah
.eh_frame_hdr:000000000001617E                 db 0FFh
.eh_frame_hdr:000000000001617F                 db 0FFh
.eh_frame_hdr:0000000000016180                 db 0D0h
.eh_frame_hdr:0000000000016181                 db  22h ; "
.eh_frame_hdr:0000000000016182                 db    0
.eh_frame_hdr:0000000000016183                 db    0
.eh_frame_hdr:0000000000016184                 db  90h
.eh_frame_hdr:0000000000016185                 db  9Ah
.eh_frame_hdr:0000000000016186                 db 0FFh
.eh_frame_hdr:0000000000016187                 db 0FFh
.eh_frame_hdr:0000000000016188                 db 0F4h
.eh_frame_hdr:0000000000016189                 db  22h ; "
.eh_frame_hdr:000000000001618A                 db    0
.eh_frame_hdr:000000000001618B                 db    0
.eh_frame_hdr:000000000001618C                 db 0A0h
.eh_frame_hdr:000000000001618D                 db  9Ah
.eh_frame_hdr:000000000001618E                 db 0FFh
.eh_frame_hdr:000000000001618F                 db 0FFh
.eh_frame_hdr:0000000000016190                 db    8
.eh_frame_hdr:0000000000016191                 db  23h ; #
.eh_frame_hdr:0000000000016192                 db    0
.eh_frame_hdr:0000000000016193                 db    0
.eh_frame_hdr:0000000000016194                 db 0C0h
.eh_frame_hdr:0000000000016195                 db  9Ah
.eh_frame_hdr:0000000000016196                 db 0FFh
.eh_frame_hdr:0000000000016197                 db 0FFh
.eh_frame_hdr:0000000000016198                 db  1Ch
.eh_frame_hdr:0000000000016199                 db  23h ; #
.eh_frame_hdr:000000000001619A                 db    0
.eh_frame_hdr:000000000001619B                 db    0
.eh_frame_hdr:000000000001619C                 db  40h ; @
.eh_frame_hdr:000000000001619D                 db  9Ch
.eh_frame_hdr:000000000001619E                 db 0FFh
.eh_frame_hdr:000000000001619F                 db 0FFh
.eh_frame_hdr:00000000000161A0                 db  68h ; h
.eh_frame_hdr:00000000000161A1                 db  23h ; #
.eh_frame_hdr:00000000000161A2                 db    0
.eh_frame_hdr:00000000000161A3                 db    0
.eh_frame_hdr:00000000000161A4                 db 0D0h
.eh_frame_hdr:00000000000161A5                 db  9Ch
.eh_frame_hdr:00000000000161A6                 db 0FFh
.eh_frame_hdr:00000000000161A7                 db 0FFh
.eh_frame_hdr:00000000000161A8                 db  8Ch
.eh_frame_hdr:00000000000161A9                 db  23h ; #
.eh_frame_hdr:00000000000161AA                 db    0
.eh_frame_hdr:00000000000161AB                 db    0
.eh_frame_hdr:00000000000161AC                 db 0E0h
.eh_frame_hdr:00000000000161AD                 db  9Ch
.eh_frame_hdr:00000000000161AE                 db 0FFh
.eh_frame_hdr:00000000000161AF                 db 0FFh
.eh_frame_hdr:00000000000161B0                 db 0A0h
.eh_frame_hdr:00000000000161B1                 db  23h ; #
.eh_frame_hdr:00000000000161B2                 db    0
.eh_frame_hdr:00000000000161B3                 db    0
.eh_frame_hdr:00000000000161B4                 db 0F0h
.eh_frame_hdr:00000000000161B5                 db  9Ch
.eh_frame_hdr:00000000000161B6                 db 0FFh
.eh_frame_hdr:00000000000161B7                 db 0FFh
.eh_frame_hdr:00000000000161B8                 db 0B8h
.eh_frame_hdr:00000000000161B9                 db  23h ; #
.eh_frame_hdr:00000000000161BA                 db    0
.eh_frame_hdr:00000000000161BB                 db    0
.eh_frame_hdr:00000000000161BC                 db  30h ; 0
.eh_frame_hdr:00000000000161BD                 db  9Dh
.eh_frame_hdr:00000000000161BE                 db 0FFh
.eh_frame_hdr:00000000000161BF                 db 0FFh
.eh_frame_hdr:00000000000161C0                 db 0F0h
.eh_frame_hdr:00000000000161C1                 db  23h ; #
.eh_frame_hdr:00000000000161C2                 db    0
.eh_frame_hdr:00000000000161C3                 db    0
.eh_frame_hdr:00000000000161C4                 db  40h ; @
.eh_frame_hdr:00000000000161C5                 db  9Dh
.eh_frame_hdr:00000000000161C6                 db 0FFh
.eh_frame_hdr:00000000000161C7                 db 0FFh
.eh_frame_hdr:00000000000161C8                 db    4
.eh_frame_hdr:00000000000161C9                 db  24h ; $
.eh_frame_hdr:00000000000161CA                 db    0
.eh_frame_hdr:00000000000161CB                 db    0
.eh_frame_hdr:00000000000161CC                 db  50h ; P
.eh_frame_hdr:00000000000161CD                 db  9Dh
.eh_frame_hdr:00000000000161CE                 db 0FFh
.eh_frame_hdr:00000000000161CF                 db 0FFh
.eh_frame_hdr:00000000000161D0                 db  18h
.eh_frame_hdr:00000000000161D1                 db  24h ; $
.eh_frame_hdr:00000000000161D2                 db    0
.eh_frame_hdr:00000000000161D3                 db    0
.eh_frame_hdr:00000000000161D4                 db 0D0h
.eh_frame_hdr:00000000000161D5                 db 0A4h
.eh_frame_hdr:00000000000161D6                 db 0FFh
.eh_frame_hdr:00000000000161D7                 db 0FFh
.eh_frame_hdr:00000000000161D8                 db  68h ; h
.eh_frame_hdr:00000000000161D9                 db  24h ; $
.eh_frame_hdr:00000000000161DA                 db    0
.eh_frame_hdr:00000000000161DB                 db    0
.eh_frame_hdr:00000000000161DC                 db 0F0h
.eh_frame_hdr:00000000000161DD                 db 0A4h
.eh_frame_hdr:00000000000161DE                 db 0FFh
.eh_frame_hdr:00000000000161DF                 db 0FFh
.eh_frame_hdr:00000000000161E0                 db  80h
.eh_frame_hdr:00000000000161E1                 db  24h ; $
.eh_frame_hdr:00000000000161E2                 db    0
.eh_frame_hdr:00000000000161E3                 db    0
.eh_frame_hdr:00000000000161E4                 db 0D0h
.eh_frame_hdr:00000000000161E5                 db 0A5h
.eh_frame_hdr:00000000000161E6                 db 0FFh
.eh_frame_hdr:00000000000161E7                 db 0FFh
.eh_frame_hdr:00000000000161E8                 db 0C4h
.eh_frame_hdr:00000000000161E9                 db  24h ; $
.eh_frame_hdr:00000000000161EA                 db    0
.eh_frame_hdr:00000000000161EB                 db    0
.eh_frame_hdr:00000000000161EC                 db  80h
.eh_frame_hdr:00000000000161ED                 db 0A6h
.eh_frame_hdr:00000000000161EE                 db 0FFh
.eh_frame_hdr:00000000000161EF                 db 0FFh
.eh_frame_hdr:00000000000161F0                 db 0DCh
.eh_frame_hdr:00000000000161F1                 db  24h ; $
.eh_frame_hdr:00000000000161F2                 db    0
.eh_frame_hdr:00000000000161F3                 db    0
.eh_frame_hdr:00000000000161F4                 db  90h
.eh_frame_hdr:00000000000161F5                 db 0A6h
.eh_frame_hdr:00000000000161F6                 db 0FFh
.eh_frame_hdr:00000000000161F7                 db 0FFh
.eh_frame_hdr:00000000000161F8                 db 0F0h
.eh_frame_hdr:00000000000161F9                 db  24h ; $
.eh_frame_hdr:00000000000161FA                 db    0
.eh_frame_hdr:00000000000161FB                 db    0
.eh_frame_hdr:00000000000161FC                 db 0F0h
.eh_frame_hdr:00000000000161FD                 db 0AAh
.eh_frame_hdr:00000000000161FE                 db 0FFh
.eh_frame_hdr:00000000000161FF                 db 0FFh
.eh_frame_hdr:0000000000016200                 db  38h ; 8
.eh_frame_hdr:0000000000016201                 db  25h ; %
.eh_frame_hdr:0000000000016202                 db    0
.eh_frame_hdr:0000000000016203                 db    0
.eh_frame_hdr:0000000000016204                 db    0
.eh_frame_hdr:0000000000016205                 db 0ABh
.eh_frame_hdr:0000000000016206                 db 0FFh
.eh_frame_hdr:0000000000016207                 db 0FFh
.eh_frame_hdr:0000000000016208                 db  4Ch ; L
.eh_frame_hdr:0000000000016209                 db  25h ; %
.eh_frame_hdr:000000000001620A                 db    0
.eh_frame_hdr:000000000001620B                 db    0
.eh_frame_hdr:000000000001620C                 db  60h ; `
.eh_frame_hdr:000000000001620D                 db 0ADh
.eh_frame_hdr:000000000001620E                 db 0FFh
.eh_frame_hdr:000000000001620F                 db 0FFh
.eh_frame_hdr:0000000000016210                 db  88h
.eh_frame_hdr:0000000000016211                 db  25h ; %
.eh_frame_hdr:0000000000016212                 db    0
.eh_frame_hdr:0000000000016213                 db    0
.eh_frame_hdr:0000000000016214                 db  80h
.eh_frame_hdr:0000000000016215                 db 0B1h
.eh_frame_hdr:0000000000016216                 db 0FFh
.eh_frame_hdr:0000000000016217                 db 0FFh
.eh_frame_hdr:0000000000016218                 db  9Ch
.eh_frame_hdr:0000000000016219                 db  26h ; &
.eh_frame_hdr:000000000001621A                 db    0
.eh_frame_hdr:000000000001621B                 db    0
.eh_frame_hdr:000000000001621C                 db 0A0h
.eh_frame_hdr:000000000001621D                 db 0B1h
.eh_frame_hdr:000000000001621E                 db 0FFh
.eh_frame_hdr:000000000001621F                 db 0FFh
.eh_frame_hdr:0000000000016220                 db 0B0h
.eh_frame_hdr:0000000000016221                 db  26h ; &
.eh_frame_hdr:0000000000016222                 db    0
.eh_frame_hdr:0000000000016223                 db    0
.eh_frame_hdr:0000000000016224                 db  20h
.eh_frame_hdr:0000000000016225                 db 0B2h
.eh_frame_hdr:0000000000016226                 db 0FFh
.eh_frame_hdr:0000000000016227                 db 0FFh
.eh_frame_hdr:0000000000016228                 db 0CCh
.eh_frame_hdr:0000000000016229                 db  26h ; &
.eh_frame_hdr:000000000001622A                 db    0
.eh_frame_hdr:000000000001622B                 db    0
.eh_frame_hdr:000000000001622C                 db    0
.eh_frame_hdr:000000000001622D                 db 0B3h
.eh_frame_hdr:000000000001622E                 db 0FFh
.eh_frame_hdr:000000000001622F                 db 0FFh
.eh_frame_hdr:0000000000016230                 db 0F8h
.eh_frame_hdr:0000000000016231                 db  26h ; &
.eh_frame_hdr:0000000000016232                 db    0
.eh_frame_hdr:0000000000016233                 db    0
.eh_frame_hdr:0000000000016234                 db  80h
.eh_frame_hdr:0000000000016235                 db 0B3h
.eh_frame_hdr:0000000000016236                 db 0FFh
.eh_frame_hdr:0000000000016237                 db 0FFh
.eh_frame_hdr:0000000000016238                 db  18h
.eh_frame_hdr:0000000000016239                 db  27h ; '
.eh_frame_hdr:000000000001623A                 db    0
.eh_frame_hdr:000000000001623B                 db    0
.eh_frame_hdr:000000000001623C                 db 0C0h
.eh_frame_hdr:000000000001623D                 db 0B3h
.eh_frame_hdr:000000000001623E                 db 0FFh
.eh_frame_hdr:000000000001623F                 db 0FFh
.eh_frame_hdr:0000000000016240                 db  30h ; 0
.eh_frame_hdr:0000000000016241                 db  27h ; '
.eh_frame_hdr:0000000000016242                 db    0
.eh_frame_hdr:0000000000016243                 db    0
.eh_frame_hdr:0000000000016244                 db 0E0h
.eh_frame_hdr:0000000000016245                 db 0B3h
.eh_frame_hdr:0000000000016246                 db 0FFh
.eh_frame_hdr:0000000000016247                 db 0FFh
.eh_frame_hdr:0000000000016248                 db  4Ch ; L
.eh_frame_hdr:0000000000016249                 db  27h ; '
.eh_frame_hdr:000000000001624A                 db    0
.eh_frame_hdr:000000000001624B                 db    0
.eh_frame_hdr:000000000001624C                 db  10h
.eh_frame_hdr:000000000001624D                 db 0B4h
.eh_frame_hdr:000000000001624E                 db 0FFh
.eh_frame_hdr:000000000001624F                 db 0FFh
.eh_frame_hdr:0000000000016250                 db  60h ; `
.eh_frame_hdr:0000000000016251                 db  27h ; '
.eh_frame_hdr:0000000000016252                 db    0
.eh_frame_hdr:0000000000016253                 db    0
.eh_frame_hdr:0000000000016254                 db  20h
.eh_frame_hdr:0000000000016255                 db 0B4h
.eh_frame_hdr:0000000000016256                 db 0FFh
.eh_frame_hdr:0000000000016257                 db 0FFh
.eh_frame_hdr:0000000000016258                 db  74h ; t
.eh_frame_hdr:0000000000016259                 db  27h ; '
.eh_frame_hdr:000000000001625A                 db    0
.eh_frame_hdr:000000000001625B                 db    0
.eh_frame_hdr:000000000001625C                 db  60h ; `
.eh_frame_hdr:000000000001625D                 db 0B4h
.eh_frame_hdr:000000000001625E                 db 0FFh
.eh_frame_hdr:000000000001625F                 db 0FFh
.eh_frame_hdr:0000000000016260                 db  98h
.eh_frame_hdr:0000000000016261                 db  27h ; '
.eh_frame_hdr:0000000000016262                 db    0
.eh_frame_hdr:0000000000016263                 db    0
.eh_frame_hdr:0000000000016264                 db  90h
.eh_frame_hdr:0000000000016265                 db 0B4h
.eh_frame_hdr:0000000000016266                 db 0FFh
.eh_frame_hdr:0000000000016267                 db 0FFh
.eh_frame_hdr:0000000000016268                 db 0ACh
.eh_frame_hdr:0000000000016269                 db  27h ; '
.eh_frame_hdr:000000000001626A                 db    0
.eh_frame_hdr:000000000001626B                 db    0
.eh_frame_hdr:000000000001626C                 db  20h
.eh_frame_hdr:000000000001626D                 db 0B5h
.eh_frame_hdr:000000000001626E                 db 0FFh
.eh_frame_hdr:000000000001626F                 db 0FFh
.eh_frame_hdr:0000000000016270                 db 0C4h
.eh_frame_hdr:0000000000016271                 db  27h ; '
.eh_frame_hdr:0000000000016272                 db    0
.eh_frame_hdr:0000000000016273                 db    0
.eh_frame_hdr:0000000000016274                 db  70h ; p
.eh_frame_hdr:0000000000016275                 db 0B5h
.eh_frame_hdr:0000000000016276                 db 0FFh
.eh_frame_hdr:0000000000016277                 db 0FFh
.eh_frame_hdr:0000000000016278                 db 0DCh
.eh_frame_hdr:0000000000016279                 db  27h ; '
.eh_frame_hdr:000000000001627A                 db    0
.eh_frame_hdr:000000000001627B                 db    0
.eh_frame_hdr:000000000001627C                 db  90h
.eh_frame_hdr:000000000001627D                 db 0B5h
.eh_frame_hdr:000000000001627E                 db 0FFh
.eh_frame_hdr:000000000001627F                 db 0FFh
.eh_frame_hdr:0000000000016280                 db 0F8h
.eh_frame_hdr:0000000000016281                 db  27h ; '
.eh_frame_hdr:0000000000016282                 db    0
.eh_frame_hdr:0000000000016283                 db    0
.eh_frame_hdr:0000000000016284                 db 0C0h
.eh_frame_hdr:0000000000016285                 db 0B5h
.eh_frame_hdr:0000000000016286                 db 0FFh
.eh_frame_hdr:0000000000016287                 db 0FFh
.eh_frame_hdr:0000000000016288                 db  14h
.eh_frame_hdr:0000000000016289                 db  28h ; (
.eh_frame_hdr:000000000001628A                 db    0
.eh_frame_hdr:000000000001628B                 db    0
.eh_frame_hdr:000000000001628C                 db 0F0h
.eh_frame_hdr:000000000001628D                 db 0B5h
.eh_frame_hdr:000000000001628E                 db 0FFh
.eh_frame_hdr:000000000001628F                 db 0FFh
.eh_frame_hdr:0000000000016290                 db  3Ch ; <
.eh_frame_hdr:0000000000016291                 db  28h ; (
.eh_frame_hdr:0000000000016292                 db    0
.eh_frame_hdr:0000000000016293                 db    0
.eh_frame_hdr:0000000000016294                 db  10h
.eh_frame_hdr:0000000000016295                 db 0B6h
.eh_frame_hdr:0000000000016296                 db 0FFh
.eh_frame_hdr:0000000000016297                 db 0FFh
.eh_frame_hdr:0000000000016298                 db  58h ; X
.eh_frame_hdr:0000000000016299                 db  28h ; (
.eh_frame_hdr:000000000001629A                 db    0
.eh_frame_hdr:000000000001629B                 db    0
.eh_frame_hdr:000000000001629C                 db  50h ; P
.eh_frame_hdr:000000000001629D                 db 0B6h
.eh_frame_hdr:000000000001629E                 db 0FFh
.eh_frame_hdr:000000000001629F                 db 0FFh
.eh_frame_hdr:00000000000162A0                 db  70h ; p
.eh_frame_hdr:00000000000162A1                 db  28h ; (
.eh_frame_hdr:00000000000162A2                 db    0
.eh_frame_hdr:00000000000162A3                 db    0
.eh_frame_hdr:00000000000162A4                 db 0F0h
.eh_frame_hdr:00000000000162A5                 db 0B6h
.eh_frame_hdr:00000000000162A6                 db 0FFh
.eh_frame_hdr:00000000000162A7                 db 0FFh
.eh_frame_hdr:00000000000162A8                 db  98h
.eh_frame_hdr:00000000000162A9                 db  28h ; (
.eh_frame_hdr:00000000000162AA                 db    0
.eh_frame_hdr:00000000000162AB                 db    0
.eh_frame_hdr:00000000000162AC                 db  30h ; 0
.eh_frame_hdr:00000000000162AD                 db 0B7h
.eh_frame_hdr:00000000000162AE                 db 0FFh
.eh_frame_hdr:00000000000162AF                 db 0FFh
.eh_frame_hdr:00000000000162B0                 db 0B8h
.eh_frame_hdr:00000000000162B1                 db  28h ; (
.eh_frame_hdr:00000000000162B2                 db    0
.eh_frame_hdr:00000000000162B3                 db    0
.eh_frame_hdr:00000000000162B4                 db  60h ; `
.eh_frame_hdr:00000000000162B5                 db 0B7h
.eh_frame_hdr:00000000000162B6                 db 0FFh
.eh_frame_hdr:00000000000162B7                 db 0FFh
.eh_frame_hdr:00000000000162B8                 db 0D0h
.eh_frame_hdr:00000000000162B9                 db  28h ; (
.eh_frame_hdr:00000000000162BA                 db    0
.eh_frame_hdr:00000000000162BB                 db    0
.eh_frame_hdr:00000000000162BC                 db 0C0h
.eh_frame_hdr:00000000000162BD                 db 0B7h
.eh_frame_hdr:00000000000162BE                 db 0FFh
.eh_frame_hdr:00000000000162BF                 db 0FFh
.eh_frame_hdr:00000000000162C0                 db    0
.eh_frame_hdr:00000000000162C1                 db  29h ; )
.eh_frame_hdr:00000000000162C2                 db    0
.eh_frame_hdr:00000000000162C3                 db    0
.eh_frame_hdr:00000000000162C4                 db  50h ; P
.eh_frame_hdr:00000000000162C5                 db 0B8h
.eh_frame_hdr:00000000000162C6                 db 0FFh
.eh_frame_hdr:00000000000162C7                 db 0FFh
.eh_frame_hdr:00000000000162C8                 db  40h ; @
.eh_frame_hdr:00000000000162C9                 db  29h ; )
.eh_frame_hdr:00000000000162CA                 db    0
.eh_frame_hdr:00000000000162CB                 db    0
.eh_frame_hdr:00000000000162CC                 db  60h ; `
.eh_frame_hdr:00000000000162CD                 db 0B8h
.eh_frame_hdr:00000000000162CE                 db 0FFh
.eh_frame_hdr:00000000000162CF                 db 0FFh
.eh_frame_hdr:00000000000162D0                 db  58h ; X
.eh_frame_hdr:00000000000162D1                 db  29h ; )
.eh_frame_hdr:00000000000162D2                 db    0
.eh_frame_hdr:00000000000162D3                 db    0
.eh_frame_hdr:00000000000162D4                 db  70h ; p
.eh_frame_hdr:00000000000162D5                 db 0B8h
.eh_frame_hdr:00000000000162D6                 db 0FFh
.eh_frame_hdr:00000000000162D7                 db 0FFh
.eh_frame_hdr:00000000000162D8                 db  70h ; p
.eh_frame_hdr:00000000000162D9                 db  29h ; )
.eh_frame_hdr:00000000000162DA                 db    0
.eh_frame_hdr:00000000000162DB                 db    0
.eh_frame_hdr:00000000000162DC                 db  90h
.eh_frame_hdr:00000000000162DD                 db 0B8h
.eh_frame_hdr:00000000000162DE                 db 0FFh
.eh_frame_hdr:00000000000162DF                 db 0FFh
.eh_frame_hdr:00000000000162E0                 db  84h
.eh_frame_hdr:00000000000162E1                 db  29h ; )
.eh_frame_hdr:00000000000162E2                 db    0
.eh_frame_hdr:00000000000162E3                 db    0
.eh_frame_hdr:00000000000162E4                 db 0C0h
.eh_frame_hdr:00000000000162E5                 db 0B8h
.eh_frame_hdr:00000000000162E6                 db 0FFh
.eh_frame_hdr:00000000000162E7                 db 0FFh
.eh_frame_hdr:00000000000162E8                 db 0A0h
.eh_frame_hdr:00000000000162E9                 db  29h ; )
.eh_frame_hdr:00000000000162EA                 db    0
.eh_frame_hdr:00000000000162EB                 db    0
.eh_frame_hdr:00000000000162EC                 db  40h ; @
.eh_frame_hdr:00000000000162ED                 db 0B9h
.eh_frame_hdr:00000000000162EE                 db 0FFh
.eh_frame_hdr:00000000000162EF                 db 0FFh
.eh_frame_hdr:00000000000162F0                 db 0F0h
.eh_frame_hdr:00000000000162F1                 db  29h ; )
.eh_frame_hdr:00000000000162F2                 db    0
.eh_frame_hdr:00000000000162F3                 db    0
.eh_frame_hdr:00000000000162F4                 db 0E0h
.eh_frame_hdr:00000000000162F5                 db 0B9h
.eh_frame_hdr:00000000000162F6                 db 0FFh
.eh_frame_hdr:00000000000162F7                 db 0FFh
.eh_frame_hdr:00000000000162F8                 db  40h ; @
.eh_frame_hdr:00000000000162F9                 db  2Ah ; *
.eh_frame_hdr:00000000000162FA                 db    0
.eh_frame_hdr:00000000000162FB                 db    0
.eh_frame_hdr:00000000000162FC                 db 0F0h
.eh_frame_hdr:00000000000162FD                 db 0B9h
.eh_frame_hdr:00000000000162FE                 db 0FFh
.eh_frame_hdr:00000000000162FF                 db 0FFh
.eh_frame_hdr:0000000000016300                 db  54h ; T
.eh_frame_hdr:0000000000016301                 db  2Ah ; *
.eh_frame_hdr:0000000000016302                 db    0
.eh_frame_hdr:0000000000016303                 db    0
.eh_frame_hdr:0000000000016304                 db  40h ; @
.eh_frame_hdr:0000000000016305                 db 0BAh
.eh_frame_hdr:0000000000016306                 db 0FFh
.eh_frame_hdr:0000000000016307                 db 0FFh
.eh_frame_hdr:0000000000016308                 db  70h ; p
.eh_frame_hdr:0000000000016309                 db  2Ah ; *
.eh_frame_hdr:000000000001630A                 db    0
.eh_frame_hdr:000000000001630B                 db    0
.eh_frame_hdr:000000000001630C                 db 0A0h
.eh_frame_hdr:000000000001630D                 db 0BAh
.eh_frame_hdr:000000000001630E                 db 0FFh
.eh_frame_hdr:000000000001630F                 db 0FFh
.eh_frame_hdr:0000000000016310                 db  90h
.eh_frame_hdr:0000000000016311                 db  2Ah ; *
.eh_frame_hdr:0000000000016312                 db    0
.eh_frame_hdr:0000000000016313                 db    0
.eh_frame_hdr:0000000000016314                 db 0E0h
.eh_frame_hdr:0000000000016315                 db 0BAh
.eh_frame_hdr:0000000000016316                 db 0FFh
.eh_frame_hdr:0000000000016317                 db 0FFh
.eh_frame_hdr:0000000000016318                 db 0A8h
.eh_frame_hdr:0000000000016319                 db  2Ah ; *
.eh_frame_hdr:000000000001631A                 db    0
.eh_frame_hdr:000000000001631B                 db    0
.eh_frame_hdr:000000000001631C                 db  20h
.eh_frame_hdr:000000000001631D                 db 0BBh
.eh_frame_hdr:000000000001631E                 db 0FFh
.eh_frame_hdr:000000000001631F                 db 0FFh
.eh_frame_hdr:0000000000016320                 db 0C8h
.eh_frame_hdr:0000000000016321                 db  2Ah ; *
.eh_frame_hdr:0000000000016322                 db    0
.eh_frame_hdr:0000000000016323                 db    0
.eh_frame_hdr:0000000000016324                 db  90h
.eh_frame_hdr:0000000000016325                 db 0BBh
.eh_frame_hdr:0000000000016326                 db 0FFh
.eh_frame_hdr:0000000000016327                 db 0FFh
.eh_frame_hdr:0000000000016328                 db 0E8h
.eh_frame_hdr:0000000000016329                 db  2Ah ; *
.eh_frame_hdr:000000000001632A                 db    0
.eh_frame_hdr:000000000001632B                 db    0
.eh_frame_hdr:000000000001632C                 db 0C0h
.eh_frame_hdr:000000000001632D                 db 0BBh
.eh_frame_hdr:000000000001632E                 db 0FFh
.eh_frame_hdr:000000000001632F                 db 0FFh
.eh_frame_hdr:0000000000016330                 db    4
.eh_frame_hdr:0000000000016331                 db  2Bh ; +
.eh_frame_hdr:0000000000016332                 db    0
.eh_frame_hdr:0000000000016333                 db    0
.eh_frame_hdr:0000000000016334                 db    0
.eh_frame_hdr:0000000000016335                 db 0BCh
.eh_frame_hdr:0000000000016336                 db 0FFh
.eh_frame_hdr:0000000000016337                 db 0FFh
.eh_frame_hdr:0000000000016338                 db  24h ; $
.eh_frame_hdr:0000000000016339                 db  2Bh ; +
.eh_frame_hdr:000000000001633A                 db    0
.eh_frame_hdr:000000000001633B                 db    0
.eh_frame_hdr:000000000001633C                 db  10h
.eh_frame_hdr:000000000001633D                 db 0BCh
.eh_frame_hdr:000000000001633E                 db 0FFh
.eh_frame_hdr:000000000001633F                 db 0FFh
.eh_frame_hdr:0000000000016340                 db  38h ; 8
.eh_frame_hdr:0000000000016341                 db  2Bh ; +
.eh_frame_hdr:0000000000016342                 db    0
.eh_frame_hdr:0000000000016343                 db    0
.eh_frame_hdr:0000000000016344                 db  30h ; 0
.eh_frame_hdr:0000000000016345                 db 0BDh
.eh_frame_hdr:0000000000016346                 db 0FFh
.eh_frame_hdr:0000000000016347                 db 0FFh
.eh_frame_hdr:0000000000016348                 db  84h
.eh_frame_hdr:0000000000016349                 db  2Bh ; +
.eh_frame_hdr:000000000001634A                 db    0
.eh_frame_hdr:000000000001634B                 db    0
.eh_frame_hdr:000000000001634C                 db  50h ; P
.eh_frame_hdr:000000000001634D                 db 0BDh
.eh_frame_hdr:000000000001634E                 db 0FFh
.eh_frame_hdr:000000000001634F                 db 0FFh
.eh_frame_hdr:0000000000016350                 db 0A0h
.eh_frame_hdr:0000000000016351                 db  2Bh ; +
.eh_frame_hdr:0000000000016352                 db    0
.eh_frame_hdr:0000000000016353                 db    0
.eh_frame_hdr:0000000000016354                 db 0B0h
.eh_frame_hdr:0000000000016355                 db 0BDh
.eh_frame_hdr:0000000000016356                 db 0FFh
.eh_frame_hdr:0000000000016357                 db 0FFh
.eh_frame_hdr:0000000000016358                 db 0D8h
.eh_frame_hdr:0000000000016359                 db  2Bh ; +
.eh_frame_hdr:000000000001635A                 db    0
.eh_frame_hdr:000000000001635B                 db    0
.eh_frame_hdr:000000000001635C                 db  10h
.eh_frame_hdr:000000000001635D                 db 0BEh
.eh_frame_hdr:000000000001635E                 db 0FFh
.eh_frame_hdr:000000000001635F                 db 0FFh
.eh_frame_hdr:0000000000016360                 db 0F8h
.eh_frame_hdr:0000000000016361                 db  2Bh ; +
.eh_frame_hdr:0000000000016362                 db    0
.eh_frame_hdr:0000000000016363                 db    0
.eh_frame_hdr:0000000000016364                 db  40h ; @
.eh_frame_hdr:0000000000016365                 db 0C1h
.eh_frame_hdr:0000000000016366                 db 0FFh
.eh_frame_hdr:0000000000016367                 db 0FFh
.eh_frame_hdr:0000000000016368                 db  44h ; D
.eh_frame_hdr:0000000000016369                 db  2Ch ; ,
.eh_frame_hdr:000000000001636A                 db    0
.eh_frame_hdr:000000000001636B                 db    0
.eh_frame_hdr:000000000001636C                 db  50h ; P
.eh_frame_hdr:000000000001636D                 db 0C1h
.eh_frame_hdr:000000000001636E                 db 0FFh
.eh_frame_hdr:000000000001636F                 db 0FFh
.eh_frame_hdr:0000000000016370                 db  58h ; X
.eh_frame_hdr:0000000000016371                 db  2Ch ; ,
.eh_frame_hdr:0000000000016372                 db    0
.eh_frame_hdr:0000000000016373                 db    0
.eh_frame_hdr:0000000000016374                 db  60h ; `
.eh_frame_hdr:0000000000016375                 db 0C1h
.eh_frame_hdr:0000000000016376                 db 0FFh
.eh_frame_hdr:0000000000016377                 db 0FFh
.eh_frame_hdr:0000000000016378                 db  6Ch ; l
.eh_frame_hdr:0000000000016379                 db  2Ch ; ,
.eh_frame_hdr:000000000001637A                 db    0
.eh_frame_hdr:000000000001637B                 db    0
.eh_frame_hdr:000000000001637C                 db    0
.eh_frame_hdr:000000000001637D                 db 0C3h
.eh_frame_hdr:000000000001637E                 db 0FFh
.eh_frame_hdr:000000000001637F                 db 0FFh
.eh_frame_hdr:0000000000016380                 db 0D0h
.eh_frame_hdr:0000000000016381                 db  2Ch ; ,
.eh_frame_hdr:0000000000016382                 db    0
.eh_frame_hdr:0000000000016383                 db    0
.eh_frame_hdr:0000000000016384                 db  50h ; P
.eh_frame_hdr:0000000000016385                 db 0C3h
.eh_frame_hdr:0000000000016386                 db 0FFh
.eh_frame_hdr:0000000000016387                 db 0FFh
.eh_frame_hdr:0000000000016388                 db    8
.eh_frame_hdr:0000000000016389                 db  2Dh ; -
.eh_frame_hdr:000000000001638A                 db    0
.eh_frame_hdr:000000000001638B                 db    0
.eh_frame_hdr:000000000001638C                 db 0E0h
.eh_frame_hdr:000000000001638D                 db 0C5h
.eh_frame_hdr:000000000001638E                 db 0FFh
.eh_frame_hdr:000000000001638F                 db 0FFh
.eh_frame_hdr:0000000000016390                 db  1Ch
.eh_frame_hdr:0000000000016391                 db  2Dh ; -
.eh_frame_hdr:0000000000016392                 db    0
.eh_frame_hdr:0000000000016393                 db    0
.eh_frame_hdr:0000000000016394                 db  20h
.eh_frame_hdr:0000000000016395                 db 0C8h
.eh_frame_hdr:0000000000016396                 db 0FFh
.eh_frame_hdr:0000000000016397                 db 0FFh
.eh_frame_hdr:0000000000016398                 db  50h ; P
.eh_frame_hdr:0000000000016399                 db  2Dh ; -
.eh_frame_hdr:000000000001639A                 db    0
.eh_frame_hdr:000000000001639B                 db    0
.eh_frame_hdr:000000000001639C                 db  30h ; 0
.eh_frame_hdr:000000000001639D                 db 0C8h
.eh_frame_hdr:000000000001639E                 db 0FFh
.eh_frame_hdr:000000000001639F                 db 0FFh
.eh_frame_hdr:00000000000163A0                 db  68h ; h
.eh_frame_hdr:00000000000163A1                 db  2Dh ; -
.eh_frame_hdr:00000000000163A2                 db    0
.eh_frame_hdr:00000000000163A3                 db    0
.eh_frame_hdr:00000000000163A4                 db 0B0h
.eh_frame_hdr:00000000000163A5                 db 0C8h
.eh_frame_hdr:00000000000163A6                 db 0FFh
.eh_frame_hdr:00000000000163A7                 db 0FFh
.eh_frame_hdr:00000000000163A8                 db 0A0h
.eh_frame_hdr:00000000000163A9                 db  2Dh ; -
.eh_frame_hdr:00000000000163AA                 db    0
.eh_frame_hdr:00000000000163AB                 db    0
.eh_frame_hdr:00000000000163AC                 db  30h ; 0
.eh_frame_hdr:00000000000163AD                 db 0CBh
.eh_frame_hdr:00000000000163AE                 db 0FFh
.eh_frame_hdr:00000000000163AF                 db 0FFh
.eh_frame_hdr:00000000000163B0                 db 0D8h
.eh_frame_hdr:00000000000163B1                 db  2Dh ; -
.eh_frame_hdr:00000000000163B2                 db    0
.eh_frame_hdr:00000000000163B3                 db    0
.eh_frame_hdr:00000000000163B4                 db 0D0h
.eh_frame_hdr:00000000000163B5                 db 0CBh
.eh_frame_hdr:00000000000163B6                 db 0FFh
.eh_frame_hdr:00000000000163B7                 db 0FFh
.eh_frame_hdr:00000000000163B8                 db    8
.eh_frame_hdr:00000000000163B9                 db  2Eh ; .
.eh_frame_hdr:00000000000163BA                 db    0
.eh_frame_hdr:00000000000163BB                 db    0
.eh_frame_hdr:00000000000163BC                 db  40h ; @
.eh_frame_hdr:00000000000163BD                 db 0CCh
.eh_frame_hdr:00000000000163BE                 db 0FFh
.eh_frame_hdr:00000000000163BF                 db 0FFh
.eh_frame_hdr:00000000000163C0                 db  50h ; P
.eh_frame_hdr:00000000000163C1                 db  2Eh ; .
.eh_frame_hdr:00000000000163C2                 db    0
.eh_frame_hdr:00000000000163C3                 db    0
.eh_frame_hdr:00000000000163C4                 db  50h ; P
.eh_frame_hdr:00000000000163C5                 db 0CCh
.eh_frame_hdr:00000000000163C6                 db 0FFh
.eh_frame_hdr:00000000000163C7                 db 0FFh
.eh_frame_hdr:00000000000163C8                 db  68h ; h
.eh_frame_hdr:00000000000163C9                 db  2Eh ; .
.eh_frame_hdr:00000000000163CA                 db    0
.eh_frame_hdr:00000000000163CB                 db    0
.eh_frame_hdr:00000000000163CB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000163CB
LOAD:00000000000163CC ; ===========================================================================
LOAD:00000000000163CC
LOAD:00000000000163CC ; Segment type: Pure code
LOAD:00000000000163CC ; Segment permissions: Read/Execute
LOAD:00000000000163CC LOAD            segment byte public 'CODE' use64
LOAD:00000000000163CC                 assume cs:LOAD
LOAD:00000000000163CC                 ;org 163CCh
LOAD:00000000000163CC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000163CC                 align 10h
LOAD:00000000000163CC LOAD            ends
LOAD:00000000000163CC
.eh_frame:00000000000163D0 ; ===========================================================================
.eh_frame:00000000000163D0
.eh_frame:00000000000163D0 ; Segment type: Pure data
.eh_frame:00000000000163D0 ; Segment permissions: Read
.eh_frame:00000000000163D0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000163D0                 assume cs:_eh_frame
.eh_frame:00000000000163D0                 ;org 163D0h
.eh_frame:00000000000163D0                 db  14h
.eh_frame:00000000000163D1                 db    0
.eh_frame:00000000000163D2                 db    0
.eh_frame:00000000000163D3                 db    0
.eh_frame:00000000000163D4                 db    0
.eh_frame:00000000000163D5                 db    0
.eh_frame:00000000000163D6                 db    0
.eh_frame:00000000000163D7                 db    0
.eh_frame:00000000000163D8                 db    1
.eh_frame:00000000000163D9                 db  7Ah ; z
.eh_frame:00000000000163DA                 db  52h ; R
.eh_frame:00000000000163DB                 db    0
.eh_frame:00000000000163DC                 db    1
.eh_frame:00000000000163DD                 db  78h ; x
.eh_frame:00000000000163DE                 db  10h
.eh_frame:00000000000163DF                 db    1
.eh_frame:00000000000163E0                 db  1Bh
.eh_frame:00000000000163E1                 db  0Ch
.eh_frame:00000000000163E2                 db    7
.eh_frame:00000000000163E3                 db    8
.eh_frame:00000000000163E4                 db  90h
.eh_frame:00000000000163E5                 db    1
.eh_frame:00000000000163E6                 db    7
.eh_frame:00000000000163E7                 db  10h
.eh_frame:00000000000163E8                 db  14h
.eh_frame:00000000000163E9                 db    0
.eh_frame:00000000000163EA                 db    0
.eh_frame:00000000000163EB                 db    0
.eh_frame:00000000000163EC                 db  1Ch
.eh_frame:00000000000163ED                 db    0
.eh_frame:00000000000163EE                 db    0
.eh_frame:00000000000163EF                 db    0
.eh_frame:00000000000163F0                 db 0E0h
.eh_frame:00000000000163F1                 db 0D2h
.eh_frame:00000000000163F2                 db 0FEh
.eh_frame:00000000000163F3                 db 0FFh
.eh_frame:00000000000163F4                 db  2Bh ; +
.eh_frame:00000000000163F5                 db    0
.eh_frame:00000000000163F6                 db    0
.eh_frame:00000000000163F7                 db    0
.eh_frame:00000000000163F8                 db    0
.eh_frame:00000000000163F9                 db    0
.eh_frame:00000000000163FA                 db    0
.eh_frame:00000000000163FB                 db    0
.eh_frame:00000000000163FC                 db    0
.eh_frame:00000000000163FD                 db    0
.eh_frame:00000000000163FE                 db    0
.eh_frame:00000000000163FF                 db    0
.eh_frame:0000000000016400                 db  14h
.eh_frame:0000000000016401                 db    0
.eh_frame:0000000000016402                 db    0
.eh_frame:0000000000016403                 db    0
.eh_frame:0000000000016404                 db    0
.eh_frame:0000000000016405                 db    0
.eh_frame:0000000000016406                 db    0
.eh_frame:0000000000016407                 db    0
.eh_frame:0000000000016408                 db    1
.eh_frame:0000000000016409                 db  7Ah ; z
.eh_frame:000000000001640A                 db  52h ; R
.eh_frame:000000000001640B                 db    0
.eh_frame:000000000001640C                 db    1
.eh_frame:000000000001640D                 db  78h ; x
.eh_frame:000000000001640E                 db  10h
.eh_frame:000000000001640F                 db    1
.eh_frame:0000000000016410                 db  1Bh
.eh_frame:0000000000016411                 db  0Ch
.eh_frame:0000000000016412                 db    7
.eh_frame:0000000000016413                 db    8
.eh_frame:0000000000016414                 db  90h
.eh_frame:0000000000016415                 db    1
.eh_frame:0000000000016416                 db    0
.eh_frame:0000000000016417                 db    0
.eh_frame:0000000000016418                 db  24h ; $
.eh_frame:0000000000016419                 db    0
.eh_frame:000000000001641A                 db    0
.eh_frame:000000000001641B                 db    0
.eh_frame:000000000001641C                 db  1Ch
.eh_frame:000000000001641D                 db    0
.eh_frame:000000000001641E                 db    0
.eh_frame:000000000001641F                 db    0
.eh_frame:0000000000016420                 db  10h
.eh_frame:0000000000016421                 db 0C3h
.eh_frame:0000000000016422                 db 0FEh
.eh_frame:0000000000016423                 db 0FFh
.eh_frame:0000000000016424                 db 0E0h
.eh_frame:0000000000016425                 db    6
.eh_frame:0000000000016426                 db    0
.eh_frame:0000000000016427                 db    0
.eh_frame:0000000000016428                 db    0
.eh_frame:0000000000016429                 db  0Eh
.eh_frame:000000000001642A                 db  10h
.eh_frame:000000000001642B                 db  46h ; F
.eh_frame:000000000001642C                 db  0Eh
.eh_frame:000000000001642D                 db  18h
.eh_frame:000000000001642E                 db  4Ah ; J
.eh_frame:000000000001642F                 db  0Fh
.eh_frame:0000000000016430                 db  0Bh
.eh_frame:0000000000016431                 db  77h ; w
.eh_frame:0000000000016432                 db    8
.eh_frame:0000000000016433                 db  80h
.eh_frame:0000000000016434                 db    0
.eh_frame:0000000000016435                 db  3Fh ; ?
.eh_frame:0000000000016436                 db  1Ah
.eh_frame:0000000000016437                 db  3Bh ; ;
.eh_frame:0000000000016438                 db  2Ah ; *
.eh_frame:0000000000016439                 db  33h ; 3
.eh_frame:000000000001643A                 db  24h ; $
.eh_frame:000000000001643B                 db  22h ; "
.eh_frame:000000000001643C                 db    0
.eh_frame:000000000001643D                 db    0
.eh_frame:000000000001643E                 db    0
.eh_frame:000000000001643F                 db    0
.eh_frame:0000000000016440                 db  14h
.eh_frame:0000000000016441                 db    0
.eh_frame:0000000000016442                 db    0
.eh_frame:0000000000016443                 db    0
.eh_frame:0000000000016444                 db  44h ; D
.eh_frame:0000000000016445                 db    0
.eh_frame:0000000000016446                 db    0
.eh_frame:0000000000016447                 db    0
.eh_frame:0000000000016448                 db 0C8h
.eh_frame:0000000000016449                 db 0C9h
.eh_frame:000000000001644A                 db 0FEh
.eh_frame:000000000001644B                 db 0FFh
.eh_frame:000000000001644C                 db  10h
.eh_frame:000000000001644D                 db    0
.eh_frame:000000000001644E                 db    0
.eh_frame:000000000001644F                 db    0
.eh_frame:0000000000016450                 db    0
.eh_frame:0000000000016451                 db    0
.eh_frame:0000000000016452                 db    0
.eh_frame:0000000000016453                 db    0
.eh_frame:0000000000016454                 db    0
.eh_frame:0000000000016455                 db    0
.eh_frame:0000000000016456                 db    0
.eh_frame:0000000000016457                 db    0
.eh_frame:0000000000016458                 db  48h ; H
.eh_frame:0000000000016459                 db    0
.eh_frame:000000000001645A                 db    0
.eh_frame:000000000001645B                 db    0
.eh_frame:000000000001645C                 db  5Ch ; \
.eh_frame:000000000001645D                 db    0
.eh_frame:000000000001645E                 db    0
.eh_frame:000000000001645F                 db    0
.eh_frame:0000000000016460                 db  80h
.eh_frame:0000000000016461                 db 0D3h
.eh_frame:0000000000016462                 db 0FEh
.eh_frame:0000000000016463                 db 0FFh
.eh_frame:0000000000016464                 db  42h ; B
.eh_frame:0000000000016465                 db    1
.eh_frame:0000000000016466                 db    0
.eh_frame:0000000000016467                 db    0
.eh_frame:0000000000016468                 db    0
.eh_frame:0000000000016469                 db  42h ; B
.eh_frame:000000000001646A                 db  0Eh
.eh_frame:000000000001646B                 db  10h
.eh_frame:000000000001646C                 db  8Fh
.eh_frame:000000000001646D                 db    2
.eh_frame:000000000001646E                 db  42h ; B
.eh_frame:000000000001646F                 db  0Eh
.eh_frame:0000000000016470                 db  18h
.eh_frame:0000000000016471                 db  8Eh
.eh_frame:0000000000016472                 db    3
.eh_frame:0000000000016473                 db  49h ; I
.eh_frame:0000000000016474                 db  0Eh
.eh_frame:0000000000016475                 db  20h
.eh_frame:0000000000016476                 db  8Dh
.eh_frame:0000000000016477                 db    4
.eh_frame:0000000000016478                 db  42h ; B
.eh_frame:0000000000016479                 db  0Eh
.eh_frame:000000000001647A                 db  28h ; (
.eh_frame:000000000001647B                 db  8Ch
.eh_frame:000000000001647C                 db    5
.eh_frame:000000000001647D                 db  44h ; D
.eh_frame:000000000001647E                 db  0Eh
.eh_frame:000000000001647F                 db  30h ; 0
.eh_frame:0000000000016480                 db  86h
.eh_frame:0000000000016481                 db    6
.eh_frame:0000000000016482                 db  41h ; A
.eh_frame:0000000000016483                 db  0Eh
.eh_frame:0000000000016484                 db  38h ; 8
.eh_frame:0000000000016485                 db  83h
.eh_frame:0000000000016486                 db    7
.eh_frame:0000000000016487                 db  50h ; P
.eh_frame:0000000000016488                 db  0Eh
.eh_frame:0000000000016489                 db  50h ; P
.eh_frame:000000000001648A                 db    2
.eh_frame:000000000001648B                 db 0ADh
.eh_frame:000000000001648C                 db  0Ah
.eh_frame:000000000001648D                 db  0Eh
.eh_frame:000000000001648E                 db  38h ; 8
.eh_frame:000000000001648F                 db  41h ; A
.eh_frame:0000000000016490                 db  0Eh
.eh_frame:0000000000016491                 db  30h ; 0
.eh_frame:0000000000016492                 db  41h ; A
.eh_frame:0000000000016493                 db  0Eh
.eh_frame:0000000000016494                 db  28h ; (
.eh_frame:0000000000016495                 db  42h ; B
.eh_frame:0000000000016496                 db  0Eh
.eh_frame:0000000000016497                 db  20h
.eh_frame:0000000000016498                 db  42h ; B
.eh_frame:0000000000016499                 db  0Eh
.eh_frame:000000000001649A                 db  18h
.eh_frame:000000000001649B                 db  42h ; B
.eh_frame:000000000001649C                 db  0Eh
.eh_frame:000000000001649D                 db  10h
.eh_frame:000000000001649E                 db  42h ; B
.eh_frame:000000000001649F                 db  0Eh
.eh_frame:00000000000164A0                 db    8
.eh_frame:00000000000164A1                 db  45h ; E
.eh_frame:00000000000164A2                 db  0Bh
.eh_frame:00000000000164A3                 db    0
.eh_frame:00000000000164A4                 db  38h ; 8
.eh_frame:00000000000164A5                 db    0
.eh_frame:00000000000164A6                 db    0
.eh_frame:00000000000164A7                 db    0
.eh_frame:00000000000164A8                 db 0A8h
.eh_frame:00000000000164A9                 db    0
.eh_frame:00000000000164AA                 db    0
.eh_frame:00000000000164AB                 db    0
.eh_frame:00000000000164AC                 db  84h
.eh_frame:00000000000164AD                 db 0D4h
.eh_frame:00000000000164AE                 db 0FEh
.eh_frame:00000000000164AF                 db 0FFh
.eh_frame:00000000000164B0                 db 0C4h
.eh_frame:00000000000164B1                 db    0
.eh_frame:00000000000164B2                 db    0
.eh_frame:00000000000164B3                 db    0
.eh_frame:00000000000164B4                 db    0
.eh_frame:00000000000164B5                 db  42h ; B
.eh_frame:00000000000164B6                 db  0Eh
.eh_frame:00000000000164B7                 db  10h
.eh_frame:00000000000164B8                 db  8Eh
.eh_frame:00000000000164B9                 db    2
.eh_frame:00000000000164BA                 db  42h ; B
.eh_frame:00000000000164BB                 db  0Eh
.eh_frame:00000000000164BC                 db  18h
.eh_frame:00000000000164BD                 db  8Dh
.eh_frame:00000000000164BE                 db    3
.eh_frame:00000000000164BF                 db  45h ; E
.eh_frame:00000000000164C0                 db  0Eh
.eh_frame:00000000000164C1                 db  20h
.eh_frame:00000000000164C2                 db  8Ch
.eh_frame:00000000000164C3                 db    4
.eh_frame:00000000000164C4                 db  41h ; A
.eh_frame:00000000000164C5                 db  0Eh
.eh_frame:00000000000164C6                 db  28h ; (
.eh_frame:00000000000164C7                 db  86h
.eh_frame:00000000000164C8                 db    5
.eh_frame:00000000000164C9                 db  44h ; D
.eh_frame:00000000000164CA                 db  0Eh
.eh_frame:00000000000164CB                 db  30h ; 0
.eh_frame:00000000000164CC                 db  83h
.eh_frame:00000000000164CD                 db    6
.eh_frame:00000000000164CE                 db  6Fh ; o
.eh_frame:00000000000164CF                 db  0Ah
.eh_frame:00000000000164D0                 db  0Eh
.eh_frame:00000000000164D1                 db  28h ; (
.eh_frame:00000000000164D2                 db  41h ; A
.eh_frame:00000000000164D3                 db  0Eh
.eh_frame:00000000000164D4                 db  20h
.eh_frame:00000000000164D5                 db  42h ; B
.eh_frame:00000000000164D6                 db  0Eh
.eh_frame:00000000000164D7                 db  18h
.eh_frame:00000000000164D8                 db  42h ; B
.eh_frame:00000000000164D9                 db  0Eh
.eh_frame:00000000000164DA                 db  10h
.eh_frame:00000000000164DB                 db  42h ; B
.eh_frame:00000000000164DC                 db  0Eh
.eh_frame:00000000000164DD                 db    8
.eh_frame:00000000000164DE                 db  41h ; A
.eh_frame:00000000000164DF                 db  0Bh
.eh_frame:00000000000164E0                 db  2Ch ; ,
.eh_frame:00000000000164E1                 db    0
.eh_frame:00000000000164E2                 db    0
.eh_frame:00000000000164E3                 db    0
.eh_frame:00000000000164E4                 db 0E4h
.eh_frame:00000000000164E5                 db    0
.eh_frame:00000000000164E6                 db    0
.eh_frame:00000000000164E7                 db    0
.eh_frame:00000000000164E8                 db  18h
.eh_frame:00000000000164E9                 db 0D5h
.eh_frame:00000000000164EA                 db 0FEh
.eh_frame:00000000000164EB                 db 0FFh
.eh_frame:00000000000164EC                 db 0C0h
.eh_frame:00000000000164ED                 db    5
.eh_frame:00000000000164EE                 db    0
.eh_frame:00000000000164EF                 db    0
.eh_frame:00000000000164F0                 db    0
.eh_frame:00000000000164F1                 db  41h ; A
.eh_frame:00000000000164F2                 db  0Eh
.eh_frame:00000000000164F3                 db  10h
.eh_frame:00000000000164F4                 db  86h
.eh_frame:00000000000164F5                 db    2
.eh_frame:00000000000164F6                 db  43h ; C
.eh_frame:00000000000164F7                 db  0Dh
.eh_frame:00000000000164F8                 db    6
.eh_frame:00000000000164F9                 db  48h ; H
.eh_frame:00000000000164FA                 db  8Fh
.eh_frame:00000000000164FB                 db    3
.eh_frame:00000000000164FC                 db  8Eh
.eh_frame:00000000000164FD                 db    4
.eh_frame:00000000000164FE                 db  8Dh
.eh_frame:00000000000164FF                 db    5
.eh_frame:0000000000016500                 db  8Ch
.eh_frame:0000000000016501                 db    6
.eh_frame:0000000000016502                 db  47h ; G
.eh_frame:0000000000016503                 db  83h
.eh_frame:0000000000016504                 db    7
.eh_frame:0000000000016505                 db    3
.eh_frame:0000000000016506                 db 0AFh
.eh_frame:0000000000016507                 db    4
.eh_frame:0000000000016508                 db  0Ah
.eh_frame:0000000000016509                 db  0Ch
.eh_frame:000000000001650A                 db    7
.eh_frame:000000000001650B                 db    8
.eh_frame:000000000001650C                 db  41h ; A
.eh_frame:000000000001650D                 db  0Bh
.eh_frame:000000000001650E                 db    0
.eh_frame:000000000001650F                 db    0
.eh_frame:0000000000016510                 db  2Ch ; ,
.eh_frame:0000000000016511                 db    0
.eh_frame:0000000000016512                 db    0
.eh_frame:0000000000016513                 db    0
.eh_frame:0000000000016514                 db  14h
.eh_frame:0000000000016515                 db    1
.eh_frame:0000000000016516                 db    0
.eh_frame:0000000000016517                 db    0
.eh_frame:0000000000016518                 db 0A8h
.eh_frame:0000000000016519                 db 0DAh
.eh_frame:000000000001651A                 db 0FEh
.eh_frame:000000000001651B                 db 0FFh
.eh_frame:000000000001651C                 db  5Ah ; Z
.eh_frame:000000000001651D                 db    2
.eh_frame:000000000001651E                 db    0
.eh_frame:000000000001651F                 db    0
.eh_frame:0000000000016520                 db    0
.eh_frame:0000000000016521                 db  41h ; A
.eh_frame:0000000000016522                 db  0Eh
.eh_frame:0000000000016523                 db  10h
.eh_frame:0000000000016524                 db  86h
.eh_frame:0000000000016525                 db    2
.eh_frame:0000000000016526                 db  43h ; C
.eh_frame:0000000000016527                 db  0Dh
.eh_frame:0000000000016528                 db    6
.eh_frame:0000000000016529                 db  48h ; H
.eh_frame:000000000001652A                 db  8Fh
.eh_frame:000000000001652B                 db    3
.eh_frame:000000000001652C                 db  8Eh
.eh_frame:000000000001652D                 db    4
.eh_frame:000000000001652E                 db  8Dh
.eh_frame:000000000001652F                 db    5
.eh_frame:0000000000016530                 db  8Ch
.eh_frame:0000000000016531                 db    6
.eh_frame:0000000000016532                 db  47h ; G
.eh_frame:0000000000016533                 db  83h
.eh_frame:0000000000016534                 db    7
.eh_frame:0000000000016535                 db    3
.eh_frame:0000000000016536                 db  23h ; #
.eh_frame:0000000000016537                 db    2
.eh_frame:0000000000016538                 db  0Ah
.eh_frame:0000000000016539                 db  0Ch
.eh_frame:000000000001653A                 db    7
.eh_frame:000000000001653B                 db    8
.eh_frame:000000000001653C                 db  41h ; A
.eh_frame:000000000001653D                 db  0Bh
.eh_frame:000000000001653E                 db    0
.eh_frame:000000000001653F                 db    0
.eh_frame:0000000000016540                 db  28h ; (
.eh_frame:0000000000016541                 db    0
.eh_frame:0000000000016542                 db    0
.eh_frame:0000000000016543                 db    0
.eh_frame:0000000000016544                 db  44h ; D
.eh_frame:0000000000016545                 db    1
.eh_frame:0000000000016546                 db    0
.eh_frame:0000000000016547                 db    0
.eh_frame:0000000000016548                 db 0D8h
.eh_frame:0000000000016549                 db 0DCh
.eh_frame:000000000001654A                 db 0FEh
.eh_frame:000000000001654B                 db 0FFh
.eh_frame:000000000001654C                 db 0BAh
.eh_frame:000000000001654D                 db    5
.eh_frame:000000000001654E                 db    0
.eh_frame:000000000001654F                 db    0
.eh_frame:0000000000016550                 db    0
.eh_frame:0000000000016551                 db  42h ; B
.eh_frame:0000000000016552                 db  0Eh
.eh_frame:0000000000016553                 db  10h
.eh_frame:0000000000016554                 db  8Dh
.eh_frame:0000000000016555                 db    2
.eh_frame:0000000000016556                 db  42h ; B
.eh_frame:0000000000016557                 db  0Eh
.eh_frame:0000000000016558                 db  18h
.eh_frame:0000000000016559                 db  8Ch
.eh_frame:000000000001655A                 db    3
.eh_frame:000000000001655B                 db  46h ; F
.eh_frame:000000000001655C                 db  0Eh
.eh_frame:000000000001655D                 db  20h
.eh_frame:000000000001655E                 db  86h
.eh_frame:000000000001655F                 db    4
.eh_frame:0000000000016560                 db  41h ; A
.eh_frame:0000000000016561                 db  0Eh
.eh_frame:0000000000016562                 db  28h ; (
.eh_frame:0000000000016563                 db  83h
.eh_frame:0000000000016564                 db    5
.eh_frame:0000000000016565                 db  49h ; I
.eh_frame:0000000000016566                 db  0Eh
.eh_frame:0000000000016567                 db 0B0h
.eh_frame:0000000000016568                 db    1
.eh_frame:0000000000016569                 db    0
.eh_frame:000000000001656A                 db    0
.eh_frame:000000000001656B                 db    0
.eh_frame:000000000001656C                 db  2Ch ; ,
.eh_frame:000000000001656D                 db    0
.eh_frame:000000000001656E                 db    0
.eh_frame:000000000001656F                 db    0
.eh_frame:0000000000016570                 db  70h ; p
.eh_frame:0000000000016571                 db    1
.eh_frame:0000000000016572                 db    0
.eh_frame:0000000000016573                 db    0
.eh_frame:0000000000016574                 db  6Ch ; l
.eh_frame:0000000000016575                 db 0E2h
.eh_frame:0000000000016576                 db 0FEh
.eh_frame:0000000000016577                 db 0FFh
.eh_frame:0000000000016578                 db  0Dh
.eh_frame:0000000000016579                 db    5
.eh_frame:000000000001657A                 db    0
.eh_frame:000000000001657B                 db    0
.eh_frame:000000000001657C                 db    0
.eh_frame:000000000001657D                 db  41h ; A
.eh_frame:000000000001657E                 db  0Eh
.eh_frame:000000000001657F                 db  10h
.eh_frame:0000000000016580                 db  86h
.eh_frame:0000000000016581                 db    2
.eh_frame:0000000000016582                 db  43h ; C
.eh_frame:0000000000016583                 db  0Dh
.eh_frame:0000000000016584                 db    6
.eh_frame:0000000000016585                 db  48h ; H
.eh_frame:0000000000016586                 db  8Fh
.eh_frame:0000000000016587                 db    3
.eh_frame:0000000000016588                 db  8Eh
.eh_frame:0000000000016589                 db    4
.eh_frame:000000000001658A                 db  8Dh
.eh_frame:000000000001658B                 db    5
.eh_frame:000000000001658C                 db  8Ch
.eh_frame:000000000001658D                 db    6
.eh_frame:000000000001658E                 db  44h ; D
.eh_frame:000000000001658F                 db  83h
.eh_frame:0000000000016590                 db    7
.eh_frame:0000000000016591                 db    3
.eh_frame:0000000000016592                 db  45h ; E
.eh_frame:0000000000016593                 db    1
.eh_frame:0000000000016594                 db  0Ah
.eh_frame:0000000000016595                 db  0Ch
.eh_frame:0000000000016596                 db    7
.eh_frame:0000000000016597                 db    8
.eh_frame:0000000000016598                 db  41h ; A
.eh_frame:0000000000016599                 db  0Bh
.eh_frame:000000000001659A                 db    0
.eh_frame:000000000001659B                 db    0
.eh_frame:000000000001659C                 db  58h ; X
.eh_frame:000000000001659D                 db    0
.eh_frame:000000000001659E                 db    0
.eh_frame:000000000001659F                 db    0
.eh_frame:00000000000165A0                 db 0A0h
.eh_frame:00000000000165A1                 db    1
.eh_frame:00000000000165A2                 db    0
.eh_frame:00000000000165A3                 db    0
.eh_frame:00000000000165A4                 db 0CCh
.eh_frame:00000000000165A5                 db 0C8h
.eh_frame:00000000000165A6                 db 0FEh
.eh_frame:00000000000165A7                 db 0FFh
.eh_frame:00000000000165A8                 db  58h ; X
.eh_frame:00000000000165A9                 db    8
.eh_frame:00000000000165AA                 db    0
.eh_frame:00000000000165AB                 db    0
.eh_frame:00000000000165AC                 db    0
.eh_frame:00000000000165AD                 db  42h ; B
.eh_frame:00000000000165AE                 db  0Eh
.eh_frame:00000000000165AF                 db  10h
.eh_frame:00000000000165B0                 db  8Fh
.eh_frame:00000000000165B1                 db    2
.eh_frame:00000000000165B2                 db  42h ; B
.eh_frame:00000000000165B3                 db  0Eh
.eh_frame:00000000000165B4                 db  18h
.eh_frame:00000000000165B5                 db  8Eh
.eh_frame:00000000000165B6                 db    3
.eh_frame:00000000000165B7                 db  48h ; H
.eh_frame:00000000000165B8                 db  0Eh
.eh_frame:00000000000165B9                 db  20h
.eh_frame:00000000000165BA                 db  8Dh
.eh_frame:00000000000165BB                 db    4
.eh_frame:00000000000165BC                 db  42h ; B
.eh_frame:00000000000165BD                 db  0Eh
.eh_frame:00000000000165BE                 db  28h ; (
.eh_frame:00000000000165BF                 db  8Ch
.eh_frame:00000000000165C0                 db    5
.eh_frame:00000000000165C1                 db  44h ; D
.eh_frame:00000000000165C2                 db  0Eh
.eh_frame:00000000000165C3                 db  30h ; 0
.eh_frame:00000000000165C4                 db  86h
.eh_frame:00000000000165C5                 db    6
.eh_frame:00000000000165C6                 db  41h ; A
.eh_frame:00000000000165C7                 db  0Eh
.eh_frame:00000000000165C8                 db  38h ; 8
.eh_frame:00000000000165C9                 db  83h
.eh_frame:00000000000165CA                 db    7
.eh_frame:00000000000165CB                 db  58h ; X
.eh_frame:00000000000165CC                 db  0Eh
.eh_frame:00000000000165CD                 db 0E0h
.eh_frame:00000000000165CE                 db    2
.eh_frame:00000000000165CF                 db    3
.eh_frame:00000000000165D0                 db    5
.eh_frame:00000000000165D1                 db    3
.eh_frame:00000000000165D2                 db  0Ah
.eh_frame:00000000000165D3                 db  0Eh
.eh_frame:00000000000165D4                 db 0E8h
.eh_frame:00000000000165D5                 db    2
.eh_frame:00000000000165D6                 db  4Fh ; O
.eh_frame:00000000000165D7                 db  0Eh
.eh_frame:00000000000165D8                 db 0F0h
.eh_frame:00000000000165D9                 db    2
.eh_frame:00000000000165DA                 db  5Ch ; \
.eh_frame:00000000000165DB                 db  0Bh
.eh_frame:00000000000165DC                 db    3
.eh_frame:00000000000165DD                 db 0CCh
.eh_frame:00000000000165DE                 db    2
.eh_frame:00000000000165DF                 db  0Ah
.eh_frame:00000000000165E0                 db  0Eh
.eh_frame:00000000000165E1                 db  38h ; 8
.eh_frame:00000000000165E2                 db  41h ; A
.eh_frame:00000000000165E3                 db  0Eh
.eh_frame:00000000000165E4                 db  30h ; 0
.eh_frame:00000000000165E5                 db  41h ; A
.eh_frame:00000000000165E6                 db  0Eh
.eh_frame:00000000000165E7                 db  28h ; (
.eh_frame:00000000000165E8                 db  42h ; B
.eh_frame:00000000000165E9                 db  0Eh
.eh_frame:00000000000165EA                 db  20h
.eh_frame:00000000000165EB                 db  42h ; B
.eh_frame:00000000000165EC                 db  0Eh
.eh_frame:00000000000165ED                 db  18h
.eh_frame:00000000000165EE                 db  42h ; B
.eh_frame:00000000000165EF                 db  0Eh
.eh_frame:00000000000165F0                 db  10h
.eh_frame:00000000000165F1                 db  42h ; B
.eh_frame:00000000000165F2                 db  0Eh
.eh_frame:00000000000165F3                 db    8
.eh_frame:00000000000165F4                 db  41h ; A
.eh_frame:00000000000165F5                 db  0Bh
.eh_frame:00000000000165F6                 db    0
.eh_frame:00000000000165F7                 db    0
.eh_frame:00000000000165F8                 db  20h
.eh_frame:00000000000165F9                 db    0
.eh_frame:00000000000165FA                 db    0
.eh_frame:00000000000165FB                 db    0
.eh_frame:00000000000165FC                 db 0FCh
.eh_frame:00000000000165FD                 db    1
.eh_frame:00000000000165FE                 db    0
.eh_frame:00000000000165FF                 db    0
.eh_frame:0000000000016600                 db 0F0h
.eh_frame:0000000000016601                 db 0E6h
.eh_frame:0000000000016602                 db 0FEh
.eh_frame:0000000000016603                 db 0FFh
.eh_frame:0000000000016604                 db  44h ; D
.eh_frame:0000000000016605                 db    0
.eh_frame:0000000000016606                 db    0
.eh_frame:0000000000016607                 db    0
.eh_frame:0000000000016608                 db    0
.eh_frame:0000000000016609                 db  4Fh ; O
.eh_frame:000000000001660A                 db  0Eh
.eh_frame:000000000001660B                 db  10h
.eh_frame:000000000001660C                 db  83h
.eh_frame:000000000001660D                 db    2
.eh_frame:000000000001660E                 db  52h ; R
.eh_frame:000000000001660F                 db  0Eh
.eh_frame:0000000000016610                 db    8
.eh_frame:0000000000016611                 db  47h ; G
.eh_frame:0000000000016612                 db 0C3h
.eh_frame:0000000000016613                 db  48h ; H
.eh_frame:0000000000016614                 db  0Eh
.eh_frame:0000000000016615                 db  10h
.eh_frame:0000000000016616                 db  83h
.eh_frame:0000000000016617                 db    2
.eh_frame:0000000000016618                 db  53h ; S
.eh_frame:0000000000016619                 db  0Eh
.eh_frame:000000000001661A                 db    8
.eh_frame:000000000001661B                 db    0
.eh_frame:000000000001661C                 db  38h ; 8
.eh_frame:000000000001661D                 db    0
.eh_frame:000000000001661E                 db    0
.eh_frame:000000000001661F                 db    0
.eh_frame:0000000000016620                 db  20h
.eh_frame:0000000000016621                 db    2
.eh_frame:0000000000016622                 db    0
.eh_frame:0000000000016623                 db    0
.eh_frame:0000000000016624                 db  1Ch
.eh_frame:0000000000016625                 db 0E7h
.eh_frame:0000000000016626                 db 0FEh
.eh_frame:0000000000016627                 db 0FFh
.eh_frame:0000000000016628                 db 0A5h
.eh_frame:0000000000016629                 db    0
.eh_frame:000000000001662A                 db    0
.eh_frame:000000000001662B                 db    0
.eh_frame:000000000001662C                 db    0
.eh_frame:000000000001662D                 db  4Ah ; J
.eh_frame:000000000001662E                 db  0Eh
.eh_frame:000000000001662F                 db  10h
.eh_frame:0000000000016630                 db  8Ch
.eh_frame:0000000000016631                 db    2
.eh_frame:0000000000016632                 db  44h ; D
.eh_frame:0000000000016633                 db  0Eh
.eh_frame:0000000000016634                 db  18h
.eh_frame:0000000000016635                 db  86h
.eh_frame:0000000000016636                 db    3
.eh_frame:0000000000016637                 db  41h ; A
.eh_frame:0000000000016638                 db  0Eh
.eh_frame:0000000000016639                 db  20h
.eh_frame:000000000001663A                 db  83h
.eh_frame:000000000001663B                 db    4
.eh_frame:000000000001663C                 db    2
.eh_frame:000000000001663D                 db  40h ; @
.eh_frame:000000000001663E                 db  0Ah
.eh_frame:000000000001663F                 db  0Eh
.eh_frame:0000000000016640                 db  18h
.eh_frame:0000000000016641                 db  43h ; C
.eh_frame:0000000000016642                 db  0Eh
.eh_frame:0000000000016643                 db  10h
.eh_frame:0000000000016644                 db  42h ; B
.eh_frame:0000000000016645                 db  0Eh
.eh_frame:0000000000016646                 db    8
.eh_frame:0000000000016647                 db  44h ; D
.eh_frame:0000000000016648                 db  0Bh
.eh_frame:0000000000016649                 db  41h ; A
.eh_frame:000000000001664A                 db  0Ah
.eh_frame:000000000001664B                 db  0Eh
.eh_frame:000000000001664C                 db  18h
.eh_frame:000000000001664D                 db  46h ; F
.eh_frame:000000000001664E                 db  0Eh
.eh_frame:000000000001664F                 db  10h
.eh_frame:0000000000016650                 db  42h ; B
.eh_frame:0000000000016651                 db  0Eh
.eh_frame:0000000000016652                 db    8
.eh_frame:0000000000016653                 db  47h ; G
.eh_frame:0000000000016654                 db  0Bh
.eh_frame:0000000000016655                 db    0
.eh_frame:0000000000016656                 db    0
.eh_frame:0000000000016657                 db    0
.eh_frame:0000000000016658                 db  1Ch
.eh_frame:0000000000016659                 db    0
.eh_frame:000000000001665A                 db    0
.eh_frame:000000000001665B                 db    0
.eh_frame:000000000001665C                 db  5Ch ; \
.eh_frame:000000000001665D                 db    2
.eh_frame:000000000001665E                 db    0
.eh_frame:000000000001665F                 db    0
.eh_frame:0000000000016660                 db  90h
.eh_frame:0000000000016661                 db 0E7h
.eh_frame:0000000000016662                 db 0FEh
.eh_frame:0000000000016663                 db 0FFh
.eh_frame:0000000000016664                 db  37h ; 7
.eh_frame:0000000000016665                 db    0
.eh_frame:0000000000016666                 db    0
.eh_frame:0000000000016667                 db    0
.eh_frame:0000000000016668                 db    0
.eh_frame:0000000000016669                 db  41h ; A
.eh_frame:000000000001666A                 db  0Eh
.eh_frame:000000000001666B                 db  10h
.eh_frame:000000000001666C                 db  83h
.eh_frame:000000000001666D                 db    2
.eh_frame:000000000001666E                 db  59h ; Y
.eh_frame:000000000001666F                 db  0Ah
.eh_frame:0000000000016670                 db  0Eh
.eh_frame:0000000000016671                 db    8
.eh_frame:0000000000016672                 db  46h ; F
.eh_frame:0000000000016673                 db  0Bh
.eh_frame:0000000000016674                 db  56h ; V
.eh_frame:0000000000016675                 db  0Eh
.eh_frame:0000000000016676                 db    8
.eh_frame:0000000000016677                 db    0
.eh_frame:0000000000016678                 db  10h
.eh_frame:0000000000016679                 db    0
.eh_frame:000000000001667A                 db    0
.eh_frame:000000000001667B                 db    0
.eh_frame:000000000001667C                 db  7Ch ; |
.eh_frame:000000000001667D                 db    2
.eh_frame:000000000001667E                 db    0
.eh_frame:000000000001667F                 db    0
.eh_frame:0000000000016680                 db 0A0h
.eh_frame:0000000000016681                 db 0C7h
.eh_frame:0000000000016682                 db 0FEh
.eh_frame:0000000000016683                 db 0FFh
.eh_frame:0000000000016684                 db  16h
.eh_frame:0000000000016685                 db    0
.eh_frame:0000000000016686                 db    0
.eh_frame:0000000000016687                 db    0
.eh_frame:0000000000016688                 db    0
.eh_frame:0000000000016689                 db    0
.eh_frame:000000000001668A                 db    0
.eh_frame:000000000001668B                 db    0
.eh_frame:000000000001668C                 db  14h
.eh_frame:000000000001668D                 db    0
.eh_frame:000000000001668E                 db    0
.eh_frame:000000000001668F                 db    0
.eh_frame:0000000000016690                 db  90h
.eh_frame:0000000000016691                 db    2
.eh_frame:0000000000016692                 db    0
.eh_frame:0000000000016693                 db    0
.eh_frame:0000000000016694                 db 0A2h
.eh_frame:0000000000016695                 db 0C7h
.eh_frame:0000000000016696                 db 0FEh
.eh_frame:0000000000016697                 db 0FFh
.eh_frame:0000000000016698                 db  33h ; 3
.eh_frame:0000000000016699                 db    0
.eh_frame:000000000001669A                 db    0
.eh_frame:000000000001669B                 db    0
.eh_frame:000000000001669C                 db    0
.eh_frame:000000000001669D                 db  41h ; A
.eh_frame:000000000001669E                 db  0Eh
.eh_frame:000000000001669F                 db  10h
.eh_frame:00000000000166A0                 db  83h
.eh_frame:00000000000166A1                 db    2
.eh_frame:00000000000166A2                 db    0
.eh_frame:00000000000166A3                 db    0
.eh_frame:00000000000166A4                 db  34h ; 4
.eh_frame:00000000000166A5                 db    0
.eh_frame:00000000000166A6                 db    0
.eh_frame:00000000000166A7                 db    0
.eh_frame:00000000000166A8                 db 0A8h
.eh_frame:00000000000166A9                 db    2
.eh_frame:00000000000166AA                 db    0
.eh_frame:00000000000166AB                 db    0
.eh_frame:00000000000166AC                 db  84h
.eh_frame:00000000000166AD                 db 0E7h
.eh_frame:00000000000166AE                 db 0FEh
.eh_frame:00000000000166AF                 db 0FFh
.eh_frame:00000000000166B0                 db 0B6h
.eh_frame:00000000000166B1                 db    0
.eh_frame:00000000000166B2                 db    0
.eh_frame:00000000000166B3                 db    0
.eh_frame:00000000000166B4                 db    0
.eh_frame:00000000000166B5                 db  42h ; B
.eh_frame:00000000000166B6                 db  0Eh
.eh_frame:00000000000166B7                 db  10h
.eh_frame:00000000000166B8                 db  8Ch
.eh_frame:00000000000166B9                 db    2
.eh_frame:00000000000166BA                 db  41h ; A
.eh_frame:00000000000166BB                 db  0Eh
.eh_frame:00000000000166BC                 db  18h
.eh_frame:00000000000166BD                 db  86h
.eh_frame:00000000000166BE                 db    3
.eh_frame:00000000000166BF                 db  44h ; D
.eh_frame:00000000000166C0                 db  0Eh
.eh_frame:00000000000166C1                 db  20h
.eh_frame:00000000000166C2                 db  83h
.eh_frame:00000000000166C3                 db    4
.eh_frame:00000000000166C4                 db    2
.eh_frame:00000000000166C5                 db  97h
.eh_frame:00000000000166C6                 db  0Ah
.eh_frame:00000000000166C7                 db  0Eh
.eh_frame:00000000000166C8                 db  18h
.eh_frame:00000000000166C9                 db  41h ; A
.eh_frame:00000000000166CA                 db  0Eh
.eh_frame:00000000000166CB                 db  10h
.eh_frame:00000000000166CC                 db  42h ; B
.eh_frame:00000000000166CD                 db  0Eh
.eh_frame:00000000000166CE                 db    8
.eh_frame:00000000000166CF                 db  47h ; G
.eh_frame:00000000000166D0                 db  0Bh
.eh_frame:00000000000166D1                 db  41h ; A
.eh_frame:00000000000166D2                 db  0Eh
.eh_frame:00000000000166D3                 db  18h
.eh_frame:00000000000166D4                 db  41h ; A
.eh_frame:00000000000166D5                 db  0Eh
.eh_frame:00000000000166D6                 db  10h
.eh_frame:00000000000166D7                 db  42h ; B
.eh_frame:00000000000166D8                 db  0Eh
.eh_frame:00000000000166D9                 db    8
.eh_frame:00000000000166DA                 db    0
.eh_frame:00000000000166DB                 db    0
.eh_frame:00000000000166DC                 db  64h ; d
.eh_frame:00000000000166DD                 db    0
.eh_frame:00000000000166DE                 db    0
.eh_frame:00000000000166DF                 db    0
.eh_frame:00000000000166E0                 db 0E0h
.eh_frame:00000000000166E1                 db    2
.eh_frame:00000000000166E2                 db    0
.eh_frame:00000000000166E3                 db    0
.eh_frame:00000000000166E4                 db  0Ch
.eh_frame:00000000000166E5                 db 0E8h
.eh_frame:00000000000166E6                 db 0FEh
.eh_frame:00000000000166E7                 db 0FFh
.eh_frame:00000000000166E8                 db    5
.eh_frame:00000000000166E9                 db    1
.eh_frame:00000000000166EA                 db    0
.eh_frame:00000000000166EB                 db    0
.eh_frame:00000000000166EC                 db    0
.eh_frame:00000000000166ED                 db  42h ; B
.eh_frame:00000000000166EE                 db  0Eh
.eh_frame:00000000000166EF                 db  10h
.eh_frame:00000000000166F0                 db  8Dh
.eh_frame:00000000000166F1                 db    2
.eh_frame:00000000000166F2                 db  42h ; B
.eh_frame:00000000000166F3                 db  0Eh
.eh_frame:00000000000166F4                 db  18h
.eh_frame:00000000000166F5                 db  8Ch
.eh_frame:00000000000166F6                 db    3
.eh_frame:00000000000166F7                 db  45h ; E
.eh_frame:00000000000166F8                 db  0Eh
.eh_frame:00000000000166F9                 db  20h
.eh_frame:00000000000166FA                 db  86h
.eh_frame:00000000000166FB                 db    4
.eh_frame:00000000000166FC                 db  41h ; A
.eh_frame:00000000000166FD                 db  0Eh
.eh_frame:00000000000166FE                 db  28h ; (
.eh_frame:00000000000166FF                 db  83h
.eh_frame:0000000000016700                 db    5
.eh_frame:0000000000016701                 db  51h ; Q
.eh_frame:0000000000016702                 db  0Eh
.eh_frame:0000000000016703                 db  38h ; 8
.eh_frame:0000000000016704                 db  4Ch ; L
.eh_frame:0000000000016705                 db  0Eh
.eh_frame:0000000000016706                 db  40h ; @
.eh_frame:0000000000016707                 db  57h ; W
.eh_frame:0000000000016708                 db  0Eh
.eh_frame:0000000000016709                 db  38h ; 8
.eh_frame:000000000001670A                 db  41h ; A
.eh_frame:000000000001670B                 db  0Eh
.eh_frame:000000000001670C                 db  30h ; 0
.eh_frame:000000000001670D                 db  4Eh ; N
.eh_frame:000000000001670E                 db  0Ah
.eh_frame:000000000001670F                 db  0Eh
.eh_frame:0000000000016710                 db  28h ; (
.eh_frame:0000000000016711                 db  48h ; H
.eh_frame:0000000000016712                 db  0Eh
.eh_frame:0000000000016713                 db  20h
.eh_frame:0000000000016714                 db  41h ; A
.eh_frame:0000000000016715                 db  0Eh
.eh_frame:0000000000016716                 db  18h
.eh_frame:0000000000016717                 db  42h ; B
.eh_frame:0000000000016718                 db  0Eh
.eh_frame:0000000000016719                 db  10h
.eh_frame:000000000001671A                 db  42h ; B
.eh_frame:000000000001671B                 db  0Eh
.eh_frame:000000000001671C                 db    8
.eh_frame:000000000001671D                 db  46h ; F
.eh_frame:000000000001671E                 db  0Bh
.eh_frame:000000000001671F                 db  79h ; y
.eh_frame:0000000000016720                 db  0Ah
.eh_frame:0000000000016721                 db  0Eh
.eh_frame:0000000000016722                 db  28h ; (
.eh_frame:0000000000016723                 db  43h ; C
.eh_frame:0000000000016724                 db  0Eh
.eh_frame:0000000000016725                 db  20h
.eh_frame:0000000000016726                 db  41h ; A
.eh_frame:0000000000016727                 db  0Eh
.eh_frame:0000000000016728                 db  18h
.eh_frame:0000000000016729                 db  42h ; B
.eh_frame:000000000001672A                 db  0Eh
.eh_frame:000000000001672B                 db  10h
.eh_frame:000000000001672C                 db  42h ; B
.eh_frame:000000000001672D                 db  0Eh
.eh_frame:000000000001672E                 db    8
.eh_frame:000000000001672F                 db  47h ; G
.eh_frame:0000000000016730                 db  0Bh
.eh_frame:0000000000016731                 db    2
.eh_frame:0000000000016732                 db  54h ; T
.eh_frame:0000000000016733                 db  0Eh
.eh_frame:0000000000016734                 db  28h ; (
.eh_frame:0000000000016735                 db  43h ; C
.eh_frame:0000000000016736                 db  0Eh
.eh_frame:0000000000016737                 db  20h
.eh_frame:0000000000016738                 db  41h ; A
.eh_frame:0000000000016739                 db  0Eh
.eh_frame:000000000001673A                 db  18h
.eh_frame:000000000001673B                 db  42h ; B
.eh_frame:000000000001673C                 db  0Eh
.eh_frame:000000000001673D                 db  10h
.eh_frame:000000000001673E                 db  42h ; B
.eh_frame:000000000001673F                 db  0Eh
.eh_frame:0000000000016740                 db    8
.eh_frame:0000000000016741                 db    0
.eh_frame:0000000000016742                 db    0
.eh_frame:0000000000016743                 db    0
.eh_frame:0000000000016744                 db  4Ch ; L
.eh_frame:0000000000016745                 db    0
.eh_frame:0000000000016746                 db    0
.eh_frame:0000000000016747                 db    0
.eh_frame:0000000000016748                 db  48h ; H
.eh_frame:0000000000016749                 db    3
.eh_frame:000000000001674A                 db    0
.eh_frame:000000000001674B                 db    0
.eh_frame:000000000001674C                 db 0B4h
.eh_frame:000000000001674D                 db 0E8h
.eh_frame:000000000001674E                 db 0FEh
.eh_frame:000000000001674F                 db 0FFh
.eh_frame:0000000000016750                 db  4Bh ; K
.eh_frame:0000000000016751                 db    1
.eh_frame:0000000000016752                 db    0
.eh_frame:0000000000016753                 db    0
.eh_frame:0000000000016754                 db    0
.eh_frame:0000000000016755                 db  42h ; B
.eh_frame:0000000000016756                 db  0Eh
.eh_frame:0000000000016757                 db  10h
.eh_frame:0000000000016758                 db  8Eh
.eh_frame:0000000000016759                 db    2
.eh_frame:000000000001675A                 db  42h ; B
.eh_frame:000000000001675B                 db  0Eh
.eh_frame:000000000001675C                 db  18h
.eh_frame:000000000001675D                 db  8Dh
.eh_frame:000000000001675E                 db    3
.eh_frame:000000000001675F                 db  45h ; E
.eh_frame:0000000000016760                 db  0Eh
.eh_frame:0000000000016761                 db  20h
.eh_frame:0000000000016762                 db  8Ch
.eh_frame:0000000000016763                 db    4
.eh_frame:0000000000016764                 db  41h ; A
.eh_frame:0000000000016765                 db  0Eh
.eh_frame:0000000000016766                 db  28h ; (
.eh_frame:0000000000016767                 db  86h
.eh_frame:0000000000016768                 db    5
.eh_frame:0000000000016769                 db  44h ; D
.eh_frame:000000000001676A                 db  0Eh
.eh_frame:000000000001676B                 db  30h ; 0
.eh_frame:000000000001676C                 db  83h
.eh_frame:000000000001676D                 db    6
.eh_frame:000000000001676E                 db  4Ah ; J
.eh_frame:000000000001676F                 db  0Eh
.eh_frame:0000000000016770                 db  50h ; P
.eh_frame:0000000000016771                 db    2
.eh_frame:0000000000016772                 db  83h
.eh_frame:0000000000016773                 db  0Eh
.eh_frame:0000000000016774                 db  58h ; X
.eh_frame:0000000000016775                 db  4Dh ; M
.eh_frame:0000000000016776                 db  0Eh
.eh_frame:0000000000016777                 db  60h ; `
.eh_frame:0000000000016778                 db  56h ; V
.eh_frame:0000000000016779                 db  0Eh
.eh_frame:000000000001677A                 db  58h ; X
.eh_frame:000000000001677B                 db  41h ; A
.eh_frame:000000000001677C                 db  0Eh
.eh_frame:000000000001677D                 db  50h ; P
.eh_frame:000000000001677E                 db    2
.eh_frame:000000000001677F                 db  68h ; h
.eh_frame:0000000000016780                 db  0Ah
.eh_frame:0000000000016781                 db  0Eh
.eh_frame:0000000000016782                 db  30h ; 0
.eh_frame:0000000000016783                 db  41h ; A
.eh_frame:0000000000016784                 db  0Eh
.eh_frame:0000000000016785                 db  28h ; (
.eh_frame:0000000000016786                 db  41h ; A
.eh_frame:0000000000016787                 db  0Eh
.eh_frame:0000000000016788                 db  20h
.eh_frame:0000000000016789                 db  42h ; B
.eh_frame:000000000001678A                 db  0Eh
.eh_frame:000000000001678B                 db  18h
.eh_frame:000000000001678C                 db  42h ; B
.eh_frame:000000000001678D                 db  0Eh
.eh_frame:000000000001678E                 db  10h
.eh_frame:000000000001678F                 db  42h ; B
.eh_frame:0000000000016790                 db  0Eh
.eh_frame:0000000000016791                 db    8
.eh_frame:0000000000016792                 db  41h ; A
.eh_frame:0000000000016793                 db  0Bh
.eh_frame:0000000000016794                 db  4Ch ; L
.eh_frame:0000000000016795                 db    0
.eh_frame:0000000000016796                 db    0
.eh_frame:0000000000016797                 db    0
.eh_frame:0000000000016798                 db  98h
.eh_frame:0000000000016799                 db    3
.eh_frame:000000000001679A                 db    0
.eh_frame:000000000001679B                 db    0
.eh_frame:000000000001679C                 db 0B4h
.eh_frame:000000000001679D                 db 0E9h
.eh_frame:000000000001679E                 db 0FEh
.eh_frame:000000000001679F                 db 0FFh
.eh_frame:00000000000167A0                 db 0BEh
.eh_frame:00000000000167A1                 db    0
.eh_frame:00000000000167A2                 db    0
.eh_frame:00000000000167A3                 db    0
.eh_frame:00000000000167A4                 db    0
.eh_frame:00000000000167A5                 db  42h ; B
.eh_frame:00000000000167A6                 db  0Eh
.eh_frame:00000000000167A7                 db  10h
.eh_frame:00000000000167A8                 db  8Dh
.eh_frame:00000000000167A9                 db    2
.eh_frame:00000000000167AA                 db  42h ; B
.eh_frame:00000000000167AB                 db  0Eh
.eh_frame:00000000000167AC                 db  18h
.eh_frame:00000000000167AD                 db  8Ch
.eh_frame:00000000000167AE                 db    3
.eh_frame:00000000000167AF                 db  44h ; D
.eh_frame:00000000000167B0                 db  0Eh
.eh_frame:00000000000167B1                 db  20h
.eh_frame:00000000000167B2                 db  86h
.eh_frame:00000000000167B3                 db    4
.eh_frame:00000000000167B4                 db  41h ; A
.eh_frame:00000000000167B5                 db  0Eh
.eh_frame:00000000000167B6                 db  28h ; (
.eh_frame:00000000000167B7                 db  83h
.eh_frame:00000000000167B8                 db    5
.eh_frame:00000000000167B9                 db  51h ; Q
.eh_frame:00000000000167BA                 db  0Eh
.eh_frame:00000000000167BB                 db  30h ; 0
.eh_frame:00000000000167BC                 db  56h ; V
.eh_frame:00000000000167BD                 db  0Ah
.eh_frame:00000000000167BE                 db  0Eh
.eh_frame:00000000000167BF                 db  28h ; (
.eh_frame:00000000000167C0                 db  46h ; F
.eh_frame:00000000000167C1                 db  0Eh
.eh_frame:00000000000167C2                 db  20h
.eh_frame:00000000000167C3                 db  41h ; A
.eh_frame:00000000000167C4                 db  0Eh
.eh_frame:00000000000167C5                 db  18h
.eh_frame:00000000000167C6                 db  42h ; B
.eh_frame:00000000000167C7                 db  0Eh
.eh_frame:00000000000167C8                 db  10h
.eh_frame:00000000000167C9                 db  42h ; B
.eh_frame:00000000000167CA                 db  0Eh
.eh_frame:00000000000167CB                 db    8
.eh_frame:00000000000167CC                 db  45h ; E
.eh_frame:00000000000167CD                 db  0Bh
.eh_frame:00000000000167CE                 db    2
.eh_frame:00000000000167CF                 db  54h ; T
.eh_frame:00000000000167D0                 db  0Ah
.eh_frame:00000000000167D1                 db  0Eh
.eh_frame:00000000000167D2                 db  28h ; (
.eh_frame:00000000000167D3                 db  43h ; C
.eh_frame:00000000000167D4                 db  0Eh
.eh_frame:00000000000167D5                 db  20h
.eh_frame:00000000000167D6                 db  41h ; A
.eh_frame:00000000000167D7                 db  0Eh
.eh_frame:00000000000167D8                 db  18h
.eh_frame:00000000000167D9                 db  42h ; B
.eh_frame:00000000000167DA                 db  0Eh
.eh_frame:00000000000167DB                 db  10h
.eh_frame:00000000000167DC                 db  42h ; B
.eh_frame:00000000000167DD                 db  0Eh
.eh_frame:00000000000167DE                 db    8
.eh_frame:00000000000167DF                 db  44h ; D
.eh_frame:00000000000167E0                 db  0Bh
.eh_frame:00000000000167E1                 db    0
.eh_frame:00000000000167E2                 db    0
.eh_frame:00000000000167E3                 db    0
.eh_frame:00000000000167E4                 db  64h ; d
.eh_frame:00000000000167E5                 db    0
.eh_frame:00000000000167E6                 db    0
.eh_frame:00000000000167E7                 db    0
.eh_frame:00000000000167E8                 db 0E8h
.eh_frame:00000000000167E9                 db    3
.eh_frame:00000000000167EA                 db    0
.eh_frame:00000000000167EB                 db    0
.eh_frame:00000000000167EC                 db  24h ; $
.eh_frame:00000000000167ED                 db 0EAh
.eh_frame:00000000000167EE                 db 0FEh
.eh_frame:00000000000167EF                 db 0FFh
.eh_frame:00000000000167F0                 db  0Eh
.eh_frame:00000000000167F1                 db    4
.eh_frame:00000000000167F2                 db    0
.eh_frame:00000000000167F3                 db    0
.eh_frame:00000000000167F4                 db    0
.eh_frame:00000000000167F5                 db  42h ; B
.eh_frame:00000000000167F6                 db  0Eh
.eh_frame:00000000000167F7                 db  10h
.eh_frame:00000000000167F8                 db  8Fh
.eh_frame:00000000000167F9                 db    2
.eh_frame:00000000000167FA                 db  42h ; B
.eh_frame:00000000000167FB                 db  0Eh
.eh_frame:00000000000167FC                 db  18h
.eh_frame:00000000000167FD                 db  8Eh
.eh_frame:00000000000167FE                 db    3
.eh_frame:00000000000167FF                 db  42h ; B
.eh_frame:0000000000016800                 db  0Eh
.eh_frame:0000000000016801                 db  20h
.eh_frame:0000000000016802                 db  8Dh
.eh_frame:0000000000016803                 db    4
.eh_frame:0000000000016804                 db  42h ; B
.eh_frame:0000000000016805                 db  0Eh
.eh_frame:0000000000016806                 db  28h ; (
.eh_frame:0000000000016807                 db  8Ch
.eh_frame:0000000000016808                 db    5
.eh_frame:0000000000016809                 db  41h ; A
.eh_frame:000000000001680A                 db  0Eh
.eh_frame:000000000001680B                 db  30h ; 0
.eh_frame:000000000001680C                 db  86h
.eh_frame:000000000001680D                 db    6
.eh_frame:000000000001680E                 db  41h ; A
.eh_frame:000000000001680F                 db  0Eh
.eh_frame:0000000000016810                 db  38h ; 8
.eh_frame:0000000000016811                 db  83h
.eh_frame:0000000000016812                 db    7
.eh_frame:0000000000016813                 db  44h ; D
.eh_frame:0000000000016814                 db  0Eh
.eh_frame:0000000000016815                 db 0B0h
.eh_frame:0000000000016816                 db    1
.eh_frame:0000000000016817                 db    2
.eh_frame:0000000000016818                 db 0FBh
.eh_frame:0000000000016819                 db  0Ah
.eh_frame:000000000001681A                 db  0Eh
.eh_frame:000000000001681B                 db  38h ; 8
.eh_frame:000000000001681C                 db  44h ; D
.eh_frame:000000000001681D                 db  0Eh
.eh_frame:000000000001681E                 db  30h ; 0
.eh_frame:000000000001681F                 db  41h ; A
.eh_frame:0000000000016820                 db  0Eh
.eh_frame:0000000000016821                 db  28h ; (
.eh_frame:0000000000016822                 db  42h ; B
.eh_frame:0000000000016823                 db  0Eh
.eh_frame:0000000000016824                 db  20h
.eh_frame:0000000000016825                 db  42h ; B
.eh_frame:0000000000016826                 db  0Eh
.eh_frame:0000000000016827                 db  18h
.eh_frame:0000000000016828                 db  42h ; B
.eh_frame:0000000000016829                 db  0Eh
.eh_frame:000000000001682A                 db  10h
.eh_frame:000000000001682B                 db  42h ; B
.eh_frame:000000000001682C                 db  0Eh
.eh_frame:000000000001682D                 db    8
.eh_frame:000000000001682E                 db  4Ah ; J
.eh_frame:000000000001682F                 db  0Bh
.eh_frame:0000000000016830                 db    3
.eh_frame:0000000000016831                 db  4Dh ; M
.eh_frame:0000000000016832                 db    1
.eh_frame:0000000000016833                 db  0Ah
.eh_frame:0000000000016834                 db  0Eh
.eh_frame:0000000000016835                 db  38h ; 8
.eh_frame:0000000000016836                 db  41h ; A
.eh_frame:0000000000016837                 db  0Eh
.eh_frame:0000000000016838                 db  30h ; 0
.eh_frame:0000000000016839                 db  41h ; A
.eh_frame:000000000001683A                 db  0Eh
.eh_frame:000000000001683B                 db  28h ; (
.eh_frame:000000000001683C                 db  42h ; B
.eh_frame:000000000001683D                 db  0Eh
.eh_frame:000000000001683E                 db  20h
.eh_frame:000000000001683F                 db  42h ; B
.eh_frame:0000000000016840                 db  0Eh
.eh_frame:0000000000016841                 db  18h
.eh_frame:0000000000016842                 db  42h ; B
.eh_frame:0000000000016843                 db  0Eh
.eh_frame:0000000000016844                 db  10h
.eh_frame:0000000000016845                 db  42h ; B
.eh_frame:0000000000016846                 db  0Eh
.eh_frame:0000000000016847                 db    8
.eh_frame:0000000000016848                 db  49h ; I
.eh_frame:0000000000016849                 db  0Bh
.eh_frame:000000000001684A                 db    0
.eh_frame:000000000001684B                 db    0
.eh_frame:000000000001684C                 db  58h ; X
.eh_frame:000000000001684D                 db    0
.eh_frame:000000000001684E                 db    0
.eh_frame:000000000001684F                 db    0
.eh_frame:0000000000016850                 db  50h ; P
.eh_frame:0000000000016851                 db    4
.eh_frame:0000000000016852                 db    0
.eh_frame:0000000000016853                 db    0
.eh_frame:0000000000016854                 db 0CCh
.eh_frame:0000000000016855                 db 0EDh
.eh_frame:0000000000016856                 db 0FEh
.eh_frame:0000000000016857                 db 0FFh
.eh_frame:0000000000016858                 db 0D0h
.eh_frame:0000000000016859                 db    0
.eh_frame:000000000001685A                 db    0
.eh_frame:000000000001685B                 db    0
.eh_frame:000000000001685C                 db    0
.eh_frame:000000000001685D                 db  42h ; B
.eh_frame:000000000001685E                 db  0Eh
.eh_frame:000000000001685F                 db  10h
.eh_frame:0000000000016860                 db  8Dh
.eh_frame:0000000000016861                 db    2
.eh_frame:0000000000016862                 db  42h ; B
.eh_frame:0000000000016863                 db  0Eh
.eh_frame:0000000000016864                 db  18h
.eh_frame:0000000000016865                 db  8Ch
.eh_frame:0000000000016866                 db    3
.eh_frame:0000000000016867                 db  41h ; A
.eh_frame:0000000000016868                 db  0Eh
.eh_frame:0000000000016869                 db  20h
.eh_frame:000000000001686A                 db  86h
.eh_frame:000000000001686B                 db    4
.eh_frame:000000000001686C                 db  41h ; A
.eh_frame:000000000001686D                 db  0Eh
.eh_frame:000000000001686E                 db  28h ; (
.eh_frame:000000000001686F                 db  83h
.eh_frame:0000000000016870                 db    5
.eh_frame:0000000000016871                 db  47h ; G
.eh_frame:0000000000016872                 db  0Eh
.eh_frame:0000000000016873                 db  30h ; 0
.eh_frame:0000000000016874                 db    2
.eh_frame:0000000000016875                 db  5Eh ; ^
.eh_frame:0000000000016876                 db  0Ah
.eh_frame:0000000000016877                 db  0Eh
.eh_frame:0000000000016878                 db  28h ; (
.eh_frame:0000000000016879                 db  46h ; F
.eh_frame:000000000001687A                 db  0Eh
.eh_frame:000000000001687B                 db  20h
.eh_frame:000000000001687C                 db  41h ; A
.eh_frame:000000000001687D                 db  0Eh
.eh_frame:000000000001687E                 db  18h
.eh_frame:000000000001687F                 db  42h ; B
.eh_frame:0000000000016880                 db  0Eh
.eh_frame:0000000000016881                 db  10h
.eh_frame:0000000000016882                 db  42h ; B
.eh_frame:0000000000016883                 db  0Eh
.eh_frame:0000000000016884                 db    8
.eh_frame:0000000000016885                 db  4Ah ; J
.eh_frame:0000000000016886                 db  0Bh
.eh_frame:0000000000016887                 db  4Ch ; L
.eh_frame:0000000000016888                 db  0Ah
.eh_frame:0000000000016889                 db  0Eh
.eh_frame:000000000001688A                 db  28h ; (
.eh_frame:000000000001688B                 db  48h ; H
.eh_frame:000000000001688C                 db  0Eh
.eh_frame:000000000001688D                 db  20h
.eh_frame:000000000001688E                 db  41h ; A
.eh_frame:000000000001688F                 db  0Eh
.eh_frame:0000000000016890                 db  18h
.eh_frame:0000000000016891                 db  42h ; B
.eh_frame:0000000000016892                 db  0Eh
.eh_frame:0000000000016893                 db  10h
.eh_frame:0000000000016894                 db  42h ; B
.eh_frame:0000000000016895                 db  0Eh
.eh_frame:0000000000016896                 db    8
.eh_frame:0000000000016897                 db  47h ; G
.eh_frame:0000000000016898                 db  0Bh
.eh_frame:0000000000016899                 db  67h ; g
.eh_frame:000000000001689A                 db  0Eh
.eh_frame:000000000001689B                 db  28h ; (
.eh_frame:000000000001689C                 db  43h ; C
.eh_frame:000000000001689D                 db  0Eh
.eh_frame:000000000001689E                 db  20h
.eh_frame:000000000001689F                 db  41h ; A
.eh_frame:00000000000168A0                 db  0Eh
.eh_frame:00000000000168A1                 db  18h
.eh_frame:00000000000168A2                 db  42h ; B
.eh_frame:00000000000168A3                 db  0Eh
.eh_frame:00000000000168A4                 db  10h
.eh_frame:00000000000168A5                 db  42h ; B
.eh_frame:00000000000168A6                 db  0Eh
.eh_frame:00000000000168A7                 db    8
.eh_frame:00000000000168A8                 db  34h ; 4
.eh_frame:00000000000168A9                 db    0
.eh_frame:00000000000168AA                 db    0
.eh_frame:00000000000168AB                 db    0
.eh_frame:00000000000168AC                 db 0ACh
.eh_frame:00000000000168AD                 db    4
.eh_frame:00000000000168AE                 db    0
.eh_frame:00000000000168AF                 db    0
.eh_frame:00000000000168B0                 db  40h ; @
.eh_frame:00000000000168B1                 db 0EEh
.eh_frame:00000000000168B2                 db 0FEh
.eh_frame:00000000000168B3                 db 0FFh
.eh_frame:00000000000168B4                 db  75h ; u
.eh_frame:00000000000168B5                 db    0
.eh_frame:00000000000168B6                 db    0
.eh_frame:00000000000168B7                 db    0
.eh_frame:00000000000168B8                 db    0
.eh_frame:00000000000168B9                 db  42h ; B
.eh_frame:00000000000168BA                 db  0Eh
.eh_frame:00000000000168BB                 db  10h
.eh_frame:00000000000168BC                 db  8Ch
.eh_frame:00000000000168BD                 db    2
.eh_frame:00000000000168BE                 db  41h ; A
.eh_frame:00000000000168BF                 db  0Eh
.eh_frame:00000000000168C0                 db  18h
.eh_frame:00000000000168C1                 db  86h
.eh_frame:00000000000168C2                 db    3
.eh_frame:00000000000168C3                 db  44h ; D
.eh_frame:00000000000168C4                 db  0Eh
.eh_frame:00000000000168C5                 db  20h
.eh_frame:00000000000168C6                 db  83h
.eh_frame:00000000000168C7                 db    4
.eh_frame:00000000000168C8                 db    2
.eh_frame:00000000000168C9                 db  54h ; T
.eh_frame:00000000000168CA                 db  0Ah
.eh_frame:00000000000168CB                 db  0Eh
.eh_frame:00000000000168CC                 db  18h
.eh_frame:00000000000168CD                 db  43h ; C
.eh_frame:00000000000168CE                 db  0Eh
.eh_frame:00000000000168CF                 db  10h
.eh_frame:00000000000168D0                 db  42h ; B
.eh_frame:00000000000168D1                 db  0Eh
.eh_frame:00000000000168D2                 db    8
.eh_frame:00000000000168D3                 db  48h ; H
.eh_frame:00000000000168D4                 db  0Bh
.eh_frame:00000000000168D5                 db  49h ; I
.eh_frame:00000000000168D6                 db  0Eh
.eh_frame:00000000000168D7                 db  18h
.eh_frame:00000000000168D8                 db  41h ; A
.eh_frame:00000000000168D9                 db  0Eh
.eh_frame:00000000000168DA                 db  10h
.eh_frame:00000000000168DB                 db  42h ; B
.eh_frame:00000000000168DC                 db  0Eh
.eh_frame:00000000000168DD                 db    8
.eh_frame:00000000000168DE                 db    0
.eh_frame:00000000000168DF                 db    0
.eh_frame:00000000000168E0                 db  18h
.eh_frame:00000000000168E1                 db    0
.eh_frame:00000000000168E2                 db    0
.eh_frame:00000000000168E3                 db    0
.eh_frame:00000000000168E4                 db 0E4h
.eh_frame:00000000000168E5                 db    4
.eh_frame:00000000000168E6                 db    0
.eh_frame:00000000000168E7                 db    0
.eh_frame:00000000000168E8                 db  88h
.eh_frame:00000000000168E9                 db 0EEh
.eh_frame:00000000000168EA                 db 0FEh
.eh_frame:00000000000168EB                 db 0FFh
.eh_frame:00000000000168EC                 db  2Bh ; +
.eh_frame:00000000000168ED                 db    0
.eh_frame:00000000000168EE                 db    0
.eh_frame:00000000000168EF                 db    0
.eh_frame:00000000000168F0                 db    0
.eh_frame:00000000000168F1                 db  58h ; X
.eh_frame:00000000000168F2                 db  0Eh
.eh_frame:00000000000168F3                 db  10h
.eh_frame:00000000000168F4                 db  83h
.eh_frame:00000000000168F5                 db    2
.eh_frame:00000000000168F6                 db  52h ; R
.eh_frame:00000000000168F7                 db  0Eh
.eh_frame:00000000000168F8                 db    8
.eh_frame:00000000000168F9                 db    0
.eh_frame:00000000000168FA                 db    0
.eh_frame:00000000000168FB                 db    0
.eh_frame:00000000000168FC                 db  18h
.eh_frame:00000000000168FD                 db    0
.eh_frame:00000000000168FE                 db    0
.eh_frame:00000000000168FF                 db    0
.eh_frame:0000000000016900                 db    0
.eh_frame:0000000000016901                 db    5
.eh_frame:0000000000016902                 db    0
.eh_frame:0000000000016903                 db    0
.eh_frame:0000000000016904                 db  9Ch
.eh_frame:0000000000016905                 db 0EEh
.eh_frame:0000000000016906                 db 0FEh
.eh_frame:0000000000016907                 db 0FFh
.eh_frame:0000000000016908                 db  2Bh ; +
.eh_frame:0000000000016909                 db    0
.eh_frame:000000000001690A                 db    0
.eh_frame:000000000001690B                 db    0
.eh_frame:000000000001690C                 db    0
.eh_frame:000000000001690D                 db  58h ; X
.eh_frame:000000000001690E                 db  0Eh
.eh_frame:000000000001690F                 db  10h
.eh_frame:0000000000016910                 db  83h
.eh_frame:0000000000016911                 db    2
.eh_frame:0000000000016912                 db  52h ; R
.eh_frame:0000000000016913                 db  0Eh
.eh_frame:0000000000016914                 db    8
.eh_frame:0000000000016915                 db    0
.eh_frame:0000000000016916                 db    0
.eh_frame:0000000000016917                 db    0
.eh_frame:0000000000016918                 db  18h
.eh_frame:0000000000016919                 db    0
.eh_frame:000000000001691A                 db    0
.eh_frame:000000000001691B                 db    0
.eh_frame:000000000001691C                 db  1Ch
.eh_frame:000000000001691D                 db    5
.eh_frame:000000000001691E                 db    0
.eh_frame:000000000001691F                 db    0
.eh_frame:0000000000016920                 db 0B0h
.eh_frame:0000000000016921                 db 0EEh
.eh_frame:0000000000016922                 db 0FEh
.eh_frame:0000000000016923                 db 0FFh
.eh_frame:0000000000016924                 db  34h ; 4
.eh_frame:0000000000016925                 db    0
.eh_frame:0000000000016926                 db    0
.eh_frame:0000000000016927                 db    0
.eh_frame:0000000000016928                 db    0
.eh_frame:0000000000016929                 db  45h ; E
.eh_frame:000000000001692A                 db  0Eh
.eh_frame:000000000001692B                 db  10h
.eh_frame:000000000001692C                 db  83h
.eh_frame:000000000001692D                 db    2
.eh_frame:000000000001692E                 db  6Eh ; n
.eh_frame:000000000001692F                 db  0Eh
.eh_frame:0000000000016930                 db    8
.eh_frame:0000000000016931                 db    0
.eh_frame:0000000000016932                 db    0
.eh_frame:0000000000016933                 db    0
.eh_frame:0000000000016934                 db  18h
.eh_frame:0000000000016935                 db    0
.eh_frame:0000000000016936                 db    0
.eh_frame:0000000000016937                 db    0
.eh_frame:0000000000016938                 db  38h ; 8
.eh_frame:0000000000016939                 db    5
.eh_frame:000000000001693A                 db    0
.eh_frame:000000000001693B                 db    0
.eh_frame:000000000001693C                 db 0D4h
.eh_frame:000000000001693D                 db 0EEh
.eh_frame:000000000001693E                 db 0FEh
.eh_frame:000000000001693F                 db 0FFh
.eh_frame:0000000000016940                 db  24h ; $
.eh_frame:0000000000016941                 db    0
.eh_frame:0000000000016942                 db    0
.eh_frame:0000000000016943                 db    0
.eh_frame:0000000000016944                 db    0
.eh_frame:0000000000016945                 db  41h ; A
.eh_frame:0000000000016946                 db  0Eh
.eh_frame:0000000000016947                 db  10h
.eh_frame:0000000000016948                 db  83h
.eh_frame:0000000000016949                 db    2
.eh_frame:000000000001694A                 db  62h ; b
.eh_frame:000000000001694B                 db  0Eh
.eh_frame:000000000001694C                 db    8
.eh_frame:000000000001694D                 db    0
.eh_frame:000000000001694E                 db    0
.eh_frame:000000000001694F                 db    0
.eh_frame:0000000000016950                 db  7Ch ; |
.eh_frame:0000000000016951                 db    0
.eh_frame:0000000000016952                 db    0
.eh_frame:0000000000016953                 db    0
.eh_frame:0000000000016954                 db  54h ; T
.eh_frame:0000000000016955                 db    5
.eh_frame:0000000000016956                 db    0
.eh_frame:0000000000016957                 db    0
.eh_frame:0000000000016958                 db 0E8h
.eh_frame:0000000000016959                 db 0EEh
.eh_frame:000000000001695A                 db 0FEh
.eh_frame:000000000001695B                 db 0FFh
.eh_frame:000000000001695C                 db  0Ch
.eh_frame:000000000001695D                 db    2
.eh_frame:000000000001695E                 db    0
.eh_frame:000000000001695F                 db    0
.eh_frame:0000000000016960                 db    0
.eh_frame:0000000000016961                 db  42h ; B
.eh_frame:0000000000016962                 db  0Eh
.eh_frame:0000000000016963                 db  10h
.eh_frame:0000000000016964                 db  8Fh
.eh_frame:0000000000016965                 db    2
.eh_frame:0000000000016966                 db  42h ; B
.eh_frame:0000000000016967                 db  0Eh
.eh_frame:0000000000016968                 db  18h
.eh_frame:0000000000016969                 db  8Eh
.eh_frame:000000000001696A                 db    3
.eh_frame:000000000001696B                 db  42h ; B
.eh_frame:000000000001696C                 db  0Eh
.eh_frame:000000000001696D                 db  20h
.eh_frame:000000000001696E                 db  8Dh
.eh_frame:000000000001696F                 db    4
.eh_frame:0000000000016970                 db  42h ; B
.eh_frame:0000000000016971                 db  0Eh
.eh_frame:0000000000016972                 db  28h ; (
.eh_frame:0000000000016973                 db  8Ch
.eh_frame:0000000000016974                 db    5
.eh_frame:0000000000016975                 db  44h ; D
.eh_frame:0000000000016976                 db  0Eh
.eh_frame:0000000000016977                 db  30h ; 0
.eh_frame:0000000000016978                 db  86h
.eh_frame:0000000000016979                 db    6
.eh_frame:000000000001697A                 db  41h ; A
.eh_frame:000000000001697B                 db  0Eh
.eh_frame:000000000001697C                 db  38h ; 8
.eh_frame:000000000001697D                 db  83h
.eh_frame:000000000001697E                 db    7
.eh_frame:000000000001697F                 db  49h ; I
.eh_frame:0000000000016980                 db  0Eh
.eh_frame:0000000000016981                 db  40h ; @
.eh_frame:0000000000016982                 db    2
.eh_frame:0000000000016983                 db  8Ch
.eh_frame:0000000000016984                 db  0Ah
.eh_frame:0000000000016985                 db  0Eh
.eh_frame:0000000000016986                 db  38h ; 8
.eh_frame:0000000000016987                 db  41h ; A
.eh_frame:0000000000016988                 db  0Eh
.eh_frame:0000000000016989                 db  30h ; 0
.eh_frame:000000000001698A                 db  41h ; A
.eh_frame:000000000001698B                 db  0Eh
.eh_frame:000000000001698C                 db  28h ; (
.eh_frame:000000000001698D                 db  42h ; B
.eh_frame:000000000001698E                 db  0Eh
.eh_frame:000000000001698F                 db  20h
.eh_frame:0000000000016990                 db  42h ; B
.eh_frame:0000000000016991                 db  0Eh
.eh_frame:0000000000016992                 db  18h
.eh_frame:0000000000016993                 db  42h ; B
.eh_frame:0000000000016994                 db  0Eh
.eh_frame:0000000000016995                 db  10h
.eh_frame:0000000000016996                 db  42h ; B
.eh_frame:0000000000016997                 db  0Eh
.eh_frame:0000000000016998                 db    8
.eh_frame:0000000000016999                 db  44h ; D
.eh_frame:000000000001699A                 db  0Bh
.eh_frame:000000000001699B                 db  50h ; P
.eh_frame:000000000001699C                 db  0Ah
.eh_frame:000000000001699D                 db  0Eh
.eh_frame:000000000001699E                 db  38h ; 8
.eh_frame:000000000001699F                 db  46h ; F
.eh_frame:00000000000169A0                 db  0Eh
.eh_frame:00000000000169A1                 db  30h ; 0
.eh_frame:00000000000169A2                 db  41h ; A
.eh_frame:00000000000169A3                 db  0Eh
.eh_frame:00000000000169A4                 db  28h ; (
.eh_frame:00000000000169A5                 db  42h ; B
.eh_frame:00000000000169A6                 db  0Eh
.eh_frame:00000000000169A7                 db  20h
.eh_frame:00000000000169A8                 db  42h ; B
.eh_frame:00000000000169A9                 db  0Eh
.eh_frame:00000000000169AA                 db  18h
.eh_frame:00000000000169AB                 db  42h ; B
.eh_frame:00000000000169AC                 db  0Eh
.eh_frame:00000000000169AD                 db  10h
.eh_frame:00000000000169AE                 db  42h ; B
.eh_frame:00000000000169AF                 db  0Eh
.eh_frame:00000000000169B0                 db    8
.eh_frame:00000000000169B1                 db  41h ; A
.eh_frame:00000000000169B2                 db  0Bh
.eh_frame:00000000000169B3                 db    3
.eh_frame:00000000000169B4                 db    4
.eh_frame:00000000000169B5                 db    1
.eh_frame:00000000000169B6                 db  0Ah
.eh_frame:00000000000169B7                 db  0Eh
.eh_frame:00000000000169B8                 db  38h ; 8
.eh_frame:00000000000169B9                 db  41h ; A
.eh_frame:00000000000169BA                 db  0Eh
.eh_frame:00000000000169BB                 db  30h ; 0
.eh_frame:00000000000169BC                 db  41h ; A
.eh_frame:00000000000169BD                 db  0Eh
.eh_frame:00000000000169BE                 db  28h ; (
.eh_frame:00000000000169BF                 db  42h ; B
.eh_frame:00000000000169C0                 db  0Eh
.eh_frame:00000000000169C1                 db  20h
.eh_frame:00000000000169C2                 db  44h ; D
.eh_frame:00000000000169C3                 db  0Eh
.eh_frame:00000000000169C4                 db  18h
.eh_frame:00000000000169C5                 db  42h ; B
.eh_frame:00000000000169C6                 db  0Eh
.eh_frame:00000000000169C7                 db  10h
.eh_frame:00000000000169C8                 db  42h ; B
.eh_frame:00000000000169C9                 db  0Eh
.eh_frame:00000000000169CA                 db    8
.eh_frame:00000000000169CB                 db  48h ; H
.eh_frame:00000000000169CC                 db  0Bh
.eh_frame:00000000000169CD                 db    0
.eh_frame:00000000000169CE                 db    0
.eh_frame:00000000000169CF                 db    0
.eh_frame:00000000000169D0                 db  1Ch
.eh_frame:00000000000169D1                 db    0
.eh_frame:00000000000169D2                 db    0
.eh_frame:00000000000169D3                 db    0
.eh_frame:00000000000169D4                 db 0D4h
.eh_frame:00000000000169D5                 db    5
.eh_frame:00000000000169D6                 db    0
.eh_frame:00000000000169D7                 db    0
.eh_frame:00000000000169D8                 db  78h ; x
.eh_frame:00000000000169D9                 db 0F0h
.eh_frame:00000000000169DA                 db 0FEh
.eh_frame:00000000000169DB                 db 0FFh
.eh_frame:00000000000169DC                 db  2Ah ; *
.eh_frame:00000000000169DD                 db    0
.eh_frame:00000000000169DE                 db    0
.eh_frame:00000000000169DF                 db    0
.eh_frame:00000000000169E0                 db    0
.eh_frame:00000000000169E1                 db  41h ; A
.eh_frame:00000000000169E2                 db  0Eh
.eh_frame:00000000000169E3                 db  10h
.eh_frame:00000000000169E4                 db  83h
.eh_frame:00000000000169E5                 db    2
.eh_frame:00000000000169E6                 db  4Eh ; N
.eh_frame:00000000000169E7                 db  0Ah
.eh_frame:00000000000169E8                 db  0Eh
.eh_frame:00000000000169E9                 db    8
.eh_frame:00000000000169EA                 db  41h ; A
.eh_frame:00000000000169EB                 db  0Bh
.eh_frame:00000000000169EC                 db  59h ; Y
.eh_frame:00000000000169ED                 db  0Eh
.eh_frame:00000000000169EE                 db    8
.eh_frame:00000000000169EF                 db    0
.eh_frame:00000000000169F0                 db  2Ch ; ,
.eh_frame:00000000000169F1                 db    0
.eh_frame:00000000000169F2                 db    0
.eh_frame:00000000000169F3                 db    0
.eh_frame:00000000000169F4                 db 0F4h
.eh_frame:00000000000169F5                 db    5
.eh_frame:00000000000169F6                 db    0
.eh_frame:00000000000169F7                 db    0
.eh_frame:00000000000169F8                 db  88h
.eh_frame:00000000000169F9                 db 0F0h
.eh_frame:00000000000169FA                 db 0FEh
.eh_frame:00000000000169FB                 db 0FFh
.eh_frame:00000000000169FC                 db  0Ch
.eh_frame:00000000000169FD                 db  41h ; A
.eh_frame:00000000000169FE                 db    0
.eh_frame:00000000000169FF                 db    0
.eh_frame:0000000000016A00                 db    0
.eh_frame:0000000000016A01                 db  41h ; A
.eh_frame:0000000000016A02                 db  0Eh
.eh_frame:0000000000016A03                 db  10h
.eh_frame:0000000000016A04                 db  86h
.eh_frame:0000000000016A05                 db    2
.eh_frame:0000000000016A06                 db  43h ; C
.eh_frame:0000000000016A07                 db  0Dh
.eh_frame:0000000000016A08                 db    6
.eh_frame:0000000000016A09                 db  48h ; H
.eh_frame:0000000000016A0A                 db  8Fh
.eh_frame:0000000000016A0B                 db    3
.eh_frame:0000000000016A0C                 db  8Eh
.eh_frame:0000000000016A0D                 db    4
.eh_frame:0000000000016A0E                 db  8Dh
.eh_frame:0000000000016A0F                 db    5
.eh_frame:0000000000016A10                 db  8Ch
.eh_frame:0000000000016A11                 db    6
.eh_frame:0000000000016A12                 db  44h ; D
.eh_frame:0000000000016A13                 db  83h
.eh_frame:0000000000016A14                 db    7
.eh_frame:0000000000016A15                 db    3
.eh_frame:0000000000016A16                 db  5Ah ; Z
.eh_frame:0000000000016A17                 db    8
.eh_frame:0000000000016A18                 db  0Ah
.eh_frame:0000000000016A19                 db  0Ch
.eh_frame:0000000000016A1A                 db    7
.eh_frame:0000000000016A1B                 db    8
.eh_frame:0000000000016A1C                 db  46h ; F
.eh_frame:0000000000016A1D                 db  0Bh
.eh_frame:0000000000016A1E                 db    0
.eh_frame:0000000000016A1F                 db    0
.eh_frame:0000000000016A20                 db  2Ch ; ,
.eh_frame:0000000000016A21                 db    0
.eh_frame:0000000000016A22                 db    0
.eh_frame:0000000000016A23                 db    0
.eh_frame:0000000000016A24                 db  24h ; $
.eh_frame:0000000000016A25                 db    6
.eh_frame:0000000000016A26                 db    0
.eh_frame:0000000000016A27                 db    0
.eh_frame:0000000000016A28                 db  68h ; h
.eh_frame:0000000000016A29                 db  31h ; 1
.eh_frame:0000000000016A2A                 db 0FFh
.eh_frame:0000000000016A2B                 db 0FFh
.eh_frame:0000000000016A2C                 db  65h ; e
.eh_frame:0000000000016A2D                 db    1
.eh_frame:0000000000016A2E                 db    0
.eh_frame:0000000000016A2F                 db    0
.eh_frame:0000000000016A30                 db    0
.eh_frame:0000000000016A31                 db  44h ; D
.eh_frame:0000000000016A32                 db  0Eh
.eh_frame:0000000000016A33                 db  20h
.eh_frame:0000000000016A34                 db    2
.eh_frame:0000000000016A35                 db  59h ; Y
.eh_frame:0000000000016A36                 db  0Eh
.eh_frame:0000000000016A37                 db  28h ; (
.eh_frame:0000000000016A38                 db  45h ; E
.eh_frame:0000000000016A39                 db  0Eh
.eh_frame:0000000000016A3A                 db  30h ; 0
.eh_frame:0000000000016A3B                 db  5Ch ; \
.eh_frame:0000000000016A3C                 db  0Eh
.eh_frame:0000000000016A3D                 db  38h ; 8
.eh_frame:0000000000016A3E                 db  42h ; B
.eh_frame:0000000000016A3F                 db  0Eh
.eh_frame:0000000000016A40                 db  40h ; @
.eh_frame:0000000000016A41                 db  49h ; I
.eh_frame:0000000000016A42                 db  0Eh
.eh_frame:0000000000016A43                 db  20h
.eh_frame:0000000000016A44                 db  54h ; T
.eh_frame:0000000000016A45                 db  0Ah
.eh_frame:0000000000016A46                 db  0Eh
.eh_frame:0000000000016A47                 db    8
.eh_frame:0000000000016A48                 db  43h ; C
.eh_frame:0000000000016A49                 db  0Bh
.eh_frame:0000000000016A4A                 db    0
.eh_frame:0000000000016A4B                 db    0
.eh_frame:0000000000016A4C                 db    0
.eh_frame:0000000000016A4D                 db    0
.eh_frame:0000000000016A4E                 db    0
.eh_frame:0000000000016A4F                 db    0
.eh_frame:0000000000016A50                 db  10h
.eh_frame:0000000000016A51                 db    0
.eh_frame:0000000000016A52                 db    0
.eh_frame:0000000000016A53                 db    0
.eh_frame:0000000000016A54                 db  54h ; T
.eh_frame:0000000000016A55                 db    6
.eh_frame:0000000000016A56                 db    0
.eh_frame:0000000000016A57                 db    0
.eh_frame:0000000000016A58                 db 0A8h
.eh_frame:0000000000016A59                 db  32h ; 2
.eh_frame:0000000000016A5A                 db 0FFh
.eh_frame:0000000000016A5B                 db 0FFh
.eh_frame:0000000000016A5C                 db  0Ch
.eh_frame:0000000000016A5D                 db    0
.eh_frame:0000000000016A5E                 db    0
.eh_frame:0000000000016A5F                 db    0
.eh_frame:0000000000016A60                 db    0
.eh_frame:0000000000016A61                 db    0
.eh_frame:0000000000016A62                 db    0
.eh_frame:0000000000016A63                 db    0
.eh_frame:0000000000016A64                 db  10h
.eh_frame:0000000000016A65                 db    0
.eh_frame:0000000000016A66                 db    0
.eh_frame:0000000000016A67                 db    0
.eh_frame:0000000000016A68                 db  68h ; h
.eh_frame:0000000000016A69                 db    6
.eh_frame:0000000000016A6A                 db    0
.eh_frame:0000000000016A6B                 db    0
.eh_frame:0000000000016A6C                 db 0A4h
.eh_frame:0000000000016A6D                 db  32h ; 2
.eh_frame:0000000000016A6E                 db 0FFh
.eh_frame:0000000000016A6F                 db 0FFh
.eh_frame:0000000000016A70                 db  1Ch
.eh_frame:0000000000016A71                 db    0
.eh_frame:0000000000016A72                 db    0
.eh_frame:0000000000016A73                 db    0
.eh_frame:0000000000016A74                 db    0
.eh_frame:0000000000016A75                 db    0
.eh_frame:0000000000016A76                 db    0
.eh_frame:0000000000016A77                 db    0
.eh_frame:0000000000016A78                 db  18h
.eh_frame:0000000000016A79                 db    0
.eh_frame:0000000000016A7A                 db    0
.eh_frame:0000000000016A7B                 db    0
.eh_frame:0000000000016A7C                 db  7Ch ; |
.eh_frame:0000000000016A7D                 db    6
.eh_frame:0000000000016A7E                 db    0
.eh_frame:0000000000016A7F                 db    0
.eh_frame:0000000000016A80                 db 0B0h
.eh_frame:0000000000016A81                 db  32h ; 2
.eh_frame:0000000000016A82                 db 0FFh
.eh_frame:0000000000016A83                 db 0FFh
.eh_frame:0000000000016A84                 db  16h
.eh_frame:0000000000016A85                 db    0
.eh_frame:0000000000016A86                 db    0
.eh_frame:0000000000016A87                 db    0
.eh_frame:0000000000016A88                 db    0
.eh_frame:0000000000016A89                 db  41h ; A
.eh_frame:0000000000016A8A                 db  0Eh
.eh_frame:0000000000016A8B                 db  10h
.eh_frame:0000000000016A8C                 db  83h
.eh_frame:0000000000016A8D                 db    2
.eh_frame:0000000000016A8E                 db  50h ; P
.eh_frame:0000000000016A8F                 db  0Eh
.eh_frame:0000000000016A90                 db    8
.eh_frame:0000000000016A91                 db    0
.eh_frame:0000000000016A92                 db    0
.eh_frame:0000000000016A93                 db    0
.eh_frame:0000000000016A94                 db  20h
.eh_frame:0000000000016A95                 db    0
.eh_frame:0000000000016A96                 db    0
.eh_frame:0000000000016A97                 db    0
.eh_frame:0000000000016A98                 db  98h
.eh_frame:0000000000016A99                 db    6
.eh_frame:0000000000016A9A                 db    0
.eh_frame:0000000000016A9B                 db    0
.eh_frame:0000000000016A9C                 db 0B4h
.eh_frame:0000000000016A9D                 db  32h ; 2
.eh_frame:0000000000016A9E                 db 0FFh
.eh_frame:0000000000016A9F                 db 0FFh
.eh_frame:0000000000016AA0                 db  6Ah ; j
.eh_frame:0000000000016AA1                 db    0
.eh_frame:0000000000016AA2                 db    0
.eh_frame:0000000000016AA3                 db    0
.eh_frame:0000000000016AA4                 db    0
.eh_frame:0000000000016AA5                 db  41h ; A
.eh_frame:0000000000016AA6                 db  0Eh
.eh_frame:0000000000016AA7                 db  10h
.eh_frame:0000000000016AA8                 db  83h
.eh_frame:0000000000016AA9                 db    2
.eh_frame:0000000000016AAA                 db  44h ; D
.eh_frame:0000000000016AAB                 db  0Eh
.eh_frame:0000000000016AAC                 db  30h ; 0
.eh_frame:0000000000016AAD                 db    2
.eh_frame:0000000000016AAE                 db  5Eh ; ^
.eh_frame:0000000000016AAF                 db  0Ah
.eh_frame:0000000000016AB0                 db  0Eh
.eh_frame:0000000000016AB1                 db  10h
.eh_frame:0000000000016AB2                 db  41h ; A
.eh_frame:0000000000016AB3                 db  0Eh
.eh_frame:0000000000016AB4                 db    8
.eh_frame:0000000000016AB5                 db  41h ; A
.eh_frame:0000000000016AB6                 db  0Bh
.eh_frame:0000000000016AB7                 db    0
.eh_frame:0000000000016AB8                 db  18h
.eh_frame:0000000000016AB9                 db    0
.eh_frame:0000000000016ABA                 db    0
.eh_frame:0000000000016ABB                 db    0
.eh_frame:0000000000016ABC                 db 0BCh
.eh_frame:0000000000016ABD                 db    6
.eh_frame:0000000000016ABE                 db    0
.eh_frame:0000000000016ABF                 db    0
.eh_frame:0000000000016AC0                 db    0
.eh_frame:0000000000016AC1                 db  33h ; 3
.eh_frame:0000000000016AC2                 db 0FFh
.eh_frame:0000000000016AC3                 db 0FFh
.eh_frame:0000000000016AC4                 db  59h ; Y
.eh_frame:0000000000016AC5                 db    0
.eh_frame:0000000000016AC6                 db    0
.eh_frame:0000000000016AC7                 db    0
.eh_frame:0000000000016AC8                 db    0
.eh_frame:0000000000016AC9                 db  44h ; D
.eh_frame:0000000000016ACA                 db  0Eh
.eh_frame:0000000000016ACB                 db  30h ; 0
.eh_frame:0000000000016ACC                 db    2
.eh_frame:0000000000016ACD                 db  45h ; E
.eh_frame:0000000000016ACE                 db  0Ah
.eh_frame:0000000000016ACF                 db  0Eh
.eh_frame:0000000000016AD0                 db    8
.eh_frame:0000000000016AD1                 db  47h ; G
.eh_frame:0000000000016AD2                 db  0Bh
.eh_frame:0000000000016AD3                 db    0
.eh_frame:0000000000016AD4                 db  38h ; 8
.eh_frame:0000000000016AD5                 db    0
.eh_frame:0000000000016AD6                 db    0
.eh_frame:0000000000016AD7                 db    0
.eh_frame:0000000000016AD8                 db 0D8h
.eh_frame:0000000000016AD9                 db    6
.eh_frame:0000000000016ADA                 db    0
.eh_frame:0000000000016ADB                 db    0
.eh_frame:0000000000016ADC                 db  44h ; D
.eh_frame:0000000000016ADD                 db  33h ; 3
.eh_frame:0000000000016ADE                 db 0FFh
.eh_frame:0000000000016ADF                 db 0FFh
.eh_frame:0000000000016AE0                 db  79h ; y
.eh_frame:0000000000016AE1                 db    0
.eh_frame:0000000000016AE2                 db    0
.eh_frame:0000000000016AE3                 db    0
.eh_frame:0000000000016AE4                 db    0
.eh_frame:0000000000016AE5                 db  42h ; B
.eh_frame:0000000000016AE6                 db  0Eh
.eh_frame:0000000000016AE7                 db  10h
.eh_frame:0000000000016AE8                 db  8Dh
.eh_frame:0000000000016AE9                 db    2
.eh_frame:0000000000016AEA                 db  42h ; B
.eh_frame:0000000000016AEB                 db  0Eh
.eh_frame:0000000000016AEC                 db  18h
.eh_frame:0000000000016AED                 db  8Ch
.eh_frame:0000000000016AEE                 db    3
.eh_frame:0000000000016AEF                 db  44h ; D
.eh_frame:0000000000016AF0                 db  0Eh
.eh_frame:0000000000016AF1                 db  20h
.eh_frame:0000000000016AF2                 db  86h
.eh_frame:0000000000016AF3                 db    4
.eh_frame:0000000000016AF4                 db  41h ; A
.eh_frame:0000000000016AF5                 db  0Eh
.eh_frame:0000000000016AF6                 db  28h ; (
.eh_frame:0000000000016AF7                 db  83h
.eh_frame:0000000000016AF8                 db    5
.eh_frame:0000000000016AF9                 db  4Fh ; O
.eh_frame:0000000000016AFA                 db  0Eh
.eh_frame:0000000000016AFB                 db  30h ; 0
.eh_frame:0000000000016AFC                 db    2
.eh_frame:0000000000016AFD                 db  50h ; P
.eh_frame:0000000000016AFE                 db  0Ah
.eh_frame:0000000000016AFF                 db  0Eh
.eh_frame:0000000000016B00                 db  28h ; (
.eh_frame:0000000000016B01                 db  41h ; A
.eh_frame:0000000000016B02                 db  0Eh
.eh_frame:0000000000016B03                 db  20h
.eh_frame:0000000000016B04                 db  41h ; A
.eh_frame:0000000000016B05                 db  0Eh
.eh_frame:0000000000016B06                 db  18h
.eh_frame:0000000000016B07                 db  42h ; B
.eh_frame:0000000000016B08                 db  0Eh
.eh_frame:0000000000016B09                 db  10h
.eh_frame:0000000000016B0A                 db  42h ; B
.eh_frame:0000000000016B0B                 db  0Eh
.eh_frame:0000000000016B0C                 db    8
.eh_frame:0000000000016B0D                 db  42h ; B
.eh_frame:0000000000016B0E                 db  0Bh
.eh_frame:0000000000016B0F                 db    0
.eh_frame:0000000000016B10                 db  18h
.eh_frame:0000000000016B11                 db    0
.eh_frame:0000000000016B12                 db    0
.eh_frame:0000000000016B13                 db    0
.eh_frame:0000000000016B14                 db  14h
.eh_frame:0000000000016B15                 db    7
.eh_frame:0000000000016B16                 db    0
.eh_frame:0000000000016B17                 db    0
.eh_frame:0000000000016B18                 db  88h
.eh_frame:0000000000016B19                 db  33h ; 3
.eh_frame:0000000000016B1A                 db 0FFh
.eh_frame:0000000000016B1B                 db 0FFh
.eh_frame:0000000000016B1C                 db  3Bh ; ;
.eh_frame:0000000000016B1D                 db    0
.eh_frame:0000000000016B1E                 db    0
.eh_frame:0000000000016B1F                 db    0
.eh_frame:0000000000016B20                 db    0
.eh_frame:0000000000016B21                 db  59h ; Y
.eh_frame:0000000000016B22                 db  0Eh
.eh_frame:0000000000016B23                 db  10h
.eh_frame:0000000000016B24                 db  5Ch ; \
.eh_frame:0000000000016B25                 db  0Ah
.eh_frame:0000000000016B26                 db  0Eh
.eh_frame:0000000000016B27                 db    8
.eh_frame:0000000000016B28                 db  41h ; A
.eh_frame:0000000000016B29                 db  0Bh
.eh_frame:0000000000016B2A                 db    0
.eh_frame:0000000000016B2B                 db    0
.eh_frame:0000000000016B2C                 db  10h
.eh_frame:0000000000016B2D                 db    0
.eh_frame:0000000000016B2E                 db    0
.eh_frame:0000000000016B2F                 db    0
.eh_frame:0000000000016B30                 db  30h ; 0
.eh_frame:0000000000016B31                 db    7
.eh_frame:0000000000016B32                 db    0
.eh_frame:0000000000016B33                 db    0
.eh_frame:0000000000016B34                 db 0ACh
.eh_frame:0000000000016B35                 db  33h ; 3
.eh_frame:0000000000016B36                 db 0FFh
.eh_frame:0000000000016B37                 db 0FFh
.eh_frame:0000000000016B38                 db  0Ch
.eh_frame:0000000000016B39                 db    0
.eh_frame:0000000000016B3A                 db    0
.eh_frame:0000000000016B3B                 db    0
.eh_frame:0000000000016B3C                 db    0
.eh_frame:0000000000016B3D                 db    0
.eh_frame:0000000000016B3E                 db    0
.eh_frame:0000000000016B3F                 db    0
.eh_frame:0000000000016B40                 db  10h
.eh_frame:0000000000016B41                 db    0
.eh_frame:0000000000016B42                 db    0
.eh_frame:0000000000016B43                 db    0
.eh_frame:0000000000016B44                 db  44h ; D
.eh_frame:0000000000016B45                 db    7
.eh_frame:0000000000016B46                 db    0
.eh_frame:0000000000016B47                 db    0
.eh_frame:0000000000016B48                 db 0A8h
.eh_frame:0000000000016B49                 db  33h ; 3
.eh_frame:0000000000016B4A                 db 0FFh
.eh_frame:0000000000016B4B                 db 0FFh
.eh_frame:0000000000016B4C                 db  2Ah ; *
.eh_frame:0000000000016B4D                 db    0
.eh_frame:0000000000016B4E                 db    0
.eh_frame:0000000000016B4F                 db    0
.eh_frame:0000000000016B50                 db    0
.eh_frame:0000000000016B51                 db    0
.eh_frame:0000000000016B52                 db    0
.eh_frame:0000000000016B53                 db    0
.eh_frame:0000000000016B54                 db  50h ; P
.eh_frame:0000000000016B55                 db    0
.eh_frame:0000000000016B56                 db    0
.eh_frame:0000000000016B57                 db    0
.eh_frame:0000000000016B58                 db  58h ; X
.eh_frame:0000000000016B59                 db    7
.eh_frame:0000000000016B5A                 db    0
.eh_frame:0000000000016B5B                 db    0
.eh_frame:0000000000016B5C                 db 0C4h
.eh_frame:0000000000016B5D                 db  33h ; 3
.eh_frame:0000000000016B5E                 db 0FFh
.eh_frame:0000000000016B5F                 db 0FFh
.eh_frame:0000000000016B60                 db  0Dh
.eh_frame:0000000000016B61                 db    3
.eh_frame:0000000000016B62                 db    0
.eh_frame:0000000000016B63                 db    0
.eh_frame:0000000000016B64                 db    0
.eh_frame:0000000000016B65                 db  42h ; B
.eh_frame:0000000000016B66                 db  0Eh
.eh_frame:0000000000016B67                 db  10h
.eh_frame:0000000000016B68                 db  8Fh
.eh_frame:0000000000016B69                 db    2
.eh_frame:0000000000016B6A                 db  42h ; B
.eh_frame:0000000000016B6B                 db  0Eh
.eh_frame:0000000000016B6C                 db  18h
.eh_frame:0000000000016B6D                 db  8Eh
.eh_frame:0000000000016B6E                 db    3
.eh_frame:0000000000016B6F                 db  45h ; E
.eh_frame:0000000000016B70                 db  0Eh
.eh_frame:0000000000016B71                 db  20h
.eh_frame:0000000000016B72                 db  8Dh
.eh_frame:0000000000016B73                 db    4
.eh_frame:0000000000016B74                 db  42h ; B
.eh_frame:0000000000016B75                 db  0Eh
.eh_frame:0000000000016B76                 db  28h ; (
.eh_frame:0000000000016B77                 db  8Ch
.eh_frame:0000000000016B78                 db    5
.eh_frame:0000000000016B79                 db  44h ; D
.eh_frame:0000000000016B7A                 db  0Eh
.eh_frame:0000000000016B7B                 db  30h ; 0
.eh_frame:0000000000016B7C                 db  86h
.eh_frame:0000000000016B7D                 db    6
.eh_frame:0000000000016B7E                 db  41h ; A
.eh_frame:0000000000016B7F                 db  0Eh
.eh_frame:0000000000016B80                 db  38h ; 8
.eh_frame:0000000000016B81                 db  83h
.eh_frame:0000000000016B82                 db    7
.eh_frame:0000000000016B83                 db  51h ; Q
.eh_frame:0000000000016B84                 db  0Eh
.eh_frame:0000000000016B85                 db 0D0h
.eh_frame:0000000000016B86                 db  20h
.eh_frame:0000000000016B87                 db    3
.eh_frame:0000000000016B88                 db  5Dh ; ]
.eh_frame:0000000000016B89                 db    1
.eh_frame:0000000000016B8A                 db  0Ah
.eh_frame:0000000000016B8B                 db  0Eh
.eh_frame:0000000000016B8C                 db  38h ; 8
.eh_frame:0000000000016B8D                 db  41h ; A
.eh_frame:0000000000016B8E                 db  0Eh
.eh_frame:0000000000016B8F                 db  30h ; 0
.eh_frame:0000000000016B90                 db  41h ; A
.eh_frame:0000000000016B91                 db  0Eh
.eh_frame:0000000000016B92                 db  28h ; (
.eh_frame:0000000000016B93                 db  42h ; B
.eh_frame:0000000000016B94                 db  0Eh
.eh_frame:0000000000016B95                 db  20h
.eh_frame:0000000000016B96                 db  42h ; B
.eh_frame:0000000000016B97                 db  0Eh
.eh_frame:0000000000016B98                 db  18h
.eh_frame:0000000000016B99                 db  42h ; B
.eh_frame:0000000000016B9A                 db  0Eh
.eh_frame:0000000000016B9B                 db  10h
.eh_frame:0000000000016B9C                 db  42h ; B
.eh_frame:0000000000016B9D                 db  0Eh
.eh_frame:0000000000016B9E                 db    8
.eh_frame:0000000000016B9F                 db  48h ; H
.eh_frame:0000000000016BA0                 db  0Bh
.eh_frame:0000000000016BA1                 db    0
.eh_frame:0000000000016BA2                 db    0
.eh_frame:0000000000016BA3                 db    0
.eh_frame:0000000000016BA4                 db    0
.eh_frame:0000000000016BA5                 db    0
.eh_frame:0000000000016BA6                 db    0
.eh_frame:0000000000016BA7                 db    0
.eh_frame:0000000000016BA8                 db  10h
.eh_frame:0000000000016BA9                 db    0
.eh_frame:0000000000016BAA                 db    0
.eh_frame:0000000000016BAB                 db    0
.eh_frame:0000000000016BAC                 db 0ACh
.eh_frame:0000000000016BAD                 db    7
.eh_frame:0000000000016BAE                 db    0
.eh_frame:0000000000016BAF                 db    0
.eh_frame:0000000000016BB0                 db  80h
.eh_frame:0000000000016BB1                 db  36h ; 6
.eh_frame:0000000000016BB2                 db 0FFh
.eh_frame:0000000000016BB3                 db 0FFh
.eh_frame:0000000000016BB4                 db  18h
.eh_frame:0000000000016BB5                 db    0
.eh_frame:0000000000016BB6                 db    0
.eh_frame:0000000000016BB7                 db    0
.eh_frame:0000000000016BB8                 db    0
.eh_frame:0000000000016BB9                 db    0
.eh_frame:0000000000016BBA                 db    0
.eh_frame:0000000000016BBB                 db    0
.eh_frame:0000000000016BBC                 db  28h ; (
.eh_frame:0000000000016BBD                 db    0
.eh_frame:0000000000016BBE                 db    0
.eh_frame:0000000000016BBF                 db    0
.eh_frame:0000000000016BC0                 db 0C0h
.eh_frame:0000000000016BC1                 db    7
.eh_frame:0000000000016BC2                 db    0
.eh_frame:0000000000016BC3                 db    0
.eh_frame:0000000000016BC4                 db  8Ch
.eh_frame:0000000000016BC5                 db  36h ; 6
.eh_frame:0000000000016BC6                 db 0FFh
.eh_frame:0000000000016BC7                 db 0FFh
.eh_frame:0000000000016BC8                 db  58h ; X
.eh_frame:0000000000016BC9                 db    0
.eh_frame:0000000000016BCA                 db    0
.eh_frame:0000000000016BCB                 db    0
.eh_frame:0000000000016BCC                 db    0
.eh_frame:0000000000016BCD                 db  42h ; B
.eh_frame:0000000000016BCE                 db  0Eh
.eh_frame:0000000000016BCF                 db  10h
.eh_frame:0000000000016BD0                 db  8Ch
.eh_frame:0000000000016BD1                 db    2
.eh_frame:0000000000016BD2                 db  41h ; A
.eh_frame:0000000000016BD3                 db  0Eh
.eh_frame:0000000000016BD4                 db  18h
.eh_frame:0000000000016BD5                 db  86h
.eh_frame:0000000000016BD6                 db    3
.eh_frame:0000000000016BD7                 db  44h ; D
.eh_frame:0000000000016BD8                 db  0Eh
.eh_frame:0000000000016BD9                 db  20h
.eh_frame:0000000000016BDA                 db  83h
.eh_frame:0000000000016BDB                 db    4
.eh_frame:0000000000016BDC                 db    2
.eh_frame:0000000000016BDD                 db  4Dh ; M
.eh_frame:0000000000016BDE                 db  0Eh
.eh_frame:0000000000016BDF                 db  18h
.eh_frame:0000000000016BE0                 db  41h ; A
.eh_frame:0000000000016BE1                 db  0Eh
.eh_frame:0000000000016BE2                 db  10h
.eh_frame:0000000000016BE3                 db  42h ; B
.eh_frame:0000000000016BE4                 db  0Eh
.eh_frame:0000000000016BE5                 db    8
.eh_frame:0000000000016BE6                 db    0
.eh_frame:0000000000016BE7                 db    0
.eh_frame:0000000000016BE8                 db  10h
.eh_frame:0000000000016BE9                 db    0
.eh_frame:0000000000016BEA                 db    0
.eh_frame:0000000000016BEB                 db    0
.eh_frame:0000000000016BEC                 db 0ECh
.eh_frame:0000000000016BED                 db    7
.eh_frame:0000000000016BEE                 db    0
.eh_frame:0000000000016BEF                 db    0
.eh_frame:0000000000016BF0                 db 0C0h
.eh_frame:0000000000016BF1                 db  36h ; 6
.eh_frame:0000000000016BF2                 db 0FFh
.eh_frame:0000000000016BF3                 db 0FFh
.eh_frame:0000000000016BF4                 db  11h
.eh_frame:0000000000016BF5                 db    0
.eh_frame:0000000000016BF6                 db    0
.eh_frame:0000000000016BF7                 db    0
.eh_frame:0000000000016BF8                 db    0
.eh_frame:0000000000016BF9                 db    0
.eh_frame:0000000000016BFA                 db    0
.eh_frame:0000000000016BFB                 db    0
.eh_frame:0000000000016BFC                 db  48h ; H
.eh_frame:0000000000016BFD                 db    0
.eh_frame:0000000000016BFE                 db    0
.eh_frame:0000000000016BFF                 db    0
.eh_frame:0000000000016C00                 db    0
.eh_frame:0000000000016C01                 db    8
.eh_frame:0000000000016C02                 db    0
.eh_frame:0000000000016C03                 db    0
.eh_frame:0000000000016C04                 db 0CCh
.eh_frame:0000000000016C05                 db  36h ; 6
.eh_frame:0000000000016C06                 db 0FFh
.eh_frame:0000000000016C07                 db 0FFh
.eh_frame:0000000000016C08                 db  61h ; a
.eh_frame:0000000000016C09                 db    1
.eh_frame:0000000000016C0A                 db    0
.eh_frame:0000000000016C0B                 db    0
.eh_frame:0000000000016C0C                 db    0
.eh_frame:0000000000016C0D                 db  42h ; B
.eh_frame:0000000000016C0E                 db  0Eh
.eh_frame:0000000000016C0F                 db  10h
.eh_frame:0000000000016C10                 db  8Fh
.eh_frame:0000000000016C11                 db    2
.eh_frame:0000000000016C12                 db  42h ; B
.eh_frame:0000000000016C13                 db  0Eh
.eh_frame:0000000000016C14                 db  18h
.eh_frame:0000000000016C15                 db  8Eh
.eh_frame:0000000000016C16                 db    3
.eh_frame:0000000000016C17                 db  45h ; E
.eh_frame:0000000000016C18                 db  0Eh
.eh_frame:0000000000016C19                 db  20h
.eh_frame:0000000000016C1A                 db  8Dh
.eh_frame:0000000000016C1B                 db    4
.eh_frame:0000000000016C1C                 db  42h ; B
.eh_frame:0000000000016C1D                 db  0Eh
.eh_frame:0000000000016C1E                 db  28h ; (
.eh_frame:0000000000016C1F                 db  8Ch
.eh_frame:0000000000016C20                 db    5
.eh_frame:0000000000016C21                 db  44h ; D
.eh_frame:0000000000016C22                 db  0Eh
.eh_frame:0000000000016C23                 db  30h ; 0
.eh_frame:0000000000016C24                 db  86h
.eh_frame:0000000000016C25                 db    6
.eh_frame:0000000000016C26                 db  41h ; A
.eh_frame:0000000000016C27                 db  0Eh
.eh_frame:0000000000016C28                 db  38h ; 8
.eh_frame:0000000000016C29                 db  83h
.eh_frame:0000000000016C2A                 db    7
.eh_frame:0000000000016C2B                 db  4Fh ; O
.eh_frame:0000000000016C2C                 db  0Eh
.eh_frame:0000000000016C2D                 db  80h
.eh_frame:0000000000016C2E                 db    3
.eh_frame:0000000000016C2F                 db    2
.eh_frame:0000000000016C30                 db 0C1h
.eh_frame:0000000000016C31                 db  0Ah
.eh_frame:0000000000016C32                 db  0Eh
.eh_frame:0000000000016C33                 db  38h ; 8
.eh_frame:0000000000016C34                 db  41h ; A
.eh_frame:0000000000016C35                 db  0Eh
.eh_frame:0000000000016C36                 db  30h ; 0
.eh_frame:0000000000016C37                 db  41h ; A
.eh_frame:0000000000016C38                 db  0Eh
.eh_frame:0000000000016C39                 db  28h ; (
.eh_frame:0000000000016C3A                 db  42h ; B
.eh_frame:0000000000016C3B                 db  0Eh
.eh_frame:0000000000016C3C                 db  20h
.eh_frame:0000000000016C3D                 db  42h ; B
.eh_frame:0000000000016C3E                 db  0Eh
.eh_frame:0000000000016C3F                 db  18h
.eh_frame:0000000000016C40                 db  42h ; B
.eh_frame:0000000000016C41                 db  0Eh
.eh_frame:0000000000016C42                 db  10h
.eh_frame:0000000000016C43                 db  42h ; B
.eh_frame:0000000000016C44                 db  0Eh
.eh_frame:0000000000016C45                 db    8
.eh_frame:0000000000016C46                 db  46h ; F
.eh_frame:0000000000016C47                 db  0Bh
.eh_frame:0000000000016C48                 db  44h ; D
.eh_frame:0000000000016C49                 db    0
.eh_frame:0000000000016C4A                 db    0
.eh_frame:0000000000016C4B                 db    0
.eh_frame:0000000000016C4C                 db  4Ch ; L
.eh_frame:0000000000016C4D                 db    8
.eh_frame:0000000000016C4E                 db    0
.eh_frame:0000000000016C4F                 db    0
.eh_frame:0000000000016C50                 db 0F0h
.eh_frame:0000000000016C51                 db  37h ; 7
.eh_frame:0000000000016C52                 db 0FFh
.eh_frame:0000000000016C53                 db 0FFh
.eh_frame:0000000000016C54                 db  52h ; R
.eh_frame:0000000000016C55                 db    1
.eh_frame:0000000000016C56                 db    0
.eh_frame:0000000000016C57                 db    0
.eh_frame:0000000000016C58                 db    0
.eh_frame:0000000000016C59                 db  42h ; B
.eh_frame:0000000000016C5A                 db  0Eh
.eh_frame:0000000000016C5B                 db  10h
.eh_frame:0000000000016C5C                 db  8Eh
.eh_frame:0000000000016C5D                 db    2
.eh_frame:0000000000016C5E                 db  42h ; B
.eh_frame:0000000000016C5F                 db  0Eh
.eh_frame:0000000000016C60                 db  18h
.eh_frame:0000000000016C61                 db  8Dh
.eh_frame:0000000000016C62                 db    3
.eh_frame:0000000000016C63                 db  42h ; B
.eh_frame:0000000000016C64                 db  0Eh
.eh_frame:0000000000016C65                 db  20h
.eh_frame:0000000000016C66                 db  8Ch
.eh_frame:0000000000016C67                 db    4
.eh_frame:0000000000016C68                 db  41h ; A
.eh_frame:0000000000016C69                 db  0Eh
.eh_frame:0000000000016C6A                 db  28h ; (
.eh_frame:0000000000016C6B                 db  86h
.eh_frame:0000000000016C6C                 db    5
.eh_frame:0000000000016C6D                 db  44h ; D
.eh_frame:0000000000016C6E                 db  0Eh
.eh_frame:0000000000016C6F                 db  30h ; 0
.eh_frame:0000000000016C70                 db  83h
.eh_frame:0000000000016C71                 db    6
.eh_frame:0000000000016C72                 db  4Ch ; L
.eh_frame:0000000000016C73                 db  0Eh
.eh_frame:0000000000016C74                 db 0E0h
.eh_frame:0000000000016C75                 db    2
.eh_frame:0000000000016C76                 db    2
.eh_frame:0000000000016C77                 db 0B2h
.eh_frame:0000000000016C78                 db  0Ah
.eh_frame:0000000000016C79                 db  0Eh
.eh_frame:0000000000016C7A                 db  30h ; 0
.eh_frame:0000000000016C7B                 db  41h ; A
.eh_frame:0000000000016C7C                 db  0Eh
.eh_frame:0000000000016C7D                 db  28h ; (
.eh_frame:0000000000016C7E                 db  41h ; A
.eh_frame:0000000000016C7F                 db  0Eh
.eh_frame:0000000000016C80                 db  20h
.eh_frame:0000000000016C81                 db  42h ; B
.eh_frame:0000000000016C82                 db  0Eh
.eh_frame:0000000000016C83                 db  18h
.eh_frame:0000000000016C84                 db  42h ; B
.eh_frame:0000000000016C85                 db  0Eh
.eh_frame:0000000000016C86                 db  10h
.eh_frame:0000000000016C87                 db  42h ; B
.eh_frame:0000000000016C88                 db  0Eh
.eh_frame:0000000000016C89                 db    8
.eh_frame:0000000000016C8A                 db  47h ; G
.eh_frame:0000000000016C8B                 db  0Bh
.eh_frame:0000000000016C8C                 db    0
.eh_frame:0000000000016C8D                 db    0
.eh_frame:0000000000016C8E                 db    0
.eh_frame:0000000000016C8F                 db    0
.eh_frame:0000000000016C90                 db  34h ; 4
.eh_frame:0000000000016C91                 db    0
.eh_frame:0000000000016C92                 db    0
.eh_frame:0000000000016C93                 db    0
.eh_frame:0000000000016C94                 db  94h
.eh_frame:0000000000016C95                 db    8
.eh_frame:0000000000016C96                 db    0
.eh_frame:0000000000016C97                 db    0
.eh_frame:0000000000016C98                 db    8
.eh_frame:0000000000016C99                 db  39h ; 9
.eh_frame:0000000000016C9A                 db 0FFh
.eh_frame:0000000000016C9B                 db 0FFh
.eh_frame:0000000000016C9C                 db  8Ch
.eh_frame:0000000000016C9D                 db    0
.eh_frame:0000000000016C9E                 db    0
.eh_frame:0000000000016C9F                 db    0
.eh_frame:0000000000016CA0                 db    0
.eh_frame:0000000000016CA1                 db  42h ; B
.eh_frame:0000000000016CA2                 db  0Eh
.eh_frame:0000000000016CA3                 db  10h
.eh_frame:0000000000016CA4                 db  8Ch
.eh_frame:0000000000016CA5                 db    2
.eh_frame:0000000000016CA6                 db  41h ; A
.eh_frame:0000000000016CA7                 db  0Eh
.eh_frame:0000000000016CA8                 db  18h
.eh_frame:0000000000016CA9                 db  86h
.eh_frame:0000000000016CAA                 db    3
.eh_frame:0000000000016CAB                 db  44h ; D
.eh_frame:0000000000016CAC                 db  0Eh
.eh_frame:0000000000016CAD                 db  20h
.eh_frame:0000000000016CAE                 db  83h
.eh_frame:0000000000016CAF                 db    4
.eh_frame:0000000000016CB0                 db    2
.eh_frame:0000000000016CB1                 db  4Eh ; N
.eh_frame:0000000000016CB2                 db  0Ah
.eh_frame:0000000000016CB3                 db  0Eh
.eh_frame:0000000000016CB4                 db  18h
.eh_frame:0000000000016CB5                 db  41h ; A
.eh_frame:0000000000016CB6                 db  0Eh
.eh_frame:0000000000016CB7                 db  10h
.eh_frame:0000000000016CB8                 db  42h ; B
.eh_frame:0000000000016CB9                 db  0Eh
.eh_frame:0000000000016CBA                 db    8
.eh_frame:0000000000016CBB                 db  48h ; H
.eh_frame:0000000000016CBC                 db  0Bh
.eh_frame:0000000000016CBD                 db  68h ; h
.eh_frame:0000000000016CBE                 db  0Eh
.eh_frame:0000000000016CBF                 db  18h
.eh_frame:0000000000016CC0                 db  41h ; A
.eh_frame:0000000000016CC1                 db  0Eh
.eh_frame:0000000000016CC2                 db  10h
.eh_frame:0000000000016CC3                 db  42h ; B
.eh_frame:0000000000016CC4                 db  0Eh
.eh_frame:0000000000016CC5                 db    8
.eh_frame:0000000000016CC6                 db    0
.eh_frame:0000000000016CC7                 db    0
.eh_frame:0000000000016CC8                 db  2Ch ; ,
.eh_frame:0000000000016CC9                 db    0
.eh_frame:0000000000016CCA                 db    0
.eh_frame:0000000000016CCB                 db    0
.eh_frame:0000000000016CCC                 db 0CCh
.eh_frame:0000000000016CCD                 db    8
.eh_frame:0000000000016CCE                 db    0
.eh_frame:0000000000016CCF                 db    0
.eh_frame:0000000000016CD0                 db  60h ; `
.eh_frame:0000000000016CD1                 db  39h ; 9
.eh_frame:0000000000016CD2                 db 0FFh
.eh_frame:0000000000016CD3                 db 0FFh
.eh_frame:0000000000016CD4                 db  50h ; P
.eh_frame:0000000000016CD5                 db    0
.eh_frame:0000000000016CD6                 db    0
.eh_frame:0000000000016CD7                 db    0
.eh_frame:0000000000016CD8                 db    0
.eh_frame:0000000000016CD9                 db  42h ; B
.eh_frame:0000000000016CDA                 db  0Eh
.eh_frame:0000000000016CDB                 db  10h
.eh_frame:0000000000016CDC                 db  8Ch
.eh_frame:0000000000016CDD                 db    2
.eh_frame:0000000000016CDE                 db  41h ; A
.eh_frame:0000000000016CDF                 db  0Eh
.eh_frame:0000000000016CE0                 db  18h
.eh_frame:0000000000016CE1                 db  86h
.eh_frame:0000000000016CE2                 db    3
.eh_frame:0000000000016CE3                 db  44h ; D
.eh_frame:0000000000016CE4                 db  0Eh
.eh_frame:0000000000016CE5                 db  20h
.eh_frame:0000000000016CE6                 db  83h
.eh_frame:0000000000016CE7                 db    4
.eh_frame:0000000000016CE8                 db    2
.eh_frame:0000000000016CE9                 db  45h ; E
.eh_frame:0000000000016CEA                 db  0Eh
.eh_frame:0000000000016CEB                 db  18h
.eh_frame:0000000000016CEC                 db  41h ; A
.eh_frame:0000000000016CED                 db  0Eh
.eh_frame:0000000000016CEE                 db  10h
.eh_frame:0000000000016CEF                 db  42h ; B
.eh_frame:0000000000016CF0                 db  0Eh
.eh_frame:0000000000016CF1                 db    8
.eh_frame:0000000000016CF2                 db    0
.eh_frame:0000000000016CF3                 db    0
.eh_frame:0000000000016CF4                 db    0
.eh_frame:0000000000016CF5                 db    0
.eh_frame:0000000000016CF6                 db    0
.eh_frame:0000000000016CF7                 db    0
.eh_frame:0000000000016CF8                 db  4Ch ; L
.eh_frame:0000000000016CF9                 db    0
.eh_frame:0000000000016CFA                 db    0
.eh_frame:0000000000016CFB                 db    0
.eh_frame:0000000000016CFC                 db 0FCh
.eh_frame:0000000000016CFD                 db    8
.eh_frame:0000000000016CFE                 db    0
.eh_frame:0000000000016CFF                 db    0
.eh_frame:0000000000016D00                 db  80h
.eh_frame:0000000000016D01                 db  39h ; 9
.eh_frame:0000000000016D02                 db 0FFh
.eh_frame:0000000000016D03                 db 0FFh
.eh_frame:0000000000016D04                 db 0EFh
.eh_frame:0000000000016D05                 db    0
.eh_frame:0000000000016D06                 db    0
.eh_frame:0000000000016D07                 db    0
.eh_frame:0000000000016D08                 db    0
.eh_frame:0000000000016D09                 db  42h ; B
.eh_frame:0000000000016D0A                 db  0Eh
.eh_frame:0000000000016D0B                 db  10h
.eh_frame:0000000000016D0C                 db  8Fh
.eh_frame:0000000000016D0D                 db    2
.eh_frame:0000000000016D0E                 db  42h ; B
.eh_frame:0000000000016D0F                 db  0Eh
.eh_frame:0000000000016D10                 db  18h
.eh_frame:0000000000016D11                 db  8Eh
.eh_frame:0000000000016D12                 db    3
.eh_frame:0000000000016D13                 db  47h ; G
.eh_frame:0000000000016D14                 db  0Eh
.eh_frame:0000000000016D15                 db  20h
.eh_frame:0000000000016D16                 db  8Dh
.eh_frame:0000000000016D17                 db    4
.eh_frame:0000000000016D18                 db  42h ; B
.eh_frame:0000000000016D19                 db  0Eh
.eh_frame:0000000000016D1A                 db  28h ; (
.eh_frame:0000000000016D1B                 db  8Ch
.eh_frame:0000000000016D1C                 db    5
.eh_frame:0000000000016D1D                 db  44h ; D
.eh_frame:0000000000016D1E                 db  0Eh
.eh_frame:0000000000016D1F                 db  30h ; 0
.eh_frame:0000000000016D20                 db  86h
.eh_frame:0000000000016D21                 db    6
.eh_frame:0000000000016D22                 db  41h ; A
.eh_frame:0000000000016D23                 db  0Eh
.eh_frame:0000000000016D24                 db  38h ; 8
.eh_frame:0000000000016D25                 db  83h
.eh_frame:0000000000016D26                 db    7
.eh_frame:0000000000016D27                 db  5Ch ; \
.eh_frame:0000000000016D28                 db  0Eh
.eh_frame:0000000000016D29                 db  40h ; @
.eh_frame:0000000000016D2A                 db    2
.eh_frame:0000000000016D2B                 db  61h ; a
.eh_frame:0000000000016D2C                 db  0Ah
.eh_frame:0000000000016D2D                 db  0Eh
.eh_frame:0000000000016D2E                 db  38h ; 8
.eh_frame:0000000000016D2F                 db  44h ; D
.eh_frame:0000000000016D30                 db  0Eh
.eh_frame:0000000000016D31                 db  30h ; 0
.eh_frame:0000000000016D32                 db  41h ; A
.eh_frame:0000000000016D33                 db  0Eh
.eh_frame:0000000000016D34                 db  28h ; (
.eh_frame:0000000000016D35                 db  42h ; B
.eh_frame:0000000000016D36                 db  0Eh
.eh_frame:0000000000016D37                 db  20h
.eh_frame:0000000000016D38                 db  42h ; B
.eh_frame:0000000000016D39                 db  0Eh
.eh_frame:0000000000016D3A                 db  18h
.eh_frame:0000000000016D3B                 db  42h ; B
.eh_frame:0000000000016D3C                 db  0Eh
.eh_frame:0000000000016D3D                 db  10h
.eh_frame:0000000000016D3E                 db  42h ; B
.eh_frame:0000000000016D3F                 db  0Eh
.eh_frame:0000000000016D40                 db    8
.eh_frame:0000000000016D41                 db  44h ; D
.eh_frame:0000000000016D42                 db  0Bh
.eh_frame:0000000000016D43                 db    0
.eh_frame:0000000000016D44                 db    0
.eh_frame:0000000000016D45                 db    0
.eh_frame:0000000000016D46                 db    0
.eh_frame:0000000000016D47                 db    0
.eh_frame:0000000000016D48                 db  10h
.eh_frame:0000000000016D49                 db    0
.eh_frame:0000000000016D4A                 db    0
.eh_frame:0000000000016D4B                 db    0
.eh_frame:0000000000016D4C                 db  4Ch ; L
.eh_frame:0000000000016D4D                 db    9
.eh_frame:0000000000016D4E                 db    0
.eh_frame:0000000000016D4F                 db    0
.eh_frame:0000000000016D50                 db  20h
.eh_frame:0000000000016D51                 db  3Ah ; :
.eh_frame:0000000000016D52                 db 0FFh
.eh_frame:0000000000016D53                 db 0FFh
.eh_frame:0000000000016D54                 db  0Ah
.eh_frame:0000000000016D55                 db    0
.eh_frame:0000000000016D56                 db    0
.eh_frame:0000000000016D57                 db    0
.eh_frame:0000000000016D58                 db    0
.eh_frame:0000000000016D59                 db    0
.eh_frame:0000000000016D5A                 db    0
.eh_frame:0000000000016D5B                 db    0
.eh_frame:0000000000016D5C                 db  48h ; H
.eh_frame:0000000000016D5D                 db    0
.eh_frame:0000000000016D5E                 db    0
.eh_frame:0000000000016D5F                 db    0
.eh_frame:0000000000016D60                 db  60h ; `
.eh_frame:0000000000016D61                 db    9
.eh_frame:0000000000016D62                 db    0
.eh_frame:0000000000016D63                 db    0
.eh_frame:0000000000016D64                 db  1Ch
.eh_frame:0000000000016D65                 db  3Ah ; :
.eh_frame:0000000000016D66                 db 0FFh
.eh_frame:0000000000016D67                 db 0FFh
.eh_frame:0000000000016D68                 db  16h
.eh_frame:0000000000016D69                 db    1
.eh_frame:0000000000016D6A                 db    0
.eh_frame:0000000000016D6B                 db    0
.eh_frame:0000000000016D6C                 db    0
.eh_frame:0000000000016D6D                 db  42h ; B
.eh_frame:0000000000016D6E                 db  0Eh
.eh_frame:0000000000016D6F                 db  10h
.eh_frame:0000000000016D70                 db  8Fh
.eh_frame:0000000000016D71                 db    2
.eh_frame:0000000000016D72                 db  42h ; B
.eh_frame:0000000000016D73                 db  0Eh
.eh_frame:0000000000016D74                 db  18h
.eh_frame:0000000000016D75                 db  8Eh
.eh_frame:0000000000016D76                 db    3
.eh_frame:0000000000016D77                 db  45h ; E
.eh_frame:0000000000016D78                 db  0Eh
.eh_frame:0000000000016D79                 db  20h
.eh_frame:0000000000016D7A                 db  8Dh
.eh_frame:0000000000016D7B                 db    4
.eh_frame:0000000000016D7C                 db  42h ; B
.eh_frame:0000000000016D7D                 db  0Eh
.eh_frame:0000000000016D7E                 db  28h ; (
.eh_frame:0000000000016D7F                 db  8Ch
.eh_frame:0000000000016D80                 db    5
.eh_frame:0000000000016D81                 db  44h ; D
.eh_frame:0000000000016D82                 db  0Eh
.eh_frame:0000000000016D83                 db  30h ; 0
.eh_frame:0000000000016D84                 db  86h
.eh_frame:0000000000016D85                 db    6
.eh_frame:0000000000016D86                 db  41h ; A
.eh_frame:0000000000016D87                 db  0Eh
.eh_frame:0000000000016D88                 db  38h ; 8
.eh_frame:0000000000016D89                 db  83h
.eh_frame:0000000000016D8A                 db    7
.eh_frame:0000000000016D8B                 db  47h ; G
.eh_frame:0000000000016D8C                 db  0Eh
.eh_frame:0000000000016D8D                 db  60h ; `
.eh_frame:0000000000016D8E                 db    2
.eh_frame:0000000000016D8F                 db 0DEh
.eh_frame:0000000000016D90                 db  0Ah
.eh_frame:0000000000016D91                 db  0Eh
.eh_frame:0000000000016D92                 db  38h ; 8
.eh_frame:0000000000016D93                 db  41h ; A
.eh_frame:0000000000016D94                 db  0Eh
.eh_frame:0000000000016D95                 db  30h ; 0
.eh_frame:0000000000016D96                 db  41h ; A
.eh_frame:0000000000016D97                 db  0Eh
.eh_frame:0000000000016D98                 db  28h ; (
.eh_frame:0000000000016D99                 db  42h ; B
.eh_frame:0000000000016D9A                 db  0Eh
.eh_frame:0000000000016D9B                 db  20h
.eh_frame:0000000000016D9C                 db  42h ; B
.eh_frame:0000000000016D9D                 db  0Eh
.eh_frame:0000000000016D9E                 db  18h
.eh_frame:0000000000016D9F                 db  42h ; B
.eh_frame:0000000000016DA0                 db  0Eh
.eh_frame:0000000000016DA1                 db  10h
.eh_frame:0000000000016DA2                 db  42h ; B
.eh_frame:0000000000016DA3                 db  0Eh
.eh_frame:0000000000016DA4                 db    8
.eh_frame:0000000000016DA5                 db  41h ; A
.eh_frame:0000000000016DA6                 db  0Bh
.eh_frame:0000000000016DA7                 db    0
.eh_frame:0000000000016DA8                 db  28h ; (
.eh_frame:0000000000016DA9                 db    0
.eh_frame:0000000000016DAA                 db    0
.eh_frame:0000000000016DAB                 db    0
.eh_frame:0000000000016DAC                 db 0ACh
.eh_frame:0000000000016DAD                 db    9
.eh_frame:0000000000016DAE                 db    0
.eh_frame:0000000000016DAF                 db    0
.eh_frame:0000000000016DB0                 db 0F0h
.eh_frame:0000000000016DB1                 db  3Ah ; :
.eh_frame:0000000000016DB2                 db 0FFh
.eh_frame:0000000000016DB3                 db 0FFh
.eh_frame:0000000000016DB4                 db  73h ; s
.eh_frame:0000000000016DB5                 db    0
.eh_frame:0000000000016DB6                 db    0
.eh_frame:0000000000016DB7                 db    0
.eh_frame:0000000000016DB8                 db    0
.eh_frame:0000000000016DB9                 db  46h ; F
.eh_frame:0000000000016DBA                 db  0Eh
.eh_frame:0000000000016DBB                 db  10h
.eh_frame:0000000000016DBC                 db  8Ch
.eh_frame:0000000000016DBD                 db    2
.eh_frame:0000000000016DBE                 db  46h ; F
.eh_frame:0000000000016DBF                 db  0Eh
.eh_frame:0000000000016DC0                 db  18h
.eh_frame:0000000000016DC1                 db  86h
.eh_frame:0000000000016DC2                 db    3
.eh_frame:0000000000016DC3                 db  44h ; D
.eh_frame:0000000000016DC4                 db  0Eh
.eh_frame:0000000000016DC5                 db  20h
.eh_frame:0000000000016DC6                 db  83h
.eh_frame:0000000000016DC7                 db    4
.eh_frame:0000000000016DC8                 db  7Fh ; 
.eh_frame:0000000000016DC9                 db  0Ah
.eh_frame:0000000000016DCA                 db  0Eh
.eh_frame:0000000000016DCB                 db  18h
.eh_frame:0000000000016DCC                 db  41h ; A
.eh_frame:0000000000016DCD                 db  0Eh
.eh_frame:0000000000016DCE                 db  10h
.eh_frame:0000000000016DCF                 db  42h ; B
.eh_frame:0000000000016DD0                 db  0Eh
.eh_frame:0000000000016DD1                 db    8
.eh_frame:0000000000016DD2                 db  4Eh ; N
.eh_frame:0000000000016DD3                 db  0Bh
.eh_frame:0000000000016DD4                 db  5Ch ; \
.eh_frame:0000000000016DD5                 db    0
.eh_frame:0000000000016DD6                 db    0
.eh_frame:0000000000016DD7                 db    0
.eh_frame:0000000000016DD8                 db 0D8h
.eh_frame:0000000000016DD9                 db    9
.eh_frame:0000000000016DDA                 db    0
.eh_frame:0000000000016DDB                 db    0
.eh_frame:0000000000016DDC                 db  44h ; D
.eh_frame:0000000000016DDD                 db  3Bh ; ;
.eh_frame:0000000000016DDE                 db 0FFh
.eh_frame:0000000000016DDF                 db 0FFh
.eh_frame:0000000000016DE0                 db  20h
.eh_frame:0000000000016DE1                 db    1
.eh_frame:0000000000016DE2                 db    0
.eh_frame:0000000000016DE3                 db    0
.eh_frame:0000000000016DE4                 db    0
.eh_frame:0000000000016DE5                 db  42h ; B
.eh_frame:0000000000016DE6                 db  0Eh
.eh_frame:0000000000016DE7                 db  10h
.eh_frame:0000000000016DE8                 db  8Fh
.eh_frame:0000000000016DE9                 db    2
.eh_frame:0000000000016DEA                 db  42h ; B
.eh_frame:0000000000016DEB                 db  0Eh
.eh_frame:0000000000016DEC                 db  18h
.eh_frame:0000000000016DED                 db  8Eh
.eh_frame:0000000000016DEE                 db    3
.eh_frame:0000000000016DEF                 db  45h ; E
.eh_frame:0000000000016DF0                 db  0Eh
.eh_frame:0000000000016DF1                 db  20h
.eh_frame:0000000000016DF2                 db  8Dh
.eh_frame:0000000000016DF3                 db    4
.eh_frame:0000000000016DF4                 db  42h ; B
.eh_frame:0000000000016DF5                 db  0Eh
.eh_frame:0000000000016DF6                 db  28h ; (
.eh_frame:0000000000016DF7                 db  8Ch
.eh_frame:0000000000016DF8                 db    5
.eh_frame:0000000000016DF9                 db  43h ; C
.eh_frame:0000000000016DFA                 db  0Eh
.eh_frame:0000000000016DFB                 db  30h ; 0
.eh_frame:0000000000016DFC                 db  86h
.eh_frame:0000000000016DFD                 db    6
.eh_frame:0000000000016DFE                 db  41h ; A
.eh_frame:0000000000016DFF                 db  0Eh
.eh_frame:0000000000016E00                 db  38h ; 8
.eh_frame:0000000000016E01                 db  83h
.eh_frame:0000000000016E02                 db    7
.eh_frame:0000000000016E03                 db  56h ; V
.eh_frame:0000000000016E04                 db  0Eh
.eh_frame:0000000000016E05                 db  40h ; @
.eh_frame:0000000000016E06                 db    2
.eh_frame:0000000000016E07                 db 0D3h
.eh_frame:0000000000016E08                 db  0Ah
.eh_frame:0000000000016E09                 db  0Eh
.eh_frame:0000000000016E0A                 db  38h ; 8
.eh_frame:0000000000016E0B                 db  41h ; A
.eh_frame:0000000000016E0C                 db  0Eh
.eh_frame:0000000000016E0D                 db  30h ; 0
.eh_frame:0000000000016E0E                 db  41h ; A
.eh_frame:0000000000016E0F                 db  0Eh
.eh_frame:0000000000016E10                 db  28h ; (
.eh_frame:0000000000016E11                 db  42h ; B
.eh_frame:0000000000016E12                 db  0Eh
.eh_frame:0000000000016E13                 db  20h
.eh_frame:0000000000016E14                 db  42h ; B
.eh_frame:0000000000016E15                 db  0Eh
.eh_frame:0000000000016E16                 db  18h
.eh_frame:0000000000016E17                 db  42h ; B
.eh_frame:0000000000016E18                 db  0Eh
.eh_frame:0000000000016E19                 db  10h
.eh_frame:0000000000016E1A                 db  42h ; B
.eh_frame:0000000000016E1B                 db  0Eh
.eh_frame:0000000000016E1C                 db    8
.eh_frame:0000000000016E1D                 db  46h ; F
.eh_frame:0000000000016E1E                 db  0Bh
.eh_frame:0000000000016E1F                 db  44h ; D
.eh_frame:0000000000016E20                 db  0Eh
.eh_frame:0000000000016E21                 db  38h ; 8
.eh_frame:0000000000016E22                 db  46h ; F
.eh_frame:0000000000016E23                 db  0Eh
.eh_frame:0000000000016E24                 db  30h ; 0
.eh_frame:0000000000016E25                 db  41h ; A
.eh_frame:0000000000016E26                 db  0Eh
.eh_frame:0000000000016E27                 db  28h ; (
.eh_frame:0000000000016E28                 db  42h ; B
.eh_frame:0000000000016E29                 db  0Eh
.eh_frame:0000000000016E2A                 db  20h
.eh_frame:0000000000016E2B                 db  42h ; B
.eh_frame:0000000000016E2C                 db  0Eh
.eh_frame:0000000000016E2D                 db  18h
.eh_frame:0000000000016E2E                 db  42h ; B
.eh_frame:0000000000016E2F                 db  0Eh
.eh_frame:0000000000016E30                 db  10h
.eh_frame:0000000000016E31                 db  42h ; B
.eh_frame:0000000000016E32                 db  0Eh
.eh_frame:0000000000016E33                 db    8
.eh_frame:0000000000016E34                 db  48h ; H
.eh_frame:0000000000016E35                 db    0
.eh_frame:0000000000016E36                 db    0
.eh_frame:0000000000016E37                 db    0
.eh_frame:0000000000016E38                 db  38h ; 8
.eh_frame:0000000000016E39                 db  0Ah
.eh_frame:0000000000016E3A                 db    0
.eh_frame:0000000000016E3B                 db    0
.eh_frame:0000000000016E3C                 db    4
.eh_frame:0000000000016E3D                 db  3Ch ; <
.eh_frame:0000000000016E3E                 db 0FFh
.eh_frame:0000000000016E3F                 db 0FFh
.eh_frame:0000000000016E40                 db  6Dh ; m
.eh_frame:0000000000016E41                 db    0
.eh_frame:0000000000016E42                 db    0
.eh_frame:0000000000016E43                 db    0
.eh_frame:0000000000016E44                 db    0
.eh_frame:0000000000016E45                 db  42h ; B
.eh_frame:0000000000016E46                 db  0Eh
.eh_frame:0000000000016E47                 db  10h
.eh_frame:0000000000016E48                 db  8Fh
.eh_frame:0000000000016E49                 db    2
.eh_frame:0000000000016E4A                 db  42h ; B
.eh_frame:0000000000016E4B                 db  0Eh
.eh_frame:0000000000016E4C                 db  18h
.eh_frame:0000000000016E4D                 db  8Eh
.eh_frame:0000000000016E4E                 db    3
.eh_frame:0000000000016E4F                 db  45h ; E
.eh_frame:0000000000016E50                 db  0Eh
.eh_frame:0000000000016E51                 db  20h
.eh_frame:0000000000016E52                 db  8Dh
.eh_frame:0000000000016E53                 db    4
.eh_frame:0000000000016E54                 db  42h ; B
.eh_frame:0000000000016E55                 db  0Eh
.eh_frame:0000000000016E56                 db  28h ; (
.eh_frame:0000000000016E57                 db  8Ch
.eh_frame:0000000000016E58                 db    5
.eh_frame:0000000000016E59                 db  44h ; D
.eh_frame:0000000000016E5A                 db  0Eh
.eh_frame:0000000000016E5B                 db  30h ; 0
.eh_frame:0000000000016E5C                 db  86h
.eh_frame:0000000000016E5D                 db    6
.eh_frame:0000000000016E5E                 db  41h ; A
.eh_frame:0000000000016E5F                 db  0Eh
.eh_frame:0000000000016E60                 db  38h ; 8
.eh_frame:0000000000016E61                 db  83h
.eh_frame:0000000000016E62                 db    7
.eh_frame:0000000000016E63                 db  50h ; P
.eh_frame:0000000000016E64                 db  0Eh
.eh_frame:0000000000016E65                 db  40h ; @
.eh_frame:0000000000016E66                 db  5Ah ; Z
.eh_frame:0000000000016E67                 db  0Ah
.eh_frame:0000000000016E68                 db  0Eh
.eh_frame:0000000000016E69                 db  38h ; 8
.eh_frame:0000000000016E6A                 db  41h ; A
.eh_frame:0000000000016E6B                 db  0Eh
.eh_frame:0000000000016E6C                 db  30h ; 0
.eh_frame:0000000000016E6D                 db  41h ; A
.eh_frame:0000000000016E6E                 db  0Eh
.eh_frame:0000000000016E6F                 db  28h ; (
.eh_frame:0000000000016E70                 db  42h ; B
.eh_frame:0000000000016E71                 db  0Eh
.eh_frame:0000000000016E72                 db  20h
.eh_frame:0000000000016E73                 db  42h ; B
.eh_frame:0000000000016E74                 db  0Eh
.eh_frame:0000000000016E75                 db  18h
.eh_frame:0000000000016E76                 db  42h ; B
.eh_frame:0000000000016E77                 db  0Eh
.eh_frame:0000000000016E78                 db  10h
.eh_frame:0000000000016E79                 db  42h ; B
.eh_frame:0000000000016E7A                 db  0Eh
.eh_frame:0000000000016E7B                 db    8
.eh_frame:0000000000016E7C                 db  41h ; A
.eh_frame:0000000000016E7D                 db  0Bh
.eh_frame:0000000000016E7E                 db    0
.eh_frame:0000000000016E7F                 db    0
.eh_frame:0000000000016E80                 db  3Ch ; <
.eh_frame:0000000000016E81                 db    0
.eh_frame:0000000000016E82                 db    0
.eh_frame:0000000000016E83                 db    0
.eh_frame:0000000000016E84                 db  84h
.eh_frame:0000000000016E85                 db  0Ah
.eh_frame:0000000000016E86                 db    0
.eh_frame:0000000000016E87                 db    0
.eh_frame:0000000000016E88                 db  28h ; (
.eh_frame:0000000000016E89                 db  3Ch ; <
.eh_frame:0000000000016E8A                 db 0FFh
.eh_frame:0000000000016E8B                 db 0FFh
.eh_frame:0000000000016E8C                 db  4Dh ; M
.eh_frame:0000000000016E8D                 db    0
.eh_frame:0000000000016E8E                 db    0
.eh_frame:0000000000016E8F                 db    0
.eh_frame:0000000000016E90                 db    0
.eh_frame:0000000000016E91                 db  42h ; B
.eh_frame:0000000000016E92                 db  0Eh
.eh_frame:0000000000016E93                 db  10h
.eh_frame:0000000000016E94                 db  8Eh
.eh_frame:0000000000016E95                 db    2
.eh_frame:0000000000016E96                 db  42h ; B
.eh_frame:0000000000016E97                 db  0Eh
.eh_frame:0000000000016E98                 db  18h
.eh_frame:0000000000016E99                 db  8Dh
.eh_frame:0000000000016E9A                 db    3
.eh_frame:0000000000016E9B                 db  42h ; B
.eh_frame:0000000000016E9C                 db  0Eh
.eh_frame:0000000000016E9D                 db  20h
.eh_frame:0000000000016E9E                 db  8Ch
.eh_frame:0000000000016E9F                 db    4
.eh_frame:0000000000016EA0                 db  41h ; A
.eh_frame:0000000000016EA1                 db  0Eh
.eh_frame:0000000000016EA2                 db  28h ; (
.eh_frame:0000000000016EA3                 db  86h
.eh_frame:0000000000016EA4                 db    5
.eh_frame:0000000000016EA5                 db  41h ; A
.eh_frame:0000000000016EA6                 db  0Eh
.eh_frame:0000000000016EA7                 db  30h ; 0
.eh_frame:0000000000016EA8                 db  83h
.eh_frame:0000000000016EA9                 db    6
.eh_frame:0000000000016EAA                 db  7Ah ; z
.eh_frame:0000000000016EAB                 db  0Eh
.eh_frame:0000000000016EAC                 db  28h ; (
.eh_frame:0000000000016EAD                 db  44h ; D
.eh_frame:0000000000016EAE                 db  0Eh
.eh_frame:0000000000016EAF                 db  20h
.eh_frame:0000000000016EB0                 db  42h ; B
.eh_frame:0000000000016EB1                 db  0Eh
.eh_frame:0000000000016EB2                 db  18h
.eh_frame:0000000000016EB3                 db  42h ; B
.eh_frame:0000000000016EB4                 db  0Eh
.eh_frame:0000000000016EB5                 db  10h
.eh_frame:0000000000016EB6                 db  42h ; B
.eh_frame:0000000000016EB7                 db  0Eh
.eh_frame:0000000000016EB8                 db    8
.eh_frame:0000000000016EB9                 db    0
.eh_frame:0000000000016EBA                 db    0
.eh_frame:0000000000016EBB                 db    0
.eh_frame:0000000000016EBC                 db    0
.eh_frame:0000000000016EBD                 db    0
.eh_frame:0000000000016EBE                 db    0
.eh_frame:0000000000016EBF                 db    0
.eh_frame:0000000000016EC0                 db  18h
.eh_frame:0000000000016EC1                 db    0
.eh_frame:0000000000016EC2                 db    0
.eh_frame:0000000000016EC3                 db    0
.eh_frame:0000000000016EC4                 db 0C4h
.eh_frame:0000000000016EC5                 db  0Ah
.eh_frame:0000000000016EC6                 db    0
.eh_frame:0000000000016EC7                 db    0
.eh_frame:0000000000016EC8                 db  38h ; 8
.eh_frame:0000000000016EC9                 db  3Ch ; <
.eh_frame:0000000000016ECA                 db 0FFh
.eh_frame:0000000000016ECB                 db 0FFh
.eh_frame:0000000000016ECC                 db  46h ; F
.eh_frame:0000000000016ECD                 db    0
.eh_frame:0000000000016ECE                 db    0
.eh_frame:0000000000016ECF                 db    0
.eh_frame:0000000000016ED0                 db    0
.eh_frame:0000000000016ED1                 db  44h ; D
.eh_frame:0000000000016ED2                 db  0Eh
.eh_frame:0000000000016ED3                 db  10h
.eh_frame:0000000000016ED4                 db  83h
.eh_frame:0000000000016ED5                 db    2
.eh_frame:0000000000016ED6                 db  59h ; Y
.eh_frame:0000000000016ED7                 db  0Ah
.eh_frame:0000000000016ED8                 db  0Eh
.eh_frame:0000000000016ED9                 db    8
.eh_frame:0000000000016EDA                 db  43h ; C
.eh_frame:0000000000016EDB                 db  0Bh
.eh_frame:0000000000016EDC                 db  50h ; P
.eh_frame:0000000000016EDD                 db    0
.eh_frame:0000000000016EDE                 db    0
.eh_frame:0000000000016EDF                 db    0
.eh_frame:0000000000016EE0                 db 0E0h
.eh_frame:0000000000016EE1                 db  0Ah
.eh_frame:0000000000016EE2                 db    0
.eh_frame:0000000000016EE3                 db    0
.eh_frame:0000000000016EE4                 db  6Ch ; l
.eh_frame:0000000000016EE5                 db  3Ch ; <
.eh_frame:0000000000016EE6                 db 0FFh
.eh_frame:0000000000016EE7                 db 0FFh
.eh_frame:0000000000016EE8                 db  12h
.eh_frame:0000000000016EE9                 db    6
.eh_frame:0000000000016EEA                 db    0
.eh_frame:0000000000016EEB                 db    0
.eh_frame:0000000000016EEC                 db    0
.eh_frame:0000000000016EED                 db  42h ; B
.eh_frame:0000000000016EEE                 db  0Eh
.eh_frame:0000000000016EEF                 db  10h
.eh_frame:0000000000016EF0                 db  8Fh
.eh_frame:0000000000016EF1                 db    2
.eh_frame:0000000000016EF2                 db  42h ; B
.eh_frame:0000000000016EF3                 db  0Eh
.eh_frame:0000000000016EF4                 db  18h
.eh_frame:0000000000016EF5                 db  8Eh
.eh_frame:0000000000016EF6                 db    3
.eh_frame:0000000000016EF7                 db  42h ; B
.eh_frame:0000000000016EF8                 db  0Eh
.eh_frame:0000000000016EF9                 db  20h
.eh_frame:0000000000016EFA                 db  8Dh
.eh_frame:0000000000016EFB                 db    4
.eh_frame:0000000000016EFC                 db  42h ; B
.eh_frame:0000000000016EFD                 db  0Eh
.eh_frame:0000000000016EFE                 db  28h ; (
.eh_frame:0000000000016EFF                 db  8Ch
.eh_frame:0000000000016F00                 db    5
.eh_frame:0000000000016F01                 db  41h ; A
.eh_frame:0000000000016F02                 db  0Eh
.eh_frame:0000000000016F03                 db  30h ; 0
.eh_frame:0000000000016F04                 db  86h
.eh_frame:0000000000016F05                 db    6
.eh_frame:0000000000016F06                 db  41h ; A
.eh_frame:0000000000016F07                 db  0Eh
.eh_frame:0000000000016F08                 db  38h ; 8
.eh_frame:0000000000016F09                 db  83h
.eh_frame:0000000000016F0A                 db    7
.eh_frame:0000000000016F0B                 db  4Ah ; J
.eh_frame:0000000000016F0C                 db  0Eh
.eh_frame:0000000000016F0D                 db 0C0h
.eh_frame:0000000000016F0E                 db    1
.eh_frame:0000000000016F0F                 db    3
.eh_frame:0000000000016F10                 db  9Ah
.eh_frame:0000000000016F11                 db    3
.eh_frame:0000000000016F12                 db  0Ah
.eh_frame:0000000000016F13                 db  0Eh
.eh_frame:0000000000016F14                 db  38h ; 8
.eh_frame:0000000000016F15                 db  41h ; A
.eh_frame:0000000000016F16                 db  0Eh
.eh_frame:0000000000016F17                 db  30h ; 0
.eh_frame:0000000000016F18                 db  41h ; A
.eh_frame:0000000000016F19                 db  0Eh
.eh_frame:0000000000016F1A                 db  28h ; (
.eh_frame:0000000000016F1B                 db  42h ; B
.eh_frame:0000000000016F1C                 db  0Eh
.eh_frame:0000000000016F1D                 db  20h
.eh_frame:0000000000016F1E                 db  42h ; B
.eh_frame:0000000000016F1F                 db  0Eh
.eh_frame:0000000000016F20                 db  18h
.eh_frame:0000000000016F21                 db  42h ; B
.eh_frame:0000000000016F22                 db  0Eh
.eh_frame:0000000000016F23                 db  10h
.eh_frame:0000000000016F24                 db  42h ; B
.eh_frame:0000000000016F25                 db  0Eh
.eh_frame:0000000000016F26                 db    8
.eh_frame:0000000000016F27                 db  48h ; H
.eh_frame:0000000000016F28                 db  0Bh
.eh_frame:0000000000016F29                 db    0
.eh_frame:0000000000016F2A                 db    0
.eh_frame:0000000000016F2B                 db    0
.eh_frame:0000000000016F2C                 db    0
.eh_frame:0000000000016F2D                 db    0
.eh_frame:0000000000016F2E                 db    0
.eh_frame:0000000000016F2F                 db    0
.eh_frame:0000000000016F30                 db  14h
.eh_frame:0000000000016F31                 db    0
.eh_frame:0000000000016F32                 db    0
.eh_frame:0000000000016F33                 db    0
.eh_frame:0000000000016F34                 db  34h ; 4
.eh_frame:0000000000016F35                 db  0Bh
.eh_frame:0000000000016F36                 db    0
.eh_frame:0000000000016F37                 db    0
.eh_frame:0000000000016F38                 db  38h ; 8
.eh_frame:0000000000016F39                 db  42h ; B
.eh_frame:0000000000016F3A                 db 0FFh
.eh_frame:0000000000016F3B                 db 0FFh
.eh_frame:0000000000016F3C                 db  0Ah
.eh_frame:0000000000016F3D                 db    0
.eh_frame:0000000000016F3E                 db    0
.eh_frame:0000000000016F3F                 db    0
.eh_frame:0000000000016F40                 db    0
.eh_frame:0000000000016F41                 db    0
.eh_frame:0000000000016F42                 db    0
.eh_frame:0000000000016F43                 db    0
.eh_frame:0000000000016F44                 db    0
.eh_frame:0000000000016F45                 db    0
.eh_frame:0000000000016F46                 db    0
.eh_frame:0000000000016F47                 db    0
.eh_frame:0000000000016F48                 db  14h
.eh_frame:0000000000016F49                 db    0
.eh_frame:0000000000016F4A                 db    0
.eh_frame:0000000000016F4B                 db    0
.eh_frame:0000000000016F4C                 db  4Ch ; L
.eh_frame:0000000000016F4D                 db  0Bh
.eh_frame:0000000000016F4E                 db    0
.eh_frame:0000000000016F4F                 db    0
.eh_frame:0000000000016F50                 db  30h ; 0
.eh_frame:0000000000016F51                 db  42h ; B
.eh_frame:0000000000016F52                 db 0FFh
.eh_frame:0000000000016F53                 db 0FFh
.eh_frame:0000000000016F54                 db  33h ; 3
.eh_frame:0000000000016F55                 db    0
.eh_frame:0000000000016F56                 db    0
.eh_frame:0000000000016F57                 db    0
.eh_frame:0000000000016F58                 db    0
.eh_frame:0000000000016F59                 db  44h ; D
.eh_frame:0000000000016F5A                 db  0Eh
.eh_frame:0000000000016F5B                 db  10h
.eh_frame:0000000000016F5C                 db  6Eh ; n
.eh_frame:0000000000016F5D                 db  0Eh
.eh_frame:0000000000016F5E                 db    8
.eh_frame:0000000000016F5F                 db    0
.eh_frame:0000000000016F60                 db  18h
.eh_frame:0000000000016F61                 db    0
.eh_frame:0000000000016F62                 db    0
.eh_frame:0000000000016F63                 db    0
.eh_frame:0000000000016F64                 db  64h ; d
.eh_frame:0000000000016F65                 db  0Bh
.eh_frame:0000000000016F66                 db    0
.eh_frame:0000000000016F67                 db    0
.eh_frame:0000000000016F68                 db  58h ; X
.eh_frame:0000000000016F69                 db  42h ; B
.eh_frame:0000000000016F6A                 db 0FFh
.eh_frame:0000000000016F6B                 db 0FFh
.eh_frame:0000000000016F6C                 db  1Ah
.eh_frame:0000000000016F6D                 db    0
.eh_frame:0000000000016F6E                 db    0
.eh_frame:0000000000016F6F                 db    0
.eh_frame:0000000000016F70                 db    0
.eh_frame:0000000000016F71                 db  44h ; D
.eh_frame:0000000000016F72                 db  0Eh
.eh_frame:0000000000016F73                 db  10h
.eh_frame:0000000000016F74                 db  50h ; P
.eh_frame:0000000000016F75                 db  0Ah
.eh_frame:0000000000016F76                 db  0Eh
.eh_frame:0000000000016F77                 db    8
.eh_frame:0000000000016F78                 db  41h ; A
.eh_frame:0000000000016F79                 db  0Bh
.eh_frame:0000000000016F7A                 db    0
.eh_frame:0000000000016F7B                 db    0
.eh_frame:0000000000016F7C                 db  10h
.eh_frame:0000000000016F7D                 db    0
.eh_frame:0000000000016F7E                 db    0
.eh_frame:0000000000016F7F                 db    0
.eh_frame:0000000000016F80                 db  80h
.eh_frame:0000000000016F81                 db  0Bh
.eh_frame:0000000000016F82                 db    0
.eh_frame:0000000000016F83                 db    0
.eh_frame:0000000000016F84                 db  5Ch ; \
.eh_frame:0000000000016F85                 db  42h ; B
.eh_frame:0000000000016F86                 db 0FFh
.eh_frame:0000000000016F87                 db 0FFh
.eh_frame:0000000000016F88                 db  16h
.eh_frame:0000000000016F89                 db    0
.eh_frame:0000000000016F8A                 db    0
.eh_frame:0000000000016F8B                 db    0
.eh_frame:0000000000016F8C                 db    0
.eh_frame:0000000000016F8D                 db    0
.eh_frame:0000000000016F8E                 db    0
.eh_frame:0000000000016F8F                 db    0
.eh_frame:0000000000016F90                 db  1Ch
.eh_frame:0000000000016F91                 db    0
.eh_frame:0000000000016F92                 db    0
.eh_frame:0000000000016F93                 db    0
.eh_frame:0000000000016F94                 db  94h
.eh_frame:0000000000016F95                 db  0Bh
.eh_frame:0000000000016F96                 db    0
.eh_frame:0000000000016F97                 db    0
.eh_frame:0000000000016F98                 db  68h ; h
.eh_frame:0000000000016F99                 db  42h ; B
.eh_frame:0000000000016F9A                 db 0FFh
.eh_frame:0000000000016F9B                 db 0FFh
.eh_frame:0000000000016F9C                 db  4Ah ; J
.eh_frame:0000000000016F9D                 db    0
.eh_frame:0000000000016F9E                 db    0
.eh_frame:0000000000016F9F                 db    0
.eh_frame:0000000000016FA0                 db    0
.eh_frame:0000000000016FA1                 db  55h ; U
.eh_frame:0000000000016FA2                 db  0Eh
.eh_frame:0000000000016FA3                 db  10h
.eh_frame:0000000000016FA4                 db  5Dh ; ]
.eh_frame:0000000000016FA5                 db  0Eh
.eh_frame:0000000000016FA6                 db    8
.eh_frame:0000000000016FA7                 db  4Eh ; N
.eh_frame:0000000000016FA8                 db  0Eh
.eh_frame:0000000000016FA9                 db  10h
.eh_frame:0000000000016FAA                 db  49h ; I
.eh_frame:0000000000016FAB                 db  0Eh
.eh_frame:0000000000016FAC                 db    8
.eh_frame:0000000000016FAD                 db    0
.eh_frame:0000000000016FAE                 db    0
.eh_frame:0000000000016FAF                 db    0
.eh_frame:0000000000016FB0                 db  14h
.eh_frame:0000000000016FB1                 db    0
.eh_frame:0000000000016FB2                 db    0
.eh_frame:0000000000016FB3                 db    0
.eh_frame:0000000000016FB4                 db 0B4h
.eh_frame:0000000000016FB5                 db  0Bh
.eh_frame:0000000000016FB6                 db    0
.eh_frame:0000000000016FB7                 db    0
.eh_frame:0000000000016FB8                 db  98h
.eh_frame:0000000000016FB9                 db  42h ; B
.eh_frame:0000000000016FBA                 db 0FFh
.eh_frame:0000000000016FBB                 db 0FFh
.eh_frame:0000000000016FBC                 db  70h ; p
.eh_frame:0000000000016FBD                 db    0
.eh_frame:0000000000016FBE                 db    0
.eh_frame:0000000000016FBF                 db    0
.eh_frame:0000000000016FC0                 db    0
.eh_frame:0000000000016FC1                 db    0
.eh_frame:0000000000016FC2                 db    0
.eh_frame:0000000000016FC3                 db    0
.eh_frame:0000000000016FC4                 db    0
.eh_frame:0000000000016FC5                 db    0
.eh_frame:0000000000016FC6                 db    0
.eh_frame:0000000000016FC7                 db    0
.eh_frame:0000000000016FC8                 db  10h
.eh_frame:0000000000016FC9                 db    0
.eh_frame:0000000000016FCA                 db    0
.eh_frame:0000000000016FCB                 db    0
.eh_frame:0000000000016FCC                 db 0CCh
.eh_frame:0000000000016FCD                 db  0Bh
.eh_frame:0000000000016FCE                 db    0
.eh_frame:0000000000016FCF                 db    0
.eh_frame:0000000000016FD0                 db 0F0h
.eh_frame:0000000000016FD1                 db  42h ; B
.eh_frame:0000000000016FD2                 db 0FFh
.eh_frame:0000000000016FD3                 db 0FFh
.eh_frame:0000000000016FD4                 db    8
.eh_frame:0000000000016FD5                 db    0
.eh_frame:0000000000016FD6                 db    0
.eh_frame:0000000000016FD7                 db    0
.eh_frame:0000000000016FD8                 db    0
.eh_frame:0000000000016FD9                 db    0
.eh_frame:0000000000016FDA                 db    0
.eh_frame:0000000000016FDB                 db    0
.eh_frame:0000000000016FDC                 db  38h ; 8
.eh_frame:0000000000016FDD                 db    0
.eh_frame:0000000000016FDE                 db    0
.eh_frame:0000000000016FDF                 db    0
.eh_frame:0000000000016FE0                 db 0E0h
.eh_frame:0000000000016FE1                 db  0Bh
.eh_frame:0000000000016FE2                 db    0
.eh_frame:0000000000016FE3                 db    0
.eh_frame:0000000000016FE4                 db 0ECh
.eh_frame:0000000000016FE5                 db  42h ; B
.eh_frame:0000000000016FE6                 db 0FFh
.eh_frame:0000000000016FE7                 db 0FFh
.eh_frame:0000000000016FE8                 db    7
.eh_frame:0000000000016FE9                 db    1
.eh_frame:0000000000016FEA                 db    0
.eh_frame:0000000000016FEB                 db    0
.eh_frame:0000000000016FEC                 db    0
.eh_frame:0000000000016FED                 db  42h ; B
.eh_frame:0000000000016FEE                 db  0Eh
.eh_frame:0000000000016FEF                 db  10h
.eh_frame:0000000000016FF0                 db  8Ch
.eh_frame:0000000000016FF1                 db    2
.eh_frame:0000000000016FF2                 db  41h ; A
.eh_frame:0000000000016FF3                 db  0Eh
.eh_frame:0000000000016FF4                 db  18h
.eh_frame:0000000000016FF5                 db  86h
.eh_frame:0000000000016FF6                 db    3
.eh_frame:0000000000016FF7                 db  41h ; A
.eh_frame:0000000000016FF8                 db  0Eh
.eh_frame:0000000000016FF9                 db  20h
.eh_frame:0000000000016FFA                 db  83h
.eh_frame:0000000000016FFB                 db    4
.eh_frame:0000000000016FFC                 db  65h ; e
.eh_frame:0000000000016FFD                 db  0Ah
.eh_frame:0000000000016FFE                 db  0Eh
.eh_frame:0000000000016FFF                 db  18h
.eh_frame:0000000000017000                 db  41h ; A
.eh_frame:0000000000017001                 db  0Eh
.eh_frame:0000000000017002                 db  10h
.eh_frame:0000000000017003                 db  42h ; B
.eh_frame:0000000000017004                 db  0Eh
.eh_frame:0000000000017005                 db    8
.eh_frame:0000000000017006                 db  4Ch ; L
.eh_frame:0000000000017007                 db  0Bh
.eh_frame:0000000000017008                 db    2
.eh_frame:0000000000017009                 db 0ACh
.eh_frame:000000000001700A                 db  0Ah
.eh_frame:000000000001700B                 db  0Eh
.eh_frame:000000000001700C                 db  18h
.eh_frame:000000000001700D                 db  41h ; A
.eh_frame:000000000001700E                 db  0Eh
.eh_frame:000000000001700F                 db  10h
.eh_frame:0000000000017010                 db  42h ; B
.eh_frame:0000000000017011                 db  0Eh
.eh_frame:0000000000017012                 db    8
.eh_frame:0000000000017013                 db  49h ; I
.eh_frame:0000000000017014                 db  0Bh
.eh_frame:0000000000017015                 db    0
.eh_frame:0000000000017016                 db    0
.eh_frame:0000000000017017                 db    0
.eh_frame:0000000000017018                 db  10h
.eh_frame:0000000000017019                 db    0
.eh_frame:000000000001701A                 db    0
.eh_frame:000000000001701B                 db    0
.eh_frame:000000000001701C                 db  1Ch
.eh_frame:000000000001701D                 db  0Ch
.eh_frame:000000000001701E                 db    0
.eh_frame:000000000001701F                 db    0
.eh_frame:0000000000017020                 db 0C0h
.eh_frame:0000000000017021                 db  43h ; C
.eh_frame:0000000000017022                 db 0FFh
.eh_frame:0000000000017023                 db 0FFh
.eh_frame:0000000000017024                 db    8
.eh_frame:0000000000017025                 db    0
.eh_frame:0000000000017026                 db    0
.eh_frame:0000000000017027                 db    0
.eh_frame:0000000000017028                 db    0
.eh_frame:0000000000017029                 db    0
.eh_frame:000000000001702A                 db    0
.eh_frame:000000000001702B                 db    0
.eh_frame:000000000001702C                 db  10h
.eh_frame:000000000001702D                 db    0
.eh_frame:000000000001702E                 db    0
.eh_frame:000000000001702F                 db    0
.eh_frame:0000000000017030                 db  30h ; 0
.eh_frame:0000000000017031                 db  0Ch
.eh_frame:0000000000017032                 db    0
.eh_frame:0000000000017033                 db    0
.eh_frame:0000000000017034                 db 0BCh
.eh_frame:0000000000017035                 db  43h ; C
.eh_frame:0000000000017036                 db 0FFh
.eh_frame:0000000000017037                 db 0FFh
.eh_frame:0000000000017038                 db    8
.eh_frame:0000000000017039                 db    0
.eh_frame:000000000001703A                 db    0
.eh_frame:000000000001703B                 db    0
.eh_frame:000000000001703C                 db    0
.eh_frame:000000000001703D                 db    0
.eh_frame:000000000001703E                 db    0
.eh_frame:000000000001703F                 db    0
.eh_frame:0000000000017040                 db  2Ch ; ,
.eh_frame:0000000000017041                 db    0
.eh_frame:0000000000017042                 db    0
.eh_frame:0000000000017043                 db    0
.eh_frame:0000000000017044                 db  44h ; D
.eh_frame:0000000000017045                 db  0Ch
.eh_frame:0000000000017046                 db    0
.eh_frame:0000000000017047                 db    0
.eh_frame:0000000000017048                 db 0B8h
.eh_frame:0000000000017049                 db  43h ; C
.eh_frame:000000000001704A                 db 0FFh
.eh_frame:000000000001704B                 db 0FFh
.eh_frame:000000000001704C                 db 0A4h
.eh_frame:000000000001704D                 db    0
.eh_frame:000000000001704E                 db    0
.eh_frame:000000000001704F                 db    0
.eh_frame:0000000000017050                 db    0
.eh_frame:0000000000017051                 db  41h ; A
.eh_frame:0000000000017052                 db  0Eh
.eh_frame:0000000000017053                 db  10h
.eh_frame:0000000000017054                 db  86h
.eh_frame:0000000000017055                 db    2
.eh_frame:0000000000017056                 db  41h ; A
.eh_frame:0000000000017057                 db  0Eh
.eh_frame:0000000000017058                 db  18h
.eh_frame:0000000000017059                 db  83h
.eh_frame:000000000001705A                 db    3
.eh_frame:000000000001705B                 db  44h ; D
.eh_frame:000000000001705C                 db  0Eh
.eh_frame:000000000001705D                 db  20h
.eh_frame:000000000001705E                 db  7Ah ; z
.eh_frame:000000000001705F                 db  0Ah
.eh_frame:0000000000017060                 db  0Eh
.eh_frame:0000000000017061                 db  18h
.eh_frame:0000000000017062                 db  41h ; A
.eh_frame:0000000000017063                 db  0Eh
.eh_frame:0000000000017064                 db  10h
.eh_frame:0000000000017065                 db  41h ; A
.eh_frame:0000000000017066                 db  0Eh
.eh_frame:0000000000017067                 db    8
.eh_frame:0000000000017068                 db  41h ; A
.eh_frame:0000000000017069                 db  0Bh
.eh_frame:000000000001706A                 db    0
.eh_frame:000000000001706B                 db    0
.eh_frame:000000000001706C                 db    0
.eh_frame:000000000001706D                 db    0
.eh_frame:000000000001706E                 db    0
.eh_frame:000000000001706F                 db    0
.eh_frame:0000000000017070                 db  1Ch
.eh_frame:0000000000017071                 db    0
.eh_frame:0000000000017072                 db    0
.eh_frame:0000000000017073                 db    0
.eh_frame:0000000000017074                 db  74h ; t
.eh_frame:0000000000017075                 db  0Ch
.eh_frame:0000000000017076                 db    0
.eh_frame:0000000000017077                 db    0
.eh_frame:0000000000017078                 db  38h ; 8
.eh_frame:0000000000017079                 db  44h ; D
.eh_frame:000000000001707A                 db 0FFh
.eh_frame:000000000001707B                 db 0FFh
.eh_frame:000000000001707C                 db  18h
.eh_frame:000000000001707D                 db    0
.eh_frame:000000000001707E                 db    0
.eh_frame:000000000001707F                 db    0
.eh_frame:0000000000017080                 db    0
.eh_frame:0000000000017081                 db  44h ; D
.eh_frame:0000000000017082                 db  0Eh
.eh_frame:0000000000017083                 db  10h
.eh_frame:0000000000017084                 db  4Eh ; N
.eh_frame:0000000000017085                 db  0Ah
.eh_frame:0000000000017086                 db  0Eh
.eh_frame:0000000000017087                 db    8
.eh_frame:0000000000017088                 db  41h ; A
.eh_frame:0000000000017089                 db  0Bh
.eh_frame:000000000001708A                 db    0
.eh_frame:000000000001708B                 db    0
.eh_frame:000000000001708C                 db    0
.eh_frame:000000000001708D                 db    0
.eh_frame:000000000001708E                 db    0
.eh_frame:000000000001708F                 db    0
.eh_frame:0000000000017090                 db  30h ; 0
.eh_frame:0000000000017091                 db    0
.eh_frame:0000000000017092                 db    0
.eh_frame:0000000000017093                 db    0
.eh_frame:0000000000017094                 db  94h
.eh_frame:0000000000017095                 db  0Ch
.eh_frame:0000000000017096                 db    0
.eh_frame:0000000000017097                 db    0
.eh_frame:0000000000017098                 db  38h ; 8
.eh_frame:0000000000017099                 db  44h ; D
.eh_frame:000000000001709A                 db 0FFh
.eh_frame:000000000001709B                 db 0FFh
.eh_frame:000000000001709C                 db  5Dh ; ]
.eh_frame:000000000001709D                 db    0
.eh_frame:000000000001709E                 db    0
.eh_frame:000000000001709F                 db    0
.eh_frame:00000000000170A0                 db    0
.eh_frame:00000000000170A1                 db  41h ; A
.eh_frame:00000000000170A2                 db  0Eh
.eh_frame:00000000000170A3                 db  10h
.eh_frame:00000000000170A4                 db  86h
.eh_frame:00000000000170A5                 db    2
.eh_frame:00000000000170A6                 db  41h ; A
.eh_frame:00000000000170A7                 db  0Eh
.eh_frame:00000000000170A8                 db  18h
.eh_frame:00000000000170A9                 db  83h
.eh_frame:00000000000170AA                 db    3
.eh_frame:00000000000170AB                 db  49h ; I
.eh_frame:00000000000170AC                 db  0Eh
.eh_frame:00000000000170AD                 db  20h
.eh_frame:00000000000170AE                 db  7Ch ; |
.eh_frame:00000000000170AF                 db  0Ah
.eh_frame:00000000000170B0                 db  0Eh
.eh_frame:00000000000170B1                 db  18h
.eh_frame:00000000000170B2                 db  44h ; D
.eh_frame:00000000000170B3                 db  0Eh
.eh_frame:00000000000170B4                 db  10h
.eh_frame:00000000000170B5                 db  41h ; A
.eh_frame:00000000000170B6                 db  0Eh
.eh_frame:00000000000170B7                 db    8
.eh_frame:00000000000170B8                 db  44h ; D
.eh_frame:00000000000170B9                 db  0Bh
.eh_frame:00000000000170BA                 db  44h ; D
.eh_frame:00000000000170BB                 db  0Eh
.eh_frame:00000000000170BC                 db  18h
.eh_frame:00000000000170BD                 db  47h ; G
.eh_frame:00000000000170BE                 db  0Eh
.eh_frame:00000000000170BF                 db  10h
.eh_frame:00000000000170C0                 db  41h ; A
.eh_frame:00000000000170C1                 db  0Eh
.eh_frame:00000000000170C2                 db    8
.eh_frame:00000000000170C3                 db    0
.eh_frame:00000000000170C4                 db  28h ; (
.eh_frame:00000000000170C5                 db    0
.eh_frame:00000000000170C6                 db    0
.eh_frame:00000000000170C7                 db    0
.eh_frame:00000000000170C8                 db 0C8h
.eh_frame:00000000000170C9                 db  0Ch
.eh_frame:00000000000170CA                 db    0
.eh_frame:00000000000170CB                 db    0
.eh_frame:00000000000170CC                 db  64h ; d
.eh_frame:00000000000170CD                 db  44h ; D
.eh_frame:00000000000170CE                 db 0FFh
.eh_frame:00000000000170CF                 db 0FFh
.eh_frame:00000000000170D0                 db  5Ah ; Z
.eh_frame:00000000000170D1                 db    0
.eh_frame:00000000000170D2                 db    0
.eh_frame:00000000000170D3                 db    0
.eh_frame:00000000000170D4                 db    0
.eh_frame:00000000000170D5                 db  41h ; A
.eh_frame:00000000000170D6                 db  0Eh
.eh_frame:00000000000170D7                 db  10h
.eh_frame:00000000000170D8                 db  86h
.eh_frame:00000000000170D9                 db    2
.eh_frame:00000000000170DA                 db  41h ; A
.eh_frame:00000000000170DB                 db  0Eh
.eh_frame:00000000000170DC                 db  18h
.eh_frame:00000000000170DD                 db  83h
.eh_frame:00000000000170DE                 db    3
.eh_frame:00000000000170DF                 db  47h ; G
.eh_frame:00000000000170E0                 db  0Eh
.eh_frame:00000000000170E1                 db  20h
.eh_frame:00000000000170E2                 db    2
.eh_frame:00000000000170E3                 db  41h ; A
.eh_frame:00000000000170E4                 db  0Ah
.eh_frame:00000000000170E5                 db  0Eh
.eh_frame:00000000000170E6                 db  18h
.eh_frame:00000000000170E7                 db  44h ; D
.eh_frame:00000000000170E8                 db  0Eh
.eh_frame:00000000000170E9                 db  10h
.eh_frame:00000000000170EA                 db  41h ; A
.eh_frame:00000000000170EB                 db  0Eh
.eh_frame:00000000000170EC                 db    8
.eh_frame:00000000000170ED                 db  41h ; A
.eh_frame:00000000000170EE                 db  0Bh
.eh_frame:00000000000170EF                 db    0
.eh_frame:00000000000170F0                 db  10h
.eh_frame:00000000000170F1                 db    0
.eh_frame:00000000000170F2                 db    0
.eh_frame:00000000000170F3                 db    0
.eh_frame:00000000000170F4                 db 0F4h
.eh_frame:00000000000170F5                 db  0Ch
.eh_frame:00000000000170F6                 db    0
.eh_frame:00000000000170F7                 db    0
.eh_frame:00000000000170F8                 db  98h
.eh_frame:00000000000170F9                 db  44h ; D
.eh_frame:00000000000170FA                 db 0FFh
.eh_frame:00000000000170FB                 db 0FFh
.eh_frame:00000000000170FC                 db  5Ch ; \
.eh_frame:00000000000170FD                 db    0
.eh_frame:00000000000170FE                 db    0
.eh_frame:00000000000170FF                 db    0
.eh_frame:0000000000017100                 db    0
.eh_frame:0000000000017101                 db    0
.eh_frame:0000000000017102                 db    0
.eh_frame:0000000000017103                 db    0
.eh_frame:0000000000017104                 db  28h ; (
.eh_frame:0000000000017105                 db    0
.eh_frame:0000000000017106                 db    0
.eh_frame:0000000000017107                 db    0
.eh_frame:0000000000017108                 db    8
.eh_frame:0000000000017109                 db  0Dh
.eh_frame:000000000001710A                 db    0
.eh_frame:000000000001710B                 db    0
.eh_frame:000000000001710C                 db 0E4h
.eh_frame:000000000001710D                 db  44h ; D
.eh_frame:000000000001710E                 db 0FFh
.eh_frame:000000000001710F                 db 0FFh
.eh_frame:0000000000017110                 db  47h ; G
.eh_frame:0000000000017111                 db    0
.eh_frame:0000000000017112                 db    0
.eh_frame:0000000000017113                 db    0
.eh_frame:0000000000017114                 db    0
.eh_frame:0000000000017115                 db  41h ; A
.eh_frame:0000000000017116                 db  0Eh
.eh_frame:0000000000017117                 db  10h
.eh_frame:0000000000017118                 db  83h
.eh_frame:0000000000017119                 db    2
.eh_frame:000000000001711A                 db  5Ah ; Z
.eh_frame:000000000001711B                 db  0Ah
.eh_frame:000000000001711C                 db  0Eh
.eh_frame:000000000001711D                 db    8
.eh_frame:000000000001711E                 db  45h ; E
.eh_frame:000000000001711F                 db  0Bh
.eh_frame:0000000000017120                 db  5Dh ; ]
.eh_frame:0000000000017121                 db  0Ah
.eh_frame:0000000000017122                 db  0Eh
.eh_frame:0000000000017123                 db    8
.eh_frame:0000000000017124                 db  43h ; C
.eh_frame:0000000000017125                 db  0Bh
.eh_frame:0000000000017126                 db  46h ; F
.eh_frame:0000000000017127                 db  0Eh
.eh_frame:0000000000017128                 db    8
.eh_frame:0000000000017129                 db    0
.eh_frame:000000000001712A                 db    0
.eh_frame:000000000001712B                 db    0
.eh_frame:000000000001712C                 db    0
.eh_frame:000000000001712D                 db    0
.eh_frame:000000000001712E                 db    0
.eh_frame:000000000001712F                 db    0
.eh_frame:0000000000017130                 db  24h ; $
.eh_frame:0000000000017131                 db    0
.eh_frame:0000000000017132                 db    0
.eh_frame:0000000000017133                 db    0
.eh_frame:0000000000017134                 db  34h ; 4
.eh_frame:0000000000017135                 db  0Dh
.eh_frame:0000000000017136                 db    0
.eh_frame:0000000000017137                 db    0
.eh_frame:0000000000017138                 db    8
.eh_frame:0000000000017139                 db  45h ; E
.eh_frame:000000000001713A                 db 0FFh
.eh_frame:000000000001713B                 db 0FFh
.eh_frame:000000000001713C                 db  33h ; 3
.eh_frame:000000000001713D                 db    0
.eh_frame:000000000001713E                 db    0
.eh_frame:000000000001713F                 db    0
.eh_frame:0000000000017140                 db    0
.eh_frame:0000000000017141                 db  41h ; A
.eh_frame:0000000000017142                 db  0Eh
.eh_frame:0000000000017143                 db  10h
.eh_frame:0000000000017144                 db  86h
.eh_frame:0000000000017145                 db    2
.eh_frame:0000000000017146                 db  41h ; A
.eh_frame:0000000000017147                 db  0Eh
.eh_frame:0000000000017148                 db  18h
.eh_frame:0000000000017149                 db  83h
.eh_frame:000000000001714A                 db    3
.eh_frame:000000000001714B                 db  47h ; G
.eh_frame:000000000001714C                 db  0Eh
.eh_frame:000000000001714D                 db  20h
.eh_frame:000000000001714E                 db  67h ; g
.eh_frame:000000000001714F                 db  0Eh
.eh_frame:0000000000017150                 db  18h
.eh_frame:0000000000017151                 db  41h ; A
.eh_frame:0000000000017152                 db  0Eh
.eh_frame:0000000000017153                 db  10h
.eh_frame:0000000000017154                 db  41h ; A
.eh_frame:0000000000017155                 db  0Eh
.eh_frame:0000000000017156                 db    8
.eh_frame:0000000000017157                 db    0
.eh_frame:0000000000017158                 db  10h
.eh_frame:0000000000017159                 db    0
.eh_frame:000000000001715A                 db    0
.eh_frame:000000000001715B                 db    0
.eh_frame:000000000001715C                 db  5Ch ; \
.eh_frame:000000000001715D                 db  0Dh
.eh_frame:000000000001715E                 db    0
.eh_frame:000000000001715F                 db    0
.eh_frame:0000000000017160                 db  20h
.eh_frame:0000000000017161                 db  45h ; E
.eh_frame:0000000000017162                 db 0FFh
.eh_frame:0000000000017163                 db 0FFh
.eh_frame:0000000000017164                 db    5
.eh_frame:0000000000017165                 db    0
.eh_frame:0000000000017166                 db    0
.eh_frame:0000000000017167                 db    0
.eh_frame:0000000000017168                 db    0
.eh_frame:0000000000017169                 db    0
.eh_frame:000000000001716A                 db    0
.eh_frame:000000000001716B                 db    0
.eh_frame:000000000001716C                 db  18h
.eh_frame:000000000001716D                 db    0
.eh_frame:000000000001716E                 db    0
.eh_frame:000000000001716F                 db    0
.eh_frame:0000000000017170                 db  70h ; p
.eh_frame:0000000000017171                 db  0Dh
.eh_frame:0000000000017172                 db    0
.eh_frame:0000000000017173                 db    0
.eh_frame:0000000000017174                 db  1Ch
.eh_frame:0000000000017175                 db  45h ; E
.eh_frame:0000000000017176                 db 0FFh
.eh_frame:0000000000017177                 db 0FFh
.eh_frame:0000000000017178                 db  22h ; "
.eh_frame:0000000000017179                 db    0
.eh_frame:000000000001717A                 db    0
.eh_frame:000000000001717B                 db    0
.eh_frame:000000000001717C                 db    0
.eh_frame:000000000001717D                 db  46h ; F
.eh_frame:000000000001717E                 db  0Eh
.eh_frame:000000000001717F                 db  10h
.eh_frame:0000000000017180                 db  83h
.eh_frame:0000000000017181                 db    2
.eh_frame:0000000000017182                 db  4Eh ; N
.eh_frame:0000000000017183                 db 0C3h
.eh_frame:0000000000017184                 db  0Eh
.eh_frame:0000000000017185                 db    8
.eh_frame:0000000000017186                 db    0
.eh_frame:0000000000017187                 db    0
.eh_frame:0000000000017188                 db  1Ch
.eh_frame:0000000000017189                 db    0
.eh_frame:000000000001718A                 db    0
.eh_frame:000000000001718B                 db    0
.eh_frame:000000000001718C                 db  8Ch
.eh_frame:000000000001718D                 db  0Dh
.eh_frame:000000000001718E                 db    0
.eh_frame:000000000001718F                 db    0
.eh_frame:0000000000017190                 db  30h ; 0
.eh_frame:0000000000017191                 db  45h ; E
.eh_frame:0000000000017192                 db 0FFh
.eh_frame:0000000000017193                 db 0FFh
.eh_frame:0000000000017194                 db  6Eh ; n
.eh_frame:0000000000017195                 db    0
.eh_frame:0000000000017196                 db    0
.eh_frame:0000000000017197                 db    0
.eh_frame:0000000000017198                 db    0
.eh_frame:0000000000017199                 db  44h ; D
.eh_frame:000000000001719A                 db  0Eh
.eh_frame:000000000001719B                 db  60h ; `
.eh_frame:000000000001719C                 db  7Fh ; 
.eh_frame:000000000001719D                 db  0Ah
.eh_frame:000000000001719E                 db  0Eh
.eh_frame:000000000001719F                 db    8
.eh_frame:00000000000171A0                 db  45h ; E
.eh_frame:00000000000171A1                 db  0Bh
.eh_frame:00000000000171A2                 db    0
.eh_frame:00000000000171A3                 db    0
.eh_frame:00000000000171A4                 db    0
.eh_frame:00000000000171A5                 db    0
.eh_frame:00000000000171A6                 db    0
.eh_frame:00000000000171A7                 db    0
.eh_frame:00000000000171A8                 db  5Ch ; \
.eh_frame:00000000000171A9                 db    0
.eh_frame:00000000000171AA                 db    0
.eh_frame:00000000000171AB                 db    0
.eh_frame:00000000000171AC                 db 0ACh
.eh_frame:00000000000171AD                 db  0Dh
.eh_frame:00000000000171AE                 db    0
.eh_frame:00000000000171AF                 db    0
.eh_frame:00000000000171B0                 db  80h
.eh_frame:00000000000171B1                 db  45h ; E
.eh_frame:00000000000171B2                 db 0FFh
.eh_frame:00000000000171B3                 db 0FFh
.eh_frame:00000000000171B4                 db  87h
.eh_frame:00000000000171B5                 db    0
.eh_frame:00000000000171B6                 db    0
.eh_frame:00000000000171B7                 db    0
.eh_frame:00000000000171B8                 db    0
.eh_frame:00000000000171B9                 db  47h ; G
.eh_frame:00000000000171BA                 db  0Eh
.eh_frame:00000000000171BB                 db  10h
.eh_frame:00000000000171BC                 db  8Dh
.eh_frame:00000000000171BD                 db    2
.eh_frame:00000000000171BE                 db  42h ; B
.eh_frame:00000000000171BF                 db  0Eh
.eh_frame:00000000000171C0                 db  18h
.eh_frame:00000000000171C1                 db  8Ch
.eh_frame:00000000000171C2                 db    3
.eh_frame:00000000000171C3                 db  44h ; D
.eh_frame:00000000000171C4                 db  0Eh
.eh_frame:00000000000171C5                 db  20h
.eh_frame:00000000000171C6                 db  86h
.eh_frame:00000000000171C7                 db    4
.eh_frame:00000000000171C8                 db  41h ; A
.eh_frame:00000000000171C9                 db  0Eh
.eh_frame:00000000000171CA                 db  28h ; (
.eh_frame:00000000000171CB                 db  83h
.eh_frame:00000000000171CC                 db    5
.eh_frame:00000000000171CD                 db  4Fh ; O
.eh_frame:00000000000171CE                 db  0Eh
.eh_frame:00000000000171CF                 db  30h ; 0
.eh_frame:00000000000171D0                 db  7Ch ; |
.eh_frame:00000000000171D1                 db  0Ah
.eh_frame:00000000000171D2                 db  0Eh
.eh_frame:00000000000171D3                 db  28h ; (
.eh_frame:00000000000171D4                 db  44h ; D
.eh_frame:00000000000171D5                 db 0C3h
.eh_frame:00000000000171D6                 db  0Eh
.eh_frame:00000000000171D7                 db  20h
.eh_frame:00000000000171D8                 db  41h ; A
.eh_frame:00000000000171D9                 db 0C6h
.eh_frame:00000000000171DA                 db  0Eh
.eh_frame:00000000000171DB                 db  18h
.eh_frame:00000000000171DC                 db  42h ; B
.eh_frame:00000000000171DD                 db 0CCh
.eh_frame:00000000000171DE                 db  0Eh
.eh_frame:00000000000171DF                 db  10h
.eh_frame:00000000000171E0                 db  42h ; B
.eh_frame:00000000000171E1                 db 0CDh
.eh_frame:00000000000171E2                 db  0Eh
.eh_frame:00000000000171E3                 db    8
.eh_frame:00000000000171E4                 db  4Eh ; N
.eh_frame:00000000000171E5                 db  0Bh
.eh_frame:00000000000171E6                 db  44h ; D
.eh_frame:00000000000171E7                 db  0Eh
.eh_frame:00000000000171E8                 db  28h ; (
.eh_frame:00000000000171E9                 db  41h ; A
.eh_frame:00000000000171EA                 db  0Eh
.eh_frame:00000000000171EB                 db  20h
.eh_frame:00000000000171EC                 db  41h ; A
.eh_frame:00000000000171ED                 db  0Eh
.eh_frame:00000000000171EE                 db  18h
.eh_frame:00000000000171EF                 db  42h ; B
.eh_frame:00000000000171F0                 db  0Eh
.eh_frame:00000000000171F1                 db  10h
.eh_frame:00000000000171F2                 db  42h ; B
.eh_frame:00000000000171F3                 db  0Eh
.eh_frame:00000000000171F4                 db    8
.eh_frame:00000000000171F5                 db  46h ; F
.eh_frame:00000000000171F6                 db 0C3h
.eh_frame:00000000000171F7                 db 0C6h
.eh_frame:00000000000171F8                 db 0CCh
.eh_frame:00000000000171F9                 db 0CDh
.eh_frame:00000000000171FA                 db  42h ; B
.eh_frame:00000000000171FB                 db  0Eh
.eh_frame:00000000000171FC                 db  30h ; 0
.eh_frame:00000000000171FD                 db  83h
.eh_frame:00000000000171FE                 db    5
.eh_frame:00000000000171FF                 db  86h
.eh_frame:0000000000017200                 db    4
.eh_frame:0000000000017201                 db  8Ch
.eh_frame:0000000000017202                 db    3
.eh_frame:0000000000017203                 db  8Dh
.eh_frame:0000000000017204                 db    2
.eh_frame:0000000000017205                 db    0
.eh_frame:0000000000017206                 db    0
.eh_frame:0000000000017207                 db    0
.eh_frame:0000000000017208                 db  1Ch
.eh_frame:0000000000017209                 db    0
.eh_frame:000000000001720A                 db    0
.eh_frame:000000000001720B                 db    0
.eh_frame:000000000001720C                 db  0Ch
.eh_frame:000000000001720D                 db  0Eh
.eh_frame:000000000001720E                 db    0
.eh_frame:000000000001720F                 db    0
.eh_frame:0000000000017210                 db 0B0h
.eh_frame:0000000000017211                 db  45h ; E
.eh_frame:0000000000017212                 db 0FFh
.eh_frame:0000000000017213                 db 0FFh
.eh_frame:0000000000017214                 db  56h ; V
.eh_frame:0000000000017215                 db    0
.eh_frame:0000000000017216                 db    0
.eh_frame:0000000000017217                 db    0
.eh_frame:0000000000017218                 db    0
.eh_frame:0000000000017219                 db  44h ; D
.eh_frame:000000000001721A                 db  0Eh
.eh_frame:000000000001721B                 db  30h ; 0
.eh_frame:000000000001721C                 db    2
.eh_frame:000000000001721D                 db  4Ch ; L
.eh_frame:000000000001721E                 db  0Ah
.eh_frame:000000000001721F                 db  0Eh
.eh_frame:0000000000017220                 db    8
.eh_frame:0000000000017221                 db  41h ; A
.eh_frame:0000000000017222                 db  0Bh
.eh_frame:0000000000017223                 db    0
.eh_frame:0000000000017224                 db    0
.eh_frame:0000000000017225                 db    0
.eh_frame:0000000000017226                 db    0
.eh_frame:0000000000017227                 db    0
.eh_frame:0000000000017228                 db  10h
.eh_frame:0000000000017229                 db    0
.eh_frame:000000000001722A                 db    0
.eh_frame:000000000001722B                 db    0
.eh_frame:000000000001722C                 db  2Ch ; ,
.eh_frame:000000000001722D                 db  0Eh
.eh_frame:000000000001722E                 db    0
.eh_frame:000000000001722F                 db    0
.eh_frame:0000000000017230                 db 0F0h
.eh_frame:0000000000017231                 db  45h ; E
.eh_frame:0000000000017232                 db 0FFh
.eh_frame:0000000000017233                 db 0FFh
.eh_frame:0000000000017234                 db  83h
.eh_frame:0000000000017235                 db    1
.eh_frame:0000000000017236                 db    0
.eh_frame:0000000000017237                 db    0
.eh_frame:0000000000017238                 db    0
.eh_frame:0000000000017239                 db    0
.eh_frame:000000000001723A                 db    0
.eh_frame:000000000001723B                 db    0
.eh_frame:000000000001723C                 db  10h
.eh_frame:000000000001723D                 db    0
.eh_frame:000000000001723E                 db    0
.eh_frame:000000000001723F                 db    0
.eh_frame:0000000000017240                 db  40h ; @
.eh_frame:0000000000017241                 db  0Eh
.eh_frame:0000000000017242                 db    0
.eh_frame:0000000000017243                 db    0
.eh_frame:0000000000017244                 db  6Ch ; l
.eh_frame:0000000000017245                 db  47h ; G
.eh_frame:0000000000017246                 db 0FFh
.eh_frame:0000000000017247                 db 0FFh
.eh_frame:0000000000017248                 db    8
.eh_frame:0000000000017249                 db    0
.eh_frame:000000000001724A                 db    0
.eh_frame:000000000001724B                 db    0
.eh_frame:000000000001724C                 db    0
.eh_frame:000000000001724D                 db    0
.eh_frame:000000000001724E                 db    0
.eh_frame:000000000001724F                 db    0
.eh_frame:0000000000017250                 db  1Ch
.eh_frame:0000000000017251                 db    0
.eh_frame:0000000000017252                 db    0
.eh_frame:0000000000017253                 db    0
.eh_frame:0000000000017254                 db  54h ; T
.eh_frame:0000000000017255                 db  0Eh
.eh_frame:0000000000017256                 db    0
.eh_frame:0000000000017257                 db    0
.eh_frame:0000000000017258                 db  68h ; h
.eh_frame:0000000000017259                 db  47h ; G
.eh_frame:000000000001725A                 db 0FFh
.eh_frame:000000000001725B                 db 0FFh
.eh_frame:000000000001725C                 db  18h
.eh_frame:000000000001725D                 db    0
.eh_frame:000000000001725E                 db    0
.eh_frame:000000000001725F                 db    0
.eh_frame:0000000000017260                 db    0
.eh_frame:0000000000017261                 db  44h ; D
.eh_frame:0000000000017262                 db  0Eh
.eh_frame:0000000000017263                 db  10h
.eh_frame:0000000000017264                 db  4Eh ; N
.eh_frame:0000000000017265                 db  0Ah
.eh_frame:0000000000017266                 db  0Eh
.eh_frame:0000000000017267                 db    8
.eh_frame:0000000000017268                 db  41h ; A
.eh_frame:0000000000017269                 db  0Bh
.eh_frame:000000000001726A                 db    0
.eh_frame:000000000001726B                 db    0
.eh_frame:000000000001726C                 db    0
.eh_frame:000000000001726D                 db    0
.eh_frame:000000000001726E                 db    0
.eh_frame:000000000001726F                 db    0
.eh_frame:0000000000017270                 db  4Ch ; L
.eh_frame:0000000000017271                 db    0
.eh_frame:0000000000017272                 db    0
.eh_frame:0000000000017273                 db    0
.eh_frame:0000000000017274                 db  74h ; t
.eh_frame:0000000000017275                 db  0Eh
.eh_frame:0000000000017276                 db    0
.eh_frame:0000000000017277                 db    0
.eh_frame:0000000000017278                 db  68h ; h
.eh_frame:0000000000017279                 db  47h ; G
.eh_frame:000000000001727A                 db 0FFh
.eh_frame:000000000001727B                 db 0FFh
.eh_frame:000000000001727C                 db 0FFh
.eh_frame:000000000001727D                 db    0
.eh_frame:000000000001727E                 db    0
.eh_frame:000000000001727F                 db    0
.eh_frame:0000000000017280                 db    0
.eh_frame:0000000000017281                 db  42h ; B
.eh_frame:0000000000017282                 db  0Eh
.eh_frame:0000000000017283                 db  10h
.eh_frame:0000000000017284                 db  8Fh
.eh_frame:0000000000017285                 db    2
.eh_frame:0000000000017286                 db  42h ; B
.eh_frame:0000000000017287                 db  0Eh
.eh_frame:0000000000017288                 db  18h
.eh_frame:0000000000017289                 db  8Eh
.eh_frame:000000000001728A                 db    3
.eh_frame:000000000001728B                 db  45h ; E
.eh_frame:000000000001728C                 db  0Eh
.eh_frame:000000000001728D                 db  20h
.eh_frame:000000000001728E                 db  8Dh
.eh_frame:000000000001728F                 db    4
.eh_frame:0000000000017290                 db  42h ; B
.eh_frame:0000000000017291                 db  0Eh
.eh_frame:0000000000017292                 db  28h ; (
.eh_frame:0000000000017293                 db  8Ch
.eh_frame:0000000000017294                 db    5
.eh_frame:0000000000017295                 db  44h ; D
.eh_frame:0000000000017296                 db  0Eh
.eh_frame:0000000000017297                 db  30h ; 0
.eh_frame:0000000000017298                 db  86h
.eh_frame:0000000000017299                 db    6
.eh_frame:000000000001729A                 db  41h ; A
.eh_frame:000000000001729B                 db  0Eh
.eh_frame:000000000001729C                 db  38h ; 8
.eh_frame:000000000001729D                 db  83h
.eh_frame:000000000001729E                 db    7
.eh_frame:000000000001729F                 db  47h ; G
.eh_frame:00000000000172A0                 db  0Eh
.eh_frame:00000000000172A1                 db  50h ; P
.eh_frame:00000000000172A2                 db    2
.eh_frame:00000000000172A3                 db 0C3h
.eh_frame:00000000000172A4                 db  0Ah
.eh_frame:00000000000172A5                 db  0Eh
.eh_frame:00000000000172A6                 db  38h ; 8
.eh_frame:00000000000172A7                 db  44h ; D
.eh_frame:00000000000172A8                 db  0Eh
.eh_frame:00000000000172A9                 db  30h ; 0
.eh_frame:00000000000172AA                 db  41h ; A
.eh_frame:00000000000172AB                 db  0Eh
.eh_frame:00000000000172AC                 db  28h ; (
.eh_frame:00000000000172AD                 db  42h ; B
.eh_frame:00000000000172AE                 db  0Eh
.eh_frame:00000000000172AF                 db  20h
.eh_frame:00000000000172B0                 db  42h ; B
.eh_frame:00000000000172B1                 db  0Eh
.eh_frame:00000000000172B2                 db  18h
.eh_frame:00000000000172B3                 db  42h ; B
.eh_frame:00000000000172B4                 db  0Eh
.eh_frame:00000000000172B5                 db  10h
.eh_frame:00000000000172B6                 db  42h ; B
.eh_frame:00000000000172B7                 db  0Eh
.eh_frame:00000000000172B8                 db    8
.eh_frame:00000000000172B9                 db  49h ; I
.eh_frame:00000000000172BA                 db  0Bh
.eh_frame:00000000000172BB                 db    0
.eh_frame:00000000000172BC                 db    0
.eh_frame:00000000000172BD                 db    0
.eh_frame:00000000000172BE                 db    0
.eh_frame:00000000000172BF                 db    0
.eh_frame:00000000000172C0                 db  4Ch ; L
.eh_frame:00000000000172C1                 db    0
.eh_frame:00000000000172C2                 db    0
.eh_frame:00000000000172C3                 db    0
.eh_frame:00000000000172C4                 db 0C4h
.eh_frame:00000000000172C5                 db  0Eh
.eh_frame:00000000000172C6                 db    0
.eh_frame:00000000000172C7                 db    0
.eh_frame:00000000000172C8                 db  18h
.eh_frame:00000000000172C9                 db  48h ; H
.eh_frame:00000000000172CA                 db 0FFh
.eh_frame:00000000000172CB                 db 0FFh
.eh_frame:00000000000172CC                 db  76h ; v
.eh_frame:00000000000172CD                 db    0
.eh_frame:00000000000172CE                 db    0
.eh_frame:00000000000172CF                 db    0
.eh_frame:00000000000172D0                 db    0
.eh_frame:00000000000172D1                 db  42h ; B
.eh_frame:00000000000172D2                 db  0Eh
.eh_frame:00000000000172D3                 db  10h
.eh_frame:00000000000172D4                 db  8Dh
.eh_frame:00000000000172D5                 db    2
.eh_frame:00000000000172D6                 db  42h ; B
.eh_frame:00000000000172D7                 db  0Eh
.eh_frame:00000000000172D8                 db  18h
.eh_frame:00000000000172D9                 db  8Ch
.eh_frame:00000000000172DA                 db    3
.eh_frame:00000000000172DB                 db  41h ; A
.eh_frame:00000000000172DC                 db  0Eh
.eh_frame:00000000000172DD                 db  20h
.eh_frame:00000000000172DE                 db  86h
.eh_frame:00000000000172DF                 db    4
.eh_frame:00000000000172E0                 db  41h ; A
.eh_frame:00000000000172E1                 db  0Eh
.eh_frame:00000000000172E2                 db  28h ; (
.eh_frame:00000000000172E3                 db  83h
.eh_frame:00000000000172E4                 db    5
.eh_frame:00000000000172E5                 db  44h ; D
.eh_frame:00000000000172E6                 db  0Eh
.eh_frame:00000000000172E7                 db  30h ; 0
.eh_frame:00000000000172E8                 db  7Eh ; ~
.eh_frame:00000000000172E9                 db  0Ah
.eh_frame:00000000000172EA                 db  0Eh
.eh_frame:00000000000172EB                 db  28h ; (
.eh_frame:00000000000172EC                 db  44h ; D
.eh_frame:00000000000172ED                 db  0Eh
.eh_frame:00000000000172EE                 db  20h
.eh_frame:00000000000172EF                 db  41h ; A
.eh_frame:00000000000172F0                 db  0Eh
.eh_frame:00000000000172F1                 db  18h
.eh_frame:00000000000172F2                 db  42h ; B
.eh_frame:00000000000172F3                 db  0Eh
.eh_frame:00000000000172F4                 db  10h
.eh_frame:00000000000172F5                 db  42h ; B
.eh_frame:00000000000172F6                 db  0Eh
.eh_frame:00000000000172F7                 db    8
.eh_frame:00000000000172F8                 db  47h ; G
.eh_frame:00000000000172F9                 db  0Bh
.eh_frame:00000000000172FA                 db  4Fh ; O
.eh_frame:00000000000172FB                 db  0Ah
.eh_frame:00000000000172FC                 db  0Eh
.eh_frame:00000000000172FD                 db  28h ; (
.eh_frame:00000000000172FE                 db  44h ; D
.eh_frame:00000000000172FF                 db  0Eh
.eh_frame:0000000000017300                 db  20h
.eh_frame:0000000000017301                 db  41h ; A
.eh_frame:0000000000017302                 db  0Eh
.eh_frame:0000000000017303                 db  18h
.eh_frame:0000000000017304                 db  42h ; B
.eh_frame:0000000000017305                 db  0Eh
.eh_frame:0000000000017306                 db  10h
.eh_frame:0000000000017307                 db  42h ; B
.eh_frame:0000000000017308                 db  0Eh
.eh_frame:0000000000017309                 db    8
.eh_frame:000000000001730A                 db  41h ; A
.eh_frame:000000000001730B                 db  0Bh
.eh_frame:000000000001730C                 db    0
.eh_frame:000000000001730D                 db    0
.eh_frame:000000000001730E                 db    0
.eh_frame:000000000001730F                 db    0
.eh_frame:0000000000017310                 db  10h
.eh_frame:0000000000017311                 db    0
.eh_frame:0000000000017312                 db    0
.eh_frame:0000000000017313                 db    0
.eh_frame:0000000000017314                 db  14h
.eh_frame:0000000000017315                 db  0Fh
.eh_frame:0000000000017316                 db    0
.eh_frame:0000000000017317                 db    0
.eh_frame:0000000000017318                 db  48h ; H
.eh_frame:0000000000017319                 db  48h ; H
.eh_frame:000000000001731A                 db 0FFh
.eh_frame:000000000001731B                 db 0FFh
.eh_frame:000000000001731C                 db  93h
.eh_frame:000000000001731D                 db    0
.eh_frame:000000000001731E                 db    0
.eh_frame:000000000001731F                 db    0
.eh_frame:0000000000017320                 db    0
.eh_frame:0000000000017321                 db    0
.eh_frame:0000000000017322                 db    0
.eh_frame:0000000000017323                 db    0
.eh_frame:0000000000017324                 db  10h
.eh_frame:0000000000017325                 db    0
.eh_frame:0000000000017326                 db    0
.eh_frame:0000000000017327                 db    0
.eh_frame:0000000000017328                 db  28h ; (
.eh_frame:0000000000017329                 db  0Fh
.eh_frame:000000000001732A                 db    0
.eh_frame:000000000001732B                 db    0
.eh_frame:000000000001732C                 db 0D4h
.eh_frame:000000000001732D                 db  48h ; H
.eh_frame:000000000001732E                 db 0FFh
.eh_frame:000000000001732F                 db 0FFh
.eh_frame:0000000000017330                 db  10h
.eh_frame:0000000000017331                 db    0
.eh_frame:0000000000017332                 db    0
.eh_frame:0000000000017333                 db    0
.eh_frame:0000000000017334                 db    0
.eh_frame:0000000000017335                 db    0
.eh_frame:0000000000017336                 db    0
.eh_frame:0000000000017337                 db    0
.eh_frame:0000000000017338                 db  10h
.eh_frame:0000000000017339                 db    0
.eh_frame:000000000001733A                 db    0
.eh_frame:000000000001733B                 db    0
.eh_frame:000000000001733C                 db  3Ch ; <
.eh_frame:000000000001733D                 db  0Fh
.eh_frame:000000000001733E                 db    0
.eh_frame:000000000001733F                 db    0
.eh_frame:0000000000017340                 db 0D0h
.eh_frame:0000000000017341                 db  48h ; H
.eh_frame:0000000000017342                 db 0FFh
.eh_frame:0000000000017343                 db 0FFh
.eh_frame:0000000000017344                 db    7
.eh_frame:0000000000017345                 db    0
.eh_frame:0000000000017346                 db    0
.eh_frame:0000000000017347                 db    0
.eh_frame:0000000000017348                 db    0
.eh_frame:0000000000017349                 db    0
.eh_frame:000000000001734A                 db    0
.eh_frame:000000000001734B                 db    0
.eh_frame:000000000001734C                 db  18h
.eh_frame:000000000001734D                 db    0
.eh_frame:000000000001734E                 db    0
.eh_frame:000000000001734F                 db    0
.eh_frame:0000000000017350                 db  50h ; P
.eh_frame:0000000000017351                 db  0Fh
.eh_frame:0000000000017352                 db    0
.eh_frame:0000000000017353                 db    0
.eh_frame:0000000000017354                 db 0CCh
.eh_frame:0000000000017355                 db  48h ; H
.eh_frame:0000000000017356                 db 0FFh
.eh_frame:0000000000017357                 db 0FFh
.eh_frame:0000000000017358                 db  22h ; "
.eh_frame:0000000000017359                 db    0
.eh_frame:000000000001735A                 db    0
.eh_frame:000000000001735B                 db    0
.eh_frame:000000000001735C                 db    0
.eh_frame:000000000001735D                 db  41h ; A
.eh_frame:000000000001735E                 db  0Eh
.eh_frame:000000000001735F                 db  10h
.eh_frame:0000000000017360                 db  83h
.eh_frame:0000000000017361                 db    2
.eh_frame:0000000000017362                 db  5Bh ; [
.eh_frame:0000000000017363                 db  0Ah
.eh_frame:0000000000017364                 db  0Eh
.eh_frame:0000000000017365                 db    8
.eh_frame:0000000000017366                 db  41h ; A
.eh_frame:0000000000017367                 db  0Bh
.eh_frame:0000000000017368                 db  5Ch ; \
.eh_frame:0000000000017369                 db    0
.eh_frame:000000000001736A                 db    0
.eh_frame:000000000001736B                 db    0
.eh_frame:000000000001736C                 db  6Ch ; l
.eh_frame:000000000001736D                 db  0Fh
.eh_frame:000000000001736E                 db    0
.eh_frame:000000000001736F                 db    0
.eh_frame:0000000000017370                 db 0E0h
.eh_frame:0000000000017371                 db  48h ; H
.eh_frame:0000000000017372                 db 0FFh
.eh_frame:0000000000017373                 db 0FFh
.eh_frame:0000000000017374                 db  1Eh
.eh_frame:0000000000017375                 db    1
.eh_frame:0000000000017376                 db    0
.eh_frame:0000000000017377                 db    0
.eh_frame:0000000000017378                 db    0
.eh_frame:0000000000017379                 db  42h ; B
.eh_frame:000000000001737A                 db  0Eh
.eh_frame:000000000001737B                 db  10h
.eh_frame:000000000001737C                 db  8Eh
.eh_frame:000000000001737D                 db    2
.eh_frame:000000000001737E                 db  42h ; B
.eh_frame:000000000001737F                 db  0Eh
.eh_frame:0000000000017380                 db  18h
.eh_frame:0000000000017381                 db  8Dh
.eh_frame:0000000000017382                 db    3
.eh_frame:0000000000017383                 db  45h ; E
.eh_frame:0000000000017384                 db  0Eh
.eh_frame:0000000000017385                 db  20h
.eh_frame:0000000000017386                 db  8Ch
.eh_frame:0000000000017387                 db    4
.eh_frame:0000000000017388                 db  41h ; A
.eh_frame:0000000000017389                 db  0Eh
.eh_frame:000000000001738A                 db  28h ; (
.eh_frame:000000000001738B                 db  86h
.eh_frame:000000000001738C                 db    5
.eh_frame:000000000001738D                 db  44h ; D
.eh_frame:000000000001738E                 db  0Eh
.eh_frame:000000000001738F                 db  30h ; 0
.eh_frame:0000000000017390                 db  83h
.eh_frame:0000000000017391                 db    6
.eh_frame:0000000000017392                 db    2
.eh_frame:0000000000017393                 db 0A1h
.eh_frame:0000000000017394                 db  0Ah
.eh_frame:0000000000017395                 db  0Eh
.eh_frame:0000000000017396                 db  28h ; (
.eh_frame:0000000000017397                 db  44h ; D
.eh_frame:0000000000017398                 db  0Eh
.eh_frame:0000000000017399                 db  20h
.eh_frame:000000000001739A                 db  42h ; B
.eh_frame:000000000001739B                 db  0Eh
.eh_frame:000000000001739C                 db  18h
.eh_frame:000000000001739D                 db  42h ; B
.eh_frame:000000000001739E                 db  0Eh
.eh_frame:000000000001739F                 db  10h
.eh_frame:00000000000173A0                 db  42h ; B
.eh_frame:00000000000173A1                 db  0Eh
.eh_frame:00000000000173A2                 db    8
.eh_frame:00000000000173A3                 db  47h ; G
.eh_frame:00000000000173A4                 db  0Bh
.eh_frame:00000000000173A5                 db  71h ; q
.eh_frame:00000000000173A6                 db  0Ah
.eh_frame:00000000000173A7                 db  0Eh
.eh_frame:00000000000173A8                 db  28h ; (
.eh_frame:00000000000173A9                 db  41h ; A
.eh_frame:00000000000173AA                 db  0Eh
.eh_frame:00000000000173AB                 db  20h
.eh_frame:00000000000173AC                 db  42h ; B
.eh_frame:00000000000173AD                 db  0Eh
.eh_frame:00000000000173AE                 db  18h
.eh_frame:00000000000173AF                 db  42h ; B
.eh_frame:00000000000173B0                 db  0Eh
.eh_frame:00000000000173B1                 db  10h
.eh_frame:00000000000173B2                 db  42h ; B
.eh_frame:00000000000173B3                 db  0Eh
.eh_frame:00000000000173B4                 db    8
.eh_frame:00000000000173B5                 db  48h ; H
.eh_frame:00000000000173B6                 db  0Bh
.eh_frame:00000000000173B7                 db  53h ; S
.eh_frame:00000000000173B8                 db  0Eh
.eh_frame:00000000000173B9                 db  28h ; (
.eh_frame:00000000000173BA                 db  44h ; D
.eh_frame:00000000000173BB                 db  0Eh
.eh_frame:00000000000173BC                 db  20h
.eh_frame:00000000000173BD                 db  42h ; B
.eh_frame:00000000000173BE                 db  0Eh
.eh_frame:00000000000173BF                 db  18h
.eh_frame:00000000000173C0                 db  42h ; B
.eh_frame:00000000000173C1                 db  0Eh
.eh_frame:00000000000173C2                 db  10h
.eh_frame:00000000000173C3                 db  42h ; B
.eh_frame:00000000000173C4                 db  0Eh
.eh_frame:00000000000173C5                 db    8
.eh_frame:00000000000173C6                 db    0
.eh_frame:00000000000173C7                 db    0
.eh_frame:00000000000173C8                 db  10h
.eh_frame:00000000000173C9                 db    0
.eh_frame:00000000000173CA                 db    0
.eh_frame:00000000000173CB                 db    0
.eh_frame:00000000000173CC                 db 0CCh
.eh_frame:00000000000173CD                 db  0Fh
.eh_frame:00000000000173CE                 db    0
.eh_frame:00000000000173CF                 db    0
.eh_frame:00000000000173D0                 db 0A0h
.eh_frame:00000000000173D1                 db  49h ; I
.eh_frame:00000000000173D2                 db 0FFh
.eh_frame:00000000000173D3                 db 0FFh
.eh_frame:00000000000173D4                 db  77h ; w
.eh_frame:00000000000173D5                 db    0
.eh_frame:00000000000173D6                 db    0
.eh_frame:00000000000173D7                 db    0
.eh_frame:00000000000173D8                 db    0
.eh_frame:00000000000173D9                 db    0
.eh_frame:00000000000173DA                 db    0
.eh_frame:00000000000173DB                 db    0
.eh_frame:00000000000173DC                 db  5Ch ; \
.eh_frame:00000000000173DD                 db    0
.eh_frame:00000000000173DE                 db    0
.eh_frame:00000000000173DF                 db    0
.eh_frame:00000000000173E0                 db 0E0h
.eh_frame:00000000000173E1                 db  0Fh
.eh_frame:00000000000173E2                 db    0
.eh_frame:00000000000173E3                 db    0
.eh_frame:00000000000173E4                 db  0Ch
.eh_frame:00000000000173E5                 db  4Ah ; J
.eh_frame:00000000000173E6                 db 0FFh
.eh_frame:00000000000173E7                 db 0FFh
.eh_frame:00000000000173E8                 db  40h ; @
.eh_frame:00000000000173E9                 db    1
.eh_frame:00000000000173EA                 db    0
.eh_frame:00000000000173EB                 db    0
.eh_frame:00000000000173EC                 db    0
.eh_frame:00000000000173ED                 db  42h ; B
.eh_frame:00000000000173EE                 db  0Eh
.eh_frame:00000000000173EF                 db  10h
.eh_frame:00000000000173F0                 db  8Fh
.eh_frame:00000000000173F1                 db    2
.eh_frame:00000000000173F2                 db  42h ; B
.eh_frame:00000000000173F3                 db  0Eh
.eh_frame:00000000000173F4                 db  18h
.eh_frame:00000000000173F5                 db  8Eh
.eh_frame:00000000000173F6                 db    3
.eh_frame:00000000000173F7                 db  42h ; B
.eh_frame:00000000000173F8                 db  0Eh
.eh_frame:00000000000173F9                 db  20h
.eh_frame:00000000000173FA                 db  8Dh
.eh_frame:00000000000173FB                 db    4
.eh_frame:00000000000173FC                 db  42h ; B
.eh_frame:00000000000173FD                 db  0Eh
.eh_frame:00000000000173FE                 db  28h ; (
.eh_frame:00000000000173FF                 db  8Ch
.eh_frame:0000000000017400                 db    5
.eh_frame:0000000000017401                 db  41h ; A
.eh_frame:0000000000017402                 db  0Eh
.eh_frame:0000000000017403                 db  30h ; 0
.eh_frame:0000000000017404                 db  86h
.eh_frame:0000000000017405                 db    6
.eh_frame:0000000000017406                 db  41h ; A
.eh_frame:0000000000017407                 db  0Eh
.eh_frame:0000000000017408                 db  38h ; 8
.eh_frame:0000000000017409                 db  83h
.eh_frame:000000000001740A                 db    7
.eh_frame:000000000001740B                 db  44h ; D
.eh_frame:000000000001740C                 db  0Eh
.eh_frame:000000000001740D                 db  40h ; @
.eh_frame:000000000001740E                 db    2
.eh_frame:000000000001740F                 db 0EEh
.eh_frame:0000000000017410                 db  0Ah
.eh_frame:0000000000017411                 db  0Eh
.eh_frame:0000000000017412                 db  38h ; 8
.eh_frame:0000000000017413                 db  46h ; F
.eh_frame:0000000000017414                 db  0Eh
.eh_frame:0000000000017415                 db  30h ; 0
.eh_frame:0000000000017416                 db  41h ; A
.eh_frame:0000000000017417                 db  0Eh
.eh_frame:0000000000017418                 db  28h ; (
.eh_frame:0000000000017419                 db  42h ; B
.eh_frame:000000000001741A                 db  0Eh
.eh_frame:000000000001741B                 db  20h
.eh_frame:000000000001741C                 db  42h ; B
.eh_frame:000000000001741D                 db  0Eh
.eh_frame:000000000001741E                 db  18h
.eh_frame:000000000001741F                 db  42h ; B
.eh_frame:0000000000017420                 db  0Eh
.eh_frame:0000000000017421                 db  10h
.eh_frame:0000000000017422                 db  42h ; B
.eh_frame:0000000000017423                 db  0Eh
.eh_frame:0000000000017424                 db    8
.eh_frame:0000000000017425                 db  45h ; E
.eh_frame:0000000000017426                 db  0Bh
.eh_frame:0000000000017427                 db  63h ; c
.eh_frame:0000000000017428                 db  0Eh
.eh_frame:0000000000017429                 db  38h ; 8
.eh_frame:000000000001742A                 db  43h ; C
.eh_frame:000000000001742B                 db  0Eh
.eh_frame:000000000001742C                 db  30h ; 0
.eh_frame:000000000001742D                 db  41h ; A
.eh_frame:000000000001742E                 db  0Eh
.eh_frame:000000000001742F                 db  28h ; (
.eh_frame:0000000000017430                 db  42h ; B
.eh_frame:0000000000017431                 db  0Eh
.eh_frame:0000000000017432                 db  20h
.eh_frame:0000000000017433                 db  42h ; B
.eh_frame:0000000000017434                 db  0Eh
.eh_frame:0000000000017435                 db  18h
.eh_frame:0000000000017436                 db  42h ; B
.eh_frame:0000000000017437                 db  0Eh
.eh_frame:0000000000017438                 db  10h
.eh_frame:0000000000017439                 db  42h ; B
.eh_frame:000000000001743A                 db  0Eh
.eh_frame:000000000001743B                 db    8
.eh_frame:000000000001743C                 db  10h
.eh_frame:000000000001743D                 db    0
.eh_frame:000000000001743E                 db    0
.eh_frame:000000000001743F                 db    0
.eh_frame:0000000000017440                 db  40h ; @
.eh_frame:0000000000017441                 db  10h
.eh_frame:0000000000017442                 db    0
.eh_frame:0000000000017443                 db    0
.eh_frame:0000000000017444                 db 0ECh
.eh_frame:0000000000017445                 db  4Ah ; J
.eh_frame:0000000000017446                 db 0FFh
.eh_frame:0000000000017447                 db 0FFh
.eh_frame:0000000000017448                 db    5
.eh_frame:0000000000017449                 db    0
.eh_frame:000000000001744A                 db    0
.eh_frame:000000000001744B                 db    0
.eh_frame:000000000001744C                 db    0
.eh_frame:000000000001744D                 db    0
.eh_frame:000000000001744E                 db    0
.eh_frame:000000000001744F                 db    0
.eh_frame:0000000000017450                 db  10h
.eh_frame:0000000000017451                 db    0
.eh_frame:0000000000017452                 db    0
.eh_frame:0000000000017453                 db    0
.eh_frame:0000000000017454                 db  54h ; T
.eh_frame:0000000000017455                 db  10h
.eh_frame:0000000000017456                 db    0
.eh_frame:0000000000017457                 db    0
.eh_frame:0000000000017458                 db 0E8h
.eh_frame:0000000000017459                 db  4Ah ; J
.eh_frame:000000000001745A                 db 0FFh
.eh_frame:000000000001745B                 db 0FFh
.eh_frame:000000000001745C                 db    5
.eh_frame:000000000001745D                 db    0
.eh_frame:000000000001745E                 db    0
.eh_frame:000000000001745F                 db    0
.eh_frame:0000000000017460                 db    0
.eh_frame:0000000000017461                 db    0
.eh_frame:0000000000017462                 db    0
.eh_frame:0000000000017463                 db    0
.eh_frame:0000000000017464                 db  10h
.eh_frame:0000000000017465                 db    0
.eh_frame:0000000000017466                 db    0
.eh_frame:0000000000017467                 db    0
.eh_frame:0000000000017468                 db  68h ; h
.eh_frame:0000000000017469                 db  10h
.eh_frame:000000000001746A                 db    0
.eh_frame:000000000001746B                 db    0
.eh_frame:000000000001746C                 db 0E4h
.eh_frame:000000000001746D                 db  4Ah ; J
.eh_frame:000000000001746E                 db 0FFh
.eh_frame:000000000001746F                 db 0FFh
.eh_frame:0000000000017470                 db    5
.eh_frame:0000000000017471                 db    0
.eh_frame:0000000000017472                 db    0
.eh_frame:0000000000017473                 db    0
.eh_frame:0000000000017474                 db    0
.eh_frame:0000000000017475                 db    0
.eh_frame:0000000000017476                 db    0
.eh_frame:0000000000017477                 db    0
.eh_frame:0000000000017478                 db  10h
.eh_frame:0000000000017479                 db    0
.eh_frame:000000000001747A                 db    0
.eh_frame:000000000001747B                 db    0
.eh_frame:000000000001747C                 db  7Ch ; |
.eh_frame:000000000001747D                 db  10h
.eh_frame:000000000001747E                 db    0
.eh_frame:000000000001747F                 db    0
.eh_frame:0000000000017480                 db 0E0h
.eh_frame:0000000000017481                 db  4Ah ; J
.eh_frame:0000000000017482                 db 0FFh
.eh_frame:0000000000017483                 db 0FFh
.eh_frame:0000000000017484                 db  49h ; I
.eh_frame:0000000000017485                 db    0
.eh_frame:0000000000017486                 db    0
.eh_frame:0000000000017487                 db    0
.eh_frame:0000000000017488                 db    0
.eh_frame:0000000000017489                 db    0
.eh_frame:000000000001748A                 db    0
.eh_frame:000000000001748B                 db    0
.eh_frame:000000000001748C                 db  10h
.eh_frame:000000000001748D                 db    0
.eh_frame:000000000001748E                 db    0
.eh_frame:000000000001748F                 db    0
.eh_frame:0000000000017490                 db  90h
.eh_frame:0000000000017491                 db  10h
.eh_frame:0000000000017492                 db    0
.eh_frame:0000000000017493                 db    0
.eh_frame:0000000000017494                 db  1Ch
.eh_frame:0000000000017495                 db  4Bh ; K
.eh_frame:0000000000017496                 db 0FFh
.eh_frame:0000000000017497                 db 0FFh
.eh_frame:0000000000017498                 db  58h ; X
.eh_frame:0000000000017499                 db    0
.eh_frame:000000000001749A                 db    0
.eh_frame:000000000001749B                 db    0
.eh_frame:000000000001749C                 db    0
.eh_frame:000000000001749D                 db    0
.eh_frame:000000000001749E                 db    0
.eh_frame:000000000001749F                 db    0
.eh_frame:00000000000174A0                 db  38h ; 8
.eh_frame:00000000000174A1                 db    0
.eh_frame:00000000000174A2                 db    0
.eh_frame:00000000000174A3                 db    0
.eh_frame:00000000000174A4                 db 0A4h
.eh_frame:00000000000174A5                 db  10h
.eh_frame:00000000000174A6                 db    0
.eh_frame:00000000000174A7                 db    0
.eh_frame:00000000000174A8                 db  68h ; h
.eh_frame:00000000000174A9                 db  4Bh ; K
.eh_frame:00000000000174AA                 db 0FFh
.eh_frame:00000000000174AB                 db 0FFh
.eh_frame:00000000000174AC                 db  47h ; G
.eh_frame:00000000000174AD                 db    1
.eh_frame:00000000000174AE                 db    0
.eh_frame:00000000000174AF                 db    0
.eh_frame:00000000000174B0                 db    0
.eh_frame:00000000000174B1                 db  42h ; B
.eh_frame:00000000000174B2                 db  0Eh
.eh_frame:00000000000174B3                 db  10h
.eh_frame:00000000000174B4                 db  8Dh
.eh_frame:00000000000174B5                 db    2
.eh_frame:00000000000174B6                 db  42h ; B
.eh_frame:00000000000174B7                 db  0Eh
.eh_frame:00000000000174B8                 db  18h
.eh_frame:00000000000174B9                 db  8Ch
.eh_frame:00000000000174BA                 db    3
.eh_frame:00000000000174BB                 db  44h ; D
.eh_frame:00000000000174BC                 db  0Eh
.eh_frame:00000000000174BD                 db  20h
.eh_frame:00000000000174BE                 db  86h
.eh_frame:00000000000174BF                 db    4
.eh_frame:00000000000174C0                 db  41h ; A
.eh_frame:00000000000174C1                 db  0Eh
.eh_frame:00000000000174C2                 db  28h ; (
.eh_frame:00000000000174C3                 db  83h
.eh_frame:00000000000174C4                 db    5
.eh_frame:00000000000174C5                 db  46h ; F
.eh_frame:00000000000174C6                 db  0Eh
.eh_frame:00000000000174C7                 db  30h ; 0
.eh_frame:00000000000174C8                 db    2
.eh_frame:00000000000174C9                 db 0CDh
.eh_frame:00000000000174CA                 db  0Ah
.eh_frame:00000000000174CB                 db  0Eh
.eh_frame:00000000000174CC                 db  28h ; (
.eh_frame:00000000000174CD                 db  47h ; G
.eh_frame:00000000000174CE                 db  0Eh
.eh_frame:00000000000174CF                 db  20h
.eh_frame:00000000000174D0                 db  41h ; A
.eh_frame:00000000000174D1                 db  0Eh
.eh_frame:00000000000174D2                 db  18h
.eh_frame:00000000000174D3                 db  42h ; B
.eh_frame:00000000000174D4                 db  0Eh
.eh_frame:00000000000174D5                 db  10h
.eh_frame:00000000000174D6                 db  42h ; B
.eh_frame:00000000000174D7                 db  0Eh
.eh_frame:00000000000174D8                 db    8
.eh_frame:00000000000174D9                 db  58h ; X
.eh_frame:00000000000174DA                 db  0Bh
.eh_frame:00000000000174DB                 db    0
.eh_frame:00000000000174DC                 db  34h ; 4
.eh_frame:00000000000174DD                 db    0
.eh_frame:00000000000174DE                 db    0
.eh_frame:00000000000174DF                 db    0
.eh_frame:00000000000174E0                 db 0E0h
.eh_frame:00000000000174E1                 db  10h
.eh_frame:00000000000174E2                 db    0
.eh_frame:00000000000174E3                 db    0
.eh_frame:00000000000174E4                 db  7Ch ; |
.eh_frame:00000000000174E5                 db  4Ch ; L
.eh_frame:00000000000174E6                 db 0FFh
.eh_frame:00000000000174E7                 db 0FFh
.eh_frame:00000000000174E8                 db  5Bh ; [
.eh_frame:00000000000174E9                 db    0
.eh_frame:00000000000174EA                 db    0
.eh_frame:00000000000174EB                 db    0
.eh_frame:00000000000174EC                 db    0
.eh_frame:00000000000174ED                 db  42h ; B
.eh_frame:00000000000174EE                 db  0Eh
.eh_frame:00000000000174EF                 db  10h
.eh_frame:00000000000174F0                 db  8Ch
.eh_frame:00000000000174F1                 db    2
.eh_frame:00000000000174F2                 db  41h ; A
.eh_frame:00000000000174F3                 db  0Eh
.eh_frame:00000000000174F4                 db  18h
.eh_frame:00000000000174F5                 db  86h
.eh_frame:00000000000174F6                 db    3
.eh_frame:00000000000174F7                 db  44h ; D
.eh_frame:00000000000174F8                 db  0Eh
.eh_frame:00000000000174F9                 db  20h
.eh_frame:00000000000174FA                 db  83h
.eh_frame:00000000000174FB                 db    4
.eh_frame:00000000000174FC                 db  79h ; y
.eh_frame:00000000000174FD                 db  0Ah
.eh_frame:00000000000174FE                 db  0Eh
.eh_frame:00000000000174FF                 db  18h
.eh_frame:0000000000017500                 db  44h ; D
.eh_frame:0000000000017501                 db  0Eh
.eh_frame:0000000000017502                 db  10h
.eh_frame:0000000000017503                 db  42h ; B
.eh_frame:0000000000017504                 db  0Eh
.eh_frame:0000000000017505                 db    8
.eh_frame:0000000000017506                 db  4Ah ; J
.eh_frame:0000000000017507                 db  0Bh
.eh_frame:0000000000017508                 db  44h ; D
.eh_frame:0000000000017509                 db  0Eh
.eh_frame:000000000001750A                 db  18h
.eh_frame:000000000001750B                 db  41h ; A
.eh_frame:000000000001750C                 db  0Eh
.eh_frame:000000000001750D                 db  10h
.eh_frame:000000000001750E                 db  45h ; E
.eh_frame:000000000001750F                 db  0Eh
.eh_frame:0000000000017510                 db    8
.eh_frame:0000000000017511                 db    0
.eh_frame:0000000000017512                 db    0
.eh_frame:0000000000017513                 db    0
.eh_frame:0000000000017514                 db  10h
.eh_frame:0000000000017515                 db    0
.eh_frame:0000000000017516                 db    0
.eh_frame:0000000000017517                 db    0
.eh_frame:0000000000017518                 db  18h
.eh_frame:0000000000017519                 db  11h
.eh_frame:000000000001751A                 db    0
.eh_frame:000000000001751B                 db    0
.eh_frame:000000000001751C                 db 0A4h
.eh_frame:000000000001751D                 db  4Ch ; L
.eh_frame:000000000001751E                 db 0FFh
.eh_frame:000000000001751F                 db 0FFh
.eh_frame:0000000000017520                 db  41h ; A
.eh_frame:0000000000017521                 db    0
.eh_frame:0000000000017522                 db    0
.eh_frame:0000000000017523                 db    0
.eh_frame:0000000000017524                 db    0
.eh_frame:0000000000017525                 db  7Ch ; |
.eh_frame:0000000000017526                 db  0Eh
.eh_frame:0000000000017527                 db  10h
.eh_frame:0000000000017528                 db  30h ; 0
.eh_frame:0000000000017529                 db    0
.eh_frame:000000000001752A                 db    0
.eh_frame:000000000001752B                 db    0
.eh_frame:000000000001752C                 db  2Ch ; ,
.eh_frame:000000000001752D                 db  11h
.eh_frame:000000000001752E                 db    0
.eh_frame:000000000001752F                 db    0
.eh_frame:0000000000017530                 db 0E0h
.eh_frame:0000000000017531                 db  4Ch ; L
.eh_frame:0000000000017532                 db 0FFh
.eh_frame:0000000000017533                 db 0FFh
.eh_frame:0000000000017534                 db  72h ; r
.eh_frame:0000000000017535                 db    0
.eh_frame:0000000000017536                 db    0
.eh_frame:0000000000017537                 db    0
.eh_frame:0000000000017538                 db    0
.eh_frame:0000000000017539                 db  41h ; A
.eh_frame:000000000001753A                 db  0Eh
.eh_frame:000000000001753B                 db  10h
.eh_frame:000000000001753C                 db  86h
.eh_frame:000000000001753D                 db    2
.eh_frame:000000000001753E                 db  41h ; A
.eh_frame:000000000001753F                 db  0Eh
.eh_frame:0000000000017540                 db  18h
.eh_frame:0000000000017541                 db  83h
.eh_frame:0000000000017542                 db    3
.eh_frame:0000000000017543                 db  4Ah ; J
.eh_frame:0000000000017544                 db  0Eh
.eh_frame:0000000000017545                 db  20h
.eh_frame:0000000000017546                 db    2
.eh_frame:0000000000017547                 db  53h ; S
.eh_frame:0000000000017548                 db  0Ah
.eh_frame:0000000000017549                 db  0Eh
.eh_frame:000000000001754A                 db  18h
.eh_frame:000000000001754B                 db  41h ; A
.eh_frame:000000000001754C                 db  0Eh
.eh_frame:000000000001754D                 db  10h
.eh_frame:000000000001754E                 db  41h ; A
.eh_frame:000000000001754F                 db  0Eh
.eh_frame:0000000000017550                 db    8
.eh_frame:0000000000017551                 db  47h ; G
.eh_frame:0000000000017552                 db  0Bh
.eh_frame:0000000000017553                 db  47h ; G
.eh_frame:0000000000017554                 db  0Eh
.eh_frame:0000000000017555                 db  18h
.eh_frame:0000000000017556                 db  41h ; A
.eh_frame:0000000000017557                 db  0Eh
.eh_frame:0000000000017558                 db  10h
.eh_frame:0000000000017559                 db  41h ; A
.eh_frame:000000000001755A                 db  0Eh
.eh_frame:000000000001755B                 db    8
.eh_frame:000000000001755C                 db  10h
.eh_frame:000000000001755D                 db    0
.eh_frame:000000000001755E                 db    0
.eh_frame:000000000001755F                 db    0
.eh_frame:0000000000017560                 db  60h ; `
.eh_frame:0000000000017561                 db  11h
.eh_frame:0000000000017562                 db    0
.eh_frame:0000000000017563                 db    0
.eh_frame:0000000000017564                 db  2Ch ; ,
.eh_frame:0000000000017565                 db  4Dh ; M
.eh_frame:0000000000017566                 db 0FFh
.eh_frame:0000000000017567                 db 0FFh
.eh_frame:0000000000017568                 db  65h ; e
.eh_frame:0000000000017569                 db    0
.eh_frame:000000000001756A                 db    0
.eh_frame:000000000001756B                 db    0
.eh_frame:000000000001756C                 db    0
.eh_frame:000000000001756D                 db    0
.eh_frame:000000000001756E                 db    0
.eh_frame:000000000001756F                 db    0
.eh_frame:0000000000017570                 db  48h ; H
.eh_frame:0000000000017571                 db    0
.eh_frame:0000000000017572                 db    0
.eh_frame:0000000000017573                 db    0
.eh_frame:0000000000017574                 db  74h ; t
.eh_frame:0000000000017575                 db  11h
.eh_frame:0000000000017576                 db    0
.eh_frame:0000000000017577                 db    0
.eh_frame:0000000000017578                 db  88h
.eh_frame:0000000000017579                 db  4Dh ; M
.eh_frame:000000000001757A                 db 0FFh
.eh_frame:000000000001757B                 db 0FFh
.eh_frame:000000000001757C                 db  6Ah ; j
.eh_frame:000000000001757D                 db    0
.eh_frame:000000000001757E                 db    0
.eh_frame:000000000001757F                 db    0
.eh_frame:0000000000017580                 db    0
.eh_frame:0000000000017581                 db  42h ; B
.eh_frame:0000000000017582                 db  0Eh
.eh_frame:0000000000017583                 db  10h
.eh_frame:0000000000017584                 db  8Fh
.eh_frame:0000000000017585                 db    2
.eh_frame:0000000000017586                 db  42h ; B
.eh_frame:0000000000017587                 db  0Eh
.eh_frame:0000000000017588                 db  18h
.eh_frame:0000000000017589                 db  8Eh
.eh_frame:000000000001758A                 db    3
.eh_frame:000000000001758B                 db  42h ; B
.eh_frame:000000000001758C                 db  0Eh
.eh_frame:000000000001758D                 db  20h
.eh_frame:000000000001758E                 db  8Dh
.eh_frame:000000000001758F                 db    4
.eh_frame:0000000000017590                 db  42h ; B
.eh_frame:0000000000017591                 db  0Eh
.eh_frame:0000000000017592                 db  28h ; (
.eh_frame:0000000000017593                 db  8Ch
.eh_frame:0000000000017594                 db    5
.eh_frame:0000000000017595                 db  41h ; A
.eh_frame:0000000000017596                 db  0Eh
.eh_frame:0000000000017597                 db  30h ; 0
.eh_frame:0000000000017598                 db  86h
.eh_frame:0000000000017599                 db    6
.eh_frame:000000000001759A                 db  41h ; A
.eh_frame:000000000001759B                 db  0Eh
.eh_frame:000000000001759C                 db  38h ; 8
.eh_frame:000000000001759D                 db  83h
.eh_frame:000000000001759E                 db    7
.eh_frame:000000000001759F                 db  44h ; D
.eh_frame:00000000000175A0                 db  0Eh
.eh_frame:00000000000175A1                 db  40h ; @
.eh_frame:00000000000175A2                 db    2
.eh_frame:00000000000175A3                 db  4Ah ; J
.eh_frame:00000000000175A4                 db  0Ah
.eh_frame:00000000000175A5                 db  0Eh
.eh_frame:00000000000175A6                 db  38h ; 8
.eh_frame:00000000000175A7                 db  44h ; D
.eh_frame:00000000000175A8                 db  0Eh
.eh_frame:00000000000175A9                 db  30h ; 0
.eh_frame:00000000000175AA                 db  41h ; A
.eh_frame:00000000000175AB                 db  0Eh
.eh_frame:00000000000175AC                 db  28h ; (
.eh_frame:00000000000175AD                 db  42h ; B
.eh_frame:00000000000175AE                 db  0Eh
.eh_frame:00000000000175AF                 db  20h
.eh_frame:00000000000175B0                 db  42h ; B
.eh_frame:00000000000175B1                 db  0Eh
.eh_frame:00000000000175B2                 db  18h
.eh_frame:00000000000175B3                 db  42h ; B
.eh_frame:00000000000175B4                 db  0Eh
.eh_frame:00000000000175B5                 db  10h
.eh_frame:00000000000175B6                 db  42h ; B
.eh_frame:00000000000175B7                 db  0Eh
.eh_frame:00000000000175B8                 db    8
.eh_frame:00000000000175B9                 db  41h ; A
.eh_frame:00000000000175BA                 db  0Bh
.eh_frame:00000000000175BB                 db    0
.eh_frame:00000000000175BC                 db  10h
.eh_frame:00000000000175BD                 db    0
.eh_frame:00000000000175BE                 db    0
.eh_frame:00000000000175BF                 db    0
.eh_frame:00000000000175C0                 db 0C0h
.eh_frame:00000000000175C1                 db  11h
.eh_frame:00000000000175C2                 db    0
.eh_frame:00000000000175C3                 db    0
.eh_frame:00000000000175C4                 db 0ACh
.eh_frame:00000000000175C5                 db  4Dh ; M
.eh_frame:00000000000175C6                 db 0FFh
.eh_frame:00000000000175C7                 db 0FFh
.eh_frame:00000000000175C8                 db  31h ; 1
.eh_frame:00000000000175C9                 db    0
.eh_frame:00000000000175CA                 db    0
.eh_frame:00000000000175CB                 db    0
.eh_frame:00000000000175CC                 db    0
.eh_frame:00000000000175CD                 db    0
.eh_frame:00000000000175CE                 db    0
.eh_frame:00000000000175CF                 db    0
.eh_frame:00000000000175D0                 db  10h
.eh_frame:00000000000175D1                 db    0
.eh_frame:00000000000175D2                 db    0
.eh_frame:00000000000175D3                 db    0
.eh_frame:00000000000175D4                 db 0D4h
.eh_frame:00000000000175D5                 db  11h
.eh_frame:00000000000175D6                 db    0
.eh_frame:00000000000175D7                 db    0
.eh_frame:00000000000175D8                 db 0D8h
.eh_frame:00000000000175D9                 db  4Dh ; M
.eh_frame:00000000000175DA                 db 0FFh
.eh_frame:00000000000175DB                 db 0FFh
.eh_frame:00000000000175DC                 db  20h
.eh_frame:00000000000175DD                 db    0
.eh_frame:00000000000175DE                 db    0
.eh_frame:00000000000175DF                 db    0
.eh_frame:00000000000175E0                 db    0
.eh_frame:00000000000175E1                 db    0
.eh_frame:00000000000175E2                 db    0
.eh_frame:00000000000175E3                 db    0
.eh_frame:00000000000175E4                 db  48h ; H
.eh_frame:00000000000175E5                 db    0
.eh_frame:00000000000175E6                 db    0
.eh_frame:00000000000175E7                 db    0
.eh_frame:00000000000175E8                 db 0E8h
.eh_frame:00000000000175E9                 db  11h
.eh_frame:00000000000175EA                 db    0
.eh_frame:00000000000175EB                 db    0
.eh_frame:00000000000175EC                 db 0E4h
.eh_frame:00000000000175ED                 db  4Dh ; M
.eh_frame:00000000000175EE                 db 0FFh
.eh_frame:00000000000175EF                 db 0FFh
.eh_frame:00000000000175F0                 db 0B4h
.eh_frame:00000000000175F1                 db    1
.eh_frame:00000000000175F2                 db    0
.eh_frame:00000000000175F3                 db    0
.eh_frame:00000000000175F4                 db    0
.eh_frame:00000000000175F5                 db  42h ; B
.eh_frame:00000000000175F6                 db  0Eh
.eh_frame:00000000000175F7                 db  10h
.eh_frame:00000000000175F8                 db  8Fh
.eh_frame:00000000000175F9                 db    2
.eh_frame:00000000000175FA                 db  42h ; B
.eh_frame:00000000000175FB                 db  0Eh
.eh_frame:00000000000175FC                 db  18h
.eh_frame:00000000000175FD                 db  8Eh
.eh_frame:00000000000175FE                 db    3
.eh_frame:00000000000175FF                 db  49h ; I
.eh_frame:0000000000017600                 db  0Eh
.eh_frame:0000000000017601                 db  20h
.eh_frame:0000000000017602                 db  8Dh
.eh_frame:0000000000017603                 db    4
.eh_frame:0000000000017604                 db  42h ; B
.eh_frame:0000000000017605                 db  0Eh
.eh_frame:0000000000017606                 db  28h ; (
.eh_frame:0000000000017607                 db  8Ch
.eh_frame:0000000000017608                 db    5
.eh_frame:0000000000017609                 db  44h ; D
.eh_frame:000000000001760A                 db  0Eh
.eh_frame:000000000001760B                 db  30h ; 0
.eh_frame:000000000001760C                 db  86h
.eh_frame:000000000001760D                 db    6
.eh_frame:000000000001760E                 db  41h ; A
.eh_frame:000000000001760F                 db  0Eh
.eh_frame:0000000000017610                 db  38h ; 8
.eh_frame:0000000000017611                 db  83h
.eh_frame:0000000000017612                 db    7
.eh_frame:0000000000017613                 db  52h ; R
.eh_frame:0000000000017614                 db  0Eh
.eh_frame:0000000000017615                 db  40h ; @
.eh_frame:0000000000017616                 db    2
.eh_frame:0000000000017617                 db 0D8h
.eh_frame:0000000000017618                 db  0Ah
.eh_frame:0000000000017619                 db  0Eh
.eh_frame:000000000001761A                 db  38h ; 8
.eh_frame:000000000001761B                 db  44h ; D
.eh_frame:000000000001761C                 db  0Eh
.eh_frame:000000000001761D                 db  30h ; 0
.eh_frame:000000000001761E                 db  41h ; A
.eh_frame:000000000001761F                 db  0Eh
.eh_frame:0000000000017620                 db  28h ; (
.eh_frame:0000000000017621                 db  42h ; B
.eh_frame:0000000000017622                 db  0Eh
.eh_frame:0000000000017623                 db  20h
.eh_frame:0000000000017624                 db  42h ; B
.eh_frame:0000000000017625                 db  0Eh
.eh_frame:0000000000017626                 db  18h
.eh_frame:0000000000017627                 db  42h ; B
.eh_frame:0000000000017628                 db  0Eh
.eh_frame:0000000000017629                 db  10h
.eh_frame:000000000001762A                 db  42h ; B
.eh_frame:000000000001762B                 db  0Eh
.eh_frame:000000000001762C                 db    8
.eh_frame:000000000001762D                 db  45h ; E
.eh_frame:000000000001762E                 db  0Bh
.eh_frame:000000000001762F                 db    0
.eh_frame:0000000000017630                 db  28h ; (
.eh_frame:0000000000017631                 db    0
.eh_frame:0000000000017632                 db    0
.eh_frame:0000000000017633                 db    0
.eh_frame:0000000000017634                 db  34h ; 4
.eh_frame:0000000000017635                 db  12h
.eh_frame:0000000000017636                 db    0
.eh_frame:0000000000017637                 db    0
.eh_frame:0000000000017638                 db  58h ; X
.eh_frame:0000000000017639                 db  4Fh ; O
.eh_frame:000000000001763A                 db 0FFh
.eh_frame:000000000001763B                 db 0FFh
.eh_frame:000000000001763C                 db  90h
.eh_frame:000000000001763D                 db    0
.eh_frame:000000000001763E                 db    0
.eh_frame:000000000001763F                 db    0
.eh_frame:0000000000017640                 db    0
.eh_frame:0000000000017641                 db  42h ; B
.eh_frame:0000000000017642                 db  0Eh
.eh_frame:0000000000017643                 db  10h
.eh_frame:0000000000017644                 db  8Ch
.eh_frame:0000000000017645                 db    2
.eh_frame:0000000000017646                 db  41h ; A
.eh_frame:0000000000017647                 db  0Eh
.eh_frame:0000000000017648                 db  18h
.eh_frame:0000000000017649                 db  86h
.eh_frame:000000000001764A                 db    3
.eh_frame:000000000001764B                 db  44h ; D
.eh_frame:000000000001764C                 db  0Eh
.eh_frame:000000000001764D                 db  20h
.eh_frame:000000000001764E                 db  83h
.eh_frame:000000000001764F                 db    4
.eh_frame:0000000000017650                 db    2
.eh_frame:0000000000017651                 db  85h
.eh_frame:0000000000017652                 db  0Eh
.eh_frame:0000000000017653                 db  18h
.eh_frame:0000000000017654                 db  41h ; A
.eh_frame:0000000000017655                 db  0Eh
.eh_frame:0000000000017656                 db  10h
.eh_frame:0000000000017657                 db  42h ; B
.eh_frame:0000000000017658                 db  0Eh
.eh_frame:0000000000017659                 db    8
.eh_frame:000000000001765A                 db    0
.eh_frame:000000000001765B                 db    0
.eh_frame:000000000001765C                 db  28h ; (
.eh_frame:000000000001765D                 db    0
.eh_frame:000000000001765E                 db    0
.eh_frame:000000000001765F                 db    0
.eh_frame:0000000000017660                 db  60h ; `
.eh_frame:0000000000017661                 db  12h
.eh_frame:0000000000017662                 db    0
.eh_frame:0000000000017663                 db    0
.eh_frame:0000000000017664                 db 0BCh
.eh_frame:0000000000017665                 db  4Fh ; O
.eh_frame:0000000000017666                 db 0FFh
.eh_frame:0000000000017667                 db 0FFh
.eh_frame:0000000000017668                 db 0D6h
.eh_frame:0000000000017669                 db    0
.eh_frame:000000000001766A                 db    0
.eh_frame:000000000001766B                 db    0
.eh_frame:000000000001766C                 db    0
.eh_frame:000000000001766D                 db  42h ; B
.eh_frame:000000000001766E                 db  0Eh
.eh_frame:000000000001766F                 db  10h
.eh_frame:0000000000017670                 db  8Ch
.eh_frame:0000000000017671                 db    2
.eh_frame:0000000000017672                 db  41h ; A
.eh_frame:0000000000017673                 db  0Eh
.eh_frame:0000000000017674                 db  18h
.eh_frame:0000000000017675                 db  86h
.eh_frame:0000000000017676                 db    3
.eh_frame:0000000000017677                 db  44h ; D
.eh_frame:0000000000017678                 db  0Eh
.eh_frame:0000000000017679                 db  20h
.eh_frame:000000000001767A                 db  83h
.eh_frame:000000000001767B                 db    4
.eh_frame:000000000001767C                 db    2
.eh_frame:000000000001767D                 db 0C4h
.eh_frame:000000000001767E                 db  0Eh
.eh_frame:000000000001767F                 db  18h
.eh_frame:0000000000017680                 db  44h ; D
.eh_frame:0000000000017681                 db  0Eh
.eh_frame:0000000000017682                 db  10h
.eh_frame:0000000000017683                 db  42h ; B
.eh_frame:0000000000017684                 db  0Eh
.eh_frame:0000000000017685                 db    8
.eh_frame:0000000000017686                 db    0
.eh_frame:0000000000017687                 db    0
.eh_frame:0000000000017688                 db  34h ; 4
.eh_frame:0000000000017689                 db    0
.eh_frame:000000000001768A                 db    0
.eh_frame:000000000001768B                 db    0
.eh_frame:000000000001768C                 db  8Ch
.eh_frame:000000000001768D                 db  12h
.eh_frame:000000000001768E                 db    0
.eh_frame:000000000001768F                 db    0
.eh_frame:0000000000017690                 db  70h ; p
.eh_frame:0000000000017691                 db  50h ; P
.eh_frame:0000000000017692                 db 0FFh
.eh_frame:0000000000017693                 db 0FFh
.eh_frame:0000000000017694                 db  3Eh ; >
.eh_frame:0000000000017695                 db    2
.eh_frame:0000000000017696                 db    0
.eh_frame:0000000000017697                 db    0
.eh_frame:0000000000017698                 db    0
.eh_frame:0000000000017699                 db  42h ; B
.eh_frame:000000000001769A                 db  0Eh
.eh_frame:000000000001769B                 db  10h
.eh_frame:000000000001769C                 db  8Ch
.eh_frame:000000000001769D                 db    2
.eh_frame:000000000001769E                 db  41h ; A
.eh_frame:000000000001769F                 db  0Eh
.eh_frame:00000000000176A0                 db  18h
.eh_frame:00000000000176A1                 db  86h
.eh_frame:00000000000176A2                 db    3
.eh_frame:00000000000176A3                 db  44h ; D
.eh_frame:00000000000176A4                 db  0Eh
.eh_frame:00000000000176A5                 db  20h
.eh_frame:00000000000176A6                 db  83h
.eh_frame:00000000000176A7                 db    4
.eh_frame:00000000000176A8                 db  44h ; D
.eh_frame:00000000000176A9                 db  0Eh
.eh_frame:00000000000176AA                 db  80h
.eh_frame:00000000000176AB                 db    1
.eh_frame:00000000000176AC                 db    3
.eh_frame:00000000000176AD                 db  91h
.eh_frame:00000000000176AE                 db    1
.eh_frame:00000000000176AF                 db  0Ah
.eh_frame:00000000000176B0                 db  0Eh
.eh_frame:00000000000176B1                 db  20h
.eh_frame:00000000000176B2                 db  41h ; A
.eh_frame:00000000000176B3                 db  0Eh
.eh_frame:00000000000176B4                 db  18h
.eh_frame:00000000000176B5                 db  41h ; A
.eh_frame:00000000000176B6                 db  0Eh
.eh_frame:00000000000176B7                 db  10h
.eh_frame:00000000000176B8                 db  42h ; B
.eh_frame:00000000000176B9                 db  0Eh
.eh_frame:00000000000176BA                 db    8
.eh_frame:00000000000176BB                 db  48h ; H
.eh_frame:00000000000176BC                 db  0Bh
.eh_frame:00000000000176BD                 db    0
.eh_frame:00000000000176BE                 db    0
.eh_frame:00000000000176BF                 db    0
.eh_frame:00000000000176C0                 db  38h ; 8
.eh_frame:00000000000176C1                 db    0
.eh_frame:00000000000176C2                 db    0
.eh_frame:00000000000176C3                 db    0
.eh_frame:00000000000176C4                 db 0C4h
.eh_frame:00000000000176C5                 db  12h
.eh_frame:00000000000176C6                 db    0
.eh_frame:00000000000176C7                 db    0
.eh_frame:00000000000176C8                 db  78h ; x
.eh_frame:00000000000176C9                 db  52h ; R
.eh_frame:00000000000176CA                 db 0FFh
.eh_frame:00000000000176CB                 db 0FFh
.eh_frame:00000000000176CC                 db  84h
.eh_frame:00000000000176CD                 db    2
.eh_frame:00000000000176CE                 db    0
.eh_frame:00000000000176CF                 db    0
.eh_frame:00000000000176D0                 db    0
.eh_frame:00000000000176D1                 db  42h ; B
.eh_frame:00000000000176D2                 db  0Eh
.eh_frame:00000000000176D3                 db  10h
.eh_frame:00000000000176D4                 db  8Dh
.eh_frame:00000000000176D5                 db    2
.eh_frame:00000000000176D6                 db  42h ; B
.eh_frame:00000000000176D7                 db  0Eh
.eh_frame:00000000000176D8                 db  18h
.eh_frame:00000000000176D9                 db  8Ch
.eh_frame:00000000000176DA                 db    3
.eh_frame:00000000000176DB                 db  41h ; A
.eh_frame:00000000000176DC                 db  0Eh
.eh_frame:00000000000176DD                 db  20h
.eh_frame:00000000000176DE                 db  86h
.eh_frame:00000000000176DF                 db    4
.eh_frame:00000000000176E0                 db  41h ; A
.eh_frame:00000000000176E1                 db  0Eh
.eh_frame:00000000000176E2                 db  28h ; (
.eh_frame:00000000000176E3                 db  83h
.eh_frame:00000000000176E4                 db    5
.eh_frame:00000000000176E5                 db  44h ; D
.eh_frame:00000000000176E6                 db  0Eh
.eh_frame:00000000000176E7                 db  40h ; @
.eh_frame:00000000000176E8                 db    2
.eh_frame:00000000000176E9                 db  5Ah ; Z
.eh_frame:00000000000176EA                 db  0Ah
.eh_frame:00000000000176EB                 db  0Eh
.eh_frame:00000000000176EC                 db  28h ; (
.eh_frame:00000000000176ED                 db  41h ; A
.eh_frame:00000000000176EE                 db  0Eh
.eh_frame:00000000000176EF                 db  20h
.eh_frame:00000000000176F0                 db  41h ; A
.eh_frame:00000000000176F1                 db  0Eh
.eh_frame:00000000000176F2                 db  18h
.eh_frame:00000000000176F3                 db  42h ; B
.eh_frame:00000000000176F4                 db  0Eh
.eh_frame:00000000000176F5                 db  10h
.eh_frame:00000000000176F6                 db  42h ; B
.eh_frame:00000000000176F7                 db  0Eh
.eh_frame:00000000000176F8                 db    8
.eh_frame:00000000000176F9                 db  46h ; F
.eh_frame:00000000000176FA                 db  0Bh
.eh_frame:00000000000176FB                 db    0
.eh_frame:00000000000176FC                 db  20h
.eh_frame:00000000000176FD                 db    0
.eh_frame:00000000000176FE                 db    0
.eh_frame:00000000000176FF                 db    0
.eh_frame:0000000000017700                 db    0
.eh_frame:0000000000017701                 db  13h
.eh_frame:0000000000017702                 db    0
.eh_frame:0000000000017703                 db    0
.eh_frame:0000000000017704                 db 0CCh
.eh_frame:0000000000017705                 db  54h ; T
.eh_frame:0000000000017706                 db 0FFh
.eh_frame:0000000000017707                 db 0FFh
.eh_frame:0000000000017708                 db  59h ; Y
.eh_frame:0000000000017709                 db    0
.eh_frame:000000000001770A                 db    0
.eh_frame:000000000001770B                 db    0
.eh_frame:000000000001770C                 db    0
.eh_frame:000000000001770D                 db  41h ; A
.eh_frame:000000000001770E                 db  0Eh
.eh_frame:000000000001770F                 db  10h
.eh_frame:0000000000017710                 db  83h
.eh_frame:0000000000017711                 db    2
.eh_frame:0000000000017712                 db  47h ; G
.eh_frame:0000000000017713                 db  0Eh
.eh_frame:0000000000017714                 db  20h
.eh_frame:0000000000017715                 db  7Ch ; |
.eh_frame:0000000000017716                 db  0Ah
.eh_frame:0000000000017717                 db  0Eh
.eh_frame:0000000000017718                 db  10h
.eh_frame:0000000000017719                 db  41h ; A
.eh_frame:000000000001771A                 db  0Eh
.eh_frame:000000000001771B                 db    8
.eh_frame:000000000001771C                 db  4Bh ; K
.eh_frame:000000000001771D                 db  0Bh
.eh_frame:000000000001771E                 db    0
.eh_frame:000000000001771F                 db    0
.eh_frame:0000000000017720                 db  34h ; 4
.eh_frame:0000000000017721                 db    0
.eh_frame:0000000000017722                 db    0
.eh_frame:0000000000017723                 db    0
.eh_frame:0000000000017724                 db  24h ; $
.eh_frame:0000000000017725                 db  13h
.eh_frame:0000000000017726                 db    0
.eh_frame:0000000000017727                 db    0
.eh_frame:0000000000017728                 db    8
.eh_frame:0000000000017729                 db  55h ; U
.eh_frame:000000000001772A                 db 0FFh
.eh_frame:000000000001772B                 db 0FFh
.eh_frame:000000000001772C                 db    3
.eh_frame:000000000001772D                 db    2
.eh_frame:000000000001772E                 db    0
.eh_frame:000000000001772F                 db    0
.eh_frame:0000000000017730                 db    0
.eh_frame:0000000000017731                 db  42h ; B
.eh_frame:0000000000017732                 db  0Eh
.eh_frame:0000000000017733                 db  10h
.eh_frame:0000000000017734                 db  8Ch
.eh_frame:0000000000017735                 db    2
.eh_frame:0000000000017736                 db  41h ; A
.eh_frame:0000000000017737                 db  0Eh
.eh_frame:0000000000017738                 db  18h
.eh_frame:0000000000017739                 db  86h
.eh_frame:000000000001773A                 db    3
.eh_frame:000000000001773B                 db  46h ; F
.eh_frame:000000000001773C                 db  0Eh
.eh_frame:000000000001773D                 db  20h
.eh_frame:000000000001773E                 db  83h
.eh_frame:000000000001773F                 db    4
.eh_frame:0000000000017740                 db  47h ; G
.eh_frame:0000000000017741                 db  0Eh
.eh_frame:0000000000017742                 db  30h ; 0
.eh_frame:0000000000017743                 db    2
.eh_frame:0000000000017744                 db  4Ah ; J
.eh_frame:0000000000017745                 db  0Ah
.eh_frame:0000000000017746                 db  0Eh
.eh_frame:0000000000017747                 db  20h
.eh_frame:0000000000017748                 db  41h ; A
.eh_frame:0000000000017749                 db  0Eh
.eh_frame:000000000001774A                 db  18h
.eh_frame:000000000001774B                 db  41h ; A
.eh_frame:000000000001774C                 db  0Eh
.eh_frame:000000000001774D                 db  10h
.eh_frame:000000000001774E                 db  42h ; B
.eh_frame:000000000001774F                 db  0Eh
.eh_frame:0000000000017750                 db    8
.eh_frame:0000000000017751                 db  42h ; B
.eh_frame:0000000000017752                 db  0Bh
.eh_frame:0000000000017753                 db    0
.eh_frame:0000000000017754                 db    0
.eh_frame:0000000000017755                 db    0
.eh_frame:0000000000017756                 db    0
.eh_frame:0000000000017757                 db    0
.eh_frame:0000000000017758                 db  24h ; $
.eh_frame:0000000000017759                 db    0
.eh_frame:000000000001775A                 db    0
.eh_frame:000000000001775B                 db    0
.eh_frame:000000000001775C                 db  5Ch ; \
.eh_frame:000000000001775D                 db  13h
.eh_frame:000000000001775E                 db    0
.eh_frame:000000000001775F                 db    0
.eh_frame:0000000000017760                 db 0E0h
.eh_frame:0000000000017761                 db  56h ; V
.eh_frame:0000000000017762                 db 0FFh
.eh_frame:0000000000017763                 db 0FFh
.eh_frame:0000000000017764                 db  27h ; '
.eh_frame:0000000000017765                 db    0
.eh_frame:0000000000017766                 db    0
.eh_frame:0000000000017767                 db    0
.eh_frame:0000000000017768                 db    0
.eh_frame:0000000000017769                 db  41h ; A
.eh_frame:000000000001776A                 db  0Eh
.eh_frame:000000000001776B                 db  10h
.eh_frame:000000000001776C                 db  86h
.eh_frame:000000000001776D                 db    2
.eh_frame:000000000001776E                 db  41h ; A
.eh_frame:000000000001776F                 db  0Eh
.eh_frame:0000000000017770                 db  18h
.eh_frame:0000000000017771                 db  83h
.eh_frame:0000000000017772                 db    3
.eh_frame:0000000000017773                 db  4Ah ; J
.eh_frame:0000000000017774                 db  0Eh
.eh_frame:0000000000017775                 db  20h
.eh_frame:0000000000017776                 db  52h ; R
.eh_frame:0000000000017777                 db  0Eh
.eh_frame:0000000000017778                 db  18h
.eh_frame:0000000000017779                 db  44h ; D
.eh_frame:000000000001777A                 db  0Eh
.eh_frame:000000000001777B                 db  10h
.eh_frame:000000000001777C                 db  41h ; A
.eh_frame:000000000001777D                 db  0Eh
.eh_frame:000000000001777E                 db    8
.eh_frame:000000000001777F                 db    0
.eh_frame:0000000000017780                 db  10h
.eh_frame:0000000000017781                 db    0
.eh_frame:0000000000017782                 db    0
.eh_frame:0000000000017783                 db    0
.eh_frame:0000000000017784                 db  84h
.eh_frame:0000000000017785                 db  13h
.eh_frame:0000000000017786                 db    0
.eh_frame:0000000000017787                 db    0
.eh_frame:0000000000017788                 db 0E8h
.eh_frame:0000000000017789                 db  56h ; V
.eh_frame:000000000001778A                 db 0FFh
.eh_frame:000000000001778B                 db 0FFh
.eh_frame:000000000001778C                 db  0Dh
.eh_frame:000000000001778D                 db    0
.eh_frame:000000000001778E                 db    0
.eh_frame:000000000001778F                 db    0
.eh_frame:0000000000017790                 db    0
.eh_frame:0000000000017791                 db    0
.eh_frame:0000000000017792                 db    0
.eh_frame:0000000000017793                 db    0
.eh_frame:0000000000017794                 db  14h
.eh_frame:0000000000017795                 db    0
.eh_frame:0000000000017796                 db    0
.eh_frame:0000000000017797                 db    0
.eh_frame:0000000000017798                 db  98h
.eh_frame:0000000000017799                 db  13h
.eh_frame:000000000001779A                 db    0
.eh_frame:000000000001779B                 db    0
.eh_frame:000000000001779C                 db 0E4h
.eh_frame:000000000001779D                 db  56h ; V
.eh_frame:000000000001779E                 db 0FFh
.eh_frame:000000000001779F                 db 0FFh
.eh_frame:00000000000177A0                 db  2Eh ; .
.eh_frame:00000000000177A1                 db    0
.eh_frame:00000000000177A2                 db    0
.eh_frame:00000000000177A3                 db    0
.eh_frame:00000000000177A4                 db    0
.eh_frame:00000000000177A5                 db  5Eh ; ^
.eh_frame:00000000000177A6                 db  0Eh
.eh_frame:00000000000177A7                 db  10h
.eh_frame:00000000000177A8                 db  4Fh ; O
.eh_frame:00000000000177A9                 db  0Eh
.eh_frame:00000000000177AA                 db    8
.eh_frame:00000000000177AB                 db    0
.eh_frame:00000000000177AC                 db  14h
.eh_frame:00000000000177AD                 db    0
.eh_frame:00000000000177AE                 db    0
.eh_frame:00000000000177AF                 db    0
.eh_frame:00000000000177B0                 db 0B0h
.eh_frame:00000000000177B1                 db  13h
.eh_frame:00000000000177B2                 db    0
.eh_frame:00000000000177B3                 db    0
.eh_frame:00000000000177B4                 db 0FCh
.eh_frame:00000000000177B5                 db  56h ; V
.eh_frame:00000000000177B6                 db 0FFh
.eh_frame:00000000000177B7                 db 0FFh
.eh_frame:00000000000177B8                 db  33h ; 3
.eh_frame:00000000000177B9                 db    0
.eh_frame:00000000000177BA                 db    0
.eh_frame:00000000000177BB                 db    0
.eh_frame:00000000000177BC                 db    0
.eh_frame:00000000000177BD                 db  5Eh ; ^
.eh_frame:00000000000177BE                 db  0Eh
.eh_frame:00000000000177BF                 db  10h
.eh_frame:00000000000177C0                 db  54h ; T
.eh_frame:00000000000177C1                 db  0Eh
.eh_frame:00000000000177C2                 db    8
.eh_frame:00000000000177C3                 db    0
.eh_frame:00000000000177C4                 db  18h
.eh_frame:00000000000177C5                 db    0
.eh_frame:00000000000177C6                 db    0
.eh_frame:00000000000177C7                 db    0
.eh_frame:00000000000177C8                 db 0C8h
.eh_frame:00000000000177C9                 db  13h
.eh_frame:00000000000177CA                 db    0
.eh_frame:00000000000177CB                 db    0
.eh_frame:00000000000177CC                 db  24h ; $
.eh_frame:00000000000177CD                 db  57h ; W
.eh_frame:00000000000177CE                 db 0FFh
.eh_frame:00000000000177CF                 db 0FFh
.eh_frame:00000000000177D0                 db  15h
.eh_frame:00000000000177D1                 db    0
.eh_frame:00000000000177D2                 db    0
.eh_frame:00000000000177D3                 db    0
.eh_frame:00000000000177D4                 db    0
.eh_frame:00000000000177D5                 db  41h ; A
.eh_frame:00000000000177D6                 db  0Eh
.eh_frame:00000000000177D7                 db  10h
.eh_frame:00000000000177D8                 db  83h
.eh_frame:00000000000177D9                 db    2
.eh_frame:00000000000177DA                 db  4Fh ; O
.eh_frame:00000000000177DB                 db  0Eh
.eh_frame:00000000000177DC                 db    8
.eh_frame:00000000000177DD                 db    0
.eh_frame:00000000000177DE                 db    0
.eh_frame:00000000000177DF                 db    0
.eh_frame:00000000000177E0                 db  5Ch ; \
.eh_frame:00000000000177E1                 db    0
.eh_frame:00000000000177E2                 db    0
.eh_frame:00000000000177E3                 db    0
.eh_frame:00000000000177E4                 db 0E4h
.eh_frame:00000000000177E5                 db  13h
.eh_frame:00000000000177E6                 db    0
.eh_frame:00000000000177E7                 db    0
.eh_frame:00000000000177E8                 db  28h ; (
.eh_frame:00000000000177E9                 db  57h ; W
.eh_frame:00000000000177EA                 db 0FFh
.eh_frame:00000000000177EB                 db 0FFh
.eh_frame:00000000000177EC                 db  80h
.eh_frame:00000000000177ED                 db    0
.eh_frame:00000000000177EE                 db    0
.eh_frame:00000000000177EF                 db    0
.eh_frame:00000000000177F0                 db    0
.eh_frame:00000000000177F1                 db  42h ; B
.eh_frame:00000000000177F2                 db  0Eh
.eh_frame:00000000000177F3                 db  10h
.eh_frame:00000000000177F4                 db  8Dh
.eh_frame:00000000000177F5                 db    2
.eh_frame:00000000000177F6                 db  42h ; B
.eh_frame:00000000000177F7                 db  0Eh
.eh_frame:00000000000177F8                 db  18h
.eh_frame:00000000000177F9                 db  8Ch
.eh_frame:00000000000177FA                 db    3
.eh_frame:00000000000177FB                 db  47h ; G
.eh_frame:00000000000177FC                 db  0Eh
.eh_frame:00000000000177FD                 db  20h
.eh_frame:00000000000177FE                 db  86h
.eh_frame:00000000000177FF                 db    4
.eh_frame:0000000000017800                 db  41h ; A
.eh_frame:0000000000017801                 db  0Eh
.eh_frame:0000000000017802                 db  28h ; (
.eh_frame:0000000000017803                 db  83h
.eh_frame:0000000000017804                 db    5
.eh_frame:0000000000017805                 db  49h ; I
.eh_frame:0000000000017806                 db  0Eh
.eh_frame:0000000000017807                 db  30h ; 0
.eh_frame:0000000000017808                 db  62h ; b
.eh_frame:0000000000017809                 db  0Ah
.eh_frame:000000000001780A                 db  0Eh
.eh_frame:000000000001780B                 db  28h ; (
.eh_frame:000000000001780C                 db  44h ; D
.eh_frame:000000000001780D                 db  0Eh
.eh_frame:000000000001780E                 db  20h
.eh_frame:000000000001780F                 db  41h ; A
.eh_frame:0000000000017810                 db  0Eh
.eh_frame:0000000000017811                 db  18h
.eh_frame:0000000000017812                 db  42h ; B
.eh_frame:0000000000017813                 db  0Eh
.eh_frame:0000000000017814                 db  10h
.eh_frame:0000000000017815                 db  42h ; B
.eh_frame:0000000000017816                 db  0Eh
.eh_frame:0000000000017817                 db    8
.eh_frame:0000000000017818                 db  48h ; H
.eh_frame:0000000000017819                 db  0Bh
.eh_frame:000000000001781A                 db  5Dh ; ]
.eh_frame:000000000001781B                 db  0Ah
.eh_frame:000000000001781C                 db  0Eh
.eh_frame:000000000001781D                 db  28h ; (
.eh_frame:000000000001781E                 db  41h ; A
.eh_frame:000000000001781F                 db  0Eh
.eh_frame:0000000000017820                 db  20h
.eh_frame:0000000000017821                 db  41h ; A
.eh_frame:0000000000017822                 db  0Eh
.eh_frame:0000000000017823                 db  18h
.eh_frame:0000000000017824                 db  42h ; B
.eh_frame:0000000000017825                 db  0Eh
.eh_frame:0000000000017826                 db  10h
.eh_frame:0000000000017827                 db  42h ; B
.eh_frame:0000000000017828                 db  0Eh
.eh_frame:0000000000017829                 db    8
.eh_frame:000000000001782A                 db  45h ; E
.eh_frame:000000000001782B                 db  0Bh
.eh_frame:000000000001782C                 db  44h ; D
.eh_frame:000000000001782D                 db  0Eh
.eh_frame:000000000001782E                 db  28h ; (
.eh_frame:000000000001782F                 db  43h ; C
.eh_frame:0000000000017830                 db  0Eh
.eh_frame:0000000000017831                 db  20h
.eh_frame:0000000000017832                 db  44h ; D
.eh_frame:0000000000017833                 db  0Eh
.eh_frame:0000000000017834                 db  18h
.eh_frame:0000000000017835                 db  42h ; B
.eh_frame:0000000000017836                 db  0Eh
.eh_frame:0000000000017837                 db  10h
.eh_frame:0000000000017838                 db  42h ; B
.eh_frame:0000000000017839                 db  0Eh
.eh_frame:000000000001783A                 db    8
.eh_frame:000000000001783B                 db    0
.eh_frame:000000000001783C                 db    0
.eh_frame:000000000001783D                 db    0
.eh_frame:000000000001783E                 db    0
.eh_frame:000000000001783F                 db    0
.eh_frame:0000000000017840                 db  1Ch
.eh_frame:0000000000017841                 db    0
.eh_frame:0000000000017842                 db    0
.eh_frame:0000000000017843                 db    0
.eh_frame:0000000000017844                 db  44h ; D
.eh_frame:0000000000017845                 db  14h
.eh_frame:0000000000017846                 db    0
.eh_frame:0000000000017847                 db    0
.eh_frame:0000000000017848                 db  48h ; H
.eh_frame:0000000000017849                 db  57h ; W
.eh_frame:000000000001784A                 db 0FFh
.eh_frame:000000000001784B                 db 0FFh
.eh_frame:000000000001784C                 db  9Fh
.eh_frame:000000000001784D                 db    0
.eh_frame:000000000001784E                 db    0
.eh_frame:000000000001784F                 db    0
.eh_frame:0000000000017850                 db    0
.eh_frame:0000000000017851                 db  44h ; D
.eh_frame:0000000000017852                 db  0Eh
.eh_frame:0000000000017853                 db  10h
.eh_frame:0000000000017854                 db  83h
.eh_frame:0000000000017855                 db    2
.eh_frame:0000000000017856                 db    2
.eh_frame:0000000000017857                 db  78h ; x
.eh_frame:0000000000017858                 db  0Ah
.eh_frame:0000000000017859                 db  0Eh
.eh_frame:000000000001785A                 db    8
.eh_frame:000000000001785B                 db  41h ; A
.eh_frame:000000000001785C                 db  0Bh
.eh_frame:000000000001785D                 db    0
.eh_frame:000000000001785E                 db    0
.eh_frame:000000000001785F                 db    0
.eh_frame:0000000000017860                 db  34h ; 4
.eh_frame:0000000000017861                 db    0
.eh_frame:0000000000017862                 db    0
.eh_frame:0000000000017863                 db    0
.eh_frame:0000000000017864                 db  64h ; d
.eh_frame:0000000000017865                 db  14h
.eh_frame:0000000000017866                 db    0
.eh_frame:0000000000017867                 db    0
.eh_frame:0000000000017868                 db 0C8h
.eh_frame:0000000000017869                 db  57h ; W
.eh_frame:000000000001786A                 db 0FFh
.eh_frame:000000000001786B                 db 0FFh
.eh_frame:000000000001786C                 db  74h ; t
.eh_frame:000000000001786D                 db    0
.eh_frame:000000000001786E                 db    0
.eh_frame:000000000001786F                 db    0
.eh_frame:0000000000017870                 db    0
.eh_frame:0000000000017871                 db  42h ; B
.eh_frame:0000000000017872                 db  0Eh
.eh_frame:0000000000017873                 db  10h
.eh_frame:0000000000017874                 db  8Ch
.eh_frame:0000000000017875                 db    2
.eh_frame:0000000000017876                 db  41h ; A
.eh_frame:0000000000017877                 db  0Eh
.eh_frame:0000000000017878                 db  18h
.eh_frame:0000000000017879                 db  86h
.eh_frame:000000000001787A                 db    3
.eh_frame:000000000001787B                 db  44h ; D
.eh_frame:000000000001787C                 db  0Eh
.eh_frame:000000000001787D                 db  20h
.eh_frame:000000000001787E                 db  83h
.eh_frame:000000000001787F                 db    4
.eh_frame:0000000000017880                 db  4Ah ; J
.eh_frame:0000000000017881                 db  0Eh
.eh_frame:0000000000017882                 db  30h ; 0
.eh_frame:0000000000017883                 db    2
.eh_frame:0000000000017884                 db  4Fh ; O
.eh_frame:0000000000017885                 db  0Ah
.eh_frame:0000000000017886                 db  0Eh
.eh_frame:0000000000017887                 db  20h
.eh_frame:0000000000017888                 db  41h ; A
.eh_frame:0000000000017889                 db  0Eh
.eh_frame:000000000001788A                 db  18h
.eh_frame:000000000001788B                 db  41h ; A
.eh_frame:000000000001788C                 db  0Eh
.eh_frame:000000000001788D                 db  10h
.eh_frame:000000000001788E                 db  42h ; B
.eh_frame:000000000001788F                 db  0Eh
.eh_frame:0000000000017890                 db    8
.eh_frame:0000000000017891                 db  44h ; D
.eh_frame:0000000000017892                 db  0Bh
.eh_frame:0000000000017893                 db    0
.eh_frame:0000000000017894                 db    0
.eh_frame:0000000000017895                 db    0
.eh_frame:0000000000017896                 db    0
.eh_frame:0000000000017897                 db    0
.eh_frame:0000000000017898                 db  2Ch ; ,
.eh_frame:0000000000017899                 db    0
.eh_frame:000000000001789A                 db    0
.eh_frame:000000000001789B                 db    0
.eh_frame:000000000001789C                 db  9Ch
.eh_frame:000000000001789D                 db  14h
.eh_frame:000000000001789E                 db    0
.eh_frame:000000000001789F                 db    0
.eh_frame:00000000000178A0                 db  10h
.eh_frame:00000000000178A1                 db  58h ; X
.eh_frame:00000000000178A2                 db 0FFh
.eh_frame:00000000000178A3                 db 0FFh
.eh_frame:00000000000178A4                 db  54h ; T
.eh_frame:00000000000178A5                 db    0
.eh_frame:00000000000178A6                 db    0
.eh_frame:00000000000178A7                 db    0
.eh_frame:00000000000178A8                 db    0
.eh_frame:00000000000178A9                 db  41h ; A
.eh_frame:00000000000178AA                 db  0Eh
.eh_frame:00000000000178AB                 db  10h
.eh_frame:00000000000178AC                 db  86h
.eh_frame:00000000000178AD                 db    2
.eh_frame:00000000000178AE                 db  41h ; A
.eh_frame:00000000000178AF                 db  0Eh
.eh_frame:00000000000178B0                 db  18h
.eh_frame:00000000000178B1                 db  83h
.eh_frame:00000000000178B2                 db    3
.eh_frame:00000000000178B3                 db  44h ; D
.eh_frame:00000000000178B4                 db  0Eh
.eh_frame:00000000000178B5                 db  30h ; 0
.eh_frame:00000000000178B6                 db    2
.eh_frame:00000000000178B7                 db  44h ; D
.eh_frame:00000000000178B8                 db  0Ah
.eh_frame:00000000000178B9                 db  0Eh
.eh_frame:00000000000178BA                 db  18h
.eh_frame:00000000000178BB                 db  43h ; C
.eh_frame:00000000000178BC                 db  0Eh
.eh_frame:00000000000178BD                 db  10h
.eh_frame:00000000000178BE                 db  41h ; A
.eh_frame:00000000000178BF                 db  0Eh
.eh_frame:00000000000178C0                 db    8
.eh_frame:00000000000178C1                 db  41h ; A
.eh_frame:00000000000178C2                 db  0Bh
.eh_frame:00000000000178C3                 db    0
.eh_frame:00000000000178C4                 db    0
.eh_frame:00000000000178C5                 db    0
.eh_frame:00000000000178C6                 db    0
.eh_frame:00000000000178C7                 db    0
.eh_frame:00000000000178C8                 db  40h ; @
.eh_frame:00000000000178C9                 db    0
.eh_frame:00000000000178CA                 db    0
.eh_frame:00000000000178CB                 db    0
.eh_frame:00000000000178CC                 db 0CCh
.eh_frame:00000000000178CD                 db  14h
.eh_frame:00000000000178CE                 db    0
.eh_frame:00000000000178CF                 db    0
.eh_frame:00000000000178D0                 db  40h ; @
.eh_frame:00000000000178D1                 db  58h ; X
.eh_frame:00000000000178D2                 db 0FFh
.eh_frame:00000000000178D3                 db 0FFh
.eh_frame:00000000000178D4                 db 0E7h
.eh_frame:00000000000178D5                 db    0
.eh_frame:00000000000178D6                 db    0
.eh_frame:00000000000178D7                 db    0
.eh_frame:00000000000178D8                 db    0
.eh_frame:00000000000178D9                 db  41h ; A
.eh_frame:00000000000178DA                 db  0Eh
.eh_frame:00000000000178DB                 db  10h
.eh_frame:00000000000178DC                 db  86h
.eh_frame:00000000000178DD                 db    2
.eh_frame:00000000000178DE                 db  41h ; A
.eh_frame:00000000000178DF                 db  0Eh
.eh_frame:00000000000178E0                 db  18h
.eh_frame:00000000000178E1                 db  83h
.eh_frame:00000000000178E2                 db    3
.eh_frame:00000000000178E3                 db  49h ; I
.eh_frame:00000000000178E4                 db  0Eh
.eh_frame:00000000000178E5                 db  20h
.eh_frame:00000000000178E6                 db  6Eh ; n
.eh_frame:00000000000178E7                 db  0Ah
.eh_frame:00000000000178E8                 db  0Eh
.eh_frame:00000000000178E9                 db  18h
.eh_frame:00000000000178EA                 db  41h ; A
.eh_frame:00000000000178EB                 db  0Eh
.eh_frame:00000000000178EC                 db  10h
.eh_frame:00000000000178ED                 db  41h ; A
.eh_frame:00000000000178EE                 db  0Eh
.eh_frame:00000000000178EF                 db    8
.eh_frame:00000000000178F0                 db  45h ; E
.eh_frame:00000000000178F1                 db  0Bh
.eh_frame:00000000000178F2                 db    2
.eh_frame:00000000000178F3                 db  4Ah ; J
.eh_frame:00000000000178F4                 db  0Ah
.eh_frame:00000000000178F5                 db  0Eh
.eh_frame:00000000000178F6                 db  18h
.eh_frame:00000000000178F7                 db  41h ; A
.eh_frame:00000000000178F8                 db  0Eh
.eh_frame:00000000000178F9                 db  10h
.eh_frame:00000000000178FA                 db  41h ; A
.eh_frame:00000000000178FB                 db  0Eh
.eh_frame:00000000000178FC                 db    8
.eh_frame:00000000000178FD                 db  44h ; D
.eh_frame:00000000000178FE                 db  0Bh
.eh_frame:00000000000178FF                 db    2
.eh_frame:0000000000017900                 db  54h ; T
.eh_frame:0000000000017901                 db  0Eh
.eh_frame:0000000000017902                 db  18h
.eh_frame:0000000000017903                 db  41h ; A
.eh_frame:0000000000017904                 db  0Eh
.eh_frame:0000000000017905                 db  10h
.eh_frame:0000000000017906                 db  41h ; A
.eh_frame:0000000000017907                 db  0Eh
.eh_frame:0000000000017908                 db    8
.eh_frame:0000000000017909                 db    0
.eh_frame:000000000001790A                 db    0
.eh_frame:000000000001790B                 db    0
.eh_frame:000000000001790C                 db  74h ; t
.eh_frame:000000000001790D                 db    0
.eh_frame:000000000001790E                 db    0
.eh_frame:000000000001790F                 db    0
.eh_frame:0000000000017910                 db  10h
.eh_frame:0000000000017911                 db  15h
.eh_frame:0000000000017912                 db    0
.eh_frame:0000000000017913                 db    0
.eh_frame:0000000000017914                 db 0ECh
.eh_frame:0000000000017915                 db  58h ; X
.eh_frame:0000000000017916                 db 0FFh
.eh_frame:0000000000017917                 db 0FFh
.eh_frame:0000000000017918                 db  34h ; 4
.eh_frame:0000000000017919                 db  12h
.eh_frame:000000000001791A                 db    0
.eh_frame:000000000001791B                 db    0
.eh_frame:000000000001791C                 db    0
.eh_frame:000000000001791D                 db  42h ; B
.eh_frame:000000000001791E                 db  0Eh
.eh_frame:000000000001791F                 db  10h
.eh_frame:0000000000017920                 db  8Fh
.eh_frame:0000000000017921                 db    2
.eh_frame:0000000000017922                 db  42h ; B
.eh_frame:0000000000017923                 db  0Eh
.eh_frame:0000000000017924                 db  18h
.eh_frame:0000000000017925                 db  8Eh
.eh_frame:0000000000017926                 db    3
.eh_frame:0000000000017927                 db  45h ; E
.eh_frame:0000000000017928                 db  0Eh
.eh_frame:0000000000017929                 db  20h
.eh_frame:000000000001792A                 db  8Dh
.eh_frame:000000000001792B                 db    4
.eh_frame:000000000001792C                 db  42h ; B
.eh_frame:000000000001792D                 db  0Eh
.eh_frame:000000000001792E                 db  28h ; (
.eh_frame:000000000001792F                 db  8Ch
.eh_frame:0000000000017930                 db    5
.eh_frame:0000000000017931                 db  44h ; D
.eh_frame:0000000000017932                 db  0Eh
.eh_frame:0000000000017933                 db  30h ; 0
.eh_frame:0000000000017934                 db  86h
.eh_frame:0000000000017935                 db    6
.eh_frame:0000000000017936                 db  41h ; A
.eh_frame:0000000000017937                 db  0Eh
.eh_frame:0000000000017938                 db  38h ; 8
.eh_frame:0000000000017939                 db  83h
.eh_frame:000000000001793A                 db    7
.eh_frame:000000000001793B                 db  53h ; S
.eh_frame:000000000001793C                 db  0Eh
.eh_frame:000000000001793D                 db 0F0h
.eh_frame:000000000001793E                 db    1
.eh_frame:000000000001793F                 db    3
.eh_frame:0000000000017940                 db  81h
.eh_frame:0000000000017941                 db  0Bh
.eh_frame:0000000000017942                 db  0Eh
.eh_frame:0000000000017943                 db 0F8h
.eh_frame:0000000000017944                 db    1
.eh_frame:0000000000017945                 db  4Ah ; J
.eh_frame:0000000000017946                 db  0Eh
.eh_frame:0000000000017947                 db  80h
.eh_frame:0000000000017948                 db    2
.eh_frame:0000000000017949                 db  44h ; D
.eh_frame:000000000001794A                 db  0Eh
.eh_frame:000000000001794B                 db  88h
.eh_frame:000000000001794C                 db    2
.eh_frame:000000000001794D                 db  45h ; E
.eh_frame:000000000001794E                 db  0Eh
.eh_frame:000000000001794F                 db  90h
.eh_frame:0000000000017950                 db    2
.eh_frame:0000000000017951                 db  5Fh ; _
.eh_frame:0000000000017952                 db  0Eh
.eh_frame:0000000000017953                 db 0F0h
.eh_frame:0000000000017954                 db    1
.eh_frame:0000000000017955                 db  64h ; d
.eh_frame:0000000000017956                 db  0Ah
.eh_frame:0000000000017957                 db  0Eh
.eh_frame:0000000000017958                 db  38h ; 8
.eh_frame:0000000000017959                 db  41h ; A
.eh_frame:000000000001795A                 db  0Eh
.eh_frame:000000000001795B                 db  30h ; 0
.eh_frame:000000000001795C                 db  41h ; A
.eh_frame:000000000001795D                 db  0Eh
.eh_frame:000000000001795E                 db  28h ; (
.eh_frame:000000000001795F                 db  42h ; B
.eh_frame:0000000000017960                 db  0Eh
.eh_frame:0000000000017961                 db  20h
.eh_frame:0000000000017962                 db  42h ; B
.eh_frame:0000000000017963                 db  0Eh
.eh_frame:0000000000017964                 db  18h
.eh_frame:0000000000017965                 db  42h ; B
.eh_frame:0000000000017966                 db  0Eh
.eh_frame:0000000000017967                 db  10h
.eh_frame:0000000000017968                 db  42h ; B
.eh_frame:0000000000017969                 db  0Eh
.eh_frame:000000000001796A                 db    8
.eh_frame:000000000001796B                 db  44h ; D
.eh_frame:000000000001796C                 db  0Bh
.eh_frame:000000000001796D                 db    3
.eh_frame:000000000001796E                 db  99h
.eh_frame:000000000001796F                 db    5
.eh_frame:0000000000017970                 db  0Eh
.eh_frame:0000000000017971                 db 0F8h
.eh_frame:0000000000017972                 db    1
.eh_frame:0000000000017973                 db  4Dh ; M
.eh_frame:0000000000017974                 db  0Eh
.eh_frame:0000000000017975                 db  80h
.eh_frame:0000000000017976                 db    2
.eh_frame:0000000000017977                 db  44h ; D
.eh_frame:0000000000017978                 db  0Eh
.eh_frame:0000000000017979                 db  88h
.eh_frame:000000000001797A                 db    2
.eh_frame:000000000001797B                 db  47h ; G
.eh_frame:000000000001797C                 db  0Eh
.eh_frame:000000000001797D                 db  90h
.eh_frame:000000000001797E                 db    2
.eh_frame:000000000001797F                 db  5Bh ; [
.eh_frame:0000000000017980                 db  0Eh
.eh_frame:0000000000017981                 db 0F0h
.eh_frame:0000000000017982                 db    1
.eh_frame:0000000000017983                 db    0
.eh_frame:0000000000017984                 db  68h ; h
.eh_frame:0000000000017985                 db    0
.eh_frame:0000000000017986                 db    0
.eh_frame:0000000000017987                 db    0
.eh_frame:0000000000017988                 db  88h
.eh_frame:0000000000017989                 db  15h
.eh_frame:000000000001798A                 db    0
.eh_frame:000000000001798B                 db    0
.eh_frame:000000000001798C                 db 0B4h
.eh_frame:000000000001798D                 db  6Ah ; j
.eh_frame:000000000001798E                 db 0FFh
.eh_frame:000000000001798F                 db 0FFh
.eh_frame:0000000000017990                 db 0ABh
.eh_frame:0000000000017991                 db    1
.eh_frame:0000000000017992                 db    0
.eh_frame:0000000000017993                 db    0
.eh_frame:0000000000017994                 db    0
.eh_frame:0000000000017995                 db  42h ; B
.eh_frame:0000000000017996                 db  0Eh
.eh_frame:0000000000017997                 db  10h
.eh_frame:0000000000017998                 db  8Fh
.eh_frame:0000000000017999                 db    2
.eh_frame:000000000001799A                 db  42h ; B
.eh_frame:000000000001799B                 db  0Eh
.eh_frame:000000000001799C                 db  18h
.eh_frame:000000000001799D                 db  8Eh
.eh_frame:000000000001799E                 db    3
.eh_frame:000000000001799F                 db  45h ; E
.eh_frame:00000000000179A0                 db  0Eh
.eh_frame:00000000000179A1                 db  20h
.eh_frame:00000000000179A2                 db  8Dh
.eh_frame:00000000000179A3                 db    4
.eh_frame:00000000000179A4                 db  42h ; B
.eh_frame:00000000000179A5                 db  0Eh
.eh_frame:00000000000179A6                 db  28h ; (
.eh_frame:00000000000179A7                 db  8Ch
.eh_frame:00000000000179A8                 db    5
.eh_frame:00000000000179A9                 db  44h ; D
.eh_frame:00000000000179AA                 db  0Eh
.eh_frame:00000000000179AB                 db  30h ; 0
.eh_frame:00000000000179AC                 db  86h
.eh_frame:00000000000179AD                 db    6
.eh_frame:00000000000179AE                 db  41h ; A
.eh_frame:00000000000179AF                 db  0Eh
.eh_frame:00000000000179B0                 db  38h ; 8
.eh_frame:00000000000179B1                 db  83h
.eh_frame:00000000000179B2                 db    7
.eh_frame:00000000000179B3                 db  47h ; G
.eh_frame:00000000000179B4                 db  0Eh
.eh_frame:00000000000179B5                 db  60h ; `
.eh_frame:00000000000179B6                 db    2
.eh_frame:00000000000179B7                 db  99h
.eh_frame:00000000000179B8                 db  0Eh
.eh_frame:00000000000179B9                 db  68h ; h
.eh_frame:00000000000179BA                 db  5Fh ; _
.eh_frame:00000000000179BB                 db  0Eh
.eh_frame:00000000000179BC                 db  70h ; p
.eh_frame:00000000000179BD                 db  46h ; F
.eh_frame:00000000000179BE                 db  0Eh
.eh_frame:00000000000179BF                 db  78h ; x
.eh_frame:00000000000179C0                 db  42h ; B
.eh_frame:00000000000179C1                 db  0Eh
.eh_frame:00000000000179C2                 db  80h
.eh_frame:00000000000179C3                 db    1
.eh_frame:00000000000179C4                 db  59h ; Y
.eh_frame:00000000000179C5                 db  0Eh
.eh_frame:00000000000179C6                 db  60h ; `
.eh_frame:00000000000179C7                 db    2
.eh_frame:00000000000179C8                 db  40h ; @
.eh_frame:00000000000179C9                 db  0Eh
.eh_frame:00000000000179CA                 db  68h ; h
.eh_frame:00000000000179CB                 db  4Bh ; K
.eh_frame:00000000000179CC                 db  0Eh
.eh_frame:00000000000179CD                 db  70h ; p
.eh_frame:00000000000179CE                 db  43h ; C
.eh_frame:00000000000179CF                 db  0Eh
.eh_frame:00000000000179D0                 db  78h ; x
.eh_frame:00000000000179D1                 db  45h ; E
.eh_frame:00000000000179D2                 db  0Eh
.eh_frame:00000000000179D3                 db  80h
.eh_frame:00000000000179D4                 db    1
.eh_frame:00000000000179D5                 db  5Eh ; ^
.eh_frame:00000000000179D6                 db  0Eh
.eh_frame:00000000000179D7                 db  60h ; `
.eh_frame:00000000000179D8                 db  4Ch ; L
.eh_frame:00000000000179D9                 db  0Ah
.eh_frame:00000000000179DA                 db  0Eh
.eh_frame:00000000000179DB                 db  38h ; 8
.eh_frame:00000000000179DC                 db  44h ; D
.eh_frame:00000000000179DD                 db  0Eh
.eh_frame:00000000000179DE                 db  30h ; 0
.eh_frame:00000000000179DF                 db  41h ; A
.eh_frame:00000000000179E0                 db  0Eh
.eh_frame:00000000000179E1                 db  28h ; (
.eh_frame:00000000000179E2                 db  42h ; B
.eh_frame:00000000000179E3                 db  0Eh
.eh_frame:00000000000179E4                 db  20h
.eh_frame:00000000000179E5                 db  42h ; B
.eh_frame:00000000000179E6                 db  0Eh
.eh_frame:00000000000179E7                 db  18h
.eh_frame:00000000000179E8                 db  42h ; B
.eh_frame:00000000000179E9                 db  0Eh
.eh_frame:00000000000179EA                 db  10h
.eh_frame:00000000000179EB                 db  42h ; B
.eh_frame:00000000000179EC                 db  0Eh
.eh_frame:00000000000179ED                 db    8
.eh_frame:00000000000179EE                 db  46h ; F
.eh_frame:00000000000179EF                 db  0Bh
.eh_frame:00000000000179F0                 db  28h ; (
.eh_frame:00000000000179F1                 db    0
.eh_frame:00000000000179F2                 db    0
.eh_frame:00000000000179F3                 db    0
.eh_frame:00000000000179F4                 db 0F4h
.eh_frame:00000000000179F5                 db  15h
.eh_frame:00000000000179F6                 db    0
.eh_frame:00000000000179F7                 db    0
.eh_frame:00000000000179F8                 db 0F8h
.eh_frame:00000000000179F9                 db  6Bh ; k
.eh_frame:00000000000179FA                 db 0FFh
.eh_frame:00000000000179FB                 db 0FFh
.eh_frame:00000000000179FC                 db  36h ; 6
.eh_frame:00000000000179FD                 db    0
.eh_frame:00000000000179FE                 db    0
.eh_frame:00000000000179FF                 db    0
.eh_frame:0000000000017A00                 db    0
.eh_frame:0000000000017A01                 db  42h ; B
.eh_frame:0000000000017A02                 db  0Eh
.eh_frame:0000000000017A03                 db  10h
.eh_frame:0000000000017A04                 db  8Ch
.eh_frame:0000000000017A05                 db    2
.eh_frame:0000000000017A06                 db  41h ; A
.eh_frame:0000000000017A07                 db  0Eh
.eh_frame:0000000000017A08                 db  18h
.eh_frame:0000000000017A09                 db  86h
.eh_frame:0000000000017A0A                 db    3
.eh_frame:0000000000017A0B                 db  41h ; A
.eh_frame:0000000000017A0C                 db  0Eh
.eh_frame:0000000000017A0D                 db  20h
.eh_frame:0000000000017A0E                 db  83h
.eh_frame:0000000000017A0F                 db    4
.eh_frame:0000000000017A10                 db  6Eh ; n
.eh_frame:0000000000017A11                 db  0Eh
.eh_frame:0000000000017A12                 db  18h
.eh_frame:0000000000017A13                 db  41h ; A
.eh_frame:0000000000017A14                 db  0Eh
.eh_frame:0000000000017A15                 db  10h
.eh_frame:0000000000017A16                 db  42h ; B
.eh_frame:0000000000017A17                 db  0Eh
.eh_frame:0000000000017A18                 db    8
.eh_frame:0000000000017A19                 db    0
.eh_frame:0000000000017A1A                 db    0
.eh_frame:0000000000017A1B                 db    0
.eh_frame:0000000000017A1C                 db  10h
.eh_frame:0000000000017A1D                 db    0
.eh_frame:0000000000017A1E                 db    0
.eh_frame:0000000000017A1F                 db    0
.eh_frame:0000000000017A20                 db  20h
.eh_frame:0000000000017A21                 db  16h
.eh_frame:0000000000017A22                 db    0
.eh_frame:0000000000017A23                 db    0
.eh_frame:0000000000017A24                 db  0Ch
.eh_frame:0000000000017A25                 db  6Ch ; l
.eh_frame:0000000000017A26                 db 0FFh
.eh_frame:0000000000017A27                 db 0FFh
.eh_frame:0000000000017A28                 db  11h
.eh_frame:0000000000017A29                 db    0
.eh_frame:0000000000017A2A                 db    0
.eh_frame:0000000000017A2B                 db    0
.eh_frame:0000000000017A2C                 db    0
.eh_frame:0000000000017A2D                 db    0
.eh_frame:0000000000017A2E                 db    0
.eh_frame:0000000000017A2F                 db    0
.eh_frame:0000000000017A30                 db  10h
.eh_frame:0000000000017A31                 db    0
.eh_frame:0000000000017A32                 db    0
.eh_frame:0000000000017A33                 db    0
.eh_frame:0000000000017A34                 db  34h ; 4
.eh_frame:0000000000017A35                 db  16h
.eh_frame:0000000000017A36                 db    0
.eh_frame:0000000000017A37                 db    0
.eh_frame:0000000000017A38                 db  18h
.eh_frame:0000000000017A39                 db  6Ch ; l
.eh_frame:0000000000017A3A                 db 0FFh
.eh_frame:0000000000017A3B                 db 0FFh
.eh_frame:0000000000017A3C                 db  11h
.eh_frame:0000000000017A3D                 db    0
.eh_frame:0000000000017A3E                 db    0
.eh_frame:0000000000017A3F                 db    0
.eh_frame:0000000000017A40                 db    0
.eh_frame:0000000000017A41                 db    0
.eh_frame:0000000000017A42                 db    0
.eh_frame:0000000000017A43                 db    0
.eh_frame:0000000000017A44                 db  10h
.eh_frame:0000000000017A45                 db    0
.eh_frame:0000000000017A46                 db    0
.eh_frame:0000000000017A47                 db    0
.eh_frame:0000000000017A48                 db  48h ; H
.eh_frame:0000000000017A49                 db  16h
.eh_frame:0000000000017A4A                 db    0
.eh_frame:0000000000017A4B                 db    0
.eh_frame:0000000000017A4C                 db  24h ; $
.eh_frame:0000000000017A4D                 db  6Ch ; l
.eh_frame:0000000000017A4E                 db 0FFh
.eh_frame:0000000000017A4F                 db 0FFh
.eh_frame:0000000000017A50                 db  35h ; 5
.eh_frame:0000000000017A51                 db    0
.eh_frame:0000000000017A52                 db    0
.eh_frame:0000000000017A53                 db    0
.eh_frame:0000000000017A54                 db    0
.eh_frame:0000000000017A55                 db    0
.eh_frame:0000000000017A56                 db    0
.eh_frame:0000000000017A57                 db    0
.eh_frame:0000000000017A58                 db  10h
.eh_frame:0000000000017A59                 db    0
.eh_frame:0000000000017A5A                 db    0
.eh_frame:0000000000017A5B                 db    0
.eh_frame:0000000000017A5C                 db  5Ch ; \
.eh_frame:0000000000017A5D                 db  16h
.eh_frame:0000000000017A5E                 db    0
.eh_frame:0000000000017A5F                 db    0
.eh_frame:0000000000017A60                 db  50h ; P
.eh_frame:0000000000017A61                 db  6Ch ; l
.eh_frame:0000000000017A62                 db 0FFh
.eh_frame:0000000000017A63                 db 0FFh
.eh_frame:0000000000017A64                 db  15h
.eh_frame:0000000000017A65                 db    0
.eh_frame:0000000000017A66                 db    0
.eh_frame:0000000000017A67                 db    0
.eh_frame:0000000000017A68                 db    0
.eh_frame:0000000000017A69                 db    0
.eh_frame:0000000000017A6A                 db    0
.eh_frame:0000000000017A6B                 db    0
.eh_frame:0000000000017A6C                 db  10h
.eh_frame:0000000000017A6D                 db    0
.eh_frame:0000000000017A6E                 db    0
.eh_frame:0000000000017A6F                 db    0
.eh_frame:0000000000017A70                 db  70h ; p
.eh_frame:0000000000017A71                 db  16h
.eh_frame:0000000000017A72                 db    0
.eh_frame:0000000000017A73                 db    0
.eh_frame:0000000000017A74                 db  5Ch ; \
.eh_frame:0000000000017A75                 db  6Ch ; l
.eh_frame:0000000000017A76                 db 0FFh
.eh_frame:0000000000017A77                 db 0FFh
.eh_frame:0000000000017A78                 db  30h ; 0
.eh_frame:0000000000017A79                 db    0
.eh_frame:0000000000017A7A                 db    0
.eh_frame:0000000000017A7B                 db    0
.eh_frame:0000000000017A7C                 db    0
.eh_frame:0000000000017A7D                 db  6Bh ; k
.eh_frame:0000000000017A7E                 db  0Eh
.eh_frame:0000000000017A7F                 db  10h
.eh_frame:0000000000017A80                 db  50h ; P
.eh_frame:0000000000017A81                 db    0
.eh_frame:0000000000017A82                 db    0
.eh_frame:0000000000017A83                 db    0
.eh_frame:0000000000017A84                 db  84h
.eh_frame:0000000000017A85                 db  16h
.eh_frame:0000000000017A86                 db    0
.eh_frame:0000000000017A87                 db    0
.eh_frame:0000000000017A88                 db  78h ; x
.eh_frame:0000000000017A89                 db  6Ch ; l
.eh_frame:0000000000017A8A                 db 0FFh
.eh_frame:0000000000017A8B                 db 0FFh
.eh_frame:0000000000017A8C                 db  74h ; t
.eh_frame:0000000000017A8D                 db    0
.eh_frame:0000000000017A8E                 db    0
.eh_frame:0000000000017A8F                 db    0
.eh_frame:0000000000017A90                 db    0
.eh_frame:0000000000017A91                 db  42h ; B
.eh_frame:0000000000017A92                 db  0Eh
.eh_frame:0000000000017A93                 db  10h
.eh_frame:0000000000017A94                 db  8Fh
.eh_frame:0000000000017A95                 db    2
.eh_frame:0000000000017A96                 db  42h ; B
.eh_frame:0000000000017A97                 db  0Eh
.eh_frame:0000000000017A98                 db  18h
.eh_frame:0000000000017A99                 db  8Eh
.eh_frame:0000000000017A9A                 db    3
.eh_frame:0000000000017A9B                 db  49h ; I
.eh_frame:0000000000017A9C                 db  0Eh
.eh_frame:0000000000017A9D                 db  20h
.eh_frame:0000000000017A9E                 db  8Dh
.eh_frame:0000000000017A9F                 db    4
.eh_frame:0000000000017AA0                 db  42h ; B
.eh_frame:0000000000017AA1                 db  0Eh
.eh_frame:0000000000017AA2                 db  28h ; (
.eh_frame:0000000000017AA3                 db  8Ch
.eh_frame:0000000000017AA4                 db    5
.eh_frame:0000000000017AA5                 db  44h ; D
.eh_frame:0000000000017AA6                 db  0Eh
.eh_frame:0000000000017AA7                 db  30h ; 0
.eh_frame:0000000000017AA8                 db  86h
.eh_frame:0000000000017AA9                 db    6
.eh_frame:0000000000017AAA                 db  41h ; A
.eh_frame:0000000000017AAB                 db  0Eh
.eh_frame:0000000000017AAC                 db  38h ; 8
.eh_frame:0000000000017AAD                 db  83h
.eh_frame:0000000000017AAE                 db    7
.eh_frame:0000000000017AAF                 db  4Dh ; M
.eh_frame:0000000000017AB0                 db  0Eh
.eh_frame:0000000000017AB1                 db  50h ; P
.eh_frame:0000000000017AB2                 db  5Fh ; _
.eh_frame:0000000000017AB3                 db  0Eh
.eh_frame:0000000000017AB4                 db  58h ; X
.eh_frame:0000000000017AB5                 db  47h ; G
.eh_frame:0000000000017AB6                 db  0Eh
.eh_frame:0000000000017AB7                 db  60h ; `
.eh_frame:0000000000017AB8                 db  46h ; F
.eh_frame:0000000000017AB9                 db  0Eh
.eh_frame:0000000000017ABA                 db  68h ; h
.eh_frame:0000000000017ABB                 db  44h ; D
.eh_frame:0000000000017ABC                 db  0Eh
.eh_frame:0000000000017ABD                 db  70h ; p
.eh_frame:0000000000017ABE                 db  58h ; X
.eh_frame:0000000000017ABF                 db  0Eh
.eh_frame:0000000000017AC0                 db  38h ; 8
.eh_frame:0000000000017AC1                 db  41h ; A
.eh_frame:0000000000017AC2                 db  0Eh
.eh_frame:0000000000017AC3                 db  30h ; 0
.eh_frame:0000000000017AC4                 db  41h ; A
.eh_frame:0000000000017AC5                 db  0Eh
.eh_frame:0000000000017AC6                 db  28h ; (
.eh_frame:0000000000017AC7                 db  42h ; B
.eh_frame:0000000000017AC8                 db  0Eh
.eh_frame:0000000000017AC9                 db  20h
.eh_frame:0000000000017ACA                 db  42h ; B
.eh_frame:0000000000017ACB                 db  0Eh
.eh_frame:0000000000017ACC                 db  18h
.eh_frame:0000000000017ACD                 db  42h ; B
.eh_frame:0000000000017ACE                 db  0Eh
.eh_frame:0000000000017ACF                 db  10h
.eh_frame:0000000000017AD0                 db  42h ; B
.eh_frame:0000000000017AD1                 db  0Eh
.eh_frame:0000000000017AD2                 db    8
.eh_frame:0000000000017AD3                 db    0
.eh_frame:0000000000017AD4                 db  68h ; h
.eh_frame:0000000000017AD5                 db    0
.eh_frame:0000000000017AD6                 db    0
.eh_frame:0000000000017AD7                 db    0
.eh_frame:0000000000017AD8                 db 0D8h
.eh_frame:0000000000017AD9                 db  16h
.eh_frame:0000000000017ADA                 db    0
.eh_frame:0000000000017ADB                 db    0
.eh_frame:0000000000017ADC                 db 0A4h
.eh_frame:0000000000017ADD                 db  6Ch ; l
.eh_frame:0000000000017ADE                 db 0FFh
.eh_frame:0000000000017ADF                 db 0FFh
.eh_frame:0000000000017AE0                 db 0E3h
.eh_frame:0000000000017AE1                 db    0
.eh_frame:0000000000017AE2                 db    0
.eh_frame:0000000000017AE3                 db    0
.eh_frame:0000000000017AE4                 db    0
.eh_frame:0000000000017AE5                 db  42h ; B
.eh_frame:0000000000017AE6                 db  0Eh
.eh_frame:0000000000017AE7                 db  10h
.eh_frame:0000000000017AE8                 db  8Fh
.eh_frame:0000000000017AE9                 db    2
.eh_frame:0000000000017AEA                 db  42h ; B
.eh_frame:0000000000017AEB                 db  0Eh
.eh_frame:0000000000017AEC                 db  18h
.eh_frame:0000000000017AED                 db  8Eh
.eh_frame:0000000000017AEE                 db    3
.eh_frame:0000000000017AEF                 db  49h ; I
.eh_frame:0000000000017AF0                 db  0Eh
.eh_frame:0000000000017AF1                 db  20h
.eh_frame:0000000000017AF2                 db  8Dh
.eh_frame:0000000000017AF3                 db    4
.eh_frame:0000000000017AF4                 db  42h ; B
.eh_frame:0000000000017AF5                 db  0Eh
.eh_frame:0000000000017AF6                 db  28h ; (
.eh_frame:0000000000017AF7                 db  8Ch
.eh_frame:0000000000017AF8                 db    5
.eh_frame:0000000000017AF9                 db  44h ; D
.eh_frame:0000000000017AFA                 db  0Eh
.eh_frame:0000000000017AFB                 db  30h ; 0
.eh_frame:0000000000017AFC                 db  86h
.eh_frame:0000000000017AFD                 db    6
.eh_frame:0000000000017AFE                 db  41h ; A
.eh_frame:0000000000017AFF                 db  0Eh
.eh_frame:0000000000017B00                 db  38h ; 8
.eh_frame:0000000000017B01                 db  83h
.eh_frame:0000000000017B02                 db    7
.eh_frame:0000000000017B03                 db  4Dh ; M
.eh_frame:0000000000017B04                 db  0Eh
.eh_frame:0000000000017B05                 db  70h ; p
.eh_frame:0000000000017B06                 db  65h ; e
.eh_frame:0000000000017B07                 db  0Eh
.eh_frame:0000000000017B08                 db  78h ; x
.eh_frame:0000000000017B09                 db  4Dh ; M
.eh_frame:0000000000017B0A                 db  0Eh
.eh_frame:0000000000017B0B                 db  80h
.eh_frame:0000000000017B0C                 db    1
.eh_frame:0000000000017B0D                 db  46h ; F
.eh_frame:0000000000017B0E                 db  0Eh
.eh_frame:0000000000017B0F                 db  88h
.eh_frame:0000000000017B10                 db    1
.eh_frame:0000000000017B11                 db  42h ; B
.eh_frame:0000000000017B12                 db  0Eh
.eh_frame:0000000000017B13                 db  90h
.eh_frame:0000000000017B14                 db    1
.eh_frame:0000000000017B15                 db  5Eh ; ^
.eh_frame:0000000000017B16                 db  0Eh
.eh_frame:0000000000017B17                 db  70h ; p
.eh_frame:0000000000017B18                 db  56h ; V
.eh_frame:0000000000017B19                 db  0Eh
.eh_frame:0000000000017B1A                 db  78h ; x
.eh_frame:0000000000017B1B                 db  43h ; C
.eh_frame:0000000000017B1C                 db  0Eh
.eh_frame:0000000000017B1D                 db  80h
.eh_frame:0000000000017B1E                 db    1
.eh_frame:0000000000017B1F                 db  43h ; C
.eh_frame:0000000000017B20                 db  0Eh
.eh_frame:0000000000017B21                 db  88h
.eh_frame:0000000000017B22                 db    1
.eh_frame:0000000000017B23                 db  56h ; V
.eh_frame:0000000000017B24                 db  0Eh
.eh_frame:0000000000017B25                 db  90h
.eh_frame:0000000000017B26                 db    1
.eh_frame:0000000000017B27                 db  52h ; R
.eh_frame:0000000000017B28                 db  0Eh
.eh_frame:0000000000017B29                 db  70h ; p
.eh_frame:0000000000017B2A                 db  5Bh ; [
.eh_frame:0000000000017B2B                 db  0Eh
.eh_frame:0000000000017B2C                 db  38h ; 8
.eh_frame:0000000000017B2D                 db  41h ; A
.eh_frame:0000000000017B2E                 db  0Eh
.eh_frame:0000000000017B2F                 db  30h ; 0
.eh_frame:0000000000017B30                 db  41h ; A
.eh_frame:0000000000017B31                 db  0Eh
.eh_frame:0000000000017B32                 db  28h ; (
.eh_frame:0000000000017B33                 db  42h ; B
.eh_frame:0000000000017B34                 db  0Eh
.eh_frame:0000000000017B35                 db  20h
.eh_frame:0000000000017B36                 db  42h ; B
.eh_frame:0000000000017B37                 db  0Eh
.eh_frame:0000000000017B38                 db  18h
.eh_frame:0000000000017B39                 db  42h ; B
.eh_frame:0000000000017B3A                 db  0Eh
.eh_frame:0000000000017B3B                 db  10h
.eh_frame:0000000000017B3C                 db  42h ; B
.eh_frame:0000000000017B3D                 db  0Eh
.eh_frame:0000000000017B3E                 db    8
.eh_frame:0000000000017B3F                 db    0
.eh_frame:0000000000017B40                 db  10h
.eh_frame:0000000000017B41                 db    0
.eh_frame:0000000000017B42                 db    0
.eh_frame:0000000000017B43                 db    0
.eh_frame:0000000000017B44                 db  44h ; D
.eh_frame:0000000000017B45                 db  17h
.eh_frame:0000000000017B46                 db    0
.eh_frame:0000000000017B47                 db    0
.eh_frame:0000000000017B48                 db  28h ; (
.eh_frame:0000000000017B49                 db  6Dh ; m
.eh_frame:0000000000017B4A                 db 0FFh
.eh_frame:0000000000017B4B                 db 0FFh
.eh_frame:0000000000017B4C                 db  0Ah
.eh_frame:0000000000017B4D                 db    0
.eh_frame:0000000000017B4E                 db    0
.eh_frame:0000000000017B4F                 db    0
.eh_frame:0000000000017B50                 db    0
.eh_frame:0000000000017B51                 db    0
.eh_frame:0000000000017B52                 db    0
.eh_frame:0000000000017B53                 db    0
.eh_frame:0000000000017B54                 db  28h ; (
.eh_frame:0000000000017B55                 db    0
.eh_frame:0000000000017B56                 db    0
.eh_frame:0000000000017B57                 db    0
.eh_frame:0000000000017B58                 db  58h ; X
.eh_frame:0000000000017B59                 db  17h
.eh_frame:0000000000017B5A                 db    0
.eh_frame:0000000000017B5B                 db    0
.eh_frame:0000000000017B5C                 db  24h ; $
.eh_frame:0000000000017B5D                 db  6Dh ; m
.eh_frame:0000000000017B5E                 db 0FFh
.eh_frame:0000000000017B5F                 db 0FFh
.eh_frame:0000000000017B60                 db  93h
.eh_frame:0000000000017B61                 db    0
.eh_frame:0000000000017B62                 db    0
.eh_frame:0000000000017B63                 db    0
.eh_frame:0000000000017B64                 db    0
.eh_frame:0000000000017B65                 db  48h ; H
.eh_frame:0000000000017B66                 db  0Eh
.eh_frame:0000000000017B67                 db  10h
.eh_frame:0000000000017B68                 db  8Ch
.eh_frame:0000000000017B69                 db    2
.eh_frame:0000000000017B6A                 db  48h ; H
.eh_frame:0000000000017B6B                 db  0Eh
.eh_frame:0000000000017B6C                 db  18h
.eh_frame:0000000000017B6D                 db  86h
.eh_frame:0000000000017B6E                 db    3
.eh_frame:0000000000017B6F                 db  41h ; A
.eh_frame:0000000000017B70                 db  0Eh
.eh_frame:0000000000017B71                 db  20h
.eh_frame:0000000000017B72                 db  83h
.eh_frame:0000000000017B73                 db    4
.eh_frame:0000000000017B74                 db    2
.eh_frame:0000000000017B75                 db  74h ; t
.eh_frame:0000000000017B76                 db  0Eh
.eh_frame:0000000000017B77                 db  18h
.eh_frame:0000000000017B78                 db  4Bh ; K
.eh_frame:0000000000017B79                 db  0Eh
.eh_frame:0000000000017B7A                 db  10h
.eh_frame:0000000000017B7B                 db  42h ; B
.eh_frame:0000000000017B7C                 db  0Eh
.eh_frame:0000000000017B7D                 db    8
.eh_frame:0000000000017B7E                 db    0
.eh_frame:0000000000017B7F                 db    0
.eh_frame:0000000000017B80                 db  10h
.eh_frame:0000000000017B81                 db    0
.eh_frame:0000000000017B82                 db    0
.eh_frame:0000000000017B83                 db    0
.eh_frame:0000000000017B84                 db  84h
.eh_frame:0000000000017B85                 db  17h
.eh_frame:0000000000017B86                 db    0
.eh_frame:0000000000017B87                 db    0
.eh_frame:0000000000017B88                 db  98h
.eh_frame:0000000000017B89                 db  6Dh ; m
.eh_frame:0000000000017B8A                 db 0FFh
.eh_frame:0000000000017B8B                 db 0FFh
.eh_frame:0000000000017B8C                 db  13h
.eh_frame:0000000000017B8D                 db    0
.eh_frame:0000000000017B8E                 db    0
.eh_frame:0000000000017B8F                 db    0
.eh_frame:0000000000017B90                 db    0
.eh_frame:0000000000017B91                 db    0
.eh_frame:0000000000017B92                 db    0
.eh_frame:0000000000017B93                 db    0
.eh_frame:0000000000017B94                 db  10h
.eh_frame:0000000000017B95                 db    0
.eh_frame:0000000000017B96                 db    0
.eh_frame:0000000000017B97                 db    0
.eh_frame:0000000000017B98                 db  98h
.eh_frame:0000000000017B99                 db  17h
.eh_frame:0000000000017B9A                 db    0
.eh_frame:0000000000017B9B                 db    0
.eh_frame:0000000000017B9C                 db 0A4h
.eh_frame:0000000000017B9D                 db  6Dh ; m
.eh_frame:0000000000017B9E                 db 0FFh
.eh_frame:0000000000017B9F                 db 0FFh
.eh_frame:0000000000017BA0                 db  0Ch
.eh_frame:0000000000017BA1                 db    0
.eh_frame:0000000000017BA2                 db    0
.eh_frame:0000000000017BA3                 db    0
.eh_frame:0000000000017BA4                 db    0
.eh_frame:0000000000017BA5                 db    0
.eh_frame:0000000000017BA6                 db    0
.eh_frame:0000000000017BA7                 db    0
.eh_frame:0000000000017BA8                 db  10h
.eh_frame:0000000000017BA9                 db    0
.eh_frame:0000000000017BAA                 db    0
.eh_frame:0000000000017BAB                 db    0
.eh_frame:0000000000017BAC                 db 0ACh
.eh_frame:0000000000017BAD                 db  17h
.eh_frame:0000000000017BAE                 db    0
.eh_frame:0000000000017BAF                 db    0
.eh_frame:0000000000017BB0                 db 0A0h
.eh_frame:0000000000017BB1                 db  6Dh ; m
.eh_frame:0000000000017BB2                 db 0FFh
.eh_frame:0000000000017BB3                 db 0FFh
.eh_frame:0000000000017BB4                 db  18h
.eh_frame:0000000000017BB5                 db    0
.eh_frame:0000000000017BB6                 db    0
.eh_frame:0000000000017BB7                 db    0
.eh_frame:0000000000017BB8                 db    0
.eh_frame:0000000000017BB9                 db    0
.eh_frame:0000000000017BBA                 db    0
.eh_frame:0000000000017BBB                 db    0
.eh_frame:0000000000017BBC                 db  10h
.eh_frame:0000000000017BBD                 db    0
.eh_frame:0000000000017BBE                 db    0
.eh_frame:0000000000017BBF                 db    0
.eh_frame:0000000000017BC0                 db 0C0h
.eh_frame:0000000000017BC1                 db  17h
.eh_frame:0000000000017BC2                 db    0
.eh_frame:0000000000017BC3                 db    0
.eh_frame:0000000000017BC4                 db 0ACh
.eh_frame:0000000000017BC5                 db  6Dh ; m
.eh_frame:0000000000017BC6                 db 0FFh
.eh_frame:0000000000017BC7                 db 0FFh
.eh_frame:0000000000017BC8                 db  14h
.eh_frame:0000000000017BC9                 db    0
.eh_frame:0000000000017BCA                 db    0
.eh_frame:0000000000017BCB                 db    0
.eh_frame:0000000000017BCC                 db    0
.eh_frame:0000000000017BCD                 db    0
.eh_frame:0000000000017BCE                 db    0
.eh_frame:0000000000017BCF                 db    0
.eh_frame:0000000000017BD0                 db  18h
.eh_frame:0000000000017BD1                 db    0
.eh_frame:0000000000017BD2                 db    0
.eh_frame:0000000000017BD3                 db    0
.eh_frame:0000000000017BD4                 db 0D4h
.eh_frame:0000000000017BD5                 db  17h
.eh_frame:0000000000017BD6                 db    0
.eh_frame:0000000000017BD7                 db    0
.eh_frame:0000000000017BD8                 db 0B8h
.eh_frame:0000000000017BD9                 db  6Dh ; m
.eh_frame:0000000000017BDA                 db 0FFh
.eh_frame:0000000000017BDB                 db 0FFh
.eh_frame:0000000000017BDC                 db  8Eh
.eh_frame:0000000000017BDD                 db    0
.eh_frame:0000000000017BDE                 db    0
.eh_frame:0000000000017BDF                 db    0
.eh_frame:0000000000017BE0                 db    0
.eh_frame:0000000000017BE1                 db  44h ; D
.eh_frame:0000000000017BE2                 db  0Eh
.eh_frame:0000000000017BE3                 db  50h ; P
.eh_frame:0000000000017BE4                 db    2
.eh_frame:0000000000017BE5                 db  7Fh ; 
.eh_frame:0000000000017BE6                 db  0Ah
.eh_frame:0000000000017BE7                 db  0Eh
.eh_frame:0000000000017BE8                 db    8
.eh_frame:0000000000017BE9                 db  41h ; A
.eh_frame:0000000000017BEA                 db  0Bh
.eh_frame:0000000000017BEB                 db    0
.eh_frame:0000000000017BEC                 db  18h
.eh_frame:0000000000017BED                 db    0
.eh_frame:0000000000017BEE                 db    0
.eh_frame:0000000000017BEF                 db    0
.eh_frame:0000000000017BF0                 db 0F0h
.eh_frame:0000000000017BF1                 db  17h
.eh_frame:0000000000017BF2                 db    0
.eh_frame:0000000000017BF3                 db    0
.eh_frame:0000000000017BF4                 db  2Ch ; ,
.eh_frame:0000000000017BF5                 db  6Eh ; n
.eh_frame:0000000000017BF6                 db 0FFh
.eh_frame:0000000000017BF7                 db 0FFh
.eh_frame:0000000000017BF8                 db  8Ah
.eh_frame:0000000000017BF9                 db    0
.eh_frame:0000000000017BFA                 db    0
.eh_frame:0000000000017BFB                 db    0
.eh_frame:0000000000017BFC                 db    0
.eh_frame:0000000000017BFD                 db  44h ; D
.eh_frame:0000000000017BFE                 db  0Eh
.eh_frame:0000000000017BFF                 db  50h ; P
.eh_frame:0000000000017C00                 db    2
.eh_frame:0000000000017C01                 db  7Bh ; {
.eh_frame:0000000000017C02                 db  0Ah
.eh_frame:0000000000017C03                 db  0Eh
.eh_frame:0000000000017C04                 db    8
.eh_frame:0000000000017C05                 db  41h ; A
.eh_frame:0000000000017C06                 db  0Bh
.eh_frame:0000000000017C07                 db    0
.eh_frame:0000000000017C08                 db  10h
.eh_frame:0000000000017C09                 db    0
.eh_frame:0000000000017C0A                 db    0
.eh_frame:0000000000017C0B                 db    0
.eh_frame:0000000000017C0C                 db  0Ch
.eh_frame:0000000000017C0D                 db  18h
.eh_frame:0000000000017C0E                 db    0
.eh_frame:0000000000017C0F                 db    0
.eh_frame:0000000000017C10                 db 0A0h
.eh_frame:0000000000017C11                 db  6Eh ; n
.eh_frame:0000000000017C12                 db 0FFh
.eh_frame:0000000000017C13                 db 0FFh
.eh_frame:0000000000017C14                 db  0Ch
.eh_frame:0000000000017C15                 db    0
.eh_frame:0000000000017C16                 db    0
.eh_frame:0000000000017C17                 db    0
.eh_frame:0000000000017C18                 db    0
.eh_frame:0000000000017C19                 db    0
.eh_frame:0000000000017C1A                 db    0
.eh_frame:0000000000017C1B                 db    0
.eh_frame:0000000000017C1C                 db  10h
.eh_frame:0000000000017C1D                 db    0
.eh_frame:0000000000017C1E                 db    0
.eh_frame:0000000000017C1F                 db    0
.eh_frame:0000000000017C20                 db  20h
.eh_frame:0000000000017C21                 db  18h
.eh_frame:0000000000017C22                 db    0
.eh_frame:0000000000017C23                 db    0
.eh_frame:0000000000017C24                 db  9Ch
.eh_frame:0000000000017C25                 db  6Eh ; n
.eh_frame:0000000000017C26                 db 0FFh
.eh_frame:0000000000017C27                 db 0FFh
.eh_frame:0000000000017C28                 db  0Fh
.eh_frame:0000000000017C29                 db    0
.eh_frame:0000000000017C2A                 db    0
.eh_frame:0000000000017C2B                 db    0
.eh_frame:0000000000017C2C                 db    0
.eh_frame:0000000000017C2D                 db    0
.eh_frame:0000000000017C2E                 db    0
.eh_frame:0000000000017C2F                 db    0
.eh_frame:0000000000017C30                 db  18h
.eh_frame:0000000000017C31                 db    0
.eh_frame:0000000000017C32                 db    0
.eh_frame:0000000000017C33                 db    0
.eh_frame:0000000000017C34                 db  34h ; 4
.eh_frame:0000000000017C35                 db  18h
.eh_frame:0000000000017C36                 db    0
.eh_frame:0000000000017C37                 db    0
.eh_frame:0000000000017C38                 db  98h
.eh_frame:0000000000017C39                 db  6Eh ; n
.eh_frame:0000000000017C3A                 db 0FFh
.eh_frame:0000000000017C3B                 db 0FFh
.eh_frame:0000000000017C3C                 db  98h
.eh_frame:0000000000017C3D                 db    0
.eh_frame:0000000000017C3E                 db    0
.eh_frame:0000000000017C3F                 db    0
.eh_frame:0000000000017C40                 db    0
.eh_frame:0000000000017C41                 db  44h ; D
.eh_frame:0000000000017C42                 db  0Eh
.eh_frame:0000000000017C43                 db  50h ; P
.eh_frame:0000000000017C44                 db    2
.eh_frame:0000000000017C45                 db  8Eh
.eh_frame:0000000000017C46                 db  0Ah
.eh_frame:0000000000017C47                 db  0Eh
.eh_frame:0000000000017C48                 db    8
.eh_frame:0000000000017C49                 db  41h ; A
.eh_frame:0000000000017C4A                 db  0Bh
.eh_frame:0000000000017C4B                 db    0
.eh_frame:0000000000017C4C                 db  10h
.eh_frame:0000000000017C4D                 db    0
.eh_frame:0000000000017C4E                 db    0
.eh_frame:0000000000017C4F                 db    0
.eh_frame:0000000000017C50                 db  50h ; P
.eh_frame:0000000000017C51                 db  18h
.eh_frame:0000000000017C52                 db    0
.eh_frame:0000000000017C53                 db    0
.eh_frame:0000000000017C54                 db  1Ch
.eh_frame:0000000000017C55                 db  6Fh ; o
.eh_frame:0000000000017C56                 db 0FFh
.eh_frame:0000000000017C57                 db 0FFh
.eh_frame:0000000000017C58                 db  10h
.eh_frame:0000000000017C59                 db    0
.eh_frame:0000000000017C5A                 db    0
.eh_frame:0000000000017C5B                 db    0
.eh_frame:0000000000017C5C                 db    0
.eh_frame:0000000000017C5D                 db    0
.eh_frame:0000000000017C5E                 db    0
.eh_frame:0000000000017C5F                 db    0
.eh_frame:0000000000017C60                 db  10h
.eh_frame:0000000000017C61                 db    0
.eh_frame:0000000000017C62                 db    0
.eh_frame:0000000000017C63                 db    0
.eh_frame:0000000000017C64                 db  64h ; d
.eh_frame:0000000000017C65                 db  18h
.eh_frame:0000000000017C66                 db    0
.eh_frame:0000000000017C67                 db    0
.eh_frame:0000000000017C68                 db  18h
.eh_frame:0000000000017C69                 db  6Fh ; o
.eh_frame:0000000000017C6A                 db 0FFh
.eh_frame:0000000000017C6B                 db 0FFh
.eh_frame:0000000000017C6C                 db  11h
.eh_frame:0000000000017C6D                 db    0
.eh_frame:0000000000017C6E                 db    0
.eh_frame:0000000000017C6F                 db    0
.eh_frame:0000000000017C70                 db    0
.eh_frame:0000000000017C71                 db    0
.eh_frame:0000000000017C72                 db    0
.eh_frame:0000000000017C73                 db    0
.eh_frame:0000000000017C74                 db  10h
.eh_frame:0000000000017C75                 db    0
.eh_frame:0000000000017C76                 db    0
.eh_frame:0000000000017C77                 db    0
.eh_frame:0000000000017C78                 db  78h ; x
.eh_frame:0000000000017C79                 db  18h
.eh_frame:0000000000017C7A                 db    0
.eh_frame:0000000000017C7B                 db    0
.eh_frame:0000000000017C7C                 db  24h ; $
.eh_frame:0000000000017C7D                 db  6Fh ; o
.eh_frame:0000000000017C7E                 db 0FFh
.eh_frame:0000000000017C7F                 db 0FFh
.eh_frame:0000000000017C80                 db  0Ah
.eh_frame:0000000000017C81                 db    0
.eh_frame:0000000000017C82                 db    0
.eh_frame:0000000000017C83                 db    0
.eh_frame:0000000000017C84                 db    0
.eh_frame:0000000000017C85                 db    0
.eh_frame:0000000000017C86                 db    0
.eh_frame:0000000000017C87                 db    0
.eh_frame:0000000000017C88                 db  18h
.eh_frame:0000000000017C89                 db    0
.eh_frame:0000000000017C8A                 db    0
.eh_frame:0000000000017C8B                 db    0
.eh_frame:0000000000017C8C                 db  8Ch
.eh_frame:0000000000017C8D                 db  18h
.eh_frame:0000000000017C8E                 db    0
.eh_frame:0000000000017C8F                 db    0
.eh_frame:0000000000017C90                 db  20h
.eh_frame:0000000000017C91                 db  6Fh ; o
.eh_frame:0000000000017C92                 db 0FFh
.eh_frame:0000000000017C93                 db 0FFh
.eh_frame:0000000000017C94                 db  8Eh
.eh_frame:0000000000017C95                 db    0
.eh_frame:0000000000017C96                 db    0
.eh_frame:0000000000017C97                 db    0
.eh_frame:0000000000017C98                 db    0
.eh_frame:0000000000017C99                 db  44h ; D
.eh_frame:0000000000017C9A                 db  0Eh
.eh_frame:0000000000017C9B                 db  50h ; P
.eh_frame:0000000000017C9C                 db    2
.eh_frame:0000000000017C9D                 db  7Fh ; 
.eh_frame:0000000000017C9E                 db  0Ah
.eh_frame:0000000000017C9F                 db  0Eh
.eh_frame:0000000000017CA0                 db    8
.eh_frame:0000000000017CA1                 db  41h ; A
.eh_frame:0000000000017CA2                 db  0Bh
.eh_frame:0000000000017CA3                 db    0
.eh_frame:0000000000017CA4                 db  18h
.eh_frame:0000000000017CA5                 db    0
.eh_frame:0000000000017CA6                 db    0
.eh_frame:0000000000017CA7                 db    0
.eh_frame:0000000000017CA8                 db 0A8h
.eh_frame:0000000000017CA9                 db  18h
.eh_frame:0000000000017CAA                 db    0
.eh_frame:0000000000017CAB                 db    0
.eh_frame:0000000000017CAC                 db  94h
.eh_frame:0000000000017CAD                 db  6Fh ; o
.eh_frame:0000000000017CAE                 db 0FFh
.eh_frame:0000000000017CAF                 db 0FFh
.eh_frame:0000000000017CB0                 db  91h
.eh_frame:0000000000017CB1                 db    0
.eh_frame:0000000000017CB2                 db    0
.eh_frame:0000000000017CB3                 db    0
.eh_frame:0000000000017CB4                 db    0
.eh_frame:0000000000017CB5                 db  44h ; D
.eh_frame:0000000000017CB6                 db  0Eh
.eh_frame:0000000000017CB7                 db  50h ; P
.eh_frame:0000000000017CB8                 db    2
.eh_frame:0000000000017CB9                 db  82h
.eh_frame:0000000000017CBA                 db  0Ah
.eh_frame:0000000000017CBB                 db  0Eh
.eh_frame:0000000000017CBC                 db    8
.eh_frame:0000000000017CBD                 db  41h ; A
.eh_frame:0000000000017CBE                 db  0Bh
.eh_frame:0000000000017CBF                 db    0
.eh_frame:0000000000017CC0                 db  10h
.eh_frame:0000000000017CC1                 db    0
.eh_frame:0000000000017CC2                 db    0
.eh_frame:0000000000017CC3                 db    0
.eh_frame:0000000000017CC4                 db 0C4h
.eh_frame:0000000000017CC5                 db  18h
.eh_frame:0000000000017CC6                 db    0
.eh_frame:0000000000017CC7                 db    0
.eh_frame:0000000000017CC8                 db  18h
.eh_frame:0000000000017CC9                 db  70h ; p
.eh_frame:0000000000017CCA                 db 0FFh
.eh_frame:0000000000017CCB                 db 0FFh
.eh_frame:0000000000017CCC                 db  0Ch
.eh_frame:0000000000017CCD                 db    0
.eh_frame:0000000000017CCE                 db    0
.eh_frame:0000000000017CCF                 db    0
.eh_frame:0000000000017CD0                 db    0
.eh_frame:0000000000017CD1                 db    0
.eh_frame:0000000000017CD2                 db    0
.eh_frame:0000000000017CD3                 db    0
.eh_frame:0000000000017CD4                 db  10h
.eh_frame:0000000000017CD5                 db    0
.eh_frame:0000000000017CD6                 db    0
.eh_frame:0000000000017CD7                 db    0
.eh_frame:0000000000017CD8                 db 0D8h
.eh_frame:0000000000017CD9                 db  18h
.eh_frame:0000000000017CDA                 db    0
.eh_frame:0000000000017CDB                 db    0
.eh_frame:0000000000017CDC                 db  14h
.eh_frame:0000000000017CDD                 db  70h ; p
.eh_frame:0000000000017CDE                 db 0FFh
.eh_frame:0000000000017CDF                 db 0FFh
.eh_frame:0000000000017CE0                 db  17h
.eh_frame:0000000000017CE1                 db    0
.eh_frame:0000000000017CE2                 db    0
.eh_frame:0000000000017CE3                 db    0
.eh_frame:0000000000017CE4                 db    0
.eh_frame:0000000000017CE5                 db    0
.eh_frame:0000000000017CE6                 db    0
.eh_frame:0000000000017CE7                 db    0
.eh_frame:0000000000017CE8                 db  10h
.eh_frame:0000000000017CE9                 db    0
.eh_frame:0000000000017CEA                 db    0
.eh_frame:0000000000017CEB                 db    0
.eh_frame:0000000000017CEC                 db 0ECh
.eh_frame:0000000000017CED                 db  18h
.eh_frame:0000000000017CEE                 db    0
.eh_frame:0000000000017CEF                 db    0
.eh_frame:0000000000017CF0                 db  20h
.eh_frame:0000000000017CF1                 db  70h ; p
.eh_frame:0000000000017CF2                 db 0FFh
.eh_frame:0000000000017CF3                 db 0FFh
.eh_frame:0000000000017CF4                 db  13h
.eh_frame:0000000000017CF5                 db    0
.eh_frame:0000000000017CF6                 db    0
.eh_frame:0000000000017CF7                 db    0
.eh_frame:0000000000017CF8                 db    0
.eh_frame:0000000000017CF9                 db    0
.eh_frame:0000000000017CFA                 db    0
.eh_frame:0000000000017CFB                 db    0
.eh_frame:0000000000017CFC                 db  10h
.eh_frame:0000000000017CFD                 db    0
.eh_frame:0000000000017CFE                 db    0
.eh_frame:0000000000017CFF                 db    0
.eh_frame:0000000000017D00                 db    0
.eh_frame:0000000000017D01                 db  19h
.eh_frame:0000000000017D02                 db    0
.eh_frame:0000000000017D03                 db    0
.eh_frame:0000000000017D04                 db  2Ch ; ,
.eh_frame:0000000000017D05                 db  70h ; p
.eh_frame:0000000000017D06                 db 0FFh
.eh_frame:0000000000017D07                 db 0FFh
.eh_frame:0000000000017D08                 db  0Ch
.eh_frame:0000000000017D09                 db    0
.eh_frame:0000000000017D0A                 db    0
.eh_frame:0000000000017D0B                 db    0
.eh_frame:0000000000017D0C                 db    0
.eh_frame:0000000000017D0D                 db    0
.eh_frame:0000000000017D0E                 db    0
.eh_frame:0000000000017D0F                 db    0
.eh_frame:0000000000017D10                 db  10h
.eh_frame:0000000000017D11                 db    0
.eh_frame:0000000000017D12                 db    0
.eh_frame:0000000000017D13                 db    0
.eh_frame:0000000000017D14                 db  14h
.eh_frame:0000000000017D15                 db  19h
.eh_frame:0000000000017D16                 db    0
.eh_frame:0000000000017D17                 db    0
.eh_frame:0000000000017D18                 db  28h ; (
.eh_frame:0000000000017D19                 db  70h ; p
.eh_frame:0000000000017D1A                 db 0FFh
.eh_frame:0000000000017D1B                 db 0FFh
.eh_frame:0000000000017D1C                 db  14h
.eh_frame:0000000000017D1D                 db    0
.eh_frame:0000000000017D1E                 db    0
.eh_frame:0000000000017D1F                 db    0
.eh_frame:0000000000017D20                 db    0
.eh_frame:0000000000017D21                 db    0
.eh_frame:0000000000017D22                 db    0
.eh_frame:0000000000017D23                 db    0
.eh_frame:0000000000017D24                 db  10h
.eh_frame:0000000000017D25                 db    0
.eh_frame:0000000000017D26                 db    0
.eh_frame:0000000000017D27                 db    0
.eh_frame:0000000000017D28                 db  28h ; (
.eh_frame:0000000000017D29                 db  19h
.eh_frame:0000000000017D2A                 db    0
.eh_frame:0000000000017D2B                 db    0
.eh_frame:0000000000017D2C                 db  34h ; 4
.eh_frame:0000000000017D2D                 db  70h ; p
.eh_frame:0000000000017D2E                 db 0FFh
.eh_frame:0000000000017D2F                 db 0FFh
.eh_frame:0000000000017D30                 db  13h
.eh_frame:0000000000017D31                 db    0
.eh_frame:0000000000017D32                 db    0
.eh_frame:0000000000017D33                 db    0
.eh_frame:0000000000017D34                 db    0
.eh_frame:0000000000017D35                 db    0
.eh_frame:0000000000017D36                 db    0
.eh_frame:0000000000017D37                 db    0
.eh_frame:0000000000017D38                 db  14h
.eh_frame:0000000000017D39                 db    0
.eh_frame:0000000000017D3A                 db    0
.eh_frame:0000000000017D3B                 db    0
.eh_frame:0000000000017D3C                 db  3Ch ; <
.eh_frame:0000000000017D3D                 db  19h
.eh_frame:0000000000017D3E                 db    0
.eh_frame:0000000000017D3F                 db    0
.eh_frame:0000000000017D40                 db  40h ; @
.eh_frame:0000000000017D41                 db  70h ; p
.eh_frame:0000000000017D42                 db 0FFh
.eh_frame:0000000000017D43                 db 0FFh
.eh_frame:0000000000017D44                 db  18h
.eh_frame:0000000000017D45                 db    0
.eh_frame:0000000000017D46                 db    0
.eh_frame:0000000000017D47                 db    0
.eh_frame:0000000000017D48                 db    0
.eh_frame:0000000000017D49                 db    0
.eh_frame:0000000000017D4A                 db    0
.eh_frame:0000000000017D4B                 db    0
.eh_frame:0000000000017D4C                 db    0
.eh_frame:0000000000017D4D                 db    0
.eh_frame:0000000000017D4E                 db    0
.eh_frame:0000000000017D4F                 db    0
.eh_frame:0000000000017D50                 db  4Ch ; L
.eh_frame:0000000000017D51                 db    0
.eh_frame:0000000000017D52                 db    0
.eh_frame:0000000000017D53                 db    0
.eh_frame:0000000000017D54                 db  54h ; T
.eh_frame:0000000000017D55                 db  19h
.eh_frame:0000000000017D56                 db    0
.eh_frame:0000000000017D57                 db    0
.eh_frame:0000000000017D58                 db  48h ; H
.eh_frame:0000000000017D59                 db  70h ; p
.eh_frame:0000000000017D5A                 db 0FFh
.eh_frame:0000000000017D5B                 db 0FFh
.eh_frame:0000000000017D5C                 db  6Ah ; j
.eh_frame:0000000000017D5D                 db    2
.eh_frame:0000000000017D5E                 db    0
.eh_frame:0000000000017D5F                 db    0
.eh_frame:0000000000017D60                 db    0
.eh_frame:0000000000017D61                 db  42h ; B
.eh_frame:0000000000017D62                 db  0Eh
.eh_frame:0000000000017D63                 db  10h
.eh_frame:0000000000017D64                 db  8Fh
.eh_frame:0000000000017D65                 db    2
.eh_frame:0000000000017D66                 db  42h ; B
.eh_frame:0000000000017D67                 db  0Eh
.eh_frame:0000000000017D68                 db  18h
.eh_frame:0000000000017D69                 db  8Eh
.eh_frame:0000000000017D6A                 db    3
.eh_frame:0000000000017D6B                 db  45h ; E
.eh_frame:0000000000017D6C                 db  0Eh
.eh_frame:0000000000017D6D                 db  20h
.eh_frame:0000000000017D6E                 db  8Dh
.eh_frame:0000000000017D6F                 db    4
.eh_frame:0000000000017D70                 db  42h ; B
.eh_frame:0000000000017D71                 db  0Eh
.eh_frame:0000000000017D72                 db  28h ; (
.eh_frame:0000000000017D73                 db  8Ch
.eh_frame:0000000000017D74                 db    5
.eh_frame:0000000000017D75                 db  44h ; D
.eh_frame:0000000000017D76                 db  0Eh
.eh_frame:0000000000017D77                 db  30h ; 0
.eh_frame:0000000000017D78                 db  86h
.eh_frame:0000000000017D79                 db    6
.eh_frame:0000000000017D7A                 db  41h ; A
.eh_frame:0000000000017D7B                 db  0Eh
.eh_frame:0000000000017D7C                 db  38h ; 8
.eh_frame:0000000000017D7D                 db  83h
.eh_frame:0000000000017D7E                 db    7
.eh_frame:0000000000017D7F                 db  53h ; S
.eh_frame:0000000000017D80                 db  0Eh
.eh_frame:0000000000017D81                 db  80h
.eh_frame:0000000000017D82                 db    3
.eh_frame:0000000000017D83                 db    2
.eh_frame:0000000000017D84                 db  58h ; X
.eh_frame:0000000000017D85                 db  0Ah
.eh_frame:0000000000017D86                 db  0Eh
.eh_frame:0000000000017D87                 db  38h ; 8
.eh_frame:0000000000017D88                 db  41h ; A
.eh_frame:0000000000017D89                 db  0Eh
.eh_frame:0000000000017D8A                 db  30h ; 0
.eh_frame:0000000000017D8B                 db  41h ; A
.eh_frame:0000000000017D8C                 db  0Eh
.eh_frame:0000000000017D8D                 db  28h ; (
.eh_frame:0000000000017D8E                 db  42h ; B
.eh_frame:0000000000017D8F                 db  0Eh
.eh_frame:0000000000017D90                 db  20h
.eh_frame:0000000000017D91                 db  42h ; B
.eh_frame:0000000000017D92                 db  0Eh
.eh_frame:0000000000017D93                 db  18h
.eh_frame:0000000000017D94                 db  42h ; B
.eh_frame:0000000000017D95                 db  0Eh
.eh_frame:0000000000017D96                 db  10h
.eh_frame:0000000000017D97                 db  42h ; B
.eh_frame:0000000000017D98                 db  0Eh
.eh_frame:0000000000017D99                 db    8
.eh_frame:0000000000017D9A                 db  4Bh ; K
.eh_frame:0000000000017D9B                 db  0Bh
.eh_frame:0000000000017D9C                 db    0
.eh_frame:0000000000017D9D                 db    0
.eh_frame:0000000000017D9E                 db    0
.eh_frame:0000000000017D9F                 db    0
.eh_frame:0000000000017DA0                 db  34h ; 4
.eh_frame:0000000000017DA1                 db    0
.eh_frame:0000000000017DA2                 db    0
.eh_frame:0000000000017DA3                 db    0
.eh_frame:0000000000017DA4                 db 0A4h
.eh_frame:0000000000017DA5                 db  19h
.eh_frame:0000000000017DA6                 db    0
.eh_frame:0000000000017DA7                 db    0
.eh_frame:0000000000017DA8                 db  68h ; h
.eh_frame:0000000000017DA9                 db  72h ; r
.eh_frame:0000000000017DAA                 db 0FFh
.eh_frame:0000000000017DAB                 db 0FFh
.eh_frame:0000000000017DAC                 db  5Eh ; ^
.eh_frame:0000000000017DAD                 db    0
.eh_frame:0000000000017DAE                 db    0
.eh_frame:0000000000017DAF                 db    0
.eh_frame:0000000000017DB0                 db    0
.eh_frame:0000000000017DB1                 db  42h ; B
.eh_frame:0000000000017DB2                 db  0Eh
.eh_frame:0000000000017DB3                 db  10h
.eh_frame:0000000000017DB4                 db  8Dh
.eh_frame:0000000000017DB5                 db    2
.eh_frame:0000000000017DB6                 db  42h ; B
.eh_frame:0000000000017DB7                 db  0Eh
.eh_frame:0000000000017DB8                 db  18h
.eh_frame:0000000000017DB9                 db  8Ch
.eh_frame:0000000000017DBA                 db    3
.eh_frame:0000000000017DBB                 db  44h ; D
.eh_frame:0000000000017DBC                 db  0Eh
.eh_frame:0000000000017DBD                 db  20h
.eh_frame:0000000000017DBE                 db  86h
.eh_frame:0000000000017DBF                 db    4
.eh_frame:0000000000017DC0                 db  41h ; A
.eh_frame:0000000000017DC1                 db  0Eh
.eh_frame:0000000000017DC2                 db  28h ; (
.eh_frame:0000000000017DC3                 db  83h
.eh_frame:0000000000017DC4                 db    5
.eh_frame:0000000000017DC5                 db  4Ah ; J
.eh_frame:0000000000017DC6                 db  0Eh
.eh_frame:0000000000017DC7                 db  30h ; 0
.eh_frame:0000000000017DC8                 db    2
.eh_frame:0000000000017DC9                 db  41h ; A
.eh_frame:0000000000017DCA                 db  0Eh
.eh_frame:0000000000017DCB                 db  28h ; (
.eh_frame:0000000000017DCC                 db  44h ; D
.eh_frame:0000000000017DCD                 db  0Eh
.eh_frame:0000000000017DCE                 db  20h
.eh_frame:0000000000017DCF                 db  41h ; A
.eh_frame:0000000000017DD0                 db  0Eh
.eh_frame:0000000000017DD1                 db  18h
.eh_frame:0000000000017DD2                 db  42h ; B
.eh_frame:0000000000017DD3                 db  0Eh
.eh_frame:0000000000017DD4                 db  10h
.eh_frame:0000000000017DD5                 db  42h ; B
.eh_frame:0000000000017DD6                 db  0Eh
.eh_frame:0000000000017DD7                 db    8
.eh_frame:0000000000017DD8                 db  38h ; 8
.eh_frame:0000000000017DD9                 db    0
.eh_frame:0000000000017DDA                 db    0
.eh_frame:0000000000017DDB                 db    0
.eh_frame:0000000000017DDC                 db 0DCh
.eh_frame:0000000000017DDD                 db  19h
.eh_frame:0000000000017DDE                 db    0
.eh_frame:0000000000017DDF                 db    0
.eh_frame:0000000000017DE0                 db  90h
.eh_frame:0000000000017DE1                 db  72h ; r
.eh_frame:0000000000017DE2                 db 0FFh
.eh_frame:0000000000017DE3                 db 0FFh
.eh_frame:0000000000017DE4                 db  27h ; '
.eh_frame:0000000000017DE5                 db    1
.eh_frame:0000000000017DE6                 db    0
.eh_frame:0000000000017DE7                 db    0
.eh_frame:0000000000017DE8                 db    0
.eh_frame:0000000000017DE9                 db  42h ; B
.eh_frame:0000000000017DEA                 db  0Eh
.eh_frame:0000000000017DEB                 db  10h
.eh_frame:0000000000017DEC                 db  8Dh
.eh_frame:0000000000017DED                 db    2
.eh_frame:0000000000017DEE                 db  42h ; B
.eh_frame:0000000000017DEF                 db  0Eh
.eh_frame:0000000000017DF0                 db  18h
.eh_frame:0000000000017DF1                 db  8Ch
.eh_frame:0000000000017DF2                 db    3
.eh_frame:0000000000017DF3                 db  44h ; D
.eh_frame:0000000000017DF4                 db  0Eh
.eh_frame:0000000000017DF5                 db  20h
.eh_frame:0000000000017DF6                 db  86h
.eh_frame:0000000000017DF7                 db    4
.eh_frame:0000000000017DF8                 db  41h ; A
.eh_frame:0000000000017DF9                 db  0Eh
.eh_frame:0000000000017DFA                 db  28h ; (
.eh_frame:0000000000017DFB                 db  83h
.eh_frame:0000000000017DFC                 db    5
.eh_frame:0000000000017DFD                 db  4Fh ; O
.eh_frame:0000000000017DFE                 db  0Eh
.eh_frame:0000000000017DFF                 db 0E0h
.eh_frame:0000000000017E00                 db    2
.eh_frame:0000000000017E01                 db    2
.eh_frame:0000000000017E02                 db 0B5h
.eh_frame:0000000000017E03                 db  0Ah
.eh_frame:0000000000017E04                 db  0Eh
.eh_frame:0000000000017E05                 db  28h ; (
.eh_frame:0000000000017E06                 db  41h ; A
.eh_frame:0000000000017E07                 db  0Eh
.eh_frame:0000000000017E08                 db  20h
.eh_frame:0000000000017E09                 db  41h ; A
.eh_frame:0000000000017E0A                 db  0Eh
.eh_frame:0000000000017E0B                 db  18h
.eh_frame:0000000000017E0C                 db  42h ; B
.eh_frame:0000000000017E0D                 db  0Eh
.eh_frame:0000000000017E0E                 db  10h
.eh_frame:0000000000017E0F                 db  42h ; B
.eh_frame:0000000000017E10                 db  0Eh
.eh_frame:0000000000017E11                 db    8
.eh_frame:0000000000017E12                 db  45h ; E
.eh_frame:0000000000017E13                 db  0Bh
.eh_frame:0000000000017E14                 db  5Ch ; \
.eh_frame:0000000000017E15                 db    0
.eh_frame:0000000000017E16                 db    0
.eh_frame:0000000000017E17                 db    0
.eh_frame:0000000000017E18                 db  18h
.eh_frame:0000000000017E19                 db  1Ah
.eh_frame:0000000000017E1A                 db    0
.eh_frame:0000000000017E1B                 db    0
.eh_frame:0000000000017E1C                 db  84h
.eh_frame:0000000000017E1D                 db  73h ; s
.eh_frame:0000000000017E1E                 db 0FFh
.eh_frame:0000000000017E1F                 db 0FFh
.eh_frame:0000000000017E20                 db  92h
.eh_frame:0000000000017E21                 db    0
.eh_frame:0000000000017E22                 db    0
.eh_frame:0000000000017E23                 db    0
.eh_frame:0000000000017E24                 db    0
.eh_frame:0000000000017E25                 db  42h ; B
.eh_frame:0000000000017E26                 db  0Eh
.eh_frame:0000000000017E27                 db  10h
.eh_frame:0000000000017E28                 db  8Fh
.eh_frame:0000000000017E29                 db    2
.eh_frame:0000000000017E2A                 db  42h ; B
.eh_frame:0000000000017E2B                 db  0Eh
.eh_frame:0000000000017E2C                 db  18h
.eh_frame:0000000000017E2D                 db  8Eh
.eh_frame:0000000000017E2E                 db    3
.eh_frame:0000000000017E2F                 db  45h ; E
.eh_frame:0000000000017E30                 db  0Eh
.eh_frame:0000000000017E31                 db  20h
.eh_frame:0000000000017E32                 db  8Dh
.eh_frame:0000000000017E33                 db    4
.eh_frame:0000000000017E34                 db  42h ; B
.eh_frame:0000000000017E35                 db  0Eh
.eh_frame:0000000000017E36                 db  28h ; (
.eh_frame:0000000000017E37                 db  8Ch
.eh_frame:0000000000017E38                 db    5
.eh_frame:0000000000017E39                 db  41h ; A
.eh_frame:0000000000017E3A                 db  0Eh
.eh_frame:0000000000017E3B                 db  30h ; 0
.eh_frame:0000000000017E3C                 db  86h
.eh_frame:0000000000017E3D                 db    6
.eh_frame:0000000000017E3E                 db  41h ; A
.eh_frame:0000000000017E3F                 db  0Eh
.eh_frame:0000000000017E40                 db  38h ; 8
.eh_frame:0000000000017E41                 db  83h
.eh_frame:0000000000017E42                 db    7
.eh_frame:0000000000017E43                 db  4Ah ; J
.eh_frame:0000000000017E44                 db  0Eh
.eh_frame:0000000000017E45                 db  50h ; P
.eh_frame:0000000000017E46                 db  76h ; v
.eh_frame:0000000000017E47                 db  0Ah
.eh_frame:0000000000017E48                 db  0Eh
.eh_frame:0000000000017E49                 db  38h ; 8
.eh_frame:0000000000017E4A                 db  43h ; C
.eh_frame:0000000000017E4B                 db  0Eh
.eh_frame:0000000000017E4C                 db  30h ; 0
.eh_frame:0000000000017E4D                 db  41h ; A
.eh_frame:0000000000017E4E                 db  0Eh
.eh_frame:0000000000017E4F                 db  28h ; (
.eh_frame:0000000000017E50                 db  42h ; B
.eh_frame:0000000000017E51                 db  0Eh
.eh_frame:0000000000017E52                 db  20h
.eh_frame:0000000000017E53                 db  42h ; B
.eh_frame:0000000000017E54                 db  0Eh
.eh_frame:0000000000017E55                 db  18h
.eh_frame:0000000000017E56                 db  42h ; B
.eh_frame:0000000000017E57                 db  0Eh
.eh_frame:0000000000017E58                 db  10h
.eh_frame:0000000000017E59                 db  42h ; B
.eh_frame:0000000000017E5A                 db  0Eh
.eh_frame:0000000000017E5B                 db    8
.eh_frame:0000000000017E5C                 db  47h ; G
.eh_frame:0000000000017E5D                 db  0Bh
.eh_frame:0000000000017E5E                 db  5Ah ; Z
.eh_frame:0000000000017E5F                 db  0Eh
.eh_frame:0000000000017E60                 db  38h ; 8
.eh_frame:0000000000017E61                 db  4Ah ; J
.eh_frame:0000000000017E62                 db  0Eh
.eh_frame:0000000000017E63                 db  30h ; 0
.eh_frame:0000000000017E64                 db  41h ; A
.eh_frame:0000000000017E65                 db  0Eh
.eh_frame:0000000000017E66                 db  28h ; (
.eh_frame:0000000000017E67                 db  42h ; B
.eh_frame:0000000000017E68                 db  0Eh
.eh_frame:0000000000017E69                 db  20h
.eh_frame:0000000000017E6A                 db  42h ; B
.eh_frame:0000000000017E6B                 db  0Eh
.eh_frame:0000000000017E6C                 db  18h
.eh_frame:0000000000017E6D                 db  42h ; B
.eh_frame:0000000000017E6E                 db  0Eh
.eh_frame:0000000000017E6F                 db  10h
.eh_frame:0000000000017E70                 db  42h ; B
.eh_frame:0000000000017E71                 db  0Eh
.eh_frame:0000000000017E72                 db    8
.eh_frame:0000000000017E73                 db    0
.eh_frame:0000000000017E74                 db  10h
.eh_frame:0000000000017E75                 db    0
.eh_frame:0000000000017E76                 db    0
.eh_frame:0000000000017E77                 db    0
.eh_frame:0000000000017E78                 db  78h ; x
.eh_frame:0000000000017E79                 db  1Ah
.eh_frame:0000000000017E7A                 db    0
.eh_frame:0000000000017E7B                 db    0
.eh_frame:0000000000017E7C                 db 0C4h
.eh_frame:0000000000017E7D                 db  73h ; s
.eh_frame:0000000000017E7E                 db 0FFh
.eh_frame:0000000000017E7F                 db 0FFh
.eh_frame:0000000000017E80                 db  12h
.eh_frame:0000000000017E81                 db    0
.eh_frame:0000000000017E82                 db    0
.eh_frame:0000000000017E83                 db    0
.eh_frame:0000000000017E84                 db    0
.eh_frame:0000000000017E85                 db    0
.eh_frame:0000000000017E86                 db    0
.eh_frame:0000000000017E87                 db    0
.eh_frame:0000000000017E88                 db  10h
.eh_frame:0000000000017E89                 db    0
.eh_frame:0000000000017E8A                 db    0
.eh_frame:0000000000017E8B                 db    0
.eh_frame:0000000000017E8C                 db  8Ch
.eh_frame:0000000000017E8D                 db  1Ah
.eh_frame:0000000000017E8E                 db    0
.eh_frame:0000000000017E8F                 db    0
.eh_frame:0000000000017E90                 db 0D0h
.eh_frame:0000000000017E91                 db  73h ; s
.eh_frame:0000000000017E92                 db 0FFh
.eh_frame:0000000000017E93                 db 0FFh
.eh_frame:0000000000017E94                 db  1Eh
.eh_frame:0000000000017E95                 db    0
.eh_frame:0000000000017E96                 db    0
.eh_frame:0000000000017E97                 db    0
.eh_frame:0000000000017E98                 db    0
.eh_frame:0000000000017E99                 db    0
.eh_frame:0000000000017E9A                 db    0
.eh_frame:0000000000017E9B                 db    0
.eh_frame:0000000000017E9C                 db  10h
.eh_frame:0000000000017E9D                 db    0
.eh_frame:0000000000017E9E                 db    0
.eh_frame:0000000000017E9F                 db    0
.eh_frame:0000000000017EA0                 db 0A0h
.eh_frame:0000000000017EA1                 db  1Ah
.eh_frame:0000000000017EA2                 db    0
.eh_frame:0000000000017EA3                 db    0
.eh_frame:0000000000017EA4                 db 0DCh
.eh_frame:0000000000017EA5                 db  73h ; s
.eh_frame:0000000000017EA6                 db 0FFh
.eh_frame:0000000000017EA7                 db 0FFh
.eh_frame:0000000000017EA8                 db  0Bh
.eh_frame:0000000000017EA9                 db    0
.eh_frame:0000000000017EAA                 db    0
.eh_frame:0000000000017EAB                 db    0
.eh_frame:0000000000017EAC                 db    0
.eh_frame:0000000000017EAD                 db    0
.eh_frame:0000000000017EAE                 db    0
.eh_frame:0000000000017EAF                 db    0
.eh_frame:0000000000017EB0                 db  4Ch ; L
.eh_frame:0000000000017EB1                 db    0
.eh_frame:0000000000017EB2                 db    0
.eh_frame:0000000000017EB3                 db    0
.eh_frame:0000000000017EB4                 db 0B4h
.eh_frame:0000000000017EB5                 db  1Ah
.eh_frame:0000000000017EB6                 db    0
.eh_frame:0000000000017EB7                 db    0
.eh_frame:0000000000017EB8                 db 0D8h
.eh_frame:0000000000017EB9                 db  73h ; s
.eh_frame:0000000000017EBA                 db 0FFh
.eh_frame:0000000000017EBB                 db 0FFh
.eh_frame:0000000000017EBC                 db  78h ; x
.eh_frame:0000000000017EBD                 db    3
.eh_frame:0000000000017EBE                 db    0
.eh_frame:0000000000017EBF                 db    0
.eh_frame:0000000000017EC0                 db    0
.eh_frame:0000000000017EC1                 db  42h ; B
.eh_frame:0000000000017EC2                 db  0Eh
.eh_frame:0000000000017EC3                 db  10h
.eh_frame:0000000000017EC4                 db  8Fh
.eh_frame:0000000000017EC5                 db    2
.eh_frame:0000000000017EC6                 db  49h ; I
.eh_frame:0000000000017EC7                 db  0Eh
.eh_frame:0000000000017EC8                 db  18h
.eh_frame:0000000000017EC9                 db  8Eh
.eh_frame:0000000000017ECA                 db    3
.eh_frame:0000000000017ECB                 db  42h ; B
.eh_frame:0000000000017ECC                 db  0Eh
.eh_frame:0000000000017ECD                 db  20h
.eh_frame:0000000000017ECE                 db  8Dh
.eh_frame:0000000000017ECF                 db    4
.eh_frame:0000000000017ED0                 db  42h ; B
.eh_frame:0000000000017ED1                 db  0Eh
.eh_frame:0000000000017ED2                 db  28h ; (
.eh_frame:0000000000017ED3                 db  8Ch
.eh_frame:0000000000017ED4                 db    5
.eh_frame:0000000000017ED5                 db  43h ; C
.eh_frame:0000000000017ED6                 db  0Eh
.eh_frame:0000000000017ED7                 db  30h ; 0
.eh_frame:0000000000017ED8                 db  86h
.eh_frame:0000000000017ED9                 db    6
.eh_frame:0000000000017EDA                 db  41h ; A
.eh_frame:0000000000017EDB                 db  0Eh
.eh_frame:0000000000017EDC                 db  38h ; 8
.eh_frame:0000000000017EDD                 db  83h
.eh_frame:0000000000017EDE                 db    7
.eh_frame:0000000000017EDF                 db  44h ; D
.eh_frame:0000000000017EE0                 db  0Eh
.eh_frame:0000000000017EE1                 db  80h
.eh_frame:0000000000017EE2                 db    1
.eh_frame:0000000000017EE3                 db    3
.eh_frame:0000000000017EE4                 db  48h ; H
.eh_frame:0000000000017EE5                 db    1
.eh_frame:0000000000017EE6                 db  0Ah
.eh_frame:0000000000017EE7                 db  0Eh
.eh_frame:0000000000017EE8                 db  38h ; 8
.eh_frame:0000000000017EE9                 db  44h ; D
.eh_frame:0000000000017EEA                 db  0Eh
.eh_frame:0000000000017EEB                 db  30h ; 0
.eh_frame:0000000000017EEC                 db  41h ; A
.eh_frame:0000000000017EED                 db  0Eh
.eh_frame:0000000000017EEE                 db  28h ; (
.eh_frame:0000000000017EEF                 db  42h ; B
.eh_frame:0000000000017EF0                 db  0Eh
.eh_frame:0000000000017EF1                 db  20h
.eh_frame:0000000000017EF2                 db  42h ; B
.eh_frame:0000000000017EF3                 db  0Eh
.eh_frame:0000000000017EF4                 db  18h
.eh_frame:0000000000017EF5                 db  42h ; B
.eh_frame:0000000000017EF6                 db  0Eh
.eh_frame:0000000000017EF7                 db  10h
.eh_frame:0000000000017EF8                 db  42h ; B
.eh_frame:0000000000017EF9                 db  0Eh
.eh_frame:0000000000017EFA                 db    8
.eh_frame:0000000000017EFB                 db  44h ; D
.eh_frame:0000000000017EFC                 db  0Bh
.eh_frame:0000000000017EFD                 db    0
.eh_frame:0000000000017EFE                 db    0
.eh_frame:0000000000017EFF                 db    0
.eh_frame:0000000000017F00                 db  2Ch ; ,
.eh_frame:0000000000017F01                 db    0
.eh_frame:0000000000017F02                 db    0
.eh_frame:0000000000017F03                 db    0
.eh_frame:0000000000017F04                 db    4
.eh_frame:0000000000017F05                 db  1Bh
.eh_frame:0000000000017F06                 db    0
.eh_frame:0000000000017F07                 db    0
.eh_frame:0000000000017F08                 db    8
.eh_frame:0000000000017F09                 db  77h ; w
.eh_frame:0000000000017F0A                 db 0FFh
.eh_frame:0000000000017F0B                 db 0FFh
.eh_frame:0000000000017F0C                 db  5Ah ; Z
.eh_frame:0000000000017F0D                 db    0
.eh_frame:0000000000017F0E                 db    0
.eh_frame:0000000000017F0F                 db    0
.eh_frame:0000000000017F10                 db    0
.eh_frame:0000000000017F11                 db  42h ; B
.eh_frame:0000000000017F12                 db  0Eh
.eh_frame:0000000000017F13                 db  10h
.eh_frame:0000000000017F14                 db  8Ch
.eh_frame:0000000000017F15                 db    2
.eh_frame:0000000000017F16                 db  41h ; A
.eh_frame:0000000000017F17                 db  0Eh
.eh_frame:0000000000017F18                 db  18h
.eh_frame:0000000000017F19                 db  86h
.eh_frame:0000000000017F1A                 db    3
.eh_frame:0000000000017F1B                 db  43h ; C
.eh_frame:0000000000017F1C                 db  0Eh
.eh_frame:0000000000017F1D                 db  20h
.eh_frame:0000000000017F1E                 db  83h
.eh_frame:0000000000017F1F                 db    4
.eh_frame:0000000000017F20                 db  6Ah ; j
.eh_frame:0000000000017F21                 db  0Ah
.eh_frame:0000000000017F22                 db  0Eh
.eh_frame:0000000000017F23                 db  18h
.eh_frame:0000000000017F24                 db  41h ; A
.eh_frame:0000000000017F25                 db  0Eh
.eh_frame:0000000000017F26                 db  10h
.eh_frame:0000000000017F27                 db  42h ; B
.eh_frame:0000000000017F28                 db  0Eh
.eh_frame:0000000000017F29                 db    8
.eh_frame:0000000000017F2A                 db  45h ; E
.eh_frame:0000000000017F2B                 db  0Bh
.eh_frame:0000000000017F2C                 db    0
.eh_frame:0000000000017F2D                 db    0
.eh_frame:0000000000017F2E                 db    0
.eh_frame:0000000000017F2F                 db    0
.eh_frame:0000000000017F30                 db  20h
.eh_frame:0000000000017F31                 db    0
.eh_frame:0000000000017F32                 db    0
.eh_frame:0000000000017F33                 db    0
.eh_frame:0000000000017F34                 db  34h ; 4
.eh_frame:0000000000017F35                 db  1Bh
.eh_frame:0000000000017F36                 db    0
.eh_frame:0000000000017F37                 db    0
.eh_frame:0000000000017F38                 db  38h ; 8
.eh_frame:0000000000017F39                 db  77h ; w
.eh_frame:0000000000017F3A                 db 0FFh
.eh_frame:0000000000017F3B                 db 0FFh
.eh_frame:0000000000017F3C                 db  7Ch ; |
.eh_frame:0000000000017F3D                 db    0
.eh_frame:0000000000017F3E                 db    0
.eh_frame:0000000000017F3F                 db    0
.eh_frame:0000000000017F40                 db    0
.eh_frame:0000000000017F41                 db  41h ; A
.eh_frame:0000000000017F42                 db  0Eh
.eh_frame:0000000000017F43                 db  10h
.eh_frame:0000000000017F44                 db  83h
.eh_frame:0000000000017F45                 db    2
.eh_frame:0000000000017F46                 db  4Fh ; O
.eh_frame:0000000000017F47                 db  0Eh
.eh_frame:0000000000017F48                 db 0B0h
.eh_frame:0000000000017F49                 db    1
.eh_frame:0000000000017F4A                 db    2
.eh_frame:0000000000017F4B                 db  65h ; e
.eh_frame:0000000000017F4C                 db  0Ah
.eh_frame:0000000000017F4D                 db  0Eh
.eh_frame:0000000000017F4E                 db  10h
.eh_frame:0000000000017F4F                 db  41h ; A
.eh_frame:0000000000017F50                 db  0Eh
.eh_frame:0000000000017F51                 db    8
.eh_frame:0000000000017F52                 db  41h ; A
.eh_frame:0000000000017F53                 db  0Bh
.eh_frame:0000000000017F54                 db  10h
.eh_frame:0000000000017F55                 db    0
.eh_frame:0000000000017F56                 db    0
.eh_frame:0000000000017F57                 db    0
.eh_frame:0000000000017F58                 db  58h ; X
.eh_frame:0000000000017F59                 db  1Bh
.eh_frame:0000000000017F5A                 db    0
.eh_frame:0000000000017F5B                 db    0
.eh_frame:0000000000017F5C                 db  94h
.eh_frame:0000000000017F5D                 db  77h ; w
.eh_frame:0000000000017F5E                 db 0FFh
.eh_frame:0000000000017F5F                 db 0FFh
.eh_frame:0000000000017F60                 db  0Ah
.eh_frame:0000000000017F61                 db    0
.eh_frame:0000000000017F62                 db    0
.eh_frame:0000000000017F63                 db    0
.eh_frame:0000000000017F64                 db    0
.eh_frame:0000000000017F65                 db    0
.eh_frame:0000000000017F66                 db    0
.eh_frame:0000000000017F67                 db    0
.eh_frame:0000000000017F68                 db  10h
.eh_frame:0000000000017F69                 db    0
.eh_frame:0000000000017F6A                 db    0
.eh_frame:0000000000017F6B                 db    0
.eh_frame:0000000000017F6C                 db  6Ch ; l
.eh_frame:0000000000017F6D                 db  1Bh
.eh_frame:0000000000017F6E                 db    0
.eh_frame:0000000000017F6F                 db    0
.eh_frame:0000000000017F70                 db  90h
.eh_frame:0000000000017F71                 db  77h ; w
.eh_frame:0000000000017F72                 db 0FFh
.eh_frame:0000000000017F73                 db 0FFh
.eh_frame:0000000000017F74                 db  16h
.eh_frame:0000000000017F75                 db    0
.eh_frame:0000000000017F76                 db    0
.eh_frame:0000000000017F77                 db    0
.eh_frame:0000000000017F78                 db    0
.eh_frame:0000000000017F79                 db    0
.eh_frame:0000000000017F7A                 db    0
.eh_frame:0000000000017F7B                 db    0
.eh_frame:0000000000017F7C                 db  48h ; H
.eh_frame:0000000000017F7D                 db    0
.eh_frame:0000000000017F7E                 db    0
.eh_frame:0000000000017F7F                 db    0
.eh_frame:0000000000017F80                 db  80h
.eh_frame:0000000000017F81                 db  1Bh
.eh_frame:0000000000017F82                 db    0
.eh_frame:0000000000017F83                 db    0
.eh_frame:0000000000017F84                 db  9Ch
.eh_frame:0000000000017F85                 db  77h ; w
.eh_frame:0000000000017F86                 db 0FFh
.eh_frame:0000000000017F87                 db 0FFh
.eh_frame:0000000000017F88                 db  74h ; t
.eh_frame:0000000000017F89                 db    1
.eh_frame:0000000000017F8A                 db    0
.eh_frame:0000000000017F8B                 db    0
.eh_frame:0000000000017F8C                 db    0
.eh_frame:0000000000017F8D                 db  42h ; B
.eh_frame:0000000000017F8E                 db  0Eh
.eh_frame:0000000000017F8F                 db  10h
.eh_frame:0000000000017F90                 db  8Fh
.eh_frame:0000000000017F91                 db    2
.eh_frame:0000000000017F92                 db  42h ; B
.eh_frame:0000000000017F93                 db  0Eh
.eh_frame:0000000000017F94                 db  18h
.eh_frame:0000000000017F95                 db  8Eh
.eh_frame:0000000000017F96                 db    3
.eh_frame:0000000000017F97                 db  45h ; E
.eh_frame:0000000000017F98                 db  0Eh
.eh_frame:0000000000017F99                 db  20h
.eh_frame:0000000000017F9A                 db  8Dh
.eh_frame:0000000000017F9B                 db    4
.eh_frame:0000000000017F9C                 db  42h ; B
.eh_frame:0000000000017F9D                 db  0Eh
.eh_frame:0000000000017F9E                 db  28h ; (
.eh_frame:0000000000017F9F                 db  8Ch
.eh_frame:0000000000017FA0                 db    5
.eh_frame:0000000000017FA1                 db  44h ; D
.eh_frame:0000000000017FA2                 db  0Eh
.eh_frame:0000000000017FA3                 db  30h ; 0
.eh_frame:0000000000017FA4                 db  86h
.eh_frame:0000000000017FA5                 db    6
.eh_frame:0000000000017FA6                 db  41h ; A
.eh_frame:0000000000017FA7                 db  0Eh
.eh_frame:0000000000017FA8                 db  38h ; 8
.eh_frame:0000000000017FA9                 db  83h
.eh_frame:0000000000017FAA                 db    7
.eh_frame:0000000000017FAB                 db  46h ; F
.eh_frame:0000000000017FAC                 db  0Eh
.eh_frame:0000000000017FAD                 db  70h ; p
.eh_frame:0000000000017FAE                 db    3
.eh_frame:0000000000017FAF                 db  31h ; 1
.eh_frame:0000000000017FB0                 db    1
.eh_frame:0000000000017FB1                 db  0Ah
.eh_frame:0000000000017FB2                 db  0Eh
.eh_frame:0000000000017FB3                 db  38h ; 8
.eh_frame:0000000000017FB4                 db  43h ; C
.eh_frame:0000000000017FB5                 db  0Eh
.eh_frame:0000000000017FB6                 db  30h ; 0
.eh_frame:0000000000017FB7                 db  41h ; A
.eh_frame:0000000000017FB8                 db  0Eh
.eh_frame:0000000000017FB9                 db  28h ; (
.eh_frame:0000000000017FBA                 db  42h ; B
.eh_frame:0000000000017FBB                 db  0Eh
.eh_frame:0000000000017FBC                 db  20h
.eh_frame:0000000000017FBD                 db  42h ; B
.eh_frame:0000000000017FBE                 db  0Eh
.eh_frame:0000000000017FBF                 db  18h
.eh_frame:0000000000017FC0                 db  42h ; B
.eh_frame:0000000000017FC1                 db  0Eh
.eh_frame:0000000000017FC2                 db  10h
.eh_frame:0000000000017FC3                 db  42h ; B
.eh_frame:0000000000017FC4                 db  0Eh
.eh_frame:0000000000017FC5                 db    8
.eh_frame:0000000000017FC6                 db  41h ; A
.eh_frame:0000000000017FC7                 db  0Bh
.eh_frame:0000000000017FC8                 db  20h
.eh_frame:0000000000017FC9                 db    0
.eh_frame:0000000000017FCA                 db    0
.eh_frame:0000000000017FCB                 db    0
.eh_frame:0000000000017FCC                 db 0CCh
.eh_frame:0000000000017FCD                 db  1Bh
.eh_frame:0000000000017FCE                 db    0
.eh_frame:0000000000017FCF                 db    0
.eh_frame:0000000000017FD0                 db 0D0h
.eh_frame:0000000000017FD1                 db  78h ; x
.eh_frame:0000000000017FD2                 db 0FFh
.eh_frame:0000000000017FD3                 db 0FFh
.eh_frame:0000000000017FD4                 db  86h
.eh_frame:0000000000017FD5                 db    0
.eh_frame:0000000000017FD6                 db    0
.eh_frame:0000000000017FD7                 db    0
.eh_frame:0000000000017FD8                 db    0
.eh_frame:0000000000017FD9                 db  44h ; D
.eh_frame:0000000000017FDA                 db  0Eh
.eh_frame:0000000000017FDB                 db  20h
.eh_frame:0000000000017FDC                 db    2
.eh_frame:0000000000017FDD                 db  49h ; I
.eh_frame:0000000000017FDE                 db  0Ah
.eh_frame:0000000000017FDF                 db  0Eh
.eh_frame:0000000000017FE0                 db    8
.eh_frame:0000000000017FE1                 db  43h ; C
.eh_frame:0000000000017FE2                 db  0Bh
.eh_frame:0000000000017FE3                 db  55h ; U
.eh_frame:0000000000017FE4                 db  0Ah
.eh_frame:0000000000017FE5                 db  0Eh
.eh_frame:0000000000017FE6                 db    8
.eh_frame:0000000000017FE7                 db  4Bh ; K
.eh_frame:0000000000017FE8                 db  0Bh
.eh_frame:0000000000017FE9                 db  55h ; U
.eh_frame:0000000000017FEA                 db  0Eh
.eh_frame:0000000000017FEB                 db    8
.eh_frame:0000000000017FEC                 db  10h
.eh_frame:0000000000017FED                 db    0
.eh_frame:0000000000017FEE                 db    0
.eh_frame:0000000000017FEF                 db    0
.eh_frame:0000000000017FF0                 db 0F0h
.eh_frame:0000000000017FF1                 db  1Bh
.eh_frame:0000000000017FF2                 db    0
.eh_frame:0000000000017FF3                 db    0
.eh_frame:0000000000017FF4                 db  3Ch ; <
.eh_frame:0000000000017FF5                 db  79h ; y
.eh_frame:0000000000017FF6                 db 0FFh
.eh_frame:0000000000017FF7                 db 0FFh
.eh_frame:0000000000017FF8                 db  0Bh
.eh_frame:0000000000017FF9                 db    0
.eh_frame:0000000000017FFA                 db    0
.eh_frame:0000000000017FFB                 db    0
.eh_frame:0000000000017FFC                 db    0
.eh_frame:0000000000017FFD                 db    0
.eh_frame:0000000000017FFE                 db    0
.eh_frame:0000000000017FFF                 db    0
.eh_frame:0000000000018000                 db  14h
.eh_frame:0000000000018001                 db    0
.eh_frame:0000000000018002                 db    0
.eh_frame:0000000000018003                 db    0
.eh_frame:0000000000018004                 db    4
.eh_frame:0000000000018005                 db  1Ch
.eh_frame:0000000000018006                 db    0
.eh_frame:0000000000018007                 db    0
.eh_frame:0000000000018008                 db  38h ; 8
.eh_frame:0000000000018009                 db  79h ; y
.eh_frame:000000000001800A                 db 0FFh
.eh_frame:000000000001800B                 db 0FFh
.eh_frame:000000000001800C                 db  0Bh
.eh_frame:000000000001800D                 db    0
.eh_frame:000000000001800E                 db    0
.eh_frame:000000000001800F                 db    0
.eh_frame:0000000000018010                 db    0
.eh_frame:0000000000018011                 db    0
.eh_frame:0000000000018012                 db    0
.eh_frame:0000000000018013                 db    0
.eh_frame:0000000000018014                 db    0
.eh_frame:0000000000018015                 db    0
.eh_frame:0000000000018016                 db    0
.eh_frame:0000000000018017                 db    0
.eh_frame:0000000000018018                 db  34h ; 4
.eh_frame:0000000000018019                 db    0
.eh_frame:000000000001801A                 db    0
.eh_frame:000000000001801B                 db    0
.eh_frame:000000000001801C                 db  1Ch
.eh_frame:000000000001801D                 db  1Ch
.eh_frame:000000000001801E                 db    0
.eh_frame:000000000001801F                 db    0
.eh_frame:0000000000018020                 db  30h ; 0
.eh_frame:0000000000018021                 db  79h ; y
.eh_frame:0000000000018022                 db 0FFh
.eh_frame:0000000000018023                 db 0FFh
.eh_frame:0000000000018024                 db  3Fh ; ?
.eh_frame:0000000000018025                 db    0
.eh_frame:0000000000018026                 db    0
.eh_frame:0000000000018027                 db    0
.eh_frame:0000000000018028                 db    0
.eh_frame:0000000000018029                 db  42h ; B
.eh_frame:000000000001802A                 db  0Eh
.eh_frame:000000000001802B                 db  10h
.eh_frame:000000000001802C                 db  8Dh
.eh_frame:000000000001802D                 db    2
.eh_frame:000000000001802E                 db  42h ; B
.eh_frame:000000000001802F                 db  0Eh
.eh_frame:0000000000018030                 db  18h
.eh_frame:0000000000018031                 db  8Ch
.eh_frame:0000000000018032                 db    3
.eh_frame:0000000000018033                 db  41h ; A
.eh_frame:0000000000018034                 db  0Eh
.eh_frame:0000000000018035                 db  20h
.eh_frame:0000000000018036                 db  86h
.eh_frame:0000000000018037                 db    4
.eh_frame:0000000000018038                 db  41h ; A
.eh_frame:0000000000018039                 db  0Eh
.eh_frame:000000000001803A                 db  28h ; (
.eh_frame:000000000001803B                 db  83h
.eh_frame:000000000001803C                 db    5
.eh_frame:000000000001803D                 db  46h ; F
.eh_frame:000000000001803E                 db  0Eh
.eh_frame:000000000001803F                 db  30h ; 0
.eh_frame:0000000000018040                 db  6Ah ; j
.eh_frame:0000000000018041                 db  0Eh
.eh_frame:0000000000018042                 db  28h ; (
.eh_frame:0000000000018043                 db  43h ; C
.eh_frame:0000000000018044                 db  0Eh
.eh_frame:0000000000018045                 db  20h
.eh_frame:0000000000018046                 db  41h ; A
.eh_frame:0000000000018047                 db  0Eh
.eh_frame:0000000000018048                 db  18h
.eh_frame:0000000000018049                 db  42h ; B
.eh_frame:000000000001804A                 db  0Eh
.eh_frame:000000000001804B                 db  10h
.eh_frame:000000000001804C                 db  42h ; B
.eh_frame:000000000001804D                 db  0Eh
.eh_frame:000000000001804E                 db    8
.eh_frame:000000000001804F                 db    0
.eh_frame:0000000000018050                 db  10h
.eh_frame:0000000000018051                 db    0
.eh_frame:0000000000018052                 db    0
.eh_frame:0000000000018053                 db    0
.eh_frame:0000000000018054                 db  54h ; T
.eh_frame:0000000000018055                 db  1Ch
.eh_frame:0000000000018056                 db    0
.eh_frame:0000000000018057                 db    0
.eh_frame:0000000000018058                 db  38h ; 8
.eh_frame:0000000000018059                 db  79h ; y
.eh_frame:000000000001805A                 db 0FFh
.eh_frame:000000000001805B                 db 0FFh
.eh_frame:000000000001805C                 db  0Ch
.eh_frame:000000000001805D                 db    0
.eh_frame:000000000001805E                 db    0
.eh_frame:000000000001805F                 db    0
.eh_frame:0000000000018060                 db    0
.eh_frame:0000000000018061                 db    0
.eh_frame:0000000000018062                 db    0
.eh_frame:0000000000018063                 db    0
.eh_frame:0000000000018064                 db  10h
.eh_frame:0000000000018065                 db    0
.eh_frame:0000000000018066                 db    0
.eh_frame:0000000000018067                 db    0
.eh_frame:0000000000018068                 db  68h ; h
.eh_frame:0000000000018069                 db  1Ch
.eh_frame:000000000001806A                 db    0
.eh_frame:000000000001806B                 db    0
.eh_frame:000000000001806C                 db  34h ; 4
.eh_frame:000000000001806D                 db  79h ; y
.eh_frame:000000000001806E                 db 0FFh
.eh_frame:000000000001806F                 db 0FFh
.eh_frame:0000000000018070                 db  0Ah
.eh_frame:0000000000018071                 db    0
.eh_frame:0000000000018072                 db    0
.eh_frame:0000000000018073                 db    0
.eh_frame:0000000000018074                 db    0
.eh_frame:0000000000018075                 db    0
.eh_frame:0000000000018076                 db    0
.eh_frame:0000000000018077                 db    0
.eh_frame:0000000000018078                 db  4Ch ; L
.eh_frame:0000000000018079                 db    0
.eh_frame:000000000001807A                 db    0
.eh_frame:000000000001807B                 db    0
.eh_frame:000000000001807C                 db  7Ch ; |
.eh_frame:000000000001807D                 db  1Ch
.eh_frame:000000000001807E                 db    0
.eh_frame:000000000001807F                 db    0
.eh_frame:0000000000018080                 db  30h ; 0
.eh_frame:0000000000018081                 db  79h ; y
.eh_frame:0000000000018082                 db 0FFh
.eh_frame:0000000000018083                 db 0FFh
.eh_frame:0000000000018084                 db  7Eh ; ~
.eh_frame:0000000000018085                 db    7
.eh_frame:0000000000018086                 db    0
.eh_frame:0000000000018087                 db    0
.eh_frame:0000000000018088                 db    0
.eh_frame:0000000000018089                 db  42h ; B
.eh_frame:000000000001808A                 db  0Eh
.eh_frame:000000000001808B                 db  10h
.eh_frame:000000000001808C                 db  8Fh
.eh_frame:000000000001808D                 db    2
.eh_frame:000000000001808E                 db  42h ; B
.eh_frame:000000000001808F                 db  0Eh
.eh_frame:0000000000018090                 db  18h
.eh_frame:0000000000018091                 db  8Eh
.eh_frame:0000000000018092                 db    3
.eh_frame:0000000000018093                 db  42h ; B
.eh_frame:0000000000018094                 db  0Eh
.eh_frame:0000000000018095                 db  20h
.eh_frame:0000000000018096                 db  8Dh
.eh_frame:0000000000018097                 db    4
.eh_frame:0000000000018098                 db  42h ; B
.eh_frame:0000000000018099                 db  0Eh
.eh_frame:000000000001809A                 db  28h ; (
.eh_frame:000000000001809B                 db  8Ch
.eh_frame:000000000001809C                 db    5
.eh_frame:000000000001809D                 db  41h ; A
.eh_frame:000000000001809E                 db  0Eh
.eh_frame:000000000001809F                 db  30h ; 0
.eh_frame:00000000000180A0                 db  86h
.eh_frame:00000000000180A1                 db    6
.eh_frame:00000000000180A2                 db  41h ; A
.eh_frame:00000000000180A3                 db  0Eh
.eh_frame:00000000000180A4                 db  38h ; 8
.eh_frame:00000000000180A5                 db  83h
.eh_frame:00000000000180A6                 db    7
.eh_frame:00000000000180A7                 db  4Dh ; M
.eh_frame:00000000000180A8                 db  0Eh
.eh_frame:00000000000180A9                 db 0E0h
.eh_frame:00000000000180AA                 db    2
.eh_frame:00000000000180AB                 db    3
.eh_frame:00000000000180AC                 db  48h ; H
.eh_frame:00000000000180AD                 db    1
.eh_frame:00000000000180AE                 db  0Ah
.eh_frame:00000000000180AF                 db  0Eh
.eh_frame:00000000000180B0                 db  38h ; 8
.eh_frame:00000000000180B1                 db  41h ; A
.eh_frame:00000000000180B2                 db  0Eh
.eh_frame:00000000000180B3                 db  30h ; 0
.eh_frame:00000000000180B4                 db  41h ; A
.eh_frame:00000000000180B5                 db  0Eh
.eh_frame:00000000000180B6                 db  28h ; (
.eh_frame:00000000000180B7                 db  42h ; B
.eh_frame:00000000000180B8                 db  0Eh
.eh_frame:00000000000180B9                 db  20h
.eh_frame:00000000000180BA                 db  42h ; B
.eh_frame:00000000000180BB                 db  0Eh
.eh_frame:00000000000180BC                 db  18h
.eh_frame:00000000000180BD                 db  42h ; B
.eh_frame:00000000000180BE                 db  0Eh
.eh_frame:00000000000180BF                 db  10h
.eh_frame:00000000000180C0                 db  42h ; B
.eh_frame:00000000000180C1                 db  0Eh
.eh_frame:00000000000180C2                 db    8
.eh_frame:00000000000180C3                 db  47h ; G
.eh_frame:00000000000180C4                 db  0Bh
.eh_frame:00000000000180C5                 db    0
.eh_frame:00000000000180C6                 db    0
.eh_frame:00000000000180C7                 db    0
.eh_frame:00000000000180C8                 db  14h
.eh_frame:00000000000180C9                 db    0
.eh_frame:00000000000180CA                 db    0
.eh_frame:00000000000180CB                 db    0
.eh_frame:00000000000180CC                 db 0CCh
.eh_frame:00000000000180CD                 db  1Ch
.eh_frame:00000000000180CE                 db    0
.eh_frame:00000000000180CF                 db    0
.eh_frame:00000000000180D0                 db  60h ; `
.eh_frame:00000000000180D1                 db  80h
.eh_frame:00000000000180D2                 db 0FFh
.eh_frame:00000000000180D3                 db 0FFh
.eh_frame:00000000000180D4                 db  16h
.eh_frame:00000000000180D5                 db    0
.eh_frame:00000000000180D6                 db    0
.eh_frame:00000000000180D7                 db    0
.eh_frame:00000000000180D8                 db    0
.eh_frame:00000000000180D9                 db    0
.eh_frame:00000000000180DA                 db    0
.eh_frame:00000000000180DB                 db    0
.eh_frame:00000000000180DC                 db    0
.eh_frame:00000000000180DD                 db    0
.eh_frame:00000000000180DE                 db    0
.eh_frame:00000000000180DF                 db    0
.eh_frame:00000000000180E0                 db  40h ; @
.eh_frame:00000000000180E1                 db    0
.eh_frame:00000000000180E2                 db    0
.eh_frame:00000000000180E3                 db    0
.eh_frame:00000000000180E4                 db 0E4h
.eh_frame:00000000000180E5                 db  1Ch
.eh_frame:00000000000180E6                 db    0
.eh_frame:00000000000180E7                 db    0
.eh_frame:00000000000180E8                 db  68h ; h
.eh_frame:00000000000180E9                 db  80h
.eh_frame:00000000000180EA                 db 0FFh
.eh_frame:00000000000180EB                 db 0FFh
.eh_frame:00000000000180EC                 db 0D6h
.eh_frame:00000000000180ED                 db    0
.eh_frame:00000000000180EE                 db    0
.eh_frame:00000000000180EF                 db    0
.eh_frame:00000000000180F0                 db    0
.eh_frame:00000000000180F1                 db  41h ; A
.eh_frame:00000000000180F2                 db  0Eh
.eh_frame:00000000000180F3                 db  10h
.eh_frame:00000000000180F4                 db  86h
.eh_frame:00000000000180F5                 db    2
.eh_frame:00000000000180F6                 db  41h ; A
.eh_frame:00000000000180F7                 db  0Eh
.eh_frame:00000000000180F8                 db  18h
.eh_frame:00000000000180F9                 db  83h
.eh_frame:00000000000180FA                 db    3
.eh_frame:00000000000180FB                 db  47h ; G
.eh_frame:00000000000180FC                 db  0Eh
.eh_frame:00000000000180FD                 db  30h ; 0
.eh_frame:00000000000180FE                 db  73h ; s
.eh_frame:00000000000180FF                 db  0Ah
.eh_frame:0000000000018100                 db  0Eh
.eh_frame:0000000000018101                 db  18h
.eh_frame:0000000000018102                 db  41h ; A
.eh_frame:0000000000018103                 db  0Eh
.eh_frame:0000000000018104                 db  10h
.eh_frame:0000000000018105                 db  41h ; A
.eh_frame:0000000000018106                 db  0Eh
.eh_frame:0000000000018107                 db    8
.eh_frame:0000000000018108                 db  42h ; B
.eh_frame:0000000000018109                 db  0Bh
.eh_frame:000000000001810A                 db  72h ; r
.eh_frame:000000000001810B                 db  0Ah
.eh_frame:000000000001810C                 db  0Eh
.eh_frame:000000000001810D                 db  18h
.eh_frame:000000000001810E                 db  43h ; C
.eh_frame:000000000001810F                 db  0Eh
.eh_frame:0000000000018110                 db  10h
.eh_frame:0000000000018111                 db  41h ; A
.eh_frame:0000000000018112                 db  0Eh
.eh_frame:0000000000018113                 db    8
.eh_frame:0000000000018114                 db  4Ah ; J
.eh_frame:0000000000018115                 db  0Bh
.eh_frame:0000000000018116                 db  7Eh ; ~
.eh_frame:0000000000018117                 db  0Ah
.eh_frame:0000000000018118                 db  0Eh
.eh_frame:0000000000018119                 db  18h
.eh_frame:000000000001811A                 db  41h ; A
.eh_frame:000000000001811B                 db  0Eh
.eh_frame:000000000001811C                 db  10h
.eh_frame:000000000001811D                 db  41h ; A
.eh_frame:000000000001811E                 db  0Eh
.eh_frame:000000000001811F                 db    8
.eh_frame:0000000000018120                 db  48h ; H
.eh_frame:0000000000018121                 db  0Bh
.eh_frame:0000000000018122                 db    0
.eh_frame:0000000000018123                 db    0
.eh_frame:0000000000018124                 db  14h
.eh_frame:0000000000018125                 db    0
.eh_frame:0000000000018126                 db    0
.eh_frame:0000000000018127                 db    0
.eh_frame:0000000000018128                 db  28h ; (
.eh_frame:0000000000018129                 db  1Dh
.eh_frame:000000000001812A                 db    0
.eh_frame:000000000001812B                 db    0
.eh_frame:000000000001812C                 db    4
.eh_frame:000000000001812D                 db  81h
.eh_frame:000000000001812E                 db 0FFh
.eh_frame:000000000001812F                 db 0FFh
.eh_frame:0000000000018130                 db 0A9h
.eh_frame:0000000000018131                 db    0
.eh_frame:0000000000018132                 db    0
.eh_frame:0000000000018133                 db    0
.eh_frame:0000000000018134                 db    0
.eh_frame:0000000000018135                 db    2
.eh_frame:0000000000018136                 db  94h
.eh_frame:0000000000018137                 db  0Eh
.eh_frame:0000000000018138                 db  10h
.eh_frame:0000000000018139                 db  54h ; T
.eh_frame:000000000001813A                 db  0Eh
.eh_frame:000000000001813B                 db    8
.eh_frame:000000000001813C                 db  10h
.eh_frame:000000000001813D                 db    0
.eh_frame:000000000001813E                 db    0
.eh_frame:000000000001813F                 db    0
.eh_frame:0000000000018140                 db  40h ; @
.eh_frame:0000000000018141                 db  1Dh
.eh_frame:0000000000018142                 db    0
.eh_frame:0000000000018143                 db    0
.eh_frame:0000000000018144                 db  9Ch
.eh_frame:0000000000018145                 db  81h
.eh_frame:0000000000018146                 db 0FFh
.eh_frame:0000000000018147                 db 0FFh
.eh_frame:0000000000018148                 db  0Ah
.eh_frame:0000000000018149                 db    0
.eh_frame:000000000001814A                 db    0
.eh_frame:000000000001814B                 db    0
.eh_frame:000000000001814C                 db    0
.eh_frame:000000000001814D                 db    0
.eh_frame:000000000001814E                 db    0
.eh_frame:000000000001814F                 db    0
.eh_frame:0000000000018150                 db  44h ; D
.eh_frame:0000000000018151                 db    0
.eh_frame:0000000000018152                 db    0
.eh_frame:0000000000018153                 db    0
.eh_frame:0000000000018154                 db  54h ; T
.eh_frame:0000000000018155                 db  1Dh
.eh_frame:0000000000018156                 db    0
.eh_frame:0000000000018157                 db    0
.eh_frame:0000000000018158                 db  98h
.eh_frame:0000000000018159                 db  81h
.eh_frame:000000000001815A                 db 0FFh
.eh_frame:000000000001815B                 db 0FFh
.eh_frame:000000000001815C                 db  5Eh ; ^
.eh_frame:000000000001815D                 db    4
.eh_frame:000000000001815E                 db    0
.eh_frame:000000000001815F                 db    0
.eh_frame:0000000000018160                 db    0
.eh_frame:0000000000018161                 db  42h ; B
.eh_frame:0000000000018162                 db  0Eh
.eh_frame:0000000000018163                 db  10h
.eh_frame:0000000000018164                 db  8Eh
.eh_frame:0000000000018165                 db    2
.eh_frame:0000000000018166                 db  42h ; B
.eh_frame:0000000000018167                 db  0Eh
.eh_frame:0000000000018168                 db  18h
.eh_frame:0000000000018169                 db  8Dh
.eh_frame:000000000001816A                 db    3
.eh_frame:000000000001816B                 db  42h ; B
.eh_frame:000000000001816C                 db  0Eh
.eh_frame:000000000001816D                 db  20h
.eh_frame:000000000001816E                 db  8Ch
.eh_frame:000000000001816F                 db    4
.eh_frame:0000000000018170                 db  41h ; A
.eh_frame:0000000000018171                 db  0Eh
.eh_frame:0000000000018172                 db  28h ; (
.eh_frame:0000000000018173                 db  86h
.eh_frame:0000000000018174                 db    5
.eh_frame:0000000000018175                 db  44h ; D
.eh_frame:0000000000018176                 db  0Eh
.eh_frame:0000000000018177                 db  30h ; 0
.eh_frame:0000000000018178                 db  83h
.eh_frame:0000000000018179                 db    6
.eh_frame:000000000001817A                 db  49h ; I
.eh_frame:000000000001817B                 db  0Eh
.eh_frame:000000000001817C                 db 0C0h
.eh_frame:000000000001817D                 db    2
.eh_frame:000000000001817E                 db    3
.eh_frame:000000000001817F                 db  23h ; #
.eh_frame:0000000000018180                 db    3
.eh_frame:0000000000018181                 db  0Ah
.eh_frame:0000000000018182                 db  0Eh
.eh_frame:0000000000018183                 db  30h ; 0
.eh_frame:0000000000018184                 db  41h ; A
.eh_frame:0000000000018185                 db  0Eh
.eh_frame:0000000000018186                 db  28h ; (
.eh_frame:0000000000018187                 db  41h ; A
.eh_frame:0000000000018188                 db  0Eh
.eh_frame:0000000000018189                 db  20h
.eh_frame:000000000001818A                 db  42h ; B
.eh_frame:000000000001818B                 db  0Eh
.eh_frame:000000000001818C                 db  18h
.eh_frame:000000000001818D                 db  42h ; B
.eh_frame:000000000001818E                 db  0Eh
.eh_frame:000000000001818F                 db  10h
.eh_frame:0000000000018190                 db  42h ; B
.eh_frame:0000000000018191                 db  0Eh
.eh_frame:0000000000018192                 db    8
.eh_frame:0000000000018193                 db  41h ; A
.eh_frame:0000000000018194                 db  0Bh
.eh_frame:0000000000018195                 db    0
.eh_frame:0000000000018196                 db    0
.eh_frame:0000000000018197                 db    0
.eh_frame:0000000000018198                 db  10h
.eh_frame:0000000000018199                 db    0
.eh_frame:000000000001819A                 db    0
.eh_frame:000000000001819B                 db    0
.eh_frame:000000000001819C                 db  9Ch
.eh_frame:000000000001819D                 db  1Dh
.eh_frame:000000000001819E                 db    0
.eh_frame:000000000001819F                 db    0
.eh_frame:00000000000181A0                 db 0B0h
.eh_frame:00000000000181A1                 db  85h
.eh_frame:00000000000181A2                 db 0FFh
.eh_frame:00000000000181A3                 db 0FFh
.eh_frame:00000000000181A4                 db  10h
.eh_frame:00000000000181A5                 db    0
.eh_frame:00000000000181A6                 db    0
.eh_frame:00000000000181A7                 db    0
.eh_frame:00000000000181A8                 db    0
.eh_frame:00000000000181A9                 db    0
.eh_frame:00000000000181AA                 db    0
.eh_frame:00000000000181AB                 db    0
.eh_frame:00000000000181AC                 db  38h ; 8
.eh_frame:00000000000181AD                 db    0
.eh_frame:00000000000181AE                 db    0
.eh_frame:00000000000181AF                 db    0
.eh_frame:00000000000181B0                 db 0B0h
.eh_frame:00000000000181B1                 db  1Dh
.eh_frame:00000000000181B2                 db    0
.eh_frame:00000000000181B3                 db    0
.eh_frame:00000000000181B4                 db 0ACh
.eh_frame:00000000000181B5                 db  85h
.eh_frame:00000000000181B6                 db 0FFh
.eh_frame:00000000000181B7                 db 0FFh
.eh_frame:00000000000181B8                 db  5Eh ; ^
.eh_frame:00000000000181B9                 db    2
.eh_frame:00000000000181BA                 db    0
.eh_frame:00000000000181BB                 db    0
.eh_frame:00000000000181BC                 db    0
.eh_frame:00000000000181BD                 db  42h ; B
.eh_frame:00000000000181BE                 db  0Eh
.eh_frame:00000000000181BF                 db  10h
.eh_frame:00000000000181C0                 db  8Ch
.eh_frame:00000000000181C1                 db    2
.eh_frame:00000000000181C2                 db  41h ; A
.eh_frame:00000000000181C3                 db  0Eh
.eh_frame:00000000000181C4                 db  18h
.eh_frame:00000000000181C5                 db  86h
.eh_frame:00000000000181C6                 db    3
.eh_frame:00000000000181C7                 db  44h ; D
.eh_frame:00000000000181C8                 db  0Eh
.eh_frame:00000000000181C9                 db  20h
.eh_frame:00000000000181CA                 db  83h
.eh_frame:00000000000181CB                 db    4
.eh_frame:00000000000181CC                 db  47h ; G
.eh_frame:00000000000181CD                 db  0Eh
.eh_frame:00000000000181CE                 db 0F0h
.eh_frame:00000000000181CF                 db    1
.eh_frame:00000000000181D0                 db    3
.eh_frame:00000000000181D1                 db  0Ah
.eh_frame:00000000000181D2                 db    1
.eh_frame:00000000000181D3                 db  0Ah
.eh_frame:00000000000181D4                 db  0Eh
.eh_frame:00000000000181D5                 db  20h
.eh_frame:00000000000181D6                 db  41h ; A
.eh_frame:00000000000181D7                 db  0Eh
.eh_frame:00000000000181D8                 db  18h
.eh_frame:00000000000181D9                 db  41h ; A
.eh_frame:00000000000181DA                 db  0Eh
.eh_frame:00000000000181DB                 db  10h
.eh_frame:00000000000181DC                 db  42h ; B
.eh_frame:00000000000181DD                 db  0Eh
.eh_frame:00000000000181DE                 db    8
.eh_frame:00000000000181DF                 db  44h ; D
.eh_frame:00000000000181E0                 db  0Bh
.eh_frame:00000000000181E1                 db    0
.eh_frame:00000000000181E2                 db    0
.eh_frame:00000000000181E3                 db    0
.eh_frame:00000000000181E4                 db    0
.eh_frame:00000000000181E5                 db    0
.eh_frame:00000000000181E6                 db    0
.eh_frame:00000000000181E7                 db    0
.eh_frame:00000000000181E8                 db  10h
.eh_frame:00000000000181E9                 db    1
.eh_frame:00000000000181EA                 db    0
.eh_frame:00000000000181EB                 db    0
.eh_frame:00000000000181EC                 db 0ECh
.eh_frame:00000000000181ED                 db  1Dh
.eh_frame:00000000000181EE                 db    0
.eh_frame:00000000000181EF                 db    0
.eh_frame:00000000000181F0                 db 0D0h
.eh_frame:00000000000181F1                 db  87h
.eh_frame:00000000000181F2                 db 0FFh
.eh_frame:00000000000181F3                 db 0FFh
.eh_frame:00000000000181F4                 db  17h
.eh_frame:00000000000181F5                 db    4
.eh_frame:00000000000181F6                 db    0
.eh_frame:00000000000181F7                 db    0
.eh_frame:00000000000181F8                 db    0
.eh_frame:00000000000181F9                 db  42h ; B
.eh_frame:00000000000181FA                 db  0Eh
.eh_frame:00000000000181FB                 db  10h
.eh_frame:00000000000181FC                 db  8Fh
.eh_frame:00000000000181FD                 db    2
.eh_frame:00000000000181FE                 db  42h ; B
.eh_frame:00000000000181FF                 db  0Eh
.eh_frame:0000000000018200                 db  18h
.eh_frame:0000000000018201                 db  8Eh
.eh_frame:0000000000018202                 db    3
.eh_frame:0000000000018203                 db  42h ; B
.eh_frame:0000000000018204                 db  0Eh
.eh_frame:0000000000018205                 db  20h
.eh_frame:0000000000018206                 db  8Dh
.eh_frame:0000000000018207                 db    4
.eh_frame:0000000000018208                 db  42h ; B
.eh_frame:0000000000018209                 db  0Eh
.eh_frame:000000000001820A                 db  28h ; (
.eh_frame:000000000001820B                 db  8Ch
.eh_frame:000000000001820C                 db    5
.eh_frame:000000000001820D                 db  44h ; D
.eh_frame:000000000001820E                 db  0Eh
.eh_frame:000000000001820F                 db  30h ; 0
.eh_frame:0000000000018210                 db  86h
.eh_frame:0000000000018211                 db    6
.eh_frame:0000000000018212                 db  41h ; A
.eh_frame:0000000000018213                 db  0Eh
.eh_frame:0000000000018214                 db  38h ; 8
.eh_frame:0000000000018215                 db  83h
.eh_frame:0000000000018216                 db    7
.eh_frame:0000000000018217                 db  4Ah ; J
.eh_frame:0000000000018218                 db  0Eh
.eh_frame:0000000000018219                 db  60h ; `
.eh_frame:000000000001821A                 db    2
.eh_frame:000000000001821B                 db 0DDh
.eh_frame:000000000001821C                 db  0Eh
.eh_frame:000000000001821D                 db  68h ; h
.eh_frame:000000000001821E                 db  57h ; W
.eh_frame:000000000001821F                 db  0Eh
.eh_frame:0000000000018220                 db  70h ; p
.eh_frame:0000000000018221                 db  42h ; B
.eh_frame:0000000000018222                 db  0Eh
.eh_frame:0000000000018223                 db  78h ; x
.eh_frame:0000000000018224                 db  42h ; B
.eh_frame:0000000000018225                 db  0Eh
.eh_frame:0000000000018226                 db  80h
.eh_frame:0000000000018227                 db    1
.eh_frame:0000000000018228                 db  42h ; B
.eh_frame:0000000000018229                 db  0Eh
.eh_frame:000000000001822A                 db  88h
.eh_frame:000000000001822B                 db    1
.eh_frame:000000000001822C                 db  42h ; B
.eh_frame:000000000001822D                 db  0Eh
.eh_frame:000000000001822E                 db  90h
.eh_frame:000000000001822F                 db    1
.eh_frame:0000000000018230                 db  53h ; S
.eh_frame:0000000000018231                 db  0Eh
.eh_frame:0000000000018232                 db  60h ; `
.eh_frame:0000000000018233                 db  44h ; D
.eh_frame:0000000000018234                 db  0Ah
.eh_frame:0000000000018235                 db  0Eh
.eh_frame:0000000000018236                 db  38h ; 8
.eh_frame:0000000000018237                 db  41h ; A
.eh_frame:0000000000018238                 db  0Eh
.eh_frame:0000000000018239                 db  30h ; 0
.eh_frame:000000000001823A                 db  41h ; A
.eh_frame:000000000001823B                 db  0Eh
.eh_frame:000000000001823C                 db  28h ; (
.eh_frame:000000000001823D                 db  42h ; B
.eh_frame:000000000001823E                 db  0Eh
.eh_frame:000000000001823F                 db  20h
.eh_frame:0000000000018240                 db  42h ; B
.eh_frame:0000000000018241                 db  0Eh
.eh_frame:0000000000018242                 db  18h
.eh_frame:0000000000018243                 db  42h ; B
.eh_frame:0000000000018244                 db  0Eh
.eh_frame:0000000000018245                 db  10h
.eh_frame:0000000000018246                 db  42h ; B
.eh_frame:0000000000018247                 db  0Eh
.eh_frame:0000000000018248                 db    8
.eh_frame:0000000000018249                 db  44h ; D
.eh_frame:000000000001824A                 db  0Bh
.eh_frame:000000000001824B                 db    2
.eh_frame:000000000001824C                 db  78h ; x
.eh_frame:000000000001824D                 db  0Ah
.eh_frame:000000000001824E                 db  0Eh
.eh_frame:000000000001824F                 db  68h ; h
.eh_frame:0000000000018250                 db  48h ; H
.eh_frame:0000000000018251                 db  0Bh
.eh_frame:0000000000018252                 db  5Ah ; Z
.eh_frame:0000000000018253                 db  0Ah
.eh_frame:0000000000018254                 db  0Eh
.eh_frame:0000000000018255                 db  38h ; 8
.eh_frame:0000000000018256                 db  47h ; G
.eh_frame:0000000000018257                 db  0Eh
.eh_frame:0000000000018258                 db  30h ; 0
.eh_frame:0000000000018259                 db  41h ; A
.eh_frame:000000000001825A                 db  0Eh
.eh_frame:000000000001825B                 db  28h ; (
.eh_frame:000000000001825C                 db  42h ; B
.eh_frame:000000000001825D                 db  0Eh
.eh_frame:000000000001825E                 db  20h
.eh_frame:000000000001825F                 db  42h ; B
.eh_frame:0000000000018260                 db  0Eh
.eh_frame:0000000000018261                 db  18h
.eh_frame:0000000000018262                 db  42h ; B
.eh_frame:0000000000018263                 db  0Eh
.eh_frame:0000000000018264                 db  10h
.eh_frame:0000000000018265                 db  42h ; B
.eh_frame:0000000000018266                 db  0Eh
.eh_frame:0000000000018267                 db    8
.eh_frame:0000000000018268                 db  56h ; V
.eh_frame:0000000000018269                 db  0Bh
.eh_frame:000000000001826A                 db  5Eh ; ^
.eh_frame:000000000001826B                 db  0Ah
.eh_frame:000000000001826C                 db  0Eh
.eh_frame:000000000001826D                 db  38h ; 8
.eh_frame:000000000001826E                 db  52h ; R
.eh_frame:000000000001826F                 db  0Eh
.eh_frame:0000000000018270                 db  30h ; 0
.eh_frame:0000000000018271                 db  41h ; A
.eh_frame:0000000000018272                 db  0Eh
.eh_frame:0000000000018273                 db  28h ; (
.eh_frame:0000000000018274                 db  42h ; B
.eh_frame:0000000000018275                 db  0Eh
.eh_frame:0000000000018276                 db  20h
.eh_frame:0000000000018277                 db  42h ; B
.eh_frame:0000000000018278                 db  0Eh
.eh_frame:0000000000018279                 db  18h
.eh_frame:000000000001827A                 db  42h ; B
.eh_frame:000000000001827B                 db  0Eh
.eh_frame:000000000001827C                 db  10h
.eh_frame:000000000001827D                 db  42h ; B
.eh_frame:000000000001827E                 db  0Eh
.eh_frame:000000000001827F                 db    8
.eh_frame:0000000000018280                 db  4Fh ; O
.eh_frame:0000000000018281                 db  0Bh
.eh_frame:0000000000018282                 db  62h ; b
.eh_frame:0000000000018283                 db  0Ah
.eh_frame:0000000000018284                 db  0Eh
.eh_frame:0000000000018285                 db  38h ; 8
.eh_frame:0000000000018286                 db  50h ; P
.eh_frame:0000000000018287                 db  0Eh
.eh_frame:0000000000018288                 db  30h ; 0
.eh_frame:0000000000018289                 db  41h ; A
.eh_frame:000000000001828A                 db  0Eh
.eh_frame:000000000001828B                 db  28h ; (
.eh_frame:000000000001828C                 db  42h ; B
.eh_frame:000000000001828D                 db  0Eh
.eh_frame:000000000001828E                 db  20h
.eh_frame:000000000001828F                 db  42h ; B
.eh_frame:0000000000018290                 db  0Eh
.eh_frame:0000000000018291                 db  18h
.eh_frame:0000000000018292                 db  42h ; B
.eh_frame:0000000000018293                 db  0Eh
.eh_frame:0000000000018294                 db  10h
.eh_frame:0000000000018295                 db  42h ; B
.eh_frame:0000000000018296                 db  0Eh
.eh_frame:0000000000018297                 db    8
.eh_frame:0000000000018298                 db  55h ; U
.eh_frame:0000000000018299                 db  0Bh
.eh_frame:000000000001829A                 db  66h ; f
.eh_frame:000000000001829B                 db  0Eh
.eh_frame:000000000001829C                 db  68h ; h
.eh_frame:000000000001829D                 db  42h ; B
.eh_frame:000000000001829E                 db  0Eh
.eh_frame:000000000001829F                 db  70h ; p
.eh_frame:00000000000182A0                 db  5Ch ; \
.eh_frame:00000000000182A1                 db  0Eh
.eh_frame:00000000000182A2                 db  68h ; h
.eh_frame:00000000000182A3                 db  41h ; A
.eh_frame:00000000000182A4                 db  0Eh
.eh_frame:00000000000182A5                 db  60h ; `
.eh_frame:00000000000182A6                 db  44h ; D
.eh_frame:00000000000182A7                 db  0Ah
.eh_frame:00000000000182A8                 db  0Eh
.eh_frame:00000000000182A9                 db  38h ; 8
.eh_frame:00000000000182AA                 db  41h ; A
.eh_frame:00000000000182AB                 db  0Eh
.eh_frame:00000000000182AC                 db  30h ; 0
.eh_frame:00000000000182AD                 db  41h ; A
.eh_frame:00000000000182AE                 db  0Eh
.eh_frame:00000000000182AF                 db  28h ; (
.eh_frame:00000000000182B0                 db  42h ; B
.eh_frame:00000000000182B1                 db  0Eh
.eh_frame:00000000000182B2                 db  20h
.eh_frame:00000000000182B3                 db  42h ; B
.eh_frame:00000000000182B4                 db  0Eh
.eh_frame:00000000000182B5                 db  18h
.eh_frame:00000000000182B6                 db  42h ; B
.eh_frame:00000000000182B7                 db  0Eh
.eh_frame:00000000000182B8                 db  10h
.eh_frame:00000000000182B9                 db  42h ; B
.eh_frame:00000000000182BA                 db  0Eh
.eh_frame:00000000000182BB                 db    8
.eh_frame:00000000000182BC                 db  45h ; E
.eh_frame:00000000000182BD                 db  0Bh
.eh_frame:00000000000182BE                 db  68h ; h
.eh_frame:00000000000182BF                 db  0Ah
.eh_frame:00000000000182C0                 db  0Eh
.eh_frame:00000000000182C1                 db  68h ; h
.eh_frame:00000000000182C2                 db  48h ; H
.eh_frame:00000000000182C3                 db  0Bh
.eh_frame:00000000000182C4                 db  72h ; r
.eh_frame:00000000000182C5                 db  0Eh
.eh_frame:00000000000182C6                 db  68h ; h
.eh_frame:00000000000182C7                 db  45h ; E
.eh_frame:00000000000182C8                 db  0Eh
.eh_frame:00000000000182C9                 db  70h ; p
.eh_frame:00000000000182CA                 db  42h ; B
.eh_frame:00000000000182CB                 db  0Eh
.eh_frame:00000000000182CC                 db  78h ; x
.eh_frame:00000000000182CD                 db  42h ; B
.eh_frame:00000000000182CE                 db  0Eh
.eh_frame:00000000000182CF                 db  80h
.eh_frame:00000000000182D0                 db    1
.eh_frame:00000000000182D1                 db  5Eh ; ^
.eh_frame:00000000000182D2                 db  0Eh
.eh_frame:00000000000182D3                 db  60h ; `
.eh_frame:00000000000182D4                 db  44h ; D
.eh_frame:00000000000182D5                 db  0Ah
.eh_frame:00000000000182D6                 db  0Eh
.eh_frame:00000000000182D7                 db  38h ; 8
.eh_frame:00000000000182D8                 db  41h ; A
.eh_frame:00000000000182D9                 db  0Eh
.eh_frame:00000000000182DA                 db  30h ; 0
.eh_frame:00000000000182DB                 db  41h ; A
.eh_frame:00000000000182DC                 db  0Eh
.eh_frame:00000000000182DD                 db  28h ; (
.eh_frame:00000000000182DE                 db  42h ; B
.eh_frame:00000000000182DF                 db  0Eh
.eh_frame:00000000000182E0                 db  20h
.eh_frame:00000000000182E1                 db  42h ; B
.eh_frame:00000000000182E2                 db  0Eh
.eh_frame:00000000000182E3                 db  18h
.eh_frame:00000000000182E4                 db  42h ; B
.eh_frame:00000000000182E5                 db  0Eh
.eh_frame:00000000000182E6                 db  10h
.eh_frame:00000000000182E7                 db  42h ; B
.eh_frame:00000000000182E8                 db  0Eh
.eh_frame:00000000000182E9                 db    8
.eh_frame:00000000000182EA                 db  41h ; A
.eh_frame:00000000000182EB                 db  0Bh
.eh_frame:00000000000182EC                 db  79h ; y
.eh_frame:00000000000182ED                 db  0Ah
.eh_frame:00000000000182EE                 db  0Eh
.eh_frame:00000000000182EF                 db  68h ; h
.eh_frame:00000000000182F0                 db  42h ; B
.eh_frame:00000000000182F1                 db  0Eh
.eh_frame:00000000000182F2                 db  70h ; p
.eh_frame:00000000000182F3                 db  42h ; B
.eh_frame:00000000000182F4                 db  0Eh
.eh_frame:00000000000182F5                 db  78h ; x
.eh_frame:00000000000182F6                 db  42h ; B
.eh_frame:00000000000182F7                 db  0Eh
.eh_frame:00000000000182F8                 db  80h
.eh_frame:00000000000182F9                 db    1
.eh_frame:00000000000182FA                 db  51h ; Q
.eh_frame:00000000000182FB                 db  0Bh
.eh_frame:00000000000182FC                 db  10h
.eh_frame:00000000000182FD                 db    0
.eh_frame:00000000000182FE                 db    0
.eh_frame:00000000000182FF                 db    0
.eh_frame:0000000000018300                 db    0
.eh_frame:0000000000018301                 db  1Fh
.eh_frame:0000000000018302                 db    0
.eh_frame:0000000000018303                 db    0
.eh_frame:0000000000018304                 db 0DCh
.eh_frame:0000000000018305                 db  8Ah
.eh_frame:0000000000018306                 db 0FFh
.eh_frame:0000000000018307                 db 0FFh
.eh_frame:0000000000018308                 db  20h
.eh_frame:0000000000018309                 db    0
.eh_frame:000000000001830A                 db    0
.eh_frame:000000000001830B                 db    0
.eh_frame:000000000001830C                 db    0
.eh_frame:000000000001830D                 db    0
.eh_frame:000000000001830E                 db    0
.eh_frame:000000000001830F                 db    0
.eh_frame:0000000000018310                 db  18h
.eh_frame:0000000000018311                 db    0
.eh_frame:0000000000018312                 db    0
.eh_frame:0000000000018313                 db    0
.eh_frame:0000000000018314                 db  14h
.eh_frame:0000000000018315                 db  1Fh
.eh_frame:0000000000018316                 db    0
.eh_frame:0000000000018317                 db    0
.eh_frame:0000000000018318                 db 0E8h
.eh_frame:0000000000018319                 db  8Ah
.eh_frame:000000000001831A                 db 0FFh
.eh_frame:000000000001831B                 db 0FFh
.eh_frame:000000000001831C                 db  78h ; x
.eh_frame:000000000001831D                 db    0
.eh_frame:000000000001831E                 db    0
.eh_frame:000000000001831F                 db    0
.eh_frame:0000000000018320                 db    0
.eh_frame:0000000000018321                 db  44h ; D
.eh_frame:0000000000018322                 db  0Eh
.eh_frame:0000000000018323                 db  70h ; p
.eh_frame:0000000000018324                 db    2
.eh_frame:0000000000018325                 db  60h ; `
.eh_frame:0000000000018326                 db  0Ah
.eh_frame:0000000000018327                 db  0Eh
.eh_frame:0000000000018328                 db    8
.eh_frame:0000000000018329                 db  41h ; A
.eh_frame:000000000001832A                 db  0Bh
.eh_frame:000000000001832B                 db    0
.eh_frame:000000000001832C                 db  28h ; (
.eh_frame:000000000001832D                 db    0
.eh_frame:000000000001832E                 db    0
.eh_frame:000000000001832F                 db    0
.eh_frame:0000000000018330                 db  30h ; 0
.eh_frame:0000000000018331                 db  1Fh
.eh_frame:0000000000018332                 db    0
.eh_frame:0000000000018333                 db    0
.eh_frame:0000000000018334                 db  4Ch ; L
.eh_frame:0000000000018335                 db  8Bh
.eh_frame:0000000000018336                 db 0FFh
.eh_frame:0000000000018337                 db 0FFh
.eh_frame:0000000000018338                 db 0D5h
.eh_frame:0000000000018339                 db    0
.eh_frame:000000000001833A                 db    0
.eh_frame:000000000001833B                 db    0
.eh_frame:000000000001833C                 db    0
.eh_frame:000000000001833D                 db  41h ; A
.eh_frame:000000000001833E                 db  0Eh
.eh_frame:000000000001833F                 db  10h
.eh_frame:0000000000018340                 db  86h
.eh_frame:0000000000018341                 db    2
.eh_frame:0000000000018342                 db  41h ; A
.eh_frame:0000000000018343                 db  0Eh
.eh_frame:0000000000018344                 db  18h
.eh_frame:0000000000018345                 db  83h
.eh_frame:0000000000018346                 db    3
.eh_frame:0000000000018347                 db  50h ; P
.eh_frame:0000000000018348                 db  0Eh
.eh_frame:0000000000018349                 db 0D0h
.eh_frame:000000000001834A                 db    1
.eh_frame:000000000001834B                 db    2
.eh_frame:000000000001834C                 db 0ABh
.eh_frame:000000000001834D                 db  0Ah
.eh_frame:000000000001834E                 db  0Eh
.eh_frame:000000000001834F                 db  18h
.eh_frame:0000000000018350                 db  41h ; A
.eh_frame:0000000000018351                 db  0Eh
.eh_frame:0000000000018352                 db  10h
.eh_frame:0000000000018353                 db  41h ; A
.eh_frame:0000000000018354                 db  0Eh
.eh_frame:0000000000018355                 db    8
.eh_frame:0000000000018356                 db  41h ; A
.eh_frame:0000000000018357                 db  0Bh
.eh_frame:0000000000018358                 db  1Ch
.eh_frame:0000000000018359                 db    0
.eh_frame:000000000001835A                 db    0
.eh_frame:000000000001835B                 db    0
.eh_frame:000000000001835C                 db  5Ch ; \
.eh_frame:000000000001835D                 db  1Fh
.eh_frame:000000000001835E                 db    0
.eh_frame:000000000001835F                 db    0
.eh_frame:0000000000018360                 db    0
.eh_frame:0000000000018361                 db  8Ch
.eh_frame:0000000000018362                 db 0FFh
.eh_frame:0000000000018363                 db 0FFh
.eh_frame:0000000000018364                 db  80h
.eh_frame:0000000000018365                 db    0
.eh_frame:0000000000018366                 db    0
.eh_frame:0000000000018367                 db    0
.eh_frame:0000000000018368                 db    0
.eh_frame:0000000000018369                 db  41h ; A
.eh_frame:000000000001836A                 db  0Eh
.eh_frame:000000000001836B                 db  10h
.eh_frame:000000000001836C                 db  83h
.eh_frame:000000000001836D                 db    2
.eh_frame:000000000001836E                 db    2
.eh_frame:000000000001836F                 db  7Ah ; z
.eh_frame:0000000000018370                 db  0Eh
.eh_frame:0000000000018371                 db    8
.eh_frame:0000000000018372                 db    0
.eh_frame:0000000000018373                 db    0
.eh_frame:0000000000018374                 db    0
.eh_frame:0000000000018375                 db    0
.eh_frame:0000000000018376                 db    0
.eh_frame:0000000000018377                 db    0
.eh_frame:0000000000018378                 db  14h
.eh_frame:0000000000018379                 db    0
.eh_frame:000000000001837A                 db    0
.eh_frame:000000000001837B                 db    0
.eh_frame:000000000001837C                 db  7Ch ; |
.eh_frame:000000000001837D                 db  1Fh
.eh_frame:000000000001837E                 db    0
.eh_frame:000000000001837F                 db    0
.eh_frame:0000000000018380                 db  60h ; `
.eh_frame:0000000000018381                 db  8Ch
.eh_frame:0000000000018382                 db 0FFh
.eh_frame:0000000000018383                 db 0FFh
.eh_frame:0000000000018384                 db  38h ; 8
.eh_frame:0000000000018385                 db    0
.eh_frame:0000000000018386                 db    0
.eh_frame:0000000000018387                 db    0
.eh_frame:0000000000018388                 db    0
.eh_frame:0000000000018389                 db  5Ch ; \
.eh_frame:000000000001838A                 db  0Eh
.eh_frame:000000000001838B                 db  10h
.eh_frame:000000000001838C                 db  5Bh ; [
.eh_frame:000000000001838D                 db  0Eh
.eh_frame:000000000001838E                 db    8
.eh_frame:000000000001838F                 db    0
.eh_frame:0000000000018390                 db  18h
.eh_frame:0000000000018391                 db    0
.eh_frame:0000000000018392                 db    0
.eh_frame:0000000000018393                 db    0
.eh_frame:0000000000018394                 db  94h
.eh_frame:0000000000018395                 db  1Fh
.eh_frame:0000000000018396                 db    0
.eh_frame:0000000000018397                 db    0
.eh_frame:0000000000018398                 db  88h
.eh_frame:0000000000018399                 db  8Ch
.eh_frame:000000000001839A                 db 0FFh
.eh_frame:000000000001839B                 db 0FFh
.eh_frame:000000000001839C                 db  1Ah
.eh_frame:000000000001839D                 db    0
.eh_frame:000000000001839E                 db    0
.eh_frame:000000000001839F                 db    0
.eh_frame:00000000000183A0                 db    0
.eh_frame:00000000000183A1                 db  41h ; A
.eh_frame:00000000000183A2                 db  0Eh
.eh_frame:00000000000183A3                 db  10h
.eh_frame:00000000000183A4                 db  83h
.eh_frame:00000000000183A5                 db    2
.eh_frame:00000000000183A6                 db  53h ; S
.eh_frame:00000000000183A7                 db  0Ah
.eh_frame:00000000000183A8                 db  0Eh
.eh_frame:00000000000183A9                 db    8
.eh_frame:00000000000183AA                 db  41h ; A
.eh_frame:00000000000183AB                 db  0Bh
.eh_frame:00000000000183AC                 db  10h
.eh_frame:00000000000183AD                 db    0
.eh_frame:00000000000183AE                 db    0
.eh_frame:00000000000183AF                 db    0
.eh_frame:00000000000183B0                 db 0B0h
.eh_frame:00000000000183B1                 db  1Fh
.eh_frame:00000000000183B2                 db    0
.eh_frame:00000000000183B3                 db    0
.eh_frame:00000000000183B4                 db  8Ch
.eh_frame:00000000000183B5                 db  8Ch
.eh_frame:00000000000183B6                 db 0FFh
.eh_frame:00000000000183B7                 db 0FFh
.eh_frame:00000000000183B8                 db  24h ; $
.eh_frame:00000000000183B9                 db    0
.eh_frame:00000000000183BA                 db    0
.eh_frame:00000000000183BB                 db    0
.eh_frame:00000000000183BC                 db    0
.eh_frame:00000000000183BD                 db  5Fh ; _
.eh_frame:00000000000183BE                 db  0Eh
.eh_frame:00000000000183BF                 db  10h
.eh_frame:00000000000183C0                 db  10h
.eh_frame:00000000000183C1                 db    0
.eh_frame:00000000000183C2                 db    0
.eh_frame:00000000000183C3                 db    0
.eh_frame:00000000000183C4                 db 0C4h
.eh_frame:00000000000183C5                 db  1Fh
.eh_frame:00000000000183C6                 db    0
.eh_frame:00000000000183C7                 db    0
.eh_frame:00000000000183C8                 db 0A8h
.eh_frame:00000000000183C9                 db  8Ch
.eh_frame:00000000000183CA                 db 0FFh
.eh_frame:00000000000183CB                 db 0FFh
.eh_frame:00000000000183CC                 db    2
.eh_frame:00000000000183CD                 db    0
.eh_frame:00000000000183CE                 db    0
.eh_frame:00000000000183CF                 db    0
.eh_frame:00000000000183D0                 db    0
.eh_frame:00000000000183D1                 db    0
.eh_frame:00000000000183D2                 db    0
.eh_frame:00000000000183D3                 db    0
.eh_frame:00000000000183D4                 db  20h
.eh_frame:00000000000183D5                 db    0
.eh_frame:00000000000183D6                 db    0
.eh_frame:00000000000183D7                 db    0
.eh_frame:00000000000183D8                 db 0D8h
.eh_frame:00000000000183D9                 db  1Fh
.eh_frame:00000000000183DA                 db    0
.eh_frame:00000000000183DB                 db    0
.eh_frame:00000000000183DC                 db 0A4h
.eh_frame:00000000000183DD                 db  8Ch
.eh_frame:00000000000183DE                 db 0FFh
.eh_frame:00000000000183DF                 db 0FFh
.eh_frame:00000000000183E0                 db  36h ; 6
.eh_frame:00000000000183E1                 db    0
.eh_frame:00000000000183E2                 db    0
.eh_frame:00000000000183E3                 db    0
.eh_frame:00000000000183E4                 db    0
.eh_frame:00000000000183E5                 db  44h ; D
.eh_frame:00000000000183E6                 db  0Eh
.eh_frame:00000000000183E7                 db  10h
.eh_frame:00000000000183E8                 db  83h
.eh_frame:00000000000183E9                 db    2
.eh_frame:00000000000183EA                 db  5Dh ; ]
.eh_frame:00000000000183EB                 db  0Ah
.eh_frame:00000000000183EC                 db  0Eh
.eh_frame:00000000000183ED                 db    8
.eh_frame:00000000000183EE                 db  47h ; G
.eh_frame:00000000000183EF                 db  0Bh
.eh_frame:00000000000183F0                 db  48h ; H
.eh_frame:00000000000183F1                 db  0Ah
.eh_frame:00000000000183F2                 db  0Eh
.eh_frame:00000000000183F3                 db    8
.eh_frame:00000000000183F4                 db  41h ; A
.eh_frame:00000000000183F5                 db  0Bh
.eh_frame:00000000000183F6                 db    0
.eh_frame:00000000000183F7                 db    0
.eh_frame:00000000000183F8                 db  10h
.eh_frame:00000000000183F9                 db    0
.eh_frame:00000000000183FA                 db    0
.eh_frame:00000000000183FB                 db    0
.eh_frame:00000000000183FC                 db 0FCh
.eh_frame:00000000000183FD                 db  1Fh
.eh_frame:00000000000183FE                 db    0
.eh_frame:00000000000183FF                 db    0
.eh_frame:0000000000018400                 db 0C0h
.eh_frame:0000000000018401                 db  8Ch
.eh_frame:0000000000018402                 db 0FFh
.eh_frame:0000000000018403                 db 0FFh
.eh_frame:0000000000018404                 db  24h ; $
.eh_frame:0000000000018405                 db    0
.eh_frame:0000000000018406                 db    0
.eh_frame:0000000000018407                 db    0
.eh_frame:0000000000018408                 db    0
.eh_frame:0000000000018409                 db  5Fh ; _
.eh_frame:000000000001840A                 db  0Eh
.eh_frame:000000000001840B                 db  10h
.eh_frame:000000000001840C                 db  14h
.eh_frame:000000000001840D                 db    0
.eh_frame:000000000001840E                 db    0
.eh_frame:000000000001840F                 db    0
.eh_frame:0000000000018410                 db  10h
.eh_frame:0000000000018411                 db  20h
.eh_frame:0000000000018412                 db    0
.eh_frame:0000000000018413                 db    0
.eh_frame:0000000000018414                 db 0DCh
.eh_frame:0000000000018415                 db  8Ch
.eh_frame:0000000000018416                 db 0FFh
.eh_frame:0000000000018417                 db 0FFh
.eh_frame:0000000000018418                 db  82h
.eh_frame:0000000000018419                 db    0
.eh_frame:000000000001841A                 db    0
.eh_frame:000000000001841B                 db    0
.eh_frame:000000000001841C                 db    0
.eh_frame:000000000001841D                 db    2
.eh_frame:000000000001841E                 db  5Fh ; _
.eh_frame:000000000001841F                 db  0Eh
.eh_frame:0000000000018420                 db  10h
.eh_frame:0000000000018421                 db  49h ; I
.eh_frame:0000000000018422                 db  0Eh
.eh_frame:0000000000018423                 db    8
.eh_frame:0000000000018424                 db  14h
.eh_frame:0000000000018425                 db    0
.eh_frame:0000000000018426                 db    0
.eh_frame:0000000000018427                 db    0
.eh_frame:0000000000018428                 db  28h ; (
.eh_frame:0000000000018429                 db  20h
.eh_frame:000000000001842A                 db    0
.eh_frame:000000000001842B                 db    0
.eh_frame:000000000001842C                 db  54h ; T
.eh_frame:000000000001842D                 db  8Dh
.eh_frame:000000000001842E                 db 0FFh
.eh_frame:000000000001842F                 db 0FFh
.eh_frame:0000000000018430                 db  4Ah ; J
.eh_frame:0000000000018431                 db    0
.eh_frame:0000000000018432                 db    0
.eh_frame:0000000000018433                 db    0
.eh_frame:0000000000018434                 db    0
.eh_frame:0000000000018435                 db    2
.eh_frame:0000000000018436                 db  45h ; E
.eh_frame:0000000000018437                 db  0Eh
.eh_frame:0000000000018438                 db  10h
.eh_frame:0000000000018439                 db    0
.eh_frame:000000000001843A                 db    0
.eh_frame:000000000001843B                 db    0
.eh_frame:000000000001843C                 db  18h
.eh_frame:000000000001843D                 db    0
.eh_frame:000000000001843E                 db    0
.eh_frame:000000000001843F                 db    0
.eh_frame:0000000000018440                 db  40h ; @
.eh_frame:0000000000018441                 db  20h
.eh_frame:0000000000018442                 db    0
.eh_frame:0000000000018443                 db    0
.eh_frame:0000000000018444                 db  8Ch
.eh_frame:0000000000018445                 db  8Dh
.eh_frame:0000000000018446                 db 0FFh
.eh_frame:0000000000018447                 db 0FFh
.eh_frame:0000000000018448                 db  17h
.eh_frame:0000000000018449                 db    0
.eh_frame:000000000001844A                 db    0
.eh_frame:000000000001844B                 db    0
.eh_frame:000000000001844C                 db    0
.eh_frame:000000000001844D                 db  41h ; A
.eh_frame:000000000001844E                 db  0Eh
.eh_frame:000000000001844F                 db  10h
.eh_frame:0000000000018450                 db  83h
.eh_frame:0000000000018451                 db    2
.eh_frame:0000000000018452                 db  51h ; Q
.eh_frame:0000000000018453                 db  0Eh
.eh_frame:0000000000018454                 db    8
.eh_frame:0000000000018455                 db    0
.eh_frame:0000000000018456                 db    0
.eh_frame:0000000000018457                 db    0
.eh_frame:0000000000018458                 db  18h
.eh_frame:0000000000018459                 db    0
.eh_frame:000000000001845A                 db    0
.eh_frame:000000000001845B                 db    0
.eh_frame:000000000001845C                 db  5Ch ; \
.eh_frame:000000000001845D                 db  20h
.eh_frame:000000000001845E                 db    0
.eh_frame:000000000001845F                 db    0
.eh_frame:0000000000018460                 db  90h
.eh_frame:0000000000018461                 db  8Dh
.eh_frame:0000000000018462                 db 0FFh
.eh_frame:0000000000018463                 db 0FFh
.eh_frame:0000000000018464                 db  2Eh ; .
.eh_frame:0000000000018465                 db    0
.eh_frame:0000000000018466                 db    0
.eh_frame:0000000000018467                 db    0
.eh_frame:0000000000018468                 db    0
.eh_frame:0000000000018469                 db  47h ; G
.eh_frame:000000000001846A                 db  0Eh
.eh_frame:000000000001846B                 db  10h
.eh_frame:000000000001846C                 db  61h ; a
.eh_frame:000000000001846D                 db  0Ah
.eh_frame:000000000001846E                 db  0Eh
.eh_frame:000000000001846F                 db    8
.eh_frame:0000000000018470                 db  41h ; A
.eh_frame:0000000000018471                 db  0Bh
.eh_frame:0000000000018472                 db    0
.eh_frame:0000000000018473                 db    0
.eh_frame:0000000000018474                 db  24h ; $
.eh_frame:0000000000018475                 db    0
.eh_frame:0000000000018476                 db    0
.eh_frame:0000000000018477                 db    0
.eh_frame:0000000000018478                 db  78h ; x
.eh_frame:0000000000018479                 db  20h
.eh_frame:000000000001847A                 db    0
.eh_frame:000000000001847B                 db    0
.eh_frame:000000000001847C                 db 0A4h
.eh_frame:000000000001847D                 db  8Dh
.eh_frame:000000000001847E                 db 0FFh
.eh_frame:000000000001847F                 db 0FFh
.eh_frame:0000000000018480                 db  28h ; (
.eh_frame:0000000000018481                 db    0
.eh_frame:0000000000018482                 db    0
.eh_frame:0000000000018483                 db    0
.eh_frame:0000000000018484                 db    0
.eh_frame:0000000000018485                 db  41h ; A
.eh_frame:0000000000018486                 db  0Eh
.eh_frame:0000000000018487                 db  10h
.eh_frame:0000000000018488                 db  86h
.eh_frame:0000000000018489                 db    2
.eh_frame:000000000001848A                 db  41h ; A
.eh_frame:000000000001848B                 db  0Eh
.eh_frame:000000000001848C                 db  18h
.eh_frame:000000000001848D                 db  83h
.eh_frame:000000000001848E                 db    3
.eh_frame:000000000001848F                 db  4Dh ; M
.eh_frame:0000000000018490                 db  0Eh
.eh_frame:0000000000018491                 db  20h
.eh_frame:0000000000018492                 db  49h ; I
.eh_frame:0000000000018493                 db  0Eh
.eh_frame:0000000000018494                 db  18h
.eh_frame:0000000000018495                 db  47h ; G
.eh_frame:0000000000018496                 db  0Eh
.eh_frame:0000000000018497                 db  10h
.eh_frame:0000000000018498                 db  41h ; A
.eh_frame:0000000000018499                 db  0Eh
.eh_frame:000000000001849A                 db    8
.eh_frame:000000000001849B                 db    0
.eh_frame:000000000001849C                 db  18h
.eh_frame:000000000001849D                 db    0
.eh_frame:000000000001849E                 db    0
.eh_frame:000000000001849F                 db    0
.eh_frame:00000000000184A0                 db 0A0h
.eh_frame:00000000000184A1                 db  20h
.eh_frame:00000000000184A2                 db    0
.eh_frame:00000000000184A3                 db    0
.eh_frame:00000000000184A4                 db 0ACh
.eh_frame:00000000000184A5                 db  8Dh
.eh_frame:00000000000184A6                 db 0FFh
.eh_frame:00000000000184A7                 db 0FFh
.eh_frame:00000000000184A8                 db  13h
.eh_frame:00000000000184A9                 db    0
.eh_frame:00000000000184AA                 db    0
.eh_frame:00000000000184AB                 db    0
.eh_frame:00000000000184AC                 db    0
.eh_frame:00000000000184AD                 db  41h ; A
.eh_frame:00000000000184AE                 db  0Eh
.eh_frame:00000000000184AF                 db  10h
.eh_frame:00000000000184B0                 db  83h
.eh_frame:00000000000184B1                 db    2
.eh_frame:00000000000184B2                 db  50h ; P
.eh_frame:00000000000184B3                 db  0Eh
.eh_frame:00000000000184B4                 db    8
.eh_frame:00000000000184B5                 db    0
.eh_frame:00000000000184B6                 db    0
.eh_frame:00000000000184B7                 db    0
.eh_frame:00000000000184B8                 db  14h
.eh_frame:00000000000184B9                 db    0
.eh_frame:00000000000184BA                 db    0
.eh_frame:00000000000184BB                 db    0
.eh_frame:00000000000184BC                 db 0BCh
.eh_frame:00000000000184BD                 db  20h
.eh_frame:00000000000184BE                 db    0
.eh_frame:00000000000184BF                 db    0
.eh_frame:00000000000184C0                 db 0B0h
.eh_frame:00000000000184C1                 db  8Dh
.eh_frame:00000000000184C2                 db 0FFh
.eh_frame:00000000000184C3                 db 0FFh
.eh_frame:00000000000184C4                 db  35h ; 5
.eh_frame:00000000000184C5                 db    0
.eh_frame:00000000000184C6                 db    0
.eh_frame:00000000000184C7                 db    0
.eh_frame:00000000000184C8                 db    0
.eh_frame:00000000000184C9                 db  4Bh ; K
.eh_frame:00000000000184CA                 db  0Eh
.eh_frame:00000000000184CB                 db  10h
.eh_frame:00000000000184CC                 db    0
.eh_frame:00000000000184CD                 db    0
.eh_frame:00000000000184CE                 db    0
.eh_frame:00000000000184CF                 db    0
.eh_frame:00000000000184D0                 db  24h ; $
.eh_frame:00000000000184D1                 db    0
.eh_frame:00000000000184D2                 db    0
.eh_frame:00000000000184D3                 db    0
.eh_frame:00000000000184D4                 db 0D4h
.eh_frame:00000000000184D5                 db  20h
.eh_frame:00000000000184D6                 db    0
.eh_frame:00000000000184D7                 db    0
.eh_frame:00000000000184D8                 db 0D8h
.eh_frame:00000000000184D9                 db  8Dh
.eh_frame:00000000000184DA                 db 0FFh
.eh_frame:00000000000184DB                 db 0FFh
.eh_frame:00000000000184DC                 db  97h
.eh_frame:00000000000184DD                 db    0
.eh_frame:00000000000184DE                 db    0
.eh_frame:00000000000184DF                 db    0
.eh_frame:00000000000184E0                 db    0
.eh_frame:00000000000184E1                 db  41h ; A
.eh_frame:00000000000184E2                 db  0Eh
.eh_frame:00000000000184E3                 db  10h
.eh_frame:00000000000184E4                 db  83h
.eh_frame:00000000000184E5                 db    2
.eh_frame:00000000000184E6                 db  4Bh ; K
.eh_frame:00000000000184E7                 db  0Eh
.eh_frame:00000000000184E8                 db  30h ; 0
.eh_frame:00000000000184E9                 db    2
.eh_frame:00000000000184EA                 db  76h ; v
.eh_frame:00000000000184EB                 db  0Ah
.eh_frame:00000000000184EC                 db  0Eh
.eh_frame:00000000000184ED                 db  10h
.eh_frame:00000000000184EE                 db  41h ; A
.eh_frame:00000000000184EF                 db  0Eh
.eh_frame:00000000000184F0                 db    8
.eh_frame:00000000000184F1                 db  45h ; E
.eh_frame:00000000000184F2                 db  0Bh
.eh_frame:00000000000184F3                 db    0
.eh_frame:00000000000184F4                 db    0
.eh_frame:00000000000184F5                 db    0
.eh_frame:00000000000184F6                 db    0
.eh_frame:00000000000184F7                 db    0
.eh_frame:00000000000184F8                 db  1Ch
.eh_frame:00000000000184F9                 db    0
.eh_frame:00000000000184FA                 db    0
.eh_frame:00000000000184FB                 db    0
.eh_frame:00000000000184FC                 db 0FCh
.eh_frame:00000000000184FD                 db  20h
.eh_frame:00000000000184FE                 db    0
.eh_frame:00000000000184FF                 db    0
.eh_frame:0000000000018500                 db  50h ; P
.eh_frame:0000000000018501                 db  8Eh
.eh_frame:0000000000018502                 db 0FFh
.eh_frame:0000000000018503                 db 0FFh
.eh_frame:0000000000018504                 db  40h ; @
.eh_frame:0000000000018505                 db    0
.eh_frame:0000000000018506                 db    0
.eh_frame:0000000000018507                 db    0
.eh_frame:0000000000018508                 db    0
.eh_frame:0000000000018509                 db  44h ; D
.eh_frame:000000000001850A                 db  0Eh
.eh_frame:000000000001850B                 db  10h
.eh_frame:000000000001850C                 db  83h
.eh_frame:000000000001850D                 db    2
.eh_frame:000000000001850E                 db  5Ah ; Z
.eh_frame:000000000001850F                 db  0Ah
.eh_frame:0000000000018510                 db  0Eh
.eh_frame:0000000000018511                 db    8
.eh_frame:0000000000018512                 db  4Ah ; J
.eh_frame:0000000000018513                 db  0Bh
.eh_frame:0000000000018514                 db  53h ; S
.eh_frame:0000000000018515                 db  0Eh
.eh_frame:0000000000018516                 db    8
.eh_frame:0000000000018517                 db    0
.eh_frame:0000000000018518                 db  14h
.eh_frame:0000000000018519                 db    0
.eh_frame:000000000001851A                 db    0
.eh_frame:000000000001851B                 db    0
.eh_frame:000000000001851C                 db  1Ch
.eh_frame:000000000001851D                 db  21h ; !
.eh_frame:000000000001851E                 db    0
.eh_frame:000000000001851F                 db    0
.eh_frame:0000000000018520                 db  70h ; p
.eh_frame:0000000000018521                 db  8Eh
.eh_frame:0000000000018522                 db 0FFh
.eh_frame:0000000000018523                 db 0FFh
.eh_frame:0000000000018524                 db  29h ; )
.eh_frame:0000000000018525                 db    0
.eh_frame:0000000000018526                 db    0
.eh_frame:0000000000018527                 db    0
.eh_frame:0000000000018528                 db    0
.eh_frame:0000000000018529                 db    0
.eh_frame:000000000001852A                 db    0
.eh_frame:000000000001852B                 db    0
.eh_frame:000000000001852C                 db    0
.eh_frame:000000000001852D                 db    0
.eh_frame:000000000001852E                 db    0
.eh_frame:000000000001852F                 db    0
.eh_frame:0000000000018530                 db  2Ch ; ,
.eh_frame:0000000000018531                 db    0
.eh_frame:0000000000018532                 db    0
.eh_frame:0000000000018533                 db    0
.eh_frame:0000000000018534                 db  34h ; 4
.eh_frame:0000000000018535                 db  21h ; !
.eh_frame:0000000000018536                 db    0
.eh_frame:0000000000018537                 db    0
.eh_frame:0000000000018538                 db  88h
.eh_frame:0000000000018539                 db  8Eh
.eh_frame:000000000001853A                 db 0FFh
.eh_frame:000000000001853B                 db 0FFh
.eh_frame:000000000001853C                 db  57h ; W
.eh_frame:000000000001853D                 db    0
.eh_frame:000000000001853E                 db    0
.eh_frame:000000000001853F                 db    0
.eh_frame:0000000000018540                 db    0
.eh_frame:0000000000018541                 db  63h ; c
.eh_frame:0000000000018542                 db  0Eh
.eh_frame:0000000000018543                 db  10h
.eh_frame:0000000000018544                 db  8Ch
.eh_frame:0000000000018545                 db    2
.eh_frame:0000000000018546                 db  41h ; A
.eh_frame:0000000000018547                 db  0Eh
.eh_frame:0000000000018548                 db  18h
.eh_frame:0000000000018549                 db  86h
.eh_frame:000000000001854A                 db    3
.eh_frame:000000000001854B                 db  44h ; D
.eh_frame:000000000001854C                 db  0Eh
.eh_frame:000000000001854D                 db  20h
.eh_frame:000000000001854E                 db  83h
.eh_frame:000000000001854F                 db    4
.eh_frame:0000000000018550                 db  6Bh ; k
.eh_frame:0000000000018551                 db  0Eh
.eh_frame:0000000000018552                 db  18h
.eh_frame:0000000000018553                 db  41h ; A
.eh_frame:0000000000018554                 db  0Eh
.eh_frame:0000000000018555                 db  10h
.eh_frame:0000000000018556                 db  42h ; B
.eh_frame:0000000000018557                 db  0Eh
.eh_frame:0000000000018558                 db    8
.eh_frame:0000000000018559                 db    0
.eh_frame:000000000001855A                 db    0
.eh_frame:000000000001855B                 db    0
.eh_frame:000000000001855C                 db    0
.eh_frame:000000000001855D                 db    0
.eh_frame:000000000001855E                 db    0
.eh_frame:000000000001855F                 db    0
.eh_frame:0000000000018560                 db  3Ch ; <
.eh_frame:0000000000018561                 db    0
.eh_frame:0000000000018562                 db    0
.eh_frame:0000000000018563                 db    0
.eh_frame:0000000000018564                 db  64h ; d
.eh_frame:0000000000018565                 db  21h ; !
.eh_frame:0000000000018566                 db    0
.eh_frame:0000000000018567                 db    0
.eh_frame:0000000000018568                 db 0B8h
.eh_frame:0000000000018569                 db  8Eh
.eh_frame:000000000001856A                 db 0FFh
.eh_frame:000000000001856B                 db 0FFh
.eh_frame:000000000001856C                 db  83h
.eh_frame:000000000001856D                 db    0
.eh_frame:000000000001856E                 db    0
.eh_frame:000000000001856F                 db    0
.eh_frame:0000000000018570                 db    0
.eh_frame:0000000000018571                 db  42h ; B
.eh_frame:0000000000018572                 db  0Eh
.eh_frame:0000000000018573                 db  10h
.eh_frame:0000000000018574                 db  8Dh
.eh_frame:0000000000018575                 db    2
.eh_frame:0000000000018576                 db  42h ; B
.eh_frame:0000000000018577                 db  0Eh
.eh_frame:0000000000018578                 db  18h
.eh_frame:0000000000018579                 db  8Ch
.eh_frame:000000000001857A                 db    3
.eh_frame:000000000001857B                 db  44h ; D
.eh_frame:000000000001857C                 db  0Eh
.eh_frame:000000000001857D                 db  20h
.eh_frame:000000000001857E                 db  86h
.eh_frame:000000000001857F                 db    4
.eh_frame:0000000000018580                 db  41h ; A
.eh_frame:0000000000018581                 db  0Eh
.eh_frame:0000000000018582                 db  28h ; (
.eh_frame:0000000000018583                 db  83h
.eh_frame:0000000000018584                 db    5
.eh_frame:0000000000018585                 db  4Ah ; J
.eh_frame:0000000000018586                 db  0Eh
.eh_frame:0000000000018587                 db  40h ; @
.eh_frame:0000000000018588                 db    2
.eh_frame:0000000000018589                 db  64h ; d
.eh_frame:000000000001858A                 db  0Ah
.eh_frame:000000000001858B                 db  0Eh
.eh_frame:000000000001858C                 db  28h ; (
.eh_frame:000000000001858D                 db  41h ; A
.eh_frame:000000000001858E                 db  0Eh
.eh_frame:000000000001858F                 db  20h
.eh_frame:0000000000018590                 db  41h ; A
.eh_frame:0000000000018591                 db  0Eh
.eh_frame:0000000000018592                 db  18h
.eh_frame:0000000000018593                 db  42h ; B
.eh_frame:0000000000018594                 db  0Eh
.eh_frame:0000000000018595                 db  10h
.eh_frame:0000000000018596                 db  42h ; B
.eh_frame:0000000000018597                 db  0Eh
.eh_frame:0000000000018598                 db    8
.eh_frame:0000000000018599                 db  41h ; A
.eh_frame:000000000001859A                 db  0Bh
.eh_frame:000000000001859B                 db    0
.eh_frame:000000000001859C                 db    0
.eh_frame:000000000001859D                 db    0
.eh_frame:000000000001859E                 db    0
.eh_frame:000000000001859F                 db    0
.eh_frame:00000000000185A0                 db  14h
.eh_frame:00000000000185A1                 db    0
.eh_frame:00000000000185A2                 db    0
.eh_frame:00000000000185A3                 db    0
.eh_frame:00000000000185A4                 db 0A4h
.eh_frame:00000000000185A5                 db  21h ; !
.eh_frame:00000000000185A6                 db    0
.eh_frame:00000000000185A7                 db    0
.eh_frame:00000000000185A8                 db    8
.eh_frame:00000000000185A9                 db  8Fh
.eh_frame:00000000000185AA                 db 0FFh
.eh_frame:00000000000185AB                 db 0FFh
.eh_frame:00000000000185AC                 db    2
.eh_frame:00000000000185AD                 db    0
.eh_frame:00000000000185AE                 db    0
.eh_frame:00000000000185AF                 db    0
.eh_frame:00000000000185B0                 db    0
.eh_frame:00000000000185B1                 db    0
.eh_frame:00000000000185B2                 db    0
.eh_frame:00000000000185B3                 db    0
.eh_frame:00000000000185B4                 db    0
.eh_frame:00000000000185B5                 db    0
.eh_frame:00000000000185B6                 db    0
.eh_frame:00000000000185B7                 db    0
.eh_frame:00000000000185B8                 db  14h
.eh_frame:00000000000185B9                 db    0
.eh_frame:00000000000185BA                 db    0
.eh_frame:00000000000185BB                 db    0
.eh_frame:00000000000185BC                 db 0BCh
.eh_frame:00000000000185BD                 db  21h ; !
.eh_frame:00000000000185BE                 db    0
.eh_frame:00000000000185BF                 db    0
.eh_frame:00000000000185C0                 db    0
.eh_frame:00000000000185C1                 db  8Fh
.eh_frame:00000000000185C2                 db 0FFh
.eh_frame:00000000000185C3                 db 0FFh
.eh_frame:00000000000185C4                 db    5
.eh_frame:00000000000185C5                 db    0
.eh_frame:00000000000185C6                 db    0
.eh_frame:00000000000185C7                 db    0
.eh_frame:00000000000185C8                 db    0
.eh_frame:00000000000185C9                 db    0
.eh_frame:00000000000185CA                 db    0
.eh_frame:00000000000185CB                 db    0
.eh_frame:00000000000185CC                 db    0
.eh_frame:00000000000185CD                 db    0
.eh_frame:00000000000185CE                 db    0
.eh_frame:00000000000185CF                 db    0
.eh_frame:00000000000185D0                 db  10h
.eh_frame:00000000000185D1                 db    0
.eh_frame:00000000000185D2                 db    0
.eh_frame:00000000000185D3                 db    0
.eh_frame:00000000000185D4                 db 0D4h
.eh_frame:00000000000185D5                 db  21h ; !
.eh_frame:00000000000185D6                 db    0
.eh_frame:00000000000185D7                 db    0
.eh_frame:00000000000185D8                 db 0F8h
.eh_frame:00000000000185D9                 db  8Eh
.eh_frame:00000000000185DA                 db 0FFh
.eh_frame:00000000000185DB                 db 0FFh
.eh_frame:00000000000185DC                 db  15h
.eh_frame:00000000000185DD                 db    0
.eh_frame:00000000000185DE                 db    0
.eh_frame:00000000000185DF                 db    0
.eh_frame:00000000000185E0                 db    0
.eh_frame:00000000000185E1                 db    0
.eh_frame:00000000000185E2                 db    0
.eh_frame:00000000000185E3                 db    0
.eh_frame:00000000000185E4                 db  18h
.eh_frame:00000000000185E5                 db    0
.eh_frame:00000000000185E6                 db    0
.eh_frame:00000000000185E7                 db    0
.eh_frame:00000000000185E8                 db 0E8h
.eh_frame:00000000000185E9                 db  21h ; !
.eh_frame:00000000000185EA                 db    0
.eh_frame:00000000000185EB                 db    0
.eh_frame:00000000000185EC                 db    4
.eh_frame:00000000000185ED                 db  8Fh
.eh_frame:00000000000185EE                 db 0FFh
.eh_frame:00000000000185EF                 db 0FFh
.eh_frame:00000000000185F0                 db  22h ; "
.eh_frame:00000000000185F1                 db    0
.eh_frame:00000000000185F2                 db    0
.eh_frame:00000000000185F3                 db    0
.eh_frame:00000000000185F4                 db    0
.eh_frame:00000000000185F5                 db  44h ; D
.eh_frame:00000000000185F6                 db  0Eh
.eh_frame:00000000000185F7                 db  10h
.eh_frame:00000000000185F8                 db  58h ; X
.eh_frame:00000000000185F9                 db  0Eh
.eh_frame:00000000000185FA                 db    8
.eh_frame:00000000000185FB                 db    0
.eh_frame:00000000000185FC                 db    0
.eh_frame:00000000000185FD                 db    0
.eh_frame:00000000000185FE                 db    0
.eh_frame:00000000000185FF                 db    0
.eh_frame:0000000000018600                 db  4Ch ; L
.eh_frame:0000000000018601                 db    0
.eh_frame:0000000000018602                 db    0
.eh_frame:0000000000018603                 db    0
.eh_frame:0000000000018604                 db    4
.eh_frame:0000000000018605                 db  22h ; "
.eh_frame:0000000000018606                 db    0
.eh_frame:0000000000018607                 db    0
.eh_frame:0000000000018608                 db  18h
.eh_frame:0000000000018609                 db  8Fh
.eh_frame:000000000001860A                 db 0FFh
.eh_frame:000000000001860B                 db 0FFh
.eh_frame:000000000001860C                 db  7Dh ; }
.eh_frame:000000000001860D                 db    0
.eh_frame:000000000001860E                 db    0
.eh_frame:000000000001860F                 db    0
.eh_frame:0000000000018610                 db    0
.eh_frame:0000000000018611                 db  42h ; B
.eh_frame:0000000000018612                 db  0Eh
.eh_frame:0000000000018613                 db  10h
.eh_frame:0000000000018614                 db  8Ch
.eh_frame:0000000000018615                 db    2
.eh_frame:0000000000018616                 db  41h ; A
.eh_frame:0000000000018617                 db  0Eh
.eh_frame:0000000000018618                 db  18h
.eh_frame:0000000000018619                 db  86h
.eh_frame:000000000001861A                 db    3
.eh_frame:000000000001861B                 db  44h ; D
.eh_frame:000000000001861C                 db  0Eh
.eh_frame:000000000001861D                 db  20h
.eh_frame:000000000001861E                 db  83h
.eh_frame:000000000001861F                 db    4
.eh_frame:0000000000018620                 db  69h ; i
.eh_frame:0000000000018621                 db  0Ah
.eh_frame:0000000000018622                 db  0Eh
.eh_frame:0000000000018623                 db  18h
.eh_frame:0000000000018624                 db  41h ; A
.eh_frame:0000000000018625                 db  0Eh
.eh_frame:0000000000018626                 db  10h
.eh_frame:0000000000018627                 db  42h ; B
.eh_frame:0000000000018628                 db  0Eh
.eh_frame:0000000000018629                 db    8
.eh_frame:000000000001862A                 db  45h ; E
.eh_frame:000000000001862B                 db  0Bh
.eh_frame:000000000001862C                 db  55h ; U
.eh_frame:000000000001862D                 db  0Ah
.eh_frame:000000000001862E                 db  0Eh
.eh_frame:000000000001862F                 db  18h
.eh_frame:0000000000018630                 db  41h ; A
.eh_frame:0000000000018631                 db  0Eh
.eh_frame:0000000000018632                 db  10h
.eh_frame:0000000000018633                 db  42h ; B
.eh_frame:0000000000018634                 db  0Eh
.eh_frame:0000000000018635                 db    8
.eh_frame:0000000000018636                 db  48h ; H
.eh_frame:0000000000018637                 db  0Bh
.eh_frame:0000000000018638                 db  41h ; A
.eh_frame:0000000000018639                 db  0Ah
.eh_frame:000000000001863A                 db  0Eh
.eh_frame:000000000001863B                 db  18h
.eh_frame:000000000001863C                 db  46h ; F
.eh_frame:000000000001863D                 db  0Eh
.eh_frame:000000000001863E                 db  10h
.eh_frame:000000000001863F                 db  42h ; B
.eh_frame:0000000000018640                 db  0Eh
.eh_frame:0000000000018641                 db    8
.eh_frame:0000000000018642                 db  47h ; G
.eh_frame:0000000000018643                 db  0Bh
.eh_frame:0000000000018644                 db  49h ; I
.eh_frame:0000000000018645                 db  0Eh
.eh_frame:0000000000018646                 db  18h
.eh_frame:0000000000018647                 db  41h ; A
.eh_frame:0000000000018648                 db  0Eh
.eh_frame:0000000000018649                 db  10h
.eh_frame:000000000001864A                 db  42h ; B
.eh_frame:000000000001864B                 db  0Eh
.eh_frame:000000000001864C                 db    8
.eh_frame:000000000001864D                 db    0
.eh_frame:000000000001864E                 db    0
.eh_frame:000000000001864F                 db    0
.eh_frame:0000000000018650                 db  4Ch ; L
.eh_frame:0000000000018651                 db    0
.eh_frame:0000000000018652                 db    0
.eh_frame:0000000000018653                 db    0
.eh_frame:0000000000018654                 db  54h ; T
.eh_frame:0000000000018655                 db  22h ; "
.eh_frame:0000000000018656                 db    0
.eh_frame:0000000000018657                 db    0
.eh_frame:0000000000018658                 db  48h ; H
.eh_frame:0000000000018659                 db  8Fh
.eh_frame:000000000001865A                 db 0FFh
.eh_frame:000000000001865B                 db 0FFh
.eh_frame:000000000001865C                 db  96h
.eh_frame:000000000001865D                 db    0
.eh_frame:000000000001865E                 db    0
.eh_frame:000000000001865F                 db    0
.eh_frame:0000000000018660                 db    0
.eh_frame:0000000000018661                 db  42h ; B
.eh_frame:0000000000018662                 db  0Eh
.eh_frame:0000000000018663                 db  10h
.eh_frame:0000000000018664                 db  8Eh
.eh_frame:0000000000018665                 db    2
.eh_frame:0000000000018666                 db  42h ; B
.eh_frame:0000000000018667                 db  0Eh
.eh_frame:0000000000018668                 db  18h
.eh_frame:0000000000018669                 db  8Dh
.eh_frame:000000000001866A                 db    3
.eh_frame:000000000001866B                 db  42h ; B
.eh_frame:000000000001866C                 db  0Eh
.eh_frame:000000000001866D                 db  20h
.eh_frame:000000000001866E                 db  8Ch
.eh_frame:000000000001866F                 db    4
.eh_frame:0000000000018670                 db  41h ; A
.eh_frame:0000000000018671                 db  0Eh
.eh_frame:0000000000018672                 db  28h ; (
.eh_frame:0000000000018673                 db  86h
.eh_frame:0000000000018674                 db    5
.eh_frame:0000000000018675                 db  41h ; A
.eh_frame:0000000000018676                 db  0Eh
.eh_frame:0000000000018677                 db  30h ; 0
.eh_frame:0000000000018678                 db  83h
.eh_frame:0000000000018679                 db    6
.eh_frame:000000000001867A                 db  5Eh ; ^
.eh_frame:000000000001867B                 db  0Ah
.eh_frame:000000000001867C                 db  0Eh
.eh_frame:000000000001867D                 db  28h ; (
.eh_frame:000000000001867E                 db  41h ; A
.eh_frame:000000000001867F                 db  0Eh
.eh_frame:0000000000018680                 db  20h
.eh_frame:0000000000018681                 db  42h ; B
.eh_frame:0000000000018682                 db  0Eh
.eh_frame:0000000000018683                 db  18h
.eh_frame:0000000000018684                 db  42h ; B
.eh_frame:0000000000018685                 db  0Eh
.eh_frame:0000000000018686                 db  10h
.eh_frame:0000000000018687                 db  42h ; B
.eh_frame:0000000000018688                 db  0Eh
.eh_frame:0000000000018689                 db    8
.eh_frame:000000000001868A                 db  43h ; C
.eh_frame:000000000001868B                 db  0Bh
.eh_frame:000000000001868C                 db  7Ch ; |
.eh_frame:000000000001868D                 db  0Ah
.eh_frame:000000000001868E                 db  0Eh
.eh_frame:000000000001868F                 db  28h ; (
.eh_frame:0000000000018690                 db  41h ; A
.eh_frame:0000000000018691                 db  0Eh
.eh_frame:0000000000018692                 db  20h
.eh_frame:0000000000018693                 db  42h ; B
.eh_frame:0000000000018694                 db  0Eh
.eh_frame:0000000000018695                 db  18h
.eh_frame:0000000000018696                 db  42h ; B
.eh_frame:0000000000018697                 db  0Eh
.eh_frame:0000000000018698                 db  10h
.eh_frame:0000000000018699                 db  42h ; B
.eh_frame:000000000001869A                 db  0Eh
.eh_frame:000000000001869B                 db    8
.eh_frame:000000000001869C                 db  45h ; E
.eh_frame:000000000001869D                 db  0Bh
.eh_frame:000000000001869E                 db    0
.eh_frame:000000000001869F                 db    0
.eh_frame:00000000000186A0                 db  10h
.eh_frame:00000000000186A1                 db    0
.eh_frame:00000000000186A2                 db    0
.eh_frame:00000000000186A3                 db    0
.eh_frame:00000000000186A4                 db 0A4h
.eh_frame:00000000000186A5                 db  22h ; "
.eh_frame:00000000000186A6                 db    0
.eh_frame:00000000000186A7                 db    0
.eh_frame:00000000000186A8                 db  98h
.eh_frame:00000000000186A9                 db  8Fh
.eh_frame:00000000000186AA                 db 0FFh
.eh_frame:00000000000186AB                 db 0FFh
.eh_frame:00000000000186AC                 db  0Ah
.eh_frame:00000000000186AD                 db    0
.eh_frame:00000000000186AE                 db    0
.eh_frame:00000000000186AF                 db    0
.eh_frame:00000000000186B0                 db    0
.eh_frame:00000000000186B1                 db    0
.eh_frame:00000000000186B2                 db    0
.eh_frame:00000000000186B3                 db    0
.eh_frame:00000000000186B4                 db  18h
.eh_frame:00000000000186B5                 db    0
.eh_frame:00000000000186B6                 db    0
.eh_frame:00000000000186B7                 db    0
.eh_frame:00000000000186B8                 db 0B8h
.eh_frame:00000000000186B9                 db  22h ; "
.eh_frame:00000000000186BA                 db    0
.eh_frame:00000000000186BB                 db    0
.eh_frame:00000000000186BC                 db  94h
.eh_frame:00000000000186BD                 db  8Fh
.eh_frame:00000000000186BE                 db 0FFh
.eh_frame:00000000000186BF                 db 0FFh
.eh_frame:00000000000186C0                 db  41h ; A
.eh_frame:00000000000186C1                 db    0
.eh_frame:00000000000186C2                 db    0
.eh_frame:00000000000186C3                 db    0
.eh_frame:00000000000186C4                 db    0
.eh_frame:00000000000186C5                 db  44h ; D
.eh_frame:00000000000186C6                 db  0Eh
.eh_frame:00000000000186C7                 db  30h ; 0
.eh_frame:00000000000186C8                 db  77h ; w
.eh_frame:00000000000186C9                 db  0Ah
.eh_frame:00000000000186CA                 db  0Eh
.eh_frame:00000000000186CB                 db    8
.eh_frame:00000000000186CC                 db  41h ; A
.eh_frame:00000000000186CD                 db  0Bh
.eh_frame:00000000000186CE                 db    0
.eh_frame:00000000000186CF                 db    0
.eh_frame:00000000000186D0                 db  1Ch
.eh_frame:00000000000186D1                 db    0
.eh_frame:00000000000186D2                 db    0
.eh_frame:00000000000186D3                 db    0
.eh_frame:00000000000186D4                 db 0D4h
.eh_frame:00000000000186D5                 db  22h ; "
.eh_frame:00000000000186D6                 db    0
.eh_frame:00000000000186D7                 db    0
.eh_frame:00000000000186D8                 db 0C8h
.eh_frame:00000000000186D9                 db  8Fh
.eh_frame:00000000000186DA                 db 0FFh
.eh_frame:00000000000186DB                 db 0FFh
.eh_frame:00000000000186DC                 db  60h ; `
.eh_frame:00000000000186DD                 db    0
.eh_frame:00000000000186DE                 db    0
.eh_frame:00000000000186DF                 db    0
.eh_frame:00000000000186E0                 db    0
.eh_frame:00000000000186E1                 db  44h ; D
.eh_frame:00000000000186E2                 db  0Eh
.eh_frame:00000000000186E3                 db  10h
.eh_frame:00000000000186E4                 db  75h ; u
.eh_frame:00000000000186E5                 db  0Ah
.eh_frame:00000000000186E6                 db  0Eh
.eh_frame:00000000000186E7                 db    8
.eh_frame:00000000000186E8                 db  47h ; G
.eh_frame:00000000000186E9                 db  0Bh
.eh_frame:00000000000186EA                 db  5Fh ; _
.eh_frame:00000000000186EB                 db  0Eh
.eh_frame:00000000000186EC                 db    8
.eh_frame:00000000000186ED                 db    0
.eh_frame:00000000000186EE                 db    0
.eh_frame:00000000000186EF                 db    0
.eh_frame:00000000000186F0                 db  14h
.eh_frame:00000000000186F1                 db    0
.eh_frame:00000000000186F2                 db    0
.eh_frame:00000000000186F3                 db    0
.eh_frame:00000000000186F4                 db 0F4h
.eh_frame:00000000000186F5                 db  22h ; "
.eh_frame:00000000000186F6                 db    0
.eh_frame:00000000000186F7                 db    0
.eh_frame:00000000000186F8                 db    8
.eh_frame:00000000000186F9                 db  90h
.eh_frame:00000000000186FA                 db 0FFh
.eh_frame:00000000000186FB                 db 0FFh
.eh_frame:00000000000186FC                 db  36h ; 6
.eh_frame:00000000000186FD                 db    0
.eh_frame:00000000000186FE                 db    0
.eh_frame:00000000000186FF                 db    0
.eh_frame:0000000000018700                 db    0
.eh_frame:0000000000018701                 db    0
.eh_frame:0000000000018702                 db    0
.eh_frame:0000000000018703                 db    0
.eh_frame:0000000000018704                 db    0
.eh_frame:0000000000018705                 db    0
.eh_frame:0000000000018706                 db    0
.eh_frame:0000000000018707                 db    0
.eh_frame:0000000000018708                 db  1Ch
.eh_frame:0000000000018709                 db    0
.eh_frame:000000000001870A                 db    0
.eh_frame:000000000001870B                 db    0
.eh_frame:000000000001870C                 db  0Ch
.eh_frame:000000000001870D                 db  23h ; #
.eh_frame:000000000001870E                 db    0
.eh_frame:000000000001870F                 db    0
.eh_frame:0000000000018710                 db  30h ; 0
.eh_frame:0000000000018711                 db  90h
.eh_frame:0000000000018712                 db 0FFh
.eh_frame:0000000000018713                 db 0FFh
.eh_frame:0000000000018714                 db  3Ch ; <
.eh_frame:0000000000018715                 db    0
.eh_frame:0000000000018716                 db    0
.eh_frame:0000000000018717                 db    0
.eh_frame:0000000000018718                 db    0
.eh_frame:0000000000018719                 db  44h ; D
.eh_frame:000000000001871A                 db  0Eh
.eh_frame:000000000001871B                 db  10h
.eh_frame:000000000001871C                 db  61h ; a
.eh_frame:000000000001871D                 db  0Ah
.eh_frame:000000000001871E                 db  0Eh
.eh_frame:000000000001871F                 db    8
.eh_frame:0000000000018720                 db  4Bh ; K
.eh_frame:0000000000018721                 db  0Bh
.eh_frame:0000000000018722                 db  4Bh ; K
.eh_frame:0000000000018723                 db  0Eh
.eh_frame:0000000000018724                 db    8
.eh_frame:0000000000018725                 db    0
.eh_frame:0000000000018726                 db    0
.eh_frame:0000000000018727                 db    0
.eh_frame:0000000000018728                 db  1Ch
.eh_frame:0000000000018729                 db    0
.eh_frame:000000000001872A                 db    0
.eh_frame:000000000001872B                 db    0
.eh_frame:000000000001872C                 db  2Ch ; ,
.eh_frame:000000000001872D                 db  23h ; #
.eh_frame:000000000001872E                 db    0
.eh_frame:000000000001872F                 db    0
.eh_frame:0000000000018730                 db  50h ; P
.eh_frame:0000000000018731                 db  90h
.eh_frame:0000000000018732                 db 0FFh
.eh_frame:0000000000018733                 db 0FFh
.eh_frame:0000000000018734                 db  6Eh ; n
.eh_frame:0000000000018735                 db    0
.eh_frame:0000000000018736                 db    0
.eh_frame:0000000000018737                 db    0
.eh_frame:0000000000018738                 db    0
.eh_frame:0000000000018739                 db  44h ; D
.eh_frame:000000000001873A                 db  0Eh
.eh_frame:000000000001873B                 db  60h ; `
.eh_frame:000000000001873C                 db  7Eh ; ~
.eh_frame:000000000001873D                 db  0Ah
.eh_frame:000000000001873E                 db  0Eh
.eh_frame:000000000001873F                 db    8
.eh_frame:0000000000018740                 db  46h ; F
.eh_frame:0000000000018741                 db  0Bh
.eh_frame:0000000000018742                 db    0
.eh_frame:0000000000018743                 db    0
.eh_frame:0000000000018744                 db    0
.eh_frame:0000000000018745                 db    0
.eh_frame:0000000000018746                 db    0
.eh_frame:0000000000018747                 db    0
.eh_frame:0000000000018748                 db  18h
.eh_frame:0000000000018749                 db    0
.eh_frame:000000000001874A                 db    0
.eh_frame:000000000001874B                 db    0
.eh_frame:000000000001874C                 db  4Ch ; L
.eh_frame:000000000001874D                 db  23h ; #
.eh_frame:000000000001874E                 db    0
.eh_frame:000000000001874F                 db    0
.eh_frame:0000000000018750                 db 0A0h
.eh_frame:0000000000018751                 db  90h
.eh_frame:0000000000018752                 db 0FFh
.eh_frame:0000000000018753                 db 0FFh
.eh_frame:0000000000018754                 db  23h ; #
.eh_frame:0000000000018755                 db    0
.eh_frame:0000000000018756                 db    0
.eh_frame:0000000000018757                 db    0
.eh_frame:0000000000018758                 db    0
.eh_frame:0000000000018759                 db  41h ; A
.eh_frame:000000000001875A                 db  0Eh
.eh_frame:000000000001875B                 db  10h
.eh_frame:000000000001875C                 db  83h
.eh_frame:000000000001875D                 db    2
.eh_frame:000000000001875E                 db  61h ; a
.eh_frame:000000000001875F                 db  0Eh
.eh_frame:0000000000018760                 db    8
.eh_frame:0000000000018761                 db    0
.eh_frame:0000000000018762                 db    0
.eh_frame:0000000000018763                 db    0
.eh_frame:0000000000018764                 db  1Ch
.eh_frame:0000000000018765                 db    0
.eh_frame:0000000000018766                 db    0
.eh_frame:0000000000018767                 db    0
.eh_frame:0000000000018768                 db  68h ; h
.eh_frame:0000000000018769                 db  23h ; #
.eh_frame:000000000001876A                 db    0
.eh_frame:000000000001876B                 db    0
.eh_frame:000000000001876C                 db 0B4h
.eh_frame:000000000001876D                 db  90h
.eh_frame:000000000001876E                 db 0FFh
.eh_frame:000000000001876F                 db 0FFh
.eh_frame:0000000000018770                 db  34h ; 4
.eh_frame:0000000000018771                 db    0
.eh_frame:0000000000018772                 db    0
.eh_frame:0000000000018773                 db    0
.eh_frame:0000000000018774                 db    0
.eh_frame:0000000000018775                 db  41h ; A
.eh_frame:0000000000018776                 db  0Eh
.eh_frame:0000000000018777                 db  10h
.eh_frame:0000000000018778                 db  83h
.eh_frame:0000000000018779                 db    2
.eh_frame:000000000001877A                 db  6Bh ; k
.eh_frame:000000000001877B                 db  0Ah
.eh_frame:000000000001877C                 db  0Eh
.eh_frame:000000000001877D                 db    8
.eh_frame:000000000001877E                 db  44h ; D
.eh_frame:000000000001877F                 db  0Bh
.eh_frame:0000000000018780                 db  43h ; C
.eh_frame:0000000000018781                 db  0Eh
.eh_frame:0000000000018782                 db    8
.eh_frame:0000000000018783                 db    0
.eh_frame:0000000000018784                 db  10h
.eh_frame:0000000000018785                 db    0
.eh_frame:0000000000018786                 db    0
.eh_frame:0000000000018787                 db    0
.eh_frame:0000000000018788                 db  88h
.eh_frame:0000000000018789                 db  23h ; #
.eh_frame:000000000001878A                 db    0
.eh_frame:000000000001878B                 db    0
.eh_frame:000000000001878C                 db 0D4h
.eh_frame:000000000001878D                 db  90h
.eh_frame:000000000001878E                 db 0FFh
.eh_frame:000000000001878F                 db 0FFh
.eh_frame:0000000000018790                 db    4
.eh_frame:0000000000018791                 db    0
.eh_frame:0000000000018792                 db    0
.eh_frame:0000000000018793                 db    0
.eh_frame:0000000000018794                 db    0
.eh_frame:0000000000018795                 db    0
.eh_frame:0000000000018796                 db    0
.eh_frame:0000000000018797                 db    0
.eh_frame:0000000000018798                 db  48h ; H
.eh_frame:0000000000018799                 db    0
.eh_frame:000000000001879A                 db    0
.eh_frame:000000000001879B                 db    0
.eh_frame:000000000001879C                 db  9Ch
.eh_frame:000000000001879D                 db  23h ; #
.eh_frame:000000000001879E                 db    0
.eh_frame:000000000001879F                 db    0
.eh_frame:00000000000187A0                 db 0D0h
.eh_frame:00000000000187A1                 db  90h
.eh_frame:00000000000187A2                 db 0FFh
.eh_frame:00000000000187A3                 db 0FFh
.eh_frame:00000000000187A4                 db  1Ah
.eh_frame:00000000000187A5                 db    1
.eh_frame:00000000000187A6                 db    0
.eh_frame:00000000000187A7                 db    0
.eh_frame:00000000000187A8                 db    0
.eh_frame:00000000000187A9                 db  42h ; B
.eh_frame:00000000000187AA                 db  0Eh
.eh_frame:00000000000187AB                 db  10h
.eh_frame:00000000000187AC                 db  8Fh
.eh_frame:00000000000187AD                 db    2
.eh_frame:00000000000187AE                 db  42h ; B
.eh_frame:00000000000187AF                 db  0Eh
.eh_frame:00000000000187B0                 db  18h
.eh_frame:00000000000187B1                 db  8Eh
.eh_frame:00000000000187B2                 db    3
.eh_frame:00000000000187B3                 db  46h ; F
.eh_frame:00000000000187B4                 db  0Eh
.eh_frame:00000000000187B5                 db  20h
.eh_frame:00000000000187B6                 db  8Dh
.eh_frame:00000000000187B7                 db    4
.eh_frame:00000000000187B8                 db  42h ; B
.eh_frame:00000000000187B9                 db  0Eh
.eh_frame:00000000000187BA                 db  28h ; (
.eh_frame:00000000000187BB                 db  8Ch
.eh_frame:00000000000187BC                 db    5
.eh_frame:00000000000187BD                 db  44h ; D
.eh_frame:00000000000187BE                 db  0Eh
.eh_frame:00000000000187BF                 db  30h ; 0
.eh_frame:00000000000187C0                 db  86h
.eh_frame:00000000000187C1                 db    6
.eh_frame:00000000000187C2                 db  41h ; A
.eh_frame:00000000000187C3                 db  0Eh
.eh_frame:00000000000187C4                 db  38h ; 8
.eh_frame:00000000000187C5                 db  83h
.eh_frame:00000000000187C6                 db    7
.eh_frame:00000000000187C7                 db  47h ; G
.eh_frame:00000000000187C8                 db  0Eh
.eh_frame:00000000000187C9                 db  60h ; `
.eh_frame:00000000000187CA                 db    2
.eh_frame:00000000000187CB                 db 0DEh
.eh_frame:00000000000187CC                 db  0Ah
.eh_frame:00000000000187CD                 db  0Eh
.eh_frame:00000000000187CE                 db  38h ; 8
.eh_frame:00000000000187CF                 db  41h ; A
.eh_frame:00000000000187D0                 db  0Eh
.eh_frame:00000000000187D1                 db  30h ; 0
.eh_frame:00000000000187D2                 db  41h ; A
.eh_frame:00000000000187D3                 db  0Eh
.eh_frame:00000000000187D4                 db  28h ; (
.eh_frame:00000000000187D5                 db  42h ; B
.eh_frame:00000000000187D6                 db  0Eh
.eh_frame:00000000000187D7                 db  20h
.eh_frame:00000000000187D8                 db  42h ; B
.eh_frame:00000000000187D9                 db  0Eh
.eh_frame:00000000000187DA                 db  18h
.eh_frame:00000000000187DB                 db  42h ; B
.eh_frame:00000000000187DC                 db  0Eh
.eh_frame:00000000000187DD                 db  10h
.eh_frame:00000000000187DE                 db  42h ; B
.eh_frame:00000000000187DF                 db  0Eh
.eh_frame:00000000000187E0                 db    8
.eh_frame:00000000000187E1                 db  48h ; H
.eh_frame:00000000000187E2                 db  0Bh
.eh_frame:00000000000187E3                 db    0
.eh_frame:00000000000187E4                 db  18h
.eh_frame:00000000000187E5                 db    0
.eh_frame:00000000000187E6                 db    0
.eh_frame:00000000000187E7                 db    0
.eh_frame:00000000000187E8                 db 0E8h
.eh_frame:00000000000187E9                 db  23h ; #
.eh_frame:00000000000187EA                 db    0
.eh_frame:00000000000187EB                 db    0
.eh_frame:00000000000187EC                 db 0A4h
.eh_frame:00000000000187ED                 db  91h
.eh_frame:00000000000187EE                 db 0FFh
.eh_frame:00000000000187EF                 db 0FFh
.eh_frame:00000000000187F0                 db  1Eh
.eh_frame:00000000000187F1                 db    0
.eh_frame:00000000000187F2                 db    0
.eh_frame:00000000000187F3                 db    0
.eh_frame:00000000000187F4                 db    0
.eh_frame:00000000000187F5                 db  41h ; A
.eh_frame:00000000000187F6                 db  0Eh
.eh_frame:00000000000187F7                 db  10h
.eh_frame:00000000000187F8                 db  83h
.eh_frame:00000000000187F9                 db    2
.eh_frame:00000000000187FA                 db  58h ; X
.eh_frame:00000000000187FB                 db  0Eh
.eh_frame:00000000000187FC                 db    8
.eh_frame:00000000000187FD                 db    0
.eh_frame:00000000000187FE                 db    0
.eh_frame:00000000000187FF                 db    0
.eh_frame:0000000000018800                 db  34h ; 4
.eh_frame:0000000000018801                 db    0
.eh_frame:0000000000018802                 db    0
.eh_frame:0000000000018803                 db    0
.eh_frame:0000000000018804                 db    4
.eh_frame:0000000000018805                 db  24h ; $
.eh_frame:0000000000018806                 db    0
.eh_frame:0000000000018807                 db    0
.eh_frame:0000000000018808                 db 0A8h
.eh_frame:0000000000018809                 db  91h
.eh_frame:000000000001880A                 db 0FFh
.eh_frame:000000000001880B                 db 0FFh
.eh_frame:000000000001880C                 db  51h ; Q
.eh_frame:000000000001880D                 db    0
.eh_frame:000000000001880E                 db    0
.eh_frame:000000000001880F                 db    0
.eh_frame:0000000000018810                 db    0
.eh_frame:0000000000018811                 db  42h ; B
.eh_frame:0000000000018812                 db  0Eh
.eh_frame:0000000000018813                 db  10h
.eh_frame:0000000000018814                 db  8Dh
.eh_frame:0000000000018815                 db    2
.eh_frame:0000000000018816                 db  42h ; B
.eh_frame:0000000000018817                 db  0Eh
.eh_frame:0000000000018818                 db  18h
.eh_frame:0000000000018819                 db  8Ch
.eh_frame:000000000001881A                 db    3
.eh_frame:000000000001881B                 db  41h ; A
.eh_frame:000000000001881C                 db  0Eh
.eh_frame:000000000001881D                 db  20h
.eh_frame:000000000001881E                 db  86h
.eh_frame:000000000001881F                 db    4
.eh_frame:0000000000018820                 db  41h ; A
.eh_frame:0000000000018821                 db  0Eh
.eh_frame:0000000000018822                 db  28h ; (
.eh_frame:0000000000018823                 db  83h
.eh_frame:0000000000018824                 db    5
.eh_frame:0000000000018825                 db  47h ; G
.eh_frame:0000000000018826                 db  0Eh
.eh_frame:0000000000018827                 db  30h ; 0
.eh_frame:0000000000018828                 db  7Ah ; z
.eh_frame:0000000000018829                 db  0Eh
.eh_frame:000000000001882A                 db  28h ; (
.eh_frame:000000000001882B                 db  44h ; D
.eh_frame:000000000001882C                 db  0Eh
.eh_frame:000000000001882D                 db  20h
.eh_frame:000000000001882E                 db  41h ; A
.eh_frame:000000000001882F                 db  0Eh
.eh_frame:0000000000018830                 db  18h
.eh_frame:0000000000018831                 db  42h ; B
.eh_frame:0000000000018832                 db  0Eh
.eh_frame:0000000000018833                 db  10h
.eh_frame:0000000000018834                 db  42h ; B
.eh_frame:0000000000018835                 db  0Eh
.eh_frame:0000000000018836                 db    8
.eh_frame:0000000000018837                 db    0
.eh_frame:0000000000018838                 db  1Ch
.eh_frame:0000000000018839                 db    0
.eh_frame:000000000001883A                 db    0
.eh_frame:000000000001883B                 db    0
.eh_frame:000000000001883C                 db  3Ch ; <
.eh_frame:000000000001883D                 db  24h ; $
.eh_frame:000000000001883E                 db    0
.eh_frame:000000000001883F                 db    0
.eh_frame:0000000000018840                 db 0D0h
.eh_frame:0000000000018841                 db  91h
.eh_frame:0000000000018842                 db 0FFh
.eh_frame:0000000000018843                 db 0FFh
.eh_frame:0000000000018844                 db  5Dh ; ]
.eh_frame:0000000000018845                 db    0
.eh_frame:0000000000018846                 db    0
.eh_frame:0000000000018847                 db    0
.eh_frame:0000000000018848                 db    0
.eh_frame:0000000000018849                 db  41h ; A
.eh_frame:000000000001884A                 db  0Eh
.eh_frame:000000000001884B                 db  10h
.eh_frame:000000000001884C                 db  86h
.eh_frame:000000000001884D                 db    2
.eh_frame:000000000001884E                 db  41h ; A
.eh_frame:000000000001884F                 db  0Eh
.eh_frame:0000000000018850                 db  18h
.eh_frame:0000000000018851                 db  83h
.eh_frame:0000000000018852                 db    3
.eh_frame:0000000000018853                 db  44h ; D
.eh_frame:0000000000018854                 db  0Eh
.eh_frame:0000000000018855                 db  20h
.eh_frame:0000000000018856                 db    0
.eh_frame:0000000000018857                 db    0
.eh_frame:0000000000018858                 db  48h ; H
.eh_frame:0000000000018859                 db    0
.eh_frame:000000000001885A                 db    0
.eh_frame:000000000001885B                 db    0
.eh_frame:000000000001885C                 db  5Ch ; \
.eh_frame:000000000001885D                 db  24h ; $
.eh_frame:000000000001885E                 db    0
.eh_frame:000000000001885F                 db    0
.eh_frame:0000000000018860                 db  10h
.eh_frame:0000000000018861                 db  92h
.eh_frame:0000000000018862                 db 0FFh
.eh_frame:0000000000018863                 db 0FFh
.eh_frame:0000000000018864                 db  29h ; )
.eh_frame:0000000000018865                 db    3
.eh_frame:0000000000018866                 db    0
.eh_frame:0000000000018867                 db    0
.eh_frame:0000000000018868                 db    0
.eh_frame:0000000000018869                 db  42h ; B
.eh_frame:000000000001886A                 db  0Eh
.eh_frame:000000000001886B                 db  10h
.eh_frame:000000000001886C                 db  8Fh
.eh_frame:000000000001886D                 db    2
.eh_frame:000000000001886E                 db  42h ; B
.eh_frame:000000000001886F                 db  0Eh
.eh_frame:0000000000018870                 db  18h
.eh_frame:0000000000018871                 db  8Eh
.eh_frame:0000000000018872                 db    3
.eh_frame:0000000000018873                 db  42h ; B
.eh_frame:0000000000018874                 db  0Eh
.eh_frame:0000000000018875                 db  20h
.eh_frame:0000000000018876                 db  8Dh
.eh_frame:0000000000018877                 db    4
.eh_frame:0000000000018878                 db  42h ; B
.eh_frame:0000000000018879                 db  0Eh
.eh_frame:000000000001887A                 db  28h ; (
.eh_frame:000000000001887B                 db  8Ch
.eh_frame:000000000001887C                 db    5
.eh_frame:000000000001887D                 db  41h ; A
.eh_frame:000000000001887E                 db  0Eh
.eh_frame:000000000001887F                 db  30h ; 0
.eh_frame:0000000000018880                 db  86h
.eh_frame:0000000000018881                 db    6
.eh_frame:0000000000018882                 db  41h ; A
.eh_frame:0000000000018883                 db  0Eh
.eh_frame:0000000000018884                 db  38h ; 8
.eh_frame:0000000000018885                 db  83h
.eh_frame:0000000000018886                 db    7
.eh_frame:0000000000018887                 db  44h ; D
.eh_frame:0000000000018888                 db  0Eh
.eh_frame:0000000000018889                 db  70h ; p
.eh_frame:000000000001888A                 db    2
.eh_frame:000000000001888B                 db  94h
.eh_frame:000000000001888C                 db  0Ah
.eh_frame:000000000001888D                 db  0Eh
.eh_frame:000000000001888E                 db  38h ; 8
.eh_frame:000000000001888F                 db  41h ; A
.eh_frame:0000000000018890                 db  0Eh
.eh_frame:0000000000018891                 db  30h ; 0
.eh_frame:0000000000018892                 db  41h ; A
.eh_frame:0000000000018893                 db  0Eh
.eh_frame:0000000000018894                 db  28h ; (
.eh_frame:0000000000018895                 db  42h ; B
.eh_frame:0000000000018896                 db  0Eh
.eh_frame:0000000000018897                 db  20h
.eh_frame:0000000000018898                 db  42h ; B
.eh_frame:0000000000018899                 db  0Eh
.eh_frame:000000000001889A                 db  18h
.eh_frame:000000000001889B                 db  42h ; B
.eh_frame:000000000001889C                 db  0Eh
.eh_frame:000000000001889D                 db  10h
.eh_frame:000000000001889E                 db  42h ; B
.eh_frame:000000000001889F                 db  0Eh
.eh_frame:00000000000188A0                 db    8
.eh_frame:00000000000188A1                 db  44h ; D
.eh_frame:00000000000188A2                 db  0Bh
.eh_frame:00000000000188A3                 db    0
.eh_frame:00000000000188A4                 db  10h
.eh_frame:00000000000188A5                 db    0
.eh_frame:00000000000188A6                 db    0
.eh_frame:00000000000188A7                 db    0
.eh_frame:00000000000188A8                 db 0A8h
.eh_frame:00000000000188A9                 db  24h ; $
.eh_frame:00000000000188AA                 db    0
.eh_frame:00000000000188AB                 db    0
.eh_frame:00000000000188AC                 db 0F4h
.eh_frame:00000000000188AD                 db  94h
.eh_frame:00000000000188AE                 db 0FFh
.eh_frame:00000000000188AF                 db 0FFh
.eh_frame:00000000000188B0                 db    5
.eh_frame:00000000000188B1                 db    0
.eh_frame:00000000000188B2                 db    0
.eh_frame:00000000000188B3                 db    0
.eh_frame:00000000000188B4                 db    0
.eh_frame:00000000000188B5                 db    0
.eh_frame:00000000000188B6                 db    0
.eh_frame:00000000000188B7                 db    0
.eh_frame:00000000000188B8                 db  10h
.eh_frame:00000000000188B9                 db    0
.eh_frame:00000000000188BA                 db    0
.eh_frame:00000000000188BB                 db    0
.eh_frame:00000000000188BC                 db 0BCh
.eh_frame:00000000000188BD                 db  24h ; $
.eh_frame:00000000000188BE                 db    0
.eh_frame:00000000000188BF                 db    0
.eh_frame:00000000000188C0                 db 0F0h
.eh_frame:00000000000188C1                 db  94h
.eh_frame:00000000000188C2                 db 0FFh
.eh_frame:00000000000188C3                 db 0FFh
.eh_frame:00000000000188C4                 db    5
.eh_frame:00000000000188C5                 db    0
.eh_frame:00000000000188C6                 db    0
.eh_frame:00000000000188C7                 db    0
.eh_frame:00000000000188C8                 db    0
.eh_frame:00000000000188C9                 db    0
.eh_frame:00000000000188CA                 db    0
.eh_frame:00000000000188CB                 db    0
.eh_frame:00000000000188CC                 db  60h ; `
.eh_frame:00000000000188CD                 db    0
.eh_frame:00000000000188CE                 db    0
.eh_frame:00000000000188CF                 db    0
.eh_frame:00000000000188D0                 db 0D0h
.eh_frame:00000000000188D1                 db  24h ; $
.eh_frame:00000000000188D2                 db    0
.eh_frame:00000000000188D3                 db    0
.eh_frame:00000000000188D4                 db 0ECh
.eh_frame:00000000000188D5                 db  94h
.eh_frame:00000000000188D6                 db 0FFh
.eh_frame:00000000000188D7                 db 0FFh
.eh_frame:00000000000188D8                 db  96h
.eh_frame:00000000000188D9                 db    1
.eh_frame:00000000000188DA                 db    0
.eh_frame:00000000000188DB                 db    0
.eh_frame:00000000000188DC                 db    0
.eh_frame:00000000000188DD                 db  42h ; B
.eh_frame:00000000000188DE                 db  0Eh
.eh_frame:00000000000188DF                 db  10h
.eh_frame:00000000000188E0                 db  8Fh
.eh_frame:00000000000188E1                 db    2
.eh_frame:00000000000188E2                 db  42h ; B
.eh_frame:00000000000188E3                 db  0Eh
.eh_frame:00000000000188E4                 db  18h
.eh_frame:00000000000188E5                 db  8Eh
.eh_frame:00000000000188E6                 db    3
.eh_frame:00000000000188E7                 db  42h ; B
.eh_frame:00000000000188E8                 db  0Eh
.eh_frame:00000000000188E9                 db  20h
.eh_frame:00000000000188EA                 db  8Dh
.eh_frame:00000000000188EB                 db    4
.eh_frame:00000000000188EC                 db  42h ; B
.eh_frame:00000000000188ED                 db  0Eh
.eh_frame:00000000000188EE                 db  28h ; (
.eh_frame:00000000000188EF                 db  8Ch
.eh_frame:00000000000188F0                 db    5
.eh_frame:00000000000188F1                 db  44h ; D
.eh_frame:00000000000188F2                 db  0Eh
.eh_frame:00000000000188F3                 db  30h ; 0
.eh_frame:00000000000188F4                 db  86h
.eh_frame:00000000000188F5                 db    6
.eh_frame:00000000000188F6                 db  41h ; A
.eh_frame:00000000000188F7                 db  0Eh
.eh_frame:00000000000188F8                 db  38h ; 8
.eh_frame:00000000000188F9                 db  83h
.eh_frame:00000000000188FA                 db    7
.eh_frame:00000000000188FB                 db  4Ah ; J
.eh_frame:00000000000188FC                 db  0Eh
.eh_frame:00000000000188FD                 db  50h ; P
.eh_frame:00000000000188FE                 db    2
.eh_frame:00000000000188FF                 db  5Fh ; _
.eh_frame:0000000000018900                 db  0Ah
.eh_frame:0000000000018901                 db  0Eh
.eh_frame:0000000000018902                 db  38h ; 8
.eh_frame:0000000000018903                 db  41h ; A
.eh_frame:0000000000018904                 db  0Eh
.eh_frame:0000000000018905                 db  30h ; 0
.eh_frame:0000000000018906                 db  41h ; A
.eh_frame:0000000000018907                 db  0Eh
.eh_frame:0000000000018908                 db  28h ; (
.eh_frame:0000000000018909                 db  42h ; B
.eh_frame:000000000001890A                 db  0Eh
.eh_frame:000000000001890B                 db  20h
.eh_frame:000000000001890C                 db  42h ; B
.eh_frame:000000000001890D                 db  0Eh
.eh_frame:000000000001890E                 db  18h
.eh_frame:000000000001890F                 db  42h ; B
.eh_frame:0000000000018910                 db  0Eh
.eh_frame:0000000000018911                 db  10h
.eh_frame:0000000000018912                 db  42h ; B
.eh_frame:0000000000018913                 db  0Eh
.eh_frame:0000000000018914                 db    8
.eh_frame:0000000000018915                 db  48h ; H
.eh_frame:0000000000018916                 db  0Bh
.eh_frame:0000000000018917                 db    2
.eh_frame:0000000000018918                 db  9Bh
.eh_frame:0000000000018919                 db  0Ah
.eh_frame:000000000001891A                 db  0Eh
.eh_frame:000000000001891B                 db  38h ; 8
.eh_frame:000000000001891C                 db  41h ; A
.eh_frame:000000000001891D                 db  0Eh
.eh_frame:000000000001891E                 db  30h ; 0
.eh_frame:000000000001891F                 db  41h ; A
.eh_frame:0000000000018920                 db  0Eh
.eh_frame:0000000000018921                 db  28h ; (
.eh_frame:0000000000018922                 db  42h ; B
.eh_frame:0000000000018923                 db  0Eh
.eh_frame:0000000000018924                 db  20h
.eh_frame:0000000000018925                 db  42h ; B
.eh_frame:0000000000018926                 db  0Eh
.eh_frame:0000000000018927                 db  18h
.eh_frame:0000000000018928                 db  42h ; B
.eh_frame:0000000000018929                 db  0Eh
.eh_frame:000000000001892A                 db  10h
.eh_frame:000000000001892B                 db  42h ; B
.eh_frame:000000000001892C                 db  0Eh
.eh_frame:000000000001892D                 db    8
.eh_frame:000000000001892E                 db  43h ; C
.eh_frame:000000000001892F                 db  0Bh
.eh_frame:0000000000018930                 db  34h ; 4
.eh_frame:0000000000018931                 db    0
.eh_frame:0000000000018932                 db    0
.eh_frame:0000000000018933                 db    0
.eh_frame:0000000000018934                 db  34h ; 4
.eh_frame:0000000000018935                 db  25h ; %
.eh_frame:0000000000018936                 db    0
.eh_frame:0000000000018937                 db    0
.eh_frame:0000000000018938                 db  28h ; (
.eh_frame:0000000000018939                 db  96h
.eh_frame:000000000001893A                 db 0FFh
.eh_frame:000000000001893B                 db 0FFh
.eh_frame:000000000001893C                 db  49h ; I
.eh_frame:000000000001893D                 db    0
.eh_frame:000000000001893E                 db    0
.eh_frame:000000000001893F                 db    0
.eh_frame:0000000000018940                 db    0
.eh_frame:0000000000018941                 db  41h ; A
.eh_frame:0000000000018942                 db  0Eh
.eh_frame:0000000000018943                 db  10h
.eh_frame:0000000000018944                 db  86h
.eh_frame:0000000000018945                 db    2
.eh_frame:0000000000018946                 db  41h ; A
.eh_frame:0000000000018947                 db  0Eh
.eh_frame:0000000000018948                 db  18h
.eh_frame:0000000000018949                 db  83h
.eh_frame:000000000001894A                 db    3
.eh_frame:000000000001894B                 db  53h ; S
.eh_frame:000000000001894C                 db  0Eh
.eh_frame:000000000001894D                 db  20h
.eh_frame:000000000001894E                 db  59h ; Y
.eh_frame:000000000001894F                 db  0Ah
.eh_frame:0000000000018950                 db  0Eh
.eh_frame:0000000000018951                 db  18h
.eh_frame:0000000000018952                 db  44h ; D
.eh_frame:0000000000018953                 db  0Eh
.eh_frame:0000000000018954                 db  10h
.eh_frame:0000000000018955                 db  41h ; A
.eh_frame:0000000000018956                 db  0Eh
.eh_frame:0000000000018957                 db    8
.eh_frame:0000000000018958                 db  4Dh ; M
.eh_frame:0000000000018959                 db  0Bh
.eh_frame:000000000001895A                 db  44h ; D
.eh_frame:000000000001895B                 db  0Eh
.eh_frame:000000000001895C                 db  18h
.eh_frame:000000000001895D                 db  43h ; C
.eh_frame:000000000001895E                 db  0Eh
.eh_frame:000000000001895F                 db  10h
.eh_frame:0000000000018960                 db  41h ; A
.eh_frame:0000000000018961                 db  0Eh
.eh_frame:0000000000018962                 db    8
.eh_frame:0000000000018963                 db    0
.eh_frame:0000000000018964                 db    0
.eh_frame:0000000000018965                 db    0
.eh_frame:0000000000018966                 db    0
.eh_frame:0000000000018967                 db    0
.eh_frame:0000000000018968                 db  10h
.eh_frame:0000000000018969                 db    0
.eh_frame:000000000001896A                 db    0
.eh_frame:000000000001896B                 db    0
.eh_frame:000000000001896C                 db  6Ch ; l
.eh_frame:000000000001896D                 db  25h ; %
.eh_frame:000000000001896E                 db    0
.eh_frame:000000000001896F                 db    0
.eh_frame:0000000000018970                 db  40h ; @
.eh_frame:0000000000018971                 db  96h
.eh_frame:0000000000018972                 db 0FFh
.eh_frame:0000000000018973                 db 0FFh
.eh_frame:0000000000018974                 db  8Eh
.eh_frame:0000000000018975                 db    2
.eh_frame:0000000000018976                 db    0
.eh_frame:0000000000018977                 db    0
.eh_frame:0000000000018978                 db    0
.eh_frame:0000000000018979                 db    0
.eh_frame:000000000001897A                 db    0
.eh_frame:000000000001897B                 db    0
.eh_frame:000000000001897C                 db  30h ; 0
.eh_frame:000000000001897D                 db    0
.eh_frame:000000000001897E                 db    0
.eh_frame:000000000001897F                 db    0
.eh_frame:0000000000018980                 db  80h
.eh_frame:0000000000018981                 db  25h ; %
.eh_frame:0000000000018982                 db    0
.eh_frame:0000000000018983                 db    0
.eh_frame:0000000000018984                 db 0BCh
.eh_frame:0000000000018985                 db  98h
.eh_frame:0000000000018986                 db 0FFh
.eh_frame:0000000000018987                 db 0FFh
.eh_frame:0000000000018988                 db  40h ; @
.eh_frame:0000000000018989                 db    2
.eh_frame:000000000001898A                 db    0
.eh_frame:000000000001898B                 db    0
.eh_frame:000000000001898C                 db    0
.eh_frame:000000000001898D                 db  42h ; B
.eh_frame:000000000001898E                 db  0Eh
.eh_frame:000000000001898F                 db  10h
.eh_frame:0000000000018990                 db  8Dh
.eh_frame:0000000000018991                 db    2
.eh_frame:0000000000018992                 db  42h ; B
.eh_frame:0000000000018993                 db  0Eh
.eh_frame:0000000000018994                 db  18h
.eh_frame:0000000000018995                 db  8Ch
.eh_frame:0000000000018996                 db    3
.eh_frame:0000000000018997                 db  48h ; H
.eh_frame:0000000000018998                 db  0Eh
.eh_frame:0000000000018999                 db  20h
.eh_frame:000000000001899A                 db  86h
.eh_frame:000000000001899B                 db    4
.eh_frame:000000000001899C                 db  44h ; D
.eh_frame:000000000001899D                 db  0Eh
.eh_frame:000000000001899E                 db  28h ; (
.eh_frame:000000000001899F                 db  83h
.eh_frame:00000000000189A0                 db    5
.eh_frame:00000000000189A1                 db    3
.eh_frame:00000000000189A2                 db    9
.eh_frame:00000000000189A3                 db    2
.eh_frame:00000000000189A4                 db  0Eh
.eh_frame:00000000000189A5                 db  20h
.eh_frame:00000000000189A6                 db  57h ; W
.eh_frame:00000000000189A7                 db  0Eh
.eh_frame:00000000000189A8                 db  18h
.eh_frame:00000000000189A9                 db  4Dh ; M
.eh_frame:00000000000189AA                 db  0Eh
.eh_frame:00000000000189AB                 db  10h
.eh_frame:00000000000189AC                 db  42h ; B
.eh_frame:00000000000189AD                 db  0Eh
.eh_frame:00000000000189AE                 db    8
.eh_frame:00000000000189AF                 db    0
.eh_frame:00000000000189B0                 db  14h
.eh_frame:00000000000189B1                 db    0
.eh_frame:00000000000189B2                 db    0
.eh_frame:00000000000189B3                 db    0
.eh_frame:00000000000189B4                 db 0B4h
.eh_frame:00000000000189B5                 db  25h ; %
.eh_frame:00000000000189B6                 db    0
.eh_frame:00000000000189B7                 db    0
.eh_frame:00000000000189B8                 db 0C8h
.eh_frame:00000000000189B9                 db  9Ah
.eh_frame:00000000000189BA                 db 0FFh
.eh_frame:00000000000189BB                 db 0FFh
.eh_frame:00000000000189BC                 db  0Eh
.eh_frame:00000000000189BD                 db    0
.eh_frame:00000000000189BE                 db    0
.eh_frame:00000000000189BF                 db    0
.eh_frame:00000000000189C0                 db    0
.eh_frame:00000000000189C1                 db    0
.eh_frame:00000000000189C2                 db    0
.eh_frame:00000000000189C3                 db    0
.eh_frame:00000000000189C4                 db    0
.eh_frame:00000000000189C5                 db    0
.eh_frame:00000000000189C6                 db    0
.eh_frame:00000000000189C7                 db    0
.eh_frame:00000000000189C8                 db  34h ; 4
.eh_frame:00000000000189C9                 db    0
.eh_frame:00000000000189CA                 db    0
.eh_frame:00000000000189CB                 db    0
.eh_frame:00000000000189CC                 db 0CCh
.eh_frame:00000000000189CD                 db  25h ; %
.eh_frame:00000000000189CE                 db    0
.eh_frame:00000000000189CF                 db    0
.eh_frame:00000000000189D0                 db 0C0h
.eh_frame:00000000000189D1                 db  9Ah
.eh_frame:00000000000189D2                 db 0FFh
.eh_frame:00000000000189D3                 db 0FFh
.eh_frame:00000000000189D4                 db  7Bh ; {
.eh_frame:00000000000189D5                 db    0
.eh_frame:00000000000189D6                 db    0
.eh_frame:00000000000189D7                 db    0
.eh_frame:00000000000189D8                 db    0
.eh_frame:00000000000189D9                 db  42h ; B
.eh_frame:00000000000189DA                 db  0Eh
.eh_frame:00000000000189DB                 db  10h
.eh_frame:00000000000189DC                 db  8Ch
.eh_frame:00000000000189DD                 db    2
.eh_frame:00000000000189DE                 db  41h ; A
.eh_frame:00000000000189DF                 db  0Eh
.eh_frame:00000000000189E0                 db  18h
.eh_frame:00000000000189E1                 db  86h
.eh_frame:00000000000189E2                 db    3
.eh_frame:00000000000189E3                 db  41h ; A
.eh_frame:00000000000189E4                 db  0Eh
.eh_frame:00000000000189E5                 db  20h
.eh_frame:00000000000189E6                 db  83h
.eh_frame:00000000000189E7                 db    4
.eh_frame:00000000000189E8                 db  7Dh ; }
.eh_frame:00000000000189E9                 db  0Ah
.eh_frame:00000000000189EA                 db  0Eh
.eh_frame:00000000000189EB                 db  18h
.eh_frame:00000000000189EC                 db  41h ; A
.eh_frame:00000000000189ED                 db  0Eh
.eh_frame:00000000000189EE                 db  10h
.eh_frame:00000000000189EF                 db  42h ; B
.eh_frame:00000000000189F0                 db  0Eh
.eh_frame:00000000000189F1                 db    8
.eh_frame:00000000000189F2                 db  44h ; D
.eh_frame:00000000000189F3                 db  0Bh
.eh_frame:00000000000189F4                 db  60h ; `
.eh_frame:00000000000189F5                 db  0Ah
.eh_frame:00000000000189F6                 db  0Eh
.eh_frame:00000000000189F7                 db  18h
.eh_frame:00000000000189F8                 db  41h ; A
.eh_frame:00000000000189F9                 db  0Eh
.eh_frame:00000000000189FA                 db  10h
.eh_frame:00000000000189FB                 db  42h ; B
.eh_frame:00000000000189FC                 db  0Eh
.eh_frame:00000000000189FD                 db    8
.eh_frame:00000000000189FE                 db  45h ; E
.eh_frame:00000000000189FF                 db  0Bh
.eh_frame:0000000000018A00                 db  34h ; 4
.eh_frame:0000000000018A01                 db    0
.eh_frame:0000000000018A02                 db    0
.eh_frame:0000000000018A03                 db    0
.eh_frame:0000000000018A04                 db    4
.eh_frame:0000000000018A05                 db  26h ; &
.eh_frame:0000000000018A06                 db    0
.eh_frame:0000000000018A07                 db    0
.eh_frame:0000000000018A08                 db    8
.eh_frame:0000000000018A09                 db  9Bh
.eh_frame:0000000000018A0A                 db 0FFh
.eh_frame:0000000000018A0B                 db 0FFh
.eh_frame:0000000000018A0C                 db  7Eh ; ~
.eh_frame:0000000000018A0D                 db    2
.eh_frame:0000000000018A0E                 db    0
.eh_frame:0000000000018A0F                 db    0
.eh_frame:0000000000018A10                 db    0
.eh_frame:0000000000018A11                 db  42h ; B
.eh_frame:0000000000018A12                 db  0Eh
.eh_frame:0000000000018A13                 db  10h
.eh_frame:0000000000018A14                 db  8Ch
.eh_frame:0000000000018A15                 db    2
.eh_frame:0000000000018A16                 db  41h ; A
.eh_frame:0000000000018A17                 db  0Eh
.eh_frame:0000000000018A18                 db  18h
.eh_frame:0000000000018A19                 db  86h
.eh_frame:0000000000018A1A                 db    3
.eh_frame:0000000000018A1B                 db  43h ; C
.eh_frame:0000000000018A1C                 db  0Eh
.eh_frame:0000000000018A1D                 db  20h
.eh_frame:0000000000018A1E                 db  83h
.eh_frame:0000000000018A1F                 db    4
.eh_frame:0000000000018A20                 db  44h ; D
.eh_frame:0000000000018A21                 db  0Eh
.eh_frame:0000000000018A22                 db  70h ; p
.eh_frame:0000000000018A23                 db    2
.eh_frame:0000000000018A24                 db 0F0h
.eh_frame:0000000000018A25                 db  0Ah
.eh_frame:0000000000018A26                 db  0Eh
.eh_frame:0000000000018A27                 db  20h
.eh_frame:0000000000018A28                 db  41h ; A
.eh_frame:0000000000018A29                 db  0Eh
.eh_frame:0000000000018A2A                 db  18h
.eh_frame:0000000000018A2B                 db  41h ; A
.eh_frame:0000000000018A2C                 db  0Eh
.eh_frame:0000000000018A2D                 db  10h
.eh_frame:0000000000018A2E                 db  42h ; B
.eh_frame:0000000000018A2F                 db  0Eh
.eh_frame:0000000000018A30                 db    8
.eh_frame:0000000000018A31                 db  42h ; B
.eh_frame:0000000000018A32                 db  0Bh
.eh_frame:0000000000018A33                 db    0
.eh_frame:0000000000018A34                 db    0
.eh_frame:0000000000018A35                 db    0
.eh_frame:0000000000018A36                 db    0
.eh_frame:0000000000018A37                 db    0
.eh_frame:0000000000018A38                 db  2Ch ; ,
.eh_frame:0000000000018A39                 db    0
.eh_frame:0000000000018A3A                 db    0
.eh_frame:0000000000018A3B                 db    0
.eh_frame:0000000000018A3C                 db  3Ch ; <
.eh_frame:0000000000018A3D                 db  26h ; &
.eh_frame:0000000000018A3E                 db    0
.eh_frame:0000000000018A3F                 db    0
.eh_frame:0000000000018A40                 db  50h ; P
.eh_frame:0000000000018A41                 db  9Dh
.eh_frame:0000000000018A42                 db 0FFh
.eh_frame:0000000000018A43                 db 0FFh
.eh_frame:0000000000018A44                 db  93h
.eh_frame:0000000000018A45                 db    0
.eh_frame:0000000000018A46                 db    0
.eh_frame:0000000000018A47                 db    0
.eh_frame:0000000000018A48                 db    0
.eh_frame:0000000000018A49                 db  42h ; B
.eh_frame:0000000000018A4A                 db  0Eh
.eh_frame:0000000000018A4B                 db  10h
.eh_frame:0000000000018A4C                 db  8Ch
.eh_frame:0000000000018A4D                 db    2
.eh_frame:0000000000018A4E                 db  41h ; A
.eh_frame:0000000000018A4F                 db  0Eh
.eh_frame:0000000000018A50                 db  18h
.eh_frame:0000000000018A51                 db  86h
.eh_frame:0000000000018A52                 db    3
.eh_frame:0000000000018A53                 db  44h ; D
.eh_frame:0000000000018A54                 db  0Eh
.eh_frame:0000000000018A55                 db  20h
.eh_frame:0000000000018A56                 db  83h
.eh_frame:0000000000018A57                 db    4
.eh_frame:0000000000018A58                 db  5Eh ; ^
.eh_frame:0000000000018A59                 db  0Ah
.eh_frame:0000000000018A5A                 db  0Eh
.eh_frame:0000000000018A5B                 db  18h
.eh_frame:0000000000018A5C                 db  41h ; A
.eh_frame:0000000000018A5D                 db  0Eh
.eh_frame:0000000000018A5E                 db  10h
.eh_frame:0000000000018A5F                 db  42h ; B
.eh_frame:0000000000018A60                 db  0Eh
.eh_frame:0000000000018A61                 db    8
.eh_frame:0000000000018A62                 db  48h ; H
.eh_frame:0000000000018A63                 db  0Bh
.eh_frame:0000000000018A64                 db    0
.eh_frame:0000000000018A65                 db    0
.eh_frame:0000000000018A66                 db    0
.eh_frame:0000000000018A67                 db    0
.eh_frame:0000000000018A68                 db  44h ; D
.eh_frame:0000000000018A69                 db    0
.eh_frame:0000000000018A6A                 db    0
.eh_frame:0000000000018A6B                 db    0
.eh_frame:0000000000018A6C                 db  6Ch ; l
.eh_frame:0000000000018A6D                 db  26h ; &
.eh_frame:0000000000018A6E                 db    0
.eh_frame:0000000000018A6F                 db    0
.eh_frame:0000000000018A70                 db 0C0h
.eh_frame:0000000000018A71                 db  9Dh
.eh_frame:0000000000018A72                 db 0FFh
.eh_frame:0000000000018A73                 db 0FFh
.eh_frame:0000000000018A74                 db  65h ; e
.eh_frame:0000000000018A75                 db    0
.eh_frame:0000000000018A76                 db    0
.eh_frame:0000000000018A77                 db    0
.eh_frame:0000000000018A78                 db    0
.eh_frame:0000000000018A79                 db  42h ; B
.eh_frame:0000000000018A7A                 db  0Eh
.eh_frame:0000000000018A7B                 db  10h
.eh_frame:0000000000018A7C                 db  8Fh
.eh_frame:0000000000018A7D                 db    2
.eh_frame:0000000000018A7E                 db  42h ; B
.eh_frame:0000000000018A7F                 db  0Eh
.eh_frame:0000000000018A80                 db  18h
.eh_frame:0000000000018A81                 db  8Eh
.eh_frame:0000000000018A82                 db    3
.eh_frame:0000000000018A83                 db  45h ; E
.eh_frame:0000000000018A84                 db  0Eh
.eh_frame:0000000000018A85                 db  20h
.eh_frame:0000000000018A86                 db  8Dh
.eh_frame:0000000000018A87                 db    4
.eh_frame:0000000000018A88                 db  42h ; B
.eh_frame:0000000000018A89                 db  0Eh
.eh_frame:0000000000018A8A                 db  28h ; (
.eh_frame:0000000000018A8B                 db  8Ch
.eh_frame:0000000000018A8C                 db    5
.eh_frame:0000000000018A8D                 db  48h ; H
.eh_frame:0000000000018A8E                 db  0Eh
.eh_frame:0000000000018A8F                 db  30h ; 0
.eh_frame:0000000000018A90                 db  86h
.eh_frame:0000000000018A91                 db    6
.eh_frame:0000000000018A92                 db  48h ; H
.eh_frame:0000000000018A93                 db  0Eh
.eh_frame:0000000000018A94                 db  38h ; 8
.eh_frame:0000000000018A95                 db  83h
.eh_frame:0000000000018A96                 db    7
.eh_frame:0000000000018A97                 db  4Dh ; M
.eh_frame:0000000000018A98                 db  0Eh
.eh_frame:0000000000018A99                 db  40h ; @
.eh_frame:0000000000018A9A                 db  72h ; r
.eh_frame:0000000000018A9B                 db  0Eh
.eh_frame:0000000000018A9C                 db  38h ; 8
.eh_frame:0000000000018A9D                 db  41h ; A
.eh_frame:0000000000018A9E                 db  0Eh
.eh_frame:0000000000018A9F                 db  30h ; 0
.eh_frame:0000000000018AA0                 db  41h ; A
.eh_frame:0000000000018AA1                 db  0Eh
.eh_frame:0000000000018AA2                 db  28h ; (
.eh_frame:0000000000018AA3                 db  42h ; B
.eh_frame:0000000000018AA4                 db  0Eh
.eh_frame:0000000000018AA5                 db  20h
.eh_frame:0000000000018AA6                 db  42h ; B
.eh_frame:0000000000018AA7                 db  0Eh
.eh_frame:0000000000018AA8                 db  18h
.eh_frame:0000000000018AA9                 db  42h ; B
.eh_frame:0000000000018AAA                 db  0Eh
.eh_frame:0000000000018AAB                 db  10h
.eh_frame:0000000000018AAC                 db  42h ; B
.eh_frame:0000000000018AAD                 db  0Eh
.eh_frame:0000000000018AAE                 db    8
.eh_frame:0000000000018AAF                 db    0
.eh_frame:0000000000018AB0                 db  14h
.eh_frame:0000000000018AB1                 db    0
.eh_frame:0000000000018AB2                 db    0
.eh_frame:0000000000018AB3                 db    0
.eh_frame:0000000000018AB4                 db 0B4h
.eh_frame:0000000000018AB5                 db  26h ; &
.eh_frame:0000000000018AB6                 db    0
.eh_frame:0000000000018AB7                 db    0
.eh_frame:0000000000018AB8                 db 0E8h
.eh_frame:0000000000018AB9                 db  9Dh
.eh_frame:0000000000018ABA                 db 0FFh
.eh_frame:0000000000018ABB                 db 0FFh
.eh_frame:0000000000018ABC                 db    2
.eh_frame:0000000000018ABD                 db    0
.eh_frame:0000000000018ABE                 db    0
.eh_frame:0000000000018ABF                 db    0
.eh_frame:0000000000018AC0                 db    0
.eh_frame:0000000000018AC1                 db    0
.eh_frame:0000000000018AC2                 db    0
.eh_frame:0000000000018AC3                 db    0
.eh_frame:0000000000018AC4                 db    0
.eh_frame:0000000000018AC5                 db    0
.eh_frame:0000000000018AC6                 db    0
.eh_frame:0000000000018AC7                 db    0
.eh_frame:0000000000018AC8                 db  10h
.eh_frame:0000000000018AC9                 db    0
.eh_frame:0000000000018ACA                 db    0
.eh_frame:0000000000018ACB                 db    0
.eh_frame:0000000000018ACC                 db 0CCh
.eh_frame:0000000000018ACD                 db  26h ; &
.eh_frame:0000000000018ACE                 db    0
.eh_frame:0000000000018ACF                 db    0
.eh_frame:0000000000018AD0                 db 0E0h
.eh_frame:0000000000018AD1                 db  9Dh
.eh_frame:0000000000018AD2                 db 0FFh
.eh_frame:0000000000018AD3                 db 0FFh
.eh_frame:0000000000018AD4                 db  0Eh
.eh_frame:0000000000018AD5                 db    0
.eh_frame:0000000000018AD6                 db    0
.eh_frame:0000000000018AD7                 db    0
.eh_frame:0000000000018AD8                 db    0
.eh_frame:0000000000018AD9                 db    0
.eh_frame:0000000000018ADA                 db    0
.eh_frame:0000000000018ADB                 db    0
.eh_frame:0000000000018ADC __FRAME_END__   db    0
.eh_frame:0000000000018ADD                 db    0
.eh_frame:0000000000018ADE                 db    0
.eh_frame:0000000000018ADF                 db    0
.eh_frame:0000000000018ADF _eh_frame       ends
.eh_frame:0000000000018ADF
.init_array:0000000000219530 ; ELF Initialization Function Table
.init_array:0000000000219530 ; ===========================================================================
.init_array:0000000000219530
.init_array:0000000000219530 ; Segment type: Pure data
.init_array:0000000000219530 ; Segment permissions: Read/Write
.init_array:0000000000219530 _init_array     segment qword public 'DATA' use64
.init_array:0000000000219530                 assume cs:_init_array
.init_array:0000000000219530                 ;org 219530h
.init_array:0000000000219530 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000219530                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000219530                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000219530 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000219530
.fini_array:0000000000219538 ; ELF Termination Function Table
.fini_array:0000000000219538 ; ===========================================================================
.fini_array:0000000000219538
.fini_array:0000000000219538 ; Segment type: Pure data
.fini_array:0000000000219538 ; Segment permissions: Read/Write
.fini_array:0000000000219538 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000219538                 assume cs:_fini_array
.fini_array:0000000000219538                 ;org 219538h
.fini_array:0000000000219538 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000219538                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000219538 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000219538
.data.rel.ro:0000000000219540 ; ===========================================================================
.data.rel.ro:0000000000219540
.data.rel.ro:0000000000219540 ; Segment type: Pure data
.data.rel.ro:0000000000219540 ; Segment permissions: Read/Write
.data.rel.ro:0000000000219540 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000219540                 assume cs:_data_rel_ro
.data.rel.ro:0000000000219540                 ;org 219540h
.data.rel.ro:0000000000219540 preserve_args_7371 dq offset aMode      ; DATA XREF: decode_preserve_arg+7E↑o
.data.rel.ro:0000000000219540                                         ; "mode"
.data.rel.ro:0000000000219548                 dq offset aTimestamps   ; "timestamps"
.data.rel.ro:0000000000219550                 dq offset aOwnership    ; "ownership"
.data.rel.ro:0000000000219558                 dq offset aLinks        ; "links"
.data.rel.ro:0000000000219560                 dq offset aContext      ; "context"
.data.rel.ro:0000000000219568                 dq offset aXattr        ; "xattr"
.data.rel.ro:0000000000219570                 dq offset aAll          ; "all"
.data.rel.ro:0000000000219578                 align 20h
.data.rel.ro:0000000000219580 ; struct option long_opts
.data.rel.ro:0000000000219580 long_opts       dq offset aArchive      ; name
.data.rel.ro:0000000000219580                                         ; DATA XREF: main+16↑o
.data.rel.ro:0000000000219580                 dd 0                    ; has_arg ; "archive"
.data.rel.ro:0000000000219580                 db 4 dup(0)
.data.rel.ro:0000000000219580                 dq 0                    ; flag
.data.rel.ro:0000000000219580                 dd 61h                  ; val
.data.rel.ro:0000000000219580                 db 4 dup(0)
.data.rel.ro:00000000002195A0                 dq offset aAttributesOnly ; "attributes-only"
.data.rel.ro:00000000002195A8                 db    0
.data.rel.ro:00000000002195A9                 db    0
.data.rel.ro:00000000002195AA                 db    0
.data.rel.ro:00000000002195AB                 db    0
.data.rel.ro:00000000002195AC                 db    0
.data.rel.ro:00000000002195AD                 db    0
.data.rel.ro:00000000002195AE                 db    0
.data.rel.ro:00000000002195AF                 db    0
.data.rel.ro:00000000002195B0                 db    0
.data.rel.ro:00000000002195B1                 db    0
.data.rel.ro:00000000002195B2                 db    0
.data.rel.ro:00000000002195B3                 db    0
.data.rel.ro:00000000002195B4                 db    0
.data.rel.ro:00000000002195B5                 db    0
.data.rel.ro:00000000002195B6                 db    0
.data.rel.ro:00000000002195B7                 db    0
.data.rel.ro:00000000002195B8                 db  80h
.data.rel.ro:00000000002195B9                 db    0
.data.rel.ro:00000000002195BA                 db    0
.data.rel.ro:00000000002195BB                 db    0
.data.rel.ro:00000000002195BC                 db    0
.data.rel.ro:00000000002195BD                 db    0
.data.rel.ro:00000000002195BE                 db    0
.data.rel.ro:00000000002195BF                 db    0
.data.rel.ro:00000000002195C0                 dq offset aBackup       ; "backup"
.data.rel.ro:00000000002195C8                 db    2
.data.rel.ro:00000000002195C9                 db    0
.data.rel.ro:00000000002195CA                 db    0
.data.rel.ro:00000000002195CB                 db    0
.data.rel.ro:00000000002195CC                 db    0
.data.rel.ro:00000000002195CD                 db    0
.data.rel.ro:00000000002195CE                 db    0
.data.rel.ro:00000000002195CF                 db    0
.data.rel.ro:00000000002195D0                 db    0
.data.rel.ro:00000000002195D1                 db    0
.data.rel.ro:00000000002195D2                 db    0
.data.rel.ro:00000000002195D3                 db    0
.data.rel.ro:00000000002195D4                 db    0
.data.rel.ro:00000000002195D5                 db    0
.data.rel.ro:00000000002195D6                 db    0
.data.rel.ro:00000000002195D7                 db    0
.data.rel.ro:00000000002195D8                 db  62h ; b
.data.rel.ro:00000000002195D9                 db    0
.data.rel.ro:00000000002195DA                 db    0
.data.rel.ro:00000000002195DB                 db    0
.data.rel.ro:00000000002195DC                 db    0
.data.rel.ro:00000000002195DD                 db    0
.data.rel.ro:00000000002195DE                 db    0
.data.rel.ro:00000000002195DF                 db    0
.data.rel.ro:00000000002195E0                 dq offset aCopyContents ; "copy-contents"
.data.rel.ro:00000000002195E8                 db    0
.data.rel.ro:00000000002195E9                 db    0
.data.rel.ro:00000000002195EA                 db    0
.data.rel.ro:00000000002195EB                 db    0
.data.rel.ro:00000000002195EC                 db    0
.data.rel.ro:00000000002195ED                 db    0
.data.rel.ro:00000000002195EE                 db    0
.data.rel.ro:00000000002195EF                 db    0
.data.rel.ro:00000000002195F0                 db    0
.data.rel.ro:00000000002195F1                 db    0
.data.rel.ro:00000000002195F2                 db    0
.data.rel.ro:00000000002195F3                 db    0
.data.rel.ro:00000000002195F4                 db    0
.data.rel.ro:00000000002195F5                 db    0
.data.rel.ro:00000000002195F6                 db    0
.data.rel.ro:00000000002195F7                 db    0
.data.rel.ro:00000000002195F8                 db  81h
.data.rel.ro:00000000002195F9                 db    0
.data.rel.ro:00000000002195FA                 db    0
.data.rel.ro:00000000002195FB                 db    0
.data.rel.ro:00000000002195FC                 db    0
.data.rel.ro:00000000002195FD                 db    0
.data.rel.ro:00000000002195FE                 db    0
.data.rel.ro:00000000002195FF                 db    0
.data.rel.ro:0000000000219600                 dq offset aNoDereference+3 ; "dereference"
.data.rel.ro:0000000000219608                 db    0
.data.rel.ro:0000000000219609                 db    0
.data.rel.ro:000000000021960A                 db    0
.data.rel.ro:000000000021960B                 db    0
.data.rel.ro:000000000021960C                 db    0
.data.rel.ro:000000000021960D                 db    0
.data.rel.ro:000000000021960E                 db    0
.data.rel.ro:000000000021960F                 db    0
.data.rel.ro:0000000000219610                 db    0
.data.rel.ro:0000000000219611                 db    0
.data.rel.ro:0000000000219612                 db    0
.data.rel.ro:0000000000219613                 db    0
.data.rel.ro:0000000000219614                 db    0
.data.rel.ro:0000000000219615                 db    0
.data.rel.ro:0000000000219616                 db    0
.data.rel.ro:0000000000219617                 db    0
.data.rel.ro:0000000000219618                 db  4Ch ; L
.data.rel.ro:0000000000219619                 db    0
.data.rel.ro:000000000021961A                 db    0
.data.rel.ro:000000000021961B                 db    0
.data.rel.ro:000000000021961C                 db    0
.data.rel.ro:000000000021961D                 db    0
.data.rel.ro:000000000021961E                 db    0
.data.rel.ro:000000000021961F                 db    0
.data.rel.ro:0000000000219620                 dq offset aForce        ; "force"
.data.rel.ro:0000000000219628                 db    0
.data.rel.ro:0000000000219629                 db    0
.data.rel.ro:000000000021962A                 db    0
.data.rel.ro:000000000021962B                 db    0
.data.rel.ro:000000000021962C                 db    0
.data.rel.ro:000000000021962D                 db    0
.data.rel.ro:000000000021962E                 db    0
.data.rel.ro:000000000021962F                 db    0
.data.rel.ro:0000000000219630                 db    0
.data.rel.ro:0000000000219631                 db    0
.data.rel.ro:0000000000219632                 db    0
.data.rel.ro:0000000000219633                 db    0
.data.rel.ro:0000000000219634                 db    0
.data.rel.ro:0000000000219635                 db    0
.data.rel.ro:0000000000219636                 db    0
.data.rel.ro:0000000000219637                 db    0
.data.rel.ro:0000000000219638                 db  66h ; f
.data.rel.ro:0000000000219639                 db    0
.data.rel.ro:000000000021963A                 db    0
.data.rel.ro:000000000021963B                 db    0
.data.rel.ro:000000000021963C                 db    0
.data.rel.ro:000000000021963D                 db    0
.data.rel.ro:000000000021963E                 db    0
.data.rel.ro:000000000021963F                 db    0
.data.rel.ro:0000000000219640                 dq offset aInteractive  ; "interactive"
.data.rel.ro:0000000000219648                 db    0
.data.rel.ro:0000000000219649                 db    0
.data.rel.ro:000000000021964A                 db    0
.data.rel.ro:000000000021964B                 db    0
.data.rel.ro:000000000021964C                 db    0
.data.rel.ro:000000000021964D                 db    0
.data.rel.ro:000000000021964E                 db    0
.data.rel.ro:000000000021964F                 db    0
.data.rel.ro:0000000000219650                 db    0
.data.rel.ro:0000000000219651                 db    0
.data.rel.ro:0000000000219652                 db    0
.data.rel.ro:0000000000219653                 db    0
.data.rel.ro:0000000000219654                 db    0
.data.rel.ro:0000000000219655                 db    0
.data.rel.ro:0000000000219656                 db    0
.data.rel.ro:0000000000219657                 db    0
.data.rel.ro:0000000000219658                 db  69h ; i
.data.rel.ro:0000000000219659                 db    0
.data.rel.ro:000000000021965A                 db    0
.data.rel.ro:000000000021965B                 db    0
.data.rel.ro:000000000021965C                 db    0
.data.rel.ro:000000000021965D                 db    0
.data.rel.ro:000000000021965E                 db    0
.data.rel.ro:000000000021965F                 db    0
.data.rel.ro:0000000000219660                 dq offset aSymbolicLink+9 ; "link"
.data.rel.ro:0000000000219668                 db    0
.data.rel.ro:0000000000219669                 db    0
.data.rel.ro:000000000021966A                 db    0
.data.rel.ro:000000000021966B                 db    0
.data.rel.ro:000000000021966C                 db    0
.data.rel.ro:000000000021966D                 db    0
.data.rel.ro:000000000021966E                 db    0
.data.rel.ro:000000000021966F                 db    0
.data.rel.ro:0000000000219670                 db    0
.data.rel.ro:0000000000219671                 db    0
.data.rel.ro:0000000000219672                 db    0
.data.rel.ro:0000000000219673                 db    0
.data.rel.ro:0000000000219674                 db    0
.data.rel.ro:0000000000219675                 db    0
.data.rel.ro:0000000000219676                 db    0
.data.rel.ro:0000000000219677                 db    0
.data.rel.ro:0000000000219678                 db  6Ch ; l
.data.rel.ro:0000000000219679                 db    0
.data.rel.ro:000000000021967A                 db    0
.data.rel.ro:000000000021967B                 db    0
.data.rel.ro:000000000021967C                 db    0
.data.rel.ro:000000000021967D                 db    0
.data.rel.ro:000000000021967E                 db    0
.data.rel.ro:000000000021967F                 db    0
.data.rel.ro:0000000000219680                 dq offset aNoClobber    ; "no-clobber"
.data.rel.ro:0000000000219688                 db    0
.data.rel.ro:0000000000219689                 db    0
.data.rel.ro:000000000021968A                 db    0
.data.rel.ro:000000000021968B                 db    0
.data.rel.ro:000000000021968C                 db    0
.data.rel.ro:000000000021968D                 db    0
.data.rel.ro:000000000021968E                 db    0
.data.rel.ro:000000000021968F                 db    0
.data.rel.ro:0000000000219690                 db    0
.data.rel.ro:0000000000219691                 db    0
.data.rel.ro:0000000000219692                 db    0
.data.rel.ro:0000000000219693                 db    0
.data.rel.ro:0000000000219694                 db    0
.data.rel.ro:0000000000219695                 db    0
.data.rel.ro:0000000000219696                 db    0
.data.rel.ro:0000000000219697                 db    0
.data.rel.ro:0000000000219698                 db  6Eh ; n
.data.rel.ro:0000000000219699                 db    0
.data.rel.ro:000000000021969A                 db    0
.data.rel.ro:000000000021969B                 db    0
.data.rel.ro:000000000021969C                 db    0
.data.rel.ro:000000000021969D                 db    0
.data.rel.ro:000000000021969E                 db    0
.data.rel.ro:000000000021969F                 db    0
.data.rel.ro:00000000002196A0                 dq offset aNoDereference ; "no-dereference"
.data.rel.ro:00000000002196A8                 db    0
.data.rel.ro:00000000002196A9                 db    0
.data.rel.ro:00000000002196AA                 db    0
.data.rel.ro:00000000002196AB                 db    0
.data.rel.ro:00000000002196AC                 db    0
.data.rel.ro:00000000002196AD                 db    0
.data.rel.ro:00000000002196AE                 db    0
.data.rel.ro:00000000002196AF                 db    0
.data.rel.ro:00000000002196B0                 db    0
.data.rel.ro:00000000002196B1                 db    0
.data.rel.ro:00000000002196B2                 db    0
.data.rel.ro:00000000002196B3                 db    0
.data.rel.ro:00000000002196B4                 db    0
.data.rel.ro:00000000002196B5                 db    0
.data.rel.ro:00000000002196B6                 db    0
.data.rel.ro:00000000002196B7                 db    0
.data.rel.ro:00000000002196B8                 db  50h ; P
.data.rel.ro:00000000002196B9                 db    0
.data.rel.ro:00000000002196BA                 db    0
.data.rel.ro:00000000002196BB                 db    0
.data.rel.ro:00000000002196BC                 db    0
.data.rel.ro:00000000002196BD                 db    0
.data.rel.ro:00000000002196BE                 db    0
.data.rel.ro:00000000002196BF                 db    0
.data.rel.ro:00000000002196C0                 dq offset aNoPreserve+2 ; "no-preserve"
.data.rel.ro:00000000002196C8                 db    1
.data.rel.ro:00000000002196C9                 db    0
.data.rel.ro:00000000002196CA                 db    0
.data.rel.ro:00000000002196CB                 db    0
.data.rel.ro:00000000002196CC                 db    0
.data.rel.ro:00000000002196CD                 db    0
.data.rel.ro:00000000002196CE                 db    0
.data.rel.ro:00000000002196CF                 db    0
.data.rel.ro:00000000002196D0                 db    0
.data.rel.ro:00000000002196D1                 db    0
.data.rel.ro:00000000002196D2                 db    0
.data.rel.ro:00000000002196D3                 db    0
.data.rel.ro:00000000002196D4                 db    0
.data.rel.ro:00000000002196D5                 db    0
.data.rel.ro:00000000002196D6                 db    0
.data.rel.ro:00000000002196D7                 db    0
.data.rel.ro:00000000002196D8                 db  82h
.data.rel.ro:00000000002196D9                 db    0
.data.rel.ro:00000000002196DA                 db    0
.data.rel.ro:00000000002196DB                 db    0
.data.rel.ro:00000000002196DC                 db    0
.data.rel.ro:00000000002196DD                 db    0
.data.rel.ro:00000000002196DE                 db    0
.data.rel.ro:00000000002196DF                 db    0
.data.rel.ro:00000000002196E0                 dq offset aNoTargetDirect ; "no-target-directory"
.data.rel.ro:00000000002196E8                 db    0
.data.rel.ro:00000000002196E9                 db    0
.data.rel.ro:00000000002196EA                 db    0
.data.rel.ro:00000000002196EB                 db    0
.data.rel.ro:00000000002196EC                 db    0
.data.rel.ro:00000000002196ED                 db    0
.data.rel.ro:00000000002196EE                 db    0
.data.rel.ro:00000000002196EF                 db    0
.data.rel.ro:00000000002196F0                 db    0
.data.rel.ro:00000000002196F1                 db    0
.data.rel.ro:00000000002196F2                 db    0
.data.rel.ro:00000000002196F3                 db    0
.data.rel.ro:00000000002196F4                 db    0
.data.rel.ro:00000000002196F5                 db    0
.data.rel.ro:00000000002196F6                 db    0
.data.rel.ro:00000000002196F7                 db    0
.data.rel.ro:00000000002196F8                 db  54h ; T
.data.rel.ro:00000000002196F9                 db    0
.data.rel.ro:00000000002196FA                 db    0
.data.rel.ro:00000000002196FB                 db    0
.data.rel.ro:00000000002196FC                 db    0
.data.rel.ro:00000000002196FD                 db    0
.data.rel.ro:00000000002196FE                 db    0
.data.rel.ro:00000000002196FF                 db    0
.data.rel.ro:0000000000219700                 dq offset aOneFileSystem ; "one-file-system"
.data.rel.ro:0000000000219708                 db    0
.data.rel.ro:0000000000219709                 db    0
.data.rel.ro:000000000021970A                 db    0
.data.rel.ro:000000000021970B                 db    0
.data.rel.ro:000000000021970C                 db    0
.data.rel.ro:000000000021970D                 db    0
.data.rel.ro:000000000021970E                 db    0
.data.rel.ro:000000000021970F                 db    0
.data.rel.ro:0000000000219710                 db    0
.data.rel.ro:0000000000219711                 db    0
.data.rel.ro:0000000000219712                 db    0
.data.rel.ro:0000000000219713                 db    0
.data.rel.ro:0000000000219714                 db    0
.data.rel.ro:0000000000219715                 db    0
.data.rel.ro:0000000000219716                 db    0
.data.rel.ro:0000000000219717                 db    0
.data.rel.ro:0000000000219718                 db  78h ; x
.data.rel.ro:0000000000219719                 db    0
.data.rel.ro:000000000021971A                 db    0
.data.rel.ro:000000000021971B                 db    0
.data.rel.ro:000000000021971C                 db    0
.data.rel.ro:000000000021971D                 db    0
.data.rel.ro:000000000021971E                 db    0
.data.rel.ro:000000000021971F                 db    0
.data.rel.ro:0000000000219720                 dq offset aParents      ; "parents"
.data.rel.ro:0000000000219728                 db    0
.data.rel.ro:0000000000219729                 db    0
.data.rel.ro:000000000021972A                 db    0
.data.rel.ro:000000000021972B                 db    0
.data.rel.ro:000000000021972C                 db    0
.data.rel.ro:000000000021972D                 db    0
.data.rel.ro:000000000021972E                 db    0
.data.rel.ro:000000000021972F                 db    0
.data.rel.ro:0000000000219730                 db    0
.data.rel.ro:0000000000219731                 db    0
.data.rel.ro:0000000000219732                 db    0
.data.rel.ro:0000000000219733                 db    0
.data.rel.ro:0000000000219734                 db    0
.data.rel.ro:0000000000219735                 db    0
.data.rel.ro:0000000000219736                 db    0
.data.rel.ro:0000000000219737                 db    0
.data.rel.ro:0000000000219738                 db  83h
.data.rel.ro:0000000000219739                 db    0
.data.rel.ro:000000000021973A                 db    0
.data.rel.ro:000000000021973B                 db    0
.data.rel.ro:000000000021973C                 db    0
.data.rel.ro:000000000021973D                 db    0
.data.rel.ro:000000000021973E                 db    0
.data.rel.ro:000000000021973F                 db    0
.data.rel.ro:0000000000219740                 dq offset aPath         ; "path"
.data.rel.ro:0000000000219748                 db    0
.data.rel.ro:0000000000219749                 db    0
.data.rel.ro:000000000021974A                 db    0
.data.rel.ro:000000000021974B                 db    0
.data.rel.ro:000000000021974C                 db    0
.data.rel.ro:000000000021974D                 db    0
.data.rel.ro:000000000021974E                 db    0
.data.rel.ro:000000000021974F                 db    0
.data.rel.ro:0000000000219750                 db    0
.data.rel.ro:0000000000219751                 db    0
.data.rel.ro:0000000000219752                 db    0
.data.rel.ro:0000000000219753                 db    0
.data.rel.ro:0000000000219754                 db    0
.data.rel.ro:0000000000219755                 db    0
.data.rel.ro:0000000000219756                 db    0
.data.rel.ro:0000000000219757                 db    0
.data.rel.ro:0000000000219758                 db  83h
.data.rel.ro:0000000000219759                 db    0
.data.rel.ro:000000000021975A                 db    0
.data.rel.ro:000000000021975B                 db    0
.data.rel.ro:000000000021975C                 db    0
.data.rel.ro:000000000021975D                 db    0
.data.rel.ro:000000000021975E                 db    0
.data.rel.ro:000000000021975F                 db    0
.data.rel.ro:0000000000219760                 dq offset aPreserve+2   ; "preserve"
.data.rel.ro:0000000000219768                 db    2
.data.rel.ro:0000000000219769                 db    0
.data.rel.ro:000000000021976A                 db    0
.data.rel.ro:000000000021976B                 db    0
.data.rel.ro:000000000021976C                 db    0
.data.rel.ro:000000000021976D                 db    0
.data.rel.ro:000000000021976E                 db    0
.data.rel.ro:000000000021976F                 db    0
.data.rel.ro:0000000000219770                 db    0
.data.rel.ro:0000000000219771                 db    0
.data.rel.ro:0000000000219772                 db    0
.data.rel.ro:0000000000219773                 db    0
.data.rel.ro:0000000000219774                 db    0
.data.rel.ro:0000000000219775                 db    0
.data.rel.ro:0000000000219776                 db    0
.data.rel.ro:0000000000219777                 db    0
.data.rel.ro:0000000000219778                 db  84h
.data.rel.ro:0000000000219779                 db    0
.data.rel.ro:000000000021977A                 db    0
.data.rel.ro:000000000021977B                 db    0
.data.rel.ro:000000000021977C                 db    0
.data.rel.ro:000000000021977D                 db    0
.data.rel.ro:000000000021977E                 db    0
.data.rel.ro:000000000021977F                 db    0
.data.rel.ro:0000000000219780                 dq offset aRecursive    ; "recursive"
.data.rel.ro:0000000000219788                 db    0
.data.rel.ro:0000000000219789                 db    0
.data.rel.ro:000000000021978A                 db    0
.data.rel.ro:000000000021978B                 db    0
.data.rel.ro:000000000021978C                 db    0
.data.rel.ro:000000000021978D                 db    0
.data.rel.ro:000000000021978E                 db    0
.data.rel.ro:000000000021978F                 db    0
.data.rel.ro:0000000000219790                 db    0
.data.rel.ro:0000000000219791                 db    0
.data.rel.ro:0000000000219792                 db    0
.data.rel.ro:0000000000219793                 db    0
.data.rel.ro:0000000000219794                 db    0
.data.rel.ro:0000000000219795                 db    0
.data.rel.ro:0000000000219796                 db    0
.data.rel.ro:0000000000219797                 db    0
.data.rel.ro:0000000000219798                 db  52h ; R
.data.rel.ro:0000000000219799                 db    0
.data.rel.ro:000000000021979A                 db    0
.data.rel.ro:000000000021979B                 db    0
.data.rel.ro:000000000021979C                 db    0
.data.rel.ro:000000000021979D                 db    0
.data.rel.ro:000000000021979E                 db    0
.data.rel.ro:000000000021979F                 db    0
.data.rel.ro:00000000002197A0                 dq offset aRemoveDestinat ; "remove-destination"
.data.rel.ro:00000000002197A8                 db    0
.data.rel.ro:00000000002197A9                 db    0
.data.rel.ro:00000000002197AA                 db    0
.data.rel.ro:00000000002197AB                 db    0
.data.rel.ro:00000000002197AC                 db    0
.data.rel.ro:00000000002197AD                 db    0
.data.rel.ro:00000000002197AE                 db    0
.data.rel.ro:00000000002197AF                 db    0
.data.rel.ro:00000000002197B0                 db    0
.data.rel.ro:00000000002197B1                 db    0
.data.rel.ro:00000000002197B2                 db    0
.data.rel.ro:00000000002197B3                 db    0
.data.rel.ro:00000000002197B4                 db    0
.data.rel.ro:00000000002197B5                 db    0
.data.rel.ro:00000000002197B6                 db    0
.data.rel.ro:00000000002197B7                 db    0
.data.rel.ro:00000000002197B8                 db  88h
.data.rel.ro:00000000002197B9                 db    0
.data.rel.ro:00000000002197BA                 db    0
.data.rel.ro:00000000002197BB                 db    0
.data.rel.ro:00000000002197BC                 db    0
.data.rel.ro:00000000002197BD                 db    0
.data.rel.ro:00000000002197BE                 db    0
.data.rel.ro:00000000002197BF                 db    0
.data.rel.ro:00000000002197C0                 dq offset aSparse+2     ; "sparse"
.data.rel.ro:00000000002197C8                 db    1
.data.rel.ro:00000000002197C9                 db    0
.data.rel.ro:00000000002197CA                 db    0
.data.rel.ro:00000000002197CB                 db    0
.data.rel.ro:00000000002197CC                 db    0
.data.rel.ro:00000000002197CD                 db    0
.data.rel.ro:00000000002197CE                 db    0
.data.rel.ro:00000000002197CF                 db    0
.data.rel.ro:00000000002197D0                 db    0
.data.rel.ro:00000000002197D1                 db    0
.data.rel.ro:00000000002197D2                 db    0
.data.rel.ro:00000000002197D3                 db    0
.data.rel.ro:00000000002197D4                 db    0
.data.rel.ro:00000000002197D5                 db    0
.data.rel.ro:00000000002197D6                 db    0
.data.rel.ro:00000000002197D7                 db    0
.data.rel.ro:00000000002197D8                 db  86h
.data.rel.ro:00000000002197D9                 db    0
.data.rel.ro:00000000002197DA                 db    0
.data.rel.ro:00000000002197DB                 db    0
.data.rel.ro:00000000002197DC                 db    0
.data.rel.ro:00000000002197DD                 db    0
.data.rel.ro:00000000002197DE                 db    0
.data.rel.ro:00000000002197DF                 db    0
.data.rel.ro:00000000002197E0                 dq offset aReflink+2    ; "reflink"
.data.rel.ro:00000000002197E8                 db    2
.data.rel.ro:00000000002197E9                 db    0
.data.rel.ro:00000000002197EA                 db    0
.data.rel.ro:00000000002197EB                 db    0
.data.rel.ro:00000000002197EC                 db    0
.data.rel.ro:00000000002197ED                 db    0
.data.rel.ro:00000000002197EE                 db    0
.data.rel.ro:00000000002197EF                 db    0
.data.rel.ro:00000000002197F0                 db    0
.data.rel.ro:00000000002197F1                 db    0
.data.rel.ro:00000000002197F2                 db    0
.data.rel.ro:00000000002197F3                 db    0
.data.rel.ro:00000000002197F4                 db    0
.data.rel.ro:00000000002197F5                 db    0
.data.rel.ro:00000000002197F6                 db    0
.data.rel.ro:00000000002197F7                 db    0
.data.rel.ro:00000000002197F8                 db  85h
.data.rel.ro:00000000002197F9                 db    0
.data.rel.ro:00000000002197FA                 db    0
.data.rel.ro:00000000002197FB                 db    0
.data.rel.ro:00000000002197FC                 db    0
.data.rel.ro:00000000002197FD                 db    0
.data.rel.ro:00000000002197FE                 db    0
.data.rel.ro:00000000002197FF                 db    0
.data.rel.ro:0000000000219800                 dq offset aStripTrailingS ; "strip-trailing-slashes"
.data.rel.ro:0000000000219808                 db    0
.data.rel.ro:0000000000219809                 db    0
.data.rel.ro:000000000021980A                 db    0
.data.rel.ro:000000000021980B                 db    0
.data.rel.ro:000000000021980C                 db    0
.data.rel.ro:000000000021980D                 db    0
.data.rel.ro:000000000021980E                 db    0
.data.rel.ro:000000000021980F                 db    0
.data.rel.ro:0000000000219810                 db    0
.data.rel.ro:0000000000219811                 db    0
.data.rel.ro:0000000000219812                 db    0
.data.rel.ro:0000000000219813                 db    0
.data.rel.ro:0000000000219814                 db    0
.data.rel.ro:0000000000219815                 db    0
.data.rel.ro:0000000000219816                 db    0
.data.rel.ro:0000000000219817                 db    0
.data.rel.ro:0000000000219818                 db  87h
.data.rel.ro:0000000000219819                 db    0
.data.rel.ro:000000000021981A                 db    0
.data.rel.ro:000000000021981B                 db    0
.data.rel.ro:000000000021981C                 db    0
.data.rel.ro:000000000021981D                 db    0
.data.rel.ro:000000000021981E                 db    0
.data.rel.ro:000000000021981F                 db    0
.data.rel.ro:0000000000219820                 dq offset aSuffix       ; "suffix"
.data.rel.ro:0000000000219828                 db    1
.data.rel.ro:0000000000219829                 db    0
.data.rel.ro:000000000021982A                 db    0
.data.rel.ro:000000000021982B                 db    0
.data.rel.ro:000000000021982C                 db    0
.data.rel.ro:000000000021982D                 db    0
.data.rel.ro:000000000021982E                 db    0
.data.rel.ro:000000000021982F                 db    0
.data.rel.ro:0000000000219830                 db    0
.data.rel.ro:0000000000219831                 db    0
.data.rel.ro:0000000000219832                 db    0
.data.rel.ro:0000000000219833                 db    0
.data.rel.ro:0000000000219834                 db    0
.data.rel.ro:0000000000219835                 db    0
.data.rel.ro:0000000000219836                 db    0
.data.rel.ro:0000000000219837                 db    0
.data.rel.ro:0000000000219838                 db  53h ; S
.data.rel.ro:0000000000219839                 db    0
.data.rel.ro:000000000021983A                 db    0
.data.rel.ro:000000000021983B                 db    0
.data.rel.ro:000000000021983C                 db    0
.data.rel.ro:000000000021983D                 db    0
.data.rel.ro:000000000021983E                 db    0
.data.rel.ro:000000000021983F                 db    0
.data.rel.ro:0000000000219840                 dq offset aSymbolicLink ; "symbolic-link"
.data.rel.ro:0000000000219848                 db    0
.data.rel.ro:0000000000219849                 db    0
.data.rel.ro:000000000021984A                 db    0
.data.rel.ro:000000000021984B                 db    0
.data.rel.ro:000000000021984C                 db    0
.data.rel.ro:000000000021984D                 db    0
.data.rel.ro:000000000021984E                 db    0
.data.rel.ro:000000000021984F                 db    0
.data.rel.ro:0000000000219850                 db    0
.data.rel.ro:0000000000219851                 db    0
.data.rel.ro:0000000000219852                 db    0
.data.rel.ro:0000000000219853                 db    0
.data.rel.ro:0000000000219854                 db    0
.data.rel.ro:0000000000219855                 db    0
.data.rel.ro:0000000000219856                 db    0
.data.rel.ro:0000000000219857                 db    0
.data.rel.ro:0000000000219858                 db  73h ; s
.data.rel.ro:0000000000219859                 db    0
.data.rel.ro:000000000021985A                 db    0
.data.rel.ro:000000000021985B                 db    0
.data.rel.ro:000000000021985C                 db    0
.data.rel.ro:000000000021985D                 db    0
.data.rel.ro:000000000021985E                 db    0
.data.rel.ro:000000000021985F                 db    0
.data.rel.ro:0000000000219860                 dq offset aNoTargetDirect+3 ; "target-directory"
.data.rel.ro:0000000000219868                 db    1
.data.rel.ro:0000000000219869                 db    0
.data.rel.ro:000000000021986A                 db    0
.data.rel.ro:000000000021986B                 db    0
.data.rel.ro:000000000021986C                 db    0
.data.rel.ro:000000000021986D                 db    0
.data.rel.ro:000000000021986E                 db    0
.data.rel.ro:000000000021986F                 db    0
.data.rel.ro:0000000000219870                 db    0
.data.rel.ro:0000000000219871                 db    0
.data.rel.ro:0000000000219872                 db    0
.data.rel.ro:0000000000219873                 db    0
.data.rel.ro:0000000000219874                 db    0
.data.rel.ro:0000000000219875                 db    0
.data.rel.ro:0000000000219876                 db    0
.data.rel.ro:0000000000219877                 db    0
.data.rel.ro:0000000000219878                 db  74h ; t
.data.rel.ro:0000000000219879                 db    0
.data.rel.ro:000000000021987A                 db    0
.data.rel.ro:000000000021987B                 db    0
.data.rel.ro:000000000021987C                 db    0
.data.rel.ro:000000000021987D                 db    0
.data.rel.ro:000000000021987E                 db    0
.data.rel.ro:000000000021987F                 db    0
.data.rel.ro:0000000000219880                 dq offset aUpdate       ; "update"
.data.rel.ro:0000000000219888                 db    0
.data.rel.ro:0000000000219889                 db    0
.data.rel.ro:000000000021988A                 db    0
.data.rel.ro:000000000021988B                 db    0
.data.rel.ro:000000000021988C                 db    0
.data.rel.ro:000000000021988D                 db    0
.data.rel.ro:000000000021988E                 db    0
.data.rel.ro:000000000021988F                 db    0
.data.rel.ro:0000000000219890                 db    0
.data.rel.ro:0000000000219891                 db    0
.data.rel.ro:0000000000219892                 db    0
.data.rel.ro:0000000000219893                 db    0
.data.rel.ro:0000000000219894                 db    0
.data.rel.ro:0000000000219895                 db    0
.data.rel.ro:0000000000219896                 db    0
.data.rel.ro:0000000000219897                 db    0
.data.rel.ro:0000000000219898                 db  75h ; u
.data.rel.ro:0000000000219899                 db    0
.data.rel.ro:000000000021989A                 db    0
.data.rel.ro:000000000021989B                 db    0
.data.rel.ro:000000000021989C                 db    0
.data.rel.ro:000000000021989D                 db    0
.data.rel.ro:000000000021989E                 db    0
.data.rel.ro:000000000021989F                 db    0
.data.rel.ro:00000000002198A0                 dq offset aVerbose      ; "verbose"
.data.rel.ro:00000000002198A8                 db    0
.data.rel.ro:00000000002198A9                 db    0
.data.rel.ro:00000000002198AA                 db    0
.data.rel.ro:00000000002198AB                 db    0
.data.rel.ro:00000000002198AC                 db    0
.data.rel.ro:00000000002198AD                 db    0
.data.rel.ro:00000000002198AE                 db    0
.data.rel.ro:00000000002198AF                 db    0
.data.rel.ro:00000000002198B0                 db    0
.data.rel.ro:00000000002198B1                 db    0
.data.rel.ro:00000000002198B2                 db    0
.data.rel.ro:00000000002198B3                 db    0
.data.rel.ro:00000000002198B4                 db    0
.data.rel.ro:00000000002198B5                 db    0
.data.rel.ro:00000000002198B6                 db    0
.data.rel.ro:00000000002198B7                 db    0
.data.rel.ro:00000000002198B8                 db  76h ; v
.data.rel.ro:00000000002198B9                 db    0
.data.rel.ro:00000000002198BA                 db    0
.data.rel.ro:00000000002198BB                 db    0
.data.rel.ro:00000000002198BC                 db    0
.data.rel.ro:00000000002198BD                 db    0
.data.rel.ro:00000000002198BE                 db    0
.data.rel.ro:00000000002198BF                 db    0
.data.rel.ro:00000000002198C0                 dq offset aContext      ; "context"
.data.rel.ro:00000000002198C8                 db    2
.data.rel.ro:00000000002198C9                 db    0
.data.rel.ro:00000000002198CA                 db    0
.data.rel.ro:00000000002198CB                 db    0
.data.rel.ro:00000000002198CC                 db    0
.data.rel.ro:00000000002198CD                 db    0
.data.rel.ro:00000000002198CE                 db    0
.data.rel.ro:00000000002198CF                 db    0
.data.rel.ro:00000000002198D0                 db    0
.data.rel.ro:00000000002198D1                 db    0
.data.rel.ro:00000000002198D2                 db    0
.data.rel.ro:00000000002198D3                 db    0
.data.rel.ro:00000000002198D4                 db    0
.data.rel.ro:00000000002198D5                 db    0
.data.rel.ro:00000000002198D6                 db    0
.data.rel.ro:00000000002198D7                 db    0
.data.rel.ro:00000000002198D8                 db  5Ah ; Z
.data.rel.ro:00000000002198D9                 db    0
.data.rel.ro:00000000002198DA                 db    0
.data.rel.ro:00000000002198DB                 db    0
.data.rel.ro:00000000002198DC                 db    0
.data.rel.ro:00000000002198DD                 db    0
.data.rel.ro:00000000002198DE                 db    0
.data.rel.ro:00000000002198DF                 db    0
.data.rel.ro:00000000002198E0                 dq offset aHelp         ; "help"
.data.rel.ro:00000000002198E8                 db    0
.data.rel.ro:00000000002198E9                 db    0
.data.rel.ro:00000000002198EA                 db    0
.data.rel.ro:00000000002198EB                 db    0
.data.rel.ro:00000000002198EC                 db    0
.data.rel.ro:00000000002198ED                 db    0
.data.rel.ro:00000000002198EE                 db    0
.data.rel.ro:00000000002198EF                 db    0
.data.rel.ro:00000000002198F0                 db    0
.data.rel.ro:00000000002198F1                 db    0
.data.rel.ro:00000000002198F2                 db    0
.data.rel.ro:00000000002198F3                 db    0
.data.rel.ro:00000000002198F4                 db    0
.data.rel.ro:00000000002198F5                 db    0
.data.rel.ro:00000000002198F6                 db    0
.data.rel.ro:00000000002198F7                 db    0
.data.rel.ro:00000000002198F8                 db  7Eh ; ~
.data.rel.ro:00000000002198F9                 db 0FFh
.data.rel.ro:00000000002198FA                 db 0FFh
.data.rel.ro:00000000002198FB                 db 0FFh
.data.rel.ro:00000000002198FC                 db    0
.data.rel.ro:00000000002198FD                 db    0
.data.rel.ro:00000000002198FE                 db    0
.data.rel.ro:00000000002198FF                 db    0
.data.rel.ro:0000000000219900                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000219908                 db    0
.data.rel.ro:0000000000219909                 db    0
.data.rel.ro:000000000021990A                 db    0
.data.rel.ro:000000000021990B                 db    0
.data.rel.ro:000000000021990C                 db    0
.data.rel.ro:000000000021990D                 db    0
.data.rel.ro:000000000021990E                 db    0
.data.rel.ro:000000000021990F                 db    0
.data.rel.ro:0000000000219910                 db    0
.data.rel.ro:0000000000219911                 db    0
.data.rel.ro:0000000000219912                 db    0
.data.rel.ro:0000000000219913                 db    0
.data.rel.ro:0000000000219914                 db    0
.data.rel.ro:0000000000219915                 db    0
.data.rel.ro:0000000000219916                 db    0
.data.rel.ro:0000000000219917                 db    0
.data.rel.ro:0000000000219918                 db  7Dh ; }
.data.rel.ro:0000000000219919                 db 0FFh
.data.rel.ro:000000000021991A                 db 0FFh
.data.rel.ro:000000000021991B                 db 0FFh
.data.rel.ro:000000000021991C                 db    0
.data.rel.ro:000000000021991D                 db    0
.data.rel.ro:000000000021991E                 db    0
.data.rel.ro:000000000021991F                 db    0
.data.rel.ro:0000000000219920                 db    0
.data.rel.ro:0000000000219921                 db    0
.data.rel.ro:0000000000219922                 db    0
.data.rel.ro:0000000000219923                 db    0
.data.rel.ro:0000000000219924                 db    0
.data.rel.ro:0000000000219925                 db    0
.data.rel.ro:0000000000219926                 db    0
.data.rel.ro:0000000000219927                 db    0
.data.rel.ro:0000000000219928                 db    0
.data.rel.ro:0000000000219929                 db    0
.data.rel.ro:000000000021992A                 db    0
.data.rel.ro:000000000021992B                 db    0
.data.rel.ro:000000000021992C                 db    0
.data.rel.ro:000000000021992D                 db    0
.data.rel.ro:000000000021992E                 db    0
.data.rel.ro:000000000021992F                 db    0
.data.rel.ro:0000000000219930                 db    0
.data.rel.ro:0000000000219931                 db    0
.data.rel.ro:0000000000219932                 db    0
.data.rel.ro:0000000000219933                 db    0
.data.rel.ro:0000000000219934                 db    0
.data.rel.ro:0000000000219935                 db    0
.data.rel.ro:0000000000219936                 db    0
.data.rel.ro:0000000000219937                 db    0
.data.rel.ro:0000000000219938                 db    0
.data.rel.ro:0000000000219939                 db    0
.data.rel.ro:000000000021993A                 db    0
.data.rel.ro:000000000021993B                 db    0
.data.rel.ro:000000000021993C                 db    0
.data.rel.ro:000000000021993D                 db    0
.data.rel.ro:000000000021993E                 db    0
.data.rel.ro:000000000021993F                 db    0
.data.rel.ro:0000000000219940 reflink_type_string dq offset aAuto     ; DATA XREF: main+3C9↑o
.data.rel.ro:0000000000219940                                         ; "auto"
.data.rel.ro:0000000000219948                 dq offset aShellEscapeAlw+0Dh ; "always"
.data.rel.ro:0000000000219950                 dq offset aNever        ; "never"
.data.rel.ro:0000000000219958                 align 20h
.data.rel.ro:0000000000219960 sparse_type_string dq offset aNever     ; DATA XREF: main+37F↑o
.data.rel.ro:0000000000219960                                         ; "never"
.data.rel.ro:0000000000219968                 dq offset aAuto         ; "auto"
.data.rel.ro:0000000000219970                 dq offset aShellEscapeAlw+0Dh ; "always"
.data.rel.ro:0000000000219978                 align 20h
.data.rel.ro:0000000000219980 backup_args     dq offset aNone         ; DATA XREF: get_version_part_0+B↑o
.data.rel.ro:0000000000219980                                         ; "none"
.data.rel.ro:0000000000219988                 dq offset aOff          ; "off"
.data.rel.ro:0000000000219990                 dq offset aSimple       ; "simple"
.data.rel.ro:0000000000219998                 dq offset aNever        ; "never"
.data.rel.ro:00000000002199A0                 dq offset aExisting     ; "existing"
.data.rel.ro:00000000002199A8                 dq offset aNil          ; "nil"
.data.rel.ro:00000000002199B0                 dq offset aNumbered     ; "numbered"
.data.rel.ro:00000000002199B8                 dq offset aContext+6    ; "t"
.data.rel.ro:00000000002199C0                 db    0
.data.rel.ro:00000000002199C1                 db    0
.data.rel.ro:00000000002199C2                 db    0
.data.rel.ro:00000000002199C3                 db    0
.data.rel.ro:00000000002199C4                 db    0
.data.rel.ro:00000000002199C5                 db    0
.data.rel.ro:00000000002199C6                 db    0
.data.rel.ro:00000000002199C7                 db    0
.data.rel.ro:00000000002199C8                 db    0
.data.rel.ro:00000000002199C9                 db    0
.data.rel.ro:00000000002199CA                 db    0
.data.rel.ro:00000000002199CB                 db    0
.data.rel.ro:00000000002199CC                 db    0
.data.rel.ro:00000000002199CD                 db    0
.data.rel.ro:00000000002199CE                 db    0
.data.rel.ro:00000000002199CF                 db    0
.data.rel.ro:00000000002199D0                 db    0
.data.rel.ro:00000000002199D1                 db    0
.data.rel.ro:00000000002199D2                 db    0
.data.rel.ro:00000000002199D3                 db    0
.data.rel.ro:00000000002199D4                 db    0
.data.rel.ro:00000000002199D5                 db    0
.data.rel.ro:00000000002199D6                 db    0
.data.rel.ro:00000000002199D7                 db    0
.data.rel.ro:00000000002199D8                 db    0
.data.rel.ro:00000000002199D9                 db    0
.data.rel.ro:00000000002199DA                 db    0
.data.rel.ro:00000000002199DB                 db    0
.data.rel.ro:00000000002199DC                 db    0
.data.rel.ro:00000000002199DD                 db    0
.data.rel.ro:00000000002199DE                 db    0
.data.rel.ro:00000000002199DF                 db    0
.data.rel.ro:00000000002199E0                 public quoting_style_args
.data.rel.ro:00000000002199E0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:00000000002199E8                 dq offset aShell        ; "shell"
.data.rel.ro:00000000002199F0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:00000000002199F8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000219A00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000219A08                 dq offset file+1Bh      ; "c"
.data.rel.ro:0000000000219A10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000219A18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000219A20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000219A28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000219A30                 align 20h
.data.rel.ro:0000000000219A40 comparison_function_table db    0       ; DATA XREF: streamsavedir+2↑o
.data.rel.ro:0000000000219A41                 db    0
.data.rel.ro:0000000000219A42                 db    0
.data.rel.ro:0000000000219A43                 db    0
.data.rel.ro:0000000000219A44                 db    0
.data.rel.ro:0000000000219A45                 db    0
.data.rel.ro:0000000000219A46                 db    0
.data.rel.ro:0000000000219A47                 db    0
.data.rel.ro:0000000000219A48                 dq offset direntry_cmp_name
.data.rel.ro:0000000000219A50                 dq offset direntry_cmp_inode
.data.rel.ro:0000000000219A50 _data_rel_ro    ends
.data.rel.ro:0000000000219A50
LOAD:0000000000219A58 ; ELF Dynamic Information
LOAD:0000000000219A58 ; ===========================================================================
LOAD:0000000000219A58
LOAD:0000000000219A58 ; Segment type: Pure data
LOAD:0000000000219A58 ; Segment permissions: Read/Write
LOAD:0000000000219A58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000219A58                 assume cs:LOAD
LOAD:0000000000219A58                 ;org 219A58h
LOAD:0000000000219A58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000219A58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000219A58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000219A68                 Elf64_Dyn <0Ch, 2710h>  ; DT_INIT
LOAD:0000000000219A78                 Elf64_Dyn <0Dh, 128C0h> ; DT_FINI
LOAD:0000000000219A88                 Elf64_Dyn <19h, 219530h> ; DT_INIT_ARRAY
LOAD:0000000000219A98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000219AA8                 Elf64_Dyn <1Ah, 219538h> ; DT_FINI_ARRAY
LOAD:0000000000219AB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000219AC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000219AD8                 Elf64_Dyn <5, 0E98h>    ; DT_STRTAB
LOAD:0000000000219AE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000219AF8                 Elf64_Dyn <0Ah, 4F0h>   ; DT_STRSZ
LOAD:0000000000219B08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000219B18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000219B28                 Elf64_Dyn <3, 219C48h>  ; DT_PLTGOT
LOAD:0000000000219B38                 Elf64_Dyn <2, 0A38h>    ; DT_PLTRELSZ
LOAD:0000000000219B48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000219B58                 Elf64_Dyn <17h, 1CD8h>  ; DT_JMPREL
LOAD:0000000000219B68                 Elf64_Dyn <7, 1528h>    ; DT_RELA
LOAD:0000000000219B78                 Elf64_Dyn <8, 7B0h>     ; DT_RELASZ
LOAD:0000000000219B88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000219B98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000219BA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000219BB8                 Elf64_Dyn <6FFFFFFEh, 1488h> ; DT_VERNEED
LOAD:0000000000219BC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000219BD8                 Elf64_Dyn <6FFFFFF0h, 1388h> ; DT_VERSYM
LOAD:0000000000219BE8                 Elf64_Dyn <6FFFFFF9h, 45h> ; DT_RELACOUNT
LOAD:0000000000219BF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000219C08                 db    0
LOAD:0000000000219C09                 db    0
LOAD:0000000000219C0A                 db    0
LOAD:0000000000219C0B                 db    0
LOAD:0000000000219C0C                 db    0
LOAD:0000000000219C0D                 db    0
LOAD:0000000000219C0E                 db    0
LOAD:0000000000219C0F                 db    0
LOAD:0000000000219C10                 db    0
LOAD:0000000000219C11                 db    0
LOAD:0000000000219C12                 db    0
LOAD:0000000000219C13                 db    0
LOAD:0000000000219C14                 db    0
LOAD:0000000000219C15                 db    0
LOAD:0000000000219C16                 db    0
LOAD:0000000000219C17                 db    0
LOAD:0000000000219C18                 db    0
LOAD:0000000000219C19                 db    0
LOAD:0000000000219C1A                 db    0
LOAD:0000000000219C1B                 db    0
LOAD:0000000000219C1C                 db    0
LOAD:0000000000219C1D                 db    0
LOAD:0000000000219C1E                 db    0
LOAD:0000000000219C1F                 db    0
LOAD:0000000000219C20                 db    0
LOAD:0000000000219C21                 db    0
LOAD:0000000000219C22                 db    0
LOAD:0000000000219C23                 db    0
LOAD:0000000000219C24                 db    0
LOAD:0000000000219C25                 db    0
LOAD:0000000000219C26                 db    0
LOAD:0000000000219C27                 db    0
LOAD:0000000000219C28                 db    0
LOAD:0000000000219C29                 db    0
LOAD:0000000000219C2A                 db    0
LOAD:0000000000219C2B                 db    0
LOAD:0000000000219C2C                 db    0
LOAD:0000000000219C2D                 db    0
LOAD:0000000000219C2E                 db    0
LOAD:0000000000219C2F                 db    0
LOAD:0000000000219C30                 db    0
LOAD:0000000000219C31                 db    0
LOAD:0000000000219C32                 db    0
LOAD:0000000000219C33                 db    0
LOAD:0000000000219C34                 db    0
LOAD:0000000000219C35                 db    0
LOAD:0000000000219C36                 db    0
LOAD:0000000000219C37                 db    0
LOAD:0000000000219C38                 db    0
LOAD:0000000000219C39                 db    0
LOAD:0000000000219C3A                 db    0
LOAD:0000000000219C3B                 db    0
LOAD:0000000000219C3C                 db    0
LOAD:0000000000219C3D                 db    0
LOAD:0000000000219C3E                 db    0
LOAD:0000000000219C3F                 db    0
LOAD:0000000000219C40                 db    0
LOAD:0000000000219C41                 db    0
LOAD:0000000000219C42                 db    0
LOAD:0000000000219C43                 db    0
LOAD:0000000000219C44                 db    0
LOAD:0000000000219C45                 db    0
LOAD:0000000000219C46                 db    0
LOAD:0000000000219C47                 db    0
LOAD:0000000000219C47 LOAD            ends
LOAD:0000000000219C47
.got:0000000000219C48 ; ===========================================================================
.got:0000000000219C48
.got:0000000000219C48 ; Segment type: Pure data
.got:0000000000219C48 ; Segment permissions: Read/Write
.got:0000000000219C48 _got            segment qword public 'DATA' use64
.got:0000000000219C48                 assume cs:_got
.got:0000000000219C48                 ;org 219C48h
.got:0000000000219C48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000219C50 qword_219C50    dq 0                    ; DATA XREF: sub_2730↑r
.got:0000000000219C58 qword_219C58    dq 0                    ; DATA XREF: sub_2730+6↑r
.got:0000000000219C60 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000219C68 utimensat_ptr   dq offset utimensat     ; DATA XREF: _utimensat↑r
.got:0000000000219C70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000219C78 __errno_location_ptr dq offset __errno_location
.got:0000000000219C78                                         ; DATA XREF: ___errno_location↑r
.got:0000000000219C80 unlink_ptr      dq offset unlink        ; DATA XREF: _unlink↑r
.got:0000000000219C88 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000219C90 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000219C98 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:0000000000219CA0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000219CA8 __read_chk_ptr  dq offset __read_chk    ; DATA XREF: ___read_chk↑r
.got:0000000000219CB0 mkdir_ptr       dq offset mkdir         ; DATA XREF: _mkdir↑r
.got:0000000000219CB8 unlinkat_ptr    dq offset unlinkat      ; DATA XREF: _unlinkat↑r
.got:0000000000219CC0 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:0000000000219CC8 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:0000000000219CD0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000219CD8 clock_gettime_ptr dq offset clock_gettime
.got:0000000000219CD8                                         ; DATA XREF: _clock_gettime↑r
.got:0000000000219CE0 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:0000000000219CE8 getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
.got:0000000000219CF0 fread_unlocked_ptr dq offset fread_unlocked
.got:0000000000219CF0                                         ; DATA XREF: _fread_unlocked↑r
.got:0000000000219CF8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000219D00 pathconf_ptr    dq offset pathconf      ; DATA XREF: _pathconf↑r
.got:0000000000219D08 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000219D10 opendir_ptr     dq offset opendir       ; DATA XREF: _opendir↑r
.got:0000000000219D18 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000219D18                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000219D20 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:0000000000219D28 rmdir_ptr       dq offset rmdir         ; DATA XREF: _rmdir↑r
.got:0000000000219D30 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000219D38 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000219D38                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000219D40 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000219D48 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000219D50 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:0000000000219D58 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000219D58                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000219D60 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:0000000000219D68 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000219D70 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000219D78 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000219D80 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:0000000000219D88 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000219D90 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000219D98 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:0000000000219DA0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000219DA8 gettimeofday_ptr dq offset gettimeofday ; DATA XREF: _gettimeofday↑r
.got:0000000000219DB0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000219DB0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000219DB8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000219DC0 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:0000000000219DC8 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:0000000000219DD0 canonicalize_file_name_ptr dq offset canonicalize_file_name
.got:0000000000219DD0                                         ; DATA XREF: _canonicalize_file_name↑r
.got:0000000000219DD8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000219DE0 rewinddir_ptr   dq offset rewinddir     ; DATA XREF: _rewinddir↑r
.got:0000000000219DE8 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000219DF0 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:0000000000219DF8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000219DF8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000219E00 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000219E08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000219E10 fallocate_ptr   dq offset fallocate     ; DATA XREF: _fallocate↑r
.got:0000000000219E18 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000219E18                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000219E20 utimes_ptr      dq offset utimes        ; DATA XREF: _utimes↑r
.got:0000000000219E28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000219E30 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:0000000000219E38 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000219E40 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:0000000000219E48 fpathconf_ptr   dq offset fpathconf     ; DATA XREF: _fpathconf↑r
.got:0000000000219E50 rpmatch_ptr     dq offset rpmatch       ; DATA XREF: _rpmatch↑r
.got:0000000000219E58 syscall_ptr     dq offset syscall       ; DATA XREF: _syscall↑r
.got:0000000000219E60 mkfifo_ptr      dq offset mkfifo        ; DATA XREF: _mkfifo↑r
.got:0000000000219E68 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:0000000000219E70 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000219E78 __xmknod_ptr    dq offset __xmknod      ; DATA XREF: ___xmknod↑r
.got:0000000000219E80 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000219E88 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:0000000000219E90 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000219E98 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:0000000000219EA0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000219EA8 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000219EB0 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000219EB8 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000219EC0 lchown_ptr      dq offset lchown        ; DATA XREF: _lchown↑r
.got:0000000000219EC8 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000219ED0 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000219ED8 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:0000000000219EE0 linkat_ptr      dq offset linkat        ; DATA XREF: _linkat↑r
.got:0000000000219EE8 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000219EF0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000219EF8 fchmod_ptr      dq offset fchmod        ; DATA XREF: _fchmod↑r
.got:0000000000219F00 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:0000000000219F08 chmod_ptr       dq offset chmod         ; DATA XREF: _chmod↑r
.got:0000000000219F10 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:0000000000219F18 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000219F20 __explicit_bzero_chk_ptr dq offset __explicit_bzero_chk
.got:0000000000219F20                                         ; DATA XREF: ___explicit_bzero_chk↑r
.got:0000000000219F28 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000219F30 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000219F38 fchown_ptr      dq offset fchown        ; DATA XREF: _fchown↑r
.got:0000000000219F40 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000219F48 rename_ptr      dq offset rename        ; DATA XREF: _rename↑r
.got:0000000000219F50 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:0000000000219F58 futimens_ptr    dq offset futimens      ; DATA XREF: _futimens↑r
.got:0000000000219F60 euidaccess_ptr  dq offset euidaccess    ; DATA XREF: _euidaccess↑r
.got:0000000000219F68 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000219F70 renameat_ptr    dq offset renameat      ; DATA XREF: _renameat↑r
.got:0000000000219F78 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:0000000000219F80 getppid_ptr     dq offset getppid       ; DATA XREF: _getppid↑r
.got:0000000000219F88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000219F90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000219F98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000219F98                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000219FA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000219FA8 symlinkat_ptr   dq offset symlinkat     ; DATA XREF: _symlinkat↑r
.got:0000000000219FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000219FB8 futimesat_ptr   dq offset futimesat     ; DATA XREF: _futimesat↑r
.got:0000000000219FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000219FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000219FC8 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:0000000000219FC8                                         ; utimecmpat:loc_FFE0↑r
.got:0000000000219FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000219FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000219FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000219FD8                                         ; DATA XREF: start+24↑r
.got:0000000000219FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000219FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000219FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000219FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000219FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000219FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000219FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000219FF0 _got            ends
.got:0000000000219FF0
LOAD:0000000000219FF8 ; ===========================================================================
LOAD:0000000000219FF8
LOAD:0000000000219FF8 ; Segment type: Pure data
LOAD:0000000000219FF8 ; Segment permissions: Read/Write
LOAD:0000000000219FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000219FF8                 assume cs:LOAD
LOAD:0000000000219FF8                 ;org 219FF8h
LOAD:0000000000219FF8                 align 20h
LOAD:0000000000219FF8 LOAD            ends
LOAD:0000000000219FF8
.data:000000000021A000 ; ===========================================================================
.data:000000000021A000
.data:000000000021A000 ; Segment type: Pure data
.data:000000000021A000 ; Segment permissions: Read/Write
.data:000000000021A000 _data           segment align_32 public 'DATA' use64
.data:000000000021A000                 assume cs:_data
.data:000000000021A000                 ;org 21A000h
.data:000000000021A000                 public __data_start ; weak
.data:000000000021A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000021A000                                         ; data_start
.data:000000000021A001                 db    0
.data:000000000021A002                 db    0
.data:000000000021A003                 db    0
.data:000000000021A004                 db    0
.data:000000000021A005                 db    0
.data:000000000021A006                 db    0
.data:000000000021A007                 db    0
.data:000000000021A008                 public __dso_handle
.data:000000000021A008 ; void *_dso_handle
.data:000000000021A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000021A008                                         ; atexit↑r ...
.data:000000000021A010 mask_7898       dd 0FFFFFFFFh           ; DATA XREF: cached_umask+1↑r
.data:000000000021A010                                         ; cached_umask+1B↑w
.data:000000000021A014                 align 8
.data:000000000021A018 ; size_t nz_7571
.data:000000000021A018 nz_7571         dq 20000h               ; DATA XREF: write_zeros:loc_4D65↑r
.data:000000000021A018                                         ; write_zeros+36↑r ...
.data:000000000021A020                 public Version
.data:000000000021A020 Version         dq offset a831          ; DATA XREF: main+327↑r
.data:000000000021A020                                         ; "8.31"
.data:000000000021A028                 public argmatch_die
.data:000000000021A028 argmatch_die    dq offset __argmatch_die
.data:000000000021A028                                         ; DATA XREF: main:loc_31E1↑r
.data:000000000021A028                                         ; main+3C2↑r ...
.data:000000000021A030                 public exit_failure
.data:000000000021A030 ; int exit_failure
.data:000000000021A030 exit_failure    dd 1                    ; DATA XREF: close_stdin+A8↑r
.data:000000000021A030                                         ; close_stdout:loc_B482↑r ...
.data:000000000021A034                 align 20h
.data:000000000021A040                 public quote_quoting_options
.data:000000000021A040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000021A040                                         ; quote_mem↑o ...
.data:000000000021A041                 db    0
.data:000000000021A042                 db    0
.data:000000000021A043                 db    0
.data:000000000021A044                 db    0
.data:000000000021A045                 db    0
.data:000000000021A046                 db    0
.data:000000000021A047                 db    0
.data:000000000021A048                 db    0
.data:000000000021A049                 db    0
.data:000000000021A04A                 db    0
.data:000000000021A04B                 db    0
.data:000000000021A04C                 db    0
.data:000000000021A04D                 db    0
.data:000000000021A04E                 db    0
.data:000000000021A04F                 db    0
.data:000000000021A050                 db    0
.data:000000000021A051                 db    0
.data:000000000021A052                 db    0
.data:000000000021A053                 db    0
.data:000000000021A054                 db    0
.data:000000000021A055                 db    0
.data:000000000021A056                 db    0
.data:000000000021A057                 db    0
.data:000000000021A058                 db    0
.data:000000000021A059                 db    0
.data:000000000021A05A                 db    0
.data:000000000021A05B                 db    0
.data:000000000021A05C                 db    0
.data:000000000021A05D                 db    0
.data:000000000021A05E                 db    0
.data:000000000021A05F                 db    0
.data:000000000021A060                 db    0
.data:000000000021A061                 db    0
.data:000000000021A062                 db    0
.data:000000000021A063                 db    0
.data:000000000021A064                 db    0
.data:000000000021A065                 db    0
.data:000000000021A066                 db    0
.data:000000000021A067                 db    0
.data:000000000021A068                 db    0
.data:000000000021A069                 db    0
.data:000000000021A06A                 db    0
.data:000000000021A06B                 db    0
.data:000000000021A06C                 db    0
.data:000000000021A06D                 db    0
.data:000000000021A06E                 db    0
.data:000000000021A06F                 db    0
.data:000000000021A070                 db    0
.data:000000000021A071                 db    0
.data:000000000021A072                 db    0
.data:000000000021A073                 db    0
.data:000000000021A074                 db    0
.data:000000000021A075                 db    0
.data:000000000021A076                 db    0
.data:000000000021A077                 db    0
.data:000000000021A078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000021A078                                         ; quotearg_n_options:loc_E4BD↑r ...
.data:000000000021A07C                 align 20h
.data:000000000021A080 ; void *slotvec
.data:000000000021A080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000021A080                                         ; quotearg_n_options+76↑w ...
.data:000000000021A088                 align 10h
.data:000000000021A090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000021A090                                         ; quotearg_n_options+187↑r ...
.data:000000000021A098 off_21A098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000021A098 _data           ends
.data:000000000021A098
.bss:000000000021A0A0 ; ===========================================================================
.bss:000000000021A0A0
.bss:000000000021A0A0 ; Segment type: Uninitialized
.bss:000000000021A0A0 ; Segment permissions: Read/Write
.bss:000000000021A0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000021A0A0                 assume cs:_bss
.bss:000000000021A0A0                 ;org 21A0A0h
.bss:000000000021A0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000021A0A0                 public __bss_start ; weak
.bss:000000000021A0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000DD8↑o
.bss:000000000021A0A0                                         ; LOAD:0000000000000E38↑o ...
.bss:000000000021A0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000021A0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000021A0A0                                         ; _edata
.bss:000000000021A0A0                                         ; Copy of shared data
.bss:000000000021A0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000021A0A8 ; FILE *stdout
.bss:000000000021A0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000DC0↑o
.bss:000000000021A0A8                                         ; main+320↑r ...
.bss:000000000021A0A8                                         ; Alternative name is 'stdout'
.bss:000000000021A0A8                                         ; Copy of shared data
.bss:000000000021A0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000021A0B0 ; FILE *stdin
.bss:000000000021A0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000DF0↑o
.bss:000000000021A0B0                                         ; close_stdin+4↑r ...
.bss:000000000021A0B0                                         ; Alternative name is 'stdin'
.bss:000000000021A0B0                                         ; Copy of shared data
.bss:000000000021A0B8                 public optind@@GLIBC_2_2_5
.bss:000000000021A0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000E68↑o
.bss:000000000021A0B8                                         ; main+5E1↑r
.bss:000000000021A0B8                                         ; Alternative name is 'optind'
.bss:000000000021A0B8                                         ; Copy of shared data
.bss:000000000021A0BC                 align 20h
.bss:000000000021A0C0                 public optarg@@GLIBC_2_2_5
.bss:000000000021A0C0 ; char *optarg
.bss:000000000021A0C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000E80↑o
.bss:000000000021A0C0                                         ; main:loc_3052↑r ...
.bss:000000000021A0C0                                         ; Alternative name is 'optarg'
.bss:000000000021A0C0                                         ; Copy of shared data
.bss:000000000021A0C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000021A0C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000021A0C8                                         ; DATA XREF: LOAD:0000000000000E08↑o
.bss:000000000021A0C8                                         ; LOAD:0000000000000E20↑o ...
.bss:000000000021A0C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000021A0C8                                         ; Copy of shared data
.bss:000000000021A0D0                 align 20h
.bss:000000000021A0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000021A0E0 ; FILE *stderr
.bss:000000000021A0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000E50↑o
.bss:000000000021A0E0                                         ; usage+3D↑r ...
.bss:000000000021A0E0                                         ; Alternative name is 'stderr'
.bss:000000000021A0E0                                         ; Copy of shared data
.bss:000000000021A0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000021A0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000021A0E9                 align 20h
.bss:000000000021A100 x_tmp_7353      dd ?                    ; DATA XREF: do_copy+F2↑o
.bss:000000000021A100                                         ; do_copy+F9↑o ...
.bss:000000000021A104                 db    ? ;
.bss:000000000021A105                 db    ? ;
.bss:000000000021A106                 db    ? ;
.bss:000000000021A107                 db    ? ;
.bss:000000000021A108                 db    ? ;
.bss:000000000021A109                 db    ? ;
.bss:000000000021A10A                 db    ? ;
.bss:000000000021A10B                 db    ? ;
.bss:000000000021A10C                 db    ? ;
.bss:000000000021A10D                 db    ? ;
.bss:000000000021A10E                 db    ? ;
.bss:000000000021A10F                 db    ? ;
.bss:000000000021A110                 db    ? ;
.bss:000000000021A111                 db    ? ;
.bss:000000000021A112                 db    ? ;
.bss:000000000021A113                 db    ? ;
.bss:000000000021A114                 db    ? ;
.bss:000000000021A115                 db    ? ;
.bss:000000000021A116                 db    ? ;
.bss:000000000021A117                 db    ? ;
.bss:000000000021A118                 db    ? ;
.bss:000000000021A119                 db    ? ;
.bss:000000000021A11A                 db    ? ;
.bss:000000000021A11B                 db    ? ;
.bss:000000000021A11C                 db    ? ;
.bss:000000000021A11D                 db    ? ;
.bss:000000000021A11E                 db    ? ;
.bss:000000000021A11F                 db    ? ;
.bss:000000000021A120                 db    ? ;
.bss:000000000021A121                 db    ? ;
.bss:000000000021A122                 db    ? ;
.bss:000000000021A123                 db    ? ;
.bss:000000000021A124                 db    ? ;
.bss:000000000021A125                 db    ? ;
.bss:000000000021A126                 db    ? ;
.bss:000000000021A127                 db    ? ;
.bss:000000000021A128                 db    ? ;
.bss:000000000021A129                 db    ? ;
.bss:000000000021A12A                 db    ? ;
.bss:000000000021A12B                 db    ? ;
.bss:000000000021A12C                 db    ? ;
.bss:000000000021A12D                 db    ? ;
.bss:000000000021A12E                 db    ? ;
.bss:000000000021A12F                 db    ? ;
.bss:000000000021A130                 db    ? ;
.bss:000000000021A131                 db    ? ;
.bss:000000000021A132                 db    ? ;
.bss:000000000021A133                 db    ? ;
.bss:000000000021A134                 db    ? ;
.bss:000000000021A135                 db    ? ;
.bss:000000000021A136                 db    ? ;
.bss:000000000021A137                 db    ? ;
.bss:000000000021A138                 db    ? ;
.bss:000000000021A139                 db    ? ;
.bss:000000000021A13A                 db    ? ;
.bss:000000000021A13B                 db    ? ;
.bss:000000000021A13C                 db    ? ;
.bss:000000000021A13D                 db    ? ;
.bss:000000000021A13E                 db    ? ;
.bss:000000000021A13F                 db    ? ;
.bss:000000000021A140                 db    ? ;
.bss:000000000021A141                 db    ? ;
.bss:000000000021A142                 db    ? ;
.bss:000000000021A143                 db    ? ;
.bss:000000000021A144                 db    ? ;
.bss:000000000021A145                 db    ? ;
.bss:000000000021A146                 db    ? ;
.bss:000000000021A147                 db    ? ;
.bss:000000000021A148                 db    ? ;
.bss:000000000021A149                 db    ? ;
.bss:000000000021A14A                 db    ? ;
.bss:000000000021A14B                 db    ? ;
.bss:000000000021A14C                 db    ? ;
.bss:000000000021A14D                 db    ? ;
.bss:000000000021A14E                 db    ? ;
.bss:000000000021A14F                 db    ? ;
.bss:000000000021A150 remove_trailing_slashes db ?            ; DATA XREF: main:loc_31D5↑w
.bss:000000000021A150                                         ; do_copy:loc_4A44↑r
.bss:000000000021A151 parents_option  db ?                    ; DATA XREF: main:loc_326C↑w
.bss:000000000021A151                                         ; do_copy:loc_4872↑r ...
.bss:000000000021A152 selinux_enabled db ?                    ; DATA XREF: main+8A↑w
.bss:000000000021A152                                         ; main:loc_30CE↑r ...
.bss:000000000021A153                 align 20h
.bss:000000000021A160 fallback_7572   db    ? ;               ; DATA XREF: write_zeros:loc_4DC7↑o
.bss:000000000021A161                 db    ? ;
.bss:000000000021A162                 db    ? ;
.bss:000000000021A163                 db    ? ;
.bss:000000000021A164                 db    ? ;
.bss:000000000021A165                 db    ? ;
.bss:000000000021A166                 db    ? ;
.bss:000000000021A167                 db    ? ;
.bss:000000000021A168                 db    ? ;
.bss:000000000021A169                 db    ? ;
.bss:000000000021A16A                 db    ? ;
.bss:000000000021A16B                 db    ? ;
.bss:000000000021A16C                 db    ? ;
.bss:000000000021A16D                 db    ? ;
.bss:000000000021A16E                 db    ? ;
.bss:000000000021A16F                 db    ? ;
.bss:000000000021A170                 db    ? ;
.bss:000000000021A171                 db    ? ;
.bss:000000000021A172                 db    ? ;
.bss:000000000021A173                 db    ? ;
.bss:000000000021A174                 db    ? ;
.bss:000000000021A175                 db    ? ;
.bss:000000000021A176                 db    ? ;
.bss:000000000021A177                 db    ? ;
.bss:000000000021A178                 db    ? ;
.bss:000000000021A179                 db    ? ;
.bss:000000000021A17A                 db    ? ;
.bss:000000000021A17B                 db    ? ;
.bss:000000000021A17C                 db    ? ;
.bss:000000000021A17D                 db    ? ;
.bss:000000000021A17E                 db    ? ;
.bss:000000000021A17F                 db    ? ;
.bss:000000000021A180                 db    ? ;
.bss:000000000021A181                 db    ? ;
.bss:000000000021A182                 db    ? ;
.bss:000000000021A183                 db    ? ;
.bss:000000000021A184                 db    ? ;
.bss:000000000021A185                 db    ? ;
.bss:000000000021A186                 db    ? ;
.bss:000000000021A187                 db    ? ;
.bss:000000000021A188                 db    ? ;
.bss:000000000021A189                 db    ? ;
.bss:000000000021A18A                 db    ? ;
.bss:000000000021A18B                 db    ? ;
.bss:000000000021A18C                 db    ? ;
.bss:000000000021A18D                 db    ? ;
.bss:000000000021A18E                 db    ? ;
.bss:000000000021A18F                 db    ? ;
.bss:000000000021A190                 db    ? ;
.bss:000000000021A191                 db    ? ;
.bss:000000000021A192                 db    ? ;
.bss:000000000021A193                 db    ? ;
.bss:000000000021A194                 db    ? ;
.bss:000000000021A195                 db    ? ;
.bss:000000000021A196                 db    ? ;
.bss:000000000021A197                 db    ? ;
.bss:000000000021A198                 db    ? ;
.bss:000000000021A199                 db    ? ;
.bss:000000000021A19A                 db    ? ;
.bss:000000000021A19B                 db    ? ;
.bss:000000000021A19C                 db    ? ;
.bss:000000000021A19D                 db    ? ;
.bss:000000000021A19E                 db    ? ;
.bss:000000000021A19F                 db    ? ;
.bss:000000000021A1A0                 db    ? ;
.bss:000000000021A1A1                 db    ? ;
.bss:000000000021A1A2                 db    ? ;
.bss:000000000021A1A3                 db    ? ;
.bss:000000000021A1A4                 db    ? ;
.bss:000000000021A1A5                 db    ? ;
.bss:000000000021A1A6                 db    ? ;
.bss:000000000021A1A7                 db    ? ;
.bss:000000000021A1A8                 db    ? ;
.bss:000000000021A1A9                 db    ? ;
.bss:000000000021A1AA                 db    ? ;
.bss:000000000021A1AB                 db    ? ;
.bss:000000000021A1AC                 db    ? ;
.bss:000000000021A1AD                 db    ? ;
.bss:000000000021A1AE                 db    ? ;
.bss:000000000021A1AF                 db    ? ;
.bss:000000000021A1B0                 db    ? ;
.bss:000000000021A1B1                 db    ? ;
.bss:000000000021A1B2                 db    ? ;
.bss:000000000021A1B3                 db    ? ;
.bss:000000000021A1B4                 db    ? ;
.bss:000000000021A1B5                 db    ? ;
.bss:000000000021A1B6                 db    ? ;
.bss:000000000021A1B7                 db    ? ;
.bss:000000000021A1B8                 db    ? ;
.bss:000000000021A1B9                 db    ? ;
.bss:000000000021A1BA                 db    ? ;
.bss:000000000021A1BB                 db    ? ;
.bss:000000000021A1BC                 db    ? ;
.bss:000000000021A1BD                 db    ? ;
.bss:000000000021A1BE                 db    ? ;
.bss:000000000021A1BF                 db    ? ;
.bss:000000000021A1C0                 db    ? ;
.bss:000000000021A1C1                 db    ? ;
.bss:000000000021A1C2                 db    ? ;
.bss:000000000021A1C3                 db    ? ;
.bss:000000000021A1C4                 db    ? ;
.bss:000000000021A1C5                 db    ? ;
.bss:000000000021A1C6                 db    ? ;
.bss:000000000021A1C7                 db    ? ;
.bss:000000000021A1C8                 db    ? ;
.bss:000000000021A1C9                 db    ? ;
.bss:000000000021A1CA                 db    ? ;
.bss:000000000021A1CB                 db    ? ;
.bss:000000000021A1CC                 db    ? ;
.bss:000000000021A1CD                 db    ? ;
.bss:000000000021A1CE                 db    ? ;
.bss:000000000021A1CF                 db    ? ;
.bss:000000000021A1D0                 db    ? ;
.bss:000000000021A1D1                 db    ? ;
.bss:000000000021A1D2                 db    ? ;
.bss:000000000021A1D3                 db    ? ;
.bss:000000000021A1D4                 db    ? ;
.bss:000000000021A1D5                 db    ? ;
.bss:000000000021A1D6                 db    ? ;
.bss:000000000021A1D7                 db    ? ;
.bss:000000000021A1D8                 db    ? ;
.bss:000000000021A1D9                 db    ? ;
.bss:000000000021A1DA                 db    ? ;
.bss:000000000021A1DB                 db    ? ;
.bss:000000000021A1DC                 db    ? ;
.bss:000000000021A1DD                 db    ? ;
.bss:000000000021A1DE                 db    ? ;
.bss:000000000021A1DF                 db    ? ;
.bss:000000000021A1E0                 db    ? ;
.bss:000000000021A1E1                 db    ? ;
.bss:000000000021A1E2                 db    ? ;
.bss:000000000021A1E3                 db    ? ;
.bss:000000000021A1E4                 db    ? ;
.bss:000000000021A1E5                 db    ? ;
.bss:000000000021A1E6                 db    ? ;
.bss:000000000021A1E7                 db    ? ;
.bss:000000000021A1E8                 db    ? ;
.bss:000000000021A1E9                 db    ? ;
.bss:000000000021A1EA                 db    ? ;
.bss:000000000021A1EB                 db    ? ;
.bss:000000000021A1EC                 db    ? ;
.bss:000000000021A1ED                 db    ? ;
.bss:000000000021A1EE                 db    ? ;
.bss:000000000021A1EF                 db    ? ;
.bss:000000000021A1F0                 db    ? ;
.bss:000000000021A1F1                 db    ? ;
.bss:000000000021A1F2                 db    ? ;
.bss:000000000021A1F3                 db    ? ;
.bss:000000000021A1F4                 db    ? ;
.bss:000000000021A1F5                 db    ? ;
.bss:000000000021A1F6                 db    ? ;
.bss:000000000021A1F7                 db    ? ;
.bss:000000000021A1F8                 db    ? ;
.bss:000000000021A1F9                 db    ? ;
.bss:000000000021A1FA                 db    ? ;
.bss:000000000021A1FB                 db    ? ;
.bss:000000000021A1FC                 db    ? ;
.bss:000000000021A1FD                 db    ? ;
.bss:000000000021A1FE                 db    ? ;
.bss:000000000021A1FF                 db    ? ;
.bss:000000000021A200                 db    ? ;
.bss:000000000021A201                 db    ? ;
.bss:000000000021A202                 db    ? ;
.bss:000000000021A203                 db    ? ;
.bss:000000000021A204                 db    ? ;
.bss:000000000021A205                 db    ? ;
.bss:000000000021A206                 db    ? ;
.bss:000000000021A207                 db    ? ;
.bss:000000000021A208                 db    ? ;
.bss:000000000021A209                 db    ? ;
.bss:000000000021A20A                 db    ? ;
.bss:000000000021A20B                 db    ? ;
.bss:000000000021A20C                 db    ? ;
.bss:000000000021A20D                 db    ? ;
.bss:000000000021A20E                 db    ? ;
.bss:000000000021A20F                 db    ? ;
.bss:000000000021A210                 db    ? ;
.bss:000000000021A211                 db    ? ;
.bss:000000000021A212                 db    ? ;
.bss:000000000021A213                 db    ? ;
.bss:000000000021A214                 db    ? ;
.bss:000000000021A215                 db    ? ;
.bss:000000000021A216                 db    ? ;
.bss:000000000021A217                 db    ? ;
.bss:000000000021A218                 db    ? ;
.bss:000000000021A219                 db    ? ;
.bss:000000000021A21A                 db    ? ;
.bss:000000000021A21B                 db    ? ;
.bss:000000000021A21C                 db    ? ;
.bss:000000000021A21D                 db    ? ;
.bss:000000000021A21E                 db    ? ;
.bss:000000000021A21F                 db    ? ;
.bss:000000000021A220                 db    ? ;
.bss:000000000021A221                 db    ? ;
.bss:000000000021A222                 db    ? ;
.bss:000000000021A223                 db    ? ;
.bss:000000000021A224                 db    ? ;
.bss:000000000021A225                 db    ? ;
.bss:000000000021A226                 db    ? ;
.bss:000000000021A227                 db    ? ;
.bss:000000000021A228                 db    ? ;
.bss:000000000021A229                 db    ? ;
.bss:000000000021A22A                 db    ? ;
.bss:000000000021A22B                 db    ? ;
.bss:000000000021A22C                 db    ? ;
.bss:000000000021A22D                 db    ? ;
.bss:000000000021A22E                 db    ? ;
.bss:000000000021A22F                 db    ? ;
.bss:000000000021A230                 db    ? ;
.bss:000000000021A231                 db    ? ;
.bss:000000000021A232                 db    ? ;
.bss:000000000021A233                 db    ? ;
.bss:000000000021A234                 db    ? ;
.bss:000000000021A235                 db    ? ;
.bss:000000000021A236                 db    ? ;
.bss:000000000021A237                 db    ? ;
.bss:000000000021A238                 db    ? ;
.bss:000000000021A239                 db    ? ;
.bss:000000000021A23A                 db    ? ;
.bss:000000000021A23B                 db    ? ;
.bss:000000000021A23C                 db    ? ;
.bss:000000000021A23D                 db    ? ;
.bss:000000000021A23E                 db    ? ;
.bss:000000000021A23F                 db    ? ;
.bss:000000000021A240                 db    ? ;
.bss:000000000021A241                 db    ? ;
.bss:000000000021A242                 db    ? ;
.bss:000000000021A243                 db    ? ;
.bss:000000000021A244                 db    ? ;
.bss:000000000021A245                 db    ? ;
.bss:000000000021A246                 db    ? ;
.bss:000000000021A247                 db    ? ;
.bss:000000000021A248                 db    ? ;
.bss:000000000021A249                 db    ? ;
.bss:000000000021A24A                 db    ? ;
.bss:000000000021A24B                 db    ? ;
.bss:000000000021A24C                 db    ? ;
.bss:000000000021A24D                 db    ? ;
.bss:000000000021A24E                 db    ? ;
.bss:000000000021A24F                 db    ? ;
.bss:000000000021A250                 db    ? ;
.bss:000000000021A251                 db    ? ;
.bss:000000000021A252                 db    ? ;
.bss:000000000021A253                 db    ? ;
.bss:000000000021A254                 db    ? ;
.bss:000000000021A255                 db    ? ;
.bss:000000000021A256                 db    ? ;
.bss:000000000021A257                 db    ? ;
.bss:000000000021A258                 db    ? ;
.bss:000000000021A259                 db    ? ;
.bss:000000000021A25A                 db    ? ;
.bss:000000000021A25B                 db    ? ;
.bss:000000000021A25C                 db    ? ;
.bss:000000000021A25D                 db    ? ;
.bss:000000000021A25E                 db    ? ;
.bss:000000000021A25F                 db    ? ;
.bss:000000000021A260                 db    ? ;
.bss:000000000021A261                 db    ? ;
.bss:000000000021A262                 db    ? ;
.bss:000000000021A263                 db    ? ;
.bss:000000000021A264                 db    ? ;
.bss:000000000021A265                 db    ? ;
.bss:000000000021A266                 db    ? ;
.bss:000000000021A267                 db    ? ;
.bss:000000000021A268                 db    ? ;
.bss:000000000021A269                 db    ? ;
.bss:000000000021A26A                 db    ? ;
.bss:000000000021A26B                 db    ? ;
.bss:000000000021A26C                 db    ? ;
.bss:000000000021A26D                 db    ? ;
.bss:000000000021A26E                 db    ? ;
.bss:000000000021A26F                 db    ? ;
.bss:000000000021A270                 db    ? ;
.bss:000000000021A271                 db    ? ;
.bss:000000000021A272                 db    ? ;
.bss:000000000021A273                 db    ? ;
.bss:000000000021A274                 db    ? ;
.bss:000000000021A275                 db    ? ;
.bss:000000000021A276                 db    ? ;
.bss:000000000021A277                 db    ? ;
.bss:000000000021A278                 db    ? ;
.bss:000000000021A279                 db    ? ;
.bss:000000000021A27A                 db    ? ;
.bss:000000000021A27B                 db    ? ;
.bss:000000000021A27C                 db    ? ;
.bss:000000000021A27D                 db    ? ;
.bss:000000000021A27E                 db    ? ;
.bss:000000000021A27F                 db    ? ;
.bss:000000000021A280                 db    ? ;
.bss:000000000021A281                 db    ? ;
.bss:000000000021A282                 db    ? ;
.bss:000000000021A283                 db    ? ;
.bss:000000000021A284                 db    ? ;
.bss:000000000021A285                 db    ? ;
.bss:000000000021A286                 db    ? ;
.bss:000000000021A287                 db    ? ;
.bss:000000000021A288                 db    ? ;
.bss:000000000021A289                 db    ? ;
.bss:000000000021A28A                 db    ? ;
.bss:000000000021A28B                 db    ? ;
.bss:000000000021A28C                 db    ? ;
.bss:000000000021A28D                 db    ? ;
.bss:000000000021A28E                 db    ? ;
.bss:000000000021A28F                 db    ? ;
.bss:000000000021A290                 db    ? ;
.bss:000000000021A291                 db    ? ;
.bss:000000000021A292                 db    ? ;
.bss:000000000021A293                 db    ? ;
.bss:000000000021A294                 db    ? ;
.bss:000000000021A295                 db    ? ;
.bss:000000000021A296                 db    ? ;
.bss:000000000021A297                 db    ? ;
.bss:000000000021A298                 db    ? ;
.bss:000000000021A299                 db    ? ;
.bss:000000000021A29A                 db    ? ;
.bss:000000000021A29B                 db    ? ;
.bss:000000000021A29C                 db    ? ;
.bss:000000000021A29D                 db    ? ;
.bss:000000000021A29E                 db    ? ;
.bss:000000000021A29F                 db    ? ;
.bss:000000000021A2A0                 db    ? ;
.bss:000000000021A2A1                 db    ? ;
.bss:000000000021A2A2                 db    ? ;
.bss:000000000021A2A3                 db    ? ;
.bss:000000000021A2A4                 db    ? ;
.bss:000000000021A2A5                 db    ? ;
.bss:000000000021A2A6                 db    ? ;
.bss:000000000021A2A7                 db    ? ;
.bss:000000000021A2A8                 db    ? ;
.bss:000000000021A2A9                 db    ? ;
.bss:000000000021A2AA                 db    ? ;
.bss:000000000021A2AB                 db    ? ;
.bss:000000000021A2AC                 db    ? ;
.bss:000000000021A2AD                 db    ? ;
.bss:000000000021A2AE                 db    ? ;
.bss:000000000021A2AF                 db    ? ;
.bss:000000000021A2B0                 db    ? ;
.bss:000000000021A2B1                 db    ? ;
.bss:000000000021A2B2                 db    ? ;
.bss:000000000021A2B3                 db    ? ;
.bss:000000000021A2B4                 db    ? ;
.bss:000000000021A2B5                 db    ? ;
.bss:000000000021A2B6                 db    ? ;
.bss:000000000021A2B7                 db    ? ;
.bss:000000000021A2B8                 db    ? ;
.bss:000000000021A2B9                 db    ? ;
.bss:000000000021A2BA                 db    ? ;
.bss:000000000021A2BB                 db    ? ;
.bss:000000000021A2BC                 db    ? ;
.bss:000000000021A2BD                 db    ? ;
.bss:000000000021A2BE                 db    ? ;
.bss:000000000021A2BF                 db    ? ;
.bss:000000000021A2C0                 db    ? ;
.bss:000000000021A2C1                 db    ? ;
.bss:000000000021A2C2                 db    ? ;
.bss:000000000021A2C3                 db    ? ;
.bss:000000000021A2C4                 db    ? ;
.bss:000000000021A2C5                 db    ? ;
.bss:000000000021A2C6                 db    ? ;
.bss:000000000021A2C7                 db    ? ;
.bss:000000000021A2C8                 db    ? ;
.bss:000000000021A2C9                 db    ? ;
.bss:000000000021A2CA                 db    ? ;
.bss:000000000021A2CB                 db    ? ;
.bss:000000000021A2CC                 db    ? ;
.bss:000000000021A2CD                 db    ? ;
.bss:000000000021A2CE                 db    ? ;
.bss:000000000021A2CF                 db    ? ;
.bss:000000000021A2D0                 db    ? ;
.bss:000000000021A2D1                 db    ? ;
.bss:000000000021A2D2                 db    ? ;
.bss:000000000021A2D3                 db    ? ;
.bss:000000000021A2D4                 db    ? ;
.bss:000000000021A2D5                 db    ? ;
.bss:000000000021A2D6                 db    ? ;
.bss:000000000021A2D7                 db    ? ;
.bss:000000000021A2D8                 db    ? ;
.bss:000000000021A2D9                 db    ? ;
.bss:000000000021A2DA                 db    ? ;
.bss:000000000021A2DB                 db    ? ;
.bss:000000000021A2DC                 db    ? ;
.bss:000000000021A2DD                 db    ? ;
.bss:000000000021A2DE                 db    ? ;
.bss:000000000021A2DF                 db    ? ;
.bss:000000000021A2E0                 db    ? ;
.bss:000000000021A2E1                 db    ? ;
.bss:000000000021A2E2                 db    ? ;
.bss:000000000021A2E3                 db    ? ;
.bss:000000000021A2E4                 db    ? ;
.bss:000000000021A2E5                 db    ? ;
.bss:000000000021A2E6                 db    ? ;
.bss:000000000021A2E7                 db    ? ;
.bss:000000000021A2E8                 db    ? ;
.bss:000000000021A2E9                 db    ? ;
.bss:000000000021A2EA                 db    ? ;
.bss:000000000021A2EB                 db    ? ;
.bss:000000000021A2EC                 db    ? ;
.bss:000000000021A2ED                 db    ? ;
.bss:000000000021A2EE                 db    ? ;
.bss:000000000021A2EF                 db    ? ;
.bss:000000000021A2F0                 db    ? ;
.bss:000000000021A2F1                 db    ? ;
.bss:000000000021A2F2                 db    ? ;
.bss:000000000021A2F3                 db    ? ;
.bss:000000000021A2F4                 db    ? ;
.bss:000000000021A2F5                 db    ? ;
.bss:000000000021A2F6                 db    ? ;
.bss:000000000021A2F7                 db    ? ;
.bss:000000000021A2F8                 db    ? ;
.bss:000000000021A2F9                 db    ? ;
.bss:000000000021A2FA                 db    ? ;
.bss:000000000021A2FB                 db    ? ;
.bss:000000000021A2FC                 db    ? ;
.bss:000000000021A2FD                 db    ? ;
.bss:000000000021A2FE                 db    ? ;
.bss:000000000021A2FF                 db    ? ;
.bss:000000000021A300                 db    ? ;
.bss:000000000021A301                 db    ? ;
.bss:000000000021A302                 db    ? ;
.bss:000000000021A303                 db    ? ;
.bss:000000000021A304                 db    ? ;
.bss:000000000021A305                 db    ? ;
.bss:000000000021A306                 db    ? ;
.bss:000000000021A307                 db    ? ;
.bss:000000000021A308                 db    ? ;
.bss:000000000021A309                 db    ? ;
.bss:000000000021A30A                 db    ? ;
.bss:000000000021A30B                 db    ? ;
.bss:000000000021A30C                 db    ? ;
.bss:000000000021A30D                 db    ? ;
.bss:000000000021A30E                 db    ? ;
.bss:000000000021A30F                 db    ? ;
.bss:000000000021A310                 db    ? ;
.bss:000000000021A311                 db    ? ;
.bss:000000000021A312                 db    ? ;
.bss:000000000021A313                 db    ? ;
.bss:000000000021A314                 db    ? ;
.bss:000000000021A315                 db    ? ;
.bss:000000000021A316                 db    ? ;
.bss:000000000021A317                 db    ? ;
.bss:000000000021A318                 db    ? ;
.bss:000000000021A319                 db    ? ;
.bss:000000000021A31A                 db    ? ;
.bss:000000000021A31B                 db    ? ;
.bss:000000000021A31C                 db    ? ;
.bss:000000000021A31D                 db    ? ;
.bss:000000000021A31E                 db    ? ;
.bss:000000000021A31F                 db    ? ;
.bss:000000000021A320                 db    ? ;
.bss:000000000021A321                 db    ? ;
.bss:000000000021A322                 db    ? ;
.bss:000000000021A323                 db    ? ;
.bss:000000000021A324                 db    ? ;
.bss:000000000021A325                 db    ? ;
.bss:000000000021A326                 db    ? ;
.bss:000000000021A327                 db    ? ;
.bss:000000000021A328                 db    ? ;
.bss:000000000021A329                 db    ? ;
.bss:000000000021A32A                 db    ? ;
.bss:000000000021A32B                 db    ? ;
.bss:000000000021A32C                 db    ? ;
.bss:000000000021A32D                 db    ? ;
.bss:000000000021A32E                 db    ? ;
.bss:000000000021A32F                 db    ? ;
.bss:000000000021A330                 db    ? ;
.bss:000000000021A331                 db    ? ;
.bss:000000000021A332                 db    ? ;
.bss:000000000021A333                 db    ? ;
.bss:000000000021A334                 db    ? ;
.bss:000000000021A335                 db    ? ;
.bss:000000000021A336                 db    ? ;
.bss:000000000021A337                 db    ? ;
.bss:000000000021A338                 db    ? ;
.bss:000000000021A339                 db    ? ;
.bss:000000000021A33A                 db    ? ;
.bss:000000000021A33B                 db    ? ;
.bss:000000000021A33C                 db    ? ;
.bss:000000000021A33D                 db    ? ;
.bss:000000000021A33E                 db    ? ;
.bss:000000000021A33F                 db    ? ;
.bss:000000000021A340                 db    ? ;
.bss:000000000021A341                 db    ? ;
.bss:000000000021A342                 db    ? ;
.bss:000000000021A343                 db    ? ;
.bss:000000000021A344                 db    ? ;
.bss:000000000021A345                 db    ? ;
.bss:000000000021A346                 db    ? ;
.bss:000000000021A347                 db    ? ;
.bss:000000000021A348                 db    ? ;
.bss:000000000021A349                 db    ? ;
.bss:000000000021A34A                 db    ? ;
.bss:000000000021A34B                 db    ? ;
.bss:000000000021A34C                 db    ? ;
.bss:000000000021A34D                 db    ? ;
.bss:000000000021A34E                 db    ? ;
.bss:000000000021A34F                 db    ? ;
.bss:000000000021A350                 db    ? ;
.bss:000000000021A351                 db    ? ;
.bss:000000000021A352                 db    ? ;
.bss:000000000021A353                 db    ? ;
.bss:000000000021A354                 db    ? ;
.bss:000000000021A355                 db    ? ;
.bss:000000000021A356                 db    ? ;
.bss:000000000021A357                 db    ? ;
.bss:000000000021A358                 db    ? ;
.bss:000000000021A359                 db    ? ;
.bss:000000000021A35A                 db    ? ;
.bss:000000000021A35B                 db    ? ;
.bss:000000000021A35C                 db    ? ;
.bss:000000000021A35D                 db    ? ;
.bss:000000000021A35E                 db    ? ;
.bss:000000000021A35F                 db    ? ;
.bss:000000000021A360                 db    ? ;
.bss:000000000021A361                 db    ? ;
.bss:000000000021A362                 db    ? ;
.bss:000000000021A363                 db    ? ;
.bss:000000000021A364                 db    ? ;
.bss:000000000021A365                 db    ? ;
.bss:000000000021A366                 db    ? ;
.bss:000000000021A367                 db    ? ;
.bss:000000000021A368                 db    ? ;
.bss:000000000021A369                 db    ? ;
.bss:000000000021A36A                 db    ? ;
.bss:000000000021A36B                 db    ? ;
.bss:000000000021A36C                 db    ? ;
.bss:000000000021A36D                 db    ? ;
.bss:000000000021A36E                 db    ? ;
.bss:000000000021A36F                 db    ? ;
.bss:000000000021A370                 db    ? ;
.bss:000000000021A371                 db    ? ;
.bss:000000000021A372                 db    ? ;
.bss:000000000021A373                 db    ? ;
.bss:000000000021A374                 db    ? ;
.bss:000000000021A375                 db    ? ;
.bss:000000000021A376                 db    ? ;
.bss:000000000021A377                 db    ? ;
.bss:000000000021A378                 db    ? ;
.bss:000000000021A379                 db    ? ;
.bss:000000000021A37A                 db    ? ;
.bss:000000000021A37B                 db    ? ;
.bss:000000000021A37C                 db    ? ;
.bss:000000000021A37D                 db    ? ;
.bss:000000000021A37E                 db    ? ;
.bss:000000000021A37F                 db    ? ;
.bss:000000000021A380                 db    ? ;
.bss:000000000021A381                 db    ? ;
.bss:000000000021A382                 db    ? ;
.bss:000000000021A383                 db    ? ;
.bss:000000000021A384                 db    ? ;
.bss:000000000021A385                 db    ? ;
.bss:000000000021A386                 db    ? ;
.bss:000000000021A387                 db    ? ;
.bss:000000000021A388                 db    ? ;
.bss:000000000021A389                 db    ? ;
.bss:000000000021A38A                 db    ? ;
.bss:000000000021A38B                 db    ? ;
.bss:000000000021A38C                 db    ? ;
.bss:000000000021A38D                 db    ? ;
.bss:000000000021A38E                 db    ? ;
.bss:000000000021A38F                 db    ? ;
.bss:000000000021A390                 db    ? ;
.bss:000000000021A391                 db    ? ;
.bss:000000000021A392                 db    ? ;
.bss:000000000021A393                 db    ? ;
.bss:000000000021A394                 db    ? ;
.bss:000000000021A395                 db    ? ;
.bss:000000000021A396                 db    ? ;
.bss:000000000021A397                 db    ? ;
.bss:000000000021A398                 db    ? ;
.bss:000000000021A399                 db    ? ;
.bss:000000000021A39A                 db    ? ;
.bss:000000000021A39B                 db    ? ;
.bss:000000000021A39C                 db    ? ;
.bss:000000000021A39D                 db    ? ;
.bss:000000000021A39E                 db    ? ;
.bss:000000000021A39F                 db    ? ;
.bss:000000000021A3A0                 db    ? ;
.bss:000000000021A3A1                 db    ? ;
.bss:000000000021A3A2                 db    ? ;
.bss:000000000021A3A3                 db    ? ;
.bss:000000000021A3A4                 db    ? ;
.bss:000000000021A3A5                 db    ? ;
.bss:000000000021A3A6                 db    ? ;
.bss:000000000021A3A7                 db    ? ;
.bss:000000000021A3A8                 db    ? ;
.bss:000000000021A3A9                 db    ? ;
.bss:000000000021A3AA                 db    ? ;
.bss:000000000021A3AB                 db    ? ;
.bss:000000000021A3AC                 db    ? ;
.bss:000000000021A3AD                 db    ? ;
.bss:000000000021A3AE                 db    ? ;
.bss:000000000021A3AF                 db    ? ;
.bss:000000000021A3B0                 db    ? ;
.bss:000000000021A3B1                 db    ? ;
.bss:000000000021A3B2                 db    ? ;
.bss:000000000021A3B3                 db    ? ;
.bss:000000000021A3B4                 db    ? ;
.bss:000000000021A3B5                 db    ? ;
.bss:000000000021A3B6                 db    ? ;
.bss:000000000021A3B7                 db    ? ;
.bss:000000000021A3B8                 db    ? ;
.bss:000000000021A3B9                 db    ? ;
.bss:000000000021A3BA                 db    ? ;
.bss:000000000021A3BB                 db    ? ;
.bss:000000000021A3BC                 db    ? ;
.bss:000000000021A3BD                 db    ? ;
.bss:000000000021A3BE                 db    ? ;
.bss:000000000021A3BF                 db    ? ;
.bss:000000000021A3C0                 db    ? ;
.bss:000000000021A3C1                 db    ? ;
.bss:000000000021A3C2                 db    ? ;
.bss:000000000021A3C3                 db    ? ;
.bss:000000000021A3C4                 db    ? ;
.bss:000000000021A3C5                 db    ? ;
.bss:000000000021A3C6                 db    ? ;
.bss:000000000021A3C7                 db    ? ;
.bss:000000000021A3C8                 db    ? ;
.bss:000000000021A3C9                 db    ? ;
.bss:000000000021A3CA                 db    ? ;
.bss:000000000021A3CB                 db    ? ;
.bss:000000000021A3CC                 db    ? ;
.bss:000000000021A3CD                 db    ? ;
.bss:000000000021A3CE                 db    ? ;
.bss:000000000021A3CF                 db    ? ;
.bss:000000000021A3D0                 db    ? ;
.bss:000000000021A3D1                 db    ? ;
.bss:000000000021A3D2                 db    ? ;
.bss:000000000021A3D3                 db    ? ;
.bss:000000000021A3D4                 db    ? ;
.bss:000000000021A3D5                 db    ? ;
.bss:000000000021A3D6                 db    ? ;
.bss:000000000021A3D7                 db    ? ;
.bss:000000000021A3D8                 db    ? ;
.bss:000000000021A3D9                 db    ? ;
.bss:000000000021A3DA                 db    ? ;
.bss:000000000021A3DB                 db    ? ;
.bss:000000000021A3DC                 db    ? ;
.bss:000000000021A3DD                 db    ? ;
.bss:000000000021A3DE                 db    ? ;
.bss:000000000021A3DF                 db    ? ;
.bss:000000000021A3E0                 db    ? ;
.bss:000000000021A3E1                 db    ? ;
.bss:000000000021A3E2                 db    ? ;
.bss:000000000021A3E3                 db    ? ;
.bss:000000000021A3E4                 db    ? ;
.bss:000000000021A3E5                 db    ? ;
.bss:000000000021A3E6                 db    ? ;
.bss:000000000021A3E7                 db    ? ;
.bss:000000000021A3E8                 db    ? ;
.bss:000000000021A3E9                 db    ? ;
.bss:000000000021A3EA                 db    ? ;
.bss:000000000021A3EB                 db    ? ;
.bss:000000000021A3EC                 db    ? ;
.bss:000000000021A3ED                 db    ? ;
.bss:000000000021A3EE                 db    ? ;
.bss:000000000021A3EF                 db    ? ;
.bss:000000000021A3F0                 db    ? ;
.bss:000000000021A3F1                 db    ? ;
.bss:000000000021A3F2                 db    ? ;
.bss:000000000021A3F3                 db    ? ;
.bss:000000000021A3F4                 db    ? ;
.bss:000000000021A3F5                 db    ? ;
.bss:000000000021A3F6                 db    ? ;
.bss:000000000021A3F7                 db    ? ;
.bss:000000000021A3F8                 db    ? ;
.bss:000000000021A3F9                 db    ? ;
.bss:000000000021A3FA                 db    ? ;
.bss:000000000021A3FB                 db    ? ;
.bss:000000000021A3FC                 db    ? ;
.bss:000000000021A3FD                 db    ? ;
.bss:000000000021A3FE                 db    ? ;
.bss:000000000021A3FF                 db    ? ;
.bss:000000000021A400                 db    ? ;
.bss:000000000021A401                 db    ? ;
.bss:000000000021A402                 db    ? ;
.bss:000000000021A403                 db    ? ;
.bss:000000000021A404                 db    ? ;
.bss:000000000021A405                 db    ? ;
.bss:000000000021A406                 db    ? ;
.bss:000000000021A407                 db    ? ;
.bss:000000000021A408                 db    ? ;
.bss:000000000021A409                 db    ? ;
.bss:000000000021A40A                 db    ? ;
.bss:000000000021A40B                 db    ? ;
.bss:000000000021A40C                 db    ? ;
.bss:000000000021A40D                 db    ? ;
.bss:000000000021A40E                 db    ? ;
.bss:000000000021A40F                 db    ? ;
.bss:000000000021A410                 db    ? ;
.bss:000000000021A411                 db    ? ;
.bss:000000000021A412                 db    ? ;
.bss:000000000021A413                 db    ? ;
.bss:000000000021A414                 db    ? ;
.bss:000000000021A415                 db    ? ;
.bss:000000000021A416                 db    ? ;
.bss:000000000021A417                 db    ? ;
.bss:000000000021A418                 db    ? ;
.bss:000000000021A419                 db    ? ;
.bss:000000000021A41A                 db    ? ;
.bss:000000000021A41B                 db    ? ;
.bss:000000000021A41C                 db    ? ;
.bss:000000000021A41D                 db    ? ;
.bss:000000000021A41E                 db    ? ;
.bss:000000000021A41F                 db    ? ;
.bss:000000000021A420                 db    ? ;
.bss:000000000021A421                 db    ? ;
.bss:000000000021A422                 db    ? ;
.bss:000000000021A423                 db    ? ;
.bss:000000000021A424                 db    ? ;
.bss:000000000021A425                 db    ? ;
.bss:000000000021A426                 db    ? ;
.bss:000000000021A427                 db    ? ;
.bss:000000000021A428                 db    ? ;
.bss:000000000021A429                 db    ? ;
.bss:000000000021A42A                 db    ? ;
.bss:000000000021A42B                 db    ? ;
.bss:000000000021A42C                 db    ? ;
.bss:000000000021A42D                 db    ? ;
.bss:000000000021A42E                 db    ? ;
.bss:000000000021A42F                 db    ? ;
.bss:000000000021A430                 db    ? ;
.bss:000000000021A431                 db    ? ;
.bss:000000000021A432                 db    ? ;
.bss:000000000021A433                 db    ? ;
.bss:000000000021A434                 db    ? ;
.bss:000000000021A435                 db    ? ;
.bss:000000000021A436                 db    ? ;
.bss:000000000021A437                 db    ? ;
.bss:000000000021A438                 db    ? ;
.bss:000000000021A439                 db    ? ;
.bss:000000000021A43A                 db    ? ;
.bss:000000000021A43B                 db    ? ;
.bss:000000000021A43C                 db    ? ;
.bss:000000000021A43D                 db    ? ;
.bss:000000000021A43E                 db    ? ;
.bss:000000000021A43F                 db    ? ;
.bss:000000000021A440                 db    ? ;
.bss:000000000021A441                 db    ? ;
.bss:000000000021A442                 db    ? ;
.bss:000000000021A443                 db    ? ;
.bss:000000000021A444                 db    ? ;
.bss:000000000021A445                 db    ? ;
.bss:000000000021A446                 db    ? ;
.bss:000000000021A447                 db    ? ;
.bss:000000000021A448                 db    ? ;
.bss:000000000021A449                 db    ? ;
.bss:000000000021A44A                 db    ? ;
.bss:000000000021A44B                 db    ? ;
.bss:000000000021A44C                 db    ? ;
.bss:000000000021A44D                 db    ? ;
.bss:000000000021A44E                 db    ? ;
.bss:000000000021A44F                 db    ? ;
.bss:000000000021A450                 db    ? ;
.bss:000000000021A451                 db    ? ;
.bss:000000000021A452                 db    ? ;
.bss:000000000021A453                 db    ? ;
.bss:000000000021A454                 db    ? ;
.bss:000000000021A455                 db    ? ;
.bss:000000000021A456                 db    ? ;
.bss:000000000021A457                 db    ? ;
.bss:000000000021A458                 db    ? ;
.bss:000000000021A459                 db    ? ;
.bss:000000000021A45A                 db    ? ;
.bss:000000000021A45B                 db    ? ;
.bss:000000000021A45C                 db    ? ;
.bss:000000000021A45D                 db    ? ;
.bss:000000000021A45E                 db    ? ;
.bss:000000000021A45F                 db    ? ;
.bss:000000000021A460                 db    ? ;
.bss:000000000021A461                 db    ? ;
.bss:000000000021A462                 db    ? ;
.bss:000000000021A463                 db    ? ;
.bss:000000000021A464                 db    ? ;
.bss:000000000021A465                 db    ? ;
.bss:000000000021A466                 db    ? ;
.bss:000000000021A467                 db    ? ;
.bss:000000000021A468                 db    ? ;
.bss:000000000021A469                 db    ? ;
.bss:000000000021A46A                 db    ? ;
.bss:000000000021A46B                 db    ? ;
.bss:000000000021A46C                 db    ? ;
.bss:000000000021A46D                 db    ? ;
.bss:000000000021A46E                 db    ? ;
.bss:000000000021A46F                 db    ? ;
.bss:000000000021A470                 db    ? ;
.bss:000000000021A471                 db    ? ;
.bss:000000000021A472                 db    ? ;
.bss:000000000021A473                 db    ? ;
.bss:000000000021A474                 db    ? ;
.bss:000000000021A475                 db    ? ;
.bss:000000000021A476                 db    ? ;
.bss:000000000021A477                 db    ? ;
.bss:000000000021A478                 db    ? ;
.bss:000000000021A479                 db    ? ;
.bss:000000000021A47A                 db    ? ;
.bss:000000000021A47B                 db    ? ;
.bss:000000000021A47C                 db    ? ;
.bss:000000000021A47D                 db    ? ;
.bss:000000000021A47E                 db    ? ;
.bss:000000000021A47F                 db    ? ;
.bss:000000000021A480                 db    ? ;
.bss:000000000021A481                 db    ? ;
.bss:000000000021A482                 db    ? ;
.bss:000000000021A483                 db    ? ;
.bss:000000000021A484                 db    ? ;
.bss:000000000021A485                 db    ? ;
.bss:000000000021A486                 db    ? ;
.bss:000000000021A487                 db    ? ;
.bss:000000000021A488                 db    ? ;
.bss:000000000021A489                 db    ? ;
.bss:000000000021A48A                 db    ? ;
.bss:000000000021A48B                 db    ? ;
.bss:000000000021A48C                 db    ? ;
.bss:000000000021A48D                 db    ? ;
.bss:000000000021A48E                 db    ? ;
.bss:000000000021A48F                 db    ? ;
.bss:000000000021A490                 db    ? ;
.bss:000000000021A491                 db    ? ;
.bss:000000000021A492                 db    ? ;
.bss:000000000021A493                 db    ? ;
.bss:000000000021A494                 db    ? ;
.bss:000000000021A495                 db    ? ;
.bss:000000000021A496                 db    ? ;
.bss:000000000021A497                 db    ? ;
.bss:000000000021A498                 db    ? ;
.bss:000000000021A499                 db    ? ;
.bss:000000000021A49A                 db    ? ;
.bss:000000000021A49B                 db    ? ;
.bss:000000000021A49C                 db    ? ;
.bss:000000000021A49D                 db    ? ;
.bss:000000000021A49E                 db    ? ;
.bss:000000000021A49F                 db    ? ;
.bss:000000000021A4A0                 db    ? ;
.bss:000000000021A4A1                 db    ? ;
.bss:000000000021A4A2                 db    ? ;
.bss:000000000021A4A3                 db    ? ;
.bss:000000000021A4A4                 db    ? ;
.bss:000000000021A4A5                 db    ? ;
.bss:000000000021A4A6                 db    ? ;
.bss:000000000021A4A7                 db    ? ;
.bss:000000000021A4A8                 db    ? ;
.bss:000000000021A4A9                 db    ? ;
.bss:000000000021A4AA                 db    ? ;
.bss:000000000021A4AB                 db    ? ;
.bss:000000000021A4AC                 db    ? ;
.bss:000000000021A4AD                 db    ? ;
.bss:000000000021A4AE                 db    ? ;
.bss:000000000021A4AF                 db    ? ;
.bss:000000000021A4B0                 db    ? ;
.bss:000000000021A4B1                 db    ? ;
.bss:000000000021A4B2                 db    ? ;
.bss:000000000021A4B3                 db    ? ;
.bss:000000000021A4B4                 db    ? ;
.bss:000000000021A4B5                 db    ? ;
.bss:000000000021A4B6                 db    ? ;
.bss:000000000021A4B7                 db    ? ;
.bss:000000000021A4B8                 db    ? ;
.bss:000000000021A4B9                 db    ? ;
.bss:000000000021A4BA                 db    ? ;
.bss:000000000021A4BB                 db    ? ;
.bss:000000000021A4BC                 db    ? ;
.bss:000000000021A4BD                 db    ? ;
.bss:000000000021A4BE                 db    ? ;
.bss:000000000021A4BF                 db    ? ;
.bss:000000000021A4C0                 db    ? ;
.bss:000000000021A4C1                 db    ? ;
.bss:000000000021A4C2                 db    ? ;
.bss:000000000021A4C3                 db    ? ;
.bss:000000000021A4C4                 db    ? ;
.bss:000000000021A4C5                 db    ? ;
.bss:000000000021A4C6                 db    ? ;
.bss:000000000021A4C7                 db    ? ;
.bss:000000000021A4C8                 db    ? ;
.bss:000000000021A4C9                 db    ? ;
.bss:000000000021A4CA                 db    ? ;
.bss:000000000021A4CB                 db    ? ;
.bss:000000000021A4CC                 db    ? ;
.bss:000000000021A4CD                 db    ? ;
.bss:000000000021A4CE                 db    ? ;
.bss:000000000021A4CF                 db    ? ;
.bss:000000000021A4D0                 db    ? ;
.bss:000000000021A4D1                 db    ? ;
.bss:000000000021A4D2                 db    ? ;
.bss:000000000021A4D3                 db    ? ;
.bss:000000000021A4D4                 db    ? ;
.bss:000000000021A4D5                 db    ? ;
.bss:000000000021A4D6                 db    ? ;
.bss:000000000021A4D7                 db    ? ;
.bss:000000000021A4D8                 db    ? ;
.bss:000000000021A4D9                 db    ? ;
.bss:000000000021A4DA                 db    ? ;
.bss:000000000021A4DB                 db    ? ;
.bss:000000000021A4DC                 db    ? ;
.bss:000000000021A4DD                 db    ? ;
.bss:000000000021A4DE                 db    ? ;
.bss:000000000021A4DF                 db    ? ;
.bss:000000000021A4E0                 db    ? ;
.bss:000000000021A4E1                 db    ? ;
.bss:000000000021A4E2                 db    ? ;
.bss:000000000021A4E3                 db    ? ;
.bss:000000000021A4E4                 db    ? ;
.bss:000000000021A4E5                 db    ? ;
.bss:000000000021A4E6                 db    ? ;
.bss:000000000021A4E7                 db    ? ;
.bss:000000000021A4E8                 db    ? ;
.bss:000000000021A4E9                 db    ? ;
.bss:000000000021A4EA                 db    ? ;
.bss:000000000021A4EB                 db    ? ;
.bss:000000000021A4EC                 db    ? ;
.bss:000000000021A4ED                 db    ? ;
.bss:000000000021A4EE                 db    ? ;
.bss:000000000021A4EF                 db    ? ;
.bss:000000000021A4F0                 db    ? ;
.bss:000000000021A4F1                 db    ? ;
.bss:000000000021A4F2                 db    ? ;
.bss:000000000021A4F3                 db    ? ;
.bss:000000000021A4F4                 db    ? ;
.bss:000000000021A4F5                 db    ? ;
.bss:000000000021A4F6                 db    ? ;
.bss:000000000021A4F7                 db    ? ;
.bss:000000000021A4F8                 db    ? ;
.bss:000000000021A4F9                 db    ? ;
.bss:000000000021A4FA                 db    ? ;
.bss:000000000021A4FB                 db    ? ;
.bss:000000000021A4FC                 db    ? ;
.bss:000000000021A4FD                 db    ? ;
.bss:000000000021A4FE                 db    ? ;
.bss:000000000021A4FF                 db    ? ;
.bss:000000000021A500                 db    ? ;
.bss:000000000021A501                 db    ? ;
.bss:000000000021A502                 db    ? ;
.bss:000000000021A503                 db    ? ;
.bss:000000000021A504                 db    ? ;
.bss:000000000021A505                 db    ? ;
.bss:000000000021A506                 db    ? ;
.bss:000000000021A507                 db    ? ;
.bss:000000000021A508                 db    ? ;
.bss:000000000021A509                 db    ? ;
.bss:000000000021A50A                 db    ? ;
.bss:000000000021A50B                 db    ? ;
.bss:000000000021A50C                 db    ? ;
.bss:000000000021A50D                 db    ? ;
.bss:000000000021A50E                 db    ? ;
.bss:000000000021A50F                 db    ? ;
.bss:000000000021A510                 db    ? ;
.bss:000000000021A511                 db    ? ;
.bss:000000000021A512                 db    ? ;
.bss:000000000021A513                 db    ? ;
.bss:000000000021A514                 db    ? ;
.bss:000000000021A515                 db    ? ;
.bss:000000000021A516                 db    ? ;
.bss:000000000021A517                 db    ? ;
.bss:000000000021A518                 db    ? ;
.bss:000000000021A519                 db    ? ;
.bss:000000000021A51A                 db    ? ;
.bss:000000000021A51B                 db    ? ;
.bss:000000000021A51C                 db    ? ;
.bss:000000000021A51D                 db    ? ;
.bss:000000000021A51E                 db    ? ;
.bss:000000000021A51F                 db    ? ;
.bss:000000000021A520                 db    ? ;
.bss:000000000021A521                 db    ? ;
.bss:000000000021A522                 db    ? ;
.bss:000000000021A523                 db    ? ;
.bss:000000000021A524                 db    ? ;
.bss:000000000021A525                 db    ? ;
.bss:000000000021A526                 db    ? ;
.bss:000000000021A527                 db    ? ;
.bss:000000000021A528                 db    ? ;
.bss:000000000021A529                 db    ? ;
.bss:000000000021A52A                 db    ? ;
.bss:000000000021A52B                 db    ? ;
.bss:000000000021A52C                 db    ? ;
.bss:000000000021A52D                 db    ? ;
.bss:000000000021A52E                 db    ? ;
.bss:000000000021A52F                 db    ? ;
.bss:000000000021A530                 db    ? ;
.bss:000000000021A531                 db    ? ;
.bss:000000000021A532                 db    ? ;
.bss:000000000021A533                 db    ? ;
.bss:000000000021A534                 db    ? ;
.bss:000000000021A535                 db    ? ;
.bss:000000000021A536                 db    ? ;
.bss:000000000021A537                 db    ? ;
.bss:000000000021A538                 db    ? ;
.bss:000000000021A539                 db    ? ;
.bss:000000000021A53A                 db    ? ;
.bss:000000000021A53B                 db    ? ;
.bss:000000000021A53C                 db    ? ;
.bss:000000000021A53D                 db    ? ;
.bss:000000000021A53E                 db    ? ;
.bss:000000000021A53F                 db    ? ;
.bss:000000000021A540                 db    ? ;
.bss:000000000021A541                 db    ? ;
.bss:000000000021A542                 db    ? ;
.bss:000000000021A543                 db    ? ;
.bss:000000000021A544                 db    ? ;
.bss:000000000021A545                 db    ? ;
.bss:000000000021A546                 db    ? ;
.bss:000000000021A547                 db    ? ;
.bss:000000000021A548                 db    ? ;
.bss:000000000021A549                 db    ? ;
.bss:000000000021A54A                 db    ? ;
.bss:000000000021A54B                 db    ? ;
.bss:000000000021A54C                 db    ? ;
.bss:000000000021A54D                 db    ? ;
.bss:000000000021A54E                 db    ? ;
.bss:000000000021A54F                 db    ? ;
.bss:000000000021A550                 db    ? ;
.bss:000000000021A551                 db    ? ;
.bss:000000000021A552                 db    ? ;
.bss:000000000021A553                 db    ? ;
.bss:000000000021A554                 db    ? ;
.bss:000000000021A555                 db    ? ;
.bss:000000000021A556                 db    ? ;
.bss:000000000021A557                 db    ? ;
.bss:000000000021A558                 db    ? ;
.bss:000000000021A559                 db    ? ;
.bss:000000000021A55A                 db    ? ;
.bss:000000000021A55B                 db    ? ;
.bss:000000000021A55C                 db    ? ;
.bss:000000000021A55D                 db    ? ;
.bss:000000000021A55E                 db    ? ;
.bss:000000000021A55F                 db    ? ;
.bss:000000000021A560 ; void *zeros_7570
.bss:000000000021A560 zeros_7570      dq ?                    ; DATA XREF: write_zeros↑r
.bss:000000000021A560                                         ; write_zeros+2F↑r ...
.bss:000000000021A568 top_level_dst_name dq ?                 ; DATA XREF: copy_internal+10A6↑r
.bss:000000000021A568                                         ; copy_internal:loc_7430↑r ...
.bss:000000000021A570 top_level_src_name dq ?                 ; DATA XREF: copy_internal+10BC↑r
.bss:000000000021A570                                         ; copy_internal+19C6↑r ...
.bss:000000000021A578 ; void *src_to_dest
.bss:000000000021A578 src_to_dest     dq ?                    ; DATA XREF: forget_created+9↑r
.bss:000000000021A578                                         ; src_to_dest_lookup+8↑r ...
.bss:000000000021A580                 public simple_backup_suffix
.bss:000000000021A580 ; char *simple_backup_suffix
.bss:000000000021A580 simple_backup_suffix dq ?               ; DATA XREF: copy_internal+D94↑r
.bss:000000000021A580                                         ; copy_internal+288B↑r ...
.bss:000000000021A588 file_name       dq ?                    ; DATA XREF: close_stdin_set_file_name↑w
.bss:000000000021A588                                         ; close_stdin+6B↑r
.bss:000000000021A590 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000021A590                                         ; close_stdout+1B↑r
.bss:000000000021A591                 align 8
.bss:000000000021A598 file_name_0     dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000021A598                                         ; close_stdout+56↑r
.bss:000000000021A5A0                 public program_name
.bss:000000000021A5A0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000021A5A0                                         ; overwrite_ok_isra_12+6A↑r ...
.bss:000000000021A5A8                 align 20h
.bss:000000000021A5C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000021A5C0                                         ; quotearg_free+46↑o ...
.bss:000000000021A5C1                 db    ? ;
.bss:000000000021A5C2                 db    ? ;
.bss:000000000021A5C3                 db    ? ;
.bss:000000000021A5C4                 db    ? ;
.bss:000000000021A5C5                 db    ? ;
.bss:000000000021A5C6                 db    ? ;
.bss:000000000021A5C7                 db    ? ;
.bss:000000000021A5C8                 db    ? ;
.bss:000000000021A5C9                 db    ? ;
.bss:000000000021A5CA                 db    ? ;
.bss:000000000021A5CB                 db    ? ;
.bss:000000000021A5CC                 db    ? ;
.bss:000000000021A5CD                 db    ? ;
.bss:000000000021A5CE                 db    ? ;
.bss:000000000021A5CF                 db    ? ;
.bss:000000000021A5D0                 db    ? ;
.bss:000000000021A5D1                 db    ? ;
.bss:000000000021A5D2                 db    ? ;
.bss:000000000021A5D3                 db    ? ;
.bss:000000000021A5D4                 db    ? ;
.bss:000000000021A5D5                 db    ? ;
.bss:000000000021A5D6                 db    ? ;
.bss:000000000021A5D7                 db    ? ;
.bss:000000000021A5D8                 db    ? ;
.bss:000000000021A5D9                 db    ? ;
.bss:000000000021A5DA                 db    ? ;
.bss:000000000021A5DB                 db    ? ;
.bss:000000000021A5DC                 db    ? ;
.bss:000000000021A5DD                 db    ? ;
.bss:000000000021A5DE                 db    ? ;
.bss:000000000021A5DF                 db    ? ;
.bss:000000000021A5E0                 db    ? ;
.bss:000000000021A5E1                 db    ? ;
.bss:000000000021A5E2                 db    ? ;
.bss:000000000021A5E3                 db    ? ;
.bss:000000000021A5E4                 db    ? ;
.bss:000000000021A5E5                 db    ? ;
.bss:000000000021A5E6                 db    ? ;
.bss:000000000021A5E7                 db    ? ;
.bss:000000000021A5E8                 db    ? ;
.bss:000000000021A5E9                 db    ? ;
.bss:000000000021A5EA                 db    ? ;
.bss:000000000021A5EB                 db    ? ;
.bss:000000000021A5EC                 db    ? ;
.bss:000000000021A5ED                 db    ? ;
.bss:000000000021A5EE                 db    ? ;
.bss:000000000021A5EF                 db    ? ;
.bss:000000000021A5F0                 db    ? ;
.bss:000000000021A5F1                 db    ? ;
.bss:000000000021A5F2                 db    ? ;
.bss:000000000021A5F3                 db    ? ;
.bss:000000000021A5F4                 db    ? ;
.bss:000000000021A5F5                 db    ? ;
.bss:000000000021A5F6                 db    ? ;
.bss:000000000021A5F7                 db    ? ;
.bss:000000000021A5F8                 db    ? ;
.bss:000000000021A5F9                 db    ? ;
.bss:000000000021A5FA                 db    ? ;
.bss:000000000021A5FB                 db    ? ;
.bss:000000000021A5FC                 db    ? ;
.bss:000000000021A5FD                 db    ? ;
.bss:000000000021A5FE                 db    ? ;
.bss:000000000021A5FF                 db    ? ;
.bss:000000000021A600                 db    ? ;
.bss:000000000021A601                 db    ? ;
.bss:000000000021A602                 db    ? ;
.bss:000000000021A603                 db    ? ;
.bss:000000000021A604                 db    ? ;
.bss:000000000021A605                 db    ? ;
.bss:000000000021A606                 db    ? ;
.bss:000000000021A607                 db    ? ;
.bss:000000000021A608                 db    ? ;
.bss:000000000021A609                 db    ? ;
.bss:000000000021A60A                 db    ? ;
.bss:000000000021A60B                 db    ? ;
.bss:000000000021A60C                 db    ? ;
.bss:000000000021A60D                 db    ? ;
.bss:000000000021A60E                 db    ? ;
.bss:000000000021A60F                 db    ? ;
.bss:000000000021A610                 db    ? ;
.bss:000000000021A611                 db    ? ;
.bss:000000000021A612                 db    ? ;
.bss:000000000021A613                 db    ? ;
.bss:000000000021A614                 db    ? ;
.bss:000000000021A615                 db    ? ;
.bss:000000000021A616                 db    ? ;
.bss:000000000021A617                 db    ? ;
.bss:000000000021A618                 db    ? ;
.bss:000000000021A619                 db    ? ;
.bss:000000000021A61A                 db    ? ;
.bss:000000000021A61B                 db    ? ;
.bss:000000000021A61C                 db    ? ;
.bss:000000000021A61D                 db    ? ;
.bss:000000000021A61E                 db    ? ;
.bss:000000000021A61F                 db    ? ;
.bss:000000000021A620                 db    ? ;
.bss:000000000021A621                 db    ? ;
.bss:000000000021A622                 db    ? ;
.bss:000000000021A623                 db    ? ;
.bss:000000000021A624                 db    ? ;
.bss:000000000021A625                 db    ? ;
.bss:000000000021A626                 db    ? ;
.bss:000000000021A627                 db    ? ;
.bss:000000000021A628                 db    ? ;
.bss:000000000021A629                 db    ? ;
.bss:000000000021A62A                 db    ? ;
.bss:000000000021A62B                 db    ? ;
.bss:000000000021A62C                 db    ? ;
.bss:000000000021A62D                 db    ? ;
.bss:000000000021A62E                 db    ? ;
.bss:000000000021A62F                 db    ? ;
.bss:000000000021A630                 db    ? ;
.bss:000000000021A631                 db    ? ;
.bss:000000000021A632                 db    ? ;
.bss:000000000021A633                 db    ? ;
.bss:000000000021A634                 db    ? ;
.bss:000000000021A635                 db    ? ;
.bss:000000000021A636                 db    ? ;
.bss:000000000021A637                 db    ? ;
.bss:000000000021A638                 db    ? ;
.bss:000000000021A639                 db    ? ;
.bss:000000000021A63A                 db    ? ;
.bss:000000000021A63B                 db    ? ;
.bss:000000000021A63C                 db    ? ;
.bss:000000000021A63D                 db    ? ;
.bss:000000000021A63E                 db    ? ;
.bss:000000000021A63F                 db    ? ;
.bss:000000000021A640                 db    ? ;
.bss:000000000021A641                 db    ? ;
.bss:000000000021A642                 db    ? ;
.bss:000000000021A643                 db    ? ;
.bss:000000000021A644                 db    ? ;
.bss:000000000021A645                 db    ? ;
.bss:000000000021A646                 db    ? ;
.bss:000000000021A647                 db    ? ;
.bss:000000000021A648                 db    ? ;
.bss:000000000021A649                 db    ? ;
.bss:000000000021A64A                 db    ? ;
.bss:000000000021A64B                 db    ? ;
.bss:000000000021A64C                 db    ? ;
.bss:000000000021A64D                 db    ? ;
.bss:000000000021A64E                 db    ? ;
.bss:000000000021A64F                 db    ? ;
.bss:000000000021A650                 db    ? ;
.bss:000000000021A651                 db    ? ;
.bss:000000000021A652                 db    ? ;
.bss:000000000021A653                 db    ? ;
.bss:000000000021A654                 db    ? ;
.bss:000000000021A655                 db    ? ;
.bss:000000000021A656                 db    ? ;
.bss:000000000021A657                 db    ? ;
.bss:000000000021A658                 db    ? ;
.bss:000000000021A659                 db    ? ;
.bss:000000000021A65A                 db    ? ;
.bss:000000000021A65B                 db    ? ;
.bss:000000000021A65C                 db    ? ;
.bss:000000000021A65D                 db    ? ;
.bss:000000000021A65E                 db    ? ;
.bss:000000000021A65F                 db    ? ;
.bss:000000000021A660                 db    ? ;
.bss:000000000021A661                 db    ? ;
.bss:000000000021A662                 db    ? ;
.bss:000000000021A663                 db    ? ;
.bss:000000000021A664                 db    ? ;
.bss:000000000021A665                 db    ? ;
.bss:000000000021A666                 db    ? ;
.bss:000000000021A667                 db    ? ;
.bss:000000000021A668                 db    ? ;
.bss:000000000021A669                 db    ? ;
.bss:000000000021A66A                 db    ? ;
.bss:000000000021A66B                 db    ? ;
.bss:000000000021A66C                 db    ? ;
.bss:000000000021A66D                 db    ? ;
.bss:000000000021A66E                 db    ? ;
.bss:000000000021A66F                 db    ? ;
.bss:000000000021A670                 db    ? ;
.bss:000000000021A671                 db    ? ;
.bss:000000000021A672                 db    ? ;
.bss:000000000021A673                 db    ? ;
.bss:000000000021A674                 db    ? ;
.bss:000000000021A675                 db    ? ;
.bss:000000000021A676                 db    ? ;
.bss:000000000021A677                 db    ? ;
.bss:000000000021A678                 db    ? ;
.bss:000000000021A679                 db    ? ;
.bss:000000000021A67A                 db    ? ;
.bss:000000000021A67B                 db    ? ;
.bss:000000000021A67C                 db    ? ;
.bss:000000000021A67D                 db    ? ;
.bss:000000000021A67E                 db    ? ;
.bss:000000000021A67F                 db    ? ;
.bss:000000000021A680                 db    ? ;
.bss:000000000021A681                 db    ? ;
.bss:000000000021A682                 db    ? ;
.bss:000000000021A683                 db    ? ;
.bss:000000000021A684                 db    ? ;
.bss:000000000021A685                 db    ? ;
.bss:000000000021A686                 db    ? ;
.bss:000000000021A687                 db    ? ;
.bss:000000000021A688                 db    ? ;
.bss:000000000021A689                 db    ? ;
.bss:000000000021A68A                 db    ? ;
.bss:000000000021A68B                 db    ? ;
.bss:000000000021A68C                 db    ? ;
.bss:000000000021A68D                 db    ? ;
.bss:000000000021A68E                 db    ? ;
.bss:000000000021A68F                 db    ? ;
.bss:000000000021A690                 db    ? ;
.bss:000000000021A691                 db    ? ;
.bss:000000000021A692                 db    ? ;
.bss:000000000021A693                 db    ? ;
.bss:000000000021A694                 db    ? ;
.bss:000000000021A695                 db    ? ;
.bss:000000000021A696                 db    ? ;
.bss:000000000021A697                 db    ? ;
.bss:000000000021A698                 db    ? ;
.bss:000000000021A699                 db    ? ;
.bss:000000000021A69A                 db    ? ;
.bss:000000000021A69B                 db    ? ;
.bss:000000000021A69C                 db    ? ;
.bss:000000000021A69D                 db    ? ;
.bss:000000000021A69E                 db    ? ;
.bss:000000000021A69F                 db    ? ;
.bss:000000000021A6A0                 db    ? ;
.bss:000000000021A6A1                 db    ? ;
.bss:000000000021A6A2                 db    ? ;
.bss:000000000021A6A3                 db    ? ;
.bss:000000000021A6A4                 db    ? ;
.bss:000000000021A6A5                 db    ? ;
.bss:000000000021A6A6                 db    ? ;
.bss:000000000021A6A7                 db    ? ;
.bss:000000000021A6A8                 db    ? ;
.bss:000000000021A6A9                 db    ? ;
.bss:000000000021A6AA                 db    ? ;
.bss:000000000021A6AB                 db    ? ;
.bss:000000000021A6AC                 db    ? ;
.bss:000000000021A6AD                 db    ? ;
.bss:000000000021A6AE                 db    ? ;
.bss:000000000021A6AF                 db    ? ;
.bss:000000000021A6B0                 db    ? ;
.bss:000000000021A6B1                 db    ? ;
.bss:000000000021A6B2                 db    ? ;
.bss:000000000021A6B3                 db    ? ;
.bss:000000000021A6B4                 db    ? ;
.bss:000000000021A6B5                 db    ? ;
.bss:000000000021A6B6                 db    ? ;
.bss:000000000021A6B7                 db    ? ;
.bss:000000000021A6B8                 db    ? ;
.bss:000000000021A6B9                 db    ? ;
.bss:000000000021A6BA                 db    ? ;
.bss:000000000021A6BB                 db    ? ;
.bss:000000000021A6BC                 db    ? ;
.bss:000000000021A6BD                 db    ? ;
.bss:000000000021A6BE                 db    ? ;
.bss:000000000021A6BF                 db    ? ;
.bss:000000000021A6C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000021A6C0                                         ; get_quoting_style↑o ...
.bss:000000000021A6D0 xmmword_21A6D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000021A6D0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000021A6E0 xmmword_21A6E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000021A6E0                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000021A6F0 qword_21A6F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000021A6F0                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000021A6F8 new_dst_res_5308 dq ?                   ; DATA XREF: utimecmpat:loc_FA49↑r
.bss:000000000021A6F8                                         ; utimecmpat+E4↑r ...
.bss:000000000021A700 ht_5307         dq ?                    ; DATA XREF: utimecmpat+86↑r
.bss:000000000021A700                                         ; utimecmpat:loc_FB88↑r ...
.bss:000000000021A708 lutimensat_works_really dd ?            ; DATA XREF: fdutimens+B5↑w
.bss:000000000021A708                                         ; lutimens+56↑r ...
.bss:000000000021A70C utimensat_works_really dd ?             ; DATA XREF: fdutimens:loc_1035A↑r
.bss:000000000021A70C                                         ; fdutimens+AB↑w ...
.bss:000000000021A710 can_write_3065  db ?                    ; DATA XREF: can_write_any_file+9↑r
.bss:000000000021A710                                         ; can_write_any_file+2D↑w
.bss:000000000021A711 initialized_3064 db ?                   ; DATA XREF: can_write_any_file↑r
.bss:000000000021A711                                         ; can_write_any_file+23↑w
.bss:000000000021A712                 align 4
.bss:000000000021A714 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000021A714                                         ; rpl_fcntl:loc_1259F↑w ...
.bss:000000000021A714 _bss            ends
.bss:000000000021A714
.prgend:000000000021A718 ; ===========================================================================
.prgend:000000000021A718
.prgend:000000000021A718 ; Segment type: Zero-length
.prgend:000000000021A718 _prgend         segment byte public '' use64
.prgend:000000000021A718 _end            label byte
.prgend:000000000021A718 _prgend         ends
.prgend:000000000021A718
extern:000000000021A720 ; ===========================================================================
extern:000000000021A720
extern:000000000021A720 ; Segment type: Externs
extern:000000000021A720 ; extern
extern:000000000021A720 ; char *getenv(const char *name)
extern:000000000021A720                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000021A720                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000021A728 ; void free(void *ptr)
extern:000000000021A728                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000021A728                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000021A730 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
extern:000000000021A730                 extrn utimensat:near    ; CODE XREF: _utimensat↑j
extern:000000000021A730                                         ; DATA XREF: .got:utimensat_ptr↑o
extern:000000000021A738 ; void __noreturn abort(void)
extern:000000000021A738                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000021A738                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000021A740 ; int *_errno_location(void)
extern:000000000021A740                 extrn __errno_location:near
extern:000000000021A740                                         ; CODE XREF: ___errno_location↑j
extern:000000000021A740                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000021A748 ; int unlink(const char *name)
extern:000000000021A748                 extrn unlink:near       ; CODE XREF: _unlink↑j
extern:000000000021A748                                         ; DATA XREF: .got:unlink_ptr↑o
extern:000000000021A750 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000021A750                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000021A750                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000021A758 ; void __noreturn exit(int status)
extern:000000000021A758                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000021A758                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000021A760 ; char *strcpy(char *dest, const char *src)
extern:000000000021A760                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000021A760                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000021A768 ; size_t _fpending(FILE *fp)
extern:000000000021A768                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000021A768                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000021A770                 extrn __read_chk:near   ; CODE XREF: ___read_chk↑j
extern:000000000021A770                                         ; DATA XREF: .got:__read_chk_ptr↑o
extern:000000000021A778 ; int mkdir(const char *path, __mode_t mode)
extern:000000000021A778                 extrn mkdir:near        ; CODE XREF: _mkdir↑j
extern:000000000021A778                                         ; DATA XREF: .got:mkdir_ptr↑o
extern:000000000021A780 ; int unlinkat(int fd, const char *name, int flag)
extern:000000000021A780                 extrn unlinkat:near     ; CODE XREF: _unlinkat↑j
extern:000000000021A780                                         ; DATA XREF: .got:unlinkat_ptr↑o
extern:000000000021A788 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000021A788                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000021A788                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000021A790 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:000000000021A790                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:000000000021A790                                         ; DATA XREF: .got:readlink_ptr↑o
extern:000000000021A798 ; int fcntl(int fd, int cmd, ...)
extern:000000000021A798                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000021A798                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000021A7A0 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:000000000021A7A0                 extrn clock_gettime:near
extern:000000000021A7A0                                         ; CODE XREF: _clock_gettime↑j
extern:000000000021A7A0                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:000000000021A7A8 ; ssize_t write(int fd, const void *buf, size_t n)
extern:000000000021A7A8                 extrn write:near        ; CODE XREF: _write↑j
extern:000000000021A7A8                                         ; DATA XREF: .got:write_ptr↑o
extern:000000000021A7B0 ; __pid_t getpid(void)
extern:000000000021A7B0                 extrn getpid:near       ; CODE XREF: _getpid↑j
extern:000000000021A7B0                                         ; DATA XREF: .got:getpid_ptr↑o
extern:000000000021A7B8 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000021A7B8                 extrn fread_unlocked:near
extern:000000000021A7B8                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000021A7B8                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000021A7C0 ; char *textdomain(const char *domainname)
extern:000000000021A7C0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000021A7C0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000021A7C8 ; __int64 pathconf(const char *path, int name)
extern:000000000021A7C8                 extrn pathconf:near     ; CODE XREF: _pathconf↑j
extern:000000000021A7C8                                         ; DATA XREF: .got:pathconf_ptr↑o
extern:000000000021A7D0 ; int fclose(FILE *stream)
extern:000000000021A7D0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000021A7D0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000021A7D8 ; DIR *opendir(const char *name)
extern:000000000021A7D8                 extrn opendir:near      ; CODE XREF: _opendir↑j
extern:000000000021A7D8                                         ; DATA XREF: .got:opendir_ptr↑o
extern:000000000021A7E0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000021A7E0                 extrn bindtextdomain:near
extern:000000000021A7E0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000021A7E0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000021A7E8 ; char *stpcpy(char *dest, const char *src)
extern:000000000021A7E8                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:000000000021A7E8                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:000000000021A7F0 ; int rmdir(const char *path)
extern:000000000021A7F0                 extrn rmdir:near        ; CODE XREF: _rmdir↑j
extern:000000000021A7F0                                         ; DATA XREF: .got:rmdir_ptr↑o
extern:000000000021A7F8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000021A7F8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000021A7F8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000021A800 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000021A800                 extrn __ctype_get_mb_cur_max:near
extern:000000000021A800                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000021A800                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000021A808 ; size_t strlen(const char *s)
extern:000000000021A808                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000021A808                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000021A810 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000021A810                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000021A810                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000021A818 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000021A818                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000021A818                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000021A820                 extrn __stack_chk_fail:near
extern:000000000021A820                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000021A820                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000021A828 ; __uid_t getuid(void)
extern:000000000021A828                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:000000000021A828                                         ; DATA XREF: .got:getuid_ptr↑o
extern:000000000021A830 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000021A830                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000021A830                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000021A838 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000021A838                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000021A838                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000021A840 ; char *strchr(const char *s, int c)
extern:000000000021A840                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000021A840                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000021A848 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000021A848                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000021A848                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000021A850 ; int _overflow(_IO_FILE *, int)
extern:000000000021A850                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000021A850                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000021A858 ; char *strrchr(const char *s, int c)
extern:000000000021A858                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000021A858                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000021A860 ; int ftruncate(int fd, __off_t length)
extern:000000000021A860                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:000000000021A860                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:000000000021A868 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000021A868                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000021A868                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000021A870 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
extern:000000000021A870                 extrn gettimeofday:near ; CODE XREF: _gettimeofday↑j
extern:000000000021A870                                         ; DATA XREF: .got:gettimeofday_ptr↑o
extern:000000000021A878 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000021A878                 extrn __assert_fail:near
extern:000000000021A878                                         ; CODE XREF: ___assert_fail↑j
extern:000000000021A878                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000021A880 ; void *memset(void *s, int c, size_t n)
extern:000000000021A880                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000021A880                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000021A888 ; __uid_t geteuid(void)
extern:000000000021A888                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:000000000021A888                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:000000000021A890 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:000000000021A890                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:000000000021A890                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:000000000021A898 ; char *canonicalize_file_name(const char *name)
extern:000000000021A898                 extrn canonicalize_file_name:near
extern:000000000021A898                                         ; CODE XREF: _canonicalize_file_name↑j
extern:000000000021A898                                         ; DATA XREF: .got:canonicalize_file_name_ptr↑o
extern:000000000021A8A0 ; int close(int fd)
extern:000000000021A8A0                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000021A8A0                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000021A8A8 ; void rewinddir(DIR *dirp)
extern:000000000021A8A8                 extrn rewinddir:near    ; CODE XREF: _rewinddir↑j
extern:000000000021A8A8                                         ; DATA XREF: .got:rewinddir_ptr↑o
extern:000000000021A8B0 ; size_t strspn(const char *s, const char *accept)
extern:000000000021A8B0                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000021A8B0                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000021A8B8 ; int closedir(DIR *dirp)
extern:000000000021A8B8                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000021A8B8                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000021A8C0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000021A8C0                 extrn posix_fadvise:near
extern:000000000021A8C0                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000021A8C0                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000021A8C8 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000021A8C8                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000021A8C8                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000021A8D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000021A8D0                 extrn __libc_start_main:near
extern:000000000021A8D0                                         ; CODE XREF: start+24↑p
extern:000000000021A8D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000021A8D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000021A8D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000021A8D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000021A8E0 ; int fallocate(int fd, int mode, __off_t offset, __off_t len)
extern:000000000021A8E0                 extrn fallocate:near    ; CODE XREF: _fallocate↑j
extern:000000000021A8E0                                         ; DATA XREF: .got:fallocate_ptr↑o
extern:000000000021A8E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000021A8E8                 extrn fputs_unlocked:near
extern:000000000021A8E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000021A8E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000021A8F0 ; int utimes(const char *file, const struct timeval tvp[2])
extern:000000000021A8F0                 extrn utimes:near       ; CODE XREF: _utimes↑j
extern:000000000021A8F0                                         ; DATA XREF: .got:utimes_ptr↑o
extern:000000000021A8F8 ; void *calloc(size_t nmemb, size_t size)
extern:000000000021A8F8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000021A8F8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000021A900 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000021A900                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:000000000021A900                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:000000000021A908 ; int strcmp(const char *s1, const char *s2)
extern:000000000021A908                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000021A908                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000021A910 ; int dirfd(DIR *dirp)
extern:000000000021A910                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000021A910                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000021A918 ; __int64 fpathconf(int fd, int name)
extern:000000000021A918                 extrn fpathconf:near    ; CODE XREF: _fpathconf↑j
extern:000000000021A918                                         ; DATA XREF: .got:fpathconf_ptr↑o
extern:000000000021A920 ; int rpmatch(const char *response)
extern:000000000021A920                 extrn rpmatch:near      ; CODE XREF: _rpmatch↑j
extern:000000000021A920                                         ; DATA XREF: .got:rpmatch_ptr↑o
extern:000000000021A928 ; __int64 syscall(__int64 sysno, ...)
extern:000000000021A928                 extrn syscall:near      ; CODE XREF: _syscall↑j
extern:000000000021A928                                         ; DATA XREF: .got:syscall_ptr↑o
extern:000000000021A930 ; int mkfifo(const char *path, __mode_t mode)
extern:000000000021A930                 extrn mkfifo:near       ; CODE XREF: _mkfifo↑j
extern:000000000021A930                                         ; DATA XREF: .got:mkfifo_ptr↑o
extern:000000000021A938 ; __mode_t umask(__mode_t mask)
extern:000000000021A938                 extrn umask:near        ; CODE XREF: _umask↑j
extern:000000000021A938                                         ; DATA XREF: .got:umask_ptr↑o
extern:000000000021A940 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000021A940                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000021A940                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000021A948 ; int _xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
extern:000000000021A948                 extrn __xmknod:near     ; CODE XREF: ___xmknod↑j
extern:000000000021A948                                         ; DATA XREF: .got:__xmknod_ptr↑o
extern:000000000021A950 ; int fileno(FILE *stream)
extern:000000000021A950                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000021A950                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000021A958 ; __gid_t getgid(void)
extern:000000000021A958                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:000000000021A958                                         ; DATA XREF: .got:getgid_ptr↑o
extern:000000000021A960 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000021A960                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000021A960                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000021A968 ; struct dirent *readdir(DIR *dirp)
extern:000000000021A968                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000021A968                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000021A970 ; void *malloc(size_t size)
extern:000000000021A970                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000021A970                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000021A978 ; int fflush(FILE *stream)
extern:000000000021A978                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000021A978                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000021A980 ; char *nl_langinfo(nl_item item)
extern:000000000021A980                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000021A980                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000021A988 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000021A988                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000021A988                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000021A990 ; int lchown(const char *file, __uid_t owner, __gid_t group)
extern:000000000021A990                 extrn lchown:near       ; CODE XREF: _lchown↑j
extern:000000000021A990                                         ; DATA XREF: .got:lchown_ptr↑o
extern:000000000021A998 ; int _freading(FILE *fp)
extern:000000000021A998                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000021A998                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000021A9A0 ; void *realloc(void *ptr, size_t size)
extern:000000000021A9A0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000021A9A0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000021A9A8 ; FILE *fdopen(int fd, const char *modes)
extern:000000000021A9A8                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000021A9A8                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000021A9B0 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
extern:000000000021A9B0                 extrn linkat:near       ; CODE XREF: _linkat↑j
extern:000000000021A9B0                                         ; DATA XREF: .got:linkat_ptr↑o
extern:000000000021A9B8 ; char *setlocale(int category, const char *locale)
extern:000000000021A9B8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000021A9B8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000021A9C0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000021A9C0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000021A9C8 ; int fchmod(int fd, __mode_t mode)
extern:000000000021A9C8                 extrn fchmod:near       ; CODE XREF: _fchmod↑j
extern:000000000021A9C8                                         ; DATA XREF: .got:fchmod_ptr↑o
extern:000000000021A9D0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000021A9D0                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000021A9D0                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000021A9D8 ; int chmod(const char *file, __mode_t mode)
extern:000000000021A9D8                 extrn chmod:near        ; CODE XREF: _chmod↑j
extern:000000000021A9D8                                         ; DATA XREF: .got:chmod_ptr↑o
extern:000000000021A9E0 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000021A9E0                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000021A9E0                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000021A9E8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000021A9E8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000021A9E8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000021A9F0                 extrn __explicit_bzero_chk:near
extern:000000000021A9F0                                         ; CODE XREF: ___explicit_bzero_chk↑j
extern:000000000021A9F0                                         ; DATA XREF: .got:__explicit_bzero_chk_ptr↑o
extern:000000000021A9F8 ; int open(const char *file, int oflag, ...)
extern:000000000021A9F8                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000021A9F8                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000021AA00 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000021AA00                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000021AA00                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000021AA08 ; int fchown(int fd, __uid_t owner, __gid_t group)
extern:000000000021AA08                 extrn fchown:near       ; CODE XREF: _fchown↑j
extern:000000000021AA08                                         ; DATA XREF: .got:fchown_ptr↑o
extern:000000000021AA10 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000021AA10                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000021AA10                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000021AA18 ; int rename(const char *old, const char *new)
extern:000000000021AA18                 extrn rename:near       ; CODE XREF: _rename↑j
extern:000000000021AA18                                         ; DATA XREF: .got:rename_ptr↑o
extern:000000000021AA20 ; DIR *fdopendir(int fd)
extern:000000000021AA20                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000021AA20                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000021AA28 ; int futimens(int fd, const struct timespec times[2])
extern:000000000021AA28                 extrn futimens:near     ; CODE XREF: _futimens↑j
extern:000000000021AA28                                         ; DATA XREF: .got:futimens_ptr↑o
extern:000000000021AA30 ; int euidaccess(const char *name, int type)
extern:000000000021AA30                 extrn euidaccess:near   ; CODE XREF: _euidaccess↑j
extern:000000000021AA30                                         ; DATA XREF: .got:euidaccess_ptr↑o
extern:000000000021AA38 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000021AA38                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000021AA38                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000021AA40 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
extern:000000000021AA40                 extrn renameat:near     ; CODE XREF: _renameat↑j
extern:000000000021AA40                                         ; DATA XREF: .got:renameat_ptr↑o
extern:000000000021AA48 ; int getpagesize(void)
extern:000000000021AA48                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:000000000021AA48                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:000000000021AA50 ; __pid_t getppid(void)
extern:000000000021AA50                 extrn getppid:near      ; CODE XREF: _getppid↑j
extern:000000000021AA50                                         ; DATA XREF: .got:getppid_ptr↑o
extern:000000000021AA58 ; void __noreturn exit(int status)
extern:000000000021AA58                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000021AA58                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000021AA60 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000021AA60                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000021AA60                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000021AA68                 extrn __fprintf_chk:near
extern:000000000021AA68                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000021AA68                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000021AA70 ; int mbsinit(const mbstate_t *ps)
extern:000000000021AA70                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000021AA70                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000021AA78 ; int symlinkat(const char *from, int tofd, const char *to)
extern:000000000021AA78                 extrn symlinkat:near    ; CODE XREF: _symlinkat↑j
extern:000000000021AA78                                         ; DATA XREF: .got:symlinkat_ptr↑o
extern:000000000021AA80 ; int iswprint(wint_t wc)
extern:000000000021AA80                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000021AA80                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000021AA88 ; int __fastcall __cxa_finalize(void *)
extern:000000000021AA88                 extrn __imp___cxa_finalize:near ; weak
extern:000000000021AA88                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000021AA88                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000021AA90 ; int futimesat(int fd, const char *file, const struct timeval tvp[2])
extern:000000000021AA90                 extrn futimesat:near    ; CODE XREF: _futimesat↑j
extern:000000000021AA90                                         ; DATA XREF: .got:futimesat_ptr↑o
extern:000000000021AA98 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000021AA98                 extrn __ctype_b_loc:near
extern:000000000021AA98                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000021AA98                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000021AAA0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000021AAA0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000021AAA8                 extrn __gmon_start__:near ; weak
extern:000000000021AAA8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000021AAA8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000021AAB0                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000021AAB0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000021AAB0
extern:000000000021AAB0
extern:000000000021AAB0                 end start
