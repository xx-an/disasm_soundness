LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7A3BA1077F0D31F87311E4EFC9C41A323E87E861949FEF5329ED02DDCAC7DE77
LOAD:0000000000000000 ; Input MD5    : F341F0EC8637D8D5DA097ECA54E279E4
LOAD:0000000000000000 ; Input CRC32  : B7E4CC29
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/uptime
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'uptime.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'c-strtod.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fprintftime.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'readutmp.c'
LOAD:0000000000000000 ; Source File : 'time_rz.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 34250h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9A58h                ; Size in file image
LOAD:00000000000000D8                 dq 9A58h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9AF0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209AF0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 590h                 ; Size in file image
LOAD:0000000000000110                 dq 748h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9BB8h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209BB8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 8830h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 8830h                ; Physical address
LOAD:00000000000001B0                 dq 2DCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2DCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9AF0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209AF0h              ; Physical address
LOAD:0000000000000220                 dq 510h                 ; Size in file image
LOAD:0000000000000228                 dq 510h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 30h, 4Ch, 0Dh, 61h, 0AFh, 4, 35h, 50h, 82h, 0EBh, 1Ch ; Desc
LOAD:0000000000000284                 db 89h, 9Ah, 0E5h, 27h, 0DFh, 0DBh, 5Eh, 4Ch, 6Eh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 49h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 49h, 4Ah, 50h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_A78, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aUtmpxname - offset byte_A78, 12h, 0, 0, \ ; "utmpxname"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aGetenv - offset byte_A78, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aLocaltime - offset byte_A78, 12h, 0, 0, \ ; "localtime"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aAbort - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aErrnoLocation - offset byte_A78, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrncpy - offset byte_A78, 12h, 0, 0, \ ; "strncpy"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aStrncmp - offset byte_A78, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aItmDeregistert - offset byte_A78, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aLocaltimeR - offset byte_A78, 12h, 0, 0, \ ; "localtime_r"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aExit - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aFpending - offset byte_A78, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aUnsetenv+2 - offset byte_A78, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A78, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aEndutxent - offset byte_A78, 12h, 0, 0, \ ; "endutxent"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrtodL - offset byte_A78, 12h, 0, 0, \ ; "strtod_l"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aFclose - offset byte_A78, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aGetloadavg - offset byte_A78, 12h, 0, 0, \ ; "getloadavg"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aBindtextdomain - offset byte_A78, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aDcgettext - offset byte_A78, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A78, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrlen - offset byte_A78, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStackChkFail - offset byte_A78, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGetoptLong - offset byte_A78, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMbrtowc - offset byte_A78, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aNewlocale - offset byte_A78, 12h, 0, 0, \ ; "newlocale"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aOverflow - offset byte_A78, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStrrchr - offset byte_A78, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aGmtimeR - offset byte_A78, 12h, 0, 0, \ ; "gmtime_r"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aLseek - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005C8                            0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemset - offset byte_A78, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFputc - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "fputc"
LOAD:00000000000005F8                            0>
LOAD:0000000000000610                 Elf64_Sym <offset aLibcStartMain - offset byte_A78, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMemcmp - offset byte_A78, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFputsUnlocked - offset byte_A78, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aCalloc - offset byte_A78, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrcmp - offset byte_A78, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aSetutxent - offset byte_A78, 12h, 0, 0, \ ; "setutxent"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aGmonStart - offset byte_A78, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMemcpy - offset byte_A78, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aTzset - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "tzset"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aKill - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "kill"
LOAD:00000000000006E8                            0>
LOAD:0000000000000700                 Elf64_Sym <offset aStrftime+4 - offset byte_A78, 12h, 0, 0, \ ; "time"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFileno - offset byte_A78, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFgetsUnlocked - offset byte_A78, 12h, 0, 0, \ ; "fgets_unlocked"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMalloc - offset byte_A78, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFflush - offset byte_A78, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aNlLanginfo - offset byte_A78, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMktime - offset byte_A78, 12h, 0, 0, \ ; "mktime"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFreading - offset byte_A78, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aRealloc - offset byte_A78, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aSetlocale - offset byte_A78, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aPrintfChk - offset byte_A78, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aTimegm - offset byte_A78, 12h, 0, 0, \ ; "timegm"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aStrftime - offset byte_A78, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aGetutxent - offset byte_A78, 12h, 0, 0, \ ; "getutxent"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aError - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000850                            0>
LOAD:0000000000000868                 Elf64_Sym <offset aFseeko - offset byte_A78, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFopen - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000880                            0>
LOAD:0000000000000898                 Elf64_Sym <offset aDcngettext - offset byte_A78, 12h, 0, 0, \ ; "dcngettext"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aUnsetenv - offset byte_A78, 12h, 0, 0, \ ; "unsetenv"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCxaAtexit - offset byte_A78, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aExit+1 - offset byte_A78, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFwrite - offset byte_A78, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFprintfChk - offset byte_A78, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aItmRegistertmc - offset byte_A78, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aMbsinit - offset byte_A78, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aIswprint - offset byte_A78, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aCxaFinalize - offset byte_A78, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_A78, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aCtypeBLoc - offset byte_A78, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aStdout - offset byte_A78, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009B8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aProgname - offset byte_A78, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000009D0                            offset __bss_start, 8>
LOAD:00000000000009E8                 Elf64_Sym <offset aProgramInvocat - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000009E8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aPrognameFull - offset byte_A78, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A00                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A18                            offset __bss_start, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aOpterr - offset byte_A78, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000A30                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000A48                 Elf64_Sym <offset aStderr - offset byte_A78, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A48                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aOptind - offset byte_A78, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A60                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A78 ; ELF String Table
LOAD:0000000000000A78 byte_A78        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A78                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A79 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000E98↓o
LOAD:0000000000000A83 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A8A aGmtimeR        db 'gmtime_r',0         ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000A93 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AA0 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000AAA aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AB2 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AB8 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000AC0 aDcngettext     db 'dcngettext',0       ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000ACB aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000AD2 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000ADA aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000AE4 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000AEA aStrncpy        db 'strncpy',0          ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AF2 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000B03 aFgetsUnlocked  db 'fgets_unlocked',0   ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B12 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000B1B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B23 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B29 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000B29                                         ; LOAD:00000000000008E0↑o
LOAD:0000000000000B2F aKill           db 'kill',0             ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B34 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B34                                         ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000B4C aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000B4C                                         ; LOAD:0000000000000700↑o
LOAD:0000000000000B55 aLocaltimeR     db 'localtime_r',0      ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000B61 aSetutxent      db 'setutxent',0        ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B6B aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B6B                                         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000B82 aGetloadavg     db 'getloadavg',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B8D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000B94 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B9B aNewlocale      db 'newlocale',0        ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000BA5 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BAC aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000BBD aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000BC4 aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BC4                                         ; LOAD:0000000000000430↑o
LOAD:0000000000000BCD aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BDB aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000BE2 aFputc          db 'fputc',0            ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000BE8 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BEE aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000BF5 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000BFC aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000C03 aTimegm         db 'timegm',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000C0A aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C12 aTzset          db 'tzset',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000C18 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C24 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000C32 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C39 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C44 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000C4B aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000C57 aUtmpxname      db 'utmpxname',0        ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C61 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C68 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C6F aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000C7A aLocaltime      db 'localtime',0        ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000C84 aEndutxent      db 'endutxent',0        ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000C8E aMktime         db 'mktime',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000C95 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C95                                         ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000CB3 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000CB3                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000CC7 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000CC7                                         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000CDB aGetutxent      db 'getutxent',0        ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000CE5 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000CF4 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000CF4                                         ; LOAD:0000000000000448↑o
LOAD:0000000000000D03 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000D0A aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000D11 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D11                                         ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000D23 aStrtodL        db 'strtod_l',0         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000D2C aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000D33 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000D3E aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000D4D aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000D52 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000D5D aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000D6D aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000D7A aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000EA8↓o
LOAD:0000000000000D86 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000EB8↓o
LOAD:0000000000000D91 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000EC8↓o
LOAD:0000000000000D9B aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000ED8↓o
LOAD:0000000000000DA7 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000EE8↓o
LOAD:0000000000000DB1 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000DB1                                         ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000DCD aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000DDC aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000DDC                                         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000DF6 ; ELF GNU Symbol Version Table
LOAD:0000000000000DF6                 dw 0
LOAD:0000000000000DF8                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000DFA                 dw 3                    ; utmpxname@@GLIBC_2.2.5
LOAD:0000000000000DFC                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000DFE                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E00                 dw 3                    ; localtime@@GLIBC_2.2.5
LOAD:0000000000000E02                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000E04                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000E06                 dw 3                    ; strncpy@@GLIBC_2.2.5
LOAD:0000000000000E08                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000E0A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000E0C                 dw 3                    ; localtime_r@@GLIBC_2.2.5
LOAD:0000000000000E0E                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000E10                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000E12                 dw 3                    ; setenv@@GLIBC_2.2.5
LOAD:0000000000000E14                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000E16                 dw 3                    ; endutxent@@GLIBC_2.2.5
LOAD:0000000000000E18                 dw 2                    ; strtod_l@@GLIBC_2.3
LOAD:0000000000000E1A                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000E1C                 dw 3                    ; getloadavg@@GLIBC_2.2.5
LOAD:0000000000000E1E                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E20                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E22                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000E24                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E26                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E28                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E2A                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E2C                 dw 2                    ; newlocale@@GLIBC_2.3
LOAD:0000000000000E2E                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000E30                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E32                 dw 3                    ; gmtime_r@@GLIBC_2.2.5
LOAD:0000000000000E34                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E36                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E38                 dw 3                    ; fputc@@GLIBC_2.2.5
LOAD:0000000000000E3A                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E3C                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E3E                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E40                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E42                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000E44                 dw 3                    ; setutxent@@GLIBC_2.2.5
LOAD:0000000000000E46                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000E48                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000E4A                 dw 3                    ; tzset@@GLIBC_2.2.5
LOAD:0000000000000E4C                 dw 3                    ; kill@@GLIBC_2.2.5
LOAD:0000000000000E4E                 dw 3                    ; time@@GLIBC_2.2.5
LOAD:0000000000000E50                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000E52                 dw 3                    ; fgets_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000E56                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000E5A                 dw 3                    ; mktime@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000E60                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000E62                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000E64                 dw 3                    ; timegm@@GLIBC_2.2.5
LOAD:0000000000000E66                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:0000000000000E68                 dw 3                    ; getutxent@@GLIBC_2.2.5
LOAD:0000000000000E6A                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000E6C                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000E6E                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 3                    ; dcngettext@@GLIBC_2.2.5
LOAD:0000000000000E72                 dw 3                    ; unsetenv@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000E76                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000E78                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E7C                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000E7E                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000E80                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000E82                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000E84                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000E86                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000E88                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000E8A                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000E8C                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000E8E                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000E90                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000E92                 dw 3                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000E94                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000E96                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000E98 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000E98                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_A78, 10h, 0> ; "libc.so.6"
LOAD:0000000000000EA8                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_A78, \ ; "GLIBC_2.3.4"
LOAD:0000000000000EA8                                10h>
LOAD:0000000000000EB8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_A78, \ ; "GLIBC_2.14"
LOAD:0000000000000EB8                                10h>
LOAD:0000000000000EC8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_A78, \ ; "GLIBC_2.4"
LOAD:0000000000000EC8                                10h>
LOAD:0000000000000ED8                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_A78, \ ; "GLIBC_2.2.5"
LOAD:0000000000000ED8                                10h>
LOAD:0000000000000EE8                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_A78, 0> ; "GLIBC_2.3"
LOAD:0000000000000EF8 ; ELF RELA Relocation Table
LOAD:0000000000000EF8                 Elf64_Rela <209AF0h, 8, 1E80h> ; R_X86_64_RELATIVE +1E80h
LOAD:0000000000000F10                 Elf64_Rela <209AF8h, 8, 1E40h> ; R_X86_64_RELATIVE +1E40h
LOAD:0000000000000F28                 Elf64_Rela <209B00h, 8, 7F82h> ; R_X86_64_RELATIVE +7F82h
LOAD:0000000000000F40                 Elf64_Rela <209B20h, 8, 7F87h> ; R_X86_64_RELATIVE +7F87h
LOAD:0000000000000F58                 Elf64_Rela <209B60h, 8, 7FE9h> ; R_X86_64_RELATIVE +7FE9h
LOAD:0000000000000F70                 Elf64_Rela <209B68h, 8, 7FF1h> ; R_X86_64_RELATIVE +7FF1h
LOAD:0000000000000F88                 Elf64_Rela <209B70h, 8, 7FF7h> ; R_X86_64_RELATIVE +7FF7h
LOAD:0000000000000FA0                 Elf64_Rela <209B78h, 8, 8004h> ; R_X86_64_RELATIVE +8004h
LOAD:0000000000000FB8                 Elf64_Rela <209B80h, 8, 8011h> ; R_X86_64_RELATIVE +8011h
LOAD:0000000000000FD0                 Elf64_Rela <209B88h, 8, 8025h> ; R_X86_64_RELATIVE +8025h
LOAD:0000000000000FE8                 Elf64_Rela <209B90h, 8, 8027h> ; R_X86_64_RELATIVE +8027h
LOAD:0000000000001000                 Elf64_Rela <209B98h, 8, 800Ah> ; R_X86_64_RELATIVE +800Ah
LOAD:0000000000001018                 Elf64_Rela <209BA0h, 8, 7A72h> ; R_X86_64_RELATIVE +7A72h
LOAD:0000000000001030                 Elf64_Rela <209BA8h, 8, 802Fh> ; R_X86_64_RELATIVE +802Fh
LOAD:0000000000001048                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000001060                 Elf64_Rela <20A010h, 8, 7D58h> ; R_X86_64_RELATIVE +7D58h
LOAD:0000000000001078                 Elf64_Rela <20A060h, 8, 20A070h> ; R_X86_64_RELATIVE +20A070h
LOAD:0000000000001090                 Elf64_Rela <20A078h, 8, 20A100h> ; R_X86_64_RELATIVE +20A100h
LOAD:00000000000010A8                 Elf64_Rela <209FD8h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000010C0                 Elf64_Rela <209FE0h, 2200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000010D8                 Elf64_Rela <209FE8h, 2800000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000010F0                 Elf64_Rela <209FF0h, 4300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001108                 Elf64_Rela <209FF8h, 4600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001120                 Elf64_Rela <20A080h, 4A00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001138                 Elf64_Rela <20A088h, 4900000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001150                 Elf64_Rela <20A090h, 5000000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001168                 Elf64_Rela <20A098h, 4C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001180                 Elf64_Rela <20A0A0h, 4E00000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000001198                 Elf64_Rela <20A0C0h, 4F00000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000011B0 ; ELF JMPREL Relocation Table
LOAD:00000000000011B0                 Elf64_Rela <209DC0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000011C8                 Elf64_Rela <209DC8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT utmpxname
LOAD:00000000000011E0                 Elf64_Rela <209DD0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000011F8                 Elf64_Rela <209DD8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001210                 Elf64_Rela <209DE0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT localtime
LOAD:0000000000001228                 Elf64_Rela <209DE8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001240                 Elf64_Rela <209DF0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001258                 Elf64_Rela <209DF8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strncpy
LOAD:0000000000001270                 Elf64_Rela <209E00h, 900000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001288                 Elf64_Rela <209E08h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT localtime_r
LOAD:00000000000012A0                 Elf64_Rela <209E10h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000012B8                 Elf64_Rela <209E18h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000012D0                 Elf64_Rela <209E20h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:00000000000012E8                 Elf64_Rela <209E28h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001300                 Elf64_Rela <209E30h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT endutxent
LOAD:0000000000001318                 Elf64_Rela <209E38h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strtod_l
LOAD:0000000000001330                 Elf64_Rela <209E40h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001348                 Elf64_Rela <209E48h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT getloadavg
LOAD:0000000000001360                 Elf64_Rela <209E50h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001378                 Elf64_Rela <209E58h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001390                 Elf64_Rela <209E60h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000013A8                 Elf64_Rela <209E68h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000013C0                 Elf64_Rela <209E70h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000013D8                 Elf64_Rela <209E78h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000013F0                 Elf64_Rela <209E80h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001408                 Elf64_Rela <209E88h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT newlocale
LOAD:0000000000001420                 Elf64_Rela <209E90h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001438                 Elf64_Rela <209E98h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001450                 Elf64_Rela <209EA0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT gmtime_r
LOAD:0000000000001468                 Elf64_Rela <209EA8h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001480                 Elf64_Rela <209EB0h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001498                 Elf64_Rela <209EB8h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fputc
LOAD:00000000000014B0                 Elf64_Rela <209EC0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000014C8                 Elf64_Rela <209EC8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000014E0                 Elf64_Rela <209ED0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000014F8                 Elf64_Rela <209ED8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001510                 Elf64_Rela <209EE0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT setutxent
LOAD:0000000000001528                 Elf64_Rela <209EE8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001540                 Elf64_Rela <209EF0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT tzset
LOAD:0000000000001558                 Elf64_Rela <209EF8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT kill
LOAD:0000000000001570                 Elf64_Rela <209F00h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT time
LOAD:0000000000001588                 Elf64_Rela <209F08h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000015A0                 Elf64_Rela <209F10h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fgets_unlocked
LOAD:00000000000015B8                 Elf64_Rela <209F18h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000015D0                 Elf64_Rela <209F20h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000015E8                 Elf64_Rela <209F28h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001600                 Elf64_Rela <209F30h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mktime
LOAD:0000000000001618                 Elf64_Rela <209F38h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001630                 Elf64_Rela <209F40h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001648                 Elf64_Rela <209F48h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001660                 Elf64_Rela <209F50h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001678                 Elf64_Rela <209F58h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT timegm
LOAD:0000000000001690                 Elf64_Rela <209F60h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:00000000000016A8                 Elf64_Rela <209F68h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT getutxent
LOAD:00000000000016C0                 Elf64_Rela <209F70h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000016D8                 Elf64_Rela <209F78h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000016F0                 Elf64_Rela <209F80h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001708                 Elf64_Rela <209F88h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT dcngettext
LOAD:0000000000001720                 Elf64_Rela <209F90h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:0000000000001738                 Elf64_Rela <209F98h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001750                 Elf64_Rela <209FA0h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001768                 Elf64_Rela <209FA8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001780                 Elf64_Rela <209FB0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001798                 Elf64_Rela <209FB8h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000017B0                 Elf64_Rela <209FC0h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000017C8                 Elf64_Rela <209FC8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:00000000000017E0                 Elf64_Rela <209FD0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000017E0 LOAD            ends
LOAD:00000000000017E0
.init:00000000000017F8 ; ===========================================================================
.init:00000000000017F8
.init:00000000000017F8 ; Segment type: Pure code
.init:00000000000017F8 ; Segment permissions: Read/Execute
.init:00000000000017F8 _init           segment dword public 'CODE' use64
.init:00000000000017F8                 assume cs:_init
.init:00000000000017F8                 ;org 17F8h
.init:00000000000017F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000017F8
.init:00000000000017F8 ; =============== S U B R O U T I N E =======================================
.init:00000000000017F8
.init:00000000000017F8
.init:00000000000017F8                 public _init_proc
.init:00000000000017F8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000017F8                 sub     rsp, 8          ; _init
.init:00000000000017FC                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001803                 test    rax, rax
.init:0000000000001806                 jz      short loc_180A
.init:0000000000001808                 call    rax ; __gmon_start__
.init:000000000000180A
.init:000000000000180A loc_180A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000180A                 add     rsp, 8
.init:000000000000180E                 retn
.init:000000000000180E _init_proc      endp
.init:000000000000180E
.init:000000000000180E _init           ends
.init:000000000000180E
LOAD:000000000000180F ; ===========================================================================
LOAD:000000000000180F
LOAD:000000000000180F ; Segment type: Pure code
LOAD:000000000000180F ; Segment permissions: Read/Execute
LOAD:000000000000180F LOAD            segment byte public 'CODE' use64
LOAD:000000000000180F                 assume cs:LOAD
LOAD:000000000000180F                 ;org 180Fh
LOAD:000000000000180F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000180F                 align 10h
LOAD:000000000000180F LOAD            ends
LOAD:000000000000180F
.plt:0000000000001810 ; ===========================================================================
.plt:0000000000001810
.plt:0000000000001810 ; Segment type: Pure code
.plt:0000000000001810 ; Segment permissions: Read/Execute
.plt:0000000000001810 _plt            segment para public 'CODE' use64
.plt:0000000000001810                 assume cs:_plt
.plt:0000000000001810                 ;org 1810h
.plt:0000000000001810                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810
.plt:0000000000001810 sub_1810        proc near               ; CODE XREF: .plt:000000000000182B↓j
.plt:0000000000001810                                         ; .plt:000000000000183B↓j ...
.plt:0000000000001810 ; __unwind {
.plt:0000000000001810                 push    cs:qword_209DB0
.plt:0000000000001816                 jmp     cs:qword_209DB8
.plt:0000000000001816 sub_1810        endp
.plt:0000000000001816
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:000000000000181C                 align 20h
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001820 ___ctype_toupper_loc proc near          ; CODE XREF: fwrite_uppcase+1B↓p
.plt:0000000000001820                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001820 ___ctype_toupper_loc endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    0
.plt:000000000000182B                 jmp     sub_1810
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; int utmpxname(const char *file)
.plt:0000000000001830 _utmpxname      proc near               ; CODE XREF: read_utmp+2C↓p
.plt:0000000000001830                 jmp     cs:utmpxname_ptr
.plt:0000000000001830 _utmpxname      endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    1
.plt:000000000000183B                 jmp     sub_1810
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; char *getenv(const char *name)
.plt:0000000000001840 _getenv         proc near               ; CODE XREF: set_tz+12↓p
.plt:0000000000001840                 jmp     cs:getenv_ptr
.plt:0000000000001840 _getenv         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    2
.plt:000000000000184B                 jmp     sub_1810
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; void free(void *ptr)
.plt:0000000000001850 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001850                                         ; quotearg_free+37↓p ...
.plt:0000000000001850                 jmp     cs:free_ptr
.plt:0000000000001850 _free           endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    3
.plt:000000000000185B                 jmp     sub_1810
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; struct tm *localtime(const time_t *timer)
.plt:0000000000001860 _localtime      proc near               ; CODE XREF: print_uptime+160↓p
.plt:0000000000001860                 jmp     cs:localtime_ptr
.plt:0000000000001860 _localtime      endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    4
.plt:000000000000186B                 jmp     sub_1810
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: noreturn thunk
.plt:0000000000001870
.plt:0000000000001870 ; void __noreturn abort(void)
.plt:0000000000001870 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001870                                         ; quotearg_buffer_restyled:def_4A11↓p ...
.plt:0000000000001870                 jmp     cs:abort_ptr
.plt:0000000000001870 _abort          endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    5
.plt:000000000000187B                 jmp     sub_1810
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; int *__errno_location(void)
.plt:0000000000001880 ___errno_location proc near             ; CODE XREF: print_uptime+3FD↓p
.plt:0000000000001880                                         ; uptime+6D↓p ...
.plt:0000000000001880                 jmp     cs:__errno_location_ptr
.plt:0000000000001880 ___errno_location endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    6
.plt:000000000000188B                 jmp     sub_1810
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; char *strncpy(char *dest, const char *src, size_t n)
.plt:0000000000001890 _strncpy        proc near               ; CODE XREF: extract_trimmed_name+22↓p
.plt:0000000000001890                 jmp     cs:strncpy_ptr
.plt:0000000000001890 _strncpy        endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    7
.plt:000000000000189B                 jmp     sub_1810
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000018A0 _strncmp        proc near               ; CODE XREF: usage+254↓p
.plt:00000000000018A0                                         ; usage+315↓p
.plt:00000000000018A0                 jmp     cs:strncmp_ptr
.plt:00000000000018A0 _strncmp        endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    8
.plt:00000000000018AB                 jmp     sub_1810
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000018B0 _localtime_r    proc near               ; CODE XREF: localtime_rz+2B↓p
.plt:00000000000018B0                                         ; mktime_z+AA↓p
.plt:00000000000018B0                 jmp     cs:localtime_r_ptr
.plt:00000000000018B0 _localtime_r    endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    9
.plt:00000000000018BB                 jmp     sub_1810
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: noreturn thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; void __noreturn _exit(int status)
.plt:00000000000018C0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000018C0                 jmp     cs:_exit_ptr
.plt:00000000000018C0 __exit          endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    0Ah
.plt:00000000000018CB                 jmp     sub_1810
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; size_t __fpending(FILE *fp)
.plt:00000000000018D0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000018D0                 jmp     cs:__fpending_ptr
.plt:00000000000018D0 ___fpending     endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    0Bh
.plt:00000000000018DB                 jmp     sub_1810
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; int setenv(const char *name, const char *value, int replace)
.plt:00000000000018E0 _setenv         proc near               ; CODE XREF: setenv_TZ+14↓j
.plt:00000000000018E0                 jmp     cs:setenv_ptr
.plt:00000000000018E0 _setenv         endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    0Ch
.plt:00000000000018EB                 jmp     sub_1810
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; char *textdomain(const char *domainname)
.plt:00000000000018F0 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:00000000000018F0                 jmp     cs:textdomain_ptr
.plt:00000000000018F0 _textdomain     endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    0Dh
.plt:00000000000018FB                 jmp     sub_1810
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; void endutxent(void)
.plt:0000000000001900 _endutxent      proc near               ; CODE XREF: read_utmp:loc_7091↓p
.plt:0000000000001900                 jmp     cs:endutxent_ptr
.plt:0000000000001900 _endutxent      endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    0Eh
.plt:000000000000190B                 jmp     sub_1810
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
.plt:0000000000001910 _strtod_l       proc near               ; CODE XREF: c_strtod+30↓j
.plt:0000000000001910                 jmp     cs:strtod_l_ptr
.plt:0000000000001910 _strtod_l       endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    0Fh
.plt:000000000000191B                 jmp     sub_1810
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; int fclose(FILE *stream)
.plt:0000000000001920 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001920                                         ; rpl_fclose+6B↓j
.plt:0000000000001920                 jmp     cs:fclose_ptr
.plt:0000000000001920 _fclose         endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    10h
.plt:000000000000192B                 jmp     sub_1810
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int getloadavg(double loadavg[], int nelem)
.plt:0000000000001930 _getloadavg     proc near               ; CODE XREF: print_uptime+21D↓p
.plt:0000000000001930                 jmp     cs:getloadavg_ptr
.plt:0000000000001930 _getloadavg     endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    11h
.plt:000000000000193B                 jmp     sub_1810
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001940 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:0000000000001940                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001940 _bindtextdomain endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    12h
.plt:000000000000194B                 jmp     sub_1810
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001950 _dcgettext      proc near               ; CODE XREF: main+F3↓p
.plt:0000000000001950                                         ; print_uptime+17F↓p ...
.plt:0000000000001950                 jmp     cs:dcgettext_ptr
.plt:0000000000001950 _dcgettext      endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    13h
.plt:000000000000195B                 jmp     sub_1810
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001960 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001960                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001960 ___ctype_get_mb_cur_max endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    14h
.plt:000000000000196B                 jmp     sub_1810
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; size_t strlen(const char *s)
.plt:0000000000001970 _strlen         proc near               ; CODE XREF: __strftime_internal+1072↓p
.plt:0000000000001970                                         ; quotearg_buffer_restyled+157↓p ...
.plt:0000000000001970                 jmp     cs:strlen_ptr
.plt:0000000000001970 _strlen         endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    15h
.plt:000000000000197B                 jmp     sub_1810
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: noreturn thunk
.plt:0000000000001980
.plt:0000000000001980 ___stack_chk_fail proc near             ; CODE XREF: print_uptime:loc_22BD↓p
.plt:0000000000001980                                         ; uptime:loc_235A↓p ...
.plt:0000000000001980                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001980 ___stack_chk_fail endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    16h
.plt:000000000000198B                 jmp     sub_1810
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001990 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:0000000000001990                                         ; parse_gnu_standard_options_only+9A↓p
.plt:0000000000001990                 jmp     cs:getopt_long_ptr
.plt:0000000000001990 _getopt_long    endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    17h
.plt:000000000000199B                 jmp     sub_1810
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000019A0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000019A0                 jmp     cs:mbrtowc_ptr
.plt:00000000000019A0 _mbrtowc        endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    18h
.plt:00000000000019AB                 jmp     sub_1810
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
.plt:00000000000019B0 _newlocale      proc near               ; CODE XREF: c_strtod+5E↓p
.plt:00000000000019B0                 jmp     cs:newlocale_ptr
.plt:00000000000019B0 _newlocale      endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    19h
.plt:00000000000019BB                 jmp     sub_1810
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000019C0 ___overflow     proc near               ; CODE XREF: print_uptime+418↓p
.plt:00000000000019C0                 jmp     cs:__overflow_ptr
.plt:00000000000019C0 ___overflow     endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    1Ah
.plt:00000000000019CB                 jmp     sub_1810
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; char *strrchr(const char *s, int c)
.plt:00000000000019D0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000019D0                 jmp     cs:strrchr_ptr
.plt:00000000000019D0 _strrchr        endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    1Bh
.plt:00000000000019DB                 jmp     sub_1810
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000019E0 _gmtime_r       proc near               ; CODE XREF: localtime_rz+90↓j
.plt:00000000000019E0                 jmp     cs:gmtime_r_ptr
.plt:00000000000019E0 _gmtime_r       endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    1Ch
.plt:00000000000019EB                 jmp     sub_1810
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000019F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000019F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000019F0                 jmp     cs:lseek_ptr
.plt:00000000000019F0 _lseek          endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    1Dh
.plt:00000000000019FB                 jmp     sub_1810
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001A00 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001A00                                         ; xzalloc+12↓j
.plt:0000000000001A00                 jmp     cs:memset_ptr
.plt:0000000000001A00 _memset         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    1Eh
.plt:0000000000001A0B                 jmp     sub_1810
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; int fputc(int c, FILE *stream)
.plt:0000000000001A10 _fputc          proc near               ; CODE XREF: fwrite_lowcase+39↓p
.plt:0000000000001A10                                         ; fwrite_uppcase+39↓p ...
.plt:0000000000001A10                 jmp     cs:fputc_ptr
.plt:0000000000001A10 _fputc          endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    1Fh
.plt:0000000000001A1B                 jmp     sub_1810
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001A20 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001A20                 jmp     cs:memcmp_ptr
.plt:0000000000001A20 _memcmp         endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    20h ; ' '
.plt:0000000000001A2B                 jmp     sub_1810
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001A30 _fputs_unlocked proc near               ; CODE XREF: usage+111↓p
.plt:0000000000001A30                                         ; usage+13D↓p ...
.plt:0000000000001A30                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001A30 _fputs_unlocked endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    21h ; '!'
.plt:0000000000001A3B                 jmp     sub_1810
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001A40 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001A40                 jmp     cs:calloc_ptr
.plt:0000000000001A40 _calloc         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    22h ; '"'
.plt:0000000000001A4B                 jmp     sub_1810
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001A50 _strcmp         proc near               ; CODE XREF: save_abbr+46↓p
.plt:0000000000001A50                                         ; save_abbr+8E↓p ...
.plt:0000000000001A50                 jmp     cs:strcmp_ptr
.plt:0000000000001A50 _strcmp         endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    23h ; '#'
.plt:0000000000001A5B                 jmp     sub_1810
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; void setutxent(void)
.plt:0000000000001A60 _setutxent      proc near               ; CODE XREF: read_utmp+31↓p
.plt:0000000000001A60                 jmp     cs:setutxent_ptr
.plt:0000000000001A60 _setutxent      endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    24h ; '$'
.plt:0000000000001A6B                 jmp     sub_1810
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001A70 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001A70                                         ; tzalloc+51↓p ...
.plt:0000000000001A70                 jmp     cs:memcpy_ptr
.plt:0000000000001A70 _memcpy         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    25h ; '%'
.plt:0000000000001A7B                 jmp     sub_1810
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; void tzset(void)
.plt:0000000000001A80 _tzset          proc near               ; CODE XREF: revert_tz:loc_7220↓p
.plt:0000000000001A80                                         ; set_tz:loc_74D8↓p
.plt:0000000000001A80                 jmp     cs:tzset_ptr
.plt:0000000000001A80 _tzset          endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    26h ; '&'
.plt:0000000000001A8B                 jmp     sub_1810
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; int kill(__pid_t pid, int sig)
.plt:0000000000001A90 _kill           proc near               ; CODE XREF: read_utmp+F7↓p
.plt:0000000000001A90                 jmp     cs:kill_ptr
.plt:0000000000001A90 _kill           endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    27h ; '''
.plt:0000000000001A9B                 jmp     sub_1810
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; time_t time(time_t *timer)
.plt:0000000000001AA0 _time           proc near               ; CODE XREF: print_uptime+C2↓p
.plt:0000000000001AA0                                         ; print_uptime+3C6↓p ...
.plt:0000000000001AA0                 jmp     cs:time_ptr
.plt:0000000000001AA0 _time           endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    28h ; '('
.plt:0000000000001AAB                 jmp     sub_1810
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int fileno(FILE *stream)
.plt:0000000000001AB0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001AB0                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001AB0                 jmp     cs:fileno_ptr
.plt:0000000000001AB0 _fileno         endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    29h ; ')'
.plt:0000000000001ABB                 jmp     sub_1810
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; char *fgets_unlocked(char *s, int n, FILE *stream)
.plt:0000000000001AC0 _fgets_unlocked proc near               ; CODE XREF: print_uptime+5A↓p
.plt:0000000000001AC0                 jmp     cs:fgets_unlocked_ptr
.plt:0000000000001AC0 _fgets_unlocked endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    2Ah ; '*'
.plt:0000000000001ACB                 jmp     sub_1810
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; void *malloc(size_t size)
.plt:0000000000001AD0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001AD0                                         ; tzalloc+2A↓p ...
.plt:0000000000001AD0                 jmp     cs:malloc_ptr
.plt:0000000000001AD0 _malloc         endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    2Bh ; '+'
.plt:0000000000001ADB                 jmp     sub_1810
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int fflush(FILE *stream)
.plt:0000000000001AE0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001AE0                                         ; rpl_fflush+3B↓j
.plt:0000000000001AE0                 jmp     cs:fflush_ptr
.plt:0000000000001AE0 _fflush         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    2Ch ; ','
.plt:0000000000001AEB                 jmp     sub_1810
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; char *nl_langinfo(nl_item item)
.plt:0000000000001AF0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001AF0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001AF0 _nl_langinfo    endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    2Dh ; '-'
.plt:0000000000001AFB                 jmp     sub_1810
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; time_t mktime(struct tm *tp)
.plt:0000000000001B00 _mktime         proc near               ; CODE XREF: mktime_z+3B↓p
.plt:0000000000001B00                 jmp     cs:mktime_ptr
.plt:0000000000001B00 _mktime         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    2Eh ; '.'
.plt:0000000000001B0B                 jmp     sub_1810
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int __freading(FILE *fp)
.plt:0000000000001B10 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001B10                                         ; rpl_fflush+9↓p
.plt:0000000000001B10                 jmp     cs:__freading_ptr
.plt:0000000000001B10 ___freading     endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    2Fh ; '/'
.plt:0000000000001B1B                 jmp     sub_1810
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001B20 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001B20                 jmp     cs:realloc_ptr
.plt:0000000000001B20 _realloc        endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    30h ; '0'
.plt:0000000000001B2B                 jmp     sub_1810
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; char *setlocale(int category, const char *locale)
.plt:0000000000001B30 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:0000000000001B30                                         ; usage+23B↓p ...
.plt:0000000000001B30                 jmp     cs:setlocale_ptr
.plt:0000000000001B30 _setlocale      endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    31h ; '1'
.plt:0000000000001B3B                 jmp     sub_1810
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ___printf_chk   proc near               ; CODE XREF: print_uptime+1DE↓p
.plt:0000000000001B40                                         ; print_uptime+20E↓p ...
.plt:0000000000001B40                 jmp     cs:__printf_chk_ptr
.plt:0000000000001B40 ___printf_chk   endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    32h ; '2'
.plt:0000000000001B4B                 jmp     sub_1810
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; time_t timegm(struct tm *tp)
.plt:0000000000001B50 _timegm         proc near               ; CODE XREF: mktime_z+123↓p
.plt:0000000000001B50                 jmp     cs:timegm_ptr
.plt:0000000000001B50 _timegm         endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    33h ; '3'
.plt:0000000000001B5B                 jmp     sub_1810
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000001B60 _strftime       proc near               ; CODE XREF: __strftime_internal+3FC↓p
.plt:0000000000001B60                 jmp     cs:strftime_ptr
.plt:0000000000001B60 _strftime       endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    34h ; '4'
.plt:0000000000001B6B                 jmp     sub_1810
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; struct utmpx *getutxent(void)
.plt:0000000000001B70 _getutxent      proc near               ; CODE XREF: read_utmp:loc_7016↓p
.plt:0000000000001B70                                         ; read_utmp+A4↓p
.plt:0000000000001B70                 jmp     cs:getutxent_ptr
.plt:0000000000001B70 _getutxent      endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    35h ; '5'
.plt:0000000000001B7B                 jmp     sub_1810
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001B80 _error          proc near               ; CODE XREF: main+104↓p
.plt:0000000000001B80                                         ; print_uptime+40E↓p ...
.plt:0000000000001B80                 jmp     cs:error_ptr
.plt:0000000000001B80 _error          endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    36h ; '6'
.plt:0000000000001B8B                 jmp     sub_1810
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001B90 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_6E9A↓j
.plt:0000000000001B90                 jmp     cs:fseeko_ptr
.plt:0000000000001B90 _fseeko         endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    37h ; '7'
.plt:0000000000001B9B                 jmp     sub_1810
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001BA0 _fopen          proc near               ; CODE XREF: print_uptime+3D↓p
.plt:0000000000001BA0                 jmp     cs:fopen_ptr
.plt:0000000000001BA0 _fopen          endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    38h ; '8'
.plt:0000000000001BAB                 jmp     sub_1810
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
.plt:0000000000001BB0 _dcngettext     proc near               ; CODE XREF: print_uptime+1C7↓p
.plt:0000000000001BB0                                         ; print_uptime+1FC↓p
.plt:0000000000001BB0                 jmp     cs:dcngettext_ptr
.plt:0000000000001BB0 _dcngettext     endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    39h ; '9'
.plt:0000000000001BBB                 jmp     sub_1810
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int unsetenv(const char *name)
.plt:0000000000001BC0 _unsetenv       proc near               ; CODE XREF: setenv_TZ+27↓j
.plt:0000000000001BC0                 jmp     cs:unsetenv_ptr
.plt:0000000000001BC0 _unsetenv       endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    3Ah ; ':'
.plt:0000000000001BCB                 jmp     sub_1810
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001BD0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001BD0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001BD0 ___cxa_atexit   endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    3Bh ; ';'
.plt:0000000000001BDB                 jmp     sub_1810
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: noreturn thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; void __noreturn exit(int status)
.plt:0000000000001BE0 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001BE0                                         ; parse_long_options+122↓p ...
.plt:0000000000001BE0                 jmp     cs:exit_ptr
.plt:0000000000001BE0 _exit           endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    3Ch ; '<'
.plt:0000000000001BEB                 jmp     sub_1810
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001BF0 _fwrite         proc near               ; CODE XREF: __strftime_internal+13F8↓p
.plt:0000000000001BF0                                         ; __strftime_internal+141C↓p ...
.plt:0000000000001BF0                 jmp     cs:fwrite_ptr
.plt:0000000000001BF0 _fwrite         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    3Dh ; '='
.plt:0000000000001BFB                 jmp     sub_1810
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001C00                                         ; version_etc_arn+37↓p ...
.plt:0000000000001C00                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001C00 ___fprintf_chk  endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    3Eh ; '>'
.plt:0000000000001C0B                 jmp     sub_1810
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001C10 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001C10                 jmp     cs:mbsinit_ptr
.plt:0000000000001C10 _mbsinit        endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    3Fh ; '?'
.plt:0000000000001C1B                 jmp     sub_1810
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int iswprint(wint_t wc)
.plt:0000000000001C20 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001C20                 jmp     cs:iswprint_ptr
.plt:0000000000001C20 _iswprint       endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    40h ; '@'
.plt:0000000000001C2B                 jmp     sub_1810
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001C30 ___ctype_tolower_loc proc near          ; CODE XREF: fwrite_lowcase+1B↓p
.plt:0000000000001C30                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001C30 ___ctype_tolower_loc endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    41h ; 'A'
.plt:0000000000001C3B                 jmp     sub_1810
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001C40 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001C40                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001C40 ___ctype_b_loc  endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    42h ; 'B'
.plt:0000000000001C4B                 jmp     sub_1810
.plt:0000000000001C4B ; } // starts at 1810
.plt:0000000000001C4B _plt            ends
.plt:0000000000001C4B
.plt.got:0000000000001C50 ; ===========================================================================
.plt.got:0000000000001C50
.plt.got:0000000000001C50 ; Segment type: Pure code
.plt.got:0000000000001C50 ; Segment permissions: Read/Execute
.plt.got:0000000000001C50 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001C50                 assume cs:_plt_got
.plt.got:0000000000001C50                 ;org 1C50h
.plt.got:0000000000001C50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001C50
.plt.got:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001C50
.plt.got:0000000000001C50 ; Attributes: thunk
.plt.got:0000000000001C50
.plt.got:0000000000001C50 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001C50 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001C50 ; __unwind {
.plt.got:0000000000001C50                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001C50 __cxa_finalize  endp
.plt.got:0000000000001C50
.plt.got:0000000000001C50 ; ---------------------------------------------------------------------------
.plt.got:0000000000001C56                 align 8
.plt.got:0000000000001C56 ; } // starts at 1C50
.plt.got:0000000000001C56 _plt_got        ends
.plt.got:0000000000001C56
LOAD:0000000000001C58 ; ===========================================================================
LOAD:0000000000001C58
LOAD:0000000000001C58 ; Segment type: Pure code
LOAD:0000000000001C58 ; Segment permissions: Read/Execute
LOAD:0000000000001C58 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001C58                 assume cs:LOAD
LOAD:0000000000001C58                 ;org 1C58h
LOAD:0000000000001C58                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001C58                 align 20h
LOAD:0000000000001C58 LOAD            ends
LOAD:0000000000001C58
.text:0000000000001C60 ; ===========================================================================
.text:0000000000001C60
.text:0000000000001C60 ; Segment type: Pure code
.text:0000000000001C60 ; Segment permissions: Read/Execute
.text:0000000000001C60 _text           segment para public 'CODE' use64
.text:0000000000001C60                 assume cs:_text
.text:0000000000001C60                 ;org 1C60h
.text:0000000000001C60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001C60
.text:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C60
.text:0000000000001C60
.text:0000000000001C60 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001C60                 public main
.text:0000000000001C60 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001C60 ; __unwind {
.text:0000000000001C60                 push    rbp
.text:0000000000001C61                 push    rbx
.text:0000000000001C62                 mov     ebx, edi
.text:0000000000001C64                 mov     rbp, rsi
.text:0000000000001C67                 sub     rsp, 8
.text:0000000000001C6B                 mov     rdi, [rsi]
.text:0000000000001C6E                 call    set_program_name
.text:0000000000001C73                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001C7A                 mov     edi, 6          ; category
.text:0000000000001C7F                 call    _setlocale
.text:0000000000001C84                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001C8B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001C92                 call    _bindtextdomain
.text:0000000000001C97                 lea     rdi, domainname ; "coreutils"
.text:0000000000001C9E                 call    _textdomain
.text:0000000000001CA3                 lea     rdi, close_stdout
.text:0000000000001CAA                 call    atexit
.text:0000000000001CAF                 lea     rax, aKavehGhazi ; "Kaveh Ghazi"
.text:0000000000001CB6                 sub     rsp, 8
.text:0000000000001CBA                 mov     r8, cs:Version
.text:0000000000001CC1                 push    0
.text:0000000000001CC3                 lea     rcx, unk_7A34
.text:0000000000001CCA                 lea     rdx, aUptime    ; "uptime"
.text:0000000000001CD1                 push    rax
.text:0000000000001CD2                 lea     rax, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001CD9                 mov     edi, ebx
.text:0000000000001CDB                 mov     r9d, 1
.text:0000000000001CE1                 mov     rsi, rbp
.text:0000000000001CE4                 push    rax
.text:0000000000001CE5                 lea     rax, aJosephArceneau ; "Joseph Arceneaux"
.text:0000000000001CEC                 push    rax
.text:0000000000001CED                 lea     rax, usage
.text:0000000000001CF4                 push    rax
.text:0000000000001CF5                 xor     eax, eax
.text:0000000000001CF7                 call    parse_gnu_standard_options_only
.text:0000000000001CFC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001D03                 add     rsp, 30h
.text:0000000000001D07                 sub     ebx, eax
.text:0000000000001D09                 jz      short loc_1D25
.text:0000000000001D0B                 sub     ebx, 1
.text:0000000000001D0E                 jnz     short loc_1D38
.text:0000000000001D10                 mov     rdi, [rbp+rax*8+0]
.text:0000000000001D15                 xor     esi, esi
.text:0000000000001D17                 call    uptime
.text:0000000000001D1C
.text:0000000000001D1C loc_1D1C:                               ; CODE XREF: main+D6↓j
.text:0000000000001D1C                 add     rsp, 8
.text:0000000000001D20                 xor     eax, eax
.text:0000000000001D22                 pop     rbx
.text:0000000000001D23                 pop     rbp
.text:0000000000001D24                 retn
.text:0000000000001D25 ; ---------------------------------------------------------------------------
.text:0000000000001D25
.text:0000000000001D25 loc_1D25:                               ; CODE XREF: main+A9↑j
.text:0000000000001D25                 lea     rdi, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000001D2C                 mov     esi, 1
.text:0000000000001D31                 call    uptime
.text:0000000000001D36                 jmp     short loc_1D1C
.text:0000000000001D38 ; ---------------------------------------------------------------------------
.text:0000000000001D38
.text:0000000000001D38 loc_1D38:                               ; CODE XREF: main+AE↑j
.text:0000000000001D38                 mov     rdi, [rbp+rax*8+8]
.text:0000000000001D3D                 call    quote
.text:0000000000001D42                 lea     rsi, msgid      ; "extra operand %s"
.text:0000000000001D49                 mov     rbx, rax
.text:0000000000001D4C                 mov     edx, 5          ; category
.text:0000000000001D51                 xor     edi, edi        ; domainname
.text:0000000000001D53                 call    _dcgettext
.text:0000000000001D58                 xor     edi, edi        ; status
.text:0000000000001D5A                 mov     rdx, rax        ; format
.text:0000000000001D5D                 mov     rcx, rbx
.text:0000000000001D60                 xor     esi, esi        ; errnum
.text:0000000000001D62                 xor     eax, eax
.text:0000000000001D64                 call    _error
.text:0000000000001D69                 mov     edi, 1          ; status
.text:0000000000001D6E                 call    usage
.text:0000000000001D6E ; } // starts at 1C60
.text:0000000000001D6E main            endp
.text:0000000000001D6E
.text:0000000000001D6E ; ---------------------------------------------------------------------------
.text:0000000000001D73                 align 20h
.text:0000000000001D80
.text:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D80
.text:0000000000001D80 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001D80
.text:0000000000001D80 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001D80                 public start
.text:0000000000001D80 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001D80 ; __unwind {
.text:0000000000001D80                 xor     ebp, ebp
.text:0000000000001D82                 mov     r9, rdx         ; rtld_fini
.text:0000000000001D85                 pop     rsi             ; argc
.text:0000000000001D86                 mov     rdx, rsp        ; ubp_av
.text:0000000000001D89                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001D8D                 push    rax
.text:0000000000001D8E                 push    rsp             ; stack_end
.text:0000000000001D8F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001D96                 lea     rcx, __libc_csu_init ; init
.text:0000000000001D9D                 lea     rdi, main       ; main
.text:0000000000001DA4                 call    cs:__libc_start_main_ptr
.text:0000000000001DAA                 hlt
.text:0000000000001DAA ; } // starts at 1D80
.text:0000000000001DAA start           endp
.text:0000000000001DAA
.text:0000000000001DAA ; ---------------------------------------------------------------------------
.text:0000000000001DAB                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DB0
.text:0000000000001DB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001DB0
.text:0000000000001DB0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1E63↓p
.text:0000000000001DB0                 lea     rdi, __bss_start
.text:0000000000001DB7                 push    rbp
.text:0000000000001DB8                 lea     rax, __bss_start
.text:0000000000001DBF                 cmp     rax, rdi
.text:0000000000001DC2                 mov     rbp, rsp
.text:0000000000001DC5                 jz      short loc_1DE0
.text:0000000000001DC7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001DCE                 test    rax, rax
.text:0000000000001DD1                 jz      short loc_1DE0
.text:0000000000001DD3                 pop     rbp
.text:0000000000001DD4                 jmp     rax
.text:0000000000001DD4 ; ---------------------------------------------------------------------------
.text:0000000000001DD6                 align 20h
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001DE0                                         ; deregister_tm_clones+21↑j
.text:0000000000001DE0                 pop     rbp
.text:0000000000001DE1                 retn
.text:0000000000001DE1 deregister_tm_clones endp
.text:0000000000001DE1
.text:0000000000001DE1 ; ---------------------------------------------------------------------------
.text:0000000000001DE2                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DF0
.text:0000000000001DF0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001DF0
.text:0000000000001DF0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001DF0                 lea     rdi, __bss_start
.text:0000000000001DF7                 lea     rsi, __bss_start
.text:0000000000001DFE                 push    rbp
.text:0000000000001DFF                 sub     rsi, rdi
.text:0000000000001E02                 mov     rbp, rsp
.text:0000000000001E05                 sar     rsi, 3
.text:0000000000001E09                 mov     rax, rsi
.text:0000000000001E0C                 shr     rax, 3Fh
.text:0000000000001E10                 add     rsi, rax
.text:0000000000001E13                 sar     rsi, 1
.text:0000000000001E16                 jz      short loc_1E30
.text:0000000000001E18                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001E1F                 test    rax, rax
.text:0000000000001E22                 jz      short loc_1E30
.text:0000000000001E24                 pop     rbp
.text:0000000000001E25                 jmp     rax
.text:0000000000001E25 ; ---------------------------------------------------------------------------
.text:0000000000001E27                 align 10h
.text:0000000000001E30
.text:0000000000001E30 loc_1E30:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001E30                                         ; register_tm_clones+32↑j
.text:0000000000001E30                 pop     rbp
.text:0000000000001E31                 retn
.text:0000000000001E31 register_tm_clones endp
.text:0000000000001E31
.text:0000000000001E31 ; ---------------------------------------------------------------------------
.text:0000000000001E32                 align 20h
.text:0000000000001E40
.text:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E40
.text:0000000000001E40 ; Attributes: info_from_lumina
.text:0000000000001E40
.text:0000000000001E40 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001E40                 cmp     cs:completed_7697, 0
.text:0000000000001E47                 jnz     short locret_1E78
.text:0000000000001E49                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001E51                 push    rbp
.text:0000000000001E52                 mov     rbp, rsp
.text:0000000000001E55                 jz      short loc_1E63
.text:0000000000001E57                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001E5E                 call    __cxa_finalize
.text:0000000000001E63
.text:0000000000001E63 loc_1E63:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001E63                 call    deregister_tm_clones
.text:0000000000001E68                 mov     cs:completed_7697, 1
.text:0000000000001E6F                 pop     rbp
.text:0000000000001E70                 retn
.text:0000000000001E70 ; ---------------------------------------------------------------------------
.text:0000000000001E71                 align 8
.text:0000000000001E78
.text:0000000000001E78 locret_1E78:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001E78                 rep retn
.text:0000000000001E78 __do_global_dtors_aux endp
.text:0000000000001E78
.text:0000000000001E78 ; ---------------------------------------------------------------------------
.text:0000000000001E7A                 align 20h
.text:0000000000001E80
.text:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E80
.text:0000000000001E80 ; Attributes: bp-based frame
.text:0000000000001E80
.text:0000000000001E80 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001E80                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001E80                 push    rbp
.text:0000000000001E81                 mov     rbp, rsp
.text:0000000000001E84                 pop     rbp
.text:0000000000001E85                 jmp     register_tm_clones
.text:0000000000001E85 frame_dummy     endp
.text:0000000000001E85
.text:0000000000001E85 ; ---------------------------------------------------------------------------
.text:0000000000001E8A                 align 10h
.text:0000000000001E90
.text:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E90
.text:0000000000001E90
.text:0000000000001E90 print_uptime    proc near               ; CODE XREF: uptime+40↓p
.text:0000000000001E90
.text:0000000000001E90 var_2080        = qword ptr -2080h
.text:0000000000001E90 timer           = qword ptr -2070h
.text:0000000000001E90 loadavg         = qword ptr -2068h
.text:0000000000001E90 var_2060        = qword ptr -2060h
.text:0000000000001E90 var_2058        = qword ptr -2058h
.text:0000000000001E90 s               = byte ptr -2048h
.text:0000000000001E90 var_40          = qword ptr -40h
.text:0000000000001E90
.text:0000000000001E90 ; __unwind {
.text:0000000000001E90                 push    r15
.text:0000000000001E92                 push    r14
.text:0000000000001E94                 push    r13
.text:0000000000001E96                 push    r12
.text:0000000000001E98                 mov     r12, rdi
.text:0000000000001E9B                 push    rbp
.text:0000000000001E9C                 push    rbx
.text:0000000000001E9D                 lea     rdi, filename   ; "/proc/"
.text:0000000000001EA4                 mov     rbx, rsi
.text:0000000000001EA7                 lea     rsi, aLuUser+7  ; modes
.text:0000000000001EAE                 lea     rbp, [r12-1]
.text:0000000000001EB3                 sub     rsp, 2058h
.text:0000000000001EBA                 mov     rax, fs:28h
.text:0000000000001EC3                 mov     [rsp+2088h+var_40], rax
.text:0000000000001ECB                 xor     eax, eax
.text:0000000000001ECD                 call    _fopen
.text:0000000000001ED2                 test    rax, rax
.text:0000000000001ED5                 jz      short loc_1F00
.text:0000000000001ED7                 lea     r13, [rsp+2088h+s]
.text:0000000000001EDC                 mov     rdx, rax        ; stream
.text:0000000000001EDF                 mov     esi, 2000h      ; n
.text:0000000000001EE4                 mov     r15, rax
.text:0000000000001EE7                 mov     rdi, r13        ; s
.text:0000000000001EEA                 call    _fgets_unlocked
.text:0000000000001EEF                 cmp     rax, r13
.text:0000000000001EF2                 jz      loc_21FD
.text:0000000000001EF8                 mov     rdi, r15        ; stream
.text:0000000000001EFB                 call    rpl_fclose
.text:0000000000001F00
.text:0000000000001F00 loc_1F00:                               ; CODE XREF: print_uptime+45↑j
.text:0000000000001F00                 xor     r13d, r13d
.text:0000000000001F03                 test    r12, r12
.text:0000000000001F06                 jz      loc_226B
.text:0000000000001F0C
.text:0000000000001F0C loc_1F0C:                               ; CODE XREF: print_uptime+3BE↓j
.text:0000000000001F0C                 xor     r14d, r14d
.text:0000000000001F0F                 xor     r12d, r12d
.text:0000000000001F12                 jmp     short loc_1F36
.text:0000000000001F12 ; ---------------------------------------------------------------------------
.text:0000000000001F14                 align 8
.text:0000000000001F18
.text:0000000000001F18 loc_1F18:                               ; CODE XREF: print_uptime+AD↓j
.text:0000000000001F18                                         ; print_uptime+B3↓j
.text:0000000000001F18                 cmp     ax, 2
.text:0000000000001F1C                 jnz     short loc_1F25
.text:0000000000001F1E                 movsxd  r14, dword ptr [rbx+154h]
.text:0000000000001F25
.text:0000000000001F25 loc_1F25:                               ; CODE XREF: print_uptime+8C↑j
.text:0000000000001F25                                         ; print_uptime+B9↓j
.text:0000000000001F25                 sub     rbp, 1
.text:0000000000001F29                 add     rbx, 180h
.text:0000000000001F30                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F34                 jz      short loc_1F50
.text:0000000000001F36
.text:0000000000001F36 loc_1F36:                               ; CODE XREF: print_uptime+82↑j
.text:0000000000001F36                 cmp     byte ptr [rbx+2Ch], 0
.text:0000000000001F3A                 movzx   eax, word ptr [rbx]
.text:0000000000001F3D                 jz      short loc_1F18
.text:0000000000001F3F                 cmp     ax, 7
.text:0000000000001F43                 jnz     short loc_1F18
.text:0000000000001F45                 add     r12, 1
.text:0000000000001F49                 jmp     short loc_1F25
.text:0000000000001F49 ; ---------------------------------------------------------------------------
.text:0000000000001F4B                 align 10h
.text:0000000000001F50
.text:0000000000001F50 loc_1F50:                               ; CODE XREF: print_uptime+A4↑j
.text:0000000000001F50                 xor     edi, edi        ; timer
.text:0000000000001F52                 call    _time
.text:0000000000001F57                 test    r13, r13
.text:0000000000001F5A                 mov     [rsp+2088h+timer], rax
.text:0000000000001F5F                 jnz     short loc_1F70
.text:0000000000001F61                 sub     rax, r14
.text:0000000000001F64                 test    r14, r14
.text:0000000000001F67                 mov     r13, rax
.text:0000000000001F6A                 jz      loc_2277
.text:0000000000001F70
.text:0000000000001F70 loc_1F70:                               ; CODE XREF: print_uptime+CF↑j
.text:0000000000001F70                 lea     r14, [rsp+2088h+timer]
.text:0000000000001F75
.text:0000000000001F75 loc_1F75:                               ; CODE XREF: print_uptime+3D3↓j
.text:0000000000001F75                 mov     rax, r13
.text:0000000000001F78                 mov     rdx, 1845C8A0CE512957h
.text:0000000000001F82                 mov     rdi, r14        ; timer
.text:0000000000001F85                 imul    rdx
.text:0000000000001F88                 mov     rax, r13
.text:0000000000001F8B                 sar     rax, 3Fh
.text:0000000000001F8F                 sar     rdx, 0Dh
.text:0000000000001F93                 mov     rbx, rdx
.text:0000000000001F96                 mov     rdx, 48D159E26AF37C05h
.text:0000000000001FA0                 sub     rbx, rax
.text:0000000000001FA3                 imul    rsi, rbx, 0FFFFFFFFFFFEAE80h
.text:0000000000001FAA                 add     rsi, r13
.text:0000000000001FAD                 mov     rax, rsi
.text:0000000000001FB0                 imul    rdx
.text:0000000000001FB3                 mov     rax, rsi
.text:0000000000001FB6                 sar     rax, 3Fh
.text:0000000000001FBA                 sar     rdx, 0Ah
.text:0000000000001FBE                 sub     rdx, rax
.text:0000000000001FC1                 imul    eax, edx, 0E10h
.text:0000000000001FC7                 mov     rbp, rdx
.text:0000000000001FCA                 mov     rdx, 8888888888888889h
.text:0000000000001FD4                 cdqe
.text:0000000000001FD6                 sub     rsi, rax
.text:0000000000001FD9                 mov     rax, rsi
.text:0000000000001FDC                 imul    rdx
.text:0000000000001FDF                 add     rdx, rsi
.text:0000000000001FE2                 sar     rsi, 3Fh
.text:0000000000001FE6                 sar     rdx, 5
.text:0000000000001FEA                 sub     rdx, rsi
.text:0000000000001FED                 mov     r15, rdx
.text:0000000000001FF0                 call    _localtime
.text:0000000000001FF5                 test    rax, rax
.text:0000000000001FF8                 mov     r14, rax
.text:0000000000001FFB                 mov     edx, 5          ; category
.text:0000000000002000                 jz      loc_2188
.text:0000000000002006                 lea     rsi, aHMS       ; " %H:%M:%S  "
.text:000000000000200D                 xor     edi, edi        ; domainname
.text:000000000000200F                 call    _dcgettext
.text:0000000000002014                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000201B                 xor     r8d, r8d
.text:000000000000201E                 xor     ecx, ecx
.text:0000000000002020                 mov     rdx, r14
.text:0000000000002023                 mov     rsi, rax
.text:0000000000002026                 call    fprintftime
.text:000000000000202B
.text:000000000000202B loc_202B:                               ; CODE XREF: print_uptime+315↓j
.text:000000000000202B                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000202F                 jz      loc_21D6
.text:0000000000002035                 test    rbx, rbx
.text:0000000000002038                 jle     loc_21AA
.text:000000000000203E                 lea     rdx, msgid2     ; "up %ld days %2d:%02d,  "
.text:0000000000002045                 lea     rsi, msgid1     ; "up %ld day %2d:%02d,  "
.text:000000000000204C                 mov     r8d, 5          ; category
.text:0000000000002052                 mov     rcx, rbx        ; n
.text:0000000000002055                 xor     edi, edi        ; domainname
.text:0000000000002057                 call    _dcngettext
.text:000000000000205C                 mov     r8d, r15d
.text:000000000000205F                 mov     rsi, rax
.text:0000000000002062                 mov     ecx, ebp
.text:0000000000002064                 mov     rdx, rbx
.text:0000000000002067                 mov     edi, 1
.text:000000000000206C                 xor     eax, eax
.text:000000000000206E                 call    ___printf_chk
.text:0000000000002073
.text:0000000000002073 loc_2073:                               ; CODE XREF: print_uptime+341↓j
.text:0000000000002073                                         ; print_uptime+368↓j
.text:0000000000002073                 lea     rdx, aLuUsers   ; "%lu users"
.text:000000000000207A                 lea     rsi, aLuUser    ; "%lu user"
.text:0000000000002081                 mov     r8d, 5          ; category
.text:0000000000002087                 mov     rcx, r12        ; n
.text:000000000000208A                 xor     edi, edi        ; domainname
.text:000000000000208C                 call    _dcngettext
.text:0000000000002091                 mov     rdx, r12
.text:0000000000002094                 mov     rsi, rax
.text:0000000000002097                 mov     edi, 1
.text:000000000000209C                 xor     eax, eax
.text:000000000000209E                 call    ___printf_chk
.text:00000000000020A3                 lea     rdi, [rsp+2088h+loadavg] ; loadavg
.text:00000000000020A8                 mov     esi, 3          ; nelem
.text:00000000000020AD                 call    _getloadavg
.text:00000000000020B2                 cmp     eax, 0FFFFFFFFh
.text:00000000000020B5                 mov     ebx, eax
.text:00000000000020B7                 jz      loc_2163
.text:00000000000020BD                 test    eax, eax
.text:00000000000020BF                 jg      short loc_20EA
.text:00000000000020C1
.text:00000000000020C1 loc_20C1:                               ; CODE XREF: print_uptime+2F3↓j
.text:00000000000020C1                                         ; print_uptime+41D↓j
.text:00000000000020C1                 mov     rax, [rsp+2088h+var_40]
.text:00000000000020C9                 xor     rax, fs:28h
.text:00000000000020D2                 jnz     loc_22BD
.text:00000000000020D8                 add     rsp, 2058h
.text:00000000000020DF                 pop     rbx
.text:00000000000020E0                 pop     rbp
.text:00000000000020E1                 pop     r12
.text:00000000000020E3                 pop     r13
.text:00000000000020E5                 pop     r14
.text:00000000000020E7                 pop     r15
.text:00000000000020E9                 retn
.text:00000000000020EA ; ---------------------------------------------------------------------------
.text:00000000000020EA
.text:00000000000020EA loc_20EA:                               ; CODE XREF: print_uptime+22F↑j
.text:00000000000020EA                 movsd   xmm0, [rsp+2088h+loadavg]
.text:00000000000020F0                 lea     rsi, aLoadAverage2f ; ",  load average: %.2f"
.text:00000000000020F7                 xor     edi, edi        ; domainname
.text:00000000000020F9                 mov     edx, 5          ; category
.text:00000000000020FE                 movsd   [rsp+2088h+var_2080], xmm0
.text:0000000000002104                 call    _dcgettext
.text:0000000000002109                 movsd   xmm0, [rsp+2088h+var_2080]
.text:000000000000210F                 mov     rsi, rax
.text:0000000000002112                 mov     edi, 1
.text:0000000000002117                 mov     eax, 1
.text:000000000000211C                 call    ___printf_chk
.text:0000000000002121                 cmp     ebx, 1
.text:0000000000002124                 jz      short loc_2163
.text:0000000000002126                 movsd   xmm0, [rsp+2088h+var_2060]
.text:000000000000212C                 lea     rsi, a2f        ; ", %.2f"
.text:0000000000002133                 mov     edi, 1
.text:0000000000002138                 mov     eax, 1
.text:000000000000213D                 call    ___printf_chk
.text:0000000000002142                 cmp     ebx, 2
.text:0000000000002145                 jz      short loc_2163
.text:0000000000002147                 movsd   xmm0, [rsp+2088h+var_2058]
.text:000000000000214D                 lea     rsi, a2f        ; ", %.2f"
.text:0000000000002154                 mov     edi, 1
.text:0000000000002159                 mov     eax, 1
.text:000000000000215E                 call    ___printf_chk
.text:0000000000002163
.text:0000000000002163 loc_2163:                               ; CODE XREF: print_uptime+227↑j
.text:0000000000002163                                         ; print_uptime+294↑j ...
.text:0000000000002163                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000216A                 mov     rax, [rdi+28h]
.text:000000000000216E                 cmp     rax, [rdi+30h]
.text:0000000000002172                 jnb     loc_22A3
.text:0000000000002178                 lea     rdx, [rax+1]
.text:000000000000217C                 mov     [rdi+28h], rdx
.text:0000000000002180                 mov     byte ptr [rax], 0Ah
.text:0000000000002183                 jmp     loc_20C1
.text:0000000000002188 ; ---------------------------------------------------------------------------
.text:0000000000002188
.text:0000000000002188 loc_2188:                               ; CODE XREF: print_uptime+170↑j
.text:0000000000002188                 lea     rsi, asc_78F4   ; " ??:????  "
.text:000000000000218F                 xor     edi, edi        ; domainname
.text:0000000000002191                 call    _dcgettext
.text:0000000000002196                 mov     edi, 1
.text:000000000000219B                 mov     rsi, rax
.text:000000000000219E                 xor     eax, eax
.text:00000000000021A0                 call    ___printf_chk
.text:00000000000021A5                 jmp     loc_202B
.text:00000000000021AA ; ---------------------------------------------------------------------------
.text:00000000000021AA
.text:00000000000021AA loc_21AA:                               ; CODE XREF: print_uptime+1A8↑j
.text:00000000000021AA                 lea     rsi, aUp2d02d   ; "up  %2d:%02d,  "
.text:00000000000021B1                 xor     edi, edi        ; domainname
.text:00000000000021B3                 mov     edx, 5          ; category
.text:00000000000021B8                 call    _dcgettext
.text:00000000000021BD                 mov     ecx, r15d
.text:00000000000021C0                 mov     rsi, rax
.text:00000000000021C3                 mov     edx, ebp
.text:00000000000021C5                 mov     edi, 1
.text:00000000000021CA                 xor     eax, eax
.text:00000000000021CC                 call    ___printf_chk
.text:00000000000021D1                 jmp     loc_2073
.text:00000000000021D6 ; ---------------------------------------------------------------------------
.text:00000000000021D6
.text:00000000000021D6 loc_21D6:                               ; CODE XREF: print_uptime+19F↑j
.text:00000000000021D6                 lea     rsi, aUpDays    ; "up ???? days ??:??,  "
.text:00000000000021DD                 xor     edi, edi        ; domainname
.text:00000000000021DF                 mov     edx, 5          ; category
.text:00000000000021E4                 call    _dcgettext
.text:00000000000021E9                 mov     edi, 1
.text:00000000000021EE                 mov     rsi, rax
.text:00000000000021F1                 xor     eax, eax
.text:00000000000021F3                 call    ___printf_chk
.text:00000000000021F8                 jmp     loc_2073
.text:00000000000021FD ; ---------------------------------------------------------------------------
.text:00000000000021FD
.text:00000000000021FD loc_21FD:                               ; CODE XREF: print_uptime+62↑j
.text:00000000000021FD                 lea     r14, [rsp+2088h+timer]
.text:0000000000002202                 mov     rdi, rax        ; nptr
.text:0000000000002205                 mov     [rsp+2088h+var_2080], rax
.text:000000000000220A                 mov     rsi, r14        ; endptr
.text:000000000000220D                 call    c_strtod
.text:0000000000002212                 mov     rax, [rsp+2088h+var_2080]
.text:0000000000002217                 cmp     [rsp+2088h+timer], rax
.text:000000000000221C                 jz      loc_22B8
.text:0000000000002222                 ucomisd xmm0, cs:qword_7D48
.text:000000000000222A                 jb      loc_22B2
.text:0000000000002230                 movsd   xmm1, cs:qword_7D50
.text:0000000000002238                 ucomisd xmm1, xmm0
.text:000000000000223C                 jbe     short loc_22B2
.text:000000000000223E                 cvttsd2si r13, xmm0
.text:0000000000002243
.text:0000000000002243 loc_2243:                               ; CODE XREF: print_uptime+426↓j
.text:0000000000002243                                         ; print_uptime+42B↓j
.text:0000000000002243                 mov     rdi, r15        ; stream
.text:0000000000002246                 call    rpl_fclose
.text:000000000000224B                 test    r12, r12
.text:000000000000224E                 jnz     loc_1F0C
.text:0000000000002254                 xor     edi, edi        ; timer
.text:0000000000002256                 call    _time
.text:000000000000225B                 test    r13, r13
.text:000000000000225E                 mov     [rsp+2088h+timer], rax
.text:0000000000002263                 jnz     loc_1F75
.text:0000000000002269                 jmp     short loc_2277
.text:000000000000226B ; ---------------------------------------------------------------------------
.text:000000000000226B
.text:000000000000226B loc_226B:                               ; CODE XREF: print_uptime+76↑j
.text:000000000000226B                 xor     edi, edi        ; timer
.text:000000000000226D                 call    _time
.text:0000000000002272                 mov     [rsp+2088h+timer], rax
.text:0000000000002277
.text:0000000000002277 loc_2277:                               ; CODE XREF: print_uptime+DA↑j
.text:0000000000002277                                         ; print_uptime+3D9↑j
.text:0000000000002277                 lea     rsi, aCouldnTGetBoot ; "couldn't get boot time"
.text:000000000000227E                 mov     edx, 5          ; category
.text:0000000000002283                 xor     edi, edi        ; domainname
.text:0000000000002285                 call    _dcgettext
.text:000000000000228A                 mov     rbx, rax
.text:000000000000228D                 call    ___errno_location
.text:0000000000002292                 mov     esi, [rax]      ; errnum
.text:0000000000002294                 mov     rdx, rbx        ; format
.text:0000000000002297                 mov     edi, (offset dword_0+1) ; _IO_FILE *
.text:000000000000229C                 xor     eax, eax
.text:000000000000229E                 call    _error
.text:00000000000022A3
.text:00000000000022A3 loc_22A3:                               ; CODE XREF: print_uptime+2E2↑j
.text:00000000000022A3                 mov     esi, 0Ah        ; int
.text:00000000000022A8                 call    ___overflow
.text:00000000000022AD                 jmp     loc_20C1
.text:00000000000022B2 ; ---------------------------------------------------------------------------
.text:00000000000022B2
.text:00000000000022B2 loc_22B2:                               ; CODE XREF: print_uptime+39A↑j
.text:00000000000022B2                                         ; print_uptime+3AC↑j
.text:00000000000022B2                 or      r13, 0FFFFFFFFFFFFFFFFh
.text:00000000000022B6                 jmp     short loc_2243
.text:00000000000022B8 ; ---------------------------------------------------------------------------
.text:00000000000022B8
.text:00000000000022B8 loc_22B8:                               ; CODE XREF: print_uptime+38C↑j
.text:00000000000022B8                 xor     r13d, r13d
.text:00000000000022BB                 jmp     short loc_2243
.text:00000000000022BD ; ---------------------------------------------------------------------------
.text:00000000000022BD
.text:00000000000022BD loc_22BD:                               ; CODE XREF: print_uptime+242↑j
.text:00000000000022BD                 call    ___stack_chk_fail
.text:00000000000022BD ; } // starts at 1E90
.text:00000000000022BD print_uptime    endp
.text:00000000000022BD
.text:00000000000022BD ; ---------------------------------------------------------------------------
.text:00000000000022C2                 align 10h
.text:00000000000022D0
.text:00000000000022D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022D0
.text:00000000000022D0
.text:00000000000022D0 uptime          proc near               ; CODE XREF: main+B7↑p
.text:00000000000022D0                                         ; main+D1↑p
.text:00000000000022D0
.text:00000000000022D0 var_20          = qword ptr -20h
.text:00000000000022D0 var_18          = qword ptr -18h
.text:00000000000022D0 var_10          = qword ptr -10h
.text:00000000000022D0
.text:00000000000022D0 ; __unwind {
.text:00000000000022D0                 push    rbx
.text:00000000000022D1                 mov     ecx, esi
.text:00000000000022D3                 mov     rbx, rdi
.text:00000000000022D6                 sub     rsp, 20h
.text:00000000000022DA                 lea     rdx, [rsp+28h+var_18]
.text:00000000000022DF                 lea     rsi, [rsp+28h+var_20]
.text:00000000000022E4                 mov     [rsp+28h+var_18], 0
.text:00000000000022ED                 mov     rax, fs:28h
.text:00000000000022F6                 mov     [rsp+28h+var_10], rax
.text:00000000000022FB                 xor     eax, eax
.text:00000000000022FD                 call    read_utmp
.text:0000000000002302                 test    eax, eax
.text:0000000000002304                 jnz     short loc_232B
.text:0000000000002306                 mov     rsi, [rsp+28h+var_18]
.text:000000000000230B                 mov     rdi, [rsp+28h+var_20]
.text:0000000000002310                 call    print_uptime
.text:0000000000002315                 mov     rax, [rsp+28h+var_10]
.text:000000000000231A                 xor     rax, fs:28h
.text:0000000000002323                 jnz     short loc_235A
.text:0000000000002325                 add     rsp, 20h
.text:0000000000002329                 pop     rbx
.text:000000000000232A                 retn
.text:000000000000232B ; ---------------------------------------------------------------------------
.text:000000000000232B
.text:000000000000232B loc_232B:                               ; CODE XREF: uptime+34↑j
.text:000000000000232B                 mov     rdx, rbx
.text:000000000000232E                 mov     esi, 3
.text:0000000000002333                 xor     edi, edi
.text:0000000000002335                 call    quotearg_n_style_colon
.text:000000000000233A                 mov     rbx, rax
.text:000000000000233D                 call    ___errno_location
.text:0000000000002342                 mov     esi, [rax]      ; errnum
.text:0000000000002344                 lea     rdx, format+4   ; format
.text:000000000000234B                 mov     rcx, rbx
.text:000000000000234E                 mov     edi, 1          ; status
.text:0000000000002353                 xor     eax, eax
.text:0000000000002355                 call    _error
.text:000000000000235A
.text:000000000000235A loc_235A:                               ; CODE XREF: uptime+53↑j
.text:000000000000235A                 call    ___stack_chk_fail
.text:000000000000235A ; } // starts at 22D0
.text:000000000000235A uptime          endp
.text:000000000000235A
.text:000000000000235A ; ---------------------------------------------------------------------------
.text:000000000000235F                 align 20h
.text:0000000000002360
.text:0000000000002360 ; =============== S U B R O U T I N E =======================================
.text:0000000000002360
.text:0000000000002360 ; Attributes: noreturn
.text:0000000000002360
.text:0000000000002360 ; void __fastcall __noreturn usage(int status)
.text:0000000000002360                 public usage
.text:0000000000002360 usage           proc near               ; CODE XREF: main+10E↑p
.text:0000000000002360                                         ; DATA XREF: main+8D↑o
.text:0000000000002360
.text:0000000000002360 var_A8          = qword ptr -0A8h
.text:0000000000002360 var_A0          = qword ptr -0A0h
.text:0000000000002360 var_98          = qword ptr -98h
.text:0000000000002360 var_90          = qword ptr -90h
.text:0000000000002360 var_88          = qword ptr -88h
.text:0000000000002360 var_80          = qword ptr -80h
.text:0000000000002360 var_78          = qword ptr -78h
.text:0000000000002360 var_70          = qword ptr -70h
.text:0000000000002360 var_68          = qword ptr -68h
.text:0000000000002360 var_60          = qword ptr -60h
.text:0000000000002360 var_58          = qword ptr -58h
.text:0000000000002360 var_50          = qword ptr -50h
.text:0000000000002360 var_48          = qword ptr -48h
.text:0000000000002360 var_40          = qword ptr -40h
.text:0000000000002360 var_30          = qword ptr -30h
.text:0000000000002360
.text:0000000000002360 ; __unwind {
.text:0000000000002360                 push    r13
.text:0000000000002362                 push    r12
.text:0000000000002364                 mov     edx, 5          ; category
.text:0000000000002369                 push    rbp
.text:000000000000236A                 push    rbx
.text:000000000000236B                 mov     ebp, edi
.text:000000000000236D                 sub     rsp, 88h
.text:0000000000002374                 mov     rbx, cs:program_name
.text:000000000000237B                 mov     rax, fs:28h
.text:0000000000002384                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002389                 xor     eax, eax
.text:000000000000238B                 test    edi, edi
.text:000000000000238D                 jz      short loc_23BD
.text:000000000000238F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002396                 xor     edi, edi        ; domainname
.text:0000000000002398                 call    _dcgettext
.text:000000000000239D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000023A4                 mov     rdx, rax
.text:00000000000023A7                 mov     rcx, rbx
.text:00000000000023AA                 mov     esi, 1
.text:00000000000023AF                 xor     eax, eax
.text:00000000000023B1                 call    ___fprintf_chk
.text:00000000000023B6
.text:00000000000023B6 loc_23B6:                               ; CODE XREF: usage+2CE↓j
.text:00000000000023B6                 mov     edi, ebp        ; status
.text:00000000000023B8                 call    _exit
.text:00000000000023BD ; ---------------------------------------------------------------------------
.text:00000000000023BD
.text:00000000000023BD loc_23BD:                               ; CODE XREF: usage+2D↑j
.text:00000000000023BD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:00000000000023C4                 xor     edi, edi        ; domainname
.text:00000000000023C6                 call    _dcgettext
.text:00000000000023CB                 mov     rdx, rbx
.text:00000000000023CE                 mov     rsi, rax
.text:00000000000023D1                 mov     edi, 1
.text:00000000000023D6                 xor     eax, eax
.text:00000000000023D8                 call    ___printf_chk
.text:00000000000023DD                 lea     rsi, aPrintTheCurren ; "Print the current time, the length of t"...
.text:00000000000023E4                 mov     edx, 5          ; category
.text:00000000000023E9                 xor     edi, edi        ; domainname
.text:00000000000023EB                 call    _dcgettext
.text:00000000000023F0                 mov     edi, 1
.text:00000000000023F5                 mov     rsi, rax
.text:00000000000023F8                 xor     eax, eax
.text:00000000000023FA                 call    ___printf_chk
.text:00000000000023FF                 lea     rsi, aProcessesInAnU ; "  Processes in\nan uninterruptible slee"...
.text:0000000000002406                 mov     edx, 5          ; category
.text:000000000000240B                 xor     edi, edi        ; domainname
.text:000000000000240D                 call    _dcgettext
.text:0000000000002412                 mov     edi, 1
.text:0000000000002417                 mov     rsi, rax
.text:000000000000241A                 xor     eax, eax
.text:000000000000241C                 call    ___printf_chk
.text:0000000000002421                 lea     rsi, aIfFileIsNotSpe ; "If FILE is not specified, use %s.  %s a"...
.text:0000000000002428                 mov     edx, 5          ; category
.text:000000000000242D                 xor     edi, edi        ; domainname
.text:000000000000242F                 call    _dcgettext
.text:0000000000002434                 lea     rcx, aVarLogWtmp ; "/var/log/wtmp"
.text:000000000000243B                 lea     rdx, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000002442                 mov     rsi, rax
.text:0000000000002445                 mov     edi, 1
.text:000000000000244A                 xor     eax, eax
.text:000000000000244C                 call    ___printf_chk
.text:0000000000002451                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002458                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000245F                 mov     edx, 5          ; category
.text:0000000000002464                 xor     edi, edi        ; domainname
.text:0000000000002466                 call    _dcgettext
.text:000000000000246B                 mov     rsi, rbx        ; stream
.text:000000000000246E                 mov     rdi, rax        ; s
.text:0000000000002471                 call    _fputs_unlocked
.text:0000000000002476                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000247D                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002484                 mov     edx, 5          ; category
.text:0000000000002489                 xor     edi, edi        ; domainname
.text:000000000000248B                 call    _dcgettext
.text:0000000000002490                 mov     rsi, rbx        ; stream
.text:0000000000002493                 mov     rdi, rax        ; s
.text:0000000000002496                 lea     rbx, aSha384sum ; "sha384sum"
.text:000000000000249D                 call    _fputs_unlocked
.text:00000000000024A2                 lea     rax, asc_79BE   ; "["
.text:00000000000024A9                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000024B0                 mov     [rsp+0A8h+var_68], rbx
.text:00000000000024B5                 lea     rbx, aUptime    ; "uptime"
.text:00000000000024BC                 mov     [rsp+0A8h+var_48], 0
.text:00000000000024C5                 mov     [rsp+0A8h+var_40], 0
.text:00000000000024CE                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000024D2                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000024D9                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000024DE                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000024E5                 mov     rdx, rsp
.text:00000000000024E8                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000024ED                 lea     rax, domainname ; "coreutils"
.text:00000000000024F4                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000024F9                 mov     [rsp+0A8h+var_98], rax
.text:00000000000024FE                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002505                 mov     [rsp+0A8h+var_90], rax
.text:000000000000250A                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002511                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002516                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000251D                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002522                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002527                 mov     [rsp+0A8h+var_60], rax
.text:000000000000252C                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002531                 nop     dword ptr [rax+00000000h]
.text:0000000000002538
.text:0000000000002538 loc_2538:                               ; CODE XREF: usage+1F5↓j
.text:0000000000002538                 add     rdx, 10h
.text:000000000000253C                 mov     rdi, [rdx]
.text:000000000000253F                 test    rdi, rdi
.text:0000000000002542                 jz      short loc_2557
.text:0000000000002544                 mov     ecx, 7
.text:0000000000002549                 mov     rsi, rbx
.text:000000000000254C                 repe cmpsb
.text:000000000000254E                 setnbe  al
.text:0000000000002551                 sbb     al, 0
.text:0000000000002553                 test    al, al
.text:0000000000002555                 jnz     short loc_2538
.text:0000000000002557
.text:0000000000002557 loc_2557:                               ; CODE XREF: usage+1E2↑j
.text:0000000000002557                 mov     r12, [rdx+8]
.text:000000000000255B                 xor     edi, edi        ; domainname
.text:000000000000255D                 mov     edx, 5          ; category
.text:0000000000002562                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002569                 test    r12, r12
.text:000000000000256C                 jz      loc_2633
.text:0000000000002572                 call    _dcgettext
.text:0000000000002577                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000257E                 lea     rdx, unk_7A34
.text:0000000000002585                 mov     rsi, rax
.text:0000000000002588                 mov     edi, 1
.text:000000000000258D                 xor     eax, eax
.text:000000000000258F                 call    ___printf_chk
.text:0000000000002594                 xor     esi, esi        ; locale
.text:0000000000002596                 mov     edi, 5          ; category
.text:000000000000259B                 call    _setlocale
.text:00000000000025A0                 test    rax, rax
.text:00000000000025A3                 jz      short loc_25C1
.text:00000000000025A5                 lea     rsi, s2         ; "en_"
.text:00000000000025AC                 mov     edx, 3          ; n
.text:00000000000025B1                 mov     rdi, rax        ; s1
.text:00000000000025B4                 call    _strncmp
.text:00000000000025B9                 test    eax, eax
.text:00000000000025BB                 jnz     loc_26C8
.text:00000000000025C1
.text:00000000000025C1 loc_25C1:                               ; CODE XREF: usage+243↑j
.text:00000000000025C1                                         ; usage+38D↓j
.text:00000000000025C1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000025C8                 xor     edi, edi        ; domainname
.text:00000000000025CA                 mov     edx, 5          ; category
.text:00000000000025CF                 call    _dcgettext
.text:00000000000025D4                 lea     rcx, aUptime    ; "uptime"
.text:00000000000025DB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000025E2                 mov     rsi, rax
.text:00000000000025E5                 mov     edi, 1
.text:00000000000025EA                 xor     eax, eax
.text:00000000000025EC                 call    ___printf_chk
.text:00000000000025F1                 cmp     r12, rbx
.text:00000000000025F4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000025FB                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002602                 cmovz   rbx, rcx
.text:0000000000002606
.text:0000000000002606 loc_2606:                               ; CODE XREF: usage+35C↓j
.text:0000000000002606                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000260D                 xor     edi, edi        ; domainname
.text:000000000000260F                 mov     edx, 5          ; category
.text:0000000000002614                 call    _dcgettext
.text:0000000000002619                 mov     rcx, rbx
.text:000000000000261C                 mov     rsi, rax
.text:000000000000261F                 mov     rdx, r12
.text:0000000000002622                 mov     edi, 1
.text:0000000000002627                 xor     eax, eax
.text:0000000000002629                 call    ___printf_chk
.text:000000000000262E                 jmp     loc_23B6
.text:0000000000002633 ; ---------------------------------------------------------------------------
.text:0000000000002633
.text:0000000000002633 loc_2633:                               ; CODE XREF: usage+20C↑j
.text:0000000000002633                 call    _dcgettext
.text:0000000000002638                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000263F                 lea     rdx, unk_7A34
.text:0000000000002646                 mov     rsi, rax
.text:0000000000002649                 mov     edi, 1
.text:000000000000264E                 xor     eax, eax
.text:0000000000002650                 call    ___printf_chk
.text:0000000000002655                 xor     esi, esi        ; locale
.text:0000000000002657                 mov     edi, 5          ; category
.text:000000000000265C                 call    _setlocale
.text:0000000000002661                 test    rax, rax
.text:0000000000002664                 jz      short loc_267E
.text:0000000000002666                 lea     rsi, s2         ; "en_"
.text:000000000000266D                 mov     edx, 3          ; n
.text:0000000000002672                 mov     rdi, rax        ; s1
.text:0000000000002675                 call    _strncmp
.text:000000000000267A                 test    eax, eax
.text:000000000000267C                 jnz     short loc_26C1
.text:000000000000267E
.text:000000000000267E loc_267E:                               ; CODE XREF: usage+304↑j
.text:000000000000267E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002685                 mov     edx, 5          ; category
.text:000000000000268A                 xor     edi, edi        ; domainname
.text:000000000000268C                 lea     r12, aUptime    ; "uptime"
.text:0000000000002693                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000269A                 call    _dcgettext
.text:000000000000269F                 lea     rcx, aUptime    ; "uptime"
.text:00000000000026A6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000026AD                 mov     rsi, rax
.text:00000000000026B0                 mov     edi, 1
.text:00000000000026B5                 xor     eax, eax
.text:00000000000026B7                 call    ___printf_chk
.text:00000000000026BC                 jmp     loc_2606
.text:00000000000026C1 ; ---------------------------------------------------------------------------
.text:00000000000026C1
.text:00000000000026C1 loc_26C1:                               ; CODE XREF: usage+31C↑j
.text:00000000000026C1                 lea     r12, aUptime    ; "uptime"
.text:00000000000026C8
.text:00000000000026C8 loc_26C8:                               ; CODE XREF: usage+25B↑j
.text:00000000000026C8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000026CF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000026D6                 xor     edi, edi        ; domainname
.text:00000000000026D8                 mov     edx, 5          ; category
.text:00000000000026DD                 call    _dcgettext
.text:00000000000026E2                 mov     rsi, r13        ; stream
.text:00000000000026E5                 mov     rdi, rax        ; s
.text:00000000000026E8                 call    _fputs_unlocked
.text:00000000000026ED                 jmp     loc_25C1
.text:00000000000026ED ; } // starts at 2360
.text:00000000000026ED usage           endp
.text:00000000000026ED
.text:00000000000026ED ; ---------------------------------------------------------------------------
.text:00000000000026F2                 align 20h
.text:0000000000002700
.text:0000000000002700 ; =============== S U B R O U T I N E =======================================
.text:0000000000002700
.text:0000000000002700
.text:0000000000002700 ; __int64 __fastcall c_strtod(char *nptr, char **endptr)
.text:0000000000002700                 public c_strtod
.text:0000000000002700 c_strtod        proc near               ; CODE XREF: print_uptime+37D↑p
.text:0000000000002700 ; __unwind {
.text:0000000000002700                 push    rbp
.text:0000000000002701                 push    rbx
.text:0000000000002702                 mov     rbp, rdi
.text:0000000000002705                 mov     rbx, rsi
.text:0000000000002708                 sub     rsp, 8
.text:000000000000270C                 mov     rax, cs:c_locale_cache
.text:0000000000002713                 test    rax, rax
.text:0000000000002716                 jz      short loc_2750
.text:0000000000002718
.text:0000000000002718 loc_2718:                               ; CODE XREF: c_strtod+6A↓j
.text:0000000000002718                 mov     rdx, cs:c_locale_cache ; loc
.text:000000000000271F                 test    rdx, rdx
.text:0000000000002722                 jz      short loc_2738
.text:0000000000002724                 add     rsp, 8
.text:0000000000002728                 mov     rsi, rbx        ; endptr
.text:000000000000272B                 mov     rdi, rbp        ; nptr
.text:000000000000272E                 pop     rbx
.text:000000000000272F                 pop     rbp
.text:0000000000002730                 jmp     _strtod_l
.text:0000000000002730 ; ---------------------------------------------------------------------------
.text:0000000000002735                 align 8
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: c_strtod+22↑j
.text:0000000000002738                 test    rbx, rbx
.text:000000000000273B                 pxor    xmm0, xmm0
.text:000000000000273F                 jz      short loc_2748
.text:0000000000002741                 pxor    xmm0, xmm0
.text:0000000000002745                 mov     [rbx], rbp
.text:0000000000002748
.text:0000000000002748 loc_2748:                               ; CODE XREF: c_strtod+3F↑j
.text:0000000000002748                 add     rsp, 8
.text:000000000000274C                 pop     rbx
.text:000000000000274D                 pop     rbp
.text:000000000000274E                 retn
.text:000000000000274E ; ---------------------------------------------------------------------------
.text:000000000000274F                 align 10h
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: c_strtod+16↑j
.text:0000000000002750                 lea     rsi, locale     ; "C"
.text:0000000000002757                 xor     edx, edx        ; base
.text:0000000000002759                 mov     edi, 1FBFh      ; category_mask
.text:000000000000275E                 call    _newlocale
.text:0000000000002763                 mov     cs:c_locale_cache, rax
.text:000000000000276A                 jmp     short loc_2718
.text:000000000000276A ; } // starts at 2700
.text:000000000000276A c_strtod        endp
.text:000000000000276A
.text:000000000000276A ; ---------------------------------------------------------------------------
.text:000000000000276C                 align 10h
.text:0000000000002770
.text:0000000000002770 ; =============== S U B R O U T I N E =======================================
.text:0000000000002770
.text:0000000000002770
.text:0000000000002770                 public close_stdout_set_file_name
.text:0000000000002770 close_stdout_set_file_name proc near
.text:0000000000002770 ; __unwind {
.text:0000000000002770                 mov     cs:file_name, rdi
.text:0000000000002777                 retn
.text:0000000000002777 ; } // starts at 2770
.text:0000000000002777 close_stdout_set_file_name endp
.text:0000000000002777
.text:0000000000002777 ; ---------------------------------------------------------------------------
.text:0000000000002778                 align 20h
.text:0000000000002780
.text:0000000000002780 ; =============== S U B R O U T I N E =======================================
.text:0000000000002780
.text:0000000000002780
.text:0000000000002780                 public close_stdout_set_ignore_EPIPE
.text:0000000000002780 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002780 ; __unwind {
.text:0000000000002780                 mov     cs:ignore_EPIPE, dil
.text:0000000000002787                 retn
.text:0000000000002787 ; } // starts at 2780
.text:0000000000002787 close_stdout_set_ignore_EPIPE endp
.text:0000000000002787
.text:0000000000002787 ; ---------------------------------------------------------------------------
.text:0000000000002788                 align 10h
.text:0000000000002790
.text:0000000000002790 ; =============== S U B R O U T I N E =======================================
.text:0000000000002790
.text:0000000000002790 ; Attributes: info_from_lumina
.text:0000000000002790
.text:0000000000002790 ; void __cdecl close_stdout()
.text:0000000000002790                 public close_stdout
.text:0000000000002790 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:0000000000002790 ; __unwind {
.text:0000000000002790                 push    rbp
.text:0000000000002791                 push    rbx
.text:0000000000002792                 sub     rsp, 8
.text:0000000000002796                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000279D                 call    close_stream
.text:00000000000027A2                 test    eax, eax
.text:00000000000027A4                 jz      short loc_27BC
.text:00000000000027A6                 call    ___errno_location
.text:00000000000027AB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000027B2                 mov     rbx, rax
.text:00000000000027B5                 jz      short loc_27D3
.text:00000000000027B7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000027BA                 jnz     short loc_27D3
.text:00000000000027BC
.text:00000000000027BC loc_27BC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000027BC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000027C3                 call    close_stream
.text:00000000000027C8                 test    eax, eax
.text:00000000000027CA                 jnz     short loc_2812
.text:00000000000027CC                 add     rsp, 8
.text:00000000000027D0                 pop     rbx
.text:00000000000027D1                 pop     rbp
.text:00000000000027D2                 retn
.text:00000000000027D3 ; ---------------------------------------------------------------------------
.text:00000000000027D3
.text:00000000000027D3 loc_27D3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000027D3                                         ; close_stdout+2A↑j
.text:00000000000027D3                 lea     rsi, aWriteError ; "write error"
.text:00000000000027DA                 xor     edi, edi        ; domainname
.text:00000000000027DC                 mov     edx, 5          ; category
.text:00000000000027E1                 call    _dcgettext
.text:00000000000027E6                 mov     rdi, cs:file_name
.text:00000000000027ED                 mov     rbp, rax
.text:00000000000027F0                 test    rdi, rdi
.text:00000000000027F3                 jz      short loc_281D
.text:00000000000027F5                 call    quotearg_colon
.text:00000000000027FA                 mov     esi, [rbx]      ; errnum
.text:00000000000027FC                 lea     rdx, format     ; "%s: %s"
.text:0000000000002803                 mov     rcx, rax
.text:0000000000002806                 mov     r8, rbp
.text:0000000000002809                 xor     edi, edi        ; status
.text:000000000000280B                 xor     eax, eax
.text:000000000000280D                 call    _error
.text:0000000000002812
.text:0000000000002812 loc_2812:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002812                                         ; close_stdout+A2↓j
.text:0000000000002812                 mov     edi, cs:exit_failure ; status
.text:0000000000002818                 call    __exit
.text:000000000000281D ; ---------------------------------------------------------------------------
.text:000000000000281D
.text:000000000000281D loc_281D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000281D                 mov     esi, [rbx]      ; errnum
.text:000000000000281F                 lea     rdx, format+4   ; format
.text:0000000000002826                 mov     rcx, rax
.text:0000000000002829                 xor     edi, edi        ; status
.text:000000000000282B                 xor     eax, eax
.text:000000000000282D                 call    _error
.text:0000000000002832                 jmp     short loc_2812
.text:0000000000002832 ; } // starts at 2790
.text:0000000000002832 close_stdout    endp
.text:0000000000002832
.text:0000000000002832 ; ---------------------------------------------------------------------------
.text:0000000000002834                 align 20h
.text:0000000000002840
.text:0000000000002840 ; =============== S U B R O U T I N E =======================================
.text:0000000000002840
.text:0000000000002840
.text:0000000000002840 ; __int64 __fastcall fwrite_lowcase(FILE *stream)
.text:0000000000002840 fwrite_lowcase  proc near               ; CODE XREF: __strftime_internal+143F↓p
.text:0000000000002840                                         ; __strftime_internal+1A8E↓p
.text:0000000000002840 ; __unwind {
.text:0000000000002840                 test    rdx, rdx
.text:0000000000002843                 jz      short locret_2890
.text:0000000000002845                 push    r13
.text:0000000000002847                 push    r12
.text:0000000000002849                 mov     r12, rdi
.text:000000000000284C                 push    rbp
.text:000000000000284D                 push    rbx
.text:000000000000284E                 mov     rbp, rdx
.text:0000000000002851                 mov     rbx, rsi
.text:0000000000002854                 sub     rsp, 8
.text:0000000000002858                 add     rbp, rbx
.text:000000000000285B                 call    ___ctype_tolower_loc
.text:0000000000002860                 mov     r13, rax
.text:0000000000002863                 nop     dword ptr [rax+rax+00h]
.text:0000000000002868
.text:0000000000002868 loc_2868:                               ; CODE XREF: fwrite_lowcase+41↓j
.text:0000000000002868                 movzx   ecx, byte ptr [rbx]
.text:000000000000286B                 mov     rax, [r13+0]
.text:000000000000286F                 mov     rsi, r12        ; stream
.text:0000000000002872                 add     rbx, 1
.text:0000000000002876                 mov     edi, [rax+rcx*4] ; c
.text:0000000000002879                 call    _fputc
.text:000000000000287E                 cmp     rbx, rbp
.text:0000000000002881                 jnz     short loc_2868
.text:0000000000002883                 add     rsp, 8
.text:0000000000002887                 pop     rbx
.text:0000000000002888                 pop     rbp
.text:0000000000002889                 pop     r12
.text:000000000000288B                 pop     r13
.text:000000000000288D                 retn
.text:000000000000288D ; ---------------------------------------------------------------------------
.text:000000000000288E                 align 10h
.text:0000000000002890
.text:0000000000002890 locret_2890:                            ; CODE XREF: fwrite_lowcase+3↑j
.text:0000000000002890                 rep retn
.text:0000000000002890 ; } // starts at 2840
.text:0000000000002890 fwrite_lowcase  endp
.text:0000000000002890
.text:0000000000002890 ; ---------------------------------------------------------------------------
.text:0000000000002892                 align 20h
.text:00000000000028A0
.text:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028A0
.text:00000000000028A0
.text:00000000000028A0 ; __int64 __fastcall fwrite_uppcase(FILE *stream)
.text:00000000000028A0 fwrite_uppcase  proc near               ; CODE XREF: __strftime_internal+2C9↓p
.text:00000000000028A0                                         ; __strftime_internal+4BE↓p ...
.text:00000000000028A0 ; __unwind {
.text:00000000000028A0                 test    rdx, rdx
.text:00000000000028A3                 jz      short locret_28F0
.text:00000000000028A5                 push    r13
.text:00000000000028A7                 push    r12
.text:00000000000028A9                 mov     r12, rdi
.text:00000000000028AC                 push    rbp
.text:00000000000028AD                 push    rbx
.text:00000000000028AE                 mov     rbp, rdx
.text:00000000000028B1                 mov     rbx, rsi
.text:00000000000028B4                 sub     rsp, 8
.text:00000000000028B8                 add     rbp, rbx
.text:00000000000028BB                 call    ___ctype_toupper_loc
.text:00000000000028C0                 mov     r13, rax
.text:00000000000028C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000028C8
.text:00000000000028C8 loc_28C8:                               ; CODE XREF: fwrite_uppcase+41↓j
.text:00000000000028C8                 movzx   ecx, byte ptr [rbx]
.text:00000000000028CB                 mov     rax, [r13+0]
.text:00000000000028CF                 mov     rsi, r12        ; stream
.text:00000000000028D2                 add     rbx, 1
.text:00000000000028D6                 mov     edi, [rax+rcx*4] ; c
.text:00000000000028D9                 call    _fputc
.text:00000000000028DE                 cmp     rbx, rbp
.text:00000000000028E1                 jnz     short loc_28C8
.text:00000000000028E3                 add     rsp, 8
.text:00000000000028E7                 pop     rbx
.text:00000000000028E8                 pop     rbp
.text:00000000000028E9                 pop     r12
.text:00000000000028EB                 pop     r13
.text:00000000000028ED                 retn
.text:00000000000028ED ; ---------------------------------------------------------------------------
.text:00000000000028EE                 align 10h
.text:00000000000028F0
.text:00000000000028F0 locret_28F0:                            ; CODE XREF: fwrite_uppcase+3↑j
.text:00000000000028F0                 rep retn
.text:00000000000028F0 ; } // starts at 28A0
.text:00000000000028F0 fwrite_uppcase  endp
.text:00000000000028F0
.text:00000000000028F0 ; ---------------------------------------------------------------------------
.text:00000000000028F2                 align 20h
.text:0000000000002900
.text:0000000000002900 ; =============== S U B R O U T I N E =======================================
.text:0000000000002900
.text:0000000000002900
.text:0000000000002900 ; __int64 __usercall _strftime_internal@<rax>(FILE *stream@<rdi>, __int64, __int64, int)
.text:0000000000002900 __strftime_internal proc near           ; CODE XREF: __strftime_internal+6A3↓p
.text:0000000000002900                                         ; __strftime_internal+1562↓p ...
.text:0000000000002900
.text:0000000000002900 tp              = qword ptr -4E8h
.text:0000000000002900 var_4E0         = qword ptr -4E0h
.text:0000000000002900 var_4D8         = qword ptr -4D8h
.text:0000000000002900 var_4D0         = qword ptr -4D0h
.text:0000000000002900 var_4C5         = byte ptr -4C5h
.text:0000000000002900 var_4C4         = dword ptr -4C4h
.text:0000000000002900 var_4C0         = qword ptr -4C0h
.text:0000000000002900 var_4B8         = dword ptr -4B8h
.text:0000000000002900 var_4B4         = dword ptr -4B4h
.text:0000000000002900 ptr             = qword ptr -4B0h
.text:0000000000002900 size            = qword ptr -4A8h
.text:0000000000002900 var_4A0         = qword ptr -4A0h
.text:0000000000002900 var_498         = qword ptr -498h
.text:0000000000002900 var_490         = dword ptr -490h
.text:0000000000002900 var_48C         = dword ptr -48Ch
.text:0000000000002900 var_488         = xmmword ptr -488h
.text:0000000000002900 var_478         = xmmword ptr -478h
.text:0000000000002900 var_468         = xmmword ptr -468h
.text:0000000000002900 var_458         = qword ptr -458h
.text:0000000000002900 format          = byte ptr -44Dh
.text:0000000000002900 var_44B         = byte ptr -44Bh
.text:0000000000002900 s               = byte ptr -448h
.text:0000000000002900 var_431         = byte ptr -431h
.text:0000000000002900 var_40          = qword ptr -40h
.text:0000000000002900 arg_0           = qword ptr  8
.text:0000000000002900 arg_8           = qword ptr  10h
.text:0000000000002900 arg_10          = dword ptr  18h
.text:0000000000002900
.text:0000000000002900 ; __unwind {
.text:0000000000002900                 push    r15
.text:0000000000002902                 push    r14
.text:0000000000002904                 mov     r10, rsi
.text:0000000000002907                 push    r13
.text:0000000000002909                 push    r12
.text:000000000000290B                 mov     r12, rdi
.text:000000000000290E                 push    rbp
.text:000000000000290F                 push    rbx
.text:0000000000002910                 mov     ebp, r9d
.text:0000000000002913                 sub     rsp, 4B8h
.text:000000000000291A                 mov     r13, [rdx+30h]
.text:000000000000291E                 mov     r14d, [rdx+8]
.text:0000000000002922                 mov     rax, [rsp+4E8h+arg_0]
.text:000000000000292A                 mov     [rsp+4E8h+tp], rdx
.text:000000000000292E                 mov     [rsp+4E8h+var_4C4], r8d
.text:0000000000002933                 mov     [rsp+4E8h+var_4C5], cl
.text:0000000000002937                 mov     [rsp+4E8h+var_4D0], rax
.text:000000000000293C                 mov     rax, [rsp+4E8h+arg_8]
.text:0000000000002944                 mov     [rsp+4E8h+var_4D8], rax
.text:0000000000002949                 mov     rax, fs:28h
.text:0000000000002952                 mov     [rsp+4E8h+var_40], rax
.text:000000000000295A                 xor     eax, eax
.text:000000000000295C                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002963                 test    r13, r13
.text:0000000000002966                 cmovz   r13, rax
.text:000000000000296A                 cmp     r14d, 0Ch
.text:000000000000296E                 jle     loc_2AC8
.text:0000000000002974                 sub     r14d, 0Ch
.text:0000000000002978
.text:0000000000002978 loc_2978:                               ; CODE XREF: __strftime_internal+1D4↓j
.text:0000000000002978                 movzx   eax, byte ptr [r10]
.text:000000000000297C                 xor     r15d, r15d
.text:000000000000297F                 test    al, al
.text:0000000000002981                 jz      short loc_29C2
.text:0000000000002983                 cmp     al, 25h ; '%'
.text:0000000000002985                 mov     rbx, r10
.text:0000000000002988                 mov     [rsp+4E8h+var_4B8], r14d
.text:000000000000298D                 mov     [rsp+4E8h+var_4C0], r13
.text:0000000000002992                 movsxd  r10, ebp
.text:0000000000002995                 jz      loc_2A2B
.text:000000000000299B
.text:000000000000299B loc_299B:                               ; CODE XREF: __strftime_internal+125↓j
.text:000000000000299B                 test    r10d, r10d
.text:000000000000299E                 mov     r14d, 0
.text:00000000000029A4                 mov     eax, 1
.text:00000000000029A9                 cmovns  r14, r10
.text:00000000000029AD                 test    r14, r14
.text:00000000000029B0                 cmovz   r14, rax
.text:00000000000029B4                 mov     rax, r15
.text:00000000000029B7                 not     rax
.text:00000000000029BA                 cmp     rax, r14
.text:00000000000029BD                 ja      short loc_29F0
.text:00000000000029BF
.text:00000000000029BF loc_29BF:                               ; CODE XREF: __strftime_internal+257↓j
.text:00000000000029BF                                         ; __strftime_internal+437↓j ...
.text:00000000000029BF                 xor     r15d, r15d
.text:00000000000029C2
.text:00000000000029C2 loc_29C2:                               ; CODE XREF: __strftime_internal+81↑j
.text:00000000000029C2                                         ; __strftime_internal+121↓j
.text:00000000000029C2                 mov     rdi, [rsp+4E8h+var_40]
.text:00000000000029CA                 xor     rdi, fs:28h
.text:00000000000029D3                 mov     rax, r15
.text:00000000000029D6                 jnz     loc_44F8
.text:00000000000029DC                 add     rsp, 4B8h
.text:00000000000029E3                 pop     rbx
.text:00000000000029E4                 pop     rbp
.text:00000000000029E5                 pop     r12
.text:00000000000029E7                 pop     r13
.text:00000000000029E9                 pop     r14
.text:00000000000029EB                 pop     r15
.text:00000000000029ED                 retn
.text:00000000000029ED ; ---------------------------------------------------------------------------
.text:00000000000029EE                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: __strftime_internal+BD↑j
.text:00000000000029F0                 test    r12, r12
.text:00000000000029F3                 jz      short loc_2A0A
.text:00000000000029F5                 cmp     r10d, 1
.text:00000000000029F9                 jg      loc_2BE0
.text:00000000000029FF
.text:00000000000029FF loc_29FF:                               ; CODE XREF: __strftime_internal+306↓j
.text:00000000000029FF                                         ; __strftime_internal+EAC↓j ...
.text:00000000000029FF                 movsx   edi, byte ptr [rbx] ; c
.text:0000000000002A02
.text:0000000000002A02 loc_2A02:                               ; CODE XREF: __strftime_internal+E71↓j
.text:0000000000002A02                 mov     rsi, r12        ; stream
.text:0000000000002A05                 call    _fputc
.text:0000000000002A0A
.text:0000000000002A0A loc_2A0A:                               ; CODE XREF: __strftime_internal+F3↑j
.text:0000000000002A0A                                         ; __strftime_internal+E67↓j
.text:0000000000002A0A                 add     r15, r14
.text:0000000000002A0D                 mov     rbp, rbx
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: __strftime_internal+2D1↓j
.text:0000000000002A10                                         ; __strftime_internal+404↓j ...
.text:0000000000002A10                 movzx   eax, byte ptr [rbp+1]
.text:0000000000002A14                 lea     rbx, [rbp+1]
.text:0000000000002A18                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A1F                 test    al, al
.text:0000000000002A21                 jz      short loc_29C2
.text:0000000000002A23                 cmp     al, 25h ; '%'
.text:0000000000002A25                 jnz     loc_299B
.text:0000000000002A2B
.text:0000000000002A2B loc_2A2B:                               ; CODE XREF: __strftime_internal+95↑j
.text:0000000000002A2B                 movzx   eax, [rsp+4E8h+var_4C5]
.text:0000000000002A30                 xor     r14d, r14d
.text:0000000000002A33                 mov     dword ptr [rsp+4E8h+var_4E0], 0
.text:0000000000002A3B                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:0000000000002A3F                 mov     eax, 1
.text:0000000000002A44
.text:0000000000002A44 loc_2A44:                               ; CODE XREF: __strftime_internal+1F5↓j
.text:0000000000002A44                                         ; __strftime_internal+206↓j ...
.text:0000000000002A44                 add     rbx, 1
.text:0000000000002A48                 movsx   r11d, byte ptr [rbx]
.text:0000000000002A4C                 lea     ecx, [r11-23h]
.text:0000000000002A50                 mov     r13d, r11d
.text:0000000000002A53                 mov     edi, r11d
.text:0000000000002A56                 cmp     cl, 3Ch ; '<'
.text:0000000000002A59                 ja      short loc_2A8F
.text:0000000000002A5B                 mov     rdx, rax
.text:0000000000002A5E                 mov     rsi, 1000000000002500h
.text:0000000000002A68                 shl     rdx, cl
.text:0000000000002A6B                 test    rdx, rsi
.text:0000000000002A6E                 jnz     loc_2AF0
.text:0000000000002A74                 test    cl, cl
.text:0000000000002A76                 jz      loc_2B00
.text:0000000000002A7C                 mov     rsi, 800000000000000h
.text:0000000000002A86                 test    rdx, rsi
.text:0000000000002A89                 jnz     loc_2C10
.text:0000000000002A8F
.text:0000000000002A8F loc_2A8F:                               ; CODE XREF: __strftime_internal+159↑j
.text:0000000000002A8F                 lea     eax, [r11-30h]
.text:0000000000002A93                 cmp     eax, 9
.text:0000000000002A96                 jbe     loc_2C20
.text:0000000000002A9C
.text:0000000000002A9C loc_2A9C:                               ; CODE XREF: __strftime_internal+355↓j
.text:0000000000002A9C                                         ; __strftime_internal+394↓j
.text:0000000000002A9C                 cmp     r13b, 45h ; 'E'
.text:0000000000002AA0                 jz      short loc_2AE0
.text:0000000000002AA2                 cmp     r13b, 4Fh ; 'O'
.text:0000000000002AA6                 jz      short loc_2AE0
.text:0000000000002AA8                 xor     r11d, r11d
.text:0000000000002AAB
.text:0000000000002AAB loc_2AAB:                               ; CODE XREF: __strftime_internal+1EB↓j
.text:0000000000002AAB                 cmp     r13b, 7Ah       ; switch 123 cases
.text:0000000000002AAF                 ja      short def_2AC3  ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000002AB1                 lea     rsi, jpt_2AC3
.text:0000000000002AB8                 movzx   eax, r13b
.text:0000000000002ABC                 movsxd  rax, ds:(jpt_2AC3 - 7D94h)[rsi+rax*4]
.text:0000000000002AC0                 add     rax, rsi
.text:0000000000002AC3                 jmp     rax             ; switch jump
.text:0000000000002AC3 ; ---------------------------------------------------------------------------
.text:0000000000002AC5                 align 8
.text:0000000000002AC8
.text:0000000000002AC8 loc_2AC8:                               ; CODE XREF: __strftime_internal+6E↑j
.text:0000000000002AC8                 test    r14d, r14d
.text:0000000000002ACB                 mov     eax, 0Ch
.text:0000000000002AD0                 cmovz   r14d, eax
.text:0000000000002AD4                 jmp     loc_2978
.text:0000000000002AD4 ; ---------------------------------------------------------------------------
.text:0000000000002AD9                 align 20h
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: __strftime_internal+1A0↑j
.text:0000000000002AE0                                         ; __strftime_internal+1A6↑j
.text:0000000000002AE0                 movsx   edi, byte ptr [rbx+1]
.text:0000000000002AE4                 add     rbx, 1
.text:0000000000002AE8                 mov     r13d, edi
.text:0000000000002AEB                 jmp     short loc_2AAB
.text:0000000000002AEB ; ---------------------------------------------------------------------------
.text:0000000000002AED                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: __strftime_internal+16E↑j
.text:0000000000002AF0                 mov     dword ptr [rsp+4E8h+var_4E0], r11d
.text:0000000000002AF5                 jmp     loc_2A44
.text:0000000000002AF5 ; ---------------------------------------------------------------------------
.text:0000000000002AFA                 align 20h
.text:0000000000002B00
.text:0000000000002B00 loc_2B00:                               ; CODE XREF: __strftime_internal+176↑j
.text:0000000000002B00                 mov     r14d, 1
.text:0000000000002B06                 jmp     loc_2A44
.text:0000000000002B0B ; ---------------------------------------------------------------------------
.text:0000000000002B0B
.text:0000000000002B0B loc_2B0B:                               ; CODE XREF: __strftime_internal+DF1↓j
.text:0000000000002B0B                 mov     rbx, [rsp+4E8h+ptr]
.text:0000000000002B10
.text:0000000000002B10 def_2AC3:                               ; CODE XREF: __strftime_internal+1AF↑j
.text:0000000000002B10                                         ; __strftime_internal+1C3↑j ...
.text:0000000000002B10                 lea     rax, [rbx-1]    ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000002B14                 mov     r13d, 1
.text:0000000000002B1A
.text:0000000000002B1A loc_2B1A:                               ; CODE XREF: __strftime_internal+229↓j
.text:0000000000002B1A                 mov     rdx, rax
.text:0000000000002B1D                 lea     rax, [rax-1]
.text:0000000000002B21                 add     r13d, 1
.text:0000000000002B25                 cmp     byte ptr [rax+1], 25h ; '%'
.text:0000000000002B29                 jnz     short loc_2B1A
.text:0000000000002B2B                 test    r10d, r10d
.text:0000000000002B2E                 mov     eax, 0
.text:0000000000002B33                 movsxd  r13, r13d
.text:0000000000002B36                 cmovns  eax, r10d
.text:0000000000002B3A                 mov     [rsp+4E8h+ptr], rdx
.text:0000000000002B3F                 mov     r14, r13
.text:0000000000002B42                 cdqe
.text:0000000000002B44                 mov     rdx, r15
.text:0000000000002B47                 mov     rbp, rbx
.text:0000000000002B4A                 cmp     rax, r13
.text:0000000000002B4D                 not     rdx
.text:0000000000002B50                 cmovnb  r14, rax
.text:0000000000002B54
.text:0000000000002B54 loc_2B54:                               ; CODE XREF: __strftime_internal+E0F↓j
.text:0000000000002B54                                         ; __strftime_internal+18D5↓j
.text:0000000000002B54                 cmp     rdx, r14
.text:0000000000002B57                 jbe     loc_29BF
.text:0000000000002B5D                 test    r12, r12
.text:0000000000002B60                 jz      short loc_2BCE
.text:0000000000002B62                 cmp     r13, rax
.text:0000000000002B65                 jnb     short loc_2BB3
.text:0000000000002B67                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000002B6B                 movsxd  rbx, r10d
.text:0000000000002B6E                 sub     rbx, r13
.text:0000000000002B71                 cmp     eax, 30h ; '0'
.text:0000000000002B74                 jz      loc_3DA3
.text:0000000000002B7A                 cmp     eax, 2Bh ; '+'
.text:0000000000002B7D                 jz      loc_3DA3
.text:0000000000002B83                 xor     edx, edx
.text:0000000000002B85                 test    rbx, rbx
.text:0000000000002B88                 jz      short loc_2BB3
.text:0000000000002B8A                 mov     [rsp+4E8h+var_4E0], rbp
.text:0000000000002B8F                 mov     rbp, rdx
.text:0000000000002B92                 nop     word ptr [rax+rax+00h]
.text:0000000000002B98
.text:0000000000002B98 loc_2B98:                               ; CODE XREF: __strftime_internal+2AC↓j
.text:0000000000002B98                 mov     rsi, r12        ; stream
.text:0000000000002B9B                 mov     edi, 20h ; ' '  ; c
.text:0000000000002BA0                 add     rbp, 1
.text:0000000000002BA4                 call    _fputc
.text:0000000000002BA9                 cmp     rbx, rbp
.text:0000000000002BAC                 jnz     short loc_2B98
.text:0000000000002BAE
.text:0000000000002BAE loc_2BAE:                               ; CODE XREF: __strftime_internal+14D6↓j
.text:0000000000002BAE                 mov     rbp, [rsp+4E8h+var_4E0]
.text:0000000000002BB3
.text:0000000000002BB3 loc_2BB3:                               ; CODE XREF: __strftime_internal+265↑j
.text:0000000000002BB3                                         ; __strftime_internal+288↑j ...
.text:0000000000002BB3                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000002BB8                 jz      loc_3CE8
.text:0000000000002BBE                 mov     rsi, [rsp+4E8h+ptr]
.text:0000000000002BC3                 mov     rdx, r13
.text:0000000000002BC6                 mov     rdi, r12        ; stream
.text:0000000000002BC9                 call    fwrite_uppcase
.text:0000000000002BCE
.text:0000000000002BCE loc_2BCE:                               ; CODE XREF: __strftime_internal+260↑j
.text:0000000000002BCE                                         ; __strftime_internal+13FD↓j
.text:0000000000002BCE                 add     r15, r14
.text:0000000000002BD1                 jmp     loc_2A10
.text:0000000000002BD1 ; ---------------------------------------------------------------------------
.text:0000000000002BD6                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: __strftime_internal+F9↑j
.text:0000000000002BE0                 lea     r13, [r10-1]
.text:0000000000002BE4                 xor     ebp, ebp
.text:0000000000002BE6                 db      2Eh
.text:0000000000002BE6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: __strftime_internal+304↓j
.text:0000000000002BF0                 mov     rsi, r12        ; stream
.text:0000000000002BF3                 mov     edi, 20h ; ' '  ; c
.text:0000000000002BF8                 add     rbp, 1
.text:0000000000002BFC                 call    _fputc
.text:0000000000002C01                 cmp     r13, rbp
.text:0000000000002C04                 jnz     short loc_2BF0
.text:0000000000002C06                 jmp     loc_29FF
.text:0000000000002C06 ; ---------------------------------------------------------------------------
.text:0000000000002C0B                 align 10h
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: __strftime_internal+189↑j
.text:0000000000002C10                 mov     byte ptr [rsp+4E8h+var_4B4], 1
.text:0000000000002C15                 jmp     loc_2A44
.text:0000000000002C15 ; ---------------------------------------------------------------------------
.text:0000000000002C1A                 align 20h
.text:0000000000002C20
.text:0000000000002C20 loc_2C20:                               ; CODE XREF: __strftime_internal+196↑j
.text:0000000000002C20                 xor     r10d, r10d
.text:0000000000002C23
.text:0000000000002C23 loc_2C23:                               ; CODE XREF: __strftime_internal+350↓j
.text:0000000000002C23                 movsx   r11d, byte ptr [rbx+1]
.text:0000000000002C28                 cmp     r10d, 0CCCCCCCh
.text:0000000000002C2F                 lea     rcx, [rbx+1]
.text:0000000000002C33                 mov     r13d, r11d
.text:0000000000002C36                 lea     eax, [r11-30h]
.text:0000000000002C3A                 jg      short loc_2C65
.text:0000000000002C3C                 movsx   edx, byte ptr [rbx]
.text:0000000000002C3F                 jz      short loc_2C60
.text:0000000000002C41
.text:0000000000002C41 loc_2C41:                               ; CODE XREF: __strftime_internal+363↓j
.text:0000000000002C41                 lea     esi, [r10+r10*4]
.text:0000000000002C45                 mov     rbx, rcx
.text:0000000000002C48                 lea     r10d, [rdx+rsi*2-30h]
.text:0000000000002C4D
.text:0000000000002C4D loc_2C4D:                               ; CODE XREF: __strftime_internal+380↓j
.text:0000000000002C4D                 cmp     eax, 9
.text:0000000000002C50                 jbe     short loc_2C23
.text:0000000000002C52                 mov     edi, r11d
.text:0000000000002C55                 jmp     loc_2A9C
.text:0000000000002C55 ; ---------------------------------------------------------------------------
.text:0000000000002C5A                 align 20h
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: __strftime_internal+33F↑j
.text:0000000000002C60                 cmp     dl, 37h ; '7'
.text:0000000000002C63                 jle     short loc_2C41
.text:0000000000002C65
.text:0000000000002C65 loc_2C65:                               ; CODE XREF: __strftime_internal+33A↑j
.text:0000000000002C65                 cmp     eax, 9
.text:0000000000002C68                 ja      short loc_2C88
.text:0000000000002C6A                 movsx   r11d, byte ptr [rbx+2]
.text:0000000000002C6F                 mov     r10d, 7FFFFFFFh
.text:0000000000002C75                 add     rbx, 2
.text:0000000000002C79                 mov     r13d, r11d
.text:0000000000002C7C                 lea     eax, [r11-30h]
.text:0000000000002C80                 jmp     short loc_2C4D
.text:0000000000002C80 ; ---------------------------------------------------------------------------
.text:0000000000002C82                 align 8
.text:0000000000002C88
.text:0000000000002C88 loc_2C88:                               ; CODE XREF: __strftime_internal+368↑j
.text:0000000000002C88                 mov     edi, r11d
.text:0000000000002C8B                 mov     rbx, rcx
.text:0000000000002C8E                 mov     r10d, 7FFFFFFFh
.text:0000000000002C94                 jmp     loc_2A9C
.text:0000000000002C94 ; ---------------------------------------------------------------------------
.text:0000000000002C99                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002CA0                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002CA0                 cmp     r11d, 4Fh ; 'O' ; jumptable 0000000000002AC3 cases 88,99,120
.text:0000000000002CA4                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000002CAA
.text:0000000000002CAA loc_2CAA:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002CAA                                         ; __strftime_internal+E2C↓j
.text:0000000000002CAA                                         ; DATA XREF: ...
.text:0000000000002CAA                 xor     r14d, r14d      ; jumptable 0000000000002AC3 case 114
.text:0000000000002CAD
.text:0000000000002CAD loc_2CAD:                               ; CODE XREF: __strftime_internal+658↓j
.text:0000000000002CAD                                         ; __strftime_internal+E21↓j ...
.text:0000000000002CAD                 mov     ebp, 2520h
.text:0000000000002CB2                 test    r11d, r11d
.text:0000000000002CB5                 mov     word ptr [rsp+4E8h+format], bp
.text:0000000000002CBD                 jnz     loc_4510
.text:0000000000002CC3                 lea     rdx, [rsp+4E8h+format] ; format
.text:0000000000002CCB                 mov     rbp, rbx
.text:0000000000002CCE                 lea     rax, [rdx+2]
.text:0000000000002CD2
.text:0000000000002CD2 loc_2CD2:                               ; CODE XREF: __strftime_internal+50B↓j
.text:0000000000002CD2                                         ; __strftime_internal+624↓j
.text:0000000000002CD2                 mov     [rax], r13b
.text:0000000000002CD5                 mov     byte ptr [rax+1], 0
.text:0000000000002CD9                 lea     rax, [rsp+4E8h+s]
.text:0000000000002CE1                 mov     rcx, [rsp+4E8h+tp] ; tp
.text:0000000000002CE5                 mov     esi, 400h       ; maxsize
.text:0000000000002CEA                 mov     dword ptr [rsp+4E8h+size], r10d
.text:0000000000002CEF                 mov     rdi, rax        ; s
.text:0000000000002CF2                 mov     [rsp+4E8h+var_490], r11d
.text:0000000000002CF7                 mov     [rsp+4E8h+ptr], rax
.text:0000000000002CFC                 call    _strftime
.text:0000000000002D01                 test    rax, rax
.text:0000000000002D04                 jz      loc_2A10
.text:0000000000002D0A                 movsxd  r10, dword ptr [rsp+4E8h+size]
.text:0000000000002D0F                 lea     r13, [rax-1]
.text:0000000000002D13                 mov     eax, 0
.text:0000000000002D18                 mov     rdx, r15
.text:0000000000002D1B                 not     rdx
.text:0000000000002D1E                 test    r10d, r10d
.text:0000000000002D21                 cmovns  rax, r10
.text:0000000000002D25                 cmp     r13, rax
.text:0000000000002D28                 mov     rdi, rax
.text:0000000000002D2B                 cmovnb  rdi, r13
.text:0000000000002D2F                 cmp     rdx, rdi
.text:0000000000002D32                 mov     [rsp+4E8h+size], rdi
.text:0000000000002D37                 jbe     loc_29BF
.text:0000000000002D3D                 test    r12, r12
.text:0000000000002D40                 jz      loc_2DC3
.text:0000000000002D46                 mov     r11d, [rsp+4E8h+var_490]
.text:0000000000002D4B                 test    r11d, r11d
.text:0000000000002D4E                 jnz     short loc_2D9B
.text:0000000000002D50                 cmp     r13, rax
.text:0000000000002D53                 jnb     short loc_2D9B
.text:0000000000002D55                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000002D59                 movsxd  rbx, r10d
.text:0000000000002D5C                 sub     rbx, r13
.text:0000000000002D5F                 cmp     eax, 30h ; '0'
.text:0000000000002D62                 jz      loc_3D70
.text:0000000000002D68                 cmp     eax, 2Bh ; '+'
.text:0000000000002D6B                 jz      loc_3D70
.text:0000000000002D71                 xor     edx, edx
.text:0000000000002D73                 test    rbx, rbx
.text:0000000000002D76                 jz      short loc_2D9B
.text:0000000000002D78                 mov     [rsp+4E8h+var_4E0], rbp
.text:0000000000002D7D                 mov     rbp, rdx
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: __strftime_internal+494↓j
.text:0000000000002D80                 mov     rsi, r12        ; stream
.text:0000000000002D83                 mov     edi, 20h ; ' '  ; c
.text:0000000000002D88                 add     rbp, 1
.text:0000000000002D8C                 call    _fputc
.text:0000000000002D91                 cmp     rbx, rbp
.text:0000000000002D94                 jnz     short loc_2D80
.text:0000000000002D96
.text:0000000000002D96 loc_2D96:                               ; CODE XREF: __strftime_internal+149E↓j
.text:0000000000002D96                 mov     rbp, [rsp+4E8h+var_4E0]
.text:0000000000002D9B
.text:0000000000002D9B loc_2D9B:                               ; CODE XREF: __strftime_internal+44E↑j
.text:0000000000002D9B                                         ; __strftime_internal+453↑j ...
.text:0000000000002D9B                 test    r14b, r14b
.text:0000000000002D9E                 jnz     loc_3D30
.text:0000000000002DA4                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000002DA9                 jz      loc_3D08
.text:0000000000002DAF                 mov     rsi, [rsp+4E8h+ptr]
.text:0000000000002DB4                 mov     rdx, r13
.text:0000000000002DB7                 mov     rdi, r12        ; stream
.text:0000000000002DBA                 add     rsi, 1
.text:0000000000002DBE                 call    fwrite_uppcase
.text:0000000000002DC3
.text:0000000000002DC3 loc_2DC3:                               ; CODE XREF: __strftime_internal+440↑j
.text:0000000000002DC3                                         ; __strftime_internal+1421↓j ...
.text:0000000000002DC3                 add     r15, [rsp+4E8h+size]
.text:0000000000002DC8                 jmp     loc_2A10
.text:0000000000002DC8 ; ---------------------------------------------------------------------------
.text:0000000000002DCD                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002DD0                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002DD0                 test    r11d, r11d      ; jumptable 0000000000002AC3 cases 65,97
.text:0000000000002DD3                 jnz     def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000002DD9                 movzx   eax, byte ptr [rsp+4E8h+var_4B4]
.text:0000000000002DDE                 test    r14b, r14b
.text:0000000000002DE1                 lea     rdx, [rsp+4E8h+format]
.text:0000000000002DE9                 mov     rbp, rbx
.text:0000000000002DEC                 cmovnz  eax, r14d
.text:0000000000002DF0                 xor     r14d, r14d
.text:0000000000002DF3                 xor     r11d, r11d
.text:0000000000002DF6                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:0000000000002DFA                 mov     eax, 2520h
.text:0000000000002DFF                 mov     word ptr [rsp+4E8h+format], ax
.text:0000000000002E07                 lea     rax, [rdx+2]
.text:0000000000002E0B                 jmp     loc_2CD2
.text:0000000000002E10 ; ---------------------------------------------------------------------------
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002E10                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002E10                 test    r10d, r10d      ; jumptable 0000000000002AC3 case 116
.text:0000000000002E13                 mov     r13d, 0
.text:0000000000002E19                 mov     eax, 1
.text:0000000000002E1E                 cmovns  r13d, r10d
.text:0000000000002E22                 movsxd  r13, r13d
.text:0000000000002E25                 test    r13, r13
.text:0000000000002E28                 cmovz   r13, rax
.text:0000000000002E2C                 mov     rax, r15
.text:0000000000002E2F                 not     rax
.text:0000000000002E32                 cmp     rax, r13
.text:0000000000002E35                 jbe     loc_29BF
.text:0000000000002E3B                 test    r12, r12
.text:0000000000002E3E                 jz      loc_2FDF
.text:0000000000002E44                 cmp     r10d, 1
.text:0000000000002E48                 jle     short loc_2E7F
.text:0000000000002E4A                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000002E4E                 movsxd  r10, r10d
.text:0000000000002E51                 lea     r14, [r10-1]
.text:0000000000002E55                 cmp     eax, 30h ; '0'
.text:0000000000002E58                 jz      loc_432F
.text:0000000000002E5E                 xor     ebp, ebp
.text:0000000000002E60                 cmp     eax, 2Bh ; '+'
.text:0000000000002E63                 jz      loc_432F
.text:0000000000002E69
.text:0000000000002E69 loc_2E69:                               ; CODE XREF: __strftime_internal+57D↓j
.text:0000000000002E69                 mov     rsi, r12        ; stream
.text:0000000000002E6C                 mov     edi, 20h ; ' '  ; c
.text:0000000000002E71                 add     rbp, 1
.text:0000000000002E75                 call    _fputc
.text:0000000000002E7A                 cmp     r14, rbp
.text:0000000000002E7D                 jnz     short loc_2E69
.text:0000000000002E7F
.text:0000000000002E7F loc_2E7F:                               ; CODE XREF: __strftime_internal+548↑j
.text:0000000000002E7F                                         ; __strftime_internal+1A47↓j
.text:0000000000002E7F                 mov     rsi, r12        ; stream
.text:0000000000002E82                 mov     edi, 9          ; c
.text:0000000000002E87                 call    _fputc
.text:0000000000002E8C                 jmp     loc_2FDF
.text:0000000000002E91 ; ---------------------------------------------------------------------------
.text:0000000000002E91
.text:0000000000002E91 loc_2E91:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002E91                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002E91                 mov     rax, [rsp+4E8h+tp] ; jumptable 0000000000002AC3 case 117
.text:0000000000002E95                 mov     edx, 92492493h
.text:0000000000002E9A                 mov     esi, 1
.text:0000000000002E9F                 mov     eax, [rax+18h]
.text:0000000000002EA2                 lea     ecx, [rax+6]
.text:0000000000002EA5                 mov     dword ptr [rsp+4E8h+ptr], eax
.text:0000000000002EA9                 mov     eax, ecx
.text:0000000000002EAB                 imul    edx
.text:0000000000002EAD                 lea     eax, [rdx+rcx]
.text:0000000000002EB0                 mov     edx, ecx
.text:0000000000002EB2                 sar     edx, 1Fh
.text:0000000000002EB5                 sar     eax, 2
.text:0000000000002EB8                 sub     eax, edx
.text:0000000000002EBA                 lea     edx, ds:0[rax*8]
.text:0000000000002EC1                 sub     edx, eax
.text:0000000000002EC3                 sub     ecx, edx
.text:0000000000002EC5                 add     ecx, 1
.text:0000000000002EC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: __strftime_internal+63F↓j
.text:0000000000002ED0                                         ; __strftime_internal+6FF↓j ...
.text:0000000000002ED0                 mov     eax, ecx
.text:0000000000002ED2                 xor     r8d, r8d
.text:0000000000002ED5                 xor     r9d, r9d
.text:0000000000002ED8                 shr     eax, 1Fh
.text:0000000000002EDB                 mov     r13d, eax
.text:0000000000002EDE                 mov     eax, ecx
.text:0000000000002EE0                 not     eax
.text:0000000000002EE2                 shr     eax, 1Fh
.text:0000000000002EE5
.text:0000000000002EE5 loc_2EE5:                               ; CODE XREF: __strftime_internal+C4F↓j
.text:0000000000002EE5                                         ; __strftime_internal+F9E↓j ...
.text:0000000000002EE5                 cmp     r11d, 4Fh ; 'O'
.text:0000000000002EE9                 jnz     loc_3C00
.text:0000000000002EEF                 test    al, al
.text:0000000000002EF1                 jz      loc_3C00
.text:0000000000002EF7                 mov     r13d, edi
.text:0000000000002EFA
.text:0000000000002EFA loc_2EFA:                               ; CODE XREF: __strftime_internal+8C6↓j
.text:0000000000002EFA                                         ; __strftime_internal+15A5↓j
.text:0000000000002EFA                 mov     edx, 2520h
.text:0000000000002EFF                 xor     r14d, r14d
.text:0000000000002F02                 mov     word ptr [rsp+4E8h+format], dx
.text:0000000000002F0A
.text:0000000000002F0A loc_2F0A:                               ; CODE XREF: __strftime_internal+1C12↓j
.text:0000000000002F0A                 lea     rdx, [rsp+4E8h+format]
.text:0000000000002F12                 mov     [rsp+4E8h+var_44B], r11b
.text:0000000000002F1A                 mov     rbp, rbx
.text:0000000000002F1D                 mov     r11d, esi
.text:0000000000002F20                 lea     rax, [rdx+3]
.text:0000000000002F24                 jmp     loc_2CD2
.text:0000000000002F29 ; ---------------------------------------------------------------------------
.text:0000000000002F29
.text:0000000000002F29 loc_2F29:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002F29                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002F29                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 119
.text:0000000000002F2D                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000002F33                 mov     rax, [rsp+4E8h+tp]
.text:0000000000002F37                 mov     esi, 1
.text:0000000000002F3C                 mov     ecx, [rax+18h]
.text:0000000000002F3F                 jmp     short loc_2ED0
.text:0000000000002F41 ; ---------------------------------------------------------------------------
.text:0000000000002F41
.text:0000000000002F41 loc_2F41:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002F41                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002F41                 mov     eax, 1          ; jumptable 0000000000002AC3 case 80
.text:0000000000002F46
.text:0000000000002F46 loc_2F46:                               ; CODE XREF: __strftime_internal+12C6↓j
.text:0000000000002F46                 test    r14b, r14b
.text:0000000000002F49                 jnz     loc_3EAA
.text:0000000000002F4F                 mov     r14d, eax
.text:0000000000002F52                 mov     r13d, 70h ; 'p'
.text:0000000000002F58                 jmp     loc_2CAD
.text:0000000000002F5D ; ---------------------------------------------------------------------------
.text:0000000000002F5D
.text:0000000000002F5D loc_2F5D:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002F5D                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002F5D                 lea     rax, aHM        ; jumptable 0000000000002AC3 case 82
.text:0000000000002F64                 mov     r14d, 0FFFFFFFFh
.text:0000000000002F6A                 mov     [rsp+4E8h+ptr], rax
.text:0000000000002F6F
.text:0000000000002F6F loc_2F6F:                               ; CODE XREF: __strftime_internal+A9C↓j
.text:0000000000002F6F                                         ; __strftime_internal+D89↓j ...
.text:0000000000002F6F                 movzx   ebp, byte ptr [rsp+4E8h+var_4B4]
.text:0000000000002F74                 mov     dword ptr [rsp+4E8h+size], r10d
.text:0000000000002F79                 sub     rsp, 8
.text:0000000000002F7D                 mov     eax, [rsp+4F0h+arg_10]
.text:0000000000002F84                 xor     edi, edi        ; stream
.text:0000000000002F86                 mov     r9d, r14d
.text:0000000000002F89                 push    rax             ; int
.text:0000000000002F8A                 push    [rsp+4F8h+var_4D8] ; __int64
.text:0000000000002F8E                 mov     ecx, ebp
.text:0000000000002F90                 push    [rsp+500h+var_4D0] ; __int64
.text:0000000000002F94                 mov     rdx, [rsp+508h+tp]
.text:0000000000002F99                 mov     r8d, dword ptr [rsp+508h+var_4E0]
.text:0000000000002F9E                 mov     rsi, [rsp+508h+ptr]
.text:0000000000002FA3                 call    __strftime_internal
.text:0000000000002FA8                 add     rsp, 20h
.text:0000000000002FAC                 movsxd  r10, dword ptr [rsp+4E8h+size]
.text:0000000000002FB1                 mov     edx, 0
.text:0000000000002FB6                 mov     rcx, r15
.text:0000000000002FB9                 not     rcx
.text:0000000000002FBC                 test    r10d, r10d
.text:0000000000002FBF                 cmovns  rdx, r10
.text:0000000000002FC3                 cmp     rax, rdx
.text:0000000000002FC6                 mov     r13, rdx
.text:0000000000002FC9                 cmovnb  r13, rax
.text:0000000000002FCD                 cmp     rcx, r13
.text:0000000000002FD0                 jbe     loc_29BF
.text:0000000000002FD6                 test    r12, r12
.text:0000000000002FD9                 jnz     loc_3DDB
.text:0000000000002FDF
.text:0000000000002FDF loc_2FDF:                               ; CODE XREF: __strftime_internal+53E↑j
.text:0000000000002FDF                                         ; __strftime_internal+58C↑j ...
.text:0000000000002FDF                 add     r15, r13
.text:0000000000002FE2                 mov     rbp, rbx
.text:0000000000002FE5                 jmp     loc_2A10
.text:0000000000002FEA ; ---------------------------------------------------------------------------
.text:0000000000002FEA
.text:0000000000002FEA loc_2FEA:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000002FEA                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000002FEA                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 83
.text:0000000000002FEE                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000002FF4                 mov     rax, [rsp+4E8h+tp]
.text:0000000000002FF8                 mov     esi, 2
.text:0000000000002FFD                 mov     ecx, [rax]
.text:0000000000002FFF                 jmp     loc_2ED0
.text:0000000000003004 ; ---------------------------------------------------------------------------
.text:0000000000003004
.text:0000000000003004 loc_3004:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003004                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003004                 mov     rax, [rsp+4E8h+tp] ; jumptable 0000000000002AC3 case 115
.text:0000000000003008                 mov     rdi, [rsp+4E8h+var_4D8]
.text:000000000000300D                 lea     rsi, [rsp+4E8h+var_488]
.text:0000000000003012                 mov     dword ptr [rsp+4E8h+size], r10d
.text:0000000000003017                 lea     r14, [rsp+4E8h+var_431]
.text:000000000000301F                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000003023                 movaps  [rsp+4E8h+var_488], xmm0
.text:0000000000003028                 movdqu  xmm0, xmmword ptr [rax+10h]
.text:000000000000302D                 movaps  [rsp+4E8h+var_478], xmm0
.text:0000000000003032                 movdqu  xmm0, xmmword ptr [rax+20h]
.text:0000000000003037                 mov     rax, [rax+30h]
.text:000000000000303B                 movaps  [rsp+4E8h+var_468], xmm0
.text:0000000000003043                 mov     [rsp+4E8h+var_458], rax
.text:000000000000304B                 call    mktime_z
.text:0000000000003050                 mov     r10d, dword ptr [rsp+4E8h+size]
.text:0000000000003055                 mov     rsi, rax
.text:0000000000003058                 mov     rcx, rax
.text:000000000000305B                 lea     rax, [rsp+4E8h+s]
.text:0000000000003063                 mov     r8, 6666666666666667h
.text:000000000000306D                 mov     edi, 30h ; '0'
.text:0000000000003072                 mov     [rsp+4E8h+ptr], rax
.text:0000000000003077                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: __strftime_internal+7BE↓j
.text:0000000000003080                 mov     rax, rcx
.text:0000000000003083                 imul    r8
.text:0000000000003086                 mov     rax, rcx
.text:0000000000003089                 sar     rax, 3Fh
.text:000000000000308D                 sar     rdx, 2
.text:0000000000003091                 sub     rdx, rax
.text:0000000000003094                 mov     rax, rdx
.text:0000000000003097                 lea     rdx, [rdx+rdx*4]
.text:000000000000309B                 add     rdx, rdx
.text:000000000000309E                 sub     rcx, rdx
.text:00000000000030A1                 mov     rdx, rcx
.text:00000000000030A4                 mov     rcx, rax
.text:00000000000030A7                 mov     eax, edi
.text:00000000000030A9                 sub     eax, edx
.text:00000000000030AB                 add     edx, 30h ; '0'
.text:00000000000030AE                 test    rsi, rsi
.text:00000000000030B1                 cmovs   edx, eax
.text:00000000000030B4                 sub     r14, 1
.text:00000000000030B8                 test    rcx, rcx
.text:00000000000030BB                 mov     [r14], dl
.text:00000000000030BE                 jnz     short loc_3080
.text:00000000000030C0                 test    r10d, r10d
.text:00000000000030C3                 mov     eax, 1
.text:00000000000030C8                 cmovg   eax, r10d
.text:00000000000030CC                 test    rsi, rsi
.text:00000000000030CF                 mov     [rsp+4E8h+var_490], eax
.text:00000000000030D3                 js      loc_3C10
.text:00000000000030D9
.text:00000000000030D9 loc_30D9:                               ; CODE XREF: __strftime_internal+95B↓j
.text:00000000000030D9                 mov     rax, [rsp+4E8h+ptr]
.text:00000000000030DE                 mov     rdx, r15
.text:00000000000030E1                 not     rdx
.text:00000000000030E4                 add     rax, 17h
.text:00000000000030E8                 sub     rax, r14
.text:00000000000030EB                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:00000000000030F0                 mov     [rsp+4E8h+size], rax
.text:00000000000030F5                 jz      short loc_310A
.text:00000000000030F7                 mov     r13d, [rsp+4E8h+var_490]
.text:00000000000030FC                 sub     r13d, dword ptr [rsp+4E8h+size]
.text:0000000000003101                 test    r13d, r13d
.text:0000000000003104                 jg      loc_423E
.text:000000000000310A
.text:000000000000310A loc_310A:                               ; CODE XREF: __strftime_internal+7F5↑j
.text:000000000000310A                 test    r10d, r10d
.text:000000000000310D                 mov     ecx, 0
.text:0000000000003112                 mov     rbp, rbx
.text:0000000000003115                 cmovns  ecx, r10d
.text:0000000000003119                 movsxd  r13, ecx
.text:000000000000311C
.text:000000000000311C loc_311C:                               ; CODE XREF: __strftime_internal+A85↓j
.text:000000000000311C                                         ; __strftime_internal+13E0↓j ...
.text:000000000000311C                 mov     rax, [rsp+4E8h+size]
.text:0000000000003121                 cmp     rax, r13
.text:0000000000003124                 mov     rbx, rax
.text:0000000000003127                 cmovb   rbx, r13
.text:000000000000312B                 cmp     rbx, rdx
.text:000000000000312E                 jnb     loc_29BF
.text:0000000000003134                 test    r12, r12
.text:0000000000003137                 jz      short loc_31AE
.text:0000000000003139                 mov     edx, [rsp+4E8h+var_490]
.text:000000000000313D                 test    edx, edx
.text:000000000000313F                 jnz     short loc_3193
.text:0000000000003141                 cmp     rax, r13
.text:0000000000003144                 jnb     short loc_3193
.text:0000000000003146                 movsxd  r13, r10d
.text:0000000000003149                 sub     r13, rax
.text:000000000000314C                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000003150                 cmp     eax, 30h ; '0'
.text:0000000000003153                 jz      loc_3E70
.text:0000000000003159                 cmp     eax, 2Bh ; '+'
.text:000000000000315C                 jz      loc_3E70
.text:0000000000003162                 xor     edx, edx
.text:0000000000003164                 test    r13, r13
.text:0000000000003167                 jz      short loc_3193
.text:0000000000003169                 mov     [rsp+4E8h+var_4E0], rbx
.text:000000000000316E                 mov     rbx, rdx
.text:0000000000003171                 nop     dword ptr [rax+00000000h]
.text:0000000000003178
.text:0000000000003178 loc_3178:                               ; CODE XREF: __strftime_internal+88C↓j
.text:0000000000003178                 mov     rsi, r12        ; stream
.text:000000000000317B                 mov     edi, 20h ; ' '  ; c
.text:0000000000003180                 add     rbx, 1
.text:0000000000003184                 call    _fputc
.text:0000000000003189                 cmp     r13, rbx
.text:000000000000318C                 jnz     short loc_3178
.text:000000000000318E
.text:000000000000318E loc_318E:                               ; CODE XREF: __strftime_internal+159E↓j
.text:000000000000318E                 mov     rbx, [rsp+4E8h+var_4E0]
.text:0000000000003193
.text:0000000000003193 loc_3193:                               ; CODE XREF: __strftime_internal+83F↑j
.text:0000000000003193                                         ; __strftime_internal+844↑j ...
.text:0000000000003193                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000003198                 jz      loc_3D50
.text:000000000000319E                 mov     rdx, [rsp+4E8h+size]
.text:00000000000031A3                 mov     rsi, r14
.text:00000000000031A6                 mov     rdi, r12        ; stream
.text:00000000000031A9                 call    fwrite_uppcase
.text:00000000000031AE
.text:00000000000031AE loc_31AE:                               ; CODE XREF: __strftime_internal+837↑j
.text:00000000000031AE                                         ; __strftime_internal+1465↓j
.text:00000000000031AE                 add     r15, rbx
.text:00000000000031B1                 jmp     loc_2A10
.text:00000000000031B6 ; ---------------------------------------------------------------------------
.text:00000000000031B6
.text:00000000000031B6 loc_31B6:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000031B6                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000031B6                 mov     rax, [rsp+4E8h+tp] ; jumptable 0000000000002AC3 case 113
.text:00000000000031BA                 cmp     r11d, 4Fh ; 'O'
.text:00000000000031BE                 mov     esi, 1
.text:00000000000031C3                 mov     eax, [rax+10h]
.text:00000000000031C6                 jz      loc_2EFA
.text:00000000000031CC                 lea     edx, [rax+rax*4]
.text:00000000000031CF                 xor     r9d, r9d
.text:00000000000031D2                 xor     r13d, r13d
.text:00000000000031D5                 xor     r8d, r8d
.text:00000000000031D8                 lea     ecx, [rax+rdx*2]
.text:00000000000031DB                 sar     ecx, 5
.text:00000000000031DE                 add     ecx, 1
.text:00000000000031E1                 nop     dword ptr [rax+00000000h]
.text:00000000000031E8
.text:00000000000031E8 loc_31E8:                               ; CODE XREF: __strftime_internal+130A↓j
.text:00000000000031E8                 lea     rax, [rsp+4E8h+s]
.text:00000000000031F0                 lea     rdi, [rsp+4E8h+var_431]
.text:00000000000031F8                 mov     r11d, 0CCCCCCCDh
.text:00000000000031FE                 mov     [rsp+4E8h+ptr], rax
.text:0000000000003203                 nop     dword ptr [rax+rax+00h]
.text:0000000000003208
.text:0000000000003208 loc_3208:                               ; CODE XREF: __strftime_internal+942↓j
.text:0000000000003208                 test    r8b, 1
.text:000000000000320C                 lea     r14, [rdi-1]
.text:0000000000003210                 jz      short loc_3220
.text:0000000000003212                 lea     rax, [rdi-2]
.text:0000000000003216                 mov     byte ptr [rdi-1], 3Ah ; ':'
.text:000000000000321A                 mov     rdi, r14
.text:000000000000321D                 mov     r14, rax
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: __strftime_internal+910↑j
.text:0000000000003220                 mov     eax, ecx
.text:0000000000003222                 sar     r8d, 1
.text:0000000000003225                 mul     r11d
.text:0000000000003228                 shr     edx, 3
.text:000000000000322B                 lea     eax, [rdx+rdx*4]
.text:000000000000322E                 add     eax, eax
.text:0000000000003230                 sub     ecx, eax
.text:0000000000003232                 mov     eax, r8d
.text:0000000000003235                 add     ecx, 30h ; '0'
.text:0000000000003238                 or      eax, edx
.text:000000000000323A                 mov     [rdi-1], cl
.text:000000000000323D                 mov     ecx, edx
.text:000000000000323F                 mov     rdi, r14
.text:0000000000003242                 jnz     short loc_3208
.text:0000000000003244                 cmp     r10d, esi
.text:0000000000003247                 cmovge  esi, r10d
.text:000000000000324B                 test    r13b, r13b
.text:000000000000324E                 mov     [rsp+4E8h+var_490], esi
.text:0000000000003252                 jnz     loc_3C10
.text:0000000000003258                 test    r9b, r9b
.text:000000000000325B                 jz      loc_30D9
.text:0000000000003261                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:0000000000003266                 mov     ebp, 2Bh ; '+'
.text:000000000000326B                 jz      loc_401D
.text:0000000000003271
.text:0000000000003271 loc_3271:                               ; CODE XREF: __strftime_internal+131A↓j
.text:0000000000003271                 mov     rax, [rsp+4E8h+ptr]
.text:0000000000003276                 mov     rdx, r15
.text:0000000000003279                 not     rdx
.text:000000000000327C                 add     rax, 17h
.text:0000000000003280                 sub     rax, r14
.text:0000000000003283                 mov     rdi, rax
.text:0000000000003286                 mov     [rsp+4E8h+size], rax
.text:000000000000328B                 mov     eax, [rsp+4E8h+var_490]
.text:000000000000328F                 sub     eax, 1
.text:0000000000003292                 sub     eax, edi
.text:0000000000003294                 test    eax, eax
.text:0000000000003296                 mov     r13d, eax
.text:0000000000003299                 jle     loc_3F60
.text:000000000000329F                 cmp     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:00000000000032A4                 jz      loc_3EBC
.text:00000000000032AA                 movsxd  rax, [rsp+4E8h+var_490]
.text:00000000000032AF                 cmp     rax, rdx
.text:00000000000032B2                 mov     rdi, rax
.text:00000000000032B5                 jnb     loc_29BF
.text:00000000000032BB                 test    r10d, r10d
.text:00000000000032BE                 mov     eax, 0
.text:00000000000032C3                 mov     ecx, 1
.text:00000000000032C8                 cmovns  eax, r10d
.text:00000000000032CC                 cdqe
.text:00000000000032CE                 test    rax, rax
.text:00000000000032D1                 cmovnz  rcx, rax
.text:00000000000032D5                 cmp     rcx, rdx
.text:00000000000032D8                 mov     [rsp+4E8h+var_4A0], rcx
.text:00000000000032DD                 jnb     loc_29BF
.text:00000000000032E3                 test    r12, r12
.text:00000000000032E6                 jz      short loc_334C
.text:00000000000032E8                 test    edi, edi
.text:00000000000032EA                 jnz     short loc_3340
.text:00000000000032EC                 cmp     rax, 1
.text:00000000000032F0                 jbe     short loc_3340
.text:00000000000032F2                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000032F6                 movsxd  r10, r10d
.text:00000000000032F9                 lea     rax, [r10-1]
.text:00000000000032FD                 cmp     edi, 30h ; '0'
.text:0000000000003300                 mov     [rsp+4E8h+ptr], rax
.text:0000000000003305                 jz      loc_4410
.text:000000000000330B                 cmp     edi, 2Bh ; '+'
.text:000000000000330E                 jz      loc_4410
.text:0000000000003314                 xor     edx, edx
.text:0000000000003316                 test    rax, rax
.text:0000000000003319                 jz      short loc_3340
.text:000000000000331B                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000003320                 mov     rbx, rdx
.text:0000000000003323
.text:0000000000003323 loc_3323:                               ; CODE XREF: __strftime_internal+A39↓j
.text:0000000000003323                 mov     rsi, r12        ; stream
.text:0000000000003326                 mov     edi, 20h ; ' '  ; c
.text:000000000000332B                 add     rbx, 1
.text:000000000000332F                 call    _fputc
.text:0000000000003334                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000003339                 jnz     short loc_3323
.text:000000000000333B
.text:000000000000333B loc_333B:                               ; CODE XREF: __strftime_internal+1B3E↓j
.text:000000000000333B                 mov     rbx, [rsp+4E8h+var_498]
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: __strftime_internal+9EA↑j
.text:0000000000003340                                         ; __strftime_internal+9F0↑j ...
.text:0000000000003340                 movsx   edi, bpl        ; c
.text:0000000000003344                 mov     rsi, r12        ; stream
.text:0000000000003347                 call    _fputc
.text:000000000000334C
.text:000000000000334C loc_334C:                               ; CODE XREF: __strftime_internal+9E6↑j
.text:000000000000334C                 add     r15, [rsp+4E8h+var_4A0]
.text:0000000000003351
.text:0000000000003351 loc_3351:                               ; CODE XREF: __strftime_internal+1951↓j
.text:0000000000003351                 mov     rbp, rbx
.text:0000000000003354                 movsxd  rbx, r13d
.text:0000000000003357                 xor     r13d, r13d
.text:000000000000335A                 test    r12, r12
.text:000000000000335D                 jz      short loc_3376
.text:000000000000335F                 nop
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: __strftime_internal+A74↓j
.text:0000000000003360                 mov     rsi, r12        ; stream
.text:0000000000003363                 mov     edi, 30h ; '0'  ; c
.text:0000000000003368                 add     r13, 1
.text:000000000000336C                 call    _fputc
.text:0000000000003371                 cmp     r13, rbx
.text:0000000000003374                 jnz     short loc_3360
.text:0000000000003376
.text:0000000000003376 loc_3376:                               ; CODE XREF: __strftime_internal+A5D↑j
.text:0000000000003376                 add     r15, rbx
.text:0000000000003379                 xor     r13d, r13d
.text:000000000000337C                 xor     r10d, r10d
.text:000000000000337F                 mov     rdx, r15
.text:0000000000003382                 not     rdx
.text:0000000000003385                 jmp     loc_311C
.text:000000000000338A ; ---------------------------------------------------------------------------
.text:000000000000338A
.text:000000000000338A loc_338A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000338A                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:000000000000338A                 lea     rax, aHMS_0     ; jumptable 0000000000002AC3 case 84
.text:0000000000003391                 mov     r14d, 0FFFFFFFFh
.text:0000000000003397                 mov     [rsp+4E8h+ptr], rax
.text:000000000000339C                 jmp     loc_2F6F
.text:00000000000033A1 ; ---------------------------------------------------------------------------
.text:00000000000033A1
.text:00000000000033A1 loc_33A1:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000033A1                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000033A1                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 85
.text:00000000000033A5                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000033AB                 mov     rax, [rsp+4E8h+tp]
.text:00000000000033AF                 mov     edx, 92492493h
.text:00000000000033B4                 mov     esi, [rax+1Ch]
.text:00000000000033B7                 sub     esi, [rax+18h]
.text:00000000000033BA                 add     esi, 7
.text:00000000000033BD                 mov     eax, esi
.text:00000000000033BF                 imul    edx
.text:00000000000033C1
.text:00000000000033C1 loc_33C1:                               ; CODE XREF: __strftime_internal+FF0↓j
.text:00000000000033C1                 lea     ecx, [rdx+rsi]
.text:00000000000033C4                 sar     esi, 1Fh
.text:00000000000033C7                 sar     ecx, 2
.text:00000000000033CA                 sub     ecx, esi
.text:00000000000033CC                 mov     esi, 2
.text:00000000000033D1                 jmp     loc_2ED0
.text:00000000000033D6 ; ---------------------------------------------------------------------------
.text:00000000000033D6
.text:00000000000033D6 loc_33D6:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000033D6                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000033D6                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 cases 71,86,103
.text:00000000000033DA                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000033E0                 mov     rcx, [rsp+4E8h+tp]
.text:00000000000033E4                 mov     edx, 92492493h
.text:00000000000033E9                 mov     esi, [rcx+14h]
.text:00000000000033EC                 mov     r8d, [rcx+1Ch]
.text:00000000000033F0                 mov     r14d, [rcx+18h]
.text:00000000000033F4                 mov     eax, esi
.text:00000000000033F6                 mov     ecx, r8d
.text:00000000000033F9                 sar     eax, 1Fh
.text:00000000000033FC                 sub     ecx, r14d
.text:00000000000033FF                 add     ecx, 17Eh
.text:0000000000003405                 and     eax, 190h
.text:000000000000340A                 lea     r9d, [rsi+rax-64h]
.text:000000000000340F                 mov     eax, ecx
.text:0000000000003411                 imul    edx
.text:0000000000003413                 lea     eax, [rdx+rcx]
.text:0000000000003416                 mov     edx, ecx
.text:0000000000003418                 sar     edx, 1Fh
.text:000000000000341B                 sar     eax, 2
.text:000000000000341E                 sub     eax, edx
.text:0000000000003420                 lea     edx, ds:0[rax*8]
.text:0000000000003427                 sub     edx, eax
.text:0000000000003429                 mov     eax, r8d
.text:000000000000342C                 sub     eax, ecx
.text:000000000000342E                 lea     ebp, [rax+rdx+3]
.text:0000000000003432                 test    ebp, ebp
.text:0000000000003434                 js      loc_4260
.text:000000000000343A                 test    r9b, 3
.text:000000000000343E                 mov     eax, 16Dh
.text:0000000000003443                 jnz     short loc_348A
.text:0000000000003445                 mov     eax, r9d
.text:0000000000003448                 mov     edx, 51EB851Fh
.text:000000000000344D                 mov     ecx, r9d
.text:0000000000003450                 imul    edx
.text:0000000000003452                 sar     ecx, 1Fh
.text:0000000000003455                 mov     eax, 16Eh
.text:000000000000345A                 mov     dword ptr [rsp+4E8h+ptr], edx
.text:000000000000345E                 sar     edx, 5
.text:0000000000003461                 sub     edx, ecx
.text:0000000000003463                 imul    edx, 64h ; 'd'
.text:0000000000003466                 cmp     r9d, edx
.text:0000000000003469                 jnz     short loc_348A
.text:000000000000346B                 mov     edx, dword ptr [rsp+4E8h+ptr]
.text:000000000000346F                 sar     edx, 7
.text:0000000000003472                 mov     eax, edx
.text:0000000000003474                 sub     eax, ecx
.text:0000000000003476                 imul    eax, 190h
.text:000000000000347C                 cmp     r9d, eax
.text:000000000000347F                 setz    al
.text:0000000000003482                 movzx   eax, al
.text:0000000000003485                 add     eax, 16Dh
.text:000000000000348A
.text:000000000000348A loc_348A:                               ; CODE XREF: __strftime_internal+B43↑j
.text:000000000000348A                                         ; __strftime_internal+B69↑j
.text:000000000000348A                 sub     r8d, eax
.text:000000000000348D                 mov     edx, 92492493h
.text:0000000000003492                 mov     ecx, r8d
.text:0000000000003495                 sub     ecx, r14d
.text:0000000000003498                 add     ecx, 17Eh
.text:000000000000349E                 mov     eax, ecx
.text:00000000000034A0                 sub     r8d, ecx
.text:00000000000034A3                 imul    edx
.text:00000000000034A5                 lea     eax, [rdx+rcx]
.text:00000000000034A8                 mov     edx, ecx
.text:00000000000034AA                 sar     edx, 1Fh
.text:00000000000034AD                 sar     eax, 2
.text:00000000000034B0                 sub     eax, edx
.text:00000000000034B2                 lea     edx, ds:0[rax*8]
.text:00000000000034B9                 sub     edx, eax
.text:00000000000034BB                 lea     ecx, [r8+rdx+3]
.text:00000000000034C0                 mov     r8d, 1
.text:00000000000034C6                 test    ecx, ecx
.text:00000000000034C8                 jns     short loc_34CF
.text:00000000000034CA                 mov     ecx, ebp
.text:00000000000034CC                 xor     r8d, r8d
.text:00000000000034CF
.text:00000000000034CF loc_34CF:                               ; CODE XREF: __strftime_internal+BC8↑j
.text:00000000000034CF                                         ; __strftime_internal+19E5↓j
.text:00000000000034CF                 cmp     r13b, 47h ; 'G'
.text:00000000000034D3                 jz      loc_4167
.text:00000000000034D9                 cmp     r13b, 67h ; 'g'
.text:00000000000034DD                 jnz     loc_42EA
.text:00000000000034E3                 mov     ecx, 51EB851Fh
.text:00000000000034E8                 mov     eax, esi
.text:00000000000034EA                 mov     r9d, esi
.text:00000000000034ED                 imul    ecx
.text:00000000000034EF                 mov     eax, edx
.text:00000000000034F1                 mov     edx, esi
.text:00000000000034F3                 sar     edx, 1Fh
.text:00000000000034F6                 sar     eax, 5
.text:00000000000034F9                 sub     eax, edx
.text:00000000000034FB                 imul    eax, 64h ; 'd'
.text:00000000000034FE                 sub     r9d, eax
.text:0000000000003501                 add     r9d, r8d
.text:0000000000003504                 mov     eax, r9d
.text:0000000000003507                 imul    ecx
.text:0000000000003509                 mov     eax, r9d
.text:000000000000350C                 sar     eax, 1Fh
.text:000000000000350F                 mov     ecx, edx
.text:0000000000003511                 sar     ecx, 5
.text:0000000000003514                 sub     ecx, eax
.text:0000000000003516                 imul    ecx, 64h ; 'd'
.text:0000000000003519                 sub     r9d, ecx
.text:000000000000351C                 mov     ecx, r9d
.text:000000000000351F                 js      loc_4124
.text:0000000000003525
.text:0000000000003525 loc_3525:                               ; CODE XREF: __strftime_internal+1159↓j
.text:0000000000003525                                         ; __strftime_internal+116D↓j
.text:0000000000003525                 mov     esi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000003529                 test    esi, esi
.text:000000000000352B                 jz      loc_4141
.text:0000000000003531
.text:0000000000003531 loc_3531:                               ; CODE XREF: __strftime_internal+183B↓j
.text:0000000000003531                                         ; __strftime_internal+1C0B↓j
.text:0000000000003531                 mov     eax, 1
.text:0000000000003536                 xor     r13d, r13d
.text:0000000000003539
.text:0000000000003539 loc_3539:                               ; CODE XREF: __strftime_internal+D50↓j
.text:0000000000003539                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:000000000000353E                 jz      loc_44DD
.text:0000000000003544
.text:0000000000003544 loc_3544:                               ; CODE XREF: __strftime_internal+D69↓j
.text:0000000000003544                 xor     r9d, r9d
.text:0000000000003547                 mov     esi, 2
.text:000000000000354C
.text:000000000000354C loc_354C:                               ; CODE XREF: __strftime_internal+104E↓j
.text:000000000000354C                                         ; __strftime_internal+1741↓j ...
.text:000000000000354C                 xor     r8d, r8d
.text:000000000000354F                 jmp     loc_2EE5
.text:0000000000003554 ; ---------------------------------------------------------------------------
.text:0000000000003554
.text:0000000000003554 loc_3554:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003554                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003554                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 72
.text:0000000000003558                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000355E                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003562                 mov     esi, 2
.text:0000000000003567                 mov     ecx, [rax+8]
.text:000000000000356A                 jmp     loc_2ED0
.text:000000000000356F ; ---------------------------------------------------------------------------
.text:000000000000356F
.text:000000000000356F loc_356F:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000356F                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:000000000000356F                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 77
.text:0000000000003573                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003579                 mov     rax, [rsp+4E8h+tp]
.text:000000000000357D                 mov     esi, 2
.text:0000000000003582                 mov     ecx, [rax+4]
.text:0000000000003585                 jmp     loc_2ED0
.text:000000000000358A ; ---------------------------------------------------------------------------
.text:000000000000358A
.text:000000000000358A loc_358A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000358A                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:000000000000358A                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 78
.text:000000000000358E                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003594                 cmp     r10d, 0FFFFFFFFh
.text:0000000000003598                 jz      loc_41B0
.text:000000000000359E                 cmp     r10d, 8
.text:00000000000035A2                 jg      loc_44EC
.text:00000000000035A8                 mov     ecx, [rsp+4E8h+arg_10]
.text:00000000000035AF                 mov     esi, r10d
.text:00000000000035B2                 mov     r8d, 66666667h
.text:00000000000035B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: __strftime_internal+CD5↓j
.text:00000000000035C0                 mov     eax, ecx
.text:00000000000035C2                 add     esi, 1
.text:00000000000035C5                 sar     ecx, 1Fh
.text:00000000000035C8                 imul    r8d
.text:00000000000035CB                 sar     edx, 2
.text:00000000000035CE                 sub     edx, ecx
.text:00000000000035D0                 cmp     esi, 9
.text:00000000000035D3                 mov     ecx, edx
.text:00000000000035D5                 jnz     short loc_35C0
.text:00000000000035D7
.text:00000000000035D7 loc_35D7:                               ; CODE XREF: __strftime_internal+1BF3↓j
.text:00000000000035D7                 mov     esi, r10d
.text:00000000000035DA                 jmp     loc_2ED0
.text:00000000000035DF ; ---------------------------------------------------------------------------
.text:00000000000035DF
.text:00000000000035DF loc_35DF:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000035DF                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000035DF                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 73
.text:00000000000035E3                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000035E9                 mov     ecx, [rsp+4E8h+var_4B8]
.text:00000000000035ED                 mov     esi, 2
.text:00000000000035F2                 jmp     loc_2ED0
.text:00000000000035F7 ; ---------------------------------------------------------------------------
.text:00000000000035F7
.text:00000000000035F7 loc_35F7:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000035F7                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000035F7                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 67
.text:00000000000035FB                 jz      loc_3EA3
.text:0000000000003601                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003605                 mov     edx, 51EB851Fh
.text:000000000000360A                 mov     r9d, dword ptr [rsp+4E8h+var_4E0]
.text:000000000000360F                 mov     esi, [rax+14h]
.text:0000000000003612                 mov     eax, esi
.text:0000000000003614                 imul    edx
.text:0000000000003616                 mov     eax, edx
.text:0000000000003618                 mov     edx, esi
.text:000000000000361A                 sar     edx, 1Fh
.text:000000000000361D                 sar     eax, 5
.text:0000000000003620                 sub     eax, edx
.text:0000000000003622                 mov     edx, esi
.text:0000000000003624                 lea     ecx, [rax+13h]
.text:0000000000003627                 imul    eax, 64h ; 'd'
.text:000000000000362A                 sub     edx, eax
.text:000000000000362C                 mov     eax, edx
.text:000000000000362E                 shr     eax, 1Fh
.text:0000000000003631                 test    ecx, ecx
.text:0000000000003633                 setnle  dl
.text:0000000000003636                 and     eax, edx
.text:0000000000003638                 cmp     esi, 0FFFFF894h
.text:000000000000363E                 setl    r13b
.text:0000000000003642                 sub     ecx, eax
.text:0000000000003644                 cmp     esi, 0FFFFF894h
.text:000000000000364A                 setnl   al
.text:000000000000364D                 test    r9d, r9d
.text:0000000000003650                 jnz     loc_3539
.text:0000000000003656                 cmp     [rsp+4E8h+var_4C4], 2Bh ; '+'
.text:000000000000365B                 jz      loc_44DD
.text:0000000000003661                 mov     esi, [rsp+4E8h+var_4C4]
.text:0000000000003665                 mov     dword ptr [rsp+4E8h+var_4E0], esi
.text:0000000000003669                 jmp     loc_3544
.text:000000000000366E ; ---------------------------------------------------------------------------
.text:000000000000366E
.text:000000000000366E loc_366E:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000366E                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:000000000000366E                 test    r11d, r11d      ; jumptable 0000000000002AC3 case 68
.text:0000000000003671                 jnz     def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003677                 lea     rax, aMDY       ; "%m/%d/%y"
.text:000000000000367E                 mov     r14d, 0FFFFFFFFh
.text:0000000000003684                 mov     [rsp+4E8h+ptr], rax
.text:0000000000003689                 jmp     loc_2F6F
.text:000000000000368E ; ---------------------------------------------------------------------------
.text:000000000000368E
.text:000000000000368E loc_368E:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000368E                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:000000000000368E                 test    r11d, r11d      ; jumptable 0000000000002AC3 case 70
.text:0000000000003691                 jnz     def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003697                 mov     r11d, dword ptr [rsp+4E8h+var_4E0]
.text:000000000000369C                 test    r11d, r11d
.text:000000000000369F                 jnz     loc_43EF
.text:00000000000036A5                 test    r10d, r10d
.text:00000000000036A8                 jns     loc_43EF
.text:00000000000036AE                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:00000000000036B5                 mov     r14d, 4
.text:00000000000036BB                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:00000000000036C3                 mov     [rsp+4E8h+ptr], rax
.text:00000000000036C8                 jmp     loc_2F6F
.text:00000000000036CD ; ---------------------------------------------------------------------------
.text:00000000000036CD
.text:00000000000036CD loc_36CD:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000036CD                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000036CD                 movzx   ecx, byte ptr [rbx-1] ; jumptable 0000000000002AC3 case 0
.text:00000000000036D1                 lea     rax, [rbx-1]
.text:00000000000036D5                 mov     [rsp+4E8h+ptr], rax
.text:00000000000036DA
.text:00000000000036DA loc_36DA:                               ; CODE XREF: __strftime_internal+1ACC↓j
.text:00000000000036DA                 test    r10d, r10d
.text:00000000000036DD                 mov     eax, 0
.text:00000000000036E2                 mov     rdx, r15
.text:00000000000036E5                 cmovns  eax, r10d
.text:00000000000036E9                 cmp     cl, 25h ; '%'
.text:00000000000036EC                 not     rdx
.text:00000000000036EF                 cdqe
.text:00000000000036F1                 jnz     loc_2B0B
.text:00000000000036F7                 test    rax, rax
.text:00000000000036FA                 mov     r14d, 1
.text:0000000000003700                 mov     rbp, [rsp+4E8h+ptr]
.text:0000000000003705                 cmovnz  r14, rax
.text:0000000000003709                 mov     r13d, 1
.text:000000000000370F                 jmp     loc_2B54
.text:0000000000003714 ; ---------------------------------------------------------------------------
.text:0000000000003714
.text:0000000000003714 loc_3714:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003714                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003714                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 66
.text:0000000000003718                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000371E                 test    r14b, r14b
.text:0000000000003721                 jz      loc_2CAD
.text:0000000000003727                 mov     byte ptr [rsp+4E8h+var_4B4], r14b
.text:000000000000372C                 jmp     loc_2CAA        ; jumptable 0000000000002AC3 case 114
.text:0000000000003731 ; ---------------------------------------------------------------------------
.text:0000000000003731
.text:0000000000003731 loc_3731:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003731                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003731                 test    r10d, r10d      ; jumptable 0000000000002AC3 case 37
.text:0000000000003734                 mov     eax, 0
.text:0000000000003739                 mov     r14d, 1
.text:000000000000373F                 cmovns  eax, r10d
.text:0000000000003743                 mov     rdx, r15
.text:0000000000003746                 cdqe
.text:0000000000003748                 not     rdx
.text:000000000000374B                 test    rax, rax
.text:000000000000374E                 cmovnz  r14, rax
.text:0000000000003752                 test    r11d, r11d
.text:0000000000003755                 jnz     loc_41C7
.text:000000000000375B                 cmp     rdx, r14
.text:000000000000375E                 jbe     loc_29BF
.text:0000000000003764                 test    r12, r12
.text:0000000000003767                 jz      loc_2A0A
.text:000000000000376D                 cmp     r10d, 1
.text:0000000000003771                 jle     loc_2A02
.text:0000000000003777                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:000000000000377B                 movsxd  r10, r10d
.text:000000000000377E                 lea     r13, [r10-1]
.text:0000000000003782                 cmp     eax, 30h ; '0'
.text:0000000000003785                 jz      loc_44AE
.text:000000000000378B                 xor     ebp, ebp
.text:000000000000378D                 cmp     eax, 2Bh ; '+'
.text:0000000000003790                 jz      loc_44AE
.text:0000000000003796
.text:0000000000003796 loc_3796:                               ; CODE XREF: __strftime_internal+EAA↓j
.text:0000000000003796                 mov     rsi, r12        ; stream
.text:0000000000003799                 mov     edi, 20h ; ' '  ; c
.text:000000000000379E                 add     rbp, 1
.text:00000000000037A2                 call    _fputc
.text:00000000000037A7                 cmp     r13, rbp
.text:00000000000037AA                 jnz     short loc_3796
.text:00000000000037AC                 jmp     loc_29FF
.text:00000000000037B1 ; ---------------------------------------------------------------------------
.text:00000000000037B1
.text:00000000000037B1 loc_37B1:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000037B1                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000037B1                 movzx   eax, byte ptr [rbx+1] ; jumptable 0000000000002AC3 case 58
.text:00000000000037B5                 lea     rdx, [rbx+1]
.text:00000000000037B9                 cmp     al, 3Ah ; ':'
.text:00000000000037BB                 jz      loc_43A1
.text:00000000000037C1                 mov     r14d, 1
.text:00000000000037C7
.text:00000000000037C7 loc_37C7:                               ; CODE XREF: __strftime_internal+1ABC↓j
.text:00000000000037C7                 cmp     al, 7Ah ; 'z'
.text:00000000000037C9                 jnz     def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000037CF                 mov     rbx, rdx
.text:00000000000037D2
.text:00000000000037D2 loc_37D2:                               ; CODE XREF: __strftime_internal+12F3↓j
.text:00000000000037D2                 mov     rax, [rsp+4E8h+tp]
.text:00000000000037D6                 mov     ecx, [rax+20h]
.text:00000000000037D9                 test    ecx, ecx
.text:00000000000037DB                 js      loc_405B
.text:00000000000037E1                 mov     rcx, [rax+28h]
.text:00000000000037E5                 mov     r13d, 1
.text:00000000000037EB                 test    ecx, ecx
.text:00000000000037ED                 js      short loc_3803
.text:00000000000037EF                 mov     r13d, 0
.text:00000000000037F5                 jnz     short loc_3803
.text:00000000000037F7                 mov     rax, [rsp+4E8h+var_4C0]
.text:00000000000037FC                 cmp     byte ptr [rax], 2Dh ; '-'
.text:00000000000037FF                 setz    r13b
.text:0000000000003803
.text:0000000000003803 loc_3803:                               ; CODE XREF: __strftime_internal+EED↑j
.text:0000000000003803                                         ; __strftime_internal+EF5↑j
.text:0000000000003803                 mov     eax, ecx
.text:0000000000003805                 mov     edx, 91A2B3C5h
.text:000000000000380A                 mov     r9d, ecx
.text:000000000000380D                 imul    edx
.text:000000000000380F                 sar     r9d, 1Fh
.text:0000000000003813                 mov     r8d, 88888889h
.text:0000000000003819                 mov     eax, ecx
.text:000000000000381B                 add     edx, ecx
.text:000000000000381D                 sar     edx, 0Bh
.text:0000000000003820                 sub     edx, r9d
.text:0000000000003823                 mov     ebp, edx
.text:0000000000003825                 imul    r8d
.text:0000000000003828                 lea     esi, [rdx+rcx]
.text:000000000000382B                 sar     esi, 5
.text:000000000000382E                 sub     esi, r9d
.text:0000000000003831                 mov     eax, esi
.text:0000000000003833                 imul    r8d
.text:0000000000003836                 mov     eax, esi
.text:0000000000003838                 sar     eax, 1Fh
.text:000000000000383B                 lea     r8d, [rdx+rsi]
.text:000000000000383F                 sar     r8d, 5
.text:0000000000003843                 sub     r8d, eax
.text:0000000000003846                 mov     eax, esi
.text:0000000000003848                 imul    r8d, 3Ch ; '<'
.text:000000000000384C                 imul    esi, 3Ch ; '<'
.text:000000000000384F                 sub     eax, r8d
.text:0000000000003852                 sub     ecx, esi
.text:0000000000003854                 cmp     r14, 1
.text:0000000000003858                 mov     r8d, eax
.text:000000000000385B                 jz      loc_430D
.text:0000000000003861                 jb      loc_43D1
.text:0000000000003867                 cmp     r14, 2
.text:000000000000386B                 jz      loc_4213
.text:0000000000003871                 cmp     r14, 3
.text:0000000000003875                 jnz     loc_43C4
.text:000000000000387B                 test    ecx, ecx
.text:000000000000387D                 jnz     loc_4213
.text:0000000000003883                 test    eax, eax
.text:0000000000003885                 jnz     loc_430D
.text:000000000000388B                 mov     eax, r13d
.text:000000000000388E                 mov     ecx, ebp
.text:0000000000003890                 mov     r9d, 1
.text:0000000000003896                 xor     eax, 1
.text:0000000000003899                 mov     esi, 3
.text:000000000000389E                 jmp     loc_2EE5
.text:000000000000389E ; ---------------------------------------------------------------------------
.text:00000000000038A3                 align 8
.text:00000000000038A8
.text:00000000000038A8 loc_38A8:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000038A8                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000038A8                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 87
.text:00000000000038AC                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000038B2                 mov     r9, [rsp+4E8h+tp]
.text:00000000000038B6                 mov     ecx, 92492493h
.text:00000000000038BB                 mov     eax, [r9+18h]
.text:00000000000038BF                 lea     esi, [rax+6]
.text:00000000000038C2                 mov     dword ptr [rsp+4E8h+ptr], eax
.text:00000000000038C6                 mov     eax, esi
.text:00000000000038C8                 imul    ecx
.text:00000000000038CA                 lea     eax, [rdx+rsi]
.text:00000000000038CD                 mov     edx, esi
.text:00000000000038CF                 sar     edx, 1Fh
.text:00000000000038D2                 sar     eax, 2
.text:00000000000038D5                 sub     eax, edx
.text:00000000000038D7                 lea     edx, ds:0[rax*8]
.text:00000000000038DE                 sub     edx, eax
.text:00000000000038E0                 mov     eax, edx
.text:00000000000038E2                 mov     edx, [r9+1Ch]
.text:00000000000038E6                 sub     eax, esi
.text:00000000000038E8                 lea     esi, [rax+rdx+7]
.text:00000000000038EC                 mov     eax, esi
.text:00000000000038EE                 imul    ecx
.text:00000000000038F0                 jmp     loc_33C1
.text:00000000000038F5 ; ---------------------------------------------------------------------------
.text:00000000000038F5
.text:00000000000038F5 loc_38F5:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000038F5                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:00000000000038F5                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 89
.text:00000000000038F9                 jz      loc_3EA3
.text:00000000000038FF                 cmp     r11d, 4Fh ; 'O'
.text:0000000000003903                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003909                 mov     rax, [rsp+4E8h+tp]
.text:000000000000390D                 mov     r8d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000003912                 mov     eax, [rax+14h]
.text:0000000000003915                 cmp     eax, 0FFFFF894h
.text:000000000000391A                 lea     ecx, [rax+76Ch]
.text:0000000000003920                 setl    r13b
.text:0000000000003924                 cmp     eax, 0FFFFF894h
.text:0000000000003929                 setnl   al
.text:000000000000392C                 test    r8d, r8d
.text:000000000000392F                 jnz     loc_418E
.text:0000000000003935
.text:0000000000003935 loc_3935:                               ; CODE XREF: __strftime_internal+1888↓j
.text:0000000000003935                 mov     esi, [rsp+4E8h+var_4C4]
.text:0000000000003939                 cmp     esi, 2Bh ; '+'
.text:000000000000393C                 jz      loc_4027
.text:0000000000003942                 mov     dword ptr [rsp+4E8h+var_4E0], esi
.text:0000000000003946                 xor     r9d, r9d
.text:0000000000003949                 mov     esi, 4
.text:000000000000394E                 jmp     loc_354C
.text:0000000000003953 ; ---------------------------------------------------------------------------
.text:0000000000003953
.text:0000000000003953 loc_3953:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003953                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003953                 movzx   edi, byte ptr [rsp+4E8h+var_4B4] ; jumptable 0000000000002AC3 case 90
.text:0000000000003958                 test    r14b, r14b
.text:000000000000395B                 mov     eax, 0
.text:0000000000003960                 mov     dword ptr [rsp+4E8h+ptr], r10d
.text:0000000000003965                 cmovnz  edi, eax
.text:0000000000003968                 mov     byte ptr [rsp+4E8h+var_4B4], dil
.text:000000000000396D                 mov     rdi, [rsp+4E8h+var_4C0] ; s
.text:0000000000003972                 call    _strlen
.text:0000000000003977                 movsxd  r10, dword ptr [rsp+4E8h+ptr]
.text:000000000000397C                 mov     r13, rax
.text:000000000000397F                 mov     eax, 0
.text:0000000000003984                 mov     rdx, r15
.text:0000000000003987                 not     rdx
.text:000000000000398A                 test    r10d, r10d
.text:000000000000398D                 cmovns  rax, r10
.text:0000000000003991                 cmp     r13, rax
.text:0000000000003994                 mov     rbp, rax
.text:0000000000003997                 cmovnb  rbp, r13
.text:000000000000399B                 cmp     rdx, rbp
.text:000000000000399E                 jbe     loc_29BF
.text:00000000000039A4                 test    r12, r12
.text:00000000000039A7                 jz      short loc_3A1F
.text:00000000000039A9                 cmp     r13, rax
.text:00000000000039AC                 jnb     short loc_39FB
.text:00000000000039AE                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000039B2                 mov     rax, r10
.text:00000000000039B5                 sub     rax, r13
.text:00000000000039B8                 mov     [rsp+4E8h+ptr], rax
.text:00000000000039BD                 cmp     edi, 30h ; '0'
.text:00000000000039C0                 jz      loc_4443
.text:00000000000039C6                 cmp     edi, 2Bh ; '+'
.text:00000000000039C9                 jz      loc_4443
.text:00000000000039CF                 xor     edx, edx
.text:00000000000039D1                 test    rax, rax
.text:00000000000039D4                 jz      short loc_39FB
.text:00000000000039D6                 mov     [rsp+4E8h+var_4E0], rbx
.text:00000000000039DB                 mov     rbx, rdx
.text:00000000000039DE
.text:00000000000039DE loc_39DE:                               ; CODE XREF: __strftime_internal+10F4↓j
.text:00000000000039DE                 mov     rsi, r12        ; stream
.text:00000000000039E1                 mov     edi, 20h ; ' '  ; c
.text:00000000000039E6                 add     rbx, 1
.text:00000000000039EA                 call    _fputc
.text:00000000000039EF                 cmp     [rsp+4E8h+ptr], rbx
.text:00000000000039F4                 jnz     short loc_39DE
.text:00000000000039F6
.text:00000000000039F6 loc_39F6:                               ; CODE XREF: __strftime_internal+1B71↓j
.text:00000000000039F6                 mov     rbx, [rsp+4E8h+var_4E0]
.text:00000000000039FB
.text:00000000000039FB loc_39FB:                               ; CODE XREF: __strftime_internal+10AC↑j
.text:00000000000039FB                                         ; __strftime_internal+10D4↑j ...
.text:00000000000039FB                 test    r14b, r14b
.text:00000000000039FE                 jnz     loc_4383
.text:0000000000003A04                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000003A09                 jz      loc_4369
.text:0000000000003A0F                 mov     rsi, [rsp+4E8h+var_4C0]
.text:0000000000003A14                 mov     rdx, r13
.text:0000000000003A17                 mov     rdi, r12        ; stream
.text:0000000000003A1A                 call    fwrite_uppcase
.text:0000000000003A1F
.text:0000000000003A1F loc_3A1F:                               ; CODE XREF: __strftime_internal+10A7↑j
.text:0000000000003A1F                                         ; __strftime_internal+1A7E↓j ...
.text:0000000000003A1F                 add     r15, rbp
.text:0000000000003A22                 mov     rbp, rbx
.text:0000000000003A25                 jmp     loc_2A10
.text:0000000000003A2A ; ---------------------------------------------------------------------------
.text:0000000000003A2A
.text:0000000000003A2A loc_3A2A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003A2A                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003A2A                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 121
.text:0000000000003A2E                 jz      loc_3EA3
.text:0000000000003A34                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003A38                 mov     edx, 51EB851Fh
.text:0000000000003A3D                 mov     esi, [rax+14h]
.text:0000000000003A40                 mov     eax, esi
.text:0000000000003A42                 imul    edx
.text:0000000000003A44                 mov     eax, esi
.text:0000000000003A46                 sar     eax, 1Fh
.text:0000000000003A49                 mov     ecx, edx
.text:0000000000003A4B                 sar     ecx, 5
.text:0000000000003A4E                 sub     ecx, eax
.text:0000000000003A50                 mov     eax, esi
.text:0000000000003A52                 imul    ecx, 64h ; 'd'
.text:0000000000003A55                 sub     eax, ecx
.text:0000000000003A57                 mov     ecx, eax
.text:0000000000003A59                 jns     loc_3525
.text:0000000000003A5F                 neg     eax
.text:0000000000003A61                 add     ecx, 64h ; 'd'
.text:0000000000003A64                 cmp     esi, 0FFFFF893h
.text:0000000000003A6A                 cmovle  ecx, eax
.text:0000000000003A6D                 jmp     loc_3525
.text:0000000000003A72 ; ---------------------------------------------------------------------------
.text:0000000000003A72
.text:0000000000003A72 loc_3A72:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003A72                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003A72                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 100
.text:0000000000003A76                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003A7C                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003A80                 mov     esi, 2
.text:0000000000003A85                 mov     ecx, [rax+0Ch]
.text:0000000000003A88                 jmp     loc_2ED0
.text:0000000000003A8D ; ---------------------------------------------------------------------------
.text:0000000000003A8D
.text:0000000000003A8D loc_3A8D:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003A8D                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003A8D                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 101
.text:0000000000003A91                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003A97                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003A9B                 mov     ecx, [rax+0Ch]
.text:0000000000003A9E
.text:0000000000003A9E loc_3A9E:                               ; CODE XREF: __strftime_internal+1200↓j
.text:0000000000003A9E                                         ; __strftime_internal+1210↓j
.text:0000000000003A9E                 mov     r8d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000003AA3                 mov     esi, 2
.text:0000000000003AA8                 test    r8d, r8d
.text:0000000000003AAB                 jnz     loc_2ED0
.text:0000000000003AB1                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000003AB9                 jmp     loc_2ED0
.text:0000000000003ABE ; ---------------------------------------------------------------------------
.text:0000000000003ABE
.text:0000000000003ABE loc_3ABE:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003ABE                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003ABE                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 106
.text:0000000000003AC2                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003AC8                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003ACC                 mov     esi, 3
.text:0000000000003AD1                 mov     eax, [rax+1Ch]
.text:0000000000003AD4                 cmp     eax, 0FFFFFFFFh
.text:0000000000003AD7                 lea     ecx, [rax+1]
.text:0000000000003ADA                 setl    r13b
.text:0000000000003ADE                 cmp     eax, 0FFFFFFFFh
.text:0000000000003AE1                 setnl   al
.text:0000000000003AE4                 xor     r8d, r8d
.text:0000000000003AE7                 xor     r9d, r9d
.text:0000000000003AEA                 jmp     loc_2EE5
.text:0000000000003AEF ; ---------------------------------------------------------------------------
.text:0000000000003AEF
.text:0000000000003AEF loc_3AEF:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003AEF                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003AEF                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 107
.text:0000000000003AF3                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003AF9                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003AFD                 mov     ecx, [rax+8]
.text:0000000000003B00                 jmp     short loc_3A9E
.text:0000000000003B02 ; ---------------------------------------------------------------------------
.text:0000000000003B02
.text:0000000000003B02 loc_3B02:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003B02                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003B02                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 108
.text:0000000000003B06                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003B0C                 mov     ecx, [rsp+4E8h+var_4B8]
.text:0000000000003B10                 jmp     short loc_3A9E
.text:0000000000003B12 ; ---------------------------------------------------------------------------
.text:0000000000003B12
.text:0000000000003B12 loc_3B12:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003B12                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003B12                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000002AC3 case 109
.text:0000000000003B16                 jz      def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000003B1C                 mov     rax, [rsp+4E8h+tp]
.text:0000000000003B20                 mov     esi, 2
.text:0000000000003B25                 mov     eax, [rax+10h]
.text:0000000000003B28                 cmp     eax, 0FFFFFFFFh
.text:0000000000003B2B                 lea     ecx, [rax+1]
.text:0000000000003B2E                 setl    r13b
.text:0000000000003B32                 cmp     eax, 0FFFFFFFFh
.text:0000000000003B35                 setnl   al
.text:0000000000003B38                 xor     r8d, r8d
.text:0000000000003B3B                 xor     r9d, r9d
.text:0000000000003B3E                 jmp     loc_2EE5
.text:0000000000003B43 ; ---------------------------------------------------------------------------
.text:0000000000003B43
.text:0000000000003B43 loc_3B43:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003B43                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003B43                 test    r10d, r10d      ; jumptable 0000000000002AC3 case 110
.text:0000000000003B46                 mov     r13d, 0
.text:0000000000003B4C                 mov     eax, 1
.text:0000000000003B51                 cmovns  r13d, r10d
.text:0000000000003B55                 movsxd  r13, r13d
.text:0000000000003B58                 test    r13, r13
.text:0000000000003B5B                 cmovz   r13, rax
.text:0000000000003B5F                 mov     rax, r15
.text:0000000000003B62                 not     rax
.text:0000000000003B65                 cmp     rax, r13
.text:0000000000003B68                 jbe     loc_29BF
.text:0000000000003B6E                 test    r12, r12
.text:0000000000003B71                 jz      loc_2FDF
.text:0000000000003B77                 cmp     r10d, 1
.text:0000000000003B7B                 jle     short loc_3BB2
.text:0000000000003B7D                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000003B81                 movsxd  r10, r10d
.text:0000000000003B84                 lea     r14, [r10-1]
.text:0000000000003B88                 cmp     eax, 30h ; '0'
.text:0000000000003B8B                 jz      loc_434C
.text:0000000000003B91                 xor     ebp, ebp
.text:0000000000003B93                 cmp     eax, 2Bh ; '+'
.text:0000000000003B96                 jz      loc_434C
.text:0000000000003B9C
.text:0000000000003B9C loc_3B9C:                               ; CODE XREF: __strftime_internal+12B0↓j
.text:0000000000003B9C                 mov     rsi, r12        ; stream
.text:0000000000003B9F                 mov     edi, 20h ; ' '  ; c
.text:0000000000003BA4                 add     rbp, 1
.text:0000000000003BA8                 call    _fputc
.text:0000000000003BAD                 cmp     r14, rbp
.text:0000000000003BB0                 jnz     short loc_3B9C
.text:0000000000003BB2
.text:0000000000003BB2 loc_3BB2:                               ; CODE XREF: __strftime_internal+127B↑j
.text:0000000000003BB2                                         ; __strftime_internal+1A64↓j
.text:0000000000003BB2                 mov     rsi, r12        ; stream
.text:0000000000003BB5                 mov     edi, 0Ah        ; c
.text:0000000000003BBA                 call    _fputc
.text:0000000000003BBF                 jmp     loc_2FDF
.text:0000000000003BC4 ; ---------------------------------------------------------------------------
.text:0000000000003BC4
.text:0000000000003BC4 loc_3BC4:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003BC4                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003BC4                 xor     eax, eax        ; jumptable 0000000000002AC3 case 112
.text:0000000000003BC6                 jmp     loc_2F46
.text:0000000000003BCB ; ---------------------------------------------------------------------------
.text:0000000000003BCB
.text:0000000000003BCB loc_3BCB:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003BCB                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003BCB                 movzx   eax, byte ptr [rsp+4E8h+var_4B4] ; jumptable 0000000000002AC3 cases 98,104
.text:0000000000003BD0                 test    r14b, r14b
.text:0000000000003BD3                 cmovnz  eax, r14d
.text:0000000000003BD7                 cmp     r11d, 45h ; 'E'
.text:0000000000003BDB                 jz      loc_4398
.text:0000000000003BE1                 mov     r13d, edi
.text:0000000000003BE4                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:0000000000003BE8                 xor     r14d, r14d
.text:0000000000003BEB                 jmp     loc_2CAD
.text:0000000000003BF0 ; ---------------------------------------------------------------------------
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000003BF0                                         ; DATA XREF: .rodata:jpt_2AC3↓o
.text:0000000000003BF0                 xor     r14d, r14d      ; jumptable 0000000000002AC3 case 122
.text:0000000000003BF3                 jmp     loc_37D2
.text:0000000000003BF3 ; ---------------------------------------------------------------------------
.text:0000000000003BF8                 align 20h
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: __strftime_internal+5E9↑j
.text:0000000000003C00                                         ; __strftime_internal+5F1↑j
.text:0000000000003C00                 mov     eax, ecx
.text:0000000000003C02                 neg     eax
.text:0000000000003C04                 test    r13b, r13b
.text:0000000000003C07                 cmovnz  ecx, eax
.text:0000000000003C0A                 jmp     loc_31E8
.text:0000000000003C0A ; ---------------------------------------------------------------------------
.text:0000000000003C0F                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: __strftime_internal+7D3↑j
.text:0000000000003C10                                         ; __strftime_internal+952↑j
.text:0000000000003C10                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:0000000000003C15                 mov     ebp, 2Dh ; '-'
.text:0000000000003C1A                 jnz     loc_3271
.text:0000000000003C20                 mov     byte ptr [rsp+4E8h+size], 2Dh ; '-'
.text:0000000000003C25
.text:0000000000003C25 loc_3C25:                               ; CODE XREF: __strftime_internal+1722↓j
.text:0000000000003C25                 test    r10d, r10d
.text:0000000000003C28                 mov     ecx, 0
.text:0000000000003C2D                 mov     eax, 1
.text:0000000000003C32                 cmovns  ecx, r10d
.text:0000000000003C36                 movsxd  r13, ecx
.text:0000000000003C39                 test    r13, r13
.text:0000000000003C3C                 cmovnz  rax, r13
.text:0000000000003C40                 mov     rdi, rax
.text:0000000000003C43                 mov     [rsp+4E8h+var_4E0], rax
.text:0000000000003C48                 mov     rax, r15
.text:0000000000003C4B                 not     rax
.text:0000000000003C4E                 cmp     rax, rdi
.text:0000000000003C51                 jbe     loc_29BF
.text:0000000000003C57                 test    r12, r12
.text:0000000000003C5A                 jz      short loc_3CB9
.text:0000000000003C5C                 mov     edi, [rsp+4E8h+var_490]
.text:0000000000003C60                 test    edi, edi
.text:0000000000003C62                 jnz     short loc_3CA2
.text:0000000000003C64                 cmp     r13, 1
.text:0000000000003C68                 jbe     short loc_3CA2
.text:0000000000003C6A                 movsxd  rax, r10d
.text:0000000000003C6D                 sub     rax, 1
.text:0000000000003C71                 jz      short loc_3CA2
.text:0000000000003C73                 mov     [rsp+4E8h+var_4A0], rbx
.text:0000000000003C78                 xor     ebp, ebp
.text:0000000000003C7A                 mov     rbx, rax
.text:0000000000003C7D                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:0000000000003C82
.text:0000000000003C82 loc_3C82:                               ; CODE XREF: __strftime_internal+1396↓j
.text:0000000000003C82                 mov     rsi, r12        ; stream
.text:0000000000003C85                 mov     edi, 20h ; ' '  ; c
.text:0000000000003C8A                 add     rbp, 1
.text:0000000000003C8E                 call    _fputc
.text:0000000000003C93                 cmp     rbx, rbp
.text:0000000000003C96                 jnz     short loc_3C82
.text:0000000000003C98                 mov     rbx, [rsp+4E8h+var_4A0]
.text:0000000000003C9D                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:0000000000003CA2
.text:0000000000003CA2 loc_3CA2:                               ; CODE XREF: __strftime_internal+1362↑j
.text:0000000000003CA2                                         ; __strftime_internal+1368↑j ...
.text:0000000000003CA2                 movsx   edi, byte ptr [rsp+4E8h+size] ; c
.text:0000000000003CA7                 mov     rsi, r12        ; stream
.text:0000000000003CAA                 mov     dword ptr [rsp+4E8h+var_4A0], r10d
.text:0000000000003CAF                 call    _fputc
.text:0000000000003CB4                 mov     r10d, dword ptr [rsp+4E8h+var_4A0]
.text:0000000000003CB9
.text:0000000000003CB9 loc_3CB9:                               ; CODE XREF: __strftime_internal+135A↑j
.text:0000000000003CB9                 add     r15, [rsp+4E8h+var_4E0]
.text:0000000000003CBE                 mov     rax, [rsp+4E8h+ptr]
.text:0000000000003CC3                 mov     rbp, rbx
.text:0000000000003CC6                 mov     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:0000000000003CCE                 add     rax, 17h
.text:0000000000003CD2                 sub     rax, r14
.text:0000000000003CD5                 mov     rdx, r15
.text:0000000000003CD8                 mov     [rsp+4E8h+size], rax
.text:0000000000003CDD                 not     rdx
.text:0000000000003CE0                 jmp     loc_311C
.text:0000000000003CE0 ; ---------------------------------------------------------------------------
.text:0000000000003CE5                 align 8
.text:0000000000003CE8
.text:0000000000003CE8 loc_3CE8:                               ; CODE XREF: __strftime_internal+2B8↑j
.text:0000000000003CE8                 mov     rdi, [rsp+4E8h+ptr] ; ptr
.text:0000000000003CED                 mov     rcx, r12        ; s
.text:0000000000003CF0                 mov     edx, 1          ; n
.text:0000000000003CF5                 mov     rsi, r13        ; size
.text:0000000000003CF8                 call    _fwrite
.text:0000000000003CFD                 jmp     loc_2BCE
.text:0000000000003CFD ; ---------------------------------------------------------------------------
.text:0000000000003D02                 align 8
.text:0000000000003D08
.text:0000000000003D08 loc_3D08:                               ; CODE XREF: __strftime_internal+4A9↑j
.text:0000000000003D08                 mov     rdi, [rsp+4E8h+ptr]
.text:0000000000003D0D                 mov     rcx, r12        ; s
.text:0000000000003D10                 mov     edx, 1          ; n
.text:0000000000003D15                 mov     rsi, r13        ; size
.text:0000000000003D18                 add     rdi, 1          ; ptr
.text:0000000000003D1C                 call    _fwrite
.text:0000000000003D21                 jmp     loc_2DC3
.text:0000000000003D21 ; ---------------------------------------------------------------------------
.text:0000000000003D26                 align 10h
.text:0000000000003D30
.text:0000000000003D30 loc_3D30:                               ; CODE XREF: __strftime_internal+49E↑j
.text:0000000000003D30                 mov     rsi, [rsp+4E8h+ptr]
.text:0000000000003D35                 mov     rdx, r13
.text:0000000000003D38                 mov     rdi, r12        ; stream
.text:0000000000003D3B                 add     rsi, 1
.text:0000000000003D3F                 call    fwrite_lowcase
.text:0000000000003D44                 jmp     loc_2DC3
.text:0000000000003D44 ; ---------------------------------------------------------------------------
.text:0000000000003D49                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: __strftime_internal+898↑j
.text:0000000000003D50                 mov     rsi, [rsp+4E8h+size] ; size
.text:0000000000003D55                 mov     rcx, r12        ; s
.text:0000000000003D58                 mov     edx, 1          ; n
.text:0000000000003D5D                 mov     rdi, r14        ; ptr
.text:0000000000003D60                 call    _fwrite
.text:0000000000003D65                 jmp     loc_31AE
.text:0000000000003D65 ; ---------------------------------------------------------------------------
.text:0000000000003D6A                 align 10h
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: __strftime_internal+462↑j
.text:0000000000003D70                                         ; __strftime_internal+46B↑j
.text:0000000000003D70                 test    rbx, rbx
.text:0000000000003D73                 jz      loc_2D9B
.text:0000000000003D79                 xor     edx, edx
.text:0000000000003D7B                 mov     [rsp+4E8h+var_4E0], rbp
.text:0000000000003D80                 mov     rbp, rdx
.text:0000000000003D83                 nop     dword ptr [rax+rax+00h]
.text:0000000000003D88
.text:0000000000003D88 loc_3D88:                               ; CODE XREF: __strftime_internal+149C↓j
.text:0000000000003D88                 mov     rsi, r12        ; stream
.text:0000000000003D8B                 mov     edi, 30h ; '0'  ; c
.text:0000000000003D90                 add     rbp, 1
.text:0000000000003D94                 call    _fputc
.text:0000000000003D99                 cmp     rbx, rbp
.text:0000000000003D9C                 jnz     short loc_3D88
.text:0000000000003D9E                 jmp     loc_2D96
.text:0000000000003DA3 ; ---------------------------------------------------------------------------
.text:0000000000003DA3
.text:0000000000003DA3 loc_3DA3:                               ; CODE XREF: __strftime_internal+274↑j
.text:0000000000003DA3                                         ; __strftime_internal+27D↑j
.text:0000000000003DA3                 test    rbx, rbx
.text:0000000000003DA6                 jz      loc_2BB3
.text:0000000000003DAC                 xor     edx, edx
.text:0000000000003DAE                 mov     [rsp+4E8h+var_4E0], rbp
.text:0000000000003DB3                 mov     rbp, rdx
.text:0000000000003DB6                 db      2Eh
.text:0000000000003DB6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: __strftime_internal+14D4↓j
.text:0000000000003DC0                 mov     rsi, r12        ; stream
.text:0000000000003DC3                 mov     edi, 30h ; '0'  ; c
.text:0000000000003DC8                 add     rbp, 1
.text:0000000000003DCC                 call    _fputc
.text:0000000000003DD1                 cmp     rbx, rbp
.text:0000000000003DD4                 jnz     short loc_3DC0
.text:0000000000003DD6                 jmp     loc_2BAE
.text:0000000000003DDB ; ---------------------------------------------------------------------------
.text:0000000000003DDB
.text:0000000000003DDB loc_3DDB:                               ; CODE XREF: __strftime_internal+6D9↑j
.text:0000000000003DDB                 cmp     rax, rdx
.text:0000000000003DDE                 jnb     short loc_3E37
.text:0000000000003DE0                 movsxd  rdx, r10d
.text:0000000000003DE3                 mov     rdi, rdx
.text:0000000000003DE6                 sub     rdi, rax
.text:0000000000003DE9                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000003DED                 cmp     eax, 30h ; '0'
.text:0000000000003DF0                 jz      loc_41DA
.text:0000000000003DF6                 cmp     eax, 2Bh ; '+'
.text:0000000000003DF9                 jz      loc_41DA
.text:0000000000003DFF                 xor     edx, edx
.text:0000000000003E01                 test    rdi, rdi
.text:0000000000003E04                 jz      short loc_3E37
.text:0000000000003E06                 mov     [rsp+4E8h+var_4B4], ebp
.text:0000000000003E0A                 mov     [rsp+4E8h+size], rbx
.text:0000000000003E0F                 mov     rbp, rdi
.text:0000000000003E12                 mov     rbx, rdx
.text:0000000000003E15                 nop     dword ptr [rax]
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: __strftime_internal+152C↓j
.text:0000000000003E18                 mov     rsi, r12        ; stream
.text:0000000000003E1B                 mov     edi, 20h ; ' '  ; c
.text:0000000000003E20                 add     rbx, 1
.text:0000000000003E24                 call    _fputc
.text:0000000000003E29                 cmp     rbp, rbx
.text:0000000000003E2C                 jnz     short loc_3E18
.text:0000000000003E2E
.text:0000000000003E2E loc_3E2E:                               ; CODE XREF: __strftime_internal+190E↓j
.text:0000000000003E2E                 mov     ebp, [rsp+4E8h+var_4B4]
.text:0000000000003E32                 mov     rbx, [rsp+4E8h+size]
.text:0000000000003E37
.text:0000000000003E37 loc_3E37:                               ; CODE XREF: __strftime_internal+14DE↑j
.text:0000000000003E37                                         ; __strftime_internal+1504↑j ...
.text:0000000000003E37                 sub     rsp, 8
.text:0000000000003E3B                 mov     r9d, r14d
.text:0000000000003E3E                 mov     ecx, ebp
.text:0000000000003E40                 mov     eax, [rsp+4F0h+arg_10]
.text:0000000000003E47                 mov     rdi, r12        ; stream
.text:0000000000003E4A                 push    rax             ; int
.text:0000000000003E4B                 push    [rsp+4F8h+var_4D8] ; __int64
.text:0000000000003E4F                 push    [rsp+500h+var_4D0] ; __int64
.text:0000000000003E53                 mov     r8d, dword ptr [rsp+508h+var_4E0]
.text:0000000000003E58                 mov     rdx, [rsp+508h+tp]
.text:0000000000003E5D                 mov     rsi, [rsp+508h+ptr]
.text:0000000000003E62                 call    __strftime_internal
.text:0000000000003E67                 add     rsp, 20h
.text:0000000000003E6B                 jmp     loc_2FDF
.text:0000000000003E70 ; ---------------------------------------------------------------------------
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: __strftime_internal+853↑j
.text:0000000000003E70                                         ; __strftime_internal+85C↑j
.text:0000000000003E70                 test    r13, r13
.text:0000000000003E73                 jz      loc_3193
.text:0000000000003E79                 xor     edx, edx
.text:0000000000003E7B                 mov     [rsp+4E8h+var_4E0], rbx
.text:0000000000003E80                 mov     rbx, rdx
.text:0000000000003E83                 nop     dword ptr [rax+rax+00h]
.text:0000000000003E88
.text:0000000000003E88 loc_3E88:                               ; CODE XREF: __strftime_internal+159C↓j
.text:0000000000003E88                 mov     rsi, r12        ; stream
.text:0000000000003E8B                 mov     edi, 30h ; '0'  ; c
.text:0000000000003E90                 add     rbx, 1
.text:0000000000003E94                 call    _fputc
.text:0000000000003E99                 cmp     r13, rbx
.text:0000000000003E9C                 jnz     short loc_3E88
.text:0000000000003E9E                 jmp     loc_318E
.text:0000000000003EA3 ; ---------------------------------------------------------------------------
.text:0000000000003EA3
.text:0000000000003EA3 loc_3EA3:                               ; CODE XREF: __strftime_internal+CFB↑j
.text:0000000000003EA3                                         ; __strftime_internal+FF9↑j ...
.text:0000000000003EA3                 xor     esi, esi
.text:0000000000003EA5                 jmp     loc_2EFA
.text:0000000000003EAA ; ---------------------------------------------------------------------------
.text:0000000000003EAA
.text:0000000000003EAA loc_3EAA:                               ; CODE XREF: __strftime_internal+649↑j
.text:0000000000003EAA                 mov     r13d, 70h ; 'p'
.text:0000000000003EB0                 mov     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000003EB5                 jmp     loc_2CAD
.text:0000000000003EBA ; ---------------------------------------------------------------------------
.text:0000000000003EBA
.text:0000000000003EBA loc_3EBA:                               ; CODE XREF: __strftime_internal+1943↓j
.text:0000000000003EBA                 xor     ebp, ebp
.text:0000000000003EBC
.text:0000000000003EBC loc_3EBC:                               ; CODE XREF: __strftime_internal+9A4↑j
.text:0000000000003EBC                 movsxd  rax, r13d
.text:0000000000003EBF                 cmp     rax, rdx
.text:0000000000003EC2                 mov     [rsp+4E8h+var_4E0], rax
.text:0000000000003EC7                 jnb     loc_29BF
.text:0000000000003ECD                 test    r12, r12
.text:0000000000003ED0                 jz      short loc_3F15
.text:0000000000003ED2                 xor     edx, edx
.text:0000000000003ED4                 mov     byte ptr [rsp+4E8h+size], bpl
.text:0000000000003ED9                 mov     [rsp+4E8h+var_4A0], rbx
.text:0000000000003EDE                 mov     rbp, rdx
.text:0000000000003EE1                 mov     rbx, rax
.text:0000000000003EE4                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:0000000000003EE9                 nop     dword ptr [rax+00000000h]
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: __strftime_internal+1604↓j
.text:0000000000003EF0                 mov     rsi, r12        ; stream
.text:0000000000003EF3                 mov     edi, 20h ; ' '  ; c
.text:0000000000003EF8                 add     rbp, 1
.text:0000000000003EFC                 call    _fputc
.text:0000000000003F01                 cmp     rbx, rbp
.text:0000000000003F04                 ja      short loc_3EF0
.text:0000000000003F06                 movzx   ebp, byte ptr [rsp+4E8h+size]
.text:0000000000003F0B                 mov     rbx, [rsp+4E8h+var_4A0]
.text:0000000000003F10                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:0000000000003F15
.text:0000000000003F15 loc_3F15:                               ; CODE XREF: __strftime_internal+15D0↑j
.text:0000000000003F15                 add     r15, [rsp+4E8h+var_4E0]
.text:0000000000003F1A                 mov     eax, r10d
.text:0000000000003F1D                 sub     eax, r13d
.text:0000000000003F20                 cmp     r10d, r13d
.text:0000000000003F23                 mov     r10d, 0
.text:0000000000003F29                 cmovg   r10d, eax
.text:0000000000003F2D                 test    bpl, bpl
.text:0000000000003F30                 mov     rdx, r15
.text:0000000000003F33                 not     rdx
.text:0000000000003F36                 jnz     loc_4063
.text:0000000000003F3C                 mov     rax, [rsp+4E8h+ptr]
.text:0000000000003F41                 movsxd  r13, r10d
.text:0000000000003F44                 mov     rbp, rbx
.text:0000000000003F47                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000003F4F                 add     rax, 17h
.text:0000000000003F53                 sub     rax, r14
.text:0000000000003F56                 mov     [rsp+4E8h+size], rax
.text:0000000000003F5B                 jmp     loc_311C
.text:0000000000003F60 ; ---------------------------------------------------------------------------
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: __strftime_internal+999↑j
.text:0000000000003F60                 test    r10d, r10d
.text:0000000000003F63                 mov     ecx, 0
.text:0000000000003F68                 mov     eax, 1
.text:0000000000003F6D                 cmovns  ecx, r10d
.text:0000000000003F71                 movsxd  r13, ecx
.text:0000000000003F74                 test    r13, r13
.text:0000000000003F77                 cmovnz  rax, r13
.text:0000000000003F7B                 cmp     rax, rdx
.text:0000000000003F7E                 mov     [rsp+4E8h+var_4A0], rax
.text:0000000000003F83                 jnb     loc_29BF
.text:0000000000003F89                 test    r12, r12
.text:0000000000003F8C                 jz      short loc_400A
.text:0000000000003F8E                 mov     ecx, [rsp+4E8h+var_490]
.text:0000000000003F92                 test    ecx, ecx
.text:0000000000003F94                 jnz     short loc_3FF4
.text:0000000000003F96                 cmp     r13, 1
.text:0000000000003F9A                 jbe     short loc_3FF4
.text:0000000000003F9C                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000003FA0                 movsxd  rax, r10d
.text:0000000000003FA3                 sub     rax, 1
.text:0000000000003FA7                 mov     [rsp+4E8h+ptr], rax
.text:0000000000003FAC                 cmp     edi, 30h ; '0'
.text:0000000000003FAF                 jz      loc_4476
.text:0000000000003FB5                 cmp     edi, 2Bh ; '+'
.text:0000000000003FB8                 jz      loc_4476
.text:0000000000003FBE                 xor     edx, edx
.text:0000000000003FC0                 test    rax, rax
.text:0000000000003FC3                 jz      short loc_3FF4
.text:0000000000003FC5                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000003FCA                 mov     [rsp+4E8h+var_48C], r10d
.text:0000000000003FCF                 mov     rbx, rdx
.text:0000000000003FD2
.text:0000000000003FD2 loc_3FD2:                               ; CODE XREF: __strftime_internal+16E8↓j
.text:0000000000003FD2                 mov     rsi, r12        ; stream
.text:0000000000003FD5                 mov     edi, 20h ; ' '  ; c
.text:0000000000003FDA                 add     rbx, 1
.text:0000000000003FDE                 call    _fputc
.text:0000000000003FE3                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000003FE8                 jnz     short loc_3FD2
.text:0000000000003FEA
.text:0000000000003FEA loc_3FEA:                               ; CODE XREF: __strftime_internal+1BA9↓j
.text:0000000000003FEA                 mov     rbx, [rsp+4E8h+var_498]
.text:0000000000003FEF                 mov     r10d, [rsp+4E8h+var_48C]
.text:0000000000003FF4
.text:0000000000003FF4 loc_3FF4:                               ; CODE XREF: __strftime_internal+1694↑j
.text:0000000000003FF4                                         ; __strftime_internal+169A↑j ...
.text:0000000000003FF4                 movsx   edi, bpl        ; c
.text:0000000000003FF8                 mov     rsi, r12        ; stream
.text:0000000000003FFB                 mov     dword ptr [rsp+4E8h+ptr], r10d
.text:0000000000004000                 call    _fputc
.text:0000000000004005                 mov     r10d, dword ptr [rsp+4E8h+ptr]
.text:000000000000400A
.text:000000000000400A loc_400A:                               ; CODE XREF: __strftime_internal+168C↑j
.text:000000000000400A                 add     r15, [rsp+4E8h+var_4A0]
.text:000000000000400F                 mov     rbp, rbx
.text:0000000000004012                 mov     rdx, r15
.text:0000000000004015                 not     rdx
.text:0000000000004018                 jmp     loc_311C
.text:000000000000401D ; ---------------------------------------------------------------------------
.text:000000000000401D
.text:000000000000401D loc_401D:                               ; CODE XREF: __strftime_internal+96B↑j
.text:000000000000401D                 mov     byte ptr [rsp+4E8h+size], 2Bh ; '+'
.text:0000000000004022                 jmp     loc_3C25
.text:0000000000004027 ; ---------------------------------------------------------------------------
.text:0000000000004027
.text:0000000000004027 loc_4027:                               ; CODE XREF: __strftime_internal+103C↑j
.text:0000000000004027                                         ; __strftime_internal+1893↓j
.text:0000000000004027                 mov     esi, 4
.text:000000000000402C                 mov     edx, 270Fh
.text:0000000000004031
.text:0000000000004031 loc_4031:                               ; CODE XREF: __strftime_internal+1BE7↓j
.text:0000000000004031                 cmp     edx, ecx
.text:0000000000004033                 mov     r9d, 1
.text:0000000000004039                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000004041                 jb      loc_354C
.text:0000000000004047
.text:0000000000004047 loc_4047:                               ; CODE XREF: __strftime_internal+1BD8↓j
.text:0000000000004047                 cmp     r10d, esi
.text:000000000000404A                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000004052                 setnle  r9b
.text:0000000000004056                 jmp     loc_354C
.text:000000000000405B ; ---------------------------------------------------------------------------
.text:000000000000405B
.text:000000000000405B loc_405B:                               ; CODE XREF: __strftime_internal+EDB↑j
.text:000000000000405B                 mov     rbp, rbx
.text:000000000000405E                 jmp     loc_2A10
.text:0000000000004063 ; ---------------------------------------------------------------------------
.text:0000000000004063
.text:0000000000004063 loc_4063:                               ; CODE XREF: __strftime_internal+1636↑j
.text:0000000000004063                 movsxd  rcx, r10d
.text:0000000000004066                 mov     r13d, 1
.text:000000000000406C                 test    rcx, rcx
.text:000000000000406F                 cmovnz  r13, rcx
.text:0000000000004073                 cmp     r13, rdx
.text:0000000000004076                 mov     [rsp+4E8h+var_4E0], r13
.text:000000000000407B                 jnb     loc_29BF
.text:0000000000004081                 test    r12, r12
.text:0000000000004084                 jz      short loc_40F5
.text:0000000000004086                 mov     esi, [rsp+4E8h+var_490]
.text:000000000000408A                 test    esi, esi
.text:000000000000408C                 jnz     short loc_40D5
.text:000000000000408E                 cmp     r10d, 1
.text:0000000000004092                 jbe     short loc_40D5
.text:0000000000004094                 lea     rax, [rcx-1]
.text:0000000000004098                 xor     r13d, r13d
.text:000000000000409B                 mov     [rsp+4E8h+var_4A0], rbx
.text:00000000000040A0                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:00000000000040A5                 mov     rbx, r13
.text:00000000000040A8                 mov     r13, rcx
.text:00000000000040AB                 mov     [rsp+4E8h+size], rax
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: __strftime_internal+17C6↓j
.text:00000000000040B0                 mov     rsi, r12        ; stream
.text:00000000000040B3                 mov     edi, 20h ; ' '  ; c
.text:00000000000040B8                 add     rbx, 1
.text:00000000000040BC                 call    _fputc
.text:00000000000040C1                 cmp     [rsp+4E8h+size], rbx
.text:00000000000040C6                 jnz     short loc_40B0
.text:00000000000040C8                 mov     rbx, [rsp+4E8h+var_4A0]
.text:00000000000040CD                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:00000000000040D2                 mov     rcx, r13
.text:00000000000040D5
.text:00000000000040D5 loc_40D5:                               ; CODE XREF: __strftime_internal+178C↑j
.text:00000000000040D5                                         ; __strftime_internal+1792↑j
.text:00000000000040D5                 movsx   edi, bpl        ; c
.text:00000000000040D9                 mov     rsi, r12        ; stream
.text:00000000000040DC                 mov     dword ptr [rsp+4E8h+var_4A0], r10d
.text:00000000000040E1                 mov     [rsp+4E8h+size], rcx
.text:00000000000040E6                 call    _fputc
.text:00000000000040EB                 mov     r10d, dword ptr [rsp+4E8h+var_4A0]
.text:00000000000040F0                 mov     rcx, [rsp+4E8h+size]
.text:00000000000040F5
.text:00000000000040F5 loc_40F5:                               ; CODE XREF: __strftime_internal+1784↑j
.text:00000000000040F5                 add     r15, [rsp+4E8h+var_4E0]
.text:00000000000040FA                 mov     rax, [rsp+4E8h+ptr]
.text:00000000000040FF                 mov     r13, rcx
.text:0000000000004102                 mov     rbp, rbx
.text:0000000000004105                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:000000000000410D                 add     rax, 17h
.text:0000000000004111                 sub     rax, r14
.text:0000000000004114                 mov     rdx, r15
.text:0000000000004117                 mov     [rsp+4E8h+size], rax
.text:000000000000411C                 not     rdx
.text:000000000000411F                 jmp     loc_311C
.text:0000000000004124 ; ---------------------------------------------------------------------------
.text:0000000000004124
.text:0000000000004124 loc_4124:                               ; CODE XREF: __strftime_internal+C1F↑j
.text:0000000000004124                 mov     eax, 0FFFFF894h
.text:0000000000004129                 sub     eax, r8d
.text:000000000000412C                 cmp     esi, eax
.text:000000000000412E                 jge     loc_44FD
.text:0000000000004134                 neg     ecx
.text:0000000000004136                 cmp     dword ptr [rsp+4E8h+var_4E0], 0
.text:000000000000413B                 jnz     loc_3531
.text:0000000000004141
.text:0000000000004141 loc_4141:                               ; CODE XREF: __strftime_internal+C2B↑j
.text:0000000000004141                                         ; __strftime_internal+1C05↓j
.text:0000000000004141                 mov     eax, [rsp+4E8h+var_4C4]
.text:0000000000004145                 cmp     eax, 2Bh ; '+'
.text:0000000000004148                 jz      loc_44CB
.text:000000000000414E                 mov     dword ptr [rsp+4E8h+var_4E0], eax
.text:0000000000004152                 xor     r9d, r9d
.text:0000000000004155                 mov     eax, 1
.text:000000000000415A                 xor     r13d, r13d
.text:000000000000415D                 mov     esi, 2
.text:0000000000004162                 jmp     loc_354C
.text:0000000000004167 ; ---------------------------------------------------------------------------
.text:0000000000004167
.text:0000000000004167 loc_4167:                               ; CODE XREF: __strftime_internal+BD3↑j
.text:0000000000004167                 mov     eax, 0FFFFF894h
.text:000000000000416C                 mov     r9d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000004171                 lea     ecx, [rsi+r8+76Ch]
.text:0000000000004179                 sub     eax, r8d
.text:000000000000417C                 cmp     esi, eax
.text:000000000000417E                 setl    r13b
.text:0000000000004182                 setnl   al
.text:0000000000004185                 test    r9d, r9d
.text:0000000000004188                 jz      loc_3935
.text:000000000000418E
.text:000000000000418E loc_418E:                               ; CODE XREF: __strftime_internal+102F↑j
.text:000000000000418E                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000004193                 jz      loc_4027
.text:0000000000004199                 xor     r9d, r9d
.text:000000000000419C                 mov     esi, 4
.text:00000000000041A1                 jmp     loc_354C
.text:00000000000041A1 ; ---------------------------------------------------------------------------
.text:00000000000041A6                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: __strftime_internal+C98↑j
.text:00000000000041B0                 mov     ecx, [rsp+4E8h+arg_10]
.text:00000000000041B7                 mov     esi, 9
.text:00000000000041BC                 mov     r10d, 9
.text:00000000000041C2                 jmp     loc_2ED0
.text:00000000000041C7 ; ---------------------------------------------------------------------------
.text:00000000000041C7
.text:00000000000041C7 loc_41C7:                               ; CODE XREF: __strftime_internal+E55↑j
.text:00000000000041C7                 mov     rbp, rbx
.text:00000000000041CA                 mov     [rsp+4E8h+ptr], rbx
.text:00000000000041CF                 mov     r13d, 1
.text:00000000000041D5                 jmp     loc_2B54
.text:00000000000041DA ; ---------------------------------------------------------------------------
.text:00000000000041DA
.text:00000000000041DA loc_41DA:                               ; CODE XREF: __strftime_internal+14F0↑j
.text:00000000000041DA                                         ; __strftime_internal+14F9↑j
.text:00000000000041DA                 test    rdi, rdi
.text:00000000000041DD                 jz      loc_3E37
.text:00000000000041E3                 xor     edx, edx
.text:00000000000041E5                 mov     [rsp+4E8h+var_4B4], ebp
.text:00000000000041E9                 mov     [rsp+4E8h+size], rbx
.text:00000000000041EE                 mov     rbp, rdi
.text:00000000000041F1                 mov     rbx, rdx
.text:00000000000041F4                 nop     dword ptr [rax+00h]
.text:00000000000041F8
.text:00000000000041F8 loc_41F8:                               ; CODE XREF: __strftime_internal+190C↓j
.text:00000000000041F8                 mov     rsi, r12        ; stream
.text:00000000000041FB                 mov     edi, 30h ; '0'  ; c
.text:0000000000004200                 add     rbx, 1
.text:0000000000004204                 call    _fputc
.text:0000000000004209                 cmp     rbp, rbx
.text:000000000000420C                 jnz     short loc_41F8
.text:000000000000420E                 jmp     loc_3E2E
.text:0000000000004213 ; ---------------------------------------------------------------------------
.text:0000000000004213
.text:0000000000004213 loc_4213:                               ; CODE XREF: __strftime_internal+F6B↑j
.text:0000000000004213                                         ; __strftime_internal+F7D↑j
.text:0000000000004213                 imul    r8d, 64h ; 'd'
.text:0000000000004217                 mov     r9d, 1
.text:000000000000421D                 mov     esi, 9
.text:0000000000004222                 imul    eax, ebp, 2710h
.text:0000000000004228                 add     eax, r8d
.text:000000000000422B                 mov     r8d, 14h
.text:0000000000004231                 add     ecx, eax
.text:0000000000004233                 mov     eax, r13d
.text:0000000000004236                 xor     eax, 1
.text:0000000000004239                 jmp     loc_2EE5
.text:000000000000423E ; ---------------------------------------------------------------------------
.text:000000000000423E
.text:000000000000423E loc_423E:                               ; CODE XREF: __strftime_internal+804↑j
.text:000000000000423E                 cmp     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000004243                 jz      loc_3EBA
.text:0000000000004249                 movsxd  rax, [rsp+4E8h+var_490]
.text:000000000000424E                 cmp     rax, rdx
.text:0000000000004251                 jb      loc_3351
.text:0000000000004257                 jmp     loc_29BF
.text:0000000000004257 ; ---------------------------------------------------------------------------
.text:000000000000425C                 align 20h
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: __strftime_internal+B34↑j
.text:0000000000004260                 sub     r9d, 1
.text:0000000000004264                 mov     edx, 16Dh
.text:0000000000004269                 test    r9b, 3
.text:000000000000426D                 jnz     short loc_42A9
.text:000000000000426F                 mov     eax, r9d
.text:0000000000004272                 mov     edx, 51EB851Fh
.text:0000000000004277                 imul    edx
.text:0000000000004279                 mov     eax, r9d
.text:000000000000427C                 sar     eax, 1Fh
.text:000000000000427F                 sar     edx, 5
.text:0000000000004282                 sub     edx, eax
.text:0000000000004284                 imul    eax, edx, 64h ; 'd'
.text:0000000000004287                 mov     edx, 16Eh
.text:000000000000428C                 cmp     r9d, eax
.text:000000000000428F                 jnz     short loc_42A9
.text:0000000000004291                 mov     eax, r9d
.text:0000000000004294                 mov     ecx, 190h
.text:0000000000004299                 cdq
.text:000000000000429A                 idiv    ecx
.text:000000000000429C                 cmp     edx, 1
.text:000000000000429F                 sbb     edx, edx
.text:00000000000042A1                 not     edx
.text:00000000000042A3                 add     edx, 16Eh
.text:00000000000042A9
.text:00000000000042A9 loc_42A9:                               ; CODE XREF: __strftime_internal+196D↑j
.text:00000000000042A9                                         ; __strftime_internal+198F↑j
.text:00000000000042A9                 add     r8d, edx
.text:00000000000042AC                 mov     edx, 92492493h
.text:00000000000042B1                 mov     ecx, r8d
.text:00000000000042B4                 sub     ecx, r14d
.text:00000000000042B7                 add     ecx, 17Eh
.text:00000000000042BD                 mov     eax, ecx
.text:00000000000042BF                 sub     r8d, ecx
.text:00000000000042C2                 imul    edx
.text:00000000000042C4                 lea     eax, [rdx+rcx]
.text:00000000000042C7                 mov     edx, ecx
.text:00000000000042C9                 sar     edx, 1Fh
.text:00000000000042CC                 sar     eax, 2
.text:00000000000042CF                 sub     eax, edx
.text:00000000000042D1                 lea     edx, ds:0[rax*8]
.text:00000000000042D8                 sub     edx, eax
.text:00000000000042DA                 lea     ecx, [r8+rdx+3]
.text:00000000000042DF                 mov     r8d, 0FFFFFFFFh
.text:00000000000042E5                 jmp     loc_34CF
.text:00000000000042EA ; ---------------------------------------------------------------------------
.text:00000000000042EA
.text:00000000000042EA loc_42EA:                               ; CODE XREF: __strftime_internal+BDD↑j
.text:00000000000042EA                 mov     eax, ecx
.text:00000000000042EC                 mov     edx, 92492493h
.text:00000000000042F1                 mov     esi, 2
.text:00000000000042F6                 imul    edx
.text:00000000000042F8                 lea     eax, [rdx+rcx]
.text:00000000000042FB                 sar     ecx, 1Fh
.text:00000000000042FE                 sar     eax, 2
.text:0000000000004301                 sub     eax, ecx
.text:0000000000004303                 mov     ecx, eax
.text:0000000000004305                 add     ecx, 1
.text:0000000000004308                 jmp     loc_2ED0
.text:000000000000430D ; ---------------------------------------------------------------------------
.text:000000000000430D
.text:000000000000430D loc_430D:                               ; CODE XREF: __strftime_internal+F5B↑j
.text:000000000000430D                                         ; __strftime_internal+F85↑j
.text:000000000000430D                 imul    ecx, ebp, 64h ; 'd'
.text:0000000000004310                 mov     eax, r13d
.text:0000000000004313                 mov     r9d, 1
.text:0000000000004319                 xor     eax, 1
.text:000000000000431C                 mov     esi, 6
.text:0000000000004321                 add     ecx, r8d
.text:0000000000004324                 mov     r8d, 4
.text:000000000000432A                 jmp     loc_2EE5
.text:000000000000432F ; ---------------------------------------------------------------------------
.text:000000000000432F
.text:000000000000432F loc_432F:                               ; CODE XREF: __strftime_internal+558↑j
.text:000000000000432F                                         ; __strftime_internal+563↑j
.text:000000000000432F                 xor     ebp, ebp
.text:0000000000004331
.text:0000000000004331 loc_4331:                               ; CODE XREF: __strftime_internal+1A45↓j
.text:0000000000004331                 mov     rsi, r12        ; stream
.text:0000000000004334                 mov     edi, 30h ; '0'  ; c
.text:0000000000004339                 add     rbp, 1
.text:000000000000433D                 call    _fputc
.text:0000000000004342                 cmp     r14, rbp
.text:0000000000004345                 jnz     short loc_4331
.text:0000000000004347                 jmp     loc_2E7F
.text:000000000000434C ; ---------------------------------------------------------------------------
.text:000000000000434C
.text:000000000000434C loc_434C:                               ; CODE XREF: __strftime_internal+128B↑j
.text:000000000000434C                                         ; __strftime_internal+1296↑j
.text:000000000000434C                 xor     ebp, ebp
.text:000000000000434E
.text:000000000000434E loc_434E:                               ; CODE XREF: __strftime_internal+1A62↓j
.text:000000000000434E                 mov     rsi, r12        ; stream
.text:0000000000004351                 mov     edi, 30h ; '0'  ; c
.text:0000000000004356                 add     rbp, 1
.text:000000000000435A                 call    _fputc
.text:000000000000435F                 cmp     r14, rbp
.text:0000000000004362                 jnz     short loc_434E
.text:0000000000004364                 jmp     loc_3BB2
.text:0000000000004369 ; ---------------------------------------------------------------------------
.text:0000000000004369
.text:0000000000004369 loc_4369:                               ; CODE XREF: __strftime_internal+1109↑j
.text:0000000000004369                 mov     rdi, [rsp+4E8h+var_4C0] ; ptr
.text:000000000000436E                 mov     rcx, r12        ; s
.text:0000000000004371                 mov     edx, 1          ; n
.text:0000000000004376                 mov     rsi, r13        ; size
.text:0000000000004379                 call    _fwrite
.text:000000000000437E                 jmp     loc_3A1F
.text:0000000000004383 ; ---------------------------------------------------------------------------
.text:0000000000004383
.text:0000000000004383 loc_4383:                               ; CODE XREF: __strftime_internal+10FE↑j
.text:0000000000004383                 mov     rsi, [rsp+4E8h+var_4C0]
.text:0000000000004388                 mov     rdx, r13
.text:000000000000438B                 mov     rdi, r12        ; stream
.text:000000000000438E                 call    fwrite_lowcase
.text:0000000000004393                 jmp     loc_3A1F
.text:0000000000004398 ; ---------------------------------------------------------------------------
.text:0000000000004398
.text:0000000000004398 loc_4398:                               ; CODE XREF: __strftime_internal+12DB↑j
.text:0000000000004398                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:000000000000439C                 jmp     def_2AC3        ; jumptable 0000000000002AC3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000043A1 ; ---------------------------------------------------------------------------
.text:00000000000043A1
.text:00000000000043A1 loc_43A1:                               ; CODE XREF: __strftime_internal+EBB↑j
.text:00000000000043A1                 lea     rcx, [rbx+2]
.text:00000000000043A5                 mov     r14d, 1
.text:00000000000043AB
.text:00000000000043AB loc_43AB:                               ; CODE XREF: __strftime_internal+1AC2↓j
.text:00000000000043AB                 mov     rdx, rcx
.text:00000000000043AE                 add     rcx, 1
.text:00000000000043B2                 movzx   eax, byte ptr [rcx-1]
.text:00000000000043B6                 add     r14, 1
.text:00000000000043BA                 cmp     al, 3Ah ; ':'
.text:00000000000043BC                 jnz     loc_37C7
.text:00000000000043C2                 jmp     short loc_43AB
.text:00000000000043C4 ; ---------------------------------------------------------------------------
.text:00000000000043C4
.text:00000000000043C4 loc_43C4:                               ; CODE XREF: __strftime_internal+F75↑j
.text:00000000000043C4                 movzx   ecx, byte ptr [rbx]
.text:00000000000043C7                 mov     [rsp+4E8h+ptr], rbx
.text:00000000000043CC                 jmp     loc_36DA
.text:00000000000043D1 ; ---------------------------------------------------------------------------
.text:00000000000043D1
.text:00000000000043D1 loc_43D1:                               ; CODE XREF: __strftime_internal+F61↑j
.text:00000000000043D1                 imul    ecx, ebp, 64h ; 'd'
.text:00000000000043D4                 xor     r8d, r8d
.text:00000000000043D7                 mov     r9d, 1
.text:00000000000043DD                 mov     esi, 5
.text:00000000000043E2                 add     ecx, eax
.text:00000000000043E4                 mov     eax, r13d
.text:00000000000043E7                 xor     eax, 1
.text:00000000000043EA                 jmp     loc_2EE5
.text:00000000000043EF ; ---------------------------------------------------------------------------
.text:00000000000043EF
.text:00000000000043EF loc_43EF:                               ; CODE XREF: __strftime_internal+D9F↑j
.text:00000000000043EF                                         ; __strftime_internal+DA8↑j
.text:00000000000043EF                 mov     r14d, r10d
.text:00000000000043F2                 mov     eax, 0
.text:00000000000043F7                 sub     r14d, 6
.text:00000000000043FB                 cmovs   r14d, eax
.text:00000000000043FF                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000004406                 mov     [rsp+4E8h+ptr], rax
.text:000000000000440B                 jmp     loc_2F6F
.text:0000000000004410 ; ---------------------------------------------------------------------------
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: __strftime_internal+A05↑j
.text:0000000000004410                                         ; __strftime_internal+A0E↑j
.text:0000000000004410                 cmp     [rsp+4E8h+ptr], 0
.text:0000000000004416                 jz      loc_3340
.text:000000000000441C                 xor     edx, edx
.text:000000000000441E                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000004423                 mov     rbx, rdx
.text:0000000000004426
.text:0000000000004426 loc_4426:                               ; CODE XREF: __strftime_internal+1B3C↓j
.text:0000000000004426                 mov     rsi, r12        ; stream
.text:0000000000004429                 mov     edi, 30h ; '0'  ; c
.text:000000000000442E                 add     rbx, 1
.text:0000000000004432                 call    _fputc
.text:0000000000004437                 cmp     [rsp+4E8h+ptr], rbx
.text:000000000000443C                 jnz     short loc_4426
.text:000000000000443E                 jmp     loc_333B
.text:0000000000004443 ; ---------------------------------------------------------------------------
.text:0000000000004443
.text:0000000000004443 loc_4443:                               ; CODE XREF: __strftime_internal+10C0↑j
.text:0000000000004443                                         ; __strftime_internal+10C9↑j
.text:0000000000004443                 cmp     [rsp+4E8h+ptr], 0
.text:0000000000004449                 jz      loc_39FB
.text:000000000000444F                 xor     edx, edx
.text:0000000000004451                 mov     [rsp+4E8h+var_4E0], rbx
.text:0000000000004456                 mov     rbx, rdx
.text:0000000000004459
.text:0000000000004459 loc_4459:                               ; CODE XREF: __strftime_internal+1B6F↓j
.text:0000000000004459                 mov     rsi, r12        ; stream
.text:000000000000445C                 mov     edi, 30h ; '0'  ; c
.text:0000000000004461                 add     rbx, 1
.text:0000000000004465                 call    _fputc
.text:000000000000446A                 cmp     [rsp+4E8h+ptr], rbx
.text:000000000000446F                 jnz     short loc_4459
.text:0000000000004471                 jmp     loc_39F6
.text:0000000000004476 ; ---------------------------------------------------------------------------
.text:0000000000004476
.text:0000000000004476 loc_4476:                               ; CODE XREF: __strftime_internal+16AF↑j
.text:0000000000004476                                         ; __strftime_internal+16B8↑j
.text:0000000000004476                 cmp     [rsp+4E8h+ptr], 0
.text:000000000000447C                 jz      loc_3FF4
.text:0000000000004482                 xor     edx, edx
.text:0000000000004484                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000004489                 mov     [rsp+4E8h+var_48C], r10d
.text:000000000000448E                 mov     rbx, rdx
.text:0000000000004491
.text:0000000000004491 loc_4491:                               ; CODE XREF: __strftime_internal+1BA7↓j
.text:0000000000004491                 mov     rsi, r12        ; stream
.text:0000000000004494                 mov     edi, 30h ; '0'  ; c
.text:0000000000004499                 add     rbx, 1
.text:000000000000449D                 call    _fputc
.text:00000000000044A2                 cmp     [rsp+4E8h+ptr], rbx
.text:00000000000044A7                 jnz     short loc_4491
.text:00000000000044A9                 jmp     loc_3FEA
.text:00000000000044AE ; ---------------------------------------------------------------------------
.text:00000000000044AE
.text:00000000000044AE loc_44AE:                               ; CODE XREF: __strftime_internal+E85↑j
.text:00000000000044AE                                         ; __strftime_internal+E90↑j
.text:00000000000044AE                 xor     ebp, ebp
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: __strftime_internal+1BC4↓j
.text:00000000000044B0                 mov     rsi, r12        ; stream
.text:00000000000044B3                 mov     edi, 30h ; '0'  ; c
.text:00000000000044B8                 add     rbp, 1
.text:00000000000044BC                 call    _fputc
.text:00000000000044C1                 cmp     r13, rbp
.text:00000000000044C4                 jnz     short loc_44B0
.text:00000000000044C6                 jmp     loc_29FF
.text:00000000000044CB ; ---------------------------------------------------------------------------
.text:00000000000044CB
.text:00000000000044CB loc_44CB:                               ; CODE XREF: __strftime_internal+1848↑j
.text:00000000000044CB                 mov     eax, 1
.text:00000000000044D0                 xor     r13d, r13d
.text:00000000000044D3                 mov     esi, 2
.text:00000000000044D8                 jmp     loc_4047
.text:00000000000044DD ; ---------------------------------------------------------------------------
.text:00000000000044DD
.text:00000000000044DD loc_44DD:                               ; CODE XREF: __strftime_internal+C3E↑j
.text:00000000000044DD                                         ; __strftime_internal+D5B↑j
.text:00000000000044DD                 mov     esi, 2
.text:00000000000044E2                 mov     edx, 63h ; 'c'
.text:00000000000044E7                 jmp     loc_4031
.text:00000000000044EC ; ---------------------------------------------------------------------------
.text:00000000000044EC
.text:00000000000044EC loc_44EC:                               ; CODE XREF: __strftime_internal+CA2↑j
.text:00000000000044EC                 mov     ecx, [rsp+4E8h+arg_10]
.text:00000000000044F3                 jmp     loc_35D7
.text:00000000000044F8 ; ---------------------------------------------------------------------------
.text:00000000000044F8
.text:00000000000044F8 loc_44F8:                               ; CODE XREF: __strftime_internal+D6↑j
.text:00000000000044F8                 call    ___stack_chk_fail
.text:00000000000044FD ; ---------------------------------------------------------------------------
.text:00000000000044FD
.text:00000000000044FD loc_44FD:                               ; CODE XREF: __strftime_internal+182E↑j
.text:00000000000044FD                 add     ecx, 64h ; 'd'
.text:0000000000004500                 cmp     dword ptr [rsp+4E8h+var_4E0], 0
.text:0000000000004505                 jz      loc_4141
.text:000000000000450B                 jmp     loc_3531
.text:0000000000004510 ; ---------------------------------------------------------------------------
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: __strftime_internal+3BD↑j
.text:0000000000004510                 xor     esi, esi
.text:0000000000004512                 jmp     loc_2F0A
.text:0000000000004512 ; } // starts at 2900
.text:0000000000004512 __strftime_internal endp
.text:0000000000004512
.text:0000000000004512 ; ---------------------------------------------------------------------------
.text:0000000000004517                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520
.text:0000000000004520                 public fprintftime
.text:0000000000004520 fprintftime     proc near               ; CODE XREF: print_uptime+196↑p
.text:0000000000004520
.text:0000000000004520 var_11          = qword ptr -11h
.text:0000000000004520
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 sub     rsp, 20h
.text:0000000000004524                 mov     r9d, 0FFFFFFFFh
.text:000000000000452A                 mov     rax, fs:28h
.text:0000000000004533                 mov     [rsp+20h+var_11+1], rax
.text:0000000000004538                 xor     eax, eax
.text:000000000000453A                 mov     byte ptr [rsp+20h+var_11], 0
.text:000000000000453F                 push    r8              ; int
.text:0000000000004541                 xor     r8d, r8d
.text:0000000000004544                 push    rcx             ; __int64
.text:0000000000004545                 xor     ecx, ecx
.text:0000000000004547                 lea     rax, [rsp+30h+var_11]
.text:000000000000454C                 push    rax             ; __int64
.text:000000000000454D                 call    __strftime_internal
.text:0000000000004552                 add     rsp, 20h
.text:0000000000004556                 mov     rdx, [rsp+18h+var_11+1]
.text:000000000000455B                 xor     rdx, fs:28h
.text:0000000000004564                 jnz     short loc_456B
.text:0000000000004566                 add     rsp, 18h
.text:000000000000456A                 retn
.text:000000000000456B ; ---------------------------------------------------------------------------
.text:000000000000456B
.text:000000000000456B loc_456B:                               ; CODE XREF: fprintftime+44↑j
.text:000000000000456B                 call    ___stack_chk_fail
.text:000000000000456B ; } // starts at 4520
.text:000000000000456B fprintftime     endp
.text:000000000000456B
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570
.text:0000000000004570                 public parse_long_options
.text:0000000000004570 parse_long_options proc near
.text:0000000000004570
.text:0000000000004570 var_100         = qword ptr -100h
.text:0000000000004570 var_F8          = dword ptr -0F8h
.text:0000000000004570 var_F4          = dword ptr -0F4h
.text:0000000000004570 var_F0          = qword ptr -0F0h
.text:0000000000004570 var_E8          = qword ptr -0E8h
.text:0000000000004570 var_E0          = qword ptr -0E0h
.text:0000000000004570 var_D8          = byte ptr -0D8h
.text:0000000000004570 var_A8          = xmmword ptr -0A8h
.text:0000000000004570 var_98          = xmmword ptr -98h
.text:0000000000004570 var_88          = xmmword ptr -88h
.text:0000000000004570 var_78          = xmmword ptr -78h
.text:0000000000004570 var_68          = xmmword ptr -68h
.text:0000000000004570 var_58          = xmmword ptr -58h
.text:0000000000004570 var_48          = xmmword ptr -48h
.text:0000000000004570 var_38          = xmmword ptr -38h
.text:0000000000004570 arg_0           = byte ptr  8
.text:0000000000004570
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 push    r13
.text:0000000000004572                 push    r12
.text:0000000000004574                 mov     r13, r8
.text:0000000000004577                 push    rbp
.text:0000000000004578                 push    rbx
.text:0000000000004579                 mov     rbp, rdx
.text:000000000000457C                 mov     r12, rcx
.text:000000000000457F                 sub     rsp, 0E8h
.text:0000000000004586                 test    al, al
.text:0000000000004588                 jz      short loc_45C4
.text:000000000000458A                 movaps  [rsp+108h+var_A8], xmm0
.text:000000000000458F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000004594                 movaps  [rsp+108h+var_88], xmm2
.text:000000000000459C                 movaps  [rsp+108h+var_78], xmm3
.text:00000000000045A4                 movaps  [rsp+108h+var_68], xmm4
.text:00000000000045AC                 movaps  [rsp+108h+var_58], xmm5
.text:00000000000045B4                 movaps  [rsp+108h+var_48], xmm6
.text:00000000000045BC                 movaps  [rsp+108h+var_38], xmm7
.text:00000000000045C4
.text:00000000000045C4 loc_45C4:                               ; CODE XREF: parse_long_options+18↑j
.text:00000000000045C4                 mov     rax, fs:28h
.text:00000000000045CD                 mov     [rsp+108h+var_E0], rax
.text:00000000000045D2                 xor     eax, eax
.text:00000000000045D4                 cmp     edi, 2
.text:00000000000045D7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:00000000000045DD                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:00000000000045E7                 jz      short loc_4620
.text:00000000000045E9
.text:00000000000045E9 loc_45E9:                               ; CODE XREF: parse_long_options+CE↓j
.text:00000000000045E9                                         ; parse_long_options+DD↓j ...
.text:00000000000045E9                 mov     rax, [rsp+108h+var_E0]
.text:00000000000045EE                 xor     rax, fs:28h
.text:00000000000045F7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:00000000000045FD                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000004607                 jnz     loc_46AA
.text:000000000000460D                 add     rsp, 0E8h
.text:0000000000004614                 pop     rbx
.text:0000000000004615                 pop     rbp
.text:0000000000004616                 pop     r12
.text:0000000000004618                 pop     r13
.text:000000000000461A                 retn
.text:000000000000461A ; ---------------------------------------------------------------------------
.text:000000000000461B                 align 20h
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000004620                 lea     rcx, long_options ; longopts
.text:0000000000004627                 lea     rdx, shortopts  ; "+"
.text:000000000000462E                 xor     r8d, r8d        ; longind
.text:0000000000004631                 mov     [rsp+108h+var_100], r9
.text:0000000000004636                 call    _getopt_long
.text:000000000000463B                 cmp     eax, 0FFFFFFFFh
.text:000000000000463E                 jz      short loc_45E9
.text:0000000000004640                 cmp     eax, 68h ; 'h'
.text:0000000000004643                 mov     r9, [rsp+108h+var_100]
.text:0000000000004648                 jz      short loc_46A0
.text:000000000000464A                 cmp     eax, 76h ; 'v'
.text:000000000000464D                 jnz     short loc_45E9
.text:000000000000464F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000004657                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000465E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000004663                 mov     rcx, r13
.text:0000000000004666                 mov     rdx, r12
.text:0000000000004669                 mov     rsi, rbp
.text:000000000000466C                 mov     [rsp+108h+var_F0], rax
.text:0000000000004671                 lea     rax, [rsp+108h+var_D8]
.text:0000000000004676                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:000000000000467E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000004686                 mov     [rsp+108h+var_E8], rax
.text:000000000000468B                 call    version_etc_va
.text:0000000000004690                 xor     edi, edi        ; status
.text:0000000000004692                 call    _exit
.text:0000000000004692 ; ---------------------------------------------------------------------------
.text:0000000000004697                 align 20h
.text:00000000000046A0
.text:00000000000046A0 loc_46A0:                               ; CODE XREF: parse_long_options+D8↑j
.text:00000000000046A0                 xor     edi, edi
.text:00000000000046A2                 call    r9
.text:00000000000046A5                 jmp     loc_45E9
.text:00000000000046AA ; ---------------------------------------------------------------------------
.text:00000000000046AA
.text:00000000000046AA loc_46AA:                               ; CODE XREF: parse_long_options+97↑j
.text:00000000000046AA                 call    ___stack_chk_fail
.text:00000000000046AA ; } // starts at 4570
.text:00000000000046AA parse_long_options endp
.text:00000000000046AA
.text:00000000000046AA ; ---------------------------------------------------------------------------
.text:00000000000046AF                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0
.text:00000000000046B0                 public parse_gnu_standard_options_only
.text:00000000000046B0 parse_gnu_standard_options_only proc near
.text:00000000000046B0                                         ; CODE XREF: main+97↑p
.text:00000000000046B0
.text:00000000000046B0 var_F8          = dword ptr -0F8h
.text:00000000000046B0 var_F4          = dword ptr -0F4h
.text:00000000000046B0 var_F0          = qword ptr -0F0h
.text:00000000000046B0 var_E8          = qword ptr -0E8h
.text:00000000000046B0 var_E0          = qword ptr -0E0h
.text:00000000000046B0 var_D8          = byte ptr -0D8h
.text:00000000000046B0 var_A8          = xmmword ptr -0A8h
.text:00000000000046B0 var_98          = xmmword ptr -98h
.text:00000000000046B0 var_88          = xmmword ptr -88h
.text:00000000000046B0 var_78          = xmmword ptr -78h
.text:00000000000046B0 var_68          = xmmword ptr -68h
.text:00000000000046B0 var_58          = xmmword ptr -58h
.text:00000000000046B0 var_48          = xmmword ptr -48h
.text:00000000000046B0 var_38          = xmmword ptr -38h
.text:00000000000046B0 arg_0           = qword ptr  8
.text:00000000000046B0 arg_8           = byte ptr  10h
.text:00000000000046B0
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 push    r14
.text:00000000000046B2                 push    r13
.text:00000000000046B4                 mov     r14, r8
.text:00000000000046B7                 push    r12
.text:00000000000046B9                 push    rbp
.text:00000000000046BA                 mov     r12, rdx
.text:00000000000046BD                 push    rbx
.text:00000000000046BE                 mov     r13, rcx
.text:00000000000046C1                 sub     rsp, 0D0h
.text:00000000000046C8                 test    al, al
.text:00000000000046CA                 mov     rbp, [rsp+0F8h+arg_0]
.text:00000000000046D2                 jz      short loc_470B
.text:00000000000046D4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:00000000000046D9                 movaps  [rsp+0F8h+var_98], xmm1
.text:00000000000046DE                 movaps  [rsp+0F8h+var_88], xmm2
.text:00000000000046E3                 movaps  [rsp+0F8h+var_78], xmm3
.text:00000000000046EB                 movaps  [rsp+0F8h+var_68], xmm4
.text:00000000000046F3                 movaps  [rsp+0F8h+var_58], xmm5
.text:00000000000046FB                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000004703                 movaps  [rsp+0F8h+var_38], xmm7
.text:000000000000470B
.text:000000000000470B loc_470B:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:000000000000470B                 mov     rax, fs:28h
.text:0000000000004714                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000004719                 xor     eax, eax
.text:000000000000471B                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004722                 lea     rax, shortopts  ; "+"
.text:0000000000004729                 test    r9b, r9b
.text:000000000000472C                 lea     rcx, long_options ; longopts
.text:0000000000004733                 cmovz   rdx, rax        ; shortopts
.text:0000000000004737                 xor     r8d, r8d        ; longind
.text:000000000000473A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000004740                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:000000000000474A                 call    _getopt_long
.text:000000000000474F                 cmp     eax, 0FFFFFFFFh
.text:0000000000004752                 jz      short loc_47B8
.text:0000000000004754                 cmp     eax, 68h ; 'h'
.text:0000000000004757                 jz      loc_47E0
.text:000000000000475D                 cmp     eax, 76h ; 'v'
.text:0000000000004760                 jnz     short loc_47B0
.text:0000000000004762                 lea     rax, [rsp+0F8h+arg_8]
.text:000000000000476A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000004771                 mov     r8, rsp
.text:0000000000004774                 mov     rcx, r14
.text:0000000000004777                 mov     rdx, r13
.text:000000000000477A                 mov     rsi, r12
.text:000000000000477D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000004782                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000004787                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:000000000000478E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000004796                 mov     [rsp+0F8h+var_E8], rax
.text:000000000000479B                 call    version_etc_va
.text:00000000000047A0                 xor     edi, edi        ; status
.text:00000000000047A2                 call    _exit
.text:00000000000047A2 ; ---------------------------------------------------------------------------
.text:00000000000047A7                 align 10h
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:00000000000047B0                 mov     edi, cs:exit_failure
.text:00000000000047B6                 call    rbp
.text:00000000000047B8
.text:00000000000047B8 loc_47B8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:00000000000047B8                                         ; parse_gnu_standard_options_only+134↓j
.text:00000000000047B8                 mov     rax, [rsp+0F8h+var_E0]
.text:00000000000047BD                 xor     rax, fs:28h
.text:00000000000047C6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:00000000000047CC                 jnz     short loc_47E6
.text:00000000000047CE                 add     rsp, 0D0h
.text:00000000000047D5                 pop     rbx
.text:00000000000047D6                 pop     rbp
.text:00000000000047D7                 pop     r12
.text:00000000000047D9                 pop     r13
.text:00000000000047DB                 pop     r14
.text:00000000000047DD                 retn
.text:00000000000047DD ; ---------------------------------------------------------------------------
.text:00000000000047DE                 align 20h
.text:00000000000047E0
.text:00000000000047E0 loc_47E0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:00000000000047E0                 xor     edi, edi
.text:00000000000047E2                 call    rbp
.text:00000000000047E4                 jmp     short loc_47B8
.text:00000000000047E6 ; ---------------------------------------------------------------------------
.text:00000000000047E6
.text:00000000000047E6 loc_47E6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:00000000000047E6                 call    ___stack_chk_fail
.text:00000000000047E6 ; } // starts at 46B0
.text:00000000000047E6 parse_gnu_standard_options_only endp
.text:00000000000047E6
.text:00000000000047E6 ; ---------------------------------------------------------------------------
.text:00000000000047EB                 align 10h
.text:00000000000047F0
.text:00000000000047F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047F0
.text:00000000000047F0
.text:00000000000047F0                 public set_program_name
.text:00000000000047F0 set_program_name proc near              ; CODE XREF: main+E↑p
.text:00000000000047F0 ; __unwind {
.text:00000000000047F0                 test    rdi, rdi
.text:00000000000047F3                 push    rbx
.text:00000000000047F4                 jz      short loc_486D
.text:00000000000047F6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000047FB                 mov     rbx, rdi
.text:00000000000047FE                 call    _strrchr
.text:0000000000004803                 test    rax, rax
.text:0000000000004806                 jz      short loc_485D
.text:0000000000004808                 lea     r8, [rax+1]
.text:000000000000480C                 mov     rdx, r8
.text:000000000000480F                 sub     rdx, rbx
.text:0000000000004812                 cmp     rdx, 6
.text:0000000000004816                 jle     short loc_485D
.text:0000000000004818                 lea     rsi, [rax-6]
.text:000000000000481C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000004823                 mov     ecx, 7
.text:0000000000004828                 repe cmpsb
.text:000000000000482A                 setnbe  dl
.text:000000000000482D                 sbb     dl, 0
.text:0000000000004830                 test    dl, dl
.text:0000000000004832                 jnz     short loc_485D
.text:0000000000004834                 lea     rdi, aLt        ; "lt-"
.text:000000000000483B                 mov     ecx, 3
.text:0000000000004840                 mov     rsi, r8
.text:0000000000004843                 mov     rbx, r8
.text:0000000000004846                 repe cmpsb
.text:0000000000004848                 setnbe  dl
.text:000000000000484B                 sbb     dl, 0
.text:000000000000484E                 test    dl, dl
.text:0000000000004850                 jnz     short loc_485D
.text:0000000000004852                 lea     rbx, [rax+4]
.text:0000000000004856                 mov     cs:__bss_start, rbx
.text:000000000000485D
.text:000000000000485D loc_485D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000485D                                         ; set_program_name+26↑j ...
.text:000000000000485D                 mov     cs:program_name, rbx
.text:0000000000004864                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000486B                 pop     rbx
.text:000000000000486C                 retn
.text:000000000000486D ; ---------------------------------------------------------------------------
.text:000000000000486D
.text:000000000000486D loc_486D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000486D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000004874                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000487B                 mov     edx, 37h ; '7'  ; n
.text:0000000000004880                 mov     esi, 1          ; size
.text:0000000000004885                 call    _fwrite
.text:000000000000488A                 call    _abort
.text:000000000000488A ; } // starts at 47F0
.text:000000000000488A set_program_name endp
.text:000000000000488A
.text:000000000000488A ; ---------------------------------------------------------------------------
.text:000000000000488F                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890 ; Attributes: info_from_lumina
.text:0000000000004890
.text:0000000000004890 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000004890 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000004890                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 push    rbp
.text:0000000000004891                 push    rbx
.text:0000000000004892                 mov     rbp, rdi
.text:0000000000004895                 mov     ebx, esi
.text:0000000000004897                 sub     rsp, 8
.text:000000000000489B                 call    locale_charset
.text:00000000000048A0                 movzx   edx, byte ptr [rax]
.text:00000000000048A3                 and     edx, 0FFFFFFDFh
.text:00000000000048A6                 cmp     dl, 55h ; 'U'
.text:00000000000048A9                 jz      short loc_4920
.text:00000000000048AB                 cmp     dl, 47h ; 'G'
.text:00000000000048AE                 jz      short loc_48D0
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000048B0                                         ; gettext_quote+50↓j ...
.text:00000000000048B0                 lea     rax, unk_7FE3
.text:00000000000048B7                 lea     rdx, asc_7FE5   ; "'"
.text:00000000000048BE                 cmp     ebx, 9
.text:00000000000048C1                 cmovnz  rax, rdx
.text:00000000000048C5                 add     rsp, 8
.text:00000000000048C9                 pop     rbx
.text:00000000000048CA                 pop     rbp
.text:00000000000048CB                 retn
.text:00000000000048CB ; ---------------------------------------------------------------------------
.text:00000000000048CC                 align 10h
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000048D0                 movzx   edx, byte ptr [rax+1]
.text:00000000000048D4                 and     edx, 0FFFFFFDFh
.text:00000000000048D7                 cmp     dl, 42h ; 'B'
.text:00000000000048DA                 jnz     short loc_48B0
.text:00000000000048DC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000048E0                 jnz     short loc_48B0
.text:00000000000048E2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000048E6                 jnz     short loc_48B0
.text:00000000000048E8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000048EC                 jnz     short loc_48B0
.text:00000000000048EE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000048F2                 jnz     short loc_48B0
.text:00000000000048F4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000048F8                 jnz     short loc_48B0
.text:00000000000048FA                 cmp     byte ptr [rax+7], 0
.text:00000000000048FE                 jnz     short loc_48B0
.text:0000000000004900                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004904                 lea     rax, unk_7FDC
.text:000000000000490B                 lea     rdx, unk_7FE0
.text:0000000000004912                 cmovnz  rax, rdx
.text:0000000000004916                 add     rsp, 8
.text:000000000000491A                 pop     rbx
.text:000000000000491B                 pop     rbp
.text:000000000000491C                 retn
.text:000000000000491C ; ---------------------------------------------------------------------------
.text:000000000000491D                 align 20h
.text:0000000000004920
.text:0000000000004920 loc_4920:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000004920                 movzx   edx, byte ptr [rax+1]
.text:0000000000004924                 and     edx, 0FFFFFFDFh
.text:0000000000004927                 cmp     dl, 54h ; 'T'
.text:000000000000492A                 jnz     short loc_48B0
.text:000000000000492C                 movzx   edx, byte ptr [rax+2]
.text:0000000000004930                 and     edx, 0FFFFFFDFh
.text:0000000000004933                 cmp     dl, 46h ; 'F'
.text:0000000000004936                 jnz     loc_48B0
.text:000000000000493C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000004940                 jnz     loc_48B0
.text:0000000000004946                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000494A                 jnz     loc_48B0
.text:0000000000004950                 cmp     byte ptr [rax+5], 0
.text:0000000000004954                 jnz     loc_48B0
.text:000000000000495A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000495E                 lea     rax, unk_7FD4
.text:0000000000004965                 lea     rdx, unk_7FD8
.text:000000000000496C                 cmovnz  rax, rdx
.text:0000000000004970                 add     rsp, 8
.text:0000000000004974                 pop     rbx
.text:0000000000004975                 pop     rbp
.text:0000000000004976                 retn
.text:0000000000004976 ; } // starts at 4890
.text:0000000000004976 gettext_quote   endp
.text:0000000000004976
.text:0000000000004976 ; ---------------------------------------------------------------------------
.text:0000000000004977                 align 20h
.text:0000000000004980
.text:0000000000004980 ; =============== S U B R O U T I N E =======================================
.text:0000000000004980
.text:0000000000004980 ; Attributes: info_from_lumina
.text:0000000000004980
.text:0000000000004980 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000004980 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000004980                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000004980
.text:0000000000004980 var_E0          = dword ptr -0E0h
.text:0000000000004980 var_DB          = byte ptr -0DBh
.text:0000000000004980 var_DA          = byte ptr -0DAh
.text:0000000000004980 var_D9          = byte ptr -0D9h
.text:0000000000004980 s               = qword ptr -0D8h
.text:0000000000004980 n               = qword ptr -0D0h
.text:0000000000004980 var_C8          = qword ptr -0C8h
.text:0000000000004980 ps              = qword ptr -0C0h
.text:0000000000004980 var_B8          = qword ptr -0B8h
.text:0000000000004980 var_B0          = qword ptr -0B0h
.text:0000000000004980 var_A8          = qword ptr -0A8h
.text:0000000000004980 s2              = qword ptr -0A0h
.text:0000000000004980 var_98          = qword ptr -98h
.text:0000000000004980 var_90          = qword ptr -90h
.text:0000000000004980 var_88          = qword ptr -88h
.text:0000000000004980 var_80          = qword ptr -80h
.text:0000000000004980 var_78          = qword ptr -78h
.text:0000000000004980 var_70          = dword ptr -70h
.text:0000000000004980 var_6C          = byte ptr -6Ch
.text:0000000000004980 var_6B          = byte ptr -6Bh
.text:0000000000004980 var_6A          = byte ptr -6Ah
.text:0000000000004980 var_69          = byte ptr -69h
.text:0000000000004980 var_68          = qword ptr -68h
.text:0000000000004980 var_60          = qword ptr -60h
.text:0000000000004980 wc              = dword ptr -4Ch
.text:0000000000004980 var_48          = qword ptr -48h
.text:0000000000004980 var_40          = qword ptr -40h
.text:0000000000004980 arg_0           = qword ptr  8
.text:0000000000004980 arg_8           = qword ptr  10h
.text:0000000000004980 arg_10          = qword ptr  18h
.text:0000000000004980
.text:0000000000004980 ; __unwind {
.text:0000000000004980                 push    r15
.text:0000000000004982                 push    r14
.text:0000000000004984                 mov     r15d, r8d
.text:0000000000004987                 push    r13
.text:0000000000004989                 push    r12
.text:000000000000498B                 mov     r14, rdi
.text:000000000000498E                 push    rbp
.text:000000000000498F                 push    rbx
.text:0000000000004990                 mov     ebx, r9d
.text:0000000000004993                 mov     r13, rsi
.text:0000000000004996                 mov     rbp, rcx
.text:0000000000004999                 and     ebx, 2
.text:000000000000499C                 sub     rsp, 0B8h
.text:00000000000049A3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000049AB                 mov     [rsp+0E8h+s], rdx
.text:00000000000049B0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000049B5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000049BA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000049BF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000049C7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000049CC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000049D4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000049D9                 mov     rax, fs:28h
.text:00000000000049E2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000049EA                 xor     eax, eax
.text:00000000000049EC                 call    ___ctype_get_mb_cur_max
.text:00000000000049F1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000049F5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000049FA                 ja      def_4A11        ; jumptable 00000000000121F1 default case
.text:0000000000004A00                 lea     rcx, jpt_4A11
.text:0000000000004A07                 mov     edx, r15d
.text:0000000000004A0A                 movsxd  rax, ds:(jpt_4A11 - 8040h)[rcx+rdx*4]
.text:0000000000004A0E                 add     rax, rcx
.text:0000000000004A11                 jmp     rax             ; switch jump
.text:0000000000004A13 ; ---------------------------------------------------------------------------
.text:0000000000004A13
.text:0000000000004A13 loc_4A13:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004A13                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004A13                                         ; DATA XREF: ...
.text:0000000000004A13                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004A18                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A1D                 xor     r12d, r12d
.text:0000000000004A20                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004A29                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004A2E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004A33
.text:0000000000004A33 loc_4A33:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000004A33                 lea     rax, asc_7FE5   ; "'"
.text:0000000000004A3A                 mov     [rsp+0E8h+n], 1
.text:0000000000004A43                 xor     r15d, r15d
.text:0000000000004A46                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004A4E                 mov     [rsp+0E8h+s2], rax
.text:0000000000004A53
.text:0000000000004A53 loc_4A53:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000004A53                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000004A53                 xor     r11d, r11d
.text:0000000000004A56                 mov     rax, rbp
.text:0000000000004A59                 mov     r8d, r12d
.text:0000000000004A5C                 mov     rbp, r11
.text:0000000000004A5F                 mov     r11, rax
.text:0000000000004A62                 nop     word ptr [rax+rax+00h]
.text:0000000000004A68
.text:0000000000004A68 loc_4A68:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000004A68                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000004A68                 cmp     r11, rbp
.text:0000000000004A6B                 setnz   r12b
.text:0000000000004A6F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A73                 jnz     short loc_4A82
.text:0000000000004A75                 mov     rax, [rsp+0E8h+s]
.text:0000000000004A7A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000004A7E                 setnz   r12b
.text:0000000000004A82
.text:0000000000004A82 loc_4A82:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000004A82                 test    r12b, r12b
.text:0000000000004A85                 jz      loc_50E0
.text:0000000000004A8B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A90                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004A95                 lea     r9, [rdi+rbp]
.text:0000000000004A99                 setnz   al
.text:0000000000004A9C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004AA0                 mov     r10d, eax
.text:0000000000004AA3                 jz      loc_4B50
.text:0000000000004AA9                 mov     rax, [rsp+0E8h+n]
.text:0000000000004AAE                 test    rax, rax
.text:0000000000004AB1                 jz      loc_4EE0
.text:0000000000004AB7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004ABB                 lea     rbx, [rbp+rax+0]
.text:0000000000004AC0                 jnz     short loc_4AF0
.text:0000000000004AC2                 cmp     rax, 1
.text:0000000000004AC6                 jbe     short loc_4AF0
.text:0000000000004AC8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004ACD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004AD2                 mov     [rsp+0E8h+ps], r9
.text:0000000000004AD7                 call    _strlen
.text:0000000000004ADC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004AE2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004AE8                 mov     r11, rax
.text:0000000000004AEB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004AF0
.text:0000000000004AF0 loc_4AF0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004AF0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004AF0                 cmp     rbx, r11
.text:0000000000004AF3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004AF8                 ja      loc_50B0
.text:0000000000004AFE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004B03                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004B08                 mov     rdi, r9         ; s1
.text:0000000000004B0B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004B10                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004B15                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004B1A                 call    _memcmp
.text:0000000000004B1F                 test    eax, eax
.text:0000000000004B21                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004B26                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004B2C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000004B31                 jnz     loc_50B0
.text:0000000000004B37                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004B3C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004B42                 jnz     loc_5AC5
.text:0000000000004B48                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004B50
.text:0000000000004B50 loc_4B50:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000004B50                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000004B50                 movzx   ebx, byte ptr [r9]
.text:0000000000004B54                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004B57                 ja      def_4B6E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000004B5D                 lea     rcx, jpt_4B6E
.text:0000000000004B64                 movzx   edx, bl
.text:0000000000004B67                 movsxd  rax, ds:(jpt_4B6E - 806Ch)[rcx+rdx*4]
.text:0000000000004B6B                 add     rax, rcx
.text:0000000000004B6E                 jmp     rax             ; switch jump
.text:0000000000004B70 ; ---------------------------------------------------------------------------
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004B70                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004B70                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000004B73
.text:0000000000004B73 loc_4B73:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B73                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004B73                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000004B77                 setnz   al
.text:0000000000004B7A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B7E                 jnz     short loc_4B8C
.text:0000000000004B80                 mov     rax, [rsp+0E8h+s]
.text:0000000000004B85                 cmp     byte ptr [rax+1], 0
.text:0000000000004B89                 setnz   al
.text:0000000000004B8C
.text:0000000000004B8C loc_4B8C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000004B8C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004B91                 setz    dl
.text:0000000000004B94                 test    al, al
.text:0000000000004B96                 jz      loc_4DE8
.text:0000000000004B9C
.text:0000000000004B9C loc_4B9C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000004B9C                 xor     r12d, r12d
.text:0000000000004B9F                 xor     eax, eax
.text:0000000000004BA1                 nop     dword ptr [rax+00000000h]
.text:0000000000004BA8
.text:0000000000004BA8 loc_4BA8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000004BA8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000004BA8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000004BAD                 jnz     loc_4CC2
.text:0000000000004BB3                 test    dl, dl
.text:0000000000004BB5                 jnz     loc_4CC2
.text:0000000000004BBB
.text:0000000000004BBB loc_4BBB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000004BBB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004BC0                 test    rsi, rsi
.text:0000000000004BC3                 jz      short loc_4BD9
.text:0000000000004BC5                 mov     edx, ebx
.text:0000000000004BC7                 shr     dl, 5
.text:0000000000004BCA                 movzx   edx, dl
.text:0000000000004BCD                 mov     edx, [rsi+rdx*4]
.text:0000000000004BD0                 bt      edx, ebx
.text:0000000000004BD3                 jb      loc_4D23
.text:0000000000004BD9
.text:0000000000004BD9 loc_4BD9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004BD9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004BD9                 test    r10b, r10b
.text:0000000000004BDC                 jnz     loc_4D23
.text:0000000000004BE2                 xor     eax, 1
.text:0000000000004BE5                 add     rbp, 1
.text:0000000000004BE9                 and     eax, r8d
.text:0000000000004BEC
.text:0000000000004BEC loc_4BEC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000004BEC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000004BEC                 test    al, al
.text:0000000000004BEE                 jz      short loc_4C10
.text:0000000000004BF0                 cmp     r13, r15
.text:0000000000004BF3                 jbe     short loc_4BFA
.text:0000000000004BF5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004BFA
.text:0000000000004BFA loc_4BFA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000004BFA                 lea     rax, [r15+1]
.text:0000000000004BFE                 cmp     r13, rax
.text:0000000000004C01                 jbe     short loc_4C09
.text:0000000000004C03                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004C09
.text:0000000000004C09 loc_4C09:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004C09                 add     r15, 2
.text:0000000000004C0D                 xor     r8d, r8d
.text:0000000000004C10
.text:0000000000004C10 loc_4C10:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004C10                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004C10                 cmp     r15, r13
.text:0000000000004C13                 jnb     short loc_4C19
.text:0000000000004C15                 mov     [r14+r15], bl
.text:0000000000004C19
.text:0000000000004C19 loc_4C19:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004C19                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000004C1E                 add     r15, 1
.text:0000000000004C22                 mov     eax, 0
.text:0000000000004C27                 test    r12b, r12b
.text:0000000000004C2A                 cmovz   edi, eax
.text:0000000000004C2D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000004C32                 jmp     loc_4A68
.text:0000000000004C32 ; ---------------------------------------------------------------------------
.text:0000000000004C37                 align 20h
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004C40                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004C40                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000004C43
.text:0000000000004C43 loc_4C43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004C43                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004C43                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000004C47                 cmp     eax, 2
.text:0000000000004C4A                 jz      loc_5208
.text:0000000000004C50                 cmp     eax, 5
.text:0000000000004C53                 jz      loc_51C8
.text:0000000000004C59                 cmp     eax, 2
.text:0000000000004C5C                 mov     ebx, 3Fh ; '?'
.text:0000000000004C61                 setz    dl
.text:0000000000004C64                 xor     r12d, r12d
.text:0000000000004C67                 xor     eax, eax
.text:0000000000004C69                 jmp     loc_4BA8
.text:0000000000004C69 ; ---------------------------------------------------------------------------
.text:0000000000004C6E                 align 10h
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004C70                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004C70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000004C73
.text:0000000000004C73 loc_4C73:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004C73                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004C73                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000004C78                 jz      loc_5180
.text:0000000000004C7E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004C83                 xor     edx, edx
.text:0000000000004C85                 xor     eax, eax
.text:0000000000004C87                 mov     ebx, 27h ; '''
.text:0000000000004C8C                 jmp     loc_4BA8
.text:0000000000004C8C ; ---------------------------------------------------------------------------
.text:0000000000004C91                 align 8
.text:0000000000004C98
.text:0000000000004C98 loc_4C98:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004C98                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004C98                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000004C9D                 mov     ebx, 74h ; 't'
.text:0000000000004CA2
.text:0000000000004CA2 loc_4CA2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000004CA2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000004CA2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004CA7                 setz    al
.text:0000000000004CAA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004CAE                 jnz     loc_4DFE
.text:0000000000004CB4
.text:0000000000004CB4 loc_4CB4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004CB4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004CB4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004CB9                 jnz     short loc_4D20
.text:0000000000004CBB
.text:0000000000004CBB loc_4CBB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000004CBB                 mov     ebx, edx
.text:0000000000004CBD                 xor     r12d, r12d
.text:0000000000004CC0                 xor     eax, eax
.text:0000000000004CC2
.text:0000000000004CC2 loc_4CC2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004CC2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004CC2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004CC7                 jnz     loc_4BBB
.text:0000000000004CCD                 jmp     loc_4BD9
.text:0000000000004CCD ; ---------------------------------------------------------------------------
.text:0000000000004CD2                 align 8
.text:0000000000004CD8
.text:0000000000004CD8 loc_4CD8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004CD8                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004CD8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000004CDD                 mov     ebx, 62h ; 'b'
.text:0000000000004CE2                 jmp     short loc_4CB4
.text:0000000000004CE2 ; ---------------------------------------------------------------------------
.text:0000000000004CE4                 align 8
.text:0000000000004CE8
.text:0000000000004CE8 loc_4CE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004CE8                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004CE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000004CED                 jz      loc_50C0
.text:0000000000004CF3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004CF8                 jz      loc_4F10
.text:0000000000004CFE
.text:0000000000004CFE loc_4CFE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000004CFE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004D03                 jz      loc_4F10
.text:0000000000004D09                 cmp     [rsp+0E8h+n], 0
.text:0000000000004D0F                 jnz     loc_50CB
.text:0000000000004D15                 mov     ebx, 5Ch ; '\'
.text:0000000000004D1A                 nop     word ptr [rax+rax+00h]
.text:0000000000004D20
.text:0000000000004D20 loc_4D20:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004D20                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004D20                 xor     r12d, r12d
.text:0000000000004D23
.text:0000000000004D23 loc_4D23:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004D23                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004D23                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004D28                 setz    dl
.text:0000000000004D2B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004D30                 mov     eax, edx
.text:0000000000004D32                 jnz     loc_5588
.text:0000000000004D38                 mov     eax, r8d
.text:0000000000004D3B                 xor     eax, 1
.text:0000000000004D3E                 and     al, dl
.text:0000000000004D40                 jz      short loc_4D71
.text:0000000000004D42                 cmp     r13, r15
.text:0000000000004D45                 jbe     short loc_4D4C
.text:0000000000004D47                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004D4C
.text:0000000000004D4C loc_4D4C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000004D4C                 lea     rdx, [r15+1]
.text:0000000000004D50                 cmp     r13, rdx
.text:0000000000004D53                 jbe     short loc_4D5B
.text:0000000000004D55                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004D5B
.text:0000000000004D5B loc_4D5B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000004D5B                 lea     rdx, [r15+2]
.text:0000000000004D5F                 cmp     r13, rdx
.text:0000000000004D62                 jbe     short loc_4D6A
.text:0000000000004D64                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004D6A
.text:0000000000004D6A loc_4D6A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000004D6A                 add     r15, 3
.text:0000000000004D6E                 mov     r8d, eax
.text:0000000000004D71
.text:0000000000004D71 loc_4D71:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000004D71                 cmp     r13, r15
.text:0000000000004D74                 jbe     short loc_4D7B
.text:0000000000004D76                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004D7B
.text:0000000000004D7B loc_4D7B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000004D7B                 add     r15, 1
.text:0000000000004D7F                 add     rbp, 1
.text:0000000000004D83                 jmp     loc_4C10
.text:0000000000004D83 ; ---------------------------------------------------------------------------
.text:0000000000004D88                 align 10h
.text:0000000000004D90
.text:0000000000004D90 loc_4D90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004D90                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004D90                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004D95                 jnz     loc_4F63
.text:0000000000004D9B                 xor     edx, edx
.text:0000000000004D9D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004DA2                 jz      loc_4CBB
.text:0000000000004DA8                 add     rbp, 1
.text:0000000000004DAC                 jmp     loc_4A68
.text:0000000000004DAC ; ---------------------------------------------------------------------------
.text:0000000000004DB1                 align 8
.text:0000000000004DB8
.text:0000000000004DB8 loc_4DB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DB8                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004DB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000004DBD                 setz    dl
.text:0000000000004DC0                 xor     eax, eax
.text:0000000000004DC2                 jmp     loc_4BA8
.text:0000000000004DC2 ; ---------------------------------------------------------------------------
.text:0000000000004DC7                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 loc_4DD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DD0                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004DD0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004DD5                 mov     ebx, 61h ; 'a'
.text:0000000000004DDA                 jmp     loc_4CB4
.text:0000000000004DDA ; ---------------------------------------------------------------------------
.text:0000000000004DDF                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DE0                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004DE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004DE5                 setz    dl
.text:0000000000004DE8
.text:0000000000004DE8 loc_4DE8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004DE8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004DE8                 test    rbp, rbp
.text:0000000000004DEB                 jnz     loc_4B9C
.text:0000000000004DF1
.text:0000000000004DF1 loc_4DF1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004DF1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004DF1                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004DF6                 and     al, dl
.text:0000000000004DF8                 jz      loc_4BA8
.text:0000000000004DFE
.text:0000000000004DFE loc_4DFE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000004DFE                 mov     rbp, r11
.text:0000000000004E01                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004E09                 jmp     loc_5509
.text:0000000000004E09 ; ---------------------------------------------------------------------------
.text:0000000000004E0E                 align 10h
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004E10                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004E10                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004E15                 setz    dl
.text:0000000000004E18                 xor     r12d, r12d
.text:0000000000004E1B                 jmp     short loc_4DF1
.text:0000000000004E1B ; ---------------------------------------------------------------------------
.text:0000000000004E1D                 align 20h
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004E20                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004E20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004E25                 mov     ebx, 20h ; ' '
.text:0000000000004E2A                 setz    dl
.text:0000000000004E2D                 jmp     short loc_4DF1
.text:0000000000004E2D ; ---------------------------------------------------------------------------
.text:0000000000004E2F                 align 10h
.text:0000000000004E30
.text:0000000000004E30 loc_4E30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004E30                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004E30                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004E35                 mov     ebx, 72h ; 'r'
.text:0000000000004E3A                 jmp     loc_4CA2
.text:0000000000004E3A ; ---------------------------------------------------------------------------
.text:0000000000004E3F                 align 20h
.text:0000000000004E40
.text:0000000000004E40 loc_4E40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004E40                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004E40                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004E45                 mov     ebx, 66h ; 'f'
.text:0000000000004E4A                 jmp     loc_4CB4
.text:0000000000004E4A ; ---------------------------------------------------------------------------
.text:0000000000004E4F                 align 10h
.text:0000000000004E50
.text:0000000000004E50 loc_4E50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004E50                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004E50                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004E55                 mov     ebx, 76h ; 'v'
.text:0000000000004E5A                 jmp     loc_4CB4
.text:0000000000004E5A ; ---------------------------------------------------------------------------
.text:0000000000004E5F                 align 20h
.text:0000000000004E60
.text:0000000000004E60 loc_4E60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004E60                                         ; DATA XREF: .rodata:jpt_4B6E↓o
.text:0000000000004E60                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000004E65                 mov     ebx, 6Eh ; 'n'
.text:0000000000004E6A                 jmp     loc_4CA2
.text:0000000000004E6A ; ---------------------------------------------------------------------------
.text:0000000000004E6F                 align 10h
.text:0000000000004E70
.text:0000000000004E70 def_4EFA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004E70                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004E70                                         ; DATA XREF: ...
.text:0000000000004E70                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004E73                 nop     dword ptr [rax+rax+00h]
.text:0000000000004E78
.text:0000000000004E78 def_4B6E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004E78                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004E78                                         ; DATA XREF: ...
.text:0000000000004E78                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000004E7E                 jnz     loc_5228
.text:0000000000004E84                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000004E89                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000004E8E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004E93                 call    ___ctype_b_loc
.text:0000000000004E98                 mov     rcx, [rax]
.text:0000000000004E9B                 movzx   edx, bl
.text:0000000000004E9E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004EA4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004EAA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000004EAF                 mov     edi, 1
.text:0000000000004EB4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004EB8                 and     ax, 4000h
.text:0000000000004EBC                 setnz   r12b
.text:0000000000004EC0                 setz    al
.text:0000000000004EC3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004EC7
.text:0000000000004EC7 loc_4EC7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004EC7                 test    al, al
.text:0000000000004EC9                 jnz     loc_5861
.text:0000000000004ECF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004ED4                 setz    dl
.text:0000000000004ED7                 jmp     loc_4BA8
.text:0000000000004ED7 ; ---------------------------------------------------------------------------
.text:0000000000004EDC                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004EE0                 movzx   ebx, byte ptr [r9]
.text:0000000000004EE4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004EE7                 ja      short def_4EFA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004EE9                 lea     rcx, jpt_4EFA
.text:0000000000004EF0                 movzx   edx, bl
.text:0000000000004EF3                 movsxd  rax, ds:(jpt_4EFA - 8268h)[rcx+rdx*4]
.text:0000000000004EF7                 add     rax, rcx
.text:0000000000004EFA                 jmp     rax             ; switch jump
.text:0000000000004EFA ; ---------------------------------------------------------------------------
.text:0000000000004EFC                 align 20h
.text:0000000000004F00
.text:0000000000004F00 loc_4F00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004F00                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004F00                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004F03                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004F08                 jnz     loc_4CFE
.text:0000000000004F0E                 xchg    ax, ax
.text:0000000000004F10
.text:0000000000004F10 loc_4F10:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004F10                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004F10                 mov     edx, 5Ch ; '\'
.text:0000000000004F15                 mov     ebx, 5Ch ; '\'
.text:0000000000004F1A                 jmp     loc_4CB4
.text:0000000000004F1A ; ---------------------------------------------------------------------------
.text:0000000000004F1F                 align 20h
.text:0000000000004F20
.text:0000000000004F20 loc_4F20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004F20                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004F20                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004F25                 xor     r10d, r10d
.text:0000000000004F28                 mov     ebx, 66h ; 'f'
.text:0000000000004F2D                 jmp     loc_4CB4
.text:0000000000004F2D ; ---------------------------------------------------------------------------
.text:0000000000004F32                 align 8
.text:0000000000004F38
.text:0000000000004F38 loc_4F38:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004F38                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004F38                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000004F3D                 xor     r10d, r10d
.text:0000000000004F40                 mov     ebx, 6Eh ; 'n'
.text:0000000000004F45                 jmp     loc_4CA2
.text:0000000000004F45 ; ---------------------------------------------------------------------------
.text:0000000000004F4A                 align 10h
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004F50                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004F50                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004F55                 jmp     loc_4D20
.text:0000000000004F55 ; ---------------------------------------------------------------------------
.text:0000000000004F5A                 align 20h
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004F60                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000004F60                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004F63
.text:0000000000004F63 loc_4F63:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004F63                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004F68                 setz    dl
.text:0000000000004F6B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004F70                 jnz     loc_5B0A
.text:0000000000004F76                 mov     eax, r8d
.text:0000000000004F79                 mov     rcx, r15
.text:0000000000004F7C                 xor     eax, 1
.text:0000000000004F7F                 and     al, dl
.text:0000000000004F81                 jz      short loc_4FB0
.text:0000000000004F83                 cmp     r13, r15
.text:0000000000004F86                 jbe     short loc_4F8D
.text:0000000000004F88                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004F8D
.text:0000000000004F8D loc_4F8D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000004F8D                 lea     rcx, [r15+1]
.text:0000000000004F91                 cmp     r13, rcx
.text:0000000000004F94                 jbe     short loc_4F9C
.text:0000000000004F96                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004F9C
.text:0000000000004F9C loc_4F9C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000004F9C                 lea     rcx, [r15+2]
.text:0000000000004FA0                 cmp     r13, rcx
.text:0000000000004FA3                 ja      loc_55D9
.text:0000000000004FA9
.text:0000000000004FA9 loc_4FA9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004FA9                 lea     rcx, [r15+3]
.text:0000000000004FAD                 mov     r8d, eax
.text:0000000000004FB0
.text:0000000000004FB0 loc_4FB0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004FB0                 cmp     r13, rcx
.text:0000000000004FB3                 jbe     short loc_4FBA
.text:0000000000004FB5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000004FBA
.text:0000000000004FBA loc_4FBA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000004FBA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004FBF                 lea     r15, [rcx+1]
.text:0000000000004FC3                 jz      loc_55C9
.text:0000000000004FC9                 lea     rax, [rbp+1]
.text:0000000000004FCD                 cmp     rax, r11
.text:0000000000004FD0                 jnb     short loc_4FEB
.text:0000000000004FD2                 mov     rax, [rsp+0E8h+s]
.text:0000000000004FD7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000004FDC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004FE0                 sub     eax, 30h ; '0'
.text:0000000000004FE3                 cmp     al, 9
.text:0000000000004FE5                 jbe     loc_5819
.text:0000000000004FEB
.text:0000000000004FEB loc_4FEB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000004FEB                 mov     eax, r12d
.text:0000000000004FEE                 mov     ebx, 30h ; '0'
.text:0000000000004FF3                 xor     r12d, r12d
.text:0000000000004FF6                 jmp     loc_4BA8
.text:0000000000004FF6 ; ---------------------------------------------------------------------------
.text:0000000000004FFB                 align 20h
.text:0000000000005000
.text:0000000000005000 loc_5000:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005000                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000005000                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000005005                 mov     r12d, r10d
.text:0000000000005008                 setz    dl
.text:000000000000500B                 xor     r10d, r10d
.text:000000000000500E                 xor     eax, eax
.text:0000000000005010                 jmp     loc_4BA8
.text:0000000000005010 ; ---------------------------------------------------------------------------
.text:0000000000005015                 align 8
.text:0000000000005018
.text:0000000000005018 loc_5018:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005018                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000005018                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000501D                 setz    dl
.text:0000000000005020                 xor     r10d, r10d
.text:0000000000005023                 jmp     loc_4DE8
.text:0000000000005023 ; ---------------------------------------------------------------------------
.text:0000000000005028                 align 10h
.text:0000000000005030
.text:0000000000005030 loc_5030:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005030                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000005030                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000005035                 setz    dl
.text:0000000000005038                 xor     r10d, r10d
.text:000000000000503B                 xor     r12d, r12d
.text:000000000000503E                 jmp     loc_4DF1
.text:000000000000503E ; ---------------------------------------------------------------------------
.text:0000000000005043                 align 8
.text:0000000000005048
.text:0000000000005048 loc_5048:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005048                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000005048                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000504D                 mov     r12d, r10d
.text:0000000000005050                 mov     ebx, 20h ; ' '
.text:0000000000005055                 setz    dl
.text:0000000000005058                 xor     r10d, r10d
.text:000000000000505B                 jmp     loc_4DF1
.text:0000000000005060 ; ---------------------------------------------------------------------------
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005060                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000005060                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000005065                 xor     r10d, r10d
.text:0000000000005068                 mov     ebx, 72h ; 'r'
.text:000000000000506D                 jmp     loc_4CA2
.text:000000000000506D ; ---------------------------------------------------------------------------
.text:0000000000005072                 align 8
.text:0000000000005078
.text:0000000000005078 loc_5078:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005078                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000005078                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000507D                 jmp     loc_4D20
.text:000000000000507D ; ---------------------------------------------------------------------------
.text:0000000000005082                 align 8
.text:0000000000005088
.text:0000000000005088 loc_5088:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005088                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:0000000000005088                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000508D                 xor     r10d, r10d
.text:0000000000005090                 mov     ebx, 74h ; 't'
.text:0000000000005095                 jmp     loc_4CA2
.text:0000000000005095 ; ---------------------------------------------------------------------------
.text:000000000000509A                 align 20h
.text:00000000000050A0
.text:00000000000050A0 loc_50A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000050A0                                         ; DATA XREF: .rodata:jpt_4EFA↓o
.text:00000000000050A0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000050A5                 jmp     loc_4D20
.text:00000000000050A5 ; ---------------------------------------------------------------------------
.text:00000000000050AA                 align 10h
.text:00000000000050B0
.text:00000000000050B0 loc_50B0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000050B0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000050B0                 xor     r10d, r10d
.text:00000000000050B3                 jmp     loc_4B50
.text:00000000000050B3 ; ---------------------------------------------------------------------------
.text:00000000000050B8                 align 20h
.text:00000000000050C0
.text:00000000000050C0 loc_50C0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000050C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000050C5                 jnz     loc_5A30
.text:00000000000050CB
.text:00000000000050CB loc_50CB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000050CB                 add     rbp, 1
.text:00000000000050CF                 mov     eax, r8d
.text:00000000000050D2                 xor     r12d, r12d
.text:00000000000050D5                 mov     ebx, 5Ch ; '\'
.text:00000000000050DA                 jmp     loc_4BEC
.text:00000000000050DA ; ---------------------------------------------------------------------------
.text:00000000000050DF                 align 20h
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000050E0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000050E5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000050EA                 mov     r12d, r8d
.text:00000000000050ED                 mov     rbp, r11
.text:00000000000050F0                 setz    dl
.text:00000000000050F3                 mov     eax, ebx
.text:00000000000050F5                 test    r15, r15
.text:00000000000050F8                 setz    cl
.text:00000000000050FB                 and     eax, edx
.text:00000000000050FD                 and     al, cl
.text:00000000000050FF                 jnz     loc_5B66
.text:0000000000005105                 mov     eax, ebx
.text:0000000000005107                 xor     eax, 1
.text:000000000000510A                 and     dl, al
.text:000000000000510C                 jz      loc_5A7C
.text:0000000000005112                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000005117                 jz      loc_5A7A
.text:000000000000511D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000005122                 jnz     loc_5B1D
.text:0000000000005128                 test    r13, r13
.text:000000000000512B                 setz    al
.text:000000000000512E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000005134                 setnz   dl
.text:0000000000005137                 and     al, dl
.text:0000000000005139                 jz      loc_5B5C
.text:000000000000513F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005144
.text:0000000000005144 loc_5144:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000005144                 lea     rbx, asc_7FE5   ; "'"
.text:000000000000514B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000514F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005157                 mov     r15d, 1
.text:000000000000515D                 mov     [rsp+0E8h+n], 1
.text:0000000000005166                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000516B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000005170                 mov     [rsp+0E8h+var_6C], al
.text:0000000000005174                 jmp     loc_4A53
.text:0000000000005174 ; ---------------------------------------------------------------------------
.text:0000000000005179                 align 20h
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000005180                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005185                 jnz     loc_5A30
.text:000000000000518B                 test    r13, r13
.text:000000000000518E                 jz      loc_5590
.text:0000000000005194                 xor     edx, edx
.text:0000000000005196                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000519C                 jnz     loc_5590
.text:00000000000051A2
.text:00000000000051A2 loc_51A2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000051A2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000051A2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000051A7                 add     r15, 3
.text:00000000000051AB                 xor     eax, eax
.text:00000000000051AD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000051B2                 xor     r8d, r8d
.text:00000000000051B5                 mov     r13, rdx
.text:00000000000051B8                 mov     ebx, 27h ; '''
.text:00000000000051BD                 jmp     loc_4BD9
.text:00000000000051BD ; ---------------------------------------------------------------------------
.text:00000000000051C2                 align 8
.text:00000000000051C8
.text:00000000000051C8 loc_51C8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000051C8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000051CD                 jz      short loc_51F0
.text:00000000000051CF                 lea     rcx, [rbp+2]
.text:00000000000051D3                 cmp     rcx, r11
.text:00000000000051D6                 jnb     short loc_51F0
.text:00000000000051D8                 mov     rax, [rsp+0E8h+s]
.text:00000000000051DD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000051E2                 jz      loc_5972
.text:00000000000051E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000051F0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000051F0                 xor     edx, edx
.text:00000000000051F2                 xor     r12d, r12d
.text:00000000000051F5                 xor     eax, eax
.text:00000000000051F7                 mov     ebx, 3Fh ; '?'
.text:00000000000051FC                 jmp     loc_4BA8
.text:00000000000051FC ; ---------------------------------------------------------------------------
.text:0000000000005201                 align 8
.text:0000000000005208
.text:0000000000005208 loc_5208:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000005208                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000520D                 jnz     loc_5A30
.text:0000000000005213                 xor     r12d, r12d
.text:0000000000005216                 xor     eax, eax
.text:0000000000005218                 mov     ebx, 3Fh ; '?'
.text:000000000000521D                 jmp     loc_4BD9
.text:000000000000521D ; ---------------------------------------------------------------------------
.text:0000000000005222                 align 8
.text:0000000000005228
.text:0000000000005228 loc_5228:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000005228                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000005230                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005234                 mov     [rsp+0E8h+var_48], 0
.text:0000000000005240                 mov     [rsp+0E8h+ps], rax
.text:0000000000005245                 jnz     short loc_5274
.text:0000000000005247                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000524C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000005251                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000005256                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000525B                 call    _strlen
.text:0000000000005260                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000005266                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000526C                 mov     r11, rax
.text:000000000000526F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005274
.text:0000000000005274 loc_5274:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000005274                 lea     rax, [rsp+0E8h+wc]
.text:000000000000527C                 xor     ecx, ecx
.text:000000000000527E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000005282                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000005287                 mov     rbx, rcx
.text:000000000000528A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000005292                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000005297                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000529C                 mov     [rsp+0E8h+var_68], r15
.text:00000000000052A4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000052A9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000052AE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000052B3
.text:00000000000052B3 loc_52B3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000052B3                 mov     rax, [rsp+0E8h+s]
.text:00000000000052B8                 lea     r14, [rbp+rbx+0]
.text:00000000000052BD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000052C2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000052C7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000052CC                 lea     r13, [rax+r14]
.text:00000000000052D0                 sub     rdx, r14
.text:00000000000052D3                 mov     rsi, r13
.text:00000000000052D6                 call    rpl_mbrtowc
.text:00000000000052DB                 test    rax, rax
.text:00000000000052DE                 mov     r15, rax
.text:00000000000052E1                 jz      short loc_5331
.text:00000000000052E3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000052E7                 jz      loc_5905
.text:00000000000052ED                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000052F1                 jz      loc_5891
.text:00000000000052F7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000052FC                 setz    al
.text:00000000000052FF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000005303                 jnz     loc_54A0
.text:0000000000005309
.text:0000000000005309 loc_5309:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000005309                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000005309                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000005310                 call    _iswprint
.text:0000000000005315                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000531A                 test    eax, eax
.text:000000000000531C                 mov     eax, 0
.text:0000000000005321                 cmovz   r12d, eax
.text:0000000000005325                 add     rbx, r15
.text:0000000000005328                 call    _mbsinit
.text:000000000000532D                 test    eax, eax
.text:000000000000532F                 jz      short loc_52B3
.text:0000000000005331
.text:0000000000005331 loc_5331:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000005331                 mov     edx, r12d
.text:0000000000005334                 mov     rdi, rbx
.text:0000000000005337                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000533D                 xor     edx, 1
.text:0000000000005340                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005345                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000534B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000534F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005357                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000535C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005361                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005366
.text:0000000000005366 loc_5366:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000005366                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000005366                 cmp     rdi, 1
.text:000000000000536A                 jbe     loc_596B
.text:0000000000005370
.text:0000000000005370 loc_5370:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000005370                 mov     rcx, rdi
.text:0000000000005373                 xor     esi, esi
.text:0000000000005375                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000537B                 add     rcx, rbp
.text:000000000000537E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000005383                 jmp     loc_543E
.text:0000000000005383 ; ---------------------------------------------------------------------------
.text:0000000000005388                 align 10h
.text:0000000000005390
.text:0000000000005390 loc_5390:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000005390                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005395                 setz    al
.text:0000000000005398                 test    r9b, r9b
.text:000000000000539B                 jnz     loc_5850
.text:00000000000053A1                 mov     esi, r8d
.text:00000000000053A4                 xor     esi, 1
.text:00000000000053A7                 and     al, sil
.text:00000000000053AA                 jz      short loc_53DB
.text:00000000000053AC                 cmp     r13, r15
.text:00000000000053AF                 jbe     short loc_53B6
.text:00000000000053B1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000053B6
.text:00000000000053B6 loc_53B6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000053B6                 lea     rsi, [r15+1]
.text:00000000000053BA                 cmp     r13, rsi
.text:00000000000053BD                 jbe     short loc_53C5
.text:00000000000053BF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000053C5
.text:00000000000053C5 loc_53C5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000053C5                 lea     rsi, [r15+2]
.text:00000000000053C9                 cmp     r13, rsi
.text:00000000000053CC                 jbe     short loc_53D4
.text:00000000000053CE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000053D4
.text:00000000000053D4 loc_53D4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000053D4                 add     r15, 3
.text:00000000000053D8                 mov     r8d, eax
.text:00000000000053DB
.text:00000000000053DB loc_53DB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000053DB                 cmp     r13, r15
.text:00000000000053DE                 jbe     short loc_53E5
.text:00000000000053E0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000053E5
.text:00000000000053E5 loc_53E5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000053E5                 lea     rax, [r15+1]
.text:00000000000053E9                 cmp     r13, rax
.text:00000000000053EC                 jbe     short loc_53FB
.text:00000000000053EE                 mov     eax, ebx
.text:00000000000053F0                 shr     al, 6
.text:00000000000053F3                 add     eax, 30h ; '0'
.text:00000000000053F6                 mov     [r14+r15+1], al
.text:00000000000053FB
.text:00000000000053FB loc_53FB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000053FB                 lea     rax, [r15+2]
.text:00000000000053FF                 cmp     r13, rax
.text:0000000000005402                 jbe     short loc_5414
.text:0000000000005404                 mov     eax, ebx
.text:0000000000005406                 shr     al, 3
.text:0000000000005409                 and     eax, 7
.text:000000000000540C                 add     eax, 30h ; '0'
.text:000000000000540F                 mov     [r14+r15+2], al
.text:0000000000005414
.text:0000000000005414 loc_5414:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000005414                 and     ebx, 7
.text:0000000000005417                 add     rbp, 1
.text:000000000000541B                 add     r15, 3
.text:000000000000541F                 add     ebx, 30h ; '0'
.text:0000000000005422                 cmp     rbp, rcx
.text:0000000000005425                 jnb     loc_4C10
.text:000000000000542B                 mov     esi, edx
.text:000000000000542D
.text:000000000000542D loc_542D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000542D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000542D                 cmp     r13, r15
.text:0000000000005430                 jbe     short loc_5436
.text:0000000000005432                 mov     [r14+r15], bl
.text:0000000000005436
.text:0000000000005436 loc_5436:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000005436                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000543A                 add     r15, 1
.text:000000000000543E
.text:000000000000543E loc_543E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000543E                 test    dl, dl
.text:0000000000005440                 jnz     loc_5390
.text:0000000000005446                 mov     eax, esi
.text:0000000000005448                 xor     eax, 1
.text:000000000000544B                 and     eax, r8d
.text:000000000000544E                 test    r10b, r10b
.text:0000000000005451                 jz      short loc_5461
.text:0000000000005453                 cmp     r13, r15
.text:0000000000005456                 jbe     short loc_545D
.text:0000000000005458                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000545D
.text:000000000000545D loc_545D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000545D                 add     r15, 1
.text:0000000000005461
.text:0000000000005461 loc_5461:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000005461                 add     rbp, 1
.text:0000000000005465                 cmp     rbp, rcx
.text:0000000000005468                 jnb     loc_4BEC
.text:000000000000546E                 test    al, al
.text:0000000000005470                 jz      loc_586E
.text:0000000000005476                 cmp     r13, r15
.text:0000000000005479                 jbe     short loc_5480
.text:000000000000547B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000005480                 lea     rax, [r15+1]
.text:0000000000005484                 cmp     r13, rax
.text:0000000000005487                 jbe     short loc_548F
.text:0000000000005489                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000548F
.text:000000000000548F loc_548F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000548F                 add     r15, 2
.text:0000000000005493                 xor     r10d, r10d
.text:0000000000005496                 xor     r8d, r8d
.text:0000000000005499                 jmp     short loc_542D
.text:0000000000005499 ; ---------------------------------------------------------------------------
.text:000000000000549B                 align 20h
.text:00000000000054A0
.text:00000000000054A0 loc_54A0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000054A0                 cmp     r15, 1
.text:00000000000054A4                 jz      loc_5309
.text:00000000000054AA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000054AF                 lea     rcx, [rdi+r15]
.text:00000000000054B3                 lea     rdx, [rdi+r14+1]
.text:00000000000054B8                 lea     r8, [rcx+r14]
.text:00000000000054BC                 jmp     short loc_54CD
.text:00000000000054BC ; ---------------------------------------------------------------------------
.text:00000000000054BE                 align 20h
.text:00000000000054C0
.text:00000000000054C0 loc_54C0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000054C0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000054C0                 add     rdx, 1
.text:00000000000054C4                 cmp     r8, rdx
.text:00000000000054C7                 jz      loc_5309
.text:00000000000054CD
.text:00000000000054CD loc_54CD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000054CD                 movzx   ecx, byte ptr [rdx]
.text:00000000000054D0                 sub     ecx, 5Bh ; '['
.text:00000000000054D3                 cmp     cl, 21h ; '!'
.text:00000000000054D6                 ja      short loc_54C0
.text:00000000000054D8                 mov     esi, 1
.text:00000000000054DD                 shl     rsi, cl
.text:00000000000054E0                 mov     rcx, rsi
.text:00000000000054E3                 mov     rsi, 20000002Bh
.text:00000000000054ED                 test    rcx, rsi
.text:00000000000054F0                 jz      short loc_54C0
.text:00000000000054F2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000054F7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000054FC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000005501                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005509
.text:0000000000005509 loc_5509:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000005509                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000005509                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000550E                 jz      short loc_5520
.text:0000000000005510                 test    al, al
.text:0000000000005512                 mov     eax, 4
.text:0000000000005517                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000551C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000005520
.text:0000000000005520 loc_5520:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000005520                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000005520                 sub     rsp, 8
.text:0000000000005524                 mov     rcx, rbp
.text:0000000000005527                 mov     rsi, r13
.text:000000000000552A                 push    [rsp+0F0h+var_88]
.text:000000000000552E                 push    [rsp+0F8h+var_80]
.text:0000000000005532                 mov     rdi, r14
.text:0000000000005535                 push    0
.text:0000000000005537                 mov     r9d, [rsp+108h+var_70]
.text:000000000000553F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000005544                 mov     rdx, [rsp+108h+s]
.text:0000000000005549                 and     r9d, 0FFFFFFFDh
.text:000000000000554D                 call    quotearg_buffer_restyled
.text:0000000000005552                 add     rsp, 20h
.text:0000000000005556                 mov     r15, rax
.text:0000000000005559
.text:0000000000005559 loc_5559:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000005559                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000005559                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000005561                 xor     rbx, fs:28h
.text:000000000000556A                 mov     rax, r15
.text:000000000000556D                 jnz     loc_5B73
.text:0000000000005573                 add     rsp, 0B8h
.text:000000000000557A                 pop     rbx
.text:000000000000557B                 pop     rbp
.text:000000000000557C                 pop     r12
.text:000000000000557E                 pop     r13
.text:0000000000005580                 pop     r14
.text:0000000000005582                 pop     r15
.text:0000000000005584                 retn
.text:0000000000005584 ; ---------------------------------------------------------------------------
.text:0000000000005585                 align 8
.text:0000000000005588
.text:0000000000005588 loc_5588:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000005588                 mov     rbp, r11
.text:000000000000558B                 jmp     loc_5509
.text:0000000000005590 ; ---------------------------------------------------------------------------
.text:0000000000005590
.text:0000000000005590 loc_5590:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000005590                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000005590                 cmp     r13, r15
.text:0000000000005593                 jbe     short loc_559A
.text:0000000000005595                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000559A
.text:000000000000559A loc_559A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000559A                 lea     rax, [r15+1]
.text:000000000000559E                 cmp     r13, rax
.text:00000000000055A1                 jbe     short loc_55A9
.text:00000000000055A3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000055A9
.text:00000000000055A9 loc_55A9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000055A9                 lea     rax, [r15+2]
.text:00000000000055AD                 cmp     r13, rax
.text:00000000000055B0                 jbe     loc_5BA2
.text:00000000000055B6                 mov     rdx, r13
.text:00000000000055B9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000055BF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000055C4                 jmp     loc_51A2
.text:00000000000055C9 ; ---------------------------------------------------------------------------
.text:00000000000055C9
.text:00000000000055C9 loc_55C9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000055C9                 mov     eax, r12d
.text:00000000000055CC                 mov     ebx, 30h ; '0'
.text:00000000000055D1                 xor     r12d, r12d
.text:00000000000055D4                 jmp     loc_4BD9
.text:00000000000055D9 ; ---------------------------------------------------------------------------
.text:00000000000055D9
.text:00000000000055D9 loc_55D9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000055D9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000055DF                 jmp     loc_4FA9
.text:00000000000055E4 ; ---------------------------------------------------------------------------
.text:00000000000055E4
.text:00000000000055E4 loc_55E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000055E4                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:00000000000055E4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000055E6                 jnz     loc_4A13        ; jumptable 00000000000121F1 case 1
.text:00000000000055EC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000055F1
.text:00000000000055F1 loc_55F1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000055F1                 test    r13, r13
.text:00000000000055F4                 jnz     loc_5B8A
.text:00000000000055FA                 lea     rax, asc_7FE5   ; "'"
.text:0000000000005601                 mov     [rsp+0E8h+var_98], 0
.text:000000000000560A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000560F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005614                 xor     r12d, r12d
.text:0000000000005617                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000561C                 mov     [rsp+0E8h+n], 1
.text:0000000000005625                 mov     [rsp+0E8h+s2], rax
.text:000000000000562A                 mov     r15d, 1
.text:0000000000005630                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005638                 jmp     loc_4A53
.text:0000000000005638 ; ---------------------------------------------------------------------------
.text:000000000000563D                 align 20h
.text:0000000000005640
.text:0000000000005640 loc_5640:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005640                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:0000000000005640                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000005642                 jnz     loc_5A3D
.text:0000000000005648                 test    r13, r13
.text:000000000000564B                 jz      loc_5876
.text:0000000000005651                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000005655                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000565A                 xor     r12d, r12d
.text:000000000000565D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005662                 mov     [rsp+0E8h+var_98], 0
.text:000000000000566B
.text:000000000000566B loc_566B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000566B                 lea     rax, unk_7FE3
.text:0000000000005672                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005677                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000567C                 mov     [rsp+0E8h+n], 1
.text:0000000000005685                 mov     r15d, 1
.text:000000000000568B                 mov     [rsp+0E8h+s2], rax
.text:0000000000005690                 jmp     loc_4A53
.text:0000000000005695 ; ---------------------------------------------------------------------------
.text:0000000000005695
.text:0000000000005695 loc_5695:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005695                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:0000000000005695                 lea     rax, unk_7FE3   ; jumptable 00000000000121F1 case 6
.text:000000000000569C                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000056A1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000056A6                 xor     r12d, r12d
.text:00000000000056A9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000056B2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000056B7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000056BC                 mov     [rsp+0E8h+n], 1
.text:00000000000056C5                 xor     r15d, r15d
.text:00000000000056C8                 mov     [rsp+0E8h+s2], rax
.text:00000000000056CD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000056D5                 jmp     loc_4A53
.text:00000000000056DA ; ---------------------------------------------------------------------------
.text:00000000000056DA
.text:00000000000056DA loc_56DA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000056DA                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:00000000000056DA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000056DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000056E4                 xor     r12d, r12d
.text:00000000000056E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000056F0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000056F5                 xor     r15d, r15d
.text:00000000000056F8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000056FD                 mov     [rsp+0E8h+n], 0
.text:0000000000005706                 mov     [rsp+0E8h+s2], 0
.text:000000000000570F                 jmp     loc_4A53
.text:0000000000005714 ; ---------------------------------------------------------------------------
.text:0000000000005714
.text:0000000000005714 loc_5714:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005714                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:0000000000005714                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000005719                 jz      short loc_5771
.text:000000000000571B                 lea     rsi, asc_7FE7   ; "`"
.text:0000000000005722                 xor     edi, edi        ; domainname
.text:0000000000005724                 mov     edx, 5          ; category
.text:0000000000005729                 call    _dcgettext
.text:000000000000572E                 mov     rcx, rax
.text:0000000000005731                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005736                 lea     rax, asc_7FE7   ; "`"
.text:000000000000573D                 cmp     rcx, rax
.text:0000000000005740                 jz      loc_5ADE
.text:0000000000005746
.text:0000000000005746 loc_5746:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000005746                 lea     rsi, asc_7FE5   ; "'"
.text:000000000000574D                 xor     edi, edi        ; domainname
.text:000000000000574F                 mov     edx, 5          ; category
.text:0000000000005754                 call    _dcgettext
.text:0000000000005759                 mov     rcx, rax
.text:000000000000575C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005761                 lea     rax, asc_7FE5   ; "'"
.text:0000000000005768                 cmp     rcx, rax
.text:000000000000576B                 jz      loc_5AF4
.text:0000000000005771
.text:0000000000005771 loc_5771:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000005771                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000005771                 xor     r15d, r15d
.text:0000000000005774                 test    ebx, ebx
.text:0000000000005776                 jz      loc_593D
.text:000000000000577C
.text:000000000000577C loc_577C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000577C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000577C                 test    ebx, ebx
.text:000000000000577E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000005783                 setnz   [rsp+0E8h+var_D9]
.text:0000000000005788                 xor     r12d, r12d
.text:000000000000578B                 mov     rdi, rbx        ; s
.text:000000000000578E                 call    _strlen
.text:0000000000005793                 mov     [rsp+0E8h+s2], rbx
.text:0000000000005798                 mov     [rsp+0E8h+n], rax
.text:000000000000579D                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000057A2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000057A7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000057B0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000057B5                 jmp     loc_4A53
.text:00000000000057BA ; ---------------------------------------------------------------------------
.text:00000000000057BA
.text:00000000000057BA loc_57BA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000057BA                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:00000000000057BA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000057BF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000057C4                 xor     r12d, r12d
.text:00000000000057C7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000057D0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000057D5                 xor     r15d, r15d
.text:00000000000057D8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000057DD                 mov     [rsp+0E8h+n], 0
.text:00000000000057E6                 mov     [rsp+0E8h+s2], 0
.text:00000000000057EF                 jmp     loc_4A53
.text:00000000000057F4 ; ---------------------------------------------------------------------------
.text:00000000000057F4
.text:00000000000057F4 loc_57F4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000057F4                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:00000000000057F4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000057F9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000057FE                 xor     r12d, r12d
.text:0000000000005801                 mov     [rsp+0E8h+var_98], 0
.text:000000000000580A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000580F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005814                 jmp     loc_4A33
.text:0000000000005819 ; ---------------------------------------------------------------------------
.text:0000000000005819
.text:0000000000005819 loc_5819:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000005819                 cmp     r13, r15
.text:000000000000581C                 jbe     short loc_5823
.text:000000000000581E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000005823
.text:0000000000005823 loc_5823:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000005823                 lea     rax, [rcx+2]
.text:0000000000005827                 cmp     r13, rax
.text:000000000000582A                 jbe     short loc_5832
.text:000000000000582C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000005832
.text:0000000000005832 loc_5832:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000005832                 mov     eax, r12d
.text:0000000000005835                 lea     r15, [rcx+3]
.text:0000000000005839                 xor     r12d, r12d
.text:000000000000583C                 mov     ebx, 30h ; '0'
.text:0000000000005841                 jmp     loc_4BA8
.text:0000000000005841 ; ---------------------------------------------------------------------------
.text:0000000000005846                 align 10h
.text:0000000000005850
.text:0000000000005850 loc_5850:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000005850                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005855                 mov     rbp, r11
.text:0000000000005858                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000585C                 jmp     loc_5509
.text:0000000000005861 ; ---------------------------------------------------------------------------
.text:0000000000005861
.text:0000000000005861 loc_5861:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000005861                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005866                 xor     r12d, r12d
.text:0000000000005869                 jmp     loc_5370
.text:000000000000586E ; ---------------------------------------------------------------------------
.text:000000000000586E
.text:000000000000586E loc_586E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000586E                 xor     r10d, r10d
.text:0000000000005871                 jmp     loc_542D
.text:0000000000005876 ; ---------------------------------------------------------------------------
.text:0000000000005876
.text:0000000000005876 loc_5876:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000005876                 mov     [rsp+0E8h+var_98], 0
.text:000000000000587F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005884                 xor     r12d, r12d
.text:0000000000005887                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000588C                 jmp     loc_566B
.text:0000000000005891 ; ---------------------------------------------------------------------------
.text:0000000000005891
.text:0000000000005891 loc_5891:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000005891                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005896                 mov     rsi, r14
.text:0000000000005899                 mov     rcx, r13
.text:000000000000589C                 mov     rax, rbx
.text:000000000000589F                 mov     rdi, rbx
.text:00000000000058A2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000058A8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000058AD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000058B5                 cmp     rsi, r11
.text:00000000000058B8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000058BE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000058C6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000058CB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000058D0                 jnb     short loc_58F8
.text:00000000000058D2                 cmp     byte ptr [rcx], 0
.text:00000000000058D5                 jnz     short loc_58E7
.text:00000000000058D7                 jmp     short loc_58F8
.text:00000000000058D7 ; ---------------------------------------------------------------------------
.text:00000000000058D9                 align 20h
.text:00000000000058E0
.text:00000000000058E0 loc_58E0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000058E0                 cmp     byte ptr [r9+rax], 0
.text:00000000000058E5                 jz      short loc_58F5
.text:00000000000058E7
.text:00000000000058E7 loc_58E7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000058E7                 add     rax, 1
.text:00000000000058EB                 lea     rdx, [rbp+rax+0]
.text:00000000000058F0                 cmp     r11, rdx
.text:00000000000058F3                 ja      short loc_58E0
.text:00000000000058F5
.text:00000000000058F5 loc_58F5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000058F5                 mov     rdi, rax
.text:00000000000058F8
.text:00000000000058F8 loc_58F8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000058F8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000058F8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000058FD                 xor     r12d, r12d
.text:0000000000005900                 jmp     loc_5366
.text:0000000000005905 ; ---------------------------------------------------------------------------
.text:0000000000005905
.text:0000000000005905 loc_5905:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005905                 mov     rdi, rbx
.text:0000000000005908                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000590E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005913                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005919                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005921                 xor     r12d, r12d
.text:0000000000005924                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005929                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000592E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005933                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005938                 jmp     loc_5366
.text:000000000000593D ; ---------------------------------------------------------------------------
.text:000000000000593D
.text:000000000000593D loc_593D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000593D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000005942                 movzx   eax, byte ptr [rdx]
.text:0000000000005945                 test    al, al
.text:0000000000005947                 jz      loc_577C
.text:000000000000594D                 nop     dword ptr [rax]
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000005950                 cmp     r13, r15
.text:0000000000005953                 jbe     short loc_5959
.text:0000000000005955                 mov     [r14+r15], al
.text:0000000000005959
.text:0000000000005959 loc_5959:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000005959                 add     r15, 1
.text:000000000000595D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000005962                 test    al, al
.text:0000000000005964                 jnz     short loc_5950
.text:0000000000005966                 jmp     loc_577C
.text:000000000000596B ; ---------------------------------------------------------------------------
.text:000000000000596B
.text:000000000000596B loc_596B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000596B                 mov     eax, edx
.text:000000000000596D                 jmp     loc_4EC7
.text:0000000000005972 ; ---------------------------------------------------------------------------
.text:0000000000005972
.text:0000000000005972 loc_5972:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000005972                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000005976                 cmp     bl, 3Eh ; '>'
.text:0000000000005979                 ja      loc_51F0
.text:000000000000597F                 mov     rax, 7000A38200000000h
.text:0000000000005989                 bt      rax, rbx
.text:000000000000598D                 jnb     loc_51F0
.text:0000000000005993                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005998                 jnz     loc_5B82
.text:000000000000599E                 cmp     r13, r15
.text:00000000000059A1                 jbe     short loc_59A8
.text:00000000000059A3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000059A8
.text:00000000000059A8 loc_59A8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000059A8                 lea     rax, [r15+1]
.text:00000000000059AC                 cmp     r13, rax
.text:00000000000059AF                 jbe     short loc_59B7
.text:00000000000059B1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000059B7
.text:00000000000059B7 loc_59B7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000059B7                 lea     rax, [r15+2]
.text:00000000000059BB                 cmp     r13, rax
.text:00000000000059BE                 jbe     short loc_59C6
.text:00000000000059C0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000059C6
.text:00000000000059C6 loc_59C6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000059C6                 lea     rax, [r15+3]
.text:00000000000059CA                 cmp     r13, rax
.text:00000000000059CD                 jbe     short loc_59D5
.text:00000000000059CF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000059D5
.text:00000000000059D5 loc_59D5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000059D5                 add     r15, 4
.text:00000000000059D9                 xor     edx, edx
.text:00000000000059DB                 xor     r12d, r12d
.text:00000000000059DE                 xor     eax, eax
.text:00000000000059E0                 mov     rbp, rcx
.text:00000000000059E3                 jmp     loc_4BA8
.text:00000000000059E8 ; ---------------------------------------------------------------------------
.text:00000000000059E8
.text:00000000000059E8 loc_59E8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000059E8                                         ; DATA XREF: .rodata:jpt_4A11↓o
.text:00000000000059E8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000059EA                 jz      loc_5B78
.text:00000000000059F0                 lea     rax, asc_7FE5   ; "'"
.text:00000000000059F7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000059FC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005A01                 xor     r12d, r12d
.text:0000000000005A04                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005A0D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005A12                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005A17                 mov     [rsp+0E8h+n], 1
.text:0000000000005A20                 xor     r15d, r15d
.text:0000000000005A23                 mov     [rsp+0E8h+s2], rax
.text:0000000000005A28                 jmp     loc_4A53
.text:0000000000005A28 ; ---------------------------------------------------------------------------
.text:0000000000005A2D                 align 10h
.text:0000000000005A30
.text:0000000000005A30 loc_5A30:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000005A30                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000005A30                 mov     rbp, r11
.text:0000000000005A33                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005A38                 jmp     loc_5509
.text:0000000000005A3D ; ---------------------------------------------------------------------------
.text:0000000000005A3D
.text:0000000000005A3D loc_5A3D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000005A3D                 lea     rax, unk_7FE3
.text:0000000000005A44                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005A49                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005A4E                 xor     r12d, r12d
.text:0000000000005A51                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005A5A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005A5F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005A64                 mov     [rsp+0E8h+n], 1
.text:0000000000005A6D                 xor     r15d, r15d
.text:0000000000005A70                 mov     [rsp+0E8h+s2], rax
.text:0000000000005A75                 jmp     loc_4A53
.text:0000000000005A7A ; ---------------------------------------------------------------------------
.text:0000000000005A7A
.text:0000000000005A7A loc_5A7A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000005A7A                 mov     eax, edx
.text:0000000000005A7C
.text:0000000000005A7C loc_5A7C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000005A7C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000005A7C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000005A81                 test    rbx, rbx
.text:0000000000005A84                 jz      short loc_5AB2
.text:0000000000005A86                 test    al, al
.text:0000000000005A88                 jz      short loc_5AB2
.text:0000000000005A8A                 movzx   ecx, byte ptr [rbx]
.text:0000000000005A8D                 mov     rax, rbx
.text:0000000000005A90                 test    cl, cl
.text:0000000000005A92                 jz      short loc_5AB2
.text:0000000000005A94                 mov     rdx, r15
.text:0000000000005A97                 sub     rax, r15
.text:0000000000005A9A
.text:0000000000005A9A loc_5A9A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000005A9A                 cmp     r13, rdx
.text:0000000000005A9D                 jbe     short loc_5AA3
.text:0000000000005A9F                 mov     [r14+rdx], cl
.text:0000000000005AA3
.text:0000000000005AA3 loc_5AA3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000005AA3                 add     rdx, 1
.text:0000000000005AA7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000005AAB                 test    cl, cl
.text:0000000000005AAD                 jnz     short loc_5A9A
.text:0000000000005AAF                 mov     r15, rdx
.text:0000000000005AB2
.text:0000000000005AB2 loc_5AB2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005AB2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005AB2                 cmp     r13, r15
.text:0000000000005AB5                 jbe     loc_5559
.text:0000000000005ABB                 mov     byte ptr [r14+r15], 0
.text:0000000000005AC0                 jmp     loc_5559
.text:0000000000005AC5 ; ---------------------------------------------------------------------------
.text:0000000000005AC5
.text:0000000000005AC5 loc_5AC5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005AC5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005ACA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005ACF                 mov     rbp, r11
.text:0000000000005AD2                 setz    al
.text:0000000000005AD5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005AD9                 jmp     loc_5509
.text:0000000000005ADE ; ---------------------------------------------------------------------------
.text:0000000000005ADE
.text:0000000000005ADE loc_5ADE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000005ADE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005AE2                 mov     rdi, rcx
.text:0000000000005AE5                 call    gettext_quote
.text:0000000000005AEA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005AEF                 jmp     loc_5746
.text:0000000000005AF4 ; ---------------------------------------------------------------------------
.text:0000000000005AF4
.text:0000000000005AF4 loc_5AF4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005AF4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005AF8                 mov     rdi, rcx
.text:0000000000005AFB                 call    gettext_quote
.text:0000000000005B00                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005B05                 jmp     loc_5771
.text:0000000000005B0A ; ---------------------------------------------------------------------------
.text:0000000000005B0A
.text:0000000000005B0A loc_5B0A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000005B0A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005B0F                 mov     rbp, r11
.text:0000000000005B12                 mov     eax, edx
.text:0000000000005B14                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005B18                 jmp     loc_5509
.text:0000000000005B1D ; ---------------------------------------------------------------------------
.text:0000000000005B1D
.text:0000000000005B1D loc_5B1D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000005B1D                 sub     rsp, 8
.text:0000000000005B21                 mov     r8d, 5
.text:0000000000005B27                 mov     rcx, r11
.text:0000000000005B2A                 push    [rsp+0F0h+var_88]
.text:0000000000005B2E                 push    [rsp+0F8h+var_80]
.text:0000000000005B32                 mov     rdi, r14
.text:0000000000005B35                 push    [rsp+100h+var_C8]
.text:0000000000005B39                 mov     r9d, [rsp+108h+var_70]
.text:0000000000005B41                 mov     rdx, [rsp+108h+s]
.text:0000000000005B46                 mov     rsi, [rsp+108h+var_98]
.text:0000000000005B4B                 call    quotearg_buffer_restyled
.text:0000000000005B50                 add     rsp, 20h
.text:0000000000005B54                 mov     r15, rax
.text:0000000000005B57                 jmp     loc_5559
.text:0000000000005B5C ; ---------------------------------------------------------------------------
.text:0000000000005B5C
.text:0000000000005B5C loc_5B5C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000005B5C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000005B61                 jmp     loc_5A7C
.text:0000000000005B66 ; ---------------------------------------------------------------------------
.text:0000000000005B66
.text:0000000000005B66 loc_5B66:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000005B66                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005B6E                 jmp     loc_5509
.text:0000000000005B73 ; ---------------------------------------------------------------------------
.text:0000000000005B73
.text:0000000000005B73 loc_5B73:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000005B73                 call    ___stack_chk_fail
.text:0000000000005B78 ; ---------------------------------------------------------------------------
.text:0000000000005B78
.text:0000000000005B78 loc_5B78:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000005B78                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005B7D                 jmp     loc_55F1
.text:0000000000005B82 ; ---------------------------------------------------------------------------
.text:0000000000005B82
.text:0000000000005B82 loc_5B82:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000005B82                 mov     rbp, r11
.text:0000000000005B85                 jmp     loc_5520
.text:0000000000005B8A ; ---------------------------------------------------------------------------
.text:0000000000005B8A
.text:0000000000005B8A loc_5B8A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000005B8A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005B8F                 xor     eax, eax
.text:0000000000005B91                 xor     r12d, r12d
.text:0000000000005B94                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005B9D                 jmp     loc_5144
.text:0000000000005BA2 ; ---------------------------------------------------------------------------
.text:0000000000005BA2
.text:0000000000005BA2 loc_5BA2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000005BA2                 mov     rdx, r13
.text:0000000000005BA5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005BAA                 jmp     loc_51A2
.text:0000000000005BAF ; ---------------------------------------------------------------------------
.text:0000000000005BAF
.text:0000000000005BAF def_4A11:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000005BAF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000005BAF ; } // starts at 4980
.text:0000000000005BAF quotearg_buffer_restyled endp
.text:0000000000005BAF
.text:0000000000005BAF ; ---------------------------------------------------------------------------
.text:0000000000005BB4                 align 20h
.text:0000000000005BC0
.text:0000000000005BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BC0
.text:0000000000005BC0
.text:0000000000005BC0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005BC0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005BC0
.text:0000000000005BC0 var_50          = qword ptr -50h
.text:0000000000005BC0 var_48          = qword ptr -48h
.text:0000000000005BC0 var_40          = dword ptr -40h
.text:0000000000005BC0 var_3C          = dword ptr -3Ch
.text:0000000000005BC0
.text:0000000000005BC0 ; __unwind {
.text:0000000000005BC0                 push    r15
.text:0000000000005BC2                 push    r14
.text:0000000000005BC4                 movsxd  r15, edi
.text:0000000000005BC7                 push    r13
.text:0000000000005BC9                 push    r12
.text:0000000000005BCB                 mov     r14, rdx
.text:0000000000005BCE                 push    rbp
.text:0000000000005BCF                 push    rbx
.text:0000000000005BD0                 mov     rbp, rcx
.text:0000000000005BD3                 sub     rsp, 28h
.text:0000000000005BD7                 mov     [rsp+58h+var_50], rsi
.text:0000000000005BDC                 call    ___errno_location
.text:0000000000005BE1                 mov     r13, rax
.text:0000000000005BE4                 mov     eax, [rax]
.text:0000000000005BE6                 test    r15d, r15d
.text:0000000000005BE9                 mov     rbx, cs:slotvec
.text:0000000000005BF0                 mov     [rsp+58h+var_40], eax
.text:0000000000005BF4                 js      loc_5D61
.text:0000000000005BFA                 cmp     cs:nslots, r15d
.text:0000000000005C01                 jg      short loc_5C65
.text:0000000000005C03                 cmp     r15d, 7FFFFFFFh
.text:0000000000005C0A                 jz      loc_5D66
.text:0000000000005C10                 lea     r12d, [r15+1]
.text:0000000000005C14                 lea     rax, slotvec0
.text:0000000000005C1B                 movsxd  rsi, r12d
.text:0000000000005C1E                 shl     rsi, 4
.text:0000000000005C22                 cmp     rbx, rax
.text:0000000000005C25                 jz      loc_5D40
.text:0000000000005C2B                 mov     rdi, rbx
.text:0000000000005C2E                 call    xrealloc
.text:0000000000005C33                 mov     rbx, rax
.text:0000000000005C36                 mov     cs:slotvec, rax
.text:0000000000005C3D
.text:0000000000005C3D loc_5C3D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000005C3D                 movsxd  rdi, cs:nslots
.text:0000000000005C44                 mov     edx, r12d
.text:0000000000005C47                 xor     esi, esi        ; c
.text:0000000000005C49                 sub     edx, edi
.text:0000000000005C4B                 shl     rdi, 4
.text:0000000000005C4F                 movsxd  rdx, edx
.text:0000000000005C52                 add     rdi, rbx        ; s
.text:0000000000005C55                 shl     rdx, 4          ; n
.text:0000000000005C59                 call    _memset
.text:0000000000005C5E                 mov     cs:nslots, r12d
.text:0000000000005C65
.text:0000000000005C65 loc_5C65:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000005C65                 mov     eax, [rbp+4]
.text:0000000000005C68                 shl     r15, 4
.text:0000000000005C6C                 sub     rsp, 8
.text:0000000000005C70                 add     rbx, r15
.text:0000000000005C73                 lea     r15, [rbp+8]
.text:0000000000005C77                 mov     r8d, [rbp+0]
.text:0000000000005C7B                 mov     r11, [rbx]
.text:0000000000005C7E                 mov     r12, [rbx+8]
.text:0000000000005C82                 mov     rcx, r14
.text:0000000000005C85                 or      eax, 1
.text:0000000000005C88                 mov     [rsp+60h+var_3C], eax
.text:0000000000005C8C                 push    qword ptr [rbp+30h]
.text:0000000000005C8F                 mov     r9d, eax
.text:0000000000005C92                 push    qword ptr [rbp+28h]
.text:0000000000005C95                 push    r15
.text:0000000000005C97                 mov     rsi, r11
.text:0000000000005C9A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005C9F                 mov     rdi, r12
.text:0000000000005CA2                 mov     [rsp+78h+var_48], r11
.text:0000000000005CA7                 call    quotearg_buffer_restyled
.text:0000000000005CAC                 add     rsp, 20h
.text:0000000000005CB0                 mov     r11, [rsp+58h+var_48]
.text:0000000000005CB5                 cmp     r11, rax
.text:0000000000005CB8                 ja      short loc_5D21
.text:0000000000005CBA                 lea     rsi, [rax+1]
.text:0000000000005CBE                 lea     rax, slot0
.text:0000000000005CC5                 cmp     r12, rax
.text:0000000000005CC8                 mov     [rbx], rsi
.text:0000000000005CCB                 jz      short loc_5CDF
.text:0000000000005CCD                 mov     rdi, r12        ; ptr
.text:0000000000005CD0                 mov     [rsp+58h+var_48], rsi
.text:0000000000005CD5                 call    _free
.text:0000000000005CDA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000005CDF
.text:0000000000005CDF loc_5CDF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000005CDF                 mov     rdi, rsi
.text:0000000000005CE2                 mov     [rsp+58h+var_48], rsi
.text:0000000000005CE7                 call    xmalloc
.text:0000000000005CEC                 sub     rsp, 8
.text:0000000000005CF0                 mov     [rbx+8], rax
.text:0000000000005CF4                 mov     r8d, [rbp+0]
.text:0000000000005CF8                 push    qword ptr [rbp+30h]
.text:0000000000005CFB                 push    qword ptr [rbp+28h]
.text:0000000000005CFE                 mov     rcx, r14
.text:0000000000005D01                 push    r15
.text:0000000000005D03                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005D08                 mov     rdi, rax
.text:0000000000005D0B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005D10                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005D15                 mov     r12, rax
.text:0000000000005D18                 call    quotearg_buffer_restyled
.text:0000000000005D1D                 add     rsp, 20h
.text:0000000000005D21
.text:0000000000005D21 loc_5D21:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005D21                 mov     eax, [rsp+58h+var_40]
.text:0000000000005D25                 mov     [r13+0], eax
.text:0000000000005D29                 add     rsp, 28h
.text:0000000000005D2D                 mov     rax, r12
.text:0000000000005D30                 pop     rbx
.text:0000000000005D31                 pop     rbp
.text:0000000000005D32                 pop     r12
.text:0000000000005D34                 pop     r13
.text:0000000000005D36                 pop     r14
.text:0000000000005D38                 pop     r15
.text:0000000000005D3A                 retn
.text:0000000000005D3A ; ---------------------------------------------------------------------------
.text:0000000000005D3B                 align 20h
.text:0000000000005D40
.text:0000000000005D40 loc_5D40:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005D40                 xor     edi, edi
.text:0000000000005D42                 call    xrealloc
.text:0000000000005D47                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000005D4F                 mov     rbx, rax
.text:0000000000005D52                 mov     cs:slotvec, rax
.text:0000000000005D59                 movups  xmmword ptr [rax], xmm0
.text:0000000000005D5C                 jmp     loc_5C3D
.text:0000000000005D61 ; ---------------------------------------------------------------------------
.text:0000000000005D61
.text:0000000000005D61 loc_5D61:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000005D61                 call    _abort
.text:0000000000005D66 ; ---------------------------------------------------------------------------
.text:0000000000005D66
.text:0000000000005D66 loc_5D66:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000005D66                 call    xalloc_die
.text:0000000000005D66 ; } // starts at 5BC0
.text:0000000000005D66 quotearg_n_options endp
.text:0000000000005D66
.text:0000000000005D66 ; ---------------------------------------------------------------------------
.text:0000000000005D6B                 align 10h
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70 ; Attributes: info_from_lumina
.text:0000000000005D70
.text:0000000000005D70 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000005D70                 public clone_quoting_options
.text:0000000000005D70 clone_quoting_options proc near
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 push    r12
.text:0000000000005D72                 push    rbp
.text:0000000000005D73                 push    rbx
.text:0000000000005D74                 mov     rbx, rdi
.text:0000000000005D77                 call    ___errno_location
.text:0000000000005D7C                 mov     r12d, [rax]
.text:0000000000005D7F                 mov     rbp, rax
.text:0000000000005D82                 lea     rax, default_quoting_options
.text:0000000000005D89                 test    rbx, rbx
.text:0000000000005D8C                 mov     esi, 38h ; '8'  ; n
.text:0000000000005D91                 cmovz   rbx, rax
.text:0000000000005D95                 mov     rdi, rbx        ; src
.text:0000000000005D98                 call    xmemdup
.text:0000000000005D9D                 mov     [rbp+0], r12d
.text:0000000000005DA1                 pop     rbx
.text:0000000000005DA2                 pop     rbp
.text:0000000000005DA3                 pop     r12
.text:0000000000005DA5                 retn
.text:0000000000005DA5 ; } // starts at 5D70
.text:0000000000005DA5 clone_quoting_options endp
.text:0000000000005DA5
.text:0000000000005DA5 ; ---------------------------------------------------------------------------
.text:0000000000005DA6                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DB0
.text:0000000000005DB0
.text:0000000000005DB0                 public get_quoting_style
.text:0000000000005DB0 get_quoting_style proc near
.text:0000000000005DB0 ; __unwind {
.text:0000000000005DB0                 lea     rax, default_quoting_options
.text:0000000000005DB7                 test    rdi, rdi
.text:0000000000005DBA                 cmovz   rdi, rax
.text:0000000000005DBE                 mov     eax, [rdi]
.text:0000000000005DC0                 retn
.text:0000000000005DC0 ; } // starts at 5DB0
.text:0000000000005DC0 get_quoting_style endp
.text:0000000000005DC0
.text:0000000000005DC0 ; ---------------------------------------------------------------------------
.text:0000000000005DC1                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0
.text:0000000000005DD0                 public set_quoting_style
.text:0000000000005DD0 set_quoting_style proc near
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 lea     rax, default_quoting_options
.text:0000000000005DD7                 test    rdi, rdi
.text:0000000000005DDA                 cmovz   rdi, rax
.text:0000000000005DDE                 mov     [rdi], esi
.text:0000000000005DE0                 retn
.text:0000000000005DE0 ; } // starts at 5DD0
.text:0000000000005DE0 set_quoting_style endp
.text:0000000000005DE0
.text:0000000000005DE0 ; ---------------------------------------------------------------------------
.text:0000000000005DE1                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DF0
.text:0000000000005DF0 ; Attributes: info_from_lumina
.text:0000000000005DF0
.text:0000000000005DF0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005DF0                 public set_char_quoting
.text:0000000000005DF0 set_char_quoting proc near
.text:0000000000005DF0 ; __unwind {
.text:0000000000005DF0                 lea     rax, default_quoting_options
.text:0000000000005DF7                 test    rdi, rdi
.text:0000000000005DFA                 mov     ecx, esi
.text:0000000000005DFC                 cmovz   rdi, rax
.text:0000000000005E00                 mov     eax, esi
.text:0000000000005E02                 and     ecx, 1Fh
.text:0000000000005E05                 shr     al, 5
.text:0000000000005E08                 movzx   eax, al
.text:0000000000005E0B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005E10                 mov     esi, [rdi]
.text:0000000000005E12                 mov     eax, esi
.text:0000000000005E14                 shr     eax, cl
.text:0000000000005E16                 xor     edx, eax
.text:0000000000005E18                 and     eax, 1
.text:0000000000005E1B                 and     edx, 1
.text:0000000000005E1E                 shl     edx, cl
.text:0000000000005E20                 xor     edx, esi
.text:0000000000005E22                 mov     [rdi], edx
.text:0000000000005E24                 retn
.text:0000000000005E24 ; } // starts at 5DF0
.text:0000000000005E24 set_char_quoting endp
.text:0000000000005E24
.text:0000000000005E24 ; ---------------------------------------------------------------------------
.text:0000000000005E25                 align 10h
.text:0000000000005E30
.text:0000000000005E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E30
.text:0000000000005E30
.text:0000000000005E30                 public set_quoting_flags
.text:0000000000005E30 set_quoting_flags proc near
.text:0000000000005E30 ; __unwind {
.text:0000000000005E30                 lea     rax, default_quoting_options
.text:0000000000005E37                 test    rdi, rdi
.text:0000000000005E3A                 cmovz   rdi, rax
.text:0000000000005E3E                 mov     eax, [rdi+4]
.text:0000000000005E41                 mov     [rdi+4], esi
.text:0000000000005E44                 retn
.text:0000000000005E44 ; } // starts at 5E30
.text:0000000000005E44 set_quoting_flags endp
.text:0000000000005E44
.text:0000000000005E44 ; ---------------------------------------------------------------------------
.text:0000000000005E45                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50 ; Attributes: info_from_lumina
.text:0000000000005E50
.text:0000000000005E50 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005E50                 public set_custom_quoting
.text:0000000000005E50 set_custom_quoting proc near
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 lea     rax, default_quoting_options
.text:0000000000005E57                 test    rdi, rdi
.text:0000000000005E5A                 cmovz   rdi, rax
.text:0000000000005E5E                 test    rsi, rsi
.text:0000000000005E61                 mov     dword ptr [rdi], 0Ah
.text:0000000000005E67                 jz      short loc_5E77
.text:0000000000005E69                 test    rdx, rdx
.text:0000000000005E6C                 jz      short loc_5E77
.text:0000000000005E6E                 mov     [rdi+28h], rsi
.text:0000000000005E72                 mov     [rdi+30h], rdx
.text:0000000000005E76                 retn
.text:0000000000005E77 ; ---------------------------------------------------------------------------
.text:0000000000005E77
.text:0000000000005E77 loc_5E77:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005E77                                         ; set_custom_quoting+1C↑j
.text:0000000000005E77                 sub     rsp, 8
.text:0000000000005E7B                 call    _abort
.text:0000000000005E7B ; } // starts at 5E50
.text:0000000000005E7B set_custom_quoting endp
.text:0000000000005E7B
.text:0000000000005E80
.text:0000000000005E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E80
.text:0000000000005E80 ; Attributes: info_from_lumina
.text:0000000000005E80
.text:0000000000005E80 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000005E80                 public quotearg_buffer
.text:0000000000005E80 quotearg_buffer proc near
.text:0000000000005E80
.text:0000000000005E80 var_40          = qword ptr -40h
.text:0000000000005E80
.text:0000000000005E80 ; __unwind {
.text:0000000000005E80                 push    r15
.text:0000000000005E82                 push    r14
.text:0000000000005E84                 lea     rax, default_quoting_options
.text:0000000000005E8B                 push    r13
.text:0000000000005E8D                 push    r12
.text:0000000000005E8F                 mov     r13, rdi
.text:0000000000005E92                 push    rbp
.text:0000000000005E93                 push    rbx
.text:0000000000005E94                 mov     rbx, r8
.text:0000000000005E97                 mov     r14, rsi
.text:0000000000005E9A                 mov     r15, rdx
.text:0000000000005E9D                 sub     rsp, 18h
.text:0000000000005EA1                 test    r8, r8
.text:0000000000005EA4                 cmovz   rbx, rax
.text:0000000000005EA8                 mov     [rsp+48h+var_40], rcx
.text:0000000000005EAD                 call    ___errno_location
.text:0000000000005EB2                 mov     r12d, [rax]
.text:0000000000005EB5                 mov     rbp, rax
.text:0000000000005EB8                 lea     rax, [rbx+8]
.text:0000000000005EBC                 sub     rsp, 8
.text:0000000000005EC0                 mov     r9d, [rbx+4]
.text:0000000000005EC4                 push    qword ptr [rbx+30h]
.text:0000000000005EC7                 mov     r8d, [rbx]
.text:0000000000005ECA                 push    qword ptr [rbx+28h]
.text:0000000000005ECD                 mov     rdx, r15
.text:0000000000005ED0                 push    rax
.text:0000000000005ED1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005ED6                 mov     rsi, r14
.text:0000000000005ED9                 mov     rdi, r13
.text:0000000000005EDC                 call    quotearg_buffer_restyled
.text:0000000000005EE1                 mov     [rbp+0], r12d
.text:0000000000005EE5                 add     rsp, 38h
.text:0000000000005EE9                 pop     rbx
.text:0000000000005EEA                 pop     rbp
.text:0000000000005EEB                 pop     r12
.text:0000000000005EED                 pop     r13
.text:0000000000005EEF                 pop     r14
.text:0000000000005EF1                 pop     r15
.text:0000000000005EF3                 retn
.text:0000000000005EF3 ; } // starts at 5E80
.text:0000000000005EF3 quotearg_buffer endp
.text:0000000000005EF3
.text:0000000000005EF3 ; ---------------------------------------------------------------------------
.text:0000000000005EF4                 align 20h
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00 ; Attributes: info_from_lumina
.text:0000000000005F00
.text:0000000000005F00 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005F00                 public quotearg_alloc_mem
.text:0000000000005F00 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005F00
.text:0000000000005F00 var_5C          = dword ptr -5Ch
.text:0000000000005F00 var_58          = qword ptr -58h
.text:0000000000005F00 var_50          = qword ptr -50h
.text:0000000000005F00 var_48          = qword ptr -48h
.text:0000000000005F00 var_40          = qword ptr -40h
.text:0000000000005F00
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 push    r15
.text:0000000000005F02                 push    r14
.text:0000000000005F04                 lea     rax, default_quoting_options
.text:0000000000005F0B                 push    r13
.text:0000000000005F0D                 push    r12
.text:0000000000005F0F                 mov     r12, rdx
.text:0000000000005F12                 push    rbp
.text:0000000000005F13                 push    rbx
.text:0000000000005F14                 mov     rbx, rcx
.text:0000000000005F17                 mov     r14, rdi
.text:0000000000005F1A                 mov     r15, rsi
.text:0000000000005F1D                 sub     rsp, 38h
.text:0000000000005F21                 test    rcx, rcx
.text:0000000000005F24                 cmovz   rbx, rax
.text:0000000000005F28                 xor     ebp, ebp
.text:0000000000005F2A                 call    ___errno_location
.text:0000000000005F2F                 test    r12, r12
.text:0000000000005F32                 mov     r13, rax
.text:0000000000005F35                 mov     eax, [rax]
.text:0000000000005F37                 setz    bpl
.text:0000000000005F3B                 or      ebp, [rbx+4]
.text:0000000000005F3E                 lea     r10, [rbx+8]
.text:0000000000005F42                 sub     rsp, 8
.text:0000000000005F46                 mov     r8d, [rbx]
.text:0000000000005F49                 mov     rcx, r15
.text:0000000000005F4C                 mov     [rsp+70h+var_5C], eax
.text:0000000000005F50                 push    qword ptr [rbx+30h]
.text:0000000000005F53                 mov     rdx, r14
.text:0000000000005F56                 push    qword ptr [rbx+28h]
.text:0000000000005F59                 push    r10
.text:0000000000005F5B                 xor     esi, esi
.text:0000000000005F5D                 mov     r9d, ebp
.text:0000000000005F60                 xor     edi, edi
.text:0000000000005F62                 mov     [rsp+88h+var_48], r10
.text:0000000000005F67                 call    quotearg_buffer_restyled
.text:0000000000005F6C                 lea     rsi, [rax+1]
.text:0000000000005F70                 mov     [rsp+88h+var_40], rax
.text:0000000000005F75                 add     rsp, 20h
.text:0000000000005F79                 mov     rdi, rsi
.text:0000000000005F7C                 mov     [rsp+68h+var_50], rsi
.text:0000000000005F81                 call    xmalloc
.text:0000000000005F86                 mov     [rsp+68h+var_58], rax
.text:0000000000005F8B                 sub     rsp, 8
.text:0000000000005F8F                 push    qword ptr [rbx+30h]
.text:0000000000005F92                 push    qword ptr [rbx+28h]
.text:0000000000005F95                 mov     r10, [rsp+80h+var_48]
.text:0000000000005F9A                 mov     r9d, ebp
.text:0000000000005F9D                 mov     r8d, [rbx]
.text:0000000000005FA0                 mov     rcx, r15
.text:0000000000005FA3                 mov     rdx, r14
.text:0000000000005FA6                 mov     rdi, rax
.text:0000000000005FA9                 push    r10
.text:0000000000005FAB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005FB0                 call    quotearg_buffer_restyled
.text:0000000000005FB5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005FB9                 add     rsp, 20h
.text:0000000000005FBD                 test    r12, r12
.text:0000000000005FC0                 mov     [r13+0], eax
.text:0000000000005FC4                 jz      short loc_5FCF
.text:0000000000005FC6                 mov     r11, [rsp+68h+var_40]
.text:0000000000005FCB                 mov     [r12], r11
.text:0000000000005FCF
.text:0000000000005FCF loc_5FCF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000005FCF                 mov     rax, [rsp+68h+var_58]
.text:0000000000005FD4                 add     rsp, 38h
.text:0000000000005FD8                 pop     rbx
.text:0000000000005FD9                 pop     rbp
.text:0000000000005FDA                 pop     r12
.text:0000000000005FDC                 pop     r13
.text:0000000000005FDE                 pop     r14
.text:0000000000005FE0                 pop     r15
.text:0000000000005FE2                 retn
.text:0000000000005FE2 ; } // starts at 5F00
.text:0000000000005FE2 quotearg_alloc_mem endp
.text:0000000000005FE2
.text:0000000000005FE2 ; ---------------------------------------------------------------------------
.text:0000000000005FE3                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FF0
.text:0000000000005FF0
.text:0000000000005FF0                 public quotearg_alloc
.text:0000000000005FF0 quotearg_alloc  proc near
.text:0000000000005FF0 ; __unwind {
.text:0000000000005FF0                 mov     rcx, rdx
.text:0000000000005FF3                 xor     edx, edx
.text:0000000000005FF5                 jmp     quotearg_alloc_mem
.text:0000000000005FF5 ; } // starts at 5FF0
.text:0000000000005FF5 quotearg_alloc  endp
.text:0000000000005FF5
.text:0000000000005FF5 ; ---------------------------------------------------------------------------
.text:0000000000005FFA                 align 20h
.text:0000000000006000
.text:0000000000006000 ; =============== S U B R O U T I N E =======================================
.text:0000000000006000
.text:0000000000006000 ; Attributes: info_from_lumina
.text:0000000000006000
.text:0000000000006000 ; void __cdecl quotearg_free()
.text:0000000000006000                 public quotearg_free
.text:0000000000006000 quotearg_free   proc near
.text:0000000000006000 ; __unwind {
.text:0000000000006000                 mov     eax, cs:nslots
.text:0000000000006006                 push    r12
.text:0000000000006008                 mov     r12, cs:slotvec
.text:000000000000600F                 push    rbp
.text:0000000000006010                 push    rbx
.text:0000000000006011                 cmp     eax, 1
.text:0000000000006014                 jle     short loc_6041
.text:0000000000006016                 sub     eax, 2
.text:0000000000006019                 lea     rbx, [r12+18h]
.text:000000000000601E                 shl     rax, 4
.text:0000000000006022                 lea     rbp, [r12+rax+28h]
.text:0000000000006027                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000006030                 mov     rdi, [rbx]      ; ptr
.text:0000000000006033                 add     rbx, 10h
.text:0000000000006037                 call    _free
.text:000000000000603C                 cmp     rbx, rbp
.text:000000000000603F                 jnz     short loc_6030
.text:0000000000006041
.text:0000000000006041 loc_6041:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000006041                 mov     rdi, [r12+8]    ; ptr
.text:0000000000006046                 lea     rbx, slot0
.text:000000000000604D                 cmp     rdi, rbx
.text:0000000000006050                 jz      short loc_6069
.text:0000000000006052                 call    _free
.text:0000000000006057                 mov     cs:slotvec0, 100h
.text:0000000000006062                 mov     cs:off_20A078, rbx
.text:0000000000006069
.text:0000000000006069 loc_6069:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000006069                 lea     rbx, slotvec0
.text:0000000000006070                 cmp     r12, rbx
.text:0000000000006073                 jz      short loc_6084
.text:0000000000006075                 mov     rdi, r12        ; ptr
.text:0000000000006078                 call    _free
.text:000000000000607D                 mov     cs:slotvec, rbx
.text:0000000000006084
.text:0000000000006084 loc_6084:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000006084                 pop     rbx
.text:0000000000006085                 mov     cs:nslots, 1
.text:000000000000608F                 pop     rbp
.text:0000000000006090                 pop     r12
.text:0000000000006092                 retn
.text:0000000000006092 ; } // starts at 6000
.text:0000000000006092 quotearg_free   endp
.text:0000000000006092
.text:0000000000006092 ; ---------------------------------------------------------------------------
.text:0000000000006093                 align 20h
.text:00000000000060A0
.text:00000000000060A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060A0
.text:00000000000060A0
.text:00000000000060A0                 public quotearg_n
.text:00000000000060A0 quotearg_n      proc near
.text:00000000000060A0 ; __unwind {
.text:00000000000060A0                 lea     rcx, default_quoting_options
.text:00000000000060A7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000060AE                 jmp     quotearg_n_options
.text:00000000000060AE ; } // starts at 60A0
.text:00000000000060AE quotearg_n      endp
.text:00000000000060AE
.text:00000000000060AE ; ---------------------------------------------------------------------------
.text:00000000000060B3                 align 20h
.text:00000000000060C0
.text:00000000000060C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060C0
.text:00000000000060C0
.text:00000000000060C0                 public quotearg_n_mem
.text:00000000000060C0 quotearg_n_mem  proc near
.text:00000000000060C0 ; __unwind {
.text:00000000000060C0                 lea     rcx, default_quoting_options
.text:00000000000060C7                 jmp     quotearg_n_options
.text:00000000000060C7 ; } // starts at 60C0
.text:00000000000060C7 quotearg_n_mem  endp
.text:00000000000060C7
.text:00000000000060C7 ; ---------------------------------------------------------------------------
.text:00000000000060CC                 align 10h
.text:00000000000060D0
.text:00000000000060D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060D0
.text:00000000000060D0
.text:00000000000060D0                 public quotearg
.text:00000000000060D0 quotearg        proc near
.text:00000000000060D0 ; __unwind {
.text:00000000000060D0                 lea     rcx, default_quoting_options
.text:00000000000060D7                 mov     rsi, rdi
.text:00000000000060DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000060E1                 xor     edi, edi
.text:00000000000060E3                 jmp     quotearg_n_options
.text:00000000000060E3 ; } // starts at 60D0
.text:00000000000060E3 quotearg        endp
.text:00000000000060E3
.text:00000000000060E3 ; ---------------------------------------------------------------------------
.text:00000000000060E8                 align 10h
.text:00000000000060F0
.text:00000000000060F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060F0
.text:00000000000060F0
.text:00000000000060F0                 public quotearg_mem
.text:00000000000060F0 quotearg_mem    proc near
.text:00000000000060F0 ; __unwind {
.text:00000000000060F0                 lea     rcx, default_quoting_options
.text:00000000000060F7                 mov     rdx, rsi
.text:00000000000060FA                 mov     rsi, rdi
.text:00000000000060FD                 xor     edi, edi
.text:00000000000060FF                 jmp     quotearg_n_options
.text:00000000000060FF ; } // starts at 60F0
.text:00000000000060FF quotearg_mem    endp
.text:00000000000060FF
.text:00000000000060FF ; ---------------------------------------------------------------------------
.text:0000000000006104                 align 10h
.text:0000000000006110
.text:0000000000006110 ; =============== S U B R O U T I N E =======================================
.text:0000000000006110
.text:0000000000006110 ; Attributes: info_from_lumina
.text:0000000000006110
.text:0000000000006110 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000006110                 public quotearg_n_style
.text:0000000000006110 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000006110
.text:0000000000006110 var_48          = dword ptr -48h
.text:0000000000006110 var_44          = qword ptr -44h
.text:0000000000006110 var_3C          = qword ptr -3Ch
.text:0000000000006110 var_34          = qword ptr -34h
.text:0000000000006110 var_2C          = qword ptr -2Ch
.text:0000000000006110 var_24          = qword ptr -24h
.text:0000000000006110 var_1C          = qword ptr -1Ch
.text:0000000000006110 var_14          = dword ptr -14h
.text:0000000000006110 var_10          = qword ptr -10h
.text:0000000000006110
.text:0000000000006110 ; __unwind {
.text:0000000000006110                 sub     rsp, 48h
.text:0000000000006114                 mov     rax, rdx
.text:0000000000006117                 mov     rdx, fs:28h
.text:0000000000006120                 mov     [rsp+48h+var_10], rdx
.text:0000000000006125                 xor     edx, edx
.text:0000000000006127                 cmp     esi, 0Ah
.text:000000000000612A                 jz      short loc_6194
.text:000000000000612C                 mov     [rsp+48h+var_48], esi
.text:000000000000612F                 mov     rcx, rsp
.text:0000000000006132                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006139                 mov     rsi, rax
.text:000000000000613C                 mov     [rsp+48h+var_44], 0
.text:0000000000006145                 mov     [rsp+48h+var_3C], 0
.text:000000000000614E                 mov     [rsp+48h+var_34], 0
.text:0000000000006157                 mov     [rsp+48h+var_2C], 0
.text:0000000000006160                 mov     [rsp+48h+var_24], 0
.text:0000000000006169                 mov     [rsp+48h+var_1C], 0
.text:0000000000006172                 mov     [rsp+48h+var_14], 0
.text:000000000000617A                 call    quotearg_n_options
.text:000000000000617F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000006184                 xor     rcx, fs:28h
.text:000000000000618D                 jnz     short loc_6199
.text:000000000000618F                 add     rsp, 48h
.text:0000000000006193                 retn
.text:0000000000006194 ; ---------------------------------------------------------------------------
.text:0000000000006194
.text:0000000000006194 loc_6194:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000006194                 call    _abort
.text:0000000000006199 ; ---------------------------------------------------------------------------
.text:0000000000006199
.text:0000000000006199 loc_6199:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000006199                 call    ___stack_chk_fail
.text:0000000000006199 ; } // starts at 6110
.text:0000000000006199 quotearg_n_style endp
.text:0000000000006199
.text:0000000000006199 ; ---------------------------------------------------------------------------
.text:000000000000619E                 align 20h
.text:00000000000061A0
.text:00000000000061A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061A0
.text:00000000000061A0 ; Attributes: info_from_lumina
.text:00000000000061A0
.text:00000000000061A0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000061A0                 public quotearg_n_style_mem
.text:00000000000061A0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000061A0
.text:00000000000061A0 var_48          = dword ptr -48h
.text:00000000000061A0 var_44          = qword ptr -44h
.text:00000000000061A0 var_3C          = qword ptr -3Ch
.text:00000000000061A0 var_34          = qword ptr -34h
.text:00000000000061A0 var_2C          = qword ptr -2Ch
.text:00000000000061A0 var_24          = qword ptr -24h
.text:00000000000061A0 var_1C          = qword ptr -1Ch
.text:00000000000061A0 var_14          = dword ptr -14h
.text:00000000000061A0 var_10          = qword ptr -10h
.text:00000000000061A0
.text:00000000000061A0 ; __unwind {
.text:00000000000061A0                 sub     rsp, 48h
.text:00000000000061A4                 mov     rax, rdx
.text:00000000000061A7                 mov     rdx, rcx
.text:00000000000061AA                 mov     rcx, fs:28h
.text:00000000000061B3                 mov     [rsp+48h+var_10], rcx
.text:00000000000061B8                 xor     ecx, ecx
.text:00000000000061BA                 cmp     esi, 0Ah
.text:00000000000061BD                 jz      short loc_6220
.text:00000000000061BF                 mov     [rsp+48h+var_48], esi
.text:00000000000061C2                 mov     rcx, rsp
.text:00000000000061C5                 mov     rsi, rax
.text:00000000000061C8                 mov     [rsp+48h+var_44], 0
.text:00000000000061D1                 mov     [rsp+48h+var_3C], 0
.text:00000000000061DA                 mov     [rsp+48h+var_34], 0
.text:00000000000061E3                 mov     [rsp+48h+var_2C], 0
.text:00000000000061EC                 mov     [rsp+48h+var_24], 0
.text:00000000000061F5                 mov     [rsp+48h+var_1C], 0
.text:00000000000061FE                 mov     [rsp+48h+var_14], 0
.text:0000000000006206                 call    quotearg_n_options
.text:000000000000620B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000006210                 xor     rdx, fs:28h
.text:0000000000006219                 jnz     short loc_6225
.text:000000000000621B                 add     rsp, 48h
.text:000000000000621F                 retn
.text:0000000000006220 ; ---------------------------------------------------------------------------
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000006220                 call    _abort
.text:0000000000006225 ; ---------------------------------------------------------------------------
.text:0000000000006225
.text:0000000000006225 loc_6225:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000006225                 call    ___stack_chk_fail
.text:0000000000006225 ; } // starts at 61A0
.text:0000000000006225 quotearg_n_style_mem endp
.text:0000000000006225
.text:0000000000006225 ; ---------------------------------------------------------------------------
.text:000000000000622A                 align 10h
.text:0000000000006230
.text:0000000000006230 ; =============== S U B R O U T I N E =======================================
.text:0000000000006230
.text:0000000000006230
.text:0000000000006230                 public quotearg_style
.text:0000000000006230 quotearg_style  proc near
.text:0000000000006230 ; __unwind {
.text:0000000000006230                 mov     rdx, rsi
.text:0000000000006233                 mov     esi, edi
.text:0000000000006235                 xor     edi, edi
.text:0000000000006237                 jmp     quotearg_n_style
.text:0000000000006237 ; } // starts at 6230
.text:0000000000006237 quotearg_style  endp
.text:0000000000006237
.text:0000000000006237 ; ---------------------------------------------------------------------------
.text:000000000000623C                 align 20h
.text:0000000000006240
.text:0000000000006240 ; =============== S U B R O U T I N E =======================================
.text:0000000000006240
.text:0000000000006240
.text:0000000000006240                 public quotearg_style_mem
.text:0000000000006240 quotearg_style_mem proc near
.text:0000000000006240 ; __unwind {
.text:0000000000006240                 mov     rcx, rdx
.text:0000000000006243                 mov     rdx, rsi
.text:0000000000006246                 mov     esi, edi
.text:0000000000006248                 xor     edi, edi
.text:000000000000624A                 jmp     quotearg_n_style_mem
.text:000000000000624A ; } // starts at 6240
.text:000000000000624A quotearg_style_mem endp
.text:000000000000624A
.text:000000000000624A ; ---------------------------------------------------------------------------
.text:000000000000624F                 align 10h
.text:0000000000006250
.text:0000000000006250 ; =============== S U B R O U T I N E =======================================
.text:0000000000006250
.text:0000000000006250 ; Attributes: info_from_lumina
.text:0000000000006250
.text:0000000000006250 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000006250                 public quotearg_char_mem
.text:0000000000006250 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000006250                                         ; quotearg_colon+C↓j ...
.text:0000000000006250
.text:0000000000006250 var_48          = xmmword ptr -48h
.text:0000000000006250 var_38          = xmmword ptr -38h
.text:0000000000006250 var_28          = xmmword ptr -28h
.text:0000000000006250 var_18          = qword ptr -18h
.text:0000000000006250 var_10          = qword ptr -10h
.text:0000000000006250
.text:0000000000006250 ; __unwind {
.text:0000000000006250                 sub     rsp, 48h
.text:0000000000006254                 mov     ecx, edx
.text:0000000000006256                 mov     rax, fs:28h
.text:000000000000625F                 mov     [rsp+48h+var_10], rax
.text:0000000000006264                 xor     eax, eax
.text:0000000000006266                 mov     rax, cs:qword_20A230
.text:000000000000626D                 mov     r8, rsp
.text:0000000000006270                 and     ecx, 1Fh
.text:0000000000006273                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000627B                 mov     [rsp+48h+var_18], rax
.text:0000000000006280                 mov     eax, edx
.text:0000000000006282                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000006286                 shr     al, 5
.text:0000000000006289                 movzx   eax, al
.text:000000000000628C                 lea     r9, [r8+rax*4+8]
.text:0000000000006291                 movdqa  xmm0, cs:xmmword_20A210
.text:0000000000006299                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000629E                 movdqa  xmm0, cs:xmmword_20A220
.text:00000000000062A6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000062AB                 mov     edx, [r9]
.text:00000000000062AE                 mov     eax, edx
.text:00000000000062B0                 shr     eax, cl
.text:00000000000062B2                 not     eax
.text:00000000000062B4                 and     eax, 1
.text:00000000000062B7                 shl     eax, cl
.text:00000000000062B9                 mov     rcx, r8
.text:00000000000062BC                 xor     eax, edx
.text:00000000000062BE                 mov     rdx, rsi
.text:00000000000062C1                 mov     rsi, rdi
.text:00000000000062C4                 mov     [r9], eax
.text:00000000000062C7                 xor     edi, edi
.text:00000000000062C9                 call    quotearg_n_options
.text:00000000000062CE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000062D3                 xor     rsi, fs:28h
.text:00000000000062DC                 jnz     short loc_62E3
.text:00000000000062DE                 add     rsp, 48h
.text:00000000000062E2                 retn
.text:00000000000062E3 ; ---------------------------------------------------------------------------
.text:00000000000062E3
.text:00000000000062E3 loc_62E3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000062E3                 call    ___stack_chk_fail
.text:00000000000062E3 ; } // starts at 6250
.text:00000000000062E3 quotearg_char_mem endp
.text:00000000000062E3
.text:00000000000062E3 ; ---------------------------------------------------------------------------
.text:00000000000062E8                 align 10h
.text:00000000000062F0
.text:00000000000062F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062F0
.text:00000000000062F0
.text:00000000000062F0                 public quotearg_char
.text:00000000000062F0 quotearg_char   proc near
.text:00000000000062F0 ; __unwind {
.text:00000000000062F0                 movsx   edx, sil
.text:00000000000062F4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000062FB                 jmp     quotearg_char_mem
.text:00000000000062FB ; } // starts at 62F0
.text:00000000000062FB quotearg_char   endp
.text:00000000000062FB
.text:0000000000006300
.text:0000000000006300 ; =============== S U B R O U T I N E =======================================
.text:0000000000006300
.text:0000000000006300
.text:0000000000006300                 public quotearg_colon
.text:0000000000006300 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000006300 ; __unwind {
.text:0000000000006300                 mov     edx, 3Ah ; ':'
.text:0000000000006305                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000630C                 jmp     quotearg_char_mem
.text:000000000000630C ; } // starts at 6300
.text:000000000000630C quotearg_colon  endp
.text:000000000000630C
.text:000000000000630C ; ---------------------------------------------------------------------------
.text:0000000000006311                 align 20h
.text:0000000000006320
.text:0000000000006320 ; =============== S U B R O U T I N E =======================================
.text:0000000000006320
.text:0000000000006320
.text:0000000000006320                 public quotearg_colon_mem
.text:0000000000006320 quotearg_colon_mem proc near
.text:0000000000006320 ; __unwind {
.text:0000000000006320                 mov     edx, 3Ah ; ':'
.text:0000000000006325                 jmp     quotearg_char_mem
.text:0000000000006325 ; } // starts at 6320
.text:0000000000006325 quotearg_colon_mem endp
.text:0000000000006325
.text:0000000000006325 ; ---------------------------------------------------------------------------
.text:000000000000632A                 align 10h
.text:0000000000006330
.text:0000000000006330 ; =============== S U B R O U T I N E =======================================
.text:0000000000006330
.text:0000000000006330 ; Attributes: info_from_lumina
.text:0000000000006330
.text:0000000000006330 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000006330                 public quotearg_n_style_colon
.text:0000000000006330 quotearg_n_style_colon proc near        ; CODE XREF: uptime+65↑p
.text:0000000000006330
.text:0000000000006330 var_48          = dword ptr -48h
.text:0000000000006330 var_44          = qword ptr -44h
.text:0000000000006330 var_3C          = qword ptr -3Ch
.text:0000000000006330 var_34          = qword ptr -34h
.text:0000000000006330 var_2C          = qword ptr -2Ch
.text:0000000000006330 var_24          = qword ptr -24h
.text:0000000000006330 var_1C          = qword ptr -1Ch
.text:0000000000006330 var_14          = dword ptr -14h
.text:0000000000006330 var_10          = qword ptr -10h
.text:0000000000006330
.text:0000000000006330 ; __unwind {
.text:0000000000006330                 sub     rsp, 48h
.text:0000000000006334                 mov     rax, rdx
.text:0000000000006337                 mov     rdx, fs:28h
.text:0000000000006340                 mov     [rsp+48h+var_10], rdx
.text:0000000000006345                 xor     edx, edx
.text:0000000000006347                 cmp     esi, 0Ah
.text:000000000000634A                 jz      short loc_63B4
.text:000000000000634C                 mov     [rsp+48h+var_48], esi
.text:000000000000634F                 mov     rcx, rsp
.text:0000000000006352                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006359                 mov     rsi, rax
.text:000000000000635C                 mov     [rsp+48h+var_44], 0
.text:0000000000006365                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000636E                 mov     [rsp+48h+var_34], 0
.text:0000000000006377                 mov     [rsp+48h+var_2C], 0
.text:0000000000006380                 mov     [rsp+48h+var_24], 0
.text:0000000000006389                 mov     [rsp+48h+var_1C], 0
.text:0000000000006392                 mov     [rsp+48h+var_14], 0
.text:000000000000639A                 call    quotearg_n_options
.text:000000000000639F                 mov     rcx, [rsp+48h+var_10]
.text:00000000000063A4                 xor     rcx, fs:28h
.text:00000000000063AD                 jnz     short loc_63B9
.text:00000000000063AF                 add     rsp, 48h
.text:00000000000063B3                 retn
.text:00000000000063B4 ; ---------------------------------------------------------------------------
.text:00000000000063B4
.text:00000000000063B4 loc_63B4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000063B4                 call    _abort
.text:00000000000063B9 ; ---------------------------------------------------------------------------
.text:00000000000063B9
.text:00000000000063B9 loc_63B9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000063B9                 call    ___stack_chk_fail
.text:00000000000063B9 ; } // starts at 6330
.text:00000000000063B9 quotearg_n_style_colon endp
.text:00000000000063B9
.text:00000000000063B9 ; ---------------------------------------------------------------------------
.text:00000000000063BE                 align 20h
.text:00000000000063C0
.text:00000000000063C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063C0
.text:00000000000063C0 ; Attributes: info_from_lumina
.text:00000000000063C0
.text:00000000000063C0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000063C0                 public quotearg_n_custom_mem
.text:00000000000063C0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000063C0                                         ; quotearg_custom+12↓j ...
.text:00000000000063C0
.text:00000000000063C0 var_48          = xmmword ptr -48h
.text:00000000000063C0 var_38          = xmmword ptr -38h
.text:00000000000063C0 var_28          = xmmword ptr -28h
.text:00000000000063C0 var_18          = qword ptr -18h
.text:00000000000063C0 var_10          = qword ptr -10h
.text:00000000000063C0
.text:00000000000063C0 ; __unwind {
.text:00000000000063C0                 sub     rsp, 48h
.text:00000000000063C4                 mov     r9, rcx
.text:00000000000063C7                 mov     rcx, cs:qword_20A230
.text:00000000000063CE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000063D6                 mov     rax, fs:28h
.text:00000000000063DF                 mov     [rsp+48h+var_10], rax
.text:00000000000063E4                 xor     eax, eax
.text:00000000000063E6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000063EA                 test    rsi, rsi
.text:00000000000063ED                 mov     [rsp+48h+var_18], rcx
.text:00000000000063F2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000063F9                 movdqa  xmm0, cs:xmmword_20A210
.text:0000000000006401                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000006406                 movdqa  xmm0, cs:xmmword_20A220
.text:000000000000640E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000006413                 jz      short loc_6447
.text:0000000000006415                 test    rdx, rdx
.text:0000000000006418                 jz      short loc_6447
.text:000000000000641A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000641F                 mov     [rsp+48h+var_18], rdx
.text:0000000000006424                 mov     rcx, rsp
.text:0000000000006427                 mov     rdx, r8
.text:000000000000642A                 mov     rsi, r9
.text:000000000000642D                 call    quotearg_n_options
.text:0000000000006432                 mov     rdi, [rsp+48h+var_10]
.text:0000000000006437                 xor     rdi, fs:28h
.text:0000000000006440                 jnz     short loc_644C
.text:0000000000006442                 add     rsp, 48h
.text:0000000000006446                 retn
.text:0000000000006447 ; ---------------------------------------------------------------------------
.text:0000000000006447
.text:0000000000006447 loc_6447:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000006447                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000006447                 call    _abort
.text:000000000000644C ; ---------------------------------------------------------------------------
.text:000000000000644C
.text:000000000000644C loc_644C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000644C                 call    ___stack_chk_fail
.text:000000000000644C ; } // starts at 63C0
.text:000000000000644C quotearg_n_custom_mem endp
.text:000000000000644C
.text:000000000000644C ; ---------------------------------------------------------------------------
.text:0000000000006451                 align 20h
.text:0000000000006460
.text:0000000000006460 ; =============== S U B R O U T I N E =======================================
.text:0000000000006460
.text:0000000000006460
.text:0000000000006460                 public quotearg_n_custom
.text:0000000000006460 quotearg_n_custom proc near
.text:0000000000006460 ; __unwind {
.text:0000000000006460                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000006467                 jmp     quotearg_n_custom_mem
.text:0000000000006467 ; } // starts at 6460
.text:0000000000006467 quotearg_n_custom endp
.text:0000000000006467
.text:0000000000006467 ; ---------------------------------------------------------------------------
.text:000000000000646C                 align 10h
.text:0000000000006470
.text:0000000000006470 ; =============== S U B R O U T I N E =======================================
.text:0000000000006470
.text:0000000000006470
.text:0000000000006470                 public quotearg_custom
.text:0000000000006470 quotearg_custom proc near
.text:0000000000006470 ; __unwind {
.text:0000000000006470                 mov     rcx, rdx
.text:0000000000006473                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000647A                 mov     rdx, rsi
.text:000000000000647D                 mov     rsi, rdi
.text:0000000000006480                 xor     edi, edi
.text:0000000000006482                 jmp     quotearg_n_custom_mem
.text:0000000000006482 ; } // starts at 6470
.text:0000000000006482 quotearg_custom endp
.text:0000000000006482
.text:0000000000006482 ; ---------------------------------------------------------------------------
.text:0000000000006487                 align 10h
.text:0000000000006490
.text:0000000000006490 ; =============== S U B R O U T I N E =======================================
.text:0000000000006490
.text:0000000000006490
.text:0000000000006490                 public quotearg_custom_mem
.text:0000000000006490 quotearg_custom_mem proc near
.text:0000000000006490 ; __unwind {
.text:0000000000006490                 mov     r8, rcx
.text:0000000000006493                 mov     rcx, rdx
.text:0000000000006496                 mov     rdx, rsi
.text:0000000000006499                 mov     rsi, rdi
.text:000000000000649C                 xor     edi, edi
.text:000000000000649E                 jmp     quotearg_n_custom_mem
.text:000000000000649E ; } // starts at 6490
.text:000000000000649E quotearg_custom_mem endp
.text:000000000000649E
.text:000000000000649E ; ---------------------------------------------------------------------------
.text:00000000000064A3                 align 10h
.text:00000000000064B0
.text:00000000000064B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064B0
.text:00000000000064B0
.text:00000000000064B0                 public quote_n_mem
.text:00000000000064B0 quote_n_mem     proc near
.text:00000000000064B0 ; __unwind {
.text:00000000000064B0                 lea     rcx, quote_quoting_options
.text:00000000000064B7                 jmp     quotearg_n_options
.text:00000000000064B7 ; } // starts at 64B0
.text:00000000000064B7 quote_n_mem     endp
.text:00000000000064B7
.text:00000000000064B7 ; ---------------------------------------------------------------------------
.text:00000000000064BC                 align 20h
.text:00000000000064C0
.text:00000000000064C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064C0
.text:00000000000064C0
.text:00000000000064C0                 public quote_mem
.text:00000000000064C0 quote_mem       proc near
.text:00000000000064C0 ; __unwind {
.text:00000000000064C0                 lea     rcx, quote_quoting_options
.text:00000000000064C7                 mov     rdx, rsi
.text:00000000000064CA                 mov     rsi, rdi
.text:00000000000064CD                 xor     edi, edi
.text:00000000000064CF                 jmp     quotearg_n_options
.text:00000000000064CF ; } // starts at 64C0
.text:00000000000064CF quote_mem       endp
.text:00000000000064CF
.text:00000000000064CF ; ---------------------------------------------------------------------------
.text:00000000000064D4                 align 20h
.text:00000000000064E0
.text:00000000000064E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064E0
.text:00000000000064E0
.text:00000000000064E0                 public quote_n
.text:00000000000064E0 quote_n         proc near
.text:00000000000064E0 ; __unwind {
.text:00000000000064E0                 lea     rcx, quote_quoting_options
.text:00000000000064E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000064EE                 jmp     quotearg_n_options
.text:00000000000064EE ; } // starts at 64E0
.text:00000000000064EE quote_n         endp
.text:00000000000064EE
.text:00000000000064EE ; ---------------------------------------------------------------------------
.text:00000000000064F3                 align 20h
.text:0000000000006500
.text:0000000000006500 ; =============== S U B R O U T I N E =======================================
.text:0000000000006500
.text:0000000000006500
.text:0000000000006500                 public quote
.text:0000000000006500 quote           proc near               ; CODE XREF: main+DD↑p
.text:0000000000006500 ; __unwind {
.text:0000000000006500                 lea     rcx, quote_quoting_options
.text:0000000000006507                 mov     rsi, rdi
.text:000000000000650A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006511                 xor     edi, edi
.text:0000000000006513                 jmp     quotearg_n_options
.text:0000000000006513 ; } // starts at 6500
.text:0000000000006513 quote           endp
.text:0000000000006513
.text:0000000000006513 ; ---------------------------------------------------------------------------
.text:0000000000006518                 align 20h
.text:0000000000006520
.text:0000000000006520 ; =============== S U B R O U T I N E =======================================
.text:0000000000006520
.text:0000000000006520
.text:0000000000006520 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000006520                 public version_etc_arn
.text:0000000000006520 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_695B↓j
.text:0000000000006520                                         ; version_etc_va:loc_69AB↓p ...
.text:0000000000006520
.text:0000000000006520 var_58          = qword ptr -58h
.text:0000000000006520 var_50          = qword ptr -50h
.text:0000000000006520 var_48          = qword ptr -48h
.text:0000000000006520 var_40          = qword ptr -40h
.text:0000000000006520
.text:0000000000006520 ; __unwind {
.text:0000000000006520                 push    r15
.text:0000000000006522                 push    r14
.text:0000000000006524                 push    r13
.text:0000000000006526                 push    r12
.text:0000000000006528                 mov     r12, r9
.text:000000000000652B                 push    rbp
.text:000000000000652C                 push    rbx
.text:000000000000652D                 mov     rbp, rdi
.text:0000000000006530                 mov     rbx, r8
.text:0000000000006533                 sub     rsp, 28h
.text:0000000000006537                 test    rsi, rsi
.text:000000000000653A                 jz      loc_6658
.text:0000000000006540                 mov     r8, rdx
.text:0000000000006543                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000654A                 mov     r9, rcx
.text:000000000000654D                 xor     eax, eax
.text:000000000000654F                 mov     rcx, rsi
.text:0000000000006552                 mov     esi, 1
.text:0000000000006557                 call    ___fprintf_chk
.text:000000000000655C
.text:000000000000655C loc_655C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000655C                 lea     rsi, aC         ; "(C)"
.text:0000000000006563                 xor     edi, edi        ; domainname
.text:0000000000006565                 mov     edx, 5          ; category
.text:000000000000656A                 call    _dcgettext
.text:000000000000656F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000006576                 mov     rcx, rax
.text:0000000000006579                 mov     r8d, 7E3h
.text:000000000000657F                 mov     esi, 1
.text:0000000000006584                 mov     rdi, rbp
.text:0000000000006587                 xor     eax, eax
.text:0000000000006589                 call    ___fprintf_chk
.text:000000000000658E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000006595                 xor     edi, edi        ; domainname
.text:0000000000006597                 mov     edx, 5          ; category
.text:000000000000659C                 call    _dcgettext
.text:00000000000065A1                 mov     rsi, rbp        ; stream
.text:00000000000065A4                 mov     rdi, rax        ; s
.text:00000000000065A7                 call    _fputs_unlocked
.text:00000000000065AC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000065B0                 ja      def_65C4        ; jumptable 00000000000065C4 default case
.text:00000000000065B6                 lea     rdx, jpt_65C4
.text:00000000000065BD                 movsxd  rax, ds:(jpt_65C4 - 87A8h)[rdx+r12*4]
.text:00000000000065C1                 add     rax, rdx
.text:00000000000065C4                 jmp     rax             ; switch jump
.text:00000000000065C4 ; ---------------------------------------------------------------------------
.text:00000000000065C6                 align 10h
.text:00000000000065D0
.text:00000000000065D0 loc_65D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000065D0                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:00000000000065D0                 mov     r9, [rbx+38h]   ; jumptable 00000000000065C4 case 8
.text:00000000000065D4                 mov     rax, [rbx+10h]
.text:00000000000065D8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000065DF                 mov     r8, [rbx+8]
.text:00000000000065E3                 mov     edx, 5          ; category
.text:00000000000065E8                 xor     edi, edi        ; domainname
.text:00000000000065EA                 mov     r13, [rbx+30h]
.text:00000000000065EE                 mov     r12, [rbx+28h]
.text:00000000000065F2                 mov     [rsp+58h+var_48], r9
.text:00000000000065F7                 mov     r15, [rbx+20h]
.text:00000000000065FB                 mov     r14, [rbx+18h]
.text:00000000000065FF                 mov     [rsp+58h+var_58], rax
.text:0000000000006603                 mov     [rsp+58h+var_50], r8
.text:0000000000006608                 mov     rbx, [rbx]
.text:000000000000660B                 call    _dcgettext
.text:0000000000006610                 sub     rsp, 8
.text:0000000000006614
.text:0000000000006614 loc_6614:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000006614                 mov     r9, [rsp+60h+var_48]
.text:0000000000006619                 mov     rdx, rax
.text:000000000000661C                 mov     rcx, rbx
.text:000000000000661F                 mov     esi, 1
.text:0000000000006624                 mov     rdi, rbp
.text:0000000000006627                 xor     eax, eax
.text:0000000000006629                 push    r9
.text:000000000000662B                 push    r13
.text:000000000000662D                 push    r12
.text:000000000000662F                 push    r15
.text:0000000000006631                 push    r14
.text:0000000000006633                 mov     r9, [rsp+88h+var_58]
.text:0000000000006638                 mov     r8, [rsp+88h+var_50]
.text:000000000000663D                 call    ___fprintf_chk
.text:0000000000006642                 add     rsp, 30h
.text:0000000000006646
.text:0000000000006646 loc_6646:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006646                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:0000000000006646                 add     rsp, 28h        ; jumptable 00000000000065C4 case 0
.text:000000000000664A                 pop     rbx
.text:000000000000664B                 pop     rbp
.text:000000000000664C                 pop     r12
.text:000000000000664E                 pop     r13
.text:0000000000006650                 pop     r14
.text:0000000000006652                 pop     r15
.text:0000000000006654                 retn
.text:0000000000006654 ; ---------------------------------------------------------------------------
.text:0000000000006655                 align 8
.text:0000000000006658
.text:0000000000006658 loc_6658:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000006658                 mov     r8, rcx
.text:000000000000665B                 mov     rcx, rdx
.text:000000000000665E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000006665                 mov     esi, 1
.text:000000000000666A                 xor     eax, eax
.text:000000000000666C                 call    ___fprintf_chk
.text:0000000000006671                 jmp     loc_655C
.text:0000000000006671 ; ---------------------------------------------------------------------------
.text:0000000000006676                 align 20h
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006680                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:0000000000006680                 mov     r10, [rbx+40h]  ; jumptable 00000000000065C4 case 9
.text:0000000000006684                 mov     r9, [rbx+38h]
.text:0000000000006688                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000668F                 mov     rax, [rbx+10h]
.text:0000000000006693                 mov     r8, [rbx+8]
.text:0000000000006697                 mov     edx, 5          ; category
.text:000000000000669C                 mov     r13, [rbx+30h]
.text:00000000000066A0                 mov     r12, [rbx+28h]
.text:00000000000066A4                 mov     r15, [rbx+20h]
.text:00000000000066A8                 mov     r14, [rbx+18h]
.text:00000000000066AC                 mov     rbx, [rbx]
.text:00000000000066AF                 mov     [rsp+58h+var_40], r10
.text:00000000000066B4                 mov     [rsp+58h+var_48], r9
.text:00000000000066B9                 mov     [rsp+58h+var_58], rax
.text:00000000000066BD                 mov     [rsp+58h+var_50], r8
.text:00000000000066C2
.text:00000000000066C2 loc_66C2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000066C2                 xor     edi, edi        ; domainname
.text:00000000000066C4                 call    _dcgettext
.text:00000000000066C9                 mov     r10, [rsp+58h+var_40]
.text:00000000000066CE                 push    r10
.text:00000000000066D0                 jmp     loc_6614
.text:00000000000066D0 ; ---------------------------------------------------------------------------
.text:00000000000066D5                 align 8
.text:00000000000066D8
.text:00000000000066D8 loc_66D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000066D8                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:00000000000066D8                 mov     rbx, [rbx]      ; jumptable 00000000000065C4 case 1
.text:00000000000066DB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000066E2                 mov     edx, 5          ; category
.text:00000000000066E7                 xor     edi, edi        ; domainname
.text:00000000000066E9                 call    _dcgettext
.text:00000000000066EE                 add     rsp, 28h
.text:00000000000066F2                 mov     rcx, rbx
.text:00000000000066F5                 mov     rdi, rbp
.text:00000000000066F8                 pop     rbx
.text:00000000000066F9                 pop     rbp
.text:00000000000066FA                 pop     r12
.text:00000000000066FC                 pop     r13
.text:00000000000066FE                 pop     r14
.text:0000000000006700                 pop     r15
.text:0000000000006702                 mov     rdx, rax
.text:0000000000006705                 mov     esi, 1
.text:000000000000670A                 xor     eax, eax
.text:000000000000670C                 jmp     ___fprintf_chk
.text:000000000000670C ; ---------------------------------------------------------------------------
.text:0000000000006711                 align 8
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006718                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:0000000000006718                 mov     r12, [rbx+8]    ; jumptable 00000000000065C4 case 2
.text:000000000000671C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000006723                 mov     rbx, [rbx]
.text:0000000000006726                 mov     edx, 5          ; category
.text:000000000000672B                 xor     edi, edi        ; domainname
.text:000000000000672D                 call    _dcgettext
.text:0000000000006732                 add     rsp, 28h
.text:0000000000006736                 mov     r8, r12
.text:0000000000006739                 mov     rcx, rbx
.text:000000000000673C                 mov     rdi, rbp
.text:000000000000673F                 mov     rdx, rax
.text:0000000000006742                 mov     esi, 1
.text:0000000000006747                 pop     rbx
.text:0000000000006748                 pop     rbp
.text:0000000000006749                 pop     r12
.text:000000000000674B                 pop     r13
.text:000000000000674D                 pop     r14
.text:000000000000674F                 pop     r15
.text:0000000000006751                 xor     eax, eax
.text:0000000000006753                 jmp     ___fprintf_chk
.text:0000000000006753 ; ---------------------------------------------------------------------------
.text:0000000000006758                 align 20h
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006760                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:0000000000006760                 mov     r13, [rbx+10h]  ; jumptable 00000000000065C4 case 3
.text:0000000000006764                 mov     r12, [rbx+8]
.text:0000000000006768                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000676F                 mov     rbx, [rbx]
.text:0000000000006772                 mov     edx, 5          ; category
.text:0000000000006777                 xor     edi, edi        ; domainname
.text:0000000000006779                 call    _dcgettext
.text:000000000000677E                 add     rsp, 28h
.text:0000000000006782                 mov     r9, r13
.text:0000000000006785                 mov     r8, r12
.text:0000000000006788                 mov     rcx, rbx
.text:000000000000678B                 mov     rdi, rbp
.text:000000000000678E                 mov     rdx, rax
.text:0000000000006791                 pop     rbx
.text:0000000000006792                 pop     rbp
.text:0000000000006793                 pop     r12
.text:0000000000006795                 pop     r13
.text:0000000000006797                 pop     r14
.text:0000000000006799                 pop     r15
.text:000000000000679B                 mov     esi, 1
.text:00000000000067A0                 xor     eax, eax
.text:00000000000067A2                 jmp     ___fprintf_chk
.text:00000000000067A2 ; ---------------------------------------------------------------------------
.text:00000000000067A7                 align 10h
.text:00000000000067B0
.text:00000000000067B0 loc_67B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000067B0                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:00000000000067B0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000065C4 case 4
.text:00000000000067B7                 mov     edx, 5          ; category
.text:00000000000067BC                 xor     edi, edi        ; domainname
.text:00000000000067BE                 mov     r14, [rbx+18h]
.text:00000000000067C2                 mov     r13, [rbx+10h]
.text:00000000000067C6                 mov     r12, [rbx+8]
.text:00000000000067CA                 mov     rbx, [rbx]
.text:00000000000067CD                 call    _dcgettext
.text:00000000000067D2                 sub     rsp, 8
.text:00000000000067D6
.text:00000000000067D6 loc_67D6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000067D6                 push    r14
.text:00000000000067D8                 mov     rdx, rax
.text:00000000000067DB                 mov     r9, r13
.text:00000000000067DE                 mov     r8, r12
.text:00000000000067E1                 mov     rcx, rbx
.text:00000000000067E4                 mov     rdi, rbp
.text:00000000000067E7                 mov     esi, 1
.text:00000000000067EC                 xor     eax, eax
.text:00000000000067EE                 call    ___fprintf_chk
.text:00000000000067F3                 pop     rax
.text:00000000000067F4                 pop     rdx
.text:00000000000067F5                 add     rsp, 28h
.text:00000000000067F9                 pop     rbx
.text:00000000000067FA                 pop     rbp
.text:00000000000067FB                 pop     r12
.text:00000000000067FD                 pop     r13
.text:00000000000067FF                 pop     r14
.text:0000000000006801                 pop     r15
.text:0000000000006803                 retn
.text:0000000000006803 ; ---------------------------------------------------------------------------
.text:0000000000006804                 align 8
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006808                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:0000000000006808                 mov     r15, [rbx+20h]  ; jumptable 00000000000065C4 case 5
.text:000000000000680C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006813                 mov     edx, 5          ; category
.text:0000000000006818                 xor     edi, edi        ; domainname
.text:000000000000681A                 mov     r14, [rbx+18h]
.text:000000000000681E                 mov     r13, [rbx+10h]
.text:0000000000006822                 mov     r12, [rbx+8]
.text:0000000000006826                 mov     rbx, [rbx]
.text:0000000000006829                 call    _dcgettext
.text:000000000000682E                 push    r15
.text:0000000000006830                 jmp     short loc_67D6
.text:0000000000006830 ; ---------------------------------------------------------------------------
.text:0000000000006832                 align 8
.text:0000000000006838
.text:0000000000006838 loc_6838:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006838                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:0000000000006838                 mov     r8, [rbx+8]     ; jumptable 00000000000065C4 case 6
.text:000000000000683C                 mov     r12, [rbx+28h]
.text:0000000000006840                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000006847                 mov     r15, [rbx+20h]
.text:000000000000684B                 mov     r14, [rbx+18h]
.text:000000000000684F                 mov     edx, 5          ; category
.text:0000000000006854                 mov     r13, [rbx+10h]
.text:0000000000006858                 xor     edi, edi        ; domainname
.text:000000000000685A                 mov     rbx, [rbx]
.text:000000000000685D                 mov     [rsp+58h+var_58], r8
.text:0000000000006861                 call    _dcgettext
.text:0000000000006866                 sub     rsp, 8
.text:000000000000686A                 mov     r9, r13
.text:000000000000686D                 push    r12
.text:000000000000686F                 push    r15
.text:0000000000006871                 push    r14
.text:0000000000006873
.text:0000000000006873 loc_6873:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000006873                 mov     r8, [rsp+78h+var_58]
.text:0000000000006878                 mov     rcx, rbx
.text:000000000000687B                 mov     rdx, rax
.text:000000000000687E                 mov     rdi, rbp
.text:0000000000006881                 mov     esi, 1
.text:0000000000006886                 xor     eax, eax
.text:0000000000006888                 call    ___fprintf_chk
.text:000000000000688D                 add     rsp, 20h
.text:0000000000006891                 add     rsp, 28h
.text:0000000000006895                 pop     rbx
.text:0000000000006896                 pop     rbp
.text:0000000000006897                 pop     r12
.text:0000000000006899                 pop     r13
.text:000000000000689B                 pop     r14
.text:000000000000689D                 pop     r15
.text:000000000000689F                 retn
.text:00000000000068A0 ; ---------------------------------------------------------------------------
.text:00000000000068A0
.text:00000000000068A0 loc_68A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000068A0                                         ; DATA XREF: .rodata:jpt_65C4↓o
.text:00000000000068A0                 mov     r9, [rbx+10h]   ; jumptable 00000000000065C4 case 7
.text:00000000000068A4                 mov     r13, [rbx+30h]
.text:00000000000068A8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000068AF                 mov     r12, [rbx+28h]
.text:00000000000068B3                 mov     r15, [rbx+20h]
.text:00000000000068B7                 mov     edx, 5          ; category
.text:00000000000068BC                 mov     r14, [rbx+18h]
.text:00000000000068C0                 mov     r8, [rbx+8]
.text:00000000000068C4                 xor     edi, edi        ; domainname
.text:00000000000068C6                 mov     [rsp+58h+var_50], r9
.text:00000000000068CB                 mov     rbx, [rbx]
.text:00000000000068CE                 mov     [rsp+58h+var_58], r8
.text:00000000000068D2                 call    _dcgettext
.text:00000000000068D7                 push    r13
.text:00000000000068D9                 push    r12
.text:00000000000068DB                 push    r15
.text:00000000000068DD                 push    r14
.text:00000000000068DF                 mov     r9, [rsp+78h+var_50]
.text:00000000000068E4                 jmp     short loc_6873
.text:00000000000068E4 ; ---------------------------------------------------------------------------
.text:00000000000068E6                 align 10h
.text:00000000000068F0
.text:00000000000068F0 def_65C4:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000068F0                 mov     r10, [rbx+40h]  ; jumptable 00000000000065C4 default case
.text:00000000000068F4                 mov     r9, [rbx+38h]
.text:00000000000068F8                 mov     edx, 5
.text:00000000000068FD                 mov     rax, [rbx+10h]
.text:0000000000006901                 mov     r8, [rbx+8]
.text:0000000000006905                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000690C                 mov     r13, [rbx+30h]
.text:0000000000006910                 mov     r12, [rbx+28h]
.text:0000000000006914                 mov     r15, [rbx+20h]
.text:0000000000006918                 mov     r14, [rbx+18h]
.text:000000000000691C                 mov     [rsp+58h+var_40], r10
.text:0000000000006921                 mov     [rsp+58h+var_48], r9
.text:0000000000006926                 mov     [rsp+58h+var_58], rax
.text:000000000000692A                 mov     [rsp+58h+var_50], r8
.text:000000000000692F                 mov     rbx, [rbx]
.text:0000000000006932                 jmp     loc_66C2
.text:0000000000006932 ; } // starts at 6520
.text:0000000000006932 version_etc_arn endp
.text:0000000000006932
.text:0000000000006932 ; ---------------------------------------------------------------------------
.text:0000000000006937                 align 20h
.text:0000000000006940
.text:0000000000006940 ; =============== S U B R O U T I N E =======================================
.text:0000000000006940
.text:0000000000006940 ; Attributes: info_from_lumina
.text:0000000000006940
.text:0000000000006940 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000006940                 public version_etc_ar
.text:0000000000006940 version_etc_ar  proc near
.text:0000000000006940 ; __unwind {
.text:0000000000006940                 xor     r9d, r9d
.text:0000000000006943                 cmp     qword ptr [r8], 0
.text:0000000000006947                 jz      short loc_695B
.text:0000000000006949                 nop     dword ptr [rax+00000000h]
.text:0000000000006950
.text:0000000000006950 loc_6950:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000006950                 add     r9, 1
.text:0000000000006954                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000006959                 jnz     short loc_6950
.text:000000000000695B
.text:000000000000695B loc_695B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000695B                 jmp     version_etc_arn
.text:000000000000695B ; } // starts at 6940
.text:000000000000695B version_etc_ar  endp
.text:000000000000695B
.text:0000000000006960
.text:0000000000006960 ; =============== S U B R O U T I N E =======================================
.text:0000000000006960
.text:0000000000006960 ; Attributes: info_from_lumina
.text:0000000000006960
.text:0000000000006960 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000006960                 public version_etc_va
.text:0000000000006960 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000006960                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000006960
.text:0000000000006960 authtab         = qword ptr -68h
.text:0000000000006960 var_10          = qword ptr -10h
.text:0000000000006960
.text:0000000000006960 ; __unwind {
.text:0000000000006960                 sub     rsp, 68h
.text:0000000000006964                 mov     r10, r8
.text:0000000000006967                 xor     r9d, r9d
.text:000000000000696A                 mov     rax, fs:28h
.text:0000000000006973                 mov     [rsp+68h+var_10], rax
.text:0000000000006978                 xor     eax, eax
.text:000000000000697A                 mov     r8, rsp
.text:000000000000697D                 nop     dword ptr [rax]
.text:0000000000006980
.text:0000000000006980 loc_6980:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006980                 mov     eax, [r10]
.text:0000000000006983                 cmp     eax, 2Fh ; '/'
.text:0000000000006986                 ja      short loc_69CA
.text:0000000000006988                 mov     r11d, eax
.text:000000000000698B                 add     r11, [r10+10h]
.text:000000000000698F                 add     eax, 8
.text:0000000000006992                 mov     [r10], eax
.text:0000000000006995
.text:0000000000006995 loc_6995:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006995                 mov     rax, [r11]
.text:0000000000006998                 test    rax, rax
.text:000000000000699B                 mov     [r8+r9*8], rax
.text:000000000000699F                 jz      short loc_69AB
.text:00000000000069A1                 add     r9, 1
.text:00000000000069A5                 cmp     r9, 0Ah
.text:00000000000069A9                 jnz     short loc_6980
.text:00000000000069AB
.text:00000000000069AB loc_69AB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000069AB                 call    version_etc_arn
.text:00000000000069B0                 mov     rax, [rsp+68h+var_10]
.text:00000000000069B5                 xor     rax, fs:28h
.text:00000000000069BE                 jnz     short loc_69C5
.text:00000000000069C0                 add     rsp, 68h
.text:00000000000069C4                 retn
.text:00000000000069C5 ; ---------------------------------------------------------------------------
.text:00000000000069C5
.text:00000000000069C5 loc_69C5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000069C5                 call    ___stack_chk_fail
.text:00000000000069CA ; ---------------------------------------------------------------------------
.text:00000000000069CA
.text:00000000000069CA loc_69CA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000069CA                 mov     r11, [r10+8]
.text:00000000000069CE                 lea     rax, [r11+8]
.text:00000000000069D2                 mov     [r10+8], rax
.text:00000000000069D6                 jmp     short loc_6995
.text:00000000000069D6 ; } // starts at 6960
.text:00000000000069D6 version_etc_va  endp
.text:00000000000069D6
.text:00000000000069D6 ; ---------------------------------------------------------------------------
.text:00000000000069D8                 align 20h
.text:00000000000069E0
.text:00000000000069E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069E0
.text:00000000000069E0 ; Attributes: info_from_lumina
.text:00000000000069E0
.text:00000000000069E0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000069E0                 public version_etc
.text:00000000000069E0 version_etc     proc near
.text:00000000000069E0
.text:00000000000069E0 var_C0          = dword ptr -0C0h
.text:00000000000069E0 var_B8          = qword ptr -0B8h
.text:00000000000069E0 var_B0          = qword ptr -0B0h
.text:00000000000069E0 var_A8          = byte ptr -0A8h
.text:00000000000069E0 var_50          = qword ptr -50h
.text:00000000000069E0 var_48          = byte ptr -48h
.text:00000000000069E0 var_28          = qword ptr -28h
.text:00000000000069E0 var_20          = qword ptr -20h
.text:00000000000069E0 arg_0           = byte ptr  8
.text:00000000000069E0
.text:00000000000069E0 ; __unwind {
.text:00000000000069E0                 push    rbp
.text:00000000000069E1                 push    rbx
.text:00000000000069E2                 mov     r10d, 20h ; ' '
.text:00000000000069E8                 xor     r11d, r11d
.text:00000000000069EB                 sub     rsp, 0B8h
.text:00000000000069F2                 mov     rax, fs:28h
.text:00000000000069FB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006A00                 xor     eax, eax
.text:0000000000006A02                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000006A0A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006A12                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000006A1A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000006A1F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006A27                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000006A2F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006A34                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000006A3C                 xor     r9d, r9d
.text:0000000000006A3F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000006A44                 mov     rbp, rax
.text:0000000000006A47                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006A50
.text:0000000000006A50 loc_6A50:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000006A50                 cmp     r10d, 2Fh ; '/'
.text:0000000000006A54                 ja      short loc_6AAC
.text:0000000000006A56                 mov     eax, r10d
.text:0000000000006A59                 mov     r11d, 1
.text:0000000000006A5F                 add     r10d, 8
.text:0000000000006A63                 add     rax, rbp
.text:0000000000006A66
.text:0000000000006A66 loc_6A66:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006A66                 mov     rax, [rax]
.text:0000000000006A69                 test    rax, rax
.text:0000000000006A6C                 mov     [r8+r9*8], rax
.text:0000000000006A70                 jz      short loc_6A7C
.text:0000000000006A72                 add     r9, 1
.text:0000000000006A76                 cmp     r9, 0Ah
.text:0000000000006A7A                 jnz     short loc_6A50
.text:0000000000006A7C
.text:0000000000006A7C loc_6A7C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000006A7C                 test    r11b, r11b
.text:0000000000006A7F                 jnz     short loc_6AA5
.text:0000000000006A81
.text:0000000000006A81 loc_6A81:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006A81                 call    version_etc_arn
.text:0000000000006A86                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000006A8B                 xor     rax, fs:28h
.text:0000000000006A94                 jnz     short loc_6AA0
.text:0000000000006A96                 add     rsp, 0B8h
.text:0000000000006A9D                 pop     rbx
.text:0000000000006A9E                 pop     rbp
.text:0000000000006A9F                 retn
.text:0000000000006AA0 ; ---------------------------------------------------------------------------
.text:0000000000006AA0
.text:0000000000006AA0 loc_6AA0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006AA0                 call    ___stack_chk_fail
.text:0000000000006AA5 ; ---------------------------------------------------------------------------
.text:0000000000006AA5
.text:0000000000006AA5 loc_6AA5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006AA5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000006AAA                 jmp     short loc_6A81
.text:0000000000006AAC ; ---------------------------------------------------------------------------
.text:0000000000006AAC
.text:0000000000006AAC loc_6AAC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000006AAC                 mov     rax, rbx
.text:0000000000006AAF                 add     rbx, 8
.text:0000000000006AB3                 jmp     short loc_6A66
.text:0000000000006AB3 ; } // starts at 69E0
.text:0000000000006AB3 version_etc     endp
.text:0000000000006AB3
.text:0000000000006AB3 ; ---------------------------------------------------------------------------
.text:0000000000006AB5                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AC0
.text:0000000000006AC0 ; Attributes: info_from_lumina
.text:0000000000006AC0
.text:0000000000006AC0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006AC0                 public emit_bug_reporting_address
.text:0000000000006AC0 emit_bug_reporting_address proc near
.text:0000000000006AC0 ; __unwind {
.text:0000000000006AC0                 push    rbx
.text:0000000000006AC1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006AC8                 mov     edx, 5          ; category
.text:0000000000006ACD                 xor     edi, edi        ; domainname
.text:0000000000006ACF                 call    _dcgettext
.text:0000000000006AD4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000006ADB                 mov     rsi, rax
.text:0000000000006ADE                 mov     edi, 1
.text:0000000000006AE3                 xor     eax, eax
.text:0000000000006AE5                 call    ___printf_chk
.text:0000000000006AEA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006AF1                 mov     edx, 5          ; category
.text:0000000000006AF6                 xor     edi, edi        ; domainname
.text:0000000000006AF8                 call    _dcgettext
.text:0000000000006AFD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006B04                 lea     rdx, unk_7A34
.text:0000000000006B0B                 mov     rsi, rax
.text:0000000000006B0E                 mov     edi, 1
.text:0000000000006B13                 xor     eax, eax
.text:0000000000006B15                 call    ___printf_chk
.text:0000000000006B1A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006B21                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006B28                 xor     edi, edi        ; domainname
.text:0000000000006B2A                 mov     edx, 5          ; category
.text:0000000000006B2F                 call    _dcgettext
.text:0000000000006B34                 mov     rsi, rbx        ; stream
.text:0000000000006B37                 mov     rdi, rax        ; s
.text:0000000000006B3A                 pop     rbx
.text:0000000000006B3B                 jmp     _fputs_unlocked
.text:0000000000006B3B ; } // starts at 6AC0
.text:0000000000006B3B emit_bug_reporting_address endp
.text:0000000000006B3B
.text:0000000000006B40
.text:0000000000006B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B40
.text:0000000000006B40
.text:0000000000006B40                 public xmalloc
.text:0000000000006B40 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000006B40                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000006B40 ; __unwind {
.text:0000000000006B40                 push    rbx
.text:0000000000006B41                 mov     rbx, rdi
.text:0000000000006B44                 call    _malloc
.text:0000000000006B49                 test    rax, rax
.text:0000000000006B4C                 jnz     short loc_6B53
.text:0000000000006B4E                 test    rbx, rbx
.text:0000000000006B51                 jnz     short loc_6B55
.text:0000000000006B53
.text:0000000000006B53 loc_6B53:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000006B53                 pop     rbx
.text:0000000000006B54                 retn
.text:0000000000006B55 ; ---------------------------------------------------------------------------
.text:0000000000006B55
.text:0000000000006B55 loc_6B55:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000006B55                 call    xalloc_die
.text:0000000000006B55 ; } // starts at 6B40
.text:0000000000006B55 xmalloc         endp
.text:0000000000006B55
.text:0000000000006B55 ; ---------------------------------------------------------------------------
.text:0000000000006B5A                 align 20h
.text:0000000000006B60
.text:0000000000006B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B60
.text:0000000000006B60 ; Attributes: info_from_lumina
.text:0000000000006B60
.text:0000000000006B60 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006B60                 public xnmalloc
.text:0000000000006B60 xnmalloc        proc near
.text:0000000000006B60 ; __unwind {
.text:0000000000006B60                 mov     rax, rdi
.text:0000000000006B63                 mul     rsi
.text:0000000000006B66                 mov     rdi, rax
.text:0000000000006B69                 seto    al
.text:0000000000006B6C                 test    rdi, rdi
.text:0000000000006B6F                 js      short loc_6B7B
.text:0000000000006B71                 movzx   eax, al
.text:0000000000006B74                 test    rax, rax
.text:0000000000006B77                 jnz     short loc_6B7B
.text:0000000000006B79                 jmp     short xmalloc
.text:0000000000006B7B ; ---------------------------------------------------------------------------
.text:0000000000006B7B
.text:0000000000006B7B loc_6B7B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000006B7B                                         ; xnmalloc+17↑j
.text:0000000000006B7B                 sub     rsp, 8
.text:0000000000006B7F                 call    xalloc_die
.text:0000000000006B7F ; } // starts at 6B60
.text:0000000000006B7F xnmalloc        endp
.text:0000000000006B7F
.text:0000000000006B7F ; ---------------------------------------------------------------------------
.text:0000000000006B84                 align 10h
.text:0000000000006B90
.text:0000000000006B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B90
.text:0000000000006B90
.text:0000000000006B90                 public xcharalloc
.text:0000000000006B90 xcharalloc      proc near
.text:0000000000006B90 ; __unwind {
.text:0000000000006B90                 jmp     short xmalloc
.text:0000000000006B90 ; } // starts at 6B90
.text:0000000000006B90 xcharalloc      endp
.text:0000000000006B90
.text:0000000000006B90 ; ---------------------------------------------------------------------------
.text:0000000000006B92                 align 20h
.text:0000000000006BA0
.text:0000000000006BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BA0
.text:0000000000006BA0 ; Attributes: info_from_lumina
.text:0000000000006BA0
.text:0000000000006BA0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006BA0                 public xrealloc
.text:0000000000006BA0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000006BA0                                         ; quotearg_n_options+182↑p ...
.text:0000000000006BA0 ; __unwind {
.text:0000000000006BA0                 test    rsi, rsi
.text:0000000000006BA3                 push    rbx
.text:0000000000006BA4                 mov     rbx, rsi
.text:0000000000006BA7                 jnz     short loc_6BAE
.text:0000000000006BA9                 test    rdi, rdi
.text:0000000000006BAC                 jnz     short loc_6BC8
.text:0000000000006BAE
.text:0000000000006BAE loc_6BAE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000006BAE                 mov     rsi, rbx        ; size
.text:0000000000006BB1                 call    _realloc
.text:0000000000006BB6                 test    rax, rax
.text:0000000000006BB9                 jnz     short loc_6BC0
.text:0000000000006BBB                 test    rbx, rbx
.text:0000000000006BBE                 jnz     short loc_6BD1
.text:0000000000006BC0
.text:0000000000006BC0 loc_6BC0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006BC0                 pop     rbx
.text:0000000000006BC1                 retn
.text:0000000000006BC1 ; ---------------------------------------------------------------------------
.text:0000000000006BC2                 align 8
.text:0000000000006BC8
.text:0000000000006BC8 loc_6BC8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006BC8                 call    _free
.text:0000000000006BCD                 xor     eax, eax
.text:0000000000006BCF                 pop     rbx
.text:0000000000006BD0                 retn
.text:0000000000006BD1 ; ---------------------------------------------------------------------------
.text:0000000000006BD1
.text:0000000000006BD1 loc_6BD1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006BD1                 call    xalloc_die
.text:0000000000006BD1 ; } // starts at 6BA0
.text:0000000000006BD1 xrealloc        endp
.text:0000000000006BD1
.text:0000000000006BD1 ; ---------------------------------------------------------------------------
.text:0000000000006BD6                 align 20h
.text:0000000000006BE0
.text:0000000000006BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BE0
.text:0000000000006BE0 ; Attributes: info_from_lumina
.text:0000000000006BE0
.text:0000000000006BE0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006BE0                 public xnrealloc
.text:0000000000006BE0 xnrealloc       proc near
.text:0000000000006BE0 ; __unwind {
.text:0000000000006BE0                 mov     rax, rsi
.text:0000000000006BE3                 mul     rdx
.text:0000000000006BE6                 mov     rsi, rax
.text:0000000000006BE9                 seto    al
.text:0000000000006BEC                 test    rsi, rsi
.text:0000000000006BEF                 js      short loc_6BFB
.text:0000000000006BF1                 movzx   eax, al
.text:0000000000006BF4                 test    rax, rax
.text:0000000000006BF7                 jnz     short loc_6BFB
.text:0000000000006BF9                 jmp     short xrealloc
.text:0000000000006BFB ; ---------------------------------------------------------------------------
.text:0000000000006BFB
.text:0000000000006BFB loc_6BFB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000006BFB                                         ; xnrealloc+17↑j
.text:0000000000006BFB                 sub     rsp, 8
.text:0000000000006BFF                 call    xalloc_die
.text:0000000000006BFF ; } // starts at 6BE0
.text:0000000000006BFF xnrealloc       endp
.text:0000000000006BFF
.text:0000000000006BFF ; ---------------------------------------------------------------------------
.text:0000000000006C04                 align 10h
.text:0000000000006C10
.text:0000000000006C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C10
.text:0000000000006C10 ; Attributes: info_from_lumina
.text:0000000000006C10
.text:0000000000006C10 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006C10                 public x2nrealloc
.text:0000000000006C10 x2nrealloc      proc near
.text:0000000000006C10 ; __unwind {
.text:0000000000006C10                 test    rdi, rdi
.text:0000000000006C13                 mov     r9, rdx
.text:0000000000006C16                 mov     rcx, [rsi]
.text:0000000000006C19                 jz      short loc_6C50
.text:0000000000006C1B                 xor     edx, edx
.text:0000000000006C1D                 mov     rax, 5555555555555554h
.text:0000000000006C27                 div     r9
.text:0000000000006C2A                 cmp     rax, rcx
.text:0000000000006C2D                 jbe     short loc_6C6B
.text:0000000000006C2F                 mov     rax, rcx
.text:0000000000006C32                 shr     rax, 1
.text:0000000000006C35                 lea     rcx, [rax+rcx+1]
.text:0000000000006C3A
.text:0000000000006C3A loc_6C3A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000006C3A                 mov     [rsi], rcx
.text:0000000000006C3D                 imul    rcx, r9
.text:0000000000006C41                 mov     rsi, rcx
.text:0000000000006C44                 jmp     xrealloc
.text:0000000000006C44 ; ---------------------------------------------------------------------------
.text:0000000000006C49                 align 10h
.text:0000000000006C50
.text:0000000000006C50 loc_6C50:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000006C50                 test    rcx, rcx
.text:0000000000006C53                 jz      short loc_6C78
.text:0000000000006C55
.text:0000000000006C55 loc_6C55:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000006C55                 mov     rax, rcx
.text:0000000000006C58                 mul     r9
.text:0000000000006C5B                 seto    dl
.text:0000000000006C5E                 test    rax, rax
.text:0000000000006C61                 movzx   edx, dl
.text:0000000000006C64                 js      short loc_6C6B
.text:0000000000006C66                 test    rdx, rdx
.text:0000000000006C69                 jz      short loc_6C3A
.text:0000000000006C6B
.text:0000000000006C6B loc_6C6B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000006C6B                                         ; x2nrealloc+54↑j
.text:0000000000006C6B                 sub     rsp, 8
.text:0000000000006C6F                 call    xalloc_die
.text:0000000000006C6F ; ---------------------------------------------------------------------------
.text:0000000000006C74                 align 8
.text:0000000000006C78
.text:0000000000006C78 loc_6C78:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006C78                 xor     edx, edx
.text:0000000000006C7A                 mov     eax, 80h
.text:0000000000006C7F                 xor     r8d, r8d
.text:0000000000006C82                 div     r9
.text:0000000000006C85                 test    rax, rax
.text:0000000000006C88                 setz    r8b
.text:0000000000006C8C                 lea     rcx, [r8+rax]
.text:0000000000006C90                 jmp     short loc_6C55
.text:0000000000006C90 ; } // starts at 6C10
.text:0000000000006C90 x2nrealloc      endp
.text:0000000000006C90
.text:0000000000006C90 ; ---------------------------------------------------------------------------
.text:0000000000006C92                 align 20h
.text:0000000000006CA0
.text:0000000000006CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CA0
.text:0000000000006CA0 ; Attributes: info_from_lumina
.text:0000000000006CA0
.text:0000000000006CA0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006CA0                 public x2realloc
.text:0000000000006CA0 x2realloc       proc near
.text:0000000000006CA0 ; __unwind {
.text:0000000000006CA0                 test    rdi, rdi
.text:0000000000006CA3                 mov     rax, [rsi]
.text:0000000000006CA6                 jz      short loc_6CD0
.text:0000000000006CA8                 mov     rdx, 5555555555555553h
.text:0000000000006CB2                 cmp     rax, rdx
.text:0000000000006CB5                 ja      short loc_6CE1
.text:0000000000006CB7                 mov     rdx, rax
.text:0000000000006CBA                 shr     rdx, 1
.text:0000000000006CBD                 lea     rax, [rdx+rax+1]
.text:0000000000006CC2
.text:0000000000006CC2 loc_6CC2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006CC2                 mov     [rsi], rax
.text:0000000000006CC5                 mov     rsi, rax
.text:0000000000006CC8                 jmp     xrealloc
.text:0000000000006CC8 ; ---------------------------------------------------------------------------
.text:0000000000006CCD                 align 10h
.text:0000000000006CD0
.text:0000000000006CD0 loc_6CD0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006CD0                 test    rax, rax
.text:0000000000006CD3                 mov     edx, 80h
.text:0000000000006CD8                 cmovz   rax, rdx
.text:0000000000006CDC                 test    rax, rax
.text:0000000000006CDF                 jns     short loc_6CC2
.text:0000000000006CE1
.text:0000000000006CE1 loc_6CE1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006CE1                 sub     rsp, 8
.text:0000000000006CE5                 call    xalloc_die
.text:0000000000006CE5 ; } // starts at 6CA0
.text:0000000000006CE5 x2realloc       endp
.text:0000000000006CE5
.text:0000000000006CE5 ; ---------------------------------------------------------------------------
.text:0000000000006CEA                 align 10h
.text:0000000000006CF0
.text:0000000000006CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CF0
.text:0000000000006CF0
.text:0000000000006CF0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006CF0                 public xzalloc
.text:0000000000006CF0 xzalloc         proc near
.text:0000000000006CF0 ; __unwind {
.text:0000000000006CF0                 push    rbx
.text:0000000000006CF1                 mov     rbx, rdi
.text:0000000000006CF4                 call    xmalloc
.text:0000000000006CF9                 mov     rdx, rbx        ; n
.text:0000000000006CFC                 xor     esi, esi        ; c
.text:0000000000006CFE                 mov     rdi, rax        ; s
.text:0000000000006D01                 pop     rbx
.text:0000000000006D02                 jmp     _memset
.text:0000000000006D02 ; } // starts at 6CF0
.text:0000000000006D02 xzalloc         endp
.text:0000000000006D02
.text:0000000000006D02 ; ---------------------------------------------------------------------------
.text:0000000000006D07                 align 10h
.text:0000000000006D10
.text:0000000000006D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D10
.text:0000000000006D10 ; Attributes: info_from_lumina
.text:0000000000006D10
.text:0000000000006D10 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006D10                 public xcalloc
.text:0000000000006D10 xcalloc         proc near
.text:0000000000006D10 ; __unwind {
.text:0000000000006D10                 mov     rax, rdi
.text:0000000000006D13                 sub     rsp, 8
.text:0000000000006D17                 mul     rsi
.text:0000000000006D1A                 seto    dl
.text:0000000000006D1D                 test    rax, rax
.text:0000000000006D20                 js      short loc_6D39
.text:0000000000006D22                 movzx   edx, dl
.text:0000000000006D25                 test    rdx, rdx
.text:0000000000006D28                 jnz     short loc_6D39
.text:0000000000006D2A                 call    _calloc
.text:0000000000006D2F                 test    rax, rax
.text:0000000000006D32                 jz      short loc_6D39
.text:0000000000006D34                 add     rsp, 8
.text:0000000000006D38                 retn
.text:0000000000006D39 ; ---------------------------------------------------------------------------
.text:0000000000006D39
.text:0000000000006D39 loc_6D39:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006D39                                         ; xcalloc+18↑j ...
.text:0000000000006D39                 call    xalloc_die
.text:0000000000006D39 ; } // starts at 6D10
.text:0000000000006D39 xcalloc         endp
.text:0000000000006D39
.text:0000000000006D39 ; ---------------------------------------------------------------------------
.text:0000000000006D3E                 align 20h
.text:0000000000006D40
.text:0000000000006D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D40
.text:0000000000006D40 ; Attributes: info_from_lumina
.text:0000000000006D40
.text:0000000000006D40 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000006D40                 public xmemdup
.text:0000000000006D40 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000006D40                                         ; xstrdup+11↓j
.text:0000000000006D40 ; __unwind {
.text:0000000000006D40                 push    rbp
.text:0000000000006D41                 push    rbx
.text:0000000000006D42                 mov     rbp, rdi
.text:0000000000006D45                 mov     rdi, rsi
.text:0000000000006D48                 mov     rbx, rsi
.text:0000000000006D4B                 sub     rsp, 8
.text:0000000000006D4F                 call    xmalloc
.text:0000000000006D54                 add     rsp, 8
.text:0000000000006D58                 mov     rdx, rbx        ; n
.text:0000000000006D5B                 mov     rsi, rbp        ; src
.text:0000000000006D5E                 pop     rbx
.text:0000000000006D5F                 pop     rbp
.text:0000000000006D60                 mov     rdi, rax        ; dest
.text:0000000000006D63                 jmp     _memcpy
.text:0000000000006D63 ; } // starts at 6D40
.text:0000000000006D63 xmemdup         endp
.text:0000000000006D63
.text:0000000000006D63 ; ---------------------------------------------------------------------------
.text:0000000000006D68                 align 10h
.text:0000000000006D70
.text:0000000000006D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D70
.text:0000000000006D70
.text:0000000000006D70 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006D70                 public xstrdup
.text:0000000000006D70 xstrdup         proc near
.text:0000000000006D70 ; __unwind {
.text:0000000000006D70                 push    rbx
.text:0000000000006D71                 mov     rbx, rdi
.text:0000000000006D74                 call    _strlen
.text:0000000000006D79                 mov     rdi, rbx        ; src
.text:0000000000006D7C                 lea     rsi, [rax+1]    ; n
.text:0000000000006D80                 pop     rbx
.text:0000000000006D81                 jmp     short xmemdup
.text:0000000000006D81 ; } // starts at 6D70
.text:0000000000006D81 xstrdup         endp
.text:0000000000006D81
.text:0000000000006D81 ; ---------------------------------------------------------------------------
.text:0000000000006D83                 align 10h
.text:0000000000006D90
.text:0000000000006D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D90
.text:0000000000006D90 ; Attributes: noreturn info_from_lumina
.text:0000000000006D90
.text:0000000000006D90 ; void __cdecl xalloc_die()
.text:0000000000006D90                 public xalloc_die
.text:0000000000006D90 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_5D66↑p
.text:0000000000006D90                                         ; xmalloc:loc_6B55↑p ...
.text:0000000000006D90 ; __unwind {
.text:0000000000006D90                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006D97                 sub     rsp, 8
.text:0000000000006D9B                 mov     edx, 5          ; category
.text:0000000000006DA0                 xor     edi, edi        ; domainname
.text:0000000000006DA2                 call    _dcgettext
.text:0000000000006DA7                 mov     edi, cs:exit_failure ; status
.text:0000000000006DAD                 lea     rdx, format+4   ; format
.text:0000000000006DB4                 mov     rcx, rax
.text:0000000000006DB7                 xor     esi, esi        ; errnum
.text:0000000000006DB9                 xor     eax, eax
.text:0000000000006DBB                 call    _error
.text:0000000000006DC0                 call    _abort
.text:0000000000006DC0 ; } // starts at 6D90
.text:0000000000006DC0 xalloc_die      endp
.text:0000000000006DC0
.text:0000000000006DC0 ; ---------------------------------------------------------------------------
.text:0000000000006DC5                 align 10h
.text:0000000000006DD0
.text:0000000000006DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DD0
.text:0000000000006DD0 ; Attributes: info_from_lumina
.text:0000000000006DD0
.text:0000000000006DD0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006DD0                 public rpl_fclose
.text:0000000000006DD0 rpl_fclose      proc near               ; CODE XREF: print_uptime+6B↑p
.text:0000000000006DD0                                         ; print_uptime+3B6↑p ...
.text:0000000000006DD0 ; __unwind {
.text:0000000000006DD0                 push    r12
.text:0000000000006DD2                 push    rbp
.text:0000000000006DD3                 push    rbx
.text:0000000000006DD4                 mov     rbx, rdi
.text:0000000000006DD7                 call    _fileno
.text:0000000000006DDC                 test    eax, eax
.text:0000000000006DDE                 mov     rdi, rbx        ; fp
.text:0000000000006DE1                 js      short loc_6E37
.text:0000000000006DE3                 call    ___freading
.text:0000000000006DE8                 test    eax, eax
.text:0000000000006DEA                 jnz     short loc_6E18
.text:0000000000006DEC
.text:0000000000006DEC loc_6DEC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000006DEC                 mov     rdi, rbx        ; stream
.text:0000000000006DEF                 call    rpl_fflush
.text:0000000000006DF4                 test    eax, eax
.text:0000000000006DF6                 jz      short loc_6E34
.text:0000000000006DF8                 call    ___errno_location
.text:0000000000006DFD                 mov     r12d, [rax]
.text:0000000000006E00                 mov     rdi, rbx        ; stream
.text:0000000000006E03                 mov     rbp, rax
.text:0000000000006E06                 call    _fclose
.text:0000000000006E0B                 test    r12d, r12d
.text:0000000000006E0E                 jnz     short loc_6E40
.text:0000000000006E10
.text:0000000000006E10 loc_6E10:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006E10                 pop     rbx
.text:0000000000006E11                 pop     rbp
.text:0000000000006E12                 pop     r12
.text:0000000000006E14                 retn
.text:0000000000006E14 ; ---------------------------------------------------------------------------
.text:0000000000006E15                 align 8
.text:0000000000006E18
.text:0000000000006E18 loc_6E18:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006E18                 mov     rdi, rbx        ; stream
.text:0000000000006E1B                 call    _fileno
.text:0000000000006E20                 xor     esi, esi        ; offset
.text:0000000000006E22                 mov     edx, 1          ; whence
.text:0000000000006E27                 mov     edi, eax        ; fd
.text:0000000000006E29                 call    _lseek
.text:0000000000006E2E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E32                 jnz     short loc_6DEC
.text:0000000000006E34
.text:0000000000006E34 loc_6E34:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006E34                 mov     rdi, rbx        ; stream
.text:0000000000006E37
.text:0000000000006E37 loc_6E37:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006E37                 pop     rbx
.text:0000000000006E38                 pop     rbp
.text:0000000000006E39                 pop     r12
.text:0000000000006E3B                 jmp     _fclose
.text:0000000000006E40 ; ---------------------------------------------------------------------------
.text:0000000000006E40
.text:0000000000006E40 loc_6E40:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000006E40                 mov     [rbp+0], r12d
.text:0000000000006E44                 mov     eax, 0FFFFFFFFh
.text:0000000000006E49                 jmp     short loc_6E10
.text:0000000000006E49 ; } // starts at 6DD0
.text:0000000000006E49 rpl_fclose      endp
.text:0000000000006E49
.text:0000000000006E49 ; ---------------------------------------------------------------------------
.text:0000000000006E4B                 align 10h
.text:0000000000006E50
.text:0000000000006E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E50
.text:0000000000006E50 ; Attributes: info_from_lumina
.text:0000000000006E50
.text:0000000000006E50 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006E50                 public rpl_fflush
.text:0000000000006E50 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006E50 ; __unwind {
.text:0000000000006E50                 test    rdi, rdi
.text:0000000000006E53                 push    rbx
.text:0000000000006E54                 mov     rbx, rdi
.text:0000000000006E57                 jz      short loc_6E6A
.text:0000000000006E59                 call    ___freading
.text:0000000000006E5E                 test    eax, eax
.text:0000000000006E60                 jz      short loc_6E6A
.text:0000000000006E62                 test    dword ptr [rbx], 100h
.text:0000000000006E68                 jnz     short loc_6E78
.text:0000000000006E6A
.text:0000000000006E6A loc_6E6A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000006E6A                                         ; rpl_fflush+10↑j
.text:0000000000006E6A                 mov     rdi, rbx        ; stream
.text:0000000000006E6D                 pop     rbx
.text:0000000000006E6E                 jmp     _fflush
.text:0000000000006E6E ; ---------------------------------------------------------------------------
.text:0000000000006E73                 align 8
.text:0000000000006E78
.text:0000000000006E78 loc_6E78:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006E78                 mov     rdi, rbx
.text:0000000000006E7B                 mov     edx, 1
.text:0000000000006E80                 xor     esi, esi
.text:0000000000006E82                 call    rpl_fseeko
.text:0000000000006E87                 mov     rdi, rbx        ; stream
.text:0000000000006E8A                 pop     rbx
.text:0000000000006E8B                 jmp     _fflush
.text:0000000000006E8B ; } // starts at 6E50
.text:0000000000006E8B rpl_fflush      endp
.text:0000000000006E8B
.text:0000000000006E90
.text:0000000000006E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E90
.text:0000000000006E90 ; Attributes: info_from_lumina
.text:0000000000006E90
.text:0000000000006E90 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006E90                 public rpl_fseeko
.text:0000000000006E90 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006E90 ; __unwind {
.text:0000000000006E90                 mov     rax, [rdi+8]
.text:0000000000006E94                 cmp     [rdi+10h], rax
.text:0000000000006E98                 jz      short loc_6EA0
.text:0000000000006E9A
.text:0000000000006E9A loc_6E9A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000006E9A                                         ; rpl_fseeko+1F↓j
.text:0000000000006E9A                 jmp     _fseeko
.text:0000000000006E9A ; ---------------------------------------------------------------------------
.text:0000000000006E9F                 align 20h
.text:0000000000006EA0
.text:0000000000006EA0 loc_6EA0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006EA0                 mov     rax, [rdi+20h]
.text:0000000000006EA4                 cmp     [rdi+28h], rax
.text:0000000000006EA8                 jnz     short loc_6E9A
.text:0000000000006EAA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000006EAF                 jnz     short loc_6E9A
.text:0000000000006EB1                 push    r12
.text:0000000000006EB3                 push    rbp
.text:0000000000006EB4                 mov     r12d, edx
.text:0000000000006EB7                 push    rbx
.text:0000000000006EB8                 mov     rbp, rsi
.text:0000000000006EBB                 mov     rbx, rdi
.text:0000000000006EBE                 call    _fileno
.text:0000000000006EC3                 mov     edx, r12d       ; whence
.text:0000000000006EC6                 mov     rsi, rbp        ; offset
.text:0000000000006EC9                 mov     edi, eax        ; fd
.text:0000000000006ECB                 call    _lseek
.text:0000000000006ED0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006ED4                 jz      short loc_6EE2
.text:0000000000006ED6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006ED9                 mov     [rbx+90h], rax
.text:0000000000006EE0                 xor     eax, eax
.text:0000000000006EE2
.text:0000000000006EE2 loc_6EE2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006EE2                 pop     rbx
.text:0000000000006EE3                 pop     rbp
.text:0000000000006EE4                 pop     r12
.text:0000000000006EE6                 retn
.text:0000000000006EE6 ; } // starts at 6E90
.text:0000000000006EE6 rpl_fseeko      endp
.text:0000000000006EE6
.text:0000000000006EE6 ; ---------------------------------------------------------------------------
.text:0000000000006EE7                 align 10h
.text:0000000000006EF0
.text:0000000000006EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EF0
.text:0000000000006EF0 ; Attributes: info_from_lumina
.text:0000000000006EF0
.text:0000000000006EF0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006EF0                 public rpl_mbrtowc
.text:0000000000006EF0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006EF0
.text:0000000000006EF0 pwc             = dword ptr -34h
.text:0000000000006EF0 var_30          = qword ptr -30h
.text:0000000000006EF0
.text:0000000000006EF0 ; __unwind {
.text:0000000000006EF0                 push    r13
.text:0000000000006EF2                 push    r12
.text:0000000000006EF4                 mov     r13, rsi
.text:0000000000006EF7                 push    rbp
.text:0000000000006EF8                 push    rbx
.text:0000000000006EF9                 mov     rbx, rdi
.text:0000000000006EFC                 mov     r12, rdx
.text:0000000000006EFF                 sub     rsp, 18h
.text:0000000000006F03                 mov     rax, fs:28h
.text:0000000000006F0C                 mov     [rsp+38h+var_30], rax
.text:0000000000006F11                 xor     eax, eax
.text:0000000000006F13                 lea     rax, [rsp+38h+pwc]
.text:0000000000006F18                 test    rdi, rdi
.text:0000000000006F1B                 cmovz   rbx, rax
.text:0000000000006F1F                 mov     rdi, rbx        ; pwc
.text:0000000000006F22                 call    _mbrtowc
.text:0000000000006F27                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000006F2B                 mov     rbp, rax
.text:0000000000006F2E                 jbe     short loc_6F50
.text:0000000000006F30                 test    r12, r12
.text:0000000000006F33                 jz      short loc_6F50
.text:0000000000006F35                 xor     edi, edi
.text:0000000000006F37                 call    hard_locale
.text:0000000000006F3C                 test    al, al
.text:0000000000006F3E                 jnz     short loc_6F50
.text:0000000000006F40                 movzx   eax, byte ptr [r13+0]
.text:0000000000006F45                 mov     ebp, 1
.text:0000000000006F4A                 mov     [rbx], eax
.text:0000000000006F4C                 nop     dword ptr [rax+00h]
.text:0000000000006F50
.text:0000000000006F50 loc_6F50:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000006F50                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000006F50                 mov     rdx, [rsp+38h+var_30]
.text:0000000000006F55                 xor     rdx, fs:28h
.text:0000000000006F5E                 mov     rax, rbp
.text:0000000000006F61                 jnz     short loc_6F6E
.text:0000000000006F63                 add     rsp, 18h
.text:0000000000006F67                 pop     rbx
.text:0000000000006F68                 pop     rbp
.text:0000000000006F69                 pop     r12
.text:0000000000006F6B                 pop     r13
.text:0000000000006F6D                 retn
.text:0000000000006F6E ; ---------------------------------------------------------------------------
.text:0000000000006F6E
.text:0000000000006F6E loc_6F6E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000006F6E                 call    ___stack_chk_fail
.text:0000000000006F6E ; } // starts at 6EF0
.text:0000000000006F6E rpl_mbrtowc     endp
.text:0000000000006F6E
.text:0000000000006F6E ; ---------------------------------------------------------------------------
.text:0000000000006F73                 align 20h
.text:0000000000006F80
.text:0000000000006F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F80
.text:0000000000006F80
.text:0000000000006F80                 public extract_trimmed_name
.text:0000000000006F80 extract_trimmed_name proc near
.text:0000000000006F80 ; __unwind {
.text:0000000000006F80                 push    rbp
.text:0000000000006F81                 push    rbx
.text:0000000000006F82                 mov     rbp, rdi
.text:0000000000006F85                 mov     edi, 21h ; '!'
.text:0000000000006F8A                 sub     rsp, 8
.text:0000000000006F8E                 call    xmalloc
.text:0000000000006F93                 lea     rsi, [rbp+2Ch]  ; src
.text:0000000000006F97                 mov     rbx, rax
.text:0000000000006F9A                 mov     edx, 20h ; ' '  ; n
.text:0000000000006F9F                 mov     rdi, rax        ; dest
.text:0000000000006FA2                 call    _strncpy
.text:0000000000006FA7                 mov     rdi, rbx        ; s
.text:0000000000006FAA                 mov     byte ptr [rbx+20h], 0
.text:0000000000006FAE                 call    _strlen
.text:0000000000006FB3                 add     rax, rbx
.text:0000000000006FB6                 cmp     rbx, rax
.text:0000000000006FB9                 jnb     short loc_6FC1
.text:0000000000006FBB
.text:0000000000006FBB loc_6FBB:                               ; CODE XREF: extract_trimmed_name+5A↓j
.text:0000000000006FBB                 cmp     byte ptr [rax-1], 20h ; ' '
.text:0000000000006FBF                 jz      short loc_6FD0
.text:0000000000006FC1
.text:0000000000006FC1 loc_6FC1:                               ; CODE XREF: extract_trimmed_name+39↑j
.text:0000000000006FC1                                         ; extract_trimmed_name+5C↓j
.text:0000000000006FC1                 add     rsp, 8
.text:0000000000006FC5                 mov     rax, rbx
.text:0000000000006FC8                 pop     rbx
.text:0000000000006FC9                 pop     rbp
.text:0000000000006FCA                 retn
.text:0000000000006FCA ; ---------------------------------------------------------------------------
.text:0000000000006FCB                 align 10h
.text:0000000000006FD0
.text:0000000000006FD0 loc_6FD0:                               ; CODE XREF: extract_trimmed_name+3F↑j
.text:0000000000006FD0                 sub     rax, 1
.text:0000000000006FD4                 mov     byte ptr [rax], 0
.text:0000000000006FD7                 cmp     rbx, rax
.text:0000000000006FDA                 jnz     short loc_6FBB
.text:0000000000006FDC                 jmp     short loc_6FC1
.text:0000000000006FDC ; } // starts at 6F80
.text:0000000000006FDC extract_trimmed_name endp
.text:0000000000006FDC
.text:0000000000006FDC ; ---------------------------------------------------------------------------
.text:0000000000006FDE                 align 20h
.text:0000000000006FE0
.text:0000000000006FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FE0
.text:0000000000006FE0
.text:0000000000006FE0                 public read_utmp
.text:0000000000006FE0 read_utmp       proc near               ; CODE XREF: uptime+2D↑p
.text:0000000000006FE0
.text:0000000000006FE0 var_48          = qword ptr -48h
.text:0000000000006FE0 var_40          = qword ptr -40h
.text:0000000000006FE0
.text:0000000000006FE0 ; __unwind {
.text:0000000000006FE0                 push    r15
.text:0000000000006FE2                 push    r14
.text:0000000000006FE4                 xor     r14d, r14d
.text:0000000000006FE7                 push    r13
.text:0000000000006FE9                 mov     r13d, ecx
.text:0000000000006FEC                 push    r12
.text:0000000000006FEE                 push    rbp
.text:0000000000006FEF                 push    rbx
.text:0000000000006FF0                 mov     r12d, r13d
.text:0000000000006FF3                 xor     ebx, ebx
.text:0000000000006FF5                 xor     ebp, ebp
.text:0000000000006FF7                 and     r12d, 2
.text:0000000000006FFB                 sub     rsp, 18h
.text:0000000000006FFF                 and     r13d, 1
.text:0000000000007003                 mov     [rsp+48h+var_48], rsi
.text:0000000000007007                 mov     [rsp+48h+var_40], rdx
.text:000000000000700C                 call    _utmpxname
.text:0000000000007011                 call    _setutxent
.text:0000000000007016
.text:0000000000007016 loc_7016:                               ; CODE XREF: read_utmp+58↓j
.text:0000000000007016                                         ; read_utmp+10C↓j
.text:0000000000007016                 call    _getutxent
.text:000000000000701B                 test    rax, rax
.text:000000000000701E                 mov     r15, rax
.text:0000000000007021                 jz      short loc_7091
.text:0000000000007023
.text:0000000000007023 loc_7023:                               ; CODE XREF: read_utmp+AF↓j
.text:0000000000007023                 cmp     word ptr [r15], 7
.text:0000000000007028                 jnz     short loc_7035
.text:000000000000702A                 cmp     byte ptr [r15+2Ch], 0
.text:000000000000702F                 jnz     loc_70C0
.text:0000000000007035
.text:0000000000007035 loc_7035:                               ; CODE XREF: read_utmp+48↑j
.text:0000000000007035                 test    r12d, r12d
.text:0000000000007038                 jnz     short loc_7016
.text:000000000000703A
.text:000000000000703A loc_703A:                               ; CODE XREF: read_utmp+E6↓j
.text:000000000000703A                                         ; read_utmp+EF↓j ...
.text:000000000000703A                 cmp     rbp, rbx
.text:000000000000703D                 jz      loc_7100
.text:0000000000007043
.text:0000000000007043 loc_7043:                               ; CODE XREF: read_utmp+115↓j
.text:0000000000007043                                         ; read_utmp+153↓j
.text:0000000000007043                 lea     rax, [rbx+rbx*2]
.text:0000000000007047                 mov     rdx, [r15]
.text:000000000000704A                 mov     rsi, r15
.text:000000000000704D                 add     rbx, 1
.text:0000000000007051                 shl     rax, 7
.text:0000000000007055                 add     rax, r14
.text:0000000000007058                 mov     [rax], rdx
.text:000000000000705B                 lea     rdi, [rax+8]
.text:000000000000705F                 mov     rdx, [r15+178h]
.text:0000000000007066                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000706A                 mov     [rax+178h], rdx
.text:0000000000007071                 sub     rax, rdi
.text:0000000000007074                 sub     rsi, rax
.text:0000000000007077                 add     eax, 180h
.text:000000000000707C                 shr     eax, 3
.text:000000000000707F                 mov     ecx, eax
.text:0000000000007081                 rep movsq
.text:0000000000007084                 call    _getutxent
.text:0000000000007089                 test    rax, rax
.text:000000000000708C                 mov     r15, rax
.text:000000000000708F                 jnz     short loc_7023
.text:0000000000007091
.text:0000000000007091 loc_7091:                               ; CODE XREF: read_utmp+41↑j
.text:0000000000007091                 call    _endutxent
.text:0000000000007096                 mov     rax, [rsp+48h+var_48]
.text:000000000000709A                 mov     [rax], rbx
.text:000000000000709D                 mov     rax, [rsp+48h+var_40]
.text:00000000000070A2                 mov     [rax], r14
.text:00000000000070A5                 add     rsp, 18h
.text:00000000000070A9                 xor     eax, eax
.text:00000000000070AB                 pop     rbx
.text:00000000000070AC                 pop     rbp
.text:00000000000070AD                 pop     r12
.text:00000000000070AF                 pop     r13
.text:00000000000070B1                 pop     r14
.text:00000000000070B3                 pop     r15
.text:00000000000070B5                 retn
.text:00000000000070B5 ; ---------------------------------------------------------------------------
.text:00000000000070B6                 align 20h
.text:00000000000070C0
.text:00000000000070C0 loc_70C0:                               ; CODE XREF: read_utmp+4F↑j
.text:00000000000070C0                 mov     edi, [r15+4]    ; pid
.text:00000000000070C4                 test    edi, edi
.text:00000000000070C6                 jle     loc_703A
.text:00000000000070CC                 test    r13b, r13b
.text:00000000000070CF                 jz      loc_703A
.text:00000000000070D5                 xor     esi, esi        ; sig
.text:00000000000070D7                 call    _kill
.text:00000000000070DC                 test    eax, eax
.text:00000000000070DE                 jns     loc_703A
.text:00000000000070E4                 call    ___errno_location
.text:00000000000070E9                 cmp     dword ptr [rax], 3
.text:00000000000070EC                 jz      loc_7016
.text:00000000000070F2                 cmp     rbp, rbx
.text:00000000000070F5                 jnz     loc_7043
.text:00000000000070FB                 nop     dword ptr [rax+rax+00h]
.text:0000000000007100
.text:0000000000007100 loc_7100:                               ; CODE XREF: read_utmp+5D↑j
.text:0000000000007100                 test    r14, r14
.text:0000000000007103                 jz      short loc_7138
.text:0000000000007105                 mov     rax, 38E38E38E38E37h
.text:000000000000710F                 cmp     rbp, rax
.text:0000000000007112                 ja      short loc_715D
.text:0000000000007114                 mov     rax, rbp
.text:0000000000007117                 shr     rax, 1
.text:000000000000711A                 lea     rbp, [rbp+rax+1]
.text:000000000000711F
.text:000000000000711F loc_711F:                               ; CODE XREF: read_utmp+17B↓j
.text:000000000000711F                 lea     rsi, [rbp+rbp*2+0]
.text:0000000000007124                 mov     rdi, r14
.text:0000000000007127                 shl     rsi, 7
.text:000000000000712B                 call    xrealloc
.text:0000000000007130                 mov     r14, rax
.text:0000000000007133                 jmp     loc_7043
.text:0000000000007138 ; ---------------------------------------------------------------------------
.text:0000000000007138
.text:0000000000007138 loc_7138:                               ; CODE XREF: read_utmp+123↑j
.text:0000000000007138                 test    rbp, rbp
.text:000000000000713B                 mov     eax, 1
.text:0000000000007140                 mov     edx, 180h
.text:0000000000007145                 cmovz   rbp, rax
.text:0000000000007149                 mov     rax, rdx
.text:000000000000714C                 xor     esi, esi
.text:000000000000714E                 mul     rbp
.text:0000000000007151                 jo      short loc_7162
.text:0000000000007153
.text:0000000000007153 loc_7153:                               ; CODE XREF: read_utmp+187↓j
.text:0000000000007153                 test    rax, rax
.text:0000000000007156                 js      short loc_715D
.text:0000000000007158                 test    rsi, rsi
.text:000000000000715B                 jz      short loc_711F
.text:000000000000715D
.text:000000000000715D loc_715D:                               ; CODE XREF: read_utmp+132↑j
.text:000000000000715D                                         ; read_utmp+176↑j
.text:000000000000715D                 call    xalloc_die
.text:0000000000007162 ; ---------------------------------------------------------------------------
.text:0000000000007162
.text:0000000000007162 loc_7162:                               ; CODE XREF: read_utmp+171↑j
.text:0000000000007162                 mov     esi, 1
.text:0000000000007167                 jmp     short loc_7153
.text:0000000000007167 ; } // starts at 6FE0
.text:0000000000007167 read_utmp       endp
.text:0000000000007167
.text:0000000000007167 ; ---------------------------------------------------------------------------
.text:0000000000007169                 align 10h
.text:0000000000007170
.text:0000000000007170 ; =============== S U B R O U T I N E =======================================
.text:0000000000007170
.text:0000000000007170 ; Attributes: info_from_lumina
.text:0000000000007170
.text:0000000000007170 ; int __fastcall setenv_TZ(const char *tz)
.text:0000000000007170 setenv_TZ       proc near               ; CODE XREF: revert_tz:loc_71F4↓p
.text:0000000000007170                                         ; set_tz:loc_7445↓p
.text:0000000000007170 ; __unwind {
.text:0000000000007170                 test    rdi, rdi
.text:0000000000007173                 jz      short loc_7190
.text:0000000000007175                 mov     rsi, rdi        ; value
.text:0000000000007178                 lea     rdi, name       ; "TZ"
.text:000000000000717F                 mov     edx, 1          ; replace
.text:0000000000007184                 jmp     _setenv
.text:0000000000007184 ; ---------------------------------------------------------------------------
.text:0000000000007189                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: setenv_TZ+3↑j
.text:0000000000007190                 lea     rdi, name       ; "TZ"
.text:0000000000007197                 jmp     _unsetenv
.text:0000000000007197 ; } // starts at 7170
.text:0000000000007197 setenv_TZ       endp
.text:0000000000007197
.text:0000000000007197 ; ---------------------------------------------------------------------------
.text:000000000000719C                 align 20h
.text:00000000000071A0
.text:00000000000071A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071A0
.text:00000000000071A0 ; Attributes: info_from_lumina
.text:00000000000071A0
.text:00000000000071A0 ; void __fastcall tzfree_0(timezone_t tz)
.text:00000000000071A0 tzfree_0        proc near               ; CODE XREF: revert_tz+36↓p
.text:00000000000071A0                                         ; set_tz+67↓p ...
.text:00000000000071A0 ; __unwind {
.text:00000000000071A0                 test    rdi, rdi
.text:00000000000071A3                 jz      short locret_71C8
.text:00000000000071A5                 push    rbx
.text:00000000000071A6                 db      2Eh
.text:00000000000071A6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: tzfree_0+1E↓j
.text:00000000000071B0                 mov     rbx, [rdi]
.text:00000000000071B3                 call    _free
.text:00000000000071B8                 test    rbx, rbx
.text:00000000000071BB                 mov     rdi, rbx
.text:00000000000071BE                 jnz     short loc_71B0
.text:00000000000071C0                 pop     rbx
.text:00000000000071C1                 retn
.text:00000000000071C1 ; ---------------------------------------------------------------------------
.text:00000000000071C2                 align 8
.text:00000000000071C8
.text:00000000000071C8 locret_71C8:                            ; CODE XREF: tzfree_0+3↑j
.text:00000000000071C8                 rep retn
.text:00000000000071C8 ; } // starts at 71A0
.text:00000000000071C8 tzfree_0        endp
.text:00000000000071C8
.text:00000000000071C8 ; ---------------------------------------------------------------------------
.text:00000000000071CA                 align 10h
.text:00000000000071D0
.text:00000000000071D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071D0
.text:00000000000071D0 ; Attributes: info_from_lumina
.text:00000000000071D0
.text:00000000000071D0 ; _Bool __fastcall revert_tz(timezone_t tz)
.text:00000000000071D0 revert_tz       proc near               ; CODE XREF: localtime_rz+69↓p
.text:00000000000071D0                                         ; localtime_rz+98↓p ...
.text:00000000000071D0 ; __unwind {
.text:00000000000071D0                 push    r13
.text:00000000000071D2                 push    r12
.text:00000000000071D4                 push    rbp
.text:00000000000071D5                 push    rbx
.text:00000000000071D6                 mov     rbp, rdi
.text:00000000000071D9                 sub     rsp, 8
.text:00000000000071DD                 call    ___errno_location
.text:00000000000071E2                 cmp     byte ptr [rbp+8], 0
.text:00000000000071E6                 mov     rbx, rax
.text:00000000000071E9                 mov     r12d, [rax]
.text:00000000000071EC                 lea     rdi, [rbp+9]
.text:00000000000071F0                 jnz     short loc_71F4
.text:00000000000071F2                 xor     edi, edi        ; value
.text:00000000000071F4
.text:00000000000071F4 loc_71F4:                               ; CODE XREF: revert_tz+20↑j
.text:00000000000071F4                 call    setenv_TZ
.text:00000000000071F9                 test    eax, eax
.text:00000000000071FB                 jz      short loc_7220
.text:00000000000071FD                 mov     r12d, [rbx]
.text:0000000000007200                 xor     r13d, r13d
.text:0000000000007203
.text:0000000000007203 loc_7203:                               ; CODE XREF: revert_tz+5B↓j
.text:0000000000007203                 mov     rdi, rbp
.text:0000000000007206                 call    tzfree_0
.text:000000000000720B                 mov     [rbx], r12d
.text:000000000000720E                 add     rsp, 8
.text:0000000000007212                 mov     eax, r13d
.text:0000000000007215                 pop     rbx
.text:0000000000007216                 pop     rbp
.text:0000000000007217                 pop     r12
.text:0000000000007219                 pop     r13
.text:000000000000721B                 retn
.text:000000000000721B ; ---------------------------------------------------------------------------
.text:000000000000721C                 align 20h
.text:0000000000007220
.text:0000000000007220 loc_7220:                               ; CODE XREF: revert_tz+2B↑j
.text:0000000000007220                 call    _tzset
.text:0000000000007225                 mov     r13d, 1
.text:000000000000722B                 jmp     short loc_7203
.text:000000000000722B ; } // starts at 71D0
.text:000000000000722B revert_tz       endp
.text:000000000000722B
.text:000000000000722B ; ---------------------------------------------------------------------------
.text:000000000000722D                 align 10h
.text:0000000000007230
.text:0000000000007230 ; =============== S U B R O U T I N E =======================================
.text:0000000000007230
.text:0000000000007230 ; Attributes: info_from_lumina
.text:0000000000007230
.text:0000000000007230 ; timezone_t __fastcall tzalloc(const char *name)
.text:0000000000007230                 public tzalloc
.text:0000000000007230 tzalloc         proc near               ; CODE XREF: save_abbr+EC↓p
.text:0000000000007230                                         ; set_tz+2C↓p
.text:0000000000007230 ; __unwind {
.text:0000000000007230                 test    rdi, rdi
.text:0000000000007233                 push    r12
.text:0000000000007235                 push    rbp
.text:0000000000007236                 push    rbx
.text:0000000000007237                 jz      short loc_7298
.text:0000000000007239                 mov     r12, rdi
.text:000000000000723C                 call    _strlen
.text:0000000000007241                 lea     rbp, [rax+1]
.text:0000000000007245                 mov     edi, 76h ; 'v'
.text:000000000000724A                 cmp     rbp, 76h ; 'v'
.text:000000000000724E                 cmovnb  rdi, rbp
.text:0000000000007252                 add     rdi, 11h
.text:0000000000007256                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000000725A                 call    _malloc
.text:000000000000725F                 test    rax, rax
.text:0000000000007262                 mov     rbx, rax
.text:0000000000007265                 jz      short loc_728B
.text:0000000000007267                 mov     qword ptr [rax], 0
.text:000000000000726E                 lea     rdi, [rbx+9]    ; dest
.text:0000000000007272                 mov     eax, 1
.text:0000000000007277                 mov     [rbx+8], ax
.text:000000000000727B                 mov     rdx, rbp        ; n
.text:000000000000727E                 mov     rsi, r12        ; src
.text:0000000000007281                 call    _memcpy
.text:0000000000007286                 mov     byte ptr [rbx+rbp+9], 0
.text:000000000000728B
.text:000000000000728B loc_728B:                               ; CODE XREF: tzalloc+35↑j
.text:000000000000728B                                         ; tzalloc+78↓j
.text:000000000000728B                 mov     rax, rbx
.text:000000000000728E                 pop     rbx
.text:000000000000728F                 pop     rbp
.text:0000000000007290                 pop     r12
.text:0000000000007292                 retn
.text:0000000000007292 ; ---------------------------------------------------------------------------
.text:0000000000007293                 align 8
.text:0000000000007298
.text:0000000000007298 loc_7298:                               ; CODE XREF: tzalloc+7↑j
.text:0000000000007298                 mov     edi, 80h        ; size
.text:000000000000729D                 call    _malloc
.text:00000000000072A2                 test    rax, rax
.text:00000000000072A5                 mov     rbx, rax
.text:00000000000072A8                 jz      short loc_728B
.text:00000000000072AA                 xor     edx, edx
.text:00000000000072AC                 mov     qword ptr [rbx], 0
.text:00000000000072B3                 mov     rax, rbx
.text:00000000000072B6                 mov     [rbx+8], dx
.text:00000000000072BA                 pop     rbx
.text:00000000000072BB                 pop     rbp
.text:00000000000072BC                 pop     r12
.text:00000000000072BE                 retn
.text:00000000000072BE ; } // starts at 7230
.text:00000000000072BE tzalloc         endp
.text:00000000000072BE
.text:00000000000072BE ; ---------------------------------------------------------------------------
.text:00000000000072BF                 align 20h
.text:00000000000072C0
.text:00000000000072C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072C0
.text:00000000000072C0 ; Attributes: info_from_lumina
.text:00000000000072C0
.text:00000000000072C0 ; _Bool __fastcall save_abbr(timezone_t tz, tm *tm)
.text:00000000000072C0 save_abbr       proc near               ; CODE XREF: localtime_rz+3B↓p
.text:00000000000072C0                                         ; mktime_z+51↓p
.text:00000000000072C0 ; __unwind {
.text:00000000000072C0                 push    r15
.text:00000000000072C2                 push    r14
.text:00000000000072C4                 mov     eax, 1
.text:00000000000072C9                 push    r13
.text:00000000000072CB                 push    r12
.text:00000000000072CD                 push    rbp
.text:00000000000072CE                 push    rbx
.text:00000000000072CF                 sub     rsp, 8
.text:00000000000072D3                 mov     rbp, [rsi+30h]
.text:00000000000072D7                 test    rbp, rbp
.text:00000000000072DA                 jz      loc_7370
.text:00000000000072E0                 cmp     rsi, rbp
.text:00000000000072E3                 mov     r12, rdi
.text:00000000000072E6                 mov     r13, rsi
.text:00000000000072E9                 ja      short loc_72F4
.text:00000000000072EB                 lea     rdx, [rsi+38h]
.text:00000000000072EF                 cmp     rbp, rdx
.text:00000000000072F2                 jb      short loc_7370
.text:00000000000072F4
.text:00000000000072F4 loc_72F4:                               ; CODE XREF: save_abbr+29↑j
.text:00000000000072F4                 cmp     byte ptr [rbp+0], 0
.text:00000000000072F8                 lea     rbx, [r12+9]
.text:00000000000072FD                 jz      short loc_7360
.text:00000000000072FF                 nop
.text:0000000000007300
.text:0000000000007300 loc_7300:                               ; CODE XREF: save_abbr+76↓j
.text:0000000000007300                                         ; save_abbr+7F↓j
.text:0000000000007300                 mov     rsi, rbp        ; s2
.text:0000000000007303                 mov     rdi, rbx        ; s1
.text:0000000000007306                 call    _strcmp
.text:000000000000730B                 test    eax, eax
.text:000000000000730D                 jz      short loc_7367
.text:000000000000730F
.text:000000000000730F loc_730F:                               ; CODE XREF: save_abbr+95↓j
.text:000000000000730F                 cmp     byte ptr [rbx], 0
.text:0000000000007312                 jnz     short loc_7326
.text:0000000000007314                 lea     r14, [r12+9]
.text:0000000000007319                 cmp     r14, rbx
.text:000000000000731C                 jnz     short loc_7380
.text:000000000000731E                 cmp     byte ptr [r12+8], 0
.text:0000000000007324                 jz      short loc_7380
.text:0000000000007326
.text:0000000000007326 loc_7326:                               ; CODE XREF: save_abbr+52↑j
.text:0000000000007326                 mov     rdi, rbx        ; s
.text:0000000000007329                 call    _strlen
.text:000000000000732E                 lea     rbx, [rbx+rax+1]
.text:0000000000007333                 cmp     byte ptr [rbx], 0
.text:0000000000007336                 jnz     short loc_7300
.text:0000000000007338                 mov     rax, [r12]
.text:000000000000733C                 test    rax, rax
.text:000000000000733F                 jz      short loc_7300
.text:0000000000007341                 lea     rbx, [rax+9]
.text:0000000000007345                 mov     rsi, rbp        ; s2
.text:0000000000007348                 mov     r12, rax
.text:000000000000734B                 mov     rdi, rbx        ; s1
.text:000000000000734E                 call    _strcmp
.text:0000000000007353                 test    eax, eax
.text:0000000000007355                 jnz     short loc_730F
.text:0000000000007357                 jmp     short loc_7367
.text:0000000000007357 ; ---------------------------------------------------------------------------
.text:0000000000007359                 align 20h
.text:0000000000007360
.text:0000000000007360 loc_7360:                               ; CODE XREF: save_abbr+3D↑j
.text:0000000000007360                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000007367
.text:0000000000007367 loc_7367:                               ; CODE XREF: save_abbr+4D↑j
.text:0000000000007367                                         ; save_abbr+97↑j ...
.text:0000000000007367                 mov     [r13+30h], rbx
.text:000000000000736B                 mov     eax, 1
.text:0000000000007370
.text:0000000000007370 loc_7370:                               ; CODE XREF: save_abbr+1A↑j
.text:0000000000007370                                         ; save_abbr+32↑j ...
.text:0000000000007370                 add     rsp, 8
.text:0000000000007374                 pop     rbx
.text:0000000000007375                 pop     rbp
.text:0000000000007376                 pop     r12
.text:0000000000007378                 pop     r13
.text:000000000000737A                 pop     r14
.text:000000000000737C                 pop     r15
.text:000000000000737E                 retn
.text:000000000000737E ; ---------------------------------------------------------------------------
.text:000000000000737F                 align 20h
.text:0000000000007380
.text:0000000000007380 loc_7380:                               ; CODE XREF: save_abbr+5C↑j
.text:0000000000007380                                         ; save_abbr+64↑j
.text:0000000000007380                 mov     rdi, rbp        ; s
.text:0000000000007383                 call    _strlen
.text:0000000000007388                 lea     rdx, [rax+1]    ; n
.text:000000000000738C                 mov     r15, rax
.text:000000000000738F                 mov     rax, rbx
.text:0000000000007392                 sub     rax, r14
.text:0000000000007395                 mov     rcx, rax
.text:0000000000007398                 not     rcx
.text:000000000000739B                 cmp     rcx, rdx
.text:000000000000739E                 jb      short loc_73D0
.text:00000000000073A0                 add     rax, rdx
.text:00000000000073A3                 cmp     rax, 76h ; 'v'
.text:00000000000073A7                 jbe     short loc_73E0
.text:00000000000073A9                 mov     rdi, rbp        ; src
.text:00000000000073AC                 call    tzalloc
.text:00000000000073B1                 mov     rbx, rax
.text:00000000000073B4                 mov     [r12], rax
.text:00000000000073B8                 xor     eax, eax
.text:00000000000073BA                 test    rbx, rbx
.text:00000000000073BD                 jz      short loc_7370
.text:00000000000073BF                 mov     byte ptr [rbx+8], 0
.text:00000000000073C3                 add     rbx, 9
.text:00000000000073C7                 jmp     short loc_7367
.text:00000000000073C7 ; ---------------------------------------------------------------------------
.text:00000000000073C9                 align 10h
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: save_abbr+DE↑j
.text:00000000000073D0                 call    ___errno_location
.text:00000000000073D5                 mov     dword ptr [rax], 0Ch
.text:00000000000073DB                 xor     eax, eax
.text:00000000000073DD                 jmp     short loc_7370
.text:00000000000073DD ; ---------------------------------------------------------------------------
.text:00000000000073DF                 align 20h
.text:00000000000073E0
.text:00000000000073E0 loc_73E0:                               ; CODE XREF: save_abbr+E7↑j
.text:00000000000073E0                 mov     rsi, rbp        ; src
.text:00000000000073E3                 mov     rdi, rbx        ; dest
.text:00000000000073E6                 call    _memcpy
.text:00000000000073EB                 mov     byte ptr [rbx+r15+1], 0
.text:00000000000073F1                 jmp     loc_7367
.text:00000000000073F1 ; } // starts at 72C0
.text:00000000000073F1 save_abbr       endp
.text:00000000000073F1
.text:00000000000073F1 ; ---------------------------------------------------------------------------
.text:00000000000073F6                 align 20h
.text:0000000000007400
.text:0000000000007400 ; =============== S U B R O U T I N E =======================================
.text:0000000000007400
.text:0000000000007400 ; Attributes: info_from_lumina
.text:0000000000007400
.text:0000000000007400 ; timezone_t __fastcall set_tz(timezone_t tz)
.text:0000000000007400 set_tz          proc near               ; CODE XREF: localtime_rz+18↓p
.text:0000000000007400                                         ; mktime_z+27↓p
.text:0000000000007400
.text:0000000000007400 var_20          = qword ptr -20h
.text:0000000000007400
.text:0000000000007400 ; __unwind {
.text:0000000000007400                 push    r12
.text:0000000000007402                 push    rbp
.text:0000000000007403                 mov     rbp, rdi
.text:0000000000007406                 push    rbx
.text:0000000000007407                 lea     rdi, name       ; "TZ"
.text:000000000000740E                 sub     rsp, 10h
.text:0000000000007412                 call    _getenv
.text:0000000000007417                 test    rax, rax
.text:000000000000741A                 mov     rbx, rax
.text:000000000000741D                 jz      loc_74B8
.text:0000000000007423                 cmp     byte ptr [rbp+8], 0
.text:0000000000007427                 jnz     short loc_7490
.text:0000000000007429
.text:0000000000007429 loc_7429:                               ; CODE XREF: set_tz+A4↓j
.text:0000000000007429                                         ; set_tz+C2↓j
.text:0000000000007429                 mov     rdi, rbx        ; src
.text:000000000000742C                 call    tzalloc
.text:0000000000007431                 test    rax, rax
.text:0000000000007434                 mov     r12, rax
.text:0000000000007437                 jz      short loc_747D
.text:0000000000007439                 xor     edi, edi
.text:000000000000743B                 cmp     byte ptr [rbp+8], 0
.text:000000000000743F                 jz      short loc_7445
.text:0000000000007441                 lea     rdi, [rbp+9]    ; value
.text:0000000000007445
.text:0000000000007445 loc_7445:                               ; CODE XREF: set_tz+3F↑j
.text:0000000000007445                 call    setenv_TZ
.text:000000000000744A                 test    eax, eax
.text:000000000000744C                 jz      loc_74D8
.text:0000000000007452                 call    ___errno_location
.text:0000000000007457                 cmp     r12, 1
.text:000000000000745B                 mov     ebx, [rax]
.text:000000000000745D                 jz      short loc_7478
.text:000000000000745F                 mov     rdi, r12
.text:0000000000007462                 mov     [rsp+28h+var_20], rax
.text:0000000000007467                 call    tzfree_0
.text:000000000000746C                 mov     rax, [rsp+28h+var_20]
.text:0000000000007471                 nop     dword ptr [rax+00000000h]
.text:0000000000007478
.text:0000000000007478 loc_7478:                               ; CODE XREF: set_tz+5D↑j
.text:0000000000007478                 mov     [rax], ebx
.text:000000000000747A                 xor     r12d, r12d
.text:000000000000747D
.text:000000000000747D loc_747D:                               ; CODE XREF: set_tz+37↑j
.text:000000000000747D                                         ; set_tz+DD↓j
.text:000000000000747D                 add     rsp, 10h
.text:0000000000007481                 mov     rax, r12
.text:0000000000007484                 pop     rbx
.text:0000000000007485                 pop     rbp
.text:0000000000007486                 pop     r12
.text:0000000000007488                 retn
.text:0000000000007488 ; ---------------------------------------------------------------------------
.text:0000000000007489                 align 10h
.text:0000000000007490
.text:0000000000007490 loc_7490:                               ; CODE XREF: set_tz+27↑j
.text:0000000000007490                 lea     rdi, [rbp+9]    ; s1
.text:0000000000007494                 mov     rsi, rax        ; s2
.text:0000000000007497                 mov     r12d, 1
.text:000000000000749D                 call    _strcmp
.text:00000000000074A2                 test    eax, eax
.text:00000000000074A4                 jnz     short loc_7429
.text:00000000000074A6                 add     rsp, 10h
.text:00000000000074AA                 mov     rax, r12
.text:00000000000074AD                 pop     rbx
.text:00000000000074AE                 pop     rbp
.text:00000000000074AF                 pop     r12
.text:00000000000074B1                 retn
.text:00000000000074B1 ; ---------------------------------------------------------------------------
.text:00000000000074B2                 align 8
.text:00000000000074B8
.text:00000000000074B8 loc_74B8:                               ; CODE XREF: set_tz+1D↑j
.text:00000000000074B8                 cmp     byte ptr [rbp+8], 0
.text:00000000000074BC                 mov     r12d, 1
.text:00000000000074C2                 jnz     loc_7429
.text:00000000000074C8                 add     rsp, 10h
.text:00000000000074CC                 mov     rax, r12
.text:00000000000074CF                 pop     rbx
.text:00000000000074D0                 pop     rbp
.text:00000000000074D1                 pop     r12
.text:00000000000074D3                 retn
.text:00000000000074D3 ; ---------------------------------------------------------------------------
.text:00000000000074D4                 align 8
.text:00000000000074D8
.text:00000000000074D8 loc_74D8:                               ; CODE XREF: set_tz+4C↑j
.text:00000000000074D8                 call    _tzset
.text:00000000000074DD                 jmp     short loc_747D
.text:00000000000074DD ; } // starts at 7400
.text:00000000000074DD set_tz          endp
.text:00000000000074DD
.text:00000000000074DD ; ---------------------------------------------------------------------------
.text:00000000000074DF                 align 20h
.text:00000000000074E0
.text:00000000000074E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074E0
.text:00000000000074E0
.text:00000000000074E0                 public tzfree
.text:00000000000074E0 tzfree          proc near
.text:00000000000074E0 ; __unwind {
.text:00000000000074E0                 cmp     rdi, 1
.text:00000000000074E4                 jz      short locret_74EB
.text:00000000000074E6                 jmp     tzfree_0
.text:00000000000074EB ; ---------------------------------------------------------------------------
.text:00000000000074EB
.text:00000000000074EB locret_74EB:                            ; CODE XREF: tzfree+4↑j
.text:00000000000074EB                 retn
.text:00000000000074EB ; } // starts at 74E0
.text:00000000000074EB tzfree          endp
.text:00000000000074EB
.text:00000000000074EB ; ---------------------------------------------------------------------------
.text:00000000000074EC                 align 10h
.text:00000000000074F0
.text:00000000000074F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074F0
.text:00000000000074F0 ; Attributes: info_from_lumina
.text:00000000000074F0
.text:00000000000074F0 ; tm *__fastcall localtime_rz(timezone_t tz, const time_t *t, tm *tm)
.text:00000000000074F0                 public localtime_rz
.text:00000000000074F0 localtime_rz    proc near
.text:00000000000074F0 ; __unwind {
.text:00000000000074F0                 push    r13
.text:00000000000074F2                 push    r12
.text:00000000000074F4                 push    rbp
.text:00000000000074F5                 push    rbx
.text:00000000000074F6                 mov     rbp, rsi
.text:00000000000074F9                 sub     rsp, 8
.text:00000000000074FD                 test    rdi, rdi
.text:0000000000007500                 jz      short loc_7570
.text:0000000000007502                 mov     r13, rdx
.text:0000000000007505                 mov     rbx, rdi
.text:0000000000007508                 call    set_tz
.text:000000000000750D                 test    rax, rax
.text:0000000000007510                 mov     r12, rax
.text:0000000000007513                 jz      short loc_755E
.text:0000000000007515                 mov     rsi, r13        ; tp
.text:0000000000007518                 mov     rdi, rbp        ; timer
.text:000000000000751B                 call    _localtime_r
.text:0000000000007520                 test    rax, rax
.text:0000000000007523                 jz      short loc_7550
.text:0000000000007525                 mov     rsi, r13
.text:0000000000007528                 mov     rdi, rbx
.text:000000000000752B                 call    save_abbr
.text:0000000000007530                 test    al, al
.text:0000000000007532                 jz      short loc_7550
.text:0000000000007534                 cmp     r12, 1
.text:0000000000007538                 jnz     short loc_7585
.text:000000000000753A
.text:000000000000753A loc_753A:                               ; CODE XREF: localtime_rz+9F↓j
.text:000000000000753A                 add     rsp, 8
.text:000000000000753E                 mov     rax, r13
.text:0000000000007541                 pop     rbx
.text:0000000000007542                 pop     rbp
.text:0000000000007543                 pop     r12
.text:0000000000007545                 pop     r13
.text:0000000000007547                 retn
.text:0000000000007547 ; ---------------------------------------------------------------------------
.text:0000000000007548                 align 10h
.text:0000000000007550
.text:0000000000007550 loc_7550:                               ; CODE XREF: localtime_rz+33↑j
.text:0000000000007550                                         ; localtime_rz+42↑j
.text:0000000000007550                 cmp     r12, 1
.text:0000000000007554                 jz      short loc_755E
.text:0000000000007556                 mov     rdi, r12
.text:0000000000007559                 call    revert_tz
.text:000000000000755E
.text:000000000000755E loc_755E:                               ; CODE XREF: localtime_rz+23↑j
.text:000000000000755E                                         ; localtime_rz+64↑j ...
.text:000000000000755E                 add     rsp, 8
.text:0000000000007562                 xor     eax, eax
.text:0000000000007564                 pop     rbx
.text:0000000000007565                 pop     rbp
.text:0000000000007566                 pop     r12
.text:0000000000007568                 pop     r13
.text:000000000000756A                 retn
.text:000000000000756A ; ---------------------------------------------------------------------------
.text:000000000000756B                 align 10h
.text:0000000000007570
.text:0000000000007570 loc_7570:                               ; CODE XREF: localtime_rz+10↑j
.text:0000000000007570                 add     rsp, 8
.text:0000000000007574                 mov     rdi, rbp        ; timer
.text:0000000000007577                 mov     rsi, rdx        ; tp
.text:000000000000757A                 pop     rbx
.text:000000000000757B                 pop     rbp
.text:000000000000757C                 pop     r12
.text:000000000000757E                 pop     r13
.text:0000000000007580                 jmp     _gmtime_r
.text:0000000000007585 ; ---------------------------------------------------------------------------
.text:0000000000007585
.text:0000000000007585 loc_7585:                               ; CODE XREF: localtime_rz+48↑j
.text:0000000000007585                 mov     rdi, r12
.text:0000000000007588                 call    revert_tz
.text:000000000000758D                 test    al, al
.text:000000000000758F                 jnz     short loc_753A
.text:0000000000007591                 jmp     short loc_755E
.text:0000000000007591 ; } // starts at 74F0
.text:0000000000007591 localtime_rz    endp
.text:0000000000007591
.text:0000000000007591 ; ---------------------------------------------------------------------------
.text:0000000000007593                 align 20h
.text:00000000000075A0
.text:00000000000075A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075A0
.text:00000000000075A0 ; Attributes: info_from_lumina
.text:00000000000075A0
.text:00000000000075A0 ; time_t __fastcall mktime_z(timezone_t tz, tm *tm)
.text:00000000000075A0                 public mktime_z
.text:00000000000075A0 mktime_z        proc near               ; CODE XREF: __strftime_internal+74B↑p
.text:00000000000075A0
.text:00000000000075A0 timer           = qword ptr -60h
.text:00000000000075A0 tp              = tm ptr -58h
.text:00000000000075A0 var_20          = qword ptr -20h
.text:00000000000075A0
.text:00000000000075A0 ; __unwind {
.text:00000000000075A0                 push    r12
.text:00000000000075A2                 push    rbp
.text:00000000000075A3                 push    rbx
.text:00000000000075A4                 mov     rbx, rsi
.text:00000000000075A7                 sub     rsp, 50h
.text:00000000000075AB                 mov     rax, fs:28h
.text:00000000000075B4                 mov     [rsp+68h+var_20], rax
.text:00000000000075B9                 xor     eax, eax
.text:00000000000075BB                 test    rdi, rdi
.text:00000000000075BE                 jz      loc_76C0
.text:00000000000075C4                 mov     rbp, rdi
.text:00000000000075C7                 call    set_tz
.text:00000000000075CC                 test    rax, rax
.text:00000000000075CF                 mov     r12, rax
.text:00000000000075D2                 jz      loc_76D0
.text:00000000000075D8                 mov     rdi, rbx        ; tp
.text:00000000000075DB                 call    _mktime
.text:00000000000075E0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000075E4                 mov     [rsp+68h+timer], rax
.text:00000000000075E9                 jz      short loc_7640
.text:00000000000075EB
.text:00000000000075EB loc_75EB:                               ; CODE XREF: mktime_z+10D↓j
.text:00000000000075EB                 mov     rsi, rbx
.text:00000000000075EE                 mov     rdi, rbp
.text:00000000000075F1                 call    save_abbr
.text:00000000000075F6                 test    al, al
.text:00000000000075F8                 jnz     short loc_7603
.text:00000000000075FA                 mov     [rsp+68h+timer], 0FFFFFFFFFFFFFFFFh
.text:0000000000007603
.text:0000000000007603 loc_7603:                               ; CODE XREF: mktime_z+58↑j
.text:0000000000007603                                         ; mktime_z+B2↓j ...
.text:0000000000007603                 cmp     r12, 1
.text:0000000000007607                 jz      short loc_7619
.text:0000000000007609                 mov     rdi, r12
.text:000000000000760C                 call    revert_tz
.text:0000000000007611                 test    al, al
.text:0000000000007613                 jz      loc_76D0
.text:0000000000007619
.text:0000000000007619 loc_7619:                               ; CODE XREF: mktime_z+67↑j
.text:0000000000007619                 mov     rax, [rsp+68h+timer]
.text:000000000000761E
.text:000000000000761E loc_761E:                               ; CODE XREF: mktime_z+128↓j
.text:000000000000761E                                         ; mktime_z+137↓j
.text:000000000000761E                 mov     rcx, [rsp+68h+var_20]
.text:0000000000007623                 xor     rcx, fs:28h
.text:000000000000762C                 jnz     loc_76DC
.text:0000000000007632                 add     rsp, 50h
.text:0000000000007636                 pop     rbx
.text:0000000000007637                 pop     rbp
.text:0000000000007638                 pop     r12
.text:000000000000763A                 retn
.text:000000000000763A ; ---------------------------------------------------------------------------
.text:000000000000763B                 align 20h
.text:0000000000007640
.text:0000000000007640 loc_7640:                               ; CODE XREF: mktime_z+49↑j
.text:0000000000007640                 lea     rsi, [rsp+68h+tp] ; tp
.text:0000000000007645                 lea     rdi, [rsp+68h+timer] ; timer
.text:000000000000764A                 call    _localtime_r
.text:000000000000764F                 test    rax, rax
.text:0000000000007652                 jz      short loc_7603
.text:0000000000007654                 mov     eax, [rbx]
.text:0000000000007656                 mov     edx, [rbx+4]
.text:0000000000007659                 xor     eax, [rsp+68h+tp.tm_sec]
.text:000000000000765D                 xor     edx, [rsp+68h+tp.tm_min]
.text:0000000000007661                 mov     ecx, [rsp+68h+tp.tm_isdst]
.text:0000000000007665                 or      eax, edx
.text:0000000000007667                 mov     edx, [rbx+8]
.text:000000000000766A                 xor     edx, [rsp+68h+tp.tm_hour]
.text:000000000000766E                 or      eax, edx
.text:0000000000007670                 mov     edx, [rbx+0Ch]
.text:0000000000007673                 xor     edx, [rsp+68h+tp.tm_mday]
.text:0000000000007677                 or      eax, edx
.text:0000000000007679                 mov     edx, [rbx+10h]
.text:000000000000767C                 xor     edx, [rsp+68h+tp.tm_mon]
.text:0000000000007680                 or      eax, edx
.text:0000000000007682                 mov     edx, [rbx+14h]
.text:0000000000007685                 xor     edx, [rsp+68h+tp.tm_year]
.text:0000000000007689                 or      eax, edx
.text:000000000000768B                 mov     edx, [rbx+20h]
.text:000000000000768E                 test    edx, edx
.text:0000000000007690                 setz    dil
.text:0000000000007694                 test    ecx, ecx
.text:0000000000007696                 setz    sil
.text:000000000000769A                 cmp     dil, sil
.text:000000000000769D                 jz      short loc_76AB
.text:000000000000769F                 test    edx, edx
.text:00000000000076A1                 js      short loc_76AB
.text:00000000000076A3                 test    ecx, ecx
.text:00000000000076A5                 jns     loc_7603
.text:00000000000076AB
.text:00000000000076AB loc_76AB:                               ; CODE XREF: mktime_z+FD↑j
.text:00000000000076AB                                         ; mktime_z+101↑j
.text:00000000000076AB                 test    eax, eax
.text:00000000000076AD                 jz      loc_75EB
.text:00000000000076B3                 jmp     loc_7603
.text:00000000000076B3 ; ---------------------------------------------------------------------------
.text:00000000000076B8                 align 20h
.text:00000000000076C0
.text:00000000000076C0 loc_76C0:                               ; CODE XREF: mktime_z+1E↑j
.text:00000000000076C0                 mov     rdi, rsi        ; tp
.text:00000000000076C3                 call    _timegm
.text:00000000000076C8                 jmp     loc_761E
.text:00000000000076C8 ; ---------------------------------------------------------------------------
.text:00000000000076CD                 align 10h
.text:00000000000076D0
.text:00000000000076D0 loc_76D0:                               ; CODE XREF: mktime_z+32↑j
.text:00000000000076D0                                         ; mktime_z+73↑j
.text:00000000000076D0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000076D7                 jmp     loc_761E
.text:00000000000076DC ; ---------------------------------------------------------------------------
.text:00000000000076DC
.text:00000000000076DC loc_76DC:                               ; CODE XREF: mktime_z+8C↑j
.text:00000000000076DC                 call    ___stack_chk_fail
.text:00000000000076DC ; } // starts at 75A0
.text:00000000000076DC mktime_z        endp
.text:00000000000076DC
.text:00000000000076DC ; ---------------------------------------------------------------------------
.text:00000000000076E1                 align 10h
.text:00000000000076F0
.text:00000000000076F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076F0
.text:00000000000076F0 ; Attributes: info_from_lumina
.text:00000000000076F0
.text:00000000000076F0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000076F0                 public close_stream
.text:00000000000076F0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000076F0                                         ; close_stdout+33↑p
.text:00000000000076F0 ; __unwind {
.text:00000000000076F0                 push    r12
.text:00000000000076F2                 push    rbp
.text:00000000000076F3                 mov     rbp, rdi
.text:00000000000076F6                 push    rbx
.text:00000000000076F7                 call    ___fpending
.text:00000000000076FC                 mov     ebx, [rbp+0]
.text:00000000000076FF                 mov     rdi, rbp        ; stream
.text:0000000000007702                 mov     r12, rax
.text:0000000000007705                 call    rpl_fclose
.text:000000000000770A                 and     ebx, 20h
.text:000000000000770D                 test    ebx, ebx
.text:000000000000770F                 jnz     short loc_7728
.text:0000000000007711                 test    eax, eax
.text:0000000000007713                 jz      short loc_771F
.text:0000000000007715                 test    r12, r12
.text:0000000000007718                 mov     eax, 0FFFFFFFFh
.text:000000000000771D                 jz      short loc_7758
.text:000000000000771F
.text:000000000000771F loc_771F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000771F                 pop     rbx
.text:0000000000007720                 pop     rbp
.text:0000000000007721                 pop     r12
.text:0000000000007723                 retn
.text:0000000000007723 ; ---------------------------------------------------------------------------
.text:0000000000007724                 align 8
.text:0000000000007728
.text:0000000000007728 loc_7728:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000007728                 test    eax, eax
.text:000000000000772A                 jnz     short loc_7748
.text:000000000000772C                 call    ___errno_location
.text:0000000000007731                 mov     dword ptr [rax], 0
.text:0000000000007737                 mov     eax, 0FFFFFFFFh
.text:000000000000773C                 pop     rbx
.text:000000000000773D                 pop     rbp
.text:000000000000773E                 pop     r12
.text:0000000000007740                 retn
.text:0000000000007740 ; ---------------------------------------------------------------------------
.text:0000000000007741                 align 8
.text:0000000000007748
.text:0000000000007748 loc_7748:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000007748                 pop     rbx
.text:0000000000007749                 mov     eax, 0FFFFFFFFh
.text:000000000000774E                 pop     rbp
.text:000000000000774F                 pop     r12
.text:0000000000007751                 retn
.text:0000000000007751 ; ---------------------------------------------------------------------------
.text:0000000000007752                 align 8
.text:0000000000007758
.text:0000000000007758 loc_7758:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000007758                 call    ___errno_location
.text:000000000000775D                 cmp     dword ptr [rax], 9
.text:0000000000007760                 pop     rbx
.text:0000000000007761                 pop     rbp
.text:0000000000007762                 pop     r12
.text:0000000000007764                 setnz   al
.text:0000000000007767                 movzx   eax, al
.text:000000000000776A                 neg     eax
.text:000000000000776C                 retn
.text:000000000000776C ; } // starts at 76F0
.text:000000000000776C close_stream    endp
.text:000000000000776C
.text:000000000000776C ; ---------------------------------------------------------------------------
.text:000000000000776D                 align 10h
.text:0000000000007770
.text:0000000000007770 ; =============== S U B R O U T I N E =======================================
.text:0000000000007770
.text:0000000000007770
.text:0000000000007770                 public hard_locale
.text:0000000000007770 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000007770 ; __unwind {
.text:0000000000007770                 sub     rsp, 8
.text:0000000000007774                 xor     esi, esi        ; locale
.text:0000000000007776                 call    _setlocale
.text:000000000000777B                 mov     rdx, rax
.text:000000000000777E                 mov     eax, 1
.text:0000000000007783                 test    rdx, rdx
.text:0000000000007786                 jz      short loc_77A5
.text:0000000000007788                 lea     rdi, locale     ; "C"
.text:000000000000778F                 mov     ecx, 2
.text:0000000000007794                 mov     rsi, rdx
.text:0000000000007797                 repe cmpsb
.text:0000000000007799                 setnbe  cl
.text:000000000000779C                 sbb     cl, 0
.text:000000000000779F                 xor     eax, eax
.text:00000000000077A1                 test    cl, cl
.text:00000000000077A3                 jnz     short loc_77B0
.text:00000000000077A5
.text:00000000000077A5 loc_77A5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000077A5                 add     rsp, 8
.text:00000000000077A9                 retn
.text:00000000000077A9 ; ---------------------------------------------------------------------------
.text:00000000000077AA                 align 10h
.text:00000000000077B0
.text:00000000000077B0 loc_77B0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000077B0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000077B7                 mov     ecx, 6
.text:00000000000077BC                 mov     rsi, rdx
.text:00000000000077BF                 repe cmpsb
.text:00000000000077C1                 setnbe  al
.text:00000000000077C4                 sbb     al, 0
.text:00000000000077C6                 test    al, al
.text:00000000000077C8                 setnz   al
.text:00000000000077CB                 add     rsp, 8
.text:00000000000077CF                 retn
.text:00000000000077CF ; } // starts at 7770
.text:00000000000077CF hard_locale     endp
.text:00000000000077CF
.text:00000000000077D0
.text:00000000000077D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077D0
.text:00000000000077D0
.text:00000000000077D0                 public locale_charset
.text:00000000000077D0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000077D0 ; __unwind {
.text:00000000000077D0                 sub     rsp, 8
.text:00000000000077D4                 mov     edi, 0Eh        ; item
.text:00000000000077D9                 call    _nl_langinfo
.text:00000000000077DE                 test    rax, rax
.text:00000000000077E1                 jz      short loc_7800
.text:00000000000077E3                 cmp     byte ptr [rax], 0
.text:00000000000077E6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000077ED                 cmovz   rax, rdx
.text:00000000000077F1                 add     rsp, 8
.text:00000000000077F5                 retn
.text:00000000000077F5 ; ---------------------------------------------------------------------------
.text:00000000000077F6                 align 20h
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000007800                 lea     rax, aAscii     ; "ASCII"
.text:0000000000007807                 add     rsp, 8
.text:000000000000780B                 retn
.text:000000000000780B ; } // starts at 77D0
.text:000000000000780B locale_charset  endp
.text:000000000000780B
.text:000000000000780B ; ---------------------------------------------------------------------------
.text:000000000000780C                 align 10h
.text:0000000000007810
.text:0000000000007810 ; =============== S U B R O U T I N E =======================================
.text:0000000000007810
.text:0000000000007810 ; Attributes: info_from_lumina
.text:0000000000007810
.text:0000000000007810 ; void _libc_csu_init(void)
.text:0000000000007810                 public __libc_csu_init
.text:0000000000007810 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000007810 ; __unwind {
.text:0000000000007810                 push    r15
.text:0000000000007812                 push    r14
.text:0000000000007814                 mov     r15, rdx
.text:0000000000007817                 push    r13
.text:0000000000007819                 push    r12
.text:000000000000781B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000007822                 push    rbp
.text:0000000000007823                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000782A                 push    rbx
.text:000000000000782B                 mov     r13d, edi
.text:000000000000782E                 mov     r14, rsi
.text:0000000000007831                 sub     rbp, r12
.text:0000000000007834                 sub     rsp, 8
.text:0000000000007838                 sar     rbp, 3
.text:000000000000783C                 call    _init_proc
.text:0000000000007841                 test    rbp, rbp
.text:0000000000007844                 jz      short loc_7866
.text:0000000000007846                 xor     ebx, ebx
.text:0000000000007848                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000007850                 mov     rdx, r15
.text:0000000000007853                 mov     rsi, r14
.text:0000000000007856                 mov     edi, r13d
.text:0000000000007859                 call    ds:(__frame_dummy_init_array_entry - 209AF0h)[r12+rbx*8]
.text:000000000000785D                 add     rbx, 1
.text:0000000000007861                 cmp     rbp, rbx
.text:0000000000007864                 jnz     short loc_7850
.text:0000000000007866
.text:0000000000007866 loc_7866:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000007866                 add     rsp, 8
.text:000000000000786A                 pop     rbx
.text:000000000000786B                 pop     rbp
.text:000000000000786C                 pop     r12
.text:000000000000786E                 pop     r13
.text:0000000000007870                 pop     r14
.text:0000000000007872                 pop     r15
.text:0000000000007874                 retn
.text:0000000000007874 ; } // starts at 7810
.text:0000000000007874 __libc_csu_init endp
.text:0000000000007874
.text:0000000000007874 ; ---------------------------------------------------------------------------
.text:0000000000007875                 align 20h
.text:0000000000007880
.text:0000000000007880 ; =============== S U B R O U T I N E =======================================
.text:0000000000007880
.text:0000000000007880
.text:0000000000007880 ; void _libc_csu_fini(void)
.text:0000000000007880                 public __libc_csu_fini
.text:0000000000007880 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000007880 ; __unwind {
.text:0000000000007880                 rep retn
.text:0000000000007880 ; } // starts at 7880
.text:0000000000007880 __libc_csu_fini endp
.text:0000000000007880
.text:0000000000007880 ; ---------------------------------------------------------------------------
.text:0000000000007882                 align 10h
.text:0000000000007890
.text:0000000000007890 ; =============== S U B R O U T I N E =======================================
.text:0000000000007890
.text:0000000000007890
.text:0000000000007890 atexit          proc near               ; CODE XREF: main+4A↑p
.text:0000000000007890 ; __unwind {
.text:0000000000007890                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000007897                 xor     esi, esi        ; obj
.text:0000000000007899                 jmp     ___cxa_atexit
.text:0000000000007899 ; } // starts at 7890
.text:0000000000007899 atexit          endp
.text:0000000000007899
.text:0000000000007899 _text           ends
.text:0000000000007899
LOAD:000000000000789E ; ===========================================================================
LOAD:000000000000789E
LOAD:000000000000789E ; Segment type: Pure code
LOAD:000000000000789E ; Segment permissions: Read/Execute
LOAD:000000000000789E LOAD            segment byte public 'CODE' use64
LOAD:000000000000789E                 assume cs:LOAD
LOAD:000000000000789E                 ;org 789Eh
LOAD:000000000000789E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000789E                 align 20h
LOAD:000000000000789E LOAD            ends
LOAD:000000000000789E
.fini:00000000000078A0 ; ===========================================================================
.fini:00000000000078A0
.fini:00000000000078A0 ; Segment type: Pure code
.fini:00000000000078A0 ; Segment permissions: Read/Execute
.fini:00000000000078A0 _fini           segment dword public 'CODE' use64
.fini:00000000000078A0                 assume cs:_fini
.fini:00000000000078A0                 ;org 78A0h
.fini:00000000000078A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000078A0
.fini:00000000000078A0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000078A0
.fini:00000000000078A0
.fini:00000000000078A0                 public _term_proc
.fini:00000000000078A0 _term_proc      proc near
.fini:00000000000078A0                 sub     rsp, 8          ; _fini
.fini:00000000000078A4                 add     rsp, 8
.fini:00000000000078A8                 retn
.fini:00000000000078A8 _term_proc      endp
.fini:00000000000078A8
.fini:00000000000078A8 _fini           ends
.fini:00000000000078A8
LOAD:00000000000078A9 ; ===========================================================================
LOAD:00000000000078A9
LOAD:00000000000078A9 ; Segment type: Pure code
LOAD:00000000000078A9 ; Segment permissions: Read/Execute
LOAD:00000000000078A9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000078A9                 assume cs:LOAD
LOAD:00000000000078A9                 ;org 78A9h
LOAD:00000000000078A9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000078A9                 align 20h
LOAD:00000000000078A9 LOAD            ends
LOAD:00000000000078A9
.rodata:00000000000078C0 ; ===========================================================================
.rodata:00000000000078C0
.rodata:00000000000078C0 ; Segment type: Pure data
.rodata:00000000000078C0 ; Segment permissions: Read
.rodata:00000000000078C0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000078C0                 assume cs:_rodata
.rodata:00000000000078C0                 ;org 78C0h
.rodata:00000000000078C0                 public _IO_stdin_used
.rodata:00000000000078C0 _IO_stdin_used  db    1
.rodata:00000000000078C1                 db    0
.rodata:00000000000078C2                 db    2
.rodata:00000000000078C3                 db    0
.rodata:00000000000078C4 ; const char filename[6]
.rodata:00000000000078C4 filename        db '/proc/'             ; DATA XREF: print_uptime+D↑o
.rodata:00000000000078CA aUptime         db 'uptime',0           ; DATA XREF: main+6A↑o
.rodata:00000000000078CA                                         ; usage+155↑o ...
.rodata:00000000000078D1 ; const char aCouldnTGetBoot[]
.rodata:00000000000078D1 aCouldnTGetBoot db 'couldn',27h,'t get boot time',0
.rodata:00000000000078D1                                         ; DATA XREF: print_uptime:loc_2277↑o
.rodata:00000000000078E8 ; const char aHMS[]
.rodata:00000000000078E8 aHMS            db ' %H:%M:%S  ',0      ; DATA XREF: print_uptime+176↑o
.rodata:00000000000078F4 ; const char asc_78F4[]
.rodata:00000000000078F4 asc_78F4        db ' ??:????  ',0       ; DATA XREF: print_uptime:loc_2188↑o
.rodata:00000000000078FF ; const char aUpDays[]
.rodata:00000000000078FF aUpDays         db 'up ???? days ??:??,  ',0
.rodata:00000000000078FF                                         ; DATA XREF: print_uptime:loc_21D6↑o
.rodata:0000000000007915 ; const char msgid2[]
.rodata:0000000000007915 msgid2          db 'up %ld days %2d:%02d,  ',0
.rodata:0000000000007915                                         ; DATA XREF: print_uptime+1AE↑o
.rodata:000000000000792D ; const char msgid1[]
.rodata:000000000000792D msgid1          db 'up %ld day %2d:%02d,  ',0
.rodata:000000000000792D                                         ; DATA XREF: print_uptime+1B5↑o
.rodata:0000000000007944 ; const char aUp2d02d[]
.rodata:0000000000007944 aUp2d02d        db 'up  %2d:%02d,  ',0  ; DATA XREF: print_uptime:loc_21AA↑o
.rodata:0000000000007954 ; const char aLuUsers[]
.rodata:0000000000007954 aLuUsers        db '%lu users',0        ; DATA XREF: print_uptime:loc_2073↑o
.rodata:000000000000795E ; const char aLuUser[]
.rodata:000000000000795E aLuUser         db '%lu user',0         ; DATA XREF: print_uptime+1EA↑o
.rodata:000000000000795E                                         ; print_uptime+17↑o
.rodata:0000000000007967 ; const char aLoadAverage2f[]
.rodata:0000000000007967 aLoadAverage2f  db ',  load average: %.2f',0
.rodata:0000000000007967                                         ; DATA XREF: print_uptime+260↑o
.rodata:000000000000797D a2f             db ', %.2f',0           ; DATA XREF: print_uptime+29C↑o
.rodata:000000000000797D                                         ; print_uptime+2BD↑o
.rodata:0000000000007984 ; const char aUsageSOptionFi[]
.rodata:0000000000007984 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah,0
.rodata:0000000000007984                                         ; DATA XREF: usage:loc_23BD↑o
.rodata:00000000000079A2 aVarLogWtmp     db '/var/log/wtmp',0    ; DATA XREF: usage+D4↑o
.rodata:00000000000079B0 aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: main:loc_1D25↑o
.rodata:00000000000079B0                                         ; usage+DB↑o
.rodata:00000000000079BE asc_79BE        db '[',0                ; DATA XREF: usage+142↑o
.rodata:00000000000079C0 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+172↑o
.rodata:00000000000079D0 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000079D0                                         ; DATA XREF: usage+19E↑o
.rodata:00000000000079D0                                         ; usage+294↑o ...
.rodata:00000000000079E6 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1AA↑o
.rodata:00000000000079F0 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B6↑o
.rodata:00000000000079FF aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+149↑o
.rodata:0000000000007A09 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+136↑o
.rodata:0000000000007A13 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+17E↑o
.rodata:0000000000007A1D ; const char aSOnlineHelpS[]
.rodata:0000000000007A1D aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+202↑o
.rodata:0000000000007A1D                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000007A34 unk_7A34        db  47h ; G             ; DATA XREF: main+63↑o
.rodata:0000000000007A34                                         ; usage+21E↑o ...
.rodata:0000000000007A35                 db  4Eh ; N
.rodata:0000000000007A36                 db  55h ; U
.rodata:0000000000007A37                 db  20h
.rodata:0000000000007A38 ; const char domainname[]
.rodata:0000000000007A38 domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:0000000000007A38                                         ; main+37↑o ...
.rodata:0000000000007A42 ; const char s2[]
.rodata:0000000000007A42 s2              db 'en_',0              ; DATA XREF: usage+245↑o
.rodata:0000000000007A42                                         ; usage+306↑o
.rodata:0000000000007A46 ; const char aFullDocumentat[]
.rodata:0000000000007A46 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000007A46                                         ; DATA XREF: usage:loc_25C1↑o
.rodata:0000000000007A46                                         ; usage:loc_267E↑o
.rodata:0000000000007A61 ; const char dirname[]
.rodata:0000000000007A61 dirname         db '/usr/local/share/locale',0
.rodata:0000000000007A61                                         ; DATA XREF: main+24↑o
.rodata:0000000000007A79 aKavehGhazi     db 'Kaveh Ghazi',0      ; DATA XREF: main+4F↑o
.rodata:0000000000007A85 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+72↑o
.rodata:0000000000007A95 aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: main+85↑o
.rodata:0000000000007AA6 ; const char msgid[]
.rodata:0000000000007AA6 msgid           db 'extra operand %s',0 ; DATA XREF: main+E2↑o
.rodata:0000000000007AB7                 align 8
.rodata:0000000000007AB8 ; const char aTrySHelpForMor[]
.rodata:0000000000007AB8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000007AB8                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000007ADF                 align 20h
.rodata:0000000000007AE0 ; const char aPrintTheCurren[]
.rodata:0000000000007AE0 aPrintTheCurren db 'Print the current time, the length of time the system has been up'
.rodata:0000000000007AE0                                         ; DATA XREF: usage+7D↑o
.rodata:0000000000007AE0                 db ',',0Ah
.rodata:0000000000007AE0                 db 'the number of users on the system, and the average number of jobs'
.rodata:0000000000007AE0                 db 0Ah
.rodata:0000000000007AE0                 db 'in the run queue over the last 1, 5 and 15 minutes.',0
.rodata:0000000000007B99                 align 20h
.rodata:0000000000007BA0 ; const char aProcessesInAnU[]
.rodata:0000000000007BA0 aProcessesInAnU db '  Processes in',0Ah ; DATA XREF: usage+9F↑o
.rodata:0000000000007BA0                 db 'an uninterruptible sleep state also contribute to the load averag'
.rodata:0000000000007BA0                 db 'e.',0Ah,0
.rodata:0000000000007BF4                 align 8
.rodata:0000000000007BF8 ; const char aIfFileIsNotSpe[]
.rodata:0000000000007BF8 aIfFileIsNotSpe db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
.rodata:0000000000007BF8                                         ; DATA XREF: usage+C1↑o
.rodata:0000000000007BF8                 db 0Ah,0
.rodata:0000000000007C33                 align 8
.rodata:0000000000007C38 ; const char aHelpDisplayThi[]
.rodata:0000000000007C38 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000007C38                                         ; DATA XREF: usage+F8↑o
.rodata:0000000000007C65                 align 8
.rodata:0000000000007C68 ; const char aVersionOutputV[]
.rodata:0000000000007C68 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000007C68                                         ; DATA XREF: usage+11D↑o
.rodata:0000000000007C9E                 align 20h
.rodata:0000000000007CA0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007CA0                                         ; DATA XREF: usage+217↑o
.rodata:0000000000007CA0                                         ; usage+27B↑o ...
.rodata:0000000000007CC8 ; const char aReportAnyTrans[]
.rodata:0000000000007CC8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000007CC8                                         ; DATA XREF: usage+36F↑o
.rodata:0000000000007CC8                 db 'am/>',0Ah,0
.rodata:0000000000007D0F                 align 10h
.rodata:0000000000007D10 ; const char aOrAvailableLoc[]
.rodata:0000000000007D10 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000007D10                                         ; DATA XREF: usage:loc_2606↑o
.rodata:0000000000007D43                 align 8
.rodata:0000000000007D48 qword_7D48      dq 0                    ; DATA XREF: print_uptime+392↑r
.rodata:0000000000007D50 qword_7D50      dq 43E0000000000000h    ; DATA XREF: print_uptime+3A0↑r
.rodata:0000000000007D58 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000007D5D ; const char locale[2]
.rodata:0000000000007D5D locale          db 'C',0                ; DATA XREF: c_strtod:loc_2750↑o
.rodata:0000000000007D5D                                         ; hard_locale+18↑o
.rodata:0000000000007D5F ; const char aWriteError[]
.rodata:0000000000007D5F aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_27D3↑o
.rodata:0000000000007D6B ; const char format[]
.rodata:0000000000007D6B format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000007D6B                                         ; uptime+74↑o ...
.rodata:0000000000007D72 aHM             db '%H:%M',0            ; DATA XREF: __strftime_internal:loc_2F5D↑o
.rodata:0000000000007D78 aHMS_0          db '%H:%M:%S',0         ; DATA XREF: __strftime_internal:loc_338A↑o
.rodata:0000000000007D81 aYMD            db '%Y-%m-%d',0         ; DATA XREF: __strftime_internal+DAE↑o
.rodata:0000000000007D81                                         ; __strftime_internal+1AFF↑o
.rodata:0000000000007D8A aMDY            db '%m/%d/%y',0         ; DATA XREF: __strftime_internal+D77↑o
.rodata:0000000000007D93                 align 4
.rodata:0000000000007D94 jpt_2AC3        dd offset loc_36CD - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                                         ; DATA XREF: __strftime_internal+1B1↑o
.rodata:0000000000007D94                                         ; __strftime_internal+1BC↑r
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h ; jump table for switch statement
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_3731 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_37B1 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset loc_2DD0 - 7D94h
.rodata:0000000000007D94                 dd offset loc_3714 - 7D94h, offset loc_35F7 - 7D94h, offset loc_366E - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_368E - 7D94h, offset loc_33D6 - 7D94h
.rodata:0000000000007D94                 dd offset loc_3554 - 7D94h, offset loc_35DF - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset loc_356F - 7D94h
.rodata:0000000000007D94                 dd offset loc_358A - 7D94h, offset def_2AC3 - 7D94h, offset loc_2F41 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_2F5D - 7D94h, offset loc_2FEA - 7D94h
.rodata:0000000000007D94                 dd offset loc_338A - 7D94h, offset loc_33A1 - 7D94h, offset loc_33D6 - 7D94h
.rodata:0000000000007D94                 dd offset loc_38A8 - 7D94h, offset loc_2CA0 - 7D94h, offset loc_38F5 - 7D94h
.rodata:0000000000007D94                 dd offset loc_3953 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h, offset def_2AC3 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_2DD0 - 7D94h, offset loc_3BCB - 7D94h
.rodata:0000000000007D94                 dd offset loc_2CA0 - 7D94h, offset loc_3A72 - 7D94h, offset loc_3A8D - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_33D6 - 7D94h, offset loc_3BCB - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_3ABE - 7D94h, offset loc_3AEF - 7D94h
.rodata:0000000000007D94                 dd offset loc_3B02 - 7D94h, offset loc_3B12 - 7D94h, offset loc_3B43 - 7D94h
.rodata:0000000000007D94                 dd offset def_2AC3 - 7D94h, offset loc_3BC4 - 7D94h, offset loc_31B6 - 7D94h
.rodata:0000000000007D94                 dd offset loc_2CAA - 7D94h, offset loc_3004 - 7D94h, offset loc_2E10 - 7D94h
.rodata:0000000000007D94                 dd offset loc_2E91 - 7D94h, offset def_2AC3 - 7D94h, offset loc_2F29 - 7D94h
.rodata:0000000000007D94                 dd offset loc_2CA0 - 7D94h, offset loc_3A2A - 7D94h, offset loc_3BF0 - 7D94h
.rodata:0000000000007F80 ; const char shortopts[2]
.rodata:0000000000007F80 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000007F80                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000007F82 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000007F87 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:0000000000007F8F                 align 10h
.rodata:0000000000007F90 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007F90                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007FC8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007FD0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007FD4 unk_7FD4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007FD5                 db  80h
.rodata:0000000000007FD6                 db  98h
.rodata:0000000000007FD7                 db    0
.rodata:0000000000007FD8 unk_7FD8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007FD9                 db  80h
.rodata:0000000000007FDA                 db  99h
.rodata:0000000000007FDB                 db    0
.rodata:0000000000007FDC unk_7FDC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000007FDD                 db    7
.rodata:0000000000007FDE                 db  65h ; e
.rodata:0000000000007FDF                 db    0
.rodata:0000000000007FE0 unk_7FE0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007FE1                 db 0AFh
.rodata:0000000000007FE2                 db    0
.rodata:0000000000007FE3 unk_7FE3        db  22h ; "             ; DATA XREF: gettext_quote:loc_48B0↑o
.rodata:0000000000007FE3                                         ; quotearg_buffer_restyled:loc_566B↑o ...
.rodata:0000000000007FE4                 db    0
.rodata:0000000000007FE5 ; const char asc_7FE5[2]
.rodata:0000000000007FE5 asc_7FE5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000007FE5                                         ; quotearg_buffer_restyled:loc_4A33↑o ...
.rodata:0000000000007FE7 ; const char asc_7FE7[2]
.rodata:0000000000007FE7 asc_7FE7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007FE7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007FE9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007FF1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209B68↓o
.rodata:0000000000007FF7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209B70↓o
.rodata:0000000000008004 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209B78↓o
.rodata:0000000000008004                                         ; .data.rel.ro:0000000000209B98↓o
.rodata:0000000000008011 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000008011                                         ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:0000000000008025 aC_0            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000209B88↓o
.rodata:0000000000008027 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209B90↓o
.rodata:000000000000802F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209BA8↓o
.rodata:0000000000008037                 align 20h
.rodata:0000000000008040 jpt_4A11        dd offset loc_57BA - 8040h
.rodata:0000000000008040                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008040                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008040                 dd offset loc_4A13 - 8040h ; jump table for switch statement
.rodata:0000000000008040                 dd offset loc_59E8 - 8040h
.rodata:0000000000008040                 dd offset loc_57F4 - 8040h
.rodata:0000000000008040                 dd offset loc_55E4 - 8040h
.rodata:0000000000008040                 dd offset loc_5640 - 8040h
.rodata:0000000000008040                 dd offset loc_5695 - 8040h
.rodata:0000000000008040                 dd offset loc_56DA - 8040h
.rodata:0000000000008040                 dd offset loc_5714 - 8040h
.rodata:0000000000008040                 dd offset loc_5714 - 8040h
.rodata:0000000000008040                 dd offset loc_5714 - 8040h
.rodata:000000000000806C jpt_4B6E        dd offset loc_4D90 - 806Ch, offset def_4B6E - 806Ch, offset def_4B6E - 806Ch
.rodata:000000000000806C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000806C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset def_4B6E - 806Ch, offset def_4B6E - 806Ch ; jump table for switch statement
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset loc_4DD0 - 806Ch, offset loc_4CD8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4C98 - 806Ch, offset loc_4E60 - 806Ch, offset loc_4E50 - 806Ch
.rodata:000000000000806C                 dd offset loc_4E40 - 806Ch, offset loc_4E30 - 806Ch, offset def_4B6E - 806Ch
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset def_4B6E - 806Ch, offset def_4B6E - 806Ch
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset def_4B6E - 806Ch, offset def_4B6E - 806Ch
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset def_4B6E - 806Ch, offset def_4B6E - 806Ch
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset def_4B6E - 806Ch, offset def_4B6E - 806Ch
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset def_4B6E - 806Ch, offset def_4B6E - 806Ch
.rodata:000000000000806C                 dd offset def_4B6E - 806Ch, offset def_4B6E - 806Ch, offset loc_4E20 - 806Ch
.rodata:000000000000806C                 dd offset loc_4E10 - 806Ch, offset loc_4E10 - 806Ch, offset loc_4DE0 - 806Ch
.rodata:000000000000806C                 dd offset loc_4E10 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4E10 - 806Ch
.rodata:000000000000806C                 dd offset loc_4C73 - 806Ch, offset loc_4E10 - 806Ch, offset loc_4E10 - 806Ch
.rodata:000000000000806C                 dd offset loc_4E10 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4E10 - 806Ch
.rodata:000000000000806C                 dd offset loc_4E10 - 806Ch, offset loc_4E10 - 806Ch, offset loc_4E10 - 806Ch
.rodata:000000000000806C                 dd offset loc_4C43 - 806Ch, offset def_4B6E - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4E10 - 806Ch, offset loc_4CE8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4E10 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4E10 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch, offset loc_4DB8 - 806Ch
.rodata:000000000000806C                 dd offset loc_4B73 - 806Ch, offset loc_4E10 - 806Ch, offset loc_4B73 - 806Ch
.rodata:000000000000806C                 dd offset loc_4DE0 - 806Ch
.rodata:0000000000008268 jpt_4EFA        dd offset loc_4F60 - 8268h, offset def_4EFA - 8268h, offset def_4EFA - 8268h
.rodata:0000000000008268                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000008268                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset def_4EFA - 8268h, offset def_4EFA - 8268h ; jump table for switch statement
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset loc_4F50 - 8268h, offset loc_50A0 - 8268h
.rodata:0000000000008268                 dd offset loc_5088 - 8268h, offset loc_4F38 - 8268h, offset loc_5078 - 8268h
.rodata:0000000000008268                 dd offset loc_4F20 - 8268h, offset loc_5060 - 8268h, offset def_4EFA - 8268h
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset def_4EFA - 8268h, offset def_4EFA - 8268h
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset def_4EFA - 8268h, offset def_4EFA - 8268h
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset def_4EFA - 8268h, offset def_4EFA - 8268h
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset def_4EFA - 8268h, offset def_4EFA - 8268h
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset def_4EFA - 8268h, offset def_4EFA - 8268h
.rodata:0000000000008268                 dd offset def_4EFA - 8268h, offset def_4EFA - 8268h, offset loc_5048 - 8268h
.rodata:0000000000008268                 dd offset loc_5030 - 8268h, offset loc_5030 - 8268h, offset loc_5018 - 8268h
.rodata:0000000000008268                 dd offset loc_5030 - 8268h, offset loc_5000 - 8268h, offset loc_5030 - 8268h
.rodata:0000000000008268                 dd offset loc_4C70 - 8268h, offset loc_5030 - 8268h, offset loc_5030 - 8268h
.rodata:0000000000008268                 dd offset loc_5030 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5030 - 8268h
.rodata:0000000000008268                 dd offset loc_5030 - 8268h, offset loc_5030 - 8268h, offset loc_5030 - 8268h
.rodata:0000000000008268                 dd offset loc_4C40 - 8268h, offset def_4EFA - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5030 - 8268h, offset loc_4F00 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5030 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5030 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_5000 - 8268h, offset loc_5000 - 8268h, offset loc_5000 - 8268h
.rodata:0000000000008268                 dd offset loc_4B70 - 8268h, offset loc_5030 - 8268h, offset loc_4B70 - 8268h
.rodata:0000000000008268                 dd offset loc_5018 - 8268h
.rodata:0000000000008464                 align 20h
.rodata:0000000000008480                 public quoting_style_vals
.rodata:0000000000008480 quoting_style_vals db    0
.rodata:0000000000008481                 db    0
.rodata:0000000000008482                 db    0
.rodata:0000000000008483                 db    0
.rodata:0000000000008484                 db    1
.rodata:0000000000008485                 db    0
.rodata:0000000000008486                 db    0
.rodata:0000000000008487                 db    0
.rodata:0000000000008488                 db    2
.rodata:0000000000008489                 db    0
.rodata:000000000000848A                 db    0
.rodata:000000000000848B                 db    0
.rodata:000000000000848C                 db    3
.rodata:000000000000848D                 db    0
.rodata:000000000000848E                 db    0
.rodata:000000000000848F                 db    0
.rodata:0000000000008490                 db    4
.rodata:0000000000008491                 db    0
.rodata:0000000000008492                 db    0
.rodata:0000000000008493                 db    0
.rodata:0000000000008494                 db    5
.rodata:0000000000008495                 db    0
.rodata:0000000000008496                 db    0
.rodata:0000000000008497                 db    0
.rodata:0000000000008498                 db    6
.rodata:0000000000008499                 db    0
.rodata:000000000000849A                 db    0
.rodata:000000000000849B                 db    0
.rodata:000000000000849C                 db    7
.rodata:000000000000849D                 db    0
.rodata:000000000000849E                 db    0
.rodata:000000000000849F                 db    0
.rodata:00000000000084A0                 db    8
.rodata:00000000000084A1                 db    0
.rodata:00000000000084A2                 db    0
.rodata:00000000000084A3                 db    0
.rodata:00000000000084A4                 db    9
.rodata:00000000000084A5                 db    0
.rodata:00000000000084A6                 db    0
.rodata:00000000000084A7                 db    0
.rodata:00000000000084A8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000084B4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000084BB ; const char aC[]
.rodata:00000000000084BB aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_655C↑o
.rodata:00000000000084BF ; const char aWrittenByS[]
.rodata:00000000000084BF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000084BF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000084CF ; const char aWrittenBySAndS[]
.rodata:00000000000084CF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000084CF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000084E6 ; const char aWrittenBySSAnd[]
.rodata:00000000000084E6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000084E6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000008502 ; const char aReportBugsToS[]
.rodata:0000000000008502 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000008502                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000008517 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000008517                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000852D ; const char aSHomePageS[]
.rodata:000000000000852D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000852D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000008541                 align 8
.rodata:0000000000008548 ; const char aLicenseGplv3Gn[]
.rodata:0000000000008548 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000008548                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000008548                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000008548                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000008548                 db '.',0Ah
.rodata:0000000000008548                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000008548                 db 0Ah,0
.rodata:0000000000008614                 align 8
.rodata:0000000000008618 ; const char aWrittenBySSSAn[]
.rodata:0000000000008618 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008618                                         ; DATA XREF: version_etc_arn:loc_67B0↑o
.rodata:0000000000008618                 db 'and %s.',0Ah,0
.rodata:0000000000008638 ; const char aWrittenBySSSSA[]
.rodata:0000000000008638 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008638                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000008638                 db '%s, and %s.',0Ah,0
.rodata:000000000000865C                 align 20h
.rodata:0000000000008660 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000008660 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008660                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000008660                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000008688 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000008688 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008688                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000008688                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000086B4                 align 8
.rodata:00000000000086B8 ; const char aWrittenBySSSSS[]
.rodata:00000000000086B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000086B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000086B8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000086B8                 db 'and %s.',0Ah,0
.rodata:00000000000086E8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000086E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000086E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000086E8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000086E8                 db '%s, and %s.',0Ah,0
.rodata:000000000000871C                 align 20h
.rodata:0000000000008720 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008720                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000008720                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008720                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000875C                 align 20h
.rodata:0000000000008760 ; const char aGeneralHelpUsi[]
.rodata:0000000000008760 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000008760                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000008760                 db 0
.rodata:00000000000087A1                 align 8
.rodata:00000000000087A8 jpt_65C4        dd offset loc_6646 - 87A8h
.rodata:00000000000087A8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000087A8                                         ; version_etc_arn+9D↑r
.rodata:00000000000087A8                 dd offset loc_66D8 - 87A8h ; jump table for switch statement
.rodata:00000000000087A8                 dd offset loc_6718 - 87A8h
.rodata:00000000000087A8                 dd offset loc_6760 - 87A8h
.rodata:00000000000087A8                 dd offset loc_67B0 - 87A8h
.rodata:00000000000087A8                 dd offset loc_6808 - 87A8h
.rodata:00000000000087A8                 dd offset loc_6838 - 87A8h
.rodata:00000000000087A8                 dd offset loc_68A0 - 87A8h
.rodata:00000000000087A8                 dd offset loc_65D0 - 87A8h
.rodata:00000000000087A8                 dd offset loc_6680 - 87A8h
.rodata:00000000000087D0                 align 20h
.rodata:00000000000087E0                 public version_etc_copyright
.rodata:00000000000087E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000087E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000880F ; const char aMemoryExhauste[]
.rodata:000000000000880F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000008820 ; const char name[]
.rodata:0000000000008820 name            db 'TZ',0               ; DATA XREF: setenv_TZ+8↑o
.rodata:0000000000008820                                         ; setenv_TZ:loc_7190↑o ...
.rodata:0000000000008823 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_77B0↑o
.rodata:0000000000008829 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000008829                                         ; locale_charset:loc_7800↑o
.rodata:0000000000008829 _rodata         ends
.rodata:0000000000008829
LOAD:000000000000882F ; ===========================================================================
LOAD:000000000000882F
LOAD:000000000000882F ; Segment type: Pure code
LOAD:000000000000882F ; Segment permissions: Read/Execute
LOAD:000000000000882F LOAD            segment byte public 'CODE' use64
LOAD:000000000000882F                 assume cs:LOAD
LOAD:000000000000882F                 ;org 882Fh
LOAD:000000000000882F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000882F                 align 10h
LOAD:000000000000882F LOAD            ends
LOAD:000000000000882F
.eh_frame_hdr:0000000000008830 ; ===========================================================================
.eh_frame_hdr:0000000000008830
.eh_frame_hdr:0000000000008830 ; Segment type: Pure data
.eh_frame_hdr:0000000000008830 ; Segment permissions: Read
.eh_frame_hdr:0000000000008830 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000008830                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000008830                 ;org 8830h
.eh_frame_hdr:0000000000008830 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000008831                 db  1Bh
.eh_frame_hdr:0000000000008832                 db    3
.eh_frame_hdr:0000000000008833                 db  3Bh ; ;
.eh_frame_hdr:0000000000008834                 db 0DCh
.eh_frame_hdr:0000000000008835                 db    2
.eh_frame_hdr:0000000000008836                 db    0
.eh_frame_hdr:0000000000008837                 db    0
.eh_frame_hdr:0000000000008838                 db  5Ah ; Z
.eh_frame_hdr:0000000000008839                 db    0
.eh_frame_hdr:000000000000883A                 db    0
.eh_frame_hdr:000000000000883B                 db    0
.eh_frame_hdr:000000000000883C                 db 0E0h
.eh_frame_hdr:000000000000883D                 db  8Fh
.eh_frame_hdr:000000000000883E                 db 0FFh
.eh_frame_hdr:000000000000883F                 db 0FFh
.eh_frame_hdr:0000000000008840                 db  28h ; (
.eh_frame_hdr:0000000000008841                 db    3
.eh_frame_hdr:0000000000008842                 db    0
.eh_frame_hdr:0000000000008843                 db    0
.eh_frame_hdr:0000000000008844                 db  20h
.eh_frame_hdr:0000000000008845                 db  94h
.eh_frame_hdr:0000000000008846                 db 0FFh
.eh_frame_hdr:0000000000008847                 db 0FFh
.eh_frame_hdr:0000000000008848                 db  50h ; P
.eh_frame_hdr:0000000000008849                 db    3
.eh_frame_hdr:000000000000884A                 db    0
.eh_frame_hdr:000000000000884B                 db    0
.eh_frame_hdr:000000000000884C                 db  30h ; 0
.eh_frame_hdr:000000000000884D                 db  94h
.eh_frame_hdr:000000000000884E                 db 0FFh
.eh_frame_hdr:000000000000884F                 db 0FFh
.eh_frame_hdr:0000000000008850                 db    8
.eh_frame_hdr:0000000000008851                 db    4
.eh_frame_hdr:0000000000008852                 db    0
.eh_frame_hdr:0000000000008853                 db    0
.eh_frame_hdr:0000000000008854                 db  50h ; P
.eh_frame_hdr:0000000000008855                 db  95h
.eh_frame_hdr:0000000000008856                 db 0FFh
.eh_frame_hdr:0000000000008857                 db 0FFh
.eh_frame_hdr:0000000000008858                 db 0F8h
.eh_frame_hdr:0000000000008859                 db    2
.eh_frame_hdr:000000000000885A                 db    0
.eh_frame_hdr:000000000000885B                 db    0
.eh_frame_hdr:000000000000885C                 db  60h ; `
.eh_frame_hdr:000000000000885D                 db  96h
.eh_frame_hdr:000000000000885E                 db 0FFh
.eh_frame_hdr:000000000000885F                 db 0FFh
.eh_frame_hdr:0000000000008860                 db  68h ; h
.eh_frame_hdr:0000000000008861                 db    3
.eh_frame_hdr:0000000000008862                 db    0
.eh_frame_hdr:0000000000008863                 db    0
.eh_frame_hdr:0000000000008864                 db 0A0h
.eh_frame_hdr:0000000000008865                 db  9Ah
.eh_frame_hdr:0000000000008866                 db 0FFh
.eh_frame_hdr:0000000000008867                 db 0FFh
.eh_frame_hdr:0000000000008868                 db 0B8h
.eh_frame_hdr:0000000000008869                 db    3
.eh_frame_hdr:000000000000886A                 db    0
.eh_frame_hdr:000000000000886B                 db    0
.eh_frame_hdr:000000000000886C                 db  30h ; 0
.eh_frame_hdr:000000000000886D                 db  9Bh
.eh_frame_hdr:000000000000886E                 db 0FFh
.eh_frame_hdr:000000000000886F                 db 0FFh
.eh_frame_hdr:0000000000008870                 db 0DCh
.eh_frame_hdr:0000000000008871                 db    3
.eh_frame_hdr:0000000000008872                 db    0
.eh_frame_hdr:0000000000008873                 db    0
.eh_frame_hdr:0000000000008874                 db 0D0h
.eh_frame_hdr:0000000000008875                 db  9Eh
.eh_frame_hdr:0000000000008876                 db 0FFh
.eh_frame_hdr:0000000000008877                 db 0FFh
.eh_frame_hdr:0000000000008878                 db  48h ; H
.eh_frame_hdr:0000000000008879                 db    4
.eh_frame_hdr:000000000000887A                 db    0
.eh_frame_hdr:000000000000887B                 db    0
.eh_frame_hdr:000000000000887C                 db  40h ; @
.eh_frame_hdr:000000000000887D                 db  9Fh
.eh_frame_hdr:000000000000887E                 db 0FFh
.eh_frame_hdr:000000000000887F                 db 0FFh
.eh_frame_hdr:0000000000008880                 db  80h
.eh_frame_hdr:0000000000008881                 db    4
.eh_frame_hdr:0000000000008882                 db    0
.eh_frame_hdr:0000000000008883                 db    0
.eh_frame_hdr:0000000000008884                 db  50h ; P
.eh_frame_hdr:0000000000008885                 db  9Fh
.eh_frame_hdr:0000000000008886                 db 0FFh
.eh_frame_hdr:0000000000008887                 db 0FFh
.eh_frame_hdr:0000000000008888                 db  94h
.eh_frame_hdr:0000000000008889                 db    4
.eh_frame_hdr:000000000000888A                 db    0
.eh_frame_hdr:000000000000888B                 db    0
.eh_frame_hdr:000000000000888C                 db  60h ; `
.eh_frame_hdr:000000000000888D                 db  9Fh
.eh_frame_hdr:000000000000888E                 db 0FFh
.eh_frame_hdr:000000000000888F                 db 0FFh
.eh_frame_hdr:0000000000008890                 db 0A8h
.eh_frame_hdr:0000000000008891                 db    4
.eh_frame_hdr:0000000000008892                 db    0
.eh_frame_hdr:0000000000008893                 db    0
.eh_frame_hdr:0000000000008894                 db  10h
.eh_frame_hdr:0000000000008895                 db 0A0h
.eh_frame_hdr:0000000000008896                 db 0FFh
.eh_frame_hdr:0000000000008897                 db 0FFh
.eh_frame_hdr:0000000000008898                 db 0D8h
.eh_frame_hdr:0000000000008899                 db    4
.eh_frame_hdr:000000000000889A                 db    0
.eh_frame_hdr:000000000000889B                 db    0
.eh_frame_hdr:000000000000889C                 db  70h ; p
.eh_frame_hdr:000000000000889D                 db 0A0h
.eh_frame_hdr:000000000000889E                 db 0FFh
.eh_frame_hdr:000000000000889F                 db 0FFh
.eh_frame_hdr:00000000000088A0                 db  14h
.eh_frame_hdr:00000000000088A1                 db    5
.eh_frame_hdr:00000000000088A2                 db    0
.eh_frame_hdr:00000000000088A3                 db    0
.eh_frame_hdr:00000000000088A4                 db 0D0h
.eh_frame_hdr:00000000000088A5                 db 0A0h
.eh_frame_hdr:00000000000088A6                 db 0FFh
.eh_frame_hdr:00000000000088A7                 db 0FFh
.eh_frame_hdr:00000000000088A8                 db  50h ; P
.eh_frame_hdr:00000000000088A9                 db    5
.eh_frame_hdr:00000000000088AA                 db    0
.eh_frame_hdr:00000000000088AB                 db    0
.eh_frame_hdr:00000000000088AC                 db 0F0h
.eh_frame_hdr:00000000000088AD                 db 0BCh
.eh_frame_hdr:00000000000088AE                 db 0FFh
.eh_frame_hdr:00000000000088AF                 db 0FFh
.eh_frame_hdr:00000000000088B0                 db 0C8h
.eh_frame_hdr:00000000000088B1                 db    5
.eh_frame_hdr:00000000000088B2                 db    0
.eh_frame_hdr:00000000000088B3                 db    0
.eh_frame_hdr:00000000000088B4                 db  40h ; @
.eh_frame_hdr:00000000000088B5                 db 0BDh
.eh_frame_hdr:00000000000088B6                 db 0FFh
.eh_frame_hdr:00000000000088B7                 db 0FFh
.eh_frame_hdr:00000000000088B8                 db 0F0h
.eh_frame_hdr:00000000000088B9                 db    5
.eh_frame_hdr:00000000000088BA                 db    0
.eh_frame_hdr:00000000000088BB                 db    0
.eh_frame_hdr:00000000000088BC                 db  80h
.eh_frame_hdr:00000000000088BD                 db 0BEh
.eh_frame_hdr:00000000000088BE                 db 0FFh
.eh_frame_hdr:00000000000088BF                 db 0FFh
.eh_frame_hdr:00000000000088C0                 db  2Ch ; ,
.eh_frame_hdr:00000000000088C1                 db    6
.eh_frame_hdr:00000000000088C2                 db    0
.eh_frame_hdr:00000000000088C3                 db    0
.eh_frame_hdr:00000000000088C4                 db 0C0h
.eh_frame_hdr:00000000000088C5                 db 0BFh
.eh_frame_hdr:00000000000088C6                 db 0FFh
.eh_frame_hdr:00000000000088C7                 db 0FFh
.eh_frame_hdr:00000000000088C8                 db  78h ; x
.eh_frame_hdr:00000000000088C9                 db    6
.eh_frame_hdr:00000000000088CA                 db    0
.eh_frame_hdr:00000000000088CB                 db    0
.eh_frame_hdr:00000000000088CC                 db  60h ; `
.eh_frame_hdr:00000000000088CD                 db 0C0h
.eh_frame_hdr:00000000000088CE                 db 0FFh
.eh_frame_hdr:00000000000088CF                 db 0FFh
.eh_frame_hdr:00000000000088D0                 db  98h
.eh_frame_hdr:00000000000088D1                 db    6
.eh_frame_hdr:00000000000088D2                 db    0
.eh_frame_hdr:00000000000088D3                 db    0
.eh_frame_hdr:00000000000088D4                 db  50h ; P
.eh_frame_hdr:00000000000088D5                 db 0C1h
.eh_frame_hdr:00000000000088D6                 db 0FFh
.eh_frame_hdr:00000000000088D7                 db 0FFh
.eh_frame_hdr:00000000000088D8                 db 0DCh
.eh_frame_hdr:00000000000088D9                 db    6
.eh_frame_hdr:00000000000088DA                 db    0
.eh_frame_hdr:00000000000088DB                 db    0
.eh_frame_hdr:00000000000088DC                 db  90h
.eh_frame_hdr:00000000000088DD                 db 0D3h
.eh_frame_hdr:00000000000088DE                 db 0FFh
.eh_frame_hdr:00000000000088DF                 db 0FFh
.eh_frame_hdr:00000000000088E0                 db  54h ; T
.eh_frame_hdr:00000000000088E1                 db    7
.eh_frame_hdr:00000000000088E2                 db    0
.eh_frame_hdr:00000000000088E3                 db    0
.eh_frame_hdr:00000000000088E4                 db  40h ; @
.eh_frame_hdr:00000000000088E5                 db 0D5h
.eh_frame_hdr:00000000000088E6                 db 0FFh
.eh_frame_hdr:00000000000088E7                 db 0FFh
.eh_frame_hdr:00000000000088E8                 db 0C0h
.eh_frame_hdr:00000000000088E9                 db    7
.eh_frame_hdr:00000000000088EA                 db    0
.eh_frame_hdr:00000000000088EB                 db    0
.eh_frame_hdr:00000000000088EC                 db  80h
.eh_frame_hdr:00000000000088ED                 db 0D5h
.eh_frame_hdr:00000000000088EE                 db 0FFh
.eh_frame_hdr:00000000000088EF                 db 0FFh
.eh_frame_hdr:00000000000088F0                 db 0ECh
.eh_frame_hdr:00000000000088F1                 db    7
.eh_frame_hdr:00000000000088F2                 db    0
.eh_frame_hdr:00000000000088F3                 db    0
.eh_frame_hdr:00000000000088F4                 db 0A0h
.eh_frame_hdr:00000000000088F5                 db 0D5h
.eh_frame_hdr:00000000000088F6                 db 0FFh
.eh_frame_hdr:00000000000088F7                 db 0FFh
.eh_frame_hdr:00000000000088F8                 db    0
.eh_frame_hdr:00000000000088F9                 db    8
.eh_frame_hdr:00000000000088FA                 db    0
.eh_frame_hdr:00000000000088FB                 db    0
.eh_frame_hdr:00000000000088FC                 db 0C0h
.eh_frame_hdr:00000000000088FD                 db 0D5h
.eh_frame_hdr:00000000000088FE                 db 0FFh
.eh_frame_hdr:00000000000088FF                 db 0FFh
.eh_frame_hdr:0000000000008900                 db  14h
.eh_frame_hdr:0000000000008901                 db    8
.eh_frame_hdr:0000000000008902                 db    0
.eh_frame_hdr:0000000000008903                 db    0
.eh_frame_hdr:0000000000008904                 db    0
.eh_frame_hdr:0000000000008905                 db 0D6h
.eh_frame_hdr:0000000000008906                 db 0FFh
.eh_frame_hdr:0000000000008907                 db 0FFh
.eh_frame_hdr:0000000000008908                 db  28h ; (
.eh_frame_hdr:0000000000008909                 db    8
.eh_frame_hdr:000000000000890A                 db    0
.eh_frame_hdr:000000000000890B                 db    0
.eh_frame_hdr:000000000000890C                 db  20h
.eh_frame_hdr:000000000000890D                 db 0D6h
.eh_frame_hdr:000000000000890E                 db 0FFh
.eh_frame_hdr:000000000000890F                 db 0FFh
.eh_frame_hdr:0000000000008910                 db  3Ch ; <
.eh_frame_hdr:0000000000008911                 db    8
.eh_frame_hdr:0000000000008912                 db    0
.eh_frame_hdr:0000000000008913                 db    0
.eh_frame_hdr:0000000000008914                 db  50h ; P
.eh_frame_hdr:0000000000008915                 db 0D6h
.eh_frame_hdr:0000000000008916                 db 0FFh
.eh_frame_hdr:0000000000008917                 db 0FFh
.eh_frame_hdr:0000000000008918                 db  50h ; P
.eh_frame_hdr:0000000000008919                 db    8
.eh_frame_hdr:000000000000891A                 db    0
.eh_frame_hdr:000000000000891B                 db    0
.eh_frame_hdr:000000000000891C                 db 0D0h
.eh_frame_hdr:000000000000891D                 db 0D6h
.eh_frame_hdr:000000000000891E                 db 0FFh
.eh_frame_hdr:000000000000891F                 db 0FFh
.eh_frame_hdr:0000000000008920                 db 0A4h
.eh_frame_hdr:0000000000008921                 db    8
.eh_frame_hdr:0000000000008922                 db    0
.eh_frame_hdr:0000000000008923                 db    0
.eh_frame_hdr:0000000000008924                 db 0C0h
.eh_frame_hdr:0000000000008925                 db 0D7h
.eh_frame_hdr:0000000000008926                 db 0FFh
.eh_frame_hdr:0000000000008927                 db 0FFh
.eh_frame_hdr:0000000000008928                 db  10h
.eh_frame_hdr:0000000000008929                 db    9
.eh_frame_hdr:000000000000892A                 db    0
.eh_frame_hdr:000000000000892B                 db    0
.eh_frame_hdr:000000000000892C                 db 0D0h
.eh_frame_hdr:000000000000892D                 db 0D7h
.eh_frame_hdr:000000000000892E                 db 0FFh
.eh_frame_hdr:000000000000892F                 db 0FFh
.eh_frame_hdr:0000000000008930                 db  24h ; $
.eh_frame_hdr:0000000000008931                 db    9
.eh_frame_hdr:0000000000008932                 db    0
.eh_frame_hdr:0000000000008933                 db    0
.eh_frame_hdr:0000000000008934                 db  70h ; p
.eh_frame_hdr:0000000000008935                 db 0D8h
.eh_frame_hdr:0000000000008936                 db 0FFh
.eh_frame_hdr:0000000000008937                 db 0FFh
.eh_frame_hdr:0000000000008938                 db  50h ; P
.eh_frame_hdr:0000000000008939                 db    9
.eh_frame_hdr:000000000000893A                 db    0
.eh_frame_hdr:000000000000893B                 db    0
.eh_frame_hdr:000000000000893C                 db  90h
.eh_frame_hdr:000000000000893D                 db 0D8h
.eh_frame_hdr:000000000000893E                 db 0FFh
.eh_frame_hdr:000000000000893F                 db 0FFh
.eh_frame_hdr:0000000000008940                 db  64h ; d
.eh_frame_hdr:0000000000008941                 db    9
.eh_frame_hdr:0000000000008942                 db    0
.eh_frame_hdr:0000000000008943                 db    0
.eh_frame_hdr:0000000000008944                 db 0A0h
.eh_frame_hdr:0000000000008945                 db 0D8h
.eh_frame_hdr:0000000000008946                 db 0FFh
.eh_frame_hdr:0000000000008947                 db 0FFh
.eh_frame_hdr:0000000000008948                 db  78h ; x
.eh_frame_hdr:0000000000008949                 db    9
.eh_frame_hdr:000000000000894A                 db    0
.eh_frame_hdr:000000000000894B                 db    0
.eh_frame_hdr:000000000000894C                 db 0C0h
.eh_frame_hdr:000000000000894D                 db 0D8h
.eh_frame_hdr:000000000000894E                 db 0FFh
.eh_frame_hdr:000000000000894F                 db 0FFh
.eh_frame_hdr:0000000000008950                 db  8Ch
.eh_frame_hdr:0000000000008951                 db    9
.eh_frame_hdr:0000000000008952                 db    0
.eh_frame_hdr:0000000000008953                 db    0
.eh_frame_hdr:0000000000008954                 db 0E0h
.eh_frame_hdr:0000000000008955                 db 0D8h
.eh_frame_hdr:0000000000008956                 db 0FFh
.eh_frame_hdr:0000000000008957                 db 0FFh
.eh_frame_hdr:0000000000008958                 db 0A0h
.eh_frame_hdr:0000000000008959                 db    9
.eh_frame_hdr:000000000000895A                 db    0
.eh_frame_hdr:000000000000895B                 db    0
.eh_frame_hdr:000000000000895C                 db  70h ; p
.eh_frame_hdr:000000000000895D                 db 0D9h
.eh_frame_hdr:000000000000895E                 db 0FFh
.eh_frame_hdr:000000000000895F                 db 0FFh
.eh_frame_hdr:0000000000008960                 db 0BCh
.eh_frame_hdr:0000000000008961                 db    9
.eh_frame_hdr:0000000000008962                 db    0
.eh_frame_hdr:0000000000008963                 db    0
.eh_frame_hdr:0000000000008964                 db    0
.eh_frame_hdr:0000000000008965                 db 0DAh
.eh_frame_hdr:0000000000008966                 db 0FFh
.eh_frame_hdr:0000000000008967                 db 0FFh
.eh_frame_hdr:0000000000008968                 db 0D8h
.eh_frame_hdr:0000000000008969                 db    9
.eh_frame_hdr:000000000000896A                 db    0
.eh_frame_hdr:000000000000896B                 db    0
.eh_frame_hdr:000000000000896C                 db  10h
.eh_frame_hdr:000000000000896D                 db 0DAh
.eh_frame_hdr:000000000000896E                 db 0FFh
.eh_frame_hdr:000000000000896F                 db 0FFh
.eh_frame_hdr:0000000000008970                 db 0ECh
.eh_frame_hdr:0000000000008971                 db    9
.eh_frame_hdr:0000000000008972                 db    0
.eh_frame_hdr:0000000000008973                 db    0
.eh_frame_hdr:0000000000008974                 db  20h
.eh_frame_hdr:0000000000008975                 db 0DAh
.eh_frame_hdr:0000000000008976                 db 0FFh
.eh_frame_hdr:0000000000008977                 db 0FFh
.eh_frame_hdr:0000000000008978                 db    0
.eh_frame_hdr:0000000000008979                 db  0Ah
.eh_frame_hdr:000000000000897A                 db    0
.eh_frame_hdr:000000000000897B                 db    0
.eh_frame_hdr:000000000000897C                 db 0C0h
.eh_frame_hdr:000000000000897D                 db 0DAh
.eh_frame_hdr:000000000000897E                 db 0FFh
.eh_frame_hdr:000000000000897F                 db 0FFh
.eh_frame_hdr:0000000000008980                 db  1Ch
.eh_frame_hdr:0000000000008981                 db  0Ah
.eh_frame_hdr:0000000000008982                 db    0
.eh_frame_hdr:0000000000008983                 db    0
.eh_frame_hdr:0000000000008984                 db 0D0h
.eh_frame_hdr:0000000000008985                 db 0DAh
.eh_frame_hdr:0000000000008986                 db 0FFh
.eh_frame_hdr:0000000000008987                 db 0FFh
.eh_frame_hdr:0000000000008988                 db  30h ; 0
.eh_frame_hdr:0000000000008989                 db  0Ah
.eh_frame_hdr:000000000000898A                 db    0
.eh_frame_hdr:000000000000898B                 db    0
.eh_frame_hdr:000000000000898C                 db 0F0h
.eh_frame_hdr:000000000000898D                 db 0DAh
.eh_frame_hdr:000000000000898E                 db 0FFh
.eh_frame_hdr:000000000000898F                 db 0FFh
.eh_frame_hdr:0000000000008990                 db  44h ; D
.eh_frame_hdr:0000000000008991                 db  0Ah
.eh_frame_hdr:0000000000008992                 db    0
.eh_frame_hdr:0000000000008993                 db    0
.eh_frame_hdr:0000000000008994                 db    0
.eh_frame_hdr:0000000000008995                 db 0DBh
.eh_frame_hdr:0000000000008996                 db 0FFh
.eh_frame_hdr:0000000000008997                 db 0FFh
.eh_frame_hdr:0000000000008998                 db  58h ; X
.eh_frame_hdr:0000000000008999                 db  0Ah
.eh_frame_hdr:000000000000899A                 db    0
.eh_frame_hdr:000000000000899B                 db    0
.eh_frame_hdr:000000000000899C                 db  90h
.eh_frame_hdr:000000000000899D                 db 0DBh
.eh_frame_hdr:000000000000899E                 db 0FFh
.eh_frame_hdr:000000000000899F                 db 0FFh
.eh_frame_hdr:00000000000089A0                 db  74h ; t
.eh_frame_hdr:00000000000089A1                 db  0Ah
.eh_frame_hdr:00000000000089A2                 db    0
.eh_frame_hdr:00000000000089A3                 db    0
.eh_frame_hdr:00000000000089A4                 db  30h ; 0
.eh_frame_hdr:00000000000089A5                 db 0DCh
.eh_frame_hdr:00000000000089A6                 db 0FFh
.eh_frame_hdr:00000000000089A7                 db 0FFh
.eh_frame_hdr:00000000000089A8                 db  90h
.eh_frame_hdr:00000000000089A9                 db  0Ah
.eh_frame_hdr:00000000000089AA                 db    0
.eh_frame_hdr:00000000000089AB                 db    0
.eh_frame_hdr:00000000000089AC                 db  40h ; @
.eh_frame_hdr:00000000000089AD                 db 0DCh
.eh_frame_hdr:00000000000089AE                 db 0FFh
.eh_frame_hdr:00000000000089AF                 db 0FFh
.eh_frame_hdr:00000000000089B0                 db 0A4h
.eh_frame_hdr:00000000000089B1                 db  0Ah
.eh_frame_hdr:00000000000089B2                 db    0
.eh_frame_hdr:00000000000089B3                 db    0
.eh_frame_hdr:00000000000089B4                 db  60h ; `
.eh_frame_hdr:00000000000089B5                 db 0DCh
.eh_frame_hdr:00000000000089B6                 db 0FFh
.eh_frame_hdr:00000000000089B7                 db 0FFh
.eh_frame_hdr:00000000000089B8                 db 0B8h
.eh_frame_hdr:00000000000089B9                 db  0Ah
.eh_frame_hdr:00000000000089BA                 db    0
.eh_frame_hdr:00000000000089BB                 db    0
.eh_frame_hdr:00000000000089BC                 db  80h
.eh_frame_hdr:00000000000089BD                 db 0DCh
.eh_frame_hdr:00000000000089BE                 db 0FFh
.eh_frame_hdr:00000000000089BF                 db 0FFh
.eh_frame_hdr:00000000000089C0                 db 0CCh
.eh_frame_hdr:00000000000089C1                 db  0Ah
.eh_frame_hdr:00000000000089C2                 db    0
.eh_frame_hdr:00000000000089C3                 db    0
.eh_frame_hdr:00000000000089C4                 db  90h
.eh_frame_hdr:00000000000089C5                 db 0DCh
.eh_frame_hdr:00000000000089C6                 db 0FFh
.eh_frame_hdr:00000000000089C7                 db 0FFh
.eh_frame_hdr:00000000000089C8                 db 0E0h
.eh_frame_hdr:00000000000089C9                 db  0Ah
.eh_frame_hdr:00000000000089CA                 db    0
.eh_frame_hdr:00000000000089CB                 db    0
.eh_frame_hdr:00000000000089CC                 db 0B0h
.eh_frame_hdr:00000000000089CD                 db 0DCh
.eh_frame_hdr:00000000000089CE                 db 0FFh
.eh_frame_hdr:00000000000089CF                 db 0FFh
.eh_frame_hdr:00000000000089D0                 db 0F4h
.eh_frame_hdr:00000000000089D1                 db  0Ah
.eh_frame_hdr:00000000000089D2                 db    0
.eh_frame_hdr:00000000000089D3                 db    0
.eh_frame_hdr:00000000000089D4                 db 0D0h
.eh_frame_hdr:00000000000089D5                 db 0DCh
.eh_frame_hdr:00000000000089D6                 db 0FFh
.eh_frame_hdr:00000000000089D7                 db 0FFh
.eh_frame_hdr:00000000000089D8                 db    8
.eh_frame_hdr:00000000000089D9                 db  0Bh
.eh_frame_hdr:00000000000089DA                 db    0
.eh_frame_hdr:00000000000089DB                 db    0
.eh_frame_hdr:00000000000089DC                 db 0F0h
.eh_frame_hdr:00000000000089DD                 db 0DCh
.eh_frame_hdr:00000000000089DE                 db 0FFh
.eh_frame_hdr:00000000000089DF                 db 0FFh
.eh_frame_hdr:00000000000089E0                 db  20h
.eh_frame_hdr:00000000000089E1                 db  0Bh
.eh_frame_hdr:00000000000089E2                 db    0
.eh_frame_hdr:00000000000089E3                 db    0
.eh_frame_hdr:00000000000089E4                 db  10h
.eh_frame_hdr:00000000000089E5                 db 0E1h
.eh_frame_hdr:00000000000089E6                 db 0FFh
.eh_frame_hdr:00000000000089E7                 db 0FFh
.eh_frame_hdr:00000000000089E8                 db  34h ; 4
.eh_frame_hdr:00000000000089E9                 db  0Ch
.eh_frame_hdr:00000000000089EA                 db    0
.eh_frame_hdr:00000000000089EB                 db    0
.eh_frame_hdr:00000000000089EC                 db  30h ; 0
.eh_frame_hdr:00000000000089ED                 db 0E1h
.eh_frame_hdr:00000000000089EE                 db 0FFh
.eh_frame_hdr:00000000000089EF                 db 0FFh
.eh_frame_hdr:00000000000089F0                 db  48h ; H
.eh_frame_hdr:00000000000089F1                 db  0Ch
.eh_frame_hdr:00000000000089F2                 db    0
.eh_frame_hdr:00000000000089F3                 db    0
.eh_frame_hdr:00000000000089F4                 db 0B0h
.eh_frame_hdr:00000000000089F5                 db 0E1h
.eh_frame_hdr:00000000000089F6                 db 0FFh
.eh_frame_hdr:00000000000089F7                 db 0FFh
.eh_frame_hdr:00000000000089F8                 db  64h ; d
.eh_frame_hdr:00000000000089F9                 db  0Ch
.eh_frame_hdr:00000000000089FA                 db    0
.eh_frame_hdr:00000000000089FB                 db    0
.eh_frame_hdr:00000000000089FC                 db  90h
.eh_frame_hdr:00000000000089FD                 db 0E2h
.eh_frame_hdr:00000000000089FE                 db 0FFh
.eh_frame_hdr:00000000000089FF                 db 0FFh
.eh_frame_hdr:0000000000008A00                 db  90h
.eh_frame_hdr:0000000000008A01                 db  0Ch
.eh_frame_hdr:0000000000008A02                 db    0
.eh_frame_hdr:0000000000008A03                 db    0
.eh_frame_hdr:0000000000008A04                 db  10h
.eh_frame_hdr:0000000000008A05                 db 0E3h
.eh_frame_hdr:0000000000008A06                 db 0FFh
.eh_frame_hdr:0000000000008A07                 db 0FFh
.eh_frame_hdr:0000000000008A08                 db 0B0h
.eh_frame_hdr:0000000000008A09                 db  0Ch
.eh_frame_hdr:0000000000008A0A                 db    0
.eh_frame_hdr:0000000000008A0B                 db    0
.eh_frame_hdr:0000000000008A0C                 db  30h ; 0
.eh_frame_hdr:0000000000008A0D                 db 0E3h
.eh_frame_hdr:0000000000008A0E                 db 0FFh
.eh_frame_hdr:0000000000008A0F                 db 0FFh
.eh_frame_hdr:0000000000008A10                 db 0CCh
.eh_frame_hdr:0000000000008A11                 db  0Ch
.eh_frame_hdr:0000000000008A12                 db    0
.eh_frame_hdr:0000000000008A13                 db    0
.eh_frame_hdr:0000000000008A14                 db  60h ; `
.eh_frame_hdr:0000000000008A15                 db 0E3h
.eh_frame_hdr:0000000000008A16                 db 0FFh
.eh_frame_hdr:0000000000008A17                 db 0FFh
.eh_frame_hdr:0000000000008A18                 db 0E0h
.eh_frame_hdr:0000000000008A19                 db  0Ch
.eh_frame_hdr:0000000000008A1A                 db    0
.eh_frame_hdr:0000000000008A1B                 db    0
.eh_frame_hdr:0000000000008A1C                 db  70h ; p
.eh_frame_hdr:0000000000008A1D                 db 0E3h
.eh_frame_hdr:0000000000008A1E                 db 0FFh
.eh_frame_hdr:0000000000008A1F                 db 0FFh
.eh_frame_hdr:0000000000008A20                 db 0F4h
.eh_frame_hdr:0000000000008A21                 db  0Ch
.eh_frame_hdr:0000000000008A22                 db    0
.eh_frame_hdr:0000000000008A23                 db    0
.eh_frame_hdr:0000000000008A24                 db 0B0h
.eh_frame_hdr:0000000000008A25                 db 0E3h
.eh_frame_hdr:0000000000008A26                 db 0FFh
.eh_frame_hdr:0000000000008A27                 db 0FFh
.eh_frame_hdr:0000000000008A28                 db  18h
.eh_frame_hdr:0000000000008A29                 db  0Dh
.eh_frame_hdr:0000000000008A2A                 db    0
.eh_frame_hdr:0000000000008A2B                 db    0
.eh_frame_hdr:0000000000008A2C                 db 0E0h
.eh_frame_hdr:0000000000008A2D                 db 0E3h
.eh_frame_hdr:0000000000008A2E                 db 0FFh
.eh_frame_hdr:0000000000008A2F                 db 0FFh
.eh_frame_hdr:0000000000008A30                 db  2Ch ; ,
.eh_frame_hdr:0000000000008A31                 db  0Dh
.eh_frame_hdr:0000000000008A32                 db    0
.eh_frame_hdr:0000000000008A33                 db    0
.eh_frame_hdr:0000000000008A34                 db  70h ; p
.eh_frame_hdr:0000000000008A35                 db 0E4h
.eh_frame_hdr:0000000000008A36                 db 0FFh
.eh_frame_hdr:0000000000008A37                 db 0FFh
.eh_frame_hdr:0000000000008A38                 db  44h ; D
.eh_frame_hdr:0000000000008A39                 db  0Dh
.eh_frame_hdr:0000000000008A3A                 db    0
.eh_frame_hdr:0000000000008A3B                 db    0
.eh_frame_hdr:0000000000008A3C                 db 0C0h
.eh_frame_hdr:0000000000008A3D                 db 0E4h
.eh_frame_hdr:0000000000008A3E                 db 0FFh
.eh_frame_hdr:0000000000008A3F                 db 0FFh
.eh_frame_hdr:0000000000008A40                 db  5Ch ; \
.eh_frame_hdr:0000000000008A41                 db  0Dh
.eh_frame_hdr:0000000000008A42                 db    0
.eh_frame_hdr:0000000000008A43                 db    0
.eh_frame_hdr:0000000000008A44                 db 0E0h
.eh_frame_hdr:0000000000008A45                 db 0E4h
.eh_frame_hdr:0000000000008A46                 db 0FFh
.eh_frame_hdr:0000000000008A47                 db 0FFh
.eh_frame_hdr:0000000000008A48                 db  78h ; x
.eh_frame_hdr:0000000000008A49                 db  0Dh
.eh_frame_hdr:0000000000008A4A                 db    0
.eh_frame_hdr:0000000000008A4B                 db    0
.eh_frame_hdr:0000000000008A4C                 db  10h
.eh_frame_hdr:0000000000008A4D                 db 0E5h
.eh_frame_hdr:0000000000008A4E                 db 0FFh
.eh_frame_hdr:0000000000008A4F                 db 0FFh
.eh_frame_hdr:0000000000008A50                 db  94h
.eh_frame_hdr:0000000000008A51                 db  0Dh
.eh_frame_hdr:0000000000008A52                 db    0
.eh_frame_hdr:0000000000008A53                 db    0
.eh_frame_hdr:0000000000008A54                 db  40h ; @
.eh_frame_hdr:0000000000008A55                 db 0E5h
.eh_frame_hdr:0000000000008A56                 db 0FFh
.eh_frame_hdr:0000000000008A57                 db 0FFh
.eh_frame_hdr:0000000000008A58                 db 0BCh
.eh_frame_hdr:0000000000008A59                 db  0Dh
.eh_frame_hdr:0000000000008A5A                 db    0
.eh_frame_hdr:0000000000008A5B                 db    0
.eh_frame_hdr:0000000000008A5C                 db  60h ; `
.eh_frame_hdr:0000000000008A5D                 db 0E5h
.eh_frame_hdr:0000000000008A5E                 db 0FFh
.eh_frame_hdr:0000000000008A5F                 db 0FFh
.eh_frame_hdr:0000000000008A60                 db 0D8h
.eh_frame_hdr:0000000000008A61                 db  0Dh
.eh_frame_hdr:0000000000008A62                 db    0
.eh_frame_hdr:0000000000008A63                 db    0
.eh_frame_hdr:0000000000008A64                 db 0A0h
.eh_frame_hdr:0000000000008A65                 db 0E5h
.eh_frame_hdr:0000000000008A66                 db 0FFh
.eh_frame_hdr:0000000000008A67                 db 0FFh
.eh_frame_hdr:0000000000008A68                 db 0F0h
.eh_frame_hdr:0000000000008A69                 db  0Dh
.eh_frame_hdr:0000000000008A6A                 db    0
.eh_frame_hdr:0000000000008A6B                 db    0
.eh_frame_hdr:0000000000008A6C                 db  20h
.eh_frame_hdr:0000000000008A6D                 db 0E6h
.eh_frame_hdr:0000000000008A6E                 db 0FFh
.eh_frame_hdr:0000000000008A6F                 db 0FFh
.eh_frame_hdr:0000000000008A70                 db  28h ; (
.eh_frame_hdr:0000000000008A71                 db  0Eh
.eh_frame_hdr:0000000000008A72                 db    0
.eh_frame_hdr:0000000000008A73                 db    0
.eh_frame_hdr:0000000000008A74                 db  60h ; `
.eh_frame_hdr:0000000000008A75                 db 0E6h
.eh_frame_hdr:0000000000008A76                 db 0FFh
.eh_frame_hdr:0000000000008A77                 db 0FFh
.eh_frame_hdr:0000000000008A78                 db  48h ; H
.eh_frame_hdr:0000000000008A79                 db  0Eh
.eh_frame_hdr:0000000000008A7A                 db    0
.eh_frame_hdr:0000000000008A7B                 db    0
.eh_frame_hdr:0000000000008A7C                 db 0C0h
.eh_frame_hdr:0000000000008A7D                 db 0E6h
.eh_frame_hdr:0000000000008A7E                 db 0FFh
.eh_frame_hdr:0000000000008A7F                 db 0FFh
.eh_frame_hdr:0000000000008A80                 db  78h ; x
.eh_frame_hdr:0000000000008A81                 db  0Eh
.eh_frame_hdr:0000000000008A82                 db    0
.eh_frame_hdr:0000000000008A83                 db    0
.eh_frame_hdr:0000000000008A84                 db  50h ; P
.eh_frame_hdr:0000000000008A85                 db 0E7h
.eh_frame_hdr:0000000000008A86                 db 0FFh
.eh_frame_hdr:0000000000008A87                 db 0FFh
.eh_frame_hdr:0000000000008A88                 db 0B8h
.eh_frame_hdr:0000000000008A89                 db  0Eh
.eh_frame_hdr:0000000000008A8A                 db    0
.eh_frame_hdr:0000000000008A8B                 db    0
.eh_frame_hdr:0000000000008A8C                 db 0B0h
.eh_frame_hdr:0000000000008A8D                 db 0E7h
.eh_frame_hdr:0000000000008A8E                 db 0FFh
.eh_frame_hdr:0000000000008A8F                 db 0FFh
.eh_frame_hdr:0000000000008A90                 db 0E4h
.eh_frame_hdr:0000000000008A91                 db  0Eh
.eh_frame_hdr:0000000000008A92                 db    0
.eh_frame_hdr:0000000000008A93                 db    0
.eh_frame_hdr:0000000000008A94                 db  40h ; @
.eh_frame_hdr:0000000000008A95                 db 0E9h
.eh_frame_hdr:0000000000008A96                 db 0FFh
.eh_frame_hdr:0000000000008A97                 db 0FFh
.eh_frame_hdr:0000000000008A98                 db  30h ; 0
.eh_frame_hdr:0000000000008A99                 db  0Fh
.eh_frame_hdr:0000000000008A9A                 db    0
.eh_frame_hdr:0000000000008A9B                 db    0
.eh_frame_hdr:0000000000008A9C                 db  70h ; p
.eh_frame_hdr:0000000000008A9D                 db 0E9h
.eh_frame_hdr:0000000000008A9E                 db 0FFh
.eh_frame_hdr:0000000000008A9F                 db 0FFh
.eh_frame_hdr:0000000000008AA0                 db  44h ; D
.eh_frame_hdr:0000000000008AA1                 db  0Fh
.eh_frame_hdr:0000000000008AA2                 db    0
.eh_frame_hdr:0000000000008AA3                 db    0
.eh_frame_hdr:0000000000008AA4                 db 0A0h
.eh_frame_hdr:0000000000008AA5                 db 0E9h
.eh_frame_hdr:0000000000008AA6                 db 0FFh
.eh_frame_hdr:0000000000008AA7                 db 0FFh
.eh_frame_hdr:0000000000008AA8                 db  60h ; `
.eh_frame_hdr:0000000000008AA9                 db  0Fh
.eh_frame_hdr:0000000000008AAA                 db    0
.eh_frame_hdr:0000000000008AAB                 db    0
.eh_frame_hdr:0000000000008AAC                 db    0
.eh_frame_hdr:0000000000008AAD                 db 0EAh
.eh_frame_hdr:0000000000008AAE                 db 0FFh
.eh_frame_hdr:0000000000008AAF                 db 0FFh
.eh_frame_hdr:0000000000008AB0                 db  9Ch
.eh_frame_hdr:0000000000008AB1                 db  0Fh
.eh_frame_hdr:0000000000008AB2                 db    0
.eh_frame_hdr:0000000000008AB3                 db    0
.eh_frame_hdr:0000000000008AB4                 db  90h
.eh_frame_hdr:0000000000008AB5                 db 0EAh
.eh_frame_hdr:0000000000008AB6                 db 0FFh
.eh_frame_hdr:0000000000008AB7                 db 0FFh
.eh_frame_hdr:0000000000008AB8                 db 0D4h
.eh_frame_hdr:0000000000008AB9                 db  0Fh
.eh_frame_hdr:0000000000008ABA                 db    0
.eh_frame_hdr:0000000000008ABB                 db    0
.eh_frame_hdr:0000000000008ABC                 db 0D0h
.eh_frame_hdr:0000000000008ABD                 db 0EBh
.eh_frame_hdr:0000000000008ABE                 db 0FFh
.eh_frame_hdr:0000000000008ABF                 db 0FFh
.eh_frame_hdr:0000000000008AC0                 db  20h
.eh_frame_hdr:0000000000008AC1                 db  10h
.eh_frame_hdr:0000000000008AC2                 db    0
.eh_frame_hdr:0000000000008AC3                 db    0
.eh_frame_hdr:0000000000008AC4                 db 0B0h
.eh_frame_hdr:0000000000008AC5                 db 0ECh
.eh_frame_hdr:0000000000008AC6                 db 0FFh
.eh_frame_hdr:0000000000008AC7                 db 0FFh
.eh_frame_hdr:0000000000008AC8                 db  74h ; t
.eh_frame_hdr:0000000000008AC9                 db  10h
.eh_frame_hdr:0000000000008ACA                 db    0
.eh_frame_hdr:0000000000008ACB                 db    0
.eh_frame_hdr:0000000000008ACC                 db 0C0h
.eh_frame_hdr:0000000000008ACD                 db 0ECh
.eh_frame_hdr:0000000000008ACE                 db 0FFh
.eh_frame_hdr:0000000000008ACF                 db 0FFh
.eh_frame_hdr:0000000000008AD0                 db  88h
.eh_frame_hdr:0000000000008AD1                 db  10h
.eh_frame_hdr:0000000000008AD2                 db    0
.eh_frame_hdr:0000000000008AD3                 db    0
.eh_frame_hdr:0000000000008AD4                 db  70h ; p
.eh_frame_hdr:0000000000008AD5                 db 0EDh
.eh_frame_hdr:0000000000008AD6                 db 0FFh
.eh_frame_hdr:0000000000008AD7                 db 0FFh
.eh_frame_hdr:0000000000008AD8                 db 0E8h
.eh_frame_hdr:0000000000008AD9                 db  10h
.eh_frame_hdr:0000000000008ADA                 db    0
.eh_frame_hdr:0000000000008ADB                 db    0
.eh_frame_hdr:0000000000008ADC                 db 0C0h
.eh_frame_hdr:0000000000008ADD                 db 0EEh
.eh_frame_hdr:0000000000008ADE                 db 0FFh
.eh_frame_hdr:0000000000008ADF                 db 0FFh
.eh_frame_hdr:0000000000008AE0                 db  20h
.eh_frame_hdr:0000000000008AE1                 db  11h
.eh_frame_hdr:0000000000008AE2                 db    0
.eh_frame_hdr:0000000000008AE3                 db    0
.eh_frame_hdr:0000000000008AE4                 db  40h ; @
.eh_frame_hdr:0000000000008AE5                 db 0EFh
.eh_frame_hdr:0000000000008AE6                 db 0FFh
.eh_frame_hdr:0000000000008AE7                 db 0FFh
.eh_frame_hdr:0000000000008AE8                 db  70h ; p
.eh_frame_hdr:0000000000008AE9                 db  11h
.eh_frame_hdr:0000000000008AEA                 db    0
.eh_frame_hdr:0000000000008AEB                 db    0
.eh_frame_hdr:0000000000008AEC                 db 0A0h
.eh_frame_hdr:0000000000008AED                 db 0EFh
.eh_frame_hdr:0000000000008AEE                 db 0FFh
.eh_frame_hdr:0000000000008AEF                 db 0FFh
.eh_frame_hdr:0000000000008AF0                 db  90h
.eh_frame_hdr:0000000000008AF1                 db  11h
.eh_frame_hdr:0000000000008AF2                 db    0
.eh_frame_hdr:0000000000008AF3                 db    0
.eh_frame_hdr:0000000000008AF4                 db 0E0h
.eh_frame_hdr:0000000000008AF5                 db 0EFh
.eh_frame_hdr:0000000000008AF6                 db 0FFh
.eh_frame_hdr:0000000000008AF7                 db 0FFh
.eh_frame_hdr:0000000000008AF8                 db 0B0h
.eh_frame_hdr:0000000000008AF9                 db  11h
.eh_frame_hdr:0000000000008AFA                 db    0
.eh_frame_hdr:0000000000008AFB                 db    0
.eh_frame_hdr:0000000000008AFC                 db  50h ; P
.eh_frame_hdr:0000000000008AFD                 db 0F0h
.eh_frame_hdr:0000000000008AFE                 db 0FFh
.eh_frame_hdr:0000000000008AFF                 db 0FFh
.eh_frame_hdr:0000000000008B00                 db 0F8h
.eh_frame_hdr:0000000000008B01                 db  11h
.eh_frame_hdr:0000000000008B02                 db    0
.eh_frame_hdr:0000000000008B03                 db    0
.eh_frame_hdr:0000000000008B04                 db  60h ; `
.eh_frame_hdr:0000000000008B05                 db 0F0h
.eh_frame_hdr:0000000000008B06                 db 0FFh
.eh_frame_hdr:0000000000008B07                 db 0FFh
.eh_frame_hdr:0000000000008B08                 db  10h
.eh_frame_hdr:0000000000008B09                 db  12h
.eh_frame_hdr:0000000000008B0A                 db    0
.eh_frame_hdr:0000000000008B0B                 db    0
.eh_frame_hdr:0000000000008B0B _eh_frame_hdr   ends
.eh_frame_hdr:0000000000008B0B
LOAD:0000000000008B0C ; ===========================================================================
LOAD:0000000000008B0C
LOAD:0000000000008B0C ; Segment type: Pure code
LOAD:0000000000008B0C ; Segment permissions: Read/Execute
LOAD:0000000000008B0C LOAD            segment byte public 'CODE' use64
LOAD:0000000000008B0C                 assume cs:LOAD
LOAD:0000000000008B0C                 ;org 8B0Ch
LOAD:0000000000008B0C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008B0C                 align 10h
LOAD:0000000000008B0C LOAD            ends
LOAD:0000000000008B0C
.eh_frame:0000000000008B10 ; ===========================================================================
.eh_frame:0000000000008B10
.eh_frame:0000000000008B10 ; Segment type: Pure data
.eh_frame:0000000000008B10 ; Segment permissions: Read
.eh_frame:0000000000008B10 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000008B10                 assume cs:_eh_frame
.eh_frame:0000000000008B10                 ;org 8B10h
.eh_frame:0000000000008B10                 db  14h
.eh_frame:0000000000008B11                 db    0
.eh_frame:0000000000008B12                 db    0
.eh_frame:0000000000008B13                 db    0
.eh_frame:0000000000008B14                 db    0
.eh_frame:0000000000008B15                 db    0
.eh_frame:0000000000008B16                 db    0
.eh_frame:0000000000008B17                 db    0
.eh_frame:0000000000008B18                 db    1
.eh_frame:0000000000008B19                 db  7Ah ; z
.eh_frame:0000000000008B1A                 db  52h ; R
.eh_frame:0000000000008B1B                 db    0
.eh_frame:0000000000008B1C                 db    1
.eh_frame:0000000000008B1D                 db  78h ; x
.eh_frame:0000000000008B1E                 db  10h
.eh_frame:0000000000008B1F                 db    1
.eh_frame:0000000000008B20                 db  1Bh
.eh_frame:0000000000008B21                 db  0Ch
.eh_frame:0000000000008B22                 db    7
.eh_frame:0000000000008B23                 db    8
.eh_frame:0000000000008B24                 db  90h
.eh_frame:0000000000008B25                 db    1
.eh_frame:0000000000008B26                 db    7
.eh_frame:0000000000008B27                 db  10h
.eh_frame:0000000000008B28                 db  14h
.eh_frame:0000000000008B29                 db    0
.eh_frame:0000000000008B2A                 db    0
.eh_frame:0000000000008B2B                 db    0
.eh_frame:0000000000008B2C                 db  1Ch
.eh_frame:0000000000008B2D                 db    0
.eh_frame:0000000000008B2E                 db    0
.eh_frame:0000000000008B2F                 db    0
.eh_frame:0000000000008B30                 db  50h ; P
.eh_frame:0000000000008B31                 db  92h
.eh_frame:0000000000008B32                 db 0FFh
.eh_frame:0000000000008B33                 db 0FFh
.eh_frame:0000000000008B34                 db  2Bh ; +
.eh_frame:0000000000008B35                 db    0
.eh_frame:0000000000008B36                 db    0
.eh_frame:0000000000008B37                 db    0
.eh_frame:0000000000008B38                 db    0
.eh_frame:0000000000008B39                 db    0
.eh_frame:0000000000008B3A                 db    0
.eh_frame:0000000000008B3B                 db    0
.eh_frame:0000000000008B3C                 db    0
.eh_frame:0000000000008B3D                 db    0
.eh_frame:0000000000008B3E                 db    0
.eh_frame:0000000000008B3F                 db    0
.eh_frame:0000000000008B40                 db  14h
.eh_frame:0000000000008B41                 db    0
.eh_frame:0000000000008B42                 db    0
.eh_frame:0000000000008B43                 db    0
.eh_frame:0000000000008B44                 db    0
.eh_frame:0000000000008B45                 db    0
.eh_frame:0000000000008B46                 db    0
.eh_frame:0000000000008B47                 db    0
.eh_frame:0000000000008B48                 db    1
.eh_frame:0000000000008B49                 db  7Ah ; z
.eh_frame:0000000000008B4A                 db  52h ; R
.eh_frame:0000000000008B4B                 db    0
.eh_frame:0000000000008B4C                 db    1
.eh_frame:0000000000008B4D                 db  78h ; x
.eh_frame:0000000000008B4E                 db  10h
.eh_frame:0000000000008B4F                 db    1
.eh_frame:0000000000008B50                 db  1Bh
.eh_frame:0000000000008B51                 db  0Ch
.eh_frame:0000000000008B52                 db    7
.eh_frame:0000000000008B53                 db    8
.eh_frame:0000000000008B54                 db  90h
.eh_frame:0000000000008B55                 db    1
.eh_frame:0000000000008B56                 db    0
.eh_frame:0000000000008B57                 db    0
.eh_frame:0000000000008B58                 db  24h ; $
.eh_frame:0000000000008B59                 db    0
.eh_frame:0000000000008B5A                 db    0
.eh_frame:0000000000008B5B                 db    0
.eh_frame:0000000000008B5C                 db  1Ch
.eh_frame:0000000000008B5D                 db    0
.eh_frame:0000000000008B5E                 db    0
.eh_frame:0000000000008B5F                 db    0
.eh_frame:0000000000008B60                 db 0B0h
.eh_frame:0000000000008B61                 db  8Ch
.eh_frame:0000000000008B62                 db 0FFh
.eh_frame:0000000000008B63                 db 0FFh
.eh_frame:0000000000008B64                 db  40h ; @
.eh_frame:0000000000008B65                 db    4
.eh_frame:0000000000008B66                 db    0
.eh_frame:0000000000008B67                 db    0
.eh_frame:0000000000008B68                 db    0
.eh_frame:0000000000008B69                 db  0Eh
.eh_frame:0000000000008B6A                 db  10h
.eh_frame:0000000000008B6B                 db  46h ; F
.eh_frame:0000000000008B6C                 db  0Eh
.eh_frame:0000000000008B6D                 db  18h
.eh_frame:0000000000008B6E                 db  4Ah ; J
.eh_frame:0000000000008B6F                 db  0Fh
.eh_frame:0000000000008B70                 db  0Bh
.eh_frame:0000000000008B71                 db  77h ; w
.eh_frame:0000000000008B72                 db    8
.eh_frame:0000000000008B73                 db  80h
.eh_frame:0000000000008B74                 db    0
.eh_frame:0000000000008B75                 db  3Fh ; ?
.eh_frame:0000000000008B76                 db  1Ah
.eh_frame:0000000000008B77                 db  3Bh ; ;
.eh_frame:0000000000008B78                 db  2Ah ; *
.eh_frame:0000000000008B79                 db  33h ; 3
.eh_frame:0000000000008B7A                 db  24h ; $
.eh_frame:0000000000008B7B                 db  22h ; "
.eh_frame:0000000000008B7C                 db    0
.eh_frame:0000000000008B7D                 db    0
.eh_frame:0000000000008B7E                 db    0
.eh_frame:0000000000008B7F                 db    0
.eh_frame:0000000000008B80                 db  14h
.eh_frame:0000000000008B81                 db    0
.eh_frame:0000000000008B82                 db    0
.eh_frame:0000000000008B83                 db    0
.eh_frame:0000000000008B84                 db  44h ; D
.eh_frame:0000000000008B85                 db    0
.eh_frame:0000000000008B86                 db    0
.eh_frame:0000000000008B87                 db    0
.eh_frame:0000000000008B88                 db 0C8h
.eh_frame:0000000000008B89                 db  90h
.eh_frame:0000000000008B8A                 db 0FFh
.eh_frame:0000000000008B8B                 db 0FFh
.eh_frame:0000000000008B8C                 db    8
.eh_frame:0000000000008B8D                 db    0
.eh_frame:0000000000008B8E                 db    0
.eh_frame:0000000000008B8F                 db    0
.eh_frame:0000000000008B90                 db    0
.eh_frame:0000000000008B91                 db    0
.eh_frame:0000000000008B92                 db    0
.eh_frame:0000000000008B93                 db    0
.eh_frame:0000000000008B94                 db    0
.eh_frame:0000000000008B95                 db    0
.eh_frame:0000000000008B96                 db    0
.eh_frame:0000000000008B97                 db    0
.eh_frame:0000000000008B98                 db  4Ch ; L
.eh_frame:0000000000008B99                 db    0
.eh_frame:0000000000008B9A                 db    0
.eh_frame:0000000000008B9B                 db    0
.eh_frame:0000000000008B9C                 db  5Ch ; \
.eh_frame:0000000000008B9D                 db    0
.eh_frame:0000000000008B9E                 db    0
.eh_frame:0000000000008B9F                 db    0
.eh_frame:0000000000008BA0                 db 0F0h
.eh_frame:0000000000008BA1                 db  92h
.eh_frame:0000000000008BA2                 db 0FFh
.eh_frame:0000000000008BA3                 db 0FFh
.eh_frame:0000000000008BA4                 db  32h ; 2
.eh_frame:0000000000008BA5                 db    4
.eh_frame:0000000000008BA6                 db    0
.eh_frame:0000000000008BA7                 db    0
.eh_frame:0000000000008BA8                 db    0
.eh_frame:0000000000008BA9                 db  42h ; B
.eh_frame:0000000000008BAA                 db  0Eh
.eh_frame:0000000000008BAB                 db  10h
.eh_frame:0000000000008BAC                 db  8Fh
.eh_frame:0000000000008BAD                 db    2
.eh_frame:0000000000008BAE                 db  42h ; B
.eh_frame:0000000000008BAF                 db  0Eh
.eh_frame:0000000000008BB0                 db  18h
.eh_frame:0000000000008BB1                 db  8Eh
.eh_frame:0000000000008BB2                 db    3
.eh_frame:0000000000008BB3                 db  42h ; B
.eh_frame:0000000000008BB4                 db  0Eh
.eh_frame:0000000000008BB5                 db  20h
.eh_frame:0000000000008BB6                 db  8Dh
.eh_frame:0000000000008BB7                 db    4
.eh_frame:0000000000008BB8                 db  42h ; B
.eh_frame:0000000000008BB9                 db  0Eh
.eh_frame:0000000000008BBA                 db  28h ; (
.eh_frame:0000000000008BBB                 db  8Ch
.eh_frame:0000000000008BBC                 db    5
.eh_frame:0000000000008BBD                 db  44h ; D
.eh_frame:0000000000008BBE                 db  0Eh
.eh_frame:0000000000008BBF                 db  30h ; 0
.eh_frame:0000000000008BC0                 db  86h
.eh_frame:0000000000008BC1                 db    6
.eh_frame:0000000000008BC2                 db  41h ; A
.eh_frame:0000000000008BC3                 db  0Eh
.eh_frame:0000000000008BC4                 db  38h ; 8
.eh_frame:0000000000008BC5                 db  83h
.eh_frame:0000000000008BC6                 db    7
.eh_frame:0000000000008BC7                 db  5Dh ; ]
.eh_frame:0000000000008BC8                 db  0Eh
.eh_frame:0000000000008BC9                 db  90h
.eh_frame:0000000000008BCA                 db  41h ; A
.eh_frame:0000000000008BCB                 db    3
.eh_frame:0000000000008BCC                 db  25h ; %
.eh_frame:0000000000008BCD                 db    2
.eh_frame:0000000000008BCE                 db  0Ah
.eh_frame:0000000000008BCF                 db  0Eh
.eh_frame:0000000000008BD0                 db  38h ; 8
.eh_frame:0000000000008BD1                 db  41h ; A
.eh_frame:0000000000008BD2                 db  0Eh
.eh_frame:0000000000008BD3                 db  30h ; 0
.eh_frame:0000000000008BD4                 db  41h ; A
.eh_frame:0000000000008BD5                 db  0Eh
.eh_frame:0000000000008BD6                 db  28h ; (
.eh_frame:0000000000008BD7                 db  42h ; B
.eh_frame:0000000000008BD8                 db  0Eh
.eh_frame:0000000000008BD9                 db  20h
.eh_frame:0000000000008BDA                 db  42h ; B
.eh_frame:0000000000008BDB                 db  0Eh
.eh_frame:0000000000008BDC                 db  18h
.eh_frame:0000000000008BDD                 db  42h ; B
.eh_frame:0000000000008BDE                 db  0Eh
.eh_frame:0000000000008BDF                 db  10h
.eh_frame:0000000000008BE0                 db  42h ; B
.eh_frame:0000000000008BE1                 db  0Eh
.eh_frame:0000000000008BE2                 db    8
.eh_frame:0000000000008BE3                 db  41h ; A
.eh_frame:0000000000008BE4                 db  0Bh
.eh_frame:0000000000008BE5                 db    0
.eh_frame:0000000000008BE6                 db    0
.eh_frame:0000000000008BE7                 db    0
.eh_frame:0000000000008BE8                 db  20h
.eh_frame:0000000000008BE9                 db    0
.eh_frame:0000000000008BEA                 db    0
.eh_frame:0000000000008BEB                 db    0
.eh_frame:0000000000008BEC                 db 0ACh
.eh_frame:0000000000008BED                 db    0
.eh_frame:0000000000008BEE                 db    0
.eh_frame:0000000000008BEF                 db    0
.eh_frame:0000000000008BF0                 db 0E0h
.eh_frame:0000000000008BF1                 db  96h
.eh_frame:0000000000008BF2                 db 0FFh
.eh_frame:0000000000008BF3                 db 0FFh
.eh_frame:0000000000008BF4                 db  8Fh
.eh_frame:0000000000008BF5                 db    0
.eh_frame:0000000000008BF6                 db    0
.eh_frame:0000000000008BF7                 db    0
.eh_frame:0000000000008BF8                 db    0
.eh_frame:0000000000008BF9                 db  41h ; A
.eh_frame:0000000000008BFA                 db  0Eh
.eh_frame:0000000000008BFB                 db  10h
.eh_frame:0000000000008BFC                 db  83h
.eh_frame:0000000000008BFD                 db    2
.eh_frame:0000000000008BFE                 db  49h ; I
.eh_frame:0000000000008BFF                 db  0Eh
.eh_frame:0000000000008C00                 db  30h ; 0
.eh_frame:0000000000008C01                 db    2
.eh_frame:0000000000008C02                 db  4Fh ; O
.eh_frame:0000000000008C03                 db  0Ah
.eh_frame:0000000000008C04                 db  0Eh
.eh_frame:0000000000008C05                 db  10h
.eh_frame:0000000000008C06                 db  41h ; A
.eh_frame:0000000000008C07                 db  0Eh
.eh_frame:0000000000008C08                 db    8
.eh_frame:0000000000008C09                 db  41h ; A
.eh_frame:0000000000008C0A                 db  0Bh
.eh_frame:0000000000008C0B                 db    0
.eh_frame:0000000000008C0C                 db  28h ; (
.eh_frame:0000000000008C0D                 db    0
.eh_frame:0000000000008C0E                 db    0
.eh_frame:0000000000008C0F                 db    0
.eh_frame:0000000000008C10                 db 0D0h
.eh_frame:0000000000008C11                 db    0
.eh_frame:0000000000008C12                 db    0
.eh_frame:0000000000008C13                 db    0
.eh_frame:0000000000008C14                 db  4Ch ; L
.eh_frame:0000000000008C15                 db  97h
.eh_frame:0000000000008C16                 db 0FFh
.eh_frame:0000000000008C17                 db 0FFh
.eh_frame:0000000000008C18                 db  92h
.eh_frame:0000000000008C19                 db    3
.eh_frame:0000000000008C1A                 db    0
.eh_frame:0000000000008C1B                 db    0
.eh_frame:0000000000008C1C                 db    0
.eh_frame:0000000000008C1D                 db  42h ; B
.eh_frame:0000000000008C1E                 db  0Eh
.eh_frame:0000000000008C1F                 db  10h
.eh_frame:0000000000008C20                 db  8Dh
.eh_frame:0000000000008C21                 db    2
.eh_frame:0000000000008C22                 db  42h ; B
.eh_frame:0000000000008C23                 db  0Eh
.eh_frame:0000000000008C24                 db  18h
.eh_frame:0000000000008C25                 db  8Ch
.eh_frame:0000000000008C26                 db    3
.eh_frame:0000000000008C27                 db  46h ; F
.eh_frame:0000000000008C28                 db  0Eh
.eh_frame:0000000000008C29                 db  20h
.eh_frame:0000000000008C2A                 db  86h
.eh_frame:0000000000008C2B                 db    4
.eh_frame:0000000000008C2C                 db  41h ; A
.eh_frame:0000000000008C2D                 db  0Eh
.eh_frame:0000000000008C2E                 db  28h ; (
.eh_frame:0000000000008C2F                 db  83h
.eh_frame:0000000000008C30                 db    5
.eh_frame:0000000000008C31                 db  49h ; I
.eh_frame:0000000000008C32                 db  0Eh
.eh_frame:0000000000008C33                 db 0B0h
.eh_frame:0000000000008C34                 db    1
.eh_frame:0000000000008C35                 db    0
.eh_frame:0000000000008C36                 db    0
.eh_frame:0000000000008C37                 db    0
.eh_frame:0000000000008C38                 db  3Ch ; <
.eh_frame:0000000000008C39                 db    0
.eh_frame:0000000000008C3A                 db    0
.eh_frame:0000000000008C3B                 db    0
.eh_frame:0000000000008C3C                 db 0FCh
.eh_frame:0000000000008C3D                 db    0
.eh_frame:0000000000008C3E                 db    0
.eh_frame:0000000000008C3F                 db    0
.eh_frame:0000000000008C40                 db  20h
.eh_frame:0000000000008C41                 db  90h
.eh_frame:0000000000008C42                 db 0FFh
.eh_frame:0000000000008C43                 db 0FFh
.eh_frame:0000000000008C44                 db  13h
.eh_frame:0000000000008C45                 db    1
.eh_frame:0000000000008C46                 db    0
.eh_frame:0000000000008C47                 db    0
.eh_frame:0000000000008C48                 db    0
.eh_frame:0000000000008C49                 db  41h ; A
.eh_frame:0000000000008C4A                 db  0Eh
.eh_frame:0000000000008C4B                 db  10h
.eh_frame:0000000000008C4C                 db  86h
.eh_frame:0000000000008C4D                 db    2
.eh_frame:0000000000008C4E                 db  41h ; A
.eh_frame:0000000000008C4F                 db  0Eh
.eh_frame:0000000000008C50                 db  18h
.eh_frame:0000000000008C51                 db  83h
.eh_frame:0000000000008C52                 db    3
.eh_frame:0000000000008C53                 db  49h ; I
.eh_frame:0000000000008C54                 db  0Eh
.eh_frame:0000000000008C55                 db  20h
.eh_frame:0000000000008C56                 db    2
.eh_frame:0000000000008C57                 db  4Fh ; O
.eh_frame:0000000000008C58                 db  0Eh
.eh_frame:0000000000008C59                 db  28h ; (
.eh_frame:0000000000008C5A                 db  49h ; I
.eh_frame:0000000000008C5B                 db  0Eh
.eh_frame:0000000000008C5C                 db  30h ; 0
.eh_frame:0000000000008C5D                 db  4Fh ; O
.eh_frame:0000000000008C5E                 db  0Eh
.eh_frame:0000000000008C5F                 db  38h ; 8
.eh_frame:0000000000008C60                 db  53h ; S
.eh_frame:0000000000008C61                 db  0Eh
.eh_frame:0000000000008C62                 db  40h ; @
.eh_frame:0000000000008C63                 db  48h ; H
.eh_frame:0000000000008C64                 db  0Eh
.eh_frame:0000000000008C65                 db  48h ; H
.eh_frame:0000000000008C66                 db  48h ; H
.eh_frame:0000000000008C67                 db  0Eh
.eh_frame:0000000000008C68                 db  50h ; P
.eh_frame:0000000000008C69                 db  52h ; R
.eh_frame:0000000000008C6A                 db  0Eh
.eh_frame:0000000000008C6B                 db  20h
.eh_frame:0000000000008C6C                 db  59h ; Y
.eh_frame:0000000000008C6D                 db  0Ah
.eh_frame:0000000000008C6E                 db  0Eh
.eh_frame:0000000000008C6F                 db  18h
.eh_frame:0000000000008C70                 db  43h ; C
.eh_frame:0000000000008C71                 db  0Eh
.eh_frame:0000000000008C72                 db  10h
.eh_frame:0000000000008C73                 db  41h ; A
.eh_frame:0000000000008C74                 db  0Eh
.eh_frame:0000000000008C75                 db    8
.eh_frame:0000000000008C76                 db  41h ; A
.eh_frame:0000000000008C77                 db  0Bh
.eh_frame:0000000000008C78                 db  34h ; 4
.eh_frame:0000000000008C79                 db    0
.eh_frame:0000000000008C7A                 db    0
.eh_frame:0000000000008C7B                 db    0
.eh_frame:0000000000008C7C                 db  3Ch ; <
.eh_frame:0000000000008C7D                 db    1
.eh_frame:0000000000008C7E                 db    0
.eh_frame:0000000000008C7F                 db    0
.eh_frame:0000000000008C80                 db  80h
.eh_frame:0000000000008C81                 db  9Ah
.eh_frame:0000000000008C82                 db 0FFh
.eh_frame:0000000000008C83                 db 0FFh
.eh_frame:0000000000008C84                 db  6Ch ; l
.eh_frame:0000000000008C85                 db    0
.eh_frame:0000000000008C86                 db    0
.eh_frame:0000000000008C87                 db    0
.eh_frame:0000000000008C88                 db    0
.eh_frame:0000000000008C89                 db  41h ; A
.eh_frame:0000000000008C8A                 db  0Eh
.eh_frame:0000000000008C8B                 db  10h
.eh_frame:0000000000008C8C                 db  86h
.eh_frame:0000000000008C8D                 db    2
.eh_frame:0000000000008C8E                 db  41h ; A
.eh_frame:0000000000008C8F                 db  0Eh
.eh_frame:0000000000008C90                 db  18h
.eh_frame:0000000000008C91                 db  83h
.eh_frame:0000000000008C92                 db    3
.eh_frame:0000000000008C93                 db  4Ah ; J
.eh_frame:0000000000008C94                 db  0Eh
.eh_frame:0000000000008C95                 db  20h
.eh_frame:0000000000008C96                 db  5Ch ; \
.eh_frame:0000000000008C97                 db  0Ah
.eh_frame:0000000000008C98                 db  0Eh
.eh_frame:0000000000008C99                 db  18h
.eh_frame:0000000000008C9A                 db  47h ; G
.eh_frame:0000000000008C9B                 db  0Eh
.eh_frame:0000000000008C9C                 db  10h
.eh_frame:0000000000008C9D                 db  41h ; A
.eh_frame:0000000000008C9E                 db  0Eh
.eh_frame:0000000000008C9F                 db    8
.eh_frame:0000000000008CA0                 db  48h ; H
.eh_frame:0000000000008CA1                 db  0Bh
.eh_frame:0000000000008CA2                 db  54h ; T
.eh_frame:0000000000008CA3                 db  0Ah
.eh_frame:0000000000008CA4                 db  0Eh
.eh_frame:0000000000008CA5                 db  18h
.eh_frame:0000000000008CA6                 db  41h ; A
.eh_frame:0000000000008CA7                 db  0Eh
.eh_frame:0000000000008CA8                 db  10h
.eh_frame:0000000000008CA9                 db  41h ; A
.eh_frame:0000000000008CAA                 db  0Eh
.eh_frame:0000000000008CAB                 db    8
.eh_frame:0000000000008CAC                 db  42h ; B
.eh_frame:0000000000008CAD                 db  0Bh
.eh_frame:0000000000008CAE                 db    0
.eh_frame:0000000000008CAF                 db    0
.eh_frame:0000000000008CB0                 db  10h
.eh_frame:0000000000008CB1                 db    0
.eh_frame:0000000000008CB2                 db    0
.eh_frame:0000000000008CB3                 db    0
.eh_frame:0000000000008CB4                 db  74h ; t
.eh_frame:0000000000008CB5                 db    1
.eh_frame:0000000000008CB6                 db    0
.eh_frame:0000000000008CB7                 db    0
.eh_frame:0000000000008CB8                 db 0B8h
.eh_frame:0000000000008CB9                 db  9Ah
.eh_frame:0000000000008CBA                 db 0FFh
.eh_frame:0000000000008CBB                 db 0FFh
.eh_frame:0000000000008CBC                 db    8
.eh_frame:0000000000008CBD                 db    0
.eh_frame:0000000000008CBE                 db    0
.eh_frame:0000000000008CBF                 db    0
.eh_frame:0000000000008CC0                 db    0
.eh_frame:0000000000008CC1                 db    0
.eh_frame:0000000000008CC2                 db    0
.eh_frame:0000000000008CC3                 db    0
.eh_frame:0000000000008CC4                 db  10h
.eh_frame:0000000000008CC5                 db    0
.eh_frame:0000000000008CC6                 db    0
.eh_frame:0000000000008CC7                 db    0
.eh_frame:0000000000008CC8                 db  88h
.eh_frame:0000000000008CC9                 db    1
.eh_frame:0000000000008CCA                 db    0
.eh_frame:0000000000008CCB                 db    0
.eh_frame:0000000000008CCC                 db 0B4h
.eh_frame:0000000000008CCD                 db  9Ah
.eh_frame:0000000000008CCE                 db 0FFh
.eh_frame:0000000000008CCF                 db 0FFh
.eh_frame:0000000000008CD0                 db    8
.eh_frame:0000000000008CD1                 db    0
.eh_frame:0000000000008CD2                 db    0
.eh_frame:0000000000008CD3                 db    0
.eh_frame:0000000000008CD4                 db    0
.eh_frame:0000000000008CD5                 db    0
.eh_frame:0000000000008CD6                 db    0
.eh_frame:0000000000008CD7                 db    0
.eh_frame:0000000000008CD8                 db  2Ch ; ,
.eh_frame:0000000000008CD9                 db    0
.eh_frame:0000000000008CDA                 db    0
.eh_frame:0000000000008CDB                 db    0
.eh_frame:0000000000008CDC                 db  9Ch
.eh_frame:0000000000008CDD                 db    1
.eh_frame:0000000000008CDE                 db    0
.eh_frame:0000000000008CDF                 db    0
.eh_frame:0000000000008CE0                 db 0B0h
.eh_frame:0000000000008CE1                 db  9Ah
.eh_frame:0000000000008CE2                 db 0FFh
.eh_frame:0000000000008CE3                 db 0FFh
.eh_frame:0000000000008CE4                 db 0A4h
.eh_frame:0000000000008CE5                 db    0
.eh_frame:0000000000008CE6                 db    0
.eh_frame:0000000000008CE7                 db    0
.eh_frame:0000000000008CE8                 db    0
.eh_frame:0000000000008CE9                 db  41h ; A
.eh_frame:0000000000008CEA                 db  0Eh
.eh_frame:0000000000008CEB                 db  10h
.eh_frame:0000000000008CEC                 db  86h
.eh_frame:0000000000008CED                 db    2
.eh_frame:0000000000008CEE                 db  41h ; A
.eh_frame:0000000000008CEF                 db  0Eh
.eh_frame:0000000000008CF0                 db  18h
.eh_frame:0000000000008CF1                 db  83h
.eh_frame:0000000000008CF2                 db    3
.eh_frame:0000000000008CF3                 db  44h ; D
.eh_frame:0000000000008CF4                 db  0Eh
.eh_frame:0000000000008CF5                 db  20h
.eh_frame:0000000000008CF6                 db  7Ah ; z
.eh_frame:0000000000008CF7                 db  0Ah
.eh_frame:0000000000008CF8                 db  0Eh
.eh_frame:0000000000008CF9                 db  18h
.eh_frame:0000000000008CFA                 db  41h ; A
.eh_frame:0000000000008CFB                 db  0Eh
.eh_frame:0000000000008CFC                 db  10h
.eh_frame:0000000000008CFD                 db  41h ; A
.eh_frame:0000000000008CFE                 db  0Eh
.eh_frame:0000000000008CFF                 db    8
.eh_frame:0000000000008D00                 db  41h ; A
.eh_frame:0000000000008D01                 db  0Bh
.eh_frame:0000000000008D02                 db    0
.eh_frame:0000000000008D03                 db    0
.eh_frame:0000000000008D04                 db    0
.eh_frame:0000000000008D05                 db    0
.eh_frame:0000000000008D06                 db    0
.eh_frame:0000000000008D07                 db    0
.eh_frame:0000000000008D08                 db  38h ; 8
.eh_frame:0000000000008D09                 db    0
.eh_frame:0000000000008D0A                 db    0
.eh_frame:0000000000008D0B                 db    0
.eh_frame:0000000000008D0C                 db 0CCh
.eh_frame:0000000000008D0D                 db    1
.eh_frame:0000000000008D0E                 db    0
.eh_frame:0000000000008D0F                 db    0
.eh_frame:0000000000008D10                 db  30h ; 0
.eh_frame:0000000000008D11                 db  9Bh
.eh_frame:0000000000008D12                 db 0FFh
.eh_frame:0000000000008D13                 db 0FFh
.eh_frame:0000000000008D14                 db  52h ; R
.eh_frame:0000000000008D15                 db    0
.eh_frame:0000000000008D16                 db    0
.eh_frame:0000000000008D17                 db    0
.eh_frame:0000000000008D18                 db    0
.eh_frame:0000000000008D19                 db  47h ; G
.eh_frame:0000000000008D1A                 db  0Eh
.eh_frame:0000000000008D1B                 db  10h
.eh_frame:0000000000008D1C                 db  8Dh
.eh_frame:0000000000008D1D                 db    2
.eh_frame:0000000000008D1E                 db  42h ; B
.eh_frame:0000000000008D1F                 db  0Eh
.eh_frame:0000000000008D20                 db  18h
.eh_frame:0000000000008D21                 db  8Ch
.eh_frame:0000000000008D22                 db    3
.eh_frame:0000000000008D23                 db  44h ; D
.eh_frame:0000000000008D24                 db  0Eh
.eh_frame:0000000000008D25                 db  20h
.eh_frame:0000000000008D26                 db  86h
.eh_frame:0000000000008D27                 db    4
.eh_frame:0000000000008D28                 db  41h ; A
.eh_frame:0000000000008D29                 db  0Eh
.eh_frame:0000000000008D2A                 db  28h ; (
.eh_frame:0000000000008D2B                 db  83h
.eh_frame:0000000000008D2C                 db    5
.eh_frame:0000000000008D2D                 db  4Ah ; J
.eh_frame:0000000000008D2E                 db  0Eh
.eh_frame:0000000000008D2F                 db  30h ; 0
.eh_frame:0000000000008D30                 db  6Fh ; o
.eh_frame:0000000000008D31                 db  0Eh
.eh_frame:0000000000008D32                 db  28h ; (
.eh_frame:0000000000008D33                 db  41h ; A
.eh_frame:0000000000008D34                 db  0Eh
.eh_frame:0000000000008D35                 db  20h
.eh_frame:0000000000008D36                 db  41h ; A
.eh_frame:0000000000008D37                 db  0Eh
.eh_frame:0000000000008D38                 db  18h
.eh_frame:0000000000008D39                 db  42h ; B
.eh_frame:0000000000008D3A                 db  0Eh
.eh_frame:0000000000008D3B                 db  10h
.eh_frame:0000000000008D3C                 db  42h ; B
.eh_frame:0000000000008D3D                 db  0Eh
.eh_frame:0000000000008D3E                 db    8
.eh_frame:0000000000008D3F                 db  43h ; C
.eh_frame:0000000000008D40                 db 0C3h
.eh_frame:0000000000008D41                 db 0C6h
.eh_frame:0000000000008D42                 db 0CCh
.eh_frame:0000000000008D43                 db 0CDh
.eh_frame:0000000000008D44                 db  38h ; 8
.eh_frame:0000000000008D45                 db    0
.eh_frame:0000000000008D46                 db    0
.eh_frame:0000000000008D47                 db    0
.eh_frame:0000000000008D48                 db    8
.eh_frame:0000000000008D49                 db    2
.eh_frame:0000000000008D4A                 db    0
.eh_frame:0000000000008D4B                 db    0
.eh_frame:0000000000008D4C                 db  54h ; T
.eh_frame:0000000000008D4D                 db  9Bh
.eh_frame:0000000000008D4E                 db 0FFh
.eh_frame:0000000000008D4F                 db 0FFh
.eh_frame:0000000000008D50                 db  52h ; R
.eh_frame:0000000000008D51                 db    0
.eh_frame:0000000000008D52                 db    0
.eh_frame:0000000000008D53                 db    0
.eh_frame:0000000000008D54                 db    0
.eh_frame:0000000000008D55                 db  47h ; G
.eh_frame:0000000000008D56                 db  0Eh
.eh_frame:0000000000008D57                 db  10h
.eh_frame:0000000000008D58                 db  8Dh
.eh_frame:0000000000008D59                 db    2
.eh_frame:0000000000008D5A                 db  42h ; B
.eh_frame:0000000000008D5B                 db  0Eh
.eh_frame:0000000000008D5C                 db  18h
.eh_frame:0000000000008D5D                 db  8Ch
.eh_frame:0000000000008D5E                 db    3
.eh_frame:0000000000008D5F                 db  44h ; D
.eh_frame:0000000000008D60                 db  0Eh
.eh_frame:0000000000008D61                 db  20h
.eh_frame:0000000000008D62                 db  86h
.eh_frame:0000000000008D63                 db    4
.eh_frame:0000000000008D64                 db  41h ; A
.eh_frame:0000000000008D65                 db  0Eh
.eh_frame:0000000000008D66                 db  28h ; (
.eh_frame:0000000000008D67                 db  83h
.eh_frame:0000000000008D68                 db    5
.eh_frame:0000000000008D69                 db  4Ah ; J
.eh_frame:0000000000008D6A                 db  0Eh
.eh_frame:0000000000008D6B                 db  30h ; 0
.eh_frame:0000000000008D6C                 db  6Fh ; o
.eh_frame:0000000000008D6D                 db  0Eh
.eh_frame:0000000000008D6E                 db  28h ; (
.eh_frame:0000000000008D6F                 db  41h ; A
.eh_frame:0000000000008D70                 db  0Eh
.eh_frame:0000000000008D71                 db  20h
.eh_frame:0000000000008D72                 db  41h ; A
.eh_frame:0000000000008D73                 db  0Eh
.eh_frame:0000000000008D74                 db  18h
.eh_frame:0000000000008D75                 db  42h ; B
.eh_frame:0000000000008D76                 db  0Eh
.eh_frame:0000000000008D77                 db  10h
.eh_frame:0000000000008D78                 db  42h ; B
.eh_frame:0000000000008D79                 db  0Eh
.eh_frame:0000000000008D7A                 db    8
.eh_frame:0000000000008D7B                 db  43h ; C
.eh_frame:0000000000008D7C                 db 0C3h
.eh_frame:0000000000008D7D                 db 0C6h
.eh_frame:0000000000008D7E                 db 0CCh
.eh_frame:0000000000008D7F                 db 0CDh
.eh_frame:0000000000008D80                 db  74h ; t
.eh_frame:0000000000008D81                 db    0
.eh_frame:0000000000008D82                 db    0
.eh_frame:0000000000008D83                 db    0
.eh_frame:0000000000008D84                 db  44h ; D
.eh_frame:0000000000008D85                 db    2
.eh_frame:0000000000008D86                 db    0
.eh_frame:0000000000008D87                 db    0
.eh_frame:0000000000008D88                 db  78h ; x
.eh_frame:0000000000008D89                 db  9Bh
.eh_frame:0000000000008D8A                 db 0FFh
.eh_frame:0000000000008D8B                 db 0FFh
.eh_frame:0000000000008D8C                 db  17h
.eh_frame:0000000000008D8D                 db  1Ch
.eh_frame:0000000000008D8E                 db    0
.eh_frame:0000000000008D8F                 db    0
.eh_frame:0000000000008D90                 db    0
.eh_frame:0000000000008D91                 db  42h ; B
.eh_frame:0000000000008D92                 db  0Eh
.eh_frame:0000000000008D93                 db  10h
.eh_frame:0000000000008D94                 db  8Fh
.eh_frame:0000000000008D95                 db    2
.eh_frame:0000000000008D96                 db  42h ; B
.eh_frame:0000000000008D97                 db  0Eh
.eh_frame:0000000000008D98                 db  18h
.eh_frame:0000000000008D99                 db  8Eh
.eh_frame:0000000000008D9A                 db    3
.eh_frame:0000000000008D9B                 db  45h ; E
.eh_frame:0000000000008D9C                 db  0Eh
.eh_frame:0000000000008D9D                 db  20h
.eh_frame:0000000000008D9E                 db  8Dh
.eh_frame:0000000000008D9F                 db    4
.eh_frame:0000000000008DA0                 db  42h ; B
.eh_frame:0000000000008DA1                 db  0Eh
.eh_frame:0000000000008DA2                 db  28h ; (
.eh_frame:0000000000008DA3                 db  8Ch
.eh_frame:0000000000008DA4                 db    5
.eh_frame:0000000000008DA5                 db  44h ; D
.eh_frame:0000000000008DA6                 db  0Eh
.eh_frame:0000000000008DA7                 db  30h ; 0
.eh_frame:0000000000008DA8                 db  86h
.eh_frame:0000000000008DA9                 db    6
.eh_frame:0000000000008DAA                 db  41h ; A
.eh_frame:0000000000008DAB                 db  0Eh
.eh_frame:0000000000008DAC                 db  38h ; 8
.eh_frame:0000000000008DAD                 db  83h
.eh_frame:0000000000008DAE                 db    7
.eh_frame:0000000000008DAF                 db  4Ah ; J
.eh_frame:0000000000008DB0                 db  0Eh
.eh_frame:0000000000008DB1                 db 0F0h
.eh_frame:0000000000008DB2                 db    9
.eh_frame:0000000000008DB3                 db    2
.eh_frame:0000000000008DB4                 db 0C9h
.eh_frame:0000000000008DB5                 db  0Ah
.eh_frame:0000000000008DB6                 db  0Eh
.eh_frame:0000000000008DB7                 db  38h ; 8
.eh_frame:0000000000008DB8                 db  41h ; A
.eh_frame:0000000000008DB9                 db  0Eh
.eh_frame:0000000000008DBA                 db  30h ; 0
.eh_frame:0000000000008DBB                 db  41h ; A
.eh_frame:0000000000008DBC                 db  0Eh
.eh_frame:0000000000008DBD                 db  28h ; (
.eh_frame:0000000000008DBE                 db  42h ; B
.eh_frame:0000000000008DBF                 db  0Eh
.eh_frame:0000000000008DC0                 db  20h
.eh_frame:0000000000008DC1                 db  42h ; B
.eh_frame:0000000000008DC2                 db  0Eh
.eh_frame:0000000000008DC3                 db  18h
.eh_frame:0000000000008DC4                 db  42h ; B
.eh_frame:0000000000008DC5                 db  0Eh
.eh_frame:0000000000008DC6                 db  10h
.eh_frame:0000000000008DC7                 db  42h ; B
.eh_frame:0000000000008DC8                 db  0Eh
.eh_frame:0000000000008DC9                 db    8
.eh_frame:0000000000008DCA                 db  43h ; C
.eh_frame:0000000000008DCB                 db  0Bh
.eh_frame:0000000000008DCC                 db    3
.eh_frame:0000000000008DCD                 db  8Dh
.eh_frame:0000000000008DCE                 db    5
.eh_frame:0000000000008DCF                 db  0Eh
.eh_frame:0000000000008DD0                 db 0F8h
.eh_frame:0000000000008DD1                 db    9
.eh_frame:0000000000008DD2                 db  4Dh ; M
.eh_frame:0000000000008DD3                 db  0Eh
.eh_frame:0000000000008DD4                 db  80h
.eh_frame:0000000000008DD5                 db  0Ah
.eh_frame:0000000000008DD6                 db  44h ; D
.eh_frame:0000000000008DD7                 db  0Eh
.eh_frame:0000000000008DD8                 db  88h
.eh_frame:0000000000008DD9                 db  0Ah
.eh_frame:0000000000008DDA                 db  46h ; F
.eh_frame:0000000000008DDB                 db  0Eh
.eh_frame:0000000000008DDC                 db  90h
.eh_frame:0000000000008DDD                 db  0Ah
.eh_frame:0000000000008DDE                 db  58h ; X
.eh_frame:0000000000008DDF                 db  0Eh
.eh_frame:0000000000008DE0                 db 0F0h
.eh_frame:0000000000008DE1                 db    9
.eh_frame:0000000000008DE2                 db    3
.eh_frame:0000000000008DE3                 db  8Fh
.eh_frame:0000000000008DE4                 db  0Eh
.eh_frame:0000000000008DE5                 db  0Eh
.eh_frame:0000000000008DE6                 db 0F8h
.eh_frame:0000000000008DE7                 db    9
.eh_frame:0000000000008DE8                 db  50h ; P
.eh_frame:0000000000008DE9                 db  0Eh
.eh_frame:0000000000008DEA                 db  80h
.eh_frame:0000000000008DEB                 db  0Ah
.eh_frame:0000000000008DEC                 db  44h ; D
.eh_frame:0000000000008DED                 db  0Eh
.eh_frame:0000000000008DEE                 db  88h
.eh_frame:0000000000008DEF                 db  0Ah
.eh_frame:0000000000008DF0                 db  44h ; D
.eh_frame:0000000000008DF1                 db  0Eh
.eh_frame:0000000000008DF2                 db  90h
.eh_frame:0000000000008DF3                 db  0Ah
.eh_frame:0000000000008DF4                 db  58h ; X
.eh_frame:0000000000008DF5                 db  0Eh
.eh_frame:0000000000008DF6                 db 0F0h
.eh_frame:0000000000008DF7                 db    9
.eh_frame:0000000000008DF8                 db  24h ; $
.eh_frame:0000000000008DF9                 db    0
.eh_frame:0000000000008DFA                 db    0
.eh_frame:0000000000008DFB                 db    0
.eh_frame:0000000000008DFC                 db 0BCh
.eh_frame:0000000000008DFD                 db    2
.eh_frame:0000000000008DFE                 db    0
.eh_frame:0000000000008DFF                 db    0
.eh_frame:0000000000008E00                 db  20h
.eh_frame:0000000000008E01                 db 0B7h
.eh_frame:0000000000008E02                 db 0FFh
.eh_frame:0000000000008E03                 db 0FFh
.eh_frame:0000000000008E04                 db  50h ; P
.eh_frame:0000000000008E05                 db    0
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db    0
.eh_frame:0000000000008E09                 db  44h ; D
.eh_frame:0000000000008E0A                 db  0Eh
.eh_frame:0000000000008E0B                 db  28h ; (
.eh_frame:0000000000008E0C                 db  5Dh ; ]
.eh_frame:0000000000008E0D                 db  0Eh
.eh_frame:0000000000008E0E                 db  30h ; 0
.eh_frame:0000000000008E0F                 db  44h ; D
.eh_frame:0000000000008E10                 db  0Eh
.eh_frame:0000000000008E11                 db  38h ; 8
.eh_frame:0000000000008E12                 db  48h ; H
.eh_frame:0000000000008E13                 db  0Eh
.eh_frame:0000000000008E14                 db  40h ; @
.eh_frame:0000000000008E15                 db  49h ; I
.eh_frame:0000000000008E16                 db  0Eh
.eh_frame:0000000000008E17                 db  20h
.eh_frame:0000000000008E18                 db  54h ; T
.eh_frame:0000000000008E19                 db  0Ah
.eh_frame:0000000000008E1A                 db  0Eh
.eh_frame:0000000000008E1B                 db    8
.eh_frame:0000000000008E1C                 db  41h ; A
.eh_frame:0000000000008E1D                 db  0Bh
.eh_frame:0000000000008E1E                 db    0
.eh_frame:0000000000008E1F                 db    0
.eh_frame:0000000000008E20                 db  38h ; 8
.eh_frame:0000000000008E21                 db    0
.eh_frame:0000000000008E22                 db    0
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db 0E4h
.eh_frame:0000000000008E25                 db    2
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db  48h ; H
.eh_frame:0000000000008E29                 db 0B7h
.eh_frame:0000000000008E2A                 db 0FFh
.eh_frame:0000000000008E2B                 db 0FFh
.eh_frame:0000000000008E2C                 db  3Fh ; ?
.eh_frame:0000000000008E2D                 db    1
.eh_frame:0000000000008E2E                 db    0
.eh_frame:0000000000008E2F                 db    0
.eh_frame:0000000000008E30                 db    0
.eh_frame:0000000000008E31                 db  42h ; B
.eh_frame:0000000000008E32                 db  0Eh
.eh_frame:0000000000008E33                 db  10h
.eh_frame:0000000000008E34                 db  8Dh
.eh_frame:0000000000008E35                 db    2
.eh_frame:0000000000008E36                 db  42h ; B
.eh_frame:0000000000008E37                 db  0Eh
.eh_frame:0000000000008E38                 db  18h
.eh_frame:0000000000008E39                 db  8Ch
.eh_frame:0000000000008E3A                 db    3
.eh_frame:0000000000008E3B                 db  44h ; D
.eh_frame:0000000000008E3C                 db  0Eh
.eh_frame:0000000000008E3D                 db  20h
.eh_frame:0000000000008E3E                 db  86h
.eh_frame:0000000000008E3F                 db    4
.eh_frame:0000000000008E40                 db  41h ; A
.eh_frame:0000000000008E41                 db  0Eh
.eh_frame:0000000000008E42                 db  28h ; (
.eh_frame:0000000000008E43                 db  83h
.eh_frame:0000000000008E44                 db    5
.eh_frame:0000000000008E45                 db  4Dh ; M
.eh_frame:0000000000008E46                 db  0Eh
.eh_frame:0000000000008E47                 db  90h
.eh_frame:0000000000008E48                 db    2
.eh_frame:0000000000008E49                 db    2
.eh_frame:0000000000008E4A                 db  8Eh
.eh_frame:0000000000008E4B                 db  0Ah
.eh_frame:0000000000008E4C                 db  0Eh
.eh_frame:0000000000008E4D                 db  28h ; (
.eh_frame:0000000000008E4E                 db  41h ; A
.eh_frame:0000000000008E4F                 db  0Eh
.eh_frame:0000000000008E50                 db  20h
.eh_frame:0000000000008E51                 db  41h ; A
.eh_frame:0000000000008E52                 db  0Eh
.eh_frame:0000000000008E53                 db  18h
.eh_frame:0000000000008E54                 db  42h ; B
.eh_frame:0000000000008E55                 db  0Eh
.eh_frame:0000000000008E56                 db  10h
.eh_frame:0000000000008E57                 db  42h ; B
.eh_frame:0000000000008E58                 db  0Eh
.eh_frame:0000000000008E59                 db    8
.eh_frame:0000000000008E5A                 db  46h ; F
.eh_frame:0000000000008E5B                 db  0Bh
.eh_frame:0000000000008E5C                 db  48h ; H
.eh_frame:0000000000008E5D                 db    0
.eh_frame:0000000000008E5E                 db    0
.eh_frame:0000000000008E5F                 db    0
.eh_frame:0000000000008E60                 db  20h
.eh_frame:0000000000008E61                 db    3
.eh_frame:0000000000008E62                 db    0
.eh_frame:0000000000008E63                 db    0
.eh_frame:0000000000008E64                 db  4Ch ; L
.eh_frame:0000000000008E65                 db 0B8h
.eh_frame:0000000000008E66                 db 0FFh
.eh_frame:0000000000008E67                 db 0FFh
.eh_frame:0000000000008E68                 db  3Bh ; ;
.eh_frame:0000000000008E69                 db    1
.eh_frame:0000000000008E6A                 db    0
.eh_frame:0000000000008E6B                 db    0
.eh_frame:0000000000008E6C                 db    0
.eh_frame:0000000000008E6D                 db  42h ; B
.eh_frame:0000000000008E6E                 db  0Eh
.eh_frame:0000000000008E6F                 db  10h
.eh_frame:0000000000008E70                 db  8Eh
.eh_frame:0000000000008E71                 db    2
.eh_frame:0000000000008E72                 db  42h ; B
.eh_frame:0000000000008E73                 db  0Eh
.eh_frame:0000000000008E74                 db  18h
.eh_frame:0000000000008E75                 db  8Dh
.eh_frame:0000000000008E76                 db    3
.eh_frame:0000000000008E77                 db  45h ; E
.eh_frame:0000000000008E78                 db  0Eh
.eh_frame:0000000000008E79                 db  20h
.eh_frame:0000000000008E7A                 db  8Ch
.eh_frame:0000000000008E7B                 db    4
.eh_frame:0000000000008E7C                 db  41h ; A
.eh_frame:0000000000008E7D                 db  0Eh
.eh_frame:0000000000008E7E                 db  28h ; (
.eh_frame:0000000000008E7F                 db  86h
.eh_frame:0000000000008E80                 db    5
.eh_frame:0000000000008E81                 db  44h ; D
.eh_frame:0000000000008E82                 db  0Eh
.eh_frame:0000000000008E83                 db  30h ; 0
.eh_frame:0000000000008E84                 db  83h
.eh_frame:0000000000008E85                 db    6
.eh_frame:0000000000008E86                 db  4Ah ; J
.eh_frame:0000000000008E87                 db  0Eh
.eh_frame:0000000000008E88                 db  80h
.eh_frame:0000000000008E89                 db    2
.eh_frame:0000000000008E8A                 db    3
.eh_frame:0000000000008E8B                 db  0Dh
.eh_frame:0000000000008E8C                 db    1
.eh_frame:0000000000008E8D                 db  0Ah
.eh_frame:0000000000008E8E                 db  0Eh
.eh_frame:0000000000008E8F                 db  30h ; 0
.eh_frame:0000000000008E90                 db  41h ; A
.eh_frame:0000000000008E91                 db  0Eh
.eh_frame:0000000000008E92                 db  28h ; (
.eh_frame:0000000000008E93                 db  41h ; A
.eh_frame:0000000000008E94                 db  0Eh
.eh_frame:0000000000008E95                 db  20h
.eh_frame:0000000000008E96                 db  42h ; B
.eh_frame:0000000000008E97                 db  0Eh
.eh_frame:0000000000008E98                 db  18h
.eh_frame:0000000000008E99                 db  42h ; B
.eh_frame:0000000000008E9A                 db  0Eh
.eh_frame:0000000000008E9B                 db  10h
.eh_frame:0000000000008E9C                 db  42h ; B
.eh_frame:0000000000008E9D                 db  0Eh
.eh_frame:0000000000008E9E                 db    8
.eh_frame:0000000000008E9F                 db  43h ; C
.eh_frame:0000000000008EA0                 db  0Bh
.eh_frame:0000000000008EA1                 db    0
.eh_frame:0000000000008EA2                 db    0
.eh_frame:0000000000008EA3                 db    0
.eh_frame:0000000000008EA4                 db    0
.eh_frame:0000000000008EA5                 db    0
.eh_frame:0000000000008EA6                 db    0
.eh_frame:0000000000008EA7                 db    0
.eh_frame:0000000000008EA8                 db  1Ch
.eh_frame:0000000000008EA9                 db    0
.eh_frame:0000000000008EAA                 db    0
.eh_frame:0000000000008EAB                 db    0
.eh_frame:0000000000008EAC                 db  6Ch ; l
.eh_frame:0000000000008EAD                 db    3
.eh_frame:0000000000008EAE                 db    0
.eh_frame:0000000000008EAF                 db    0
.eh_frame:0000000000008EB0                 db  40h ; @
.eh_frame:0000000000008EB1                 db 0B9h
.eh_frame:0000000000008EB2                 db 0FFh
.eh_frame:0000000000008EB3                 db 0FFh
.eh_frame:0000000000008EB4                 db  9Fh
.eh_frame:0000000000008EB5                 db    0
.eh_frame:0000000000008EB6                 db    0
.eh_frame:0000000000008EB7                 db    0
.eh_frame:0000000000008EB8                 db    0
.eh_frame:0000000000008EB9                 db  44h ; D
.eh_frame:0000000000008EBA                 db  0Eh
.eh_frame:0000000000008EBB                 db  10h
.eh_frame:0000000000008EBC                 db  83h
.eh_frame:0000000000008EBD                 db    2
.eh_frame:0000000000008EBE                 db    2
.eh_frame:0000000000008EBF                 db  78h ; x
.eh_frame:0000000000008EC0                 db  0Ah
.eh_frame:0000000000008EC1                 db  0Eh
.eh_frame:0000000000008EC2                 db    8
.eh_frame:0000000000008EC3                 db  41h ; A
.eh_frame:0000000000008EC4                 db  0Bh
.eh_frame:0000000000008EC5                 db    0
.eh_frame:0000000000008EC6                 db    0
.eh_frame:0000000000008EC7                 db    0
.eh_frame:0000000000008EC8                 db  40h ; @
.eh_frame:0000000000008EC9                 db    0
.eh_frame:0000000000008ECA                 db    0
.eh_frame:0000000000008ECB                 db    0
.eh_frame:0000000000008ECC                 db  8Ch
.eh_frame:0000000000008ECD                 db    3
.eh_frame:0000000000008ECE                 db    0
.eh_frame:0000000000008ECF                 db    0
.eh_frame:0000000000008ED0                 db 0C0h
.eh_frame:0000000000008ED1                 db 0B9h
.eh_frame:0000000000008ED2                 db 0FFh
.eh_frame:0000000000008ED3                 db 0FFh
.eh_frame:0000000000008ED4                 db 0E7h
.eh_frame:0000000000008ED5                 db    0
.eh_frame:0000000000008ED6                 db    0
.eh_frame:0000000000008ED7                 db    0
.eh_frame:0000000000008ED8                 db    0
.eh_frame:0000000000008ED9                 db  41h ; A
.eh_frame:0000000000008EDA                 db  0Eh
.eh_frame:0000000000008EDB                 db  10h
.eh_frame:0000000000008EDC                 db  86h
.eh_frame:0000000000008EDD                 db    2
.eh_frame:0000000000008EDE                 db  41h ; A
.eh_frame:0000000000008EDF                 db  0Eh
.eh_frame:0000000000008EE0                 db  18h
.eh_frame:0000000000008EE1                 db  83h
.eh_frame:0000000000008EE2                 db    3
.eh_frame:0000000000008EE3                 db  49h ; I
.eh_frame:0000000000008EE4                 db  0Eh
.eh_frame:0000000000008EE5                 db  20h
.eh_frame:0000000000008EE6                 db  6Eh ; n
.eh_frame:0000000000008EE7                 db  0Ah
.eh_frame:0000000000008EE8                 db  0Eh
.eh_frame:0000000000008EE9                 db  18h
.eh_frame:0000000000008EEA                 db  41h ; A
.eh_frame:0000000000008EEB                 db  0Eh
.eh_frame:0000000000008EEC                 db  10h
.eh_frame:0000000000008EED                 db  41h ; A
.eh_frame:0000000000008EEE                 db  0Eh
.eh_frame:0000000000008EEF                 db    8
.eh_frame:0000000000008EF0                 db  45h ; E
.eh_frame:0000000000008EF1                 db  0Bh
.eh_frame:0000000000008EF2                 db    2
.eh_frame:0000000000008EF3                 db  4Ah ; J
.eh_frame:0000000000008EF4                 db  0Ah
.eh_frame:0000000000008EF5                 db  0Eh
.eh_frame:0000000000008EF6                 db  18h
.eh_frame:0000000000008EF7                 db  41h ; A
.eh_frame:0000000000008EF8                 db  0Eh
.eh_frame:0000000000008EF9                 db  10h
.eh_frame:0000000000008EFA                 db  41h ; A
.eh_frame:0000000000008EFB                 db  0Eh
.eh_frame:0000000000008EFC                 db    8
.eh_frame:0000000000008EFD                 db  44h ; D
.eh_frame:0000000000008EFE                 db  0Bh
.eh_frame:0000000000008EFF                 db    2
.eh_frame:0000000000008F00                 db  54h ; T
.eh_frame:0000000000008F01                 db  0Eh
.eh_frame:0000000000008F02                 db  18h
.eh_frame:0000000000008F03                 db  41h ; A
.eh_frame:0000000000008F04                 db  0Eh
.eh_frame:0000000000008F05                 db  10h
.eh_frame:0000000000008F06                 db  41h ; A
.eh_frame:0000000000008F07                 db  0Eh
.eh_frame:0000000000008F08                 db    8
.eh_frame:0000000000008F09                 db    0
.eh_frame:0000000000008F0A                 db    0
.eh_frame:0000000000008F0B                 db    0
.eh_frame:0000000000008F0C                 db  74h ; t
.eh_frame:0000000000008F0D                 db    0
.eh_frame:0000000000008F0E                 db    0
.eh_frame:0000000000008F0F                 db    0
.eh_frame:0000000000008F10                 db 0D0h
.eh_frame:0000000000008F11                 db    3
.eh_frame:0000000000008F12                 db    0
.eh_frame:0000000000008F13                 db    0
.eh_frame:0000000000008F14                 db  6Ch ; l
.eh_frame:0000000000008F15                 db 0BAh
.eh_frame:0000000000008F16                 db 0FFh
.eh_frame:0000000000008F17                 db 0FFh
.eh_frame:0000000000008F18                 db  34h ; 4
.eh_frame:0000000000008F19                 db  12h
.eh_frame:0000000000008F1A                 db    0
.eh_frame:0000000000008F1B                 db    0
.eh_frame:0000000000008F1C                 db    0
.eh_frame:0000000000008F1D                 db  42h ; B
.eh_frame:0000000000008F1E                 db  0Eh
.eh_frame:0000000000008F1F                 db  10h
.eh_frame:0000000000008F20                 db  8Fh
.eh_frame:0000000000008F21                 db    2
.eh_frame:0000000000008F22                 db  42h ; B
.eh_frame:0000000000008F23                 db  0Eh
.eh_frame:0000000000008F24                 db  18h
.eh_frame:0000000000008F25                 db  8Eh
.eh_frame:0000000000008F26                 db    3
.eh_frame:0000000000008F27                 db  45h ; E
.eh_frame:0000000000008F28                 db  0Eh
.eh_frame:0000000000008F29                 db  20h
.eh_frame:0000000000008F2A                 db  8Dh
.eh_frame:0000000000008F2B                 db    4
.eh_frame:0000000000008F2C                 db  42h ; B
.eh_frame:0000000000008F2D                 db  0Eh
.eh_frame:0000000000008F2E                 db  28h ; (
.eh_frame:0000000000008F2F                 db  8Ch
.eh_frame:0000000000008F30                 db    5
.eh_frame:0000000000008F31                 db  44h ; D
.eh_frame:0000000000008F32                 db  0Eh
.eh_frame:0000000000008F33                 db  30h ; 0
.eh_frame:0000000000008F34                 db  86h
.eh_frame:0000000000008F35                 db    6
.eh_frame:0000000000008F36                 db  41h ; A
.eh_frame:0000000000008F37                 db  0Eh
.eh_frame:0000000000008F38                 db  38h ; 8
.eh_frame:0000000000008F39                 db  83h
.eh_frame:0000000000008F3A                 db    7
.eh_frame:0000000000008F3B                 db  53h ; S
.eh_frame:0000000000008F3C                 db  0Eh
.eh_frame:0000000000008F3D                 db 0F0h
.eh_frame:0000000000008F3E                 db    1
.eh_frame:0000000000008F3F                 db    3
.eh_frame:0000000000008F40                 db  81h
.eh_frame:0000000000008F41                 db  0Bh
.eh_frame:0000000000008F42                 db  0Eh
.eh_frame:0000000000008F43                 db 0F8h
.eh_frame:0000000000008F44                 db    1
.eh_frame:0000000000008F45                 db  4Ah ; J
.eh_frame:0000000000008F46                 db  0Eh
.eh_frame:0000000000008F47                 db  80h
.eh_frame:0000000000008F48                 db    2
.eh_frame:0000000000008F49                 db  44h ; D
.eh_frame:0000000000008F4A                 db  0Eh
.eh_frame:0000000000008F4B                 db  88h
.eh_frame:0000000000008F4C                 db    2
.eh_frame:0000000000008F4D                 db  45h ; E
.eh_frame:0000000000008F4E                 db  0Eh
.eh_frame:0000000000008F4F                 db  90h
.eh_frame:0000000000008F50                 db    2
.eh_frame:0000000000008F51                 db  5Fh ; _
.eh_frame:0000000000008F52                 db  0Eh
.eh_frame:0000000000008F53                 db 0F0h
.eh_frame:0000000000008F54                 db    1
.eh_frame:0000000000008F55                 db  64h ; d
.eh_frame:0000000000008F56                 db  0Ah
.eh_frame:0000000000008F57                 db  0Eh
.eh_frame:0000000000008F58                 db  38h ; 8
.eh_frame:0000000000008F59                 db  41h ; A
.eh_frame:0000000000008F5A                 db  0Eh
.eh_frame:0000000000008F5B                 db  30h ; 0
.eh_frame:0000000000008F5C                 db  41h ; A
.eh_frame:0000000000008F5D                 db  0Eh
.eh_frame:0000000000008F5E                 db  28h ; (
.eh_frame:0000000000008F5F                 db  42h ; B
.eh_frame:0000000000008F60                 db  0Eh
.eh_frame:0000000000008F61                 db  20h
.eh_frame:0000000000008F62                 db  42h ; B
.eh_frame:0000000000008F63                 db  0Eh
.eh_frame:0000000000008F64                 db  18h
.eh_frame:0000000000008F65                 db  42h ; B
.eh_frame:0000000000008F66                 db  0Eh
.eh_frame:0000000000008F67                 db  10h
.eh_frame:0000000000008F68                 db  42h ; B
.eh_frame:0000000000008F69                 db  0Eh
.eh_frame:0000000000008F6A                 db    8
.eh_frame:0000000000008F6B                 db  44h ; D
.eh_frame:0000000000008F6C                 db  0Bh
.eh_frame:0000000000008F6D                 db    3
.eh_frame:0000000000008F6E                 db  99h
.eh_frame:0000000000008F6F                 db    5
.eh_frame:0000000000008F70                 db  0Eh
.eh_frame:0000000000008F71                 db 0F8h
.eh_frame:0000000000008F72                 db    1
.eh_frame:0000000000008F73                 db  4Dh ; M
.eh_frame:0000000000008F74                 db  0Eh
.eh_frame:0000000000008F75                 db  80h
.eh_frame:0000000000008F76                 db    2
.eh_frame:0000000000008F77                 db  44h ; D
.eh_frame:0000000000008F78                 db  0Eh
.eh_frame:0000000000008F79                 db  88h
.eh_frame:0000000000008F7A                 db    2
.eh_frame:0000000000008F7B                 db  47h ; G
.eh_frame:0000000000008F7C                 db  0Eh
.eh_frame:0000000000008F7D                 db  90h
.eh_frame:0000000000008F7E                 db    2
.eh_frame:0000000000008F7F                 db  5Bh ; [
.eh_frame:0000000000008F80                 db  0Eh
.eh_frame:0000000000008F81                 db 0F0h
.eh_frame:0000000000008F82                 db    1
.eh_frame:0000000000008F83                 db    0
.eh_frame:0000000000008F84                 db  68h ; h
.eh_frame:0000000000008F85                 db    0
.eh_frame:0000000000008F86                 db    0
.eh_frame:0000000000008F87                 db    0
.eh_frame:0000000000008F88                 db  48h ; H
.eh_frame:0000000000008F89                 db    4
.eh_frame:0000000000008F8A                 db    0
.eh_frame:0000000000008F8B                 db    0
.eh_frame:0000000000008F8C                 db  34h ; 4
.eh_frame:0000000000008F8D                 db 0CCh
.eh_frame:0000000000008F8E                 db 0FFh
.eh_frame:0000000000008F8F                 db 0FFh
.eh_frame:0000000000008F90                 db 0ABh
.eh_frame:0000000000008F91                 db    1
.eh_frame:0000000000008F92                 db    0
.eh_frame:0000000000008F93                 db    0
.eh_frame:0000000000008F94                 db    0
.eh_frame:0000000000008F95                 db  42h ; B
.eh_frame:0000000000008F96                 db  0Eh
.eh_frame:0000000000008F97                 db  10h
.eh_frame:0000000000008F98                 db  8Fh
.eh_frame:0000000000008F99                 db    2
.eh_frame:0000000000008F9A                 db  42h ; B
.eh_frame:0000000000008F9B                 db  0Eh
.eh_frame:0000000000008F9C                 db  18h
.eh_frame:0000000000008F9D                 db  8Eh
.eh_frame:0000000000008F9E                 db    3
.eh_frame:0000000000008F9F                 db  45h ; E
.eh_frame:0000000000008FA0                 db  0Eh
.eh_frame:0000000000008FA1                 db  20h
.eh_frame:0000000000008FA2                 db  8Dh
.eh_frame:0000000000008FA3                 db    4
.eh_frame:0000000000008FA4                 db  42h ; B
.eh_frame:0000000000008FA5                 db  0Eh
.eh_frame:0000000000008FA6                 db  28h ; (
.eh_frame:0000000000008FA7                 db  8Ch
.eh_frame:0000000000008FA8                 db    5
.eh_frame:0000000000008FA9                 db  44h ; D
.eh_frame:0000000000008FAA                 db  0Eh
.eh_frame:0000000000008FAB                 db  30h ; 0
.eh_frame:0000000000008FAC                 db  86h
.eh_frame:0000000000008FAD                 db    6
.eh_frame:0000000000008FAE                 db  41h ; A
.eh_frame:0000000000008FAF                 db  0Eh
.eh_frame:0000000000008FB0                 db  38h ; 8
.eh_frame:0000000000008FB1                 db  83h
.eh_frame:0000000000008FB2                 db    7
.eh_frame:0000000000008FB3                 db  47h ; G
.eh_frame:0000000000008FB4                 db  0Eh
.eh_frame:0000000000008FB5                 db  60h ; `
.eh_frame:0000000000008FB6                 db    2
.eh_frame:0000000000008FB7                 db  99h
.eh_frame:0000000000008FB8                 db  0Eh
.eh_frame:0000000000008FB9                 db  68h ; h
.eh_frame:0000000000008FBA                 db  5Fh ; _
.eh_frame:0000000000008FBB                 db  0Eh
.eh_frame:0000000000008FBC                 db  70h ; p
.eh_frame:0000000000008FBD                 db  46h ; F
.eh_frame:0000000000008FBE                 db  0Eh
.eh_frame:0000000000008FBF                 db  78h ; x
.eh_frame:0000000000008FC0                 db  42h ; B
.eh_frame:0000000000008FC1                 db  0Eh
.eh_frame:0000000000008FC2                 db  80h
.eh_frame:0000000000008FC3                 db    1
.eh_frame:0000000000008FC4                 db  59h ; Y
.eh_frame:0000000000008FC5                 db  0Eh
.eh_frame:0000000000008FC6                 db  60h ; `
.eh_frame:0000000000008FC7                 db    2
.eh_frame:0000000000008FC8                 db  40h ; @
.eh_frame:0000000000008FC9                 db  0Eh
.eh_frame:0000000000008FCA                 db  68h ; h
.eh_frame:0000000000008FCB                 db  4Bh ; K
.eh_frame:0000000000008FCC                 db  0Eh
.eh_frame:0000000000008FCD                 db  70h ; p
.eh_frame:0000000000008FCE                 db  43h ; C
.eh_frame:0000000000008FCF                 db  0Eh
.eh_frame:0000000000008FD0                 db  78h ; x
.eh_frame:0000000000008FD1                 db  45h ; E
.eh_frame:0000000000008FD2                 db  0Eh
.eh_frame:0000000000008FD3                 db  80h
.eh_frame:0000000000008FD4                 db    1
.eh_frame:0000000000008FD5                 db  5Eh ; ^
.eh_frame:0000000000008FD6                 db  0Eh
.eh_frame:0000000000008FD7                 db  60h ; `
.eh_frame:0000000000008FD8                 db  4Ch ; L
.eh_frame:0000000000008FD9                 db  0Ah
.eh_frame:0000000000008FDA                 db  0Eh
.eh_frame:0000000000008FDB                 db  38h ; 8
.eh_frame:0000000000008FDC                 db  44h ; D
.eh_frame:0000000000008FDD                 db  0Eh
.eh_frame:0000000000008FDE                 db  30h ; 0
.eh_frame:0000000000008FDF                 db  41h ; A
.eh_frame:0000000000008FE0                 db  0Eh
.eh_frame:0000000000008FE1                 db  28h ; (
.eh_frame:0000000000008FE2                 db  42h ; B
.eh_frame:0000000000008FE3                 db  0Eh
.eh_frame:0000000000008FE4                 db  20h
.eh_frame:0000000000008FE5                 db  42h ; B
.eh_frame:0000000000008FE6                 db  0Eh
.eh_frame:0000000000008FE7                 db  18h
.eh_frame:0000000000008FE8                 db  42h ; B
.eh_frame:0000000000008FE9                 db  0Eh
.eh_frame:0000000000008FEA                 db  10h
.eh_frame:0000000000008FEB                 db  42h ; B
.eh_frame:0000000000008FEC                 db  0Eh
.eh_frame:0000000000008FED                 db    8
.eh_frame:0000000000008FEE                 db  46h ; F
.eh_frame:0000000000008FEF                 db  0Bh
.eh_frame:0000000000008FF0                 db  28h ; (
.eh_frame:0000000000008FF1                 db    0
.eh_frame:0000000000008FF2                 db    0
.eh_frame:0000000000008FF3                 db    0
.eh_frame:0000000000008FF4                 db 0B4h
.eh_frame:0000000000008FF5                 db    4
.eh_frame:0000000000008FF6                 db    0
.eh_frame:0000000000008FF7                 db    0
.eh_frame:0000000000008FF8                 db  78h ; x
.eh_frame:0000000000008FF9                 db 0CDh
.eh_frame:0000000000008FFA                 db 0FFh
.eh_frame:0000000000008FFB                 db 0FFh
.eh_frame:0000000000008FFC                 db  36h ; 6
.eh_frame:0000000000008FFD                 db    0
.eh_frame:0000000000008FFE                 db    0
.eh_frame:0000000000008FFF                 db    0
.eh_frame:0000000000009000                 db    0
.eh_frame:0000000000009001                 db  42h ; B
.eh_frame:0000000000009002                 db  0Eh
.eh_frame:0000000000009003                 db  10h
.eh_frame:0000000000009004                 db  8Ch
.eh_frame:0000000000009005                 db    2
.eh_frame:0000000000009006                 db  41h ; A
.eh_frame:0000000000009007                 db  0Eh
.eh_frame:0000000000009008                 db  18h
.eh_frame:0000000000009009                 db  86h
.eh_frame:000000000000900A                 db    3
.eh_frame:000000000000900B                 db  41h ; A
.eh_frame:000000000000900C                 db  0Eh
.eh_frame:000000000000900D                 db  20h
.eh_frame:000000000000900E                 db  83h
.eh_frame:000000000000900F                 db    4
.eh_frame:0000000000009010                 db  6Eh ; n
.eh_frame:0000000000009011                 db  0Eh
.eh_frame:0000000000009012                 db  18h
.eh_frame:0000000000009013                 db  41h ; A
.eh_frame:0000000000009014                 db  0Eh
.eh_frame:0000000000009015                 db  10h
.eh_frame:0000000000009016                 db  42h ; B
.eh_frame:0000000000009017                 db  0Eh
.eh_frame:0000000000009018                 db    8
.eh_frame:0000000000009019                 db    0
.eh_frame:000000000000901A                 db    0
.eh_frame:000000000000901B                 db    0
.eh_frame:000000000000901C                 db  10h
.eh_frame:000000000000901D                 db    0
.eh_frame:000000000000901E                 db    0
.eh_frame:000000000000901F                 db    0
.eh_frame:0000000000009020                 db 0E0h
.eh_frame:0000000000009021                 db    4
.eh_frame:0000000000009022                 db    0
.eh_frame:0000000000009023                 db    0
.eh_frame:0000000000009024                 db  8Ch
.eh_frame:0000000000009025                 db 0CDh
.eh_frame:0000000000009026                 db 0FFh
.eh_frame:0000000000009027                 db 0FFh
.eh_frame:0000000000009028                 db  11h
.eh_frame:0000000000009029                 db    0
.eh_frame:000000000000902A                 db    0
.eh_frame:000000000000902B                 db    0
.eh_frame:000000000000902C                 db    0
.eh_frame:000000000000902D                 db    0
.eh_frame:000000000000902E                 db    0
.eh_frame:000000000000902F                 db    0
.eh_frame:0000000000009030                 db  10h
.eh_frame:0000000000009031                 db    0
.eh_frame:0000000000009032                 db    0
.eh_frame:0000000000009033                 db    0
.eh_frame:0000000000009034                 db 0F4h
.eh_frame:0000000000009035                 db    4
.eh_frame:0000000000009036                 db    0
.eh_frame:0000000000009037                 db    0
.eh_frame:0000000000009038                 db  98h
.eh_frame:0000000000009039                 db 0CDh
.eh_frame:000000000000903A                 db 0FFh
.eh_frame:000000000000903B                 db 0FFh
.eh_frame:000000000000903C                 db  11h
.eh_frame:000000000000903D                 db    0
.eh_frame:000000000000903E                 db    0
.eh_frame:000000000000903F                 db    0
.eh_frame:0000000000009040                 db    0
.eh_frame:0000000000009041                 db    0
.eh_frame:0000000000009042                 db    0
.eh_frame:0000000000009043                 db    0
.eh_frame:0000000000009044                 db  10h
.eh_frame:0000000000009045                 db    0
.eh_frame:0000000000009046                 db    0
.eh_frame:0000000000009047                 db    0
.eh_frame:0000000000009048                 db    8
.eh_frame:0000000000009049                 db    5
.eh_frame:000000000000904A                 db    0
.eh_frame:000000000000904B                 db    0
.eh_frame:000000000000904C                 db 0A4h
.eh_frame:000000000000904D                 db 0CDh
.eh_frame:000000000000904E                 db 0FFh
.eh_frame:000000000000904F                 db 0FFh
.eh_frame:0000000000009050                 db  35h ; 5
.eh_frame:0000000000009051                 db    0
.eh_frame:0000000000009052                 db    0
.eh_frame:0000000000009053                 db    0
.eh_frame:0000000000009054                 db    0
.eh_frame:0000000000009055                 db    0
.eh_frame:0000000000009056                 db    0
.eh_frame:0000000000009057                 db    0
.eh_frame:0000000000009058                 db  10h
.eh_frame:0000000000009059                 db    0
.eh_frame:000000000000905A                 db    0
.eh_frame:000000000000905B                 db    0
.eh_frame:000000000000905C                 db  1Ch
.eh_frame:000000000000905D                 db    5
.eh_frame:000000000000905E                 db    0
.eh_frame:000000000000905F                 db    0
.eh_frame:0000000000009060                 db 0D0h
.eh_frame:0000000000009061                 db 0CDh
.eh_frame:0000000000009062                 db 0FFh
.eh_frame:0000000000009063                 db 0FFh
.eh_frame:0000000000009064                 db  15h
.eh_frame:0000000000009065                 db    0
.eh_frame:0000000000009066                 db    0
.eh_frame:0000000000009067                 db    0
.eh_frame:0000000000009068                 db    0
.eh_frame:0000000000009069                 db    0
.eh_frame:000000000000906A                 db    0
.eh_frame:000000000000906B                 db    0
.eh_frame:000000000000906C                 db  10h
.eh_frame:000000000000906D                 db    0
.eh_frame:000000000000906E                 db    0
.eh_frame:000000000000906F                 db    0
.eh_frame:0000000000009070                 db  30h ; 0
.eh_frame:0000000000009071                 db    5
.eh_frame:0000000000009072                 db    0
.eh_frame:0000000000009073                 db    0
.eh_frame:0000000000009074                 db 0DCh
.eh_frame:0000000000009075                 db 0CDh
.eh_frame:0000000000009076                 db 0FFh
.eh_frame:0000000000009077                 db 0FFh
.eh_frame:0000000000009078                 db  30h ; 0
.eh_frame:0000000000009079                 db    0
.eh_frame:000000000000907A                 db    0
.eh_frame:000000000000907B                 db    0
.eh_frame:000000000000907C                 db    0
.eh_frame:000000000000907D                 db  6Bh ; k
.eh_frame:000000000000907E                 db  0Eh
.eh_frame:000000000000907F                 db  10h
.eh_frame:0000000000009080                 db  50h ; P
.eh_frame:0000000000009081                 db    0
.eh_frame:0000000000009082                 db    0
.eh_frame:0000000000009083                 db    0
.eh_frame:0000000000009084                 db  44h ; D
.eh_frame:0000000000009085                 db    5
.eh_frame:0000000000009086                 db    0
.eh_frame:0000000000009087                 db    0
.eh_frame:0000000000009088                 db 0F8h
.eh_frame:0000000000009089                 db 0CDh
.eh_frame:000000000000908A                 db 0FFh
.eh_frame:000000000000908B                 db 0FFh
.eh_frame:000000000000908C                 db  74h ; t
.eh_frame:000000000000908D                 db    0
.eh_frame:000000000000908E                 db    0
.eh_frame:000000000000908F                 db    0
.eh_frame:0000000000009090                 db    0
.eh_frame:0000000000009091                 db  42h ; B
.eh_frame:0000000000009092                 db  0Eh
.eh_frame:0000000000009093                 db  10h
.eh_frame:0000000000009094                 db  8Fh
.eh_frame:0000000000009095                 db    2
.eh_frame:0000000000009096                 db  42h ; B
.eh_frame:0000000000009097                 db  0Eh
.eh_frame:0000000000009098                 db  18h
.eh_frame:0000000000009099                 db  8Eh
.eh_frame:000000000000909A                 db    3
.eh_frame:000000000000909B                 db  49h ; I
.eh_frame:000000000000909C                 db  0Eh
.eh_frame:000000000000909D                 db  20h
.eh_frame:000000000000909E                 db  8Dh
.eh_frame:000000000000909F                 db    4
.eh_frame:00000000000090A0                 db  42h ; B
.eh_frame:00000000000090A1                 db  0Eh
.eh_frame:00000000000090A2                 db  28h ; (
.eh_frame:00000000000090A3                 db  8Ch
.eh_frame:00000000000090A4                 db    5
.eh_frame:00000000000090A5                 db  44h ; D
.eh_frame:00000000000090A6                 db  0Eh
.eh_frame:00000000000090A7                 db  30h ; 0
.eh_frame:00000000000090A8                 db  86h
.eh_frame:00000000000090A9                 db    6
.eh_frame:00000000000090AA                 db  41h ; A
.eh_frame:00000000000090AB                 db  0Eh
.eh_frame:00000000000090AC                 db  38h ; 8
.eh_frame:00000000000090AD                 db  83h
.eh_frame:00000000000090AE                 db    7
.eh_frame:00000000000090AF                 db  4Dh ; M
.eh_frame:00000000000090B0                 db  0Eh
.eh_frame:00000000000090B1                 db  50h ; P
.eh_frame:00000000000090B2                 db  5Fh ; _
.eh_frame:00000000000090B3                 db  0Eh
.eh_frame:00000000000090B4                 db  58h ; X
.eh_frame:00000000000090B5                 db  47h ; G
.eh_frame:00000000000090B6                 db  0Eh
.eh_frame:00000000000090B7                 db  60h ; `
.eh_frame:00000000000090B8                 db  46h ; F
.eh_frame:00000000000090B9                 db  0Eh
.eh_frame:00000000000090BA                 db  68h ; h
.eh_frame:00000000000090BB                 db  44h ; D
.eh_frame:00000000000090BC                 db  0Eh
.eh_frame:00000000000090BD                 db  70h ; p
.eh_frame:00000000000090BE                 db  58h ; X
.eh_frame:00000000000090BF                 db  0Eh
.eh_frame:00000000000090C0                 db  38h ; 8
.eh_frame:00000000000090C1                 db  41h ; A
.eh_frame:00000000000090C2                 db  0Eh
.eh_frame:00000000000090C3                 db  30h ; 0
.eh_frame:00000000000090C4                 db  41h ; A
.eh_frame:00000000000090C5                 db  0Eh
.eh_frame:00000000000090C6                 db  28h ; (
.eh_frame:00000000000090C7                 db  42h ; B
.eh_frame:00000000000090C8                 db  0Eh
.eh_frame:00000000000090C9                 db  20h
.eh_frame:00000000000090CA                 db  42h ; B
.eh_frame:00000000000090CB                 db  0Eh
.eh_frame:00000000000090CC                 db  18h
.eh_frame:00000000000090CD                 db  42h ; B
.eh_frame:00000000000090CE                 db  0Eh
.eh_frame:00000000000090CF                 db  10h
.eh_frame:00000000000090D0                 db  42h ; B
.eh_frame:00000000000090D1                 db  0Eh
.eh_frame:00000000000090D2                 db    8
.eh_frame:00000000000090D3                 db    0
.eh_frame:00000000000090D4                 db  68h ; h
.eh_frame:00000000000090D5                 db    0
.eh_frame:00000000000090D6                 db    0
.eh_frame:00000000000090D7                 db    0
.eh_frame:00000000000090D8                 db  98h
.eh_frame:00000000000090D9                 db    5
.eh_frame:00000000000090DA                 db    0
.eh_frame:00000000000090DB                 db    0
.eh_frame:00000000000090DC                 db  24h ; $
.eh_frame:00000000000090DD                 db 0CEh
.eh_frame:00000000000090DE                 db 0FFh
.eh_frame:00000000000090DF                 db 0FFh
.eh_frame:00000000000090E0                 db 0E3h
.eh_frame:00000000000090E1                 db    0
.eh_frame:00000000000090E2                 db    0
.eh_frame:00000000000090E3                 db    0
.eh_frame:00000000000090E4                 db    0
.eh_frame:00000000000090E5                 db  42h ; B
.eh_frame:00000000000090E6                 db  0Eh
.eh_frame:00000000000090E7                 db  10h
.eh_frame:00000000000090E8                 db  8Fh
.eh_frame:00000000000090E9                 db    2
.eh_frame:00000000000090EA                 db  42h ; B
.eh_frame:00000000000090EB                 db  0Eh
.eh_frame:00000000000090EC                 db  18h
.eh_frame:00000000000090ED                 db  8Eh
.eh_frame:00000000000090EE                 db    3
.eh_frame:00000000000090EF                 db  49h ; I
.eh_frame:00000000000090F0                 db  0Eh
.eh_frame:00000000000090F1                 db  20h
.eh_frame:00000000000090F2                 db  8Dh
.eh_frame:00000000000090F3                 db    4
.eh_frame:00000000000090F4                 db  42h ; B
.eh_frame:00000000000090F5                 db  0Eh
.eh_frame:00000000000090F6                 db  28h ; (
.eh_frame:00000000000090F7                 db  8Ch
.eh_frame:00000000000090F8                 db    5
.eh_frame:00000000000090F9                 db  44h ; D
.eh_frame:00000000000090FA                 db  0Eh
.eh_frame:00000000000090FB                 db  30h ; 0
.eh_frame:00000000000090FC                 db  86h
.eh_frame:00000000000090FD                 db    6
.eh_frame:00000000000090FE                 db  41h ; A
.eh_frame:00000000000090FF                 db  0Eh
.eh_frame:0000000000009100                 db  38h ; 8
.eh_frame:0000000000009101                 db  83h
.eh_frame:0000000000009102                 db    7
.eh_frame:0000000000009103                 db  4Dh ; M
.eh_frame:0000000000009104                 db  0Eh
.eh_frame:0000000000009105                 db  70h ; p
.eh_frame:0000000000009106                 db  65h ; e
.eh_frame:0000000000009107                 db  0Eh
.eh_frame:0000000000009108                 db  78h ; x
.eh_frame:0000000000009109                 db  4Dh ; M
.eh_frame:000000000000910A                 db  0Eh
.eh_frame:000000000000910B                 db  80h
.eh_frame:000000000000910C                 db    1
.eh_frame:000000000000910D                 db  46h ; F
.eh_frame:000000000000910E                 db  0Eh
.eh_frame:000000000000910F                 db  88h
.eh_frame:0000000000009110                 db    1
.eh_frame:0000000000009111                 db  42h ; B
.eh_frame:0000000000009112                 db  0Eh
.eh_frame:0000000000009113                 db  90h
.eh_frame:0000000000009114                 db    1
.eh_frame:0000000000009115                 db  5Eh ; ^
.eh_frame:0000000000009116                 db  0Eh
.eh_frame:0000000000009117                 db  70h ; p
.eh_frame:0000000000009118                 db  56h ; V
.eh_frame:0000000000009119                 db  0Eh
.eh_frame:000000000000911A                 db  78h ; x
.eh_frame:000000000000911B                 db  43h ; C
.eh_frame:000000000000911C                 db  0Eh
.eh_frame:000000000000911D                 db  80h
.eh_frame:000000000000911E                 db    1
.eh_frame:000000000000911F                 db  43h ; C
.eh_frame:0000000000009120                 db  0Eh
.eh_frame:0000000000009121                 db  88h
.eh_frame:0000000000009122                 db    1
.eh_frame:0000000000009123                 db  56h ; V
.eh_frame:0000000000009124                 db  0Eh
.eh_frame:0000000000009125                 db  90h
.eh_frame:0000000000009126                 db    1
.eh_frame:0000000000009127                 db  52h ; R
.eh_frame:0000000000009128                 db  0Eh
.eh_frame:0000000000009129                 db  70h ; p
.eh_frame:000000000000912A                 db  5Bh ; [
.eh_frame:000000000000912B                 db  0Eh
.eh_frame:000000000000912C                 db  38h ; 8
.eh_frame:000000000000912D                 db  41h ; A
.eh_frame:000000000000912E                 db  0Eh
.eh_frame:000000000000912F                 db  30h ; 0
.eh_frame:0000000000009130                 db  41h ; A
.eh_frame:0000000000009131                 db  0Eh
.eh_frame:0000000000009132                 db  28h ; (
.eh_frame:0000000000009133                 db  42h ; B
.eh_frame:0000000000009134                 db  0Eh
.eh_frame:0000000000009135                 db  20h
.eh_frame:0000000000009136                 db  42h ; B
.eh_frame:0000000000009137                 db  0Eh
.eh_frame:0000000000009138                 db  18h
.eh_frame:0000000000009139                 db  42h ; B
.eh_frame:000000000000913A                 db  0Eh
.eh_frame:000000000000913B                 db  10h
.eh_frame:000000000000913C                 db  42h ; B
.eh_frame:000000000000913D                 db  0Eh
.eh_frame:000000000000913E                 db    8
.eh_frame:000000000000913F                 db    0
.eh_frame:0000000000009140                 db  10h
.eh_frame:0000000000009141                 db    0
.eh_frame:0000000000009142                 db    0
.eh_frame:0000000000009143                 db    0
.eh_frame:0000000000009144                 db    4
.eh_frame:0000000000009145                 db    6
.eh_frame:0000000000009146                 db    0
.eh_frame:0000000000009147                 db    0
.eh_frame:0000000000009148                 db 0A8h
.eh_frame:0000000000009149                 db 0CEh
.eh_frame:000000000000914A                 db 0FFh
.eh_frame:000000000000914B                 db 0FFh
.eh_frame:000000000000914C                 db  0Ah
.eh_frame:000000000000914D                 db    0
.eh_frame:000000000000914E                 db    0
.eh_frame:000000000000914F                 db    0
.eh_frame:0000000000009150                 db    0
.eh_frame:0000000000009151                 db    0
.eh_frame:0000000000009152                 db    0
.eh_frame:0000000000009153                 db    0
.eh_frame:0000000000009154                 db  28h ; (
.eh_frame:0000000000009155                 db    0
.eh_frame:0000000000009156                 db    0
.eh_frame:0000000000009157                 db    0
.eh_frame:0000000000009158                 db  18h
.eh_frame:0000000000009159                 db    6
.eh_frame:000000000000915A                 db    0
.eh_frame:000000000000915B                 db    0
.eh_frame:000000000000915C                 db 0A4h
.eh_frame:000000000000915D                 db 0CEh
.eh_frame:000000000000915E                 db 0FFh
.eh_frame:000000000000915F                 db 0FFh
.eh_frame:0000000000009160                 db  93h
.eh_frame:0000000000009161                 db    0
.eh_frame:0000000000009162                 db    0
.eh_frame:0000000000009163                 db    0
.eh_frame:0000000000009164                 db    0
.eh_frame:0000000000009165                 db  48h ; H
.eh_frame:0000000000009166                 db  0Eh
.eh_frame:0000000000009167                 db  10h
.eh_frame:0000000000009168                 db  8Ch
.eh_frame:0000000000009169                 db    2
.eh_frame:000000000000916A                 db  48h ; H
.eh_frame:000000000000916B                 db  0Eh
.eh_frame:000000000000916C                 db  18h
.eh_frame:000000000000916D                 db  86h
.eh_frame:000000000000916E                 db    3
.eh_frame:000000000000916F                 db  41h ; A
.eh_frame:0000000000009170                 db  0Eh
.eh_frame:0000000000009171                 db  20h
.eh_frame:0000000000009172                 db  83h
.eh_frame:0000000000009173                 db    4
.eh_frame:0000000000009174                 db    2
.eh_frame:0000000000009175                 db  74h ; t
.eh_frame:0000000000009176                 db  0Eh
.eh_frame:0000000000009177                 db  18h
.eh_frame:0000000000009178                 db  4Bh ; K
.eh_frame:0000000000009179                 db  0Eh
.eh_frame:000000000000917A                 db  10h
.eh_frame:000000000000917B                 db  42h ; B
.eh_frame:000000000000917C                 db  0Eh
.eh_frame:000000000000917D                 db    8
.eh_frame:000000000000917E                 db    0
.eh_frame:000000000000917F                 db    0
.eh_frame:0000000000009180                 db  10h
.eh_frame:0000000000009181                 db    0
.eh_frame:0000000000009182                 db    0
.eh_frame:0000000000009183                 db    0
.eh_frame:0000000000009184                 db  44h ; D
.eh_frame:0000000000009185                 db    6
.eh_frame:0000000000009186                 db    0
.eh_frame:0000000000009187                 db    0
.eh_frame:0000000000009188                 db  18h
.eh_frame:0000000000009189                 db 0CFh
.eh_frame:000000000000918A                 db 0FFh
.eh_frame:000000000000918B                 db 0FFh
.eh_frame:000000000000918C                 db  13h
.eh_frame:000000000000918D                 db    0
.eh_frame:000000000000918E                 db    0
.eh_frame:000000000000918F                 db    0
.eh_frame:0000000000009190                 db    0
.eh_frame:0000000000009191                 db    0
.eh_frame:0000000000009192                 db    0
.eh_frame:0000000000009193                 db    0
.eh_frame:0000000000009194                 db  10h
.eh_frame:0000000000009195                 db    0
.eh_frame:0000000000009196                 db    0
.eh_frame:0000000000009197                 db    0
.eh_frame:0000000000009198                 db  58h ; X
.eh_frame:0000000000009199                 db    6
.eh_frame:000000000000919A                 db    0
.eh_frame:000000000000919B                 db    0
.eh_frame:000000000000919C                 db  24h ; $
.eh_frame:000000000000919D                 db 0CFh
.eh_frame:000000000000919E                 db 0FFh
.eh_frame:000000000000919F                 db 0FFh
.eh_frame:00000000000091A0                 db  0Ch
.eh_frame:00000000000091A1                 db    0
.eh_frame:00000000000091A2                 db    0
.eh_frame:00000000000091A3                 db    0
.eh_frame:00000000000091A4                 db    0
.eh_frame:00000000000091A5                 db    0
.eh_frame:00000000000091A6                 db    0
.eh_frame:00000000000091A7                 db    0
.eh_frame:00000000000091A8                 db  10h
.eh_frame:00000000000091A9                 db    0
.eh_frame:00000000000091AA                 db    0
.eh_frame:00000000000091AB                 db    0
.eh_frame:00000000000091AC                 db  6Ch ; l
.eh_frame:00000000000091AD                 db    6
.eh_frame:00000000000091AE                 db    0
.eh_frame:00000000000091AF                 db    0
.eh_frame:00000000000091B0                 db  20h
.eh_frame:00000000000091B1                 db 0CFh
.eh_frame:00000000000091B2                 db 0FFh
.eh_frame:00000000000091B3                 db 0FFh
.eh_frame:00000000000091B4                 db  18h
.eh_frame:00000000000091B5                 db    0
.eh_frame:00000000000091B6                 db    0
.eh_frame:00000000000091B7                 db    0
.eh_frame:00000000000091B8                 db    0
.eh_frame:00000000000091B9                 db    0
.eh_frame:00000000000091BA                 db    0
.eh_frame:00000000000091BB                 db    0
.eh_frame:00000000000091BC                 db  10h
.eh_frame:00000000000091BD                 db    0
.eh_frame:00000000000091BE                 db    0
.eh_frame:00000000000091BF                 db    0
.eh_frame:00000000000091C0                 db  80h
.eh_frame:00000000000091C1                 db    6
.eh_frame:00000000000091C2                 db    0
.eh_frame:00000000000091C3                 db    0
.eh_frame:00000000000091C4                 db  2Ch ; ,
.eh_frame:00000000000091C5                 db 0CFh
.eh_frame:00000000000091C6                 db 0FFh
.eh_frame:00000000000091C7                 db 0FFh
.eh_frame:00000000000091C8                 db  14h
.eh_frame:00000000000091C9                 db    0
.eh_frame:00000000000091CA                 db    0
.eh_frame:00000000000091CB                 db    0
.eh_frame:00000000000091CC                 db    0
.eh_frame:00000000000091CD                 db    0
.eh_frame:00000000000091CE                 db    0
.eh_frame:00000000000091CF                 db    0
.eh_frame:00000000000091D0                 db  18h
.eh_frame:00000000000091D1                 db    0
.eh_frame:00000000000091D2                 db    0
.eh_frame:00000000000091D3                 db    0
.eh_frame:00000000000091D4                 db  94h
.eh_frame:00000000000091D5                 db    6
.eh_frame:00000000000091D6                 db    0
.eh_frame:00000000000091D7                 db    0
.eh_frame:00000000000091D8                 db  38h ; 8
.eh_frame:00000000000091D9                 db 0CFh
.eh_frame:00000000000091DA                 db 0FFh
.eh_frame:00000000000091DB                 db 0FFh
.eh_frame:00000000000091DC                 db  8Eh
.eh_frame:00000000000091DD                 db    0
.eh_frame:00000000000091DE                 db    0
.eh_frame:00000000000091DF                 db    0
.eh_frame:00000000000091E0                 db    0
.eh_frame:00000000000091E1                 db  44h ; D
.eh_frame:00000000000091E2                 db  0Eh
.eh_frame:00000000000091E3                 db  50h ; P
.eh_frame:00000000000091E4                 db    2
.eh_frame:00000000000091E5                 db  7Fh ; 
.eh_frame:00000000000091E6                 db  0Ah
.eh_frame:00000000000091E7                 db  0Eh
.eh_frame:00000000000091E8                 db    8
.eh_frame:00000000000091E9                 db  41h ; A
.eh_frame:00000000000091EA                 db  0Bh
.eh_frame:00000000000091EB                 db    0
.eh_frame:00000000000091EC                 db  18h
.eh_frame:00000000000091ED                 db    0
.eh_frame:00000000000091EE                 db    0
.eh_frame:00000000000091EF                 db    0
.eh_frame:00000000000091F0                 db 0B0h
.eh_frame:00000000000091F1                 db    6
.eh_frame:00000000000091F2                 db    0
.eh_frame:00000000000091F3                 db    0
.eh_frame:00000000000091F4                 db 0ACh
.eh_frame:00000000000091F5                 db 0CFh
.eh_frame:00000000000091F6                 db 0FFh
.eh_frame:00000000000091F7                 db 0FFh
.eh_frame:00000000000091F8                 db  8Ah
.eh_frame:00000000000091F9                 db    0
.eh_frame:00000000000091FA                 db    0
.eh_frame:00000000000091FB                 db    0
.eh_frame:00000000000091FC                 db    0
.eh_frame:00000000000091FD                 db  44h ; D
.eh_frame:00000000000091FE                 db  0Eh
.eh_frame:00000000000091FF                 db  50h ; P
.eh_frame:0000000000009200                 db    2
.eh_frame:0000000000009201                 db  7Bh ; {
.eh_frame:0000000000009202                 db  0Ah
.eh_frame:0000000000009203                 db  0Eh
.eh_frame:0000000000009204                 db    8
.eh_frame:0000000000009205                 db  41h ; A
.eh_frame:0000000000009206                 db  0Bh
.eh_frame:0000000000009207                 db    0
.eh_frame:0000000000009208                 db  10h
.eh_frame:0000000000009209                 db    0
.eh_frame:000000000000920A                 db    0
.eh_frame:000000000000920B                 db    0
.eh_frame:000000000000920C                 db 0CCh
.eh_frame:000000000000920D                 db    6
.eh_frame:000000000000920E                 db    0
.eh_frame:000000000000920F                 db    0
.eh_frame:0000000000009210                 db  20h
.eh_frame:0000000000009211                 db 0D0h
.eh_frame:0000000000009212                 db 0FFh
.eh_frame:0000000000009213                 db 0FFh
.eh_frame:0000000000009214                 db  0Ch
.eh_frame:0000000000009215                 db    0
.eh_frame:0000000000009216                 db    0
.eh_frame:0000000000009217                 db    0
.eh_frame:0000000000009218                 db    0
.eh_frame:0000000000009219                 db    0
.eh_frame:000000000000921A                 db    0
.eh_frame:000000000000921B                 db    0
.eh_frame:000000000000921C                 db  10h
.eh_frame:000000000000921D                 db    0
.eh_frame:000000000000921E                 db    0
.eh_frame:000000000000921F                 db    0
.eh_frame:0000000000009220                 db 0E0h
.eh_frame:0000000000009221                 db    6
.eh_frame:0000000000009222                 db    0
.eh_frame:0000000000009223                 db    0
.eh_frame:0000000000009224                 db  1Ch
.eh_frame:0000000000009225                 db 0D0h
.eh_frame:0000000000009226                 db 0FFh
.eh_frame:0000000000009227                 db 0FFh
.eh_frame:0000000000009228                 db  0Fh
.eh_frame:0000000000009229                 db    0
.eh_frame:000000000000922A                 db    0
.eh_frame:000000000000922B                 db    0
.eh_frame:000000000000922C                 db    0
.eh_frame:000000000000922D                 db    0
.eh_frame:000000000000922E                 db    0
.eh_frame:000000000000922F                 db    0
.eh_frame:0000000000009230                 db  18h
.eh_frame:0000000000009231                 db    0
.eh_frame:0000000000009232                 db    0
.eh_frame:0000000000009233                 db    0
.eh_frame:0000000000009234                 db 0F4h
.eh_frame:0000000000009235                 db    6
.eh_frame:0000000000009236                 db    0
.eh_frame:0000000000009237                 db    0
.eh_frame:0000000000009238                 db  18h
.eh_frame:0000000000009239                 db 0D0h
.eh_frame:000000000000923A                 db 0FFh
.eh_frame:000000000000923B                 db 0FFh
.eh_frame:000000000000923C                 db  98h
.eh_frame:000000000000923D                 db    0
.eh_frame:000000000000923E                 db    0
.eh_frame:000000000000923F                 db    0
.eh_frame:0000000000009240                 db    0
.eh_frame:0000000000009241                 db  44h ; D
.eh_frame:0000000000009242                 db  0Eh
.eh_frame:0000000000009243                 db  50h ; P
.eh_frame:0000000000009244                 db    2
.eh_frame:0000000000009245                 db  8Eh
.eh_frame:0000000000009246                 db  0Ah
.eh_frame:0000000000009247                 db  0Eh
.eh_frame:0000000000009248                 db    8
.eh_frame:0000000000009249                 db  41h ; A
.eh_frame:000000000000924A                 db  0Bh
.eh_frame:000000000000924B                 db    0
.eh_frame:000000000000924C                 db  10h
.eh_frame:000000000000924D                 db    0
.eh_frame:000000000000924E                 db    0
.eh_frame:000000000000924F                 db    0
.eh_frame:0000000000009250                 db  10h
.eh_frame:0000000000009251                 db    7
.eh_frame:0000000000009252                 db    0
.eh_frame:0000000000009253                 db    0
.eh_frame:0000000000009254                 db  9Ch
.eh_frame:0000000000009255                 db 0D0h
.eh_frame:0000000000009256                 db 0FFh
.eh_frame:0000000000009257                 db 0FFh
.eh_frame:0000000000009258                 db  10h
.eh_frame:0000000000009259                 db    0
.eh_frame:000000000000925A                 db    0
.eh_frame:000000000000925B                 db    0
.eh_frame:000000000000925C                 db    0
.eh_frame:000000000000925D                 db    0
.eh_frame:000000000000925E                 db    0
.eh_frame:000000000000925F                 db    0
.eh_frame:0000000000009260                 db  10h
.eh_frame:0000000000009261                 db    0
.eh_frame:0000000000009262                 db    0
.eh_frame:0000000000009263                 db    0
.eh_frame:0000000000009264                 db  24h ; $
.eh_frame:0000000000009265                 db    7
.eh_frame:0000000000009266                 db    0
.eh_frame:0000000000009267                 db    0
.eh_frame:0000000000009268                 db  98h
.eh_frame:0000000000009269                 db 0D0h
.eh_frame:000000000000926A                 db 0FFh
.eh_frame:000000000000926B                 db 0FFh
.eh_frame:000000000000926C                 db  11h
.eh_frame:000000000000926D                 db    0
.eh_frame:000000000000926E                 db    0
.eh_frame:000000000000926F                 db    0
.eh_frame:0000000000009270                 db    0
.eh_frame:0000000000009271                 db    0
.eh_frame:0000000000009272                 db    0
.eh_frame:0000000000009273                 db    0
.eh_frame:0000000000009274                 db  10h
.eh_frame:0000000000009275                 db    0
.eh_frame:0000000000009276                 db    0
.eh_frame:0000000000009277                 db    0
.eh_frame:0000000000009278                 db  38h ; 8
.eh_frame:0000000000009279                 db    7
.eh_frame:000000000000927A                 db    0
.eh_frame:000000000000927B                 db    0
.eh_frame:000000000000927C                 db 0A4h
.eh_frame:000000000000927D                 db 0D0h
.eh_frame:000000000000927E                 db 0FFh
.eh_frame:000000000000927F                 db 0FFh
.eh_frame:0000000000009280                 db  0Ah
.eh_frame:0000000000009281                 db    0
.eh_frame:0000000000009282                 db    0
.eh_frame:0000000000009283                 db    0
.eh_frame:0000000000009284                 db    0
.eh_frame:0000000000009285                 db    0
.eh_frame:0000000000009286                 db    0
.eh_frame:0000000000009287                 db    0
.eh_frame:0000000000009288                 db  18h
.eh_frame:0000000000009289                 db    0
.eh_frame:000000000000928A                 db    0
.eh_frame:000000000000928B                 db    0
.eh_frame:000000000000928C                 db  4Ch ; L
.eh_frame:000000000000928D                 db    7
.eh_frame:000000000000928E                 db    0
.eh_frame:000000000000928F                 db    0
.eh_frame:0000000000009290                 db 0A0h
.eh_frame:0000000000009291                 db 0D0h
.eh_frame:0000000000009292                 db 0FFh
.eh_frame:0000000000009293                 db 0FFh
.eh_frame:0000000000009294                 db  8Eh
.eh_frame:0000000000009295                 db    0
.eh_frame:0000000000009296                 db    0
.eh_frame:0000000000009297                 db    0
.eh_frame:0000000000009298                 db    0
.eh_frame:0000000000009299                 db  44h ; D
.eh_frame:000000000000929A                 db  0Eh
.eh_frame:000000000000929B                 db  50h ; P
.eh_frame:000000000000929C                 db    2
.eh_frame:000000000000929D                 db  7Fh ; 
.eh_frame:000000000000929E                 db  0Ah
.eh_frame:000000000000929F                 db  0Eh
.eh_frame:00000000000092A0                 db    8
.eh_frame:00000000000092A1                 db  41h ; A
.eh_frame:00000000000092A2                 db  0Bh
.eh_frame:00000000000092A3                 db    0
.eh_frame:00000000000092A4                 db  18h
.eh_frame:00000000000092A5                 db    0
.eh_frame:00000000000092A6                 db    0
.eh_frame:00000000000092A7                 db    0
.eh_frame:00000000000092A8                 db  68h ; h
.eh_frame:00000000000092A9                 db    7
.eh_frame:00000000000092AA                 db    0
.eh_frame:00000000000092AB                 db    0
.eh_frame:00000000000092AC                 db  14h
.eh_frame:00000000000092AD                 db 0D1h
.eh_frame:00000000000092AE                 db 0FFh
.eh_frame:00000000000092AF                 db 0FFh
.eh_frame:00000000000092B0                 db  91h
.eh_frame:00000000000092B1                 db    0
.eh_frame:00000000000092B2                 db    0
.eh_frame:00000000000092B3                 db    0
.eh_frame:00000000000092B4                 db    0
.eh_frame:00000000000092B5                 db  44h ; D
.eh_frame:00000000000092B6                 db  0Eh
.eh_frame:00000000000092B7                 db  50h ; P
.eh_frame:00000000000092B8                 db    2
.eh_frame:00000000000092B9                 db  82h
.eh_frame:00000000000092BA                 db  0Ah
.eh_frame:00000000000092BB                 db  0Eh
.eh_frame:00000000000092BC                 db    8
.eh_frame:00000000000092BD                 db  41h ; A
.eh_frame:00000000000092BE                 db  0Bh
.eh_frame:00000000000092BF                 db    0
.eh_frame:00000000000092C0                 db  10h
.eh_frame:00000000000092C1                 db    0
.eh_frame:00000000000092C2                 db    0
.eh_frame:00000000000092C3                 db    0
.eh_frame:00000000000092C4                 db  84h
.eh_frame:00000000000092C5                 db    7
.eh_frame:00000000000092C6                 db    0
.eh_frame:00000000000092C7                 db    0
.eh_frame:00000000000092C8                 db  98h
.eh_frame:00000000000092C9                 db 0D1h
.eh_frame:00000000000092CA                 db 0FFh
.eh_frame:00000000000092CB                 db 0FFh
.eh_frame:00000000000092CC                 db  0Ch
.eh_frame:00000000000092CD                 db    0
.eh_frame:00000000000092CE                 db    0
.eh_frame:00000000000092CF                 db    0
.eh_frame:00000000000092D0                 db    0
.eh_frame:00000000000092D1                 db    0
.eh_frame:00000000000092D2                 db    0
.eh_frame:00000000000092D3                 db    0
.eh_frame:00000000000092D4                 db  10h
.eh_frame:00000000000092D5                 db    0
.eh_frame:00000000000092D6                 db    0
.eh_frame:00000000000092D7                 db    0
.eh_frame:00000000000092D8                 db  98h
.eh_frame:00000000000092D9                 db    7
.eh_frame:00000000000092DA                 db    0
.eh_frame:00000000000092DB                 db    0
.eh_frame:00000000000092DC                 db  94h
.eh_frame:00000000000092DD                 db 0D1h
.eh_frame:00000000000092DE                 db 0FFh
.eh_frame:00000000000092DF                 db 0FFh
.eh_frame:00000000000092E0                 db  17h
.eh_frame:00000000000092E1                 db    0
.eh_frame:00000000000092E2                 db    0
.eh_frame:00000000000092E3                 db    0
.eh_frame:00000000000092E4                 db    0
.eh_frame:00000000000092E5                 db    0
.eh_frame:00000000000092E6                 db    0
.eh_frame:00000000000092E7                 db    0
.eh_frame:00000000000092E8                 db  10h
.eh_frame:00000000000092E9                 db    0
.eh_frame:00000000000092EA                 db    0
.eh_frame:00000000000092EB                 db    0
.eh_frame:00000000000092EC                 db 0ACh
.eh_frame:00000000000092ED                 db    7
.eh_frame:00000000000092EE                 db    0
.eh_frame:00000000000092EF                 db    0
.eh_frame:00000000000092F0                 db 0A0h
.eh_frame:00000000000092F1                 db 0D1h
.eh_frame:00000000000092F2                 db 0FFh
.eh_frame:00000000000092F3                 db 0FFh
.eh_frame:00000000000092F4                 db  13h
.eh_frame:00000000000092F5                 db    0
.eh_frame:00000000000092F6                 db    0
.eh_frame:00000000000092F7                 db    0
.eh_frame:00000000000092F8                 db    0
.eh_frame:00000000000092F9                 db    0
.eh_frame:00000000000092FA                 db    0
.eh_frame:00000000000092FB                 db    0
.eh_frame:00000000000092FC                 db  10h
.eh_frame:00000000000092FD                 db    0
.eh_frame:00000000000092FE                 db    0
.eh_frame:00000000000092FF                 db    0
.eh_frame:0000000000009300                 db 0C0h
.eh_frame:0000000000009301                 db    7
.eh_frame:0000000000009302                 db    0
.eh_frame:0000000000009303                 db    0
.eh_frame:0000000000009304                 db 0ACh
.eh_frame:0000000000009305                 db 0D1h
.eh_frame:0000000000009306                 db 0FFh
.eh_frame:0000000000009307                 db 0FFh
.eh_frame:0000000000009308                 db  0Ch
.eh_frame:0000000000009309                 db    0
.eh_frame:000000000000930A                 db    0
.eh_frame:000000000000930B                 db    0
.eh_frame:000000000000930C                 db    0
.eh_frame:000000000000930D                 db    0
.eh_frame:000000000000930E                 db    0
.eh_frame:000000000000930F                 db    0
.eh_frame:0000000000009310                 db  10h
.eh_frame:0000000000009311                 db    0
.eh_frame:0000000000009312                 db    0
.eh_frame:0000000000009313                 db    0
.eh_frame:0000000000009314                 db 0D4h
.eh_frame:0000000000009315                 db    7
.eh_frame:0000000000009316                 db    0
.eh_frame:0000000000009317                 db    0
.eh_frame:0000000000009318                 db 0A8h
.eh_frame:0000000000009319                 db 0D1h
.eh_frame:000000000000931A                 db 0FFh
.eh_frame:000000000000931B                 db 0FFh
.eh_frame:000000000000931C                 db  14h
.eh_frame:000000000000931D                 db    0
.eh_frame:000000000000931E                 db    0
.eh_frame:000000000000931F                 db    0
.eh_frame:0000000000009320                 db    0
.eh_frame:0000000000009321                 db    0
.eh_frame:0000000000009322                 db    0
.eh_frame:0000000000009323                 db    0
.eh_frame:0000000000009324                 db  10h
.eh_frame:0000000000009325                 db    0
.eh_frame:0000000000009326                 db    0
.eh_frame:0000000000009327                 db    0
.eh_frame:0000000000009328                 db 0E8h
.eh_frame:0000000000009329                 db    7
.eh_frame:000000000000932A                 db    0
.eh_frame:000000000000932B                 db    0
.eh_frame:000000000000932C                 db 0B4h
.eh_frame:000000000000932D                 db 0D1h
.eh_frame:000000000000932E                 db 0FFh
.eh_frame:000000000000932F                 db 0FFh
.eh_frame:0000000000009330                 db  13h
.eh_frame:0000000000009331                 db    0
.eh_frame:0000000000009332                 db    0
.eh_frame:0000000000009333                 db    0
.eh_frame:0000000000009334                 db    0
.eh_frame:0000000000009335                 db    0
.eh_frame:0000000000009336                 db    0
.eh_frame:0000000000009337                 db    0
.eh_frame:0000000000009338                 db  14h
.eh_frame:0000000000009339                 db    0
.eh_frame:000000000000933A                 db    0
.eh_frame:000000000000933B                 db    0
.eh_frame:000000000000933C                 db 0FCh
.eh_frame:000000000000933D                 db    7
.eh_frame:000000000000933E                 db    0
.eh_frame:000000000000933F                 db    0
.eh_frame:0000000000009340                 db 0C0h
.eh_frame:0000000000009341                 db 0D1h
.eh_frame:0000000000009342                 db 0FFh
.eh_frame:0000000000009343                 db 0FFh
.eh_frame:0000000000009344                 db  18h
.eh_frame:0000000000009345                 db    0
.eh_frame:0000000000009346                 db    0
.eh_frame:0000000000009347                 db    0
.eh_frame:0000000000009348                 db    0
.eh_frame:0000000000009349                 db    0
.eh_frame:000000000000934A                 db    0
.eh_frame:000000000000934B                 db    0
.eh_frame:000000000000934C                 db    0
.eh_frame:000000000000934D                 db    0
.eh_frame:000000000000934E                 db    0
.eh_frame:000000000000934F                 db    0
.eh_frame:0000000000009350                 db  10h
.eh_frame:0000000000009351                 db    1
.eh_frame:0000000000009352                 db    0
.eh_frame:0000000000009353                 db    0
.eh_frame:0000000000009354                 db  14h
.eh_frame:0000000000009355                 db    8
.eh_frame:0000000000009356                 db    0
.eh_frame:0000000000009357                 db    0
.eh_frame:0000000000009358                 db 0C8h
.eh_frame:0000000000009359                 db 0D1h
.eh_frame:000000000000935A                 db 0FFh
.eh_frame:000000000000935B                 db 0FFh
.eh_frame:000000000000935C                 db  17h
.eh_frame:000000000000935D                 db    4
.eh_frame:000000000000935E                 db    0
.eh_frame:000000000000935F                 db    0
.eh_frame:0000000000009360                 db    0
.eh_frame:0000000000009361                 db  42h ; B
.eh_frame:0000000000009362                 db  0Eh
.eh_frame:0000000000009363                 db  10h
.eh_frame:0000000000009364                 db  8Fh
.eh_frame:0000000000009365                 db    2
.eh_frame:0000000000009366                 db  42h ; B
.eh_frame:0000000000009367                 db  0Eh
.eh_frame:0000000000009368                 db  18h
.eh_frame:0000000000009369                 db  8Eh
.eh_frame:000000000000936A                 db    3
.eh_frame:000000000000936B                 db  42h ; B
.eh_frame:000000000000936C                 db  0Eh
.eh_frame:000000000000936D                 db  20h
.eh_frame:000000000000936E                 db  8Dh
.eh_frame:000000000000936F                 db    4
.eh_frame:0000000000009370                 db  42h ; B
.eh_frame:0000000000009371                 db  0Eh
.eh_frame:0000000000009372                 db  28h ; (
.eh_frame:0000000000009373                 db  8Ch
.eh_frame:0000000000009374                 db    5
.eh_frame:0000000000009375                 db  44h ; D
.eh_frame:0000000000009376                 db  0Eh
.eh_frame:0000000000009377                 db  30h ; 0
.eh_frame:0000000000009378                 db  86h
.eh_frame:0000000000009379                 db    6
.eh_frame:000000000000937A                 db  41h ; A
.eh_frame:000000000000937B                 db  0Eh
.eh_frame:000000000000937C                 db  38h ; 8
.eh_frame:000000000000937D                 db  83h
.eh_frame:000000000000937E                 db    7
.eh_frame:000000000000937F                 db  4Ah ; J
.eh_frame:0000000000009380                 db  0Eh
.eh_frame:0000000000009381                 db  60h ; `
.eh_frame:0000000000009382                 db    2
.eh_frame:0000000000009383                 db 0DDh
.eh_frame:0000000000009384                 db  0Eh
.eh_frame:0000000000009385                 db  68h ; h
.eh_frame:0000000000009386                 db  57h ; W
.eh_frame:0000000000009387                 db  0Eh
.eh_frame:0000000000009388                 db  70h ; p
.eh_frame:0000000000009389                 db  42h ; B
.eh_frame:000000000000938A                 db  0Eh
.eh_frame:000000000000938B                 db  78h ; x
.eh_frame:000000000000938C                 db  42h ; B
.eh_frame:000000000000938D                 db  0Eh
.eh_frame:000000000000938E                 db  80h
.eh_frame:000000000000938F                 db    1
.eh_frame:0000000000009390                 db  42h ; B
.eh_frame:0000000000009391                 db  0Eh
.eh_frame:0000000000009392                 db  88h
.eh_frame:0000000000009393                 db    1
.eh_frame:0000000000009394                 db  42h ; B
.eh_frame:0000000000009395                 db  0Eh
.eh_frame:0000000000009396                 db  90h
.eh_frame:0000000000009397                 db    1
.eh_frame:0000000000009398                 db  53h ; S
.eh_frame:0000000000009399                 db  0Eh
.eh_frame:000000000000939A                 db  60h ; `
.eh_frame:000000000000939B                 db  44h ; D
.eh_frame:000000000000939C                 db  0Ah
.eh_frame:000000000000939D                 db  0Eh
.eh_frame:000000000000939E                 db  38h ; 8
.eh_frame:000000000000939F                 db  41h ; A
.eh_frame:00000000000093A0                 db  0Eh
.eh_frame:00000000000093A1                 db  30h ; 0
.eh_frame:00000000000093A2                 db  41h ; A
.eh_frame:00000000000093A3                 db  0Eh
.eh_frame:00000000000093A4                 db  28h ; (
.eh_frame:00000000000093A5                 db  42h ; B
.eh_frame:00000000000093A6                 db  0Eh
.eh_frame:00000000000093A7                 db  20h
.eh_frame:00000000000093A8                 db  42h ; B
.eh_frame:00000000000093A9                 db  0Eh
.eh_frame:00000000000093AA                 db  18h
.eh_frame:00000000000093AB                 db  42h ; B
.eh_frame:00000000000093AC                 db  0Eh
.eh_frame:00000000000093AD                 db  10h
.eh_frame:00000000000093AE                 db  42h ; B
.eh_frame:00000000000093AF                 db  0Eh
.eh_frame:00000000000093B0                 db    8
.eh_frame:00000000000093B1                 db  44h ; D
.eh_frame:00000000000093B2                 db  0Bh
.eh_frame:00000000000093B3                 db    2
.eh_frame:00000000000093B4                 db  78h ; x
.eh_frame:00000000000093B5                 db  0Ah
.eh_frame:00000000000093B6                 db  0Eh
.eh_frame:00000000000093B7                 db  68h ; h
.eh_frame:00000000000093B8                 db  48h ; H
.eh_frame:00000000000093B9                 db  0Bh
.eh_frame:00000000000093BA                 db  5Ah ; Z
.eh_frame:00000000000093BB                 db  0Ah
.eh_frame:00000000000093BC                 db  0Eh
.eh_frame:00000000000093BD                 db  38h ; 8
.eh_frame:00000000000093BE                 db  47h ; G
.eh_frame:00000000000093BF                 db  0Eh
.eh_frame:00000000000093C0                 db  30h ; 0
.eh_frame:00000000000093C1                 db  41h ; A
.eh_frame:00000000000093C2                 db  0Eh
.eh_frame:00000000000093C3                 db  28h ; (
.eh_frame:00000000000093C4                 db  42h ; B
.eh_frame:00000000000093C5                 db  0Eh
.eh_frame:00000000000093C6                 db  20h
.eh_frame:00000000000093C7                 db  42h ; B
.eh_frame:00000000000093C8                 db  0Eh
.eh_frame:00000000000093C9                 db  18h
.eh_frame:00000000000093CA                 db  42h ; B
.eh_frame:00000000000093CB                 db  0Eh
.eh_frame:00000000000093CC                 db  10h
.eh_frame:00000000000093CD                 db  42h ; B
.eh_frame:00000000000093CE                 db  0Eh
.eh_frame:00000000000093CF                 db    8
.eh_frame:00000000000093D0                 db  56h ; V
.eh_frame:00000000000093D1                 db  0Bh
.eh_frame:00000000000093D2                 db  5Eh ; ^
.eh_frame:00000000000093D3                 db  0Ah
.eh_frame:00000000000093D4                 db  0Eh
.eh_frame:00000000000093D5                 db  38h ; 8
.eh_frame:00000000000093D6                 db  52h ; R
.eh_frame:00000000000093D7                 db  0Eh
.eh_frame:00000000000093D8                 db  30h ; 0
.eh_frame:00000000000093D9                 db  41h ; A
.eh_frame:00000000000093DA                 db  0Eh
.eh_frame:00000000000093DB                 db  28h ; (
.eh_frame:00000000000093DC                 db  42h ; B
.eh_frame:00000000000093DD                 db  0Eh
.eh_frame:00000000000093DE                 db  20h
.eh_frame:00000000000093DF                 db  42h ; B
.eh_frame:00000000000093E0                 db  0Eh
.eh_frame:00000000000093E1                 db  18h
.eh_frame:00000000000093E2                 db  42h ; B
.eh_frame:00000000000093E3                 db  0Eh
.eh_frame:00000000000093E4                 db  10h
.eh_frame:00000000000093E5                 db  42h ; B
.eh_frame:00000000000093E6                 db  0Eh
.eh_frame:00000000000093E7                 db    8
.eh_frame:00000000000093E8                 db  4Fh ; O
.eh_frame:00000000000093E9                 db  0Bh
.eh_frame:00000000000093EA                 db  62h ; b
.eh_frame:00000000000093EB                 db  0Ah
.eh_frame:00000000000093EC                 db  0Eh
.eh_frame:00000000000093ED                 db  38h ; 8
.eh_frame:00000000000093EE                 db  50h ; P
.eh_frame:00000000000093EF                 db  0Eh
.eh_frame:00000000000093F0                 db  30h ; 0
.eh_frame:00000000000093F1                 db  41h ; A
.eh_frame:00000000000093F2                 db  0Eh
.eh_frame:00000000000093F3                 db  28h ; (
.eh_frame:00000000000093F4                 db  42h ; B
.eh_frame:00000000000093F5                 db  0Eh
.eh_frame:00000000000093F6                 db  20h
.eh_frame:00000000000093F7                 db  42h ; B
.eh_frame:00000000000093F8                 db  0Eh
.eh_frame:00000000000093F9                 db  18h
.eh_frame:00000000000093FA                 db  42h ; B
.eh_frame:00000000000093FB                 db  0Eh
.eh_frame:00000000000093FC                 db  10h
.eh_frame:00000000000093FD                 db  42h ; B
.eh_frame:00000000000093FE                 db  0Eh
.eh_frame:00000000000093FF                 db    8
.eh_frame:0000000000009400                 db  55h ; U
.eh_frame:0000000000009401                 db  0Bh
.eh_frame:0000000000009402                 db  66h ; f
.eh_frame:0000000000009403                 db  0Eh
.eh_frame:0000000000009404                 db  68h ; h
.eh_frame:0000000000009405                 db  42h ; B
.eh_frame:0000000000009406                 db  0Eh
.eh_frame:0000000000009407                 db  70h ; p
.eh_frame:0000000000009408                 db  5Ch ; \
.eh_frame:0000000000009409                 db  0Eh
.eh_frame:000000000000940A                 db  68h ; h
.eh_frame:000000000000940B                 db  41h ; A
.eh_frame:000000000000940C                 db  0Eh
.eh_frame:000000000000940D                 db  60h ; `
.eh_frame:000000000000940E                 db  44h ; D
.eh_frame:000000000000940F                 db  0Ah
.eh_frame:0000000000009410                 db  0Eh
.eh_frame:0000000000009411                 db  38h ; 8
.eh_frame:0000000000009412                 db  41h ; A
.eh_frame:0000000000009413                 db  0Eh
.eh_frame:0000000000009414                 db  30h ; 0
.eh_frame:0000000000009415                 db  41h ; A
.eh_frame:0000000000009416                 db  0Eh
.eh_frame:0000000000009417                 db  28h ; (
.eh_frame:0000000000009418                 db  42h ; B
.eh_frame:0000000000009419                 db  0Eh
.eh_frame:000000000000941A                 db  20h
.eh_frame:000000000000941B                 db  42h ; B
.eh_frame:000000000000941C                 db  0Eh
.eh_frame:000000000000941D                 db  18h
.eh_frame:000000000000941E                 db  42h ; B
.eh_frame:000000000000941F                 db  0Eh
.eh_frame:0000000000009420                 db  10h
.eh_frame:0000000000009421                 db  42h ; B
.eh_frame:0000000000009422                 db  0Eh
.eh_frame:0000000000009423                 db    8
.eh_frame:0000000000009424                 db  45h ; E
.eh_frame:0000000000009425                 db  0Bh
.eh_frame:0000000000009426                 db  68h ; h
.eh_frame:0000000000009427                 db  0Ah
.eh_frame:0000000000009428                 db  0Eh
.eh_frame:0000000000009429                 db  68h ; h
.eh_frame:000000000000942A                 db  48h ; H
.eh_frame:000000000000942B                 db  0Bh
.eh_frame:000000000000942C                 db  72h ; r
.eh_frame:000000000000942D                 db  0Eh
.eh_frame:000000000000942E                 db  68h ; h
.eh_frame:000000000000942F                 db  45h ; E
.eh_frame:0000000000009430                 db  0Eh
.eh_frame:0000000000009431                 db  70h ; p
.eh_frame:0000000000009432                 db  42h ; B
.eh_frame:0000000000009433                 db  0Eh
.eh_frame:0000000000009434                 db  78h ; x
.eh_frame:0000000000009435                 db  42h ; B
.eh_frame:0000000000009436                 db  0Eh
.eh_frame:0000000000009437                 db  80h
.eh_frame:0000000000009438                 db    1
.eh_frame:0000000000009439                 db  5Eh ; ^
.eh_frame:000000000000943A                 db  0Eh
.eh_frame:000000000000943B                 db  60h ; `
.eh_frame:000000000000943C                 db  44h ; D
.eh_frame:000000000000943D                 db  0Ah
.eh_frame:000000000000943E                 db  0Eh
.eh_frame:000000000000943F                 db  38h ; 8
.eh_frame:0000000000009440                 db  41h ; A
.eh_frame:0000000000009441                 db  0Eh
.eh_frame:0000000000009442                 db  30h ; 0
.eh_frame:0000000000009443                 db  41h ; A
.eh_frame:0000000000009444                 db  0Eh
.eh_frame:0000000000009445                 db  28h ; (
.eh_frame:0000000000009446                 db  42h ; B
.eh_frame:0000000000009447                 db  0Eh
.eh_frame:0000000000009448                 db  20h
.eh_frame:0000000000009449                 db  42h ; B
.eh_frame:000000000000944A                 db  0Eh
.eh_frame:000000000000944B                 db  18h
.eh_frame:000000000000944C                 db  42h ; B
.eh_frame:000000000000944D                 db  0Eh
.eh_frame:000000000000944E                 db  10h
.eh_frame:000000000000944F                 db  42h ; B
.eh_frame:0000000000009450                 db  0Eh
.eh_frame:0000000000009451                 db    8
.eh_frame:0000000000009452                 db  41h ; A
.eh_frame:0000000000009453                 db  0Bh
.eh_frame:0000000000009454                 db  79h ; y
.eh_frame:0000000000009455                 db  0Ah
.eh_frame:0000000000009456                 db  0Eh
.eh_frame:0000000000009457                 db  68h ; h
.eh_frame:0000000000009458                 db  42h ; B
.eh_frame:0000000000009459                 db  0Eh
.eh_frame:000000000000945A                 db  70h ; p
.eh_frame:000000000000945B                 db  42h ; B
.eh_frame:000000000000945C                 db  0Eh
.eh_frame:000000000000945D                 db  78h ; x
.eh_frame:000000000000945E                 db  42h ; B
.eh_frame:000000000000945F                 db  0Eh
.eh_frame:0000000000009460                 db  80h
.eh_frame:0000000000009461                 db    1
.eh_frame:0000000000009462                 db  51h ; Q
.eh_frame:0000000000009463                 db  0Bh
.eh_frame:0000000000009464                 db  10h
.eh_frame:0000000000009465                 db    0
.eh_frame:0000000000009466                 db    0
.eh_frame:0000000000009467                 db    0
.eh_frame:0000000000009468                 db  28h ; (
.eh_frame:0000000000009469                 db    9
.eh_frame:000000000000946A                 db    0
.eh_frame:000000000000946B                 db    0
.eh_frame:000000000000946C                 db 0D4h
.eh_frame:000000000000946D                 db 0D4h
.eh_frame:000000000000946E                 db 0FFh
.eh_frame:000000000000946F                 db 0FFh
.eh_frame:0000000000009470                 db  20h
.eh_frame:0000000000009471                 db    0
.eh_frame:0000000000009472                 db    0
.eh_frame:0000000000009473                 db    0
.eh_frame:0000000000009474                 db    0
.eh_frame:0000000000009475                 db    0
.eh_frame:0000000000009476                 db    0
.eh_frame:0000000000009477                 db    0
.eh_frame:0000000000009478                 db  18h
.eh_frame:0000000000009479                 db    0
.eh_frame:000000000000947A                 db    0
.eh_frame:000000000000947B                 db    0
.eh_frame:000000000000947C                 db  3Ch ; <
.eh_frame:000000000000947D                 db    9
.eh_frame:000000000000947E                 db    0
.eh_frame:000000000000947F                 db    0
.eh_frame:0000000000009480                 db 0E0h
.eh_frame:0000000000009481                 db 0D4h
.eh_frame:0000000000009482                 db 0FFh
.eh_frame:0000000000009483                 db 0FFh
.eh_frame:0000000000009484                 db  78h ; x
.eh_frame:0000000000009485                 db    0
.eh_frame:0000000000009486                 db    0
.eh_frame:0000000000009487                 db    0
.eh_frame:0000000000009488                 db    0
.eh_frame:0000000000009489                 db  44h ; D
.eh_frame:000000000000948A                 db  0Eh
.eh_frame:000000000000948B                 db  70h ; p
.eh_frame:000000000000948C                 db    2
.eh_frame:000000000000948D                 db  60h ; `
.eh_frame:000000000000948E                 db  0Ah
.eh_frame:000000000000948F                 db  0Eh
.eh_frame:0000000000009490                 db    8
.eh_frame:0000000000009491                 db  41h ; A
.eh_frame:0000000000009492                 db  0Bh
.eh_frame:0000000000009493                 db    0
.eh_frame:0000000000009494                 db  28h ; (
.eh_frame:0000000000009495                 db    0
.eh_frame:0000000000009496                 db    0
.eh_frame:0000000000009497                 db    0
.eh_frame:0000000000009498                 db  58h ; X
.eh_frame:0000000000009499                 db    9
.eh_frame:000000000000949A                 db    0
.eh_frame:000000000000949B                 db    0
.eh_frame:000000000000949C                 db  44h ; D
.eh_frame:000000000000949D                 db 0D5h
.eh_frame:000000000000949E                 db 0FFh
.eh_frame:000000000000949F                 db 0FFh
.eh_frame:00000000000094A0                 db 0D5h
.eh_frame:00000000000094A1                 db    0
.eh_frame:00000000000094A2                 db    0
.eh_frame:00000000000094A3                 db    0
.eh_frame:00000000000094A4                 db    0
.eh_frame:00000000000094A5                 db  41h ; A
.eh_frame:00000000000094A6                 db  0Eh
.eh_frame:00000000000094A7                 db  10h
.eh_frame:00000000000094A8                 db  86h
.eh_frame:00000000000094A9                 db    2
.eh_frame:00000000000094AA                 db  41h ; A
.eh_frame:00000000000094AB                 db  0Eh
.eh_frame:00000000000094AC                 db  18h
.eh_frame:00000000000094AD                 db  83h
.eh_frame:00000000000094AE                 db    3
.eh_frame:00000000000094AF                 db  50h ; P
.eh_frame:00000000000094B0                 db  0Eh
.eh_frame:00000000000094B1                 db 0D0h
.eh_frame:00000000000094B2                 db    1
.eh_frame:00000000000094B3                 db    2
.eh_frame:00000000000094B4                 db 0ABh
.eh_frame:00000000000094B5                 db  0Ah
.eh_frame:00000000000094B6                 db  0Eh
.eh_frame:00000000000094B7                 db  18h
.eh_frame:00000000000094B8                 db  41h ; A
.eh_frame:00000000000094B9                 db  0Eh
.eh_frame:00000000000094BA                 db  10h
.eh_frame:00000000000094BB                 db  41h ; A
.eh_frame:00000000000094BC                 db  0Eh
.eh_frame:00000000000094BD                 db    8
.eh_frame:00000000000094BE                 db  41h ; A
.eh_frame:00000000000094BF                 db  0Bh
.eh_frame:00000000000094C0                 db  1Ch
.eh_frame:00000000000094C1                 db    0
.eh_frame:00000000000094C2                 db    0
.eh_frame:00000000000094C3                 db    0
.eh_frame:00000000000094C4                 db  84h
.eh_frame:00000000000094C5                 db    9
.eh_frame:00000000000094C6                 db    0
.eh_frame:00000000000094C7                 db    0
.eh_frame:00000000000094C8                 db 0F8h
.eh_frame:00000000000094C9                 db 0D5h
.eh_frame:00000000000094CA                 db 0FFh
.eh_frame:00000000000094CB                 db 0FFh
.eh_frame:00000000000094CC                 db  80h
.eh_frame:00000000000094CD                 db    0
.eh_frame:00000000000094CE                 db    0
.eh_frame:00000000000094CF                 db    0
.eh_frame:00000000000094D0                 db    0
.eh_frame:00000000000094D1                 db  41h ; A
.eh_frame:00000000000094D2                 db  0Eh
.eh_frame:00000000000094D3                 db  10h
.eh_frame:00000000000094D4                 db  83h
.eh_frame:00000000000094D5                 db    2
.eh_frame:00000000000094D6                 db    2
.eh_frame:00000000000094D7                 db  7Ah ; z
.eh_frame:00000000000094D8                 db  0Eh
.eh_frame:00000000000094D9                 db    8
.eh_frame:00000000000094DA                 db    0
.eh_frame:00000000000094DB                 db    0
.eh_frame:00000000000094DC                 db    0
.eh_frame:00000000000094DD                 db    0
.eh_frame:00000000000094DE                 db    0
.eh_frame:00000000000094DF                 db    0
.eh_frame:00000000000094E0                 db  18h
.eh_frame:00000000000094E1                 db    0
.eh_frame:00000000000094E2                 db    0
.eh_frame:00000000000094E3                 db    0
.eh_frame:00000000000094E4                 db 0A4h
.eh_frame:00000000000094E5                 db    9
.eh_frame:00000000000094E6                 db    0
.eh_frame:00000000000094E7                 db    0
.eh_frame:00000000000094E8                 db  58h ; X
.eh_frame:00000000000094E9                 db 0D6h
.eh_frame:00000000000094EA                 db 0FFh
.eh_frame:00000000000094EB                 db 0FFh
.eh_frame:00000000000094EC                 db  1Ah
.eh_frame:00000000000094ED                 db    0
.eh_frame:00000000000094EE                 db    0
.eh_frame:00000000000094EF                 db    0
.eh_frame:00000000000094F0                 db    0
.eh_frame:00000000000094F1                 db  41h ; A
.eh_frame:00000000000094F2                 db  0Eh
.eh_frame:00000000000094F3                 db  10h
.eh_frame:00000000000094F4                 db  83h
.eh_frame:00000000000094F5                 db    2
.eh_frame:00000000000094F6                 db  53h ; S
.eh_frame:00000000000094F7                 db  0Ah
.eh_frame:00000000000094F8                 db  0Eh
.eh_frame:00000000000094F9                 db    8
.eh_frame:00000000000094FA                 db  41h ; A
.eh_frame:00000000000094FB                 db  0Bh
.eh_frame:00000000000094FC                 db  10h
.eh_frame:00000000000094FD                 db    0
.eh_frame:00000000000094FE                 db    0
.eh_frame:00000000000094FF                 db    0
.eh_frame:0000000000009500                 db 0C0h
.eh_frame:0000000000009501                 db    9
.eh_frame:0000000000009502                 db    0
.eh_frame:0000000000009503                 db    0
.eh_frame:0000000000009504                 db  5Ch ; \
.eh_frame:0000000000009505                 db 0D6h
.eh_frame:0000000000009506                 db 0FFh
.eh_frame:0000000000009507                 db 0FFh
.eh_frame:0000000000009508                 db  24h ; $
.eh_frame:0000000000009509                 db    0
.eh_frame:000000000000950A                 db    0
.eh_frame:000000000000950B                 db    0
.eh_frame:000000000000950C                 db    0
.eh_frame:000000000000950D                 db  5Fh ; _
.eh_frame:000000000000950E                 db  0Eh
.eh_frame:000000000000950F                 db  10h
.eh_frame:0000000000009510                 db  10h
.eh_frame:0000000000009511                 db    0
.eh_frame:0000000000009512                 db    0
.eh_frame:0000000000009513                 db    0
.eh_frame:0000000000009514                 db 0D4h
.eh_frame:0000000000009515                 db    9
.eh_frame:0000000000009516                 db    0
.eh_frame:0000000000009517                 db    0
.eh_frame:0000000000009518                 db  78h ; x
.eh_frame:0000000000009519                 db 0D6h
.eh_frame:000000000000951A                 db 0FFh
.eh_frame:000000000000951B                 db 0FFh
.eh_frame:000000000000951C                 db    2
.eh_frame:000000000000951D                 db    0
.eh_frame:000000000000951E                 db    0
.eh_frame:000000000000951F                 db    0
.eh_frame:0000000000009520                 db    0
.eh_frame:0000000000009521                 db    0
.eh_frame:0000000000009522                 db    0
.eh_frame:0000000000009523                 db    0
.eh_frame:0000000000009524                 db  20h
.eh_frame:0000000000009525                 db    0
.eh_frame:0000000000009526                 db    0
.eh_frame:0000000000009527                 db    0
.eh_frame:0000000000009528                 db 0E8h
.eh_frame:0000000000009529                 db    9
.eh_frame:000000000000952A                 db    0
.eh_frame:000000000000952B                 db    0
.eh_frame:000000000000952C                 db  74h ; t
.eh_frame:000000000000952D                 db 0D6h
.eh_frame:000000000000952E                 db 0FFh
.eh_frame:000000000000952F                 db 0FFh
.eh_frame:0000000000009530                 db  36h ; 6
.eh_frame:0000000000009531                 db    0
.eh_frame:0000000000009532                 db    0
.eh_frame:0000000000009533                 db    0
.eh_frame:0000000000009534                 db    0
.eh_frame:0000000000009535                 db  44h ; D
.eh_frame:0000000000009536                 db  0Eh
.eh_frame:0000000000009537                 db  10h
.eh_frame:0000000000009538                 db  83h
.eh_frame:0000000000009539                 db    2
.eh_frame:000000000000953A                 db  5Dh ; ]
.eh_frame:000000000000953B                 db  0Ah
.eh_frame:000000000000953C                 db  0Eh
.eh_frame:000000000000953D                 db    8
.eh_frame:000000000000953E                 db  47h ; G
.eh_frame:000000000000953F                 db  0Bh
.eh_frame:0000000000009540                 db  48h ; H
.eh_frame:0000000000009541                 db  0Ah
.eh_frame:0000000000009542                 db  0Eh
.eh_frame:0000000000009543                 db    8
.eh_frame:0000000000009544                 db  41h ; A
.eh_frame:0000000000009545                 db  0Bh
.eh_frame:0000000000009546                 db    0
.eh_frame:0000000000009547                 db    0
.eh_frame:0000000000009548                 db  10h
.eh_frame:0000000000009549                 db    0
.eh_frame:000000000000954A                 db    0
.eh_frame:000000000000954B                 db    0
.eh_frame:000000000000954C                 db  0Ch
.eh_frame:000000000000954D                 db  0Ah
.eh_frame:000000000000954E                 db    0
.eh_frame:000000000000954F                 db    0
.eh_frame:0000000000009550                 db  90h
.eh_frame:0000000000009551                 db 0D6h
.eh_frame:0000000000009552                 db 0FFh
.eh_frame:0000000000009553                 db 0FFh
.eh_frame:0000000000009554                 db  24h ; $
.eh_frame:0000000000009555                 db    0
.eh_frame:0000000000009556                 db    0
.eh_frame:0000000000009557                 db    0
.eh_frame:0000000000009558                 db    0
.eh_frame:0000000000009559                 db  5Fh ; _
.eh_frame:000000000000955A                 db  0Eh
.eh_frame:000000000000955B                 db  10h
.eh_frame:000000000000955C                 db  14h
.eh_frame:000000000000955D                 db    0
.eh_frame:000000000000955E                 db    0
.eh_frame:000000000000955F                 db    0
.eh_frame:0000000000009560                 db  20h
.eh_frame:0000000000009561                 db  0Ah
.eh_frame:0000000000009562                 db    0
.eh_frame:0000000000009563                 db    0
.eh_frame:0000000000009564                 db 0ACh
.eh_frame:0000000000009565                 db 0D6h
.eh_frame:0000000000009566                 db 0FFh
.eh_frame:0000000000009567                 db 0FFh
.eh_frame:0000000000009568                 db  82h
.eh_frame:0000000000009569                 db    0
.eh_frame:000000000000956A                 db    0
.eh_frame:000000000000956B                 db    0
.eh_frame:000000000000956C                 db    0
.eh_frame:000000000000956D                 db    2
.eh_frame:000000000000956E                 db  5Fh ; _
.eh_frame:000000000000956F                 db  0Eh
.eh_frame:0000000000009570                 db  10h
.eh_frame:0000000000009571                 db  49h ; I
.eh_frame:0000000000009572                 db  0Eh
.eh_frame:0000000000009573                 db    8
.eh_frame:0000000000009574                 db  14h
.eh_frame:0000000000009575                 db    0
.eh_frame:0000000000009576                 db    0
.eh_frame:0000000000009577                 db    0
.eh_frame:0000000000009578                 db  38h ; 8
.eh_frame:0000000000009579                 db  0Ah
.eh_frame:000000000000957A                 db    0
.eh_frame:000000000000957B                 db    0
.eh_frame:000000000000957C                 db  24h ; $
.eh_frame:000000000000957D                 db 0D7h
.eh_frame:000000000000957E                 db 0FFh
.eh_frame:000000000000957F                 db 0FFh
.eh_frame:0000000000009580                 db  4Ah ; J
.eh_frame:0000000000009581                 db    0
.eh_frame:0000000000009582                 db    0
.eh_frame:0000000000009583                 db    0
.eh_frame:0000000000009584                 db    0
.eh_frame:0000000000009585                 db    2
.eh_frame:0000000000009586                 db  45h ; E
.eh_frame:0000000000009587                 db  0Eh
.eh_frame:0000000000009588                 db  10h
.eh_frame:0000000000009589                 db    0
.eh_frame:000000000000958A                 db    0
.eh_frame:000000000000958B                 db    0
.eh_frame:000000000000958C                 db  18h
.eh_frame:000000000000958D                 db    0
.eh_frame:000000000000958E                 db    0
.eh_frame:000000000000958F                 db    0
.eh_frame:0000000000009590                 db  50h ; P
.eh_frame:0000000000009591                 db  0Ah
.eh_frame:0000000000009592                 db    0
.eh_frame:0000000000009593                 db    0
.eh_frame:0000000000009594                 db  5Ch ; \
.eh_frame:0000000000009595                 db 0D7h
.eh_frame:0000000000009596                 db 0FFh
.eh_frame:0000000000009597                 db 0FFh
.eh_frame:0000000000009598                 db  17h
.eh_frame:0000000000009599                 db    0
.eh_frame:000000000000959A                 db    0
.eh_frame:000000000000959B                 db    0
.eh_frame:000000000000959C                 db    0
.eh_frame:000000000000959D                 db  41h ; A
.eh_frame:000000000000959E                 db  0Eh
.eh_frame:000000000000959F                 db  10h
.eh_frame:00000000000095A0                 db  83h
.eh_frame:00000000000095A1                 db    2
.eh_frame:00000000000095A2                 db  51h ; Q
.eh_frame:00000000000095A3                 db  0Eh
.eh_frame:00000000000095A4                 db    8
.eh_frame:00000000000095A5                 db    0
.eh_frame:00000000000095A6                 db    0
.eh_frame:00000000000095A7                 db    0
.eh_frame:00000000000095A8                 db  18h
.eh_frame:00000000000095A9                 db    0
.eh_frame:00000000000095AA                 db    0
.eh_frame:00000000000095AB                 db    0
.eh_frame:00000000000095AC                 db  6Ch ; l
.eh_frame:00000000000095AD                 db  0Ah
.eh_frame:00000000000095AE                 db    0
.eh_frame:00000000000095AF                 db    0
.eh_frame:00000000000095B0                 db  60h ; `
.eh_frame:00000000000095B1                 db 0D7h
.eh_frame:00000000000095B2                 db 0FFh
.eh_frame:00000000000095B3                 db 0FFh
.eh_frame:00000000000095B4                 db  2Eh ; .
.eh_frame:00000000000095B5                 db    0
.eh_frame:00000000000095B6                 db    0
.eh_frame:00000000000095B7                 db    0
.eh_frame:00000000000095B8                 db    0
.eh_frame:00000000000095B9                 db  47h ; G
.eh_frame:00000000000095BA                 db  0Eh
.eh_frame:00000000000095BB                 db  10h
.eh_frame:00000000000095BC                 db  61h ; a
.eh_frame:00000000000095BD                 db  0Ah
.eh_frame:00000000000095BE                 db  0Eh
.eh_frame:00000000000095BF                 db    8
.eh_frame:00000000000095C0                 db  41h ; A
.eh_frame:00000000000095C1                 db  0Bh
.eh_frame:00000000000095C2                 db    0
.eh_frame:00000000000095C3                 db    0
.eh_frame:00000000000095C4                 db  24h ; $
.eh_frame:00000000000095C5                 db    0
.eh_frame:00000000000095C6                 db    0
.eh_frame:00000000000095C7                 db    0
.eh_frame:00000000000095C8                 db  88h
.eh_frame:00000000000095C9                 db  0Ah
.eh_frame:00000000000095CA                 db    0
.eh_frame:00000000000095CB                 db    0
.eh_frame:00000000000095CC                 db  74h ; t
.eh_frame:00000000000095CD                 db 0D7h
.eh_frame:00000000000095CE                 db 0FFh
.eh_frame:00000000000095CF                 db 0FFh
.eh_frame:00000000000095D0                 db  28h ; (
.eh_frame:00000000000095D1                 db    0
.eh_frame:00000000000095D2                 db    0
.eh_frame:00000000000095D3                 db    0
.eh_frame:00000000000095D4                 db    0
.eh_frame:00000000000095D5                 db  41h ; A
.eh_frame:00000000000095D6                 db  0Eh
.eh_frame:00000000000095D7                 db  10h
.eh_frame:00000000000095D8                 db  86h
.eh_frame:00000000000095D9                 db    2
.eh_frame:00000000000095DA                 db  41h ; A
.eh_frame:00000000000095DB                 db  0Eh
.eh_frame:00000000000095DC                 db  18h
.eh_frame:00000000000095DD                 db  83h
.eh_frame:00000000000095DE                 db    3
.eh_frame:00000000000095DF                 db  4Dh ; M
.eh_frame:00000000000095E0                 db  0Eh
.eh_frame:00000000000095E1                 db  20h
.eh_frame:00000000000095E2                 db  49h ; I
.eh_frame:00000000000095E3                 db  0Eh
.eh_frame:00000000000095E4                 db  18h
.eh_frame:00000000000095E5                 db  47h ; G
.eh_frame:00000000000095E6                 db  0Eh
.eh_frame:00000000000095E7                 db  10h
.eh_frame:00000000000095E8                 db  41h ; A
.eh_frame:00000000000095E9                 db  0Eh
.eh_frame:00000000000095EA                 db    8
.eh_frame:00000000000095EB                 db    0
.eh_frame:00000000000095EC                 db  18h
.eh_frame:00000000000095ED                 db    0
.eh_frame:00000000000095EE                 db    0
.eh_frame:00000000000095EF                 db    0
.eh_frame:00000000000095F0                 db 0B0h
.eh_frame:00000000000095F1                 db  0Ah
.eh_frame:00000000000095F2                 db    0
.eh_frame:00000000000095F3                 db    0
.eh_frame:00000000000095F4                 db  7Ch ; |
.eh_frame:00000000000095F5                 db 0D7h
.eh_frame:00000000000095F6                 db 0FFh
.eh_frame:00000000000095F7                 db 0FFh
.eh_frame:00000000000095F8                 db  13h
.eh_frame:00000000000095F9                 db    0
.eh_frame:00000000000095FA                 db    0
.eh_frame:00000000000095FB                 db    0
.eh_frame:00000000000095FC                 db    0
.eh_frame:00000000000095FD                 db  41h ; A
.eh_frame:00000000000095FE                 db  0Eh
.eh_frame:00000000000095FF                 db  10h
.eh_frame:0000000000009600                 db  83h
.eh_frame:0000000000009601                 db    2
.eh_frame:0000000000009602                 db  50h ; P
.eh_frame:0000000000009603                 db  0Eh
.eh_frame:0000000000009604                 db    8
.eh_frame:0000000000009605                 db    0
.eh_frame:0000000000009606                 db    0
.eh_frame:0000000000009607                 db    0
.eh_frame:0000000000009608                 db  14h
.eh_frame:0000000000009609                 db    0
.eh_frame:000000000000960A                 db    0
.eh_frame:000000000000960B                 db    0
.eh_frame:000000000000960C                 db 0CCh
.eh_frame:000000000000960D                 db  0Ah
.eh_frame:000000000000960E                 db    0
.eh_frame:000000000000960F                 db    0
.eh_frame:0000000000009610                 db  80h
.eh_frame:0000000000009611                 db 0D7h
.eh_frame:0000000000009612                 db 0FFh
.eh_frame:0000000000009613                 db 0FFh
.eh_frame:0000000000009614                 db  35h ; 5
.eh_frame:0000000000009615                 db    0
.eh_frame:0000000000009616                 db    0
.eh_frame:0000000000009617                 db    0
.eh_frame:0000000000009618                 db    0
.eh_frame:0000000000009619                 db  4Bh ; K
.eh_frame:000000000000961A                 db  0Eh
.eh_frame:000000000000961B                 db  10h
.eh_frame:000000000000961C                 db    0
.eh_frame:000000000000961D                 db    0
.eh_frame:000000000000961E                 db    0
.eh_frame:000000000000961F                 db    0
.eh_frame:0000000000009620                 db  34h ; 4
.eh_frame:0000000000009621                 db    0
.eh_frame:0000000000009622                 db    0
.eh_frame:0000000000009623                 db    0
.eh_frame:0000000000009624                 db 0E4h
.eh_frame:0000000000009625                 db  0Ah
.eh_frame:0000000000009626                 db    0
.eh_frame:0000000000009627                 db    0
.eh_frame:0000000000009628                 db 0A8h
.eh_frame:0000000000009629                 db 0D7h
.eh_frame:000000000000962A                 db 0FFh
.eh_frame:000000000000962B                 db 0FFh
.eh_frame:000000000000962C                 db  7Bh ; {
.eh_frame:000000000000962D                 db    0
.eh_frame:000000000000962E                 db    0
.eh_frame:000000000000962F                 db    0
.eh_frame:0000000000009630                 db    0
.eh_frame:0000000000009631                 db  42h ; B
.eh_frame:0000000000009632                 db  0Eh
.eh_frame:0000000000009633                 db  10h
.eh_frame:0000000000009634                 db  8Ch
.eh_frame:0000000000009635                 db    2
.eh_frame:0000000000009636                 db  41h ; A
.eh_frame:0000000000009637                 db  0Eh
.eh_frame:0000000000009638                 db  18h
.eh_frame:0000000000009639                 db  86h
.eh_frame:000000000000963A                 db    3
.eh_frame:000000000000963B                 db  41h ; A
.eh_frame:000000000000963C                 db  0Eh
.eh_frame:000000000000963D                 db  20h
.eh_frame:000000000000963E                 db  83h
.eh_frame:000000000000963F                 db    4
.eh_frame:0000000000009640                 db  7Dh ; }
.eh_frame:0000000000009641                 db  0Ah
.eh_frame:0000000000009642                 db  0Eh
.eh_frame:0000000000009643                 db  18h
.eh_frame:0000000000009644                 db  41h ; A
.eh_frame:0000000000009645                 db  0Eh
.eh_frame:0000000000009646                 db  10h
.eh_frame:0000000000009647                 db  42h ; B
.eh_frame:0000000000009648                 db  0Eh
.eh_frame:0000000000009649                 db    8
.eh_frame:000000000000964A                 db  44h ; D
.eh_frame:000000000000964B                 db  0Bh
.eh_frame:000000000000964C                 db  60h ; `
.eh_frame:000000000000964D                 db  0Ah
.eh_frame:000000000000964E                 db  0Eh
.eh_frame:000000000000964F                 db  18h
.eh_frame:0000000000009650                 db  41h ; A
.eh_frame:0000000000009651                 db  0Eh
.eh_frame:0000000000009652                 db  10h
.eh_frame:0000000000009653                 db  42h ; B
.eh_frame:0000000000009654                 db  0Eh
.eh_frame:0000000000009655                 db    8
.eh_frame:0000000000009656                 db  45h ; E
.eh_frame:0000000000009657                 db  0Bh
.eh_frame:0000000000009658                 db  1Ch
.eh_frame:0000000000009659                 db    0
.eh_frame:000000000000965A                 db    0
.eh_frame:000000000000965B                 db    0
.eh_frame:000000000000965C                 db  1Ch
.eh_frame:000000000000965D                 db  0Bh
.eh_frame:000000000000965E                 db    0
.eh_frame:000000000000965F                 db    0
.eh_frame:0000000000009660                 db 0F0h
.eh_frame:0000000000009661                 db 0D7h
.eh_frame:0000000000009662                 db 0FFh
.eh_frame:0000000000009663                 db 0FFh
.eh_frame:0000000000009664                 db  40h ; @
.eh_frame:0000000000009665                 db    0
.eh_frame:0000000000009666                 db    0
.eh_frame:0000000000009667                 db    0
.eh_frame:0000000000009668                 db    0
.eh_frame:0000000000009669                 db  44h ; D
.eh_frame:000000000000966A                 db  0Eh
.eh_frame:000000000000966B                 db  10h
.eh_frame:000000000000966C                 db  83h
.eh_frame:000000000000966D                 db    2
.eh_frame:000000000000966E                 db  5Ah ; Z
.eh_frame:000000000000966F                 db  0Ah
.eh_frame:0000000000009670                 db  0Eh
.eh_frame:0000000000009671                 db    8
.eh_frame:0000000000009672                 db  4Ah ; J
.eh_frame:0000000000009673                 db  0Bh
.eh_frame:0000000000009674                 db  53h ; S
.eh_frame:0000000000009675                 db  0Eh
.eh_frame:0000000000009676                 db    8
.eh_frame:0000000000009677                 db    0
.eh_frame:0000000000009678                 db  2Ch ; ,
.eh_frame:0000000000009679                 db    0
.eh_frame:000000000000967A                 db    0
.eh_frame:000000000000967B                 db    0
.eh_frame:000000000000967C                 db  3Ch ; <
.eh_frame:000000000000967D                 db  0Bh
.eh_frame:000000000000967E                 db    0
.eh_frame:000000000000967F                 db    0
.eh_frame:0000000000009680                 db  10h
.eh_frame:0000000000009681                 db 0D8h
.eh_frame:0000000000009682                 db 0FFh
.eh_frame:0000000000009683                 db 0FFh
.eh_frame:0000000000009684                 db  57h ; W
.eh_frame:0000000000009685                 db    0
.eh_frame:0000000000009686                 db    0
.eh_frame:0000000000009687                 db    0
.eh_frame:0000000000009688                 db    0
.eh_frame:0000000000009689                 db  63h ; c
.eh_frame:000000000000968A                 db  0Eh
.eh_frame:000000000000968B                 db  10h
.eh_frame:000000000000968C                 db  8Ch
.eh_frame:000000000000968D                 db    2
.eh_frame:000000000000968E                 db  41h ; A
.eh_frame:000000000000968F                 db  0Eh
.eh_frame:0000000000009690                 db  18h
.eh_frame:0000000000009691                 db  86h
.eh_frame:0000000000009692                 db    3
.eh_frame:0000000000009693                 db  44h ; D
.eh_frame:0000000000009694                 db  0Eh
.eh_frame:0000000000009695                 db  20h
.eh_frame:0000000000009696                 db  83h
.eh_frame:0000000000009697                 db    4
.eh_frame:0000000000009698                 db  6Bh ; k
.eh_frame:0000000000009699                 db  0Eh
.eh_frame:000000000000969A                 db  18h
.eh_frame:000000000000969B                 db  41h ; A
.eh_frame:000000000000969C                 db  0Eh
.eh_frame:000000000000969D                 db  10h
.eh_frame:000000000000969E                 db  42h ; B
.eh_frame:000000000000969F                 db  0Eh
.eh_frame:00000000000096A0                 db    8
.eh_frame:00000000000096A1                 db    0
.eh_frame:00000000000096A2                 db    0
.eh_frame:00000000000096A3                 db    0
.eh_frame:00000000000096A4                 db    0
.eh_frame:00000000000096A5                 db    0
.eh_frame:00000000000096A6                 db    0
.eh_frame:00000000000096A7                 db    0
.eh_frame:00000000000096A8                 db  3Ch ; <
.eh_frame:00000000000096A9                 db    0
.eh_frame:00000000000096AA                 db    0
.eh_frame:00000000000096AB                 db    0
.eh_frame:00000000000096AC                 db  6Ch ; l
.eh_frame:00000000000096AD                 db  0Bh
.eh_frame:00000000000096AE                 db    0
.eh_frame:00000000000096AF                 db    0
.eh_frame:00000000000096B0                 db  40h ; @
.eh_frame:00000000000096B1                 db 0D8h
.eh_frame:00000000000096B2                 db 0FFh
.eh_frame:00000000000096B3                 db 0FFh
.eh_frame:00000000000096B4                 db  83h
.eh_frame:00000000000096B5                 db    0
.eh_frame:00000000000096B6                 db    0
.eh_frame:00000000000096B7                 db    0
.eh_frame:00000000000096B8                 db    0
.eh_frame:00000000000096B9                 db  42h ; B
.eh_frame:00000000000096BA                 db  0Eh
.eh_frame:00000000000096BB                 db  10h
.eh_frame:00000000000096BC                 db  8Dh
.eh_frame:00000000000096BD                 db    2
.eh_frame:00000000000096BE                 db  42h ; B
.eh_frame:00000000000096BF                 db  0Eh
.eh_frame:00000000000096C0                 db  18h
.eh_frame:00000000000096C1                 db  8Ch
.eh_frame:00000000000096C2                 db    3
.eh_frame:00000000000096C3                 db  44h ; D
.eh_frame:00000000000096C4                 db  0Eh
.eh_frame:00000000000096C5                 db  20h
.eh_frame:00000000000096C6                 db  86h
.eh_frame:00000000000096C7                 db    4
.eh_frame:00000000000096C8                 db  41h ; A
.eh_frame:00000000000096C9                 db  0Eh
.eh_frame:00000000000096CA                 db  28h ; (
.eh_frame:00000000000096CB                 db  83h
.eh_frame:00000000000096CC                 db    5
.eh_frame:00000000000096CD                 db  4Ah ; J
.eh_frame:00000000000096CE                 db  0Eh
.eh_frame:00000000000096CF                 db  40h ; @
.eh_frame:00000000000096D0                 db    2
.eh_frame:00000000000096D1                 db  64h ; d
.eh_frame:00000000000096D2                 db  0Ah
.eh_frame:00000000000096D3                 db  0Eh
.eh_frame:00000000000096D4                 db  28h ; (
.eh_frame:00000000000096D5                 db  41h ; A
.eh_frame:00000000000096D6                 db  0Eh
.eh_frame:00000000000096D7                 db  20h
.eh_frame:00000000000096D8                 db  41h ; A
.eh_frame:00000000000096D9                 db  0Eh
.eh_frame:00000000000096DA                 db  18h
.eh_frame:00000000000096DB                 db  42h ; B
.eh_frame:00000000000096DC                 db  0Eh
.eh_frame:00000000000096DD                 db  10h
.eh_frame:00000000000096DE                 db  42h ; B
.eh_frame:00000000000096DF                 db  0Eh
.eh_frame:00000000000096E0                 db    8
.eh_frame:00000000000096E1                 db  41h ; A
.eh_frame:00000000000096E2                 db  0Bh
.eh_frame:00000000000096E3                 db    0
.eh_frame:00000000000096E4                 db    0
.eh_frame:00000000000096E5                 db    0
.eh_frame:00000000000096E6                 db    0
.eh_frame:00000000000096E7                 db    0
.eh_frame:00000000000096E8                 db  28h ; (
.eh_frame:00000000000096E9                 db    0
.eh_frame:00000000000096EA                 db    0
.eh_frame:00000000000096EB                 db    0
.eh_frame:00000000000096EC                 db 0ACh
.eh_frame:00000000000096ED                 db  0Bh
.eh_frame:00000000000096EE                 db    0
.eh_frame:00000000000096EF                 db    0
.eh_frame:00000000000096F0                 db  90h
.eh_frame:00000000000096F1                 db 0D8h
.eh_frame:00000000000096F2                 db 0FFh
.eh_frame:00000000000096F3                 db 0FFh
.eh_frame:00000000000096F4                 db  5Eh ; ^
.eh_frame:00000000000096F5                 db    0
.eh_frame:00000000000096F6                 db    0
.eh_frame:00000000000096F7                 db    0
.eh_frame:00000000000096F8                 db    0
.eh_frame:00000000000096F9                 db  41h ; A
.eh_frame:00000000000096FA                 db  0Eh
.eh_frame:00000000000096FB                 db  10h
.eh_frame:00000000000096FC                 db  86h
.eh_frame:00000000000096FD                 db    2
.eh_frame:00000000000096FE                 db  41h ; A
.eh_frame:00000000000096FF                 db  0Eh
.eh_frame:0000000000009700                 db  18h
.eh_frame:0000000000009701                 db  83h
.eh_frame:0000000000009702                 db    3
.eh_frame:0000000000009703                 db  4Ch ; L
.eh_frame:0000000000009704                 db  0Eh
.eh_frame:0000000000009705                 db  20h
.eh_frame:0000000000009706                 db  77h ; w
.eh_frame:0000000000009707                 db  0Ah
.eh_frame:0000000000009708                 db  0Eh
.eh_frame:0000000000009709                 db  18h
.eh_frame:000000000000970A                 db  44h ; D
.eh_frame:000000000000970B                 db  0Eh
.eh_frame:000000000000970C                 db  10h
.eh_frame:000000000000970D                 db  41h ; A
.eh_frame:000000000000970E                 db  0Eh
.eh_frame:000000000000970F                 db    8
.eh_frame:0000000000009710                 db  46h ; F
.eh_frame:0000000000009711                 db  0Bh
.eh_frame:0000000000009712                 db    0
.eh_frame:0000000000009713                 db    0
.eh_frame:0000000000009714                 db  48h ; H
.eh_frame:0000000000009715                 db    0
.eh_frame:0000000000009716                 db    0
.eh_frame:0000000000009717                 db    0
.eh_frame:0000000000009718                 db 0D8h
.eh_frame:0000000000009719                 db  0Bh
.eh_frame:000000000000971A                 db    0
.eh_frame:000000000000971B                 db    0
.eh_frame:000000000000971C                 db 0C4h
.eh_frame:000000000000971D                 db 0D8h
.eh_frame:000000000000971E                 db 0FFh
.eh_frame:000000000000971F                 db 0FFh
.eh_frame:0000000000009720                 db  89h
.eh_frame:0000000000009721                 db    1
.eh_frame:0000000000009722                 db    0
.eh_frame:0000000000009723                 db    0
.eh_frame:0000000000009724                 db    0
.eh_frame:0000000000009725                 db  42h ; B
.eh_frame:0000000000009726                 db  0Eh
.eh_frame:0000000000009727                 db  10h
.eh_frame:0000000000009728                 db  8Fh
.eh_frame:0000000000009729                 db    2
.eh_frame:000000000000972A                 db  42h ; B
.eh_frame:000000000000972B                 db  0Eh
.eh_frame:000000000000972C                 db  18h
.eh_frame:000000000000972D                 db  8Eh
.eh_frame:000000000000972E                 db    3
.eh_frame:000000000000972F                 db  45h ; E
.eh_frame:0000000000009730                 db  0Eh
.eh_frame:0000000000009731                 db  20h
.eh_frame:0000000000009732                 db  8Dh
.eh_frame:0000000000009733                 db    4
.eh_frame:0000000000009734                 db  45h ; E
.eh_frame:0000000000009735                 db  0Eh
.eh_frame:0000000000009736                 db  28h ; (
.eh_frame:0000000000009737                 db  8Ch
.eh_frame:0000000000009738                 db    5
.eh_frame:0000000000009739                 db  41h ; A
.eh_frame:000000000000973A                 db  0Eh
.eh_frame:000000000000973B                 db  30h ; 0
.eh_frame:000000000000973C                 db  86h
.eh_frame:000000000000973D                 db    6
.eh_frame:000000000000973E                 db  41h ; A
.eh_frame:000000000000973F                 db  0Eh
.eh_frame:0000000000009740                 db  38h ; 8
.eh_frame:0000000000009741                 db  83h
.eh_frame:0000000000009742                 db    7
.eh_frame:0000000000009743                 db  4Fh ; O
.eh_frame:0000000000009744                 db  0Eh
.eh_frame:0000000000009745                 db  50h ; P
.eh_frame:0000000000009746                 db    2
.eh_frame:0000000000009747                 db 0AAh
.eh_frame:0000000000009748                 db  0Ah
.eh_frame:0000000000009749                 db  0Eh
.eh_frame:000000000000974A                 db  38h ; 8
.eh_frame:000000000000974B                 db  43h ; C
.eh_frame:000000000000974C                 db  0Eh
.eh_frame:000000000000974D                 db  30h ; 0
.eh_frame:000000000000974E                 db  41h ; A
.eh_frame:000000000000974F                 db  0Eh
.eh_frame:0000000000009750                 db  28h ; (
.eh_frame:0000000000009751                 db  42h ; B
.eh_frame:0000000000009752                 db  0Eh
.eh_frame:0000000000009753                 db  20h
.eh_frame:0000000000009754                 db  42h ; B
.eh_frame:0000000000009755                 db  0Eh
.eh_frame:0000000000009756                 db  18h
.eh_frame:0000000000009757                 db  42h ; B
.eh_frame:0000000000009758                 db  0Eh
.eh_frame:0000000000009759                 db  10h
.eh_frame:000000000000975A                 db  42h ; B
.eh_frame:000000000000975B                 db  0Eh
.eh_frame:000000000000975C                 db    8
.eh_frame:000000000000975D                 db  4Bh ; K
.eh_frame:000000000000975E                 db  0Bh
.eh_frame:000000000000975F                 db    0
.eh_frame:0000000000009760                 db  10h
.eh_frame:0000000000009761                 db    0
.eh_frame:0000000000009762                 db    0
.eh_frame:0000000000009763                 db    0
.eh_frame:0000000000009764                 db  24h ; $
.eh_frame:0000000000009765                 db  0Ch
.eh_frame:0000000000009766                 db    0
.eh_frame:0000000000009767                 db    0
.eh_frame:0000000000009768                 db    8
.eh_frame:0000000000009769                 db 0DAh
.eh_frame:000000000000976A                 db 0FFh
.eh_frame:000000000000976B                 db 0FFh
.eh_frame:000000000000976C                 db  2Ch ; ,
.eh_frame:000000000000976D                 db    0
.eh_frame:000000000000976E                 db    0
.eh_frame:000000000000976F                 db    0
.eh_frame:0000000000009770                 db    0
.eh_frame:0000000000009771                 db    0
.eh_frame:0000000000009772                 db    0
.eh_frame:0000000000009773                 db    0
.eh_frame:0000000000009774                 db  18h
.eh_frame:0000000000009775                 db    0
.eh_frame:0000000000009776                 db    0
.eh_frame:0000000000009777                 db    0
.eh_frame:0000000000009778                 db  38h ; 8
.eh_frame:0000000000009779                 db  0Ch
.eh_frame:000000000000977A                 db    0
.eh_frame:000000000000977B                 db    0
.eh_frame:000000000000977C                 db  24h ; $
.eh_frame:000000000000977D                 db 0DAh
.eh_frame:000000000000977E                 db 0FFh
.eh_frame:000000000000977F                 db 0FFh
.eh_frame:0000000000009780                 db  2Ah ; *
.eh_frame:0000000000009781                 db    0
.eh_frame:0000000000009782                 db    0
.eh_frame:0000000000009783                 db    0
.eh_frame:0000000000009784                 db    0
.eh_frame:0000000000009785                 db  46h ; F
.eh_frame:0000000000009786                 db  0Eh
.eh_frame:0000000000009787                 db  10h
.eh_frame:0000000000009788                 db  83h
.eh_frame:0000000000009789                 db    2
.eh_frame:000000000000978A                 db  5Bh ; [
.eh_frame:000000000000978B                 db  0Eh
.eh_frame:000000000000978C                 db    8
.eh_frame:000000000000978D                 db  47h ; G
.eh_frame:000000000000978E                 db 0C3h
.eh_frame:000000000000978F                 db    0
.eh_frame:0000000000009790                 db  38h ; 8
.eh_frame:0000000000009791                 db    0
.eh_frame:0000000000009792                 db    0
.eh_frame:0000000000009793                 db    0
.eh_frame:0000000000009794                 db  54h ; T
.eh_frame:0000000000009795                 db  0Ch
.eh_frame:0000000000009796                 db    0
.eh_frame:0000000000009797                 db    0
.eh_frame:0000000000009798                 db  38h ; 8
.eh_frame:0000000000009799                 db 0DAh
.eh_frame:000000000000979A                 db 0FFh
.eh_frame:000000000000979B                 db 0FFh
.eh_frame:000000000000979C                 db  5Dh ; ]
.eh_frame:000000000000979D                 db    0
.eh_frame:000000000000979E                 db    0
.eh_frame:000000000000979F                 db    0
.eh_frame:00000000000097A0                 db    0
.eh_frame:00000000000097A1                 db  42h ; B
.eh_frame:00000000000097A2                 db  0Eh
.eh_frame:00000000000097A3                 db  10h
.eh_frame:00000000000097A4                 db  8Dh
.eh_frame:00000000000097A5                 db    2
.eh_frame:00000000000097A6                 db  42h ; B
.eh_frame:00000000000097A7                 db  0Eh
.eh_frame:00000000000097A8                 db  18h
.eh_frame:00000000000097A9                 db  8Ch
.eh_frame:00000000000097AA                 db    3
.eh_frame:00000000000097AB                 db  41h ; A
.eh_frame:00000000000097AC                 db  0Eh
.eh_frame:00000000000097AD                 db  20h
.eh_frame:00000000000097AE                 db  86h
.eh_frame:00000000000097AF                 db    4
.eh_frame:00000000000097B0                 db  41h ; A
.eh_frame:00000000000097B1                 db  0Eh
.eh_frame:00000000000097B2                 db  28h ; (
.eh_frame:00000000000097B3                 db  83h
.eh_frame:00000000000097B4                 db    5
.eh_frame:00000000000097B5                 db  47h ; G
.eh_frame:00000000000097B6                 db  0Eh
.eh_frame:00000000000097B7                 db  30h ; 0
.eh_frame:00000000000097B8                 db  75h ; u
.eh_frame:00000000000097B9                 db  0Ah
.eh_frame:00000000000097BA                 db  0Eh
.eh_frame:00000000000097BB                 db  28h ; (
.eh_frame:00000000000097BC                 db  44h ; D
.eh_frame:00000000000097BD                 db  0Eh
.eh_frame:00000000000097BE                 db  20h
.eh_frame:00000000000097BF                 db  41h ; A
.eh_frame:00000000000097C0                 db  0Eh
.eh_frame:00000000000097C1                 db  18h
.eh_frame:00000000000097C2                 db  42h ; B
.eh_frame:00000000000097C3                 db  0Eh
.eh_frame:00000000000097C4                 db  10h
.eh_frame:00000000000097C5                 db  42h ; B
.eh_frame:00000000000097C6                 db  0Eh
.eh_frame:00000000000097C7                 db    8
.eh_frame:00000000000097C8                 db  45h ; E
.eh_frame:00000000000097C9                 db  0Bh
.eh_frame:00000000000097CA                 db    0
.eh_frame:00000000000097CB                 db    0
.eh_frame:00000000000097CC                 db  34h ; 4
.eh_frame:00000000000097CD                 db    0
.eh_frame:00000000000097CE                 db    0
.eh_frame:00000000000097CF                 db    0
.eh_frame:00000000000097D0                 db  90h
.eh_frame:00000000000097D1                 db  0Ch
.eh_frame:00000000000097D2                 db    0
.eh_frame:00000000000097D3                 db    0
.eh_frame:00000000000097D4                 db  5Ch ; \
.eh_frame:00000000000097D5                 db 0DAh
.eh_frame:00000000000097D6                 db 0FFh
.eh_frame:00000000000097D7                 db 0FFh
.eh_frame:00000000000097D8                 db  8Fh
.eh_frame:00000000000097D9                 db    0
.eh_frame:00000000000097DA                 db    0
.eh_frame:00000000000097DB                 db    0
.eh_frame:00000000000097DC                 db    0
.eh_frame:00000000000097DD                 db  45h ; E
.eh_frame:00000000000097DE                 db  0Eh
.eh_frame:00000000000097DF                 db  10h
.eh_frame:00000000000097E0                 db  8Ch
.eh_frame:00000000000097E1                 db    2
.eh_frame:00000000000097E2                 db  41h ; A
.eh_frame:00000000000097E3                 db  0Eh
.eh_frame:00000000000097E4                 db  18h
.eh_frame:00000000000097E5                 db  86h
.eh_frame:00000000000097E6                 db    3
.eh_frame:00000000000097E7                 db  41h ; A
.eh_frame:00000000000097E8                 db  0Eh
.eh_frame:00000000000097E9                 db  20h
.eh_frame:00000000000097EA                 db  83h
.eh_frame:00000000000097EB                 db    4
.eh_frame:00000000000097EC                 db    2
.eh_frame:00000000000097ED                 db  58h ; X
.eh_frame:00000000000097EE                 db  0Ah
.eh_frame:00000000000097EF                 db  0Eh
.eh_frame:00000000000097F0                 db  18h
.eh_frame:00000000000097F1                 db  41h ; A
.eh_frame:00000000000097F2                 db  0Eh
.eh_frame:00000000000097F3                 db  10h
.eh_frame:00000000000097F4                 db  42h ; B
.eh_frame:00000000000097F5                 db  0Eh
.eh_frame:00000000000097F6                 db    8
.eh_frame:00000000000097F7                 db  46h ; F
.eh_frame:00000000000097F8                 db  0Bh
.eh_frame:00000000000097F9                 db  63h ; c
.eh_frame:00000000000097FA                 db  0Eh
.eh_frame:00000000000097FB                 db  18h
.eh_frame:00000000000097FC                 db  41h ; A
.eh_frame:00000000000097FD                 db  0Eh
.eh_frame:00000000000097FE                 db  10h
.eh_frame:00000000000097FF                 db  42h ; B
.eh_frame:0000000000009800                 db  0Eh
.eh_frame:0000000000009801                 db    8
.eh_frame:0000000000009802                 db    0
.eh_frame:0000000000009803                 db    0
.eh_frame:0000000000009804                 db  48h ; H
.eh_frame:0000000000009805                 db    0
.eh_frame:0000000000009806                 db    0
.eh_frame:0000000000009807                 db    0
.eh_frame:0000000000009808                 db 0C8h
.eh_frame:0000000000009809                 db  0Ch
.eh_frame:000000000000980A                 db    0
.eh_frame:000000000000980B                 db    0
.eh_frame:000000000000980C                 db 0B4h
.eh_frame:000000000000980D                 db 0DAh
.eh_frame:000000000000980E                 db 0FFh
.eh_frame:000000000000980F                 db 0FFh
.eh_frame:0000000000009810                 db  36h ; 6
.eh_frame:0000000000009811                 db    1
.eh_frame:0000000000009812                 db    0
.eh_frame:0000000000009813                 db    0
.eh_frame:0000000000009814                 db    0
.eh_frame:0000000000009815                 db  42h ; B
.eh_frame:0000000000009816                 db  0Eh
.eh_frame:0000000000009817                 db  10h
.eh_frame:0000000000009818                 db  8Fh
.eh_frame:0000000000009819                 db    2
.eh_frame:000000000000981A                 db  42h ; B
.eh_frame:000000000000981B                 db  0Eh
.eh_frame:000000000000981C                 db  18h
.eh_frame:000000000000981D                 db  8Eh
.eh_frame:000000000000981E                 db    3
.eh_frame:000000000000981F                 db  47h ; G
.eh_frame:0000000000009820                 db  0Eh
.eh_frame:0000000000009821                 db  20h
.eh_frame:0000000000009822                 db  8Dh
.eh_frame:0000000000009823                 db    4
.eh_frame:0000000000009824                 db  42h ; B
.eh_frame:0000000000009825                 db  0Eh
.eh_frame:0000000000009826                 db  28h ; (
.eh_frame:0000000000009827                 db  8Ch
.eh_frame:0000000000009828                 db    5
.eh_frame:0000000000009829                 db  41h ; A
.eh_frame:000000000000982A                 db  0Eh
.eh_frame:000000000000982B                 db  30h ; 0
.eh_frame:000000000000982C                 db  86h
.eh_frame:000000000000982D                 db    6
.eh_frame:000000000000982E                 db  41h ; A
.eh_frame:000000000000982F                 db  0Eh
.eh_frame:0000000000009830                 db  38h ; 8
.eh_frame:0000000000009831                 db  83h
.eh_frame:0000000000009832                 db    7
.eh_frame:0000000000009833                 db  44h ; D
.eh_frame:0000000000009834                 db  0Eh
.eh_frame:0000000000009835                 db  40h ; @
.eh_frame:0000000000009836                 db    2
.eh_frame:0000000000009837                 db 0A1h
.eh_frame:0000000000009838                 db  0Ah
.eh_frame:0000000000009839                 db  0Eh
.eh_frame:000000000000983A                 db  38h ; 8
.eh_frame:000000000000983B                 db  41h ; A
.eh_frame:000000000000983C                 db  0Eh
.eh_frame:000000000000983D                 db  30h ; 0
.eh_frame:000000000000983E                 db  41h ; A
.eh_frame:000000000000983F                 db  0Eh
.eh_frame:0000000000009840                 db  28h ; (
.eh_frame:0000000000009841                 db  42h ; B
.eh_frame:0000000000009842                 db  0Eh
.eh_frame:0000000000009843                 db  20h
.eh_frame:0000000000009844                 db  42h ; B
.eh_frame:0000000000009845                 db  0Eh
.eh_frame:0000000000009846                 db  18h
.eh_frame:0000000000009847                 db  42h ; B
.eh_frame:0000000000009848                 db  0Eh
.eh_frame:0000000000009849                 db  10h
.eh_frame:000000000000984A                 db  42h ; B
.eh_frame:000000000000984B                 db  0Eh
.eh_frame:000000000000984C                 db    8
.eh_frame:000000000000984D                 db  42h ; B
.eh_frame:000000000000984E                 db  0Bh
.eh_frame:000000000000984F                 db    0
.eh_frame:0000000000009850                 db  50h ; P
.eh_frame:0000000000009851                 db    0
.eh_frame:0000000000009852                 db    0
.eh_frame:0000000000009853                 db    0
.eh_frame:0000000000009854                 db  14h
.eh_frame:0000000000009855                 db  0Dh
.eh_frame:0000000000009856                 db    0
.eh_frame:0000000000009857                 db    0
.eh_frame:0000000000009858                 db 0A8h
.eh_frame:0000000000009859                 db 0DBh
.eh_frame:000000000000985A                 db 0FFh
.eh_frame:000000000000985B                 db 0FFh
.eh_frame:000000000000985C                 db 0DFh
.eh_frame:000000000000985D                 db    0
.eh_frame:000000000000985E                 db    0
.eh_frame:000000000000985F                 db    0
.eh_frame:0000000000009860                 db    0
.eh_frame:0000000000009861                 db  42h ; B
.eh_frame:0000000000009862                 db  0Eh
.eh_frame:0000000000009863                 db  10h
.eh_frame:0000000000009864                 db  8Ch
.eh_frame:0000000000009865                 db    2
.eh_frame:0000000000009866                 db  41h ; A
.eh_frame:0000000000009867                 db  0Eh
.eh_frame:0000000000009868                 db  18h
.eh_frame:0000000000009869                 db  86h
.eh_frame:000000000000986A                 db    3
.eh_frame:000000000000986B                 db  44h ; D
.eh_frame:000000000000986C                 db  0Eh
.eh_frame:000000000000986D                 db  20h
.eh_frame:000000000000986E                 db  83h
.eh_frame:000000000000986F                 db    4
.eh_frame:0000000000009870                 db  4Bh ; K
.eh_frame:0000000000009871                 db  0Eh
.eh_frame:0000000000009872                 db  30h ; 0
.eh_frame:0000000000009873                 db    2
.eh_frame:0000000000009874                 db  6Fh ; o
.eh_frame:0000000000009875                 db  0Ah
.eh_frame:0000000000009876                 db  0Eh
.eh_frame:0000000000009877                 db  20h
.eh_frame:0000000000009878                 db  44h ; D
.eh_frame:0000000000009879                 db  0Eh
.eh_frame:000000000000987A                 db  18h
.eh_frame:000000000000987B                 db  41h ; A
.eh_frame:000000000000987C                 db  0Eh
.eh_frame:000000000000987D                 db  10h
.eh_frame:000000000000987E                 db  42h ; B
.eh_frame:000000000000987F                 db  0Eh
.eh_frame:0000000000009880                 db    8
.eh_frame:0000000000009881                 db  48h ; H
.eh_frame:0000000000009882                 db  0Bh
.eh_frame:0000000000009883                 db  5Ah ; Z
.eh_frame:0000000000009884                 db  0Ah
.eh_frame:0000000000009885                 db  0Eh
.eh_frame:0000000000009886                 db  20h
.eh_frame:0000000000009887                 db  44h ; D
.eh_frame:0000000000009888                 db  0Eh
.eh_frame:0000000000009889                 db  18h
.eh_frame:000000000000988A                 db  41h ; A
.eh_frame:000000000000988B                 db  0Eh
.eh_frame:000000000000988C                 db  10h
.eh_frame:000000000000988D                 db  42h ; B
.eh_frame:000000000000988E                 db  0Eh
.eh_frame:000000000000988F                 db    8
.eh_frame:0000000000009890                 db  47h ; G
.eh_frame:0000000000009891                 db  0Bh
.eh_frame:0000000000009892                 db  54h ; T
.eh_frame:0000000000009893                 db  0Ah
.eh_frame:0000000000009894                 db  0Eh
.eh_frame:0000000000009895                 db  20h
.eh_frame:0000000000009896                 db  44h ; D
.eh_frame:0000000000009897                 db  0Eh
.eh_frame:0000000000009898                 db  18h
.eh_frame:0000000000009899                 db  41h ; A
.eh_frame:000000000000989A                 db  0Eh
.eh_frame:000000000000989B                 db  10h
.eh_frame:000000000000989C                 db  42h ; B
.eh_frame:000000000000989D                 db  0Eh
.eh_frame:000000000000989E                 db    8
.eh_frame:000000000000989F                 db  45h ; E
.eh_frame:00000000000098A0                 db  0Bh
.eh_frame:00000000000098A1                 db    0
.eh_frame:00000000000098A2                 db    0
.eh_frame:00000000000098A3                 db    0
.eh_frame:00000000000098A4                 db  10h
.eh_frame:00000000000098A5                 db    0
.eh_frame:00000000000098A6                 db    0
.eh_frame:00000000000098A7                 db    0
.eh_frame:00000000000098A8                 db  68h ; h
.eh_frame:00000000000098A9                 db  0Dh
.eh_frame:00000000000098AA                 db    0
.eh_frame:00000000000098AB                 db    0
.eh_frame:00000000000098AC                 db  34h ; 4
.eh_frame:00000000000098AD                 db 0DCh
.eh_frame:00000000000098AE                 db 0FFh
.eh_frame:00000000000098AF                 db 0FFh
.eh_frame:00000000000098B0                 db  0Ch
.eh_frame:00000000000098B1                 db    0
.eh_frame:00000000000098B2                 db    0
.eh_frame:00000000000098B3                 db    0
.eh_frame:00000000000098B4                 db    0
.eh_frame:00000000000098B5                 db    0
.eh_frame:00000000000098B6                 db    0
.eh_frame:00000000000098B7                 db    0
.eh_frame:00000000000098B8                 db  5Ch ; \
.eh_frame:00000000000098B9                 db    0
.eh_frame:00000000000098BA                 db    0
.eh_frame:00000000000098BB                 db    0
.eh_frame:00000000000098BC                 db  7Ch ; |
.eh_frame:00000000000098BD                 db  0Dh
.eh_frame:00000000000098BE                 db    0
.eh_frame:00000000000098BF                 db    0
.eh_frame:00000000000098C0                 db  30h ; 0
.eh_frame:00000000000098C1                 db 0DCh
.eh_frame:00000000000098C2                 db 0FFh
.eh_frame:00000000000098C3                 db 0FFh
.eh_frame:00000000000098C4                 db 0A3h
.eh_frame:00000000000098C5                 db    0
.eh_frame:00000000000098C6                 db    0
.eh_frame:00000000000098C7                 db    0
.eh_frame:00000000000098C8                 db    0
.eh_frame:00000000000098C9                 db  42h ; B
.eh_frame:00000000000098CA                 db  0Eh
.eh_frame:00000000000098CB                 db  10h
.eh_frame:00000000000098CC                 db  8Dh
.eh_frame:00000000000098CD                 db    2
.eh_frame:00000000000098CE                 db  42h ; B
.eh_frame:00000000000098CF                 db  0Eh
.eh_frame:00000000000098D0                 db  18h
.eh_frame:00000000000098D1                 db  8Ch
.eh_frame:00000000000098D2                 db    3
.eh_frame:00000000000098D3                 db  41h ; A
.eh_frame:00000000000098D4                 db  0Eh
.eh_frame:00000000000098D5                 db  20h
.eh_frame:00000000000098D6                 db  86h
.eh_frame:00000000000098D7                 db    4
.eh_frame:00000000000098D8                 db  41h ; A
.eh_frame:00000000000098D9                 db  0Eh
.eh_frame:00000000000098DA                 db  28h ; (
.eh_frame:00000000000098DB                 db  83h
.eh_frame:00000000000098DC                 db    5
.eh_frame:00000000000098DD                 db  47h ; G
.eh_frame:00000000000098DE                 db  0Eh
.eh_frame:00000000000098DF                 db  30h ; 0
.eh_frame:00000000000098E0                 db    2
.eh_frame:00000000000098E1                 db  41h ; A
.eh_frame:00000000000098E2                 db  0Ah
.eh_frame:00000000000098E3                 db  0Eh
.eh_frame:00000000000098E4                 db  28h ; (
.eh_frame:00000000000098E5                 db  44h ; D
.eh_frame:00000000000098E6                 db  0Eh
.eh_frame:00000000000098E7                 db  20h
.eh_frame:00000000000098E8                 db  41h ; A
.eh_frame:00000000000098E9                 db  0Eh
.eh_frame:00000000000098EA                 db  18h
.eh_frame:00000000000098EB                 db  42h ; B
.eh_frame:00000000000098EC                 db  0Eh
.eh_frame:00000000000098ED                 db  10h
.eh_frame:00000000000098EE                 db  42h ; B
.eh_frame:00000000000098EF                 db  0Eh
.eh_frame:00000000000098F0                 db    8
.eh_frame:00000000000098F1                 db  49h ; I
.eh_frame:00000000000098F2                 db  0Bh
.eh_frame:00000000000098F3                 db  52h ; R
.eh_frame:00000000000098F4                 db  0Ah
.eh_frame:00000000000098F5                 db  0Eh
.eh_frame:00000000000098F6                 db  28h ; (
.eh_frame:00000000000098F7                 db  43h ; C
.eh_frame:00000000000098F8                 db  0Eh
.eh_frame:00000000000098F9                 db  20h
.eh_frame:00000000000098FA                 db  41h ; A
.eh_frame:00000000000098FB                 db  0Eh
.eh_frame:00000000000098FC                 db  18h
.eh_frame:00000000000098FD                 db  42h ; B
.eh_frame:00000000000098FE                 db  0Eh
.eh_frame:00000000000098FF                 db  10h
.eh_frame:0000000000009900                 db  42h ; B
.eh_frame:0000000000009901                 db  0Eh
.eh_frame:0000000000009902                 db    8
.eh_frame:0000000000009903                 db  46h ; F
.eh_frame:0000000000009904                 db  0Bh
.eh_frame:0000000000009905                 db  44h ; D
.eh_frame:0000000000009906                 db  0Ah
.eh_frame:0000000000009907                 db  0Eh
.eh_frame:0000000000009908                 db  28h ; (
.eh_frame:0000000000009909                 db  47h ; G
.eh_frame:000000000000990A                 db  0Eh
.eh_frame:000000000000990B                 db  20h
.eh_frame:000000000000990C                 db  41h ; A
.eh_frame:000000000000990D                 db  0Eh
.eh_frame:000000000000990E                 db  18h
.eh_frame:000000000000990F                 db  42h ; B
.eh_frame:0000000000009910                 db  0Eh
.eh_frame:0000000000009911                 db  10h
.eh_frame:0000000000009912                 db  42h ; B
.eh_frame:0000000000009913                 db  0Eh
.eh_frame:0000000000009914                 db    8
.eh_frame:0000000000009915                 db  45h ; E
.eh_frame:0000000000009916                 db  0Bh
.eh_frame:0000000000009917                 db    0
.eh_frame:0000000000009918                 db  34h ; 4
.eh_frame:0000000000009919                 db    0
.eh_frame:000000000000991A                 db    0
.eh_frame:000000000000991B                 db    0
.eh_frame:000000000000991C                 db 0DCh
.eh_frame:000000000000991D                 db  0Dh
.eh_frame:000000000000991E                 db    0
.eh_frame:000000000000991F                 db    0
.eh_frame:0000000000009920                 db  80h
.eh_frame:0000000000009921                 db 0DCh
.eh_frame:0000000000009922                 db 0FFh
.eh_frame:0000000000009923                 db 0FFh
.eh_frame:0000000000009924                 db  41h ; A
.eh_frame:0000000000009925                 db    1
.eh_frame:0000000000009926                 db    0
.eh_frame:0000000000009927                 db    0
.eh_frame:0000000000009928                 db    0
.eh_frame:0000000000009929                 db  42h ; B
.eh_frame:000000000000992A                 db  0Eh
.eh_frame:000000000000992B                 db  10h
.eh_frame:000000000000992C                 db  8Ch
.eh_frame:000000000000992D                 db    2
.eh_frame:000000000000992E                 db  41h ; A
.eh_frame:000000000000992F                 db  0Eh
.eh_frame:0000000000009930                 db  18h
.eh_frame:0000000000009931                 db  86h
.eh_frame:0000000000009932                 db    3
.eh_frame:0000000000009933                 db  41h ; A
.eh_frame:0000000000009934                 db  0Eh
.eh_frame:0000000000009935                 db  20h
.eh_frame:0000000000009936                 db  83h
.eh_frame:0000000000009937                 db    4
.eh_frame:0000000000009938                 db  47h ; G
.eh_frame:0000000000009939                 db  0Eh
.eh_frame:000000000000993A                 db  70h ; p
.eh_frame:000000000000993B                 db    2
.eh_frame:000000000000993C                 db  8Bh
.eh_frame:000000000000993D                 db  0Ah
.eh_frame:000000000000993E                 db  0Eh
.eh_frame:000000000000993F                 db  20h
.eh_frame:0000000000009940                 db  41h ; A
.eh_frame:0000000000009941                 db  0Eh
.eh_frame:0000000000009942                 db  18h
.eh_frame:0000000000009943                 db  41h ; A
.eh_frame:0000000000009944                 db  0Eh
.eh_frame:0000000000009945                 db  10h
.eh_frame:0000000000009946                 db  42h ; B
.eh_frame:0000000000009947                 db  0Eh
.eh_frame:0000000000009948                 db    8
.eh_frame:0000000000009949                 db  46h ; F
.eh_frame:000000000000994A                 db  0Bh
.eh_frame:000000000000994B                 db    0
.eh_frame:000000000000994C                 db    0
.eh_frame:000000000000994D                 db    0
.eh_frame:000000000000994E                 db    0
.eh_frame:000000000000994F                 db    0
.eh_frame:0000000000009950                 db  4Ch ; L
.eh_frame:0000000000009951                 db    0
.eh_frame:0000000000009952                 db    0
.eh_frame:0000000000009953                 db    0
.eh_frame:0000000000009954                 db  14h
.eh_frame:0000000000009955                 db  0Eh
.eh_frame:0000000000009956                 db    0
.eh_frame:0000000000009957                 db    0
.eh_frame:0000000000009958                 db  98h
.eh_frame:0000000000009959                 db 0DDh
.eh_frame:000000000000995A                 db 0FFh
.eh_frame:000000000000995B                 db 0FFh
.eh_frame:000000000000995C                 db  7Dh ; }
.eh_frame:000000000000995D                 db    0
.eh_frame:000000000000995E                 db    0
.eh_frame:000000000000995F                 db    0
.eh_frame:0000000000009960                 db    0
.eh_frame:0000000000009961                 db  42h ; B
.eh_frame:0000000000009962                 db  0Eh
.eh_frame:0000000000009963                 db  10h
.eh_frame:0000000000009964                 db  8Ch
.eh_frame:0000000000009965                 db    2
.eh_frame:0000000000009966                 db  41h ; A
.eh_frame:0000000000009967                 db  0Eh
.eh_frame:0000000000009968                 db  18h
.eh_frame:0000000000009969                 db  86h
.eh_frame:000000000000996A                 db    3
.eh_frame:000000000000996B                 db  44h ; D
.eh_frame:000000000000996C                 db  0Eh
.eh_frame:000000000000996D                 db  20h
.eh_frame:000000000000996E                 db  83h
.eh_frame:000000000000996F                 db    4
.eh_frame:0000000000009970                 db  69h ; i
.eh_frame:0000000000009971                 db  0Ah
.eh_frame:0000000000009972                 db  0Eh
.eh_frame:0000000000009973                 db  18h
.eh_frame:0000000000009974                 db  41h ; A
.eh_frame:0000000000009975                 db  0Eh
.eh_frame:0000000000009976                 db  10h
.eh_frame:0000000000009977                 db  42h ; B
.eh_frame:0000000000009978                 db  0Eh
.eh_frame:0000000000009979                 db    8
.eh_frame:000000000000997A                 db  45h ; E
.eh_frame:000000000000997B                 db  0Bh
.eh_frame:000000000000997C                 db  55h ; U
.eh_frame:000000000000997D                 db  0Ah
.eh_frame:000000000000997E                 db  0Eh
.eh_frame:000000000000997F                 db  18h
.eh_frame:0000000000009980                 db  41h ; A
.eh_frame:0000000000009981                 db  0Eh
.eh_frame:0000000000009982                 db  10h
.eh_frame:0000000000009983                 db  42h ; B
.eh_frame:0000000000009984                 db  0Eh
.eh_frame:0000000000009985                 db    8
.eh_frame:0000000000009986                 db  48h ; H
.eh_frame:0000000000009987                 db  0Bh
.eh_frame:0000000000009988                 db  41h ; A
.eh_frame:0000000000009989                 db  0Ah
.eh_frame:000000000000998A                 db  0Eh
.eh_frame:000000000000998B                 db  18h
.eh_frame:000000000000998C                 db  46h ; F
.eh_frame:000000000000998D                 db  0Eh
.eh_frame:000000000000998E                 db  10h
.eh_frame:000000000000998F                 db  42h ; B
.eh_frame:0000000000009990                 db  0Eh
.eh_frame:0000000000009991                 db    8
.eh_frame:0000000000009992                 db  47h ; G
.eh_frame:0000000000009993                 db  0Bh
.eh_frame:0000000000009994                 db  49h ; I
.eh_frame:0000000000009995                 db  0Eh
.eh_frame:0000000000009996                 db  18h
.eh_frame:0000000000009997                 db  41h ; A
.eh_frame:0000000000009998                 db  0Eh
.eh_frame:0000000000009999                 db  10h
.eh_frame:000000000000999A                 db  42h ; B
.eh_frame:000000000000999B                 db  0Eh
.eh_frame:000000000000999C                 db    8
.eh_frame:000000000000999D                 db    0
.eh_frame:000000000000999E                 db    0
.eh_frame:000000000000999F                 db    0
.eh_frame:00000000000099A0                 db  1Ch
.eh_frame:00000000000099A1                 db    0
.eh_frame:00000000000099A2                 db    0
.eh_frame:00000000000099A3                 db    0
.eh_frame:00000000000099A4                 db  64h ; d
.eh_frame:00000000000099A5                 db  0Eh
.eh_frame:00000000000099A6                 db    0
.eh_frame:00000000000099A7                 db    0
.eh_frame:00000000000099A8                 db 0C8h
.eh_frame:00000000000099A9                 db 0DDh
.eh_frame:00000000000099AA                 db 0FFh
.eh_frame:00000000000099AB                 db 0FFh
.eh_frame:00000000000099AC                 db  60h ; `
.eh_frame:00000000000099AD                 db    0
.eh_frame:00000000000099AE                 db    0
.eh_frame:00000000000099AF                 db    0
.eh_frame:00000000000099B0                 db    0
.eh_frame:00000000000099B1                 db  44h ; D
.eh_frame:00000000000099B2                 db  0Eh
.eh_frame:00000000000099B3                 db  10h
.eh_frame:00000000000099B4                 db  75h ; u
.eh_frame:00000000000099B5                 db  0Ah
.eh_frame:00000000000099B6                 db  0Eh
.eh_frame:00000000000099B7                 db    8
.eh_frame:00000000000099B8                 db  47h ; G
.eh_frame:00000000000099B9                 db  0Bh
.eh_frame:00000000000099BA                 db  5Fh ; _
.eh_frame:00000000000099BB                 db  0Eh
.eh_frame:00000000000099BC                 db    8
.eh_frame:00000000000099BD                 db    0
.eh_frame:00000000000099BE                 db    0
.eh_frame:00000000000099BF                 db    0
.eh_frame:00000000000099C0                 db  1Ch
.eh_frame:00000000000099C1                 db    0
.eh_frame:00000000000099C2                 db    0
.eh_frame:00000000000099C3                 db    0
.eh_frame:00000000000099C4                 db  84h
.eh_frame:00000000000099C5                 db  0Eh
.eh_frame:00000000000099C6                 db    0
.eh_frame:00000000000099C7                 db    0
.eh_frame:00000000000099C8                 db    8
.eh_frame:00000000000099C9                 db 0DEh
.eh_frame:00000000000099CA                 db 0FFh
.eh_frame:00000000000099CB                 db 0FFh
.eh_frame:00000000000099CC                 db  3Ch ; <
.eh_frame:00000000000099CD                 db    0
.eh_frame:00000000000099CE                 db    0
.eh_frame:00000000000099CF                 db    0
.eh_frame:00000000000099D0                 db    0
.eh_frame:00000000000099D1                 db  44h ; D
.eh_frame:00000000000099D2                 db  0Eh
.eh_frame:00000000000099D3                 db  10h
.eh_frame:00000000000099D4                 db  61h ; a
.eh_frame:00000000000099D5                 db  0Ah
.eh_frame:00000000000099D6                 db  0Eh
.eh_frame:00000000000099D7                 db    8
.eh_frame:00000000000099D8                 db  4Bh ; K
.eh_frame:00000000000099D9                 db  0Bh
.eh_frame:00000000000099DA                 db  4Bh ; K
.eh_frame:00000000000099DB                 db  0Eh
.eh_frame:00000000000099DC                 db    8
.eh_frame:00000000000099DD                 db    0
.eh_frame:00000000000099DE                 db    0
.eh_frame:00000000000099DF                 db    0
.eh_frame:00000000000099E0                 db  44h ; D
.eh_frame:00000000000099E1                 db    0
.eh_frame:00000000000099E2                 db    0
.eh_frame:00000000000099E3                 db    0
.eh_frame:00000000000099E4                 db 0A4h
.eh_frame:00000000000099E5                 db  0Eh
.eh_frame:00000000000099E6                 db    0
.eh_frame:00000000000099E7                 db    0
.eh_frame:00000000000099E8                 db  28h ; (
.eh_frame:00000000000099E9                 db 0DEh
.eh_frame:00000000000099EA                 db 0FFh
.eh_frame:00000000000099EB                 db 0FFh
.eh_frame:00000000000099EC                 db  65h ; e
.eh_frame:00000000000099ED                 db    0
.eh_frame:00000000000099EE                 db    0
.eh_frame:00000000000099EF                 db    0
.eh_frame:00000000000099F0                 db    0
.eh_frame:00000000000099F1                 db  42h ; B
.eh_frame:00000000000099F2                 db  0Eh
.eh_frame:00000000000099F3                 db  10h
.eh_frame:00000000000099F4                 db  8Fh
.eh_frame:00000000000099F5                 db    2
.eh_frame:00000000000099F6                 db  42h ; B
.eh_frame:00000000000099F7                 db  0Eh
.eh_frame:00000000000099F8                 db  18h
.eh_frame:00000000000099F9                 db  8Eh
.eh_frame:00000000000099FA                 db    3
.eh_frame:00000000000099FB                 db  45h ; E
.eh_frame:00000000000099FC                 db  0Eh
.eh_frame:00000000000099FD                 db  20h
.eh_frame:00000000000099FE                 db  8Dh
.eh_frame:00000000000099FF                 db    4
.eh_frame:0000000000009A00                 db  42h ; B
.eh_frame:0000000000009A01                 db  0Eh
.eh_frame:0000000000009A02                 db  28h ; (
.eh_frame:0000000000009A03                 db  8Ch
.eh_frame:0000000000009A04                 db    5
.eh_frame:0000000000009A05                 db  48h ; H
.eh_frame:0000000000009A06                 db  0Eh
.eh_frame:0000000000009A07                 db  30h ; 0
.eh_frame:0000000000009A08                 db  86h
.eh_frame:0000000000009A09                 db    6
.eh_frame:0000000000009A0A                 db  48h ; H
.eh_frame:0000000000009A0B                 db  0Eh
.eh_frame:0000000000009A0C                 db  38h ; 8
.eh_frame:0000000000009A0D                 db  83h
.eh_frame:0000000000009A0E                 db    7
.eh_frame:0000000000009A0F                 db  4Dh ; M
.eh_frame:0000000000009A10                 db  0Eh
.eh_frame:0000000000009A11                 db  40h ; @
.eh_frame:0000000000009A12                 db  72h ; r
.eh_frame:0000000000009A13                 db  0Eh
.eh_frame:0000000000009A14                 db  38h ; 8
.eh_frame:0000000000009A15                 db  41h ; A
.eh_frame:0000000000009A16                 db  0Eh
.eh_frame:0000000000009A17                 db  30h ; 0
.eh_frame:0000000000009A18                 db  41h ; A
.eh_frame:0000000000009A19                 db  0Eh
.eh_frame:0000000000009A1A                 db  28h ; (
.eh_frame:0000000000009A1B                 db  42h ; B
.eh_frame:0000000000009A1C                 db  0Eh
.eh_frame:0000000000009A1D                 db  20h
.eh_frame:0000000000009A1E                 db  42h ; B
.eh_frame:0000000000009A1F                 db  0Eh
.eh_frame:0000000000009A20                 db  18h
.eh_frame:0000000000009A21                 db  42h ; B
.eh_frame:0000000000009A22                 db  0Eh
.eh_frame:0000000000009A23                 db  10h
.eh_frame:0000000000009A24                 db  42h ; B
.eh_frame:0000000000009A25                 db  0Eh
.eh_frame:0000000000009A26                 db    8
.eh_frame:0000000000009A27                 db    0
.eh_frame:0000000000009A28                 db  14h
.eh_frame:0000000000009A29                 db    0
.eh_frame:0000000000009A2A                 db    0
.eh_frame:0000000000009A2B                 db    0
.eh_frame:0000000000009A2C                 db 0ECh
.eh_frame:0000000000009A2D                 db  0Eh
.eh_frame:0000000000009A2E                 db    0
.eh_frame:0000000000009A2F                 db    0
.eh_frame:0000000000009A30                 db  50h ; P
.eh_frame:0000000000009A31                 db 0DEh
.eh_frame:0000000000009A32                 db 0FFh
.eh_frame:0000000000009A33                 db 0FFh
.eh_frame:0000000000009A34                 db    2
.eh_frame:0000000000009A35                 db    0
.eh_frame:0000000000009A36                 db    0
.eh_frame:0000000000009A37                 db    0
.eh_frame:0000000000009A38                 db    0
.eh_frame:0000000000009A39                 db    0
.eh_frame:0000000000009A3A                 db    0
.eh_frame:0000000000009A3B                 db    0
.eh_frame:0000000000009A3C                 db    0
.eh_frame:0000000000009A3D                 db    0
.eh_frame:0000000000009A3E                 db    0
.eh_frame:0000000000009A3F                 db    0
.eh_frame:0000000000009A40                 db  10h
.eh_frame:0000000000009A41                 db    0
.eh_frame:0000000000009A42                 db    0
.eh_frame:0000000000009A43                 db    0
.eh_frame:0000000000009A44                 db    4
.eh_frame:0000000000009A45                 db  0Fh
.eh_frame:0000000000009A46                 db    0
.eh_frame:0000000000009A47                 db    0
.eh_frame:0000000000009A48                 db  48h ; H
.eh_frame:0000000000009A49                 db 0DEh
.eh_frame:0000000000009A4A                 db 0FFh
.eh_frame:0000000000009A4B                 db 0FFh
.eh_frame:0000000000009A4C                 db  0Eh
.eh_frame:0000000000009A4D                 db    0
.eh_frame:0000000000009A4E                 db    0
.eh_frame:0000000000009A4F                 db    0
.eh_frame:0000000000009A50                 db    0
.eh_frame:0000000000009A51                 db    0
.eh_frame:0000000000009A52                 db    0
.eh_frame:0000000000009A53                 db    0
.eh_frame:0000000000009A54 __FRAME_END__   db    0
.eh_frame:0000000000009A55                 db    0
.eh_frame:0000000000009A56                 db    0
.eh_frame:0000000000009A57                 db    0
.eh_frame:0000000000009A57 _eh_frame       ends
.eh_frame:0000000000009A57
.init_array:0000000000209AF0 ; ELF Initialization Function Table
.init_array:0000000000209AF0 ; ===========================================================================
.init_array:0000000000209AF0
.init_array:0000000000209AF0 ; Segment type: Pure data
.init_array:0000000000209AF0 ; Segment permissions: Read/Write
.init_array:0000000000209AF0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209AF0                 assume cs:_init_array
.init_array:0000000000209AF0                 ;org 209AF0h
.init_array:0000000000209AF0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209AF0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209AF0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209AF0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209AF0
.fini_array:0000000000209AF8 ; ELF Termination Function Table
.fini_array:0000000000209AF8 ; ===========================================================================
.fini_array:0000000000209AF8
.fini_array:0000000000209AF8 ; Segment type: Pure data
.fini_array:0000000000209AF8 ; Segment permissions: Read/Write
.fini_array:0000000000209AF8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209AF8                 assume cs:_fini_array
.fini_array:0000000000209AF8                 ;org 209AF8h
.fini_array:0000000000209AF8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209AF8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209AF8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209AF8
.data.rel.ro:0000000000209B00 ; ===========================================================================
.data.rel.ro:0000000000209B00
.data.rel.ro:0000000000209B00 ; Segment type: Pure data
.data.rel.ro:0000000000209B00 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209B00 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209B00                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209B00                 ;org 209B00h
.data.rel.ro:0000000000209B00 ; struct option long_options
.data.rel.ro:0000000000209B00 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000209B00                                         ; DATA XREF: parse_long_options:loc_4620↑o
.data.rel.ro:0000000000209B00                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000209B00                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000209B00                 db 4 dup(0)
.data.rel.ro:0000000000209B00                 dq 0                    ; flag
.data.rel.ro:0000000000209B00                 dd 68h                  ; val
.data.rel.ro:0000000000209B00                 db 4 dup(0)
.data.rel.ro:0000000000209B20                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  76h ; v
.data.rel.ro:0000000000209B39                 db    0
.data.rel.ro:0000000000209B3A                 db    0
.data.rel.ro:0000000000209B3B                 db    0
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 db    0
.data.rel.ro:0000000000209B41                 db    0
.data.rel.ro:0000000000209B42                 db    0
.data.rel.ro:0000000000209B43                 db    0
.data.rel.ro:0000000000209B44                 db    0
.data.rel.ro:0000000000209B45                 db    0
.data.rel.ro:0000000000209B46                 db    0
.data.rel.ro:0000000000209B47                 db    0
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db    0
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 public quoting_style_args
.data.rel.ro:0000000000209B60 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209B68                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209B70                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209B78                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209B80                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209B88                 dq offset aC_0          ; "c"
.data.rel.ro:0000000000209B90                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209B98                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209BA0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209BA8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209BB0                 db    0
.data.rel.ro:0000000000209BB1                 db    0
.data.rel.ro:0000000000209BB2                 db    0
.data.rel.ro:0000000000209BB3                 db    0
.data.rel.ro:0000000000209BB4                 db    0
.data.rel.ro:0000000000209BB5                 db    0
.data.rel.ro:0000000000209BB6                 db    0
.data.rel.ro:0000000000209BB7                 db    0
.data.rel.ro:0000000000209BB7 _data_rel_ro    ends
.data.rel.ro:0000000000209BB7
LOAD:0000000000209BB8 ; ELF Dynamic Information
LOAD:0000000000209BB8 ; ===========================================================================
LOAD:0000000000209BB8
LOAD:0000000000209BB8 ; Segment type: Pure data
LOAD:0000000000209BB8 ; Segment permissions: Read/Write
LOAD:0000000000209BB8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209BB8                 assume cs:LOAD
LOAD:0000000000209BB8                 ;org 209BB8h
LOAD:0000000000209BB8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209BB8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209BB8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209BC8                 Elf64_Dyn <0Ch, 17F8h>  ; DT_INIT
LOAD:0000000000209BD8                 Elf64_Dyn <0Dh, 78A0h>  ; DT_FINI
LOAD:0000000000209BE8                 Elf64_Dyn <19h, 209AF0h> ; DT_INIT_ARRAY
LOAD:0000000000209BF8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C08                 Elf64_Dyn <1Ah, 209AF8h> ; DT_FINI_ARRAY
LOAD:0000000000209C18                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209C28                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209C38                 Elf64_Dyn <5, 0A78h>    ; DT_STRTAB
LOAD:0000000000209C48                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000209C58                 Elf64_Dyn <0Ah, 37Eh>   ; DT_STRSZ
LOAD:0000000000209C68                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209C78                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209C88                 Elf64_Dyn <3, 209DA8h>  ; DT_PLTGOT
LOAD:0000000000209C98                 Elf64_Dyn <2, 648h>     ; DT_PLTRELSZ
LOAD:0000000000209CA8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209CB8                 Elf64_Dyn <17h, 11B0h>  ; DT_JMPREL
LOAD:0000000000209CC8                 Elf64_Dyn <7, 0EF8h>    ; DT_RELA
LOAD:0000000000209CD8                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000209CE8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209CF8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D08                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D18                 Elf64_Dyn <6FFFFFFEh, 0E98h> ; DT_VERNEED
LOAD:0000000000209D28                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209D38                 Elf64_Dyn <6FFFFFF0h, 0DF6h> ; DT_VERSYM
LOAD:0000000000209D48                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000209D58                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209D68                 db    0
LOAD:0000000000209D69                 db    0
LOAD:0000000000209D6A                 db    0
LOAD:0000000000209D6B                 db    0
LOAD:0000000000209D6C                 db    0
LOAD:0000000000209D6D                 db    0
LOAD:0000000000209D6E                 db    0
LOAD:0000000000209D6F                 db    0
LOAD:0000000000209D70                 db    0
LOAD:0000000000209D71                 db    0
LOAD:0000000000209D72                 db    0
LOAD:0000000000209D73                 db    0
LOAD:0000000000209D74                 db    0
LOAD:0000000000209D75                 db    0
LOAD:0000000000209D76                 db    0
LOAD:0000000000209D77                 db    0
LOAD:0000000000209D78                 db    0
LOAD:0000000000209D79                 db    0
LOAD:0000000000209D7A                 db    0
LOAD:0000000000209D7B                 db    0
LOAD:0000000000209D7C                 db    0
LOAD:0000000000209D7D                 db    0
LOAD:0000000000209D7E                 db    0
LOAD:0000000000209D7F                 db    0
LOAD:0000000000209D80                 db    0
LOAD:0000000000209D81                 db    0
LOAD:0000000000209D82                 db    0
LOAD:0000000000209D83                 db    0
LOAD:0000000000209D84                 db    0
LOAD:0000000000209D85                 db    0
LOAD:0000000000209D86                 db    0
LOAD:0000000000209D87                 db    0
LOAD:0000000000209D88                 db    0
LOAD:0000000000209D89                 db    0
LOAD:0000000000209D8A                 db    0
LOAD:0000000000209D8B                 db    0
LOAD:0000000000209D8C                 db    0
LOAD:0000000000209D8D                 db    0
LOAD:0000000000209D8E                 db    0
LOAD:0000000000209D8F                 db    0
LOAD:0000000000209D90                 db    0
LOAD:0000000000209D91                 db    0
LOAD:0000000000209D92                 db    0
LOAD:0000000000209D93                 db    0
LOAD:0000000000209D94                 db    0
LOAD:0000000000209D95                 db    0
LOAD:0000000000209D96                 db    0
LOAD:0000000000209D97                 db    0
LOAD:0000000000209D98                 db    0
LOAD:0000000000209D99                 db    0
LOAD:0000000000209D9A                 db    0
LOAD:0000000000209D9B                 db    0
LOAD:0000000000209D9C                 db    0
LOAD:0000000000209D9D                 db    0
LOAD:0000000000209D9E                 db    0
LOAD:0000000000209D9F                 db    0
LOAD:0000000000209DA0                 db    0
LOAD:0000000000209DA1                 db    0
LOAD:0000000000209DA2                 db    0
LOAD:0000000000209DA3                 db    0
LOAD:0000000000209DA4                 db    0
LOAD:0000000000209DA5                 db    0
LOAD:0000000000209DA6                 db    0
LOAD:0000000000209DA7                 db    0
LOAD:0000000000209DA7 LOAD            ends
LOAD:0000000000209DA7
.got:0000000000209DA8 ; ===========================================================================
.got:0000000000209DA8
.got:0000000000209DA8 ; Segment type: Pure data
.got:0000000000209DA8 ; Segment permissions: Read/Write
.got:0000000000209DA8 _got            segment qword public 'DATA' use64
.got:0000000000209DA8                 assume cs:_got
.got:0000000000209DA8                 ;org 209DA8h
.got:0000000000209DA8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209DB0 qword_209DB0    dq 0                    ; DATA XREF: sub_1810↑r
.got:0000000000209DB8 qword_209DB8    dq 0                    ; DATA XREF: sub_1810+6↑r
.got:0000000000209DC0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000209DC0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000209DC8 utmpxname_ptr   dq offset utmpxname     ; DATA XREF: _utmpxname↑r
.got:0000000000209DD0 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000209DD8 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209DE0 localtime_ptr   dq offset localtime     ; DATA XREF: _localtime↑r
.got:0000000000209DE8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209DF0 __errno_location_ptr dq offset __errno_location
.got:0000000000209DF0                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209DF8 strncpy_ptr     dq offset strncpy       ; DATA XREF: _strncpy↑r
.got:0000000000209E00 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E08 localtime_r_ptr dq offset localtime_r   ; DATA XREF: _localtime_r↑r
.got:0000000000209E10 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E18 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E20 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:0000000000209E28 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E30 endutxent_ptr   dq offset endutxent     ; DATA XREF: _endutxent↑r
.got:0000000000209E38 strtod_l_ptr    dq offset strtod_l      ; DATA XREF: _strtod_l↑r
.got:0000000000209E40 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E48 getloadavg_ptr  dq offset getloadavg    ; DATA XREF: _getloadavg↑r
.got:0000000000209E50 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E50                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E58 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E60 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E60                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209E68 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209E70 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209E70                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209E78 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209E80 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209E88 newlocale_ptr   dq offset newlocale     ; DATA XREF: _newlocale↑r
.got:0000000000209E90 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000209E98 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209EA0 gmtime_r_ptr    dq offset gmtime_r      ; DATA XREF: _gmtime_r↑r
.got:0000000000209EA8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209EB0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EB8 fputc_ptr       dq offset fputc         ; DATA XREF: _fputc↑r
.got:0000000000209EC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209EC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209EC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209ED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209ED8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000209EE0 setutxent_ptr   dq offset setutxent     ; DATA XREF: _setutxent↑r
.got:0000000000209EE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209EF0 tzset_ptr       dq offset tzset         ; DATA XREF: _tzset↑r
.got:0000000000209EF8 kill_ptr        dq offset kill          ; DATA XREF: _kill↑r
.got:0000000000209F00 time_ptr        dq offset time          ; DATA XREF: _time↑r
.got:0000000000209F08 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F10 fgets_unlocked_ptr dq offset fgets_unlocked
.got:0000000000209F10                                         ; DATA XREF: _fgets_unlocked↑r
.got:0000000000209F18 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F20 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F28 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F30 mktime_ptr      dq offset mktime        ; DATA XREF: _mktime↑r
.got:0000000000209F38 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F40 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F48 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F50 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F58 timegm_ptr      dq offset timegm        ; DATA XREF: _timegm↑r
.got:0000000000209F60 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:0000000000209F68 getutxent_ptr   dq offset getutxent     ; DATA XREF: _getutxent↑r
.got:0000000000209F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F80 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000209F88 dcngettext_ptr  dq offset dcngettext    ; DATA XREF: _dcngettext↑r
.got:0000000000209F90 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:0000000000209F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FC8 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000209FC8                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000209FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FE0                                         ; DATA XREF: start+24↑r
.got:0000000000209FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FF8 _got            ends
.got:0000000000209FF8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+5A↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public exit_failure
.data:000000000020A018 ; int exit_failure
.data:000000000020A018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2812↑r
.data:000000000020A018                                         ; parse_gnu_standard_options_only:loc_47B0↑r ...
.data:000000000020A01C                 align 20h
.data:000000000020A020                 public quote_quoting_options
.data:000000000020A020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A020                                         ; quote_mem↑o ...
.data:000000000020A021                 db    0
.data:000000000020A022                 db    0
.data:000000000020A023                 db    0
.data:000000000020A024                 db    0
.data:000000000020A025                 db    0
.data:000000000020A026                 db    0
.data:000000000020A027                 db    0
.data:000000000020A028                 db    0
.data:000000000020A029                 db    0
.data:000000000020A02A                 db    0
.data:000000000020A02B                 db    0
.data:000000000020A02C                 db    0
.data:000000000020A02D                 db    0
.data:000000000020A02E                 db    0
.data:000000000020A02F                 db    0
.data:000000000020A030                 db    0
.data:000000000020A031                 db    0
.data:000000000020A032                 db    0
.data:000000000020A033                 db    0
.data:000000000020A034                 db    0
.data:000000000020A035                 db    0
.data:000000000020A036                 db    0
.data:000000000020A037                 db    0
.data:000000000020A038                 db    0
.data:000000000020A039                 db    0
.data:000000000020A03A                 db    0
.data:000000000020A03B                 db    0
.data:000000000020A03C                 db    0
.data:000000000020A03D                 db    0
.data:000000000020A03E                 db    0
.data:000000000020A03F                 db    0
.data:000000000020A040                 db    0
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A058                                         ; quotearg_n_options:loc_5C3D↑r ...
.data:000000000020A05C                 align 20h
.data:000000000020A060 ; void *slotvec
.data:000000000020A060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A060                                         ; quotearg_n_options+76↑w ...
.data:000000000020A068                 align 10h
.data:000000000020A070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A070                                         ; quotearg_n_options+187↑r ...
.data:000000000020A078 off_20A078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A078 _data           ends
.data:000000000020A078
.bss:000000000020A080 ; ===========================================================================
.bss:000000000020A080
.bss:000000000020A080 ; Segment type: Uninitialized
.bss:000000000020A080 ; Segment permissions: Read/Write
.bss:000000000020A080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A080                 assume cs:_bss
.bss:000000000020A080                 ;org 20A080h
.bss:000000000020A080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A080                 public __bss_start ; weak
.bss:000000000020A080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000009D0↑o
.bss:000000000020A080                                         ; LOAD:0000000000000A18↑o ...
.bss:000000000020A080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A080                                         ; _edata
.bss:000000000020A080                                         ; Copy of shared data
.bss:000000000020A088                 public stdout@@GLIBC_2_2_5
.bss:000000000020A088 ; FILE *stdout
.bss:000000000020A088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:000000000020A088                                         ; print_uptime+184↑r ...
.bss:000000000020A088                                         ; Alternative name is 'stdout'
.bss:000000000020A088                                         ; Copy of shared data
.bss:000000000020A090                 public optind@@GLIBC_2_2_5
.bss:000000000020A090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A60↑o
.bss:000000000020A090                                         ; main+9C↑r ...
.bss:000000000020A090                                         ; Alternative name is 'optind'
.bss:000000000020A090                                         ; Copy of shared data
.bss:000000000020A094                 align 8
.bss:000000000020A098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A098                                         ; DATA XREF: LOAD:00000000000009E8↑o
.bss:000000000020A098                                         ; LOAD:0000000000000A00↑o ...
.bss:000000000020A098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A098                                         ; Copy of shared data
.bss:000000000020A0A0                 public opterr@@GLIBC_2_2_5
.bss:000000000020A0A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A30↑o
.bss:000000000020A0A0                                         ; parse_long_options+67↑r ...
.bss:000000000020A0A0                                         ; Alternative name is 'opterr'
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A4                 align 20h
.bss:000000000020A0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0C0 ; FILE *stderr
.bss:000000000020A0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A48↑o
.bss:000000000020A0C0                                         ; usage+3D↑r ...
.bss:000000000020A0C0                                         ; Alternative name is 'stderr'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0C9                 align 10h
.bss:000000000020A0D0 ; __locale_t c_locale_cache
.bss:000000000020A0D0 c_locale_cache  dq ?                    ; DATA XREF: c_strtod+C↑r
.bss:000000000020A0D0                                         ; c_strtod:loc_2718↑r ...
.bss:000000000020A0D8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A0D8                                         ; close_stdout+1B↑r
.bss:000000000020A0D9                 align 20h
.bss:000000000020A0E0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A0E0                                         ; close_stdout+56↑r
.bss:000000000020A0E8                 public program_name
.bss:000000000020A0E8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A0E8                                         ; set_program_name:loc_485D↑w
.bss:000000000020A0F0                 align 20h
.bss:000000000020A100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A100                                         ; quotearg_free+46↑o ...
.bss:000000000020A101                 db    ? ;
.bss:000000000020A102                 db    ? ;
.bss:000000000020A103                 db    ? ;
.bss:000000000020A104                 db    ? ;
.bss:000000000020A105                 db    ? ;
.bss:000000000020A106                 db    ? ;
.bss:000000000020A107                 db    ? ;
.bss:000000000020A108                 db    ? ;
.bss:000000000020A109                 db    ? ;
.bss:000000000020A10A                 db    ? ;
.bss:000000000020A10B                 db    ? ;
.bss:000000000020A10C                 db    ? ;
.bss:000000000020A10D                 db    ? ;
.bss:000000000020A10E                 db    ? ;
.bss:000000000020A10F                 db    ? ;
.bss:000000000020A110                 db    ? ;
.bss:000000000020A111                 db    ? ;
.bss:000000000020A112                 db    ? ;
.bss:000000000020A113                 db    ? ;
.bss:000000000020A114                 db    ? ;
.bss:000000000020A115                 db    ? ;
.bss:000000000020A116                 db    ? ;
.bss:000000000020A117                 db    ? ;
.bss:000000000020A118                 db    ? ;
.bss:000000000020A119                 db    ? ;
.bss:000000000020A11A                 db    ? ;
.bss:000000000020A11B                 db    ? ;
.bss:000000000020A11C                 db    ? ;
.bss:000000000020A11D                 db    ? ;
.bss:000000000020A11E                 db    ? ;
.bss:000000000020A11F                 db    ? ;
.bss:000000000020A120                 db    ? ;
.bss:000000000020A121                 db    ? ;
.bss:000000000020A122                 db    ? ;
.bss:000000000020A123                 db    ? ;
.bss:000000000020A124                 db    ? ;
.bss:000000000020A125                 db    ? ;
.bss:000000000020A126                 db    ? ;
.bss:000000000020A127                 db    ? ;
.bss:000000000020A128                 db    ? ;
.bss:000000000020A129                 db    ? ;
.bss:000000000020A12A                 db    ? ;
.bss:000000000020A12B                 db    ? ;
.bss:000000000020A12C                 db    ? ;
.bss:000000000020A12D                 db    ? ;
.bss:000000000020A12E                 db    ? ;
.bss:000000000020A12F                 db    ? ;
.bss:000000000020A130                 db    ? ;
.bss:000000000020A131                 db    ? ;
.bss:000000000020A132                 db    ? ;
.bss:000000000020A133                 db    ? ;
.bss:000000000020A134                 db    ? ;
.bss:000000000020A135                 db    ? ;
.bss:000000000020A136                 db    ? ;
.bss:000000000020A137                 db    ? ;
.bss:000000000020A138                 db    ? ;
.bss:000000000020A139                 db    ? ;
.bss:000000000020A13A                 db    ? ;
.bss:000000000020A13B                 db    ? ;
.bss:000000000020A13C                 db    ? ;
.bss:000000000020A13D                 db    ? ;
.bss:000000000020A13E                 db    ? ;
.bss:000000000020A13F                 db    ? ;
.bss:000000000020A140                 db    ? ;
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A200                                         ; get_quoting_style↑o ...
.bss:000000000020A210 xmmword_20A210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A210                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A220 xmmword_20A220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A220                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A230 qword_20A230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A230                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A230 _bss            ends
.bss:000000000020A230
.prgend:000000000020A238 ; ===========================================================================
.prgend:000000000020A238
.prgend:000000000020A238 ; Segment type: Zero-length
.prgend:000000000020A238 _prgend         segment byte public '' use64
.prgend:000000000020A238 _end            label byte
.prgend:000000000020A238 _prgend         ends
.prgend:000000000020A238
extern:000000000020A240 ; ===========================================================================
extern:000000000020A240
extern:000000000020A240 ; Segment type: Externs
extern:000000000020A240 ; extern
extern:000000000020A240 ; const __int32_t **_ctype_toupper_loc(void)
extern:000000000020A240                 extrn __ctype_toupper_loc:near
extern:000000000020A240                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:000000000020A240                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:000000000020A248 ; int utmpxname(const char *file)
extern:000000000020A248                 extrn utmpxname:near    ; CODE XREF: _utmpxname↑j
extern:000000000020A248                                         ; DATA XREF: .got:utmpxname_ptr↑o
extern:000000000020A250 ; char *getenv(const char *name)
extern:000000000020A250                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020A250                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020A258 ; void free(void *ptr)
extern:000000000020A258                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A258                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A260 ; struct tm *localtime(const time_t *timer)
extern:000000000020A260                 extrn localtime:near    ; CODE XREF: _localtime↑j
extern:000000000020A260                                         ; DATA XREF: .got:localtime_ptr↑o
extern:000000000020A268 ; void __noreturn abort(void)
extern:000000000020A268                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A268                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A270 ; int *_errno_location(void)
extern:000000000020A270                 extrn __errno_location:near
extern:000000000020A270                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A270                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A278 ; char *strncpy(char *dest, const char *src, size_t n)
extern:000000000020A278                 extrn strncpy:near      ; CODE XREF: _strncpy↑j
extern:000000000020A278                                         ; DATA XREF: .got:strncpy_ptr↑o
extern:000000000020A280 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A280                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A280                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A288 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
extern:000000000020A288                 extrn localtime_r:near  ; CODE XREF: _localtime_r↑j
extern:000000000020A288                                         ; DATA XREF: .got:localtime_r_ptr↑o
extern:000000000020A290 ; void __noreturn exit(int status)
extern:000000000020A290                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A290                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A298 ; size_t _fpending(FILE *fp)
extern:000000000020A298                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A298                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A2A0 ; int setenv(const char *name, const char *value, int replace)
extern:000000000020A2A0                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:setenv_ptr↑o
extern:000000000020A2A8 ; char *textdomain(const char *domainname)
extern:000000000020A2A8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A2B0 ; void endutxent(void)
extern:000000000020A2B0                 extrn endutxent:near    ; CODE XREF: _endutxent↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:endutxent_ptr↑o
extern:000000000020A2B8 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
extern:000000000020A2B8                 extrn strtod_l:near     ; CODE XREF: _strtod_l↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:strtod_l_ptr↑o
extern:000000000020A2C0 ; int fclose(FILE *stream)
extern:000000000020A2C0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A2C8 ; int getloadavg(double loadavg[], int nelem)
extern:000000000020A2C8                 extrn getloadavg:near   ; CODE XREF: _getloadavg↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:getloadavg_ptr↑o
extern:000000000020A2D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A2D0                 extrn bindtextdomain:near
extern:000000000020A2D0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A2D8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A2D8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A2E0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A2E0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A2E0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A2E8 ; size_t strlen(const char *s)
extern:000000000020A2E8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A2F0                 extrn __stack_chk_fail:near
extern:000000000020A2F0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A2F8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A2F8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A300 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A300                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A300                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A308 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
extern:000000000020A308                 extrn newlocale:near    ; CODE XREF: _newlocale↑j
extern:000000000020A308                                         ; DATA XREF: .got:newlocale_ptr↑o
extern:000000000020A310 ; int _overflow(_IO_FILE *, int)
extern:000000000020A310                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020A310                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020A318 ; char *strrchr(const char *s, int c)
extern:000000000020A318                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A318                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A320 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
extern:000000000020A320                 extrn gmtime_r:near     ; CODE XREF: _gmtime_r↑j
extern:000000000020A320                                         ; DATA XREF: .got:gmtime_r_ptr↑o
extern:000000000020A328 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A328                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A328                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A330 ; void *memset(void *s, int c, size_t n)
extern:000000000020A330                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A330                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A338 ; int fputc(int c, FILE *stream)
extern:000000000020A338                 extrn fputc:near        ; CODE XREF: _fputc↑j
extern:000000000020A338                                         ; DATA XREF: .got:fputc_ptr↑o
extern:000000000020A340 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A340                 extrn __libc_start_main:near
extern:000000000020A340                                         ; CODE XREF: start+24↑p
extern:000000000020A340                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A348 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A348                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A348                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A350 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A350                 extrn fputs_unlocked:near
extern:000000000020A350                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A350                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A358 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A358                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A358                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A360 ; int strcmp(const char *s1, const char *s2)
extern:000000000020A360                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020A360                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020A368 ; void setutxent(void)
extern:000000000020A368                 extrn setutxent:near    ; CODE XREF: _setutxent↑j
extern:000000000020A368                                         ; DATA XREF: .got:setutxent_ptr↑o
extern:000000000020A370 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A370                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A370                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A378 ; void tzset(void)
extern:000000000020A378                 extrn tzset:near        ; CODE XREF: _tzset↑j
extern:000000000020A378                                         ; DATA XREF: .got:tzset_ptr↑o
extern:000000000020A380 ; int kill(__pid_t pid, int sig)
extern:000000000020A380                 extrn kill:near         ; CODE XREF: _kill↑j
extern:000000000020A380                                         ; DATA XREF: .got:kill_ptr↑o
extern:000000000020A388 ; time_t time(time_t *timer)
extern:000000000020A388                 extrn time:near         ; CODE XREF: _time↑j
extern:000000000020A388                                         ; DATA XREF: .got:time_ptr↑o
extern:000000000020A390 ; int fileno(FILE *stream)
extern:000000000020A390                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A390                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A398 ; char *fgets_unlocked(char *s, int n, FILE *stream)
extern:000000000020A398                 extrn fgets_unlocked:near
extern:000000000020A398                                         ; CODE XREF: _fgets_unlocked↑j
extern:000000000020A398                                         ; DATA XREF: .got:fgets_unlocked_ptr↑o
extern:000000000020A3A0 ; void *malloc(size_t size)
extern:000000000020A3A0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A3A8 ; int fflush(FILE *stream)
extern:000000000020A3A8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A3B0 ; char *nl_langinfo(nl_item item)
extern:000000000020A3B0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A3B8 ; time_t mktime(struct tm *tp)
extern:000000000020A3B8                 extrn mktime:near       ; CODE XREF: _mktime↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:mktime_ptr↑o
extern:000000000020A3C0 ; int _freading(FILE *fp)
extern:000000000020A3C0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A3C8 ; void *realloc(void *ptr, size_t size)
extern:000000000020A3C8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A3D0 ; char *setlocale(int category, const char *locale)
extern:000000000020A3D0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A3D8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A3E0 ; time_t timegm(struct tm *tp)
extern:000000000020A3E0                 extrn timegm:near       ; CODE XREF: _timegm↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:timegm_ptr↑o
extern:000000000020A3E8 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:000000000020A3E8                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:strftime_ptr↑o
extern:000000000020A3F0 ; struct utmpx *getutxent(void)
extern:000000000020A3F0                 extrn getutxent:near    ; CODE XREF: _getutxent↑j
extern:000000000020A3F0                                         ; DATA XREF: .got:getutxent_ptr↑o
extern:000000000020A3F8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A3F8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A3F8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A400 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A400                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A400                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A408 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020A408                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020A408                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020A410 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
extern:000000000020A410                 extrn dcngettext:near   ; CODE XREF: _dcngettext↑j
extern:000000000020A410                                         ; DATA XREF: .got:dcngettext_ptr↑o
extern:000000000020A418 ; int unsetenv(const char *name)
extern:000000000020A418                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:000000000020A418                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:000000000020A420 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A420                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A420                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A428 ; void __noreturn exit(int status)
extern:000000000020A428                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A428                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A430 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A430                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A430                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A438                 extrn __fprintf_chk:near
extern:000000000020A438                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A438                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A440 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A440                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A440                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A448 ; int iswprint(wint_t wc)
extern:000000000020A448                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A448                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A450 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A450                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A450                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A450                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A458 ; const __int32_t **_ctype_tolower_loc(void)
extern:000000000020A458                 extrn __ctype_tolower_loc:near
extern:000000000020A458                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:000000000020A458                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:000000000020A460 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A460                 extrn __ctype_b_loc:near
extern:000000000020A460                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A460                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A468                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A468                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A470                 extrn __gmon_start__:near ; weak
extern:000000000020A470                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A470                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A478                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A478                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A478
extern:000000000020A478
extern:000000000020A478                 end start
