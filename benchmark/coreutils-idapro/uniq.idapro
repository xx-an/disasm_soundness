LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 0D6A848D4E641947402BB308E9F08EADA925CBBDC59535492603D77E59CA50FD
LOAD:0000000000000000 ; Input MD5    : CBE53C212022B39984C3E07E01EC342F
LOAD:0000000000000000 ; Input CRC32  : 673A61F7
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/uniq
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'uniq.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'freopen-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'linebuffer.c'
LOAD:0000000000000000 ; Source File : 'memcasecmp.c'
LOAD:0000000000000000 ; Source File : 'posixver.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xmemcoll.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'memcoll.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 31FB0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9010h                ; Size in file image
LOAD:00000000000000D8                 dq 9010h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 99B0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 2099B0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6F0h                 ; Size in file image
LOAD:0000000000000110                 dq 8C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9C18h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209C18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7C68h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7C68h                ; Physical address
LOAD:00000000000001B0                 dq 314h                 ; Size in file image
LOAD:00000000000001B8                 dq 314h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 99B0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 2099B0h              ; Physical address
LOAD:0000000000000220                 dq 650h                 ; Size in file image
LOAD:0000000000000228                 dq 650h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0CAh, 0B7h, 7Dh, 3Fh, 0BDh, 85h, 55h, 7Dh, 7Ah, 1Fh ; Desc
LOAD:0000000000000284                 db 6Bh, 0Dh, 0C4h, 0C5h, 0Eh, 37h, 66h, 0DFh, 2Bh, 7Bh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Dh, 3Eh, 44h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_970, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aUflow - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aGetenv - offset byte_970, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_970, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aAbort - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000358                            0>
LOAD:0000000000000370                 Elf64_Sym <offset aErrnoLocation - offset byte_970, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_970, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_970, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_970, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_970, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_970, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_970, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_970, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_970, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_970, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_970, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_970, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_970, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_970, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aDup2 - offset byte_970, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:00000000000004C0                            0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrchr - offset byte_970, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aOverflow - offset byte_970, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrrchr - offset byte_970, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLseek - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000520                            0>
LOAD:0000000000000538                 Elf64_Sym <offset aAssertFail - offset byte_970, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemset - offset byte_970, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFreopen - offset byte_970, 12h, 0, 0, \ ; "freopen"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFclose+1 - offset byte_970, 12h, 0, 0, \ ; "close"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aPosixFadvise - offset byte_970, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aLibcStartMain - offset byte_970, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemcmp - offset byte_970, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFputsUnlocked - offset byte_970, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aCalloc - offset byte_970, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aStrcmp - offset byte_970, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aGmonStart - offset byte_970, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aStrtol - offset byte_970, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMemcpy - offset byte_970, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFileno - offset byte_970, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMalloc - offset byte_970, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFflush - offset byte_970, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aNlLanginfo - offset byte_970, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrcoll - offset byte_970, 12h, 0, 0, \ ; "strcoll"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFreading - offset byte_970, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFwriteUnlocked - offset byte_970, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aRealloc - offset byte_970, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSetlocale - offset byte_970, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aPrintfChk - offset byte_970, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aError - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000760                            0>
LOAD:0000000000000778                 Elf64_Sym <offset aFreopen+3 - offset byte_970, 12h, 0, 0, \ ; "open"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFseeko - offset byte_970, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aStrtoul - offset byte_970, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaAtexit - offset byte_970, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aExit+1 - offset byte_970, 12h, 0, 0, \ ; "exit"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFwrite - offset byte_970, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFprintfChk - offset byte_970, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aItmRegistertmc - offset byte_970, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aMbsinit - offset byte_970, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aIswprint - offset byte_970, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aCxaFinalize - offset byte_970, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aCtypeBLoc - offset byte_970, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aStdout - offset byte_970, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000898                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aProgname - offset byte_970, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008B0                            offset __bss_start, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aStdin - offset byte_970, 11h, 0, 19h, \ ; "stdin"
LOAD:00000000000008C8                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0                 Elf64_Sym <offset aProgramInvocat - offset byte_970, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000008E0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aPrognameFull - offset byte_970, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000008F8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_970, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000910                            offset __bss_start, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aStderr - offset byte_970, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000928                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aOptind - offset byte_970, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000940                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000958                 Elf64_Sym <offset aOptarg - offset byte_970, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000958                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000970 ; ELF String Table
LOAD:0000000000000970 byte_970        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000970                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000971 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000D10↓o
LOAD:000000000000097B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000982 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:000000000000098F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000999 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000009A1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000009A9 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:00000000000009B0 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009B8 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009C2 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009C8 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000009D9 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000009E2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000009EA aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000009F0 aStdin          db 'stdin',0            ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:00000000000009F6 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000009F6                                         ; LOAD:00000000000007D8↑o
LOAD:00000000000009FC aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000009FC                                         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A14 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A22 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A22                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000A39 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A40 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000A4E aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A55 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A5C aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A63 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A74 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A7B aDup2           db 'dup2',0             ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000A80 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A8E aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A95 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A9B aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000AA2 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000AA2                                         ; LOAD:0000000000000580↑o
LOAD:0000000000000AA9 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000AB1 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000AB8 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000AC0 aUflow          db '__uflow',0          ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AC8 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000AD4 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AE2 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000AE9 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000AF0 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AFB aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000B02 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000B0E aFreopen        db 'freopen',0          ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B0E                                         ; LOAD:0000000000000778↑o
LOAD:0000000000000B16 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B1D aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B24 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B2F aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B36 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B36                                         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000B54 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000B54                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B68 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B77 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B77                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000B86 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000B96 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000B9D aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B9D                                         ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000BAF aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BB6 aStrcoll        db 'strcoll',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000BBE aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000BC9 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BD8 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000BDD aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BE8 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000BF8 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C05 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000D20↓o
LOAD:0000000000000C11 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000D30↓o
LOAD:0000000000000C1C aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000D40↓o
LOAD:0000000000000C26 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000D50↓o
LOAD:0000000000000C32 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D60↓o
LOAD:0000000000000C3C aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000C3C                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C58 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000C67 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000C67                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C81                 align 2
LOAD:0000000000000C82 ; ELF GNU Symbol Version Table
LOAD:0000000000000C82                 dw 0
LOAD:0000000000000C84                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000C86                 dw 3                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000C88                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000C8A                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C8C                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C8E                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C90                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C92                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C94                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C96                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C98                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C9A                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C9C                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C9E                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000CA0                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000CA2                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000CA4                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000CA6                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000CA8                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000CAA                 dw 3                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000CAC                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000CAE                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000CB0                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000CB2                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000CB4                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000CB6                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000CB8                 dw 3                    ; freopen@@GLIBC_2.2.5
LOAD:0000000000000CBA                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000CBC                 dw 3                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000CBE                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000CC0                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000CC2                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CC4                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000CC6                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000CC8                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000CCA                 dw 3                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000CCC                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000CCE                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000CD0                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000CD2                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000CD4                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000CD6                 dw 3                    ; strcoll@@GLIBC_2.2.5
LOAD:0000000000000CD8                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000CDA                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CDC                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000CDE                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000CE0                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000CE2                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000CE4                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:0000000000000CE6                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000CE8                 dw 3                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000CEA                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000CEC                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000CEE                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000CF0                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CF2                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000CF4                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000CF6                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000CF8                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000CFA                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000CFC                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000CFE                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D00                 dw 3                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000D02                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D04                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D06                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D08                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D0A                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D0C                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000D0E                 dw 0
LOAD:0000000000000D10 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000D10                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_970, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D20                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_970, \ ; "GLIBC_2.3.4"
LOAD:0000000000000D20                                10h>
LOAD:0000000000000D30                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_970, \ ; "GLIBC_2.14"
LOAD:0000000000000D30                                10h>
LOAD:0000000000000D40                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_970, \ ; "GLIBC_2.4"
LOAD:0000000000000D40                                10h>
LOAD:0000000000000D50                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_970, \ ; "GLIBC_2.2.5"
LOAD:0000000000000D50                                10h>
LOAD:0000000000000D60                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_970, 0> ; "GLIBC_2.3"
LOAD:0000000000000D70 ; ELF RELA Relocation Table
LOAD:0000000000000D70                 Elf64_Rela <2099B0h, 8, 2690h> ; R_X86_64_RELATIVE +2690h
LOAD:0000000000000D88                 Elf64_Rela <2099B8h, 8, 2650h> ; R_X86_64_RELATIVE +2650h
LOAD:0000000000000DA0                 Elf64_Rela <2099C0h, 8, 6898h> ; R_X86_64_RELATIVE +6898h
LOAD:0000000000000DB8                 Elf64_Rela <2099E0h, 8, 6850h> ; R_X86_64_RELATIVE +6850h
LOAD:0000000000000DD0                 Elf64_Rela <209A00h, 8, 684Ch> ; R_X86_64_RELATIVE +684Ch
LOAD:0000000000000DE8                 Elf64_Rela <209A20h, 8, 685Bh> ; R_X86_64_RELATIVE +685Bh
LOAD:0000000000000E00                 Elf64_Rela <209A40h, 8, 689Eh> ; R_X86_64_RELATIVE +689Eh
LOAD:0000000000000E18                 Elf64_Rela <209A60h, 8, 68AAh> ; R_X86_64_RELATIVE +68AAh
LOAD:0000000000000E30                 Elf64_Rela <209A80h, 8, 68B1h> ; R_X86_64_RELATIVE +68B1h
LOAD:0000000000000E48                 Elf64_Rela <209AA0h, 8, 68BDh> ; R_X86_64_RELATIVE +68BDh
LOAD:0000000000000E60                 Elf64_Rela <209AC0h, 8, 68C8h> ; R_X86_64_RELATIVE +68C8h
LOAD:0000000000000E78                 Elf64_Rela <209AE0h, 8, 68D4h> ; R_X86_64_RELATIVE +68D4h
LOAD:0000000000000E90                 Elf64_Rela <209B00h, 8, 68E4h> ; R_X86_64_RELATIVE +68E4h
LOAD:0000000000000EA8                 Elf64_Rela <209B20h, 8, 68E9h> ; R_X86_64_RELATIVE +68E9h
LOAD:0000000000000EC0                 Elf64_Rela <209B60h, 8, 68F1h> ; R_X86_64_RELATIVE +68F1h
LOAD:0000000000000ED8                 Elf64_Rela <209B68h, 8, 68F9h> ; R_X86_64_RELATIVE +68F9h
LOAD:0000000000000EF0                 Elf64_Rela <209B70h, 8, 6900h> ; R_X86_64_RELATIVE +6900h
LOAD:0000000000000F08                 Elf64_Rela <209B78h, 8, 6909h> ; R_X86_64_RELATIVE +6909h
LOAD:0000000000000F20                 Elf64_Rela <209BA0h, 8, 690Eh> ; R_X86_64_RELATIVE +690Eh
LOAD:0000000000000F38                 Elf64_Rela <209BA8h, 8, 68F1h> ; R_X86_64_RELATIVE +68F1h
LOAD:0000000000000F50                 Elf64_Rela <209BB0h, 8, 6900h> ; R_X86_64_RELATIVE +6900h
LOAD:0000000000000F68                 Elf64_Rela <209BC0h, 8, 7289h> ; R_X86_64_RELATIVE +7289h
LOAD:0000000000000F80                 Elf64_Rela <209BC8h, 8, 7291h> ; R_X86_64_RELATIVE +7291h
LOAD:0000000000000F98                 Elf64_Rela <209BD0h, 8, 7297h> ; R_X86_64_RELATIVE +7297h
LOAD:0000000000000FB0                 Elf64_Rela <209BD8h, 8, 72A4h> ; R_X86_64_RELATIVE +72A4h
LOAD:0000000000000FC8                 Elf64_Rela <209BE0h, 8, 72B1h> ; R_X86_64_RELATIVE +72B1h
LOAD:0000000000000FE0                 Elf64_Rela <209BE8h, 8, 72C5h> ; R_X86_64_RELATIVE +72C5h
LOAD:0000000000000FF8                 Elf64_Rela <209BF0h, 8, 72C7h> ; R_X86_64_RELATIVE +72C7h
LOAD:0000000000001010                 Elf64_Rela <209BF8h, 8, 72AAh> ; R_X86_64_RELATIVE +72AAh
LOAD:0000000000001028                 Elf64_Rela <209C00h, 8, 681Ah> ; R_X86_64_RELATIVE +681Ah
LOAD:0000000000001040                 Elf64_Rela <209C08h, 8, 72CFh> ; R_X86_64_RELATIVE +72CFh
LOAD:0000000000001058                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000001070                 Elf64_Rela <20A010h, 8, 719Ch> ; R_X86_64_RELATIVE +719Ch
LOAD:0000000000001088                 Elf64_Rela <20A018h, 8, 2DE0h> ; R_X86_64_RELATIVE +2DE0h
LOAD:00000000000010A0                 Elf64_Rela <20A080h, 8, 20A090h> ; R_X86_64_RELATIVE +20A090h
LOAD:00000000000010B8                 Elf64_Rela <20A098h, 8, 20A140h> ; R_X86_64_RELATIVE +20A140h
LOAD:00000000000010D0                 Elf64_Rela <209FD8h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000010E8                 Elf64_Rela <209FE0h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001100                 Elf64_Rela <209FE8h, 2300000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001118                 Elf64_Rela <209FF0h, 3800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001130                 Elf64_Rela <209FF8h, 3B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001148                 Elf64_Rela <20A0A0h, 3E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001160                 Elf64_Rela <20A0A8h, 3D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001178                 Elf64_Rela <20A0B0h, 3F00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001190                 Elf64_Rela <20A0B8h, 4400000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000011A8                 Elf64_Rela <20A0C0h, 4500000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000011C0                 Elf64_Rela <20A0C8h, 4100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000011D8                 Elf64_Rela <20A0E0h, 4300000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000011F0 ; ELF JMPREL Relocation Table
LOAD:00000000000011F0                 Elf64_Rela <209E20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000001208                 Elf64_Rela <209E28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000001220                 Elf64_Rela <209E30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001238                 Elf64_Rela <209E38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001250                 Elf64_Rela <209E40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001268                 Elf64_Rela <209E48h, 600000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001280                 Elf64_Rela <209E50h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001298                 Elf64_Rela <209E58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000012B0                 Elf64_Rela <209E60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000012C8                 Elf64_Rela <209E68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000012E0                 Elf64_Rela <209E70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000012F8                 Elf64_Rela <209E78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001310                 Elf64_Rela <209E80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001328                 Elf64_Rela <209E88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001340                 Elf64_Rela <209E90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001358                 Elf64_Rela <209E98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001370                 Elf64_Rela <209EA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001388                 Elf64_Rela <209EA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000013A0                 Elf64_Rela <209EB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:00000000000013B8                 Elf64_Rela <209EB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000013D0                 Elf64_Rela <209EC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000013E8                 Elf64_Rela <209EC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001400                 Elf64_Rela <209ED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001418                 Elf64_Rela <209ED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001430                 Elf64_Rela <209EE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001448                 Elf64_Rela <209EE8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT freopen
LOAD:0000000000001460                 Elf64_Rela <209EF0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001478                 Elf64_Rela <209EF8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001490                 Elf64_Rela <209F00h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000014A8                 Elf64_Rela <209F08h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000014C0                 Elf64_Rela <209F10h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000014D8                 Elf64_Rela <209F18h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000014F0                 Elf64_Rela <209F20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001508                 Elf64_Rela <209F28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001520                 Elf64_Rela <209F30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001538                 Elf64_Rela <209F38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001550                 Elf64_Rela <209F40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001568                 Elf64_Rela <209F48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001580                 Elf64_Rela <209F50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strcoll
LOAD:0000000000001598                 Elf64_Rela <209F58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000015B0                 Elf64_Rela <209F60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000015C8                 Elf64_Rela <209F68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000015E0                 Elf64_Rela <209F70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000015F8                 Elf64_Rela <209F78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001610                 Elf64_Rela <209F80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001628                 Elf64_Rela <209F88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001640                 Elf64_Rela <209F90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001658                 Elf64_Rela <209F98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000001670                 Elf64_Rela <209FA0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001688                 Elf64_Rela <209FA8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000016A0                 Elf64_Rela <209FB0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000016B8                 Elf64_Rela <209FB8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000016D0                 Elf64_Rela <209FC0h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000016E8                 Elf64_Rela <209FC8h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001700                 Elf64_Rela <209FD0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001700 LOAD            ends
LOAD:0000000000001700
.init:0000000000001718 ; ===========================================================================
.init:0000000000001718
.init:0000000000001718 ; Segment type: Pure code
.init:0000000000001718 ; Segment permissions: Read/Execute
.init:0000000000001718 _init           segment dword public 'CODE' use64
.init:0000000000001718                 assume cs:_init
.init:0000000000001718                 ;org 1718h
.init:0000000000001718                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001718
.init:0000000000001718 ; =============== S U B R O U T I N E =======================================
.init:0000000000001718
.init:0000000000001718
.init:0000000000001718                 public _init_proc
.init:0000000000001718 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001718                 sub     rsp, 8          ; _init
.init:000000000000171C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001723                 test    rax, rax
.init:0000000000001726                 jz      short loc_172A
.init:0000000000001728                 call    rax ; __gmon_start__
.init:000000000000172A
.init:000000000000172A loc_172A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000172A                 add     rsp, 8
.init:000000000000172E                 retn
.init:000000000000172E _init_proc      endp
.init:000000000000172E
.init:000000000000172E _init           ends
.init:000000000000172E
LOAD:000000000000172F ; ===========================================================================
LOAD:000000000000172F
LOAD:000000000000172F ; Segment type: Pure code
LOAD:000000000000172F ; Segment permissions: Read/Execute
LOAD:000000000000172F LOAD            segment byte public 'CODE' use64
LOAD:000000000000172F                 assume cs:LOAD
LOAD:000000000000172F                 ;org 172Fh
LOAD:000000000000172F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000172F                 align 10h
LOAD:000000000000172F LOAD            ends
LOAD:000000000000172F
.plt:0000000000001730 ; ===========================================================================
.plt:0000000000001730
.plt:0000000000001730 ; Segment type: Pure code
.plt:0000000000001730 ; Segment permissions: Read/Execute
.plt:0000000000001730 _plt            segment para public 'CODE' use64
.plt:0000000000001730                 assume cs:_plt
.plt:0000000000001730                 ;org 1730h
.plt:0000000000001730                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730
.plt:0000000000001730 sub_1730        proc near               ; CODE XREF: .plt:000000000000174B↓j
.plt:0000000000001730                                         ; .plt:000000000000175B↓j ...
.plt:0000000000001730 ; __unwind {
.plt:0000000000001730                 push    cs:qword_209E10
.plt:0000000000001736                 jmp     cs:qword_209E18
.plt:0000000000001736 sub_1730        endp
.plt:0000000000001736
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:000000000000173C                 align 20h
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001740 ___ctype_toupper_loc proc near          ; CODE XREF: memcasecmp+12↓p
.plt:0000000000001740                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001740 ___ctype_toupper_loc endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    0
.plt:000000000000174B                 jmp     sub_1730
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int __uflow(_IO_FILE *)
.plt:0000000000001750 ___uflow        proc near               ; CODE XREF: readlinebuffer_delim+BB↓p
.plt:0000000000001750                 jmp     cs:__uflow_ptr
.plt:0000000000001750 ___uflow        endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    1
.plt:000000000000175B                 jmp     sub_1730
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; char *getenv(const char *name)
.plt:0000000000001760 _getenv         proc near               ; CODE XREF: main+31↓p
.plt:0000000000001760                                         ; posix2_version+21↓p
.plt:0000000000001760                 jmp     cs:getenv_ptr
.plt:0000000000001760 _getenv         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    2
.plt:000000000000176B                 jmp     sub_1730
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; void free(void *ptr)
.plt:0000000000001770 _free           proc near               ; CODE XREF: main+4B0↓p
.plt:0000000000001770                                         ; main+4BA↓p ...
.plt:0000000000001770                 jmp     cs:free_ptr
.plt:0000000000001770 _free           endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    3
.plt:000000000000177B                 jmp     sub_1730
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: noreturn thunk
.plt:0000000000001780
.plt:0000000000001780 ; void __noreturn abort(void)
.plt:0000000000001780 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001780                                         ; quotearg_buffer_restyled:def_3921↓p ...
.plt:0000000000001780                 jmp     cs:abort_ptr
.plt:0000000000001780 _abort          endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    4
.plt:000000000000178B                 jmp     sub_1730
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int *__errno_location(void)
.plt:0000000000001790 ___errno_location proc near             ; CODE XREF: main+7A2↓p
.plt:0000000000001790                                         ; main+AB2↓p ...
.plt:0000000000001790                 jmp     cs:__errno_location_ptr
.plt:0000000000001790 ___errno_location endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    5
.plt:000000000000179B                 jmp     sub_1730
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000017A0 _strncmp        proc near               ; CODE XREF: usage+374↓p
.plt:00000000000017A0                                         ; usage+435↓p ...
.plt:00000000000017A0                 jmp     cs:strncmp_ptr
.plt:00000000000017A0 _strncmp        endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    6
.plt:00000000000017AB                 jmp     sub_1730
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: noreturn thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; void __noreturn _exit(int status)
.plt:00000000000017B0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000017B0                 jmp     cs:_exit_ptr
.plt:00000000000017B0 __exit          endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    7
.plt:00000000000017BB                 jmp     sub_1730
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; size_t __fpending(FILE *fp)
.plt:00000000000017C0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000017C0                 jmp     cs:__fpending_ptr
.plt:00000000000017C0 ___fpending     endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    8
.plt:00000000000017CB                 jmp     sub_1730
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; char *textdomain(const char *domainname)
.plt:00000000000017D0 _textdomain     proc near               ; CODE XREF: main+8E↓p
.plt:00000000000017D0                 jmp     cs:textdomain_ptr
.plt:00000000000017D0 _textdomain     endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    9
.plt:00000000000017DB                 jmp     sub_1730
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; int fclose(FILE *stream)
.plt:00000000000017E0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000017E0                                         ; rpl_fclose+6B↓j
.plt:00000000000017E0                 jmp     cs:fclose_ptr
.plt:00000000000017E0 _fclose         endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    0Ah
.plt:00000000000017EB                 jmp     sub_1730
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000017F0 _bindtextdomain proc near               ; CODE XREF: main+82↓p
.plt:00000000000017F0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000017F0 _bindtextdomain endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    0Bh
.plt:00000000000017FB                 jmp     sub_1730
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001800 _dcgettext      proc near               ; CODE XREF: main+8E4↓p
.plt:0000000000001800                                         ; main+A32↓p ...
.plt:0000000000001800                 jmp     cs:dcgettext_ptr
.plt:0000000000001800 _dcgettext      endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    0Ch
.plt:000000000000180B                 jmp     sub_1730
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001810 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001810                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001810 ___ctype_get_mb_cur_max endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    0Dh
.plt:000000000000181B                 jmp     sub_1730
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; size_t strlen(const char *s)
.plt:0000000000001820 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000001820                                         ; argmatch+AE↓p ...
.plt:0000000000001820                 jmp     cs:strlen_ptr
.plt:0000000000001820 _strlen         endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    0Eh
.plt:000000000000182B                 jmp     sub_1730
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: noreturn thunk
.plt:0000000000001830
.plt:0000000000001830 ___stack_chk_fail proc near             ; CODE XREF: main:loc_255B↓p
.plt:0000000000001830                                         ; size_opt:loc_27AC↓p ...
.plt:0000000000001830                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001830 ___stack_chk_fail endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    0Fh
.plt:000000000000183B                 jmp     sub_1730
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001840 _getopt_long    proc near               ; CODE XREF: main+17A↓p
.plt:0000000000001840                 jmp     cs:getopt_long_ptr
.plt:0000000000001840 _getopt_long    endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    10h
.plt:000000000000184B                 jmp     sub_1730
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001850 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001850                 jmp     cs:mbrtowc_ptr
.plt:0000000000001850 _mbrtowc        endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    11h
.plt:000000000000185B                 jmp     sub_1730
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; int dup2(int fd, int fd2)
.plt:0000000000001860 _dup2           proc near               ; CODE XREF: freopen_safer+4F↓p
.plt:0000000000001860                                         ; freopen_safer+64↓p ...
.plt:0000000000001860                 jmp     cs:dup2_ptr
.plt:0000000000001860 _dup2           endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    12h
.plt:000000000000186B                 jmp     sub_1730
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; char *strchr(const char *s, int c)
.plt:0000000000001870 _strchr         proc near               ; CODE XREF: xstrtoul+123↓p
.plt:0000000000001870                                         ; xstrtoul+143↓p ...
.plt:0000000000001870                 jmp     cs:strchr_ptr
.plt:0000000000001870 _strchr         endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    13h
.plt:000000000000187B                 jmp     sub_1730
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001880 ___overflow     proc near               ; CODE XREF: main+A0E↓p
.plt:0000000000001880                                         ; main+A56↓p ...
.plt:0000000000001880                 jmp     cs:__overflow_ptr
.plt:0000000000001880 ___overflow     endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    14h
.plt:000000000000188B                 jmp     sub_1730
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; char *strrchr(const char *s, int c)
.plt:0000000000001890 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001890                 jmp     cs:strrchr_ptr
.plt:0000000000001890 _strrchr        endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    15h
.plt:000000000000189B                 jmp     sub_1730
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000018A0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000018A0                                         ; rpl_fseeko+3B↓p
.plt:00000000000018A0                 jmp     cs:lseek_ptr
.plt:00000000000018A0 _lseek          endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    16h
.plt:00000000000018AB                 jmp     sub_1730
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: noreturn thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000018B0 ___assert_fail  proc near               ; CODE XREF: xstrtoul+39F↓p
.plt:00000000000018B0                 jmp     cs:__assert_fail_ptr
.plt:00000000000018B0 ___assert_fail  endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    17h
.plt:00000000000018BB                 jmp     sub_1730
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000018C0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000018C0                                         ; xzalloc+12↓j
.plt:00000000000018C0                 jmp     cs:memset_ptr
.plt:00000000000018C0 _memset         endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    18h
.plt:00000000000018CB                 jmp     sub_1730
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
.plt:00000000000018D0 _freopen        proc near               ; CODE XREF: freopen_safer+BB↓p
.plt:00000000000018D0                 jmp     cs:freopen_ptr
.plt:00000000000018D0 _freopen        endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    19h
.plt:00000000000018DB                 jmp     sub_1730
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; int close(int fd)
.plt:00000000000018E0 _close          proc near               ; CODE XREF: protect_fd+29↓p
.plt:00000000000018E0                                         ; freopen_safer+133↓p ...
.plt:00000000000018E0                 jmp     cs:close_ptr
.plt:00000000000018E0 _close          endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    1Ah
.plt:00000000000018EB                 jmp     sub_1730
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000018F0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000018F0                                         ; fadvise+16↓j
.plt:00000000000018F0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000018F0 _posix_fadvise  endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    1Bh
.plt:00000000000018FB                 jmp     sub_1730
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001900 _memcmp         proc near               ; CODE XREF: different+4B↓p
.plt:0000000000001900                                         ; argmatch+6F↓p ...
.plt:0000000000001900                 jmp     cs:memcmp_ptr
.plt:0000000000001900 _memcmp         endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    1Ch
.plt:000000000000190B                 jmp     sub_1730
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001910 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001910                                         ; usage+C2↓p ...
.plt:0000000000001910                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001910 _fputs_unlocked endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    1Dh
.plt:000000000000191B                 jmp     sub_1730
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001920 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001920                 jmp     cs:calloc_ptr
.plt:0000000000001920 _calloc         endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    1Eh
.plt:000000000000192B                 jmp     sub_1730
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001930 _strcmp         proc near               ; CODE XREF: main+2DA↓p
.plt:0000000000001930                                         ; main+2F1↓p
.plt:0000000000001930                 jmp     cs:strcmp_ptr
.plt:0000000000001930 _strcmp         endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    1Fh
.plt:000000000000193B                 jmp     sub_1730
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001940 _strtol         proc near               ; CODE XREF: posix2_version+5B↓p
.plt:0000000000001940                 jmp     cs:strtol_ptr
.plt:0000000000001940 _strtol         endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    20h ; ' '
.plt:000000000000194B                 jmp     sub_1730
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001950 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001950                 jmp     cs:memcpy_ptr
.plt:0000000000001950 _memcpy         endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    21h ; '!'
.plt:000000000000195B                 jmp     sub_1730
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; int fileno(FILE *stream)
.plt:0000000000001960 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001960                                         ; freopen_safer+1C↓p ...
.plt:0000000000001960                 jmp     cs:fileno_ptr
.plt:0000000000001960 _fileno         endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    22h ; '"'
.plt:000000000000196B                 jmp     sub_1730
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; void *malloc(size_t size)
.plt:0000000000001970 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001970                 jmp     cs:malloc_ptr
.plt:0000000000001970 _malloc         endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    23h ; '#'
.plt:000000000000197B                 jmp     sub_1730
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int fflush(FILE *stream)
.plt:0000000000001980 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001980                                         ; rpl_fflush+3B↓j
.plt:0000000000001980                 jmp     cs:fflush_ptr
.plt:0000000000001980 _fflush         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    24h ; '$'
.plt:000000000000198B                 jmp     sub_1730
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; char *nl_langinfo(nl_item item)
.plt:0000000000001990 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001990                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001990 _nl_langinfo    endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    25h ; '%'
.plt:000000000000199B                 jmp     sub_1730
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; int strcoll(const char *s1, const char *s2)
.plt:00000000000019A0 _strcoll        proc near               ; CODE XREF: strcoll_loop+60↓p
.plt:00000000000019A0                 jmp     cs:strcoll_ptr
.plt:00000000000019A0 _strcoll        endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    26h ; '&'
.plt:00000000000019AB                 jmp     sub_1730
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int __freading(FILE *fp)
.plt:00000000000019B0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000019B0                                         ; rpl_fflush+9↓p
.plt:00000000000019B0                 jmp     cs:__freading_ptr
.plt:00000000000019B0 ___freading     endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    27h ; '''
.plt:00000000000019BB                 jmp     sub_1730
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000019C0 _fwrite_unlocked proc near              ; CODE XREF: main+87B↓p
.plt:00000000000019C0                                         ; writeline+36↓j
.plt:00000000000019C0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000019C0 _fwrite_unlocked endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    28h ; '('
.plt:00000000000019CB                 jmp     sub_1730
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000019D0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000019D0                 jmp     cs:realloc_ptr
.plt:00000000000019D0 _realloc        endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    29h ; ')'
.plt:00000000000019DB                 jmp     sub_1730
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; char *setlocale(int category, const char *locale)
.plt:00000000000019E0 _setlocale      proc near               ; CODE XREF: main+6F↓p
.plt:00000000000019E0                                         ; usage+35B↓p ...
.plt:00000000000019E0                 jmp     cs:setlocale_ptr
.plt:00000000000019E0 _setlocale      endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    2Ah ; '*'
.plt:00000000000019EB                 jmp     sub_1730
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ___printf_chk   proc near               ; CODE XREF: writeline+78↓p
.plt:00000000000019F0                                         ; usage+78↓p ...
.plt:00000000000019F0                 jmp     cs:__printf_chk_ptr
.plt:00000000000019F0 ___printf_chk   endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    2Bh ; '+'
.plt:00000000000019FB                 jmp     sub_1730
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001A00 _error          proc near               ; CODE XREF: main+7BA↓p
.plt:0000000000001A00                                         ; main+8F8↓p ...
.plt:0000000000001A00                 jmp     cs:error_ptr
.plt:0000000000001A00 _error          endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    2Ch ; ','
.plt:0000000000001A0B                 jmp     sub_1730
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; int open(const char *file, int oflag, ...)
.plt:0000000000001A10 _open           proc near               ; CODE XREF: protect_fd+18↓p
.plt:0000000000001A10                 jmp     cs:open_ptr
.plt:0000000000001A10 _open           endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    2Dh ; '-'
.plt:0000000000001A1B                 jmp     sub_1730
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001A20 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_632A↓j
.plt:0000000000001A20                 jmp     cs:fseeko_ptr
.plt:0000000000001A20 _fseeko         endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    2Eh ; '.'
.plt:0000000000001A2B                 jmp     sub_1730
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001A30 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000001A30                 jmp     cs:strtoul_ptr
.plt:0000000000001A30 _strtoul        endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    2Fh ; '/'
.plt:0000000000001A3B                 jmp     sub_1730
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001A40 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001A40                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001A40 ___cxa_atexit   endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    30h ; '0'
.plt:0000000000001A4B                 jmp     sub_1730
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: noreturn thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; void __noreturn exit(int status)
.plt:0000000000001A50 _exit           proc near               ; CODE XREF: main+75E↓p
.plt:0000000000001A50                                         ; usage+58↓p
.plt:0000000000001A50                 jmp     cs:exit_ptr
.plt:0000000000001A50 _exit           endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    31h ; '1'
.plt:0000000000001A5B                 jmp     sub_1730
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001A60 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001A60                 jmp     cs:fwrite_ptr
.plt:0000000000001A60 _fwrite         endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    32h ; '2'
.plt:0000000000001A6B                 jmp     sub_1730
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001A70                                         ; argmatch_valid+7A↓p ...
.plt:0000000000001A70                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001A70 ___fprintf_chk  endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    33h ; '3'
.plt:0000000000001A7B                 jmp     sub_1730
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001A80 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001A80                 jmp     cs:mbsinit_ptr
.plt:0000000000001A80 _mbsinit        endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    34h ; '4'
.plt:0000000000001A8B                 jmp     sub_1730
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; int iswprint(wint_t wc)
.plt:0000000000001A90 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001A90                 jmp     cs:iswprint_ptr
.plt:0000000000001A90 _iswprint       endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    35h ; '5'
.plt:0000000000001A9B                 jmp     sub_1730
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001AA0 ___ctype_b_loc  proc near               ; CODE XREF: find_field_isra_2:loc_2870↓p
.plt:0000000000001AA0                                         ; quotearg_buffer_restyled+513↓p ...
.plt:0000000000001AA0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001AA0 ___ctype_b_loc  endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    36h ; '6'
.plt:0000000000001AAB                 jmp     sub_1730
.plt:0000000000001AAB ; } // starts at 1730
.plt:0000000000001AAB _plt            ends
.plt:0000000000001AAB
.plt.got:0000000000001AB0 ; ===========================================================================
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; Segment type: Pure code
.plt.got:0000000000001AB0 ; Segment permissions: Read/Execute
.plt.got:0000000000001AB0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001AB0                 assume cs:_plt_got
.plt.got:0000000000001AB0                 ;org 1AB0h
.plt.got:0000000000001AB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; Attributes: thunk
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001AB0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001AB0 ; __unwind {
.plt.got:0000000000001AB0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001AB0 __cxa_finalize  endp
.plt.got:0000000000001AB0
.plt.got:0000000000001AB0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001AB6                 align 8
.plt.got:0000000000001AB6 ; } // starts at 1AB0
.plt.got:0000000000001AB6 _plt_got        ends
.plt.got:0000000000001AB6
LOAD:0000000000001AB8 ; ===========================================================================
LOAD:0000000000001AB8
LOAD:0000000000001AB8 ; Segment type: Pure code
LOAD:0000000000001AB8 ; Segment permissions: Read/Execute
LOAD:0000000000001AB8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001AB8                 assume cs:LOAD
LOAD:0000000000001AB8                 ;org 1AB8h
LOAD:0000000000001AB8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001AB8                 align 20h
LOAD:0000000000001AB8 LOAD            ends
LOAD:0000000000001AB8
.text:0000000000001AC0 ; ===========================================================================
.text:0000000000001AC0
.text:0000000000001AC0 ; Segment type: Pure code
.text:0000000000001AC0 ; Segment permissions: Read/Execute
.text:0000000000001AC0 _text           segment para public 'CODE' use64
.text:0000000000001AC0                 assume cs:_text
.text:0000000000001AC0                 ;org 1AC0h
.text:0000000000001AC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001AC0
.text:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AC0
.text:0000000000001AC0
.text:0000000000001AC0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001AC0                 public main
.text:0000000000001AC0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001AC0
.text:0000000000001AC0 var_D0          = qword ptr -0D0h
.text:0000000000001AC0 var_C8          = qword ptr -0C8h
.text:0000000000001AC0 var_C0          = dword ptr -0C0h
.text:0000000000001AC0 var_B1          = byte ptr -0B1h
.text:0000000000001AC0 var_B0          = qword ptr -0B0h
.text:0000000000001AC0 var_A8          = qword ptr -0A8h
.text:0000000000001AC0 var_A0          = qword ptr -0A0h
.text:0000000000001AC0 var_98          = byte ptr -98h
.text:0000000000001AC0 ptr             = qword ptr -88h
.text:0000000000001AC0 var_78          = qword ptr -78h
.text:0000000000001AC0 var_70          = qword ptr -70h
.text:0000000000001AC0 var_68          = qword ptr -68h
.text:0000000000001AC0 s1              = qword ptr -58h
.text:0000000000001AC0 var_50          = qword ptr -50h
.text:0000000000001AC0 var_40          = qword ptr -40h
.text:0000000000001AC0
.text:0000000000001AC0 ; __unwind {
.text:0000000000001AC0                 push    r15
.text:0000000000001AC2                 push    r14
.text:0000000000001AC4                 mov     r14d, edi
.text:0000000000001AC7                 push    r13
.text:0000000000001AC9                 push    r12
.text:0000000000001ACB                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000001AD2                 push    rbp
.text:0000000000001AD3                 push    rbx
.text:0000000000001AD4                 mov     r15, rsi
.text:0000000000001AD7                 sub     rsp, 0A8h
.text:0000000000001ADE                 mov     rax, fs:28h
.text:0000000000001AE7                 mov     [rsp+0D8h+var_40], rax
.text:0000000000001AEF                 xor     eax, eax
.text:0000000000001AF1                 call    _getenv
.text:0000000000001AF6                 mov     rdi, [r15]
.text:0000000000001AF9                 test    rax, rax
.text:0000000000001AFC                 lea     rax, aLt+2      ; "-"
.text:0000000000001B03                 setnz   r12b
.text:0000000000001B07                 xor     r13d, r13d
.text:0000000000001B0A                 xor     ebx, ebx
.text:0000000000001B0C                 mov     [rsp+0D8h+var_50], rax
.text:0000000000001B14                 mov     [rsp+0D8h+s1], rax
.text:0000000000001B1C                 xor     ebp, ebp
.text:0000000000001B1E                 call    set_program_name
.text:0000000000001B23                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001B2A                 mov     edi, 6          ; category
.text:0000000000001B2F                 call    _setlocale
.text:0000000000001B34                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001B3B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B42                 call    _bindtextdomain
.text:0000000000001B47                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B4E                 call    _textdomain
.text:0000000000001B53                 mov     edi, 3
.text:0000000000001B58                 call    hard_locale
.text:0000000000001B5D                 lea     rdi, close_stdout
.text:0000000000001B64                 mov     cs:hard_LC_COLLATE, al
.text:0000000000001B6A                 call    atexit
.text:0000000000001B6F                 lea     rcx, [rsp+0D8h+var_78]
.text:0000000000001B74                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000001B7B                 mov     cs:skip_chars, 0
.text:0000000000001B86                 mov     cs:skip_fields, 0
.text:0000000000001B91                 mov     cs:check_chars, rax
.text:0000000000001B98                 mov     cs:output_first_repeated, 1
.text:0000000000001B9F                 mov     cs:output_unique, 1
.text:0000000000001BA6                 mov     cs:output_later_repeated, 0
.text:0000000000001BAD                 mov     cs:countmode, 1
.text:0000000000001BB7                 mov     cs:delimit_groups, 0
.text:0000000000001BC1                 mov     [rsp+0D8h+var_B1], 0Ah
.text:0000000000001BC6                 mov     dword ptr [rsp+0D8h+var_D0], 0
.text:0000000000001BCE                 mov     qword ptr [rsp+0D8h+var_C0], rcx
.text:0000000000001BD3                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000001BD8                 jmp     short loc_1C1A
.text:0000000000001BD8 ; ---------------------------------------------------------------------------
.text:0000000000001BDA                 align 20h
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: main+161↓j
.text:0000000000001BE0                 test    r12b, r12b
.text:0000000000001BE3                 jz      short loc_1C23
.text:0000000000001BE5
.text:0000000000001BE5 loc_1BE5:                               ; CODE XREF: main+15D↓j
.text:0000000000001BE5                                         ; main+184↓j
.text:0000000000001BE5                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001BEB                 cmp     eax, r14d
.text:0000000000001BEE                 jge     loc_1D43
.text:0000000000001BF4                 movsxd  rdx, eax
.text:0000000000001BF7                 cmp     ebx, 2
.text:0000000000001BFA                 mov     rdi, [r15+rdx*8]
.text:0000000000001BFE                 jz      loc_24DC
.text:0000000000001C04                 add     eax, 1
.text:0000000000001C07                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001C0D                 mov     eax, ebx
.text:0000000000001C0F                 add     ebx, 1
.text:0000000000001C12                 mov     [rsp+rax*8+0D8h+s1], rdi
.text:0000000000001C1A
.text:0000000000001C1A loc_1C1A:                               ; CODE XREF: main+118↑j
.text:0000000000001C1A                                         ; main+720↓j ...
.text:0000000000001C1A                 cmp     ebp, 0FFFFFFFFh
.text:0000000000001C1D                 jz      short loc_1BE5
.text:0000000000001C1F
.text:0000000000001C1F loc_1C1F:                               ; CODE XREF: main+1D9↓j
.text:0000000000001C1F                                         ; main+253↓j ...
.text:0000000000001C1F                 test    ebx, ebx
.text:0000000000001C21                 jnz     short loc_1BE0
.text:0000000000001C23
.text:0000000000001C23 loc_1C23:                               ; CODE XREF: main+123↑j
.text:0000000000001C23                 lea     rcx, longopts   ; longopts
.text:0000000000001C2A                 lea     rdx, shortopts  ; "-0123456789Dcdf:is:uw:z"
.text:0000000000001C31                 xor     r8d, r8d        ; longind
.text:0000000000001C34                 mov     rsi, r15        ; argv
.text:0000000000001C37                 mov     edi, r14d       ; argc
.text:0000000000001C3A                 call    _getopt_long
.text:0000000000001C3F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001C42                 mov     ebp, eax
.text:0000000000001C44                 jz      short loc_1BE5
.text:0000000000001C46                 cmp     eax, 64h ; 'd'
.text:0000000000001C49                 jz      loc_2189
.text:0000000000001C4F                 jle     short loc_1CA0
.text:0000000000001C51                 cmp     eax, 75h ; 'u'
.text:0000000000001C54                 jz      loc_2177
.text:0000000000001C5A                 jg      loc_1CE0
.text:0000000000001C60                 cmp     eax, 69h ; 'i'
.text:0000000000001C63                 jz      loc_219B
.text:0000000000001C69                 cmp     eax, 73h ; 's'
.text:0000000000001C6C                 jz      loc_1FD5
.text:0000000000001C72                 cmp     eax, 66h ; 'f'
.text:0000000000001C75                 jnz     short loc_1CCD
.text:0000000000001C77                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001C7E                 lea     rsi, aInvalidNumberO ; "invalid number of fields to skip"
.text:0000000000001C85                 call    size_opt
.text:0000000000001C8A                 mov     dword ptr [rsp+0D8h+var_D0], 2
.text:0000000000001C92                 mov     cs:skip_fields, rax
.text:0000000000001C99                 jmp     short loc_1C1F
.text:0000000000001C99 ; ---------------------------------------------------------------------------
.text:0000000000001C9B                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: main+18F↑j
.text:0000000000001CA0                 cmp     eax, 39h ; '9'
.text:0000000000001CA3                 jg      short loc_1D20
.text:0000000000001CA5                 cmp     eax, 30h ; '0'
.text:0000000000001CA8                 jge     loc_21A7
.text:0000000000001CAE                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001CB3                 jz      loc_252E
.text:0000000000001CB9                 cmp     eax, 1
.text:0000000000001CBC                 jz      loc_1FAA
.text:0000000000001CC2                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001CC7                 jz      loc_21E5
.text:0000000000001CCD
.text:0000000000001CCD loc_1CCD:                               ; CODE XREF: main+1B5↑j
.text:0000000000001CCD                                         ; main+237↓j ...
.text:0000000000001CCD                 mov     edi, 1          ; status
.text:0000000000001CD2                 call    usage
.text:0000000000001CD2 ; ---------------------------------------------------------------------------
.text:0000000000001CD7                 align 20h
.text:0000000000001CE0
.text:0000000000001CE0 loc_1CE0:                               ; CODE XREF: main+19A↑j
.text:0000000000001CE0                 cmp     eax, 7Ah ; 'z'
.text:0000000000001CE3                 jz      loc_2223
.text:0000000000001CE9                 cmp     eax, 80h
.text:0000000000001CEE                 jz      loc_2054
.text:0000000000001CF4                 cmp     eax, 77h ; 'w'
.text:0000000000001CF7                 jnz     short loc_1CCD
.text:0000000000001CF9                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001D00                 lea     rsi, aInvalidNumberO_0 ; "invalid number of bytes to compare"
.text:0000000000001D07                 call    size_opt
.text:0000000000001D0C                 mov     cs:check_chars, rax
.text:0000000000001D13                 jmp     loc_1C1F
.text:0000000000001D13 ; ---------------------------------------------------------------------------
.text:0000000000001D18                 align 20h
.text:0000000000001D20
.text:0000000000001D20 loc_1D20:                               ; CODE XREF: main+1E3↑j
.text:0000000000001D20                 cmp     eax, 44h ; 'D'
.text:0000000000001D23                 jz      loc_1FF4
.text:0000000000001D29                 cmp     eax, 63h ; 'c'
.text:0000000000001D2C                 jnz     short loc_1CCD
.text:0000000000001D2E                 mov     cs:countmode, 0
.text:0000000000001D38                 mov     r13d, 1
.text:0000000000001D3E                 jmp     loc_1C1F
.text:0000000000001D43 ; ---------------------------------------------------------------------------
.text:0000000000001D43
.text:0000000000001D43 loc_1D43:                               ; CODE XREF: main+12E↑j
.text:0000000000001D43                 cmp     cs:grouping, 0
.text:0000000000001D4A                 jz      loc_20A0
.text:0000000000001D50                 test    r13b, r13b
.text:0000000000001D53                 jnz     loc_2535
.text:0000000000001D59                 cmp     cs:countmode, 1
.text:0000000000001D60                 mov     edx, 5
.text:0000000000001D65                 lea     rsi, aGroupingAndPri ; "grouping and printing repeat counts is "...
.text:0000000000001D6C                 jnz     loc_2541
.text:0000000000001D72
.text:0000000000001D72 loc_1D72:                               ; CODE XREF: main+5E7↓j
.text:0000000000001D72                                         ; main+600↓j
.text:0000000000001D72                 movsx   eax, [rsp+0D8h+var_B1]
.text:0000000000001D77                 lea     rsi, aLt+2      ; s2
.text:0000000000001D7E                 mov     rbx, [rsp+0D8h+var_50]
.text:0000000000001D86                 mov     [rsp+0D8h+var_C0], eax
.text:0000000000001D8A                 mov     rax, [rsp+0D8h+s1]
.text:0000000000001D92                 mov     rdi, rax        ; s1
.text:0000000000001D95                 mov     [rsp+0D8h+var_A8], rax
.text:0000000000001D9A                 call    _strcmp
.text:0000000000001D9F                 test    eax, eax
.text:0000000000001DA1                 jnz     loc_222D
.text:0000000000001DA7
.text:0000000000001DA7 loc_1DA7:                               ; CODE XREF: main+788↓j
.text:0000000000001DA7                 lea     rsi, aLt+2      ; s2
.text:0000000000001DAE                 mov     rdi, rbx        ; s1
.text:0000000000001DB1                 call    _strcmp
.text:0000000000001DB6                 test    eax, eax
.text:0000000000001DB8                 jz      short loc_1DD9
.text:0000000000001DBA                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001DC1                 lea     rsi, aW         ; "w"
.text:0000000000001DC8                 mov     rdi, rbx
.text:0000000000001DCB                 call    freopen_safer
.text:0000000000001DD0                 test    rax, rax
.text:0000000000001DD3                 jz      loc_2560
.text:0000000000001DD9
.text:0000000000001DD9 loc_1DD9:                               ; CODE XREF: main+2F8↑j
.text:0000000000001DD9                 mov     rdi, cs:stdin@@GLIBC_2_2_5
.text:0000000000001DE0                 lea     rbp, [rsp+0D8h+var_98]
.text:0000000000001DE5                 mov     esi, 2
.text:0000000000001DEA                 lea     r13, [rsp+0D8h+var_78]
.text:0000000000001DEF                 call    fadvise
.text:0000000000001DF4                 mov     rdi, rbp
.text:0000000000001DF7                 call    initbuffer
.text:0000000000001DFC                 mov     rdi, r13
.text:0000000000001DFF                 call    initbuffer
.text:0000000000001E04                 cmp     cs:output_unique, 0
.text:0000000000001E0B                 jz      short loc_1E25
.text:0000000000001E0D                 movzx   ebx, cs:output_first_repeated
.text:0000000000001E14                 test    bl, bl
.text:0000000000001E16                 jz      short loc_1E25
.text:0000000000001E18                 cmp     cs:countmode, 1
.text:0000000000001E1F                 jz      loc_22A3
.text:0000000000001E25
.text:0000000000001E25 loc_1E25:                               ; CODE XREF: main+34B↑j
.text:0000000000001E25                                         ; main+356↑j
.text:0000000000001E25                 mov     edx, [rsp+0D8h+var_C0]
.text:0000000000001E29                 mov     rsi, cs:stdin@@GLIBC_2_2_5
.text:0000000000001E30                 mov     rdi, r13
.text:0000000000001E33                 call    readlinebuffer_delim
.text:0000000000001E38                 test    rax, rax
.text:0000000000001E3B                 jz      loc_1F4E
.text:0000000000001E41                 mov     r12, [rsp+0D8h+var_68]
.text:0000000000001E46                 mov     rbx, [rsp+0D8h+var_70]
.text:0000000000001E4B                 mov     rsi, r12
.text:0000000000001E4E                 mov     rdi, rbx
.text:0000000000001E51                 sub     rbx, 1
.text:0000000000001E55                 call    find_field_isra_2
.text:0000000000001E5A                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000001E5F                 sub     rax, r12
.text:0000000000001E62                 mov     byte ptr [rsp+0D8h+var_B0], 1
.text:0000000000001E67                 sub     rbx, rax
.text:0000000000001E6A                 xor     r12d, r12d
.text:0000000000001E6D                 mov     [rsp+0D8h+var_D0], rbx
.text:0000000000001E72
.text:0000000000001E72 loc_1E72:                               ; CODE XREF: main+621↓j
.text:0000000000001E72                                         ; main+647↓j
.text:0000000000001E72                 mov     rsi, cs:stdin@@GLIBC_2_2_5
.text:0000000000001E79                 test    byte ptr [rsi], 10h
.text:0000000000001E7C                 jnz     loc_1F41
.text:0000000000001E82
.text:0000000000001E82 loc_1E82:                               ; CODE XREF: main+47B↓j
.text:0000000000001E82                 mov     edx, [rsp+0D8h+var_C0]
.text:0000000000001E86                 mov     rdi, rbp
.text:0000000000001E89                 call    readlinebuffer_delim
.text:0000000000001E8E                 test    rax, rax
.text:0000000000001E91                 jz      loc_2374
.text:0000000000001E97                 mov     rbx, [rbp+8]
.text:0000000000001E9B                 mov     r15, [rbp+10h]
.text:0000000000001E9F                 mov     rdi, rbx
.text:0000000000001EA2                 mov     rsi, r15
.text:0000000000001EA5                 sub     rbx, 1
.text:0000000000001EA9                 call    find_field_isra_2
.text:0000000000001EAE                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000001EB3                 mov     r14, rax
.text:0000000000001EB6                 mov     rsi, [rsp+0D8h+var_C8]
.text:0000000000001EBB                 sub     rax, r15
.text:0000000000001EBE                 mov     rdi, r14
.text:0000000000001EC1                 sub     rbx, rax
.text:0000000000001EC4                 mov     rdx, rbx
.text:0000000000001EC7                 call    different
.text:0000000000001ECC                 mov     edx, eax
.text:0000000000001ECE                 xor     edx, 1
.text:0000000000001ED1                 movzx   ecx, dl
.text:0000000000001ED4                 movzx   edx, dl
.text:0000000000001ED7                 add     r12, rdx
.text:0000000000001EDA                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000001EDE                 jz      loc_2110
.text:0000000000001EE4                 mov     edx, cs:delimit_groups
.text:0000000000001EEA                 test    edx, edx
.text:0000000000001EEC                 jz      loc_20D2
.text:0000000000001EF2                 test    al, al
.text:0000000000001EF4                 jz      loc_2136
.text:0000000000001EFA                 movzx   eax, byte ptr [rsp+0D8h+var_B0]
.text:0000000000001EFF                 test    r12, r12
.text:0000000000001F02                 mov     esi, 0
.text:0000000000001F07                 cmovnz  eax, esi
.text:0000000000001F0A                 mov     byte ptr [rsp+0D8h+var_B0], al
.text:0000000000001F0E
.text:0000000000001F0E loc_1F0E:                               ; CODE XREF: main+614↓j
.text:0000000000001F0E                                         ; main+671↓j
.text:0000000000001F0E                 mov     rdx, r12
.text:0000000000001F11                 mov     esi, ecx
.text:0000000000001F13                 mov     rdi, r13
.text:0000000000001F16                 call    writeline
.text:0000000000001F1B                 mov     rsi, cs:stdin@@GLIBC_2_2_5
.text:0000000000001F22                 xor     r12d, r12d
.text:0000000000001F25                 mov     rax, rbp
.text:0000000000001F28                 mov     [rsp+0D8h+var_D0], rbx
.text:0000000000001F2D                 mov     rbp, r13
.text:0000000000001F30                 mov     [rsp+0D8h+var_C8], r14
.text:0000000000001F35                 mov     r13, rax
.text:0000000000001F38                 test    byte ptr [rsi], 10h
.text:0000000000001F3B                 jz      loc_1E82
.text:0000000000001F41
.text:0000000000001F41 loc_1F41:                               ; CODE XREF: main+3BC↑j
.text:0000000000001F41                                         ; main+8BE↓j
.text:0000000000001F41                 mov     rdx, r12
.text:0000000000001F44                 xor     esi, esi
.text:0000000000001F46                 mov     rdi, r13
.text:0000000000001F49                 call    writeline
.text:0000000000001F4E
.text:0000000000001F4E loc_1F4E:                               ; CODE XREF: main+37B↑j
.text:0000000000001F4E                                         ; main+952↓j ...
.text:0000000000001F4E                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000001F55                 test    byte ptr [rdi], 20h
.text:0000000000001F58                 jnz     loc_2384
.text:0000000000001F5E                 call    rpl_fclose
.text:0000000000001F63                 test    eax, eax
.text:0000000000001F65                 jnz     loc_2384
.text:0000000000001F6B                 mov     rdi, [rsp+0D8h+ptr] ; ptr
.text:0000000000001F70                 call    _free
.text:0000000000001F75                 mov     rdi, [rsp+0D8h+var_68] ; ptr
.text:0000000000001F7A                 call    _free
.text:0000000000001F7F                 xor     eax, eax
.text:0000000000001F81                 mov     rcx, [rsp+0D8h+var_40]
.text:0000000000001F89                 xor     rcx, fs:28h
.text:0000000000001F92                 jnz     loc_255B
.text:0000000000001F98                 add     rsp, 0A8h
.text:0000000000001F9F                 pop     rbx
.text:0000000000001FA0                 pop     rbp
.text:0000000000001FA1                 pop     r12
.text:0000000000001FA3                 pop     r13
.text:0000000000001FA5                 pop     r14
.text:0000000000001FA7                 pop     r15
.text:0000000000001FA9                 retn
.text:0000000000001FAA ; ---------------------------------------------------------------------------
.text:0000000000001FAA
.text:0000000000001FAA loc_1FAA:                               ; CODE XREF: main+1FC↑j
.text:0000000000001FAA                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001FB1                 cmp     byte ptr [rdi], 2Bh ; '+'
.text:0000000000001FB4                 jz      loc_244C
.text:0000000000001FBA
.text:0000000000001FBA loc_1FBA:                               ; CODE XREF: main+9A4↓j
.text:0000000000001FBA                 cmp     ebx, 2
.text:0000000000001FBD                 jz      loc_24DC
.text:0000000000001FC3                 mov     eax, ebx
.text:0000000000001FC5                 add     ebx, 1
.text:0000000000001FC8                 mov     [rsp+rax*8+0D8h+s1], rdi
.text:0000000000001FD0                 jmp     loc_1C1F
.text:0000000000001FD5 ; ---------------------------------------------------------------------------
.text:0000000000001FD5
.text:0000000000001FD5 loc_1FD5:                               ; CODE XREF: main+1AC↑j
.text:0000000000001FD5                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001FDC                 lea     rsi, aInvalidNumberO_1 ; "invalid number of bytes to skip"
.text:0000000000001FE3                 call    size_opt
.text:0000000000001FE8                 mov     cs:skip_chars, rax
.text:0000000000001FEF                 jmp     loc_1C1F
.text:0000000000001FF4 ; ---------------------------------------------------------------------------
.text:0000000000001FF4
.text:0000000000001FF4 loc_1FF4:                               ; CODE XREF: main+263↑j
.text:0000000000001FF4                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001FFB                 mov     cs:output_unique, 0
.text:0000000000002002                 mov     cs:output_later_repeated, 1
.text:0000000000002009                 test    rsi, rsi
.text:000000000000200C                 jz      loc_227F
.text:0000000000002012                 mov     r9, cs:argmatch_die
.text:0000000000002019                 lea     rdx, delimit_method_string
.text:0000000000002020                 lea     rcx, delimit_method_map
.text:0000000000002027                 lea     rdi, aAllRepeated ; "--all-repeated"
.text:000000000000202E                 mov     r8d, 4
.text:0000000000002034                 mov     r13d, 1
.text:000000000000203A                 call    __xargmatch_internal
.text:000000000000203F                 lea     rdx, delimit_method_map
.text:0000000000002046                 mov     eax, [rdx+rax*4]
.text:0000000000002049                 mov     cs:delimit_groups, eax
.text:000000000000204F                 jmp     loc_1C1F
.text:0000000000002054 ; ---------------------------------------------------------------------------
.text:0000000000002054
.text:0000000000002054 loc_2054:                               ; CODE XREF: main+22E↑j
.text:0000000000002054                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:000000000000205B                 test    rsi, rsi
.text:000000000000205E                 jz      loc_2294
.text:0000000000002064                 mov     r9, cs:argmatch_die
.text:000000000000206B                 lea     rdx, grouping_method_string
.text:0000000000002072                 lea     rcx, grouping_method_map
.text:0000000000002079                 lea     rdi, aGroup     ; "--group"
.text:0000000000002080                 mov     r8d, 4
.text:0000000000002086                 call    __xargmatch_internal
.text:000000000000208B                 lea     rdx, grouping_method_map
.text:0000000000002092                 mov     eax, [rdx+rax*4]
.text:0000000000002095                 mov     cs:grouping, eax
.text:000000000000209B                 jmp     loc_1C1F
.text:00000000000020A0 ; ---------------------------------------------------------------------------
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: main+28A↑j
.text:00000000000020A0                 cmp     cs:countmode, 0
.text:00000000000020A7                 jnz     loc_1D72
.text:00000000000020AD                 cmp     cs:output_later_repeated, 0
.text:00000000000020B4                 mov     edx, 5
.text:00000000000020B9                 lea     rsi, aPrintingAllDup ; "printing all duplicated lines and repea"...
.text:00000000000020C0                 jz      loc_1D72
.text:00000000000020C6                 jmp     loc_2541
.text:00000000000020CB ; ---------------------------------------------------------------------------
.text:00000000000020CB
.text:00000000000020CB loc_20CB:                               ; CODE XREF: main+658↓j
.text:00000000000020CB                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:00000000000020D2
.text:00000000000020D2 loc_20D2:                               ; CODE XREF: main+42C↑j
.text:00000000000020D2                 test    al, al
.text:00000000000020D4                 jnz     loc_1F0E
.text:00000000000020DA
.text:00000000000020DA loc_20DA:                               ; CODE XREF: main+663↓j
.text:00000000000020DA                                         ; main+67A↓j ...
.text:00000000000020DA                 cmp     cs:output_later_repeated, 0
.text:00000000000020E1                 jz      loc_1E72
.text:00000000000020E7                 mov     rdi, r13
.text:00000000000020EA                 mov     rdx, r12
.text:00000000000020ED                 mov     esi, ecx
.text:00000000000020EF                 call    writeline
.text:00000000000020F4                 mov     rax, rbp
.text:00000000000020F7                 mov     [rsp+0D8h+var_D0], rbx
.text:00000000000020FC                 mov     rbp, r13
.text:00000000000020FF                 mov     [rsp+0D8h+var_C8], r14
.text:0000000000002104                 mov     r13, rax
.text:0000000000002107                 jmp     loc_1E72
.text:0000000000002107 ; ---------------------------------------------------------------------------
.text:000000000000210C                 align 10h
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: main+41E↑j
.text:0000000000002110                 mov     edx, cs:delimit_groups
.text:0000000000002116                 test    edx, edx
.text:0000000000002118                 jz      short loc_20CB
.text:000000000000211A                 test    al, al
.text:000000000000211C                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000002123                 jz      short loc_20DA
.text:0000000000002125                 mov     byte ptr [rsp+0D8h+var_B0], 0
.text:000000000000212A                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000002131                 jmp     loc_1F0E
.text:0000000000002136 ; ---------------------------------------------------------------------------
.text:0000000000002136
.text:0000000000002136 loc_2136:                               ; CODE XREF: main+434↑j
.text:0000000000002136                 cmp     r12, 1
.text:000000000000213A                 jnz     short loc_20DA
.text:000000000000213C                 cmp     edx, 1
.text:000000000000213F                 jz      short loc_214D
.text:0000000000002141                 cmp     edx, 2
.text:0000000000002144                 jnz     short loc_20DA
.text:0000000000002146                 cmp     byte ptr [rsp+0D8h+var_B0], 0
.text:000000000000214B                 jnz     short loc_20DA
.text:000000000000214D
.text:000000000000214D loc_214D:                               ; CODE XREF: main+67F↑j
.text:000000000000214D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002154                 mov     rax, [rdi+28h]
.text:0000000000002158                 cmp     rax, [rdi+30h]
.text:000000000000215C                 jnb     loc_24C6
.text:0000000000002162                 movzx   esi, [rsp+0D8h+var_B1]
.text:0000000000002167                 lea     rdx, [rax+1]
.text:000000000000216B                 mov     [rdi+28h], rdx
.text:000000000000216F                 mov     [rax], sil
.text:0000000000002172                 jmp     loc_20DA
.text:0000000000002177 ; ---------------------------------------------------------------------------
.text:0000000000002177
.text:0000000000002177 loc_2177:                               ; CODE XREF: main+194↑j
.text:0000000000002177                 mov     cs:output_first_repeated, 0
.text:000000000000217E                 mov     r13d, 1
.text:0000000000002184                 jmp     loc_1C1F
.text:0000000000002189 ; ---------------------------------------------------------------------------
.text:0000000000002189
.text:0000000000002189 loc_2189:                               ; CODE XREF: main+189↑j
.text:0000000000002189                 mov     cs:output_unique, 0
.text:0000000000002190                 mov     r13d, 1
.text:0000000000002196                 jmp     loc_1C1F
.text:000000000000219B ; ---------------------------------------------------------------------------
.text:000000000000219B
.text:000000000000219B loc_219B:                               ; CODE XREF: main+1A3↑j
.text:000000000000219B                 mov     cs:ignore_case, 1
.text:00000000000021A2                 jmp     loc_1C1F
.text:00000000000021A7 ; ---------------------------------------------------------------------------
.text:00000000000021A7
.text:00000000000021A7 loc_21A7:                               ; CODE XREF: main+1E8↑j
.text:00000000000021A7                 cmp     dword ptr [rsp+0D8h+var_D0], 2
.text:00000000000021AC                 jz      loc_23EC
.text:00000000000021B2                 mov     rax, cs:skip_fields
.text:00000000000021B9                 mov     rcx, 1999999999999999h
.text:00000000000021C3                 cmp     rax, rcx
.text:00000000000021C6                 jbe     loc_235C
.text:00000000000021CC
.text:00000000000021CC loc_21CC:                               ; CODE XREF: main+8AC↓j
.text:00000000000021CC                 mov     rax, [rsp+0D8h+var_C8]
.text:00000000000021D1                 mov     dword ptr [rsp+0D8h+var_D0], 1
.text:00000000000021D9                 mov     cs:skip_fields, rax
.text:00000000000021E0                 jmp     loc_1C1A
.text:00000000000021E5 ; ---------------------------------------------------------------------------
.text:00000000000021E5
.text:00000000000021E5 loc_21E5:                               ; CODE XREF: main+207↑j
.text:00000000000021E5                 sub     rsp, 8
.text:00000000000021E9                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000021F0                 mov     rcx, cs:Version
.text:00000000000021F7                 push    0
.text:00000000000021F9                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000002200                 lea     r8, aRichardMStallm ; "Richard M. Stallman"
.text:0000000000002207                 lea     rdx, unk_67CC
.text:000000000000220E                 lea     rsi, aUniq      ; "uniq"
.text:0000000000002215                 xor     eax, eax
.text:0000000000002217                 call    version_etc
.text:000000000000221C                 xor     edi, edi        ; status
.text:000000000000221E                 call    _exit
.text:0000000000002223 ; ---------------------------------------------------------------------------
.text:0000000000002223
.text:0000000000002223 loc_2223:                               ; CODE XREF: main+223↑j
.text:0000000000002223                 mov     [rsp+0D8h+var_B1], 0
.text:0000000000002228                 jmp     loc_1C1F
.text:000000000000222D ; ---------------------------------------------------------------------------
.text:000000000000222D
.text:000000000000222D loc_222D:                               ; CODE XREF: main+2E1↑j
.text:000000000000222D                 mov     rdx, cs:stdin@@GLIBC_2_2_5
.text:0000000000002234                 mov     rdi, [rsp+0D8h+var_A8]
.text:0000000000002239                 lea     rsi, aWriteError+0Ah ; "r"
.text:0000000000002240                 call    freopen_safer
.text:0000000000002245                 test    rax, rax
.text:0000000000002248                 jnz     loc_1DA7
.text:000000000000224E                 mov     rdx, [rsp+0D8h+var_A8]
.text:0000000000002253                 mov     esi, 3
.text:0000000000002258                 xor     edi, edi
.text:000000000000225A                 call    quotearg_n_style_colon
.text:000000000000225F                 mov     rbx, rax
.text:0000000000002262                 call    ___errno_location
.text:0000000000002267                 mov     esi, [rax]      ; errnum
.text:0000000000002269                 lea     rdx, aS_0+2     ; format
.text:0000000000002270                 mov     rcx, rbx
.text:0000000000002273                 mov     edi, 1          ; status
.text:0000000000002278                 xor     eax, eax
.text:000000000000227A                 call    _error
.text:000000000000227F
.text:000000000000227F loc_227F:                               ; CODE XREF: main+54C↑j
.text:000000000000227F                 mov     cs:delimit_groups, 0
.text:0000000000002289                 mov     r13d, 1
.text:000000000000228F                 jmp     loc_1C1F
.text:0000000000002294 ; ---------------------------------------------------------------------------
.text:0000000000002294
.text:0000000000002294 loc_2294:                               ; CODE XREF: main+59E↑j
.text:0000000000002294                 mov     cs:grouping, 3
.text:000000000000229E                 jmp     loc_1C1F
.text:00000000000022A3 ; ---------------------------------------------------------------------------
.text:00000000000022A3
.text:00000000000022A3 loc_22A3:                               ; CODE XREF: main+35F↑j
.text:00000000000022A3                 mov     byte ptr [rsp+0D8h+var_D0], 0
.text:00000000000022A8
.text:00000000000022A8 loc_22A8:                               ; CODE XREF: main+897↓j
.text:00000000000022A8                                         ; main+921↓j
.text:00000000000022A8                 mov     rsi, cs:stdin@@GLIBC_2_2_5
.text:00000000000022AF                 test    byte ptr [rsi], 10h
.text:00000000000022B2                 jnz     loc_2406
.text:00000000000022B8                 mov     edx, [rsp+0D8h+var_C0]
.text:00000000000022BC                 mov     rdi, rbp
.text:00000000000022BF                 call    readlinebuffer_delim
.text:00000000000022C4                 test    rax, rax
.text:00000000000022C7                 jz      loc_2406
.text:00000000000022CD                 mov     r12, [rbp+8]
.text:00000000000022D1                 mov     r15, [rbp+10h]
.text:00000000000022D5                 mov     rdi, r12
.text:00000000000022D8                 mov     rsi, r15
.text:00000000000022DB                 sub     r12, 1
.text:00000000000022DF                 call    find_field_isra_2
.text:00000000000022E4                 mov     r14, rax
.text:00000000000022E7                 sub     rax, r15
.text:00000000000022EA                 sub     r12, rax
.text:00000000000022ED                 cmp     qword ptr [r13+8], 0
.text:00000000000022F2                 jnz     loc_23BD
.text:00000000000022F8
.text:00000000000022F8 loc_22F8:                               ; CODE XREF: main+914↓j
.text:00000000000022F8                 mov     eax, cs:grouping
.text:00000000000022FE                 test    eax, eax
.text:0000000000002300                 jz      short loc_2327
.text:0000000000002302                 cmp     eax, 1
.text:0000000000002305                 jz      loc_2469
.text:000000000000230B                 cmp     eax, 4
.text:000000000000230E                 jz      loc_2469
.text:0000000000002314                 cmp     byte ptr [rsp+0D8h+var_D0], 0
.text:0000000000002319                 jz      short loc_2327
.text:000000000000231B                 sub     eax, 2
.text:000000000000231E                 cmp     eax, 1
.text:0000000000002321                 jbe     loc_2469
.text:0000000000002327
.text:0000000000002327 loc_2327:                               ; CODE XREF: main+840↑j
.text:0000000000002327                                         ; main+859↑j ...
.text:0000000000002327                 mov     rdx, [rbp+8]    ; n
.text:000000000000232B                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000232F                 mov     esi, 1          ; size
.text:0000000000002334                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000233B                 call    _fwrite_unlocked
.text:0000000000002340                 mov     rax, rbp
.text:0000000000002343                 mov     byte ptr [rsp+0D8h+var_D0], bl
.text:0000000000002347                 mov     rbp, r13
.text:000000000000234A                 mov     [rsp+0D8h+var_A0], r12
.text:000000000000234F                 mov     [rsp+0D8h+var_B0], r14
.text:0000000000002354                 mov     r13, rax
.text:0000000000002357                 jmp     loc_22A8
.text:000000000000235C ; ---------------------------------------------------------------------------
.text:000000000000235C
.text:000000000000235C loc_235C:                               ; CODE XREF: main+706↑j
.text:000000000000235C                 imul    rdx, rax, 0Ah
.text:0000000000002360                 lea     ecx, [rbp-30h]
.text:0000000000002363                 movsxd  rcx, ecx
.text:0000000000002366                 add     rdx, rcx
.text:0000000000002369                 cmp     rax, rdx
.text:000000000000236C                 ja      loc_21CC
.text:0000000000002372                 jmp     short loc_23F2
.text:0000000000002374 ; ---------------------------------------------------------------------------
.text:0000000000002374
.text:0000000000002374 loc_2374:                               ; CODE XREF: main+3D1↑j
.text:0000000000002374                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:000000000000237B                 test    byte ptr [rax], 20h
.text:000000000000237E                 jz      loc_1F41
.text:0000000000002384
.text:0000000000002384 loc_2384:                               ; CODE XREF: main+498↑j
.text:0000000000002384                                         ; main+4A5↑j
.text:0000000000002384                 mov     rsi, [rsp+0D8h+var_A8]
.text:0000000000002389                 mov     edi, 4
.text:000000000000238E                 call    quotearg_style
.text:0000000000002393                 lea     rsi, msgid      ; "error reading %s"
.text:000000000000239A                 mov     rbx, rax
.text:000000000000239D                 mov     edx, 5          ; category
.text:00000000000023A2                 xor     edi, edi        ; domainname
.text:00000000000023A4                 call    _dcgettext
.text:00000000000023A9                 mov     rcx, rbx
.text:00000000000023AC                 mov     rdx, rax        ; format
.text:00000000000023AF                 xor     esi, esi        ; errnum
.text:00000000000023B1                 mov     edi, 1          ; status
.text:00000000000023B6                 xor     eax, eax
.text:00000000000023B8                 call    _error
.text:00000000000023BD
.text:00000000000023BD loc_23BD:                               ; CODE XREF: main+832↑j
.text:00000000000023BD                 mov     rcx, [rsp+0D8h+var_A0]
.text:00000000000023C2                 mov     rsi, [rsp+0D8h+var_B0]
.text:00000000000023C7                 mov     rdx, r12
.text:00000000000023CA                 mov     rdi, r14
.text:00000000000023CD                 call    different
.text:00000000000023D2                 test    al, al
.text:00000000000023D4                 jnz     loc_22F8
.text:00000000000023DA                 cmp     cs:grouping, 0
.text:00000000000023E1                 jz      loc_22A8
.text:00000000000023E7                 jmp     loc_2327
.text:00000000000023EC ; ---------------------------------------------------------------------------
.text:00000000000023EC
.text:00000000000023EC loc_23EC:                               ; CODE XREF: main+6EC↑j
.text:00000000000023EC                 lea     edx, [rax-30h]
.text:00000000000023EF                 movsxd  rdx, edx
.text:00000000000023F2
.text:00000000000023F2 loc_23F2:                               ; CODE XREF: main+8B2↑j
.text:00000000000023F2                 mov     cs:skip_fields, rdx
.text:00000000000023F9                 mov     dword ptr [rsp+0D8h+var_D0], 1
.text:0000000000002401                 jmp     loc_1C1A
.text:0000000000002406 ; ---------------------------------------------------------------------------
.text:0000000000002406
.text:0000000000002406 loc_2406:                               ; CODE XREF: main+7F2↑j
.text:0000000000002406                                         ; main+807↑j
.text:0000000000002406                 mov     eax, cs:grouping
.text:000000000000240C                 sub     eax, 2
.text:000000000000240F                 and     eax, 0FFFFFFFDh
.text:0000000000002412                 jnz     loc_1F4E
.text:0000000000002418                 cmp     byte ptr [rsp+0D8h+var_D0], 0
.text:000000000000241D                 jz      loc_1F4E
.text:0000000000002423                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000242A                 mov     rax, [rdi+28h]
.text:000000000000242E                 cmp     rax, [rdi+30h]
.text:0000000000002432                 jnb     loc_2520
.text:0000000000002438                 movzx   ecx, [rsp+0D8h+var_B1]
.text:000000000000243D                 lea     rdx, [rax+1]
.text:0000000000002441                 mov     [rdi+28h], rdx
.text:0000000000002445                 mov     [rax], cl
.text:0000000000002447                 jmp     loc_1F4E
.text:000000000000244C ; ---------------------------------------------------------------------------
.text:000000000000244C
.text:000000000000244C loc_244C:                               ; CODE XREF: main+4F4↑j
.text:000000000000244C                 call    posix2_version
.text:0000000000002451                 sub     eax, 30DB0h
.text:0000000000002456                 cmp     eax, 2B8h
.text:000000000000245B                 ja      short loc_2492
.text:000000000000245D
.text:000000000000245D loc_245D:                               ; CODE XREF: main+9F3↓j
.text:000000000000245D                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002464                 jmp     loc_1FBA
.text:0000000000002469 ; ---------------------------------------------------------------------------
.text:0000000000002469
.text:0000000000002469 loc_2469:                               ; CODE XREF: main+845↑j
.text:0000000000002469                                         ; main+84E↑j ...
.text:0000000000002469                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002470                 mov     rax, [rdi+28h]
.text:0000000000002474                 cmp     rax, [rdi+30h]
.text:0000000000002478                 jnb     loc_2512
.text:000000000000247E                 movzx   ecx, [rsp+0D8h+var_B1]
.text:0000000000002483                 lea     rdx, [rax+1]
.text:0000000000002487                 mov     [rdi+28h], rdx
.text:000000000000248B                 mov     [rax], cl
.text:000000000000248D                 jmp     loc_2327
.text:0000000000002492 ; ---------------------------------------------------------------------------
.text:0000000000002492
.text:0000000000002492 loc_2492:                               ; CODE XREF: main+99B↑j
.text:0000000000002492                 mov     rcx, qword ptr [rsp+0D8h+var_C0]
.text:0000000000002497                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:000000000000249E                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:00000000000024A5                 xor     esi, esi
.text:00000000000024A7                 mov     edx, 0Ah
.text:00000000000024AC                 call    xstrtoul
.text:00000000000024B1                 test    eax, eax
.text:00000000000024B3                 jnz     short loc_245D
.text:00000000000024B5                 mov     rax, [rsp+0D8h+var_78]
.text:00000000000024BA                 mov     cs:skip_chars, rax
.text:00000000000024C1                 jmp     loc_1C1F
.text:00000000000024C6 ; ---------------------------------------------------------------------------
.text:00000000000024C6
.text:00000000000024C6 loc_24C6:                               ; CODE XREF: main+69C↑j
.text:00000000000024C6                 mov     esi, [rsp+0D8h+var_C0] ; int
.text:00000000000024CA                 mov     dword ptr [rsp+0D8h+var_A0], ecx
.text:00000000000024CE                 call    ___overflow
.text:00000000000024D3                 mov     ecx, dword ptr [rsp+0D8h+var_A0]
.text:00000000000024D7                 jmp     loc_20DA
.text:00000000000024DC ; ---------------------------------------------------------------------------
.text:00000000000024DC
.text:00000000000024DC loc_24DC:                               ; CODE XREF: main+13E↑j
.text:00000000000024DC                                         ; main+4FD↑j
.text:00000000000024DC                 call    quote
.text:00000000000024E1                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000024E8                 mov     rbx, rax
.text:00000000000024EB                 mov     edx, 5          ; category
.text:00000000000024F0                 xor     edi, edi        ; domainname
.text:00000000000024F2                 call    _dcgettext
.text:00000000000024F7                 xor     edi, edi        ; status
.text:00000000000024F9                 mov     rdx, rax        ; format
.text:00000000000024FC                 mov     rcx, rbx
.text:00000000000024FF                 xor     esi, esi        ; errnum
.text:0000000000002501                 xor     eax, eax
.text:0000000000002503                 call    _error
.text:0000000000002508                 mov     edi, 1          ; status
.text:000000000000250D                 call    usage
.text:0000000000002512 ; ---------------------------------------------------------------------------
.text:0000000000002512
.text:0000000000002512 loc_2512:                               ; CODE XREF: main+9B8↑j
.text:0000000000002512                 mov     esi, [rsp+0D8h+var_C0] ; int
.text:0000000000002516                 call    ___overflow
.text:000000000000251B                 jmp     loc_2327
.text:0000000000002520 ; ---------------------------------------------------------------------------
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: main+972↑j
.text:0000000000002520                 mov     esi, [rsp+0D8h+var_C0] ; int
.text:0000000000002524                 call    ___overflow
.text:0000000000002529                 jmp     loc_1F4E
.text:000000000000252E ; ---------------------------------------------------------------------------
.text:000000000000252E
.text:000000000000252E loc_252E:                               ; CODE XREF: main+1F3↑j
.text:000000000000252E                 xor     edi, edi        ; status
.text:0000000000002530                 call    usage
.text:0000000000002535 ; ---------------------------------------------------------------------------
.text:0000000000002535
.text:0000000000002535 loc_2535:                               ; CODE XREF: main+293↑j
.text:0000000000002535                 lea     rsi, aGroupIsMutuall ; "--group is mutually exclusive with -c/-"...
.text:000000000000253C                 mov     edx, 5          ; category
.text:0000000000002541
.text:0000000000002541 loc_2541:                               ; CODE XREF: main+2AC↑j
.text:0000000000002541                                         ; main+606↑j
.text:0000000000002541                 xor     edi, edi        ; domainname
.text:0000000000002543                 call    _dcgettext
.text:0000000000002548                 xor     esi, esi        ; errnum
.text:000000000000254A                 mov     rdx, rax        ; format
.text:000000000000254D                 xor     edi, edi        ; status
.text:000000000000254F                 xor     eax, eax
.text:0000000000002551                 call    _error
.text:0000000000002556                 jmp     loc_1CCD
.text:000000000000255B ; ---------------------------------------------------------------------------
.text:000000000000255B
.text:000000000000255B loc_255B:                               ; CODE XREF: main+4D2↑j
.text:000000000000255B                 call    ___stack_chk_fail
.text:0000000000002560 ; ---------------------------------------------------------------------------
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: main+313↑j
.text:0000000000002560                 mov     rdx, rbx
.text:0000000000002563                 mov     esi, 3
.text:0000000000002568                 xor     edi, edi
.text:000000000000256A                 call    quotearg_n_style_colon
.text:000000000000256F                 mov     rbx, rax
.text:0000000000002572                 call    ___errno_location
.text:0000000000002577                 mov     esi, [rax]      ; errnum
.text:0000000000002579                 lea     rdx, aS_0+2     ; format
.text:0000000000002580                 mov     rcx, rbx
.text:0000000000002583                 mov     edi, 1          ; status
.text:0000000000002588                 xor     eax, eax
.text:000000000000258A                 call    _error
.text:000000000000258A ; } // starts at 1AC0
.text:000000000000258F                 nop
.text:000000000000258F main            endp ; sp-analysis failed
.text:000000000000258F
.text:0000000000002590
.text:0000000000002590 ; =============== S U B R O U T I N E =======================================
.text:0000000000002590
.text:0000000000002590 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002590
.text:0000000000002590 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002590                 public start
.text:0000000000002590 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002590 ; __unwind {
.text:0000000000002590                 xor     ebp, ebp
.text:0000000000002592                 mov     r9, rdx         ; rtld_fini
.text:0000000000002595                 pop     rsi             ; argc
.text:0000000000002596                 mov     rdx, rsp        ; ubp_av
.text:0000000000002599                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000259D                 push    rax
.text:000000000000259E                 push    rsp             ; stack_end
.text:000000000000259F                 lea     r8, __libc_csu_fini ; fini
.text:00000000000025A6                 lea     rcx, __libc_csu_init ; init
.text:00000000000025AD                 lea     rdi, main       ; main
.text:00000000000025B4                 call    cs:__libc_start_main_ptr
.text:00000000000025BA                 hlt
.text:00000000000025BA ; } // starts at 2590
.text:00000000000025BA start           endp
.text:00000000000025BA
.text:00000000000025BA ; ---------------------------------------------------------------------------
.text:00000000000025BB                 align 20h
.text:00000000000025C0
.text:00000000000025C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025C0
.text:00000000000025C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000025C0
.text:00000000000025C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2673↓p
.text:00000000000025C0                 lea     rdi, __bss_start
.text:00000000000025C7                 push    rbp
.text:00000000000025C8                 lea     rax, __bss_start
.text:00000000000025CF                 cmp     rax, rdi
.text:00000000000025D2                 mov     rbp, rsp
.text:00000000000025D5                 jz      short loc_25F0
.text:00000000000025D7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000025DE                 test    rax, rax
.text:00000000000025E1                 jz      short loc_25F0
.text:00000000000025E3                 pop     rbp
.text:00000000000025E4                 jmp     rax
.text:00000000000025E4 ; ---------------------------------------------------------------------------
.text:00000000000025E6                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000025F0                                         ; deregister_tm_clones+21↑j
.text:00000000000025F0                 pop     rbp
.text:00000000000025F1                 retn
.text:00000000000025F1 deregister_tm_clones endp
.text:00000000000025F1
.text:00000000000025F1 ; ---------------------------------------------------------------------------
.text:00000000000025F2                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002600
.text:0000000000002600 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002600                 lea     rdi, __bss_start
.text:0000000000002607                 lea     rsi, __bss_start
.text:000000000000260E                 push    rbp
.text:000000000000260F                 sub     rsi, rdi
.text:0000000000002612                 mov     rbp, rsp
.text:0000000000002615                 sar     rsi, 3
.text:0000000000002619                 mov     rax, rsi
.text:000000000000261C                 shr     rax, 3Fh
.text:0000000000002620                 add     rsi, rax
.text:0000000000002623                 sar     rsi, 1
.text:0000000000002626                 jz      short loc_2640
.text:0000000000002628                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000262F                 test    rax, rax
.text:0000000000002632                 jz      short loc_2640
.text:0000000000002634                 pop     rbp
.text:0000000000002635                 jmp     rax
.text:0000000000002635 ; ---------------------------------------------------------------------------
.text:0000000000002637                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002640                                         ; register_tm_clones+32↑j
.text:0000000000002640                 pop     rbp
.text:0000000000002641                 retn
.text:0000000000002641 register_tm_clones endp
.text:0000000000002641
.text:0000000000002641 ; ---------------------------------------------------------------------------
.text:0000000000002642                 align 10h
.text:0000000000002650
.text:0000000000002650 ; =============== S U B R O U T I N E =======================================
.text:0000000000002650
.text:0000000000002650 ; Attributes: info_from_lumina
.text:0000000000002650
.text:0000000000002650 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002650                 cmp     cs:completed_7697, 0
.text:0000000000002657                 jnz     short locret_2688
.text:0000000000002659                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002661                 push    rbp
.text:0000000000002662                 mov     rbp, rsp
.text:0000000000002665                 jz      short loc_2673
.text:0000000000002667                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000266E                 call    __cxa_finalize
.text:0000000000002673
.text:0000000000002673 loc_2673:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002673                 call    deregister_tm_clones
.text:0000000000002678                 mov     cs:completed_7697, 1
.text:000000000000267F                 pop     rbp
.text:0000000000002680                 retn
.text:0000000000002680 ; ---------------------------------------------------------------------------
.text:0000000000002681                 align 8
.text:0000000000002688
.text:0000000000002688 locret_2688:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002688                 rep retn
.text:0000000000002688 __do_global_dtors_aux endp
.text:0000000000002688
.text:0000000000002688 ; ---------------------------------------------------------------------------
.text:000000000000268A                 align 10h
.text:0000000000002690
.text:0000000000002690 ; =============== S U B R O U T I N E =======================================
.text:0000000000002690
.text:0000000000002690 ; Attributes: bp-based frame
.text:0000000000002690
.text:0000000000002690 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002690                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002690                 push    rbp
.text:0000000000002691                 mov     rbp, rsp
.text:0000000000002694                 pop     rbp
.text:0000000000002695                 jmp     register_tm_clones
.text:0000000000002695 frame_dummy     endp
.text:0000000000002695
.text:0000000000002695 ; ---------------------------------------------------------------------------
.text:000000000000269A                 align 20h
.text:00000000000026A0
.text:00000000000026A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026A0
.text:00000000000026A0
.text:00000000000026A0 different       proc near               ; CODE XREF: main+407↑p
.text:00000000000026A0                                         ; main+90D↑p
.text:00000000000026A0 ; __unwind {
.text:00000000000026A0                 sub     rsp, 8
.text:00000000000026A4                 mov     rax, cs:check_chars
.text:00000000000026AB                 cmp     rax, rdx
.text:00000000000026AE                 cmovbe  rdx, rax        ; n
.text:00000000000026B2                 cmp     rax, rcx
.text:00000000000026B5                 cmovbe  rcx, rax
.text:00000000000026B9                 movzx   eax, cs:ignore_case
.text:00000000000026C0                 mov     r8, rdx
.text:00000000000026C3                 test    al, al
.text:00000000000026C5                 jz      short loc_26D8
.text:00000000000026C7                 cmp     rdx, rcx
.text:00000000000026CA                 jz      short loc_2700
.text:00000000000026CC
.text:00000000000026CC loc_26CC:                               ; CODE XREF: different+49↓j
.text:00000000000026CC                 add     rsp, 8
.text:00000000000026D0                 retn
.text:00000000000026D0 ; ---------------------------------------------------------------------------
.text:00000000000026D1                 align 8
.text:00000000000026D8
.text:00000000000026D8 loc_26D8:                               ; CODE XREF: different+25↑j
.text:00000000000026D8                 cmp     cs:hard_LC_COLLATE, 0
.text:00000000000026DF                 jnz     short loc_2710
.text:00000000000026E1                 cmp     rdx, rcx
.text:00000000000026E4                 mov     eax, 1
.text:00000000000026E9                 jnz     short loc_26CC
.text:00000000000026EB                 call    _memcmp
.text:00000000000026F0                 test    eax, eax
.text:00000000000026F2                 setnz   al
.text:00000000000026F5                 add     rsp, 8
.text:00000000000026F9                 retn
.text:00000000000026F9 ; ---------------------------------------------------------------------------
.text:00000000000026FA                 align 20h
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: different+2A↑j
.text:0000000000002700                 call    memcasecmp
.text:0000000000002705                 test    eax, eax
.text:0000000000002707                 setnz   al
.text:000000000000270A                 add     rsp, 8
.text:000000000000270E                 retn
.text:000000000000270E ; ---------------------------------------------------------------------------
.text:000000000000270F                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: different+3F↑j
.text:0000000000002710                 mov     rdx, rsi
.text:0000000000002713                 mov     rsi, r8
.text:0000000000002716                 call    xmemcoll
.text:000000000000271B                 test    eax, eax
.text:000000000000271D                 setnz   al
.text:0000000000002720                 add     rsp, 8
.text:0000000000002724                 retn
.text:0000000000002724 ; } // starts at 26A0
.text:0000000000002724 different       endp
.text:0000000000002724
.text:0000000000002724 ; ---------------------------------------------------------------------------
.text:0000000000002725                 align 10h
.text:0000000000002730
.text:0000000000002730 ; =============== S U B R O U T I N E =======================================
.text:0000000000002730
.text:0000000000002730
.text:0000000000002730 size_opt        proc near               ; CODE XREF: main+1C5↑p
.text:0000000000002730                                         ; main+247↑p ...
.text:0000000000002730
.text:0000000000002730 var_28          = qword ptr -28h
.text:0000000000002730 var_20          = qword ptr -20h
.text:0000000000002730
.text:0000000000002730 ; __unwind {
.text:0000000000002730                 push    rbp
.text:0000000000002731                 push    rbx
.text:0000000000002732                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002739                 mov     rbp, rsi
.text:000000000000273C                 mov     edx, 0Ah
.text:0000000000002741                 xor     esi, esi
.text:0000000000002743                 sub     rsp, 18h
.text:0000000000002747                 mov     rbx, rdi
.text:000000000000274A                 mov     rcx, rsp
.text:000000000000274D                 mov     rax, fs:28h
.text:0000000000002756                 mov     [rsp+28h+var_20], rax
.text:000000000000275B                 xor     eax, eax
.text:000000000000275D                 call    xstrtoul
.text:0000000000002762                 cmp     eax, 1
.text:0000000000002765                 ja      short loc_2782
.text:0000000000002767                 mov     rdx, [rsp+28h+var_20]
.text:000000000000276C                 xor     rdx, fs:28h
.text:0000000000002775                 mov     rax, [rsp+28h+var_28]
.text:0000000000002779                 jnz     short loc_27AC
.text:000000000000277B                 add     rsp, 18h
.text:000000000000277F                 pop     rbx
.text:0000000000002780                 pop     rbp
.text:0000000000002781                 retn
.text:0000000000002782 ; ---------------------------------------------------------------------------
.text:0000000000002782
.text:0000000000002782 loc_2782:                               ; CODE XREF: size_opt+35↑j
.text:0000000000002782                 mov     edx, 5          ; category
.text:0000000000002787                 mov     rsi, rbp        ; msgid
.text:000000000000278A                 xor     edi, edi        ; domainname
.text:000000000000278C                 call    _dcgettext
.text:0000000000002791                 lea     rdx, format     ; "%s: %s"
.text:0000000000002798                 mov     r8, rax
.text:000000000000279B                 mov     rcx, rbx
.text:000000000000279E                 xor     esi, esi        ; errnum
.text:00000000000027A0                 mov     edi, 1          ; status
.text:00000000000027A5                 xor     eax, eax
.text:00000000000027A7                 call    _error
.text:00000000000027AC
.text:00000000000027AC loc_27AC:                               ; CODE XREF: size_opt+49↑j
.text:00000000000027AC                 call    ___stack_chk_fail
.text:00000000000027AC ; } // starts at 2730
.text:00000000000027AC size_opt        endp
.text:00000000000027AC
.text:00000000000027AC ; ---------------------------------------------------------------------------
.text:00000000000027B1                 align 20h
.text:00000000000027C0
.text:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027C0
.text:00000000000027C0
.text:00000000000027C0 writeline       proc near               ; CODE XREF: main+456↑p
.text:00000000000027C0                                         ; main+489↑p ...
.text:00000000000027C0 ; __unwind {
.text:00000000000027C0                 test    rdx, rdx
.text:00000000000027C3                 jnz     short loc_2800
.text:00000000000027C5                 movzx   eax, cs:output_unique
.text:00000000000027CC                 xor     eax, 1
.text:00000000000027CF
.text:00000000000027CF loc_27CF:                               ; CODE XREF: writeline+62↓j
.text:00000000000027CF                 test    al, al
.text:00000000000027D1                 jnz     short locret_2813
.text:00000000000027D3
.text:00000000000027D3 loc_27D3:                               ; CODE XREF: writeline+51↓j
.text:00000000000027D3                 mov     ecx, cs:countmode
.text:00000000000027D9                 push    rbx
.text:00000000000027DA                 mov     rbx, rdi
.text:00000000000027DD                 test    ecx, ecx
.text:00000000000027DF                 jz      short loc_2828
.text:00000000000027E1
.text:00000000000027E1 loc_27E1:                               ; CODE XREF: writeline+7D↓j
.text:00000000000027E1                 mov     rdx, [rbx+8]    ; n
.text:00000000000027E5                 mov     rdi, [rbx+10h]  ; ptr
.text:00000000000027E9                 mov     esi, 1          ; size
.text:00000000000027EE                 pop     rbx
.text:00000000000027EF                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000027F6                 jmp     _fwrite_unlocked
.text:00000000000027F6 ; ---------------------------------------------------------------------------
.text:00000000000027FB                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: writeline+3↑j
.text:0000000000002800                 test    sil, sil
.text:0000000000002803                 jnz     short loc_2818
.text:0000000000002805                 movzx   eax, cs:output_first_repeated
.text:000000000000280C                 xor     eax, 1
.text:000000000000280F                 test    al, al
.text:0000000000002811                 jz      short loc_27D3
.text:0000000000002813
.text:0000000000002813 locret_2813:                            ; CODE XREF: writeline+11↑j
.text:0000000000002813                 rep retn
.text:0000000000002813 ; ---------------------------------------------------------------------------
.text:0000000000002815                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: writeline+43↑j
.text:0000000000002818                 movzx   eax, cs:output_later_repeated
.text:000000000000281F                 xor     eax, 1
.text:0000000000002822                 jmp     short loc_27CF
.text:0000000000002822 ; ---------------------------------------------------------------------------
.text:0000000000002824                 align 8
.text:0000000000002828
.text:0000000000002828 loc_2828:                               ; CODE XREF: writeline+1F↑j
.text:0000000000002828                 lea     rsi, a7lu       ; "%7lu "
.text:000000000000282F                 add     rdx, 1
.text:0000000000002833                 mov     edi, 1
.text:0000000000002838                 call    ___printf_chk
.text:000000000000283D                 jmp     short loc_27E1
.text:000000000000283D ; } // starts at 27C0
.text:000000000000283D writeline       endp
.text:000000000000283D
.text:000000000000283D ; ---------------------------------------------------------------------------
.text:000000000000283F                 align 20h
.text:0000000000002840
.text:0000000000002840 ; =============== S U B R O U T I N E =======================================
.text:0000000000002840
.text:0000000000002840
.text:0000000000002840 find_field_isra_2 proc near             ; CODE XREF: main+395↑p
.text:0000000000002840                                         ; main+3E9↑p ...
.text:0000000000002840 ; __unwind {
.text:0000000000002840                 push    r14
.text:0000000000002842                 push    r13
.text:0000000000002844                 mov     r14, rsi
.text:0000000000002847                 mov     r13, cs:skip_fields
.text:000000000000284E                 push    r12
.text:0000000000002850                 push    rbp
.text:0000000000002851                 lea     rbp, [rdi-1]
.text:0000000000002855                 push    rbx
.text:0000000000002856                 test    r13, r13
.text:0000000000002859                 jz      loc_290F
.text:000000000000285F                 test    rbp, rbp
.text:0000000000002862                 jz      loc_290F
.text:0000000000002868                 xor     r12d, r12d
.text:000000000000286B                 xor     ebx, ebx
.text:000000000000286D                 nop     dword ptr [rax]
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: find_field_isra_2+90↓j
.text:0000000000002870                 call    ___ctype_b_loc
.text:0000000000002875                 mov     rdi, [rax]
.text:0000000000002878                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: find_field_isra_2+C7↓j
.text:0000000000002880                 movzx   ecx, byte ptr [r14+rbx]
.text:0000000000002885                 mov     rdx, rcx
.text:0000000000002888                 movzx   ecx, word ptr [rdi+rcx*2]
.text:000000000000288C                 cmp     dl, 0Ah
.text:000000000000288F                 jz      short loc_2900
.text:0000000000002891                 test    cl, 1
.text:0000000000002894                 jnz     short loc_2900
.text:0000000000002896                 cmp     rbp, rbx
.text:0000000000002899                 ja      short loc_28BA
.text:000000000000289B                 jmp     short loc_28D8
.text:000000000000289B ; ---------------------------------------------------------------------------
.text:000000000000289D                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: find_field_isra_2+7D↓j
.text:00000000000028A0                 and     ecx, 1
.text:00000000000028A3                 jnz     short loc_28BF
.text:00000000000028A5                 add     rbx, 1
.text:00000000000028A9                 cmp     rbp, rbx
.text:00000000000028AC                 jbe     short loc_28D8
.text:00000000000028AE                 movzx   eax, byte ptr [r14+rbx]
.text:00000000000028B3                 movzx   ecx, word ptr [rdi+rax*2]
.text:00000000000028B7                 mov     rdx, rax
.text:00000000000028BA
.text:00000000000028BA loc_28BA:                               ; CODE XREF: find_field_isra_2+59↑j
.text:00000000000028BA                 cmp     dl, 0Ah
.text:00000000000028BD                 jnz     short loc_28A0
.text:00000000000028BF
.text:00000000000028BF loc_28BF:                               ; CODE XREF: find_field_isra_2+63↑j
.text:00000000000028BF                 add     r12, 1
.text:00000000000028C3                 cmp     r12, r13
.text:00000000000028C6                 jnb     short loc_28D8
.text:00000000000028C8                 cmp     rbp, rbx
.text:00000000000028CB                 jbe     short loc_28D8
.text:00000000000028CD                 cmp     rbp, rbx
.text:00000000000028D0                 ja      short loc_2870
.text:00000000000028D2                 nop     word ptr [rax+rax+00h]
.text:00000000000028D8
.text:00000000000028D8 loc_28D8:                               ; CODE XREF: find_field_isra_2+5B↑j
.text:00000000000028D8                                         ; find_field_isra_2+6C↑j ...
.text:00000000000028D8                 sub     rbp, rbx
.text:00000000000028DB
.text:00000000000028DB loc_28DB:                               ; CODE XREF: find_field_isra_2+D1↓j
.text:00000000000028DB                 cmp     cs:skip_chars, rbp
.text:00000000000028E2                 cmovbe  rbp, cs:skip_chars
.text:00000000000028EA                 add     rbx, rbp
.text:00000000000028ED                 lea     rax, [r14+rbx]
.text:00000000000028F1                 pop     rbx
.text:00000000000028F2                 pop     rbp
.text:00000000000028F3                 pop     r12
.text:00000000000028F5                 pop     r13
.text:00000000000028F7                 pop     r14
.text:00000000000028F9                 retn
.text:00000000000028F9 ; ---------------------------------------------------------------------------
.text:00000000000028FA                 align 20h
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: find_field_isra_2+4F↑j
.text:0000000000002900                                         ; find_field_isra_2+54↑j
.text:0000000000002900                 add     rbx, 1
.text:0000000000002904                 cmp     rbp, rbx
.text:0000000000002907                 ja      loc_2880
.text:000000000000290D                 jmp     short loc_28D8
.text:000000000000290F ; ---------------------------------------------------------------------------
.text:000000000000290F
.text:000000000000290F loc_290F:                               ; CODE XREF: find_field_isra_2+19↑j
.text:000000000000290F                                         ; find_field_isra_2+22↑j
.text:000000000000290F                 xor     ebx, ebx
.text:0000000000002911                 jmp     short loc_28DB
.text:0000000000002911 ; } // starts at 2840
.text:0000000000002911 find_field_isra_2 endp
.text:0000000000002911
.text:0000000000002911 ; ---------------------------------------------------------------------------
.text:0000000000002913                 align 20h
.text:0000000000002920
.text:0000000000002920 ; =============== S U B R O U T I N E =======================================
.text:0000000000002920
.text:0000000000002920 ; Attributes: noreturn
.text:0000000000002920
.text:0000000000002920 ; void __fastcall __noreturn usage(int status)
.text:0000000000002920                 public usage
.text:0000000000002920 usage           proc near               ; CODE XREF: main+212↑p
.text:0000000000002920                                         ; main+A4D↑p ...
.text:0000000000002920
.text:0000000000002920 var_A8          = qword ptr -0A8h
.text:0000000000002920 var_A0          = qword ptr -0A0h
.text:0000000000002920 var_98          = qword ptr -98h
.text:0000000000002920 var_90          = qword ptr -90h
.text:0000000000002920 var_88          = qword ptr -88h
.text:0000000000002920 var_80          = qword ptr -80h
.text:0000000000002920 var_78          = qword ptr -78h
.text:0000000000002920 var_70          = qword ptr -70h
.text:0000000000002920 var_68          = qword ptr -68h
.text:0000000000002920 var_60          = qword ptr -60h
.text:0000000000002920 var_58          = qword ptr -58h
.text:0000000000002920 var_50          = qword ptr -50h
.text:0000000000002920 var_48          = qword ptr -48h
.text:0000000000002920 var_40          = qword ptr -40h
.text:0000000000002920 var_30          = qword ptr -30h
.text:0000000000002920
.text:0000000000002920 ; __unwind {
.text:0000000000002920                 push    r13
.text:0000000000002922                 push    r12
.text:0000000000002924                 mov     edx, 5          ; category
.text:0000000000002929                 push    rbp
.text:000000000000292A                 push    rbx
.text:000000000000292B                 mov     ebp, edi
.text:000000000000292D                 sub     rsp, 88h
.text:0000000000002934                 mov     rbx, cs:program_name
.text:000000000000293B                 mov     rax, fs:28h
.text:0000000000002944                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002949                 xor     eax, eax
.text:000000000000294B                 test    edi, edi
.text:000000000000294D                 jz      short loc_297D
.text:000000000000294F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002956                 xor     edi, edi        ; domainname
.text:0000000000002958                 call    _dcgettext
.text:000000000000295D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002964                 mov     rdx, rax
.text:0000000000002967                 mov     rcx, rbx
.text:000000000000296A                 mov     esi, 1
.text:000000000000296F                 xor     eax, eax
.text:0000000000002971                 call    ___fprintf_chk
.text:0000000000002976
.text:0000000000002976 loc_2976:                               ; CODE XREF: usage+3EE↓j
.text:0000000000002976                 mov     edi, ebp        ; status
.text:0000000000002978                 call    _exit
.text:000000000000297D ; ---------------------------------------------------------------------------
.text:000000000000297D
.text:000000000000297D loc_297D:                               ; CODE XREF: usage+2D↑j
.text:000000000000297D                 lea     rsi, aUsageSOptionIn ; "Usage: %s [OPTION]... [INPUT [OUTPUT]]"...
.text:0000000000002984                 xor     edi, edi        ; domainname
.text:0000000000002986                 call    _dcgettext
.text:000000000000298B                 mov     rdx, rbx
.text:000000000000298E                 mov     rsi, rax
.text:0000000000002991                 mov     edi, 1
.text:0000000000002996                 xor     eax, eax
.text:0000000000002998                 call    ___printf_chk
.text:000000000000299D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029A4                 lea     rsi, aFilterAdjacent ; "Filter adjacent matching lines from INP"...
.text:00000000000029AB                 mov     edx, 5          ; category
.text:00000000000029B0                 xor     edi, edi        ; domainname
.text:00000000000029B2                 call    _dcgettext
.text:00000000000029B7                 mov     rsi, rbx        ; stream
.text:00000000000029BA                 mov     rdi, rax        ; s
.text:00000000000029BD                 call    _fputs_unlocked
.text:00000000000029C2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029C9                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000029D0                 mov     edx, 5          ; category
.text:00000000000029D5                 xor     edi, edi        ; domainname
.text:00000000000029D7                 call    _dcgettext
.text:00000000000029DC                 mov     rsi, rbx        ; stream
.text:00000000000029DF                 mov     rdi, rax        ; s
.text:00000000000029E2                 call    _fputs_unlocked
.text:00000000000029E7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029EE                 lea     rsi, aCCountPrefixLi ; "  -c, --count           prefix lines by"...
.text:00000000000029F5                 mov     edx, 5          ; category
.text:00000000000029FA                 xor     edi, edi        ; domainname
.text:00000000000029FC                 call    _dcgettext
.text:0000000000002A01                 mov     rsi, rbx        ; stream
.text:0000000000002A04                 mov     rdi, rax        ; s
.text:0000000000002A07                 call    _fputs_unlocked
.text:0000000000002A0C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A13                 lea     rsi, aDPrintAllDupli ; "  -D                    print all dupli"...
.text:0000000000002A1A                 mov     edx, 5          ; category
.text:0000000000002A1F                 xor     edi, edi        ; domainname
.text:0000000000002A21                 call    _dcgettext
.text:0000000000002A26                 mov     rsi, rbx        ; stream
.text:0000000000002A29                 mov     rdi, rax        ; s
.text:0000000000002A2C                 call    _fputs_unlocked
.text:0000000000002A31                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A38                 lea     rsi, aFSkipFieldsNAv ; "  -f, --skip-fields=N   avoid comparing"...
.text:0000000000002A3F                 mov     edx, 5          ; category
.text:0000000000002A44                 xor     edi, edi        ; domainname
.text:0000000000002A46                 call    _dcgettext
.text:0000000000002A4B                 mov     rsi, rbx        ; stream
.text:0000000000002A4E                 mov     rdi, rax        ; s
.text:0000000000002A51                 call    _fputs_unlocked
.text:0000000000002A56                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A5D                 lea     rsi, aGroupMethodSho ; "      --group[=METHOD]  show all items,"...
.text:0000000000002A64                 mov     edx, 5          ; category
.text:0000000000002A69                 xor     edi, edi        ; domainname
.text:0000000000002A6B                 call    _dcgettext
.text:0000000000002A70                 mov     rsi, rbx        ; stream
.text:0000000000002A73                 mov     rdi, rax        ; s
.text:0000000000002A76                 call    _fputs_unlocked
.text:0000000000002A7B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A82                 lea     rsi, aIIgnoreCaseIgn ; "  -i, --ignore-case     ignore differen"...
.text:0000000000002A89                 mov     edx, 5          ; category
.text:0000000000002A8E                 xor     edi, edi        ; domainname
.text:0000000000002A90                 call    _dcgettext
.text:0000000000002A95                 mov     rsi, rbx        ; stream
.text:0000000000002A98                 mov     rdi, rax        ; s
.text:0000000000002A9B                 call    _fputs_unlocked
.text:0000000000002AA0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002AA7                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated     line delimi"...
.text:0000000000002AAE                 mov     edx, 5          ; category
.text:0000000000002AB3                 xor     edi, edi        ; domainname
.text:0000000000002AB5                 call    _dcgettext
.text:0000000000002ABA                 mov     rsi, rbx        ; stream
.text:0000000000002ABD                 mov     rdi, rax        ; s
.text:0000000000002AC0                 call    _fputs_unlocked
.text:0000000000002AC5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002ACC                 lea     rsi, aWCheckCharsNCo ; "  -w, --check-chars=N   compare no more"...
.text:0000000000002AD3                 mov     edx, 5          ; category
.text:0000000000002AD8                 xor     edi, edi        ; domainname
.text:0000000000002ADA                 call    _dcgettext
.text:0000000000002ADF                 mov     rsi, rbx        ; stream
.text:0000000000002AE2                 mov     rdi, rax        ; s
.text:0000000000002AE5                 call    _fputs_unlocked
.text:0000000000002AEA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002AF1                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002AF8                 mov     edx, 5          ; category
.text:0000000000002AFD                 xor     edi, edi        ; domainname
.text:0000000000002AFF                 call    _dcgettext
.text:0000000000002B04                 mov     rsi, rbx        ; stream
.text:0000000000002B07                 mov     rdi, rax        ; s
.text:0000000000002B0A                 call    _fputs_unlocked
.text:0000000000002B0F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B16                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002B1D                 mov     edx, 5          ; category
.text:0000000000002B22                 xor     edi, edi        ; domainname
.text:0000000000002B24                 call    _dcgettext
.text:0000000000002B29                 mov     rsi, rbx        ; stream
.text:0000000000002B2C                 mov     rdi, rax        ; s
.text:0000000000002B2F                 call    _fputs_unlocked
.text:0000000000002B34                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B3B                 lea     rsi, aAFieldIsARunOf ; "\nA field is a run of blanks (usually s"...
.text:0000000000002B42                 mov     edx, 5          ; category
.text:0000000000002B47                 xor     edi, edi        ; domainname
.text:0000000000002B49                 call    _dcgettext
.text:0000000000002B4E                 mov     rsi, rbx        ; stream
.text:0000000000002B51                 mov     rdi, rax        ; s
.text:0000000000002B54                 call    _fputs_unlocked
.text:0000000000002B59                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B60                 lea     rsi, aNoteUniqDoesNo ; "\nNote: 'uniq' does not detect repeated"...
.text:0000000000002B67                 mov     edx, 5          ; category
.text:0000000000002B6C                 xor     edi, edi        ; domainname
.text:0000000000002B6E                 call    _dcgettext
.text:0000000000002B73                 mov     rsi, rbx        ; stream
.text:0000000000002B76                 mov     rdi, rax        ; s
.text:0000000000002B79                 lea     rbx, aUniq      ; "uniq"
.text:0000000000002B80                 call    _fputs_unlocked
.text:0000000000002B85                 lea     rax, asc_6756   ; "["
.text:0000000000002B8C                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002B93                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002B9C                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002BA5                 mov     rdx, rsp
.text:0000000000002BA8                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002BAC                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002BB3                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002BB8                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002BBF                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002BC4                 lea     rax, domainname ; "coreutils"
.text:0000000000002BCB                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002BD0                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002BD7                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002BDC                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002BE3                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002BE8                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002BED                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002BF4                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002BF9                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002C00                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002C05                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002C0A                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002C0F                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002C14                 nop     dword ptr [rax+00h]
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: usage+315↓j
.text:0000000000002C18                 add     rdx, 10h
.text:0000000000002C1C                 mov     rdi, [rdx]
.text:0000000000002C1F                 test    rdi, rdi
.text:0000000000002C22                 jz      short loc_2C37
.text:0000000000002C24                 mov     ecx, 5
.text:0000000000002C29                 mov     rsi, rbx
.text:0000000000002C2C                 repe cmpsb
.text:0000000000002C2E                 setnbe  al
.text:0000000000002C31                 sbb     al, 0
.text:0000000000002C33                 test    al, al
.text:0000000000002C35                 jnz     short loc_2C18
.text:0000000000002C37
.text:0000000000002C37 loc_2C37:                               ; CODE XREF: usage+302↑j
.text:0000000000002C37                 mov     r12, [rdx+8]
.text:0000000000002C3B                 xor     edi, edi        ; domainname
.text:0000000000002C3D                 mov     edx, 5          ; category
.text:0000000000002C42                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002C49                 test    r12, r12
.text:0000000000002C4C                 jz      loc_2D13
.text:0000000000002C52                 call    _dcgettext
.text:0000000000002C57                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002C5E                 lea     rdx, unk_67CC
.text:0000000000002C65                 mov     rsi, rax
.text:0000000000002C68                 mov     edi, 1
.text:0000000000002C6D                 xor     eax, eax
.text:0000000000002C6F                 call    ___printf_chk
.text:0000000000002C74                 xor     esi, esi        ; locale
.text:0000000000002C76                 mov     edi, 5          ; category
.text:0000000000002C7B                 call    _setlocale
.text:0000000000002C80                 test    rax, rax
.text:0000000000002C83                 jz      short loc_2CA1
.text:0000000000002C85                 lea     rsi, s2         ; "en_"
.text:0000000000002C8C                 mov     edx, 3          ; n
.text:0000000000002C91                 mov     rdi, rax        ; s1
.text:0000000000002C94                 call    _strncmp
.text:0000000000002C99                 test    eax, eax
.text:0000000000002C9B                 jnz     loc_2DA8
.text:0000000000002CA1
.text:0000000000002CA1 loc_2CA1:                               ; CODE XREF: usage+363↑j
.text:0000000000002CA1                                         ; usage+4AD↓j
.text:0000000000002CA1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002CA8                 xor     edi, edi        ; domainname
.text:0000000000002CAA                 mov     edx, 5          ; category
.text:0000000000002CAF                 call    _dcgettext
.text:0000000000002CB4                 lea     rcx, aUniq      ; "uniq"
.text:0000000000002CBB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002CC2                 mov     rsi, rax
.text:0000000000002CC5                 mov     edi, 1
.text:0000000000002CCA                 xor     eax, eax
.text:0000000000002CCC                 call    ___printf_chk
.text:0000000000002CD1                 cmp     r12, rbx
.text:0000000000002CD4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002CDB                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002CE2                 cmovz   rbx, rcx
.text:0000000000002CE6
.text:0000000000002CE6 loc_2CE6:                               ; CODE XREF: usage+47C↓j
.text:0000000000002CE6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002CED                 xor     edi, edi        ; domainname
.text:0000000000002CEF                 mov     edx, 5          ; category
.text:0000000000002CF4                 call    _dcgettext
.text:0000000000002CF9                 mov     rcx, rbx
.text:0000000000002CFC                 mov     rsi, rax
.text:0000000000002CFF                 mov     rdx, r12
.text:0000000000002D02                 mov     edi, 1
.text:0000000000002D07                 xor     eax, eax
.text:0000000000002D09                 call    ___printf_chk
.text:0000000000002D0E                 jmp     loc_2976
.text:0000000000002D13 ; ---------------------------------------------------------------------------
.text:0000000000002D13
.text:0000000000002D13 loc_2D13:                               ; CODE XREF: usage+32C↑j
.text:0000000000002D13                 call    _dcgettext
.text:0000000000002D18                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002D1F                 lea     rdx, unk_67CC
.text:0000000000002D26                 mov     rsi, rax
.text:0000000000002D29                 mov     edi, 1
.text:0000000000002D2E                 xor     eax, eax
.text:0000000000002D30                 call    ___printf_chk
.text:0000000000002D35                 xor     esi, esi        ; locale
.text:0000000000002D37                 mov     edi, 5          ; category
.text:0000000000002D3C                 call    _setlocale
.text:0000000000002D41                 test    rax, rax
.text:0000000000002D44                 jz      short loc_2D5E
.text:0000000000002D46                 lea     rsi, s2         ; "en_"
.text:0000000000002D4D                 mov     edx, 3          ; n
.text:0000000000002D52                 mov     rdi, rax        ; s1
.text:0000000000002D55                 call    _strncmp
.text:0000000000002D5A                 test    eax, eax
.text:0000000000002D5C                 jnz     short loc_2DA1
.text:0000000000002D5E
.text:0000000000002D5E loc_2D5E:                               ; CODE XREF: usage+424↑j
.text:0000000000002D5E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002D65                 mov     edx, 5          ; category
.text:0000000000002D6A                 xor     edi, edi        ; domainname
.text:0000000000002D6C                 lea     r12, aUniq      ; "uniq"
.text:0000000000002D73                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002D7A                 call    _dcgettext
.text:0000000000002D7F                 lea     rcx, aUniq      ; "uniq"
.text:0000000000002D86                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002D8D                 mov     rsi, rax
.text:0000000000002D90                 mov     edi, 1
.text:0000000000002D95                 xor     eax, eax
.text:0000000000002D97                 call    ___printf_chk
.text:0000000000002D9C                 jmp     loc_2CE6
.text:0000000000002DA1 ; ---------------------------------------------------------------------------
.text:0000000000002DA1
.text:0000000000002DA1 loc_2DA1:                               ; CODE XREF: usage+43C↑j
.text:0000000000002DA1                 lea     r12, aUniq      ; "uniq"
.text:0000000000002DA8
.text:0000000000002DA8 loc_2DA8:                               ; CODE XREF: usage+37B↑j
.text:0000000000002DA8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002DAF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002DB6                 xor     edi, edi        ; domainname
.text:0000000000002DB8                 mov     edx, 5          ; category
.text:0000000000002DBD                 call    _dcgettext
.text:0000000000002DC2                 mov     rsi, r13        ; stream
.text:0000000000002DC5                 mov     rdi, rax        ; s
.text:0000000000002DC8                 call    _fputs_unlocked
.text:0000000000002DCD                 jmp     loc_2CA1
.text:0000000000002DCD ; } // starts at 2920
.text:0000000000002DCD usage           endp
.text:0000000000002DCD
.text:0000000000002DCD ; ---------------------------------------------------------------------------
.text:0000000000002DD2                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DE0
.text:0000000000002DE0 ; Attributes: noreturn
.text:0000000000002DE0
.text:0000000000002DE0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000002DE0 ; __unwind {
.text:0000000000002DE0                 mov     edi, 1          ; status
.text:0000000000002DE5                 jmp     usage
.text:0000000000002DE5 ; } // starts at 2DE0
.text:0000000000002DE5 __argmatch_die  endp
.text:0000000000002DE5
.text:0000000000002DE5 ; ---------------------------------------------------------------------------
.text:0000000000002DEA                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DF0
.text:0000000000002DF0 ; Attributes: info_from_lumina
.text:0000000000002DF0
.text:0000000000002DF0 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000002DF0                 public argmatch
.text:0000000000002DF0 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000002DF0
.text:0000000000002DF0 var_58          = qword ptr -58h
.text:0000000000002DF0 s2              = qword ptr -50h
.text:0000000000002DF0 var_41          = byte ptr -41h
.text:0000000000002DF0 var_40          = qword ptr -40h
.text:0000000000002DF0
.text:0000000000002DF0 ; __unwind {
.text:0000000000002DF0                 push    r15
.text:0000000000002DF2                 push    r14
.text:0000000000002DF4                 mov     r15, rsi
.text:0000000000002DF7                 push    r13
.text:0000000000002DF9                 push    r12
.text:0000000000002DFB                 mov     r13, rcx
.text:0000000000002DFE                 push    rbp
.text:0000000000002DFF                 push    rbx
.text:0000000000002E00                 mov     rbp, rdx
.text:0000000000002E03                 sub     rsp, 28h
.text:0000000000002E07                 mov     [rsp+58h+s2], rdi
.text:0000000000002E0C                 mov     [rsp+58h+var_40], rdx
.text:0000000000002E11                 call    _strlen
.text:0000000000002E16                 mov     r14, [r15]
.text:0000000000002E19                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000002E21                 test    r14, r14
.text:0000000000002E24                 jz      loc_2EDD
.text:0000000000002E2A                 mov     r12, rax
.text:0000000000002E2D                 mov     [rsp+58h+var_41], 0
.text:0000000000002E32                 xor     ebx, ebx
.text:0000000000002E34                 jmp     short loc_2E87
.text:0000000000002E34 ; ---------------------------------------------------------------------------
.text:0000000000002E36                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000002E40                 mov     rax, [rsp+58h+var_40]
.text:0000000000002E45                 test    rax, rax
.text:0000000000002E48                 jz      loc_2EF0
.text:0000000000002E4E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000002E52                 mov     rdx, r13        ; n
.text:0000000000002E55                 mov     rsi, rbp        ; s2
.text:0000000000002E58                 imul    rdi, r13
.text:0000000000002E5C                 add     rdi, rax        ; s1
.text:0000000000002E5F                 call    _memcmp
.text:0000000000002E64                 test    eax, eax
.text:0000000000002E66                 movzx   eax, [rsp+58h+var_41]
.text:0000000000002E6B                 mov     ecx, 1
.text:0000000000002E70                 cmovnz  eax, ecx
.text:0000000000002E73                 mov     [rsp+58h+var_41], al
.text:0000000000002E77
.text:0000000000002E77 loc_2E77:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000002E77                                         ; argmatch+105↓j
.text:0000000000002E77                 add     rbx, 1
.text:0000000000002E7B                 add     rbp, r13
.text:0000000000002E7E                 mov     r14, [r15+rbx*8]
.text:0000000000002E82                 test    r14, r14
.text:0000000000002E85                 jz      short loc_2EC8
.text:0000000000002E87
.text:0000000000002E87 loc_2E87:                               ; CODE XREF: argmatch+44↑j
.text:0000000000002E87                                         ; argmatch+D1↓j
.text:0000000000002E87                 mov     rsi, [rsp+58h+s2] ; s2
.text:0000000000002E8C                 mov     rdx, r12        ; n
.text:0000000000002E8F                 mov     rdi, r14        ; s1
.text:0000000000002E92                 call    _strncmp
.text:0000000000002E97                 test    eax, eax
.text:0000000000002E99                 jnz     short loc_2E77
.text:0000000000002E9B                 mov     rdi, r14        ; s
.text:0000000000002E9E                 call    _strlen
.text:0000000000002EA3                 cmp     rax, r12
.text:0000000000002EA6                 jz      short loc_2F00
.text:0000000000002EA8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000002EAD                 jnz     short loc_2E40
.text:0000000000002EAF                 mov     [rsp+58h+var_58], rbx
.text:0000000000002EB3                 add     rbx, 1
.text:0000000000002EB7                 add     rbp, r13
.text:0000000000002EBA                 mov     r14, [r15+rbx*8]
.text:0000000000002EBE                 test    r14, r14
.text:0000000000002EC1                 jnz     short loc_2E87
.text:0000000000002EC3                 nop     dword ptr [rax+rax+00h]
.text:0000000000002EC8
.text:0000000000002EC8 loc_2EC8:                               ; CODE XREF: argmatch+95↑j
.text:0000000000002EC8                 cmp     [rsp+58h+var_41], 0
.text:0000000000002ECD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002ED4                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000002ED9                 mov     [rsp+58h+var_58], rax
.text:0000000000002EDD
.text:0000000000002EDD loc_2EDD:                               ; CODE XREF: argmatch+34↑j
.text:0000000000002EDD                                         ; argmatch+114↓j
.text:0000000000002EDD                 mov     rax, [rsp+58h+var_58]
.text:0000000000002EE1                 add     rsp, 28h
.text:0000000000002EE5                 pop     rbx
.text:0000000000002EE6                 pop     rbp
.text:0000000000002EE7                 pop     r12
.text:0000000000002EE9                 pop     r13
.text:0000000000002EEB                 pop     r14
.text:0000000000002EED                 pop     r15
.text:0000000000002EEF                 retn
.text:0000000000002EF0 ; ---------------------------------------------------------------------------
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: argmatch+58↑j
.text:0000000000002EF0                 mov     [rsp+58h+var_41], 1
.text:0000000000002EF5                 jmp     short loc_2E77
.text:0000000000002EF5 ; ---------------------------------------------------------------------------
.text:0000000000002EF7                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000002F00                 mov     [rsp+58h+var_58], rbx
.text:0000000000002F04                 jmp     short loc_2EDD
.text:0000000000002F04 ; } // starts at 2DF0
.text:0000000000002F04 argmatch        endp
.text:0000000000002F04
.text:0000000000002F04 ; ---------------------------------------------------------------------------
.text:0000000000002F06                 align 10h
.text:0000000000002F10
.text:0000000000002F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F10
.text:0000000000002F10 ; Attributes: info_from_lumina
.text:0000000000002F10
.text:0000000000002F10 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000002F10                 public argmatch_invalid
.text:0000000000002F10 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000002F10 ; __unwind {
.text:0000000000002F10                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002F14                 push    r12
.text:0000000000002F16                 mov     edx, 5          ; category
.text:0000000000002F1B                 push    rbp
.text:0000000000002F1C                 mov     r12, rsi
.text:0000000000002F1F                 push    rbx
.text:0000000000002F20                 mov     rbp, rdi
.text:0000000000002F23                 jz      short loc_2F70
.text:0000000000002F25                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000002F2C                 xor     edi, edi        ; domainname
.text:0000000000002F2E                 call    _dcgettext
.text:0000000000002F33                 mov     rbx, rax
.text:0000000000002F36
.text:0000000000002F36 loc_2F36:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000002F36                 mov     rsi, rbp
.text:0000000000002F39                 mov     edi, 1
.text:0000000000002F3E                 call    quote_n
.text:0000000000002F43                 mov     rdx, r12
.text:0000000000002F46                 mov     rbp, rax
.text:0000000000002F49                 mov     esi, 8
.text:0000000000002F4E                 xor     edi, edi
.text:0000000000002F50                 call    quotearg_n_style
.text:0000000000002F55                 mov     r8, rbp
.text:0000000000002F58                 mov     rdx, rbx        ; format
.text:0000000000002F5B                 mov     rcx, rax
.text:0000000000002F5E                 pop     rbx
.text:0000000000002F5F                 pop     rbp
.text:0000000000002F60                 pop     r12
.text:0000000000002F62                 xor     esi, esi        ; errnum
.text:0000000000002F64                 xor     edi, edi        ; status
.text:0000000000002F66                 xor     eax, eax
.text:0000000000002F68                 jmp     _error
.text:0000000000002F68 ; ---------------------------------------------------------------------------
.text:0000000000002F6D                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000002F70                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000002F77                 xor     edi, edi        ; domainname
.text:0000000000002F79                 call    _dcgettext
.text:0000000000002F7E                 mov     rbx, rax
.text:0000000000002F81                 jmp     short loc_2F36
.text:0000000000002F81 ; } // starts at 2F10
.text:0000000000002F81 argmatch_invalid endp
.text:0000000000002F81
.text:0000000000002F81 ; ---------------------------------------------------------------------------
.text:0000000000002F83                 align 10h
.text:0000000000002F90
.text:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F90
.text:0000000000002F90 ; Attributes: info_from_lumina
.text:0000000000002F90
.text:0000000000002F90 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000002F90                 public argmatch_valid
.text:0000000000002F90 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000002F90 ; __unwind {
.text:0000000000002F90                 push    r15
.text:0000000000002F92                 push    r14
.text:0000000000002F94                 mov     r14, rdi
.text:0000000000002F97                 push    r13
.text:0000000000002F99                 push    r12
.text:0000000000002F9B                 xor     edi, edi        ; domainname
.text:0000000000002F9D                 push    rbp
.text:0000000000002F9E                 push    rbx
.text:0000000000002F9F                 mov     rbp, rsi
.text:0000000000002FA2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000002FA9                 mov     r12, rdx
.text:0000000000002FAC                 mov     edx, 5          ; category
.text:0000000000002FB1                 sub     rsp, 8
.text:0000000000002FB5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000002FBC                 call    _dcgettext
.text:0000000000002FC1                 mov     rdi, rax        ; s
.text:0000000000002FC4                 mov     rsi, rbx        ; stream
.text:0000000000002FC7                 call    _fputs_unlocked
.text:0000000000002FCC                 mov     r15, [r14]
.text:0000000000002FCF                 test    r15, r15
.text:0000000000002FD2                 jz      loc_3068
.text:0000000000002FD8                 xor     r13d, r13d
.text:0000000000002FDB                 xor     ebx, ebx
.text:0000000000002FDD                 jmp     short loc_3018
.text:0000000000002FDD ; ---------------------------------------------------------------------------
.text:0000000000002FDF                 align 20h
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000002FE0                                         ; argmatch_valid+9D↓j
.text:0000000000002FE0                 mov     rdi, r15
.text:0000000000002FE3                 add     rbx, 1
.text:0000000000002FE7                 mov     r13, rbp
.text:0000000000002FEA                 call    quote
.text:0000000000002FEF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002FF6                 lea     rdx, aS         ; "\n  - %s"
.text:0000000000002FFD                 mov     rcx, rax
.text:0000000000003000                 mov     esi, 1
.text:0000000000003005                 xor     eax, eax
.text:0000000000003007                 add     rbp, r12
.text:000000000000300A                 call    ___fprintf_chk
.text:000000000000300F                 mov     r15, [r14+rbx*8]
.text:0000000000003013                 test    r15, r15
.text:0000000000003016                 jz      short loc_3068
.text:0000000000003018
.text:0000000000003018 loc_3018:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000003018                                         ; argmatch_valid+D2↓j
.text:0000000000003018                 test    rbx, rbx
.text:000000000000301B                 jz      short loc_2FE0
.text:000000000000301D                 mov     rdx, r12        ; n
.text:0000000000003020                 mov     rsi, rbp        ; s2
.text:0000000000003023                 mov     rdi, r13        ; s1
.text:0000000000003026                 call    _memcmp
.text:000000000000302B                 test    eax, eax
.text:000000000000302D                 jnz     short loc_2FE0
.text:000000000000302F                 mov     rdi, r15
.text:0000000000003032                 add     rbx, 1
.text:0000000000003036                 add     rbp, r12
.text:0000000000003039                 call    quote
.text:000000000000303E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003045                 lea     rdx, aS_0       ; ", %s"
.text:000000000000304C                 mov     rcx, rax
.text:000000000000304F                 mov     esi, 1
.text:0000000000003054                 xor     eax, eax
.text:0000000000003056                 call    ___fprintf_chk
.text:000000000000305B                 mov     r15, [r14+rbx*8]
.text:000000000000305F                 test    r15, r15
.text:0000000000003062                 jnz     short loc_3018
.text:0000000000003064                 nop     dword ptr [rax+00h]
.text:0000000000003068
.text:0000000000003068 loc_3068:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000003068                                         ; argmatch_valid+86↑j
.text:0000000000003068                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000306F                 mov     rax, [rdi+28h]
.text:0000000000003073                 cmp     rax, [rdi+30h]
.text:0000000000003077                 jnb     short loc_3098
.text:0000000000003079                 lea     rdx, [rax+1]
.text:000000000000307D                 mov     [rdi+28h], rdx
.text:0000000000003081                 mov     byte ptr [rax], 0Ah
.text:0000000000003084                 add     rsp, 8
.text:0000000000003088                 pop     rbx
.text:0000000000003089                 pop     rbp
.text:000000000000308A                 pop     r12
.text:000000000000308C                 pop     r13
.text:000000000000308E                 pop     r14
.text:0000000000003090                 pop     r15
.text:0000000000003092                 retn
.text:0000000000003092 ; ---------------------------------------------------------------------------
.text:0000000000003093                 align 8
.text:0000000000003098
.text:0000000000003098 loc_3098:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000003098                 add     rsp, 8
.text:000000000000309C                 mov     esi, 0Ah        ; int
.text:00000000000030A1                 pop     rbx
.text:00000000000030A2                 pop     rbp
.text:00000000000030A3                 pop     r12
.text:00000000000030A5                 pop     r13
.text:00000000000030A7                 pop     r14
.text:00000000000030A9                 pop     r15
.text:00000000000030AB                 jmp     ___overflow
.text:00000000000030AB ; } // starts at 2F90
.text:00000000000030AB argmatch_valid  endp
.text:00000000000030AB
.text:00000000000030B0
.text:00000000000030B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030B0
.text:00000000000030B0 ; Attributes: info_from_lumina
.text:00000000000030B0
.text:00000000000030B0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:00000000000030B0                 public __xargmatch_internal
.text:00000000000030B0 __xargmatch_internal proc near          ; CODE XREF: main+57A↑p
.text:00000000000030B0                                         ; main+5C6↑p
.text:00000000000030B0 ; __unwind {
.text:00000000000030B0                 push    r15
.text:00000000000030B2                 push    r14
.text:00000000000030B4                 mov     r14, rdi
.text:00000000000030B7                 push    r13
.text:00000000000030B9                 push    r12
.text:00000000000030BB                 mov     r12, rsi
.text:00000000000030BE                 push    rbp
.text:00000000000030BF                 push    rbx
.text:00000000000030C0                 mov     rbp, rcx
.text:00000000000030C3                 mov     rbx, rdx
.text:00000000000030C6                 mov     rcx, r8
.text:00000000000030C9                 mov     rdx, rbp
.text:00000000000030CC                 sub     rsp, 8
.text:00000000000030D0                 mov     rsi, rbx
.text:00000000000030D3                 mov     rdi, r12
.text:00000000000030D6                 mov     r15, r8
.text:00000000000030D9                 mov     r13, r9
.text:00000000000030DC                 call    argmatch
.text:00000000000030E1                 test    rax, rax
.text:00000000000030E4                 js      short loc_30F5
.text:00000000000030E6
.text:00000000000030E6 loc_30E6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:00000000000030E6                 add     rsp, 8
.text:00000000000030EA                 pop     rbx
.text:00000000000030EB                 pop     rbp
.text:00000000000030EC                 pop     r12
.text:00000000000030EE                 pop     r13
.text:00000000000030F0                 pop     r14
.text:00000000000030F2                 pop     r15
.text:00000000000030F4                 retn
.text:00000000000030F5 ; ---------------------------------------------------------------------------
.text:00000000000030F5
.text:00000000000030F5 loc_30F5:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:00000000000030F5                 mov     rdx, rax
.text:00000000000030F8                 mov     rsi, r12
.text:00000000000030FB                 mov     rdi, r14
.text:00000000000030FE                 call    argmatch_invalid
.text:0000000000003103                 mov     rdx, r15
.text:0000000000003106                 mov     rsi, rbp
.text:0000000000003109                 mov     rdi, rbx
.text:000000000000310C                 call    argmatch_valid
.text:0000000000003111                 call    r13
.text:0000000000003114                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000311B                 jmp     short loc_30E6
.text:000000000000311B ; } // starts at 30B0
.text:000000000000311B __xargmatch_internal endp
.text:000000000000311B
.text:000000000000311B ; ---------------------------------------------------------------------------
.text:000000000000311D                 align 20h
.text:0000000000003120
.text:0000000000003120 ; =============== S U B R O U T I N E =======================================
.text:0000000000003120
.text:0000000000003120 ; Attributes: info_from_lumina
.text:0000000000003120
.text:0000000000003120 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003120                 public argmatch_to_argument
.text:0000000000003120 argmatch_to_argument proc near
.text:0000000000003120 ; __unwind {
.text:0000000000003120                 push    r14
.text:0000000000003122                 push    r13
.text:0000000000003124                 push    r12
.text:0000000000003126                 push    rbp
.text:0000000000003127                 push    rbx
.text:0000000000003128                 mov     r14, [rsi]
.text:000000000000312B                 test    r14, r14
.text:000000000000312E                 jz      short loc_3161
.text:0000000000003130                 mov     r12, rcx
.text:0000000000003133                 mov     r13, rdi
.text:0000000000003136                 mov     rbp, rdx
.text:0000000000003139                 lea     rbx, [rsi+8]
.text:000000000000313D                 jmp     short loc_314F
.text:000000000000313D ; ---------------------------------------------------------------------------
.text:000000000000313F                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000003140                 mov     r14, [rbx]
.text:0000000000003143                 add     rbp, r12
.text:0000000000003146                 add     rbx, 8
.text:000000000000314A                 test    r14, r14
.text:000000000000314D                 jz      short loc_3161
.text:000000000000314F
.text:000000000000314F loc_314F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000314F                 mov     rdx, r12        ; n
.text:0000000000003152                 mov     rsi, rbp        ; s2
.text:0000000000003155                 mov     rdi, r13        ; s1
.text:0000000000003158                 call    _memcmp
.text:000000000000315D                 test    eax, eax
.text:000000000000315F                 jnz     short loc_3140
.text:0000000000003161
.text:0000000000003161 loc_3161:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000003161                                         ; argmatch_to_argument+2D↑j
.text:0000000000003161                 pop     rbx
.text:0000000000003162                 mov     rax, r14
.text:0000000000003165                 pop     rbp
.text:0000000000003166                 pop     r12
.text:0000000000003168                 pop     r13
.text:000000000000316A                 pop     r14
.text:000000000000316C                 retn
.text:000000000000316C ; } // starts at 3120
.text:000000000000316C argmatch_to_argument endp
.text:000000000000316C
.text:000000000000316C ; ---------------------------------------------------------------------------
.text:000000000000316D                 align 10h
.text:0000000000003170
.text:0000000000003170 ; =============== S U B R O U T I N E =======================================
.text:0000000000003170
.text:0000000000003170
.text:0000000000003170                 public close_stdout_set_file_name
.text:0000000000003170 close_stdout_set_file_name proc near
.text:0000000000003170 ; __unwind {
.text:0000000000003170                 mov     cs:file_name, rdi
.text:0000000000003177                 retn
.text:0000000000003177 ; } // starts at 3170
.text:0000000000003177 close_stdout_set_file_name endp
.text:0000000000003177
.text:0000000000003177 ; ---------------------------------------------------------------------------
.text:0000000000003178                 align 20h
.text:0000000000003180
.text:0000000000003180 ; =============== S U B R O U T I N E =======================================
.text:0000000000003180
.text:0000000000003180
.text:0000000000003180                 public close_stdout_set_ignore_EPIPE
.text:0000000000003180 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003180 ; __unwind {
.text:0000000000003180                 mov     cs:ignore_EPIPE, dil
.text:0000000000003187                 retn
.text:0000000000003187 ; } // starts at 3180
.text:0000000000003187 close_stdout_set_ignore_EPIPE endp
.text:0000000000003187
.text:0000000000003187 ; ---------------------------------------------------------------------------
.text:0000000000003188                 align 10h
.text:0000000000003190
.text:0000000000003190 ; =============== S U B R O U T I N E =======================================
.text:0000000000003190
.text:0000000000003190 ; Attributes: info_from_lumina
.text:0000000000003190
.text:0000000000003190 ; void __cdecl close_stdout()
.text:0000000000003190                 public close_stdout
.text:0000000000003190 close_stdout    proc near               ; DATA XREF: main+9D↑o
.text:0000000000003190 ; __unwind {
.text:0000000000003190                 push    rbp
.text:0000000000003191                 push    rbx
.text:0000000000003192                 sub     rsp, 8
.text:0000000000003196                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000319D                 call    close_stream
.text:00000000000031A2                 test    eax, eax
.text:00000000000031A4                 jz      short loc_31BC
.text:00000000000031A6                 call    ___errno_location
.text:00000000000031AB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000031B2                 mov     rbx, rax
.text:00000000000031B5                 jz      short loc_31D3
.text:00000000000031B7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000031BA                 jnz     short loc_31D3
.text:00000000000031BC
.text:00000000000031BC loc_31BC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000031BC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000031C3                 call    close_stream
.text:00000000000031C8                 test    eax, eax
.text:00000000000031CA                 jnz     short loc_3212
.text:00000000000031CC                 add     rsp, 8
.text:00000000000031D0                 pop     rbx
.text:00000000000031D1                 pop     rbp
.text:00000000000031D2                 retn
.text:00000000000031D3 ; ---------------------------------------------------------------------------
.text:00000000000031D3
.text:00000000000031D3 loc_31D3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000031D3                                         ; close_stdout+2A↑j
.text:00000000000031D3                 lea     rsi, aWriteError ; "write error"
.text:00000000000031DA                 xor     edi, edi        ; domainname
.text:00000000000031DC                 mov     edx, 5          ; category
.text:00000000000031E1                 call    _dcgettext
.text:00000000000031E6                 mov     rdi, cs:file_name
.text:00000000000031ED                 mov     rbp, rax
.text:00000000000031F0                 test    rdi, rdi
.text:00000000000031F3                 jz      short loc_321D
.text:00000000000031F5                 call    quotearg_colon
.text:00000000000031FA                 mov     esi, [rbx]      ; errnum
.text:00000000000031FC                 lea     rdx, format     ; "%s: %s"
.text:0000000000003203                 mov     rcx, rax
.text:0000000000003206                 mov     r8, rbp
.text:0000000000003209                 xor     edi, edi        ; status
.text:000000000000320B                 xor     eax, eax
.text:000000000000320D                 call    _error
.text:0000000000003212
.text:0000000000003212 loc_3212:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003212                                         ; close_stdout+A2↓j
.text:0000000000003212                 mov     edi, cs:exit_failure ; status
.text:0000000000003218                 call    __exit
.text:000000000000321D ; ---------------------------------------------------------------------------
.text:000000000000321D
.text:000000000000321D loc_321D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000321D                 mov     esi, [rbx]      ; errnum
.text:000000000000321F                 lea     rdx, aS_0+2     ; format
.text:0000000000003226                 mov     rcx, rax
.text:0000000000003229                 xor     edi, edi        ; status
.text:000000000000322B                 xor     eax, eax
.text:000000000000322D                 call    _error
.text:0000000000003232                 jmp     short loc_3212
.text:0000000000003232 ; } // starts at 3190
.text:0000000000003232 close_stdout    endp
.text:0000000000003232
.text:0000000000003232 ; ---------------------------------------------------------------------------
.text:0000000000003234                 align 20h
.text:0000000000003240
.text:0000000000003240 ; =============== S U B R O U T I N E =======================================
.text:0000000000003240
.text:0000000000003240
.text:0000000000003240 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000003240                 public fdadvise
.text:0000000000003240 fdadvise        proc near
.text:0000000000003240 ; __unwind {
.text:0000000000003240                 jmp     _posix_fadvise
.text:0000000000003240 ; } // starts at 3240
.text:0000000000003240 fdadvise        endp
.text:0000000000003240
.text:0000000000003240 ; ---------------------------------------------------------------------------
.text:0000000000003245                 align 10h
.text:0000000000003250
.text:0000000000003250 ; =============== S U B R O U T I N E =======================================
.text:0000000000003250
.text:0000000000003250
.text:0000000000003250                 public fadvise
.text:0000000000003250 fadvise         proc near               ; CODE XREF: main+32F↑p
.text:0000000000003250 ; __unwind {
.text:0000000000003250                 test    rdi, rdi
.text:0000000000003253                 jz      short locret_3270
.text:0000000000003255                 push    rbx
.text:0000000000003256                 mov     ebx, esi
.text:0000000000003258                 call    _fileno
.text:000000000000325D                 mov     ecx, ebx        ; advise
.text:000000000000325F                 xor     edx, edx        ; len
.text:0000000000003261                 xor     esi, esi        ; offset
.text:0000000000003263                 pop     rbx
.text:0000000000003264                 mov     edi, eax        ; fd
.text:0000000000003266                 jmp     _posix_fadvise
.text:0000000000003266 ; ---------------------------------------------------------------------------
.text:000000000000326B                 align 10h
.text:0000000000003270
.text:0000000000003270 locret_3270:                            ; CODE XREF: fadvise+3↑j
.text:0000000000003270                 rep retn
.text:0000000000003270 ; } // starts at 3250
.text:0000000000003270 fadvise         endp
.text:0000000000003270
.text:0000000000003270 ; ---------------------------------------------------------------------------
.text:0000000000003272                 align 20h
.text:0000000000003280
.text:0000000000003280 ; =============== S U B R O U T I N E =======================================
.text:0000000000003280
.text:0000000000003280
.text:0000000000003280 protect_fd      proc near               ; CODE XREF: freopen_safer+83↓p
.text:0000000000003280                                         ; freopen_safer+A1↓p ...
.text:0000000000003280 ; __unwind {
.text:0000000000003280                 push    rbp
.text:0000000000003281                 push    rbx
.text:0000000000003282                 mov     ebp, edi
.text:0000000000003284                 lea     rdi, file       ; "/dev/null"
.text:000000000000328B                 xor     esi, esi        ; oflag
.text:000000000000328D                 xor     eax, eax
.text:000000000000328F                 sub     rsp, 8
.text:0000000000003293                 mov     ebx, 1
.text:0000000000003298                 call    _open
.text:000000000000329D                 cmp     ebp, eax
.text:000000000000329F                 jz      short loc_32B9
.text:00000000000032A1                 xor     ebx, ebx
.text:00000000000032A3                 test    eax, eax
.text:00000000000032A5                 js      short loc_32B9
.text:00000000000032A7                 mov     edi, eax        ; fd
.text:00000000000032A9                 call    _close
.text:00000000000032AE                 call    ___errno_location
.text:00000000000032B3                 mov     dword ptr [rax], 9
.text:00000000000032B9
.text:00000000000032B9 loc_32B9:                               ; CODE XREF: protect_fd+1F↑j
.text:00000000000032B9                                         ; protect_fd+25↑j
.text:00000000000032B9                 add     rsp, 8
.text:00000000000032BD                 mov     eax, ebx
.text:00000000000032BF                 pop     rbx
.text:00000000000032C0                 pop     rbp
.text:00000000000032C1                 retn
.text:00000000000032C1 ; } // starts at 3280
.text:00000000000032C1 protect_fd      endp
.text:00000000000032C1
.text:00000000000032C1 ; ---------------------------------------------------------------------------
.text:00000000000032C2                 align 10h
.text:00000000000032D0
.text:00000000000032D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032D0
.text:00000000000032D0
.text:00000000000032D0                 public freopen_safer
.text:00000000000032D0 freopen_safer   proc near               ; CODE XREF: main+30B↑p
.text:00000000000032D0                                         ; main+780↑p
.text:00000000000032D0
.text:00000000000032D0 filename        = qword ptr -40h
.text:00000000000032D0
.text:00000000000032D0 ; __unwind {
.text:00000000000032D0                 push    r15
.text:00000000000032D2                 push    r14
.text:00000000000032D4                 mov     r15, rsi
.text:00000000000032D7                 push    r13
.text:00000000000032D9                 push    r12
.text:00000000000032DB                 mov     r12, rdx
.text:00000000000032DE                 push    rbp
.text:00000000000032DF                 push    rbx
.text:00000000000032E0                 sub     rsp, 18h
.text:00000000000032E4                 mov     [rsp+48h+filename], rdi
.text:00000000000032E9                 mov     rdi, rdx        ; stream
.text:00000000000032EC                 call    _fileno
.text:00000000000032F1                 mov     ebx, eax
.text:00000000000032F3                 call    ___errno_location
.text:00000000000032F8                 cmp     ebx, 1
.text:00000000000032FB                 mov     r14, rax
.text:00000000000032FE                 jz      loc_3460
.text:0000000000003304                 cmp     ebx, 2
.text:0000000000003307                 jz      loc_3450
.text:000000000000330D                 test    ebx, ebx
.text:000000000000330F                 jz      loc_33C8
.text:0000000000003315                 mov     esi, 2          ; fd2
.text:000000000000331A                 mov     edi, 2          ; fd
.text:000000000000331F                 call    _dup2
.text:0000000000003324                 cmp     eax, 2
.text:0000000000003327                 setnz   bl
.text:000000000000332A
.text:000000000000332A loc_332A:                               ; CODE XREF: freopen_safer+182↓j
.text:000000000000332A                 mov     esi, 1          ; fd2
.text:000000000000332F                 mov     edi, 1          ; fd
.text:0000000000003334                 call    _dup2
.text:0000000000003339                 cmp     eax, 1
.text:000000000000333C                 setnz   bpl
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: freopen_safer+194↓j
.text:0000000000003340                 xor     esi, esi        ; fd2
.text:0000000000003342                 xor     edi, edi        ; fd
.text:0000000000003344                 call    _dup2
.text:0000000000003349                 test    eax, eax
.text:000000000000334B                 jz      loc_33D8
.text:0000000000003351                 xor     edi, edi
.text:0000000000003353                 call    protect_fd
.text:0000000000003358                 test    al, al
.text:000000000000335A                 mov     r13d, eax
.text:000000000000335D                 jz      loc_3470
.text:0000000000003363                 test    bpl, bpl
.text:0000000000003366                 jnz     short loc_33E0
.text:0000000000003368
.text:0000000000003368 loc_3368:                               ; CODE XREF: freopen_safer+10E↓j
.text:0000000000003368                                         ; freopen_safer+11E↓j
.text:0000000000003368                 test    bl, bl
.text:000000000000336A                 jz      short loc_3380
.text:000000000000336C                 mov     edi, 2
.text:0000000000003371                 call    protect_fd
.text:0000000000003376                 test    al, al
.text:0000000000003378                 mov     ebx, eax
.text:000000000000337A                 jz      loc_3430
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: freopen_safer+9A↑j
.text:0000000000003380                                         ; freopen_safer+FF↓j
.text:0000000000003380                 mov     rdi, [rsp+48h+filename] ; filename
.text:0000000000003385                 mov     rdx, r12        ; stream
.text:0000000000003388                 mov     rsi, r15        ; modes
.text:000000000000338B                 call    _freopen
.text:0000000000003390                 mov     r12, rax
.text:0000000000003393
.text:0000000000003393 loc_3393:                               ; CODE XREF: freopen_safer+1A9↓j
.text:0000000000003393                 test    bl, bl
.text:0000000000003395                 mov     r15d, [r14]
.text:0000000000003398                 jnz     loc_3440
.text:000000000000339E
.text:000000000000339E loc_339E:                               ; CODE XREF: freopen_safer+17A↓j
.text:000000000000339E                 test    bpl, bpl
.text:00000000000033A1                 jnz     short loc_3410
.text:00000000000033A3                 test    r13b, r13b
.text:00000000000033A6                 jnz     short loc_341F
.text:00000000000033A8
.text:00000000000033A8 loc_33A8:                               ; CODE XREF: freopen_safer+14D↓j
.text:00000000000033A8                                         ; freopen_safer+156↓j
.text:00000000000033A8                 test    r12, r12
.text:00000000000033AB                 jnz     short loc_33B0
.text:00000000000033AD                 mov     [r14], r15d
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: freopen_safer+DB↑j
.text:00000000000033B0                 add     rsp, 18h
.text:00000000000033B4                 mov     rax, r12
.text:00000000000033B7                 pop     rbx
.text:00000000000033B8                 pop     rbp
.text:00000000000033B9                 pop     r12
.text:00000000000033BB                 pop     r13
.text:00000000000033BD                 pop     r14
.text:00000000000033BF                 pop     r15
.text:00000000000033C1                 retn
.text:00000000000033C1 ; ---------------------------------------------------------------------------
.text:00000000000033C2                 align 8
.text:00000000000033C8
.text:00000000000033C8 loc_33C8:                               ; CODE XREF: freopen_safer+3F↑j
.text:00000000000033C8                 xor     ebx, ebx
.text:00000000000033CA                 xor     ebp, ebp
.text:00000000000033CC                 xor     r13d, r13d
.text:00000000000033CF                 jmp     short loc_3380
.text:00000000000033CF ; ---------------------------------------------------------------------------
.text:00000000000033D1                 align 8
.text:00000000000033D8
.text:00000000000033D8 loc_33D8:                               ; CODE XREF: freopen_safer+7B↑j
.text:00000000000033D8                 xor     r13d, r13d
.text:00000000000033DB                 test    bpl, bpl
.text:00000000000033DE                 jz      short loc_3368
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: freopen_safer+96↑j
.text:00000000000033E0                 mov     edi, 1
.text:00000000000033E5                 call    protect_fd
.text:00000000000033EA                 test    al, al
.text:00000000000033EC                 mov     ebp, eax
.text:00000000000033EE                 jnz     loc_3368
.text:00000000000033F4                 xor     r12d, r12d
.text:00000000000033F7                 test    bl, bl
.text:00000000000033F9                 mov     r15d, [r14]
.text:00000000000033FC                 jz      short loc_3410
.text:00000000000033FE                 mov     edi, 2          ; fd
.text:0000000000003403                 call    _close
.text:0000000000003408                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: freopen_safer+D1↑j
.text:0000000000003410                                         ; freopen_safer+12C↑j
.text:0000000000003410                 mov     edi, 1          ; fd
.text:0000000000003415                 call    _close
.text:000000000000341A                 test    r13b, r13b
.text:000000000000341D                 jz      short loc_33A8
.text:000000000000341F
.text:000000000000341F loc_341F:                               ; CODE XREF: freopen_safer+D6↑j
.text:000000000000341F                 xor     edi, edi        ; fd
.text:0000000000003421                 call    _close
.text:0000000000003426                 jmp     short loc_33A8
.text:0000000000003426 ; ---------------------------------------------------------------------------
.text:0000000000003428                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: freopen_safer+AA↑j
.text:0000000000003430                 mov     r15d, [r14]
.text:0000000000003433                 xor     r12d, r12d
.text:0000000000003436                 db      2Eh
.text:0000000000003436                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: freopen_safer+C8↑j
.text:0000000000003440                 mov     edi, 2          ; fd
.text:0000000000003445                 call    _close
.text:000000000000344A                 jmp     loc_339E
.text:000000000000344A ; ---------------------------------------------------------------------------
.text:000000000000344F                 align 10h
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: freopen_safer+37↑j
.text:0000000000003450                 xor     ebx, ebx
.text:0000000000003452                 jmp     loc_332A
.text:0000000000003452 ; ---------------------------------------------------------------------------
.text:0000000000003457                 align 20h
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: freopen_safer+2E↑j
.text:0000000000003460                 xor     ebx, ebx
.text:0000000000003462                 xor     ebp, ebp
.text:0000000000003464                 jmp     loc_3340
.text:0000000000003464 ; ---------------------------------------------------------------------------
.text:0000000000003469                 align 10h
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: freopen_safer+8D↑j
.text:0000000000003470                 mov     r13d, 1
.text:0000000000003476                 xor     r12d, r12d
.text:0000000000003479                 jmp     loc_3393
.text:0000000000003479 ; } // starts at 32D0
.text:0000000000003479 freopen_safer   endp
.text:0000000000003479
.text:0000000000003479 ; ---------------------------------------------------------------------------
.text:000000000000347E                 align 20h
.text:0000000000003480
.text:0000000000003480 ; =============== S U B R O U T I N E =======================================
.text:0000000000003480
.text:0000000000003480
.text:0000000000003480                 public hard_locale
.text:0000000000003480 hard_locale     proc near               ; CODE XREF: main+98↑p
.text:0000000000003480                                         ; rpl_mbrtowc+47↓p
.text:0000000000003480 ; __unwind {
.text:0000000000003480                 sub     rsp, 8
.text:0000000000003484                 xor     esi, esi        ; locale
.text:0000000000003486                 call    _setlocale
.text:000000000000348B                 mov     rdx, rax
.text:000000000000348E                 mov     eax, 1
.text:0000000000003493                 test    rdx, rdx
.text:0000000000003496                 jz      short loc_34B5
.text:0000000000003498                 lea     rdi, aC         ; "C"
.text:000000000000349F                 mov     ecx, 2
.text:00000000000034A4                 mov     rsi, rdx
.text:00000000000034A7                 repe cmpsb
.text:00000000000034A9                 setnbe  cl
.text:00000000000034AC                 sbb     cl, 0
.text:00000000000034AF                 xor     eax, eax
.text:00000000000034B1                 test    cl, cl
.text:00000000000034B3                 jnz     short loc_34C0
.text:00000000000034B5
.text:00000000000034B5 loc_34B5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000034B5                 add     rsp, 8
.text:00000000000034B9                 retn
.text:00000000000034B9 ; ---------------------------------------------------------------------------
.text:00000000000034BA                 align 20h
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000034C0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000034C7                 mov     ecx, 6
.text:00000000000034CC                 mov     rsi, rdx
.text:00000000000034CF                 repe cmpsb
.text:00000000000034D1                 setnbe  al
.text:00000000000034D4                 sbb     al, 0
.text:00000000000034D6                 test    al, al
.text:00000000000034D8                 setnz   al
.text:00000000000034DB                 add     rsp, 8
.text:00000000000034DF                 retn
.text:00000000000034DF ; } // starts at 3480
.text:00000000000034DF hard_locale     endp
.text:00000000000034DF
.text:00000000000034E0
.text:00000000000034E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034E0
.text:00000000000034E0
.text:00000000000034E0                 public initbuffer
.text:00000000000034E0 initbuffer      proc near               ; CODE XREF: main+337↑p
.text:00000000000034E0                                         ; main+33F↑p
.text:00000000000034E0 ; __unwind {
.text:00000000000034E0                 pxor    xmm0, xmm0
.text:00000000000034E4                 mov     qword ptr [rdi+10h], 0
.text:00000000000034EC                 movups  xmmword ptr [rdi], xmm0
.text:00000000000034EF                 retn
.text:00000000000034EF ; } // starts at 34E0
.text:00000000000034EF initbuffer      endp
.text:00000000000034EF
.text:00000000000034F0
.text:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034F0
.text:00000000000034F0
.text:00000000000034F0                 public readlinebuffer_delim
.text:00000000000034F0 readlinebuffer_delim proc near          ; CODE XREF: main+373↑p
.text:00000000000034F0                                         ; main+3C9↑p ...
.text:00000000000034F0
.text:00000000000034F0 var_48          = qword ptr -48h
.text:00000000000034F0 var_39          = byte ptr -39h
.text:00000000000034F0
.text:00000000000034F0 ; __unwind {
.text:00000000000034F0                 push    r15
.text:00000000000034F2                 push    r14
.text:00000000000034F4                 push    r13
.text:00000000000034F6                 push    r12
.text:00000000000034F8                 push    rbp
.text:00000000000034F9                 push    rbx
.text:00000000000034FA                 sub     rsp, 18h
.text:00000000000034FE                 mov     r13, [rdi+10h]
.text:0000000000003502                 mov     r8, [rdi]
.text:0000000000003505                 add     r8, r13
.text:0000000000003508                 test    byte ptr [rsi], 10h
.text:000000000000350B                 jnz     loc_35E0
.text:0000000000003511                 mov     r14, rdi
.text:0000000000003514                 mov     rbp, rsi
.text:0000000000003517                 mov     rbx, r13
.text:000000000000351A                 movsx   r15d, dl
.text:000000000000351E                 jmp     short loc_352B
.text:0000000000003520 ; ---------------------------------------------------------------------------
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: readlinebuffer_delim+5A↓j
.text:0000000000003520                 cmp     r12d, r15d
.text:0000000000003523                 lea     rbx, [rsi+1]
.text:0000000000003527                 mov     [rsi], cl
.text:0000000000003529                 jz      short loc_3586
.text:000000000000352B
.text:000000000000352B loc_352B:                               ; CODE XREF: readlinebuffer_delim+2E↑j
.text:000000000000352B                                         ; readlinebuffer_delim+94↓j
.text:000000000000352B                 mov     rcx, [rbp+8]
.text:000000000000352F                 cmp     rcx, [rbp+10h]
.text:0000000000003533                 jnb     short loc_35A0
.text:0000000000003535                 lea     rax, [rcx+1]
.text:0000000000003539                 mov     [rbp+8], rax
.text:000000000000353D                 movzx   r12d, byte ptr [rcx]
.text:0000000000003541                 mov     ecx, r12d
.text:0000000000003544
.text:0000000000003544 loc_3544:                               ; CODE XREF: readlinebuffer_delim+E6↓j
.text:0000000000003544                                         ; readlinebuffer_delim+103↓j
.text:0000000000003544                 cmp     rbx, r8
.text:0000000000003547                 mov     rsi, rbx
.text:000000000000354A                 jnz     short loc_3520
.text:000000000000354C                 mov     rbx, [r14]
.text:000000000000354F                 mov     rsi, r14
.text:0000000000003552                 mov     rdi, r13
.text:0000000000003555                 mov     [rsp+48h+var_39], dl
.text:0000000000003559                 mov     byte ptr [rsp+48h+var_48], cl
.text:000000000000355C                 call    x2realloc
.text:0000000000003561                 mov     r8, [r14]
.text:0000000000003564                 movzx   ecx, byte ptr [rsp+48h+var_48]
.text:0000000000003568                 lea     rsi, [rax+rbx]
.text:000000000000356C                 mov     [r14+10h], rax
.text:0000000000003570                 mov     r13, rax
.text:0000000000003573                 movzx   edx, [rsp+48h+var_39]
.text:0000000000003578                 lea     rbx, [rsi+1]
.text:000000000000357C                 add     r8, rax
.text:000000000000357F                 cmp     r12d, r15d
.text:0000000000003582                 mov     [rsi], cl
.text:0000000000003584                 jnz     short loc_352B
.text:0000000000003586
.text:0000000000003586 loc_3586:                               ; CODE XREF: readlinebuffer_delim+39↑j
.text:0000000000003586                                         ; readlinebuffer_delim+DF↓j
.text:0000000000003586                 sub     rbx, r13
.text:0000000000003589                 mov     rax, r14
.text:000000000000358C                 mov     [r14+8], rbx
.text:0000000000003590                 add     rsp, 18h
.text:0000000000003594                 pop     rbx
.text:0000000000003595                 pop     rbp
.text:0000000000003596                 pop     r12
.text:0000000000003598                 pop     r13
.text:000000000000359A                 pop     r14
.text:000000000000359C                 pop     r15
.text:000000000000359E                 retn
.text:000000000000359E ; ---------------------------------------------------------------------------
.text:000000000000359F                 align 20h
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: readlinebuffer_delim+43↑j
.text:00000000000035A0                 mov     rdi, rbp        ; _IO_FILE *
.text:00000000000035A3                 mov     [rsp+48h+var_39], dl
.text:00000000000035A7                 mov     [rsp+48h+var_48], r8
.text:00000000000035AB                 call    ___uflow
.text:00000000000035B0                 cmp     eax, 0FFFFFFFFh
.text:00000000000035B3                 mov     r12d, eax
.text:00000000000035B6                 mov     r8, [rsp+48h+var_48]
.text:00000000000035BA                 movzx   edx, [rsp+48h+var_39]
.text:00000000000035BF                 jnz     short loc_35F1
.text:00000000000035C1                 cmp     r13, rbx
.text:00000000000035C4                 jz      short loc_35E0
.text:00000000000035C6                 test    byte ptr [rbp+0], 20h
.text:00000000000035CA                 jnz     short loc_35E0
.text:00000000000035CC                 cmp     [rbx-1], dl
.text:00000000000035CF                 jz      short loc_3586
.text:00000000000035D1                 mov     r12d, r15d
.text:00000000000035D4                 mov     ecx, edx
.text:00000000000035D6                 jmp     loc_3544
.text:00000000000035D6 ; ---------------------------------------------------------------------------
.text:00000000000035DB                 align 20h
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: readlinebuffer_delim+1B↑j
.text:00000000000035E0                                         ; readlinebuffer_delim+D4↑j ...
.text:00000000000035E0                 add     rsp, 18h
.text:00000000000035E4                 xor     eax, eax
.text:00000000000035E6                 pop     rbx
.text:00000000000035E7                 pop     rbp
.text:00000000000035E8                 pop     r12
.text:00000000000035EA                 pop     r13
.text:00000000000035EC                 pop     r14
.text:00000000000035EE                 pop     r15
.text:00000000000035F0                 retn
.text:00000000000035F1 ; ---------------------------------------------------------------------------
.text:00000000000035F1
.text:00000000000035F1 loc_35F1:                               ; CODE XREF: readlinebuffer_delim+CF↑j
.text:00000000000035F1                 mov     ecx, eax
.text:00000000000035F3                 jmp     loc_3544
.text:00000000000035F3 ; } // starts at 34F0
.text:00000000000035F3 readlinebuffer_delim endp
.text:00000000000035F3
.text:00000000000035F3 ; ---------------------------------------------------------------------------
.text:00000000000035F8                 align 20h
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600
.text:0000000000003600                 public readlinebuffer
.text:0000000000003600 readlinebuffer  proc near
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 mov     edx, 0Ah
.text:0000000000003605                 jmp     readlinebuffer_delim
.text:0000000000003605 ; } // starts at 3600
.text:0000000000003605 readlinebuffer  endp
.text:0000000000003605
.text:0000000000003605 ; ---------------------------------------------------------------------------
.text:000000000000360A                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610
.text:0000000000003610                 public freebuffer
.text:0000000000003610 freebuffer      proc near
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000003614                 jmp     _free
.text:0000000000003614 ; } // starts at 3610
.text:0000000000003614 freebuffer      endp
.text:0000000000003614
.text:0000000000003614 ; ---------------------------------------------------------------------------
.text:0000000000003619                 align 20h
.text:0000000000003620
.text:0000000000003620 ; =============== S U B R O U T I N E =======================================
.text:0000000000003620
.text:0000000000003620
.text:0000000000003620                 public memcasecmp
.text:0000000000003620 memcasecmp      proc near               ; CODE XREF: different:loc_2700↑p
.text:0000000000003620 ; __unwind {
.text:0000000000003620                 test    rdx, rdx
.text:0000000000003623                 jz      short loc_3668
.text:0000000000003625                 push    r12
.text:0000000000003627                 push    rbp
.text:0000000000003628                 mov     r12, rsi
.text:000000000000362B                 push    rbx
.text:000000000000362C                 mov     rbp, rdi
.text:000000000000362F                 mov     rbx, rdx
.text:0000000000003632                 call    ___ctype_toupper_loc
.text:0000000000003637                 xor     ecx, ecx
.text:0000000000003639                 mov     r8, [rax]
.text:000000000000363C                 jmp     short loc_3649
.text:000000000000363C ; ---------------------------------------------------------------------------
.text:000000000000363E                 align 20h
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: memcasecmp+3B↓j
.text:0000000000003640                 add     rcx, 1
.text:0000000000003644                 cmp     rcx, rbx
.text:0000000000003647                 jz      short loc_365D
.text:0000000000003649
.text:0000000000003649 loc_3649:                               ; CODE XREF: memcasecmp+1C↑j
.text:0000000000003649                 movzx   eax, byte ptr [rbp+rcx+0]
.text:000000000000364E                 movzx   r9d, byte ptr [r12+rcx]
.text:0000000000003653                 mov     eax, [r8+rax*4]
.text:0000000000003657                 sub     eax, [r8+r9*4]
.text:000000000000365B                 jz      short loc_3640
.text:000000000000365D
.text:000000000000365D loc_365D:                               ; CODE XREF: memcasecmp+27↑j
.text:000000000000365D                 pop     rbx
.text:000000000000365E                 pop     rbp
.text:000000000000365F                 pop     r12
.text:0000000000003661                 retn
.text:0000000000003661 ; ---------------------------------------------------------------------------
.text:0000000000003662                 align 8
.text:0000000000003668
.text:0000000000003668 loc_3668:                               ; CODE XREF: memcasecmp+3↑j
.text:0000000000003668                 xor     eax, eax
.text:000000000000366A                 retn
.text:000000000000366A ; } // starts at 3620
.text:000000000000366A memcasecmp      endp
.text:000000000000366A
.text:000000000000366A ; ---------------------------------------------------------------------------
.text:000000000000366B                 align 10h
.text:0000000000003670
.text:0000000000003670 ; =============== S U B R O U T I N E =======================================
.text:0000000000003670
.text:0000000000003670
.text:0000000000003670                 public posix2_version
.text:0000000000003670 posix2_version  proc near               ; CODE XREF: main:loc_244C↑p
.text:0000000000003670
.text:0000000000003670 var_18          = qword ptr -18h
.text:0000000000003670 var_10          = qword ptr -10h
.text:0000000000003670
.text:0000000000003670 ; __unwind {
.text:0000000000003670                 push    rbx
.text:0000000000003671                 lea     rdi, aPosix2Version ; "_POSIX2_VERSION"
.text:0000000000003678                 mov     ebx, 31069h
.text:000000000000367D                 sub     rsp, 10h
.text:0000000000003681                 mov     rax, fs:28h
.text:000000000000368A                 mov     [rsp+18h+var_10], rax
.text:000000000000368F                 xor     eax, eax
.text:0000000000003691                 call    _getenv
.text:0000000000003696                 test    rax, rax
.text:0000000000003699                 jz      short loc_36A0
.text:000000000000369B                 cmp     byte ptr [rax], 0
.text:000000000000369E                 jnz     short loc_36C0
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: posix2_version+29↑j
.text:00000000000036A0                                         ; posix2_version+67↓j ...
.text:00000000000036A0                 mov     rcx, [rsp+18h+var_10]
.text:00000000000036A5                 xor     rcx, fs:28h
.text:00000000000036AE                 mov     eax, ebx
.text:00000000000036B0                 jnz     short loc_36F9
.text:00000000000036B2                 add     rsp, 10h
.text:00000000000036B6                 pop     rbx
.text:00000000000036B7                 retn
.text:00000000000036B7 ; ---------------------------------------------------------------------------
.text:00000000000036B8                 align 20h
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: posix2_version+2E↑j
.text:00000000000036C0                 mov     edx, 0Ah        ; base
.text:00000000000036C5                 mov     rsi, rsp        ; endptr
.text:00000000000036C8                 mov     rdi, rax        ; nptr
.text:00000000000036CB                 call    _strtol
.text:00000000000036D0                 mov     rdx, [rsp+18h+var_18]
.text:00000000000036D4                 cmp     byte ptr [rdx], 0
.text:00000000000036D7                 jnz     short loc_36A0
.text:00000000000036D9                 cmp     rax, 0FFFFFFFF80000000h
.text:00000000000036DF                 jl      short loc_36F2
.text:00000000000036E1                 cmp     rax, 7FFFFFFFh
.text:00000000000036E7                 mov     ebx, 7FFFFFFFh
.text:00000000000036EC                 cmovle  rbx, rax
.text:00000000000036F0                 jmp     short loc_36A0
.text:00000000000036F2 ; ---------------------------------------------------------------------------
.text:00000000000036F2
.text:00000000000036F2 loc_36F2:                               ; CODE XREF: posix2_version+6F↑j
.text:00000000000036F2                 mov     ebx, 80000000h
.text:00000000000036F7                 jmp     short loc_36A0
.text:00000000000036F9 ; ---------------------------------------------------------------------------
.text:00000000000036F9
.text:00000000000036F9 loc_36F9:                               ; CODE XREF: posix2_version+40↑j
.text:00000000000036F9                 call    ___stack_chk_fail
.text:00000000000036F9 ; } // starts at 3670
.text:00000000000036F9 posix2_version  endp
.text:00000000000036F9
.text:00000000000036F9 ; ---------------------------------------------------------------------------
.text:00000000000036FE                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700
.text:0000000000003700                 public set_program_name
.text:0000000000003700 set_program_name proc near              ; CODE XREF: main+5E↑p
.text:0000000000003700 ; __unwind {
.text:0000000000003700                 test    rdi, rdi
.text:0000000000003703                 push    rbx
.text:0000000000003704                 jz      short loc_377D
.text:0000000000003706                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000370B                 mov     rbx, rdi
.text:000000000000370E                 call    _strrchr
.text:0000000000003713                 test    rax, rax
.text:0000000000003716                 jz      short loc_376D
.text:0000000000003718                 lea     r8, [rax+1]
.text:000000000000371C                 mov     rdx, r8
.text:000000000000371F                 sub     rdx, rbx
.text:0000000000003722                 cmp     rdx, 6
.text:0000000000003726                 jle     short loc_376D
.text:0000000000003728                 lea     rsi, [rax-6]
.text:000000000000372C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003733                 mov     ecx, 7
.text:0000000000003738                 repe cmpsb
.text:000000000000373A                 setnbe  dl
.text:000000000000373D                 sbb     dl, 0
.text:0000000000003740                 test    dl, dl
.text:0000000000003742                 jnz     short loc_376D
.text:0000000000003744                 lea     rdi, aLt        ; "lt-"
.text:000000000000374B                 mov     ecx, 3
.text:0000000000003750                 mov     rsi, r8
.text:0000000000003753                 mov     rbx, r8
.text:0000000000003756                 repe cmpsb
.text:0000000000003758                 setnbe  dl
.text:000000000000375B                 sbb     dl, 0
.text:000000000000375E                 test    dl, dl
.text:0000000000003760                 jnz     short loc_376D
.text:0000000000003762                 lea     rbx, [rax+4]
.text:0000000000003766                 mov     cs:__bss_start, rbx
.text:000000000000376D
.text:000000000000376D loc_376D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000376D                                         ; set_program_name+26↑j ...
.text:000000000000376D                 mov     cs:program_name, rbx
.text:0000000000003774                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000377B                 pop     rbx
.text:000000000000377C                 retn
.text:000000000000377D ; ---------------------------------------------------------------------------
.text:000000000000377D
.text:000000000000377D loc_377D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000377D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003784                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000378B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003790                 mov     esi, 1          ; size
.text:0000000000003795                 call    _fwrite
.text:000000000000379A                 call    _abort
.text:000000000000379A ; } // starts at 3700
.text:000000000000379A set_program_name endp
.text:000000000000379A
.text:000000000000379A ; ---------------------------------------------------------------------------
.text:000000000000379F                 align 20h
.text:00000000000037A0
.text:00000000000037A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037A0
.text:00000000000037A0 ; Attributes: info_from_lumina
.text:00000000000037A0
.text:00000000000037A0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000037A0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000037A0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000037A0 ; __unwind {
.text:00000000000037A0                 push    rbp
.text:00000000000037A1                 push    rbx
.text:00000000000037A2                 mov     rbp, rdi
.text:00000000000037A5                 mov     ebx, esi
.text:00000000000037A7                 sub     rsp, 8
.text:00000000000037AB                 call    locale_charset
.text:00000000000037B0                 movzx   edx, byte ptr [rax]
.text:00000000000037B3                 and     edx, 0FFFFFFDFh
.text:00000000000037B6                 cmp     dl, 55h ; 'U'
.text:00000000000037B9                 jz      short loc_3830
.text:00000000000037BB                 cmp     dl, 47h ; 'G'
.text:00000000000037BE                 jz      short loc_37E0
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000037C0                                         ; gettext_quote+50↓j ...
.text:00000000000037C0                 lea     rax, unk_7283
.text:00000000000037C7                 lea     rdx, asc_7285   ; "'"
.text:00000000000037CE                 cmp     ebx, 9
.text:00000000000037D1                 cmovnz  rax, rdx
.text:00000000000037D5                 add     rsp, 8
.text:00000000000037D9                 pop     rbx
.text:00000000000037DA                 pop     rbp
.text:00000000000037DB                 retn
.text:00000000000037DB ; ---------------------------------------------------------------------------
.text:00000000000037DC                 align 20h
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000037E0                 movzx   edx, byte ptr [rax+1]
.text:00000000000037E4                 and     edx, 0FFFFFFDFh
.text:00000000000037E7                 cmp     dl, 42h ; 'B'
.text:00000000000037EA                 jnz     short loc_37C0
.text:00000000000037EC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000037F0                 jnz     short loc_37C0
.text:00000000000037F2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000037F6                 jnz     short loc_37C0
.text:00000000000037F8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000037FC                 jnz     short loc_37C0
.text:00000000000037FE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003802                 jnz     short loc_37C0
.text:0000000000003804                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003808                 jnz     short loc_37C0
.text:000000000000380A                 cmp     byte ptr [rax+7], 0
.text:000000000000380E                 jnz     short loc_37C0
.text:0000000000003810                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003814                 lea     rax, unk_727C
.text:000000000000381B                 lea     rdx, unk_7280
.text:0000000000003822                 cmovnz  rax, rdx
.text:0000000000003826                 add     rsp, 8
.text:000000000000382A                 pop     rbx
.text:000000000000382B                 pop     rbp
.text:000000000000382C                 retn
.text:000000000000382C ; ---------------------------------------------------------------------------
.text:000000000000382D                 align 10h
.text:0000000000003830
.text:0000000000003830 loc_3830:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003830                 movzx   edx, byte ptr [rax+1]
.text:0000000000003834                 and     edx, 0FFFFFFDFh
.text:0000000000003837                 cmp     dl, 54h ; 'T'
.text:000000000000383A                 jnz     short loc_37C0
.text:000000000000383C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003840                 and     edx, 0FFFFFFDFh
.text:0000000000003843                 cmp     dl, 46h ; 'F'
.text:0000000000003846                 jnz     loc_37C0
.text:000000000000384C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003850                 jnz     loc_37C0
.text:0000000000003856                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000385A                 jnz     loc_37C0
.text:0000000000003860                 cmp     byte ptr [rax+5], 0
.text:0000000000003864                 jnz     loc_37C0
.text:000000000000386A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000386E                 lea     rax, unk_7274
.text:0000000000003875                 lea     rdx, unk_7278
.text:000000000000387C                 cmovnz  rax, rdx
.text:0000000000003880                 add     rsp, 8
.text:0000000000003884                 pop     rbx
.text:0000000000003885                 pop     rbp
.text:0000000000003886                 retn
.text:0000000000003886 ; } // starts at 37A0
.text:0000000000003886 gettext_quote   endp
.text:0000000000003886
.text:0000000000003886 ; ---------------------------------------------------------------------------
.text:0000000000003887                 align 10h
.text:0000000000003890
.text:0000000000003890 ; =============== S U B R O U T I N E =======================================
.text:0000000000003890
.text:0000000000003890 ; Attributes: info_from_lumina
.text:0000000000003890
.text:0000000000003890 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003890 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003890                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003890
.text:0000000000003890 var_E0          = dword ptr -0E0h
.text:0000000000003890 var_DB          = byte ptr -0DBh
.text:0000000000003890 var_DA          = byte ptr -0DAh
.text:0000000000003890 var_D9          = byte ptr -0D9h
.text:0000000000003890 s               = qword ptr -0D8h
.text:0000000000003890 n               = qword ptr -0D0h
.text:0000000000003890 var_C8          = qword ptr -0C8h
.text:0000000000003890 ps              = qword ptr -0C0h
.text:0000000000003890 var_B8          = qword ptr -0B8h
.text:0000000000003890 var_B0          = qword ptr -0B0h
.text:0000000000003890 var_A8          = qword ptr -0A8h
.text:0000000000003890 s2              = qword ptr -0A0h
.text:0000000000003890 var_98          = qword ptr -98h
.text:0000000000003890 var_90          = qword ptr -90h
.text:0000000000003890 var_88          = qword ptr -88h
.text:0000000000003890 var_80          = qword ptr -80h
.text:0000000000003890 var_78          = qword ptr -78h
.text:0000000000003890 var_70          = dword ptr -70h
.text:0000000000003890 var_6C          = byte ptr -6Ch
.text:0000000000003890 var_6B          = byte ptr -6Bh
.text:0000000000003890 var_6A          = byte ptr -6Ah
.text:0000000000003890 var_69          = byte ptr -69h
.text:0000000000003890 var_68          = qword ptr -68h
.text:0000000000003890 var_60          = qword ptr -60h
.text:0000000000003890 wc              = dword ptr -4Ch
.text:0000000000003890 var_48          = qword ptr -48h
.text:0000000000003890 var_40          = qword ptr -40h
.text:0000000000003890 arg_0           = qword ptr  8
.text:0000000000003890 arg_8           = qword ptr  10h
.text:0000000000003890 arg_10          = qword ptr  18h
.text:0000000000003890
.text:0000000000003890 ; __unwind {
.text:0000000000003890                 push    r15
.text:0000000000003892                 push    r14
.text:0000000000003894                 mov     r15d, r8d
.text:0000000000003897                 push    r13
.text:0000000000003899                 push    r12
.text:000000000000389B                 mov     r14, rdi
.text:000000000000389E                 push    rbp
.text:000000000000389F                 push    rbx
.text:00000000000038A0                 mov     ebx, r9d
.text:00000000000038A3                 mov     r13, rsi
.text:00000000000038A6                 mov     rbp, rcx
.text:00000000000038A9                 and     ebx, 2
.text:00000000000038AC                 sub     rsp, 0B8h
.text:00000000000038B3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000038BB                 mov     [rsp+0E8h+s], rdx
.text:00000000000038C0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000038C5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000038CA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000038CF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000038D7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000038DC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000038E4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000038E9                 mov     rax, fs:28h
.text:00000000000038F2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000038FA                 xor     eax, eax
.text:00000000000038FC                 call    ___ctype_get_mb_cur_max
.text:0000000000003901                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003905                 mov     [rsp+0E8h+var_90], rax
.text:000000000000390A                 ja      def_3921        ; jumptable 00000000000121F1 default case
.text:0000000000003910                 lea     rcx, jpt_3921
.text:0000000000003917                 mov     edx, r15d
.text:000000000000391A                 movsxd  rax, ds:(jpt_3921 - 72E0h)[rcx+rdx*4]
.text:000000000000391E                 add     rax, rcx
.text:0000000000003921                 jmp     rax             ; switch jump
.text:0000000000003923 ; ---------------------------------------------------------------------------
.text:0000000000003923
.text:0000000000003923 loc_3923:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003923                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003923                                         ; DATA XREF: ...
.text:0000000000003923                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003928                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000392D                 xor     r12d, r12d
.text:0000000000003930                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003939                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000393E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003943
.text:0000000000003943 loc_3943:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003943                 lea     rax, asc_7285   ; "'"
.text:000000000000394A                 mov     [rsp+0E8h+n], 1
.text:0000000000003953                 xor     r15d, r15d
.text:0000000000003956                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000395E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003963
.text:0000000000003963 loc_3963:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003963                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003963                 xor     r11d, r11d
.text:0000000000003966                 mov     rax, rbp
.text:0000000000003969                 mov     r8d, r12d
.text:000000000000396C                 mov     rbp, r11
.text:000000000000396F                 mov     r11, rax
.text:0000000000003972                 nop     word ptr [rax+rax+00h]
.text:0000000000003978
.text:0000000000003978 loc_3978:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003978                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003978                 cmp     r11, rbp
.text:000000000000397B                 setnz   r12b
.text:000000000000397F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003983                 jnz     short loc_3992
.text:0000000000003985                 mov     rax, [rsp+0E8h+s]
.text:000000000000398A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000398E                 setnz   r12b
.text:0000000000003992
.text:0000000000003992 loc_3992:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003992                 test    r12b, r12b
.text:0000000000003995                 jz      loc_3FF0
.text:000000000000399B                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000039A0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000039A5                 lea     r9, [rdi+rbp]
.text:00000000000039A9                 setnz   al
.text:00000000000039AC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000039B0                 mov     r10d, eax
.text:00000000000039B3                 jz      loc_3A60
.text:00000000000039B9                 mov     rax, [rsp+0E8h+n]
.text:00000000000039BE                 test    rax, rax
.text:00000000000039C1                 jz      loc_3DF0
.text:00000000000039C7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000039CB                 lea     rbx, [rbp+rax+0]
.text:00000000000039D0                 jnz     short loc_3A00
.text:00000000000039D2                 cmp     rax, 1
.text:00000000000039D6                 jbe     short loc_3A00
.text:00000000000039D8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000039DD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000039E2                 mov     [rsp+0E8h+ps], r9
.text:00000000000039E7                 call    _strlen
.text:00000000000039EC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000039F2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000039F8                 mov     r11, rax
.text:00000000000039FB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003A00
.text:0000000000003A00 loc_3A00:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003A00                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003A00                 cmp     rbx, r11
.text:0000000000003A03                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003A08                 ja      loc_3FC0
.text:0000000000003A0E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003A13                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003A18                 mov     rdi, r9         ; s1
.text:0000000000003A1B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003A20                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003A25                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003A2A                 call    _memcmp
.text:0000000000003A2F                 test    eax, eax
.text:0000000000003A31                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003A36                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003A3C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003A41                 jnz     loc_3FC0
.text:0000000000003A47                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A4C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003A52                 jnz     loc_49D5
.text:0000000000003A58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003A60                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003A60                 movzx   ebx, byte ptr [r9]
.text:0000000000003A64                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003A67                 ja      def_3A7E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003A6D                 lea     rcx, jpt_3A7E
.text:0000000000003A74                 movzx   edx, bl
.text:0000000000003A77                 movsxd  rax, ds:(jpt_3A7E - 730Ch)[rcx+rdx*4]
.text:0000000000003A7B                 add     rax, rcx
.text:0000000000003A7E                 jmp     rax             ; switch jump
.text:0000000000003A80 ; ---------------------------------------------------------------------------
.text:0000000000003A80
.text:0000000000003A80 loc_3A80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003A80                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003A80                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003A83
.text:0000000000003A83 loc_3A83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A83                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003A83                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003A87                 setnz   al
.text:0000000000003A8A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A8E                 jnz     short loc_3A9C
.text:0000000000003A90                 mov     rax, [rsp+0E8h+s]
.text:0000000000003A95                 cmp     byte ptr [rax+1], 0
.text:0000000000003A99                 setnz   al
.text:0000000000003A9C
.text:0000000000003A9C loc_3A9C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000003A9C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003AA1                 setz    dl
.text:0000000000003AA4                 test    al, al
.text:0000000000003AA6                 jz      loc_3CF8
.text:0000000000003AAC
.text:0000000000003AAC loc_3AAC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000003AAC                 xor     r12d, r12d
.text:0000000000003AAF                 xor     eax, eax
.text:0000000000003AB1                 nop     dword ptr [rax+00000000h]
.text:0000000000003AB8
.text:0000000000003AB8 loc_3AB8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003AB8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003AB8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000003ABD                 jnz     loc_3BD2
.text:0000000000003AC3                 test    dl, dl
.text:0000000000003AC5                 jnz     loc_3BD2
.text:0000000000003ACB
.text:0000000000003ACB loc_3ACB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000003ACB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003AD0                 test    rsi, rsi
.text:0000000000003AD3                 jz      short loc_3AE9
.text:0000000000003AD5                 mov     edx, ebx
.text:0000000000003AD7                 shr     dl, 5
.text:0000000000003ADA                 movzx   edx, dl
.text:0000000000003ADD                 mov     edx, [rsi+rdx*4]
.text:0000000000003AE0                 bt      edx, ebx
.text:0000000000003AE3                 jb      loc_3C33
.text:0000000000003AE9
.text:0000000000003AE9 loc_3AE9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003AE9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003AE9                 test    r10b, r10b
.text:0000000000003AEC                 jnz     loc_3C33
.text:0000000000003AF2                 xor     eax, 1
.text:0000000000003AF5                 add     rbp, 1
.text:0000000000003AF9                 and     eax, r8d
.text:0000000000003AFC
.text:0000000000003AFC loc_3AFC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000003AFC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000003AFC                 test    al, al
.text:0000000000003AFE                 jz      short loc_3B20
.text:0000000000003B00                 cmp     r13, r15
.text:0000000000003B03                 jbe     short loc_3B0A
.text:0000000000003B05                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003B0A
.text:0000000000003B0A loc_3B0A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000003B0A                 lea     rax, [r15+1]
.text:0000000000003B0E                 cmp     r13, rax
.text:0000000000003B11                 jbe     short loc_3B19
.text:0000000000003B13                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003B19
.text:0000000000003B19 loc_3B19:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003B19                 add     r15, 2
.text:0000000000003B1D                 xor     r8d, r8d
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003B20                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003B20                 cmp     r15, r13
.text:0000000000003B23                 jnb     short loc_3B29
.text:0000000000003B25                 mov     [r14+r15], bl
.text:0000000000003B29
.text:0000000000003B29 loc_3B29:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003B29                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000003B2E                 add     r15, 1
.text:0000000000003B32                 mov     eax, 0
.text:0000000000003B37                 test    r12b, r12b
.text:0000000000003B3A                 cmovz   edi, eax
.text:0000000000003B3D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003B42                 jmp     loc_3978
.text:0000000000003B42 ; ---------------------------------------------------------------------------
.text:0000000000003B47                 align 10h
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003B50                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003B50                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003B53
.text:0000000000003B53 loc_3B53:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B53                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003B53                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003B57                 cmp     eax, 2
.text:0000000000003B5A                 jz      loc_4118
.text:0000000000003B60                 cmp     eax, 5
.text:0000000000003B63                 jz      loc_40D8
.text:0000000000003B69                 cmp     eax, 2
.text:0000000000003B6C                 mov     ebx, 3Fh ; '?'
.text:0000000000003B71                 setz    dl
.text:0000000000003B74                 xor     r12d, r12d
.text:0000000000003B77                 xor     eax, eax
.text:0000000000003B79                 jmp     loc_3AB8
.text:0000000000003B79 ; ---------------------------------------------------------------------------
.text:0000000000003B7E                 align 20h
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003B80                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003B80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003B83
.text:0000000000003B83 loc_3B83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B83                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003B83                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003B88                 jz      loc_4090
.text:0000000000003B8E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003B93                 xor     edx, edx
.text:0000000000003B95                 xor     eax, eax
.text:0000000000003B97                 mov     ebx, 27h ; '''
.text:0000000000003B9C                 jmp     loc_3AB8
.text:0000000000003B9C ; ---------------------------------------------------------------------------
.text:0000000000003BA1                 align 8
.text:0000000000003BA8
.text:0000000000003BA8 loc_3BA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BA8                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003BA8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000003BAD                 mov     ebx, 74h ; 't'
.text:0000000000003BB2
.text:0000000000003BB2 loc_3BB2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003BB2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003BB2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BB7                 setz    al
.text:0000000000003BBA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003BBE                 jnz     loc_3D0E
.text:0000000000003BC4
.text:0000000000003BC4 loc_3BC4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003BC4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003BC4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003BC9                 jnz     short loc_3C30
.text:0000000000003BCB
.text:0000000000003BCB loc_3BCB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000003BCB                 mov     ebx, edx
.text:0000000000003BCD                 xor     r12d, r12d
.text:0000000000003BD0                 xor     eax, eax
.text:0000000000003BD2
.text:0000000000003BD2 loc_3BD2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003BD2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003BD2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003BD7                 jnz     loc_3ACB
.text:0000000000003BDD                 jmp     loc_3AE9
.text:0000000000003BDD ; ---------------------------------------------------------------------------
.text:0000000000003BE2                 align 8
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BE8                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003BE8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003BED                 mov     ebx, 62h ; 'b'
.text:0000000000003BF2                 jmp     short loc_3BC4
.text:0000000000003BF2 ; ---------------------------------------------------------------------------
.text:0000000000003BF4                 align 8
.text:0000000000003BF8
.text:0000000000003BF8 loc_3BF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BF8                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003BF8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003BFD                 jz      loc_3FD0
.text:0000000000003C03                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003C08                 jz      loc_3E20
.text:0000000000003C0E
.text:0000000000003C0E loc_3C0E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003C0E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C13                 jz      loc_3E20
.text:0000000000003C19                 cmp     [rsp+0E8h+n], 0
.text:0000000000003C1F                 jnz     loc_3FDB
.text:0000000000003C25                 mov     ebx, 5Ch ; '\'
.text:0000000000003C2A                 nop     word ptr [rax+rax+00h]
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003C30                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003C30                 xor     r12d, r12d
.text:0000000000003C33
.text:0000000000003C33 loc_3C33:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003C33                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003C33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C38                 setz    dl
.text:0000000000003C3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C40                 mov     eax, edx
.text:0000000000003C42                 jnz     loc_4498
.text:0000000000003C48                 mov     eax, r8d
.text:0000000000003C4B                 xor     eax, 1
.text:0000000000003C4E                 and     al, dl
.text:0000000000003C50                 jz      short loc_3C81
.text:0000000000003C52                 cmp     r13, r15
.text:0000000000003C55                 jbe     short loc_3C5C
.text:0000000000003C57                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003C5C
.text:0000000000003C5C loc_3C5C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003C5C                 lea     rdx, [r15+1]
.text:0000000000003C60                 cmp     r13, rdx
.text:0000000000003C63                 jbe     short loc_3C6B
.text:0000000000003C65                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003C6B
.text:0000000000003C6B loc_3C6B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003C6B                 lea     rdx, [r15+2]
.text:0000000000003C6F                 cmp     r13, rdx
.text:0000000000003C72                 jbe     short loc_3C7A
.text:0000000000003C74                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003C7A
.text:0000000000003C7A loc_3C7A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003C7A                 add     r15, 3
.text:0000000000003C7E                 mov     r8d, eax
.text:0000000000003C81
.text:0000000000003C81 loc_3C81:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003C81                 cmp     r13, r15
.text:0000000000003C84                 jbe     short loc_3C8B
.text:0000000000003C86                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003C8B
.text:0000000000003C8B loc_3C8B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003C8B                 add     r15, 1
.text:0000000000003C8F                 add     rbp, 1
.text:0000000000003C93                 jmp     loc_3B20
.text:0000000000003C93 ; ---------------------------------------------------------------------------
.text:0000000000003C98                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CA0                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003CA0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003CA5                 jnz     loc_3E73
.text:0000000000003CAB                 xor     edx, edx
.text:0000000000003CAD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003CB2                 jz      loc_3BCB
.text:0000000000003CB8                 add     rbp, 1
.text:0000000000003CBC                 jmp     loc_3978
.text:0000000000003CBC ; ---------------------------------------------------------------------------
.text:0000000000003CC1                 align 8
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CC8                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003CC8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003CCD                 setz    dl
.text:0000000000003CD0                 xor     eax, eax
.text:0000000000003CD2                 jmp     loc_3AB8
.text:0000000000003CD2 ; ---------------------------------------------------------------------------
.text:0000000000003CD7                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CE0                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003CE0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003CE5                 mov     ebx, 61h ; 'a'
.text:0000000000003CEA                 jmp     loc_3BC4
.text:0000000000003CEA ; ---------------------------------------------------------------------------
.text:0000000000003CEF                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 loc_3CF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CF0                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003CF0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003CF5                 setz    dl
.text:0000000000003CF8
.text:0000000000003CF8 loc_3CF8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003CF8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003CF8                 test    rbp, rbp
.text:0000000000003CFB                 jnz     loc_3AAC
.text:0000000000003D01
.text:0000000000003D01 loc_3D01:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003D01                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003D01                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003D06                 and     al, dl
.text:0000000000003D08                 jz      loc_3AB8
.text:0000000000003D0E
.text:0000000000003D0E loc_3D0E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003D0E                 mov     rbp, r11
.text:0000000000003D11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003D19                 jmp     loc_4419
.text:0000000000003D19 ; ---------------------------------------------------------------------------
.text:0000000000003D1E                 align 20h
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D20                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003D20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003D25                 setz    dl
.text:0000000000003D28                 xor     r12d, r12d
.text:0000000000003D2B                 jmp     short loc_3D01
.text:0000000000003D2B ; ---------------------------------------------------------------------------
.text:0000000000003D2D                 align 10h
.text:0000000000003D30
.text:0000000000003D30 loc_3D30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D30                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003D30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003D35                 mov     ebx, 20h ; ' '
.text:0000000000003D3A                 setz    dl
.text:0000000000003D3D                 jmp     short loc_3D01
.text:0000000000003D3D ; ---------------------------------------------------------------------------
.text:0000000000003D3F                 align 20h
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D40                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003D40                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003D45                 mov     ebx, 72h ; 'r'
.text:0000000000003D4A                 jmp     loc_3BB2
.text:0000000000003D4A ; ---------------------------------------------------------------------------
.text:0000000000003D4F                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D50                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003D50                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003D55                 mov     ebx, 66h ; 'f'
.text:0000000000003D5A                 jmp     loc_3BC4
.text:0000000000003D5A ; ---------------------------------------------------------------------------
.text:0000000000003D5F                 align 20h
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D60                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003D60                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003D65                 mov     ebx, 76h ; 'v'
.text:0000000000003D6A                 jmp     loc_3BC4
.text:0000000000003D6A ; ---------------------------------------------------------------------------
.text:0000000000003D6F                 align 10h
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D70                                         ; DATA XREF: .rodata:jpt_3A7E↓o
.text:0000000000003D70                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003D75                 mov     ebx, 6Eh ; 'n'
.text:0000000000003D7A                 jmp     loc_3BB2
.text:0000000000003D7A ; ---------------------------------------------------------------------------
.text:0000000000003D7F                 align 20h
.text:0000000000003D80
.text:0000000000003D80 def_3E0A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003D80                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003D80                                         ; DATA XREF: ...
.text:0000000000003D80                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003D83                 nop     dword ptr [rax+rax+00h]
.text:0000000000003D88
.text:0000000000003D88 def_3A7E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003D88                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003D88                                         ; DATA XREF: ...
.text:0000000000003D88                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003D8E                 jnz     loc_4138
.text:0000000000003D94                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003D99                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003D9E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003DA3                 call    ___ctype_b_loc
.text:0000000000003DA8                 mov     rcx, [rax]
.text:0000000000003DAB                 movzx   edx, bl
.text:0000000000003DAE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003DB4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003DBA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003DBF                 mov     edi, 1
.text:0000000000003DC4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003DC8                 and     ax, 4000h
.text:0000000000003DCC                 setnz   r12b
.text:0000000000003DD0                 setz    al
.text:0000000000003DD3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003DD7
.text:0000000000003DD7 loc_3DD7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003DD7                 test    al, al
.text:0000000000003DD9                 jnz     loc_4771
.text:0000000000003DDF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DE4                 setz    dl
.text:0000000000003DE7                 jmp     loc_3AB8
.text:0000000000003DE7 ; ---------------------------------------------------------------------------
.text:0000000000003DEC                 align 10h
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003DF0                 movzx   ebx, byte ptr [r9]
.text:0000000000003DF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003DF7                 ja      short def_3E0A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003DF9                 lea     rcx, jpt_3E0A
.text:0000000000003E00                 movzx   edx, bl
.text:0000000000003E03                 movsxd  rax, ds:(jpt_3E0A - 7508h)[rcx+rdx*4]
.text:0000000000003E07                 add     rax, rcx
.text:0000000000003E0A                 jmp     rax             ; switch jump
.text:0000000000003E0A ; ---------------------------------------------------------------------------
.text:0000000000003E0C                 align 10h
.text:0000000000003E10
.text:0000000000003E10 loc_3E10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E10                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003E10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003E13                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003E18                 jnz     loc_3C0E
.text:0000000000003E1E                 xchg    ax, ax
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003E20                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003E20                 mov     edx, 5Ch ; '\'
.text:0000000000003E25                 mov     ebx, 5Ch ; '\'
.text:0000000000003E2A                 jmp     loc_3BC4
.text:0000000000003E2A ; ---------------------------------------------------------------------------
.text:0000000000003E2F                 align 10h
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E30                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003E30                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003E35                 xor     r10d, r10d
.text:0000000000003E38                 mov     ebx, 66h ; 'f'
.text:0000000000003E3D                 jmp     loc_3BC4
.text:0000000000003E3D ; ---------------------------------------------------------------------------
.text:0000000000003E42                 align 8
.text:0000000000003E48
.text:0000000000003E48 loc_3E48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E48                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003E48                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003E4D                 xor     r10d, r10d
.text:0000000000003E50                 mov     ebx, 6Eh ; 'n'
.text:0000000000003E55                 jmp     loc_3BB2
.text:0000000000003E55 ; ---------------------------------------------------------------------------
.text:0000000000003E5A                 align 20h
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E60                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003E60                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003E65                 jmp     loc_3C30
.text:0000000000003E65 ; ---------------------------------------------------------------------------
.text:0000000000003E6A                 align 10h
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003E70                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003E70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003E73
.text:0000000000003E73 loc_3E73:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003E73                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E78                 setz    dl
.text:0000000000003E7B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E80                 jnz     loc_4A1A
.text:0000000000003E86                 mov     eax, r8d
.text:0000000000003E89                 mov     rcx, r15
.text:0000000000003E8C                 xor     eax, 1
.text:0000000000003E8F                 and     al, dl
.text:0000000000003E91                 jz      short loc_3EC0
.text:0000000000003E93                 cmp     r13, r15
.text:0000000000003E96                 jbe     short loc_3E9D
.text:0000000000003E98                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003E9D
.text:0000000000003E9D loc_3E9D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003E9D                 lea     rcx, [r15+1]
.text:0000000000003EA1                 cmp     r13, rcx
.text:0000000000003EA4                 jbe     short loc_3EAC
.text:0000000000003EA6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003EAC
.text:0000000000003EAC loc_3EAC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003EAC                 lea     rcx, [r15+2]
.text:0000000000003EB0                 cmp     r13, rcx
.text:0000000000003EB3                 ja      loc_44E9
.text:0000000000003EB9
.text:0000000000003EB9 loc_3EB9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003EB9                 lea     rcx, [r15+3]
.text:0000000000003EBD                 mov     r8d, eax
.text:0000000000003EC0
.text:0000000000003EC0 loc_3EC0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003EC0                 cmp     r13, rcx
.text:0000000000003EC3                 jbe     short loc_3ECA
.text:0000000000003EC5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003ECA
.text:0000000000003ECA loc_3ECA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003ECA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003ECF                 lea     r15, [rcx+1]
.text:0000000000003ED3                 jz      loc_44D9
.text:0000000000003ED9                 lea     rax, [rbp+1]
.text:0000000000003EDD                 cmp     rax, r11
.text:0000000000003EE0                 jnb     short loc_3EFB
.text:0000000000003EE2                 mov     rax, [rsp+0E8h+s]
.text:0000000000003EE7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003EEC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003EF0                 sub     eax, 30h ; '0'
.text:0000000000003EF3                 cmp     al, 9
.text:0000000000003EF5                 jbe     loc_4729
.text:0000000000003EFB
.text:0000000000003EFB loc_3EFB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003EFB                 mov     eax, r12d
.text:0000000000003EFE                 mov     ebx, 30h ; '0'
.text:0000000000003F03                 xor     r12d, r12d
.text:0000000000003F06                 jmp     loc_3AB8
.text:0000000000003F06 ; ---------------------------------------------------------------------------
.text:0000000000003F0B                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F10                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003F10                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003F15                 mov     r12d, r10d
.text:0000000000003F18                 setz    dl
.text:0000000000003F1B                 xor     r10d, r10d
.text:0000000000003F1E                 xor     eax, eax
.text:0000000000003F20                 jmp     loc_3AB8
.text:0000000000003F20 ; ---------------------------------------------------------------------------
.text:0000000000003F25                 align 8
.text:0000000000003F28
.text:0000000000003F28 loc_3F28:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F28                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003F28                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003F2D                 setz    dl
.text:0000000000003F30                 xor     r10d, r10d
.text:0000000000003F33                 jmp     loc_3CF8
.text:0000000000003F33 ; ---------------------------------------------------------------------------
.text:0000000000003F38                 align 20h
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F40                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003F40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003F45                 setz    dl
.text:0000000000003F48                 xor     r10d, r10d
.text:0000000000003F4B                 xor     r12d, r12d
.text:0000000000003F4E                 jmp     loc_3D01
.text:0000000000003F4E ; ---------------------------------------------------------------------------
.text:0000000000003F53                 align 8
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F58                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003F58                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003F5D                 mov     r12d, r10d
.text:0000000000003F60                 mov     ebx, 20h ; ' '
.text:0000000000003F65                 setz    dl
.text:0000000000003F68                 xor     r10d, r10d
.text:0000000000003F6B                 jmp     loc_3D01
.text:0000000000003F70 ; ---------------------------------------------------------------------------
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F70                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003F70                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003F75                 xor     r10d, r10d
.text:0000000000003F78                 mov     ebx, 72h ; 'r'
.text:0000000000003F7D                 jmp     loc_3BB2
.text:0000000000003F7D ; ---------------------------------------------------------------------------
.text:0000000000003F82                 align 8
.text:0000000000003F88
.text:0000000000003F88 loc_3F88:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F88                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003F88                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003F8D                 jmp     loc_3C30
.text:0000000000003F8D ; ---------------------------------------------------------------------------
.text:0000000000003F92                 align 8
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F98                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003F98                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003F9D                 xor     r10d, r10d
.text:0000000000003FA0                 mov     ebx, 74h ; 't'
.text:0000000000003FA5                 jmp     loc_3BB2
.text:0000000000003FA5 ; ---------------------------------------------------------------------------
.text:0000000000003FAA                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003FB0                                         ; DATA XREF: .rodata:jpt_3E0A↓o
.text:0000000000003FB0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003FB5                 jmp     loc_3C30
.text:0000000000003FB5 ; ---------------------------------------------------------------------------
.text:0000000000003FBA                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003FC0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003FC0                 xor     r10d, r10d
.text:0000000000003FC3                 jmp     loc_3A60
.text:0000000000003FC3 ; ---------------------------------------------------------------------------
.text:0000000000003FC8                 align 10h
.text:0000000000003FD0
.text:0000000000003FD0 loc_3FD0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003FD0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003FD5                 jnz     loc_4940
.text:0000000000003FDB
.text:0000000000003FDB loc_3FDB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003FDB                 add     rbp, 1
.text:0000000000003FDF                 mov     eax, r8d
.text:0000000000003FE2                 xor     r12d, r12d
.text:0000000000003FE5                 mov     ebx, 5Ch ; '\'
.text:0000000000003FEA                 jmp     loc_3AFC
.text:0000000000003FEA ; ---------------------------------------------------------------------------
.text:0000000000003FEF                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003FF0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003FF5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003FFA                 mov     r12d, r8d
.text:0000000000003FFD                 mov     rbp, r11
.text:0000000000004000                 setz    dl
.text:0000000000004003                 mov     eax, ebx
.text:0000000000004005                 test    r15, r15
.text:0000000000004008                 setz    cl
.text:000000000000400B                 and     eax, edx
.text:000000000000400D                 and     al, cl
.text:000000000000400F                 jnz     loc_4A76
.text:0000000000004015                 mov     eax, ebx
.text:0000000000004017                 xor     eax, 1
.text:000000000000401A                 and     dl, al
.text:000000000000401C                 jz      loc_498C
.text:0000000000004022                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004027                 jz      loc_498A
.text:000000000000402D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004032                 jnz     loc_4A2D
.text:0000000000004038                 test    r13, r13
.text:000000000000403B                 setz    al
.text:000000000000403E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004044                 setnz   dl
.text:0000000000004047                 and     al, dl
.text:0000000000004049                 jz      loc_4A6C
.text:000000000000404F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004054
.text:0000000000004054 loc_4054:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004054                 lea     rbx, asc_7285   ; "'"
.text:000000000000405B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000405F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004067                 mov     r15d, 1
.text:000000000000406D                 mov     [rsp+0E8h+n], 1
.text:0000000000004076                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000407B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004080                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004084                 jmp     loc_3963
.text:0000000000004084 ; ---------------------------------------------------------------------------
.text:0000000000004089                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004090                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004095                 jnz     loc_4940
.text:000000000000409B                 test    r13, r13
.text:000000000000409E                 jz      loc_44A0
.text:00000000000040A4                 xor     edx, edx
.text:00000000000040A6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000040AC                 jnz     loc_44A0
.text:00000000000040B2
.text:00000000000040B2 loc_40B2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000040B2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000040B2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000040B7                 add     r15, 3
.text:00000000000040BB                 xor     eax, eax
.text:00000000000040BD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000040C2                 xor     r8d, r8d
.text:00000000000040C5                 mov     r13, rdx
.text:00000000000040C8                 mov     ebx, 27h ; '''
.text:00000000000040CD                 jmp     loc_3AE9
.text:00000000000040CD ; ---------------------------------------------------------------------------
.text:00000000000040D2                 align 8
.text:00000000000040D8
.text:00000000000040D8 loc_40D8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000040D8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000040DD                 jz      short loc_4100
.text:00000000000040DF                 lea     rcx, [rbp+2]
.text:00000000000040E3                 cmp     rcx, r11
.text:00000000000040E6                 jnb     short loc_4100
.text:00000000000040E8                 mov     rax, [rsp+0E8h+s]
.text:00000000000040ED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000040F2                 jz      loc_4882
.text:00000000000040F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004100                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004100                 xor     edx, edx
.text:0000000000004102                 xor     r12d, r12d
.text:0000000000004105                 xor     eax, eax
.text:0000000000004107                 mov     ebx, 3Fh ; '?'
.text:000000000000410C                 jmp     loc_3AB8
.text:000000000000410C ; ---------------------------------------------------------------------------
.text:0000000000004111                 align 8
.text:0000000000004118
.text:0000000000004118 loc_4118:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004118                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000411D                 jnz     loc_4940
.text:0000000000004123                 xor     r12d, r12d
.text:0000000000004126                 xor     eax, eax
.text:0000000000004128                 mov     ebx, 3Fh ; '?'
.text:000000000000412D                 jmp     loc_3AE9
.text:000000000000412D ; ---------------------------------------------------------------------------
.text:0000000000004132                 align 8
.text:0000000000004138
.text:0000000000004138 loc_4138:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004138                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004140                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004144                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004150                 mov     [rsp+0E8h+ps], rax
.text:0000000000004155                 jnz     short loc_4184
.text:0000000000004157                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000415C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004161                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004166                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000416B                 call    _strlen
.text:0000000000004170                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004176                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000417C                 mov     r11, rax
.text:000000000000417F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004184
.text:0000000000004184 loc_4184:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004184                 lea     rax, [rsp+0E8h+wc]
.text:000000000000418C                 xor     ecx, ecx
.text:000000000000418E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004192                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004197                 mov     rbx, rcx
.text:000000000000419A                 mov     [rsp+0E8h+var_60], r9
.text:00000000000041A2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000041A7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000041AC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000041B4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000041B9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000041BE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000041C3
.text:00000000000041C3 loc_41C3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000041C3                 mov     rax, [rsp+0E8h+s]
.text:00000000000041C8                 lea     r14, [rbp+rbx+0]
.text:00000000000041CD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000041D2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000041D7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000041DC                 lea     r13, [rax+r14]
.text:00000000000041E0                 sub     rdx, r14
.text:00000000000041E3                 mov     rsi, r13
.text:00000000000041E6                 call    rpl_mbrtowc
.text:00000000000041EB                 test    rax, rax
.text:00000000000041EE                 mov     r15, rax
.text:00000000000041F1                 jz      short loc_4241
.text:00000000000041F3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000041F7                 jz      loc_4815
.text:00000000000041FD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004201                 jz      loc_47A1
.text:0000000000004207                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000420C                 setz    al
.text:000000000000420F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004213                 jnz     loc_43B0
.text:0000000000004219
.text:0000000000004219 loc_4219:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004219                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004219                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004220                 call    _iswprint
.text:0000000000004225                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000422A                 test    eax, eax
.text:000000000000422C                 mov     eax, 0
.text:0000000000004231                 cmovz   r12d, eax
.text:0000000000004235                 add     rbx, r15
.text:0000000000004238                 call    _mbsinit
.text:000000000000423D                 test    eax, eax
.text:000000000000423F                 jz      short loc_41C3
.text:0000000000004241
.text:0000000000004241 loc_4241:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004241                 mov     edx, r12d
.text:0000000000004244                 mov     rdi, rbx
.text:0000000000004247                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000424D                 xor     edx, 1
.text:0000000000004250                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004255                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000425B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000425F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004267                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000426C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004271                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004276
.text:0000000000004276 loc_4276:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004276                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004276                 cmp     rdi, 1
.text:000000000000427A                 jbe     loc_487B
.text:0000000000004280
.text:0000000000004280 loc_4280:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004280                 mov     rcx, rdi
.text:0000000000004283                 xor     esi, esi
.text:0000000000004285                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000428B                 add     rcx, rbp
.text:000000000000428E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004293                 jmp     loc_434E
.text:0000000000004293 ; ---------------------------------------------------------------------------
.text:0000000000004298                 align 20h
.text:00000000000042A0
.text:00000000000042A0 loc_42A0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000042A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000042A5                 setz    al
.text:00000000000042A8                 test    r9b, r9b
.text:00000000000042AB                 jnz     loc_4760
.text:00000000000042B1                 mov     esi, r8d
.text:00000000000042B4                 xor     esi, 1
.text:00000000000042B7                 and     al, sil
.text:00000000000042BA                 jz      short loc_42EB
.text:00000000000042BC                 cmp     r13, r15
.text:00000000000042BF                 jbe     short loc_42C6
.text:00000000000042C1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000042C6
.text:00000000000042C6 loc_42C6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000042C6                 lea     rsi, [r15+1]
.text:00000000000042CA                 cmp     r13, rsi
.text:00000000000042CD                 jbe     short loc_42D5
.text:00000000000042CF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000042D5
.text:00000000000042D5 loc_42D5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000042D5                 lea     rsi, [r15+2]
.text:00000000000042D9                 cmp     r13, rsi
.text:00000000000042DC                 jbe     short loc_42E4
.text:00000000000042DE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000042E4
.text:00000000000042E4 loc_42E4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000042E4                 add     r15, 3
.text:00000000000042E8                 mov     r8d, eax
.text:00000000000042EB
.text:00000000000042EB loc_42EB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000042EB                 cmp     r13, r15
.text:00000000000042EE                 jbe     short loc_42F5
.text:00000000000042F0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000042F5
.text:00000000000042F5 loc_42F5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000042F5                 lea     rax, [r15+1]
.text:00000000000042F9                 cmp     r13, rax
.text:00000000000042FC                 jbe     short loc_430B
.text:00000000000042FE                 mov     eax, ebx
.text:0000000000004300                 shr     al, 6
.text:0000000000004303                 add     eax, 30h ; '0'
.text:0000000000004306                 mov     [r14+r15+1], al
.text:000000000000430B
.text:000000000000430B loc_430B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000430B                 lea     rax, [r15+2]
.text:000000000000430F                 cmp     r13, rax
.text:0000000000004312                 jbe     short loc_4324
.text:0000000000004314                 mov     eax, ebx
.text:0000000000004316                 shr     al, 3
.text:0000000000004319                 and     eax, 7
.text:000000000000431C                 add     eax, 30h ; '0'
.text:000000000000431F                 mov     [r14+r15+2], al
.text:0000000000004324
.text:0000000000004324 loc_4324:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004324                 and     ebx, 7
.text:0000000000004327                 add     rbp, 1
.text:000000000000432B                 add     r15, 3
.text:000000000000432F                 add     ebx, 30h ; '0'
.text:0000000000004332                 cmp     rbp, rcx
.text:0000000000004335                 jnb     loc_3B20
.text:000000000000433B                 mov     esi, edx
.text:000000000000433D
.text:000000000000433D loc_433D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000433D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000433D                 cmp     r13, r15
.text:0000000000004340                 jbe     short loc_4346
.text:0000000000004342                 mov     [r14+r15], bl
.text:0000000000004346
.text:0000000000004346 loc_4346:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004346                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000434A                 add     r15, 1
.text:000000000000434E
.text:000000000000434E loc_434E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000434E                 test    dl, dl
.text:0000000000004350                 jnz     loc_42A0
.text:0000000000004356                 mov     eax, esi
.text:0000000000004358                 xor     eax, 1
.text:000000000000435B                 and     eax, r8d
.text:000000000000435E                 test    r10b, r10b
.text:0000000000004361                 jz      short loc_4371
.text:0000000000004363                 cmp     r13, r15
.text:0000000000004366                 jbe     short loc_436D
.text:0000000000004368                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000436D
.text:000000000000436D loc_436D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000436D                 add     r15, 1
.text:0000000000004371
.text:0000000000004371 loc_4371:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004371                 add     rbp, 1
.text:0000000000004375                 cmp     rbp, rcx
.text:0000000000004378                 jnb     loc_3AFC
.text:000000000000437E                 test    al, al
.text:0000000000004380                 jz      loc_477E
.text:0000000000004386                 cmp     r13, r15
.text:0000000000004389                 jbe     short loc_4390
.text:000000000000438B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004390                 lea     rax, [r15+1]
.text:0000000000004394                 cmp     r13, rax
.text:0000000000004397                 jbe     short loc_439F
.text:0000000000004399                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000439F
.text:000000000000439F loc_439F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000439F                 add     r15, 2
.text:00000000000043A3                 xor     r10d, r10d
.text:00000000000043A6                 xor     r8d, r8d
.text:00000000000043A9                 jmp     short loc_433D
.text:00000000000043A9 ; ---------------------------------------------------------------------------
.text:00000000000043AB                 align 10h
.text:00000000000043B0
.text:00000000000043B0 loc_43B0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000043B0                 cmp     r15, 1
.text:00000000000043B4                 jz      loc_4219
.text:00000000000043BA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000043BF                 lea     rcx, [rdi+r15]
.text:00000000000043C3                 lea     rdx, [rdi+r14+1]
.text:00000000000043C8                 lea     r8, [rcx+r14]
.text:00000000000043CC                 jmp     short loc_43DD
.text:00000000000043CC ; ---------------------------------------------------------------------------
.text:00000000000043CE                 align 10h
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000043D0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000043D0                 add     rdx, 1
.text:00000000000043D4                 cmp     r8, rdx
.text:00000000000043D7                 jz      loc_4219
.text:00000000000043DD
.text:00000000000043DD loc_43DD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000043DD                 movzx   ecx, byte ptr [rdx]
.text:00000000000043E0                 sub     ecx, 5Bh ; '['
.text:00000000000043E3                 cmp     cl, 21h ; '!'
.text:00000000000043E6                 ja      short loc_43D0
.text:00000000000043E8                 mov     esi, 1
.text:00000000000043ED                 shl     rsi, cl
.text:00000000000043F0                 mov     rcx, rsi
.text:00000000000043F3                 mov     rsi, 20000002Bh
.text:00000000000043FD                 test    rcx, rsi
.text:0000000000004400                 jz      short loc_43D0
.text:0000000000004402                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004407                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000440C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004411                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004419
.text:0000000000004419 loc_4419:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004419                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004419                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000441E                 jz      short loc_4430
.text:0000000000004420                 test    al, al
.text:0000000000004422                 mov     eax, 4
.text:0000000000004427                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000442C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004430
.text:0000000000004430 loc_4430:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004430                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004430                 sub     rsp, 8
.text:0000000000004434                 mov     rcx, rbp
.text:0000000000004437                 mov     rsi, r13
.text:000000000000443A                 push    [rsp+0F0h+var_88]
.text:000000000000443E                 push    [rsp+0F8h+var_80]
.text:0000000000004442                 mov     rdi, r14
.text:0000000000004445                 push    0
.text:0000000000004447                 mov     r9d, [rsp+108h+var_70]
.text:000000000000444F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004454                 mov     rdx, [rsp+108h+s]
.text:0000000000004459                 and     r9d, 0FFFFFFFDh
.text:000000000000445D                 call    quotearg_buffer_restyled
.text:0000000000004462                 add     rsp, 20h
.text:0000000000004466                 mov     r15, rax
.text:0000000000004469
.text:0000000000004469 loc_4469:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004469                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004469                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004471                 xor     rbx, fs:28h
.text:000000000000447A                 mov     rax, r15
.text:000000000000447D                 jnz     loc_4A83
.text:0000000000004483                 add     rsp, 0B8h
.text:000000000000448A                 pop     rbx
.text:000000000000448B                 pop     rbp
.text:000000000000448C                 pop     r12
.text:000000000000448E                 pop     r13
.text:0000000000004490                 pop     r14
.text:0000000000004492                 pop     r15
.text:0000000000004494                 retn
.text:0000000000004494 ; ---------------------------------------------------------------------------
.text:0000000000004495                 align 8
.text:0000000000004498
.text:0000000000004498 loc_4498:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004498                 mov     rbp, r11
.text:000000000000449B                 jmp     loc_4419
.text:00000000000044A0 ; ---------------------------------------------------------------------------
.text:00000000000044A0
.text:00000000000044A0 loc_44A0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000044A0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000044A0                 cmp     r13, r15
.text:00000000000044A3                 jbe     short loc_44AA
.text:00000000000044A5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000044AA
.text:00000000000044AA loc_44AA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000044AA                 lea     rax, [r15+1]
.text:00000000000044AE                 cmp     r13, rax
.text:00000000000044B1                 jbe     short loc_44B9
.text:00000000000044B3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000044B9
.text:00000000000044B9 loc_44B9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000044B9                 lea     rax, [r15+2]
.text:00000000000044BD                 cmp     r13, rax
.text:00000000000044C0                 jbe     loc_4AB2
.text:00000000000044C6                 mov     rdx, r13
.text:00000000000044C9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000044CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000044D4                 jmp     loc_40B2
.text:00000000000044D9 ; ---------------------------------------------------------------------------
.text:00000000000044D9
.text:00000000000044D9 loc_44D9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000044D9                 mov     eax, r12d
.text:00000000000044DC                 mov     ebx, 30h ; '0'
.text:00000000000044E1                 xor     r12d, r12d
.text:00000000000044E4                 jmp     loc_3AE9
.text:00000000000044E9 ; ---------------------------------------------------------------------------
.text:00000000000044E9
.text:00000000000044E9 loc_44E9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000044E9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000044EF                 jmp     loc_3EB9
.text:00000000000044F4 ; ---------------------------------------------------------------------------
.text:00000000000044F4
.text:00000000000044F4 loc_44F4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000044F4                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:00000000000044F4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000044F6                 jnz     loc_3923        ; jumptable 00000000000121F1 case 1
.text:00000000000044FC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004501
.text:0000000000004501 loc_4501:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004501                 test    r13, r13
.text:0000000000004504                 jnz     loc_4A9A
.text:000000000000450A                 lea     rax, asc_7285   ; "'"
.text:0000000000004511                 mov     [rsp+0E8h+var_98], 0
.text:000000000000451A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000451F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004524                 xor     r12d, r12d
.text:0000000000004527                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000452C                 mov     [rsp+0E8h+n], 1
.text:0000000000004535                 mov     [rsp+0E8h+s2], rax
.text:000000000000453A                 mov     r15d, 1
.text:0000000000004540                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004548                 jmp     loc_3963
.text:0000000000004548 ; ---------------------------------------------------------------------------
.text:000000000000454D                 align 10h
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004550                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:0000000000004550                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004552                 jnz     loc_494D
.text:0000000000004558                 test    r13, r13
.text:000000000000455B                 jz      loc_4786
.text:0000000000004561                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004565                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000456A                 xor     r12d, r12d
.text:000000000000456D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004572                 mov     [rsp+0E8h+var_98], 0
.text:000000000000457B
.text:000000000000457B loc_457B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000457B                 lea     rax, unk_7283
.text:0000000000004582                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004587                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000458C                 mov     [rsp+0E8h+n], 1
.text:0000000000004595                 mov     r15d, 1
.text:000000000000459B                 mov     [rsp+0E8h+s2], rax
.text:00000000000045A0                 jmp     loc_3963
.text:00000000000045A5 ; ---------------------------------------------------------------------------
.text:00000000000045A5
.text:00000000000045A5 loc_45A5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000045A5                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:00000000000045A5                 lea     rax, unk_7283   ; jumptable 00000000000121F1 case 6
.text:00000000000045AC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045B1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000045B6                 xor     r12d, r12d
.text:00000000000045B9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000045C2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000045C7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000045CC                 mov     [rsp+0E8h+n], 1
.text:00000000000045D5                 xor     r15d, r15d
.text:00000000000045D8                 mov     [rsp+0E8h+s2], rax
.text:00000000000045DD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000045E5                 jmp     loc_3963
.text:00000000000045EA ; ---------------------------------------------------------------------------
.text:00000000000045EA
.text:00000000000045EA loc_45EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000045EA                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:00000000000045EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000045EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000045F4                 xor     r12d, r12d
.text:00000000000045F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004600                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004605                 xor     r15d, r15d
.text:0000000000004608                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000460D                 mov     [rsp+0E8h+n], 0
.text:0000000000004616                 mov     [rsp+0E8h+s2], 0
.text:000000000000461F                 jmp     loc_3963
.text:0000000000004624 ; ---------------------------------------------------------------------------
.text:0000000000004624
.text:0000000000004624 loc_4624:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004624                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:0000000000004624                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004629                 jz      short loc_4681
.text:000000000000462B                 lea     rsi, asc_7287   ; "`"
.text:0000000000004632                 xor     edi, edi        ; domainname
.text:0000000000004634                 mov     edx, 5          ; category
.text:0000000000004639                 call    _dcgettext
.text:000000000000463E                 mov     rcx, rax
.text:0000000000004641                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004646                 lea     rax, asc_7287   ; "`"
.text:000000000000464D                 cmp     rcx, rax
.text:0000000000004650                 jz      loc_49EE
.text:0000000000004656
.text:0000000000004656 loc_4656:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004656                 lea     rsi, asc_7285   ; "'"
.text:000000000000465D                 xor     edi, edi        ; domainname
.text:000000000000465F                 mov     edx, 5          ; category
.text:0000000000004664                 call    _dcgettext
.text:0000000000004669                 mov     rcx, rax
.text:000000000000466C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004671                 lea     rax, asc_7285   ; "'"
.text:0000000000004678                 cmp     rcx, rax
.text:000000000000467B                 jz      loc_4A04
.text:0000000000004681
.text:0000000000004681 loc_4681:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004681                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004681                 xor     r15d, r15d
.text:0000000000004684                 test    ebx, ebx
.text:0000000000004686                 jz      loc_484D
.text:000000000000468C
.text:000000000000468C loc_468C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000468C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000468C                 test    ebx, ebx
.text:000000000000468E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004693                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004698                 xor     r12d, r12d
.text:000000000000469B                 mov     rdi, rbx        ; s
.text:000000000000469E                 call    _strlen
.text:00000000000046A3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000046A8                 mov     [rsp+0E8h+n], rax
.text:00000000000046AD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000046B2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000046B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000046C0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000046C5                 jmp     loc_3963
.text:00000000000046CA ; ---------------------------------------------------------------------------
.text:00000000000046CA
.text:00000000000046CA loc_46CA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000046CA                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:00000000000046CA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000046CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000046D4                 xor     r12d, r12d
.text:00000000000046D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000046E0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000046E5                 xor     r15d, r15d
.text:00000000000046E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000046ED                 mov     [rsp+0E8h+n], 0
.text:00000000000046F6                 mov     [rsp+0E8h+s2], 0
.text:00000000000046FF                 jmp     loc_3963
.text:0000000000004704 ; ---------------------------------------------------------------------------
.text:0000000000004704
.text:0000000000004704 loc_4704:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004704                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:0000000000004704                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004709                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000470E                 xor     r12d, r12d
.text:0000000000004711                 mov     [rsp+0E8h+var_98], 0
.text:000000000000471A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000471F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004724                 jmp     loc_3943
.text:0000000000004729 ; ---------------------------------------------------------------------------
.text:0000000000004729
.text:0000000000004729 loc_4729:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004729                 cmp     r13, r15
.text:000000000000472C                 jbe     short loc_4733
.text:000000000000472E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004733
.text:0000000000004733 loc_4733:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004733                 lea     rax, [rcx+2]
.text:0000000000004737                 cmp     r13, rax
.text:000000000000473A                 jbe     short loc_4742
.text:000000000000473C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004742
.text:0000000000004742 loc_4742:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004742                 mov     eax, r12d
.text:0000000000004745                 lea     r15, [rcx+3]
.text:0000000000004749                 xor     r12d, r12d
.text:000000000000474C                 mov     ebx, 30h ; '0'
.text:0000000000004751                 jmp     loc_3AB8
.text:0000000000004751 ; ---------------------------------------------------------------------------
.text:0000000000004756                 align 20h
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004760                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004765                 mov     rbp, r11
.text:0000000000004768                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000476C                 jmp     loc_4419
.text:0000000000004771 ; ---------------------------------------------------------------------------
.text:0000000000004771
.text:0000000000004771 loc_4771:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004771                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004776                 xor     r12d, r12d
.text:0000000000004779                 jmp     loc_4280
.text:000000000000477E ; ---------------------------------------------------------------------------
.text:000000000000477E
.text:000000000000477E loc_477E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000477E                 xor     r10d, r10d
.text:0000000000004781                 jmp     loc_433D
.text:0000000000004786 ; ---------------------------------------------------------------------------
.text:0000000000004786
.text:0000000000004786 loc_4786:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004786                 mov     [rsp+0E8h+var_98], 0
.text:000000000000478F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004794                 xor     r12d, r12d
.text:0000000000004797                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000479C                 jmp     loc_457B
.text:00000000000047A1 ; ---------------------------------------------------------------------------
.text:00000000000047A1
.text:00000000000047A1 loc_47A1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000047A1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000047A6                 mov     rsi, r14
.text:00000000000047A9                 mov     rcx, r13
.text:00000000000047AC                 mov     rax, rbx
.text:00000000000047AF                 mov     rdi, rbx
.text:00000000000047B2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000047B8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000047BD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000047C5                 cmp     rsi, r11
.text:00000000000047C8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000047CE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000047D6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000047DB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000047E0                 jnb     short loc_4808
.text:00000000000047E2                 cmp     byte ptr [rcx], 0
.text:00000000000047E5                 jnz     short loc_47F7
.text:00000000000047E7                 jmp     short loc_4808
.text:00000000000047E7 ; ---------------------------------------------------------------------------
.text:00000000000047E9                 align 10h
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000047F0                 cmp     byte ptr [r9+rax], 0
.text:00000000000047F5                 jz      short loc_4805
.text:00000000000047F7
.text:00000000000047F7 loc_47F7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000047F7                 add     rax, 1
.text:00000000000047FB                 lea     rdx, [rbp+rax+0]
.text:0000000000004800                 cmp     r11, rdx
.text:0000000000004803                 ja      short loc_47F0
.text:0000000000004805
.text:0000000000004805 loc_4805:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004805                 mov     rdi, rax
.text:0000000000004808
.text:0000000000004808 loc_4808:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004808                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004808                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000480D                 xor     r12d, r12d
.text:0000000000004810                 jmp     loc_4276
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004815                 mov     rdi, rbx
.text:0000000000004818                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000481E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004823                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004829                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004831                 xor     r12d, r12d
.text:0000000000004834                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004839                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000483E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004843                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004848                 jmp     loc_4276
.text:000000000000484D ; ---------------------------------------------------------------------------
.text:000000000000484D
.text:000000000000484D loc_484D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000484D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004852                 movzx   eax, byte ptr [rdx]
.text:0000000000004855                 test    al, al
.text:0000000000004857                 jz      loc_468C
.text:000000000000485D                 nop     dword ptr [rax]
.text:0000000000004860
.text:0000000000004860 loc_4860:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004860                 cmp     r13, r15
.text:0000000000004863                 jbe     short loc_4869
.text:0000000000004865                 mov     [r14+r15], al
.text:0000000000004869
.text:0000000000004869 loc_4869:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004869                 add     r15, 1
.text:000000000000486D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004872                 test    al, al
.text:0000000000004874                 jnz     short loc_4860
.text:0000000000004876                 jmp     loc_468C
.text:000000000000487B ; ---------------------------------------------------------------------------
.text:000000000000487B
.text:000000000000487B loc_487B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000487B                 mov     eax, edx
.text:000000000000487D                 jmp     loc_3DD7
.text:0000000000004882 ; ---------------------------------------------------------------------------
.text:0000000000004882
.text:0000000000004882 loc_4882:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004882                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004886                 cmp     bl, 3Eh ; '>'
.text:0000000000004889                 ja      loc_4100
.text:000000000000488F                 mov     rax, 7000A38200000000h
.text:0000000000004899                 bt      rax, rbx
.text:000000000000489D                 jnb     loc_4100
.text:00000000000048A3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000048A8                 jnz     loc_4A92
.text:00000000000048AE                 cmp     r13, r15
.text:00000000000048B1                 jbe     short loc_48B8
.text:00000000000048B3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000048B8
.text:00000000000048B8 loc_48B8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000048B8                 lea     rax, [r15+1]
.text:00000000000048BC                 cmp     r13, rax
.text:00000000000048BF                 jbe     short loc_48C7
.text:00000000000048C1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000048C7
.text:00000000000048C7 loc_48C7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000048C7                 lea     rax, [r15+2]
.text:00000000000048CB                 cmp     r13, rax
.text:00000000000048CE                 jbe     short loc_48D6
.text:00000000000048D0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000048D6
.text:00000000000048D6 loc_48D6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000048D6                 lea     rax, [r15+3]
.text:00000000000048DA                 cmp     r13, rax
.text:00000000000048DD                 jbe     short loc_48E5
.text:00000000000048DF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000048E5
.text:00000000000048E5 loc_48E5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000048E5                 add     r15, 4
.text:00000000000048E9                 xor     edx, edx
.text:00000000000048EB                 xor     r12d, r12d
.text:00000000000048EE                 xor     eax, eax
.text:00000000000048F0                 mov     rbp, rcx
.text:00000000000048F3                 jmp     loc_3AB8
.text:00000000000048F8 ; ---------------------------------------------------------------------------
.text:00000000000048F8
.text:00000000000048F8 loc_48F8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000048F8                                         ; DATA XREF: .rodata:jpt_3921↓o
.text:00000000000048F8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000048FA                 jz      loc_4A88
.text:0000000000004900                 lea     rax, asc_7285   ; "'"
.text:0000000000004907                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000490C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004911                 xor     r12d, r12d
.text:0000000000004914                 mov     [rsp+0E8h+var_98], 0
.text:000000000000491D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004922                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004927                 mov     [rsp+0E8h+n], 1
.text:0000000000004930                 xor     r15d, r15d
.text:0000000000004933                 mov     [rsp+0E8h+s2], rax
.text:0000000000004938                 jmp     loc_3963
.text:0000000000004938 ; ---------------------------------------------------------------------------
.text:000000000000493D                 align 20h
.text:0000000000004940
.text:0000000000004940 loc_4940:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004940                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004940                 mov     rbp, r11
.text:0000000000004943                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004948                 jmp     loc_4419
.text:000000000000494D ; ---------------------------------------------------------------------------
.text:000000000000494D
.text:000000000000494D loc_494D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000494D                 lea     rax, unk_7283
.text:0000000000004954                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004959                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000495E                 xor     r12d, r12d
.text:0000000000004961                 mov     [rsp+0E8h+var_98], 0
.text:000000000000496A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000496F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004974                 mov     [rsp+0E8h+n], 1
.text:000000000000497D                 xor     r15d, r15d
.text:0000000000004980                 mov     [rsp+0E8h+s2], rax
.text:0000000000004985                 jmp     loc_3963
.text:000000000000498A ; ---------------------------------------------------------------------------
.text:000000000000498A
.text:000000000000498A loc_498A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000498A                 mov     eax, edx
.text:000000000000498C
.text:000000000000498C loc_498C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000498C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000498C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004991                 test    rbx, rbx
.text:0000000000004994                 jz      short loc_49C2
.text:0000000000004996                 test    al, al
.text:0000000000004998                 jz      short loc_49C2
.text:000000000000499A                 movzx   ecx, byte ptr [rbx]
.text:000000000000499D                 mov     rax, rbx
.text:00000000000049A0                 test    cl, cl
.text:00000000000049A2                 jz      short loc_49C2
.text:00000000000049A4                 mov     rdx, r15
.text:00000000000049A7                 sub     rax, r15
.text:00000000000049AA
.text:00000000000049AA loc_49AA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000049AA                 cmp     r13, rdx
.text:00000000000049AD                 jbe     short loc_49B3
.text:00000000000049AF                 mov     [r14+rdx], cl
.text:00000000000049B3
.text:00000000000049B3 loc_49B3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000049B3                 add     rdx, 1
.text:00000000000049B7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000049BB                 test    cl, cl
.text:00000000000049BD                 jnz     short loc_49AA
.text:00000000000049BF                 mov     r15, rdx
.text:00000000000049C2
.text:00000000000049C2 loc_49C2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000049C2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000049C2                 cmp     r13, r15
.text:00000000000049C5                 jbe     loc_4469
.text:00000000000049CB                 mov     byte ptr [r14+r15], 0
.text:00000000000049D0                 jmp     loc_4469
.text:00000000000049D5 ; ---------------------------------------------------------------------------
.text:00000000000049D5
.text:00000000000049D5 loc_49D5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000049D5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000049DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000049DF                 mov     rbp, r11
.text:00000000000049E2                 setz    al
.text:00000000000049E5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000049E9                 jmp     loc_4419
.text:00000000000049EE ; ---------------------------------------------------------------------------
.text:00000000000049EE
.text:00000000000049EE loc_49EE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000049EE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000049F2                 mov     rdi, rcx
.text:00000000000049F5                 call    gettext_quote
.text:00000000000049FA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000049FF                 jmp     loc_4656
.text:0000000000004A04 ; ---------------------------------------------------------------------------
.text:0000000000004A04
.text:0000000000004A04 loc_4A04:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004A04                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004A08                 mov     rdi, rcx
.text:0000000000004A0B                 call    gettext_quote
.text:0000000000004A10                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004A15                 jmp     loc_4681
.text:0000000000004A1A ; ---------------------------------------------------------------------------
.text:0000000000004A1A
.text:0000000000004A1A loc_4A1A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000004A1A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004A1F                 mov     rbp, r11
.text:0000000000004A22                 mov     eax, edx
.text:0000000000004A24                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004A28                 jmp     loc_4419
.text:0000000000004A2D ; ---------------------------------------------------------------------------
.text:0000000000004A2D
.text:0000000000004A2D loc_4A2D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000004A2D                 sub     rsp, 8
.text:0000000000004A31                 mov     r8d, 5
.text:0000000000004A37                 mov     rcx, r11
.text:0000000000004A3A                 push    [rsp+0F0h+var_88]
.text:0000000000004A3E                 push    [rsp+0F8h+var_80]
.text:0000000000004A42                 mov     rdi, r14
.text:0000000000004A45                 push    [rsp+100h+var_C8]
.text:0000000000004A49                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004A51                 mov     rdx, [rsp+108h+s]
.text:0000000000004A56                 mov     rsi, [rsp+108h+var_98]
.text:0000000000004A5B                 call    quotearg_buffer_restyled
.text:0000000000004A60                 add     rsp, 20h
.text:0000000000004A64                 mov     r15, rax
.text:0000000000004A67                 jmp     loc_4469
.text:0000000000004A6C ; ---------------------------------------------------------------------------
.text:0000000000004A6C
.text:0000000000004A6C loc_4A6C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000004A6C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004A71                 jmp     loc_498C
.text:0000000000004A76 ; ---------------------------------------------------------------------------
.text:0000000000004A76
.text:0000000000004A76 loc_4A76:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004A76                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004A7E                 jmp     loc_4419
.text:0000000000004A83 ; ---------------------------------------------------------------------------
.text:0000000000004A83
.text:0000000000004A83 loc_4A83:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004A83                 call    ___stack_chk_fail
.text:0000000000004A88 ; ---------------------------------------------------------------------------
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004A88                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004A8D                 jmp     loc_4501
.text:0000000000004A92 ; ---------------------------------------------------------------------------
.text:0000000000004A92
.text:0000000000004A92 loc_4A92:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004A92                 mov     rbp, r11
.text:0000000000004A95                 jmp     loc_4430
.text:0000000000004A9A ; ---------------------------------------------------------------------------
.text:0000000000004A9A
.text:0000000000004A9A loc_4A9A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000004A9A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004A9F                 xor     eax, eax
.text:0000000000004AA1                 xor     r12d, r12d
.text:0000000000004AA4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004AAD                 jmp     loc_4054
.text:0000000000004AB2 ; ---------------------------------------------------------------------------
.text:0000000000004AB2
.text:0000000000004AB2 loc_4AB2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004AB2                 mov     rdx, r13
.text:0000000000004AB5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004ABA                 jmp     loc_40B2
.text:0000000000004ABF ; ---------------------------------------------------------------------------
.text:0000000000004ABF
.text:0000000000004ABF def_3921:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000004ABF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000004ABF ; } // starts at 3890
.text:0000000000004ABF quotearg_buffer_restyled endp
.text:0000000000004ABF
.text:0000000000004ABF ; ---------------------------------------------------------------------------
.text:0000000000004AC4                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004AD0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004AD0
.text:0000000000004AD0 var_50          = qword ptr -50h
.text:0000000000004AD0 var_48          = qword ptr -48h
.text:0000000000004AD0 var_40          = dword ptr -40h
.text:0000000000004AD0 var_3C          = dword ptr -3Ch
.text:0000000000004AD0
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 push    r15
.text:0000000000004AD2                 push    r14
.text:0000000000004AD4                 movsxd  r15, edi
.text:0000000000004AD7                 push    r13
.text:0000000000004AD9                 push    r12
.text:0000000000004ADB                 mov     r14, rdx
.text:0000000000004ADE                 push    rbp
.text:0000000000004ADF                 push    rbx
.text:0000000000004AE0                 mov     rbp, rcx
.text:0000000000004AE3                 sub     rsp, 28h
.text:0000000000004AE7                 mov     [rsp+58h+var_50], rsi
.text:0000000000004AEC                 call    ___errno_location
.text:0000000000004AF1                 mov     r13, rax
.text:0000000000004AF4                 mov     eax, [rax]
.text:0000000000004AF6                 test    r15d, r15d
.text:0000000000004AF9                 mov     rbx, cs:slotvec
.text:0000000000004B00                 mov     [rsp+58h+var_40], eax
.text:0000000000004B04                 js      loc_4C71
.text:0000000000004B0A                 cmp     cs:nslots, r15d
.text:0000000000004B11                 jg      short loc_4B75
.text:0000000000004B13                 cmp     r15d, 7FFFFFFFh
.text:0000000000004B1A                 jz      loc_4C76
.text:0000000000004B20                 lea     r12d, [r15+1]
.text:0000000000004B24                 lea     rax, slotvec0
.text:0000000000004B2B                 movsxd  rsi, r12d
.text:0000000000004B2E                 shl     rsi, 4
.text:0000000000004B32                 cmp     rbx, rax
.text:0000000000004B35                 jz      loc_4C50
.text:0000000000004B3B                 mov     rdi, rbx
.text:0000000000004B3E                 call    xrealloc
.text:0000000000004B43                 mov     rbx, rax
.text:0000000000004B46                 mov     cs:slotvec, rax
.text:0000000000004B4D
.text:0000000000004B4D loc_4B4D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000004B4D                 movsxd  rdi, cs:nslots
.text:0000000000004B54                 mov     edx, r12d
.text:0000000000004B57                 xor     esi, esi        ; c
.text:0000000000004B59                 sub     edx, edi
.text:0000000000004B5B                 shl     rdi, 4
.text:0000000000004B5F                 movsxd  rdx, edx
.text:0000000000004B62                 add     rdi, rbx        ; s
.text:0000000000004B65                 shl     rdx, 4          ; n
.text:0000000000004B69                 call    _memset
.text:0000000000004B6E                 mov     cs:nslots, r12d
.text:0000000000004B75
.text:0000000000004B75 loc_4B75:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004B75                 mov     eax, [rbp+4]
.text:0000000000004B78                 shl     r15, 4
.text:0000000000004B7C                 sub     rsp, 8
.text:0000000000004B80                 add     rbx, r15
.text:0000000000004B83                 lea     r15, [rbp+8]
.text:0000000000004B87                 mov     r8d, [rbp+0]
.text:0000000000004B8B                 mov     r11, [rbx]
.text:0000000000004B8E                 mov     r12, [rbx+8]
.text:0000000000004B92                 mov     rcx, r14
.text:0000000000004B95                 or      eax, 1
.text:0000000000004B98                 mov     [rsp+60h+var_3C], eax
.text:0000000000004B9C                 push    qword ptr [rbp+30h]
.text:0000000000004B9F                 mov     r9d, eax
.text:0000000000004BA2                 push    qword ptr [rbp+28h]
.text:0000000000004BA5                 push    r15
.text:0000000000004BA7                 mov     rsi, r11
.text:0000000000004BAA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004BAF                 mov     rdi, r12
.text:0000000000004BB2                 mov     [rsp+78h+var_48], r11
.text:0000000000004BB7                 call    quotearg_buffer_restyled
.text:0000000000004BBC                 add     rsp, 20h
.text:0000000000004BC0                 mov     r11, [rsp+58h+var_48]
.text:0000000000004BC5                 cmp     r11, rax
.text:0000000000004BC8                 ja      short loc_4C31
.text:0000000000004BCA                 lea     rsi, [rax+1]
.text:0000000000004BCE                 lea     rax, slot0
.text:0000000000004BD5                 cmp     r12, rax
.text:0000000000004BD8                 mov     [rbx], rsi
.text:0000000000004BDB                 jz      short loc_4BEF
.text:0000000000004BDD                 mov     rdi, r12        ; ptr
.text:0000000000004BE0                 mov     [rsp+58h+var_48], rsi
.text:0000000000004BE5                 call    _free
.text:0000000000004BEA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004BEF
.text:0000000000004BEF loc_4BEF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004BEF                 mov     rdi, rsi
.text:0000000000004BF2                 mov     [rsp+58h+var_48], rsi
.text:0000000000004BF7                 call    xmalloc
.text:0000000000004BFC                 sub     rsp, 8
.text:0000000000004C00                 mov     [rbx+8], rax
.text:0000000000004C04                 mov     r8d, [rbp+0]
.text:0000000000004C08                 push    qword ptr [rbp+30h]
.text:0000000000004C0B                 push    qword ptr [rbp+28h]
.text:0000000000004C0E                 mov     rcx, r14
.text:0000000000004C11                 push    r15
.text:0000000000004C13                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004C18                 mov     rdi, rax
.text:0000000000004C1B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004C20                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004C25                 mov     r12, rax
.text:0000000000004C28                 call    quotearg_buffer_restyled
.text:0000000000004C2D                 add     rsp, 20h
.text:0000000000004C31
.text:0000000000004C31 loc_4C31:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004C31                 mov     eax, [rsp+58h+var_40]
.text:0000000000004C35                 mov     [r13+0], eax
.text:0000000000004C39                 add     rsp, 28h
.text:0000000000004C3D                 mov     rax, r12
.text:0000000000004C40                 pop     rbx
.text:0000000000004C41                 pop     rbp
.text:0000000000004C42                 pop     r12
.text:0000000000004C44                 pop     r13
.text:0000000000004C46                 pop     r14
.text:0000000000004C48                 pop     r15
.text:0000000000004C4A                 retn
.text:0000000000004C4A ; ---------------------------------------------------------------------------
.text:0000000000004C4B                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004C50                 xor     edi, edi
.text:0000000000004C52                 call    xrealloc
.text:0000000000004C57                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004C5F                 mov     rbx, rax
.text:0000000000004C62                 mov     cs:slotvec, rax
.text:0000000000004C69                 movups  xmmword ptr [rax], xmm0
.text:0000000000004C6C                 jmp     loc_4B4D
.text:0000000000004C71 ; ---------------------------------------------------------------------------
.text:0000000000004C71
.text:0000000000004C71 loc_4C71:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004C71                 call    _abort
.text:0000000000004C76 ; ---------------------------------------------------------------------------
.text:0000000000004C76
.text:0000000000004C76 loc_4C76:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004C76                 call    xalloc_die
.text:0000000000004C76 ; } // starts at 4AD0
.text:0000000000004C76 quotearg_n_options endp
.text:0000000000004C76
.text:0000000000004C76 ; ---------------------------------------------------------------------------
.text:0000000000004C7B                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80 ; Attributes: info_from_lumina
.text:0000000000004C80
.text:0000000000004C80 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004C80                 public clone_quoting_options
.text:0000000000004C80 clone_quoting_options proc near
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 push    r12
.text:0000000000004C82                 push    rbp
.text:0000000000004C83                 push    rbx
.text:0000000000004C84                 mov     rbx, rdi
.text:0000000000004C87                 call    ___errno_location
.text:0000000000004C8C                 mov     r12d, [rax]
.text:0000000000004C8F                 mov     rbp, rax
.text:0000000000004C92                 lea     rax, default_quoting_options
.text:0000000000004C99                 test    rbx, rbx
.text:0000000000004C9C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004CA1                 cmovz   rbx, rax
.text:0000000000004CA5                 mov     rdi, rbx        ; src
.text:0000000000004CA8                 call    xmemdup
.text:0000000000004CAD                 mov     [rbp+0], r12d
.text:0000000000004CB1                 pop     rbx
.text:0000000000004CB2                 pop     rbp
.text:0000000000004CB3                 pop     r12
.text:0000000000004CB5                 retn
.text:0000000000004CB5 ; } // starts at 4C80
.text:0000000000004CB5 clone_quoting_options endp
.text:0000000000004CB5
.text:0000000000004CB5 ; ---------------------------------------------------------------------------
.text:0000000000004CB6                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CC0
.text:0000000000004CC0
.text:0000000000004CC0                 public get_quoting_style
.text:0000000000004CC0 get_quoting_style proc near
.text:0000000000004CC0 ; __unwind {
.text:0000000000004CC0                 lea     rax, default_quoting_options
.text:0000000000004CC7                 test    rdi, rdi
.text:0000000000004CCA                 cmovz   rdi, rax
.text:0000000000004CCE                 mov     eax, [rdi]
.text:0000000000004CD0                 retn
.text:0000000000004CD0 ; } // starts at 4CC0
.text:0000000000004CD0 get_quoting_style endp
.text:0000000000004CD0
.text:0000000000004CD0 ; ---------------------------------------------------------------------------
.text:0000000000004CD1                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CE0
.text:0000000000004CE0
.text:0000000000004CE0                 public set_quoting_style
.text:0000000000004CE0 set_quoting_style proc near
.text:0000000000004CE0 ; __unwind {
.text:0000000000004CE0                 lea     rax, default_quoting_options
.text:0000000000004CE7                 test    rdi, rdi
.text:0000000000004CEA                 cmovz   rdi, rax
.text:0000000000004CEE                 mov     [rdi], esi
.text:0000000000004CF0                 retn
.text:0000000000004CF0 ; } // starts at 4CE0
.text:0000000000004CF0 set_quoting_style endp
.text:0000000000004CF0
.text:0000000000004CF0 ; ---------------------------------------------------------------------------
.text:0000000000004CF1                 align 20h
.text:0000000000004D00
.text:0000000000004D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D00
.text:0000000000004D00 ; Attributes: info_from_lumina
.text:0000000000004D00
.text:0000000000004D00 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004D00                 public set_char_quoting
.text:0000000000004D00 set_char_quoting proc near
.text:0000000000004D00 ; __unwind {
.text:0000000000004D00                 lea     rax, default_quoting_options
.text:0000000000004D07                 test    rdi, rdi
.text:0000000000004D0A                 mov     ecx, esi
.text:0000000000004D0C                 cmovz   rdi, rax
.text:0000000000004D10                 mov     eax, esi
.text:0000000000004D12                 and     ecx, 1Fh
.text:0000000000004D15                 shr     al, 5
.text:0000000000004D18                 movzx   eax, al
.text:0000000000004D1B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004D20                 mov     esi, [rdi]
.text:0000000000004D22                 mov     eax, esi
.text:0000000000004D24                 shr     eax, cl
.text:0000000000004D26                 xor     edx, eax
.text:0000000000004D28                 and     eax, 1
.text:0000000000004D2B                 and     edx, 1
.text:0000000000004D2E                 shl     edx, cl
.text:0000000000004D30                 xor     edx, esi
.text:0000000000004D32                 mov     [rdi], edx
.text:0000000000004D34                 retn
.text:0000000000004D34 ; } // starts at 4D00
.text:0000000000004D34 set_char_quoting endp
.text:0000000000004D34
.text:0000000000004D34 ; ---------------------------------------------------------------------------
.text:0000000000004D35                 align 20h
.text:0000000000004D40
.text:0000000000004D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D40
.text:0000000000004D40
.text:0000000000004D40                 public set_quoting_flags
.text:0000000000004D40 set_quoting_flags proc near
.text:0000000000004D40 ; __unwind {
.text:0000000000004D40                 lea     rax, default_quoting_options
.text:0000000000004D47                 test    rdi, rdi
.text:0000000000004D4A                 cmovz   rdi, rax
.text:0000000000004D4E                 mov     eax, [rdi+4]
.text:0000000000004D51                 mov     [rdi+4], esi
.text:0000000000004D54                 retn
.text:0000000000004D54 ; } // starts at 4D40
.text:0000000000004D54 set_quoting_flags endp
.text:0000000000004D54
.text:0000000000004D54 ; ---------------------------------------------------------------------------
.text:0000000000004D55                 align 20h
.text:0000000000004D60
.text:0000000000004D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D60
.text:0000000000004D60 ; Attributes: info_from_lumina
.text:0000000000004D60
.text:0000000000004D60 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004D60                 public set_custom_quoting
.text:0000000000004D60 set_custom_quoting proc near
.text:0000000000004D60 ; __unwind {
.text:0000000000004D60                 lea     rax, default_quoting_options
.text:0000000000004D67                 test    rdi, rdi
.text:0000000000004D6A                 cmovz   rdi, rax
.text:0000000000004D6E                 test    rsi, rsi
.text:0000000000004D71                 mov     dword ptr [rdi], 0Ah
.text:0000000000004D77                 jz      short loc_4D87
.text:0000000000004D79                 test    rdx, rdx
.text:0000000000004D7C                 jz      short loc_4D87
.text:0000000000004D7E                 mov     [rdi+28h], rsi
.text:0000000000004D82                 mov     [rdi+30h], rdx
.text:0000000000004D86                 retn
.text:0000000000004D87 ; ---------------------------------------------------------------------------
.text:0000000000004D87
.text:0000000000004D87 loc_4D87:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004D87                                         ; set_custom_quoting+1C↑j
.text:0000000000004D87                 sub     rsp, 8
.text:0000000000004D8B                 call    _abort
.text:0000000000004D8B ; } // starts at 4D60
.text:0000000000004D8B set_custom_quoting endp
.text:0000000000004D8B
.text:0000000000004D90
.text:0000000000004D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D90
.text:0000000000004D90 ; Attributes: info_from_lumina
.text:0000000000004D90
.text:0000000000004D90 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004D90                 public quotearg_buffer
.text:0000000000004D90 quotearg_buffer proc near
.text:0000000000004D90
.text:0000000000004D90 var_40          = qword ptr -40h
.text:0000000000004D90
.text:0000000000004D90 ; __unwind {
.text:0000000000004D90                 push    r15
.text:0000000000004D92                 push    r14
.text:0000000000004D94                 lea     rax, default_quoting_options
.text:0000000000004D9B                 push    r13
.text:0000000000004D9D                 push    r12
.text:0000000000004D9F                 mov     r13, rdi
.text:0000000000004DA2                 push    rbp
.text:0000000000004DA3                 push    rbx
.text:0000000000004DA4                 mov     rbx, r8
.text:0000000000004DA7                 mov     r14, rsi
.text:0000000000004DAA                 mov     r15, rdx
.text:0000000000004DAD                 sub     rsp, 18h
.text:0000000000004DB1                 test    r8, r8
.text:0000000000004DB4                 cmovz   rbx, rax
.text:0000000000004DB8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004DBD                 call    ___errno_location
.text:0000000000004DC2                 mov     r12d, [rax]
.text:0000000000004DC5                 mov     rbp, rax
.text:0000000000004DC8                 lea     rax, [rbx+8]
.text:0000000000004DCC                 sub     rsp, 8
.text:0000000000004DD0                 mov     r9d, [rbx+4]
.text:0000000000004DD4                 push    qword ptr [rbx+30h]
.text:0000000000004DD7                 mov     r8d, [rbx]
.text:0000000000004DDA                 push    qword ptr [rbx+28h]
.text:0000000000004DDD                 mov     rdx, r15
.text:0000000000004DE0                 push    rax
.text:0000000000004DE1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004DE6                 mov     rsi, r14
.text:0000000000004DE9                 mov     rdi, r13
.text:0000000000004DEC                 call    quotearg_buffer_restyled
.text:0000000000004DF1                 mov     [rbp+0], r12d
.text:0000000000004DF5                 add     rsp, 38h
.text:0000000000004DF9                 pop     rbx
.text:0000000000004DFA                 pop     rbp
.text:0000000000004DFB                 pop     r12
.text:0000000000004DFD                 pop     r13
.text:0000000000004DFF                 pop     r14
.text:0000000000004E01                 pop     r15
.text:0000000000004E03                 retn
.text:0000000000004E03 ; } // starts at 4D90
.text:0000000000004E03 quotearg_buffer endp
.text:0000000000004E03
.text:0000000000004E03 ; ---------------------------------------------------------------------------
.text:0000000000004E04                 align 10h
.text:0000000000004E10
.text:0000000000004E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E10
.text:0000000000004E10 ; Attributes: info_from_lumina
.text:0000000000004E10
.text:0000000000004E10 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004E10                 public quotearg_alloc_mem
.text:0000000000004E10 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004E10
.text:0000000000004E10 var_5C          = dword ptr -5Ch
.text:0000000000004E10 var_58          = qword ptr -58h
.text:0000000000004E10 var_50          = qword ptr -50h
.text:0000000000004E10 var_48          = qword ptr -48h
.text:0000000000004E10 var_40          = qword ptr -40h
.text:0000000000004E10
.text:0000000000004E10 ; __unwind {
.text:0000000000004E10                 push    r15
.text:0000000000004E12                 push    r14
.text:0000000000004E14                 lea     rax, default_quoting_options
.text:0000000000004E1B                 push    r13
.text:0000000000004E1D                 push    r12
.text:0000000000004E1F                 mov     r12, rdx
.text:0000000000004E22                 push    rbp
.text:0000000000004E23                 push    rbx
.text:0000000000004E24                 mov     rbx, rcx
.text:0000000000004E27                 mov     r14, rdi
.text:0000000000004E2A                 mov     r15, rsi
.text:0000000000004E2D                 sub     rsp, 38h
.text:0000000000004E31                 test    rcx, rcx
.text:0000000000004E34                 cmovz   rbx, rax
.text:0000000000004E38                 xor     ebp, ebp
.text:0000000000004E3A                 call    ___errno_location
.text:0000000000004E3F                 test    r12, r12
.text:0000000000004E42                 mov     r13, rax
.text:0000000000004E45                 mov     eax, [rax]
.text:0000000000004E47                 setz    bpl
.text:0000000000004E4B                 or      ebp, [rbx+4]
.text:0000000000004E4E                 lea     r10, [rbx+8]
.text:0000000000004E52                 sub     rsp, 8
.text:0000000000004E56                 mov     r8d, [rbx]
.text:0000000000004E59                 mov     rcx, r15
.text:0000000000004E5C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004E60                 push    qword ptr [rbx+30h]
.text:0000000000004E63                 mov     rdx, r14
.text:0000000000004E66                 push    qword ptr [rbx+28h]
.text:0000000000004E69                 push    r10
.text:0000000000004E6B                 xor     esi, esi
.text:0000000000004E6D                 mov     r9d, ebp
.text:0000000000004E70                 xor     edi, edi
.text:0000000000004E72                 mov     [rsp+88h+var_48], r10
.text:0000000000004E77                 call    quotearg_buffer_restyled
.text:0000000000004E7C                 lea     rsi, [rax+1]
.text:0000000000004E80                 mov     [rsp+88h+var_40], rax
.text:0000000000004E85                 add     rsp, 20h
.text:0000000000004E89                 mov     rdi, rsi
.text:0000000000004E8C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004E91                 call    xmalloc
.text:0000000000004E96                 mov     [rsp+68h+var_58], rax
.text:0000000000004E9B                 sub     rsp, 8
.text:0000000000004E9F                 push    qword ptr [rbx+30h]
.text:0000000000004EA2                 push    qword ptr [rbx+28h]
.text:0000000000004EA5                 mov     r10, [rsp+80h+var_48]
.text:0000000000004EAA                 mov     r9d, ebp
.text:0000000000004EAD                 mov     r8d, [rbx]
.text:0000000000004EB0                 mov     rcx, r15
.text:0000000000004EB3                 mov     rdx, r14
.text:0000000000004EB6                 mov     rdi, rax
.text:0000000000004EB9                 push    r10
.text:0000000000004EBB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004EC0                 call    quotearg_buffer_restyled
.text:0000000000004EC5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004EC9                 add     rsp, 20h
.text:0000000000004ECD                 test    r12, r12
.text:0000000000004ED0                 mov     [r13+0], eax
.text:0000000000004ED4                 jz      short loc_4EDF
.text:0000000000004ED6                 mov     r11, [rsp+68h+var_40]
.text:0000000000004EDB                 mov     [r12], r11
.text:0000000000004EDF
.text:0000000000004EDF loc_4EDF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004EDF                 mov     rax, [rsp+68h+var_58]
.text:0000000000004EE4                 add     rsp, 38h
.text:0000000000004EE8                 pop     rbx
.text:0000000000004EE9                 pop     rbp
.text:0000000000004EEA                 pop     r12
.text:0000000000004EEC                 pop     r13
.text:0000000000004EEE                 pop     r14
.text:0000000000004EF0                 pop     r15
.text:0000000000004EF2                 retn
.text:0000000000004EF2 ; } // starts at 4E10
.text:0000000000004EF2 quotearg_alloc_mem endp
.text:0000000000004EF2
.text:0000000000004EF2 ; ---------------------------------------------------------------------------
.text:0000000000004EF3                 align 20h
.text:0000000000004F00
.text:0000000000004F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F00
.text:0000000000004F00
.text:0000000000004F00                 public quotearg_alloc
.text:0000000000004F00 quotearg_alloc  proc near
.text:0000000000004F00 ; __unwind {
.text:0000000000004F00                 mov     rcx, rdx
.text:0000000000004F03                 xor     edx, edx
.text:0000000000004F05                 jmp     quotearg_alloc_mem
.text:0000000000004F05 ; } // starts at 4F00
.text:0000000000004F05 quotearg_alloc  endp
.text:0000000000004F05
.text:0000000000004F05 ; ---------------------------------------------------------------------------
.text:0000000000004F0A                 align 10h
.text:0000000000004F10
.text:0000000000004F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F10
.text:0000000000004F10 ; Attributes: info_from_lumina
.text:0000000000004F10
.text:0000000000004F10 ; void __cdecl quotearg_free()
.text:0000000000004F10                 public quotearg_free
.text:0000000000004F10 quotearg_free   proc near
.text:0000000000004F10 ; __unwind {
.text:0000000000004F10                 mov     eax, cs:nslots
.text:0000000000004F16                 push    r12
.text:0000000000004F18                 mov     r12, cs:slotvec
.text:0000000000004F1F                 push    rbp
.text:0000000000004F20                 push    rbx
.text:0000000000004F21                 cmp     eax, 1
.text:0000000000004F24                 jle     short loc_4F51
.text:0000000000004F26                 sub     eax, 2
.text:0000000000004F29                 lea     rbx, [r12+18h]
.text:0000000000004F2E                 shl     rax, 4
.text:0000000000004F32                 lea     rbp, [r12+rax+28h]
.text:0000000000004F37                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004F40
.text:0000000000004F40 loc_4F40:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004F40                 mov     rdi, [rbx]      ; ptr
.text:0000000000004F43                 add     rbx, 10h
.text:0000000000004F47                 call    _free
.text:0000000000004F4C                 cmp     rbx, rbp
.text:0000000000004F4F                 jnz     short loc_4F40
.text:0000000000004F51
.text:0000000000004F51 loc_4F51:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004F51                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004F56                 lea     rbx, slot0
.text:0000000000004F5D                 cmp     rdi, rbx
.text:0000000000004F60                 jz      short loc_4F79
.text:0000000000004F62                 call    _free
.text:0000000000004F67                 mov     cs:slotvec0, 100h
.text:0000000000004F72                 mov     cs:off_20A098, rbx
.text:0000000000004F79
.text:0000000000004F79 loc_4F79:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004F79                 lea     rbx, slotvec0
.text:0000000000004F80                 cmp     r12, rbx
.text:0000000000004F83                 jz      short loc_4F94
.text:0000000000004F85                 mov     rdi, r12        ; ptr
.text:0000000000004F88                 call    _free
.text:0000000000004F8D                 mov     cs:slotvec, rbx
.text:0000000000004F94
.text:0000000000004F94 loc_4F94:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004F94                 pop     rbx
.text:0000000000004F95                 mov     cs:nslots, 1
.text:0000000000004F9F                 pop     rbp
.text:0000000000004FA0                 pop     r12
.text:0000000000004FA2                 retn
.text:0000000000004FA2 ; } // starts at 4F10
.text:0000000000004FA2 quotearg_free   endp
.text:0000000000004FA2
.text:0000000000004FA2 ; ---------------------------------------------------------------------------
.text:0000000000004FA3                 align 10h
.text:0000000000004FB0
.text:0000000000004FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FB0
.text:0000000000004FB0
.text:0000000000004FB0                 public quotearg_n
.text:0000000000004FB0 quotearg_n      proc near
.text:0000000000004FB0 ; __unwind {
.text:0000000000004FB0                 lea     rcx, default_quoting_options
.text:0000000000004FB7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FBE                 jmp     quotearg_n_options
.text:0000000000004FBE ; } // starts at 4FB0
.text:0000000000004FBE quotearg_n      endp
.text:0000000000004FBE
.text:0000000000004FBE ; ---------------------------------------------------------------------------
.text:0000000000004FC3                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0
.text:0000000000004FD0                 public quotearg_n_mem
.text:0000000000004FD0 quotearg_n_mem  proc near
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 lea     rcx, default_quoting_options
.text:0000000000004FD7                 jmp     quotearg_n_options
.text:0000000000004FD7 ; } // starts at 4FD0
.text:0000000000004FD7 quotearg_n_mem  endp
.text:0000000000004FD7
.text:0000000000004FD7 ; ---------------------------------------------------------------------------
.text:0000000000004FDC                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FE0
.text:0000000000004FE0
.text:0000000000004FE0                 public quotearg
.text:0000000000004FE0 quotearg        proc near
.text:0000000000004FE0 ; __unwind {
.text:0000000000004FE0                 lea     rcx, default_quoting_options
.text:0000000000004FE7                 mov     rsi, rdi
.text:0000000000004FEA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FF1                 xor     edi, edi
.text:0000000000004FF3                 jmp     quotearg_n_options
.text:0000000000004FF3 ; } // starts at 4FE0
.text:0000000000004FF3 quotearg        endp
.text:0000000000004FF3
.text:0000000000004FF3 ; ---------------------------------------------------------------------------
.text:0000000000004FF8                 align 20h
.text:0000000000005000
.text:0000000000005000 ; =============== S U B R O U T I N E =======================================
.text:0000000000005000
.text:0000000000005000
.text:0000000000005000                 public quotearg_mem
.text:0000000000005000 quotearg_mem    proc near
.text:0000000000005000 ; __unwind {
.text:0000000000005000                 lea     rcx, default_quoting_options
.text:0000000000005007                 mov     rdx, rsi
.text:000000000000500A                 mov     rsi, rdi
.text:000000000000500D                 xor     edi, edi
.text:000000000000500F                 jmp     quotearg_n_options
.text:000000000000500F ; } // starts at 5000
.text:000000000000500F quotearg_mem    endp
.text:000000000000500F
.text:000000000000500F ; ---------------------------------------------------------------------------
.text:0000000000005014                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020 ; Attributes: info_from_lumina
.text:0000000000005020
.text:0000000000005020 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005020                 public quotearg_n_style
.text:0000000000005020 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:0000000000005020                                         ; quotearg_style+7↓j
.text:0000000000005020
.text:0000000000005020 var_48          = dword ptr -48h
.text:0000000000005020 var_44          = qword ptr -44h
.text:0000000000005020 var_3C          = qword ptr -3Ch
.text:0000000000005020 var_34          = qword ptr -34h
.text:0000000000005020 var_2C          = qword ptr -2Ch
.text:0000000000005020 var_24          = qword ptr -24h
.text:0000000000005020 var_1C          = qword ptr -1Ch
.text:0000000000005020 var_14          = dword ptr -14h
.text:0000000000005020 var_10          = qword ptr -10h
.text:0000000000005020
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 sub     rsp, 48h
.text:0000000000005024                 mov     rax, rdx
.text:0000000000005027                 mov     rdx, fs:28h
.text:0000000000005030                 mov     [rsp+48h+var_10], rdx
.text:0000000000005035                 xor     edx, edx
.text:0000000000005037                 cmp     esi, 0Ah
.text:000000000000503A                 jz      short loc_50A4
.text:000000000000503C                 mov     [rsp+48h+var_48], esi
.text:000000000000503F                 mov     rcx, rsp
.text:0000000000005042                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005049                 mov     rsi, rax
.text:000000000000504C                 mov     [rsp+48h+var_44], 0
.text:0000000000005055                 mov     [rsp+48h+var_3C], 0
.text:000000000000505E                 mov     [rsp+48h+var_34], 0
.text:0000000000005067                 mov     [rsp+48h+var_2C], 0
.text:0000000000005070                 mov     [rsp+48h+var_24], 0
.text:0000000000005079                 mov     [rsp+48h+var_1C], 0
.text:0000000000005082                 mov     [rsp+48h+var_14], 0
.text:000000000000508A                 call    quotearg_n_options
.text:000000000000508F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005094                 xor     rcx, fs:28h
.text:000000000000509D                 jnz     short loc_50A9
.text:000000000000509F                 add     rsp, 48h
.text:00000000000050A3                 retn
.text:00000000000050A4 ; ---------------------------------------------------------------------------
.text:00000000000050A4
.text:00000000000050A4 loc_50A4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000050A4                 call    _abort
.text:00000000000050A9 ; ---------------------------------------------------------------------------
.text:00000000000050A9
.text:00000000000050A9 loc_50A9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000050A9                 call    ___stack_chk_fail
.text:00000000000050A9 ; } // starts at 5020
.text:00000000000050A9 quotearg_n_style endp
.text:00000000000050A9
.text:00000000000050A9 ; ---------------------------------------------------------------------------
.text:00000000000050AE                 align 10h
.text:00000000000050B0
.text:00000000000050B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050B0
.text:00000000000050B0 ; Attributes: info_from_lumina
.text:00000000000050B0
.text:00000000000050B0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000050B0                 public quotearg_n_style_mem
.text:00000000000050B0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000050B0                                         ; collate_error+6A↓p ...
.text:00000000000050B0
.text:00000000000050B0 var_48          = dword ptr -48h
.text:00000000000050B0 var_44          = qword ptr -44h
.text:00000000000050B0 var_3C          = qword ptr -3Ch
.text:00000000000050B0 var_34          = qword ptr -34h
.text:00000000000050B0 var_2C          = qword ptr -2Ch
.text:00000000000050B0 var_24          = qword ptr -24h
.text:00000000000050B0 var_1C          = qword ptr -1Ch
.text:00000000000050B0 var_14          = dword ptr -14h
.text:00000000000050B0 var_10          = qword ptr -10h
.text:00000000000050B0
.text:00000000000050B0 ; __unwind {
.text:00000000000050B0                 sub     rsp, 48h
.text:00000000000050B4                 mov     rax, rdx
.text:00000000000050B7                 mov     rdx, rcx
.text:00000000000050BA                 mov     rcx, fs:28h
.text:00000000000050C3                 mov     [rsp+48h+var_10], rcx
.text:00000000000050C8                 xor     ecx, ecx
.text:00000000000050CA                 cmp     esi, 0Ah
.text:00000000000050CD                 jz      short loc_5130
.text:00000000000050CF                 mov     [rsp+48h+var_48], esi
.text:00000000000050D2                 mov     rcx, rsp
.text:00000000000050D5                 mov     rsi, rax
.text:00000000000050D8                 mov     [rsp+48h+var_44], 0
.text:00000000000050E1                 mov     [rsp+48h+var_3C], 0
.text:00000000000050EA                 mov     [rsp+48h+var_34], 0
.text:00000000000050F3                 mov     [rsp+48h+var_2C], 0
.text:00000000000050FC                 mov     [rsp+48h+var_24], 0
.text:0000000000005105                 mov     [rsp+48h+var_1C], 0
.text:000000000000510E                 mov     [rsp+48h+var_14], 0
.text:0000000000005116                 call    quotearg_n_options
.text:000000000000511B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005120                 xor     rdx, fs:28h
.text:0000000000005129                 jnz     short loc_5135
.text:000000000000512B                 add     rsp, 48h
.text:000000000000512F                 retn
.text:0000000000005130 ; ---------------------------------------------------------------------------
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005130                 call    _abort
.text:0000000000005135 ; ---------------------------------------------------------------------------
.text:0000000000005135
.text:0000000000005135 loc_5135:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005135                 call    ___stack_chk_fail
.text:0000000000005135 ; } // starts at 50B0
.text:0000000000005135 quotearg_n_style_mem endp
.text:0000000000005135
.text:0000000000005135 ; ---------------------------------------------------------------------------
.text:000000000000513A                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140
.text:0000000000005140                 public quotearg_style
.text:0000000000005140 quotearg_style  proc near               ; CODE XREF: main+8CE↑p
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 mov     rdx, rsi
.text:0000000000005143                 mov     esi, edi
.text:0000000000005145                 xor     edi, edi
.text:0000000000005147                 jmp     quotearg_n_style
.text:0000000000005147 ; } // starts at 5140
.text:0000000000005147 quotearg_style  endp
.text:0000000000005147
.text:0000000000005147 ; ---------------------------------------------------------------------------
.text:000000000000514C                 align 10h
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150
.text:0000000000005150                 public quotearg_style_mem
.text:0000000000005150 quotearg_style_mem proc near
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 mov     rcx, rdx
.text:0000000000005153                 mov     rdx, rsi
.text:0000000000005156                 mov     esi, edi
.text:0000000000005158                 xor     edi, edi
.text:000000000000515A                 jmp     quotearg_n_style_mem
.text:000000000000515A ; } // starts at 5150
.text:000000000000515A quotearg_style_mem endp
.text:000000000000515A
.text:000000000000515A ; ---------------------------------------------------------------------------
.text:000000000000515F                 align 20h
.text:0000000000005160
.text:0000000000005160 ; =============== S U B R O U T I N E =======================================
.text:0000000000005160
.text:0000000000005160 ; Attributes: info_from_lumina
.text:0000000000005160
.text:0000000000005160 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005160                 public quotearg_char_mem
.text:0000000000005160 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005160                                         ; quotearg_colon+C↓j ...
.text:0000000000005160
.text:0000000000005160 var_48          = xmmword ptr -48h
.text:0000000000005160 var_38          = xmmword ptr -38h
.text:0000000000005160 var_28          = xmmword ptr -28h
.text:0000000000005160 var_18          = qword ptr -18h
.text:0000000000005160 var_10          = qword ptr -10h
.text:0000000000005160
.text:0000000000005160 ; __unwind {
.text:0000000000005160                 sub     rsp, 48h
.text:0000000000005164                 mov     ecx, edx
.text:0000000000005166                 mov     rax, fs:28h
.text:000000000000516F                 mov     [rsp+48h+var_10], rax
.text:0000000000005174                 xor     eax, eax
.text:0000000000005176                 mov     rax, cs:qword_20A270
.text:000000000000517D                 mov     r8, rsp
.text:0000000000005180                 and     ecx, 1Fh
.text:0000000000005183                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000518B                 mov     [rsp+48h+var_18], rax
.text:0000000000005190                 mov     eax, edx
.text:0000000000005192                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005196                 shr     al, 5
.text:0000000000005199                 movzx   eax, al
.text:000000000000519C                 lea     r9, [r8+rax*4+8]
.text:00000000000051A1                 movdqa  xmm0, cs:xmmword_20A250
.text:00000000000051A9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000051AE                 movdqa  xmm0, cs:xmmword_20A260
.text:00000000000051B6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000051BB                 mov     edx, [r9]
.text:00000000000051BE                 mov     eax, edx
.text:00000000000051C0                 shr     eax, cl
.text:00000000000051C2                 not     eax
.text:00000000000051C4                 and     eax, 1
.text:00000000000051C7                 shl     eax, cl
.text:00000000000051C9                 mov     rcx, r8
.text:00000000000051CC                 xor     eax, edx
.text:00000000000051CE                 mov     rdx, rsi
.text:00000000000051D1                 mov     rsi, rdi
.text:00000000000051D4                 mov     [r9], eax
.text:00000000000051D7                 xor     edi, edi
.text:00000000000051D9                 call    quotearg_n_options
.text:00000000000051DE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000051E3                 xor     rsi, fs:28h
.text:00000000000051EC                 jnz     short loc_51F3
.text:00000000000051EE                 add     rsp, 48h
.text:00000000000051F2                 retn
.text:00000000000051F3 ; ---------------------------------------------------------------------------
.text:00000000000051F3
.text:00000000000051F3 loc_51F3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000051F3                 call    ___stack_chk_fail
.text:00000000000051F3 ; } // starts at 5160
.text:00000000000051F3 quotearg_char_mem endp
.text:00000000000051F3
.text:00000000000051F3 ; ---------------------------------------------------------------------------
.text:00000000000051F8                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200                 public quotearg_char
.text:0000000000005200 quotearg_char   proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 movsx   edx, sil
.text:0000000000005204                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000520B                 jmp     quotearg_char_mem
.text:000000000000520B ; } // starts at 5200
.text:000000000000520B quotearg_char   endp
.text:000000000000520B
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210
.text:0000000000005210                 public quotearg_colon
.text:0000000000005210 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 mov     edx, 3Ah ; ':'
.text:0000000000005215                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000521C                 jmp     quotearg_char_mem
.text:000000000000521C ; } // starts at 5210
.text:000000000000521C quotearg_colon  endp
.text:000000000000521C
.text:000000000000521C ; ---------------------------------------------------------------------------
.text:0000000000005221                 align 10h
.text:0000000000005230
.text:0000000000005230 ; =============== S U B R O U T I N E =======================================
.text:0000000000005230
.text:0000000000005230
.text:0000000000005230                 public quotearg_colon_mem
.text:0000000000005230 quotearg_colon_mem proc near
.text:0000000000005230 ; __unwind {
.text:0000000000005230                 mov     edx, 3Ah ; ':'
.text:0000000000005235                 jmp     quotearg_char_mem
.text:0000000000005235 ; } // starts at 5230
.text:0000000000005235 quotearg_colon_mem endp
.text:0000000000005235
.text:0000000000005235 ; ---------------------------------------------------------------------------
.text:000000000000523A                 align 20h
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240 ; Attributes: info_from_lumina
.text:0000000000005240
.text:0000000000005240 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005240                 public quotearg_n_style_colon
.text:0000000000005240 quotearg_n_style_colon proc near        ; CODE XREF: main+79A↑p
.text:0000000000005240                                         ; main+AAA↑p
.text:0000000000005240
.text:0000000000005240 var_48          = dword ptr -48h
.text:0000000000005240 var_44          = qword ptr -44h
.text:0000000000005240 var_3C          = qword ptr -3Ch
.text:0000000000005240 var_34          = qword ptr -34h
.text:0000000000005240 var_2C          = qword ptr -2Ch
.text:0000000000005240 var_24          = qword ptr -24h
.text:0000000000005240 var_1C          = qword ptr -1Ch
.text:0000000000005240 var_14          = dword ptr -14h
.text:0000000000005240 var_10          = qword ptr -10h
.text:0000000000005240
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 sub     rsp, 48h
.text:0000000000005244                 mov     rax, rdx
.text:0000000000005247                 mov     rdx, fs:28h
.text:0000000000005250                 mov     [rsp+48h+var_10], rdx
.text:0000000000005255                 xor     edx, edx
.text:0000000000005257                 cmp     esi, 0Ah
.text:000000000000525A                 jz      short loc_52C4
.text:000000000000525C                 mov     [rsp+48h+var_48], esi
.text:000000000000525F                 mov     rcx, rsp
.text:0000000000005262                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005269                 mov     rsi, rax
.text:000000000000526C                 mov     [rsp+48h+var_44], 0
.text:0000000000005275                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000527E                 mov     [rsp+48h+var_34], 0
.text:0000000000005287                 mov     [rsp+48h+var_2C], 0
.text:0000000000005290                 mov     [rsp+48h+var_24], 0
.text:0000000000005299                 mov     [rsp+48h+var_1C], 0
.text:00000000000052A2                 mov     [rsp+48h+var_14], 0
.text:00000000000052AA                 call    quotearg_n_options
.text:00000000000052AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000052B4                 xor     rcx, fs:28h
.text:00000000000052BD                 jnz     short loc_52C9
.text:00000000000052BF                 add     rsp, 48h
.text:00000000000052C3                 retn
.text:00000000000052C4 ; ---------------------------------------------------------------------------
.text:00000000000052C4
.text:00000000000052C4 loc_52C4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000052C4                 call    _abort
.text:00000000000052C9 ; ---------------------------------------------------------------------------
.text:00000000000052C9
.text:00000000000052C9 loc_52C9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000052C9                 call    ___stack_chk_fail
.text:00000000000052C9 ; } // starts at 5240
.text:00000000000052C9 quotearg_n_style_colon endp
.text:00000000000052C9
.text:00000000000052C9 ; ---------------------------------------------------------------------------
.text:00000000000052CE                 align 10h
.text:00000000000052D0
.text:00000000000052D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052D0
.text:00000000000052D0 ; Attributes: info_from_lumina
.text:00000000000052D0
.text:00000000000052D0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000052D0                 public quotearg_n_custom_mem
.text:00000000000052D0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000052D0                                         ; quotearg_custom+12↓j ...
.text:00000000000052D0
.text:00000000000052D0 var_48          = xmmword ptr -48h
.text:00000000000052D0 var_38          = xmmword ptr -38h
.text:00000000000052D0 var_28          = xmmword ptr -28h
.text:00000000000052D0 var_18          = qword ptr -18h
.text:00000000000052D0 var_10          = qword ptr -10h
.text:00000000000052D0
.text:00000000000052D0 ; __unwind {
.text:00000000000052D0                 sub     rsp, 48h
.text:00000000000052D4                 mov     r9, rcx
.text:00000000000052D7                 mov     rcx, cs:qword_20A270
.text:00000000000052DE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000052E6                 mov     rax, fs:28h
.text:00000000000052EF                 mov     [rsp+48h+var_10], rax
.text:00000000000052F4                 xor     eax, eax
.text:00000000000052F6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000052FA                 test    rsi, rsi
.text:00000000000052FD                 mov     [rsp+48h+var_18], rcx
.text:0000000000005302                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005309                 movdqa  xmm0, cs:xmmword_20A250
.text:0000000000005311                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005316                 movdqa  xmm0, cs:xmmword_20A260
.text:000000000000531E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005323                 jz      short loc_5357
.text:0000000000005325                 test    rdx, rdx
.text:0000000000005328                 jz      short loc_5357
.text:000000000000532A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000532F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005334                 mov     rcx, rsp
.text:0000000000005337                 mov     rdx, r8
.text:000000000000533A                 mov     rsi, r9
.text:000000000000533D                 call    quotearg_n_options
.text:0000000000005342                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005347                 xor     rdi, fs:28h
.text:0000000000005350                 jnz     short loc_535C
.text:0000000000005352                 add     rsp, 48h
.text:0000000000005356                 retn
.text:0000000000005357 ; ---------------------------------------------------------------------------
.text:0000000000005357
.text:0000000000005357 loc_5357:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005357                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005357                 call    _abort
.text:000000000000535C ; ---------------------------------------------------------------------------
.text:000000000000535C
.text:000000000000535C loc_535C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000535C                 call    ___stack_chk_fail
.text:000000000000535C ; } // starts at 52D0
.text:000000000000535C quotearg_n_custom_mem endp
.text:000000000000535C
.text:000000000000535C ; ---------------------------------------------------------------------------
.text:0000000000005361                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370
.text:0000000000005370                 public quotearg_n_custom
.text:0000000000005370 quotearg_n_custom proc near
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005377                 jmp     quotearg_n_custom_mem
.text:0000000000005377 ; } // starts at 5370
.text:0000000000005377 quotearg_n_custom endp
.text:0000000000005377
.text:0000000000005377 ; ---------------------------------------------------------------------------
.text:000000000000537C                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380                 public quotearg_custom
.text:0000000000005380 quotearg_custom proc near
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 mov     rcx, rdx
.text:0000000000005383                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000538A                 mov     rdx, rsi
.text:000000000000538D                 mov     rsi, rdi
.text:0000000000005390                 xor     edi, edi
.text:0000000000005392                 jmp     quotearg_n_custom_mem
.text:0000000000005392 ; } // starts at 5380
.text:0000000000005392 quotearg_custom endp
.text:0000000000005392
.text:0000000000005392 ; ---------------------------------------------------------------------------
.text:0000000000005397                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0
.text:00000000000053A0                 public quotearg_custom_mem
.text:00000000000053A0 quotearg_custom_mem proc near
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 mov     r8, rcx
.text:00000000000053A3                 mov     rcx, rdx
.text:00000000000053A6                 mov     rdx, rsi
.text:00000000000053A9                 mov     rsi, rdi
.text:00000000000053AC                 xor     edi, edi
.text:00000000000053AE                 jmp     quotearg_n_custom_mem
.text:00000000000053AE ; } // starts at 53A0
.text:00000000000053AE quotearg_custom_mem endp
.text:00000000000053AE
.text:00000000000053AE ; ---------------------------------------------------------------------------
.text:00000000000053B3                 align 20h
.text:00000000000053C0
.text:00000000000053C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053C0
.text:00000000000053C0
.text:00000000000053C0                 public quote_n_mem
.text:00000000000053C0 quote_n_mem     proc near
.text:00000000000053C0 ; __unwind {
.text:00000000000053C0                 lea     rcx, quote_quoting_options
.text:00000000000053C7                 jmp     quotearg_n_options
.text:00000000000053C7 ; } // starts at 53C0
.text:00000000000053C7 quote_n_mem     endp
.text:00000000000053C7
.text:00000000000053C7 ; ---------------------------------------------------------------------------
.text:00000000000053CC                 align 10h
.text:00000000000053D0
.text:00000000000053D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053D0
.text:00000000000053D0
.text:00000000000053D0                 public quote_mem
.text:00000000000053D0 quote_mem       proc near
.text:00000000000053D0 ; __unwind {
.text:00000000000053D0                 lea     rcx, quote_quoting_options
.text:00000000000053D7                 mov     rdx, rsi
.text:00000000000053DA                 mov     rsi, rdi
.text:00000000000053DD                 xor     edi, edi
.text:00000000000053DF                 jmp     quotearg_n_options
.text:00000000000053DF ; } // starts at 53D0
.text:00000000000053DF quote_mem       endp
.text:00000000000053DF
.text:00000000000053DF ; ---------------------------------------------------------------------------
.text:00000000000053E4                 align 10h
.text:00000000000053F0
.text:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053F0
.text:00000000000053F0
.text:00000000000053F0                 public quote_n
.text:00000000000053F0 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:00000000000053F0 ; __unwind {
.text:00000000000053F0                 lea     rcx, quote_quoting_options
.text:00000000000053F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000053FE                 jmp     quotearg_n_options
.text:00000000000053FE ; } // starts at 53F0
.text:00000000000053FE quote_n         endp
.text:00000000000053FE
.text:00000000000053FE ; ---------------------------------------------------------------------------
.text:0000000000005403                 align 10h
.text:0000000000005410
.text:0000000000005410 ; =============== S U B R O U T I N E =======================================
.text:0000000000005410
.text:0000000000005410
.text:0000000000005410                 public quote
.text:0000000000005410 quote           proc near               ; CODE XREF: main:loc_24DC↑p
.text:0000000000005410                                         ; argmatch_valid+5A↑p ...
.text:0000000000005410 ; __unwind {
.text:0000000000005410                 lea     rcx, quote_quoting_options
.text:0000000000005417                 mov     rsi, rdi
.text:000000000000541A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005421                 xor     edi, edi
.text:0000000000005423                 jmp     quotearg_n_options
.text:0000000000005423 ; } // starts at 5410
.text:0000000000005423 quote           endp
.text:0000000000005423
.text:0000000000005423 ; ---------------------------------------------------------------------------
.text:0000000000005428                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430
.text:0000000000005430 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005430                 public version_etc_arn
.text:0000000000005430 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_586B↓j
.text:0000000000005430                                         ; version_etc_va:loc_58BB↓p ...
.text:0000000000005430
.text:0000000000005430 var_58          = qword ptr -58h
.text:0000000000005430 var_50          = qword ptr -50h
.text:0000000000005430 var_48          = qword ptr -48h
.text:0000000000005430 var_40          = qword ptr -40h
.text:0000000000005430
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 push    r15
.text:0000000000005432                 push    r14
.text:0000000000005434                 push    r13
.text:0000000000005436                 push    r12
.text:0000000000005438                 mov     r12, r9
.text:000000000000543B                 push    rbp
.text:000000000000543C                 push    rbx
.text:000000000000543D                 mov     rbp, rdi
.text:0000000000005440                 mov     rbx, r8
.text:0000000000005443                 sub     rsp, 28h
.text:0000000000005447                 test    rsi, rsi
.text:000000000000544A                 jz      loc_5568
.text:0000000000005450                 mov     r8, rdx
.text:0000000000005453                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000545A                 mov     r9, rcx
.text:000000000000545D                 xor     eax, eax
.text:000000000000545F                 mov     rcx, rsi
.text:0000000000005462                 mov     esi, 1
.text:0000000000005467                 call    ___fprintf_chk
.text:000000000000546C
.text:000000000000546C loc_546C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000546C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005473                 xor     edi, edi        ; domainname
.text:0000000000005475                 mov     edx, 5          ; category
.text:000000000000547A                 call    _dcgettext
.text:000000000000547F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005486                 mov     rcx, rax
.text:0000000000005489                 mov     r8d, 7E3h
.text:000000000000548F                 mov     esi, 1
.text:0000000000005494                 mov     rdi, rbp
.text:0000000000005497                 xor     eax, eax
.text:0000000000005499                 call    ___fprintf_chk
.text:000000000000549E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000054A5                 xor     edi, edi        ; domainname
.text:00000000000054A7                 mov     edx, 5          ; category
.text:00000000000054AC                 call    _dcgettext
.text:00000000000054B1                 mov     rsi, rbp        ; stream
.text:00000000000054B4                 mov     rdi, rax        ; s
.text:00000000000054B7                 call    _fputs_unlocked
.text:00000000000054BC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000054C0                 ja      def_54D4        ; jumptable 00000000000054D4 default case
.text:00000000000054C6                 lea     rdx, jpt_54D4
.text:00000000000054CD                 movsxd  rax, ds:(jpt_54D4 - 7A44h)[rdx+r12*4]
.text:00000000000054D1                 add     rax, rdx
.text:00000000000054D4                 jmp     rax             ; switch jump
.text:00000000000054D4 ; ---------------------------------------------------------------------------
.text:00000000000054D6                 align 20h
.text:00000000000054E0
.text:00000000000054E0 loc_54E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000054E0                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:00000000000054E0                 mov     r9, [rbx+38h]   ; jumptable 00000000000054D4 case 8
.text:00000000000054E4                 mov     rax, [rbx+10h]
.text:00000000000054E8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000054EF                 mov     r8, [rbx+8]
.text:00000000000054F3                 mov     edx, 5          ; category
.text:00000000000054F8                 xor     edi, edi        ; domainname
.text:00000000000054FA                 mov     r13, [rbx+30h]
.text:00000000000054FE                 mov     r12, [rbx+28h]
.text:0000000000005502                 mov     [rsp+58h+var_48], r9
.text:0000000000005507                 mov     r15, [rbx+20h]
.text:000000000000550B                 mov     r14, [rbx+18h]
.text:000000000000550F                 mov     [rsp+58h+var_58], rax
.text:0000000000005513                 mov     [rsp+58h+var_50], r8
.text:0000000000005518                 mov     rbx, [rbx]
.text:000000000000551B                 call    _dcgettext
.text:0000000000005520                 sub     rsp, 8
.text:0000000000005524
.text:0000000000005524 loc_5524:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005524                 mov     r9, [rsp+60h+var_48]
.text:0000000000005529                 mov     rdx, rax
.text:000000000000552C                 mov     rcx, rbx
.text:000000000000552F                 mov     esi, 1
.text:0000000000005534                 mov     rdi, rbp
.text:0000000000005537                 xor     eax, eax
.text:0000000000005539                 push    r9
.text:000000000000553B                 push    r13
.text:000000000000553D                 push    r12
.text:000000000000553F                 push    r15
.text:0000000000005541                 push    r14
.text:0000000000005543                 mov     r9, [rsp+88h+var_58]
.text:0000000000005548                 mov     r8, [rsp+88h+var_50]
.text:000000000000554D                 call    ___fprintf_chk
.text:0000000000005552                 add     rsp, 30h
.text:0000000000005556
.text:0000000000005556 loc_5556:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005556                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:0000000000005556                 add     rsp, 28h        ; jumptable 00000000000054D4 case 0
.text:000000000000555A                 pop     rbx
.text:000000000000555B                 pop     rbp
.text:000000000000555C                 pop     r12
.text:000000000000555E                 pop     r13
.text:0000000000005560                 pop     r14
.text:0000000000005562                 pop     r15
.text:0000000000005564                 retn
.text:0000000000005564 ; ---------------------------------------------------------------------------
.text:0000000000005565                 align 8
.text:0000000000005568
.text:0000000000005568 loc_5568:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005568                 mov     r8, rcx
.text:000000000000556B                 mov     rcx, rdx
.text:000000000000556E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005575                 mov     esi, 1
.text:000000000000557A                 xor     eax, eax
.text:000000000000557C                 call    ___fprintf_chk
.text:0000000000005581                 jmp     loc_546C
.text:0000000000005581 ; ---------------------------------------------------------------------------
.text:0000000000005586                 align 10h
.text:0000000000005590
.text:0000000000005590 loc_5590:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005590                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:0000000000005590                 mov     r10, [rbx+40h]  ; jumptable 00000000000054D4 case 9
.text:0000000000005594                 mov     r9, [rbx+38h]
.text:0000000000005598                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000559F                 mov     rax, [rbx+10h]
.text:00000000000055A3                 mov     r8, [rbx+8]
.text:00000000000055A7                 mov     edx, 5          ; category
.text:00000000000055AC                 mov     r13, [rbx+30h]
.text:00000000000055B0                 mov     r12, [rbx+28h]
.text:00000000000055B4                 mov     r15, [rbx+20h]
.text:00000000000055B8                 mov     r14, [rbx+18h]
.text:00000000000055BC                 mov     rbx, [rbx]
.text:00000000000055BF                 mov     [rsp+58h+var_40], r10
.text:00000000000055C4                 mov     [rsp+58h+var_48], r9
.text:00000000000055C9                 mov     [rsp+58h+var_58], rax
.text:00000000000055CD                 mov     [rsp+58h+var_50], r8
.text:00000000000055D2
.text:00000000000055D2 loc_55D2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000055D2                 xor     edi, edi        ; domainname
.text:00000000000055D4                 call    _dcgettext
.text:00000000000055D9                 mov     r10, [rsp+58h+var_40]
.text:00000000000055DE                 push    r10
.text:00000000000055E0                 jmp     loc_5524
.text:00000000000055E0 ; ---------------------------------------------------------------------------
.text:00000000000055E5                 align 8
.text:00000000000055E8
.text:00000000000055E8 loc_55E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000055E8                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:00000000000055E8                 mov     rbx, [rbx]      ; jumptable 00000000000054D4 case 1
.text:00000000000055EB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000055F2                 mov     edx, 5          ; category
.text:00000000000055F7                 xor     edi, edi        ; domainname
.text:00000000000055F9                 call    _dcgettext
.text:00000000000055FE                 add     rsp, 28h
.text:0000000000005602                 mov     rcx, rbx
.text:0000000000005605                 mov     rdi, rbp
.text:0000000000005608                 pop     rbx
.text:0000000000005609                 pop     rbp
.text:000000000000560A                 pop     r12
.text:000000000000560C                 pop     r13
.text:000000000000560E                 pop     r14
.text:0000000000005610                 pop     r15
.text:0000000000005612                 mov     rdx, rax
.text:0000000000005615                 mov     esi, 1
.text:000000000000561A                 xor     eax, eax
.text:000000000000561C                 jmp     ___fprintf_chk
.text:000000000000561C ; ---------------------------------------------------------------------------
.text:0000000000005621                 align 8
.text:0000000000005628
.text:0000000000005628 loc_5628:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005628                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:0000000000005628                 mov     r12, [rbx+8]    ; jumptable 00000000000054D4 case 2
.text:000000000000562C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005633                 mov     rbx, [rbx]
.text:0000000000005636                 mov     edx, 5          ; category
.text:000000000000563B                 xor     edi, edi        ; domainname
.text:000000000000563D                 call    _dcgettext
.text:0000000000005642                 add     rsp, 28h
.text:0000000000005646                 mov     r8, r12
.text:0000000000005649                 mov     rcx, rbx
.text:000000000000564C                 mov     rdi, rbp
.text:000000000000564F                 mov     rdx, rax
.text:0000000000005652                 mov     esi, 1
.text:0000000000005657                 pop     rbx
.text:0000000000005658                 pop     rbp
.text:0000000000005659                 pop     r12
.text:000000000000565B                 pop     r13
.text:000000000000565D                 pop     r14
.text:000000000000565F                 pop     r15
.text:0000000000005661                 xor     eax, eax
.text:0000000000005663                 jmp     ___fprintf_chk
.text:0000000000005663 ; ---------------------------------------------------------------------------
.text:0000000000005668                 align 10h
.text:0000000000005670
.text:0000000000005670 loc_5670:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005670                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:0000000000005670                 mov     r13, [rbx+10h]  ; jumptable 00000000000054D4 case 3
.text:0000000000005674                 mov     r12, [rbx+8]
.text:0000000000005678                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000567F                 mov     rbx, [rbx]
.text:0000000000005682                 mov     edx, 5          ; category
.text:0000000000005687                 xor     edi, edi        ; domainname
.text:0000000000005689                 call    _dcgettext
.text:000000000000568E                 add     rsp, 28h
.text:0000000000005692                 mov     r9, r13
.text:0000000000005695                 mov     r8, r12
.text:0000000000005698                 mov     rcx, rbx
.text:000000000000569B                 mov     rdi, rbp
.text:000000000000569E                 mov     rdx, rax
.text:00000000000056A1                 pop     rbx
.text:00000000000056A2                 pop     rbp
.text:00000000000056A3                 pop     r12
.text:00000000000056A5                 pop     r13
.text:00000000000056A7                 pop     r14
.text:00000000000056A9                 pop     r15
.text:00000000000056AB                 mov     esi, 1
.text:00000000000056B0                 xor     eax, eax
.text:00000000000056B2                 jmp     ___fprintf_chk
.text:00000000000056B2 ; ---------------------------------------------------------------------------
.text:00000000000056B7                 align 20h
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000056C0                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:00000000000056C0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000054D4 case 4
.text:00000000000056C7                 mov     edx, 5          ; category
.text:00000000000056CC                 xor     edi, edi        ; domainname
.text:00000000000056CE                 mov     r14, [rbx+18h]
.text:00000000000056D2                 mov     r13, [rbx+10h]
.text:00000000000056D6                 mov     r12, [rbx+8]
.text:00000000000056DA                 mov     rbx, [rbx]
.text:00000000000056DD                 call    _dcgettext
.text:00000000000056E2                 sub     rsp, 8
.text:00000000000056E6
.text:00000000000056E6 loc_56E6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000056E6                 push    r14
.text:00000000000056E8                 mov     rdx, rax
.text:00000000000056EB                 mov     r9, r13
.text:00000000000056EE                 mov     r8, r12
.text:00000000000056F1                 mov     rcx, rbx
.text:00000000000056F4                 mov     rdi, rbp
.text:00000000000056F7                 mov     esi, 1
.text:00000000000056FC                 xor     eax, eax
.text:00000000000056FE                 call    ___fprintf_chk
.text:0000000000005703                 pop     rax
.text:0000000000005704                 pop     rdx
.text:0000000000005705                 add     rsp, 28h
.text:0000000000005709                 pop     rbx
.text:000000000000570A                 pop     rbp
.text:000000000000570B                 pop     r12
.text:000000000000570D                 pop     r13
.text:000000000000570F                 pop     r14
.text:0000000000005711                 pop     r15
.text:0000000000005713                 retn
.text:0000000000005713 ; ---------------------------------------------------------------------------
.text:0000000000005714                 align 8
.text:0000000000005718
.text:0000000000005718 loc_5718:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005718                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:0000000000005718                 mov     r15, [rbx+20h]  ; jumptable 00000000000054D4 case 5
.text:000000000000571C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005723                 mov     edx, 5          ; category
.text:0000000000005728                 xor     edi, edi        ; domainname
.text:000000000000572A                 mov     r14, [rbx+18h]
.text:000000000000572E                 mov     r13, [rbx+10h]
.text:0000000000005732                 mov     r12, [rbx+8]
.text:0000000000005736                 mov     rbx, [rbx]
.text:0000000000005739                 call    _dcgettext
.text:000000000000573E                 push    r15
.text:0000000000005740                 jmp     short loc_56E6
.text:0000000000005740 ; ---------------------------------------------------------------------------
.text:0000000000005742                 align 8
.text:0000000000005748
.text:0000000000005748 loc_5748:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005748                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:0000000000005748                 mov     r8, [rbx+8]     ; jumptable 00000000000054D4 case 6
.text:000000000000574C                 mov     r12, [rbx+28h]
.text:0000000000005750                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005757                 mov     r15, [rbx+20h]
.text:000000000000575B                 mov     r14, [rbx+18h]
.text:000000000000575F                 mov     edx, 5          ; category
.text:0000000000005764                 mov     r13, [rbx+10h]
.text:0000000000005768                 xor     edi, edi        ; domainname
.text:000000000000576A                 mov     rbx, [rbx]
.text:000000000000576D                 mov     [rsp+58h+var_58], r8
.text:0000000000005771                 call    _dcgettext
.text:0000000000005776                 sub     rsp, 8
.text:000000000000577A                 mov     r9, r13
.text:000000000000577D                 push    r12
.text:000000000000577F                 push    r15
.text:0000000000005781                 push    r14
.text:0000000000005783
.text:0000000000005783 loc_5783:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005783                 mov     r8, [rsp+78h+var_58]
.text:0000000000005788                 mov     rcx, rbx
.text:000000000000578B                 mov     rdx, rax
.text:000000000000578E                 mov     rdi, rbp
.text:0000000000005791                 mov     esi, 1
.text:0000000000005796                 xor     eax, eax
.text:0000000000005798                 call    ___fprintf_chk
.text:000000000000579D                 add     rsp, 20h
.text:00000000000057A1                 add     rsp, 28h
.text:00000000000057A5                 pop     rbx
.text:00000000000057A6                 pop     rbp
.text:00000000000057A7                 pop     r12
.text:00000000000057A9                 pop     r13
.text:00000000000057AB                 pop     r14
.text:00000000000057AD                 pop     r15
.text:00000000000057AF                 retn
.text:00000000000057B0 ; ---------------------------------------------------------------------------
.text:00000000000057B0
.text:00000000000057B0 loc_57B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000057B0                                         ; DATA XREF: .rodata:jpt_54D4↓o
.text:00000000000057B0                 mov     r9, [rbx+10h]   ; jumptable 00000000000054D4 case 7
.text:00000000000057B4                 mov     r13, [rbx+30h]
.text:00000000000057B8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000057BF                 mov     r12, [rbx+28h]
.text:00000000000057C3                 mov     r15, [rbx+20h]
.text:00000000000057C7                 mov     edx, 5          ; category
.text:00000000000057CC                 mov     r14, [rbx+18h]
.text:00000000000057D0                 mov     r8, [rbx+8]
.text:00000000000057D4                 xor     edi, edi        ; domainname
.text:00000000000057D6                 mov     [rsp+58h+var_50], r9
.text:00000000000057DB                 mov     rbx, [rbx]
.text:00000000000057DE                 mov     [rsp+58h+var_58], r8
.text:00000000000057E2                 call    _dcgettext
.text:00000000000057E7                 push    r13
.text:00000000000057E9                 push    r12
.text:00000000000057EB                 push    r15
.text:00000000000057ED                 push    r14
.text:00000000000057EF                 mov     r9, [rsp+78h+var_50]
.text:00000000000057F4                 jmp     short loc_5783
.text:00000000000057F4 ; ---------------------------------------------------------------------------
.text:00000000000057F6                 align 20h
.text:0000000000005800
.text:0000000000005800 def_54D4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005800                 mov     r10, [rbx+40h]  ; jumptable 00000000000054D4 default case
.text:0000000000005804                 mov     r9, [rbx+38h]
.text:0000000000005808                 mov     edx, 5
.text:000000000000580D                 mov     rax, [rbx+10h]
.text:0000000000005811                 mov     r8, [rbx+8]
.text:0000000000005815                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000581C                 mov     r13, [rbx+30h]
.text:0000000000005820                 mov     r12, [rbx+28h]
.text:0000000000005824                 mov     r15, [rbx+20h]
.text:0000000000005828                 mov     r14, [rbx+18h]
.text:000000000000582C                 mov     [rsp+58h+var_40], r10
.text:0000000000005831                 mov     [rsp+58h+var_48], r9
.text:0000000000005836                 mov     [rsp+58h+var_58], rax
.text:000000000000583A                 mov     [rsp+58h+var_50], r8
.text:000000000000583F                 mov     rbx, [rbx]
.text:0000000000005842                 jmp     loc_55D2
.text:0000000000005842 ; } // starts at 5430
.text:0000000000005842 version_etc_arn endp
.text:0000000000005842
.text:0000000000005842 ; ---------------------------------------------------------------------------
.text:0000000000005847                 align 10h
.text:0000000000005850
.text:0000000000005850 ; =============== S U B R O U T I N E =======================================
.text:0000000000005850
.text:0000000000005850 ; Attributes: info_from_lumina
.text:0000000000005850
.text:0000000000005850 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005850                 public version_etc_ar
.text:0000000000005850 version_etc_ar  proc near
.text:0000000000005850 ; __unwind {
.text:0000000000005850                 xor     r9d, r9d
.text:0000000000005853                 cmp     qword ptr [r8], 0
.text:0000000000005857                 jz      short loc_586B
.text:0000000000005859                 nop     dword ptr [rax+00000000h]
.text:0000000000005860
.text:0000000000005860 loc_5860:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005860                 add     r9, 1
.text:0000000000005864                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005869                 jnz     short loc_5860
.text:000000000000586B
.text:000000000000586B loc_586B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000586B                 jmp     version_etc_arn
.text:000000000000586B ; } // starts at 5850
.text:000000000000586B version_etc_ar  endp
.text:000000000000586B
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870 ; Attributes: info_from_lumina
.text:0000000000005870
.text:0000000000005870 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005870                 public version_etc_va
.text:0000000000005870 version_etc_va  proc near
.text:0000000000005870
.text:0000000000005870 authtab         = qword ptr -68h
.text:0000000000005870 var_10          = qword ptr -10h
.text:0000000000005870
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 sub     rsp, 68h
.text:0000000000005874                 mov     r10, r8
.text:0000000000005877                 xor     r9d, r9d
.text:000000000000587A                 mov     rax, fs:28h
.text:0000000000005883                 mov     [rsp+68h+var_10], rax
.text:0000000000005888                 xor     eax, eax
.text:000000000000588A                 mov     r8, rsp
.text:000000000000588D                 nop     dword ptr [rax]
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005890                 mov     eax, [r10]
.text:0000000000005893                 cmp     eax, 2Fh ; '/'
.text:0000000000005896                 ja      short loc_58DA
.text:0000000000005898                 mov     r11d, eax
.text:000000000000589B                 add     r11, [r10+10h]
.text:000000000000589F                 add     eax, 8
.text:00000000000058A2                 mov     [r10], eax
.text:00000000000058A5
.text:00000000000058A5 loc_58A5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000058A5                 mov     rax, [r11]
.text:00000000000058A8                 test    rax, rax
.text:00000000000058AB                 mov     [r8+r9*8], rax
.text:00000000000058AF                 jz      short loc_58BB
.text:00000000000058B1                 add     r9, 1
.text:00000000000058B5                 cmp     r9, 0Ah
.text:00000000000058B9                 jnz     short loc_5890
.text:00000000000058BB
.text:00000000000058BB loc_58BB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000058BB                 call    version_etc_arn
.text:00000000000058C0                 mov     rax, [rsp+68h+var_10]
.text:00000000000058C5                 xor     rax, fs:28h
.text:00000000000058CE                 jnz     short loc_58D5
.text:00000000000058D0                 add     rsp, 68h
.text:00000000000058D4                 retn
.text:00000000000058D5 ; ---------------------------------------------------------------------------
.text:00000000000058D5
.text:00000000000058D5 loc_58D5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000058D5                 call    ___stack_chk_fail
.text:00000000000058DA ; ---------------------------------------------------------------------------
.text:00000000000058DA
.text:00000000000058DA loc_58DA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000058DA                 mov     r11, [r10+8]
.text:00000000000058DE                 lea     rax, [r11+8]
.text:00000000000058E2                 mov     [r10+8], rax
.text:00000000000058E6                 jmp     short loc_58A5
.text:00000000000058E6 ; } // starts at 5870
.text:00000000000058E6 version_etc_va  endp
.text:00000000000058E6
.text:00000000000058E6 ; ---------------------------------------------------------------------------
.text:00000000000058E8                 align 10h
.text:00000000000058F0
.text:00000000000058F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058F0
.text:00000000000058F0 ; Attributes: info_from_lumina
.text:00000000000058F0
.text:00000000000058F0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000058F0                 public version_etc
.text:00000000000058F0 version_etc     proc near               ; CODE XREF: main+757↑p
.text:00000000000058F0
.text:00000000000058F0 var_C0          = dword ptr -0C0h
.text:00000000000058F0 var_B8          = qword ptr -0B8h
.text:00000000000058F0 var_B0          = qword ptr -0B0h
.text:00000000000058F0 var_A8          = byte ptr -0A8h
.text:00000000000058F0 var_50          = qword ptr -50h
.text:00000000000058F0 var_48          = byte ptr -48h
.text:00000000000058F0 var_28          = qword ptr -28h
.text:00000000000058F0 var_20          = qword ptr -20h
.text:00000000000058F0 arg_0           = byte ptr  8
.text:00000000000058F0
.text:00000000000058F0 ; __unwind {
.text:00000000000058F0                 push    rbp
.text:00000000000058F1                 push    rbx
.text:00000000000058F2                 mov     r10d, 20h ; ' '
.text:00000000000058F8                 xor     r11d, r11d
.text:00000000000058FB                 sub     rsp, 0B8h
.text:0000000000005902                 mov     rax, fs:28h
.text:000000000000590B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005910                 xor     eax, eax
.text:0000000000005912                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000591A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005922                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000592A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000592F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005937                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000593F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005944                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000594C                 xor     r9d, r9d
.text:000000000000594F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005954                 mov     rbp, rax
.text:0000000000005957                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005960
.text:0000000000005960 loc_5960:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005960                 cmp     r10d, 2Fh ; '/'
.text:0000000000005964                 ja      short loc_59BC
.text:0000000000005966                 mov     eax, r10d
.text:0000000000005969                 mov     r11d, 1
.text:000000000000596F                 add     r10d, 8
.text:0000000000005973                 add     rax, rbp
.text:0000000000005976
.text:0000000000005976 loc_5976:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005976                 mov     rax, [rax]
.text:0000000000005979                 test    rax, rax
.text:000000000000597C                 mov     [r8+r9*8], rax
.text:0000000000005980                 jz      short loc_598C
.text:0000000000005982                 add     r9, 1
.text:0000000000005986                 cmp     r9, 0Ah
.text:000000000000598A                 jnz     short loc_5960
.text:000000000000598C
.text:000000000000598C loc_598C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000598C                 test    r11b, r11b
.text:000000000000598F                 jnz     short loc_59B5
.text:0000000000005991
.text:0000000000005991 loc_5991:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005991                 call    version_etc_arn
.text:0000000000005996                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000599B                 xor     rax, fs:28h
.text:00000000000059A4                 jnz     short loc_59B0
.text:00000000000059A6                 add     rsp, 0B8h
.text:00000000000059AD                 pop     rbx
.text:00000000000059AE                 pop     rbp
.text:00000000000059AF                 retn
.text:00000000000059B0 ; ---------------------------------------------------------------------------
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000059B0                 call    ___stack_chk_fail
.text:00000000000059B5 ; ---------------------------------------------------------------------------
.text:00000000000059B5
.text:00000000000059B5 loc_59B5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000059B5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000059BA                 jmp     short loc_5991
.text:00000000000059BC ; ---------------------------------------------------------------------------
.text:00000000000059BC
.text:00000000000059BC loc_59BC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000059BC                 mov     rax, rbx
.text:00000000000059BF                 add     rbx, 8
.text:00000000000059C3                 jmp     short loc_5976
.text:00000000000059C3 ; } // starts at 58F0
.text:00000000000059C3 version_etc     endp
.text:00000000000059C3
.text:00000000000059C3 ; ---------------------------------------------------------------------------
.text:00000000000059C5                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0 ; Attributes: info_from_lumina
.text:00000000000059D0
.text:00000000000059D0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000059D0                 public emit_bug_reporting_address
.text:00000000000059D0 emit_bug_reporting_address proc near
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 push    rbx
.text:00000000000059D1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000059D8                 mov     edx, 5          ; category
.text:00000000000059DD                 xor     edi, edi        ; domainname
.text:00000000000059DF                 call    _dcgettext
.text:00000000000059E4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000059EB                 mov     rsi, rax
.text:00000000000059EE                 mov     edi, 1
.text:00000000000059F3                 xor     eax, eax
.text:00000000000059F5                 call    ___printf_chk
.text:00000000000059FA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005A01                 mov     edx, 5          ; category
.text:0000000000005A06                 xor     edi, edi        ; domainname
.text:0000000000005A08                 call    _dcgettext
.text:0000000000005A0D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005A14                 lea     rdx, unk_67CC
.text:0000000000005A1B                 mov     rsi, rax
.text:0000000000005A1E                 mov     edi, 1
.text:0000000000005A23                 xor     eax, eax
.text:0000000000005A25                 call    ___printf_chk
.text:0000000000005A2A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005A31                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005A38                 xor     edi, edi        ; domainname
.text:0000000000005A3A                 mov     edx, 5          ; category
.text:0000000000005A3F                 call    _dcgettext
.text:0000000000005A44                 mov     rsi, rbx        ; stream
.text:0000000000005A47                 mov     rdi, rax        ; s
.text:0000000000005A4A                 pop     rbx
.text:0000000000005A4B                 jmp     _fputs_unlocked
.text:0000000000005A4B ; } // starts at 59D0
.text:0000000000005A4B emit_bug_reporting_address endp
.text:0000000000005A4B
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50
.text:0000000000005A50                 public xmalloc
.text:0000000000005A50 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000005A50                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 push    rbx
.text:0000000000005A51                 mov     rbx, rdi
.text:0000000000005A54                 call    _malloc
.text:0000000000005A59                 test    rax, rax
.text:0000000000005A5C                 jnz     short loc_5A63
.text:0000000000005A5E                 test    rbx, rbx
.text:0000000000005A61                 jnz     short loc_5A65
.text:0000000000005A63
.text:0000000000005A63 loc_5A63:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005A63                 pop     rbx
.text:0000000000005A64                 retn
.text:0000000000005A65 ; ---------------------------------------------------------------------------
.text:0000000000005A65
.text:0000000000005A65 loc_5A65:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005A65                 call    xalloc_die
.text:0000000000005A65 ; } // starts at 5A50
.text:0000000000005A65 xmalloc         endp
.text:0000000000005A65
.text:0000000000005A65 ; ---------------------------------------------------------------------------
.text:0000000000005A6A                 align 10h
.text:0000000000005A70
.text:0000000000005A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A70
.text:0000000000005A70 ; Attributes: info_from_lumina
.text:0000000000005A70
.text:0000000000005A70 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005A70                 public xnmalloc
.text:0000000000005A70 xnmalloc        proc near
.text:0000000000005A70 ; __unwind {
.text:0000000000005A70                 mov     rax, rdi
.text:0000000000005A73                 mul     rsi
.text:0000000000005A76                 mov     rdi, rax
.text:0000000000005A79                 seto    al
.text:0000000000005A7C                 test    rdi, rdi
.text:0000000000005A7F                 js      short loc_5A8B
.text:0000000000005A81                 movzx   eax, al
.text:0000000000005A84                 test    rax, rax
.text:0000000000005A87                 jnz     short loc_5A8B
.text:0000000000005A89                 jmp     short xmalloc
.text:0000000000005A8B ; ---------------------------------------------------------------------------
.text:0000000000005A8B
.text:0000000000005A8B loc_5A8B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000005A8B                                         ; xnmalloc+17↑j
.text:0000000000005A8B                 sub     rsp, 8
.text:0000000000005A8F                 call    xalloc_die
.text:0000000000005A8F ; } // starts at 5A70
.text:0000000000005A8F xnmalloc        endp
.text:0000000000005A8F
.text:0000000000005A8F ; ---------------------------------------------------------------------------
.text:0000000000005A94                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0
.text:0000000000005AA0                 public xcharalloc
.text:0000000000005AA0 xcharalloc      proc near
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 jmp     short xmalloc
.text:0000000000005AA0 ; } // starts at 5AA0
.text:0000000000005AA0 xcharalloc      endp
.text:0000000000005AA0
.text:0000000000005AA0 ; ---------------------------------------------------------------------------
.text:0000000000005AA2                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AB0
.text:0000000000005AB0 ; Attributes: info_from_lumina
.text:0000000000005AB0
.text:0000000000005AB0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005AB0                 public xrealloc
.text:0000000000005AB0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005AB0                                         ; quotearg_n_options+182↑p ...
.text:0000000000005AB0 ; __unwind {
.text:0000000000005AB0                 test    rsi, rsi
.text:0000000000005AB3                 push    rbx
.text:0000000000005AB4                 mov     rbx, rsi
.text:0000000000005AB7                 jnz     short loc_5ABE
.text:0000000000005AB9                 test    rdi, rdi
.text:0000000000005ABC                 jnz     short loc_5AD8
.text:0000000000005ABE
.text:0000000000005ABE loc_5ABE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000005ABE                 mov     rsi, rbx        ; size
.text:0000000000005AC1                 call    _realloc
.text:0000000000005AC6                 test    rax, rax
.text:0000000000005AC9                 jnz     short loc_5AD0
.text:0000000000005ACB                 test    rbx, rbx
.text:0000000000005ACE                 jnz     short loc_5AE1
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005AD0                 pop     rbx
.text:0000000000005AD1                 retn
.text:0000000000005AD1 ; ---------------------------------------------------------------------------
.text:0000000000005AD2                 align 8
.text:0000000000005AD8
.text:0000000000005AD8 loc_5AD8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005AD8                 call    _free
.text:0000000000005ADD                 xor     eax, eax
.text:0000000000005ADF                 pop     rbx
.text:0000000000005AE0                 retn
.text:0000000000005AE1 ; ---------------------------------------------------------------------------
.text:0000000000005AE1
.text:0000000000005AE1 loc_5AE1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005AE1                 call    xalloc_die
.text:0000000000005AE1 ; } // starts at 5AB0
.text:0000000000005AE1 xrealloc        endp
.text:0000000000005AE1
.text:0000000000005AE1 ; ---------------------------------------------------------------------------
.text:0000000000005AE6                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0 ; Attributes: info_from_lumina
.text:0000000000005AF0
.text:0000000000005AF0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005AF0                 public xnrealloc
.text:0000000000005AF0 xnrealloc       proc near
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 mov     rax, rsi
.text:0000000000005AF3                 mul     rdx
.text:0000000000005AF6                 mov     rsi, rax
.text:0000000000005AF9                 seto    al
.text:0000000000005AFC                 test    rsi, rsi
.text:0000000000005AFF                 js      short loc_5B0B
.text:0000000000005B01                 movzx   eax, al
.text:0000000000005B04                 test    rax, rax
.text:0000000000005B07                 jnz     short loc_5B0B
.text:0000000000005B09                 jmp     short xrealloc
.text:0000000000005B0B ; ---------------------------------------------------------------------------
.text:0000000000005B0B
.text:0000000000005B0B loc_5B0B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000005B0B                                         ; xnrealloc+17↑j
.text:0000000000005B0B                 sub     rsp, 8
.text:0000000000005B0F                 call    xalloc_die
.text:0000000000005B0F ; } // starts at 5AF0
.text:0000000000005B0F xnrealloc       endp
.text:0000000000005B0F
.text:0000000000005B0F ; ---------------------------------------------------------------------------
.text:0000000000005B14                 align 20h
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20 ; Attributes: info_from_lumina
.text:0000000000005B20
.text:0000000000005B20 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005B20                 public x2nrealloc
.text:0000000000005B20 x2nrealloc      proc near
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 test    rdi, rdi
.text:0000000000005B23                 mov     r9, rdx
.text:0000000000005B26                 mov     rcx, [rsi]
.text:0000000000005B29                 jz      short loc_5B60
.text:0000000000005B2B                 xor     edx, edx
.text:0000000000005B2D                 mov     rax, 5555555555555554h
.text:0000000000005B37                 div     r9
.text:0000000000005B3A                 cmp     rax, rcx
.text:0000000000005B3D                 jbe     short loc_5B7B
.text:0000000000005B3F                 mov     rax, rcx
.text:0000000000005B42                 shr     rax, 1
.text:0000000000005B45                 lea     rcx, [rax+rcx+1]
.text:0000000000005B4A
.text:0000000000005B4A loc_5B4A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005B4A                 mov     [rsi], rcx
.text:0000000000005B4D                 imul    rcx, r9
.text:0000000000005B51                 mov     rsi, rcx
.text:0000000000005B54                 jmp     xrealloc
.text:0000000000005B54 ; ---------------------------------------------------------------------------
.text:0000000000005B59                 align 20h
.text:0000000000005B60
.text:0000000000005B60 loc_5B60:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005B60                 test    rcx, rcx
.text:0000000000005B63                 jz      short loc_5B88
.text:0000000000005B65
.text:0000000000005B65 loc_5B65:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005B65                 mov     rax, rcx
.text:0000000000005B68                 mul     r9
.text:0000000000005B6B                 seto    dl
.text:0000000000005B6E                 test    rax, rax
.text:0000000000005B71                 movzx   edx, dl
.text:0000000000005B74                 js      short loc_5B7B
.text:0000000000005B76                 test    rdx, rdx
.text:0000000000005B79                 jz      short loc_5B4A
.text:0000000000005B7B
.text:0000000000005B7B loc_5B7B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005B7B                                         ; x2nrealloc+54↑j
.text:0000000000005B7B                 sub     rsp, 8
.text:0000000000005B7F                 call    xalloc_die
.text:0000000000005B7F ; ---------------------------------------------------------------------------
.text:0000000000005B84                 align 8
.text:0000000000005B88
.text:0000000000005B88 loc_5B88:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005B88                 xor     edx, edx
.text:0000000000005B8A                 mov     eax, 80h
.text:0000000000005B8F                 xor     r8d, r8d
.text:0000000000005B92                 div     r9
.text:0000000000005B95                 test    rax, rax
.text:0000000000005B98                 setz    r8b
.text:0000000000005B9C                 lea     rcx, [r8+rax]
.text:0000000000005BA0                 jmp     short loc_5B65
.text:0000000000005BA0 ; } // starts at 5B20
.text:0000000000005BA0 x2nrealloc      endp
.text:0000000000005BA0
.text:0000000000005BA0 ; ---------------------------------------------------------------------------
.text:0000000000005BA2                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BB0
.text:0000000000005BB0 ; Attributes: info_from_lumina
.text:0000000000005BB0
.text:0000000000005BB0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005BB0                 public x2realloc
.text:0000000000005BB0 x2realloc       proc near               ; CODE XREF: readlinebuffer_delim+6C↑p
.text:0000000000005BB0 ; __unwind {
.text:0000000000005BB0                 test    rdi, rdi
.text:0000000000005BB3                 mov     rax, [rsi]
.text:0000000000005BB6                 jz      short loc_5BE0
.text:0000000000005BB8                 mov     rdx, 5555555555555553h
.text:0000000000005BC2                 cmp     rax, rdx
.text:0000000000005BC5                 ja      short loc_5BF1
.text:0000000000005BC7                 mov     rdx, rax
.text:0000000000005BCA                 shr     rdx, 1
.text:0000000000005BCD                 lea     rax, [rdx+rax+1]
.text:0000000000005BD2
.text:0000000000005BD2 loc_5BD2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005BD2                 mov     [rsi], rax
.text:0000000000005BD5                 mov     rsi, rax
.text:0000000000005BD8                 jmp     xrealloc
.text:0000000000005BD8 ; ---------------------------------------------------------------------------
.text:0000000000005BDD                 align 20h
.text:0000000000005BE0
.text:0000000000005BE0 loc_5BE0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005BE0                 test    rax, rax
.text:0000000000005BE3                 mov     edx, 80h
.text:0000000000005BE8                 cmovz   rax, rdx
.text:0000000000005BEC                 test    rax, rax
.text:0000000000005BEF                 jns     short loc_5BD2
.text:0000000000005BF1
.text:0000000000005BF1 loc_5BF1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005BF1                 sub     rsp, 8
.text:0000000000005BF5                 call    xalloc_die
.text:0000000000005BF5 ; } // starts at 5BB0
.text:0000000000005BF5 x2realloc       endp
.text:0000000000005BF5
.text:0000000000005BF5 ; ---------------------------------------------------------------------------
.text:0000000000005BFA                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00
.text:0000000000005C00 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005C00                 public xzalloc
.text:0000000000005C00 xzalloc         proc near
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 push    rbx
.text:0000000000005C01                 mov     rbx, rdi
.text:0000000000005C04                 call    xmalloc
.text:0000000000005C09                 mov     rdx, rbx        ; n
.text:0000000000005C0C                 xor     esi, esi        ; c
.text:0000000000005C0E                 mov     rdi, rax        ; s
.text:0000000000005C11                 pop     rbx
.text:0000000000005C12                 jmp     _memset
.text:0000000000005C12 ; } // starts at 5C00
.text:0000000000005C12 xzalloc         endp
.text:0000000000005C12
.text:0000000000005C12 ; ---------------------------------------------------------------------------
.text:0000000000005C17                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20 ; Attributes: info_from_lumina
.text:0000000000005C20
.text:0000000000005C20 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005C20                 public xcalloc
.text:0000000000005C20 xcalloc         proc near
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 mov     rax, rdi
.text:0000000000005C23                 sub     rsp, 8
.text:0000000000005C27                 mul     rsi
.text:0000000000005C2A                 seto    dl
.text:0000000000005C2D                 test    rax, rax
.text:0000000000005C30                 js      short loc_5C49
.text:0000000000005C32                 movzx   edx, dl
.text:0000000000005C35                 test    rdx, rdx
.text:0000000000005C38                 jnz     short loc_5C49
.text:0000000000005C3A                 call    _calloc
.text:0000000000005C3F                 test    rax, rax
.text:0000000000005C42                 jz      short loc_5C49
.text:0000000000005C44                 add     rsp, 8
.text:0000000000005C48                 retn
.text:0000000000005C49 ; ---------------------------------------------------------------------------
.text:0000000000005C49
.text:0000000000005C49 loc_5C49:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005C49                                         ; xcalloc+18↑j ...
.text:0000000000005C49                 call    xalloc_die
.text:0000000000005C49 ; } // starts at 5C20
.text:0000000000005C49 xcalloc         endp
.text:0000000000005C49
.text:0000000000005C49 ; ---------------------------------------------------------------------------
.text:0000000000005C4E                 align 10h
.text:0000000000005C50
.text:0000000000005C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C50
.text:0000000000005C50 ; Attributes: info_from_lumina
.text:0000000000005C50
.text:0000000000005C50 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005C50                 public xmemdup
.text:0000000000005C50 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005C50                                         ; xstrdup+11↓j
.text:0000000000005C50 ; __unwind {
.text:0000000000005C50                 push    rbp
.text:0000000000005C51                 push    rbx
.text:0000000000005C52                 mov     rbp, rdi
.text:0000000000005C55                 mov     rdi, rsi
.text:0000000000005C58                 mov     rbx, rsi
.text:0000000000005C5B                 sub     rsp, 8
.text:0000000000005C5F                 call    xmalloc
.text:0000000000005C64                 add     rsp, 8
.text:0000000000005C68                 mov     rdx, rbx        ; n
.text:0000000000005C6B                 mov     rsi, rbp        ; src
.text:0000000000005C6E                 pop     rbx
.text:0000000000005C6F                 pop     rbp
.text:0000000000005C70                 mov     rdi, rax        ; dest
.text:0000000000005C73                 jmp     _memcpy
.text:0000000000005C73 ; } // starts at 5C50
.text:0000000000005C73 xmemdup         endp
.text:0000000000005C73
.text:0000000000005C73 ; ---------------------------------------------------------------------------
.text:0000000000005C78                 align 20h
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80
.text:0000000000005C80 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005C80                 public xstrdup
.text:0000000000005C80 xstrdup         proc near
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 push    rbx
.text:0000000000005C81                 mov     rbx, rdi
.text:0000000000005C84                 call    _strlen
.text:0000000000005C89                 mov     rdi, rbx        ; src
.text:0000000000005C8C                 lea     rsi, [rax+1]    ; n
.text:0000000000005C90                 pop     rbx
.text:0000000000005C91                 jmp     short xmemdup
.text:0000000000005C91 ; } // starts at 5C80
.text:0000000000005C91 xstrdup         endp
.text:0000000000005C91
.text:0000000000005C91 ; ---------------------------------------------------------------------------
.text:0000000000005C93                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CA0
.text:0000000000005CA0 ; Attributes: noreturn info_from_lumina
.text:0000000000005CA0
.text:0000000000005CA0 ; void __cdecl xalloc_die()
.text:0000000000005CA0                 public xalloc_die
.text:0000000000005CA0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4C76↑p
.text:0000000000005CA0                                         ; xmalloc:loc_5A65↑p ...
.text:0000000000005CA0 ; __unwind {
.text:0000000000005CA0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005CA7                 sub     rsp, 8
.text:0000000000005CAB                 mov     edx, 5          ; category
.text:0000000000005CB0                 xor     edi, edi        ; domainname
.text:0000000000005CB2                 call    _dcgettext
.text:0000000000005CB7                 mov     edi, cs:exit_failure ; status
.text:0000000000005CBD                 lea     rdx, aS_0+2     ; format
.text:0000000000005CC4                 mov     rcx, rax
.text:0000000000005CC7                 xor     esi, esi        ; errnum
.text:0000000000005CC9                 xor     eax, eax
.text:0000000000005CCB                 call    _error
.text:0000000000005CD0                 call    _abort
.text:0000000000005CD0 ; } // starts at 5CA0
.text:0000000000005CD0 xalloc_die      endp
.text:0000000000005CD0
.text:0000000000005CD0 ; ---------------------------------------------------------------------------
.text:0000000000005CD5                 align 20h
.text:0000000000005CE0
.text:0000000000005CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CE0
.text:0000000000005CE0
.text:0000000000005CE0 ; __int64 __fastcall collate_error(int errnum)
.text:0000000000005CE0 collate_error   proc near               ; CODE XREF: xmemcoll+33↓p
.text:0000000000005CE0                                         ; xmemcoll0+35↓p
.text:0000000000005CE0 ; __unwind {
.text:0000000000005CE0                 push    r14
.text:0000000000005CE2                 push    r13
.text:0000000000005CE4                 mov     r14d, edi
.text:0000000000005CE7                 push    r12
.text:0000000000005CE9                 push    rbp
.text:0000000000005CEA                 mov     r12, rdx
.text:0000000000005CED                 push    rbx
.text:0000000000005CEE                 mov     rbx, rsi
.text:0000000000005CF1                 lea     rsi, aStringComparis ; "string comparison failed"
.text:0000000000005CF8                 mov     edx, 5          ; category
.text:0000000000005CFD                 xor     edi, edi        ; domainname
.text:0000000000005CFF                 mov     r13, r8
.text:0000000000005D02                 mov     rbp, rcx
.text:0000000000005D05                 call    _dcgettext
.text:0000000000005D0A                 mov     esi, r14d       ; errnum
.text:0000000000005D0D                 mov     rdx, rax        ; format
.text:0000000000005D10                 xor     edi, edi        ; status
.text:0000000000005D12                 xor     eax, eax
.text:0000000000005D14                 call    _error
.text:0000000000005D19                 lea     rsi, aSetLcAllCToWor ; "Set LC_ALL='C' to work around the probl"...
.text:0000000000005D20                 mov     edx, 5          ; category
.text:0000000000005D25                 xor     edi, edi        ; domainname
.text:0000000000005D27                 call    _dcgettext
.text:0000000000005D2C                 xor     esi, esi        ; errnum
.text:0000000000005D2E                 mov     rdx, rax        ; format
.text:0000000000005D31                 xor     edi, edi        ; status
.text:0000000000005D33                 xor     eax, eax
.text:0000000000005D35                 call    _error
.text:0000000000005D3A                 mov     rcx, r13
.text:0000000000005D3D                 mov     rdx, rbp
.text:0000000000005D40                 mov     esi, 8
.text:0000000000005D45                 mov     edi, 1
.text:0000000000005D4A                 call    quotearg_n_style_mem
.text:0000000000005D4F                 mov     rcx, r12
.text:0000000000005D52                 mov     rdx, rbx
.text:0000000000005D55                 mov     esi, 8
.text:0000000000005D5A                 xor     edi, edi
.text:0000000000005D5C                 mov     rbp, rax
.text:0000000000005D5F                 call    quotearg_n_style_mem
.text:0000000000005D64                 lea     rsi, aTheStringsComp ; "The strings compared were %s and %s."
.text:0000000000005D6B                 mov     rbx, rax
.text:0000000000005D6E                 mov     edx, 5          ; category
.text:0000000000005D73                 xor     edi, edi        ; domainname
.text:0000000000005D75                 call    _dcgettext
.text:0000000000005D7A                 mov     r8, rbp
.text:0000000000005D7D                 mov     rcx, rbx
.text:0000000000005D80                 mov     edi, cs:exit_failure ; status
.text:0000000000005D86                 pop     rbx
.text:0000000000005D87                 pop     rbp
.text:0000000000005D88                 pop     r12
.text:0000000000005D8A                 pop     r13
.text:0000000000005D8C                 pop     r14
.text:0000000000005D8E                 mov     rdx, rax        ; format
.text:0000000000005D91                 xor     esi, esi        ; errnum
.text:0000000000005D93                 xor     eax, eax
.text:0000000000005D95                 jmp     _error
.text:0000000000005D95 ; } // starts at 5CE0
.text:0000000000005D95 collate_error   endp
.text:0000000000005D95
.text:0000000000005D95 ; ---------------------------------------------------------------------------
.text:0000000000005D9A                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DA0
.text:0000000000005DA0
.text:0000000000005DA0                 public xmemcoll
.text:0000000000005DA0 xmemcoll        proc near               ; CODE XREF: different+76↑p
.text:0000000000005DA0 ; __unwind {
.text:0000000000005DA0                 push    r14
.text:0000000000005DA2                 push    r13
.text:0000000000005DA4                 mov     r13, rcx
.text:0000000000005DA7                 push    r12
.text:0000000000005DA9                 push    rbp
.text:0000000000005DAA                 mov     r12, rdx
.text:0000000000005DAD                 push    rbx
.text:0000000000005DAE                 mov     rbp, rsi
.text:0000000000005DB1                 mov     rbx, rdi
.text:0000000000005DB4                 call    memcoll
.text:0000000000005DB9                 mov     r14d, eax
.text:0000000000005DBC                 call    ___errno_location
.text:0000000000005DC1                 mov     edi, [rax]      ; errnum
.text:0000000000005DC3                 test    edi, edi
.text:0000000000005DC5                 jz      short loc_5DD8
.text:0000000000005DC7                 mov     r8, r13
.text:0000000000005DCA                 mov     rcx, r12
.text:0000000000005DCD                 mov     rdx, rbp
.text:0000000000005DD0                 mov     rsi, rbx
.text:0000000000005DD3                 call    collate_error
.text:0000000000005DD8
.text:0000000000005DD8 loc_5DD8:                               ; CODE XREF: xmemcoll+25↑j
.text:0000000000005DD8                 pop     rbx
.text:0000000000005DD9                 mov     eax, r14d
.text:0000000000005DDC                 pop     rbp
.text:0000000000005DDD                 pop     r12
.text:0000000000005DDF                 pop     r13
.text:0000000000005DE1                 pop     r14
.text:0000000000005DE3                 retn
.text:0000000000005DE3 ; } // starts at 5DA0
.text:0000000000005DE3 xmemcoll        endp
.text:0000000000005DE3
.text:0000000000005DE3 ; ---------------------------------------------------------------------------
.text:0000000000005DE4                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DF0
.text:0000000000005DF0
.text:0000000000005DF0                 public xmemcoll0
.text:0000000000005DF0 xmemcoll0       proc near
.text:0000000000005DF0 ; __unwind {
.text:0000000000005DF0                 push    r14
.text:0000000000005DF2                 push    r13
.text:0000000000005DF4                 mov     r14, rcx
.text:0000000000005DF7                 push    r12
.text:0000000000005DF9                 push    rbp
.text:0000000000005DFA                 mov     r12, rdx
.text:0000000000005DFD                 push    rbx
.text:0000000000005DFE                 mov     rbp, rdi
.text:0000000000005E01                 mov     rbx, rsi
.text:0000000000005E04                 call    memcoll0
.text:0000000000005E09                 mov     r13d, eax
.text:0000000000005E0C                 call    ___errno_location
.text:0000000000005E11                 mov     edi, [rax]      ; errnum
.text:0000000000005E13                 test    edi, edi
.text:0000000000005E15                 jz      short loc_5E2A
.text:0000000000005E17                 lea     rdx, [rbx-1]
.text:0000000000005E1B                 lea     r8, [r14-1]
.text:0000000000005E1F                 mov     rcx, r12
.text:0000000000005E22                 mov     rsi, rbp
.text:0000000000005E25                 call    collate_error
.text:0000000000005E2A
.text:0000000000005E2A loc_5E2A:                               ; CODE XREF: xmemcoll0+25↑j
.text:0000000000005E2A                 pop     rbx
.text:0000000000005E2B                 mov     eax, r13d
.text:0000000000005E2E                 pop     rbp
.text:0000000000005E2F                 pop     r12
.text:0000000000005E31                 pop     r13
.text:0000000000005E33                 pop     r14
.text:0000000000005E35                 retn
.text:0000000000005E35 ; } // starts at 5DF0
.text:0000000000005E35 xmemcoll0       endp
.text:0000000000005E35
.text:0000000000005E35 ; ---------------------------------------------------------------------------
.text:0000000000005E36                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40
.text:0000000000005E40 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000005E40                 public xstrtoul
.text:0000000000005E40 xstrtoul        proc near               ; CODE XREF: main+9EC↑p
.text:0000000000005E40                                         ; size_opt+2D↑p
.text:0000000000005E40
.text:0000000000005E40 base            = dword ptr -50h
.text:0000000000005E40 endptr          = qword ptr -48h
.text:0000000000005E40 var_40          = qword ptr -40h
.text:0000000000005E40
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 push    r15
.text:0000000000005E42                 push    r14
.text:0000000000005E44                 push    r13
.text:0000000000005E46                 push    r12
.text:0000000000005E48                 push    rbp
.text:0000000000005E49                 push    rbx
.text:0000000000005E4A                 sub     rsp, 28h
.text:0000000000005E4E                 mov     rax, fs:28h
.text:0000000000005E57                 mov     [rsp+58h+var_40], rax
.text:0000000000005E5C                 xor     eax, eax
.text:0000000000005E5E                 cmp     edx, 24h ; '$'
.text:0000000000005E61                 ja      loc_61C5
.text:0000000000005E67                 lea     rax, [rsp+58h+endptr]
.text:0000000000005E6C                 mov     r15, rsi
.text:0000000000005E6F                 test    rsi, rsi
.text:0000000000005E72                 mov     rbp, rdi
.text:0000000000005E75                 mov     [rsp+58h+base], edx
.text:0000000000005E79                 mov     r14, rcx
.text:0000000000005E7C                 mov     r13, r8
.text:0000000000005E7F                 cmovz   r15, rax
.text:0000000000005E83                 call    ___errno_location
.text:0000000000005E88                 mov     dword ptr [rax], 0
.text:0000000000005E8E                 mov     r12, rax
.text:0000000000005E91                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000005E95                 call    ___ctype_b_loc
.text:0000000000005E9A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000005E9E                 mov     rsi, [rax]
.text:0000000000005EA1                 mov     rax, rbp
.text:0000000000005EA4                 jmp     short loc_5EB7
.text:0000000000005EA4 ; ---------------------------------------------------------------------------
.text:0000000000005EA6                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 loc_5EB0:                               ; CODE XREF: xstrtoul+7F↓j
.text:0000000000005EB0                 add     rax, 1
.text:0000000000005EB4                 movzx   ebx, byte ptr [rax]
.text:0000000000005EB7
.text:0000000000005EB7 loc_5EB7:                               ; CODE XREF: xstrtoul+64↑j
.text:0000000000005EB7                 movzx   ecx, bl
.text:0000000000005EBA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000005EBF                 jnz     short loc_5EB0
.text:0000000000005EC1                 cmp     bl, 2Dh ; '-'
.text:0000000000005EC4                 jz      short loc_5F18
.text:0000000000005EC6                 mov     rsi, r15        ; endptr
.text:0000000000005EC9                 mov     rdi, rbp        ; nptr
.text:0000000000005ECC                 call    _strtoul
.text:0000000000005ED1                 mov     rcx, [r15]
.text:0000000000005ED4                 mov     rbx, rax
.text:0000000000005ED7                 cmp     rcx, rbp
.text:0000000000005EDA                 jz      short loc_5F08
.text:0000000000005EDC                 mov     eax, [r12]
.text:0000000000005EE0                 test    eax, eax
.text:0000000000005EE2                 jz      short loc_5F48
.text:0000000000005EE4                 cmp     eax, 22h ; '"'
.text:0000000000005EE7                 mov     ebp, 1
.text:0000000000005EEC                 jnz     short loc_5F18
.text:0000000000005EEE
.text:0000000000005EEE loc_5EEE:                               ; CODE XREF: xstrtoul+10A↓j
.text:0000000000005EEE                 test    r13, r13
.text:0000000000005EF1                 jz      short loc_5EFC
.text:0000000000005EF3                 movzx   r12d, byte ptr [rcx]
.text:0000000000005EF7                 test    r12b, r12b
.text:0000000000005EFA                 jnz     short loc_5F77
.text:0000000000005EFC
.text:0000000000005EFC loc_5EFC:                               ; CODE XREF: xstrtoul+B1↑j
.text:0000000000005EFC                 mov     [r14], rbx
.text:0000000000005EFF                 jmp     short loc_5F1D
.text:0000000000005EFF ; ---------------------------------------------------------------------------
.text:0000000000005F01                 align 8
.text:0000000000005F08
.text:0000000000005F08 loc_5F08:                               ; CODE XREF: xstrtoul+9A↑j
.text:0000000000005F08                 test    r13, r13
.text:0000000000005F0B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005F10                 jnz     short loc_5F50
.text:0000000000005F12                 nop     word ptr [rax+rax+00h]
.text:0000000000005F18
.text:0000000000005F18 loc_5F18:                               ; CODE XREF: xstrtoul+84↑j
.text:0000000000005F18                                         ; xstrtoul+AC↑j ...
.text:0000000000005F18                 mov     ebp, 4
.text:0000000000005F1D
.text:0000000000005F1D loc_5F1D:                               ; CODE XREF: xstrtoul+BF↑j
.text:0000000000005F1D                                         ; xstrtoul+217↓j ...
.text:0000000000005F1D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000005F22                 xor     rdi, fs:28h
.text:0000000000005F2B                 mov     eax, ebp
.text:0000000000005F2D                 jnz     loc_61C0
.text:0000000000005F33                 add     rsp, 28h
.text:0000000000005F37                 pop     rbx
.text:0000000000005F38                 pop     rbp
.text:0000000000005F39                 pop     r12
.text:0000000000005F3B                 pop     r13
.text:0000000000005F3D                 pop     r14
.text:0000000000005F3F                 pop     r15
.text:0000000000005F41                 retn
.text:0000000000005F41 ; ---------------------------------------------------------------------------
.text:0000000000005F42                 align 8
.text:0000000000005F48
.text:0000000000005F48 loc_5F48:                               ; CODE XREF: xstrtoul+A2↑j
.text:0000000000005F48                 xor     ebp, ebp
.text:0000000000005F4A                 jmp     short loc_5EEE
.text:0000000000005F4A ; ---------------------------------------------------------------------------
.text:0000000000005F4C                 align 10h
.text:0000000000005F50
.text:0000000000005F50 loc_5F50:                               ; CODE XREF: xstrtoul+D0↑j
.text:0000000000005F50                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000005F55                 test    r12b, r12b
.text:0000000000005F58                 jz      short loc_5F18
.text:0000000000005F5A                 movsx   esi, r12b       ; c
.text:0000000000005F5E                 mov     rdi, r13        ; s
.text:0000000000005F61                 xor     ebp, ebp
.text:0000000000005F63                 call    _strchr
.text:0000000000005F68                 test    rax, rax
.text:0000000000005F6B                 mov     ebx, 1
.text:0000000000005F70                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005F75                 jz      short loc_5F18
.text:0000000000005F77
.text:0000000000005F77 loc_5F77:                               ; CODE XREF: xstrtoul+BA↑j
.text:0000000000005F77                 movsx   esi, r12b       ; c
.text:0000000000005F7B                 mov     rdi, r13        ; s
.text:0000000000005F7E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005F83                 call    _strchr
.text:0000000000005F88                 test    rax, rax
.text:0000000000005F8B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005F90                 jz      def_6016        ; jumptable 0000000000006016 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005F96                 lea     eax, [r12-45h]
.text:0000000000005F9B                 cmp     al, 2Fh ; '/'
.text:0000000000005F9D                 ja      short loc_5FF0
.text:0000000000005F9F                 mov     rdx, 814400308945h
.text:0000000000005FA9                 bt      rdx, rax
.text:0000000000005FAD                 jnb     short loc_5FF0
.text:0000000000005FAF                 mov     esi, 30h ; '0'  ; c
.text:0000000000005FB4                 mov     rdi, r13        ; s
.text:0000000000005FB7                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005FBC                 call    _strchr
.text:0000000000005FC1                 test    rax, rax
.text:0000000000005FC4                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005FC9                 jz      short loc_5FF0
.text:0000000000005FCB                 movzx   eax, byte ptr [rcx+1]
.text:0000000000005FCF                 cmp     al, 44h ; 'D'
.text:0000000000005FD1                 jz      short loc_5FDF
.text:0000000000005FD3                 cmp     al, 69h ; 'i'
.text:0000000000005FD5                 jz      loc_61A8
.text:0000000000005FDB                 cmp     al, 42h ; 'B'
.text:0000000000005FDD                 jnz     short loc_5FF0
.text:0000000000005FDF
.text:0000000000005FDF loc_5FDF:                               ; CODE XREF: xstrtoul+191↑j
.text:0000000000005FDF                 mov     edi, 2
.text:0000000000005FE4                 mov     esi, 3E8h
.text:0000000000005FE9                 jmp     short loc_5FFA
.text:0000000000005FE9 ; ---------------------------------------------------------------------------
.text:0000000000005FEB                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 loc_5FF0:                               ; CODE XREF: xstrtoul+15D↑j
.text:0000000000005FF0                                         ; xstrtoul+16D↑j ...
.text:0000000000005FF0                 mov     edi, 1
.text:0000000000005FF5                 mov     esi, 400h
.text:0000000000005FFA
.text:0000000000005FFA loc_5FFA:                               ; CODE XREF: xstrtoul+1A9↑j
.text:0000000000005FFA                                         ; xstrtoul+37B↓j
.text:0000000000005FFA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000005FFE                 cmp     r12b, 35h
.text:0000000000006002                 ja      short def_6016  ; jumptable 0000000000006016 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006004                 lea     rdx, jpt_6016
.text:000000000000600B                 movzx   r12d, r12b
.text:000000000000600F                 movsxd  rax, ds:(jpt_6016 - 7B80h)[rdx+r12*4]
.text:0000000000006013                 add     rax, rdx
.text:0000000000006016                 jmp     rax             ; switch jump
.text:0000000000006018 ; ---------------------------------------------------------------------------
.text:0000000000006018
.text:0000000000006018 loc_6018:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006018                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:0000000000006018                 mov     rax, rbx        ; jumptable 0000000000006016 cases 77,109
.text:000000000000601B                 mul     rsi
.text:000000000000601E                 jo      loc_6211
.text:0000000000006024                 xor     r8d, r8d
.text:0000000000006027
.text:0000000000006027 loc_6027:                               ; CODE XREF: xstrtoul+34E↓j
.text:0000000000006027                                         ; xstrtoul+35E↓j ...
.text:0000000000006027                 mul     rsi
.text:000000000000602A                 jo      loc_6202
.text:0000000000006030                 mov     rbx, rax
.text:0000000000006033
.text:0000000000006033 loc_6033:                               ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000006033                 or      ebp, r8d
.text:0000000000006036                 db      2Eh
.text:0000000000006036                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006040
.text:0000000000006040 loc_6040:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006040                                         ; xstrtoul+23B↓j ...
.text:0000000000006040                 movsxd  rdi, edi        ; jumptable 0000000000006016 case 99
.text:0000000000006043                 mov     eax, ebp
.text:0000000000006045                 add     rcx, rdi
.text:0000000000006048                 or      eax, 2
.text:000000000000604B                 mov     [r15], rcx
.text:000000000000604E                 cmp     byte ptr [rcx], 0
.text:0000000000006051                 mov     [r14], rbx
.text:0000000000006054                 cmovnz  ebp, eax
.text:0000000000006057                 jmp     loc_5F1D
.text:000000000000605C ; ---------------------------------------------------------------------------
.text:000000000000605C
.text:000000000000605C def_6016:                               ; CODE XREF: xstrtoul+150↑j
.text:000000000000605C                                         ; xstrtoul+1C2↑j ...
.text:000000000000605C                 mov     [r14], rbx      ; jumptable 0000000000006016 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000605F                 or      ebp, 2
.text:0000000000006062                 jmp     loc_5F1D
.text:0000000000006067 ; ---------------------------------------------------------------------------
.text:0000000000006067
.text:0000000000006067 loc_6067:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006067                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:0000000000006067                 mov     edx, 2          ; jumptable 0000000000006016 case 119
.text:000000000000606C                 mov     rax, rdx
.text:000000000000606F                 mul     rbx
.text:0000000000006072                 jo      loc_610E
.text:0000000000006078                 add     rbx, rbx
.text:000000000000607B                 jmp     short loc_6040  ; jumptable 0000000000006016 case 99
.text:000000000000607D ; ---------------------------------------------------------------------------
.text:000000000000607D
.text:000000000000607D loc_607D:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000607D                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:000000000000607D                 mov     edx, 200h       ; jumptable 0000000000006016 case 98
.text:0000000000006082                 mov     rax, rdx
.text:0000000000006085                 mul     rbx
.text:0000000000006088                 jo      loc_610E
.text:000000000000608E                 shl     rbx, 9
.text:0000000000006092                 jmp     short loc_6040  ; jumptable 0000000000006016 case 99
.text:0000000000006094 ; ---------------------------------------------------------------------------
.text:0000000000006094
.text:0000000000006094 loc_6094:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006094                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:0000000000006094                 mov     r8d, 7          ; jumptable 0000000000006016 case 90
.text:000000000000609A                 xor     r9d, r9d
.text:000000000000609D                 nop     dword ptr [rax]
.text:00000000000060A0
.text:00000000000060A0 loc_60A0:                               ; CODE XREF: xstrtoul+273↓j
.text:00000000000060A0                 mov     rax, rbx
.text:00000000000060A3                 mul     rsi
.text:00000000000060A6                 mov     rbx, rax
.text:00000000000060A9                 jo      loc_623E
.text:00000000000060AF
.text:00000000000060AF loc_60AF:                               ; CODE XREF: xstrtoul+408↓j
.text:00000000000060AF                 sub     r8d, 1
.text:00000000000060B3                 jnz     short loc_60A0
.text:00000000000060B5
.text:00000000000060B5 loc_60B5:                               ; CODE XREF: xstrtoul+29D↓j
.text:00000000000060B5                                         ; xstrtoul+2BD↓j ...
.text:00000000000060B5                 or      ebp, r9d
.text:00000000000060B8                 jmp     short loc_6040  ; jumptable 0000000000006016 case 99
.text:00000000000060BA ; ---------------------------------------------------------------------------
.text:00000000000060BA
.text:00000000000060BA loc_60BA:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000060BA                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:00000000000060BA                 mov     r8d, 8          ; jumptable 0000000000006016 case 89
.text:00000000000060C0                 xor     r9d, r9d
.text:00000000000060C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000060C8
.text:00000000000060C8 loc_60C8:                               ; CODE XREF: xstrtoul+29B↓j
.text:00000000000060C8                 mov     rax, rbx
.text:00000000000060CB                 mul     rsi
.text:00000000000060CE                 mov     rbx, rax
.text:00000000000060D1                 jo      loc_6220
.text:00000000000060D7
.text:00000000000060D7 loc_60D7:                               ; CODE XREF: xstrtoul+3EA↓j
.text:00000000000060D7                 sub     r8d, 1
.text:00000000000060DB                 jnz     short loc_60C8
.text:00000000000060DD                 jmp     short loc_60B5
.text:00000000000060DF ; ---------------------------------------------------------------------------
.text:00000000000060DF
.text:00000000000060DF loc_60DF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000060DF                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:00000000000060DF                 mov     r8d, 4          ; jumptable 0000000000006016 cases 84,116
.text:00000000000060E5                 xor     r9d, r9d
.text:00000000000060E8
.text:00000000000060E8 loc_60E8:                               ; CODE XREF: xstrtoul+2BB↓j
.text:00000000000060E8                 mov     rax, rbx
.text:00000000000060EB                 mul     rsi
.text:00000000000060EE                 mov     rbx, rax
.text:00000000000060F1                 jo      loc_61F3
.text:00000000000060F7
.text:00000000000060F7 loc_60F7:                               ; CODE XREF: xstrtoul+3BD↓j
.text:00000000000060F7                 sub     r8d, 1
.text:00000000000060FB                 jnz     short loc_60E8
.text:00000000000060FD                 jmp     short loc_60B5
.text:00000000000060FF ; ---------------------------------------------------------------------------
.text:00000000000060FF
.text:00000000000060FF loc_60FF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000060FF                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:00000000000060FF                 mov     rax, rbx        ; jumptable 0000000000006016 cases 75,107
.text:0000000000006102                 mul     rsi
.text:0000000000006105                 mov     rbx, rax
.text:0000000000006108                 jno     loc_6040        ; jumptable 0000000000006016 case 99
.text:000000000000610E
.text:000000000000610E loc_610E:                               ; CODE XREF: xstrtoul+232↑j
.text:000000000000610E                                         ; xstrtoul+248↑j ...
.text:000000000000610E                 mov     ebp, 1
.text:0000000000006113                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006117                 jmp     loc_6040        ; jumptable 0000000000006016 case 99
.text:0000000000006117 ; ---------------------------------------------------------------------------
.text:000000000000611C                 align 20h
.text:0000000000006120
.text:0000000000006120 loc_6120:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006120                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:0000000000006120                 mov     r8d, 5          ; jumptable 0000000000006016 case 80
.text:0000000000006126                 xor     r9d, r9d
.text:0000000000006129
.text:0000000000006129 loc_6129:                               ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000006129                 mov     rax, rbx
.text:000000000000612C                 mul     rsi
.text:000000000000612F                 mov     rbx, rax
.text:0000000000006132                 jo      loc_622F
.text:0000000000006138
.text:0000000000006138 loc_6138:                               ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000006138                 sub     r8d, 1
.text:000000000000613C                 jnz     short loc_6129
.text:000000000000613E                 jmp     loc_60B5
.text:0000000000006143 ; ---------------------------------------------------------------------------
.text:0000000000006143
.text:0000000000006143 loc_6143:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006143                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:0000000000006143                 mov     r8d, 6          ; jumptable 0000000000006016 case 69
.text:0000000000006149                 xor     r9d, r9d
.text:000000000000614C
.text:000000000000614C loc_614C:                               ; CODE XREF: xstrtoul+31F↓j
.text:000000000000614C                 mov     rax, rbx
.text:000000000000614F                 mul     rsi
.text:0000000000006152                 mov     rbx, rax
.text:0000000000006155                 jo      loc_61E4
.text:000000000000615B
.text:000000000000615B loc_615B:                               ; CODE XREF: xstrtoul+3AE↓j
.text:000000000000615B                 sub     r8d, 1
.text:000000000000615F                 jnz     short loc_614C
.text:0000000000006161                 jmp     loc_60B5
.text:0000000000006166 ; ---------------------------------------------------------------------------
.text:0000000000006166
.text:0000000000006166 loc_6166:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006166                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:0000000000006166                 mov     edx, 400h       ; jumptable 0000000000006016 case 66
.text:000000000000616B                 mov     rax, rdx
.text:000000000000616E                 mul     rbx
.text:0000000000006171                 jo      short loc_610E
.text:0000000000006173                 shl     rbx, 0Ah
.text:0000000000006177                 jmp     loc_6040        ; jumptable 0000000000006016 case 99
.text:000000000000617C ; ---------------------------------------------------------------------------
.text:000000000000617C
.text:000000000000617C loc_617C:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000617C                                         ; DATA XREF: .rodata:jpt_6016↓o
.text:000000000000617C                 mov     rax, rbx        ; jumptable 0000000000006016 cases 71,103
.text:000000000000617F                 mul     rsi
.text:0000000000006182                 jo      loc_624D
.text:0000000000006188                 xor     r8d, r8d
.text:000000000000618B
.text:000000000000618B loc_618B:                               ; CODE XREF: xstrtoul+417↓j
.text:000000000000618B                 mul     rsi
.text:000000000000618E                 jno     loc_6027
.text:0000000000006194                 mov     r8d, 1
.text:000000000000619A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000619E                 jmp     loc_6027
.text:000000000000619E ; ---------------------------------------------------------------------------
.text:00000000000061A3                 align 8
.text:00000000000061A8
.text:00000000000061A8 loc_61A8:                               ; CODE XREF: xstrtoul+195↑j
.text:00000000000061A8                 xor     edi, edi
.text:00000000000061AA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000061AE                 mov     esi, 400h
.text:00000000000061B3                 setz    dil
.text:00000000000061B7                 lea     edi, [rdi+rdi+1]
.text:00000000000061BB                 jmp     loc_5FFA
.text:00000000000061C0 ; ---------------------------------------------------------------------------
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: xstrtoul+ED↑j
.text:00000000000061C0                 call    ___stack_chk_fail
.text:00000000000061C5 ; ---------------------------------------------------------------------------
.text:00000000000061C5
.text:00000000000061C5 loc_61C5:                               ; CODE XREF: xstrtoul+21↑j
.text:00000000000061C5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:00000000000061CC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000061D3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000061DA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000061DF                 call    ___assert_fail
.text:00000000000061E4 ; ---------------------------------------------------------------------------
.text:00000000000061E4
.text:00000000000061E4 loc_61E4:                               ; CODE XREF: xstrtoul+315↑j
.text:00000000000061E4                 mov     r9d, 1
.text:00000000000061EA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000061EE                 jmp     loc_615B
.text:00000000000061F3 ; ---------------------------------------------------------------------------
.text:00000000000061F3
.text:00000000000061F3 loc_61F3:                               ; CODE XREF: xstrtoul+2B1↑j
.text:00000000000061F3                 mov     r9d, 1
.text:00000000000061F9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000061FD                 jmp     loc_60F7
.text:0000000000006202 ; ---------------------------------------------------------------------------
.text:0000000000006202
.text:0000000000006202 loc_6202:                               ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000006202                 mov     r8d, 1
.text:0000000000006208                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000620C                 jmp     loc_6033
.text:0000000000006211 ; ---------------------------------------------------------------------------
.text:0000000000006211
.text:0000000000006211 loc_6211:                               ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000006211                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006215                 mov     r8d, 1
.text:000000000000621B                 jmp     loc_6027
.text:0000000000006220 ; ---------------------------------------------------------------------------
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: xstrtoul+291↑j
.text:0000000000006220                 mov     r9d, 1
.text:0000000000006226                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000622A                 jmp     loc_60D7
.text:000000000000622F ; ---------------------------------------------------------------------------
.text:000000000000622F
.text:000000000000622F loc_622F:                               ; CODE XREF: xstrtoul+2F2↑j
.text:000000000000622F                 mov     r9d, 1
.text:0000000000006235                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006239                 jmp     loc_6138
.text:000000000000623E ; ---------------------------------------------------------------------------
.text:000000000000623E
.text:000000000000623E loc_623E:                               ; CODE XREF: xstrtoul+269↑j
.text:000000000000623E                 mov     r9d, 1
.text:0000000000006244                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006248                 jmp     loc_60AF
.text:000000000000624D ; ---------------------------------------------------------------------------
.text:000000000000624D
.text:000000000000624D loc_624D:                               ; CODE XREF: xstrtoul+342↑j
.text:000000000000624D                 mov     r8d, 1
.text:0000000000006253                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006257                 jmp     loc_618B
.text:0000000000006257 ; } // starts at 5E40
.text:0000000000006257 xstrtoul        endp
.text:0000000000006257
.text:0000000000006257 ; ---------------------------------------------------------------------------
.text:000000000000625C                 align 20h
.text:0000000000006260
.text:0000000000006260 ; =============== S U B R O U T I N E =======================================
.text:0000000000006260
.text:0000000000006260 ; Attributes: info_from_lumina
.text:0000000000006260
.text:0000000000006260 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006260                 public rpl_fclose
.text:0000000000006260 rpl_fclose      proc near               ; CODE XREF: main+49E↑p
.text:0000000000006260                                         ; close_stream+15↓p
.text:0000000000006260 ; __unwind {
.text:0000000000006260                 push    r12
.text:0000000000006262                 push    rbp
.text:0000000000006263                 push    rbx
.text:0000000000006264                 mov     rbx, rdi
.text:0000000000006267                 call    _fileno
.text:000000000000626C                 test    eax, eax
.text:000000000000626E                 mov     rdi, rbx        ; fp
.text:0000000000006271                 js      short loc_62C7
.text:0000000000006273                 call    ___freading
.text:0000000000006278                 test    eax, eax
.text:000000000000627A                 jnz     short loc_62A8
.text:000000000000627C
.text:000000000000627C loc_627C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000627C                 mov     rdi, rbx        ; stream
.text:000000000000627F                 call    rpl_fflush
.text:0000000000006284                 test    eax, eax
.text:0000000000006286                 jz      short loc_62C4
.text:0000000000006288                 call    ___errno_location
.text:000000000000628D                 mov     r12d, [rax]
.text:0000000000006290                 mov     rdi, rbx        ; stream
.text:0000000000006293                 mov     rbp, rax
.text:0000000000006296                 call    _fclose
.text:000000000000629B                 test    r12d, r12d
.text:000000000000629E                 jnz     short loc_62D0
.text:00000000000062A0
.text:00000000000062A0 loc_62A0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000062A0                 pop     rbx
.text:00000000000062A1                 pop     rbp
.text:00000000000062A2                 pop     r12
.text:00000000000062A4                 retn
.text:00000000000062A4 ; ---------------------------------------------------------------------------
.text:00000000000062A5                 align 8
.text:00000000000062A8
.text:00000000000062A8 loc_62A8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000062A8                 mov     rdi, rbx        ; stream
.text:00000000000062AB                 call    _fileno
.text:00000000000062B0                 xor     esi, esi        ; offset
.text:00000000000062B2                 mov     edx, 1          ; whence
.text:00000000000062B7                 mov     edi, eax        ; fd
.text:00000000000062B9                 call    _lseek
.text:00000000000062BE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000062C2                 jnz     short loc_627C
.text:00000000000062C4
.text:00000000000062C4 loc_62C4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000062C4                 mov     rdi, rbx        ; stream
.text:00000000000062C7
.text:00000000000062C7 loc_62C7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000062C7                 pop     rbx
.text:00000000000062C8                 pop     rbp
.text:00000000000062C9                 pop     r12
.text:00000000000062CB                 jmp     _fclose
.text:00000000000062D0 ; ---------------------------------------------------------------------------
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000062D0                 mov     [rbp+0], r12d
.text:00000000000062D4                 mov     eax, 0FFFFFFFFh
.text:00000000000062D9                 jmp     short loc_62A0
.text:00000000000062D9 ; } // starts at 6260
.text:00000000000062D9 rpl_fclose      endp
.text:00000000000062D9
.text:00000000000062D9 ; ---------------------------------------------------------------------------
.text:00000000000062DB                 align 20h
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0 ; Attributes: info_from_lumina
.text:00000000000062E0
.text:00000000000062E0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000062E0                 public rpl_fflush
.text:00000000000062E0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 test    rdi, rdi
.text:00000000000062E3                 push    rbx
.text:00000000000062E4                 mov     rbx, rdi
.text:00000000000062E7                 jz      short loc_62FA
.text:00000000000062E9                 call    ___freading
.text:00000000000062EE                 test    eax, eax
.text:00000000000062F0                 jz      short loc_62FA
.text:00000000000062F2                 test    dword ptr [rbx], 100h
.text:00000000000062F8                 jnz     short loc_6308
.text:00000000000062FA
.text:00000000000062FA loc_62FA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000062FA                                         ; rpl_fflush+10↑j
.text:00000000000062FA                 mov     rdi, rbx        ; stream
.text:00000000000062FD                 pop     rbx
.text:00000000000062FE                 jmp     _fflush
.text:00000000000062FE ; ---------------------------------------------------------------------------
.text:0000000000006303                 align 8
.text:0000000000006308
.text:0000000000006308 loc_6308:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006308                 mov     rdi, rbx
.text:000000000000630B                 mov     edx, 1
.text:0000000000006310                 xor     esi, esi
.text:0000000000006312                 call    rpl_fseeko
.text:0000000000006317                 mov     rdi, rbx        ; stream
.text:000000000000631A                 pop     rbx
.text:000000000000631B                 jmp     _fflush
.text:000000000000631B ; } // starts at 62E0
.text:000000000000631B rpl_fflush      endp
.text:000000000000631B
.text:0000000000006320
.text:0000000000006320 ; =============== S U B R O U T I N E =======================================
.text:0000000000006320
.text:0000000000006320 ; Attributes: info_from_lumina
.text:0000000000006320
.text:0000000000006320 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006320                 public rpl_fseeko
.text:0000000000006320 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006320 ; __unwind {
.text:0000000000006320                 mov     rax, [rdi+8]
.text:0000000000006324                 cmp     [rdi+10h], rax
.text:0000000000006328                 jz      short loc_6330
.text:000000000000632A
.text:000000000000632A loc_632A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000632A                                         ; rpl_fseeko+1F↓j
.text:000000000000632A                 jmp     _fseeko
.text:000000000000632A ; ---------------------------------------------------------------------------
.text:000000000000632F                 align 10h
.text:0000000000006330
.text:0000000000006330 loc_6330:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006330                 mov     rax, [rdi+20h]
.text:0000000000006334                 cmp     [rdi+28h], rax
.text:0000000000006338                 jnz     short loc_632A
.text:000000000000633A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000633F                 jnz     short loc_632A
.text:0000000000006341                 push    r12
.text:0000000000006343                 push    rbp
.text:0000000000006344                 mov     r12d, edx
.text:0000000000006347                 push    rbx
.text:0000000000006348                 mov     rbp, rsi
.text:000000000000634B                 mov     rbx, rdi
.text:000000000000634E                 call    _fileno
.text:0000000000006353                 mov     edx, r12d       ; whence
.text:0000000000006356                 mov     rsi, rbp        ; offset
.text:0000000000006359                 mov     edi, eax        ; fd
.text:000000000000635B                 call    _lseek
.text:0000000000006360                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006364                 jz      short loc_6372
.text:0000000000006366                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006369                 mov     [rbx+90h], rax
.text:0000000000006370                 xor     eax, eax
.text:0000000000006372
.text:0000000000006372 loc_6372:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006372                 pop     rbx
.text:0000000000006373                 pop     rbp
.text:0000000000006374                 pop     r12
.text:0000000000006376                 retn
.text:0000000000006376 ; } // starts at 6320
.text:0000000000006376 rpl_fseeko      endp
.text:0000000000006376
.text:0000000000006376 ; ---------------------------------------------------------------------------
.text:0000000000006377                 align 20h
.text:0000000000006380
.text:0000000000006380 ; =============== S U B R O U T I N E =======================================
.text:0000000000006380
.text:0000000000006380 ; Attributes: info_from_lumina
.text:0000000000006380
.text:0000000000006380 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006380                 public rpl_mbrtowc
.text:0000000000006380 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006380
.text:0000000000006380 pwc             = dword ptr -34h
.text:0000000000006380 var_30          = qword ptr -30h
.text:0000000000006380
.text:0000000000006380 ; __unwind {
.text:0000000000006380                 push    r13
.text:0000000000006382                 push    r12
.text:0000000000006384                 mov     r13, rsi
.text:0000000000006387                 push    rbp
.text:0000000000006388                 push    rbx
.text:0000000000006389                 mov     rbx, rdi
.text:000000000000638C                 mov     r12, rdx
.text:000000000000638F                 sub     rsp, 18h
.text:0000000000006393                 mov     rax, fs:28h
.text:000000000000639C                 mov     [rsp+38h+var_30], rax
.text:00000000000063A1                 xor     eax, eax
.text:00000000000063A3                 lea     rax, [rsp+38h+pwc]
.text:00000000000063A8                 test    rdi, rdi
.text:00000000000063AB                 cmovz   rbx, rax
.text:00000000000063AF                 mov     rdi, rbx        ; pwc
.text:00000000000063B2                 call    _mbrtowc
.text:00000000000063B7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000063BB                 mov     rbp, rax
.text:00000000000063BE                 jbe     short loc_63E0
.text:00000000000063C0                 test    r12, r12
.text:00000000000063C3                 jz      short loc_63E0
.text:00000000000063C5                 xor     edi, edi
.text:00000000000063C7                 call    hard_locale
.text:00000000000063CC                 test    al, al
.text:00000000000063CE                 jnz     short loc_63E0
.text:00000000000063D0                 movzx   eax, byte ptr [r13+0]
.text:00000000000063D5                 mov     ebp, 1
.text:00000000000063DA                 mov     [rbx], eax
.text:00000000000063DC                 nop     dword ptr [rax+00h]
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000063E0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000063E0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000063E5                 xor     rdx, fs:28h
.text:00000000000063EE                 mov     rax, rbp
.text:00000000000063F1                 jnz     short loc_63FE
.text:00000000000063F3                 add     rsp, 18h
.text:00000000000063F7                 pop     rbx
.text:00000000000063F8                 pop     rbp
.text:00000000000063F9                 pop     r12
.text:00000000000063FB                 pop     r13
.text:00000000000063FD                 retn
.text:00000000000063FE ; ---------------------------------------------------------------------------
.text:00000000000063FE
.text:00000000000063FE loc_63FE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000063FE                 call    ___stack_chk_fail
.text:00000000000063FE ; } // starts at 6380
.text:00000000000063FE rpl_mbrtowc     endp
.text:00000000000063FE
.text:00000000000063FE ; ---------------------------------------------------------------------------
.text:0000000000006403                 align 10h
.text:0000000000006410
.text:0000000000006410 ; =============== S U B R O U T I N E =======================================
.text:0000000000006410
.text:0000000000006410 ; Attributes: info_from_lumina
.text:0000000000006410
.text:0000000000006410 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006410                 public close_stream
.text:0000000000006410 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006410                                         ; close_stdout+33↑p
.text:0000000000006410 ; __unwind {
.text:0000000000006410                 push    r12
.text:0000000000006412                 push    rbp
.text:0000000000006413                 mov     rbp, rdi
.text:0000000000006416                 push    rbx
.text:0000000000006417                 call    ___fpending
.text:000000000000641C                 mov     ebx, [rbp+0]
.text:000000000000641F                 mov     rdi, rbp        ; stream
.text:0000000000006422                 mov     r12, rax
.text:0000000000006425                 call    rpl_fclose
.text:000000000000642A                 and     ebx, 20h
.text:000000000000642D                 test    ebx, ebx
.text:000000000000642F                 jnz     short loc_6448
.text:0000000000006431                 test    eax, eax
.text:0000000000006433                 jz      short loc_643F
.text:0000000000006435                 test    r12, r12
.text:0000000000006438                 mov     eax, 0FFFFFFFFh
.text:000000000000643D                 jz      short loc_6478
.text:000000000000643F
.text:000000000000643F loc_643F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000643F                 pop     rbx
.text:0000000000006440                 pop     rbp
.text:0000000000006441                 pop     r12
.text:0000000000006443                 retn
.text:0000000000006443 ; ---------------------------------------------------------------------------
.text:0000000000006444                 align 8
.text:0000000000006448
.text:0000000000006448 loc_6448:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006448                 test    eax, eax
.text:000000000000644A                 jnz     short loc_6468
.text:000000000000644C                 call    ___errno_location
.text:0000000000006451                 mov     dword ptr [rax], 0
.text:0000000000006457                 mov     eax, 0FFFFFFFFh
.text:000000000000645C                 pop     rbx
.text:000000000000645D                 pop     rbp
.text:000000000000645E                 pop     r12
.text:0000000000006460                 retn
.text:0000000000006460 ; ---------------------------------------------------------------------------
.text:0000000000006461                 align 8
.text:0000000000006468
.text:0000000000006468 loc_6468:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006468                 pop     rbx
.text:0000000000006469                 mov     eax, 0FFFFFFFFh
.text:000000000000646E                 pop     rbp
.text:000000000000646F                 pop     r12
.text:0000000000006471                 retn
.text:0000000000006471 ; ---------------------------------------------------------------------------
.text:0000000000006472                 align 8
.text:0000000000006478
.text:0000000000006478 loc_6478:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006478                 call    ___errno_location
.text:000000000000647D                 cmp     dword ptr [rax], 9
.text:0000000000006480                 pop     rbx
.text:0000000000006481                 pop     rbp
.text:0000000000006482                 pop     r12
.text:0000000000006484                 setnz   al
.text:0000000000006487                 movzx   eax, al
.text:000000000000648A                 neg     eax
.text:000000000000648C                 retn
.text:000000000000648C ; } // starts at 6410
.text:000000000000648C close_stream    endp
.text:000000000000648C
.text:000000000000648C ; ---------------------------------------------------------------------------
.text:000000000000648D                 align 10h
.text:0000000000006490
.text:0000000000006490 ; =============== S U B R O U T I N E =======================================
.text:0000000000006490
.text:0000000000006490
.text:0000000000006490                 public locale_charset
.text:0000000000006490 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006490 ; __unwind {
.text:0000000000006490                 sub     rsp, 8
.text:0000000000006494                 mov     edi, 0Eh        ; item
.text:0000000000006499                 call    _nl_langinfo
.text:000000000000649E                 test    rax, rax
.text:00000000000064A1                 jz      short loc_64C0
.text:00000000000064A3                 cmp     byte ptr [rax], 0
.text:00000000000064A6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000064AD                 cmovz   rax, rdx
.text:00000000000064B1                 add     rsp, 8
.text:00000000000064B5                 retn
.text:00000000000064B5 ; ---------------------------------------------------------------------------
.text:00000000000064B6                 align 20h
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000064C0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000064C7                 add     rsp, 8
.text:00000000000064CB                 retn
.text:00000000000064CB ; } // starts at 6490
.text:00000000000064CB locale_charset  endp
.text:00000000000064CB
.text:00000000000064CB ; ---------------------------------------------------------------------------
.text:00000000000064CC                 align 10h
.text:00000000000064D0
.text:00000000000064D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064D0
.text:00000000000064D0
.text:00000000000064D0 ; __int64 __fastcall strcoll_loop(char *s1)
.text:00000000000064D0 strcoll_loop    proc near               ; CODE XREF: memcoll+66↓p
.text:00000000000064D0                                         ; memcoll0+40↓j
.text:00000000000064D0 ; __unwind {
.text:00000000000064D0                 push    r15
.text:00000000000064D2                 push    r14
.text:00000000000064D4                 mov     r14, rcx
.text:00000000000064D7                 push    r13
.text:00000000000064D9                 push    r12
.text:00000000000064DB                 mov     r13, rsi
.text:00000000000064DE                 push    rbp
.text:00000000000064DF                 push    rbx
.text:00000000000064E0                 mov     r12, rdi
.text:00000000000064E3                 mov     rbp, rdx
.text:00000000000064E6                 sub     rsp, 8
.text:00000000000064EA                 call    ___errno_location
.text:00000000000064EF                 mov     r15, rax
.text:00000000000064F2                 jmp     short loc_6523
.text:00000000000064F2 ; ---------------------------------------------------------------------------
.text:00000000000064F4                 align 8
.text:00000000000064F8
.text:00000000000064F8 loc_64F8:                               ; CODE XREF: strcoll_loop+67↓j
.text:00000000000064F8                 mov     rdi, r12        ; s
.text:00000000000064FB                 call    _strlen
.text:0000000000006500                 mov     rdi, rbp        ; s
.text:0000000000006503                 lea     rbx, [rax+1]
.text:0000000000006507                 call    _strlen
.text:000000000000650C                 add     rax, 1
.text:0000000000006510                 add     r12, rbx
.text:0000000000006513                 add     rbp, rax
.text:0000000000006516                 sub     r14, rax
.text:0000000000006519                 sub     r13, rbx
.text:000000000000651C                 jz      short loc_6550
.text:000000000000651E                 test    r14, r14
.text:0000000000006521                 jz      short loc_6570
.text:0000000000006523
.text:0000000000006523 loc_6523:                               ; CODE XREF: strcoll_loop+22↑j
.text:0000000000006523                 mov     dword ptr [r15], 0
.text:000000000000652A                 mov     rsi, rbp        ; s2
.text:000000000000652D                 mov     rdi, r12        ; s1
.text:0000000000006530                 call    _strcoll
.text:0000000000006535                 test    eax, eax
.text:0000000000006537                 jz      short loc_64F8
.text:0000000000006539                 add     rsp, 8
.text:000000000000653D                 pop     rbx
.text:000000000000653E                 pop     rbp
.text:000000000000653F                 pop     r12
.text:0000000000006541                 pop     r13
.text:0000000000006543                 pop     r14
.text:0000000000006545                 pop     r15
.text:0000000000006547                 retn
.text:0000000000006547 ; ---------------------------------------------------------------------------
.text:0000000000006548                 align 10h
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: strcoll_loop+4C↑j
.text:0000000000006550                 xor     eax, eax
.text:0000000000006552                 test    r14, r14
.text:0000000000006555                 setnz   al
.text:0000000000006558                 add     rsp, 8
.text:000000000000655C                 pop     rbx
.text:000000000000655D                 neg     eax
.text:000000000000655F                 pop     rbp
.text:0000000000006560                 pop     r12
.text:0000000000006562                 pop     r13
.text:0000000000006564                 pop     r14
.text:0000000000006566                 pop     r15
.text:0000000000006568                 retn
.text:0000000000006568 ; ---------------------------------------------------------------------------
.text:0000000000006569                 align 10h
.text:0000000000006570
.text:0000000000006570 loc_6570:                               ; CODE XREF: strcoll_loop+51↑j
.text:0000000000006570                 add     rsp, 8
.text:0000000000006574                 mov     eax, 1
.text:0000000000006579                 pop     rbx
.text:000000000000657A                 pop     rbp
.text:000000000000657B                 pop     r12
.text:000000000000657D                 pop     r13
.text:000000000000657F                 pop     r14
.text:0000000000006581                 pop     r15
.text:0000000000006583                 retn
.text:0000000000006583 ; } // starts at 64D0
.text:0000000000006583 strcoll_loop    endp
.text:0000000000006583
.text:0000000000006583 ; ---------------------------------------------------------------------------
.text:0000000000006584                 align 10h
.text:0000000000006590
.text:0000000000006590 ; =============== S U B R O U T I N E =======================================
.text:0000000000006590
.text:0000000000006590
.text:0000000000006590 ; __int64 __fastcall memcoll(char *s1, size_t n, void *s2)
.text:0000000000006590                 public memcoll
.text:0000000000006590 memcoll         proc near               ; CODE XREF: xmemcoll+14↑p
.text:0000000000006590
.text:0000000000006590 var_40          = dword ptr -40h
.text:0000000000006590 var_39          = byte ptr -39h
.text:0000000000006590
.text:0000000000006590 ; __unwind {
.text:0000000000006590                 push    r15
.text:0000000000006592                 push    r14
.text:0000000000006594                 mov     r15, rdx
.text:0000000000006597                 push    r13
.text:0000000000006599                 push    r12
.text:000000000000659B                 mov     r14, rdi
.text:000000000000659E                 push    rbp
.text:000000000000659F                 push    rbx
.text:00000000000065A0                 mov     rbp, rcx
.text:00000000000065A3                 mov     rbx, rsi
.text:00000000000065A6                 sub     rsp, 18h
.text:00000000000065AA                 cmp     rsi, rcx
.text:00000000000065AD                 jnz     short loc_65C2
.text:00000000000065AF                 mov     rdx, rsi        ; n
.text:00000000000065B2                 mov     rsi, r15        ; s2
.text:00000000000065B5                 call    _memcmp
.text:00000000000065BA                 test    eax, eax
.text:00000000000065BC                 mov     [rsp+48h+var_40], eax
.text:00000000000065C0                 jz      short loc_6628
.text:00000000000065C2
.text:00000000000065C2 loc_65C2:                               ; CODE XREF: memcoll+1D↑j
.text:00000000000065C2                 lea     r13, [r14+rbx]
.text:00000000000065C6                 lea     r12, [r15+rbp]
.text:00000000000065CA                 lea     rcx, [rbp+1]
.text:00000000000065CE                 lea     rsi, [rbx+1]
.text:00000000000065D2                 mov     rdx, r15
.text:00000000000065D5                 mov     rdi, r14        ; s1
.text:00000000000065D8                 movzx   r9d, byte ptr [r13+0]
.text:00000000000065DD                 movzx   r8d, byte ptr [r12]
.text:00000000000065E2                 mov     byte ptr [r13+0], 0
.text:00000000000065E7                 mov     byte ptr [r12], 0
.text:00000000000065EC                 mov     [rsp+48h+var_39], r9b
.text:00000000000065F1                 mov     byte ptr [rsp+48h+var_40], r8b
.text:00000000000065F6                 call    strcoll_loop
.text:00000000000065FB                 movzx   r9d, [rsp+48h+var_39]
.text:0000000000006601                 movzx   r8d, byte ptr [rsp+48h+var_40]
.text:0000000000006607                 mov     edx, eax
.text:0000000000006609                 mov     [r13+0], r9b
.text:000000000000660D                 mov     [r12], r8b
.text:0000000000006611
.text:0000000000006611 loc_6611:                               ; CODE XREF: memcoll+A7↓j
.text:0000000000006611                 add     rsp, 18h
.text:0000000000006615                 mov     eax, edx
.text:0000000000006617                 pop     rbx
.text:0000000000006618                 pop     rbp
.text:0000000000006619                 pop     r12
.text:000000000000661B                 pop     r13
.text:000000000000661D                 pop     r14
.text:000000000000661F                 pop     r15
.text:0000000000006621                 retn
.text:0000000000006621 ; ---------------------------------------------------------------------------
.text:0000000000006622                 align 8
.text:0000000000006628
.text:0000000000006628 loc_6628:                               ; CODE XREF: memcoll+30↑j
.text:0000000000006628                 call    ___errno_location
.text:000000000000662D                 mov     edx, [rsp+48h+var_40]
.text:0000000000006631                 mov     dword ptr [rax], 0
.text:0000000000006637                 jmp     short loc_6611
.text:0000000000006637 ; } // starts at 6590
.text:0000000000006637 memcoll         endp
.text:0000000000006637
.text:0000000000006637 ; ---------------------------------------------------------------------------
.text:0000000000006639                 align 20h
.text:0000000000006640
.text:0000000000006640 ; =============== S U B R O U T I N E =======================================
.text:0000000000006640
.text:0000000000006640
.text:0000000000006640 ; __int64 __fastcall memcoll0(char *s1, size_t n, void *s2)
.text:0000000000006640                 public memcoll0
.text:0000000000006640 memcoll0        proc near               ; CODE XREF: xmemcoll0+14↑p
.text:0000000000006640
.text:0000000000006640 var_20          = qword ptr -20h
.text:0000000000006640
.text:0000000000006640 ; __unwind {
.text:0000000000006640                 push    r12
.text:0000000000006642                 push    rbp
.text:0000000000006643                 mov     r12, rdx
.text:0000000000006646                 push    rbx
.text:0000000000006647                 mov     rbp, rdi
.text:000000000000664A                 mov     rbx, rsi
.text:000000000000664D                 sub     rsp, 10h
.text:0000000000006651                 cmp     rsi, rcx
.text:0000000000006654                 jnz     short loc_666F
.text:0000000000006656                 mov     rdx, rsi        ; n
.text:0000000000006659                 mov     rsi, r12        ; s2
.text:000000000000665C                 mov     [rsp+28h+var_20], rcx
.text:0000000000006661                 call    _memcmp
.text:0000000000006666                 test    eax, eax
.text:0000000000006668                 mov     rcx, [rsp+28h+var_20]
.text:000000000000666D                 jz      short loc_6688
.text:000000000000666F
.text:000000000000666F loc_666F:                               ; CODE XREF: memcoll0+14↑j
.text:000000000000666F                 add     rsp, 10h
.text:0000000000006673                 mov     rdx, r12
.text:0000000000006676                 mov     rsi, rbx
.text:0000000000006679                 mov     rdi, rbp        ; s1
.text:000000000000667C                 pop     rbx
.text:000000000000667D                 pop     rbp
.text:000000000000667E                 pop     r12
.text:0000000000006680                 jmp     strcoll_loop
.text:0000000000006680 ; ---------------------------------------------------------------------------
.text:0000000000006685                 align 8
.text:0000000000006688
.text:0000000000006688 loc_6688:                               ; CODE XREF: memcoll0+2D↑j
.text:0000000000006688                 call    ___errno_location
.text:000000000000668D                 mov     dword ptr [rax], 0
.text:0000000000006693                 add     rsp, 10h
.text:0000000000006697                 xor     eax, eax
.text:0000000000006699                 pop     rbx
.text:000000000000669A                 pop     rbp
.text:000000000000669B                 pop     r12
.text:000000000000669D                 retn
.text:000000000000669D ; } // starts at 6640
.text:000000000000669D memcoll0        endp
.text:000000000000669D
.text:000000000000669D ; ---------------------------------------------------------------------------
.text:000000000000669E                 align 20h
.text:00000000000066A0
.text:00000000000066A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066A0
.text:00000000000066A0 ; Attributes: info_from_lumina
.text:00000000000066A0
.text:00000000000066A0 ; void _libc_csu_init(void)
.text:00000000000066A0                 public __libc_csu_init
.text:00000000000066A0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000066A0 ; __unwind {
.text:00000000000066A0                 push    r15
.text:00000000000066A2                 push    r14
.text:00000000000066A4                 mov     r15, rdx
.text:00000000000066A7                 push    r13
.text:00000000000066A9                 push    r12
.text:00000000000066AB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000066B2                 push    rbp
.text:00000000000066B3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000066BA                 push    rbx
.text:00000000000066BB                 mov     r13d, edi
.text:00000000000066BE                 mov     r14, rsi
.text:00000000000066C1                 sub     rbp, r12
.text:00000000000066C4                 sub     rsp, 8
.text:00000000000066C8                 sar     rbp, 3
.text:00000000000066CC                 call    _init_proc
.text:00000000000066D1                 test    rbp, rbp
.text:00000000000066D4                 jz      short loc_66F6
.text:00000000000066D6                 xor     ebx, ebx
.text:00000000000066D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000066E0
.text:00000000000066E0 loc_66E0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000066E0                 mov     rdx, r15
.text:00000000000066E3                 mov     rsi, r14
.text:00000000000066E6                 mov     edi, r13d
.text:00000000000066E9                 call    ds:(__frame_dummy_init_array_entry - 2099B0h)[r12+rbx*8]
.text:00000000000066ED                 add     rbx, 1
.text:00000000000066F1                 cmp     rbp, rbx
.text:00000000000066F4                 jnz     short loc_66E0
.text:00000000000066F6
.text:00000000000066F6 loc_66F6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000066F6                 add     rsp, 8
.text:00000000000066FA                 pop     rbx
.text:00000000000066FB                 pop     rbp
.text:00000000000066FC                 pop     r12
.text:00000000000066FE                 pop     r13
.text:0000000000006700                 pop     r14
.text:0000000000006702                 pop     r15
.text:0000000000006704                 retn
.text:0000000000006704 ; } // starts at 66A0
.text:0000000000006704 __libc_csu_init endp
.text:0000000000006704
.text:0000000000006704 ; ---------------------------------------------------------------------------
.text:0000000000006705                 align 10h
.text:0000000000006710
.text:0000000000006710 ; =============== S U B R O U T I N E =======================================
.text:0000000000006710
.text:0000000000006710
.text:0000000000006710 ; void _libc_csu_fini(void)
.text:0000000000006710                 public __libc_csu_fini
.text:0000000000006710 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006710 ; __unwind {
.text:0000000000006710                 rep retn
.text:0000000000006710 ; } // starts at 6710
.text:0000000000006710 __libc_csu_fini endp
.text:0000000000006710
.text:0000000000006710 ; ---------------------------------------------------------------------------
.text:0000000000006712                 align 20h
.text:0000000000006720
.text:0000000000006720 ; =============== S U B R O U T I N E =======================================
.text:0000000000006720
.text:0000000000006720
.text:0000000000006720 atexit          proc near               ; CODE XREF: main+AA↑p
.text:0000000000006720 ; __unwind {
.text:0000000000006720                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006727                 xor     esi, esi        ; obj
.text:0000000000006729                 jmp     ___cxa_atexit
.text:0000000000006729 ; } // starts at 6720
.text:0000000000006729 atexit          endp
.text:0000000000006729
.text:0000000000006729 _text           ends
.text:0000000000006729
LOAD:000000000000672E ; ===========================================================================
LOAD:000000000000672E
LOAD:000000000000672E ; Segment type: Pure code
LOAD:000000000000672E ; Segment permissions: Read/Execute
LOAD:000000000000672E LOAD            segment byte public 'CODE' use64
LOAD:000000000000672E                 assume cs:LOAD
LOAD:000000000000672E                 ;org 672Eh
LOAD:000000000000672E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000672E                 align 10h
LOAD:000000000000672E LOAD            ends
LOAD:000000000000672E
.fini:0000000000006730 ; ===========================================================================
.fini:0000000000006730
.fini:0000000000006730 ; Segment type: Pure code
.fini:0000000000006730 ; Segment permissions: Read/Execute
.fini:0000000000006730 _fini           segment dword public 'CODE' use64
.fini:0000000000006730                 assume cs:_fini
.fini:0000000000006730                 ;org 6730h
.fini:0000000000006730                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006730
.fini:0000000000006730 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006730
.fini:0000000000006730
.fini:0000000000006730                 public _term_proc
.fini:0000000000006730 _term_proc      proc near
.fini:0000000000006730                 sub     rsp, 8          ; _fini
.fini:0000000000006734                 add     rsp, 8
.fini:0000000000006738                 retn
.fini:0000000000006738 _term_proc      endp
.fini:0000000000006738
.fini:0000000000006738 _fini           ends
.fini:0000000000006738
LOAD:0000000000006739 ; ===========================================================================
LOAD:0000000000006739
LOAD:0000000000006739 ; Segment type: Pure code
LOAD:0000000000006739 ; Segment permissions: Read/Execute
LOAD:0000000000006739 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006739                 assume cs:LOAD
LOAD:0000000000006739                 ;org 6739h
LOAD:0000000000006739                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006739                 align 20h
LOAD:0000000000006739 LOAD            ends
LOAD:0000000000006739
.rodata:0000000000006740 ; ===========================================================================
.rodata:0000000000006740
.rodata:0000000000006740 ; Segment type: Pure data
.rodata:0000000000006740 ; Segment permissions: Read
.rodata:0000000000006740 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006740                 assume cs:_rodata
.rodata:0000000000006740                 ;org 6740h
.rodata:0000000000006740                 public _IO_stdin_used
.rodata:0000000000006740 _IO_stdin_used  db    1
.rodata:0000000000006741                 db    0
.rodata:0000000000006742                 db    2
.rodata:0000000000006743                 db    0
.rodata:0000000000006744 ; const char format[]
.rodata:0000000000006744 format          db '%s: %s',0           ; DATA XREF: size_opt+61↑o
.rodata:0000000000006744                                         ; close_stdout+6C↑o
.rodata:000000000000674B a7lu            db '%7lu ',0            ; DATA XREF: writeline:loc_2828↑o
.rodata:0000000000006751 aUniq           db 'uniq',0             ; DATA XREF: main+74E↑o
.rodata:0000000000006751                                         ; usage+259↑o ...
.rodata:0000000000006756 asc_6756        db '[',0                ; DATA XREF: usage+265↑o
.rodata:0000000000006758 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+28C↑o
.rodata:0000000000006768 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000006768                                         ; DATA XREF: usage+2BC↑o
.rodata:0000000000006768                                         ; usage+3B4↑o ...
.rodata:000000000000677E aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2CD↑o
.rodata:0000000000006788 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2D9↑o
.rodata:0000000000006797 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+26C↑o
.rodata:00000000000067A1 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+298↑o
.rodata:00000000000067AB aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+2B0↑o
.rodata:00000000000067B5 ; const char aSOnlineHelpS[]
.rodata:00000000000067B5 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+322↑o
.rodata:00000000000067B5                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000067CC unk_67CC        db  47h ; G             ; DATA XREF: main+747↑o
.rodata:00000000000067CC                                         ; usage+33E↑o ...
.rodata:00000000000067CD                 db  4Eh ; N
.rodata:00000000000067CE                 db  55h ; U
.rodata:00000000000067CF                 db  20h
.rodata:00000000000067D0 ; const char domainname[]
.rodata:00000000000067D0 domainname      db 'coreutils',0        ; DATA XREF: main+7B↑o
.rodata:00000000000067D0                                         ; main+87↑o ...
.rodata:00000000000067DA ; const char s2[]
.rodata:00000000000067DA s2              db 'en_',0              ; DATA XREF: usage+365↑o
.rodata:00000000000067DA                                         ; usage+426↑o
.rodata:00000000000067DE ; const char aFullDocumentat[]
.rodata:00000000000067DE aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000067DE                                         ; DATA XREF: usage:loc_2CA1↑o
.rodata:00000000000067DE                                         ; usage:loc_2D5E↑o
.rodata:00000000000067F9 ; const char name[]
.rodata:00000000000067F9 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+B↑o
.rodata:0000000000006809 ; const char dirname[]
.rodata:0000000000006809 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006809                                         ; DATA XREF: main+74↑o
.rodata:0000000000006821 ; const char shortopts[]
.rodata:0000000000006821 shortopts       db '-0123456789Dcdf:is:uw:z',0
.rodata:0000000000006821                                         ; DATA XREF: main+16A↑o
.rodata:0000000000006839 ; const char aExtraOperandS[]
.rodata:0000000000006839 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+A21↑o
.rodata:000000000000684A aAllRepeated    db '--all-repeated',0   ; DATA XREF: main+567↑o
.rodata:000000000000684A                                         ; .data.rel.ro:0000000000209A00↓o ...
.rodata:0000000000006859 aGroup          db '--group',0          ; DATA XREF: main+5B9↑o
.rodata:0000000000006859                                         ; .data.rel.ro:0000000000209A20↓o
.rodata:0000000000006861 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+739↑o
.rodata:0000000000006871 aRichardMStallm db 'Richard M. Stallman',0
.rodata:0000000000006871                                         ; DATA XREF: main+740↑o
.rodata:0000000000006885 aW              db 'w',0                ; DATA XREF: main+301↑o
.rodata:0000000000006887 ; const char msgid[]
.rodata:0000000000006887 msgid           db 'error reading %s',0 ; DATA XREF: main+8D3↑o
.rodata:0000000000006898 aCount          db 'count',0            ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:000000000000689E aIgnoreCase     db 'ignore-case',0      ; DATA XREF: .data.rel.ro:0000000000209A40↓o
.rodata:00000000000068AA aUnique         db 'unique',0           ; DATA XREF: .data.rel.ro:0000000000209A60↓o
.rodata:00000000000068B1 aSkipFields     db 'skip-fields',0      ; DATA XREF: .data.rel.ro:0000000000209A80↓o
.rodata:00000000000068BD aSkipChars      db 'skip-chars',0       ; DATA XREF: .data.rel.ro:0000000000209AA0↓o
.rodata:00000000000068C8 aCheckChars     db 'check-chars',0      ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:00000000000068D4 aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:00000000000068E4 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:00000000000068E9 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:00000000000068F1 aPrepend        db 'prepend',0          ; DATA XREF: .data.rel.ro:grouping_method_string↓o
.rodata:00000000000068F1                                         ; .data.rel.ro:0000000000209BA8↓o
.rodata:00000000000068F9 aAppend         db 'append',0           ; DATA XREF: .data.rel.ro:0000000000209B68↓o
.rodata:0000000000006900 aSeparate       db 'separate',0         ; DATA XREF: .data.rel.ro:0000000000209B70↓o
.rodata:0000000000006900                                         ; .data.rel.ro:0000000000209BB0↓o
.rodata:0000000000006909 aBoth           db 'both',0             ; DATA XREF: .data.rel.ro:0000000000209B78↓o
.rodata:000000000000690E aNone           db 'none',0             ; DATA XREF: .data.rel.ro:delimit_method_string↓o
.rodata:0000000000006913                 align 8
.rodata:0000000000006918 ; const char aTrySHelpForMor[]
.rodata:0000000000006918 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006918                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000693F                 align 20h
.rodata:0000000000006940 ; const char aUsageSOptionIn[]
.rodata:0000000000006940 aUsageSOptionIn db 'Usage: %s [OPTION]... [INPUT [OUTPUT]]',0Ah,0
.rodata:0000000000006940                                         ; DATA XREF: usage:loc_297D↑o
.rodata:0000000000006968 ; const char aFilterAdjacent[]
.rodata:0000000000006968 aFilterAdjacent db 'Filter adjacent matching lines from INPUT (or standard input),',0Ah
.rodata:0000000000006968                                         ; DATA XREF: usage+84↑o
.rodata:0000000000006968                 db 'writing to OUTPUT (or standard output).',0Ah
.rodata:0000000000006968                 db 0Ah
.rodata:0000000000006968                 db 'With no options, matching lines are merged to the first occurrenc'
.rodata:0000000000006968                 db 'e.',0Ah,0
.rodata:0000000000006A15                 align 8
.rodata:0000000000006A18 ; const char aMandatoryArgum[]
.rodata:0000000000006A18 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000006A18                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000006A18                 db 'ns too.',0Ah,0
.rodata:0000000000006A63                 align 8
.rodata:0000000000006A68 ; const char aCCountPrefixLi[]
.rodata:0000000000006A68 aCCountPrefixLi db '  -c, --count           prefix lines by the number of occurrences'
.rodata:0000000000006A68                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000006A68                 db 0Ah
.rodata:0000000000006A68                 db '  -d, --repeated        only print duplicate lines, one for each '
.rodata:0000000000006A68                 db 'group',0Ah,0
.rodata:0000000000006AF2                 align 8
.rodata:0000000000006AF8 ; const char aDPrintAllDupli[]
.rodata:0000000000006AF8 aDPrintAllDupli db '  -D                    print all duplicate lines',0Ah
.rodata:0000000000006AF8                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000006AF8                 db '      --all-repeated[=METHOD]  like -D, but allow separating grou'
.rodata:0000000000006AF8                 db 'ps',0Ah
.rodata:0000000000006AF8                 db '                                 with an empty line;',0Ah
.rodata:0000000000006AF8                 db '                                 METHOD={none(default),prepend,se'
.rodata:0000000000006AF8                 db 'parate}',0Ah,0
.rodata:0000000000006BED                 align 10h
.rodata:0000000000006BF0 ; const char aFSkipFieldsNAv[]
.rodata:0000000000006BF0 aFSkipFieldsNAv db '  -f, --skip-fields=N   avoid comparing the first N fields',0Ah,0
.rodata:0000000000006BF0                                         ; DATA XREF: usage+118↑o
.rodata:0000000000006C2C                 align 10h
.rodata:0000000000006C30 ; const char aGroupMethodSho[]
.rodata:0000000000006C30 aGroupMethodSho db '      --group[=METHOD]  show all items, separating groups with an'
.rodata:0000000000006C30                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000006C30                 db ' empty line;',0Ah
.rodata:0000000000006C30                 db '                          METHOD={separate(default),prepend,appen'
.rodata:0000000000006C30                 db 'd,both}',0Ah,0
.rodata:0000000000006CC8 ; const char aIIgnoreCaseIgn[]
.rodata:0000000000006CC8 aIIgnoreCaseIgn db '  -i, --ignore-case     ignore differences in case when comparing'
.rodata:0000000000006CC8                                         ; DATA XREF: usage+162↑o
.rodata:0000000000006CC8                 db 0Ah
.rodata:0000000000006CC8                 db '  -s, --skip-chars=N    avoid comparing the first N characters',0Ah
.rodata:0000000000006CC8                 db '  -u, --unique          only print unique lines',0Ah,0
.rodata:0000000000006D7A                 align 20h
.rodata:0000000000006D80 ; const char aZZeroTerminate[]
.rodata:0000000000006D80 aZZeroTerminate db '  -z, --zero-terminated     line delimiter is NUL, not newline',0Ah
.rodata:0000000000006D80                                         ; DATA XREF: usage+187↑o
.rodata:0000000000006D80                 db 0
.rodata:0000000000006DC0 ; const char aWCheckCharsNCo[]
.rodata:0000000000006DC0 aWCheckCharsNCo db '  -w, --check-chars=N   compare no more than N characters in line'
.rodata:0000000000006DC0                                         ; DATA XREF: usage+1AC↑o
.rodata:0000000000006DC0                 db 's',0Ah,0
.rodata:0000000000006E04                 align 8
.rodata:0000000000006E08 ; const char aHelpDisplayThi[]
.rodata:0000000000006E08 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006E08                                         ; DATA XREF: usage+1D1↑o
.rodata:0000000000006E35                 align 8
.rodata:0000000000006E38 ; const char aVersionOutputV[]
.rodata:0000000000006E38 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006E38                                         ; DATA XREF: usage+1F6↑o
.rodata:0000000000006E6E                 align 10h
.rodata:0000000000006E70 ; const char aAFieldIsARunOf[]
.rodata:0000000000006E70 aAFieldIsARunOf db 0Ah                  ; DATA XREF: usage+21B↑o
.rodata:0000000000006E70                 db 'A field is a run of blanks (usually spaces and/or TABs), then non'
.rodata:0000000000006E70                 db '-blank',0Ah
.rodata:0000000000006E70                 db 'characters.  Fields are skipped before chars.',0Ah,0
.rodata:0000000000006EE8 ; const char aNoteUniqDoesNo[]
.rodata:0000000000006EE8 aNoteUniqDoesNo db 0Ah                  ; DATA XREF: usage+240↑o
.rodata:0000000000006EE8                 db 'Note: ',27h,'uniq',27h,' does not detect repeated lines unless th'
.rodata:0000000000006EE8                 db 'ey are adjacent.',0Ah
.rodata:0000000000006EE8                 db 'You may want to sort the input first, or use ',27h,'sort -u',27h,' '
.rodata:0000000000006EE8                 db 'without ',27h,'uniq',27h,'.',0Ah
.rodata:0000000000006EE8                 db 'Also, comparisons honor the rules specified by ',27h,'LC_COLLATE',27h
.rodata:0000000000006EE8                 db '.',0Ah,0
.rodata:0000000000006FB4                 align 8
.rodata:0000000000006FB8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006FB8                                         ; DATA XREF: usage+337↑o
.rodata:0000000000006FB8                                         ; usage+39B↑o ...
.rodata:0000000000006FE0 ; const char aReportAnyTrans[]
.rodata:0000000000006FE0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006FE0                                         ; DATA XREF: usage+48F↑o
.rodata:0000000000006FE0                 db 'am/>',0Ah,0
.rodata:0000000000007027                 align 8
.rodata:0000000000007028 ; const char aOrAvailableLoc[]
.rodata:0000000000007028 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000007028                                         ; DATA XREF: usage:loc_2CE6↑o
.rodata:000000000000705B                 align 20h
.rodata:0000000000007060 aInvalidNumberO db 'invalid number of fields to skip',0
.rodata:0000000000007060                                         ; DATA XREF: main+1BE↑o
.rodata:0000000000007081                 align 8
.rodata:0000000000007088 aInvalidNumberO_1 db 'invalid number of bytes to skip',0
.rodata:0000000000007088                                         ; DATA XREF: main+51C↑o
.rodata:00000000000070A8 aInvalidNumberO_0 db 'invalid number of bytes to compare',0
.rodata:00000000000070A8                                         ; DATA XREF: main+240↑o
.rodata:00000000000070CB                 align 10h
.rodata:00000000000070D0 ; const char aGroupIsMutuall[]
.rodata:00000000000070D0 aGroupIsMutuall db '--group is mutually exclusive with -c/-d/-D/-u',0
.rodata:00000000000070D0                                         ; DATA XREF: main:loc_2535↑o
.rodata:00000000000070FF                 align 20h
.rodata:0000000000007100 aGroupingAndPri db 'grouping and printing repeat counts is meaningless',0
.rodata:0000000000007100                                         ; DATA XREF: main+2A5↑o
.rodata:0000000000007133                 align 8
.rodata:0000000000007138 aPrintingAllDup db 'printing all duplicated lines and repeat counts is meaningless',0
.rodata:0000000000007138                                         ; DATA XREF: main+5F9↑o
.rodata:0000000000007177                 align 20h
.rodata:0000000000007180 grouping_method_map db    1             ; DATA XREF: main+5B2↑o
.rodata:0000000000007180                                         ; main+5CB↑o
.rodata:0000000000007181                 db    0
.rodata:0000000000007182                 db    0
.rodata:0000000000007183                 db    0
.rodata:0000000000007184                 db    2
.rodata:0000000000007185                 db    0
.rodata:0000000000007186                 db    0
.rodata:0000000000007187                 db    0
.rodata:0000000000007188                 db    3
.rodata:0000000000007189                 db    0
.rodata:000000000000718A                 db    0
.rodata:000000000000718B                 db    0
.rodata:000000000000718C                 db    4
.rodata:000000000000718D                 db    0
.rodata:000000000000718E                 db    0
.rodata:000000000000718F                 db    0
.rodata:0000000000007190 delimit_method_map db    0              ; DATA XREF: main+560↑o
.rodata:0000000000007190                                         ; main+57F↑o
.rodata:0000000000007191                 db    0
.rodata:0000000000007192                 db    0
.rodata:0000000000007193                 db    0
.rodata:0000000000007194                 db    1
.rodata:0000000000007195                 db    0
.rodata:0000000000007196                 db    0
.rodata:0000000000007197                 db    0
.rodata:0000000000007198                 db    2
.rodata:0000000000007199                 db    0
.rodata:000000000000719A                 db    0
.rodata:000000000000719B                 db    0
.rodata:000000000000719C a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000071A1 ; const char aInvalidArgumen[]
.rodata:00000000000071A1 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:00000000000071A1                                         ; DATA XREF: argmatch_invalid:loc_2F70↑o
.rodata:00000000000071BC ; const char aAmbiguousArgum[]
.rodata:00000000000071BC aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:00000000000071BC                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:00000000000071D9 ; const char aValidArguments[]
.rodata:00000000000071D9 aValidArguments db 'Valid arguments are:',0
.rodata:00000000000071D9                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:00000000000071EE aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:00000000000071EE                 db '  - %s',0
.rodata:00000000000071F6 aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:00000000000071F6                                         ; main+7A9↑o ...
.rodata:00000000000071FB ; const char aWriteError[]
.rodata:00000000000071FB aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_31D3↑o
.rodata:00000000000071FB                                         ; main+779↑o
.rodata:0000000000007207 ; const char file[]
.rodata:0000000000007207 file            db '/dev/null',0        ; DATA XREF: protect_fd+4↑o
.rodata:0000000000007211 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007213 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_34C0↑o
.rodata:0000000000007219 ; const char aPosix2Version[]
.rodata:0000000000007219 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: posix2_version+1↑o
.rodata:0000000000007229                 align 10h
.rodata:0000000000007230 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007230                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007268 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007270 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007270                                         ; main+3C↑o ...
.rodata:0000000000007274 unk_7274        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007275                 db  80h
.rodata:0000000000007276                 db  98h
.rodata:0000000000007277                 db    0
.rodata:0000000000007278 unk_7278        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007279                 db  80h
.rodata:000000000000727A                 db  99h
.rodata:000000000000727B                 db    0
.rodata:000000000000727C unk_727C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000727D                 db    7
.rodata:000000000000727E                 db  65h ; e
.rodata:000000000000727F                 db    0
.rodata:0000000000007280 unk_7280        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007281                 db 0AFh
.rodata:0000000000007282                 db    0
.rodata:0000000000007283 unk_7283        db  22h ; "             ; DATA XREF: gettext_quote:loc_37C0↑o
.rodata:0000000000007283                                         ; quotearg_buffer_restyled:loc_457B↑o ...
.rodata:0000000000007284                 db    0
.rodata:0000000000007285 ; const char asc_7285[2]
.rodata:0000000000007285 asc_7285        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000007285                                         ; quotearg_buffer_restyled:loc_3943↑o ...
.rodata:0000000000007287 ; const char asc_7287[2]
.rodata:0000000000007287 asc_7287        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007287                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007289 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007291 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209BC8↓o
.rodata:0000000000007297 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209BD0↓o
.rodata:00000000000072A4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209BD8↓o
.rodata:00000000000072A4                                         ; .data.rel.ro:0000000000209BF8↓o
.rodata:00000000000072B1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000072B1                                         ; DATA XREF: .data.rel.ro:0000000000209BE0↓o
.rodata:00000000000072C5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000209BE8↓o
.rodata:00000000000072C7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209BF0↓o
.rodata:00000000000072CF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209C08↓o
.rodata:00000000000072D7                 align 20h
.rodata:00000000000072E0 jpt_3921        dd offset loc_46CA - 72E0h
.rodata:00000000000072E0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000072E0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000072E0                 dd offset loc_3923 - 72E0h ; jump table for switch statement
.rodata:00000000000072E0                 dd offset loc_48F8 - 72E0h
.rodata:00000000000072E0                 dd offset loc_4704 - 72E0h
.rodata:00000000000072E0                 dd offset loc_44F4 - 72E0h
.rodata:00000000000072E0                 dd offset loc_4550 - 72E0h
.rodata:00000000000072E0                 dd offset loc_45A5 - 72E0h
.rodata:00000000000072E0                 dd offset loc_45EA - 72E0h
.rodata:00000000000072E0                 dd offset loc_4624 - 72E0h
.rodata:00000000000072E0                 dd offset loc_4624 - 72E0h
.rodata:00000000000072E0                 dd offset loc_4624 - 72E0h
.rodata:000000000000730C jpt_3A7E        dd offset loc_3CA0 - 730Ch, offset def_3A7E - 730Ch, offset def_3A7E - 730Ch
.rodata:000000000000730C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000730C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset def_3A7E - 730Ch, offset def_3A7E - 730Ch ; jump table for switch statement
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset loc_3CE0 - 730Ch, offset loc_3BE8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3BA8 - 730Ch, offset loc_3D70 - 730Ch, offset loc_3D60 - 730Ch
.rodata:000000000000730C                 dd offset loc_3D50 - 730Ch, offset loc_3D40 - 730Ch, offset def_3A7E - 730Ch
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset def_3A7E - 730Ch, offset def_3A7E - 730Ch
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset def_3A7E - 730Ch, offset def_3A7E - 730Ch
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset def_3A7E - 730Ch, offset def_3A7E - 730Ch
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset def_3A7E - 730Ch, offset def_3A7E - 730Ch
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset def_3A7E - 730Ch, offset def_3A7E - 730Ch
.rodata:000000000000730C                 dd offset def_3A7E - 730Ch, offset def_3A7E - 730Ch, offset loc_3D30 - 730Ch
.rodata:000000000000730C                 dd offset loc_3D20 - 730Ch, offset loc_3D20 - 730Ch, offset loc_3CF0 - 730Ch
.rodata:000000000000730C                 dd offset loc_3D20 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3D20 - 730Ch
.rodata:000000000000730C                 dd offset loc_3B83 - 730Ch, offset loc_3D20 - 730Ch, offset loc_3D20 - 730Ch
.rodata:000000000000730C                 dd offset loc_3D20 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3D20 - 730Ch
.rodata:000000000000730C                 dd offset loc_3D20 - 730Ch, offset loc_3D20 - 730Ch, offset loc_3D20 - 730Ch
.rodata:000000000000730C                 dd offset loc_3B53 - 730Ch, offset def_3A7E - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3D20 - 730Ch, offset loc_3BF8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3D20 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3D20 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch, offset loc_3CC8 - 730Ch
.rodata:000000000000730C                 dd offset loc_3A83 - 730Ch, offset loc_3D20 - 730Ch, offset loc_3A83 - 730Ch
.rodata:000000000000730C                 dd offset loc_3CF0 - 730Ch
.rodata:0000000000007508 jpt_3E0A        dd offset loc_3E70 - 7508h, offset def_3E0A - 7508h, offset def_3E0A - 7508h
.rodata:0000000000007508                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007508                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset def_3E0A - 7508h, offset def_3E0A - 7508h ; jump table for switch statement
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset loc_3E60 - 7508h, offset loc_3FB0 - 7508h
.rodata:0000000000007508                 dd offset loc_3F98 - 7508h, offset loc_3E48 - 7508h, offset loc_3F88 - 7508h
.rodata:0000000000007508                 dd offset loc_3E30 - 7508h, offset loc_3F70 - 7508h, offset def_3E0A - 7508h
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset def_3E0A - 7508h, offset def_3E0A - 7508h
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset def_3E0A - 7508h, offset def_3E0A - 7508h
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset def_3E0A - 7508h, offset def_3E0A - 7508h
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset def_3E0A - 7508h, offset def_3E0A - 7508h
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset def_3E0A - 7508h, offset def_3E0A - 7508h
.rodata:0000000000007508                 dd offset def_3E0A - 7508h, offset def_3E0A - 7508h, offset loc_3F58 - 7508h
.rodata:0000000000007508                 dd offset loc_3F40 - 7508h, offset loc_3F40 - 7508h, offset loc_3F28 - 7508h
.rodata:0000000000007508                 dd offset loc_3F40 - 7508h, offset loc_3F10 - 7508h, offset loc_3F40 - 7508h
.rodata:0000000000007508                 dd offset loc_3B80 - 7508h, offset loc_3F40 - 7508h, offset loc_3F40 - 7508h
.rodata:0000000000007508                 dd offset loc_3F40 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F40 - 7508h
.rodata:0000000000007508                 dd offset loc_3F40 - 7508h, offset loc_3F40 - 7508h, offset loc_3F40 - 7508h
.rodata:0000000000007508                 dd offset loc_3B50 - 7508h, offset def_3E0A - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F40 - 7508h, offset loc_3E10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F40 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F40 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3F10 - 7508h, offset loc_3F10 - 7508h, offset loc_3F10 - 7508h
.rodata:0000000000007508                 dd offset loc_3A80 - 7508h, offset loc_3F40 - 7508h, offset loc_3A80 - 7508h
.rodata:0000000000007508                 dd offset loc_3F28 - 7508h
.rodata:0000000000007704                 align 20h
.rodata:0000000000007720                 public quoting_style_vals
.rodata:0000000000007720 quoting_style_vals db    0
.rodata:0000000000007721                 db    0
.rodata:0000000000007722                 db    0
.rodata:0000000000007723                 db    0
.rodata:0000000000007724                 db    1
.rodata:0000000000007725                 db    0
.rodata:0000000000007726                 db    0
.rodata:0000000000007727                 db    0
.rodata:0000000000007728                 db    2
.rodata:0000000000007729                 db    0
.rodata:000000000000772A                 db    0
.rodata:000000000000772B                 db    0
.rodata:000000000000772C                 db    3
.rodata:000000000000772D                 db    0
.rodata:000000000000772E                 db    0
.rodata:000000000000772F                 db    0
.rodata:0000000000007730                 db    4
.rodata:0000000000007731                 db    0
.rodata:0000000000007732                 db    0
.rodata:0000000000007733                 db    0
.rodata:0000000000007734                 db    5
.rodata:0000000000007735                 db    0
.rodata:0000000000007736                 db    0
.rodata:0000000000007737                 db    0
.rodata:0000000000007738                 db    6
.rodata:0000000000007739                 db    0
.rodata:000000000000773A                 db    0
.rodata:000000000000773B                 db    0
.rodata:000000000000773C                 db    7
.rodata:000000000000773D                 db    0
.rodata:000000000000773E                 db    0
.rodata:000000000000773F                 db    0
.rodata:0000000000007740                 db    8
.rodata:0000000000007741                 db    0
.rodata:0000000000007742                 db    0
.rodata:0000000000007743                 db    0
.rodata:0000000000007744                 db    9
.rodata:0000000000007745                 db    0
.rodata:0000000000007746                 db    0
.rodata:0000000000007747                 db    0
.rodata:0000000000007748 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007754 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000775B ; const char aC_0[]
.rodata:000000000000775B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_546C↑o
.rodata:000000000000775F ; const char aWrittenByS[]
.rodata:000000000000775F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000775F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000776F ; const char aWrittenBySAndS[]
.rodata:000000000000776F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000776F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007786 ; const char aWrittenBySSAnd[]
.rodata:0000000000007786 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007786                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000077A2 ; const char aReportBugsToS[]
.rodata:00000000000077A2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000077A2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000077B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000077B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000077CD ; const char aSHomePageS[]
.rodata:00000000000077CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000077CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000077E1                 align 8
.rodata:00000000000077E8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000077E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000077E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000077E8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000077E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000077E8                 db '.',0Ah
.rodata:00000000000077E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000077E8                 db 0Ah,0
.rodata:00000000000078B4                 align 8
.rodata:00000000000078B8 ; const char aWrittenBySSSAn[]
.rodata:00000000000078B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000078B8                                         ; DATA XREF: version_etc_arn:loc_56C0↑o
.rodata:00000000000078B8                 db 'and %s.',0Ah,0
.rodata:00000000000078D8 ; const char aWrittenBySSSSA[]
.rodata:00000000000078D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000078D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000078D8                 db '%s, and %s.',0Ah,0
.rodata:00000000000078FC                 align 20h
.rodata:0000000000007900 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007900 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007900                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007900                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000007928 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000007928 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007928                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000007928                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007954                 align 8
.rodata:0000000000007958 ; const char aWrittenBySSSSS[]
.rodata:0000000000007958 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007958                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007958                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007958                 db 'and %s.',0Ah,0
.rodata:0000000000007988 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007988 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007988                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007988                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007988                 db '%s, and %s.',0Ah,0
.rodata:00000000000079BC                 align 20h
.rodata:00000000000079C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000079C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000079C0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000079C0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000079FC                 align 20h
.rodata:0000000000007A00 ; const char aGeneralHelpUsi[]
.rodata:0000000000007A00 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007A00                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007A00                 db 0
.rodata:0000000000007A41                 align 4
.rodata:0000000000007A44 jpt_54D4        dd offset loc_5556 - 7A44h
.rodata:0000000000007A44                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000007A44                                         ; version_etc_arn+9D↑r
.rodata:0000000000007A44                 dd offset loc_55E8 - 7A44h ; jump table for switch statement
.rodata:0000000000007A44                 dd offset loc_5628 - 7A44h
.rodata:0000000000007A44                 dd offset loc_5670 - 7A44h
.rodata:0000000000007A44                 dd offset loc_56C0 - 7A44h
.rodata:0000000000007A44                 dd offset loc_5718 - 7A44h
.rodata:0000000000007A44                 dd offset loc_5748 - 7A44h
.rodata:0000000000007A44                 dd offset loc_57B0 - 7A44h
.rodata:0000000000007A44                 dd offset loc_54E0 - 7A44h
.rodata:0000000000007A44                 dd offset loc_5590 - 7A44h
.rodata:0000000000007A6C                 align 20h
.rodata:0000000000007A80                 public version_etc_copyright
.rodata:0000000000007A80 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007A80                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000007AAF ; const char aMemoryExhauste[]
.rodata:0000000000007AAF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007AC0 ; const char aStringComparis[]
.rodata:0000000000007AC0 aStringComparis db 'string comparison failed',0
.rodata:0000000000007AC0                                         ; DATA XREF: collate_error+11↑o
.rodata:0000000000007AD9                 align 20h
.rodata:0000000000007AE0 ; const char aSetLcAllCToWor[]
.rodata:0000000000007AE0 aSetLcAllCToWor db 'Set LC_ALL=',27h,'C',27h,' to work around the problem.',0
.rodata:0000000000007AE0                                         ; DATA XREF: collate_error+39↑o
.rodata:0000000000007B0B                 align 10h
.rodata:0000000000007B10 ; const char aTheStringsComp[]
.rodata:0000000000007B10 aTheStringsComp db 'The strings compared were %s and %s.',0
.rodata:0000000000007B10                                         ; DATA XREF: collate_error+84↑o
.rodata:0000000000007B35                 align 8
.rodata:0000000000007B38 ; const char aCoreutils831Li[]
.rodata:0000000000007B38 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000007B38                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:0000000000007B58 ; const char assertion[]
.rodata:0000000000007B58 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000007B58                                         ; DATA XREF: xstrtoul+393↑o
.rodata:0000000000007B7E                 align 20h
.rodata:0000000000007B80 jpt_6016        dd offset loc_6166 - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:0000000000007B80                                         ; xstrtoul+1CF↑r
.rodata:0000000000007B80                 dd offset loc_6143 - 7B80h, offset def_6016 - 7B80h, offset loc_617C - 7B80h ; jump table for switch statement
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset loc_60FF - 7B80h, offset def_6016 - 7B80h, offset loc_6018 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset loc_6120 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset loc_60DF - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset loc_60BA - 7B80h
.rodata:0000000000007B80                 dd offset loc_6094 - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset loc_607D - 7B80h
.rodata:0000000000007B80                 dd offset loc_6040 - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset loc_617C - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset loc_60FF - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset loc_6018 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset def_6016 - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset loc_60DF - 7B80h
.rodata:0000000000007B80                 dd offset def_6016 - 7B80h, offset def_6016 - 7B80h, offset loc_6067 - 7B80h
.rodata:0000000000007C58 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000007C58 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:0000000000007C58                                         ; DATA XREF: xstrtoul:loc_61C5↑o
.rodata:0000000000007C61 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007C61                                         ; locale_charset:loc_64C0↑o
.rodata:0000000000007C61 _rodata         ends
.rodata:0000000000007C61
LOAD:0000000000007C67 ; ===========================================================================
LOAD:0000000000007C67
LOAD:0000000000007C67 ; Segment type: Pure code
LOAD:0000000000007C67 ; Segment permissions: Read/Execute
LOAD:0000000000007C67 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007C67                 assume cs:LOAD
LOAD:0000000000007C67                 ;org 7C67h
LOAD:0000000000007C67                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007C67                 align 8
LOAD:0000000000007C67 LOAD            ends
LOAD:0000000000007C67
.eh_frame_hdr:0000000000007C68 ; ===========================================================================
.eh_frame_hdr:0000000000007C68
.eh_frame_hdr:0000000000007C68 ; Segment type: Pure data
.eh_frame_hdr:0000000000007C68 ; Segment permissions: Read
.eh_frame_hdr:0000000000007C68 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007C68                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007C68                 ;org 7C68h
.eh_frame_hdr:0000000000007C68 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007C69                 db  1Bh
.eh_frame_hdr:0000000000007C6A                 db    3
.eh_frame_hdr:0000000000007C6B                 db  3Bh ; ;
.eh_frame_hdr:0000000000007C6C                 db  14h
.eh_frame_hdr:0000000000007C6D                 db    3
.eh_frame_hdr:0000000000007C6E                 db    0
.eh_frame_hdr:0000000000007C6F                 db    0
.eh_frame_hdr:0000000000007C70                 db  61h ; a
.eh_frame_hdr:0000000000007C71                 db    0
.eh_frame_hdr:0000000000007C72                 db    0
.eh_frame_hdr:0000000000007C73                 db    0
.eh_frame_hdr:0000000000007C74                 db 0C8h
.eh_frame_hdr:0000000000007C75                 db  9Ah
.eh_frame_hdr:0000000000007C76                 db 0FFh
.eh_frame_hdr:0000000000007C77                 db 0FFh
.eh_frame_hdr:0000000000007C78                 db  60h ; `
.eh_frame_hdr:0000000000007C79                 db    3
.eh_frame_hdr:0000000000007C7A                 db    0
.eh_frame_hdr:0000000000007C7B                 db    0
.eh_frame_hdr:0000000000007C7C                 db  48h ; H
.eh_frame_hdr:0000000000007C7D                 db  9Eh
.eh_frame_hdr:0000000000007C7E                 db 0FFh
.eh_frame_hdr:0000000000007C7F                 db 0FFh
.eh_frame_hdr:0000000000007C80                 db  88h
.eh_frame_hdr:0000000000007C81                 db    3
.eh_frame_hdr:0000000000007C82                 db    0
.eh_frame_hdr:0000000000007C83                 db    0
.eh_frame_hdr:0000000000007C84                 db  58h ; X
.eh_frame_hdr:0000000000007C85                 db  9Eh
.eh_frame_hdr:0000000000007C86                 db 0FFh
.eh_frame_hdr:0000000000007C87                 db 0FFh
.eh_frame_hdr:0000000000007C88                 db  84h
.eh_frame_hdr:0000000000007C89                 db    4
.eh_frame_hdr:0000000000007C8A                 db    0
.eh_frame_hdr:0000000000007C8B                 db    0
.eh_frame_hdr:0000000000007C8C                 db  28h ; (
.eh_frame_hdr:0000000000007C8D                 db 0A9h
.eh_frame_hdr:0000000000007C8E                 db 0FFh
.eh_frame_hdr:0000000000007C8F                 db 0FFh
.eh_frame_hdr:0000000000007C90                 db  30h ; 0
.eh_frame_hdr:0000000000007C91                 db    3
.eh_frame_hdr:0000000000007C92                 db    0
.eh_frame_hdr:0000000000007C93                 db    0
.eh_frame_hdr:0000000000007C94                 db  38h ; 8
.eh_frame_hdr:0000000000007C95                 db 0AAh
.eh_frame_hdr:0000000000007C96                 db 0FFh
.eh_frame_hdr:0000000000007C97                 db 0FFh
.eh_frame_hdr:0000000000007C98                 db 0A0h
.eh_frame_hdr:0000000000007C99                 db    3
.eh_frame_hdr:0000000000007C9A                 db    0
.eh_frame_hdr:0000000000007C9B                 db    0
.eh_frame_hdr:0000000000007C9C                 db 0C8h
.eh_frame_hdr:0000000000007C9D                 db 0AAh
.eh_frame_hdr:0000000000007C9E                 db 0FFh
.eh_frame_hdr:0000000000007C9F                 db 0FFh
.eh_frame_hdr:0000000000007CA0                 db 0CCh
.eh_frame_hdr:0000000000007CA1                 db    3
.eh_frame_hdr:0000000000007CA2                 db    0
.eh_frame_hdr:0000000000007CA3                 db    0
.eh_frame_hdr:0000000000007CA4                 db  58h ; X
.eh_frame_hdr:0000000000007CA5                 db 0ABh
.eh_frame_hdr:0000000000007CA6                 db 0FFh
.eh_frame_hdr:0000000000007CA7                 db 0FFh
.eh_frame_hdr:0000000000007CA8                 db 0F8h
.eh_frame_hdr:0000000000007CA9                 db    3
.eh_frame_hdr:0000000000007CAA                 db    0
.eh_frame_hdr:0000000000007CAB                 db    0
.eh_frame_hdr:0000000000007CAC                 db 0D8h
.eh_frame_hdr:0000000000007CAD                 db 0ABh
.eh_frame_hdr:0000000000007CAE                 db 0FFh
.eh_frame_hdr:0000000000007CAF                 db 0FFh
.eh_frame_hdr:0000000000007CB0                 db  18h
.eh_frame_hdr:0000000000007CB1                 db    4
.eh_frame_hdr:0000000000007CB2                 db    0
.eh_frame_hdr:0000000000007CB3                 db    0
.eh_frame_hdr:0000000000007CB4                 db 0B8h
.eh_frame_hdr:0000000000007CB5                 db 0ACh
.eh_frame_hdr:0000000000007CB6                 db 0FFh
.eh_frame_hdr:0000000000007CB7                 db 0FFh
.eh_frame_hdr:0000000000007CB8                 db  58h ; X
.eh_frame_hdr:0000000000007CB9                 db    4
.eh_frame_hdr:0000000000007CBA                 db    0
.eh_frame_hdr:0000000000007CBB                 db    0
.eh_frame_hdr:0000000000007CBC                 db  78h ; x
.eh_frame_hdr:0000000000007CBD                 db 0B1h
.eh_frame_hdr:0000000000007CBE                 db 0FFh
.eh_frame_hdr:0000000000007CBF                 db 0FFh
.eh_frame_hdr:0000000000007CC0                 db 0E0h
.eh_frame_hdr:0000000000007CC1                 db    4
.eh_frame_hdr:0000000000007CC2                 db    0
.eh_frame_hdr:0000000000007CC3                 db    0
.eh_frame_hdr:0000000000007CC4                 db  88h
.eh_frame_hdr:0000000000007CC5                 db 0B1h
.eh_frame_hdr:0000000000007CC6                 db 0FFh
.eh_frame_hdr:0000000000007CC7                 db 0FFh
.eh_frame_hdr:0000000000007CC8                 db 0F4h
.eh_frame_hdr:0000000000007CC9                 db    4
.eh_frame_hdr:0000000000007CCA                 db    0
.eh_frame_hdr:0000000000007CCB                 db    0
.eh_frame_hdr:0000000000007CCC                 db 0A8h
.eh_frame_hdr:0000000000007CCD                 db 0B2h
.eh_frame_hdr:0000000000007CCE                 db 0FFh
.eh_frame_hdr:0000000000007CCF                 db 0FFh
.eh_frame_hdr:0000000000007CD0                 db  40h ; @
.eh_frame_hdr:0000000000007CD1                 db    5
.eh_frame_hdr:0000000000007CD2                 db    0
.eh_frame_hdr:0000000000007CD3                 db    0
.eh_frame_hdr:0000000000007CD4                 db  28h ; (
.eh_frame_hdr:0000000000007CD5                 db 0B3h
.eh_frame_hdr:0000000000007CD6                 db 0FFh
.eh_frame_hdr:0000000000007CD7                 db 0FFh
.eh_frame_hdr:0000000000007CD8                 db  6Ch ; l
.eh_frame_hdr:0000000000007CD9                 db    5
.eh_frame_hdr:0000000000007CDA                 db    0
.eh_frame_hdr:0000000000007CDB                 db    0
.eh_frame_hdr:0000000000007CDC                 db  48h ; H
.eh_frame_hdr:0000000000007CDD                 db 0B4h
.eh_frame_hdr:0000000000007CDE                 db 0FFh
.eh_frame_hdr:0000000000007CDF                 db 0FFh
.eh_frame_hdr:0000000000007CE0                 db 0CCh
.eh_frame_hdr:0000000000007CE1                 db    5
.eh_frame_hdr:0000000000007CE2                 db    0
.eh_frame_hdr:0000000000007CE3                 db    0
.eh_frame_hdr:0000000000007CE4                 db 0B8h
.eh_frame_hdr:0000000000007CE5                 db 0B4h
.eh_frame_hdr:0000000000007CE6                 db 0FFh
.eh_frame_hdr:0000000000007CE7                 db 0FFh
.eh_frame_hdr:0000000000007CE8                 db  18h
.eh_frame_hdr:0000000000007CE9                 db    6
.eh_frame_hdr:0000000000007CEA                 db    0
.eh_frame_hdr:0000000000007CEB                 db    0
.eh_frame_hdr:0000000000007CEC                 db    8
.eh_frame_hdr:0000000000007CED                 db 0B5h
.eh_frame_hdr:0000000000007CEE                 db 0FFh
.eh_frame_hdr:0000000000007CEF                 db 0FFh
.eh_frame_hdr:0000000000007CF0                 db  58h ; X
.eh_frame_hdr:0000000000007CF1                 db    6
.eh_frame_hdr:0000000000007CF2                 db    0
.eh_frame_hdr:0000000000007CF3                 db    0
.eh_frame_hdr:0000000000007CF4                 db  18h
.eh_frame_hdr:0000000000007CF5                 db 0B5h
.eh_frame_hdr:0000000000007CF6                 db 0FFh
.eh_frame_hdr:0000000000007CF7                 db 0FFh
.eh_frame_hdr:0000000000007CF8                 db  6Ch ; l
.eh_frame_hdr:0000000000007CF9                 db    6
.eh_frame_hdr:0000000000007CFA                 db    0
.eh_frame_hdr:0000000000007CFB                 db    0
.eh_frame_hdr:0000000000007CFC                 db  28h ; (
.eh_frame_hdr:0000000000007CFD                 db 0B5h
.eh_frame_hdr:0000000000007CFE                 db 0FFh
.eh_frame_hdr:0000000000007CFF                 db 0FFh
.eh_frame_hdr:0000000000007D00                 db  80h
.eh_frame_hdr:0000000000007D01                 db    6
.eh_frame_hdr:0000000000007D02                 db    0
.eh_frame_hdr:0000000000007D03                 db    0
.eh_frame_hdr:0000000000007D04                 db 0D8h
.eh_frame_hdr:0000000000007D05                 db 0B5h
.eh_frame_hdr:0000000000007D06                 db 0FFh
.eh_frame_hdr:0000000000007D07                 db 0FFh
.eh_frame_hdr:0000000000007D08                 db 0B0h
.eh_frame_hdr:0000000000007D09                 db    6
.eh_frame_hdr:0000000000007D0A                 db    0
.eh_frame_hdr:0000000000007D0B                 db    0
.eh_frame_hdr:0000000000007D0C                 db 0E8h
.eh_frame_hdr:0000000000007D0D                 db 0B5h
.eh_frame_hdr:0000000000007D0E                 db 0FFh
.eh_frame_hdr:0000000000007D0F                 db 0FFh
.eh_frame_hdr:0000000000007D10                 db 0C4h
.eh_frame_hdr:0000000000007D11                 db    6
.eh_frame_hdr:0000000000007D12                 db    0
.eh_frame_hdr:0000000000007D13                 db    0
.eh_frame_hdr:0000000000007D14                 db  18h
.eh_frame_hdr:0000000000007D15                 db 0B6h
.eh_frame_hdr:0000000000007D16                 db 0FFh
.eh_frame_hdr:0000000000007D17                 db 0FFh
.eh_frame_hdr:0000000000007D18                 db 0E0h
.eh_frame_hdr:0000000000007D19                 db    6
.eh_frame_hdr:0000000000007D1A                 db    0
.eh_frame_hdr:0000000000007D1B                 db    0
.eh_frame_hdr:0000000000007D1C                 db  68h ; h
.eh_frame_hdr:0000000000007D1D                 db 0B6h
.eh_frame_hdr:0000000000007D1E                 db 0FFh
.eh_frame_hdr:0000000000007D1F                 db 0FFh
.eh_frame_hdr:0000000000007D20                 db    8
.eh_frame_hdr:0000000000007D21                 db    7
.eh_frame_hdr:0000000000007D22                 db    0
.eh_frame_hdr:0000000000007D23                 db    0
.eh_frame_hdr:0000000000007D24                 db  18h
.eh_frame_hdr:0000000000007D25                 db 0B8h
.eh_frame_hdr:0000000000007D26                 db 0FFh
.eh_frame_hdr:0000000000007D27                 db 0FFh
.eh_frame_hdr:0000000000007D28                 db  58h ; X
.eh_frame_hdr:0000000000007D29                 db    7
.eh_frame_hdr:0000000000007D2A                 db    0
.eh_frame_hdr:0000000000007D2B                 db    0
.eh_frame_hdr:0000000000007D2C                 db  78h ; x
.eh_frame_hdr:0000000000007D2D                 db 0B8h
.eh_frame_hdr:0000000000007D2E                 db 0FFh
.eh_frame_hdr:0000000000007D2F                 db 0FFh
.eh_frame_hdr:0000000000007D30                 db  78h ; x
.eh_frame_hdr:0000000000007D31                 db    7
.eh_frame_hdr:0000000000007D32                 db    0
.eh_frame_hdr:0000000000007D33                 db    0
.eh_frame_hdr:0000000000007D34                 db  88h
.eh_frame_hdr:0000000000007D35                 db 0B8h
.eh_frame_hdr:0000000000007D36                 db 0FFh
.eh_frame_hdr:0000000000007D37                 db 0FFh
.eh_frame_hdr:0000000000007D38                 db  8Ch
.eh_frame_hdr:0000000000007D39                 db    7
.eh_frame_hdr:0000000000007D3A                 db    0
.eh_frame_hdr:0000000000007D3B                 db    0
.eh_frame_hdr:0000000000007D3C                 db  98h
.eh_frame_hdr:0000000000007D3D                 db 0B9h
.eh_frame_hdr:0000000000007D3E                 db 0FFh
.eh_frame_hdr:0000000000007D3F                 db 0FFh
.eh_frame_hdr:0000000000007D40                 db 0F0h
.eh_frame_hdr:0000000000007D41                 db    7
.eh_frame_hdr:0000000000007D42                 db    0
.eh_frame_hdr:0000000000007D43                 db    0
.eh_frame_hdr:0000000000007D44                 db 0A8h
.eh_frame_hdr:0000000000007D45                 db 0B9h
.eh_frame_hdr:0000000000007D46                 db 0FFh
.eh_frame_hdr:0000000000007D47                 db 0FFh
.eh_frame_hdr:0000000000007D48                 db    4
.eh_frame_hdr:0000000000007D49                 db    8
.eh_frame_hdr:0000000000007D4A                 db    0
.eh_frame_hdr:0000000000007D4B                 db    0
.eh_frame_hdr:0000000000007D4C                 db 0B8h
.eh_frame_hdr:0000000000007D4D                 db 0B9h
.eh_frame_hdr:0000000000007D4E                 db 0FFh
.eh_frame_hdr:0000000000007D4F                 db 0FFh
.eh_frame_hdr:0000000000007D50                 db  18h
.eh_frame_hdr:0000000000007D51                 db    8
.eh_frame_hdr:0000000000007D52                 db    0
.eh_frame_hdr:0000000000007D53                 db    0
.eh_frame_hdr:0000000000007D54                 db    8
.eh_frame_hdr:0000000000007D55                 db 0BAh
.eh_frame_hdr:0000000000007D56                 db 0FFh
.eh_frame_hdr:0000000000007D57                 db 0FFh
.eh_frame_hdr:0000000000007D58                 db  48h ; H
.eh_frame_hdr:0000000000007D59                 db    8
.eh_frame_hdr:0000000000007D5A                 db    0
.eh_frame_hdr:0000000000007D5B                 db    0
.eh_frame_hdr:0000000000007D5C                 db  98h
.eh_frame_hdr:0000000000007D5D                 db 0BAh
.eh_frame_hdr:0000000000007D5E                 db 0FFh
.eh_frame_hdr:0000000000007D5F                 db 0FFh
.eh_frame_hdr:0000000000007D60                 db  70h ; p
.eh_frame_hdr:0000000000007D61                 db    8
.eh_frame_hdr:0000000000007D62                 db    0
.eh_frame_hdr:0000000000007D63                 db    0
.eh_frame_hdr:0000000000007D64                 db  38h ; 8
.eh_frame_hdr:0000000000007D65                 db 0BBh
.eh_frame_hdr:0000000000007D66                 db 0FFh
.eh_frame_hdr:0000000000007D67                 db 0FFh
.eh_frame_hdr:0000000000007D68                 db  90h
.eh_frame_hdr:0000000000007D69                 db    8
.eh_frame_hdr:0000000000007D6A                 db    0
.eh_frame_hdr:0000000000007D6B                 db    0
.eh_frame_hdr:0000000000007D6C                 db  28h ; (
.eh_frame_hdr:0000000000007D6D                 db 0BCh
.eh_frame_hdr:0000000000007D6E                 db 0FFh
.eh_frame_hdr:0000000000007D6F                 db 0FFh
.eh_frame_hdr:0000000000007D70                 db 0D4h
.eh_frame_hdr:0000000000007D71                 db    8
.eh_frame_hdr:0000000000007D72                 db    0
.eh_frame_hdr:0000000000007D73                 db    0
.eh_frame_hdr:0000000000007D74                 db  68h ; h
.eh_frame_hdr:0000000000007D75                 db 0CEh
.eh_frame_hdr:0000000000007D76                 db 0FFh
.eh_frame_hdr:0000000000007D77                 db 0FFh
.eh_frame_hdr:0000000000007D78                 db  4Ch ; L
.eh_frame_hdr:0000000000007D79                 db    9
.eh_frame_hdr:0000000000007D7A                 db    0
.eh_frame_hdr:0000000000007D7B                 db    0
.eh_frame_hdr:0000000000007D7C                 db  18h
.eh_frame_hdr:0000000000007D7D                 db 0D0h
.eh_frame_hdr:0000000000007D7E                 db 0FFh
.eh_frame_hdr:0000000000007D7F                 db 0FFh
.eh_frame_hdr:0000000000007D80                 db 0B8h
.eh_frame_hdr:0000000000007D81                 db    9
.eh_frame_hdr:0000000000007D82                 db    0
.eh_frame_hdr:0000000000007D83                 db    0
.eh_frame_hdr:0000000000007D84                 db  58h ; X
.eh_frame_hdr:0000000000007D85                 db 0D0h
.eh_frame_hdr:0000000000007D86                 db 0FFh
.eh_frame_hdr:0000000000007D87                 db 0FFh
.eh_frame_hdr:0000000000007D88                 db 0E4h
.eh_frame_hdr:0000000000007D89                 db    9
.eh_frame_hdr:0000000000007D8A                 db    0
.eh_frame_hdr:0000000000007D8B                 db    0
.eh_frame_hdr:0000000000007D8C                 db  78h ; x
.eh_frame_hdr:0000000000007D8D                 db 0D0h
.eh_frame_hdr:0000000000007D8E                 db 0FFh
.eh_frame_hdr:0000000000007D8F                 db 0FFh
.eh_frame_hdr:0000000000007D90                 db 0F8h
.eh_frame_hdr:0000000000007D91                 db    9
.eh_frame_hdr:0000000000007D92                 db    0
.eh_frame_hdr:0000000000007D93                 db    0
.eh_frame_hdr:0000000000007D94                 db  98h
.eh_frame_hdr:0000000000007D95                 db 0D0h
.eh_frame_hdr:0000000000007D96                 db 0FFh
.eh_frame_hdr:0000000000007D97                 db 0FFh
.eh_frame_hdr:0000000000007D98                 db  0Ch
.eh_frame_hdr:0000000000007D99                 db  0Ah
.eh_frame_hdr:0000000000007D9A                 db    0
.eh_frame_hdr:0000000000007D9B                 db    0
.eh_frame_hdr:0000000000007D9C                 db 0D8h
.eh_frame_hdr:0000000000007D9D                 db 0D0h
.eh_frame_hdr:0000000000007D9E                 db 0FFh
.eh_frame_hdr:0000000000007D9F                 db 0FFh
.eh_frame_hdr:0000000000007DA0                 db  20h
.eh_frame_hdr:0000000000007DA1                 db  0Ah
.eh_frame_hdr:0000000000007DA2                 db    0
.eh_frame_hdr:0000000000007DA3                 db    0
.eh_frame_hdr:0000000000007DA4                 db 0F8h
.eh_frame_hdr:0000000000007DA5                 db 0D0h
.eh_frame_hdr:0000000000007DA6                 db 0FFh
.eh_frame_hdr:0000000000007DA7                 db 0FFh
.eh_frame_hdr:0000000000007DA8                 db  34h ; 4
.eh_frame_hdr:0000000000007DA9                 db  0Ah
.eh_frame_hdr:0000000000007DAA                 db    0
.eh_frame_hdr:0000000000007DAB                 db    0
.eh_frame_hdr:0000000000007DAC                 db  28h ; (
.eh_frame_hdr:0000000000007DAD                 db 0D1h
.eh_frame_hdr:0000000000007DAE                 db 0FFh
.eh_frame_hdr:0000000000007DAF                 db 0FFh
.eh_frame_hdr:0000000000007DB0                 db  48h ; H
.eh_frame_hdr:0000000000007DB1                 db  0Ah
.eh_frame_hdr:0000000000007DB2                 db    0
.eh_frame_hdr:0000000000007DB3                 db    0
.eh_frame_hdr:0000000000007DB4                 db 0A8h
.eh_frame_hdr:0000000000007DB5                 db 0D1h
.eh_frame_hdr:0000000000007DB6                 db 0FFh
.eh_frame_hdr:0000000000007DB7                 db 0FFh
.eh_frame_hdr:0000000000007DB8                 db  9Ch
.eh_frame_hdr:0000000000007DB9                 db  0Ah
.eh_frame_hdr:0000000000007DBA                 db    0
.eh_frame_hdr:0000000000007DBB                 db    0
.eh_frame_hdr:0000000000007DBC                 db  98h
.eh_frame_hdr:0000000000007DBD                 db 0D2h
.eh_frame_hdr:0000000000007DBE                 db 0FFh
.eh_frame_hdr:0000000000007DBF                 db 0FFh
.eh_frame_hdr:0000000000007DC0                 db    8
.eh_frame_hdr:0000000000007DC1                 db  0Bh
.eh_frame_hdr:0000000000007DC2                 db    0
.eh_frame_hdr:0000000000007DC3                 db    0
.eh_frame_hdr:0000000000007DC4                 db 0A8h
.eh_frame_hdr:0000000000007DC5                 db 0D2h
.eh_frame_hdr:0000000000007DC6                 db 0FFh
.eh_frame_hdr:0000000000007DC7                 db 0FFh
.eh_frame_hdr:0000000000007DC8                 db  1Ch
.eh_frame_hdr:0000000000007DC9                 db  0Bh
.eh_frame_hdr:0000000000007DCA                 db    0
.eh_frame_hdr:0000000000007DCB                 db    0
.eh_frame_hdr:0000000000007DCC                 db  48h ; H
.eh_frame_hdr:0000000000007DCD                 db 0D3h
.eh_frame_hdr:0000000000007DCE                 db 0FFh
.eh_frame_hdr:0000000000007DCF                 db 0FFh
.eh_frame_hdr:0000000000007DD0                 db  48h ; H
.eh_frame_hdr:0000000000007DD1                 db  0Bh
.eh_frame_hdr:0000000000007DD2                 db    0
.eh_frame_hdr:0000000000007DD3                 db    0
.eh_frame_hdr:0000000000007DD4                 db  68h ; h
.eh_frame_hdr:0000000000007DD5                 db 0D3h
.eh_frame_hdr:0000000000007DD6                 db 0FFh
.eh_frame_hdr:0000000000007DD7                 db 0FFh
.eh_frame_hdr:0000000000007DD8                 db  5Ch ; \
.eh_frame_hdr:0000000000007DD9                 db  0Bh
.eh_frame_hdr:0000000000007DDA                 db    0
.eh_frame_hdr:0000000000007DDB                 db    0
.eh_frame_hdr:0000000000007DDC                 db  78h ; x
.eh_frame_hdr:0000000000007DDD                 db 0D3h
.eh_frame_hdr:0000000000007DDE                 db 0FFh
.eh_frame_hdr:0000000000007DDF                 db 0FFh
.eh_frame_hdr:0000000000007DE0                 db  70h ; p
.eh_frame_hdr:0000000000007DE1                 db  0Bh
.eh_frame_hdr:0000000000007DE2                 db    0
.eh_frame_hdr:0000000000007DE3                 db    0
.eh_frame_hdr:0000000000007DE4                 db  98h
.eh_frame_hdr:0000000000007DE5                 db 0D3h
.eh_frame_hdr:0000000000007DE6                 db 0FFh
.eh_frame_hdr:0000000000007DE7                 db 0FFh
.eh_frame_hdr:0000000000007DE8                 db  84h
.eh_frame_hdr:0000000000007DE9                 db  0Bh
.eh_frame_hdr:0000000000007DEA                 db    0
.eh_frame_hdr:0000000000007DEB                 db    0
.eh_frame_hdr:0000000000007DEC                 db 0B8h
.eh_frame_hdr:0000000000007DED                 db 0D3h
.eh_frame_hdr:0000000000007DEE                 db 0FFh
.eh_frame_hdr:0000000000007DEF                 db 0FFh
.eh_frame_hdr:0000000000007DF0                 db  98h
.eh_frame_hdr:0000000000007DF1                 db  0Bh
.eh_frame_hdr:0000000000007DF2                 db    0
.eh_frame_hdr:0000000000007DF3                 db    0
.eh_frame_hdr:0000000000007DF4                 db  48h ; H
.eh_frame_hdr:0000000000007DF5                 db 0D4h
.eh_frame_hdr:0000000000007DF6                 db 0FFh
.eh_frame_hdr:0000000000007DF7                 db 0FFh
.eh_frame_hdr:0000000000007DF8                 db 0B4h
.eh_frame_hdr:0000000000007DF9                 db  0Bh
.eh_frame_hdr:0000000000007DFA                 db    0
.eh_frame_hdr:0000000000007DFB                 db    0
.eh_frame_hdr:0000000000007DFC                 db 0D8h
.eh_frame_hdr:0000000000007DFD                 db 0D4h
.eh_frame_hdr:0000000000007DFE                 db 0FFh
.eh_frame_hdr:0000000000007DFF                 db 0FFh
.eh_frame_hdr:0000000000007E00                 db 0D0h
.eh_frame_hdr:0000000000007E01                 db  0Bh
.eh_frame_hdr:0000000000007E02                 db    0
.eh_frame_hdr:0000000000007E03                 db    0
.eh_frame_hdr:0000000000007E04                 db 0E8h
.eh_frame_hdr:0000000000007E05                 db 0D4h
.eh_frame_hdr:0000000000007E06                 db 0FFh
.eh_frame_hdr:0000000000007E07                 db 0FFh
.eh_frame_hdr:0000000000007E08                 db 0E4h
.eh_frame_hdr:0000000000007E09                 db  0Bh
.eh_frame_hdr:0000000000007E0A                 db    0
.eh_frame_hdr:0000000000007E0B                 db    0
.eh_frame_hdr:0000000000007E0C                 db 0F8h
.eh_frame_hdr:0000000000007E0D                 db 0D4h
.eh_frame_hdr:0000000000007E0E                 db 0FFh
.eh_frame_hdr:0000000000007E0F                 db 0FFh
.eh_frame_hdr:0000000000007E10                 db 0F8h
.eh_frame_hdr:0000000000007E11                 db  0Bh
.eh_frame_hdr:0000000000007E12                 db    0
.eh_frame_hdr:0000000000007E13                 db    0
.eh_frame_hdr:0000000000007E14                 db  98h
.eh_frame_hdr:0000000000007E15                 db 0D5h
.eh_frame_hdr:0000000000007E16                 db 0FFh
.eh_frame_hdr:0000000000007E17                 db 0FFh
.eh_frame_hdr:0000000000007E18                 db  14h
.eh_frame_hdr:0000000000007E19                 db  0Ch
.eh_frame_hdr:0000000000007E1A                 db    0
.eh_frame_hdr:0000000000007E1B                 db    0
.eh_frame_hdr:0000000000007E1C                 db 0A8h
.eh_frame_hdr:0000000000007E1D                 db 0D5h
.eh_frame_hdr:0000000000007E1E                 db 0FFh
.eh_frame_hdr:0000000000007E1F                 db 0FFh
.eh_frame_hdr:0000000000007E20                 db  28h ; (
.eh_frame_hdr:0000000000007E21                 db  0Ch
.eh_frame_hdr:0000000000007E22                 db    0
.eh_frame_hdr:0000000000007E23                 db    0
.eh_frame_hdr:0000000000007E24                 db 0C8h
.eh_frame_hdr:0000000000007E25                 db 0D5h
.eh_frame_hdr:0000000000007E26                 db 0FFh
.eh_frame_hdr:0000000000007E27                 db 0FFh
.eh_frame_hdr:0000000000007E28                 db  3Ch ; <
.eh_frame_hdr:0000000000007E29                 db  0Ch
.eh_frame_hdr:0000000000007E2A                 db    0
.eh_frame_hdr:0000000000007E2B                 db    0
.eh_frame_hdr:0000000000007E2C                 db 0D8h
.eh_frame_hdr:0000000000007E2D                 db 0D5h
.eh_frame_hdr:0000000000007E2E                 db 0FFh
.eh_frame_hdr:0000000000007E2F                 db 0FFh
.eh_frame_hdr:0000000000007E30                 db  50h ; P
.eh_frame_hdr:0000000000007E31                 db  0Ch
.eh_frame_hdr:0000000000007E32                 db    0
.eh_frame_hdr:0000000000007E33                 db    0
.eh_frame_hdr:0000000000007E34                 db  68h ; h
.eh_frame_hdr:0000000000007E35                 db 0D6h
.eh_frame_hdr:0000000000007E36                 db 0FFh
.eh_frame_hdr:0000000000007E37                 db 0FFh
.eh_frame_hdr:0000000000007E38                 db  6Ch ; l
.eh_frame_hdr:0000000000007E39                 db  0Ch
.eh_frame_hdr:0000000000007E3A                 db    0
.eh_frame_hdr:0000000000007E3B                 db    0
.eh_frame_hdr:0000000000007E3C                 db    8
.eh_frame_hdr:0000000000007E3D                 db 0D7h
.eh_frame_hdr:0000000000007E3E                 db 0FFh
.eh_frame_hdr:0000000000007E3F                 db 0FFh
.eh_frame_hdr:0000000000007E40                 db  88h
.eh_frame_hdr:0000000000007E41                 db  0Ch
.eh_frame_hdr:0000000000007E42                 db    0
.eh_frame_hdr:0000000000007E43                 db    0
.eh_frame_hdr:0000000000007E44                 db  18h
.eh_frame_hdr:0000000000007E45                 db 0D7h
.eh_frame_hdr:0000000000007E46                 db 0FFh
.eh_frame_hdr:0000000000007E47                 db 0FFh
.eh_frame_hdr:0000000000007E48                 db  9Ch
.eh_frame_hdr:0000000000007E49                 db  0Ch
.eh_frame_hdr:0000000000007E4A                 db    0
.eh_frame_hdr:0000000000007E4B                 db    0
.eh_frame_hdr:0000000000007E4C                 db  38h ; 8
.eh_frame_hdr:0000000000007E4D                 db 0D7h
.eh_frame_hdr:0000000000007E4E                 db 0FFh
.eh_frame_hdr:0000000000007E4F                 db 0FFh
.eh_frame_hdr:0000000000007E50                 db 0B0h
.eh_frame_hdr:0000000000007E51                 db  0Ch
.eh_frame_hdr:0000000000007E52                 db    0
.eh_frame_hdr:0000000000007E53                 db    0
.eh_frame_hdr:0000000000007E54                 db  58h ; X
.eh_frame_hdr:0000000000007E55                 db 0D7h
.eh_frame_hdr:0000000000007E56                 db 0FFh
.eh_frame_hdr:0000000000007E57                 db 0FFh
.eh_frame_hdr:0000000000007E58                 db 0C4h
.eh_frame_hdr:0000000000007E59                 db  0Ch
.eh_frame_hdr:0000000000007E5A                 db    0
.eh_frame_hdr:0000000000007E5B                 db    0
.eh_frame_hdr:0000000000007E5C                 db  68h ; h
.eh_frame_hdr:0000000000007E5D                 db 0D7h
.eh_frame_hdr:0000000000007E5E                 db 0FFh
.eh_frame_hdr:0000000000007E5F                 db 0FFh
.eh_frame_hdr:0000000000007E60                 db 0D8h
.eh_frame_hdr:0000000000007E61                 db  0Ch
.eh_frame_hdr:0000000000007E62                 db    0
.eh_frame_hdr:0000000000007E63                 db    0
.eh_frame_hdr:0000000000007E64                 db  88h
.eh_frame_hdr:0000000000007E65                 db 0D7h
.eh_frame_hdr:0000000000007E66                 db 0FFh
.eh_frame_hdr:0000000000007E67                 db 0FFh
.eh_frame_hdr:0000000000007E68                 db 0ECh
.eh_frame_hdr:0000000000007E69                 db  0Ch
.eh_frame_hdr:0000000000007E6A                 db    0
.eh_frame_hdr:0000000000007E6B                 db    0
.eh_frame_hdr:0000000000007E6C                 db 0A8h
.eh_frame_hdr:0000000000007E6D                 db 0D7h
.eh_frame_hdr:0000000000007E6E                 db 0FFh
.eh_frame_hdr:0000000000007E6F                 db 0FFh
.eh_frame_hdr:0000000000007E70                 db    0
.eh_frame_hdr:0000000000007E71                 db  0Dh
.eh_frame_hdr:0000000000007E72                 db    0
.eh_frame_hdr:0000000000007E73                 db    0
.eh_frame_hdr:0000000000007E74                 db 0C8h
.eh_frame_hdr:0000000000007E75                 db 0D7h
.eh_frame_hdr:0000000000007E76                 db 0FFh
.eh_frame_hdr:0000000000007E77                 db 0FFh
.eh_frame_hdr:0000000000007E78                 db  18h
.eh_frame_hdr:0000000000007E79                 db  0Dh
.eh_frame_hdr:0000000000007E7A                 db    0
.eh_frame_hdr:0000000000007E7B                 db    0
.eh_frame_hdr:0000000000007E7C                 db 0E8h
.eh_frame_hdr:0000000000007E7D                 db 0DBh
.eh_frame_hdr:0000000000007E7E                 db 0FFh
.eh_frame_hdr:0000000000007E7F                 db 0FFh
.eh_frame_hdr:0000000000007E80                 db  2Ch ; ,
.eh_frame_hdr:0000000000007E81                 db  0Eh
.eh_frame_hdr:0000000000007E82                 db    0
.eh_frame_hdr:0000000000007E83                 db    0
.eh_frame_hdr:0000000000007E84                 db    8
.eh_frame_hdr:0000000000007E85                 db 0DCh
.eh_frame_hdr:0000000000007E86                 db 0FFh
.eh_frame_hdr:0000000000007E87                 db 0FFh
.eh_frame_hdr:0000000000007E88                 db  40h ; @
.eh_frame_hdr:0000000000007E89                 db  0Eh
.eh_frame_hdr:0000000000007E8A                 db    0
.eh_frame_hdr:0000000000007E8B                 db    0
.eh_frame_hdr:0000000000007E8C                 db  88h
.eh_frame_hdr:0000000000007E8D                 db 0DCh
.eh_frame_hdr:0000000000007E8E                 db 0FFh
.eh_frame_hdr:0000000000007E8F                 db 0FFh
.eh_frame_hdr:0000000000007E90                 db  5Ch ; \
.eh_frame_hdr:0000000000007E91                 db  0Eh
.eh_frame_hdr:0000000000007E92                 db    0
.eh_frame_hdr:0000000000007E93                 db    0
.eh_frame_hdr:0000000000007E94                 db  68h ; h
.eh_frame_hdr:0000000000007E95                 db 0DDh
.eh_frame_hdr:0000000000007E96                 db 0FFh
.eh_frame_hdr:0000000000007E97                 db 0FFh
.eh_frame_hdr:0000000000007E98                 db  88h
.eh_frame_hdr:0000000000007E99                 db  0Eh
.eh_frame_hdr:0000000000007E9A                 db    0
.eh_frame_hdr:0000000000007E9B                 db    0
.eh_frame_hdr:0000000000007E9C                 db 0E8h
.eh_frame_hdr:0000000000007E9D                 db 0DDh
.eh_frame_hdr:0000000000007E9E                 db 0FFh
.eh_frame_hdr:0000000000007E9F                 db 0FFh
.eh_frame_hdr:0000000000007EA0                 db 0A8h
.eh_frame_hdr:0000000000007EA1                 db  0Eh
.eh_frame_hdr:0000000000007EA2                 db    0
.eh_frame_hdr:0000000000007EA3                 db    0
.eh_frame_hdr:0000000000007EA4                 db    8
.eh_frame_hdr:0000000000007EA5                 db 0DEh
.eh_frame_hdr:0000000000007EA6                 db 0FFh
.eh_frame_hdr:0000000000007EA7                 db 0FFh
.eh_frame_hdr:0000000000007EA8                 db 0C4h
.eh_frame_hdr:0000000000007EA9                 db  0Eh
.eh_frame_hdr:0000000000007EAA                 db    0
.eh_frame_hdr:0000000000007EAB                 db    0
.eh_frame_hdr:0000000000007EAC                 db  38h ; 8
.eh_frame_hdr:0000000000007EAD                 db 0DEh
.eh_frame_hdr:0000000000007EAE                 db 0FFh
.eh_frame_hdr:0000000000007EAF                 db 0FFh
.eh_frame_hdr:0000000000007EB0                 db 0D8h
.eh_frame_hdr:0000000000007EB1                 db  0Eh
.eh_frame_hdr:0000000000007EB2                 db    0
.eh_frame_hdr:0000000000007EB3                 db    0
.eh_frame_hdr:0000000000007EB4                 db  48h ; H
.eh_frame_hdr:0000000000007EB5                 db 0DEh
.eh_frame_hdr:0000000000007EB6                 db 0FFh
.eh_frame_hdr:0000000000007EB7                 db 0FFh
.eh_frame_hdr:0000000000007EB8                 db 0ECh
.eh_frame_hdr:0000000000007EB9                 db  0Eh
.eh_frame_hdr:0000000000007EBA                 db    0
.eh_frame_hdr:0000000000007EBB                 db    0
.eh_frame_hdr:0000000000007EBC                 db  88h
.eh_frame_hdr:0000000000007EBD                 db 0DEh
.eh_frame_hdr:0000000000007EBE                 db 0FFh
.eh_frame_hdr:0000000000007EBF                 db 0FFh
.eh_frame_hdr:0000000000007EC0                 db  10h
.eh_frame_hdr:0000000000007EC1                 db  0Fh
.eh_frame_hdr:0000000000007EC2                 db    0
.eh_frame_hdr:0000000000007EC3                 db    0
.eh_frame_hdr:0000000000007EC4                 db 0B8h
.eh_frame_hdr:0000000000007EC5                 db 0DEh
.eh_frame_hdr:0000000000007EC6                 db 0FFh
.eh_frame_hdr:0000000000007EC7                 db 0FFh
.eh_frame_hdr:0000000000007EC8                 db  24h ; $
.eh_frame_hdr:0000000000007EC9                 db  0Fh
.eh_frame_hdr:0000000000007ECA                 db    0
.eh_frame_hdr:0000000000007ECB                 db    0
.eh_frame_hdr:0000000000007ECC                 db  48h ; H
.eh_frame_hdr:0000000000007ECD                 db 0DFh
.eh_frame_hdr:0000000000007ECE                 db 0FFh
.eh_frame_hdr:0000000000007ECF                 db 0FFh
.eh_frame_hdr:0000000000007ED0                 db  3Ch ; <
.eh_frame_hdr:0000000000007ED1                 db  0Fh
.eh_frame_hdr:0000000000007ED2                 db    0
.eh_frame_hdr:0000000000007ED3                 db    0
.eh_frame_hdr:0000000000007ED4                 db  98h
.eh_frame_hdr:0000000000007ED5                 db 0DFh
.eh_frame_hdr:0000000000007ED6                 db 0FFh
.eh_frame_hdr:0000000000007ED7                 db 0FFh
.eh_frame_hdr:0000000000007ED8                 db  54h ; T
.eh_frame_hdr:0000000000007ED9                 db  0Fh
.eh_frame_hdr:0000000000007EDA                 db    0
.eh_frame_hdr:0000000000007EDB                 db    0
.eh_frame_hdr:0000000000007EDC                 db 0B8h
.eh_frame_hdr:0000000000007EDD                 db 0DFh
.eh_frame_hdr:0000000000007EDE                 db 0FFh
.eh_frame_hdr:0000000000007EDF                 db 0FFh
.eh_frame_hdr:0000000000007EE0                 db  70h ; p
.eh_frame_hdr:0000000000007EE1                 db  0Fh
.eh_frame_hdr:0000000000007EE2                 db    0
.eh_frame_hdr:0000000000007EE3                 db    0
.eh_frame_hdr:0000000000007EE4                 db 0E8h
.eh_frame_hdr:0000000000007EE5                 db 0DFh
.eh_frame_hdr:0000000000007EE6                 db 0FFh
.eh_frame_hdr:0000000000007EE7                 db 0FFh
.eh_frame_hdr:0000000000007EE8                 db  8Ch
.eh_frame_hdr:0000000000007EE9                 db  0Fh
.eh_frame_hdr:0000000000007EEA                 db    0
.eh_frame_hdr:0000000000007EEB                 db    0
.eh_frame_hdr:0000000000007EEC                 db  18h
.eh_frame_hdr:0000000000007EED                 db 0E0h
.eh_frame_hdr:0000000000007EEE                 db 0FFh
.eh_frame_hdr:0000000000007EEF                 db 0FFh
.eh_frame_hdr:0000000000007EF0                 db 0B4h
.eh_frame_hdr:0000000000007EF1                 db  0Fh
.eh_frame_hdr:0000000000007EF2                 db    0
.eh_frame_hdr:0000000000007EF3                 db    0
.eh_frame_hdr:0000000000007EF4                 db  38h ; 8
.eh_frame_hdr:0000000000007EF5                 db 0E0h
.eh_frame_hdr:0000000000007EF6                 db 0FFh
.eh_frame_hdr:0000000000007EF7                 db 0FFh
.eh_frame_hdr:0000000000007EF8                 db 0D0h
.eh_frame_hdr:0000000000007EF9                 db  0Fh
.eh_frame_hdr:0000000000007EFA                 db    0
.eh_frame_hdr:0000000000007EFB                 db    0
.eh_frame_hdr:0000000000007EFC                 db  78h ; x
.eh_frame_hdr:0000000000007EFD                 db 0E0h
.eh_frame_hdr:0000000000007EFE                 db 0FFh
.eh_frame_hdr:0000000000007EFF                 db 0FFh
.eh_frame_hdr:0000000000007F00                 db 0E8h
.eh_frame_hdr:0000000000007F01                 db  0Fh
.eh_frame_hdr:0000000000007F02                 db    0
.eh_frame_hdr:0000000000007F03                 db    0
.eh_frame_hdr:0000000000007F04                 db  38h ; 8
.eh_frame_hdr:0000000000007F05                 db 0E1h
.eh_frame_hdr:0000000000007F06                 db 0FFh
.eh_frame_hdr:0000000000007F07                 db 0FFh
.eh_frame_hdr:0000000000007F08                 db  24h ; $
.eh_frame_hdr:0000000000007F09                 db  10h
.eh_frame_hdr:0000000000007F0A                 db    0
.eh_frame_hdr:0000000000007F0B                 db    0
.eh_frame_hdr:0000000000007F0C                 db  88h
.eh_frame_hdr:0000000000007F0D                 db 0E1h
.eh_frame_hdr:0000000000007F0E                 db 0FFh
.eh_frame_hdr:0000000000007F0F                 db 0FFh
.eh_frame_hdr:0000000000007F10                 db  60h ; `
.eh_frame_hdr:0000000000007F11                 db  10h
.eh_frame_hdr:0000000000007F12                 db    0
.eh_frame_hdr:0000000000007F13                 db    0
.eh_frame_hdr:0000000000007F14                 db 0D8h
.eh_frame_hdr:0000000000007F15                 db 0E1h
.eh_frame_hdr:0000000000007F16                 db 0FFh
.eh_frame_hdr:0000000000007F17                 db 0FFh
.eh_frame_hdr:0000000000007F18                 db 0A0h
.eh_frame_hdr:0000000000007F19                 db  10h
.eh_frame_hdr:0000000000007F1A                 db    0
.eh_frame_hdr:0000000000007F1B                 db    0
.eh_frame_hdr:0000000000007F1C                 db 0F8h
.eh_frame_hdr:0000000000007F1D                 db 0E5h
.eh_frame_hdr:0000000000007F1E                 db 0FFh
.eh_frame_hdr:0000000000007F1F                 db 0FFh
.eh_frame_hdr:0000000000007F20                 db 0F0h
.eh_frame_hdr:0000000000007F21                 db  10h
.eh_frame_hdr:0000000000007F22                 db    0
.eh_frame_hdr:0000000000007F23                 db    0
.eh_frame_hdr:0000000000007F24                 db  78h ; x
.eh_frame_hdr:0000000000007F25                 db 0E6h
.eh_frame_hdr:0000000000007F26                 db 0FFh
.eh_frame_hdr:0000000000007F27                 db 0FFh
.eh_frame_hdr:0000000000007F28                 db  28h ; (
.eh_frame_hdr:0000000000007F29                 db  11h
.eh_frame_hdr:0000000000007F2A                 db    0
.eh_frame_hdr:0000000000007F2B                 db    0
.eh_frame_hdr:0000000000007F2C                 db 0B8h
.eh_frame_hdr:0000000000007F2D                 db 0E6h
.eh_frame_hdr:0000000000007F2E                 db 0FFh
.eh_frame_hdr:0000000000007F2F                 db 0FFh
.eh_frame_hdr:0000000000007F30                 db  48h ; H
.eh_frame_hdr:0000000000007F31                 db  11h
.eh_frame_hdr:0000000000007F32                 db    0
.eh_frame_hdr:0000000000007F33                 db    0
.eh_frame_hdr:0000000000007F34                 db  18h
.eh_frame_hdr:0000000000007F35                 db 0E7h
.eh_frame_hdr:0000000000007F36                 db 0FFh
.eh_frame_hdr:0000000000007F37                 db 0FFh
.eh_frame_hdr:0000000000007F38                 db  78h ; x
.eh_frame_hdr:0000000000007F39                 db  11h
.eh_frame_hdr:0000000000007F3A                 db    0
.eh_frame_hdr:0000000000007F3B                 db    0
.eh_frame_hdr:0000000000007F3C                 db 0A8h
.eh_frame_hdr:0000000000007F3D                 db 0E7h
.eh_frame_hdr:0000000000007F3E                 db 0FFh
.eh_frame_hdr:0000000000007F3F                 db 0FFh
.eh_frame_hdr:0000000000007F40                 db 0B8h
.eh_frame_hdr:0000000000007F41                 db  11h
.eh_frame_hdr:0000000000007F42                 db    0
.eh_frame_hdr:0000000000007F43                 db    0
.eh_frame_hdr:0000000000007F44                 db  28h ; (
.eh_frame_hdr:0000000000007F45                 db 0E8h
.eh_frame_hdr:0000000000007F46                 db 0FFh
.eh_frame_hdr:0000000000007F47                 db 0FFh
.eh_frame_hdr:0000000000007F48                 db    8
.eh_frame_hdr:0000000000007F49                 db  12h
.eh_frame_hdr:0000000000007F4A                 db    0
.eh_frame_hdr:0000000000007F4B                 db    0
.eh_frame_hdr:0000000000007F4C                 db  68h ; h
.eh_frame_hdr:0000000000007F4D                 db 0E8h
.eh_frame_hdr:0000000000007F4E                 db 0FFh
.eh_frame_hdr:0000000000007F4F                 db 0FFh
.eh_frame_hdr:0000000000007F50                 db  28h ; (
.eh_frame_hdr:0000000000007F51                 db  12h
.eh_frame_hdr:0000000000007F52                 db    0
.eh_frame_hdr:0000000000007F53                 db    0
.eh_frame_hdr:0000000000007F54                 db  28h ; (
.eh_frame_hdr:0000000000007F55                 db 0E9h
.eh_frame_hdr:0000000000007F56                 db 0FFh
.eh_frame_hdr:0000000000007F57                 db 0FFh
.eh_frame_hdr:0000000000007F58                 db 0A0h
.eh_frame_hdr:0000000000007F59                 db  12h
.eh_frame_hdr:0000000000007F5A                 db    0
.eh_frame_hdr:0000000000007F5B                 db    0
.eh_frame_hdr:0000000000007F5C                 db 0D8h
.eh_frame_hdr:0000000000007F5D                 db 0E9h
.eh_frame_hdr:0000000000007F5E                 db 0FFh
.eh_frame_hdr:0000000000007F5F                 db 0FFh
.eh_frame_hdr:0000000000007F60                 db 0ECh
.eh_frame_hdr:0000000000007F61                 db  12h
.eh_frame_hdr:0000000000007F62                 db    0
.eh_frame_hdr:0000000000007F63                 db    0
.eh_frame_hdr:0000000000007F64                 db  38h ; 8
.eh_frame_hdr:0000000000007F65                 db 0EAh
.eh_frame_hdr:0000000000007F66                 db 0FFh
.eh_frame_hdr:0000000000007F67                 db 0FFh
.eh_frame_hdr:0000000000007F68                 db  30h ; 0
.eh_frame_hdr:0000000000007F69                 db  13h
.eh_frame_hdr:0000000000007F6A                 db    0
.eh_frame_hdr:0000000000007F6B                 db    0
.eh_frame_hdr:0000000000007F6C                 db 0A8h
.eh_frame_hdr:0000000000007F6D                 db 0EAh
.eh_frame_hdr:0000000000007F6E                 db 0FFh
.eh_frame_hdr:0000000000007F6F                 db 0FFh
.eh_frame_hdr:0000000000007F70                 db  78h ; x
.eh_frame_hdr:0000000000007F71                 db  13h
.eh_frame_hdr:0000000000007F72                 db    0
.eh_frame_hdr:0000000000007F73                 db    0
.eh_frame_hdr:0000000000007F74                 db 0B8h
.eh_frame_hdr:0000000000007F75                 db 0EAh
.eh_frame_hdr:0000000000007F76                 db 0FFh
.eh_frame_hdr:0000000000007F77                 db 0FFh
.eh_frame_hdr:0000000000007F78                 db  90h
.eh_frame_hdr:0000000000007F79                 db  13h
.eh_frame_hdr:0000000000007F7A                 db    0
.eh_frame_hdr:0000000000007F7B                 db    0
.eh_frame_hdr:0000000000007F7B _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007F7B
LOAD:0000000000007F7C ; ===========================================================================
LOAD:0000000000007F7C
LOAD:0000000000007F7C ; Segment type: Pure code
LOAD:0000000000007F7C ; Segment permissions: Read/Execute
LOAD:0000000000007F7C LOAD            segment byte public 'CODE' use64
LOAD:0000000000007F7C                 assume cs:LOAD
LOAD:0000000000007F7C                 ;org 7F7Ch
LOAD:0000000000007F7C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007F7C                 align 20h
LOAD:0000000000007F7C LOAD            ends
LOAD:0000000000007F7C
.eh_frame:0000000000007F80 ; ===========================================================================
.eh_frame:0000000000007F80
.eh_frame:0000000000007F80 ; Segment type: Pure data
.eh_frame:0000000000007F80 ; Segment permissions: Read
.eh_frame:0000000000007F80 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007F80                 assume cs:_eh_frame
.eh_frame:0000000000007F80                 ;org 7F80h
.eh_frame:0000000000007F80                 db  14h
.eh_frame:0000000000007F81                 db    0
.eh_frame:0000000000007F82                 db    0
.eh_frame:0000000000007F83                 db    0
.eh_frame:0000000000007F84                 db    0
.eh_frame:0000000000007F85                 db    0
.eh_frame:0000000000007F86                 db    0
.eh_frame:0000000000007F87                 db    0
.eh_frame:0000000000007F88                 db    1
.eh_frame:0000000000007F89                 db  7Ah ; z
.eh_frame:0000000000007F8A                 db  52h ; R
.eh_frame:0000000000007F8B                 db    0
.eh_frame:0000000000007F8C                 db    1
.eh_frame:0000000000007F8D                 db  78h ; x
.eh_frame:0000000000007F8E                 db  10h
.eh_frame:0000000000007F8F                 db    1
.eh_frame:0000000000007F90                 db  1Bh
.eh_frame:0000000000007F91                 db  0Ch
.eh_frame:0000000000007F92                 db    7
.eh_frame:0000000000007F93                 db    8
.eh_frame:0000000000007F94                 db  90h
.eh_frame:0000000000007F95                 db    1
.eh_frame:0000000000007F96                 db    7
.eh_frame:0000000000007F97                 db  10h
.eh_frame:0000000000007F98                 db  14h
.eh_frame:0000000000007F99                 db    0
.eh_frame:0000000000007F9A                 db    0
.eh_frame:0000000000007F9B                 db    0
.eh_frame:0000000000007F9C                 db  1Ch
.eh_frame:0000000000007F9D                 db    0
.eh_frame:0000000000007F9E                 db    0
.eh_frame:0000000000007F9F                 db    0
.eh_frame:0000000000007FA0                 db 0F0h
.eh_frame:0000000000007FA1                 db 0A5h
.eh_frame:0000000000007FA2                 db 0FFh
.eh_frame:0000000000007FA3                 db 0FFh
.eh_frame:0000000000007FA4                 db  2Bh ; +
.eh_frame:0000000000007FA5                 db    0
.eh_frame:0000000000007FA6                 db    0
.eh_frame:0000000000007FA7                 db    0
.eh_frame:0000000000007FA8                 db    0
.eh_frame:0000000000007FA9                 db    0
.eh_frame:0000000000007FAA                 db    0
.eh_frame:0000000000007FAB                 db    0
.eh_frame:0000000000007FAC                 db    0
.eh_frame:0000000000007FAD                 db    0
.eh_frame:0000000000007FAE                 db    0
.eh_frame:0000000000007FAF                 db    0
.eh_frame:0000000000007FB0                 db  14h
.eh_frame:0000000000007FB1                 db    0
.eh_frame:0000000000007FB2                 db    0
.eh_frame:0000000000007FB3                 db    0
.eh_frame:0000000000007FB4                 db    0
.eh_frame:0000000000007FB5                 db    0
.eh_frame:0000000000007FB6                 db    0
.eh_frame:0000000000007FB7                 db    0
.eh_frame:0000000000007FB8                 db    1
.eh_frame:0000000000007FB9                 db  7Ah ; z
.eh_frame:0000000000007FBA                 db  52h ; R
.eh_frame:0000000000007FBB                 db    0
.eh_frame:0000000000007FBC                 db    1
.eh_frame:0000000000007FBD                 db  78h ; x
.eh_frame:0000000000007FBE                 db  10h
.eh_frame:0000000000007FBF                 db    1
.eh_frame:0000000000007FC0                 db  1Bh
.eh_frame:0000000000007FC1                 db  0Ch
.eh_frame:0000000000007FC2                 db    7
.eh_frame:0000000000007FC3                 db    8
.eh_frame:0000000000007FC4                 db  90h
.eh_frame:0000000000007FC5                 db    1
.eh_frame:0000000000007FC6                 db    0
.eh_frame:0000000000007FC7                 db    0
.eh_frame:0000000000007FC8                 db  24h ; $
.eh_frame:0000000000007FC9                 db    0
.eh_frame:0000000000007FCA                 db    0
.eh_frame:0000000000007FCB                 db    0
.eh_frame:0000000000007FCC                 db  1Ch
.eh_frame:0000000000007FCD                 db    0
.eh_frame:0000000000007FCE                 db    0
.eh_frame:0000000000007FCF                 db    0
.eh_frame:0000000000007FD0                 db  60h ; `
.eh_frame:0000000000007FD1                 db  97h
.eh_frame:0000000000007FD2                 db 0FFh
.eh_frame:0000000000007FD3                 db 0FFh
.eh_frame:0000000000007FD4                 db  80h
.eh_frame:0000000000007FD5                 db    3
.eh_frame:0000000000007FD6                 db    0
.eh_frame:0000000000007FD7                 db    0
.eh_frame:0000000000007FD8                 db    0
.eh_frame:0000000000007FD9                 db  0Eh
.eh_frame:0000000000007FDA                 db  10h
.eh_frame:0000000000007FDB                 db  46h ; F
.eh_frame:0000000000007FDC                 db  0Eh
.eh_frame:0000000000007FDD                 db  18h
.eh_frame:0000000000007FDE                 db  4Ah ; J
.eh_frame:0000000000007FDF                 db  0Fh
.eh_frame:0000000000007FE0                 db  0Bh
.eh_frame:0000000000007FE1                 db  77h ; w
.eh_frame:0000000000007FE2                 db    8
.eh_frame:0000000000007FE3                 db  80h
.eh_frame:0000000000007FE4                 db    0
.eh_frame:0000000000007FE5                 db  3Fh ; ?
.eh_frame:0000000000007FE6                 db  1Ah
.eh_frame:0000000000007FE7                 db  3Bh ; ;
.eh_frame:0000000000007FE8                 db  2Ah ; *
.eh_frame:0000000000007FE9                 db  33h ; 3
.eh_frame:0000000000007FEA                 db  24h ; $
.eh_frame:0000000000007FEB                 db  22h ; "
.eh_frame:0000000000007FEC                 db    0
.eh_frame:0000000000007FED                 db    0
.eh_frame:0000000000007FEE                 db    0
.eh_frame:0000000000007FEF                 db    0
.eh_frame:0000000000007FF0                 db  14h
.eh_frame:0000000000007FF1                 db    0
.eh_frame:0000000000007FF2                 db    0
.eh_frame:0000000000007FF3                 db    0
.eh_frame:0000000000007FF4                 db  44h ; D
.eh_frame:0000000000007FF5                 db    0
.eh_frame:0000000000007FF6                 db    0
.eh_frame:0000000000007FF7                 db    0
.eh_frame:0000000000007FF8                 db 0B8h
.eh_frame:0000000000007FF9                 db  9Ah
.eh_frame:0000000000007FFA                 db 0FFh
.eh_frame:0000000000007FFB                 db 0FFh
.eh_frame:0000000000007FFC                 db    8
.eh_frame:0000000000007FFD                 db    0
.eh_frame:0000000000007FFE                 db    0
.eh_frame:0000000000007FFF                 db    0
.eh_frame:0000000000008000                 db    0
.eh_frame:0000000000008001                 db    0
.eh_frame:0000000000008002                 db    0
.eh_frame:0000000000008003                 db    0
.eh_frame:0000000000008004                 db    0
.eh_frame:0000000000008005                 db    0
.eh_frame:0000000000008006                 db    0
.eh_frame:0000000000008007                 db    0
.eh_frame:0000000000008008                 db  28h ; (
.eh_frame:0000000000008009                 db    0
.eh_frame:000000000000800A                 db    0
.eh_frame:000000000000800B                 db    0
.eh_frame:000000000000800C                 db  5Ch ; \
.eh_frame:000000000000800D                 db    0
.eh_frame:000000000000800E                 db    0
.eh_frame:000000000000800F                 db    0
.eh_frame:0000000000008010                 db  90h
.eh_frame:0000000000008011                 db 0A6h
.eh_frame:0000000000008012                 db 0FFh
.eh_frame:0000000000008013                 db 0FFh
.eh_frame:0000000000008014                 db  85h
.eh_frame:0000000000008015                 db    0
.eh_frame:0000000000008016                 db    0
.eh_frame:0000000000008017                 db    0
.eh_frame:0000000000008018                 db    0
.eh_frame:0000000000008019                 db  44h ; D
.eh_frame:000000000000801A                 db  0Eh
.eh_frame:000000000000801B                 db  10h
.eh_frame:000000000000801C                 db  6Ch ; l
.eh_frame:000000000000801D                 db  0Ah
.eh_frame:000000000000801E                 db  0Eh
.eh_frame:000000000000801F                 db    8
.eh_frame:0000000000008020                 db  48h ; H
.eh_frame:0000000000008021                 db  0Bh
.eh_frame:0000000000008022                 db  61h ; a
.eh_frame:0000000000008023                 db  0Ah
.eh_frame:0000000000008024                 db  0Eh
.eh_frame:0000000000008025                 db    8
.eh_frame:0000000000008026                 db  47h ; G
.eh_frame:0000000000008027                 db  0Bh
.eh_frame:0000000000008028                 db  4Eh ; N
.eh_frame:0000000000008029                 db  0Ah
.eh_frame:000000000000802A                 db  0Eh
.eh_frame:000000000000802B                 db    8
.eh_frame:000000000000802C                 db  42h ; B
.eh_frame:000000000000802D                 db  0Bh
.eh_frame:000000000000802E                 db  54h ; T
.eh_frame:000000000000802F                 db  0Eh
.eh_frame:0000000000008030                 db    8
.eh_frame:0000000000008031                 db    0
.eh_frame:0000000000008032                 db    0
.eh_frame:0000000000008033                 db    0
.eh_frame:0000000000008034                 db  28h ; (
.eh_frame:0000000000008035                 db    0
.eh_frame:0000000000008036                 db    0
.eh_frame:0000000000008037                 db    0
.eh_frame:0000000000008038                 db  88h
.eh_frame:0000000000008039                 db    0
.eh_frame:000000000000803A                 db    0
.eh_frame:000000000000803B                 db    0
.eh_frame:000000000000803C                 db 0F4h
.eh_frame:000000000000803D                 db 0A6h
.eh_frame:000000000000803E                 db 0FFh
.eh_frame:000000000000803F                 db 0FFh
.eh_frame:0000000000008040                 db  81h
.eh_frame:0000000000008041                 db    0
.eh_frame:0000000000008042                 db    0
.eh_frame:0000000000008043                 db    0
.eh_frame:0000000000008044                 db    0
.eh_frame:0000000000008045                 db  41h ; A
.eh_frame:0000000000008046                 db  0Eh
.eh_frame:0000000000008047                 db  10h
.eh_frame:0000000000008048                 db  86h
.eh_frame:0000000000008049                 db    2
.eh_frame:000000000000804A                 db  41h ; A
.eh_frame:000000000000804B                 db  0Eh
.eh_frame:000000000000804C                 db  18h
.eh_frame:000000000000804D                 db  83h
.eh_frame:000000000000804E                 db    3
.eh_frame:000000000000804F                 db  55h ; U
.eh_frame:0000000000008050                 db  0Eh
.eh_frame:0000000000008051                 db  30h ; 0
.eh_frame:0000000000008052                 db  78h ; x
.eh_frame:0000000000008053                 db  0Ah
.eh_frame:0000000000008054                 db  0Eh
.eh_frame:0000000000008055                 db  18h
.eh_frame:0000000000008056                 db  41h ; A
.eh_frame:0000000000008057                 db  0Eh
.eh_frame:0000000000008058                 db  10h
.eh_frame:0000000000008059                 db  41h ; A
.eh_frame:000000000000805A                 db  0Eh
.eh_frame:000000000000805B                 db    8
.eh_frame:000000000000805C                 db  41h ; A
.eh_frame:000000000000805D                 db  0Bh
.eh_frame:000000000000805E                 db    0
.eh_frame:000000000000805F                 db    0
.eh_frame:0000000000008060                 db  1Ch
.eh_frame:0000000000008061                 db    0
.eh_frame:0000000000008062                 db    0
.eh_frame:0000000000008063                 db    0
.eh_frame:0000000000008064                 db 0B4h
.eh_frame:0000000000008065                 db    0
.eh_frame:0000000000008066                 db    0
.eh_frame:0000000000008067                 db    0
.eh_frame:0000000000008068                 db  58h ; X
.eh_frame:0000000000008069                 db 0A7h
.eh_frame:000000000000806A                 db 0FFh
.eh_frame:000000000000806B                 db 0FFh
.eh_frame:000000000000806C                 db  7Fh ; 
.eh_frame:000000000000806D                 db    0
.eh_frame:000000000000806E                 db    0
.eh_frame:000000000000806F                 db    0
.eh_frame:0000000000008070                 db    0
.eh_frame:0000000000008071                 db  5Ah ; Z
.eh_frame:0000000000008072                 db  0Eh
.eh_frame:0000000000008073                 db  10h
.eh_frame:0000000000008074                 db  83h
.eh_frame:0000000000008075                 db    2
.eh_frame:0000000000008076                 db  55h ; U
.eh_frame:0000000000008077                 db 0C3h
.eh_frame:0000000000008078                 db  0Eh
.eh_frame:0000000000008079                 db    8
.eh_frame:000000000000807A                 db  79h ; y
.eh_frame:000000000000807B                 db  0Eh
.eh_frame:000000000000807C                 db  10h
.eh_frame:000000000000807D                 db  83h
.eh_frame:000000000000807E                 db    2
.eh_frame:000000000000807F                 db    0
.eh_frame:0000000000008080                 db  3Ch ; <
.eh_frame:0000000000008081                 db    0
.eh_frame:0000000000008082                 db    0
.eh_frame:0000000000008083                 db    0
.eh_frame:0000000000008084                 db 0D4h
.eh_frame:0000000000008085                 db    0
.eh_frame:0000000000008086                 db    0
.eh_frame:0000000000008087                 db    0
.eh_frame:0000000000008088                 db 0B8h
.eh_frame:0000000000008089                 db 0A7h
.eh_frame:000000000000808A                 db 0FFh
.eh_frame:000000000000808B                 db 0FFh
.eh_frame:000000000000808C                 db 0D3h
.eh_frame:000000000000808D                 db    0
.eh_frame:000000000000808E                 db    0
.eh_frame:000000000000808F                 db    0
.eh_frame:0000000000008090                 db    0
.eh_frame:0000000000008091                 db  42h ; B
.eh_frame:0000000000008092                 db  0Eh
.eh_frame:0000000000008093                 db  10h
.eh_frame:0000000000008094                 db  8Eh
.eh_frame:0000000000008095                 db    2
.eh_frame:0000000000008096                 db  42h ; B
.eh_frame:0000000000008097                 db  0Eh
.eh_frame:0000000000008098                 db  18h
.eh_frame:0000000000008099                 db  8Dh
.eh_frame:000000000000809A                 db    3
.eh_frame:000000000000809B                 db  4Ch ; L
.eh_frame:000000000000809C                 db  0Eh
.eh_frame:000000000000809D                 db  20h
.eh_frame:000000000000809E                 db  8Ch
.eh_frame:000000000000809F                 db    4
.eh_frame:00000000000080A0                 db  41h ; A
.eh_frame:00000000000080A1                 db  0Eh
.eh_frame:00000000000080A2                 db  28h ; (
.eh_frame:00000000000080A3                 db  86h
.eh_frame:00000000000080A4                 db    5
.eh_frame:00000000000080A5                 db  45h ; E
.eh_frame:00000000000080A6                 db  0Eh
.eh_frame:00000000000080A7                 db  30h ; 0
.eh_frame:00000000000080A8                 db  83h
.eh_frame:00000000000080A9                 db    6
.eh_frame:00000000000080AA                 db    2
.eh_frame:00000000000080AB                 db  9Ch
.eh_frame:00000000000080AC                 db  0Ah
.eh_frame:00000000000080AD                 db  0Eh
.eh_frame:00000000000080AE                 db  28h ; (
.eh_frame:00000000000080AF                 db  41h ; A
.eh_frame:00000000000080B0                 db  0Eh
.eh_frame:00000000000080B1                 db  20h
.eh_frame:00000000000080B2                 db  42h ; B
.eh_frame:00000000000080B3                 db  0Eh
.eh_frame:00000000000080B4                 db  18h
.eh_frame:00000000000080B5                 db  42h ; B
.eh_frame:00000000000080B6                 db  0Eh
.eh_frame:00000000000080B7                 db  10h
.eh_frame:00000000000080B8                 db  42h ; B
.eh_frame:00000000000080B9                 db  0Eh
.eh_frame:00000000000080BA                 db    8
.eh_frame:00000000000080BB                 db  47h ; G
.eh_frame:00000000000080BC                 db  0Bh
.eh_frame:00000000000080BD                 db    0
.eh_frame:00000000000080BE                 db    0
.eh_frame:00000000000080BF                 db    0
.eh_frame:00000000000080C0                 db  28h ; (
.eh_frame:00000000000080C1                 db    0
.eh_frame:00000000000080C2                 db    0
.eh_frame:00000000000080C3                 db    0
.eh_frame:00000000000080C4                 db  14h
.eh_frame:00000000000080C5                 db    1
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db  58h ; X
.eh_frame:00000000000080C9                 db 0A8h
.eh_frame:00000000000080CA                 db 0FFh
.eh_frame:00000000000080CB                 db 0FFh
.eh_frame:00000000000080CC                 db 0B2h
.eh_frame:00000000000080CD                 db    4
.eh_frame:00000000000080CE                 db    0
.eh_frame:00000000000080CF                 db    0
.eh_frame:00000000000080D0                 db    0
.eh_frame:00000000000080D1                 db  42h ; B
.eh_frame:00000000000080D2                 db  0Eh
.eh_frame:00000000000080D3                 db  10h
.eh_frame:00000000000080D4                 db  8Dh
.eh_frame:00000000000080D5                 db    2
.eh_frame:00000000000080D6                 db  42h ; B
.eh_frame:00000000000080D7                 db  0Eh
.eh_frame:00000000000080D8                 db  18h
.eh_frame:00000000000080D9                 db  8Ch
.eh_frame:00000000000080DA                 db    3
.eh_frame:00000000000080DB                 db  46h ; F
.eh_frame:00000000000080DC                 db  0Eh
.eh_frame:00000000000080DD                 db  20h
.eh_frame:00000000000080DE                 db  86h
.eh_frame:00000000000080DF                 db    4
.eh_frame:00000000000080E0                 db  41h ; A
.eh_frame:00000000000080E1                 db  0Eh
.eh_frame:00000000000080E2                 db  28h ; (
.eh_frame:00000000000080E3                 db  83h
.eh_frame:00000000000080E4                 db    5
.eh_frame:00000000000080E5                 db  49h ; I
.eh_frame:00000000000080E6                 db  0Eh
.eh_frame:00000000000080E7                 db 0B0h
.eh_frame:00000000000080E8                 db    1
.eh_frame:00000000000080E9                 db    0
.eh_frame:00000000000080EA                 db    0
.eh_frame:00000000000080EB                 db    0
.eh_frame:00000000000080EC                 db  58h ; X
.eh_frame:00000000000080ED                 db    0
.eh_frame:00000000000080EE                 db    0
.eh_frame:00000000000080EF                 db    0
.eh_frame:00000000000080F0                 db  40h ; @
.eh_frame:00000000000080F1                 db    1
.eh_frame:00000000000080F2                 db    0
.eh_frame:00000000000080F3                 db    0
.eh_frame:00000000000080F4                 db 0CCh
.eh_frame:00000000000080F5                 db  99h
.eh_frame:00000000000080F6                 db 0FFh
.eh_frame:00000000000080F7                 db 0FFh
.eh_frame:00000000000080F8                 db 0CFh
.eh_frame:00000000000080F9                 db  0Ah
.eh_frame:00000000000080FA                 db    0
.eh_frame:00000000000080FB                 db    0
.eh_frame:00000000000080FC                 db    0
.eh_frame:00000000000080FD                 db  42h ; B
.eh_frame:00000000000080FE                 db  0Eh
.eh_frame:00000000000080FF                 db  10h
.eh_frame:0000000000008100                 db  8Fh
.eh_frame:0000000000008101                 db    2
.eh_frame:0000000000008102                 db  42h ; B
.eh_frame:0000000000008103                 db  0Eh
.eh_frame:0000000000008104                 db  18h
.eh_frame:0000000000008105                 db  8Eh
.eh_frame:0000000000008106                 db    3
.eh_frame:0000000000008107                 db  45h ; E
.eh_frame:0000000000008108                 db  0Eh
.eh_frame:0000000000008109                 db  20h
.eh_frame:000000000000810A                 db  8Dh
.eh_frame:000000000000810B                 db    4
.eh_frame:000000000000810C                 db  42h ; B
.eh_frame:000000000000810D                 db  0Eh
.eh_frame:000000000000810E                 db  28h ; (
.eh_frame:000000000000810F                 db  8Ch
.eh_frame:0000000000008110                 db    5
.eh_frame:0000000000008111                 db  48h ; H
.eh_frame:0000000000008112                 db  0Eh
.eh_frame:0000000000008113                 db  30h ; 0
.eh_frame:0000000000008114                 db  86h
.eh_frame:0000000000008115                 db    6
.eh_frame:0000000000008116                 db  41h ; A
.eh_frame:0000000000008117                 db  0Eh
.eh_frame:0000000000008118                 db  38h ; 8
.eh_frame:0000000000008119                 db  83h
.eh_frame:000000000000811A                 db    7
.eh_frame:000000000000811B                 db  4Ah ; J
.eh_frame:000000000000811C                 db  0Eh
.eh_frame:000000000000811D                 db 0E0h
.eh_frame:000000000000811E                 db    1
.eh_frame:000000000000811F                 db    3
.eh_frame:0000000000008120                 db 0C1h
.eh_frame:0000000000008121                 db    4
.eh_frame:0000000000008122                 db  0Ah
.eh_frame:0000000000008123                 db  0Eh
.eh_frame:0000000000008124                 db  38h ; 8
.eh_frame:0000000000008125                 db  41h ; A
.eh_frame:0000000000008126                 db  0Eh
.eh_frame:0000000000008127                 db  30h ; 0
.eh_frame:0000000000008128                 db  41h ; A
.eh_frame:0000000000008129                 db  0Eh
.eh_frame:000000000000812A                 db  28h ; (
.eh_frame:000000000000812B                 db  42h ; B
.eh_frame:000000000000812C                 db  0Eh
.eh_frame:000000000000812D                 db  20h
.eh_frame:000000000000812E                 db  42h ; B
.eh_frame:000000000000812F                 db  0Eh
.eh_frame:0000000000008130                 db  18h
.eh_frame:0000000000008131                 db  42h ; B
.eh_frame:0000000000008132                 db  0Eh
.eh_frame:0000000000008133                 db  10h
.eh_frame:0000000000008134                 db  42h ; B
.eh_frame:0000000000008135                 db  0Eh
.eh_frame:0000000000008136                 db    8
.eh_frame:0000000000008137                 db  41h ; A
.eh_frame:0000000000008138                 db  0Bh
.eh_frame:0000000000008139                 db    3
.eh_frame:000000000000813A                 db  3Fh ; ?
.eh_frame:000000000000813B                 db    2
.eh_frame:000000000000813C                 db  0Ah
.eh_frame:000000000000813D                 db  0Eh
.eh_frame:000000000000813E                 db 0E8h
.eh_frame:000000000000813F                 db    1
.eh_frame:0000000000008140                 db  50h ; P
.eh_frame:0000000000008141                 db  0Eh
.eh_frame:0000000000008142                 db 0F0h
.eh_frame:0000000000008143                 db    1
.eh_frame:0000000000008144                 db  6Ah ; j
.eh_frame:0000000000008145                 db  0Bh
.eh_frame:0000000000008146                 db    0
.eh_frame:0000000000008147                 db    0
.eh_frame:0000000000008148                 db  10h
.eh_frame:0000000000008149                 db    0
.eh_frame:000000000000814A                 db    0
.eh_frame:000000000000814B                 db    0
.eh_frame:000000000000814C                 db  9Ch
.eh_frame:000000000000814D                 db    1
.eh_frame:000000000000814E                 db    0
.eh_frame:000000000000814F                 db    0
.eh_frame:0000000000008150                 db  90h
.eh_frame:0000000000008151                 db 0ACh
.eh_frame:0000000000008152                 db 0FFh
.eh_frame:0000000000008153                 db 0FFh
.eh_frame:0000000000008154                 db  0Ah
.eh_frame:0000000000008155                 db    0
.eh_frame:0000000000008156                 db    0
.eh_frame:0000000000008157                 db    0
.eh_frame:0000000000008158                 db    0
.eh_frame:0000000000008159                 db    0
.eh_frame:000000000000815A                 db    0
.eh_frame:000000000000815B                 db    0
.eh_frame:000000000000815C                 db  48h ; H
.eh_frame:000000000000815D                 db    0
.eh_frame:000000000000815E                 db    0
.eh_frame:000000000000815F                 db    0
.eh_frame:0000000000008160                 db 0B0h
.eh_frame:0000000000008161                 db    1
.eh_frame:0000000000008162                 db    0
.eh_frame:0000000000008163                 db    0
.eh_frame:0000000000008164                 db  8Ch
.eh_frame:0000000000008165                 db 0ACh
.eh_frame:0000000000008166                 db 0FFh
.eh_frame:0000000000008167                 db 0FFh
.eh_frame:0000000000008168                 db  16h
.eh_frame:0000000000008169                 db    1
.eh_frame:000000000000816A                 db    0
.eh_frame:000000000000816B                 db    0
.eh_frame:000000000000816C                 db    0
.eh_frame:000000000000816D                 db  42h ; B
.eh_frame:000000000000816E                 db  0Eh
.eh_frame:000000000000816F                 db  10h
.eh_frame:0000000000008170                 db  8Fh
.eh_frame:0000000000008171                 db    2
.eh_frame:0000000000008172                 db  42h ; B
.eh_frame:0000000000008173                 db  0Eh
.eh_frame:0000000000008174                 db  18h
.eh_frame:0000000000008175                 db  8Eh
.eh_frame:0000000000008176                 db    3
.eh_frame:0000000000008177                 db  45h ; E
.eh_frame:0000000000008178                 db  0Eh
.eh_frame:0000000000008179                 db  20h
.eh_frame:000000000000817A                 db  8Dh
.eh_frame:000000000000817B                 db    4
.eh_frame:000000000000817C                 db  42h ; B
.eh_frame:000000000000817D                 db  0Eh
.eh_frame:000000000000817E                 db  28h ; (
.eh_frame:000000000000817F                 db  8Ch
.eh_frame:0000000000008180                 db    5
.eh_frame:0000000000008181                 db  44h ; D
.eh_frame:0000000000008182                 db  0Eh
.eh_frame:0000000000008183                 db  30h ; 0
.eh_frame:0000000000008184                 db  86h
.eh_frame:0000000000008185                 db    6
.eh_frame:0000000000008186                 db  41h ; A
.eh_frame:0000000000008187                 db  0Eh
.eh_frame:0000000000008188                 db  38h ; 8
.eh_frame:0000000000008189                 db  83h
.eh_frame:000000000000818A                 db    7
.eh_frame:000000000000818B                 db  47h ; G
.eh_frame:000000000000818C                 db  0Eh
.eh_frame:000000000000818D                 db  60h ; `
.eh_frame:000000000000818E                 db    2
.eh_frame:000000000000818F                 db 0DEh
.eh_frame:0000000000008190                 db  0Ah
.eh_frame:0000000000008191                 db  0Eh
.eh_frame:0000000000008192                 db  38h ; 8
.eh_frame:0000000000008193                 db  41h ; A
.eh_frame:0000000000008194                 db  0Eh
.eh_frame:0000000000008195                 db  30h ; 0
.eh_frame:0000000000008196                 db  41h ; A
.eh_frame:0000000000008197                 db  0Eh
.eh_frame:0000000000008198                 db  28h ; (
.eh_frame:0000000000008199                 db  42h ; B
.eh_frame:000000000000819A                 db  0Eh
.eh_frame:000000000000819B                 db  20h
.eh_frame:000000000000819C                 db  42h ; B
.eh_frame:000000000000819D                 db  0Eh
.eh_frame:000000000000819E                 db  18h
.eh_frame:000000000000819F                 db  42h ; B
.eh_frame:00000000000081A0                 db  0Eh
.eh_frame:00000000000081A1                 db  10h
.eh_frame:00000000000081A2                 db  42h ; B
.eh_frame:00000000000081A3                 db  0Eh
.eh_frame:00000000000081A4                 db    8
.eh_frame:00000000000081A5                 db  41h ; A
.eh_frame:00000000000081A6                 db  0Bh
.eh_frame:00000000000081A7                 db    0
.eh_frame:00000000000081A8                 db  28h ; (
.eh_frame:00000000000081A9                 db    0
.eh_frame:00000000000081AA                 db    0
.eh_frame:00000000000081AB                 db    0
.eh_frame:00000000000081AC                 db 0FCh
.eh_frame:00000000000081AD                 db    1
.eh_frame:00000000000081AE                 db    0
.eh_frame:00000000000081AF                 db    0
.eh_frame:00000000000081B0                 db  60h ; `
.eh_frame:00000000000081B1                 db 0ADh
.eh_frame:00000000000081B2                 db 0FFh
.eh_frame:00000000000081B3                 db 0FFh
.eh_frame:00000000000081B4                 db  73h ; s
.eh_frame:00000000000081B5                 db    0
.eh_frame:00000000000081B6                 db    0
.eh_frame:00000000000081B7                 db    0
.eh_frame:00000000000081B8                 db    0
.eh_frame:00000000000081B9                 db  46h ; F
.eh_frame:00000000000081BA                 db  0Eh
.eh_frame:00000000000081BB                 db  10h
.eh_frame:00000000000081BC                 db  8Ch
.eh_frame:00000000000081BD                 db    2
.eh_frame:00000000000081BE                 db  46h ; F
.eh_frame:00000000000081BF                 db  0Eh
.eh_frame:00000000000081C0                 db  18h
.eh_frame:00000000000081C1                 db  86h
.eh_frame:00000000000081C2                 db    3
.eh_frame:00000000000081C3                 db  44h ; D
.eh_frame:00000000000081C4                 db  0Eh
.eh_frame:00000000000081C5                 db  20h
.eh_frame:00000000000081C6                 db  83h
.eh_frame:00000000000081C7                 db    4
.eh_frame:00000000000081C8                 db  7Fh ; 
.eh_frame:00000000000081C9                 db  0Ah
.eh_frame:00000000000081CA                 db  0Eh
.eh_frame:00000000000081CB                 db  18h
.eh_frame:00000000000081CC                 db  41h ; A
.eh_frame:00000000000081CD                 db  0Eh
.eh_frame:00000000000081CE                 db  10h
.eh_frame:00000000000081CF                 db  42h ; B
.eh_frame:00000000000081D0                 db  0Eh
.eh_frame:00000000000081D1                 db    8
.eh_frame:00000000000081D2                 db  4Eh ; N
.eh_frame:00000000000081D3                 db  0Bh
.eh_frame:00000000000081D4                 db  5Ch ; \
.eh_frame:00000000000081D5                 db    0
.eh_frame:00000000000081D6                 db    0
.eh_frame:00000000000081D7                 db    0
.eh_frame:00000000000081D8                 db  28h ; (
.eh_frame:00000000000081D9                 db    2
.eh_frame:00000000000081DA                 db    0
.eh_frame:00000000000081DB                 db    0
.eh_frame:00000000000081DC                 db 0B4h
.eh_frame:00000000000081DD                 db 0ADh
.eh_frame:00000000000081DE                 db 0FFh
.eh_frame:00000000000081DF                 db 0FFh
.eh_frame:00000000000081E0                 db  20h
.eh_frame:00000000000081E1                 db    1
.eh_frame:00000000000081E2                 db    0
.eh_frame:00000000000081E3                 db    0
.eh_frame:00000000000081E4                 db    0
.eh_frame:00000000000081E5                 db  42h ; B
.eh_frame:00000000000081E6                 db  0Eh
.eh_frame:00000000000081E7                 db  10h
.eh_frame:00000000000081E8                 db  8Fh
.eh_frame:00000000000081E9                 db    2
.eh_frame:00000000000081EA                 db  42h ; B
.eh_frame:00000000000081EB                 db  0Eh
.eh_frame:00000000000081EC                 db  18h
.eh_frame:00000000000081ED                 db  8Eh
.eh_frame:00000000000081EE                 db    3
.eh_frame:00000000000081EF                 db  45h ; E
.eh_frame:00000000000081F0                 db  0Eh
.eh_frame:00000000000081F1                 db  20h
.eh_frame:00000000000081F2                 db  8Dh
.eh_frame:00000000000081F3                 db    4
.eh_frame:00000000000081F4                 db  42h ; B
.eh_frame:00000000000081F5                 db  0Eh
.eh_frame:00000000000081F6                 db  28h ; (
.eh_frame:00000000000081F7                 db  8Ch
.eh_frame:00000000000081F8                 db    5
.eh_frame:00000000000081F9                 db  43h ; C
.eh_frame:00000000000081FA                 db  0Eh
.eh_frame:00000000000081FB                 db  30h ; 0
.eh_frame:00000000000081FC                 db  86h
.eh_frame:00000000000081FD                 db    6
.eh_frame:00000000000081FE                 db  41h ; A
.eh_frame:00000000000081FF                 db  0Eh
.eh_frame:0000000000008200                 db  38h ; 8
.eh_frame:0000000000008201                 db  83h
.eh_frame:0000000000008202                 db    7
.eh_frame:0000000000008203                 db  56h ; V
.eh_frame:0000000000008204                 db  0Eh
.eh_frame:0000000000008205                 db  40h ; @
.eh_frame:0000000000008206                 db    2
.eh_frame:0000000000008207                 db 0D3h
.eh_frame:0000000000008208                 db  0Ah
.eh_frame:0000000000008209                 db  0Eh
.eh_frame:000000000000820A                 db  38h ; 8
.eh_frame:000000000000820B                 db  41h ; A
.eh_frame:000000000000820C                 db  0Eh
.eh_frame:000000000000820D                 db  30h ; 0
.eh_frame:000000000000820E                 db  41h ; A
.eh_frame:000000000000820F                 db  0Eh
.eh_frame:0000000000008210                 db  28h ; (
.eh_frame:0000000000008211                 db  42h ; B
.eh_frame:0000000000008212                 db  0Eh
.eh_frame:0000000000008213                 db  20h
.eh_frame:0000000000008214                 db  42h ; B
.eh_frame:0000000000008215                 db  0Eh
.eh_frame:0000000000008216                 db  18h
.eh_frame:0000000000008217                 db  42h ; B
.eh_frame:0000000000008218                 db  0Eh
.eh_frame:0000000000008219                 db  10h
.eh_frame:000000000000821A                 db  42h ; B
.eh_frame:000000000000821B                 db  0Eh
.eh_frame:000000000000821C                 db    8
.eh_frame:000000000000821D                 db  46h ; F
.eh_frame:000000000000821E                 db  0Bh
.eh_frame:000000000000821F                 db  44h ; D
.eh_frame:0000000000008220                 db  0Eh
.eh_frame:0000000000008221                 db  38h ; 8
.eh_frame:0000000000008222                 db  46h ; F
.eh_frame:0000000000008223                 db  0Eh
.eh_frame:0000000000008224                 db  30h ; 0
.eh_frame:0000000000008225                 db  41h ; A
.eh_frame:0000000000008226                 db  0Eh
.eh_frame:0000000000008227                 db  28h ; (
.eh_frame:0000000000008228                 db  42h ; B
.eh_frame:0000000000008229                 db  0Eh
.eh_frame:000000000000822A                 db  20h
.eh_frame:000000000000822B                 db  42h ; B
.eh_frame:000000000000822C                 db  0Eh
.eh_frame:000000000000822D                 db  18h
.eh_frame:000000000000822E                 db  42h ; B
.eh_frame:000000000000822F                 db  0Eh
.eh_frame:0000000000008230                 db  10h
.eh_frame:0000000000008231                 db  42h ; B
.eh_frame:0000000000008232                 db  0Eh
.eh_frame:0000000000008233                 db    8
.eh_frame:0000000000008234                 db  48h ; H
.eh_frame:0000000000008235                 db    0
.eh_frame:0000000000008236                 db    0
.eh_frame:0000000000008237                 db    0
.eh_frame:0000000000008238                 db  88h
.eh_frame:0000000000008239                 db    2
.eh_frame:000000000000823A                 db    0
.eh_frame:000000000000823B                 db    0
.eh_frame:000000000000823C                 db  74h ; t
.eh_frame:000000000000823D                 db 0AEh
.eh_frame:000000000000823E                 db 0FFh
.eh_frame:000000000000823F                 db 0FFh
.eh_frame:0000000000008240                 db  6Dh ; m
.eh_frame:0000000000008241                 db    0
.eh_frame:0000000000008242                 db    0
.eh_frame:0000000000008243                 db    0
.eh_frame:0000000000008244                 db    0
.eh_frame:0000000000008245                 db  42h ; B
.eh_frame:0000000000008246                 db  0Eh
.eh_frame:0000000000008247                 db  10h
.eh_frame:0000000000008248                 db  8Fh
.eh_frame:0000000000008249                 db    2
.eh_frame:000000000000824A                 db  42h ; B
.eh_frame:000000000000824B                 db  0Eh
.eh_frame:000000000000824C                 db  18h
.eh_frame:000000000000824D                 db  8Eh
.eh_frame:000000000000824E                 db    3
.eh_frame:000000000000824F                 db  45h ; E
.eh_frame:0000000000008250                 db  0Eh
.eh_frame:0000000000008251                 db  20h
.eh_frame:0000000000008252                 db  8Dh
.eh_frame:0000000000008253                 db    4
.eh_frame:0000000000008254                 db  42h ; B
.eh_frame:0000000000008255                 db  0Eh
.eh_frame:0000000000008256                 db  28h ; (
.eh_frame:0000000000008257                 db  8Ch
.eh_frame:0000000000008258                 db    5
.eh_frame:0000000000008259                 db  44h ; D
.eh_frame:000000000000825A                 db  0Eh
.eh_frame:000000000000825B                 db  30h ; 0
.eh_frame:000000000000825C                 db  86h
.eh_frame:000000000000825D                 db    6
.eh_frame:000000000000825E                 db  41h ; A
.eh_frame:000000000000825F                 db  0Eh
.eh_frame:0000000000008260                 db  38h ; 8
.eh_frame:0000000000008261                 db  83h
.eh_frame:0000000000008262                 db    7
.eh_frame:0000000000008263                 db  50h ; P
.eh_frame:0000000000008264                 db  0Eh
.eh_frame:0000000000008265                 db  40h ; @
.eh_frame:0000000000008266                 db  5Ah ; Z
.eh_frame:0000000000008267                 db  0Ah
.eh_frame:0000000000008268                 db  0Eh
.eh_frame:0000000000008269                 db  38h ; 8
.eh_frame:000000000000826A                 db  41h ; A
.eh_frame:000000000000826B                 db  0Eh
.eh_frame:000000000000826C                 db  30h ; 0
.eh_frame:000000000000826D                 db  41h ; A
.eh_frame:000000000000826E                 db  0Eh
.eh_frame:000000000000826F                 db  28h ; (
.eh_frame:0000000000008270                 db  42h ; B
.eh_frame:0000000000008271                 db  0Eh
.eh_frame:0000000000008272                 db  20h
.eh_frame:0000000000008273                 db  42h ; B
.eh_frame:0000000000008274                 db  0Eh
.eh_frame:0000000000008275                 db  18h
.eh_frame:0000000000008276                 db  42h ; B
.eh_frame:0000000000008277                 db  0Eh
.eh_frame:0000000000008278                 db  10h
.eh_frame:0000000000008279                 db  42h ; B
.eh_frame:000000000000827A                 db  0Eh
.eh_frame:000000000000827B                 db    8
.eh_frame:000000000000827C                 db  41h ; A
.eh_frame:000000000000827D                 db  0Bh
.eh_frame:000000000000827E                 db    0
.eh_frame:000000000000827F                 db    0
.eh_frame:0000000000008280                 db  3Ch ; <
.eh_frame:0000000000008281                 db    0
.eh_frame:0000000000008282                 db    0
.eh_frame:0000000000008283                 db    0
.eh_frame:0000000000008284                 db 0D4h
.eh_frame:0000000000008285                 db    2
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db  98h
.eh_frame:0000000000008289                 db 0AEh
.eh_frame:000000000000828A                 db 0FFh
.eh_frame:000000000000828B                 db 0FFh
.eh_frame:000000000000828C                 db  4Dh ; M
.eh_frame:000000000000828D                 db    0
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db    0
.eh_frame:0000000000008291                 db  42h ; B
.eh_frame:0000000000008292                 db  0Eh
.eh_frame:0000000000008293                 db  10h
.eh_frame:0000000000008294                 db  8Eh
.eh_frame:0000000000008295                 db    2
.eh_frame:0000000000008296                 db  42h ; B
.eh_frame:0000000000008297                 db  0Eh
.eh_frame:0000000000008298                 db  18h
.eh_frame:0000000000008299                 db  8Dh
.eh_frame:000000000000829A                 db    3
.eh_frame:000000000000829B                 db  42h ; B
.eh_frame:000000000000829C                 db  0Eh
.eh_frame:000000000000829D                 db  20h
.eh_frame:000000000000829E                 db  8Ch
.eh_frame:000000000000829F                 db    4
.eh_frame:00000000000082A0                 db  41h ; A
.eh_frame:00000000000082A1                 db  0Eh
.eh_frame:00000000000082A2                 db  28h ; (
.eh_frame:00000000000082A3                 db  86h
.eh_frame:00000000000082A4                 db    5
.eh_frame:00000000000082A5                 db  41h ; A
.eh_frame:00000000000082A6                 db  0Eh
.eh_frame:00000000000082A7                 db  30h ; 0
.eh_frame:00000000000082A8                 db  83h
.eh_frame:00000000000082A9                 db    6
.eh_frame:00000000000082AA                 db  7Ah ; z
.eh_frame:00000000000082AB                 db  0Eh
.eh_frame:00000000000082AC                 db  28h ; (
.eh_frame:00000000000082AD                 db  44h ; D
.eh_frame:00000000000082AE                 db  0Eh
.eh_frame:00000000000082AF                 db  20h
.eh_frame:00000000000082B0                 db  42h ; B
.eh_frame:00000000000082B1                 db  0Eh
.eh_frame:00000000000082B2                 db  18h
.eh_frame:00000000000082B3                 db  42h ; B
.eh_frame:00000000000082B4                 db  0Eh
.eh_frame:00000000000082B5                 db  10h
.eh_frame:00000000000082B6                 db  42h ; B
.eh_frame:00000000000082B7                 db  0Eh
.eh_frame:00000000000082B8                 db    8
.eh_frame:00000000000082B9                 db    0
.eh_frame:00000000000082BA                 db    0
.eh_frame:00000000000082BB                 db    0
.eh_frame:00000000000082BC                 db    0
.eh_frame:00000000000082BD                 db    0
.eh_frame:00000000000082BE                 db    0
.eh_frame:00000000000082BF                 db    0
.eh_frame:00000000000082C0                 db  10h
.eh_frame:00000000000082C1                 db    0
.eh_frame:00000000000082C2                 db    0
.eh_frame:00000000000082C3                 db    0
.eh_frame:00000000000082C4                 db  14h
.eh_frame:00000000000082C5                 db    3
.eh_frame:00000000000082C6                 db    0
.eh_frame:00000000000082C7                 db    0
.eh_frame:00000000000082C8                 db 0A8h
.eh_frame:00000000000082C9                 db 0AEh
.eh_frame:00000000000082CA                 db 0FFh
.eh_frame:00000000000082CB                 db 0FFh
.eh_frame:00000000000082CC                 db    8
.eh_frame:00000000000082CD                 db    0
.eh_frame:00000000000082CE                 db    0
.eh_frame:00000000000082CF                 db    0
.eh_frame:00000000000082D0                 db    0
.eh_frame:00000000000082D1                 db    0
.eh_frame:00000000000082D2                 db    0
.eh_frame:00000000000082D3                 db    0
.eh_frame:00000000000082D4                 db  10h
.eh_frame:00000000000082D5                 db    0
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db  28h ; (
.eh_frame:00000000000082D9                 db    3
.eh_frame:00000000000082DA                 db    0
.eh_frame:00000000000082DB                 db    0
.eh_frame:00000000000082DC                 db 0A4h
.eh_frame:00000000000082DD                 db 0AEh
.eh_frame:00000000000082DE                 db 0FFh
.eh_frame:00000000000082DF                 db 0FFh
.eh_frame:00000000000082E0                 db    8
.eh_frame:00000000000082E1                 db    0
.eh_frame:00000000000082E2                 db    0
.eh_frame:00000000000082E3                 db    0
.eh_frame:00000000000082E4                 db    0
.eh_frame:00000000000082E5                 db    0
.eh_frame:00000000000082E6                 db    0
.eh_frame:00000000000082E7                 db    0
.eh_frame:00000000000082E8                 db  2Ch ; ,
.eh_frame:00000000000082E9                 db    0
.eh_frame:00000000000082EA                 db    0
.eh_frame:00000000000082EB                 db    0
.eh_frame:00000000000082EC                 db  3Ch ; <
.eh_frame:00000000000082ED                 db    3
.eh_frame:00000000000082EE                 db    0
.eh_frame:00000000000082EF                 db    0
.eh_frame:00000000000082F0                 db 0A0h
.eh_frame:00000000000082F1                 db 0AEh
.eh_frame:00000000000082F2                 db 0FFh
.eh_frame:00000000000082F3                 db 0FFh
.eh_frame:00000000000082F4                 db 0A4h
.eh_frame:00000000000082F5                 db    0
.eh_frame:00000000000082F6                 db    0
.eh_frame:00000000000082F7                 db    0
.eh_frame:00000000000082F8                 db    0
.eh_frame:00000000000082F9                 db  41h ; A
.eh_frame:00000000000082FA                 db  0Eh
.eh_frame:00000000000082FB                 db  10h
.eh_frame:00000000000082FC                 db  86h
.eh_frame:00000000000082FD                 db    2
.eh_frame:00000000000082FE                 db  41h ; A
.eh_frame:00000000000082FF                 db  0Eh
.eh_frame:0000000000008300                 db  18h
.eh_frame:0000000000008301                 db  83h
.eh_frame:0000000000008302                 db    3
.eh_frame:0000000000008303                 db  44h ; D
.eh_frame:0000000000008304                 db  0Eh
.eh_frame:0000000000008305                 db  20h
.eh_frame:0000000000008306                 db  7Ah ; z
.eh_frame:0000000000008307                 db  0Ah
.eh_frame:0000000000008308                 db  0Eh
.eh_frame:0000000000008309                 db  18h
.eh_frame:000000000000830A                 db  41h ; A
.eh_frame:000000000000830B                 db  0Eh
.eh_frame:000000000000830C                 db  10h
.eh_frame:000000000000830D                 db  41h ; A
.eh_frame:000000000000830E                 db  0Eh
.eh_frame:000000000000830F                 db    8
.eh_frame:0000000000008310                 db  41h ; A
.eh_frame:0000000000008311                 db  0Bh
.eh_frame:0000000000008312                 db    0
.eh_frame:0000000000008313                 db    0
.eh_frame:0000000000008314                 db    0
.eh_frame:0000000000008315                 db    0
.eh_frame:0000000000008316                 db    0
.eh_frame:0000000000008317                 db    0
.eh_frame:0000000000008318                 db  10h
.eh_frame:0000000000008319                 db    0
.eh_frame:000000000000831A                 db    0
.eh_frame:000000000000831B                 db    0
.eh_frame:000000000000831C                 db  6Ch ; l
.eh_frame:000000000000831D                 db    3
.eh_frame:000000000000831E                 db    0
.eh_frame:000000000000831F                 db    0
.eh_frame:0000000000008320                 db  20h
.eh_frame:0000000000008321                 db 0AFh
.eh_frame:0000000000008322                 db 0FFh
.eh_frame:0000000000008323                 db 0FFh
.eh_frame:0000000000008324                 db    5
.eh_frame:0000000000008325                 db    0
.eh_frame:0000000000008326                 db    0
.eh_frame:0000000000008327                 db    0
.eh_frame:0000000000008328                 db    0
.eh_frame:0000000000008329                 db    0
.eh_frame:000000000000832A                 db    0
.eh_frame:000000000000832B                 db    0
.eh_frame:000000000000832C                 db  18h
.eh_frame:000000000000832D                 db    0
.eh_frame:000000000000832E                 db    0
.eh_frame:000000000000832F                 db    0
.eh_frame:0000000000008330                 db  80h
.eh_frame:0000000000008331                 db    3
.eh_frame:0000000000008332                 db    0
.eh_frame:0000000000008333                 db    0
.eh_frame:0000000000008334                 db  1Ch
.eh_frame:0000000000008335                 db 0AFh
.eh_frame:0000000000008336                 db 0FFh
.eh_frame:0000000000008337                 db 0FFh
.eh_frame:0000000000008338                 db  22h ; "
.eh_frame:0000000000008339                 db    0
.eh_frame:000000000000833A                 db    0
.eh_frame:000000000000833B                 db    0
.eh_frame:000000000000833C                 db    0
.eh_frame:000000000000833D                 db  46h ; F
.eh_frame:000000000000833E                 db  0Eh
.eh_frame:000000000000833F                 db  10h
.eh_frame:0000000000008340                 db  83h
.eh_frame:0000000000008341                 db    2
.eh_frame:0000000000008342                 db  4Eh ; N
.eh_frame:0000000000008343                 db 0C3h
.eh_frame:0000000000008344                 db  0Eh
.eh_frame:0000000000008345                 db    8
.eh_frame:0000000000008346                 db    0
.eh_frame:0000000000008347                 db    0
.eh_frame:0000000000008348                 db  24h ; $
.eh_frame:0000000000008349                 db    0
.eh_frame:000000000000834A                 db    0
.eh_frame:000000000000834B                 db    0
.eh_frame:000000000000834C                 db  9Ch
.eh_frame:000000000000834D                 db    3
.eh_frame:000000000000834E                 db    0
.eh_frame:000000000000834F                 db    0
.eh_frame:0000000000008350                 db  30h ; 0
.eh_frame:0000000000008351                 db 0AFh
.eh_frame:0000000000008352                 db 0FFh
.eh_frame:0000000000008353                 db 0FFh
.eh_frame:0000000000008354                 db  42h ; B
.eh_frame:0000000000008355                 db    0
.eh_frame:0000000000008356                 db    0
.eh_frame:0000000000008357                 db    0
.eh_frame:0000000000008358                 db    0
.eh_frame:0000000000008359                 db  41h ; A
.eh_frame:000000000000835A                 db  0Eh
.eh_frame:000000000000835B                 db  10h
.eh_frame:000000000000835C                 db  86h
.eh_frame:000000000000835D                 db    2
.eh_frame:000000000000835E                 db  41h ; A
.eh_frame:000000000000835F                 db  0Eh
.eh_frame:0000000000008360                 db  18h
.eh_frame:0000000000008361                 db  83h
.eh_frame:0000000000008362                 db    3
.eh_frame:0000000000008363                 db  51h ; Q
.eh_frame:0000000000008364                 db  0Eh
.eh_frame:0000000000008365                 db  20h
.eh_frame:0000000000008366                 db  6Ah ; j
.eh_frame:0000000000008367                 db  0Eh
.eh_frame:0000000000008368                 db  18h
.eh_frame:0000000000008369                 db  43h ; C
.eh_frame:000000000000836A                 db  0Eh
.eh_frame:000000000000836B                 db  10h
.eh_frame:000000000000836C                 db  41h ; A
.eh_frame:000000000000836D                 db  0Eh
.eh_frame:000000000000836E                 db    8
.eh_frame:000000000000836F                 db    0
.eh_frame:0000000000008370                 db  4Ch ; L
.eh_frame:0000000000008371                 db    0
.eh_frame:0000000000008372                 db    0
.eh_frame:0000000000008373                 db    0
.eh_frame:0000000000008374                 db 0C4h
.eh_frame:0000000000008375                 db    3
.eh_frame:0000000000008376                 db    0
.eh_frame:0000000000008377                 db    0
.eh_frame:0000000000008378                 db  58h ; X
.eh_frame:0000000000008379                 db 0AFh
.eh_frame:000000000000837A                 db 0FFh
.eh_frame:000000000000837B                 db 0FFh
.eh_frame:000000000000837C                 db 0AEh
.eh_frame:000000000000837D                 db    1
.eh_frame:000000000000837E                 db    0
.eh_frame:000000000000837F                 db    0
.eh_frame:0000000000008380                 db    0
.eh_frame:0000000000008381                 db  42h ; B
.eh_frame:0000000000008382                 db  0Eh
.eh_frame:0000000000008383                 db  10h
.eh_frame:0000000000008384                 db  8Fh
.eh_frame:0000000000008385                 db    2
.eh_frame:0000000000008386                 db  42h ; B
.eh_frame:0000000000008387                 db  0Eh
.eh_frame:0000000000008388                 db  18h
.eh_frame:0000000000008389                 db  8Eh
.eh_frame:000000000000838A                 db    3
.eh_frame:000000000000838B                 db  45h ; E
.eh_frame:000000000000838C                 db  0Eh
.eh_frame:000000000000838D                 db  20h
.eh_frame:000000000000838E                 db  8Dh
.eh_frame:000000000000838F                 db    4
.eh_frame:0000000000008390                 db  42h ; B
.eh_frame:0000000000008391                 db  0Eh
.eh_frame:0000000000008392                 db  28h ; (
.eh_frame:0000000000008393                 db  8Ch
.eh_frame:0000000000008394                 db    5
.eh_frame:0000000000008395                 db  44h ; D
.eh_frame:0000000000008396                 db  0Eh
.eh_frame:0000000000008397                 db  30h ; 0
.eh_frame:0000000000008398                 db  86h
.eh_frame:0000000000008399                 db    6
.eh_frame:000000000000839A                 db  41h ; A
.eh_frame:000000000000839B                 db  0Eh
.eh_frame:000000000000839C                 db  38h ; 8
.eh_frame:000000000000839D                 db  83h
.eh_frame:000000000000839E                 db    7
.eh_frame:000000000000839F                 db  44h ; D
.eh_frame:00000000000083A0                 db  0Eh
.eh_frame:00000000000083A1                 db  50h ; P
.eh_frame:00000000000083A2                 db    2
.eh_frame:00000000000083A3                 db 0D0h
.eh_frame:00000000000083A4                 db  0Ah
.eh_frame:00000000000083A5                 db  0Eh
.eh_frame:00000000000083A6                 db  38h ; 8
.eh_frame:00000000000083A7                 db  44h ; D
.eh_frame:00000000000083A8                 db  0Eh
.eh_frame:00000000000083A9                 db  30h ; 0
.eh_frame:00000000000083AA                 db  41h ; A
.eh_frame:00000000000083AB                 db  0Eh
.eh_frame:00000000000083AC                 db  28h ; (
.eh_frame:00000000000083AD                 db  42h ; B
.eh_frame:00000000000083AE                 db  0Eh
.eh_frame:00000000000083AF                 db  20h
.eh_frame:00000000000083B0                 db  42h ; B
.eh_frame:00000000000083B1                 db  0Eh
.eh_frame:00000000000083B2                 db  18h
.eh_frame:00000000000083B3                 db  42h ; B
.eh_frame:00000000000083B4                 db  0Eh
.eh_frame:00000000000083B5                 db  10h
.eh_frame:00000000000083B6                 db  42h ; B
.eh_frame:00000000000083B7                 db  0Eh
.eh_frame:00000000000083B8                 db    8
.eh_frame:00000000000083B9                 db  47h ; G
.eh_frame:00000000000083BA                 db  0Bh
.eh_frame:00000000000083BB                 db    0
.eh_frame:00000000000083BC                 db    0
.eh_frame:00000000000083BD                 db    0
.eh_frame:00000000000083BE                 db    0
.eh_frame:00000000000083BF                 db    0
.eh_frame:00000000000083C0                 db  1Ch
.eh_frame:00000000000083C1                 db    0
.eh_frame:00000000000083C2                 db    0
.eh_frame:00000000000083C3                 db    0
.eh_frame:00000000000083C4                 db  14h
.eh_frame:00000000000083C5                 db    4
.eh_frame:00000000000083C6                 db    0
.eh_frame:00000000000083C7                 db    0
.eh_frame:00000000000083C8                 db 0B8h
.eh_frame:00000000000083C9                 db 0B0h
.eh_frame:00000000000083CA                 db 0FFh
.eh_frame:00000000000083CB                 db 0FFh
.eh_frame:00000000000083CC                 db  60h ; `
.eh_frame:00000000000083CD                 db    0
.eh_frame:00000000000083CE                 db    0
.eh_frame:00000000000083CF                 db    0
.eh_frame:00000000000083D0                 db    0
.eh_frame:00000000000083D1                 db  44h ; D
.eh_frame:00000000000083D2                 db  0Eh
.eh_frame:00000000000083D3                 db  10h
.eh_frame:00000000000083D4                 db  75h ; u
.eh_frame:00000000000083D5                 db  0Ah
.eh_frame:00000000000083D6                 db  0Eh
.eh_frame:00000000000083D7                 db    8
.eh_frame:00000000000083D8                 db  47h ; G
.eh_frame:00000000000083D9                 db  0Bh
.eh_frame:00000000000083DA                 db  5Fh ; _
.eh_frame:00000000000083DB                 db  0Eh
.eh_frame:00000000000083DC                 db    8
.eh_frame:00000000000083DD                 db    0
.eh_frame:00000000000083DE                 db    0
.eh_frame:00000000000083DF                 db    0
.eh_frame:00000000000083E0                 db  10h
.eh_frame:00000000000083E1                 db    0
.eh_frame:00000000000083E2                 db    0
.eh_frame:00000000000083E3                 db    0
.eh_frame:00000000000083E4                 db  34h ; 4
.eh_frame:00000000000083E5                 db    4
.eh_frame:00000000000083E6                 db    0
.eh_frame:00000000000083E7                 db    0
.eh_frame:00000000000083E8                 db 0F8h
.eh_frame:00000000000083E9                 db 0B0h
.eh_frame:00000000000083EA                 db 0FFh
.eh_frame:00000000000083EB                 db 0FFh
.eh_frame:00000000000083EC                 db  10h
.eh_frame:00000000000083ED                 db    0
.eh_frame:00000000000083EE                 db    0
.eh_frame:00000000000083EF                 db    0
.eh_frame:00000000000083F0                 db    0
.eh_frame:00000000000083F1                 db    0
.eh_frame:00000000000083F2                 db    0
.eh_frame:00000000000083F3                 db    0
.eh_frame:00000000000083F4                 db  60h ; `
.eh_frame:00000000000083F5                 db    0
.eh_frame:00000000000083F6                 db    0
.eh_frame:00000000000083F7                 db    0
.eh_frame:00000000000083F8                 db  48h ; H
.eh_frame:00000000000083F9                 db    4
.eh_frame:00000000000083FA                 db    0
.eh_frame:00000000000083FB                 db    0
.eh_frame:00000000000083FC                 db 0F4h
.eh_frame:00000000000083FD                 db 0B0h
.eh_frame:00000000000083FE                 db 0FFh
.eh_frame:00000000000083FF                 db 0FFh
.eh_frame:0000000000008400                 db    8
.eh_frame:0000000000008401                 db    1
.eh_frame:0000000000008402                 db    0
.eh_frame:0000000000008403                 db    0
.eh_frame:0000000000008404                 db    0
.eh_frame:0000000000008405                 db  42h ; B
.eh_frame:0000000000008406                 db  0Eh
.eh_frame:0000000000008407                 db  10h
.eh_frame:0000000000008408                 db  8Fh
.eh_frame:0000000000008409                 db    2
.eh_frame:000000000000840A                 db  42h ; B
.eh_frame:000000000000840B                 db  0Eh
.eh_frame:000000000000840C                 db  18h
.eh_frame:000000000000840D                 db  8Eh
.eh_frame:000000000000840E                 db    3
.eh_frame:000000000000840F                 db  42h ; B
.eh_frame:0000000000008410                 db  0Eh
.eh_frame:0000000000008411                 db  20h
.eh_frame:0000000000008412                 db  8Dh
.eh_frame:0000000000008413                 db    4
.eh_frame:0000000000008414                 db  42h ; B
.eh_frame:0000000000008415                 db  0Eh
.eh_frame:0000000000008416                 db  28h ; (
.eh_frame:0000000000008417                 db  8Ch
.eh_frame:0000000000008418                 db    5
.eh_frame:0000000000008419                 db  41h ; A
.eh_frame:000000000000841A                 db  0Eh
.eh_frame:000000000000841B                 db  30h ; 0
.eh_frame:000000000000841C                 db  86h
.eh_frame:000000000000841D                 db    6
.eh_frame:000000000000841E                 db  41h ; A
.eh_frame:000000000000841F                 db  0Eh
.eh_frame:0000000000008420                 db  38h ; 8
.eh_frame:0000000000008421                 db  83h
.eh_frame:0000000000008422                 db    7
.eh_frame:0000000000008423                 db  44h ; D
.eh_frame:0000000000008424                 db  0Eh
.eh_frame:0000000000008425                 db  50h ; P
.eh_frame:0000000000008426                 db    2
.eh_frame:0000000000008427                 db  96h
.eh_frame:0000000000008428                 db  0Ah
.eh_frame:0000000000008429                 db  0Eh
.eh_frame:000000000000842A                 db  38h ; 8
.eh_frame:000000000000842B                 db  41h ; A
.eh_frame:000000000000842C                 db  0Eh
.eh_frame:000000000000842D                 db  30h ; 0
.eh_frame:000000000000842E                 db  41h ; A
.eh_frame:000000000000842F                 db  0Eh
.eh_frame:0000000000008430                 db  28h ; (
.eh_frame:0000000000008431                 db  42h ; B
.eh_frame:0000000000008432                 db  0Eh
.eh_frame:0000000000008433                 db  20h
.eh_frame:0000000000008434                 db  42h ; B
.eh_frame:0000000000008435                 db  0Eh
.eh_frame:0000000000008436                 db  18h
.eh_frame:0000000000008437                 db  42h ; B
.eh_frame:0000000000008438                 db  0Eh
.eh_frame:0000000000008439                 db  10h
.eh_frame:000000000000843A                 db  42h ; B
.eh_frame:000000000000843B                 db  0Eh
.eh_frame:000000000000843C                 db    8
.eh_frame:000000000000843D                 db  42h ; B
.eh_frame:000000000000843E                 db  0Bh
.eh_frame:000000000000843F                 db    2
.eh_frame:0000000000008440                 db  44h ; D
.eh_frame:0000000000008441                 db  0Ah
.eh_frame:0000000000008442                 db  0Eh
.eh_frame:0000000000008443                 db  38h ; 8
.eh_frame:0000000000008444                 db  43h ; C
.eh_frame:0000000000008445                 db  0Eh
.eh_frame:0000000000008446                 db  30h ; 0
.eh_frame:0000000000008447                 db  41h ; A
.eh_frame:0000000000008448                 db  0Eh
.eh_frame:0000000000008449                 db  28h ; (
.eh_frame:000000000000844A                 db  42h ; B
.eh_frame:000000000000844B                 db  0Eh
.eh_frame:000000000000844C                 db  20h
.eh_frame:000000000000844D                 db  42h ; B
.eh_frame:000000000000844E                 db  0Eh
.eh_frame:000000000000844F                 db  18h
.eh_frame:0000000000008450                 db  42h ; B
.eh_frame:0000000000008451                 db  0Eh
.eh_frame:0000000000008452                 db  10h
.eh_frame:0000000000008453                 db  42h ; B
.eh_frame:0000000000008454                 db  0Eh
.eh_frame:0000000000008455                 db    8
.eh_frame:0000000000008456                 db  41h ; A
.eh_frame:0000000000008457                 db  0Bh
.eh_frame:0000000000008458                 db  10h
.eh_frame:0000000000008459                 db    0
.eh_frame:000000000000845A                 db    0
.eh_frame:000000000000845B                 db    0
.eh_frame:000000000000845C                 db 0ACh
.eh_frame:000000000000845D                 db    4
.eh_frame:000000000000845E                 db    0
.eh_frame:000000000000845F                 db    0
.eh_frame:0000000000008460                 db 0A0h
.eh_frame:0000000000008461                 db 0B1h
.eh_frame:0000000000008462                 db 0FFh
.eh_frame:0000000000008463                 db 0FFh
.eh_frame:0000000000008464                 db  0Ah
.eh_frame:0000000000008465                 db    0
.eh_frame:0000000000008466                 db    0
.eh_frame:0000000000008467                 db    0
.eh_frame:0000000000008468                 db    0
.eh_frame:0000000000008469                 db    0
.eh_frame:000000000000846A                 db    0
.eh_frame:000000000000846B                 db    0
.eh_frame:000000000000846C                 db  10h
.eh_frame:000000000000846D                 db    0
.eh_frame:000000000000846E                 db    0
.eh_frame:000000000000846F                 db    0
.eh_frame:0000000000008470                 db 0C0h
.eh_frame:0000000000008471                 db    4
.eh_frame:0000000000008472                 db    0
.eh_frame:0000000000008473                 db    0
.eh_frame:0000000000008474                 db  9Ch
.eh_frame:0000000000008475                 db 0B1h
.eh_frame:0000000000008476                 db 0FFh
.eh_frame:0000000000008477                 db 0FFh
.eh_frame:0000000000008478                 db    9
.eh_frame:0000000000008479                 db    0
.eh_frame:000000000000847A                 db    0
.eh_frame:000000000000847B                 db    0
.eh_frame:000000000000847C                 db    0
.eh_frame:000000000000847D                 db    0
.eh_frame:000000000000847E                 db    0
.eh_frame:000000000000847F                 db    0
.eh_frame:0000000000008480                 db  2Ch ; ,
.eh_frame:0000000000008481                 db    0
.eh_frame:0000000000008482                 db    0
.eh_frame:0000000000008483                 db    0
.eh_frame:0000000000008484                 db 0D4h
.eh_frame:0000000000008485                 db    4
.eh_frame:0000000000008486                 db    0
.eh_frame:0000000000008487                 db    0
.eh_frame:0000000000008488                 db  98h
.eh_frame:0000000000008489                 db 0B1h
.eh_frame:000000000000848A                 db 0FFh
.eh_frame:000000000000848B                 db 0FFh
.eh_frame:000000000000848C                 db  4Bh ; K
.eh_frame:000000000000848D                 db    0
.eh_frame:000000000000848E                 db    0
.eh_frame:000000000000848F                 db    0
.eh_frame:0000000000008490                 db    0
.eh_frame:0000000000008491                 db  47h ; G
.eh_frame:0000000000008492                 db  0Eh
.eh_frame:0000000000008493                 db  10h
.eh_frame:0000000000008494                 db  8Ch
.eh_frame:0000000000008495                 db    2
.eh_frame:0000000000008496                 db  41h ; A
.eh_frame:0000000000008497                 db  0Eh
.eh_frame:0000000000008498                 db  18h
.eh_frame:0000000000008499                 db  86h
.eh_frame:000000000000849A                 db    3
.eh_frame:000000000000849B                 db  44h ; D
.eh_frame:000000000000849C                 db  0Eh
.eh_frame:000000000000849D                 db  20h
.eh_frame:000000000000849E                 db  83h
.eh_frame:000000000000849F                 db    4
.eh_frame:00000000000084A0                 db  72h ; r
.eh_frame:00000000000084A1                 db  0Eh
.eh_frame:00000000000084A2                 db  18h
.eh_frame:00000000000084A3                 db  41h ; A
.eh_frame:00000000000084A4                 db  0Eh
.eh_frame:00000000000084A5                 db  10h
.eh_frame:00000000000084A6                 db  42h ; B
.eh_frame:00000000000084A7                 db  0Eh
.eh_frame:00000000000084A8                 db    8
.eh_frame:00000000000084A9                 db  47h ; G
.eh_frame:00000000000084AA                 db 0C3h
.eh_frame:00000000000084AB                 db 0C6h
.eh_frame:00000000000084AC                 db 0CCh
.eh_frame:00000000000084AD                 db    0
.eh_frame:00000000000084AE                 db    0
.eh_frame:00000000000084AF                 db    0
.eh_frame:00000000000084B0                 db  24h ; $
.eh_frame:00000000000084B1                 db    0
.eh_frame:00000000000084B2                 db    0
.eh_frame:00000000000084B3                 db    0
.eh_frame:00000000000084B4                 db    4
.eh_frame:00000000000084B5                 db    5
.eh_frame:00000000000084B6                 db    0
.eh_frame:00000000000084B7                 db    0
.eh_frame:00000000000084B8                 db 0B8h
.eh_frame:00000000000084B9                 db 0B1h
.eh_frame:00000000000084BA                 db 0FFh
.eh_frame:00000000000084BB                 db 0FFh
.eh_frame:00000000000084BC                 db  8Eh
.eh_frame:00000000000084BD                 db    0
.eh_frame:00000000000084BE                 db    0
.eh_frame:00000000000084BF                 db    0
.eh_frame:00000000000084C0                 db    0
.eh_frame:00000000000084C1                 db  41h ; A
.eh_frame:00000000000084C2                 db  0Eh
.eh_frame:00000000000084C3                 db  10h
.eh_frame:00000000000084C4                 db  83h
.eh_frame:00000000000084C5                 db    2
.eh_frame:00000000000084C6                 db  50h ; P
.eh_frame:00000000000084C7                 db  0Eh
.eh_frame:00000000000084C8                 db  20h
.eh_frame:00000000000084C9                 db  75h ; u
.eh_frame:00000000000084CA                 db  0Ah
.eh_frame:00000000000084CB                 db  0Eh
.eh_frame:00000000000084CC                 db  10h
.eh_frame:00000000000084CD                 db  41h ; A
.eh_frame:00000000000084CE                 db  0Eh
.eh_frame:00000000000084CF                 db    8
.eh_frame:00000000000084D0                 db  49h ; I
.eh_frame:00000000000084D1                 db  0Bh
.eh_frame:00000000000084D2                 db    0
.eh_frame:00000000000084D3                 db    0
.eh_frame:00000000000084D4                 db    0
.eh_frame:00000000000084D5                 db    0
.eh_frame:00000000000084D6                 db    0
.eh_frame:00000000000084D7                 db    0
.eh_frame:00000000000084D8                 db  1Ch
.eh_frame:00000000000084D9                 db    0
.eh_frame:00000000000084DA                 db    0
.eh_frame:00000000000084DB                 db    0
.eh_frame:00000000000084DC                 db  2Ch ; ,
.eh_frame:00000000000084DD                 db    5
.eh_frame:00000000000084DE                 db    0
.eh_frame:00000000000084DF                 db    0
.eh_frame:00000000000084E0                 db  20h
.eh_frame:00000000000084E1                 db 0B2h
.eh_frame:00000000000084E2                 db 0FFh
.eh_frame:00000000000084E3                 db 0FFh
.eh_frame:00000000000084E4                 db  9Fh
.eh_frame:00000000000084E5                 db    0
.eh_frame:00000000000084E6                 db    0
.eh_frame:00000000000084E7                 db    0
.eh_frame:00000000000084E8                 db    0
.eh_frame:00000000000084E9                 db  44h ; D
.eh_frame:00000000000084EA                 db  0Eh
.eh_frame:00000000000084EB                 db  10h
.eh_frame:00000000000084EC                 db  83h
.eh_frame:00000000000084ED                 db    2
.eh_frame:00000000000084EE                 db    2
.eh_frame:00000000000084EF                 db  78h ; x
.eh_frame:00000000000084F0                 db  0Ah
.eh_frame:00000000000084F1                 db  0Eh
.eh_frame:00000000000084F2                 db    8
.eh_frame:00000000000084F3                 db  41h ; A
.eh_frame:00000000000084F4                 db  0Bh
.eh_frame:00000000000084F5                 db    0
.eh_frame:00000000000084F6                 db    0
.eh_frame:00000000000084F7                 db    0
.eh_frame:00000000000084F8                 db  40h ; @
.eh_frame:00000000000084F9                 db    0
.eh_frame:00000000000084FA                 db    0
.eh_frame:00000000000084FB                 db    0
.eh_frame:00000000000084FC                 db  4Ch ; L
.eh_frame:00000000000084FD                 db    5
.eh_frame:00000000000084FE                 db    0
.eh_frame:00000000000084FF                 db    0
.eh_frame:0000000000008500                 db 0A0h
.eh_frame:0000000000008501                 db 0B2h
.eh_frame:0000000000008502                 db 0FFh
.eh_frame:0000000000008503                 db 0FFh
.eh_frame:0000000000008504                 db 0E7h
.eh_frame:0000000000008505                 db    0
.eh_frame:0000000000008506                 db    0
.eh_frame:0000000000008507                 db    0
.eh_frame:0000000000008508                 db    0
.eh_frame:0000000000008509                 db  41h ; A
.eh_frame:000000000000850A                 db  0Eh
.eh_frame:000000000000850B                 db  10h
.eh_frame:000000000000850C                 db  86h
.eh_frame:000000000000850D                 db    2
.eh_frame:000000000000850E                 db  41h ; A
.eh_frame:000000000000850F                 db  0Eh
.eh_frame:0000000000008510                 db  18h
.eh_frame:0000000000008511                 db  83h
.eh_frame:0000000000008512                 db    3
.eh_frame:0000000000008513                 db  49h ; I
.eh_frame:0000000000008514                 db  0Eh
.eh_frame:0000000000008515                 db  20h
.eh_frame:0000000000008516                 db  6Eh ; n
.eh_frame:0000000000008517                 db  0Ah
.eh_frame:0000000000008518                 db  0Eh
.eh_frame:0000000000008519                 db  18h
.eh_frame:000000000000851A                 db  41h ; A
.eh_frame:000000000000851B                 db  0Eh
.eh_frame:000000000000851C                 db  10h
.eh_frame:000000000000851D                 db  41h ; A
.eh_frame:000000000000851E                 db  0Eh
.eh_frame:000000000000851F                 db    8
.eh_frame:0000000000008520                 db  45h ; E
.eh_frame:0000000000008521                 db  0Bh
.eh_frame:0000000000008522                 db    2
.eh_frame:0000000000008523                 db  4Ah ; J
.eh_frame:0000000000008524                 db  0Ah
.eh_frame:0000000000008525                 db  0Eh
.eh_frame:0000000000008526                 db  18h
.eh_frame:0000000000008527                 db  41h ; A
.eh_frame:0000000000008528                 db  0Eh
.eh_frame:0000000000008529                 db  10h
.eh_frame:000000000000852A                 db  41h ; A
.eh_frame:000000000000852B                 db  0Eh
.eh_frame:000000000000852C                 db    8
.eh_frame:000000000000852D                 db  44h ; D
.eh_frame:000000000000852E                 db  0Bh
.eh_frame:000000000000852F                 db    2
.eh_frame:0000000000008530                 db  54h ; T
.eh_frame:0000000000008531                 db  0Eh
.eh_frame:0000000000008532                 db  18h
.eh_frame:0000000000008533                 db  41h ; A
.eh_frame:0000000000008534                 db  0Eh
.eh_frame:0000000000008535                 db  10h
.eh_frame:0000000000008536                 db  41h ; A
.eh_frame:0000000000008537                 db  0Eh
.eh_frame:0000000000008538                 db    8
.eh_frame:0000000000008539                 db    0
.eh_frame:000000000000853A                 db    0
.eh_frame:000000000000853B                 db    0
.eh_frame:000000000000853C                 db  74h ; t
.eh_frame:000000000000853D                 db    0
.eh_frame:000000000000853E                 db    0
.eh_frame:000000000000853F                 db    0
.eh_frame:0000000000008540                 db  90h
.eh_frame:0000000000008541                 db    5
.eh_frame:0000000000008542                 db    0
.eh_frame:0000000000008543                 db    0
.eh_frame:0000000000008544                 db  4Ch ; L
.eh_frame:0000000000008545                 db 0B3h
.eh_frame:0000000000008546                 db 0FFh
.eh_frame:0000000000008547                 db 0FFh
.eh_frame:0000000000008548                 db  34h ; 4
.eh_frame:0000000000008549                 db  12h
.eh_frame:000000000000854A                 db    0
.eh_frame:000000000000854B                 db    0
.eh_frame:000000000000854C                 db    0
.eh_frame:000000000000854D                 db  42h ; B
.eh_frame:000000000000854E                 db  0Eh
.eh_frame:000000000000854F                 db  10h
.eh_frame:0000000000008550                 db  8Fh
.eh_frame:0000000000008551                 db    2
.eh_frame:0000000000008552                 db  42h ; B
.eh_frame:0000000000008553                 db  0Eh
.eh_frame:0000000000008554                 db  18h
.eh_frame:0000000000008555                 db  8Eh
.eh_frame:0000000000008556                 db    3
.eh_frame:0000000000008557                 db  45h ; E
.eh_frame:0000000000008558                 db  0Eh
.eh_frame:0000000000008559                 db  20h
.eh_frame:000000000000855A                 db  8Dh
.eh_frame:000000000000855B                 db    4
.eh_frame:000000000000855C                 db  42h ; B
.eh_frame:000000000000855D                 db  0Eh
.eh_frame:000000000000855E                 db  28h ; (
.eh_frame:000000000000855F                 db  8Ch
.eh_frame:0000000000008560                 db    5
.eh_frame:0000000000008561                 db  44h ; D
.eh_frame:0000000000008562                 db  0Eh
.eh_frame:0000000000008563                 db  30h ; 0
.eh_frame:0000000000008564                 db  86h
.eh_frame:0000000000008565                 db    6
.eh_frame:0000000000008566                 db  41h ; A
.eh_frame:0000000000008567                 db  0Eh
.eh_frame:0000000000008568                 db  38h ; 8
.eh_frame:0000000000008569                 db  83h
.eh_frame:000000000000856A                 db    7
.eh_frame:000000000000856B                 db  53h ; S
.eh_frame:000000000000856C                 db  0Eh
.eh_frame:000000000000856D                 db 0F0h
.eh_frame:000000000000856E                 db    1
.eh_frame:000000000000856F                 db    3
.eh_frame:0000000000008570                 db  81h
.eh_frame:0000000000008571                 db  0Bh
.eh_frame:0000000000008572                 db  0Eh
.eh_frame:0000000000008573                 db 0F8h
.eh_frame:0000000000008574                 db    1
.eh_frame:0000000000008575                 db  4Ah ; J
.eh_frame:0000000000008576                 db  0Eh
.eh_frame:0000000000008577                 db  80h
.eh_frame:0000000000008578                 db    2
.eh_frame:0000000000008579                 db  44h ; D
.eh_frame:000000000000857A                 db  0Eh
.eh_frame:000000000000857B                 db  88h
.eh_frame:000000000000857C                 db    2
.eh_frame:000000000000857D                 db  45h ; E
.eh_frame:000000000000857E                 db  0Eh
.eh_frame:000000000000857F                 db  90h
.eh_frame:0000000000008580                 db    2
.eh_frame:0000000000008581                 db  5Fh ; _
.eh_frame:0000000000008582                 db  0Eh
.eh_frame:0000000000008583                 db 0F0h
.eh_frame:0000000000008584                 db    1
.eh_frame:0000000000008585                 db  64h ; d
.eh_frame:0000000000008586                 db  0Ah
.eh_frame:0000000000008587                 db  0Eh
.eh_frame:0000000000008588                 db  38h ; 8
.eh_frame:0000000000008589                 db  41h ; A
.eh_frame:000000000000858A                 db  0Eh
.eh_frame:000000000000858B                 db  30h ; 0
.eh_frame:000000000000858C                 db  41h ; A
.eh_frame:000000000000858D                 db  0Eh
.eh_frame:000000000000858E                 db  28h ; (
.eh_frame:000000000000858F                 db  42h ; B
.eh_frame:0000000000008590                 db  0Eh
.eh_frame:0000000000008591                 db  20h
.eh_frame:0000000000008592                 db  42h ; B
.eh_frame:0000000000008593                 db  0Eh
.eh_frame:0000000000008594                 db  18h
.eh_frame:0000000000008595                 db  42h ; B
.eh_frame:0000000000008596                 db  0Eh
.eh_frame:0000000000008597                 db  10h
.eh_frame:0000000000008598                 db  42h ; B
.eh_frame:0000000000008599                 db  0Eh
.eh_frame:000000000000859A                 db    8
.eh_frame:000000000000859B                 db  44h ; D
.eh_frame:000000000000859C                 db  0Bh
.eh_frame:000000000000859D                 db    3
.eh_frame:000000000000859E                 db  99h
.eh_frame:000000000000859F                 db    5
.eh_frame:00000000000085A0                 db  0Eh
.eh_frame:00000000000085A1                 db 0F8h
.eh_frame:00000000000085A2                 db    1
.eh_frame:00000000000085A3                 db  4Dh ; M
.eh_frame:00000000000085A4                 db  0Eh
.eh_frame:00000000000085A5                 db  80h
.eh_frame:00000000000085A6                 db    2
.eh_frame:00000000000085A7                 db  44h ; D
.eh_frame:00000000000085A8                 db  0Eh
.eh_frame:00000000000085A9                 db  88h
.eh_frame:00000000000085AA                 db    2
.eh_frame:00000000000085AB                 db  47h ; G
.eh_frame:00000000000085AC                 db  0Eh
.eh_frame:00000000000085AD                 db  90h
.eh_frame:00000000000085AE                 db    2
.eh_frame:00000000000085AF                 db  5Bh ; [
.eh_frame:00000000000085B0                 db  0Eh
.eh_frame:00000000000085B1                 db 0F0h
.eh_frame:00000000000085B2                 db    1
.eh_frame:00000000000085B3                 db    0
.eh_frame:00000000000085B4                 db  68h ; h
.eh_frame:00000000000085B5                 db    0
.eh_frame:00000000000085B6                 db    0
.eh_frame:00000000000085B7                 db    0
.eh_frame:00000000000085B8                 db    8
.eh_frame:00000000000085B9                 db    6
.eh_frame:00000000000085BA                 db    0
.eh_frame:00000000000085BB                 db    0
.eh_frame:00000000000085BC                 db  14h
.eh_frame:00000000000085BD                 db 0C5h
.eh_frame:00000000000085BE                 db 0FFh
.eh_frame:00000000000085BF                 db 0FFh
.eh_frame:00000000000085C0                 db 0ABh
.eh_frame:00000000000085C1                 db    1
.eh_frame:00000000000085C2                 db    0
.eh_frame:00000000000085C3                 db    0
.eh_frame:00000000000085C4                 db    0
.eh_frame:00000000000085C5                 db  42h ; B
.eh_frame:00000000000085C6                 db  0Eh
.eh_frame:00000000000085C7                 db  10h
.eh_frame:00000000000085C8                 db  8Fh
.eh_frame:00000000000085C9                 db    2
.eh_frame:00000000000085CA                 db  42h ; B
.eh_frame:00000000000085CB                 db  0Eh
.eh_frame:00000000000085CC                 db  18h
.eh_frame:00000000000085CD                 db  8Eh
.eh_frame:00000000000085CE                 db    3
.eh_frame:00000000000085CF                 db  45h ; E
.eh_frame:00000000000085D0                 db  0Eh
.eh_frame:00000000000085D1                 db  20h
.eh_frame:00000000000085D2                 db  8Dh
.eh_frame:00000000000085D3                 db    4
.eh_frame:00000000000085D4                 db  42h ; B
.eh_frame:00000000000085D5                 db  0Eh
.eh_frame:00000000000085D6                 db  28h ; (
.eh_frame:00000000000085D7                 db  8Ch
.eh_frame:00000000000085D8                 db    5
.eh_frame:00000000000085D9                 db  44h ; D
.eh_frame:00000000000085DA                 db  0Eh
.eh_frame:00000000000085DB                 db  30h ; 0
.eh_frame:00000000000085DC                 db  86h
.eh_frame:00000000000085DD                 db    6
.eh_frame:00000000000085DE                 db  41h ; A
.eh_frame:00000000000085DF                 db  0Eh
.eh_frame:00000000000085E0                 db  38h ; 8
.eh_frame:00000000000085E1                 db  83h
.eh_frame:00000000000085E2                 db    7
.eh_frame:00000000000085E3                 db  47h ; G
.eh_frame:00000000000085E4                 db  0Eh
.eh_frame:00000000000085E5                 db  60h ; `
.eh_frame:00000000000085E6                 db    2
.eh_frame:00000000000085E7                 db  99h
.eh_frame:00000000000085E8                 db  0Eh
.eh_frame:00000000000085E9                 db  68h ; h
.eh_frame:00000000000085EA                 db  5Fh ; _
.eh_frame:00000000000085EB                 db  0Eh
.eh_frame:00000000000085EC                 db  70h ; p
.eh_frame:00000000000085ED                 db  46h ; F
.eh_frame:00000000000085EE                 db  0Eh
.eh_frame:00000000000085EF                 db  78h ; x
.eh_frame:00000000000085F0                 db  42h ; B
.eh_frame:00000000000085F1                 db  0Eh
.eh_frame:00000000000085F2                 db  80h
.eh_frame:00000000000085F3                 db    1
.eh_frame:00000000000085F4                 db  59h ; Y
.eh_frame:00000000000085F5                 db  0Eh
.eh_frame:00000000000085F6                 db  60h ; `
.eh_frame:00000000000085F7                 db    2
.eh_frame:00000000000085F8                 db  40h ; @
.eh_frame:00000000000085F9                 db  0Eh
.eh_frame:00000000000085FA                 db  68h ; h
.eh_frame:00000000000085FB                 db  4Bh ; K
.eh_frame:00000000000085FC                 db  0Eh
.eh_frame:00000000000085FD                 db  70h ; p
.eh_frame:00000000000085FE                 db  43h ; C
.eh_frame:00000000000085FF                 db  0Eh
.eh_frame:0000000000008600                 db  78h ; x
.eh_frame:0000000000008601                 db  45h ; E
.eh_frame:0000000000008602                 db  0Eh
.eh_frame:0000000000008603                 db  80h
.eh_frame:0000000000008604                 db    1
.eh_frame:0000000000008605                 db  5Eh ; ^
.eh_frame:0000000000008606                 db  0Eh
.eh_frame:0000000000008607                 db  60h ; `
.eh_frame:0000000000008608                 db  4Ch ; L
.eh_frame:0000000000008609                 db  0Ah
.eh_frame:000000000000860A                 db  0Eh
.eh_frame:000000000000860B                 db  38h ; 8
.eh_frame:000000000000860C                 db  44h ; D
.eh_frame:000000000000860D                 db  0Eh
.eh_frame:000000000000860E                 db  30h ; 0
.eh_frame:000000000000860F                 db  41h ; A
.eh_frame:0000000000008610                 db  0Eh
.eh_frame:0000000000008611                 db  28h ; (
.eh_frame:0000000000008612                 db  42h ; B
.eh_frame:0000000000008613                 db  0Eh
.eh_frame:0000000000008614                 db  20h
.eh_frame:0000000000008615                 db  42h ; B
.eh_frame:0000000000008616                 db  0Eh
.eh_frame:0000000000008617                 db  18h
.eh_frame:0000000000008618                 db  42h ; B
.eh_frame:0000000000008619                 db  0Eh
.eh_frame:000000000000861A                 db  10h
.eh_frame:000000000000861B                 db  42h ; B
.eh_frame:000000000000861C                 db  0Eh
.eh_frame:000000000000861D                 db    8
.eh_frame:000000000000861E                 db  46h ; F
.eh_frame:000000000000861F                 db  0Bh
.eh_frame:0000000000008620                 db  28h ; (
.eh_frame:0000000000008621                 db    0
.eh_frame:0000000000008622                 db    0
.eh_frame:0000000000008623                 db    0
.eh_frame:0000000000008624                 db  74h ; t
.eh_frame:0000000000008625                 db    6
.eh_frame:0000000000008626                 db    0
.eh_frame:0000000000008627                 db    0
.eh_frame:0000000000008628                 db  58h ; X
.eh_frame:0000000000008629                 db 0C6h
.eh_frame:000000000000862A                 db 0FFh
.eh_frame:000000000000862B                 db 0FFh
.eh_frame:000000000000862C                 db  36h ; 6
.eh_frame:000000000000862D                 db    0
.eh_frame:000000000000862E                 db    0
.eh_frame:000000000000862F                 db    0
.eh_frame:0000000000008630                 db    0
.eh_frame:0000000000008631                 db  42h ; B
.eh_frame:0000000000008632                 db  0Eh
.eh_frame:0000000000008633                 db  10h
.eh_frame:0000000000008634                 db  8Ch
.eh_frame:0000000000008635                 db    2
.eh_frame:0000000000008636                 db  41h ; A
.eh_frame:0000000000008637                 db  0Eh
.eh_frame:0000000000008638                 db  18h
.eh_frame:0000000000008639                 db  86h
.eh_frame:000000000000863A                 db    3
.eh_frame:000000000000863B                 db  41h ; A
.eh_frame:000000000000863C                 db  0Eh
.eh_frame:000000000000863D                 db  20h
.eh_frame:000000000000863E                 db  83h
.eh_frame:000000000000863F                 db    4
.eh_frame:0000000000008640                 db  6Eh ; n
.eh_frame:0000000000008641                 db  0Eh
.eh_frame:0000000000008642                 db  18h
.eh_frame:0000000000008643                 db  41h ; A
.eh_frame:0000000000008644                 db  0Eh
.eh_frame:0000000000008645                 db  10h
.eh_frame:0000000000008646                 db  42h ; B
.eh_frame:0000000000008647                 db  0Eh
.eh_frame:0000000000008648                 db    8
.eh_frame:0000000000008649                 db    0
.eh_frame:000000000000864A                 db    0
.eh_frame:000000000000864B                 db    0
.eh_frame:000000000000864C                 db  10h
.eh_frame:000000000000864D                 db    0
.eh_frame:000000000000864E                 db    0
.eh_frame:000000000000864F                 db    0
.eh_frame:0000000000008650                 db 0A0h
.eh_frame:0000000000008651                 db    6
.eh_frame:0000000000008652                 db    0
.eh_frame:0000000000008653                 db    0
.eh_frame:0000000000008654                 db  6Ch ; l
.eh_frame:0000000000008655                 db 0C6h
.eh_frame:0000000000008656                 db 0FFh
.eh_frame:0000000000008657                 db 0FFh
.eh_frame:0000000000008658                 db  11h
.eh_frame:0000000000008659                 db    0
.eh_frame:000000000000865A                 db    0
.eh_frame:000000000000865B                 db    0
.eh_frame:000000000000865C                 db    0
.eh_frame:000000000000865D                 db    0
.eh_frame:000000000000865E                 db    0
.eh_frame:000000000000865F                 db    0
.eh_frame:0000000000008660                 db  10h
.eh_frame:0000000000008661                 db    0
.eh_frame:0000000000008662                 db    0
.eh_frame:0000000000008663                 db    0
.eh_frame:0000000000008664                 db 0B4h
.eh_frame:0000000000008665                 db    6
.eh_frame:0000000000008666                 db    0
.eh_frame:0000000000008667                 db    0
.eh_frame:0000000000008668                 db  78h ; x
.eh_frame:0000000000008669                 db 0C6h
.eh_frame:000000000000866A                 db 0FFh
.eh_frame:000000000000866B                 db 0FFh
.eh_frame:000000000000866C                 db  11h
.eh_frame:000000000000866D                 db    0
.eh_frame:000000000000866E                 db    0
.eh_frame:000000000000866F                 db    0
.eh_frame:0000000000008670                 db    0
.eh_frame:0000000000008671                 db    0
.eh_frame:0000000000008672                 db    0
.eh_frame:0000000000008673                 db    0
.eh_frame:0000000000008674                 db  10h
.eh_frame:0000000000008675                 db    0
.eh_frame:0000000000008676                 db    0
.eh_frame:0000000000008677                 db    0
.eh_frame:0000000000008678                 db 0C8h
.eh_frame:0000000000008679                 db    6
.eh_frame:000000000000867A                 db    0
.eh_frame:000000000000867B                 db    0
.eh_frame:000000000000867C                 db  84h
.eh_frame:000000000000867D                 db 0C6h
.eh_frame:000000000000867E                 db 0FFh
.eh_frame:000000000000867F                 db 0FFh
.eh_frame:0000000000008680                 db  35h ; 5
.eh_frame:0000000000008681                 db    0
.eh_frame:0000000000008682                 db    0
.eh_frame:0000000000008683                 db    0
.eh_frame:0000000000008684                 db    0
.eh_frame:0000000000008685                 db    0
.eh_frame:0000000000008686                 db    0
.eh_frame:0000000000008687                 db    0
.eh_frame:0000000000008688                 db  10h
.eh_frame:0000000000008689                 db    0
.eh_frame:000000000000868A                 db    0
.eh_frame:000000000000868B                 db    0
.eh_frame:000000000000868C                 db 0DCh
.eh_frame:000000000000868D                 db    6
.eh_frame:000000000000868E                 db    0
.eh_frame:000000000000868F                 db    0
.eh_frame:0000000000008690                 db 0B0h
.eh_frame:0000000000008691                 db 0C6h
.eh_frame:0000000000008692                 db 0FFh
.eh_frame:0000000000008693                 db 0FFh
.eh_frame:0000000000008694                 db  15h
.eh_frame:0000000000008695                 db    0
.eh_frame:0000000000008696                 db    0
.eh_frame:0000000000008697                 db    0
.eh_frame:0000000000008698                 db    0
.eh_frame:0000000000008699                 db    0
.eh_frame:000000000000869A                 db    0
.eh_frame:000000000000869B                 db    0
.eh_frame:000000000000869C                 db  10h
.eh_frame:000000000000869D                 db    0
.eh_frame:000000000000869E                 db    0
.eh_frame:000000000000869F                 db    0
.eh_frame:00000000000086A0                 db 0F0h
.eh_frame:00000000000086A1                 db    6
.eh_frame:00000000000086A2                 db    0
.eh_frame:00000000000086A3                 db    0
.eh_frame:00000000000086A4                 db 0BCh
.eh_frame:00000000000086A5                 db 0C6h
.eh_frame:00000000000086A6                 db 0FFh
.eh_frame:00000000000086A7                 db 0FFh
.eh_frame:00000000000086A8                 db  30h ; 0
.eh_frame:00000000000086A9                 db    0
.eh_frame:00000000000086AA                 db    0
.eh_frame:00000000000086AB                 db    0
.eh_frame:00000000000086AC                 db    0
.eh_frame:00000000000086AD                 db  6Bh ; k
.eh_frame:00000000000086AE                 db  0Eh
.eh_frame:00000000000086AF                 db  10h
.eh_frame:00000000000086B0                 db  50h ; P
.eh_frame:00000000000086B1                 db    0
.eh_frame:00000000000086B2                 db    0
.eh_frame:00000000000086B3                 db    0
.eh_frame:00000000000086B4                 db    4
.eh_frame:00000000000086B5                 db    7
.eh_frame:00000000000086B6                 db    0
.eh_frame:00000000000086B7                 db    0
.eh_frame:00000000000086B8                 db 0D8h
.eh_frame:00000000000086B9                 db 0C6h
.eh_frame:00000000000086BA                 db 0FFh
.eh_frame:00000000000086BB                 db 0FFh
.eh_frame:00000000000086BC                 db  74h ; t
.eh_frame:00000000000086BD                 db    0
.eh_frame:00000000000086BE                 db    0
.eh_frame:00000000000086BF                 db    0
.eh_frame:00000000000086C0                 db    0
.eh_frame:00000000000086C1                 db  42h ; B
.eh_frame:00000000000086C2                 db  0Eh
.eh_frame:00000000000086C3                 db  10h
.eh_frame:00000000000086C4                 db  8Fh
.eh_frame:00000000000086C5                 db    2
.eh_frame:00000000000086C6                 db  42h ; B
.eh_frame:00000000000086C7                 db  0Eh
.eh_frame:00000000000086C8                 db  18h
.eh_frame:00000000000086C9                 db  8Eh
.eh_frame:00000000000086CA                 db    3
.eh_frame:00000000000086CB                 db  49h ; I
.eh_frame:00000000000086CC                 db  0Eh
.eh_frame:00000000000086CD                 db  20h
.eh_frame:00000000000086CE                 db  8Dh
.eh_frame:00000000000086CF                 db    4
.eh_frame:00000000000086D0                 db  42h ; B
.eh_frame:00000000000086D1                 db  0Eh
.eh_frame:00000000000086D2                 db  28h ; (
.eh_frame:00000000000086D3                 db  8Ch
.eh_frame:00000000000086D4                 db    5
.eh_frame:00000000000086D5                 db  44h ; D
.eh_frame:00000000000086D6                 db  0Eh
.eh_frame:00000000000086D7                 db  30h ; 0
.eh_frame:00000000000086D8                 db  86h
.eh_frame:00000000000086D9                 db    6
.eh_frame:00000000000086DA                 db  41h ; A
.eh_frame:00000000000086DB                 db  0Eh
.eh_frame:00000000000086DC                 db  38h ; 8
.eh_frame:00000000000086DD                 db  83h
.eh_frame:00000000000086DE                 db    7
.eh_frame:00000000000086DF                 db  4Dh ; M
.eh_frame:00000000000086E0                 db  0Eh
.eh_frame:00000000000086E1                 db  50h ; P
.eh_frame:00000000000086E2                 db  5Fh ; _
.eh_frame:00000000000086E3                 db  0Eh
.eh_frame:00000000000086E4                 db  58h ; X
.eh_frame:00000000000086E5                 db  47h ; G
.eh_frame:00000000000086E6                 db  0Eh
.eh_frame:00000000000086E7                 db  60h ; `
.eh_frame:00000000000086E8                 db  46h ; F
.eh_frame:00000000000086E9                 db  0Eh
.eh_frame:00000000000086EA                 db  68h ; h
.eh_frame:00000000000086EB                 db  44h ; D
.eh_frame:00000000000086EC                 db  0Eh
.eh_frame:00000000000086ED                 db  70h ; p
.eh_frame:00000000000086EE                 db  58h ; X
.eh_frame:00000000000086EF                 db  0Eh
.eh_frame:00000000000086F0                 db  38h ; 8
.eh_frame:00000000000086F1                 db  41h ; A
.eh_frame:00000000000086F2                 db  0Eh
.eh_frame:00000000000086F3                 db  30h ; 0
.eh_frame:00000000000086F4                 db  41h ; A
.eh_frame:00000000000086F5                 db  0Eh
.eh_frame:00000000000086F6                 db  28h ; (
.eh_frame:00000000000086F7                 db  42h ; B
.eh_frame:00000000000086F8                 db  0Eh
.eh_frame:00000000000086F9                 db  20h
.eh_frame:00000000000086FA                 db  42h ; B
.eh_frame:00000000000086FB                 db  0Eh
.eh_frame:00000000000086FC                 db  18h
.eh_frame:00000000000086FD                 db  42h ; B
.eh_frame:00000000000086FE                 db  0Eh
.eh_frame:00000000000086FF                 db  10h
.eh_frame:0000000000008700                 db  42h ; B
.eh_frame:0000000000008701                 db  0Eh
.eh_frame:0000000000008702                 db    8
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db  68h ; h
.eh_frame:0000000000008705                 db    0
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  58h ; X
.eh_frame:0000000000008709                 db    7
.eh_frame:000000000000870A                 db    0
.eh_frame:000000000000870B                 db    0
.eh_frame:000000000000870C                 db    4
.eh_frame:000000000000870D                 db 0C7h
.eh_frame:000000000000870E                 db 0FFh
.eh_frame:000000000000870F                 db 0FFh
.eh_frame:0000000000008710                 db 0E3h
.eh_frame:0000000000008711                 db    0
.eh_frame:0000000000008712                 db    0
.eh_frame:0000000000008713                 db    0
.eh_frame:0000000000008714                 db    0
.eh_frame:0000000000008715                 db  42h ; B
.eh_frame:0000000000008716                 db  0Eh
.eh_frame:0000000000008717                 db  10h
.eh_frame:0000000000008718                 db  8Fh
.eh_frame:0000000000008719                 db    2
.eh_frame:000000000000871A                 db  42h ; B
.eh_frame:000000000000871B                 db  0Eh
.eh_frame:000000000000871C                 db  18h
.eh_frame:000000000000871D                 db  8Eh
.eh_frame:000000000000871E                 db    3
.eh_frame:000000000000871F                 db  49h ; I
.eh_frame:0000000000008720                 db  0Eh
.eh_frame:0000000000008721                 db  20h
.eh_frame:0000000000008722                 db  8Dh
.eh_frame:0000000000008723                 db    4
.eh_frame:0000000000008724                 db  42h ; B
.eh_frame:0000000000008725                 db  0Eh
.eh_frame:0000000000008726                 db  28h ; (
.eh_frame:0000000000008727                 db  8Ch
.eh_frame:0000000000008728                 db    5
.eh_frame:0000000000008729                 db  44h ; D
.eh_frame:000000000000872A                 db  0Eh
.eh_frame:000000000000872B                 db  30h ; 0
.eh_frame:000000000000872C                 db  86h
.eh_frame:000000000000872D                 db    6
.eh_frame:000000000000872E                 db  41h ; A
.eh_frame:000000000000872F                 db  0Eh
.eh_frame:0000000000008730                 db  38h ; 8
.eh_frame:0000000000008731                 db  83h
.eh_frame:0000000000008732                 db    7
.eh_frame:0000000000008733                 db  4Dh ; M
.eh_frame:0000000000008734                 db  0Eh
.eh_frame:0000000000008735                 db  70h ; p
.eh_frame:0000000000008736                 db  65h ; e
.eh_frame:0000000000008737                 db  0Eh
.eh_frame:0000000000008738                 db  78h ; x
.eh_frame:0000000000008739                 db  4Dh ; M
.eh_frame:000000000000873A                 db  0Eh
.eh_frame:000000000000873B                 db  80h
.eh_frame:000000000000873C                 db    1
.eh_frame:000000000000873D                 db  46h ; F
.eh_frame:000000000000873E                 db  0Eh
.eh_frame:000000000000873F                 db  88h
.eh_frame:0000000000008740                 db    1
.eh_frame:0000000000008741                 db  42h ; B
.eh_frame:0000000000008742                 db  0Eh
.eh_frame:0000000000008743                 db  90h
.eh_frame:0000000000008744                 db    1
.eh_frame:0000000000008745                 db  5Eh ; ^
.eh_frame:0000000000008746                 db  0Eh
.eh_frame:0000000000008747                 db  70h ; p
.eh_frame:0000000000008748                 db  56h ; V
.eh_frame:0000000000008749                 db  0Eh
.eh_frame:000000000000874A                 db  78h ; x
.eh_frame:000000000000874B                 db  43h ; C
.eh_frame:000000000000874C                 db  0Eh
.eh_frame:000000000000874D                 db  80h
.eh_frame:000000000000874E                 db    1
.eh_frame:000000000000874F                 db  43h ; C
.eh_frame:0000000000008750                 db  0Eh
.eh_frame:0000000000008751                 db  88h
.eh_frame:0000000000008752                 db    1
.eh_frame:0000000000008753                 db  56h ; V
.eh_frame:0000000000008754                 db  0Eh
.eh_frame:0000000000008755                 db  90h
.eh_frame:0000000000008756                 db    1
.eh_frame:0000000000008757                 db  52h ; R
.eh_frame:0000000000008758                 db  0Eh
.eh_frame:0000000000008759                 db  70h ; p
.eh_frame:000000000000875A                 db  5Bh ; [
.eh_frame:000000000000875B                 db  0Eh
.eh_frame:000000000000875C                 db  38h ; 8
.eh_frame:000000000000875D                 db  41h ; A
.eh_frame:000000000000875E                 db  0Eh
.eh_frame:000000000000875F                 db  30h ; 0
.eh_frame:0000000000008760                 db  41h ; A
.eh_frame:0000000000008761                 db  0Eh
.eh_frame:0000000000008762                 db  28h ; (
.eh_frame:0000000000008763                 db  42h ; B
.eh_frame:0000000000008764                 db  0Eh
.eh_frame:0000000000008765                 db  20h
.eh_frame:0000000000008766                 db  42h ; B
.eh_frame:0000000000008767                 db  0Eh
.eh_frame:0000000000008768                 db  18h
.eh_frame:0000000000008769                 db  42h ; B
.eh_frame:000000000000876A                 db  0Eh
.eh_frame:000000000000876B                 db  10h
.eh_frame:000000000000876C                 db  42h ; B
.eh_frame:000000000000876D                 db  0Eh
.eh_frame:000000000000876E                 db    8
.eh_frame:000000000000876F                 db    0
.eh_frame:0000000000008770                 db  10h
.eh_frame:0000000000008771                 db    0
.eh_frame:0000000000008772                 db    0
.eh_frame:0000000000008773                 db    0
.eh_frame:0000000000008774                 db 0C4h
.eh_frame:0000000000008775                 db    7
.eh_frame:0000000000008776                 db    0
.eh_frame:0000000000008777                 db    0
.eh_frame:0000000000008778                 db  88h
.eh_frame:0000000000008779                 db 0C7h
.eh_frame:000000000000877A                 db 0FFh
.eh_frame:000000000000877B                 db 0FFh
.eh_frame:000000000000877C                 db  0Ah
.eh_frame:000000000000877D                 db    0
.eh_frame:000000000000877E                 db    0
.eh_frame:000000000000877F                 db    0
.eh_frame:0000000000008780                 db    0
.eh_frame:0000000000008781                 db    0
.eh_frame:0000000000008782                 db    0
.eh_frame:0000000000008783                 db    0
.eh_frame:0000000000008784                 db  28h ; (
.eh_frame:0000000000008785                 db    0
.eh_frame:0000000000008786                 db    0
.eh_frame:0000000000008787                 db    0
.eh_frame:0000000000008788                 db 0D8h
.eh_frame:0000000000008789                 db    7
.eh_frame:000000000000878A                 db    0
.eh_frame:000000000000878B                 db    0
.eh_frame:000000000000878C                 db  84h
.eh_frame:000000000000878D                 db 0C7h
.eh_frame:000000000000878E                 db 0FFh
.eh_frame:000000000000878F                 db 0FFh
.eh_frame:0000000000008790                 db  93h
.eh_frame:0000000000008791                 db    0
.eh_frame:0000000000008792                 db    0
.eh_frame:0000000000008793                 db    0
.eh_frame:0000000000008794                 db    0
.eh_frame:0000000000008795                 db  48h ; H
.eh_frame:0000000000008796                 db  0Eh
.eh_frame:0000000000008797                 db  10h
.eh_frame:0000000000008798                 db  8Ch
.eh_frame:0000000000008799                 db    2
.eh_frame:000000000000879A                 db  48h ; H
.eh_frame:000000000000879B                 db  0Eh
.eh_frame:000000000000879C                 db  18h
.eh_frame:000000000000879D                 db  86h
.eh_frame:000000000000879E                 db    3
.eh_frame:000000000000879F                 db  41h ; A
.eh_frame:00000000000087A0                 db  0Eh
.eh_frame:00000000000087A1                 db  20h
.eh_frame:00000000000087A2                 db  83h
.eh_frame:00000000000087A3                 db    4
.eh_frame:00000000000087A4                 db    2
.eh_frame:00000000000087A5                 db  74h ; t
.eh_frame:00000000000087A6                 db  0Eh
.eh_frame:00000000000087A7                 db  18h
.eh_frame:00000000000087A8                 db  4Bh ; K
.eh_frame:00000000000087A9                 db  0Eh
.eh_frame:00000000000087AA                 db  10h
.eh_frame:00000000000087AB                 db  42h ; B
.eh_frame:00000000000087AC                 db  0Eh
.eh_frame:00000000000087AD                 db    8
.eh_frame:00000000000087AE                 db    0
.eh_frame:00000000000087AF                 db    0
.eh_frame:00000000000087B0                 db  10h
.eh_frame:00000000000087B1                 db    0
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db    4
.eh_frame:00000000000087B5                 db    8
.eh_frame:00000000000087B6                 db    0
.eh_frame:00000000000087B7                 db    0
.eh_frame:00000000000087B8                 db 0F8h
.eh_frame:00000000000087B9                 db 0C7h
.eh_frame:00000000000087BA                 db 0FFh
.eh_frame:00000000000087BB                 db 0FFh
.eh_frame:00000000000087BC                 db  13h
.eh_frame:00000000000087BD                 db    0
.eh_frame:00000000000087BE                 db    0
.eh_frame:00000000000087BF                 db    0
.eh_frame:00000000000087C0                 db    0
.eh_frame:00000000000087C1                 db    0
.eh_frame:00000000000087C2                 db    0
.eh_frame:00000000000087C3                 db    0
.eh_frame:00000000000087C4                 db  10h
.eh_frame:00000000000087C5                 db    0
.eh_frame:00000000000087C6                 db    0
.eh_frame:00000000000087C7                 db    0
.eh_frame:00000000000087C8                 db  18h
.eh_frame:00000000000087C9                 db    8
.eh_frame:00000000000087CA                 db    0
.eh_frame:00000000000087CB                 db    0
.eh_frame:00000000000087CC                 db    4
.eh_frame:00000000000087CD                 db 0C8h
.eh_frame:00000000000087CE                 db 0FFh
.eh_frame:00000000000087CF                 db 0FFh
.eh_frame:00000000000087D0                 db  0Ch
.eh_frame:00000000000087D1                 db    0
.eh_frame:00000000000087D2                 db    0
.eh_frame:00000000000087D3                 db    0
.eh_frame:00000000000087D4                 db    0
.eh_frame:00000000000087D5                 db    0
.eh_frame:00000000000087D6                 db    0
.eh_frame:00000000000087D7                 db    0
.eh_frame:00000000000087D8                 db  10h
.eh_frame:00000000000087D9                 db    0
.eh_frame:00000000000087DA                 db    0
.eh_frame:00000000000087DB                 db    0
.eh_frame:00000000000087DC                 db  2Ch ; ,
.eh_frame:00000000000087DD                 db    8
.eh_frame:00000000000087DE                 db    0
.eh_frame:00000000000087DF                 db    0
.eh_frame:00000000000087E0                 db    0
.eh_frame:00000000000087E1                 db 0C8h
.eh_frame:00000000000087E2                 db 0FFh
.eh_frame:00000000000087E3                 db 0FFh
.eh_frame:00000000000087E4                 db  18h
.eh_frame:00000000000087E5                 db    0
.eh_frame:00000000000087E6                 db    0
.eh_frame:00000000000087E7                 db    0
.eh_frame:00000000000087E8                 db    0
.eh_frame:00000000000087E9                 db    0
.eh_frame:00000000000087EA                 db    0
.eh_frame:00000000000087EB                 db    0
.eh_frame:00000000000087EC                 db  10h
.eh_frame:00000000000087ED                 db    0
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db  40h ; @
.eh_frame:00000000000087F1                 db    8
.eh_frame:00000000000087F2                 db    0
.eh_frame:00000000000087F3                 db    0
.eh_frame:00000000000087F4                 db  0Ch
.eh_frame:00000000000087F5                 db 0C8h
.eh_frame:00000000000087F6                 db 0FFh
.eh_frame:00000000000087F7                 db 0FFh
.eh_frame:00000000000087F8                 db  14h
.eh_frame:00000000000087F9                 db    0
.eh_frame:00000000000087FA                 db    0
.eh_frame:00000000000087FB                 db    0
.eh_frame:00000000000087FC                 db    0
.eh_frame:00000000000087FD                 db    0
.eh_frame:00000000000087FE                 db    0
.eh_frame:00000000000087FF                 db    0
.eh_frame:0000000000008800                 db  18h
.eh_frame:0000000000008801                 db    0
.eh_frame:0000000000008802                 db    0
.eh_frame:0000000000008803                 db    0
.eh_frame:0000000000008804                 db  54h ; T
.eh_frame:0000000000008805                 db    8
.eh_frame:0000000000008806                 db    0
.eh_frame:0000000000008807                 db    0
.eh_frame:0000000000008808                 db  18h
.eh_frame:0000000000008809                 db 0C8h
.eh_frame:000000000000880A                 db 0FFh
.eh_frame:000000000000880B                 db 0FFh
.eh_frame:000000000000880C                 db  8Eh
.eh_frame:000000000000880D                 db    0
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db    0
.eh_frame:0000000000008811                 db  44h ; D
.eh_frame:0000000000008812                 db  0Eh
.eh_frame:0000000000008813                 db  50h ; P
.eh_frame:0000000000008814                 db    2
.eh_frame:0000000000008815                 db  7Fh ; 
.eh_frame:0000000000008816                 db  0Ah
.eh_frame:0000000000008817                 db  0Eh
.eh_frame:0000000000008818                 db    8
.eh_frame:0000000000008819                 db  41h ; A
.eh_frame:000000000000881A                 db  0Bh
.eh_frame:000000000000881B                 db    0
.eh_frame:000000000000881C                 db  18h
.eh_frame:000000000000881D                 db    0
.eh_frame:000000000000881E                 db    0
.eh_frame:000000000000881F                 db    0
.eh_frame:0000000000008820                 db  70h ; p
.eh_frame:0000000000008821                 db    8
.eh_frame:0000000000008822                 db    0
.eh_frame:0000000000008823                 db    0
.eh_frame:0000000000008824                 db  8Ch
.eh_frame:0000000000008825                 db 0C8h
.eh_frame:0000000000008826                 db 0FFh
.eh_frame:0000000000008827                 db 0FFh
.eh_frame:0000000000008828                 db  8Ah
.eh_frame:0000000000008829                 db    0
.eh_frame:000000000000882A                 db    0
.eh_frame:000000000000882B                 db    0
.eh_frame:000000000000882C                 db    0
.eh_frame:000000000000882D                 db  44h ; D
.eh_frame:000000000000882E                 db  0Eh
.eh_frame:000000000000882F                 db  50h ; P
.eh_frame:0000000000008830                 db    2
.eh_frame:0000000000008831                 db  7Bh ; {
.eh_frame:0000000000008832                 db  0Ah
.eh_frame:0000000000008833                 db  0Eh
.eh_frame:0000000000008834                 db    8
.eh_frame:0000000000008835                 db  41h ; A
.eh_frame:0000000000008836                 db  0Bh
.eh_frame:0000000000008837                 db    0
.eh_frame:0000000000008838                 db  10h
.eh_frame:0000000000008839                 db    0
.eh_frame:000000000000883A                 db    0
.eh_frame:000000000000883B                 db    0
.eh_frame:000000000000883C                 db  8Ch
.eh_frame:000000000000883D                 db    8
.eh_frame:000000000000883E                 db    0
.eh_frame:000000000000883F                 db    0
.eh_frame:0000000000008840                 db    0
.eh_frame:0000000000008841                 db 0C9h
.eh_frame:0000000000008842                 db 0FFh
.eh_frame:0000000000008843                 db 0FFh
.eh_frame:0000000000008844                 db  0Ch
.eh_frame:0000000000008845                 db    0
.eh_frame:0000000000008846                 db    0
.eh_frame:0000000000008847                 db    0
.eh_frame:0000000000008848                 db    0
.eh_frame:0000000000008849                 db    0
.eh_frame:000000000000884A                 db    0
.eh_frame:000000000000884B                 db    0
.eh_frame:000000000000884C                 db  10h
.eh_frame:000000000000884D                 db    0
.eh_frame:000000000000884E                 db    0
.eh_frame:000000000000884F                 db    0
.eh_frame:0000000000008850                 db 0A0h
.eh_frame:0000000000008851                 db    8
.eh_frame:0000000000008852                 db    0
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db 0FCh
.eh_frame:0000000000008855                 db 0C8h
.eh_frame:0000000000008856                 db 0FFh
.eh_frame:0000000000008857                 db 0FFh
.eh_frame:0000000000008858                 db  0Fh
.eh_frame:0000000000008859                 db    0
.eh_frame:000000000000885A                 db    0
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db    0
.eh_frame:000000000000885D                 db    0
.eh_frame:000000000000885E                 db    0
.eh_frame:000000000000885F                 db    0
.eh_frame:0000000000008860                 db  18h
.eh_frame:0000000000008861                 db    0
.eh_frame:0000000000008862                 db    0
.eh_frame:0000000000008863                 db    0
.eh_frame:0000000000008864                 db 0B4h
.eh_frame:0000000000008865                 db    8
.eh_frame:0000000000008866                 db    0
.eh_frame:0000000000008867                 db    0
.eh_frame:0000000000008868                 db 0F8h
.eh_frame:0000000000008869                 db 0C8h
.eh_frame:000000000000886A                 db 0FFh
.eh_frame:000000000000886B                 db 0FFh
.eh_frame:000000000000886C                 db  98h
.eh_frame:000000000000886D                 db    0
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db    0
.eh_frame:0000000000008871                 db  44h ; D
.eh_frame:0000000000008872                 db  0Eh
.eh_frame:0000000000008873                 db  50h ; P
.eh_frame:0000000000008874                 db    2
.eh_frame:0000000000008875                 db  8Eh
.eh_frame:0000000000008876                 db  0Ah
.eh_frame:0000000000008877                 db  0Eh
.eh_frame:0000000000008878                 db    8
.eh_frame:0000000000008879                 db  41h ; A
.eh_frame:000000000000887A                 db  0Bh
.eh_frame:000000000000887B                 db    0
.eh_frame:000000000000887C                 db  10h
.eh_frame:000000000000887D                 db    0
.eh_frame:000000000000887E                 db    0
.eh_frame:000000000000887F                 db    0
.eh_frame:0000000000008880                 db 0D0h
.eh_frame:0000000000008881                 db    8
.eh_frame:0000000000008882                 db    0
.eh_frame:0000000000008883                 db    0
.eh_frame:0000000000008884                 db  7Ch ; |
.eh_frame:0000000000008885                 db 0C9h
.eh_frame:0000000000008886                 db 0FFh
.eh_frame:0000000000008887                 db 0FFh
.eh_frame:0000000000008888                 db  10h
.eh_frame:0000000000008889                 db    0
.eh_frame:000000000000888A                 db    0
.eh_frame:000000000000888B                 db    0
.eh_frame:000000000000888C                 db    0
.eh_frame:000000000000888D                 db    0
.eh_frame:000000000000888E                 db    0
.eh_frame:000000000000888F                 db    0
.eh_frame:0000000000008890                 db  10h
.eh_frame:0000000000008891                 db    0
.eh_frame:0000000000008892                 db    0
.eh_frame:0000000000008893                 db    0
.eh_frame:0000000000008894                 db 0E4h
.eh_frame:0000000000008895                 db    8
.eh_frame:0000000000008896                 db    0
.eh_frame:0000000000008897                 db    0
.eh_frame:0000000000008898                 db  78h ; x
.eh_frame:0000000000008899                 db 0C9h
.eh_frame:000000000000889A                 db 0FFh
.eh_frame:000000000000889B                 db 0FFh
.eh_frame:000000000000889C                 db  11h
.eh_frame:000000000000889D                 db    0
.eh_frame:000000000000889E                 db    0
.eh_frame:000000000000889F                 db    0
.eh_frame:00000000000088A0                 db    0
.eh_frame:00000000000088A1                 db    0
.eh_frame:00000000000088A2                 db    0
.eh_frame:00000000000088A3                 db    0
.eh_frame:00000000000088A4                 db  10h
.eh_frame:00000000000088A5                 db    0
.eh_frame:00000000000088A6                 db    0
.eh_frame:00000000000088A7                 db    0
.eh_frame:00000000000088A8                 db 0F8h
.eh_frame:00000000000088A9                 db    8
.eh_frame:00000000000088AA                 db    0
.eh_frame:00000000000088AB                 db    0
.eh_frame:00000000000088AC                 db  84h
.eh_frame:00000000000088AD                 db 0C9h
.eh_frame:00000000000088AE                 db 0FFh
.eh_frame:00000000000088AF                 db 0FFh
.eh_frame:00000000000088B0                 db  0Ah
.eh_frame:00000000000088B1                 db    0
.eh_frame:00000000000088B2                 db    0
.eh_frame:00000000000088B3                 db    0
.eh_frame:00000000000088B4                 db    0
.eh_frame:00000000000088B5                 db    0
.eh_frame:00000000000088B6                 db    0
.eh_frame:00000000000088B7                 db    0
.eh_frame:00000000000088B8                 db  18h
.eh_frame:00000000000088B9                 db    0
.eh_frame:00000000000088BA                 db    0
.eh_frame:00000000000088BB                 db    0
.eh_frame:00000000000088BC                 db  0Ch
.eh_frame:00000000000088BD                 db    9
.eh_frame:00000000000088BE                 db    0
.eh_frame:00000000000088BF                 db    0
.eh_frame:00000000000088C0                 db  80h
.eh_frame:00000000000088C1                 db 0C9h
.eh_frame:00000000000088C2                 db 0FFh
.eh_frame:00000000000088C3                 db 0FFh
.eh_frame:00000000000088C4                 db  8Eh
.eh_frame:00000000000088C5                 db    0
.eh_frame:00000000000088C6                 db    0
.eh_frame:00000000000088C7                 db    0
.eh_frame:00000000000088C8                 db    0
.eh_frame:00000000000088C9                 db  44h ; D
.eh_frame:00000000000088CA                 db  0Eh
.eh_frame:00000000000088CB                 db  50h ; P
.eh_frame:00000000000088CC                 db    2
.eh_frame:00000000000088CD                 db  7Fh ; 
.eh_frame:00000000000088CE                 db  0Ah
.eh_frame:00000000000088CF                 db  0Eh
.eh_frame:00000000000088D0                 db    8
.eh_frame:00000000000088D1                 db  41h ; A
.eh_frame:00000000000088D2                 db  0Bh
.eh_frame:00000000000088D3                 db    0
.eh_frame:00000000000088D4                 db  18h
.eh_frame:00000000000088D5                 db    0
.eh_frame:00000000000088D6                 db    0
.eh_frame:00000000000088D7                 db    0
.eh_frame:00000000000088D8                 db  28h ; (
.eh_frame:00000000000088D9                 db    9
.eh_frame:00000000000088DA                 db    0
.eh_frame:00000000000088DB                 db    0
.eh_frame:00000000000088DC                 db 0F4h
.eh_frame:00000000000088DD                 db 0C9h
.eh_frame:00000000000088DE                 db 0FFh
.eh_frame:00000000000088DF                 db 0FFh
.eh_frame:00000000000088E0                 db  91h
.eh_frame:00000000000088E1                 db    0
.eh_frame:00000000000088E2                 db    0
.eh_frame:00000000000088E3                 db    0
.eh_frame:00000000000088E4                 db    0
.eh_frame:00000000000088E5                 db  44h ; D
.eh_frame:00000000000088E6                 db  0Eh
.eh_frame:00000000000088E7                 db  50h ; P
.eh_frame:00000000000088E8                 db    2
.eh_frame:00000000000088E9                 db  82h
.eh_frame:00000000000088EA                 db  0Ah
.eh_frame:00000000000088EB                 db  0Eh
.eh_frame:00000000000088EC                 db    8
.eh_frame:00000000000088ED                 db  41h ; A
.eh_frame:00000000000088EE                 db  0Bh
.eh_frame:00000000000088EF                 db    0
.eh_frame:00000000000088F0                 db  10h
.eh_frame:00000000000088F1                 db    0
.eh_frame:00000000000088F2                 db    0
.eh_frame:00000000000088F3                 db    0
.eh_frame:00000000000088F4                 db  44h ; D
.eh_frame:00000000000088F5                 db    9
.eh_frame:00000000000088F6                 db    0
.eh_frame:00000000000088F7                 db    0
.eh_frame:00000000000088F8                 db  78h ; x
.eh_frame:00000000000088F9                 db 0CAh
.eh_frame:00000000000088FA                 db 0FFh
.eh_frame:00000000000088FB                 db 0FFh
.eh_frame:00000000000088FC                 db  0Ch
.eh_frame:00000000000088FD                 db    0
.eh_frame:00000000000088FE                 db    0
.eh_frame:00000000000088FF                 db    0
.eh_frame:0000000000008900                 db    0
.eh_frame:0000000000008901                 db    0
.eh_frame:0000000000008902                 db    0
.eh_frame:0000000000008903                 db    0
.eh_frame:0000000000008904                 db  10h
.eh_frame:0000000000008905                 db    0
.eh_frame:0000000000008906                 db    0
.eh_frame:0000000000008907                 db    0
.eh_frame:0000000000008908                 db  58h ; X
.eh_frame:0000000000008909                 db    9
.eh_frame:000000000000890A                 db    0
.eh_frame:000000000000890B                 db    0
.eh_frame:000000000000890C                 db  74h ; t
.eh_frame:000000000000890D                 db 0CAh
.eh_frame:000000000000890E                 db 0FFh
.eh_frame:000000000000890F                 db 0FFh
.eh_frame:0000000000008910                 db  17h
.eh_frame:0000000000008911                 db    0
.eh_frame:0000000000008912                 db    0
.eh_frame:0000000000008913                 db    0
.eh_frame:0000000000008914                 db    0
.eh_frame:0000000000008915                 db    0
.eh_frame:0000000000008916                 db    0
.eh_frame:0000000000008917                 db    0
.eh_frame:0000000000008918                 db  10h
.eh_frame:0000000000008919                 db    0
.eh_frame:000000000000891A                 db    0
.eh_frame:000000000000891B                 db    0
.eh_frame:000000000000891C                 db  6Ch ; l
.eh_frame:000000000000891D                 db    9
.eh_frame:000000000000891E                 db    0
.eh_frame:000000000000891F                 db    0
.eh_frame:0000000000008920                 db  80h
.eh_frame:0000000000008921                 db 0CAh
.eh_frame:0000000000008922                 db 0FFh
.eh_frame:0000000000008923                 db 0FFh
.eh_frame:0000000000008924                 db  13h
.eh_frame:0000000000008925                 db    0
.eh_frame:0000000000008926                 db    0
.eh_frame:0000000000008927                 db    0
.eh_frame:0000000000008928                 db    0
.eh_frame:0000000000008929                 db    0
.eh_frame:000000000000892A                 db    0
.eh_frame:000000000000892B                 db    0
.eh_frame:000000000000892C                 db  10h
.eh_frame:000000000000892D                 db    0
.eh_frame:000000000000892E                 db    0
.eh_frame:000000000000892F                 db    0
.eh_frame:0000000000008930                 db  80h
.eh_frame:0000000000008931                 db    9
.eh_frame:0000000000008932                 db    0
.eh_frame:0000000000008933                 db    0
.eh_frame:0000000000008934                 db  8Ch
.eh_frame:0000000000008935                 db 0CAh
.eh_frame:0000000000008936                 db 0FFh
.eh_frame:0000000000008937                 db 0FFh
.eh_frame:0000000000008938                 db  0Ch
.eh_frame:0000000000008939                 db    0
.eh_frame:000000000000893A                 db    0
.eh_frame:000000000000893B                 db    0
.eh_frame:000000000000893C                 db    0
.eh_frame:000000000000893D                 db    0
.eh_frame:000000000000893E                 db    0
.eh_frame:000000000000893F                 db    0
.eh_frame:0000000000008940                 db  10h
.eh_frame:0000000000008941                 db    0
.eh_frame:0000000000008942                 db    0
.eh_frame:0000000000008943                 db    0
.eh_frame:0000000000008944                 db  94h
.eh_frame:0000000000008945                 db    9
.eh_frame:0000000000008946                 db    0
.eh_frame:0000000000008947                 db    0
.eh_frame:0000000000008948                 db  88h
.eh_frame:0000000000008949                 db 0CAh
.eh_frame:000000000000894A                 db 0FFh
.eh_frame:000000000000894B                 db 0FFh
.eh_frame:000000000000894C                 db  14h
.eh_frame:000000000000894D                 db    0
.eh_frame:000000000000894E                 db    0
.eh_frame:000000000000894F                 db    0
.eh_frame:0000000000008950                 db    0
.eh_frame:0000000000008951                 db    0
.eh_frame:0000000000008952                 db    0
.eh_frame:0000000000008953                 db    0
.eh_frame:0000000000008954                 db  10h
.eh_frame:0000000000008955                 db    0
.eh_frame:0000000000008956                 db    0
.eh_frame:0000000000008957                 db    0
.eh_frame:0000000000008958                 db 0A8h
.eh_frame:0000000000008959                 db    9
.eh_frame:000000000000895A                 db    0
.eh_frame:000000000000895B                 db    0
.eh_frame:000000000000895C                 db  94h
.eh_frame:000000000000895D                 db 0CAh
.eh_frame:000000000000895E                 db 0FFh
.eh_frame:000000000000895F                 db 0FFh
.eh_frame:0000000000008960                 db  13h
.eh_frame:0000000000008961                 db    0
.eh_frame:0000000000008962                 db    0
.eh_frame:0000000000008963                 db    0
.eh_frame:0000000000008964                 db    0
.eh_frame:0000000000008965                 db    0
.eh_frame:0000000000008966                 db    0
.eh_frame:0000000000008967                 db    0
.eh_frame:0000000000008968                 db  14h
.eh_frame:0000000000008969                 db    0
.eh_frame:000000000000896A                 db    0
.eh_frame:000000000000896B                 db    0
.eh_frame:000000000000896C                 db 0BCh
.eh_frame:000000000000896D                 db    9
.eh_frame:000000000000896E                 db    0
.eh_frame:000000000000896F                 db    0
.eh_frame:0000000000008970                 db 0A0h
.eh_frame:0000000000008971                 db 0CAh
.eh_frame:0000000000008972                 db 0FFh
.eh_frame:0000000000008973                 db 0FFh
.eh_frame:0000000000008974                 db  18h
.eh_frame:0000000000008975                 db    0
.eh_frame:0000000000008976                 db    0
.eh_frame:0000000000008977                 db    0
.eh_frame:0000000000008978                 db    0
.eh_frame:0000000000008979                 db    0
.eh_frame:000000000000897A                 db    0
.eh_frame:000000000000897B                 db    0
.eh_frame:000000000000897C                 db    0
.eh_frame:000000000000897D                 db    0
.eh_frame:000000000000897E                 db    0
.eh_frame:000000000000897F                 db    0
.eh_frame:0000000000008980                 db  10h
.eh_frame:0000000000008981                 db    1
.eh_frame:0000000000008982                 db    0
.eh_frame:0000000000008983                 db    0
.eh_frame:0000000000008984                 db 0D4h
.eh_frame:0000000000008985                 db    9
.eh_frame:0000000000008986                 db    0
.eh_frame:0000000000008987                 db    0
.eh_frame:0000000000008988                 db 0A8h
.eh_frame:0000000000008989                 db 0CAh
.eh_frame:000000000000898A                 db 0FFh
.eh_frame:000000000000898B                 db 0FFh
.eh_frame:000000000000898C                 db  17h
.eh_frame:000000000000898D                 db    4
.eh_frame:000000000000898E                 db    0
.eh_frame:000000000000898F                 db    0
.eh_frame:0000000000008990                 db    0
.eh_frame:0000000000008991                 db  42h ; B
.eh_frame:0000000000008992                 db  0Eh
.eh_frame:0000000000008993                 db  10h
.eh_frame:0000000000008994                 db  8Fh
.eh_frame:0000000000008995                 db    2
.eh_frame:0000000000008996                 db  42h ; B
.eh_frame:0000000000008997                 db  0Eh
.eh_frame:0000000000008998                 db  18h
.eh_frame:0000000000008999                 db  8Eh
.eh_frame:000000000000899A                 db    3
.eh_frame:000000000000899B                 db  42h ; B
.eh_frame:000000000000899C                 db  0Eh
.eh_frame:000000000000899D                 db  20h
.eh_frame:000000000000899E                 db  8Dh
.eh_frame:000000000000899F                 db    4
.eh_frame:00000000000089A0                 db  42h ; B
.eh_frame:00000000000089A1                 db  0Eh
.eh_frame:00000000000089A2                 db  28h ; (
.eh_frame:00000000000089A3                 db  8Ch
.eh_frame:00000000000089A4                 db    5
.eh_frame:00000000000089A5                 db  44h ; D
.eh_frame:00000000000089A6                 db  0Eh
.eh_frame:00000000000089A7                 db  30h ; 0
.eh_frame:00000000000089A8                 db  86h
.eh_frame:00000000000089A9                 db    6
.eh_frame:00000000000089AA                 db  41h ; A
.eh_frame:00000000000089AB                 db  0Eh
.eh_frame:00000000000089AC                 db  38h ; 8
.eh_frame:00000000000089AD                 db  83h
.eh_frame:00000000000089AE                 db    7
.eh_frame:00000000000089AF                 db  4Ah ; J
.eh_frame:00000000000089B0                 db  0Eh
.eh_frame:00000000000089B1                 db  60h ; `
.eh_frame:00000000000089B2                 db    2
.eh_frame:00000000000089B3                 db 0DDh
.eh_frame:00000000000089B4                 db  0Eh
.eh_frame:00000000000089B5                 db  68h ; h
.eh_frame:00000000000089B6                 db  57h ; W
.eh_frame:00000000000089B7                 db  0Eh
.eh_frame:00000000000089B8                 db  70h ; p
.eh_frame:00000000000089B9                 db  42h ; B
.eh_frame:00000000000089BA                 db  0Eh
.eh_frame:00000000000089BB                 db  78h ; x
.eh_frame:00000000000089BC                 db  42h ; B
.eh_frame:00000000000089BD                 db  0Eh
.eh_frame:00000000000089BE                 db  80h
.eh_frame:00000000000089BF                 db    1
.eh_frame:00000000000089C0                 db  42h ; B
.eh_frame:00000000000089C1                 db  0Eh
.eh_frame:00000000000089C2                 db  88h
.eh_frame:00000000000089C3                 db    1
.eh_frame:00000000000089C4                 db  42h ; B
.eh_frame:00000000000089C5                 db  0Eh
.eh_frame:00000000000089C6                 db  90h
.eh_frame:00000000000089C7                 db    1
.eh_frame:00000000000089C8                 db  53h ; S
.eh_frame:00000000000089C9                 db  0Eh
.eh_frame:00000000000089CA                 db  60h ; `
.eh_frame:00000000000089CB                 db  44h ; D
.eh_frame:00000000000089CC                 db  0Ah
.eh_frame:00000000000089CD                 db  0Eh
.eh_frame:00000000000089CE                 db  38h ; 8
.eh_frame:00000000000089CF                 db  41h ; A
.eh_frame:00000000000089D0                 db  0Eh
.eh_frame:00000000000089D1                 db  30h ; 0
.eh_frame:00000000000089D2                 db  41h ; A
.eh_frame:00000000000089D3                 db  0Eh
.eh_frame:00000000000089D4                 db  28h ; (
.eh_frame:00000000000089D5                 db  42h ; B
.eh_frame:00000000000089D6                 db  0Eh
.eh_frame:00000000000089D7                 db  20h
.eh_frame:00000000000089D8                 db  42h ; B
.eh_frame:00000000000089D9                 db  0Eh
.eh_frame:00000000000089DA                 db  18h
.eh_frame:00000000000089DB                 db  42h ; B
.eh_frame:00000000000089DC                 db  0Eh
.eh_frame:00000000000089DD                 db  10h
.eh_frame:00000000000089DE                 db  42h ; B
.eh_frame:00000000000089DF                 db  0Eh
.eh_frame:00000000000089E0                 db    8
.eh_frame:00000000000089E1                 db  44h ; D
.eh_frame:00000000000089E2                 db  0Bh
.eh_frame:00000000000089E3                 db    2
.eh_frame:00000000000089E4                 db  78h ; x
.eh_frame:00000000000089E5                 db  0Ah
.eh_frame:00000000000089E6                 db  0Eh
.eh_frame:00000000000089E7                 db  68h ; h
.eh_frame:00000000000089E8                 db  48h ; H
.eh_frame:00000000000089E9                 db  0Bh
.eh_frame:00000000000089EA                 db  5Ah ; Z
.eh_frame:00000000000089EB                 db  0Ah
.eh_frame:00000000000089EC                 db  0Eh
.eh_frame:00000000000089ED                 db  38h ; 8
.eh_frame:00000000000089EE                 db  47h ; G
.eh_frame:00000000000089EF                 db  0Eh
.eh_frame:00000000000089F0                 db  30h ; 0
.eh_frame:00000000000089F1                 db  41h ; A
.eh_frame:00000000000089F2                 db  0Eh
.eh_frame:00000000000089F3                 db  28h ; (
.eh_frame:00000000000089F4                 db  42h ; B
.eh_frame:00000000000089F5                 db  0Eh
.eh_frame:00000000000089F6                 db  20h
.eh_frame:00000000000089F7                 db  42h ; B
.eh_frame:00000000000089F8                 db  0Eh
.eh_frame:00000000000089F9                 db  18h
.eh_frame:00000000000089FA                 db  42h ; B
.eh_frame:00000000000089FB                 db  0Eh
.eh_frame:00000000000089FC                 db  10h
.eh_frame:00000000000089FD                 db  42h ; B
.eh_frame:00000000000089FE                 db  0Eh
.eh_frame:00000000000089FF                 db    8
.eh_frame:0000000000008A00                 db  56h ; V
.eh_frame:0000000000008A01                 db  0Bh
.eh_frame:0000000000008A02                 db  5Eh ; ^
.eh_frame:0000000000008A03                 db  0Ah
.eh_frame:0000000000008A04                 db  0Eh
.eh_frame:0000000000008A05                 db  38h ; 8
.eh_frame:0000000000008A06                 db  52h ; R
.eh_frame:0000000000008A07                 db  0Eh
.eh_frame:0000000000008A08                 db  30h ; 0
.eh_frame:0000000000008A09                 db  41h ; A
.eh_frame:0000000000008A0A                 db  0Eh
.eh_frame:0000000000008A0B                 db  28h ; (
.eh_frame:0000000000008A0C                 db  42h ; B
.eh_frame:0000000000008A0D                 db  0Eh
.eh_frame:0000000000008A0E                 db  20h
.eh_frame:0000000000008A0F                 db  42h ; B
.eh_frame:0000000000008A10                 db  0Eh
.eh_frame:0000000000008A11                 db  18h
.eh_frame:0000000000008A12                 db  42h ; B
.eh_frame:0000000000008A13                 db  0Eh
.eh_frame:0000000000008A14                 db  10h
.eh_frame:0000000000008A15                 db  42h ; B
.eh_frame:0000000000008A16                 db  0Eh
.eh_frame:0000000000008A17                 db    8
.eh_frame:0000000000008A18                 db  4Fh ; O
.eh_frame:0000000000008A19                 db  0Bh
.eh_frame:0000000000008A1A                 db  62h ; b
.eh_frame:0000000000008A1B                 db  0Ah
.eh_frame:0000000000008A1C                 db  0Eh
.eh_frame:0000000000008A1D                 db  38h ; 8
.eh_frame:0000000000008A1E                 db  50h ; P
.eh_frame:0000000000008A1F                 db  0Eh
.eh_frame:0000000000008A20                 db  30h ; 0
.eh_frame:0000000000008A21                 db  41h ; A
.eh_frame:0000000000008A22                 db  0Eh
.eh_frame:0000000000008A23                 db  28h ; (
.eh_frame:0000000000008A24                 db  42h ; B
.eh_frame:0000000000008A25                 db  0Eh
.eh_frame:0000000000008A26                 db  20h
.eh_frame:0000000000008A27                 db  42h ; B
.eh_frame:0000000000008A28                 db  0Eh
.eh_frame:0000000000008A29                 db  18h
.eh_frame:0000000000008A2A                 db  42h ; B
.eh_frame:0000000000008A2B                 db  0Eh
.eh_frame:0000000000008A2C                 db  10h
.eh_frame:0000000000008A2D                 db  42h ; B
.eh_frame:0000000000008A2E                 db  0Eh
.eh_frame:0000000000008A2F                 db    8
.eh_frame:0000000000008A30                 db  55h ; U
.eh_frame:0000000000008A31                 db  0Bh
.eh_frame:0000000000008A32                 db  66h ; f
.eh_frame:0000000000008A33                 db  0Eh
.eh_frame:0000000000008A34                 db  68h ; h
.eh_frame:0000000000008A35                 db  42h ; B
.eh_frame:0000000000008A36                 db  0Eh
.eh_frame:0000000000008A37                 db  70h ; p
.eh_frame:0000000000008A38                 db  5Ch ; \
.eh_frame:0000000000008A39                 db  0Eh
.eh_frame:0000000000008A3A                 db  68h ; h
.eh_frame:0000000000008A3B                 db  41h ; A
.eh_frame:0000000000008A3C                 db  0Eh
.eh_frame:0000000000008A3D                 db  60h ; `
.eh_frame:0000000000008A3E                 db  44h ; D
.eh_frame:0000000000008A3F                 db  0Ah
.eh_frame:0000000000008A40                 db  0Eh
.eh_frame:0000000000008A41                 db  38h ; 8
.eh_frame:0000000000008A42                 db  41h ; A
.eh_frame:0000000000008A43                 db  0Eh
.eh_frame:0000000000008A44                 db  30h ; 0
.eh_frame:0000000000008A45                 db  41h ; A
.eh_frame:0000000000008A46                 db  0Eh
.eh_frame:0000000000008A47                 db  28h ; (
.eh_frame:0000000000008A48                 db  42h ; B
.eh_frame:0000000000008A49                 db  0Eh
.eh_frame:0000000000008A4A                 db  20h
.eh_frame:0000000000008A4B                 db  42h ; B
.eh_frame:0000000000008A4C                 db  0Eh
.eh_frame:0000000000008A4D                 db  18h
.eh_frame:0000000000008A4E                 db  42h ; B
.eh_frame:0000000000008A4F                 db  0Eh
.eh_frame:0000000000008A50                 db  10h
.eh_frame:0000000000008A51                 db  42h ; B
.eh_frame:0000000000008A52                 db  0Eh
.eh_frame:0000000000008A53                 db    8
.eh_frame:0000000000008A54                 db  45h ; E
.eh_frame:0000000000008A55                 db  0Bh
.eh_frame:0000000000008A56                 db  68h ; h
.eh_frame:0000000000008A57                 db  0Ah
.eh_frame:0000000000008A58                 db  0Eh
.eh_frame:0000000000008A59                 db  68h ; h
.eh_frame:0000000000008A5A                 db  48h ; H
.eh_frame:0000000000008A5B                 db  0Bh
.eh_frame:0000000000008A5C                 db  72h ; r
.eh_frame:0000000000008A5D                 db  0Eh
.eh_frame:0000000000008A5E                 db  68h ; h
.eh_frame:0000000000008A5F                 db  45h ; E
.eh_frame:0000000000008A60                 db  0Eh
.eh_frame:0000000000008A61                 db  70h ; p
.eh_frame:0000000000008A62                 db  42h ; B
.eh_frame:0000000000008A63                 db  0Eh
.eh_frame:0000000000008A64                 db  78h ; x
.eh_frame:0000000000008A65                 db  42h ; B
.eh_frame:0000000000008A66                 db  0Eh
.eh_frame:0000000000008A67                 db  80h
.eh_frame:0000000000008A68                 db    1
.eh_frame:0000000000008A69                 db  5Eh ; ^
.eh_frame:0000000000008A6A                 db  0Eh
.eh_frame:0000000000008A6B                 db  60h ; `
.eh_frame:0000000000008A6C                 db  44h ; D
.eh_frame:0000000000008A6D                 db  0Ah
.eh_frame:0000000000008A6E                 db  0Eh
.eh_frame:0000000000008A6F                 db  38h ; 8
.eh_frame:0000000000008A70                 db  41h ; A
.eh_frame:0000000000008A71                 db  0Eh
.eh_frame:0000000000008A72                 db  30h ; 0
.eh_frame:0000000000008A73                 db  41h ; A
.eh_frame:0000000000008A74                 db  0Eh
.eh_frame:0000000000008A75                 db  28h ; (
.eh_frame:0000000000008A76                 db  42h ; B
.eh_frame:0000000000008A77                 db  0Eh
.eh_frame:0000000000008A78                 db  20h
.eh_frame:0000000000008A79                 db  42h ; B
.eh_frame:0000000000008A7A                 db  0Eh
.eh_frame:0000000000008A7B                 db  18h
.eh_frame:0000000000008A7C                 db  42h ; B
.eh_frame:0000000000008A7D                 db  0Eh
.eh_frame:0000000000008A7E                 db  10h
.eh_frame:0000000000008A7F                 db  42h ; B
.eh_frame:0000000000008A80                 db  0Eh
.eh_frame:0000000000008A81                 db    8
.eh_frame:0000000000008A82                 db  41h ; A
.eh_frame:0000000000008A83                 db  0Bh
.eh_frame:0000000000008A84                 db  79h ; y
.eh_frame:0000000000008A85                 db  0Ah
.eh_frame:0000000000008A86                 db  0Eh
.eh_frame:0000000000008A87                 db  68h ; h
.eh_frame:0000000000008A88                 db  42h ; B
.eh_frame:0000000000008A89                 db  0Eh
.eh_frame:0000000000008A8A                 db  70h ; p
.eh_frame:0000000000008A8B                 db  42h ; B
.eh_frame:0000000000008A8C                 db  0Eh
.eh_frame:0000000000008A8D                 db  78h ; x
.eh_frame:0000000000008A8E                 db  42h ; B
.eh_frame:0000000000008A8F                 db  0Eh
.eh_frame:0000000000008A90                 db  80h
.eh_frame:0000000000008A91                 db    1
.eh_frame:0000000000008A92                 db  51h ; Q
.eh_frame:0000000000008A93                 db  0Bh
.eh_frame:0000000000008A94                 db  10h
.eh_frame:0000000000008A95                 db    0
.eh_frame:0000000000008A96                 db    0
.eh_frame:0000000000008A97                 db    0
.eh_frame:0000000000008A98                 db 0E8h
.eh_frame:0000000000008A99                 db  0Ah
.eh_frame:0000000000008A9A                 db    0
.eh_frame:0000000000008A9B                 db    0
.eh_frame:0000000000008A9C                 db 0B4h
.eh_frame:0000000000008A9D                 db 0CDh
.eh_frame:0000000000008A9E                 db 0FFh
.eh_frame:0000000000008A9F                 db 0FFh
.eh_frame:0000000000008AA0                 db  20h
.eh_frame:0000000000008AA1                 db    0
.eh_frame:0000000000008AA2                 db    0
.eh_frame:0000000000008AA3                 db    0
.eh_frame:0000000000008AA4                 db    0
.eh_frame:0000000000008AA5                 db    0
.eh_frame:0000000000008AA6                 db    0
.eh_frame:0000000000008AA7                 db    0
.eh_frame:0000000000008AA8                 db  18h
.eh_frame:0000000000008AA9                 db    0
.eh_frame:0000000000008AAA                 db    0
.eh_frame:0000000000008AAB                 db    0
.eh_frame:0000000000008AAC                 db 0FCh
.eh_frame:0000000000008AAD                 db  0Ah
.eh_frame:0000000000008AAE                 db    0
.eh_frame:0000000000008AAF                 db    0
.eh_frame:0000000000008AB0                 db 0C0h
.eh_frame:0000000000008AB1                 db 0CDh
.eh_frame:0000000000008AB2                 db 0FFh
.eh_frame:0000000000008AB3                 db 0FFh
.eh_frame:0000000000008AB4                 db  78h ; x
.eh_frame:0000000000008AB5                 db    0
.eh_frame:0000000000008AB6                 db    0
.eh_frame:0000000000008AB7                 db    0
.eh_frame:0000000000008AB8                 db    0
.eh_frame:0000000000008AB9                 db  44h ; D
.eh_frame:0000000000008ABA                 db  0Eh
.eh_frame:0000000000008ABB                 db  70h ; p
.eh_frame:0000000000008ABC                 db    2
.eh_frame:0000000000008ABD                 db  60h ; `
.eh_frame:0000000000008ABE                 db  0Ah
.eh_frame:0000000000008ABF                 db  0Eh
.eh_frame:0000000000008AC0                 db    8
.eh_frame:0000000000008AC1                 db  41h ; A
.eh_frame:0000000000008AC2                 db  0Bh
.eh_frame:0000000000008AC3                 db    0
.eh_frame:0000000000008AC4                 db  28h ; (
.eh_frame:0000000000008AC5                 db    0
.eh_frame:0000000000008AC6                 db    0
.eh_frame:0000000000008AC7                 db    0
.eh_frame:0000000000008AC8                 db  18h
.eh_frame:0000000000008AC9                 db  0Bh
.eh_frame:0000000000008ACA                 db    0
.eh_frame:0000000000008ACB                 db    0
.eh_frame:0000000000008ACC                 db  24h ; $
.eh_frame:0000000000008ACD                 db 0CEh
.eh_frame:0000000000008ACE                 db 0FFh
.eh_frame:0000000000008ACF                 db 0FFh
.eh_frame:0000000000008AD0                 db 0D5h
.eh_frame:0000000000008AD1                 db    0
.eh_frame:0000000000008AD2                 db    0
.eh_frame:0000000000008AD3                 db    0
.eh_frame:0000000000008AD4                 db    0
.eh_frame:0000000000008AD5                 db  41h ; A
.eh_frame:0000000000008AD6                 db  0Eh
.eh_frame:0000000000008AD7                 db  10h
.eh_frame:0000000000008AD8                 db  86h
.eh_frame:0000000000008AD9                 db    2
.eh_frame:0000000000008ADA                 db  41h ; A
.eh_frame:0000000000008ADB                 db  0Eh
.eh_frame:0000000000008ADC                 db  18h
.eh_frame:0000000000008ADD                 db  83h
.eh_frame:0000000000008ADE                 db    3
.eh_frame:0000000000008ADF                 db  50h ; P
.eh_frame:0000000000008AE0                 db  0Eh
.eh_frame:0000000000008AE1                 db 0D0h
.eh_frame:0000000000008AE2                 db    1
.eh_frame:0000000000008AE3                 db    2
.eh_frame:0000000000008AE4                 db 0ABh
.eh_frame:0000000000008AE5                 db  0Ah
.eh_frame:0000000000008AE6                 db  0Eh
.eh_frame:0000000000008AE7                 db  18h
.eh_frame:0000000000008AE8                 db  41h ; A
.eh_frame:0000000000008AE9                 db  0Eh
.eh_frame:0000000000008AEA                 db  10h
.eh_frame:0000000000008AEB                 db  41h ; A
.eh_frame:0000000000008AEC                 db  0Eh
.eh_frame:0000000000008AED                 db    8
.eh_frame:0000000000008AEE                 db  41h ; A
.eh_frame:0000000000008AEF                 db  0Bh
.eh_frame:0000000000008AF0                 db  1Ch
.eh_frame:0000000000008AF1                 db    0
.eh_frame:0000000000008AF2                 db    0
.eh_frame:0000000000008AF3                 db    0
.eh_frame:0000000000008AF4                 db  44h ; D
.eh_frame:0000000000008AF5                 db  0Bh
.eh_frame:0000000000008AF6                 db    0
.eh_frame:0000000000008AF7                 db    0
.eh_frame:0000000000008AF8                 db 0D8h
.eh_frame:0000000000008AF9                 db 0CEh
.eh_frame:0000000000008AFA                 db 0FFh
.eh_frame:0000000000008AFB                 db 0FFh
.eh_frame:0000000000008AFC                 db  80h
.eh_frame:0000000000008AFD                 db    0
.eh_frame:0000000000008AFE                 db    0
.eh_frame:0000000000008AFF                 db    0
.eh_frame:0000000000008B00                 db    0
.eh_frame:0000000000008B01                 db  41h ; A
.eh_frame:0000000000008B02                 db  0Eh
.eh_frame:0000000000008B03                 db  10h
.eh_frame:0000000000008B04                 db  83h
.eh_frame:0000000000008B05                 db    2
.eh_frame:0000000000008B06                 db    2
.eh_frame:0000000000008B07                 db  7Ah ; z
.eh_frame:0000000000008B08                 db  0Eh
.eh_frame:0000000000008B09                 db    8
.eh_frame:0000000000008B0A                 db    0
.eh_frame:0000000000008B0B                 db    0
.eh_frame:0000000000008B0C                 db    0
.eh_frame:0000000000008B0D                 db    0
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B10                 db  18h
.eh_frame:0000000000008B11                 db    0
.eh_frame:0000000000008B12                 db    0
.eh_frame:0000000000008B13                 db    0
.eh_frame:0000000000008B14                 db  64h ; d
.eh_frame:0000000000008B15                 db  0Bh
.eh_frame:0000000000008B16                 db    0
.eh_frame:0000000000008B17                 db    0
.eh_frame:0000000000008B18                 db  38h ; 8
.eh_frame:0000000000008B19                 db 0CFh
.eh_frame:0000000000008B1A                 db 0FFh
.eh_frame:0000000000008B1B                 db 0FFh
.eh_frame:0000000000008B1C                 db  1Ah
.eh_frame:0000000000008B1D                 db    0
.eh_frame:0000000000008B1E                 db    0
.eh_frame:0000000000008B1F                 db    0
.eh_frame:0000000000008B20                 db    0
.eh_frame:0000000000008B21                 db  41h ; A
.eh_frame:0000000000008B22                 db  0Eh
.eh_frame:0000000000008B23                 db  10h
.eh_frame:0000000000008B24                 db  83h
.eh_frame:0000000000008B25                 db    2
.eh_frame:0000000000008B26                 db  53h ; S
.eh_frame:0000000000008B27                 db  0Ah
.eh_frame:0000000000008B28                 db  0Eh
.eh_frame:0000000000008B29                 db    8
.eh_frame:0000000000008B2A                 db  41h ; A
.eh_frame:0000000000008B2B                 db  0Bh
.eh_frame:0000000000008B2C                 db  10h
.eh_frame:0000000000008B2D                 db    0
.eh_frame:0000000000008B2E                 db    0
.eh_frame:0000000000008B2F                 db    0
.eh_frame:0000000000008B30                 db  80h
.eh_frame:0000000000008B31                 db  0Bh
.eh_frame:0000000000008B32                 db    0
.eh_frame:0000000000008B33                 db    0
.eh_frame:0000000000008B34                 db  3Ch ; <
.eh_frame:0000000000008B35                 db 0CFh
.eh_frame:0000000000008B36                 db 0FFh
.eh_frame:0000000000008B37                 db 0FFh
.eh_frame:0000000000008B38                 db  24h ; $
.eh_frame:0000000000008B39                 db    0
.eh_frame:0000000000008B3A                 db    0
.eh_frame:0000000000008B3B                 db    0
.eh_frame:0000000000008B3C                 db    0
.eh_frame:0000000000008B3D                 db  5Fh ; _
.eh_frame:0000000000008B3E                 db  0Eh
.eh_frame:0000000000008B3F                 db  10h
.eh_frame:0000000000008B40                 db  10h
.eh_frame:0000000000008B41                 db    0
.eh_frame:0000000000008B42                 db    0
.eh_frame:0000000000008B43                 db    0
.eh_frame:0000000000008B44                 db  94h
.eh_frame:0000000000008B45                 db  0Bh
.eh_frame:0000000000008B46                 db    0
.eh_frame:0000000000008B47                 db    0
.eh_frame:0000000000008B48                 db  58h ; X
.eh_frame:0000000000008B49                 db 0CFh
.eh_frame:0000000000008B4A                 db 0FFh
.eh_frame:0000000000008B4B                 db 0FFh
.eh_frame:0000000000008B4C                 db    2
.eh_frame:0000000000008B4D                 db    0
.eh_frame:0000000000008B4E                 db    0
.eh_frame:0000000000008B4F                 db    0
.eh_frame:0000000000008B50                 db    0
.eh_frame:0000000000008B51                 db    0
.eh_frame:0000000000008B52                 db    0
.eh_frame:0000000000008B53                 db    0
.eh_frame:0000000000008B54                 db  20h
.eh_frame:0000000000008B55                 db    0
.eh_frame:0000000000008B56                 db    0
.eh_frame:0000000000008B57                 db    0
.eh_frame:0000000000008B58                 db 0A8h
.eh_frame:0000000000008B59                 db  0Bh
.eh_frame:0000000000008B5A                 db    0
.eh_frame:0000000000008B5B                 db    0
.eh_frame:0000000000008B5C                 db  54h ; T
.eh_frame:0000000000008B5D                 db 0CFh
.eh_frame:0000000000008B5E                 db 0FFh
.eh_frame:0000000000008B5F                 db 0FFh
.eh_frame:0000000000008B60                 db  36h ; 6
.eh_frame:0000000000008B61                 db    0
.eh_frame:0000000000008B62                 db    0
.eh_frame:0000000000008B63                 db    0
.eh_frame:0000000000008B64                 db    0
.eh_frame:0000000000008B65                 db  44h ; D
.eh_frame:0000000000008B66                 db  0Eh
.eh_frame:0000000000008B67                 db  10h
.eh_frame:0000000000008B68                 db  83h
.eh_frame:0000000000008B69                 db    2
.eh_frame:0000000000008B6A                 db  5Dh ; ]
.eh_frame:0000000000008B6B                 db  0Ah
.eh_frame:0000000000008B6C                 db  0Eh
.eh_frame:0000000000008B6D                 db    8
.eh_frame:0000000000008B6E                 db  47h ; G
.eh_frame:0000000000008B6F                 db  0Bh
.eh_frame:0000000000008B70                 db  48h ; H
.eh_frame:0000000000008B71                 db  0Ah
.eh_frame:0000000000008B72                 db  0Eh
.eh_frame:0000000000008B73                 db    8
.eh_frame:0000000000008B74                 db  41h ; A
.eh_frame:0000000000008B75                 db  0Bh
.eh_frame:0000000000008B76                 db    0
.eh_frame:0000000000008B77                 db    0
.eh_frame:0000000000008B78                 db  10h
.eh_frame:0000000000008B79                 db    0
.eh_frame:0000000000008B7A                 db    0
.eh_frame:0000000000008B7B                 db    0
.eh_frame:0000000000008B7C                 db 0CCh
.eh_frame:0000000000008B7D                 db  0Bh
.eh_frame:0000000000008B7E                 db    0
.eh_frame:0000000000008B7F                 db    0
.eh_frame:0000000000008B80                 db  70h ; p
.eh_frame:0000000000008B81                 db 0CFh
.eh_frame:0000000000008B82                 db 0FFh
.eh_frame:0000000000008B83                 db 0FFh
.eh_frame:0000000000008B84                 db  24h ; $
.eh_frame:0000000000008B85                 db    0
.eh_frame:0000000000008B86                 db    0
.eh_frame:0000000000008B87                 db    0
.eh_frame:0000000000008B88                 db    0
.eh_frame:0000000000008B89                 db  5Fh ; _
.eh_frame:0000000000008B8A                 db  0Eh
.eh_frame:0000000000008B8B                 db  10h
.eh_frame:0000000000008B8C                 db  14h
.eh_frame:0000000000008B8D                 db    0
.eh_frame:0000000000008B8E                 db    0
.eh_frame:0000000000008B8F                 db    0
.eh_frame:0000000000008B90                 db 0E0h
.eh_frame:0000000000008B91                 db  0Bh
.eh_frame:0000000000008B92                 db    0
.eh_frame:0000000000008B93                 db    0
.eh_frame:0000000000008B94                 db  8Ch
.eh_frame:0000000000008B95                 db 0CFh
.eh_frame:0000000000008B96                 db 0FFh
.eh_frame:0000000000008B97                 db 0FFh
.eh_frame:0000000000008B98                 db  82h
.eh_frame:0000000000008B99                 db    0
.eh_frame:0000000000008B9A                 db    0
.eh_frame:0000000000008B9B                 db    0
.eh_frame:0000000000008B9C                 db    0
.eh_frame:0000000000008B9D                 db    2
.eh_frame:0000000000008B9E                 db  5Fh ; _
.eh_frame:0000000000008B9F                 db  0Eh
.eh_frame:0000000000008BA0                 db  10h
.eh_frame:0000000000008BA1                 db  49h ; I
.eh_frame:0000000000008BA2                 db  0Eh
.eh_frame:0000000000008BA3                 db    8
.eh_frame:0000000000008BA4                 db  14h
.eh_frame:0000000000008BA5                 db    0
.eh_frame:0000000000008BA6                 db    0
.eh_frame:0000000000008BA7                 db    0
.eh_frame:0000000000008BA8                 db 0F8h
.eh_frame:0000000000008BA9                 db  0Bh
.eh_frame:0000000000008BAA                 db    0
.eh_frame:0000000000008BAB                 db    0
.eh_frame:0000000000008BAC                 db    4
.eh_frame:0000000000008BAD                 db 0D0h
.eh_frame:0000000000008BAE                 db 0FFh
.eh_frame:0000000000008BAF                 db 0FFh
.eh_frame:0000000000008BB0                 db  4Ah ; J
.eh_frame:0000000000008BB1                 db    0
.eh_frame:0000000000008BB2                 db    0
.eh_frame:0000000000008BB3                 db    0
.eh_frame:0000000000008BB4                 db    0
.eh_frame:0000000000008BB5                 db    2
.eh_frame:0000000000008BB6                 db  45h ; E
.eh_frame:0000000000008BB7                 db  0Eh
.eh_frame:0000000000008BB8                 db  10h
.eh_frame:0000000000008BB9                 db    0
.eh_frame:0000000000008BBA                 db    0
.eh_frame:0000000000008BBB                 db    0
.eh_frame:0000000000008BBC                 db  18h
.eh_frame:0000000000008BBD                 db    0
.eh_frame:0000000000008BBE                 db    0
.eh_frame:0000000000008BBF                 db    0
.eh_frame:0000000000008BC0                 db  10h
.eh_frame:0000000000008BC1                 db  0Ch
.eh_frame:0000000000008BC2                 db    0
.eh_frame:0000000000008BC3                 db    0
.eh_frame:0000000000008BC4                 db  3Ch ; <
.eh_frame:0000000000008BC5                 db 0D0h
.eh_frame:0000000000008BC6                 db 0FFh
.eh_frame:0000000000008BC7                 db 0FFh
.eh_frame:0000000000008BC8                 db  17h
.eh_frame:0000000000008BC9                 db    0
.eh_frame:0000000000008BCA                 db    0
.eh_frame:0000000000008BCB                 db    0
.eh_frame:0000000000008BCC                 db    0
.eh_frame:0000000000008BCD                 db  41h ; A
.eh_frame:0000000000008BCE                 db  0Eh
.eh_frame:0000000000008BCF                 db  10h
.eh_frame:0000000000008BD0                 db  83h
.eh_frame:0000000000008BD1                 db    2
.eh_frame:0000000000008BD2                 db  51h ; Q
.eh_frame:0000000000008BD3                 db  0Eh
.eh_frame:0000000000008BD4                 db    8
.eh_frame:0000000000008BD5                 db    0
.eh_frame:0000000000008BD6                 db    0
.eh_frame:0000000000008BD7                 db    0
.eh_frame:0000000000008BD8                 db  18h
.eh_frame:0000000000008BD9                 db    0
.eh_frame:0000000000008BDA                 db    0
.eh_frame:0000000000008BDB                 db    0
.eh_frame:0000000000008BDC                 db  2Ch ; ,
.eh_frame:0000000000008BDD                 db  0Ch
.eh_frame:0000000000008BDE                 db    0
.eh_frame:0000000000008BDF                 db    0
.eh_frame:0000000000008BE0                 db  40h ; @
.eh_frame:0000000000008BE1                 db 0D0h
.eh_frame:0000000000008BE2                 db 0FFh
.eh_frame:0000000000008BE3                 db 0FFh
.eh_frame:0000000000008BE4                 db  2Eh ; .
.eh_frame:0000000000008BE5                 db    0
.eh_frame:0000000000008BE6                 db    0
.eh_frame:0000000000008BE7                 db    0
.eh_frame:0000000000008BE8                 db    0
.eh_frame:0000000000008BE9                 db  47h ; G
.eh_frame:0000000000008BEA                 db  0Eh
.eh_frame:0000000000008BEB                 db  10h
.eh_frame:0000000000008BEC                 db  61h ; a
.eh_frame:0000000000008BED                 db  0Ah
.eh_frame:0000000000008BEE                 db  0Eh
.eh_frame:0000000000008BEF                 db    8
.eh_frame:0000000000008BF0                 db  41h ; A
.eh_frame:0000000000008BF1                 db  0Bh
.eh_frame:0000000000008BF2                 db    0
.eh_frame:0000000000008BF3                 db    0
.eh_frame:0000000000008BF4                 db  24h ; $
.eh_frame:0000000000008BF5                 db    0
.eh_frame:0000000000008BF6                 db    0
.eh_frame:0000000000008BF7                 db    0
.eh_frame:0000000000008BF8                 db  48h ; H
.eh_frame:0000000000008BF9                 db  0Ch
.eh_frame:0000000000008BFA                 db    0
.eh_frame:0000000000008BFB                 db    0
.eh_frame:0000000000008BFC                 db  54h ; T
.eh_frame:0000000000008BFD                 db 0D0h
.eh_frame:0000000000008BFE                 db 0FFh
.eh_frame:0000000000008BFF                 db 0FFh
.eh_frame:0000000000008C00                 db  28h ; (
.eh_frame:0000000000008C01                 db    0
.eh_frame:0000000000008C02                 db    0
.eh_frame:0000000000008C03                 db    0
.eh_frame:0000000000008C04                 db    0
.eh_frame:0000000000008C05                 db  41h ; A
.eh_frame:0000000000008C06                 db  0Eh
.eh_frame:0000000000008C07                 db  10h
.eh_frame:0000000000008C08                 db  86h
.eh_frame:0000000000008C09                 db    2
.eh_frame:0000000000008C0A                 db  41h ; A
.eh_frame:0000000000008C0B                 db  0Eh
.eh_frame:0000000000008C0C                 db  18h
.eh_frame:0000000000008C0D                 db  83h
.eh_frame:0000000000008C0E                 db    3
.eh_frame:0000000000008C0F                 db  4Dh ; M
.eh_frame:0000000000008C10                 db  0Eh
.eh_frame:0000000000008C11                 db  20h
.eh_frame:0000000000008C12                 db  49h ; I
.eh_frame:0000000000008C13                 db  0Eh
.eh_frame:0000000000008C14                 db  18h
.eh_frame:0000000000008C15                 db  47h ; G
.eh_frame:0000000000008C16                 db  0Eh
.eh_frame:0000000000008C17                 db  10h
.eh_frame:0000000000008C18                 db  41h ; A
.eh_frame:0000000000008C19                 db  0Eh
.eh_frame:0000000000008C1A                 db    8
.eh_frame:0000000000008C1B                 db    0
.eh_frame:0000000000008C1C                 db  18h
.eh_frame:0000000000008C1D                 db    0
.eh_frame:0000000000008C1E                 db    0
.eh_frame:0000000000008C1F                 db    0
.eh_frame:0000000000008C20                 db  70h ; p
.eh_frame:0000000000008C21                 db  0Ch
.eh_frame:0000000000008C22                 db    0
.eh_frame:0000000000008C23                 db    0
.eh_frame:0000000000008C24                 db  5Ch ; \
.eh_frame:0000000000008C25                 db 0D0h
.eh_frame:0000000000008C26                 db 0FFh
.eh_frame:0000000000008C27                 db 0FFh
.eh_frame:0000000000008C28                 db  13h
.eh_frame:0000000000008C29                 db    0
.eh_frame:0000000000008C2A                 db    0
.eh_frame:0000000000008C2B                 db    0
.eh_frame:0000000000008C2C                 db    0
.eh_frame:0000000000008C2D                 db  41h ; A
.eh_frame:0000000000008C2E                 db  0Eh
.eh_frame:0000000000008C2F                 db  10h
.eh_frame:0000000000008C30                 db  83h
.eh_frame:0000000000008C31                 db    2
.eh_frame:0000000000008C32                 db  50h ; P
.eh_frame:0000000000008C33                 db  0Eh
.eh_frame:0000000000008C34                 db    8
.eh_frame:0000000000008C35                 db    0
.eh_frame:0000000000008C36                 db    0
.eh_frame:0000000000008C37                 db    0
.eh_frame:0000000000008C38                 db  14h
.eh_frame:0000000000008C39                 db    0
.eh_frame:0000000000008C3A                 db    0
.eh_frame:0000000000008C3B                 db    0
.eh_frame:0000000000008C3C                 db  8Ch
.eh_frame:0000000000008C3D                 db  0Ch
.eh_frame:0000000000008C3E                 db    0
.eh_frame:0000000000008C3F                 db    0
.eh_frame:0000000000008C40                 db  60h ; `
.eh_frame:0000000000008C41                 db 0D0h
.eh_frame:0000000000008C42                 db 0FFh
.eh_frame:0000000000008C43                 db 0FFh
.eh_frame:0000000000008C44                 db  35h ; 5
.eh_frame:0000000000008C45                 db    0
.eh_frame:0000000000008C46                 db    0
.eh_frame:0000000000008C47                 db    0
.eh_frame:0000000000008C48                 db    0
.eh_frame:0000000000008C49                 db  4Bh ; K
.eh_frame:0000000000008C4A                 db  0Eh
.eh_frame:0000000000008C4B                 db  10h
.eh_frame:0000000000008C4C                 db    0
.eh_frame:0000000000008C4D                 db    0
.eh_frame:0000000000008C4E                 db    0
.eh_frame:0000000000008C4F                 db    0
.eh_frame:0000000000008C50                 db  38h ; 8
.eh_frame:0000000000008C51                 db    0
.eh_frame:0000000000008C52                 db    0
.eh_frame:0000000000008C53                 db    0
.eh_frame:0000000000008C54                 db 0A4h
.eh_frame:0000000000008C55                 db  0Ch
.eh_frame:0000000000008C56                 db    0
.eh_frame:0000000000008C57                 db    0
.eh_frame:0000000000008C58                 db  88h
.eh_frame:0000000000008C59                 db 0D0h
.eh_frame:0000000000008C5A                 db 0FFh
.eh_frame:0000000000008C5B                 db 0FFh
.eh_frame:0000000000008C5C                 db 0BAh
.eh_frame:0000000000008C5D                 db    0
.eh_frame:0000000000008C5E                 db    0
.eh_frame:0000000000008C5F                 db    0
.eh_frame:0000000000008C60                 db    0
.eh_frame:0000000000008C61                 db  42h ; B
.eh_frame:0000000000008C62                 db  0Eh
.eh_frame:0000000000008C63                 db  10h
.eh_frame:0000000000008C64                 db  8Eh
.eh_frame:0000000000008C65                 db    2
.eh_frame:0000000000008C66                 db  42h ; B
.eh_frame:0000000000008C67                 db  0Eh
.eh_frame:0000000000008C68                 db  18h
.eh_frame:0000000000008C69                 db  8Dh
.eh_frame:0000000000008C6A                 db    3
.eh_frame:0000000000008C6B                 db  45h ; E
.eh_frame:0000000000008C6C                 db  0Eh
.eh_frame:0000000000008C6D                 db  20h
.eh_frame:0000000000008C6E                 db  8Ch
.eh_frame:0000000000008C6F                 db    4
.eh_frame:0000000000008C70                 db  41h ; A
.eh_frame:0000000000008C71                 db  0Eh
.eh_frame:0000000000008C72                 db  28h ; (
.eh_frame:0000000000008C73                 db  86h
.eh_frame:0000000000008C74                 db    5
.eh_frame:0000000000008C75                 db  44h ; D
.eh_frame:0000000000008C76                 db  0Eh
.eh_frame:0000000000008C77                 db  30h ; 0
.eh_frame:0000000000008C78                 db  83h
.eh_frame:0000000000008C79                 db    6
.eh_frame:0000000000008C7A                 db    2
.eh_frame:0000000000008C7B                 db  99h
.eh_frame:0000000000008C7C                 db  0Eh
.eh_frame:0000000000008C7D                 db  28h ; (
.eh_frame:0000000000008C7E                 db  41h ; A
.eh_frame:0000000000008C7F                 db  0Eh
.eh_frame:0000000000008C80                 db  20h
.eh_frame:0000000000008C81                 db  42h ; B
.eh_frame:0000000000008C82                 db  0Eh
.eh_frame:0000000000008C83                 db  18h
.eh_frame:0000000000008C84                 db  42h ; B
.eh_frame:0000000000008C85                 db  0Eh
.eh_frame:0000000000008C86                 db  10h
.eh_frame:0000000000008C87                 db  42h ; B
.eh_frame:0000000000008C88                 db  0Eh
.eh_frame:0000000000008C89                 db    8
.eh_frame:0000000000008C8A                 db    0
.eh_frame:0000000000008C8B                 db    0
.eh_frame:0000000000008C8C                 db  38h ; 8
.eh_frame:0000000000008C8D                 db    0
.eh_frame:0000000000008C8E                 db    0
.eh_frame:0000000000008C8F                 db    0
.eh_frame:0000000000008C90                 db 0E0h
.eh_frame:0000000000008C91                 db  0Ch
.eh_frame:0000000000008C92                 db    0
.eh_frame:0000000000008C93                 db    0
.eh_frame:0000000000008C94                 db  0Ch
.eh_frame:0000000000008C95                 db 0D1h
.eh_frame:0000000000008C96                 db 0FFh
.eh_frame:0000000000008C97                 db 0FFh
.eh_frame:0000000000008C98                 db  44h ; D
.eh_frame:0000000000008C99                 db    0
.eh_frame:0000000000008C9A                 db    0
.eh_frame:0000000000008C9B                 db    0
.eh_frame:0000000000008C9C                 db    0
.eh_frame:0000000000008C9D                 db  42h ; B
.eh_frame:0000000000008C9E                 db  0Eh
.eh_frame:0000000000008C9F                 db  10h
.eh_frame:0000000000008CA0                 db  8Eh
.eh_frame:0000000000008CA1                 db    2
.eh_frame:0000000000008CA2                 db  42h ; B
.eh_frame:0000000000008CA3                 db  0Eh
.eh_frame:0000000000008CA4                 db  18h
.eh_frame:0000000000008CA5                 db  8Dh
.eh_frame:0000000000008CA6                 db    3
.eh_frame:0000000000008CA7                 db  45h ; E
.eh_frame:0000000000008CA8                 db  0Eh
.eh_frame:0000000000008CA9                 db  20h
.eh_frame:0000000000008CAA                 db  8Ch
.eh_frame:0000000000008CAB                 db    4
.eh_frame:0000000000008CAC                 db  41h ; A
.eh_frame:0000000000008CAD                 db  0Eh
.eh_frame:0000000000008CAE                 db  28h ; (
.eh_frame:0000000000008CAF                 db  86h
.eh_frame:0000000000008CB0                 db    5
.eh_frame:0000000000008CB1                 db  44h ; D
.eh_frame:0000000000008CB2                 db  0Eh
.eh_frame:0000000000008CB3                 db  30h ; 0
.eh_frame:0000000000008CB4                 db  83h
.eh_frame:0000000000008CB5                 db    6
.eh_frame:0000000000008CB6                 db  6Bh ; k
.eh_frame:0000000000008CB7                 db  0Eh
.eh_frame:0000000000008CB8                 db  28h ; (
.eh_frame:0000000000008CB9                 db  44h ; D
.eh_frame:0000000000008CBA                 db  0Eh
.eh_frame:0000000000008CBB                 db  20h
.eh_frame:0000000000008CBC                 db  42h ; B
.eh_frame:0000000000008CBD                 db  0Eh
.eh_frame:0000000000008CBE                 db  18h
.eh_frame:0000000000008CBF                 db  42h ; B
.eh_frame:0000000000008CC0                 db  0Eh
.eh_frame:0000000000008CC1                 db  10h
.eh_frame:0000000000008CC2                 db  42h ; B
.eh_frame:0000000000008CC3                 db  0Eh
.eh_frame:0000000000008CC4                 db    8
.eh_frame:0000000000008CC5                 db    0
.eh_frame:0000000000008CC6                 db    0
.eh_frame:0000000000008CC7                 db    0
.eh_frame:0000000000008CC8                 db  3Ch ; <
.eh_frame:0000000000008CC9                 db    0
.eh_frame:0000000000008CCA                 db    0
.eh_frame:0000000000008CCB                 db    0
.eh_frame:0000000000008CCC                 db  1Ch
.eh_frame:0000000000008CCD                 db  0Dh
.eh_frame:0000000000008CCE                 db    0
.eh_frame:0000000000008CCF                 db    0
.eh_frame:0000000000008CD0                 db  20h
.eh_frame:0000000000008CD1                 db 0D1h
.eh_frame:0000000000008CD2                 db 0FFh
.eh_frame:0000000000008CD3                 db 0FFh
.eh_frame:0000000000008CD4                 db  46h ; F
.eh_frame:0000000000008CD5                 db    0
.eh_frame:0000000000008CD6                 db    0
.eh_frame:0000000000008CD7                 db    0
.eh_frame:0000000000008CD8                 db    0
.eh_frame:0000000000008CD9                 db  42h ; B
.eh_frame:0000000000008CDA                 db  0Eh
.eh_frame:0000000000008CDB                 db  10h
.eh_frame:0000000000008CDC                 db  8Eh
.eh_frame:0000000000008CDD                 db    2
.eh_frame:0000000000008CDE                 db  42h ; B
.eh_frame:0000000000008CDF                 db  0Eh
.eh_frame:0000000000008CE0                 db  18h
.eh_frame:0000000000008CE1                 db  8Dh
.eh_frame:0000000000008CE2                 db    3
.eh_frame:0000000000008CE3                 db  45h ; E
.eh_frame:0000000000008CE4                 db  0Eh
.eh_frame:0000000000008CE5                 db  20h
.eh_frame:0000000000008CE6                 db  8Ch
.eh_frame:0000000000008CE7                 db    4
.eh_frame:0000000000008CE8                 db  41h ; A
.eh_frame:0000000000008CE9                 db  0Eh
.eh_frame:0000000000008CEA                 db  28h ; (
.eh_frame:0000000000008CEB                 db  86h
.eh_frame:0000000000008CEC                 db    5
.eh_frame:0000000000008CED                 db  44h ; D
.eh_frame:0000000000008CEE                 db  0Eh
.eh_frame:0000000000008CEF                 db  30h ; 0
.eh_frame:0000000000008CF0                 db  83h
.eh_frame:0000000000008CF1                 db    6
.eh_frame:0000000000008CF2                 db  6Dh ; m
.eh_frame:0000000000008CF3                 db  0Eh
.eh_frame:0000000000008CF4                 db  28h ; (
.eh_frame:0000000000008CF5                 db  44h ; D
.eh_frame:0000000000008CF6                 db  0Eh
.eh_frame:0000000000008CF7                 db  20h
.eh_frame:0000000000008CF8                 db  42h ; B
.eh_frame:0000000000008CF9                 db  0Eh
.eh_frame:0000000000008CFA                 db  18h
.eh_frame:0000000000008CFB                 db  42h ; B
.eh_frame:0000000000008CFC                 db  0Eh
.eh_frame:0000000000008CFD                 db  10h
.eh_frame:0000000000008CFE                 db  42h ; B
.eh_frame:0000000000008CFF                 db  0Eh
.eh_frame:0000000000008D00                 db    8
.eh_frame:0000000000008D01                 db    0
.eh_frame:0000000000008D02                 db    0
.eh_frame:0000000000008D03                 db    0
.eh_frame:0000000000008D04                 db    0
.eh_frame:0000000000008D05                 db    0
.eh_frame:0000000000008D06                 db    0
.eh_frame:0000000000008D07                 db    0
.eh_frame:0000000000008D08                 db  4Ch ; L
.eh_frame:0000000000008D09                 db    0
.eh_frame:0000000000008D0A                 db    0
.eh_frame:0000000000008D0B                 db    0
.eh_frame:0000000000008D0C                 db  5Ch ; \
.eh_frame:0000000000008D0D                 db  0Dh
.eh_frame:0000000000008D0E                 db    0
.eh_frame:0000000000008D0F                 db    0
.eh_frame:0000000000008D10                 db  30h ; 0
.eh_frame:0000000000008D11                 db 0D1h
.eh_frame:0000000000008D12                 db 0FFh
.eh_frame:0000000000008D13                 db 0FFh
.eh_frame:0000000000008D14                 db  1Ch
.eh_frame:0000000000008D15                 db    4
.eh_frame:0000000000008D16                 db    0
.eh_frame:0000000000008D17                 db    0
.eh_frame:0000000000008D18                 db    0
.eh_frame:0000000000008D19                 db  42h ; B
.eh_frame:0000000000008D1A                 db  0Eh
.eh_frame:0000000000008D1B                 db  10h
.eh_frame:0000000000008D1C                 db  8Fh
.eh_frame:0000000000008D1D                 db    2
.eh_frame:0000000000008D1E                 db  42h ; B
.eh_frame:0000000000008D1F                 db  0Eh
.eh_frame:0000000000008D20                 db  18h
.eh_frame:0000000000008D21                 db  8Eh
.eh_frame:0000000000008D22                 db    3
.eh_frame:0000000000008D23                 db  42h ; B
.eh_frame:0000000000008D24                 db  0Eh
.eh_frame:0000000000008D25                 db  20h
.eh_frame:0000000000008D26                 db  8Dh
.eh_frame:0000000000008D27                 db    4
.eh_frame:0000000000008D28                 db  42h ; B
.eh_frame:0000000000008D29                 db  0Eh
.eh_frame:0000000000008D2A                 db  28h ; (
.eh_frame:0000000000008D2B                 db  8Ch
.eh_frame:0000000000008D2C                 db    5
.eh_frame:0000000000008D2D                 db  41h ; A
.eh_frame:0000000000008D2E                 db  0Eh
.eh_frame:0000000000008D2F                 db  30h ; 0
.eh_frame:0000000000008D30                 db  86h
.eh_frame:0000000000008D31                 db    6
.eh_frame:0000000000008D32                 db  41h ; A
.eh_frame:0000000000008D33                 db  0Eh
.eh_frame:0000000000008D34                 db  38h ; 8
.eh_frame:0000000000008D35                 db  83h
.eh_frame:0000000000008D36                 db    7
.eh_frame:0000000000008D37                 db  44h ; D
.eh_frame:0000000000008D38                 db  0Eh
.eh_frame:0000000000008D39                 db  60h ; `
.eh_frame:0000000000008D3A                 db    2
.eh_frame:0000000000008D3B                 db 0E9h
.eh_frame:0000000000008D3C                 db  0Ah
.eh_frame:0000000000008D3D                 db  0Eh
.eh_frame:0000000000008D3E                 db  38h ; 8
.eh_frame:0000000000008D3F                 db  41h ; A
.eh_frame:0000000000008D40                 db  0Eh
.eh_frame:0000000000008D41                 db  30h ; 0
.eh_frame:0000000000008D42                 db  41h ; A
.eh_frame:0000000000008D43                 db  0Eh
.eh_frame:0000000000008D44                 db  28h ; (
.eh_frame:0000000000008D45                 db  42h ; B
.eh_frame:0000000000008D46                 db  0Eh
.eh_frame:0000000000008D47                 db  20h
.eh_frame:0000000000008D48                 db  42h ; B
.eh_frame:0000000000008D49                 db  0Eh
.eh_frame:0000000000008D4A                 db  18h
.eh_frame:0000000000008D4B                 db  42h ; B
.eh_frame:0000000000008D4C                 db  0Eh
.eh_frame:0000000000008D4D                 db  10h
.eh_frame:0000000000008D4E                 db  42h ; B
.eh_frame:0000000000008D4F                 db  0Eh
.eh_frame:0000000000008D50                 db    8
.eh_frame:0000000000008D51                 db  47h ; G
.eh_frame:0000000000008D52                 db  0Bh
.eh_frame:0000000000008D53                 db    0
.eh_frame:0000000000008D54                 db    0
.eh_frame:0000000000008D55                 db    0
.eh_frame:0000000000008D56                 db    0
.eh_frame:0000000000008D57                 db    0
.eh_frame:0000000000008D58                 db  34h ; 4
.eh_frame:0000000000008D59                 db    0
.eh_frame:0000000000008D5A                 db    0
.eh_frame:0000000000008D5B                 db    0
.eh_frame:0000000000008D5C                 db 0ACh
.eh_frame:0000000000008D5D                 db  0Dh
.eh_frame:0000000000008D5E                 db    0
.eh_frame:0000000000008D5F                 db    0
.eh_frame:0000000000008D60                 db    0
.eh_frame:0000000000008D61                 db 0D5h
.eh_frame:0000000000008D62                 db 0FFh
.eh_frame:0000000000008D63                 db 0FFh
.eh_frame:0000000000008D64                 db  7Bh ; {
.eh_frame:0000000000008D65                 db    0
.eh_frame:0000000000008D66                 db    0
.eh_frame:0000000000008D67                 db    0
.eh_frame:0000000000008D68                 db    0
.eh_frame:0000000000008D69                 db  42h ; B
.eh_frame:0000000000008D6A                 db  0Eh
.eh_frame:0000000000008D6B                 db  10h
.eh_frame:0000000000008D6C                 db  8Ch
.eh_frame:0000000000008D6D                 db    2
.eh_frame:0000000000008D6E                 db  41h ; A
.eh_frame:0000000000008D6F                 db  0Eh
.eh_frame:0000000000008D70                 db  18h
.eh_frame:0000000000008D71                 db  86h
.eh_frame:0000000000008D72                 db    3
.eh_frame:0000000000008D73                 db  41h ; A
.eh_frame:0000000000008D74                 db  0Eh
.eh_frame:0000000000008D75                 db  20h
.eh_frame:0000000000008D76                 db  83h
.eh_frame:0000000000008D77                 db    4
.eh_frame:0000000000008D78                 db  7Dh ; }
.eh_frame:0000000000008D79                 db  0Ah
.eh_frame:0000000000008D7A                 db  0Eh
.eh_frame:0000000000008D7B                 db  18h
.eh_frame:0000000000008D7C                 db  41h ; A
.eh_frame:0000000000008D7D                 db  0Eh
.eh_frame:0000000000008D7E                 db  10h
.eh_frame:0000000000008D7F                 db  42h ; B
.eh_frame:0000000000008D80                 db  0Eh
.eh_frame:0000000000008D81                 db    8
.eh_frame:0000000000008D82                 db  44h ; D
.eh_frame:0000000000008D83                 db  0Bh
.eh_frame:0000000000008D84                 db  60h ; `
.eh_frame:0000000000008D85                 db  0Ah
.eh_frame:0000000000008D86                 db  0Eh
.eh_frame:0000000000008D87                 db  18h
.eh_frame:0000000000008D88                 db  41h ; A
.eh_frame:0000000000008D89                 db  0Eh
.eh_frame:0000000000008D8A                 db  10h
.eh_frame:0000000000008D8B                 db  42h ; B
.eh_frame:0000000000008D8C                 db  0Eh
.eh_frame:0000000000008D8D                 db    8
.eh_frame:0000000000008D8E                 db  45h ; E
.eh_frame:0000000000008D8F                 db  0Bh
.eh_frame:0000000000008D90                 db  1Ch
.eh_frame:0000000000008D91                 db    0
.eh_frame:0000000000008D92                 db    0
.eh_frame:0000000000008D93                 db    0
.eh_frame:0000000000008D94                 db 0E4h
.eh_frame:0000000000008D95                 db  0Dh
.eh_frame:0000000000008D96                 db    0
.eh_frame:0000000000008D97                 db    0
.eh_frame:0000000000008D98                 db  48h ; H
.eh_frame:0000000000008D99                 db 0D5h
.eh_frame:0000000000008D9A                 db 0FFh
.eh_frame:0000000000008D9B                 db 0FFh
.eh_frame:0000000000008D9C                 db  40h ; @
.eh_frame:0000000000008D9D                 db    0
.eh_frame:0000000000008D9E                 db    0
.eh_frame:0000000000008D9F                 db    0
.eh_frame:0000000000008DA0                 db    0
.eh_frame:0000000000008DA1                 db  44h ; D
.eh_frame:0000000000008DA2                 db  0Eh
.eh_frame:0000000000008DA3                 db  10h
.eh_frame:0000000000008DA4                 db  83h
.eh_frame:0000000000008DA5                 db    2
.eh_frame:0000000000008DA6                 db  5Ah ; Z
.eh_frame:0000000000008DA7                 db  0Ah
.eh_frame:0000000000008DA8                 db  0Eh
.eh_frame:0000000000008DA9                 db    8
.eh_frame:0000000000008DAA                 db  4Ah ; J
.eh_frame:0000000000008DAB                 db  0Bh
.eh_frame:0000000000008DAC                 db  53h ; S
.eh_frame:0000000000008DAD                 db  0Eh
.eh_frame:0000000000008DAE                 db    8
.eh_frame:0000000000008DAF                 db    0
.eh_frame:0000000000008DB0                 db  2Ch ; ,
.eh_frame:0000000000008DB1                 db    0
.eh_frame:0000000000008DB2                 db    0
.eh_frame:0000000000008DB3                 db    0
.eh_frame:0000000000008DB4                 db    4
.eh_frame:0000000000008DB5                 db  0Eh
.eh_frame:0000000000008DB6                 db    0
.eh_frame:0000000000008DB7                 db    0
.eh_frame:0000000000008DB8                 db  68h ; h
.eh_frame:0000000000008DB9                 db 0D5h
.eh_frame:0000000000008DBA                 db 0FFh
.eh_frame:0000000000008DBB                 db 0FFh
.eh_frame:0000000000008DBC                 db  57h ; W
.eh_frame:0000000000008DBD                 db    0
.eh_frame:0000000000008DBE                 db    0
.eh_frame:0000000000008DBF                 db    0
.eh_frame:0000000000008DC0                 db    0
.eh_frame:0000000000008DC1                 db  63h ; c
.eh_frame:0000000000008DC2                 db  0Eh
.eh_frame:0000000000008DC3                 db  10h
.eh_frame:0000000000008DC4                 db  8Ch
.eh_frame:0000000000008DC5                 db    2
.eh_frame:0000000000008DC6                 db  41h ; A
.eh_frame:0000000000008DC7                 db  0Eh
.eh_frame:0000000000008DC8                 db  18h
.eh_frame:0000000000008DC9                 db  86h
.eh_frame:0000000000008DCA                 db    3
.eh_frame:0000000000008DCB                 db  44h ; D
.eh_frame:0000000000008DCC                 db  0Eh
.eh_frame:0000000000008DCD                 db  20h
.eh_frame:0000000000008DCE                 db  83h
.eh_frame:0000000000008DCF                 db    4
.eh_frame:0000000000008DD0                 db  6Bh ; k
.eh_frame:0000000000008DD1                 db  0Eh
.eh_frame:0000000000008DD2                 db  18h
.eh_frame:0000000000008DD3                 db  41h ; A
.eh_frame:0000000000008DD4                 db  0Eh
.eh_frame:0000000000008DD5                 db  10h
.eh_frame:0000000000008DD6                 db  42h ; B
.eh_frame:0000000000008DD7                 db  0Eh
.eh_frame:0000000000008DD8                 db    8
.eh_frame:0000000000008DD9                 db    0
.eh_frame:0000000000008DDA                 db    0
.eh_frame:0000000000008DDB                 db    0
.eh_frame:0000000000008DDC                 db    0
.eh_frame:0000000000008DDD                 db    0
.eh_frame:0000000000008DDE                 db    0
.eh_frame:0000000000008DDF                 db    0
.eh_frame:0000000000008DE0                 db  3Ch ; <
.eh_frame:0000000000008DE1                 db    0
.eh_frame:0000000000008DE2                 db    0
.eh_frame:0000000000008DE3                 db    0
.eh_frame:0000000000008DE4                 db  34h ; 4
.eh_frame:0000000000008DE5                 db  0Eh
.eh_frame:0000000000008DE6                 db    0
.eh_frame:0000000000008DE7                 db    0
.eh_frame:0000000000008DE8                 db  98h
.eh_frame:0000000000008DE9                 db 0D5h
.eh_frame:0000000000008DEA                 db 0FFh
.eh_frame:0000000000008DEB                 db 0FFh
.eh_frame:0000000000008DEC                 db  83h
.eh_frame:0000000000008DED                 db    0
.eh_frame:0000000000008DEE                 db    0
.eh_frame:0000000000008DEF                 db    0
.eh_frame:0000000000008DF0                 db    0
.eh_frame:0000000000008DF1                 db  42h ; B
.eh_frame:0000000000008DF2                 db  0Eh
.eh_frame:0000000000008DF3                 db  10h
.eh_frame:0000000000008DF4                 db  8Dh
.eh_frame:0000000000008DF5                 db    2
.eh_frame:0000000000008DF6                 db  42h ; B
.eh_frame:0000000000008DF7                 db  0Eh
.eh_frame:0000000000008DF8                 db  18h
.eh_frame:0000000000008DF9                 db  8Ch
.eh_frame:0000000000008DFA                 db    3
.eh_frame:0000000000008DFB                 db  44h ; D
.eh_frame:0000000000008DFC                 db  0Eh
.eh_frame:0000000000008DFD                 db  20h
.eh_frame:0000000000008DFE                 db  86h
.eh_frame:0000000000008DFF                 db    4
.eh_frame:0000000000008E00                 db  41h ; A
.eh_frame:0000000000008E01                 db  0Eh
.eh_frame:0000000000008E02                 db  28h ; (
.eh_frame:0000000000008E03                 db  83h
.eh_frame:0000000000008E04                 db    5
.eh_frame:0000000000008E05                 db  4Ah ; J
.eh_frame:0000000000008E06                 db  0Eh
.eh_frame:0000000000008E07                 db  40h ; @
.eh_frame:0000000000008E08                 db    2
.eh_frame:0000000000008E09                 db  64h ; d
.eh_frame:0000000000008E0A                 db  0Ah
.eh_frame:0000000000008E0B                 db  0Eh
.eh_frame:0000000000008E0C                 db  28h ; (
.eh_frame:0000000000008E0D                 db  41h ; A
.eh_frame:0000000000008E0E                 db  0Eh
.eh_frame:0000000000008E0F                 db  20h
.eh_frame:0000000000008E10                 db  41h ; A
.eh_frame:0000000000008E11                 db  0Eh
.eh_frame:0000000000008E12                 db  18h
.eh_frame:0000000000008E13                 db  42h ; B
.eh_frame:0000000000008E14                 db  0Eh
.eh_frame:0000000000008E15                 db  10h
.eh_frame:0000000000008E16                 db  42h ; B
.eh_frame:0000000000008E17                 db  0Eh
.eh_frame:0000000000008E18                 db    8
.eh_frame:0000000000008E19                 db  41h ; A
.eh_frame:0000000000008E1A                 db  0Bh
.eh_frame:0000000000008E1B                 db    0
.eh_frame:0000000000008E1C                 db    0
.eh_frame:0000000000008E1D                 db    0
.eh_frame:0000000000008E1E                 db    0
.eh_frame:0000000000008E1F                 db    0
.eh_frame:0000000000008E20                 db  4Ch ; L
.eh_frame:0000000000008E21                 db    0
.eh_frame:0000000000008E22                 db    0
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db  74h ; t
.eh_frame:0000000000008E25                 db  0Eh
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db 0E8h
.eh_frame:0000000000008E29                 db 0D5h
.eh_frame:0000000000008E2A                 db 0FFh
.eh_frame:0000000000008E2B                 db 0FFh
.eh_frame:0000000000008E2C                 db  7Dh ; }
.eh_frame:0000000000008E2D                 db    0
.eh_frame:0000000000008E2E                 db    0
.eh_frame:0000000000008E2F                 db    0
.eh_frame:0000000000008E30                 db    0
.eh_frame:0000000000008E31                 db  42h ; B
.eh_frame:0000000000008E32                 db  0Eh
.eh_frame:0000000000008E33                 db  10h
.eh_frame:0000000000008E34                 db  8Ch
.eh_frame:0000000000008E35                 db    2
.eh_frame:0000000000008E36                 db  41h ; A
.eh_frame:0000000000008E37                 db  0Eh
.eh_frame:0000000000008E38                 db  18h
.eh_frame:0000000000008E39                 db  86h
.eh_frame:0000000000008E3A                 db    3
.eh_frame:0000000000008E3B                 db  44h ; D
.eh_frame:0000000000008E3C                 db  0Eh
.eh_frame:0000000000008E3D                 db  20h
.eh_frame:0000000000008E3E                 db  83h
.eh_frame:0000000000008E3F                 db    4
.eh_frame:0000000000008E40                 db  69h ; i
.eh_frame:0000000000008E41                 db  0Ah
.eh_frame:0000000000008E42                 db  0Eh
.eh_frame:0000000000008E43                 db  18h
.eh_frame:0000000000008E44                 db  41h ; A
.eh_frame:0000000000008E45                 db  0Eh
.eh_frame:0000000000008E46                 db  10h
.eh_frame:0000000000008E47                 db  42h ; B
.eh_frame:0000000000008E48                 db  0Eh
.eh_frame:0000000000008E49                 db    8
.eh_frame:0000000000008E4A                 db  45h ; E
.eh_frame:0000000000008E4B                 db  0Bh
.eh_frame:0000000000008E4C                 db  55h ; U
.eh_frame:0000000000008E4D                 db  0Ah
.eh_frame:0000000000008E4E                 db  0Eh
.eh_frame:0000000000008E4F                 db  18h
.eh_frame:0000000000008E50                 db  41h ; A
.eh_frame:0000000000008E51                 db  0Eh
.eh_frame:0000000000008E52                 db  10h
.eh_frame:0000000000008E53                 db  42h ; B
.eh_frame:0000000000008E54                 db  0Eh
.eh_frame:0000000000008E55                 db    8
.eh_frame:0000000000008E56                 db  48h ; H
.eh_frame:0000000000008E57                 db  0Bh
.eh_frame:0000000000008E58                 db  41h ; A
.eh_frame:0000000000008E59                 db  0Ah
.eh_frame:0000000000008E5A                 db  0Eh
.eh_frame:0000000000008E5B                 db  18h
.eh_frame:0000000000008E5C                 db  46h ; F
.eh_frame:0000000000008E5D                 db  0Eh
.eh_frame:0000000000008E5E                 db  10h
.eh_frame:0000000000008E5F                 db  42h ; B
.eh_frame:0000000000008E60                 db  0Eh
.eh_frame:0000000000008E61                 db    8
.eh_frame:0000000000008E62                 db  47h ; G
.eh_frame:0000000000008E63                 db  0Bh
.eh_frame:0000000000008E64                 db  49h ; I
.eh_frame:0000000000008E65                 db  0Eh
.eh_frame:0000000000008E66                 db  18h
.eh_frame:0000000000008E67                 db  41h ; A
.eh_frame:0000000000008E68                 db  0Eh
.eh_frame:0000000000008E69                 db  10h
.eh_frame:0000000000008E6A                 db  42h ; B
.eh_frame:0000000000008E6B                 db  0Eh
.eh_frame:0000000000008E6C                 db    8
.eh_frame:0000000000008E6D                 db    0
.eh_frame:0000000000008E6E                 db    0
.eh_frame:0000000000008E6F                 db    0
.eh_frame:0000000000008E70                 db  1Ch
.eh_frame:0000000000008E71                 db    0
.eh_frame:0000000000008E72                 db    0
.eh_frame:0000000000008E73                 db    0
.eh_frame:0000000000008E74                 db 0C4h
.eh_frame:0000000000008E75                 db  0Eh
.eh_frame:0000000000008E76                 db    0
.eh_frame:0000000000008E77                 db    0
.eh_frame:0000000000008E78                 db  18h
.eh_frame:0000000000008E79                 db 0D6h
.eh_frame:0000000000008E7A                 db 0FFh
.eh_frame:0000000000008E7B                 db 0FFh
.eh_frame:0000000000008E7C                 db  3Ch ; <
.eh_frame:0000000000008E7D                 db    0
.eh_frame:0000000000008E7E                 db    0
.eh_frame:0000000000008E7F                 db    0
.eh_frame:0000000000008E80                 db    0
.eh_frame:0000000000008E81                 db  44h ; D
.eh_frame:0000000000008E82                 db  0Eh
.eh_frame:0000000000008E83                 db  10h
.eh_frame:0000000000008E84                 db  61h ; a
.eh_frame:0000000000008E85                 db  0Ah
.eh_frame:0000000000008E86                 db  0Eh
.eh_frame:0000000000008E87                 db    8
.eh_frame:0000000000008E88                 db  4Bh ; K
.eh_frame:0000000000008E89                 db  0Bh
.eh_frame:0000000000008E8A                 db  4Bh ; K
.eh_frame:0000000000008E8B                 db  0Eh
.eh_frame:0000000000008E8C                 db    8
.eh_frame:0000000000008E8D                 db    0
.eh_frame:0000000000008E8E                 db    0
.eh_frame:0000000000008E8F                 db    0
.eh_frame:0000000000008E90                 db  74h ; t
.eh_frame:0000000000008E91                 db    0
.eh_frame:0000000000008E92                 db    0
.eh_frame:0000000000008E93                 db    0
.eh_frame:0000000000008E94                 db 0E4h
.eh_frame:0000000000008E95                 db  0Eh
.eh_frame:0000000000008E96                 db    0
.eh_frame:0000000000008E97                 db    0
.eh_frame:0000000000008E98                 db  38h ; 8
.eh_frame:0000000000008E99                 db 0D6h
.eh_frame:0000000000008E9A                 db 0FFh
.eh_frame:0000000000008E9B                 db 0FFh
.eh_frame:0000000000008E9C                 db 0B4h
.eh_frame:0000000000008E9D                 db    0
.eh_frame:0000000000008E9E                 db    0
.eh_frame:0000000000008E9F                 db    0
.eh_frame:0000000000008EA0                 db    0
.eh_frame:0000000000008EA1                 db  42h ; B
.eh_frame:0000000000008EA2                 db  0Eh
.eh_frame:0000000000008EA3                 db  10h
.eh_frame:0000000000008EA4                 db  8Fh
.eh_frame:0000000000008EA5                 db    2
.eh_frame:0000000000008EA6                 db  42h ; B
.eh_frame:0000000000008EA7                 db  0Eh
.eh_frame:0000000000008EA8                 db  18h
.eh_frame:0000000000008EA9                 db  8Eh
.eh_frame:0000000000008EAA                 db    3
.eh_frame:0000000000008EAB                 db  45h ; E
.eh_frame:0000000000008EAC                 db  0Eh
.eh_frame:0000000000008EAD                 db  20h
.eh_frame:0000000000008EAE                 db  8Dh
.eh_frame:0000000000008EAF                 db    4
.eh_frame:0000000000008EB0                 db  42h ; B
.eh_frame:0000000000008EB1                 db  0Eh
.eh_frame:0000000000008EB2                 db  28h ; (
.eh_frame:0000000000008EB3                 db  8Ch
.eh_frame:0000000000008EB4                 db    5
.eh_frame:0000000000008EB5                 db  44h ; D
.eh_frame:0000000000008EB6                 db  0Eh
.eh_frame:0000000000008EB7                 db  30h ; 0
.eh_frame:0000000000008EB8                 db  86h
.eh_frame:0000000000008EB9                 db    6
.eh_frame:0000000000008EBA                 db  41h ; A
.eh_frame:0000000000008EBB                 db  0Eh
.eh_frame:0000000000008EBC                 db  38h ; 8
.eh_frame:0000000000008EBD                 db  83h
.eh_frame:0000000000008EBE                 db    7
.eh_frame:0000000000008EBF                 db  4Ah ; J
.eh_frame:0000000000008EC0                 db  0Eh
.eh_frame:0000000000008EC1                 db  40h ; @
.eh_frame:0000000000008EC2                 db    2
.eh_frame:0000000000008EC3                 db  53h ; S
.eh_frame:0000000000008EC4                 db  0Ah
.eh_frame:0000000000008EC5                 db  0Eh
.eh_frame:0000000000008EC6                 db  38h ; 8
.eh_frame:0000000000008EC7                 db  41h ; A
.eh_frame:0000000000008EC8                 db  0Eh
.eh_frame:0000000000008EC9                 db  30h ; 0
.eh_frame:0000000000008ECA                 db  41h ; A
.eh_frame:0000000000008ECB                 db  0Eh
.eh_frame:0000000000008ECC                 db  28h ; (
.eh_frame:0000000000008ECD                 db  42h ; B
.eh_frame:0000000000008ECE                 db  0Eh
.eh_frame:0000000000008ECF                 db  20h
.eh_frame:0000000000008ED0                 db  42h ; B
.eh_frame:0000000000008ED1                 db  0Eh
.eh_frame:0000000000008ED2                 db  18h
.eh_frame:0000000000008ED3                 db  42h ; B
.eh_frame:0000000000008ED4                 db  0Eh
.eh_frame:0000000000008ED5                 db  10h
.eh_frame:0000000000008ED6                 db  42h ; B
.eh_frame:0000000000008ED7                 db  0Eh
.eh_frame:0000000000008ED8                 db    8
.eh_frame:0000000000008ED9                 db  49h ; I
.eh_frame:0000000000008EDA                 db  0Bh
.eh_frame:0000000000008EDB                 db  4Ch ; L
.eh_frame:0000000000008EDC                 db  0Ah
.eh_frame:0000000000008EDD                 db  0Eh
.eh_frame:0000000000008EDE                 db  38h ; 8
.eh_frame:0000000000008EDF                 db  41h ; A
.eh_frame:0000000000008EE0                 db  0Eh
.eh_frame:0000000000008EE1                 db  30h ; 0
.eh_frame:0000000000008EE2                 db  43h ; C
.eh_frame:0000000000008EE3                 db  0Eh
.eh_frame:0000000000008EE4                 db  28h ; (
.eh_frame:0000000000008EE5                 db  42h ; B
.eh_frame:0000000000008EE6                 db  0Eh
.eh_frame:0000000000008EE7                 db  20h
.eh_frame:0000000000008EE8                 db  42h ; B
.eh_frame:0000000000008EE9                 db  0Eh
.eh_frame:0000000000008EEA                 db  18h
.eh_frame:0000000000008EEB                 db  42h ; B
.eh_frame:0000000000008EEC                 db  0Eh
.eh_frame:0000000000008EED                 db  10h
.eh_frame:0000000000008EEE                 db  42h ; B
.eh_frame:0000000000008EEF                 db  0Eh
.eh_frame:0000000000008EF0                 db    8
.eh_frame:0000000000008EF1                 db  48h ; H
.eh_frame:0000000000008EF2                 db  0Bh
.eh_frame:0000000000008EF3                 db  44h ; D
.eh_frame:0000000000008EF4                 db  0Eh
.eh_frame:0000000000008EF5                 db  38h ; 8
.eh_frame:0000000000008EF6                 db  46h ; F
.eh_frame:0000000000008EF7                 db  0Eh
.eh_frame:0000000000008EF8                 db  30h ; 0
.eh_frame:0000000000008EF9                 db  41h ; A
.eh_frame:0000000000008EFA                 db  0Eh
.eh_frame:0000000000008EFB                 db  28h ; (
.eh_frame:0000000000008EFC                 db  42h ; B
.eh_frame:0000000000008EFD                 db  0Eh
.eh_frame:0000000000008EFE                 db  20h
.eh_frame:0000000000008EFF                 db  42h ; B
.eh_frame:0000000000008F00                 db  0Eh
.eh_frame:0000000000008F01                 db  18h
.eh_frame:0000000000008F02                 db  42h ; B
.eh_frame:0000000000008F03                 db  0Eh
.eh_frame:0000000000008F04                 db  10h
.eh_frame:0000000000008F05                 db  42h ; B
.eh_frame:0000000000008F06                 db  0Eh
.eh_frame:0000000000008F07                 db    8
.eh_frame:0000000000008F08                 db  48h ; H
.eh_frame:0000000000008F09                 db    0
.eh_frame:0000000000008F0A                 db    0
.eh_frame:0000000000008F0B                 db    0
.eh_frame:0000000000008F0C                 db  5Ch ; \
.eh_frame:0000000000008F0D                 db  0Fh
.eh_frame:0000000000008F0E                 db    0
.eh_frame:0000000000008F0F                 db    0
.eh_frame:0000000000008F10                 db  80h
.eh_frame:0000000000008F11                 db 0D6h
.eh_frame:0000000000008F12                 db 0FFh
.eh_frame:0000000000008F13                 db 0FFh
.eh_frame:0000000000008F14                 db 0A9h
.eh_frame:0000000000008F15                 db    0
.eh_frame:0000000000008F16                 db    0
.eh_frame:0000000000008F17                 db    0
.eh_frame:0000000000008F18                 db    0
.eh_frame:0000000000008F19                 db  42h ; B
.eh_frame:0000000000008F1A                 db  0Eh
.eh_frame:0000000000008F1B                 db  10h
.eh_frame:0000000000008F1C                 db  8Fh
.eh_frame:0000000000008F1D                 db    2
.eh_frame:0000000000008F1E                 db  42h ; B
.eh_frame:0000000000008F1F                 db  0Eh
.eh_frame:0000000000008F20                 db  18h
.eh_frame:0000000000008F21                 db  8Eh
.eh_frame:0000000000008F22                 db    3
.eh_frame:0000000000008F23                 db  45h ; E
.eh_frame:0000000000008F24                 db  0Eh
.eh_frame:0000000000008F25                 db  20h
.eh_frame:0000000000008F26                 db  8Dh
.eh_frame:0000000000008F27                 db    4
.eh_frame:0000000000008F28                 db  42h ; B
.eh_frame:0000000000008F29                 db  0Eh
.eh_frame:0000000000008F2A                 db  28h ; (
.eh_frame:0000000000008F2B                 db  8Ch
.eh_frame:0000000000008F2C                 db    5
.eh_frame:0000000000008F2D                 db  44h ; D
.eh_frame:0000000000008F2E                 db  0Eh
.eh_frame:0000000000008F2F                 db  30h ; 0
.eh_frame:0000000000008F30                 db  86h
.eh_frame:0000000000008F31                 db    6
.eh_frame:0000000000008F32                 db  41h ; A
.eh_frame:0000000000008F33                 db  0Eh
.eh_frame:0000000000008F34                 db  38h ; 8
.eh_frame:0000000000008F35                 db  83h
.eh_frame:0000000000008F36                 db    7
.eh_frame:0000000000008F37                 db  4Ah ; J
.eh_frame:0000000000008F38                 db  0Eh
.eh_frame:0000000000008F39                 db  50h ; P
.eh_frame:0000000000008F3A                 db    2
.eh_frame:0000000000008F3B                 db  6Bh ; k
.eh_frame:0000000000008F3C                 db  0Ah
.eh_frame:0000000000008F3D                 db  0Eh
.eh_frame:0000000000008F3E                 db  38h ; 8
.eh_frame:0000000000008F3F                 db  43h ; C
.eh_frame:0000000000008F40                 db  0Eh
.eh_frame:0000000000008F41                 db  30h ; 0
.eh_frame:0000000000008F42                 db  41h ; A
.eh_frame:0000000000008F43                 db  0Eh
.eh_frame:0000000000008F44                 db  28h ; (
.eh_frame:0000000000008F45                 db  42h ; B
.eh_frame:0000000000008F46                 db  0Eh
.eh_frame:0000000000008F47                 db  20h
.eh_frame:0000000000008F48                 db  42h ; B
.eh_frame:0000000000008F49                 db  0Eh
.eh_frame:0000000000008F4A                 db  18h
.eh_frame:0000000000008F4B                 db  42h ; B
.eh_frame:0000000000008F4C                 db  0Eh
.eh_frame:0000000000008F4D                 db  10h
.eh_frame:0000000000008F4E                 db  42h ; B
.eh_frame:0000000000008F4F                 db  0Eh
.eh_frame:0000000000008F50                 db    8
.eh_frame:0000000000008F51                 db  47h ; G
.eh_frame:0000000000008F52                 db  0Bh
.eh_frame:0000000000008F53                 db    0
.eh_frame:0000000000008F54                 db  40h ; @
.eh_frame:0000000000008F55                 db    0
.eh_frame:0000000000008F56                 db    0
.eh_frame:0000000000008F57                 db    0
.eh_frame:0000000000008F58                 db 0A8h
.eh_frame:0000000000008F59                 db  0Fh
.eh_frame:0000000000008F5A                 db    0
.eh_frame:0000000000008F5B                 db    0
.eh_frame:0000000000008F5C                 db 0E4h
.eh_frame:0000000000008F5D                 db 0D6h
.eh_frame:0000000000008F5E                 db 0FFh
.eh_frame:0000000000008F5F                 db 0FFh
.eh_frame:0000000000008F60                 db  5Eh ; ^
.eh_frame:0000000000008F61                 db    0
.eh_frame:0000000000008F62                 db    0
.eh_frame:0000000000008F63                 db    0
.eh_frame:0000000000008F64                 db    0
.eh_frame:0000000000008F65                 db  42h ; B
.eh_frame:0000000000008F66                 db  0Eh
.eh_frame:0000000000008F67                 db  10h
.eh_frame:0000000000008F68                 db  8Ch
.eh_frame:0000000000008F69                 db    2
.eh_frame:0000000000008F6A                 db  41h ; A
.eh_frame:0000000000008F6B                 db  0Eh
.eh_frame:0000000000008F6C                 db  18h
.eh_frame:0000000000008F6D                 db  86h
.eh_frame:0000000000008F6E                 db    3
.eh_frame:0000000000008F6F                 db  44h ; D
.eh_frame:0000000000008F70                 db  0Eh
.eh_frame:0000000000008F71                 db  20h
.eh_frame:0000000000008F72                 db  83h
.eh_frame:0000000000008F73                 db    4
.eh_frame:0000000000008F74                 db  4Ah ; J
.eh_frame:0000000000008F75                 db  0Eh
.eh_frame:0000000000008F76                 db  30h ; 0
.eh_frame:0000000000008F77                 db  62h ; b
.eh_frame:0000000000008F78                 db  0Ah
.eh_frame:0000000000008F79                 db  0Eh
.eh_frame:0000000000008F7A                 db  20h
.eh_frame:0000000000008F7B                 db  4Ah ; J
.eh_frame:0000000000008F7C                 db  0Eh
.eh_frame:0000000000008F7D                 db  18h
.eh_frame:0000000000008F7E                 db  41h ; A
.eh_frame:0000000000008F7F                 db  0Eh
.eh_frame:0000000000008F80                 db  10h
.eh_frame:0000000000008F81                 db  42h ; B
.eh_frame:0000000000008F82                 db  0Eh
.eh_frame:0000000000008F83                 db    8
.eh_frame:0000000000008F84                 db  48h ; H
.eh_frame:0000000000008F85                 db  0Bh
.eh_frame:0000000000008F86                 db  4Fh ; O
.eh_frame:0000000000008F87                 db  0Eh
.eh_frame:0000000000008F88                 db  20h
.eh_frame:0000000000008F89                 db  43h ; C
.eh_frame:0000000000008F8A                 db  0Eh
.eh_frame:0000000000008F8B                 db  18h
.eh_frame:0000000000008F8C                 db  41h ; A
.eh_frame:0000000000008F8D                 db  0Eh
.eh_frame:0000000000008F8E                 db  10h
.eh_frame:0000000000008F8F                 db  42h ; B
.eh_frame:0000000000008F90                 db  0Eh
.eh_frame:0000000000008F91                 db    8
.eh_frame:0000000000008F92                 db    0
.eh_frame:0000000000008F93                 db    0
.eh_frame:0000000000008F94                 db    0
.eh_frame:0000000000008F95                 db    0
.eh_frame:0000000000008F96                 db    0
.eh_frame:0000000000008F97                 db    0
.eh_frame:0000000000008F98                 db  44h ; D
.eh_frame:0000000000008F99                 db    0
.eh_frame:0000000000008F9A                 db    0
.eh_frame:0000000000008F9B                 db    0
.eh_frame:0000000000008F9C                 db 0ECh
.eh_frame:0000000000008F9D                 db  0Fh
.eh_frame:0000000000008F9E                 db    0
.eh_frame:0000000000008F9F                 db    0
.eh_frame:0000000000008FA0                 db    0
.eh_frame:0000000000008FA1                 db 0D7h
.eh_frame:0000000000008FA2                 db 0FFh
.eh_frame:0000000000008FA3                 db 0FFh
.eh_frame:0000000000008FA4                 db  65h ; e
.eh_frame:0000000000008FA5                 db    0
.eh_frame:0000000000008FA6                 db    0
.eh_frame:0000000000008FA7                 db    0
.eh_frame:0000000000008FA8                 db    0
.eh_frame:0000000000008FA9                 db  42h ; B
.eh_frame:0000000000008FAA                 db  0Eh
.eh_frame:0000000000008FAB                 db  10h
.eh_frame:0000000000008FAC                 db  8Fh
.eh_frame:0000000000008FAD                 db    2
.eh_frame:0000000000008FAE                 db  42h ; B
.eh_frame:0000000000008FAF                 db  0Eh
.eh_frame:0000000000008FB0                 db  18h
.eh_frame:0000000000008FB1                 db  8Eh
.eh_frame:0000000000008FB2                 db    3
.eh_frame:0000000000008FB3                 db  45h ; E
.eh_frame:0000000000008FB4                 db  0Eh
.eh_frame:0000000000008FB5                 db  20h
.eh_frame:0000000000008FB6                 db  8Dh
.eh_frame:0000000000008FB7                 db    4
.eh_frame:0000000000008FB8                 db  42h ; B
.eh_frame:0000000000008FB9                 db  0Eh
.eh_frame:0000000000008FBA                 db  28h ; (
.eh_frame:0000000000008FBB                 db  8Ch
.eh_frame:0000000000008FBC                 db    5
.eh_frame:0000000000008FBD                 db  48h ; H
.eh_frame:0000000000008FBE                 db  0Eh
.eh_frame:0000000000008FBF                 db  30h ; 0
.eh_frame:0000000000008FC0                 db  86h
.eh_frame:0000000000008FC1                 db    6
.eh_frame:0000000000008FC2                 db  48h ; H
.eh_frame:0000000000008FC3                 db  0Eh
.eh_frame:0000000000008FC4                 db  38h ; 8
.eh_frame:0000000000008FC5                 db  83h
.eh_frame:0000000000008FC6                 db    7
.eh_frame:0000000000008FC7                 db  4Dh ; M
.eh_frame:0000000000008FC8                 db  0Eh
.eh_frame:0000000000008FC9                 db  40h ; @
.eh_frame:0000000000008FCA                 db  72h ; r
.eh_frame:0000000000008FCB                 db  0Eh
.eh_frame:0000000000008FCC                 db  38h ; 8
.eh_frame:0000000000008FCD                 db  41h ; A
.eh_frame:0000000000008FCE                 db  0Eh
.eh_frame:0000000000008FCF                 db  30h ; 0
.eh_frame:0000000000008FD0                 db  41h ; A
.eh_frame:0000000000008FD1                 db  0Eh
.eh_frame:0000000000008FD2                 db  28h ; (
.eh_frame:0000000000008FD3                 db  42h ; B
.eh_frame:0000000000008FD4                 db  0Eh
.eh_frame:0000000000008FD5                 db  20h
.eh_frame:0000000000008FD6                 db  42h ; B
.eh_frame:0000000000008FD7                 db  0Eh
.eh_frame:0000000000008FD8                 db  18h
.eh_frame:0000000000008FD9                 db  42h ; B
.eh_frame:0000000000008FDA                 db  0Eh
.eh_frame:0000000000008FDB                 db  10h
.eh_frame:0000000000008FDC                 db  42h ; B
.eh_frame:0000000000008FDD                 db  0Eh
.eh_frame:0000000000008FDE                 db    8
.eh_frame:0000000000008FDF                 db    0
.eh_frame:0000000000008FE0                 db  14h
.eh_frame:0000000000008FE1                 db    0
.eh_frame:0000000000008FE2                 db    0
.eh_frame:0000000000008FE3                 db    0
.eh_frame:0000000000008FE4                 db  34h ; 4
.eh_frame:0000000000008FE5                 db  10h
.eh_frame:0000000000008FE6                 db    0
.eh_frame:0000000000008FE7                 db    0
.eh_frame:0000000000008FE8                 db  28h ; (
.eh_frame:0000000000008FE9                 db 0D7h
.eh_frame:0000000000008FEA                 db 0FFh
.eh_frame:0000000000008FEB                 db 0FFh
.eh_frame:0000000000008FEC                 db    2
.eh_frame:0000000000008FED                 db    0
.eh_frame:0000000000008FEE                 db    0
.eh_frame:0000000000008FEF                 db    0
.eh_frame:0000000000008FF0                 db    0
.eh_frame:0000000000008FF1                 db    0
.eh_frame:0000000000008FF2                 db    0
.eh_frame:0000000000008FF3                 db    0
.eh_frame:0000000000008FF4                 db    0
.eh_frame:0000000000008FF5                 db    0
.eh_frame:0000000000008FF6                 db    0
.eh_frame:0000000000008FF7                 db    0
.eh_frame:0000000000008FF8                 db  10h
.eh_frame:0000000000008FF9                 db    0
.eh_frame:0000000000008FFA                 db    0
.eh_frame:0000000000008FFB                 db    0
.eh_frame:0000000000008FFC                 db  4Ch ; L
.eh_frame:0000000000008FFD                 db  10h
.eh_frame:0000000000008FFE                 db    0
.eh_frame:0000000000008FFF                 db    0
.eh_frame:0000000000009000                 db  20h
.eh_frame:0000000000009001                 db 0D7h
.eh_frame:0000000000009002                 db 0FFh
.eh_frame:0000000000009003                 db 0FFh
.eh_frame:0000000000009004                 db  0Eh
.eh_frame:0000000000009005                 db    0
.eh_frame:0000000000009006                 db    0
.eh_frame:0000000000009007                 db    0
.eh_frame:0000000000009008                 db    0
.eh_frame:0000000000009009                 db    0
.eh_frame:000000000000900A                 db    0
.eh_frame:000000000000900B                 db    0
.eh_frame:000000000000900C __FRAME_END__   db    0
.eh_frame:000000000000900D                 db    0
.eh_frame:000000000000900E                 db    0
.eh_frame:000000000000900F                 db    0
.eh_frame:000000000000900F _eh_frame       ends
.eh_frame:000000000000900F
.init_array:00000000002099B0 ; ELF Initialization Function Table
.init_array:00000000002099B0 ; ===========================================================================
.init_array:00000000002099B0
.init_array:00000000002099B0 ; Segment type: Pure data
.init_array:00000000002099B0 ; Segment permissions: Read/Write
.init_array:00000000002099B0 _init_array     segment qword public 'DATA' use64
.init_array:00000000002099B0                 assume cs:_init_array
.init_array:00000000002099B0                 ;org 2099B0h
.init_array:00000000002099B0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000002099B0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:00000000002099B0                                         ; LOAD:0000000000000210↑o ...
.init_array:00000000002099B0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000002099B0
.fini_array:00000000002099B8 ; ELF Termination Function Table
.fini_array:00000000002099B8 ; ===========================================================================
.fini_array:00000000002099B8
.fini_array:00000000002099B8 ; Segment type: Pure data
.fini_array:00000000002099B8 ; Segment permissions: Read/Write
.fini_array:00000000002099B8 _fini_array     segment qword public 'DATA' use64
.fini_array:00000000002099B8                 assume cs:_fini_array
.fini_array:00000000002099B8                 ;org 2099B8h
.fini_array:00000000002099B8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:00000000002099B8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:00000000002099B8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:00000000002099B8
.data.rel.ro:00000000002099C0 ; ===========================================================================
.data.rel.ro:00000000002099C0
.data.rel.ro:00000000002099C0 ; Segment type: Pure data
.data.rel.ro:00000000002099C0 ; Segment permissions: Read/Write
.data.rel.ro:00000000002099C0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:00000000002099C0                 assume cs:_data_rel_ro
.data.rel.ro:00000000002099C0                 ;org 2099C0h
.data.rel.ro:00000000002099C0 ; struct option longopts
.data.rel.ro:00000000002099C0 longopts        dq offset aCount        ; name
.data.rel.ro:00000000002099C0                                         ; DATA XREF: main:loc_1C23↑o
.data.rel.ro:00000000002099C0                 dd 0                    ; has_arg ; "count"
.data.rel.ro:00000000002099C0                 db 4 dup(0)
.data.rel.ro:00000000002099C0                 dq 0                    ; flag
.data.rel.ro:00000000002099C0                 dd 63h                  ; val
.data.rel.ro:00000000002099C0                 db 4 dup(0)
.data.rel.ro:00000000002099E0                 dq offset aAllRepeated+6 ; "repeated"
.data.rel.ro:00000000002099E8                 db    0
.data.rel.ro:00000000002099E9                 db    0
.data.rel.ro:00000000002099EA                 db    0
.data.rel.ro:00000000002099EB                 db    0
.data.rel.ro:00000000002099EC                 db    0
.data.rel.ro:00000000002099ED                 db    0
.data.rel.ro:00000000002099EE                 db    0
.data.rel.ro:00000000002099EF                 db    0
.data.rel.ro:00000000002099F0                 db    0
.data.rel.ro:00000000002099F1                 db    0
.data.rel.ro:00000000002099F2                 db    0
.data.rel.ro:00000000002099F3                 db    0
.data.rel.ro:00000000002099F4                 db    0
.data.rel.ro:00000000002099F5                 db    0
.data.rel.ro:00000000002099F6                 db    0
.data.rel.ro:00000000002099F7                 db    0
.data.rel.ro:00000000002099F8                 db  64h ; d
.data.rel.ro:00000000002099F9                 db    0
.data.rel.ro:00000000002099FA                 db    0
.data.rel.ro:00000000002099FB                 db    0
.data.rel.ro:00000000002099FC                 db    0
.data.rel.ro:00000000002099FD                 db    0
.data.rel.ro:00000000002099FE                 db    0
.data.rel.ro:00000000002099FF                 db    0
.data.rel.ro:0000000000209A00                 dq offset aAllRepeated+2 ; "all-repeated"
.data.rel.ro:0000000000209A08                 db    2
.data.rel.ro:0000000000209A09                 db    0
.data.rel.ro:0000000000209A0A                 db    0
.data.rel.ro:0000000000209A0B                 db    0
.data.rel.ro:0000000000209A0C                 db    0
.data.rel.ro:0000000000209A0D                 db    0
.data.rel.ro:0000000000209A0E                 db    0
.data.rel.ro:0000000000209A0F                 db    0
.data.rel.ro:0000000000209A10                 db    0
.data.rel.ro:0000000000209A11                 db    0
.data.rel.ro:0000000000209A12                 db    0
.data.rel.ro:0000000000209A13                 db    0
.data.rel.ro:0000000000209A14                 db    0
.data.rel.ro:0000000000209A15                 db    0
.data.rel.ro:0000000000209A16                 db    0
.data.rel.ro:0000000000209A17                 db    0
.data.rel.ro:0000000000209A18                 db  44h ; D
.data.rel.ro:0000000000209A19                 db    0
.data.rel.ro:0000000000209A1A                 db    0
.data.rel.ro:0000000000209A1B                 db    0
.data.rel.ro:0000000000209A1C                 db    0
.data.rel.ro:0000000000209A1D                 db    0
.data.rel.ro:0000000000209A1E                 db    0
.data.rel.ro:0000000000209A1F                 db    0
.data.rel.ro:0000000000209A20                 dq offset aGroup+2      ; "group"
.data.rel.ro:0000000000209A28                 db    2
.data.rel.ro:0000000000209A29                 db    0
.data.rel.ro:0000000000209A2A                 db    0
.data.rel.ro:0000000000209A2B                 db    0
.data.rel.ro:0000000000209A2C                 db    0
.data.rel.ro:0000000000209A2D                 db    0
.data.rel.ro:0000000000209A2E                 db    0
.data.rel.ro:0000000000209A2F                 db    0
.data.rel.ro:0000000000209A30                 db    0
.data.rel.ro:0000000000209A31                 db    0
.data.rel.ro:0000000000209A32                 db    0
.data.rel.ro:0000000000209A33                 db    0
.data.rel.ro:0000000000209A34                 db    0
.data.rel.ro:0000000000209A35                 db    0
.data.rel.ro:0000000000209A36                 db    0
.data.rel.ro:0000000000209A37                 db    0
.data.rel.ro:0000000000209A38                 db  80h
.data.rel.ro:0000000000209A39                 db    0
.data.rel.ro:0000000000209A3A                 db    0
.data.rel.ro:0000000000209A3B                 db    0
.data.rel.ro:0000000000209A3C                 db    0
.data.rel.ro:0000000000209A3D                 db    0
.data.rel.ro:0000000000209A3E                 db    0
.data.rel.ro:0000000000209A3F                 db    0
.data.rel.ro:0000000000209A40                 dq offset aIgnoreCase   ; "ignore-case"
.data.rel.ro:0000000000209A48                 db    0
.data.rel.ro:0000000000209A49                 db    0
.data.rel.ro:0000000000209A4A                 db    0
.data.rel.ro:0000000000209A4B                 db    0
.data.rel.ro:0000000000209A4C                 db    0
.data.rel.ro:0000000000209A4D                 db    0
.data.rel.ro:0000000000209A4E                 db    0
.data.rel.ro:0000000000209A4F                 db    0
.data.rel.ro:0000000000209A50                 db    0
.data.rel.ro:0000000000209A51                 db    0
.data.rel.ro:0000000000209A52                 db    0
.data.rel.ro:0000000000209A53                 db    0
.data.rel.ro:0000000000209A54                 db    0
.data.rel.ro:0000000000209A55                 db    0
.data.rel.ro:0000000000209A56                 db    0
.data.rel.ro:0000000000209A57                 db    0
.data.rel.ro:0000000000209A58                 db  69h ; i
.data.rel.ro:0000000000209A59                 db    0
.data.rel.ro:0000000000209A5A                 db    0
.data.rel.ro:0000000000209A5B                 db    0
.data.rel.ro:0000000000209A5C                 db    0
.data.rel.ro:0000000000209A5D                 db    0
.data.rel.ro:0000000000209A5E                 db    0
.data.rel.ro:0000000000209A5F                 db    0
.data.rel.ro:0000000000209A60                 dq offset aUnique       ; "unique"
.data.rel.ro:0000000000209A68                 db    0
.data.rel.ro:0000000000209A69                 db    0
.data.rel.ro:0000000000209A6A                 db    0
.data.rel.ro:0000000000209A6B                 db    0
.data.rel.ro:0000000000209A6C                 db    0
.data.rel.ro:0000000000209A6D                 db    0
.data.rel.ro:0000000000209A6E                 db    0
.data.rel.ro:0000000000209A6F                 db    0
.data.rel.ro:0000000000209A70                 db    0
.data.rel.ro:0000000000209A71                 db    0
.data.rel.ro:0000000000209A72                 db    0
.data.rel.ro:0000000000209A73                 db    0
.data.rel.ro:0000000000209A74                 db    0
.data.rel.ro:0000000000209A75                 db    0
.data.rel.ro:0000000000209A76                 db    0
.data.rel.ro:0000000000209A77                 db    0
.data.rel.ro:0000000000209A78                 db  75h ; u
.data.rel.ro:0000000000209A79                 db    0
.data.rel.ro:0000000000209A7A                 db    0
.data.rel.ro:0000000000209A7B                 db    0
.data.rel.ro:0000000000209A7C                 db    0
.data.rel.ro:0000000000209A7D                 db    0
.data.rel.ro:0000000000209A7E                 db    0
.data.rel.ro:0000000000209A7F                 db    0
.data.rel.ro:0000000000209A80                 dq offset aSkipFields   ; "skip-fields"
.data.rel.ro:0000000000209A88                 db    1
.data.rel.ro:0000000000209A89                 db    0
.data.rel.ro:0000000000209A8A                 db    0
.data.rel.ro:0000000000209A8B                 db    0
.data.rel.ro:0000000000209A8C                 db    0
.data.rel.ro:0000000000209A8D                 db    0
.data.rel.ro:0000000000209A8E                 db    0
.data.rel.ro:0000000000209A8F                 db    0
.data.rel.ro:0000000000209A90                 db    0
.data.rel.ro:0000000000209A91                 db    0
.data.rel.ro:0000000000209A92                 db    0
.data.rel.ro:0000000000209A93                 db    0
.data.rel.ro:0000000000209A94                 db    0
.data.rel.ro:0000000000209A95                 db    0
.data.rel.ro:0000000000209A96                 db    0
.data.rel.ro:0000000000209A97                 db    0
.data.rel.ro:0000000000209A98                 db  66h ; f
.data.rel.ro:0000000000209A99                 db    0
.data.rel.ro:0000000000209A9A                 db    0
.data.rel.ro:0000000000209A9B                 db    0
.data.rel.ro:0000000000209A9C                 db    0
.data.rel.ro:0000000000209A9D                 db    0
.data.rel.ro:0000000000209A9E                 db    0
.data.rel.ro:0000000000209A9F                 db    0
.data.rel.ro:0000000000209AA0                 dq offset aSkipChars    ; "skip-chars"
.data.rel.ro:0000000000209AA8                 db    1
.data.rel.ro:0000000000209AA9                 db    0
.data.rel.ro:0000000000209AAA                 db    0
.data.rel.ro:0000000000209AAB                 db    0
.data.rel.ro:0000000000209AAC                 db    0
.data.rel.ro:0000000000209AAD                 db    0
.data.rel.ro:0000000000209AAE                 db    0
.data.rel.ro:0000000000209AAF                 db    0
.data.rel.ro:0000000000209AB0                 db    0
.data.rel.ro:0000000000209AB1                 db    0
.data.rel.ro:0000000000209AB2                 db    0
.data.rel.ro:0000000000209AB3                 db    0
.data.rel.ro:0000000000209AB4                 db    0
.data.rel.ro:0000000000209AB5                 db    0
.data.rel.ro:0000000000209AB6                 db    0
.data.rel.ro:0000000000209AB7                 db    0
.data.rel.ro:0000000000209AB8                 db  73h ; s
.data.rel.ro:0000000000209AB9                 db    0
.data.rel.ro:0000000000209ABA                 db    0
.data.rel.ro:0000000000209ABB                 db    0
.data.rel.ro:0000000000209ABC                 db    0
.data.rel.ro:0000000000209ABD                 db    0
.data.rel.ro:0000000000209ABE                 db    0
.data.rel.ro:0000000000209ABF                 db    0
.data.rel.ro:0000000000209AC0                 dq offset aCheckChars   ; "check-chars"
.data.rel.ro:0000000000209AC8                 db    1
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  77h ; w
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:0000000000209AE8                 db    0
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  7Ah ; z
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B08                 db    0
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  7Eh ; ~
.data.rel.ro:0000000000209B19                 db 0FFh
.data.rel.ro:0000000000209B1A                 db 0FFh
.data.rel.ro:0000000000209B1B                 db 0FFh
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  7Dh ; }
.data.rel.ro:0000000000209B39                 db 0FFh
.data.rel.ro:0000000000209B3A                 db 0FFh
.data.rel.ro:0000000000209B3B                 db 0FFh
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 db    0
.data.rel.ro:0000000000209B41                 db    0
.data.rel.ro:0000000000209B42                 db    0
.data.rel.ro:0000000000209B43                 db    0
.data.rel.ro:0000000000209B44                 db    0
.data.rel.ro:0000000000209B45                 db    0
.data.rel.ro:0000000000209B46                 db    0
.data.rel.ro:0000000000209B47                 db    0
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db    0
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60 grouping_method_string dq offset aPrepend
.data.rel.ro:0000000000209B60                                         ; DATA XREF: main+5AB↑o
.data.rel.ro:0000000000209B60                                         ; "prepend"
.data.rel.ro:0000000000209B68                 dq offset aAppend       ; "append"
.data.rel.ro:0000000000209B70                 dq offset aSeparate     ; "separate"
.data.rel.ro:0000000000209B78                 dq offset aBoth         ; "both"
.data.rel.ro:0000000000209B80                 db    0
.data.rel.ro:0000000000209B81                 db    0
.data.rel.ro:0000000000209B82                 db    0
.data.rel.ro:0000000000209B83                 db    0
.data.rel.ro:0000000000209B84                 db    0
.data.rel.ro:0000000000209B85                 db    0
.data.rel.ro:0000000000209B86                 db    0
.data.rel.ro:0000000000209B87                 db    0
.data.rel.ro:0000000000209B88                 db    0
.data.rel.ro:0000000000209B89                 db    0
.data.rel.ro:0000000000209B8A                 db    0
.data.rel.ro:0000000000209B8B                 db    0
.data.rel.ro:0000000000209B8C                 db    0
.data.rel.ro:0000000000209B8D                 db    0
.data.rel.ro:0000000000209B8E                 db    0
.data.rel.ro:0000000000209B8F                 db    0
.data.rel.ro:0000000000209B90                 db    0
.data.rel.ro:0000000000209B91                 db    0
.data.rel.ro:0000000000209B92                 db    0
.data.rel.ro:0000000000209B93                 db    0
.data.rel.ro:0000000000209B94                 db    0
.data.rel.ro:0000000000209B95                 db    0
.data.rel.ro:0000000000209B96                 db    0
.data.rel.ro:0000000000209B97                 db    0
.data.rel.ro:0000000000209B98                 db    0
.data.rel.ro:0000000000209B99                 db    0
.data.rel.ro:0000000000209B9A                 db    0
.data.rel.ro:0000000000209B9B                 db    0
.data.rel.ro:0000000000209B9C                 db    0
.data.rel.ro:0000000000209B9D                 db    0
.data.rel.ro:0000000000209B9E                 db    0
.data.rel.ro:0000000000209B9F                 db    0
.data.rel.ro:0000000000209BA0 delimit_method_string dq offset aNone   ; DATA XREF: main+559↑o
.data.rel.ro:0000000000209BA0                                         ; "none"
.data.rel.ro:0000000000209BA8                 dq offset aPrepend      ; "prepend"
.data.rel.ro:0000000000209BB0                 dq offset aSeparate     ; "separate"
.data.rel.ro:0000000000209BB8                 align 20h
.data.rel.ro:0000000000209BC0                 public quoting_style_args
.data.rel.ro:0000000000209BC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209BC8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209BD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209BD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209BE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209BE8                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000209BF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209BF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209C00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209C08                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209C10                 db    0
.data.rel.ro:0000000000209C11                 db    0
.data.rel.ro:0000000000209C12                 db    0
.data.rel.ro:0000000000209C13                 db    0
.data.rel.ro:0000000000209C14                 db    0
.data.rel.ro:0000000000209C15                 db    0
.data.rel.ro:0000000000209C16                 db    0
.data.rel.ro:0000000000209C17                 db    0
.data.rel.ro:0000000000209C17 _data_rel_ro    ends
.data.rel.ro:0000000000209C17
LOAD:0000000000209C18 ; ELF Dynamic Information
LOAD:0000000000209C18 ; ===========================================================================
LOAD:0000000000209C18
LOAD:0000000000209C18 ; Segment type: Pure data
LOAD:0000000000209C18 ; Segment permissions: Read/Write
LOAD:0000000000209C18 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209C18                 assume cs:LOAD
LOAD:0000000000209C18                 ;org 209C18h
LOAD:0000000000209C18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209C18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209C18                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209C28                 Elf64_Dyn <0Ch, 1718h>  ; DT_INIT
LOAD:0000000000209C38                 Elf64_Dyn <0Dh, 6730h>  ; DT_FINI
LOAD:0000000000209C48                 Elf64_Dyn <19h, 2099B0h> ; DT_INIT_ARRAY
LOAD:0000000000209C58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C68                 Elf64_Dyn <1Ah, 2099B8h> ; DT_FINI_ARRAY
LOAD:0000000000209C78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209C88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209C98                 Elf64_Dyn <5, 970h>     ; DT_STRTAB
LOAD:0000000000209CA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000209CB8                 Elf64_Dyn <0Ah, 311h>   ; DT_STRSZ
LOAD:0000000000209CC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209CD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209CE8                 Elf64_Dyn <3, 209E08h>  ; DT_PLTGOT
LOAD:0000000000209CF8                 Elf64_Dyn <2, 528h>     ; DT_PLTRELSZ
LOAD:0000000000209D08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209D18                 Elf64_Dyn <17h, 11F0h>  ; DT_JMPREL
LOAD:0000000000209D28                 Elf64_Dyn <7, 0D70h>    ; DT_RELA
LOAD:0000000000209D38                 Elf64_Dyn <8, 480h>     ; DT_RELASZ
LOAD:0000000000209D48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D78                 Elf64_Dyn <6FFFFFFEh, 0D10h> ; DT_VERNEED
LOAD:0000000000209D88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209D98                 Elf64_Dyn <6FFFFFF0h, 0C82h> ; DT_VERSYM
LOAD:0000000000209DA8                 Elf64_Dyn <6FFFFFF9h, 24h> ; DT_RELACOUNT
LOAD:0000000000209DB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209DC8                 db    0
LOAD:0000000000209DC9                 db    0
LOAD:0000000000209DCA                 db    0
LOAD:0000000000209DCB                 db    0
LOAD:0000000000209DCC                 db    0
LOAD:0000000000209DCD                 db    0
LOAD:0000000000209DCE                 db    0
LOAD:0000000000209DCF                 db    0
LOAD:0000000000209DD0                 db    0
LOAD:0000000000209DD1                 db    0
LOAD:0000000000209DD2                 db    0
LOAD:0000000000209DD3                 db    0
LOAD:0000000000209DD4                 db    0
LOAD:0000000000209DD5                 db    0
LOAD:0000000000209DD6                 db    0
LOAD:0000000000209DD7                 db    0
LOAD:0000000000209DD8                 db    0
LOAD:0000000000209DD9                 db    0
LOAD:0000000000209DDA                 db    0
LOAD:0000000000209DDB                 db    0
LOAD:0000000000209DDC                 db    0
LOAD:0000000000209DDD                 db    0
LOAD:0000000000209DDE                 db    0
LOAD:0000000000209DDF                 db    0
LOAD:0000000000209DE0                 db    0
LOAD:0000000000209DE1                 db    0
LOAD:0000000000209DE2                 db    0
LOAD:0000000000209DE3                 db    0
LOAD:0000000000209DE4                 db    0
LOAD:0000000000209DE5                 db    0
LOAD:0000000000209DE6                 db    0
LOAD:0000000000209DE7                 db    0
LOAD:0000000000209DE8                 db    0
LOAD:0000000000209DE9                 db    0
LOAD:0000000000209DEA                 db    0
LOAD:0000000000209DEB                 db    0
LOAD:0000000000209DEC                 db    0
LOAD:0000000000209DED                 db    0
LOAD:0000000000209DEE                 db    0
LOAD:0000000000209DEF                 db    0
LOAD:0000000000209DF0                 db    0
LOAD:0000000000209DF1                 db    0
LOAD:0000000000209DF2                 db    0
LOAD:0000000000209DF3                 db    0
LOAD:0000000000209DF4                 db    0
LOAD:0000000000209DF5                 db    0
LOAD:0000000000209DF6                 db    0
LOAD:0000000000209DF7                 db    0
LOAD:0000000000209DF8                 db    0
LOAD:0000000000209DF9                 db    0
LOAD:0000000000209DFA                 db    0
LOAD:0000000000209DFB                 db    0
LOAD:0000000000209DFC                 db    0
LOAD:0000000000209DFD                 db    0
LOAD:0000000000209DFE                 db    0
LOAD:0000000000209DFF                 db    0
LOAD:0000000000209E00                 db    0
LOAD:0000000000209E01                 db    0
LOAD:0000000000209E02                 db    0
LOAD:0000000000209E03                 db    0
LOAD:0000000000209E04                 db    0
LOAD:0000000000209E05                 db    0
LOAD:0000000000209E06                 db    0
LOAD:0000000000209E07                 db    0
LOAD:0000000000209E07 LOAD            ends
LOAD:0000000000209E07
.got:0000000000209E08 ; ===========================================================================
.got:0000000000209E08
.got:0000000000209E08 ; Segment type: Pure data
.got:0000000000209E08 ; Segment permissions: Read/Write
.got:0000000000209E08 _got            segment qword public 'DATA' use64
.got:0000000000209E08                 assume cs:_got
.got:0000000000209E08                 ;org 209E08h
.got:0000000000209E08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209E10 qword_209E10    dq 0                    ; DATA XREF: sub_1730↑r
.got:0000000000209E18 qword_209E18    dq 0                    ; DATA XREF: sub_1730+6↑r
.got:0000000000209E20 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000209E20                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000209E28 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000209E30 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000209E38 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209E40 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E48 __errno_location_ptr dq offset __errno_location
.got:0000000000209E48                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E50 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E58 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E60 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E68 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E70 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E78 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E78                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E80 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E88 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E88                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209E90 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209E98 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209E98                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209EA0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EA8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209EB0 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000209EB8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000209EC0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000209EC8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209ED0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209ED8 __assert_fail_ptr dq offset __assert_fail
.got:0000000000209ED8                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000209EE0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EE8 freopen_ptr     dq offset freopen       ; DATA XREF: _freopen↑r
.got:0000000000209EF0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000209EF8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000209EF8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000209F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209F18 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000209F20 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000209F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F50 strcoll_ptr     dq offset strcoll       ; DATA XREF: _strcoll↑r
.got:0000000000209F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F60 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000209F60                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000209F68 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F70 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F78 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F88 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000209F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F98 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:0000000000209FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FE0                                         ; DATA XREF: start+24↑r
.got:0000000000209FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FF8 _got            ends
.got:0000000000209FF8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+730↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public argmatch_die
.data:000000000020A018 argmatch_die    dq offset __argmatch_die
.data:000000000020A018                                         ; DATA XREF: main+552↑r
.data:000000000020A018                                         ; main+5A4↑r
.data:000000000020A020                 public exit_failure
.data:000000000020A020 ; int exit_failure
.data:000000000020A020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3212↑r
.data:000000000020A020                                         ; xalloc_die+17↑r ...
.data:000000000020A024                 align 20h
.data:000000000020A040                 public quote_quoting_options
.data:000000000020A040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A040                                         ; quote_mem↑o ...
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058                 db    0
.data:000000000020A059                 db    0
.data:000000000020A05A                 db    0
.data:000000000020A05B                 db    0
.data:000000000020A05C                 db    0
.data:000000000020A05D                 db    0
.data:000000000020A05E                 db    0
.data:000000000020A05F                 db    0
.data:000000000020A060                 db    0
.data:000000000020A061                 db    0
.data:000000000020A062                 db    0
.data:000000000020A063                 db    0
.data:000000000020A064                 db    0
.data:000000000020A065                 db    0
.data:000000000020A066                 db    0
.data:000000000020A067                 db    0
.data:000000000020A068                 db    0
.data:000000000020A069                 db    0
.data:000000000020A06A                 db    0
.data:000000000020A06B                 db    0
.data:000000000020A06C                 db    0
.data:000000000020A06D                 db    0
.data:000000000020A06E                 db    0
.data:000000000020A06F                 db    0
.data:000000000020A070                 db    0
.data:000000000020A071                 db    0
.data:000000000020A072                 db    0
.data:000000000020A073                 db    0
.data:000000000020A074                 db    0
.data:000000000020A075                 db    0
.data:000000000020A076                 db    0
.data:000000000020A077                 db    0
.data:000000000020A078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A078                                         ; quotearg_n_options:loc_4B4D↑r ...
.data:000000000020A07C                 align 20h
.data:000000000020A080 ; void *slotvec
.data:000000000020A080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A080                                         ; quotearg_n_options+76↑w ...
.data:000000000020A088                 align 10h
.data:000000000020A090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A090                                         ; quotearg_n_options+187↑r ...
.data:000000000020A098 off_20A098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A098 _data           ends
.data:000000000020A098
.bss:000000000020A0A0 ; ===========================================================================
.bss:000000000020A0A0
.bss:000000000020A0A0 ; Segment type: Uninitialized
.bss:000000000020A0A0 ; Segment permissions: Read/Write
.bss:000000000020A0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A0A0                 assume cs:_bss
.bss:000000000020A0A0                 ;org 20A0A0h
.bss:000000000020A0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A0A0                 public __bss_start ; weak
.bss:000000000020A0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000008B0↑o
.bss:000000000020A0A0                                         ; LOAD:0000000000000910↑o ...
.bss:000000000020A0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A0A0                                         ; _edata
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020A0A8 ; FILE *stdout
.bss:000000000020A0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:000000000020A0A8                                         ; main+2FA↑r ...
.bss:000000000020A0A8                                         ; Alternative name is 'stdout'
.bss:000000000020A0A8                                         ; Copy of shared data
.bss:000000000020A0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000020A0B0 ; FILE *stdin
.bss:000000000020A0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:00000000000008C8↑o
.bss:000000000020A0B0                                         ; main:loc_1DD9↑r ...
.bss:000000000020A0B0                                         ; Alternative name is 'stdin'
.bss:000000000020A0B0                                         ; Copy of shared data
.bss:000000000020A0B8                 public optind@@GLIBC_2_2_5
.bss:000000000020A0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000940↑o
.bss:000000000020A0B8                                         ; main:loc_1BE5↑r ...
.bss:000000000020A0B8                                         ; Alternative name is 'optind'
.bss:000000000020A0B8                                         ; Copy of shared data
.bss:000000000020A0BC                 align 20h
.bss:000000000020A0C0                 public optarg@@GLIBC_2_2_5
.bss:000000000020A0C0 ; char *optarg
.bss:000000000020A0C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000958↑o
.bss:000000000020A0C0                                         ; main+1B7↑r ...
.bss:000000000020A0C0                                         ; Alternative name is 'optarg'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0C8                                         ; DATA XREF: LOAD:00000000000008E0↑o
.bss:000000000020A0C8                                         ; LOAD:00000000000008F8↑o ...
.bss:000000000020A0C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A0C8                                         ; Copy of shared data
.bss:000000000020A0D0                 align 20h
.bss:000000000020A0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0E0 ; FILE *stderr
.bss:000000000020A0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000928↑o
.bss:000000000020A0E0                                         ; usage+3D↑r ...
.bss:000000000020A0E0                                         ; Alternative name is 'stderr'
.bss:000000000020A0E0                                         ; Copy of shared data
.bss:000000000020A0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0E9                 align 10h
.bss:000000000020A0F0 grouping        dd ?                    ; DATA XREF: main:loc_1D43↑r
.bss:000000000020A0F0                                         ; main+5D5↑w ...
.bss:000000000020A0F4 delimit_groups  dd ?                    ; DATA XREF: main+F7↑w
.bss:000000000020A0F4                                         ; main+424↑r ...
.bss:000000000020A0F8 ignore_case     db ?                    ; DATA XREF: main:loc_219B↑w
.bss:000000000020A0F8                                         ; different+19↑r
.bss:000000000020A0F9 output_later_repeated db ?              ; DATA XREF: main+E6↑w
.bss:000000000020A0F9                                         ; main+542↑w ...
.bss:000000000020A0FA output_first_repeated db ?              ; DATA XREF: main+D8↑w
.bss:000000000020A0FA                                         ; main+34D↑r ...
.bss:000000000020A0FB output_unique   db ?                    ; DATA XREF: main+DF↑w
.bss:000000000020A0FB                                         ; main+344↑r ...
.bss:000000000020A0FC countmode       dd ?                    ; DATA XREF: main+ED↑w
.bss:000000000020A0FC                                         ; main+26E↑w ...
.bss:000000000020A100 ; size_t check_chars
.bss:000000000020A100 check_chars     dq ?                    ; DATA XREF: main+D1↑w
.bss:000000000020A100                                         ; main+24C↑w ...
.bss:000000000020A108 skip_chars      dq ?                    ; DATA XREF: main+BB↑w
.bss:000000000020A108                                         ; main+528↑w ...
.bss:000000000020A110 skip_fields     dq ?                    ; DATA XREF: main+C6↑w
.bss:000000000020A110                                         ; main+1D2↑w ...
.bss:000000000020A118 hard_LC_COLLATE db ?                    ; DATA XREF: main+A4↑w
.bss:000000000020A118                                         ; different:loc_26D8↑r
.bss:000000000020A119                 align 20h
.bss:000000000020A120 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A120                                         ; close_stdout+1B↑r
.bss:000000000020A121                 align 8
.bss:000000000020A128 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A128                                         ; close_stdout+56↑r
.bss:000000000020A130                 public program_name
.bss:000000000020A130 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A130                                         ; set_program_name:loc_376D↑w
.bss:000000000020A138                 align 20h
.bss:000000000020A140 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A140                                         ; quotearg_free+46↑o ...
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200                 db    ? ;
.bss:000000000020A201                 db    ? ;
.bss:000000000020A202                 db    ? ;
.bss:000000000020A203                 db    ? ;
.bss:000000000020A204                 db    ? ;
.bss:000000000020A205                 db    ? ;
.bss:000000000020A206                 db    ? ;
.bss:000000000020A207                 db    ? ;
.bss:000000000020A208                 db    ? ;
.bss:000000000020A209                 db    ? ;
.bss:000000000020A20A                 db    ? ;
.bss:000000000020A20B                 db    ? ;
.bss:000000000020A20C                 db    ? ;
.bss:000000000020A20D                 db    ? ;
.bss:000000000020A20E                 db    ? ;
.bss:000000000020A20F                 db    ? ;
.bss:000000000020A210                 db    ? ;
.bss:000000000020A211                 db    ? ;
.bss:000000000020A212                 db    ? ;
.bss:000000000020A213                 db    ? ;
.bss:000000000020A214                 db    ? ;
.bss:000000000020A215                 db    ? ;
.bss:000000000020A216                 db    ? ;
.bss:000000000020A217                 db    ? ;
.bss:000000000020A218                 db    ? ;
.bss:000000000020A219                 db    ? ;
.bss:000000000020A21A                 db    ? ;
.bss:000000000020A21B                 db    ? ;
.bss:000000000020A21C                 db    ? ;
.bss:000000000020A21D                 db    ? ;
.bss:000000000020A21E                 db    ? ;
.bss:000000000020A21F                 db    ? ;
.bss:000000000020A220                 db    ? ;
.bss:000000000020A221                 db    ? ;
.bss:000000000020A222                 db    ? ;
.bss:000000000020A223                 db    ? ;
.bss:000000000020A224                 db    ? ;
.bss:000000000020A225                 db    ? ;
.bss:000000000020A226                 db    ? ;
.bss:000000000020A227                 db    ? ;
.bss:000000000020A228                 db    ? ;
.bss:000000000020A229                 db    ? ;
.bss:000000000020A22A                 db    ? ;
.bss:000000000020A22B                 db    ? ;
.bss:000000000020A22C                 db    ? ;
.bss:000000000020A22D                 db    ? ;
.bss:000000000020A22E                 db    ? ;
.bss:000000000020A22F                 db    ? ;
.bss:000000000020A230                 db    ? ;
.bss:000000000020A231                 db    ? ;
.bss:000000000020A232                 db    ? ;
.bss:000000000020A233                 db    ? ;
.bss:000000000020A234                 db    ? ;
.bss:000000000020A235                 db    ? ;
.bss:000000000020A236                 db    ? ;
.bss:000000000020A237                 db    ? ;
.bss:000000000020A238                 db    ? ;
.bss:000000000020A239                 db    ? ;
.bss:000000000020A23A                 db    ? ;
.bss:000000000020A23B                 db    ? ;
.bss:000000000020A23C                 db    ? ;
.bss:000000000020A23D                 db    ? ;
.bss:000000000020A23E                 db    ? ;
.bss:000000000020A23F                 db    ? ;
.bss:000000000020A240 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A240                                         ; get_quoting_style↑o ...
.bss:000000000020A250 xmmword_20A250  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A250                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A260 xmmword_20A260  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A260                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A270 qword_20A270    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A270                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A270 _bss            ends
.bss:000000000020A270
.prgend:000000000020A278 ; ===========================================================================
.prgend:000000000020A278
.prgend:000000000020A278 ; Segment type: Zero-length
.prgend:000000000020A278 _prgend         segment byte public '' use64
.prgend:000000000020A278 _end            label byte
.prgend:000000000020A278 _prgend         ends
.prgend:000000000020A278
extern:000000000020A280 ; ===========================================================================
extern:000000000020A280
extern:000000000020A280 ; Segment type: Externs
extern:000000000020A280 ; extern
extern:000000000020A280 ; const __int32_t **_ctype_toupper_loc(void)
extern:000000000020A280                 extrn __ctype_toupper_loc:near
extern:000000000020A280                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:000000000020A280                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:000000000020A288 ; int _uflow(_IO_FILE *)
extern:000000000020A288                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:000000000020A288                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:000000000020A290 ; char *getenv(const char *name)
extern:000000000020A290                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020A290                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020A298 ; void free(void *ptr)
extern:000000000020A298                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A298                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A2A0 ; void __noreturn abort(void)
extern:000000000020A2A0                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A2A8 ; int *_errno_location(void)
extern:000000000020A2A8                 extrn __errno_location:near
extern:000000000020A2A8                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A2B0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A2B0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A2B8 ; void __noreturn exit(int status)
extern:000000000020A2B8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A2C0 ; size_t _fpending(FILE *fp)
extern:000000000020A2C0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A2C8 ; char *textdomain(const char *domainname)
extern:000000000020A2C8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A2D0 ; int fclose(FILE *stream)
extern:000000000020A2D0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A2D8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A2D8                 extrn bindtextdomain:near
extern:000000000020A2D8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A2E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A2E0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A2E8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A2E8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A2E8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A2F0 ; size_t strlen(const char *s)
extern:000000000020A2F0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A2F8                 extrn __stack_chk_fail:near
extern:000000000020A2F8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A300                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A300                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A308 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A308                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A308                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A310 ; int dup2(int fd, int fd2)
extern:000000000020A310                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:000000000020A310                                         ; DATA XREF: .got:dup2_ptr↑o
extern:000000000020A318 ; char *strchr(const char *s, int c)
extern:000000000020A318                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020A318                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020A320 ; int _overflow(_IO_FILE *, int)
extern:000000000020A320                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020A320                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020A328 ; char *strrchr(const char *s, int c)
extern:000000000020A328                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A328                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A330 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A330                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A330                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A338 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020A338                 extrn __assert_fail:near
extern:000000000020A338                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020A338                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020A340 ; void *memset(void *s, int c, size_t n)
extern:000000000020A340                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A340                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A348 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
extern:000000000020A348                 extrn freopen:near      ; CODE XREF: _freopen↑j
extern:000000000020A348                                         ; DATA XREF: .got:freopen_ptr↑o
extern:000000000020A350 ; int close(int fd)
extern:000000000020A350                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020A350                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020A358 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000020A358                 extrn posix_fadvise:near
extern:000000000020A358                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000020A358                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000020A360 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A360                 extrn __libc_start_main:near
extern:000000000020A360                                         ; CODE XREF: start+24↑p
extern:000000000020A360                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A368 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A368                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A368                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A370 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A370                 extrn fputs_unlocked:near
extern:000000000020A370                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A370                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A378 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A378                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A378                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A380 ; int strcmp(const char *s1, const char *s2)
extern:000000000020A380                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020A380                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020A388 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:000000000020A388                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:000000000020A388                                         ; DATA XREF: .got:strtol_ptr↑o
extern:000000000020A390 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A390                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A390                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A398 ; int fileno(FILE *stream)
extern:000000000020A398                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A398                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A3A0 ; void *malloc(size_t size)
extern:000000000020A3A0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A3A8 ; int fflush(FILE *stream)
extern:000000000020A3A8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A3B0 ; char *nl_langinfo(nl_item item)
extern:000000000020A3B0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A3B8 ; int strcoll(const char *s1, const char *s2)
extern:000000000020A3B8                 extrn strcoll:near      ; CODE XREF: _strcoll↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:strcoll_ptr↑o
extern:000000000020A3C0 ; int _freading(FILE *fp)
extern:000000000020A3C0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A3C8 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020A3C8                 extrn fwrite_unlocked:near
extern:000000000020A3C8                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020A3D0 ; void *realloc(void *ptr, size_t size)
extern:000000000020A3D0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A3D8 ; char *setlocale(int category, const char *locale)
extern:000000000020A3D8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A3E0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A3E8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A3E8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A3F0 ; int open(const char *file, int oflag, ...)
extern:000000000020A3F0                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020A3F0                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020A3F8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A3F8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A3F8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A400 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:000000000020A400                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:000000000020A400                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:000000000020A408 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A408                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A408                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A410 ; void __noreturn exit(int status)
extern:000000000020A410                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A410                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A418 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A418                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A418                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A420                 extrn __fprintf_chk:near
extern:000000000020A420                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A420                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A428 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A428                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A428                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A430 ; int iswprint(wint_t wc)
extern:000000000020A430                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A430                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A438 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A438                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A438                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A438                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A440 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A440                 extrn __ctype_b_loc:near
extern:000000000020A440                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A440                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A448                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A448                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A450                 extrn __gmon_start__:near ; weak
extern:000000000020A450                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A450                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A458                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A458                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A458
extern:000000000020A458
extern:000000000020A458                 end start
