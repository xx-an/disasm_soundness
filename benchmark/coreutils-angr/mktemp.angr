0x6610:	sub	rsp, 8
0x6614:	add	rsp, 8
0x6618:	ret	


0x6600:	mov	rdx, qword ptr [rip + 0x203a01]
0x6607:	xor	esi, esi
0x6609:	jmp	0x1ae0


0x65f0:	ret	


0x6580:	push	r15
0x6582:	push	r14
0x6584:	mov	r15, rdx
0x6587:	push	r13
0x6589:	push	r12
0x658b:	lea	r12, [rip + 0x2034de]
0x6592:	push	rbp
0x6593:	lea	rbp, [rip + 0x2034de]
0x659a:	push	rbx
0x659b:	mov	r13d, edi
0x659e:	mov	r14, rsi
0x65a1:	sub	rbp, r12
0x65a4:	sub	rsp, 8
0x65a8:	sar	rbp, 3
0x65ac:	call	0x1758


0x6300:	push	r12
0x6302:	push	rbp
0x6303:	mov	ebp, edi
0x6305:	push	rbx
0x6306:	sub	rsp, 0x50
0x630a:	mov	rax, qword ptr fs:[0x28]
0x6313:	mov	qword ptr [rsp + 0x18], rax
0x6318:	xor	eax, eax
0x631a:	lea	rax, [rsp + 0x70]
0x631f:	test	esi, esi
0x6321:	mov	qword ptr [rsp + 0x30], rdx
0x6326:	mov	qword ptr [rsp + 0x38], rcx
0x632b:	mov	qword ptr [rsp + 0x40], r8
0x6330:	mov	qword ptr [rsp + 8], rax
0x6335:	lea	rax, [rsp + 0x20]
0x633a:	mov	qword ptr [rsp + 0x48], r9
0x633f:	mov	dword ptr [rsp], 0x10
0x6346:	mov	qword ptr [rsp + 0x10], rax
0x634b:	je	0x6552


0x62f0:	mov	edx, 3
0x62f5:	xor	esi, esi
0x62f7:	xor	eax, eax
0x62f9:	jmp	0x6300


0x6250:	push	r12
0x6252:	push	rbp
0x6253:	mov	rbp, rsi
0x6256:	push	rbx
0x6257:	call	0x1ad0


0x6010:	push	r13
0x6012:	push	r12
0x6014:	lea	r12, [rdi + 0x800]
0x601b:	push	rbp
0x601c:	mov	rdx, rdi
0x601f:	push	rbx
0x6020:	mov	rax, rdi
0x6023:	movabs	rcx, 0x98f5704f6c44c0ab
0x602d:	movabs	r10, 0xae985bf2cbfc89ed
0x6037:	movabs	rbp, 0x48fe4a0fa5a09315
0x6041:	movabs	rsi, 0x82f053db8355e0ce
0x604b:	movabs	r8, 0xb29b2e824a595524
0x6055:	movabs	rbx, 0x8c0ea5053d4712a0
0x605f:	movabs	r11, 0xb9f8b322c73ac862
0x6069:	movabs	r9, 0x647c4677a2884b7c
0x6073:	nop	dword ptr [rax + rax]
0x6078:	add	rsi, qword ptr [rax + 0x20]
0x607c:	add	rcx, qword ptr [rax + 0x38]
0x6080:	mov	r13, qword ptr [rax]
0x6083:	add	rbp, qword ptr [rax + 0x28]
0x6087:	add	r10, qword ptr [rax + 0x30]
0x608b:	sub	r13, rsi
0x608e:	add	r9, r13
0x6091:	mov	r13, rcx
0x6094:	shr	r13, 9
0x6098:	add	rcx, r9
0x609b:	xor	rbp, r13
0x609e:	mov	r13, qword ptr [rax + 8]
0x60a2:	sub	r13, rbp
0x60a5:	add	r11, r13
0x60a8:	mov	r13, r9
0x60ab:	shl	r13, 9
0x60af:	add	r9, r11
0x60b2:	xor	r10, r13
0x60b5:	mov	r13, qword ptr [rax + 0x10]
0x60b9:	sub	r13, r10
0x60bc:	add	rbx, r13
0x60bf:	mov	r13, r11
0x60c2:	shr	r13, 0x17
0x60c6:	add	r11, rbx
0x60c9:	xor	rcx, r13
0x60cc:	mov	r13, qword ptr [rax + 0x18]
0x60d0:	sub	r13, rcx
0x60d3:	add	r8, r13
0x60d6:	mov	r13, rbx
0x60d9:	shl	r13, 0xf
0x60dd:	add	rbx, r8
0x60e0:	xor	r9, r13
0x60e3:	mov	r13, r8
0x60e6:	sub	rsi, r9
0x60e9:	shr	r13, 0xe
0x60ed:	mov	qword ptr [rax], r9
0x60f0:	xor	r11, r13
0x60f3:	mov	r13, rsi
0x60f6:	add	r8, rsi
0x60f9:	sub	rbp, r11
0x60fc:	shl	r13, 0x14
0x6100:	mov	qword ptr [rax + 8], r11
0x6104:	xor	rbx, r13
0x6107:	lea	r13, [rsi + rbp]
0x610b:	mov	rsi, rbp
0x610e:	sub	r10, rbx
0x6111:	shr	rsi, 0x11
0x6115:	mov	qword ptr [rax + 0x10], rbx
0x6119:	xor	r8, rsi
0x611c:	mov	rsi, r10
0x611f:	add	rbp, r10
0x6122:	sub	rcx, r8
0x6125:	shl	rsi, 0xe
0x6129:	mov	qword ptr [rax + 0x18], r8
0x612d:	xor	rsi, r13
0x6130:	add	r10, rcx
0x6133:	mov	qword ptr [rax + 0x28], rbp
0x6137:	mov	qword ptr [rax + 0x20], rsi
0x613b:	mov	qword ptr [rax + 0x30], r10
0x613f:	add	rax, 0x40
0x6143:	mov	qword ptr [rax - 8], rcx
0x6147:	cmp	r12, rax
0x614a:	jne	0x6078


0x5d80:	mov	rax, qword ptr [rdi + 0x810]
0x5d87:	mov	rdx, qword ptr [rdi + 0x800]
0x5d8e:	lea	r9, [rdi + 0x400]
0x5d95:	lea	rcx, [rax + 1]
0x5d99:	mov	rax, rdi
0x5d9c:	mov	qword ptr [rdi + 0x810], rcx
0x5da3:	add	rcx, qword ptr [rdi + 0x808]
0x5daa:	nop	word ptr [rax + rax]
0x5db0:	mov	r8, rdx
0x5db3:	shl	r8, 0x15
0x5db7:	xor	rdx, r8
0x5dba:	mov	r8, qword ptr [rax]
0x5dbd:	not	rdx
0x5dc0:	add	rdx, qword ptr [rax + 0x400]
0x5dc7:	mov	r10, r8
0x5dca:	and	r10d, 0x7f8
0x5dd1:	mov	r11, qword ptr [rdi + r10]
0x5dd5:	mov	r10, rdx
0x5dd8:	shr	r10, 5
0x5ddc:	add	r11, rdx
0x5ddf:	xor	rdx, r10
0x5de2:	add	rcx, r11
0x5de5:	mov	qword ptr [rax], rcx
0x5de8:	shr	rcx, 8
0x5dec:	and	ecx, 0x7f8
0x5df2:	mov	r11, qword ptr [rdi + rcx]
0x5df6:	add	r11, r8
0x5df9:	mov	qword ptr [rsi], r11
0x5dfc:	add	rdx, qword ptr [rax + 0x408]
0x5e03:	mov	rcx, qword ptr [rax + 8]
0x5e07:	mov	r10, rdx
0x5e0a:	mov	rdx, rcx
0x5e0d:	and	edx, 0x7f8
0x5e13:	mov	r8, qword ptr [rdi + rdx]
0x5e17:	mov	rdx, r10
0x5e1a:	shl	rdx, 0xc
0x5e1e:	xor	rdx, r10
0x5e21:	add	r8, r10
0x5e24:	add	r8, r11
0x5e27:	mov	qword ptr [rax + 8], r8
0x5e2b:	shr	r8, 8
0x5e2f:	and	r8d, 0x7f8
0x5e36:	add	rcx, qword ptr [rdi + r8]
0x5e3a:	mov	qword ptr [rsi + 8], rcx
0x5e3e:	mov	r8, qword ptr [rax + 0x10]
0x5e42:	mov	r11, rcx
0x5e45:	add	rdx, qword ptr [rax + 0x410]
0x5e4c:	mov	rcx, r8
0x5e4f:	and	ecx, 0x7f8
0x5e55:	mov	r10, qword ptr [rdi + rcx]
0x5e59:	add	r10, rdx
0x5e5c:	mov	rcx, r10
0x5e5f:	add	rcx, r11
0x5e62:	mov	qword ptr [rax + 0x10], rcx
0x5e66:	shr	rcx, 8
0x5e6a:	and	ecx, 0x7f8
0x5e70:	mov	r10, qword ptr [rdi + rcx]
0x5e74:	mov	rcx, rdx
0x5e77:	shr	rcx, 0x21
0x5e7b:	xor	rdx, rcx
0x5e7e:	add	r10, r8
0x5e81:	mov	qword ptr [rsi + 0x10], r10
0x5e85:	mov	rcx, qword ptr [rax + 0x18]
0x5e89:	add	rdx, qword ptr [rax + 0x418]
0x5e90:	mov	r8, rcx
0x5e93:	and	r8d, 0x7f8
0x5e9a:	mov	r11, qword ptr [rdi + r8]
0x5e9e:	add	r11, rdx
0x5ea1:	mov	r8, r11
0x5ea4:	add	r8, r10
0x5ea7:	add	rax, 0x20
0x5eab:	add	rsi, 0x20
0x5eaf:	mov	qword ptr [rax - 8], r8
0x5eb3:	shr	r8, 8
0x5eb7:	and	r8d, 0x7f8
0x5ebe:	add	rcx, qword ptr [rdi + r8]
0x5ec2:	mov	qword ptr [rsi - 8], rcx
0x5ec6:	cmp	rax, r9
0x5ec9:	jb	0x5db0


0x5d30:	push	rbp
0x5d31:	push	rbx
0x5d32:	mov	rdx, -1
0x5d39:	mov	rbx, rdi
0x5d3c:	mov	esi, 0x1038
0x5d41:	sub	rsp, 8
0x5d45:	mov	rbp, qword ptr [rdi]
0x5d48:	call	0x1aa0


0x5b90:	push	r15
0x5b92:	push	r14
0x5b94:	push	r13
0x5b96:	push	r12
0x5b98:	mov	r12, rdi
0x5b9b:	push	rbp
0x5b9c:	push	rbx
0x5b9d:	mov	rbp, rdx
0x5ba0:	mov	rbx, rsi
0x5ba3:	sub	rsp, 0x18
0x5ba7:	mov	rcx, qword ptr [rdi]
0x5baa:	test	rcx, rcx
0x5bad:	mov	qword ptr [rsp + 8], rcx
0x5bb2:	je	0x5c18


0x5b80:	mov	qword ptr [rdi + 0x10], rsi
0x5b84:	ret	


0x5b70:	mov	qword ptr [rdi + 8], rsi
0x5b74:	ret	


0x5840:	push	r15
0x5842:	push	r14
0x5844:	push	r13
0x5846:	push	r12
0x5848:	push	rbp
0x5849:	push	rbx
0x584a:	sub	rsp, 0x38
0x584e:	mov	rax, qword ptr fs:[0x28]
0x5857:	mov	qword ptr [rsp + 0x28], rax
0x585c:	xor	eax, eax
0x585e:	test	rsi, rsi
0x5861:	je	0x5988


0x57e0:	push	rbp
0x57e1:	push	rbx
0x57e2:	sub	rsp, 8
0x57e6:	test	rdi, rdi
0x57e9:	je	0x5828


0x5780:	push	r13
0x5782:	push	r12
0x5784:	push	rbp
0x5785:	push	rbx
0x5786:	mov	rbx, rdi
0x5789:	sub	rsp, 8
0x578d:	mov	rdi, qword ptr [rdi]
0x5790:	call	0x5d30


0x5760:	push	rbx
0x5761:	mov	rdx, -1
0x5768:	mov	rbx, rdi
0x576b:	mov	esi, 0x18
0x5770:	call	0x1aa0


0x5640:	push	r15
0x5642:	push	r14
0x5644:	lea	r15, [rsi + 1]
0x5648:	push	r13
0x564a:	push	r12
0x564c:	mov	r13, rdi
0x564f:	push	rbp
0x5650:	push	rbx
0x5651:	mov	r14, rsi
0x5654:	sub	rsp, 0x28
0x5658:	mov	rbp, qword ptr [rdi + 8]
0x565c:	mov	rbx, qword ptr [rdi + 0x10]
0x5660:	mov	rax, qword ptr fs:[0x28]
0x5669:	mov	qword ptr [rsp + 0x18], rax
0x566e:	xor	eax, eax
0x5670:	mov	rax, qword ptr [rdi]
0x5673:	lea	r12, [rsp + 0x10]
0x5678:	mov	qword ptr [rsp + 8], rax
0x567d:	jmp	0x56b5


0x5630:	mov	rax, qword ptr [rdi]
0x5633:	ret	


0x55f0:	push	rbx
0x55f1:	call	0x5840


0x55c0:	push	rbx
0x55c1:	mov	rbx, rdi
0x55c4:	mov	edi, 0x18
0x55c9:	call	0x50e0


0x5580:	sub	rsp, 8
0x5584:	mov	edi, 0xe
0x5589:	call	0x1a10


0x5520:	sub	rsp, 8
0x5524:	xor	esi, esi
0x5526:	call	0x1a50


0x5490:	push	r13
0x5492:	push	r12
0x5494:	mov	r13, rsi
0x5497:	push	rbp
0x5498:	push	rbx
0x5499:	mov	rbx, rdi
0x549c:	mov	r12, rdx
0x549f:	sub	rsp, 0x18
0x54a3:	mov	rax, qword ptr fs:[0x28]
0x54ac:	mov	qword ptr [rsp + 8], rax
0x54b1:	xor	eax, eax
0x54b3:	lea	rax, [rsp + 4]
0x54b8:	test	rdi, rdi
0x54bb:	cmove	rbx, rax
0x54bf:	mov	rdi, rbx
0x54c2:	call	0x1900


0x5430:	mov	rax, qword ptr [rdi + 8]
0x5434:	cmp	qword ptr [rdi + 0x10], rax
0x5438:	je	0x5440


0x53f0:	test	rdi, rdi
0x53f3:	push	rbx
0x53f4:	mov	rbx, rdi
0x53f7:	je	0x540a


0x5370:	push	r12
0x5372:	push	rbp
0x5373:	push	rbx
0x5374:	mov	rbx, rdi
0x5377:	call	0x19d0


0x5330:	lea	rsi, [rip + 0x2518]
0x5337:	sub	rsp, 8
0x533b:	mov	edx, 5
0x5340:	xor	edi, edi
0x5342:	call	0x1890


0x5310:	push	rbx
0x5311:	mov	rbx, rdi
0x5314:	call	0x18b0


0x52e0:	push	rbp
0x52e1:	push	rbx
0x52e2:	mov	rbp, rdi
0x52e5:	mov	rdi, rsi
0x52e8:	mov	rbx, rsi
0x52eb:	sub	rsp, 8
0x52ef:	call	0x50e0


0x52b0:	mov	rax, rdi
0x52b3:	sub	rsp, 8
0x52b7:	mul	rsi
0x52ba:	seto	dl
0x52bd:	test	rax, rax
0x52c0:	js	0x52d9


0x5290:	push	rbx
0x5291:	mov	rbx, rdi
0x5294:	call	0x50e0


0x5240:	test	rdi, rdi
0x5243:	mov	rax, qword ptr [rsi]
0x5246:	je	0x5270


0x51b0:	test	rdi, rdi
0x51b3:	mov	r9, rdx
0x51b6:	mov	rcx, qword ptr [rsi]
0x51b9:	je	0x51f0


0x5180:	mov	rax, rsi
0x5183:	mul	rdx
0x5186:	mov	rsi, rax
0x5189:	seto	al
0x518c:	test	rsi, rsi
0x518f:	js	0x519b


0x5140:	test	rsi, rsi
0x5143:	push	rbx
0x5144:	mov	rbx, rsi
0x5147:	jne	0x514e


0x5130:	jmp	0x50e0


0x5100:	mov	rax, rdi
0x5103:	mul	rsi
0x5106:	mov	rdi, rax
0x5109:	seto	al
0x510c:	test	rdi, rdi
0x510f:	js	0x511b


0x50e0:	push	rbx
0x50e1:	mov	rbx, rdi
0x50e4:	call	0x19f0


0x5060:	push	rbx
0x5061:	lea	rsi, [rip + 0x24f1]
0x5068:	mov	edx, 5
0x506d:	xor	edi, edi
0x506f:	call	0x1890


0x4f80:	push	rbp
0x4f81:	push	rbx
0x4f82:	mov	r10d, 0x20
0x4f88:	xor	r11d, r11d
0x4f8b:	sub	rsp, 0xb8
0x4f92:	mov	rax, qword ptr fs:[0x28]
0x4f9b:	mov	qword ptr [rsp + 0x78], rax
0x4fa0:	xor	eax, eax
0x4fa2:	lea	rax, [rsp + 0xd0]
0x4faa:	mov	qword ptr [rsp + 0xa0], r8
0x4fb2:	lea	rbx, [rsp + 0xd0]
0x4fba:	lea	r8, [rsp + 0x20]
0x4fbf:	mov	qword ptr [rsp + 0xa8], r9
0x4fc7:	mov	dword ptr [rsp + 8], 0x20
0x4fcf:	mov	qword ptr [rsp + 0x10], rax
0x4fd4:	lea	rax, [rsp + 0x80]
0x4fdc:	xor	r9d, r9d
0x4fdf:	mov	qword ptr [rsp + 0x18], rax
0x4fe4:	mov	rbp, rax
0x4fe7:	nop	word ptr [rax + rax]
0x4ff0:	cmp	r10d, 0x2f
0x4ff4:	ja	0x504c


0x4f00:	sub	rsp, 0x68
0x4f04:	mov	r10, r8
0x4f07:	xor	r9d, r9d
0x4f0a:	mov	rax, qword ptr fs:[0x28]
0x4f13:	mov	qword ptr [rsp + 0x58], rax
0x4f18:	xor	eax, eax
0x4f1a:	mov	r8, rsp
0x4f1d:	nop	dword ptr [rax]
0x4f20:	mov	eax, dword ptr [r10]
0x4f23:	cmp	eax, 0x2f
0x4f26:	ja	0x4f6a


0x4ee0:	xor	r9d, r9d
0x4ee3:	cmp	qword ptr [r8], 0
0x4ee7:	je	0x4efb


0x4ac0:	push	r15
0x4ac2:	push	r14
0x4ac4:	push	r13
0x4ac6:	push	r12
0x4ac8:	mov	r12, r9
0x4acb:	push	rbp
0x4acc:	push	rbx
0x4acd:	mov	rbp, rdi
0x4ad0:	mov	rbx, r8
0x4ad3:	sub	rsp, 0x28
0x4ad7:	test	rsi, rsi
0x4ada:	je	0x4bf8


0x4ab0:	mov	r8d, 6
0x4ab6:	jmp	0x4890


0x4aa0:	mov	r8d, 6
0x4aa6:	jmp	0x4a10


0x4a10:	sub	rsp, 0x18
0x4a14:	cmp	ecx, 1
0x4a17:	mov	dword ptr [rsp + 0xc], edx
0x4a1b:	je	0x4a80


0x4890:	push	r15
0x4892:	push	r14
0x4894:	mov	r15, rdi
0x4897:	push	r13
0x4899:	push	r12
0x489b:	mov	r14, r8
0x489e:	push	rbp
0x489f:	push	rbx
0x48a0:	mov	ebp, esi
0x48a2:	sub	rsp, 0x38
0x48a6:	mov	qword ptr [rsp + 0x18], rdx
0x48ab:	mov	qword ptr [rsp], rdi
0x48af:	mov	qword ptr [rsp + 0x20], rcx
0x48b4:	call	0x17b0


0x4870:	mov	esi, dword ptr [rsi]
0x4872:	mov	edx, 0x180
0x4877:	xor	eax, eax
0x4879:	and	sil, 0x3c
0x487d:	or	sil, 0xc2
0x4881:	jmp	0x1ab0


0x4860:	mov	esi, 0x1c0
0x4865:	jmp	0x1810


0x47e0:	push	rbx
0x47e1:	mov	rsi, rdi
0x47e4:	mov	edi, 1
0x47e9:	sub	rsp, 0xa0
0x47f0:	mov	rdx, rsp
0x47f3:	mov	rax, qword ptr fs:[0x28]
0x47fc:	mov	qword ptr [rsp + 0x98], rax
0x4804:	xor	eax, eax
0x4806:	call	0x18c0


0x47c0:	lea	rcx, [rip + 0x205859]
0x47c7:	mov	rsi, rdi
0x47ca:	mov	rdx, -1
0x47d1:	xor	edi, edi
0x47d3:	jmp	0x3e80


0x47a0:	lea	rcx, [rip + 0x205879]
0x47a7:	mov	rdx, -1
0x47ae:	jmp	0x3e80


0x4780:	lea	rcx, [rip + 0x205899]
0x4787:	mov	rdx, rsi
0x478a:	mov	rsi, rdi
0x478d:	xor	edi, edi
0x478f:	jmp	0x3e80


0x4770:	lea	rcx, [rip + 0x2058a9]
0x4777:	jmp	0x3e80


0x4750:	mov	r8, rcx
0x4753:	mov	rcx, rdx
0x4756:	mov	rdx, rsi
0x4759:	mov	rsi, rdi
0x475c:	xor	edi, edi
0x475e:	jmp	0x4680


0x4730:	mov	rcx, rdx
0x4733:	mov	r8, -1
0x473a:	mov	rdx, rsi
0x473d:	mov	rsi, rdi
0x4740:	xor	edi, edi
0x4742:	jmp	0x4680


0x4720:	mov	r8, -1
0x4727:	jmp	0x4680


0x4680:	sub	rsp, 0x48
0x4684:	mov	r9, rcx
0x4687:	mov	rcx, qword ptr [rip + 0x205ba2]
0x468e:	movdqa	xmm0, xmmword ptr [rip + 0x205b6a]
0x4696:	mov	rax, qword ptr fs:[0x28]
0x469f:	mov	qword ptr [rsp + 0x38], rax
0x46a4:	xor	eax, eax
0x46a6:	movaps	xmmword ptr [rsp], xmm0
0x46aa:	test	rsi, rsi
0x46ad:	mov	qword ptr [rsp + 0x30], rcx
0x46b2:	mov	dword ptr [rsp], 0xa
0x46b9:	movdqa	xmm0, xmmword ptr [rip + 0x205b4f]
0x46c1:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x46c6:	movdqa	xmm0, xmmword ptr [rip + 0x205b52]
0x46ce:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x46d3:	je	0x4707


0x45f0:	sub	rsp, 0x48
0x45f4:	mov	rax, rdx
0x45f7:	mov	rdx, qword ptr fs:[0x28]
0x4600:	mov	qword ptr [rsp + 0x38], rdx
0x4605:	xor	edx, edx
0x4607:	cmp	esi, 0xa
0x460a:	je	0x4674


0x45e0:	mov	edx, 0x3a
0x45e5:	jmp	0x4510


0x45c0:	mov	edx, 0x3a
0x45c5:	mov	rsi, -1
0x45cc:	jmp	0x4510


0x45b0:	movsx	edx, sil
0x45b4:	mov	rsi, -1
0x45bb:	jmp	0x4510


0x4510:	sub	rsp, 0x48
0x4514:	mov	ecx, edx
0x4516:	mov	rax, qword ptr fs:[0x28]
0x451f:	mov	qword ptr [rsp + 0x38], rax
0x4524:	xor	eax, eax
0x4526:	mov	rax, qword ptr [rip + 0x205d03]
0x452d:	mov	r8, rsp
0x4530:	and	ecx, 0x1f
0x4533:	movdqa	xmm0, xmmword ptr [rip + 0x205cc5]
0x453b:	mov	qword ptr [rsp + 0x30], rax
0x4540:	mov	eax, edx
0x4542:	movaps	xmmword ptr [rsp], xmm0
0x4546:	shr	al, 5
0x4549:	movzx	eax, al
0x454c:	lea	r9, [r8 + rax*4 + 8]
0x4551:	movdqa	xmm0, xmmword ptr [rip + 0x205cb7]
0x4559:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x455e:	movdqa	xmm0, xmmword ptr [rip + 0x205cba]
0x4566:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x456b:	mov	edx, dword ptr [r9]
0x456e:	mov	eax, edx
0x4570:	shr	eax, cl
0x4572:	not	eax
0x4574:	and	eax, 1
0x4577:	shl	eax, cl
0x4579:	mov	rcx, r8
0x457c:	xor	eax, edx
0x457e:	mov	rdx, rsi
0x4581:	mov	rsi, rdi
0x4584:	mov	dword ptr [r9], eax
0x4587:	xor	edi, edi
0x4589:	call	0x3e80


0x4500:	mov	rcx, rdx
0x4503:	mov	rdx, rsi
0x4506:	mov	esi, edi
0x4508:	xor	edi, edi
0x450a:	jmp	0x4460


0x44f0:	mov	rdx, rsi
0x44f3:	mov	esi, edi
0x44f5:	xor	edi, edi
0x44f7:	jmp	0x43d0


0x4460:	sub	rsp, 0x48
0x4464:	mov	rax, rdx
0x4467:	mov	rdx, rcx
0x446a:	mov	rcx, qword ptr fs:[0x28]
0x4473:	mov	qword ptr [rsp + 0x38], rcx
0x4478:	xor	ecx, ecx
0x447a:	cmp	esi, 0xa
0x447d:	je	0x44e0


0x43d0:	sub	rsp, 0x48
0x43d4:	mov	rax, rdx
0x43d7:	mov	rdx, qword ptr fs:[0x28]
0x43e0:	mov	qword ptr [rsp + 0x38], rdx
0x43e5:	xor	edx, edx
0x43e7:	cmp	esi, 0xa
0x43ea:	je	0x4454


0x43b0:	lea	rcx, [rip + 0x205e49]
0x43b7:	mov	rdx, rsi
0x43ba:	mov	rsi, rdi
0x43bd:	xor	edi, edi
0x43bf:	jmp	0x3e80


0x4390:	lea	rcx, [rip + 0x205e69]
0x4397:	mov	rsi, rdi
0x439a:	mov	rdx, -1
0x43a1:	xor	edi, edi
0x43a3:	jmp	0x3e80


0x4380:	lea	rcx, [rip + 0x205e79]
0x4387:	jmp	0x3e80


0x4360:	lea	rcx, [rip + 0x205e99]
0x4367:	mov	rdx, -1
0x436e:	jmp	0x3e80


0x42c0:	mov	eax, dword ptr [rip + 0x205d92]
0x42c6:	push	r12
0x42c8:	mov	r12, qword ptr [rip + 0x205d91]
0x42cf:	push	rbp
0x42d0:	push	rbx
0x42d1:	cmp	eax, 1
0x42d4:	jle	0x4301


0x42b0:	mov	rcx, rdx
0x42b3:	xor	edx, edx
0x42b5:	jmp	0x41c0


0x41c0:	push	r15
0x41c2:	push	r14
0x41c4:	lea	rax, [rip + 0x206035]
0x41cb:	push	r13
0x41cd:	push	r12
0x41cf:	mov	r12, rdx
0x41d2:	push	rbp
0x41d3:	push	rbx
0x41d4:	mov	rbx, rcx
0x41d7:	mov	r14, rdi
0x41da:	mov	r15, rsi
0x41dd:	sub	rsp, 0x38
0x41e1:	test	rcx, rcx
0x41e4:	cmove	rbx, rax
0x41e8:	xor	ebp, ebp
0x41ea:	call	0x17b0


0x4140:	push	r15
0x4142:	push	r14
0x4144:	lea	rax, [rip + 0x2060b5]
0x414b:	push	r13
0x414d:	push	r12
0x414f:	mov	r13, rdi
0x4152:	push	rbp
0x4153:	push	rbx
0x4154:	mov	rbx, r8
0x4157:	mov	r14, rsi
0x415a:	mov	r15, rdx
0x415d:	sub	rsp, 0x18
0x4161:	test	r8, r8
0x4164:	cmove	rbx, rax
0x4168:	mov	qword ptr [rsp + 8], rcx
0x416d:	call	0x17b0


0x4110:	lea	rax, [rip + 0x2060e9]
0x4117:	test	rdi, rdi
0x411a:	cmove	rdi, rax
0x411e:	test	rsi, rsi
0x4121:	mov	dword ptr [rdi], 0xa
0x4127:	je	0x4137


0x40f0:	lea	rax, [rip + 0x206109]
0x40f7:	test	rdi, rdi
0x40fa:	cmove	rdi, rax
0x40fe:	mov	eax, dword ptr [rdi + 4]
0x4101:	mov	dword ptr [rdi + 4], esi
0x4104:	ret	


0x40b0:	lea	rax, [rip + 0x206149]
0x40b7:	test	rdi, rdi
0x40ba:	mov	ecx, esi
0x40bc:	cmove	rdi, rax
0x40c0:	mov	eax, esi
0x40c2:	and	ecx, 0x1f
0x40c5:	shr	al, 5
0x40c8:	movzx	eax, al
0x40cb:	lea	rdi, [rdi + rax*4 + 8]
0x40d0:	mov	esi, dword ptr [rdi]
0x40d2:	mov	eax, esi
0x40d4:	shr	eax, cl
0x40d6:	xor	edx, eax
0x40d8:	and	eax, 1
0x40db:	and	edx, 1
0x40de:	shl	edx, cl
0x40e0:	xor	edx, esi
0x40e2:	mov	dword ptr [rdi], edx
0x40e4:	ret	


0x4090:	lea	rax, [rip + 0x206169]
0x4097:	test	rdi, rdi
0x409a:	cmove	rdi, rax
0x409e:	mov	dword ptr [rdi], esi
0x40a0:	ret	


0x4070:	lea	rax, [rip + 0x206189]
0x4077:	test	rdi, rdi
0x407a:	cmove	rdi, rax
0x407e:	mov	eax, dword ptr [rdi]
0x4080:	ret	


0x4030:	push	r12
0x4032:	push	rbp
0x4033:	push	rbx
0x4034:	mov	rbx, rdi
0x4037:	call	0x17b0


0x3e80:	push	r15
0x3e82:	push	r14
0x3e84:	movsxd	r15, edi
0x3e87:	push	r13
0x3e89:	push	r12
0x3e8b:	mov	r14, rdx
0x3e8e:	push	rbp
0x3e8f:	push	rbx
0x3e90:	mov	rbp, rcx
0x3e93:	sub	rsp, 0x28
0x3e97:	mov	qword ptr [rsp + 8], rsi
0x3e9c:	call	0x17b0


0x2c40:	push	r15
0x2c42:	push	r14
0x2c44:	mov	r15d, r8d
0x2c47:	push	r13
0x2c49:	push	r12
0x2c4b:	mov	r14, rdi
0x2c4e:	push	rbp
0x2c4f:	push	rbx
0x2c50:	mov	ebx, r9d
0x2c53:	mov	r13, rsi
0x2c56:	mov	rbp, rcx
0x2c59:	and	ebx, 2
0x2c5c:	sub	rsp, 0xb8
0x2c63:	mov	rax, qword ptr [rsp + 0xf0]
0x2c6b:	mov	qword ptr [rsp + 0x10], rdx
0x2c70:	mov	dword ptr [rsp + 8], r8d
0x2c75:	mov	dword ptr [rsp + 0x78], r9d
0x2c7a:	mov	qword ptr [rsp + 0x20], rax
0x2c7f:	mov	rax, qword ptr [rsp + 0xf8]
0x2c87:	mov	qword ptr [rsp + 0x68], rax
0x2c8c:	mov	rax, qword ptr [rsp + 0x100]
0x2c94:	mov	qword ptr [rsp + 0x60], rax
0x2c99:	mov	rax, qword ptr fs:[0x28]
0x2ca2:	mov	qword ptr [rsp + 0xa8], rax
0x2caa:	xor	eax, eax
0x2cac:	call	0x18a0


0x2b50:	push	rbp
0x2b51:	push	rbx
0x2b52:	mov	rbp, rdi
0x2b55:	mov	ebx, esi
0x2b57:	sub	rsp, 8
0x2b5b:	call	0x5580


0x2ab0:	test	rdi, rdi
0x2ab3:	push	rbx
0x2ab4:	je	0x2b2d


0x29b0:	push	r15
0x29b2:	push	r14
0x29b4:	mov	r15, rdx
0x29b7:	push	r13
0x29b9:	push	r12
0x29bb:	mov	r12, rdi
0x29be:	push	rbp
0x29bf:	push	rbx
0x29c0:	mov	rbp, rsi
0x29c3:	sub	rsp, 0x18
0x29c7:	call	0x28e0


0x2990:	sub	rsp, 8
0x2994:	call	0x29b0


0x2940:	push	rbx
0x2941:	mov	rbx, rdi
0x2944:	call	0x18b0


0x28e0:	movzx	edx, byte ptr [rdi]
0x28e3:	mov	rax, rdi
0x28e6:	cmp	dl, 0x2f
0x28e9:	jne	0x28fc


0x2830:	push	rbp
0x2831:	push	rbx
0x2832:	sub	rsp, 8
0x2836:	mov	rdi, qword ptr [rip + 0x20784b]
0x283d:	call	0x2790


0x2820:	mov	byte ptr [rip + 0x2078a9], dil
0x2827:	ret	


0x2810:	mov	qword ptr [rip + 0x2078c1], rdi
0x2817:	ret	


0x2790:	push	r12
0x2792:	push	rbp
0x2793:	mov	rbp, rdi
0x2796:	push	rbx
0x2797:	call	0x17f0


0x2380:	push	r13
0x2382:	push	r12
0x2384:	mov	edx, 5
0x2389:	push	rbp
0x238a:	push	rbx
0x238b:	mov	ebp, edi
0x238d:	sub	rsp, 0x88
0x2394:	mov	rbx, qword ptr [rip + 0x207d45]
0x239b:	mov	rax, qword ptr fs:[0x28]
0x23a4:	mov	qword ptr [rsp + 0x78], rax
0x23a9:	xor	eax, eax
0x23ab:	test	edi, edi
0x23ad:	je	0x23dd


0x2340:	cmp	byte ptr [rip + 0x207d82], 0
0x2347:	je	0x2368


0x2330:	push	rbp
0x2331:	mov	rbp, rsp
0x2334:	pop	rbp
0x2335:	jmp	0x22a0


0x22f0:	cmp	byte ptr [rip + 0x207dd1], 0
0x22f7:	jne	0x2328


0x22a0:	lea	rdi, [rip + 0x207dd9]
0x22a7:	lea	rsi, [rip + 0x207dd2]
0x22ae:	push	rbp
0x22af:	sub	rsi, rdi
0x22b2:	mov	rbp, rsp
0x22b5:	sar	rsi, 3
0x22b9:	mov	rax, rsi
0x22bc:	shr	rax, 0x3f
0x22c0:	add	rsi, rax
0x22c3:	sar	rsi, 1
0x22c6:	je	0x22e0


0x2260:	lea	rdi, [rip + 0x207e19]
0x2267:	push	rbp
0x2268:	lea	rax, [rip + 0x207e11]
0x226f:	cmp	rax, rdi
0x2272:	mov	rbp, rsp
0x2275:	je	0x2290


0x2230:	xor	ebp, ebp
0x2232:	mov	r9, rdx
0x2235:	pop	rsi
0x2236:	mov	rdx, rsp
0x2239:	and	rsp, 0xfffffffffffffff0
0x223d:	push	rax
0x223e:	push	rsp
0x223f:	lea	r8, [rip + 0x43aa]
0x2246:	lea	rcx, [rip + 0x4333]
0x224d:	lea	rdi, [rip - 0x6e4]
0x2254:	call	qword ptr [rip + 0x207d7e]


0x1b70:	push	r15
0x1b72:	push	r14
0x1b74:	xor	r15d, r15d
0x1b77:	push	r13
0x1b79:	push	r12
0x1b7b:	xor	r14d, r14d
0x1b7e:	push	rbp
0x1b7f:	push	rbx
0x1b80:	mov	ebp, edi
0x1b82:	mov	rbx, rsi
0x1b85:	xor	r12d, r12d
0x1b88:	xor	r13d, r13d
0x1b8b:	sub	rsp, 0x38
0x1b8f:	mov	rdi, qword ptr [rsi]
0x1b92:	call	0x2ab0


0x1758:	sub	rsp, 8
0x175c:	mov	rax, qword ptr [rip + 0x20887d]
0x1763:	test	rax, rax
0x1766:	je	0x176a


0x1ae0:	jmp	qword ptr [rip + 0x2084aa]


0x6552:	mov	rax, qword ptr [rsp + 0x10]
0x6557:	xor	esi, esi
0x6559:	mov	edx, dword ptr [rax + 0x10]
0x655c:	xor	eax, eax
0x655e:	call	0x1830


0x6351:	cmp	esi, 0x406
0x6357:	jne	0x63a0


0x1ad0:	jmp	qword ptr [rip + 0x2084b2]


0x6150:	add	rsi, qword ptr [rdx + 0x20]
0x6154:	add	rcx, qword ptr [rdx + 0x38]
0x6158:	mov	r12, qword ptr [rdx]
0x615b:	add	rbp, qword ptr [rdx + 0x28]
0x615f:	add	r10, qword ptr [rdx + 0x30]
0x6163:	sub	r12, rsi
0x6166:	add	r9, r12
0x6169:	mov	r12, rcx
0x616c:	shr	r12, 9
0x6170:	add	rcx, r9
0x6173:	xor	rbp, r12
0x6176:	mov	r12, qword ptr [rdx + 8]
0x617a:	sub	r12, rbp
0x617d:	add	r11, r12
0x6180:	mov	r12, r9
0x6183:	shl	r12, 9
0x6187:	add	r9, r11
0x618a:	xor	r10, r12
0x618d:	mov	r12, qword ptr [rdx + 0x10]
0x6191:	sub	r12, r10
0x6194:	add	rbx, r12
0x6197:	mov	r12, r11
0x619a:	shr	r12, 0x17
0x619e:	add	r11, rbx
0x61a1:	xor	rcx, r12
0x61a4:	mov	r12, qword ptr [rdx + 0x18]
0x61a8:	sub	r12, rcx
0x61ab:	add	r8, r12
0x61ae:	mov	r12, rbx
0x61b1:	shl	r12, 0xf
0x61b5:	add	rbx, r8
0x61b8:	xor	r9, r12
0x61bb:	mov	r12, r8
0x61be:	sub	rsi, r9
0x61c1:	shr	r12, 0xe
0x61c5:	mov	qword ptr [rdx], r9
0x61c8:	xor	r11, r12
0x61cb:	mov	r12, rsi
0x61ce:	add	r8, rsi
0x61d1:	sub	rbp, r11
0x61d4:	shl	r12, 0x14
0x61d8:	mov	qword ptr [rdx + 8], r11
0x61dc:	xor	rbx, r12
0x61df:	lea	r12, [rsi + rbp]
0x61e3:	mov	rsi, rbp
0x61e6:	sub	r10, rbx
0x61e9:	shr	rsi, 0x11
0x61ed:	mov	qword ptr [rdx + 0x10], rbx
0x61f1:	xor	r8, rsi
0x61f4:	mov	rsi, r10
0x61f7:	add	rbp, r10
0x61fa:	sub	rcx, r8
0x61fd:	shl	rsi, 0xe
0x6201:	mov	qword ptr [rdx + 0x18], r8
0x6205:	xor	rsi, r12
0x6208:	add	r10, rcx
0x620b:	mov	qword ptr [rdx + 0x28], rbp
0x620f:	mov	qword ptr [rdx + 0x20], rsi
0x6213:	mov	qword ptr [rdx + 0x30], r10
0x6217:	add	rdx, 0x40
0x621b:	mov	qword ptr [rdx - 8], rcx
0x621f:	cmp	rax, rdx
0x6222:	jne	0x6150


0x6078:	add	rsi, qword ptr [rax + 0x20]
0x607c:	add	rcx, qword ptr [rax + 0x38]
0x6080:	mov	r13, qword ptr [rax]
0x6083:	add	rbp, qword ptr [rax + 0x28]
0x6087:	add	r10, qword ptr [rax + 0x30]
0x608b:	sub	r13, rsi
0x608e:	add	r9, r13
0x6091:	mov	r13, rcx
0x6094:	shr	r13, 9
0x6098:	add	rcx, r9
0x609b:	xor	rbp, r13
0x609e:	mov	r13, qword ptr [rax + 8]
0x60a2:	sub	r13, rbp
0x60a5:	add	r11, r13
0x60a8:	mov	r13, r9
0x60ab:	shl	r13, 9
0x60af:	add	r9, r11
0x60b2:	xor	r10, r13
0x60b5:	mov	r13, qword ptr [rax + 0x10]
0x60b9:	sub	r13, r10
0x60bc:	add	rbx, r13
0x60bf:	mov	r13, r11
0x60c2:	shr	r13, 0x17
0x60c6:	add	r11, rbx
0x60c9:	xor	rcx, r13
0x60cc:	mov	r13, qword ptr [rax + 0x18]
0x60d0:	sub	r13, rcx
0x60d3:	add	r8, r13
0x60d6:	mov	r13, rbx
0x60d9:	shl	r13, 0xf
0x60dd:	add	rbx, r8
0x60e0:	xor	r9, r13
0x60e3:	mov	r13, r8
0x60e6:	sub	rsi, r9
0x60e9:	shr	r13, 0xe
0x60ed:	mov	qword ptr [rax], r9
0x60f0:	xor	r11, r13
0x60f3:	mov	r13, rsi
0x60f6:	add	r8, rsi
0x60f9:	sub	rbp, r11
0x60fc:	shl	r13, 0x14
0x6100:	mov	qword ptr [rax + 8], r11
0x6104:	xor	rbx, r13
0x6107:	lea	r13, [rsi + rbp]
0x610b:	mov	rsi, rbp
0x610e:	sub	r10, rbx
0x6111:	shr	rsi, 0x11
0x6115:	mov	qword ptr [rax + 0x10], rbx
0x6119:	xor	r8, rsi
0x611c:	mov	rsi, r10
0x611f:	add	rbp, r10
0x6122:	sub	rcx, r8
0x6125:	shl	rsi, 0xe
0x6129:	mov	qword ptr [rax + 0x18], r8
0x612d:	xor	rsi, r13
0x6130:	add	r10, rcx
0x6133:	mov	qword ptr [rax + 0x28], rbp
0x6137:	mov	qword ptr [rax + 0x20], rsi
0x613b:	mov	qword ptr [rax + 0x30], r10
0x613f:	add	rax, 0x40
0x6143:	mov	qword ptr [rax - 8], rcx
0x6147:	cmp	r12, rax
0x614a:	jne	0x6078


0x5db0:	mov	r8, rdx
0x5db3:	shl	r8, 0x15
0x5db7:	xor	rdx, r8
0x5dba:	mov	r8, qword ptr [rax]
0x5dbd:	not	rdx
0x5dc0:	add	rdx, qword ptr [rax + 0x400]
0x5dc7:	mov	r10, r8
0x5dca:	and	r10d, 0x7f8
0x5dd1:	mov	r11, qword ptr [rdi + r10]
0x5dd5:	mov	r10, rdx
0x5dd8:	shr	r10, 5
0x5ddc:	add	r11, rdx
0x5ddf:	xor	rdx, r10
0x5de2:	add	rcx, r11
0x5de5:	mov	qword ptr [rax], rcx
0x5de8:	shr	rcx, 8
0x5dec:	and	ecx, 0x7f8
0x5df2:	mov	r11, qword ptr [rdi + rcx]
0x5df6:	add	r11, r8
0x5df9:	mov	qword ptr [rsi], r11
0x5dfc:	add	rdx, qword ptr [rax + 0x408]
0x5e03:	mov	rcx, qword ptr [rax + 8]
0x5e07:	mov	r10, rdx
0x5e0a:	mov	rdx, rcx
0x5e0d:	and	edx, 0x7f8
0x5e13:	mov	r8, qword ptr [rdi + rdx]
0x5e17:	mov	rdx, r10
0x5e1a:	shl	rdx, 0xc
0x5e1e:	xor	rdx, r10
0x5e21:	add	r8, r10
0x5e24:	add	r8, r11
0x5e27:	mov	qword ptr [rax + 8], r8
0x5e2b:	shr	r8, 8
0x5e2f:	and	r8d, 0x7f8
0x5e36:	add	rcx, qword ptr [rdi + r8]
0x5e3a:	mov	qword ptr [rsi + 8], rcx
0x5e3e:	mov	r8, qword ptr [rax + 0x10]
0x5e42:	mov	r11, rcx
0x5e45:	add	rdx, qword ptr [rax + 0x410]
0x5e4c:	mov	rcx, r8
0x5e4f:	and	ecx, 0x7f8
0x5e55:	mov	r10, qword ptr [rdi + rcx]
0x5e59:	add	r10, rdx
0x5e5c:	mov	rcx, r10
0x5e5f:	add	rcx, r11
0x5e62:	mov	qword ptr [rax + 0x10], rcx
0x5e66:	shr	rcx, 8
0x5e6a:	and	ecx, 0x7f8
0x5e70:	mov	r10, qword ptr [rdi + rcx]
0x5e74:	mov	rcx, rdx
0x5e77:	shr	rcx, 0x21
0x5e7b:	xor	rdx, rcx
0x5e7e:	add	r10, r8
0x5e81:	mov	qword ptr [rsi + 0x10], r10
0x5e85:	mov	rcx, qword ptr [rax + 0x18]
0x5e89:	add	rdx, qword ptr [rax + 0x418]
0x5e90:	mov	r8, rcx
0x5e93:	and	r8d, 0x7f8
0x5e9a:	mov	r11, qword ptr [rdi + r8]
0x5e9e:	add	r11, rdx
0x5ea1:	mov	r8, r11
0x5ea4:	add	r8, r10
0x5ea7:	add	rax, 0x20
0x5eab:	add	rsi, 0x20
0x5eaf:	mov	qword ptr [rax - 8], r8
0x5eb3:	shr	r8, 8
0x5eb7:	and	r8d, 0x7f8
0x5ebe:	add	rcx, qword ptr [rdi + r8]
0x5ec2:	mov	qword ptr [rsi - 8], rcx
0x5ec6:	cmp	rax, r9
0x5ec9:	jb	0x5db0


0x5ecf:	lea	r9, [rdi + 0x800]
0x5ed6:	nop	word ptr cs:[rax + rax]
0x5ee0:	mov	r8, rdx
0x5ee3:	shl	r8, 0x15
0x5ee7:	xor	rdx, r8
0x5eea:	mov	r8, qword ptr [rax]
0x5eed:	not	rdx
0x5ef0:	add	rdx, qword ptr [rax - 0x400]
0x5ef7:	mov	r10, r8
0x5efa:	and	r10d, 0x7f8
0x5f01:	mov	r11, qword ptr [rdi + r10]
0x5f05:	mov	r10, rdx
0x5f08:	shr	r10, 5
0x5f0c:	add	r11, rdx
0x5f0f:	xor	rdx, r10
0x5f12:	add	rcx, r11
0x5f15:	mov	qword ptr [rax], rcx
0x5f18:	shr	rcx, 8
0x5f1c:	and	ecx, 0x7f8
0x5f22:	mov	r11, qword ptr [rdi + rcx]
0x5f26:	add	r11, r8
0x5f29:	mov	qword ptr [rsi], r11
0x5f2c:	add	rdx, qword ptr [rax - 0x3f8]
0x5f33:	mov	rcx, qword ptr [rax + 8]
0x5f37:	mov	r10, rdx
0x5f3a:	mov	rdx, rcx
0x5f3d:	and	edx, 0x7f8
0x5f43:	mov	r8, qword ptr [rdi + rdx]
0x5f47:	mov	rdx, r10
0x5f4a:	shl	rdx, 0xc
0x5f4e:	xor	rdx, r10
0x5f51:	add	r8, r10
0x5f54:	add	r8, r11
0x5f57:	mov	qword ptr [rax + 8], r8
0x5f5b:	shr	r8, 8
0x5f5f:	and	r8d, 0x7f8
0x5f66:	add	rcx, qword ptr [rdi + r8]
0x5f6a:	mov	qword ptr [rsi + 8], rcx
0x5f6e:	mov	r8, qword ptr [rax + 0x10]
0x5f72:	mov	r11, rcx
0x5f75:	add	rdx, qword ptr [rax - 0x3f0]
0x5f7c:	mov	rcx, r8
0x5f7f:	and	ecx, 0x7f8
0x5f85:	mov	r10, qword ptr [rdi + rcx]
0x5f89:	add	r10, rdx
0x5f8c:	mov	rcx, r10
0x5f8f:	add	rcx, r11
0x5f92:	mov	qword ptr [rax + 0x10], rcx
0x5f96:	shr	rcx, 8
0x5f9a:	and	ecx, 0x7f8
0x5fa0:	mov	r10, qword ptr [rdi + rcx]
0x5fa4:	mov	rcx, rdx
0x5fa7:	shr	rcx, 0x21
0x5fab:	xor	rdx, rcx
0x5fae:	add	r10, r8
0x5fb1:	mov	qword ptr [rsi + 0x10], r10
0x5fb5:	mov	rcx, qword ptr [rax + 0x18]
0x5fb9:	add	rdx, qword ptr [rax - 0x3e8]
0x5fc0:	mov	r8, rcx
0x5fc3:	and	r8d, 0x7f8
0x5fca:	mov	r11, qword ptr [rdi + r8]
0x5fce:	add	r11, rdx
0x5fd1:	mov	r8, r11
0x5fd4:	add	r8, r10
0x5fd7:	add	rax, 0x20
0x5fdb:	add	rsi, 0x20
0x5fdf:	mov	qword ptr [rax - 8], r8
0x5fe3:	shr	r8, 8
0x5fe7:	and	r8d, 0x7f8
0x5fee:	add	rcx, qword ptr [rdi + r8]
0x5ff2:	mov	qword ptr [rsi - 8], rcx
0x5ff6:	cmp	rax, r9
0x5ff9:	jb	0x5ee0


0x1aa0:	jmp	qword ptr [rip + 0x2084ca]


0x5c18:	mov	r14, qword ptr [rdi + 0x18]
0x5c1c:	lea	rax, [rdi + 0x838]
0x5c23:	lea	r13, [rdi + 0x20]
0x5c27:	mov	qword ptr [rsp + 8], rax
0x5c2c:	cmp	rdx, r14
0x5c2f:	jbe	0x5d12


0x5bb4:	call	0x17b0


0x5988:	mov	edi, 0x1038
0x598d:	call	0x50e0


0x5867:	test	rdi, rdi
0x586a:	mov	r12, rdi
0x586d:	mov	rbp, rsi
0x5870:	je	0x58f0


0x5828:	call	0x17a0


0x57eb:	call	0x47c0


0x56b5:	cmp	rbx, r14
0x56b8:	jae	0x5680


0x1a10:	jmp	qword ptr [rip + 0x208512]


0x1a50:	jmp	qword ptr [rip + 0x2084f2]


0x1900:	jmp	qword ptr [rip + 0x20859a]


0x5440:	mov	rax, qword ptr [rdi + 0x20]
0x5444:	cmp	qword ptr [rdi + 0x28], rax
0x5448:	jne	0x543a


0x543a:	jmp	0x1ac0


0x540a:	mov	rdi, rbx
0x540d:	pop	rbx
0x540e:	jmp	0x1a00


0x53f9:	call	0x1a20


0x19d0:	jmp	qword ptr [rip + 0x208532]


0x1890:	jmp	qword ptr [rip + 0x2085d2]


0x18b0:	jmp	qword ptr [rip + 0x2085c2]


0x52d9:	call	0x5330


0x52c2:	movzx	edx, dl
0x52c5:	test	rdx, rdx
0x52c8:	jne	0x52d9


0x5270:	test	rax, rax
0x5273:	mov	edx, 0x80
0x5278:	cmove	rax, rdx
0x527c:	test	rax, rax
0x527f:	jns	0x5262


0x5248:	movabs	rdx, 0x5555555555555553
0x5252:	cmp	rax, rdx
0x5255:	ja	0x5281


0x51f0:	test	rcx, rcx
0x51f3:	je	0x5218


0x51bb:	xor	edx, edx
0x51bd:	movabs	rax, 0x5555555555555554
0x51c7:	div	r9
0x51ca:	cmp	rax, rcx
0x51cd:	jbe	0x520b


0x519b:	sub	rsp, 8
0x519f:	call	0x5330


0x5191:	movzx	eax, al
0x5194:	test	rax, rax
0x5197:	jne	0x519b


0x5149:	test	rdi, rdi
0x514c:	jne	0x5168


0x514e:	mov	rsi, rbx
0x5151:	call	0x1a30


0x511b:	sub	rsp, 8
0x511f:	call	0x5330


0x5111:	movzx	eax, al
0x5114:	test	rax, rax
0x5117:	jne	0x511b


0x19f0:	jmp	qword ptr [rip + 0x208522]


0x4ff6:	mov	eax, r10d
0x4ff9:	mov	r11d, 1
0x4fff:	add	r10d, 8
0x5003:	add	rax, rbp
0x5006:	mov	rax, qword ptr [rax]
0x5009:	test	rax, rax
0x500c:	mov	qword ptr [r8 + r9*8], rax
0x5010:	je	0x501c


0x504c:	mov	rax, rbx
0x504f:	add	rbx, 8
0x5053:	jmp	0x5006


0x4f28:	mov	r11d, eax
0x4f2b:	add	r11, qword ptr [r10 + 0x10]
0x4f2f:	add	eax, 8
0x4f32:	mov	dword ptr [r10], eax
0x4f35:	mov	rax, qword ptr [r11]
0x4f38:	test	rax, rax
0x4f3b:	mov	qword ptr [r8 + r9*8], rax
0x4f3f:	je	0x4f4b


0x4f6a:	mov	r11, qword ptr [r10 + 8]
0x4f6e:	lea	rax, [r11 + 8]
0x4f72:	mov	qword ptr [r10 + 8], rax
0x4f76:	jmp	0x4f35


0x4efb:	jmp	0x4ac0


0x4bf8:	mov	r8, rcx
0x4bfb:	mov	rcx, rdx
0x4bfe:	lea	rdx, [rip + 0x2906]
0x4c05:	mov	esi, 1
0x4c0a:	xor	eax, eax
0x4c0c:	call	0x1b20


0x4ae0:	mov	r8, rdx
0x4ae3:	lea	rdx, [rip + 0x2a15]
0x4aea:	mov	r9, rcx
0x4aed:	xor	eax, eax
0x4aef:	mov	rcx, rsi
0x4af2:	mov	esi, 1
0x4af7:	call	0x1b20


0x4a80:	lea	rdx, [rsp + 0xc]
0x4a85:	lea	rcx, [rip - 0x22c]
0x4a8c:	call	0x4890


0x4a1d:	cmp	ecx, 2
0x4a20:	je	0x4a48


0x17b0:	jmp	qword ptr [rip + 0x208642]


0x1ab0:	jmp	qword ptr [rip + 0x2084c2]


0x1810:	jmp	qword ptr [rip + 0x208612]


0x18c0:	jmp	qword ptr [rip + 0x2085ba]


0x4707:	call	0x17a0


0x46d5:	test	rdx, rdx
0x46d8:	je	0x4707


0x4674:	call	0x17a0


0x460c:	mov	dword ptr [rsp], esi
0x460f:	mov	rcx, rsp
0x4612:	mov	rdx, -1
0x4619:	mov	rsi, rax
0x461c:	mov	qword ptr [rsp + 4], 0
0x4625:	mov	qword ptr [rsp + 0xc], 0x4000000
0x462e:	mov	qword ptr [rsp + 0x14], 0
0x4637:	mov	qword ptr [rsp + 0x1c], 0
0x4640:	mov	qword ptr [rsp + 0x24], 0
0x4649:	mov	qword ptr [rsp + 0x2c], 0
0x4652:	mov	dword ptr [rsp + 0x34], 0
0x465a:	call	0x3e80


0x44e0:	call	0x17a0


0x447f:	mov	dword ptr [rsp], esi
0x4482:	mov	rcx, rsp
0x4485:	mov	rsi, rax
0x4488:	mov	qword ptr [rsp + 4], 0
0x4491:	mov	qword ptr [rsp + 0xc], 0
0x449a:	mov	qword ptr [rsp + 0x14], 0
0x44a3:	mov	qword ptr [rsp + 0x1c], 0
0x44ac:	mov	qword ptr [rsp + 0x24], 0
0x44b5:	mov	qword ptr [rsp + 0x2c], 0
0x44be:	mov	dword ptr [rsp + 0x34], 0
0x44c6:	call	0x3e80


0x4454:	call	0x17a0


0x43ec:	mov	dword ptr [rsp], esi
0x43ef:	mov	rcx, rsp
0x43f2:	mov	rdx, -1
0x43f9:	mov	rsi, rax
0x43fc:	mov	qword ptr [rsp + 4], 0
0x4405:	mov	qword ptr [rsp + 0xc], 0
0x440e:	mov	qword ptr [rsp + 0x14], 0
0x4417:	mov	qword ptr [rsp + 0x1c], 0
0x4420:	mov	qword ptr [rsp + 0x24], 0
0x4429:	mov	qword ptr [rsp + 0x2c], 0
0x4432:	mov	dword ptr [rsp + 0x34], 0
0x443a:	call	0x3e80


0x4301:	mov	rdi, qword ptr [r12 + 8]
0x4306:	lea	rbx, [rip + 0x205df3]
0x430d:	cmp	rdi, rbx
0x4310:	je	0x4329


0x42d6:	sub	eax, 2
0x42d9:	lea	rbx, [r12 + 0x18]
0x42de:	shl	rax, 4
0x42e2:	lea	rbp, [r12 + rax + 0x28]
0x42e7:	nop	word ptr [rax + rax]
0x42f0:	mov	rdi, qword ptr [rbx]
0x42f3:	add	rbx, 0x10
0x42f7:	call	0x1790


0x4137:	sub	rsp, 8
0x413b:	call	0x17a0


0x4129:	test	rdx, rdx
0x412c:	je	0x4137


0x18a0:	jmp	qword ptr [rip + 0x2085ca]


0x2b2d:	mov	rcx, qword ptr [rip + 0x20758c]
0x2b34:	lea	rdi, [rip + 0x43e5]
0x2b3b:	mov	edx, 0x37
0x2b40:	mov	esi, 1
0x2b45:	call	0x1b10


0x2ab6:	mov	esi, 0x2f
0x2abb:	mov	rbx, rdi
0x2abe:	call	0x1910


0x28fc:	test	dl, dl
0x28fe:	je	0x293a


0x17f0:	jmp	qword ptr [rip + 0x208622]


0x23dd:	lea	rsi, [rip + 0x43d4]
0x23e4:	xor	edi, edi
0x23e6:	call	0x1890


0x23af:	lea	rsi, [rip + 0x43da]
0x23b6:	xor	edi, edi
0x23b8:	call	0x1890


0x2368:	jmp	0x2830


0x2349:	sub	rsp, 8
0x234d:	mov	rdi, qword ptr [rip + 0x207d6c]
0x2354:	call	0x2790


0x22f9:	cmp	qword ptr [rip + 0x207cef], 0
0x2301:	push	rbp
0x2302:	mov	rbp, rsp
0x2305:	je	0x2313


0x2328:	ret	


0x22e0:	pop	rbp
0x22e1:	ret	


0x22c8:	mov	rax, qword ptr [rip + 0x207d19]
0x22cf:	test	rax, rax
0x22d2:	je	0x22e0


0x2290:	pop	rbp
0x2291:	ret	


0x2277:	mov	rax, qword ptr [rip + 0x207d52]
0x227e:	test	rax, rax
0x2281:	je	0x2290




0x176a:	add	rsp, 8
0x176e:	ret	


0x1768:	call	rax




0x1830:	jmp	qword ptr [rip + 0x208602]


0x6359:	mov	rax, qword ptr [rsp + 0x10]
0x635e:	cmp	dword ptr [rip + 0x203ed3], 0
0x6365:	mov	dword ptr [rsp], 0x18
0x636c:	mov	r12d, dword ptr [rax + 0x10]
0x6370:	mov	edx, r12d
0x6373:	js	0x64a3


0x63a0:	cmp	esi, 0xb
0x63a3:	je	0x63d0




0x6228:	pop	rbx
0x6229:	mov	qword ptr [rdi + 0x810], 0
0x6234:	mov	qword ptr [rdi + 0x808], 0
0x623f:	pop	rbp
0x6240:	mov	qword ptr [rdi + 0x800], 0
0x624b:	pop	r12
0x624d:	pop	r13
0x624f:	ret	


0x5ee0:	mov	r8, rdx
0x5ee3:	shl	r8, 0x15
0x5ee7:	xor	rdx, r8
0x5eea:	mov	r8, qword ptr [rax]
0x5eed:	not	rdx
0x5ef0:	add	rdx, qword ptr [rax - 0x400]
0x5ef7:	mov	r10, r8
0x5efa:	and	r10d, 0x7f8
0x5f01:	mov	r11, qword ptr [rdi + r10]
0x5f05:	mov	r10, rdx
0x5f08:	shr	r10, 5
0x5f0c:	add	r11, rdx
0x5f0f:	xor	rdx, r10
0x5f12:	add	rcx, r11
0x5f15:	mov	qword ptr [rax], rcx
0x5f18:	shr	rcx, 8
0x5f1c:	and	ecx, 0x7f8
0x5f22:	mov	r11, qword ptr [rdi + rcx]
0x5f26:	add	r11, r8
0x5f29:	mov	qword ptr [rsi], r11
0x5f2c:	add	rdx, qword ptr [rax - 0x3f8]
0x5f33:	mov	rcx, qword ptr [rax + 8]
0x5f37:	mov	r10, rdx
0x5f3a:	mov	rdx, rcx
0x5f3d:	and	edx, 0x7f8
0x5f43:	mov	r8, qword ptr [rdi + rdx]
0x5f47:	mov	rdx, r10
0x5f4a:	shl	rdx, 0xc
0x5f4e:	xor	rdx, r10
0x5f51:	add	r8, r10
0x5f54:	add	r8, r11
0x5f57:	mov	qword ptr [rax + 8], r8
0x5f5b:	shr	r8, 8
0x5f5f:	and	r8d, 0x7f8
0x5f66:	add	rcx, qword ptr [rdi + r8]
0x5f6a:	mov	qword ptr [rsi + 8], rcx
0x5f6e:	mov	r8, qword ptr [rax + 0x10]
0x5f72:	mov	r11, rcx
0x5f75:	add	rdx, qword ptr [rax - 0x3f0]
0x5f7c:	mov	rcx, r8
0x5f7f:	and	ecx, 0x7f8
0x5f85:	mov	r10, qword ptr [rdi + rcx]
0x5f89:	add	r10, rdx
0x5f8c:	mov	rcx, r10
0x5f8f:	add	rcx, r11
0x5f92:	mov	qword ptr [rax + 0x10], rcx
0x5f96:	shr	rcx, 8
0x5f9a:	and	ecx, 0x7f8
0x5fa0:	mov	r10, qword ptr [rdi + rcx]
0x5fa4:	mov	rcx, rdx
0x5fa7:	shr	rcx, 0x21
0x5fab:	xor	rdx, rcx
0x5fae:	add	r10, r8
0x5fb1:	mov	qword ptr [rsi + 0x10], r10
0x5fb5:	mov	rcx, qword ptr [rax + 0x18]
0x5fb9:	add	rdx, qword ptr [rax - 0x3e8]
0x5fc0:	mov	r8, rcx
0x5fc3:	and	r8d, 0x7f8
0x5fca:	mov	r11, qword ptr [rdi + r8]
0x5fce:	add	r11, rdx
0x5fd1:	mov	r8, r11
0x5fd4:	add	r8, r10
0x5fd7:	add	rax, 0x20
0x5fdb:	add	rsi, 0x20
0x5fdf:	mov	qword ptr [rax - 8], r8
0x5fe3:	shr	r8, 8
0x5fe7:	and	r8d, 0x7f8
0x5fee:	add	rcx, qword ptr [rdi + r8]
0x5ff2:	mov	qword ptr [rsi - 8], rcx
0x5ff6:	cmp	rax, r9
0x5ff9:	jb	0x5ee0


0x5fff:	mov	qword ptr [rdi + 0x800], rdx
0x6006:	mov	qword ptr [rdi + 0x808], rcx
0x600d:	ret	




0x5d12:	mov	r15, rax
0x5d15:	sub	r15, r14
0x5d18:	lea	rax, [r15 + 0x800]
0x5d1f:	mov	qword ptr [rsp + 8], rax
0x5d24:	jmp	0x5ce6


0x5c35:	mov	esi, 0x800
0x5c3a:	mov	rdi, rbx
0x5c3d:	mov	rdx, r14
0x5c40:	sub	rsi, r14
0x5c43:	add	rsi, qword ptr [rsp + 8]
0x5c48:	add	rbx, r14
0x5c4b:	sub	rbp, r14
0x5c4e:	call	0x19c0


0x58f0:	mov	edi, 0x1038
0x58f5:	call	0x50e0


0x5872:	lea	rsi, [rip + 0x2021]
0x5879:	call	0x6250


0x17a0:	jmp	qword ptr [rip + 0x20864a]


0x56ba:	mov	rax, rbx
0x56bd:	xor	edx, edx
0x56bf:	nop	
0x56c0:	shl	rax, 8
0x56c4:	add	rdx, 1
0x56c8:	add	rax, 0xff
0x56ce:	cmp	r14, rax
0x56d1:	ja	0x56c0


0x5680:	cmp	rbx, r14
0x5683:	je	0x570f








0x544a:	cmp	qword ptr [rdi + 0x48], 0
0x544f:	jne	0x543a


0x1ac0:	jmp	qword ptr [rip + 0x2084ba]


0x1a00:	jmp	qword ptr [rip + 0x20851a]


0x1a20:	jmp	qword ptr [rip + 0x20850a]








0x52ca:	call	0x19a0


0x5281:	sub	rsp, 8
0x5285:	call	0x5330


0x5262:	mov	qword ptr [rsi], rax
0x5265:	mov	rsi, rax
0x5268:	jmp	0x5140


0x5257:	mov	rdx, rax
0x525a:	shr	rdx, 1
0x525d:	lea	rax, [rdx + rax + 1]
0x5262:	mov	qword ptr [rsi], rax
0x5265:	mov	rsi, rax
0x5268:	jmp	0x5140


0x5218:	xor	edx, edx
0x521a:	mov	eax, 0x80
0x521f:	xor	r8d, r8d
0x5222:	div	r9
0x5225:	test	rax, rax
0x5228:	sete	r8b
0x522c:	lea	rcx, [r8 + rax]
0x5230:	jmp	0x51f5


0x51f5:	mov	rax, rcx
0x51f8:	mul	r9
0x51fb:	seto	dl
0x51fe:	test	rax, rax
0x5201:	movzx	edx, dl
0x5204:	js	0x520b


0x520b:	sub	rsp, 8
0x520f:	call	0x5330


0x51cf:	mov	rax, rcx
0x51d2:	shr	rax, 1
0x51d5:	lea	rcx, [rax + rcx + 1]
0x51da:	mov	qword ptr [rsi], rcx
0x51dd:	imul	rcx, r9
0x51e1:	mov	rsi, rcx
0x51e4:	jmp	0x5140


0x5199:	jmp	0x5140


0x5168:	call	0x1790


0x1a30:	jmp	qword ptr [rip + 0x208502]


0x5119:	jmp	0x50e0




0x501c:	test	r11b, r11b
0x501f:	jne	0x5045


0x5012:	add	r9, 1
0x5016:	cmp	r9, 0xa
0x501a:	jne	0x4ff0


0x5006:	mov	rax, qword ptr [rax]
0x5009:	test	rax, rax
0x500c:	mov	qword ptr [r8 + r9*8], rax
0x5010:	je	0x501c


0x4f4b:	call	0x4ac0


0x4f41:	add	r9, 1
0x4f45:	cmp	r9, 0xa
0x4f49:	jne	0x4f20


0x4f35:	mov	rax, qword ptr [r11]
0x4f38:	test	rax, rax
0x4f3b:	mov	qword ptr [r8 + r9*8], rax
0x4f3f:	je	0x4f4b


0x4ef0:	add	r9, 1
0x4ef4:	cmp	qword ptr [r8 + r9*8], 0
0x4ef9:	jne	0x4ef0


0x1b20:	jmp	qword ptr [rip + 0x20848a]


0x4a48:	lea	rdx, [rsp + 0xc]
0x4a4d:	lea	rcx, [rip - 0x274]
0x4a54:	call	0x4890


0x4a22:	test	ecx, ecx
0x4a24:	je	0x4a60










0x46da:	mov	qword ptr [rsp + 0x28], rsi
0x46df:	mov	qword ptr [rsp + 0x30], rdx
0x46e4:	mov	rcx, rsp
0x46e7:	mov	rdx, r8
0x46ea:	mov	rsi, r9
0x46ed:	call	0x3e80


0x4329:	lea	rbx, [rip + 0x205d40]
0x4330:	cmp	r12, rbx
0x4333:	je	0x4344


0x4312:	call	0x1790


0x1790:	jmp	qword ptr [rip + 0x208652]


0x412e:	mov	qword ptr [rdi + 0x28], rsi
0x4132:	mov	qword ptr [rdi + 0x30], rdx
0x4136:	ret	




0x1b10:	jmp	qword ptr [rip + 0x208492]


0x1910:	jmp	qword ptr [rip + 0x208592]


0x28f0:	add	rax, 1
0x28f4:	movzx	edx, byte ptr [rax]
0x28f7:	cmp	dl, 0x2f
0x28fa:	je	0x28f0


0x293a:	ret	


0x2900:	mov	rcx, rax
0x2903:	xor	esi, esi
0x2905:	jmp	0x2925




0x2313:	call	0x2260


0x2307:	mov	rdi, qword ptr [rip + 0x207cfa]
0x230e:	call	0x1b60


0x22d4:	pop	rbp
0x22d5:	jmp	rax


0x2283:	pop	rbp
0x2284:	jmp	rax




0x64a3:	xor	esi, esi
0x64a5:	xor	eax, eax
0x64a7:	call	0x1830


0x6379:	xor	eax, eax
0x637b:	mov	esi, 0x406
0x6380:	call	0x1830


0x63d0:	mov	edi, ebp
0x63d2:	xor	eax, eax
0x63d4:	call	0x1830


0x63a5:	jg	0x6400


0x5ce6:	mov	rsi, qword ptr [rsp + 8]
0x5ceb:	mov	rdx, rbp
0x5cee:	mov	rdi, rbx
0x5cf1:	sub	r14, rbp
0x5cf4:	call	0x19c0


0x19c0:	jmp	qword ptr [rip + 0x20853a]




0x56d3:	mov	rdi, qword ptr [rsp + 8]
0x56d8:	mov	rsi, r12
0x56db:	call	0x5b90


0x56c0:	shl	rax, 8
0x56c4:	add	rdx, 1
0x56c8:	add	rax, 0xff
0x56ce:	cmp	r14, rax
0x56d1:	ja	0x56c0


0x570f:	mov	qword ptr [r13 + 0x10], 0
0x5717:	mov	qword ptr [r13 + 8], 0
0x571f:	mov	rcx, qword ptr [rsp + 0x18]
0x5724:	xor	rcx, qword ptr fs:[0x28]
0x572d:	mov	rax, rbp
0x5730:	jne	0x5755


0x5689:	mov	rax, rbx
0x568c:	xor	edx, edx
0x568e:	sub	rax, r14
0x5691:	div	r15
0x5694:	sub	rbx, rdx
0x5697:	mov	rdi, rdx
0x569a:	mov	rsi, rax
0x569d:	xor	edx, edx
0x569f:	mov	rax, rbp
0x56a2:	div	r15
0x56a5:	cmp	rbp, rbx
0x56a8:	jbe	0x5748


0x5451:	push	r12
0x5453:	push	rbp
0x5454:	mov	r12d, edx
0x5457:	push	rbx
0x5458:	mov	rbp, rsi
0x545b:	mov	rbx, rdi
0x545e:	call	0x19d0








0x19a0:	jmp	qword ptr [rip + 0x20854a]


0x5206:	test	rdx, rdx
0x5209:	je	0x51da




0x5021:	call	0x4ac0


0x5045:	mov	dword ptr [rsp + 8], r10d
0x504a:	jmp	0x5021


0x4ff0:	cmp	r10d, 0x2f
0x4ff4:	ja	0x504c


0x4f20:	mov	eax, dword ptr [r10]
0x4f23:	cmp	eax, 0x2f
0x4f26:	ja	0x4f6a




0x4a60:	lea	rdx, [rsp + 0xc]
0x4a65:	lea	rcx, [rip - 0x1fc]
0x4a6c:	call	0x4890


0x4a26:	lea	rcx, [rip + 0x2a73]
0x4a2d:	lea	rsi, [rip + 0x2a14]
0x4a34:	lea	rdi, [rip + 0x2a35]
0x4a3b:	mov	edx, 0x147
0x4a40:	call	0x1940


0x4344:	pop	rbx
0x4345:	mov	dword ptr [rip + 0x205d09], 1
0x434f:	pop	rbp
0x4350:	pop	r12
0x4352:	ret	


0x4335:	mov	rdi, r12
0x4338:	call	0x1790








0x2925:	cmp	dl, 0x2f
0x2928:	jne	0x2910


0x1b60:	jmp	qword ptr [rip + 0x20848a]


0x63a7:	cmp	esi, 4
0x63aa:	je	0x6480


0x6400:	cmp	esi, 0x407
0x6406:	jg	0x6450




0x5732:	add	rsp, 0x28
0x5736:	pop	rbx
0x5737:	pop	rbp
0x5738:	pop	r12
0x573a:	pop	r13
0x573c:	pop	r14
0x573e:	pop	r15
0x5740:	ret	


0x5755:	call	0x18d0


0x5748:	mov	qword ptr [r13 + 8], rax
0x574c:	mov	qword ptr [r13 + 0x10], rsi
0x5750:	mov	rbp, rdx
0x5753:	jmp	0x571f


0x56ae:	lea	rbx, [rdi - 1]
0x56b2:	mov	rbp, rdx
0x56b5:	cmp	rbx, r14
0x56b8:	jae	0x5680




0x51da:	mov	qword ptr [rsi], rcx
0x51dd:	imul	rcx, r9
0x51e1:	mov	rsi, rcx
0x51e4:	jmp	0x5140


0x1940:	jmp	qword ptr [rip + 0x20857a]


0x292a:	add	rcx, 1
0x292e:	movzx	edx, byte ptr [rcx]
0x2931:	mov	esi, 1
0x2936:	test	dl, dl
0x2938:	jne	0x2925


0x2910:	test	sil, sil
0x2913:	je	0x291a


0x6480:	mov	eax, dword ptr [rsp]
0x6483:	cmp	eax, 0x2f
0x6486:	ja	0x6574


0x63b0:	jg	0x6470


0x6408:	cmp	esi, 0x406
0x640e:	jge	0x6480


0x6450:	cmp	esi, 0x409
0x6456:	je	0x6480


0x18d0:	jmp	qword ptr [rip + 0x2085b2]


0x571f:	mov	rcx, qword ptr [rsp + 0x18]
0x5724:	xor	rcx, qword ptr fs:[0x28]
0x572d:	mov	rax, rbp
0x5730:	jne	0x5755




0x291a:	add	rcx, 1
0x291e:	movzx	edx, byte ptr [rcx]
0x2921:	test	dl, dl
0x2923:	je	0x293a


0x2915:	mov	rax, rcx
0x2918:	xor	esi, esi
0x291a:	add	rcx, 1
0x291e:	movzx	edx, byte ptr [rcx]
0x2921:	test	dl, dl
0x2923:	je	0x293a


0x648c:	add	rax, qword ptr [rsp + 0x10]
0x6491:	mov	edx, dword ptr [rax]
0x6493:	mov	edi, ebp
0x6495:	xor	eax, eax
0x6497:	call	0x1830


0x6574:	mov	rax, qword ptr [rsp + 8]
0x6579:	jmp	0x6491


0x63b6:	cmp	esi, 2
0x63b9:	je	0x6480


0x6470:	cmp	esi, 9
0x6473:	je	0x63d0


0x6410:	cmp	esi, 0x401
0x6416:	je	0x63d0


0x6458:	jl	0x63d0




0x6491:	mov	edx, dword ptr [rax]
0x6493:	mov	edi, ebp
0x6495:	xor	eax, eax
0x6497:	call	0x1830


0x63bf:	jg	0x63d0


0x6479:	jg	0x6480


0x6418:	cmp	esi, 0x402
0x641e:	je	0x6480


0x645e:	cmp	esi, 0x40a
0x6464:	jne	0x6428


0x63c1:	cmp	esi, 1
0x63c4:	jne	0x6428


0x647b:	cmp	esi, 8
0x647e:	jne	0x6428


0x6420:	cmp	esi, 0x400
0x6426:	je	0x6480


0x6466:	jmp	0x63d0


0x6428:	mov	eax, dword ptr [rsp]
0x642b:	cmp	eax, 0x2f
0x642e:	ja	0x656a


0x6434:	add	rax, qword ptr [rsp + 0x10]
0x6439:	mov	rdx, qword ptr [rax]
0x643c:	mov	edi, ebp
0x643e:	xor	eax, eax
0x6440:	call	0x1830


0x656a:	mov	rax, qword ptr [rsp + 8]
0x656f:	jmp	0x6439


0x6439:	mov	rdx, qword ptr [rax]
0x643c:	mov	edi, ebp
0x643e:	xor	eax, eax
0x6440:	call	0x1830


0x2318:	mov	byte ptr [rip + 0x207da9], 1
0x231f:	pop	rbp
0x2320:	ret	


0x29cc:	mov	rbx, rax
0x29cf:	mov	rdi, rax
0x29d2:	call	0x2940


0x65b1:	test	rbp, rbp
0x65b4:	je	0x65d6


0x65d6:	add	rsp, 8
0x65da:	pop	rbx
0x65db:	pop	rbp
0x65dc:	pop	r12
0x65de:	pop	r13
0x65e0:	pop	r14
0x65e2:	pop	r15
0x65e4:	ret	


0x65b6:	xor	ebx, ebx
0x65b8:	nop	dword ptr [rax + rax]
0x65c0:	mov	rdx, r15
0x65c3:	mov	rsi, r14
0x65c6:	mov	edi, r13d
0x65c9:	call	qword ptr [r12 + rbx*8]


0x52cf:	test	rax, rax
0x52d2:	je	0x52d9


0x52d4:	add	rsp, 8
0x52d8:	ret	


0x5cf9:	mov	qword ptr [r12 + 0x18], r14
0x5cfe:	jmp	0x5c02


0x5c02:	add	rsp, 0x18
0x5c06:	pop	rbx
0x5c07:	pop	rbp
0x5c08:	pop	r12
0x5c0a:	pop	r13
0x5c0c:	pop	r14
0x5c0e:	pop	r15
0x5c10:	ret	


0x56e0:	mov	rax, r12
0x56e3:	nop	dword ptr [rax + rax]
0x56e8:	movzx	edx, byte ptr [rax]
0x56eb:	shl	rbx, 8
0x56ef:	shl	rbp, 8
0x56f3:	add	rbx, 0xff
0x56fa:	add	rax, 1
0x56fe:	add	rbp, rdx
0x5701:	cmp	r14, rbx
0x5704:	ja	0x56e8


0x5706:	cmp	rbx, r14
0x5709:	jne	0x5689


0x56e8:	movzx	edx, byte ptr [rax]
0x56eb:	shl	rbx, 8
0x56ef:	shl	rbp, 8
0x56f3:	add	rbx, 0xff
0x56fa:	add	rax, 1
0x56fe:	add	rbp, rdx
0x5701:	cmp	r14, rbx
0x5704:	ja	0x56e8


0x5c53:	test	bl, 7
0x5c56:	jne	0x5cc0


0x5c58:	cmp	rbp, 0x7ff
0x5c5f:	jbe	0x5d03


0x5cc0:	mov	rsi, qword ptr [rsp + 8]
0x5cc5:	mov	rdi, r13
0x5cc8:	mov	r14d, 0x800
0x5cce:	call	0x5d80


0x5d03:	mov	rsi, qword ptr [rsp + 8]
0x5d08:	mov	rdi, r13
0x5d0b:	call	0x5d80


0x5c65:	lea	r15, [rbp - 0x800]
0x5c6c:	mov	r14, r15
0x5c6f:	and	r14d, 0x7ff
0x5c76:	jmp	0x5c8c


0x5c8c:	mov	rsi, rbx
0x5c8f:	mov	rdi, r13
0x5c92:	add	rbx, 0x800
0x5c99:	call	0x5d80


0x5c9e:	test	r15, r15
0x5ca1:	mov	rbp, r15
0x5ca4:	jne	0x5c80


0x5ca6:	mov	qword ptr [r12 + 0x18], 0
0x5caf:	add	rsp, 0x18
0x5cb3:	pop	rbx
0x5cb4:	pop	rbp
0x5cb5:	pop	r12
0x5cb7:	pop	r13
0x5cb9:	pop	r14
0x5cbb:	pop	r15
0x5cbd:	ret	


0x5c80:	cmp	r15, r14
0x5c83:	je	0x5cc0


0x5c85:	sub	r15, 0x800
0x5c8c:	mov	rsi, rbx
0x5c8f:	mov	rdi, r13
0x5c92:	add	rbx, 0x800
0x5c99:	call	0x5d80


0x5d10:	jmp	0x5ce0


0x5ce0:	mov	r14d, 0x800
0x5ce6:	mov	rsi, qword ptr [rsp + 8]
0x5ceb:	mov	rdx, rbp
0x5cee:	mov	rdi, rbx
0x5cf1:	sub	r14, rbp
0x5cf4:	call	0x19c0


0x5cd3:	cmp	rbp, 0x800
0x5cda:	ja	0x5c35


0x2ac3:	test	rax, rax
0x2ac6:	je	0x2b1d


0x2b1d:	mov	qword ptr [rip + 0x2075bc], rbx
0x2b24:	mov	qword ptr [rip + 0x207575], rbx
0x2b2b:	pop	rbx
0x2b2c:	ret	


0x2ac8:	lea	r8, [rax + 1]
0x2acc:	mov	rdx, r8
0x2acf:	sub	rdx, rbx
0x2ad2:	cmp	rdx, 6
0x2ad6:	jle	0x2b1d


0x2ad8:	lea	rsi, [rax - 6]
0x2adc:	lea	rdi, [rip + 0x4475]
0x2ae3:	mov	ecx, 7
0x2ae8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2ae8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2aea:	seta	dl
0x2aed:	sbb	dl, 0
0x2af0:	test	dl, dl
0x2af2:	jne	0x2b1d


0x2af4:	lea	rdi, [rip + 0x4465]
0x2afb:	mov	ecx, 3
0x2b00:	mov	rsi, r8
0x2b03:	mov	rbx, r8
0x2b06:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2b06:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2b08:	seta	dl
0x2b0b:	sbb	dl, 0
0x2b0e:	test	dl, dl
0x2b10:	jne	0x2b1d


0x2b12:	lea	rbx, [rax + 4]
0x2b16:	mov	qword ptr [rip + 0x207563], rbx
0x2b1d:	mov	qword ptr [rip + 0x2075bc], rbx
0x2b24:	mov	qword ptr [rip + 0x207575], rbx
0x2b2b:	pop	rbx
0x2b2c:	ret	


0x2b4a:	call	0x17a0


0x433d:	mov	qword ptr [rip + 0x205d1c], rbx
0x4344:	pop	rbx
0x4345:	mov	dword ptr [rip + 0x205d09], 1
0x434f:	pop	rbp
0x4350:	pop	r12
0x4352:	ret	


0x4317:	mov	qword ptr [rip + 0x205d4e], 0x100
0x4322:	mov	qword ptr [rip + 0x205d4f], rbx
0x4329:	lea	rbx, [rip + 0x205d40]
0x4330:	cmp	r12, rbx
0x4333:	je	0x4344


0x516d:	xor	eax, eax
0x516f:	pop	rbx
0x5170:	ret	


0x42fc:	cmp	rbx, rbp
0x42ff:	jne	0x42f0


0x42f0:	mov	rdi, qword ptr [rbx]
0x42f3:	add	rbx, 0x10
0x42f7:	call	0x1790


0x4afc:	lea	rsi, [rip + 0x2a0f]
0x4b03:	xor	edi, edi
0x4b05:	mov	edx, 5
0x4b0a:	call	0x1890


0x4c11:	jmp	0x4afc


0x5156:	test	rax, rax
0x5159:	jne	0x5160


0x515b:	test	rbx, rbx
0x515e:	jne	0x5171


0x5160:	pop	rbx
0x5161:	ret	


0x5171:	call	0x5330


0x53fe:	test	eax, eax
0x5400:	je	0x540a


0x5402:	test	dword ptr [rbx], 0x100
0x5408:	jne	0x5418


0x5418:	mov	rdi, rbx
0x541b:	mov	edx, 1
0x5420:	xor	esi, esi
0x5422:	call	0x5430


0x6445:	mov	ebx, eax
0x6447:	jmp	0x63e0


0x63e0:	mov	rcx, qword ptr [rsp + 0x18]
0x63e5:	xor	rcx, qword ptr fs:[0x28]
0x63ee:	mov	eax, ebx
0x63f0:	jne	0x654d


0x63f6:	add	rsp, 0x50
0x63fa:	pop	rbx
0x63fb:	pop	rbp
0x63fc:	pop	r12
0x63fe:	ret	


0x654d:	call	0x18d0


0x63d9:	mov	ebx, eax
0x63db:	nop	dword ptr [rax + rax]
0x63e0:	mov	rcx, qword ptr [rsp + 0x18]
0x63e5:	xor	rcx, qword ptr fs:[0x28]
0x63ee:	mov	eax, ebx
0x63f0:	jne	0x654d


0x649c:	mov	ebx, eax
0x649e:	jmp	0x63e0


0x6385:	test	eax, eax
0x6387:	mov	ebx, eax
0x6389:	js	0x6518


0x6518:	call	0x17b0


0x638f:	mov	dword ptr [rip + 0x203e9f], 1
0x6399:	jmp	0x63e0


0x64ac:	test	eax, eax
0x64ae:	mov	ebx, eax
0x64b0:	js	0x63e0


0x64b6:	cmp	dword ptr [rip + 0x203d7b], -1
0x64bd:	jne	0x63e0


0x64c3:	xor	eax, eax
0x64c5:	mov	esi, 1
0x64ca:	mov	edi, ebx
0x64cc:	call	0x1830


0x64d1:	test	eax, eax
0x64d3:	js	0x64f1


0x64f1:	call	0x17b0


0x64d5:	or	eax, 1
0x64d8:	mov	esi, 2
0x64dd:	mov	edi, ebx
0x64df:	mov	edx, eax
0x64e1:	xor	eax, eax
0x64e3:	call	0x1830


0x64e8:	cmp	eax, -1
0x64eb:	jne	0x63e0


0x6563:	mov	ebx, eax
0x6565:	jmp	0x63e0


0x1b97:	lea	rsi, [rip + 0x59ba]
0x1b9e:	mov	edi, 6
0x1ba3:	call	0x1a50


0x279c:	mov	ebx, dword ptr [rbp]
0x279f:	mov	rdi, rbp
0x27a2:	mov	r12, rax
0x27a5:	call	0x5370


0x2cb1:	cmp	r15d, 0xa
0x2cb5:	mov	qword ptr [rsp + 0x58], rax
0x2cba:	ja	0x3e6f


0x2cc0:	lea	rcx, [rip + 0x4319]
0x2cc7:	mov	edx, r15d
0x2cca:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2cce:	add	rax, rcx
0x2cd1:	jmp	rax


0x3e6f:	call	0x17a0


0x480b:	mov	ebx, eax
0x480d:	call	0x17b0


0x4812:	test	ebx, ebx
0x4814:	je	0x4830


0x4830:	mov	dword ptr [rax], 0x11
0x4836:	mov	eax, 0xffffffff
0x483b:	mov	rcx, qword ptr [rsp + 0x98]
0x4843:	xor	rcx, qword ptr fs:[0x28]
0x484c:	jne	0x4857


0x4816:	mov	edx, dword ptr [rax]
0x4818:	cmp	edx, 0x4b
0x481b:	je	0x4830


0x484e:	add	rsp, 0xa0
0x4855:	pop	rbx
0x4856:	ret	


0x4857:	call	0x18d0


0x481d:	xor	eax, eax
0x481f:	cmp	edx, 2
0x4822:	setne	al
0x4825:	neg	eax
0x4827:	jmp	0x483b


0x483b:	mov	rcx, qword ptr [rsp + 0x98]
0x4843:	xor	rcx, qword ptr fs:[0x28]
0x484c:	jne	0x4857


0x64f6:	mov	r12d, dword ptr [rax]
0x64f9:	mov	rbp, rax
0x64fc:	mov	edi, ebx
0x64fe:	call	0x1960


0x1960:	jmp	qword ptr [rip + 0x20856a]




0x651d:	cmp	dword ptr [rax], 0x16
0x6520:	jne	0x638f


0x6526:	xor	esi, esi
0x6528:	xor	eax, eax
0x652a:	mov	edx, r12d
0x652d:	mov	edi, ebp
0x652f:	call	0x1830


0x6534:	test	eax, eax
0x6536:	mov	ebx, eax
0x6538:	js	0x63e0


0x653e:	mov	dword ptr [rip + 0x203cf0], 0xffffffff
0x6548:	jmp	0x64c3


0x5bb9:	mov	rcx, qword ptr [rsp + 8]
0x5bbe:	mov	r13, rax
0x5bc1:	jmp	0x5be6


0x5be6:	mov	rdx, rbp
0x5be9:	mov	rdi, rbx
0x5bec:	mov	esi, 1
0x5bf1:	call	0x1850


0x1850:	jmp	qword ptr [rip + 0x2085f2]




0x3ea1:	mov	r13, rax
0x3ea4:	mov	eax, dword ptr [rax]
0x3ea6:	test	r15d, r15d
0x3ea9:	mov	rbx, qword ptr [rip + 0x2061b0]
0x3eb0:	mov	dword ptr [rsp + 0x18], eax
0x3eb4:	js	0x4021


0x4021:	call	0x17a0


0x3eba:	cmp	dword ptr [rip + 0x206197], r15d
0x3ec1:	jg	0x3f25


0x3ec3:	cmp	r15d, 0x7fffffff
0x3eca:	je	0x4026


0x3f25:	mov	eax, dword ptr [rbp + 4]
0x3f28:	shl	r15, 4
0x3f2c:	sub	rsp, 8
0x3f30:	add	rbx, r15
0x3f33:	lea	r15, [rbp + 8]
0x3f37:	mov	r8d, dword ptr [rbp]
0x3f3b:	mov	r11, qword ptr [rbx]
0x3f3e:	mov	r12, qword ptr [rbx + 8]
0x3f42:	mov	rcx, r14
0x3f45:	or	eax, 1
0x3f48:	mov	dword ptr [rsp + 0x24], eax
0x3f4c:	push	qword ptr [rbp + 0x30]
0x3f4f:	mov	r9d, eax
0x3f52:	push	qword ptr [rbp + 0x28]
0x3f55:	push	r15
0x3f57:	mov	rsi, r11
0x3f5a:	mov	rdx, qword ptr [rsp + 0x28]
0x3f5f:	mov	rdi, r12
0x3f62:	mov	qword ptr [rsp + 0x30], r11
0x3f67:	call	0x2c40


0x4026:	call	0x5330


0x3ed0:	lea	r12d, [r15 + 1]
0x3ed4:	lea	rax, [rip + 0x206195]
0x3edb:	movsxd	rsi, r12d
0x3ede:	shl	rsi, 4
0x3ee2:	cmp	rbx, rax
0x3ee5:	je	0x4000


0x4000:	xor	edi, edi
0x4002:	call	0x5140


0x3eeb:	mov	rdi, rbx
0x3eee:	call	0x5140


0x3ef3:	mov	rbx, rax
0x3ef6:	mov	qword ptr [rip + 0x206163], rax
0x3efd:	movsxd	rdi, dword ptr [rip + 0x206154]
0x3f04:	mov	edx, r12d
0x3f07:	xor	esi, esi
0x3f09:	sub	edx, edi
0x3f0b:	shl	rdi, 4
0x3f0f:	movsxd	rdx, edx
0x3f12:	add	rdi, rbx
0x3f15:	shl	rdx, 4
0x3f19:	call	0x1950


0x1950:	jmp	qword ptr [rip + 0x208572]




0x4007:	movdqa	xmm0, xmmword ptr [rip + 0x206061]
0x400f:	mov	rbx, rax
0x4012:	mov	qword ptr [rip + 0x206047], rax
0x4019:	movups	xmmword ptr [rax], xmm0
0x401c:	jmp	0x3efd


0x3efd:	movsxd	rdi, dword ptr [rip + 0x206154]
0x3f04:	mov	edx, r12d
0x3f07:	xor	esi, esi
0x3f09:	sub	edx, edi
0x3f0b:	shl	rdi, 4
0x3f0f:	movsxd	rdx, edx
0x3f12:	add	rdi, rbx
0x3f15:	shl	rdx, 4
0x3f19:	call	0x1950


0x403c:	mov	r12d, dword ptr [rax]
0x403f:	mov	rbp, rax
0x4042:	lea	rax, [rip + 0x2061b7]
0x4049:	test	rbx, rbx
0x404c:	mov	esi, 0x38
0x4051:	cmove	rbx, rax
0x4055:	mov	rdi, rbx
0x4058:	call	0x52e0


0x4172:	mov	r12d, dword ptr [rax]
0x4175:	mov	rbp, rax
0x4178:	lea	rax, [rbx + 8]
0x417c:	sub	rsp, 8
0x4180:	mov	r9d, dword ptr [rbx + 4]
0x4184:	push	qword ptr [rbx + 0x30]
0x4187:	mov	r8d, dword ptr [rbx]
0x418a:	push	qword ptr [rbx + 0x28]
0x418d:	mov	rdx, r15
0x4190:	push	rax
0x4191:	mov	rcx, qword ptr [rsp + 0x28]
0x4196:	mov	rsi, r14
0x4199:	mov	rdi, r13
0x419c:	call	0x2c40


0x41ef:	test	r12, r12
0x41f2:	mov	r13, rax
0x41f5:	mov	eax, dword ptr [rax]
0x41f7:	sete	bpl
0x41fb:	or	ebp, dword ptr [rbx + 4]
0x41fe:	lea	r10, [rbx + 8]
0x4202:	sub	rsp, 8
0x4206:	mov	r8d, dword ptr [rbx]
0x4209:	mov	rcx, r15
0x420c:	mov	dword ptr [rsp + 0x14], eax
0x4210:	push	qword ptr [rbx + 0x30]
0x4213:	mov	rdx, r14
0x4216:	push	qword ptr [rbx + 0x28]
0x4219:	push	r10
0x421b:	xor	esi, esi
0x421d:	mov	r9d, ebp
0x4220:	xor	edi, edi
0x4222:	mov	qword ptr [rsp + 0x40], r10
0x4227:	call	0x2c40


0x48b9:	mov	qword ptr [rsp + 8], rax
0x48be:	mov	eax, dword ptr [rax]
0x48c0:	mov	rdi, r15
0x48c3:	mov	dword ptr [rsp + 0x2c], eax
0x48c7:	call	0x18b0


0x50e9:	test	rax, rax
0x50ec:	jne	0x50f3


0x50ee:	test	rbx, rbx
0x50f1:	jne	0x50f5


0x50f3:	pop	rbx
0x50f4:	ret	


0x50f5:	call	0x5330


0x48cc:	movsxd	rsi, ebp
0x48cf:	lea	rdx, [rsi + r14]
0x48d3:	cmp	rdx, rax
0x48d6:	ja	0x49eb


0x48dc:	sub	rax, r14
0x48df:	mov	rbx, rax
0x48e2:	sub	rbx, rsi
0x48e5:	lea	rsi, [rip + 0x2f7a]
0x48ec:	lea	rax, [r15 + rbx]
0x48f0:	mov	rdi, rax
0x48f3:	mov	qword ptr [rsp + 0x10], rax
0x48f8:	call	0x1970


0x49eb:	mov	rax, qword ptr [rsp + 8]
0x49f0:	mov	edx, 0xffffffff
0x49f5:	mov	dword ptr [rax], 0x16
0x49fb:	jmp	0x49d3


0x1970:	jmp	qword ptr [rip + 0x208562]


0x49d3:	add	rsp, 0x38
0x49d7:	mov	eax, edx
0x49d9:	pop	rbx
0x49da:	pop	rbp
0x49db:	pop	r12
0x49dd:	pop	r13
0x49df:	pop	r14
0x49e1:	pop	r15
0x49e3:	ret	




0x4a71:	add	rsp, 0x18
0x4a75:	ret	


0x4a59:	add	rsp, 0x18
0x4a5d:	ret	


0x4a91:	add	rsp, 0x18
0x4a95:	ret	


0x2949:	cmp	rax, 1
0x294d:	jbe	0x295a


0x295a:	pop	rbx
0x295b:	ret	


0x294f:	cmp	byte ptr [rbx + rax - 1], 0x2f
0x2954:	lea	rdx, [rax - 1]
0x2958:	je	0x2968


0x2968:	cmp	rdx, 1
0x296c:	je	0x2980


0x2980:	mov	eax, 1
0x2985:	pop	rbx
0x2986:	ret	


0x296e:	cmp	byte ptr [rbx + rdx - 1], 0x2f
0x2973:	lea	rax, [rdx - 1]
0x2977:	je	0x2960


0x2960:	mov	rdx, rax
0x2963:	nop	dword ptr [rax + rax]
0x2968:	cmp	rdx, 1
0x296c:	je	0x2980


0x2979:	mov	rax, rdx
0x297c:	pop	rbx
0x297d:	ret	


0x29d7:	sub	rbx, r12
0x29da:	mov	r13, rax
0x29dd:	mov	rdi, rbp
0x29e0:	add	rbx, rax
0x29e3:	call	0x18b0


0x29e8:	test	r13, r13
0x29eb:	mov	r14, rax
0x29ee:	je	0x2a20


0x2a20:	xor	eax, eax
0x2a22:	cmp	byte ptr [rbp], 0x2f
0x2a26:	mov	edx, 0
0x2a2b:	sete	al
0x2a2e:	mov	qword ptr [rsp], rax
0x2a32:	mov	eax, 0x2e
0x2a37:	cmovne	eax, edx
0x2a3a:	mov	byte ptr [rsp + 0xf], al
0x2a3e:	lea	rdi, [rbx + r14 + 1]
0x2a43:	add	rdi, qword ptr [rsp]
0x2a47:	call	0x19f0


0x29f0:	cmp	byte ptr [r12 + rbx - 1], 0x2f
0x29f6:	je	0x2aa0


0x2aa0:	mov	qword ptr [rsp], 0
0x2aa8:	mov	byte ptr [rsp + 0xf], 0
0x2aad:	jmp	0x2a3e


0x29fc:	xor	eax, eax
0x29fe:	cmp	byte ptr [rbp], 0x2f
0x2a02:	mov	edx, 0
0x2a07:	setne	al
0x2a0a:	mov	qword ptr [rsp], rax
0x2a0e:	mov	eax, 0x2f
0x2a13:	cmove	eax, edx
0x2a16:	mov	byte ptr [rsp + 0xf], al
0x2a1a:	jmp	0x2a3e


0x2a3e:	lea	rdi, [rbx + r14 + 1]
0x2a43:	add	rdi, qword ptr [rsp]
0x2a47:	call	0x19f0


0x2a4c:	test	rax, rax
0x2a4f:	mov	r13, rax
0x2a52:	je	0x2a86


0x2a86:	add	rsp, 0x18
0x2a8a:	mov	rax, r13
0x2a8d:	pop	rbx
0x2a8e:	pop	rbp
0x2a8f:	pop	r12
0x2a91:	pop	r13
0x2a93:	pop	r14
0x2a95:	pop	r15
0x2a97:	ret	


0x2a54:	mov	rdi, rax
0x2a57:	mov	rdx, rbx
0x2a5a:	mov	rsi, r12
0x2a5d:	call	0x1a80


0x1a80:	jmp	qword ptr [rip + 0x2084da]




0x2999:	test	rax, rax
0x299c:	je	0x29a3


0x29a3:	call	0x5330


0x299e:	add	rsp, 8
0x29a2:	ret	


0x5319:	mov	rdi, rbx
0x531c:	lea	rsi, [rax + 1]
0x5320:	pop	rbx
0x5321:	jmp	0x52e0


0x4b0f:	lea	rdx, [rip + 0x2d0a]
0x4b16:	mov	rcx, rax
0x4b19:	mov	r8d, 0x7e3
0x4b1f:	mov	esi, 1
0x4b24:	mov	rdi, rbp
0x4b27:	xor	eax, eax
0x4b29:	call	0x1b20


0x4b2e:	lea	rsi, [rip + 0x2a63]
0x4b35:	xor	edi, edi
0x4b37:	mov	edx, 5
0x4b3c:	call	0x1890


0x4b41:	mov	rsi, rbp
0x4b44:	mov	rdi, rax
0x4b47:	call	0x1990


0x1990:	jmp	qword ptr [rip + 0x208552]




0x23bd:	mov	rdi, qword ptr [rip + 0x207cfc]
0x23c4:	mov	rdx, rax
0x23c7:	mov	rcx, rbx
0x23ca:	mov	esi, 1
0x23cf:	xor	eax, eax
0x23d1:	call	0x1b20


0x23d6:	mov	edi, ebp
0x23d8:	call	0x1b00


0x1b00:	jmp	qword ptr [rip + 0x20849a]




0x23eb:	mov	rdx, rbx
0x23ee:	mov	rsi, rax
0x23f1:	mov	edi, 1
0x23f6:	xor	eax, eax
0x23f8:	call	0x1a60


0x1a60:	jmp	qword ptr [rip + 0x2084ea]




0x5074:	lea	rdx, [rip + 0x24f3]
0x507b:	mov	rsi, rax
0x507e:	mov	edi, 1
0x5083:	xor	eax, eax
0x5085:	call	0x1a60


0x5347:	mov	edi, dword ptr [rip + 0x204ccb]
0x534d:	lea	rdx, [rip + 0x1bc3]
0x5354:	mov	rcx, rax
0x5357:	xor	esi, esi
0x5359:	xor	eax, eax
0x535b:	call	0x1a90


0x1a90:	jmp	qword ptr [rip + 0x2084d2]




0x5463:	mov	edx, r12d
0x5466:	mov	rsi, rbp
0x5469:	mov	edi, eax
0x546b:	call	0x1920


0x1920:	jmp	qword ptr [rip + 0x20858a]




0x537c:	test	eax, eax
0x537e:	mov	rdi, rbx
0x5381:	js	0x53d7


0x53d7:	pop	rbx
0x53d8:	pop	rbp
0x53d9:	pop	r12
0x53db:	jmp	0x1870


0x5383:	call	0x1a20


0x1870:	jmp	qword ptr [rip + 0x2085e2]




0x5388:	test	eax, eax
0x538a:	jne	0x53b8


0x538c:	mov	rdi, rbx
0x538f:	call	0x53f0


0x53b8:	mov	rdi, rbx
0x53bb:	call	0x19d0


0x53c0:	xor	esi, esi
0x53c2:	mov	edx, 1
0x53c7:	mov	edi, eax
0x53c9:	call	0x1920


0x54c7:	cmp	rax, -3
0x54cb:	mov	rbp, rax
0x54ce:	jbe	0x54f0


0x54f0:	mov	rdx, qword ptr [rsp + 8]
0x54f5:	xor	rdx, qword ptr fs:[0x28]
0x54fe:	mov	rax, rbp
0x5501:	jne	0x550e


0x54d0:	test	r12, r12
0x54d3:	je	0x54f0


0x5503:	add	rsp, 0x18
0x5507:	pop	rbx
0x5508:	pop	rbp
0x5509:	pop	r12
0x550b:	pop	r13
0x550d:	ret	


0x550e:	call	0x18d0


0x54d5:	xor	edi, edi
0x54d7:	call	0x5520


0x1ba8:	lea	rsi, [rip + 0x4b33]
0x1baf:	lea	rdi, [rip + 0x4aef]
0x1bb6:	call	0x1880


0x1880:	jmp	qword ptr [rip + 0x2085da]




0x552b:	mov	rdx, rax
0x552e:	mov	eax, 1
0x5533:	test	rdx, rdx
0x5536:	je	0x5555


0x5555:	add	rsp, 8
0x5559:	ret	


0x5538:	lea	rdi, [rip + 0x2321]
0x553f:	mov	ecx, 2
0x5544:	mov	rsi, rdx
0x5547:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5547:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5549:	seta	cl
0x554c:	sbb	cl, 0
0x554f:	xor	eax, eax
0x5551:	test	cl, cl
0x5553:	jne	0x5560


0x5560:	lea	rdi, [rip + 0x22fb]
0x5567:	mov	ecx, 6
0x556c:	mov	rsi, rdx
0x556f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x556f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5571:	seta	al
0x5574:	sbb	al, 0
0x5576:	test	al, al
0x5578:	setne	al
0x557b:	add	rsp, 8
0x557f:	ret	


0x54dc:	test	al, al
0x54de:	jne	0x54f0


0x54e0:	movzx	eax, byte ptr [r13]
0x54e5:	mov	ebp, 1
0x54ea:	mov	dword ptr [rbx], eax
0x54ec:	nop	dword ptr [rax]
0x54f0:	mov	rdx, qword ptr [rsp + 8]
0x54f5:	xor	rdx, qword ptr fs:[0x28]
0x54fe:	mov	rax, rbp
0x5501:	jne	0x550e


0x558e:	test	rax, rax
0x5591:	je	0x55b0


0x55b0:	lea	rax, [rip + 0x22b1]
0x55b7:	add	rsp, 8
0x55bb:	ret	


0x5593:	cmp	byte ptr [rax], 0
0x5596:	lea	rdx, [rip + 0x22cb]
0x559d:	cmove	rax, rdx
0x55a1:	add	rsp, 8
0x55a5:	ret	


0x2b60:	movzx	edx, byte ptr [rax]
0x2b63:	and	edx, 0xffffffdf
0x2b66:	cmp	dl, 0x55
0x2b69:	je	0x2be0


0x2be0:	movzx	edx, byte ptr [rax + 1]
0x2be4:	and	edx, 0xffffffdf
0x2be7:	cmp	dl, 0x54
0x2bea:	jne	0x2b70


0x2b6b:	cmp	dl, 0x47
0x2b6e:	je	0x2b90


0x2bec:	movzx	edx, byte ptr [rax + 2]
0x2bf0:	and	edx, 0xffffffdf
0x2bf3:	cmp	dl, 0x46
0x2bf6:	jne	0x2b70


0x2b70:	lea	rax, [rip + 0x43fc]
0x2b77:	lea	rdx, [rip + 0x43f7]
0x2b7e:	cmp	ebx, 9
0x2b81:	cmovne	rax, rdx
0x2b85:	add	rsp, 8
0x2b89:	pop	rbx
0x2b8a:	pop	rbp
0x2b8b:	ret	


0x2b90:	movzx	edx, byte ptr [rax + 1]
0x2b94:	and	edx, 0xffffffdf
0x2b97:	cmp	dl, 0x42
0x2b9a:	jne	0x2b70


0x2bfc:	cmp	byte ptr [rax + 3], 0x2d
0x2c00:	jne	0x2b70


0x2b9c:	cmp	byte ptr [rax + 2], 0x31
0x2ba0:	jne	0x2b70


0x2c06:	cmp	byte ptr [rax + 4], 0x38
0x2c0a:	jne	0x2b70


0x2ba2:	cmp	byte ptr [rax + 3], 0x38
0x2ba6:	jne	0x2b70


0x2c10:	cmp	byte ptr [rax + 5], 0
0x2c14:	jne	0x2b70


0x2ba8:	cmp	byte ptr [rax + 4], 0x30
0x2bac:	jne	0x2b70


0x2c1a:	cmp	byte ptr [rbp], 0x60
0x2c1e:	lea	rax, [rip + 0x433f]
0x2c25:	lea	rdx, [rip + 0x433c]
0x2c2c:	cmovne	rax, rdx
0x2c30:	add	rsp, 8
0x2c34:	pop	rbx
0x2c35:	pop	rbp
0x2c36:	ret	


0x2bae:	cmp	byte ptr [rax + 5], 0x33
0x2bb2:	jne	0x2b70


0x2bb4:	cmp	byte ptr [rax + 6], 0x30
0x2bb8:	jne	0x2b70


0x2bba:	cmp	byte ptr [rax + 7], 0
0x2bbe:	jne	0x2b70


0x2bc0:	cmp	byte ptr [rbp], 0x60
0x2bc4:	lea	rax, [rip + 0x43a1]
0x2bcb:	lea	rdx, [rip + 0x439e]
0x2bd2:	cmovne	rax, rdx
0x2bd6:	add	rsp, 8
0x2bda:	pop	rbx
0x2bdb:	pop	rbp
0x2bdc:	ret	


0x58fa:	mov	rbx, rax
0x58fd:	mov	qword ptr [rax], 0
0x5904:	lea	rax, [rip - 0x12b]
0x590b:	lea	rdi, [rip + 0x1f7b]
0x5912:	xor	esi, esi
0x5914:	mov	qword ptr [rbx + 0x10], 0
0x591c:	mov	qword ptr [rbx + 8], rax
0x5920:	mov	qword ptr [rbx + 0x18], 0
0x5928:	xor	eax, eax
0x592a:	call	0x1ab0


0x592f:	test	eax, eax
0x5931:	lea	r13, [rbx + 0x20]
0x5935:	mov	r15d, eax
0x5938:	js	0x59b8


0x59b8:	lea	r12, [rsp + 0x10]
0x59bd:	xor	esi, esi
0x59bf:	mov	r14d, 0x18
0x59c5:	mov	rdi, r12
0x59c8:	call	0x1930


0x593a:	cmp	rbp, 0x800
0x5941:	mov	rdx, rbp
0x5944:	mov	r14d, 0x800
0x594a:	cmova	rdx, r14
0x594e:	mov	ecx, 0x1018
0x5953:	mov	rsi, r13
0x5956:	mov	edi, eax
0x5958:	call	0x1800


0x1930:	jmp	qword ptr [rip + 0x208582]


0x1800:	jmp	qword ptr [rip + 0x20861a]






0x5992:	mov	rbx, rax
0x5995:	mov	qword ptr [rax], 0
0x599c:	lea	rax, [rip - 0x1c3]
0x59a3:	mov	qword ptr [rbx + 0x10], 0
0x59ab:	mov	qword ptr [rbx + 8], rax
0x59af:	jmp	0x58c7


0x58c7:	mov	rdx, qword ptr [rsp + 0x28]
0x58cc:	xor	rdx, qword ptr fs:[0x28]
0x58d5:	mov	rax, rbx
0x58d8:	jne	0x5a8f


0x58de:	add	rsp, 0x38
0x58e2:	pop	rbx
0x58e3:	pop	rbp
0x58e4:	pop	r12
0x58e6:	pop	r13
0x58e8:	pop	r14
0x58ea:	pop	r15
0x58ec:	ret	


0x5a8f:	call	0x18d0


0x5299:	mov	rdx, rbx
0x529c:	xor	esi, esi
0x529e:	mov	rdi, rax
0x52a1:	pop	rbx
0x52a2:	jmp	0x1950


0x52f4:	add	rsp, 8
0x52f8:	mov	rdx, rbx
0x52fb:	mov	rsi, rbp
0x52fe:	pop	rbx
0x52ff:	pop	rbp
0x5300:	mov	rdi, rax
0x5303:	jmp	0x19c0


0x55ce:	mov	qword ptr [rax], rbx
0x55d1:	mov	qword ptr [rax + 0x10], 0
0x55d9:	mov	qword ptr [rax + 8], 0
0x55e1:	pop	rbx
0x55e2:	ret	


0x55f6:	test	rax, rax
0x55f9:	je	0x5620


0x5620:	xor	eax, eax
0x5622:	pop	rbx
0x5623:	ret	


0x55fb:	mov	rbx, rax
0x55fe:	mov	edi, 0x18
0x5603:	call	0x50e0


0x5608:	mov	qword ptr [rax], rbx
0x560b:	mov	qword ptr [rax + 0x10], 0
0x5613:	mov	qword ptr [rax + 8], 0
0x561b:	pop	rbx
0x561c:	ret	


0x5775:	mov	rdi, rbx
0x5778:	pop	rbx
0x5779:	jmp	0x1790


0x5d4d:	mov	rdi, rbx
0x5d50:	call	0x1790


0x5d55:	test	rbp, rbp
0x5d58:	je	0x5d70


0x5d70:	add	rsp, 8
0x5d74:	xor	eax, eax
0x5d76:	pop	rbx
0x5d77:	pop	rbp
0x5d78:	ret	


0x5d5a:	add	rsp, 8
0x5d5e:	mov	rdi, rbp
0x5d61:	pop	rbx
0x5d62:	pop	rbp
0x5d63:	jmp	0x5370


0x5795:	mov	r12d, eax
0x5798:	call	0x17b0


0x579d:	mov	r13d, dword ptr [rax]
0x57a0:	mov	rdi, rbx
0x57a3:	mov	rdx, -1
0x57aa:	mov	esi, 0x18
0x57af:	mov	rbp, rax
0x57b2:	call	0x1aa0


0x57b7:	mov	rdi, rbx
0x57ba:	call	0x1790


0x57bf:	mov	dword ptr [rbp], r13d
0x57c3:	add	rsp, 8
0x57c7:	mov	eax, r12d
0x57ca:	pop	rbx
0x57cb:	pop	rbp
0x57cc:	pop	r12
0x57ce:	pop	r13
0x57d0:	ret	


0x625c:	test	rax, rax
0x625f:	mov	rbx, rax
0x6262:	je	0x6271


0x6271:	mov	rax, rbx
0x6274:	pop	rbx
0x6275:	pop	rbp
0x6276:	pop	r12
0x6278:	ret	


0x6264:	mov	rdi, rax
0x6267:	call	0x19d0


0x626c:	cmp	eax, 2
0x626f:	jbe	0x6280


0x6280:	mov	edi, eax
0x6282:	call	0x62f0


0x587e:	test	rax, rax
0x5881:	mov	r13, rax
0x5884:	je	0x5a88


0x5a88:	xor	ebx, ebx
0x5a8a:	jmp	0x58c7


0x588a:	mov	edi, 0x1038
0x588f:	call	0x50e0


0x5894:	mov	rbx, rax
0x5897:	mov	qword ptr [rax], r13
0x589a:	lea	rax, [rip - 0xc1]
0x58a1:	cmp	rbp, 0x1000
0x58a8:	mov	ecx, 0x1000
0x58ad:	lea	rsi, [rbx + 0x18]
0x58b1:	cmovbe	rcx, rbp
0x58b5:	mov	qword ptr [rbx + 8], rax
0x58b9:	mov	qword ptr [rbx + 0x10], r12
0x58bd:	xor	edx, edx
0x58bf:	mov	rdi, r13
0x58c2:	call	0x1a70


0x1a70:	jmp	qword ptr [rip + 0x2084e2]




0x6287:	test	eax, eax
0x6289:	mov	r12d, eax
0x628c:	js	0x62c8


0x62c8:	call	0x17b0


0x628e:	mov	rdi, rbx
0x6291:	call	0x5370


0x62cd:	mov	r12d, dword ptr [rax]
0x62d0:	mov	rbp, rax
0x62d3:	mov	rdi, rbx
0x62d6:	call	0x5370


0x595d:	mov	edi, r15d
0x5960:	mov	rbp, rax
0x5963:	call	0x1960


0x59cd:	movdqa	xmm0, xmmword ptr [rsp + 0x10]
0x59d3:	movups	xmmword ptr [rbx + 0x20], xmm0
0x59d7:	call	0x1840


0x1840:	jmp	qword ptr [rip + 0x2085fa]




0x1bbb:	lea	rdi, [rip + 0x4ae3]
0x1bc2:	call	0x1860


0x1860:	jmp	qword ptr [rip + 0x2085ea]




0x53ce:	cmp	rax, -1
0x53d2:	jne	0x538c


0x53d4:	mov	rdi, rbx
0x53d7:	pop	rbx
0x53d8:	pop	rbp
0x53d9:	pop	r12
0x53db:	jmp	0x1870


0x5470:	cmp	rax, -1
0x5474:	je	0x5482


0x5482:	pop	rbx
0x5483:	pop	rbp
0x5484:	pop	r12
0x5486:	ret	


0x5476:	and	dword ptr [rbx], 0xffffffef
0x5479:	mov	qword ptr [rbx + 0x90], rax
0x5480:	xor	eax, eax
0x5482:	pop	rbx
0x5483:	pop	rbp
0x5484:	pop	r12
0x5486:	ret	


0x5360:	call	0x17a0


0x508a:	lea	rsi, [rip + 0x24f3]
0x5091:	mov	edx, 5
0x5096:	xor	edi, edi
0x5098:	call	0x1890


0x509d:	lea	rcx, [rip + 0x1c94]
0x50a4:	lea	rdx, [rip + 0x15f6]
0x50ab:	mov	rsi, rax
0x50ae:	mov	edi, 1
0x50b3:	xor	eax, eax
0x50b5:	call	0x1a60


0x50ba:	mov	rbx, qword ptr [rip + 0x204fc7]
0x50c1:	lea	rsi, [rip + 0x26e8]
0x50c8:	xor	edi, edi
0x50ca:	mov	edx, 5
0x50cf:	call	0x1890


0x50d4:	mov	rsi, rbx
0x50d7:	mov	rdi, rax
0x50da:	pop	rbx
0x50db:	jmp	0x1990


0x23fd:	mov	rbx, qword ptr [rip + 0x207c84]
0x2404:	lea	rsi, [rip + 0x43d5]
0x240b:	mov	edx, 5
0x2410:	xor	edi, edi
0x2412:	call	0x1890


0x2417:	mov	rsi, rbx
0x241a:	mov	rdi, rax
0x241d:	call	0x1990


0x2422:	mov	rbx, qword ptr [rip + 0x207c5f]
0x2429:	lea	rsi, [rip + 0x4488]
0x2430:	mov	edx, 5
0x2435:	xor	edi, edi
0x2437:	call	0x1890


0x243c:	mov	rsi, rbx
0x243f:	mov	rdi, rax
0x2442:	call	0x1990


0x2447:	mov	rsi, qword ptr [rip + 0x207c3a]
0x244e:	mov	edi, 0xa
0x2453:	call	0x19b0


0x19b0:	jmp	qword ptr [rip + 0x208542]




0x4b4c:	cmp	r12, 9
0x4b50:	ja	0x4e90


0x4b56:	lea	rdx, [rip + 0x2c9b]
0x4b5d:	movsxd	rax, dword ptr [rdx + r12*4]
0x4b61:	add	rax, rdx
0x4b64:	jmp	rax


0x4e90:	mov	r10, qword ptr [rbx + 0x40]
0x4e94:	mov	r9, qword ptr [rbx + 0x38]
0x4e98:	mov	edx, 5
0x4e9d:	mov	rax, qword ptr [rbx + 0x10]
0x4ea1:	mov	r8, qword ptr [rbx + 8]
0x4ea5:	lea	rsi, [rip + 0x28c4]
0x4eac:	mov	r13, qword ptr [rbx + 0x30]
0x4eb0:	mov	r12, qword ptr [rbx + 0x28]
0x4eb4:	mov	r15, qword ptr [rbx + 0x20]
0x4eb8:	mov	r14, qword ptr [rbx + 0x18]
0x4ebc:	mov	qword ptr [rsp + 0x18], r10
0x4ec1:	mov	qword ptr [rsp + 0x10], r9
0x4ec6:	mov	qword ptr [rsp], rax
0x4eca:	mov	qword ptr [rsp + 8], r8
0x4ecf:	mov	rbx, qword ptr [rbx]
0x4ed2:	jmp	0x4c62


0x4c62:	xor	edi, edi
0x4c64:	call	0x1890


0x4c69:	mov	r10, qword ptr [rsp + 0x18]
0x4c6e:	push	r10
0x4c70:	jmp	0x4bb4


0x4bb4:	mov	r9, qword ptr [rsp + 0x18]
0x4bb9:	mov	rdx, rax
0x4bbc:	mov	rcx, rbx
0x4bbf:	mov	esi, 1
0x4bc4:	mov	rdi, rbp
0x4bc7:	xor	eax, eax
0x4bc9:	push	r9
0x4bcb:	push	r13
0x4bcd:	push	r12
0x4bcf:	push	r15
0x4bd1:	push	r14
0x4bd3:	mov	r9, qword ptr [rsp + 0x30]
0x4bd8:	mov	r8, qword ptr [rsp + 0x38]
0x4bdd:	call	0x1b20


0x4be2:	add	rsp, 0x30
0x4be6:	add	rsp, 0x28
0x4bea:	pop	rbx
0x4beb:	pop	rbp
0x4bec:	pop	r12
0x4bee:	pop	r13
0x4bf0:	pop	r14
0x4bf2:	pop	r15
0x4bf4:	ret	


0x2a62:	movzx	ecx, byte ptr [rsp + 0xf]
0x2a67:	mov	rdi, qword ptr [rsp]
0x2a6b:	add	rdi, rax
0x2a6e:	test	r15, r15
0x2a71:	mov	byte ptr [rax], cl
0x2a73:	je	0x2a78


0x2a78:	mov	rdx, r14
0x2a7b:	mov	rsi, rbp
0x2a7e:	call	0x1a80


0x2a75:	mov	qword ptr [r15], rdi
0x2a78:	mov	rdx, r14
0x2a7b:	mov	rsi, rbp
0x2a7e:	call	0x1a80


0x2a83:	mov	byte ptr [rax], 0
0x2a86:	add	rsp, 0x18
0x2a8a:	mov	rax, r13
0x2a8d:	pop	rbx
0x2a8e:	pop	rbp
0x2a8f:	pop	r12
0x2a91:	pop	r13
0x2a93:	pop	r14
0x2a95:	pop	r15
0x2a97:	ret	


0x48fd:	cmp	r14, rax
0x4900:	ja	0x49eb


0x4906:	xor	edi, edi
0x4908:	mov	rsi, r14
0x490b:	call	0x55f0


0x4910:	test	rax, rax
0x4913:	mov	rbp, rax
0x4916:	je	0x49fd


0x49fd:	mov	edx, 0xffffffff
0x4a02:	jmp	0x49d3


0x491c:	mov	rax, qword ptr [rsp]
0x4920:	lea	r12, [rip + 0x2b99]
0x4927:	mov	r13d, 0x3a2f8
0x492d:	add	rax, r14
0x4930:	add	rbx, rax
0x4933:	nop	dword ptr [rax + rax]
0x4938:	test	r14, r14
0x493b:	mov	r15, qword ptr [rsp + 0x10]
0x4940:	je	0x4967


0x4967:	mov	rsi, qword ptr [rsp + 0x18]
0x496c:	mov	rdi, qword ptr [rsp]
0x4970:	mov	rax, qword ptr [rsp + 0x20]
0x4975:	call	rax


0x4959:	movzx	eax, byte ptr [r12 + rax]
0x495e:	mov	byte ptr [r15 - 1], al
0x4962:	cmp	r15, rbx
0x4965:	jne	0x4948


0x4948:	mov	esi, 0x3d
0x494d:	mov	rdi, rbp
0x4950:	add	r15, 1
0x4954:	call	0x5640


0x405d:	mov	dword ptr [rbp], r12d
0x4061:	pop	rbx
0x4062:	pop	rbp
0x4063:	pop	r12
0x4065:	ret	


0x3f1e:	mov	dword ptr [rip + 0x206133], r12d
0x3f25:	mov	eax, dword ptr [rbp + 4]
0x3f28:	shl	r15, 4
0x3f2c:	sub	rsp, 8
0x3f30:	add	rbx, r15
0x3f33:	lea	r15, [rbp + 8]
0x3f37:	mov	r8d, dword ptr [rbp]
0x3f3b:	mov	r11, qword ptr [rbx]
0x3f3e:	mov	r12, qword ptr [rbx + 8]
0x3f42:	mov	rcx, r14
0x3f45:	or	eax, 1
0x3f48:	mov	dword ptr [rsp + 0x24], eax
0x3f4c:	push	qword ptr [rbp + 0x30]
0x3f4f:	mov	r9d, eax
0x3f52:	push	qword ptr [rbp + 0x28]
0x3f55:	push	r15
0x3f57:	mov	rsi, r11
0x3f5a:	mov	rdx, qword ptr [rsp + 0x28]
0x3f5f:	mov	rdi, r12
0x3f62:	mov	qword ptr [rsp + 0x30], r11
0x3f67:	call	0x2c40


0x5bf6:	add	rbx, rax
0x5bf9:	sub	rbp, rax
0x5bfc:	mov	edx, dword ptr [r13]
0x5c00:	jne	0x5bc8


0x5bc8:	mov	rax, qword ptr [r12]
0x5bcc:	mov	rdi, qword ptr [r12 + 0x10]
0x5bd1:	mov	eax, dword ptr [rax]
0x5bd3:	and	eax, 0x20
0x5bd6:	cmovne	eax, edx
0x5bd9:	mov	dword ptr [r13], eax
0x5bdd:	call	qword ptr [r12 + 8]


0x5968:	cmp	rbp, 0x7ff
0x596f:	jle	0x5a94


0x5a94:	test	rbp, rbp
0x5a97:	mov	r15, r14
0x5a9a:	mov	eax, 0x10
0x5a9f:	cmovs	rbp, r12
0x5aa3:	lea	r12, [rsp + 0x10]
0x5aa8:	sub	r15, rbp
0x5aab:	cmp	r15, 0x10
0x5aaf:	mov	rdi, r12
0x5ab2:	cmova	r15, rax
0x5ab6:	xor	esi, esi
0x5ab8:	call	0x1930


0x5975:	mov	rdi, r13
0x5978:	call	0x6010


0x597d:	jmp	0x58c7


0x5abd:	lea	rax, [r13 + rbp]
0x5ac2:	add	rbp, r15
0x5ac5:	mov	ecx, r15d
0x5ac8:	cmp	rbp, 0x7ff
0x5acf:	mov	rsi, r12
0x5ad2:	mov	rdi, rax
0x5ad5:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5ad7:	ja	0x5975


0x5ad5:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5add:	mov	r15, r14
0x5ae0:	mov	r8d, 4
0x5ae6:	sub	r15, rbp
0x5ae9:	mov	qword ptr [rsp + 8], r8
0x5aee:	cmp	r15, 4
0x5af2:	cmova	r15, r8
0x5af6:	lea	rdx, [rbp + r15]
0x5afb:	add	rbp, r13
0x5afe:	mov	qword ptr [rsp], rdx
0x5b02:	call	0x1840


0x6503:	mov	ebx, 0xffffffff
0x6508:	mov	dword ptr [rbp], r12d
0x650c:	jmp	0x63e0


0x5427:	mov	rdi, rbx
0x542a:	pop	rbx
0x542b:	jmp	0x1a00


0x5026:	mov	rax, qword ptr [rsp + 0x78]
0x502b:	xor	rax, qword ptr fs:[0x28]
0x5034:	jne	0x5040


0x5036:	add	rsp, 0xb8
0x503d:	pop	rbx
0x503e:	pop	rbp
0x503f:	ret	


0x5040:	call	0x18d0


0x4f50:	mov	rax, qword ptr [rsp + 0x58]
0x4f55:	xor	rax, qword ptr fs:[0x28]
0x4f5e:	jne	0x4f65


0x4f60:	add	rsp, 0x68
0x4f64:	ret	


0x4f65:	call	0x18d0


0x2458:	mov	rbx, qword ptr [rip + 0x207c29]
0x245f:	lea	rsi, [rip + 0x44a2]
0x2466:	mov	edx, 5
0x246b:	xor	edi, edi
0x246d:	call	0x1890


0x2472:	mov	rsi, rbx
0x2475:	mov	rdi, rax
0x2478:	call	0x1990


0x247d:	mov	rbx, qword ptr [rip + 0x207c04]
0x2484:	lea	rsi, [rip + 0x454d]
0x248b:	mov	edx, 5
0x2490:	xor	edi, edi
0x2492:	call	0x1890


0x2497:	mov	rsi, rbx
0x249a:	mov	rdi, rax
0x249d:	call	0x1990


0x24a2:	mov	rbx, qword ptr [rip + 0x207bdf]
0x24a9:	lea	rsi, [rip + 0x45c8]
0x24b0:	mov	edx, 5
0x24b5:	xor	edi, edi
0x24b7:	call	0x1890


0x24bc:	mov	rsi, rbx
0x24bf:	mov	rdi, rax
0x24c2:	call	0x1990


0x24c7:	mov	rbx, qword ptr [rip + 0x207bba]
0x24ce:	lea	rsi, [rip + 0x4713]
0x24d5:	mov	edx, 5
0x24da:	xor	edi, edi
0x24dc:	call	0x1890


0x24e1:	mov	rsi, rbx
0x24e4:	mov	rdi, rax
0x24e7:	call	0x1990


0x24ec:	mov	rbx, qword ptr [rip + 0x207b95]
0x24f3:	lea	rsi, [rip + 0x47d6]
0x24fa:	mov	edx, 5
0x24ff:	xor	edi, edi
0x2501:	call	0x1890


0x2506:	mov	rsi, rbx
0x2509:	mov	rdi, rax
0x250c:	call	0x1990


0x2511:	mov	rbx, qword ptr [rip + 0x207b70]
0x2518:	lea	rsi, [rip + 0x47e1]
0x251f:	mov	edx, 5
0x2524:	xor	edi, edi
0x2526:	call	0x1890


0x252b:	mov	rsi, rbx
0x252e:	mov	rdi, rax
0x2531:	lea	rbx, [rip + 0x40ec]
0x2538:	call	0x1990


0x253d:	lea	rax, [rip + 0x40e7]
0x2544:	lea	rcx, [rip + 0x4121]
0x254b:	mov	qword ptr [rsp + 0x60], 0
0x2554:	mov	qword ptr [rsp + 0x68], 0
0x255d:	mov	rdx, rsp
0x2560:	mov	qword ptr [rsp], rax
0x2564:	lea	rax, [rip + 0x40c2]
0x256b:	mov	qword ptr [rsp + 0x30], rcx
0x2570:	lea	rcx, [rip + 0x40ff]
0x2577:	mov	qword ptr [rsp + 8], rax
0x257c:	lea	rax, [rip + 0x4122]
0x2583:	mov	qword ptr [rsp + 0x40], rcx
0x2588:	lea	rcx, [rip + 0x40f1]
0x258f:	mov	qword ptr [rsp + 0x10], rax
0x2594:	lea	rax, [rip + 0x40a2]
0x259b:	mov	qword ptr [rsp + 0x50], rcx
0x25a0:	mov	qword ptr [rsp + 0x18], rax
0x25a5:	lea	rax, [rip + 0x40a7]
0x25ac:	mov	qword ptr [rsp + 0x20], rax
0x25b1:	lea	rax, [rip + 0x40a5]
0x25b8:	mov	qword ptr [rsp + 0x28], rax
0x25bd:	mov	qword ptr [rsp + 0x38], rax
0x25c2:	mov	qword ptr [rsp + 0x48], rax
0x25c7:	mov	qword ptr [rsp + 0x58], rax
0x25cc:	nop	dword ptr [rax]
0x25d0:	add	rdx, 0x10
0x25d4:	mov	rdi, qword ptr [rdx]
0x25d7:	test	rdi, rdi
0x25da:	je	0x25ef


0x25ef:	mov	r12, qword ptr [rdx + 8]
0x25f3:	xor	edi, edi
0x25f5:	mov	edx, 5
0x25fa:	lea	rsi, [rip + 0x4089]
0x2601:	test	r12, r12
0x2604:	je	0x26cb


0x25dc:	mov	ecx, 7
0x25e1:	mov	rsi, rbx
0x25e4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x26cb:	call	0x1890


0x260a:	call	0x1890


0x25e4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x25e6:	seta	al
0x25e9:	sbb	al, 0
0x25eb:	test	al, al
0x25ed:	jne	0x25d0


0x25d0:	add	rdx, 0x10
0x25d4:	mov	rdi, qword ptr [rdx]
0x25d7:	test	rdi, rdi
0x25da:	je	0x25ef


0x260f:	lea	rcx, [rip + 0x4722]
0x2616:	lea	rdx, [rip + 0x4084]
0x261d:	mov	rsi, rax
0x2620:	mov	edi, 1
0x2625:	xor	eax, eax
0x2627:	call	0x1a60


0x262c:	xor	esi, esi
0x262e:	mov	edi, 5
0x2633:	call	0x1a50


0x2638:	test	rax, rax
0x263b:	je	0x2659


0x2659:	lea	rsi, [rip + 0x4053]
0x2660:	xor	edi, edi
0x2662:	mov	edx, 5
0x2667:	call	0x1890


0x263d:	lea	rsi, [rip + 0x406b]
0x2644:	mov	edx, 3
0x2649:	mov	rdi, rax
0x264c:	call	0x17d0


0x17d0:	jmp	qword ptr [rip + 0x208632]




0x266c:	lea	rcx, [rip + 0x3fb1]
0x2673:	lea	rdx, [rip + 0x46be]
0x267a:	mov	rsi, rax
0x267d:	mov	edi, 1
0x2682:	xor	eax, eax
0x2684:	call	0x1a60


0x2689:	cmp	r12, rbx
0x268c:	lea	rcx, [rip + 0x3fb4]
0x2693:	lea	rbx, [rip + 0x4ebe]
0x269a:	cmove	rbx, rcx
0x269e:	lea	rsi, [rip + 0x4703]
0x26a5:	xor	edi, edi
0x26a7:	mov	edx, 5
0x26ac:	call	0x1890


0x26b1:	mov	rcx, rbx
0x26b4:	mov	rsi, rax
0x26b7:	mov	rdx, r12
0x26ba:	mov	edi, 1
0x26bf:	xor	eax, eax
0x26c1:	call	0x1a60


0x26c6:	jmp	0x23d6


0x26d0:	lea	rcx, [rip + 0x4661]
0x26d7:	lea	rdx, [rip + 0x3fc3]
0x26de:	mov	rsi, rax
0x26e1:	mov	edi, 1
0x26e6:	xor	eax, eax
0x26e8:	call	0x1a60


0x26ed:	xor	esi, esi
0x26ef:	mov	edi, 5
0x26f4:	call	0x1a50


0x26f9:	test	rax, rax
0x26fc:	je	0x2716


0x2716:	lea	rsi, [rip + 0x3f96]
0x271d:	mov	edx, 5
0x2722:	xor	edi, edi
0x2724:	lea	r12, [rip + 0x3ef9]
0x272b:	lea	rbx, [rip + 0x3f15]
0x2732:	call	0x1890


0x26fe:	lea	rsi, [rip + 0x3faa]
0x2705:	mov	edx, 3
0x270a:	mov	rdi, rax
0x270d:	call	0x17d0


0x2737:	lea	rcx, [rip + 0x3ee6]
0x273e:	lea	rdx, [rip + 0x45f3]
0x2745:	mov	rsi, rax
0x2748:	mov	edi, 1
0x274d:	xor	eax, eax
0x274f:	call	0x1a60


0x2754:	jmp	0x269e


0x269e:	lea	rsi, [rip + 0x4703]
0x26a5:	xor	edi, edi
0x26a7:	mov	edx, 5
0x26ac:	call	0x1890


0x1bc7:	lea	rdi, [rip + 0x772]
0x1bce:	call	0x6600


0x1bd3:	mov	byte ptr [rsp + 0x16], 0
0x1bd8:	mov	byte ptr [rsp + 0x17], 0
0x1bdd:	mov	qword ptr [rsp + 8], 0
0x1be6:	nop	word ptr cs:[rax + rax]
0x1bf0:	lea	rcx, [rip + 0x207e89]
0x1bf7:	lea	rdx, [rip + 0x4b14]
0x1bfe:	xor	r8d, r8d
0x1c01:	mov	rsi, rbx
0x1c04:	mov	edi, ebp
0x1c06:	call	0x18f0


0x18f0:	jmp	qword ptr [rip + 0x2085a2]




0x5b07:	mov	rdx, qword ptr [rsp]
0x5b0b:	mov	dword ptr [rsp + 0x10], eax
0x5b0f:	mov	ecx, r15d
0x5b12:	mov	rdi, rbp
0x5b15:	mov	rsi, r12
0x5b18:	mov	r8, qword ptr [rsp + 8]
0x5b1d:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5b1f:	cmp	rdx, 0x7ff
0x5b26:	jg	0x5975


0x5b1d:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5b2c:	sub	r14, rdx
0x5b2f:	cmp	r14, 4
0x5b33:	cmova	r14, r8
0x5b37:	call	0x1af0


0x1af0:	jmp	qword ptr [rip + 0x2084a2]




0x59dc:	mov	dword ptr [rbx + 0x30], eax
0x59df:	mov	dword ptr [rsp + 0x10], eax
0x59e3:	call	0x1af0


0x5394:	test	eax, eax
0x5396:	je	0x53d4


0x5398:	call	0x17b0


0x539d:	mov	r12d, dword ptr [rax]
0x53a0:	mov	rdi, rbx
0x53a3:	mov	rbp, rax
0x53a6:	call	0x1870


0x53ab:	test	r12d, r12d
0x53ae:	jne	0x53e0


0x53b0:	pop	rbx
0x53b1:	pop	rbp
0x53b2:	pop	r12
0x53b4:	ret	


0x53e0:	mov	dword ptr [rbp], r12d
0x53e4:	mov	eax, 0xffffffff
0x53e9:	jmp	0x53b0


0x62db:	xor	ebx, ebx
0x62dd:	mov	dword ptr [rbp], r12d
0x62e1:	jmp	0x6271


0x6296:	test	eax, eax
0x6298:	jne	0x62ad


0x629a:	mov	rsi, rbp
0x629d:	mov	edi, r12d
0x62a0:	call	0x1a40


0x62ad:	call	0x17b0


0x1a40:	jmp	qword ptr [rip + 0x2084fa]




0x62b2:	mov	ebp, dword ptr [rax]
0x62b4:	mov	rbx, rax
0x62b7:	mov	edi, r12d
0x62ba:	call	0x1960


0x62bf:	mov	dword ptr [rbx], ebp
0x62c1:	xor	ebx, ebx
0x62c3:	jmp	0x6271


0x27aa:	and	ebx, 0x20
0x27ad:	test	ebx, ebx
0x27af:	jne	0x27c8


0x27b1:	test	eax, eax
0x27b3:	je	0x27bf


0x27c8:	test	eax, eax
0x27ca:	jne	0x27e8


0x27bf:	pop	rbx
0x27c0:	pop	rbp
0x27c1:	pop	r12
0x27c3:	ret	


0x27b5:	test	r12, r12
0x27b8:	mov	eax, 0xffffffff
0x27bd:	je	0x27f8


0x27cc:	call	0x17b0


0x27e8:	pop	rbx
0x27e9:	mov	eax, 0xffffffff
0x27ee:	pop	rbp
0x27ef:	pop	r12
0x27f1:	ret	


0x27f8:	call	0x17b0


0x27fd:	cmp	dword ptr [rax], 9
0x2800:	pop	rbx
0x2801:	pop	rbp
0x2802:	pop	r12
0x2804:	setne	al
0x2807:	movzx	eax, al
0x280a:	neg	eax
0x280c:	ret	


0x27d1:	mov	dword ptr [rax], 0
0x27d7:	mov	eax, 0xffffffff
0x27dc:	pop	rbx
0x27dd:	pop	rbp
0x27de:	pop	r12
0x27e0:	ret	


0x2359:	test	eax, eax
0x235b:	jne	0x236d


0x235d:	add	rsp, 8
0x2361:	ret	


0x236d:	mov	edi, 1
0x2372:	call	0x17e0


0x17e0:	jmp	qword ptr [rip + 0x20862a]




0x2842:	test	eax, eax
0x2844:	je	0x285c


0x285c:	mov	rdi, qword ptr [rip + 0x20785d]
0x2863:	call	0x2790


0x2846:	call	0x17b0


0x284b:	cmp	byte ptr [rip + 0x20787e], 0
0x2852:	mov	rbx, rax
0x2855:	je	0x2873


0x2873:	lea	rsi, [rip + 0x3ed5]
0x287a:	xor	edi, edi
0x287c:	mov	edx, 5
0x2881:	call	0x1890


0x2857:	cmp	dword ptr [rax], 0x20
0x285a:	jne	0x2873


0x2886:	mov	rdi, qword ptr [rip + 0x20784b]
0x288d:	mov	rbp, rax
0x2890:	test	rdi, rdi
0x2893:	je	0x28bd


0x28bd:	mov	esi, dword ptr [rbx]
0x28bf:	lea	rdx, [rip + 0x4651]
0x28c6:	mov	rcx, rax
0x28c9:	xor	edi, edi
0x28cb:	xor	eax, eax
0x28cd:	call	0x1a90


0x2895:	call	0x45c0


0x28d2:	jmp	0x28b2


0x28b2:	mov	edi, dword ptr [rip + 0x207760]
0x28b8:	call	0x17e0


0x2868:	test	eax, eax
0x286a:	jne	0x28b2


0x286c:	add	rsp, 8
0x2870:	pop	rbx
0x2871:	pop	rbp
0x2872:	ret	


0x2377:	nop	word ptr [rax + rax]


0x62a5:	test	rax, rax
0x62a8:	mov	rbx, rax
0x62ab:	jne	0x6271


0x59e8:	mov	dword ptr [rsp + 0x10], eax
0x59ec:	mov	dword ptr [rbx + 0x34], eax
0x59ef:	mov	ebp, 0x800
0x59f4:	mov	eax, 4
0x59f9:	sub	rbp, r14
0x59fc:	cmp	rbp, 4
0x5a00:	cmova	rbp, rax
0x5a04:	call	0x18e0


0x18e0:	jmp	qword ptr [rip + 0x2085aa]




0x5b3c:	mov	rdx, qword ptr [rsp]
0x5b40:	mov	dword ptr [rsp + 0x10], eax
0x5b44:	mov	ecx, r14d
0x5b47:	mov	rsi, r12
0x5b4a:	lea	rax, [r13 + rdx]
0x5b4f:	add	r14, rdx
0x5b52:	cmp	r14, 0x7ff
0x5b59:	mov	rdi, rax
0x5b5c:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5b5e:	ja	0x5975


0x5b5c:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5b64:	jmp	0x59ef


0x59ef:	mov	ebp, 0x800
0x59f4:	mov	eax, 4
0x59f9:	sub	rbp, r14
0x59fc:	cmp	rbp, 4
0x5a00:	cmova	rbp, rax
0x5a04:	call	0x18e0


0x1c0b:	cmp	eax, -1
0x1c0e:	je	0x1d04


0x1d04:	movsxd	rax, dword ptr [rip + 0x208385]
0x1d0b:	sub	ebp, eax
0x1d0d:	cmp	ebp, 1
0x1d10:	ja	0x209c


0x1c14:	cmp	eax, 0x70
0x1c17:	je	0x1c68


0x1d16:	test	ebp, ebp
0x1d18:	jne	0x1ebf


0x209c:	lea	rsi, [rip + 0x4677]
0x20a3:	mov	edx, 5
0x20a8:	xor	edi, edi
0x20aa:	call	0x1890


0x1c68:	mov	rax, qword ptr [rip + 0x208429]
0x1c6f:	mov	r12d, 1
0x1c75:	mov	qword ptr [rsp + 8], rax
0x1c7a:	jmp	0x1bf0


0x1c19:	jle	0x1c40


0x1d1e:	test	r13, r13
0x1d21:	mov	r12d, 1
0x1d27:	lea	rsi, [rip + 0x49a0]
0x1d2e:	je	0x213b


0x1ebf:	test	r13, r13
0x1ec2:	mov	rsi, qword ptr [rbx + rax*8]
0x1ec6:	je	0x213b


0x1bf0:	lea	rcx, [rip + 0x207e89]
0x1bf7:	lea	rdx, [rip + 0x4b14]
0x1bfe:	xor	r8d, r8d
0x1c01:	mov	rsi, rbx
0x1c04:	mov	edi, ebp
0x1c06:	call	0x18f0


0x1c40:	cmp	eax, 0xffffff7e
0x1c45:	je	0x218c


0x1c1b:	cmp	eax, 0x74
0x1c1e:	je	0x1c98


0x213b:	mov	rdi, rsi
0x213e:	call	0x5310


0x1d34:	lea	rsi, [rip + 0x4993]
0x1d3b:	mov	qword ptr [rsp + 0x18], 0xe
0x1d44:	mov	r12d, 1
0x1d4a:	mov	qword ptr [rsp + 0x28], rsi
0x1d4f:	xor	eax, eax
0x1d51:	mov	rdi, r13
0x1d54:	or	rcx, 0xffffffffffffffff
0x1d58:	repne scasb	al, byte ptr [rdi]


0x1ecc:	or	rcx, 0xffffffffffffffff
0x1ed0:	xor	eax, eax
0x1ed2:	mov	rdi, rsi
0x1ed5:	repne scasb	al, byte ptr [rdi]


0x218c:	xor	edi, edi
0x218e:	call	0x2380


0x1c4b:	jle	0x1cbb


0x1c98:	mov	byte ptr [rsp + 0x16], 1
0x1c9d:	mov	r12d, 1
0x1ca3:	jmp	0x1bf0


0x1c20:	jle	0x1c80


0x1d58:	repne scasb	al, byte ptr [rdi]


0x1d5a:	mov	rax, qword ptr [rsp + 0x18]
0x1d5f:	mov	rdx, rcx
0x1d62:	not	rdx
0x1d65:	lea	rbp, [rdx - 1]
0x1d69:	mov	qword ptr [rsp + 0x20], rdx
0x1d6e:	lea	rdi, [rax + rbp + 1]
0x1d73:	call	0x50e0


0x1ed5:	repne scasb	al, byte ptr [rdi]


0x1ed7:	mov	rdx, rcx
0x1eda:	not	rdx
0x1edd:	mov	rcx, rdx
0x1ee0:	sub	rcx, 1
0x1ee4:	mov	qword ptr [rsp + 0x18], rcx
0x1ee9:	je	0x1ef6


0x1cbb:	cmp	eax, 0xffffff7d
0x1cc0:	jne	0x20bd


0x1c4d:	cmp	eax, 0x56
0x1c50:	je	0x1cc6


0x1c80:	cmp	eax, 0x71
0x1c83:	jne	0x20bd


0x1c22:	cmp	eax, 0x75
0x1c25:	je	0x1cb0


0x1ef6:	mov	rdi, rsi
0x1ef9:	call	0x47c0


0x1eeb:	cmp	byte ptr [rsi + rcx - 1], 0x58
0x1ef0:	je	0x1d4a


0x1cc6:	sub	rsp, 8
0x1cca:	mov	rdi, qword ptr [rip + 0x2083b7]
0x1cd1:	mov	rcx, qword ptr [rip + 0x208338]
0x1cd8:	push	0
0x1cda:	lea	r9, [rip + 0x4a19]
0x1ce1:	lea	r8, [rip + 0x4a1d]
0x1ce8:	lea	rdx, [rip + 0x49b2]
0x1cef:	lea	rsi, [rip + 0x492e]
0x1cf6:	xor	eax, eax
0x1cf8:	call	0x4f80


0x20bd:	mov	edi, 1
0x20c2:	call	0x2380


0x1c52:	cmp	eax, 0x64
0x1c55:	jne	0x20bd


0x1c89:	mov	byte ptr [rsp + 0x17], 1
0x1c8e:	jmp	0x1bf0


0x1cb0:	mov	r15d, 1
0x1cb6:	jmp	0x1bf0


0x1c2b:	add	eax, -0x80
0x1c2e:	jne	0x20bd


0x1d4a:	mov	qword ptr [rsp + 0x28], rsi
0x1d4f:	xor	eax, eax
0x1d51:	mov	rdi, r13
0x1d54:	or	rcx, 0xffffffffffffffff
0x1d58:	repne scasb	al, byte ptr [rdi]


0x1c5b:	mov	r14d, 1
0x1c61:	jmp	0x1bf0


0x1c34:	mov	r13, qword ptr [rip + 0x20845d]
0x1c3b:	jmp	0x1bf0


0x1cfd:	xor	edi, edi
0x1cff:	call	0x1b00


0x1d78:	mov	rdx, qword ptr [rsp + 0x18]
0x1d7d:	mov	rsi, qword ptr [rsp + 0x28]
0x1d82:	mov	rdi, rax
0x1d85:	mov	rbx, rax
0x1d88:	call	0x19c0


0x1d8d:	mov	rax, qword ptr [rsp + 0x18]
0x1d92:	mov	rcx, qword ptr [rsp + 0x20]
0x1d97:	mov	rsi, r13
0x1d9a:	lea	r8, [rbx + rax]
0x1d9e:	mov	rdx, rcx
0x1da1:	mov	rdi, r8
0x1da4:	call	0x19c0


0x1da9:	mov	r8, rax
0x1dac:	test	rbp, rbp
0x1daf:	je	0x1dcc


0x1dcc:	mov	rax, r8
0x1dcf:	sub	rax, rbx
0x1dd2:	je	0x21c5


0x1db1:	mov	rdi, r8
0x1db4:	mov	qword ptr [rsp + 0x18], r8
0x1db9:	call	0x28e0


0x21c5:	mov	rdi, rbx
0x21c8:	call	0x47c0


0x1dd8:	cmp	byte ptr [r8 - 1], 0x58
0x1ddd:	jne	0x21c5


0x1de3:	lea	rax, [rbx + rax - 2]
0x1de8:	lea	rdx, [rbx - 1]
0x1dec:	xor	r13d, r13d
0x1def:	jmp	0x1e02


0x1e02:	add	r13, 1
0x1e06:	cmp	rdx, rax
0x1e09:	jne	0x1df8


0x1e0b:	cmp	r13, 2
0x1e0f:	jbe	0x21c5


0x1df8:	sub	rax, 1
0x1dfc:	cmp	byte ptr [rax + 1], 0x58
0x1e00:	jne	0x1e0b


0x1e15:	test	r12b, r12b
0x1e18:	je	0x1e63


0x1e63:	mov	rdi, rbx
0x1e66:	call	0x5310


0x1e1a:	cmp	byte ptr [rsp + 0x16], 0
0x1e1f:	jne	0x20c7


0x1e25:	mov	rax, qword ptr [rsp + 8]
0x1e2a:	test	rax, rax
0x1e2d:	je	0x1f28


0x20c7:	lea	rdi, [rip + 0x467a]
0x20ce:	call	0x1780


0x1f28:	lea	rdi, [rip + 0x4819]
0x1f2f:	call	0x1780


0x1e33:	cmp	byte ptr [rax], 0
0x1e36:	mov	r12, rax
0x1e39:	je	0x1f28


0x1780:	jmp	qword ptr [rip + 0x20865a]


0x1e3f:	cmp	byte ptr [rbx], 0x2f
0x1e42:	je	0x2193




0x2193:	mov	rdi, rbx
0x2196:	call	0x47c0


0x1e48:	mov	rsi, rbx
0x1e4b:	mov	rdi, r12
0x1e4e:	xor	edx, edx
0x1e50:	call	0x2990


0x1e55:	mov	r12, rax
0x1e58:	mov	rdi, rbx
0x1e5b:	mov	rbx, r12
0x1e5e:	call	0x1790


0x1dbe:	mov	r8, qword ptr [rsp + 0x18]
0x1dc3:	cmp	rax, r8
0x1dc6:	jne	0x21f7


0x21f7:	mov	rdi, r8
0x21fa:	call	0x47c0


0x1e6b:	test	r14b, r14b
0x1e6e:	mov	r12, rax
0x1e71:	je	0x1f51


0x1f51:	test	r15b, r15b
0x1f54:	je	0x1f7d


0x1e77:	test	r15b, r15b
0x1e7a:	je	0x1fbd


0x1f7d:	xor	ecx, ecx
0x1f7f:	xor	edx, edx
0x1f81:	mov	r8, r13
0x1f84:	mov	esi, ebp
0x1f86:	mov	rdi, rax
0x1f89:	call	0x4a10


0x1f56:	xor	edx, edx
0x1f58:	mov	r8, r13
0x1f5b:	mov	ecx, 2
0x1f60:	mov	esi, ebp
0x1f62:	mov	rdi, rax
0x1f65:	call	0x4a10


0x1fbd:	xor	edx, edx
0x1fbf:	mov	r8, r13
0x1fc2:	mov	ecx, 1
0x1fc7:	mov	esi, ebp
0x1fc9:	mov	rdi, rax
0x1fcc:	call	0x4a10


0x1e80:	xor	edx, edx
0x1e82:	mov	esi, ebp
0x1e84:	mov	r8, r13
0x1e87:	mov	ecx, 2
0x1e8c:	mov	rdi, rax
0x1e8f:	call	0x4a10


0x1e94:	test	eax, eax
0x1e96:	mov	ebp, eax
0x1e98:	je	0x208f


0x208f:	mov	rdi, r12
0x2092:	call	0x1820


0x1e9e:	cmp	byte ptr [rsp + 0x17], 0
0x1ea3:	je	0x2053


0x1820:	jmp	qword ptr [rip + 0x20860a]


0x2053:	mov	rdi, rbx
0x2056:	call	0x47c0


0x1ea9:	mov	ebp, 1
0x1eae:	add	rsp, 0x38
0x1eb2:	mov	eax, ebp
0x1eb4:	pop	rbx
0x1eb5:	pop	rbp
0x1eb6:	pop	r12
0x1eb8:	pop	r13
0x1eba:	pop	r14
0x1ebc:	pop	r15
0x1ebe:	ret	




0x1fd1:	test	eax, eax
0x1fd3:	jne	0x1e9e


0x1fd9:	mov	rdi, r12
0x1fdc:	call	0x1820


0x1f6a:	test	eax, eax
0x1f6c:	js	0x1f96


0x1f96:	cmp	byte ptr [rsp + 0x17], 0
0x1f9b:	jne	0x1ea9


0x1f6e:	mov	rdi, r12
0x1f71:	xor	ebp, ebp
0x1f73:	call	0x1820


0x1fa1:	mov	rdi, rbx
0x1fa4:	call	0x47c0


0x1f8e:	test	eax, eax
0x1f90:	jns	0x2043


0x2043:	mov	edi, eax
0x2045:	call	0x1960


0x204a:	test	eax, eax
0x204c:	je	0x1fd9


0x204e:	jmp	0x1f96


0x2143:	mov	esi, 0x58
0x2148:	mov	rdi, rax
0x214b:	mov	rbx, rax
0x214e:	call	0x1910


0x2153:	test	rax, rax
0x2156:	lea	r8, [rax + 1]
0x215a:	je	0x2176


0x2176:	or	rcx, 0xffffffffffffffff
0x217a:	mov	rdi, rbx
0x217d:	repne scasb	al, byte ptr [rdi]


0x215c:	xor	eax, eax
0x215e:	or	rcx, 0xffffffffffffffff
0x2162:	mov	rdi, r8
0x2165:	repne scasb	al, byte ptr [rdi]


0x217d:	repne scasb	al, byte ptr [rdi]


0x217f:	mov	rax, rcx
0x2182:	not	rax
0x2185:	lea	r8, [rbx + rax - 1]
0x218a:	jmp	0x215c


0x2165:	repne scasb	al, byte ptr [rdi]


0x2167:	mov	rax, rcx
0x216a:	not	rax
0x216d:	lea	rbp, [rax - 1]
0x2171:	jmp	0x1dac


0x1dac:	test	rbp, rbp
0x1daf:	je	0x1dcc


0x20af:	xor	esi, esi
0x20b1:	mov	rdx, rax
0x20b4:	xor	edi, edi
0x20b6:	xor	eax, eax
0x20b8:	call	0x1a90


0x2712:	test	eax, eax
0x2714:	jne	0x2759


0x2759:	lea	r12, [rip + 0x3ec4]
0x2760:	mov	r13, qword ptr [rip + 0x207921]
0x2767:	lea	rsi, [rip + 0x45f2]
0x276e:	xor	edi, edi
0x2770:	mov	edx, 5
0x2775:	call	0x1890


0x277a:	mov	rsi, r13
0x277d:	mov	rdi, rax
0x2780:	call	0x1990


0x2785:	jmp	0x2659


0x2651:	test	eax, eax
0x2653:	jne	0x2760


0x2760:	mov	r13, qword ptr [rip + 0x207921]
0x2767:	lea	rsi, [rip + 0x45f2]
0x276e:	xor	edi, edi
0x2770:	mov	edx, 5
0x2775:	call	0x1890


0x1f78:	jmp	0x1eae


0x1eae:	add	rsp, 0x38
0x1eb2:	mov	eax, ebp
0x1eb4:	pop	rbx
0x1eb5:	pop	rbp
0x1eb6:	pop	r12
0x1eb8:	pop	r13
0x1eba:	pop	r14
0x1ebc:	pop	r15
0x1ebe:	ret	


0x1fe1:	mov	rdi, qword ptr [rip + 0x2080a0]
0x1fe8:	mov	byte ptr [rip + 0x2080da], 1
0x1fef:	call	0x2790


0x1ff4:	test	eax, eax
0x1ff6:	mov	ebp, eax
0x1ff8:	je	0x1eae


0x1ffe:	call	0x17b0


0x2003:	mov	rdi, r12
0x2006:	mov	ebx, dword ptr [rax]
0x2008:	call	0x17c0


0x17c0:	jmp	qword ptr [rip + 0x20863a]




0x2097:	jmp	0x1eae


0x1f34:	test	rax, rax
0x1f37:	mov	r12, rax
0x1f3a:	je	0x1f45


0x1f45:	lea	r12, [rip + 0x4791]
0x1f4c:	jmp	0x1e3f


0x1f3c:	cmp	byte ptr [rax], 0
0x1f3f:	jne	0x1e3f


0x20d3:	test	rax, rax
0x20d6:	mov	r12, rax
0x20d9:	je	0x20e0


0x20e0:	mov	rax, qword ptr [rsp + 8]
0x20e5:	lea	r12, [rip + 0x45f1]
0x20ec:	test	rax, rax
0x20ef:	je	0x20f8


0x20db:	cmp	byte ptr [rax], 0
0x20de:	jne	0x20f8


0x20f8:	mov	rdi, rbx
0x20fb:	call	0x28e0


0x20f1:	cmp	byte ptr [rax], 0
0x20f4:	cmovne	r12, rax
0x20f8:	mov	rdi, rbx
0x20fb:	call	0x28e0


0x2100:	cmp	rax, rbx
0x2103:	je	0x1e48


0x2109:	mov	rdi, rbx
0x210c:	call	0x47c0


0x5a09:	test	ebp, ebp
0x5a0b:	mov	dword ptr [rsp + 0x10], eax
0x5a0f:	lea	rcx, [r13 + r14]
0x5a14:	mov	esi, ebp
0x5a16:	je	0x5a2c


0x5a2c:	add	rbp, r14
0x5a2f:	cmp	rbp, 0x7ff
0x5a36:	ja	0x5975


0x5a18:	xor	eax, eax
0x5a1a:	mov	edx, eax
0x5a1c:	add	eax, 1
0x5a1f:	movzx	edi, byte ptr [r12 + rdx]
0x5a24:	cmp	eax, esi
0x5a26:	mov	byte ptr [rcx + rdx], dil
0x5a2a:	jb	0x5a1a


0x5a3c:	call	0x19e0


0x5a1a:	mov	edx, eax
0x5a1c:	add	eax, 1
0x5a1f:	movzx	edi, byte ptr [r12 + rdx]
0x5a24:	cmp	eax, esi
0x5a26:	mov	byte ptr [rcx + rdx], dil
0x5a2a:	jb	0x5a1a


0x19e0:	jmp	qword ptr [rip + 0x20852a]




0x5a41:	mov	dword ptr [rsp + 0x10], eax
0x5a45:	mov	eax, 0x800
0x5a4a:	mov	edx, 4
0x5a4f:	sub	rax, rbp
0x5a52:	lea	rcx, [r13 + rbp]
0x5a57:	cmp	rax, 4
0x5a5b:	cmova	rax, rdx
0x5a5f:	test	eax, eax
0x5a61:	mov	esi, eax
0x5a63:	je	0x5975


0x5a69:	xor	eax, eax
0x5a6b:	mov	edx, eax
0x5a6d:	add	eax, 1
0x5a70:	movzx	edi, byte ptr [r12 + rdx]
0x5a75:	cmp	eax, esi
0x5a77:	mov	byte ptr [rcx + rdx], dil
0x5a7b:	jb	0x5a6b


0x5a6b:	mov	edx, eax
0x5a6d:	add	eax, 1
0x5a70:	movzx	edi, byte ptr [r12 + rdx]
0x5a75:	cmp	eax, esi
0x5a77:	mov	byte ptr [rcx + rdx], dil
0x5a7b:	jb	0x5a6b


0x5a7d:	jmp	0x5975


0x200d:	cmp	byte ptr [rsp + 0x17], 0
0x2012:	jne	0x1ea9


0x2018:	lea	rsi, [rip + 0x4730]
0x201f:	mov	edx, 5
0x2024:	xor	edi, edi
0x2026:	mov	ebp, 1
0x202b:	call	0x1890


0x2030:	mov	esi, ebx
0x2032:	mov	rdx, rax
0x2035:	xor	edi, edi
0x2037:	xor	eax, eax
0x2039:	call	0x1a90


0x203e:	jmp	0x1eae


0x289a:	mov	esi, dword ptr [rbx]
0x289c:	lea	rdx, [rip + 0x4670]
0x28a3:	mov	rcx, rax
0x28a6:	mov	r8, rbp
0x28a9:	xor	edi, edi
0x28ab:	xor	eax, eax
0x28ad:	call	0x1a90


0x3f6c:	add	rsp, 0x20
0x3f70:	mov	r11, qword ptr [rsp + 0x10]
0x3f75:	cmp	r11, rax
0x3f78:	ja	0x3fe1


0x3f7a:	lea	rsi, [rax + 1]
0x3f7e:	lea	rax, [rip + 0x20617b]
0x3f85:	cmp	r12, rax
0x3f88:	mov	qword ptr [rbx], rsi
0x3f8b:	je	0x3f9f


0x3fe1:	mov	eax, dword ptr [rsp + 0x18]
0x3fe5:	mov	dword ptr [r13], eax
0x3fe9:	add	rsp, 0x28
0x3fed:	mov	rax, r12
0x3ff0:	pop	rbx
0x3ff1:	pop	rbp
0x3ff2:	pop	r12
0x3ff4:	pop	r13
0x3ff6:	pop	r14
0x3ff8:	pop	r15
0x3ffa:	ret	


0x3f9f:	mov	rdi, rsi
0x3fa2:	mov	qword ptr [rsp + 0x10], rsi
0x3fa7:	call	0x50e0


0x3f8d:	mov	rdi, r12
0x3f90:	mov	qword ptr [rsp + 0x10], rsi
0x3f95:	call	0x1790


0x3f9a:	mov	rsi, qword ptr [rsp + 0x10]
0x3f9f:	mov	rdi, rsi
0x3fa2:	mov	qword ptr [rsp + 0x10], rsi
0x3fa7:	call	0x50e0


0x3fac:	sub	rsp, 8
0x3fb0:	mov	qword ptr [rbx + 8], rax
0x3fb4:	mov	r8d, dword ptr [rbp]
0x3fb8:	push	qword ptr [rbp + 0x30]
0x3fbb:	push	qword ptr [rbp + 0x28]
0x3fbe:	mov	rcx, r14
0x3fc1:	push	r15
0x3fc3:	mov	r9d, dword ptr [rsp + 0x3c]
0x3fc8:	mov	rdi, rax
0x3fcb:	mov	rdx, qword ptr [rsp + 0x28]
0x3fd0:	mov	rsi, qword ptr [rsp + 0x30]
0x3fd5:	mov	r12, rax
0x3fd8:	call	0x2c40


0x46f2:	mov	rdi, qword ptr [rsp + 0x38]
0x46f7:	xor	rdi, qword ptr fs:[0x28]
0x4700:	jne	0x470c


0x4702:	add	rsp, 0x48
0x4706:	ret	


0x470c:	call	0x18d0


0x443f:	mov	rcx, qword ptr [rsp + 0x38]
0x4444:	xor	rcx, qword ptr fs:[0x28]
0x444d:	jne	0x4459


0x444f:	add	rsp, 0x48
0x4453:	ret	


0x4459:	call	0x18d0


0x44cb:	mov	rdx, qword ptr [rsp + 0x38]
0x44d0:	xor	rdx, qword ptr fs:[0x28]
0x44d9:	jne	0x44e5


0x44db:	add	rsp, 0x48
0x44df:	ret	


0x44e5:	call	0x18d0


0x465f:	mov	rcx, qword ptr [rsp + 0x38]
0x4664:	xor	rcx, qword ptr fs:[0x28]
0x466d:	jne	0x4679


0x466f:	add	rsp, 0x48
0x4673:	ret	


0x4679:	call	0x18d0


0x458e:	mov	rsi, qword ptr [rsp + 0x38]
0x4593:	xor	rsi, qword ptr fs:[0x28]
0x459c:	jne	0x45a3


0x459e:	add	rsp, 0x48
0x45a2:	ret	


0x45a3:	call	0x18d0


0x3fdd:	add	rsp, 0x20
0x3fe1:	mov	eax, dword ptr [rsp + 0x18]
0x3fe5:	mov	dword ptr [r13], eax
0x3fe9:	add	rsp, 0x28
0x3fed:	mov	rax, r12
0x3ff0:	pop	rbx
0x3ff1:	pop	rbp
0x3ff2:	pop	r12
0x3ff4:	pop	r13
0x3ff6:	pop	r14
0x3ff8:	pop	r15
0x3ffa:	ret	


0x422c:	lea	rsi, [rax + 1]
0x4230:	mov	qword ptr [rsp + 0x48], rax
0x4235:	add	rsp, 0x20
0x4239:	mov	rdi, rsi
0x423c:	mov	qword ptr [rsp + 0x18], rsi
0x4241:	call	0x50e0


0x4246:	mov	qword ptr [rsp + 0x10], rax
0x424b:	sub	rsp, 8
0x424f:	push	qword ptr [rbx + 0x30]
0x4252:	push	qword ptr [rbx + 0x28]
0x4255:	mov	r10, qword ptr [rsp + 0x38]
0x425a:	mov	r9d, ebp
0x425d:	mov	r8d, dword ptr [rbx]
0x4260:	mov	rcx, r15
0x4263:	mov	rdx, r14
0x4266:	mov	rdi, rax
0x4269:	push	r10
0x426b:	mov	rsi, qword ptr [rsp + 0x38]
0x4270:	call	0x2c40


0x4275:	mov	eax, dword ptr [rsp + 0x2c]
0x4279:	add	rsp, 0x20
0x427d:	test	r12, r12
0x4280:	mov	dword ptr [r13], eax
0x4284:	je	0x428f


0x428f:	mov	rax, qword ptr [rsp + 0x10]
0x4294:	add	rsp, 0x38
0x4298:	pop	rbx
0x4299:	pop	rbp
0x429a:	pop	r12
0x429c:	pop	r13
0x429e:	pop	r14
0x42a0:	pop	r15
0x42a2:	ret	


0x4286:	mov	r11, qword ptr [rsp + 0x28]
0x428b:	mov	qword ptr [r12], r11
0x428f:	mov	rax, qword ptr [rsp + 0x10]
0x4294:	add	rsp, 0x38
0x4298:	pop	rbx
0x4299:	pop	rbp
0x429a:	pop	r12
0x429c:	pop	r13
0x429e:	pop	r14
0x42a0:	pop	r15
0x42a2:	ret	


0x41a1:	mov	dword ptr [rbp], r12d
0x41a5:	add	rsp, 0x38
0x41a9:	pop	rbx
0x41aa:	pop	rbp
0x41ab:	pop	r12
0x41ad:	pop	r13
0x41af:	pop	r14
0x41b1:	pop	r15
0x41b3:	ret	


0x5be2:	mov	rcx, qword ptr [r12]
0x5be6:	mov	rdx, rbp
0x5be9:	mov	rdi, rbx
0x5bec:	mov	esi, 1
0x5bf1:	call	0x1850


0x4977:	test	eax, eax
0x4979:	mov	edx, eax
0x497b:	jns	0x49a9


0x497d:	mov	rax, qword ptr [rsp + 8]
0x4982:	mov	ecx, dword ptr [rax]
0x4984:	cmp	ecx, 0x11
0x4987:	jne	0x49e4


0x49a9:	mov	rcx, qword ptr [rsp + 8]
0x49ae:	mov	eax, dword ptr [rsp + 0x2c]
0x49b2:	mov	dword ptr [rcx], eax
0x49b4:	mov	ecx, eax
0x49b6:	mov	rdi, rbp
0x49b9:	mov	dword ptr [rsp + 0x10], edx
0x49bd:	mov	dword ptr [rsp], ecx
0x49c0:	call	0x5780


0x4989:	sub	r13d, 1
0x498d:	jne	0x4938


0x49e4:	mov	edx, 0xffffffff
0x49e9:	jmp	0x49b6


0x498f:	mov	rdi, rbp
0x4992:	call	0x5780


0x4938:	test	r14, r14
0x493b:	mov	r15, qword ptr [rsp + 0x10]
0x4940:	je	0x4967


0x49b6:	mov	rdi, rbp
0x49b9:	mov	dword ptr [rsp + 0x10], edx
0x49bd:	mov	dword ptr [rsp], ecx
0x49c0:	call	0x5780


0x49c5:	mov	rax, qword ptr [rsp + 8]
0x49ca:	mov	ecx, dword ptr [rsp]
0x49cd:	mov	edx, dword ptr [rsp + 0x10]
0x49d1:	mov	dword ptr [rax], ecx
0x49d3:	add	rsp, 0x38
0x49d7:	mov	eax, edx
0x49d9:	pop	rbx
0x49da:	pop	rbp
0x49db:	pop	r12
0x49dd:	pop	r13
0x49df:	pop	r14
0x49e1:	pop	r15
0x49e3:	ret	


0x4997:	mov	rax, qword ptr [rsp + 8]
0x499c:	mov	edx, 0xffffffff
0x49a1:	mov	dword ptr [rax], 0x11
0x49a7:	jmp	0x49d3


0x65cd:	add	rbx, 1
0x65d1:	cmp	rbp, rbx
0x65d4:	jne	0x65c0


0x65c0:	mov	rdx, r15
0x65c3:	mov	rsi, r14
0x65c6:	mov	edi, r13d
0x65c9:	call	qword ptr [r12 + rbx*8]


0x2111:	lea	rsi, [rip + 0x4d28]
0x2118:	mov	rbx, rax
0x211b:	mov	edx, 5
0x2120:	xor	edi, edi
0x2122:	call	0x1890


0x2127:	mov	rcx, rbx
0x212a:	mov	rdx, rax
0x212d:	xor	esi, esi
0x212f:	mov	edi, 1
0x2134:	xor	eax, eax
0x2136:	call	0x1a90


0x1fa9:	mov	edx, 5
0x1fae:	mov	rbp, rax
0x1fb1:	lea	rsi, [rip + 0x4f30]
0x1fb8:	jmp	0x206a


0x206a:	xor	edi, edi
0x206c:	call	0x1890


0x2071:	mov	rbx, rax
0x2074:	call	0x17b0


0x2079:	mov	esi, dword ptr [rax]
0x207b:	mov	rcx, rbp
0x207e:	mov	rdx, rbx
0x2081:	xor	edi, edi
0x2083:	xor	eax, eax
0x2085:	call	0x1a90


0x208a:	jmp	0x1ea9


0x205b:	lea	rsi, [rip + 0x4e56]
0x2062:	mov	rbp, rax
0x2065:	mov	edx, 5
0x206a:	xor	edi, edi
0x206c:	call	0x1890


0x21ff:	lea	rsi, [rip + 0x4c0a]
0x2206:	mov	rbx, rax
0x2209:	mov	edx, 5
0x220e:	xor	edi, edi
0x2210:	call	0x1890


0x2215:	mov	rcx, rbx
0x2218:	mov	rdx, rax
0x221b:	xor	esi, esi
0x221d:	mov	edi, 1
0x2222:	xor	eax, eax
0x2224:	call	0x1a90


0x2229:	nop	dword ptr [rax]


0x219b:	lea	rsi, [rip + 0x4cd6]
0x21a2:	mov	rbx, rax
0x21a5:	mov	edx, 5
0x21aa:	xor	edi, edi
0x21ac:	call	0x1890


0x21b1:	mov	rcx, rbx
0x21b4:	mov	rdx, rax
0x21b7:	xor	esi, esi
0x21b9:	mov	edi, 1
0x21be:	xor	eax, eax
0x21c0:	call	0x1a90


0x21cd:	lea	rsi, [rip + 0x4559]
0x21d4:	mov	rbx, rax
0x21d7:	mov	edx, 5
0x21dc:	xor	edi, edi
0x21de:	call	0x1890


0x21e3:	mov	rcx, rbx
0x21e6:	mov	rdx, rax
0x21e9:	xor	esi, esi
0x21eb:	mov	edi, 1
0x21f0:	xor	eax, eax
0x21f2:	call	0x1a90


0x1efe:	lea	rsi, [rip + 0x4edb]
0x1f05:	mov	rbx, rax
0x1f08:	mov	edx, 5
0x1f0d:	xor	edi, edi
0x1f0f:	call	0x1890


0x1f14:	mov	rcx, rbx
0x1f17:	mov	rdx, rax
0x1f1a:	xor	esi, esi
0x1f1c:	mov	edi, 1
0x1f21:	xor	eax, eax
0x1f23:	call	0x1a90


0x57f0:	mov	rbp, rax
0x57f3:	call	0x17b0


0x57f8:	cmp	dword ptr [rax], 0
0x57fb:	mov	rbx, rax
0x57fe:	mov	edx, 5
0x5803:	je	0x582d


0x582d:	lea	rsi, [rip + 0x203a]
0x5834:	xor	edi, edi
0x5836:	call	0x1890


0x5805:	lea	rsi, [rip + 0x2072]
0x580c:	xor	edi, edi
0x580e:	call	0x1890


0x5813:	mov	edi, dword ptr [rip + 0x2047ff]
0x5819:	mov	esi, dword ptr [rbx]
0x581b:	mov	rdx, rax
0x581e:	mov	rcx, rbp
0x5821:	xor	eax, eax
0x5823:	call	0x1a90


0x583b:	jmp	0x5813






0x4d00:	mov	r13, qword ptr [rbx + 0x10]
0x4d04:	mov	r12, qword ptr [rbx + 8]
0x4d08:	lea	rsi, [rip + 0x282e]
0x4d0f:	mov	rbx, qword ptr [rbx]
0x4d12:	mov	edx, 5
0x4d17:	xor	edi, edi
0x4d19:	call	0x1890


0x4e40:	mov	r9, qword ptr [rbx + 0x10]
0x4e44:	mov	r13, qword ptr [rbx + 0x30]
0x4e48:	lea	rsi, [rip + 0x2889]
0x4e4f:	mov	r12, qword ptr [rbx + 0x28]
0x4e53:	mov	r15, qword ptr [rbx + 0x20]
0x4e57:	mov	edx, 5
0x4e5c:	mov	r14, qword ptr [rbx + 0x18]
0x4e60:	mov	r8, qword ptr [rbx + 8]
0x4e64:	xor	edi, edi
0x4e66:	mov	qword ptr [rsp + 8], r9
0x4e6b:	mov	rbx, qword ptr [rbx]
0x4e6e:	mov	qword ptr [rsp], r8
0x4e72:	call	0x1890


0x4c20:	mov	r10, qword ptr [rbx + 0x40]
0x4c24:	mov	r9, qword ptr [rbx + 0x38]
0x4c28:	lea	rsi, [rip + 0x2b09]
0x4c2f:	mov	rax, qword ptr [rbx + 0x10]
0x4c33:	mov	r8, qword ptr [rbx + 8]
0x4c37:	mov	edx, 5
0x4c3c:	mov	r13, qword ptr [rbx + 0x30]
0x4c40:	mov	r12, qword ptr [rbx + 0x28]
0x4c44:	mov	r15, qword ptr [rbx + 0x20]
0x4c48:	mov	r14, qword ptr [rbx + 0x18]
0x4c4c:	mov	rbx, qword ptr [rbx]
0x4c4f:	mov	qword ptr [rsp + 0x18], r10
0x4c54:	mov	qword ptr [rsp + 0x10], r9
0x4c59:	mov	qword ptr [rsp], rax
0x4c5d:	mov	qword ptr [rsp + 8], r8
0x4c62:	xor	edi, edi
0x4c64:	call	0x1890


0x4be6:	add	rsp, 0x28
0x4bea:	pop	rbx
0x4beb:	pop	rbp
0x4bec:	pop	r12
0x4bee:	pop	r13
0x4bf0:	pop	r14
0x4bf2:	pop	r15
0x4bf4:	ret	


0x4dd8:	mov	r8, qword ptr [rbx + 8]
0x4ddc:	mov	r12, qword ptr [rbx + 0x28]
0x4de0:	lea	rsi, [rip + 0x28c9]
0x4de7:	mov	r15, qword ptr [rbx + 0x20]
0x4deb:	mov	r14, qword ptr [rbx + 0x18]
0x4def:	mov	edx, 5
0x4df4:	mov	r13, qword ptr [rbx + 0x10]
0x4df8:	xor	edi, edi
0x4dfa:	mov	rbx, qword ptr [rbx]
0x4dfd:	mov	qword ptr [rsp], r8
0x4e01:	call	0x1890


0x4da8:	mov	r15, qword ptr [rbx + 0x20]
0x4dac:	lea	rsi, [rip + 0x28d5]
0x4db3:	mov	edx, 5
0x4db8:	xor	edi, edi
0x4dba:	mov	r14, qword ptr [rbx + 0x18]
0x4dbe:	mov	r13, qword ptr [rbx + 0x10]
0x4dc2:	mov	r12, qword ptr [rbx + 8]
0x4dc6:	mov	rbx, qword ptr [rbx]
0x4dc9:	call	0x1890


0x4d50:	lea	rsi, [rip + 0x2911]
0x4d57:	mov	edx, 5
0x4d5c:	xor	edi, edi
0x4d5e:	mov	r14, qword ptr [rbx + 0x18]
0x4d62:	mov	r13, qword ptr [rbx + 0x10]
0x4d66:	mov	r12, qword ptr [rbx + 8]
0x4d6a:	mov	rbx, qword ptr [rbx]
0x4d6d:	call	0x1890


0x4b70:	mov	r9, qword ptr [rbx + 0x38]
0x4b74:	mov	rax, qword ptr [rbx + 0x10]
0x4b78:	lea	rsi, [rip + 0x2b89]
0x4b7f:	mov	r8, qword ptr [rbx + 8]
0x4b83:	mov	edx, 5
0x4b88:	xor	edi, edi
0x4b8a:	mov	r13, qword ptr [rbx + 0x30]
0x4b8e:	mov	r12, qword ptr [rbx + 0x28]
0x4b92:	mov	qword ptr [rsp + 0x10], r9
0x4b97:	mov	r15, qword ptr [rbx + 0x20]
0x4b9b:	mov	r14, qword ptr [rbx + 0x18]
0x4b9f:	mov	qword ptr [rsp], rax
0x4ba3:	mov	qword ptr [rsp + 8], r8
0x4ba8:	mov	rbx, qword ptr [rbx]
0x4bab:	call	0x1890


0x4c78:	mov	rbx, qword ptr [rbx]
0x4c7b:	lea	rsi, [rip + 0x2894]
0x4c82:	mov	edx, 5
0x4c87:	xor	edi, edi
0x4c89:	call	0x1890


0x4cb8:	mov	r12, qword ptr [rbx + 8]
0x4cbc:	lea	rsi, [rip + 0x2863]
0x4cc3:	mov	rbx, qword ptr [rbx]
0x4cc6:	mov	edx, 5
0x4ccb:	xor	edi, edi
0x4ccd:	call	0x1890


0x4cd2:	add	rsp, 0x28
0x4cd6:	mov	r8, r12
0x4cd9:	mov	rcx, rbx
0x4cdc:	mov	rdi, rbp
0x4cdf:	mov	rdx, rax
0x4ce2:	mov	esi, 1
0x4ce7:	pop	rbx
0x4ce8:	pop	rbp
0x4ce9:	pop	r12
0x4ceb:	pop	r13
0x4ced:	pop	r14
0x4cef:	pop	r15
0x4cf1:	xor	eax, eax
0x4cf3:	jmp	0x1b20


0x4c8e:	add	rsp, 0x28
0x4c92:	mov	rcx, rbx
0x4c95:	mov	rdi, rbp
0x4c98:	pop	rbx
0x4c99:	pop	rbp
0x4c9a:	pop	r12
0x4c9c:	pop	r13
0x4c9e:	pop	r14
0x4ca0:	pop	r15
0x4ca2:	mov	rdx, rax
0x4ca5:	mov	esi, 1
0x4caa:	xor	eax, eax
0x4cac:	jmp	0x1b20


0x4bb0:	sub	rsp, 8
0x4bb4:	mov	r9, qword ptr [rsp + 0x18]
0x4bb9:	mov	rdx, rax
0x4bbc:	mov	rcx, rbx
0x4bbf:	mov	esi, 1
0x4bc4:	mov	rdi, rbp
0x4bc7:	xor	eax, eax
0x4bc9:	push	r9
0x4bcb:	push	r13
0x4bcd:	push	r12
0x4bcf:	push	r15
0x4bd1:	push	r14
0x4bd3:	mov	r9, qword ptr [rsp + 0x30]
0x4bd8:	mov	r8, qword ptr [rsp + 0x38]
0x4bdd:	call	0x1b20


0x4d72:	sub	rsp, 8
0x4d76:	push	r14
0x4d78:	mov	rdx, rax
0x4d7b:	mov	r9, r13
0x4d7e:	mov	r8, r12
0x4d81:	mov	rcx, rbx
0x4d84:	mov	rdi, rbp
0x4d87:	mov	esi, 1
0x4d8c:	xor	eax, eax
0x4d8e:	call	0x1b20


0x4d93:	pop	rax
0x4d94:	pop	rdx
0x4d95:	add	rsp, 0x28
0x4d99:	pop	rbx
0x4d9a:	pop	rbp
0x4d9b:	pop	r12
0x4d9d:	pop	r13
0x4d9f:	pop	r14
0x4da1:	pop	r15
0x4da3:	ret	


0x4dce:	push	r15
0x4dd0:	jmp	0x4d76


0x4d76:	push	r14
0x4d78:	mov	rdx, rax
0x4d7b:	mov	r9, r13
0x4d7e:	mov	r8, r12
0x4d81:	mov	rcx, rbx
0x4d84:	mov	rdi, rbp
0x4d87:	mov	esi, 1
0x4d8c:	xor	eax, eax
0x4d8e:	call	0x1b20


0x4e06:	sub	rsp, 8
0x4e0a:	mov	r9, r13
0x4e0d:	push	r12
0x4e0f:	push	r15
0x4e11:	push	r14
0x4e13:	mov	r8, qword ptr [rsp + 0x20]
0x4e18:	mov	rcx, rbx
0x4e1b:	mov	rdx, rax
0x4e1e:	mov	rdi, rbp
0x4e21:	mov	esi, 1
0x4e26:	xor	eax, eax
0x4e28:	call	0x1b20


0x4e2d:	add	rsp, 0x20
0x4e31:	add	rsp, 0x28
0x4e35:	pop	rbx
0x4e36:	pop	rbp
0x4e37:	pop	r12
0x4e39:	pop	r13
0x4e3b:	pop	r14
0x4e3d:	pop	r15
0x4e3f:	ret	


0x4e77:	push	r13
0x4e79:	push	r12
0x4e7b:	push	r15
0x4e7d:	push	r14
0x4e7f:	mov	r9, qword ptr [rsp + 0x28]
0x4e84:	jmp	0x4e13


0x4e13:	mov	r8, qword ptr [rsp + 0x20]
0x4e18:	mov	rcx, rbx
0x4e1b:	mov	rdx, rax
0x4e1e:	mov	rdi, rbp
0x4e21:	mov	esi, 1
0x4e26:	xor	eax, eax
0x4e28:	call	0x1b20


0x4d1e:	add	rsp, 0x28
0x4d22:	mov	r9, r13
0x4d25:	mov	r8, r12
0x4d28:	mov	rcx, rbx
0x4d2b:	mov	rdi, rbp
0x4d2e:	mov	rdx, rax
0x4d31:	pop	rbx
0x4d32:	pop	rbp
0x4d33:	pop	r12
0x4d35:	pop	r13
0x4d37:	pop	r14
0x4d39:	pop	r15
0x4d3b:	mov	esi, 1
0x4d40:	xor	eax, eax
0x4d42:	jmp	0x1b20


0x37e0:	sub	rsp, 8
0x37e4:	mov	rcx, rbp
0x37e7:	mov	rsi, r13
0x37ea:	push	qword ptr [rsp + 0x68]
0x37ee:	push	qword ptr [rsp + 0x78]
0x37f2:	mov	rdi, r14
0x37f5:	push	0
0x37f7:	mov	r9d, dword ptr [rsp + 0x98]
0x37ff:	mov	r8d, dword ptr [rsp + 0x28]
0x3804:	mov	rdx, qword ptr [rsp + 0x30]
0x3809:	and	r9d, 0xfffffffd
0x380d:	call	0x2c40


0x3812:	add	rsp, 0x20
0x3816:	mov	r15, rax
0x3819:	mov	rbx, qword ptr [rsp + 0xa8]
0x3821:	xor	rbx, qword ptr fs:[0x28]
0x382a:	mov	rax, r15
0x382d:	jne	0x3e33


0x3833:	add	rsp, 0xb8
0x383a:	pop	rbx
0x383b:	pop	rbp
0x383c:	pop	r12
0x383e:	pop	r13
0x3840:	pop	r14
0x3842:	pop	r15
0x3844:	ret	


0x3e33:	call	0x18d0


0x3ddd:	sub	rsp, 8
0x3de1:	mov	r8d, 5
0x3de7:	mov	rcx, r11
0x3dea:	push	qword ptr [rsp + 0x68]
0x3dee:	push	qword ptr [rsp + 0x78]
0x3df2:	mov	rdi, r14
0x3df5:	push	qword ptr [rsp + 0x38]
0x3df9:	mov	r9d, dword ptr [rsp + 0x98]
0x3e01:	mov	rdx, qword ptr [rsp + 0x30]
0x3e06:	mov	rsi, qword ptr [rsp + 0x70]
0x3e0b:	call	0x2c40


0x3e10:	add	rsp, 0x20
0x3e14:	mov	r15, rax
0x3e17:	jmp	0x3819


0x3819:	mov	rbx, qword ptr [rsp + 0xa8]
0x3821:	xor	rbx, qword ptr fs:[0x28]
0x382a:	mov	rax, r15
0x382d:	jne	0x3e33


0x1770:	push	qword ptr [rip + 0x20865a]
0x1776:	jmp	qword ptr [rip + 0x20865c]


0x177c:	nop	dword ptr [rax]


0x1786:	push	0
0x178b:	jmp	0x1770


0x1796:	push	1
0x179b:	jmp	0x1770


0x17a6:	push	2
0x17ab:	jmp	0x1770


0x17b6:	push	3
0x17bb:	jmp	0x1770


0x17c6:	push	4
0x17cb:	jmp	0x1770


0x17d6:	push	5
0x17db:	jmp	0x1770


0x17e6:	push	6
0x17eb:	jmp	0x1770


0x17f6:	push	7
0x17fb:	jmp	0x1770


0x1806:	push	8
0x180b:	jmp	0x1770


0x1816:	push	9
0x181b:	jmp	0x1770


0x1826:	push	0xa
0x182b:	jmp	0x1770


0x1836:	push	0xb
0x183b:	jmp	0x1770


0x1846:	push	0xc
0x184b:	jmp	0x1770


0x1856:	push	0xd
0x185b:	jmp	0x1770


0x1866:	push	0xe
0x186b:	jmp	0x1770


0x1876:	push	0xf
0x187b:	jmp	0x1770


0x1886:	push	0x10
0x188b:	jmp	0x1770


0x1896:	push	0x11
0x189b:	jmp	0x1770


0x18a6:	push	0x12
0x18ab:	jmp	0x1770


0x18b6:	push	0x13
0x18bb:	jmp	0x1770


0x18c6:	push	0x14
0x18cb:	jmp	0x1770


0x18d6:	push	0x15
0x18db:	jmp	0x1770


0x18e6:	push	0x16
0x18eb:	jmp	0x1770


0x18f6:	push	0x17
0x18fb:	jmp	0x1770


0x1906:	push	0x18
0x190b:	jmp	0x1770


0x1916:	push	0x19
0x191b:	jmp	0x1770


0x1926:	push	0x1a
0x192b:	jmp	0x1770


0x1936:	push	0x1b
0x193b:	jmp	0x1770


0x1946:	push	0x1c
0x194b:	jmp	0x1770


0x1956:	push	0x1d
0x195b:	jmp	0x1770


0x1966:	push	0x1e
0x196b:	jmp	0x1770


0x1976:	push	0x1f
0x197b:	jmp	0x1770


0x1980:	jmp	qword ptr [rip + 0x20855a]




0x1986:	push	0x20
0x198b:	jmp	0x1770


0x1996:	push	0x21
0x199b:	jmp	0x1770


0x19a6:	push	0x22
0x19ab:	jmp	0x1770


0x19b6:	push	0x23
0x19bb:	jmp	0x1770


0x19c6:	push	0x24
0x19cb:	jmp	0x1770


0x19d6:	push	0x25
0x19db:	jmp	0x1770


0x19e6:	push	0x26
0x19eb:	jmp	0x1770


0x19f6:	push	0x27
0x19fb:	jmp	0x1770


0x1a06:	push	0x28
0x1a0b:	jmp	0x1770


0x1a16:	push	0x29
0x1a1b:	jmp	0x1770


0x1a26:	push	0x2a
0x1a2b:	jmp	0x1770


0x1a36:	push	0x2b
0x1a3b:	jmp	0x1770


0x1a46:	push	0x2c
0x1a4b:	jmp	0x1770


0x1a56:	push	0x2d
0x1a5b:	jmp	0x1770


0x1a66:	push	0x2e
0x1a6b:	jmp	0x1770


0x1a76:	push	0x2f
0x1a7b:	jmp	0x1770


0x1a86:	push	0x30
0x1a8b:	jmp	0x1770


0x1a96:	push	0x31
0x1a9b:	jmp	0x1770


0x1aa6:	push	0x32
0x1aab:	jmp	0x1770


0x1ab6:	push	0x33
0x1abb:	jmp	0x1770


0x1ac6:	push	0x34
0x1acb:	jmp	0x1770


0x1ad6:	push	0x35
0x1adb:	jmp	0x1770


0x1ae6:	push	0x36
0x1aeb:	jmp	0x1770


0x1af6:	push	0x37
0x1afb:	jmp	0x1770


0x1b06:	push	0x38
0x1b0b:	jmp	0x1770


0x1b16:	push	0x39
0x1b1b:	jmp	0x1770


0x1b26:	push	0x3a
0x1b2b:	jmp	0x1770


0x1b30:	jmp	qword ptr [rip + 0x208482]




0x1b36:	push	0x3b
0x1b3b:	jmp	0x1770


0x1b40:	jmp	qword ptr [rip + 0x20847a]




0x1b46:	push	0x3c
0x1b4b:	jmp	0x1770


0x1b50:	jmp	qword ptr [rip + 0x208472]




0x1b56:	push	0x3d
0x1b5b:	jmp	0x1770


0x225a:	hlt	


0x225b:	nop	dword ptr [rax + rax]


0x2292:	nop	dword ptr [rax]
0x2296:	nop	word ptr cs:[rax + rax]


0x22e2:	nop	dword ptr [rax]
0x22e6:	nop	word ptr cs:[rax + rax]


0x232a:	nop	word ptr [rax + rax]


0x233a:	nop	word ptr [rax + rax]


0x278a:	nop	word ptr [rax + rax]


0x280d:	nop	dword ptr [rax]


0x2818:	nop	dword ptr [rax + rax]


0x2828:	nop	dword ptr [rax + rax]


0x28d4:	nop	word ptr cs:[rax + rax]
0x28de:	nop	


0x293c:	nop	dword ptr [rax]


0x2987:	nop	word ptr [rax + rax]


0x29a8:	nop	dword ptr [rax + rax]


0x2aaf:	nop	


0x2b4f:	nop	


0x2c37:	nop	word ptr [rax + rax]


0x2cd3:	mov	byte ptr [rsp + 0xe], 1
0x2cd8:	mov	byte ptr [rsp + 0x7c], 0
0x2cdd:	xor	r12d, r12d
0x2ce0:	mov	qword ptr [rsp + 0x50], 0
0x2ce9:	mov	byte ptr [rsp + 0xf], 1
0x2cee:	mov	byte ptr [rsp + 0xd], 0
0x2cf3:	lea	rax, [rip + 0x427b]
0x2cfa:	mov	qword ptr [rsp + 0x18], 1
0x2d03:	xor	r15d, r15d
0x2d06:	mov	dword ptr [rsp + 8], 2
0x2d0e:	mov	qword ptr [rsp + 0x48], rax
0x2d13:	xor	r11d, r11d
0x2d16:	mov	rax, rbp
0x2d19:	mov	r8d, r12d
0x2d1c:	mov	rbp, r11
0x2d1f:	mov	r11, rax
0x2d22:	nop	word ptr [rax + rax]
0x2d28:	cmp	r11, rbp
0x2d2b:	setne	r12b
0x2d2f:	cmp	r11, -1
0x2d33:	jne	0x2d42


0x2d35:	mov	rax, qword ptr [rsp + 0x10]
0x2d3a:	cmp	byte ptr [rax + rbp], 0
0x2d3e:	setne	r12b
0x2d42:	test	r12b, r12b
0x2d45:	je	0x33a0


0x2d42:	test	r12b, r12b
0x2d45:	je	0x33a0


0x33a0:	cmp	dword ptr [rsp + 8], 2
0x33a5:	movzx	ebx, byte ptr [rsp + 0xf]
0x33aa:	mov	r12d, r8d
0x33ad:	mov	rbp, r11
0x33b0:	sete	dl
0x33b3:	mov	eax, ebx
0x33b5:	test	r15, r15
0x33b8:	sete	cl
0x33bb:	and	eax, edx
0x33bd:	and	al, cl
0x33bf:	jne	0x3e26


0x2d4b:	cmp	dword ptr [rsp + 8], 2
0x2d50:	mov	rdi, qword ptr [rsp + 0x10]
0x2d55:	lea	r9, [rdi + rbp]
0x2d59:	setne	al
0x2d5c:	and	al, byte ptr [rsp + 0xd]
0x2d60:	mov	r10d, eax
0x2d63:	je	0x2e10


0x33c5:	mov	eax, ebx
0x33c7:	xor	eax, 1
0x33ca:	and	dl, al
0x33cc:	je	0x3d3c


0x3e26:	mov	dword ptr [rsp + 8], 2
0x3e2e:	jmp	0x37c9


0x2e10:	movzx	ebx, byte ptr [r9]
0x2e14:	cmp	bl, 0x7e
0x2e17:	ja	0x3138


0x2d69:	mov	rax, qword ptr [rsp + 0x18]
0x2d6e:	test	rax, rax
0x2d71:	je	0x31a0


0x3d3c:	mov	rbx, qword ptr [rsp + 0x48]
0x3d41:	test	rbx, rbx
0x3d44:	je	0x3d72


0x33d2:	cmp	byte ptr [rsp + 0x7c], 0
0x33d7:	je	0x3d3a


0x37c9:	cmp	byte ptr [rsp + 0xd], 0
0x37ce:	je	0x37e0


0x2e1d:	lea	rcx, [rip + 0x41e8]
0x2e24:	movzx	edx, bl
0x2e27:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2e2b:	add	rax, rcx
0x2e2e:	jmp	rax


0x3138:	cmp	qword ptr [rsp + 0x58], 1
0x313e:	jne	0x34e8


0x31a0:	movzx	ebx, byte ptr [r9]
0x31a4:	cmp	bl, 0x7e
0x31a7:	ja	0x3130


0x2d77:	cmp	r11, -1
0x2d7b:	lea	rbx, [rbp + rax]
0x2d80:	jne	0x2db0


0x3d72:	cmp	r13, r15
0x3d75:	jbe	0x3819


0x3d46:	test	al, al
0x3d48:	je	0x3d72


0x3d3a:	mov	eax, edx
0x3d3c:	mov	rbx, qword ptr [rsp + 0x48]
0x3d41:	test	rbx, rbx
0x3d44:	je	0x3d72


0x33dd:	cmp	byte ptr [rsp + 0xe], 0
0x33e2:	jne	0x3ddd


0x37d0:	test	al, al
0x37d2:	mov	eax, 4
0x37d7:	cmove	eax, dword ptr [rsp + 8]
0x37dc:	mov	dword ptr [rsp + 8], eax


0x3144:	mov	qword ptr [rsp + 0x38], r11
0x3149:	mov	byte ptr [rsp + 0x30], r8b
0x314e:	mov	byte ptr [rsp + 0x28], r10b
0x3153:	call	0x1b50


0x34e8:	lea	rax, [rsp + 0xa0]
0x34f0:	cmp	r11, -1
0x34f4:	mov	qword ptr [rsp + 0xa0], 0
0x3500:	mov	qword ptr [rsp + 0x28], rax
0x3505:	jne	0x3534


0x31a9:	lea	rcx, [rip + 0x4058]
0x31b0:	movzx	edx, bl
0x31b3:	movsxd	rax, dword ptr [rcx + rdx*4]
0x31b7:	add	rax, rcx
0x31ba:	jmp	rax


0x3130:	xor	r10d, r10d
0x3133:	nop	dword ptr [rax + rax]
0x3138:	cmp	qword ptr [rsp + 0x58], 1
0x313e:	jne	0x34e8


0x2d82:	cmp	rax, 1
0x2d86:	jbe	0x2db0


0x2db0:	cmp	rbx, r11
0x2db3:	mov	byte ptr [rsp + 0x28], r10b
0x2db8:	ja	0x3370


0x3d7b:	mov	byte ptr [r14 + r15], 0
0x3d80:	jmp	0x3819


0x3d4a:	movzx	ecx, byte ptr [rbx]
0x3d4d:	mov	rax, rbx
0x3d50:	test	cl, cl
0x3d52:	je	0x3d72


0x33e8:	test	r13, r13
0x33eb:	sete	al
0x33ee:	cmp	qword ptr [rsp + 0x50], 0
0x33f4:	setne	dl
0x33f7:	and	al, dl
0x33f9:	je	0x3e1c


0x3507:	mov	rdi, qword ptr [rsp + 0x10]
0x350c:	mov	byte ptr [rsp + 0x40], r8b
0x3511:	mov	byte ptr [rsp + 0x38], r10b
0x3516:	mov	qword ptr [rsp + 0x30], r9
0x351b:	call	0x18b0


0x3534:	lea	rax, [rsp + 0x9c]
0x353c:	xor	ecx, ecx
0x353e:	mov	byte ptr [rsp + 0x7e], bl
0x3542:	mov	byte ptr [rsp + 0x7d], r8b
0x3547:	mov	rbx, rcx
0x354a:	mov	qword ptr [rsp + 0x88], r9
0x3552:	mov	qword ptr [rsp + 0x38], rax
0x3557:	mov	byte ptr [rsp + 0x7f], r10b
0x355c:	mov	qword ptr [rsp + 0x80], r15
0x3564:	mov	qword ptr [rsp + 0x40], r14
0x3569:	mov	qword ptr [rsp + 0x70], r13
0x356e:	mov	qword ptr [rsp + 0x30], r11
0x3573:	mov	rax, qword ptr [rsp + 0x10]
0x3578:	lea	r14, [rbp + rbx]
0x357d:	mov	rdx, qword ptr [rsp + 0x30]
0x3582:	mov	rcx, qword ptr [rsp + 0x28]
0x3587:	mov	rdi, qword ptr [rsp + 0x38]
0x358c:	lea	r13, [rax + r14]
0x3590:	sub	rdx, r14
0x3593:	mov	rsi, r13
0x3596:	call	0x5490


0x2d88:	mov	byte ptr [rsp + 0x38], r8b
0x2d8d:	mov	byte ptr [rsp + 0x30], r10b
0x2d92:	mov	qword ptr [rsp + 0x28], r9
0x2d97:	call	0x18b0


0x2dbe:	mov	rdx, qword ptr [rsp + 0x18]
0x2dc3:	mov	rsi, qword ptr [rsp + 0x48]
0x2dc8:	mov	rdi, r9
0x2dcb:	mov	qword ptr [rsp + 0x40], r11
0x2dd0:	mov	byte ptr [rsp + 0x38], r8b
0x2dd5:	mov	qword ptr [rsp + 0x30], r9
0x2dda:	call	0x1980


0x3370:	xor	r10d, r10d
0x3373:	jmp	0x2e10


0x3d54:	mov	rdx, r15
0x3d57:	sub	rax, r15
0x3d5a:	cmp	r13, rdx
0x3d5d:	jbe	0x3d63


0x3e1c:	movzx	eax, byte ptr [rsp + 0x7c]
0x3e21:	jmp	0x3d3c


0x33ff:	mov	r13, qword ptr [rsp + 0x50]
0x3404:	lea	rbx, [rip + 0x3b6a]
0x340b:	mov	byte ptr [r14], 0x27
0x340f:	mov	dword ptr [rsp + 8], 2
0x3417:	mov	r15d, 1
0x341d:	mov	qword ptr [rsp + 0x18], 1
0x3426:	mov	byte ptr [rsp + 0xf], 0
0x342b:	mov	qword ptr [rsp + 0x48], rbx
0x3430:	mov	byte ptr [rsp + 0x7c], al
0x3434:	jmp	0x2d13


0x3d63:	add	rdx, 1
0x3d67:	movzx	ecx, byte ptr [rax + rdx]
0x3d6b:	test	cl, cl
0x3d6d:	jne	0x3d5a


0x3d5f:	mov	byte ptr [r14 + rdx], cl
0x3d63:	add	rdx, 1
0x3d67:	movzx	ecx, byte ptr [rax + rdx]
0x3d6b:	test	cl, cl
0x3d6d:	jne	0x3d5a


0x2d13:	xor	r11d, r11d
0x2d16:	mov	rax, rbp
0x2d19:	mov	r8d, r12d
0x2d1c:	mov	rbp, r11
0x2d1f:	mov	r11, rax
0x2d22:	nop	word ptr [rax + rax]
0x2d28:	cmp	r11, rbp
0x2d2b:	setne	r12b
0x2d2f:	cmp	r11, -1
0x2d33:	jne	0x2d42


0x3d6f:	mov	r15, rdx
0x3d72:	cmp	r13, r15
0x3d75:	jbe	0x3819


0x3d5a:	cmp	r13, rdx
0x3d5d:	jbe	0x3d63


0x2ddf:	test	eax, eax
0x2de1:	mov	r9, qword ptr [rsp + 0x30]
0x2de6:	movzx	r8d, byte ptr [rsp + 0x38]
0x2dec:	mov	r11, qword ptr [rsp + 0x40]
0x2df1:	jne	0x3370


0x2df7:	cmp	byte ptr [rsp + 0xf], 0
0x2dfc:	movzx	r10d, byte ptr [rsp + 0x28]
0x2e02:	jne	0x3d85


0x3d85:	cmp	dword ptr [rsp + 8], 2
0x3d8a:	movzx	ebx, byte ptr [rsp + 0xf]
0x3d8f:	mov	rbp, r11
0x3d92:	sete	al
0x3d95:	mov	byte ptr [rsp + 0xd], bl
0x3d99:	jmp	0x37c9


0x359b:	test	rax, rax
0x359e:	mov	r15, rax
0x35a1:	je	0x35f1


0x35f1:	mov	edx, r12d
0x35f4:	mov	rdi, rbx
0x35f7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x35fd:	xor	edx, 1
0x3600:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3605:	movzx	r10d, byte ptr [rsp + 0x7f]
0x360b:	and	dl, byte ptr [rsp + 0xd]
0x360f:	mov	r15, qword ptr [rsp + 0x80]
0x3617:	mov	r14, qword ptr [rsp + 0x40]
0x361c:	mov	r13, qword ptr [rsp + 0x70]
0x3621:	mov	r11, qword ptr [rsp + 0x30]
0x3626:	cmp	rdi, 1
0x362a:	jbe	0x3c2b


0x35a3:	cmp	rax, -1
0x35a7:	je	0x3bc5


0x3c2b:	mov	eax, edx
0x3c2d:	jmp	0x3187


0x3630:	mov	rcx, rdi
0x3633:	xor	esi, esi
0x3635:	movzx	r9d, byte ptr [rsp + 0xf]
0x363b:	add	rcx, rbp
0x363e:	mov	rdi, qword ptr [rsp + 0x10]
0x3643:	jmp	0x36fe


0x3bc5:	mov	rdi, rbx
0x3bc8:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3bce:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3bd3:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3bd9:	mov	r15, qword ptr [rsp + 0x80]
0x3be1:	xor	r12d, r12d
0x3be4:	mov	r14, qword ptr [rsp + 0x40]
0x3be9:	mov	r13, qword ptr [rsp + 0x70]
0x3bee:	mov	r11, qword ptr [rsp + 0x30]
0x3bf3:	movzx	edx, byte ptr [rsp + 0xd]
0x3bf8:	jmp	0x3626


0x35ad:	cmp	rax, -2
0x35b1:	je	0x3b51


0x3187:	test	al, al
0x3189:	jne	0x3b21


0x36fe:	test	dl, dl
0x3700:	jne	0x3650


0x3626:	cmp	rdi, 1
0x362a:	jbe	0x3c2b


0x3b51:	mov	r11, qword ptr [rsp + 0x30]
0x3b56:	mov	rsi, r14
0x3b59:	mov	rcx, r13
0x3b5c:	mov	rax, rbx
0x3b5f:	mov	rdi, rbx
0x3b62:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3b68:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3b6d:	mov	r9, qword ptr [rsp + 0x88]
0x3b75:	cmp	rsi, r11
0x3b78:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3b7e:	mov	r15, qword ptr [rsp + 0x80]
0x3b86:	mov	r14, qword ptr [rsp + 0x40]
0x3b8b:	mov	r13, qword ptr [rsp + 0x70]
0x3b90:	jae	0x3bb8


0x35b7:	cmp	dword ptr [rsp + 8], 2
0x35bc:	sete	al
0x35bf:	and	al, byte ptr [rsp + 0xf]
0x35c3:	jne	0x3760


0x318f:	cmp	dword ptr [rsp + 8], 2
0x3194:	sete	dl
0x3197:	jmp	0x2e68


0x3b21:	movzx	edx, byte ptr [rsp + 0xd]
0x3b26:	xor	r12d, r12d
0x3b29:	jmp	0x3630


0x3706:	mov	eax, esi
0x3708:	xor	eax, 1
0x370b:	and	eax, r8d
0x370e:	test	r10b, r10b
0x3711:	je	0x3721


0x3650:	cmp	dword ptr [rsp + 8], 2
0x3655:	sete	al
0x3658:	test	r9b, r9b
0x365b:	jne	0x3b10


0x3b92:	cmp	byte ptr [rcx], 0
0x3b95:	jne	0x3ba7


0x3bb8:	movzx	edx, byte ptr [rsp + 0xd]
0x3bbd:	xor	r12d, r12d
0x3bc0:	jmp	0x3626


0x35c9:	mov	edi, dword ptr [rsp + 0x9c]
0x35d0:	call	0x1b40


0x3760:	cmp	r15, 1
0x3764:	je	0x35c9


0x2e68:	cmp	byte ptr [rsp + 0xd], 1
0x2e6d:	jne	0x2f82


0x3721:	add	rbp, 1
0x3725:	cmp	rbp, rcx
0x3728:	jae	0x2eac


0x3713:	cmp	r13, r15
0x3716:	jbe	0x371d


0x3661:	mov	esi, r8d
0x3664:	xor	esi, 1
0x3667:	and	al, sil
0x366a:	je	0x369b


0x3b10:	movzx	ebx, byte ptr [rsp + 0xf]
0x3b15:	mov	rbp, r11
0x3b18:	mov	byte ptr [rsp + 0xd], bl
0x3b1c:	jmp	0x37c9


0x3b97:	jmp	0x3bb8


0x3ba7:	add	rax, 1
0x3bab:	lea	rdx, [rbp + rax]
0x3bb0:	cmp	r11, rdx
0x3bb3:	ja	0x3ba0


0x376a:	mov	rdi, qword ptr [rsp + 0x10]
0x376f:	lea	rcx, [rdi + r15]
0x3773:	lea	rdx, [rdi + r14 + 1]
0x3778:	lea	r8, [rcx + r14]
0x377c:	jmp	0x378d


0x2e73:	test	dl, dl
0x2e75:	jne	0x2f82


0x2f82:	cmp	byte ptr [rsp + 0xf], 0
0x2f87:	jne	0x2e7b


0x372e:	test	al, al
0x3730:	je	0x3b2e


0x2eac:	test	al, al
0x2eae:	je	0x2ed0


0x371d:	add	r15, 1
0x3721:	add	rbp, 1
0x3725:	cmp	rbp, rcx
0x3728:	jae	0x2eac


0x3718:	mov	byte ptr [r14 + r15], 0x5c
0x371d:	add	r15, 1
0x3721:	add	rbp, 1
0x3725:	cmp	rbp, rcx
0x3728:	jae	0x2eac


0x369b:	cmp	r13, r15
0x369e:	jbe	0x36a5


0x366c:	cmp	r13, r15
0x366f:	jbe	0x3676


0x3bb5:	mov	rdi, rax
0x3bb8:	movzx	edx, byte ptr [rsp + 0xd]
0x3bbd:	xor	r12d, r12d
0x3bc0:	jmp	0x3626


0x3ba0:	cmp	byte ptr [r9 + rax], 0
0x3ba5:	je	0x3bb5


0x378d:	movzx	ecx, byte ptr [rdx]
0x3790:	sub	ecx, 0x5b
0x3793:	cmp	cl, 0x21
0x3796:	ja	0x3780


0x2e7b:	mov	rsi, qword ptr [rsp + 0x20]
0x2e80:	test	rsi, rsi
0x2e83:	je	0x2e99


0x2f8d:	jmp	0x2e99


0x3b2e:	xor	r10d, r10d
0x3b31:	jmp	0x36ed


0x3736:	cmp	r13, r15
0x3739:	jbe	0x3740


0x2ed0:	cmp	r15, r13
0x2ed3:	jae	0x2ed9


0x2eb0:	cmp	r13, r15
0x2eb3:	jbe	0x2eba


0x36a5:	lea	rax, [r15 + 1]
0x36a9:	cmp	r13, rax
0x36ac:	jbe	0x36bb


0x36a0:	mov	byte ptr [r14 + r15], 0x5c
0x36a5:	lea	rax, [r15 + 1]
0x36a9:	cmp	r13, rax
0x36ac:	jbe	0x36bb


0x3676:	lea	rsi, [r15 + 1]
0x367a:	cmp	r13, rsi
0x367d:	jbe	0x3685


0x3671:	mov	byte ptr [r14 + r15], 0x27
0x3676:	lea	rsi, [r15 + 1]
0x367a:	cmp	r13, rsi
0x367d:	jbe	0x3685


0x3798:	mov	esi, 1
0x379d:	shl	rsi, cl
0x37a0:	mov	rcx, rsi
0x37a3:	movabs	rsi, 0x20000002b
0x37ad:	test	rcx, rsi
0x37b0:	je	0x3780


0x3780:	add	rdx, 1
0x3784:	cmp	r8, rdx
0x3787:	je	0x35c9


0x2e99:	test	r10b, r10b
0x2e9c:	jne	0x2fe3


0x2e85:	mov	edx, ebx
0x2e87:	shr	dl, 5
0x2e8a:	movzx	edx, dl
0x2e8d:	mov	edx, dword ptr [rsi + rdx*4]
0x2e90:	bt	edx, ebx
0x2e93:	jb	0x2fe3


0x36ed:	cmp	r13, r15
0x36f0:	jbe	0x36f6


0x3740:	lea	rax, [r15 + 1]
0x3744:	cmp	r13, rax
0x3747:	jbe	0x374f


0x373b:	mov	byte ptr [r14 + r15], 0x27
0x3740:	lea	rax, [r15 + 1]
0x3744:	cmp	r13, rax
0x3747:	jbe	0x374f


0x2ed5:	mov	byte ptr [r14 + r15], bl
0x2ed9:	movzx	edi, byte ptr [rsp + 0xe]
0x2ede:	add	r15, 1
0x2ee2:	mov	eax, 0
0x2ee7:	test	r12b, r12b
0x2eea:	cmove	edi, eax
0x2eed:	mov	byte ptr [rsp + 0xe], dil
0x2ef2:	jmp	0x2d28


0x2ed9:	movzx	edi, byte ptr [rsp + 0xe]
0x2ede:	add	r15, 1
0x2ee2:	mov	eax, 0
0x2ee7:	test	r12b, r12b
0x2eea:	cmove	edi, eax
0x2eed:	mov	byte ptr [rsp + 0xe], dil
0x2ef2:	jmp	0x2d28


0x2eba:	lea	rax, [r15 + 1]
0x2ebe:	cmp	r13, rax
0x2ec1:	jbe	0x2ec9


0x2eb5:	mov	byte ptr [r14 + r15], 0x27
0x2eba:	lea	rax, [r15 + 1]
0x2ebe:	cmp	r13, rax
0x2ec1:	jbe	0x2ec9


0x36bb:	lea	rax, [r15 + 2]
0x36bf:	cmp	r13, rax
0x36c2:	jbe	0x36d4


0x36ae:	mov	eax, ebx
0x36b0:	shr	al, 6
0x36b3:	add	eax, 0x30
0x36b6:	mov	byte ptr [r14 + r15 + 1], al
0x36bb:	lea	rax, [r15 + 2]
0x36bf:	cmp	r13, rax
0x36c2:	jbe	0x36d4


0x3685:	lea	rsi, [r15 + 2]
0x3689:	cmp	r13, rsi
0x368c:	jbe	0x3694


0x367f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x3685:	lea	rsi, [r15 + 2]
0x3689:	cmp	r13, rsi
0x368c:	jbe	0x3694


0x37b2:	mov	r14, qword ptr [rsp + 0x40]
0x37b7:	mov	r13, qword ptr [rsp + 0x70]
0x37bc:	mov	rbp, qword ptr [rsp + 0x30]
0x37c1:	mov	dword ptr [rsp + 8], 2
0x37c9:	cmp	byte ptr [rsp + 0xd], 0
0x37ce:	je	0x37e0


0x2ea2:	xor	eax, 1
0x2ea5:	add	rbp, 1
0x2ea9:	and	eax, r8d
0x2eac:	test	al, al
0x2eae:	je	0x2ed0


0x2fe3:	cmp	dword ptr [rsp + 8], 2
0x2fe8:	sete	dl
0x2feb:	cmp	byte ptr [rsp + 0xf], 0
0x2ff0:	mov	eax, edx
0x2ff2:	jne	0x3848


0x36f6:	movzx	ebx, byte ptr [rdi + rbp]
0x36fa:	add	r15, 1
0x36fe:	test	dl, dl
0x3700:	jne	0x3650


0x36f2:	mov	byte ptr [r14 + r15], bl
0x36f6:	movzx	ebx, byte ptr [rdi + rbp]
0x36fa:	add	r15, 1
0x36fe:	test	dl, dl
0x3700:	jne	0x3650


0x374f:	add	r15, 2
0x3753:	xor	r10d, r10d
0x3756:	xor	r8d, r8d
0x3759:	jmp	0x36ed


0x3749:	mov	byte ptr [r14 + r15 + 1], 0x27
0x374f:	add	r15, 2
0x3753:	xor	r10d, r10d
0x3756:	xor	r8d, r8d
0x3759:	jmp	0x36ed


0x2d28:	cmp	r11, rbp
0x2d2b:	setne	r12b
0x2d2f:	cmp	r11, -1
0x2d33:	jne	0x2d42


0x2ec9:	add	r15, 2
0x2ecd:	xor	r8d, r8d
0x2ed0:	cmp	r15, r13
0x2ed3:	jae	0x2ed9


0x2ec3:	mov	byte ptr [r14 + r15 + 1], 0x27
0x2ec9:	add	r15, 2
0x2ecd:	xor	r8d, r8d
0x2ed0:	cmp	r15, r13
0x2ed3:	jae	0x2ed9


0x36d4:	and	ebx, 7
0x36d7:	add	rbp, 1
0x36db:	add	r15, 3
0x36df:	add	ebx, 0x30
0x36e2:	cmp	rbp, rcx
0x36e5:	jae	0x2ed0


0x36c4:	mov	eax, ebx
0x36c6:	shr	al, 3
0x36c9:	and	eax, 7
0x36cc:	add	eax, 0x30
0x36cf:	mov	byte ptr [r14 + r15 + 2], al
0x36d4:	and	ebx, 7
0x36d7:	add	rbp, 1
0x36db:	add	r15, 3
0x36df:	add	ebx, 0x30
0x36e2:	cmp	rbp, rcx
0x36e5:	jae	0x2ed0


0x3694:	add	r15, 3
0x3698:	mov	r8d, eax
0x369b:	cmp	r13, r15
0x369e:	jbe	0x36a5


0x368e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3694:	add	r15, 3
0x3698:	mov	r8d, eax
0x369b:	cmp	r13, r15
0x369e:	jbe	0x36a5


0x2ff8:	mov	eax, r8d
0x2ffb:	xor	eax, 1
0x2ffe:	and	al, dl
0x3000:	je	0x3031


0x3848:	mov	rbp, r11
0x384b:	jmp	0x37c9


0x36eb:	mov	esi, edx
0x36ed:	cmp	r13, r15
0x36f0:	jbe	0x36f6


0x3031:	cmp	r13, r15
0x3034:	jbe	0x303b


0x3002:	cmp	r13, r15
0x3005:	jbe	0x300c


0x303b:	add	r15, 1
0x303f:	add	rbp, 1
0x3043:	jmp	0x2ed0


0x3036:	mov	byte ptr [r14 + r15], 0x5c
0x303b:	add	r15, 1
0x303f:	add	rbp, 1
0x3043:	jmp	0x2ed0


0x300c:	lea	rdx, [r15 + 1]
0x3010:	cmp	r13, rdx
0x3013:	jbe	0x301b


0x3007:	mov	byte ptr [r14 + r15], 0x27
0x300c:	lea	rdx, [r15 + 1]
0x3010:	cmp	r13, rdx
0x3013:	jbe	0x301b


0x301b:	lea	rdx, [r15 + 2]
0x301f:	cmp	r13, rdx
0x3022:	jbe	0x302a


0x3015:	mov	byte ptr [r14 + r15 + 1], 0x24
0x301b:	lea	rdx, [r15 + 2]
0x301f:	cmp	r13, rdx
0x3022:	jbe	0x302a


0x302a:	add	r15, 3
0x302e:	mov	r8d, eax
0x3031:	cmp	r13, r15
0x3034:	jbe	0x303b


0x3024:	mov	byte ptr [r14 + r15 + 2], 0x27
0x302a:	add	r15, 3
0x302e:	mov	r8d, eax
0x3031:	cmp	r13, r15
0x3034:	jbe	0x303b


0x35d5:	mov	rdi, qword ptr [rsp + 0x28]
0x35da:	test	eax, eax
0x35dc:	mov	eax, 0
0x35e1:	cmove	r12d, eax
0x35e5:	add	rbx, r15
0x35e8:	call	0x1b30


0x35ed:	test	eax, eax
0x35ef:	je	0x3573


0x3573:	mov	rax, qword ptr [rsp + 0x10]
0x3578:	lea	r14, [rbp + rbx]
0x357d:	mov	rdx, qword ptr [rsp + 0x30]
0x3582:	mov	rcx, qword ptr [rsp + 0x28]
0x3587:	mov	rdi, qword ptr [rsp + 0x38]
0x358c:	lea	r13, [rax + r14]
0x3590:	sub	rdx, r14
0x3593:	mov	rsi, r13
0x3596:	call	0x5490


0x2d9c:	movzx	r8d, byte ptr [rsp + 0x38]
0x2da2:	movzx	r10d, byte ptr [rsp + 0x30]
0x2da8:	mov	r11, rax
0x2dab:	mov	r9, qword ptr [rsp + 0x28]
0x2db0:	cmp	rbx, r11
0x2db3:	mov	byte ptr [rsp + 0x28], r10b
0x2db8:	ja	0x3370


0x3520:	movzx	r8d, byte ptr [rsp + 0x40]
0x3526:	movzx	r10d, byte ptr [rsp + 0x38]
0x352c:	mov	r11, rax
0x352f:	mov	r9, qword ptr [rsp + 0x30]
0x3534:	lea	rax, [rsp + 0x9c]
0x353c:	xor	ecx, ecx
0x353e:	mov	byte ptr [rsp + 0x7e], bl
0x3542:	mov	byte ptr [rsp + 0x7d], r8b
0x3547:	mov	rbx, rcx
0x354a:	mov	qword ptr [rsp + 0x88], r9
0x3552:	mov	qword ptr [rsp + 0x38], rax
0x3557:	mov	byte ptr [rsp + 0x7f], r10b
0x355c:	mov	qword ptr [rsp + 0x80], r15
0x3564:	mov	qword ptr [rsp + 0x40], r14
0x3569:	mov	qword ptr [rsp + 0x70], r13
0x356e:	mov	qword ptr [rsp + 0x30], r11
0x3573:	mov	rax, qword ptr [rsp + 0x10]
0x3578:	lea	r14, [rbp + rbx]
0x357d:	mov	rdx, qword ptr [rsp + 0x30]
0x3582:	mov	rcx, qword ptr [rsp + 0x28]
0x3587:	mov	rdi, qword ptr [rsp + 0x38]
0x358c:	lea	r13, [rax + r14]
0x3590:	sub	rdx, r14
0x3593:	mov	rsi, r13
0x3596:	call	0x5490


0x3158:	mov	rcx, qword ptr [rax]
0x315b:	movzx	edx, bl
0x315e:	movzx	r10d, byte ptr [rsp + 0x28]
0x3164:	movzx	r8d, byte ptr [rsp + 0x30]
0x316a:	mov	r11, qword ptr [rsp + 0x38]
0x316f:	mov	edi, 1
0x3174:	movzx	eax, word ptr [rcx + rdx*2]
0x3178:	and	ax, 0x4000
0x317c:	setne	r12b
0x3180:	sete	al
0x3183:	and	al, byte ptr [rsp + 0xd]
0x3187:	test	al, al
0x3189:	jne	0x3b21


0x2e30:	xor	r10d, r10d
0x2e33:	cmp	r11, 1
0x2e37:	setne	al
0x2e3a:	cmp	r11, -1
0x2e3e:	jne	0x2e4c


0x2e40:	mov	rax, qword ptr [rsp + 0x10]
0x2e45:	cmp	byte ptr [rax + 1], 0
0x2e49:	setne	al
0x2e4c:	cmp	dword ptr [rsp + 8], 2
0x2e51:	sete	dl
0x2e54:	test	al, al
0x2e56:	je	0x30a8


0x2e4c:	cmp	dword ptr [rsp + 8], 2
0x2e51:	sete	dl
0x2e54:	test	al, al
0x2e56:	je	0x30a8


0x30a8:	test	rbp, rbp
0x30ab:	jne	0x2e5c


0x2e5c:	xor	r12d, r12d
0x2e5f:	xor	eax, eax
0x2e61:	nop	dword ptr [rax]
0x2e68:	cmp	byte ptr [rsp + 0xd], 1
0x2e6d:	jne	0x2f82


0x30b1:	movzx	eax, byte ptr [rsp + 0xf]
0x30b6:	and	al, dl
0x30b8:	je	0x2e68


0x30be:	mov	rbp, r11
0x30c1:	mov	dword ptr [rsp + 8], 2
0x30c9:	jmp	0x37c9


0x34c8:	cmp	byte ptr [rsp + 0xf], 0
0x34cd:	jne	0x3cf0


0x2f10:	cmp	eax, 5
0x2f13:	je	0x3488


0x34d3:	xor	r12d, r12d
0x34d6:	xor	eax, eax
0x34d8:	mov	ebx, 0x3f
0x34dd:	jmp	0x2e99


0x3cf0:	mov	rbp, r11
0x3cf3:	movzx	eax, byte ptr [rsp + 0xf]
0x3cf8:	jmp	0x37c9


0x3488:	test	byte ptr [rsp + 0x78], 4
0x348d:	je	0x34b0


0x2f19:	cmp	eax, 2
0x2f1c:	mov	ebx, 0x3f
0x2f21:	sete	dl
0x2f24:	xor	r12d, r12d
0x2f27:	xor	eax, eax
0x2f29:	jmp	0x2e68


0x34b0:	xor	edx, edx
0x34b2:	xor	r12d, r12d
0x34b5:	xor	eax, eax
0x34b7:	mov	ebx, 0x3f
0x34bc:	jmp	0x2e68


0x348f:	lea	rcx, [rbp + 2]
0x3493:	cmp	rcx, r11
0x3496:	jae	0x34b0


0x3498:	mov	rax, qword ptr [rsp + 0x10]
0x349d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x34a2:	je	0x3c32


0x3c32:	movzx	ebx, byte ptr [rax + rcx]
0x3c36:	cmp	bl, 0x3e
0x3c39:	ja	0x34b0


0x3c3f:	movabs	rax, 0x7000a38200000000
0x3c49:	bt	rax, rbx
0x3c4d:	jae	0x34b0


0x3c53:	cmp	byte ptr [rsp + 0xf], 0
0x3c58:	jne	0x3e42


0x3c5e:	cmp	r13, r15
0x3c61:	jbe	0x3c68


0x3e42:	mov	rbp, r11
0x3e45:	jmp	0x37e0


0x3c68:	lea	rax, [r15 + 1]
0x3c6c:	cmp	r13, rax
0x3c6f:	jbe	0x3c77


0x3c63:	mov	byte ptr [r14 + r15], 0x3f
0x3c68:	lea	rax, [r15 + 1]
0x3c6c:	cmp	r13, rax
0x3c6f:	jbe	0x3c77


0x3c77:	lea	rax, [r15 + 2]
0x3c7b:	cmp	r13, rax
0x3c7e:	jbe	0x3c86


0x3c71:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3c77:	lea	rax, [r15 + 2]
0x3c7b:	cmp	r13, rax
0x3c7e:	jbe	0x3c86


0x3c86:	lea	rax, [r15 + 3]
0x3c8a:	cmp	r13, rax
0x3c8d:	jbe	0x3c95


0x3c80:	mov	byte ptr [r14 + r15 + 2], 0x22
0x3c86:	lea	rax, [r15 + 3]
0x3c8a:	cmp	r13, rax
0x3c8d:	jbe	0x3c95


0x3c95:	add	r15, 4
0x3c99:	xor	edx, edx
0x3c9b:	xor	r12d, r12d
0x3c9e:	xor	eax, eax
0x3ca0:	mov	rbp, rcx
0x3ca3:	jmp	0x2e68


0x3c8f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x3c95:	add	r15, 4
0x3c99:	xor	edx, edx
0x3c9b:	xor	r12d, r12d
0x3c9e:	xor	eax, eax
0x3ca0:	mov	rbp, rcx
0x3ca3:	jmp	0x2e68


0x3440:	cmp	byte ptr [rsp + 0xf], 0
0x3445:	jne	0x3cf0


0x2f3e:	mov	byte ptr [rsp + 0x7c], r12b
0x2f43:	xor	edx, edx
0x2f45:	xor	eax, eax
0x2f47:	mov	ebx, 0x27
0x2f4c:	jmp	0x2e68


0x344b:	test	r13, r13
0x344e:	je	0x3850


0x3850:	cmp	r13, r15
0x3853:	jbe	0x385a


0x3454:	xor	edx, edx
0x3456:	cmp	qword ptr [rsp + 0x50], 0
0x345c:	jne	0x3850


0x385a:	lea	rax, [r15 + 1]
0x385e:	cmp	r13, rax
0x3861:	jbe	0x3869


0x3855:	mov	byte ptr [r14 + r15], 0x27
0x385a:	lea	rax, [r15 + 1]
0x385e:	cmp	r13, rax
0x3861:	jbe	0x3869


0x3462:	mov	qword ptr [rsp + 0x50], r13
0x3467:	add	r15, 3
0x346b:	xor	eax, eax
0x346d:	mov	byte ptr [rsp + 0x7c], r12b
0x3472:	xor	r8d, r8d
0x3475:	mov	r13, rdx
0x3478:	mov	ebx, 0x27
0x347d:	jmp	0x2e99


0x3869:	lea	rax, [r15 + 2]
0x386d:	cmp	r13, rax
0x3870:	jbe	0x3e62


0x3863:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x3869:	lea	rax, [r15 + 2]
0x386d:	cmp	r13, rax
0x3870:	jbe	0x3e62


0x3e62:	mov	rdx, r13
0x3e65:	mov	r13, qword ptr [rsp + 0x50]
0x3e6a:	jmp	0x3462


0x3876:	mov	rdx, r13
0x3879:	mov	byte ptr [r14 + r15 + 2], 0x27
0x387f:	mov	r13, qword ptr [rsp + 0x50]
0x3884:	jmp	0x3462


0x2f74:	cmp	byte ptr [rsp + 0xd], 0
0x2f79:	jne	0x2fe0


0x2f7b:	mov	ebx, edx
0x2f7d:	xor	r12d, r12d
0x2f80:	xor	eax, eax
0x2f82:	cmp	byte ptr [rsp + 0xf], 0
0x2f87:	jne	0x2e7b


0x2fe0:	xor	r12d, r12d
0x2fe3:	cmp	dword ptr [rsp + 8], 2
0x2fe8:	sete	dl
0x2feb:	cmp	byte ptr [rsp + 0xf], 0
0x2ff0:	mov	eax, edx
0x2ff2:	jne	0x3848


0x3380:	cmp	byte ptr [rsp + 0xf], 0
0x3385:	jne	0x3cf0


0x2fb3:	cmp	byte ptr [rsp + 0xd], 0
0x2fb8:	je	0x31d0


0x338b:	add	rbp, 1
0x338f:	mov	eax, r8d
0x3392:	xor	r12d, r12d
0x3395:	mov	ebx, 0x5c
0x339a:	jmp	0x2eac


0x31d0:	mov	edx, 0x5c
0x31d5:	mov	ebx, 0x5c
0x31da:	jmp	0x2f74


0x2fbe:	cmp	byte ptr [rsp + 0xf], 0
0x2fc3:	je	0x31d0


0x2fc9:	cmp	qword ptr [rsp + 0x18], 0
0x2fcf:	jne	0x338b


0x2fd5:	mov	ebx, 0x5c
0x2fda:	nop	word ptr [rax + rax]
0x2fe0:	xor	r12d, r12d
0x2fe3:	cmp	dword ptr [rsp + 8], 2
0x2fe8:	sete	dl
0x2feb:	cmp	byte ptr [rsp + 0xf], 0
0x2ff0:	mov	eax, edx
0x2ff2:	jne	0x3848


0x305b:	xor	edx, edx
0x305d:	test	byte ptr [rsp + 0x78], 1
0x3062:	je	0x2f7b


0x3223:	cmp	dword ptr [rsp + 8], 2
0x3228:	sete	dl
0x322b:	cmp	byte ptr [rsp + 0xf], 0
0x3230:	jne	0x3dca


0x3068:	add	rbp, 1
0x306c:	jmp	0x2d28


0x3236:	mov	eax, r8d
0x3239:	mov	rcx, r15
0x323c:	xor	eax, 1
0x323f:	and	al, dl
0x3241:	je	0x3270


0x3dca:	movzx	ebx, byte ptr [rsp + 0xf]
0x3dcf:	mov	rbp, r11
0x3dd2:	mov	eax, edx
0x3dd4:	mov	byte ptr [rsp + 0xd], bl
0x3dd8:	jmp	0x37c9


0x3270:	cmp	r13, rcx
0x3273:	jbe	0x327a


0x3243:	cmp	r13, r15
0x3246:	jbe	0x324d


0x327a:	cmp	dword ptr [rsp + 8], 2
0x327f:	lea	r15, [rcx + 1]
0x3283:	je	0x3889


0x3275:	mov	byte ptr [r14 + rcx], 0x5c
0x327a:	cmp	dword ptr [rsp + 8], 2
0x327f:	lea	r15, [rcx + 1]
0x3283:	je	0x3889


0x324d:	lea	rcx, [r15 + 1]
0x3251:	cmp	r13, rcx
0x3254:	jbe	0x325c


0x3248:	mov	byte ptr [r14 + r15], 0x27
0x324d:	lea	rcx, [r15 + 1]
0x3251:	cmp	r13, rcx
0x3254:	jbe	0x325c


0x3889:	mov	eax, r12d
0x388c:	mov	ebx, 0x30
0x3891:	xor	r12d, r12d
0x3894:	jmp	0x2e99


0x3289:	lea	rax, [rbp + 1]
0x328d:	cmp	rax, r11
0x3290:	jae	0x32ab


0x325c:	lea	rcx, [r15 + 2]
0x3260:	cmp	r13, rcx
0x3263:	ja	0x3899


0x3256:	mov	byte ptr [r14 + r15 + 1], 0x24
0x325c:	lea	rcx, [r15 + 2]
0x3260:	cmp	r13, rcx
0x3263:	ja	0x3899


0x3292:	mov	rax, qword ptr [rsp + 0x10]
0x3297:	movzx	eax, byte ptr [rax + rbp + 1]
0x329c:	mov	byte ptr [rsp + 0x28], al
0x32a0:	sub	eax, 0x30
0x32a3:	cmp	al, 9
0x32a5:	jbe	0x3ad9


0x32ab:	mov	eax, r12d
0x32ae:	mov	ebx, 0x30
0x32b3:	xor	r12d, r12d
0x32b6:	jmp	0x2e68


0x3269:	lea	rcx, [r15 + 3]
0x326d:	mov	r8d, eax
0x3270:	cmp	r13, rcx
0x3273:	jbe	0x327a


0x3899:	mov	byte ptr [r14 + r15 + 2], 0x27
0x389f:	jmp	0x3269


0x3ad9:	cmp	r13, r15
0x3adc:	jbe	0x3ae3


0x3ae3:	lea	rax, [rcx + 2]
0x3ae7:	cmp	r13, rax
0x3aea:	jbe	0x3af2


0x3ade:	mov	byte ptr [r14 + r15], 0x30
0x3ae3:	lea	rax, [rcx + 2]
0x3ae7:	cmp	r13, rax
0x3aea:	jbe	0x3af2


0x3af2:	mov	eax, r12d
0x3af5:	lea	r15, [rcx + 3]
0x3af9:	xor	r12d, r12d
0x3afc:	mov	ebx, 0x30
0x3b01:	jmp	0x2e68


0x3aec:	mov	byte ptr [r14 + rcx + 2], 0x30
0x3af2:	mov	eax, r12d
0x3af5:	lea	r15, [rcx + 3]
0x3af9:	xor	r12d, r12d
0x3afc:	mov	ebx, 0x30
0x3b01:	jmp	0x2e68


0x2f62:	cmp	dword ptr [rsp + 8], 2
0x2f67:	sete	al
0x2f6a:	and	al, byte ptr [rsp + 0xf]
0x2f6e:	jne	0x30be


0x3320:	mov	edx, 0xd
0x3325:	xor	r10d, r10d
0x3328:	mov	ebx, 0x72
0x332d:	jmp	0x2f62


0x38a4:	test	ebx, ebx
0x38a6:	jne	0x2cd3


0x38ac:	mov	byte ptr [rsp + 0xd], 1
0x38b1:	test	r13, r13
0x38b4:	jne	0x3e4a


0x38ba:	lea	rax, [rip + 0x36b4]
0x38c1:	mov	qword ptr [rsp + 0x50], 0
0x38ca:	mov	byte ptr [rsp + 0xe], 1
0x38cf:	mov	byte ptr [rsp + 0x7c], 0
0x38d4:	xor	r12d, r12d
0x38d7:	mov	byte ptr [rsp + 0xf], 0
0x38dc:	mov	qword ptr [rsp + 0x18], 1
0x38e5:	mov	qword ptr [rsp + 0x48], rax
0x38ea:	mov	r15d, 1
0x38f0:	mov	dword ptr [rsp + 8], 2
0x38f8:	jmp	0x2d13


0x3e4a:	mov	byte ptr [rsp + 0xe], 1
0x3e4f:	xor	eax, eax
0x3e51:	xor	r12d, r12d
0x3e54:	mov	qword ptr [rsp + 0x50], 0
0x3e5d:	jmp	0x3404


0x3404:	lea	rbx, [rip + 0x3b6a]
0x340b:	mov	byte ptr [r14], 0x27
0x340f:	mov	dword ptr [rsp + 8], 2
0x3417:	mov	r15d, 1
0x341d:	mov	qword ptr [rsp + 0x18], 1
0x3426:	mov	byte ptr [rsp + 0xf], 0
0x342b:	mov	qword ptr [rsp + 0x48], rbx
0x3430:	mov	byte ptr [rsp + 0x7c], al
0x3434:	jmp	0x2d13


0x3908:	test	r13, r13
0x390b:	je	0x3b36


0x3cfd:	lea	rax, [rip + 0x326f]
0x3d04:	mov	byte ptr [rsp + 0xe], 1
0x3d09:	mov	byte ptr [rsp + 0x7c], 0
0x3d0e:	xor	r12d, r12d
0x3d11:	mov	qword ptr [rsp + 0x50], 0
0x3d1a:	mov	byte ptr [rsp + 0xf], 1
0x3d1f:	mov	byte ptr [rsp + 0xd], 1
0x3d24:	mov	qword ptr [rsp + 0x18], 1
0x3d2d:	xor	r15d, r15d
0x3d30:	mov	qword ptr [rsp + 0x48], rax
0x3d35:	jmp	0x2d13


0x3b36:	mov	qword ptr [rsp + 0x50], 0
0x3b3f:	mov	byte ptr [rsp + 0xe], 1
0x3b44:	xor	r12d, r12d
0x3b47:	mov	byte ptr [rsp + 0x7c], 0
0x3b4c:	jmp	0x392b


0x3911:	mov	byte ptr [r14], 0x22
0x3915:	mov	byte ptr [rsp + 0xe], 1
0x391a:	xor	r12d, r12d
0x391d:	mov	byte ptr [rsp + 0x7c], 0
0x3922:	mov	qword ptr [rsp + 0x50], 0
0x392b:	lea	rax, [rip + 0x3641]
0x3932:	mov	byte ptr [rsp + 0xf], 0
0x3937:	mov	byte ptr [rsp + 0xd], 1
0x393c:	mov	qword ptr [rsp + 0x18], 1
0x3945:	mov	r15d, 1
0x394b:	mov	qword ptr [rsp + 0x48], rax
0x3950:	jmp	0x2d13


0x392b:	lea	rax, [rip + 0x3641]
0x3932:	mov	byte ptr [rsp + 0xf], 0
0x3937:	mov	byte ptr [rsp + 0xd], 1
0x393c:	mov	qword ptr [rsp + 0x18], 1
0x3945:	mov	r15d, 1
0x394b:	mov	qword ptr [rsp + 0x48], rax
0x3950:	jmp	0x2d13


0x3955:	lea	rax, [rip + 0x3617]
0x395c:	mov	byte ptr [rsp + 0xe], 1
0x3961:	mov	byte ptr [rsp + 0x7c], 0
0x3966:	xor	r12d, r12d
0x3969:	mov	qword ptr [rsp + 0x50], 0
0x3972:	mov	byte ptr [rsp + 0xf], 1
0x3977:	mov	byte ptr [rsp + 0xd], 1
0x397c:	mov	qword ptr [rsp + 0x18], 1
0x3985:	xor	r15d, r15d
0x3988:	mov	qword ptr [rsp + 0x48], rax
0x398d:	mov	dword ptr [rsp + 8], 5
0x3995:	jmp	0x2d13


0x399a:	mov	byte ptr [rsp + 0xe], 1
0x399f:	mov	byte ptr [rsp + 0x7c], 0
0x39a4:	xor	r12d, r12d
0x39a7:	mov	qword ptr [rsp + 0x50], 0
0x39b0:	mov	byte ptr [rsp + 0xf], 0
0x39b5:	xor	r15d, r15d
0x39b8:	mov	byte ptr [rsp + 0xd], 1
0x39bd:	mov	qword ptr [rsp + 0x18], 0
0x39c6:	mov	qword ptr [rsp + 0x48], 0
0x39cf:	jmp	0x2d13


0x39d4:	cmp	dword ptr [rsp + 8], 0xa
0x39d9:	je	0x3a31


0x3a31:	xor	r15d, r15d
0x3a34:	test	ebx, ebx
0x3a36:	je	0x3bfd


0x39db:	lea	rsi, [rip + 0x3595]
0x39e2:	xor	edi, edi
0x39e4:	mov	edx, 5
0x39e9:	call	0x1890


0x3bfd:	mov	rdx, qword ptr [rsp + 0x68]
0x3c02:	movzx	eax, byte ptr [rdx]
0x3c05:	test	al, al
0x3c07:	je	0x3a3c


0x3a3c:	test	ebx, ebx
0x3a3e:	mov	rbx, qword ptr [rsp + 0x60]
0x3a43:	setne	byte ptr [rsp + 0xf]
0x3a48:	xor	r12d, r12d
0x3a4b:	mov	rdi, rbx
0x3a4e:	call	0x18b0


0x3c19:	add	r15, 1
0x3c1d:	movzx	eax, byte ptr [rdx + r15]
0x3c22:	test	al, al
0x3c24:	jne	0x3c10


0x3c15:	mov	byte ptr [r14 + r15], al
0x3c19:	add	r15, 1
0x3c1d:	movzx	eax, byte ptr [rdx + r15]
0x3c22:	test	al, al
0x3c24:	jne	0x3c10


0x3c26:	jmp	0x3a3c


0x3c10:	cmp	r13, r15
0x3c13:	jbe	0x3c19


0x3a53:	mov	qword ptr [rsp + 0x48], rbx
0x3a58:	mov	qword ptr [rsp + 0x18], rax
0x3a5d:	mov	byte ptr [rsp + 0xe], 1
0x3a62:	mov	byte ptr [rsp + 0x7c], 0
0x3a67:	mov	qword ptr [rsp + 0x50], 0
0x3a70:	mov	byte ptr [rsp + 0xd], 1
0x3a75:	jmp	0x2d13


0x39ee:	mov	rcx, rax
0x39f1:	mov	qword ptr [rsp + 0x68], rax
0x39f6:	lea	rax, [rip + 0x357a]
0x39fd:	cmp	rcx, rax
0x3a00:	je	0x3d9e


0x3d9e:	mov	esi, dword ptr [rsp + 8]
0x3da2:	mov	rdi, rcx
0x3da5:	call	0x2b50


0x3a06:	lea	rsi, [rip + 0x3568]
0x3a0d:	xor	edi, edi
0x3a0f:	mov	edx, 5
0x3a14:	call	0x1890


0x3a19:	mov	rcx, rax
0x3a1c:	mov	qword ptr [rsp + 0x60], rax
0x3a21:	lea	rax, [rip + 0x354d]
0x3a28:	cmp	rcx, rax
0x3a2b:	je	0x3db4


0x3db4:	mov	esi, dword ptr [rsp + 8]
0x3db8:	mov	rdi, rcx
0x3dbb:	call	0x2b50


0x3dc0:	mov	qword ptr [rsp + 0x60], rax
0x3dc5:	jmp	0x3a31


0x3daa:	mov	qword ptr [rsp + 0x68], rax
0x3daf:	jmp	0x3a06


0x3a7a:	mov	byte ptr [rsp + 0xe], 1
0x3a7f:	mov	byte ptr [rsp + 0x7c], 0
0x3a84:	xor	r12d, r12d
0x3a87:	mov	qword ptr [rsp + 0x50], 0
0x3a90:	mov	byte ptr [rsp + 0xf], 0
0x3a95:	xor	r15d, r15d
0x3a98:	mov	byte ptr [rsp + 0xd], 0
0x3a9d:	mov	qword ptr [rsp + 0x18], 0
0x3aa6:	mov	qword ptr [rsp + 0x48], 0
0x3aaf:	jmp	0x2d13


0x3ab4:	mov	byte ptr [rsp + 0xe], 1
0x3ab9:	mov	byte ptr [rsp + 0x7c], 0
0x3abe:	xor	r12d, r12d
0x3ac1:	mov	qword ptr [rsp + 0x50], 0
0x3aca:	mov	byte ptr [rsp + 0xf], 1
0x3acf:	mov	byte ptr [rsp + 0xd], 1
0x3ad4:	jmp	0x2cf3


0x2cf3:	lea	rax, [rip + 0x427b]
0x2cfa:	mov	qword ptr [rsp + 0x18], 1
0x2d03:	xor	r15d, r15d
0x2d06:	mov	dword ptr [rsp + 8], 2
0x2d0e:	mov	qword ptr [rsp + 0x48], rax
0x2d13:	xor	r11d, r11d
0x2d16:	mov	rax, rbp
0x2d19:	mov	r8d, r12d
0x2d1c:	mov	rbp, r11
0x2d1f:	mov	r11, rax
0x2d22:	nop	word ptr [rax + rax]
0x2d28:	cmp	r11, rbp
0x2d2b:	setne	r12b
0x2d2f:	cmp	r11, -1
0x2d33:	jne	0x2d42


0x3ca8:	test	ebx, ebx
0x3caa:	je	0x3e38


0x3e38:	mov	byte ptr [rsp + 0xd], 0
0x3e3d:	jmp	0x38b1


0x3cb0:	lea	rax, [rip + 0x32be]
0x3cb7:	mov	byte ptr [rsp + 0xe], 1
0x3cbc:	mov	byte ptr [rsp + 0x7c], 0
0x3cc1:	xor	r12d, r12d
0x3cc4:	mov	qword ptr [rsp + 0x50], 0
0x3ccd:	mov	byte ptr [rsp + 0xf], 1
0x3cd2:	mov	byte ptr [rsp + 0xd], 0
0x3cd7:	mov	qword ptr [rsp + 0x18], 1
0x3ce0:	xor	r15d, r15d
0x3ce3:	mov	qword ptr [rsp + 0x48], rax
0x3ce8:	jmp	0x2d13


0x38b1:	test	r13, r13
0x38b4:	jne	0x3e4a


0x3e74:	nop	
0x3e76:	nop	word ptr cs:[rax + rax]


0x402b:	nop	dword ptr [rax + rax]


0x4066:	nop	word ptr cs:[rax + rax]


0x4081:	nop	dword ptr [rax + rax]
0x4086:	nop	word ptr cs:[rax + rax]


0x40a1:	nop	dword ptr [rax + rax]
0x40a6:	nop	word ptr cs:[rax + rax]


0x40e5:	nop	
0x40e6:	nop	word ptr cs:[rax + rax]


0x4105:	nop	
0x4106:	nop	word ptr cs:[rax + rax]


0x41b4:	nop	
0x41b6:	nop	word ptr cs:[rax + rax]


0x42a3:	nop	dword ptr [rax]
0x42a6:	nop	word ptr cs:[rax + rax]


0x42ba:	nop	word ptr [rax + rax]


0x4353:	nop	dword ptr [rax]
0x4356:	nop	word ptr cs:[rax + rax]


0x4373:	nop	dword ptr [rax]
0x4376:	nop	word ptr cs:[rax + rax]


0x438c:	nop	dword ptr [rax]


0x43a8:	nop	dword ptr [rax + rax]


0x43c4:	nop	
0x43c6:	nop	word ptr cs:[rax + rax]


0x445e:	nop	


0x44ea:	nop	word ptr [rax + rax]


0x44fc:	nop	dword ptr [rax]


0x450f:	nop	


0x45a8:	nop	dword ptr [rax + rax]


0x45d1:	nop	dword ptr [rax + rax]
0x45d6:	nop	word ptr cs:[rax + rax]


0x45ea:	nop	word ptr [rax + rax]


0x467e:	nop	


0x4711:	nop	dword ptr [rax + rax]
0x4716:	nop	word ptr cs:[rax + rax]


0x472c:	nop	dword ptr [rax]


0x4747:	nop	word ptr [rax + rax]


0x4763:	nop	dword ptr [rax]
0x4766:	nop	word ptr cs:[rax + rax]


0x477c:	nop	dword ptr [rax]


0x4794:	nop	
0x4796:	nop	word ptr cs:[rax + rax]


0x47b3:	nop	dword ptr [rax]
0x47b6:	nop	word ptr cs:[rax + rax]


0x47d8:	nop	dword ptr [rax + rax]


0x485c:	nop	dword ptr [rax]


0x486a:	nop	word ptr [rax + rax]


0x4886:	nop	word ptr cs:[rax + rax]


0x4a04:	nop	
0x4a06:	nop	word ptr cs:[rax + rax]


0x4a96:	nop	word ptr cs:[rax + rax]


0x4aab:	nop	dword ptr [rax + rax]


0x4abb:	nop	dword ptr [rax + rax]


0x4ed7:	nop	word ptr [rax + rax]


0x4f78:	nop	dword ptr [rax + rax]


0x5055:	nop	
0x5056:	nop	word ptr cs:[rax + rax]


0x50fa:	nop	word ptr [rax + rax]


0x5124:	nop	
0x5126:	nop	word ptr cs:[rax + rax]


0x5132:	nop	dword ptr [rax]
0x5136:	nop	word ptr cs:[rax + rax]


0x5176:	nop	word ptr cs:[rax + rax]


0x51a4:	nop	
0x51a6:	nop	word ptr cs:[rax + rax]


0x5232:	nop	dword ptr [rax]
0x5236:	nop	word ptr cs:[rax + rax]


0x528a:	nop	word ptr [rax + rax]


0x52a7:	nop	word ptr [rax + rax]


0x52de:	nop	


0x5308:	nop	dword ptr [rax + rax]


0x5323:	nop	word ptr cs:[rax + rax]
0x532d:	nop	dword ptr [rax]


0x5365:	nop	word ptr cs:[rax + rax]
0x536f:	nop	


0x53eb:	nop	dword ptr [rax + rax]


0x5487:	nop	word ptr [rax + rax]


0x5513:	nop	word ptr cs:[rax + rax]
0x551d:	nop	dword ptr [rax]


0x55bc:	nop	dword ptr [rax]


0x55e3:	nop	dword ptr [rax]
0x55e6:	nop	word ptr cs:[rax + rax]


0x5624:	nop	
0x5626:	nop	word ptr cs:[rax + rax]


0x5634:	nop	
0x5636:	nop	word ptr cs:[rax + rax]


0x575a:	nop	word ptr [rax + rax]


0x577e:	nop	


0x57d1:	nop	word ptr cs:[rax + rax]
0x57db:	nop	dword ptr [rax + rax]


0x583d:	nop	dword ptr [rax]


0x5b69:	nop	dword ptr [rax]


0x5b75:	nop	
0x5b76:	nop	word ptr cs:[rax + rax]


0x5b85:	nop	
0x5b86:	nop	word ptr cs:[rax + rax]


0x5d26:	nop	word ptr cs:[rax + rax]


0x5d79:	nop	dword ptr [rax]


0x600e:	nop	


0x62e3:	nop	word ptr cs:[rax + rax]
0x62ed:	nop	dword ptr [rax]


0x62fe:	nop	


0x657e:	nop	


0x65e5:	nop	
0x65e6:	nop	word ptr cs:[rax + rax]


0x65f2:	nop	word ptr cs:[rax + rax]
0x65fc:	nop	dword ptr [rax]


0x2f00:	xor	r10d, r10d
0x2f03:	mov	eax, dword ptr [rsp + 8]
0x2f07:	cmp	eax, 2
0x2f0a:	je	0x34c8


0x2f30:	xor	r10d, r10d
0x2f33:	cmp	dword ptr [rsp + 8], 2
0x2f38:	je	0x3440


0x2f58:	mov	edx, 9
0x2f5d:	mov	ebx, 0x74
0x2f62:	cmp	dword ptr [rsp + 8], 2
0x2f67:	sete	al
0x2f6a:	and	al, byte ptr [rsp + 0xf]
0x2f6e:	jne	0x30be


0x2f98:	mov	edx, 8
0x2f9d:	mov	ebx, 0x62
0x2fa2:	jmp	0x2f74


0x2fa8:	cmp	dword ptr [rsp + 8], 2
0x2fad:	je	0x3380


0x3050:	cmp	byte ptr [rsp + 0xd], 0
0x3055:	jne	0x3223


0x3078:	cmp	dword ptr [rsp + 8], 2
0x307d:	sete	dl
0x3080:	xor	eax, eax
0x3082:	jmp	0x2e68


0x3090:	mov	edx, 7
0x3095:	mov	ebx, 0x61
0x309a:	jmp	0x2f74


0x30a0:	cmp	dword ptr [rsp + 8], 2
0x30a5:	sete	dl
0x30a8:	test	rbp, rbp
0x30ab:	jne	0x2e5c


0x30d0:	cmp	dword ptr [rsp + 8], 2
0x30d5:	sete	dl
0x30d8:	xor	r12d, r12d
0x30db:	jmp	0x30b1


0x30e0:	cmp	dword ptr [rsp + 8], 2
0x30e5:	mov	ebx, 0x20
0x30ea:	sete	dl
0x30ed:	jmp	0x30b1


0x30f0:	mov	edx, 0xd
0x30f5:	mov	ebx, 0x72
0x30fa:	jmp	0x2f62


0x3100:	mov	edx, 0xc
0x3105:	mov	ebx, 0x66
0x310a:	jmp	0x2f74


0x3110:	mov	edx, 0xb
0x3115:	mov	ebx, 0x76
0x311a:	jmp	0x2f74


0x3120:	mov	edx, 0xa
0x3125:	mov	ebx, 0x6e
0x312a:	jmp	0x2f62


0x31c0:	xor	r10d, r10d
0x31c3:	cmp	byte ptr [rsp + 0xd], 0
0x31c8:	jne	0x2fbe


0x31e0:	mov	edx, 0xc
0x31e5:	xor	r10d, r10d
0x31e8:	mov	ebx, 0x66
0x31ed:	jmp	0x2f74


0x31f8:	mov	edx, 0xa
0x31fd:	xor	r10d, r10d
0x3200:	mov	ebx, 0x6e
0x3205:	jmp	0x2f62


0x3210:	mov	ebx, 0x61
0x3215:	jmp	0x2fe0


0x3220:	xor	r10d, r10d
0x3223:	cmp	dword ptr [rsp + 8], 2
0x3228:	sete	dl
0x322b:	cmp	byte ptr [rsp + 0xf], 0
0x3230:	jne	0x3dca


0x32c0:	cmp	dword ptr [rsp + 8], 2
0x32c5:	mov	r12d, r10d
0x32c8:	sete	dl
0x32cb:	xor	r10d, r10d
0x32ce:	xor	eax, eax
0x32d0:	jmp	0x2e68


0x32d8:	cmp	dword ptr [rsp + 8], 2
0x32dd:	sete	dl
0x32e0:	xor	r10d, r10d
0x32e3:	jmp	0x30a8


0x32f0:	cmp	dword ptr [rsp + 8], 2
0x32f5:	sete	dl
0x32f8:	xor	r10d, r10d
0x32fb:	xor	r12d, r12d
0x32fe:	jmp	0x30b1


0x3308:	cmp	dword ptr [rsp + 8], 2
0x330d:	mov	r12d, r10d
0x3310:	mov	ebx, 0x20
0x3315:	sete	dl
0x3318:	xor	r10d, r10d
0x331b:	jmp	0x30b1


0x3338:	mov	ebx, 0x76
0x333d:	jmp	0x2fe0


0x3348:	mov	edx, 9
0x334d:	xor	r10d, r10d
0x3350:	mov	ebx, 0x74
0x3355:	jmp	0x2f62


0x3360:	mov	ebx, 0x62
0x3365:	jmp	0x2fe0


0x3900:	test	ebx, ebx
0x3902:	jne	0x3cfd


0x1c3d:	nop	dword ptr [rax]


0x1c63:	nop	dword ptr [rax + rax]


0x1c7f:	nop	


0x1c93:	nop	dword ptr [rax + rax]


0x1ca8:	nop	dword ptr [rax + rax]


0x1df1:	nop	dword ptr [rax]


0x2286:	nop	word ptr cs:[rax + rax]


0x22d7:	nop	word ptr [rax + rax]


0x2321:	nop	dword ptr [rax]


0x2362:	nop	word ptr [rax + rax]


0x27c4:	nop	dword ptr [rax]


0x27e1:	nop	dword ptr [rax]


0x27f2:	nop	word ptr [rax + rax]


0x28eb:	nop	dword ptr [rax + rax]


0x2907:	nop	word ptr [rax + rax]


0x295c:	nop	dword ptr [rax]


0x297e:	nop	


0x2a1c:	nop	dword ptr [rax]


0x2a98:	nop	dword ptr [rax + rax]


0x2b8c:	nop	dword ptr [rax]


0x2bdd:	nop	dword ptr [rax]


0x2e08:	nop	dword ptr [rax + rax]


0x2ef7:	nop	word ptr [rax + rax]


0x2f2e:	nop	


0x2f51:	nop	dword ptr [rax]


0x2f92:	nop	word ptr [rax + rax]


0x2fa4:	nop	dword ptr [rax]


0x3048:	nop	dword ptr [rax + rax]


0x3071:	nop	dword ptr [rax]


0x3087:	nop	word ptr [rax + rax]


0x309f:	nop	


0x30ce:	nop	


0x30dd:	nop	dword ptr [rax]


0x30ef:	nop	


0x30ff:	nop	


0x310f:	nop	


0x311f:	nop	


0x312f:	nop	


0x319c:	nop	dword ptr [rax]


0x31bc:	nop	dword ptr [rax]


0x31ce:	nop	


0x31df:	nop	


0x31f2:	nop	word ptr [rax + rax]


0x320a:	nop	word ptr [rax + rax]


0x321a:	nop	word ptr [rax + rax]


0x32bb:	nop	dword ptr [rax + rax]


0x32d5:	nop	dword ptr [rax]


0x32e8:	nop	dword ptr [rax + rax]


0x3303:	nop	dword ptr [rax + rax]


0x3332:	nop	word ptr [rax + rax]


0x3342:	nop	word ptr [rax + rax]


0x335a:	nop	word ptr [rax + rax]


0x336a:	nop	word ptr [rax + rax]


0x3378:	nop	dword ptr [rax + rax]


0x339f:	nop	


0x3439:	nop	dword ptr [rax]


0x3482:	nop	word ptr [rax + rax]


0x34a8:	nop	dword ptr [rax + rax]


0x34c1:	nop	dword ptr [rax]


0x34e2:	nop	word ptr [rax + rax]


0x3648:	nop	dword ptr [rax + rax]


0x375b:	nop	dword ptr [rax + rax]


0x377e:	nop	


0x3845:	nop	dword ptr [rax]


0x38fd:	nop	dword ptr [rax]


0x3b06:	nop	word ptr cs:[rax + rax]


0x3b99:	nop	dword ptr [rax]


0x3c0d:	nop	dword ptr [rax]


0x3ced:	nop	dword ptr [rax]


0x3ffb:	nop	dword ptr [rax + rax]


0x4829:	nop	dword ptr [rax]


0x4942:	nop	word ptr [rax + rax]


0x4a45:	nop	dword ptr [rax]


0x4a5e:	nop	


0x4a76:	nop	word ptr cs:[rax + rax]


0x4b66:	nop	word ptr cs:[rax + rax]


0x4bf5:	nop	dword ptr [rax]


0x4c16:	nop	word ptr cs:[rax + rax]


0x4c75:	nop	dword ptr [rax]


0x4cb1:	nop	dword ptr [rax]


0x4cf8:	nop	dword ptr [rax + rax]


0x4d47:	nop	word ptr [rax + rax]


0x4da4:	nop	dword ptr [rax]


0x4dd2:	nop	word ptr [rax + rax]


0x4e86:	nop	word ptr cs:[rax + rax]


0x4ee9:	nop	dword ptr [rax]


0x5162:	nop	word ptr [rax + rax]


0x51e9:	nop	dword ptr [rax]


0x5214:	nop	dword ptr [rax]


0x526d:	nop	dword ptr [rax]


0x53b5:	nop	dword ptr [rax]


0x5413:	nop	dword ptr [rax + rax]


0x543f:	nop	


0x555a:	nop	word ptr [rax + rax]


0x55a6:	nop	word ptr cs:[rax + rax]


0x561d:	nop	dword ptr [rax]


0x567f:	nop	


0x5741:	nop	dword ptr [rax]


0x58ed:	nop	dword ptr [rax]


0x5982:	nop	word ptr [rax + rax]


0x59b4:	nop	dword ptr [rax]


0x5a82:	nop	word ptr [rax + rax]


0x5bc3:	nop	dword ptr [rax + rax]


0x5c11:	nop	dword ptr [rax]


0x5c78:	nop	dword ptr [rax + rax]


0x5cbe:	nop	


0x5d68:	nop	dword ptr [rax + rax]


0x6279:	nop	dword ptr [rax]


0x62c5:	nop	dword ptr [rax]


0x639b:	nop	dword ptr [rax + rax]


0x63c6:	nop	word ptr cs:[rax + rax]


0x63ff:	nop	


0x6449:	nop	dword ptr [rax]


0x646b:	nop	dword ptr [rax + rax]


0x6511:	nop	dword ptr [rax]


