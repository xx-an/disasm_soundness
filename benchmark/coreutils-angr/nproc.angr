0x4f60:	sub	rsp, 8
0x4f64:	add	rsp, 8
0x4f68:	ret	


0x4f50:	mov	rdx, qword ptr [rip + 0x2020b1]
0x4f57:	xor	esi, esi
0x4f59:	jmp	0x1660


0x4f40:	ret	


0x4ed0:	push	r15
0x4ed2:	push	r14
0x4ed4:	mov	r15, rdx
0x4ed7:	push	r13
0x4ed9:	push	r12
0x4edb:	lea	r12, [rip + 0x201c6e]
0x4ee2:	push	rbp
0x4ee3:	lea	rbp, [rip + 0x201c6e]
0x4eea:	push	rbx
0x4eeb:	mov	r13d, edi
0x4eee:	mov	r14, rsi
0x4ef1:	sub	rbp, r12
0x4ef4:	sub	rsp, 8
0x4ef8:	sar	rbp, 3
0x4efc:	call	0x13c0


0x4e70:	mov	rax, qword ptr [rdi + 8]
0x4e74:	cmp	qword ptr [rdi + 0x10], rax
0x4e78:	je	0x4e80


0x4e30:	test	rdi, rdi
0x4e33:	push	rbx
0x4e34:	mov	rbx, rdi
0x4e37:	je	0x4e4a


0x4db0:	push	r12
0x4db2:	push	rbp
0x4db3:	push	rbx
0x4db4:	mov	rbx, rdi
0x4db7:	call	0x15a0


0x4d70:	sub	rsp, 8
0x4d74:	mov	edi, 0xe
0x4d79:	call	0x15d0


0x4d10:	sub	rsp, 8
0x4d14:	xor	esi, esi
0x4d16:	call	0x1600


0x4c90:	push	r12
0x4c92:	push	rbp
0x4c93:	mov	rbp, rdi
0x4c96:	push	rbx
0x4c97:	call	0x1450


0x4c00:	push	r13
0x4c02:	push	r12
0x4c04:	mov	r13, rsi
0x4c07:	push	rbp
0x4c08:	push	rbx
0x4c09:	mov	rbx, rdi
0x4c0c:	mov	r12, rdx
0x4c0f:	sub	rsp, 0x18
0x4c13:	mov	rax, qword ptr fs:[0x28]
0x4c1c:	mov	qword ptr [rsp + 8], rax
0x4c21:	xor	eax, eax
0x4c23:	lea	rax, [rsp + 4]
0x4c28:	test	rdi, rdi
0x4c2b:	cmove	rbx, rax
0x4c2f:	mov	rdi, rbx
0x4c32:	call	0x14f0


0x47e0:	push	r15
0x47e2:	push	r14
0x47e4:	push	r13
0x47e6:	push	r12
0x47e8:	push	rbp
0x47e9:	push	rbx
0x47ea:	sub	rsp, 0x28
0x47ee:	mov	rax, qword ptr fs:[0x28]
0x47f7:	mov	qword ptr [rsp + 0x18], rax
0x47fc:	xor	eax, eax
0x47fe:	cmp	edx, 0x24
0x4801:	ja	0x4b65


0x47b0:	sub	rsp, 0x10
0x47b4:	push	r9
0x47b6:	mov	r9, r8
0x47b9:	mov	r8, rcx
0x47bc:	mov	rcx, rdx
0x47bf:	mov	rdx, rsi
0x47c2:	mov	esi, 0xa
0x47c7:	call	0x46b0


0x46b0:	push	r15
0x46b2:	push	r14
0x46b4:	mov	r15, rcx
0x46b7:	push	r13
0x46b9:	push	r12
0x46bb:	mov	r14, rdx
0x46be:	push	rbp
0x46bf:	push	rbx
0x46c0:	mov	edx, esi
0x46c2:	xor	esi, esi
0x46c4:	mov	r12, rdi
0x46c7:	mov	r13, r9
0x46ca:	sub	rsp, 0x18
0x46ce:	mov	rcx, rsp
0x46d1:	mov	ebx, dword ptr [rsp + 0x50]
0x46d5:	mov	rax, qword ptr fs:[0x28]
0x46de:	mov	qword ptr [rsp + 8], rax
0x46e3:	xor	eax, eax
0x46e5:	call	0x47e0


0x4670:	lea	rsi, [rip + 0x1518]
0x4677:	sub	rsp, 8
0x467b:	mov	edx, 5
0x4680:	xor	edi, edi
0x4682:	call	0x14a0


0x4650:	push	rbx
0x4651:	mov	rbx, rdi
0x4654:	call	0x14c0


0x4620:	push	rbp
0x4621:	push	rbx
0x4622:	mov	rbp, rdi
0x4625:	mov	rdi, rsi
0x4628:	mov	rbx, rsi
0x462b:	sub	rsp, 8
0x462f:	call	0x4420


0x45f0:	mov	rax, rdi
0x45f3:	sub	rsp, 8
0x45f7:	mul	rsi
0x45fa:	seto	dl
0x45fd:	test	rax, rax
0x4600:	js	0x4619


0x45d0:	push	rbx
0x45d1:	mov	rbx, rdi
0x45d4:	call	0x4420


0x4580:	test	rdi, rdi
0x4583:	mov	rax, qword ptr [rsi]
0x4586:	je	0x45b0


0x44f0:	test	rdi, rdi
0x44f3:	mov	r9, rdx
0x44f6:	mov	rcx, qword ptr [rsi]
0x44f9:	je	0x4530


0x44c0:	mov	rax, rsi
0x44c3:	mul	rdx
0x44c6:	mov	rsi, rax
0x44c9:	seto	al
0x44cc:	test	rsi, rsi
0x44cf:	js	0x44db


0x4480:	test	rsi, rsi
0x4483:	push	rbx
0x4484:	mov	rbx, rsi
0x4487:	jne	0x448e


0x4470:	jmp	0x4420


0x4440:	mov	rax, rdi
0x4443:	mul	rsi
0x4446:	mov	rdi, rax
0x4449:	seto	al
0x444c:	test	rdi, rdi
0x444f:	js	0x445b


0x4420:	push	rbx
0x4421:	mov	rbx, rdi
0x4424:	call	0x15b0


0x43a0:	push	rbx
0x43a1:	lea	rsi, [rip + 0x14da]
0x43a8:	mov	edx, 5
0x43ad:	xor	edi, edi
0x43af:	call	0x14a0


0x42c0:	push	rbp
0x42c1:	push	rbx
0x42c2:	mov	r10d, 0x20
0x42c8:	xor	r11d, r11d
0x42cb:	sub	rsp, 0xb8
0x42d2:	mov	rax, qword ptr fs:[0x28]
0x42db:	mov	qword ptr [rsp + 0x78], rax
0x42e0:	xor	eax, eax
0x42e2:	lea	rax, [rsp + 0xd0]
0x42ea:	mov	qword ptr [rsp + 0xa0], r8
0x42f2:	lea	rbx, [rsp + 0xd0]
0x42fa:	lea	r8, [rsp + 0x20]
0x42ff:	mov	qword ptr [rsp + 0xa8], r9
0x4307:	mov	dword ptr [rsp + 8], 0x20
0x430f:	mov	qword ptr [rsp + 0x10], rax
0x4314:	lea	rax, [rsp + 0x80]
0x431c:	xor	r9d, r9d
0x431f:	mov	qword ptr [rsp + 0x18], rax
0x4324:	mov	rbp, rax
0x4327:	nop	word ptr [rax + rax]
0x4330:	cmp	r10d, 0x2f
0x4334:	ja	0x438c


0x4240:	sub	rsp, 0x68
0x4244:	mov	r10, r8
0x4247:	xor	r9d, r9d
0x424a:	mov	rax, qword ptr fs:[0x28]
0x4253:	mov	qword ptr [rsp + 0x58], rax
0x4258:	xor	eax, eax
0x425a:	mov	r8, rsp
0x425d:	nop	dword ptr [rax]
0x4260:	mov	eax, dword ptr [r10]
0x4263:	cmp	eax, 0x2f
0x4266:	ja	0x42aa


0x4220:	xor	r9d, r9d
0x4223:	cmp	qword ptr [r8], 0
0x4227:	je	0x423b


0x3e00:	push	r15
0x3e02:	push	r14
0x3e04:	push	r13
0x3e06:	push	r12
0x3e08:	mov	r12, r9
0x3e0b:	push	rbp
0x3e0c:	push	rbx
0x3e0d:	mov	rbp, rdi
0x3e10:	mov	rbx, r8
0x3e13:	sub	rsp, 0x28
0x3e17:	test	rsi, rsi
0x3e1a:	je	0x3f38


0x3de0:	lea	rcx, [rip + 0x203239]
0x3de7:	mov	rsi, rdi
0x3dea:	mov	rdx, -1
0x3df1:	xor	edi, edi
0x3df3:	jmp	0x34a0


0x3dc0:	lea	rcx, [rip + 0x203259]
0x3dc7:	mov	rdx, -1
0x3dce:	jmp	0x34a0


0x3da0:	lea	rcx, [rip + 0x203279]
0x3da7:	mov	rdx, rsi
0x3daa:	mov	rsi, rdi
0x3dad:	xor	edi, edi
0x3daf:	jmp	0x34a0


0x3d90:	lea	rcx, [rip + 0x203289]
0x3d97:	jmp	0x34a0


0x3d70:	mov	r8, rcx
0x3d73:	mov	rcx, rdx
0x3d76:	mov	rdx, rsi
0x3d79:	mov	rsi, rdi
0x3d7c:	xor	edi, edi
0x3d7e:	jmp	0x3ca0


0x3d50:	mov	rcx, rdx
0x3d53:	mov	r8, -1
0x3d5a:	mov	rdx, rsi
0x3d5d:	mov	rsi, rdi
0x3d60:	xor	edi, edi
0x3d62:	jmp	0x3ca0


0x3d40:	mov	r8, -1
0x3d47:	jmp	0x3ca0


0x3ca0:	sub	rsp, 0x48
0x3ca4:	mov	r9, rcx
0x3ca7:	mov	rcx, qword ptr [rip + 0x203582]
0x3cae:	movdqa	xmm0, xmmword ptr [rip + 0x20354a]
0x3cb6:	mov	rax, qword ptr fs:[0x28]
0x3cbf:	mov	qword ptr [rsp + 0x38], rax
0x3cc4:	xor	eax, eax
0x3cc6:	movaps	xmmword ptr [rsp], xmm0
0x3cca:	test	rsi, rsi
0x3ccd:	mov	qword ptr [rsp + 0x30], rcx
0x3cd2:	mov	dword ptr [rsp], 0xa
0x3cd9:	movdqa	xmm0, xmmword ptr [rip + 0x20352f]
0x3ce1:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x3ce6:	movdqa	xmm0, xmmword ptr [rip + 0x203532]
0x3cee:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x3cf3:	je	0x3d27


0x3c10:	sub	rsp, 0x48
0x3c14:	mov	rax, rdx
0x3c17:	mov	rdx, qword ptr fs:[0x28]
0x3c20:	mov	qword ptr [rsp + 0x38], rdx
0x3c25:	xor	edx, edx
0x3c27:	cmp	esi, 0xa
0x3c2a:	je	0x3c94


0x3c00:	mov	edx, 0x3a
0x3c05:	jmp	0x3b30


0x3be0:	mov	edx, 0x3a
0x3be5:	mov	rsi, -1
0x3bec:	jmp	0x3b30


0x3bd0:	movsx	edx, sil
0x3bd4:	mov	rsi, -1
0x3bdb:	jmp	0x3b30


0x3b30:	sub	rsp, 0x48
0x3b34:	mov	ecx, edx
0x3b36:	mov	rax, qword ptr fs:[0x28]
0x3b3f:	mov	qword ptr [rsp + 0x38], rax
0x3b44:	xor	eax, eax
0x3b46:	mov	rax, qword ptr [rip + 0x2036e3]
0x3b4d:	mov	r8, rsp
0x3b50:	and	ecx, 0x1f
0x3b53:	movdqa	xmm0, xmmword ptr [rip + 0x2036a5]
0x3b5b:	mov	qword ptr [rsp + 0x30], rax
0x3b60:	mov	eax, edx
0x3b62:	movaps	xmmword ptr [rsp], xmm0
0x3b66:	shr	al, 5
0x3b69:	movzx	eax, al
0x3b6c:	lea	r9, [r8 + rax*4 + 8]
0x3b71:	movdqa	xmm0, xmmword ptr [rip + 0x203697]
0x3b79:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x3b7e:	movdqa	xmm0, xmmword ptr [rip + 0x20369a]
0x3b86:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x3b8b:	mov	edx, dword ptr [r9]
0x3b8e:	mov	eax, edx
0x3b90:	shr	eax, cl
0x3b92:	not	eax
0x3b94:	and	eax, 1
0x3b97:	shl	eax, cl
0x3b99:	mov	rcx, r8
0x3b9c:	xor	eax, edx
0x3b9e:	mov	rdx, rsi
0x3ba1:	mov	rsi, rdi
0x3ba4:	mov	dword ptr [r9], eax
0x3ba7:	xor	edi, edi
0x3ba9:	call	0x34a0


0x3b20:	mov	rcx, rdx
0x3b23:	mov	rdx, rsi
0x3b26:	mov	esi, edi
0x3b28:	xor	edi, edi
0x3b2a:	jmp	0x3a80


0x3b10:	mov	rdx, rsi
0x3b13:	mov	esi, edi
0x3b15:	xor	edi, edi
0x3b17:	jmp	0x39f0


0x3a80:	sub	rsp, 0x48
0x3a84:	mov	rax, rdx
0x3a87:	mov	rdx, rcx
0x3a8a:	mov	rcx, qword ptr fs:[0x28]
0x3a93:	mov	qword ptr [rsp + 0x38], rcx
0x3a98:	xor	ecx, ecx
0x3a9a:	cmp	esi, 0xa
0x3a9d:	je	0x3b00


0x39f0:	sub	rsp, 0x48
0x39f4:	mov	rax, rdx
0x39f7:	mov	rdx, qword ptr fs:[0x28]
0x3a00:	mov	qword ptr [rsp + 0x38], rdx
0x3a05:	xor	edx, edx
0x3a07:	cmp	esi, 0xa
0x3a0a:	je	0x3a74


0x39d0:	lea	rcx, [rip + 0x203829]
0x39d7:	mov	rdx, rsi
0x39da:	mov	rsi, rdi
0x39dd:	xor	edi, edi
0x39df:	jmp	0x34a0


0x39b0:	lea	rcx, [rip + 0x203849]
0x39b7:	mov	rsi, rdi
0x39ba:	mov	rdx, -1
0x39c1:	xor	edi, edi
0x39c3:	jmp	0x34a0


0x39a0:	lea	rcx, [rip + 0x203859]
0x39a7:	jmp	0x34a0


0x3980:	lea	rcx, [rip + 0x203879]
0x3987:	mov	rdx, -1
0x398e:	jmp	0x34a0


0x38e0:	mov	eax, dword ptr [rip + 0x203772]
0x38e6:	push	r12
0x38e8:	mov	r12, qword ptr [rip + 0x203771]
0x38ef:	push	rbp
0x38f0:	push	rbx
0x38f1:	cmp	eax, 1
0x38f4:	jle	0x3921


0x38d0:	mov	rcx, rdx
0x38d3:	xor	edx, edx
0x38d5:	jmp	0x37e0


0x37e0:	push	r15
0x37e2:	push	r14
0x37e4:	lea	rax, [rip + 0x203a15]
0x37eb:	push	r13
0x37ed:	push	r12
0x37ef:	mov	r12, rdx
0x37f2:	push	rbp
0x37f3:	push	rbx
0x37f4:	mov	rbx, rcx
0x37f7:	mov	r14, rdi
0x37fa:	mov	r15, rsi
0x37fd:	sub	rsp, 0x38
0x3801:	test	rcx, rcx
0x3804:	cmove	rbx, rax
0x3808:	xor	ebp, ebp
0x380a:	call	0x1420


0x3760:	push	r15
0x3762:	push	r14
0x3764:	lea	rax, [rip + 0x203a95]
0x376b:	push	r13
0x376d:	push	r12
0x376f:	mov	r13, rdi
0x3772:	push	rbp
0x3773:	push	rbx
0x3774:	mov	rbx, r8
0x3777:	mov	r14, rsi
0x377a:	mov	r15, rdx
0x377d:	sub	rsp, 0x18
0x3781:	test	r8, r8
0x3784:	cmove	rbx, rax
0x3788:	mov	qword ptr [rsp + 8], rcx
0x378d:	call	0x1420


0x3730:	lea	rax, [rip + 0x203ac9]
0x3737:	test	rdi, rdi
0x373a:	cmove	rdi, rax
0x373e:	test	rsi, rsi
0x3741:	mov	dword ptr [rdi], 0xa
0x3747:	je	0x3757


0x3710:	lea	rax, [rip + 0x203ae9]
0x3717:	test	rdi, rdi
0x371a:	cmove	rdi, rax
0x371e:	mov	eax, dword ptr [rdi + 4]
0x3721:	mov	dword ptr [rdi + 4], esi
0x3724:	ret	


0x36d0:	lea	rax, [rip + 0x203b29]
0x36d7:	test	rdi, rdi
0x36da:	mov	ecx, esi
0x36dc:	cmove	rdi, rax
0x36e0:	mov	eax, esi
0x36e2:	and	ecx, 0x1f
0x36e5:	shr	al, 5
0x36e8:	movzx	eax, al
0x36eb:	lea	rdi, [rdi + rax*4 + 8]
0x36f0:	mov	esi, dword ptr [rdi]
0x36f2:	mov	eax, esi
0x36f4:	shr	eax, cl
0x36f6:	xor	edx, eax
0x36f8:	and	eax, 1
0x36fb:	and	edx, 1
0x36fe:	shl	edx, cl
0x3700:	xor	edx, esi
0x3702:	mov	dword ptr [rdi], edx
0x3704:	ret	


0x36b0:	lea	rax, [rip + 0x203b49]
0x36b7:	test	rdi, rdi
0x36ba:	cmove	rdi, rax
0x36be:	mov	dword ptr [rdi], esi
0x36c0:	ret	


0x3690:	lea	rax, [rip + 0x203b69]
0x3697:	test	rdi, rdi
0x369a:	cmove	rdi, rax
0x369e:	mov	eax, dword ptr [rdi]
0x36a0:	ret	


0x3650:	push	r12
0x3652:	push	rbp
0x3653:	push	rbx
0x3654:	mov	rbx, rdi
0x3657:	call	0x1420


0x34a0:	push	r15
0x34a2:	push	r14
0x34a4:	movsxd	r15, edi
0x34a7:	push	r13
0x34a9:	push	r12
0x34ab:	mov	r14, rdx
0x34ae:	push	rbp
0x34af:	push	rbx
0x34b0:	mov	rbp, rcx
0x34b3:	sub	rsp, 0x28
0x34b7:	mov	qword ptr [rsp + 8], rsi
0x34bc:	call	0x1420


0x2260:	push	r15
0x2262:	push	r14
0x2264:	mov	r15d, r8d
0x2267:	push	r13
0x2269:	push	r12
0x226b:	mov	r14, rdi
0x226e:	push	rbp
0x226f:	push	rbx
0x2270:	mov	ebx, r9d
0x2273:	mov	r13, rsi
0x2276:	mov	rbp, rcx
0x2279:	and	ebx, 2
0x227c:	sub	rsp, 0xb8
0x2283:	mov	rax, qword ptr [rsp + 0xf0]
0x228b:	mov	qword ptr [rsp + 0x10], rdx
0x2290:	mov	dword ptr [rsp + 8], r8d
0x2295:	mov	dword ptr [rsp + 0x78], r9d
0x229a:	mov	qword ptr [rsp + 0x20], rax
0x229f:	mov	rax, qword ptr [rsp + 0xf8]
0x22a7:	mov	qword ptr [rsp + 0x68], rax
0x22ac:	mov	rax, qword ptr [rsp + 0x100]
0x22b4:	mov	qword ptr [rsp + 0x60], rax
0x22b9:	mov	rax, qword ptr fs:[0x28]
0x22c2:	mov	qword ptr [rsp + 0xa8], rax
0x22ca:	xor	eax, eax
0x22cc:	call	0x14b0


0x2170:	push	rbp
0x2171:	push	rbx
0x2172:	mov	rbp, rdi
0x2175:	mov	ebx, esi
0x2177:	sub	rsp, 8
0x217b:	call	0x4d70


0x20d0:	test	rdi, rdi
0x20d3:	push	rbx
0x20d4:	je	0x214d


0x1f80:	push	rbp
0x1f81:	push	rbx
0x1f82:	sub	rsp, 8
0x1f86:	cmp	edi, 2
0x1f89:	je	0x1fc0


0x1e60:	sub	rsp, 0x18
0x1e64:	movzx	ecx, byte ptr [rdi]
0x1e67:	mov	rax, qword ptr fs:[0x28]
0x1e70:	mov	qword ptr [rsp + 8], rax
0x1e75:	xor	eax, eax
0x1e77:	test	cl, cl
0x1e79:	je	0x1ebe


0x1df0:	push	rbx
0x1df1:	xor	edi, edi
0x1df3:	mov	esi, 0x80
0x1df8:	sub	rsp, 0x90
0x1dff:	mov	rbx, rsp
0x1e02:	mov	rdx, rbx
0x1e05:	mov	rax, qword ptr fs:[0x28]
0x1e0e:	mov	qword ptr [rsp + 0x88], rax
0x1e16:	xor	eax, eax
0x1e18:	call	0x16a0


0x1d40:	push	rbp
0x1d41:	push	rbx
0x1d42:	sub	rsp, 8
0x1d46:	mov	rdi, qword ptr [rip + 0x20533b]
0x1d4d:	call	0x4c90


0x1d30:	mov	byte ptr [rip + 0x205399], dil
0x1d37:	ret	


0x1d20:	mov	qword ptr [rip + 0x2053b1], rdi
0x1d27:	ret	


0x19b0:	push	r13
0x19b2:	push	r12
0x19b4:	mov	edx, 5
0x19b9:	push	rbp
0x19ba:	push	rbx
0x19bb:	mov	ebp, edi
0x19bd:	sub	rsp, 0x88
0x19c4:	mov	rbx, qword ptr [rip + 0x205715]
0x19cb:	mov	rax, qword ptr fs:[0x28]
0x19d4:	mov	qword ptr [rsp + 0x78], rax
0x19d9:	xor	eax, eax
0x19db:	test	edi, edi
0x19dd:	je	0x1a0d


0x19a0:	push	rbp
0x19a1:	mov	rbp, rsp
0x19a4:	pop	rbp
0x19a5:	jmp	0x1910


0x1960:	cmp	byte ptr [rip + 0x205761], 0
0x1967:	jne	0x1998


0x1910:	lea	rdi, [rip + 0x205769]
0x1917:	lea	rsi, [rip + 0x205762]
0x191e:	push	rbp
0x191f:	sub	rsi, rdi
0x1922:	mov	rbp, rsp
0x1925:	sar	rsi, 3
0x1929:	mov	rax, rsi
0x192c:	shr	rax, 0x3f
0x1930:	add	rsi, rax
0x1933:	sar	rsi, 1
0x1936:	je	0x1950


0x18d0:	lea	rdi, [rip + 0x2057a9]
0x18d7:	push	rbp
0x18d8:	lea	rax, [rip + 0x2057a1]
0x18df:	cmp	rax, rdi
0x18e2:	mov	rbp, rsp
0x18e5:	je	0x1900


0x18a0:	xor	ebp, ebp
0x18a2:	mov	r9, rdx
0x18a5:	pop	rsi
0x18a6:	mov	rdx, rsp
0x18a9:	and	rsp, 0xfffffffffffffff0
0x18ad:	push	rax
0x18ae:	push	rsp
0x18af:	lea	r8, [rip + 0x368a]
0x18b6:	lea	rcx, [rip + 0x3613]
0x18bd:	lea	rdi, [rip - 0x1d4]
0x18c4:	call	qword ptr [rip + 0x205716]


0x16f0:	push	r13
0x16f2:	push	r12
0x16f4:	mov	r13d, 2
0x16fa:	push	rbp
0x16fb:	push	rbx
0x16fc:	mov	ebp, edi
0x16fe:	mov	rbx, rsi
0x1701:	xor	r12d, r12d
0x1704:	sub	rsp, 8
0x1708:	mov	rdi, qword ptr [rsi]
0x170b:	call	0x20d0


0x13c0:	sub	rsp, 8
0x13c4:	mov	rax, qword ptr [rip + 0x205c1d]
0x13cb:	test	rax, rax
0x13ce:	je	0x13d2


0x1660:	jmp	qword ptr [rip + 0x205932]


0x4e80:	mov	rax, qword ptr [rdi + 0x20]
0x4e84:	cmp	qword ptr [rdi + 0x28], rax
0x4e88:	jne	0x4e7a


0x4e7a:	jmp	0x1630


0x4e4a:	mov	rdi, rbx
0x4e4d:	pop	rbx
0x4e4e:	jmp	0x15c0


0x4e39:	call	0x15e0


0x15a0:	jmp	qword ptr [rip + 0x205992]


0x15d0:	jmp	qword ptr [rip + 0x20597a]


0x1600:	jmp	qword ptr [rip + 0x205962]


0x1450:	jmp	qword ptr [rip + 0x205a3a]


0x14f0:	jmp	qword ptr [rip + 0x2059ea]


0x4807:	lea	rax, [rsp + 0x10]
0x480c:	mov	r15, rsi
0x480f:	test	rsi, rsi
0x4812:	mov	rbp, rdi
0x4815:	mov	dword ptr [rsp + 8], edx
0x4819:	mov	r14, rcx
0x481c:	mov	r13, r8
0x481f:	cmove	r15, rax
0x4823:	call	0x1420


0x4b65:	lea	rcx, [rip + 0x1154]
0x4b6c:	lea	rsi, [rip + 0x102d]
0x4b73:	lea	rdi, [rip + 0x1046]
0x4b7a:	mov	edx, 0x54
0x4b7f:	call	0x1530


0x14a0:	jmp	qword ptr [rip + 0x205a12]


0x14c0:	jmp	qword ptr [rip + 0x205a02]


0x4619:	call	0x4670


0x4602:	movzx	edx, dl
0x4605:	test	rdx, rdx
0x4608:	jne	0x4619


0x45b0:	test	rax, rax
0x45b3:	mov	edx, 0x80
0x45b8:	cmove	rax, rdx
0x45bc:	test	rax, rax
0x45bf:	jns	0x45a2


0x4588:	movabs	rdx, 0x5555555555555553
0x4592:	cmp	rax, rdx
0x4595:	ja	0x45c1


0x4530:	test	rcx, rcx
0x4533:	je	0x4558


0x44fb:	xor	edx, edx
0x44fd:	movabs	rax, 0x5555555555555554
0x4507:	div	r9
0x450a:	cmp	rax, rcx
0x450d:	jbe	0x454b


0x44db:	sub	rsp, 8
0x44df:	call	0x4670


0x44d1:	movzx	eax, al
0x44d4:	test	rax, rax
0x44d7:	jne	0x44db


0x4489:	test	rdi, rdi
0x448c:	jne	0x44a8


0x448e:	mov	rsi, rbx
0x4491:	call	0x15f0


0x445b:	sub	rsp, 8
0x445f:	call	0x4670


0x4451:	movzx	eax, al
0x4454:	test	rax, rax
0x4457:	jne	0x445b


0x15b0:	jmp	qword ptr [rip + 0x20598a]


0x4336:	mov	eax, r10d
0x4339:	mov	r11d, 1
0x433f:	add	r10d, 8
0x4343:	add	rax, rbp
0x4346:	mov	rax, qword ptr [rax]
0x4349:	test	rax, rax
0x434c:	mov	qword ptr [r8 + r9*8], rax
0x4350:	je	0x435c


0x438c:	mov	rax, rbx
0x438f:	add	rbx, 8
0x4393:	jmp	0x4346


0x4268:	mov	r11d, eax
0x426b:	add	r11, qword ptr [r10 + 0x10]
0x426f:	add	eax, 8
0x4272:	mov	dword ptr [r10], eax
0x4275:	mov	rax, qword ptr [r11]
0x4278:	test	rax, rax
0x427b:	mov	qword ptr [r8 + r9*8], rax
0x427f:	je	0x428b


0x42aa:	mov	r11, qword ptr [r10 + 8]
0x42ae:	lea	rax, [r11 + 8]
0x42b2:	mov	qword ptr [r10 + 8], rax
0x42b6:	jmp	0x4275


0x423b:	jmp	0x3e00


0x3f38:	mov	r8, rcx
0x3f3b:	mov	rcx, rdx
0x3f3e:	lea	rdx, [rip + 0x18ef]
0x3f45:	mov	esi, 1
0x3f4a:	xor	eax, eax
0x3f4c:	call	0x1690


0x3e20:	mov	r8, rdx
0x3e23:	lea	rdx, [rip + 0x19fe]
0x3e2a:	mov	r9, rcx
0x3e2d:	xor	eax, eax
0x3e2f:	mov	rcx, rsi
0x3e32:	mov	esi, 1
0x3e37:	call	0x1690


0x3d27:	call	0x1410


0x3cf5:	test	rdx, rdx
0x3cf8:	je	0x3d27


0x3c94:	call	0x1410


0x3c2c:	mov	dword ptr [rsp], esi
0x3c2f:	mov	rcx, rsp
0x3c32:	mov	rdx, -1
0x3c39:	mov	rsi, rax
0x3c3c:	mov	qword ptr [rsp + 4], 0
0x3c45:	mov	qword ptr [rsp + 0xc], 0x4000000
0x3c4e:	mov	qword ptr [rsp + 0x14], 0
0x3c57:	mov	qword ptr [rsp + 0x1c], 0
0x3c60:	mov	qword ptr [rsp + 0x24], 0
0x3c69:	mov	qword ptr [rsp + 0x2c], 0
0x3c72:	mov	dword ptr [rsp + 0x34], 0
0x3c7a:	call	0x34a0


0x3b00:	call	0x1410


0x3a9f:	mov	dword ptr [rsp], esi
0x3aa2:	mov	rcx, rsp
0x3aa5:	mov	rsi, rax
0x3aa8:	mov	qword ptr [rsp + 4], 0
0x3ab1:	mov	qword ptr [rsp + 0xc], 0
0x3aba:	mov	qword ptr [rsp + 0x14], 0
0x3ac3:	mov	qword ptr [rsp + 0x1c], 0
0x3acc:	mov	qword ptr [rsp + 0x24], 0
0x3ad5:	mov	qword ptr [rsp + 0x2c], 0
0x3ade:	mov	dword ptr [rsp + 0x34], 0
0x3ae6:	call	0x34a0


0x3a74:	call	0x1410


0x3a0c:	mov	dword ptr [rsp], esi
0x3a0f:	mov	rcx, rsp
0x3a12:	mov	rdx, -1
0x3a19:	mov	rsi, rax
0x3a1c:	mov	qword ptr [rsp + 4], 0
0x3a25:	mov	qword ptr [rsp + 0xc], 0
0x3a2e:	mov	qword ptr [rsp + 0x14], 0
0x3a37:	mov	qword ptr [rsp + 0x1c], 0
0x3a40:	mov	qword ptr [rsp + 0x24], 0
0x3a49:	mov	qword ptr [rsp + 0x2c], 0
0x3a52:	mov	dword ptr [rsp + 0x34], 0
0x3a5a:	call	0x34a0


0x3921:	mov	rdi, qword ptr [r12 + 8]
0x3926:	lea	rbx, [rip + 0x2037d3]
0x392d:	cmp	rdi, rbx
0x3930:	je	0x3949


0x38f6:	sub	eax, 2
0x38f9:	lea	rbx, [r12 + 0x18]
0x38fe:	shl	rax, 4
0x3902:	lea	rbp, [r12 + rax + 0x28]
0x3907:	nop	word ptr [rax + rax]
0x3910:	mov	rdi, qword ptr [rbx]
0x3913:	add	rbx, 0x10
0x3917:	call	0x1400


0x1420:	jmp	qword ptr [rip + 0x205a52]


0x3757:	sub	rsp, 8
0x375b:	call	0x1410


0x3749:	test	rdx, rdx
0x374c:	je	0x3757


0x14b0:	jmp	qword ptr [rip + 0x205a0a]


0x214d:	mov	rcx, qword ptr [rip + 0x204f6c]
0x2154:	lea	rdi, [rip + 0x31bd]
0x215b:	mov	edx, 0x37
0x2160:	mov	esi, 1
0x2165:	call	0x1680


0x20d6:	mov	esi, 0x2f
0x20db:	mov	rbx, rdi
0x20de:	call	0x1510


0x1fc0:	lea	rdi, [rip + 0x332c]
0x1fc7:	call	0x13f0


0x1f8b:	cmp	edi, 1
0x1f8e:	je	0x2090


0x1ebe:	xor	eax, eax
0x1ec0:	mov	rdx, qword ptr [rsp + 8]
0x1ec5:	xor	rdx, qword ptr fs:[0x28]
0x1ece:	jne	0x1f6c


0x1e7b:	movsx	eax, cl
0x1e7e:	cmp	eax, 0x20
0x1e81:	ja	0x1ee0


0x16a0:	jmp	qword ptr [rip + 0x205912]


0x1a0d:	lea	rsi, [rip + 0x3576]
0x1a14:	xor	edi, edi
0x1a16:	call	0x14a0


0x19df:	lea	rsi, [rip + 0x36ca]
0x19e6:	xor	edi, edi
0x19e8:	call	0x14a0


0x1969:	cmp	qword ptr [rip + 0x205687], 0
0x1971:	push	rbp
0x1972:	mov	rbp, rsp
0x1975:	je	0x1983


0x1998:	ret	


0x1950:	pop	rbp
0x1951:	ret	


0x1938:	mov	rax, qword ptr [rip + 0x2056b1]
0x193f:	test	rax, rax
0x1942:	je	0x1950


0x1900:	pop	rbp
0x1901:	ret	


0x18e7:	mov	rax, qword ptr [rip + 0x2056ea]
0x18ee:	test	rax, rax
0x18f1:	je	0x1900




0x13d2:	add	rsp, 8
0x13d6:	ret	


0x13d0:	call	rax




0x4e8a:	cmp	qword ptr [rdi + 0x48], 0
0x4e8f:	jne	0x4e7a


0x1630:	jmp	qword ptr [rip + 0x20594a]


0x15c0:	jmp	qword ptr [rip + 0x205982]


0x15e0:	jmp	qword ptr [rip + 0x205972]












0x1530:	jmp	qword ptr [rip + 0x2059ca]






0x460a:	call	0x1580


0x45c1:	sub	rsp, 8
0x45c5:	call	0x4670


0x45a2:	mov	qword ptr [rsi], rax
0x45a5:	mov	rsi, rax
0x45a8:	jmp	0x4480


0x4597:	mov	rdx, rax
0x459a:	shr	rdx, 1
0x459d:	lea	rax, [rdx + rax + 1]
0x45a2:	mov	qword ptr [rsi], rax
0x45a5:	mov	rsi, rax
0x45a8:	jmp	0x4480


0x4558:	xor	edx, edx
0x455a:	mov	eax, 0x80
0x455f:	xor	r8d, r8d
0x4562:	div	r9
0x4565:	test	rax, rax
0x4568:	sete	r8b
0x456c:	lea	rcx, [r8 + rax]
0x4570:	jmp	0x4535


0x4535:	mov	rax, rcx
0x4538:	mul	r9
0x453b:	seto	dl
0x453e:	test	rax, rax
0x4541:	movzx	edx, dl
0x4544:	js	0x454b


0x454b:	sub	rsp, 8
0x454f:	call	0x4670


0x450f:	mov	rax, rcx
0x4512:	shr	rax, 1
0x4515:	lea	rcx, [rax + rcx + 1]
0x451a:	mov	qword ptr [rsi], rcx
0x451d:	imul	rcx, r9
0x4521:	mov	rsi, rcx
0x4524:	jmp	0x4480


0x44d9:	jmp	0x4480


0x44a8:	call	0x1400


0x15f0:	jmp	qword ptr [rip + 0x20596a]


0x4459:	jmp	0x4420




0x435c:	test	r11b, r11b
0x435f:	jne	0x4385


0x4352:	add	r9, 1
0x4356:	cmp	r9, 0xa
0x435a:	jne	0x4330


0x4346:	mov	rax, qword ptr [rax]
0x4349:	test	rax, rax
0x434c:	mov	qword ptr [r8 + r9*8], rax
0x4350:	je	0x435c


0x428b:	call	0x3e00


0x4281:	add	r9, 1
0x4285:	cmp	r9, 0xa
0x4289:	jne	0x4260


0x4275:	mov	rax, qword ptr [r11]
0x4278:	test	rax, rax
0x427b:	mov	qword ptr [r8 + r9*8], rax
0x427f:	je	0x428b


0x4230:	add	r9, 1
0x4234:	cmp	qword ptr [r8 + r9*8], 0
0x4239:	jne	0x4230


0x1690:	jmp	qword ptr [rip + 0x20591a]


0x1410:	jmp	qword ptr [rip + 0x205a5a]


0x3cfa:	mov	qword ptr [rsp + 0x28], rsi
0x3cff:	mov	qword ptr [rsp + 0x30], rdx
0x3d04:	mov	rcx, rsp
0x3d07:	mov	rdx, r8
0x3d0a:	mov	rsi, r9
0x3d0d:	call	0x34a0


0x3949:	lea	rbx, [rip + 0x203720]
0x3950:	cmp	r12, rbx
0x3953:	je	0x3964


0x3932:	call	0x1400


0x1400:	jmp	qword ptr [rip + 0x205a62]




0x374e:	mov	qword ptr [rdi + 0x28], rsi
0x3752:	mov	qword ptr [rdi + 0x30], rdx
0x3756:	ret	




0x1680:	jmp	qword ptr [rip + 0x205922]


0x1510:	jmp	qword ptr [rip + 0x2059da]


0x13f0:	jmp	qword ptr [rip + 0x205a6a]


0x2090:	call	0x1df0


0x1f94:	mov	edi, 0x53
0x1f99:	call	0x1640


0x1ed4:	add	rsp, 0x18
0x1ed8:	ret	


0x1f6c:	call	0x14d0


0x1e83:	movabs	rax, 0x100003e00
0x1e8d:	mov	esi, 1
0x1e92:	bt	rax, rcx
0x1e96:	mov	rdx, rax
0x1e99:	jb	0x1eb3


0x1ee0:	sub	ecx, 0x30
0x1ee3:	xor	eax, eax
0x1ee5:	cmp	cl, 9
0x1ee8:	ja	0x1ec0




0x1983:	call	0x18d0


0x1977:	mov	rdi, qword ptr [rip + 0x20568a]
0x197e:	call	0x16e0


0x1944:	pop	rbp
0x1945:	jmp	rax


0x18f3:	pop	rbp
0x18f4:	jmp	rax


0x4e91:	push	r12
0x4e93:	push	rbp
0x4e94:	mov	r12d, edx
0x4e97:	push	rbx
0x4e98:	mov	rbp, rsi
0x4e9b:	mov	rbx, rdi
0x4e9e:	call	0x15a0










0x1580:	jmp	qword ptr [rip + 0x2059a2]


0x4546:	test	rdx, rdx
0x4549:	je	0x451a




0x4361:	call	0x3e00


0x4385:	mov	dword ptr [rsp + 8], r10d
0x438a:	jmp	0x4361


0x4330:	cmp	r10d, 0x2f
0x4334:	ja	0x438c


0x4260:	mov	eax, dword ptr [r10]
0x4263:	cmp	eax, 0x2f
0x4266:	ja	0x42aa






0x3964:	pop	rbx
0x3965:	mov	dword ptr [rip + 0x2036e9], 1
0x396f:	pop	rbp
0x3970:	pop	r12
0x3972:	ret	


0x3955:	mov	rdi, r12
0x3958:	call	0x1400










0x1640:	jmp	qword ptr [rip + 0x205942]


0x14d0:	jmp	qword ptr [rip + 0x2059fa]


0x1eb3:	add	rdi, 1
0x1eb7:	movzx	ecx, byte ptr [rdi]
0x1eba:	test	cl, cl
0x1ebc:	jne	0x1ea0


0x1e9b:	jmp	0x1ee0


0x1eea:	mov	edx, 0xa
0x1eef:	mov	rsi, rsp
0x1ef2:	mov	qword ptr [rsp], 0
0x1efa:	call	0x1650


0x1ec0:	mov	rdx, qword ptr [rsp + 8]
0x1ec5:	xor	rdx, qword ptr fs:[0x28]
0x1ece:	jne	0x1f6c


0x16e0:	jmp	qword ptr [rip + 0x205912]




0x451a:	mov	qword ptr [rsi], rcx
0x451d:	imul	rcx, r9
0x4521:	mov	rsi, rcx
0x4524:	jmp	0x4480






0x1ea0:	movsx	eax, cl
0x1ea3:	cmp	eax, 0x20
0x1ea6:	ja	0x1ee0


0x1650:	jmp	qword ptr [rip + 0x20593a]


0x1ea8:	mov	rax, rsi
0x1eab:	shl	rax, cl
0x1eae:	test	rax, rdx
0x1eb1:	je	0x1ee0




0x1988:	mov	byte ptr [rip + 0x205739], 1
0x198f:	pop	rbp
0x1990:	ret	


0x4f01:	test	rbp, rbp
0x4f04:	je	0x4f26


0x4f26:	add	rsp, 8
0x4f2a:	pop	rbx
0x4f2b:	pop	rbp
0x4f2c:	pop	r12
0x4f2e:	pop	r13
0x4f30:	pop	r14
0x4f32:	pop	r15
0x4f34:	ret	


0x4f06:	xor	ebx, ebx
0x4f08:	nop	dword ptr [rax + rax]
0x4f10:	mov	rdx, r15
0x4f13:	mov	rsi, r14
0x4f16:	mov	edi, r13d
0x4f19:	call	qword ptr [r12 + rbx*8]


0x1eff:	mov	rdx, qword ptr [rsp]
0x1f03:	test	rdx, rdx
0x1f06:	je	0x1ebe


0x1f08:	movzx	ecx, byte ptr [rdx]
0x1f0b:	test	cl, cl
0x1f0d:	je	0x1ec0


0x1f0f:	movsx	esi, cl
0x1f12:	cmp	esi, 0x20
0x1f15:	ja	0x1f5e


0x1f17:	movabs	rdi, 0x100003e00
0x1f21:	bt	rdi, rcx
0x1f25:	jae	0x1f5e


0x1f5e:	cmp	cl, 0x2c
0x1f61:	jne	0x1ebe


0x1f27:	add	rdx, 1
0x1f2b:	mov	r8d, 1
0x1f31:	jmp	0x1f47


0x1f67:	jmp	0x1ec0


0x1f47:	mov	qword ptr [rsp], rdx
0x1f4b:	movzx	ecx, byte ptr [rdx]
0x1f4e:	test	cl, cl
0x1f50:	je	0x1ec0


0x1f56:	movsx	esi, cl
0x1f59:	cmp	esi, 0x20
0x1f5c:	jbe	0x1f38


0x1f38:	mov	rsi, r8
0x1f3b:	add	rdx, 1
0x1f3f:	shl	rsi, cl
0x1f42:	test	rsi, rdi
0x1f45:	je	0x1f5e


0x1f9e:	cmp	rax, 1
0x1fa2:	je	0x2068


0x2068:	call	0x1df0


0x1fa8:	test	rax, rax
0x1fab:	mov	edx, 1
0x1fb0:	cmovle	rax, rdx
0x1fb4:	add	rsp, 8
0x1fb8:	pop	rbx
0x1fb9:	pop	rbp
0x1fba:	ret	


0x460f:	test	rax, rax
0x4612:	je	0x4619


0x4614:	add	rsp, 8
0x4618:	ret	


0x1fcc:	test	rax, rax
0x1fcf:	je	0x2028


0x2028:	lea	rdi, [rip + 0x32d4]
0x202f:	call	0x13f0


0x1fd1:	mov	rdi, rax
0x1fd4:	mov	rbp, -1
0x1fdb:	call	0x1e60


0x1fe0:	lea	rdi, [rip + 0x331c]
0x1fe7:	mov	rbx, rax
0x1fea:	call	0x13f0


0x1fef:	test	rax, rax
0x1ff2:	je	0x200d


0x200d:	test	rbx, rbx
0x2010:	je	0x2049


0x1ff4:	mov	rdi, rax
0x1ff7:	call	0x1e60


0x2049:	call	0x1df0


0x2012:	cmp	rbp, rbx
0x2015:	mov	rax, rbx
0x2018:	cmovbe	rax, rbp
0x201c:	add	rsp, 8
0x2020:	pop	rbx
0x2021:	pop	rbp
0x2022:	ret	


0x1ffc:	mov	rbp, rax
0x1fff:	test	rax, rax
0x2002:	mov	rax, -1
0x2009:	cmove	rbp, rax
0x200d:	test	rbx, rbx
0x2010:	je	0x2049


0x2034:	test	rax, rax
0x2037:	je	0x2090


0x2039:	mov	rdi, rax
0x203c:	call	0x1e60


0x2041:	test	rax, rax
0x2044:	mov	rbp, rax
0x2047:	je	0x2090


0x20e3:	test	rax, rax
0x20e6:	je	0x213d


0x213d:	mov	qword ptr [rip + 0x204f9c], rbx
0x2144:	mov	qword ptr [rip + 0x204f55], rbx
0x214b:	pop	rbx
0x214c:	ret	


0x20e8:	lea	r8, [rax + 1]
0x20ec:	mov	rdx, r8
0x20ef:	sub	rdx, rbx
0x20f2:	cmp	rdx, 6
0x20f6:	jle	0x213d


0x20f8:	lea	rsi, [rax - 6]
0x20fc:	lea	rdi, [rip + 0x324d]
0x2103:	mov	ecx, 7
0x2108:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2108:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x210a:	seta	dl
0x210d:	sbb	dl, 0
0x2110:	test	dl, dl
0x2112:	jne	0x213d


0x2114:	lea	rdi, [rip + 0x323d]
0x211b:	mov	ecx, 3
0x2120:	mov	rsi, r8
0x2123:	mov	rbx, r8
0x2126:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2126:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2128:	seta	dl
0x212b:	sbb	dl, 0
0x212e:	test	dl, dl
0x2130:	jne	0x213d


0x2132:	lea	rbx, [rax + 4]
0x2136:	mov	qword ptr [rip + 0x204f43], rbx
0x213d:	mov	qword ptr [rip + 0x204f9c], rbx
0x2144:	mov	qword ptr [rip + 0x204f55], rbx
0x214b:	pop	rbx
0x214c:	ret	


0x216a:	call	0x1410


0x395d:	mov	qword ptr [rip + 0x2036fc], rbx
0x3964:	pop	rbx
0x3965:	mov	dword ptr [rip + 0x2036e9], 1
0x396f:	pop	rbp
0x3970:	pop	r12
0x3972:	ret	


0x3937:	mov	qword ptr [rip + 0x20372e], 0x100
0x3942:	mov	qword ptr [rip + 0x20372f], rbx
0x3949:	lea	rbx, [rip + 0x203720]
0x3950:	cmp	r12, rbx
0x3953:	je	0x3964


0x44ad:	xor	eax, eax
0x44af:	pop	rbx
0x44b0:	ret	


0x391c:	cmp	rbx, rbp
0x391f:	jne	0x3910


0x3910:	mov	rdi, qword ptr [rbx]
0x3913:	add	rbx, 0x10
0x3917:	call	0x1400


0x3e3c:	lea	rsi, [rip + 0x19f8]
0x3e43:	xor	edi, edi
0x3e45:	mov	edx, 5
0x3e4a:	call	0x14a0


0x3f51:	jmp	0x3e3c


0x4496:	test	rax, rax
0x4499:	jne	0x44a0


0x449b:	test	rbx, rbx
0x449e:	jne	0x44b1


0x44a0:	pop	rbx
0x44a1:	ret	


0x44b1:	call	0x4670


0x4e3e:	test	eax, eax
0x4e40:	je	0x4e4a


0x4e42:	test	dword ptr [rbx], 0x100
0x4e48:	jne	0x4e58


0x4e58:	mov	rdi, rbx
0x4e5b:	mov	edx, 1
0x4e60:	xor	esi, esi
0x4e62:	call	0x4e70


0x1710:	lea	rsi, [rip + 0x3889]
0x1717:	mov	edi, 6
0x171c:	call	0x1600


0x1e1d:	test	eax, eax
0x1e1f:	je	0x1e40


0x1e40:	mov	rsi, rbx
0x1e43:	mov	edi, 0x80
0x1e48:	call	0x1480


0x1e21:	xor	eax, eax
0x1e23:	mov	rcx, qword ptr [rsp + 0x88]
0x1e2b:	xor	rcx, qword ptr fs:[0x28]
0x1e34:	jne	0x1e56


0x1480:	jmp	qword ptr [rip + 0x205a22]


0x1e36:	add	rsp, 0x90
0x1e3d:	pop	rbx
0x1e3e:	ret	


0x1e56:	call	0x14d0




0x204e:	test	rax, rax
0x2051:	je	0x20a1


0x20a1:	mov	edi, 0x54
0x20a6:	call	0x1640


0x2053:	cmp	rax, rbp
0x2056:	cmova	rax, rbp
0x205a:	add	rsp, 8
0x205e:	pop	rbx
0x205f:	pop	rbp
0x2060:	ret	


0x20ab:	mov	rdx, rax
0x20ae:	mov	eax, 1
0x20b3:	test	rdx, rdx
0x20b6:	jle	0x1fb4


0x1fb4:	add	rsp, 8
0x1fb8:	pop	rbx
0x1fb9:	pop	rbp
0x1fba:	ret	


0x20bc:	cmp	rdx, rbp
0x20bf:	mov	rax, rbp
0x20c2:	cmovbe	rax, rdx
0x20c6:	jmp	0x1fb4


0x206d:	mov	rdx, rax
0x2070:	mov	eax, 1
0x2075:	test	rdx, rdx
0x2078:	je	0x1fb4


0x207e:	mov	rax, rdx
0x2081:	jmp	0x1fa8


0x2095:	test	rax, rax
0x2098:	mov	rbp, -1
0x209f:	jne	0x2053


0x22d1:	cmp	r15d, 0xa
0x22d5:	mov	qword ptr [rsp + 0x58], rax
0x22da:	ja	0x348f


0x22e0:	lea	rcx, [rip + 0x30d9]
0x22e7:	mov	edx, r15d
0x22ea:	movsxd	rax, dword ptr [rcx + rdx*4]
0x22ee:	add	rax, rcx
0x22f1:	jmp	rax


0x348f:	call	0x1410


0x4828:	mov	dword ptr [rax], 0
0x482e:	mov	r12, rax
0x4831:	movzx	ebx, byte ptr [rbp]
0x4835:	call	0x16d0


0x16d0:	jmp	qword ptr [rip + 0x2058fa]




0x34c1:	mov	r13, rax
0x34c4:	mov	eax, dword ptr [rax]
0x34c6:	test	r15d, r15d
0x34c9:	mov	rbx, qword ptr [rip + 0x203b90]
0x34d0:	mov	dword ptr [rsp + 0x18], eax
0x34d4:	js	0x3641


0x3641:	call	0x1410


0x34da:	cmp	dword ptr [rip + 0x203b77], r15d
0x34e1:	jg	0x3545


0x34e3:	cmp	r15d, 0x7fffffff
0x34ea:	je	0x3646


0x3545:	mov	eax, dword ptr [rbp + 4]
0x3548:	shl	r15, 4
0x354c:	sub	rsp, 8
0x3550:	add	rbx, r15
0x3553:	lea	r15, [rbp + 8]
0x3557:	mov	r8d, dword ptr [rbp]
0x355b:	mov	r11, qword ptr [rbx]
0x355e:	mov	r12, qword ptr [rbx + 8]
0x3562:	mov	rcx, r14
0x3565:	or	eax, 1
0x3568:	mov	dword ptr [rsp + 0x24], eax
0x356c:	push	qword ptr [rbp + 0x30]
0x356f:	mov	r9d, eax
0x3572:	push	qword ptr [rbp + 0x28]
0x3575:	push	r15
0x3577:	mov	rsi, r11
0x357a:	mov	rdx, qword ptr [rsp + 0x28]
0x357f:	mov	rdi, r12
0x3582:	mov	qword ptr [rsp + 0x30], r11
0x3587:	call	0x2260


0x3646:	call	0x4670


0x34f0:	lea	r12d, [r15 + 1]
0x34f4:	lea	rax, [rip + 0x203b75]
0x34fb:	movsxd	rsi, r12d
0x34fe:	shl	rsi, 4
0x3502:	cmp	rbx, rax
0x3505:	je	0x3620


0x3620:	xor	edi, edi
0x3622:	call	0x4480


0x350b:	mov	rdi, rbx
0x350e:	call	0x4480


0x3513:	mov	rbx, rax
0x3516:	mov	qword ptr [rip + 0x203b43], rax
0x351d:	movsxd	rdi, dword ptr [rip + 0x203b34]
0x3524:	mov	edx, r12d
0x3527:	xor	esi, esi
0x3529:	sub	edx, edi
0x352b:	shl	rdi, 4
0x352f:	movsxd	rdx, edx
0x3532:	add	rdi, rbx
0x3535:	shl	rdx, 4
0x3539:	call	0x1550


0x1550:	jmp	qword ptr [rip + 0x2059ba]




0x3627:	movdqa	xmm0, xmmword ptr [rip + 0x203a41]
0x362f:	mov	rbx, rax
0x3632:	mov	qword ptr [rip + 0x203a27], rax
0x3639:	movups	xmmword ptr [rax], xmm0
0x363c:	jmp	0x351d


0x351d:	movsxd	rdi, dword ptr [rip + 0x203b34]
0x3524:	mov	edx, r12d
0x3527:	xor	esi, esi
0x3529:	sub	edx, edi
0x352b:	shl	rdi, 4
0x352f:	movsxd	rdx, edx
0x3532:	add	rdi, rbx
0x3535:	shl	rdx, 4
0x3539:	call	0x1550


0x365c:	mov	r12d, dword ptr [rax]
0x365f:	mov	rbp, rax
0x3662:	lea	rax, [rip + 0x203b97]
0x3669:	test	rbx, rbx
0x366c:	mov	esi, 0x38
0x3671:	cmove	rbx, rax
0x3675:	mov	rdi, rbx
0x3678:	call	0x4620


0x3792:	mov	r12d, dword ptr [rax]
0x3795:	mov	rbp, rax
0x3798:	lea	rax, [rbx + 8]
0x379c:	sub	rsp, 8
0x37a0:	mov	r9d, dword ptr [rbx + 4]
0x37a4:	push	qword ptr [rbx + 0x30]
0x37a7:	mov	r8d, dword ptr [rbx]
0x37aa:	push	qword ptr [rbx + 0x28]
0x37ad:	mov	rdx, r15
0x37b0:	push	rax
0x37b1:	mov	rcx, qword ptr [rsp + 0x28]
0x37b6:	mov	rsi, r14
0x37b9:	mov	rdi, r13
0x37bc:	call	0x2260


0x380f:	test	r12, r12
0x3812:	mov	r13, rax
0x3815:	mov	eax, dword ptr [rax]
0x3817:	sete	bpl
0x381b:	or	ebp, dword ptr [rbx + 4]
0x381e:	lea	r10, [rbx + 8]
0x3822:	sub	rsp, 8
0x3826:	mov	r8d, dword ptr [rbx]
0x3829:	mov	rcx, r15
0x382c:	mov	dword ptr [rsp + 0x14], eax
0x3830:	push	qword ptr [rbx + 0x30]
0x3833:	mov	rdx, r14
0x3836:	push	qword ptr [rbx + 0x28]
0x3839:	push	r10
0x383b:	xor	esi, esi
0x383d:	mov	r9d, ebp
0x3840:	xor	edi, edi
0x3842:	mov	qword ptr [rsp + 0x40], r10
0x3847:	call	0x2260


0x4429:	test	rax, rax
0x442c:	jne	0x4433


0x442e:	test	rbx, rbx
0x4431:	jne	0x4435


0x4433:	pop	rbx
0x4434:	ret	


0x4435:	call	0x4670


0x45d9:	mov	rdx, rbx
0x45dc:	xor	esi, esi
0x45de:	mov	rdi, rax
0x45e1:	pop	rbx
0x45e2:	jmp	0x1550


0x4634:	add	rsp, 8
0x4638:	mov	rdx, rbx
0x463b:	mov	rsi, rbp
0x463e:	pop	rbx
0x463f:	pop	rbp
0x4640:	mov	rdi, rax
0x4643:	jmp	0x1590


0x1590:	jmp	qword ptr [rip + 0x20599a]




0x4659:	mov	rdi, rbx
0x465c:	lea	rsi, [rax + 1]
0x4660:	pop	rbx
0x4661:	jmp	0x4620


0x3e4f:	lea	rdx, [rip + 0x1d0a]
0x3e56:	mov	rcx, rax
0x3e59:	mov	r8d, 0x7e3
0x3e5f:	mov	esi, 1
0x3e64:	mov	rdi, rbp
0x3e67:	xor	eax, eax
0x3e69:	call	0x1690


0x3e6e:	lea	rsi, [rip + 0x1a53]
0x3e75:	xor	edi, edi
0x3e77:	mov	edx, 5
0x3e7c:	call	0x14a0


0x3e81:	mov	rsi, rbp
0x3e84:	mov	rdi, rax
0x3e87:	call	0x1570


0x1570:	jmp	qword ptr [rip + 0x2059aa]




0x19ed:	mov	rdi, qword ptr [rip + 0x2056cc]
0x19f4:	mov	rdx, rax
0x19f7:	mov	rcx, rbx
0x19fa:	mov	esi, 1
0x19ff:	xor	eax, eax
0x1a01:	call	0x1690


0x1a06:	mov	edi, ebp
0x1a08:	call	0x1670


0x1670:	jmp	qword ptr [rip + 0x20592a]




0x1a1b:	mov	rdx, rbx
0x1a1e:	mov	rsi, rax
0x1a21:	mov	edi, 1
0x1a26:	xor	eax, eax
0x1a28:	call	0x1610


0x1610:	jmp	qword ptr [rip + 0x20595a]




0x43b4:	lea	rdx, [rip + 0x14dc]
0x43bb:	mov	rsi, rax
0x43be:	mov	edi, 1
0x43c3:	xor	eax, eax
0x43c5:	call	0x1610


0x4687:	mov	edi, dword ptr [rip + 0x20298b]
0x468d:	lea	rdx, [rip + 0xc5c]
0x4694:	mov	rcx, rax
0x4697:	xor	esi, esi
0x4699:	xor	eax, eax
0x469b:	call	0x1620


0x1620:	jmp	qword ptr [rip + 0x205952]




0x4c37:	cmp	rax, -3
0x4c3b:	mov	rbp, rax
0x4c3e:	jbe	0x4c60


0x4c60:	mov	rdx, qword ptr [rsp + 8]
0x4c65:	xor	rdx, qword ptr fs:[0x28]
0x4c6e:	mov	rax, rbp
0x4c71:	jne	0x4c7e


0x4c40:	test	r12, r12
0x4c43:	je	0x4c60


0x4c73:	add	rsp, 0x18
0x4c77:	pop	rbx
0x4c78:	pop	rbp
0x4c79:	pop	r12
0x4c7b:	pop	r13
0x4c7d:	ret	


0x4c7e:	call	0x14d0


0x4c45:	xor	edi, edi
0x4c47:	call	0x4d10


0x4c9c:	mov	ebx, dword ptr [rbp]
0x4c9f:	mov	rdi, rbp
0x4ca2:	mov	r12, rax
0x4ca5:	call	0x4db0


0x1721:	lea	rsi, [rip + 0x391c]
0x1728:	lea	rdi, [rip + 0x38ec]
0x172f:	call	0x1490


0x1490:	jmp	qword ptr [rip + 0x205a1a]




0x4d1b:	mov	rdx, rax
0x4d1e:	mov	eax, 1
0x4d23:	test	rdx, rdx
0x4d26:	je	0x4d45


0x4d45:	add	rsp, 8
0x4d49:	ret	


0x4d28:	lea	rdi, [rip + 0xf9c]
0x4d2f:	mov	ecx, 2
0x4d34:	mov	rsi, rdx
0x4d37:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x4d37:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x4d39:	seta	cl
0x4d3c:	sbb	cl, 0
0x4d3f:	xor	eax, eax
0x4d41:	test	cl, cl
0x4d43:	jne	0x4d50


0x4d50:	lea	rdi, [rip + 0xf76]
0x4d57:	mov	ecx, 6
0x4d5c:	mov	rsi, rdx
0x4d5f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x4d5f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x4d61:	seta	al
0x4d64:	sbb	al, 0
0x4d66:	test	al, al
0x4d68:	setne	al
0x4d6b:	add	rsp, 8
0x4d6f:	ret	


0x4c4c:	test	al, al
0x4c4e:	jne	0x4c60


0x4c50:	movzx	eax, byte ptr [r13]
0x4c55:	mov	ebp, 1
0x4c5a:	mov	dword ptr [rbx], eax
0x4c5c:	nop	dword ptr [rax]
0x4c60:	mov	rdx, qword ptr [rsp + 8]
0x4c65:	xor	rdx, qword ptr fs:[0x28]
0x4c6e:	mov	rax, rbp
0x4c71:	jne	0x4c7e


0x4d7e:	test	rax, rax
0x4d81:	je	0x4da0


0x4da0:	lea	rax, [rip + 0xf2c]
0x4da7:	add	rsp, 8
0x4dab:	ret	


0x4d83:	cmp	byte ptr [rax], 0
0x4d86:	lea	rdx, [rip + 0xf46]
0x4d8d:	cmove	rax, rdx
0x4d91:	add	rsp, 8
0x4d95:	ret	


0x2180:	movzx	edx, byte ptr [rax]
0x2183:	and	edx, 0xffffffdf
0x2186:	cmp	dl, 0x55
0x2189:	je	0x2200


0x2200:	movzx	edx, byte ptr [rax + 1]
0x2204:	and	edx, 0xffffffdf
0x2207:	cmp	dl, 0x54
0x220a:	jne	0x2190


0x218b:	cmp	dl, 0x47
0x218e:	je	0x21b0


0x220c:	movzx	edx, byte ptr [rax + 2]
0x2210:	and	edx, 0xffffffdf
0x2213:	cmp	dl, 0x46
0x2216:	jne	0x2190


0x2190:	lea	rax, [rip + 0x31d4]
0x2197:	lea	rdx, [rip + 0x31cf]
0x219e:	cmp	ebx, 9
0x21a1:	cmovne	rax, rdx
0x21a5:	add	rsp, 8
0x21a9:	pop	rbx
0x21aa:	pop	rbp
0x21ab:	ret	


0x21b0:	movzx	edx, byte ptr [rax + 1]
0x21b4:	and	edx, 0xffffffdf
0x21b7:	cmp	dl, 0x42
0x21ba:	jne	0x2190


0x221c:	cmp	byte ptr [rax + 3], 0x2d
0x2220:	jne	0x2190


0x21bc:	cmp	byte ptr [rax + 2], 0x31
0x21c0:	jne	0x2190


0x2226:	cmp	byte ptr [rax + 4], 0x38
0x222a:	jne	0x2190


0x21c2:	cmp	byte ptr [rax + 3], 0x38
0x21c6:	jne	0x2190


0x2230:	cmp	byte ptr [rax + 5], 0
0x2234:	jne	0x2190


0x21c8:	cmp	byte ptr [rax + 4], 0x30
0x21cc:	jne	0x2190


0x223a:	cmp	byte ptr [rbp], 0x60
0x223e:	lea	rax, [rip + 0x3117]
0x2245:	lea	rdx, [rip + 0x3114]
0x224c:	cmovne	rax, rdx
0x2250:	add	rsp, 8
0x2254:	pop	rbx
0x2255:	pop	rbp
0x2256:	ret	


0x21ce:	cmp	byte ptr [rax + 5], 0x33
0x21d2:	jne	0x2190


0x21d4:	cmp	byte ptr [rax + 6], 0x30
0x21d8:	jne	0x2190


0x21da:	cmp	byte ptr [rax + 7], 0
0x21de:	jne	0x2190


0x21e0:	cmp	byte ptr [rbp], 0x60
0x21e4:	lea	rax, [rip + 0x3179]
0x21eb:	lea	rdx, [rip + 0x3176]
0x21f2:	cmovne	rax, rdx
0x21f6:	add	rsp, 8
0x21fa:	pop	rbx
0x21fb:	pop	rbp
0x21fc:	ret	


0x4ea3:	mov	edx, r12d
0x4ea6:	mov	rsi, rbp
0x4ea9:	mov	edi, eax
0x4eab:	call	0x1520


0x1520:	jmp	qword ptr [rip + 0x2059d2]




0x4dbc:	test	eax, eax
0x4dbe:	mov	rdi, rbx
0x4dc1:	js	0x4e17


0x4e17:	pop	rbx
0x4e18:	pop	rbp
0x4e19:	pop	r12
0x4e1b:	jmp	0x1470


0x4dc3:	call	0x15e0


0x1470:	jmp	qword ptr [rip + 0x205a2a]




0x4dc8:	test	eax, eax
0x4dca:	jne	0x4df8


0x4dcc:	mov	rdi, rbx
0x4dcf:	call	0x4e30


0x4df8:	mov	rdi, rbx
0x4dfb:	call	0x15a0


0x4e00:	xor	esi, esi
0x4e02:	mov	edx, 1
0x4e07:	mov	edi, eax
0x4e09:	call	0x1520


0x4e0e:	cmp	rax, -1
0x4e12:	jne	0x4dcc


0x4e14:	mov	rdi, rbx
0x4e17:	pop	rbx
0x4e18:	pop	rbp
0x4e19:	pop	r12
0x4e1b:	jmp	0x1470


0x4eb0:	cmp	rax, -1
0x4eb4:	je	0x4ec2


0x4ec2:	pop	rbx
0x4ec3:	pop	rbp
0x4ec4:	pop	r12
0x4ec6:	ret	


0x4eb6:	and	dword ptr [rbx], 0xffffffef
0x4eb9:	mov	qword ptr [rbx + 0x90], rax
0x4ec0:	xor	eax, eax
0x4ec2:	pop	rbx
0x4ec3:	pop	rbp
0x4ec4:	pop	r12
0x4ec6:	ret	


0x1734:	lea	rdi, [rip + 0x38e0]
0x173b:	call	0x1460


0x1460:	jmp	qword ptr [rip + 0x205a32]




0x46a0:	call	0x1410


0x43ca:	lea	rsi, [rip + 0x14dc]
0x43d1:	mov	edx, 5
0x43d6:	xor	edi, edi
0x43d8:	call	0x14a0


0x43dd:	lea	rcx, [rip + 0xe54]
0x43e4:	lea	rdx, [rip + 0xc2c]
0x43eb:	mov	rsi, rax
0x43ee:	mov	edi, 1
0x43f3:	xor	eax, eax
0x43f5:	call	0x1610


0x43fa:	mov	rbx, qword ptr [rip + 0x202c87]
0x4401:	lea	rsi, [rip + 0x16d8]
0x4408:	xor	edi, edi
0x440a:	mov	edx, 5
0x440f:	call	0x14a0


0x4414:	mov	rsi, rbx
0x4417:	mov	rdi, rax
0x441a:	pop	rbx
0x441b:	jmp	0x1570


0x1a2d:	mov	rbx, qword ptr [rip + 0x205654]
0x1a34:	lea	rsi, [rip + 0x369d]
0x1a3b:	mov	edx, 5
0x1a40:	xor	edi, edi
0x1a42:	call	0x14a0


0x1a47:	mov	rsi, rbx
0x1a4a:	mov	rdi, rax
0x1a4d:	call	0x1570


0x1a52:	mov	rbx, qword ptr [rip + 0x20562f]
0x1a59:	lea	rsi, [rip + 0x36f8]
0x1a60:	mov	edx, 5
0x1a65:	xor	edi, edi
0x1a67:	call	0x14a0


0x1a6c:	mov	rsi, rbx
0x1a6f:	mov	rdi, rax
0x1a72:	call	0x1570


0x1a77:	mov	rbx, qword ptr [rip + 0x20560a]
0x1a7e:	lea	rsi, [rip + 0x374b]
0x1a85:	mov	edx, 5
0x1a8a:	xor	edi, edi
0x1a8c:	call	0x14a0


0x1a91:	mov	rsi, rbx
0x1a94:	mov	rdi, rax
0x1a97:	call	0x1570


0x1a9c:	mov	rbx, qword ptr [rip + 0x2055e5]
0x1aa3:	lea	rsi, [rip + 0x3756]
0x1aaa:	mov	edx, 5
0x1aaf:	xor	edi, edi
0x1ab1:	call	0x14a0


0x1ab6:	mov	rsi, rbx
0x1ab9:	mov	rdi, rax
0x1abc:	lea	rbx, [rip + 0x34c1]
0x1ac3:	call	0x1570


0x1ac8:	lea	rax, [rip + 0x34d2]
0x1acf:	lea	rcx, [rip + 0x350c]
0x1ad6:	mov	qword ptr [rsp + 0x60], 0
0x1adf:	mov	qword ptr [rsp + 0x68], 0
0x1ae8:	mov	rdx, rsp
0x1aeb:	mov	qword ptr [rsp], rax
0x1aef:	lea	rax, [rip + 0x34ad]
0x1af6:	mov	qword ptr [rsp + 0x30], rcx
0x1afb:	lea	rcx, [rip + 0x34ea]
0x1b02:	mov	qword ptr [rsp + 8], rax
0x1b07:	lea	rax, [rip + 0x350d]
0x1b0e:	mov	qword ptr [rsp + 0x40], rcx
0x1b13:	lea	rcx, [rip + 0x34dc]
0x1b1a:	mov	qword ptr [rsp + 0x10], rax
0x1b1f:	lea	rax, [rip + 0x348d]
0x1b26:	mov	qword ptr [rsp + 0x50], rcx
0x1b2b:	mov	qword ptr [rsp + 0x18], rax
0x1b30:	lea	rax, [rip + 0x3492]
0x1b37:	mov	qword ptr [rsp + 0x20], rax
0x1b3c:	lea	rax, [rip + 0x3490]
0x1b43:	mov	qword ptr [rsp + 0x28], rax
0x1b48:	mov	qword ptr [rsp + 0x38], rax
0x1b4d:	mov	qword ptr [rsp + 0x48], rax
0x1b52:	mov	qword ptr [rsp + 0x58], rax
0x1b57:	nop	word ptr [rax + rax]
0x1b60:	add	rdx, 0x10
0x1b64:	mov	rdi, qword ptr [rdx]
0x1b67:	test	rdi, rdi
0x1b6a:	je	0x1b7f


0x1b7f:	mov	r12, qword ptr [rdx + 8]
0x1b83:	xor	edi, edi
0x1b85:	mov	edx, 5
0x1b8a:	lea	rsi, [rip + 0x346f]
0x1b91:	test	r12, r12
0x1b94:	je	0x1c5b


0x1b6c:	mov	ecx, 6
0x1b71:	mov	rsi, rbx
0x1b74:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1c5b:	call	0x14a0


0x1b9a:	call	0x14a0


0x1b74:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1b76:	seta	al
0x1b79:	sbb	al, 0
0x1b7b:	test	al, al
0x1b7d:	jne	0x1b60


0x1b60:	add	rdx, 0x10
0x1b64:	mov	rdi, qword ptr [rdx]
0x1b67:	test	rdi, rdi
0x1b6a:	je	0x1b7f


0x1b9f:	lea	rcx, [rip + 0x3692]
0x1ba6:	lea	rdx, [rip + 0x346a]
0x1bad:	mov	rsi, rax
0x1bb0:	mov	edi, 1
0x1bb5:	xor	eax, eax
0x1bb7:	call	0x1610


0x1bbc:	xor	esi, esi
0x1bbe:	mov	edi, 5
0x1bc3:	call	0x1600


0x1bc8:	test	rax, rax
0x1bcb:	je	0x1be9


0x1be9:	lea	rsi, [rip + 0x3439]
0x1bf0:	xor	edi, edi
0x1bf2:	mov	edx, 5
0x1bf7:	call	0x14a0


0x1bcd:	lea	rsi, [rip + 0x3451]
0x1bd4:	mov	edx, 3
0x1bd9:	mov	rdi, rax
0x1bdc:	call	0x1430


0x1430:	jmp	qword ptr [rip + 0x205a4a]




0x1bfc:	lea	rcx, [rip + 0x3381]
0x1c03:	lea	rdx, [rip + 0x362e]
0x1c0a:	mov	rsi, rax
0x1c0d:	mov	edi, 1
0x1c12:	xor	eax, eax
0x1c14:	call	0x1610


0x1c19:	cmp	r12, rbx
0x1c1c:	lea	rcx, [rip + 0x339a]
0x1c23:	lea	rbx, [rip + 0x3376]
0x1c2a:	cmove	rbx, rcx
0x1c2e:	lea	rsi, [rip + 0x3673]
0x1c35:	xor	edi, edi
0x1c37:	mov	edx, 5
0x1c3c:	call	0x14a0


0x1c41:	mov	rcx, rbx
0x1c44:	mov	rsi, rax
0x1c47:	mov	rdx, r12
0x1c4a:	mov	edi, 1
0x1c4f:	xor	eax, eax
0x1c51:	call	0x1610


0x1c56:	jmp	0x1a06


0x1c60:	lea	rcx, [rip + 0x35d1]
0x1c67:	lea	rdx, [rip + 0x33a9]
0x1c6e:	mov	rsi, rax
0x1c71:	mov	edi, 1
0x1c76:	xor	eax, eax
0x1c78:	call	0x1610


0x1c7d:	xor	esi, esi
0x1c7f:	mov	edi, 5
0x1c84:	call	0x1600


0x1c89:	test	rax, rax
0x1c8c:	je	0x1ca6


0x1ca6:	lea	rsi, [rip + 0x337c]
0x1cad:	mov	edx, 5
0x1cb2:	xor	edi, edi
0x1cb4:	lea	r12, [rip + 0x32c9]
0x1cbb:	lea	rbx, [rip + 0x32fb]
0x1cc2:	call	0x14a0


0x1c8e:	lea	rsi, [rip + 0x3390]
0x1c95:	mov	edx, 3
0x1c9a:	mov	rdi, rax
0x1c9d:	call	0x1430


0x1cc7:	lea	rcx, [rip + 0x32b6]
0x1cce:	lea	rdx, [rip + 0x3563]
0x1cd5:	mov	rsi, rax
0x1cd8:	mov	edi, 1
0x1cdd:	xor	eax, eax
0x1cdf:	call	0x1610


0x1ce4:	jmp	0x1c2e


0x1c2e:	lea	rsi, [rip + 0x3673]
0x1c35:	xor	edi, edi
0x1c37:	mov	edx, 5
0x1c3c:	call	0x14a0


0x3e8c:	cmp	r12, 9
0x3e90:	ja	0x41d0


0x3e96:	lea	rdx, [rip + 0x1c87]
0x3e9d:	movsxd	rax, dword ptr [rdx + r12*4]
0x3ea1:	add	rax, rdx
0x3ea4:	jmp	rax


0x41d0:	mov	r10, qword ptr [rbx + 0x40]
0x41d4:	mov	r9, qword ptr [rbx + 0x38]
0x41d8:	mov	edx, 5
0x41dd:	mov	rax, qword ptr [rbx + 0x10]
0x41e1:	mov	r8, qword ptr [rbx + 8]
0x41e5:	lea	rsi, [rip + 0x18b4]
0x41ec:	mov	r13, qword ptr [rbx + 0x30]
0x41f0:	mov	r12, qword ptr [rbx + 0x28]
0x41f4:	mov	r15, qword ptr [rbx + 0x20]
0x41f8:	mov	r14, qword ptr [rbx + 0x18]
0x41fc:	mov	qword ptr [rsp + 0x18], r10
0x4201:	mov	qword ptr [rsp + 0x10], r9
0x4206:	mov	qword ptr [rsp], rax
0x420a:	mov	qword ptr [rsp + 8], r8
0x420f:	mov	rbx, qword ptr [rbx]
0x4212:	jmp	0x3fa2


0x3fa2:	xor	edi, edi
0x3fa4:	call	0x14a0


0x3fa9:	mov	r10, qword ptr [rsp + 0x18]
0x3fae:	push	r10
0x3fb0:	jmp	0x3ef4


0x3ef4:	mov	r9, qword ptr [rsp + 0x18]
0x3ef9:	mov	rdx, rax
0x3efc:	mov	rcx, rbx
0x3eff:	mov	esi, 1
0x3f04:	mov	rdi, rbp
0x3f07:	xor	eax, eax
0x3f09:	push	r9
0x3f0b:	push	r13
0x3f0d:	push	r12
0x3f0f:	push	r15
0x3f11:	push	r14
0x3f13:	mov	r9, qword ptr [rsp + 0x30]
0x3f18:	mov	r8, qword ptr [rsp + 0x38]
0x3f1d:	call	0x1690


0x3f22:	add	rsp, 0x30
0x3f26:	add	rsp, 0x28
0x3f2a:	pop	rbx
0x3f2b:	pop	rbp
0x3f2c:	pop	r12
0x3f2e:	pop	r13
0x3f30:	pop	r14
0x3f32:	pop	r15
0x3f34:	ret	


0x367d:	mov	dword ptr [rbp], r12d
0x3681:	pop	rbx
0x3682:	pop	rbp
0x3683:	pop	r12
0x3685:	ret	


0x353e:	mov	dword ptr [rip + 0x203b13], r12d
0x3545:	mov	eax, dword ptr [rbp + 4]
0x3548:	shl	r15, 4
0x354c:	sub	rsp, 8
0x3550:	add	rbx, r15
0x3553:	lea	r15, [rbp + 8]
0x3557:	mov	r8d, dword ptr [rbp]
0x355b:	mov	r11, qword ptr [rbx]
0x355e:	mov	r12, qword ptr [rbx + 8]
0x3562:	mov	rcx, r14
0x3565:	or	eax, 1
0x3568:	mov	dword ptr [rsp + 0x24], eax
0x356c:	push	qword ptr [rbp + 0x30]
0x356f:	mov	r9d, eax
0x3572:	push	qword ptr [rbp + 0x28]
0x3575:	push	r15
0x3577:	mov	rsi, r11
0x357a:	mov	rdx, qword ptr [rsp + 0x28]
0x357f:	mov	rdi, r12
0x3582:	mov	qword ptr [rsp + 0x30], r11
0x3587:	call	0x2260


0x483a:	mov	edx, dword ptr [rsp + 8]
0x483e:	mov	rsi, qword ptr [rax]
0x4841:	mov	rax, rbp
0x4844:	jmp	0x4857


0x4857:	movzx	ecx, bl
0x485a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x485f:	jne	0x4850


0x4861:	cmp	bl, 0x2d
0x4864:	je	0x48b8


0x4850:	add	rax, 1
0x4854:	movzx	ebx, byte ptr [rax]
0x4857:	movzx	ecx, bl
0x485a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x485f:	jne	0x4850


0x48b8:	mov	ebp, 4
0x48bd:	mov	rdi, qword ptr [rsp + 0x18]
0x48c2:	xor	rdi, qword ptr fs:[0x28]
0x48cb:	mov	eax, ebp
0x48cd:	jne	0x4b60


0x4866:	xor	ecx, ecx
0x4868:	mov	rsi, r15
0x486b:	mov	rdi, rbp
0x486e:	call	0x1540


0x48d3:	add	rsp, 0x28
0x48d7:	pop	rbx
0x48d8:	pop	rbp
0x48d9:	pop	r12
0x48db:	pop	r13
0x48dd:	pop	r14
0x48df:	pop	r15
0x48e1:	ret	


0x4b60:	call	0x14d0


0x1540:	jmp	qword ptr [rip + 0x2059c2]




0x1e4d:	cdqe	
0x1e4f:	test	rax, rax
0x1e52:	je	0x1e21


0x1e54:	jmp	0x1e23


0x1e23:	mov	rcx, qword ptr [rsp + 0x88]
0x1e2b:	xor	rcx, qword ptr fs:[0x28]
0x1e34:	jne	0x1e56


0x4e67:	mov	rdi, rbx
0x4e6a:	pop	rbx
0x4e6b:	jmp	0x15c0


0x4366:	mov	rax, qword ptr [rsp + 0x78]
0x436b:	xor	rax, qword ptr fs:[0x28]
0x4374:	jne	0x4380


0x4376:	add	rsp, 0xb8
0x437d:	pop	rbx
0x437e:	pop	rbp
0x437f:	ret	


0x4380:	call	0x14d0


0x4290:	mov	rax, qword ptr [rsp + 0x58]
0x4295:	xor	rax, qword ptr fs:[0x28]
0x429e:	jne	0x42a5


0x42a0:	add	rsp, 0x68
0x42a4:	ret	


0x42a5:	call	0x14d0


0x46ea:	test	eax, eax
0x46ec:	jne	0x4780


0x46f2:	mov	rbp, qword ptr [rsp]
0x46f6:	cmp	rbp, r14
0x46f9:	jb	0x4700


0x4780:	mov	ebp, eax
0x4782:	call	0x1420


0x4700:	call	0x1420


0x46fb:	cmp	rbp, r15
0x46fe:	jbe	0x4754


0x4754:	mov	rdx, qword ptr [rsp + 8]
0x4759:	xor	rdx, qword ptr fs:[0x28]
0x4762:	mov	rax, rbp
0x4765:	jne	0x47ab


0x4767:	add	rsp, 0x18
0x476b:	pop	rbx
0x476c:	pop	rbp
0x476d:	pop	r12
0x476f:	pop	r13
0x4771:	pop	r14
0x4773:	pop	r15
0x4775:	ret	


0x47ab:	call	0x14d0


0x4705:	cmp	rbp, 0x40000000
0x470c:	mov	r14, rax
0x470f:	sbb	eax, eax
0x4711:	and	eax, 0xffffffd7
0x4714:	add	eax, 0x4b
0x4717:	mov	dword ptr [r14], eax
0x471a:	mov	rdi, r12
0x471d:	call	0x3de0


0x4787:	cmp	ebp, 1
0x478a:	mov	r14, rax
0x478d:	je	0x47a0


0x47a0:	mov	dword ptr [rax], 0x4b
0x47a6:	jmp	0x471a


0x478f:	cmp	ebp, 3
0x4792:	jne	0x471a


0x471a:	mov	rdi, r12
0x471d:	call	0x3de0


0x4794:	mov	dword ptr [rax], 0
0x479a:	jmp	0x471a


0x47cc:	add	rsp, 0x18
0x47d0:	ret	


0x4873:	mov	rcx, qword ptr [r15]
0x4876:	mov	rbx, rax
0x4879:	cmp	rcx, rbp
0x487c:	je	0x48a8


0x48a8:	test	r13, r13
0x48ab:	mov	qword ptr [rsp + 8], rcx
0x48b0:	jne	0x48f0


0x487e:	mov	eax, dword ptr [r12]
0x4882:	test	eax, eax
0x4884:	je	0x48e8


0x48f0:	movzx	r12d, byte ptr [rbp]
0x48f5:	test	r12b, r12b
0x48f8:	je	0x48b8


0x48e8:	xor	ebp, ebp
0x48ea:	jmp	0x4890


0x4886:	cmp	eax, 0x22
0x4889:	mov	ebp, 1
0x488e:	jne	0x48b8


0x48fa:	movsx	esi, r12b
0x48fe:	mov	rdi, r13
0x4901:	xor	ebp, ebp
0x4903:	call	0x1500


0x4890:	test	r13, r13
0x4893:	je	0x489e


0x1500:	jmp	qword ptr [rip + 0x2059e2]


0x489e:	mov	qword ptr [r14], rbx
0x48a1:	jmp	0x48bd


0x4895:	movzx	r12d, byte ptr [rcx]
0x4899:	test	r12b, r12b
0x489c:	jne	0x4917




0x48bd:	mov	rdi, qword ptr [rsp + 0x18]
0x48c2:	xor	rdi, qword ptr fs:[0x28]
0x48cb:	mov	eax, ebp
0x48cd:	jne	0x4b60


0x4917:	movsx	esi, r12b
0x491b:	mov	rdi, r13
0x491e:	mov	qword ptr [rsp + 8], rcx
0x4923:	call	0x1500


0x1ca2:	test	eax, eax
0x1ca4:	jne	0x1ce9


0x1ce9:	lea	r12, [rip + 0x3294]
0x1cf0:	mov	r13, qword ptr [rip + 0x205391]
0x1cf7:	lea	rsi, [rip + 0x3562]
0x1cfe:	xor	edi, edi
0x1d00:	mov	edx, 5
0x1d05:	call	0x14a0


0x1d0a:	mov	rsi, r13
0x1d0d:	mov	rdi, rax
0x1d10:	call	0x1570


0x1d15:	jmp	0x1be9


0x1be1:	test	eax, eax
0x1be3:	jne	0x1cf0


0x1cf0:	mov	r13, qword ptr [rip + 0x205391]
0x1cf7:	lea	rsi, [rip + 0x3562]
0x1cfe:	xor	edi, edi
0x1d00:	mov	edx, 5
0x1d05:	call	0x14a0


0x1740:	lea	rdi, [rip + 0x5f9]
0x1747:	call	0x4f50


0x174c:	lea	rcx, [rip + 0x20540d]
0x1753:	lea	rdx, [rip + 0x3846]
0x175a:	xor	r8d, r8d
0x175d:	mov	rsi, rbx
0x1760:	mov	edi, ebp
0x1762:	call	0x14e0


0x14e0:	jmp	qword ptr [rip + 0x2059f2]




0x4dd4:	test	eax, eax
0x4dd6:	je	0x4e14


0x4dd8:	call	0x1420


0x4ddd:	mov	r12d, dword ptr [rax]
0x4de0:	mov	rdi, rbx
0x4de3:	mov	rbp, rax
0x4de6:	call	0x1470


0x4deb:	test	r12d, r12d
0x4dee:	jne	0x4e20


0x4df0:	pop	rbx
0x4df1:	pop	rbp
0x4df2:	pop	r12
0x4df4:	ret	


0x4e20:	mov	dword ptr [rbp], r12d
0x4e24:	mov	eax, 0xffffffff
0x4e29:	jmp	0x4df0


0x4caa:	and	ebx, 0x20
0x4cad:	test	ebx, ebx
0x4caf:	jne	0x4cc8


0x4cb1:	test	eax, eax
0x4cb3:	je	0x4cbf


0x4cc8:	test	eax, eax
0x4cca:	jne	0x4ce8


0x4cbf:	pop	rbx
0x4cc0:	pop	rbp
0x4cc1:	pop	r12
0x4cc3:	ret	


0x4cb5:	test	r12, r12
0x4cb8:	mov	eax, 0xffffffff
0x4cbd:	je	0x4cf8


0x4ccc:	call	0x1420


0x4ce8:	pop	rbx
0x4ce9:	mov	eax, 0xffffffff
0x4cee:	pop	rbp
0x4cef:	pop	r12
0x4cf1:	ret	


0x4cf8:	call	0x1420


0x4cfd:	cmp	dword ptr [rax], 9
0x4d00:	pop	rbx
0x4d01:	pop	rbp
0x4d02:	pop	r12
0x4d04:	setne	al
0x4d07:	movzx	eax, al
0x4d0a:	neg	eax
0x4d0c:	ret	


0x4cd1:	mov	dword ptr [rax], 0
0x4cd7:	mov	eax, 0xffffffff
0x4cdc:	pop	rbx
0x4cdd:	pop	rbp
0x4cde:	pop	r12
0x4ce0:	ret	


0x1d52:	test	eax, eax
0x1d54:	je	0x1d6c


0x1d6c:	mov	rdi, qword ptr [rip + 0x20534d]
0x1d73:	call	0x4c90


0x1d56:	call	0x1420


0x1d5b:	cmp	byte ptr [rip + 0x20536e], 0
0x1d62:	mov	rbx, rax
0x1d65:	je	0x1d83


0x1d83:	lea	rsi, [rip + 0x3556]
0x1d8a:	xor	edi, edi
0x1d8c:	mov	edx, 5
0x1d91:	call	0x14a0


0x1d67:	cmp	dword ptr [rax], 0x20
0x1d6a:	jne	0x1d83


0x1d96:	mov	rdi, qword ptr [rip + 0x20533b]
0x1d9d:	mov	rbp, rax
0x1da0:	test	rdi, rdi
0x1da3:	je	0x1dcd


0x1dcd:	mov	esi, dword ptr [rbx]
0x1dcf:	lea	rdx, [rip + 0x351a]
0x1dd6:	mov	rcx, rax
0x1dd9:	xor	edi, edi
0x1ddb:	xor	eax, eax
0x1ddd:	call	0x1620


0x1da5:	call	0x3be0


0x1de2:	jmp	0x1dc2


0x1dc2:	mov	edi, dword ptr [rip + 0x205250]
0x1dc8:	call	0x1440


0x1440:	jmp	qword ptr [rip + 0x205a42]




0x1d78:	test	eax, eax
0x1d7a:	jne	0x1dc2


0x1d7c:	add	rsp, 8
0x1d80:	pop	rbx
0x1d81:	pop	rbp
0x1d82:	ret	


0x1767:	cmp	eax, -1
0x176a:	je	0x1818


0x1818:	movsxd	rax, dword ptr [rip + 0x205871]
0x181f:	cmp	eax, ebp
0x1821:	jne	0x1858


0x1770:	cmp	eax, 0xffffff7e
0x1775:	je	0x1892


0x1823:	mov	edi, r13d
0x1826:	call	0x1f80


0x1858:	mov	rdi, qword ptr [rbx + rax*8]
0x185c:	call	0x3de0


0x1892:	xor	edi, edi
0x1894:	call	0x19b0


0x177b:	jle	0x17d0


0x17d0:	cmp	eax, 0xffffff7d
0x17d5:	jne	0x1888


0x177d:	cmp	eax, 0x80
0x1782:	je	0x1810


0x17db:	mov	rdi, qword ptr [rip + 0x2058a6]
0x17e2:	mov	rcx, qword ptr [rip + 0x205827]
0x17e9:	lea	r8, [rip + 0x386c]
0x17f0:	lea	rdx, [rip + 0x3820]
0x17f7:	lea	rsi, [rip + 0x3786]
0x17fe:	xor	r9d, r9d
0x1801:	xor	eax, eax
0x1803:	call	0x42c0


0x1888:	mov	edi, 1
0x188d:	call	0x19b0


0x1810:	xor	r13d, r13d
0x1813:	jmp	0x174c


0x1788:	cmp	eax, 0x81
0x178d:	jne	0x1888


0x1793:	lea	rsi, [rip + 0x38d4]
0x179a:	mov	edx, 5
0x179f:	xor	edi, edi
0x17a1:	call	0x14a0


0x17a6:	mov	rdi, qword ptr [rip + 0x2058eb]
0x17ad:	lea	rcx, [rip + 0x37ec]
0x17b4:	mov	r8, rax
0x17b7:	xor	r9d, r9d
0x17ba:	mov	rdx, -1
0x17c1:	xor	esi, esi
0x17c3:	call	0x47b0


0x17c8:	mov	r12, rax
0x17cb:	jmp	0x174c


0x1808:	xor	edi, edi
0x180a:	call	0x1670


0x182b:	cmp	r12, rax
0x182e:	mov	edx, 1
0x1833:	jae	0x183b


0x1835:	sub	rax, r12
0x1838:	mov	rdx, rax
0x183b:	lea	rsi, [rip + 0x384c]
0x1842:	mov	edi, 1
0x1847:	xor	eax, eax
0x1849:	call	0x1610


0x183b:	lea	rsi, [rip + 0x384c]
0x1842:	mov	edi, 1
0x1847:	xor	eax, eax
0x1849:	call	0x1610


0x184e:	pop	rdx
0x184f:	xor	eax, eax
0x1851:	pop	rbx
0x1852:	pop	rbp
0x1853:	pop	r12
0x1855:	pop	r13
0x1857:	ret	


0x4928:	test	rax, rax
0x492b:	mov	rcx, qword ptr [rsp + 8]
0x4930:	je	0x49fc


0x49fc:	mov	qword ptr [r14], rbx
0x49ff:	or	ebp, 2
0x4a02:	jmp	0x48bd


0x4936:	lea	eax, [r12 - 0x45]
0x493b:	cmp	al, 0x2f
0x493d:	ja	0x4990


0x493f:	movabs	rdx, 0x814400308945
0x4949:	bt	rdx, rax
0x494d:	jae	0x4990


0x4990:	mov	edi, 1
0x4995:	mov	esi, 0x400
0x499a:	sub	r12d, 0x42
0x499e:	cmp	r12b, 0x35
0x49a2:	ja	0x49fc


0x494f:	mov	esi, 0x30
0x4954:	mov	rdi, r13
0x4957:	mov	qword ptr [rsp + 8], rcx
0x495c:	call	0x1500


0x49a4:	lea	rdx, [rip + 0x123d]
0x49ab:	movzx	r12d, r12b
0x49af:	movsxd	rax, dword ptr [rdx + r12*4]
0x49b3:	add	rax, rdx
0x49b6:	jmp	rax


0x4961:	test	rax, rax
0x4964:	mov	rcx, qword ptr [rsp + 8]
0x4969:	je	0x4990


0x496b:	movzx	eax, byte ptr [rcx + 1]
0x496f:	cmp	al, 0x44
0x4971:	je	0x497f


0x497f:	mov	edi, 2
0x4984:	mov	esi, 0x3e8
0x4989:	jmp	0x499a


0x4973:	cmp	al, 0x69
0x4975:	je	0x4b48


0x499a:	sub	r12d, 0x42
0x499e:	cmp	r12b, 0x35
0x49a2:	ja	0x49fc


0x4b48:	xor	edi, edi
0x4b4a:	cmp	byte ptr [rcx + 2], 0x42
0x4b4e:	mov	esi, 0x400
0x4b53:	sete	dil
0x4b57:	lea	edi, [rdi + rdi + 1]
0x4b5b:	jmp	0x499a


0x497b:	cmp	al, 0x42
0x497d:	jne	0x4990


0x4908:	test	rax, rax
0x490b:	mov	ebx, 1
0x4910:	mov	rcx, qword ptr [rsp + 8]
0x4915:	je	0x48b8


0x1daa:	mov	esi, dword ptr [rbx]
0x1dac:	lea	rdx, [rip + 0x3539]
0x1db3:	mov	rcx, rax
0x1db6:	mov	r8, rbp
0x1db9:	xor	edi, edi
0x1dbb:	xor	eax, eax
0x1dbd:	call	0x1620


0x1861:	lea	rsi, [rip + 0x3815]
0x1868:	mov	rbx, rax
0x186b:	mov	edx, 5
0x1870:	xor	edi, edi
0x1872:	call	0x14a0


0x1877:	mov	rcx, rbx
0x187a:	mov	rdx, rax
0x187d:	xor	esi, esi
0x187f:	xor	edi, edi
0x1881:	xor	eax, eax
0x1883:	call	0x1620


0x4722:	mov	esi, dword ptr [r14]
0x4725:	mov	r8, rax
0x4728:	mov	eax, 0
0x472d:	lea	rdx, [rip + 0xbb8]
0x4734:	mov	rcx, r13
0x4737:	cmp	esi, 0x16
0x473a:	cmove	esi, eax
0x473d:	test	ebx, ebx
0x473f:	mov	eax, 1
0x4744:	cmove	ebx, eax
0x4747:	xor	eax, eax
0x4749:	mov	edi, ebx
0x474b:	call	0x1620


0x4750:	mov	rbp, qword ptr [rsp]
0x4754:	mov	rdx, qword ptr [rsp + 8]
0x4759:	xor	rdx, qword ptr fs:[0x28]
0x4762:	mov	rax, rbp
0x4765:	jne	0x47ab


0x358c:	add	rsp, 0x20
0x3590:	mov	r11, qword ptr [rsp + 0x10]
0x3595:	cmp	r11, rax
0x3598:	ja	0x3601


0x359a:	lea	rsi, [rax + 1]
0x359e:	lea	rax, [rip + 0x203b5b]
0x35a5:	cmp	r12, rax
0x35a8:	mov	qword ptr [rbx], rsi
0x35ab:	je	0x35bf


0x3601:	mov	eax, dword ptr [rsp + 0x18]
0x3605:	mov	dword ptr [r13], eax
0x3609:	add	rsp, 0x28
0x360d:	mov	rax, r12
0x3610:	pop	rbx
0x3611:	pop	rbp
0x3612:	pop	r12
0x3614:	pop	r13
0x3616:	pop	r14
0x3618:	pop	r15
0x361a:	ret	


0x35bf:	mov	rdi, rsi
0x35c2:	mov	qword ptr [rsp + 0x10], rsi
0x35c7:	call	0x4420


0x35ad:	mov	rdi, r12
0x35b0:	mov	qword ptr [rsp + 0x10], rsi
0x35b5:	call	0x1400


0x35ba:	mov	rsi, qword ptr [rsp + 0x10]
0x35bf:	mov	rdi, rsi
0x35c2:	mov	qword ptr [rsp + 0x10], rsi
0x35c7:	call	0x4420


0x35cc:	sub	rsp, 8
0x35d0:	mov	qword ptr [rbx + 8], rax
0x35d4:	mov	r8d, dword ptr [rbp]
0x35d8:	push	qword ptr [rbp + 0x30]
0x35db:	push	qword ptr [rbp + 0x28]
0x35de:	mov	rcx, r14
0x35e1:	push	r15
0x35e3:	mov	r9d, dword ptr [rsp + 0x3c]
0x35e8:	mov	rdi, rax
0x35eb:	mov	rdx, qword ptr [rsp + 0x28]
0x35f0:	mov	rsi, qword ptr [rsp + 0x30]
0x35f5:	mov	r12, rax
0x35f8:	call	0x2260


0x3d12:	mov	rdi, qword ptr [rsp + 0x38]
0x3d17:	xor	rdi, qword ptr fs:[0x28]
0x3d20:	jne	0x3d2c


0x3d22:	add	rsp, 0x48
0x3d26:	ret	


0x3d2c:	call	0x14d0


0x3a5f:	mov	rcx, qword ptr [rsp + 0x38]
0x3a64:	xor	rcx, qword ptr fs:[0x28]
0x3a6d:	jne	0x3a79


0x3a6f:	add	rsp, 0x48
0x3a73:	ret	


0x3a79:	call	0x14d0


0x3aeb:	mov	rdx, qword ptr [rsp + 0x38]
0x3af0:	xor	rdx, qword ptr fs:[0x28]
0x3af9:	jne	0x3b05


0x3afb:	add	rsp, 0x48
0x3aff:	ret	


0x3b05:	call	0x14d0


0x3c7f:	mov	rcx, qword ptr [rsp + 0x38]
0x3c84:	xor	rcx, qword ptr fs:[0x28]
0x3c8d:	jne	0x3c99


0x3c8f:	add	rsp, 0x48
0x3c93:	ret	


0x3c99:	call	0x14d0


0x3bae:	mov	rsi, qword ptr [rsp + 0x38]
0x3bb3:	xor	rsi, qword ptr fs:[0x28]
0x3bbc:	jne	0x3bc3


0x3bbe:	add	rsp, 0x48
0x3bc2:	ret	


0x3bc3:	call	0x14d0


0x35fd:	add	rsp, 0x20
0x3601:	mov	eax, dword ptr [rsp + 0x18]
0x3605:	mov	dword ptr [r13], eax
0x3609:	add	rsp, 0x28
0x360d:	mov	rax, r12
0x3610:	pop	rbx
0x3611:	pop	rbp
0x3612:	pop	r12
0x3614:	pop	r13
0x3616:	pop	r14
0x3618:	pop	r15
0x361a:	ret	


0x384c:	lea	rsi, [rax + 1]
0x3850:	mov	qword ptr [rsp + 0x48], rax
0x3855:	add	rsp, 0x20
0x3859:	mov	rdi, rsi
0x385c:	mov	qword ptr [rsp + 0x18], rsi
0x3861:	call	0x4420


0x3866:	mov	qword ptr [rsp + 0x10], rax
0x386b:	sub	rsp, 8
0x386f:	push	qword ptr [rbx + 0x30]
0x3872:	push	qword ptr [rbx + 0x28]
0x3875:	mov	r10, qword ptr [rsp + 0x38]
0x387a:	mov	r9d, ebp
0x387d:	mov	r8d, dword ptr [rbx]
0x3880:	mov	rcx, r15
0x3883:	mov	rdx, r14
0x3886:	mov	rdi, rax
0x3889:	push	r10
0x388b:	mov	rsi, qword ptr [rsp + 0x38]
0x3890:	call	0x2260


0x3895:	mov	eax, dword ptr [rsp + 0x2c]
0x3899:	add	rsp, 0x20
0x389d:	test	r12, r12
0x38a0:	mov	dword ptr [r13], eax
0x38a4:	je	0x38af


0x38af:	mov	rax, qword ptr [rsp + 0x10]
0x38b4:	add	rsp, 0x38
0x38b8:	pop	rbx
0x38b9:	pop	rbp
0x38ba:	pop	r12
0x38bc:	pop	r13
0x38be:	pop	r14
0x38c0:	pop	r15
0x38c2:	ret	


0x38a6:	mov	r11, qword ptr [rsp + 0x28]
0x38ab:	mov	qword ptr [r12], r11
0x38af:	mov	rax, qword ptr [rsp + 0x10]
0x38b4:	add	rsp, 0x38
0x38b8:	pop	rbx
0x38b9:	pop	rbp
0x38ba:	pop	r12
0x38bc:	pop	r13
0x38be:	pop	r14
0x38c0:	pop	r15
0x38c2:	ret	


0x37c1:	mov	dword ptr [rbp], r12d
0x37c5:	add	rsp, 0x38
0x37c9:	pop	rbx
0x37ca:	pop	rbp
0x37cb:	pop	r12
0x37cd:	pop	r13
0x37cf:	pop	r14
0x37d1:	pop	r15
0x37d3:	ret	


0x4f1d:	add	rbx, 1
0x4f21:	cmp	rbp, rbx
0x4f24:	jne	0x4f10


0x4f10:	mov	rdx, r15
0x4f13:	mov	rsi, r14
0x4f16:	mov	edi, r13d
0x4f19:	call	qword ptr [r12 + rbx*8]






0x4040:	mov	r13, qword ptr [rbx + 0x10]
0x4044:	mov	r12, qword ptr [rbx + 8]
0x4048:	lea	rsi, [rip + 0x1817]
0x404f:	mov	rbx, qword ptr [rbx]
0x4052:	mov	edx, 5
0x4057:	xor	edi, edi
0x4059:	call	0x14a0


0x4118:	mov	r8, qword ptr [rbx + 8]
0x411c:	mov	r12, qword ptr [rbx + 0x28]
0x4120:	lea	rsi, [rip + 0x18b9]
0x4127:	mov	r15, qword ptr [rbx + 0x20]
0x412b:	mov	r14, qword ptr [rbx + 0x18]
0x412f:	mov	edx, 5
0x4134:	mov	r13, qword ptr [rbx + 0x10]
0x4138:	xor	edi, edi
0x413a:	mov	rbx, qword ptr [rbx]
0x413d:	mov	qword ptr [rsp], r8
0x4141:	call	0x14a0


0x4180:	mov	r9, qword ptr [rbx + 0x10]
0x4184:	mov	r13, qword ptr [rbx + 0x30]
0x4188:	lea	rsi, [rip + 0x1879]
0x418f:	mov	r12, qword ptr [rbx + 0x28]
0x4193:	mov	r15, qword ptr [rbx + 0x20]
0x4197:	mov	edx, 5
0x419c:	mov	r14, qword ptr [rbx + 0x18]
0x41a0:	mov	r8, qword ptr [rbx + 8]
0x41a4:	xor	edi, edi
0x41a6:	mov	qword ptr [rsp + 8], r9
0x41ab:	mov	rbx, qword ptr [rbx]
0x41ae:	mov	qword ptr [rsp], r8
0x41b2:	call	0x14a0


0x3f60:	mov	r10, qword ptr [rbx + 0x40]
0x3f64:	mov	r9, qword ptr [rbx + 0x38]
0x3f68:	lea	rsi, [rip + 0x1af9]
0x3f6f:	mov	rax, qword ptr [rbx + 0x10]
0x3f73:	mov	r8, qword ptr [rbx + 8]
0x3f77:	mov	edx, 5
0x3f7c:	mov	r13, qword ptr [rbx + 0x30]
0x3f80:	mov	r12, qword ptr [rbx + 0x28]
0x3f84:	mov	r15, qword ptr [rbx + 0x20]
0x3f88:	mov	r14, qword ptr [rbx + 0x18]
0x3f8c:	mov	rbx, qword ptr [rbx]
0x3f8f:	mov	qword ptr [rsp + 0x18], r10
0x3f94:	mov	qword ptr [rsp + 0x10], r9
0x3f99:	mov	qword ptr [rsp], rax
0x3f9d:	mov	qword ptr [rsp + 8], r8
0x3fa2:	xor	edi, edi
0x3fa4:	call	0x14a0


0x3f26:	add	rsp, 0x28
0x3f2a:	pop	rbx
0x3f2b:	pop	rbp
0x3f2c:	pop	r12
0x3f2e:	pop	r13
0x3f30:	pop	r14
0x3f32:	pop	r15
0x3f34:	ret	


0x3ff8:	mov	r12, qword ptr [rbx + 8]
0x3ffc:	lea	rsi, [rip + 0x184c]
0x4003:	mov	rbx, qword ptr [rbx]
0x4006:	mov	edx, 5
0x400b:	xor	edi, edi
0x400d:	call	0x14a0


0x40e8:	mov	r15, qword ptr [rbx + 0x20]
0x40ec:	lea	rsi, [rip + 0x18c5]
0x40f3:	mov	edx, 5
0x40f8:	xor	edi, edi
0x40fa:	mov	r14, qword ptr [rbx + 0x18]
0x40fe:	mov	r13, qword ptr [rbx + 0x10]
0x4102:	mov	r12, qword ptr [rbx + 8]
0x4106:	mov	rbx, qword ptr [rbx]
0x4109:	call	0x14a0


0x4090:	lea	rsi, [rip + 0x1901]
0x4097:	mov	edx, 5
0x409c:	xor	edi, edi
0x409e:	mov	r14, qword ptr [rbx + 0x18]
0x40a2:	mov	r13, qword ptr [rbx + 0x10]
0x40a6:	mov	r12, qword ptr [rbx + 8]
0x40aa:	mov	rbx, qword ptr [rbx]
0x40ad:	call	0x14a0


0x3eb0:	mov	r9, qword ptr [rbx + 0x38]
0x3eb4:	mov	rax, qword ptr [rbx + 0x10]
0x3eb8:	lea	rsi, [rip + 0x1b79]
0x3ebf:	mov	r8, qword ptr [rbx + 8]
0x3ec3:	mov	edx, 5
0x3ec8:	xor	edi, edi
0x3eca:	mov	r13, qword ptr [rbx + 0x30]
0x3ece:	mov	r12, qword ptr [rbx + 0x28]
0x3ed2:	mov	qword ptr [rsp + 0x10], r9
0x3ed7:	mov	r15, qword ptr [rbx + 0x20]
0x3edb:	mov	r14, qword ptr [rbx + 0x18]
0x3edf:	mov	qword ptr [rsp], rax
0x3ee3:	mov	qword ptr [rsp + 8], r8
0x3ee8:	mov	rbx, qword ptr [rbx]
0x3eeb:	call	0x14a0


0x3fb8:	mov	rbx, qword ptr [rbx]
0x3fbb:	lea	rsi, [rip + 0x187d]
0x3fc2:	mov	edx, 5
0x3fc7:	xor	edi, edi
0x3fc9:	call	0x14a0


0x3fce:	add	rsp, 0x28
0x3fd2:	mov	rcx, rbx
0x3fd5:	mov	rdi, rbp
0x3fd8:	pop	rbx
0x3fd9:	pop	rbp
0x3fda:	pop	r12
0x3fdc:	pop	r13
0x3fde:	pop	r14
0x3fe0:	pop	r15
0x3fe2:	mov	rdx, rax
0x3fe5:	mov	esi, 1
0x3fea:	xor	eax, eax
0x3fec:	jmp	0x1690


0x3ef0:	sub	rsp, 8
0x3ef4:	mov	r9, qword ptr [rsp + 0x18]
0x3ef9:	mov	rdx, rax
0x3efc:	mov	rcx, rbx
0x3eff:	mov	esi, 1
0x3f04:	mov	rdi, rbp
0x3f07:	xor	eax, eax
0x3f09:	push	r9
0x3f0b:	push	r13
0x3f0d:	push	r12
0x3f0f:	push	r15
0x3f11:	push	r14
0x3f13:	mov	r9, qword ptr [rsp + 0x30]
0x3f18:	mov	r8, qword ptr [rsp + 0x38]
0x3f1d:	call	0x1690


0x40b2:	sub	rsp, 8
0x40b6:	push	r14
0x40b8:	mov	rdx, rax
0x40bb:	mov	r9, r13
0x40be:	mov	r8, r12
0x40c1:	mov	rcx, rbx
0x40c4:	mov	rdi, rbp
0x40c7:	mov	esi, 1
0x40cc:	xor	eax, eax
0x40ce:	call	0x1690


0x40d3:	pop	rax
0x40d4:	pop	rdx
0x40d5:	add	rsp, 0x28
0x40d9:	pop	rbx
0x40da:	pop	rbp
0x40db:	pop	r12
0x40dd:	pop	r13
0x40df:	pop	r14
0x40e1:	pop	r15
0x40e3:	ret	


0x410e:	push	r15
0x4110:	jmp	0x40b6


0x40b6:	push	r14
0x40b8:	mov	rdx, rax
0x40bb:	mov	r9, r13
0x40be:	mov	r8, r12
0x40c1:	mov	rcx, rbx
0x40c4:	mov	rdi, rbp
0x40c7:	mov	esi, 1
0x40cc:	xor	eax, eax
0x40ce:	call	0x1690


0x4012:	add	rsp, 0x28
0x4016:	mov	r8, r12
0x4019:	mov	rcx, rbx
0x401c:	mov	rdi, rbp
0x401f:	mov	rdx, rax
0x4022:	mov	esi, 1
0x4027:	pop	rbx
0x4028:	pop	rbp
0x4029:	pop	r12
0x402b:	pop	r13
0x402d:	pop	r14
0x402f:	pop	r15
0x4031:	xor	eax, eax
0x4033:	jmp	0x1690


0x41b7:	push	r13
0x41b9:	push	r12
0x41bb:	push	r15
0x41bd:	push	r14
0x41bf:	mov	r9, qword ptr [rsp + 0x28]
0x41c4:	jmp	0x4153


0x4153:	mov	r8, qword ptr [rsp + 0x20]
0x4158:	mov	rcx, rbx
0x415b:	mov	rdx, rax
0x415e:	mov	rdi, rbp
0x4161:	mov	esi, 1
0x4166:	xor	eax, eax
0x4168:	call	0x1690


0x416d:	add	rsp, 0x20
0x4171:	add	rsp, 0x28
0x4175:	pop	rbx
0x4176:	pop	rbp
0x4177:	pop	r12
0x4179:	pop	r13
0x417b:	pop	r14
0x417d:	pop	r15
0x417f:	ret	


0x4146:	sub	rsp, 8
0x414a:	mov	r9, r13
0x414d:	push	r12
0x414f:	push	r15
0x4151:	push	r14
0x4153:	mov	r8, qword ptr [rsp + 0x20]
0x4158:	mov	rcx, rbx
0x415b:	mov	rdx, rax
0x415e:	mov	rdi, rbp
0x4161:	mov	esi, 1
0x4166:	xor	eax, eax
0x4168:	call	0x1690


0x405e:	add	rsp, 0x28
0x4062:	mov	r9, r13
0x4065:	mov	r8, r12
0x4068:	mov	rcx, rbx
0x406b:	mov	rdi, rbp
0x406e:	mov	rdx, rax
0x4071:	pop	rbx
0x4072:	pop	rbp
0x4073:	pop	r12
0x4075:	pop	r13
0x4077:	pop	r14
0x4079:	pop	r15
0x407b:	mov	esi, 1
0x4080:	xor	eax, eax
0x4082:	jmp	0x1690


0x2e00:	sub	rsp, 8
0x2e04:	mov	rcx, rbp
0x2e07:	mov	rsi, r13
0x2e0a:	push	qword ptr [rsp + 0x68]
0x2e0e:	push	qword ptr [rsp + 0x78]
0x2e12:	mov	rdi, r14
0x2e15:	push	0
0x2e17:	mov	r9d, dword ptr [rsp + 0x98]
0x2e1f:	mov	r8d, dword ptr [rsp + 0x28]
0x2e24:	mov	rdx, qword ptr [rsp + 0x30]
0x2e29:	and	r9d, 0xfffffffd
0x2e2d:	call	0x2260


0x2e32:	add	rsp, 0x20
0x2e36:	mov	r15, rax
0x2e39:	mov	rbx, qword ptr [rsp + 0xa8]
0x2e41:	xor	rbx, qword ptr fs:[0x28]
0x2e4a:	mov	rax, r15
0x2e4d:	jne	0x3453


0x2e53:	add	rsp, 0xb8
0x2e5a:	pop	rbx
0x2e5b:	pop	rbp
0x2e5c:	pop	r12
0x2e5e:	pop	r13
0x2e60:	pop	r14
0x2e62:	pop	r15
0x2e64:	ret	


0x3453:	call	0x14d0


0x33fd:	sub	rsp, 8
0x3401:	mov	r8d, 5
0x3407:	mov	rcx, r11
0x340a:	push	qword ptr [rsp + 0x68]
0x340e:	push	qword ptr [rsp + 0x78]
0x3412:	mov	rdi, r14
0x3415:	push	qword ptr [rsp + 0x38]
0x3419:	mov	r9d, dword ptr [rsp + 0x98]
0x3421:	mov	rdx, qword ptr [rsp + 0x30]
0x3426:	mov	rsi, qword ptr [rsp + 0x70]
0x342b:	call	0x2260


0x3430:	add	rsp, 0x20
0x3434:	mov	r15, rax
0x3437:	jmp	0x2e39


0x2e39:	mov	rbx, qword ptr [rsp + 0xa8]
0x2e41:	xor	rbx, qword ptr fs:[0x28]
0x2e4a:	mov	rax, r15
0x2e4d:	jne	0x3453


0x13e0:	push	qword ptr [rip + 0x205a6a]
0x13e6:	jmp	qword ptr [rip + 0x205a6c]


0x13ec:	nop	dword ptr [rax]


0x13f6:	push	0
0x13fb:	jmp	0x13e0


0x1406:	push	1
0x140b:	jmp	0x13e0


0x1416:	push	2
0x141b:	jmp	0x13e0


0x1426:	push	3
0x142b:	jmp	0x13e0


0x1436:	push	4
0x143b:	jmp	0x13e0


0x1446:	push	5
0x144b:	jmp	0x13e0


0x1456:	push	6
0x145b:	jmp	0x13e0


0x1466:	push	7
0x146b:	jmp	0x13e0


0x1476:	push	8
0x147b:	jmp	0x13e0


0x1486:	push	9
0x148b:	jmp	0x13e0


0x1496:	push	0xa
0x149b:	jmp	0x13e0


0x14a6:	push	0xb
0x14ab:	jmp	0x13e0


0x14b6:	push	0xc
0x14bb:	jmp	0x13e0


0x14c6:	push	0xd
0x14cb:	jmp	0x13e0


0x14d6:	push	0xe
0x14db:	jmp	0x13e0


0x14e6:	push	0xf
0x14eb:	jmp	0x13e0


0x14f6:	push	0x10
0x14fb:	jmp	0x13e0


0x1506:	push	0x11
0x150b:	jmp	0x13e0


0x1516:	push	0x12
0x151b:	jmp	0x13e0


0x1526:	push	0x13
0x152b:	jmp	0x13e0


0x1536:	push	0x14
0x153b:	jmp	0x13e0


0x1546:	push	0x15
0x154b:	jmp	0x13e0


0x1556:	push	0x16
0x155b:	jmp	0x13e0


0x1560:	jmp	qword ptr [rip + 0x2059b2]




0x1566:	push	0x17
0x156b:	jmp	0x13e0


0x1576:	push	0x18
0x157b:	jmp	0x13e0


0x1586:	push	0x19
0x158b:	jmp	0x13e0


0x1596:	push	0x1a
0x159b:	jmp	0x13e0


0x15a6:	push	0x1b
0x15ab:	jmp	0x13e0


0x15b6:	push	0x1c
0x15bb:	jmp	0x13e0


0x15c6:	push	0x1d
0x15cb:	jmp	0x13e0


0x15d6:	push	0x1e
0x15db:	jmp	0x13e0


0x15e6:	push	0x1f
0x15eb:	jmp	0x13e0


0x15f6:	push	0x20
0x15fb:	jmp	0x13e0


0x1606:	push	0x21
0x160b:	jmp	0x13e0


0x1616:	push	0x22
0x161b:	jmp	0x13e0


0x1626:	push	0x23
0x162b:	jmp	0x13e0


0x1636:	push	0x24
0x163b:	jmp	0x13e0


0x1646:	push	0x25
0x164b:	jmp	0x13e0


0x1656:	push	0x26
0x165b:	jmp	0x13e0


0x1666:	push	0x27
0x166b:	jmp	0x13e0


0x1676:	push	0x28
0x167b:	jmp	0x13e0


0x1686:	push	0x29
0x168b:	jmp	0x13e0


0x1696:	push	0x2a
0x169b:	jmp	0x13e0


0x16a6:	push	0x2b
0x16ab:	jmp	0x13e0


0x16b0:	jmp	qword ptr [rip + 0x20590a]




0x16b6:	push	0x2c
0x16bb:	jmp	0x13e0


0x16c0:	jmp	qword ptr [rip + 0x205902]




0x16c6:	push	0x2d
0x16cb:	jmp	0x13e0


0x16d6:	push	0x2e
0x16db:	jmp	0x13e0


0x1899:	nop	dword ptr [rax]


0x18ca:	hlt	


0x18cb:	nop	dword ptr [rax + rax]


0x1902:	nop	dword ptr [rax]
0x1906:	nop	word ptr cs:[rax + rax]


0x1952:	nop	dword ptr [rax]
0x1956:	nop	word ptr cs:[rax + rax]


0x199a:	nop	word ptr [rax + rax]


0x19aa:	nop	word ptr [rax + rax]


0x1d1a:	nop	word ptr [rax + rax]


0x1d28:	nop	dword ptr [rax + rax]


0x1d38:	nop	dword ptr [rax + rax]


0x1de4:	nop	word ptr cs:[rax + rax]
0x1dee:	nop	


0x1e5b:	nop	dword ptr [rax + rax]


0x1f71:	nop	dword ptr [rax + rax]
0x1f76:	nop	word ptr cs:[rax + rax]


0x20cb:	nop	dword ptr [rax + rax]


0x216f:	nop	


0x2257:	nop	word ptr [rax + rax]


0x22f3:	mov	byte ptr [rsp + 0xe], 1
0x22f8:	mov	byte ptr [rsp + 0x7c], 0
0x22fd:	xor	r12d, r12d
0x2300:	mov	qword ptr [rsp + 0x50], 0
0x2309:	mov	byte ptr [rsp + 0xf], 1
0x230e:	mov	byte ptr [rsp + 0xd], 0
0x2313:	lea	rax, [rip + 0x3053]
0x231a:	mov	qword ptr [rsp + 0x18], 1
0x2323:	xor	r15d, r15d
0x2326:	mov	dword ptr [rsp + 8], 2
0x232e:	mov	qword ptr [rsp + 0x48], rax
0x2333:	xor	r11d, r11d
0x2336:	mov	rax, rbp
0x2339:	mov	r8d, r12d
0x233c:	mov	rbp, r11
0x233f:	mov	r11, rax
0x2342:	nop	word ptr [rax + rax]
0x2348:	cmp	r11, rbp
0x234b:	setne	r12b
0x234f:	cmp	r11, -1
0x2353:	jne	0x2362


0x2355:	mov	rax, qword ptr [rsp + 0x10]
0x235a:	cmp	byte ptr [rax + rbp], 0
0x235e:	setne	r12b
0x2362:	test	r12b, r12b
0x2365:	je	0x29c0


0x2362:	test	r12b, r12b
0x2365:	je	0x29c0


0x29c0:	cmp	dword ptr [rsp + 8], 2
0x29c5:	movzx	ebx, byte ptr [rsp + 0xf]
0x29ca:	mov	r12d, r8d
0x29cd:	mov	rbp, r11
0x29d0:	sete	dl
0x29d3:	mov	eax, ebx
0x29d5:	test	r15, r15
0x29d8:	sete	cl
0x29db:	and	eax, edx
0x29dd:	and	al, cl
0x29df:	jne	0x3446


0x236b:	cmp	dword ptr [rsp + 8], 2
0x2370:	mov	rdi, qword ptr [rsp + 0x10]
0x2375:	lea	r9, [rdi + rbp]
0x2379:	setne	al
0x237c:	and	al, byte ptr [rsp + 0xd]
0x2380:	mov	r10d, eax
0x2383:	je	0x2430


0x29e5:	mov	eax, ebx
0x29e7:	xor	eax, 1
0x29ea:	and	dl, al
0x29ec:	je	0x335c


0x3446:	mov	dword ptr [rsp + 8], 2
0x344e:	jmp	0x2de9


0x2430:	movzx	ebx, byte ptr [r9]
0x2434:	cmp	bl, 0x7e
0x2437:	ja	0x2758


0x2389:	mov	rax, qword ptr [rsp + 0x18]
0x238e:	test	rax, rax
0x2391:	je	0x27c0


0x335c:	mov	rbx, qword ptr [rsp + 0x48]
0x3361:	test	rbx, rbx
0x3364:	je	0x3392


0x29f2:	cmp	byte ptr [rsp + 0x7c], 0
0x29f7:	je	0x335a


0x2de9:	cmp	byte ptr [rsp + 0xd], 0
0x2dee:	je	0x2e00


0x243d:	lea	rcx, [rip + 0x2fa8]
0x2444:	movzx	edx, bl
0x2447:	movsxd	rax, dword ptr [rcx + rdx*4]
0x244b:	add	rax, rcx
0x244e:	jmp	rax


0x2758:	cmp	qword ptr [rsp + 0x58], 1
0x275e:	jne	0x2b08


0x27c0:	movzx	ebx, byte ptr [r9]
0x27c4:	cmp	bl, 0x7e
0x27c7:	ja	0x2750


0x2397:	cmp	r11, -1
0x239b:	lea	rbx, [rbp + rax]
0x23a0:	jne	0x23d0


0x3392:	cmp	r13, r15
0x3395:	jbe	0x2e39


0x3366:	test	al, al
0x3368:	je	0x3392


0x335a:	mov	eax, edx
0x335c:	mov	rbx, qword ptr [rsp + 0x48]
0x3361:	test	rbx, rbx
0x3364:	je	0x3392


0x29fd:	cmp	byte ptr [rsp + 0xe], 0
0x2a02:	jne	0x33fd


0x2df0:	test	al, al
0x2df2:	mov	eax, 4
0x2df7:	cmove	eax, dword ptr [rsp + 8]
0x2dfc:	mov	dword ptr [rsp + 8], eax


0x2764:	mov	qword ptr [rsp + 0x38], r11
0x2769:	mov	byte ptr [rsp + 0x30], r8b
0x276e:	mov	byte ptr [rsp + 0x28], r10b
0x2773:	call	0x16d0


0x2b08:	lea	rax, [rsp + 0xa0]
0x2b10:	cmp	r11, -1
0x2b14:	mov	qword ptr [rsp + 0xa0], 0
0x2b20:	mov	qword ptr [rsp + 0x28], rax
0x2b25:	jne	0x2b54


0x27c9:	lea	rcx, [rip + 0x2e18]
0x27d0:	movzx	edx, bl
0x27d3:	movsxd	rax, dword ptr [rcx + rdx*4]
0x27d7:	add	rax, rcx
0x27da:	jmp	rax


0x2750:	xor	r10d, r10d
0x2753:	nop	dword ptr [rax + rax]
0x2758:	cmp	qword ptr [rsp + 0x58], 1
0x275e:	jne	0x2b08


0x23a2:	cmp	rax, 1
0x23a6:	jbe	0x23d0


0x23d0:	cmp	rbx, r11
0x23d3:	mov	byte ptr [rsp + 0x28], r10b
0x23d8:	ja	0x2990


0x339b:	mov	byte ptr [r14 + r15], 0
0x33a0:	jmp	0x2e39


0x336a:	movzx	ecx, byte ptr [rbx]
0x336d:	mov	rax, rbx
0x3370:	test	cl, cl
0x3372:	je	0x3392


0x2a08:	test	r13, r13
0x2a0b:	sete	al
0x2a0e:	cmp	qword ptr [rsp + 0x50], 0
0x2a14:	setne	dl
0x2a17:	and	al, dl
0x2a19:	je	0x343c


0x2b27:	mov	rdi, qword ptr [rsp + 0x10]
0x2b2c:	mov	byte ptr [rsp + 0x40], r8b
0x2b31:	mov	byte ptr [rsp + 0x38], r10b
0x2b36:	mov	qword ptr [rsp + 0x30], r9
0x2b3b:	call	0x14c0


0x2b54:	lea	rax, [rsp + 0x9c]
0x2b5c:	xor	ecx, ecx
0x2b5e:	mov	byte ptr [rsp + 0x7e], bl
0x2b62:	mov	byte ptr [rsp + 0x7d], r8b
0x2b67:	mov	rbx, rcx
0x2b6a:	mov	qword ptr [rsp + 0x88], r9
0x2b72:	mov	qword ptr [rsp + 0x38], rax
0x2b77:	mov	byte ptr [rsp + 0x7f], r10b
0x2b7c:	mov	qword ptr [rsp + 0x80], r15
0x2b84:	mov	qword ptr [rsp + 0x40], r14
0x2b89:	mov	qword ptr [rsp + 0x70], r13
0x2b8e:	mov	qword ptr [rsp + 0x30], r11
0x2b93:	mov	rax, qword ptr [rsp + 0x10]
0x2b98:	lea	r14, [rbp + rbx]
0x2b9d:	mov	rdx, qword ptr [rsp + 0x30]
0x2ba2:	mov	rcx, qword ptr [rsp + 0x28]
0x2ba7:	mov	rdi, qword ptr [rsp + 0x38]
0x2bac:	lea	r13, [rax + r14]
0x2bb0:	sub	rdx, r14
0x2bb3:	mov	rsi, r13
0x2bb6:	call	0x4c00


0x23a8:	mov	byte ptr [rsp + 0x38], r8b
0x23ad:	mov	byte ptr [rsp + 0x30], r10b
0x23b2:	mov	qword ptr [rsp + 0x28], r9
0x23b7:	call	0x14c0


0x23de:	mov	rdx, qword ptr [rsp + 0x18]
0x23e3:	mov	rsi, qword ptr [rsp + 0x48]
0x23e8:	mov	rdi, r9
0x23eb:	mov	qword ptr [rsp + 0x40], r11
0x23f0:	mov	byte ptr [rsp + 0x38], r8b
0x23f5:	mov	qword ptr [rsp + 0x30], r9
0x23fa:	call	0x1560


0x2990:	xor	r10d, r10d
0x2993:	jmp	0x2430


0x3374:	mov	rdx, r15
0x3377:	sub	rax, r15
0x337a:	cmp	r13, rdx
0x337d:	jbe	0x3383


0x343c:	movzx	eax, byte ptr [rsp + 0x7c]
0x3441:	jmp	0x335c


0x2a1f:	mov	r13, qword ptr [rsp + 0x50]
0x2a24:	lea	rbx, [rip + 0x2942]
0x2a2b:	mov	byte ptr [r14], 0x27
0x2a2f:	mov	dword ptr [rsp + 8], 2
0x2a37:	mov	r15d, 1
0x2a3d:	mov	qword ptr [rsp + 0x18], 1
0x2a46:	mov	byte ptr [rsp + 0xf], 0
0x2a4b:	mov	qword ptr [rsp + 0x48], rbx
0x2a50:	mov	byte ptr [rsp + 0x7c], al
0x2a54:	jmp	0x2333


0x3383:	add	rdx, 1
0x3387:	movzx	ecx, byte ptr [rax + rdx]
0x338b:	test	cl, cl
0x338d:	jne	0x337a


0x337f:	mov	byte ptr [r14 + rdx], cl
0x3383:	add	rdx, 1
0x3387:	movzx	ecx, byte ptr [rax + rdx]
0x338b:	test	cl, cl
0x338d:	jne	0x337a


0x2333:	xor	r11d, r11d
0x2336:	mov	rax, rbp
0x2339:	mov	r8d, r12d
0x233c:	mov	rbp, r11
0x233f:	mov	r11, rax
0x2342:	nop	word ptr [rax + rax]
0x2348:	cmp	r11, rbp
0x234b:	setne	r12b
0x234f:	cmp	r11, -1
0x2353:	jne	0x2362


0x338f:	mov	r15, rdx
0x3392:	cmp	r13, r15
0x3395:	jbe	0x2e39


0x337a:	cmp	r13, rdx
0x337d:	jbe	0x3383


0x23ff:	test	eax, eax
0x2401:	mov	r9, qword ptr [rsp + 0x30]
0x2406:	movzx	r8d, byte ptr [rsp + 0x38]
0x240c:	mov	r11, qword ptr [rsp + 0x40]
0x2411:	jne	0x2990


0x2417:	cmp	byte ptr [rsp + 0xf], 0
0x241c:	movzx	r10d, byte ptr [rsp + 0x28]
0x2422:	jne	0x33a5


0x33a5:	cmp	dword ptr [rsp + 8], 2
0x33aa:	movzx	ebx, byte ptr [rsp + 0xf]
0x33af:	mov	rbp, r11
0x33b2:	sete	al
0x33b5:	mov	byte ptr [rsp + 0xd], bl
0x33b9:	jmp	0x2de9


0x2bbb:	test	rax, rax
0x2bbe:	mov	r15, rax
0x2bc1:	je	0x2c11


0x2c11:	mov	edx, r12d
0x2c14:	mov	rdi, rbx
0x2c17:	movzx	r8d, byte ptr [rsp + 0x7d]
0x2c1d:	xor	edx, 1
0x2c20:	movzx	ebx, byte ptr [rsp + 0x7e]
0x2c25:	movzx	r10d, byte ptr [rsp + 0x7f]
0x2c2b:	and	dl, byte ptr [rsp + 0xd]
0x2c2f:	mov	r15, qword ptr [rsp + 0x80]
0x2c37:	mov	r14, qword ptr [rsp + 0x40]
0x2c3c:	mov	r13, qword ptr [rsp + 0x70]
0x2c41:	mov	r11, qword ptr [rsp + 0x30]
0x2c46:	cmp	rdi, 1
0x2c4a:	jbe	0x324b


0x2bc3:	cmp	rax, -1
0x2bc7:	je	0x31e5


0x324b:	mov	eax, edx
0x324d:	jmp	0x27a7


0x2c50:	mov	rcx, rdi
0x2c53:	xor	esi, esi
0x2c55:	movzx	r9d, byte ptr [rsp + 0xf]
0x2c5b:	add	rcx, rbp
0x2c5e:	mov	rdi, qword ptr [rsp + 0x10]
0x2c63:	jmp	0x2d1e


0x31e5:	mov	rdi, rbx
0x31e8:	movzx	r8d, byte ptr [rsp + 0x7d]
0x31ee:	movzx	ebx, byte ptr [rsp + 0x7e]
0x31f3:	movzx	r10d, byte ptr [rsp + 0x7f]
0x31f9:	mov	r15, qword ptr [rsp + 0x80]
0x3201:	xor	r12d, r12d
0x3204:	mov	r14, qword ptr [rsp + 0x40]
0x3209:	mov	r13, qword ptr [rsp + 0x70]
0x320e:	mov	r11, qword ptr [rsp + 0x30]
0x3213:	movzx	edx, byte ptr [rsp + 0xd]
0x3218:	jmp	0x2c46


0x2bcd:	cmp	rax, -2
0x2bd1:	je	0x3171


0x27a7:	test	al, al
0x27a9:	jne	0x3141


0x2d1e:	test	dl, dl
0x2d20:	jne	0x2c70


0x2c46:	cmp	rdi, 1
0x2c4a:	jbe	0x324b


0x3171:	mov	r11, qword ptr [rsp + 0x30]
0x3176:	mov	rsi, r14
0x3179:	mov	rcx, r13
0x317c:	mov	rax, rbx
0x317f:	mov	rdi, rbx
0x3182:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3188:	movzx	ebx, byte ptr [rsp + 0x7e]
0x318d:	mov	r9, qword ptr [rsp + 0x88]
0x3195:	cmp	rsi, r11
0x3198:	movzx	r10d, byte ptr [rsp + 0x7f]
0x319e:	mov	r15, qword ptr [rsp + 0x80]
0x31a6:	mov	r14, qword ptr [rsp + 0x40]
0x31ab:	mov	r13, qword ptr [rsp + 0x70]
0x31b0:	jae	0x31d8


0x2bd7:	cmp	dword ptr [rsp + 8], 2
0x2bdc:	sete	al
0x2bdf:	and	al, byte ptr [rsp + 0xf]
0x2be3:	jne	0x2d80


0x27af:	cmp	dword ptr [rsp + 8], 2
0x27b4:	sete	dl
0x27b7:	jmp	0x2488


0x3141:	movzx	edx, byte ptr [rsp + 0xd]
0x3146:	xor	r12d, r12d
0x3149:	jmp	0x2c50


0x2d26:	mov	eax, esi
0x2d28:	xor	eax, 1
0x2d2b:	and	eax, r8d
0x2d2e:	test	r10b, r10b
0x2d31:	je	0x2d41


0x2c70:	cmp	dword ptr [rsp + 8], 2
0x2c75:	sete	al
0x2c78:	test	r9b, r9b
0x2c7b:	jne	0x3130


0x31b2:	cmp	byte ptr [rcx], 0
0x31b5:	jne	0x31c7


0x31d8:	movzx	edx, byte ptr [rsp + 0xd]
0x31dd:	xor	r12d, r12d
0x31e0:	jmp	0x2c46


0x2be9:	mov	edi, dword ptr [rsp + 0x9c]
0x2bf0:	call	0x16c0


0x2d80:	cmp	r15, 1
0x2d84:	je	0x2be9


0x2488:	cmp	byte ptr [rsp + 0xd], 1
0x248d:	jne	0x25a2


0x2d41:	add	rbp, 1
0x2d45:	cmp	rbp, rcx
0x2d48:	jae	0x24cc


0x2d33:	cmp	r13, r15
0x2d36:	jbe	0x2d3d


0x2c81:	mov	esi, r8d
0x2c84:	xor	esi, 1
0x2c87:	and	al, sil
0x2c8a:	je	0x2cbb


0x3130:	movzx	ebx, byte ptr [rsp + 0xf]
0x3135:	mov	rbp, r11
0x3138:	mov	byte ptr [rsp + 0xd], bl
0x313c:	jmp	0x2de9


0x31b7:	jmp	0x31d8


0x31c7:	add	rax, 1
0x31cb:	lea	rdx, [rbp + rax]
0x31d0:	cmp	r11, rdx
0x31d3:	ja	0x31c0


0x2d8a:	mov	rdi, qword ptr [rsp + 0x10]
0x2d8f:	lea	rcx, [rdi + r15]
0x2d93:	lea	rdx, [rdi + r14 + 1]
0x2d98:	lea	r8, [rcx + r14]
0x2d9c:	jmp	0x2dad


0x2493:	test	dl, dl
0x2495:	jne	0x25a2


0x25a2:	cmp	byte ptr [rsp + 0xf], 0
0x25a7:	jne	0x249b


0x2d4e:	test	al, al
0x2d50:	je	0x314e


0x24cc:	test	al, al
0x24ce:	je	0x24f0


0x2d3d:	add	r15, 1
0x2d41:	add	rbp, 1
0x2d45:	cmp	rbp, rcx
0x2d48:	jae	0x24cc


0x2d38:	mov	byte ptr [r14 + r15], 0x5c
0x2d3d:	add	r15, 1
0x2d41:	add	rbp, 1
0x2d45:	cmp	rbp, rcx
0x2d48:	jae	0x24cc


0x2cbb:	cmp	r13, r15
0x2cbe:	jbe	0x2cc5


0x2c8c:	cmp	r13, r15
0x2c8f:	jbe	0x2c96


0x31d5:	mov	rdi, rax
0x31d8:	movzx	edx, byte ptr [rsp + 0xd]
0x31dd:	xor	r12d, r12d
0x31e0:	jmp	0x2c46


0x31c0:	cmp	byte ptr [r9 + rax], 0
0x31c5:	je	0x31d5


0x2dad:	movzx	ecx, byte ptr [rdx]
0x2db0:	sub	ecx, 0x5b
0x2db3:	cmp	cl, 0x21
0x2db6:	ja	0x2da0


0x249b:	mov	rsi, qword ptr [rsp + 0x20]
0x24a0:	test	rsi, rsi
0x24a3:	je	0x24b9


0x25ad:	jmp	0x24b9


0x314e:	xor	r10d, r10d
0x3151:	jmp	0x2d0d


0x2d56:	cmp	r13, r15
0x2d59:	jbe	0x2d60


0x24f0:	cmp	r15, r13
0x24f3:	jae	0x24f9


0x24d0:	cmp	r13, r15
0x24d3:	jbe	0x24da


0x2cc5:	lea	rax, [r15 + 1]
0x2cc9:	cmp	r13, rax
0x2ccc:	jbe	0x2cdb


0x2cc0:	mov	byte ptr [r14 + r15], 0x5c
0x2cc5:	lea	rax, [r15 + 1]
0x2cc9:	cmp	r13, rax
0x2ccc:	jbe	0x2cdb


0x2c96:	lea	rsi, [r15 + 1]
0x2c9a:	cmp	r13, rsi
0x2c9d:	jbe	0x2ca5


0x2c91:	mov	byte ptr [r14 + r15], 0x27
0x2c96:	lea	rsi, [r15 + 1]
0x2c9a:	cmp	r13, rsi
0x2c9d:	jbe	0x2ca5


0x2db8:	mov	esi, 1
0x2dbd:	shl	rsi, cl
0x2dc0:	mov	rcx, rsi
0x2dc3:	movabs	rsi, 0x20000002b
0x2dcd:	test	rcx, rsi
0x2dd0:	je	0x2da0


0x2da0:	add	rdx, 1
0x2da4:	cmp	r8, rdx
0x2da7:	je	0x2be9


0x24b9:	test	r10b, r10b
0x24bc:	jne	0x2603


0x24a5:	mov	edx, ebx
0x24a7:	shr	dl, 5
0x24aa:	movzx	edx, dl
0x24ad:	mov	edx, dword ptr [rsi + rdx*4]
0x24b0:	bt	edx, ebx
0x24b3:	jb	0x2603


0x2d0d:	cmp	r13, r15
0x2d10:	jbe	0x2d16


0x2d60:	lea	rax, [r15 + 1]
0x2d64:	cmp	r13, rax
0x2d67:	jbe	0x2d6f


0x2d5b:	mov	byte ptr [r14 + r15], 0x27
0x2d60:	lea	rax, [r15 + 1]
0x2d64:	cmp	r13, rax
0x2d67:	jbe	0x2d6f


0x24f5:	mov	byte ptr [r14 + r15], bl
0x24f9:	movzx	edi, byte ptr [rsp + 0xe]
0x24fe:	add	r15, 1
0x2502:	mov	eax, 0
0x2507:	test	r12b, r12b
0x250a:	cmove	edi, eax
0x250d:	mov	byte ptr [rsp + 0xe], dil
0x2512:	jmp	0x2348


0x24f9:	movzx	edi, byte ptr [rsp + 0xe]
0x24fe:	add	r15, 1
0x2502:	mov	eax, 0
0x2507:	test	r12b, r12b
0x250a:	cmove	edi, eax
0x250d:	mov	byte ptr [rsp + 0xe], dil
0x2512:	jmp	0x2348


0x24da:	lea	rax, [r15 + 1]
0x24de:	cmp	r13, rax
0x24e1:	jbe	0x24e9


0x24d5:	mov	byte ptr [r14 + r15], 0x27
0x24da:	lea	rax, [r15 + 1]
0x24de:	cmp	r13, rax
0x24e1:	jbe	0x24e9


0x2cdb:	lea	rax, [r15 + 2]
0x2cdf:	cmp	r13, rax
0x2ce2:	jbe	0x2cf4


0x2cce:	mov	eax, ebx
0x2cd0:	shr	al, 6
0x2cd3:	add	eax, 0x30
0x2cd6:	mov	byte ptr [r14 + r15 + 1], al
0x2cdb:	lea	rax, [r15 + 2]
0x2cdf:	cmp	r13, rax
0x2ce2:	jbe	0x2cf4


0x2ca5:	lea	rsi, [r15 + 2]
0x2ca9:	cmp	r13, rsi
0x2cac:	jbe	0x2cb4


0x2c9f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x2ca5:	lea	rsi, [r15 + 2]
0x2ca9:	cmp	r13, rsi
0x2cac:	jbe	0x2cb4


0x2dd2:	mov	r14, qword ptr [rsp + 0x40]
0x2dd7:	mov	r13, qword ptr [rsp + 0x70]
0x2ddc:	mov	rbp, qword ptr [rsp + 0x30]
0x2de1:	mov	dword ptr [rsp + 8], 2
0x2de9:	cmp	byte ptr [rsp + 0xd], 0
0x2dee:	je	0x2e00


0x24c2:	xor	eax, 1
0x24c5:	add	rbp, 1
0x24c9:	and	eax, r8d
0x24cc:	test	al, al
0x24ce:	je	0x24f0


0x2603:	cmp	dword ptr [rsp + 8], 2
0x2608:	sete	dl
0x260b:	cmp	byte ptr [rsp + 0xf], 0
0x2610:	mov	eax, edx
0x2612:	jne	0x2e68


0x2d16:	movzx	ebx, byte ptr [rdi + rbp]
0x2d1a:	add	r15, 1
0x2d1e:	test	dl, dl
0x2d20:	jne	0x2c70


0x2d12:	mov	byte ptr [r14 + r15], bl
0x2d16:	movzx	ebx, byte ptr [rdi + rbp]
0x2d1a:	add	r15, 1
0x2d1e:	test	dl, dl
0x2d20:	jne	0x2c70


0x2d6f:	add	r15, 2
0x2d73:	xor	r10d, r10d
0x2d76:	xor	r8d, r8d
0x2d79:	jmp	0x2d0d


0x2d69:	mov	byte ptr [r14 + r15 + 1], 0x27
0x2d6f:	add	r15, 2
0x2d73:	xor	r10d, r10d
0x2d76:	xor	r8d, r8d
0x2d79:	jmp	0x2d0d


0x2348:	cmp	r11, rbp
0x234b:	setne	r12b
0x234f:	cmp	r11, -1
0x2353:	jne	0x2362


0x24e9:	add	r15, 2
0x24ed:	xor	r8d, r8d
0x24f0:	cmp	r15, r13
0x24f3:	jae	0x24f9


0x24e3:	mov	byte ptr [r14 + r15 + 1], 0x27
0x24e9:	add	r15, 2
0x24ed:	xor	r8d, r8d
0x24f0:	cmp	r15, r13
0x24f3:	jae	0x24f9


0x2cf4:	and	ebx, 7
0x2cf7:	add	rbp, 1
0x2cfb:	add	r15, 3
0x2cff:	add	ebx, 0x30
0x2d02:	cmp	rbp, rcx
0x2d05:	jae	0x24f0


0x2ce4:	mov	eax, ebx
0x2ce6:	shr	al, 3
0x2ce9:	and	eax, 7
0x2cec:	add	eax, 0x30
0x2cef:	mov	byte ptr [r14 + r15 + 2], al
0x2cf4:	and	ebx, 7
0x2cf7:	add	rbp, 1
0x2cfb:	add	r15, 3
0x2cff:	add	ebx, 0x30
0x2d02:	cmp	rbp, rcx
0x2d05:	jae	0x24f0


0x2cb4:	add	r15, 3
0x2cb8:	mov	r8d, eax
0x2cbb:	cmp	r13, r15
0x2cbe:	jbe	0x2cc5


0x2cae:	mov	byte ptr [r14 + r15 + 2], 0x27
0x2cb4:	add	r15, 3
0x2cb8:	mov	r8d, eax
0x2cbb:	cmp	r13, r15
0x2cbe:	jbe	0x2cc5


0x2618:	mov	eax, r8d
0x261b:	xor	eax, 1
0x261e:	and	al, dl
0x2620:	je	0x2651


0x2e68:	mov	rbp, r11
0x2e6b:	jmp	0x2de9


0x2d0b:	mov	esi, edx
0x2d0d:	cmp	r13, r15
0x2d10:	jbe	0x2d16


0x2651:	cmp	r13, r15
0x2654:	jbe	0x265b


0x2622:	cmp	r13, r15
0x2625:	jbe	0x262c


0x265b:	add	r15, 1
0x265f:	add	rbp, 1
0x2663:	jmp	0x24f0


0x2656:	mov	byte ptr [r14 + r15], 0x5c
0x265b:	add	r15, 1
0x265f:	add	rbp, 1
0x2663:	jmp	0x24f0


0x262c:	lea	rdx, [r15 + 1]
0x2630:	cmp	r13, rdx
0x2633:	jbe	0x263b


0x2627:	mov	byte ptr [r14 + r15], 0x27
0x262c:	lea	rdx, [r15 + 1]
0x2630:	cmp	r13, rdx
0x2633:	jbe	0x263b


0x263b:	lea	rdx, [r15 + 2]
0x263f:	cmp	r13, rdx
0x2642:	jbe	0x264a


0x2635:	mov	byte ptr [r14 + r15 + 1], 0x24
0x263b:	lea	rdx, [r15 + 2]
0x263f:	cmp	r13, rdx
0x2642:	jbe	0x264a


0x264a:	add	r15, 3
0x264e:	mov	r8d, eax
0x2651:	cmp	r13, r15
0x2654:	jbe	0x265b


0x2644:	mov	byte ptr [r14 + r15 + 2], 0x27
0x264a:	add	r15, 3
0x264e:	mov	r8d, eax
0x2651:	cmp	r13, r15
0x2654:	jbe	0x265b


0x2bf5:	mov	rdi, qword ptr [rsp + 0x28]
0x2bfa:	test	eax, eax
0x2bfc:	mov	eax, 0
0x2c01:	cmove	r12d, eax
0x2c05:	add	rbx, r15
0x2c08:	call	0x16b0


0x2c0d:	test	eax, eax
0x2c0f:	je	0x2b93


0x2b93:	mov	rax, qword ptr [rsp + 0x10]
0x2b98:	lea	r14, [rbp + rbx]
0x2b9d:	mov	rdx, qword ptr [rsp + 0x30]
0x2ba2:	mov	rcx, qword ptr [rsp + 0x28]
0x2ba7:	mov	rdi, qword ptr [rsp + 0x38]
0x2bac:	lea	r13, [rax + r14]
0x2bb0:	sub	rdx, r14
0x2bb3:	mov	rsi, r13
0x2bb6:	call	0x4c00


0x23bc:	movzx	r8d, byte ptr [rsp + 0x38]
0x23c2:	movzx	r10d, byte ptr [rsp + 0x30]
0x23c8:	mov	r11, rax
0x23cb:	mov	r9, qword ptr [rsp + 0x28]
0x23d0:	cmp	rbx, r11
0x23d3:	mov	byte ptr [rsp + 0x28], r10b
0x23d8:	ja	0x2990


0x2b40:	movzx	r8d, byte ptr [rsp + 0x40]
0x2b46:	movzx	r10d, byte ptr [rsp + 0x38]
0x2b4c:	mov	r11, rax
0x2b4f:	mov	r9, qword ptr [rsp + 0x30]
0x2b54:	lea	rax, [rsp + 0x9c]
0x2b5c:	xor	ecx, ecx
0x2b5e:	mov	byte ptr [rsp + 0x7e], bl
0x2b62:	mov	byte ptr [rsp + 0x7d], r8b
0x2b67:	mov	rbx, rcx
0x2b6a:	mov	qword ptr [rsp + 0x88], r9
0x2b72:	mov	qword ptr [rsp + 0x38], rax
0x2b77:	mov	byte ptr [rsp + 0x7f], r10b
0x2b7c:	mov	qword ptr [rsp + 0x80], r15
0x2b84:	mov	qword ptr [rsp + 0x40], r14
0x2b89:	mov	qword ptr [rsp + 0x70], r13
0x2b8e:	mov	qword ptr [rsp + 0x30], r11
0x2b93:	mov	rax, qword ptr [rsp + 0x10]
0x2b98:	lea	r14, [rbp + rbx]
0x2b9d:	mov	rdx, qword ptr [rsp + 0x30]
0x2ba2:	mov	rcx, qword ptr [rsp + 0x28]
0x2ba7:	mov	rdi, qword ptr [rsp + 0x38]
0x2bac:	lea	r13, [rax + r14]
0x2bb0:	sub	rdx, r14
0x2bb3:	mov	rsi, r13
0x2bb6:	call	0x4c00


0x2778:	mov	rcx, qword ptr [rax]
0x277b:	movzx	edx, bl
0x277e:	movzx	r10d, byte ptr [rsp + 0x28]
0x2784:	movzx	r8d, byte ptr [rsp + 0x30]
0x278a:	mov	r11, qword ptr [rsp + 0x38]
0x278f:	mov	edi, 1
0x2794:	movzx	eax, word ptr [rcx + rdx*2]
0x2798:	and	ax, 0x4000
0x279c:	setne	r12b
0x27a0:	sete	al
0x27a3:	and	al, byte ptr [rsp + 0xd]
0x27a7:	test	al, al
0x27a9:	jne	0x3141


0x2450:	xor	r10d, r10d
0x2453:	cmp	r11, 1
0x2457:	setne	al
0x245a:	cmp	r11, -1
0x245e:	jne	0x246c


0x2460:	mov	rax, qword ptr [rsp + 0x10]
0x2465:	cmp	byte ptr [rax + 1], 0
0x2469:	setne	al
0x246c:	cmp	dword ptr [rsp + 8], 2
0x2471:	sete	dl
0x2474:	test	al, al
0x2476:	je	0x26c8


0x246c:	cmp	dword ptr [rsp + 8], 2
0x2471:	sete	dl
0x2474:	test	al, al
0x2476:	je	0x26c8


0x26c8:	test	rbp, rbp
0x26cb:	jne	0x247c


0x247c:	xor	r12d, r12d
0x247f:	xor	eax, eax
0x2481:	nop	dword ptr [rax]
0x2488:	cmp	byte ptr [rsp + 0xd], 1
0x248d:	jne	0x25a2


0x26d1:	movzx	eax, byte ptr [rsp + 0xf]
0x26d6:	and	al, dl
0x26d8:	je	0x2488


0x26de:	mov	rbp, r11
0x26e1:	mov	dword ptr [rsp + 8], 2
0x26e9:	jmp	0x2de9


0x2ae8:	cmp	byte ptr [rsp + 0xf], 0
0x2aed:	jne	0x3310


0x2530:	cmp	eax, 5
0x2533:	je	0x2aa8


0x2af3:	xor	r12d, r12d
0x2af6:	xor	eax, eax
0x2af8:	mov	ebx, 0x3f
0x2afd:	jmp	0x24b9


0x3310:	mov	rbp, r11
0x3313:	movzx	eax, byte ptr [rsp + 0xf]
0x3318:	jmp	0x2de9


0x2aa8:	test	byte ptr [rsp + 0x78], 4
0x2aad:	je	0x2ad0


0x2539:	cmp	eax, 2
0x253c:	mov	ebx, 0x3f
0x2541:	sete	dl
0x2544:	xor	r12d, r12d
0x2547:	xor	eax, eax
0x2549:	jmp	0x2488


0x2ad0:	xor	edx, edx
0x2ad2:	xor	r12d, r12d
0x2ad5:	xor	eax, eax
0x2ad7:	mov	ebx, 0x3f
0x2adc:	jmp	0x2488


0x2aaf:	lea	rcx, [rbp + 2]
0x2ab3:	cmp	rcx, r11
0x2ab6:	jae	0x2ad0


0x2ab8:	mov	rax, qword ptr [rsp + 0x10]
0x2abd:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x2ac2:	je	0x3252


0x3252:	movzx	ebx, byte ptr [rax + rcx]
0x3256:	cmp	bl, 0x3e
0x3259:	ja	0x2ad0


0x325f:	movabs	rax, 0x7000a38200000000
0x3269:	bt	rax, rbx
0x326d:	jae	0x2ad0


0x3273:	cmp	byte ptr [rsp + 0xf], 0
0x3278:	jne	0x3462


0x327e:	cmp	r13, r15
0x3281:	jbe	0x3288


0x3462:	mov	rbp, r11
0x3465:	jmp	0x2e00


0x3288:	lea	rax, [r15 + 1]
0x328c:	cmp	r13, rax
0x328f:	jbe	0x3297


0x3283:	mov	byte ptr [r14 + r15], 0x3f
0x3288:	lea	rax, [r15 + 1]
0x328c:	cmp	r13, rax
0x328f:	jbe	0x3297


0x3297:	lea	rax, [r15 + 2]
0x329b:	cmp	r13, rax
0x329e:	jbe	0x32a6


0x3291:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3297:	lea	rax, [r15 + 2]
0x329b:	cmp	r13, rax
0x329e:	jbe	0x32a6


0x32a6:	lea	rax, [r15 + 3]
0x32aa:	cmp	r13, rax
0x32ad:	jbe	0x32b5


0x32a0:	mov	byte ptr [r14 + r15 + 2], 0x22
0x32a6:	lea	rax, [r15 + 3]
0x32aa:	cmp	r13, rax
0x32ad:	jbe	0x32b5


0x32b5:	add	r15, 4
0x32b9:	xor	edx, edx
0x32bb:	xor	r12d, r12d
0x32be:	xor	eax, eax
0x32c0:	mov	rbp, rcx
0x32c3:	jmp	0x2488


0x32af:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x32b5:	add	r15, 4
0x32b9:	xor	edx, edx
0x32bb:	xor	r12d, r12d
0x32be:	xor	eax, eax
0x32c0:	mov	rbp, rcx
0x32c3:	jmp	0x2488


0x2a60:	cmp	byte ptr [rsp + 0xf], 0
0x2a65:	jne	0x3310


0x255e:	mov	byte ptr [rsp + 0x7c], r12b
0x2563:	xor	edx, edx
0x2565:	xor	eax, eax
0x2567:	mov	ebx, 0x27
0x256c:	jmp	0x2488


0x2a6b:	test	r13, r13
0x2a6e:	je	0x2e70


0x2e70:	cmp	r13, r15
0x2e73:	jbe	0x2e7a


0x2a74:	xor	edx, edx
0x2a76:	cmp	qword ptr [rsp + 0x50], 0
0x2a7c:	jne	0x2e70


0x2e7a:	lea	rax, [r15 + 1]
0x2e7e:	cmp	r13, rax
0x2e81:	jbe	0x2e89


0x2e75:	mov	byte ptr [r14 + r15], 0x27
0x2e7a:	lea	rax, [r15 + 1]
0x2e7e:	cmp	r13, rax
0x2e81:	jbe	0x2e89


0x2a82:	mov	qword ptr [rsp + 0x50], r13
0x2a87:	add	r15, 3
0x2a8b:	xor	eax, eax
0x2a8d:	mov	byte ptr [rsp + 0x7c], r12b
0x2a92:	xor	r8d, r8d
0x2a95:	mov	r13, rdx
0x2a98:	mov	ebx, 0x27
0x2a9d:	jmp	0x24b9


0x2e89:	lea	rax, [r15 + 2]
0x2e8d:	cmp	r13, rax
0x2e90:	jbe	0x3482


0x2e83:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x2e89:	lea	rax, [r15 + 2]
0x2e8d:	cmp	r13, rax
0x2e90:	jbe	0x3482


0x3482:	mov	rdx, r13
0x3485:	mov	r13, qword ptr [rsp + 0x50]
0x348a:	jmp	0x2a82


0x2e96:	mov	rdx, r13
0x2e99:	mov	byte ptr [r14 + r15 + 2], 0x27
0x2e9f:	mov	r13, qword ptr [rsp + 0x50]
0x2ea4:	jmp	0x2a82


0x2594:	cmp	byte ptr [rsp + 0xd], 0
0x2599:	jne	0x2600


0x259b:	mov	ebx, edx
0x259d:	xor	r12d, r12d
0x25a0:	xor	eax, eax
0x25a2:	cmp	byte ptr [rsp + 0xf], 0
0x25a7:	jne	0x249b


0x2600:	xor	r12d, r12d
0x2603:	cmp	dword ptr [rsp + 8], 2
0x2608:	sete	dl
0x260b:	cmp	byte ptr [rsp + 0xf], 0
0x2610:	mov	eax, edx
0x2612:	jne	0x2e68


0x29a0:	cmp	byte ptr [rsp + 0xf], 0
0x29a5:	jne	0x3310


0x25d3:	cmp	byte ptr [rsp + 0xd], 0
0x25d8:	je	0x27f0


0x29ab:	add	rbp, 1
0x29af:	mov	eax, r8d
0x29b2:	xor	r12d, r12d
0x29b5:	mov	ebx, 0x5c
0x29ba:	jmp	0x24cc


0x27f0:	mov	edx, 0x5c
0x27f5:	mov	ebx, 0x5c
0x27fa:	jmp	0x2594


0x25de:	cmp	byte ptr [rsp + 0xf], 0
0x25e3:	je	0x27f0


0x25e9:	cmp	qword ptr [rsp + 0x18], 0
0x25ef:	jne	0x29ab


0x25f5:	mov	ebx, 0x5c
0x25fa:	nop	word ptr [rax + rax]
0x2600:	xor	r12d, r12d
0x2603:	cmp	dword ptr [rsp + 8], 2
0x2608:	sete	dl
0x260b:	cmp	byte ptr [rsp + 0xf], 0
0x2610:	mov	eax, edx
0x2612:	jne	0x2e68


0x267b:	xor	edx, edx
0x267d:	test	byte ptr [rsp + 0x78], 1
0x2682:	je	0x259b


0x2843:	cmp	dword ptr [rsp + 8], 2
0x2848:	sete	dl
0x284b:	cmp	byte ptr [rsp + 0xf], 0
0x2850:	jne	0x33ea


0x2688:	add	rbp, 1
0x268c:	jmp	0x2348


0x2856:	mov	eax, r8d
0x2859:	mov	rcx, r15
0x285c:	xor	eax, 1
0x285f:	and	al, dl
0x2861:	je	0x2890


0x33ea:	movzx	ebx, byte ptr [rsp + 0xf]
0x33ef:	mov	rbp, r11
0x33f2:	mov	eax, edx
0x33f4:	mov	byte ptr [rsp + 0xd], bl
0x33f8:	jmp	0x2de9


0x2890:	cmp	r13, rcx
0x2893:	jbe	0x289a


0x2863:	cmp	r13, r15
0x2866:	jbe	0x286d


0x289a:	cmp	dword ptr [rsp + 8], 2
0x289f:	lea	r15, [rcx + 1]
0x28a3:	je	0x2ea9


0x2895:	mov	byte ptr [r14 + rcx], 0x5c
0x289a:	cmp	dword ptr [rsp + 8], 2
0x289f:	lea	r15, [rcx + 1]
0x28a3:	je	0x2ea9


0x286d:	lea	rcx, [r15 + 1]
0x2871:	cmp	r13, rcx
0x2874:	jbe	0x287c


0x2868:	mov	byte ptr [r14 + r15], 0x27
0x286d:	lea	rcx, [r15 + 1]
0x2871:	cmp	r13, rcx
0x2874:	jbe	0x287c


0x2ea9:	mov	eax, r12d
0x2eac:	mov	ebx, 0x30
0x2eb1:	xor	r12d, r12d
0x2eb4:	jmp	0x24b9


0x28a9:	lea	rax, [rbp + 1]
0x28ad:	cmp	rax, r11
0x28b0:	jae	0x28cb


0x287c:	lea	rcx, [r15 + 2]
0x2880:	cmp	r13, rcx
0x2883:	ja	0x2eb9


0x2876:	mov	byte ptr [r14 + r15 + 1], 0x24
0x287c:	lea	rcx, [r15 + 2]
0x2880:	cmp	r13, rcx
0x2883:	ja	0x2eb9


0x28b2:	mov	rax, qword ptr [rsp + 0x10]
0x28b7:	movzx	eax, byte ptr [rax + rbp + 1]
0x28bc:	mov	byte ptr [rsp + 0x28], al
0x28c0:	sub	eax, 0x30
0x28c3:	cmp	al, 9
0x28c5:	jbe	0x30f9


0x28cb:	mov	eax, r12d
0x28ce:	mov	ebx, 0x30
0x28d3:	xor	r12d, r12d
0x28d6:	jmp	0x2488


0x2889:	lea	rcx, [r15 + 3]
0x288d:	mov	r8d, eax
0x2890:	cmp	r13, rcx
0x2893:	jbe	0x289a


0x2eb9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x2ebf:	jmp	0x2889


0x30f9:	cmp	r13, r15
0x30fc:	jbe	0x3103


0x3103:	lea	rax, [rcx + 2]
0x3107:	cmp	r13, rax
0x310a:	jbe	0x3112


0x30fe:	mov	byte ptr [r14 + r15], 0x30
0x3103:	lea	rax, [rcx + 2]
0x3107:	cmp	r13, rax
0x310a:	jbe	0x3112


0x3112:	mov	eax, r12d
0x3115:	lea	r15, [rcx + 3]
0x3119:	xor	r12d, r12d
0x311c:	mov	ebx, 0x30
0x3121:	jmp	0x2488


0x310c:	mov	byte ptr [r14 + rcx + 2], 0x30
0x3112:	mov	eax, r12d
0x3115:	lea	r15, [rcx + 3]
0x3119:	xor	r12d, r12d
0x311c:	mov	ebx, 0x30
0x3121:	jmp	0x2488


0x2582:	cmp	dword ptr [rsp + 8], 2
0x2587:	sete	al
0x258a:	and	al, byte ptr [rsp + 0xf]
0x258e:	jne	0x26de


0x2940:	mov	edx, 0xd
0x2945:	xor	r10d, r10d
0x2948:	mov	ebx, 0x72
0x294d:	jmp	0x2582


0x2ec4:	test	ebx, ebx
0x2ec6:	jne	0x22f3


0x2ecc:	mov	byte ptr [rsp + 0xd], 1
0x2ed1:	test	r13, r13
0x2ed4:	jne	0x346a


0x2eda:	lea	rax, [rip + 0x248c]
0x2ee1:	mov	qword ptr [rsp + 0x50], 0
0x2eea:	mov	byte ptr [rsp + 0xe], 1
0x2eef:	mov	byte ptr [rsp + 0x7c], 0
0x2ef4:	xor	r12d, r12d
0x2ef7:	mov	byte ptr [rsp + 0xf], 0
0x2efc:	mov	qword ptr [rsp + 0x18], 1
0x2f05:	mov	qword ptr [rsp + 0x48], rax
0x2f0a:	mov	r15d, 1
0x2f10:	mov	dword ptr [rsp + 8], 2
0x2f18:	jmp	0x2333


0x346a:	mov	byte ptr [rsp + 0xe], 1
0x346f:	xor	eax, eax
0x3471:	xor	r12d, r12d
0x3474:	mov	qword ptr [rsp + 0x50], 0
0x347d:	jmp	0x2a24


0x2a24:	lea	rbx, [rip + 0x2942]
0x2a2b:	mov	byte ptr [r14], 0x27
0x2a2f:	mov	dword ptr [rsp + 8], 2
0x2a37:	mov	r15d, 1
0x2a3d:	mov	qword ptr [rsp + 0x18], 1
0x2a46:	mov	byte ptr [rsp + 0xf], 0
0x2a4b:	mov	qword ptr [rsp + 0x48], rbx
0x2a50:	mov	byte ptr [rsp + 0x7c], al
0x2a54:	jmp	0x2333


0x2f28:	test	r13, r13
0x2f2b:	je	0x3156


0x331d:	lea	rax, [rip + 0x2047]
0x3324:	mov	byte ptr [rsp + 0xe], 1
0x3329:	mov	byte ptr [rsp + 0x7c], 0
0x332e:	xor	r12d, r12d
0x3331:	mov	qword ptr [rsp + 0x50], 0
0x333a:	mov	byte ptr [rsp + 0xf], 1
0x333f:	mov	byte ptr [rsp + 0xd], 1
0x3344:	mov	qword ptr [rsp + 0x18], 1
0x334d:	xor	r15d, r15d
0x3350:	mov	qword ptr [rsp + 0x48], rax
0x3355:	jmp	0x2333


0x3156:	mov	qword ptr [rsp + 0x50], 0
0x315f:	mov	byte ptr [rsp + 0xe], 1
0x3164:	xor	r12d, r12d
0x3167:	mov	byte ptr [rsp + 0x7c], 0
0x316c:	jmp	0x2f4b


0x2f31:	mov	byte ptr [r14], 0x22
0x2f35:	mov	byte ptr [rsp + 0xe], 1
0x2f3a:	xor	r12d, r12d
0x2f3d:	mov	byte ptr [rsp + 0x7c], 0
0x2f42:	mov	qword ptr [rsp + 0x50], 0
0x2f4b:	lea	rax, [rip + 0x2419]
0x2f52:	mov	byte ptr [rsp + 0xf], 0
0x2f57:	mov	byte ptr [rsp + 0xd], 1
0x2f5c:	mov	qword ptr [rsp + 0x18], 1
0x2f65:	mov	r15d, 1
0x2f6b:	mov	qword ptr [rsp + 0x48], rax
0x2f70:	jmp	0x2333


0x2f4b:	lea	rax, [rip + 0x2419]
0x2f52:	mov	byte ptr [rsp + 0xf], 0
0x2f57:	mov	byte ptr [rsp + 0xd], 1
0x2f5c:	mov	qword ptr [rsp + 0x18], 1
0x2f65:	mov	r15d, 1
0x2f6b:	mov	qword ptr [rsp + 0x48], rax
0x2f70:	jmp	0x2333


0x2f75:	lea	rax, [rip + 0x23ef]
0x2f7c:	mov	byte ptr [rsp + 0xe], 1
0x2f81:	mov	byte ptr [rsp + 0x7c], 0
0x2f86:	xor	r12d, r12d
0x2f89:	mov	qword ptr [rsp + 0x50], 0
0x2f92:	mov	byte ptr [rsp + 0xf], 1
0x2f97:	mov	byte ptr [rsp + 0xd], 1
0x2f9c:	mov	qword ptr [rsp + 0x18], 1
0x2fa5:	xor	r15d, r15d
0x2fa8:	mov	qword ptr [rsp + 0x48], rax
0x2fad:	mov	dword ptr [rsp + 8], 5
0x2fb5:	jmp	0x2333


0x2fba:	mov	byte ptr [rsp + 0xe], 1
0x2fbf:	mov	byte ptr [rsp + 0x7c], 0
0x2fc4:	xor	r12d, r12d
0x2fc7:	mov	qword ptr [rsp + 0x50], 0
0x2fd0:	mov	byte ptr [rsp + 0xf], 0
0x2fd5:	xor	r15d, r15d
0x2fd8:	mov	byte ptr [rsp + 0xd], 1
0x2fdd:	mov	qword ptr [rsp + 0x18], 0
0x2fe6:	mov	qword ptr [rsp + 0x48], 0
0x2fef:	jmp	0x2333


0x2ff4:	cmp	dword ptr [rsp + 8], 0xa
0x2ff9:	je	0x3051


0x3051:	xor	r15d, r15d
0x3054:	test	ebx, ebx
0x3056:	je	0x321d


0x2ffb:	lea	rsi, [rip + 0x236d]
0x3002:	xor	edi, edi
0x3004:	mov	edx, 5
0x3009:	call	0x14a0


0x321d:	mov	rdx, qword ptr [rsp + 0x68]
0x3222:	movzx	eax, byte ptr [rdx]
0x3225:	test	al, al
0x3227:	je	0x305c


0x305c:	test	ebx, ebx
0x305e:	mov	rbx, qword ptr [rsp + 0x60]
0x3063:	setne	byte ptr [rsp + 0xf]
0x3068:	xor	r12d, r12d
0x306b:	mov	rdi, rbx
0x306e:	call	0x14c0


0x3239:	add	r15, 1
0x323d:	movzx	eax, byte ptr [rdx + r15]
0x3242:	test	al, al
0x3244:	jne	0x3230


0x3235:	mov	byte ptr [r14 + r15], al
0x3239:	add	r15, 1
0x323d:	movzx	eax, byte ptr [rdx + r15]
0x3242:	test	al, al
0x3244:	jne	0x3230


0x3246:	jmp	0x305c


0x3230:	cmp	r13, r15
0x3233:	jbe	0x3239


0x3073:	mov	qword ptr [rsp + 0x48], rbx
0x3078:	mov	qword ptr [rsp + 0x18], rax
0x307d:	mov	byte ptr [rsp + 0xe], 1
0x3082:	mov	byte ptr [rsp + 0x7c], 0
0x3087:	mov	qword ptr [rsp + 0x50], 0
0x3090:	mov	byte ptr [rsp + 0xd], 1
0x3095:	jmp	0x2333


0x300e:	mov	rcx, rax
0x3011:	mov	qword ptr [rsp + 0x68], rax
0x3016:	lea	rax, [rip + 0x2352]
0x301d:	cmp	rcx, rax
0x3020:	je	0x33be


0x33be:	mov	esi, dword ptr [rsp + 8]
0x33c2:	mov	rdi, rcx
0x33c5:	call	0x2170


0x3026:	lea	rsi, [rip + 0x2340]
0x302d:	xor	edi, edi
0x302f:	mov	edx, 5
0x3034:	call	0x14a0


0x3039:	mov	rcx, rax
0x303c:	mov	qword ptr [rsp + 0x60], rax
0x3041:	lea	rax, [rip + 0x2325]
0x3048:	cmp	rcx, rax
0x304b:	je	0x33d4


0x33d4:	mov	esi, dword ptr [rsp + 8]
0x33d8:	mov	rdi, rcx
0x33db:	call	0x2170


0x33e0:	mov	qword ptr [rsp + 0x60], rax
0x33e5:	jmp	0x3051


0x33ca:	mov	qword ptr [rsp + 0x68], rax
0x33cf:	jmp	0x3026


0x309a:	mov	byte ptr [rsp + 0xe], 1
0x309f:	mov	byte ptr [rsp + 0x7c], 0
0x30a4:	xor	r12d, r12d
0x30a7:	mov	qword ptr [rsp + 0x50], 0
0x30b0:	mov	byte ptr [rsp + 0xf], 0
0x30b5:	xor	r15d, r15d
0x30b8:	mov	byte ptr [rsp + 0xd], 0
0x30bd:	mov	qword ptr [rsp + 0x18], 0
0x30c6:	mov	qword ptr [rsp + 0x48], 0
0x30cf:	jmp	0x2333


0x30d4:	mov	byte ptr [rsp + 0xe], 1
0x30d9:	mov	byte ptr [rsp + 0x7c], 0
0x30de:	xor	r12d, r12d
0x30e1:	mov	qword ptr [rsp + 0x50], 0
0x30ea:	mov	byte ptr [rsp + 0xf], 1
0x30ef:	mov	byte ptr [rsp + 0xd], 1
0x30f4:	jmp	0x2313


0x2313:	lea	rax, [rip + 0x3053]
0x231a:	mov	qword ptr [rsp + 0x18], 1
0x2323:	xor	r15d, r15d
0x2326:	mov	dword ptr [rsp + 8], 2
0x232e:	mov	qword ptr [rsp + 0x48], rax
0x2333:	xor	r11d, r11d
0x2336:	mov	rax, rbp
0x2339:	mov	r8d, r12d
0x233c:	mov	rbp, r11
0x233f:	mov	r11, rax
0x2342:	nop	word ptr [rax + rax]
0x2348:	cmp	r11, rbp
0x234b:	setne	r12b
0x234f:	cmp	r11, -1
0x2353:	jne	0x2362


0x32c8:	test	ebx, ebx
0x32ca:	je	0x3458


0x3458:	mov	byte ptr [rsp + 0xd], 0
0x345d:	jmp	0x2ed1


0x32d0:	lea	rax, [rip + 0x2096]
0x32d7:	mov	byte ptr [rsp + 0xe], 1
0x32dc:	mov	byte ptr [rsp + 0x7c], 0
0x32e1:	xor	r12d, r12d
0x32e4:	mov	qword ptr [rsp + 0x50], 0
0x32ed:	mov	byte ptr [rsp + 0xf], 1
0x32f2:	mov	byte ptr [rsp + 0xd], 0
0x32f7:	mov	qword ptr [rsp + 0x18], 1
0x3300:	xor	r15d, r15d
0x3303:	mov	qword ptr [rsp + 0x48], rax
0x3308:	jmp	0x2333


0x2ed1:	test	r13, r13
0x2ed4:	jne	0x346a


0x3494:	nop	
0x3496:	nop	word ptr cs:[rax + rax]


0x364b:	nop	dword ptr [rax + rax]


0x3686:	nop	word ptr cs:[rax + rax]


0x36a1:	nop	dword ptr [rax + rax]
0x36a6:	nop	word ptr cs:[rax + rax]


0x36c1:	nop	dword ptr [rax + rax]
0x36c6:	nop	word ptr cs:[rax + rax]


0x3705:	nop	
0x3706:	nop	word ptr cs:[rax + rax]


0x3725:	nop	
0x3726:	nop	word ptr cs:[rax + rax]


0x37d4:	nop	
0x37d6:	nop	word ptr cs:[rax + rax]


0x38c3:	nop	dword ptr [rax]
0x38c6:	nop	word ptr cs:[rax + rax]


0x38da:	nop	word ptr [rax + rax]


0x3973:	nop	dword ptr [rax]
0x3976:	nop	word ptr cs:[rax + rax]


0x3993:	nop	dword ptr [rax]
0x3996:	nop	word ptr cs:[rax + rax]


0x39ac:	nop	dword ptr [rax]


0x39c8:	nop	dword ptr [rax + rax]


0x39e4:	nop	
0x39e6:	nop	word ptr cs:[rax + rax]


0x3a7e:	nop	


0x3b0a:	nop	word ptr [rax + rax]


0x3b1c:	nop	dword ptr [rax]


0x3b2f:	nop	


0x3bc8:	nop	dword ptr [rax + rax]


0x3bf1:	nop	dword ptr [rax + rax]
0x3bf6:	nop	word ptr cs:[rax + rax]


0x3c0a:	nop	word ptr [rax + rax]


0x3c9e:	nop	


0x3d31:	nop	dword ptr [rax + rax]
0x3d36:	nop	word ptr cs:[rax + rax]


0x3d4c:	nop	dword ptr [rax]


0x3d67:	nop	word ptr [rax + rax]


0x3d83:	nop	dword ptr [rax]
0x3d86:	nop	word ptr cs:[rax + rax]


0x3d9c:	nop	dword ptr [rax]


0x3db4:	nop	
0x3db6:	nop	word ptr cs:[rax + rax]


0x3dd3:	nop	dword ptr [rax]
0x3dd6:	nop	word ptr cs:[rax + rax]


0x3df8:	nop	dword ptr [rax + rax]


0x4217:	nop	word ptr [rax + rax]


0x42b8:	nop	dword ptr [rax + rax]


0x4395:	nop	
0x4396:	nop	word ptr cs:[rax + rax]


0x443a:	nop	word ptr [rax + rax]


0x4464:	nop	
0x4466:	nop	word ptr cs:[rax + rax]


0x4472:	nop	dword ptr [rax]
0x4476:	nop	word ptr cs:[rax + rax]


0x44b6:	nop	word ptr cs:[rax + rax]


0x44e4:	nop	
0x44e6:	nop	word ptr cs:[rax + rax]


0x4572:	nop	dword ptr [rax]
0x4576:	nop	word ptr cs:[rax + rax]


0x45ca:	nop	word ptr [rax + rax]


0x45e7:	nop	word ptr [rax + rax]


0x461e:	nop	


0x4648:	nop	dword ptr [rax + rax]


0x4663:	nop	word ptr cs:[rax + rax]
0x466d:	nop	dword ptr [rax]


0x46a5:	nop	word ptr cs:[rax + rax]
0x46af:	nop	


0x47d1:	nop	word ptr cs:[rax + rax]
0x47db:	nop	dword ptr [rax + rax]


0x49b8:	mov	rax, rbx
0x49bb:	mul	rsi
0x49be:	jo	0x4bb1


0x4bb1:	or	rax, 0xffffffffffffffff
0x4bb5:	mov	r8d, 1
0x4bbb:	jmp	0x49c7


0x49c4:	xor	r8d, r8d
0x49c7:	mul	rsi
0x49ca:	jo	0x4ba2


0x49c7:	mul	rsi
0x49ca:	jo	0x4ba2


0x4ba2:	mov	r8d, 1
0x4ba8:	or	rbx, 0xffffffffffffffff
0x4bac:	jmp	0x49d3


0x49d0:	mov	rbx, rax
0x49d3:	or	ebp, r8d
0x49d6:	nop	word ptr cs:[rax + rax]
0x49e0:	movsxd	rdi, edi
0x49e3:	mov	eax, ebp
0x49e5:	add	rcx, rdi
0x49e8:	or	eax, 2
0x49eb:	mov	qword ptr [r15], rcx
0x49ee:	cmp	byte ptr [rcx], 0
0x49f1:	mov	qword ptr [r14], rbx
0x49f4:	cmovne	ebp, eax
0x49f7:	jmp	0x48bd


0x49d3:	or	ebp, r8d
0x49d6:	nop	word ptr cs:[rax + rax]
0x49e0:	movsxd	rdi, edi
0x49e3:	mov	eax, ebp
0x49e5:	add	rcx, rdi
0x49e8:	or	eax, 2
0x49eb:	mov	qword ptr [r15], rcx
0x49ee:	cmp	byte ptr [rcx], 0
0x49f1:	mov	qword ptr [r14], rbx
0x49f4:	cmovne	ebp, eax
0x49f7:	jmp	0x48bd


0x4a07:	mov	edx, 2
0x4a0c:	mov	rax, rdx
0x4a0f:	mul	rbx
0x4a12:	jo	0x4aae


0x4aae:	mov	ebp, 1
0x4ab3:	or	rbx, 0xffffffffffffffff
0x4ab7:	jmp	0x49e0


0x4a18:	add	rbx, rbx
0x4a1b:	jmp	0x49e0


0x49e0:	movsxd	rdi, edi
0x49e3:	mov	eax, ebp
0x49e5:	add	rcx, rdi
0x49e8:	or	eax, 2
0x49eb:	mov	qword ptr [r15], rcx
0x49ee:	cmp	byte ptr [rcx], 0
0x49f1:	mov	qword ptr [r14], rbx
0x49f4:	cmovne	ebp, eax
0x49f7:	jmp	0x48bd


0x4a1d:	mov	edx, 0x200
0x4a22:	mov	rax, rdx
0x4a25:	mul	rbx
0x4a28:	jo	0x4aae


0x4a2e:	shl	rbx, 9
0x4a32:	jmp	0x49e0


0x4a34:	mov	r8d, 7
0x4a3a:	xor	r9d, r9d
0x4a3d:	nop	dword ptr [rax]
0x4a40:	mov	rax, rbx
0x4a43:	mul	rsi
0x4a46:	mov	rbx, rax
0x4a49:	jo	0x4bde


0x4bde:	mov	r9d, 1
0x4be4:	or	rbx, 0xffffffffffffffff
0x4be8:	jmp	0x4a4f


0x4a4f:	sub	r8d, 1
0x4a53:	jne	0x4a40


0x4a55:	or	ebp, r9d
0x4a58:	jmp	0x49e0


0x4a40:	mov	rax, rbx
0x4a43:	mul	rsi
0x4a46:	mov	rbx, rax
0x4a49:	jo	0x4bde


0x4a5a:	mov	r8d, 8
0x4a60:	xor	r9d, r9d
0x4a63:	nop	dword ptr [rax + rax]
0x4a68:	mov	rax, rbx
0x4a6b:	mul	rsi
0x4a6e:	mov	rbx, rax
0x4a71:	jo	0x4bc0


0x4bc0:	mov	r9d, 1
0x4bc6:	or	rbx, 0xffffffffffffffff
0x4bca:	jmp	0x4a77


0x4a77:	sub	r8d, 1
0x4a7b:	jne	0x4a68


0x4a7d:	jmp	0x4a55


0x4a68:	mov	rax, rbx
0x4a6b:	mul	rsi
0x4a6e:	mov	rbx, rax
0x4a71:	jo	0x4bc0


0x4a7f:	mov	r8d, 4
0x4a85:	xor	r9d, r9d
0x4a88:	mov	rax, rbx
0x4a8b:	mul	rsi
0x4a8e:	mov	rbx, rax
0x4a91:	jo	0x4b93


0x4b93:	mov	r9d, 1
0x4b99:	or	rbx, 0xffffffffffffffff
0x4b9d:	jmp	0x4a97


0x4a97:	sub	r8d, 1
0x4a9b:	jne	0x4a88


0x4a9d:	jmp	0x4a55


0x4a88:	mov	rax, rbx
0x4a8b:	mul	rsi
0x4a8e:	mov	rbx, rax
0x4a91:	jo	0x4b93


0x4a9f:	mov	rax, rbx
0x4aa2:	mul	rsi
0x4aa5:	mov	rbx, rax
0x4aa8:	jno	0x49e0


0x4bcf:	mov	r9d, 1
0x4bd5:	or	rbx, 0xffffffffffffffff
0x4bd9:	jmp	0x4ad8


0x4ad8:	sub	r8d, 1
0x4adc:	jne	0x4ac9


0x4ade:	jmp	0x4a55


0x4ac9:	mov	rax, rbx
0x4acc:	mul	rsi
0x4acf:	mov	rbx, rax
0x4ad2:	jo	0x4bcf


0x4ae3:	mov	r8d, 6
0x4ae9:	xor	r9d, r9d
0x4aec:	mov	rax, rbx
0x4aef:	mul	rsi
0x4af2:	mov	rbx, rax
0x4af5:	jo	0x4b84


0x4b84:	mov	r9d, 1
0x4b8a:	or	rbx, 0xffffffffffffffff
0x4b8e:	jmp	0x4afb


0x4afb:	sub	r8d, 1
0x4aff:	jne	0x4aec


0x4b01:	jmp	0x4a55


0x4aec:	mov	rax, rbx
0x4aef:	mul	rsi
0x4af2:	mov	rbx, rax
0x4af5:	jo	0x4b84


0x4b06:	mov	edx, 0x400
0x4b0b:	mov	rax, rdx
0x4b0e:	mul	rbx
0x4b11:	jo	0x4aae


0x4b13:	shl	rbx, 0xa
0x4b17:	jmp	0x49e0


0x4b1c:	mov	rax, rbx
0x4b1f:	mul	rsi
0x4b22:	jo	0x4bed


0x4bed:	mov	r8d, 1
0x4bf3:	or	rax, 0xffffffffffffffff
0x4bf7:	jmp	0x4b2b


0x4b28:	xor	r8d, r8d
0x4b2b:	mul	rsi
0x4b2e:	jno	0x49c7


0x4b2b:	mul	rsi
0x4b2e:	jno	0x49c7


0x4b34:	mov	r8d, 1
0x4b3a:	or	rax, 0xffffffffffffffff
0x4b3e:	jmp	0x49c7


0x4bfc:	nop	dword ptr [rax]


0x4c83:	nop	word ptr cs:[rax + rax]
0x4c8d:	nop	dword ptr [rax]


0x4d0d:	nop	dword ptr [rax]


0x4dac:	nop	dword ptr [rax]


0x4e2b:	nop	dword ptr [rax + rax]


0x4ec7:	nop	word ptr [rax + rax]


0x4f35:	nop	
0x4f36:	nop	word ptr cs:[rax + rax]


0x4f42:	nop	word ptr cs:[rax + rax]
0x4f4c:	nop	dword ptr [rax]


0x2520:	xor	r10d, r10d
0x2523:	mov	eax, dword ptr [rsp + 8]
0x2527:	cmp	eax, 2
0x252a:	je	0x2ae8


0x2550:	xor	r10d, r10d
0x2553:	cmp	dword ptr [rsp + 8], 2
0x2558:	je	0x2a60


0x2578:	mov	edx, 9
0x257d:	mov	ebx, 0x74
0x2582:	cmp	dword ptr [rsp + 8], 2
0x2587:	sete	al
0x258a:	and	al, byte ptr [rsp + 0xf]
0x258e:	jne	0x26de


0x25b8:	mov	edx, 8
0x25bd:	mov	ebx, 0x62
0x25c2:	jmp	0x2594


0x25c8:	cmp	dword ptr [rsp + 8], 2
0x25cd:	je	0x29a0


0x2670:	cmp	byte ptr [rsp + 0xd], 0
0x2675:	jne	0x2843


0x2698:	cmp	dword ptr [rsp + 8], 2
0x269d:	sete	dl
0x26a0:	xor	eax, eax
0x26a2:	jmp	0x2488


0x26b0:	mov	edx, 7
0x26b5:	mov	ebx, 0x61
0x26ba:	jmp	0x2594


0x26c0:	cmp	dword ptr [rsp + 8], 2
0x26c5:	sete	dl
0x26c8:	test	rbp, rbp
0x26cb:	jne	0x247c


0x26f0:	cmp	dword ptr [rsp + 8], 2
0x26f5:	sete	dl
0x26f8:	xor	r12d, r12d
0x26fb:	jmp	0x26d1


0x2700:	cmp	dword ptr [rsp + 8], 2
0x2705:	mov	ebx, 0x20
0x270a:	sete	dl
0x270d:	jmp	0x26d1


0x2710:	mov	edx, 0xd
0x2715:	mov	ebx, 0x72
0x271a:	jmp	0x2582


0x2720:	mov	edx, 0xc
0x2725:	mov	ebx, 0x66
0x272a:	jmp	0x2594


0x2730:	mov	edx, 0xb
0x2735:	mov	ebx, 0x76
0x273a:	jmp	0x2594


0x2740:	mov	edx, 0xa
0x2745:	mov	ebx, 0x6e
0x274a:	jmp	0x2582


0x27e0:	xor	r10d, r10d
0x27e3:	cmp	byte ptr [rsp + 0xd], 0
0x27e8:	jne	0x25de


0x2800:	mov	edx, 0xc
0x2805:	xor	r10d, r10d
0x2808:	mov	ebx, 0x66
0x280d:	jmp	0x2594


0x2818:	mov	edx, 0xa
0x281d:	xor	r10d, r10d
0x2820:	mov	ebx, 0x6e
0x2825:	jmp	0x2582


0x2830:	mov	ebx, 0x61
0x2835:	jmp	0x2600


0x2840:	xor	r10d, r10d
0x2843:	cmp	dword ptr [rsp + 8], 2
0x2848:	sete	dl
0x284b:	cmp	byte ptr [rsp + 0xf], 0
0x2850:	jne	0x33ea


0x28e0:	cmp	dword ptr [rsp + 8], 2
0x28e5:	mov	r12d, r10d
0x28e8:	sete	dl
0x28eb:	xor	r10d, r10d
0x28ee:	xor	eax, eax
0x28f0:	jmp	0x2488


0x28f8:	cmp	dword ptr [rsp + 8], 2
0x28fd:	sete	dl
0x2900:	xor	r10d, r10d
0x2903:	jmp	0x26c8


0x2910:	cmp	dword ptr [rsp + 8], 2
0x2915:	sete	dl
0x2918:	xor	r10d, r10d
0x291b:	xor	r12d, r12d
0x291e:	jmp	0x26d1


0x2928:	cmp	dword ptr [rsp + 8], 2
0x292d:	mov	r12d, r10d
0x2930:	mov	ebx, 0x20
0x2935:	sete	dl
0x2938:	xor	r10d, r10d
0x293b:	jmp	0x26d1


0x2958:	mov	ebx, 0x76
0x295d:	jmp	0x2600


0x2968:	mov	edx, 9
0x296d:	xor	r10d, r10d
0x2970:	mov	ebx, 0x74
0x2975:	jmp	0x2582


0x2980:	mov	ebx, 0x62
0x2985:	jmp	0x2600


0x2f20:	test	ebx, ebx
0x2f22:	jne	0x331d


0x4ac0:	mov	r8d, 5
0x4ac6:	xor	r9d, r9d
0x4ac9:	mov	rax, rbx
0x4acc:	mul	rsi
0x4acf:	mov	rbx, rax
0x4ad2:	jo	0x4bcf


0x180f:	nop	


0x18f6:	nop	word ptr cs:[rax + rax]


0x1947:	nop	word ptr [rax + rax]


0x1991:	nop	dword ptr [rax]


0x1e3f:	nop	


0x1e9d:	nop	dword ptr [rax]


0x1ed9:	nop	dword ptr [rax]


0x1f33:	nop	dword ptr [rax + rax]


0x1fbb:	nop	dword ptr [rax + rax]


0x2023:	nop	dword ptr [rax + rax]


0x2061:	nop	dword ptr [rax]


0x2086:	nop	word ptr cs:[rax + rax]


0x21ac:	nop	dword ptr [rax]


0x21fd:	nop	dword ptr [rax]


0x2428:	nop	dword ptr [rax + rax]


0x2517:	nop	word ptr [rax + rax]


0x254e:	nop	


0x2571:	nop	dword ptr [rax]


0x25b2:	nop	word ptr [rax + rax]


0x25c4:	nop	dword ptr [rax]


0x2668:	nop	dword ptr [rax + rax]


0x2691:	nop	dword ptr [rax]


0x26a7:	nop	word ptr [rax + rax]


0x26bf:	nop	


0x26ee:	nop	


0x26fd:	nop	dword ptr [rax]


0x270f:	nop	


0x271f:	nop	


0x272f:	nop	


0x273f:	nop	


0x274f:	nop	


0x27bc:	nop	dword ptr [rax]


0x27dc:	nop	dword ptr [rax]


0x27ee:	nop	


0x27ff:	nop	


0x2812:	nop	word ptr [rax + rax]


0x282a:	nop	word ptr [rax + rax]


0x283a:	nop	word ptr [rax + rax]


0x28db:	nop	dword ptr [rax + rax]


0x28f5:	nop	dword ptr [rax]


0x2908:	nop	dword ptr [rax + rax]


0x2923:	nop	dword ptr [rax + rax]


0x2952:	nop	word ptr [rax + rax]


0x2962:	nop	word ptr [rax + rax]


0x297a:	nop	word ptr [rax + rax]


0x298a:	nop	word ptr [rax + rax]


0x2998:	nop	dword ptr [rax + rax]


0x29bf:	nop	


0x2a59:	nop	dword ptr [rax]


0x2aa2:	nop	word ptr [rax + rax]


0x2ac8:	nop	dword ptr [rax + rax]


0x2ae1:	nop	dword ptr [rax]


0x2b02:	nop	word ptr [rax + rax]


0x2c68:	nop	dword ptr [rax + rax]


0x2d7b:	nop	dword ptr [rax + rax]


0x2d9e:	nop	


0x2e65:	nop	dword ptr [rax]


0x2f1d:	nop	dword ptr [rax]


0x3126:	nop	word ptr cs:[rax + rax]


0x31b9:	nop	dword ptr [rax]


0x322d:	nop	dword ptr [rax]


0x330d:	nop	dword ptr [rax]


0x361b:	nop	dword ptr [rax + rax]


0x3ea6:	nop	word ptr cs:[rax + rax]


0x3f35:	nop	dword ptr [rax]


0x3f56:	nop	word ptr cs:[rax + rax]


0x3fb5:	nop	dword ptr [rax]


0x3ff1:	nop	dword ptr [rax]


0x4038:	nop	dword ptr [rax + rax]


0x4087:	nop	word ptr [rax + rax]


0x40e4:	nop	dword ptr [rax]


0x4112:	nop	word ptr [rax + rax]


0x41c6:	nop	word ptr cs:[rax + rax]


0x4229:	nop	dword ptr [rax]


0x44a2:	nop	word ptr [rax + rax]


0x4529:	nop	dword ptr [rax]


0x4554:	nop	dword ptr [rax]


0x45ad:	nop	dword ptr [rax]


0x4776:	nop	word ptr cs:[rax + rax]


0x479f:	nop	


0x4846:	nop	word ptr cs:[rax + rax]


0x48a3:	nop	dword ptr [rax + rax]


0x48b2:	nop	word ptr [rax + rax]


0x48e2:	nop	word ptr [rax + rax]


0x48ec:	nop	dword ptr [rax]


0x498b:	nop	dword ptr [rax + rax]


0x4abc:	nop	dword ptr [rax]


0x4b43:	nop	dword ptr [rax + rax]


0x4cc4:	nop	dword ptr [rax]


0x4ce1:	nop	dword ptr [rax]


0x4cf2:	nop	word ptr [rax + rax]


0x4d4a:	nop	word ptr [rax + rax]


0x4d96:	nop	word ptr cs:[rax + rax]


0x4df5:	nop	dword ptr [rax]


0x4e53:	nop	dword ptr [rax + rax]


0x4e7f:	nop	


