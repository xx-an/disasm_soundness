0x90f0:	sub	rsp, 8
0x90f4:	add	rsp, 8
0x90f8:	ret	


0x90e0:	mov	rdx, qword ptr [rip + 0x203f21]
0x90e7:	xor	esi, esi
0x90e9:	jmp	0x1d50


0x90d0:	ret	


0x9060:	push	r15
0x9062:	push	r14
0x9064:	mov	r15, rdx
0x9067:	push	r13
0x9069:	push	r12
0x906b:	lea	r12, [rip + 0x20397e]
0x9072:	push	rbp
0x9073:	lea	rbp, [rip + 0x20397e]
0x907a:	push	rbx
0x907b:	mov	r13d, edi
0x907e:	mov	r14, rsi
0x9081:	sub	rbp, r12
0x9084:	sub	rsp, 8
0x9088:	sar	rbp, 3
0x908c:	call	0x1960


0x8de0:	push	r12
0x8de2:	push	rbp
0x8de3:	mov	ebp, edi
0x8de5:	push	rbx
0x8de6:	sub	rsp, 0x50
0x8dea:	mov	rax, qword ptr fs:[0x28]
0x8df3:	mov	qword ptr [rsp + 0x18], rax
0x8df8:	xor	eax, eax
0x8dfa:	lea	rax, [rsp + 0x70]
0x8dff:	test	esi, esi
0x8e01:	mov	qword ptr [rsp + 0x30], rdx
0x8e06:	mov	qword ptr [rsp + 0x38], rcx
0x8e0b:	mov	qword ptr [rsp + 0x40], r8
0x8e10:	mov	qword ptr [rsp + 8], rax
0x8e15:	lea	rax, [rsp + 0x20]
0x8e1a:	mov	qword ptr [rsp + 0x48], r9
0x8e1f:	mov	dword ptr [rsp], 0x10
0x8e26:	mov	qword ptr [rsp + 0x10], rax
0x8e2b:	je	0x9032


0x8dd0:	mov	edx, 3
0x8dd5:	xor	esi, esi
0x8dd7:	xor	eax, eax
0x8dd9:	jmp	0x8de0


0x8d90:	sub	rsp, 8
0x8d94:	mov	edi, 0xe
0x8d99:	call	0x1c60


0x8b80:	push	r12
0x8b82:	push	rbp
0x8b83:	mov	ecx, 1
0x8b88:	push	rbx
0x8b89:	mov	rbx, rdi
0x8b8c:	sub	rsp, 0x10
0x8b90:	mov	rdx, rsp
0x8b93:	mov	rax, qword ptr fs:[0x28]
0x8b9c:	mov	qword ptr [rsp + 8], rax
0x8ba1:	xor	eax, eax
0x8ba3:	call	0x7ba0


0x8b20:	push	rbx
0x8b21:	mov	rbx, rsi
0x8b24:	sub	rsp, 0x10
0x8b28:	mov	rdx, rsp
0x8b2b:	mov	rax, qword ptr fs:[0x28]
0x8b34:	mov	qword ptr [rsp + 8], rax
0x8b39:	xor	eax, eax
0x8b3b:	call	0x8890


0x8890:	push	r13
0x8892:	push	r12
0x8894:	push	rbp
0x8895:	push	rbx
0x8896:	sub	rsp, 0x18
0x889a:	mov	rax, qword ptr fs:[0x28]
0x88a3:	mov	qword ptr [rsp + 8], rax
0x88a8:	xor	eax, eax
0x88aa:	test	rsi, rsi
0x88ad:	je	0x8a6d


0x8650:	push	r12
0x8652:	push	rbp
0x8653:	mov	rbp, rdi
0x8656:	push	rbx
0x8657:	sub	rsp, 0x60
0x865b:	mov	r12, qword ptr [rdi + 0x28]
0x865f:	mov	rax, qword ptr fs:[0x28]
0x8668:	mov	qword ptr [rsp + 0x58], rax
0x866d:	xor	eax, eax
0x866f:	cmp	byte ptr [r12 + 0x10], 0
0x8675:	jne	0x86c8


0x8570:	push	r12
0x8572:	push	rbp
0x8573:	mov	r12, rdi
0x8576:	push	rbx
0x8577:	cmp	qword ptr [rdi + 0x40], 0
0x857c:	mov	rbp, qword ptr [rdi]
0x857f:	mov	rax, qword ptr [rdi + 8]
0x8583:	je	0x85d3


0x84e0:	push	r12
0x84e2:	push	rbp
0x84e3:	mov	rbp, rdi
0x84e6:	push	rbx
0x84e7:	mov	r12, qword ptr [rdi]
0x84ea:	cmp	r12, qword ptr [rdi + 8]
0x84ee:	jae	0x855b


0x8320:	push	r15
0x8322:	push	r14
0x8324:	lea	rax, [rip - 0x7db]
0x832b:	push	r13
0x832d:	push	r12
0x832f:	mov	r12, rdx
0x8332:	push	rbp
0x8333:	push	rbx
0x8334:	mov	r13, rcx
0x8337:	mov	rbp, rdi
0x833a:	mov	edi, 0x50
0x833f:	mov	r15, rsi
0x8342:	sub	rsp, 8
0x8346:	test	rdx, rdx
0x8349:	mov	r14, r8
0x834c:	cmove	r12, rax
0x8350:	lea	rax, [rip - 0x7f7]
0x8357:	test	rcx, rcx
0x835a:	cmove	r13, rax
0x835e:	call	0x1c40


0x8300:	movabs	rax, 0x3f80000000000000
0x830a:	mov	byte ptr [rdi + 0x10], 0
0x830e:	mov	qword ptr [rdi], rax
0x8311:	movabs	rax, 0x3fb4fdf43f4ccccd
0x831b:	mov	qword ptr [rdi + 8], rax
0x831f:	ret	


0x82c0:	movzx	ecx, byte ptr [rdi]
0x82c3:	xor	edx, edx
0x82c5:	test	cl, cl
0x82c7:	je	0x82ed


0x8250:	push	r15
0x8252:	push	r14
0x8254:	push	r13
0x8256:	push	r12
0x8258:	push	rbp
0x8259:	push	rbx
0x825a:	sub	rsp, 8
0x825e:	mov	r14, qword ptr [rdi]
0x8261:	cmp	qword ptr [rdi + 8], r14
0x8265:	jbe	0x82b6


0x81e0:	mov	r9, qword ptr [rdi]
0x81e3:	cmp	qword ptr [rdi + 8], r9
0x81e7:	jbe	0x8242


0x8160:	push	rbp
0x8161:	push	rbx
0x8162:	mov	rbp, rdi
0x8165:	mov	rbx, rsi
0x8168:	sub	rsp, 8
0x816c:	call	0x7b70


0x8110:	cmp	qword ptr [rdi + 0x20], 0
0x8115:	je	0x8143


0x80b0:	push	r12
0x80b2:	push	rbp
0x80b3:	mov	r12, rdi
0x80b6:	push	rbx
0x80b7:	mov	rbp, rsi
0x80ba:	call	0x7b70


0x7f60:	push	r13
0x7f62:	push	r12
0x7f64:	mov	r12, rsi
0x7f67:	push	rbp
0x7f68:	push	rbx
0x7f69:	xor	ebx, ebx
0x7f6b:	sub	rsp, 8
0x7f6f:	mov	rsi, qword ptr [rdi]
0x7f72:	mov	rcx, qword ptr [rdi + 0x20]
0x7f76:	mov	rbp, qword ptr [rdi + 0x10]
0x7f7a:	mov	r13, qword ptr [rdi + 0x18]
0x7f7e:	mov	rdi, qword ptr [rdi + 8]
0x7f82:	cmp	rsi, rdi
0x7f85:	jae	0x7fc5


0x7f00:	mov	rcx, qword ptr [rdi]
0x7f03:	mov	r8, qword ptr [rdi + 8]
0x7f07:	xor	edx, edx
0x7f09:	xor	esi, esi
0x7f0b:	cmp	rcx, r8
0x7f0e:	jae	0x7f46


0x7eb0:	mov	rsi, qword ptr [rdi]
0x7eb3:	mov	rdi, qword ptr [rdi + 8]
0x7eb7:	xor	eax, eax
0x7eb9:	cmp	rsi, rdi
0x7ebc:	jae	0x7ef7


0x7ea0:	mov	rax, qword ptr [rdi + 0x20]
0x7ea4:	ret	


0x7e90:	mov	rax, qword ptr [rdi + 0x18]
0x7e94:	ret	


0x7e80:	mov	rax, qword ptr [rdi + 0x10]
0x7e84:	ret	


0x7d40:	push	r15
0x7d42:	push	r14
0x7d44:	push	r13
0x7d46:	push	r12
0x7d48:	push	rbp
0x7d49:	push	rbx
0x7d4a:	sub	rsp, 8
0x7d4e:	mov	r12, qword ptr [rsi]
0x7d51:	cmp	r12, qword ptr [rsi + 8]
0x7d55:	jae	0x7e38


0x7cc0:	mov	rdx, qword ptr [rdi]
0x7cc3:	lea	rcx, [rip + 0x25e6]
0x7cca:	mov	eax, 1
0x7ccf:	cmp	rdx, rcx
0x7cd2:	je	0x7d35


0x7ba0:	push	r14
0x7ba2:	push	r13
0x7ba4:	mov	r14, rdx
0x7ba7:	push	r12
0x7ba9:	push	rbp
0x7baa:	mov	r12, rdi
0x7bad:	push	rbx
0x7bae:	mov	rbp, rsi
0x7bb1:	mov	r13d, ecx
0x7bb4:	call	0x7b70


0x7b70:	push	rbx
0x7b71:	mov	rbx, rdi
0x7b74:	mov	rdi, rsi
0x7b77:	mov	rsi, qword ptr [rbx + 0x10]
0x7b7b:	call	qword ptr [rbx + 0x30]


0x7b60:	cmp	rdi, rsi
0x7b63:	sete	al
0x7b66:	ret	


0x7b50:	mov	rax, rdi
0x7b53:	xor	edx, edx
0x7b55:	ror	rax, 3
0x7b59:	div	rsi
0x7b5c:	mov	rax, rdx
0x7b5f:	ret	


0x7ab0:	cmp	rdi, 0xa
0x7ab4:	mov	eax, 0xa
0x7ab9:	movabs	r9, 0xaaaaaaaaaaaaaaab
0x7ac3:	cmovb	rdi, rax
0x7ac7:	or	rdi, 1
0x7acb:	cmp	rdi, -1
0x7acf:	je	0x7b3f


0x7a50:	sub	rsp, 8
0x7a54:	xor	esi, esi
0x7a56:	call	0x1cc0


0x79b0:	push	r12
0x79b2:	push	rbp
0x79b3:	mov	rbp, rsi
0x79b6:	push	rbx
0x79b7:	call	0x1d30


0x7930:	push	r12
0x7932:	push	rbp
0x7933:	mov	rbp, rdi
0x7936:	push	rbx
0x7937:	call	0x19f0


0x78a0:	push	r13
0x78a2:	push	r12
0x78a4:	mov	r13, rsi
0x78a7:	push	rbp
0x78a8:	push	rbx
0x78a9:	mov	rbx, rdi
0x78ac:	mov	r12, rdx
0x78af:	sub	rsp, 0x18
0x78b3:	mov	rax, qword ptr fs:[0x28]
0x78bc:	mov	qword ptr [rsp + 8], rax
0x78c1:	xor	eax, eax
0x78c3:	lea	rax, [rsp + 4]
0x78c8:	test	rdi, rdi
0x78cb:	cmove	rbx, rax
0x78cf:	mov	rdi, rbx
0x78d2:	call	0x1b00


0x7840:	mov	rax, qword ptr [rdi + 8]
0x7844:	cmp	qword ptr [rdi + 0x10], rax
0x7848:	je	0x7850


0x7800:	test	rdi, rdi
0x7803:	push	rbx
0x7804:	mov	rbx, rdi
0x7807:	je	0x781a


0x7780:	push	r12
0x7782:	push	rbp
0x7783:	push	rbx
0x7784:	mov	rbx, rdi
0x7787:	call	0x1c20


0x7360:	push	r15
0x7362:	push	r14
0x7364:	push	r13
0x7366:	push	r12
0x7368:	push	rbp
0x7369:	push	rbx
0x736a:	sub	rsp, 0x28
0x736e:	mov	rax, qword ptr fs:[0x28]
0x7377:	mov	qword ptr [rsp + 0x18], rax
0x737c:	xor	eax, eax
0x737e:	cmp	edx, 0x24
0x7381:	ja	0x76e5


0x6f40:	push	r15
0x6f42:	push	r14
0x6f44:	push	r13
0x6f46:	push	r12
0x6f48:	push	rbp
0x6f49:	push	rbx
0x6f4a:	sub	rsp, 0x28
0x6f4e:	mov	rax, qword ptr fs:[0x28]
0x6f57:	mov	qword ptr [rsp + 0x18], rax
0x6f5c:	xor	eax, eax
0x6f5e:	cmp	edx, 0x24
0x6f61:	ja	0x72c5


0x6f10:	sub	rsp, 0x10
0x6f14:	push	r9
0x6f16:	mov	r9, r8
0x6f19:	mov	r8, rcx
0x6f1c:	mov	rcx, rdx
0x6f1f:	mov	rdx, rsi
0x6f22:	mov	esi, 0xa
0x6f27:	call	0x6e10


0x6e10:	push	r15
0x6e12:	push	r14
0x6e14:	mov	r15, rcx
0x6e17:	push	r13
0x6e19:	push	r12
0x6e1b:	mov	r14, rdx
0x6e1e:	push	rbp
0x6e1f:	push	rbx
0x6e20:	mov	edx, esi
0x6e22:	xor	esi, esi
0x6e24:	mov	r12, rdi
0x6e27:	mov	r13, r9
0x6e2a:	sub	rsp, 0x18
0x6e2e:	mov	rcx, rsp
0x6e31:	mov	ebx, dword ptr [rsp + 0x50]
0x6e35:	mov	rax, qword ptr fs:[0x28]
0x6e3e:	mov	qword ptr [rsp + 8], rax
0x6e43:	xor	eax, eax
0x6e45:	call	0x7360


0x6dd0:	lea	rsi, [rip + 0x3238]
0x6dd7:	sub	rsp, 8
0x6ddb:	mov	edx, 5
0x6de0:	xor	edi, edi
0x6de2:	call	0x1aa0


0x6db0:	push	rbx
0x6db1:	mov	rbx, rdi
0x6db4:	call	0x1ac0


0x6d80:	push	rbp
0x6d81:	push	rbx
0x6d82:	mov	rbp, rdi
0x6d85:	mov	rdi, rsi
0x6d88:	mov	rbx, rsi
0x6d8b:	sub	rsp, 8
0x6d8f:	call	0x6b80


0x6d50:	mov	rax, rdi
0x6d53:	sub	rsp, 8
0x6d57:	mul	rsi
0x6d5a:	seto	dl
0x6d5d:	test	rax, rax
0x6d60:	js	0x6d79


0x6d30:	push	rbx
0x6d31:	mov	rbx, rdi
0x6d34:	call	0x6b80


0x6ce0:	test	rdi, rdi
0x6ce3:	mov	rax, qword ptr [rsi]
0x6ce6:	je	0x6d10


0x6c50:	test	rdi, rdi
0x6c53:	mov	r9, rdx
0x6c56:	mov	rcx, qword ptr [rsi]
0x6c59:	je	0x6c90


0x6c20:	mov	rax, rsi
0x6c23:	mul	rdx
0x6c26:	mov	rsi, rax
0x6c29:	seto	al
0x6c2c:	test	rsi, rsi
0x6c2f:	js	0x6c3b


0x6be0:	test	rsi, rsi
0x6be3:	push	rbx
0x6be4:	mov	rbx, rsi
0x6be7:	jne	0x6bee


0x6bd0:	jmp	0x6b80


0x6ba0:	mov	rax, rdi
0x6ba3:	mul	rsi
0x6ba6:	mov	rdi, rax
0x6ba9:	seto	al
0x6bac:	test	rdi, rdi
0x6baf:	js	0x6bbb


0x6b80:	push	rbx
0x6b81:	mov	rbx, rdi
0x6b84:	call	0x1c40


0x6b00:	push	rbx
0x6b01:	lea	rsi, [rip + 0x3209]
0x6b08:	mov	edx, 5
0x6b0d:	xor	edi, edi
0x6b0f:	call	0x1aa0


0x6a20:	push	rbp
0x6a21:	push	rbx
0x6a22:	mov	r10d, 0x20
0x6a28:	xor	r11d, r11d
0x6a2b:	sub	rsp, 0xb8
0x6a32:	mov	rax, qword ptr fs:[0x28]
0x6a3b:	mov	qword ptr [rsp + 0x78], rax
0x6a40:	xor	eax, eax
0x6a42:	lea	rax, [rsp + 0xd0]
0x6a4a:	mov	qword ptr [rsp + 0xa0], r8
0x6a52:	lea	rbx, [rsp + 0xd0]
0x6a5a:	lea	r8, [rsp + 0x20]
0x6a5f:	mov	qword ptr [rsp + 0xa8], r9
0x6a67:	mov	dword ptr [rsp + 8], 0x20
0x6a6f:	mov	qword ptr [rsp + 0x10], rax
0x6a74:	lea	rax, [rsp + 0x80]
0x6a7c:	xor	r9d, r9d
0x6a7f:	mov	qword ptr [rsp + 0x18], rax
0x6a84:	mov	rbp, rax
0x6a87:	nop	word ptr [rax + rax]
0x6a90:	cmp	r10d, 0x2f
0x6a94:	ja	0x6aec


0x69a0:	sub	rsp, 0x68
0x69a4:	mov	r10, r8
0x69a7:	xor	r9d, r9d
0x69aa:	mov	rax, qword ptr fs:[0x28]
0x69b3:	mov	qword ptr [rsp + 0x58], rax
0x69b8:	xor	eax, eax
0x69ba:	mov	r8, rsp
0x69bd:	nop	dword ptr [rax]
0x69c0:	mov	eax, dword ptr [r10]
0x69c3:	cmp	eax, 0x2f
0x69c6:	ja	0x6a0a


0x6980:	xor	r9d, r9d
0x6983:	cmp	qword ptr [r8], 0
0x6987:	je	0x699b


0x6560:	push	r15
0x6562:	push	r14
0x6564:	push	r13
0x6566:	push	r12
0x6568:	mov	r12, r9
0x656b:	push	rbp
0x656c:	push	rbx
0x656d:	mov	rbp, rdi
0x6570:	mov	rbx, r8
0x6573:	sub	rsp, 0x28
0x6577:	test	rsi, rsi
0x657a:	je	0x6698


0x6550:	lea	rdx, [rip + 0x375d]
0x6557:	jmp	0x64c0


0x6540:	lea	rdx, [rip + 0x375e]
0x6547:	jmp	0x64c0


0x64c0:	push	r13
0x64c2:	push	r12
0x64c4:	push	rbp
0x64c5:	push	rbx
0x64c6:	mov	rbp, rsi
0x64c9:	mov	rsi, rdx
0x64cc:	sub	rsp, 8
0x64d0:	call	0x1d30


0x62e0:	push	r15
0x62e2:	push	r14
0x62e4:	push	r13
0x62e6:	push	r12
0x62e8:	mov	r13, rdi
0x62eb:	push	rbp
0x62ec:	push	rbx
0x62ed:	sub	rsp, 0xb8
0x62f4:	mov	qword ptr [rsp + 8], rsi
0x62f9:	mov	rax, qword ptr fs:[0x28]
0x6302:	mov	qword ptr [rsp + 0xa8], rax
0x630a:	xor	eax, eax
0x630c:	call	0x1c20


0x60a0:	push	r13
0x60a2:	push	r12
0x60a4:	lea	r12, [rdi + 0x800]
0x60ab:	push	rbp
0x60ac:	mov	rdx, rdi
0x60af:	push	rbx
0x60b0:	mov	rax, rdi
0x60b3:	movabs	rcx, 0x98f5704f6c44c0ab
0x60bd:	movabs	r10, 0xae985bf2cbfc89ed
0x60c7:	movabs	rbp, 0x48fe4a0fa5a09315
0x60d1:	movabs	rsi, 0x82f053db8355e0ce
0x60db:	movabs	r8, 0xb29b2e824a595524
0x60e5:	movabs	rbx, 0x8c0ea5053d4712a0
0x60ef:	movabs	r11, 0xb9f8b322c73ac862
0x60f9:	movabs	r9, 0x647c4677a2884b7c
0x6103:	nop	dword ptr [rax + rax]
0x6108:	add	rsi, qword ptr [rax + 0x20]
0x610c:	add	rcx, qword ptr [rax + 0x38]
0x6110:	mov	r13, qword ptr [rax]
0x6113:	add	rbp, qword ptr [rax + 0x28]
0x6117:	add	r10, qword ptr [rax + 0x30]
0x611b:	sub	r13, rsi
0x611e:	add	r9, r13
0x6121:	mov	r13, rcx
0x6124:	shr	r13, 9
0x6128:	add	rcx, r9
0x612b:	xor	rbp, r13
0x612e:	mov	r13, qword ptr [rax + 8]
0x6132:	sub	r13, rbp
0x6135:	add	r11, r13
0x6138:	mov	r13, r9
0x613b:	shl	r13, 9
0x613f:	add	r9, r11
0x6142:	xor	r10, r13
0x6145:	mov	r13, qword ptr [rax + 0x10]
0x6149:	sub	r13, r10
0x614c:	add	rbx, r13
0x614f:	mov	r13, r11
0x6152:	shr	r13, 0x17
0x6156:	add	r11, rbx
0x6159:	xor	rcx, r13
0x615c:	mov	r13, qword ptr [rax + 0x18]
0x6160:	sub	r13, rcx
0x6163:	add	r8, r13
0x6166:	mov	r13, rbx
0x6169:	shl	r13, 0xf
0x616d:	add	rbx, r8
0x6170:	xor	r9, r13
0x6173:	mov	r13, r8
0x6176:	sub	rsi, r9
0x6179:	shr	r13, 0xe
0x617d:	mov	qword ptr [rax], r9
0x6180:	xor	r11, r13
0x6183:	mov	r13, rsi
0x6186:	add	r8, rsi
0x6189:	sub	rbp, r11
0x618c:	shl	r13, 0x14
0x6190:	mov	qword ptr [rax + 8], r11
0x6194:	xor	rbx, r13
0x6197:	lea	r13, [rsi + rbp]
0x619b:	mov	rsi, rbp
0x619e:	sub	r10, rbx
0x61a1:	shr	rsi, 0x11
0x61a5:	mov	qword ptr [rax + 0x10], rbx
0x61a9:	xor	r8, rsi
0x61ac:	mov	rsi, r10
0x61af:	add	rbp, r10
0x61b2:	sub	rcx, r8
0x61b5:	shl	rsi, 0xe
0x61b9:	mov	qword ptr [rax + 0x18], r8
0x61bd:	xor	rsi, r13
0x61c0:	add	r10, rcx
0x61c3:	mov	qword ptr [rax + 0x28], rbp
0x61c7:	mov	qword ptr [rax + 0x20], rsi
0x61cb:	mov	qword ptr [rax + 0x30], r10
0x61cf:	add	rax, 0x40
0x61d3:	mov	qword ptr [rax - 8], rcx
0x61d7:	cmp	r12, rax
0x61da:	jne	0x6108


0x5e10:	mov	rax, qword ptr [rdi + 0x810]
0x5e17:	mov	rdx, qword ptr [rdi + 0x800]
0x5e1e:	lea	r9, [rdi + 0x400]
0x5e25:	lea	rcx, [rax + 1]
0x5e29:	mov	rax, rdi
0x5e2c:	mov	qword ptr [rdi + 0x810], rcx
0x5e33:	add	rcx, qword ptr [rdi + 0x808]
0x5e3a:	nop	word ptr [rax + rax]
0x5e40:	mov	r8, rdx
0x5e43:	shl	r8, 0x15
0x5e47:	xor	rdx, r8
0x5e4a:	mov	r8, qword ptr [rax]
0x5e4d:	not	rdx
0x5e50:	add	rdx, qword ptr [rax + 0x400]
0x5e57:	mov	r10, r8
0x5e5a:	and	r10d, 0x7f8
0x5e61:	mov	r11, qword ptr [rdi + r10]
0x5e65:	mov	r10, rdx
0x5e68:	shr	r10, 5
0x5e6c:	add	r11, rdx
0x5e6f:	xor	rdx, r10
0x5e72:	add	rcx, r11
0x5e75:	mov	qword ptr [rax], rcx
0x5e78:	shr	rcx, 8
0x5e7c:	and	ecx, 0x7f8
0x5e82:	mov	r11, qword ptr [rdi + rcx]
0x5e86:	add	r11, r8
0x5e89:	mov	qword ptr [rsi], r11
0x5e8c:	add	rdx, qword ptr [rax + 0x408]
0x5e93:	mov	rcx, qword ptr [rax + 8]
0x5e97:	mov	r10, rdx
0x5e9a:	mov	rdx, rcx
0x5e9d:	and	edx, 0x7f8
0x5ea3:	mov	r8, qword ptr [rdi + rdx]
0x5ea7:	mov	rdx, r10
0x5eaa:	shl	rdx, 0xc
0x5eae:	xor	rdx, r10
0x5eb1:	add	r8, r10
0x5eb4:	add	r8, r11
0x5eb7:	mov	qword ptr [rax + 8], r8
0x5ebb:	shr	r8, 8
0x5ebf:	and	r8d, 0x7f8
0x5ec6:	add	rcx, qword ptr [rdi + r8]
0x5eca:	mov	qword ptr [rsi + 8], rcx
0x5ece:	mov	r8, qword ptr [rax + 0x10]
0x5ed2:	mov	r11, rcx
0x5ed5:	add	rdx, qword ptr [rax + 0x410]
0x5edc:	mov	rcx, r8
0x5edf:	and	ecx, 0x7f8
0x5ee5:	mov	r10, qword ptr [rdi + rcx]
0x5ee9:	add	r10, rdx
0x5eec:	mov	rcx, r10
0x5eef:	add	rcx, r11
0x5ef2:	mov	qword ptr [rax + 0x10], rcx
0x5ef6:	shr	rcx, 8
0x5efa:	and	ecx, 0x7f8
0x5f00:	mov	r10, qword ptr [rdi + rcx]
0x5f04:	mov	rcx, rdx
0x5f07:	shr	rcx, 0x21
0x5f0b:	xor	rdx, rcx
0x5f0e:	add	r10, r8
0x5f11:	mov	qword ptr [rsi + 0x10], r10
0x5f15:	mov	rcx, qword ptr [rax + 0x18]
0x5f19:	add	rdx, qword ptr [rax + 0x418]
0x5f20:	mov	r8, rcx
0x5f23:	and	r8d, 0x7f8
0x5f2a:	mov	r11, qword ptr [rdi + r8]
0x5f2e:	add	r11, rdx
0x5f31:	mov	r8, r11
0x5f34:	add	r8, r10
0x5f37:	add	rax, 0x20
0x5f3b:	add	rsi, 0x20
0x5f3f:	mov	qword ptr [rax - 8], r8
0x5f43:	shr	r8, 8
0x5f47:	and	r8d, 0x7f8
0x5f4e:	add	rcx, qword ptr [rdi + r8]
0x5f52:	mov	qword ptr [rsi - 8], rcx
0x5f56:	cmp	rax, r9
0x5f59:	jb	0x5e40


0x5dc0:	push	rbp
0x5dc1:	push	rbx
0x5dc2:	mov	rdx, -1
0x5dc9:	mov	rbx, rdi
0x5dcc:	mov	esi, 0x1038
0x5dd1:	sub	rsp, 8
0x5dd5:	mov	rbp, qword ptr [rdi]
0x5dd8:	call	0x1d00


0x5c20:	push	r15
0x5c22:	push	r14
0x5c24:	push	r13
0x5c26:	push	r12
0x5c28:	mov	r12, rdi
0x5c2b:	push	rbp
0x5c2c:	push	rbx
0x5c2d:	mov	rbp, rdx
0x5c30:	mov	rbx, rsi
0x5c33:	sub	rsp, 0x18
0x5c37:	mov	rcx, qword ptr [rdi]
0x5c3a:	test	rcx, rcx
0x5c3d:	mov	qword ptr [rsp + 8], rcx
0x5c42:	je	0x5ca8


0x5c10:	mov	qword ptr [rdi + 0x10], rsi
0x5c14:	ret	


0x5c00:	mov	qword ptr [rdi + 8], rsi
0x5c04:	ret	


0x58d0:	push	r15
0x58d2:	push	r14
0x58d4:	push	r13
0x58d6:	push	r12
0x58d8:	push	rbp
0x58d9:	push	rbx
0x58da:	sub	rsp, 0x38
0x58de:	mov	rax, qword ptr fs:[0x28]
0x58e7:	mov	qword ptr [rsp + 0x28], rax
0x58ec:	xor	eax, eax
0x58ee:	test	rsi, rsi
0x58f1:	je	0x5a18


0x5870:	push	rbp
0x5871:	push	rbx
0x5872:	sub	rsp, 8
0x5876:	test	rdi, rdi
0x5879:	je	0x58b8


0x5520:	push	r15
0x5522:	push	r14
0x5524:	push	r13
0x5526:	push	r12
0x5528:	push	rbp
0x5529:	push	rbx
0x552a:	sub	rsp, 0x68
0x552e:	mov	rax, qword ptr fs:[0x28]
0x5537:	mov	qword ptr [rsp + 0x58], rax
0x553c:	xor	eax, eax
0x553e:	test	rsi, rsi
0x5541:	je	0x57e8


0x54f0:	mov	rax, rsi
0x54f3:	sub	rax, 1
0x54f7:	je	0x5515


0x54e0:	mov	rax, qword ptr [rsi]
0x54e3:	cmp	qword ptr [rdi], rax
0x54e6:	sete	al
0x54e9:	ret	


0x54d0:	mov	rax, qword ptr [rdi]
0x54d3:	xor	edx, edx
0x54d5:	div	rsi
0x54d8:	mov	rax, rdx
0x54db:	ret	


0x5470:	push	r13
0x5472:	push	r12
0x5474:	push	rbp
0x5475:	push	rbx
0x5476:	mov	rbx, rdi
0x5479:	sub	rsp, 8
0x547d:	mov	rdi, qword ptr [rdi]
0x5480:	call	0x5dc0


0x5450:	push	rbx
0x5451:	mov	rdx, -1
0x5458:	mov	rbx, rdi
0x545b:	mov	esi, 0x18
0x5460:	call	0x1d00


0x5330:	push	r15
0x5332:	push	r14
0x5334:	lea	r15, [rsi + 1]
0x5338:	push	r13
0x533a:	push	r12
0x533c:	mov	r13, rdi
0x533f:	push	rbp
0x5340:	push	rbx
0x5341:	mov	r14, rsi
0x5344:	sub	rsp, 0x28
0x5348:	mov	rbp, qword ptr [rdi + 8]
0x534c:	mov	rbx, qword ptr [rdi + 0x10]
0x5350:	mov	rax, qword ptr fs:[0x28]
0x5359:	mov	qword ptr [rsp + 0x18], rax
0x535e:	xor	eax, eax
0x5360:	mov	rax, qword ptr [rdi]
0x5363:	lea	r12, [rsp + 0x10]
0x5368:	mov	qword ptr [rsp + 8], rax
0x536d:	jmp	0x53a5


0x5320:	mov	rax, qword ptr [rdi]
0x5323:	ret	


0x52e0:	push	rbx
0x52e1:	call	0x58d0


0x52b0:	push	rbx
0x52b1:	mov	rbx, rdi
0x52b4:	mov	edi, 0x18
0x52b9:	call	0x6b80


0x5290:	lea	rcx, [rip + 0x207d89]
0x5297:	mov	rsi, rdi
0x529a:	mov	rdx, -1
0x52a1:	xor	edi, edi
0x52a3:	jmp	0x4950


0x5270:	lea	rcx, [rip + 0x207da9]
0x5277:	mov	rdx, -1
0x527e:	jmp	0x4950


0x5250:	lea	rcx, [rip + 0x207dc9]
0x5257:	mov	rdx, rsi
0x525a:	mov	rsi, rdi
0x525d:	xor	edi, edi
0x525f:	jmp	0x4950


0x5240:	lea	rcx, [rip + 0x207dd9]
0x5247:	jmp	0x4950


0x5220:	mov	r8, rcx
0x5223:	mov	rcx, rdx
0x5226:	mov	rdx, rsi
0x5229:	mov	rsi, rdi
0x522c:	xor	edi, edi
0x522e:	jmp	0x5150


0x5200:	mov	rcx, rdx
0x5203:	mov	r8, -1
0x520a:	mov	rdx, rsi
0x520d:	mov	rsi, rdi
0x5210:	xor	edi, edi
0x5212:	jmp	0x5150


0x51f0:	mov	r8, -1
0x51f7:	jmp	0x5150


0x5150:	sub	rsp, 0x48
0x5154:	mov	r9, rcx
0x5157:	mov	rcx, qword ptr [rip + 0x2080d2]
0x515e:	movdqa	xmm0, xmmword ptr [rip + 0x20809a]
0x5166:	mov	rax, qword ptr fs:[0x28]
0x516f:	mov	qword ptr [rsp + 0x38], rax
0x5174:	xor	eax, eax
0x5176:	movaps	xmmword ptr [rsp], xmm0
0x517a:	test	rsi, rsi
0x517d:	mov	qword ptr [rsp + 0x30], rcx
0x5182:	mov	dword ptr [rsp], 0xa
0x5189:	movdqa	xmm0, xmmword ptr [rip + 0x20807f]
0x5191:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x5196:	movdqa	xmm0, xmmword ptr [rip + 0x208082]
0x519e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x51a3:	je	0x51d7


0x50c0:	sub	rsp, 0x48
0x50c4:	mov	rax, rdx
0x50c7:	mov	rdx, qword ptr fs:[0x28]
0x50d0:	mov	qword ptr [rsp + 0x38], rdx
0x50d5:	xor	edx, edx
0x50d7:	cmp	esi, 0xa
0x50da:	je	0x5144


0x50b0:	mov	edx, 0x3a
0x50b5:	jmp	0x4fe0


0x5090:	mov	edx, 0x3a
0x5095:	mov	rsi, -1
0x509c:	jmp	0x4fe0


0x5080:	movsx	edx, sil
0x5084:	mov	rsi, -1
0x508b:	jmp	0x4fe0


0x4fe0:	sub	rsp, 0x48
0x4fe4:	mov	ecx, edx
0x4fe6:	mov	rax, qword ptr fs:[0x28]
0x4fef:	mov	qword ptr [rsp + 0x38], rax
0x4ff4:	xor	eax, eax
0x4ff6:	mov	rax, qword ptr [rip + 0x208233]
0x4ffd:	mov	r8, rsp
0x5000:	and	ecx, 0x1f
0x5003:	movdqa	xmm0, xmmword ptr [rip + 0x2081f5]
0x500b:	mov	qword ptr [rsp + 0x30], rax
0x5010:	mov	eax, edx
0x5012:	movaps	xmmword ptr [rsp], xmm0
0x5016:	shr	al, 5
0x5019:	movzx	eax, al
0x501c:	lea	r9, [r8 + rax*4 + 8]
0x5021:	movdqa	xmm0, xmmword ptr [rip + 0x2081e7]
0x5029:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x502e:	movdqa	xmm0, xmmword ptr [rip + 0x2081ea]
0x5036:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x503b:	mov	edx, dword ptr [r9]
0x503e:	mov	eax, edx
0x5040:	shr	eax, cl
0x5042:	not	eax
0x5044:	and	eax, 1
0x5047:	shl	eax, cl
0x5049:	mov	rcx, r8
0x504c:	xor	eax, edx
0x504e:	mov	rdx, rsi
0x5051:	mov	rsi, rdi
0x5054:	mov	dword ptr [r9], eax
0x5057:	xor	edi, edi
0x5059:	call	0x4950


0x4fd0:	mov	rcx, rdx
0x4fd3:	mov	rdx, rsi
0x4fd6:	mov	esi, edi
0x4fd8:	xor	edi, edi
0x4fda:	jmp	0x4f30


0x4fc0:	mov	rdx, rsi
0x4fc3:	mov	esi, edi
0x4fc5:	xor	edi, edi
0x4fc7:	jmp	0x4ea0


0x4f30:	sub	rsp, 0x48
0x4f34:	mov	rax, rdx
0x4f37:	mov	rdx, rcx
0x4f3a:	mov	rcx, qword ptr fs:[0x28]
0x4f43:	mov	qword ptr [rsp + 0x38], rcx
0x4f48:	xor	ecx, ecx
0x4f4a:	cmp	esi, 0xa
0x4f4d:	je	0x4fb0


0x4ea0:	sub	rsp, 0x48
0x4ea4:	mov	rax, rdx
0x4ea7:	mov	rdx, qword ptr fs:[0x28]
0x4eb0:	mov	qword ptr [rsp + 0x38], rdx
0x4eb5:	xor	edx, edx
0x4eb7:	cmp	esi, 0xa
0x4eba:	je	0x4f24


0x4e80:	lea	rcx, [rip + 0x208379]
0x4e87:	mov	rdx, rsi
0x4e8a:	mov	rsi, rdi
0x4e8d:	xor	edi, edi
0x4e8f:	jmp	0x4950


0x4e60:	lea	rcx, [rip + 0x208399]
0x4e67:	mov	rsi, rdi
0x4e6a:	mov	rdx, -1
0x4e71:	xor	edi, edi
0x4e73:	jmp	0x4950


0x4e50:	lea	rcx, [rip + 0x2083a9]
0x4e57:	jmp	0x4950


0x4e30:	lea	rcx, [rip + 0x2083c9]
0x4e37:	mov	rdx, -1
0x4e3e:	jmp	0x4950


0x4d90:	mov	eax, dword ptr [rip + 0x2082c2]
0x4d96:	push	r12
0x4d98:	mov	r12, qword ptr [rip + 0x2082c1]
0x4d9f:	push	rbp
0x4da0:	push	rbx
0x4da1:	cmp	eax, 1
0x4da4:	jle	0x4dd1


0x4d80:	mov	rcx, rdx
0x4d83:	xor	edx, edx
0x4d85:	jmp	0x4c90


0x4c90:	push	r15
0x4c92:	push	r14
0x4c94:	lea	rax, [rip + 0x208565]
0x4c9b:	push	r13
0x4c9d:	push	r12
0x4c9f:	mov	r12, rdx
0x4ca2:	push	rbp
0x4ca3:	push	rbx
0x4ca4:	mov	rbx, rcx
0x4ca7:	mov	r14, rdi
0x4caa:	mov	r15, rsi
0x4cad:	sub	rsp, 0x38
0x4cb1:	test	rcx, rcx
0x4cb4:	cmove	rbx, rax
0x4cb8:	xor	ebp, ebp
0x4cba:	call	0x19b0


0x4c10:	push	r15
0x4c12:	push	r14
0x4c14:	lea	rax, [rip + 0x2085e5]
0x4c1b:	push	r13
0x4c1d:	push	r12
0x4c1f:	mov	r13, rdi
0x4c22:	push	rbp
0x4c23:	push	rbx
0x4c24:	mov	rbx, r8
0x4c27:	mov	r14, rsi
0x4c2a:	mov	r15, rdx
0x4c2d:	sub	rsp, 0x18
0x4c31:	test	r8, r8
0x4c34:	cmove	rbx, rax
0x4c38:	mov	qword ptr [rsp + 8], rcx
0x4c3d:	call	0x19b0


0x4be0:	lea	rax, [rip + 0x208619]
0x4be7:	test	rdi, rdi
0x4bea:	cmove	rdi, rax
0x4bee:	test	rsi, rsi
0x4bf1:	mov	dword ptr [rdi], 0xa
0x4bf7:	je	0x4c07


0x4bc0:	lea	rax, [rip + 0x208639]
0x4bc7:	test	rdi, rdi
0x4bca:	cmove	rdi, rax
0x4bce:	mov	eax, dword ptr [rdi + 4]
0x4bd1:	mov	dword ptr [rdi + 4], esi
0x4bd4:	ret	


0x4b80:	lea	rax, [rip + 0x208679]
0x4b87:	test	rdi, rdi
0x4b8a:	mov	ecx, esi
0x4b8c:	cmove	rdi, rax
0x4b90:	mov	eax, esi
0x4b92:	and	ecx, 0x1f
0x4b95:	shr	al, 5
0x4b98:	movzx	eax, al
0x4b9b:	lea	rdi, [rdi + rax*4 + 8]
0x4ba0:	mov	esi, dword ptr [rdi]
0x4ba2:	mov	eax, esi
0x4ba4:	shr	eax, cl
0x4ba6:	xor	edx, eax
0x4ba8:	and	eax, 1
0x4bab:	and	edx, 1
0x4bae:	shl	edx, cl
0x4bb0:	xor	edx, esi
0x4bb2:	mov	dword ptr [rdi], edx
0x4bb4:	ret	


0x4b60:	lea	rax, [rip + 0x208699]
0x4b67:	test	rdi, rdi
0x4b6a:	cmove	rdi, rax
0x4b6e:	mov	dword ptr [rdi], esi
0x4b70:	ret	


0x4b40:	lea	rax, [rip + 0x2086b9]
0x4b47:	test	rdi, rdi
0x4b4a:	cmove	rdi, rax
0x4b4e:	mov	eax, dword ptr [rdi]
0x4b50:	ret	


0x4b00:	push	r12
0x4b02:	push	rbp
0x4b03:	push	rbx
0x4b04:	mov	rbx, rdi
0x4b07:	call	0x19b0


0x4950:	push	r15
0x4952:	push	r14
0x4954:	movsxd	r15, edi
0x4957:	push	r13
0x4959:	push	r12
0x495b:	mov	r14, rdx
0x495e:	push	rbp
0x495f:	push	rbx
0x4960:	mov	rbp, rcx
0x4963:	sub	rsp, 0x28
0x4967:	mov	qword ptr [rsp + 8], rsi
0x496c:	call	0x19b0


0x3710:	push	r15
0x3712:	push	r14
0x3714:	mov	r15d, r8d
0x3717:	push	r13
0x3719:	push	r12
0x371b:	mov	r14, rdi
0x371e:	push	rbp
0x371f:	push	rbx
0x3720:	mov	ebx, r9d
0x3723:	mov	r13, rsi
0x3726:	mov	rbp, rcx
0x3729:	and	ebx, 2
0x372c:	sub	rsp, 0xb8
0x3733:	mov	rax, qword ptr [rsp + 0xf0]
0x373b:	mov	qword ptr [rsp + 0x10], rdx
0x3740:	mov	dword ptr [rsp + 8], r8d
0x3745:	mov	dword ptr [rsp + 0x78], r9d
0x374a:	mov	qword ptr [rsp + 0x20], rax
0x374f:	mov	rax, qword ptr [rsp + 0xf8]
0x3757:	mov	qword ptr [rsp + 0x68], rax
0x375c:	mov	rax, qword ptr [rsp + 0x100]
0x3764:	mov	qword ptr [rsp + 0x60], rax
0x3769:	mov	rax, qword ptr fs:[0x28]
0x3772:	mov	qword ptr [rsp + 0xa8], rax
0x377a:	xor	eax, eax
0x377c:	call	0x1ab0


0x3620:	push	rbp
0x3621:	push	rbx
0x3622:	mov	rbp, rdi
0x3625:	mov	ebx, esi
0x3627:	sub	rsp, 8
0x362b:	call	0x8d90


0x3580:	test	rdi, rdi
0x3583:	push	rbx
0x3584:	je	0x35fd


0x3570:	mov	rdi, qword ptr [rdi + 0x10]
0x3574:	jmp	0x1dd0


0x3560:	mov	edx, 0xa
0x3565:	jmp	0x3450


0x3450:	push	r15
0x3452:	push	r14
0x3454:	push	r13
0x3456:	push	r12
0x3458:	push	rbp
0x3459:	push	rbx
0x345a:	sub	rsp, 0x18
0x345e:	mov	r13, qword ptr [rdi + 0x10]
0x3462:	mov	r8, qword ptr [rdi]
0x3465:	add	r8, r13
0x3468:	test	byte ptr [rsi], 0x10
0x346b:	jne	0x3540


0x3440:	pxor	xmm0, xmm0
0x3444:	mov	qword ptr [rdi + 0x10], 0
0x344c:	movups	xmmword ptr [rdi], xmm0
0x344f:	ret	


0x3290:	push	r15
0x3292:	push	r14
0x3294:	mov	r15, rsi
0x3297:	push	r13
0x3299:	push	r12
0x329b:	mov	r12, rdx
0x329e:	push	rbp
0x329f:	push	rbx
0x32a0:	sub	rsp, 0x18
0x32a4:	mov	qword ptr [rsp + 8], rdi
0x32a9:	mov	rdi, rdx
0x32ac:	call	0x1c20


0x3240:	push	rbp
0x3241:	push	rbx
0x3242:	mov	ebp, edi
0x3244:	lea	rdi, [rip + 0x6513]
0x324b:	xor	esi, esi
0x324d:	xor	eax, eax
0x324f:	sub	rsp, 8
0x3253:	mov	ebx, 1
0x3258:	call	0x1d10


0x3210:	test	rdi, rdi
0x3213:	je	0x3230


0x3200:	jmp	0x1bb0


0x3150:	push	rbp
0x3151:	push	rbx
0x3152:	sub	rsp, 8
0x3156:	mov	rdi, qword ptr [rip + 0x209f2b]
0x315d:	call	0x7930


0x3140:	mov	byte ptr [rip + 0x209f89], dil
0x3147:	ret	


0x3130:	mov	qword ptr [rip + 0x209fa1], rdi
0x3137:	ret	


0x2d50:	push	r13
0x2d52:	push	r12
0x2d54:	mov	edx, 5
0x2d59:	push	rbp
0x2d5a:	push	rbx
0x2d5b:	mov	ebp, edi
0x2d5d:	sub	rsp, 0x88
0x2d64:	mov	rbx, qword ptr [rip + 0x20a375]
0x2d6b:	mov	rax, qword ptr fs:[0x28]
0x2d74:	mov	qword ptr [rsp + 0x78], rax
0x2d79:	xor	eax, eax
0x2d7b:	test	edi, edi
0x2d7d:	je	0x2dad


0x2d40:	push	rbp
0x2d41:	mov	rbp, rsp
0x2d44:	pop	rbp
0x2d45:	jmp	0x2cb0


0x2d00:	cmp	byte ptr [rip + 0x20a3c1], 0
0x2d07:	jne	0x2d38


0x2cb0:	lea	rdi, [rip + 0x20a3c9]
0x2cb7:	lea	rsi, [rip + 0x20a3c2]
0x2cbe:	push	rbp
0x2cbf:	sub	rsi, rdi
0x2cc2:	mov	rbp, rsp
0x2cc5:	sar	rsi, 3
0x2cc9:	mov	rax, rsi
0x2ccc:	shr	rax, 0x3f
0x2cd0:	add	rsi, rax
0x2cd3:	sar	rsi, 1
0x2cd6:	je	0x2cf0


0x2c70:	lea	rdi, [rip + 0x20a409]
0x2c77:	push	rbp
0x2c78:	lea	rax, [rip + 0x20a401]
0x2c7f:	cmp	rax, rdi
0x2c82:	mov	rbp, rsp
0x2c85:	je	0x2ca0


0x2c40:	xor	ebp, ebp
0x2c42:	mov	r9, rdx
0x2c45:	pop	rsi
0x2c46:	mov	rdx, rsp
0x2c49:	and	rsp, 0xfffffffffffffff0
0x2c4d:	push	rax
0x2c4e:	push	rsp
0x2c4f:	lea	r8, [rip + 0x647a]
0x2c56:	lea	rcx, [rip + 0x6403]
0x2c5d:	lea	rdi, [rip - 0xe84]
0x2c64:	call	qword ptr [rip + 0x20a366]


0x1de0:	push	r15
0x1de2:	push	r14
0x1de4:	xor	r15d, r15d
0x1de7:	push	r13
0x1de9:	push	r12
0x1deb:	mov	r12, -1
0x1df2:	push	rbp
0x1df3:	push	rbx
0x1df4:	mov	ebp, edi
0x1df6:	mov	rbx, rsi
0x1df9:	xor	r13d, r13d
0x1dfc:	mov	r14, r12
0x1dff:	sub	rsp, 0x118
0x1e06:	mov	rdi, qword ptr [rsi]
0x1e09:	mov	rax, qword ptr fs:[0x28]
0x1e12:	mov	qword ptr [rsp + 0x108], rax
0x1e1a:	xor	eax, eax
0x1e1c:	call	0x3580


0x1960:	sub	rsp, 8
0x1964:	mov	rax, qword ptr [rip + 0x20b66d]
0x196b:	test	rax, rax
0x196e:	je	0x1972


0x1d50:	jmp	qword ptr [rip + 0x20b22a]


0x9032:	mov	rax, qword ptr [rsp + 0x10]
0x9037:	xor	esi, esi
0x9039:	mov	edx, dword ptr [rax + 0x10]
0x903c:	xor	eax, eax
0x903e:	call	0x1a30


0x8e31:	cmp	esi, 0x406
0x8e37:	jne	0x8e80


0x1c60:	jmp	qword ptr [rip + 0x20b2a2]


0x8a6d:	call	0x19a0


0x88b3:	mov	r12, rsp
0x88b6:	xor	ecx, ecx
0x88b8:	mov	r13, rdx
0x88bb:	mov	rdx, r12
0x88be:	mov	rbx, rdi
0x88c1:	mov	rbp, rsi
0x88c4:	call	0x7ba0


0x8677:	test	rsi, rsi
0x867a:	js	0x87f8


0x86c8:	mov	rdi, rsi
0x86cb:	call	0x7ab0


0x85d3:	cmp	rbp, rax
0x85d6:	jae	0x860c


0x8585:	cmp	qword ptr [rdi + 0x20], 0
0x858a:	je	0x85d3


0x84f0:	cmp	qword ptr [r12], 0
0x84f5:	je	0x8551


0x855b:	mov	qword ptr [rbp + 0x18], 0
0x8563:	mov	qword ptr [rbp + 0x20], 0
0x856b:	pop	rbx
0x856c:	pop	rbp
0x856d:	pop	r12
0x856f:	ret	


0x1c40:	jmp	qword ptr [rip + 0x20b2b2]


0x82ed:	mov	rax, rdx
0x82f0:	ret	


0x82b6:	xor	ebp, ebp
0x82b8:	jmp	0x82a4


0x8267:	mov	r13, rdx
0x826a:	mov	r12, rsi
0x826d:	mov	r15, rdi
0x8270:	xor	ebp, ebp
0x8272:	mov	rdi, qword ptr [r14]
0x8275:	test	rdi, rdi
0x8278:	je	0x829a


0x8242:	xor	eax, eax
0x8244:	ret	


0x81e9:	xor	r8d, r8d
0x81ec:	mov	rcx, qword ptr [r9]
0x81ef:	test	rcx, rcx
0x81f2:	je	0x822d


0x8143:	xor	eax, eax
0x8145:	ret	


0x8117:	mov	rdx, qword ptr [rdi]
0x811a:	mov	rcx, qword ptr [rdi + 8]
0x811e:	cmp	rdx, rcx
0x8121:	jae	0x8148


0x7fc5:	lea	rdx, [rip + 0x226f]
0x7fcc:	mov	esi, 1
0x7fd1:	mov	rdi, r12
0x7fd4:	xor	eax, eax
0x7fd6:	call	0x1d90


0x7f10:	cmp	qword ptr [rcx], 0
0x7f14:	je	0x7f3d


0x7f46:	xor	eax, eax
0x7f48:	cmp	qword ptr [rdi + 0x18], rsi
0x7f4c:	je	0x7f50


0x7ef7:	ret	


0x7d5b:	mov	rbp, rdi
0x7d5e:	mov	r13, rsi
0x7d61:	mov	r14d, edx
0x7d64:	nop	dword ptr [rax]
0x7d68:	mov	r15, qword ptr [r12]
0x7d6c:	test	r15, r15
0x7d6f:	je	0x7e2a


0x7e38:	add	rsp, 8
0x7e3c:	mov	eax, 1
0x7e41:	pop	rbx
0x7e42:	pop	rbp
0x7e43:	pop	r12
0x7e45:	pop	r13
0x7e47:	pop	r14
0x7e49:	pop	r15
0x7e4b:	ret	


0x7d35:	ret	


0x7cd4:	movss	xmm0, dword ptr [rdx + 8]
0x7cd9:	ucomiss	xmm0, dword ptr [rip + 0x25e4]
0x7ce0:	jbe	0x7d30


0x7b3f:	mov	rax, rdi
0x7b42:	ret	


0x1cc0:	jmp	qword ptr [rip + 0x20b272]


0x1d30:	jmp	qword ptr [rip + 0x20b23a]


0x19f0:	jmp	qword ptr [rip + 0x20b3da]


0x1b00:	jmp	qword ptr [rip + 0x20b352]


0x7850:	mov	rax, qword ptr [rdi + 0x20]
0x7854:	cmp	qword ptr [rdi + 0x28], rax
0x7858:	jne	0x784a


0x784a:	jmp	0x1d20


0x781a:	mov	rdi, rbx
0x781d:	pop	rbx
0x781e:	jmp	0x1c50


0x7809:	call	0x1c80


0x1c20:	jmp	qword ptr [rip + 0x20b2c2]


0x7387:	lea	rax, [rsp + 0x10]
0x738c:	mov	r15, rsi
0x738f:	test	rsi, rsi
0x7392:	mov	rbp, rdi
0x7395:	mov	dword ptr [rsp + 8], edx
0x7399:	mov	r14, rcx
0x739c:	mov	r13, r8
0x739f:	cmove	r15, rax
0x73a3:	call	0x19b0


0x76e5:	lea	rcx, [rip + 0x2b3c]
0x76ec:	lea	rsi, [rip + 0x292d]
0x76f3:	lea	rdi, [rip + 0x2946]
0x76fa:	mov	edx, 0x54
0x76ff:	call	0x1b60


0x6f67:	lea	rax, [rsp + 0x10]
0x6f6c:	mov	r15, rsi
0x6f6f:	test	rsi, rsi
0x6f72:	mov	rbp, rdi
0x6f75:	mov	dword ptr [rsp + 8], edx
0x6f79:	mov	r14, rcx
0x6f7c:	mov	r13, r8
0x6f7f:	cmove	r15, rax
0x6f83:	call	0x19b0


0x72c5:	lea	rcx, [rip + 0x2e74]
0x72cc:	lea	rsi, [rip + 0x2d4d]
0x72d3:	lea	rdi, [rip + 0x2d66]
0x72da:	mov	edx, 0x54
0x72df:	call	0x1b60


0x1aa0:	jmp	qword ptr [rip + 0x20b382]


0x1ac0:	jmp	qword ptr [rip + 0x20b372]


0x6d79:	call	0x6dd0


0x6d62:	movzx	edx, dl
0x6d65:	test	rdx, rdx
0x6d68:	jne	0x6d79


0x6d10:	test	rax, rax
0x6d13:	mov	edx, 0x80
0x6d18:	cmove	rax, rdx
0x6d1c:	test	rax, rax
0x6d1f:	jns	0x6d02


0x6ce8:	movabs	rdx, 0x5555555555555553
0x6cf2:	cmp	rax, rdx
0x6cf5:	ja	0x6d21


0x6c90:	test	rcx, rcx
0x6c93:	je	0x6cb8


0x6c5b:	xor	edx, edx
0x6c5d:	movabs	rax, 0x5555555555555554
0x6c67:	div	r9
0x6c6a:	cmp	rax, rcx
0x6c6d:	jbe	0x6cab


0x6c3b:	sub	rsp, 8
0x6c3f:	call	0x6dd0


0x6c31:	movzx	eax, al
0x6c34:	test	rax, rax
0x6c37:	jne	0x6c3b


0x6be9:	test	rdi, rdi
0x6bec:	jne	0x6c08


0x6bee:	mov	rsi, rbx
0x6bf1:	call	0x1ca0


0x6bbb:	sub	rsp, 8
0x6bbf:	call	0x6dd0


0x6bb1:	movzx	eax, al
0x6bb4:	test	rax, rax
0x6bb7:	jne	0x6bbb


0x6a96:	mov	eax, r10d
0x6a99:	mov	r11d, 1
0x6a9f:	add	r10d, 8
0x6aa3:	add	rax, rbp
0x6aa6:	mov	rax, qword ptr [rax]
0x6aa9:	test	rax, rax
0x6aac:	mov	qword ptr [r8 + r9*8], rax
0x6ab0:	je	0x6abc


0x6aec:	mov	rax, rbx
0x6aef:	add	rbx, 8
0x6af3:	jmp	0x6aa6


0x69c8:	mov	r11d, eax
0x69cb:	add	r11, qword ptr [r10 + 0x10]
0x69cf:	add	eax, 8
0x69d2:	mov	dword ptr [r10], eax
0x69d5:	mov	rax, qword ptr [r11]
0x69d8:	test	rax, rax
0x69db:	mov	qword ptr [r8 + r9*8], rax
0x69df:	je	0x69eb


0x6a0a:	mov	r11, qword ptr [r10 + 8]
0x6a0e:	lea	rax, [r11 + 8]
0x6a12:	mov	qword ptr [r10 + 8], rax
0x6a16:	jmp	0x69d5


0x699b:	jmp	0x6560


0x6698:	mov	r8, rcx
0x669b:	mov	rcx, rdx
0x669e:	lea	rdx, [rip + 0x361e]
0x66a5:	mov	esi, 1
0x66aa:	xor	eax, eax
0x66ac:	call	0x1d90


0x6580:	mov	r8, rdx
0x6583:	lea	rdx, [rip + 0x372d]
0x658a:	mov	r9, rcx
0x658d:	xor	eax, eax
0x658f:	mov	rcx, rsi
0x6592:	mov	esi, 1
0x6597:	call	0x1d90


0x61e0:	add	rsi, qword ptr [rdx + 0x20]
0x61e4:	add	rcx, qword ptr [rdx + 0x38]
0x61e8:	mov	r12, qword ptr [rdx]
0x61eb:	add	rbp, qword ptr [rdx + 0x28]
0x61ef:	add	r10, qword ptr [rdx + 0x30]
0x61f3:	sub	r12, rsi
0x61f6:	add	r9, r12
0x61f9:	mov	r12, rcx
0x61fc:	shr	r12, 9
0x6200:	add	rcx, r9
0x6203:	xor	rbp, r12
0x6206:	mov	r12, qword ptr [rdx + 8]
0x620a:	sub	r12, rbp
0x620d:	add	r11, r12
0x6210:	mov	r12, r9
0x6213:	shl	r12, 9
0x6217:	add	r9, r11
0x621a:	xor	r10, r12
0x621d:	mov	r12, qword ptr [rdx + 0x10]
0x6221:	sub	r12, r10
0x6224:	add	rbx, r12
0x6227:	mov	r12, r11
0x622a:	shr	r12, 0x17
0x622e:	add	r11, rbx
0x6231:	xor	rcx, r12
0x6234:	mov	r12, qword ptr [rdx + 0x18]
0x6238:	sub	r12, rcx
0x623b:	add	r8, r12
0x623e:	mov	r12, rbx
0x6241:	shl	r12, 0xf
0x6245:	add	rbx, r8
0x6248:	xor	r9, r12
0x624b:	mov	r12, r8
0x624e:	sub	rsi, r9
0x6251:	shr	r12, 0xe
0x6255:	mov	qword ptr [rdx], r9
0x6258:	xor	r11, r12
0x625b:	mov	r12, rsi
0x625e:	add	r8, rsi
0x6261:	sub	rbp, r11
0x6264:	shl	r12, 0x14
0x6268:	mov	qword ptr [rdx + 8], r11
0x626c:	xor	rbx, r12
0x626f:	lea	r12, [rsi + rbp]
0x6273:	mov	rsi, rbp
0x6276:	sub	r10, rbx
0x6279:	shr	rsi, 0x11
0x627d:	mov	qword ptr [rdx + 0x10], rbx
0x6281:	xor	r8, rsi
0x6284:	mov	rsi, r10
0x6287:	add	rbp, r10
0x628a:	sub	rcx, r8
0x628d:	shl	rsi, 0xe
0x6291:	mov	qword ptr [rdx + 0x18], r8
0x6295:	xor	rsi, r12
0x6298:	add	r10, rcx
0x629b:	mov	qword ptr [rdx + 0x28], rbp
0x629f:	mov	qword ptr [rdx + 0x20], rsi
0x62a3:	mov	qword ptr [rdx + 0x30], r10
0x62a7:	add	rdx, 0x40
0x62ab:	mov	qword ptr [rdx - 8], rcx
0x62af:	cmp	rax, rdx
0x62b2:	jne	0x61e0


0x6108:	add	rsi, qword ptr [rax + 0x20]
0x610c:	add	rcx, qword ptr [rax + 0x38]
0x6110:	mov	r13, qword ptr [rax]
0x6113:	add	rbp, qword ptr [rax + 0x28]
0x6117:	add	r10, qword ptr [rax + 0x30]
0x611b:	sub	r13, rsi
0x611e:	add	r9, r13
0x6121:	mov	r13, rcx
0x6124:	shr	r13, 9
0x6128:	add	rcx, r9
0x612b:	xor	rbp, r13
0x612e:	mov	r13, qword ptr [rax + 8]
0x6132:	sub	r13, rbp
0x6135:	add	r11, r13
0x6138:	mov	r13, r9
0x613b:	shl	r13, 9
0x613f:	add	r9, r11
0x6142:	xor	r10, r13
0x6145:	mov	r13, qword ptr [rax + 0x10]
0x6149:	sub	r13, r10
0x614c:	add	rbx, r13
0x614f:	mov	r13, r11
0x6152:	shr	r13, 0x17
0x6156:	add	r11, rbx
0x6159:	xor	rcx, r13
0x615c:	mov	r13, qword ptr [rax + 0x18]
0x6160:	sub	r13, rcx
0x6163:	add	r8, r13
0x6166:	mov	r13, rbx
0x6169:	shl	r13, 0xf
0x616d:	add	rbx, r8
0x6170:	xor	r9, r13
0x6173:	mov	r13, r8
0x6176:	sub	rsi, r9
0x6179:	shr	r13, 0xe
0x617d:	mov	qword ptr [rax], r9
0x6180:	xor	r11, r13
0x6183:	mov	r13, rsi
0x6186:	add	r8, rsi
0x6189:	sub	rbp, r11
0x618c:	shl	r13, 0x14
0x6190:	mov	qword ptr [rax + 8], r11
0x6194:	xor	rbx, r13
0x6197:	lea	r13, [rsi + rbp]
0x619b:	mov	rsi, rbp
0x619e:	sub	r10, rbx
0x61a1:	shr	rsi, 0x11
0x61a5:	mov	qword ptr [rax + 0x10], rbx
0x61a9:	xor	r8, rsi
0x61ac:	mov	rsi, r10
0x61af:	add	rbp, r10
0x61b2:	sub	rcx, r8
0x61b5:	shl	rsi, 0xe
0x61b9:	mov	qword ptr [rax + 0x18], r8
0x61bd:	xor	rsi, r13
0x61c0:	add	r10, rcx
0x61c3:	mov	qword ptr [rax + 0x28], rbp
0x61c7:	mov	qword ptr [rax + 0x20], rsi
0x61cb:	mov	qword ptr [rax + 0x30], r10
0x61cf:	add	rax, 0x40
0x61d3:	mov	qword ptr [rax - 8], rcx
0x61d7:	cmp	r12, rax
0x61da:	jne	0x6108


0x5e40:	mov	r8, rdx
0x5e43:	shl	r8, 0x15
0x5e47:	xor	rdx, r8
0x5e4a:	mov	r8, qword ptr [rax]
0x5e4d:	not	rdx
0x5e50:	add	rdx, qword ptr [rax + 0x400]
0x5e57:	mov	r10, r8
0x5e5a:	and	r10d, 0x7f8
0x5e61:	mov	r11, qword ptr [rdi + r10]
0x5e65:	mov	r10, rdx
0x5e68:	shr	r10, 5
0x5e6c:	add	r11, rdx
0x5e6f:	xor	rdx, r10
0x5e72:	add	rcx, r11
0x5e75:	mov	qword ptr [rax], rcx
0x5e78:	shr	rcx, 8
0x5e7c:	and	ecx, 0x7f8
0x5e82:	mov	r11, qword ptr [rdi + rcx]
0x5e86:	add	r11, r8
0x5e89:	mov	qword ptr [rsi], r11
0x5e8c:	add	rdx, qword ptr [rax + 0x408]
0x5e93:	mov	rcx, qword ptr [rax + 8]
0x5e97:	mov	r10, rdx
0x5e9a:	mov	rdx, rcx
0x5e9d:	and	edx, 0x7f8
0x5ea3:	mov	r8, qword ptr [rdi + rdx]
0x5ea7:	mov	rdx, r10
0x5eaa:	shl	rdx, 0xc
0x5eae:	xor	rdx, r10
0x5eb1:	add	r8, r10
0x5eb4:	add	r8, r11
0x5eb7:	mov	qword ptr [rax + 8], r8
0x5ebb:	shr	r8, 8
0x5ebf:	and	r8d, 0x7f8
0x5ec6:	add	rcx, qword ptr [rdi + r8]
0x5eca:	mov	qword ptr [rsi + 8], rcx
0x5ece:	mov	r8, qword ptr [rax + 0x10]
0x5ed2:	mov	r11, rcx
0x5ed5:	add	rdx, qword ptr [rax + 0x410]
0x5edc:	mov	rcx, r8
0x5edf:	and	ecx, 0x7f8
0x5ee5:	mov	r10, qword ptr [rdi + rcx]
0x5ee9:	add	r10, rdx
0x5eec:	mov	rcx, r10
0x5eef:	add	rcx, r11
0x5ef2:	mov	qword ptr [rax + 0x10], rcx
0x5ef6:	shr	rcx, 8
0x5efa:	and	ecx, 0x7f8
0x5f00:	mov	r10, qword ptr [rdi + rcx]
0x5f04:	mov	rcx, rdx
0x5f07:	shr	rcx, 0x21
0x5f0b:	xor	rdx, rcx
0x5f0e:	add	r10, r8
0x5f11:	mov	qword ptr [rsi + 0x10], r10
0x5f15:	mov	rcx, qword ptr [rax + 0x18]
0x5f19:	add	rdx, qword ptr [rax + 0x418]
0x5f20:	mov	r8, rcx
0x5f23:	and	r8d, 0x7f8
0x5f2a:	mov	r11, qword ptr [rdi + r8]
0x5f2e:	add	r11, rdx
0x5f31:	mov	r8, r11
0x5f34:	add	r8, r10
0x5f37:	add	rax, 0x20
0x5f3b:	add	rsi, 0x20
0x5f3f:	mov	qword ptr [rax - 8], r8
0x5f43:	shr	r8, 8
0x5f47:	and	r8d, 0x7f8
0x5f4e:	add	rcx, qword ptr [rdi + r8]
0x5f52:	mov	qword ptr [rsi - 8], rcx
0x5f56:	cmp	rax, r9
0x5f59:	jb	0x5e40


0x5f5f:	lea	r9, [rdi + 0x800]
0x5f66:	nop	word ptr cs:[rax + rax]
0x5f70:	mov	r8, rdx
0x5f73:	shl	r8, 0x15
0x5f77:	xor	rdx, r8
0x5f7a:	mov	r8, qword ptr [rax]
0x5f7d:	not	rdx
0x5f80:	add	rdx, qword ptr [rax - 0x400]
0x5f87:	mov	r10, r8
0x5f8a:	and	r10d, 0x7f8
0x5f91:	mov	r11, qword ptr [rdi + r10]
0x5f95:	mov	r10, rdx
0x5f98:	shr	r10, 5
0x5f9c:	add	r11, rdx
0x5f9f:	xor	rdx, r10
0x5fa2:	add	rcx, r11
0x5fa5:	mov	qword ptr [rax], rcx
0x5fa8:	shr	rcx, 8
0x5fac:	and	ecx, 0x7f8
0x5fb2:	mov	r11, qword ptr [rdi + rcx]
0x5fb6:	add	r11, r8
0x5fb9:	mov	qword ptr [rsi], r11
0x5fbc:	add	rdx, qword ptr [rax - 0x3f8]
0x5fc3:	mov	rcx, qword ptr [rax + 8]
0x5fc7:	mov	r10, rdx
0x5fca:	mov	rdx, rcx
0x5fcd:	and	edx, 0x7f8
0x5fd3:	mov	r8, qword ptr [rdi + rdx]
0x5fd7:	mov	rdx, r10
0x5fda:	shl	rdx, 0xc
0x5fde:	xor	rdx, r10
0x5fe1:	add	r8, r10
0x5fe4:	add	r8, r11
0x5fe7:	mov	qword ptr [rax + 8], r8
0x5feb:	shr	r8, 8
0x5fef:	and	r8d, 0x7f8
0x5ff6:	add	rcx, qword ptr [rdi + r8]
0x5ffa:	mov	qword ptr [rsi + 8], rcx
0x5ffe:	mov	r8, qword ptr [rax + 0x10]
0x6002:	mov	r11, rcx
0x6005:	add	rdx, qword ptr [rax - 0x3f0]
0x600c:	mov	rcx, r8
0x600f:	and	ecx, 0x7f8
0x6015:	mov	r10, qword ptr [rdi + rcx]
0x6019:	add	r10, rdx
0x601c:	mov	rcx, r10
0x601f:	add	rcx, r11
0x6022:	mov	qword ptr [rax + 0x10], rcx
0x6026:	shr	rcx, 8
0x602a:	and	ecx, 0x7f8
0x6030:	mov	r10, qword ptr [rdi + rcx]
0x6034:	mov	rcx, rdx
0x6037:	shr	rcx, 0x21
0x603b:	xor	rdx, rcx
0x603e:	add	r10, r8
0x6041:	mov	qword ptr [rsi + 0x10], r10
0x6045:	mov	rcx, qword ptr [rax + 0x18]
0x6049:	add	rdx, qword ptr [rax - 0x3e8]
0x6050:	mov	r8, rcx
0x6053:	and	r8d, 0x7f8
0x605a:	mov	r11, qword ptr [rdi + r8]
0x605e:	add	r11, rdx
0x6061:	mov	r8, r11
0x6064:	add	r8, r10
0x6067:	add	rax, 0x20
0x606b:	add	rsi, 0x20
0x606f:	mov	qword ptr [rax - 8], r8
0x6073:	shr	r8, 8
0x6077:	and	r8d, 0x7f8
0x607e:	add	rcx, qword ptr [rdi + r8]
0x6082:	mov	qword ptr [rsi - 8], rcx
0x6086:	cmp	rax, r9
0x6089:	jb	0x5f70


0x1d00:	jmp	qword ptr [rip + 0x20b252]


0x5ca8:	mov	r14, qword ptr [rdi + 0x18]
0x5cac:	lea	rax, [rdi + 0x838]
0x5cb3:	lea	r13, [rdi + 0x20]
0x5cb7:	mov	qword ptr [rsp + 8], rax
0x5cbc:	cmp	rdx, r14
0x5cbf:	jbe	0x5da2


0x5c44:	call	0x19b0


0x5a18:	mov	edi, 0x1038
0x5a1d:	call	0x6b80


0x58f7:	test	rdi, rdi
0x58fa:	mov	r12, rdi
0x58fd:	mov	rbp, rsi
0x5900:	je	0x5980


0x58b8:	call	0x19a0


0x587b:	call	0x5290


0x57e8:	xor	ebx, ebx
0x57ea:	jmp	0x5572


0x5547:	cmp	rsi, 1
0x554b:	mov	r13, rdi
0x554e:	mov	r12, rsi
0x5551:	mov	rbp, rdx
0x5554:	jne	0x55a0


0x5515:	ret	


0x54f9:	xor	esi, esi
0x54fb:	nop	dword ptr [rax + rax]
0x5500:	add	rsi, 1
0x5504:	shr	rax, 1
0x5507:	jne	0x5500


0x53a5:	cmp	rbx, r14
0x53a8:	jae	0x5370


0x51d7:	call	0x19a0


0x51a5:	test	rdx, rdx
0x51a8:	je	0x51d7


0x5144:	call	0x19a0


0x50dc:	mov	dword ptr [rsp], esi
0x50df:	mov	rcx, rsp
0x50e2:	mov	rdx, -1
0x50e9:	mov	rsi, rax
0x50ec:	mov	qword ptr [rsp + 4], 0
0x50f5:	mov	qword ptr [rsp + 0xc], 0x4000000
0x50fe:	mov	qword ptr [rsp + 0x14], 0
0x5107:	mov	qword ptr [rsp + 0x1c], 0
0x5110:	mov	qword ptr [rsp + 0x24], 0
0x5119:	mov	qword ptr [rsp + 0x2c], 0
0x5122:	mov	dword ptr [rsp + 0x34], 0
0x512a:	call	0x4950


0x4fb0:	call	0x19a0


0x4f4f:	mov	dword ptr [rsp], esi
0x4f52:	mov	rcx, rsp
0x4f55:	mov	rsi, rax
0x4f58:	mov	qword ptr [rsp + 4], 0
0x4f61:	mov	qword ptr [rsp + 0xc], 0
0x4f6a:	mov	qword ptr [rsp + 0x14], 0
0x4f73:	mov	qword ptr [rsp + 0x1c], 0
0x4f7c:	mov	qword ptr [rsp + 0x24], 0
0x4f85:	mov	qword ptr [rsp + 0x2c], 0
0x4f8e:	mov	dword ptr [rsp + 0x34], 0
0x4f96:	call	0x4950


0x4f24:	call	0x19a0


0x4ebc:	mov	dword ptr [rsp], esi
0x4ebf:	mov	rcx, rsp
0x4ec2:	mov	rdx, -1
0x4ec9:	mov	rsi, rax
0x4ecc:	mov	qword ptr [rsp + 4], 0
0x4ed5:	mov	qword ptr [rsp + 0xc], 0
0x4ede:	mov	qword ptr [rsp + 0x14], 0
0x4ee7:	mov	qword ptr [rsp + 0x1c], 0
0x4ef0:	mov	qword ptr [rsp + 0x24], 0
0x4ef9:	mov	qword ptr [rsp + 0x2c], 0
0x4f02:	mov	dword ptr [rsp + 0x34], 0
0x4f0a:	call	0x4950


0x4dd1:	mov	rdi, qword ptr [r12 + 8]
0x4dd6:	lea	rbx, [rip + 0x208323]
0x4ddd:	cmp	rdi, rbx
0x4de0:	je	0x4df9


0x4da6:	sub	eax, 2
0x4da9:	lea	rbx, [r12 + 0x18]
0x4dae:	shl	rax, 4
0x4db2:	lea	rbp, [r12 + rax + 0x28]
0x4db7:	nop	word ptr [rax + rax]
0x4dc0:	mov	rdi, qword ptr [rbx]
0x4dc3:	add	rbx, 0x10
0x4dc7:	call	0x1dd0


0x19b0:	jmp	qword ptr [rip + 0x20b3fa]


0x4c07:	sub	rsp, 8
0x4c0b:	call	0x19a0


0x4bf9:	test	rdx, rdx
0x4bfc:	je	0x4c07


0x1ab0:	jmp	qword ptr [rip + 0x20b37a]


0x35fd:	mov	rcx, qword ptr [rip + 0x209abc]
0x3604:	lea	rdi, [rip + 0x615d]
0x360b:	mov	edx, 0x37
0x3610:	mov	esi, 1
0x3615:	call	0x1d80


0x3586:	mov	esi, 0x2f
0x358b:	mov	rbx, rdi
0x358e:	call	0x1b30


0x1dd0:	jmp	qword ptr [rip + 0x20b1ea]


0x3471:	mov	r14, rdi
0x3474:	mov	rbp, rsi
0x3477:	mov	rbx, r13
0x347a:	movsx	r15d, dl
0x347e:	jmp	0x348b


0x3540:	add	rsp, 0x18
0x3544:	xor	eax, eax
0x3546:	pop	rbx
0x3547:	pop	rbp
0x3548:	pop	r12
0x354a:	pop	r13
0x354c:	pop	r14
0x354e:	pop	r15
0x3550:	ret	


0x1d10:	jmp	qword ptr [rip + 0x20b24a]


0x3230:	ret	


0x3215:	push	rbx
0x3216:	mov	ebx, esi
0x3218:	call	0x1c20


0x1bb0:	jmp	qword ptr [rip + 0x20b2fa]


0x2dad:	lea	rsi, [rip + 0x653c]
0x2db4:	xor	edi, edi
0x2db6:	call	0x1aa0


0x2d7f:	lea	rsi, [rip + 0x6542]
0x2d86:	xor	edi, edi
0x2d88:	call	0x1aa0


0x2d09:	cmp	qword ptr [rip + 0x20a2d7], 0
0x2d11:	push	rbp
0x2d12:	mov	rbp, rsp
0x2d15:	je	0x2d23


0x2d38:	ret	


0x2cf0:	pop	rbp
0x2cf1:	ret	


0x2cd8:	mov	rax, qword ptr [rip + 0x20a301]
0x2cdf:	test	rax, rax
0x2ce2:	je	0x2cf0


0x2ca0:	pop	rbp
0x2ca1:	ret	


0x2c87:	mov	rax, qword ptr [rip + 0x20a33a]
0x2c8e:	test	rax, rax
0x2c91:	je	0x2ca0




0x1972:	add	rsp, 8
0x1976:	ret	


0x1970:	call	rax




0x1a30:	jmp	qword ptr [rip + 0x20b3ba]


0x8e39:	mov	rax, qword ptr [rsp + 0x10]
0x8e3e:	cmp	dword ptr [rip + 0x2043f3], 0
0x8e45:	mov	dword ptr [rsp], 0x18
0x8e4c:	mov	r12d, dword ptr [rax + 0x10]
0x8e50:	mov	edx, r12d
0x8e53:	js	0x8f83


0x8e80:	cmp	esi, 0xb
0x8e83:	je	0x8eb0




0x19a0:	jmp	qword ptr [rip + 0x20b402]


0x87f8:	mov	rax, rsi
0x87fb:	pxor	xmm0, xmm0
0x87ff:	shr	rax, 1
0x8802:	and	esi, 1
0x8805:	or	rax, rsi
0x8808:	cvtsi2ss	xmm0, rax
0x880d:	addss	xmm0, xmm0
0x8811:	jmp	0x8689


0x8680:	pxor	xmm0, xmm0
0x8684:	cvtsi2ss	xmm0, rsi
0x8689:	divss	xmm0, dword ptr [r12 + 8]
0x8690:	ucomiss	xmm0, dword ptr [rip + 0x1c45]
0x8697:	jae	0x87d0


0x860c:	mov	rdi, qword ptr [r12 + 0x48]
0x8611:	test	rdi, rdi
0x8614:	je	0x8631


0x858c:	cmp	rbp, rax
0x858f:	jae	0x860c


0x8551:	add	r12, 0x10
0x8555:	cmp	qword ptr [rbp + 8], r12
0x8559:	ja	0x84f0


0x84f7:	mov	rbx, qword ptr [r12 + 8]
0x84fc:	mov	rax, qword ptr [rbp + 0x40]
0x8500:	test	rbx, rbx
0x8503:	je	0x8535




0x82d0:	mov	rax, rdx
0x82d3:	add	rdi, 1
0x82d7:	shl	rax, 5
0x82db:	sub	rax, rdx
0x82de:	xor	edx, edx
0x82e0:	add	rax, rcx
0x82e3:	movzx	ecx, byte ptr [rdi]
0x82e6:	div	rsi
0x82e9:	test	cl, cl
0x82eb:	jne	0x82d0


0x82a4:	add	rsp, 8
0x82a8:	mov	rax, rbp
0x82ab:	pop	rbx
0x82ac:	pop	rbp
0x82ad:	pop	r12
0x82af:	pop	r13
0x82b1:	pop	r14
0x82b3:	pop	r15
0x82b5:	ret	


0x829a:	add	r14, 0x10
0x829e:	cmp	qword ptr [r15 + 8], r14
0x82a2:	ja	0x8272


0x827a:	mov	rbx, r14
0x827d:	jmp	0x8283


0x822d:	add	r9, 0x10
0x8231:	cmp	qword ptr [rdi + 8], r9
0x8235:	ja	0x81ec


0x81f4:	cmp	rdx, r8
0x81f7:	jbe	0x8237


0x8123:	mov	rax, qword ptr [rdx]
0x8126:	test	rax, rax
0x8129:	jne	0x8146


0x8148:	sub	rsp, 8
0x814c:	call	0x19a0


0x7fbc:	add	rsi, 0x10
0x7fc0:	cmp	rsi, rdi
0x7fc3:	jb	0x7f90


0x7f96:	mov	rax, qword ptr [rsi + 8]
0x7f9a:	mov	edx, 1
0x7f9f:	test	rax, rax
0x7fa2:	je	0x7fb5


0x1d90:	jmp	qword ptr [rip + 0x20b20a]


0x7f3d:	add	rcx, 0x10
0x7f41:	cmp	rcx, r8
0x7f44:	jb	0x7f10


0x7f16:	mov	rax, qword ptr [rcx + 8]
0x7f1a:	add	rsi, 1
0x7f1e:	add	rdx, 1
0x7f22:	test	rax, rax
0x7f25:	je	0x7f3d


0x7f50:	cmp	qword ptr [rdi + 0x20], rdx
0x7f54:	sete	al
0x7f57:	ret	


0x7f4e:	ret	


0x7eec:	add	rsi, 0x10
0x7ef0:	cmp	rsi, rdi
0x7ef3:	jb	0x7ec0


0x7ec6:	mov	rdx, qword ptr [rsi + 8]
0x7eca:	mov	ecx, 1
0x7ecf:	test	rdx, rdx
0x7ed2:	je	0x7ee5


0x7e2a:	add	r12, 0x10
0x7e2e:	cmp	qword ptr [r13 + 8], r12
0x7e32:	ja	0x7d68


0x7d75:	mov	rbx, qword ptr [r12 + 8]
0x7d7a:	test	rbx, rbx
0x7d7d:	jne	0x7d9c


0x7d30:	mov	qword ptr [rdi], rcx
0x7d33:	xor	eax, eax
0x7d35:	ret	


0x7ce2:	movss	xmm1, dword ptr [rip + 0x25de]
0x7cea:	ucomiss	xmm1, xmm0
0x7ced:	jbe	0x7d30


0x7b30:	test	rax, rax
0x7b33:	jne	0x7b3f


0x7af7:	test	rcx, rcx
0x7afa:	je	0x7b35










0x785a:	cmp	qword ptr [rdi + 0x48], 0
0x785f:	jne	0x784a


0x1d20:	jmp	qword ptr [rip + 0x20b242]


0x1c50:	jmp	qword ptr [rip + 0x20b2aa]


0x1c80:	jmp	qword ptr [rip + 0x20b292]




0x1b60:	jmp	qword ptr [rip + 0x20b322]






0x6d6a:	call	0x1bf0


0x6d21:	sub	rsp, 8
0x6d25:	call	0x6dd0


0x6d02:	mov	qword ptr [rsi], rax
0x6d05:	mov	rsi, rax
0x6d08:	jmp	0x6be0


0x6cf7:	mov	rdx, rax
0x6cfa:	shr	rdx, 1
0x6cfd:	lea	rax, [rdx + rax + 1]
0x6d02:	mov	qword ptr [rsi], rax
0x6d05:	mov	rsi, rax
0x6d08:	jmp	0x6be0


0x6cb8:	xor	edx, edx
0x6cba:	mov	eax, 0x80
0x6cbf:	xor	r8d, r8d
0x6cc2:	div	r9
0x6cc5:	test	rax, rax
0x6cc8:	sete	r8b
0x6ccc:	lea	rcx, [r8 + rax]
0x6cd0:	jmp	0x6c95


0x6c95:	mov	rax, rcx
0x6c98:	mul	r9
0x6c9b:	seto	dl
0x6c9e:	test	rax, rax
0x6ca1:	movzx	edx, dl
0x6ca4:	js	0x6cab


0x6cab:	sub	rsp, 8
0x6caf:	call	0x6dd0


0x6c6f:	mov	rax, rcx
0x6c72:	shr	rax, 1
0x6c75:	lea	rcx, [rax + rcx + 1]
0x6c7a:	mov	qword ptr [rsi], rcx
0x6c7d:	imul	rcx, r9
0x6c81:	mov	rsi, rcx
0x6c84:	jmp	0x6be0


0x6c39:	jmp	0x6be0


0x6c08:	call	0x1dd0


0x1ca0:	jmp	qword ptr [rip + 0x20b282]


0x6bb9:	jmp	0x6b80


0x6abc:	test	r11b, r11b
0x6abf:	jne	0x6ae5


0x6ab2:	add	r9, 1
0x6ab6:	cmp	r9, 0xa
0x6aba:	jne	0x6a90


0x6aa6:	mov	rax, qword ptr [rax]
0x6aa9:	test	rax, rax
0x6aac:	mov	qword ptr [r8 + r9*8], rax
0x6ab0:	je	0x6abc


0x69eb:	call	0x6560


0x69e1:	add	r9, 1
0x69e5:	cmp	r9, 0xa
0x69e9:	jne	0x69c0


0x69d5:	mov	rax, qword ptr [r11]
0x69d8:	test	rax, rax
0x69db:	mov	qword ptr [r8 + r9*8], rax
0x69df:	je	0x69eb


0x6990:	add	r9, 1
0x6994:	cmp	qword ptr [r8 + r9*8], 0
0x6999:	jne	0x6990


0x62b8:	pop	rbx
0x62b9:	mov	qword ptr [rdi + 0x810], 0
0x62c4:	mov	qword ptr [rdi + 0x808], 0
0x62cf:	pop	rbp
0x62d0:	mov	qword ptr [rdi + 0x800], 0
0x62db:	pop	r12
0x62dd:	pop	r13
0x62df:	ret	


0x5f70:	mov	r8, rdx
0x5f73:	shl	r8, 0x15
0x5f77:	xor	rdx, r8
0x5f7a:	mov	r8, qword ptr [rax]
0x5f7d:	not	rdx
0x5f80:	add	rdx, qword ptr [rax - 0x400]
0x5f87:	mov	r10, r8
0x5f8a:	and	r10d, 0x7f8
0x5f91:	mov	r11, qword ptr [rdi + r10]
0x5f95:	mov	r10, rdx
0x5f98:	shr	r10, 5
0x5f9c:	add	r11, rdx
0x5f9f:	xor	rdx, r10
0x5fa2:	add	rcx, r11
0x5fa5:	mov	qword ptr [rax], rcx
0x5fa8:	shr	rcx, 8
0x5fac:	and	ecx, 0x7f8
0x5fb2:	mov	r11, qword ptr [rdi + rcx]
0x5fb6:	add	r11, r8
0x5fb9:	mov	qword ptr [rsi], r11
0x5fbc:	add	rdx, qword ptr [rax - 0x3f8]
0x5fc3:	mov	rcx, qword ptr [rax + 8]
0x5fc7:	mov	r10, rdx
0x5fca:	mov	rdx, rcx
0x5fcd:	and	edx, 0x7f8
0x5fd3:	mov	r8, qword ptr [rdi + rdx]
0x5fd7:	mov	rdx, r10
0x5fda:	shl	rdx, 0xc
0x5fde:	xor	rdx, r10
0x5fe1:	add	r8, r10
0x5fe4:	add	r8, r11
0x5fe7:	mov	qword ptr [rax + 8], r8
0x5feb:	shr	r8, 8
0x5fef:	and	r8d, 0x7f8
0x5ff6:	add	rcx, qword ptr [rdi + r8]
0x5ffa:	mov	qword ptr [rsi + 8], rcx
0x5ffe:	mov	r8, qword ptr [rax + 0x10]
0x6002:	mov	r11, rcx
0x6005:	add	rdx, qword ptr [rax - 0x3f0]
0x600c:	mov	rcx, r8
0x600f:	and	ecx, 0x7f8
0x6015:	mov	r10, qword ptr [rdi + rcx]
0x6019:	add	r10, rdx
0x601c:	mov	rcx, r10
0x601f:	add	rcx, r11
0x6022:	mov	qword ptr [rax + 0x10], rcx
0x6026:	shr	rcx, 8
0x602a:	and	ecx, 0x7f8
0x6030:	mov	r10, qword ptr [rdi + rcx]
0x6034:	mov	rcx, rdx
0x6037:	shr	rcx, 0x21
0x603b:	xor	rdx, rcx
0x603e:	add	r10, r8
0x6041:	mov	qword ptr [rsi + 0x10], r10
0x6045:	mov	rcx, qword ptr [rax + 0x18]
0x6049:	add	rdx, qword ptr [rax - 0x3e8]
0x6050:	mov	r8, rcx
0x6053:	and	r8d, 0x7f8
0x605a:	mov	r11, qword ptr [rdi + r8]
0x605e:	add	r11, rdx
0x6061:	mov	r8, r11
0x6064:	add	r8, r10
0x6067:	add	rax, 0x20
0x606b:	add	rsi, 0x20
0x606f:	mov	qword ptr [rax - 8], r8
0x6073:	shr	r8, 8
0x6077:	and	r8d, 0x7f8
0x607e:	add	rcx, qword ptr [rdi + r8]
0x6082:	mov	qword ptr [rsi - 8], rcx
0x6086:	cmp	rax, r9
0x6089:	jb	0x5f70


0x608f:	mov	qword ptr [rdi + 0x800], rdx
0x6096:	mov	qword ptr [rdi + 0x808], rcx
0x609d:	ret	




0x5da2:	mov	r15, rax
0x5da5:	sub	r15, r14
0x5da8:	lea	rax, [r15 + 0x800]
0x5daf:	mov	qword ptr [rsp + 8], rax
0x5db4:	jmp	0x5d76


0x5cc5:	mov	esi, 0x800
0x5cca:	mov	rdi, rbx
0x5ccd:	mov	rdx, r14
0x5cd0:	sub	rsi, r14
0x5cd3:	add	rsi, qword ptr [rsp + 8]
0x5cd8:	add	rbx, r14
0x5cdb:	sub	rbp, r14
0x5cde:	call	0x1c10


0x5980:	mov	edi, 0x1038
0x5985:	call	0x6b80


0x5902:	lea	rsi, [rip + 0x43ab]
0x5909:	call	0x79b0


0x5572:	mov	rdx, qword ptr [rsp + 0x58]
0x5577:	xor	rdx, qword ptr fs:[0x28]
0x5580:	mov	rax, rbx
0x5583:	jne	0x5847


0x5556:	mov	edi, 8
0x555b:	call	0x6b80


0x55a0:	cmp	rdx, 0x1ffff
0x55a7:	jbe	0x5628


0x5509:	imul	rdi, rsi
0x550d:	lea	rax, [rdi + 7]
0x5511:	shr	rax, 3
0x5515:	ret	


0x5500:	add	rsi, 1
0x5504:	shr	rax, 1
0x5507:	jne	0x5500


0x53aa:	mov	rax, rbx
0x53ad:	xor	edx, edx
0x53af:	nop	
0x53b0:	shl	rax, 8
0x53b4:	add	rdx, 1
0x53b8:	add	rax, 0xff
0x53be:	cmp	r14, rax
0x53c1:	ja	0x53b0


0x5370:	cmp	rbx, r14
0x5373:	je	0x53ff


0x51aa:	mov	qword ptr [rsp + 0x28], rsi
0x51af:	mov	qword ptr [rsp + 0x30], rdx
0x51b4:	mov	rcx, rsp
0x51b7:	mov	rdx, r8
0x51ba:	mov	rsi, r9
0x51bd:	call	0x4950


0x4df9:	lea	rbx, [rip + 0x208270]
0x4e00:	cmp	r12, rbx
0x4e03:	je	0x4e14


0x4de2:	call	0x1dd0




0x4bfe:	mov	qword ptr [rdi + 0x28], rsi
0x4c02:	mov	qword ptr [rdi + 0x30], rdx
0x4c06:	ret	




0x1d80:	jmp	qword ptr [rip + 0x20b212]


0x1b30:	jmp	qword ptr [rip + 0x20b33a]




0x348b:	mov	rcx, qword ptr [rbp + 8]
0x348f:	cmp	rcx, qword ptr [rbp + 0x10]
0x3493:	jae	0x3500






0x2d23:	call	0x2c70


0x2d17:	mov	rdi, qword ptr [rip + 0x20a2ea]
0x2d1e:	call	0x1dd8


0x2ce4:	pop	rbp
0x2ce5:	jmp	rax


0x2c93:	pop	rbp
0x2c94:	jmp	rax




0x8f83:	xor	esi, esi
0x8f85:	xor	eax, eax
0x8f87:	call	0x1a30


0x8e59:	xor	eax, eax
0x8e5b:	mov	esi, 0x406
0x8e60:	call	0x1a30


0x8eb0:	mov	edi, ebp
0x8eb2:	xor	eax, eax
0x8eb4:	call	0x1a30


0x8e85:	jg	0x8ee0




0x8689:	divss	xmm0, dword ptr [r12 + 8]
0x8690:	ucomiss	xmm0, dword ptr [rip + 0x1c45]
0x8697:	jae	0x87d0


0x869d:	ucomiss	xmm0, dword ptr [rip + 0x1c3c]
0x86a4:	jb	0x8820


0x87d0:	xor	ebx, ebx
0x87d2:	mov	rcx, qword ptr [rsp + 0x58]
0x87d7:	xor	rcx, qword ptr fs:[0x28]
0x87e0:	mov	eax, ebx
0x87e2:	jne	0x887a


0x8601:	add	rbp, 0x10
0x8605:	cmp	qword ptr [r12 + 8], rbp
0x860a:	ja	0x85e0


0x8631:	mov	rdi, qword ptr [r12]
0x8635:	call	0x1dd0


0x8535:	test	rax, rax
0x8538:	je	0x8540


0x8272:	mov	rdi, qword ptr [r14]
0x8275:	test	rdi, rdi
0x8278:	je	0x829a


0x8283:	mov	rsi, r13
0x8286:	call	r12


0x8237:	mov	rax, r8
0x823a:	ret	


0x81ec:	mov	rcx, qword ptr [r9]
0x81ef:	test	rcx, rcx
0x81f2:	je	0x822d


0x81f9:	mov	qword ptr [rsi + r8*8], rcx
0x81fd:	mov	rcx, qword ptr [r9 + 8]
0x8201:	lea	rax, [r8 + 1]
0x8205:	test	rcx, rcx
0x8208:	je	0x822a


0x8146:	ret	


0x7f90:	cmp	qword ptr [rsi], 0
0x7f94:	je	0x7fbc


0x7fb5:	cmp	rbx, rdx
0x7fb8:	cmovb	rbx, rdx
0x7fbc:	add	rsi, 0x10
0x7fc0:	cmp	rsi, rdi
0x7fc3:	jb	0x7f90




0x7ec0:	cmp	qword ptr [rsi], 0
0x7ec4:	je	0x7eec


0x7ef5:	ret	


0x7ee5:	cmp	rax, rcx
0x7ee8:	cmovb	rax, rcx
0x7eec:	add	rsi, 0x10
0x7ef0:	cmp	rsi, rdi
0x7ef3:	jb	0x7ec0


0x7d68:	mov	r15, qword ptr [r12]
0x7d6c:	test	r15, r15
0x7d6f:	je	0x7e2a


0x7d7f:	jmp	0x7ddb


0x7d9c:	mov	r15, qword ptr [rbx]
0x7d9f:	mov	rdi, rbp
0x7da2:	mov	rsi, r15
0x7da5:	call	0x7b70


0x7cef:	movss	xmm1, dword ptr [rdx + 0xc]
0x7cf4:	ucomiss	xmm1, dword ptr [rip + 0x25d1]
0x7cfb:	jbe	0x7d30


0x7b35:	add	rdi, 2
0x7b39:	cmp	rdi, -1
0x7b3d:	jne	0x7ad8


0x7afc:	mov	r8d, 0x10
0x7b02:	mov	esi, 9
0x7b07:	mov	ecx, 3
0x7b0c:	jmp	0x7b19


0x7861:	push	r12
0x7863:	push	rbp
0x7864:	mov	r12d, edx
0x7867:	push	rbx
0x7868:	mov	rbp, rsi
0x786b:	mov	rbx, rdi
0x786e:	call	0x1c20










0x1bf0:	jmp	qword ptr [rip + 0x20b2da]


0x6ca6:	test	rdx, rdx
0x6ca9:	je	0x6c7a




0x6ac1:	call	0x6560


0x6ae5:	mov	dword ptr [rsp + 8], r10d
0x6aea:	jmp	0x6ac1


0x6a90:	cmp	r10d, 0x2f
0x6a94:	ja	0x6aec


0x69c0:	mov	eax, dword ptr [r10]
0x69c3:	cmp	eax, 0x2f
0x69c6:	ja	0x6a0a


0x5d76:	mov	rsi, qword ptr [rsp + 8]
0x5d7b:	mov	rdx, rbp
0x5d7e:	mov	rdi, rbx
0x5d81:	sub	r14, rbp
0x5d84:	call	0x1c10


0x1c10:	jmp	qword ptr [rip + 0x20b2ca]


0x5589:	add	rsp, 0x68
0x558d:	pop	rbx
0x558e:	pop	rbp
0x558f:	pop	r12
0x5591:	pop	r13
0x5593:	pop	r14
0x5595:	pop	r15
0x5597:	ret	


0x5847:	call	0x1ad0


0x5628:	mov	edx, 8
0x562d:	xor	ecx, ecx
0x562f:	mov	rax, rdx
0x5632:	mul	rbp
0x5635:	jo	0x5865


0x55a9:	mov	rax, rdx
0x55ac:	xor	edx, edx
0x55ae:	div	rsi
0x55b1:	cmp	rax, 0x1f
0x55b5:	jbe	0x5628


0x53c3:	mov	rdi, qword ptr [rsp + 8]
0x53c8:	mov	rsi, r12
0x53cb:	call	0x5c20


0x53b0:	shl	rax, 8
0x53b4:	add	rdx, 1
0x53b8:	add	rax, 0xff
0x53be:	cmp	r14, rax
0x53c1:	ja	0x53b0


0x53ff:	mov	qword ptr [r13 + 0x10], 0
0x5407:	mov	qword ptr [r13 + 8], 0
0x540f:	mov	rcx, qword ptr [rsp + 0x18]
0x5414:	xor	rcx, qword ptr fs:[0x28]
0x541d:	mov	rax, rbp
0x5420:	jne	0x5445


0x5379:	mov	rax, rbx
0x537c:	xor	edx, edx
0x537e:	sub	rax, r14
0x5381:	div	r15
0x5384:	sub	rbx, rdx
0x5387:	mov	rdi, rdx
0x538a:	mov	rsi, rax
0x538d:	xor	edx, edx
0x538f:	mov	rax, rbp
0x5392:	div	r15
0x5395:	cmp	rbp, rbx
0x5398:	jbe	0x5438


0x4e14:	pop	rbx
0x4e15:	mov	dword ptr [rip + 0x208239], 1
0x4e1f:	pop	rbp
0x4e20:	pop	r12
0x4e22:	ret	


0x4e05:	mov	rdi, r12
0x4e08:	call	0x1dd0






0x3495:	lea	rax, [rcx + 1]
0x3499:	mov	qword ptr [rbp + 8], rax
0x349d:	movzx	r12d, byte ptr [rcx]
0x34a1:	mov	ecx, r12d
0x34a4:	cmp	rbx, r8
0x34a7:	mov	rsi, rbx
0x34aa:	jne	0x3480


0x3500:	mov	rdi, rbp
0x3503:	mov	byte ptr [rsp + 0xf], dl
0x3507:	mov	qword ptr [rsp], r8
0x350b:	call	0x1990


0x1dd8:	jmp	qword ptr [rip + 0x20b20a]


0x8e87:	cmp	esi, 4
0x8e8a:	je	0x8f60


0x8ee0:	cmp	esi, 0x407
0x8ee6:	jg	0x8f30


0x8820:	cvttss2si	rsi, xmm0
0x8825:	jmp	0x86c8


0x86aa:	subss	xmm0, dword ptr [rip + 0x1c2e]
0x86b2:	movabs	rax, 0x8000000000000000
0x86bc:	cvttss2si	rsi, xmm0
0x86c1:	xor	rsi, rax
0x86c4:	nop	dword ptr [rax]
0x86c8:	mov	rdi, rsi
0x86cb:	call	0x7ab0


0x87e8:	add	rsp, 0x60
0x87ec:	pop	rbx
0x87ed:	pop	rbp
0x87ee:	pop	r12
0x87f0:	ret	


0x887a:	call	0x1ad0


0x85e0:	mov	rdi, qword ptr [rbp + 8]
0x85e4:	test	rdi, rdi
0x85e7:	je	0x8601


0x85c6:	add	rbp, 0x10
0x85ca:	cmp	rax, rbp
0x85cd:	ja	0x8598


0x85a1:	mov	rbx, rbp
0x85a4:	jmp	0x85b3


0x8540:	mov	qword ptr [r12], 0
0x8548:	mov	qword ptr [r12 + 8], 0
0x8551:	add	r12, 0x10
0x8555:	cmp	qword ptr [rbp + 8], r12
0x8559:	ja	0x84f0


0x853a:	mov	rdi, qword ptr [r12]
0x853e:	call	rax


0x8516:	mov	rdx, qword ptr [rbx + 8]
0x851a:	mov	rcx, qword ptr [rbp + 0x48]
0x851e:	mov	qword ptr [rbx], 0
0x8525:	test	rdx, rdx
0x8528:	mov	qword ptr [rbx + 8], rcx
0x852c:	mov	qword ptr [rbp + 0x48], rbx
0x8530:	mov	rbx, rdx
0x8533:	jne	0x8508


0x850d:	mov	rdi, qword ptr [rbx]
0x8510:	call	rax


0x822a:	mov	r8, rax
0x822d:	add	r9, 0x10
0x8231:	cmp	qword ptr [rdi + 8], r9
0x8235:	ja	0x81ec


0x8139:	mov	rax, qword ptr [rdx]
0x813c:	test	rax, rax
0x813f:	je	0x8130


0x7fa8:	mov	rax, qword ptr [rax + 8]
0x7fac:	add	rdx, 1
0x7fb0:	test	rax, rax
0x7fb3:	jne	0x7fa8


0x7f30:	mov	rax, qword ptr [rax + 8]
0x7f34:	add	rdx, 1
0x7f38:	test	rax, rax
0x7f3b:	jne	0x7f30


0x7ed8:	mov	rdx, qword ptr [rdx + 8]
0x7edc:	add	rcx, 1
0x7ee0:	test	rdx, rdx
0x7ee3:	jne	0x7ed8


0x7ddb:	test	r14b, r14b
0x7dde:	mov	qword ptr [r12 + 8], 0
0x7de7:	jne	0x7e2a


0x7cfd:	movss	xmm1, dword ptr [rdx]
0x7d01:	ucomiss	xmm1, dword ptr [rip + 0x25c8]
0x7d08:	jb	0x7d30


0x7ad8:	mov	rax, rdi
0x7adb:	mov	rcx, rdi
0x7ade:	mul	r9
0x7ae1:	mov	rax, rdx
0x7ae4:	shr	rax, 1
0x7ae7:	lea	rax, [rax + rax*2]
0x7aeb:	sub	rcx, rax
0x7aee:	cmp	rdi, 9
0x7af2:	mov	rax, rcx
0x7af5:	jbe	0x7b30


0x7b19:	add	rcx, 2
0x7b1d:	xor	edx, edx
0x7b1f:	mov	rax, rdi
0x7b22:	div	rcx
0x7b25:	add	rsi, r8
0x7b28:	cmp	rsi, rdi
0x7b2b:	mov	rax, rdx
0x7b2e:	jb	0x7b10




0x6c7a:	mov	qword ptr [rsi], rcx
0x6c7d:	imul	rcx, r9
0x6c81:	mov	rsi, rcx
0x6c84:	jmp	0x6be0




0x1ad0:	jmp	qword ptr [rip + 0x20b36a]


0x5865:	mov	ecx, 1
0x586a:	jmp	0x563b


0x563b:	test	rax, rax
0x563e:	js	0x584c


0x55b7:	mov	r8, qword ptr [rip + 0x207a02]
0x55be:	lea	rdi, [rsi + rsi]
0x55c2:	lea	rcx, [rip - 0xe9]
0x55c9:	lea	rdx, [rip - 0x100]
0x55d0:	xor	esi, esi
0x55d2:	call	0x8320


0x5422:	add	rsp, 0x28
0x5426:	pop	rbx
0x5427:	pop	rbp
0x5428:	pop	r12
0x542a:	pop	r13
0x542c:	pop	r14
0x542e:	pop	r15
0x5430:	ret	


0x5445:	call	0x1ad0


0x5438:	mov	qword ptr [r13 + 8], rax
0x543c:	mov	qword ptr [r13 + 0x10], rsi
0x5440:	mov	rbp, rdx
0x5443:	jmp	0x540f


0x539e:	lea	rbx, [rdi - 1]
0x53a2:	mov	rbp, rdx
0x53a5:	cmp	rbx, r14
0x53a8:	jae	0x5370


0x34ac:	mov	rbx, qword ptr [r14]
0x34af:	mov	rsi, r14
0x34b2:	mov	rdi, r13
0x34b5:	mov	byte ptr [rsp + 0xf], dl
0x34b9:	mov	byte ptr [rsp], cl
0x34bc:	call	0x6ce0


0x3480:	cmp	r12d, r15d
0x3483:	lea	rbx, [rsi + 1]
0x3487:	mov	byte ptr [rsi], cl
0x3489:	je	0x34e6


0x1990:	jmp	qword ptr [rip + 0x20b40a]


0x8f60:	mov	eax, dword ptr [rsp]
0x8f63:	cmp	eax, 0x2f
0x8f66:	ja	0x9054


0x8e90:	jg	0x8f50


0x8ee8:	cmp	esi, 0x406
0x8eee:	jge	0x8f60


0x8f30:	cmp	esi, 0x409
0x8f36:	je	0x8f60


0x85cf:	mov	rbp, qword ptr [r12]
0x85d3:	cmp	rbp, rax
0x85d6:	jae	0x860c


0x8598:	mov	rdi, qword ptr [rbp]
0x859c:	test	rdi, rdi
0x859f:	je	0x85c6


0x85b3:	call	qword ptr [r12 + 0x40]


0x8508:	test	rax, rax
0x850b:	je	0x8516


0x8240:	ret	


0x8215:	mov	r8, qword ptr [rcx]
0x8218:	add	rax, 1
0x821c:	mov	qword ptr [rsi + rax*8 - 8], r8
0x8221:	mov	rcx, qword ptr [rcx + 8]
0x8225:	test	rcx, rcx
0x8228:	jne	0x8210


0x8130:	add	rdx, 0x10
0x8134:	cmp	rdx, rcx
0x8137:	jae	0x8148


0x8141:	ret	


0x7de9:	mov	rsi, r15
0x7dec:	mov	rdi, rbp
0x7def:	call	0x7b70


0x7d0a:	addss	xmm1, dword ptr [rip + 0x25b2]
0x7d12:	movss	xmm2, dword ptr [rdx + 4]
0x7d17:	ucomiss	xmm2, xmm1
0x7d1a:	jbe	0x7d30


0x7b10:	add	r8, 8
0x7b14:	test	rdx, rdx
0x7b17:	je	0x7b35




0x584c:	call	0x6dd0


0x5644:	test	rcx, rcx
0x5647:	jne	0x584c


0x540f:	mov	rcx, qword ptr [rsp + 0x18]
0x5414:	xor	rcx, qword ptr fs:[0x28]
0x541d:	mov	rax, rbp
0x5420:	jne	0x5445


0x34e6:	sub	rbx, r13
0x34e9:	mov	rax, r14
0x34ec:	mov	qword ptr [r14 + 8], rbx
0x34f0:	add	rsp, 0x18
0x34f4:	pop	rbx
0x34f5:	pop	rbp
0x34f6:	pop	r12
0x34f8:	pop	r13
0x34fa:	pop	r14
0x34fc:	pop	r15
0x34fe:	ret	




0x8f6c:	add	rax, qword ptr [rsp + 0x10]
0x8f71:	mov	edx, dword ptr [rax]
0x8f73:	mov	edi, ebp
0x8f75:	xor	eax, eax
0x8f77:	call	0x1a30


0x9054:	mov	rax, qword ptr [rsp + 8]
0x9059:	jmp	0x8f71


0x8e96:	cmp	esi, 2
0x8e99:	je	0x8f60


0x8f50:	cmp	esi, 9
0x8f53:	je	0x8eb0


0x8ef0:	cmp	esi, 0x401
0x8ef6:	je	0x8eb0


0x8f38:	jl	0x8eb0


0x8210:	cmp	rdx, rax
0x8213:	je	0x8240


0x7d1c:	movss	xmm3, dword ptr [rip + 0x25b0]
0x7d24:	ucomiss	xmm3, xmm2
0x7d27:	jb	0x7d30


0x564d:	lea	rdi, [rbp*8]
0x5655:	call	0x6b80


0x8f71:	mov	edx, dword ptr [rax]
0x8f73:	mov	edi, ebp
0x8f75:	xor	eax, eax
0x8f77:	call	0x1a30


0x8e9f:	jg	0x8eb0


0x8f59:	jg	0x8f60


0x8ef8:	cmp	esi, 0x402
0x8efe:	je	0x8f60


0x8f3e:	cmp	esi, 0x40a
0x8f44:	jne	0x8f08


0x7d29:	ucomiss	xmm0, xmm1
0x7d2c:	ja	0x7d35


0x8ea1:	cmp	esi, 1
0x8ea4:	jne	0x8f08


0x8f5b:	cmp	esi, 8
0x8f5e:	jne	0x8f08


0x8f00:	cmp	esi, 0x400
0x8f06:	je	0x8f60


0x8f46:	jmp	0x8eb0


0x8f08:	mov	eax, dword ptr [rsp]
0x8f0b:	cmp	eax, 0x2f
0x8f0e:	ja	0x904a


0x8f14:	add	rax, qword ptr [rsp + 0x10]
0x8f19:	mov	rdx, qword ptr [rax]
0x8f1c:	mov	edi, ebp
0x8f1e:	xor	eax, eax
0x8f20:	call	0x1a30


0x904a:	mov	rax, qword ptr [rsp + 8]
0x904f:	jmp	0x8f19


0x8f19:	mov	rdx, qword ptr [rax]
0x8f1c:	mov	edi, ebp
0x8f1e:	xor	eax, eax
0x8f20:	call	0x1a30


0x2d28:	mov	byte ptr [rip + 0x20a399], 1
0x2d2f:	pop	rbp
0x2d30:	ret	


0x86d0:	mov	edx, 8
0x86d5:	mov	rbx, rax
0x86d8:	xor	ecx, ecx
0x86da:	mov	rax, rdx
0x86dd:	mul	rbx
0x86e0:	jo	0x887f


0x887f:	mov	ecx, 1
0x8884:	jmp	0x86e6


0x86e6:	test	rax, rax
0x86e9:	mov	eax, 1
0x86ee:	cmovs	rcx, rax
0x86f2:	test	rbx, rbx
0x86f5:	je	0x87d0


0x86fb:	and	ecx, 1
0x86fe:	jne	0x87d0


0x8704:	cmp	qword ptr [rbp + 0x10], rbx
0x8708:	je	0x8830


0x8830:	mov	ebx, 1
0x8835:	jmp	0x87d2


0x870e:	mov	esi, 0x10
0x8713:	mov	rdi, rbx
0x8716:	call	0x1bf0


0x87d2:	mov	rcx, qword ptr [rsp + 0x58]
0x87d7:	xor	rcx, qword ptr fs:[0x28]
0x87e0:	mov	eax, ebx
0x87e2:	jne	0x887a


0x9091:	test	rbp, rbp
0x9094:	je	0x90b6


0x90b6:	add	rsp, 8
0x90ba:	pop	rbx
0x90bb:	pop	rbp
0x90bc:	pop	r12
0x90be:	pop	r13
0x90c0:	pop	r14
0x90c2:	pop	r15
0x90c4:	ret	


0x9096:	xor	ebx, ebx
0x9098:	nop	dword ptr [rax + rax]
0x90a0:	mov	rdx, r15
0x90a3:	mov	rsi, r14
0x90a6:	mov	edi, r13d
0x90a9:	call	qword ptr [r12 + rbx*8]


0x3510:	cmp	eax, -1
0x3513:	mov	r12d, eax
0x3516:	mov	r8, qword ptr [rsp]
0x351a:	movzx	edx, byte ptr [rsp + 0xf]
0x351f:	jne	0x3551


0x3521:	cmp	r13, rbx
0x3524:	je	0x3540


0x3551:	mov	ecx, eax
0x3553:	jmp	0x34a4


0x3526:	test	byte ptr [rbp], 0x20
0x352a:	jne	0x3540


0x34a4:	cmp	rbx, r8
0x34a7:	mov	rsi, rbx
0x34aa:	jne	0x3480


0x352c:	cmp	byte ptr [rbx - 1], dl
0x352f:	je	0x34e6


0x3531:	mov	r12d, r15d
0x3534:	mov	ecx, edx
0x3536:	jmp	0x34a4


0x5d89:	mov	qword ptr [r12 + 0x18], r14
0x5d8e:	jmp	0x5c92


0x5c92:	add	rsp, 0x18
0x5c96:	pop	rbx
0x5c97:	pop	rbp
0x5c98:	pop	r12
0x5c9a:	pop	r13
0x5c9c:	pop	r14
0x5c9e:	pop	r15
0x5ca0:	ret	


0x53d0:	mov	rax, r12
0x53d3:	nop	dword ptr [rax + rax]
0x53d8:	movzx	edx, byte ptr [rax]
0x53db:	shl	rbx, 8
0x53df:	shl	rbp, 8
0x53e3:	add	rbx, 0xff
0x53ea:	add	rax, 1
0x53ee:	add	rbp, rdx
0x53f1:	cmp	r14, rbx
0x53f4:	ja	0x53d8


0x53f6:	cmp	rbx, r14
0x53f9:	jne	0x5379


0x53d8:	movzx	edx, byte ptr [rax]
0x53db:	shl	rbx, 8
0x53df:	shl	rbp, 8
0x53e3:	add	rbx, 0xff
0x53ea:	add	rax, 1
0x53ee:	add	rbp, rdx
0x53f1:	cmp	r14, rbx
0x53f4:	ja	0x53d8


0x5ce3:	test	bl, 7
0x5ce6:	jne	0x5d50


0x5ce8:	cmp	rbp, 0x7ff
0x5cef:	jbe	0x5d93


0x5d50:	mov	rsi, qword ptr [rsp + 8]
0x5d55:	mov	rdi, r13
0x5d58:	mov	r14d, 0x800
0x5d5e:	call	0x5e10


0x5d93:	mov	rsi, qword ptr [rsp + 8]
0x5d98:	mov	rdi, r13
0x5d9b:	call	0x5e10


0x5cf5:	lea	r15, [rbp - 0x800]
0x5cfc:	mov	r14, r15
0x5cff:	and	r14d, 0x7ff
0x5d06:	jmp	0x5d1c


0x5d1c:	mov	rsi, rbx
0x5d1f:	mov	rdi, r13
0x5d22:	add	rbx, 0x800
0x5d29:	call	0x5e10


0x5d2e:	test	r15, r15
0x5d31:	mov	rbp, r15
0x5d34:	jne	0x5d10


0x5d36:	mov	qword ptr [r12 + 0x18], 0
0x5d3f:	add	rsp, 0x18
0x5d43:	pop	rbx
0x5d44:	pop	rbp
0x5d45:	pop	r12
0x5d47:	pop	r13
0x5d49:	pop	r14
0x5d4b:	pop	r15
0x5d4d:	ret	


0x5d10:	cmp	r15, r14
0x5d13:	je	0x5d50


0x5d15:	sub	r15, 0x800
0x5d1c:	mov	rsi, rbx
0x5d1f:	mov	rdi, r13
0x5d22:	add	rbx, 0x800
0x5d29:	call	0x5e10


0x5da0:	jmp	0x5d70


0x5d70:	mov	r14d, 0x800
0x5d76:	mov	rsi, qword ptr [rsp + 8]
0x5d7b:	mov	rdx, rbp
0x5d7e:	mov	rdi, rbx
0x5d81:	sub	r14, rbp
0x5d84:	call	0x1c10


0x5d63:	cmp	rbp, 0x800
0x5d6a:	ja	0x5cc5


0x871b:	test	rax, rax
0x871e:	mov	qword ptr [rsp], rax
0x8722:	je	0x87d0


0x8728:	mov	qword ptr [rsp + 0x10], rbx
0x872d:	shl	rbx, 4
0x8731:	mov	qword ptr [rsp + 0x28], r12
0x8736:	add	rbx, rax
0x8739:	mov	rax, qword ptr [rbp + 0x30]
0x873d:	mov	r12, rsp
0x8740:	xor	edx, edx
0x8742:	mov	rsi, rbp
0x8745:	mov	rdi, r12
0x8748:	mov	qword ptr [rsp + 8], rbx
0x874d:	mov	qword ptr [rsp + 0x18], 0
0x8756:	mov	qword ptr [rsp + 0x30], rax
0x875b:	mov	rax, qword ptr [rbp + 0x38]
0x875f:	mov	qword ptr [rsp + 0x20], 0
0x8768:	mov	qword ptr [rsp + 0x38], rax
0x876d:	mov	rax, qword ptr [rbp + 0x40]
0x8771:	mov	qword ptr [rsp + 0x40], rax
0x8776:	mov	rax, qword ptr [rbp + 0x48]
0x877a:	mov	qword ptr [rsp + 0x48], rax
0x877f:	call	0x7d40


0x8784:	test	al, al
0x8786:	mov	ebx, eax
0x8788:	jne	0x8840


0x878e:	mov	rax, qword ptr [rsp + 0x48]
0x8793:	mov	edx, 1
0x8798:	mov	rsi, r12
0x879b:	mov	rdi, rbp
0x879e:	mov	qword ptr [rbp + 0x48], rax
0x87a2:	call	0x7d40


0x8840:	mov	rdi, qword ptr [rbp]
0x8844:	call	0x1dd0


0x87a7:	test	al, al
0x87a9:	je	0x8889


0x8889:	call	0x19a0


0x87af:	xor	edx, edx
0x87b1:	mov	rsi, r12
0x87b4:	mov	rdi, rbp
0x87b7:	call	0x7d40


0x87bc:	test	al, al
0x87be:	je	0x8889


0x87c4:	mov	rdi, qword ptr [rsp]
0x87c8:	call	0x1dd0


0x6d6f:	test	rax, rax
0x6d72:	je	0x6d79


0x6d74:	add	rsp, 8
0x6d78:	ret	


0x3593:	test	rax, rax
0x3596:	je	0x35ed


0x35ed:	mov	qword ptr [rip + 0x209aec], rbx
0x35f4:	mov	qword ptr [rip + 0x209aad], rbx
0x35fb:	pop	rbx
0x35fc:	ret	


0x3598:	lea	r8, [rax + 1]
0x359c:	mov	rdx, r8
0x359f:	sub	rdx, rbx
0x35a2:	cmp	rdx, 6
0x35a6:	jle	0x35ed


0x35a8:	lea	rsi, [rax - 6]
0x35ac:	lea	rdi, [rip + 0x61ed]
0x35b3:	mov	ecx, 7
0x35b8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x35b8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x35ba:	seta	dl
0x35bd:	sbb	dl, 0
0x35c0:	test	dl, dl
0x35c2:	jne	0x35ed


0x35c4:	lea	rdi, [rip + 0x61dd]
0x35cb:	mov	ecx, 3
0x35d0:	mov	rsi, r8
0x35d3:	mov	rbx, r8
0x35d6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x35d6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x35d8:	seta	dl
0x35db:	sbb	dl, 0
0x35de:	test	dl, dl
0x35e0:	jne	0x35ed


0x35e2:	lea	rbx, [rax + 4]
0x35e6:	mov	qword ptr [rip + 0x209a93], rbx
0x35ed:	mov	qword ptr [rip + 0x209aec], rbx
0x35f4:	mov	qword ptr [rip + 0x209aad], rbx
0x35fb:	pop	rbx
0x35fc:	ret	


0x361a:	call	0x19a0


0x87cd:	jmp	0x87d2


0x8849:	mov	rax, qword ptr [rsp]
0x884d:	mov	qword ptr [rbp], rax
0x8851:	mov	rax, qword ptr [rsp + 8]
0x8856:	mov	qword ptr [rbp + 8], rax
0x885a:	mov	rax, qword ptr [rsp + 0x10]
0x885f:	mov	qword ptr [rbp + 0x10], rax
0x8863:	mov	rax, qword ptr [rsp + 0x18]
0x8868:	mov	qword ptr [rbp + 0x18], rax
0x886c:	mov	rax, qword ptr [rsp + 0x48]
0x8871:	mov	qword ptr [rbp + 0x48], rax
0x8875:	jmp	0x87d2


0x4e0d:	mov	qword ptr [rip + 0x20824c], rbx
0x4e14:	pop	rbx
0x4e15:	mov	dword ptr [rip + 0x208239], 1
0x4e1f:	pop	rbp
0x4e20:	pop	r12
0x4e22:	ret	


0x8629:	test	rbx, rbx
0x862c:	mov	rdi, rbx
0x862f:	jne	0x8620


0x8620:	mov	rbx, qword ptr [rdi + 8]
0x8624:	call	0x1dd0


0x863a:	pop	rbx
0x863b:	mov	rdi, r12
0x863e:	pop	rbp
0x863f:	pop	r12
0x8641:	jmp	0x1dd0


0x85f9:	test	rbx, rbx
0x85fc:	mov	rdi, rbx
0x85ff:	jne	0x85f0


0x85f0:	mov	rbx, qword ptr [rdi + 8]
0x85f4:	call	0x1dd0


0x4de7:	mov	qword ptr [rip + 0x20827e], 0x100
0x4df2:	mov	qword ptr [rip + 0x20827f], rbx
0x4df9:	lea	rbx, [rip + 0x208270]
0x4e00:	cmp	r12, rbx
0x4e03:	je	0x4e14


0x6c0d:	xor	eax, eax
0x6c0f:	pop	rbx
0x6c10:	ret	


0x4dcc:	cmp	rbx, rbp
0x4dcf:	jne	0x4dc0


0x4dc0:	mov	rdi, qword ptr [rbx]
0x4dc3:	add	rbx, 0x10
0x4dc7:	call	0x1dd0


0x6bf6:	test	rax, rax
0x6bf9:	jne	0x6c00


0x6bfb:	test	rbx, rbx
0x6bfe:	jne	0x6c11


0x6c00:	pop	rbx
0x6c01:	ret	


0x6c11:	call	0x6dd0


0x780e:	test	eax, eax
0x7810:	je	0x781a


0x7812:	test	dword ptr [rbx], 0x100
0x7818:	jne	0x7828


0x7828:	mov	rdi, rbx
0x782b:	mov	edx, 1
0x7830:	xor	esi, esi
0x7832:	call	0x7840


0x659c:	lea	rsi, [rip + 0x3727]
0x65a3:	xor	edi, edi
0x65a5:	mov	edx, 5
0x65aa:	call	0x1aa0


0x66b1:	jmp	0x659c


0x7fdb:	lea	rdx, [rip + 0x2271]
0x7fe2:	xor	eax, eax
0x7fe4:	mov	rcx, rbp
0x7fe7:	mov	esi, 1
0x7fec:	mov	rdi, r12
0x7fef:	call	0x1d90


0x7ff4:	test	r13, r13
0x7ff7:	js	0x8060


0x8060:	mov	rax, r13
0x8063:	mov	rdx, r13
0x8066:	pxor	xmm0, xmm0
0x806a:	shr	rax, 1
0x806d:	and	edx, 1
0x8070:	or	rax, rdx
0x8073:	test	rbp, rbp
0x8076:	cvtsi2sd	xmm0, rax
0x807b:	addsd	xmm0, xmm0
0x807f:	mulsd	xmm0, qword ptr [rip + 0x2261]
0x8087:	jns	0x800f


0x7ff9:	pxor	xmm0, xmm0
0x7ffd:	test	rbp, rbp
0x8000:	cvtsi2sd	xmm0, r13
0x8005:	mulsd	xmm0, qword ptr [rip + 0x22db]
0x800d:	js	0x8089


0x8089:	mov	rax, rbp
0x808c:	pxor	xmm1, xmm1
0x8090:	shr	rax, 1
0x8093:	and	ebp, 1
0x8096:	or	rax, rbp
0x8099:	cvtsi2sd	xmm1, rax
0x809e:	addsd	xmm1, xmm1
0x80a2:	jmp	0x8018


0x800f:	pxor	xmm1, xmm1
0x8013:	cvtsi2sd	xmm1, rbp
0x8018:	divsd	xmm0, xmm1
0x801c:	lea	rdx, [rip + 0x2265]
0x8023:	mov	rcx, r13
0x8026:	mov	rdi, r12
0x8029:	mov	esi, 1
0x802e:	mov	eax, 1
0x8033:	call	0x1d90


0x8018:	divsd	xmm0, xmm1
0x801c:	lea	rdx, [rip + 0x2265]
0x8023:	mov	rcx, r13
0x8026:	mov	rdi, r12
0x8029:	mov	esi, 1
0x802e:	mov	eax, 1
0x8033:	call	0x1d90


0x8038:	add	rsp, 8
0x803c:	mov	rcx, rbx
0x803f:	mov	rdi, r12
0x8042:	pop	rbx
0x8043:	pop	rbp
0x8044:	pop	r12
0x8046:	pop	r13
0x8048:	lea	rdx, [rip + 0x221c]
0x804f:	mov	esi, 1
0x8054:	xor	eax, eax
0x8056:	jmp	0x1d90


0x8f25:	mov	ebx, eax
0x8f27:	jmp	0x8ec0


0x8ec0:	mov	rcx, qword ptr [rsp + 0x18]
0x8ec5:	xor	rcx, qword ptr fs:[0x28]
0x8ece:	mov	eax, ebx
0x8ed0:	jne	0x902d


0x8ed6:	add	rsp, 0x50
0x8eda:	pop	rbx
0x8edb:	pop	rbp
0x8edc:	pop	r12
0x8ede:	ret	


0x902d:	call	0x1ad0


0x8eb9:	mov	ebx, eax
0x8ebb:	nop	dword ptr [rax + rax]
0x8ec0:	mov	rcx, qword ptr [rsp + 0x18]
0x8ec5:	xor	rcx, qword ptr fs:[0x28]
0x8ece:	mov	eax, ebx
0x8ed0:	jne	0x902d


0x8f7c:	mov	ebx, eax
0x8f7e:	jmp	0x8ec0


0x8e65:	test	eax, eax
0x8e67:	mov	ebx, eax
0x8e69:	js	0x8ff8


0x8ff8:	call	0x19b0


0x8e6f:	mov	dword ptr [rip + 0x2043bf], 1
0x8e79:	jmp	0x8ec0


0x8f8c:	test	eax, eax
0x8f8e:	mov	ebx, eax
0x8f90:	js	0x8ec0


0x8f96:	cmp	dword ptr [rip + 0x20429b], -1
0x8f9d:	jne	0x8ec0


0x8fa3:	xor	eax, eax
0x8fa5:	mov	esi, 1
0x8faa:	mov	edi, ebx
0x8fac:	call	0x1a30


0x8fb1:	test	eax, eax
0x8fb3:	js	0x8fd1


0x8fd1:	call	0x19b0


0x8fb5:	or	eax, 1
0x8fb8:	mov	esi, 2
0x8fbd:	mov	edi, ebx
0x8fbf:	mov	edx, eax
0x8fc1:	xor	eax, eax
0x8fc3:	call	0x1a30


0x8fc8:	cmp	eax, -1
0x8fcb:	jne	0x8ec0


0x9043:	mov	ebx, eax
0x9045:	jmp	0x8ec0


0x1e21:	lea	rsi, [rip + 0x7ee8]
0x1e28:	mov	edi, 6
0x1e2d:	call	0x1cc0


0x325d:	cmp	ebp, eax
0x325f:	je	0x3279


0x3279:	add	rsp, 8
0x327d:	mov	eax, ebx
0x327f:	pop	rbx
0x3280:	pop	rbp
0x3281:	ret	


0x3261:	xor	ebx, ebx
0x3263:	test	eax, eax
0x3265:	js	0x3279


0x3267:	mov	edi, eax
0x3269:	call	0x1ba0


0x1ba0:	jmp	qword ptr [rip + 0x20b302]




0x3781:	cmp	r15d, 0xa
0x3785:	mov	qword ptr [rsp + 0x58], rax
0x378a:	ja	0x493f


0x3790:	lea	rcx, [rip + 0x6089]
0x3797:	mov	edx, r15d
0x379a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x379e:	add	rax, rcx
0x37a1:	jmp	rax


0x493f:	call	0x19a0


0x8fd6:	mov	r12d, dword ptr [rax]
0x8fd9:	mov	rbp, rax
0x8fdc:	mov	edi, ebx
0x8fde:	call	0x1ba0


0x8ffd:	cmp	dword ptr [rax], 0x16
0x9000:	jne	0x8e6f


0x9006:	xor	esi, esi
0x9008:	xor	eax, eax
0x900a:	mov	edx, r12d
0x900d:	mov	edi, ebp
0x900f:	call	0x1a30


0x9014:	test	eax, eax
0x9016:	mov	ebx, eax
0x9018:	js	0x8ec0


0x901e:	mov	dword ptr [rip + 0x204210], 0xffffffff
0x9028:	jmp	0x8fa3


0x5c49:	mov	rcx, qword ptr [rsp + 8]
0x5c4e:	mov	r13, rax
0x5c51:	jmp	0x5c76


0x5c76:	mov	rdx, rbp
0x5c79:	mov	rdi, rbx
0x5c7c:	mov	esi, 1
0x5c81:	call	0x1a50


0x1a50:	jmp	qword ptr [rip + 0x20b3aa]




0x6f88:	mov	dword ptr [rax], 0
0x6f8e:	mov	r12, rax
0x6f91:	movzx	ebx, byte ptr [rbp]
0x6f95:	call	0x1dc0


0x1dc0:	jmp	qword ptr [rip + 0x20b1f2]




0x73a8:	mov	dword ptr [rax], 0
0x73ae:	mov	r12, rax
0x73b1:	movzx	ebx, byte ptr [rbp]
0x73b5:	call	0x1dc0


0x4971:	mov	r13, rax
0x4974:	mov	eax, dword ptr [rax]
0x4976:	test	r15d, r15d
0x4979:	mov	rbx, qword ptr [rip + 0x2086e0]
0x4980:	mov	dword ptr [rsp + 0x18], eax
0x4984:	js	0x4af1


0x4af1:	call	0x19a0


0x498a:	cmp	dword ptr [rip + 0x2086c7], r15d
0x4991:	jg	0x49f5


0x4993:	cmp	r15d, 0x7fffffff
0x499a:	je	0x4af6


0x49f5:	mov	eax, dword ptr [rbp + 4]
0x49f8:	shl	r15, 4
0x49fc:	sub	rsp, 8
0x4a00:	add	rbx, r15
0x4a03:	lea	r15, [rbp + 8]
0x4a07:	mov	r8d, dword ptr [rbp]
0x4a0b:	mov	r11, qword ptr [rbx]
0x4a0e:	mov	r12, qword ptr [rbx + 8]
0x4a12:	mov	rcx, r14
0x4a15:	or	eax, 1
0x4a18:	mov	dword ptr [rsp + 0x24], eax
0x4a1c:	push	qword ptr [rbp + 0x30]
0x4a1f:	mov	r9d, eax
0x4a22:	push	qword ptr [rbp + 0x28]
0x4a25:	push	r15
0x4a27:	mov	rsi, r11
0x4a2a:	mov	rdx, qword ptr [rsp + 0x28]
0x4a2f:	mov	rdi, r12
0x4a32:	mov	qword ptr [rsp + 0x30], r11
0x4a37:	call	0x3710


0x4af6:	call	0x6dd0


0x49a0:	lea	r12d, [r15 + 1]
0x49a4:	lea	rax, [rip + 0x2086c5]
0x49ab:	movsxd	rsi, r12d
0x49ae:	shl	rsi, 4
0x49b2:	cmp	rbx, rax
0x49b5:	je	0x4ad0


0x4ad0:	xor	edi, edi
0x4ad2:	call	0x6be0


0x49bb:	mov	rdi, rbx
0x49be:	call	0x6be0


0x49c3:	mov	rbx, rax
0x49c6:	mov	qword ptr [rip + 0x208693], rax
0x49cd:	movsxd	rdi, dword ptr [rip + 0x208684]
0x49d4:	mov	edx, r12d
0x49d7:	xor	esi, esi
0x49d9:	sub	edx, edi
0x49db:	shl	rdi, 4
0x49df:	movsxd	rdx, edx
0x49e2:	add	rdi, rbx
0x49e5:	shl	rdx, 4
0x49e9:	call	0x1b80


0x1b80:	jmp	qword ptr [rip + 0x20b312]




0x4ad7:	movdqa	xmm0, xmmword ptr [rip + 0x208591]
0x4adf:	mov	rbx, rax
0x4ae2:	mov	qword ptr [rip + 0x208577], rax
0x4ae9:	movups	xmmword ptr [rax], xmm0
0x4aec:	jmp	0x49cd


0x49cd:	movsxd	rdi, dword ptr [rip + 0x208684]
0x49d4:	mov	edx, r12d
0x49d7:	xor	esi, esi
0x49d9:	sub	edx, edi
0x49db:	shl	rdi, 4
0x49df:	movsxd	rdx, edx
0x49e2:	add	rdi, rbx
0x49e5:	shl	rdx, 4
0x49e9:	call	0x1b80


0x4b0c:	mov	r12d, dword ptr [rax]
0x4b0f:	mov	rbp, rax
0x4b12:	lea	rax, [rip + 0x2086e7]
0x4b19:	test	rbx, rbx
0x4b1c:	mov	esi, 0x38
0x4b21:	cmove	rbx, rax
0x4b25:	mov	rdi, rbx
0x4b28:	call	0x6d80


0x4c42:	mov	r12d, dword ptr [rax]
0x4c45:	mov	rbp, rax
0x4c48:	lea	rax, [rbx + 8]
0x4c4c:	sub	rsp, 8
0x4c50:	mov	r9d, dword ptr [rbx + 4]
0x4c54:	push	qword ptr [rbx + 0x30]
0x4c57:	mov	r8d, dword ptr [rbx]
0x4c5a:	push	qword ptr [rbx + 0x28]
0x4c5d:	mov	rdx, r15
0x4c60:	push	rax
0x4c61:	mov	rcx, qword ptr [rsp + 0x28]
0x4c66:	mov	rsi, r14
0x4c69:	mov	rdi, r13
0x4c6c:	call	0x3710


0x4cbf:	test	r12, r12
0x4cc2:	mov	r13, rax
0x4cc5:	mov	eax, dword ptr [rax]
0x4cc7:	sete	bpl
0x4ccb:	or	ebp, dword ptr [rbx + 4]
0x4cce:	lea	r10, [rbx + 8]
0x4cd2:	sub	rsp, 8
0x4cd6:	mov	r8d, dword ptr [rbx]
0x4cd9:	mov	rcx, r15
0x4cdc:	mov	dword ptr [rsp + 0x14], eax
0x4ce0:	push	qword ptr [rbx + 0x30]
0x4ce3:	mov	rdx, r14
0x4ce6:	push	qword ptr [rbx + 0x28]
0x4ce9:	push	r10
0x4ceb:	xor	esi, esi
0x4ced:	mov	r9d, ebp
0x4cf0:	xor	edi, edi
0x4cf2:	mov	qword ptr [rsp + 0x40], r10
0x4cf7:	call	0x3710


0x5465:	mov	rdi, rbx
0x5468:	pop	rbx
0x5469:	jmp	0x1dd0


0x5ddd:	mov	rdi, rbx
0x5de0:	call	0x1dd0


0x5de5:	test	rbp, rbp
0x5de8:	je	0x5e00


0x5e00:	add	rsp, 8
0x5e04:	xor	eax, eax
0x5e06:	pop	rbx
0x5e07:	pop	rbp
0x5e08:	ret	


0x5dea:	add	rsp, 8
0x5dee:	mov	rdi, rbp
0x5df1:	pop	rbx
0x5df2:	pop	rbp
0x5df3:	jmp	0x7780


0x5485:	mov	r12d, eax
0x5488:	call	0x19b0


0x548d:	mov	r13d, dword ptr [rax]
0x5490:	mov	rdi, rbx
0x5493:	mov	rdx, -1
0x549a:	mov	esi, 0x18
0x549f:	mov	rbp, rax
0x54a2:	call	0x1d00


0x54a7:	mov	rdi, rbx
0x54aa:	call	0x1dd0


0x54af:	mov	dword ptr [rbp], r13d
0x54b3:	add	rsp, 8
0x54b7:	mov	eax, r12d
0x54ba:	pop	rbx
0x54bb:	pop	rbp
0x54bc:	pop	r12
0x54be:	pop	r13
0x54c0:	ret	


0x6db9:	mov	rdi, rbx
0x6dbc:	lea	rsi, [rax + 1]
0x6dc0:	pop	rbx
0x6dc1:	jmp	0x6d80


0x65af:	lea	rdx, [rip + 0x3a2a]
0x65b6:	mov	rcx, rax
0x65b9:	mov	r8d, 0x7e3
0x65bf:	mov	esi, 1
0x65c4:	mov	rdi, rbp
0x65c7:	xor	eax, eax
0x65c9:	call	0x1d90


0x65ce:	lea	rsi, [rip + 0x377b]
0x65d5:	xor	edi, edi
0x65d7:	mov	edx, 5
0x65dc:	call	0x1aa0


0x65e1:	mov	rsi, rbp
0x65e4:	mov	rdi, rax
0x65e7:	call	0x1be0


0x1be0:	jmp	qword ptr [rip + 0x20b2e2]




0x2d8d:	mov	rdi, qword ptr [rip + 0x20a32c]
0x2d94:	mov	rdx, rax
0x2d97:	mov	rcx, rbx
0x2d9a:	mov	esi, 1
0x2d9f:	xor	eax, eax
0x2da1:	call	0x1d90


0x2da6:	mov	edi, ebp
0x2da8:	call	0x1d70


0x1d70:	jmp	qword ptr [rip + 0x20b21a]




0x2dbb:	mov	rcx, rbx
0x2dbe:	mov	r8, rbx
0x2dc1:	mov	rdx, rbx
0x2dc4:	mov	rsi, rax
0x2dc7:	mov	edi, 1
0x2dcc:	xor	eax, eax
0x2dce:	call	0x1cd0


0x1cd0:	jmp	qword ptr [rip + 0x20b26a]




0x6b14:	lea	rdx, [rip + 0x320b]
0x6b1b:	mov	rsi, rax
0x6b1e:	mov	edi, 1
0x6b23:	xor	eax, eax
0x6b25:	call	0x1cd0


0x6de7:	mov	edi, dword ptr [rip + 0x20622b]
0x6ded:	lea	rdx, [rip + 0x2406]
0x6df4:	mov	rcx, rax
0x6df7:	xor	esi, esi
0x6df9:	xor	eax, eax
0x6dfb:	call	0x1cf0


0x1cf0:	jmp	qword ptr [rip + 0x20b25a]




0x7873:	mov	edx, r12d
0x7876:	mov	rsi, rbp
0x7879:	mov	edi, eax
0x787b:	call	0x1b40


0x1b40:	jmp	qword ptr [rip + 0x20b332]




0x321d:	mov	ecx, ebx
0x321f:	xor	edx, edx
0x3221:	xor	esi, esi
0x3223:	pop	rbx
0x3224:	mov	edi, eax
0x3226:	jmp	0x1bb0


0x32b1:	mov	ebx, eax
0x32b3:	call	0x19b0


0x32b8:	cmp	ebx, 1
0x32bb:	mov	r14, rax
0x32be:	je	0x3420


0x3420:	xor	ebx, ebx
0x3422:	xor	ebp, ebp
0x3424:	jmp	0x3300


0x32c4:	cmp	ebx, 2
0x32c7:	je	0x3410


0x3300:	xor	esi, esi
0x3302:	xor	edi, edi
0x3304:	call	0x1b10


0x3410:	xor	ebx, ebx
0x3412:	jmp	0x32ea


0x32cd:	test	ebx, ebx
0x32cf:	je	0x3388


0x1b10:	jmp	qword ptr [rip + 0x20b34a]


0x32ea:	mov	esi, 1
0x32ef:	mov	edi, 1
0x32f4:	call	0x1b10


0x3388:	xor	ebx, ebx
0x338a:	xor	ebp, ebp
0x338c:	xor	r13d, r13d
0x338f:	jmp	0x3340


0x32d5:	mov	esi, 2
0x32da:	mov	edi, 2
0x32df:	call	0x1b10




0x3340:	mov	rdi, qword ptr [rsp + 8]
0x3345:	mov	rdx, r12
0x3348:	mov	rsi, r15
0x334b:	call	0x1b90


0x1b90:	jmp	qword ptr [rip + 0x20b30a]




0x6311:	lea	rdx, [rsp + 0x10]
0x6316:	mov	esi, eax
0x6318:	mov	edi, 1
0x631d:	call	0x1c70


0x1c70:	jmp	qword ptr [rip + 0x20b29a]




0x778c:	test	eax, eax
0x778e:	mov	rdi, rbx
0x7791:	js	0x77e7


0x77e7:	pop	rbx
0x77e8:	pop	rbp
0x77e9:	pop	r12
0x77eb:	jmp	0x1a70


0x7793:	call	0x1c80


0x1a70:	jmp	qword ptr [rip + 0x20b39a]




0x7798:	test	eax, eax
0x779a:	jne	0x77c8


0x779c:	mov	rdi, rbx
0x779f:	call	0x7800


0x77c8:	mov	rdi, rbx
0x77cb:	call	0x1c20


0x77d0:	xor	esi, esi
0x77d2:	mov	edx, 1
0x77d7:	mov	edi, eax
0x77d9:	call	0x1b40


0x78d7:	cmp	rax, -3
0x78db:	mov	rbp, rax
0x78de:	jbe	0x7900


0x7900:	mov	rdx, qword ptr [rsp + 8]
0x7905:	xor	rdx, qword ptr fs:[0x28]
0x790e:	mov	rax, rbp
0x7911:	jne	0x791e


0x78e0:	test	r12, r12
0x78e3:	je	0x7900


0x7913:	add	rsp, 0x18
0x7917:	pop	rbx
0x7918:	pop	rbp
0x7919:	pop	r12
0x791b:	pop	r13
0x791d:	ret	


0x791e:	call	0x1ad0


0x78e5:	xor	edi, edi
0x78e7:	call	0x7a50


0x793c:	mov	ebx, dword ptr [rbp]
0x793f:	mov	rdi, rbp
0x7942:	mov	r12, rax
0x7945:	call	0x7780


0x64d5:	test	rax, rax
0x64d8:	je	0x6530


0x6530:	xor	ebp, ebp
0x6532:	jmp	0x6502


0x64da:	mov	rsi, rbp
0x64dd:	mov	rdi, rax
0x64e0:	mov	rbx, rax
0x64e3:	call	0x62e0


0x6502:	add	rsp, 8
0x6506:	mov	rax, rbp
0x6509:	pop	rbx
0x650a:	pop	rbp
0x650b:	pop	r12
0x650d:	pop	r13
0x650f:	ret	


0x79bc:	test	rax, rax
0x79bf:	mov	rbx, rax
0x79c2:	je	0x79d1


0x79d1:	mov	rax, rbx
0x79d4:	pop	rbx
0x79d5:	pop	rbp
0x79d6:	pop	r12
0x79d8:	ret	


0x79c4:	mov	rdi, rax
0x79c7:	call	0x1c20


0x79cc:	cmp	eax, 2
0x79cf:	jbe	0x79e0


0x79e0:	mov	edi, eax
0x79e2:	call	0x8dd0


0x590e:	test	rax, rax
0x5911:	mov	r13, rax
0x5914:	je	0x5b18


0x5b18:	xor	ebx, ebx
0x5b1a:	jmp	0x5957


0x591a:	mov	edi, 0x1038
0x591f:	call	0x6b80


0x5957:	mov	rdx, qword ptr [rsp + 0x28]
0x595c:	xor	rdx, qword ptr fs:[0x28]
0x5965:	mov	rax, rbx
0x5968:	jne	0x5b1f


0x596e:	add	rsp, 0x38
0x5972:	pop	rbx
0x5973:	pop	rbp
0x5974:	pop	r12
0x5976:	pop	r13
0x5978:	pop	r14
0x597a:	pop	r15
0x597c:	ret	


0x5b1f:	call	0x1ad0


0x52e6:	test	rax, rax
0x52e9:	je	0x5310


0x5310:	xor	eax, eax
0x5312:	pop	rbx
0x5313:	ret	


0x52eb:	mov	rbx, rax
0x52ee:	mov	edi, 0x18
0x52f3:	call	0x6b80


0x1e32:	lea	rsi, [rip + 0x7373]
0x1e39:	lea	rdi, [rip + 0x7343]
0x1e40:	call	0x1a80


0x1a80:	jmp	qword ptr [rip + 0x20b392]




0x7a5b:	mov	rdx, rax
0x7a5e:	mov	eax, 1
0x7a63:	test	rdx, rdx
0x7a66:	je	0x7a85


0x7a85:	add	rsp, 8
0x7a89:	ret	


0x7a68:	lea	rdi, [rip + 0x27c4]
0x7a6f:	mov	ecx, 2
0x7a74:	mov	rsi, rdx
0x7a77:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7a77:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7a79:	seta	cl
0x7a7c:	sbb	cl, 0
0x7a7f:	xor	eax, eax
0x7a81:	test	cl, cl
0x7a83:	jne	0x7a90


0x7a90:	lea	rdi, [rip + 0x279e]
0x7a97:	mov	ecx, 6
0x7a9c:	mov	rsi, rdx
0x7a9f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7a9f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7aa1:	seta	al
0x7aa4:	sbb	al, 0
0x7aa6:	test	al, al
0x7aa8:	setne	al
0x7aab:	add	rsp, 8
0x7aaf:	ret	


0x78ec:	test	al, al
0x78ee:	jne	0x7900


0x78f0:	movzx	eax, byte ptr [r13]
0x78f5:	mov	ebp, 1
0x78fa:	mov	dword ptr [rbx], eax
0x78fc:	nop	dword ptr [rax]
0x7900:	mov	rdx, qword ptr [rsp + 8]
0x7905:	xor	rdx, qword ptr fs:[0x28]
0x790e:	mov	rax, rbp
0x7911:	jne	0x791e


0x6b89:	test	rax, rax
0x6b8c:	jne	0x6b93


0x6b8e:	test	rbx, rbx
0x6b91:	jne	0x6b95


0x6b93:	pop	rbx
0x6b94:	ret	


0x6b95:	call	0x6dd0


0x52f8:	mov	qword ptr [rax], rbx
0x52fb:	mov	qword ptr [rax + 0x10], 0
0x5303:	mov	qword ptr [rax + 8], 0
0x530b:	pop	rbx
0x530c:	ret	


0x5924:	mov	rbx, rax
0x5927:	mov	qword ptr [rax], r13
0x592a:	lea	rax, [rip - 0xc1]
0x5931:	cmp	rbp, 0x1000
0x5938:	mov	ecx, 0x1000
0x593d:	lea	rsi, [rbx + 0x18]
0x5941:	cmovbe	rcx, rbp
0x5945:	mov	qword ptr [rbx + 8], rax
0x5949:	mov	qword ptr [rbx + 0x10], r12
0x594d:	xor	edx, edx
0x594f:	mov	rdi, r13
0x5952:	call	0x1ce0


0x1ce0:	jmp	qword ptr [rip + 0x20b262]




0x565a:	test	rbp, rbp
0x565d:	mov	rbx, rax
0x5660:	je	0x5675


0x5675:	mov	dword ptr [rsp + 4], 0
0x567d:	mov	qword ptr [rsp + 8], 0
0x5686:	lea	rax, [rbp - 1]
0x568a:	xor	ebp, ebp
0x568c:	mov	qword ptr [rsp + 0x10], rax
0x5691:	lea	rax, [rsp + 0x40]
0x5696:	mov	qword ptr [rsp + 0x20], rax
0x569b:	lea	rax, [rsp + 0x30]
0x56a0:	mov	qword ptr [rsp + 0x28], rax
0x56a5:	jmp	0x56cf


0x5662:	xor	eax, eax
0x5664:	nop	dword ptr [rax]
0x5668:	mov	qword ptr [rbx + rax*8], rax
0x566c:	add	rax, 1
0x5670:	cmp	rbp, rax
0x5673:	jne	0x5668


0x56cf:	mov	rsi, qword ptr [rsp + 0x10]
0x56d4:	mov	rdi, r13
0x56d7:	sub	rsi, rbp
0x56da:	call	0x5330


0x5668:	mov	qword ptr [rbx + rax*8], rax
0x566c:	add	rax, 1
0x5670:	cmp	rbp, rax
0x5673:	jne	0x5668


0x56df:	mov	edx, dword ptr [rsp + 4]
0x56e3:	lea	r14, [rax + rbp]
0x56e7:	test	edx, edx
0x56e9:	je	0x56b0


0x56b0:	lea	rax, [rbx + r14*8]
0x56b4:	mov	rsi, qword ptr [rbx + rbp*8]
0x56b8:	mov	rcx, qword ptr [rax]
0x56bb:	mov	qword ptr [rbx + rbp*8], rcx
0x56bf:	add	rbp, 1
0x56c3:	mov	qword ptr [rax], rsi
0x56c6:	cmp	r12, rbp
0x56c9:	jbe	0x5799


0x56eb:	mov	rsi, qword ptr [rsp + 0x20]
0x56f0:	mov	rdi, qword ptr [rsp + 8]
0x56f5:	mov	qword ptr [rsp + 0x40], rbp
0x56fa:	mov	qword ptr [rsp + 0x48], 0
0x5703:	call	0x8b80


0x5799:	mov	eax, dword ptr [rsp + 4]
0x579d:	test	eax, eax
0x579f:	jne	0x5838


0x57a5:	mov	edx, 8
0x57aa:	xor	ecx, ecx
0x57ac:	mov	rax, rdx
0x57af:	mul	r12
0x57b2:	jo	0x5851


0x5838:	mov	rdi, qword ptr [rsp + 8]
0x583d:	call	0x8570


0x5851:	mov	ecx, 1
0x5856:	jmp	0x57b8


0x57b8:	test	rax, rax
0x57bb:	js	0x584c


0x57c1:	test	rcx, rcx
0x57c4:	jne	0x584c


0x57ca:	lea	rsi, [r12*8]
0x57d2:	mov	rdi, rbx
0x57d5:	call	0x6be0


0x57da:	mov	rbx, rax
0x57dd:	jmp	0x5572


0x5560:	lea	rsi, [rbp - 1]
0x5564:	mov	rbx, rax
0x5567:	mov	rdi, r13
0x556a:	call	0x5330


0x556f:	mov	qword ptr [rbx], rax
0x5572:	mov	rdx, qword ptr [rsp + 0x58]
0x5577:	xor	rdx, qword ptr fs:[0x28]
0x5580:	mov	rax, rbx
0x5583:	jne	0x5847


0x598a:	mov	rbx, rax
0x598d:	mov	qword ptr [rax], 0
0x5994:	lea	rax, [rip - 0x12b]
0x599b:	lea	rdi, [rip + 0x4305]
0x59a2:	xor	esi, esi
0x59a4:	mov	qword ptr [rbx + 0x10], 0
0x59ac:	mov	qword ptr [rbx + 8], rax
0x59b0:	mov	qword ptr [rbx + 0x18], 0
0x59b8:	xor	eax, eax
0x59ba:	call	0x1d10


0x59bf:	test	eax, eax
0x59c1:	lea	r13, [rbx + 0x20]
0x59c5:	mov	r15d, eax
0x59c8:	js	0x5a48


0x5a48:	lea	r12, [rsp + 0x10]
0x5a4d:	xor	esi, esi
0x5a4f:	mov	r14d, 0x18
0x5a55:	mov	rdi, r12
0x5a58:	call	0x1b50


0x59ca:	cmp	rbp, 0x800
0x59d1:	mov	rdx, rbp
0x59d4:	mov	r14d, 0x800
0x59da:	cmova	rdx, r14
0x59de:	mov	ecx, 0x1018
0x59e3:	mov	rsi, r13
0x59e6:	mov	edi, eax
0x59e8:	call	0x1a00


0x1b50:	jmp	qword ptr [rip + 0x20b32a]


0x1a00:	jmp	qword ptr [rip + 0x20b3d2]






0x5a22:	mov	rbx, rax
0x5a25:	mov	qword ptr [rax], 0
0x5a2c:	lea	rax, [rip - 0x1c3]
0x5a33:	mov	qword ptr [rbx + 0x10], 0
0x5a3b:	mov	qword ptr [rbx + 8], rax
0x5a3f:	jmp	0x5957


0x52be:	mov	qword ptr [rax], rbx
0x52c1:	mov	qword ptr [rax + 0x10], 0
0x52c9:	mov	qword ptr [rax + 8], 0
0x52d1:	pop	rbx
0x52d2:	ret	


0x6d39:	mov	rdx, rbx
0x6d3c:	xor	esi, esi
0x6d3e:	mov	rdi, rax
0x6d41:	pop	rbx
0x6d42:	jmp	0x1b80


0x6d94:	add	rsp, 8
0x6d98:	mov	rdx, rbx
0x6d9b:	mov	rsi, rbp
0x6d9e:	pop	rbx
0x6d9f:	pop	rbp
0x6da0:	mov	rdi, rax
0x6da3:	jmp	0x1c10


0x8363:	test	rax, rax
0x8366:	mov	rbx, rax
0x8369:	je	0x841a


0x841a:	add	rsp, 8
0x841e:	mov	rax, rbx
0x8421:	pop	rbx
0x8422:	pop	rbp
0x8423:	pop	r12
0x8425:	pop	r13
0x8427:	pop	r14
0x8429:	pop	r15
0x842b:	ret	


0x836f:	test	r15, r15
0x8372:	lea	rdi, [rax + 0x28]
0x8376:	je	0x8430


0x8430:	lea	rax, [rip + 0x1e79]
0x8437:	mov	qword ptr [rbx + 0x28], rax
0x843b:	call	0x7cc0


0x837c:	mov	qword ptr [rax + 0x28], r15
0x8380:	call	0x7cc0


0x8385:	test	al, al
0x8387:	je	0x8410


0x8410:	mov	rdi, rbx
0x8413:	xor	ebx, ebx
0x8415:	call	0x1dd0


0x838d:	cmp	byte ptr [r15 + 0x10], 0
0x8392:	je	0x8490


0x8490:	test	rbp, rbp
0x8493:	movss	xmm1, dword ptr [r15 + 8]
0x8499:	jns	0x8451


0x8398:	mov	rdi, rbp
0x839b:	call	0x7ab0


0x849b:	mov	rax, rbp
0x849e:	pxor	xmm0, xmm0
0x84a2:	shr	rax, 1
0x84a5:	and	ebp, 1
0x84a8:	or	rax, rbp
0x84ab:	cvtsi2ss	xmm0, rax
0x84b0:	addss	xmm0, xmm0
0x84b4:	jmp	0x845a


0x8451:	pxor	xmm0, xmm0
0x8455:	cvtsi2ss	xmm0, rbp
0x845a:	divss	xmm0, xmm1
0x845e:	ucomiss	xmm0, dword ptr [rip + 0x1e77]
0x8465:	jae	0x8410


0x845a:	divss	xmm0, xmm1
0x845e:	ucomiss	xmm0, dword ptr [rip + 0x1e77]
0x8465:	jae	0x8410


0x8467:	ucomiss	xmm0, dword ptr [rip + 0x1e72]
0x846e:	jb	0x84c0


0x84c0:	cvttss2si	rbp, xmm0
0x84c5:	jmp	0x8398


0x8470:	subss	xmm0, dword ptr [rip + 0x1e68]
0x8478:	movabs	rax, 0x8000000000000000
0x8482:	cvttss2si	rbp, xmm0
0x8487:	xor	rbp, rax
0x848a:	jmp	0x8398


0x83a0:	mov	edx, 8
0x83a5:	mov	rbp, rax
0x83a8:	xor	ecx, ecx
0x83aa:	mov	rax, rdx
0x83ad:	mul	rbp
0x83b0:	jo	0x84ca


0x84ca:	mov	ecx, 1
0x84cf:	jmp	0x83b6


0x83b6:	test	rax, rax
0x83b9:	js	0x8410


0x83bb:	test	rcx, rcx
0x83be:	jne	0x8410


0x83c0:	test	rbp, rbp
0x83c3:	mov	qword ptr [rbx + 0x10], rbp
0x83c7:	je	0x8410


0x83c9:	mov	esi, 0x10
0x83ce:	mov	rdi, rbp
0x83d1:	call	0x1bf0


0x83d6:	test	rax, rax
0x83d9:	mov	qword ptr [rbx], rax
0x83dc:	je	0x8410


0x83de:	shl	rbp, 4
0x83e2:	mov	qword ptr [rbx + 0x18], 0
0x83ea:	mov	qword ptr [rbx + 0x20], 0
0x83f2:	add	rbp, rax
0x83f5:	mov	qword ptr [rbx + 0x30], r12
0x83f9:	mov	qword ptr [rbx + 0x38], r13
0x83fd:	mov	qword ptr [rbx + 8], rbp
0x8401:	mov	qword ptr [rbx + 0x40], r14
0x8405:	mov	qword ptr [rbx + 0x48], 0
0x840d:	jmp	0x841a


0x8440:	test	al, al
0x8442:	movss	xmm1, dword ptr [rip + 0x1e8e]
0x844a:	je	0x8410


0x844c:	test	rbp, rbp
0x844f:	js	0x849b


0x55d7:	test	rax, rax
0x55da:	mov	qword ptr [rsp + 8], rax
0x55df:	je	0x584c


0x55e5:	mov	edx, 8
0x55ea:	xor	ecx, ecx
0x55ec:	mov	rax, rdx
0x55ef:	mul	r12
0x55f2:	jo	0x585b


0x585b:	mov	ecx, 1
0x5860:	jmp	0x55f8


0x55f8:	test	rax, rax
0x55fb:	js	0x584c


0x5601:	test	rcx, rcx
0x5604:	jne	0x584c


0x560a:	lea	rdi, [r12*8]
0x5612:	call	0x6b80


0x5617:	mov	dword ptr [rsp + 4], 1
0x561f:	mov	rbx, rax
0x5622:	jmp	0x5686


0x5686:	lea	rax, [rbp - 1]
0x568a:	xor	ebp, ebp
0x568c:	mov	qword ptr [rsp + 0x10], rax
0x5691:	lea	rax, [rsp + 0x40]
0x5696:	mov	qword ptr [rsp + 0x20], rax
0x569b:	lea	rax, [rsp + 0x30]
0x56a0:	mov	qword ptr [rsp + 0x28], rax
0x56a5:	jmp	0x56cf


0x8d9e:	test	rax, rax
0x8da1:	je	0x8dc0


0x8dc0:	lea	rax, [rip + 0x1529]
0x8dc7:	add	rsp, 8
0x8dcb:	ret	


0x8da3:	cmp	byte ptr [rax], 0
0x8da6:	lea	rdx, [rip + 0x1543]
0x8dad:	cmove	rax, rdx
0x8db1:	add	rsp, 8
0x8db5:	ret	


0x3630:	movzx	edx, byte ptr [rax]
0x3633:	and	edx, 0xffffffdf
0x3636:	cmp	dl, 0x55
0x3639:	je	0x36b0


0x36b0:	movzx	edx, byte ptr [rax + 1]
0x36b4:	and	edx, 0xffffffdf
0x36b7:	cmp	dl, 0x54
0x36ba:	jne	0x3640


0x363b:	cmp	dl, 0x47
0x363e:	je	0x3660


0x36bc:	movzx	edx, byte ptr [rax + 2]
0x36c0:	and	edx, 0xffffffdf
0x36c3:	cmp	dl, 0x46
0x36c6:	jne	0x3640


0x3640:	lea	rax, [rip + 0x6174]
0x3647:	lea	rdx, [rip + 0x616f]
0x364e:	cmp	ebx, 9
0x3651:	cmovne	rax, rdx
0x3655:	add	rsp, 8
0x3659:	pop	rbx
0x365a:	pop	rbp
0x365b:	ret	


0x3660:	movzx	edx, byte ptr [rax + 1]
0x3664:	and	edx, 0xffffffdf
0x3667:	cmp	dl, 0x42
0x366a:	jne	0x3640


0x36cc:	cmp	byte ptr [rax + 3], 0x2d
0x36d0:	jne	0x3640


0x366c:	cmp	byte ptr [rax + 2], 0x31
0x3670:	jne	0x3640


0x36d6:	cmp	byte ptr [rax + 4], 0x38
0x36da:	jne	0x3640


0x3672:	cmp	byte ptr [rax + 3], 0x38
0x3676:	jne	0x3640


0x36e0:	cmp	byte ptr [rax + 5], 0
0x36e4:	jne	0x3640


0x3678:	cmp	byte ptr [rax + 4], 0x30
0x367c:	jne	0x3640


0x36ea:	cmp	byte ptr [rbp], 0x60
0x36ee:	lea	rax, [rip + 0x60b7]
0x36f5:	lea	rdx, [rip + 0x60b4]
0x36fc:	cmovne	rax, rdx
0x3700:	add	rsp, 8
0x3704:	pop	rbx
0x3705:	pop	rbp
0x3706:	ret	


0x367e:	cmp	byte ptr [rax + 5], 0x33
0x3682:	jne	0x3640


0x3684:	cmp	byte ptr [rax + 6], 0x30
0x3688:	jne	0x3640


0x368a:	cmp	byte ptr [rax + 7], 0
0x368e:	jne	0x3640


0x3690:	cmp	byte ptr [rbp], 0x60
0x3694:	lea	rax, [rip + 0x6119]
0x369b:	lea	rdx, [rip + 0x6116]
0x36a2:	cmovne	rax, rdx
0x36a6:	add	rsp, 8
0x36aa:	pop	rbx
0x36ab:	pop	rbp
0x36ac:	ret	


0x59ed:	mov	edi, r15d
0x59f0:	mov	rbp, rax
0x59f3:	call	0x1ba0


0x5a5d:	movdqa	xmm0, xmmword ptr [rsp + 0x10]
0x5a63:	movups	xmmword ptr [rbx + 0x20], xmm0
0x5a67:	call	0x1a40


0x1a40:	jmp	qword ptr [rip + 0x20b3b2]




0x1e45:	lea	rdi, [rip + 0x7337]
0x1e4c:	call	0x1a60


0x1a60:	jmp	qword ptr [rip + 0x20b3a2]




0x79e7:	test	eax, eax
0x79e9:	mov	r12d, eax
0x79ec:	js	0x7a28


0x7a28:	call	0x19b0


0x79ee:	mov	rdi, rbx
0x79f1:	call	0x7780


0x7a2d:	mov	r12d, dword ptr [rax]
0x7a30:	mov	rbp, rax
0x7a33:	mov	rdi, rbx
0x7a36:	call	0x7780


0x6322:	test	eax, eax
0x6324:	js	0x633a


0x633a:	mov	ebx, 0x2000
0x633f:	mov	rdi, rbx
0x6342:	call	0x1c40


0x6326:	mov	eax, dword ptr [rsp + 0x28]
0x632a:	and	eax, 0xf000
0x632f:	cmp	eax, 0x8000
0x6334:	je	0x6488


0x6488:	mov	rdi, r13
0x648b:	call	0x19e0


0x19e0:	jmp	qword ptr [rip + 0x20b3e2]




0x6347:	test	rax, rax
0x634a:	mov	r12, rax
0x634d:	je	0x63f0


0x63f0:	mov	rcx, qword ptr [rsp + 0xa8]
0x63f8:	xor	rcx, qword ptr fs:[0x28]
0x6401:	mov	rax, r12
0x6404:	jne	0x64b3


0x6353:	xor	ebp, ebp
0x6355:	mov	r15, -1
0x635c:	jmp	0x639a


0x640a:	add	rsp, 0xb8
0x6411:	pop	rbx
0x6412:	pop	rbp
0x6413:	pop	r12
0x6415:	pop	r13
0x6417:	pop	r14
0x6419:	pop	r15
0x641b:	ret	


0x64b3:	call	0x1ad0


0x639a:	mov	r14, rbx
0x639d:	lea	rdi, [r12 + rbp]
0x63a1:	mov	rcx, r13
0x63a4:	sub	r14, rbp
0x63a7:	mov	esi, 1
0x63ac:	mov	rdx, r14
0x63af:	call	0x1a20


0x1a20:	jmp	qword ptr [rip + 0x20b3c2]




0x64e8:	mov	rbp, rax
0x64eb:	call	0x19b0


0x64f0:	mov	rdi, rbx
0x64f3:	mov	r12, rax
0x64f6:	mov	r13d, dword ptr [rax]
0x64f9:	call	0x7780


0x3350:	mov	r12, rax
0x3353:	test	bl, bl
0x3355:	mov	r15d, dword ptr [r14]
0x3358:	jne	0x3400


0x335e:	test	bpl, bpl
0x3361:	jne	0x33d0


0x3400:	mov	edi, 2
0x3405:	call	0x1ba0


0x3363:	test	r13b, r13b
0x3366:	jne	0x33df


0x33d0:	mov	edi, 1
0x33d5:	call	0x1ba0


0x3368:	test	r12, r12
0x336b:	jne	0x3370


0x33df:	xor	edi, edi
0x33e1:	call	0x1ba0


0x336d:	mov	dword ptr [r14], r15d
0x3370:	add	rsp, 0x18
0x3374:	mov	rax, r12
0x3377:	pop	rbx
0x3378:	pop	rbp
0x3379:	pop	r12
0x337b:	pop	r13
0x337d:	pop	r14
0x337f:	pop	r15
0x3381:	ret	


0x3370:	add	rsp, 0x18
0x3374:	mov	rax, r12
0x3377:	pop	rbx
0x3378:	pop	rbp
0x3379:	pop	r12
0x337b:	pop	r13
0x337d:	pop	r14
0x337f:	pop	r15
0x3381:	ret	


0x32e4:	cmp	eax, 2
0x32e7:	setne	bl
0x32ea:	mov	esi, 1
0x32ef:	mov	edi, 1
0x32f4:	call	0x1b10


0x32f9:	cmp	eax, 1
0x32fc:	setne	bpl
0x3300:	xor	esi, esi
0x3302:	xor	edi, edi
0x3304:	call	0x1b10


0x3309:	test	eax, eax
0x330b:	je	0x3398


0x3398:	xor	r13d, r13d
0x339b:	test	bpl, bpl
0x339e:	je	0x3328


0x3311:	xor	edi, edi
0x3313:	call	0x3240


0x3328:	test	bl, bl
0x332a:	je	0x3340


0x33a0:	mov	edi, 1
0x33a5:	call	0x3240


0x332c:	mov	edi, 2
0x3331:	call	0x3240


0x3336:	test	al, al
0x3338:	mov	ebx, eax
0x333a:	je	0x33f0


0x33f0:	mov	r15d, dword ptr [r14]
0x33f3:	xor	r12d, r12d
0x33f6:	nop	word ptr cs:[rax + rax]
0x3400:	mov	edi, 2
0x3405:	call	0x1ba0


0x33aa:	test	al, al
0x33ac:	mov	ebp, eax
0x33ae:	jne	0x3328


0x33b4:	xor	r12d, r12d
0x33b7:	test	bl, bl
0x33b9:	mov	r15d, dword ptr [r14]
0x33bc:	je	0x33d0


0x33be:	mov	edi, 2
0x33c3:	call	0x1ba0


0x3318:	test	al, al
0x331a:	mov	r13d, eax
0x331d:	je	0x3430


0x3430:	mov	r13d, 1
0x3436:	xor	r12d, r12d
0x3439:	jmp	0x3353


0x3323:	test	bpl, bpl
0x3326:	jne	0x33a0


0x3353:	test	bl, bl
0x3355:	mov	r15d, dword ptr [r14]
0x3358:	jne	0x3400


0x77de:	cmp	rax, -1
0x77e2:	jne	0x779c


0x77e4:	mov	rdi, rbx
0x77e7:	pop	rbx
0x77e8:	pop	rbp
0x77e9:	pop	r12
0x77eb:	jmp	0x1a70


0x7880:	cmp	rax, -1
0x7884:	je	0x7892


0x7892:	pop	rbx
0x7893:	pop	rbp
0x7894:	pop	r12
0x7896:	ret	


0x7886:	and	dword ptr [rbx], 0xffffffef
0x7889:	mov	qword ptr [rbx + 0x90], rax
0x7890:	xor	eax, eax
0x7892:	pop	rbx
0x7893:	pop	rbp
0x7894:	pop	r12
0x7896:	ret	


0x6e00:	call	0x19a0


0x6b2a:	lea	rsi, [rip + 0x320b]
0x6b31:	mov	edx, 5
0x6b36:	xor	edi, edi
0x6b38:	call	0x1aa0


0x6b3d:	lea	rcx, [rip + 0x2b04]
0x6b44:	lea	rdx, [rip + 0x2634]
0x6b4b:	mov	rsi, rax
0x6b4e:	mov	edi, 1
0x6b53:	xor	eax, eax
0x6b55:	call	0x1cd0


0x6b5a:	mov	rbx, qword ptr [rip + 0x206527]
0x6b61:	lea	rsi, [rip + 0x3400]
0x6b68:	xor	edi, edi
0x6b6a:	mov	edx, 5
0x6b6f:	call	0x1aa0


0x6b74:	mov	rsi, rbx
0x6b77:	mov	rdi, rax
0x6b7a:	pop	rbx
0x6b7b:	jmp	0x1be0


0x2dd3:	mov	rbx, qword ptr [rip + 0x20a2ae]
0x2dda:	lea	rsi, [rip + 0x656f]
0x2de1:	mov	edx, 5
0x2de6:	xor	edi, edi
0x2de8:	call	0x1aa0


0x2ded:	mov	rsi, rbx
0x2df0:	mov	rdi, rax
0x2df3:	call	0x1be0


0x2df8:	mov	rbx, qword ptr [rip + 0x20a289]
0x2dff:	lea	rsi, [rip + 0x6592]
0x2e06:	mov	edx, 5
0x2e0b:	xor	edi, edi
0x2e0d:	call	0x1aa0


0x2e12:	mov	rsi, rbx
0x2e15:	mov	rdi, rax
0x2e18:	call	0x1be0


0x2e1d:	mov	rbx, qword ptr [rip + 0x20a264]
0x2e24:	lea	rsi, [rip + 0x65a5]
0x2e2b:	mov	edx, 5
0x2e30:	xor	edi, edi
0x2e32:	call	0x1aa0


0x2e37:	mov	rsi, rbx
0x2e3a:	mov	rdi, rax
0x2e3d:	call	0x1be0


0x2e42:	mov	rbx, qword ptr [rip + 0x20a23f]
0x2e49:	lea	rsi, [rip + 0x65d0]
0x2e50:	mov	edx, 5
0x2e55:	xor	edi, edi
0x2e57:	call	0x1aa0


0x2e5c:	mov	rsi, rbx
0x2e5f:	mov	rdi, rax
0x2e62:	call	0x1be0


0x2e67:	mov	rbx, qword ptr [rip + 0x20a21a]
0x2e6e:	lea	rsi, [rip + 0x672b]
0x2e75:	mov	edx, 5
0x2e7a:	xor	edi, edi
0x2e7c:	call	0x1aa0


0x2e81:	mov	rsi, rbx
0x2e84:	mov	rdi, rax
0x2e87:	call	0x1be0


0x2e8c:	mov	rbx, qword ptr [rip + 0x20a1f5]
0x2e93:	lea	rsi, [rip + 0x6746]
0x2e9a:	mov	edx, 5
0x2e9f:	xor	edi, edi
0x2ea1:	call	0x1aa0


0x2ea6:	mov	rsi, rbx
0x2ea9:	mov	rdi, rax
0x2eac:	call	0x1be0


0x2eb1:	mov	rbx, qword ptr [rip + 0x20a1d0]
0x2eb8:	lea	rsi, [rip + 0x6751]
0x2ebf:	mov	edx, 5
0x2ec4:	xor	edi, edi
0x2ec6:	call	0x1aa0


0x2ecb:	mov	rsi, rbx
0x2ece:	mov	rdi, rax
0x2ed1:	lea	rbx, [rip + 0x622c]
0x2ed8:	call	0x1be0


0x2edd:	lea	rax, [rip + 0x6225]
0x2ee4:	lea	rcx, [rip + 0x625f]
0x2eeb:	mov	qword ptr [rsp + 0x60], 0
0x2ef4:	mov	qword ptr [rsp + 0x68], 0
0x2efd:	mov	rdx, rsp
0x2f00:	mov	qword ptr [rsp], rax
0x2f04:	lea	rax, [rip + 0x6200]
0x2f0b:	mov	qword ptr [rsp + 0x30], rcx
0x2f10:	lea	rcx, [rip + 0x623d]
0x2f17:	mov	qword ptr [rsp + 8], rax
0x2f1c:	lea	rax, [rip + 0x6260]
0x2f23:	mov	qword ptr [rsp + 0x40], rcx
0x2f28:	lea	rcx, [rip + 0x622f]
0x2f2f:	mov	qword ptr [rsp + 0x10], rax
0x2f34:	lea	rax, [rip + 0x61e0]
0x2f3b:	mov	qword ptr [rsp + 0x50], rcx
0x2f40:	mov	qword ptr [rsp + 0x18], rax
0x2f45:	lea	rax, [rip + 0x61e5]
0x2f4c:	mov	qword ptr [rsp + 0x20], rax
0x2f51:	lea	rax, [rip + 0x61e3]
0x2f58:	mov	qword ptr [rsp + 0x28], rax
0x2f5d:	mov	qword ptr [rsp + 0x38], rax
0x2f62:	mov	qword ptr [rsp + 0x48], rax
0x2f67:	mov	qword ptr [rsp + 0x58], rax
0x2f6c:	nop	dword ptr [rax]
0x2f70:	add	rdx, 0x10
0x2f74:	mov	rdi, qword ptr [rdx]
0x2f77:	test	rdi, rdi
0x2f7a:	je	0x2f8f


0x2f8f:	mov	r12, qword ptr [rdx + 8]
0x2f93:	xor	edi, edi
0x2f95:	mov	edx, 5
0x2f9a:	lea	rsi, [rip + 0x61c7]
0x2fa1:	test	r12, r12
0x2fa4:	je	0x306b


0x2f7c:	mov	ecx, 5
0x2f81:	mov	rsi, rbx
0x2f84:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x306b:	call	0x1aa0


0x2faa:	call	0x1aa0


0x2f84:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2f86:	seta	al
0x2f89:	sbb	al, 0
0x2f8b:	test	al, al
0x2f8d:	jne	0x2f70


0x2f70:	add	rdx, 0x10
0x2f74:	mov	rdi, qword ptr [rdx]
0x2f77:	test	rdi, rdi
0x2f7a:	je	0x2f8f


0x2faf:	lea	rcx, [rip + 0x6692]
0x2fb6:	lea	rdx, [rip + 0x61c2]
0x2fbd:	mov	rsi, rax
0x2fc0:	mov	edi, 1
0x2fc5:	xor	eax, eax
0x2fc7:	call	0x1cd0


0x2fcc:	xor	esi, esi
0x2fce:	mov	edi, 5
0x2fd3:	call	0x1cc0


0x2fd8:	test	rax, rax
0x2fdb:	je	0x2ff9


0x2ff9:	lea	rsi, [rip + 0x6191]
0x3000:	xor	edi, edi
0x3002:	mov	edx, 5
0x3007:	call	0x1aa0


0x2fdd:	lea	rsi, [rip + 0x61a9]
0x2fe4:	mov	edx, 3
0x2fe9:	mov	rdi, rax
0x2fec:	call	0x19c0


0x19c0:	jmp	qword ptr [rip + 0x20b3f2]




0x300c:	lea	rcx, [rip + 0x60f1]
0x3013:	lea	rdx, [rip + 0x662e]
0x301a:	mov	rsi, rax
0x301d:	mov	edi, 1
0x3022:	xor	eax, eax
0x3024:	call	0x1cd0


0x3029:	cmp	r12, rbx
0x302c:	lea	rcx, [rip + 0x60f2]
0x3033:	lea	rbx, [rip + 0x6cd6]
0x303a:	cmove	rbx, rcx
0x303e:	lea	rsi, [rip + 0x6673]
0x3045:	xor	edi, edi
0x3047:	mov	edx, 5
0x304c:	call	0x1aa0


0x3051:	mov	rcx, rbx
0x3054:	mov	rsi, rax
0x3057:	mov	rdx, r12
0x305a:	mov	edi, 1
0x305f:	xor	eax, eax
0x3061:	call	0x1cd0


0x3066:	jmp	0x2da6


0x3070:	lea	rcx, [rip + 0x65d1]
0x3077:	lea	rdx, [rip + 0x6101]
0x307e:	mov	rsi, rax
0x3081:	mov	edi, 1
0x3086:	xor	eax, eax
0x3088:	call	0x1cd0


0x308d:	xor	esi, esi
0x308f:	mov	edi, 5
0x3094:	call	0x1cc0


0x3099:	test	rax, rax
0x309c:	je	0x30b6


0x30b6:	lea	rsi, [rip + 0x60d4]
0x30bd:	mov	edx, 5
0x30c2:	xor	edi, edi
0x30c4:	lea	r12, [rip + 0x6039]
0x30cb:	lea	rbx, [rip + 0x6053]
0x30d2:	call	0x1aa0


0x309e:	lea	rsi, [rip + 0x60e8]
0x30a5:	mov	edx, 3
0x30aa:	mov	rdi, rax
0x30ad:	call	0x19c0


0x30d7:	lea	rcx, [rip + 0x6026]
0x30de:	lea	rdx, [rip + 0x6563]
0x30e5:	mov	rsi, rax
0x30e8:	mov	edi, 1
0x30ed:	xor	eax, eax
0x30ef:	call	0x1cd0


0x30f4:	jmp	0x303e


0x303e:	lea	rsi, [rip + 0x6673]
0x3045:	xor	edi, edi
0x3047:	mov	edx, 5
0x304c:	call	0x1aa0


0x65ec:	cmp	r12, 9
0x65f0:	ja	0x6930


0x65f6:	lea	rdx, [rip + 0x39af]
0x65fd:	movsxd	rax, dword ptr [rdx + r12*4]
0x6601:	add	rax, rdx
0x6604:	jmp	rax


0x6930:	mov	r10, qword ptr [rbx + 0x40]
0x6934:	mov	r9, qword ptr [rbx + 0x38]
0x6938:	mov	edx, 5
0x693d:	mov	rax, qword ptr [rbx + 0x10]
0x6941:	mov	r8, qword ptr [rbx + 8]
0x6945:	lea	rsi, [rip + 0x35dc]
0x694c:	mov	r13, qword ptr [rbx + 0x30]
0x6950:	mov	r12, qword ptr [rbx + 0x28]
0x6954:	mov	r15, qword ptr [rbx + 0x20]
0x6958:	mov	r14, qword ptr [rbx + 0x18]
0x695c:	mov	qword ptr [rsp + 0x18], r10
0x6961:	mov	qword ptr [rsp + 0x10], r9
0x6966:	mov	qword ptr [rsp], rax
0x696a:	mov	qword ptr [rsp + 8], r8
0x696f:	mov	rbx, qword ptr [rbx]
0x6972:	jmp	0x6702


0x6702:	xor	edi, edi
0x6704:	call	0x1aa0


0x6709:	mov	r10, qword ptr [rsp + 0x18]
0x670e:	push	r10
0x6710:	jmp	0x6654


0x6654:	mov	r9, qword ptr [rsp + 0x18]
0x6659:	mov	rdx, rax
0x665c:	mov	rcx, rbx
0x665f:	mov	esi, 1
0x6664:	mov	rdi, rbp
0x6667:	xor	eax, eax
0x6669:	push	r9
0x666b:	push	r13
0x666d:	push	r12
0x666f:	push	r15
0x6671:	push	r14
0x6673:	mov	r9, qword ptr [rsp + 0x30]
0x6678:	mov	r8, qword ptr [rsp + 0x38]
0x667d:	call	0x1d90


0x6682:	add	rsp, 0x30
0x6686:	add	rsp, 0x28
0x668a:	pop	rbx
0x668b:	pop	rbp
0x668c:	pop	r12
0x668e:	pop	r13
0x6690:	pop	r14
0x6692:	pop	r15
0x6694:	ret	


0x4b2d:	mov	dword ptr [rbp], r12d
0x4b31:	pop	rbx
0x4b32:	pop	rbp
0x4b33:	pop	r12
0x4b35:	ret	


0x49ee:	mov	dword ptr [rip + 0x208663], r12d
0x49f5:	mov	eax, dword ptr [rbp + 4]
0x49f8:	shl	r15, 4
0x49fc:	sub	rsp, 8
0x4a00:	add	rbx, r15
0x4a03:	lea	r15, [rbp + 8]
0x4a07:	mov	r8d, dword ptr [rbp]
0x4a0b:	mov	r11, qword ptr [rbx]
0x4a0e:	mov	r12, qword ptr [rbx + 8]
0x4a12:	mov	rcx, r14
0x4a15:	or	eax, 1
0x4a18:	mov	dword ptr [rsp + 0x24], eax
0x4a1c:	push	qword ptr [rbp + 0x30]
0x4a1f:	mov	r9d, eax
0x4a22:	push	qword ptr [rbp + 0x28]
0x4a25:	push	r15
0x4a27:	mov	rsi, r11
0x4a2a:	mov	rdx, qword ptr [rsp + 0x28]
0x4a2f:	mov	rdi, r12
0x4a32:	mov	qword ptr [rsp + 0x30], r11
0x4a37:	call	0x3710


0x73ba:	mov	edx, dword ptr [rsp + 8]
0x73be:	mov	rsi, qword ptr [rax]
0x73c1:	mov	rax, rbp
0x73c4:	jmp	0x73d7


0x73d7:	movzx	ecx, bl
0x73da:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x73df:	jne	0x73d0


0x73e1:	cmp	bl, 0x2d
0x73e4:	je	0x7438


0x73d0:	add	rax, 1
0x73d4:	movzx	ebx, byte ptr [rax]
0x73d7:	movzx	ecx, bl
0x73da:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x73df:	jne	0x73d0


0x7438:	mov	ebp, 4
0x743d:	mov	rdi, qword ptr [rsp + 0x18]
0x7442:	xor	rdi, qword ptr fs:[0x28]
0x744b:	mov	eax, ebp
0x744d:	jne	0x76e0


0x73e6:	xor	ecx, ecx
0x73e8:	mov	rsi, r15
0x73eb:	mov	rdi, rbp
0x73ee:	call	0x1b70


0x7453:	add	rsp, 0x28
0x7457:	pop	rbx
0x7458:	pop	rbp
0x7459:	pop	r12
0x745b:	pop	r13
0x745d:	pop	r14
0x745f:	pop	r15
0x7461:	ret	


0x76e0:	call	0x1ad0


0x1b70:	jmp	qword ptr [rip + 0x20b31a]




0x6f9a:	mov	edx, dword ptr [rsp + 8]
0x6f9e:	mov	rsi, qword ptr [rax]
0x6fa1:	mov	rax, rbp
0x6fa4:	jmp	0x6fb7


0x6fb7:	movzx	ecx, bl
0x6fba:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x6fbf:	jne	0x6fb0


0x6fc1:	cmp	bl, 0x2d
0x6fc4:	je	0x7018


0x6fb0:	add	rax, 1
0x6fb4:	movzx	ebx, byte ptr [rax]
0x6fb7:	movzx	ecx, bl
0x6fba:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x6fbf:	jne	0x6fb0


0x7018:	mov	ebp, 4
0x701d:	mov	rdi, qword ptr [rsp + 0x18]
0x7022:	xor	rdi, qword ptr fs:[0x28]
0x702b:	mov	eax, ebp
0x702d:	jne	0x72c0


0x6fc6:	mov	rsi, r15
0x6fc9:	mov	rdi, rbp
0x6fcc:	call	0x1d40


0x7033:	add	rsp, 0x28
0x7037:	pop	rbx
0x7038:	pop	rbp
0x7039:	pop	r12
0x703b:	pop	r13
0x703d:	pop	r14
0x703f:	pop	r15
0x7041:	ret	


0x72c0:	call	0x1ad0


0x1d40:	jmp	qword ptr [rip + 0x20b232]




0x5c86:	add	rbx, rax
0x5c89:	sub	rbp, rax
0x5c8c:	mov	edx, dword ptr [r13]
0x5c90:	jne	0x5c58


0x5c58:	mov	rax, qword ptr [r12]
0x5c5c:	mov	rdi, qword ptr [r12 + 0x10]
0x5c61:	mov	eax, dword ptr [rax]
0x5c63:	and	eax, 0x20
0x5c66:	cmovne	eax, edx
0x5c69:	mov	dword ptr [r13], eax
0x5c6d:	call	qword ptr [r12 + 8]


0x33da:	test	r13b, r13b
0x33dd:	je	0x3368


0x340a:	jmp	0x335e


0x33e6:	jmp	0x3368


0x59f8:	cmp	rbp, 0x7ff
0x59ff:	jle	0x5b24


0x5b24:	test	rbp, rbp
0x5b27:	mov	r15, r14
0x5b2a:	mov	eax, 0x10
0x5b2f:	cmovs	rbp, r12
0x5b33:	lea	r12, [rsp + 0x10]
0x5b38:	sub	r15, rbp
0x5b3b:	cmp	r15, 0x10
0x5b3f:	mov	rdi, r12
0x5b42:	cmova	r15, rax
0x5b46:	xor	esi, esi
0x5b48:	call	0x1b50


0x5a05:	mov	rdi, r13
0x5a08:	call	0x60a0


0x5a0d:	jmp	0x5957


0x5b4d:	lea	rax, [r13 + rbp]
0x5b52:	add	rbp, r15
0x5b55:	mov	ecx, r15d
0x5b58:	cmp	rbp, 0x7ff
0x5b5f:	mov	rsi, r12
0x5b62:	mov	rdi, rax
0x5b65:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5b67:	ja	0x5a05


0x5b65:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5b6d:	mov	r15, r14
0x5b70:	mov	r8d, 4
0x5b76:	sub	r15, rbp
0x5b79:	mov	qword ptr [rsp + 8], r8
0x5b7e:	cmp	r15, 4
0x5b82:	cmova	r15, r8
0x5b86:	lea	rdx, [rbp + r15]
0x5b8b:	add	rbp, r13
0x5b8e:	mov	qword ptr [rsp], rdx
0x5b92:	call	0x1a40


0x8fe3:	mov	ebx, 0xffffffff
0x8fe8:	mov	dword ptr [rbp], r12d
0x8fec:	jmp	0x8ec0


0x326e:	call	0x19b0


0x3273:	mov	dword ptr [rax], 9
0x3279:	add	rsp, 8
0x327d:	mov	eax, ebx
0x327f:	pop	rbx
0x3280:	pop	rbp
0x3281:	ret	


0x7837:	mov	rdi, rbx
0x783a:	pop	rbx
0x783b:	jmp	0x1c50


0x6ac6:	mov	rax, qword ptr [rsp + 0x78]
0x6acb:	xor	rax, qword ptr fs:[0x28]
0x6ad4:	jne	0x6ae0


0x6ad6:	add	rsp, 0xb8
0x6add:	pop	rbx
0x6ade:	pop	rbp
0x6adf:	ret	


0x6ae0:	call	0x1ad0


0x69f0:	mov	rax, qword ptr [rsp + 0x58]
0x69f5:	xor	rax, qword ptr fs:[0x28]
0x69fe:	jne	0x6a05


0x6a00:	add	rsp, 0x68
0x6a04:	ret	


0x6a05:	call	0x1ad0


0x6e4a:	test	eax, eax
0x6e4c:	jne	0x6ee0


0x6e52:	mov	rbp, qword ptr [rsp]
0x6e56:	cmp	rbp, r14
0x6e59:	jb	0x6e60


0x6ee0:	mov	ebp, eax
0x6ee2:	call	0x19b0


0x6e60:	call	0x19b0


0x6e5b:	cmp	rbp, r15
0x6e5e:	jbe	0x6eb4


0x6eb4:	mov	rdx, qword ptr [rsp + 8]
0x6eb9:	xor	rdx, qword ptr fs:[0x28]
0x6ec2:	mov	rax, rbp
0x6ec5:	jne	0x6f0b


0x6ec7:	add	rsp, 0x18
0x6ecb:	pop	rbx
0x6ecc:	pop	rbp
0x6ecd:	pop	r12
0x6ecf:	pop	r13
0x6ed1:	pop	r14
0x6ed3:	pop	r15
0x6ed5:	ret	


0x6f0b:	call	0x1ad0


0x6e65:	cmp	rbp, 0x40000000
0x6e6c:	mov	r14, rax
0x6e6f:	sbb	eax, eax
0x6e71:	and	eax, 0xffffffd7
0x6e74:	add	eax, 0x4b
0x6e77:	mov	dword ptr [r14], eax
0x6e7a:	mov	rdi, r12
0x6e7d:	call	0x5290


0x6ee7:	cmp	ebp, 1
0x6eea:	mov	r14, rax
0x6eed:	je	0x6f00


0x6f00:	mov	dword ptr [rax], 0x4b
0x6f06:	jmp	0x6e7a


0x6eef:	cmp	ebp, 3
0x6ef2:	jne	0x6e7a


0x6e7a:	mov	rdi, r12
0x6e7d:	call	0x5290


0x6ef4:	mov	dword ptr [rax], 0
0x6efa:	jmp	0x6e7a


0x6f2c:	add	rsp, 0x18
0x6f30:	ret	


0x6fd1:	mov	rcx, qword ptr [r15]
0x6fd4:	mov	rbx, rax
0x6fd7:	cmp	rcx, rbp
0x6fda:	je	0x7008


0x7008:	test	r13, r13
0x700b:	mov	qword ptr [rsp + 8], rcx
0x7010:	jne	0x7050


0x6fdc:	mov	eax, dword ptr [r12]
0x6fe0:	test	eax, eax
0x6fe2:	je	0x7048


0x7050:	movzx	r12d, byte ptr [rbp]
0x7055:	test	r12b, r12b
0x7058:	je	0x7018


0x7048:	xor	ebp, ebp
0x704a:	jmp	0x6fee


0x6fe4:	cmp	eax, 0x22
0x6fe7:	mov	ebp, 1
0x6fec:	jne	0x7018


0x705a:	movsx	esi, r12b
0x705e:	mov	rdi, r13
0x7061:	xor	ebp, ebp
0x7063:	call	0x1b20


0x6fee:	test	r13, r13
0x6ff1:	je	0x6ffc


0x1b20:	jmp	qword ptr [rip + 0x20b342]


0x6ffc:	mov	qword ptr [r14], rbx
0x6fff:	jmp	0x701d


0x6ff3:	movzx	r12d, byte ptr [rcx]
0x6ff7:	test	r12b, r12b
0x6ffa:	jne	0x7077




0x701d:	mov	rdi, qword ptr [rsp + 0x18]
0x7022:	xor	rdi, qword ptr fs:[0x28]
0x702b:	mov	eax, ebp
0x702d:	jne	0x72c0


0x7077:	movsx	esi, r12b
0x707b:	mov	rdi, r13
0x707e:	mov	qword ptr [rsp + 8], rcx
0x7083:	call	0x1b20


0x73f3:	mov	rcx, qword ptr [r15]
0x73f6:	mov	rbx, rax
0x73f9:	cmp	rcx, rbp
0x73fc:	je	0x7428


0x7428:	test	r13, r13
0x742b:	mov	qword ptr [rsp + 8], rcx
0x7430:	jne	0x7470


0x73fe:	mov	eax, dword ptr [r12]
0x7402:	test	eax, eax
0x7404:	je	0x7468


0x7470:	movzx	r12d, byte ptr [rbp]
0x7475:	test	r12b, r12b
0x7478:	je	0x7438


0x7468:	xor	ebp, ebp
0x746a:	jmp	0x7410


0x7406:	cmp	eax, 0x22
0x7409:	mov	ebp, 1
0x740e:	jne	0x7438


0x747a:	movsx	esi, r12b
0x747e:	mov	rdi, r13
0x7481:	xor	ebp, ebp
0x7483:	call	0x1b20


0x7410:	test	r13, r13
0x7413:	je	0x741e


0x741e:	mov	qword ptr [r14], rbx
0x7421:	jmp	0x743d


0x7415:	movzx	r12d, byte ptr [rcx]
0x7419:	test	r12b, r12b
0x741c:	jne	0x7497


0x743d:	mov	rdi, qword ptr [rsp + 0x18]
0x7442:	xor	rdi, qword ptr fs:[0x28]
0x744b:	mov	eax, ebp
0x744d:	jne	0x76e0


0x7497:	movsx	esi, r12b
0x749b:	mov	rdi, r13
0x749e:	mov	qword ptr [rsp + 8], rcx
0x74a3:	call	0x1b20


0x30b2:	test	eax, eax
0x30b4:	jne	0x30f9


0x30f9:	lea	r12, [rip + 0x6004]
0x3100:	mov	r13, qword ptr [rip + 0x209f81]
0x3107:	lea	rsi, [rip + 0x6562]
0x310e:	xor	edi, edi
0x3110:	mov	edx, 5
0x3115:	call	0x1aa0


0x311a:	mov	rsi, r13
0x311d:	mov	rdi, rax
0x3120:	call	0x1be0


0x3125:	jmp	0x2ff9


0x2ff1:	test	eax, eax
0x2ff3:	jne	0x3100


0x3100:	mov	r13, qword ptr [rip + 0x209f81]
0x3107:	lea	rsi, [rip + 0x6562]
0x310e:	xor	edi, edi
0x3110:	mov	edx, 5
0x3115:	call	0x1aa0


0x63b4:	add	rbp, rax
0x63b7:	cmp	r14, rax
0x63ba:	je	0x6360


0x6360:	cmp	rbx, -1
0x6364:	je	0x6440


0x63bc:	call	0x19b0


0x6440:	call	0x19b0


0x636a:	mov	rax, rbx
0x636d:	mov	rdi, r12
0x6370:	shr	rax, 1
0x6373:	mov	rdx, rax
0x6376:	add	rax, rbx
0x6379:	not	rdx
0x637c:	cmp	rdx, rbx
0x637f:	cmovbe	rax, r15
0x6383:	mov	rsi, rax
0x6386:	mov	rbx, rax
0x6389:	call	0x1ca0


0x638e:	test	rax, rax
0x6391:	je	0x6420


0x6420:	call	0x19b0


0x6397:	mov	r12, rax
0x639a:	mov	r14, rbx
0x639d:	lea	rdi, [r12 + rbp]
0x63a1:	mov	rcx, r13
0x63a4:	sub	r14, rbp
0x63a7:	mov	esi, 1
0x63ac:	mov	rdx, r14
0x63af:	call	0x1a20


0x6425:	mov	r15d, dword ptr [rax]
0x6428:	mov	r14, rax
0x642b:	mov	rdi, r12
0x642e:	xor	r12d, r12d
0x6431:	call	0x1dd0


0x6436:	mov	dword ptr [r14], r15d
0x6439:	jmp	0x63f0


0x6445:	mov	r15d, 0xc
0x644b:	mov	r14, rax
0x644e:	mov	rdi, r12
0x6451:	call	0x1dd0


0x6456:	xor	r12d, r12d
0x6459:	mov	dword ptr [r14], r15d
0x645c:	jmp	0x63f0


0x63c1:	mov	rdi, r13
0x63c4:	mov	r14, rax
0x63c7:	mov	r15d, dword ptr [rax]
0x63ca:	call	0x1a10


0x1a10:	jmp	qword ptr [rip + 0x20b3ca]




0x6490:	test	rax, rax
0x6493:	js	0x633a


0x6499:	mov	rbx, qword ptr [rsp + 0x40]
0x649e:	cmp	rbx, rax
0x64a1:	jle	0x633a


0x64a7:	sub	rbx, rax
0x64aa:	add	rbx, 1
0x64ae:	jmp	0x633f


0x633f:	mov	rdi, rbx
0x6342:	call	0x1c40


0x1e51:	lea	rdi, [rip + 0x12f8]
0x1e58:	call	0x90e0


0x1e5d:	lea	rax, [rsp + 0x50]
0x1e62:	mov	byte ptr [rsp + 0x1e], 0
0x1e67:	mov	byte ptr [rsp + 0x1f], 0xa
0x1e6c:	mov	qword ptr [rsp + 0x28], 0
0x1e75:	mov	byte ptr [rsp + 8], 0
0x1e7a:	mov	byte ptr [rsp + 0x10], 0
0x1e7f:	mov	qword ptr [rsp + 0x20], rax
0x1e84:	nop	dword ptr [rax]
0x1e88:	lea	rcx, [rip + 0x20ab71]
0x1e8f:	lea	rdx, [rip + 0x738a]
0x1e96:	xor	r8d, r8d
0x1e99:	mov	rsi, rbx
0x1e9c:	mov	edi, ebp
0x1e9e:	call	0x1af0


0x1af0:	jmp	qword ptr [rip + 0x20b35a]




0x5b97:	mov	rdx, qword ptr [rsp]
0x5b9b:	mov	dword ptr [rsp + 0x10], eax
0x5b9f:	mov	ecx, r15d
0x5ba2:	mov	rdi, rbp
0x5ba5:	mov	rsi, r12
0x5ba8:	mov	r8, qword ptr [rsp + 8]
0x5bad:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5baf:	cmp	rdx, 0x7ff
0x5bb6:	jg	0x5a05


0x5bad:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5bbc:	sub	r14, rdx
0x5bbf:	cmp	r14, 4
0x5bc3:	cmova	r14, r8
0x5bc7:	call	0x1d60


0x1d60:	jmp	qword ptr [rip + 0x20b222]




0x5a6c:	mov	dword ptr [rbx + 0x30], eax
0x5a6f:	mov	dword ptr [rsp + 0x10], eax
0x5a73:	call	0x1d60


0x77a4:	test	eax, eax
0x77a6:	je	0x77e4


0x77a8:	call	0x19b0


0x77ad:	mov	r12d, dword ptr [rax]
0x77b0:	mov	rdi, rbx
0x77b3:	mov	rbp, rax
0x77b6:	call	0x1a70


0x77bb:	test	r12d, r12d
0x77be:	jne	0x77f0


0x77c0:	pop	rbx
0x77c1:	pop	rbp
0x77c2:	pop	r12
0x77c4:	ret	


0x77f0:	mov	dword ptr [rbp], r12d
0x77f4:	mov	eax, 0xffffffff
0x77f9:	jmp	0x77c0


0x64fe:	test	eax, eax
0x6500:	jne	0x6510


0x6510:	test	rbp, rbp
0x6513:	je	0x6521


0x6521:	mov	dword ptr [r12], r13d
0x6525:	xor	ebp, ebp
0x6527:	jmp	0x6502


0x6515:	mov	rdi, rbp
0x6518:	mov	r13d, dword ptr [r12]
0x651c:	call	0x1dd0


0x7a3b:	xor	ebx, ebx
0x7a3d:	mov	dword ptr [rbp], r12d
0x7a41:	jmp	0x79d1


0x79f6:	test	eax, eax
0x79f8:	jne	0x7a0d


0x79fa:	mov	rsi, rbp
0x79fd:	mov	edi, r12d
0x7a00:	call	0x1cb0


0x7a0d:	call	0x19b0


0x1cb0:	jmp	qword ptr [rip + 0x20b27a]




0x7a12:	mov	ebp, dword ptr [rax]
0x7a14:	mov	rbx, rax
0x7a17:	mov	edi, r12d
0x7a1a:	call	0x1ba0


0x7a1f:	mov	dword ptr [rbx], ebp
0x7a21:	xor	ebx, ebx
0x7a23:	jmp	0x79d1


0x794a:	and	ebx, 0x20
0x794d:	test	ebx, ebx
0x794f:	jne	0x7968


0x7951:	test	eax, eax
0x7953:	je	0x795f


0x7968:	test	eax, eax
0x796a:	jne	0x7988


0x795f:	pop	rbx
0x7960:	pop	rbp
0x7961:	pop	r12
0x7963:	ret	


0x7955:	test	r12, r12
0x7958:	mov	eax, 0xffffffff
0x795d:	je	0x7998


0x796c:	call	0x19b0


0x7988:	pop	rbx
0x7989:	mov	eax, 0xffffffff
0x798e:	pop	rbp
0x798f:	pop	r12
0x7991:	ret	


0x7998:	call	0x19b0


0x799d:	cmp	dword ptr [rax], 9
0x79a0:	pop	rbx
0x79a1:	pop	rbp
0x79a2:	pop	r12
0x79a4:	setne	al
0x79a7:	movzx	eax, al
0x79aa:	neg	eax
0x79ac:	ret	


0x7971:	mov	dword ptr [rax], 0
0x7977:	mov	eax, 0xffffffff
0x797c:	pop	rbx
0x797d:	pop	rbp
0x797e:	pop	r12
0x7980:	ret	


0x3162:	test	eax, eax
0x3164:	je	0x317c


0x317c:	mov	rdi, qword ptr [rip + 0x209f3d]
0x3183:	call	0x7930


0x3166:	call	0x19b0


0x316b:	cmp	byte ptr [rip + 0x209f5e], 0
0x3172:	mov	rbx, rax
0x3175:	je	0x3193


0x3193:	lea	rsi, [rip + 0x60cf]
0x319a:	xor	edi, edi
0x319c:	mov	edx, 5
0x31a1:	call	0x1aa0


0x3177:	cmp	dword ptr [rax], 0x20
0x317a:	jne	0x3193


0x31a6:	mov	rdi, qword ptr [rip + 0x209f2b]
0x31ad:	mov	rbp, rax
0x31b0:	test	rdi, rdi
0x31b3:	je	0x31dd


0x31dd:	mov	esi, dword ptr [rbx]
0x31df:	lea	rdx, [rip + 0x6014]
0x31e6:	mov	rcx, rax
0x31e9:	xor	edi, edi
0x31eb:	xor	eax, eax
0x31ed:	call	0x1cf0


0x31b5:	call	0x5090


0x31f2:	jmp	0x31d2


0x31d2:	mov	edi, dword ptr [rip + 0x209e40]
0x31d8:	call	0x19d0


0x19d0:	jmp	qword ptr [rip + 0x20b3ea]




0x3188:	test	eax, eax
0x318a:	jne	0x31d2


0x318c:	add	rsp, 8
0x3190:	pop	rbx
0x3191:	pop	rbp
0x3192:	ret	


0x7a05:	test	rax, rax
0x7a08:	mov	rbx, rax
0x7a0b:	jne	0x79d1


0x5a78:	mov	dword ptr [rsp + 0x10], eax
0x5a7c:	mov	dword ptr [rbx + 0x34], eax
0x5a7f:	mov	ebp, 0x800
0x5a84:	mov	eax, 4
0x5a89:	sub	rbp, r14
0x5a8c:	cmp	rbp, 4
0x5a90:	cmova	rbp, rax
0x5a94:	call	0x1ae0


0x1ae0:	jmp	qword ptr [rip + 0x20b362]




0x5bcc:	mov	rdx, qword ptr [rsp]
0x5bd0:	mov	dword ptr [rsp + 0x10], eax
0x5bd4:	mov	ecx, r14d
0x5bd7:	mov	rsi, r12
0x5bda:	lea	rax, [r13 + rdx]
0x5bdf:	add	r14, rdx
0x5be2:	cmp	r14, 0x7ff
0x5be9:	mov	rdi, rax
0x5bec:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5bee:	ja	0x5a05


0x5bec:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x5bf4:	jmp	0x5a7f


0x5a7f:	mov	ebp, 0x800
0x5a84:	mov	eax, 4
0x5a89:	sub	rbp, r14
0x5a8c:	cmp	rbp, 4
0x5a90:	cmova	rbp, rax
0x5a94:	call	0x1ae0


0x1ea3:	cmp	eax, -1
0x1ea6:	je	0x2199


0x2199:	movsxd	rax, dword ptr [rip + 0x20aef8]
0x21a0:	sub	ebp, eax
0x21a2:	cmp	byte ptr [rsp + 0x10], 0
0x21a7:	lea	rbx, [rbx + rax*8]
0x21ab:	je	0x2320


0x1eac:	cmp	eax, 0x6e
0x1eaf:	je	0x2010


0x2320:	cmp	byte ptr [rsp + 8], 0
0x2325:	je	0x21bc


0x21b1:	cmp	byte ptr [rsp + 8], 0
0x21b6:	jne	0x29c1


0x2010:	mov	rcx, qword ptr [rsp + 0x20]
0x2015:	mov	rdi, qword ptr [rip + 0x20b084]
0x201c:	xor	r8d, r8d
0x201f:	xor	esi, esi
0x2021:	mov	edx, 0xa
0x2026:	call	0x6f40


0x1eb5:	jle	0x1f10


0x21bc:	cmp	byte ptr [rsp + 0x10], 0
0x21c1:	jne	0x2461


0x232b:	test	ebp, ebp
0x232d:	jg	0x2a0f


0x29c1:	lea	rsi, [rip + 0x6d70]
0x29c8:	mov	edx, 5
0x29cd:	xor	edi, edi
0x29cf:	call	0x1aa0


0x1f10:	cmp	eax, 0xffffff7e
0x1f15:	je	0x29ec


0x1eb7:	cmp	eax, 0x72
0x1eba:	je	0x2088


0x21c7:	cmp	ebp, 1
0x21ca:	mov	eax, 8
0x21cf:	jg	0x2a11


0x2461:	movsxd	rax, ebp
0x2464:	xor	edx, edx
0x2466:	or	r8, 0xffffffffffffffff
0x246a:	mov	qword ptr [rsp + 0x30], rax
0x246f:	mov	rsi, rax
0x2472:	xor	eax, eax
0x2474:	jmp	0x248b


0x2333:	mov	rax, qword ptr [rsp + 0x28]
0x2338:	xor	ebx, ebx
0x233a:	add	rax, 1
0x233e:	sub	rax, r14
0x2341:	mov	qword ptr [rsp + 0x30], rax
0x2346:	cmp	byte ptr [rsp + 0x1e], 0
0x234b:	je	0x2396


0x2a0f:	xor	eax, eax
0x2a11:	mov	rdi, qword ptr [rbx + rax]
0x2a15:	call	0x5290


0x29ec:	xor	edi, edi
0x29ee:	call	0x2d50


0x1f1b:	jle	0x20a8


0x2088:	mov	byte ptr [rsp + 0x1e], 1
0x208d:	jmp	0x1e88


0x1ec0:	jle	0x2048


0x21d5:	cmp	byte ptr [rsp + 0x10], 0
0x21da:	jne	0x2461


0x2a11:	mov	rdi, qword ptr [rbx + rax]
0x2a15:	call	0x5290


0x248b:	cmp	ebp, edx
0x248d:	jg	0x2476


0x2396:	mov	rax, qword ptr [rsp + 0x30]
0x239b:	cmp	r12, rax
0x239e:	mov	rsi, rax
0x23a1:	cmova	r12, rax
0x23a5:	mov	rdi, r12
0x23a8:	call	0x54f0


0x234d:	or	rsi, 0xffffffffffffffff
0x2351:	mov	rdi, r13
0x2354:	call	0x52e0


0x20a8:	cmp	eax, 0xffffff7d
0x20ad:	jne	0x29e2


0x1f21:	cmp	eax, 0x65
0x1f24:	je	0x2098


0x1e88:	lea	rcx, [rip + 0x20ab71]
0x1e8f:	lea	rdx, [rip + 0x738a]
0x1e96:	xor	r8d, r8d
0x1e99:	mov	rsi, rbx
0x1e9c:	mov	edi, ebp
0x1e9e:	call	0x1af0


0x2048:	cmp	eax, 0x6f
0x204b:	jne	0x29e2


0x1ec6:	cmp	eax, 0x7a
0x1ec9:	je	0x2000


0x21e0:	sub	ebp, 1
0x21e3:	mov	rdx, qword ptr [rip + 0x20aea6]
0x21ea:	jne	0x2638


0x248f:	mov	rdi, rsi
0x2492:	call	0x6b80


0x2476:	mov	rdi, qword ptr [rbx + rdx*8]
0x247a:	mov	rcx, r8
0x247d:	add	rdx, 1
0x2481:	repne scasb	al, byte ptr [rdi]


0x20b3:	mov	rdi, qword ptr [rip + 0x20afce]
0x20ba:	mov	rcx, qword ptr [rip + 0x20af4f]
0x20c1:	lea	r8, [rip + 0x714c]
0x20c8:	lea	rdx, [rip + 0x70b0]
0x20cf:	lea	rsi, [rip + 0x702e]
0x20d6:	xor	r9d, r9d
0x20d9:	xor	eax, eax
0x20db:	call	0x6a20


0x29e2:	mov	edi, 1
0x29e7:	call	0x2d50


0x2098:	mov	byte ptr [rsp + 0x10], 1
0x209d:	jmp	0x1e88


0x1f2a:	cmp	eax, 0x69
0x1f2d:	jne	0x29e2


0x2051:	test	r15, r15
0x2054:	mov	rdx, qword ptr [rip + 0x20b045]
0x205b:	je	0x207a


0x2000:	mov	byte ptr [rsp + 0x1f], 0
0x2005:	jmp	0x1e88


0x1ecf:	add	eax, -0x80
0x1ed2:	jne	0x29e2


0x21f0:	mov	rbp, qword ptr [rbx]
0x21f3:	lea	rsi, [rip + 0x75b0]
0x21fa:	mov	qword ptr [rsp + 0x20], rdx
0x21ff:	mov	rdi, rbp
0x2202:	call	0x1c00


0x2638:	mov	esi, 2
0x263d:	mov	rdi, rdx
0x2640:	call	0x3210


0x2483:	not	rcx
0x2486:	lea	rsi, [rsi + rcx - 1]
0x248b:	cmp	ebp, edx
0x248d:	jg	0x2476


0x2481:	repne scasb	al, byte ptr [rdi]


0x1f33:	mov	r14, qword ptr [rip + 0x20b166]
0x1f3a:	mov	esi, 0x2d
0x1f3f:	mov	rdi, r14
0x1f42:	call	0x1b20


0x207a:	mov	r15, rdx
0x207d:	jmp	0x1e88


0x205d:	mov	rsi, rdx
0x2060:	mov	rdi, r15
0x2063:	mov	qword ptr [rsp + 0x30], rdx
0x2068:	call	0x1c00


0x1ed8:	test	r13, r13
0x1edb:	mov	rdx, qword ptr [rip + 0x20b1be]
0x1ee2:	je	0x1f01


0x1c00:	jmp	qword ptr [rip + 0x20b2d2]


0x1f01:	mov	r13, rdx
0x1f04:	jmp	0x1e88


0x1ee4:	mov	rsi, rdx
0x1ee7:	mov	rdi, r13
0x1eea:	mov	qword ptr [rsp + 0x30], rdx
0x1eef:	call	0x1c00




0x2645:	cmp	byte ptr [rsp + 0x1e], 0
0x264a:	jne	0x26ba


0x264c:	cmp	r12, -1
0x2650:	je	0x26ba


0x26ba:	movsx	eax, byte ptr [rsp + 0x1f]
0x26bf:	mov	rdi, qword ptr [rip + 0x20a9ca]
0x26c6:	lea	rsi, [rsp + 0x50]
0x26cb:	mov	dword ptr [rsp + 0x20], eax
0x26cf:	call	0x62e0


0x2652:	test	r12, r12
0x2655:	je	0x2235


0x2235:	or	rsi, 0xffffffffffffffff
0x2239:	mov	rdi, r13
0x223c:	call	0x52e0


0x265b:	lea	rdx, [rsp + 0x70]
0x2660:	xor	esi, esi
0x2662:	mov	edi, 1
0x2667:	call	0x1c70


0x266c:	test	eax, eax
0x266e:	jne	0x2235


0x2674:	mov	eax, dword ptr [rsp + 0x88]
0x267b:	and	eax, 0xd000
0x2680:	cmp	eax, 0x8000
0x2685:	jne	0x2235


0x268b:	xor	esi, esi
0x268d:	xor	edi, edi
0x268f:	mov	edx, 1
0x2694:	mov	rbx, qword ptr [rsp + 0xa0]
0x269c:	call	0x1b40


0x26a1:	test	rax, rax
0x26a4:	js	0x2235


0x26aa:	sub	rbx, rax
0x26ad:	cmp	rbx, 0x800000
0x26b4:	jg	0x2235


0x26d4:	test	rax, rax
0x26d7:	mov	rcx, rax
0x26da:	je	0x2b4c


0x2b4c:	lea	rsi, [rip + 0x7149]
0x2b53:	mov	edx, 5
0x2b58:	xor	edi, edi
0x2b5a:	call	0x1aa0


0x26e0:	mov	rbp, qword ptr [rsp + 0x50]
0x26e5:	test	rbp, rbp
0x26e8:	je	0x2706


0x2706:	add	rbp, rcx
0x2709:	mov	rdi, rcx
0x270c:	xor	eax, eax
0x270e:	mov	ebx, dword ptr [rsp + 0x20]
0x2712:	mov	qword ptr [rsp + 0x38], rcx
0x2717:	mov	qword ptr [rsp + 0x40], r12
0x271c:	jmp	0x2732


0x26ea:	movzx	ebx, byte ptr [rsp + 0x1f]
0x26ef:	cmp	bl, byte ptr [rax + rbp - 1]
0x26f3:	je	0x2706


0x2732:	cmp	rbp, rdi
0x2735:	lea	r12, [rax + 1]
0x2739:	ja	0x271e


0x26f5:	lea	rax, [rbp + 1]
0x26f9:	mov	qword ptr [rsp + 0x50], rax
0x26fe:	mov	byte ptr [rcx + rbp], bl
0x2701:	mov	rbp, qword ptr [rsp + 0x50]
0x2706:	add	rbp, rcx
0x2709:	mov	rdi, rcx
0x270c:	xor	eax, eax
0x270e:	mov	ebx, dword ptr [rsp + 0x20]
0x2712:	mov	qword ptr [rsp + 0x38], rcx
0x2717:	mov	qword ptr [rsp + 0x40], r12
0x271c:	jmp	0x2732


0x273b:	mov	edx, 8
0x2740:	mov	rbx, r12
0x2743:	mov	qword ptr [rsp + 0x30], rax
0x2748:	mov	rax, rdx
0x274b:	xor	esi, esi
0x274d:	mov	rcx, qword ptr [rsp + 0x38]
0x2752:	mul	rbx
0x2755:	mov	r12, qword ptr [rsp + 0x40]
0x275a:	jo	0x2b42


0x271e:	mov	rdx, rbp
0x2721:	mov	esi, ebx
0x2723:	sub	rdx, rdi
0x2726:	call	0x1bc0


0x2b42:	mov	esi, 1
0x2b47:	jmp	0x2760


0x2760:	test	rax, rax
0x2763:	js	0x2a00


0x1bc0:	jmp	qword ptr [rip + 0x20b2f2]


0x2a00:	call	0x6dd0


0x2769:	test	rsi, rsi
0x276c:	jne	0x2a00




0x2772:	lea	rdi, [rbx*8]
0x277a:	mov	qword ptr [rsp + 0x38], rcx
0x277f:	call	0x6b80


0x20e0:	xor	edi, edi
0x20e2:	call	0x1d70


0x2784:	mov	rcx, qword ptr [rsp + 0x38]
0x2789:	mov	rbx, rax
0x278c:	mov	qword ptr [rsp + 0x38], r15
0x2791:	mov	qword ptr [rsp + 0x48], r12
0x2796:	mov	qword ptr [rsp + 0x40], rbx
0x279b:	mov	r12d, dword ptr [rsp + 0x20]
0x27a0:	mov	qword ptr [rax], rcx
0x27a3:	mov	rax, qword ptr [rsp + 0x30]
0x27a8:	mov	rdi, rcx
0x27ab:	lea	rax, [rbx + rax*8]
0x27af:	mov	r15, rax
0x27b2:	jmp	0x27cd


0x27cd:	cmp	r15, rbx
0x27d0:	jne	0x27b4


0x27d2:	mov	r15, qword ptr [rsp + 0x38]
0x27d7:	mov	rbx, qword ptr [rsp + 0x40]
0x27dc:	mov	r12, qword ptr [rsp + 0x48]
0x27e1:	jmp	0x2346


0x27b4:	mov	rdx, rbp
0x27b7:	mov	esi, r12d
0x27ba:	add	rbx, 8
0x27be:	sub	rdx, rdi
0x27c1:	call	0x1bc0


0x2346:	cmp	byte ptr [rsp + 0x1e], 0
0x234b:	je	0x2396


0x2497:	xor	edx, edx
0x2499:	mov	qword ptr [rsp + 0x20], r14
0x249e:	mov	qword ptr [rsp + 0x38], r13
0x24a3:	mov	qword ptr [rsp + 0x40], r12
0x24a8:	mov	r13, rax
0x24ab:	mov	r12, rbx
0x24ae:	mov	r14, rdx
0x24b1:	movzx	ebx, byte ptr [rsp + 0x1f]
0x24b6:	jmp	0x24d2


0x24d2:	cmp	ebp, r14d
0x24d5:	jg	0x24b8


0x24d7:	mov	rax, qword ptr [rsp + 0x30]
0x24dc:	mov	rbx, r12
0x24df:	mov	rcx, r13
0x24e2:	mov	r14, qword ptr [rsp + 0x20]
0x24e7:	mov	r13, qword ptr [rsp + 0x38]
0x24ec:	mov	r12, qword ptr [rsp + 0x40]
0x24f1:	mov	qword ptr [rbx + rax*8], rcx
0x24f5:	jmp	0x2346


0x24b8:	mov	rsi, qword ptr [r12 + r14*8]
0x24bc:	mov	rdi, r13
0x24bf:	call	0x1a90


0x1a90:	jmp	qword ptr [rip + 0x20b38a]




0x2241:	test	rax, rax
0x2244:	mov	qword ptr [rsp + 0x20], rax
0x2249:	je	0x2367


0x2367:	mov	rdx, r13
0x236a:	mov	esi, 3
0x236f:	xor	edi, edi
0x2371:	call	0x50c0


0x224f:	movsx	eax, byte ptr [rsp + 0x1f]
0x2254:	cmp	r12, 0x400
0x225b:	mov	ebx, 0x400
0x2260:	cmovbe	rbx, r12
0x2264:	mov	esi, 0x18
0x2269:	xor	ebp, ebp
0x226b:	mov	rdi, rbx
0x226e:	mov	dword ptr [rsp + 0x30], eax
0x2272:	mov	rax, qword ptr [rip + 0x20ae17]
0x2279:	mov	qword ptr [rsp + 0x10], rax
0x227e:	call	0x6d50


0x2283:	mov	qword ptr [rsp + 0x40], r14
0x2288:	xor	r8d, r8d
0x228b:	mov	r14, rbx
0x228e:	mov	rbx, rax
0x2291:	cmp	r12, rbp
0x2294:	je	0x27e6


0x27e6:	test	r8, r8
0x27e9:	mov	r14, qword ptr [rsp + 0x40]
0x27ee:	mov	qword ptr [rsp + 0x38], rbx
0x27f3:	je	0x29f8


0x229a:	imul	r13, rbp, 0x18
0x229e:	mov	edx, dword ptr [rsp + 0x30]
0x22a2:	mov	rsi, qword ptr [rsp + 0x10]
0x22a7:	lea	rdi, [rbx + r13]
0x22ab:	call	0x3450


0x29f8:	mov	rbp, r12
0x29fb:	jmp	0x287c


0x27f9:	lea	r13, [rsp + 0x50]
0x27fe:	mov	rbp, r12
0x2801:	mov	rdi, r13
0x2804:	call	0x3440


0x287c:	mov	rax, qword ptr [rsp + 0x10]
0x2881:	test	byte ptr [rax], 0x20
0x2884:	jne	0x2b9c


0x288a:	cmp	r12, rbp
0x288d:	mov	ecx, 1
0x2892:	cmova	r12, rbp
0x2896:	xor	ebx, ebx
0x2898:	mov	qword ptr [rsp + 0x30], r12
0x289d:	jmp	0x250e


0x2b9c:	lea	rsi, [rip + 0x70f9]
0x2ba3:	mov	edx, 5
0x2ba8:	xor	edi, edi
0x2baa:	call	0x1aa0


0x250e:	mov	rdi, qword ptr [rip + 0x20ab7b]
0x2515:	mov	byte ptr [rsp + 0x10], cl
0x2519:	call	0x7780


0x251e:	test	eax, eax
0x2520:	movzx	ecx, byte ptr [rsp + 0x10]
0x2525:	jne	0x2b16


0x252b:	cmp	byte ptr [rsp + 0x1e], 0
0x2530:	je	0x2a9e


0x2b16:	lea	rsi, [rip + 0x717f]
0x2b1d:	mov	edx, 5
0x2b22:	xor	edi, edi
0x2b24:	call	0x1aa0


0x2a9e:	mov	rdx, qword ptr [rsp + 0x30]
0x2aa3:	mov	rdi, qword ptr [rsp + 0x20]
0x2aa8:	mov	rsi, r12
0x2aab:	mov	byte ptr [rsp + 0x10], cl
0x2aaf:	call	0x5520


0x2536:	test	r15, r15
0x2539:	je	0x255a


0x255a:	test	r12, r12
0x255d:	je	0x2436


0x253b:	mov	rdx, qword ptr [rip + 0x20ab46]
0x2542:	lea	rsi, [rip + 0x6d2c]
0x2549:	mov	rdi, r15
0x254c:	call	0x3290


0x2436:	xor	eax, eax
0x2438:	mov	rcx, qword ptr [rsp + 0x108]
0x2440:	xor	rcx, qword ptr fs:[0x28]
0x2449:	jne	0x29f3


0x2563:	cmp	qword ptr [rsp + 0x30], 0
0x2569:	je	0x2b78


0x244f:	add	rsp, 0x118
0x2456:	pop	rbx
0x2457:	pop	rbp
0x2458:	pop	r12
0x245a:	pop	r13
0x245c:	pop	r14
0x245e:	pop	r15
0x2460:	ret	


0x29f3:	call	0x1ad0


0x2b78:	lea	rsi, [rip + 0x66d1]
0x2b7f:	mov	edx, 5
0x2b84:	xor	edi, edi
0x2b86:	call	0x1aa0


0x256f:	cmp	byte ptr [rsp + 8], 0
0x2574:	je	0x2913


0x2913:	mov	rax, qword ptr [rsp + 0x30]
0x2918:	xor	r14d, r14d
0x291b:	mov	r15, qword ptr [rsp + 0x20]
0x2920:	lea	r13, [rax - 1]
0x2924:	jmp	0x2933


0x257a:	mov	r13, qword ptr [rsp + 0x28]
0x257f:	movsx	ebp, byte ptr [rsp + 0x1f]
0x2584:	xor	r15d, r15d
0x2587:	mov	rax, r12
0x258a:	lea	rbx, [rip + 0x6cd2]
0x2591:	mov	r12, r15
0x2594:	mov	r15, rax
0x2597:	sub	r13, r14
0x259a:	mov	rdi, qword ptr [rsp + 0x20]
0x259f:	mov	rsi, r13
0x25a2:	call	0x5330


0x2933:	mov	rsi, r13
0x2936:	mov	rdi, r15
0x2939:	call	0x5330


0x293e:	lea	rax, [rbx + rax*8]
0x2942:	mov	rcx, qword ptr [rip + 0x20a73f]
0x2949:	mov	esi, 1
0x294e:	mov	rdi, qword ptr [rax]
0x2951:	mov	rbp, qword ptr [rax + 8]
0x2955:	sub	rbp, rdi
0x2958:	mov	rdx, rbp
0x295b:	call	0x1c90


0x1c90:	jmp	qword ptr [rip + 0x20b28a]




0x25a7:	lea	rdx, [r14 + rax]
0x25ab:	mov	ecx, ebp
0x25ad:	xor	eax, eax
0x25af:	mov	rsi, rbx
0x25b2:	mov	edi, 1
0x25b7:	call	0x1cd0


0x25bc:	test	eax, eax
0x25be:	js	0x260c


0x260c:	lea	rsi, [rip + 0x6c56]
0x2613:	mov	edx, 5
0x2618:	xor	edi, edi
0x261a:	call	0x1aa0


0x25c0:	add	r12, 1
0x25c4:	cmp	r15, r12
0x25c7:	jne	0x259a


0x25c9:	jmp	0x2436


0x259a:	mov	rdi, qword ptr [rsp + 0x20]
0x259f:	mov	rsi, r13
0x25a2:	call	0x5330


0x2551:	test	rax, rax
0x2554:	je	0x28d5


0x28d5:	mov	rdx, r15
0x28d8:	mov	esi, 3
0x28dd:	xor	edi, edi
0x28df:	call	0x50c0


0x2ab4:	test	r15, r15
0x2ab7:	mov	r13, rax
0x2aba:	movzx	ecx, byte ptr [rsp + 0x10]
0x2abf:	jne	0x28ad


0x2ac5:	xor	r15d, r15d
0x2ac8:	test	cl, cl
0x2aca:	je	0x23ef


0x28ad:	mov	rdx, qword ptr [rip + 0x20a7d4]
0x28b4:	lea	rsi, [rip + 0x69ba]
0x28bb:	mov	rdi, r15
0x28be:	mov	byte ptr [rsp + 0x10], cl
0x28c2:	call	0x3290


0x23ef:	cmp	byte ptr [rsp + 8], 0
0x23f4:	je	0x25ce


0x2ad0:	mov	rbp, qword ptr [rsp + 0x30]
0x2ad5:	mov	r12, qword ptr [rsp + 0x38]
0x2ada:	jmp	0x2b0c


0x25ce:	xor	r14d, r14d
0x25d1:	jmp	0x25d7


0x23fa:	movsx	r15d, byte ptr [rsp + 0x1f]
0x2400:	xor	ebx, ebx
0x2402:	lea	rbp, [rip + 0x6e5a]
0x2409:	jmp	0x2431


0x2b0c:	cmp	rbp, r15
0x2b0f:	jne	0x2adc


0x25d7:	cmp	r14, r12
0x25da:	je	0x2436


0x2431:	cmp	rbx, r12
0x2434:	jne	0x240b


0x2b11:	jmp	0x2436


0x2adc:	imul	rbx, qword ptr [r13 + r15*8], 0x18
0x2ae2:	mov	rcx, qword ptr [rip + 0x20a59f]
0x2ae9:	mov	esi, 1
0x2aee:	add	rbx, r12
0x2af1:	mov	rdx, qword ptr [rbx + 8]
0x2af5:	mov	rdi, qword ptr [rbx + 0x10]
0x2af9:	call	0x1c90


0x25e0:	mov	rax, qword ptr [r13 + r14*8]
0x25e5:	mov	rcx, qword ptr [rip + 0x20aa9c]
0x25ec:	mov	esi, 1
0x25f1:	lea	rax, [rbx + rax*8]
0x25f5:	mov	rdi, qword ptr [rax]
0x25f8:	mov	rbp, qword ptr [rax + 8]
0x25fc:	sub	rbp, rdi
0x25ff:	mov	rdx, rbp
0x2602:	call	0x1c90


0x240b:	mov	rdx, qword ptr [r13 + rbx*8]
0x2410:	xor	eax, eax
0x2412:	mov	ecx, r15d
0x2415:	mov	rsi, rbp
0x2418:	mov	edi, 1
0x241d:	add	rdx, r14
0x2420:	call	0x1cd0


0x2425:	test	eax, eax
0x2427:	js	0x260c


0x242d:	add	rbx, 1
0x2431:	cmp	rbx, r12
0x2434:	jne	0x240b


0x28c7:	test	rax, rax
0x28ca:	movzx	ecx, byte ptr [rsp + 0x10]
0x28cf:	jne	0x2ac5


0x2809:	mov	qword ptr [rsp + 0x40], r15
0x280e:	mov	qword ptr [rsp + 0x48], r14
0x2813:	mov	r15, qword ptr [rsp + 0x10]
0x2818:	mov	r14d, dword ptr [rsp + 0x30]
0x281d:	jmp	0x282b


0x282b:	mov	rdi, qword ptr [rsp + 0x20]
0x2830:	mov	rsi, rbp
0x2833:	lea	rbx, [rbp + 1]
0x2837:	call	0x5330


0x283c:	cmp	r12, rax
0x283f:	mov	rdi, r13
0x2842:	jbe	0x2851


0x2851:	mov	edx, r14d
0x2854:	mov	rsi, r15
0x2857:	call	0x3450


0x2844:	imul	rax, rax, 0x18
0x2848:	mov	rcx, qword ptr [rsp + 0x38]
0x284d:	lea	rdi, [rcx + rax]
0x2851:	mov	edx, r14d
0x2854:	mov	rsi, r15
0x2857:	call	0x3450


0x285c:	test	rax, rax
0x285f:	jne	0x281f


0x2861:	test	rbp, rbp
0x2864:	mov	r15, qword ptr [rsp + 0x40]
0x2869:	mov	r14, qword ptr [rsp + 0x48]
0x286e:	je	0x2bc8


0x281f:	test	rbp, rbp
0x2822:	je	0x296a


0x2bc8:	lea	rsi, [rip + 0x666c]
0x2bcf:	mov	edx, 5
0x2bd4:	xor	edi, edi
0x2bd6:	call	0x1aa0


0x2874:	mov	rdi, r13
0x2877:	call	0x3570


0x296a:	mov	r15, qword ptr [rsp + 0x40]
0x296f:	mov	r14, qword ptr [rsp + 0x48]
0x2974:	mov	ebp, 1
0x2979:	jmp	0x2874


0x2828:	mov	rbp, rbx
0x282b:	mov	rdi, qword ptr [rsp + 0x20]
0x2830:	mov	rsi, rbp
0x2833:	lea	rbx, [rbp + 1]
0x2837:	call	0x5330


0x22b0:	test	rax, rax
0x22b3:	mov	r8, rax
0x22b6:	je	0x2904


0x2904:	mov	r14, qword ptr [rsp + 0x40]
0x2909:	mov	qword ptr [rsp + 0x38], rbx
0x290e:	jmp	0x287c


0x22bc:	add	rbp, 1
0x22c0:	cmp	rbp, r14
0x22c3:	jb	0x2291


0x2291:	cmp	r12, rbp
0x2294:	je	0x27e6


0x22c5:	mov	edx, 0x18
0x22ca:	add	r14, 0x400
0x22d1:	xor	esi, esi
0x22d3:	mov	rax, rdx
0x22d6:	mul	r14
0x22d9:	jo	0x2a05


0x2a05:	mov	esi, 1
0x2a0a:	jmp	0x22df


0x22df:	test	rax, rax
0x22e2:	mov	qword ptr [rsp + 0x38], r8
0x22e7:	js	0x2a00


0x22ed:	test	rsi, rsi
0x22f0:	jne	0x2a00


0x22f6:	imul	rsi, r14, 0x18
0x22fa:	mov	rdi, rbx
0x22fd:	call	0x6be0


0x2302:	lea	rdi, [rax + r13 + 0x18]
0x2307:	mov	edx, 0x6000
0x230c:	xor	esi, esi
0x230e:	mov	rbx, rax
0x2311:	call	0x1b80


0x2316:	mov	r8, qword ptr [rsp + 0x38]
0x231b:	jmp	0x2291


0x2359:	test	rax, rax
0x235c:	mov	qword ptr [rsp + 0x20], rax
0x2361:	jne	0x24fa


0x24fa:	movzx	ecx, byte ptr [rsp + 0x10]
0x24ff:	or	cl, byte ptr [rsp + 8]
0x2503:	jne	0x2536


0x2505:	mov	qword ptr [rsp + 0x38], 0
0x250e:	mov	rdi, qword ptr [rip + 0x20ab7b]
0x2515:	mov	byte ptr [rsp + 0x10], cl
0x2519:	call	0x7780


0x23ad:	mov	rdi, r13
0x23b0:	mov	rsi, rax
0x23b3:	call	0x52e0


0x23b8:	test	rax, rax
0x23bb:	mov	qword ptr [rsp + 0x20], rax
0x23c0:	je	0x2367


0x23c2:	movzx	ecx, byte ptr [rsp + 0x10]
0x23c7:	or	cl, byte ptr [rsp + 8]
0x23cb:	je	0x2505


0x23d1:	mov	rdx, qword ptr [rsp + 0x30]
0x23d6:	mov	rdi, qword ptr [rsp + 0x20]
0x23db:	mov	rsi, r12
0x23de:	call	0x5520


0x23e3:	test	r15, r15
0x23e6:	mov	r13, rax
0x23e9:	jne	0x28a2


0x28a2:	xor	ecx, ecx
0x28a4:	mov	qword ptr [rsp + 0x38], 0
0x28ad:	mov	rdx, qword ptr [rip + 0x20a7d4]
0x28b4:	lea	rsi, [rip + 0x69ba]
0x28bb:	mov	rdi, r15
0x28be:	mov	byte ptr [rsp + 0x10], cl
0x28c2:	call	0x3290


0x2bdb:	mov	esi, 0x4b
0x2be0:	mov	rdx, rax
0x2be3:	mov	edi, 1
0x2be8:	xor	eax, eax
0x2bea:	call	0x1cf0


0x2bef:	lea	rsi, [rip + 0x6b1a]
0x2bf6:	mov	edx, 5
0x2bfb:	xor	edi, edi
0x2bfd:	call	0x1aa0


0x2c02:	xor	esi, esi
0x2c04:	mov	rdx, rax
0x2c07:	mov	edi, 1
0x2c0c:	xor	eax, eax
0x2c0e:	call	0x1cf0


0x2c13:	lea	rsi, [rip + 0x65aa]
0x2c1a:	mov	edx, 5
0x2c1f:	xor	edi, edi
0x2c21:	call	0x1aa0


0x2c26:	xor	esi, esi
0x2c28:	mov	rdx, rax
0x2c2b:	mov	edi, 1
0x2c30:	xor	eax, eax
0x2c32:	call	0x1cf0


0x2c37:	nop	word ptr [rax + rax]


0x261f:	mov	rbx, rax
0x2622:	call	0x19b0


0x2627:	mov	esi, dword ptr [rax]
0x2629:	mov	rdx, rbx
0x262c:	mov	edi, 1
0x2631:	xor	eax, eax
0x2633:	call	0x1cf0


0x2b8b:	xor	esi, esi
0x2b8d:	mov	rdx, rax
0x2b90:	mov	edi, 1
0x2b95:	xor	eax, eax
0x2b97:	call	0x1cf0


0x2b29:	mov	rbx, rax
0x2b2c:	call	0x19b0


0x2b31:	mov	esi, dword ptr [rax]
0x2b33:	mov	rdx, rbx
0x2b36:	mov	edi, 1
0x2b3b:	xor	eax, eax
0x2b3d:	call	0x1cf0


0x2baf:	mov	rbx, rax
0x2bb2:	call	0x19b0


0x2bb7:	mov	esi, dword ptr [rax]
0x2bb9:	mov	rdx, rbx
0x2bbc:	mov	edi, 1
0x2bc1:	xor	eax, eax
0x2bc3:	call	0x1cf0


0x2b5f:	mov	rbx, rax
0x2b62:	call	0x19b0


0x2b67:	mov	esi, dword ptr [rax]
0x2b69:	mov	rdx, rbx
0x2b6c:	mov	edi, 1
0x2b71:	xor	eax, eax
0x2b73:	call	0x1cf0


0x29d4:	xor	esi, esi
0x29d6:	mov	rdx, rax
0x29d9:	xor	edi, edi
0x29db:	xor	eax, eax
0x29dd:	call	0x1cf0


0x202b:	test	eax, eax
0x202d:	jne	0x20e7


0x2033:	mov	rax, qword ptr [rsp + 0x50]
0x2038:	cmp	r12, rax
0x203b:	cmova	r12, rax
0x203f:	jmp	0x1e88


0x20e7:	sub	eax, 1
0x20ea:	je	0x1e88


0x20f0:	mov	rdi, qword ptr [rip + 0x20afa9]
0x20f7:	call	0x5290


0x63cf:	test	eax, eax
0x63d1:	jne	0x642b


0x63d3:	sub	rbx, 1
0x63d7:	cmp	rbx, rbp
0x63da:	ja	0x6460


0x642b:	mov	rdi, r12
0x642e:	xor	r12d, r12d
0x6431:	call	0x1dd0


0x63e0:	mov	rax, qword ptr [rsp + 8]
0x63e5:	mov	byte ptr [r12 + rbp], 0
0x63ea:	mov	qword ptr [rax], rbp
0x63ed:	nop	dword ptr [rax]
0x63f0:	mov	rcx, qword ptr [rsp + 0xa8]
0x63f8:	xor	rcx, qword ptr fs:[0x28]
0x6401:	mov	rax, r12
0x6404:	jne	0x64b3


0x6460:	lea	rsi, [rbp + 1]
0x6464:	mov	rdi, r12
0x6467:	call	0x1ca0


0x646c:	test	rax, rax
0x646f:	cmovne	r12, rax
0x6473:	mov	rax, qword ptr [rsp + 8]
0x6478:	mov	byte ptr [r12 + rbp], 0
0x647d:	mov	qword ptr [rax], rbp
0x6480:	jmp	0x63f0


0x1f47:	cmp	byte ptr [rsp + 8], 0
0x1f4c:	jne	0x2c13


0x1f52:	test	rax, rax
0x1f55:	je	0x2126


0x2126:	lea	rsi, [rip + 0x70b5]
0x212d:	mov	edx, 5
0x2132:	xor	edi, edi
0x2134:	call	0x1aa0


0x1f5b:	lea	rsi, [rip + 0x7280]
0x1f62:	xor	edi, edi
0x1f64:	mov	edx, 5
0x1f69:	mov	byte ptr [rax], 0
0x1f6c:	mov	qword ptr [rsp + 8], rax
0x1f71:	call	0x1aa0


0x1f76:	mov	rdi, qword ptr [rip + 0x20b123]
0x1f7d:	lea	rcx, [rip + 0x7d8c]
0x1f84:	xor	r9d, r9d
0x1f87:	mov	r8, rax
0x1f8a:	or	rdx, 0xffffffffffffffff
0x1f8e:	xor	esi, esi
0x1f90:	call	0x6f10


0x1f95:	mov	r10, qword ptr [rsp + 8]
0x1f9a:	lea	rsi, [rip + 0x7241]
0x1fa1:	xor	edi, edi
0x1fa3:	mov	edx, 5
0x1fa8:	mov	r14, rax
0x1fab:	mov	byte ptr [r10], 0x2d
0x1faf:	call	0x1aa0


0x1fb4:	mov	r10, qword ptr [rsp + 8]
0x1fb9:	lea	rcx, [rip + 0x7d50]
0x1fc0:	or	rdx, 0xffffffffffffffff
0x1fc4:	xor	r9d, r9d
0x1fc7:	xor	esi, esi
0x1fc9:	mov	r8, rax
0x1fcc:	lea	rdi, [r10 + 1]
0x1fd0:	call	0x6f10


0x1fd5:	cmp	r14, rax
0x1fd8:	mov	qword ptr [rsp + 0x28], rax
0x1fdd:	seta	dl
0x1fe0:	sub	rax, r14
0x1fe3:	add	rax, 1
0x1fe7:	sete	al
0x1fea:	cmp	dl, al
0x1fec:	jne	0x2154


0x1ff2:	mov	byte ptr [rsp + 8], 1
0x1ff7:	jmp	0x1e88


0x2154:	mov	rdi, qword ptr [rip + 0x20af45]
0x215b:	call	0x5290


0x2139:	lea	rcx, [rip + 0x7bd0]
0x2140:	mov	r8, rax
0x2143:	xor	r9d, r9d
0x2146:	or	rdx, 0xffffffffffffffff
0x214a:	xor	esi, esi
0x214c:	mov	rdi, r14
0x214f:	call	0x6f10


0x74a8:	test	rax, rax
0x74ab:	mov	rcx, qword ptr [rsp + 8]
0x74b0:	je	0x757c


0x757c:	mov	qword ptr [r14], rbx
0x757f:	or	ebp, 2
0x7582:	jmp	0x743d


0x74b6:	lea	eax, [r12 - 0x45]
0x74bb:	cmp	al, 0x2f
0x74bd:	ja	0x7510


0x74bf:	movabs	rdx, 0x814400308945
0x74c9:	bt	rdx, rax
0x74cd:	jae	0x7510


0x7510:	mov	edi, 1
0x7515:	mov	esi, 0x400
0x751a:	sub	r12d, 0x42
0x751e:	cmp	r12b, 0x35
0x7522:	ja	0x757c


0x74cf:	mov	esi, 0x30
0x74d4:	mov	rdi, r13
0x74d7:	mov	qword ptr [rsp + 8], rcx
0x74dc:	call	0x1b20


0x7524:	lea	rdx, [rip + 0x2c25]
0x752b:	movzx	r12d, r12b
0x752f:	movsxd	rax, dword ptr [rdx + r12*4]
0x7533:	add	rax, rdx
0x7536:	jmp	rax


0x74e1:	test	rax, rax
0x74e4:	mov	rcx, qword ptr [rsp + 8]
0x74e9:	je	0x7510


0x74eb:	movzx	eax, byte ptr [rcx + 1]
0x74ef:	cmp	al, 0x44
0x74f1:	je	0x74ff


0x74ff:	mov	edi, 2
0x7504:	mov	esi, 0x3e8
0x7509:	jmp	0x751a


0x74f3:	cmp	al, 0x69
0x74f5:	je	0x76c8


0x751a:	sub	r12d, 0x42
0x751e:	cmp	r12b, 0x35
0x7522:	ja	0x757c


0x76c8:	xor	edi, edi
0x76ca:	cmp	byte ptr [rcx + 2], 0x42
0x76ce:	mov	esi, 0x400
0x76d3:	sete	dil
0x76d7:	lea	edi, [rdi + rdi + 1]
0x76db:	jmp	0x751a


0x74fb:	cmp	al, 0x42
0x74fd:	jne	0x7510


0x7488:	test	rax, rax
0x748b:	mov	ebx, 1
0x7490:	mov	rcx, qword ptr [rsp + 8]
0x7495:	je	0x7438


0x7088:	test	rax, rax
0x708b:	mov	rcx, qword ptr [rsp + 8]
0x7090:	je	0x715c


0x715c:	mov	qword ptr [r14], rbx
0x715f:	or	ebp, 2
0x7162:	jmp	0x701d


0x7096:	lea	eax, [r12 - 0x45]
0x709b:	cmp	al, 0x2f
0x709d:	ja	0x70f0


0x709f:	movabs	rdx, 0x814400308945
0x70a9:	bt	rdx, rax
0x70ad:	jae	0x70f0


0x70f0:	mov	edi, 1
0x70f5:	mov	esi, 0x400
0x70fa:	sub	r12d, 0x42
0x70fe:	cmp	r12b, 0x35
0x7102:	ja	0x715c


0x70af:	mov	esi, 0x30
0x70b4:	mov	rdi, r13
0x70b7:	mov	qword ptr [rsp + 8], rcx
0x70bc:	call	0x1b20


0x7104:	lea	rdx, [rip + 0x2f5d]
0x710b:	movzx	r12d, r12b
0x710f:	movsxd	rax, dword ptr [rdx + r12*4]
0x7113:	add	rax, rdx
0x7116:	jmp	rax


0x70c1:	test	rax, rax
0x70c4:	mov	rcx, qword ptr [rsp + 8]
0x70c9:	je	0x70f0


0x70cb:	movzx	eax, byte ptr [rcx + 1]
0x70cf:	cmp	al, 0x44
0x70d1:	je	0x70df


0x70df:	mov	edi, 2
0x70e4:	mov	esi, 0x3e8
0x70e9:	jmp	0x70fa


0x70d3:	cmp	al, 0x69
0x70d5:	je	0x72a8


0x70fa:	sub	r12d, 0x42
0x70fe:	cmp	r12b, 0x35
0x7102:	ja	0x715c


0x72a8:	xor	edi, edi
0x72aa:	cmp	byte ptr [rcx + 2], 0x42
0x72ae:	mov	esi, 0x400
0x72b3:	sete	dil
0x72b7:	lea	edi, [rdi + rdi + 1]
0x72bb:	jmp	0x70fa


0x70db:	cmp	al, 0x42
0x70dd:	jne	0x70f0


0x7068:	test	rax, rax
0x706b:	mov	ebx, 1
0x7070:	mov	rcx, qword ptr [rsp + 8]
0x7075:	je	0x7018


0x2607:	cmp	rbp, rax
0x260a:	je	0x25d3


0x25d3:	add	r14, 1
0x25d7:	cmp	r14, r12
0x25da:	je	0x2436


0x2afe:	cmp	rax, qword ptr [rbx + 8]
0x2b02:	jne	0x260c


0x2b08:	add	r15, 1
0x2b0c:	cmp	rbp, r15
0x2b0f:	jne	0x2adc


0x2960:	cmp	rbp, rax
0x2963:	je	0x2926


0x2926:	add	r14, 1
0x292a:	cmp	r12, r14
0x292d:	je	0x2436


0x2965:	jmp	0x260c


0x24c4:	mov	qword ptr [r12 + r14*8], r13
0x24c8:	lea	r13, [rax + 1]
0x24cc:	mov	byte ptr [rax], bl
0x24ce:	add	r14, 1
0x24d2:	cmp	ebp, r14d
0x24d5:	jg	0x24b8


0x27c6:	lea	rdi, [rax + 1]
0x27ca:	mov	qword ptr [rbx], rdi
0x27cd:	cmp	r15, rbx
0x27d0:	jne	0x27b4


0x272b:	lea	rdi, [rax + 1]
0x272f:	mov	rax, r12
0x2732:	cmp	rbp, rdi
0x2735:	lea	r12, [rax + 1]
0x2739:	ja	0x271e


0x1ef4:	test	eax, eax
0x1ef6:	mov	rdx, qword ptr [rsp + 0x30]
0x1efb:	jne	0x2bef


0x206d:	test	eax, eax
0x206f:	mov	rdx, qword ptr [rsp + 0x30]
0x2074:	jne	0x2a7a


0x2a7a:	lea	rsi, [rip + 0x6c6f]
0x2a81:	mov	edx, 5
0x2a86:	xor	edi, edi
0x2a88:	call	0x1aa0


0x2a8d:	xor	esi, esi
0x2a8f:	mov	rdx, rax
0x2a92:	mov	edi, 1
0x2a97:	xor	eax, eax
0x2a99:	call	0x1cf0


0x2207:	test	eax, eax
0x2209:	mov	rdx, qword ptr [rsp + 0x20]
0x220e:	je	0x2638


0x2214:	test	r12, r12
0x2217:	jne	0x297e


0x221d:	mov	esi, 2
0x2222:	mov	rdi, rdx
0x2225:	call	0x3210


0x297e:	lea	rsi, [rip + 0x7320]
0x2985:	mov	rdi, rbp
0x2988:	call	0x3290


0x298d:	test	rax, rax
0x2990:	je	0x2a4b


0x2a4b:	mov	rdx, qword ptr [rbx]
0x2a4e:	mov	esi, 3
0x2a53:	xor	edi, edi
0x2a55:	call	0x50c0


0x2996:	mov	rdi, qword ptr [rip + 0x20a6f3]
0x299d:	mov	esi, 2
0x29a2:	call	0x3210


0x29a7:	cmp	byte ptr [rsp + 0x1e], 0
0x29ac:	jne	0x26ba


0x29b2:	cmp	r12, -1
0x29b6:	jne	0x265b


0x29bc:	jmp	0x26ba


0x222a:	cmp	byte ptr [rsp + 0x1e], 0
0x222f:	jne	0x26ba


0x5a99:	test	ebp, ebp
0x5a9b:	mov	dword ptr [rsp + 0x10], eax
0x5a9f:	lea	rcx, [r13 + r14]
0x5aa4:	mov	esi, ebp
0x5aa6:	je	0x5abc


0x5abc:	add	rbp, r14
0x5abf:	cmp	rbp, 0x7ff
0x5ac6:	ja	0x5a05


0x5aa8:	xor	eax, eax
0x5aaa:	mov	edx, eax
0x5aac:	add	eax, 1
0x5aaf:	movzx	edi, byte ptr [r12 + rdx]
0x5ab4:	cmp	eax, esi
0x5ab6:	mov	byte ptr [rcx + rdx], dil
0x5aba:	jb	0x5aaa


0x5acc:	call	0x1c30


0x5aaa:	mov	edx, eax
0x5aac:	add	eax, 1
0x5aaf:	movzx	edi, byte ptr [r12 + rdx]
0x5ab4:	cmp	eax, esi
0x5ab6:	mov	byte ptr [rcx + rdx], dil
0x5aba:	jb	0x5aaa


0x1c30:	jmp	qword ptr [rip + 0x20b2ba]




0x5ad1:	mov	dword ptr [rsp + 0x10], eax
0x5ad5:	mov	eax, 0x800
0x5ada:	mov	edx, 4
0x5adf:	sub	rax, rbp
0x5ae2:	lea	rcx, [r13 + rbp]
0x5ae7:	cmp	rax, 4
0x5aeb:	cmova	rax, rdx
0x5aef:	test	eax, eax
0x5af1:	mov	esi, eax
0x5af3:	je	0x5a05


0x5af9:	xor	eax, eax
0x5afb:	mov	edx, eax
0x5afd:	add	eax, 1
0x5b00:	movzx	edi, byte ptr [r12 + rdx]
0x5b05:	cmp	eax, esi
0x5b07:	mov	byte ptr [rcx + rdx], dil
0x5b0b:	jb	0x5afb


0x5afb:	mov	edx, eax
0x5afd:	add	eax, 1
0x5b00:	movzx	edi, byte ptr [r12 + rdx]
0x5b05:	cmp	eax, esi
0x5b07:	mov	byte ptr [rcx + rdx], dil
0x5b0b:	jb	0x5afb


0x5b0d:	jmp	0x5a05


0x2a5a:	mov	rbx, rax
0x2a5d:	call	0x19b0


0x2a62:	mov	esi, dword ptr [rax]
0x2a64:	lea	rdx, [rip + 0x678f]
0x2a6b:	mov	rcx, rbx
0x2a6e:	mov	edi, 1
0x2a73:	xor	eax, eax
0x2a75:	call	0x1cf0


0x28e4:	mov	rbx, rax
0x28e7:	call	0x19b0


0x28ec:	mov	esi, dword ptr [rax]
0x28ee:	lea	rdx, [rip + 0x6905]
0x28f5:	mov	rcx, rbx
0x28f8:	mov	edi, 1
0x28fd:	xor	eax, eax
0x28ff:	call	0x1cf0


0x2376:	mov	rbx, rax
0x2379:	call	0x19b0


0x237e:	mov	esi, dword ptr [rax]
0x2380:	lea	rdx, [rip + 0x6e73]
0x2387:	mov	rcx, rbx
0x238a:	mov	edi, 1
0x238f:	xor	eax, eax
0x2391:	call	0x1cf0


0x31ba:	mov	esi, dword ptr [rbx]
0x31bc:	lea	rdx, [rip + 0x6033]
0x31c3:	mov	rcx, rax
0x31c6:	mov	r8, rbp
0x31c9:	xor	edi, edi
0x31cb:	xor	eax, eax
0x31cd:	call	0x1cf0


0x5842:	jmp	0x5572


0x5708:	mov	rsi, qword ptr [rsp + 0x28]
0x570d:	mov	rdi, qword ptr [rsp + 8]
0x5712:	mov	r15, rax
0x5715:	mov	qword ptr [rsp + 0x30], r14
0x571a:	mov	qword ptr [rsp + 0x38], 0
0x5723:	call	0x8b80


0x5728:	test	r15, r15
0x572b:	mov	r9, rax
0x572e:	je	0x5810


0x5810:	mov	edi, 0x10
0x5815:	mov	qword ptr [rsp + 0x18], rax
0x581a:	call	0x6b80


0x5734:	test	r9, r9
0x5737:	je	0x57f0


0x57f0:	mov	edi, 0x10
0x57f5:	call	0x6b80


0x573d:	mov	r14, qword ptr [r9 + 8]
0x5741:	mov	rax, qword ptr [r15 + 8]
0x5745:	mov	qword ptr [r15 + 8], r14
0x5749:	mov	rsi, r15
0x574c:	mov	r14, qword ptr [rsp + 8]
0x5751:	mov	qword ptr [rsp + 0x18], r9
0x5756:	mov	qword ptr [r9 + 8], rax
0x575a:	mov	rdi, r14
0x575d:	call	0x8b20


0x57fa:	mov	r9, rax
0x57fd:	mov	qword ptr [rax + 8], r14
0x5801:	mov	qword ptr [rax], r14
0x5804:	jmp	0x5741


0x5741:	mov	rax, qword ptr [r15 + 8]
0x5745:	mov	qword ptr [r15 + 8], r14
0x5749:	mov	rsi, r15
0x574c:	mov	r14, qword ptr [rsp + 8]
0x5751:	mov	qword ptr [rsp + 0x18], r9
0x5756:	mov	qword ptr [r9 + 8], rax
0x575a:	mov	rdi, r14
0x575d:	call	0x8b20


0x581f:	mov	r9, qword ptr [rsp + 0x18]
0x5824:	mov	r15, rax
0x5827:	mov	qword ptr [rax + 8], rbp
0x582b:	mov	qword ptr [rax], rbp
0x582e:	jmp	0x5734


0x5762:	test	rax, rax
0x5765:	je	0x584c


0x576b:	mov	r9, qword ptr [rsp + 0x18]
0x5770:	mov	rdi, r14
0x5773:	mov	rsi, r9
0x5776:	call	0x8b20


0x577b:	test	rax, rax
0x577e:	je	0x584c


0x5784:	mov	rax, qword ptr [r15 + 8]
0x5788:	mov	qword ptr [rbx + rbp*8], rax
0x578c:	add	rbp, 1
0x5790:	cmp	r12, rbp
0x5793:	ja	0x56cf


0x4a3c:	add	rsp, 0x20
0x4a40:	mov	r11, qword ptr [rsp + 0x10]
0x4a45:	cmp	r11, rax
0x4a48:	ja	0x4ab1


0x4a4a:	lea	rsi, [rax + 1]
0x4a4e:	lea	rax, [rip + 0x2086ab]
0x4a55:	cmp	r12, rax
0x4a58:	mov	qword ptr [rbx], rsi
0x4a5b:	je	0x4a6f


0x4ab1:	mov	eax, dword ptr [rsp + 0x18]
0x4ab5:	mov	dword ptr [r13], eax
0x4ab9:	add	rsp, 0x28
0x4abd:	mov	rax, r12
0x4ac0:	pop	rbx
0x4ac1:	pop	rbp
0x4ac2:	pop	r12
0x4ac4:	pop	r13
0x4ac6:	pop	r14
0x4ac8:	pop	r15
0x4aca:	ret	


0x4a6f:	mov	rdi, rsi
0x4a72:	mov	qword ptr [rsp + 0x10], rsi
0x4a77:	call	0x6b80


0x4a5d:	mov	rdi, r12
0x4a60:	mov	qword ptr [rsp + 0x10], rsi
0x4a65:	call	0x1dd0


0x4a6a:	mov	rsi, qword ptr [rsp + 0x10]
0x4a6f:	mov	rdi, rsi
0x4a72:	mov	qword ptr [rsp + 0x10], rsi
0x4a77:	call	0x6b80


0x4a7c:	sub	rsp, 8
0x4a80:	mov	qword ptr [rbx + 8], rax
0x4a84:	mov	r8d, dword ptr [rbp]
0x4a88:	push	qword ptr [rbp + 0x30]
0x4a8b:	push	qword ptr [rbp + 0x28]
0x4a8e:	mov	rcx, r14
0x4a91:	push	r15
0x4a93:	mov	r9d, dword ptr [rsp + 0x3c]
0x4a98:	mov	rdi, rax
0x4a9b:	mov	rdx, qword ptr [rsp + 0x28]
0x4aa0:	mov	rsi, qword ptr [rsp + 0x30]
0x4aa5:	mov	r12, rax
0x4aa8:	call	0x3710


0x51c2:	mov	rdi, qword ptr [rsp + 0x38]
0x51c7:	xor	rdi, qword ptr fs:[0x28]
0x51d0:	jne	0x51dc


0x51d2:	add	rsp, 0x48
0x51d6:	ret	


0x51dc:	call	0x1ad0


0x4f0f:	mov	rcx, qword ptr [rsp + 0x38]
0x4f14:	xor	rcx, qword ptr fs:[0x28]
0x4f1d:	jne	0x4f29


0x4f1f:	add	rsp, 0x48
0x4f23:	ret	


0x4f29:	call	0x1ad0


0x4f9b:	mov	rdx, qword ptr [rsp + 0x38]
0x4fa0:	xor	rdx, qword ptr fs:[0x28]
0x4fa9:	jne	0x4fb5


0x4fab:	add	rsp, 0x48
0x4faf:	ret	


0x4fb5:	call	0x1ad0


0x512f:	mov	rcx, qword ptr [rsp + 0x38]
0x5134:	xor	rcx, qword ptr fs:[0x28]
0x513d:	jne	0x5149


0x513f:	add	rsp, 0x48
0x5143:	ret	


0x5149:	call	0x1ad0


0x505e:	mov	rsi, qword ptr [rsp + 0x38]
0x5063:	xor	rsi, qword ptr fs:[0x28]
0x506c:	jne	0x5073


0x506e:	add	rsp, 0x48
0x5072:	ret	


0x5073:	call	0x1ad0


0x4aad:	add	rsp, 0x20
0x4ab1:	mov	eax, dword ptr [rsp + 0x18]
0x4ab5:	mov	dword ptr [r13], eax
0x4ab9:	add	rsp, 0x28
0x4abd:	mov	rax, r12
0x4ac0:	pop	rbx
0x4ac1:	pop	rbp
0x4ac2:	pop	r12
0x4ac4:	pop	r13
0x4ac6:	pop	r14
0x4ac8:	pop	r15
0x4aca:	ret	


0x4cfc:	lea	rsi, [rax + 1]
0x4d00:	mov	qword ptr [rsp + 0x48], rax
0x4d05:	add	rsp, 0x20
0x4d09:	mov	rdi, rsi
0x4d0c:	mov	qword ptr [rsp + 0x18], rsi
0x4d11:	call	0x6b80


0x4d16:	mov	qword ptr [rsp + 0x10], rax
0x4d1b:	sub	rsp, 8
0x4d1f:	push	qword ptr [rbx + 0x30]
0x4d22:	push	qword ptr [rbx + 0x28]
0x4d25:	mov	r10, qword ptr [rsp + 0x38]
0x4d2a:	mov	r9d, ebp
0x4d2d:	mov	r8d, dword ptr [rbx]
0x4d30:	mov	rcx, r15
0x4d33:	mov	rdx, r14
0x4d36:	mov	rdi, rax
0x4d39:	push	r10
0x4d3b:	mov	rsi, qword ptr [rsp + 0x38]
0x4d40:	call	0x3710


0x4d45:	mov	eax, dword ptr [rsp + 0x2c]
0x4d49:	add	rsp, 0x20
0x4d4d:	test	r12, r12
0x4d50:	mov	dword ptr [r13], eax
0x4d54:	je	0x4d5f


0x4d5f:	mov	rax, qword ptr [rsp + 0x10]
0x4d64:	add	rsp, 0x38
0x4d68:	pop	rbx
0x4d69:	pop	rbp
0x4d6a:	pop	r12
0x4d6c:	pop	r13
0x4d6e:	pop	r14
0x4d70:	pop	r15
0x4d72:	ret	


0x4d56:	mov	r11, qword ptr [rsp + 0x28]
0x4d5b:	mov	qword ptr [r12], r11
0x4d5f:	mov	rax, qword ptr [rsp + 0x10]
0x4d64:	add	rsp, 0x38
0x4d68:	pop	rbx
0x4d69:	pop	rbp
0x4d6a:	pop	r12
0x4d6c:	pop	r13
0x4d6e:	pop	r14
0x4d70:	pop	r15
0x4d72:	ret	


0x4c71:	mov	dword ptr [rbp], r12d
0x4c75:	add	rsp, 0x38
0x4c79:	pop	rbx
0x4c7a:	pop	rbp
0x4c7b:	pop	r12
0x4c7d:	pop	r13
0x4c7f:	pop	r14
0x4c81:	pop	r15
0x4c83:	ret	


0x34c1:	mov	r8, qword ptr [r14]
0x34c4:	movzx	ecx, byte ptr [rsp]
0x34c8:	lea	rsi, [rax + rbx]
0x34cc:	mov	qword ptr [r14 + 0x10], rax
0x34d0:	mov	r13, rax
0x34d3:	movzx	edx, byte ptr [rsp + 0xf]
0x34d8:	lea	rbx, [rsi + 1]
0x34dc:	add	r8, rax
0x34df:	cmp	r12d, r15d
0x34e2:	mov	byte ptr [rsi], cl
0x34e4:	jne	0x348b


0x2160:	lea	rsi, [rip + 0x707b]
0x2167:	mov	edx, 5
0x216c:	xor	edi, edi
0x216e:	mov	rbp, rax
0x2171:	call	0x1aa0


0x2176:	mov	rbx, rax
0x2179:	call	0x19b0


0x217e:	mov	esi, dword ptr [rax]
0x2180:	lea	rdx, [rip + 0x706f]
0x2187:	mov	r8, rbp
0x218a:	mov	rcx, rbx
0x218d:	mov	edi, 1
0x2192:	xor	eax, eax
0x2194:	call	0x1cf0


0x20fc:	lea	rsi, [rip + 0x70fa]
0x2103:	mov	rbx, rax
0x2106:	mov	edx, 5
0x210b:	xor	edi, edi
0x210d:	call	0x1aa0


0x2112:	mov	rcx, rbx
0x2115:	mov	rdx, rax
0x2118:	xor	esi, esi
0x211a:	mov	edi, 1
0x211f:	xor	eax, eax
0x2121:	call	0x1cf0


0x2a1a:	lea	rsi, [rip + 0x6809]
0x2a21:	mov	rbx, rax
0x2a24:	mov	edx, 5
0x2a29:	xor	edi, edi
0x2a2b:	call	0x1aa0


0x2a30:	xor	edi, edi
0x2a32:	mov	rdx, rax
0x2a35:	mov	rcx, rbx
0x2a38:	xor	esi, esi
0x2a3a:	xor	eax, eax
0x2a3c:	call	0x1cf0


0x2a41:	mov	edi, 1
0x2a46:	call	0x2d50


0x6e82:	mov	esi, dword ptr [r14]
0x6e85:	mov	r8, rax
0x6e88:	mov	eax, 0
0x6e8d:	lea	rdx, [rip + 0x2362]
0x6e94:	mov	rcx, r13
0x6e97:	cmp	esi, 0x16
0x6e9a:	cmove	esi, eax
0x6e9d:	test	ebx, ebx
0x6e9f:	mov	eax, 1
0x6ea4:	cmove	ebx, eax
0x6ea7:	xor	eax, eax
0x6ea9:	mov	edi, ebx
0x6eab:	call	0x1cf0


0x6eb0:	mov	rbp, qword ptr [rsp]
0x6eb4:	mov	rdx, qword ptr [rsp + 8]
0x6eb9:	xor	rdx, qword ptr fs:[0x28]
0x6ec2:	mov	rax, rbp
0x6ec5:	jne	0x6f0b


0x5880:	mov	rbp, rax
0x5883:	call	0x19b0


0x5888:	cmp	dword ptr [rax], 0
0x588b:	mov	rbx, rax
0x588e:	mov	edx, 5
0x5893:	je	0x58bd


0x58bd:	lea	rsi, [rip + 0x43c4]
0x58c4:	xor	edi, edi
0x58c6:	call	0x1aa0


0x5895:	lea	rsi, [rip + 0x43fc]
0x589c:	xor	edi, edi
0x589e:	call	0x1aa0


0x58a3:	mov	edi, dword ptr [rip + 0x20776f]
0x58a9:	mov	esi, dword ptr [rbx]
0x58ab:	mov	rdx, rax
0x58ae:	mov	rcx, rbp
0x58b1:	xor	eax, eax
0x58b3:	call	0x1cf0


0x58cb:	jmp	0x58a3


0x5c72:	mov	rcx, qword ptr [r12]
0x5c76:	mov	rdx, rbp
0x5c79:	mov	rdi, rbx
0x5c7c:	mov	esi, 1
0x5c81:	call	0x1a50


0x90ad:	add	rbx, 1
0x90b1:	cmp	rbp, rbx
0x90b4:	jne	0x90a0


0x90a0:	mov	rdx, r15
0x90a3:	mov	rsi, r14
0x90a6:	mov	edi, r13d
0x90a9:	call	qword ptr [r12 + rbx*8]


0x85b8:	mov	rbx, qword ptr [rbx + 8]
0x85bc:	test	rbx, rbx
0x85bf:	jne	0x85b0


0x85c1:	mov	rax, qword ptr [r12 + 8]
0x85c6:	add	rbp, 0x10
0x85ca:	cmp	rax, rbp
0x85cd:	ja	0x8598


0x85b0:	mov	rdi, qword ptr [rbx]
0x85b3:	call	qword ptr [r12 + 0x40]


0x8512:	mov	rax, qword ptr [rbp + 0x40]
0x8516:	mov	rdx, qword ptr [rbx + 8]
0x851a:	mov	rcx, qword ptr [rbp + 0x48]
0x851e:	mov	qword ptr [rbx], 0
0x8525:	test	rdx, rdx
0x8528:	mov	qword ptr [rbx + 8], rcx
0x852c:	mov	qword ptr [rbp + 0x48], rbx
0x8530:	mov	rbx, rdx
0x8533:	jne	0x8508


0x8289:	test	al, al
0x828b:	je	0x82a4


0x828d:	mov	rbx, qword ptr [rbx + 8]
0x8291:	add	rbp, 1
0x8295:	test	rbx, rbx
0x8298:	jne	0x8280


0x8280:	mov	rdi, qword ptr [rbx]
0x8283:	mov	rsi, r13
0x8286:	call	r12


0x7b7e:	cmp	qword ptr [rbx + 0x10], rax
0x7b82:	jbe	0x7b8d


0x7b8d:	call	0x19a0


0x7b84:	shl	rax, 4
0x7b88:	add	rax, qword ptr [rbx]
0x7b8b:	pop	rbx
0x7b8c:	ret	


0x7df4:	cmp	qword ptr [rax], 0
0x7df8:	mov	rbx, rax
0x7dfb:	je	0x7e50


0x7e50:	mov	qword ptr [rax], r15
0x7e53:	add	qword ptr [rbp + 0x18], 1
0x7e58:	jmp	0x7e1d


0x7dfd:	mov	rax, qword ptr [rbp + 0x48]
0x7e01:	test	rax, rax
0x7e04:	je	0x7e60


0x7e1d:	mov	qword ptr [r12], 0
0x7e25:	sub	qword ptr [r13 + 0x18], 1
0x7e2a:	add	r12, 0x10
0x7e2e:	cmp	qword ptr [r13 + 8], r12
0x7e32:	ja	0x7d68


0x7e60:	mov	edi, 0x10
0x7e65:	call	0x1c40


0x7e06:	mov	rdx, qword ptr [rax + 8]
0x7e0a:	mov	qword ptr [rbp + 0x48], rdx
0x7e0e:	mov	rdx, qword ptr [rbx + 8]
0x7e12:	mov	qword ptr [rax], r15
0x7e15:	mov	qword ptr [rax + 8], rdx
0x7e19:	mov	qword ptr [rbx + 8], rax
0x7e1d:	mov	qword ptr [r12], 0
0x7e25:	sub	qword ptr [r13 + 0x18], 1
0x7e2a:	add	r12, 0x10
0x7e2e:	cmp	qword ptr [r13 + 8], r12
0x7e32:	ja	0x7d68


0x7e6a:	test	rax, rax
0x7e6d:	jne	0x7e0e


0x7e6f:	add	rsp, 8
0x7e73:	xor	eax, eax
0x7e75:	pop	rbx
0x7e76:	pop	rbp
0x7e77:	pop	r12
0x7e79:	pop	r13
0x7e7b:	pop	r14
0x7e7d:	pop	r15
0x7e7f:	ret	


0x7e0e:	mov	rdx, qword ptr [rbx + 8]
0x7e12:	mov	qword ptr [rax], r15
0x7e15:	mov	qword ptr [rax + 8], rdx
0x7e19:	mov	qword ptr [rbx + 8], rax
0x7e1d:	mov	qword ptr [r12], 0
0x7e25:	sub	qword ptr [r13 + 0x18], 1
0x7e2a:	add	r12, 0x10
0x7e2e:	cmp	qword ptr [r13 + 8], r12
0x7e32:	ja	0x7d68


0x7daa:	cmp	qword ptr [rax], 0
0x7dae:	mov	rdx, qword ptr [rbx + 8]
0x7db2:	jne	0x7d88


0x7db4:	mov	qword ptr [rax], r15
0x7db7:	add	qword ptr [rbp + 0x18], 1
0x7dbc:	test	rdx, rdx
0x7dbf:	mov	qword ptr [rbx], 0
0x7dc6:	mov	rax, qword ptr [rbp + 0x48]
0x7dca:	mov	qword ptr [rbx + 8], rax
0x7dce:	mov	qword ptr [rbp + 0x48], rbx
0x7dd2:	mov	rbx, rdx
0x7dd5:	jne	0x7d9c


0x7d88:	mov	rcx, qword ptr [rax + 8]
0x7d8c:	test	rdx, rdx
0x7d8f:	mov	qword ptr [rbx + 8], rcx
0x7d93:	mov	qword ptr [rax + 8], rbx
0x7d97:	mov	rbx, rdx
0x7d9a:	je	0x7dd7


0x7dd7:	mov	r15, qword ptr [r12]
0x7ddb:	test	r14b, r14b
0x7dde:	mov	qword ptr [r12 + 8], 0
0x7de7:	jne	0x7e2a


0x7bb9:	mov	qword ptr [r14], rax
0x7bbc:	mov	rsi, qword ptr [rax]
0x7bbf:	test	rsi, rsi
0x7bc2:	je	0x7cb0


0x7cb0:	xor	esi, esi
0x7cb2:	pop	rbx
0x7cb3:	mov	rax, rsi
0x7cb6:	pop	rbp
0x7cb7:	pop	r12
0x7cb9:	pop	r13
0x7cbb:	pop	r14
0x7cbd:	ret	


0x7bc8:	cmp	rsi, rbp
0x7bcb:	mov	rbx, rax
0x7bce:	je	0x7c63


0x7c63:	test	r13b, r13b
0x7c66:	je	0x7c4e


0x7bd4:	mov	rdi, rbp
0x7bd7:	call	qword ptr [r12 + 0x38]


0x7c4e:	pop	rbx
0x7c4f:	mov	rax, rsi
0x7c52:	pop	rbp
0x7c53:	pop	r12
0x7c55:	pop	r13
0x7c57:	pop	r14
0x7c59:	ret	


0x7c68:	mov	rax, qword ptr [rbx + 8]
0x7c6c:	test	rax, rax
0x7c6f:	je	0x7ca0


0x7ca0:	mov	qword ptr [rbx], 0
0x7ca7:	jmp	0x7c4e


0x7c71:	movdqu	xmm0, xmmword ptr [rax]
0x7c75:	movups	xmmword ptr [rbx], xmm0
0x7c78:	mov	qword ptr [rax], 0
0x7c7f:	mov	rdx, qword ptr [r12 + 0x48]
0x7c84:	mov	qword ptr [rax + 8], rdx
0x7c88:	mov	qword ptr [r12 + 0x48], rax
0x7c8d:	mov	rax, rsi
0x7c90:	pop	rbx
0x7c91:	pop	rbp
0x7c92:	pop	r12
0x7c94:	pop	r13
0x7c96:	pop	r14
0x7c98:	ret	


0x80bf:	mov	rsi, qword ptr [rax]
0x80c2:	test	rsi, rsi
0x80c5:	je	0x80ed


0x80ed:	xor	esi, esi
0x80ef:	pop	rbx
0x80f0:	mov	rax, rsi
0x80f3:	pop	rbp
0x80f4:	pop	r12
0x80f6:	ret	


0x80c7:	mov	rbx, rax
0x80ca:	jmp	0x80d3


0x80d3:	cmp	rsi, rbp
0x80d6:	je	0x80ef


0x80ef:	pop	rbx
0x80f0:	mov	rax, rsi
0x80f3:	pop	rbp
0x80f4:	pop	r12
0x80f6:	ret	


0x80d8:	mov	rdi, rbp
0x80db:	call	qword ptr [r12 + 0x38]


0x8171:	mov	rdx, rax
0x8174:	mov	rcx, rax
0x8177:	mov	rax, qword ptr [rdx]
0x817a:	mov	rdx, qword ptr [rdx + 8]
0x817e:	cmp	rax, rbx
0x8181:	je	0x8199


0x8199:	test	rdx, rdx
0x819c:	jne	0x81c8


0x819e:	mov	rdx, qword ptr [rbp + 8]
0x81a2:	jmp	0x81b0


0x81c8:	mov	rax, qword ptr [rdx]
0x81cb:	add	rsp, 8
0x81cf:	pop	rbx
0x81d0:	pop	rbp
0x81d1:	ret	


0x818d:	mov	rax, qword ptr [rdx]
0x8190:	mov	rdx, qword ptr [rdx + 8]
0x8194:	cmp	rax, rbx
0x8197:	jne	0x8188


0x81b0:	add	rcx, 0x10
0x81b4:	cmp	rdx, rcx
0x81b7:	ja	0x81a8


0x8188:	test	rdx, rdx
0x818b:	je	0x819e


0x81b9:	xor	eax, eax
0x81bb:	add	rsp, 8
0x81bf:	pop	rbx
0x81c0:	pop	rbp
0x81c1:	ret	


0x81a8:	mov	rax, qword ptr [rcx]
0x81ab:	test	rax, rax
0x81ae:	jne	0x81bb


0x81bb:	add	rsp, 8
0x81bf:	pop	rbx
0x81c0:	pop	rbp
0x81c1:	ret	


0x88c9:	test	rax, rax
0x88cc:	mov	rdx, rax
0x88cf:	je	0x8900


0x8900:	mov	rax, qword ptr [rbx + 0x18]
0x8904:	test	rax, rax
0x8907:	js	0x8980


0x88d1:	xor	eax, eax
0x88d3:	test	r13, r13
0x88d6:	je	0x88dc


0x8980:	mov	rdx, rax
0x8983:	pxor	xmm1, xmm1
0x8987:	and	eax, 1
0x898a:	shr	rdx, 1
0x898d:	or	rdx, rax
0x8990:	mov	rax, qword ptr [rbx + 0x10]
0x8994:	cvtsi2ss	xmm1, rdx
0x8999:	mov	rdx, qword ptr [rbx + 0x28]
0x899d:	test	rax, rax
0x89a0:	addss	xmm1, xmm1
0x89a4:	jns	0x8923


0x8909:	pxor	xmm1, xmm1
0x890d:	mov	rdx, qword ptr [rbx + 0x28]
0x8911:	cvtsi2ss	xmm1, rax
0x8916:	mov	rax, qword ptr [rbx + 0x10]
0x891a:	test	rax, rax
0x891d:	js	0x89aa


0x88dc:	mov	rcx, qword ptr [rsp + 8]
0x88e1:	xor	rcx, qword ptr fs:[0x28]
0x88ea:	jne	0x8b0f


0x88d8:	mov	qword ptr [r13], rdx
0x88dc:	mov	rcx, qword ptr [rsp + 8]
0x88e1:	xor	rcx, qword ptr fs:[0x28]
0x88ea:	jne	0x8b0f


0x89aa:	mov	rcx, rax
0x89ad:	pxor	xmm0, xmm0
0x89b1:	shr	rcx, 1
0x89b4:	and	eax, 1
0x89b7:	or	rcx, rax
0x89ba:	cvtsi2ss	xmm0, rcx
0x89bf:	addss	xmm0, xmm0
0x89c3:	jmp	0x892c


0x8923:	pxor	xmm0, xmm0
0x8927:	cvtsi2ss	xmm0, rax
0x892c:	mulss	xmm0, dword ptr [rdx + 8]
0x8931:	ucomiss	xmm1, xmm0
0x8934:	ja	0x89d0


0x88f0:	add	rsp, 0x18
0x88f4:	pop	rbx
0x88f5:	pop	rbp
0x88f6:	pop	r12
0x88f8:	pop	r13
0x88fa:	ret	


0x8b0f:	call	0x1ad0


0x892c:	mulss	xmm0, dword ptr [rdx + 8]
0x8931:	ucomiss	xmm1, xmm0
0x8934:	ja	0x89d0


0x893a:	mov	r12, qword ptr [rsp]
0x893e:	cmp	qword ptr [r12], 0
0x8943:	je	0x8a78


0x89d0:	lea	rdi, [rbx + 0x28]
0x89d4:	call	0x7cc0


0x8a78:	mov	qword ptr [r12], rbp
0x8a7c:	mov	eax, 1
0x8a81:	add	qword ptr [rbx + 0x20], 1
0x8a86:	add	qword ptr [rbx + 0x18], 1
0x8a8b:	jmp	0x88dc


0x8949:	mov	rax, qword ptr [rbx + 0x48]
0x894d:	test	rax, rax
0x8950:	je	0x8a90


0x8a90:	mov	edi, 0x10
0x8a95:	call	0x1c40


0x8956:	mov	rdx, qword ptr [rax + 8]
0x895a:	mov	qword ptr [rbx + 0x48], rdx
0x895e:	mov	rdx, qword ptr [r12 + 8]
0x8963:	mov	qword ptr [rax], rbp
0x8966:	mov	qword ptr [rax + 8], rdx
0x896a:	mov	qword ptr [r12 + 8], rax
0x896f:	mov	eax, 1
0x8974:	add	qword ptr [rbx + 0x20], 1
0x8979:	jmp	0x88dc


0x8a9a:	test	rax, rax
0x8a9d:	jne	0x895e


0x8aa3:	mov	eax, 0xffffffff
0x8aa8:	jmp	0x88dc


0x895e:	mov	rdx, qword ptr [r12 + 8]
0x8963:	mov	qword ptr [rax], rbp
0x8966:	mov	qword ptr [rax + 8], rdx
0x896a:	mov	qword ptr [r12 + 8], rax
0x896f:	mov	eax, 1
0x8974:	add	qword ptr [rbx + 0x20], 1
0x8979:	jmp	0x88dc


0x89d9:	mov	rax, qword ptr [rbx + 0x10]
0x89dd:	mov	rdx, qword ptr [rbx + 0x28]
0x89e1:	test	rax, rax
0x89e4:	movss	xmm2, dword ptr [rdx + 8]
0x89e9:	js	0x8ab0


0x8ab0:	mov	rcx, rax
0x8ab3:	pxor	xmm0, xmm0
0x8ab7:	shr	rcx, 1
0x8aba:	and	eax, 1
0x8abd:	or	rcx, rax
0x8ac0:	cvtsi2ss	xmm0, rcx
0x8ac5:	addss	xmm0, xmm0
0x8ac9:	jmp	0x89f8


0x89ef:	pxor	xmm0, xmm0
0x89f3:	cvtsi2ss	xmm0, rax
0x89f8:	mov	rax, qword ptr [rbx + 0x18]
0x89fc:	test	rax, rax
0x89ff:	js	0x8ad0


0x89f8:	mov	rax, qword ptr [rbx + 0x18]
0x89fc:	test	rax, rax
0x89ff:	js	0x8ad0


0x8ad0:	mov	rcx, rax
0x8ad3:	pxor	xmm1, xmm1
0x8ad7:	shr	rcx, 1
0x8ada:	and	eax, 1
0x8add:	or	rcx, rax
0x8ae0:	cvtsi2ss	xmm1, rcx
0x8ae5:	addss	xmm1, xmm1
0x8ae9:	jmp	0x8a0e


0x8a05:	pxor	xmm1, xmm1
0x8a09:	cvtsi2ss	xmm1, rax
0x8a0e:	movaps	xmm3, xmm2
0x8a11:	mulss	xmm3, xmm0
0x8a15:	ucomiss	xmm1, xmm3
0x8a18:	jbe	0x893a


0x8a0e:	movaps	xmm3, xmm2
0x8a11:	mulss	xmm3, xmm0
0x8a15:	ucomiss	xmm1, xmm3
0x8a18:	jbe	0x893a


0x8a1e:	cmp	byte ptr [rdx + 0x10], 0
0x8a22:	mulss	xmm0, dword ptr [rdx + 0xc]
0x8a27:	jne	0x8a2d


0x8a29:	mulss	xmm0, xmm2
0x8a2d:	ucomiss	xmm0, dword ptr [rip + 0x18a8]
0x8a34:	jae	0x8aa3


0x8a2d:	ucomiss	xmm0, dword ptr [rip + 0x18a8]
0x8a34:	jae	0x8aa3


0x8a36:	ucomiss	xmm0, dword ptr [rip + 0x18a3]
0x8a3d:	jae	0x8af0


0x8a43:	cvttss2si	rsi, xmm0
0x8a48:	mov	rdi, rbx
0x8a4b:	call	0x8650


0x8af0:	subss	xmm0, dword ptr [rip + 0x17e8]
0x8af8:	movabs	rax, 0x8000000000000000
0x8b02:	cvttss2si	rsi, xmm0
0x8b07:	xor	rsi, rax
0x8b0a:	jmp	0x8a48


0x8a48:	mov	rdi, rbx
0x8a4b:	call	0x8650


0x8a50:	test	al, al
0x8a52:	je	0x8aa3


0x8a54:	xor	ecx, ecx
0x8a56:	mov	rdx, r12
0x8a59:	mov	rsi, rbp
0x8a5c:	mov	rdi, rbx
0x8a5f:	call	0x7ba0


0x8b40:	cmp	eax, -1
0x8b43:	je	0x8b70


0x8b70:	xor	ebx, ebx
0x8b72:	jmp	0x8b4d


0x8b45:	test	eax, eax
0x8b47:	jne	0x8b4d


0x8b4d:	mov	rcx, qword ptr [rsp + 8]
0x8b52:	xor	rcx, qword ptr fs:[0x28]
0x8b5b:	mov	rax, rbx
0x8b5e:	jne	0x8b74


0x8b49:	mov	rbx, qword ptr [rsp]
0x8b4d:	mov	rcx, qword ptr [rsp + 8]
0x8b52:	xor	rcx, qword ptr fs:[0x28]
0x8b5b:	mov	rax, rbx
0x8b5e:	jne	0x8b74


0x8b60:	add	rsp, 0x10
0x8b64:	pop	rbx
0x8b65:	ret	


0x8b74:	call	0x1ad0


0x8a64:	test	rax, rax
0x8a67:	je	0x893a


0x8ba8:	test	rax, rax
0x8bab:	mov	rbp, rax
0x8bae:	je	0x8bbf


0x8bbf:	mov	rcx, qword ptr [rsp + 8]
0x8bc4:	xor	rcx, qword ptr fs:[0x28]
0x8bcd:	mov	rax, rbp
0x8bd0:	jne	0x8d7e


0x8bb0:	mov	rax, qword ptr [rsp]
0x8bb4:	sub	qword ptr [rbx + 0x20], 1
0x8bb9:	cmp	qword ptr [rax], 0
0x8bbd:	je	0x8be0


0x8bd6:	add	rsp, 0x10
0x8bda:	pop	rbx
0x8bdb:	pop	rbp
0x8bdc:	pop	r12
0x8bde:	ret	


0x8d7e:	call	0x1ad0


0x8be0:	mov	rax, qword ptr [rbx + 0x18]
0x8be4:	sub	rax, 1
0x8be8:	test	rax, rax
0x8beb:	mov	qword ptr [rbx + 0x18], rax
0x8bef:	js	0x8cf0


0x8cf0:	mov	rdx, rax
0x8cf3:	pxor	xmm0, xmm0
0x8cf7:	shr	rdx, 1
0x8cfa:	and	eax, 1
0x8cfd:	or	rdx, rax
0x8d00:	cvtsi2ss	xmm0, rdx
0x8d05:	addss	xmm0, xmm0
0x8d09:	jmp	0x8bfe


0x8bf5:	pxor	xmm0, xmm0
0x8bf9:	cvtsi2ss	xmm0, rax
0x8bfe:	mov	rax, qword ptr [rbx + 0x10]
0x8c02:	mov	rdx, qword ptr [rbx + 0x28]
0x8c06:	test	rax, rax
0x8c09:	js	0x8cd0


0x8bfe:	mov	rax, qword ptr [rbx + 0x10]
0x8c02:	mov	rdx, qword ptr [rbx + 0x28]
0x8c06:	test	rax, rax
0x8c09:	js	0x8cd0


0x8cd0:	mov	rcx, rax
0x8cd3:	pxor	xmm1, xmm1
0x8cd7:	shr	rcx, 1
0x8cda:	and	eax, 1
0x8cdd:	or	rcx, rax
0x8ce0:	cvtsi2ss	xmm1, rcx
0x8ce5:	addss	xmm1, xmm1
0x8ce9:	jmp	0x8c18


0x8c0f:	pxor	xmm1, xmm1
0x8c13:	cvtsi2ss	xmm1, rax
0x8c18:	mulss	xmm1, dword ptr [rdx]
0x8c1c:	ucomiss	xmm1, xmm0
0x8c1f:	jbe	0x8bbf


0x8c18:	mulss	xmm1, dword ptr [rdx]
0x8c1c:	ucomiss	xmm1, xmm0
0x8c1f:	jbe	0x8bbf


0x8c21:	lea	rdi, [rbx + 0x28]
0x8c25:	call	0x7cc0


0x8c2a:	mov	rax, qword ptr [rbx + 0x10]
0x8c2e:	mov	rdx, qword ptr [rbx + 0x28]
0x8c32:	test	rax, rax
0x8c35:	js	0x8d60


0x8d60:	mov	rcx, rax
0x8d63:	pxor	xmm0, xmm0
0x8d67:	shr	rcx, 1
0x8d6a:	and	eax, 1
0x8d6d:	or	rcx, rax
0x8d70:	cvtsi2ss	xmm0, rcx
0x8d75:	addss	xmm0, xmm0
0x8d79:	jmp	0x8c44


0x8c3b:	pxor	xmm0, xmm0
0x8c3f:	cvtsi2ss	xmm0, rax
0x8c44:	mov	rax, qword ptr [rbx + 0x18]
0x8c48:	test	rax, rax
0x8c4b:	js	0x8d40


0x8c44:	mov	rax, qword ptr [rbx + 0x18]
0x8c48:	test	rax, rax
0x8c4b:	js	0x8d40


0x8d40:	mov	rcx, rax
0x8d43:	pxor	xmm1, xmm1
0x8d47:	shr	rcx, 1
0x8d4a:	and	eax, 1
0x8d4d:	or	rcx, rax
0x8d50:	cvtsi2ss	xmm1, rcx
0x8d55:	addss	xmm1, xmm1
0x8d59:	jmp	0x8c5a


0x8c51:	pxor	xmm1, xmm1
0x8c55:	cvtsi2ss	xmm1, rax
0x8c5a:	movss	xmm2, dword ptr [rdx]
0x8c5e:	mulss	xmm2, xmm0
0x8c62:	ucomiss	xmm2, xmm1
0x8c65:	jbe	0x8bbf


0x8c5a:	movss	xmm2, dword ptr [rdx]
0x8c5e:	mulss	xmm2, xmm0
0x8c62:	ucomiss	xmm2, xmm1
0x8c65:	jbe	0x8bbf


0x8c6b:	cmp	byte ptr [rdx + 0x10], 0
0x8c6f:	mulss	xmm0, dword ptr [rdx + 4]
0x8c74:	je	0x8d30


0x8d30:	mulss	xmm0, dword ptr [rdx + 8]
0x8d35:	jmp	0x8c7a


0x8c7a:	ucomiss	xmm0, dword ptr [rip + 0x165f]
0x8c81:	jae	0x8d10


0x8c87:	cvttss2si	rsi, xmm0
0x8c8c:	mov	rdi, rbx
0x8c8f:	call	0x8650


0x8d10:	subss	xmm0, dword ptr [rip + 0x15c8]
0x8d18:	movabs	rax, 0x8000000000000000
0x8d22:	cvttss2si	rsi, xmm0
0x8d27:	xor	rsi, rax
0x8d2a:	jmp	0x8c8c


0x8c8c:	mov	rdi, rbx
0x8c8f:	call	0x8650


0x8c94:	test	al, al
0x8c96:	jne	0x8bbf


0x8c9c:	mov	rdi, qword ptr [rbx + 0x48]
0x8ca0:	test	rdi, rdi
0x8ca3:	je	0x8cb9


0x8cb9:	mov	qword ptr [rbx + 0x48], 0
0x8cc1:	jmp	0x8bbf


0x8cb1:	test	r12, r12
0x8cb4:	mov	rdi, r12
0x8cb7:	jne	0x8ca8


0x8ca8:	mov	r12, qword ptr [rdi + 8]
0x8cac:	call	0x1dd0


0x80e0:	test	al, al
0x80e2:	jne	0x8100


0x80e4:	mov	rbx, qword ptr [rbx + 8]
0x80e8:	test	rbx, rbx
0x80eb:	jne	0x80d0


0x8100:	mov	rsi, qword ptr [rbx]
0x8103:	pop	rbx
0x8104:	pop	rbp
0x8105:	mov	rax, rsi
0x8108:	pop	r12
0x810a:	ret	


0x80d0:	mov	rsi, qword ptr [rbx]
0x80d3:	cmp	rsi, rbp
0x80d6:	je	0x80ef


0x7bdc:	test	al, al
0x7bde:	jne	0x7c60


0x7be4:	mov	rax, qword ptr [rbx + 8]
0x7be8:	test	rax, rax
0x7beb:	je	0x7cb0


0x7c60:	mov	rsi, qword ptr [rbx]
0x7c63:	test	r13b, r13b
0x7c66:	je	0x7c4e


0x7bf1:	mov	rsi, qword ptr [rax]
0x7bf4:	cmp	rbp, rsi
0x7bf7:	jne	0x7c19


0x7bf9:	jmp	0x7c2c


0x7c19:	mov	rdi, rbp
0x7c1c:	call	qword ptr [r12 + 0x38]


0x7c2c:	test	r13b, r13b
0x7c2f:	je	0x7c4e


0x7c31:	mov	rdx, qword ptr [rax + 8]
0x7c35:	mov	qword ptr [rbx + 8], rdx
0x7c39:	mov	qword ptr [rax], 0
0x7c40:	mov	rdx, qword ptr [r12 + 0x48]
0x7c45:	mov	qword ptr [rax + 8], rdx
0x7c49:	mov	qword ptr [r12 + 0x48], rax
0x7c4e:	pop	rbx
0x7c4f:	mov	rax, rsi
0x7c52:	pop	rbp
0x7c53:	pop	r12
0x7c55:	pop	r13
0x7c57:	pop	r14
0x7c59:	ret	


0x7c21:	test	al, al
0x7c23:	je	0x7c00


0x7c00:	mov	rbx, qword ptr [rbx + 8]
0x7c04:	mov	rax, qword ptr [rbx + 8]
0x7c08:	test	rax, rax
0x7c0b:	je	0x7cb0


0x7c25:	mov	rax, qword ptr [rbx + 8]
0x7c29:	mov	rsi, qword ptr [rax]
0x7c2c:	test	r13b, r13b
0x7c2f:	je	0x7c4e


0x7c11:	mov	rsi, qword ptr [rax]
0x7c14:	cmp	rsi, rbp
0x7c17:	je	0x7c2c






0x67a0:	mov	r13, qword ptr [rbx + 0x10]
0x67a4:	mov	r12, qword ptr [rbx + 8]
0x67a8:	lea	rsi, [rip + 0x3546]
0x67af:	mov	rbx, qword ptr [rbx]
0x67b2:	mov	edx, 5
0x67b7:	xor	edi, edi
0x67b9:	call	0x1aa0


0x68e0:	mov	r9, qword ptr [rbx + 0x10]
0x68e4:	mov	r13, qword ptr [rbx + 0x30]
0x68e8:	lea	rsi, [rip + 0x35a1]
0x68ef:	mov	r12, qword ptr [rbx + 0x28]
0x68f3:	mov	r15, qword ptr [rbx + 0x20]
0x68f7:	mov	edx, 5
0x68fc:	mov	r14, qword ptr [rbx + 0x18]
0x6900:	mov	r8, qword ptr [rbx + 8]
0x6904:	xor	edi, edi
0x6906:	mov	qword ptr [rsp + 8], r9
0x690b:	mov	rbx, qword ptr [rbx]
0x690e:	mov	qword ptr [rsp], r8
0x6912:	call	0x1aa0


0x66c0:	mov	r10, qword ptr [rbx + 0x40]
0x66c4:	mov	r9, qword ptr [rbx + 0x38]
0x66c8:	lea	rsi, [rip + 0x3821]
0x66cf:	mov	rax, qword ptr [rbx + 0x10]
0x66d3:	mov	r8, qword ptr [rbx + 8]
0x66d7:	mov	edx, 5
0x66dc:	mov	r13, qword ptr [rbx + 0x30]
0x66e0:	mov	r12, qword ptr [rbx + 0x28]
0x66e4:	mov	r15, qword ptr [rbx + 0x20]
0x66e8:	mov	r14, qword ptr [rbx + 0x18]
0x66ec:	mov	rbx, qword ptr [rbx]
0x66ef:	mov	qword ptr [rsp + 0x18], r10
0x66f4:	mov	qword ptr [rsp + 0x10], r9
0x66f9:	mov	qword ptr [rsp], rax
0x66fd:	mov	qword ptr [rsp + 8], r8
0x6702:	xor	edi, edi
0x6704:	call	0x1aa0


0x6686:	add	rsp, 0x28
0x668a:	pop	rbx
0x668b:	pop	rbp
0x668c:	pop	r12
0x668e:	pop	r13
0x6690:	pop	r14
0x6692:	pop	r15
0x6694:	ret	


0x6848:	mov	r15, qword ptr [rbx + 0x20]
0x684c:	lea	rsi, [rip + 0x35ed]
0x6853:	mov	edx, 5
0x6858:	xor	edi, edi
0x685a:	mov	r14, qword ptr [rbx + 0x18]
0x685e:	mov	r13, qword ptr [rbx + 0x10]
0x6862:	mov	r12, qword ptr [rbx + 8]
0x6866:	mov	rbx, qword ptr [rbx]
0x6869:	call	0x1aa0


0x67f0:	lea	rsi, [rip + 0x3629]
0x67f7:	mov	edx, 5
0x67fc:	xor	edi, edi
0x67fe:	mov	r14, qword ptr [rbx + 0x18]
0x6802:	mov	r13, qword ptr [rbx + 0x10]
0x6806:	mov	r12, qword ptr [rbx + 8]
0x680a:	mov	rbx, qword ptr [rbx]
0x680d:	call	0x1aa0


0x6610:	mov	r9, qword ptr [rbx + 0x38]
0x6614:	mov	rax, qword ptr [rbx + 0x10]
0x6618:	lea	rsi, [rip + 0x38a1]
0x661f:	mov	r8, qword ptr [rbx + 8]
0x6623:	mov	edx, 5
0x6628:	xor	edi, edi
0x662a:	mov	r13, qword ptr [rbx + 0x30]
0x662e:	mov	r12, qword ptr [rbx + 0x28]
0x6632:	mov	qword ptr [rsp + 0x10], r9
0x6637:	mov	r15, qword ptr [rbx + 0x20]
0x663b:	mov	r14, qword ptr [rbx + 0x18]
0x663f:	mov	qword ptr [rsp], rax
0x6643:	mov	qword ptr [rsp + 8], r8
0x6648:	mov	rbx, qword ptr [rbx]
0x664b:	call	0x1aa0


0x6758:	mov	r12, qword ptr [rbx + 8]
0x675c:	lea	rsi, [rip + 0x357b]
0x6763:	mov	rbx, qword ptr [rbx]
0x6766:	mov	edx, 5
0x676b:	xor	edi, edi
0x676d:	call	0x1aa0


0x6718:	mov	rbx, qword ptr [rbx]
0x671b:	lea	rsi, [rip + 0x35ac]
0x6722:	mov	edx, 5
0x6727:	xor	edi, edi
0x6729:	call	0x1aa0


0x6878:	mov	r8, qword ptr [rbx + 8]
0x687c:	mov	r12, qword ptr [rbx + 0x28]
0x6880:	lea	rsi, [rip + 0x35e1]
0x6887:	mov	r15, qword ptr [rbx + 0x20]
0x688b:	mov	r14, qword ptr [rbx + 0x18]
0x688f:	mov	edx, 5
0x6894:	mov	r13, qword ptr [rbx + 0x10]
0x6898:	xor	edi, edi
0x689a:	mov	rbx, qword ptr [rbx]
0x689d:	mov	qword ptr [rsp], r8
0x68a1:	call	0x1aa0


0x68a6:	sub	rsp, 8
0x68aa:	mov	r9, r13
0x68ad:	push	r12
0x68af:	push	r15
0x68b1:	push	r14
0x68b3:	mov	r8, qword ptr [rsp + 0x20]
0x68b8:	mov	rcx, rbx
0x68bb:	mov	rdx, rax
0x68be:	mov	rdi, rbp
0x68c1:	mov	esi, 1
0x68c6:	xor	eax, eax
0x68c8:	call	0x1d90


0x68cd:	add	rsp, 0x20
0x68d1:	add	rsp, 0x28
0x68d5:	pop	rbx
0x68d6:	pop	rbp
0x68d7:	pop	r12
0x68d9:	pop	r13
0x68db:	pop	r14
0x68dd:	pop	r15
0x68df:	ret	


0x672e:	add	rsp, 0x28
0x6732:	mov	rcx, rbx
0x6735:	mov	rdi, rbp
0x6738:	pop	rbx
0x6739:	pop	rbp
0x673a:	pop	r12
0x673c:	pop	r13
0x673e:	pop	r14
0x6740:	pop	r15
0x6742:	mov	rdx, rax
0x6745:	mov	esi, 1
0x674a:	xor	eax, eax
0x674c:	jmp	0x1d90


0x6772:	add	rsp, 0x28
0x6776:	mov	r8, r12
0x6779:	mov	rcx, rbx
0x677c:	mov	rdi, rbp
0x677f:	mov	rdx, rax
0x6782:	mov	esi, 1
0x6787:	pop	rbx
0x6788:	pop	rbp
0x6789:	pop	r12
0x678b:	pop	r13
0x678d:	pop	r14
0x678f:	pop	r15
0x6791:	xor	eax, eax
0x6793:	jmp	0x1d90


0x6650:	sub	rsp, 8
0x6654:	mov	r9, qword ptr [rsp + 0x18]
0x6659:	mov	rdx, rax
0x665c:	mov	rcx, rbx
0x665f:	mov	esi, 1
0x6664:	mov	rdi, rbp
0x6667:	xor	eax, eax
0x6669:	push	r9
0x666b:	push	r13
0x666d:	push	r12
0x666f:	push	r15
0x6671:	push	r14
0x6673:	mov	r9, qword ptr [rsp + 0x30]
0x6678:	mov	r8, qword ptr [rsp + 0x38]
0x667d:	call	0x1d90


0x6812:	sub	rsp, 8
0x6816:	push	r14
0x6818:	mov	rdx, rax
0x681b:	mov	r9, r13
0x681e:	mov	r8, r12
0x6821:	mov	rcx, rbx
0x6824:	mov	rdi, rbp
0x6827:	mov	esi, 1
0x682c:	xor	eax, eax
0x682e:	call	0x1d90


0x6833:	pop	rax
0x6834:	pop	rdx
0x6835:	add	rsp, 0x28
0x6839:	pop	rbx
0x683a:	pop	rbp
0x683b:	pop	r12
0x683d:	pop	r13
0x683f:	pop	r14
0x6841:	pop	r15
0x6843:	ret	


0x686e:	push	r15
0x6870:	jmp	0x6816


0x6816:	push	r14
0x6818:	mov	rdx, rax
0x681b:	mov	r9, r13
0x681e:	mov	r8, r12
0x6821:	mov	rcx, rbx
0x6824:	mov	rdi, rbp
0x6827:	mov	esi, 1
0x682c:	xor	eax, eax
0x682e:	call	0x1d90


0x6917:	push	r13
0x6919:	push	r12
0x691b:	push	r15
0x691d:	push	r14
0x691f:	mov	r9, qword ptr [rsp + 0x28]
0x6924:	jmp	0x68b3


0x68b3:	mov	r8, qword ptr [rsp + 0x20]
0x68b8:	mov	rcx, rbx
0x68bb:	mov	rdx, rax
0x68be:	mov	rdi, rbp
0x68c1:	mov	esi, 1
0x68c6:	xor	eax, eax
0x68c8:	call	0x1d90


0x67be:	add	rsp, 0x28
0x67c2:	mov	r9, r13
0x67c5:	mov	r8, r12
0x67c8:	mov	rcx, rbx
0x67cb:	mov	rdi, rbp
0x67ce:	mov	rdx, rax
0x67d1:	pop	rbx
0x67d2:	pop	rbp
0x67d3:	pop	r12
0x67d5:	pop	r13
0x67d7:	pop	r14
0x67d9:	pop	r15
0x67db:	mov	esi, 1
0x67e0:	xor	eax, eax
0x67e2:	jmp	0x1d90


0x42b0:	sub	rsp, 8
0x42b4:	mov	rcx, rbp
0x42b7:	mov	rsi, r13
0x42ba:	push	qword ptr [rsp + 0x68]
0x42be:	push	qword ptr [rsp + 0x78]
0x42c2:	mov	rdi, r14
0x42c5:	push	0
0x42c7:	mov	r9d, dword ptr [rsp + 0x98]
0x42cf:	mov	r8d, dword ptr [rsp + 0x28]
0x42d4:	mov	rdx, qword ptr [rsp + 0x30]
0x42d9:	and	r9d, 0xfffffffd
0x42dd:	call	0x3710


0x42e2:	add	rsp, 0x20
0x42e6:	mov	r15, rax
0x42e9:	mov	rbx, qword ptr [rsp + 0xa8]
0x42f1:	xor	rbx, qword ptr fs:[0x28]
0x42fa:	mov	rax, r15
0x42fd:	jne	0x4903


0x4303:	add	rsp, 0xb8
0x430a:	pop	rbx
0x430b:	pop	rbp
0x430c:	pop	r12
0x430e:	pop	r13
0x4310:	pop	r14
0x4312:	pop	r15
0x4314:	ret	


0x4903:	call	0x1ad0


0x48ad:	sub	rsp, 8
0x48b1:	mov	r8d, 5
0x48b7:	mov	rcx, r11
0x48ba:	push	qword ptr [rsp + 0x68]
0x48be:	push	qword ptr [rsp + 0x78]
0x48c2:	mov	rdi, r14
0x48c5:	push	qword ptr [rsp + 0x38]
0x48c9:	mov	r9d, dword ptr [rsp + 0x98]
0x48d1:	mov	rdx, qword ptr [rsp + 0x30]
0x48d6:	mov	rsi, qword ptr [rsp + 0x70]
0x48db:	call	0x3710


0x48e0:	add	rsp, 0x20
0x48e4:	mov	r15, rax
0x48e7:	jmp	0x42e9


0x42e9:	mov	rbx, qword ptr [rsp + 0xa8]
0x42f1:	xor	rbx, qword ptr fs:[0x28]
0x42fa:	mov	rax, r15
0x42fd:	jne	0x4903


0x1980:	push	qword ptr [rip + 0x20b40a]
0x1986:	jmp	qword ptr [rip + 0x20b40c]


0x198c:	nop	dword ptr [rax]


0x1996:	push	0
0x199b:	jmp	0x1980


0x19a6:	push	1
0x19ab:	jmp	0x1980


0x19b6:	push	2
0x19bb:	jmp	0x1980


0x19c6:	push	3
0x19cb:	jmp	0x1980


0x19d6:	push	4
0x19db:	jmp	0x1980


0x19e6:	push	5
0x19eb:	jmp	0x1980


0x19f6:	push	6
0x19fb:	jmp	0x1980


0x1a06:	push	7
0x1a0b:	jmp	0x1980


0x1a16:	push	8
0x1a1b:	jmp	0x1980


0x1a26:	push	9
0x1a2b:	jmp	0x1980


0x1a36:	push	0xa
0x1a3b:	jmp	0x1980


0x1a46:	push	0xb
0x1a4b:	jmp	0x1980


0x1a56:	push	0xc
0x1a5b:	jmp	0x1980


0x1a66:	push	0xd
0x1a6b:	jmp	0x1980


0x1a76:	push	0xe
0x1a7b:	jmp	0x1980


0x1a86:	push	0xf
0x1a8b:	jmp	0x1980


0x1a96:	push	0x10
0x1a9b:	jmp	0x1980


0x1aa6:	push	0x11
0x1aab:	jmp	0x1980


0x1ab6:	push	0x12
0x1abb:	jmp	0x1980


0x1ac6:	push	0x13
0x1acb:	jmp	0x1980


0x1ad6:	push	0x14
0x1adb:	jmp	0x1980


0x1ae6:	push	0x15
0x1aeb:	jmp	0x1980


0x1af6:	push	0x16
0x1afb:	jmp	0x1980


0x1b06:	push	0x17
0x1b0b:	jmp	0x1980


0x1b16:	push	0x18
0x1b1b:	jmp	0x1980


0x1b26:	push	0x19
0x1b2b:	jmp	0x1980


0x1b36:	push	0x1a
0x1b3b:	jmp	0x1980


0x1b46:	push	0x1b
0x1b4b:	jmp	0x1980


0x1b56:	push	0x1c
0x1b5b:	jmp	0x1980


0x1b66:	push	0x1d
0x1b6b:	jmp	0x1980


0x1b76:	push	0x1e
0x1b7b:	jmp	0x1980


0x1b86:	push	0x1f
0x1b8b:	jmp	0x1980


0x1b96:	push	0x20
0x1b9b:	jmp	0x1980


0x1ba6:	push	0x21
0x1bab:	jmp	0x1980


0x1bb6:	push	0x22
0x1bbb:	jmp	0x1980


0x1bc6:	push	0x23
0x1bcb:	jmp	0x1980


0x1bd0:	jmp	qword ptr [rip + 0x20b2ea]




0x1bd6:	push	0x24
0x1bdb:	jmp	0x1980


0x1be6:	push	0x25
0x1beb:	jmp	0x1980


0x1bf6:	push	0x26
0x1bfb:	jmp	0x1980


0x1c06:	push	0x27
0x1c0b:	jmp	0x1980


0x1c16:	push	0x28
0x1c1b:	jmp	0x1980


0x1c26:	push	0x29
0x1c2b:	jmp	0x1980


0x1c36:	push	0x2a
0x1c3b:	jmp	0x1980


0x1c46:	push	0x2b
0x1c4b:	jmp	0x1980


0x1c56:	push	0x2c
0x1c5b:	jmp	0x1980


0x1c66:	push	0x2d
0x1c6b:	jmp	0x1980


0x1c76:	push	0x2e
0x1c7b:	jmp	0x1980


0x1c86:	push	0x2f
0x1c8b:	jmp	0x1980


0x1c96:	push	0x30
0x1c9b:	jmp	0x1980


0x1ca6:	push	0x31
0x1cab:	jmp	0x1980


0x1cb6:	push	0x32
0x1cbb:	jmp	0x1980


0x1cc6:	push	0x33
0x1ccb:	jmp	0x1980


0x1cd6:	push	0x34
0x1cdb:	jmp	0x1980


0x1ce6:	push	0x35
0x1ceb:	jmp	0x1980


0x1cf6:	push	0x36
0x1cfb:	jmp	0x1980


0x1d06:	push	0x37
0x1d0b:	jmp	0x1980


0x1d16:	push	0x38
0x1d1b:	jmp	0x1980


0x1d26:	push	0x39
0x1d2b:	jmp	0x1980


0x1d36:	push	0x3a
0x1d3b:	jmp	0x1980


0x1d46:	push	0x3b
0x1d4b:	jmp	0x1980


0x1d56:	push	0x3c
0x1d5b:	jmp	0x1980


0x1d66:	push	0x3d
0x1d6b:	jmp	0x1980


0x1d76:	push	0x3e
0x1d7b:	jmp	0x1980


0x1d86:	push	0x3f
0x1d8b:	jmp	0x1980


0x1d96:	push	0x40
0x1d9b:	jmp	0x1980


0x1da0:	jmp	qword ptr [rip + 0x20b202]




0x1da6:	push	0x41
0x1dab:	jmp	0x1980


0x1db0:	jmp	qword ptr [rip + 0x20b1fa]




0x1db6:	push	0x42
0x1dbb:	jmp	0x1980


0x1dc6:	push	0x43
0x1dcb:	jmp	0x1980


0x1dd6:	nop	


0x2c6a:	hlt	


0x2c6b:	nop	dword ptr [rax + rax]


0x2ca2:	nop	dword ptr [rax]
0x2ca6:	nop	word ptr cs:[rax + rax]


0x2cf2:	nop	dword ptr [rax]
0x2cf6:	nop	word ptr cs:[rax + rax]


0x2d3a:	nop	word ptr [rax + rax]


0x2d4a:	nop	word ptr [rax + rax]


0x312a:	nop	word ptr [rax + rax]


0x3138:	nop	dword ptr [rax + rax]


0x3148:	nop	dword ptr [rax + rax]


0x31f4:	nop	word ptr cs:[rax + rax]
0x31fe:	nop	


0x3205:	nop	
0x3206:	nop	word ptr cs:[rax + rax]


0x3232:	nop	word ptr cs:[rax + rax]
0x323c:	nop	dword ptr [rax]


0x3282:	nop	dword ptr [rax]
0x3286:	nop	word ptr cs:[rax + rax]


0x343e:	nop	


0x3558:	nop	dword ptr [rax + rax]


0x356a:	nop	word ptr [rax + rax]


0x3579:	nop	dword ptr [rax]


0x361f:	nop	


0x3707:	nop	word ptr [rax + rax]


0x37a3:	mov	byte ptr [rsp + 0xe], 1
0x37a8:	mov	byte ptr [rsp + 0x7c], 0
0x37ad:	xor	r12d, r12d
0x37b0:	mov	qword ptr [rsp + 0x50], 0
0x37b9:	mov	byte ptr [rsp + 0xf], 1
0x37be:	mov	byte ptr [rsp + 0xd], 0
0x37c3:	lea	rax, [rip + 0x5ff3]
0x37ca:	mov	qword ptr [rsp + 0x18], 1
0x37d3:	xor	r15d, r15d
0x37d6:	mov	dword ptr [rsp + 8], 2
0x37de:	mov	qword ptr [rsp + 0x48], rax
0x37e3:	xor	r11d, r11d
0x37e6:	mov	rax, rbp
0x37e9:	mov	r8d, r12d
0x37ec:	mov	rbp, r11
0x37ef:	mov	r11, rax
0x37f2:	nop	word ptr [rax + rax]
0x37f8:	cmp	r11, rbp
0x37fb:	setne	r12b
0x37ff:	cmp	r11, -1
0x3803:	jne	0x3812


0x3805:	mov	rax, qword ptr [rsp + 0x10]
0x380a:	cmp	byte ptr [rax + rbp], 0
0x380e:	setne	r12b
0x3812:	test	r12b, r12b
0x3815:	je	0x3e70


0x3812:	test	r12b, r12b
0x3815:	je	0x3e70


0x3e70:	cmp	dword ptr [rsp + 8], 2
0x3e75:	movzx	ebx, byte ptr [rsp + 0xf]
0x3e7a:	mov	r12d, r8d
0x3e7d:	mov	rbp, r11
0x3e80:	sete	dl
0x3e83:	mov	eax, ebx
0x3e85:	test	r15, r15
0x3e88:	sete	cl
0x3e8b:	and	eax, edx
0x3e8d:	and	al, cl
0x3e8f:	jne	0x48f6


0x381b:	cmp	dword ptr [rsp + 8], 2
0x3820:	mov	rdi, qword ptr [rsp + 0x10]
0x3825:	lea	r9, [rdi + rbp]
0x3829:	setne	al
0x382c:	and	al, byte ptr [rsp + 0xd]
0x3830:	mov	r10d, eax
0x3833:	je	0x38e0


0x3e95:	mov	eax, ebx
0x3e97:	xor	eax, 1
0x3e9a:	and	dl, al
0x3e9c:	je	0x480c


0x48f6:	mov	dword ptr [rsp + 8], 2
0x48fe:	jmp	0x4299


0x38e0:	movzx	ebx, byte ptr [r9]
0x38e4:	cmp	bl, 0x7e
0x38e7:	ja	0x3c08


0x3839:	mov	rax, qword ptr [rsp + 0x18]
0x383e:	test	rax, rax
0x3841:	je	0x3c70


0x480c:	mov	rbx, qword ptr [rsp + 0x48]
0x4811:	test	rbx, rbx
0x4814:	je	0x4842


0x3ea2:	cmp	byte ptr [rsp + 0x7c], 0
0x3ea7:	je	0x480a


0x4299:	cmp	byte ptr [rsp + 0xd], 0
0x429e:	je	0x42b0


0x38ed:	lea	rcx, [rip + 0x5f58]
0x38f4:	movzx	edx, bl
0x38f7:	movsxd	rax, dword ptr [rcx + rdx*4]
0x38fb:	add	rax, rcx
0x38fe:	jmp	rax


0x3c08:	cmp	qword ptr [rsp + 0x58], 1
0x3c0e:	jne	0x3fb8


0x3c70:	movzx	ebx, byte ptr [r9]
0x3c74:	cmp	bl, 0x7e
0x3c77:	ja	0x3c00


0x3847:	cmp	r11, -1
0x384b:	lea	rbx, [rbp + rax]
0x3850:	jne	0x3880


0x4842:	cmp	r13, r15
0x4845:	jbe	0x42e9


0x4816:	test	al, al
0x4818:	je	0x4842


0x480a:	mov	eax, edx
0x480c:	mov	rbx, qword ptr [rsp + 0x48]
0x4811:	test	rbx, rbx
0x4814:	je	0x4842


0x3ead:	cmp	byte ptr [rsp + 0xe], 0
0x3eb2:	jne	0x48ad


0x42a0:	test	al, al
0x42a2:	mov	eax, 4
0x42a7:	cmove	eax, dword ptr [rsp + 8]
0x42ac:	mov	dword ptr [rsp + 8], eax


0x3c14:	mov	qword ptr [rsp + 0x38], r11
0x3c19:	mov	byte ptr [rsp + 0x30], r8b
0x3c1e:	mov	byte ptr [rsp + 0x28], r10b
0x3c23:	call	0x1dc0


0x3fb8:	lea	rax, [rsp + 0xa0]
0x3fc0:	cmp	r11, -1
0x3fc4:	mov	qword ptr [rsp + 0xa0], 0
0x3fd0:	mov	qword ptr [rsp + 0x28], rax
0x3fd5:	jne	0x4004


0x3c79:	lea	rcx, [rip + 0x5dc8]
0x3c80:	movzx	edx, bl
0x3c83:	movsxd	rax, dword ptr [rcx + rdx*4]
0x3c87:	add	rax, rcx
0x3c8a:	jmp	rax


0x3c00:	xor	r10d, r10d
0x3c03:	nop	dword ptr [rax + rax]
0x3c08:	cmp	qword ptr [rsp + 0x58], 1
0x3c0e:	jne	0x3fb8


0x3852:	cmp	rax, 1
0x3856:	jbe	0x3880


0x3880:	cmp	rbx, r11
0x3883:	mov	byte ptr [rsp + 0x28], r10b
0x3888:	ja	0x3e40


0x484b:	mov	byte ptr [r14 + r15], 0
0x4850:	jmp	0x42e9


0x481a:	movzx	ecx, byte ptr [rbx]
0x481d:	mov	rax, rbx
0x4820:	test	cl, cl
0x4822:	je	0x4842


0x3eb8:	test	r13, r13
0x3ebb:	sete	al
0x3ebe:	cmp	qword ptr [rsp + 0x50], 0
0x3ec4:	setne	dl
0x3ec7:	and	al, dl
0x3ec9:	je	0x48ec


0x3fd7:	mov	rdi, qword ptr [rsp + 0x10]
0x3fdc:	mov	byte ptr [rsp + 0x40], r8b
0x3fe1:	mov	byte ptr [rsp + 0x38], r10b
0x3fe6:	mov	qword ptr [rsp + 0x30], r9
0x3feb:	call	0x1ac0


0x4004:	lea	rax, [rsp + 0x9c]
0x400c:	xor	ecx, ecx
0x400e:	mov	byte ptr [rsp + 0x7e], bl
0x4012:	mov	byte ptr [rsp + 0x7d], r8b
0x4017:	mov	rbx, rcx
0x401a:	mov	qword ptr [rsp + 0x88], r9
0x4022:	mov	qword ptr [rsp + 0x38], rax
0x4027:	mov	byte ptr [rsp + 0x7f], r10b
0x402c:	mov	qword ptr [rsp + 0x80], r15
0x4034:	mov	qword ptr [rsp + 0x40], r14
0x4039:	mov	qword ptr [rsp + 0x70], r13
0x403e:	mov	qword ptr [rsp + 0x30], r11
0x4043:	mov	rax, qword ptr [rsp + 0x10]
0x4048:	lea	r14, [rbp + rbx]
0x404d:	mov	rdx, qword ptr [rsp + 0x30]
0x4052:	mov	rcx, qword ptr [rsp + 0x28]
0x4057:	mov	rdi, qword ptr [rsp + 0x38]
0x405c:	lea	r13, [rax + r14]
0x4060:	sub	rdx, r14
0x4063:	mov	rsi, r13
0x4066:	call	0x78a0


0x3858:	mov	byte ptr [rsp + 0x38], r8b
0x385d:	mov	byte ptr [rsp + 0x30], r10b
0x3862:	mov	qword ptr [rsp + 0x28], r9
0x3867:	call	0x1ac0


0x388e:	mov	rdx, qword ptr [rsp + 0x18]
0x3893:	mov	rsi, qword ptr [rsp + 0x48]
0x3898:	mov	rdi, r9
0x389b:	mov	qword ptr [rsp + 0x40], r11
0x38a0:	mov	byte ptr [rsp + 0x38], r8b
0x38a5:	mov	qword ptr [rsp + 0x30], r9
0x38aa:	call	0x1bd0


0x3e40:	xor	r10d, r10d
0x3e43:	jmp	0x38e0


0x4824:	mov	rdx, r15
0x4827:	sub	rax, r15
0x482a:	cmp	r13, rdx
0x482d:	jbe	0x4833


0x48ec:	movzx	eax, byte ptr [rsp + 0x7c]
0x48f1:	jmp	0x480c


0x3ecf:	mov	r13, qword ptr [rsp + 0x50]
0x3ed4:	lea	rbx, [rip + 0x58e2]
0x3edb:	mov	byte ptr [r14], 0x27
0x3edf:	mov	dword ptr [rsp + 8], 2
0x3ee7:	mov	r15d, 1
0x3eed:	mov	qword ptr [rsp + 0x18], 1
0x3ef6:	mov	byte ptr [rsp + 0xf], 0
0x3efb:	mov	qword ptr [rsp + 0x48], rbx
0x3f00:	mov	byte ptr [rsp + 0x7c], al
0x3f04:	jmp	0x37e3


0x4833:	add	rdx, 1
0x4837:	movzx	ecx, byte ptr [rax + rdx]
0x483b:	test	cl, cl
0x483d:	jne	0x482a


0x482f:	mov	byte ptr [r14 + rdx], cl
0x4833:	add	rdx, 1
0x4837:	movzx	ecx, byte ptr [rax + rdx]
0x483b:	test	cl, cl
0x483d:	jne	0x482a


0x37e3:	xor	r11d, r11d
0x37e6:	mov	rax, rbp
0x37e9:	mov	r8d, r12d
0x37ec:	mov	rbp, r11
0x37ef:	mov	r11, rax
0x37f2:	nop	word ptr [rax + rax]
0x37f8:	cmp	r11, rbp
0x37fb:	setne	r12b
0x37ff:	cmp	r11, -1
0x3803:	jne	0x3812


0x483f:	mov	r15, rdx
0x4842:	cmp	r13, r15
0x4845:	jbe	0x42e9


0x482a:	cmp	r13, rdx
0x482d:	jbe	0x4833


0x38af:	test	eax, eax
0x38b1:	mov	r9, qword ptr [rsp + 0x30]
0x38b6:	movzx	r8d, byte ptr [rsp + 0x38]
0x38bc:	mov	r11, qword ptr [rsp + 0x40]
0x38c1:	jne	0x3e40


0x38c7:	cmp	byte ptr [rsp + 0xf], 0
0x38cc:	movzx	r10d, byte ptr [rsp + 0x28]
0x38d2:	jne	0x4855


0x4855:	cmp	dword ptr [rsp + 8], 2
0x485a:	movzx	ebx, byte ptr [rsp + 0xf]
0x485f:	mov	rbp, r11
0x4862:	sete	al
0x4865:	mov	byte ptr [rsp + 0xd], bl
0x4869:	jmp	0x4299


0x406b:	test	rax, rax
0x406e:	mov	r15, rax
0x4071:	je	0x40c1


0x40c1:	mov	edx, r12d
0x40c4:	mov	rdi, rbx
0x40c7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x40cd:	xor	edx, 1
0x40d0:	movzx	ebx, byte ptr [rsp + 0x7e]
0x40d5:	movzx	r10d, byte ptr [rsp + 0x7f]
0x40db:	and	dl, byte ptr [rsp + 0xd]
0x40df:	mov	r15, qword ptr [rsp + 0x80]
0x40e7:	mov	r14, qword ptr [rsp + 0x40]
0x40ec:	mov	r13, qword ptr [rsp + 0x70]
0x40f1:	mov	r11, qword ptr [rsp + 0x30]
0x40f6:	cmp	rdi, 1
0x40fa:	jbe	0x46fb


0x4073:	cmp	rax, -1
0x4077:	je	0x4695


0x46fb:	mov	eax, edx
0x46fd:	jmp	0x3c57


0x4100:	mov	rcx, rdi
0x4103:	xor	esi, esi
0x4105:	movzx	r9d, byte ptr [rsp + 0xf]
0x410b:	add	rcx, rbp
0x410e:	mov	rdi, qword ptr [rsp + 0x10]
0x4113:	jmp	0x41ce


0x4695:	mov	rdi, rbx
0x4698:	movzx	r8d, byte ptr [rsp + 0x7d]
0x469e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x46a3:	movzx	r10d, byte ptr [rsp + 0x7f]
0x46a9:	mov	r15, qword ptr [rsp + 0x80]
0x46b1:	xor	r12d, r12d
0x46b4:	mov	r14, qword ptr [rsp + 0x40]
0x46b9:	mov	r13, qword ptr [rsp + 0x70]
0x46be:	mov	r11, qword ptr [rsp + 0x30]
0x46c3:	movzx	edx, byte ptr [rsp + 0xd]
0x46c8:	jmp	0x40f6


0x407d:	cmp	rax, -2
0x4081:	je	0x4621


0x3c57:	test	al, al
0x3c59:	jne	0x45f1


0x41ce:	test	dl, dl
0x41d0:	jne	0x4120


0x40f6:	cmp	rdi, 1
0x40fa:	jbe	0x46fb


0x4621:	mov	r11, qword ptr [rsp + 0x30]
0x4626:	mov	rsi, r14
0x4629:	mov	rcx, r13
0x462c:	mov	rax, rbx
0x462f:	mov	rdi, rbx
0x4632:	movzx	r8d, byte ptr [rsp + 0x7d]
0x4638:	movzx	ebx, byte ptr [rsp + 0x7e]
0x463d:	mov	r9, qword ptr [rsp + 0x88]
0x4645:	cmp	rsi, r11
0x4648:	movzx	r10d, byte ptr [rsp + 0x7f]
0x464e:	mov	r15, qword ptr [rsp + 0x80]
0x4656:	mov	r14, qword ptr [rsp + 0x40]
0x465b:	mov	r13, qword ptr [rsp + 0x70]
0x4660:	jae	0x4688


0x4087:	cmp	dword ptr [rsp + 8], 2
0x408c:	sete	al
0x408f:	and	al, byte ptr [rsp + 0xf]
0x4093:	jne	0x4230


0x3c5f:	cmp	dword ptr [rsp + 8], 2
0x3c64:	sete	dl
0x3c67:	jmp	0x3938


0x45f1:	movzx	edx, byte ptr [rsp + 0xd]
0x45f6:	xor	r12d, r12d
0x45f9:	jmp	0x4100


0x41d6:	mov	eax, esi
0x41d8:	xor	eax, 1
0x41db:	and	eax, r8d
0x41de:	test	r10b, r10b
0x41e1:	je	0x41f1


0x4120:	cmp	dword ptr [rsp + 8], 2
0x4125:	sete	al
0x4128:	test	r9b, r9b
0x412b:	jne	0x45e0


0x4662:	cmp	byte ptr [rcx], 0
0x4665:	jne	0x4677


0x4688:	movzx	edx, byte ptr [rsp + 0xd]
0x468d:	xor	r12d, r12d
0x4690:	jmp	0x40f6


0x4099:	mov	edi, dword ptr [rsp + 0x9c]
0x40a0:	call	0x1db0


0x4230:	cmp	r15, 1
0x4234:	je	0x4099


0x3938:	cmp	byte ptr [rsp + 0xd], 1
0x393d:	jne	0x3a52


0x41f1:	add	rbp, 1
0x41f5:	cmp	rbp, rcx
0x41f8:	jae	0x397c


0x41e3:	cmp	r13, r15
0x41e6:	jbe	0x41ed


0x4131:	mov	esi, r8d
0x4134:	xor	esi, 1
0x4137:	and	al, sil
0x413a:	je	0x416b


0x45e0:	movzx	ebx, byte ptr [rsp + 0xf]
0x45e5:	mov	rbp, r11
0x45e8:	mov	byte ptr [rsp + 0xd], bl
0x45ec:	jmp	0x4299


0x4667:	jmp	0x4688


0x4677:	add	rax, 1
0x467b:	lea	rdx, [rbp + rax]
0x4680:	cmp	r11, rdx
0x4683:	ja	0x4670


0x423a:	mov	rdi, qword ptr [rsp + 0x10]
0x423f:	lea	rcx, [rdi + r15]
0x4243:	lea	rdx, [rdi + r14 + 1]
0x4248:	lea	r8, [rcx + r14]
0x424c:	jmp	0x425d


0x3943:	test	dl, dl
0x3945:	jne	0x3a52


0x3a52:	cmp	byte ptr [rsp + 0xf], 0
0x3a57:	jne	0x394b


0x41fe:	test	al, al
0x4200:	je	0x45fe


0x397c:	test	al, al
0x397e:	je	0x39a0


0x41ed:	add	r15, 1
0x41f1:	add	rbp, 1
0x41f5:	cmp	rbp, rcx
0x41f8:	jae	0x397c


0x41e8:	mov	byte ptr [r14 + r15], 0x5c
0x41ed:	add	r15, 1
0x41f1:	add	rbp, 1
0x41f5:	cmp	rbp, rcx
0x41f8:	jae	0x397c


0x416b:	cmp	r13, r15
0x416e:	jbe	0x4175


0x413c:	cmp	r13, r15
0x413f:	jbe	0x4146


0x4685:	mov	rdi, rax
0x4688:	movzx	edx, byte ptr [rsp + 0xd]
0x468d:	xor	r12d, r12d
0x4690:	jmp	0x40f6


0x4670:	cmp	byte ptr [r9 + rax], 0
0x4675:	je	0x4685


0x425d:	movzx	ecx, byte ptr [rdx]
0x4260:	sub	ecx, 0x5b
0x4263:	cmp	cl, 0x21
0x4266:	ja	0x4250


0x394b:	mov	rsi, qword ptr [rsp + 0x20]
0x3950:	test	rsi, rsi
0x3953:	je	0x3969


0x3a5d:	jmp	0x3969


0x45fe:	xor	r10d, r10d
0x4601:	jmp	0x41bd


0x4206:	cmp	r13, r15
0x4209:	jbe	0x4210


0x39a0:	cmp	r15, r13
0x39a3:	jae	0x39a9


0x3980:	cmp	r13, r15
0x3983:	jbe	0x398a


0x4175:	lea	rax, [r15 + 1]
0x4179:	cmp	r13, rax
0x417c:	jbe	0x418b


0x4170:	mov	byte ptr [r14 + r15], 0x5c
0x4175:	lea	rax, [r15 + 1]
0x4179:	cmp	r13, rax
0x417c:	jbe	0x418b


0x4146:	lea	rsi, [r15 + 1]
0x414a:	cmp	r13, rsi
0x414d:	jbe	0x4155


0x4141:	mov	byte ptr [r14 + r15], 0x27
0x4146:	lea	rsi, [r15 + 1]
0x414a:	cmp	r13, rsi
0x414d:	jbe	0x4155


0x4268:	mov	esi, 1
0x426d:	shl	rsi, cl
0x4270:	mov	rcx, rsi
0x4273:	movabs	rsi, 0x20000002b
0x427d:	test	rcx, rsi
0x4280:	je	0x4250


0x4250:	add	rdx, 1
0x4254:	cmp	r8, rdx
0x4257:	je	0x4099


0x3969:	test	r10b, r10b
0x396c:	jne	0x3ab3


0x3955:	mov	edx, ebx
0x3957:	shr	dl, 5
0x395a:	movzx	edx, dl
0x395d:	mov	edx, dword ptr [rsi + rdx*4]
0x3960:	bt	edx, ebx
0x3963:	jb	0x3ab3


0x41bd:	cmp	r13, r15
0x41c0:	jbe	0x41c6


0x4210:	lea	rax, [r15 + 1]
0x4214:	cmp	r13, rax
0x4217:	jbe	0x421f


0x420b:	mov	byte ptr [r14 + r15], 0x27
0x4210:	lea	rax, [r15 + 1]
0x4214:	cmp	r13, rax
0x4217:	jbe	0x421f


0x39a5:	mov	byte ptr [r14 + r15], bl
0x39a9:	movzx	edi, byte ptr [rsp + 0xe]
0x39ae:	add	r15, 1
0x39b2:	mov	eax, 0
0x39b7:	test	r12b, r12b
0x39ba:	cmove	edi, eax
0x39bd:	mov	byte ptr [rsp + 0xe], dil
0x39c2:	jmp	0x37f8


0x39a9:	movzx	edi, byte ptr [rsp + 0xe]
0x39ae:	add	r15, 1
0x39b2:	mov	eax, 0
0x39b7:	test	r12b, r12b
0x39ba:	cmove	edi, eax
0x39bd:	mov	byte ptr [rsp + 0xe], dil
0x39c2:	jmp	0x37f8


0x398a:	lea	rax, [r15 + 1]
0x398e:	cmp	r13, rax
0x3991:	jbe	0x3999


0x3985:	mov	byte ptr [r14 + r15], 0x27
0x398a:	lea	rax, [r15 + 1]
0x398e:	cmp	r13, rax
0x3991:	jbe	0x3999


0x418b:	lea	rax, [r15 + 2]
0x418f:	cmp	r13, rax
0x4192:	jbe	0x41a4


0x417e:	mov	eax, ebx
0x4180:	shr	al, 6
0x4183:	add	eax, 0x30
0x4186:	mov	byte ptr [r14 + r15 + 1], al
0x418b:	lea	rax, [r15 + 2]
0x418f:	cmp	r13, rax
0x4192:	jbe	0x41a4


0x4155:	lea	rsi, [r15 + 2]
0x4159:	cmp	r13, rsi
0x415c:	jbe	0x4164


0x414f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x4155:	lea	rsi, [r15 + 2]
0x4159:	cmp	r13, rsi
0x415c:	jbe	0x4164


0x4282:	mov	r14, qword ptr [rsp + 0x40]
0x4287:	mov	r13, qword ptr [rsp + 0x70]
0x428c:	mov	rbp, qword ptr [rsp + 0x30]
0x4291:	mov	dword ptr [rsp + 8], 2
0x4299:	cmp	byte ptr [rsp + 0xd], 0
0x429e:	je	0x42b0


0x3972:	xor	eax, 1
0x3975:	add	rbp, 1
0x3979:	and	eax, r8d
0x397c:	test	al, al
0x397e:	je	0x39a0


0x3ab3:	cmp	dword ptr [rsp + 8], 2
0x3ab8:	sete	dl
0x3abb:	cmp	byte ptr [rsp + 0xf], 0
0x3ac0:	mov	eax, edx
0x3ac2:	jne	0x4318


0x41c6:	movzx	ebx, byte ptr [rdi + rbp]
0x41ca:	add	r15, 1
0x41ce:	test	dl, dl
0x41d0:	jne	0x4120


0x41c2:	mov	byte ptr [r14 + r15], bl
0x41c6:	movzx	ebx, byte ptr [rdi + rbp]
0x41ca:	add	r15, 1
0x41ce:	test	dl, dl
0x41d0:	jne	0x4120


0x421f:	add	r15, 2
0x4223:	xor	r10d, r10d
0x4226:	xor	r8d, r8d
0x4229:	jmp	0x41bd


0x4219:	mov	byte ptr [r14 + r15 + 1], 0x27
0x421f:	add	r15, 2
0x4223:	xor	r10d, r10d
0x4226:	xor	r8d, r8d
0x4229:	jmp	0x41bd


0x37f8:	cmp	r11, rbp
0x37fb:	setne	r12b
0x37ff:	cmp	r11, -1
0x3803:	jne	0x3812


0x3999:	add	r15, 2
0x399d:	xor	r8d, r8d
0x39a0:	cmp	r15, r13
0x39a3:	jae	0x39a9


0x3993:	mov	byte ptr [r14 + r15 + 1], 0x27
0x3999:	add	r15, 2
0x399d:	xor	r8d, r8d
0x39a0:	cmp	r15, r13
0x39a3:	jae	0x39a9


0x41a4:	and	ebx, 7
0x41a7:	add	rbp, 1
0x41ab:	add	r15, 3
0x41af:	add	ebx, 0x30
0x41b2:	cmp	rbp, rcx
0x41b5:	jae	0x39a0


0x4194:	mov	eax, ebx
0x4196:	shr	al, 3
0x4199:	and	eax, 7
0x419c:	add	eax, 0x30
0x419f:	mov	byte ptr [r14 + r15 + 2], al
0x41a4:	and	ebx, 7
0x41a7:	add	rbp, 1
0x41ab:	add	r15, 3
0x41af:	add	ebx, 0x30
0x41b2:	cmp	rbp, rcx
0x41b5:	jae	0x39a0


0x4164:	add	r15, 3
0x4168:	mov	r8d, eax
0x416b:	cmp	r13, r15
0x416e:	jbe	0x4175


0x415e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x4164:	add	r15, 3
0x4168:	mov	r8d, eax
0x416b:	cmp	r13, r15
0x416e:	jbe	0x4175


0x3ac8:	mov	eax, r8d
0x3acb:	xor	eax, 1
0x3ace:	and	al, dl
0x3ad0:	je	0x3b01


0x4318:	mov	rbp, r11
0x431b:	jmp	0x4299


0x41bb:	mov	esi, edx
0x41bd:	cmp	r13, r15
0x41c0:	jbe	0x41c6


0x3b01:	cmp	r13, r15
0x3b04:	jbe	0x3b0b


0x3ad2:	cmp	r13, r15
0x3ad5:	jbe	0x3adc


0x3b0b:	add	r15, 1
0x3b0f:	add	rbp, 1
0x3b13:	jmp	0x39a0


0x3b06:	mov	byte ptr [r14 + r15], 0x5c
0x3b0b:	add	r15, 1
0x3b0f:	add	rbp, 1
0x3b13:	jmp	0x39a0


0x3adc:	lea	rdx, [r15 + 1]
0x3ae0:	cmp	r13, rdx
0x3ae3:	jbe	0x3aeb


0x3ad7:	mov	byte ptr [r14 + r15], 0x27
0x3adc:	lea	rdx, [r15 + 1]
0x3ae0:	cmp	r13, rdx
0x3ae3:	jbe	0x3aeb


0x3aeb:	lea	rdx, [r15 + 2]
0x3aef:	cmp	r13, rdx
0x3af2:	jbe	0x3afa


0x3ae5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x3aeb:	lea	rdx, [r15 + 2]
0x3aef:	cmp	r13, rdx
0x3af2:	jbe	0x3afa


0x3afa:	add	r15, 3
0x3afe:	mov	r8d, eax
0x3b01:	cmp	r13, r15
0x3b04:	jbe	0x3b0b


0x3af4:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3afa:	add	r15, 3
0x3afe:	mov	r8d, eax
0x3b01:	cmp	r13, r15
0x3b04:	jbe	0x3b0b


0x40a5:	mov	rdi, qword ptr [rsp + 0x28]
0x40aa:	test	eax, eax
0x40ac:	mov	eax, 0
0x40b1:	cmove	r12d, eax
0x40b5:	add	rbx, r15
0x40b8:	call	0x1da0


0x40bd:	test	eax, eax
0x40bf:	je	0x4043


0x4043:	mov	rax, qword ptr [rsp + 0x10]
0x4048:	lea	r14, [rbp + rbx]
0x404d:	mov	rdx, qword ptr [rsp + 0x30]
0x4052:	mov	rcx, qword ptr [rsp + 0x28]
0x4057:	mov	rdi, qword ptr [rsp + 0x38]
0x405c:	lea	r13, [rax + r14]
0x4060:	sub	rdx, r14
0x4063:	mov	rsi, r13
0x4066:	call	0x78a0


0x386c:	movzx	r8d, byte ptr [rsp + 0x38]
0x3872:	movzx	r10d, byte ptr [rsp + 0x30]
0x3878:	mov	r11, rax
0x387b:	mov	r9, qword ptr [rsp + 0x28]
0x3880:	cmp	rbx, r11
0x3883:	mov	byte ptr [rsp + 0x28], r10b
0x3888:	ja	0x3e40


0x3ff0:	movzx	r8d, byte ptr [rsp + 0x40]
0x3ff6:	movzx	r10d, byte ptr [rsp + 0x38]
0x3ffc:	mov	r11, rax
0x3fff:	mov	r9, qword ptr [rsp + 0x30]
0x4004:	lea	rax, [rsp + 0x9c]
0x400c:	xor	ecx, ecx
0x400e:	mov	byte ptr [rsp + 0x7e], bl
0x4012:	mov	byte ptr [rsp + 0x7d], r8b
0x4017:	mov	rbx, rcx
0x401a:	mov	qword ptr [rsp + 0x88], r9
0x4022:	mov	qword ptr [rsp + 0x38], rax
0x4027:	mov	byte ptr [rsp + 0x7f], r10b
0x402c:	mov	qword ptr [rsp + 0x80], r15
0x4034:	mov	qword ptr [rsp + 0x40], r14
0x4039:	mov	qword ptr [rsp + 0x70], r13
0x403e:	mov	qword ptr [rsp + 0x30], r11
0x4043:	mov	rax, qword ptr [rsp + 0x10]
0x4048:	lea	r14, [rbp + rbx]
0x404d:	mov	rdx, qword ptr [rsp + 0x30]
0x4052:	mov	rcx, qword ptr [rsp + 0x28]
0x4057:	mov	rdi, qword ptr [rsp + 0x38]
0x405c:	lea	r13, [rax + r14]
0x4060:	sub	rdx, r14
0x4063:	mov	rsi, r13
0x4066:	call	0x78a0


0x3c28:	mov	rcx, qword ptr [rax]
0x3c2b:	movzx	edx, bl
0x3c2e:	movzx	r10d, byte ptr [rsp + 0x28]
0x3c34:	movzx	r8d, byte ptr [rsp + 0x30]
0x3c3a:	mov	r11, qword ptr [rsp + 0x38]
0x3c3f:	mov	edi, 1
0x3c44:	movzx	eax, word ptr [rcx + rdx*2]
0x3c48:	and	ax, 0x4000
0x3c4c:	setne	r12b
0x3c50:	sete	al
0x3c53:	and	al, byte ptr [rsp + 0xd]
0x3c57:	test	al, al
0x3c59:	jne	0x45f1


0x3900:	xor	r10d, r10d
0x3903:	cmp	r11, 1
0x3907:	setne	al
0x390a:	cmp	r11, -1
0x390e:	jne	0x391c


0x3910:	mov	rax, qword ptr [rsp + 0x10]
0x3915:	cmp	byte ptr [rax + 1], 0
0x3919:	setne	al
0x391c:	cmp	dword ptr [rsp + 8], 2
0x3921:	sete	dl
0x3924:	test	al, al
0x3926:	je	0x3b78


0x391c:	cmp	dword ptr [rsp + 8], 2
0x3921:	sete	dl
0x3924:	test	al, al
0x3926:	je	0x3b78


0x3b78:	test	rbp, rbp
0x3b7b:	jne	0x392c


0x392c:	xor	r12d, r12d
0x392f:	xor	eax, eax
0x3931:	nop	dword ptr [rax]
0x3938:	cmp	byte ptr [rsp + 0xd], 1
0x393d:	jne	0x3a52


0x3b81:	movzx	eax, byte ptr [rsp + 0xf]
0x3b86:	and	al, dl
0x3b88:	je	0x3938


0x3b8e:	mov	rbp, r11
0x3b91:	mov	dword ptr [rsp + 8], 2
0x3b99:	jmp	0x4299


0x3f98:	cmp	byte ptr [rsp + 0xf], 0
0x3f9d:	jne	0x47c0


0x39e0:	cmp	eax, 5
0x39e3:	je	0x3f58


0x3fa3:	xor	r12d, r12d
0x3fa6:	xor	eax, eax
0x3fa8:	mov	ebx, 0x3f
0x3fad:	jmp	0x3969


0x47c0:	mov	rbp, r11
0x47c3:	movzx	eax, byte ptr [rsp + 0xf]
0x47c8:	jmp	0x4299


0x3f58:	test	byte ptr [rsp + 0x78], 4
0x3f5d:	je	0x3f80


0x39e9:	cmp	eax, 2
0x39ec:	mov	ebx, 0x3f
0x39f1:	sete	dl
0x39f4:	xor	r12d, r12d
0x39f7:	xor	eax, eax
0x39f9:	jmp	0x3938


0x3f80:	xor	edx, edx
0x3f82:	xor	r12d, r12d
0x3f85:	xor	eax, eax
0x3f87:	mov	ebx, 0x3f
0x3f8c:	jmp	0x3938


0x3f5f:	lea	rcx, [rbp + 2]
0x3f63:	cmp	rcx, r11
0x3f66:	jae	0x3f80


0x3f68:	mov	rax, qword ptr [rsp + 0x10]
0x3f6d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x3f72:	je	0x4702


0x4702:	movzx	ebx, byte ptr [rax + rcx]
0x4706:	cmp	bl, 0x3e
0x4709:	ja	0x3f80


0x470f:	movabs	rax, 0x7000a38200000000
0x4719:	bt	rax, rbx
0x471d:	jae	0x3f80


0x4723:	cmp	byte ptr [rsp + 0xf], 0
0x4728:	jne	0x4912


0x472e:	cmp	r13, r15
0x4731:	jbe	0x4738


0x4912:	mov	rbp, r11
0x4915:	jmp	0x42b0


0x4738:	lea	rax, [r15 + 1]
0x473c:	cmp	r13, rax
0x473f:	jbe	0x4747


0x4733:	mov	byte ptr [r14 + r15], 0x3f
0x4738:	lea	rax, [r15 + 1]
0x473c:	cmp	r13, rax
0x473f:	jbe	0x4747


0x4747:	lea	rax, [r15 + 2]
0x474b:	cmp	r13, rax
0x474e:	jbe	0x4756


0x4741:	mov	byte ptr [r14 + r15 + 1], 0x22
0x4747:	lea	rax, [r15 + 2]
0x474b:	cmp	r13, rax
0x474e:	jbe	0x4756


0x4756:	lea	rax, [r15 + 3]
0x475a:	cmp	r13, rax
0x475d:	jbe	0x4765


0x4750:	mov	byte ptr [r14 + r15 + 2], 0x22
0x4756:	lea	rax, [r15 + 3]
0x475a:	cmp	r13, rax
0x475d:	jbe	0x4765


0x4765:	add	r15, 4
0x4769:	xor	edx, edx
0x476b:	xor	r12d, r12d
0x476e:	xor	eax, eax
0x4770:	mov	rbp, rcx
0x4773:	jmp	0x3938


0x475f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x4765:	add	r15, 4
0x4769:	xor	edx, edx
0x476b:	xor	r12d, r12d
0x476e:	xor	eax, eax
0x4770:	mov	rbp, rcx
0x4773:	jmp	0x3938


0x3f10:	cmp	byte ptr [rsp + 0xf], 0
0x3f15:	jne	0x47c0


0x3a0e:	mov	byte ptr [rsp + 0x7c], r12b
0x3a13:	xor	edx, edx
0x3a15:	xor	eax, eax
0x3a17:	mov	ebx, 0x27
0x3a1c:	jmp	0x3938


0x3f1b:	test	r13, r13
0x3f1e:	je	0x4320


0x4320:	cmp	r13, r15
0x4323:	jbe	0x432a


0x3f24:	xor	edx, edx
0x3f26:	cmp	qword ptr [rsp + 0x50], 0
0x3f2c:	jne	0x4320


0x432a:	lea	rax, [r15 + 1]
0x432e:	cmp	r13, rax
0x4331:	jbe	0x4339


0x4325:	mov	byte ptr [r14 + r15], 0x27
0x432a:	lea	rax, [r15 + 1]
0x432e:	cmp	r13, rax
0x4331:	jbe	0x4339


0x3f32:	mov	qword ptr [rsp + 0x50], r13
0x3f37:	add	r15, 3
0x3f3b:	xor	eax, eax
0x3f3d:	mov	byte ptr [rsp + 0x7c], r12b
0x3f42:	xor	r8d, r8d
0x3f45:	mov	r13, rdx
0x3f48:	mov	ebx, 0x27
0x3f4d:	jmp	0x3969


0x4339:	lea	rax, [r15 + 2]
0x433d:	cmp	r13, rax
0x4340:	jbe	0x4932


0x4333:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x4339:	lea	rax, [r15 + 2]
0x433d:	cmp	r13, rax
0x4340:	jbe	0x4932


0x4932:	mov	rdx, r13
0x4935:	mov	r13, qword ptr [rsp + 0x50]
0x493a:	jmp	0x3f32


0x4346:	mov	rdx, r13
0x4349:	mov	byte ptr [r14 + r15 + 2], 0x27
0x434f:	mov	r13, qword ptr [rsp + 0x50]
0x4354:	jmp	0x3f32


0x3a44:	cmp	byte ptr [rsp + 0xd], 0
0x3a49:	jne	0x3ab0


0x3a4b:	mov	ebx, edx
0x3a4d:	xor	r12d, r12d
0x3a50:	xor	eax, eax
0x3a52:	cmp	byte ptr [rsp + 0xf], 0
0x3a57:	jne	0x394b


0x3ab0:	xor	r12d, r12d
0x3ab3:	cmp	dword ptr [rsp + 8], 2
0x3ab8:	sete	dl
0x3abb:	cmp	byte ptr [rsp + 0xf], 0
0x3ac0:	mov	eax, edx
0x3ac2:	jne	0x4318


0x3e50:	cmp	byte ptr [rsp + 0xf], 0
0x3e55:	jne	0x47c0


0x3a83:	cmp	byte ptr [rsp + 0xd], 0
0x3a88:	je	0x3ca0


0x3e5b:	add	rbp, 1
0x3e5f:	mov	eax, r8d
0x3e62:	xor	r12d, r12d
0x3e65:	mov	ebx, 0x5c
0x3e6a:	jmp	0x397c


0x3ca0:	mov	edx, 0x5c
0x3ca5:	mov	ebx, 0x5c
0x3caa:	jmp	0x3a44


0x3a8e:	cmp	byte ptr [rsp + 0xf], 0
0x3a93:	je	0x3ca0


0x3a99:	cmp	qword ptr [rsp + 0x18], 0
0x3a9f:	jne	0x3e5b


0x3aa5:	mov	ebx, 0x5c
0x3aaa:	nop	word ptr [rax + rax]
0x3ab0:	xor	r12d, r12d
0x3ab3:	cmp	dword ptr [rsp + 8], 2
0x3ab8:	sete	dl
0x3abb:	cmp	byte ptr [rsp + 0xf], 0
0x3ac0:	mov	eax, edx
0x3ac2:	jne	0x4318


0x3b2b:	xor	edx, edx
0x3b2d:	test	byte ptr [rsp + 0x78], 1
0x3b32:	je	0x3a4b


0x3cf3:	cmp	dword ptr [rsp + 8], 2
0x3cf8:	sete	dl
0x3cfb:	cmp	byte ptr [rsp + 0xf], 0
0x3d00:	jne	0x489a


0x3b38:	add	rbp, 1
0x3b3c:	jmp	0x37f8


0x3d06:	mov	eax, r8d
0x3d09:	mov	rcx, r15
0x3d0c:	xor	eax, 1
0x3d0f:	and	al, dl
0x3d11:	je	0x3d40


0x489a:	movzx	ebx, byte ptr [rsp + 0xf]
0x489f:	mov	rbp, r11
0x48a2:	mov	eax, edx
0x48a4:	mov	byte ptr [rsp + 0xd], bl
0x48a8:	jmp	0x4299


0x3d40:	cmp	r13, rcx
0x3d43:	jbe	0x3d4a


0x3d13:	cmp	r13, r15
0x3d16:	jbe	0x3d1d


0x3d4a:	cmp	dword ptr [rsp + 8], 2
0x3d4f:	lea	r15, [rcx + 1]
0x3d53:	je	0x4359


0x3d45:	mov	byte ptr [r14 + rcx], 0x5c
0x3d4a:	cmp	dword ptr [rsp + 8], 2
0x3d4f:	lea	r15, [rcx + 1]
0x3d53:	je	0x4359


0x3d1d:	lea	rcx, [r15 + 1]
0x3d21:	cmp	r13, rcx
0x3d24:	jbe	0x3d2c


0x3d18:	mov	byte ptr [r14 + r15], 0x27
0x3d1d:	lea	rcx, [r15 + 1]
0x3d21:	cmp	r13, rcx
0x3d24:	jbe	0x3d2c


0x4359:	mov	eax, r12d
0x435c:	mov	ebx, 0x30
0x4361:	xor	r12d, r12d
0x4364:	jmp	0x3969


0x3d59:	lea	rax, [rbp + 1]
0x3d5d:	cmp	rax, r11
0x3d60:	jae	0x3d7b


0x3d2c:	lea	rcx, [r15 + 2]
0x3d30:	cmp	r13, rcx
0x3d33:	ja	0x4369


0x3d26:	mov	byte ptr [r14 + r15 + 1], 0x24
0x3d2c:	lea	rcx, [r15 + 2]
0x3d30:	cmp	r13, rcx
0x3d33:	ja	0x4369


0x3d62:	mov	rax, qword ptr [rsp + 0x10]
0x3d67:	movzx	eax, byte ptr [rax + rbp + 1]
0x3d6c:	mov	byte ptr [rsp + 0x28], al
0x3d70:	sub	eax, 0x30
0x3d73:	cmp	al, 9
0x3d75:	jbe	0x45a9


0x3d7b:	mov	eax, r12d
0x3d7e:	mov	ebx, 0x30
0x3d83:	xor	r12d, r12d
0x3d86:	jmp	0x3938


0x3d39:	lea	rcx, [r15 + 3]
0x3d3d:	mov	r8d, eax
0x3d40:	cmp	r13, rcx
0x3d43:	jbe	0x3d4a


0x4369:	mov	byte ptr [r14 + r15 + 2], 0x27
0x436f:	jmp	0x3d39


0x45a9:	cmp	r13, r15
0x45ac:	jbe	0x45b3


0x45b3:	lea	rax, [rcx + 2]
0x45b7:	cmp	r13, rax
0x45ba:	jbe	0x45c2


0x45ae:	mov	byte ptr [r14 + r15], 0x30
0x45b3:	lea	rax, [rcx + 2]
0x45b7:	cmp	r13, rax
0x45ba:	jbe	0x45c2


0x45c2:	mov	eax, r12d
0x45c5:	lea	r15, [rcx + 3]
0x45c9:	xor	r12d, r12d
0x45cc:	mov	ebx, 0x30
0x45d1:	jmp	0x3938


0x45bc:	mov	byte ptr [r14 + rcx + 2], 0x30
0x45c2:	mov	eax, r12d
0x45c5:	lea	r15, [rcx + 3]
0x45c9:	xor	r12d, r12d
0x45cc:	mov	ebx, 0x30
0x45d1:	jmp	0x3938


0x3a32:	cmp	dword ptr [rsp + 8], 2
0x3a37:	sete	al
0x3a3a:	and	al, byte ptr [rsp + 0xf]
0x3a3e:	jne	0x3b8e


0x3df0:	mov	edx, 0xd
0x3df5:	xor	r10d, r10d
0x3df8:	mov	ebx, 0x72
0x3dfd:	jmp	0x3a32


0x4374:	test	ebx, ebx
0x4376:	jne	0x37a3


0x437c:	mov	byte ptr [rsp + 0xd], 1
0x4381:	test	r13, r13
0x4384:	jne	0x491a


0x438a:	lea	rax, [rip + 0x542c]
0x4391:	mov	qword ptr [rsp + 0x50], 0
0x439a:	mov	byte ptr [rsp + 0xe], 1
0x439f:	mov	byte ptr [rsp + 0x7c], 0
0x43a4:	xor	r12d, r12d
0x43a7:	mov	byte ptr [rsp + 0xf], 0
0x43ac:	mov	qword ptr [rsp + 0x18], 1
0x43b5:	mov	qword ptr [rsp + 0x48], rax
0x43ba:	mov	r15d, 1
0x43c0:	mov	dword ptr [rsp + 8], 2
0x43c8:	jmp	0x37e3


0x491a:	mov	byte ptr [rsp + 0xe], 1
0x491f:	xor	eax, eax
0x4921:	xor	r12d, r12d
0x4924:	mov	qword ptr [rsp + 0x50], 0
0x492d:	jmp	0x3ed4


0x3ed4:	lea	rbx, [rip + 0x58e2]
0x3edb:	mov	byte ptr [r14], 0x27
0x3edf:	mov	dword ptr [rsp + 8], 2
0x3ee7:	mov	r15d, 1
0x3eed:	mov	qword ptr [rsp + 0x18], 1
0x3ef6:	mov	byte ptr [rsp + 0xf], 0
0x3efb:	mov	qword ptr [rsp + 0x48], rbx
0x3f00:	mov	byte ptr [rsp + 0x7c], al
0x3f04:	jmp	0x37e3


0x43d8:	test	r13, r13
0x43db:	je	0x4606


0x47cd:	lea	rax, [rip + 0x4fe7]
0x47d4:	mov	byte ptr [rsp + 0xe], 1
0x47d9:	mov	byte ptr [rsp + 0x7c], 0
0x47de:	xor	r12d, r12d
0x47e1:	mov	qword ptr [rsp + 0x50], 0
0x47ea:	mov	byte ptr [rsp + 0xf], 1
0x47ef:	mov	byte ptr [rsp + 0xd], 1
0x47f4:	mov	qword ptr [rsp + 0x18], 1
0x47fd:	xor	r15d, r15d
0x4800:	mov	qword ptr [rsp + 0x48], rax
0x4805:	jmp	0x37e3


0x4606:	mov	qword ptr [rsp + 0x50], 0
0x460f:	mov	byte ptr [rsp + 0xe], 1
0x4614:	xor	r12d, r12d
0x4617:	mov	byte ptr [rsp + 0x7c], 0
0x461c:	jmp	0x43fb


0x43e1:	mov	byte ptr [r14], 0x22
0x43e5:	mov	byte ptr [rsp + 0xe], 1
0x43ea:	xor	r12d, r12d
0x43ed:	mov	byte ptr [rsp + 0x7c], 0
0x43f2:	mov	qword ptr [rsp + 0x50], 0
0x43fb:	lea	rax, [rip + 0x53b9]
0x4402:	mov	byte ptr [rsp + 0xf], 0
0x4407:	mov	byte ptr [rsp + 0xd], 1
0x440c:	mov	qword ptr [rsp + 0x18], 1
0x4415:	mov	r15d, 1
0x441b:	mov	qword ptr [rsp + 0x48], rax
0x4420:	jmp	0x37e3


0x43fb:	lea	rax, [rip + 0x53b9]
0x4402:	mov	byte ptr [rsp + 0xf], 0
0x4407:	mov	byte ptr [rsp + 0xd], 1
0x440c:	mov	qword ptr [rsp + 0x18], 1
0x4415:	mov	r15d, 1
0x441b:	mov	qword ptr [rsp + 0x48], rax
0x4420:	jmp	0x37e3


0x4425:	lea	rax, [rip + 0x538f]
0x442c:	mov	byte ptr [rsp + 0xe], 1
0x4431:	mov	byte ptr [rsp + 0x7c], 0
0x4436:	xor	r12d, r12d
0x4439:	mov	qword ptr [rsp + 0x50], 0
0x4442:	mov	byte ptr [rsp + 0xf], 1
0x4447:	mov	byte ptr [rsp + 0xd], 1
0x444c:	mov	qword ptr [rsp + 0x18], 1
0x4455:	xor	r15d, r15d
0x4458:	mov	qword ptr [rsp + 0x48], rax
0x445d:	mov	dword ptr [rsp + 8], 5
0x4465:	jmp	0x37e3


0x446a:	mov	byte ptr [rsp + 0xe], 1
0x446f:	mov	byte ptr [rsp + 0x7c], 0
0x4474:	xor	r12d, r12d
0x4477:	mov	qword ptr [rsp + 0x50], 0
0x4480:	mov	byte ptr [rsp + 0xf], 0
0x4485:	xor	r15d, r15d
0x4488:	mov	byte ptr [rsp + 0xd], 1
0x448d:	mov	qword ptr [rsp + 0x18], 0
0x4496:	mov	qword ptr [rsp + 0x48], 0
0x449f:	jmp	0x37e3


0x44a4:	cmp	dword ptr [rsp + 8], 0xa
0x44a9:	je	0x4501


0x4501:	xor	r15d, r15d
0x4504:	test	ebx, ebx
0x4506:	je	0x46cd


0x44ab:	lea	rsi, [rip + 0x530d]
0x44b2:	xor	edi, edi
0x44b4:	mov	edx, 5
0x44b9:	call	0x1aa0


0x46cd:	mov	rdx, qword ptr [rsp + 0x68]
0x46d2:	movzx	eax, byte ptr [rdx]
0x46d5:	test	al, al
0x46d7:	je	0x450c


0x450c:	test	ebx, ebx
0x450e:	mov	rbx, qword ptr [rsp + 0x60]
0x4513:	setne	byte ptr [rsp + 0xf]
0x4518:	xor	r12d, r12d
0x451b:	mov	rdi, rbx
0x451e:	call	0x1ac0


0x46e9:	add	r15, 1
0x46ed:	movzx	eax, byte ptr [rdx + r15]
0x46f2:	test	al, al
0x46f4:	jne	0x46e0


0x46e5:	mov	byte ptr [r14 + r15], al
0x46e9:	add	r15, 1
0x46ed:	movzx	eax, byte ptr [rdx + r15]
0x46f2:	test	al, al
0x46f4:	jne	0x46e0


0x46f6:	jmp	0x450c


0x46e0:	cmp	r13, r15
0x46e3:	jbe	0x46e9


0x4523:	mov	qword ptr [rsp + 0x48], rbx
0x4528:	mov	qword ptr [rsp + 0x18], rax
0x452d:	mov	byte ptr [rsp + 0xe], 1
0x4532:	mov	byte ptr [rsp + 0x7c], 0
0x4537:	mov	qword ptr [rsp + 0x50], 0
0x4540:	mov	byte ptr [rsp + 0xd], 1
0x4545:	jmp	0x37e3


0x44be:	mov	rcx, rax
0x44c1:	mov	qword ptr [rsp + 0x68], rax
0x44c6:	lea	rax, [rip + 0x52f2]
0x44cd:	cmp	rcx, rax
0x44d0:	je	0x486e


0x486e:	mov	esi, dword ptr [rsp + 8]
0x4872:	mov	rdi, rcx
0x4875:	call	0x3620


0x44d6:	lea	rsi, [rip + 0x52e0]
0x44dd:	xor	edi, edi
0x44df:	mov	edx, 5
0x44e4:	call	0x1aa0


0x44e9:	mov	rcx, rax
0x44ec:	mov	qword ptr [rsp + 0x60], rax
0x44f1:	lea	rax, [rip + 0x52c5]
0x44f8:	cmp	rcx, rax
0x44fb:	je	0x4884


0x4884:	mov	esi, dword ptr [rsp + 8]
0x4888:	mov	rdi, rcx
0x488b:	call	0x3620


0x4890:	mov	qword ptr [rsp + 0x60], rax
0x4895:	jmp	0x4501


0x487a:	mov	qword ptr [rsp + 0x68], rax
0x487f:	jmp	0x44d6


0x454a:	mov	byte ptr [rsp + 0xe], 1
0x454f:	mov	byte ptr [rsp + 0x7c], 0
0x4554:	xor	r12d, r12d
0x4557:	mov	qword ptr [rsp + 0x50], 0
0x4560:	mov	byte ptr [rsp + 0xf], 0
0x4565:	xor	r15d, r15d
0x4568:	mov	byte ptr [rsp + 0xd], 0
0x456d:	mov	qword ptr [rsp + 0x18], 0
0x4576:	mov	qword ptr [rsp + 0x48], 0
0x457f:	jmp	0x37e3


0x4584:	mov	byte ptr [rsp + 0xe], 1
0x4589:	mov	byte ptr [rsp + 0x7c], 0
0x458e:	xor	r12d, r12d
0x4591:	mov	qword ptr [rsp + 0x50], 0
0x459a:	mov	byte ptr [rsp + 0xf], 1
0x459f:	mov	byte ptr [rsp + 0xd], 1
0x45a4:	jmp	0x37c3


0x37c3:	lea	rax, [rip + 0x5ff3]
0x37ca:	mov	qword ptr [rsp + 0x18], 1
0x37d3:	xor	r15d, r15d
0x37d6:	mov	dword ptr [rsp + 8], 2
0x37de:	mov	qword ptr [rsp + 0x48], rax
0x37e3:	xor	r11d, r11d
0x37e6:	mov	rax, rbp
0x37e9:	mov	r8d, r12d
0x37ec:	mov	rbp, r11
0x37ef:	mov	r11, rax
0x37f2:	nop	word ptr [rax + rax]
0x37f8:	cmp	r11, rbp
0x37fb:	setne	r12b
0x37ff:	cmp	r11, -1
0x3803:	jne	0x3812


0x4778:	test	ebx, ebx
0x477a:	je	0x4908


0x4908:	mov	byte ptr [rsp + 0xd], 0
0x490d:	jmp	0x4381


0x4780:	lea	rax, [rip + 0x5036]
0x4787:	mov	byte ptr [rsp + 0xe], 1
0x478c:	mov	byte ptr [rsp + 0x7c], 0
0x4791:	xor	r12d, r12d
0x4794:	mov	qword ptr [rsp + 0x50], 0
0x479d:	mov	byte ptr [rsp + 0xf], 1
0x47a2:	mov	byte ptr [rsp + 0xd], 0
0x47a7:	mov	qword ptr [rsp + 0x18], 1
0x47b0:	xor	r15d, r15d
0x47b3:	mov	qword ptr [rsp + 0x48], rax
0x47b8:	jmp	0x37e3


0x4381:	test	r13, r13
0x4384:	jne	0x491a


0x4944:	nop	
0x4946:	nop	word ptr cs:[rax + rax]


0x4afb:	nop	dword ptr [rax + rax]


0x4b36:	nop	word ptr cs:[rax + rax]


0x4b51:	nop	dword ptr [rax + rax]
0x4b56:	nop	word ptr cs:[rax + rax]


0x4b71:	nop	dword ptr [rax + rax]
0x4b76:	nop	word ptr cs:[rax + rax]


0x4bb5:	nop	
0x4bb6:	nop	word ptr cs:[rax + rax]


0x4bd5:	nop	
0x4bd6:	nop	word ptr cs:[rax + rax]


0x4c84:	nop	
0x4c86:	nop	word ptr cs:[rax + rax]


0x4d73:	nop	dword ptr [rax]
0x4d76:	nop	word ptr cs:[rax + rax]


0x4d8a:	nop	word ptr [rax + rax]


0x4e23:	nop	dword ptr [rax]
0x4e26:	nop	word ptr cs:[rax + rax]


0x4e43:	nop	dword ptr [rax]
0x4e46:	nop	word ptr cs:[rax + rax]


0x4e5c:	nop	dword ptr [rax]


0x4e78:	nop	dword ptr [rax + rax]


0x4e94:	nop	
0x4e96:	nop	word ptr cs:[rax + rax]


0x4f2e:	nop	


0x4fba:	nop	word ptr [rax + rax]


0x4fcc:	nop	dword ptr [rax]


0x4fdf:	nop	


0x5078:	nop	dword ptr [rax + rax]


0x50a1:	nop	dword ptr [rax + rax]
0x50a6:	nop	word ptr cs:[rax + rax]


0x50ba:	nop	word ptr [rax + rax]


0x514e:	nop	


0x51e1:	nop	dword ptr [rax + rax]
0x51e6:	nop	word ptr cs:[rax + rax]


0x51fc:	nop	dword ptr [rax]


0x5217:	nop	word ptr [rax + rax]


0x5233:	nop	dword ptr [rax]
0x5236:	nop	word ptr cs:[rax + rax]


0x524c:	nop	dword ptr [rax]


0x5264:	nop	
0x5266:	nop	word ptr cs:[rax + rax]


0x5283:	nop	dword ptr [rax]
0x5286:	nop	word ptr cs:[rax + rax]


0x52a8:	nop	dword ptr [rax + rax]


0x52d3:	nop	dword ptr [rax]
0x52d6:	nop	word ptr cs:[rax + rax]


0x5314:	nop	
0x5316:	nop	word ptr cs:[rax + rax]


0x5324:	nop	
0x5326:	nop	word ptr cs:[rax + rax]


0x544a:	nop	word ptr [rax + rax]


0x546e:	nop	


0x54c1:	nop	word ptr cs:[rax + rax]
0x54cb:	nop	dword ptr [rax + rax]


0x54dc:	nop	dword ptr [rax]


0x54ea:	nop	word ptr [rax + rax]


0x5517:	nop	word ptr [rax + rax]


0x586f:	nop	


0x58cd:	nop	dword ptr [rax]


0x5bf9:	nop	dword ptr [rax]


0x5c05:	nop	
0x5c06:	nop	word ptr cs:[rax + rax]


0x5c15:	nop	
0x5c16:	nop	word ptr cs:[rax + rax]


0x5db6:	nop	word ptr cs:[rax + rax]


0x5e09:	nop	dword ptr [rax]


0x609e:	nop	


0x64b8:	nop	dword ptr [rax + rax]


0x6534:	nop	
0x6536:	nop	word ptr cs:[rax + rax]


0x654c:	nop	dword ptr [rax]


0x655c:	nop	dword ptr [rax]


0x6977:	nop	word ptr [rax + rax]


0x6a18:	nop	dword ptr [rax + rax]


0x6af5:	nop	
0x6af6:	nop	word ptr cs:[rax + rax]


0x6b9a:	nop	word ptr [rax + rax]


0x6bc4:	nop	
0x6bc6:	nop	word ptr cs:[rax + rax]


0x6bd2:	nop	dword ptr [rax]
0x6bd6:	nop	word ptr cs:[rax + rax]


0x6c16:	nop	word ptr cs:[rax + rax]


0x6c44:	nop	
0x6c46:	nop	word ptr cs:[rax + rax]


0x6cd2:	nop	dword ptr [rax]
0x6cd6:	nop	word ptr cs:[rax + rax]


0x6d2a:	nop	word ptr [rax + rax]


0x6d47:	nop	word ptr [rax + rax]


0x6d7e:	nop	


0x6da8:	nop	dword ptr [rax + rax]


0x6dc3:	nop	word ptr cs:[rax + rax]
0x6dcd:	nop	dword ptr [rax]


0x6e05:	nop	word ptr cs:[rax + rax]
0x6e0f:	nop	


0x6f31:	nop	word ptr cs:[rax + rax]
0x6f3b:	nop	dword ptr [rax + rax]


0x7118:	mov	rax, rbx
0x711b:	mul	rsi
0x711e:	jo	0x7311


0x7311:	or	rax, 0xffffffffffffffff
0x7315:	mov	r8d, 1
0x731b:	jmp	0x7127


0x7124:	xor	r8d, r8d
0x7127:	mul	rsi
0x712a:	jo	0x7302


0x7127:	mul	rsi
0x712a:	jo	0x7302


0x7302:	mov	r8d, 1
0x7308:	or	rbx, 0xffffffffffffffff
0x730c:	jmp	0x7133


0x7130:	mov	rbx, rax
0x7133:	or	ebp, r8d
0x7136:	nop	word ptr cs:[rax + rax]
0x7140:	movsxd	rdi, edi
0x7143:	mov	eax, ebp
0x7145:	add	rcx, rdi
0x7148:	or	eax, 2
0x714b:	mov	qword ptr [r15], rcx
0x714e:	cmp	byte ptr [rcx], 0
0x7151:	mov	qword ptr [r14], rbx
0x7154:	cmovne	ebp, eax
0x7157:	jmp	0x701d


0x7133:	or	ebp, r8d
0x7136:	nop	word ptr cs:[rax + rax]
0x7140:	movsxd	rdi, edi
0x7143:	mov	eax, ebp
0x7145:	add	rcx, rdi
0x7148:	or	eax, 2
0x714b:	mov	qword ptr [r15], rcx
0x714e:	cmp	byte ptr [rcx], 0
0x7151:	mov	qword ptr [r14], rbx
0x7154:	cmovne	ebp, eax
0x7157:	jmp	0x701d


0x7167:	mov	edx, 2
0x716c:	mov	rax, rdx
0x716f:	mul	rbx
0x7172:	jo	0x720e


0x720e:	mov	ebp, 1
0x7213:	or	rbx, 0xffffffffffffffff
0x7217:	jmp	0x7140


0x7178:	add	rbx, rbx
0x717b:	jmp	0x7140


0x7140:	movsxd	rdi, edi
0x7143:	mov	eax, ebp
0x7145:	add	rcx, rdi
0x7148:	or	eax, 2
0x714b:	mov	qword ptr [r15], rcx
0x714e:	cmp	byte ptr [rcx], 0
0x7151:	mov	qword ptr [r14], rbx
0x7154:	cmovne	ebp, eax
0x7157:	jmp	0x701d


0x717d:	mov	edx, 0x200
0x7182:	mov	rax, rdx
0x7185:	mul	rbx
0x7188:	jo	0x720e


0x718e:	shl	rbx, 9
0x7192:	jmp	0x7140


0x7194:	mov	r8d, 7
0x719a:	xor	r9d, r9d
0x719d:	nop	dword ptr [rax]
0x71a0:	mov	rax, rbx
0x71a3:	mul	rsi
0x71a6:	mov	rbx, rax
0x71a9:	jo	0x733e


0x733e:	mov	r9d, 1
0x7344:	or	rbx, 0xffffffffffffffff
0x7348:	jmp	0x71af


0x71af:	sub	r8d, 1
0x71b3:	jne	0x71a0


0x71b5:	or	ebp, r9d
0x71b8:	jmp	0x7140


0x71a0:	mov	rax, rbx
0x71a3:	mul	rsi
0x71a6:	mov	rbx, rax
0x71a9:	jo	0x733e


0x71ba:	mov	r8d, 8
0x71c0:	xor	r9d, r9d
0x71c3:	nop	dword ptr [rax + rax]
0x71c8:	mov	rax, rbx
0x71cb:	mul	rsi
0x71ce:	mov	rbx, rax
0x71d1:	jo	0x7320


0x7320:	mov	r9d, 1
0x7326:	or	rbx, 0xffffffffffffffff
0x732a:	jmp	0x71d7


0x71d7:	sub	r8d, 1
0x71db:	jne	0x71c8


0x71dd:	jmp	0x71b5


0x71c8:	mov	rax, rbx
0x71cb:	mul	rsi
0x71ce:	mov	rbx, rax
0x71d1:	jo	0x7320


0x71df:	mov	r8d, 4
0x71e5:	xor	r9d, r9d
0x71e8:	mov	rax, rbx
0x71eb:	mul	rsi
0x71ee:	mov	rbx, rax
0x71f1:	jo	0x72f3


0x72f3:	mov	r9d, 1
0x72f9:	or	rbx, 0xffffffffffffffff
0x72fd:	jmp	0x71f7


0x71f7:	sub	r8d, 1
0x71fb:	jne	0x71e8


0x71fd:	jmp	0x71b5


0x71e8:	mov	rax, rbx
0x71eb:	mul	rsi
0x71ee:	mov	rbx, rax
0x71f1:	jo	0x72f3


0x71ff:	mov	rax, rbx
0x7202:	mul	rsi
0x7205:	mov	rbx, rax
0x7208:	jno	0x7140


0x732f:	mov	r9d, 1
0x7335:	or	rbx, 0xffffffffffffffff
0x7339:	jmp	0x7238


0x7238:	sub	r8d, 1
0x723c:	jne	0x7229


0x723e:	jmp	0x71b5


0x7229:	mov	rax, rbx
0x722c:	mul	rsi
0x722f:	mov	rbx, rax
0x7232:	jo	0x732f


0x7243:	mov	r8d, 6
0x7249:	xor	r9d, r9d
0x724c:	mov	rax, rbx
0x724f:	mul	rsi
0x7252:	mov	rbx, rax
0x7255:	jo	0x72e4


0x72e4:	mov	r9d, 1
0x72ea:	or	rbx, 0xffffffffffffffff
0x72ee:	jmp	0x725b


0x725b:	sub	r8d, 1
0x725f:	jne	0x724c


0x7261:	jmp	0x71b5


0x724c:	mov	rax, rbx
0x724f:	mul	rsi
0x7252:	mov	rbx, rax
0x7255:	jo	0x72e4


0x7266:	mov	edx, 0x400
0x726b:	mov	rax, rdx
0x726e:	mul	rbx
0x7271:	jo	0x720e


0x7273:	shl	rbx, 0xa
0x7277:	jmp	0x7140


0x727c:	mov	rax, rbx
0x727f:	mul	rsi
0x7282:	jo	0x734d


0x734d:	mov	r8d, 1
0x7353:	or	rax, 0xffffffffffffffff
0x7357:	jmp	0x728b


0x7288:	xor	r8d, r8d
0x728b:	mul	rsi
0x728e:	jno	0x7127


0x728b:	mul	rsi
0x728e:	jno	0x7127


0x7294:	mov	r8d, 1
0x729a:	or	rax, 0xffffffffffffffff
0x729e:	jmp	0x7127


0x735c:	nop	dword ptr [rax]


0x7538:	mov	rax, rbx
0x753b:	mul	rsi
0x753e:	jo	0x7731


0x7731:	or	rax, 0xffffffffffffffff
0x7735:	mov	r8d, 1
0x773b:	jmp	0x7547


0x7544:	xor	r8d, r8d
0x7547:	mul	rsi
0x754a:	jo	0x7722


0x7547:	mul	rsi
0x754a:	jo	0x7722


0x7722:	mov	r8d, 1
0x7728:	or	rbx, 0xffffffffffffffff
0x772c:	jmp	0x7553


0x7550:	mov	rbx, rax
0x7553:	or	ebp, r8d
0x7556:	nop	word ptr cs:[rax + rax]
0x7560:	movsxd	rdi, edi
0x7563:	mov	eax, ebp
0x7565:	add	rcx, rdi
0x7568:	or	eax, 2
0x756b:	mov	qword ptr [r15], rcx
0x756e:	cmp	byte ptr [rcx], 0
0x7571:	mov	qword ptr [r14], rbx
0x7574:	cmovne	ebp, eax
0x7577:	jmp	0x743d


0x7553:	or	ebp, r8d
0x7556:	nop	word ptr cs:[rax + rax]
0x7560:	movsxd	rdi, edi
0x7563:	mov	eax, ebp
0x7565:	add	rcx, rdi
0x7568:	or	eax, 2
0x756b:	mov	qword ptr [r15], rcx
0x756e:	cmp	byte ptr [rcx], 0
0x7571:	mov	qword ptr [r14], rbx
0x7574:	cmovne	ebp, eax
0x7577:	jmp	0x743d


0x7587:	mov	edx, 2
0x758c:	mov	rax, rdx
0x758f:	mul	rbx
0x7592:	jo	0x762e


0x762e:	mov	ebp, 1
0x7633:	or	rbx, 0xffffffffffffffff
0x7637:	jmp	0x7560


0x7598:	add	rbx, rbx
0x759b:	jmp	0x7560


0x7560:	movsxd	rdi, edi
0x7563:	mov	eax, ebp
0x7565:	add	rcx, rdi
0x7568:	or	eax, 2
0x756b:	mov	qword ptr [r15], rcx
0x756e:	cmp	byte ptr [rcx], 0
0x7571:	mov	qword ptr [r14], rbx
0x7574:	cmovne	ebp, eax
0x7577:	jmp	0x743d


0x759d:	mov	edx, 0x200
0x75a2:	mov	rax, rdx
0x75a5:	mul	rbx
0x75a8:	jo	0x762e


0x75ae:	shl	rbx, 9
0x75b2:	jmp	0x7560


0x75b4:	mov	r8d, 7
0x75ba:	xor	r9d, r9d
0x75bd:	nop	dword ptr [rax]
0x75c0:	mov	rax, rbx
0x75c3:	mul	rsi
0x75c6:	mov	rbx, rax
0x75c9:	jo	0x775e


0x775e:	mov	r9d, 1
0x7764:	or	rbx, 0xffffffffffffffff
0x7768:	jmp	0x75cf


0x75cf:	sub	r8d, 1
0x75d3:	jne	0x75c0


0x75d5:	or	ebp, r9d
0x75d8:	jmp	0x7560


0x75c0:	mov	rax, rbx
0x75c3:	mul	rsi
0x75c6:	mov	rbx, rax
0x75c9:	jo	0x775e


0x75da:	mov	r8d, 8
0x75e0:	xor	r9d, r9d
0x75e3:	nop	dword ptr [rax + rax]
0x75e8:	mov	rax, rbx
0x75eb:	mul	rsi
0x75ee:	mov	rbx, rax
0x75f1:	jo	0x7740


0x7740:	mov	r9d, 1
0x7746:	or	rbx, 0xffffffffffffffff
0x774a:	jmp	0x75f7


0x75f7:	sub	r8d, 1
0x75fb:	jne	0x75e8


0x75fd:	jmp	0x75d5


0x75e8:	mov	rax, rbx
0x75eb:	mul	rsi
0x75ee:	mov	rbx, rax
0x75f1:	jo	0x7740


0x75ff:	mov	r8d, 4
0x7605:	xor	r9d, r9d
0x7608:	mov	rax, rbx
0x760b:	mul	rsi
0x760e:	mov	rbx, rax
0x7611:	jo	0x7713


0x7713:	mov	r9d, 1
0x7719:	or	rbx, 0xffffffffffffffff
0x771d:	jmp	0x7617


0x7617:	sub	r8d, 1
0x761b:	jne	0x7608


0x761d:	jmp	0x75d5


0x7608:	mov	rax, rbx
0x760b:	mul	rsi
0x760e:	mov	rbx, rax
0x7611:	jo	0x7713


0x761f:	mov	rax, rbx
0x7622:	mul	rsi
0x7625:	mov	rbx, rax
0x7628:	jno	0x7560


0x774f:	mov	r9d, 1
0x7755:	or	rbx, 0xffffffffffffffff
0x7759:	jmp	0x7658


0x7658:	sub	r8d, 1
0x765c:	jne	0x7649


0x765e:	jmp	0x75d5


0x7649:	mov	rax, rbx
0x764c:	mul	rsi
0x764f:	mov	rbx, rax
0x7652:	jo	0x774f


0x7663:	mov	r8d, 6
0x7669:	xor	r9d, r9d
0x766c:	mov	rax, rbx
0x766f:	mul	rsi
0x7672:	mov	rbx, rax
0x7675:	jo	0x7704


0x7704:	mov	r9d, 1
0x770a:	or	rbx, 0xffffffffffffffff
0x770e:	jmp	0x767b


0x767b:	sub	r8d, 1
0x767f:	jne	0x766c


0x7681:	jmp	0x75d5


0x766c:	mov	rax, rbx
0x766f:	mul	rsi
0x7672:	mov	rbx, rax
0x7675:	jo	0x7704


0x7686:	mov	edx, 0x400
0x768b:	mov	rax, rdx
0x768e:	mul	rbx
0x7691:	jo	0x762e


0x7693:	shl	rbx, 0xa
0x7697:	jmp	0x7560


0x769c:	mov	rax, rbx
0x769f:	mul	rsi
0x76a2:	jo	0x776d


0x776d:	mov	r8d, 1
0x7773:	or	rax, 0xffffffffffffffff
0x7777:	jmp	0x76ab


0x76a8:	xor	r8d, r8d
0x76ab:	mul	rsi
0x76ae:	jno	0x7547


0x76ab:	mul	rsi
0x76ae:	jno	0x7547


0x76b4:	mov	r8d, 1
0x76ba:	or	rax, 0xffffffffffffffff
0x76be:	jmp	0x7547


0x777c:	nop	dword ptr [rax]


0x77fb:	nop	dword ptr [rax + rax]


0x7897:	nop	word ptr [rax + rax]


0x7923:	nop	word ptr cs:[rax + rax]
0x792d:	nop	dword ptr [rax]


0x79ad:	nop	dword ptr [rax]


0x7a43:	nop	word ptr cs:[rax + rax]
0x7a4d:	nop	dword ptr [rax]


0x7b43:	nop	dword ptr [rax]
0x7b46:	nop	word ptr cs:[rax + rax]


0x7b67:	nop	word ptr [rax + rax]


0x7b92:	nop	dword ptr [rax]
0x7b96:	nop	word ptr cs:[rax + rax]


0x7cbe:	nop	


0x7d37:	nop	word ptr [rax + rax]


0x7e85:	nop	
0x7e86:	nop	word ptr cs:[rax + rax]


0x7e95:	nop	
0x7e96:	nop	word ptr cs:[rax + rax]


0x7ea5:	nop	
0x7ea6:	nop	word ptr cs:[rax + rax]


0x7ef9:	nop	dword ptr [rax]


0x7f58:	nop	dword ptr [rax + rax]


0x80a7:	nop	word ptr [rax + rax]


0x810b:	nop	dword ptr [rax + rax]


0x8151:	nop	dword ptr [rax + rax]
0x8156:	nop	word ptr cs:[rax + rax]


0x81d2:	nop	dword ptr [rax]
0x81d6:	nop	word ptr cs:[rax + rax]


0x8245:	nop	
0x8246:	nop	word ptr cs:[rax + rax]


0x82ba:	nop	word ptr [rax + rax]


0x82f1:	nop	dword ptr [rax + rax]
0x82f6:	nop	word ptr cs:[rax + rax]


0x84d4:	nop	
0x84d6:	nop	word ptr cs:[rax + rax]


0x8646:	nop	word ptr cs:[rax + rax]


0x888e:	nop	


0x8b14:	nop	
0x8b16:	nop	word ptr cs:[rax + rax]


0x8b79:	nop	dword ptr [rax]


0x8d83:	nop	word ptr cs:[rax + rax]
0x8d8d:	nop	dword ptr [rax]


0x8dcc:	nop	dword ptr [rax]


0x8dde:	nop	


0x905e:	nop	


0x90c5:	nop	
0x90c6:	nop	word ptr cs:[rax + rax]


0x90d2:	nop	word ptr cs:[rax + rax]
0x90dc:	nop	dword ptr [rax]


0x39d0:	xor	r10d, r10d
0x39d3:	mov	eax, dword ptr [rsp + 8]
0x39d7:	cmp	eax, 2
0x39da:	je	0x3f98


0x3a00:	xor	r10d, r10d
0x3a03:	cmp	dword ptr [rsp + 8], 2
0x3a08:	je	0x3f10


0x3a28:	mov	edx, 9
0x3a2d:	mov	ebx, 0x74
0x3a32:	cmp	dword ptr [rsp + 8], 2
0x3a37:	sete	al
0x3a3a:	and	al, byte ptr [rsp + 0xf]
0x3a3e:	jne	0x3b8e


0x3a68:	mov	edx, 8
0x3a6d:	mov	ebx, 0x62
0x3a72:	jmp	0x3a44


0x3a78:	cmp	dword ptr [rsp + 8], 2
0x3a7d:	je	0x3e50


0x3b20:	cmp	byte ptr [rsp + 0xd], 0
0x3b25:	jne	0x3cf3


0x3b48:	cmp	dword ptr [rsp + 8], 2
0x3b4d:	sete	dl
0x3b50:	xor	eax, eax
0x3b52:	jmp	0x3938


0x3b60:	mov	edx, 7
0x3b65:	mov	ebx, 0x61
0x3b6a:	jmp	0x3a44


0x3b70:	cmp	dword ptr [rsp + 8], 2
0x3b75:	sete	dl
0x3b78:	test	rbp, rbp
0x3b7b:	jne	0x392c


0x3ba0:	cmp	dword ptr [rsp + 8], 2
0x3ba5:	sete	dl
0x3ba8:	xor	r12d, r12d
0x3bab:	jmp	0x3b81


0x3bb0:	cmp	dword ptr [rsp + 8], 2
0x3bb5:	mov	ebx, 0x20
0x3bba:	sete	dl
0x3bbd:	jmp	0x3b81


0x3bc0:	mov	edx, 0xd
0x3bc5:	mov	ebx, 0x72
0x3bca:	jmp	0x3a32


0x3bd0:	mov	edx, 0xc
0x3bd5:	mov	ebx, 0x66
0x3bda:	jmp	0x3a44


0x3be0:	mov	edx, 0xb
0x3be5:	mov	ebx, 0x76
0x3bea:	jmp	0x3a44


0x3bf0:	mov	edx, 0xa
0x3bf5:	mov	ebx, 0x6e
0x3bfa:	jmp	0x3a32


0x3c90:	xor	r10d, r10d
0x3c93:	cmp	byte ptr [rsp + 0xd], 0
0x3c98:	jne	0x3a8e


0x3cb0:	mov	edx, 0xc
0x3cb5:	xor	r10d, r10d
0x3cb8:	mov	ebx, 0x66
0x3cbd:	jmp	0x3a44


0x3cc8:	mov	edx, 0xa
0x3ccd:	xor	r10d, r10d
0x3cd0:	mov	ebx, 0x6e
0x3cd5:	jmp	0x3a32


0x3ce0:	mov	ebx, 0x61
0x3ce5:	jmp	0x3ab0


0x3cf0:	xor	r10d, r10d
0x3cf3:	cmp	dword ptr [rsp + 8], 2
0x3cf8:	sete	dl
0x3cfb:	cmp	byte ptr [rsp + 0xf], 0
0x3d00:	jne	0x489a


0x3d90:	cmp	dword ptr [rsp + 8], 2
0x3d95:	mov	r12d, r10d
0x3d98:	sete	dl
0x3d9b:	xor	r10d, r10d
0x3d9e:	xor	eax, eax
0x3da0:	jmp	0x3938


0x3da8:	cmp	dword ptr [rsp + 8], 2
0x3dad:	sete	dl
0x3db0:	xor	r10d, r10d
0x3db3:	jmp	0x3b78


0x3dc0:	cmp	dword ptr [rsp + 8], 2
0x3dc5:	sete	dl
0x3dc8:	xor	r10d, r10d
0x3dcb:	xor	r12d, r12d
0x3dce:	jmp	0x3b81


0x3dd8:	cmp	dword ptr [rsp + 8], 2
0x3ddd:	mov	r12d, r10d
0x3de0:	mov	ebx, 0x20
0x3de5:	sete	dl
0x3de8:	xor	r10d, r10d
0x3deb:	jmp	0x3b81


0x3e08:	mov	ebx, 0x76
0x3e0d:	jmp	0x3ab0


0x3e18:	mov	edx, 9
0x3e1d:	xor	r10d, r10d
0x3e20:	mov	ebx, 0x74
0x3e25:	jmp	0x3a32


0x3e30:	mov	ebx, 0x62
0x3e35:	jmp	0x3ab0


0x43d0:	test	ebx, ebx
0x43d2:	jne	0x47cd


0x7220:	mov	r8d, 5
0x7226:	xor	r9d, r9d
0x7229:	mov	rax, rbx
0x722c:	mul	rsi
0x722f:	mov	rbx, rax
0x7232:	jo	0x732f


0x7640:	mov	r8d, 5
0x7646:	xor	r9d, r9d
0x7649:	mov	rax, rbx
0x764c:	mul	rsi
0x764f:	mov	rbx, rax
0x7652:	jo	0x774f


0x1f06:	nop	word ptr cs:[rax + rax]


0x1ffc:	nop	dword ptr [rax]


0x200a:	nop	word ptr [rax + rax]


0x2044:	nop	dword ptr [rax]


0x2082:	nop	word ptr [rax + rax]


0x2092:	nop	word ptr [rax + rax]


0x20a2:	nop	word ptr [rax + rax]


0x2c96:	nop	word ptr cs:[rax + rax]


0x2ce7:	nop	word ptr [rax + rax]


0x2d31:	nop	dword ptr [rax]


0x322b:	nop	dword ptr [rax + rax]


0x3382:	nop	word ptr [rax + rax]


0x3391:	nop	dword ptr [rax]


0x33c8:	nop	dword ptr [rax + rax]


0x33e8:	nop	dword ptr [rax + rax]


0x340f:	nop	


0x3417:	nop	word ptr [rax + rax]


0x3429:	nop	dword ptr [rax]


0x34ff:	nop	


0x353b:	nop	dword ptr [rax + rax]


0x365c:	nop	dword ptr [rax]


0x36ad:	nop	dword ptr [rax]


0x38d8:	nop	dword ptr [rax + rax]


0x39c7:	nop	word ptr [rax + rax]


0x39fe:	nop	


0x3a21:	nop	dword ptr [rax]


0x3a62:	nop	word ptr [rax + rax]


0x3a74:	nop	dword ptr [rax]


0x3b18:	nop	dword ptr [rax + rax]


0x3b41:	nop	dword ptr [rax]


0x3b57:	nop	word ptr [rax + rax]


0x3b6f:	nop	


0x3b9e:	nop	


0x3bad:	nop	dword ptr [rax]


0x3bbf:	nop	


0x3bcf:	nop	


0x3bdf:	nop	


0x3bef:	nop	


0x3bff:	nop	


0x3c6c:	nop	dword ptr [rax]


0x3c8c:	nop	dword ptr [rax]


0x3c9e:	nop	


0x3caf:	nop	


0x3cc2:	nop	word ptr [rax + rax]


0x3cda:	nop	word ptr [rax + rax]


0x3cea:	nop	word ptr [rax + rax]


0x3d8b:	nop	dword ptr [rax + rax]


0x3da5:	nop	dword ptr [rax]


0x3db8:	nop	dword ptr [rax + rax]


0x3dd3:	nop	dword ptr [rax + rax]


0x3e02:	nop	word ptr [rax + rax]


0x3e12:	nop	word ptr [rax + rax]


0x3e2a:	nop	word ptr [rax + rax]


0x3e3a:	nop	word ptr [rax + rax]


0x3e48:	nop	dword ptr [rax + rax]


0x3e6f:	nop	


0x3f09:	nop	dword ptr [rax]


0x3f52:	nop	word ptr [rax + rax]


0x3f78:	nop	dword ptr [rax + rax]


0x3f91:	nop	dword ptr [rax]


0x3fb2:	nop	word ptr [rax + rax]


0x4118:	nop	dword ptr [rax + rax]


0x422b:	nop	dword ptr [rax + rax]


0x424e:	nop	


0x4315:	nop	dword ptr [rax]


0x43cd:	nop	dword ptr [rax]


0x45d6:	nop	word ptr cs:[rax + rax]


0x4669:	nop	dword ptr [rax]


0x46dd:	nop	dword ptr [rax]


0x47bd:	nop	dword ptr [rax]


0x4acb:	nop	dword ptr [rax + rax]


0x530d:	nop	dword ptr [rax]


0x536f:	nop	


0x5431:	nop	dword ptr [rax]


0x5598:	nop	dword ptr [rax + rax]


0x5624:	nop	dword ptr [rax]


0x56a7:	nop	word ptr [rax + rax]


0x57e2:	nop	word ptr [rax + rax]


0x57ef:	nop	


0x5809:	nop	dword ptr [rax]


0x5833:	nop	dword ptr [rax + rax]


0x597d:	nop	dword ptr [rax]


0x5a12:	nop	word ptr [rax + rax]


0x5a44:	nop	dword ptr [rax]


0x5b12:	nop	word ptr [rax + rax]


0x5c53:	nop	dword ptr [rax + rax]


0x5ca1:	nop	dword ptr [rax]


0x5d08:	nop	dword ptr [rax + rax]


0x5d4e:	nop	


0x5df8:	nop	dword ptr [rax + rax]


0x635e:	nop	


0x641c:	nop	dword ptr [rax]


0x643b:	nop	dword ptr [rax + rax]


0x645e:	nop	


0x6485:	nop	dword ptr [rax]


0x6529:	nop	dword ptr [rax]


0x6606:	nop	word ptr cs:[rax + rax]


0x6695:	nop	dword ptr [rax]


0x66b6:	nop	word ptr cs:[rax + rax]


0x6715:	nop	dword ptr [rax]


0x6751:	nop	dword ptr [rax]


0x6798:	nop	dword ptr [rax + rax]


0x67e7:	nop	word ptr [rax + rax]


0x6844:	nop	dword ptr [rax]


0x6872:	nop	word ptr [rax + rax]


0x6926:	nop	word ptr cs:[rax + rax]


0x6989:	nop	dword ptr [rax]


0x6c02:	nop	word ptr [rax + rax]


0x6c89:	nop	dword ptr [rax]


0x6cb4:	nop	dword ptr [rax]


0x6d0d:	nop	dword ptr [rax]


0x6ed6:	nop	word ptr cs:[rax + rax]


0x6eff:	nop	


0x6fa6:	nop	word ptr cs:[rax + rax]


0x7001:	nop	dword ptr [rax]


0x7012:	nop	word ptr [rax + rax]


0x7042:	nop	word ptr [rax + rax]


0x704c:	nop	dword ptr [rax]


0x70eb:	nop	dword ptr [rax + rax]


0x721c:	nop	dword ptr [rax]


0x72a3:	nop	dword ptr [rax + rax]


0x73c6:	nop	word ptr cs:[rax + rax]


0x7423:	nop	dword ptr [rax + rax]


0x7432:	nop	word ptr [rax + rax]


0x7462:	nop	word ptr [rax + rax]


0x746c:	nop	dword ptr [rax]


0x750b:	nop	dword ptr [rax + rax]


0x763c:	nop	dword ptr [rax]


0x76c3:	nop	dword ptr [rax + rax]


0x77c5:	nop	dword ptr [rax]


0x7823:	nop	dword ptr [rax + rax]


0x784f:	nop	


0x7964:	nop	dword ptr [rax]


0x7981:	nop	dword ptr [rax]


0x7992:	nop	word ptr [rax + rax]


0x79d9:	nop	dword ptr [rax]


0x7a25:	nop	dword ptr [rax]


0x7a8a:	nop	word ptr [rax + rax]


0x7ad1:	nop	dword ptr [rax]


0x7b0e:	nop	


0x7bfb:	nop	dword ptr [rax + rax]


0x7c5a:	nop	word ptr [rax + rax]


0x7c99:	nop	dword ptr [rax]


0x7ca9:	nop	dword ptr [rax]


0x7d2e:	nop	


0x7d81:	nop	dword ptr [rax]


0x7e4c:	nop	dword ptr [rax]


0x7e5a:	nop	word ptr [rax + rax]


0x7ebe:	nop	


0x7ed4:	nop	dword ptr [rax]


0x7f27:	nop	word ptr [rax + rax]


0x7f87:	nop	word ptr [rax + rax]


0x7fa4:	nop	dword ptr [rax]


0x805b:	nop	dword ptr [rax + rax]


0x80cc:	nop	dword ptr [rax]


0x80f7:	nop	word ptr [rax + rax]


0x812b:	nop	dword ptr [rax + rax]


0x8183:	nop	dword ptr [rax + rax]


0x81a4:	nop	dword ptr [rax]


0x81c2:	nop	word ptr [rax + rax]


0x820a:	nop	word ptr [rax + rax]


0x823b:	nop	dword ptr [rax + rax]


0x827f:	nop	


0x82c9:	nop	dword ptr [rax]


0x840f:	nop	


0x842c:	nop	dword ptr [rax]


0x848f:	nop	


0x84b6:	nop	word ptr cs:[rax + rax]


0x8505:	nop	dword ptr [rax]


0x8591:	nop	dword ptr [rax]


0x85a6:	nop	word ptr cs:[rax + rax]


0x85d8:	nop	dword ptr [rax + rax]


0x85e9:	nop	dword ptr [rax]


0x8616:	nop	word ptr cs:[rax + rax]


0x87cf:	nop	


0x87f1:	nop	dword ptr [rax]


0x8816:	nop	word ptr cs:[rax + rax]


0x882a:	nop	word ptr [rax + rax]


0x8837:	nop	word ptr [rax + rax]


0x88fb:	nop	dword ptr [rax + rax]


0x897e:	nop	


0x89c8:	nop	dword ptr [rax + rax]


0x8a72:	nop	word ptr [rax + rax]


0x8aad:	nop	dword ptr [rax]


0x8ace:	nop	


0x8aee:	nop	


0x8b66:	nop	word ptr cs:[rax + rax]


0x8bdf:	nop	


0x8ca5:	nop	dword ptr [rax]


0x8cc6:	nop	word ptr cs:[rax + rax]


0x8cee:	nop	


0x8d0e:	nop	


0x8d2f:	nop	


0x8d3a:	nop	word ptr [rax + rax]


0x8d5e:	nop	


0x8db6:	nop	word ptr cs:[rax + rax]


0x8e7b:	nop	dword ptr [rax + rax]


0x8ea6:	nop	word ptr cs:[rax + rax]


0x8edf:	nop	


0x8f29:	nop	dword ptr [rax]


0x8f4b:	nop	dword ptr [rax + rax]


0x8ff1:	nop	dword ptr [rax]


