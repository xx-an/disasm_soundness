0x5250:	sub	rsp, 8
0x5254:	add	rsp, 8
0x5258:	ret	


0x5240:	mov	rdx, qword ptr [rip + 0x202dc1]
0x5247:	xor	esi, esi
0x5249:	jmp	0x16f0


0x5230:	ret	


0x51c0:	push	r15
0x51c2:	push	r14
0x51c4:	mov	r15, rdx
0x51c7:	push	r13
0x51c9:	push	r12
0x51cb:	lea	r12, [rip + 0x20293e]
0x51d2:	push	rbp
0x51d3:	lea	rbp, [rip + 0x20293e]
0x51da:	push	rbx
0x51db:	mov	r13d, edi
0x51de:	mov	r14, rsi
0x51e1:	sub	rbp, r12
0x51e4:	sub	rsp, 8
0x51e8:	sar	rbp, 3
0x51ec:	call	0x1430


0x5180:	sub	rsp, 8
0x5184:	mov	edi, 0xe
0x5189:	call	0x1650


0x5120:	sub	rsp, 8
0x5124:	xor	esi, esi
0x5126:	call	0x1690


0x50a0:	push	r12
0x50a2:	push	rbp
0x50a3:	mov	rbp, rdi
0x50a6:	push	rbx
0x50a7:	call	0x14c0


0x5010:	push	r13
0x5012:	push	r12
0x5014:	mov	r13, rsi
0x5017:	push	rbp
0x5018:	push	rbx
0x5019:	mov	rbx, rdi
0x501c:	mov	r12, rdx
0x501f:	sub	rsp, 0x18
0x5023:	mov	rax, qword ptr fs:[0x28]
0x502c:	mov	qword ptr [rsp + 8], rax
0x5031:	xor	eax, eax
0x5033:	lea	rax, [rsp + 4]
0x5038:	test	rdi, rdi
0x503b:	cmove	rbx, rax
0x503f:	mov	rdi, rbx
0x5042:	call	0x1550


0x4fb0:	mov	rax, qword ptr [rdi + 8]
0x4fb4:	cmp	qword ptr [rdi + 0x10], rax
0x4fb8:	je	0x4fc0


0x4f70:	test	rdi, rdi
0x4f73:	push	rbx
0x4f74:	mov	rbx, rdi
0x4f77:	je	0x4f8a


0x4ef0:	push	r12
0x4ef2:	push	rbp
0x4ef3:	push	rbx
0x4ef4:	mov	rbx, rdi
0x4ef7:	call	0x1620


0x4ad0:	push	r15
0x4ad2:	push	r14
0x4ad4:	push	r13
0x4ad6:	push	r12
0x4ad8:	push	rbp
0x4ad9:	push	rbx
0x4ada:	sub	rsp, 0x28
0x4ade:	mov	rax, qword ptr fs:[0x28]
0x4ae7:	mov	qword ptr [rsp + 0x18], rax
0x4aec:	xor	eax, eax
0x4aee:	cmp	edx, 0x24
0x4af1:	ja	0x4e55


0x4aa0:	sub	rsp, 0x10
0x4aa4:	push	r9
0x4aa6:	mov	r9, r8
0x4aa9:	mov	r8, rcx
0x4aac:	mov	rcx, rdx
0x4aaf:	mov	rdx, rsi
0x4ab2:	mov	esi, 0xa
0x4ab7:	call	0x49a0


0x49a0:	push	r15
0x49a2:	push	r14
0x49a4:	mov	r15, rcx
0x49a7:	push	r13
0x49a9:	push	r12
0x49ab:	mov	r14, rdx
0x49ae:	push	rbp
0x49af:	push	rbx
0x49b0:	mov	edx, esi
0x49b2:	xor	esi, esi
0x49b4:	mov	r12, rdi
0x49b7:	mov	r13, r9
0x49ba:	sub	rsp, 0x18
0x49be:	mov	rcx, rsp
0x49c1:	mov	ebx, dword ptr [rsp + 0x50]
0x49c5:	mov	rax, qword ptr fs:[0x28]
0x49ce:	mov	qword ptr [rsp + 8], rax
0x49d3:	xor	eax, eax
0x49d5:	call	0x4ad0


0x4960:	lea	rsi, [rip + 0x15a8]
0x4967:	sub	rsp, 8
0x496b:	mov	edx, 5
0x4970:	xor	edi, edi
0x4972:	call	0x1500


0x4940:	push	rbx
0x4941:	mov	rbx, rdi
0x4944:	call	0x1520


0x4910:	push	rbp
0x4911:	push	rbx
0x4912:	mov	rbp, rdi
0x4915:	mov	rdi, rsi
0x4918:	mov	rbx, rsi
0x491b:	sub	rsp, 8
0x491f:	call	0x4710


0x48e0:	mov	rax, rdi
0x48e3:	sub	rsp, 8
0x48e7:	mul	rsi
0x48ea:	seto	dl
0x48ed:	test	rax, rax
0x48f0:	js	0x4909


0x48c0:	push	rbx
0x48c1:	mov	rbx, rdi
0x48c4:	call	0x4710


0x4870:	test	rdi, rdi
0x4873:	mov	rax, qword ptr [rsi]
0x4876:	je	0x48a0


0x47e0:	test	rdi, rdi
0x47e3:	mov	r9, rdx
0x47e6:	mov	rcx, qword ptr [rsi]
0x47e9:	je	0x4820


0x47b0:	mov	rax, rsi
0x47b3:	mul	rdx
0x47b6:	mov	rsi, rax
0x47b9:	seto	al
0x47bc:	test	rsi, rsi
0x47bf:	js	0x47cb


0x4770:	test	rsi, rsi
0x4773:	push	rbx
0x4774:	mov	rbx, rsi
0x4777:	jne	0x477e


0x4760:	jmp	0x4710


0x4730:	mov	rax, rdi
0x4733:	mul	rsi
0x4736:	mov	rdi, rax
0x4739:	seto	al
0x473c:	test	rdi, rdi
0x473f:	js	0x474b


0x4710:	push	rbx
0x4711:	mov	rbx, rdi
0x4714:	call	0x1630


0x4690:	push	rbx
0x4691:	lea	rsi, [rip + 0x156a]
0x4698:	mov	edx, 5
0x469d:	xor	edi, edi
0x469f:	call	0x1500


0x45b0:	push	rbp
0x45b1:	push	rbx
0x45b2:	mov	r10d, 0x20
0x45b8:	xor	r11d, r11d
0x45bb:	sub	rsp, 0xb8
0x45c2:	mov	rax, qword ptr fs:[0x28]
0x45cb:	mov	qword ptr [rsp + 0x78], rax
0x45d0:	xor	eax, eax
0x45d2:	lea	rax, [rsp + 0xd0]
0x45da:	mov	qword ptr [rsp + 0xa0], r8
0x45e2:	lea	rbx, [rsp + 0xd0]
0x45ea:	lea	r8, [rsp + 0x20]
0x45ef:	mov	qword ptr [rsp + 0xa8], r9
0x45f7:	mov	dword ptr [rsp + 8], 0x20
0x45ff:	mov	qword ptr [rsp + 0x10], rax
0x4604:	lea	rax, [rsp + 0x80]
0x460c:	xor	r9d, r9d
0x460f:	mov	qword ptr [rsp + 0x18], rax
0x4614:	mov	rbp, rax
0x4617:	nop	word ptr [rax + rax]
0x4620:	cmp	r10d, 0x2f
0x4624:	ja	0x467c


0x4530:	sub	rsp, 0x68
0x4534:	mov	r10, r8
0x4537:	xor	r9d, r9d
0x453a:	mov	rax, qword ptr fs:[0x28]
0x4543:	mov	qword ptr [rsp + 0x58], rax
0x4548:	xor	eax, eax
0x454a:	mov	r8, rsp
0x454d:	nop	dword ptr [rax]
0x4550:	mov	eax, dword ptr [r10]
0x4553:	cmp	eax, 0x2f
0x4556:	ja	0x459a


0x4510:	xor	r9d, r9d
0x4513:	cmp	qword ptr [r8], 0
0x4517:	je	0x452b


0x40f0:	push	r15
0x40f2:	push	r14
0x40f4:	push	r13
0x40f6:	push	r12
0x40f8:	mov	r12, r9
0x40fb:	push	rbp
0x40fc:	push	rbx
0x40fd:	mov	rbp, rdi
0x4100:	mov	rbx, r8
0x4103:	sub	rsp, 0x28
0x4107:	test	rsi, rsi
0x410a:	je	0x4228


0x40d0:	lea	rcx, [rip + 0x203f49]
0x40d7:	mov	rsi, rdi
0x40da:	mov	rdx, -1
0x40e1:	xor	edi, edi
0x40e3:	jmp	0x3790


0x40b0:	lea	rcx, [rip + 0x203f69]
0x40b7:	mov	rdx, -1
0x40be:	jmp	0x3790


0x4090:	lea	rcx, [rip + 0x203f89]
0x4097:	mov	rdx, rsi
0x409a:	mov	rsi, rdi
0x409d:	xor	edi, edi
0x409f:	jmp	0x3790


0x4080:	lea	rcx, [rip + 0x203f99]
0x4087:	jmp	0x3790


0x4060:	mov	r8, rcx
0x4063:	mov	rcx, rdx
0x4066:	mov	rdx, rsi
0x4069:	mov	rsi, rdi
0x406c:	xor	edi, edi
0x406e:	jmp	0x3f90


0x4040:	mov	rcx, rdx
0x4043:	mov	r8, -1
0x404a:	mov	rdx, rsi
0x404d:	mov	rsi, rdi
0x4050:	xor	edi, edi
0x4052:	jmp	0x3f90


0x4030:	mov	r8, -1
0x4037:	jmp	0x3f90


0x3f90:	sub	rsp, 0x48
0x3f94:	mov	r9, rcx
0x3f97:	mov	rcx, qword ptr [rip + 0x204292]
0x3f9e:	movdqa	xmm0, xmmword ptr [rip + 0x20425a]
0x3fa6:	mov	rax, qword ptr fs:[0x28]
0x3faf:	mov	qword ptr [rsp + 0x38], rax
0x3fb4:	xor	eax, eax
0x3fb6:	movaps	xmmword ptr [rsp], xmm0
0x3fba:	test	rsi, rsi
0x3fbd:	mov	qword ptr [rsp + 0x30], rcx
0x3fc2:	mov	dword ptr [rsp], 0xa
0x3fc9:	movdqa	xmm0, xmmword ptr [rip + 0x20423f]
0x3fd1:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x3fd6:	movdqa	xmm0, xmmword ptr [rip + 0x204242]
0x3fde:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x3fe3:	je	0x4017


0x3f00:	sub	rsp, 0x48
0x3f04:	mov	rax, rdx
0x3f07:	mov	rdx, qword ptr fs:[0x28]
0x3f10:	mov	qword ptr [rsp + 0x38], rdx
0x3f15:	xor	edx, edx
0x3f17:	cmp	esi, 0xa
0x3f1a:	je	0x3f84


0x3ef0:	mov	edx, 0x3a
0x3ef5:	jmp	0x3e20


0x3ed0:	mov	edx, 0x3a
0x3ed5:	mov	rsi, -1
0x3edc:	jmp	0x3e20


0x3ec0:	movsx	edx, sil
0x3ec4:	mov	rsi, -1
0x3ecb:	jmp	0x3e20


0x3e20:	sub	rsp, 0x48
0x3e24:	mov	ecx, edx
0x3e26:	mov	rax, qword ptr fs:[0x28]
0x3e2f:	mov	qword ptr [rsp + 0x38], rax
0x3e34:	xor	eax, eax
0x3e36:	mov	rax, qword ptr [rip + 0x2043f3]
0x3e3d:	mov	r8, rsp
0x3e40:	and	ecx, 0x1f
0x3e43:	movdqa	xmm0, xmmword ptr [rip + 0x2043b5]
0x3e4b:	mov	qword ptr [rsp + 0x30], rax
0x3e50:	mov	eax, edx
0x3e52:	movaps	xmmword ptr [rsp], xmm0
0x3e56:	shr	al, 5
0x3e59:	movzx	eax, al
0x3e5c:	lea	r9, [r8 + rax*4 + 8]
0x3e61:	movdqa	xmm0, xmmword ptr [rip + 0x2043a7]
0x3e69:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x3e6e:	movdqa	xmm0, xmmword ptr [rip + 0x2043aa]
0x3e76:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x3e7b:	mov	edx, dword ptr [r9]
0x3e7e:	mov	eax, edx
0x3e80:	shr	eax, cl
0x3e82:	not	eax
0x3e84:	and	eax, 1
0x3e87:	shl	eax, cl
0x3e89:	mov	rcx, r8
0x3e8c:	xor	eax, edx
0x3e8e:	mov	rdx, rsi
0x3e91:	mov	rsi, rdi
0x3e94:	mov	dword ptr [r9], eax
0x3e97:	xor	edi, edi
0x3e99:	call	0x3790


0x3e10:	mov	rcx, rdx
0x3e13:	mov	rdx, rsi
0x3e16:	mov	esi, edi
0x3e18:	xor	edi, edi
0x3e1a:	jmp	0x3d70


0x3e00:	mov	rdx, rsi
0x3e03:	mov	esi, edi
0x3e05:	xor	edi, edi
0x3e07:	jmp	0x3ce0


0x3d70:	sub	rsp, 0x48
0x3d74:	mov	rax, rdx
0x3d77:	mov	rdx, rcx
0x3d7a:	mov	rcx, qword ptr fs:[0x28]
0x3d83:	mov	qword ptr [rsp + 0x38], rcx
0x3d88:	xor	ecx, ecx
0x3d8a:	cmp	esi, 0xa
0x3d8d:	je	0x3df0


0x3ce0:	sub	rsp, 0x48
0x3ce4:	mov	rax, rdx
0x3ce7:	mov	rdx, qword ptr fs:[0x28]
0x3cf0:	mov	qword ptr [rsp + 0x38], rdx
0x3cf5:	xor	edx, edx
0x3cf7:	cmp	esi, 0xa
0x3cfa:	je	0x3d64


0x3cc0:	lea	rcx, [rip + 0x204539]
0x3cc7:	mov	rdx, rsi
0x3cca:	mov	rsi, rdi
0x3ccd:	xor	edi, edi
0x3ccf:	jmp	0x3790


0x3ca0:	lea	rcx, [rip + 0x204559]
0x3ca7:	mov	rsi, rdi
0x3caa:	mov	rdx, -1
0x3cb1:	xor	edi, edi
0x3cb3:	jmp	0x3790


0x3c90:	lea	rcx, [rip + 0x204569]
0x3c97:	jmp	0x3790


0x3c70:	lea	rcx, [rip + 0x204589]
0x3c77:	mov	rdx, -1
0x3c7e:	jmp	0x3790


0x3bd0:	mov	eax, dword ptr [rip + 0x204482]
0x3bd6:	push	r12
0x3bd8:	mov	r12, qword ptr [rip + 0x204481]
0x3bdf:	push	rbp
0x3be0:	push	rbx
0x3be1:	cmp	eax, 1
0x3be4:	jle	0x3c11


0x3bc0:	mov	rcx, rdx
0x3bc3:	xor	edx, edx
0x3bc5:	jmp	0x3ad0


0x3ad0:	push	r15
0x3ad2:	push	r14
0x3ad4:	lea	rax, [rip + 0x204725]
0x3adb:	push	r13
0x3add:	push	r12
0x3adf:	mov	r12, rdx
0x3ae2:	push	rbp
0x3ae3:	push	rbx
0x3ae4:	mov	rbx, rcx
0x3ae7:	mov	r14, rdi
0x3aea:	mov	r15, rsi
0x3aed:	sub	rsp, 0x38
0x3af1:	test	rcx, rcx
0x3af4:	cmove	rbx, rax
0x3af8:	xor	ebp, ebp
0x3afa:	call	0x1490


0x3a50:	push	r15
0x3a52:	push	r14
0x3a54:	lea	rax, [rip + 0x2047a5]
0x3a5b:	push	r13
0x3a5d:	push	r12
0x3a5f:	mov	r13, rdi
0x3a62:	push	rbp
0x3a63:	push	rbx
0x3a64:	mov	rbx, r8
0x3a67:	mov	r14, rsi
0x3a6a:	mov	r15, rdx
0x3a6d:	sub	rsp, 0x18
0x3a71:	test	r8, r8
0x3a74:	cmove	rbx, rax
0x3a78:	mov	qword ptr [rsp + 8], rcx
0x3a7d:	call	0x1490


0x3a20:	lea	rax, [rip + 0x2047d9]
0x3a27:	test	rdi, rdi
0x3a2a:	cmove	rdi, rax
0x3a2e:	test	rsi, rsi
0x3a31:	mov	dword ptr [rdi], 0xa
0x3a37:	je	0x3a47


0x3a00:	lea	rax, [rip + 0x2047f9]
0x3a07:	test	rdi, rdi
0x3a0a:	cmove	rdi, rax
0x3a0e:	mov	eax, dword ptr [rdi + 4]
0x3a11:	mov	dword ptr [rdi + 4], esi
0x3a14:	ret	


0x39c0:	lea	rax, [rip + 0x204839]
0x39c7:	test	rdi, rdi
0x39ca:	mov	ecx, esi
0x39cc:	cmove	rdi, rax
0x39d0:	mov	eax, esi
0x39d2:	and	ecx, 0x1f
0x39d5:	shr	al, 5
0x39d8:	movzx	eax, al
0x39db:	lea	rdi, [rdi + rax*4 + 8]
0x39e0:	mov	esi, dword ptr [rdi]
0x39e2:	mov	eax, esi
0x39e4:	shr	eax, cl
0x39e6:	xor	edx, eax
0x39e8:	and	eax, 1
0x39eb:	and	edx, 1
0x39ee:	shl	edx, cl
0x39f0:	xor	edx, esi
0x39f2:	mov	dword ptr [rdi], edx
0x39f4:	ret	


0x39a0:	lea	rax, [rip + 0x204859]
0x39a7:	test	rdi, rdi
0x39aa:	cmove	rdi, rax
0x39ae:	mov	dword ptr [rdi], esi
0x39b0:	ret	


0x3980:	lea	rax, [rip + 0x204879]
0x3987:	test	rdi, rdi
0x398a:	cmove	rdi, rax
0x398e:	mov	eax, dword ptr [rdi]
0x3990:	ret	


0x3940:	push	r12
0x3942:	push	rbp
0x3943:	push	rbx
0x3944:	mov	rbx, rdi
0x3947:	call	0x1490


0x3790:	push	r15
0x3792:	push	r14
0x3794:	movsxd	r15, edi
0x3797:	push	r13
0x3799:	push	r12
0x379b:	mov	r14, rdx
0x379e:	push	rbp
0x379f:	push	rbx
0x37a0:	mov	rbp, rcx
0x37a3:	sub	rsp, 0x28
0x37a7:	mov	qword ptr [rsp + 8], rsi
0x37ac:	call	0x1490


0x2550:	push	r15
0x2552:	push	r14
0x2554:	mov	r15d, r8d
0x2557:	push	r13
0x2559:	push	r12
0x255b:	mov	r14, rdi
0x255e:	push	rbp
0x255f:	push	rbx
0x2560:	mov	ebx, r9d
0x2563:	mov	r13, rsi
0x2566:	mov	rbp, rcx
0x2569:	and	ebx, 2
0x256c:	sub	rsp, 0xb8
0x2573:	mov	rax, qword ptr [rsp + 0xf0]
0x257b:	mov	qword ptr [rsp + 0x10], rdx
0x2580:	mov	dword ptr [rsp + 8], r8d
0x2585:	mov	dword ptr [rsp + 0x78], r9d
0x258a:	mov	qword ptr [rsp + 0x20], rax
0x258f:	mov	rax, qword ptr [rsp + 0xf8]
0x2597:	mov	qword ptr [rsp + 0x68], rax
0x259c:	mov	rax, qword ptr [rsp + 0x100]
0x25a4:	mov	qword ptr [rsp + 0x60], rax
0x25a9:	mov	rax, qword ptr fs:[0x28]
0x25b2:	mov	qword ptr [rsp + 0xa8], rax
0x25ba:	xor	eax, eax
0x25bc:	call	0x1510


0x2460:	push	rbp
0x2461:	push	rbx
0x2462:	mov	rbp, rdi
0x2465:	mov	ebx, esi
0x2467:	sub	rsp, 8
0x246b:	call	0x5180


0x23c0:	test	rdi, rdi
0x23c3:	push	rbx
0x23c4:	je	0x243d


0x2390:	test	rdi, rdi
0x2393:	je	0x23b0


0x2380:	jmp	0x15d0


0x22d0:	push	rbp
0x22d1:	push	rbx
0x22d2:	sub	rsp, 8
0x22d6:	mov	rdi, qword ptr [rip + 0x205dab]
0x22dd:	call	0x50a0


0x22c0:	mov	byte ptr [rip + 0x205e21], dil
0x22c7:	ret	


0x22b0:	mov	qword ptr [rip + 0x205e39], rdi
0x22b7:	ret	


0x1ef0:	push	r13
0x1ef2:	push	r12
0x1ef4:	mov	edx, 5
0x1ef9:	push	rbp
0x1efa:	push	rbx
0x1efb:	mov	ebp, edi
0x1efd:	sub	rsp, 0x88
0x1f04:	mov	rbx, qword ptr [rip + 0x2061ed]
0x1f0b:	mov	rax, qword ptr fs:[0x28]
0x1f14:	mov	qword ptr [rsp + 0x78], rax
0x1f19:	xor	eax, eax
0x1f1b:	test	edi, edi
0x1f1d:	je	0x1f4d


0x1b40:	push	r15
0x1b42:	push	r14
0x1b44:	mov	ecx, 2
0x1b49:	push	r13
0x1b4b:	push	r12
0x1b4d:	push	rbp
0x1b4e:	push	rbx
0x1b4f:	sub	rsp, 0x28
0x1b53:	mov	qword ptr [rsp + 0x10], rdi
0x1b58:	mov	qword ptr [rsp + 8], rsi
0x1b5d:	mov	rsi, rdi
0x1b60:	lea	rdi, [rip + 0x3b5b]
0x1b67:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1af0:	cmp	byte ptr [rip + 0x2065ea], 0
0x1af7:	jne	0x1b0d


0x1ae0:	push	rbp
0x1ae1:	mov	rbp, rsp
0x1ae4:	pop	rbp
0x1ae5:	jmp	0x1a50


0x1aa0:	cmp	byte ptr [rip + 0x206621], 0
0x1aa7:	jne	0x1ad8


0x1a50:	lea	rdi, [rip + 0x206629]
0x1a57:	lea	rsi, [rip + 0x206622]
0x1a5e:	push	rbp
0x1a5f:	sub	rsi, rdi
0x1a62:	mov	rbp, rsp
0x1a65:	sar	rsi, 3
0x1a69:	mov	rax, rsi
0x1a6c:	shr	rax, 0x3f
0x1a70:	add	rsi, rax
0x1a73:	sar	rsi, 1
0x1a76:	je	0x1a90


0x1a10:	lea	rdi, [rip + 0x206669]
0x1a17:	push	rbp
0x1a18:	lea	rax, [rip + 0x206661]
0x1a1f:	cmp	rax, rdi
0x1a22:	mov	rbp, rsp
0x1a25:	je	0x1a40


0x19e0:	xor	ebp, ebp
0x19e2:	mov	r9, rdx
0x19e5:	pop	rsi
0x19e6:	mov	rdx, rsp
0x19e9:	and	rsp, 0xfffffffffffffff0
0x19ed:	push	rax
0x19ee:	push	rsp
0x19ef:	lea	r8, [rip + 0x383a]
0x19f6:	lea	rcx, [rip + 0x37c3]
0x19fd:	lea	rdi, [rip - 0x294]
0x1a04:	call	qword ptr [rip + 0x2065be]


0x1770:	push	r13
0x1772:	push	r12
0x1774:	mov	r12d, 0x50
0x177a:	push	rbp
0x177b:	push	rbx
0x177c:	mov	ebp, edi
0x177e:	mov	rbx, rsi
0x1781:	sub	rsp, 0x18
0x1785:	mov	rdi, qword ptr [rsi]
0x1788:	mov	rax, qword ptr fs:[0x28]
0x1791:	mov	qword ptr [rsp + 8], rax
0x1796:	xor	eax, eax
0x1798:	lea	r13, [rsp + 6]
0x179d:	call	0x23c0


0x1430:	sub	rsp, 8
0x1434:	mov	rax, qword ptr [rip + 0x206b95]
0x143b:	test	rax, rax
0x143e:	je	0x1442


0x16f0:	jmp	qword ptr [rip + 0x206892]


0x1650:	jmp	qword ptr [rip + 0x2068e2]


0x1690:	jmp	qword ptr [rip + 0x2068c2]


0x14c0:	jmp	qword ptr [rip + 0x2069aa]


0x1550:	jmp	qword ptr [rip + 0x206962]


0x4fc0:	mov	rax, qword ptr [rdi + 0x20]
0x4fc4:	cmp	qword ptr [rdi + 0x28], rax
0x4fc8:	jne	0x4fba


0x4fba:	jmp	0x16d0


0x4f8a:	mov	rdi, rbx
0x4f8d:	pop	rbx
0x4f8e:	jmp	0x1640


0x4f79:	call	0x1660


0x1620:	jmp	qword ptr [rip + 0x2068fa]


0x4af7:	lea	rax, [rsp + 0x10]
0x4afc:	mov	r15, rsi
0x4aff:	test	rsi, rsi
0x4b02:	mov	rbp, rdi
0x4b05:	mov	dword ptr [rsp + 8], edx
0x4b09:	mov	r14, rcx
0x4b0c:	mov	r13, r8
0x4b0f:	cmove	r15, rax
0x4b13:	call	0x1490


0x4e55:	lea	rcx, [rip + 0x11e4]
0x4e5c:	lea	rsi, [rip + 0x10bd]
0x4e63:	lea	rdi, [rip + 0x10d6]
0x4e6a:	mov	edx, 0x54
0x4e6f:	call	0x15a0


0x1500:	jmp	qword ptr [rip + 0x20698a]


0x1520:	jmp	qword ptr [rip + 0x20697a]


0x4909:	call	0x4960


0x48f2:	movzx	edx, dl
0x48f5:	test	rdx, rdx
0x48f8:	jne	0x4909


0x48a0:	test	rax, rax
0x48a3:	mov	edx, 0x80
0x48a8:	cmove	rax, rdx
0x48ac:	test	rax, rax
0x48af:	jns	0x4892


0x4878:	movabs	rdx, 0x5555555555555553
0x4882:	cmp	rax, rdx
0x4885:	ja	0x48b1


0x4820:	test	rcx, rcx
0x4823:	je	0x4848


0x47eb:	xor	edx, edx
0x47ed:	movabs	rax, 0x5555555555555554
0x47f7:	div	r9
0x47fa:	cmp	rax, rcx
0x47fd:	jbe	0x483b


0x47cb:	sub	rsp, 8
0x47cf:	call	0x4960


0x47c1:	movzx	eax, al
0x47c4:	test	rax, rax
0x47c7:	jne	0x47cb


0x4779:	test	rdi, rdi
0x477c:	jne	0x4798


0x477e:	mov	rsi, rbx
0x4781:	call	0x1680


0x474b:	sub	rsp, 8
0x474f:	call	0x4960


0x4741:	movzx	eax, al
0x4744:	test	rax, rax
0x4747:	jne	0x474b


0x1630:	jmp	qword ptr [rip + 0x2068f2]


0x4626:	mov	eax, r10d
0x4629:	mov	r11d, 1
0x462f:	add	r10d, 8
0x4633:	add	rax, rbp
0x4636:	mov	rax, qword ptr [rax]
0x4639:	test	rax, rax
0x463c:	mov	qword ptr [r8 + r9*8], rax
0x4640:	je	0x464c


0x467c:	mov	rax, rbx
0x467f:	add	rbx, 8
0x4683:	jmp	0x4636


0x4558:	mov	r11d, eax
0x455b:	add	r11, qword ptr [r10 + 0x10]
0x455f:	add	eax, 8
0x4562:	mov	dword ptr [r10], eax
0x4565:	mov	rax, qword ptr [r11]
0x4568:	test	rax, rax
0x456b:	mov	qword ptr [r8 + r9*8], rax
0x456f:	je	0x457b


0x459a:	mov	r11, qword ptr [r10 + 8]
0x459e:	lea	rax, [r11 + 8]
0x45a2:	mov	qword ptr [r10 + 8], rax
0x45a6:	jmp	0x4565


0x452b:	jmp	0x40f0


0x4228:	mov	r8, rcx
0x422b:	mov	rcx, rdx
0x422e:	lea	rdx, [rip + 0x197f]
0x4235:	mov	esi, 1
0x423a:	xor	eax, eax
0x423c:	call	0x1720


0x4110:	mov	r8, rdx
0x4113:	lea	rdx, [rip + 0x1a8e]
0x411a:	mov	r9, rcx
0x411d:	xor	eax, eax
0x411f:	mov	rcx, rsi
0x4122:	mov	esi, 1
0x4127:	call	0x1720


0x4017:	call	0x1480


0x3fe5:	test	rdx, rdx
0x3fe8:	je	0x4017


0x3f84:	call	0x1480


0x3f1c:	mov	dword ptr [rsp], esi
0x3f1f:	mov	rcx, rsp
0x3f22:	mov	rdx, -1
0x3f29:	mov	rsi, rax
0x3f2c:	mov	qword ptr [rsp + 4], 0
0x3f35:	mov	qword ptr [rsp + 0xc], 0x4000000
0x3f3e:	mov	qword ptr [rsp + 0x14], 0
0x3f47:	mov	qword ptr [rsp + 0x1c], 0
0x3f50:	mov	qword ptr [rsp + 0x24], 0
0x3f59:	mov	qword ptr [rsp + 0x2c], 0
0x3f62:	mov	dword ptr [rsp + 0x34], 0
0x3f6a:	call	0x3790


0x3df0:	call	0x1480


0x3d8f:	mov	dword ptr [rsp], esi
0x3d92:	mov	rcx, rsp
0x3d95:	mov	rsi, rax
0x3d98:	mov	qword ptr [rsp + 4], 0
0x3da1:	mov	qword ptr [rsp + 0xc], 0
0x3daa:	mov	qword ptr [rsp + 0x14], 0
0x3db3:	mov	qword ptr [rsp + 0x1c], 0
0x3dbc:	mov	qword ptr [rsp + 0x24], 0
0x3dc5:	mov	qword ptr [rsp + 0x2c], 0
0x3dce:	mov	dword ptr [rsp + 0x34], 0
0x3dd6:	call	0x3790


0x3d64:	call	0x1480


0x3cfc:	mov	dword ptr [rsp], esi
0x3cff:	mov	rcx, rsp
0x3d02:	mov	rdx, -1
0x3d09:	mov	rsi, rax
0x3d0c:	mov	qword ptr [rsp + 4], 0
0x3d15:	mov	qword ptr [rsp + 0xc], 0
0x3d1e:	mov	qword ptr [rsp + 0x14], 0
0x3d27:	mov	qword ptr [rsp + 0x1c], 0
0x3d30:	mov	qword ptr [rsp + 0x24], 0
0x3d39:	mov	qword ptr [rsp + 0x2c], 0
0x3d42:	mov	dword ptr [rsp + 0x34], 0
0x3d4a:	call	0x3790


0x3c11:	mov	rdi, qword ptr [r12 + 8]
0x3c16:	lea	rbx, [rip + 0x2044e3]
0x3c1d:	cmp	rdi, rbx
0x3c20:	je	0x3c39


0x3be6:	sub	eax, 2
0x3be9:	lea	rbx, [r12 + 0x18]
0x3bee:	shl	rax, 4
0x3bf2:	lea	rbp, [r12 + rax + 0x28]
0x3bf7:	nop	word ptr [rax + rax]
0x3c00:	mov	rdi, qword ptr [rbx]
0x3c03:	add	rbx, 0x10
0x3c07:	call	0x1470


0x1490:	jmp	qword ptr [rip + 0x2069c2]


0x3a47:	sub	rsp, 8
0x3a4b:	call	0x1480


0x3a39:	test	rdx, rdx
0x3a3c:	je	0x3a47


0x1510:	jmp	qword ptr [rip + 0x206982]


0x243d:	mov	rcx, qword ptr [rip + 0x205c7c]
0x2444:	lea	rdi, [rip + 0x3235]
0x244b:	mov	edx, 0x37
0x2450:	mov	esi, 1
0x2455:	call	0x1710


0x23c6:	mov	esi, 0x2f
0x23cb:	mov	rbx, rdi
0x23ce:	call	0x1580


0x23b0:	ret	


0x2395:	push	rbx
0x2396:	mov	ebx, esi
0x2398:	call	0x1620


0x15d0:	jmp	qword ptr [rip + 0x206922]


0x1f4d:	lea	rsi, [rip + 0x3444]
0x1f54:	xor	edi, edi
0x1f56:	call	0x1500


0x1f1f:	lea	rsi, [rip + 0x344a]
0x1f26:	xor	edi, edi
0x1f28:	call	0x1500


0x1b67:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1b69:	seta	al
0x1b6c:	sbb	al, 0
0x1b6e:	test	al, al
0x1b70:	jne	0x1e00


0x1af9:	cmp	sil, 8
0x1afd:	je	0x1b18


0x1b0d:	lea	rax, [rdi + 1]
0x1b11:	ret	


0x1aa9:	cmp	qword ptr [rip + 0x20652f], 0
0x1ab1:	push	rbp
0x1ab2:	mov	rbp, rsp
0x1ab5:	je	0x1ac3


0x1ad8:	ret	


0x1a90:	pop	rbp
0x1a91:	ret	


0x1a78:	mov	rax, qword ptr [rip + 0x206559]
0x1a7f:	test	rax, rax
0x1a82:	je	0x1a90


0x1a40:	pop	rbp
0x1a41:	ret	


0x1a27:	mov	rax, qword ptr [rip + 0x206592]
0x1a2e:	test	rax, rax
0x1a31:	je	0x1a40




0x1442:	add	rsp, 8
0x1446:	ret	


0x1440:	call	rax












0x4fca:	cmp	qword ptr [rdi + 0x48], 0
0x4fcf:	jne	0x4fba


0x16d0:	jmp	qword ptr [rip + 0x2068a2]


0x1640:	jmp	qword ptr [rip + 0x2068ea]


0x1660:	jmp	qword ptr [rip + 0x2068da]




0x15a0:	jmp	qword ptr [rip + 0x20693a]






0x48fa:	call	0x1600


0x48b1:	sub	rsp, 8
0x48b5:	call	0x4960


0x4892:	mov	qword ptr [rsi], rax
0x4895:	mov	rsi, rax
0x4898:	jmp	0x4770


0x4887:	mov	rdx, rax
0x488a:	shr	rdx, 1
0x488d:	lea	rax, [rdx + rax + 1]
0x4892:	mov	qword ptr [rsi], rax
0x4895:	mov	rsi, rax
0x4898:	jmp	0x4770


0x4848:	xor	edx, edx
0x484a:	mov	eax, 0x80
0x484f:	xor	r8d, r8d
0x4852:	div	r9
0x4855:	test	rax, rax
0x4858:	sete	r8b
0x485c:	lea	rcx, [r8 + rax]
0x4860:	jmp	0x4825


0x4825:	mov	rax, rcx
0x4828:	mul	r9
0x482b:	seto	dl
0x482e:	test	rax, rax
0x4831:	movzx	edx, dl
0x4834:	js	0x483b


0x483b:	sub	rsp, 8
0x483f:	call	0x4960


0x47ff:	mov	rax, rcx
0x4802:	shr	rax, 1
0x4805:	lea	rcx, [rax + rcx + 1]
0x480a:	mov	qword ptr [rsi], rcx
0x480d:	imul	rcx, r9
0x4811:	mov	rsi, rcx
0x4814:	jmp	0x4770


0x47c9:	jmp	0x4770


0x4798:	call	0x1470


0x1680:	jmp	qword ptr [rip + 0x2068ca]


0x4749:	jmp	0x4710




0x464c:	test	r11b, r11b
0x464f:	jne	0x4675


0x4642:	add	r9, 1
0x4646:	cmp	r9, 0xa
0x464a:	jne	0x4620


0x4636:	mov	rax, qword ptr [rax]
0x4639:	test	rax, rax
0x463c:	mov	qword ptr [r8 + r9*8], rax
0x4640:	je	0x464c


0x457b:	call	0x40f0


0x4571:	add	r9, 1
0x4575:	cmp	r9, 0xa
0x4579:	jne	0x4550


0x4565:	mov	rax, qword ptr [r11]
0x4568:	test	rax, rax
0x456b:	mov	qword ptr [r8 + r9*8], rax
0x456f:	je	0x457b


0x4520:	add	r9, 1
0x4524:	cmp	qword ptr [r8 + r9*8], 0
0x4529:	jne	0x4520


0x1720:	jmp	qword ptr [rip + 0x20687a]


0x1480:	jmp	qword ptr [rip + 0x2069ca]


0x3fea:	mov	qword ptr [rsp + 0x28], rsi
0x3fef:	mov	qword ptr [rsp + 0x30], rdx
0x3ff4:	mov	rcx, rsp
0x3ff7:	mov	rdx, r8
0x3ffa:	mov	rsi, r9
0x3ffd:	call	0x3790


0x3c39:	lea	rbx, [rip + 0x204430]
0x3c40:	cmp	r12, rbx
0x3c43:	je	0x3c54


0x3c22:	call	0x1470


0x1470:	jmp	qword ptr [rip + 0x2069d2]




0x3a3e:	mov	qword ptr [rdi + 0x28], rsi
0x3a42:	mov	qword ptr [rdi + 0x30], rdx
0x3a46:	ret	




0x1710:	jmp	qword ptr [rip + 0x206882]


0x1580:	jmp	qword ptr [rip + 0x20694a]




0x1b76:	mov	r12, qword ptr [rip + 0x206513]
0x1b7d:	mov	byte ptr [rip + 0x20655c], 1
0x1b84:	call	0x1490


0x1e00:	mov	rdi, qword ptr [rsp + 0x10]
0x1e05:	lea	rsi, [rip + 0x3866]
0x1e0c:	call	0x16e0


0x1b18:	lea	rdx, [rdi - 1]
0x1b1c:	test	rdi, rdi
0x1b1f:	mov	eax, 0
0x1b24:	cmovne	rax, rdx
0x1b28:	ret	


0x1aff:	xor	eax, eax
0x1b01:	cmp	sil, 0xd
0x1b05:	je	0x1b11


0x1ac3:	call	0x1a10


0x1ab7:	mov	rdi, qword ptr [rip + 0x20654a]
0x1abe:	call	0x1760


0x1a84:	pop	rbp
0x1a85:	jmp	rax


0x1a33:	pop	rbp
0x1a34:	jmp	rax


0x4fd1:	push	r12
0x4fd3:	push	rbp
0x4fd4:	mov	r12d, edx
0x4fd7:	push	rbx
0x4fd8:	mov	rbp, rsi
0x4fdb:	mov	rbx, rdi
0x4fde:	call	0x1620










0x1600:	jmp	qword ptr [rip + 0x20690a]


0x4836:	test	rdx, rdx
0x4839:	je	0x480a




0x4651:	call	0x40f0


0x4675:	mov	dword ptr [rsp + 8], r10d
0x467a:	jmp	0x4651


0x4620:	cmp	r10d, 0x2f
0x4624:	ja	0x467c


0x4550:	mov	eax, dword ptr [r10]
0x4553:	cmp	eax, 0x2f
0x4556:	ja	0x459a






0x3c54:	pop	rbx
0x3c55:	mov	dword ptr [rip + 0x2043f9], 1
0x3c5f:	pop	rbp
0x3c60:	pop	r12
0x3c62:	ret	


0x3c45:	mov	rdi, r12
0x3c48:	call	0x1470








0x16e0:	jmp	qword ptr [rip + 0x20689a]


0x1b11:	ret	


0x1b07:	cmp	sil, 9
0x1b0b:	je	0x1b30


0x1760:	jmp	qword ptr [rip + 0x20687a]




0x480a:	mov	qword ptr [rsi], rcx
0x480d:	imul	rcx, r9
0x4811:	mov	rsi, rcx
0x4814:	jmp	0x4770




0x1b30:	and	rdi, 0xfffffffffffffff8
0x1b34:	lea	rax, [rdi + 8]
0x1b38:	ret	


0x1ac8:	mov	byte ptr [rip + 0x2065f9], 1
0x1acf:	pop	rbp
0x1ad0:	ret	


0x51f1:	test	rbp, rbp
0x51f4:	je	0x5216


0x5216:	add	rsp, 8
0x521a:	pop	rbx
0x521b:	pop	rbp
0x521c:	pop	r12
0x521e:	pop	r13
0x5220:	pop	r14
0x5222:	pop	r15
0x5224:	ret	


0x51f6:	xor	ebx, ebx
0x51f8:	nop	dword ptr [rax + rax]
0x5200:	mov	rdx, r15
0x5203:	mov	rsi, r14
0x5206:	mov	edi, r13d
0x5209:	call	qword ptr [r12 + rbx*8]


0x1e11:	mov	r12, rax
0x1e14:	call	0x1490


0x48ff:	test	rax, rax
0x4902:	je	0x4909


0x4904:	add	rsp, 8
0x4908:	ret	


0x23d3:	test	rax, rax
0x23d6:	je	0x242d


0x242d:	mov	qword ptr [rip + 0x205cc4], rbx
0x2434:	mov	qword ptr [rip + 0x205c6d], rbx
0x243b:	pop	rbx
0x243c:	ret	


0x23d8:	lea	r8, [rax + 1]
0x23dc:	mov	rdx, r8
0x23df:	sub	rdx, rbx
0x23e2:	cmp	rdx, 6
0x23e6:	jle	0x242d


0x23e8:	lea	rsi, [rax - 6]
0x23ec:	lea	rdi, [rip + 0x32c5]
0x23f3:	mov	ecx, 7
0x23f8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x23f8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x23fa:	seta	dl
0x23fd:	sbb	dl, 0
0x2400:	test	dl, dl
0x2402:	jne	0x242d


0x2404:	lea	rdi, [rip + 0x32b5]
0x240b:	mov	ecx, 3
0x2410:	mov	rsi, r8
0x2413:	mov	rbx, r8
0x2416:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2416:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2418:	seta	dl
0x241b:	sbb	dl, 0
0x241e:	test	dl, dl
0x2420:	jne	0x242d


0x2422:	lea	rbx, [rax + 4]
0x2426:	mov	qword ptr [rip + 0x205c53], rbx
0x242d:	mov	qword ptr [rip + 0x205cc4], rbx
0x2434:	mov	qword ptr [rip + 0x205c6d], rbx
0x243b:	pop	rbx
0x243c:	ret	


0x245a:	call	0x1480


0x3c4d:	mov	qword ptr [rip + 0x20440c], rbx
0x3c54:	pop	rbx
0x3c55:	mov	dword ptr [rip + 0x2043f9], 1
0x3c5f:	pop	rbp
0x3c60:	pop	r12
0x3c62:	ret	


0x3c27:	mov	qword ptr [rip + 0x20443e], 0x100
0x3c32:	mov	qword ptr [rip + 0x20443f], rbx
0x3c39:	lea	rbx, [rip + 0x204430]
0x3c40:	cmp	r12, rbx
0x3c43:	je	0x3c54


0x479d:	xor	eax, eax
0x479f:	pop	rbx
0x47a0:	ret	


0x3c0c:	cmp	rbx, rbp
0x3c0f:	jne	0x3c00


0x3c00:	mov	rdi, qword ptr [rbx]
0x3c03:	add	rbx, 0x10
0x3c07:	call	0x1470


0x412c:	lea	rsi, [rip + 0x1a88]
0x4133:	xor	edi, edi
0x4135:	mov	edx, 5
0x413a:	call	0x1500


0x4241:	jmp	0x412c


0x4786:	test	rax, rax
0x4789:	jne	0x4790


0x478b:	test	rbx, rbx
0x478e:	jne	0x47a1


0x4790:	pop	rbx
0x4791:	ret	


0x47a1:	call	0x4960


0x4f7e:	test	eax, eax
0x4f80:	je	0x4f8a


0x4f82:	test	dword ptr [rbx], 0x100
0x4f88:	jne	0x4f98


0x4f98:	mov	rdi, rbx
0x4f9b:	mov	edx, 1
0x4fa0:	xor	esi, esi
0x4fa2:	call	0x4fb0


0x17a2:	lea	rsi, [rip + 0x4458]
0x17a9:	mov	edi, 6
0x17ae:	call	0x1690


0x25c1:	cmp	r15d, 0xa
0x25c5:	mov	qword ptr [rsp + 0x58], rax
0x25ca:	ja	0x377f


0x25d0:	lea	rcx, [rip + 0x3169]
0x25d7:	mov	edx, r15d
0x25da:	movsxd	rax, dword ptr [rcx + rdx*4]
0x25de:	add	rax, rcx
0x25e1:	jmp	rax


0x377f:	call	0x1480


0x1e19:	test	r12, r12
0x1e1c:	mov	qword ptr [rsp + 0x18], rax
0x1e21:	jne	0x1b97


0x1e27:	mov	rdx, qword ptr [rsp + 0x10]
0x1e2c:	mov	esi, 3
0x1e31:	xor	edi, edi
0x1e33:	xor	ebx, ebx
0x1e35:	call	0x3f00


0x1b97:	mov	esi, 2
0x1b9c:	mov	rdi, r12
0x1b9f:	xor	ebx, ebx
0x1ba1:	xor	r15d, r15d
0x1ba4:	call	0x2390


0x1ba9:	mov	rax, qword ptr [r12 + 8]
0x1bae:	cmp	rax, qword ptr [r12 + 0x10]
0x1bb3:	jae	0x1d19


0x1bb9:	lea	rdx, [rax + 1]
0x1bbd:	mov	qword ptr [r12 + 8], rdx
0x1bc2:	movzx	ebp, byte ptr [rax]
0x1bc5:	lea	r14, [rbx + 1]
0x1bc9:	cmp	r14, qword ptr [rip + 0x206508]
0x1bd0:	mov	r13, qword ptr [rip + 0x2064f9]
0x1bd7:	jae	0x1d98


0x1d19:	mov	rdi, r12
0x1d1c:	call	0x1460


0x1bdd:	cmp	ebp, 0xa
0x1be0:	je	0x1dba


0x1d98:	lea	rsi, [rip + 0x206339]
0x1d9f:	mov	rdi, r13
0x1da2:	call	0x4870


0x1460:	jmp	qword ptr [rip + 0x2069da]


0x1dba:	mov	byte ptr [r13 + rbx], 0xa
0x1dc0:	mov	rcx, qword ptr [rip + 0x2062c1]
0x1dc7:	mov	rdx, r14
0x1dca:	mov	esi, 1
0x1dcf:	mov	rdi, r13
0x1dd2:	xor	ebx, ebx
0x1dd4:	xor	r15d, r15d
0x1dd7:	call	0x1670


0x1be6:	mov	r14d, ebp
0x1be9:	movsx	ebp, bpl
0x1bed:	mov	rdi, r15
0x1bf0:	mov	esi, ebp
0x1bf2:	call	0x1af0




0x1670:	jmp	qword ptr [rip + 0x2068d2]




0x1bf7:	cmp	rax, qword ptr [rsp + 8]
0x1bfc:	mov	r15, rax
0x1bff:	jbe	0x1de8


0x1de8:	mov	byte ptr [r13 + rbx], r14b
0x1ded:	add	rbx, 1
0x1df1:	jmp	0x1ba9


0x1c05:	cmp	byte ptr [rip + 0x2064d6], 0
0x1c0c:	jne	0x1c48


0x1c0e:	test	rbx, rbx
0x1c11:	je	0x1d00


0x1c48:	test	rbx, rbx
0x1c4b:	je	0x1d00


0x1d00:	mov	byte ptr [r13], r14b
0x1d04:	mov	rax, qword ptr [r12 + 8]
0x1d09:	mov	ebx, 1
0x1d0e:	cmp	rax, qword ptr [r12 + 0x10]
0x1d13:	jb	0x1bb9


0x1c17:	mov	byte ptr [r13 + rbx], 0xa
0x1c1d:	mov	rcx, qword ptr [rip + 0x206464]
0x1c24:	lea	rdx, [rbx + 1]
0x1c28:	mov	rdi, r13
0x1c2b:	mov	esi, 1
0x1c30:	xor	ebx, ebx
0x1c32:	xor	r15d, r15d
0x1c35:	call	0x1670


0x1c51:	call	0x1750


0x1750:	jmp	qword ptr [rip + 0x206862]




0x1b89:	mov	qword ptr [rsp + 0x18], rax
0x1b8e:	test	r12, r12
0x1b91:	je	0x1e27


0x4b18:	mov	dword ptr [rax], 0
0x4b1e:	mov	r12, rax
0x4b21:	movzx	ebx, byte ptr [rbp]
0x4b25:	call	0x1750


0x37b1:	mov	r13, rax
0x37b4:	mov	eax, dword ptr [rax]
0x37b6:	test	r15d, r15d
0x37b9:	mov	rbx, qword ptr [rip + 0x2048a0]
0x37c0:	mov	dword ptr [rsp + 0x18], eax
0x37c4:	js	0x3931


0x3931:	call	0x1480


0x37ca:	cmp	dword ptr [rip + 0x204887], r15d
0x37d1:	jg	0x3835


0x37d3:	cmp	r15d, 0x7fffffff
0x37da:	je	0x3936


0x3835:	mov	eax, dword ptr [rbp + 4]
0x3838:	shl	r15, 4
0x383c:	sub	rsp, 8
0x3840:	add	rbx, r15
0x3843:	lea	r15, [rbp + 8]
0x3847:	mov	r8d, dword ptr [rbp]
0x384b:	mov	r11, qword ptr [rbx]
0x384e:	mov	r12, qword ptr [rbx + 8]
0x3852:	mov	rcx, r14
0x3855:	or	eax, 1
0x3858:	mov	dword ptr [rsp + 0x24], eax
0x385c:	push	qword ptr [rbp + 0x30]
0x385f:	mov	r9d, eax
0x3862:	push	qword ptr [rbp + 0x28]
0x3865:	push	r15
0x3867:	mov	rsi, r11
0x386a:	mov	rdx, qword ptr [rsp + 0x28]
0x386f:	mov	rdi, r12
0x3872:	mov	qword ptr [rsp + 0x30], r11
0x3877:	call	0x2550


0x3936:	call	0x4960


0x37e0:	lea	r12d, [r15 + 1]
0x37e4:	lea	rax, [rip + 0x204885]
0x37eb:	movsxd	rsi, r12d
0x37ee:	shl	rsi, 4
0x37f2:	cmp	rbx, rax
0x37f5:	je	0x3910


0x3910:	xor	edi, edi
0x3912:	call	0x4770


0x37fb:	mov	rdi, rbx
0x37fe:	call	0x4770


0x3803:	mov	rbx, rax
0x3806:	mov	qword ptr [rip + 0x204853], rax
0x380d:	movsxd	rdi, dword ptr [rip + 0x204844]
0x3814:	mov	edx, r12d
0x3817:	xor	esi, esi
0x3819:	sub	edx, edi
0x381b:	shl	rdi, 4
0x381f:	movsxd	rdx, edx
0x3822:	add	rdi, rbx
0x3825:	shl	rdx, 4
0x3829:	call	0x15c0


0x15c0:	jmp	qword ptr [rip + 0x20692a]




0x3917:	movdqa	xmm0, xmmword ptr [rip + 0x204751]
0x391f:	mov	rbx, rax
0x3922:	mov	qword ptr [rip + 0x204737], rax
0x3929:	movups	xmmword ptr [rax], xmm0
0x392c:	jmp	0x380d


0x380d:	movsxd	rdi, dword ptr [rip + 0x204844]
0x3814:	mov	edx, r12d
0x3817:	xor	esi, esi
0x3819:	sub	edx, edi
0x381b:	shl	rdi, 4
0x381f:	movsxd	rdx, edx
0x3822:	add	rdi, rbx
0x3825:	shl	rdx, 4
0x3829:	call	0x15c0


0x394c:	mov	r12d, dword ptr [rax]
0x394f:	mov	rbp, rax
0x3952:	lea	rax, [rip + 0x2048a7]
0x3959:	test	rbx, rbx
0x395c:	mov	esi, 0x38
0x3961:	cmove	rbx, rax
0x3965:	mov	rdi, rbx
0x3968:	call	0x4910


0x3a82:	mov	r12d, dword ptr [rax]
0x3a85:	mov	rbp, rax
0x3a88:	lea	rax, [rbx + 8]
0x3a8c:	sub	rsp, 8
0x3a90:	mov	r9d, dword ptr [rbx + 4]
0x3a94:	push	qword ptr [rbx + 0x30]
0x3a97:	mov	r8d, dword ptr [rbx]
0x3a9a:	push	qword ptr [rbx + 0x28]
0x3a9d:	mov	rdx, r15
0x3aa0:	push	rax
0x3aa1:	mov	rcx, qword ptr [rsp + 0x28]
0x3aa6:	mov	rsi, r14
0x3aa9:	mov	rdi, r13
0x3aac:	call	0x2550


0x3aff:	test	r12, r12
0x3b02:	mov	r13, rax
0x3b05:	mov	eax, dword ptr [rax]
0x3b07:	sete	bpl
0x3b0b:	or	ebp, dword ptr [rbx + 4]
0x3b0e:	lea	r10, [rbx + 8]
0x3b12:	sub	rsp, 8
0x3b16:	mov	r8d, dword ptr [rbx]
0x3b19:	mov	rcx, r15
0x3b1c:	mov	dword ptr [rsp + 0x14], eax
0x3b20:	push	qword ptr [rbx + 0x30]
0x3b23:	mov	rdx, r14
0x3b26:	push	qword ptr [rbx + 0x28]
0x3b29:	push	r10
0x3b2b:	xor	esi, esi
0x3b2d:	mov	r9d, ebp
0x3b30:	xor	edi, edi
0x3b32:	mov	qword ptr [rsp + 0x40], r10
0x3b37:	call	0x2550


0x4719:	test	rax, rax
0x471c:	jne	0x4723


0x471e:	test	rbx, rbx
0x4721:	jne	0x4725


0x4723:	pop	rbx
0x4724:	ret	


0x4725:	call	0x4960


0x48c9:	mov	rdx, rbx
0x48cc:	xor	esi, esi
0x48ce:	mov	rdi, rax
0x48d1:	pop	rbx
0x48d2:	jmp	0x15c0


0x4924:	add	rsp, 8
0x4928:	mov	rdx, rbx
0x492b:	mov	rsi, rbp
0x492e:	pop	rbx
0x492f:	pop	rbp
0x4930:	mov	rdi, rax
0x4933:	jmp	0x1610


0x1610:	jmp	qword ptr [rip + 0x206902]




0x4949:	mov	rdi, rbx
0x494c:	lea	rsi, [rax + 1]
0x4950:	pop	rbx
0x4951:	jmp	0x4910


0x413f:	lea	rdx, [rip + 0x1d9a]
0x4146:	mov	rcx, rax
0x4149:	mov	r8d, 0x7e3
0x414f:	mov	esi, 1
0x4154:	mov	rdi, rbp
0x4157:	xor	eax, eax
0x4159:	call	0x1720


0x415e:	lea	rsi, [rip + 0x1ae3]
0x4165:	xor	edi, edi
0x4167:	mov	edx, 5
0x416c:	call	0x1500


0x4171:	mov	rsi, rbp
0x4174:	mov	rdi, rax
0x4177:	call	0x15f0


0x15f0:	jmp	qword ptr [rip + 0x206912]




0x1f2d:	mov	rdi, qword ptr [rip + 0x20618c]
0x1f34:	mov	rdx, rax
0x1f37:	mov	rcx, rbx
0x1f3a:	mov	esi, 1
0x1f3f:	xor	eax, eax
0x1f41:	call	0x1720


0x1f46:	mov	edi, ebp
0x1f48:	call	0x1700


0x1700:	jmp	qword ptr [rip + 0x20688a]




0x1f5b:	mov	rdx, rbx
0x1f5e:	mov	rsi, rax
0x1f61:	mov	edi, 1
0x1f66:	xor	eax, eax
0x1f68:	call	0x16a0


0x16a0:	jmp	qword ptr [rip + 0x2068ba]




0x46a4:	lea	rdx, [rip + 0x156c]
0x46ab:	mov	rsi, rax
0x46ae:	mov	edi, 1
0x46b3:	xor	eax, eax
0x46b5:	call	0x16a0


0x4977:	mov	edi, dword ptr [rip + 0x20369b]
0x497d:	lea	rdx, [rip + 0xcf4]
0x4984:	mov	rcx, rax
0x4987:	xor	esi, esi
0x4989:	xor	eax, eax
0x498b:	call	0x16c0


0x16c0:	jmp	qword ptr [rip + 0x2068aa]




0x4fe3:	mov	edx, r12d
0x4fe6:	mov	rsi, rbp
0x4fe9:	mov	edi, eax
0x4feb:	call	0x1590


0x1590:	jmp	qword ptr [rip + 0x206942]




0x239d:	mov	ecx, ebx
0x239f:	xor	edx, edx
0x23a1:	xor	esi, esi
0x23a3:	pop	rbx
0x23a4:	mov	edi, eax
0x23a6:	jmp	0x15d0


0x4efc:	test	eax, eax
0x4efe:	mov	rdi, rbx
0x4f01:	js	0x4f57


0x4f57:	pop	rbx
0x4f58:	pop	rbp
0x4f59:	pop	r12
0x4f5b:	jmp	0x14e0


0x4f03:	call	0x1660


0x14e0:	jmp	qword ptr [rip + 0x20699a]




0x4f08:	test	eax, eax
0x4f0a:	jne	0x4f38


0x4f0c:	mov	rdi, rbx
0x4f0f:	call	0x4f70


0x4f38:	mov	rdi, rbx
0x4f3b:	call	0x1620


0x4f40:	xor	esi, esi
0x4f42:	mov	edx, 1
0x4f47:	mov	edi, eax
0x4f49:	call	0x1590


0x5047:	cmp	rax, -3
0x504b:	mov	rbp, rax
0x504e:	jbe	0x5070


0x5070:	mov	rdx, qword ptr [rsp + 8]
0x5075:	xor	rdx, qword ptr fs:[0x28]
0x507e:	mov	rax, rbp
0x5081:	jne	0x508e


0x5050:	test	r12, r12
0x5053:	je	0x5070


0x5083:	add	rsp, 0x18
0x5087:	pop	rbx
0x5088:	pop	rbp
0x5089:	pop	r12
0x508b:	pop	r13
0x508d:	ret	


0x508e:	call	0x1530


0x5055:	xor	edi, edi
0x5057:	call	0x5120


0x1530:	jmp	qword ptr [rip + 0x206972]




0x50ac:	mov	ebx, dword ptr [rbp]
0x50af:	mov	rdi, rbp
0x50b2:	mov	r12, rax
0x50b5:	call	0x4ef0


0x17b3:	lea	rsi, [rip + 0x3b52]
0x17ba:	lea	rdi, [rip + 0x3b22]
0x17c1:	call	0x14f0


0x14f0:	jmp	qword ptr [rip + 0x206992]




0x512b:	mov	rdx, rax
0x512e:	mov	eax, 1
0x5133:	test	rdx, rdx
0x5136:	je	0x5155


0x5155:	add	rsp, 8
0x5159:	ret	


0x5138:	lea	rdi, [rip + 0xf0c]
0x513f:	mov	ecx, 2
0x5144:	mov	rsi, rdx
0x5147:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5147:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5149:	seta	cl
0x514c:	sbb	cl, 0
0x514f:	xor	eax, eax
0x5151:	test	cl, cl
0x5153:	jne	0x5160


0x5160:	lea	rdi, [rip + 0xee6]
0x5167:	mov	ecx, 6
0x516c:	mov	rsi, rdx
0x516f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x516f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5171:	seta	al
0x5174:	sbb	al, 0
0x5176:	test	al, al
0x5178:	setne	al
0x517b:	add	rsp, 8
0x517f:	ret	


0x505c:	test	al, al
0x505e:	jne	0x5070


0x5060:	movzx	eax, byte ptr [r13]
0x5065:	mov	ebp, 1
0x506a:	mov	dword ptr [rbx], eax
0x506c:	nop	dword ptr [rax]
0x5070:	mov	rdx, qword ptr [rsp + 8]
0x5075:	xor	rdx, qword ptr fs:[0x28]
0x507e:	mov	rax, rbp
0x5081:	jne	0x508e


0x518e:	test	rax, rax
0x5191:	je	0x51b0


0x51b0:	lea	rax, [rip + 0xe9c]
0x51b7:	add	rsp, 8
0x51bb:	ret	


0x5193:	cmp	byte ptr [rax], 0
0x5196:	lea	rdx, [rip + 0xeb6]
0x519d:	cmove	rax, rdx
0x51a1:	add	rsp, 8
0x51a5:	ret	


0x2470:	movzx	edx, byte ptr [rax]
0x2473:	and	edx, 0xffffffdf
0x2476:	cmp	dl, 0x55
0x2479:	je	0x24f0


0x24f0:	movzx	edx, byte ptr [rax + 1]
0x24f4:	and	edx, 0xffffffdf
0x24f7:	cmp	dl, 0x54
0x24fa:	jne	0x2480


0x247b:	cmp	dl, 0x47
0x247e:	je	0x24a0


0x24fc:	movzx	edx, byte ptr [rax + 2]
0x2500:	and	edx, 0xffffffdf
0x2503:	cmp	dl, 0x46
0x2506:	jne	0x2480


0x2480:	lea	rax, [rip + 0x324c]
0x2487:	lea	rdx, [rip + 0x3247]
0x248e:	cmp	ebx, 9
0x2491:	cmovne	rax, rdx
0x2495:	add	rsp, 8
0x2499:	pop	rbx
0x249a:	pop	rbp
0x249b:	ret	


0x24a0:	movzx	edx, byte ptr [rax + 1]
0x24a4:	and	edx, 0xffffffdf
0x24a7:	cmp	dl, 0x42
0x24aa:	jne	0x2480


0x250c:	cmp	byte ptr [rax + 3], 0x2d
0x2510:	jne	0x2480


0x24ac:	cmp	byte ptr [rax + 2], 0x31
0x24b0:	jne	0x2480


0x2516:	cmp	byte ptr [rax + 4], 0x38
0x251a:	jne	0x2480


0x24b2:	cmp	byte ptr [rax + 3], 0x38
0x24b6:	jne	0x2480


0x2520:	cmp	byte ptr [rax + 5], 0
0x2524:	jne	0x2480


0x24b8:	cmp	byte ptr [rax + 4], 0x30
0x24bc:	jne	0x2480


0x252a:	cmp	byte ptr [rbp], 0x60
0x252e:	lea	rax, [rip + 0x318f]
0x2535:	lea	rdx, [rip + 0x318c]
0x253c:	cmovne	rax, rdx
0x2540:	add	rsp, 8
0x2544:	pop	rbx
0x2545:	pop	rbp
0x2546:	ret	


0x24be:	cmp	byte ptr [rax + 5], 0x33
0x24c2:	jne	0x2480


0x24c4:	cmp	byte ptr [rax + 6], 0x30
0x24c8:	jne	0x2480


0x24ca:	cmp	byte ptr [rax + 7], 0
0x24ce:	jne	0x2480


0x24d0:	cmp	byte ptr [rbp], 0x60
0x24d4:	lea	rax, [rip + 0x31f1]
0x24db:	lea	rdx, [rip + 0x31ee]
0x24e2:	cmovne	rax, rdx
0x24e6:	add	rsp, 8
0x24ea:	pop	rbx
0x24eb:	pop	rbp
0x24ec:	ret	


0x17c6:	lea	rdi, [rip + 0x3b16]
0x17cd:	call	0x14d0


0x14d0:	jmp	qword ptr [rip + 0x2069a2]




0x4f4e:	cmp	rax, -1
0x4f52:	jne	0x4f0c


0x4f54:	mov	rdi, rbx
0x4f57:	pop	rbx
0x4f58:	pop	rbp
0x4f59:	pop	r12
0x4f5b:	jmp	0x14e0


0x4ff0:	cmp	rax, -1
0x4ff4:	je	0x5002


0x5002:	pop	rbx
0x5003:	pop	rbp
0x5004:	pop	r12
0x5006:	ret	


0x4ff6:	and	dword ptr [rbx], 0xffffffef
0x4ff9:	mov	qword ptr [rbx + 0x90], rax
0x5000:	xor	eax, eax
0x5002:	pop	rbx
0x5003:	pop	rbp
0x5004:	pop	r12
0x5006:	ret	


0x4990:	call	0x1480


0x46ba:	lea	rsi, [rip + 0x156c]
0x46c1:	mov	edx, 5
0x46c6:	xor	edi, edi
0x46c8:	call	0x1500


0x46cd:	lea	rcx, [rip + 0xeb4]
0x46d4:	lea	rdx, [rip + 0xc04]
0x46db:	mov	rsi, rax
0x46de:	mov	edi, 1
0x46e3:	xor	eax, eax
0x46e5:	call	0x16a0


0x46ea:	mov	rbx, qword ptr [rip + 0x203997]
0x46f1:	lea	rsi, [rip + 0x1768]
0x46f8:	xor	edi, edi
0x46fa:	mov	edx, 5
0x46ff:	call	0x1500


0x4704:	mov	rsi, rbx
0x4707:	mov	rdi, rax
0x470a:	pop	rbx
0x470b:	jmp	0x15f0


0x1f6d:	mov	rbx, qword ptr [rip + 0x206114]
0x1f74:	lea	rsi, [rip + 0x3445]
0x1f7b:	mov	edx, 5
0x1f80:	xor	edi, edi
0x1f82:	call	0x1500


0x1f87:	mov	rsi, rbx
0x1f8a:	mov	rdi, rax
0x1f8d:	call	0x15f0


0x1f92:	mov	rbx, qword ptr [rip + 0x2060ef]
0x1f99:	lea	rsi, [rip + 0x3460]
0x1fa0:	mov	edx, 5
0x1fa5:	xor	edi, edi
0x1fa7:	call	0x1500


0x1fac:	mov	rsi, rbx
0x1faf:	mov	rdi, rax
0x1fb2:	call	0x15f0


0x1fb7:	mov	rbx, qword ptr [rip + 0x2060ca]
0x1fbe:	lea	rsi, [rip + 0x3473]
0x1fc5:	mov	edx, 5
0x1fca:	xor	edi, edi
0x1fcc:	call	0x1500


0x1fd1:	mov	rsi, rbx
0x1fd4:	mov	rdi, rax
0x1fd7:	call	0x15f0


0x1fdc:	mov	rbx, qword ptr [rip + 0x2060a5]
0x1fe3:	lea	rsi, [rip + 0x349e]
0x1fea:	mov	edx, 5
0x1fef:	xor	edi, edi
0x1ff1:	call	0x1500


0x1ff6:	mov	rsi, rbx
0x1ff9:	mov	rdi, rax
0x1ffc:	call	0x15f0


0x2001:	mov	rbx, qword ptr [rip + 0x206080]
0x2008:	lea	rsi, [rip + 0x3511]
0x200f:	mov	edx, 5
0x2014:	xor	edi, edi
0x2016:	call	0x1500


0x201b:	mov	rsi, rbx
0x201e:	mov	rdi, rax
0x2021:	call	0x15f0


0x2026:	mov	rbx, qword ptr [rip + 0x20605b]
0x202d:	lea	rsi, [rip + 0x351c]
0x2034:	mov	edx, 5
0x2039:	xor	edi, edi
0x203b:	call	0x1500


0x2040:	mov	rsi, rbx
0x2043:	mov	rdi, rax
0x2046:	lea	rbx, [rip + 0x3217]
0x204d:	call	0x15f0


0x2052:	lea	rax, [rip + 0x3210]
0x2059:	lea	rcx, [rip + 0x324a]
0x2060:	mov	qword ptr [rsp + 0x60], 0
0x2069:	mov	qword ptr [rsp + 0x68], 0
0x2072:	mov	rdx, rsp
0x2075:	mov	qword ptr [rsp], rax
0x2079:	lea	rax, [rip + 0x31eb]
0x2080:	mov	qword ptr [rsp + 0x30], rcx
0x2085:	lea	rcx, [rip + 0x3228]
0x208c:	mov	qword ptr [rsp + 8], rax
0x2091:	lea	rax, [rip + 0x324b]
0x2098:	mov	qword ptr [rsp + 0x40], rcx
0x209d:	lea	rcx, [rip + 0x321a]
0x20a4:	mov	qword ptr [rsp + 0x10], rax
0x20a9:	lea	rax, [rip + 0x31cb]
0x20b0:	mov	qword ptr [rsp + 0x50], rcx
0x20b5:	mov	qword ptr [rsp + 0x18], rax
0x20ba:	lea	rax, [rip + 0x31d0]
0x20c1:	mov	qword ptr [rsp + 0x20], rax
0x20c6:	lea	rax, [rip + 0x31ce]
0x20cd:	mov	qword ptr [rsp + 0x28], rax
0x20d2:	mov	qword ptr [rsp + 0x38], rax
0x20d7:	mov	qword ptr [rsp + 0x48], rax
0x20dc:	mov	qword ptr [rsp + 0x58], rax
0x20e1:	nop	dword ptr [rax]
0x20e8:	add	rdx, 0x10
0x20ec:	mov	rdi, qword ptr [rdx]
0x20ef:	test	rdi, rdi
0x20f2:	je	0x2107


0x2107:	mov	r12, qword ptr [rdx + 8]
0x210b:	xor	edi, edi
0x210d:	mov	edx, 5
0x2112:	lea	rsi, [rip + 0x31af]
0x2119:	test	r12, r12
0x211c:	je	0x21e3


0x20f4:	mov	ecx, 5
0x20f9:	mov	rsi, rbx
0x20fc:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x21e3:	call	0x1500


0x2122:	call	0x1500


0x20fc:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x20fe:	seta	al
0x2101:	sbb	al, 0
0x2103:	test	al, al
0x2105:	jne	0x20e8


0x20e8:	add	rdx, 0x10
0x20ec:	mov	rdi, qword ptr [rdx]
0x20ef:	test	rdi, rdi
0x20f2:	je	0x2107


0x2127:	lea	rcx, [rip + 0x345a]
0x212e:	lea	rdx, [rip + 0x31aa]
0x2135:	mov	rsi, rax
0x2138:	mov	edi, 1
0x213d:	xor	eax, eax
0x213f:	call	0x16a0


0x2144:	xor	esi, esi
0x2146:	mov	edi, 5
0x214b:	call	0x1690


0x2150:	test	rax, rax
0x2153:	je	0x2171


0x2171:	lea	rsi, [rip + 0x3179]
0x2178:	xor	edi, edi
0x217a:	mov	edx, 5
0x217f:	call	0x1500


0x2155:	lea	rsi, [rip + 0x3191]
0x215c:	mov	edx, 3
0x2161:	mov	rdi, rax
0x2164:	call	0x14a0


0x14a0:	jmp	qword ptr [rip + 0x2069ba]




0x2184:	lea	rcx, [rip + 0x30d9]
0x218b:	lea	rdx, [rip + 0x33f6]
0x2192:	mov	rsi, rax
0x2195:	mov	edi, 1
0x219a:	xor	eax, eax
0x219c:	call	0x16a0


0x21a1:	cmp	r12, rbx
0x21a4:	lea	rcx, [rip + 0x30da]
0x21ab:	lea	rbx, [rip + 0x3a4f]
0x21b2:	cmove	rbx, rcx
0x21b6:	lea	rsi, [rip + 0x343b]
0x21bd:	xor	edi, edi
0x21bf:	mov	edx, 5
0x21c4:	call	0x1500


0x21c9:	mov	rcx, rbx
0x21cc:	mov	rsi, rax
0x21cf:	mov	rdx, r12
0x21d2:	mov	edi, 1
0x21d7:	xor	eax, eax
0x21d9:	call	0x16a0


0x21de:	jmp	0x1f46


0x21e8:	lea	rcx, [rip + 0x3399]
0x21ef:	lea	rdx, [rip + 0x30e9]
0x21f6:	mov	rsi, rax
0x21f9:	mov	edi, 1
0x21fe:	xor	eax, eax
0x2200:	call	0x16a0


0x2205:	xor	esi, esi
0x2207:	mov	edi, 5
0x220c:	call	0x1690


0x2211:	test	rax, rax
0x2214:	je	0x222e


0x222e:	lea	rsi, [rip + 0x30bc]
0x2235:	mov	edx, 5
0x223a:	xor	edi, edi
0x223c:	lea	r12, [rip + 0x3021]
0x2243:	lea	rbx, [rip + 0x303b]
0x224a:	call	0x1500


0x2216:	lea	rsi, [rip + 0x30d0]
0x221d:	mov	edx, 3
0x2222:	mov	rdi, rax
0x2225:	call	0x14a0


0x224f:	lea	rcx, [rip + 0x300e]
0x2256:	lea	rdx, [rip + 0x332b]
0x225d:	mov	rsi, rax
0x2260:	mov	edi, 1
0x2265:	xor	eax, eax
0x2267:	call	0x16a0


0x226c:	jmp	0x21b6


0x21b6:	lea	rsi, [rip + 0x343b]
0x21bd:	xor	edi, edi
0x21bf:	mov	edx, 5
0x21c4:	call	0x1500


0x417c:	cmp	r12, 9
0x4180:	ja	0x44c0


0x4186:	lea	rdx, [rip + 0x1d17]
0x418d:	movsxd	rax, dword ptr [rdx + r12*4]
0x4191:	add	rax, rdx
0x4194:	jmp	rax


0x44c0:	mov	r10, qword ptr [rbx + 0x40]
0x44c4:	mov	r9, qword ptr [rbx + 0x38]
0x44c8:	mov	edx, 5
0x44cd:	mov	rax, qword ptr [rbx + 0x10]
0x44d1:	mov	r8, qword ptr [rbx + 8]
0x44d5:	lea	rsi, [rip + 0x1944]
0x44dc:	mov	r13, qword ptr [rbx + 0x30]
0x44e0:	mov	r12, qword ptr [rbx + 0x28]
0x44e4:	mov	r15, qword ptr [rbx + 0x20]
0x44e8:	mov	r14, qword ptr [rbx + 0x18]
0x44ec:	mov	qword ptr [rsp + 0x18], r10
0x44f1:	mov	qword ptr [rsp + 0x10], r9
0x44f6:	mov	qword ptr [rsp], rax
0x44fa:	mov	qword ptr [rsp + 8], r8
0x44ff:	mov	rbx, qword ptr [rbx]
0x4502:	jmp	0x4292


0x4292:	xor	edi, edi
0x4294:	call	0x1500


0x4299:	mov	r10, qword ptr [rsp + 0x18]
0x429e:	push	r10
0x42a0:	jmp	0x41e4


0x41e4:	mov	r9, qword ptr [rsp + 0x18]
0x41e9:	mov	rdx, rax
0x41ec:	mov	rcx, rbx
0x41ef:	mov	esi, 1
0x41f4:	mov	rdi, rbp
0x41f7:	xor	eax, eax
0x41f9:	push	r9
0x41fb:	push	r13
0x41fd:	push	r12
0x41ff:	push	r15
0x4201:	push	r14
0x4203:	mov	r9, qword ptr [rsp + 0x30]
0x4208:	mov	r8, qword ptr [rsp + 0x38]
0x420d:	call	0x1720


0x4212:	add	rsp, 0x30
0x4216:	add	rsp, 0x28
0x421a:	pop	rbx
0x421b:	pop	rbp
0x421c:	pop	r12
0x421e:	pop	r13
0x4220:	pop	r14
0x4222:	pop	r15
0x4224:	ret	


0x396d:	mov	dword ptr [rbp], r12d
0x3971:	pop	rbx
0x3972:	pop	rbp
0x3973:	pop	r12
0x3975:	ret	


0x382e:	mov	dword ptr [rip + 0x204823], r12d
0x3835:	mov	eax, dword ptr [rbp + 4]
0x3838:	shl	r15, 4
0x383c:	sub	rsp, 8
0x3840:	add	rbx, r15
0x3843:	lea	r15, [rbp + 8]
0x3847:	mov	r8d, dword ptr [rbp]
0x384b:	mov	r11, qword ptr [rbx]
0x384e:	mov	r12, qword ptr [rbx + 8]
0x3852:	mov	rcx, r14
0x3855:	or	eax, 1
0x3858:	mov	dword ptr [rsp + 0x24], eax
0x385c:	push	qword ptr [rbp + 0x30]
0x385f:	mov	r9d, eax
0x3862:	push	qword ptr [rbp + 0x28]
0x3865:	push	r15
0x3867:	mov	rsi, r11
0x386a:	mov	rdx, qword ptr [rsp + 0x28]
0x386f:	mov	rdi, r12
0x3872:	mov	qword ptr [rsp + 0x30], r11
0x3877:	call	0x2550


0x4b2a:	mov	edx, dword ptr [rsp + 8]
0x4b2e:	mov	rsi, qword ptr [rax]
0x4b31:	mov	rax, rbp
0x4b34:	jmp	0x4b47


0x4b47:	movzx	ecx, bl
0x4b4a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x4b4f:	jne	0x4b40


0x4b51:	cmp	bl, 0x2d
0x4b54:	je	0x4ba8


0x4b40:	add	rax, 1
0x4b44:	movzx	ebx, byte ptr [rax]
0x4b47:	movzx	ecx, bl
0x4b4a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x4b4f:	jne	0x4b40


0x4ba8:	mov	ebp, 4
0x4bad:	mov	rdi, qword ptr [rsp + 0x18]
0x4bb2:	xor	rdi, qword ptr fs:[0x28]
0x4bbb:	mov	eax, ebp
0x4bbd:	jne	0x4e50


0x4b56:	xor	ecx, ecx
0x4b58:	mov	rsi, r15
0x4b5b:	mov	rdi, rbp
0x4b5e:	call	0x15b0


0x4bc3:	add	rsp, 0x28
0x4bc7:	pop	rbx
0x4bc8:	pop	rbp
0x4bc9:	pop	r12
0x4bcb:	pop	r13
0x4bcd:	pop	r14
0x4bcf:	pop	r15
0x4bd1:	ret	


0x4e50:	call	0x1530


0x15b0:	jmp	qword ptr [rip + 0x206932]




0x1c56:	mov	r15, rbx
0x1c59:	mov	rcx, qword ptr [rax]
0x1c5c:	jmp	0x1c68


0x1c68:	movzx	eax, byte ptr [r13 + r15 - 1]
0x1c6e:	lea	rdx, [r15 - 1]
0x1c72:	test	byte ptr [rcx + rax*2], 1
0x1c76:	je	0x1c60


0x1c60:	test	rdx, rdx
0x1c63:	mov	r15, rdx
0x1c66:	je	0x1c17


0x1c78:	mov	rcx, qword ptr [rip + 0x206409]
0x1c7f:	mov	rdi, r13
0x1c82:	mov	rdx, r15
0x1c85:	mov	esi, 1
0x1c8a:	call	0x1670


0x1c8f:	mov	rdi, qword ptr [rip + 0x2063f2]
0x1c96:	mov	rax, qword ptr [rdi + 0x28]
0x1c9a:	cmp	rax, qword ptr [rdi + 0x30]
0x1c9e:	jae	0x1ede


0x1ca4:	lea	rdx, [rax + 1]
0x1ca8:	mov	qword ptr [rdi + 0x28], rdx
0x1cac:	mov	byte ptr [rax], 0xa
0x1caf:	mov	r13, qword ptr [rip + 0x20641a]
0x1cb6:	sub	rbx, r15
0x1cb9:	mov	rdx, rbx
0x1cbc:	lea	rsi, [r13 + r15]
0x1cc1:	mov	rdi, r13
0x1cc4:	call	0x16b0


0x1ede:	mov	esi, 0xa
0x1ee3:	call	0x1570


0x16b0:	jmp	qword ptr [rip + 0x2068b2]


0x1570:	jmp	qword ptr [rip + 0x206952]






0x1c3a:	mov	r13, qword ptr [rip + 0x20648f]
0x1c41:	jmp	0x1bed


0x1bed:	mov	rdi, r15
0x1bf0:	mov	esi, ebp
0x1bf2:	call	0x1af0


0x1ddc:	jmp	0x1ba9


0x1d21:	cmp	eax, -1
0x1d24:	mov	ebp, eax
0x1d26:	jne	0x1bc5


0x1d2c:	mov	rax, qword ptr [rsp + 0x18]
0x1d31:	test	rbx, rbx
0x1d34:	mov	ebp, dword ptr [rax]
0x1d36:	je	0x1d53


0x1bc5:	lea	r14, [rbx + 1]
0x1bc9:	cmp	r14, qword ptr [rip + 0x206508]
0x1bd0:	mov	r13, qword ptr [rip + 0x2064f9]
0x1bd7:	jae	0x1d98


0x1d53:	test	byte ptr [r12], 0x20
0x1d58:	jne	0x1e60


0x1d38:	mov	rcx, qword ptr [rip + 0x206349]
0x1d3f:	mov	rdi, qword ptr [rip + 0x20638a]
0x1d46:	mov	rdx, rbx
0x1d49:	mov	esi, 1
0x1d4e:	call	0x1670


0x1d5e:	mov	rsi, qword ptr [rsp + 0x10]
0x1d63:	lea	rdi, [rip + 0x3958]
0x1d6a:	mov	ecx, 2
0x1d6f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1e60:	mov	rbx, qword ptr [rsp + 0x10]
0x1e65:	xor	edi, edi
0x1e67:	mov	esi, 3
0x1e6c:	mov	rdx, rbx
0x1e6f:	call	0x3f00


0x1d6f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1d71:	seta	al
0x1d74:	sbb	al, 0
0x1d76:	test	al, al
0x1d78:	jne	0x1ec0


0x1d7e:	mov	ebx, 1
0x1d83:	add	rsp, 0x28
0x1d87:	mov	eax, ebx
0x1d89:	pop	rbx
0x1d8a:	pop	rbp
0x1d8b:	pop	r12
0x1d8d:	pop	r13
0x1d8f:	pop	r14
0x1d91:	pop	r15
0x1d93:	ret	


0x1ec0:	mov	rdi, r12
0x1ec3:	call	0x4ef0


0x4fa7:	mov	rdi, rbx
0x4faa:	pop	rbx
0x4fab:	jmp	0x1640


0x4656:	mov	rax, qword ptr [rsp + 0x78]
0x465b:	xor	rax, qword ptr fs:[0x28]
0x4664:	jne	0x4670


0x4666:	add	rsp, 0xb8
0x466d:	pop	rbx
0x466e:	pop	rbp
0x466f:	ret	


0x4670:	call	0x1530


0x4580:	mov	rax, qword ptr [rsp + 0x58]
0x4585:	xor	rax, qword ptr fs:[0x28]
0x458e:	jne	0x4595


0x4590:	add	rsp, 0x68
0x4594:	ret	


0x4595:	call	0x1530


0x49da:	test	eax, eax
0x49dc:	jne	0x4a70


0x49e2:	mov	rbp, qword ptr [rsp]
0x49e6:	cmp	rbp, r14
0x49e9:	jb	0x49f0


0x4a70:	mov	ebp, eax
0x4a72:	call	0x1490


0x49f0:	call	0x1490


0x49eb:	cmp	rbp, r15
0x49ee:	jbe	0x4a44


0x4a44:	mov	rdx, qword ptr [rsp + 8]
0x4a49:	xor	rdx, qword ptr fs:[0x28]
0x4a52:	mov	rax, rbp
0x4a55:	jne	0x4a9b


0x4a57:	add	rsp, 0x18
0x4a5b:	pop	rbx
0x4a5c:	pop	rbp
0x4a5d:	pop	r12
0x4a5f:	pop	r13
0x4a61:	pop	r14
0x4a63:	pop	r15
0x4a65:	ret	


0x4a9b:	call	0x1530


0x49f5:	cmp	rbp, 0x40000000
0x49fc:	mov	r14, rax
0x49ff:	sbb	eax, eax
0x4a01:	and	eax, 0xffffffd7
0x4a04:	add	eax, 0x4b
0x4a07:	mov	dword ptr [r14], eax
0x4a0a:	mov	rdi, r12
0x4a0d:	call	0x40d0


0x4a77:	cmp	ebp, 1
0x4a7a:	mov	r14, rax
0x4a7d:	je	0x4a90


0x4a90:	mov	dword ptr [rax], 0x4b
0x4a96:	jmp	0x4a0a


0x4a7f:	cmp	ebp, 3
0x4a82:	jne	0x4a0a


0x4a0a:	mov	rdi, r12
0x4a0d:	call	0x40d0


0x4a84:	mov	dword ptr [rax], 0
0x4a8a:	jmp	0x4a0a


0x4abc:	add	rsp, 0x18
0x4ac0:	ret	


0x1ee8:	jmp	0x1caf


0x1caf:	mov	r13, qword ptr [rip + 0x20641a]
0x1cb6:	sub	rbx, r15
0x1cb9:	mov	rdx, rbx
0x1cbc:	lea	rsi, [r13 + r15]
0x1cc1:	mov	rdi, r13
0x1cc4:	call	0x16b0


0x1cc9:	test	rbx, rbx
0x1ccc:	je	0x1ed6


0x1ed6:	xor	r15d, r15d
0x1ed9:	jmp	0x1bed


0x1cd2:	lea	r10, [rbx + r13]
0x1cd6:	mov	r8, r13
0x1cd9:	xor	r15d, r15d
0x1cdc:	nop	dword ptr [rax]
0x1ce0:	movsx	esi, byte ptr [r8]
0x1ce4:	mov	rdi, r15
0x1ce7:	call	0x1af0


0x1cec:	add	r8, 1
0x1cf0:	mov	r15, rax
0x1cf3:	cmp	r10, r8
0x1cf6:	jne	0x1ce0


0x1cf8:	jmp	0x1bed


0x1ce0:	movsx	esi, byte ptr [r8]
0x1ce4:	mov	rdi, r15
0x1ce7:	call	0x1af0


0x4b63:	mov	rcx, qword ptr [r15]
0x4b66:	mov	rbx, rax
0x4b69:	cmp	rcx, rbp
0x4b6c:	je	0x4b98


0x4b98:	test	r13, r13
0x4b9b:	mov	qword ptr [rsp + 8], rcx
0x4ba0:	jne	0x4be0


0x4b6e:	mov	eax, dword ptr [r12]
0x4b72:	test	eax, eax
0x4b74:	je	0x4bd8


0x4be0:	movzx	r12d, byte ptr [rbp]
0x4be5:	test	r12b, r12b
0x4be8:	je	0x4ba8


0x4bd8:	xor	ebp, ebp
0x4bda:	jmp	0x4b80


0x4b76:	cmp	eax, 0x22
0x4b79:	mov	ebp, 1
0x4b7e:	jne	0x4ba8


0x4bea:	movsx	esi, r12b
0x4bee:	mov	rdi, r13
0x4bf1:	xor	ebp, ebp
0x4bf3:	call	0x1560


0x4b80:	test	r13, r13
0x4b83:	je	0x4b8e


0x1560:	jmp	qword ptr [rip + 0x20695a]


0x4b8e:	mov	qword ptr [r14], rbx
0x4b91:	jmp	0x4bad


0x4b85:	movzx	r12d, byte ptr [rcx]
0x4b89:	test	r12b, r12b
0x4b8c:	jne	0x4c07




0x4bad:	mov	rdi, qword ptr [rsp + 0x18]
0x4bb2:	xor	rdi, qword ptr fs:[0x28]
0x4bbb:	mov	eax, ebp
0x4bbd:	jne	0x4e50


0x4c07:	movsx	esi, r12b
0x4c0b:	mov	rdi, r13
0x4c0e:	mov	qword ptr [rsp + 8], rcx
0x4c13:	call	0x1560


0x222a:	test	eax, eax
0x222c:	jne	0x2271


0x2271:	lea	r12, [rip + 0x2fec]
0x2278:	mov	r13, qword ptr [rip + 0x205e09]
0x227f:	lea	rsi, [rip + 0x332a]
0x2286:	xor	edi, edi
0x2288:	mov	edx, 5
0x228d:	call	0x1500


0x2292:	mov	rsi, r13
0x2295:	mov	rdi, rax
0x2298:	call	0x15f0


0x229d:	jmp	0x2171


0x2169:	test	eax, eax
0x216b:	jne	0x2278


0x2278:	mov	r13, qword ptr [rip + 0x205e09]
0x227f:	lea	rsi, [rip + 0x332a]
0x2286:	xor	edi, edi
0x2288:	mov	edx, 5
0x228d:	call	0x1500


0x17d2:	lea	rdi, [rip + 0xaf7]
0x17d9:	call	0x5240


0x17de:	mov	byte ptr [rip + 0x2068fb], 0
0x17e5:	mov	byte ptr [rip + 0x2068f5], 0
0x17ec:	mov	byte ptr [rip + 0x2068ef], 0
0x17f3:	lea	rcx, [rip + 0x206326]
0x17fa:	lea	rdx, [rip + 0x3e3f]
0x1801:	xor	r8d, r8d
0x1804:	mov	rsi, rbx
0x1807:	mov	edi, ebp
0x1809:	call	0x1540


0x1540:	jmp	qword ptr [rip + 0x20696a]




0x4f14:	test	eax, eax
0x4f16:	je	0x4f54


0x4f18:	call	0x1490


0x4f1d:	mov	r12d, dword ptr [rax]
0x4f20:	mov	rdi, rbx
0x4f23:	mov	rbp, rax
0x4f26:	call	0x14e0


0x4f2b:	test	r12d, r12d
0x4f2e:	jne	0x4f60


0x4f30:	pop	rbx
0x4f31:	pop	rbp
0x4f32:	pop	r12
0x4f34:	ret	


0x4f60:	mov	dword ptr [rbp], r12d
0x4f64:	mov	eax, 0xffffffff
0x4f69:	jmp	0x4f30


0x1ec8:	cmp	eax, -1
0x1ecb:	jne	0x1d7e


0x1ed1:	jmp	0x1e27


0x50ba:	and	ebx, 0x20
0x50bd:	test	ebx, ebx
0x50bf:	jne	0x50d8


0x50c1:	test	eax, eax
0x50c3:	je	0x50cf


0x50d8:	test	eax, eax
0x50da:	jne	0x50f8


0x50cf:	pop	rbx
0x50d0:	pop	rbp
0x50d1:	pop	r12
0x50d3:	ret	


0x50c5:	test	r12, r12
0x50c8:	mov	eax, 0xffffffff
0x50cd:	je	0x5108


0x50dc:	call	0x1490


0x50f8:	pop	rbx
0x50f9:	mov	eax, 0xffffffff
0x50fe:	pop	rbp
0x50ff:	pop	r12
0x5101:	ret	


0x5108:	call	0x1490


0x510d:	cmp	dword ptr [rax], 9
0x5110:	pop	rbx
0x5111:	pop	rbp
0x5112:	pop	r12
0x5114:	setne	al
0x5117:	movzx	eax, al
0x511a:	neg	eax
0x511c:	ret	


0x50e1:	mov	dword ptr [rax], 0
0x50e7:	mov	eax, 0xffffffff
0x50ec:	pop	rbx
0x50ed:	pop	rbp
0x50ee:	pop	r12
0x50f0:	ret	


0x22e2:	test	eax, eax
0x22e4:	je	0x22fc


0x22fc:	mov	rdi, qword ptr [rip + 0x205dbd]
0x2303:	call	0x50a0


0x22e6:	call	0x1490


0x22eb:	cmp	byte ptr [rip + 0x205df6], 0
0x22f2:	mov	rbx, rax
0x22f5:	je	0x2313


0x2313:	lea	rsi, [rip + 0x334e]
0x231a:	xor	edi, edi
0x231c:	mov	edx, 5
0x2321:	call	0x1500


0x22f7:	cmp	dword ptr [rax], 0x20
0x22fa:	jne	0x2313


0x2326:	mov	rdi, qword ptr [rip + 0x205dc3]
0x232d:	mov	rbp, rax
0x2330:	test	rdi, rdi
0x2333:	je	0x235d


0x235d:	mov	esi, dword ptr [rbx]
0x235f:	lea	rdx, [rip + 0x3312]
0x2366:	mov	rcx, rax
0x2369:	xor	edi, edi
0x236b:	xor	eax, eax
0x236d:	call	0x16c0


0x2335:	call	0x3ed0


0x2372:	jmp	0x2352


0x2352:	mov	edi, dword ptr [rip + 0x205cc0]
0x2358:	call	0x14b0


0x14b0:	jmp	qword ptr [rip + 0x2069b2]




0x2308:	test	eax, eax
0x230a:	jne	0x2352


0x230c:	add	rsp, 8
0x2310:	pop	rbx
0x2311:	pop	rbp
0x2312:	ret	


0x180e:	cmp	eax, -1
0x1811:	je	0x190e


0x190e:	mov	eax, dword ptr [rip + 0x206784]
0x1914:	cmp	eax, ebp
0x1916:	je	0x19ac


0x1817:	cmp	eax, 0x39
0x181a:	jle	0x1850


0x19ac:	lea	rdi, [rip + 0x3d0f]
0x19b3:	mov	rsi, r12
0x19b6:	call	0x1b40


0x191c:	jge	0x19bf


0x1850:	cmp	eax, 0x30
0x1853:	jge	0x1898


0x181c:	cmp	eax, 0x73
0x181f:	je	0x18f0


0x1922:	movsxd	rdx, eax
0x1925:	not	eax
0x1927:	add	eax, ebp
0x1929:	lea	r13, [rbx + rdx*8]
0x192d:	add	rax, rdx
0x1930:	lea	rbp, [rbx + rax*8 + 8]
0x1935:	mov	ebx, 1
0x193a:	nop	word ptr [rax + rax]
0x1940:	mov	rdi, qword ptr [r13]
0x1944:	mov	rsi, r12
0x1947:	add	r13, 8
0x194b:	call	0x1b40


0x19bf:	mov	ebx, 1
0x19c4:	jmp	0x1957


0x1855:	cmp	eax, 0xffffff7d
0x185a:	jne	0x19c6


0x1898:	mov	rdx, qword ptr [rip + 0x206801]
0x189f:	test	rdx, rdx
0x18a2:	je	0x18fc


0x18f0:	mov	byte ptr [rip + 0x2067eb], 1
0x18f7:	jmp	0x17f3


0x1825:	cmp	eax, 0x77
0x1828:	je	0x18af


0x1957:	cmp	byte ptr [rip + 0x206782], 0
0x195e:	jne	0x1981


0x1860:	mov	rdi, qword ptr [rip + 0x206821]
0x1867:	mov	rcx, qword ptr [rip + 0x2067a2]
0x186e:	lea	r8, [rip + 0x3ac9]
0x1875:	lea	rdx, [rip + 0x3a63]
0x187c:	lea	rsi, [rip + 0x39e1]
0x1883:	xor	r9d, r9d
0x1886:	xor	eax, eax
0x1888:	call	0x45b0


0x19c6:	cmp	eax, 0xffffff7e
0x19cb:	jne	0x1833


0x18fc:	mov	byte ptr [rsp + 6], al
0x1900:	mov	byte ptr [rsp + 7], 0
0x1905:	mov	qword ptr [rip + 0x206794], r13
0x190c:	jmp	0x18af


0x18a4:	sub	rdx, 1
0x18a8:	mov	qword ptr [rip + 0x2067f1], rdx
0x18af:	lea	rsi, [rip + 0x3a6e]
0x18b6:	mov	edx, 5
0x18bb:	xor	edi, edi
0x18bd:	call	0x1500


0x17f3:	lea	rcx, [rip + 0x206326]
0x17fa:	lea	rdx, [rip + 0x3e3f]
0x1801:	xor	r8d, r8d
0x1804:	mov	rsi, rbx
0x1807:	mov	edi, ebp
0x1809:	call	0x1540


0x18af:	lea	rsi, [rip + 0x3a6e]
0x18b6:	mov	edx, 5
0x18bb:	xor	edi, edi
0x18bd:	call	0x1500


0x182e:	cmp	eax, 0x62
0x1831:	je	0x1840


0x1960:	xor	ebx, 1
0x1963:	mov	rcx, qword ptr [rsp + 8]
0x1968:	xor	rcx, qword ptr fs:[0x28]
0x1971:	movzx	eax, bl
0x1974:	jne	0x19d8


0x1981:	mov	rdi, qword ptr [rip + 0x206708]
0x1988:	call	0x4ef0


0x19d1:	xor	edi, edi
0x19d3:	call	0x1ef0


0x1833:	mov	edi, 1
0x1838:	call	0x1ef0


0x1840:	mov	byte ptr [rip + 0x20689a], 1
0x1847:	jmp	0x17f3


0x1976:	add	rsp, 0x18
0x197a:	pop	rbx
0x197b:	pop	rbp
0x197c:	pop	r12
0x197e:	pop	r13
0x1980:	ret	


0x19d8:	call	0x1530


0x198d:	add	eax, 1
0x1990:	jne	0x1960


0x1992:	call	0x1490


0x1997:	mov	esi, dword ptr [rax]
0x1999:	lea	rdx, [rip + 0x3d22]
0x19a0:	mov	edi, 1
0x19a5:	xor	eax, eax
0x19a7:	call	0x16c0


0x18c2:	mov	rdi, qword ptr [rip + 0x2067d7]
0x18c9:	lea	rcx, [rip + 0x4331]
0x18d0:	mov	r8, rax
0x18d3:	xor	r9d, r9d
0x18d6:	mov	rdx, -0xa
0x18dd:	mov	esi, 1
0x18e2:	call	0x4aa0


0x18e7:	mov	r12, rax
0x18ea:	jmp	0x17f3


0x188d:	xor	edi, edi
0x188f:	call	0x1700


0x1950:	and	ebx, eax
0x1952:	cmp	r13, rbp
0x1955:	jne	0x1940


0x1940:	mov	rdi, qword ptr [r13]
0x1944:	mov	rsi, r12
0x1947:	add	r13, 8
0x194b:	call	0x1b40


0x19bb:	mov	ebx, eax
0x19bd:	jmp	0x1957


0x4c18:	test	rax, rax
0x4c1b:	mov	rcx, qword ptr [rsp + 8]
0x4c20:	je	0x4cec


0x4cec:	mov	qword ptr [r14], rbx
0x4cef:	or	ebp, 2
0x4cf2:	jmp	0x4bad


0x4c26:	lea	eax, [r12 - 0x45]
0x4c2b:	cmp	al, 0x2f
0x4c2d:	ja	0x4c80


0x4c2f:	movabs	rdx, 0x814400308945
0x4c39:	bt	rdx, rax
0x4c3d:	jae	0x4c80


0x4c80:	mov	edi, 1
0x4c85:	mov	esi, 0x400
0x4c8a:	sub	r12d, 0x42
0x4c8e:	cmp	r12b, 0x35
0x4c92:	ja	0x4cec


0x4c3f:	mov	esi, 0x30
0x4c44:	mov	rdi, r13
0x4c47:	mov	qword ptr [rsp + 8], rcx
0x4c4c:	call	0x1560


0x4c94:	lea	rdx, [rip + 0x12cd]
0x4c9b:	movzx	r12d, r12b
0x4c9f:	movsxd	rax, dword ptr [rdx + r12*4]
0x4ca3:	add	rax, rdx
0x4ca6:	jmp	rax


0x4c51:	test	rax, rax
0x4c54:	mov	rcx, qword ptr [rsp + 8]
0x4c59:	je	0x4c80


0x4c5b:	movzx	eax, byte ptr [rcx + 1]
0x4c5f:	cmp	al, 0x44
0x4c61:	je	0x4c6f


0x4c6f:	mov	edi, 2
0x4c74:	mov	esi, 0x3e8
0x4c79:	jmp	0x4c8a


0x4c63:	cmp	al, 0x69
0x4c65:	je	0x4e38


0x4c8a:	sub	r12d, 0x42
0x4c8e:	cmp	r12b, 0x35
0x4c92:	ja	0x4cec


0x4e38:	xor	edi, edi
0x4e3a:	cmp	byte ptr [rcx + 2], 0x42
0x4e3e:	mov	esi, 0x400
0x4e43:	sete	dil
0x4e47:	lea	edi, [rdi + rdi + 1]
0x4e4b:	jmp	0x4c8a


0x4c6b:	cmp	al, 0x42
0x4c6d:	jne	0x4c80


0x4bf8:	test	rax, rax
0x4bfb:	mov	ebx, 1
0x4c00:	mov	rcx, qword ptr [rsp + 8]
0x4c05:	je	0x4ba8


0x233a:	mov	esi, dword ptr [rbx]
0x233c:	lea	rdx, [rip + 0x3331]
0x2343:	mov	rcx, rax
0x2346:	mov	r8, rbp
0x2349:	xor	edi, edi
0x234b:	xor	eax, eax
0x234d:	call	0x16c0


0x4a12:	mov	esi, dword ptr [r14]
0x4a15:	mov	r8, rax
0x4a18:	mov	eax, 0
0x4a1d:	lea	rdx, [rip + 0xc50]
0x4a24:	mov	rcx, r13
0x4a27:	cmp	esi, 0x16
0x4a2a:	cmove	esi, eax
0x4a2d:	test	ebx, ebx
0x4a2f:	mov	eax, 1
0x4a34:	cmove	ebx, eax
0x4a37:	xor	eax, eax
0x4a39:	mov	edi, ebx
0x4a3b:	call	0x16c0


0x4a40:	mov	rbp, qword ptr [rsp]
0x4a44:	mov	rdx, qword ptr [rsp + 8]
0x4a49:	xor	rdx, qword ptr fs:[0x28]
0x4a52:	mov	rax, rbp
0x4a55:	jne	0x4a9b


0x387c:	add	rsp, 0x20
0x3880:	mov	r11, qword ptr [rsp + 0x10]
0x3885:	cmp	r11, rax
0x3888:	ja	0x38f1


0x388a:	lea	rsi, [rax + 1]
0x388e:	lea	rax, [rip + 0x20486b]
0x3895:	cmp	r12, rax
0x3898:	mov	qword ptr [rbx], rsi
0x389b:	je	0x38af


0x38f1:	mov	eax, dword ptr [rsp + 0x18]
0x38f5:	mov	dword ptr [r13], eax
0x38f9:	add	rsp, 0x28
0x38fd:	mov	rax, r12
0x3900:	pop	rbx
0x3901:	pop	rbp
0x3902:	pop	r12
0x3904:	pop	r13
0x3906:	pop	r14
0x3908:	pop	r15
0x390a:	ret	


0x38af:	mov	rdi, rsi
0x38b2:	mov	qword ptr [rsp + 0x10], rsi
0x38b7:	call	0x4710


0x389d:	mov	rdi, r12
0x38a0:	mov	qword ptr [rsp + 0x10], rsi
0x38a5:	call	0x1470


0x38aa:	mov	rsi, qword ptr [rsp + 0x10]
0x38af:	mov	rdi, rsi
0x38b2:	mov	qword ptr [rsp + 0x10], rsi
0x38b7:	call	0x4710


0x38bc:	sub	rsp, 8
0x38c0:	mov	qword ptr [rbx + 8], rax
0x38c4:	mov	r8d, dword ptr [rbp]
0x38c8:	push	qword ptr [rbp + 0x30]
0x38cb:	push	qword ptr [rbp + 0x28]
0x38ce:	mov	rcx, r14
0x38d1:	push	r15
0x38d3:	mov	r9d, dword ptr [rsp + 0x3c]
0x38d8:	mov	rdi, rax
0x38db:	mov	rdx, qword ptr [rsp + 0x28]
0x38e0:	mov	rsi, qword ptr [rsp + 0x30]
0x38e5:	mov	r12, rax
0x38e8:	call	0x2550


0x4002:	mov	rdi, qword ptr [rsp + 0x38]
0x4007:	xor	rdi, qword ptr fs:[0x28]
0x4010:	jne	0x401c


0x4012:	add	rsp, 0x48
0x4016:	ret	


0x401c:	call	0x1530


0x3d4f:	mov	rcx, qword ptr [rsp + 0x38]
0x3d54:	xor	rcx, qword ptr fs:[0x28]
0x3d5d:	jne	0x3d69


0x3d5f:	add	rsp, 0x48
0x3d63:	ret	


0x3d69:	call	0x1530


0x3ddb:	mov	rdx, qword ptr [rsp + 0x38]
0x3de0:	xor	rdx, qword ptr fs:[0x28]
0x3de9:	jne	0x3df5


0x3deb:	add	rsp, 0x48
0x3def:	ret	


0x3df5:	call	0x1530


0x3f6f:	mov	rcx, qword ptr [rsp + 0x38]
0x3f74:	xor	rcx, qword ptr fs:[0x28]
0x3f7d:	jne	0x3f89


0x3f7f:	add	rsp, 0x48
0x3f83:	ret	


0x3f89:	call	0x1530


0x1e74:	lea	rdx, [rip + 0x37fd]
0x1e7b:	mov	rcx, rax
0x1e7e:	xor	edi, edi
0x1e80:	xor	eax, eax
0x1e82:	mov	esi, ebp
0x1e84:	call	0x16c0


0x1e89:	lea	rdi, [rip + 0x3832]
0x1e90:	mov	rsi, rbx
0x1e93:	mov	ecx, 2
0x1e98:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1e98:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1e9a:	seta	al
0x1e9d:	sbb	al, 0
0x1e9f:	xor	ebx, ebx
0x1ea1:	test	al, al
0x1ea3:	je	0x1d83


0x1d83:	add	rsp, 0x28
0x1d87:	mov	eax, ebx
0x1d89:	pop	rbx
0x1d8a:	pop	rbp
0x1d8b:	pop	r12
0x1d8d:	pop	r13
0x1d8f:	pop	r14
0x1d91:	pop	r15
0x1d93:	ret	


0x1ea9:	mov	rdi, r12
0x1eac:	call	0x4ef0


0x1eb1:	jmp	0x1d83


0x1e3a:	mov	rcx, rax
0x1e3d:	mov	rax, qword ptr [rsp + 0x18]
0x1e42:	lea	rdx, [rip + 0x382f]
0x1e49:	xor	edi, edi
0x1e4b:	mov	esi, dword ptr [rax]
0x1e4d:	xor	eax, eax
0x1e4f:	call	0x16c0


0x1e54:	jmp	0x1d83


0x3e9e:	mov	rsi, qword ptr [rsp + 0x38]
0x3ea3:	xor	rsi, qword ptr fs:[0x28]
0x3eac:	jne	0x3eb3


0x3eae:	add	rsp, 0x48
0x3eb2:	ret	


0x3eb3:	call	0x1530


0x38ed:	add	rsp, 0x20
0x38f1:	mov	eax, dword ptr [rsp + 0x18]
0x38f5:	mov	dword ptr [r13], eax
0x38f9:	add	rsp, 0x28
0x38fd:	mov	rax, r12
0x3900:	pop	rbx
0x3901:	pop	rbp
0x3902:	pop	r12
0x3904:	pop	r13
0x3906:	pop	r14
0x3908:	pop	r15
0x390a:	ret	


0x3b3c:	lea	rsi, [rax + 1]
0x3b40:	mov	qword ptr [rsp + 0x48], rax
0x3b45:	add	rsp, 0x20
0x3b49:	mov	rdi, rsi
0x3b4c:	mov	qword ptr [rsp + 0x18], rsi
0x3b51:	call	0x4710


0x3b56:	mov	qword ptr [rsp + 0x10], rax
0x3b5b:	sub	rsp, 8
0x3b5f:	push	qword ptr [rbx + 0x30]
0x3b62:	push	qword ptr [rbx + 0x28]
0x3b65:	mov	r10, qword ptr [rsp + 0x38]
0x3b6a:	mov	r9d, ebp
0x3b6d:	mov	r8d, dword ptr [rbx]
0x3b70:	mov	rcx, r15
0x3b73:	mov	rdx, r14
0x3b76:	mov	rdi, rax
0x3b79:	push	r10
0x3b7b:	mov	rsi, qword ptr [rsp + 0x38]
0x3b80:	call	0x2550


0x3b85:	mov	eax, dword ptr [rsp + 0x2c]
0x3b89:	add	rsp, 0x20
0x3b8d:	test	r12, r12
0x3b90:	mov	dword ptr [r13], eax
0x3b94:	je	0x3b9f


0x3b9f:	mov	rax, qword ptr [rsp + 0x10]
0x3ba4:	add	rsp, 0x38
0x3ba8:	pop	rbx
0x3ba9:	pop	rbp
0x3baa:	pop	r12
0x3bac:	pop	r13
0x3bae:	pop	r14
0x3bb0:	pop	r15
0x3bb2:	ret	


0x3b96:	mov	r11, qword ptr [rsp + 0x28]
0x3b9b:	mov	qword ptr [r12], r11
0x3b9f:	mov	rax, qword ptr [rsp + 0x10]
0x3ba4:	add	rsp, 0x38
0x3ba8:	pop	rbx
0x3ba9:	pop	rbp
0x3baa:	pop	r12
0x3bac:	pop	r13
0x3bae:	pop	r14
0x3bb0:	pop	r15
0x3bb2:	ret	


0x3ab1:	mov	dword ptr [rbp], r12d
0x3ab5:	add	rsp, 0x38
0x3ab9:	pop	rbx
0x3aba:	pop	rbp
0x3abb:	pop	r12
0x3abd:	pop	r13
0x3abf:	pop	r14
0x3ac1:	pop	r15
0x3ac3:	ret	


0x1da7:	cmp	ebp, 0xa
0x1daa:	mov	r13, rax
0x1dad:	mov	qword ptr [rip + 0x20631c], rax
0x1db4:	jne	0x1be6


0x520d:	add	rbx, 1
0x5211:	cmp	rbp, rbx
0x5214:	jne	0x5200


0x5200:	mov	rdx, r15
0x5203:	mov	rsi, r14
0x5206:	mov	edi, r13d
0x5209:	call	qword ptr [r12 + rbx*8]






0x4380:	lea	rsi, [rip + 0x1991]
0x4387:	mov	edx, 5
0x438c:	xor	edi, edi
0x438e:	mov	r14, qword ptr [rbx + 0x18]
0x4392:	mov	r13, qword ptr [rbx + 0x10]
0x4396:	mov	r12, qword ptr [rbx + 8]
0x439a:	mov	rbx, qword ptr [rbx]
0x439d:	call	0x1500


0x41a0:	mov	r9, qword ptr [rbx + 0x38]
0x41a4:	mov	rax, qword ptr [rbx + 0x10]
0x41a8:	lea	rsi, [rip + 0x1c09]
0x41af:	mov	r8, qword ptr [rbx + 8]
0x41b3:	mov	edx, 5
0x41b8:	xor	edi, edi
0x41ba:	mov	r13, qword ptr [rbx + 0x30]
0x41be:	mov	r12, qword ptr [rbx + 0x28]
0x41c2:	mov	qword ptr [rsp + 0x10], r9
0x41c7:	mov	r15, qword ptr [rbx + 0x20]
0x41cb:	mov	r14, qword ptr [rbx + 0x18]
0x41cf:	mov	qword ptr [rsp], rax
0x41d3:	mov	qword ptr [rsp + 8], r8
0x41d8:	mov	rbx, qword ptr [rbx]
0x41db:	call	0x1500


0x42a8:	mov	rbx, qword ptr [rbx]
0x42ab:	lea	rsi, [rip + 0x190d]
0x42b2:	mov	edx, 5
0x42b7:	xor	edi, edi
0x42b9:	call	0x1500


0x42e8:	mov	r12, qword ptr [rbx + 8]
0x42ec:	lea	rsi, [rip + 0x18dc]
0x42f3:	mov	rbx, qword ptr [rbx]
0x42f6:	mov	edx, 5
0x42fb:	xor	edi, edi
0x42fd:	call	0x1500


0x4408:	mov	r8, qword ptr [rbx + 8]
0x440c:	mov	r12, qword ptr [rbx + 0x28]
0x4410:	lea	rsi, [rip + 0x1949]
0x4417:	mov	r15, qword ptr [rbx + 0x20]
0x441b:	mov	r14, qword ptr [rbx + 0x18]
0x441f:	mov	edx, 5
0x4424:	mov	r13, qword ptr [rbx + 0x10]
0x4428:	xor	edi, edi
0x442a:	mov	rbx, qword ptr [rbx]
0x442d:	mov	qword ptr [rsp], r8
0x4431:	call	0x1500


0x4330:	mov	r13, qword ptr [rbx + 0x10]
0x4334:	mov	r12, qword ptr [rbx + 8]
0x4338:	lea	rsi, [rip + 0x18a7]
0x433f:	mov	rbx, qword ptr [rbx]
0x4342:	mov	edx, 5
0x4347:	xor	edi, edi
0x4349:	call	0x1500


0x4470:	mov	r9, qword ptr [rbx + 0x10]
0x4474:	mov	r13, qword ptr [rbx + 0x30]
0x4478:	lea	rsi, [rip + 0x1909]
0x447f:	mov	r12, qword ptr [rbx + 0x28]
0x4483:	mov	r15, qword ptr [rbx + 0x20]
0x4487:	mov	edx, 5
0x448c:	mov	r14, qword ptr [rbx + 0x18]
0x4490:	mov	r8, qword ptr [rbx + 8]
0x4494:	xor	edi, edi
0x4496:	mov	qword ptr [rsp + 8], r9
0x449b:	mov	rbx, qword ptr [rbx]
0x449e:	mov	qword ptr [rsp], r8
0x44a2:	call	0x1500


0x4250:	mov	r10, qword ptr [rbx + 0x40]
0x4254:	mov	r9, qword ptr [rbx + 0x38]
0x4258:	lea	rsi, [rip + 0x1b89]
0x425f:	mov	rax, qword ptr [rbx + 0x10]
0x4263:	mov	r8, qword ptr [rbx + 8]
0x4267:	mov	edx, 5
0x426c:	mov	r13, qword ptr [rbx + 0x30]
0x4270:	mov	r12, qword ptr [rbx + 0x28]
0x4274:	mov	r15, qword ptr [rbx + 0x20]
0x4278:	mov	r14, qword ptr [rbx + 0x18]
0x427c:	mov	rbx, qword ptr [rbx]
0x427f:	mov	qword ptr [rsp + 0x18], r10
0x4284:	mov	qword ptr [rsp + 0x10], r9
0x4289:	mov	qword ptr [rsp], rax
0x428d:	mov	qword ptr [rsp + 8], r8
0x4292:	xor	edi, edi
0x4294:	call	0x1500


0x4216:	add	rsp, 0x28
0x421a:	pop	rbx
0x421b:	pop	rbp
0x421c:	pop	r12
0x421e:	pop	r13
0x4220:	pop	r14
0x4222:	pop	r15
0x4224:	ret	


0x43d8:	mov	r15, qword ptr [rbx + 0x20]
0x43dc:	lea	rsi, [rip + 0x1955]
0x43e3:	mov	edx, 5
0x43e8:	xor	edi, edi
0x43ea:	mov	r14, qword ptr [rbx + 0x18]
0x43ee:	mov	r13, qword ptr [rbx + 0x10]
0x43f2:	mov	r12, qword ptr [rbx + 8]
0x43f6:	mov	rbx, qword ptr [rbx]
0x43f9:	call	0x1500


0x43fe:	push	r15
0x4400:	jmp	0x43a6


0x43a6:	push	r14
0x43a8:	mov	rdx, rax
0x43ab:	mov	r9, r13
0x43ae:	mov	r8, r12
0x43b1:	mov	rcx, rbx
0x43b4:	mov	rdi, rbp
0x43b7:	mov	esi, 1
0x43bc:	xor	eax, eax
0x43be:	call	0x1720


0x43c3:	pop	rax
0x43c4:	pop	rdx
0x43c5:	add	rsp, 0x28
0x43c9:	pop	rbx
0x43ca:	pop	rbp
0x43cb:	pop	r12
0x43cd:	pop	r13
0x43cf:	pop	r14
0x43d1:	pop	r15
0x43d3:	ret	


0x44a7:	push	r13
0x44a9:	push	r12
0x44ab:	push	r15
0x44ad:	push	r14
0x44af:	mov	r9, qword ptr [rsp + 0x28]
0x44b4:	jmp	0x4443


0x4443:	mov	r8, qword ptr [rsp + 0x20]
0x4448:	mov	rcx, rbx
0x444b:	mov	rdx, rax
0x444e:	mov	rdi, rbp
0x4451:	mov	esi, 1
0x4456:	xor	eax, eax
0x4458:	call	0x1720


0x445d:	add	rsp, 0x20
0x4461:	add	rsp, 0x28
0x4465:	pop	rbx
0x4466:	pop	rbp
0x4467:	pop	r12
0x4469:	pop	r13
0x446b:	pop	r14
0x446d:	pop	r15
0x446f:	ret	


0x434e:	add	rsp, 0x28
0x4352:	mov	r9, r13
0x4355:	mov	r8, r12
0x4358:	mov	rcx, rbx
0x435b:	mov	rdi, rbp
0x435e:	mov	rdx, rax
0x4361:	pop	rbx
0x4362:	pop	rbp
0x4363:	pop	r12
0x4365:	pop	r13
0x4367:	pop	r14
0x4369:	pop	r15
0x436b:	mov	esi, 1
0x4370:	xor	eax, eax
0x4372:	jmp	0x1720


0x4436:	sub	rsp, 8
0x443a:	mov	r9, r13
0x443d:	push	r12
0x443f:	push	r15
0x4441:	push	r14
0x4443:	mov	r8, qword ptr [rsp + 0x20]
0x4448:	mov	rcx, rbx
0x444b:	mov	rdx, rax
0x444e:	mov	rdi, rbp
0x4451:	mov	esi, 1
0x4456:	xor	eax, eax
0x4458:	call	0x1720


0x4302:	add	rsp, 0x28
0x4306:	mov	r8, r12
0x4309:	mov	rcx, rbx
0x430c:	mov	rdi, rbp
0x430f:	mov	rdx, rax
0x4312:	mov	esi, 1
0x4317:	pop	rbx
0x4318:	pop	rbp
0x4319:	pop	r12
0x431b:	pop	r13
0x431d:	pop	r14
0x431f:	pop	r15
0x4321:	xor	eax, eax
0x4323:	jmp	0x1720


0x42be:	add	rsp, 0x28
0x42c2:	mov	rcx, rbx
0x42c5:	mov	rdi, rbp
0x42c8:	pop	rbx
0x42c9:	pop	rbp
0x42ca:	pop	r12
0x42cc:	pop	r13
0x42ce:	pop	r14
0x42d0:	pop	r15
0x42d2:	mov	rdx, rax
0x42d5:	mov	esi, 1
0x42da:	xor	eax, eax
0x42dc:	jmp	0x1720


0x41e0:	sub	rsp, 8
0x41e4:	mov	r9, qword ptr [rsp + 0x18]
0x41e9:	mov	rdx, rax
0x41ec:	mov	rcx, rbx
0x41ef:	mov	esi, 1
0x41f4:	mov	rdi, rbp
0x41f7:	xor	eax, eax
0x41f9:	push	r9
0x41fb:	push	r13
0x41fd:	push	r12
0x41ff:	push	r15
0x4201:	push	r14
0x4203:	mov	r9, qword ptr [rsp + 0x30]
0x4208:	mov	r8, qword ptr [rsp + 0x38]
0x420d:	call	0x1720


0x43a2:	sub	rsp, 8
0x43a6:	push	r14
0x43a8:	mov	rdx, rax
0x43ab:	mov	r9, r13
0x43ae:	mov	r8, r12
0x43b1:	mov	rcx, rbx
0x43b4:	mov	rdi, rbp
0x43b7:	mov	esi, 1
0x43bc:	xor	eax, eax
0x43be:	call	0x1720


0x30f0:	sub	rsp, 8
0x30f4:	mov	rcx, rbp
0x30f7:	mov	rsi, r13
0x30fa:	push	qword ptr [rsp + 0x68]
0x30fe:	push	qword ptr [rsp + 0x78]
0x3102:	mov	rdi, r14
0x3105:	push	0
0x3107:	mov	r9d, dword ptr [rsp + 0x98]
0x310f:	mov	r8d, dword ptr [rsp + 0x28]
0x3114:	mov	rdx, qword ptr [rsp + 0x30]
0x3119:	and	r9d, 0xfffffffd
0x311d:	call	0x2550


0x3122:	add	rsp, 0x20
0x3126:	mov	r15, rax
0x3129:	mov	rbx, qword ptr [rsp + 0xa8]
0x3131:	xor	rbx, qword ptr fs:[0x28]
0x313a:	mov	rax, r15
0x313d:	jne	0x3743


0x3143:	add	rsp, 0xb8
0x314a:	pop	rbx
0x314b:	pop	rbp
0x314c:	pop	r12
0x314e:	pop	r13
0x3150:	pop	r14
0x3152:	pop	r15
0x3154:	ret	


0x3743:	call	0x1530


0x36ed:	sub	rsp, 8
0x36f1:	mov	r8d, 5
0x36f7:	mov	rcx, r11
0x36fa:	push	qword ptr [rsp + 0x68]
0x36fe:	push	qword ptr [rsp + 0x78]
0x3702:	mov	rdi, r14
0x3705:	push	qword ptr [rsp + 0x38]
0x3709:	mov	r9d, dword ptr [rsp + 0x98]
0x3711:	mov	rdx, qword ptr [rsp + 0x30]
0x3716:	mov	rsi, qword ptr [rsp + 0x70]
0x371b:	call	0x2550


0x3720:	add	rsp, 0x20
0x3724:	mov	r15, rax
0x3727:	jmp	0x3129


0x3129:	mov	rbx, qword ptr [rsp + 0xa8]
0x3131:	xor	rbx, qword ptr fs:[0x28]
0x313a:	mov	rax, r15
0x313d:	jne	0x3743


0x1450:	push	qword ptr [rip + 0x2069da]
0x1456:	jmp	qword ptr [rip + 0x2069dc]


0x145c:	nop	dword ptr [rax]


0x1466:	push	0
0x146b:	jmp	0x1450


0x1476:	push	1
0x147b:	jmp	0x1450


0x1486:	push	2
0x148b:	jmp	0x1450


0x1496:	push	3
0x149b:	jmp	0x1450


0x14a6:	push	4
0x14ab:	jmp	0x1450


0x14b6:	push	5
0x14bb:	jmp	0x1450


0x14c6:	push	6
0x14cb:	jmp	0x1450


0x14d6:	push	7
0x14db:	jmp	0x1450


0x14e6:	push	8
0x14eb:	jmp	0x1450


0x14f6:	push	9
0x14fb:	jmp	0x1450


0x1506:	push	0xa
0x150b:	jmp	0x1450


0x1516:	push	0xb
0x151b:	jmp	0x1450


0x1526:	push	0xc
0x152b:	jmp	0x1450


0x1536:	push	0xd
0x153b:	jmp	0x1450


0x1546:	push	0xe
0x154b:	jmp	0x1450


0x1556:	push	0xf
0x155b:	jmp	0x1450


0x1566:	push	0x10
0x156b:	jmp	0x1450


0x1576:	push	0x11
0x157b:	jmp	0x1450


0x1586:	push	0x12
0x158b:	jmp	0x1450


0x1596:	push	0x13
0x159b:	jmp	0x1450


0x15a6:	push	0x14
0x15ab:	jmp	0x1450


0x15b6:	push	0x15
0x15bb:	jmp	0x1450


0x15c6:	push	0x16
0x15cb:	jmp	0x1450


0x15d6:	push	0x17
0x15db:	jmp	0x1450


0x15e0:	jmp	qword ptr [rip + 0x20691a]




0x15e6:	push	0x18
0x15eb:	jmp	0x1450


0x15f6:	push	0x19
0x15fb:	jmp	0x1450


0x1606:	push	0x1a
0x160b:	jmp	0x1450


0x1616:	push	0x1b
0x161b:	jmp	0x1450


0x1626:	push	0x1c
0x162b:	jmp	0x1450


0x1636:	push	0x1d
0x163b:	jmp	0x1450


0x1646:	push	0x1e
0x164b:	jmp	0x1450


0x1656:	push	0x1f
0x165b:	jmp	0x1450


0x1666:	push	0x20
0x166b:	jmp	0x1450


0x1676:	push	0x21
0x167b:	jmp	0x1450


0x1686:	push	0x22
0x168b:	jmp	0x1450


0x1696:	push	0x23
0x169b:	jmp	0x1450


0x16a6:	push	0x24
0x16ab:	jmp	0x1450


0x16b6:	push	0x25
0x16bb:	jmp	0x1450


0x16c6:	push	0x26
0x16cb:	jmp	0x1450


0x16d6:	push	0x27
0x16db:	jmp	0x1450


0x16e6:	push	0x28
0x16eb:	jmp	0x1450


0x16f6:	push	0x29
0x16fb:	jmp	0x1450


0x1706:	push	0x2a
0x170b:	jmp	0x1450


0x1716:	push	0x2b
0x171b:	jmp	0x1450


0x1726:	push	0x2c
0x172b:	jmp	0x1450


0x1730:	jmp	qword ptr [rip + 0x206872]




0x1736:	push	0x2d
0x173b:	jmp	0x1450


0x1740:	jmp	qword ptr [rip + 0x20686a]




0x1746:	push	0x2e
0x174b:	jmp	0x1450


0x1756:	push	0x2f
0x175b:	jmp	0x1450


0x19dd:	nop	dword ptr [rax]


0x1a0a:	hlt	


0x1a0b:	nop	dword ptr [rax + rax]


0x1a42:	nop	dword ptr [rax]
0x1a46:	nop	word ptr cs:[rax + rax]


0x1a92:	nop	dword ptr [rax]
0x1a96:	nop	word ptr cs:[rax + rax]


0x1ada:	nop	word ptr [rax + rax]


0x1aea:	nop	word ptr [rax + rax]


0x1b39:	nop	dword ptr [rax]


0x1eed:	nop	dword ptr [rax]


0x22a2:	nop	word ptr cs:[rax + rax]
0x22ac:	nop	dword ptr [rax]


0x22b8:	nop	dword ptr [rax + rax]


0x22c8:	nop	dword ptr [rax + rax]


0x2374:	nop	word ptr cs:[rax + rax]
0x237e:	nop	


0x2385:	nop	
0x2386:	nop	word ptr cs:[rax + rax]


0x23b2:	nop	word ptr cs:[rax + rax]
0x23bc:	nop	dword ptr [rax]


0x245f:	nop	


0x2547:	nop	word ptr [rax + rax]


0x25e3:	mov	byte ptr [rsp + 0xe], 1
0x25e8:	mov	byte ptr [rsp + 0x7c], 0
0x25ed:	xor	r12d, r12d
0x25f0:	mov	qword ptr [rsp + 0x50], 0
0x25f9:	mov	byte ptr [rsp + 0xf], 1
0x25fe:	mov	byte ptr [rsp + 0xd], 0
0x2603:	lea	rax, [rip + 0x30cb]
0x260a:	mov	qword ptr [rsp + 0x18], 1
0x2613:	xor	r15d, r15d
0x2616:	mov	dword ptr [rsp + 8], 2
0x261e:	mov	qword ptr [rsp + 0x48], rax
0x2623:	xor	r11d, r11d
0x2626:	mov	rax, rbp
0x2629:	mov	r8d, r12d
0x262c:	mov	rbp, r11
0x262f:	mov	r11, rax
0x2632:	nop	word ptr [rax + rax]
0x2638:	cmp	r11, rbp
0x263b:	setne	r12b
0x263f:	cmp	r11, -1
0x2643:	jne	0x2652


0x2645:	mov	rax, qword ptr [rsp + 0x10]
0x264a:	cmp	byte ptr [rax + rbp], 0
0x264e:	setne	r12b
0x2652:	test	r12b, r12b
0x2655:	je	0x2cb0


0x2652:	test	r12b, r12b
0x2655:	je	0x2cb0


0x2cb0:	cmp	dword ptr [rsp + 8], 2
0x2cb5:	movzx	ebx, byte ptr [rsp + 0xf]
0x2cba:	mov	r12d, r8d
0x2cbd:	mov	rbp, r11
0x2cc0:	sete	dl
0x2cc3:	mov	eax, ebx
0x2cc5:	test	r15, r15
0x2cc8:	sete	cl
0x2ccb:	and	eax, edx
0x2ccd:	and	al, cl
0x2ccf:	jne	0x3736


0x265b:	cmp	dword ptr [rsp + 8], 2
0x2660:	mov	rdi, qword ptr [rsp + 0x10]
0x2665:	lea	r9, [rdi + rbp]
0x2669:	setne	al
0x266c:	and	al, byte ptr [rsp + 0xd]
0x2670:	mov	r10d, eax
0x2673:	je	0x2720


0x2cd5:	mov	eax, ebx
0x2cd7:	xor	eax, 1
0x2cda:	and	dl, al
0x2cdc:	je	0x364c


0x3736:	mov	dword ptr [rsp + 8], 2
0x373e:	jmp	0x30d9


0x2720:	movzx	ebx, byte ptr [r9]
0x2724:	cmp	bl, 0x7e
0x2727:	ja	0x2a48


0x2679:	mov	rax, qword ptr [rsp + 0x18]
0x267e:	test	rax, rax
0x2681:	je	0x2ab0


0x364c:	mov	rbx, qword ptr [rsp + 0x48]
0x3651:	test	rbx, rbx
0x3654:	je	0x3682


0x2ce2:	cmp	byte ptr [rsp + 0x7c], 0
0x2ce7:	je	0x364a


0x30d9:	cmp	byte ptr [rsp + 0xd], 0
0x30de:	je	0x30f0


0x272d:	lea	rcx, [rip + 0x3038]
0x2734:	movzx	edx, bl
0x2737:	movsxd	rax, dword ptr [rcx + rdx*4]
0x273b:	add	rax, rcx
0x273e:	jmp	rax


0x2a48:	cmp	qword ptr [rsp + 0x58], 1
0x2a4e:	jne	0x2df8


0x2ab0:	movzx	ebx, byte ptr [r9]
0x2ab4:	cmp	bl, 0x7e
0x2ab7:	ja	0x2a40


0x2687:	cmp	r11, -1
0x268b:	lea	rbx, [rbp + rax]
0x2690:	jne	0x26c0


0x3682:	cmp	r13, r15
0x3685:	jbe	0x3129


0x3656:	test	al, al
0x3658:	je	0x3682


0x364a:	mov	eax, edx
0x364c:	mov	rbx, qword ptr [rsp + 0x48]
0x3651:	test	rbx, rbx
0x3654:	je	0x3682


0x2ced:	cmp	byte ptr [rsp + 0xe], 0
0x2cf2:	jne	0x36ed


0x30e0:	test	al, al
0x30e2:	mov	eax, 4
0x30e7:	cmove	eax, dword ptr [rsp + 8]
0x30ec:	mov	dword ptr [rsp + 8], eax


0x2a54:	mov	qword ptr [rsp + 0x38], r11
0x2a59:	mov	byte ptr [rsp + 0x30], r8b
0x2a5e:	mov	byte ptr [rsp + 0x28], r10b
0x2a63:	call	0x1750


0x2df8:	lea	rax, [rsp + 0xa0]
0x2e00:	cmp	r11, -1
0x2e04:	mov	qword ptr [rsp + 0xa0], 0
0x2e10:	mov	qword ptr [rsp + 0x28], rax
0x2e15:	jne	0x2e44


0x2ab9:	lea	rcx, [rip + 0x2ea8]
0x2ac0:	movzx	edx, bl
0x2ac3:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2ac7:	add	rax, rcx
0x2aca:	jmp	rax


0x2a40:	xor	r10d, r10d
0x2a43:	nop	dword ptr [rax + rax]
0x2a48:	cmp	qword ptr [rsp + 0x58], 1
0x2a4e:	jne	0x2df8


0x2692:	cmp	rax, 1
0x2696:	jbe	0x26c0


0x26c0:	cmp	rbx, r11
0x26c3:	mov	byte ptr [rsp + 0x28], r10b
0x26c8:	ja	0x2c80


0x368b:	mov	byte ptr [r14 + r15], 0
0x3690:	jmp	0x3129


0x365a:	movzx	ecx, byte ptr [rbx]
0x365d:	mov	rax, rbx
0x3660:	test	cl, cl
0x3662:	je	0x3682


0x2cf8:	test	r13, r13
0x2cfb:	sete	al
0x2cfe:	cmp	qword ptr [rsp + 0x50], 0
0x2d04:	setne	dl
0x2d07:	and	al, dl
0x2d09:	je	0x372c


0x2e17:	mov	rdi, qword ptr [rsp + 0x10]
0x2e1c:	mov	byte ptr [rsp + 0x40], r8b
0x2e21:	mov	byte ptr [rsp + 0x38], r10b
0x2e26:	mov	qword ptr [rsp + 0x30], r9
0x2e2b:	call	0x1520


0x2e44:	lea	rax, [rsp + 0x9c]
0x2e4c:	xor	ecx, ecx
0x2e4e:	mov	byte ptr [rsp + 0x7e], bl
0x2e52:	mov	byte ptr [rsp + 0x7d], r8b
0x2e57:	mov	rbx, rcx
0x2e5a:	mov	qword ptr [rsp + 0x88], r9
0x2e62:	mov	qword ptr [rsp + 0x38], rax
0x2e67:	mov	byte ptr [rsp + 0x7f], r10b
0x2e6c:	mov	qword ptr [rsp + 0x80], r15
0x2e74:	mov	qword ptr [rsp + 0x40], r14
0x2e79:	mov	qword ptr [rsp + 0x70], r13
0x2e7e:	mov	qword ptr [rsp + 0x30], r11
0x2e83:	mov	rax, qword ptr [rsp + 0x10]
0x2e88:	lea	r14, [rbp + rbx]
0x2e8d:	mov	rdx, qword ptr [rsp + 0x30]
0x2e92:	mov	rcx, qword ptr [rsp + 0x28]
0x2e97:	mov	rdi, qword ptr [rsp + 0x38]
0x2e9c:	lea	r13, [rax + r14]
0x2ea0:	sub	rdx, r14
0x2ea3:	mov	rsi, r13
0x2ea6:	call	0x5010


0x2698:	mov	byte ptr [rsp + 0x38], r8b
0x269d:	mov	byte ptr [rsp + 0x30], r10b
0x26a2:	mov	qword ptr [rsp + 0x28], r9
0x26a7:	call	0x1520


0x26ce:	mov	rdx, qword ptr [rsp + 0x18]
0x26d3:	mov	rsi, qword ptr [rsp + 0x48]
0x26d8:	mov	rdi, r9
0x26db:	mov	qword ptr [rsp + 0x40], r11
0x26e0:	mov	byte ptr [rsp + 0x38], r8b
0x26e5:	mov	qword ptr [rsp + 0x30], r9
0x26ea:	call	0x15e0


0x2c80:	xor	r10d, r10d
0x2c83:	jmp	0x2720


0x3664:	mov	rdx, r15
0x3667:	sub	rax, r15
0x366a:	cmp	r13, rdx
0x366d:	jbe	0x3673


0x372c:	movzx	eax, byte ptr [rsp + 0x7c]
0x3731:	jmp	0x364c


0x2d0f:	mov	r13, qword ptr [rsp + 0x50]
0x2d14:	lea	rbx, [rip + 0x29ba]
0x2d1b:	mov	byte ptr [r14], 0x27
0x2d1f:	mov	dword ptr [rsp + 8], 2
0x2d27:	mov	r15d, 1
0x2d2d:	mov	qword ptr [rsp + 0x18], 1
0x2d36:	mov	byte ptr [rsp + 0xf], 0
0x2d3b:	mov	qword ptr [rsp + 0x48], rbx
0x2d40:	mov	byte ptr [rsp + 0x7c], al
0x2d44:	jmp	0x2623


0x3673:	add	rdx, 1
0x3677:	movzx	ecx, byte ptr [rax + rdx]
0x367b:	test	cl, cl
0x367d:	jne	0x366a


0x366f:	mov	byte ptr [r14 + rdx], cl
0x3673:	add	rdx, 1
0x3677:	movzx	ecx, byte ptr [rax + rdx]
0x367b:	test	cl, cl
0x367d:	jne	0x366a


0x2623:	xor	r11d, r11d
0x2626:	mov	rax, rbp
0x2629:	mov	r8d, r12d
0x262c:	mov	rbp, r11
0x262f:	mov	r11, rax
0x2632:	nop	word ptr [rax + rax]
0x2638:	cmp	r11, rbp
0x263b:	setne	r12b
0x263f:	cmp	r11, -1
0x2643:	jne	0x2652


0x367f:	mov	r15, rdx
0x3682:	cmp	r13, r15
0x3685:	jbe	0x3129


0x366a:	cmp	r13, rdx
0x366d:	jbe	0x3673


0x26ef:	test	eax, eax
0x26f1:	mov	r9, qword ptr [rsp + 0x30]
0x26f6:	movzx	r8d, byte ptr [rsp + 0x38]
0x26fc:	mov	r11, qword ptr [rsp + 0x40]
0x2701:	jne	0x2c80


0x2707:	cmp	byte ptr [rsp + 0xf], 0
0x270c:	movzx	r10d, byte ptr [rsp + 0x28]
0x2712:	jne	0x3695


0x3695:	cmp	dword ptr [rsp + 8], 2
0x369a:	movzx	ebx, byte ptr [rsp + 0xf]
0x369f:	mov	rbp, r11
0x36a2:	sete	al
0x36a5:	mov	byte ptr [rsp + 0xd], bl
0x36a9:	jmp	0x30d9


0x2eab:	test	rax, rax
0x2eae:	mov	r15, rax
0x2eb1:	je	0x2f01


0x2f01:	mov	edx, r12d
0x2f04:	mov	rdi, rbx
0x2f07:	movzx	r8d, byte ptr [rsp + 0x7d]
0x2f0d:	xor	edx, 1
0x2f10:	movzx	ebx, byte ptr [rsp + 0x7e]
0x2f15:	movzx	r10d, byte ptr [rsp + 0x7f]
0x2f1b:	and	dl, byte ptr [rsp + 0xd]
0x2f1f:	mov	r15, qword ptr [rsp + 0x80]
0x2f27:	mov	r14, qword ptr [rsp + 0x40]
0x2f2c:	mov	r13, qword ptr [rsp + 0x70]
0x2f31:	mov	r11, qword ptr [rsp + 0x30]
0x2f36:	cmp	rdi, 1
0x2f3a:	jbe	0x353b


0x2eb3:	cmp	rax, -1
0x2eb7:	je	0x34d5


0x353b:	mov	eax, edx
0x353d:	jmp	0x2a97


0x2f40:	mov	rcx, rdi
0x2f43:	xor	esi, esi
0x2f45:	movzx	r9d, byte ptr [rsp + 0xf]
0x2f4b:	add	rcx, rbp
0x2f4e:	mov	rdi, qword ptr [rsp + 0x10]
0x2f53:	jmp	0x300e


0x34d5:	mov	rdi, rbx
0x34d8:	movzx	r8d, byte ptr [rsp + 0x7d]
0x34de:	movzx	ebx, byte ptr [rsp + 0x7e]
0x34e3:	movzx	r10d, byte ptr [rsp + 0x7f]
0x34e9:	mov	r15, qword ptr [rsp + 0x80]
0x34f1:	xor	r12d, r12d
0x34f4:	mov	r14, qword ptr [rsp + 0x40]
0x34f9:	mov	r13, qword ptr [rsp + 0x70]
0x34fe:	mov	r11, qword ptr [rsp + 0x30]
0x3503:	movzx	edx, byte ptr [rsp + 0xd]
0x3508:	jmp	0x2f36


0x2ebd:	cmp	rax, -2
0x2ec1:	je	0x3461


0x2a97:	test	al, al
0x2a99:	jne	0x3431


0x300e:	test	dl, dl
0x3010:	jne	0x2f60


0x2f36:	cmp	rdi, 1
0x2f3a:	jbe	0x353b


0x3461:	mov	r11, qword ptr [rsp + 0x30]
0x3466:	mov	rsi, r14
0x3469:	mov	rcx, r13
0x346c:	mov	rax, rbx
0x346f:	mov	rdi, rbx
0x3472:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3478:	movzx	ebx, byte ptr [rsp + 0x7e]
0x347d:	mov	r9, qword ptr [rsp + 0x88]
0x3485:	cmp	rsi, r11
0x3488:	movzx	r10d, byte ptr [rsp + 0x7f]
0x348e:	mov	r15, qword ptr [rsp + 0x80]
0x3496:	mov	r14, qword ptr [rsp + 0x40]
0x349b:	mov	r13, qword ptr [rsp + 0x70]
0x34a0:	jae	0x34c8


0x2ec7:	cmp	dword ptr [rsp + 8], 2
0x2ecc:	sete	al
0x2ecf:	and	al, byte ptr [rsp + 0xf]
0x2ed3:	jne	0x3070


0x2a9f:	cmp	dword ptr [rsp + 8], 2
0x2aa4:	sete	dl
0x2aa7:	jmp	0x2778


0x3431:	movzx	edx, byte ptr [rsp + 0xd]
0x3436:	xor	r12d, r12d
0x3439:	jmp	0x2f40


0x3016:	mov	eax, esi
0x3018:	xor	eax, 1
0x301b:	and	eax, r8d
0x301e:	test	r10b, r10b
0x3021:	je	0x3031


0x2f60:	cmp	dword ptr [rsp + 8], 2
0x2f65:	sete	al
0x2f68:	test	r9b, r9b
0x2f6b:	jne	0x3420


0x34a2:	cmp	byte ptr [rcx], 0
0x34a5:	jne	0x34b7


0x34c8:	movzx	edx, byte ptr [rsp + 0xd]
0x34cd:	xor	r12d, r12d
0x34d0:	jmp	0x2f36


0x2ed9:	mov	edi, dword ptr [rsp + 0x9c]
0x2ee0:	call	0x1740


0x3070:	cmp	r15, 1
0x3074:	je	0x2ed9


0x2778:	cmp	byte ptr [rsp + 0xd], 1
0x277d:	jne	0x2892


0x3031:	add	rbp, 1
0x3035:	cmp	rbp, rcx
0x3038:	jae	0x27bc


0x3023:	cmp	r13, r15
0x3026:	jbe	0x302d


0x2f71:	mov	esi, r8d
0x2f74:	xor	esi, 1
0x2f77:	and	al, sil
0x2f7a:	je	0x2fab


0x3420:	movzx	ebx, byte ptr [rsp + 0xf]
0x3425:	mov	rbp, r11
0x3428:	mov	byte ptr [rsp + 0xd], bl
0x342c:	jmp	0x30d9


0x34a7:	jmp	0x34c8


0x34b7:	add	rax, 1
0x34bb:	lea	rdx, [rbp + rax]
0x34c0:	cmp	r11, rdx
0x34c3:	ja	0x34b0


0x307a:	mov	rdi, qword ptr [rsp + 0x10]
0x307f:	lea	rcx, [rdi + r15]
0x3083:	lea	rdx, [rdi + r14 + 1]
0x3088:	lea	r8, [rcx + r14]
0x308c:	jmp	0x309d


0x2783:	test	dl, dl
0x2785:	jne	0x2892


0x2892:	cmp	byte ptr [rsp + 0xf], 0
0x2897:	jne	0x278b


0x303e:	test	al, al
0x3040:	je	0x343e


0x27bc:	test	al, al
0x27be:	je	0x27e0


0x302d:	add	r15, 1
0x3031:	add	rbp, 1
0x3035:	cmp	rbp, rcx
0x3038:	jae	0x27bc


0x3028:	mov	byte ptr [r14 + r15], 0x5c
0x302d:	add	r15, 1
0x3031:	add	rbp, 1
0x3035:	cmp	rbp, rcx
0x3038:	jae	0x27bc


0x2fab:	cmp	r13, r15
0x2fae:	jbe	0x2fb5


0x2f7c:	cmp	r13, r15
0x2f7f:	jbe	0x2f86


0x34c5:	mov	rdi, rax
0x34c8:	movzx	edx, byte ptr [rsp + 0xd]
0x34cd:	xor	r12d, r12d
0x34d0:	jmp	0x2f36


0x34b0:	cmp	byte ptr [r9 + rax], 0
0x34b5:	je	0x34c5


0x309d:	movzx	ecx, byte ptr [rdx]
0x30a0:	sub	ecx, 0x5b
0x30a3:	cmp	cl, 0x21
0x30a6:	ja	0x3090


0x278b:	mov	rsi, qword ptr [rsp + 0x20]
0x2790:	test	rsi, rsi
0x2793:	je	0x27a9


0x289d:	jmp	0x27a9


0x343e:	xor	r10d, r10d
0x3441:	jmp	0x2ffd


0x3046:	cmp	r13, r15
0x3049:	jbe	0x3050


0x27e0:	cmp	r15, r13
0x27e3:	jae	0x27e9


0x27c0:	cmp	r13, r15
0x27c3:	jbe	0x27ca


0x2fb5:	lea	rax, [r15 + 1]
0x2fb9:	cmp	r13, rax
0x2fbc:	jbe	0x2fcb


0x2fb0:	mov	byte ptr [r14 + r15], 0x5c
0x2fb5:	lea	rax, [r15 + 1]
0x2fb9:	cmp	r13, rax
0x2fbc:	jbe	0x2fcb


0x2f86:	lea	rsi, [r15 + 1]
0x2f8a:	cmp	r13, rsi
0x2f8d:	jbe	0x2f95


0x2f81:	mov	byte ptr [r14 + r15], 0x27
0x2f86:	lea	rsi, [r15 + 1]
0x2f8a:	cmp	r13, rsi
0x2f8d:	jbe	0x2f95


0x30a8:	mov	esi, 1
0x30ad:	shl	rsi, cl
0x30b0:	mov	rcx, rsi
0x30b3:	movabs	rsi, 0x20000002b
0x30bd:	test	rcx, rsi
0x30c0:	je	0x3090


0x3090:	add	rdx, 1
0x3094:	cmp	r8, rdx
0x3097:	je	0x2ed9


0x27a9:	test	r10b, r10b
0x27ac:	jne	0x28f3


0x2795:	mov	edx, ebx
0x2797:	shr	dl, 5
0x279a:	movzx	edx, dl
0x279d:	mov	edx, dword ptr [rsi + rdx*4]
0x27a0:	bt	edx, ebx
0x27a3:	jb	0x28f3


0x2ffd:	cmp	r13, r15
0x3000:	jbe	0x3006


0x3050:	lea	rax, [r15 + 1]
0x3054:	cmp	r13, rax
0x3057:	jbe	0x305f


0x304b:	mov	byte ptr [r14 + r15], 0x27
0x3050:	lea	rax, [r15 + 1]
0x3054:	cmp	r13, rax
0x3057:	jbe	0x305f


0x27e5:	mov	byte ptr [r14 + r15], bl
0x27e9:	movzx	edi, byte ptr [rsp + 0xe]
0x27ee:	add	r15, 1
0x27f2:	mov	eax, 0
0x27f7:	test	r12b, r12b
0x27fa:	cmove	edi, eax
0x27fd:	mov	byte ptr [rsp + 0xe], dil
0x2802:	jmp	0x2638


0x27e9:	movzx	edi, byte ptr [rsp + 0xe]
0x27ee:	add	r15, 1
0x27f2:	mov	eax, 0
0x27f7:	test	r12b, r12b
0x27fa:	cmove	edi, eax
0x27fd:	mov	byte ptr [rsp + 0xe], dil
0x2802:	jmp	0x2638


0x27ca:	lea	rax, [r15 + 1]
0x27ce:	cmp	r13, rax
0x27d1:	jbe	0x27d9


0x27c5:	mov	byte ptr [r14 + r15], 0x27
0x27ca:	lea	rax, [r15 + 1]
0x27ce:	cmp	r13, rax
0x27d1:	jbe	0x27d9


0x2fcb:	lea	rax, [r15 + 2]
0x2fcf:	cmp	r13, rax
0x2fd2:	jbe	0x2fe4


0x2fbe:	mov	eax, ebx
0x2fc0:	shr	al, 6
0x2fc3:	add	eax, 0x30
0x2fc6:	mov	byte ptr [r14 + r15 + 1], al
0x2fcb:	lea	rax, [r15 + 2]
0x2fcf:	cmp	r13, rax
0x2fd2:	jbe	0x2fe4


0x2f95:	lea	rsi, [r15 + 2]
0x2f99:	cmp	r13, rsi
0x2f9c:	jbe	0x2fa4


0x2f8f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x2f95:	lea	rsi, [r15 + 2]
0x2f99:	cmp	r13, rsi
0x2f9c:	jbe	0x2fa4


0x30c2:	mov	r14, qword ptr [rsp + 0x40]
0x30c7:	mov	r13, qword ptr [rsp + 0x70]
0x30cc:	mov	rbp, qword ptr [rsp + 0x30]
0x30d1:	mov	dword ptr [rsp + 8], 2
0x30d9:	cmp	byte ptr [rsp + 0xd], 0
0x30de:	je	0x30f0


0x27b2:	xor	eax, 1
0x27b5:	add	rbp, 1
0x27b9:	and	eax, r8d
0x27bc:	test	al, al
0x27be:	je	0x27e0


0x28f3:	cmp	dword ptr [rsp + 8], 2
0x28f8:	sete	dl
0x28fb:	cmp	byte ptr [rsp + 0xf], 0
0x2900:	mov	eax, edx
0x2902:	jne	0x3158


0x3006:	movzx	ebx, byte ptr [rdi + rbp]
0x300a:	add	r15, 1
0x300e:	test	dl, dl
0x3010:	jne	0x2f60


0x3002:	mov	byte ptr [r14 + r15], bl
0x3006:	movzx	ebx, byte ptr [rdi + rbp]
0x300a:	add	r15, 1
0x300e:	test	dl, dl
0x3010:	jne	0x2f60


0x305f:	add	r15, 2
0x3063:	xor	r10d, r10d
0x3066:	xor	r8d, r8d
0x3069:	jmp	0x2ffd


0x3059:	mov	byte ptr [r14 + r15 + 1], 0x27
0x305f:	add	r15, 2
0x3063:	xor	r10d, r10d
0x3066:	xor	r8d, r8d
0x3069:	jmp	0x2ffd


0x2638:	cmp	r11, rbp
0x263b:	setne	r12b
0x263f:	cmp	r11, -1
0x2643:	jne	0x2652


0x27d9:	add	r15, 2
0x27dd:	xor	r8d, r8d
0x27e0:	cmp	r15, r13
0x27e3:	jae	0x27e9


0x27d3:	mov	byte ptr [r14 + r15 + 1], 0x27
0x27d9:	add	r15, 2
0x27dd:	xor	r8d, r8d
0x27e0:	cmp	r15, r13
0x27e3:	jae	0x27e9


0x2fe4:	and	ebx, 7
0x2fe7:	add	rbp, 1
0x2feb:	add	r15, 3
0x2fef:	add	ebx, 0x30
0x2ff2:	cmp	rbp, rcx
0x2ff5:	jae	0x27e0


0x2fd4:	mov	eax, ebx
0x2fd6:	shr	al, 3
0x2fd9:	and	eax, 7
0x2fdc:	add	eax, 0x30
0x2fdf:	mov	byte ptr [r14 + r15 + 2], al
0x2fe4:	and	ebx, 7
0x2fe7:	add	rbp, 1
0x2feb:	add	r15, 3
0x2fef:	add	ebx, 0x30
0x2ff2:	cmp	rbp, rcx
0x2ff5:	jae	0x27e0


0x2fa4:	add	r15, 3
0x2fa8:	mov	r8d, eax
0x2fab:	cmp	r13, r15
0x2fae:	jbe	0x2fb5


0x2f9e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x2fa4:	add	r15, 3
0x2fa8:	mov	r8d, eax
0x2fab:	cmp	r13, r15
0x2fae:	jbe	0x2fb5


0x2908:	mov	eax, r8d
0x290b:	xor	eax, 1
0x290e:	and	al, dl
0x2910:	je	0x2941


0x3158:	mov	rbp, r11
0x315b:	jmp	0x30d9


0x2ffb:	mov	esi, edx
0x2ffd:	cmp	r13, r15
0x3000:	jbe	0x3006


0x2941:	cmp	r13, r15
0x2944:	jbe	0x294b


0x2912:	cmp	r13, r15
0x2915:	jbe	0x291c


0x294b:	add	r15, 1
0x294f:	add	rbp, 1
0x2953:	jmp	0x27e0


0x2946:	mov	byte ptr [r14 + r15], 0x5c
0x294b:	add	r15, 1
0x294f:	add	rbp, 1
0x2953:	jmp	0x27e0


0x291c:	lea	rdx, [r15 + 1]
0x2920:	cmp	r13, rdx
0x2923:	jbe	0x292b


0x2917:	mov	byte ptr [r14 + r15], 0x27
0x291c:	lea	rdx, [r15 + 1]
0x2920:	cmp	r13, rdx
0x2923:	jbe	0x292b


0x292b:	lea	rdx, [r15 + 2]
0x292f:	cmp	r13, rdx
0x2932:	jbe	0x293a


0x2925:	mov	byte ptr [r14 + r15 + 1], 0x24
0x292b:	lea	rdx, [r15 + 2]
0x292f:	cmp	r13, rdx
0x2932:	jbe	0x293a


0x293a:	add	r15, 3
0x293e:	mov	r8d, eax
0x2941:	cmp	r13, r15
0x2944:	jbe	0x294b


0x2934:	mov	byte ptr [r14 + r15 + 2], 0x27
0x293a:	add	r15, 3
0x293e:	mov	r8d, eax
0x2941:	cmp	r13, r15
0x2944:	jbe	0x294b


0x2ee5:	mov	rdi, qword ptr [rsp + 0x28]
0x2eea:	test	eax, eax
0x2eec:	mov	eax, 0
0x2ef1:	cmove	r12d, eax
0x2ef5:	add	rbx, r15
0x2ef8:	call	0x1730


0x2efd:	test	eax, eax
0x2eff:	je	0x2e83


0x2e83:	mov	rax, qword ptr [rsp + 0x10]
0x2e88:	lea	r14, [rbp + rbx]
0x2e8d:	mov	rdx, qword ptr [rsp + 0x30]
0x2e92:	mov	rcx, qword ptr [rsp + 0x28]
0x2e97:	mov	rdi, qword ptr [rsp + 0x38]
0x2e9c:	lea	r13, [rax + r14]
0x2ea0:	sub	rdx, r14
0x2ea3:	mov	rsi, r13
0x2ea6:	call	0x5010


0x26ac:	movzx	r8d, byte ptr [rsp + 0x38]
0x26b2:	movzx	r10d, byte ptr [rsp + 0x30]
0x26b8:	mov	r11, rax
0x26bb:	mov	r9, qword ptr [rsp + 0x28]
0x26c0:	cmp	rbx, r11
0x26c3:	mov	byte ptr [rsp + 0x28], r10b
0x26c8:	ja	0x2c80


0x2e30:	movzx	r8d, byte ptr [rsp + 0x40]
0x2e36:	movzx	r10d, byte ptr [rsp + 0x38]
0x2e3c:	mov	r11, rax
0x2e3f:	mov	r9, qword ptr [rsp + 0x30]
0x2e44:	lea	rax, [rsp + 0x9c]
0x2e4c:	xor	ecx, ecx
0x2e4e:	mov	byte ptr [rsp + 0x7e], bl
0x2e52:	mov	byte ptr [rsp + 0x7d], r8b
0x2e57:	mov	rbx, rcx
0x2e5a:	mov	qword ptr [rsp + 0x88], r9
0x2e62:	mov	qword ptr [rsp + 0x38], rax
0x2e67:	mov	byte ptr [rsp + 0x7f], r10b
0x2e6c:	mov	qword ptr [rsp + 0x80], r15
0x2e74:	mov	qword ptr [rsp + 0x40], r14
0x2e79:	mov	qword ptr [rsp + 0x70], r13
0x2e7e:	mov	qword ptr [rsp + 0x30], r11
0x2e83:	mov	rax, qword ptr [rsp + 0x10]
0x2e88:	lea	r14, [rbp + rbx]
0x2e8d:	mov	rdx, qword ptr [rsp + 0x30]
0x2e92:	mov	rcx, qword ptr [rsp + 0x28]
0x2e97:	mov	rdi, qword ptr [rsp + 0x38]
0x2e9c:	lea	r13, [rax + r14]
0x2ea0:	sub	rdx, r14
0x2ea3:	mov	rsi, r13
0x2ea6:	call	0x5010


0x2a68:	mov	rcx, qword ptr [rax]
0x2a6b:	movzx	edx, bl
0x2a6e:	movzx	r10d, byte ptr [rsp + 0x28]
0x2a74:	movzx	r8d, byte ptr [rsp + 0x30]
0x2a7a:	mov	r11, qword ptr [rsp + 0x38]
0x2a7f:	mov	edi, 1
0x2a84:	movzx	eax, word ptr [rcx + rdx*2]
0x2a88:	and	ax, 0x4000
0x2a8c:	setne	r12b
0x2a90:	sete	al
0x2a93:	and	al, byte ptr [rsp + 0xd]
0x2a97:	test	al, al
0x2a99:	jne	0x3431


0x2740:	xor	r10d, r10d
0x2743:	cmp	r11, 1
0x2747:	setne	al
0x274a:	cmp	r11, -1
0x274e:	jne	0x275c


0x2750:	mov	rax, qword ptr [rsp + 0x10]
0x2755:	cmp	byte ptr [rax + 1], 0
0x2759:	setne	al
0x275c:	cmp	dword ptr [rsp + 8], 2
0x2761:	sete	dl
0x2764:	test	al, al
0x2766:	je	0x29b8


0x275c:	cmp	dword ptr [rsp + 8], 2
0x2761:	sete	dl
0x2764:	test	al, al
0x2766:	je	0x29b8


0x29b8:	test	rbp, rbp
0x29bb:	jne	0x276c


0x276c:	xor	r12d, r12d
0x276f:	xor	eax, eax
0x2771:	nop	dword ptr [rax]
0x2778:	cmp	byte ptr [rsp + 0xd], 1
0x277d:	jne	0x2892


0x29c1:	movzx	eax, byte ptr [rsp + 0xf]
0x29c6:	and	al, dl
0x29c8:	je	0x2778


0x29ce:	mov	rbp, r11
0x29d1:	mov	dword ptr [rsp + 8], 2
0x29d9:	jmp	0x30d9


0x2dd8:	cmp	byte ptr [rsp + 0xf], 0
0x2ddd:	jne	0x3600


0x2820:	cmp	eax, 5
0x2823:	je	0x2d98


0x2de3:	xor	r12d, r12d
0x2de6:	xor	eax, eax
0x2de8:	mov	ebx, 0x3f
0x2ded:	jmp	0x27a9


0x3600:	mov	rbp, r11
0x3603:	movzx	eax, byte ptr [rsp + 0xf]
0x3608:	jmp	0x30d9


0x2d98:	test	byte ptr [rsp + 0x78], 4
0x2d9d:	je	0x2dc0


0x2829:	cmp	eax, 2
0x282c:	mov	ebx, 0x3f
0x2831:	sete	dl
0x2834:	xor	r12d, r12d
0x2837:	xor	eax, eax
0x2839:	jmp	0x2778


0x2dc0:	xor	edx, edx
0x2dc2:	xor	r12d, r12d
0x2dc5:	xor	eax, eax
0x2dc7:	mov	ebx, 0x3f
0x2dcc:	jmp	0x2778


0x2d9f:	lea	rcx, [rbp + 2]
0x2da3:	cmp	rcx, r11
0x2da6:	jae	0x2dc0


0x2da8:	mov	rax, qword ptr [rsp + 0x10]
0x2dad:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x2db2:	je	0x3542


0x3542:	movzx	ebx, byte ptr [rax + rcx]
0x3546:	cmp	bl, 0x3e
0x3549:	ja	0x2dc0


0x354f:	movabs	rax, 0x7000a38200000000
0x3559:	bt	rax, rbx
0x355d:	jae	0x2dc0


0x3563:	cmp	byte ptr [rsp + 0xf], 0
0x3568:	jne	0x3752


0x356e:	cmp	r13, r15
0x3571:	jbe	0x3578


0x3752:	mov	rbp, r11
0x3755:	jmp	0x30f0


0x3578:	lea	rax, [r15 + 1]
0x357c:	cmp	r13, rax
0x357f:	jbe	0x3587


0x3573:	mov	byte ptr [r14 + r15], 0x3f
0x3578:	lea	rax, [r15 + 1]
0x357c:	cmp	r13, rax
0x357f:	jbe	0x3587


0x3587:	lea	rax, [r15 + 2]
0x358b:	cmp	r13, rax
0x358e:	jbe	0x3596


0x3581:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3587:	lea	rax, [r15 + 2]
0x358b:	cmp	r13, rax
0x358e:	jbe	0x3596


0x3596:	lea	rax, [r15 + 3]
0x359a:	cmp	r13, rax
0x359d:	jbe	0x35a5


0x3590:	mov	byte ptr [r14 + r15 + 2], 0x22
0x3596:	lea	rax, [r15 + 3]
0x359a:	cmp	r13, rax
0x359d:	jbe	0x35a5


0x35a5:	add	r15, 4
0x35a9:	xor	edx, edx
0x35ab:	xor	r12d, r12d
0x35ae:	xor	eax, eax
0x35b0:	mov	rbp, rcx
0x35b3:	jmp	0x2778


0x359f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x35a5:	add	r15, 4
0x35a9:	xor	edx, edx
0x35ab:	xor	r12d, r12d
0x35ae:	xor	eax, eax
0x35b0:	mov	rbp, rcx
0x35b3:	jmp	0x2778


0x2d50:	cmp	byte ptr [rsp + 0xf], 0
0x2d55:	jne	0x3600


0x284e:	mov	byte ptr [rsp + 0x7c], r12b
0x2853:	xor	edx, edx
0x2855:	xor	eax, eax
0x2857:	mov	ebx, 0x27
0x285c:	jmp	0x2778


0x2d5b:	test	r13, r13
0x2d5e:	je	0x3160


0x3160:	cmp	r13, r15
0x3163:	jbe	0x316a


0x2d64:	xor	edx, edx
0x2d66:	cmp	qword ptr [rsp + 0x50], 0
0x2d6c:	jne	0x3160


0x316a:	lea	rax, [r15 + 1]
0x316e:	cmp	r13, rax
0x3171:	jbe	0x3179


0x3165:	mov	byte ptr [r14 + r15], 0x27
0x316a:	lea	rax, [r15 + 1]
0x316e:	cmp	r13, rax
0x3171:	jbe	0x3179


0x2d72:	mov	qword ptr [rsp + 0x50], r13
0x2d77:	add	r15, 3
0x2d7b:	xor	eax, eax
0x2d7d:	mov	byte ptr [rsp + 0x7c], r12b
0x2d82:	xor	r8d, r8d
0x2d85:	mov	r13, rdx
0x2d88:	mov	ebx, 0x27
0x2d8d:	jmp	0x27a9


0x3179:	lea	rax, [r15 + 2]
0x317d:	cmp	r13, rax
0x3180:	jbe	0x3772


0x3173:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x3179:	lea	rax, [r15 + 2]
0x317d:	cmp	r13, rax
0x3180:	jbe	0x3772


0x3772:	mov	rdx, r13
0x3775:	mov	r13, qword ptr [rsp + 0x50]
0x377a:	jmp	0x2d72


0x3186:	mov	rdx, r13
0x3189:	mov	byte ptr [r14 + r15 + 2], 0x27
0x318f:	mov	r13, qword ptr [rsp + 0x50]
0x3194:	jmp	0x2d72


0x2884:	cmp	byte ptr [rsp + 0xd], 0
0x2889:	jne	0x28f0


0x288b:	mov	ebx, edx
0x288d:	xor	r12d, r12d
0x2890:	xor	eax, eax
0x2892:	cmp	byte ptr [rsp + 0xf], 0
0x2897:	jne	0x278b


0x28f0:	xor	r12d, r12d
0x28f3:	cmp	dword ptr [rsp + 8], 2
0x28f8:	sete	dl
0x28fb:	cmp	byte ptr [rsp + 0xf], 0
0x2900:	mov	eax, edx
0x2902:	jne	0x3158


0x2c90:	cmp	byte ptr [rsp + 0xf], 0
0x2c95:	jne	0x3600


0x28c3:	cmp	byte ptr [rsp + 0xd], 0
0x28c8:	je	0x2ae0


0x2c9b:	add	rbp, 1
0x2c9f:	mov	eax, r8d
0x2ca2:	xor	r12d, r12d
0x2ca5:	mov	ebx, 0x5c
0x2caa:	jmp	0x27bc


0x2ae0:	mov	edx, 0x5c
0x2ae5:	mov	ebx, 0x5c
0x2aea:	jmp	0x2884


0x28ce:	cmp	byte ptr [rsp + 0xf], 0
0x28d3:	je	0x2ae0


0x28d9:	cmp	qword ptr [rsp + 0x18], 0
0x28df:	jne	0x2c9b


0x28e5:	mov	ebx, 0x5c
0x28ea:	nop	word ptr [rax + rax]
0x28f0:	xor	r12d, r12d
0x28f3:	cmp	dword ptr [rsp + 8], 2
0x28f8:	sete	dl
0x28fb:	cmp	byte ptr [rsp + 0xf], 0
0x2900:	mov	eax, edx
0x2902:	jne	0x3158


0x296b:	xor	edx, edx
0x296d:	test	byte ptr [rsp + 0x78], 1
0x2972:	je	0x288b


0x2b33:	cmp	dword ptr [rsp + 8], 2
0x2b38:	sete	dl
0x2b3b:	cmp	byte ptr [rsp + 0xf], 0
0x2b40:	jne	0x36da


0x2978:	add	rbp, 1
0x297c:	jmp	0x2638


0x2b46:	mov	eax, r8d
0x2b49:	mov	rcx, r15
0x2b4c:	xor	eax, 1
0x2b4f:	and	al, dl
0x2b51:	je	0x2b80


0x36da:	movzx	ebx, byte ptr [rsp + 0xf]
0x36df:	mov	rbp, r11
0x36e2:	mov	eax, edx
0x36e4:	mov	byte ptr [rsp + 0xd], bl
0x36e8:	jmp	0x30d9


0x2b80:	cmp	r13, rcx
0x2b83:	jbe	0x2b8a


0x2b53:	cmp	r13, r15
0x2b56:	jbe	0x2b5d


0x2b8a:	cmp	dword ptr [rsp + 8], 2
0x2b8f:	lea	r15, [rcx + 1]
0x2b93:	je	0x3199


0x2b85:	mov	byte ptr [r14 + rcx], 0x5c
0x2b8a:	cmp	dword ptr [rsp + 8], 2
0x2b8f:	lea	r15, [rcx + 1]
0x2b93:	je	0x3199


0x2b5d:	lea	rcx, [r15 + 1]
0x2b61:	cmp	r13, rcx
0x2b64:	jbe	0x2b6c


0x2b58:	mov	byte ptr [r14 + r15], 0x27
0x2b5d:	lea	rcx, [r15 + 1]
0x2b61:	cmp	r13, rcx
0x2b64:	jbe	0x2b6c


0x3199:	mov	eax, r12d
0x319c:	mov	ebx, 0x30
0x31a1:	xor	r12d, r12d
0x31a4:	jmp	0x27a9


0x2b99:	lea	rax, [rbp + 1]
0x2b9d:	cmp	rax, r11
0x2ba0:	jae	0x2bbb


0x2b6c:	lea	rcx, [r15 + 2]
0x2b70:	cmp	r13, rcx
0x2b73:	ja	0x31a9


0x2b66:	mov	byte ptr [r14 + r15 + 1], 0x24
0x2b6c:	lea	rcx, [r15 + 2]
0x2b70:	cmp	r13, rcx
0x2b73:	ja	0x31a9


0x2ba2:	mov	rax, qword ptr [rsp + 0x10]
0x2ba7:	movzx	eax, byte ptr [rax + rbp + 1]
0x2bac:	mov	byte ptr [rsp + 0x28], al
0x2bb0:	sub	eax, 0x30
0x2bb3:	cmp	al, 9
0x2bb5:	jbe	0x33e9


0x2bbb:	mov	eax, r12d
0x2bbe:	mov	ebx, 0x30
0x2bc3:	xor	r12d, r12d
0x2bc6:	jmp	0x2778


0x2b79:	lea	rcx, [r15 + 3]
0x2b7d:	mov	r8d, eax
0x2b80:	cmp	r13, rcx
0x2b83:	jbe	0x2b8a


0x31a9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x31af:	jmp	0x2b79


0x33e9:	cmp	r13, r15
0x33ec:	jbe	0x33f3


0x33f3:	lea	rax, [rcx + 2]
0x33f7:	cmp	r13, rax
0x33fa:	jbe	0x3402


0x33ee:	mov	byte ptr [r14 + r15], 0x30
0x33f3:	lea	rax, [rcx + 2]
0x33f7:	cmp	r13, rax
0x33fa:	jbe	0x3402


0x3402:	mov	eax, r12d
0x3405:	lea	r15, [rcx + 3]
0x3409:	xor	r12d, r12d
0x340c:	mov	ebx, 0x30
0x3411:	jmp	0x2778


0x33fc:	mov	byte ptr [r14 + rcx + 2], 0x30
0x3402:	mov	eax, r12d
0x3405:	lea	r15, [rcx + 3]
0x3409:	xor	r12d, r12d
0x340c:	mov	ebx, 0x30
0x3411:	jmp	0x2778


0x2872:	cmp	dword ptr [rsp + 8], 2
0x2877:	sete	al
0x287a:	and	al, byte ptr [rsp + 0xf]
0x287e:	jne	0x29ce


0x2c30:	mov	edx, 0xd
0x2c35:	xor	r10d, r10d
0x2c38:	mov	ebx, 0x72
0x2c3d:	jmp	0x2872


0x31b4:	test	ebx, ebx
0x31b6:	jne	0x25e3


0x31bc:	mov	byte ptr [rsp + 0xd], 1
0x31c1:	test	r13, r13
0x31c4:	jne	0x375a


0x31ca:	lea	rax, [rip + 0x2504]
0x31d1:	mov	qword ptr [rsp + 0x50], 0
0x31da:	mov	byte ptr [rsp + 0xe], 1
0x31df:	mov	byte ptr [rsp + 0x7c], 0
0x31e4:	xor	r12d, r12d
0x31e7:	mov	byte ptr [rsp + 0xf], 0
0x31ec:	mov	qword ptr [rsp + 0x18], 1
0x31f5:	mov	qword ptr [rsp + 0x48], rax
0x31fa:	mov	r15d, 1
0x3200:	mov	dword ptr [rsp + 8], 2
0x3208:	jmp	0x2623


0x375a:	mov	byte ptr [rsp + 0xe], 1
0x375f:	xor	eax, eax
0x3761:	xor	r12d, r12d
0x3764:	mov	qword ptr [rsp + 0x50], 0
0x376d:	jmp	0x2d14


0x2d14:	lea	rbx, [rip + 0x29ba]
0x2d1b:	mov	byte ptr [r14], 0x27
0x2d1f:	mov	dword ptr [rsp + 8], 2
0x2d27:	mov	r15d, 1
0x2d2d:	mov	qword ptr [rsp + 0x18], 1
0x2d36:	mov	byte ptr [rsp + 0xf], 0
0x2d3b:	mov	qword ptr [rsp + 0x48], rbx
0x2d40:	mov	byte ptr [rsp + 0x7c], al
0x2d44:	jmp	0x2623


0x3218:	test	r13, r13
0x321b:	je	0x3446


0x360d:	lea	rax, [rip + 0x20bf]
0x3614:	mov	byte ptr [rsp + 0xe], 1
0x3619:	mov	byte ptr [rsp + 0x7c], 0
0x361e:	xor	r12d, r12d
0x3621:	mov	qword ptr [rsp + 0x50], 0
0x362a:	mov	byte ptr [rsp + 0xf], 1
0x362f:	mov	byte ptr [rsp + 0xd], 1
0x3634:	mov	qword ptr [rsp + 0x18], 1
0x363d:	xor	r15d, r15d
0x3640:	mov	qword ptr [rsp + 0x48], rax
0x3645:	jmp	0x2623


0x3446:	mov	qword ptr [rsp + 0x50], 0
0x344f:	mov	byte ptr [rsp + 0xe], 1
0x3454:	xor	r12d, r12d
0x3457:	mov	byte ptr [rsp + 0x7c], 0
0x345c:	jmp	0x323b


0x3221:	mov	byte ptr [r14], 0x22
0x3225:	mov	byte ptr [rsp + 0xe], 1
0x322a:	xor	r12d, r12d
0x322d:	mov	byte ptr [rsp + 0x7c], 0
0x3232:	mov	qword ptr [rsp + 0x50], 0
0x323b:	lea	rax, [rip + 0x2491]
0x3242:	mov	byte ptr [rsp + 0xf], 0
0x3247:	mov	byte ptr [rsp + 0xd], 1
0x324c:	mov	qword ptr [rsp + 0x18], 1
0x3255:	mov	r15d, 1
0x325b:	mov	qword ptr [rsp + 0x48], rax
0x3260:	jmp	0x2623


0x323b:	lea	rax, [rip + 0x2491]
0x3242:	mov	byte ptr [rsp + 0xf], 0
0x3247:	mov	byte ptr [rsp + 0xd], 1
0x324c:	mov	qword ptr [rsp + 0x18], 1
0x3255:	mov	r15d, 1
0x325b:	mov	qword ptr [rsp + 0x48], rax
0x3260:	jmp	0x2623


0x3265:	lea	rax, [rip + 0x2467]
0x326c:	mov	byte ptr [rsp + 0xe], 1
0x3271:	mov	byte ptr [rsp + 0x7c], 0
0x3276:	xor	r12d, r12d
0x3279:	mov	qword ptr [rsp + 0x50], 0
0x3282:	mov	byte ptr [rsp + 0xf], 1
0x3287:	mov	byte ptr [rsp + 0xd], 1
0x328c:	mov	qword ptr [rsp + 0x18], 1
0x3295:	xor	r15d, r15d
0x3298:	mov	qword ptr [rsp + 0x48], rax
0x329d:	mov	dword ptr [rsp + 8], 5
0x32a5:	jmp	0x2623


0x32aa:	mov	byte ptr [rsp + 0xe], 1
0x32af:	mov	byte ptr [rsp + 0x7c], 0
0x32b4:	xor	r12d, r12d
0x32b7:	mov	qword ptr [rsp + 0x50], 0
0x32c0:	mov	byte ptr [rsp + 0xf], 0
0x32c5:	xor	r15d, r15d
0x32c8:	mov	byte ptr [rsp + 0xd], 1
0x32cd:	mov	qword ptr [rsp + 0x18], 0
0x32d6:	mov	qword ptr [rsp + 0x48], 0
0x32df:	jmp	0x2623


0x32e4:	cmp	dword ptr [rsp + 8], 0xa
0x32e9:	je	0x3341


0x3341:	xor	r15d, r15d
0x3344:	test	ebx, ebx
0x3346:	je	0x350d


0x32eb:	lea	rsi, [rip + 0x23e5]
0x32f2:	xor	edi, edi
0x32f4:	mov	edx, 5
0x32f9:	call	0x1500


0x350d:	mov	rdx, qword ptr [rsp + 0x68]
0x3512:	movzx	eax, byte ptr [rdx]
0x3515:	test	al, al
0x3517:	je	0x334c


0x334c:	test	ebx, ebx
0x334e:	mov	rbx, qword ptr [rsp + 0x60]
0x3353:	setne	byte ptr [rsp + 0xf]
0x3358:	xor	r12d, r12d
0x335b:	mov	rdi, rbx
0x335e:	call	0x1520


0x3529:	add	r15, 1
0x352d:	movzx	eax, byte ptr [rdx + r15]
0x3532:	test	al, al
0x3534:	jne	0x3520


0x3525:	mov	byte ptr [r14 + r15], al
0x3529:	add	r15, 1
0x352d:	movzx	eax, byte ptr [rdx + r15]
0x3532:	test	al, al
0x3534:	jne	0x3520


0x3536:	jmp	0x334c


0x3520:	cmp	r13, r15
0x3523:	jbe	0x3529


0x3363:	mov	qword ptr [rsp + 0x48], rbx
0x3368:	mov	qword ptr [rsp + 0x18], rax
0x336d:	mov	byte ptr [rsp + 0xe], 1
0x3372:	mov	byte ptr [rsp + 0x7c], 0
0x3377:	mov	qword ptr [rsp + 0x50], 0
0x3380:	mov	byte ptr [rsp + 0xd], 1
0x3385:	jmp	0x2623


0x32fe:	mov	rcx, rax
0x3301:	mov	qword ptr [rsp + 0x68], rax
0x3306:	lea	rax, [rip + 0x23ca]
0x330d:	cmp	rcx, rax
0x3310:	je	0x36ae


0x36ae:	mov	esi, dword ptr [rsp + 8]
0x36b2:	mov	rdi, rcx
0x36b5:	call	0x2460


0x3316:	lea	rsi, [rip + 0x23b8]
0x331d:	xor	edi, edi
0x331f:	mov	edx, 5
0x3324:	call	0x1500


0x3329:	mov	rcx, rax
0x332c:	mov	qword ptr [rsp + 0x60], rax
0x3331:	lea	rax, [rip + 0x239d]
0x3338:	cmp	rcx, rax
0x333b:	je	0x36c4


0x36c4:	mov	esi, dword ptr [rsp + 8]
0x36c8:	mov	rdi, rcx
0x36cb:	call	0x2460


0x36d0:	mov	qword ptr [rsp + 0x60], rax
0x36d5:	jmp	0x3341


0x36ba:	mov	qword ptr [rsp + 0x68], rax
0x36bf:	jmp	0x3316


0x338a:	mov	byte ptr [rsp + 0xe], 1
0x338f:	mov	byte ptr [rsp + 0x7c], 0
0x3394:	xor	r12d, r12d
0x3397:	mov	qword ptr [rsp + 0x50], 0
0x33a0:	mov	byte ptr [rsp + 0xf], 0
0x33a5:	xor	r15d, r15d
0x33a8:	mov	byte ptr [rsp + 0xd], 0
0x33ad:	mov	qword ptr [rsp + 0x18], 0
0x33b6:	mov	qword ptr [rsp + 0x48], 0
0x33bf:	jmp	0x2623


0x33c4:	mov	byte ptr [rsp + 0xe], 1
0x33c9:	mov	byte ptr [rsp + 0x7c], 0
0x33ce:	xor	r12d, r12d
0x33d1:	mov	qword ptr [rsp + 0x50], 0
0x33da:	mov	byte ptr [rsp + 0xf], 1
0x33df:	mov	byte ptr [rsp + 0xd], 1
0x33e4:	jmp	0x2603


0x2603:	lea	rax, [rip + 0x30cb]
0x260a:	mov	qword ptr [rsp + 0x18], 1
0x2613:	xor	r15d, r15d
0x2616:	mov	dword ptr [rsp + 8], 2
0x261e:	mov	qword ptr [rsp + 0x48], rax
0x2623:	xor	r11d, r11d
0x2626:	mov	rax, rbp
0x2629:	mov	r8d, r12d
0x262c:	mov	rbp, r11
0x262f:	mov	r11, rax
0x2632:	nop	word ptr [rax + rax]
0x2638:	cmp	r11, rbp
0x263b:	setne	r12b
0x263f:	cmp	r11, -1
0x2643:	jne	0x2652


0x35b8:	test	ebx, ebx
0x35ba:	je	0x3748


0x3748:	mov	byte ptr [rsp + 0xd], 0
0x374d:	jmp	0x31c1


0x35c0:	lea	rax, [rip + 0x210e]
0x35c7:	mov	byte ptr [rsp + 0xe], 1
0x35cc:	mov	byte ptr [rsp + 0x7c], 0
0x35d1:	xor	r12d, r12d
0x35d4:	mov	qword ptr [rsp + 0x50], 0
0x35dd:	mov	byte ptr [rsp + 0xf], 1
0x35e2:	mov	byte ptr [rsp + 0xd], 0
0x35e7:	mov	qword ptr [rsp + 0x18], 1
0x35f0:	xor	r15d, r15d
0x35f3:	mov	qword ptr [rsp + 0x48], rax
0x35f8:	jmp	0x2623


0x31c1:	test	r13, r13
0x31c4:	jne	0x375a


0x3784:	nop	
0x3786:	nop	word ptr cs:[rax + rax]


0x393b:	nop	dword ptr [rax + rax]


0x3976:	nop	word ptr cs:[rax + rax]


0x3991:	nop	dword ptr [rax + rax]
0x3996:	nop	word ptr cs:[rax + rax]


0x39b1:	nop	dword ptr [rax + rax]
0x39b6:	nop	word ptr cs:[rax + rax]


0x39f5:	nop	
0x39f6:	nop	word ptr cs:[rax + rax]


0x3a15:	nop	
0x3a16:	nop	word ptr cs:[rax + rax]


0x3ac4:	nop	
0x3ac6:	nop	word ptr cs:[rax + rax]


0x3bb3:	nop	dword ptr [rax]
0x3bb6:	nop	word ptr cs:[rax + rax]


0x3bca:	nop	word ptr [rax + rax]


0x3c63:	nop	dword ptr [rax]
0x3c66:	nop	word ptr cs:[rax + rax]


0x3c83:	nop	dword ptr [rax]
0x3c86:	nop	word ptr cs:[rax + rax]


0x3c9c:	nop	dword ptr [rax]


0x3cb8:	nop	dword ptr [rax + rax]


0x3cd4:	nop	
0x3cd6:	nop	word ptr cs:[rax + rax]


0x3d6e:	nop	


0x3dfa:	nop	word ptr [rax + rax]


0x3e0c:	nop	dword ptr [rax]


0x3e1f:	nop	


0x3eb8:	nop	dword ptr [rax + rax]


0x3ee1:	nop	dword ptr [rax + rax]
0x3ee6:	nop	word ptr cs:[rax + rax]


0x3efa:	nop	word ptr [rax + rax]


0x3f8e:	nop	


0x4021:	nop	dword ptr [rax + rax]
0x4026:	nop	word ptr cs:[rax + rax]


0x403c:	nop	dword ptr [rax]


0x4057:	nop	word ptr [rax + rax]


0x4073:	nop	dword ptr [rax]
0x4076:	nop	word ptr cs:[rax + rax]


0x408c:	nop	dword ptr [rax]


0x40a4:	nop	
0x40a6:	nop	word ptr cs:[rax + rax]


0x40c3:	nop	dword ptr [rax]
0x40c6:	nop	word ptr cs:[rax + rax]


0x40e8:	nop	dword ptr [rax + rax]


0x4507:	nop	word ptr [rax + rax]


0x45a8:	nop	dword ptr [rax + rax]


0x4685:	nop	
0x4686:	nop	word ptr cs:[rax + rax]


0x472a:	nop	word ptr [rax + rax]


0x4754:	nop	
0x4756:	nop	word ptr cs:[rax + rax]


0x4762:	nop	dword ptr [rax]
0x4766:	nop	word ptr cs:[rax + rax]


0x47a6:	nop	word ptr cs:[rax + rax]


0x47d4:	nop	
0x47d6:	nop	word ptr cs:[rax + rax]


0x4862:	nop	dword ptr [rax]
0x4866:	nop	word ptr cs:[rax + rax]


0x48ba:	nop	word ptr [rax + rax]


0x48d7:	nop	word ptr [rax + rax]


0x490e:	nop	


0x4938:	nop	dword ptr [rax + rax]


0x4953:	nop	word ptr cs:[rax + rax]
0x495d:	nop	dword ptr [rax]


0x4995:	nop	word ptr cs:[rax + rax]
0x499f:	nop	


0x4ac1:	nop	word ptr cs:[rax + rax]
0x4acb:	nop	dword ptr [rax + rax]


0x4ca8:	mov	rax, rbx
0x4cab:	mul	rsi
0x4cae:	jo	0x4ea1


0x4ea1:	or	rax, 0xffffffffffffffff
0x4ea5:	mov	r8d, 1
0x4eab:	jmp	0x4cb7


0x4cb4:	xor	r8d, r8d
0x4cb7:	mul	rsi
0x4cba:	jo	0x4e92


0x4cb7:	mul	rsi
0x4cba:	jo	0x4e92


0x4e92:	mov	r8d, 1
0x4e98:	or	rbx, 0xffffffffffffffff
0x4e9c:	jmp	0x4cc3


0x4cc0:	mov	rbx, rax
0x4cc3:	or	ebp, r8d
0x4cc6:	nop	word ptr cs:[rax + rax]
0x4cd0:	movsxd	rdi, edi
0x4cd3:	mov	eax, ebp
0x4cd5:	add	rcx, rdi
0x4cd8:	or	eax, 2
0x4cdb:	mov	qword ptr [r15], rcx
0x4cde:	cmp	byte ptr [rcx], 0
0x4ce1:	mov	qword ptr [r14], rbx
0x4ce4:	cmovne	ebp, eax
0x4ce7:	jmp	0x4bad


0x4cc3:	or	ebp, r8d
0x4cc6:	nop	word ptr cs:[rax + rax]
0x4cd0:	movsxd	rdi, edi
0x4cd3:	mov	eax, ebp
0x4cd5:	add	rcx, rdi
0x4cd8:	or	eax, 2
0x4cdb:	mov	qword ptr [r15], rcx
0x4cde:	cmp	byte ptr [rcx], 0
0x4ce1:	mov	qword ptr [r14], rbx
0x4ce4:	cmovne	ebp, eax
0x4ce7:	jmp	0x4bad


0x4cf7:	mov	edx, 2
0x4cfc:	mov	rax, rdx
0x4cff:	mul	rbx
0x4d02:	jo	0x4d9e


0x4d9e:	mov	ebp, 1
0x4da3:	or	rbx, 0xffffffffffffffff
0x4da7:	jmp	0x4cd0


0x4d08:	add	rbx, rbx
0x4d0b:	jmp	0x4cd0


0x4cd0:	movsxd	rdi, edi
0x4cd3:	mov	eax, ebp
0x4cd5:	add	rcx, rdi
0x4cd8:	or	eax, 2
0x4cdb:	mov	qword ptr [r15], rcx
0x4cde:	cmp	byte ptr [rcx], 0
0x4ce1:	mov	qword ptr [r14], rbx
0x4ce4:	cmovne	ebp, eax
0x4ce7:	jmp	0x4bad


0x4d0d:	mov	edx, 0x200
0x4d12:	mov	rax, rdx
0x4d15:	mul	rbx
0x4d18:	jo	0x4d9e


0x4d1e:	shl	rbx, 9
0x4d22:	jmp	0x4cd0


0x4d24:	mov	r8d, 7
0x4d2a:	xor	r9d, r9d
0x4d2d:	nop	dword ptr [rax]
0x4d30:	mov	rax, rbx
0x4d33:	mul	rsi
0x4d36:	mov	rbx, rax
0x4d39:	jo	0x4ece


0x4ece:	mov	r9d, 1
0x4ed4:	or	rbx, 0xffffffffffffffff
0x4ed8:	jmp	0x4d3f


0x4d3f:	sub	r8d, 1
0x4d43:	jne	0x4d30


0x4d45:	or	ebp, r9d
0x4d48:	jmp	0x4cd0


0x4d30:	mov	rax, rbx
0x4d33:	mul	rsi
0x4d36:	mov	rbx, rax
0x4d39:	jo	0x4ece


0x4d4a:	mov	r8d, 8
0x4d50:	xor	r9d, r9d
0x4d53:	nop	dword ptr [rax + rax]
0x4d58:	mov	rax, rbx
0x4d5b:	mul	rsi
0x4d5e:	mov	rbx, rax
0x4d61:	jo	0x4eb0


0x4eb0:	mov	r9d, 1
0x4eb6:	or	rbx, 0xffffffffffffffff
0x4eba:	jmp	0x4d67


0x4d67:	sub	r8d, 1
0x4d6b:	jne	0x4d58


0x4d6d:	jmp	0x4d45


0x4d58:	mov	rax, rbx
0x4d5b:	mul	rsi
0x4d5e:	mov	rbx, rax
0x4d61:	jo	0x4eb0


0x4d6f:	mov	r8d, 4
0x4d75:	xor	r9d, r9d
0x4d78:	mov	rax, rbx
0x4d7b:	mul	rsi
0x4d7e:	mov	rbx, rax
0x4d81:	jo	0x4e83


0x4e83:	mov	r9d, 1
0x4e89:	or	rbx, 0xffffffffffffffff
0x4e8d:	jmp	0x4d87


0x4d87:	sub	r8d, 1
0x4d8b:	jne	0x4d78


0x4d8d:	jmp	0x4d45


0x4d78:	mov	rax, rbx
0x4d7b:	mul	rsi
0x4d7e:	mov	rbx, rax
0x4d81:	jo	0x4e83


0x4d8f:	mov	rax, rbx
0x4d92:	mul	rsi
0x4d95:	mov	rbx, rax
0x4d98:	jno	0x4cd0


0x4ebf:	mov	r9d, 1
0x4ec5:	or	rbx, 0xffffffffffffffff
0x4ec9:	jmp	0x4dc8


0x4dc8:	sub	r8d, 1
0x4dcc:	jne	0x4db9


0x4dce:	jmp	0x4d45


0x4db9:	mov	rax, rbx
0x4dbc:	mul	rsi
0x4dbf:	mov	rbx, rax
0x4dc2:	jo	0x4ebf


0x4dd3:	mov	r8d, 6
0x4dd9:	xor	r9d, r9d
0x4ddc:	mov	rax, rbx
0x4ddf:	mul	rsi
0x4de2:	mov	rbx, rax
0x4de5:	jo	0x4e74


0x4e74:	mov	r9d, 1
0x4e7a:	or	rbx, 0xffffffffffffffff
0x4e7e:	jmp	0x4deb


0x4deb:	sub	r8d, 1
0x4def:	jne	0x4ddc


0x4df1:	jmp	0x4d45


0x4ddc:	mov	rax, rbx
0x4ddf:	mul	rsi
0x4de2:	mov	rbx, rax
0x4de5:	jo	0x4e74


0x4df6:	mov	edx, 0x400
0x4dfb:	mov	rax, rdx
0x4dfe:	mul	rbx
0x4e01:	jo	0x4d9e


0x4e03:	shl	rbx, 0xa
0x4e07:	jmp	0x4cd0


0x4e0c:	mov	rax, rbx
0x4e0f:	mul	rsi
0x4e12:	jo	0x4edd


0x4edd:	mov	r8d, 1
0x4ee3:	or	rax, 0xffffffffffffffff
0x4ee7:	jmp	0x4e1b


0x4e18:	xor	r8d, r8d
0x4e1b:	mul	rsi
0x4e1e:	jno	0x4cb7


0x4e1b:	mul	rsi
0x4e1e:	jno	0x4cb7


0x4e24:	mov	r8d, 1
0x4e2a:	or	rax, 0xffffffffffffffff
0x4e2e:	jmp	0x4cb7


0x4eec:	nop	dword ptr [rax]


0x4f6b:	nop	dword ptr [rax + rax]


0x5007:	nop	word ptr [rax + rax]


0x5093:	nop	word ptr cs:[rax + rax]
0x509d:	nop	dword ptr [rax]


0x511d:	nop	dword ptr [rax]


0x51bc:	nop	dword ptr [rax]


0x5225:	nop	
0x5226:	nop	word ptr cs:[rax + rax]


0x5232:	nop	word ptr cs:[rax + rax]
0x523c:	nop	dword ptr [rax]


0x2810:	xor	r10d, r10d
0x2813:	mov	eax, dword ptr [rsp + 8]
0x2817:	cmp	eax, 2
0x281a:	je	0x2dd8


0x2840:	xor	r10d, r10d
0x2843:	cmp	dword ptr [rsp + 8], 2
0x2848:	je	0x2d50


0x2868:	mov	edx, 9
0x286d:	mov	ebx, 0x74
0x2872:	cmp	dword ptr [rsp + 8], 2
0x2877:	sete	al
0x287a:	and	al, byte ptr [rsp + 0xf]
0x287e:	jne	0x29ce


0x28a8:	mov	edx, 8
0x28ad:	mov	ebx, 0x62
0x28b2:	jmp	0x2884


0x28b8:	cmp	dword ptr [rsp + 8], 2
0x28bd:	je	0x2c90


0x2960:	cmp	byte ptr [rsp + 0xd], 0
0x2965:	jne	0x2b33


0x2988:	cmp	dword ptr [rsp + 8], 2
0x298d:	sete	dl
0x2990:	xor	eax, eax
0x2992:	jmp	0x2778


0x29a0:	mov	edx, 7
0x29a5:	mov	ebx, 0x61
0x29aa:	jmp	0x2884


0x29b0:	cmp	dword ptr [rsp + 8], 2
0x29b5:	sete	dl
0x29b8:	test	rbp, rbp
0x29bb:	jne	0x276c


0x29e0:	cmp	dword ptr [rsp + 8], 2
0x29e5:	sete	dl
0x29e8:	xor	r12d, r12d
0x29eb:	jmp	0x29c1


0x29f0:	cmp	dword ptr [rsp + 8], 2
0x29f5:	mov	ebx, 0x20
0x29fa:	sete	dl
0x29fd:	jmp	0x29c1


0x2a00:	mov	edx, 0xd
0x2a05:	mov	ebx, 0x72
0x2a0a:	jmp	0x2872


0x2a10:	mov	edx, 0xc
0x2a15:	mov	ebx, 0x66
0x2a1a:	jmp	0x2884


0x2a20:	mov	edx, 0xb
0x2a25:	mov	ebx, 0x76
0x2a2a:	jmp	0x2884


0x2a30:	mov	edx, 0xa
0x2a35:	mov	ebx, 0x6e
0x2a3a:	jmp	0x2872


0x2ad0:	xor	r10d, r10d
0x2ad3:	cmp	byte ptr [rsp + 0xd], 0
0x2ad8:	jne	0x28ce


0x2af0:	mov	edx, 0xc
0x2af5:	xor	r10d, r10d
0x2af8:	mov	ebx, 0x66
0x2afd:	jmp	0x2884


0x2b08:	mov	edx, 0xa
0x2b0d:	xor	r10d, r10d
0x2b10:	mov	ebx, 0x6e
0x2b15:	jmp	0x2872


0x2b20:	mov	ebx, 0x61
0x2b25:	jmp	0x28f0


0x2b30:	xor	r10d, r10d
0x2b33:	cmp	dword ptr [rsp + 8], 2
0x2b38:	sete	dl
0x2b3b:	cmp	byte ptr [rsp + 0xf], 0
0x2b40:	jne	0x36da


0x2bd0:	cmp	dword ptr [rsp + 8], 2
0x2bd5:	mov	r12d, r10d
0x2bd8:	sete	dl
0x2bdb:	xor	r10d, r10d
0x2bde:	xor	eax, eax
0x2be0:	jmp	0x2778


0x2be8:	cmp	dword ptr [rsp + 8], 2
0x2bed:	sete	dl
0x2bf0:	xor	r10d, r10d
0x2bf3:	jmp	0x29b8


0x2c00:	cmp	dword ptr [rsp + 8], 2
0x2c05:	sete	dl
0x2c08:	xor	r10d, r10d
0x2c0b:	xor	r12d, r12d
0x2c0e:	jmp	0x29c1


0x2c18:	cmp	dword ptr [rsp + 8], 2
0x2c1d:	mov	r12d, r10d
0x2c20:	mov	ebx, 0x20
0x2c25:	sete	dl
0x2c28:	xor	r10d, r10d
0x2c2b:	jmp	0x29c1


0x2c48:	mov	ebx, 0x76
0x2c4d:	jmp	0x28f0


0x2c58:	mov	edx, 9
0x2c5d:	xor	r10d, r10d
0x2c60:	mov	ebx, 0x74
0x2c65:	jmp	0x2872


0x2c70:	mov	ebx, 0x62
0x2c75:	jmp	0x28f0


0x3210:	test	ebx, ebx
0x3212:	jne	0x360d


0x4db0:	mov	r8d, 5
0x4db6:	xor	r9d, r9d
0x4db9:	mov	rax, rbx
0x4dbc:	mul	rsi
0x4dbf:	mov	rbx, rax
0x4dc2:	jo	0x4ebf


0x183d:	nop	dword ptr [rax]


0x1849:	nop	dword ptr [rax]


0x1894:	nop	dword ptr [rax]


0x18ef:	nop	


0x1a36:	nop	word ptr cs:[rax + rax]


0x1a87:	nop	word ptr [rax + rax]


0x1ad1:	nop	dword ptr [rax]


0x1b13:	nop	dword ptr [rax + rax]


0x1b29:	nop	dword ptr [rax]


0x1c43:	nop	dword ptr [rax + rax]


0x1c5e:	nop	


0x1cfd:	nop	dword ptr [rax]


0x1d94:	nop	dword ptr [rax]


0x1de1:	nop	dword ptr [rax]


0x1df6:	nop	word ptr cs:[rax + rax]


0x1e59:	nop	dword ptr [rax]


0x1eb6:	nop	word ptr cs:[rax + rax]


0x23ab:	nop	dword ptr [rax + rax]


0x249c:	nop	dword ptr [rax]


0x24ed:	nop	dword ptr [rax]


0x2718:	nop	dword ptr [rax + rax]


0x2807:	nop	word ptr [rax + rax]


0x283e:	nop	


0x2861:	nop	dword ptr [rax]


0x28a2:	nop	word ptr [rax + rax]


0x28b4:	nop	dword ptr [rax]


0x2958:	nop	dword ptr [rax + rax]


0x2981:	nop	dword ptr [rax]


0x2997:	nop	word ptr [rax + rax]


0x29af:	nop	


0x29de:	nop	


0x29ed:	nop	dword ptr [rax]


0x29ff:	nop	


0x2a0f:	nop	


0x2a1f:	nop	


0x2a2f:	nop	


0x2a3f:	nop	


0x2aac:	nop	dword ptr [rax]


0x2acc:	nop	dword ptr [rax]


0x2ade:	nop	


0x2aef:	nop	


0x2b02:	nop	word ptr [rax + rax]


0x2b1a:	nop	word ptr [rax + rax]


0x2b2a:	nop	word ptr [rax + rax]


0x2bcb:	nop	dword ptr [rax + rax]


0x2be5:	nop	dword ptr [rax]


0x2bf8:	nop	dword ptr [rax + rax]


0x2c13:	nop	dword ptr [rax + rax]


0x2c42:	nop	word ptr [rax + rax]


0x2c52:	nop	word ptr [rax + rax]


0x2c6a:	nop	word ptr [rax + rax]


0x2c7a:	nop	word ptr [rax + rax]


0x2c88:	nop	dword ptr [rax + rax]


0x2caf:	nop	


0x2d49:	nop	dword ptr [rax]


0x2d92:	nop	word ptr [rax + rax]


0x2db8:	nop	dword ptr [rax + rax]


0x2dd1:	nop	dword ptr [rax]


0x2df2:	nop	word ptr [rax + rax]


0x2f58:	nop	dword ptr [rax + rax]


0x306b:	nop	dword ptr [rax + rax]


0x308e:	nop	


0x3155:	nop	dword ptr [rax]


0x320d:	nop	dword ptr [rax]


0x3416:	nop	word ptr cs:[rax + rax]


0x34a9:	nop	dword ptr [rax]


0x351d:	nop	dword ptr [rax]


0x35fd:	nop	dword ptr [rax]


0x390b:	nop	dword ptr [rax + rax]


0x4196:	nop	word ptr cs:[rax + rax]


0x4225:	nop	dword ptr [rax]


0x4246:	nop	word ptr cs:[rax + rax]


0x42a5:	nop	dword ptr [rax]


0x42e1:	nop	dword ptr [rax]


0x4328:	nop	dword ptr [rax + rax]


0x4377:	nop	word ptr [rax + rax]


0x43d4:	nop	dword ptr [rax]


0x4402:	nop	word ptr [rax + rax]


0x44b6:	nop	word ptr cs:[rax + rax]


0x4519:	nop	dword ptr [rax]


0x4792:	nop	word ptr [rax + rax]


0x4819:	nop	dword ptr [rax]


0x4844:	nop	dword ptr [rax]


0x489d:	nop	dword ptr [rax]


0x4a66:	nop	word ptr cs:[rax + rax]


0x4a8f:	nop	


0x4b36:	nop	word ptr cs:[rax + rax]


0x4b93:	nop	dword ptr [rax + rax]


0x4ba2:	nop	word ptr [rax + rax]


0x4bd2:	nop	word ptr [rax + rax]


0x4bdc:	nop	dword ptr [rax]


0x4c7b:	nop	dword ptr [rax + rax]


0x4dac:	nop	dword ptr [rax]


0x4e33:	nop	dword ptr [rax + rax]


0x4f35:	nop	dword ptr [rax]


0x4f93:	nop	dword ptr [rax + rax]


0x4fbf:	nop	


0x50d4:	nop	dword ptr [rax]


0x50f1:	nop	dword ptr [rax]


0x5102:	nop	word ptr [rax + rax]


0x515a:	nop	word ptr [rax + rax]


0x51a6:	nop	word ptr cs:[rax + rax]


