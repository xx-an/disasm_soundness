0x5c90:	sub	rsp, 8
0x5c94:	add	rsp, 8
0x5c98:	ret	


0x5c80:	mov	rdx, qword ptr [rip + 0x203381]
0x5c87:	xor	esi, esi
0x5c89:	jmp	0x1780


0x5c70:	ret	


0x5c00:	push	r15
0x5c02:	push	r14
0x5c04:	mov	r15, rdx
0x5c07:	push	r13
0x5c09:	push	r12
0x5c0b:	lea	r12, [rip + 0x202efe]
0x5c12:	push	rbp
0x5c13:	lea	rbp, [rip + 0x202efe]
0x5c1a:	push	rbx
0x5c1b:	mov	r13d, edi
0x5c1e:	mov	r14, rsi
0x5c21:	sub	rbp, r12
0x5c24:	sub	rsp, 8
0x5c28:	sar	rbp, 3
0x5c2c:	call	0x14a8


0x5bc0:	sub	rsp, 8
0x5bc4:	mov	edi, 0xe
0x5bc9:	call	0x16e0


0x5b60:	sub	rsp, 8
0x5b64:	xor	esi, esi
0x5b66:	call	0x1720


0x5ae0:	push	r12
0x5ae2:	push	rbp
0x5ae3:	mov	rbp, rdi
0x5ae6:	push	rbx
0x5ae7:	call	0x1520


0x5a50:	push	r13
0x5a52:	push	r12
0x5a54:	mov	r13, rsi
0x5a57:	push	rbp
0x5a58:	push	rbx
0x5a59:	mov	rbx, rdi
0x5a5c:	mov	r12, rdx
0x5a5f:	sub	rsp, 0x18
0x5a63:	mov	rax, qword ptr fs:[0x28]
0x5a6c:	mov	qword ptr [rsp + 8], rax
0x5a71:	xor	eax, eax
0x5a73:	lea	rax, [rsp + 4]
0x5a78:	test	rdi, rdi
0x5a7b:	cmove	rbx, rax
0x5a7f:	mov	rdi, rbx
0x5a82:	call	0x15c0


0x59f0:	mov	rax, qword ptr [rdi + 8]
0x59f4:	cmp	qword ptr [rdi + 0x10], rax
0x59f8:	je	0x5a00


0x59b0:	test	rdi, rdi
0x59b3:	push	rbx
0x59b4:	mov	rbx, rdi
0x59b7:	je	0x59ca


0x5930:	push	r12
0x5932:	push	rbp
0x5933:	push	rbx
0x5934:	mov	rbx, rdi
0x5937:	call	0x16b0


0x5510:	push	r15
0x5512:	push	r14
0x5514:	push	r13
0x5516:	push	r12
0x5518:	push	rbp
0x5519:	push	rbx
0x551a:	sub	rsp, 0x28
0x551e:	mov	rax, qword ptr fs:[0x28]
0x5527:	mov	qword ptr [rsp + 0x18], rax
0x552c:	xor	eax, eax
0x552e:	cmp	edx, 0x24
0x5531:	ja	0x5895


0x54e0:	sub	rsp, 0x10
0x54e4:	push	r9
0x54e6:	mov	r9, r8
0x54e9:	mov	r8, rcx
0x54ec:	mov	rcx, rdx
0x54ef:	mov	rdx, rsi
0x54f2:	mov	esi, 0xa
0x54f7:	call	0x53e0


0x53e0:	push	r15
0x53e2:	push	r14
0x53e4:	mov	r15, rcx
0x53e7:	push	r13
0x53e9:	push	r12
0x53eb:	mov	r14, rdx
0x53ee:	push	rbp
0x53ef:	push	rbx
0x53f0:	mov	edx, esi
0x53f2:	xor	esi, esi
0x53f4:	mov	r12, rdi
0x53f7:	mov	r13, r9
0x53fa:	sub	rsp, 0x18
0x53fe:	mov	rcx, rsp
0x5401:	mov	ebx, dword ptr [rsp + 0x50]
0x5405:	mov	rax, qword ptr fs:[0x28]
0x540e:	mov	qword ptr [rsp + 8], rax
0x5413:	xor	eax, eax
0x5415:	call	0x5510


0x53a0:	lea	rsi, [rip + 0x1848]
0x53a7:	sub	rsp, 8
0x53ab:	mov	edx, 5
0x53b0:	xor	edi, edi
0x53b2:	call	0x1570


0x5380:	push	rbx
0x5381:	mov	rbx, rdi
0x5384:	call	0x1590


0x5350:	push	rbp
0x5351:	push	rbx
0x5352:	mov	rbp, rdi
0x5355:	mov	rdi, rsi
0x5358:	mov	rbx, rsi
0x535b:	sub	rsp, 8
0x535f:	call	0x5150


0x5320:	mov	rax, rdi
0x5323:	sub	rsp, 8
0x5327:	mul	rsi
0x532a:	seto	dl
0x532d:	test	rax, rax
0x5330:	js	0x5349


0x5300:	push	rbx
0x5301:	mov	rbx, rdi
0x5304:	call	0x5150


0x52b0:	test	rdi, rdi
0x52b3:	mov	rax, qword ptr [rsi]
0x52b6:	je	0x52e0


0x5220:	test	rdi, rdi
0x5223:	mov	r9, rdx
0x5226:	mov	rcx, qword ptr [rsi]
0x5229:	je	0x5260


0x51f0:	mov	rax, rsi
0x51f3:	mul	rdx
0x51f6:	mov	rsi, rax
0x51f9:	seto	al
0x51fc:	test	rsi, rsi
0x51ff:	js	0x520b


0x51b0:	test	rsi, rsi
0x51b3:	push	rbx
0x51b4:	mov	rbx, rsi
0x51b7:	jne	0x51be


0x51a0:	jmp	0x5150


0x5170:	mov	rax, rdi
0x5173:	mul	rsi
0x5176:	mov	rdi, rax
0x5179:	seto	al
0x517c:	test	rdi, rdi
0x517f:	js	0x518b


0x5150:	push	rbx
0x5151:	mov	rbx, rdi
0x5154:	call	0x16c0


0x50d0:	push	rbx
0x50d1:	lea	rsi, [rip + 0x180a]
0x50d8:	mov	edx, 5
0x50dd:	xor	edi, edi
0x50df:	call	0x1570


0x4ff0:	push	rbp
0x4ff1:	push	rbx
0x4ff2:	mov	r10d, 0x20
0x4ff8:	xor	r11d, r11d
0x4ffb:	sub	rsp, 0xb8
0x5002:	mov	rax, qword ptr fs:[0x28]
0x500b:	mov	qword ptr [rsp + 0x78], rax
0x5010:	xor	eax, eax
0x5012:	lea	rax, [rsp + 0xd0]
0x501a:	mov	qword ptr [rsp + 0xa0], r8
0x5022:	lea	rbx, [rsp + 0xd0]
0x502a:	lea	r8, [rsp + 0x20]
0x502f:	mov	qword ptr [rsp + 0xa8], r9
0x5037:	mov	dword ptr [rsp + 8], 0x20
0x503f:	mov	qword ptr [rsp + 0x10], rax
0x5044:	lea	rax, [rsp + 0x80]
0x504c:	xor	r9d, r9d
0x504f:	mov	qword ptr [rsp + 0x18], rax
0x5054:	mov	rbp, rax
0x5057:	nop	word ptr [rax + rax]
0x5060:	cmp	r10d, 0x2f
0x5064:	ja	0x50bc


0x4f70:	sub	rsp, 0x68
0x4f74:	mov	r10, r8
0x4f77:	xor	r9d, r9d
0x4f7a:	mov	rax, qword ptr fs:[0x28]
0x4f83:	mov	qword ptr [rsp + 0x58], rax
0x4f88:	xor	eax, eax
0x4f8a:	mov	r8, rsp
0x4f8d:	nop	dword ptr [rax]
0x4f90:	mov	eax, dword ptr [r10]
0x4f93:	cmp	eax, 0x2f
0x4f96:	ja	0x4fda


0x4f50:	xor	r9d, r9d
0x4f53:	cmp	qword ptr [r8], 0
0x4f57:	je	0x4f6b


0x4b30:	push	r15
0x4b32:	push	r14
0x4b34:	push	r13
0x4b36:	push	r12
0x4b38:	mov	r12, r9
0x4b3b:	push	rbp
0x4b3c:	push	rbx
0x4b3d:	mov	rbp, rdi
0x4b40:	mov	rbx, r8
0x4b43:	sub	rsp, 0x28
0x4b47:	test	rsi, rsi
0x4b4a:	je	0x4c68


0x4b10:	lea	rcx, [rip + 0x204509]
0x4b17:	mov	rsi, rdi
0x4b1a:	mov	rdx, -1
0x4b21:	xor	edi, edi
0x4b23:	jmp	0x41d0


0x4af0:	lea	rcx, [rip + 0x204529]
0x4af7:	mov	rdx, -1
0x4afe:	jmp	0x41d0


0x4ad0:	lea	rcx, [rip + 0x204549]
0x4ad7:	mov	rdx, rsi
0x4ada:	mov	rsi, rdi
0x4add:	xor	edi, edi
0x4adf:	jmp	0x41d0


0x4ac0:	lea	rcx, [rip + 0x204559]
0x4ac7:	jmp	0x41d0


0x4aa0:	mov	r8, rcx
0x4aa3:	mov	rcx, rdx
0x4aa6:	mov	rdx, rsi
0x4aa9:	mov	rsi, rdi
0x4aac:	xor	edi, edi
0x4aae:	jmp	0x49d0


0x4a80:	mov	rcx, rdx
0x4a83:	mov	r8, -1
0x4a8a:	mov	rdx, rsi
0x4a8d:	mov	rsi, rdi
0x4a90:	xor	edi, edi
0x4a92:	jmp	0x49d0


0x4a70:	mov	r8, -1
0x4a77:	jmp	0x49d0


0x49d0:	sub	rsp, 0x48
0x49d4:	mov	r9, rcx
0x49d7:	mov	rcx, qword ptr [rip + 0x204852]
0x49de:	movdqa	xmm0, xmmword ptr [rip + 0x20481a]
0x49e6:	mov	rax, qword ptr fs:[0x28]
0x49ef:	mov	qword ptr [rsp + 0x38], rax
0x49f4:	xor	eax, eax
0x49f6:	movaps	xmmword ptr [rsp], xmm0
0x49fa:	test	rsi, rsi
0x49fd:	mov	qword ptr [rsp + 0x30], rcx
0x4a02:	mov	dword ptr [rsp], 0xa
0x4a09:	movdqa	xmm0, xmmword ptr [rip + 0x2047ff]
0x4a11:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x4a16:	movdqa	xmm0, xmmword ptr [rip + 0x204802]
0x4a1e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x4a23:	je	0x4a57


0x4940:	sub	rsp, 0x48
0x4944:	mov	rax, rdx
0x4947:	mov	rdx, qword ptr fs:[0x28]
0x4950:	mov	qword ptr [rsp + 0x38], rdx
0x4955:	xor	edx, edx
0x4957:	cmp	esi, 0xa
0x495a:	je	0x49c4


0x4930:	mov	edx, 0x3a
0x4935:	jmp	0x4860


0x4910:	mov	edx, 0x3a
0x4915:	mov	rsi, -1
0x491c:	jmp	0x4860


0x4900:	movsx	edx, sil
0x4904:	mov	rsi, -1
0x490b:	jmp	0x4860


0x4860:	sub	rsp, 0x48
0x4864:	mov	ecx, edx
0x4866:	mov	rax, qword ptr fs:[0x28]
0x486f:	mov	qword ptr [rsp + 0x38], rax
0x4874:	xor	eax, eax
0x4876:	mov	rax, qword ptr [rip + 0x2049b3]
0x487d:	mov	r8, rsp
0x4880:	and	ecx, 0x1f
0x4883:	movdqa	xmm0, xmmword ptr [rip + 0x204975]
0x488b:	mov	qword ptr [rsp + 0x30], rax
0x4890:	mov	eax, edx
0x4892:	movaps	xmmword ptr [rsp], xmm0
0x4896:	shr	al, 5
0x4899:	movzx	eax, al
0x489c:	lea	r9, [r8 + rax*4 + 8]
0x48a1:	movdqa	xmm0, xmmword ptr [rip + 0x204967]
0x48a9:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x48ae:	movdqa	xmm0, xmmword ptr [rip + 0x20496a]
0x48b6:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x48bb:	mov	edx, dword ptr [r9]
0x48be:	mov	eax, edx
0x48c0:	shr	eax, cl
0x48c2:	not	eax
0x48c4:	and	eax, 1
0x48c7:	shl	eax, cl
0x48c9:	mov	rcx, r8
0x48cc:	xor	eax, edx
0x48ce:	mov	rdx, rsi
0x48d1:	mov	rsi, rdi
0x48d4:	mov	dword ptr [r9], eax
0x48d7:	xor	edi, edi
0x48d9:	call	0x41d0


0x4850:	mov	rcx, rdx
0x4853:	mov	rdx, rsi
0x4856:	mov	esi, edi
0x4858:	xor	edi, edi
0x485a:	jmp	0x47b0


0x4840:	mov	rdx, rsi
0x4843:	mov	esi, edi
0x4845:	xor	edi, edi
0x4847:	jmp	0x4720


0x47b0:	sub	rsp, 0x48
0x47b4:	mov	rax, rdx
0x47b7:	mov	rdx, rcx
0x47ba:	mov	rcx, qword ptr fs:[0x28]
0x47c3:	mov	qword ptr [rsp + 0x38], rcx
0x47c8:	xor	ecx, ecx
0x47ca:	cmp	esi, 0xa
0x47cd:	je	0x4830


0x4720:	sub	rsp, 0x48
0x4724:	mov	rax, rdx
0x4727:	mov	rdx, qword ptr fs:[0x28]
0x4730:	mov	qword ptr [rsp + 0x38], rdx
0x4735:	xor	edx, edx
0x4737:	cmp	esi, 0xa
0x473a:	je	0x47a4


0x4700:	lea	rcx, [rip + 0x204af9]
0x4707:	mov	rdx, rsi
0x470a:	mov	rsi, rdi
0x470d:	xor	edi, edi
0x470f:	jmp	0x41d0


0x46e0:	lea	rcx, [rip + 0x204b19]
0x46e7:	mov	rsi, rdi
0x46ea:	mov	rdx, -1
0x46f1:	xor	edi, edi
0x46f3:	jmp	0x41d0


0x46d0:	lea	rcx, [rip + 0x204b29]
0x46d7:	jmp	0x41d0


0x46b0:	lea	rcx, [rip + 0x204b49]
0x46b7:	mov	rdx, -1
0x46be:	jmp	0x41d0


0x4610:	mov	eax, dword ptr [rip + 0x204a42]
0x4616:	push	r12
0x4618:	mov	r12, qword ptr [rip + 0x204a41]
0x461f:	push	rbp
0x4620:	push	rbx
0x4621:	cmp	eax, 1
0x4624:	jle	0x4651


0x4600:	mov	rcx, rdx
0x4603:	xor	edx, edx
0x4605:	jmp	0x4510


0x4510:	push	r15
0x4512:	push	r14
0x4514:	lea	rax, [rip + 0x204ce5]
0x451b:	push	r13
0x451d:	push	r12
0x451f:	mov	r12, rdx
0x4522:	push	rbp
0x4523:	push	rbx
0x4524:	mov	rbx, rcx
0x4527:	mov	r14, rdi
0x452a:	mov	r15, rsi
0x452d:	sub	rsp, 0x38
0x4531:	test	rcx, rcx
0x4534:	cmove	rbx, rax
0x4538:	xor	ebp, ebp
0x453a:	call	0x14f0


0x4490:	push	r15
0x4492:	push	r14
0x4494:	lea	rax, [rip + 0x204d65]
0x449b:	push	r13
0x449d:	push	r12
0x449f:	mov	r13, rdi
0x44a2:	push	rbp
0x44a3:	push	rbx
0x44a4:	mov	rbx, r8
0x44a7:	mov	r14, rsi
0x44aa:	mov	r15, rdx
0x44ad:	sub	rsp, 0x18
0x44b1:	test	r8, r8
0x44b4:	cmove	rbx, rax
0x44b8:	mov	qword ptr [rsp + 8], rcx
0x44bd:	call	0x14f0


0x4460:	lea	rax, [rip + 0x204d99]
0x4467:	test	rdi, rdi
0x446a:	cmove	rdi, rax
0x446e:	test	rsi, rsi
0x4471:	mov	dword ptr [rdi], 0xa
0x4477:	je	0x4487


0x4440:	lea	rax, [rip + 0x204db9]
0x4447:	test	rdi, rdi
0x444a:	cmove	rdi, rax
0x444e:	mov	eax, dword ptr [rdi + 4]
0x4451:	mov	dword ptr [rdi + 4], esi
0x4454:	ret	


0x4400:	lea	rax, [rip + 0x204df9]
0x4407:	test	rdi, rdi
0x440a:	mov	ecx, esi
0x440c:	cmove	rdi, rax
0x4410:	mov	eax, esi
0x4412:	and	ecx, 0x1f
0x4415:	shr	al, 5
0x4418:	movzx	eax, al
0x441b:	lea	rdi, [rdi + rax*4 + 8]
0x4420:	mov	esi, dword ptr [rdi]
0x4422:	mov	eax, esi
0x4424:	shr	eax, cl
0x4426:	xor	edx, eax
0x4428:	and	eax, 1
0x442b:	and	edx, 1
0x442e:	shl	edx, cl
0x4430:	xor	edx, esi
0x4432:	mov	dword ptr [rdi], edx
0x4434:	ret	


0x43e0:	lea	rax, [rip + 0x204e19]
0x43e7:	test	rdi, rdi
0x43ea:	cmove	rdi, rax
0x43ee:	mov	dword ptr [rdi], esi
0x43f0:	ret	


0x43c0:	lea	rax, [rip + 0x204e39]
0x43c7:	test	rdi, rdi
0x43ca:	cmove	rdi, rax
0x43ce:	mov	eax, dword ptr [rdi]
0x43d0:	ret	


0x4380:	push	r12
0x4382:	push	rbp
0x4383:	push	rbx
0x4384:	mov	rbx, rdi
0x4387:	call	0x14f0


0x41d0:	push	r15
0x41d2:	push	r14
0x41d4:	movsxd	r15, edi
0x41d7:	push	r13
0x41d9:	push	r12
0x41db:	mov	r14, rdx
0x41de:	push	rbp
0x41df:	push	rbx
0x41e0:	mov	rbp, rcx
0x41e3:	sub	rsp, 0x28
0x41e7:	mov	qword ptr [rsp + 8], rsi
0x41ec:	call	0x14f0


0x2f90:	push	r15
0x2f92:	push	r14
0x2f94:	mov	r15d, r8d
0x2f97:	push	r13
0x2f99:	push	r12
0x2f9b:	mov	r14, rdi
0x2f9e:	push	rbp
0x2f9f:	push	rbx
0x2fa0:	mov	ebx, r9d
0x2fa3:	mov	r13, rsi
0x2fa6:	mov	rbp, rcx
0x2fa9:	and	ebx, 2
0x2fac:	sub	rsp, 0xb8
0x2fb3:	mov	rax, qword ptr [rsp + 0xf0]
0x2fbb:	mov	qword ptr [rsp + 0x10], rdx
0x2fc0:	mov	dword ptr [rsp + 8], r8d
0x2fc5:	mov	dword ptr [rsp + 0x78], r9d
0x2fca:	mov	qword ptr [rsp + 0x20], rax
0x2fcf:	mov	rax, qword ptr [rsp + 0xf8]
0x2fd7:	mov	qword ptr [rsp + 0x68], rax
0x2fdc:	mov	rax, qword ptr [rsp + 0x100]
0x2fe4:	mov	qword ptr [rsp + 0x60], rax
0x2fe9:	mov	rax, qword ptr fs:[0x28]
0x2ff2:	mov	qword ptr [rsp + 0xa8], rax
0x2ffa:	xor	eax, eax
0x2ffc:	call	0x1580


0x2ea0:	push	rbp
0x2ea1:	push	rbx
0x2ea2:	mov	rbp, rdi
0x2ea5:	mov	ebx, esi
0x2ea7:	sub	rsp, 8
0x2eab:	call	0x5bc0


0x2e00:	test	rdi, rdi
0x2e03:	push	rbx
0x2e04:	je	0x2e7d


0x2dd0:	test	rdi, rdi
0x2dd3:	je	0x2df0


0x2dc0:	jmp	0x1640


0x2d10:	push	rbp
0x2d11:	push	rbx
0x2d12:	sub	rsp, 8
0x2d16:	mov	rdi, qword ptr [rip + 0x20636b]
0x2d1d:	call	0x5ae0


0x2d00:	mov	byte ptr [rip + 0x2063c9], dil
0x2d07:	ret	


0x2cf0:	mov	qword ptr [rip + 0x2063e1], rdi
0x2cf7:	ret	


0x2c30:	push	r14
0x2c32:	push	r13
0x2c34:	mov	r14, rdx
0x2c37:	push	r12
0x2c39:	push	rbp
0x2c3a:	mov	r12, rdi
0x2c3d:	push	rbx
0x2c3e:	mov	r13, rsi
0x2c41:	mov	rbx, rcx
0x2c44:	mov	rbp, r8
0x2c47:	sub	rsp, 0x20
0x2c4b:	mov	rax, qword ptr fs:[0x28]
0x2c54:	mov	qword ptr [rsp + 0x18], rax
0x2c59:	xor	eax, eax
0x2c5b:	mov	rax, rdx
0x2c5e:	shr	rax, 3
0x2c62:	lea	rdi, [rax + rax*4 + 5]
0x2c67:	mov	qword ptr [rsp + 0x10], rdi
0x2c6c:	call	0x16c0


0x2980:	push	r15
0x2982:	push	r14
0x2984:	mov	r11, rdx
0x2987:	push	r13
0x2989:	push	r12
0x298b:	mov	r14, rdi
0x298e:	push	rbp
0x298f:	push	rbx
0x2990:	mov	r12, rsi
0x2993:	sub	rsp, 0x38
0x2997:	mov	r15, qword ptr [r8]
0x299a:	mov	rbx, qword ptr fs:[0x28]
0x29a3:	mov	qword ptr [rsp + 0x28], rbx
0x29a8:	xor	ebx, ebx
0x29aa:	test	rdi, rdi
0x29ad:	mov	qword ptr [rsp + 0x18], rcx
0x29b2:	mov	qword ptr [rsp + 0x10], r8
0x29b7:	mov	qword ptr [rsp + 0x20], r15
0x29bc:	setne	byte ptr [rsp + 7]
0x29c1:	je	0x2bf0


0x2970:	mov	dword ptr [rdi], 0
0x2976:	ret	


0x2950:	lea	rax, [rip + 0x3909]
0x2957:	movzx	edi, dil
0x295b:	movzx	eax, byte ptr [rax + rdi]
0x295f:	not	eax
0x2961:	shr	al, 7
0x2964:	ret	


0x28c0:	push	r14
0x28c2:	push	r13
0x28c4:	mov	r13, rdx
0x28c7:	lea	rdx, [rsi + 4]
0x28cb:	push	r12
0x28cd:	push	rbp
0x28ce:	push	rbx
0x28cf:	movabs	rbx, 0xcccccccccccccccd
0x28d9:	mov	rax, rdx
0x28dc:	mul	rbx
0x28df:	shr	rdx, 2
0x28e3:	lea	rbx, [rdx*8]
0x28eb:	lea	rbp, [rbx + 1]
0x28ef:	cmp	rsi, rbp
0x28f2:	jbe	0x2910


0x26a0:	lea	r8, [rip + 0x3b99]
0x26a7:	jmp	0x27cb


0x24f0:	xor	eax, eax
0x24f2:	cmp	rsi, 7
0x24f6:	jbe	0x2668


0x2110:	push	r13
0x2112:	push	r12
0x2114:	mov	edx, 5
0x2119:	push	rbp
0x211a:	push	rbx
0x211b:	mov	ebp, edi
0x211d:	sub	rsp, 0x88
0x2124:	mov	rbx, qword ptr [rip + 0x206fb5]
0x212b:	mov	rax, qword ptr fs:[0x28]
0x2134:	mov	qword ptr [rsp + 0x78], rax
0x2139:	xor	eax, eax
0x213b:	test	edi, edi
0x213d:	je	0x216d


0x2100:	push	rbp
0x2101:	mov	rbp, rsp
0x2104:	pop	rbp
0x2105:	jmp	0x2070


0x20c0:	cmp	byte ptr [rip + 0x207001], 0
0x20c7:	jne	0x20f8


0x2070:	lea	rdi, [rip + 0x207009]
0x2077:	lea	rsi, [rip + 0x207002]
0x207e:	push	rbp
0x207f:	sub	rsi, rdi
0x2082:	mov	rbp, rsp
0x2085:	sar	rsi, 3
0x2089:	mov	rax, rsi
0x208c:	shr	rax, 0x3f
0x2090:	add	rsi, rax
0x2093:	sar	rsi, 1
0x2096:	je	0x20b0


0x2030:	lea	rdi, [rip + 0x207049]
0x2037:	push	rbp
0x2038:	lea	rax, [rip + 0x207041]
0x203f:	cmp	rax, rdi
0x2042:	mov	rbp, rsp
0x2045:	je	0x2060


0x2000:	xor	ebp, ebp
0x2002:	mov	r9, rdx
0x2005:	pop	rsi
0x2006:	mov	rdx, rsp
0x2009:	and	rsp, 0xfffffffffffffff0
0x200d:	push	rax
0x200e:	push	rsp
0x200f:	lea	r8, [rip + 0x3c5a]
0x2016:	lea	rcx, [rip + 0x3be3]
0x201d:	lea	rdi, [rip - 0x824]
0x2024:	call	qword ptr [rip + 0x206fae]


0x1800:	push	r15
0x1802:	push	r14
0x1804:	push	r13
0x1806:	push	r12
0x1808:	mov	r13d, edi
0x180b:	push	rbp
0x180c:	push	rbx
0x180d:	mov	r12, rsi
0x1810:	mov	ebp, 0x4c
0x1815:	xor	ebx, ebx
0x1817:	sub	rsp, 0x78
0x181b:	mov	rdi, qword ptr [rsi]
0x181e:	mov	rax, qword ptr fs:[0x28]
0x1827:	mov	qword ptr [rsp + 0x68], rax
0x182c:	xor	eax, eax
0x182e:	call	0x2e00


0x14a8:	sub	rsp, 8
0x14ac:	mov	rax, qword ptr [rip + 0x207b2d]
0x14b3:	test	rax, rax
0x14b6:	je	0x14ba


0x1780:	jmp	qword ptr [rip + 0x207812]


0x16e0:	jmp	qword ptr [rip + 0x207862]


0x1720:	jmp	qword ptr [rip + 0x207842]


0x1520:	jmp	qword ptr [rip + 0x207942]


0x15c0:	jmp	qword ptr [rip + 0x2078f2]


0x5a00:	mov	rax, qword ptr [rdi + 0x20]
0x5a04:	cmp	qword ptr [rdi + 0x28], rax
0x5a08:	jne	0x59fa


0x59fa:	jmp	0x1760


0x59ca:	mov	rdi, rbx
0x59cd:	pop	rbx
0x59ce:	jmp	0x16d0


0x59b9:	call	0x16f0


0x16b0:	jmp	qword ptr [rip + 0x20787a]


0x5537:	lea	rax, [rsp + 0x10]
0x553c:	mov	r15, rsi
0x553f:	test	rsi, rsi
0x5542:	mov	rbp, rdi
0x5545:	mov	dword ptr [rsp + 8], edx
0x5549:	mov	r14, rcx
0x554c:	mov	r13, r8
0x554f:	cmove	r15, rax
0x5553:	call	0x14f0


0x5895:	lea	rcx, [rip + 0x1484]
0x589c:	lea	rsi, [rip + 0x135d]
0x58a3:	lea	rdi, [rip + 0x1376]
0x58aa:	mov	edx, 0x54
0x58af:	call	0x1610


0x1570:	jmp	qword ptr [rip + 0x20791a]


0x1590:	jmp	qword ptr [rip + 0x20790a]


0x5349:	call	0x53a0


0x5332:	movzx	edx, dl
0x5335:	test	rdx, rdx
0x5338:	jne	0x5349


0x52e0:	test	rax, rax
0x52e3:	mov	edx, 0x80
0x52e8:	cmove	rax, rdx
0x52ec:	test	rax, rax
0x52ef:	jns	0x52d2


0x52b8:	movabs	rdx, 0x5555555555555553
0x52c2:	cmp	rax, rdx
0x52c5:	ja	0x52f1


0x5260:	test	rcx, rcx
0x5263:	je	0x5288


0x522b:	xor	edx, edx
0x522d:	movabs	rax, 0x5555555555555554
0x5237:	div	r9
0x523a:	cmp	rax, rcx
0x523d:	jbe	0x527b


0x520b:	sub	rsp, 8
0x520f:	call	0x53a0


0x5201:	movzx	eax, al
0x5204:	test	rax, rax
0x5207:	jne	0x520b


0x51b9:	test	rdi, rdi
0x51bc:	jne	0x51d8


0x51be:	mov	rsi, rbx
0x51c1:	call	0x1710


0x518b:	sub	rsp, 8
0x518f:	call	0x53a0


0x5181:	movzx	eax, al
0x5184:	test	rax, rax
0x5187:	jne	0x518b


0x16c0:	jmp	qword ptr [rip + 0x207872]


0x5066:	mov	eax, r10d
0x5069:	mov	r11d, 1
0x506f:	add	r10d, 8
0x5073:	add	rax, rbp
0x5076:	mov	rax, qword ptr [rax]
0x5079:	test	rax, rax
0x507c:	mov	qword ptr [r8 + r9*8], rax
0x5080:	je	0x508c


0x50bc:	mov	rax, rbx
0x50bf:	add	rbx, 8
0x50c3:	jmp	0x5076


0x4f98:	mov	r11d, eax
0x4f9b:	add	r11, qword ptr [r10 + 0x10]
0x4f9f:	add	eax, 8
0x4fa2:	mov	dword ptr [r10], eax
0x4fa5:	mov	rax, qword ptr [r11]
0x4fa8:	test	rax, rax
0x4fab:	mov	qword ptr [r8 + r9*8], rax
0x4faf:	je	0x4fbb


0x4fda:	mov	r11, qword ptr [r10 + 8]
0x4fde:	lea	rax, [r11 + 8]
0x4fe2:	mov	qword ptr [r10 + 8], rax
0x4fe6:	jmp	0x4fa5


0x4f6b:	jmp	0x4b30


0x4c68:	mov	r8, rcx
0x4c6b:	mov	rcx, rdx
0x4c6e:	lea	rdx, [rip + 0x1c1f]
0x4c75:	mov	esi, 1
0x4c7a:	xor	eax, eax
0x4c7c:	call	0x17b0


0x4b50:	mov	r8, rdx
0x4b53:	lea	rdx, [rip + 0x1d2e]
0x4b5a:	mov	r9, rcx
0x4b5d:	xor	eax, eax
0x4b5f:	mov	rcx, rsi
0x4b62:	mov	esi, 1
0x4b67:	call	0x17b0


0x4a57:	call	0x14e0


0x4a25:	test	rdx, rdx
0x4a28:	je	0x4a57


0x49c4:	call	0x14e0


0x495c:	mov	dword ptr [rsp], esi
0x495f:	mov	rcx, rsp
0x4962:	mov	rdx, -1
0x4969:	mov	rsi, rax
0x496c:	mov	qword ptr [rsp + 4], 0
0x4975:	mov	qword ptr [rsp + 0xc], 0x4000000
0x497e:	mov	qword ptr [rsp + 0x14], 0
0x4987:	mov	qword ptr [rsp + 0x1c], 0
0x4990:	mov	qword ptr [rsp + 0x24], 0
0x4999:	mov	qword ptr [rsp + 0x2c], 0
0x49a2:	mov	dword ptr [rsp + 0x34], 0
0x49aa:	call	0x41d0


0x4830:	call	0x14e0


0x47cf:	mov	dword ptr [rsp], esi
0x47d2:	mov	rcx, rsp
0x47d5:	mov	rsi, rax
0x47d8:	mov	qword ptr [rsp + 4], 0
0x47e1:	mov	qword ptr [rsp + 0xc], 0
0x47ea:	mov	qword ptr [rsp + 0x14], 0
0x47f3:	mov	qword ptr [rsp + 0x1c], 0
0x47fc:	mov	qword ptr [rsp + 0x24], 0
0x4805:	mov	qword ptr [rsp + 0x2c], 0
0x480e:	mov	dword ptr [rsp + 0x34], 0
0x4816:	call	0x41d0


0x47a4:	call	0x14e0


0x473c:	mov	dword ptr [rsp], esi
0x473f:	mov	rcx, rsp
0x4742:	mov	rdx, -1
0x4749:	mov	rsi, rax
0x474c:	mov	qword ptr [rsp + 4], 0
0x4755:	mov	qword ptr [rsp + 0xc], 0
0x475e:	mov	qword ptr [rsp + 0x14], 0
0x4767:	mov	qword ptr [rsp + 0x1c], 0
0x4770:	mov	qword ptr [rsp + 0x24], 0
0x4779:	mov	qword ptr [rsp + 0x2c], 0
0x4782:	mov	dword ptr [rsp + 0x34], 0
0x478a:	call	0x41d0


0x4651:	mov	rdi, qword ptr [r12 + 8]
0x4656:	lea	rbx, [rip + 0x204aa3]
0x465d:	cmp	rdi, rbx
0x4660:	je	0x4679


0x4626:	sub	eax, 2
0x4629:	lea	rbx, [r12 + 0x18]
0x462e:	shl	rax, 4
0x4632:	lea	rbp, [r12 + rax + 0x28]
0x4637:	nop	word ptr [rax + rax]
0x4640:	mov	rdi, qword ptr [rbx]
0x4643:	add	rbx, 0x10
0x4647:	call	0x14d0


0x14f0:	jmp	qword ptr [rip + 0x20795a]


0x4487:	sub	rsp, 8
0x448b:	call	0x14e0


0x4479:	test	rdx, rdx
0x447c:	je	0x4487


0x1580:	jmp	qword ptr [rip + 0x207912]


0x2e7d:	mov	rcx, qword ptr [rip + 0x20623c]
0x2e84:	lea	rdi, [rip + 0x34dd]
0x2e8b:	mov	edx, 0x37
0x2e90:	mov	esi, 1
0x2e95:	call	0x17a0


0x2e06:	mov	esi, 0x2f
0x2e0b:	mov	rbx, rdi
0x2e0e:	call	0x15f0


0x2df0:	ret	


0x2dd5:	push	rbx
0x2dd6:	mov	ebx, esi
0x2dd8:	call	0x16b0


0x1640:	jmp	qword ptr [rip + 0x2078b2]


0x2bf0:	mov	r13d, 1
0x2bf6:	mov	byte ptr [rsp + 6], 1
0x2bfb:	jmp	0x29df


0x29c7:	test	rdx, rdx
0x29ca:	mov	edx, dword ptr [rdi]
0x29cc:	setne	byte ptr [rsp + 6]
0x29d1:	movzx	eax, byte ptr [rsp + 6]
0x29d6:	test	edx, edx
0x29d8:	sete	r13b
0x29dc:	and	r13d, eax
0x29df:	lea	rax, [r14 + 4]
0x29e3:	lea	rbp, [rsp + 0x20]
0x29e8:	lea	rbx, [rsp + 0x18]
0x29ed:	mov	qword ptr [rsp + 8], rax
0x29f2:	test	r13b, r13b
0x29f5:	mov	rdx, r15
0x29f8:	jne	0x2acd


0x2910:	mov	r14, rdi
0x2913:	mov	rdi, rbp
0x2916:	mov	r12, rsi
0x2919:	call	0x16c0


0x28f4:	mov	qword ptr [r13], 0
0x28fc:	xor	ebp, ebp
0x28fe:	pop	rbx
0x28ff:	mov	rax, rbp
0x2902:	pop	rbp
0x2903:	pop	r12
0x2905:	pop	r13
0x2907:	pop	r14
0x2909:	ret	


0x27cb:	test	rsi, rsi
0x27ce:	je	0x28b0


0x2668:	ret	


0x24fc:	movzx	r8d, byte ptr [rdi]
0x2500:	lea	rsi, [rip + 0x3d59]
0x2507:	movzx	r8d, byte ptr [rsi + r8]
0x250c:	test	r8b, r8b
0x250f:	js	0x2668


0x216d:	lea	rsi, [rip + 0x3b37]
0x2174:	xor	edi, edi
0x2176:	call	0x1570


0x213f:	lea	rsi, [rip + 0x3ce2]
0x2146:	xor	edi, edi
0x2148:	call	0x1570


0x20c9:	cmp	qword ptr [rip + 0x206f1f], 0
0x20d1:	push	rbp
0x20d2:	mov	rbp, rsp
0x20d5:	je	0x20e3


0x20f8:	ret	


0x20b0:	pop	rbp
0x20b1:	ret	


0x2098:	mov	rax, qword ptr [rip + 0x206f49]
0x209f:	test	rax, rax
0x20a2:	je	0x20b0


0x2060:	pop	rbp
0x2061:	ret	


0x2047:	mov	rax, qword ptr [rip + 0x206f82]
0x204e:	test	rax, rax
0x2051:	je	0x2060




0x14ba:	add	rsp, 8
0x14be:	ret	


0x14b8:	call	rax












0x5a0a:	cmp	qword ptr [rdi + 0x48], 0
0x5a0f:	jne	0x59fa


0x1760:	jmp	qword ptr [rip + 0x207822]


0x16d0:	jmp	qword ptr [rip + 0x20786a]


0x16f0:	jmp	qword ptr [rip + 0x20785a]




0x1610:	jmp	qword ptr [rip + 0x2078ca]






0x533a:	call	0x1680


0x52f1:	sub	rsp, 8
0x52f5:	call	0x53a0


0x52d2:	mov	qword ptr [rsi], rax
0x52d5:	mov	rsi, rax
0x52d8:	jmp	0x51b0


0x52c7:	mov	rdx, rax
0x52ca:	shr	rdx, 1
0x52cd:	lea	rax, [rdx + rax + 1]
0x52d2:	mov	qword ptr [rsi], rax
0x52d5:	mov	rsi, rax
0x52d8:	jmp	0x51b0


0x5288:	xor	edx, edx
0x528a:	mov	eax, 0x80
0x528f:	xor	r8d, r8d
0x5292:	div	r9
0x5295:	test	rax, rax
0x5298:	sete	r8b
0x529c:	lea	rcx, [r8 + rax]
0x52a0:	jmp	0x5265


0x5265:	mov	rax, rcx
0x5268:	mul	r9
0x526b:	seto	dl
0x526e:	test	rax, rax
0x5271:	movzx	edx, dl
0x5274:	js	0x527b


0x527b:	sub	rsp, 8
0x527f:	call	0x53a0


0x523f:	mov	rax, rcx
0x5242:	shr	rax, 1
0x5245:	lea	rcx, [rax + rcx + 1]
0x524a:	mov	qword ptr [rsi], rcx
0x524d:	imul	rcx, r9
0x5251:	mov	rsi, rcx
0x5254:	jmp	0x51b0


0x5209:	jmp	0x51b0


0x51d8:	call	0x14d0


0x1710:	jmp	qword ptr [rip + 0x20784a]


0x5189:	jmp	0x5150




0x508c:	test	r11b, r11b
0x508f:	jne	0x50b5


0x5082:	add	r9, 1
0x5086:	cmp	r9, 0xa
0x508a:	jne	0x5060


0x5076:	mov	rax, qword ptr [rax]
0x5079:	test	rax, rax
0x507c:	mov	qword ptr [r8 + r9*8], rax
0x5080:	je	0x508c


0x4fbb:	call	0x4b30


0x4fb1:	add	r9, 1
0x4fb5:	cmp	r9, 0xa
0x4fb9:	jne	0x4f90


0x4fa5:	mov	rax, qword ptr [r11]
0x4fa8:	test	rax, rax
0x4fab:	mov	qword ptr [r8 + r9*8], rax
0x4faf:	je	0x4fbb


0x4f60:	add	r9, 1
0x4f64:	cmp	qword ptr [r8 + r9*8], 0
0x4f69:	jne	0x4f60


0x17b0:	jmp	qword ptr [rip + 0x2077fa]


0x14e0:	jmp	qword ptr [rip + 0x207962]


0x4a2a:	mov	qword ptr [rsp + 0x28], rsi
0x4a2f:	mov	qword ptr [rsp + 0x30], rdx
0x4a34:	mov	rcx, rsp
0x4a37:	mov	rdx, r8
0x4a3a:	mov	rsi, r9
0x4a3d:	call	0x41d0


0x4679:	lea	rbx, [rip + 0x2049f0]
0x4680:	cmp	r12, rbx
0x4683:	je	0x4694


0x4662:	call	0x14d0


0x14d0:	jmp	qword ptr [rip + 0x20796a]




0x447e:	mov	qword ptr [rdi + 0x28], rsi
0x4482:	mov	qword ptr [rdi + 0x30], rdx
0x4486:	ret	




0x17a0:	jmp	qword ptr [rip + 0x207802]


0x15f0:	jmp	qword ptr [rip + 0x2078da]




0x29df:	lea	rax, [r14 + 4]
0x29e3:	lea	rbp, [rsp + 0x20]
0x29e8:	lea	rbx, [rsp + 0x18]
0x29ed:	mov	qword ptr [rsp + 8], rax
0x29f2:	test	r13b, r13b
0x29f5:	mov	rdx, r15
0x29f8:	jne	0x2acd


0x29fe:	test	r11, r11
0x2a01:	sete	al
0x2a04:	and	al, byte ptr [rsp + 6]
0x2a08:	jne	0x2a90


0x2acd:	mov	rcx, rbp
0x2ad0:	mov	rdx, rbx
0x2ad3:	mov	rsi, r11
0x2ad6:	mov	rdi, r12
0x2ad9:	call	0x24f0


0x28b0:	test	rcx, rcx
0x28b3:	je	0x2875


0x27d4:	test	rcx, rcx
0x27d7:	je	0x28b0


0x2515:	movzx	r9d, byte ptr [rdi + 1]
0x251a:	movzx	r9d, byte ptr [rsi + r9]
0x251f:	test	r9b, r9b
0x2522:	js	0x2668


0x20e3:	call	0x2030


0x20d7:	mov	rdi, qword ptr [rip + 0x206f2a]
0x20de:	call	0x17f0


0x20a4:	pop	rbp
0x20a5:	jmp	rax


0x2053:	pop	rbp
0x2054:	jmp	rax


0x5a11:	push	r12
0x5a13:	push	rbp
0x5a14:	mov	r12d, edx
0x5a17:	push	rbx
0x5a18:	mov	rbp, rsi
0x5a1b:	mov	rbx, rdi
0x5a1e:	call	0x16b0










0x1680:	jmp	qword ptr [rip + 0x207892]


0x5276:	test	rdx, rdx
0x5279:	je	0x524a




0x5091:	call	0x4b30


0x50b5:	mov	dword ptr [rsp + 8], r10d
0x50ba:	jmp	0x5091


0x5060:	cmp	r10d, 0x2f
0x5064:	ja	0x50bc


0x4f90:	mov	eax, dword ptr [r10]
0x4f93:	cmp	eax, 0x2f
0x4f96:	ja	0x4fda






0x4694:	pop	rbx
0x4695:	mov	dword ptr [rip + 0x2049b9], 1
0x469f:	pop	rbp
0x46a0:	pop	r12
0x46a2:	ret	


0x4685:	mov	rdi, r12
0x4688:	call	0x14d0








0x2a0e:	test	r11, r11
0x2a11:	je	0x2af0


0x2a90:	mov	rbx, qword ptr [rsp + 0x10]
0x2a95:	sub	qword ptr [rbx], rdx
0x2a98:	mov	rbx, qword ptr [rsp + 0x28]
0x2a9d:	xor	rbx, qword ptr fs:[0x28]
0x2aa6:	jne	0x2c29


0x2875:	ret	


0x28b5:	mov	byte ptr [rdx], 0
0x28b8:	ret	


0x27dd:	movzx	eax, byte ptr [rdi]
0x27e0:	mov	r9d, eax
0x27e3:	shr	r9b, 3
0x27e7:	and	r9d, 0x1f
0x27eb:	cmp	rcx, 1
0x27ef:	movzx	r9d, byte ptr [r8 + r9]
0x27f4:	mov	byte ptr [rdx], r9b
0x27f7:	je	0x2875


0x2528:	cmp	qword ptr [rcx], 0
0x252c:	mov	rax, qword ptr [rdx]
0x252f:	je	0x254b


0x17f0:	jmp	qword ptr [rip + 0x2077fa]




0x524a:	mov	qword ptr [rsi], rcx
0x524d:	imul	rcx, r9
0x5251:	mov	rsi, rcx
0x5254:	jmp	0x51b0


0x2af0:	sub	rdx, r15
0x2af3:	add	qword ptr [rsp + 0x18], rdx
0x2af8:	test	r14, r14
0x2afb:	mov	qword ptr [rsp + 0x20], r15
0x2b00:	je	0x2c00


0x2a17:	cmp	byte ptr [r12], 0xa
0x2a1c:	je	0x2bc0


0x2aac:	add	rsp, 0x38
0x2ab0:	pop	rbx
0x2ab1:	pop	rbp
0x2ab2:	pop	r12
0x2ab4:	pop	r13
0x2ab6:	pop	r14
0x2ab8:	pop	r15
0x2aba:	ret	


0x2c29:	call	0x15a0


0x27f9:	shl	eax, 2
0x27fc:	cmp	rsi, 1
0x2800:	jne	0x26b0


0x254b:	movzx	r8d, byte ptr [rdi + 2]
0x2550:	cmp	r8b, 0x3d
0x2554:	je	0x2670


0x2531:	mov	r10d, r9d
0x2534:	shl	r8d, 3
0x2538:	add	rax, 1
0x253c:	sar	r10b, 2
0x2540:	or	r8d, r10d
0x2543:	mov	byte ptr [rax - 1], r8b
0x2547:	sub	qword ptr [rcx], 1
0x254b:	movzx	r8d, byte ptr [rdi + 2]
0x2550:	cmp	r8b, 0x3d
0x2554:	je	0x2670


0x2c00:	mov	rdx, r15
0x2c03:	mov	eax, 1
0x2c08:	jmp	0x2a90


0x2b06:	mov	r15, r12
0x2b09:	mov	eax, dword ptr [r14]
0x2b0c:	cmp	eax, 8
0x2b0f:	je	0x2b70


0x2bc0:	test	r14, r14
0x2bc3:	je	0x2bd8


0x2a22:	sub	rdx, r15
0x2a25:	add	qword ptr [rsp + 0x18], rdx
0x2a2a:	test	r14, r14
0x2a2d:	mov	qword ptr [rsp + 0x20], r15
0x2a32:	lea	r15, [r12 + r11]
0x2a36:	jne	0x2b09


0x15a0:	jmp	qword ptr [rip + 0x207902]


0x2806:	and	eax, 0x1c
0x2809:	cmp	rcx, 2
0x280d:	movzx	eax, byte ptr [r8 + rax]
0x2812:	mov	byte ptr [rdx + 1], al
0x2815:	je	0x2875


0x26b0:	movzx	r9d, byte ptr [rdi + 1]
0x26b5:	mov	r10d, r9d
0x26b8:	shr	r10b, 6
0x26bc:	add	eax, r10d
0x26bf:	and	eax, 0x1f
0x26c2:	cmp	rcx, 2
0x26c6:	movzx	eax, byte ptr [r8 + rax]
0x26cb:	mov	byte ptr [rdx + 1], al
0x26ce:	je	0x2875


0x2670:	cmp	byte ptr [rdi + 3], 0x3d
0x2674:	je	0x2680


0x255a:	movzx	r8d, byte ptr [rsi + r8]
0x255f:	test	r8b, r8b
0x2562:	js	0x2676


0x2b70:	mov	dword ptr [r14], 0
0x2b77:	cmp	r11, 7
0x2b7b:	jle	0x2b94


0x2b11:	test	eax, eax
0x2b13:	je	0x2b77


0x2bd8:	sub	rdx, r15
0x2bdb:	mov	qword ptr [rsp + 0x20], r15
0x2be0:	add	qword ptr [rsp + 0x18], rdx
0x2be5:	lea	r15, [r12 + r11]
0x2be9:	jmp	0x2a3c


0x2bc5:	add	r12, 1
0x2bc9:	sub	r11, 1
0x2bcd:	mov	r15, rdx
0x2bd0:	jmp	0x29f2


0x2a3c:	mov	rdi, r12
0x2a3f:	cmp	r11, 7
0x2a43:	ja	0x2a57


0x2b09:	mov	eax, dword ptr [r14]
0x2b0c:	cmp	eax, 8
0x2b0f:	je	0x2b70




0x2817:	cmp	rcx, 3
0x281b:	mov	byte ptr [rdx + 2], 0x3d
0x281f:	je	0x2875


0x26d4:	mov	eax, r9d
0x26d7:	shr	al, 1
0x26d9:	and	eax, 0x1f
0x26dc:	cmp	rcx, 3
0x26e0:	movzx	eax, byte ptr [r8 + rax]
0x26e5:	mov	byte ptr [rdx + 2], al
0x26e8:	je	0x2875


0x2680:	cmp	byte ptr [rdi + 4], 0x3d
0x2684:	jne	0x2676


0x2676:	mov	qword ptr [rdx], rax
0x2679:	xor	eax, eax
0x267b:	ret	


0x2568:	movzx	r10d, byte ptr [rdi + 3]
0x256d:	movzx	r10d, byte ptr [rsi + r10]
0x2572:	test	r10b, r10b
0x2575:	js	0x2676


0x2b94:	mov	eax, dword ptr [r14]
0x2b97:	jmp	0x2b15


0x2b7d:	mov	edx, 8
0x2b82:	mov	esi, 0xa
0x2b87:	mov	rdi, r12
0x2b8a:	call	0x1650


0x2b77:	cmp	r11, 7
0x2b7b:	jle	0x2b94


0x2b15:	cmp	r12, r15
0x2b18:	jae	0x2b46


0x29f2:	test	r13b, r13b
0x29f5:	mov	rdx, r15
0x29f8:	jne	0x2acd


0x2a45:	cmp	byte ptr [rsp + 7], 0
0x2a4a:	je	0x2a57


0x2a57:	mov	rcx, rbp
0x2a5a:	mov	rdx, rbx
0x2a5d:	mov	rsi, r11
0x2a60:	call	0x24f0


0x2821:	cmp	rcx, 4
0x2825:	mov	byte ptr [rdx + 3], 0x3d
0x2829:	je	0x2875


0x26ee:	shl	r9d, 4
0x26f2:	cmp	rsi, 2
0x26f6:	je	0x2860


0x2686:	cmp	byte ptr [rdi + 5], 0x3d
0x268a:	jne	0x2676


0x257b:	cmp	qword ptr [rcx], 0
0x257f:	je	0x25a1


0x1650:	jmp	qword ptr [rip + 0x2078aa]


0x2b46:	mov	r11d, eax
0x2b49:	mov	rdi, qword ptr [rsp + 8]
0x2b4e:	test	r11, r11
0x2b51:	jne	0x2a3f


0x2a4c:	cmp	byte ptr [rsp + 6], 0
0x2a51:	jne	0x2b57


0x282b:	cmp	rcx, 5
0x282f:	mov	byte ptr [rdx + 4], 0x3d
0x2833:	je	0x2875


0x2860:	and	r9d, 0x1f
0x2864:	cmp	rcx, 4
0x2868:	movsxd	r9, r9d
0x286b:	movzx	eax, byte ptr [r8 + r9]
0x2870:	mov	byte ptr [rdx + 3], al
0x2873:	jne	0x282b


0x26fc:	movzx	eax, byte ptr [rdi + 2]
0x2700:	mov	r10d, eax
0x2703:	shr	r10b, 4
0x2707:	add	r9d, r10d
0x270a:	and	r9d, 0x1f
0x270e:	cmp	rcx, 4
0x2712:	movzx	r9d, byte ptr [r8 + r9]
0x2717:	mov	byte ptr [rdx + 3], r9b
0x271b:	je	0x2875


0x268c:	cmp	byte ptr [rdi + 6], 0x3d
0x2690:	jne	0x2676


0x25a1:	movzx	r8d, byte ptr [rdi + 4]
0x25a6:	cmp	r8b, 0x3d
0x25aa:	je	0x2686


0x2581:	add	r8d, r8d
0x2584:	shl	r9d, 6
0x2588:	add	rax, 1
0x258c:	or	r9d, r8d
0x258f:	mov	r8d, r10d
0x2592:	sar	r8b, 4
0x2596:	or	r9d, r8d
0x2599:	mov	byte ptr [rax - 1], r9b
0x259d:	sub	qword ptr [rcx], 1
0x25a1:	movzx	r8d, byte ptr [rdi + 4]
0x25a6:	cmp	r8b, 0x3d
0x25aa:	je	0x2686




0x2b41:	cmp	r12, r15
0x2b44:	jne	0x2b20


0x2b2f:	lea	ecx, [rax + 1]
0x2b32:	cmp	ecx, 8
0x2b35:	mov	dword ptr [r14], ecx
0x2b38:	mov	byte ptr [r14 + rax + 4], dl
0x2b3d:	je	0x2ba0


0x2b57:	mov	rdx, qword ptr [rsp + 0x20]
0x2b5c:	mov	eax, 1
0x2b61:	jmp	0x2a90


0x2a3f:	cmp	r11, 7
0x2a43:	ja	0x2a57


0x2835:	cmp	rcx, 6
0x2839:	mov	byte ptr [rdx + 5], 0x3d
0x283d:	je	0x2875


0x2721:	cmp	rsi, 3
0x2725:	lea	r9d, [rax + rax]
0x2729:	je	0x2880


0x2692:	cmp	byte ptr [rdi + 7], 0x3d
0x2696:	jne	0x2676


0x25b0:	movzx	r8d, byte ptr [rsi + r8]
0x25b5:	test	r8b, r8b
0x25b8:	js	0x2676


0x2b20:	add	r12, 1
0x2b24:	movzx	edx, byte ptr [r12 - 1]
0x2b2a:	cmp	dl, 0xa
0x2b2d:	je	0x2b41


0x2ba0:	mov	eax, 8
0x2ba5:	mov	rdi, qword ptr [rsp + 8]
0x2baa:	mov	r11d, eax
0x2bad:	test	r11, r11
0x2bb0:	jne	0x2a3f


0x2b3f:	mov	eax, ecx
0x2b41:	cmp	r12, r15
0x2b44:	jne	0x2b20


0x283f:	cmp	rcx, 7
0x2843:	mov	byte ptr [rdx + 6], 0x3d
0x2847:	je	0x2875


0x2880:	and	r9d, 0x1e
0x2884:	cmp	rcx, 5
0x2888:	movzx	eax, byte ptr [r8 + r9]
0x288d:	mov	byte ptr [rdx + 4], al
0x2890:	jne	0x2835


0x272f:	movzx	eax, byte ptr [rdi + 3]
0x2733:	mov	r10d, eax
0x2736:	shr	r10b, 7
0x273a:	add	r9d, r10d
0x273d:	and	r9d, 0x1f
0x2741:	cmp	rcx, 5
0x2745:	movzx	r9d, byte ptr [r8 + r9]
0x274a:	mov	byte ptr [rdx + 4], r9b
0x274e:	je	0x2875


0x2698:	jmp	0x2660


0x25be:	cmp	qword ptr [rcx], 0
0x25c2:	je	0x25dd


0x2bb6:	jmp	0x2b57


0x2849:	cmp	rcx, 8
0x284d:	mov	byte ptr [rdx + 7], 0x3d
0x2851:	je	0x2875


0x2892:	ret	


0x2754:	mov	r9d, eax
0x2757:	shr	r9b, 2
0x275b:	and	r9d, 0x1f
0x275f:	cmp	rcx, 6
0x2763:	movzx	r9d, byte ptr [r8 + r9]
0x2768:	mov	byte ptr [rdx + 5], r9b
0x276c:	je	0x2875


0x2660:	mov	qword ptr [rdx], rax
0x2663:	mov	eax, 1
0x2668:	ret	


0x25dd:	movzx	r9d, byte ptr [rdi + 5]
0x25e2:	cmp	r9b, 0x3d
0x25e6:	je	0x268c


0x25c4:	mov	r9d, r8d
0x25c7:	shl	r10d, 4
0x25cb:	add	rax, 1
0x25cf:	sar	r9b, 1
0x25d2:	or	r10d, r9d
0x25d5:	mov	byte ptr [rax - 1], r10b
0x25d9:	sub	qword ptr [rcx], 1
0x25dd:	movzx	r9d, byte ptr [rdi + 5]
0x25e2:	cmp	r9b, 0x3d
0x25e6:	je	0x268c


0x2853:	xor	esi, esi
0x2855:	jmp	0x27c3


0x2772:	shl	eax, 3
0x2775:	cmp	rsi, 4
0x2779:	je	0x2898


0x25ec:	movzx	r9d, byte ptr [rsi + r9]
0x25f1:	test	r9b, r9b
0x25f4:	js	0x2676


0x27c3:	add	rdx, 8
0x27c7:	sub	rcx, 8
0x27cb:	test	rsi, rsi
0x27ce:	je	0x28b0


0x2898:	and	eax, 0x18
0x289b:	cmp	rcx, 7
0x289f:	movzx	eax, byte ptr [r8 + rax]
0x28a4:	mov	byte ptr [rdx + 6], al
0x28a7:	je	0x2875


0x277f:	movzx	r9d, byte ptr [rdi + 4]
0x2784:	mov	r10d, r9d
0x2787:	shr	r10b, 5
0x278b:	add	eax, r10d
0x278e:	and	eax, 0x1f
0x2791:	cmp	rcx, 7
0x2795:	movzx	eax, byte ptr [r8 + rax]
0x279a:	mov	byte ptr [rdx + 6], al
0x279d:	je	0x2875


0x25fa:	movzx	r10d, byte ptr [rdi + 6]
0x25ff:	movzx	r10d, byte ptr [rsi + r10]
0x2604:	test	r10b, r10b
0x2607:	js	0x2676


0x28a9:	jmp	0x2849


0x27a3:	and	r9d, 0x1f
0x27a7:	cmp	rcx, 8
0x27ab:	movzx	eax, byte ptr [r8 + r9]
0x27b0:	mov	byte ptr [rdx + 7], al
0x27b3:	je	0x2875


0x2609:	cmp	qword ptr [rcx], 0
0x260d:	je	0x2630


0x27b9:	sub	rsi, 5
0x27bd:	je	0x27c3


0x2630:	movzx	edi, byte ptr [rdi + 7]
0x2634:	cmp	dil, 0x3d
0x2638:	je	0x2660


0x260f:	shl	r9d, 2
0x2613:	shl	r8d, 7
0x2617:	add	rax, 1
0x261b:	or	r8d, r9d
0x261e:	mov	r9d, r10d
0x2621:	sar	r9b, 3
0x2625:	or	r8d, r9d
0x2628:	mov	byte ptr [rax - 1], r8b
0x262c:	sub	qword ptr [rcx], 1
0x2630:	movzx	edi, byte ptr [rdi + 7]
0x2634:	cmp	dil, 0x3d
0x2638:	je	0x2660


0x27bf:	add	rdi, 5
0x27c3:	add	rdx, 8
0x27c7:	sub	rcx, 8
0x27cb:	test	rsi, rsi
0x27ce:	je	0x28b0


0x263a:	movzx	esi, byte ptr [rsi + rdi]
0x263e:	test	sil, sil
0x2641:	js	0x2676


0x2643:	cmp	qword ptr [rcx], 0
0x2647:	je	0x2660


0x2649:	shl	r10d, 5
0x264d:	add	rax, 1
0x2651:	or	r10d, esi
0x2654:	mov	byte ptr [rax - 1], r10b
0x2658:	sub	qword ptr [rcx], 1
0x265c:	nop	dword ptr [rax]
0x2660:	mov	qword ptr [rdx], rax
0x2663:	mov	eax, 1
0x2668:	ret	


0x20e8:	mov	byte ptr [rip + 0x206fd9], 1
0x20ef:	pop	rbp
0x20f0:	ret	


0x2a65:	test	al, al
0x2a67:	je	0x2c1f


0x2c1f:	mov	rdx, qword ptr [rsp + 0x20]
0x2c24:	jmp	0x2a90


0x2a6d:	mov	r11, r15
0x2a70:	mov	r15, qword ptr [rsp + 0x20]
0x2a75:	sub	r11, r12
0x2a78:	test	r13b, r13b
0x2a7b:	mov	rdx, r15
0x2a7e:	jne	0x2acd


0x2a80:	test	r11, r11
0x2a83:	sete	al
0x2a86:	and	al, byte ptr [rsp + 6]
0x2a8a:	je	0x2a0e


0x2ade:	test	al, al
0x2ae0:	jne	0x2ac0


0x2ae2:	mov	rdx, qword ptr [rsp + 0x20]
0x2ae7:	jmp	0x29fe


0x2ac0:	mov	r15, qword ptr [rsp + 0x20]
0x2ac5:	add	r12, 8
0x2ac9:	sub	r11, 8
0x2acd:	mov	rcx, rbp
0x2ad0:	mov	rdx, rbx
0x2ad3:	mov	rsi, r11
0x2ad6:	mov	rdi, r12
0x2ad9:	call	0x24f0


0x5c31:	test	rbp, rbp
0x5c34:	je	0x5c56


0x5c56:	add	rsp, 8
0x5c5a:	pop	rbx
0x5c5b:	pop	rbp
0x5c5c:	pop	r12
0x5c5e:	pop	r13
0x5c60:	pop	r14
0x5c62:	pop	r15
0x5c64:	ret	


0x5c36:	xor	ebx, ebx
0x5c38:	nop	dword ptr [rax + rax]
0x5c40:	mov	rdx, r15
0x5c43:	mov	rsi, r14
0x5c46:	mov	edi, r13d
0x5c49:	call	qword ptr [r12 + rbx*8]


0x2b8f:	test	rax, rax
0x2b92:	je	0x2c0d


0x2c0d:	mov	rdi, r12
0x2c10:	mov	r11d, 8
0x2c16:	add	r12, 8
0x2c1a:	jmp	0x2a57


0x533f:	test	rax, rax
0x5342:	je	0x5349


0x5344:	add	rsp, 8
0x5348:	ret	


0x2e13:	test	rax, rax
0x2e16:	je	0x2e6d


0x2e6d:	mov	qword ptr [rip + 0x20626c], rbx
0x2e74:	mov	qword ptr [rip + 0x20622d], rbx
0x2e7b:	pop	rbx
0x2e7c:	ret	


0x2e18:	lea	r8, [rax + 1]
0x2e1c:	mov	rdx, r8
0x2e1f:	sub	rdx, rbx
0x2e22:	cmp	rdx, 6
0x2e26:	jle	0x2e6d


0x2e28:	lea	rsi, [rax - 6]
0x2e2c:	lea	rdi, [rip + 0x356d]
0x2e33:	mov	ecx, 7
0x2e38:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2e38:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2e3a:	seta	dl
0x2e3d:	sbb	dl, 0
0x2e40:	test	dl, dl
0x2e42:	jne	0x2e6d


0x2e44:	lea	rdi, [rip + 0x355d]
0x2e4b:	mov	ecx, 3
0x2e50:	mov	rsi, r8
0x2e53:	mov	rbx, r8
0x2e56:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2e56:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2e58:	seta	dl
0x2e5b:	sbb	dl, 0
0x2e5e:	test	dl, dl
0x2e60:	jne	0x2e6d


0x2e62:	lea	rbx, [rax + 4]
0x2e66:	mov	qword ptr [rip + 0x206213], rbx
0x2e6d:	mov	qword ptr [rip + 0x20626c], rbx
0x2e74:	mov	qword ptr [rip + 0x20622d], rbx
0x2e7b:	pop	rbx
0x2e7c:	ret	


0x2e9a:	call	0x14e0


0x468d:	mov	qword ptr [rip + 0x2049cc], rbx
0x4694:	pop	rbx
0x4695:	mov	dword ptr [rip + 0x2049b9], 1
0x469f:	pop	rbp
0x46a0:	pop	r12
0x46a2:	ret	


0x4667:	mov	qword ptr [rip + 0x2049fe], 0x100
0x4672:	mov	qword ptr [rip + 0x2049ff], rbx
0x4679:	lea	rbx, [rip + 0x2049f0]
0x4680:	cmp	r12, rbx
0x4683:	je	0x4694


0x51dd:	xor	eax, eax
0x51df:	pop	rbx
0x51e0:	ret	


0x464c:	cmp	rbx, rbp
0x464f:	jne	0x4640


0x4640:	mov	rdi, qword ptr [rbx]
0x4643:	add	rbx, 0x10
0x4647:	call	0x14d0


0x4b6c:	lea	rsi, [rip + 0x1d28]
0x4b73:	xor	edi, edi
0x4b75:	mov	edx, 5
0x4b7a:	call	0x1570


0x4c81:	jmp	0x4b6c


0x51c6:	test	rax, rax
0x51c9:	jne	0x51d0


0x51cb:	test	rbx, rbx
0x51ce:	jne	0x51e1


0x51d0:	pop	rbx
0x51d1:	ret	


0x51e1:	call	0x53a0


0x59be:	test	eax, eax
0x59c0:	je	0x59ca


0x59c2:	test	dword ptr [rbx], 0x100
0x59c8:	jne	0x59d8


0x59d8:	mov	rdi, rbx
0x59db:	mov	edx, 1
0x59e0:	xor	esi, esi
0x59e2:	call	0x59f0


0x1833:	lea	rsi, [rip + 0x50a7]
0x183a:	mov	edi, 6
0x183f:	call	0x1720


0x3001:	cmp	r15d, 0xa
0x3005:	mov	qword ptr [rsp + 0x58], rax
0x300a:	ja	0x41bf


0x3010:	lea	rcx, [rip + 0x3409]
0x3017:	mov	edx, r15d
0x301a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x301e:	add	rax, rcx
0x3021:	jmp	rax


0x41bf:	call	0x14e0


0x5558:	mov	dword ptr [rax], 0
0x555e:	mov	r12, rax
0x5561:	movzx	ebx, byte ptr [rbp]
0x5565:	call	0x17e0


0x17e0:	jmp	qword ptr [rip + 0x2077e2]




0x41f1:	mov	r13, rax
0x41f4:	mov	eax, dword ptr [rax]
0x41f6:	test	r15d, r15d
0x41f9:	mov	rbx, qword ptr [rip + 0x204e60]
0x4200:	mov	dword ptr [rsp + 0x18], eax
0x4204:	js	0x4371


0x4371:	call	0x14e0


0x420a:	cmp	dword ptr [rip + 0x204e47], r15d
0x4211:	jg	0x4275


0x4213:	cmp	r15d, 0x7fffffff
0x421a:	je	0x4376


0x4275:	mov	eax, dword ptr [rbp + 4]
0x4278:	shl	r15, 4
0x427c:	sub	rsp, 8
0x4280:	add	rbx, r15
0x4283:	lea	r15, [rbp + 8]
0x4287:	mov	r8d, dword ptr [rbp]
0x428b:	mov	r11, qword ptr [rbx]
0x428e:	mov	r12, qword ptr [rbx + 8]
0x4292:	mov	rcx, r14
0x4295:	or	eax, 1
0x4298:	mov	dword ptr [rsp + 0x24], eax
0x429c:	push	qword ptr [rbp + 0x30]
0x429f:	mov	r9d, eax
0x42a2:	push	qword ptr [rbp + 0x28]
0x42a5:	push	r15
0x42a7:	mov	rsi, r11
0x42aa:	mov	rdx, qword ptr [rsp + 0x28]
0x42af:	mov	rdi, r12
0x42b2:	mov	qword ptr [rsp + 0x30], r11
0x42b7:	call	0x2f90


0x4376:	call	0x53a0


0x4220:	lea	r12d, [r15 + 1]
0x4224:	lea	rax, [rip + 0x204e45]
0x422b:	movsxd	rsi, r12d
0x422e:	shl	rsi, 4
0x4232:	cmp	rbx, rax
0x4235:	je	0x4350


0x4350:	xor	edi, edi
0x4352:	call	0x51b0


0x423b:	mov	rdi, rbx
0x423e:	call	0x51b0


0x4243:	mov	rbx, rax
0x4246:	mov	qword ptr [rip + 0x204e13], rax
0x424d:	movsxd	rdi, dword ptr [rip + 0x204e04]
0x4254:	mov	edx, r12d
0x4257:	xor	esi, esi
0x4259:	sub	edx, edi
0x425b:	shl	rdi, 4
0x425f:	movsxd	rdx, edx
0x4262:	add	rdi, rbx
0x4265:	shl	rdx, 4
0x4269:	call	0x1630


0x1630:	jmp	qword ptr [rip + 0x2078ba]




0x4357:	movdqa	xmm0, xmmword ptr [rip + 0x204d11]
0x435f:	mov	rbx, rax
0x4362:	mov	qword ptr [rip + 0x204cf7], rax
0x4369:	movups	xmmword ptr [rax], xmm0
0x436c:	jmp	0x424d


0x424d:	movsxd	rdi, dword ptr [rip + 0x204e04]
0x4254:	mov	edx, r12d
0x4257:	xor	esi, esi
0x4259:	sub	edx, edi
0x425b:	shl	rdi, 4
0x425f:	movsxd	rdx, edx
0x4262:	add	rdi, rbx
0x4265:	shl	rdx, 4
0x4269:	call	0x1630


0x438c:	mov	r12d, dword ptr [rax]
0x438f:	mov	rbp, rax
0x4392:	lea	rax, [rip + 0x204e67]
0x4399:	test	rbx, rbx
0x439c:	mov	esi, 0x38
0x43a1:	cmove	rbx, rax
0x43a5:	mov	rdi, rbx
0x43a8:	call	0x5350


0x44c2:	mov	r12d, dword ptr [rax]
0x44c5:	mov	rbp, rax
0x44c8:	lea	rax, [rbx + 8]
0x44cc:	sub	rsp, 8
0x44d0:	mov	r9d, dword ptr [rbx + 4]
0x44d4:	push	qword ptr [rbx + 0x30]
0x44d7:	mov	r8d, dword ptr [rbx]
0x44da:	push	qword ptr [rbx + 0x28]
0x44dd:	mov	rdx, r15
0x44e0:	push	rax
0x44e1:	mov	rcx, qword ptr [rsp + 0x28]
0x44e6:	mov	rsi, r14
0x44e9:	mov	rdi, r13
0x44ec:	call	0x2f90


0x453f:	test	r12, r12
0x4542:	mov	r13, rax
0x4545:	mov	eax, dword ptr [rax]
0x4547:	sete	bpl
0x454b:	or	ebp, dword ptr [rbx + 4]
0x454e:	lea	r10, [rbx + 8]
0x4552:	sub	rsp, 8
0x4556:	mov	r8d, dword ptr [rbx]
0x4559:	mov	rcx, r15
0x455c:	mov	dword ptr [rsp + 0x14], eax
0x4560:	push	qword ptr [rbx + 0x30]
0x4563:	mov	rdx, r14
0x4566:	push	qword ptr [rbx + 0x28]
0x4569:	push	r10
0x456b:	xor	esi, esi
0x456d:	mov	r9d, ebp
0x4570:	xor	edi, edi
0x4572:	mov	qword ptr [rsp + 0x40], r10
0x4577:	call	0x2f90


0x291e:	test	rax, rax
0x2921:	mov	qword ptr [r13], rax
0x2925:	je	0x28fe


0x28fe:	pop	rbx
0x28ff:	mov	rax, rbp
0x2902:	pop	rbp
0x2903:	pop	r12
0x2905:	pop	r13
0x2907:	pop	r14
0x2909:	ret	


0x2927:	mov	rcx, rbp
0x292a:	mov	rdx, rax
0x292d:	mov	rbp, rbx
0x2930:	mov	rsi, r12
0x2933:	mov	rdi, r14
0x2936:	call	0x26a0


0x293b:	pop	rbx
0x293c:	mov	rax, rbp
0x293f:	pop	rbp
0x2940:	pop	r12
0x2942:	pop	r13
0x2944:	pop	r14
0x2946:	ret	


0x2c71:	test	rax, rax
0x2c74:	mov	qword ptr [rbx], rax
0x2c77:	je	0x2ca8


0x2ca8:	mov	eax, 1
0x2cad:	mov	rcx, qword ptr [rsp + 0x18]
0x2cb2:	xor	rcx, qword ptr fs:[0x28]
0x2cbb:	jne	0x2cea


0x2c79:	lea	r8, [rsp + 0x10]
0x2c7e:	mov	rcx, rax
0x2c81:	mov	rdx, r14
0x2c84:	mov	rsi, r13
0x2c87:	mov	rdi, r12
0x2c8a:	call	0x2980


0x2cbd:	add	rsp, 0x20
0x2cc1:	pop	rbx
0x2cc2:	pop	rbp
0x2cc3:	pop	r12
0x2cc5:	pop	r13
0x2cc7:	pop	r14
0x2cc9:	ret	


0x2cea:	call	0x15a0


0x2c8f:	test	al, al
0x2c91:	je	0x2cd0


0x2cd0:	mov	rdi, qword ptr [rbx]
0x2cd3:	mov	byte ptr [rsp + 0xf], al
0x2cd7:	call	0x14d0


0x2c93:	test	rbp, rbp
0x2c96:	je	0x2ca8


0x2c98:	mov	rdx, qword ptr [rsp + 0x10]
0x2c9d:	mov	qword ptr [rbp], rdx
0x2ca1:	jmp	0x2cad


0x2cad:	mov	rcx, qword ptr [rsp + 0x18]
0x2cb2:	xor	rcx, qword ptr fs:[0x28]
0x2cbb:	jne	0x2cea


0x2cdc:	mov	qword ptr [rbx], 0
0x2ce3:	movzx	eax, byte ptr [rsp + 0xf]
0x2ce8:	jmp	0x2cad


0x5159:	test	rax, rax
0x515c:	jne	0x5163


0x515e:	test	rbx, rbx
0x5161:	jne	0x5165


0x5163:	pop	rbx
0x5164:	ret	


0x5165:	call	0x53a0


0x5309:	mov	rdx, rbx
0x530c:	xor	esi, esi
0x530e:	mov	rdi, rax
0x5311:	pop	rbx
0x5312:	jmp	0x1630


0x5364:	add	rsp, 8
0x5368:	mov	rdx, rbx
0x536b:	mov	rsi, rbp
0x536e:	pop	rbx
0x536f:	pop	rbp
0x5370:	mov	rdi, rax
0x5373:	jmp	0x16a0


0x16a0:	jmp	qword ptr [rip + 0x207882]




0x5389:	mov	rdi, rbx
0x538c:	lea	rsi, [rax + 1]
0x5390:	pop	rbx
0x5391:	jmp	0x5350


0x4b7f:	lea	rdx, [rip + 0x203a]
0x4b86:	mov	rcx, rax
0x4b89:	mov	r8d, 0x7e3
0x4b8f:	mov	esi, 1
0x4b94:	mov	rdi, rbp
0x4b97:	xor	eax, eax
0x4b99:	call	0x17b0


0x4b9e:	lea	rsi, [rip + 0x1d83]
0x4ba5:	xor	edi, edi
0x4ba7:	mov	edx, 5
0x4bac:	call	0x1570


0x4bb1:	mov	rsi, rbp
0x4bb4:	mov	rdi, rax
0x4bb7:	call	0x1670


0x1670:	jmp	qword ptr [rip + 0x20789a]




0x214d:	mov	rdi, qword ptr [rip + 0x206f6c]
0x2154:	mov	rdx, rax
0x2157:	mov	rcx, rbx
0x215a:	mov	esi, 1
0x215f:	xor	eax, eax
0x2161:	call	0x17b0


0x2166:	mov	edi, ebp
0x2168:	call	0x1790


0x1790:	jmp	qword ptr [rip + 0x20780a]




0x217b:	mov	rdx, rbx
0x217e:	mov	rsi, rax
0x2181:	mov	edi, 1
0x2186:	xor	eax, eax
0x2188:	call	0x1730


0x1730:	jmp	qword ptr [rip + 0x20783a]




0x50e4:	lea	rdx, [rip + 0x180c]
0x50eb:	mov	rsi, rax
0x50ee:	mov	edi, 1
0x50f3:	xor	eax, eax
0x50f5:	call	0x1730


0x53b7:	mov	edi, dword ptr [rip + 0x203c5b]
0x53bd:	lea	rdx, [rip + 0xfa0]
0x53c4:	mov	rcx, rax
0x53c7:	xor	esi, esi
0x53c9:	xor	eax, eax
0x53cb:	call	0x1750


0x1750:	jmp	qword ptr [rip + 0x20782a]




0x5a23:	mov	edx, r12d
0x5a26:	mov	rsi, rbp
0x5a29:	mov	edi, eax
0x5a2b:	call	0x1600


0x1600:	jmp	qword ptr [rip + 0x2078d2]




0x2ddd:	mov	ecx, ebx
0x2ddf:	xor	edx, edx
0x2de1:	xor	esi, esi
0x2de3:	pop	rbx
0x2de4:	mov	edi, eax
0x2de6:	jmp	0x1640


0x593c:	test	eax, eax
0x593e:	mov	rdi, rbx
0x5941:	js	0x5997


0x5997:	pop	rbx
0x5998:	pop	rbp
0x5999:	pop	r12
0x599b:	jmp	0x1550


0x5943:	call	0x16f0


0x1550:	jmp	qword ptr [rip + 0x20792a]




0x5948:	test	eax, eax
0x594a:	jne	0x5978


0x594c:	mov	rdi, rbx
0x594f:	call	0x59b0


0x5978:	mov	rdi, rbx
0x597b:	call	0x16b0


0x5980:	xor	esi, esi
0x5982:	mov	edx, 1
0x5987:	mov	edi, eax
0x5989:	call	0x1600


0x5a87:	cmp	rax, -3
0x5a8b:	mov	rbp, rax
0x5a8e:	jbe	0x5ab0


0x5ab0:	mov	rdx, qword ptr [rsp + 8]
0x5ab5:	xor	rdx, qword ptr fs:[0x28]
0x5abe:	mov	rax, rbp
0x5ac1:	jne	0x5ace


0x5a90:	test	r12, r12
0x5a93:	je	0x5ab0


0x5ac3:	add	rsp, 0x18
0x5ac7:	pop	rbx
0x5ac8:	pop	rbp
0x5ac9:	pop	r12
0x5acb:	pop	r13
0x5acd:	ret	


0x5ace:	call	0x15a0


0x5a95:	xor	edi, edi
0x5a97:	call	0x5b60


0x5aec:	mov	ebx, dword ptr [rbp]
0x5aef:	mov	rdi, rbp
0x5af2:	mov	r12, rax
0x5af5:	call	0x5930


0x1844:	lea	rsi, [rip + 0x4521]
0x184b:	lea	rdi, [rip + 0x44f1]
0x1852:	call	0x1560


0x1560:	jmp	qword ptr [rip + 0x207922]




0x5b6b:	mov	rdx, rax
0x5b6e:	mov	eax, 1
0x5b73:	test	rdx, rdx
0x5b76:	je	0x5b95


0x5b95:	add	rsp, 8
0x5b99:	ret	


0x5b78:	lea	rdi, [rip + 0x11ac]
0x5b7f:	mov	ecx, 2
0x5b84:	mov	rsi, rdx
0x5b87:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5b87:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5b89:	seta	cl
0x5b8c:	sbb	cl, 0
0x5b8f:	xor	eax, eax
0x5b91:	test	cl, cl
0x5b93:	jne	0x5ba0


0x5ba0:	lea	rdi, [rip + 0x1186]
0x5ba7:	mov	ecx, 6
0x5bac:	mov	rsi, rdx
0x5baf:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5baf:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5bb1:	seta	al
0x5bb4:	sbb	al, 0
0x5bb6:	test	al, al
0x5bb8:	setne	al
0x5bbb:	add	rsp, 8
0x5bbf:	ret	


0x5a9c:	test	al, al
0x5a9e:	jne	0x5ab0


0x5aa0:	movzx	eax, byte ptr [r13]
0x5aa5:	mov	ebp, 1
0x5aaa:	mov	dword ptr [rbx], eax
0x5aac:	nop	dword ptr [rax]
0x5ab0:	mov	rdx, qword ptr [rsp + 8]
0x5ab5:	xor	rdx, qword ptr fs:[0x28]
0x5abe:	mov	rax, rbp
0x5ac1:	jne	0x5ace


0x5bce:	test	rax, rax
0x5bd1:	je	0x5bf0


0x5bf0:	lea	rax, [rip + 0x113c]
0x5bf7:	add	rsp, 8
0x5bfb:	ret	


0x5bd3:	cmp	byte ptr [rax], 0
0x5bd6:	lea	rdx, [rip + 0x1156]
0x5bdd:	cmove	rax, rdx
0x5be1:	add	rsp, 8
0x5be5:	ret	


0x2eb0:	movzx	edx, byte ptr [rax]
0x2eb3:	and	edx, 0xffffffdf
0x2eb6:	cmp	dl, 0x55
0x2eb9:	je	0x2f30


0x2f30:	movzx	edx, byte ptr [rax + 1]
0x2f34:	and	edx, 0xffffffdf
0x2f37:	cmp	dl, 0x54
0x2f3a:	jne	0x2ec0


0x2ebb:	cmp	dl, 0x47
0x2ebe:	je	0x2ee0


0x2f3c:	movzx	edx, byte ptr [rax + 2]
0x2f40:	and	edx, 0xffffffdf
0x2f43:	cmp	dl, 0x46
0x2f46:	jne	0x2ec0


0x2ec0:	lea	rax, [rip + 0x34f4]
0x2ec7:	lea	rdx, [rip + 0x34ef]
0x2ece:	cmp	ebx, 9
0x2ed1:	cmovne	rax, rdx
0x2ed5:	add	rsp, 8
0x2ed9:	pop	rbx
0x2eda:	pop	rbp
0x2edb:	ret	


0x2ee0:	movzx	edx, byte ptr [rax + 1]
0x2ee4:	and	edx, 0xffffffdf
0x2ee7:	cmp	dl, 0x42
0x2eea:	jne	0x2ec0


0x2f4c:	cmp	byte ptr [rax + 3], 0x2d
0x2f50:	jne	0x2ec0


0x2eec:	cmp	byte ptr [rax + 2], 0x31
0x2ef0:	jne	0x2ec0


0x2f56:	cmp	byte ptr [rax + 4], 0x38
0x2f5a:	jne	0x2ec0


0x2ef2:	cmp	byte ptr [rax + 3], 0x38
0x2ef6:	jne	0x2ec0


0x2f60:	cmp	byte ptr [rax + 5], 0
0x2f64:	jne	0x2ec0


0x2ef8:	cmp	byte ptr [rax + 4], 0x30
0x2efc:	jne	0x2ec0


0x2f6a:	cmp	byte ptr [rbp], 0x60
0x2f6e:	lea	rax, [rip + 0x3437]
0x2f75:	lea	rdx, [rip + 0x3434]
0x2f7c:	cmovne	rax, rdx
0x2f80:	add	rsp, 8
0x2f84:	pop	rbx
0x2f85:	pop	rbp
0x2f86:	ret	


0x2efe:	cmp	byte ptr [rax + 5], 0x33
0x2f02:	jne	0x2ec0


0x2f04:	cmp	byte ptr [rax + 6], 0x30
0x2f08:	jne	0x2ec0


0x2f0a:	cmp	byte ptr [rax + 7], 0
0x2f0e:	jne	0x2ec0


0x2f10:	cmp	byte ptr [rbp], 0x60
0x2f14:	lea	rax, [rip + 0x3499]
0x2f1b:	lea	rdx, [rip + 0x3496]
0x2f22:	cmovne	rax, rdx
0x2f26:	add	rsp, 8
0x2f2a:	pop	rbx
0x2f2b:	pop	rbp
0x2f2c:	ret	


0x1857:	lea	rdi, [rip + 0x44e5]
0x185e:	call	0x1540


0x1540:	jmp	qword ptr [rip + 0x207932]




0x598e:	cmp	rax, -1
0x5992:	jne	0x594c


0x5994:	mov	rdi, rbx
0x5997:	pop	rbx
0x5998:	pop	rbp
0x5999:	pop	r12
0x599b:	jmp	0x1550


0x5a30:	cmp	rax, -1
0x5a34:	je	0x5a42


0x5a42:	pop	rbx
0x5a43:	pop	rbp
0x5a44:	pop	r12
0x5a46:	ret	


0x5a36:	and	dword ptr [rbx], 0xffffffef
0x5a39:	mov	qword ptr [rbx + 0x90], rax
0x5a40:	xor	eax, eax
0x5a42:	pop	rbx
0x5a43:	pop	rbp
0x5a44:	pop	r12
0x5a46:	ret	


0x53d0:	call	0x14e0


0x50fa:	lea	rsi, [rip + 0x180c]
0x5101:	mov	edx, 5
0x5106:	xor	edi, edi
0x5108:	call	0x1570


0x510d:	lea	rcx, [rip + 0x107c]
0x5114:	lea	rdx, [rip + 0xc24]
0x511b:	mov	rsi, rax
0x511e:	mov	edi, 1
0x5123:	xor	eax, eax
0x5125:	call	0x1730


0x512a:	mov	rbx, qword ptr [rip + 0x203f57]
0x5131:	lea	rsi, [rip + 0x1a08]
0x5138:	xor	edi, edi
0x513a:	mov	edx, 5
0x513f:	call	0x1570


0x5144:	mov	rsi, rbx
0x5147:	mov	rdi, rax
0x514a:	pop	rbx
0x514b:	jmp	0x1670


0x218d:	lea	rsi, [rip + 0x3cbc]
0x2194:	mov	edx, 5
0x2199:	xor	edi, edi
0x219b:	call	0x1570


0x21a0:	mov	edx, 0x20
0x21a5:	mov	rsi, rax
0x21a8:	mov	edi, 1
0x21ad:	xor	eax, eax
0x21af:	call	0x1730


0x21b4:	mov	rbx, qword ptr [rip + 0x206ecd]
0x21bb:	lea	rsi, [rip + 0x3cd6]
0x21c2:	mov	edx, 5
0x21c7:	xor	edi, edi
0x21c9:	call	0x1570


0x21ce:	mov	rsi, rbx
0x21d1:	mov	rdi, rax
0x21d4:	call	0x1670


0x21d9:	mov	rbx, qword ptr [rip + 0x206ea8]
0x21e0:	lea	rsi, [rip + 0x3ce9]
0x21e7:	mov	edx, 5
0x21ec:	xor	edi, edi
0x21ee:	call	0x1570


0x21f3:	mov	rsi, rbx
0x21f6:	mov	rdi, rax
0x21f9:	call	0x1670


0x21fe:	mov	rbx, qword ptr [rip + 0x206e83]
0x2205:	lea	rsi, [rip + 0x3d14]
0x220c:	mov	edx, 5
0x2211:	xor	edi, edi
0x2213:	call	0x1570


0x2218:	mov	rsi, rbx
0x221b:	mov	rdi, rax
0x221e:	call	0x1670


0x2223:	mov	rbx, qword ptr [rip + 0x206e5e]
0x222a:	lea	rsi, [rip + 0x3de7]
0x2231:	mov	edx, 5
0x2236:	xor	edi, edi
0x2238:	call	0x1570


0x223d:	mov	rsi, rbx
0x2240:	mov	rdi, rax
0x2243:	call	0x1670


0x2248:	mov	rbx, qword ptr [rip + 0x206e39]
0x224f:	lea	rsi, [rip + 0x3df2]
0x2256:	mov	edx, 5
0x225b:	xor	edi, edi
0x225d:	call	0x1570


0x2262:	mov	rsi, rbx
0x2265:	mov	rdi, rax
0x2268:	lea	rbx, [rip + 0x3a35]
0x226f:	call	0x1670


0x2274:	lea	rsi, [rip + 0x3e05]
0x227b:	mov	edx, 5
0x2280:	xor	edi, edi
0x2282:	call	0x1570


0x2287:	lea	rcx, [rip + 0x3a16]
0x228e:	mov	rsi, rax
0x2291:	mov	edi, 1
0x2296:	xor	eax, eax
0x2298:	mov	rdx, rcx
0x229b:	call	0x1730


0x22a0:	lea	rax, [rip + 0x3a22]
0x22a7:	lea	rcx, [rip + 0x3a5c]
0x22ae:	mov	qword ptr [rsp + 0x60], 0
0x22b7:	mov	qword ptr [rsp + 0x68], 0
0x22c0:	mov	rdx, rsp
0x22c3:	mov	qword ptr [rsp], rax
0x22c7:	lea	rax, [rip + 0x39fd]
0x22ce:	mov	qword ptr [rsp + 0x30], rcx
0x22d3:	lea	rcx, [rip + 0x3a3a]
0x22da:	mov	qword ptr [rsp + 8], rax
0x22df:	lea	rax, [rip + 0x3a5d]
0x22e6:	mov	qword ptr [rsp + 0x40], rcx
0x22eb:	lea	rcx, [rip + 0x3a2c]
0x22f2:	mov	qword ptr [rsp + 0x10], rax
0x22f7:	lea	rax, [rip + 0x39dd]
0x22fe:	mov	qword ptr [rsp + 0x50], rcx
0x2303:	mov	qword ptr [rsp + 0x18], rax
0x2308:	lea	rax, [rip + 0x39e2]
0x230f:	mov	qword ptr [rsp + 0x20], rax
0x2314:	lea	rax, [rip + 0x39e0]
0x231b:	mov	qword ptr [rsp + 0x28], rax
0x2320:	mov	qword ptr [rsp + 0x38], rax
0x2325:	mov	qword ptr [rsp + 0x48], rax
0x232a:	mov	qword ptr [rsp + 0x58], rax
0x232f:	nop	
0x2330:	add	rdx, 0x10
0x2334:	mov	rdi, qword ptr [rdx]
0x2337:	test	rdi, rdi
0x233a:	je	0x234f


0x234f:	mov	r12, qword ptr [rdx + 8]
0x2353:	xor	edi, edi
0x2355:	mov	edx, 5
0x235a:	lea	rsi, [rip + 0x39c7]
0x2361:	test	r12, r12
0x2364:	je	0x242b


0x233c:	mov	ecx, 7
0x2341:	mov	rsi, rbx
0x2344:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x242b:	call	0x1570


0x236a:	call	0x1570


0x2344:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2346:	seta	al
0x2349:	sbb	al, 0
0x234b:	test	al, al
0x234d:	jne	0x2330


0x2330:	add	rdx, 0x10
0x2334:	mov	rdi, qword ptr [rdx]
0x2337:	test	rdi, rdi
0x233a:	je	0x234f


0x236f:	lea	rcx, [rip + 0x3e1a]
0x2376:	lea	rdx, [rip + 0x39c2]
0x237d:	mov	rsi, rax
0x2380:	mov	edi, 1
0x2385:	xor	eax, eax
0x2387:	call	0x1730


0x238c:	xor	esi, esi
0x238e:	mov	edi, 5
0x2393:	call	0x1720


0x2398:	test	rax, rax
0x239b:	je	0x23b9


0x23b9:	lea	rsi, [rip + 0x3991]
0x23c0:	xor	edi, edi
0x23c2:	mov	edx, 5
0x23c7:	call	0x1570


0x239d:	lea	rsi, [rip + 0x39a9]
0x23a4:	mov	edx, 3
0x23a9:	mov	rdi, rax
0x23ac:	call	0x1500


0x1500:	jmp	qword ptr [rip + 0x207952]




0x23cc:	lea	rcx, [rip + 0x38d1]
0x23d3:	lea	rdx, [rip + 0x3db6]
0x23da:	mov	rsi, rax
0x23dd:	mov	edi, 1
0x23e2:	xor	eax, eax
0x23e4:	call	0x1730


0x23e9:	cmp	r12, rbx
0x23ec:	lea	rcx, [rip + 0x38f2]
0x23f3:	lea	rbx, [rip + 0x44e7]
0x23fa:	cmove	rbx, rcx
0x23fe:	lea	rsi, [rip + 0x3dfb]
0x2405:	xor	edi, edi
0x2407:	mov	edx, 5
0x240c:	call	0x1570


0x2411:	mov	rcx, rbx
0x2414:	mov	rsi, rax
0x2417:	mov	rdx, r12
0x241a:	mov	edi, 1
0x241f:	xor	eax, eax
0x2421:	call	0x1730


0x2426:	jmp	0x2166


0x2430:	lea	rcx, [rip + 0x3d59]
0x2437:	lea	rdx, [rip + 0x3901]
0x243e:	mov	rsi, rax
0x2441:	mov	edi, 1
0x2446:	xor	eax, eax
0x2448:	call	0x1730


0x244d:	xor	esi, esi
0x244f:	mov	edi, 5
0x2454:	call	0x1720


0x2459:	test	rax, rax
0x245c:	je	0x2476


0x2476:	lea	rsi, [rip + 0x38d4]
0x247d:	mov	edx, 5
0x2482:	xor	edi, edi
0x2484:	lea	r12, [rip + 0x3819]
0x248b:	lea	rbx, [rip + 0x3853]
0x2492:	call	0x1570


0x245e:	lea	rsi, [rip + 0x38e8]
0x2465:	mov	edx, 3
0x246a:	mov	rdi, rax
0x246d:	call	0x1500


0x2497:	lea	rcx, [rip + 0x3806]
0x249e:	lea	rdx, [rip + 0x3ceb]
0x24a5:	mov	rsi, rax
0x24a8:	mov	edi, 1
0x24ad:	xor	eax, eax
0x24af:	call	0x1730


0x24b4:	jmp	0x23fe


0x23fe:	lea	rsi, [rip + 0x3dfb]
0x2405:	xor	edi, edi
0x2407:	mov	edx, 5
0x240c:	call	0x1570


0x4bbc:	cmp	r12, 9
0x4bc0:	ja	0x4f00


0x4bc6:	lea	rdx, [rip + 0x1fb7]
0x4bcd:	movsxd	rax, dword ptr [rdx + r12*4]
0x4bd1:	add	rax, rdx
0x4bd4:	jmp	rax


0x4f00:	mov	r10, qword ptr [rbx + 0x40]
0x4f04:	mov	r9, qword ptr [rbx + 0x38]
0x4f08:	mov	edx, 5
0x4f0d:	mov	rax, qword ptr [rbx + 0x10]
0x4f11:	mov	r8, qword ptr [rbx + 8]
0x4f15:	lea	rsi, [rip + 0x1be4]
0x4f1c:	mov	r13, qword ptr [rbx + 0x30]
0x4f20:	mov	r12, qword ptr [rbx + 0x28]
0x4f24:	mov	r15, qword ptr [rbx + 0x20]
0x4f28:	mov	r14, qword ptr [rbx + 0x18]
0x4f2c:	mov	qword ptr [rsp + 0x18], r10
0x4f31:	mov	qword ptr [rsp + 0x10], r9
0x4f36:	mov	qword ptr [rsp], rax
0x4f3a:	mov	qword ptr [rsp + 8], r8
0x4f3f:	mov	rbx, qword ptr [rbx]
0x4f42:	jmp	0x4cd2


0x4cd2:	xor	edi, edi
0x4cd4:	call	0x1570


0x4cd9:	mov	r10, qword ptr [rsp + 0x18]
0x4cde:	push	r10
0x4ce0:	jmp	0x4c24


0x4c24:	mov	r9, qword ptr [rsp + 0x18]
0x4c29:	mov	rdx, rax
0x4c2c:	mov	rcx, rbx
0x4c2f:	mov	esi, 1
0x4c34:	mov	rdi, rbp
0x4c37:	xor	eax, eax
0x4c39:	push	r9
0x4c3b:	push	r13
0x4c3d:	push	r12
0x4c3f:	push	r15
0x4c41:	push	r14
0x4c43:	mov	r9, qword ptr [rsp + 0x30]
0x4c48:	mov	r8, qword ptr [rsp + 0x38]
0x4c4d:	call	0x17b0


0x4c52:	add	rsp, 0x30
0x4c56:	add	rsp, 0x28
0x4c5a:	pop	rbx
0x4c5b:	pop	rbp
0x4c5c:	pop	r12
0x4c5e:	pop	r13
0x4c60:	pop	r14
0x4c62:	pop	r15
0x4c64:	ret	


0x43ad:	mov	dword ptr [rbp], r12d
0x43b1:	pop	rbx
0x43b2:	pop	rbp
0x43b3:	pop	r12
0x43b5:	ret	


0x426e:	mov	dword ptr [rip + 0x204de3], r12d
0x4275:	mov	eax, dword ptr [rbp + 4]
0x4278:	shl	r15, 4
0x427c:	sub	rsp, 8
0x4280:	add	rbx, r15
0x4283:	lea	r15, [rbp + 8]
0x4287:	mov	r8d, dword ptr [rbp]
0x428b:	mov	r11, qword ptr [rbx]
0x428e:	mov	r12, qword ptr [rbx + 8]
0x4292:	mov	rcx, r14
0x4295:	or	eax, 1
0x4298:	mov	dword ptr [rsp + 0x24], eax
0x429c:	push	qword ptr [rbp + 0x30]
0x429f:	mov	r9d, eax
0x42a2:	push	qword ptr [rbp + 0x28]
0x42a5:	push	r15
0x42a7:	mov	rsi, r11
0x42aa:	mov	rdx, qword ptr [rsp + 0x28]
0x42af:	mov	rdi, r12
0x42b2:	mov	qword ptr [rsp + 0x30], r11
0x42b7:	call	0x2f90


0x556a:	mov	edx, dword ptr [rsp + 8]
0x556e:	mov	rsi, qword ptr [rax]
0x5571:	mov	rax, rbp
0x5574:	jmp	0x5587


0x5587:	movzx	ecx, bl
0x558a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x558f:	jne	0x5580


0x5591:	cmp	bl, 0x2d
0x5594:	je	0x55e8


0x5580:	add	rax, 1
0x5584:	movzx	ebx, byte ptr [rax]
0x5587:	movzx	ecx, bl
0x558a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x558f:	jne	0x5580


0x55e8:	mov	ebp, 4
0x55ed:	mov	rdi, qword ptr [rsp + 0x18]
0x55f2:	xor	rdi, qword ptr fs:[0x28]
0x55fb:	mov	eax, ebp
0x55fd:	jne	0x5890


0x5596:	xor	ecx, ecx
0x5598:	mov	rsi, r15
0x559b:	mov	rdi, rbp
0x559e:	call	0x1620


0x5603:	add	rsp, 0x28
0x5607:	pop	rbx
0x5608:	pop	rbp
0x5609:	pop	r12
0x560b:	pop	r13
0x560d:	pop	r14
0x560f:	pop	r15
0x5611:	ret	


0x5890:	call	0x15a0


0x1620:	jmp	qword ptr [rip + 0x2078c2]




0x59e7:	mov	rdi, rbx
0x59ea:	pop	rbx
0x59eb:	jmp	0x16d0


0x5096:	mov	rax, qword ptr [rsp + 0x78]
0x509b:	xor	rax, qword ptr fs:[0x28]
0x50a4:	jne	0x50b0


0x50a6:	add	rsp, 0xb8
0x50ad:	pop	rbx
0x50ae:	pop	rbp
0x50af:	ret	


0x50b0:	call	0x15a0


0x4fc0:	mov	rax, qword ptr [rsp + 0x58]
0x4fc5:	xor	rax, qword ptr fs:[0x28]
0x4fce:	jne	0x4fd5


0x4fd0:	add	rsp, 0x68
0x4fd4:	ret	


0x4fd5:	call	0x15a0


0x541a:	test	eax, eax
0x541c:	jne	0x54b0


0x5422:	mov	rbp, qword ptr [rsp]
0x5426:	cmp	rbp, r14
0x5429:	jb	0x5430


0x54b0:	mov	ebp, eax
0x54b2:	call	0x14f0


0x5430:	call	0x14f0


0x542b:	cmp	rbp, r15
0x542e:	jbe	0x5484


0x5484:	mov	rdx, qword ptr [rsp + 8]
0x5489:	xor	rdx, qword ptr fs:[0x28]
0x5492:	mov	rax, rbp
0x5495:	jne	0x54db


0x5497:	add	rsp, 0x18
0x549b:	pop	rbx
0x549c:	pop	rbp
0x549d:	pop	r12
0x549f:	pop	r13
0x54a1:	pop	r14
0x54a3:	pop	r15
0x54a5:	ret	


0x54db:	call	0x15a0


0x5435:	cmp	rbp, 0x40000000
0x543c:	mov	r14, rax
0x543f:	sbb	eax, eax
0x5441:	and	eax, 0xffffffd7
0x5444:	add	eax, 0x4b
0x5447:	mov	dword ptr [r14], eax
0x544a:	mov	rdi, r12
0x544d:	call	0x4b10


0x54b7:	cmp	ebp, 1
0x54ba:	mov	r14, rax
0x54bd:	je	0x54d0


0x54d0:	mov	dword ptr [rax], 0x4b
0x54d6:	jmp	0x544a


0x54bf:	cmp	ebp, 3
0x54c2:	jne	0x544a


0x544a:	mov	rdi, r12
0x544d:	call	0x4b10


0x54c4:	mov	dword ptr [rax], 0
0x54ca:	jmp	0x544a


0x54fc:	add	rsp, 0x18
0x5500:	ret	


0x55a3:	mov	rcx, qword ptr [r15]
0x55a6:	mov	rbx, rax
0x55a9:	cmp	rcx, rbp
0x55ac:	je	0x55d8


0x55d8:	test	r13, r13
0x55db:	mov	qword ptr [rsp + 8], rcx
0x55e0:	jne	0x5620


0x55ae:	mov	eax, dword ptr [r12]
0x55b2:	test	eax, eax
0x55b4:	je	0x5618


0x5620:	movzx	r12d, byte ptr [rbp]
0x5625:	test	r12b, r12b
0x5628:	je	0x55e8


0x5618:	xor	ebp, ebp
0x561a:	jmp	0x55c0


0x55b6:	cmp	eax, 0x22
0x55b9:	mov	ebp, 1
0x55be:	jne	0x55e8


0x562a:	movsx	esi, r12b
0x562e:	mov	rdi, r13
0x5631:	xor	ebp, ebp
0x5633:	call	0x15d0


0x55c0:	test	r13, r13
0x55c3:	je	0x55ce


0x15d0:	jmp	qword ptr [rip + 0x2078ea]


0x55ce:	mov	qword ptr [r14], rbx
0x55d1:	jmp	0x55ed


0x55c5:	movzx	r12d, byte ptr [rcx]
0x55c9:	test	r12b, r12b
0x55cc:	jne	0x5647




0x55ed:	mov	rdi, qword ptr [rsp + 0x18]
0x55f2:	xor	rdi, qword ptr fs:[0x28]
0x55fb:	mov	eax, ebp
0x55fd:	jne	0x5890


0x5647:	movsx	esi, r12b
0x564b:	mov	rdi, r13
0x564e:	mov	qword ptr [rsp + 8], rcx
0x5653:	call	0x15d0


0x2472:	test	eax, eax
0x2474:	jne	0x24b9


0x24b9:	lea	r12, [rip + 0x37e4]
0x24c0:	mov	r13, qword ptr [rip + 0x206bc1]
0x24c7:	lea	rsi, [rip + 0x3cea]
0x24ce:	xor	edi, edi
0x24d0:	mov	edx, 5
0x24d5:	call	0x1570


0x24da:	mov	rsi, r13
0x24dd:	mov	rdi, rax
0x24e0:	call	0x1670


0x24e5:	jmp	0x23b9


0x23b1:	test	eax, eax
0x23b3:	jne	0x24c0


0x24c0:	mov	r13, qword ptr [rip + 0x206bc1]
0x24c7:	lea	rsi, [rip + 0x3cea]
0x24ce:	xor	edi, edi
0x24d0:	mov	edx, 5
0x24d5:	call	0x1570


0x1863:	lea	rdi, [rip + 0x14a6]
0x186a:	call	0x5c80


0x186f:	mov	byte ptr [rsp + 0x30], 0
0x1874:	lea	rcx, [rip + 0x2072a5]
0x187b:	lea	rdx, [rip + 0x4524]
0x1882:	xor	r8d, r8d
0x1885:	mov	rsi, r12
0x1888:	mov	edi, r13d
0x188b:	call	0x15b0


0x15b0:	jmp	qword ptr [rip + 0x2078fa]




0x5954:	test	eax, eax
0x5956:	je	0x5994


0x5958:	call	0x14f0


0x595d:	mov	r12d, dword ptr [rax]
0x5960:	mov	rdi, rbx
0x5963:	mov	rbp, rax
0x5966:	call	0x1550


0x596b:	test	r12d, r12d
0x596e:	jne	0x59a0


0x5970:	pop	rbx
0x5971:	pop	rbp
0x5972:	pop	r12
0x5974:	ret	


0x59a0:	mov	dword ptr [rbp], r12d
0x59a4:	mov	eax, 0xffffffff
0x59a9:	jmp	0x5970


0x5afa:	and	ebx, 0x20
0x5afd:	test	ebx, ebx
0x5aff:	jne	0x5b18


0x5b01:	test	eax, eax
0x5b03:	je	0x5b0f


0x5b18:	test	eax, eax
0x5b1a:	jne	0x5b38


0x5b0f:	pop	rbx
0x5b10:	pop	rbp
0x5b11:	pop	r12
0x5b13:	ret	


0x5b05:	test	r12, r12
0x5b08:	mov	eax, 0xffffffff
0x5b0d:	je	0x5b48


0x5b1c:	call	0x14f0


0x5b38:	pop	rbx
0x5b39:	mov	eax, 0xffffffff
0x5b3e:	pop	rbp
0x5b3f:	pop	r12
0x5b41:	ret	


0x5b48:	call	0x14f0


0x5b4d:	cmp	dword ptr [rax], 9
0x5b50:	pop	rbx
0x5b51:	pop	rbp
0x5b52:	pop	r12
0x5b54:	setne	al
0x5b57:	movzx	eax, al
0x5b5a:	neg	eax
0x5b5c:	ret	


0x5b21:	mov	dword ptr [rax], 0
0x5b27:	mov	eax, 0xffffffff
0x5b2c:	pop	rbx
0x5b2d:	pop	rbp
0x5b2e:	pop	r12
0x5b30:	ret	


0x2d22:	test	eax, eax
0x2d24:	je	0x2d3c


0x2d3c:	mov	rdi, qword ptr [rip + 0x20637d]
0x2d43:	call	0x5ae0


0x2d26:	call	0x14f0


0x2d2b:	cmp	byte ptr [rip + 0x20639e], 0
0x2d32:	mov	rbx, rax
0x2d35:	je	0x2d53


0x2d53:	lea	rsi, [rip + 0x3070]
0x2d5a:	xor	edi, edi
0x2d5c:	mov	edx, 5
0x2d61:	call	0x1570


0x2d37:	cmp	dword ptr [rax], 0x20
0x2d3a:	jne	0x2d53


0x2d66:	mov	rdi, qword ptr [rip + 0x20636b]
0x2d6d:	mov	rbp, rax
0x2d70:	test	rdi, rdi
0x2d73:	je	0x2d9d


0x2d9d:	mov	esi, dword ptr [rbx]
0x2d9f:	lea	rdx, [rip + 0x35be]
0x2da6:	mov	rcx, rax
0x2da9:	xor	edi, edi
0x2dab:	xor	eax, eax
0x2dad:	call	0x1750


0x2d75:	call	0x4910


0x2db2:	jmp	0x2d92


0x2d92:	mov	edi, dword ptr [rip + 0x206280]
0x2d98:	call	0x1510


0x1510:	jmp	qword ptr [rip + 0x20794a]




0x2d48:	test	eax, eax
0x2d4a:	jne	0x2d92


0x2d4c:	add	rsp, 8
0x2d50:	pop	rbx
0x2d51:	pop	rbp
0x2d52:	ret	


0x1890:	cmp	eax, -1
0x1893:	je	0x194f


0x194f:	movsxd	rax, dword ptr [rip + 0x207742]
0x1956:	mov	edx, r13d
0x1959:	sub	edx, eax
0x195b:	sub	edx, 1
0x195e:	jg	0x1f7c


0x1899:	cmp	eax, 0x64
0x189c:	je	0x18f0


0x1964:	cmp	eax, r13d
0x1967:	jge	0x19cf


0x1f7c:	mov	rdi, qword ptr [r12 + rax*8 + 8]
0x1f81:	call	0x4b10


0x18f0:	mov	ebx, 1
0x18f5:	jmp	0x1874


0x189e:	jle	0x1910


0x1969:	mov	rax, qword ptr [r12 + rax*8]
0x196d:	lea	rsi, [rip + 0x4a36]
0x1974:	mov	rdi, rax
0x1977:	mov	qword ptr [rsp + 0x48], rax
0x197c:	call	0x1690


0x19cf:	lea	rax, [rip + 0x49d4]
0x19d6:	mov	qword ptr [rsp + 0x48], rax
0x19db:	mov	r12, qword ptr [rip + 0x2076ae]
0x19e2:	mov	esi, 2
0x19e7:	mov	rdi, r12
0x19ea:	call	0x2dd0


0x1874:	lea	rcx, [rip + 0x2072a5]
0x187b:	lea	rdx, [rip + 0x4524]
0x1882:	xor	r8d, r8d
0x1885:	mov	rsi, r12
0x1888:	mov	edi, r13d
0x188b:	call	0x15b0


0x1910:	cmp	eax, 0xffffff7d
0x1915:	jne	0x1f6e


0x18a0:	cmp	eax, 0x69
0x18a3:	je	0x1900


0x1690:	jmp	qword ptr [rip + 0x20788a]


0x191b:	mov	rdi, qword ptr [rip + 0x207766]
0x1922:	mov	rcx, qword ptr [rip + 0x2076e7]
0x1929:	lea	r8, [rip + 0x4466]
0x1930:	lea	rdx, [rip + 0x4408]
0x1937:	lea	rsi, [rip + 0x4366]
0x193e:	xor	r9d, r9d
0x1941:	xor	eax, eax
0x1943:	call	0x4ff0


0x1f6e:	cmp	eax, 0xffffff7e
0x1f73:	jne	0x1fad


0x1900:	mov	byte ptr [rsp + 0x30], 1
0x1905:	jmp	0x1874


0x18a5:	cmp	eax, 0x77
0x18a8:	jne	0x1fad




0x1f75:	xor	edi, edi
0x1f77:	call	0x2110


0x1fad:	mov	edi, 1
0x1fb2:	call	0x2110


0x18ae:	lea	rsi, [rip + 0x44cf]
0x18b5:	mov	edx, 5
0x18ba:	xor	edi, edi
0x18bc:	call	0x1570


0x18c1:	mov	rdi, qword ptr [rip + 0x2077d8]
0x18c8:	lea	rcx, [rip + 0x5012]
0x18cf:	mov	r8, rax
0x18d2:	xor	r9d, r9d
0x18d5:	mov	rdx, -1
0x18dc:	xor	esi, esi
0x18de:	call	0x54e0


0x18e3:	mov	rbp, rax
0x18e6:	jmp	0x1874


0x1948:	xor	edi, edi
0x194a:	call	0x1790


0x19ef:	test	bl, bl
0x19f1:	mov	rax, qword ptr [rip + 0x207690]
0x19f8:	je	0x1bf8


0x1bf8:	mov	edi, 0x7800
0x1bfd:	mov	qword ptr [rsp + 0x18], rax
0x1c02:	xor	ebx, ebx
0x1c04:	call	0x5150


0x19fe:	mov	edi, 0x2000
0x1a03:	mov	qword ptr [rsp + 0x38], rax
0x1a08:	call	0x5150


0x1a0d:	mov	edi, 0x1400
0x1a12:	mov	rbp, rax
0x1a15:	call	0x5150


0x1a1a:	mov	qword ptr [rsp + 0x40], rax
0x1a1f:	lea	rax, [rsp + 0x5c]
0x1a24:	mov	rdi, rax
0x1a27:	mov	qword ptr [rsp + 0x18], rax
0x1a2c:	call	0x2970


0x1a31:	lea	rax, [rsp + 0x50]
0x1a36:	mov	qword ptr [rsp + 0x10], r12
0x1a3b:	mov	qword ptr [rsp + 8], rbp
0x1a40:	mov	qword ptr [rsp + 0x20], rax
0x1a45:	nop	dword ptr [rax]
0x1a48:	xor	ebx, ebx
0x1a4a:	jmp	0x1a7c


0x1a7c:	mov	rax, qword ptr [rsp + 8]
0x1a81:	mov	rcx, qword ptr [rsp + 0x10]
0x1a86:	mov	edx, 0x2000
0x1a8b:	sub	rdx, rbx
0x1a8e:	mov	esi, 1
0x1a93:	lea	rdi, [rax + rbx]
0x1a97:	call	0x1530


0x1530:	jmp	qword ptr [rip + 0x20793a]




0x1c09:	mov	edi, 0xc000
0x1c0e:	mov	r13, rax
0x1c11:	mov	r14d, 0x7800
0x1c17:	call	0x5150


0x1c1c:	mov	qword ptr [rsp + 8], rbp
0x1c21:	mov	qword ptr [rsp + 0x10], rax
0x1c26:	xor	ebp, ebp
0x1c28:	jmp	0x1c3d


0x1c3d:	lea	rdi, [r13 + rbp]
0x1c42:	mov	rdx, r14
0x1c45:	mov	rcx, r12
0x1c48:	sub	rdx, rbp
0x1c4b:	mov	esi, 1
0x1c50:	call	0x1530


0x5658:	test	rax, rax
0x565b:	mov	rcx, qword ptr [rsp + 8]
0x5660:	je	0x572c


0x572c:	mov	qword ptr [r14], rbx
0x572f:	or	ebp, 2
0x5732:	jmp	0x55ed


0x5666:	lea	eax, [r12 - 0x45]
0x566b:	cmp	al, 0x2f
0x566d:	ja	0x56c0


0x566f:	movabs	rdx, 0x814400308945
0x5679:	bt	rdx, rax
0x567d:	jae	0x56c0


0x56c0:	mov	edi, 1
0x56c5:	mov	esi, 0x400
0x56ca:	sub	r12d, 0x42
0x56ce:	cmp	r12b, 0x35
0x56d2:	ja	0x572c


0x567f:	mov	esi, 0x30
0x5684:	mov	rdi, r13
0x5687:	mov	qword ptr [rsp + 8], rcx
0x568c:	call	0x15d0


0x56d4:	lea	rdx, [rip + 0x156d]
0x56db:	movzx	r12d, r12b
0x56df:	movsxd	rax, dword ptr [rdx + r12*4]
0x56e3:	add	rax, rdx
0x56e6:	jmp	rax


0x5691:	test	rax, rax
0x5694:	mov	rcx, qword ptr [rsp + 8]
0x5699:	je	0x56c0


0x569b:	movzx	eax, byte ptr [rcx + 1]
0x569f:	cmp	al, 0x44
0x56a1:	je	0x56af


0x56af:	mov	edi, 2
0x56b4:	mov	esi, 0x3e8
0x56b9:	jmp	0x56ca


0x56a3:	cmp	al, 0x69
0x56a5:	je	0x5878


0x56ca:	sub	r12d, 0x42
0x56ce:	cmp	r12b, 0x35
0x56d2:	ja	0x572c


0x5878:	xor	edi, edi
0x587a:	cmp	byte ptr [rcx + 2], 0x42
0x587e:	mov	esi, 0x400
0x5883:	sete	dil
0x5887:	lea	edi, [rdi + rdi + 1]
0x588b:	jmp	0x56ca


0x56ab:	cmp	al, 0x42
0x56ad:	jne	0x56c0


0x5638:	test	rax, rax
0x563b:	mov	ebx, 1
0x5640:	mov	rcx, qword ptr [rsp + 8]
0x5645:	je	0x55e8


0x1c55:	add	rbp, rax
0x1c58:	mov	eax, dword ptr [r12]
0x1c5c:	test	al, 0x30
0x1c5e:	je	0x1c30


0x1c30:	cmp	rbp, 0x77ff
0x1c37:	ja	0x1ccf


0x1c60:	test	rbp, rbp
0x1c63:	jne	0x1ccf


0x1ccf:	lea	rax, [rbp + 4]
0x1cd3:	mov	ecx, 5
0x1cd8:	xor	edx, edx
0x1cda:	mov	rsi, rbp
0x1cdd:	mov	rdi, r13
0x1ce0:	div	rcx
0x1ce3:	mov	rdx, qword ptr [rsp + 0x10]
0x1ce8:	lea	r15, [rax*8]
0x1cf0:	mov	rcx, r15
0x1cf3:	call	0x26a0


0x1c65:	test	rbx, rbx
0x1c68:	mov	rbp, qword ptr [rsp + 8]
0x1c6d:	je	0x1c9b


0x1c9b:	test	al, 0x20
0x1c9d:	je	0x1bc2


0x1c6f:	test	rbp, rbp
0x1c72:	je	0x1c9b


0x1bc2:	mov	rdi, r12
0x1bc5:	call	0x5930


0x1ca3:	lea	rsi, [rip + 0x4115]
0x1caa:	mov	edx, 5
0x1caf:	xor	edi, edi
0x1cb1:	call	0x1570


0x1c74:	mov	rcx, qword ptr [rsp + 0x18]
0x1c79:	mov	rax, qword ptr [rcx + 0x28]
0x1c7d:	cmp	rax, qword ptr [rcx + 0x30]
0x1c81:	jae	0x1fb7


0x1c87:	mov	rcx, qword ptr [rsp + 0x18]
0x1c8c:	lea	rdx, [rax + 1]
0x1c90:	mov	qword ptr [rcx + 0x28], rdx
0x1c94:	mov	byte ptr [rax], 0xa
0x1c97:	mov	eax, dword ptr [r12]
0x1c9b:	test	al, 0x20
0x1c9d:	je	0x1bc2


0x1fb7:	mov	esi, 0xa
0x1fbc:	mov	rdi, rcx
0x1fbf:	call	0x15e0


0x15e0:	jmp	qword ptr [rip + 0x2078e2]




0x1cb6:	mov	rbx, rax
0x1cb9:	call	0x14f0


0x1cbe:	mov	esi, dword ptr [rax]
0x1cc0:	mov	rdx, rbx
0x1cc3:	mov	edi, 1
0x1cc8:	xor	eax, eax
0x1cca:	call	0x1750


0x1bca:	add	eax, 1
0x1bcd:	je	0x1e55


0x1e55:	mov	rdi, qword ptr [rsp + 0x48]
0x1e5a:	lea	rsi, [rip + 0x4549]
0x1e61:	call	0x1690


0x1bd3:	xor	eax, eax
0x1bd5:	mov	rcx, qword ptr [rsp + 0x68]
0x1bda:	xor	rcx, qword ptr fs:[0x28]
0x1be3:	jne	0x1f3d


0x1be9:	add	rsp, 0x78
0x1bed:	pop	rbx
0x1bee:	pop	rbp
0x1bef:	pop	r12
0x1bf1:	pop	r13
0x1bf3:	pop	r14
0x1bf5:	pop	r15
0x1bf7:	ret	


0x1f3d:	call	0x15a0


0x1cf8:	cmp	qword ptr [rsp + 8], 0
0x1cfe:	je	0x1dc9


0x1dc9:	mov	rcx, qword ptr [rip + 0x2072b8]
0x1dd0:	mov	rdi, qword ptr [rsp + 0x10]
0x1dd5:	mov	rdx, r15
0x1dd8:	mov	esi, 1
0x1ddd:	call	0x1700


0x1d04:	xor	r10d, r10d
0x1d07:	test	r15, r15
0x1d0a:	je	0x1dab


0x1700:	jmp	qword ptr [rip + 0x207852]


0x1dab:	mov	eax, dword ptr [r12]
0x1daf:	test	al, 0x30
0x1db1:	jne	0x1c65


0x1d10:	mov	qword ptr [rsp + 0x28], r13
0x1d15:	mov	qword ptr [rsp + 0x30], rbp
0x1d1a:	mov	r13, rbx
0x1d1d:	mov	rbp, r15
0x1d20:	mov	qword ptr [rsp + 0x20], r12
0x1d25:	mov	r15, qword ptr [rsp + 0x18]
0x1d2a:	mov	rbx, r10
0x1d2d:	jmp	0x1d51




0x1db7:	cmp	rbp, 0x7800
0x1dbe:	je	0x1c26


0x1d51:	mov	r12, qword ptr [rsp + 8]
0x1d56:	mov	rax, rbp
0x1d59:	sub	rax, rbx
0x1d5c:	sub	r12, r13
0x1d5f:	cmp	r12, rax
0x1d62:	cmova	r12, rax
0x1d66:	test	r12, r12
0x1d69:	je	0x1d30


0x1c26:	xor	ebp, ebp
0x1c28:	jmp	0x1c3d


0x1dc4:	jmp	0x1c65


0x1d30:	mov	rax, qword ptr [r15 + 0x28]
0x1d34:	cmp	rax, qword ptr [r15 + 0x30]
0x1d38:	jae	0x1e13


0x1d6b:	mov	rax, qword ptr [rsp + 0x10]
0x1d70:	mov	rcx, qword ptr [rip + 0x207311]
0x1d77:	mov	rdx, r12
0x1d7a:	mov	esi, 1
0x1d7f:	lea	rdi, [rax + rbx]
0x1d83:	call	0x1700


0x1d3e:	lea	rdx, [rax + 1]
0x1d42:	mov	qword ptr [r15 + 0x28], rdx
0x1d46:	mov	byte ptr [rax], 0xa
0x1d49:	xor	r13d, r13d
0x1d4c:	cmp	rbp, rbx
0x1d4f:	jbe	0x1d99


0x1e13:	mov	esi, 0xa
0x1e18:	mov	rdi, r15
0x1e1b:	call	0x15e0


0x1d99:	mov	rbx, r13
0x1d9c:	mov	r12, qword ptr [rsp + 0x20]
0x1da1:	mov	r13, qword ptr [rsp + 0x28]
0x1da6:	mov	rbp, qword ptr [rsp + 0x30]
0x1dab:	mov	eax, dword ptr [r12]
0x1daf:	test	al, 0x30
0x1db1:	jne	0x1c65


0x1a9c:	cmp	byte ptr [rsp + 0x30], 0
0x1aa1:	mov	r12, rax
0x1aa4:	mov	qword ptr [rsp + 0x50], rax
0x1aa9:	je	0x1a50


0x1a50:	mov	rax, qword ptr [rsp + 0x10]
0x1a55:	add	rbx, r12
0x1a58:	mov	eax, dword ptr [rax]
0x1a5a:	test	al, 0x20
0x1a5c:	jne	0x1f11


0x1aab:	xor	r13d, r13d
0x1aae:	test	r12, r12
0x1ab1:	je	0x1a50


0x1a62:	mov	edx, eax
0x1a64:	and	edx, 0x10
0x1a67:	cmp	rbx, 0x1fff
0x1a6e:	ja	0x1b18


0x1f11:	lea	rsi, [rip + 0x3ea7]
0x1f18:	mov	edx, 5
0x1f1d:	xor	edi, edi
0x1f1f:	call	0x1570


0x1ab3:	cmp	r13, r12
0x1ab6:	jae	0x1a50


0x1a74:	test	edx, edx
0x1a76:	jne	0x1b18


0x1b18:	xor	r15d, r15d
0x1b1b:	mov	qword ptr [rsp + 0x28], rbx
0x1b20:	mov	rbp, qword ptr [rsp + 8]
0x1b25:	mov	r14d, r15d
0x1b28:	mov	r12, qword ptr [rsp + 0x40]
0x1b2d:	mov	rbx, qword ptr [rsp + 0x10]
0x1b32:	mov	r15, qword ptr [rsp + 0x38]
0x1b37:	jmp	0x1b9e


0x1ab8:	mov	rax, qword ptr [rsp + 8]
0x1abd:	lea	r15, [rbx + r13]
0x1ac1:	lea	r14, [rax + r15]
0x1ac5:	movsx	edi, byte ptr [r14]
0x1ac9:	mov	ebp, edi
0x1acb:	call	0x2950


0x1b9e:	test	al, 0x10
0x1ba0:	je	0x1b40


0x1b40:	test	r14d, r14d
0x1b43:	jne	0x1a48


0x1ba2:	cmp	r14d, 1
0x1ba6:	ja	0x1bbf


0x1b49:	mov	rdx, qword ptr [rsp + 0x28]
0x1b4e:	mov	qword ptr [rsp + 0x50], 0x1400
0x1b57:	mov	r8, qword ptr [rsp + 0x20]
0x1b5c:	mov	rdi, qword ptr [rsp + 0x18]
0x1b61:	mov	rcx, r12
0x1b64:	mov	rsi, rbp
0x1b67:	call	0x2980


0x1a48:	xor	ebx, ebx
0x1a4a:	jmp	0x1a7c


0x1ba8:	jne	0x1b49


0x1bbf:	mov	r12, rbx
0x1bc2:	mov	rdi, r12
0x1bc5:	call	0x5930


0x1baa:	mov	eax, dword ptr [rsp + 0x5c]
0x1bae:	test	eax, eax
0x1bb0:	je	0x1bbf


0x1bb2:	mov	qword ptr [rsp + 0x50], 0x1400
0x1bbb:	xor	edx, edx
0x1bbd:	jmp	0x1b57


0x1b57:	mov	r8, qword ptr [rsp + 0x20]
0x1b5c:	mov	rdi, qword ptr [rsp + 0x18]
0x1b61:	mov	rcx, r12
0x1b64:	mov	rsi, rbp
0x1b67:	call	0x2980


0x1b6c:	mov	rdx, qword ptr [rsp + 0x50]
0x1b71:	mov	rcx, r15
0x1b74:	mov	esi, 1
0x1b79:	mov	rdi, r12
0x1b7c:	mov	r13d, eax
0x1b7f:	call	0x1700


0x1ad0:	cmp	bpl, 0x3d
0x1ad4:	je	0x1ada


0x1ada:	add	r13, 1
0x1ade:	test	r12, r12
0x1ae1:	jne	0x1ab3


0x1ad6:	test	al, al
0x1ad8:	je	0x1af0


0x1ae3:	jmp	0x1a50


0x1af0:	mov	rax, qword ptr [rsp + 8]
0x1af5:	sub	r12, 1
0x1af9:	mov	rdi, r14
0x1afc:	mov	rdx, r12
0x1aff:	mov	qword ptr [rsp + 0x50], r12
0x1b04:	sub	rdx, r13
0x1b07:	lea	rsi, [rax + r15 + 1]
0x1b0c:	call	0x1740


0x1740:	jmp	qword ptr [rip + 0x207832]




0x1f24:	mov	rbx, rax
0x1f27:	call	0x14f0


0x1f2c:	mov	esi, dword ptr [rax]
0x1f2e:	mov	rdx, rbx
0x1f31:	mov	edi, 1
0x1f36:	xor	eax, eax
0x1f38:	call	0x1750


0x1e66:	mov	ebp, eax
0x1e68:	call	0x14f0


0x1e6d:	test	ebp, ebp
0x1e6f:	mov	rbx, rax
0x1e72:	jne	0x1e98


0x1e74:	lea	rsi, [rip + 0x3f69]
0x1e7b:	mov	edx, 5
0x1e80:	xor	edi, edi
0x1e82:	call	0x1570


0x1e98:	mov	rdx, qword ptr [rsp + 0x48]
0x1e9d:	mov	esi, 3
0x1ea2:	xor	edi, edi
0x1ea4:	call	0x4940


0x1e87:	mov	esi, dword ptr [rbx]
0x1e89:	mov	rdx, rax
0x1e8c:	mov	edi, 1
0x1e91:	xor	eax, eax
0x1e93:	call	0x1750


0x1981:	test	eax, eax
0x1983:	je	0x19db


0x19db:	mov	r12, qword ptr [rip + 0x2076ae]
0x19e2:	mov	esi, 2
0x19e7:	mov	rdi, r12
0x19ea:	call	0x2dd0


0x1985:	mov	rdi, qword ptr [rsp + 0x48]
0x198a:	lea	rsi, [rip + 0x442b]
0x1991:	call	0x1770


0x1770:	jmp	qword ptr [rip + 0x20781a]




0x1996:	test	rax, rax
0x1999:	mov	r12, rax
0x199c:	jne	0x19e2


0x199e:	mov	rdx, qword ptr [rsp + 0x48]
0x19a3:	mov	esi, 3
0x19a8:	xor	edi, edi
0x19aa:	call	0x4940


0x19e2:	mov	esi, 2
0x19e7:	mov	rdi, r12
0x19ea:	call	0x2dd0


0x1b11:	jmp	0x1aae


0x1aae:	test	r12, r12
0x1ab1:	je	0x1a50


0x1b84:	cmp	rax, qword ptr [rsp + 0x50]
0x1b89:	jb	0x1ee5


0x1ee5:	lea	rsi, [rip + 0x3ede]
0x1eec:	mov	edx, 5
0x1ef1:	xor	edi, edi
0x1ef3:	call	0x1570


0x1b8f:	test	r13b, r13b
0x1b92:	je	0x1ec1


0x1ec1:	lea	rsi, [rip + 0x3f0e]
0x1ec8:	mov	edx, 5
0x1ecd:	xor	edi, edi
0x1ecf:	call	0x1570


0x1b98:	mov	eax, dword ptr [rbx]
0x1b9a:	add	r14d, 1
0x1b9e:	test	al, 0x10
0x1ba0:	je	0x1b40


0x1ed4:	xor	esi, esi
0x1ed6:	mov	rdx, rax
0x1ed9:	mov	edi, 1
0x1ede:	xor	eax, eax
0x1ee0:	call	0x1750


0x1ef8:	mov	rbx, rax
0x1efb:	call	0x14f0


0x1f00:	mov	esi, dword ptr [rax]
0x1f02:	mov	rdx, rbx
0x1f05:	mov	edi, 1
0x1f0a:	xor	eax, eax
0x1f0c:	call	0x1750


0x1d88:	cmp	r12, rax
0x1d8b:	ja	0x1f42


0x1d91:	add	r13, r12
0x1d94:	add	rbx, r12
0x1d97:	jmp	0x1d4c


0x1f42:	lea	rsi, [rip + 0x3e81]
0x1f49:	mov	edx, 5
0x1f4e:	xor	edi, edi
0x1f50:	call	0x1570


0x1d4c:	cmp	rbp, rbx
0x1d4f:	jbe	0x1d99


0x1f55:	mov	rbx, rax
0x1f58:	call	0x14f0


0x1f5d:	mov	esi, dword ptr [rax]
0x1f5f:	mov	rdx, rbx
0x1f62:	mov	edi, 1
0x1f67:	xor	eax, eax
0x1f69:	call	0x1750


0x1de2:	cmp	r15, rax
0x1de5:	jbe	0x1dab


0x1de7:	lea	rsi, [rip + 0x3fdc]
0x1dee:	mov	edx, 5
0x1df3:	xor	edi, edi
0x1df5:	call	0x1570


0x1dfa:	mov	rbx, rax
0x1dfd:	call	0x14f0


0x1e02:	mov	esi, dword ptr [rax]
0x1e04:	mov	rdx, rbx
0x1e07:	mov	edi, 1
0x1e0c:	xor	eax, eax
0x1e0e:	call	0x1750


0x1e20:	add	eax, 1
0x1e23:	jne	0x1d49


0x1e29:	lea	rsi, [rip + 0x3f9a]
0x1e30:	mov	edx, 5
0x1e35:	xor	edi, edi
0x1e37:	call	0x1570


0x1d49:	xor	r13d, r13d
0x1d4c:	cmp	rbp, rbx
0x1d4f:	jbe	0x1d99


0x1e3c:	mov	rbx, rax
0x1e3f:	call	0x14f0


0x1e44:	mov	esi, dword ptr [rax]
0x1e46:	mov	rdx, rbx
0x1e49:	mov	edi, 1
0x1e4e:	xor	eax, eax
0x1e50:	call	0x1750


0x1fc4:	add	eax, 1
0x1fc7:	jne	0x1c97


0x1fcd:	lea	rsi, [rip + 0x3df6]
0x1fd4:	mov	edx, 5
0x1fd9:	xor	edi, edi
0x1fdb:	call	0x1570


0x1c97:	mov	eax, dword ptr [r12]
0x1c9b:	test	al, 0x20
0x1c9d:	je	0x1bc2


0x1fe0:	mov	rbx, rax
0x1fe3:	call	0x14f0


0x1fe8:	mov	esi, dword ptr [rax]
0x1fea:	mov	rdx, rbx
0x1fed:	mov	edi, 1
0x1ff2:	xor	eax, eax
0x1ff4:	call	0x1750


0x1ff9:	nop	dword ptr [rax]


0x19af:	mov	rbx, rax
0x19b2:	call	0x14f0


0x19b7:	mov	esi, dword ptr [rax]
0x19b9:	lea	rdx, [rip + 0x49a4]
0x19c0:	mov	rcx, rbx
0x19c3:	mov	edi, 1
0x19c8:	xor	eax, eax
0x19ca:	call	0x1750


0x1ea9:	mov	esi, dword ptr [rbx]
0x1eab:	lea	rdx, [rip + 0x44b2]
0x1eb2:	mov	rcx, rax
0x1eb5:	mov	edi, 1
0x1eba:	xor	eax, eax
0x1ebc:	call	0x1750


0x2d7a:	mov	esi, dword ptr [rbx]
0x2d7c:	lea	rdx, [rip + 0x35dd]
0x2d83:	mov	rcx, rax
0x2d86:	mov	r8, rbp
0x2d89:	xor	edi, edi
0x2d8b:	xor	eax, eax
0x2d8d:	call	0x1750


0x1f86:	lea	rsi, [rip + 0x3e1e]
0x1f8d:	mov	rbx, rax
0x1f90:	mov	edx, 5
0x1f95:	xor	edi, edi
0x1f97:	call	0x1570


0x1f9c:	mov	rcx, rbx
0x1f9f:	mov	rdx, rax
0x1fa2:	xor	esi, esi
0x1fa4:	xor	edi, edi
0x1fa6:	xor	eax, eax
0x1fa8:	call	0x1750


0x5452:	mov	esi, dword ptr [r14]
0x5455:	mov	r8, rax
0x5458:	mov	eax, 0
0x545d:	lea	rdx, [rip + 0xefc]
0x5464:	mov	rcx, r13
0x5467:	cmp	esi, 0x16
0x546a:	cmove	esi, eax
0x546d:	test	ebx, ebx
0x546f:	mov	eax, 1
0x5474:	cmove	ebx, eax
0x5477:	xor	eax, eax
0x5479:	mov	edi, ebx
0x547b:	call	0x1750


0x5480:	mov	rbp, qword ptr [rsp]
0x5484:	mov	rdx, qword ptr [rsp + 8]
0x5489:	xor	rdx, qword ptr fs:[0x28]
0x5492:	mov	rax, rbp
0x5495:	jne	0x54db


0x42bc:	add	rsp, 0x20
0x42c0:	mov	r11, qword ptr [rsp + 0x10]
0x42c5:	cmp	r11, rax
0x42c8:	ja	0x4331


0x42ca:	lea	rsi, [rax + 1]
0x42ce:	lea	rax, [rip + 0x204e2b]
0x42d5:	cmp	r12, rax
0x42d8:	mov	qword ptr [rbx], rsi
0x42db:	je	0x42ef


0x4331:	mov	eax, dword ptr [rsp + 0x18]
0x4335:	mov	dword ptr [r13], eax
0x4339:	add	rsp, 0x28
0x433d:	mov	rax, r12
0x4340:	pop	rbx
0x4341:	pop	rbp
0x4342:	pop	r12
0x4344:	pop	r13
0x4346:	pop	r14
0x4348:	pop	r15
0x434a:	ret	


0x42ef:	mov	rdi, rsi
0x42f2:	mov	qword ptr [rsp + 0x10], rsi
0x42f7:	call	0x5150


0x42dd:	mov	rdi, r12
0x42e0:	mov	qword ptr [rsp + 0x10], rsi
0x42e5:	call	0x14d0


0x42ea:	mov	rsi, qword ptr [rsp + 0x10]
0x42ef:	mov	rdi, rsi
0x42f2:	mov	qword ptr [rsp + 0x10], rsi
0x42f7:	call	0x5150


0x42fc:	sub	rsp, 8
0x4300:	mov	qword ptr [rbx + 8], rax
0x4304:	mov	r8d, dword ptr [rbp]
0x4308:	push	qword ptr [rbp + 0x30]
0x430b:	push	qword ptr [rbp + 0x28]
0x430e:	mov	rcx, r14
0x4311:	push	r15
0x4313:	mov	r9d, dword ptr [rsp + 0x3c]
0x4318:	mov	rdi, rax
0x431b:	mov	rdx, qword ptr [rsp + 0x28]
0x4320:	mov	rsi, qword ptr [rsp + 0x30]
0x4325:	mov	r12, rax
0x4328:	call	0x2f90


0x4a42:	mov	rdi, qword ptr [rsp + 0x38]
0x4a47:	xor	rdi, qword ptr fs:[0x28]
0x4a50:	jne	0x4a5c


0x4a52:	add	rsp, 0x48
0x4a56:	ret	


0x4a5c:	call	0x15a0


0x478f:	mov	rcx, qword ptr [rsp + 0x38]
0x4794:	xor	rcx, qword ptr fs:[0x28]
0x479d:	jne	0x47a9


0x479f:	add	rsp, 0x48
0x47a3:	ret	


0x47a9:	call	0x15a0


0x481b:	mov	rdx, qword ptr [rsp + 0x38]
0x4820:	xor	rdx, qword ptr fs:[0x28]
0x4829:	jne	0x4835


0x482b:	add	rsp, 0x48
0x482f:	ret	


0x4835:	call	0x15a0


0x49af:	mov	rcx, qword ptr [rsp + 0x38]
0x49b4:	xor	rcx, qword ptr fs:[0x28]
0x49bd:	jne	0x49c9


0x49bf:	add	rsp, 0x48
0x49c3:	ret	


0x49c9:	call	0x15a0


0x48de:	mov	rsi, qword ptr [rsp + 0x38]
0x48e3:	xor	rsi, qword ptr fs:[0x28]
0x48ec:	jne	0x48f3


0x48ee:	add	rsp, 0x48
0x48f2:	ret	


0x48f3:	call	0x15a0


0x432d:	add	rsp, 0x20
0x4331:	mov	eax, dword ptr [rsp + 0x18]
0x4335:	mov	dword ptr [r13], eax
0x4339:	add	rsp, 0x28
0x433d:	mov	rax, r12
0x4340:	pop	rbx
0x4341:	pop	rbp
0x4342:	pop	r12
0x4344:	pop	r13
0x4346:	pop	r14
0x4348:	pop	r15
0x434a:	ret	


0x457c:	lea	rsi, [rax + 1]
0x4580:	mov	qword ptr [rsp + 0x48], rax
0x4585:	add	rsp, 0x20
0x4589:	mov	rdi, rsi
0x458c:	mov	qword ptr [rsp + 0x18], rsi
0x4591:	call	0x5150


0x4596:	mov	qword ptr [rsp + 0x10], rax
0x459b:	sub	rsp, 8
0x459f:	push	qword ptr [rbx + 0x30]
0x45a2:	push	qword ptr [rbx + 0x28]
0x45a5:	mov	r10, qword ptr [rsp + 0x38]
0x45aa:	mov	r9d, ebp
0x45ad:	mov	r8d, dword ptr [rbx]
0x45b0:	mov	rcx, r15
0x45b3:	mov	rdx, r14
0x45b6:	mov	rdi, rax
0x45b9:	push	r10
0x45bb:	mov	rsi, qword ptr [rsp + 0x38]
0x45c0:	call	0x2f90


0x45c5:	mov	eax, dword ptr [rsp + 0x2c]
0x45c9:	add	rsp, 0x20
0x45cd:	test	r12, r12
0x45d0:	mov	dword ptr [r13], eax
0x45d4:	je	0x45df


0x45df:	mov	rax, qword ptr [rsp + 0x10]
0x45e4:	add	rsp, 0x38
0x45e8:	pop	rbx
0x45e9:	pop	rbp
0x45ea:	pop	r12
0x45ec:	pop	r13
0x45ee:	pop	r14
0x45f0:	pop	r15
0x45f2:	ret	


0x45d6:	mov	r11, qword ptr [rsp + 0x28]
0x45db:	mov	qword ptr [r12], r11
0x45df:	mov	rax, qword ptr [rsp + 0x10]
0x45e4:	add	rsp, 0x38
0x45e8:	pop	rbx
0x45e9:	pop	rbp
0x45ea:	pop	r12
0x45ec:	pop	r13
0x45ee:	pop	r14
0x45f0:	pop	r15
0x45f2:	ret	


0x44f1:	mov	dword ptr [rbp], r12d
0x44f5:	add	rsp, 0x38
0x44f9:	pop	rbx
0x44fa:	pop	rbp
0x44fb:	pop	r12
0x44fd:	pop	r13
0x44ff:	pop	r14
0x4501:	pop	r15
0x4503:	ret	


0x5c4d:	add	rbx, 1
0x5c51:	cmp	rbp, rbx
0x5c54:	jne	0x5c40


0x5c40:	mov	rdx, r15
0x5c43:	mov	rsi, r14
0x5c46:	mov	edi, r13d
0x5c49:	call	qword ptr [r12 + rbx*8]






0x4dc0:	lea	rsi, [rip + 0x1c31]
0x4dc7:	mov	edx, 5
0x4dcc:	xor	edi, edi
0x4dce:	mov	r14, qword ptr [rbx + 0x18]
0x4dd2:	mov	r13, qword ptr [rbx + 0x10]
0x4dd6:	mov	r12, qword ptr [rbx + 8]
0x4dda:	mov	rbx, qword ptr [rbx]
0x4ddd:	call	0x1570


0x4be0:	mov	r9, qword ptr [rbx + 0x38]
0x4be4:	mov	rax, qword ptr [rbx + 0x10]
0x4be8:	lea	rsi, [rip + 0x1ea9]
0x4bef:	mov	r8, qword ptr [rbx + 8]
0x4bf3:	mov	edx, 5
0x4bf8:	xor	edi, edi
0x4bfa:	mov	r13, qword ptr [rbx + 0x30]
0x4bfe:	mov	r12, qword ptr [rbx + 0x28]
0x4c02:	mov	qword ptr [rsp + 0x10], r9
0x4c07:	mov	r15, qword ptr [rbx + 0x20]
0x4c0b:	mov	r14, qword ptr [rbx + 0x18]
0x4c0f:	mov	qword ptr [rsp], rax
0x4c13:	mov	qword ptr [rsp + 8], r8
0x4c18:	mov	rbx, qword ptr [rbx]
0x4c1b:	call	0x1570


0x4ce8:	mov	rbx, qword ptr [rbx]
0x4ceb:	lea	rsi, [rip + 0x1bad]
0x4cf2:	mov	edx, 5
0x4cf7:	xor	edi, edi
0x4cf9:	call	0x1570


0x4d28:	mov	r12, qword ptr [rbx + 8]
0x4d2c:	lea	rsi, [rip + 0x1b7c]
0x4d33:	mov	rbx, qword ptr [rbx]
0x4d36:	mov	edx, 5
0x4d3b:	xor	edi, edi
0x4d3d:	call	0x1570


0x4e48:	mov	r8, qword ptr [rbx + 8]
0x4e4c:	mov	r12, qword ptr [rbx + 0x28]
0x4e50:	lea	rsi, [rip + 0x1be9]
0x4e57:	mov	r15, qword ptr [rbx + 0x20]
0x4e5b:	mov	r14, qword ptr [rbx + 0x18]
0x4e5f:	mov	edx, 5
0x4e64:	mov	r13, qword ptr [rbx + 0x10]
0x4e68:	xor	edi, edi
0x4e6a:	mov	rbx, qword ptr [rbx]
0x4e6d:	mov	qword ptr [rsp], r8
0x4e71:	call	0x1570


0x4d70:	mov	r13, qword ptr [rbx + 0x10]
0x4d74:	mov	r12, qword ptr [rbx + 8]
0x4d78:	lea	rsi, [rip + 0x1b47]
0x4d7f:	mov	rbx, qword ptr [rbx]
0x4d82:	mov	edx, 5
0x4d87:	xor	edi, edi
0x4d89:	call	0x1570


0x4eb0:	mov	r9, qword ptr [rbx + 0x10]
0x4eb4:	mov	r13, qword ptr [rbx + 0x30]
0x4eb8:	lea	rsi, [rip + 0x1ba9]
0x4ebf:	mov	r12, qword ptr [rbx + 0x28]
0x4ec3:	mov	r15, qword ptr [rbx + 0x20]
0x4ec7:	mov	edx, 5
0x4ecc:	mov	r14, qword ptr [rbx + 0x18]
0x4ed0:	mov	r8, qword ptr [rbx + 8]
0x4ed4:	xor	edi, edi
0x4ed6:	mov	qword ptr [rsp + 8], r9
0x4edb:	mov	rbx, qword ptr [rbx]
0x4ede:	mov	qword ptr [rsp], r8
0x4ee2:	call	0x1570


0x4c90:	mov	r10, qword ptr [rbx + 0x40]
0x4c94:	mov	r9, qword ptr [rbx + 0x38]
0x4c98:	lea	rsi, [rip + 0x1e29]
0x4c9f:	mov	rax, qword ptr [rbx + 0x10]
0x4ca3:	mov	r8, qword ptr [rbx + 8]
0x4ca7:	mov	edx, 5
0x4cac:	mov	r13, qword ptr [rbx + 0x30]
0x4cb0:	mov	r12, qword ptr [rbx + 0x28]
0x4cb4:	mov	r15, qword ptr [rbx + 0x20]
0x4cb8:	mov	r14, qword ptr [rbx + 0x18]
0x4cbc:	mov	rbx, qword ptr [rbx]
0x4cbf:	mov	qword ptr [rsp + 0x18], r10
0x4cc4:	mov	qword ptr [rsp + 0x10], r9
0x4cc9:	mov	qword ptr [rsp], rax
0x4ccd:	mov	qword ptr [rsp + 8], r8
0x4cd2:	xor	edi, edi
0x4cd4:	call	0x1570


0x4c56:	add	rsp, 0x28
0x4c5a:	pop	rbx
0x4c5b:	pop	rbp
0x4c5c:	pop	r12
0x4c5e:	pop	r13
0x4c60:	pop	r14
0x4c62:	pop	r15
0x4c64:	ret	


0x4e18:	mov	r15, qword ptr [rbx + 0x20]
0x4e1c:	lea	rsi, [rip + 0x1bf5]
0x4e23:	mov	edx, 5
0x4e28:	xor	edi, edi
0x4e2a:	mov	r14, qword ptr [rbx + 0x18]
0x4e2e:	mov	r13, qword ptr [rbx + 0x10]
0x4e32:	mov	r12, qword ptr [rbx + 8]
0x4e36:	mov	rbx, qword ptr [rbx]
0x4e39:	call	0x1570


0x4e3e:	push	r15
0x4e40:	jmp	0x4de6


0x4de6:	push	r14
0x4de8:	mov	rdx, rax
0x4deb:	mov	r9, r13
0x4dee:	mov	r8, r12
0x4df1:	mov	rcx, rbx
0x4df4:	mov	rdi, rbp
0x4df7:	mov	esi, 1
0x4dfc:	xor	eax, eax
0x4dfe:	call	0x17b0


0x4e03:	pop	rax
0x4e04:	pop	rdx
0x4e05:	add	rsp, 0x28
0x4e09:	pop	rbx
0x4e0a:	pop	rbp
0x4e0b:	pop	r12
0x4e0d:	pop	r13
0x4e0f:	pop	r14
0x4e11:	pop	r15
0x4e13:	ret	


0x4ee7:	push	r13
0x4ee9:	push	r12
0x4eeb:	push	r15
0x4eed:	push	r14
0x4eef:	mov	r9, qword ptr [rsp + 0x28]
0x4ef4:	jmp	0x4e83


0x4e83:	mov	r8, qword ptr [rsp + 0x20]
0x4e88:	mov	rcx, rbx
0x4e8b:	mov	rdx, rax
0x4e8e:	mov	rdi, rbp
0x4e91:	mov	esi, 1
0x4e96:	xor	eax, eax
0x4e98:	call	0x17b0


0x4e9d:	add	rsp, 0x20
0x4ea1:	add	rsp, 0x28
0x4ea5:	pop	rbx
0x4ea6:	pop	rbp
0x4ea7:	pop	r12
0x4ea9:	pop	r13
0x4eab:	pop	r14
0x4ead:	pop	r15
0x4eaf:	ret	


0x4d8e:	add	rsp, 0x28
0x4d92:	mov	r9, r13
0x4d95:	mov	r8, r12
0x4d98:	mov	rcx, rbx
0x4d9b:	mov	rdi, rbp
0x4d9e:	mov	rdx, rax
0x4da1:	pop	rbx
0x4da2:	pop	rbp
0x4da3:	pop	r12
0x4da5:	pop	r13
0x4da7:	pop	r14
0x4da9:	pop	r15
0x4dab:	mov	esi, 1
0x4db0:	xor	eax, eax
0x4db2:	jmp	0x17b0


0x4e76:	sub	rsp, 8
0x4e7a:	mov	r9, r13
0x4e7d:	push	r12
0x4e7f:	push	r15
0x4e81:	push	r14
0x4e83:	mov	r8, qword ptr [rsp + 0x20]
0x4e88:	mov	rcx, rbx
0x4e8b:	mov	rdx, rax
0x4e8e:	mov	rdi, rbp
0x4e91:	mov	esi, 1
0x4e96:	xor	eax, eax
0x4e98:	call	0x17b0


0x4d42:	add	rsp, 0x28
0x4d46:	mov	r8, r12
0x4d49:	mov	rcx, rbx
0x4d4c:	mov	rdi, rbp
0x4d4f:	mov	rdx, rax
0x4d52:	mov	esi, 1
0x4d57:	pop	rbx
0x4d58:	pop	rbp
0x4d59:	pop	r12
0x4d5b:	pop	r13
0x4d5d:	pop	r14
0x4d5f:	pop	r15
0x4d61:	xor	eax, eax
0x4d63:	jmp	0x17b0


0x4cfe:	add	rsp, 0x28
0x4d02:	mov	rcx, rbx
0x4d05:	mov	rdi, rbp
0x4d08:	pop	rbx
0x4d09:	pop	rbp
0x4d0a:	pop	r12
0x4d0c:	pop	r13
0x4d0e:	pop	r14
0x4d10:	pop	r15
0x4d12:	mov	rdx, rax
0x4d15:	mov	esi, 1
0x4d1a:	xor	eax, eax
0x4d1c:	jmp	0x17b0


0x4c20:	sub	rsp, 8
0x4c24:	mov	r9, qword ptr [rsp + 0x18]
0x4c29:	mov	rdx, rax
0x4c2c:	mov	rcx, rbx
0x4c2f:	mov	esi, 1
0x4c34:	mov	rdi, rbp
0x4c37:	xor	eax, eax
0x4c39:	push	r9
0x4c3b:	push	r13
0x4c3d:	push	r12
0x4c3f:	push	r15
0x4c41:	push	r14
0x4c43:	mov	r9, qword ptr [rsp + 0x30]
0x4c48:	mov	r8, qword ptr [rsp + 0x38]
0x4c4d:	call	0x17b0


0x4de2:	sub	rsp, 8
0x4de6:	push	r14
0x4de8:	mov	rdx, rax
0x4deb:	mov	r9, r13
0x4dee:	mov	r8, r12
0x4df1:	mov	rcx, rbx
0x4df4:	mov	rdi, rbp
0x4df7:	mov	esi, 1
0x4dfc:	xor	eax, eax
0x4dfe:	call	0x17b0


0x3b30:	sub	rsp, 8
0x3b34:	mov	rcx, rbp
0x3b37:	mov	rsi, r13
0x3b3a:	push	qword ptr [rsp + 0x68]
0x3b3e:	push	qword ptr [rsp + 0x78]
0x3b42:	mov	rdi, r14
0x3b45:	push	0
0x3b47:	mov	r9d, dword ptr [rsp + 0x98]
0x3b4f:	mov	r8d, dword ptr [rsp + 0x28]
0x3b54:	mov	rdx, qword ptr [rsp + 0x30]
0x3b59:	and	r9d, 0xfffffffd
0x3b5d:	call	0x2f90


0x3b62:	add	rsp, 0x20
0x3b66:	mov	r15, rax
0x3b69:	mov	rbx, qword ptr [rsp + 0xa8]
0x3b71:	xor	rbx, qword ptr fs:[0x28]
0x3b7a:	mov	rax, r15
0x3b7d:	jne	0x4183


0x3b83:	add	rsp, 0xb8
0x3b8a:	pop	rbx
0x3b8b:	pop	rbp
0x3b8c:	pop	r12
0x3b8e:	pop	r13
0x3b90:	pop	r14
0x3b92:	pop	r15
0x3b94:	ret	


0x4183:	call	0x15a0


0x412d:	sub	rsp, 8
0x4131:	mov	r8d, 5
0x4137:	mov	rcx, r11
0x413a:	push	qword ptr [rsp + 0x68]
0x413e:	push	qword ptr [rsp + 0x78]
0x4142:	mov	rdi, r14
0x4145:	push	qword ptr [rsp + 0x38]
0x4149:	mov	r9d, dword ptr [rsp + 0x98]
0x4151:	mov	rdx, qword ptr [rsp + 0x30]
0x4156:	mov	rsi, qword ptr [rsp + 0x70]
0x415b:	call	0x2f90


0x4160:	add	rsp, 0x20
0x4164:	mov	r15, rax
0x4167:	jmp	0x3b69


0x3b69:	mov	rbx, qword ptr [rsp + 0xa8]
0x3b71:	xor	rbx, qword ptr fs:[0x28]
0x3b7a:	mov	rax, r15
0x3b7d:	jne	0x4183


0x14c0:	push	qword ptr [rip + 0x20796a]
0x14c6:	jmp	qword ptr [rip + 0x20796c]


0x14cc:	nop	dword ptr [rax]


0x14d6:	push	0
0x14db:	jmp	0x14c0


0x14e6:	push	1
0x14eb:	jmp	0x14c0


0x14f6:	push	2
0x14fb:	jmp	0x14c0


0x1506:	push	3
0x150b:	jmp	0x14c0


0x1516:	push	4
0x151b:	jmp	0x14c0


0x1526:	push	5
0x152b:	jmp	0x14c0


0x1536:	push	6
0x153b:	jmp	0x14c0


0x1546:	push	7
0x154b:	jmp	0x14c0


0x1556:	push	8
0x155b:	jmp	0x14c0


0x1566:	push	9
0x156b:	jmp	0x14c0


0x1576:	push	0xa
0x157b:	jmp	0x14c0


0x1586:	push	0xb
0x158b:	jmp	0x14c0


0x1596:	push	0xc
0x159b:	jmp	0x14c0


0x15a6:	push	0xd
0x15ab:	jmp	0x14c0


0x15b6:	push	0xe
0x15bb:	jmp	0x14c0


0x15c6:	push	0xf
0x15cb:	jmp	0x14c0


0x15d6:	push	0x10
0x15db:	jmp	0x14c0


0x15e6:	push	0x11
0x15eb:	jmp	0x14c0


0x15f6:	push	0x12
0x15fb:	jmp	0x14c0


0x1606:	push	0x13
0x160b:	jmp	0x14c0


0x1616:	push	0x14
0x161b:	jmp	0x14c0


0x1626:	push	0x15
0x162b:	jmp	0x14c0


0x1636:	push	0x16
0x163b:	jmp	0x14c0


0x1646:	push	0x17
0x164b:	jmp	0x14c0


0x1656:	push	0x18
0x165b:	jmp	0x14c0


0x1660:	jmp	qword ptr [rip + 0x2078a2]




0x1666:	push	0x19
0x166b:	jmp	0x14c0


0x1676:	push	0x1a
0x167b:	jmp	0x14c0


0x1686:	push	0x1b
0x168b:	jmp	0x14c0


0x1696:	push	0x1c
0x169b:	jmp	0x14c0


0x16a6:	push	0x1d
0x16ab:	jmp	0x14c0


0x16b6:	push	0x1e
0x16bb:	jmp	0x14c0


0x16c6:	push	0x1f
0x16cb:	jmp	0x14c0


0x16d6:	push	0x20
0x16db:	jmp	0x14c0


0x16e6:	push	0x21
0x16eb:	jmp	0x14c0


0x16f6:	push	0x22
0x16fb:	jmp	0x14c0


0x1706:	push	0x23
0x170b:	jmp	0x14c0


0x1716:	push	0x24
0x171b:	jmp	0x14c0


0x1726:	push	0x25
0x172b:	jmp	0x14c0


0x1736:	push	0x26
0x173b:	jmp	0x14c0


0x1746:	push	0x27
0x174b:	jmp	0x14c0


0x1756:	push	0x28
0x175b:	jmp	0x14c0


0x1766:	push	0x29
0x176b:	jmp	0x14c0


0x1776:	push	0x2a
0x177b:	jmp	0x14c0


0x1786:	push	0x2b
0x178b:	jmp	0x14c0


0x1796:	push	0x2c
0x179b:	jmp	0x14c0


0x17a6:	push	0x2d
0x17ab:	jmp	0x14c0


0x17b6:	push	0x2e
0x17bb:	jmp	0x14c0


0x17c0:	jmp	qword ptr [rip + 0x2077f2]




0x17c6:	push	0x2f
0x17cb:	jmp	0x14c0


0x17d0:	jmp	qword ptr [rip + 0x2077ea]




0x17d6:	push	0x30
0x17db:	jmp	0x14c0


0x17e6:	push	0x31
0x17eb:	jmp	0x14c0


0x202a:	hlt	


0x202b:	nop	dword ptr [rax + rax]


0x2062:	nop	dword ptr [rax]
0x2066:	nop	word ptr cs:[rax + rax]


0x20b2:	nop	dword ptr [rax]
0x20b6:	nop	word ptr cs:[rax + rax]


0x20fa:	nop	word ptr [rax + rax]


0x210a:	nop	word ptr [rax + rax]


0x24ea:	nop	word ptr [rax + rax]


0x269a:	nop	word ptr [rax + rax]


0x28b9:	nop	dword ptr [rax]


0x2947:	nop	word ptr [rax + rax]


0x2965:	nop	
0x2966:	nop	word ptr cs:[rax + rax]


0x2977:	nop	word ptr [rax + rax]


0x2c2e:	nop	


0x2cef:	nop	


0x2cf8:	nop	dword ptr [rax + rax]


0x2d08:	nop	dword ptr [rax + rax]


0x2db4:	nop	word ptr cs:[rax + rax]
0x2dbe:	nop	


0x2dc5:	nop	
0x2dc6:	nop	word ptr cs:[rax + rax]


0x2df2:	nop	word ptr cs:[rax + rax]
0x2dfc:	nop	dword ptr [rax]


0x2e9f:	nop	


0x2f87:	nop	word ptr [rax + rax]


0x3023:	mov	byte ptr [rsp + 0xe], 1
0x3028:	mov	byte ptr [rsp + 0x7c], 0
0x302d:	xor	r12d, r12d
0x3030:	mov	qword ptr [rsp + 0x50], 0
0x3039:	mov	byte ptr [rsp + 0xf], 1
0x303e:	mov	byte ptr [rsp + 0xd], 0
0x3043:	lea	rax, [rip + 0x3373]
0x304a:	mov	qword ptr [rsp + 0x18], 1
0x3053:	xor	r15d, r15d
0x3056:	mov	dword ptr [rsp + 8], 2
0x305e:	mov	qword ptr [rsp + 0x48], rax
0x3063:	xor	r11d, r11d
0x3066:	mov	rax, rbp
0x3069:	mov	r8d, r12d
0x306c:	mov	rbp, r11
0x306f:	mov	r11, rax
0x3072:	nop	word ptr [rax + rax]
0x3078:	cmp	r11, rbp
0x307b:	setne	r12b
0x307f:	cmp	r11, -1
0x3083:	jne	0x3092


0x3085:	mov	rax, qword ptr [rsp + 0x10]
0x308a:	cmp	byte ptr [rax + rbp], 0
0x308e:	setne	r12b
0x3092:	test	r12b, r12b
0x3095:	je	0x36f0


0x3092:	test	r12b, r12b
0x3095:	je	0x36f0


0x36f0:	cmp	dword ptr [rsp + 8], 2
0x36f5:	movzx	ebx, byte ptr [rsp + 0xf]
0x36fa:	mov	r12d, r8d
0x36fd:	mov	rbp, r11
0x3700:	sete	dl
0x3703:	mov	eax, ebx
0x3705:	test	r15, r15
0x3708:	sete	cl
0x370b:	and	eax, edx
0x370d:	and	al, cl
0x370f:	jne	0x4176


0x309b:	cmp	dword ptr [rsp + 8], 2
0x30a0:	mov	rdi, qword ptr [rsp + 0x10]
0x30a5:	lea	r9, [rdi + rbp]
0x30a9:	setne	al
0x30ac:	and	al, byte ptr [rsp + 0xd]
0x30b0:	mov	r10d, eax
0x30b3:	je	0x3160


0x3715:	mov	eax, ebx
0x3717:	xor	eax, 1
0x371a:	and	dl, al
0x371c:	je	0x408c


0x4176:	mov	dword ptr [rsp + 8], 2
0x417e:	jmp	0x3b19


0x3160:	movzx	ebx, byte ptr [r9]
0x3164:	cmp	bl, 0x7e
0x3167:	ja	0x3488


0x30b9:	mov	rax, qword ptr [rsp + 0x18]
0x30be:	test	rax, rax
0x30c1:	je	0x34f0


0x408c:	mov	rbx, qword ptr [rsp + 0x48]
0x4091:	test	rbx, rbx
0x4094:	je	0x40c2


0x3722:	cmp	byte ptr [rsp + 0x7c], 0
0x3727:	je	0x408a


0x3b19:	cmp	byte ptr [rsp + 0xd], 0
0x3b1e:	je	0x3b30


0x316d:	lea	rcx, [rip + 0x32d8]
0x3174:	movzx	edx, bl
0x3177:	movsxd	rax, dword ptr [rcx + rdx*4]
0x317b:	add	rax, rcx
0x317e:	jmp	rax


0x3488:	cmp	qword ptr [rsp + 0x58], 1
0x348e:	jne	0x3838


0x34f0:	movzx	ebx, byte ptr [r9]
0x34f4:	cmp	bl, 0x7e
0x34f7:	ja	0x3480


0x30c7:	cmp	r11, -1
0x30cb:	lea	rbx, [rbp + rax]
0x30d0:	jne	0x3100


0x40c2:	cmp	r13, r15
0x40c5:	jbe	0x3b69


0x4096:	test	al, al
0x4098:	je	0x40c2


0x408a:	mov	eax, edx
0x408c:	mov	rbx, qword ptr [rsp + 0x48]
0x4091:	test	rbx, rbx
0x4094:	je	0x40c2


0x372d:	cmp	byte ptr [rsp + 0xe], 0
0x3732:	jne	0x412d


0x3b20:	test	al, al
0x3b22:	mov	eax, 4
0x3b27:	cmove	eax, dword ptr [rsp + 8]
0x3b2c:	mov	dword ptr [rsp + 8], eax


0x3494:	mov	qword ptr [rsp + 0x38], r11
0x3499:	mov	byte ptr [rsp + 0x30], r8b
0x349e:	mov	byte ptr [rsp + 0x28], r10b
0x34a3:	call	0x17e0


0x3838:	lea	rax, [rsp + 0xa0]
0x3840:	cmp	r11, -1
0x3844:	mov	qword ptr [rsp + 0xa0], 0
0x3850:	mov	qword ptr [rsp + 0x28], rax
0x3855:	jne	0x3884


0x34f9:	lea	rcx, [rip + 0x3148]
0x3500:	movzx	edx, bl
0x3503:	movsxd	rax, dword ptr [rcx + rdx*4]
0x3507:	add	rax, rcx
0x350a:	jmp	rax


0x3480:	xor	r10d, r10d
0x3483:	nop	dword ptr [rax + rax]
0x3488:	cmp	qword ptr [rsp + 0x58], 1
0x348e:	jne	0x3838


0x30d2:	cmp	rax, 1
0x30d6:	jbe	0x3100


0x3100:	cmp	rbx, r11
0x3103:	mov	byte ptr [rsp + 0x28], r10b
0x3108:	ja	0x36c0


0x40cb:	mov	byte ptr [r14 + r15], 0
0x40d0:	jmp	0x3b69


0x409a:	movzx	ecx, byte ptr [rbx]
0x409d:	mov	rax, rbx
0x40a0:	test	cl, cl
0x40a2:	je	0x40c2


0x3738:	test	r13, r13
0x373b:	sete	al
0x373e:	cmp	qword ptr [rsp + 0x50], 0
0x3744:	setne	dl
0x3747:	and	al, dl
0x3749:	je	0x416c


0x3857:	mov	rdi, qword ptr [rsp + 0x10]
0x385c:	mov	byte ptr [rsp + 0x40], r8b
0x3861:	mov	byte ptr [rsp + 0x38], r10b
0x3866:	mov	qword ptr [rsp + 0x30], r9
0x386b:	call	0x1590


0x3884:	lea	rax, [rsp + 0x9c]
0x388c:	xor	ecx, ecx
0x388e:	mov	byte ptr [rsp + 0x7e], bl
0x3892:	mov	byte ptr [rsp + 0x7d], r8b
0x3897:	mov	rbx, rcx
0x389a:	mov	qword ptr [rsp + 0x88], r9
0x38a2:	mov	qword ptr [rsp + 0x38], rax
0x38a7:	mov	byte ptr [rsp + 0x7f], r10b
0x38ac:	mov	qword ptr [rsp + 0x80], r15
0x38b4:	mov	qword ptr [rsp + 0x40], r14
0x38b9:	mov	qword ptr [rsp + 0x70], r13
0x38be:	mov	qword ptr [rsp + 0x30], r11
0x38c3:	mov	rax, qword ptr [rsp + 0x10]
0x38c8:	lea	r14, [rbp + rbx]
0x38cd:	mov	rdx, qword ptr [rsp + 0x30]
0x38d2:	mov	rcx, qword ptr [rsp + 0x28]
0x38d7:	mov	rdi, qword ptr [rsp + 0x38]
0x38dc:	lea	r13, [rax + r14]
0x38e0:	sub	rdx, r14
0x38e3:	mov	rsi, r13
0x38e6:	call	0x5a50


0x30d8:	mov	byte ptr [rsp + 0x38], r8b
0x30dd:	mov	byte ptr [rsp + 0x30], r10b
0x30e2:	mov	qword ptr [rsp + 0x28], r9
0x30e7:	call	0x1590


0x310e:	mov	rdx, qword ptr [rsp + 0x18]
0x3113:	mov	rsi, qword ptr [rsp + 0x48]
0x3118:	mov	rdi, r9
0x311b:	mov	qword ptr [rsp + 0x40], r11
0x3120:	mov	byte ptr [rsp + 0x38], r8b
0x3125:	mov	qword ptr [rsp + 0x30], r9
0x312a:	call	0x1660


0x36c0:	xor	r10d, r10d
0x36c3:	jmp	0x3160


0x40a4:	mov	rdx, r15
0x40a7:	sub	rax, r15
0x40aa:	cmp	r13, rdx
0x40ad:	jbe	0x40b3


0x416c:	movzx	eax, byte ptr [rsp + 0x7c]
0x4171:	jmp	0x408c


0x374f:	mov	r13, qword ptr [rsp + 0x50]
0x3754:	lea	rbx, [rip + 0x2c62]
0x375b:	mov	byte ptr [r14], 0x27
0x375f:	mov	dword ptr [rsp + 8], 2
0x3767:	mov	r15d, 1
0x376d:	mov	qword ptr [rsp + 0x18], 1
0x3776:	mov	byte ptr [rsp + 0xf], 0
0x377b:	mov	qword ptr [rsp + 0x48], rbx
0x3780:	mov	byte ptr [rsp + 0x7c], al
0x3784:	jmp	0x3063


0x40b3:	add	rdx, 1
0x40b7:	movzx	ecx, byte ptr [rax + rdx]
0x40bb:	test	cl, cl
0x40bd:	jne	0x40aa


0x40af:	mov	byte ptr [r14 + rdx], cl
0x40b3:	add	rdx, 1
0x40b7:	movzx	ecx, byte ptr [rax + rdx]
0x40bb:	test	cl, cl
0x40bd:	jne	0x40aa


0x3063:	xor	r11d, r11d
0x3066:	mov	rax, rbp
0x3069:	mov	r8d, r12d
0x306c:	mov	rbp, r11
0x306f:	mov	r11, rax
0x3072:	nop	word ptr [rax + rax]
0x3078:	cmp	r11, rbp
0x307b:	setne	r12b
0x307f:	cmp	r11, -1
0x3083:	jne	0x3092


0x40bf:	mov	r15, rdx
0x40c2:	cmp	r13, r15
0x40c5:	jbe	0x3b69


0x40aa:	cmp	r13, rdx
0x40ad:	jbe	0x40b3


0x312f:	test	eax, eax
0x3131:	mov	r9, qword ptr [rsp + 0x30]
0x3136:	movzx	r8d, byte ptr [rsp + 0x38]
0x313c:	mov	r11, qword ptr [rsp + 0x40]
0x3141:	jne	0x36c0


0x3147:	cmp	byte ptr [rsp + 0xf], 0
0x314c:	movzx	r10d, byte ptr [rsp + 0x28]
0x3152:	jne	0x40d5


0x40d5:	cmp	dword ptr [rsp + 8], 2
0x40da:	movzx	ebx, byte ptr [rsp + 0xf]
0x40df:	mov	rbp, r11
0x40e2:	sete	al
0x40e5:	mov	byte ptr [rsp + 0xd], bl
0x40e9:	jmp	0x3b19


0x38eb:	test	rax, rax
0x38ee:	mov	r15, rax
0x38f1:	je	0x3941


0x3941:	mov	edx, r12d
0x3944:	mov	rdi, rbx
0x3947:	movzx	r8d, byte ptr [rsp + 0x7d]
0x394d:	xor	edx, 1
0x3950:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3955:	movzx	r10d, byte ptr [rsp + 0x7f]
0x395b:	and	dl, byte ptr [rsp + 0xd]
0x395f:	mov	r15, qword ptr [rsp + 0x80]
0x3967:	mov	r14, qword ptr [rsp + 0x40]
0x396c:	mov	r13, qword ptr [rsp + 0x70]
0x3971:	mov	r11, qword ptr [rsp + 0x30]
0x3976:	cmp	rdi, 1
0x397a:	jbe	0x3f7b


0x38f3:	cmp	rax, -1
0x38f7:	je	0x3f15


0x3f7b:	mov	eax, edx
0x3f7d:	jmp	0x34d7


0x3980:	mov	rcx, rdi
0x3983:	xor	esi, esi
0x3985:	movzx	r9d, byte ptr [rsp + 0xf]
0x398b:	add	rcx, rbp
0x398e:	mov	rdi, qword ptr [rsp + 0x10]
0x3993:	jmp	0x3a4e


0x3f15:	mov	rdi, rbx
0x3f18:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3f1e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3f23:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3f29:	mov	r15, qword ptr [rsp + 0x80]
0x3f31:	xor	r12d, r12d
0x3f34:	mov	r14, qword ptr [rsp + 0x40]
0x3f39:	mov	r13, qword ptr [rsp + 0x70]
0x3f3e:	mov	r11, qword ptr [rsp + 0x30]
0x3f43:	movzx	edx, byte ptr [rsp + 0xd]
0x3f48:	jmp	0x3976


0x38fd:	cmp	rax, -2
0x3901:	je	0x3ea1


0x34d7:	test	al, al
0x34d9:	jne	0x3e71


0x3a4e:	test	dl, dl
0x3a50:	jne	0x39a0


0x3976:	cmp	rdi, 1
0x397a:	jbe	0x3f7b


0x3ea1:	mov	r11, qword ptr [rsp + 0x30]
0x3ea6:	mov	rsi, r14
0x3ea9:	mov	rcx, r13
0x3eac:	mov	rax, rbx
0x3eaf:	mov	rdi, rbx
0x3eb2:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3eb8:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3ebd:	mov	r9, qword ptr [rsp + 0x88]
0x3ec5:	cmp	rsi, r11
0x3ec8:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3ece:	mov	r15, qword ptr [rsp + 0x80]
0x3ed6:	mov	r14, qword ptr [rsp + 0x40]
0x3edb:	mov	r13, qword ptr [rsp + 0x70]
0x3ee0:	jae	0x3f08


0x3907:	cmp	dword ptr [rsp + 8], 2
0x390c:	sete	al
0x390f:	and	al, byte ptr [rsp + 0xf]
0x3913:	jne	0x3ab0


0x34df:	cmp	dword ptr [rsp + 8], 2
0x34e4:	sete	dl
0x34e7:	jmp	0x31b8


0x3e71:	movzx	edx, byte ptr [rsp + 0xd]
0x3e76:	xor	r12d, r12d
0x3e79:	jmp	0x3980


0x3a56:	mov	eax, esi
0x3a58:	xor	eax, 1
0x3a5b:	and	eax, r8d
0x3a5e:	test	r10b, r10b
0x3a61:	je	0x3a71


0x39a0:	cmp	dword ptr [rsp + 8], 2
0x39a5:	sete	al
0x39a8:	test	r9b, r9b
0x39ab:	jne	0x3e60


0x3ee2:	cmp	byte ptr [rcx], 0
0x3ee5:	jne	0x3ef7


0x3f08:	movzx	edx, byte ptr [rsp + 0xd]
0x3f0d:	xor	r12d, r12d
0x3f10:	jmp	0x3976


0x3919:	mov	edi, dword ptr [rsp + 0x9c]
0x3920:	call	0x17d0


0x3ab0:	cmp	r15, 1
0x3ab4:	je	0x3919


0x31b8:	cmp	byte ptr [rsp + 0xd], 1
0x31bd:	jne	0x32d2


0x3a71:	add	rbp, 1
0x3a75:	cmp	rbp, rcx
0x3a78:	jae	0x31fc


0x3a63:	cmp	r13, r15
0x3a66:	jbe	0x3a6d


0x39b1:	mov	esi, r8d
0x39b4:	xor	esi, 1
0x39b7:	and	al, sil
0x39ba:	je	0x39eb


0x3e60:	movzx	ebx, byte ptr [rsp + 0xf]
0x3e65:	mov	rbp, r11
0x3e68:	mov	byte ptr [rsp + 0xd], bl
0x3e6c:	jmp	0x3b19


0x3ee7:	jmp	0x3f08


0x3ef7:	add	rax, 1
0x3efb:	lea	rdx, [rbp + rax]
0x3f00:	cmp	r11, rdx
0x3f03:	ja	0x3ef0


0x3aba:	mov	rdi, qword ptr [rsp + 0x10]
0x3abf:	lea	rcx, [rdi + r15]
0x3ac3:	lea	rdx, [rdi + r14 + 1]
0x3ac8:	lea	r8, [rcx + r14]
0x3acc:	jmp	0x3add


0x31c3:	test	dl, dl
0x31c5:	jne	0x32d2


0x32d2:	cmp	byte ptr [rsp + 0xf], 0
0x32d7:	jne	0x31cb


0x3a7e:	test	al, al
0x3a80:	je	0x3e7e


0x31fc:	test	al, al
0x31fe:	je	0x3220


0x3a6d:	add	r15, 1
0x3a71:	add	rbp, 1
0x3a75:	cmp	rbp, rcx
0x3a78:	jae	0x31fc


0x3a68:	mov	byte ptr [r14 + r15], 0x5c
0x3a6d:	add	r15, 1
0x3a71:	add	rbp, 1
0x3a75:	cmp	rbp, rcx
0x3a78:	jae	0x31fc


0x39eb:	cmp	r13, r15
0x39ee:	jbe	0x39f5


0x39bc:	cmp	r13, r15
0x39bf:	jbe	0x39c6


0x3f05:	mov	rdi, rax
0x3f08:	movzx	edx, byte ptr [rsp + 0xd]
0x3f0d:	xor	r12d, r12d
0x3f10:	jmp	0x3976


0x3ef0:	cmp	byte ptr [r9 + rax], 0
0x3ef5:	je	0x3f05


0x3add:	movzx	ecx, byte ptr [rdx]
0x3ae0:	sub	ecx, 0x5b
0x3ae3:	cmp	cl, 0x21
0x3ae6:	ja	0x3ad0


0x31cb:	mov	rsi, qword ptr [rsp + 0x20]
0x31d0:	test	rsi, rsi
0x31d3:	je	0x31e9


0x32dd:	jmp	0x31e9


0x3e7e:	xor	r10d, r10d
0x3e81:	jmp	0x3a3d


0x3a86:	cmp	r13, r15
0x3a89:	jbe	0x3a90


0x3220:	cmp	r15, r13
0x3223:	jae	0x3229


0x3200:	cmp	r13, r15
0x3203:	jbe	0x320a


0x39f5:	lea	rax, [r15 + 1]
0x39f9:	cmp	r13, rax
0x39fc:	jbe	0x3a0b


0x39f0:	mov	byte ptr [r14 + r15], 0x5c
0x39f5:	lea	rax, [r15 + 1]
0x39f9:	cmp	r13, rax
0x39fc:	jbe	0x3a0b


0x39c6:	lea	rsi, [r15 + 1]
0x39ca:	cmp	r13, rsi
0x39cd:	jbe	0x39d5


0x39c1:	mov	byte ptr [r14 + r15], 0x27
0x39c6:	lea	rsi, [r15 + 1]
0x39ca:	cmp	r13, rsi
0x39cd:	jbe	0x39d5


0x3ae8:	mov	esi, 1
0x3aed:	shl	rsi, cl
0x3af0:	mov	rcx, rsi
0x3af3:	movabs	rsi, 0x20000002b
0x3afd:	test	rcx, rsi
0x3b00:	je	0x3ad0


0x3ad0:	add	rdx, 1
0x3ad4:	cmp	r8, rdx
0x3ad7:	je	0x3919


0x31e9:	test	r10b, r10b
0x31ec:	jne	0x3333


0x31d5:	mov	edx, ebx
0x31d7:	shr	dl, 5
0x31da:	movzx	edx, dl
0x31dd:	mov	edx, dword ptr [rsi + rdx*4]
0x31e0:	bt	edx, ebx
0x31e3:	jb	0x3333


0x3a3d:	cmp	r13, r15
0x3a40:	jbe	0x3a46


0x3a90:	lea	rax, [r15 + 1]
0x3a94:	cmp	r13, rax
0x3a97:	jbe	0x3a9f


0x3a8b:	mov	byte ptr [r14 + r15], 0x27
0x3a90:	lea	rax, [r15 + 1]
0x3a94:	cmp	r13, rax
0x3a97:	jbe	0x3a9f


0x3225:	mov	byte ptr [r14 + r15], bl
0x3229:	movzx	edi, byte ptr [rsp + 0xe]
0x322e:	add	r15, 1
0x3232:	mov	eax, 0
0x3237:	test	r12b, r12b
0x323a:	cmove	edi, eax
0x323d:	mov	byte ptr [rsp + 0xe], dil
0x3242:	jmp	0x3078


0x3229:	movzx	edi, byte ptr [rsp + 0xe]
0x322e:	add	r15, 1
0x3232:	mov	eax, 0
0x3237:	test	r12b, r12b
0x323a:	cmove	edi, eax
0x323d:	mov	byte ptr [rsp + 0xe], dil
0x3242:	jmp	0x3078


0x320a:	lea	rax, [r15 + 1]
0x320e:	cmp	r13, rax
0x3211:	jbe	0x3219


0x3205:	mov	byte ptr [r14 + r15], 0x27
0x320a:	lea	rax, [r15 + 1]
0x320e:	cmp	r13, rax
0x3211:	jbe	0x3219


0x3a0b:	lea	rax, [r15 + 2]
0x3a0f:	cmp	r13, rax
0x3a12:	jbe	0x3a24


0x39fe:	mov	eax, ebx
0x3a00:	shr	al, 6
0x3a03:	add	eax, 0x30
0x3a06:	mov	byte ptr [r14 + r15 + 1], al
0x3a0b:	lea	rax, [r15 + 2]
0x3a0f:	cmp	r13, rax
0x3a12:	jbe	0x3a24


0x39d5:	lea	rsi, [r15 + 2]
0x39d9:	cmp	r13, rsi
0x39dc:	jbe	0x39e4


0x39cf:	mov	byte ptr [r14 + r15 + 1], 0x24
0x39d5:	lea	rsi, [r15 + 2]
0x39d9:	cmp	r13, rsi
0x39dc:	jbe	0x39e4


0x3b02:	mov	r14, qword ptr [rsp + 0x40]
0x3b07:	mov	r13, qword ptr [rsp + 0x70]
0x3b0c:	mov	rbp, qword ptr [rsp + 0x30]
0x3b11:	mov	dword ptr [rsp + 8], 2
0x3b19:	cmp	byte ptr [rsp + 0xd], 0
0x3b1e:	je	0x3b30


0x31f2:	xor	eax, 1
0x31f5:	add	rbp, 1
0x31f9:	and	eax, r8d
0x31fc:	test	al, al
0x31fe:	je	0x3220


0x3333:	cmp	dword ptr [rsp + 8], 2
0x3338:	sete	dl
0x333b:	cmp	byte ptr [rsp + 0xf], 0
0x3340:	mov	eax, edx
0x3342:	jne	0x3b98


0x3a46:	movzx	ebx, byte ptr [rdi + rbp]
0x3a4a:	add	r15, 1
0x3a4e:	test	dl, dl
0x3a50:	jne	0x39a0


0x3a42:	mov	byte ptr [r14 + r15], bl
0x3a46:	movzx	ebx, byte ptr [rdi + rbp]
0x3a4a:	add	r15, 1
0x3a4e:	test	dl, dl
0x3a50:	jne	0x39a0


0x3a9f:	add	r15, 2
0x3aa3:	xor	r10d, r10d
0x3aa6:	xor	r8d, r8d
0x3aa9:	jmp	0x3a3d


0x3a99:	mov	byte ptr [r14 + r15 + 1], 0x27
0x3a9f:	add	r15, 2
0x3aa3:	xor	r10d, r10d
0x3aa6:	xor	r8d, r8d
0x3aa9:	jmp	0x3a3d


0x3078:	cmp	r11, rbp
0x307b:	setne	r12b
0x307f:	cmp	r11, -1
0x3083:	jne	0x3092


0x3219:	add	r15, 2
0x321d:	xor	r8d, r8d
0x3220:	cmp	r15, r13
0x3223:	jae	0x3229


0x3213:	mov	byte ptr [r14 + r15 + 1], 0x27
0x3219:	add	r15, 2
0x321d:	xor	r8d, r8d
0x3220:	cmp	r15, r13
0x3223:	jae	0x3229


0x3a24:	and	ebx, 7
0x3a27:	add	rbp, 1
0x3a2b:	add	r15, 3
0x3a2f:	add	ebx, 0x30
0x3a32:	cmp	rbp, rcx
0x3a35:	jae	0x3220


0x3a14:	mov	eax, ebx
0x3a16:	shr	al, 3
0x3a19:	and	eax, 7
0x3a1c:	add	eax, 0x30
0x3a1f:	mov	byte ptr [r14 + r15 + 2], al
0x3a24:	and	ebx, 7
0x3a27:	add	rbp, 1
0x3a2b:	add	r15, 3
0x3a2f:	add	ebx, 0x30
0x3a32:	cmp	rbp, rcx
0x3a35:	jae	0x3220


0x39e4:	add	r15, 3
0x39e8:	mov	r8d, eax
0x39eb:	cmp	r13, r15
0x39ee:	jbe	0x39f5


0x39de:	mov	byte ptr [r14 + r15 + 2], 0x27
0x39e4:	add	r15, 3
0x39e8:	mov	r8d, eax
0x39eb:	cmp	r13, r15
0x39ee:	jbe	0x39f5


0x3348:	mov	eax, r8d
0x334b:	xor	eax, 1
0x334e:	and	al, dl
0x3350:	je	0x3381


0x3b98:	mov	rbp, r11
0x3b9b:	jmp	0x3b19


0x3a3b:	mov	esi, edx
0x3a3d:	cmp	r13, r15
0x3a40:	jbe	0x3a46


0x3381:	cmp	r13, r15
0x3384:	jbe	0x338b


0x3352:	cmp	r13, r15
0x3355:	jbe	0x335c


0x338b:	add	r15, 1
0x338f:	add	rbp, 1
0x3393:	jmp	0x3220


0x3386:	mov	byte ptr [r14 + r15], 0x5c
0x338b:	add	r15, 1
0x338f:	add	rbp, 1
0x3393:	jmp	0x3220


0x335c:	lea	rdx, [r15 + 1]
0x3360:	cmp	r13, rdx
0x3363:	jbe	0x336b


0x3357:	mov	byte ptr [r14 + r15], 0x27
0x335c:	lea	rdx, [r15 + 1]
0x3360:	cmp	r13, rdx
0x3363:	jbe	0x336b


0x336b:	lea	rdx, [r15 + 2]
0x336f:	cmp	r13, rdx
0x3372:	jbe	0x337a


0x3365:	mov	byte ptr [r14 + r15 + 1], 0x24
0x336b:	lea	rdx, [r15 + 2]
0x336f:	cmp	r13, rdx
0x3372:	jbe	0x337a


0x337a:	add	r15, 3
0x337e:	mov	r8d, eax
0x3381:	cmp	r13, r15
0x3384:	jbe	0x338b


0x3374:	mov	byte ptr [r14 + r15 + 2], 0x27
0x337a:	add	r15, 3
0x337e:	mov	r8d, eax
0x3381:	cmp	r13, r15
0x3384:	jbe	0x338b


0x3925:	mov	rdi, qword ptr [rsp + 0x28]
0x392a:	test	eax, eax
0x392c:	mov	eax, 0
0x3931:	cmove	r12d, eax
0x3935:	add	rbx, r15
0x3938:	call	0x17c0


0x393d:	test	eax, eax
0x393f:	je	0x38c3


0x38c3:	mov	rax, qword ptr [rsp + 0x10]
0x38c8:	lea	r14, [rbp + rbx]
0x38cd:	mov	rdx, qword ptr [rsp + 0x30]
0x38d2:	mov	rcx, qword ptr [rsp + 0x28]
0x38d7:	mov	rdi, qword ptr [rsp + 0x38]
0x38dc:	lea	r13, [rax + r14]
0x38e0:	sub	rdx, r14
0x38e3:	mov	rsi, r13
0x38e6:	call	0x5a50


0x30ec:	movzx	r8d, byte ptr [rsp + 0x38]
0x30f2:	movzx	r10d, byte ptr [rsp + 0x30]
0x30f8:	mov	r11, rax
0x30fb:	mov	r9, qword ptr [rsp + 0x28]
0x3100:	cmp	rbx, r11
0x3103:	mov	byte ptr [rsp + 0x28], r10b
0x3108:	ja	0x36c0


0x3870:	movzx	r8d, byte ptr [rsp + 0x40]
0x3876:	movzx	r10d, byte ptr [rsp + 0x38]
0x387c:	mov	r11, rax
0x387f:	mov	r9, qword ptr [rsp + 0x30]
0x3884:	lea	rax, [rsp + 0x9c]
0x388c:	xor	ecx, ecx
0x388e:	mov	byte ptr [rsp + 0x7e], bl
0x3892:	mov	byte ptr [rsp + 0x7d], r8b
0x3897:	mov	rbx, rcx
0x389a:	mov	qword ptr [rsp + 0x88], r9
0x38a2:	mov	qword ptr [rsp + 0x38], rax
0x38a7:	mov	byte ptr [rsp + 0x7f], r10b
0x38ac:	mov	qword ptr [rsp + 0x80], r15
0x38b4:	mov	qword ptr [rsp + 0x40], r14
0x38b9:	mov	qword ptr [rsp + 0x70], r13
0x38be:	mov	qword ptr [rsp + 0x30], r11
0x38c3:	mov	rax, qword ptr [rsp + 0x10]
0x38c8:	lea	r14, [rbp + rbx]
0x38cd:	mov	rdx, qword ptr [rsp + 0x30]
0x38d2:	mov	rcx, qword ptr [rsp + 0x28]
0x38d7:	mov	rdi, qword ptr [rsp + 0x38]
0x38dc:	lea	r13, [rax + r14]
0x38e0:	sub	rdx, r14
0x38e3:	mov	rsi, r13
0x38e6:	call	0x5a50


0x34a8:	mov	rcx, qword ptr [rax]
0x34ab:	movzx	edx, bl
0x34ae:	movzx	r10d, byte ptr [rsp + 0x28]
0x34b4:	movzx	r8d, byte ptr [rsp + 0x30]
0x34ba:	mov	r11, qword ptr [rsp + 0x38]
0x34bf:	mov	edi, 1
0x34c4:	movzx	eax, word ptr [rcx + rdx*2]
0x34c8:	and	ax, 0x4000
0x34cc:	setne	r12b
0x34d0:	sete	al
0x34d3:	and	al, byte ptr [rsp + 0xd]
0x34d7:	test	al, al
0x34d9:	jne	0x3e71


0x3180:	xor	r10d, r10d
0x3183:	cmp	r11, 1
0x3187:	setne	al
0x318a:	cmp	r11, -1
0x318e:	jne	0x319c


0x3190:	mov	rax, qword ptr [rsp + 0x10]
0x3195:	cmp	byte ptr [rax + 1], 0
0x3199:	setne	al
0x319c:	cmp	dword ptr [rsp + 8], 2
0x31a1:	sete	dl
0x31a4:	test	al, al
0x31a6:	je	0x33f8


0x319c:	cmp	dword ptr [rsp + 8], 2
0x31a1:	sete	dl
0x31a4:	test	al, al
0x31a6:	je	0x33f8


0x33f8:	test	rbp, rbp
0x33fb:	jne	0x31ac


0x31ac:	xor	r12d, r12d
0x31af:	xor	eax, eax
0x31b1:	nop	dword ptr [rax]
0x31b8:	cmp	byte ptr [rsp + 0xd], 1
0x31bd:	jne	0x32d2


0x3401:	movzx	eax, byte ptr [rsp + 0xf]
0x3406:	and	al, dl
0x3408:	je	0x31b8


0x340e:	mov	rbp, r11
0x3411:	mov	dword ptr [rsp + 8], 2
0x3419:	jmp	0x3b19


0x3818:	cmp	byte ptr [rsp + 0xf], 0
0x381d:	jne	0x4040


0x3260:	cmp	eax, 5
0x3263:	je	0x37d8


0x3823:	xor	r12d, r12d
0x3826:	xor	eax, eax
0x3828:	mov	ebx, 0x3f
0x382d:	jmp	0x31e9


0x4040:	mov	rbp, r11
0x4043:	movzx	eax, byte ptr [rsp + 0xf]
0x4048:	jmp	0x3b19


0x37d8:	test	byte ptr [rsp + 0x78], 4
0x37dd:	je	0x3800


0x3269:	cmp	eax, 2
0x326c:	mov	ebx, 0x3f
0x3271:	sete	dl
0x3274:	xor	r12d, r12d
0x3277:	xor	eax, eax
0x3279:	jmp	0x31b8


0x3800:	xor	edx, edx
0x3802:	xor	r12d, r12d
0x3805:	xor	eax, eax
0x3807:	mov	ebx, 0x3f
0x380c:	jmp	0x31b8


0x37df:	lea	rcx, [rbp + 2]
0x37e3:	cmp	rcx, r11
0x37e6:	jae	0x3800


0x37e8:	mov	rax, qword ptr [rsp + 0x10]
0x37ed:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x37f2:	je	0x3f82


0x3f82:	movzx	ebx, byte ptr [rax + rcx]
0x3f86:	cmp	bl, 0x3e
0x3f89:	ja	0x3800


0x3f8f:	movabs	rax, 0x7000a38200000000
0x3f99:	bt	rax, rbx
0x3f9d:	jae	0x3800


0x3fa3:	cmp	byte ptr [rsp + 0xf], 0
0x3fa8:	jne	0x4192


0x3fae:	cmp	r13, r15
0x3fb1:	jbe	0x3fb8


0x4192:	mov	rbp, r11
0x4195:	jmp	0x3b30


0x3fb8:	lea	rax, [r15 + 1]
0x3fbc:	cmp	r13, rax
0x3fbf:	jbe	0x3fc7


0x3fb3:	mov	byte ptr [r14 + r15], 0x3f
0x3fb8:	lea	rax, [r15 + 1]
0x3fbc:	cmp	r13, rax
0x3fbf:	jbe	0x3fc7


0x3fc7:	lea	rax, [r15 + 2]
0x3fcb:	cmp	r13, rax
0x3fce:	jbe	0x3fd6


0x3fc1:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3fc7:	lea	rax, [r15 + 2]
0x3fcb:	cmp	r13, rax
0x3fce:	jbe	0x3fd6


0x3fd6:	lea	rax, [r15 + 3]
0x3fda:	cmp	r13, rax
0x3fdd:	jbe	0x3fe5


0x3fd0:	mov	byte ptr [r14 + r15 + 2], 0x22
0x3fd6:	lea	rax, [r15 + 3]
0x3fda:	cmp	r13, rax
0x3fdd:	jbe	0x3fe5


0x3fe5:	add	r15, 4
0x3fe9:	xor	edx, edx
0x3feb:	xor	r12d, r12d
0x3fee:	xor	eax, eax
0x3ff0:	mov	rbp, rcx
0x3ff3:	jmp	0x31b8


0x3fdf:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x3fe5:	add	r15, 4
0x3fe9:	xor	edx, edx
0x3feb:	xor	r12d, r12d
0x3fee:	xor	eax, eax
0x3ff0:	mov	rbp, rcx
0x3ff3:	jmp	0x31b8


0x3790:	cmp	byte ptr [rsp + 0xf], 0
0x3795:	jne	0x4040


0x328e:	mov	byte ptr [rsp + 0x7c], r12b
0x3293:	xor	edx, edx
0x3295:	xor	eax, eax
0x3297:	mov	ebx, 0x27
0x329c:	jmp	0x31b8


0x379b:	test	r13, r13
0x379e:	je	0x3ba0


0x3ba0:	cmp	r13, r15
0x3ba3:	jbe	0x3baa


0x37a4:	xor	edx, edx
0x37a6:	cmp	qword ptr [rsp + 0x50], 0
0x37ac:	jne	0x3ba0


0x3baa:	lea	rax, [r15 + 1]
0x3bae:	cmp	r13, rax
0x3bb1:	jbe	0x3bb9


0x3ba5:	mov	byte ptr [r14 + r15], 0x27
0x3baa:	lea	rax, [r15 + 1]
0x3bae:	cmp	r13, rax
0x3bb1:	jbe	0x3bb9


0x37b2:	mov	qword ptr [rsp + 0x50], r13
0x37b7:	add	r15, 3
0x37bb:	xor	eax, eax
0x37bd:	mov	byte ptr [rsp + 0x7c], r12b
0x37c2:	xor	r8d, r8d
0x37c5:	mov	r13, rdx
0x37c8:	mov	ebx, 0x27
0x37cd:	jmp	0x31e9


0x3bb9:	lea	rax, [r15 + 2]
0x3bbd:	cmp	r13, rax
0x3bc0:	jbe	0x41b2


0x3bb3:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x3bb9:	lea	rax, [r15 + 2]
0x3bbd:	cmp	r13, rax
0x3bc0:	jbe	0x41b2


0x41b2:	mov	rdx, r13
0x41b5:	mov	r13, qword ptr [rsp + 0x50]
0x41ba:	jmp	0x37b2


0x3bc6:	mov	rdx, r13
0x3bc9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3bcf:	mov	r13, qword ptr [rsp + 0x50]
0x3bd4:	jmp	0x37b2


0x32c4:	cmp	byte ptr [rsp + 0xd], 0
0x32c9:	jne	0x3330


0x32cb:	mov	ebx, edx
0x32cd:	xor	r12d, r12d
0x32d0:	xor	eax, eax
0x32d2:	cmp	byte ptr [rsp + 0xf], 0
0x32d7:	jne	0x31cb


0x3330:	xor	r12d, r12d
0x3333:	cmp	dword ptr [rsp + 8], 2
0x3338:	sete	dl
0x333b:	cmp	byte ptr [rsp + 0xf], 0
0x3340:	mov	eax, edx
0x3342:	jne	0x3b98


0x36d0:	cmp	byte ptr [rsp + 0xf], 0
0x36d5:	jne	0x4040


0x3303:	cmp	byte ptr [rsp + 0xd], 0
0x3308:	je	0x3520


0x36db:	add	rbp, 1
0x36df:	mov	eax, r8d
0x36e2:	xor	r12d, r12d
0x36e5:	mov	ebx, 0x5c
0x36ea:	jmp	0x31fc


0x3520:	mov	edx, 0x5c
0x3525:	mov	ebx, 0x5c
0x352a:	jmp	0x32c4


0x330e:	cmp	byte ptr [rsp + 0xf], 0
0x3313:	je	0x3520


0x3319:	cmp	qword ptr [rsp + 0x18], 0
0x331f:	jne	0x36db


0x3325:	mov	ebx, 0x5c
0x332a:	nop	word ptr [rax + rax]
0x3330:	xor	r12d, r12d
0x3333:	cmp	dword ptr [rsp + 8], 2
0x3338:	sete	dl
0x333b:	cmp	byte ptr [rsp + 0xf], 0
0x3340:	mov	eax, edx
0x3342:	jne	0x3b98


0x33ab:	xor	edx, edx
0x33ad:	test	byte ptr [rsp + 0x78], 1
0x33b2:	je	0x32cb


0x3573:	cmp	dword ptr [rsp + 8], 2
0x3578:	sete	dl
0x357b:	cmp	byte ptr [rsp + 0xf], 0
0x3580:	jne	0x411a


0x33b8:	add	rbp, 1
0x33bc:	jmp	0x3078


0x3586:	mov	eax, r8d
0x3589:	mov	rcx, r15
0x358c:	xor	eax, 1
0x358f:	and	al, dl
0x3591:	je	0x35c0


0x411a:	movzx	ebx, byte ptr [rsp + 0xf]
0x411f:	mov	rbp, r11
0x4122:	mov	eax, edx
0x4124:	mov	byte ptr [rsp + 0xd], bl
0x4128:	jmp	0x3b19


0x35c0:	cmp	r13, rcx
0x35c3:	jbe	0x35ca


0x3593:	cmp	r13, r15
0x3596:	jbe	0x359d


0x35ca:	cmp	dword ptr [rsp + 8], 2
0x35cf:	lea	r15, [rcx + 1]
0x35d3:	je	0x3bd9


0x35c5:	mov	byte ptr [r14 + rcx], 0x5c
0x35ca:	cmp	dword ptr [rsp + 8], 2
0x35cf:	lea	r15, [rcx + 1]
0x35d3:	je	0x3bd9


0x359d:	lea	rcx, [r15 + 1]
0x35a1:	cmp	r13, rcx
0x35a4:	jbe	0x35ac


0x3598:	mov	byte ptr [r14 + r15], 0x27
0x359d:	lea	rcx, [r15 + 1]
0x35a1:	cmp	r13, rcx
0x35a4:	jbe	0x35ac


0x3bd9:	mov	eax, r12d
0x3bdc:	mov	ebx, 0x30
0x3be1:	xor	r12d, r12d
0x3be4:	jmp	0x31e9


0x35d9:	lea	rax, [rbp + 1]
0x35dd:	cmp	rax, r11
0x35e0:	jae	0x35fb


0x35ac:	lea	rcx, [r15 + 2]
0x35b0:	cmp	r13, rcx
0x35b3:	ja	0x3be9


0x35a6:	mov	byte ptr [r14 + r15 + 1], 0x24
0x35ac:	lea	rcx, [r15 + 2]
0x35b0:	cmp	r13, rcx
0x35b3:	ja	0x3be9


0x35e2:	mov	rax, qword ptr [rsp + 0x10]
0x35e7:	movzx	eax, byte ptr [rax + rbp + 1]
0x35ec:	mov	byte ptr [rsp + 0x28], al
0x35f0:	sub	eax, 0x30
0x35f3:	cmp	al, 9
0x35f5:	jbe	0x3e29


0x35fb:	mov	eax, r12d
0x35fe:	mov	ebx, 0x30
0x3603:	xor	r12d, r12d
0x3606:	jmp	0x31b8


0x35b9:	lea	rcx, [r15 + 3]
0x35bd:	mov	r8d, eax
0x35c0:	cmp	r13, rcx
0x35c3:	jbe	0x35ca


0x3be9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3bef:	jmp	0x35b9


0x3e29:	cmp	r13, r15
0x3e2c:	jbe	0x3e33


0x3e33:	lea	rax, [rcx + 2]
0x3e37:	cmp	r13, rax
0x3e3a:	jbe	0x3e42


0x3e2e:	mov	byte ptr [r14 + r15], 0x30
0x3e33:	lea	rax, [rcx + 2]
0x3e37:	cmp	r13, rax
0x3e3a:	jbe	0x3e42


0x3e42:	mov	eax, r12d
0x3e45:	lea	r15, [rcx + 3]
0x3e49:	xor	r12d, r12d
0x3e4c:	mov	ebx, 0x30
0x3e51:	jmp	0x31b8


0x3e3c:	mov	byte ptr [r14 + rcx + 2], 0x30
0x3e42:	mov	eax, r12d
0x3e45:	lea	r15, [rcx + 3]
0x3e49:	xor	r12d, r12d
0x3e4c:	mov	ebx, 0x30
0x3e51:	jmp	0x31b8


0x32b2:	cmp	dword ptr [rsp + 8], 2
0x32b7:	sete	al
0x32ba:	and	al, byte ptr [rsp + 0xf]
0x32be:	jne	0x340e


0x3670:	mov	edx, 0xd
0x3675:	xor	r10d, r10d
0x3678:	mov	ebx, 0x72
0x367d:	jmp	0x32b2


0x3bf4:	test	ebx, ebx
0x3bf6:	jne	0x3023


0x3bfc:	mov	byte ptr [rsp + 0xd], 1
0x3c01:	test	r13, r13
0x3c04:	jne	0x419a


0x3c0a:	lea	rax, [rip + 0x27ac]
0x3c11:	mov	qword ptr [rsp + 0x50], 0
0x3c1a:	mov	byte ptr [rsp + 0xe], 1
0x3c1f:	mov	byte ptr [rsp + 0x7c], 0
0x3c24:	xor	r12d, r12d
0x3c27:	mov	byte ptr [rsp + 0xf], 0
0x3c2c:	mov	qword ptr [rsp + 0x18], 1
0x3c35:	mov	qword ptr [rsp + 0x48], rax
0x3c3a:	mov	r15d, 1
0x3c40:	mov	dword ptr [rsp + 8], 2
0x3c48:	jmp	0x3063


0x419a:	mov	byte ptr [rsp + 0xe], 1
0x419f:	xor	eax, eax
0x41a1:	xor	r12d, r12d
0x41a4:	mov	qword ptr [rsp + 0x50], 0
0x41ad:	jmp	0x3754


0x3754:	lea	rbx, [rip + 0x2c62]
0x375b:	mov	byte ptr [r14], 0x27
0x375f:	mov	dword ptr [rsp + 8], 2
0x3767:	mov	r15d, 1
0x376d:	mov	qword ptr [rsp + 0x18], 1
0x3776:	mov	byte ptr [rsp + 0xf], 0
0x377b:	mov	qword ptr [rsp + 0x48], rbx
0x3780:	mov	byte ptr [rsp + 0x7c], al
0x3784:	jmp	0x3063


0x3c58:	test	r13, r13
0x3c5b:	je	0x3e86


0x404d:	lea	rax, [rip + 0x2367]
0x4054:	mov	byte ptr [rsp + 0xe], 1
0x4059:	mov	byte ptr [rsp + 0x7c], 0
0x405e:	xor	r12d, r12d
0x4061:	mov	qword ptr [rsp + 0x50], 0
0x406a:	mov	byte ptr [rsp + 0xf], 1
0x406f:	mov	byte ptr [rsp + 0xd], 1
0x4074:	mov	qword ptr [rsp + 0x18], 1
0x407d:	xor	r15d, r15d
0x4080:	mov	qword ptr [rsp + 0x48], rax
0x4085:	jmp	0x3063


0x3e86:	mov	qword ptr [rsp + 0x50], 0
0x3e8f:	mov	byte ptr [rsp + 0xe], 1
0x3e94:	xor	r12d, r12d
0x3e97:	mov	byte ptr [rsp + 0x7c], 0
0x3e9c:	jmp	0x3c7b


0x3c61:	mov	byte ptr [r14], 0x22
0x3c65:	mov	byte ptr [rsp + 0xe], 1
0x3c6a:	xor	r12d, r12d
0x3c6d:	mov	byte ptr [rsp + 0x7c], 0
0x3c72:	mov	qword ptr [rsp + 0x50], 0
0x3c7b:	lea	rax, [rip + 0x2739]
0x3c82:	mov	byte ptr [rsp + 0xf], 0
0x3c87:	mov	byte ptr [rsp + 0xd], 1
0x3c8c:	mov	qword ptr [rsp + 0x18], 1
0x3c95:	mov	r15d, 1
0x3c9b:	mov	qword ptr [rsp + 0x48], rax
0x3ca0:	jmp	0x3063


0x3c7b:	lea	rax, [rip + 0x2739]
0x3c82:	mov	byte ptr [rsp + 0xf], 0
0x3c87:	mov	byte ptr [rsp + 0xd], 1
0x3c8c:	mov	qword ptr [rsp + 0x18], 1
0x3c95:	mov	r15d, 1
0x3c9b:	mov	qword ptr [rsp + 0x48], rax
0x3ca0:	jmp	0x3063


0x3ca5:	lea	rax, [rip + 0x270f]
0x3cac:	mov	byte ptr [rsp + 0xe], 1
0x3cb1:	mov	byte ptr [rsp + 0x7c], 0
0x3cb6:	xor	r12d, r12d
0x3cb9:	mov	qword ptr [rsp + 0x50], 0
0x3cc2:	mov	byte ptr [rsp + 0xf], 1
0x3cc7:	mov	byte ptr [rsp + 0xd], 1
0x3ccc:	mov	qword ptr [rsp + 0x18], 1
0x3cd5:	xor	r15d, r15d
0x3cd8:	mov	qword ptr [rsp + 0x48], rax
0x3cdd:	mov	dword ptr [rsp + 8], 5
0x3ce5:	jmp	0x3063


0x3cea:	mov	byte ptr [rsp + 0xe], 1
0x3cef:	mov	byte ptr [rsp + 0x7c], 0
0x3cf4:	xor	r12d, r12d
0x3cf7:	mov	qword ptr [rsp + 0x50], 0
0x3d00:	mov	byte ptr [rsp + 0xf], 0
0x3d05:	xor	r15d, r15d
0x3d08:	mov	byte ptr [rsp + 0xd], 1
0x3d0d:	mov	qword ptr [rsp + 0x18], 0
0x3d16:	mov	qword ptr [rsp + 0x48], 0
0x3d1f:	jmp	0x3063


0x3d24:	cmp	dword ptr [rsp + 8], 0xa
0x3d29:	je	0x3d81


0x3d81:	xor	r15d, r15d
0x3d84:	test	ebx, ebx
0x3d86:	je	0x3f4d


0x3d2b:	lea	rsi, [rip + 0x268d]
0x3d32:	xor	edi, edi
0x3d34:	mov	edx, 5
0x3d39:	call	0x1570


0x3f4d:	mov	rdx, qword ptr [rsp + 0x68]
0x3f52:	movzx	eax, byte ptr [rdx]
0x3f55:	test	al, al
0x3f57:	je	0x3d8c


0x3d8c:	test	ebx, ebx
0x3d8e:	mov	rbx, qword ptr [rsp + 0x60]
0x3d93:	setne	byte ptr [rsp + 0xf]
0x3d98:	xor	r12d, r12d
0x3d9b:	mov	rdi, rbx
0x3d9e:	call	0x1590


0x3f69:	add	r15, 1
0x3f6d:	movzx	eax, byte ptr [rdx + r15]
0x3f72:	test	al, al
0x3f74:	jne	0x3f60


0x3f65:	mov	byte ptr [r14 + r15], al
0x3f69:	add	r15, 1
0x3f6d:	movzx	eax, byte ptr [rdx + r15]
0x3f72:	test	al, al
0x3f74:	jne	0x3f60


0x3f76:	jmp	0x3d8c


0x3f60:	cmp	r13, r15
0x3f63:	jbe	0x3f69


0x3da3:	mov	qword ptr [rsp + 0x48], rbx
0x3da8:	mov	qword ptr [rsp + 0x18], rax
0x3dad:	mov	byte ptr [rsp + 0xe], 1
0x3db2:	mov	byte ptr [rsp + 0x7c], 0
0x3db7:	mov	qword ptr [rsp + 0x50], 0
0x3dc0:	mov	byte ptr [rsp + 0xd], 1
0x3dc5:	jmp	0x3063


0x3d3e:	mov	rcx, rax
0x3d41:	mov	qword ptr [rsp + 0x68], rax
0x3d46:	lea	rax, [rip + 0x2672]
0x3d4d:	cmp	rcx, rax
0x3d50:	je	0x40ee


0x40ee:	mov	esi, dword ptr [rsp + 8]
0x40f2:	mov	rdi, rcx
0x40f5:	call	0x2ea0


0x3d56:	lea	rsi, [rip + 0x2660]
0x3d5d:	xor	edi, edi
0x3d5f:	mov	edx, 5
0x3d64:	call	0x1570


0x3d69:	mov	rcx, rax
0x3d6c:	mov	qword ptr [rsp + 0x60], rax
0x3d71:	lea	rax, [rip + 0x2645]
0x3d78:	cmp	rcx, rax
0x3d7b:	je	0x4104


0x4104:	mov	esi, dword ptr [rsp + 8]
0x4108:	mov	rdi, rcx
0x410b:	call	0x2ea0


0x4110:	mov	qword ptr [rsp + 0x60], rax
0x4115:	jmp	0x3d81


0x40fa:	mov	qword ptr [rsp + 0x68], rax
0x40ff:	jmp	0x3d56


0x3dca:	mov	byte ptr [rsp + 0xe], 1
0x3dcf:	mov	byte ptr [rsp + 0x7c], 0
0x3dd4:	xor	r12d, r12d
0x3dd7:	mov	qword ptr [rsp + 0x50], 0
0x3de0:	mov	byte ptr [rsp + 0xf], 0
0x3de5:	xor	r15d, r15d
0x3de8:	mov	byte ptr [rsp + 0xd], 0
0x3ded:	mov	qword ptr [rsp + 0x18], 0
0x3df6:	mov	qword ptr [rsp + 0x48], 0
0x3dff:	jmp	0x3063


0x3e04:	mov	byte ptr [rsp + 0xe], 1
0x3e09:	mov	byte ptr [rsp + 0x7c], 0
0x3e0e:	xor	r12d, r12d
0x3e11:	mov	qword ptr [rsp + 0x50], 0
0x3e1a:	mov	byte ptr [rsp + 0xf], 1
0x3e1f:	mov	byte ptr [rsp + 0xd], 1
0x3e24:	jmp	0x3043


0x3043:	lea	rax, [rip + 0x3373]
0x304a:	mov	qword ptr [rsp + 0x18], 1
0x3053:	xor	r15d, r15d
0x3056:	mov	dword ptr [rsp + 8], 2
0x305e:	mov	qword ptr [rsp + 0x48], rax
0x3063:	xor	r11d, r11d
0x3066:	mov	rax, rbp
0x3069:	mov	r8d, r12d
0x306c:	mov	rbp, r11
0x306f:	mov	r11, rax
0x3072:	nop	word ptr [rax + rax]
0x3078:	cmp	r11, rbp
0x307b:	setne	r12b
0x307f:	cmp	r11, -1
0x3083:	jne	0x3092


0x3ff8:	test	ebx, ebx
0x3ffa:	je	0x4188


0x4188:	mov	byte ptr [rsp + 0xd], 0
0x418d:	jmp	0x3c01


0x4000:	lea	rax, [rip + 0x23b6]
0x4007:	mov	byte ptr [rsp + 0xe], 1
0x400c:	mov	byte ptr [rsp + 0x7c], 0
0x4011:	xor	r12d, r12d
0x4014:	mov	qword ptr [rsp + 0x50], 0
0x401d:	mov	byte ptr [rsp + 0xf], 1
0x4022:	mov	byte ptr [rsp + 0xd], 0
0x4027:	mov	qword ptr [rsp + 0x18], 1
0x4030:	xor	r15d, r15d
0x4033:	mov	qword ptr [rsp + 0x48], rax
0x4038:	jmp	0x3063


0x3c01:	test	r13, r13
0x3c04:	jne	0x419a


0x41c4:	nop	
0x41c6:	nop	word ptr cs:[rax + rax]


0x437b:	nop	dword ptr [rax + rax]


0x43b6:	nop	word ptr cs:[rax + rax]


0x43d1:	nop	dword ptr [rax + rax]
0x43d6:	nop	word ptr cs:[rax + rax]


0x43f1:	nop	dword ptr [rax + rax]
0x43f6:	nop	word ptr cs:[rax + rax]


0x4435:	nop	
0x4436:	nop	word ptr cs:[rax + rax]


0x4455:	nop	
0x4456:	nop	word ptr cs:[rax + rax]


0x4504:	nop	
0x4506:	nop	word ptr cs:[rax + rax]


0x45f3:	nop	dword ptr [rax]
0x45f6:	nop	word ptr cs:[rax + rax]


0x460a:	nop	word ptr [rax + rax]


0x46a3:	nop	dword ptr [rax]
0x46a6:	nop	word ptr cs:[rax + rax]


0x46c3:	nop	dword ptr [rax]
0x46c6:	nop	word ptr cs:[rax + rax]


0x46dc:	nop	dword ptr [rax]


0x46f8:	nop	dword ptr [rax + rax]


0x4714:	nop	
0x4716:	nop	word ptr cs:[rax + rax]


0x47ae:	nop	


0x483a:	nop	word ptr [rax + rax]


0x484c:	nop	dword ptr [rax]


0x485f:	nop	


0x48f8:	nop	dword ptr [rax + rax]


0x4921:	nop	dword ptr [rax + rax]
0x4926:	nop	word ptr cs:[rax + rax]


0x493a:	nop	word ptr [rax + rax]


0x49ce:	nop	


0x4a61:	nop	dword ptr [rax + rax]
0x4a66:	nop	word ptr cs:[rax + rax]


0x4a7c:	nop	dword ptr [rax]


0x4a97:	nop	word ptr [rax + rax]


0x4ab3:	nop	dword ptr [rax]
0x4ab6:	nop	word ptr cs:[rax + rax]


0x4acc:	nop	dword ptr [rax]


0x4ae4:	nop	
0x4ae6:	nop	word ptr cs:[rax + rax]


0x4b03:	nop	dword ptr [rax]
0x4b06:	nop	word ptr cs:[rax + rax]


0x4b28:	nop	dword ptr [rax + rax]


0x4f47:	nop	word ptr [rax + rax]


0x4fe8:	nop	dword ptr [rax + rax]


0x50c5:	nop	
0x50c6:	nop	word ptr cs:[rax + rax]


0x516a:	nop	word ptr [rax + rax]


0x5194:	nop	
0x5196:	nop	word ptr cs:[rax + rax]


0x51a2:	nop	dword ptr [rax]
0x51a6:	nop	word ptr cs:[rax + rax]


0x51e6:	nop	word ptr cs:[rax + rax]


0x5214:	nop	
0x5216:	nop	word ptr cs:[rax + rax]


0x52a2:	nop	dword ptr [rax]
0x52a6:	nop	word ptr cs:[rax + rax]


0x52fa:	nop	word ptr [rax + rax]


0x5317:	nop	word ptr [rax + rax]


0x534e:	nop	


0x5378:	nop	dword ptr [rax + rax]


0x5393:	nop	word ptr cs:[rax + rax]
0x539d:	nop	dword ptr [rax]


0x53d5:	nop	word ptr cs:[rax + rax]
0x53df:	nop	


0x5501:	nop	word ptr cs:[rax + rax]
0x550b:	nop	dword ptr [rax + rax]


0x56e8:	mov	rax, rbx
0x56eb:	mul	rsi
0x56ee:	jo	0x58e1


0x58e1:	or	rax, 0xffffffffffffffff
0x58e5:	mov	r8d, 1
0x58eb:	jmp	0x56f7


0x56f4:	xor	r8d, r8d
0x56f7:	mul	rsi
0x56fa:	jo	0x58d2


0x56f7:	mul	rsi
0x56fa:	jo	0x58d2


0x58d2:	mov	r8d, 1
0x58d8:	or	rbx, 0xffffffffffffffff
0x58dc:	jmp	0x5703


0x5700:	mov	rbx, rax
0x5703:	or	ebp, r8d
0x5706:	nop	word ptr cs:[rax + rax]
0x5710:	movsxd	rdi, edi
0x5713:	mov	eax, ebp
0x5715:	add	rcx, rdi
0x5718:	or	eax, 2
0x571b:	mov	qword ptr [r15], rcx
0x571e:	cmp	byte ptr [rcx], 0
0x5721:	mov	qword ptr [r14], rbx
0x5724:	cmovne	ebp, eax
0x5727:	jmp	0x55ed


0x5703:	or	ebp, r8d
0x5706:	nop	word ptr cs:[rax + rax]
0x5710:	movsxd	rdi, edi
0x5713:	mov	eax, ebp
0x5715:	add	rcx, rdi
0x5718:	or	eax, 2
0x571b:	mov	qword ptr [r15], rcx
0x571e:	cmp	byte ptr [rcx], 0
0x5721:	mov	qword ptr [r14], rbx
0x5724:	cmovne	ebp, eax
0x5727:	jmp	0x55ed


0x5737:	mov	edx, 2
0x573c:	mov	rax, rdx
0x573f:	mul	rbx
0x5742:	jo	0x57de


0x57de:	mov	ebp, 1
0x57e3:	or	rbx, 0xffffffffffffffff
0x57e7:	jmp	0x5710


0x5748:	add	rbx, rbx
0x574b:	jmp	0x5710


0x5710:	movsxd	rdi, edi
0x5713:	mov	eax, ebp
0x5715:	add	rcx, rdi
0x5718:	or	eax, 2
0x571b:	mov	qword ptr [r15], rcx
0x571e:	cmp	byte ptr [rcx], 0
0x5721:	mov	qword ptr [r14], rbx
0x5724:	cmovne	ebp, eax
0x5727:	jmp	0x55ed


0x574d:	mov	edx, 0x200
0x5752:	mov	rax, rdx
0x5755:	mul	rbx
0x5758:	jo	0x57de


0x575e:	shl	rbx, 9
0x5762:	jmp	0x5710


0x5764:	mov	r8d, 7
0x576a:	xor	r9d, r9d
0x576d:	nop	dword ptr [rax]
0x5770:	mov	rax, rbx
0x5773:	mul	rsi
0x5776:	mov	rbx, rax
0x5779:	jo	0x590e


0x590e:	mov	r9d, 1
0x5914:	or	rbx, 0xffffffffffffffff
0x5918:	jmp	0x577f


0x577f:	sub	r8d, 1
0x5783:	jne	0x5770


0x5785:	or	ebp, r9d
0x5788:	jmp	0x5710


0x5770:	mov	rax, rbx
0x5773:	mul	rsi
0x5776:	mov	rbx, rax
0x5779:	jo	0x590e


0x578a:	mov	r8d, 8
0x5790:	xor	r9d, r9d
0x5793:	nop	dword ptr [rax + rax]
0x5798:	mov	rax, rbx
0x579b:	mul	rsi
0x579e:	mov	rbx, rax
0x57a1:	jo	0x58f0


0x58f0:	mov	r9d, 1
0x58f6:	or	rbx, 0xffffffffffffffff
0x58fa:	jmp	0x57a7


0x57a7:	sub	r8d, 1
0x57ab:	jne	0x5798


0x57ad:	jmp	0x5785


0x5798:	mov	rax, rbx
0x579b:	mul	rsi
0x579e:	mov	rbx, rax
0x57a1:	jo	0x58f0


0x57af:	mov	r8d, 4
0x57b5:	xor	r9d, r9d
0x57b8:	mov	rax, rbx
0x57bb:	mul	rsi
0x57be:	mov	rbx, rax
0x57c1:	jo	0x58c3


0x58c3:	mov	r9d, 1
0x58c9:	or	rbx, 0xffffffffffffffff
0x58cd:	jmp	0x57c7


0x57c7:	sub	r8d, 1
0x57cb:	jne	0x57b8


0x57cd:	jmp	0x5785


0x57b8:	mov	rax, rbx
0x57bb:	mul	rsi
0x57be:	mov	rbx, rax
0x57c1:	jo	0x58c3


0x57cf:	mov	rax, rbx
0x57d2:	mul	rsi
0x57d5:	mov	rbx, rax
0x57d8:	jno	0x5710


0x58ff:	mov	r9d, 1
0x5905:	or	rbx, 0xffffffffffffffff
0x5909:	jmp	0x5808


0x5808:	sub	r8d, 1
0x580c:	jne	0x57f9


0x580e:	jmp	0x5785


0x57f9:	mov	rax, rbx
0x57fc:	mul	rsi
0x57ff:	mov	rbx, rax
0x5802:	jo	0x58ff


0x5813:	mov	r8d, 6
0x5819:	xor	r9d, r9d
0x581c:	mov	rax, rbx
0x581f:	mul	rsi
0x5822:	mov	rbx, rax
0x5825:	jo	0x58b4


0x58b4:	mov	r9d, 1
0x58ba:	or	rbx, 0xffffffffffffffff
0x58be:	jmp	0x582b


0x582b:	sub	r8d, 1
0x582f:	jne	0x581c


0x5831:	jmp	0x5785


0x581c:	mov	rax, rbx
0x581f:	mul	rsi
0x5822:	mov	rbx, rax
0x5825:	jo	0x58b4


0x5836:	mov	edx, 0x400
0x583b:	mov	rax, rdx
0x583e:	mul	rbx
0x5841:	jo	0x57de


0x5843:	shl	rbx, 0xa
0x5847:	jmp	0x5710


0x584c:	mov	rax, rbx
0x584f:	mul	rsi
0x5852:	jo	0x591d


0x591d:	mov	r8d, 1
0x5923:	or	rax, 0xffffffffffffffff
0x5927:	jmp	0x585b


0x5858:	xor	r8d, r8d
0x585b:	mul	rsi
0x585e:	jno	0x56f7


0x585b:	mul	rsi
0x585e:	jno	0x56f7


0x5864:	mov	r8d, 1
0x586a:	or	rax, 0xffffffffffffffff
0x586e:	jmp	0x56f7


0x592c:	nop	dword ptr [rax]


0x59ab:	nop	dword ptr [rax + rax]


0x5a47:	nop	word ptr [rax + rax]


0x5ad3:	nop	word ptr cs:[rax + rax]
0x5add:	nop	dword ptr [rax]


0x5b5d:	nop	dword ptr [rax]


0x5bfc:	nop	dword ptr [rax]


0x5c65:	nop	
0x5c66:	nop	word ptr cs:[rax + rax]


0x5c72:	nop	word ptr cs:[rax + rax]
0x5c7c:	nop	dword ptr [rax]


0x3250:	xor	r10d, r10d
0x3253:	mov	eax, dword ptr [rsp + 8]
0x3257:	cmp	eax, 2
0x325a:	je	0x3818


0x3280:	xor	r10d, r10d
0x3283:	cmp	dword ptr [rsp + 8], 2
0x3288:	je	0x3790


0x32a8:	mov	edx, 9
0x32ad:	mov	ebx, 0x74
0x32b2:	cmp	dword ptr [rsp + 8], 2
0x32b7:	sete	al
0x32ba:	and	al, byte ptr [rsp + 0xf]
0x32be:	jne	0x340e


0x32e8:	mov	edx, 8
0x32ed:	mov	ebx, 0x62
0x32f2:	jmp	0x32c4


0x32f8:	cmp	dword ptr [rsp + 8], 2
0x32fd:	je	0x36d0


0x33a0:	cmp	byte ptr [rsp + 0xd], 0
0x33a5:	jne	0x3573


0x33c8:	cmp	dword ptr [rsp + 8], 2
0x33cd:	sete	dl
0x33d0:	xor	eax, eax
0x33d2:	jmp	0x31b8


0x33e0:	mov	edx, 7
0x33e5:	mov	ebx, 0x61
0x33ea:	jmp	0x32c4


0x33f0:	cmp	dword ptr [rsp + 8], 2
0x33f5:	sete	dl
0x33f8:	test	rbp, rbp
0x33fb:	jne	0x31ac


0x3420:	cmp	dword ptr [rsp + 8], 2
0x3425:	sete	dl
0x3428:	xor	r12d, r12d
0x342b:	jmp	0x3401


0x3430:	cmp	dword ptr [rsp + 8], 2
0x3435:	mov	ebx, 0x20
0x343a:	sete	dl
0x343d:	jmp	0x3401


0x3440:	mov	edx, 0xd
0x3445:	mov	ebx, 0x72
0x344a:	jmp	0x32b2


0x3450:	mov	edx, 0xc
0x3455:	mov	ebx, 0x66
0x345a:	jmp	0x32c4


0x3460:	mov	edx, 0xb
0x3465:	mov	ebx, 0x76
0x346a:	jmp	0x32c4


0x3470:	mov	edx, 0xa
0x3475:	mov	ebx, 0x6e
0x347a:	jmp	0x32b2


0x3510:	xor	r10d, r10d
0x3513:	cmp	byte ptr [rsp + 0xd], 0
0x3518:	jne	0x330e


0x3530:	mov	edx, 0xc
0x3535:	xor	r10d, r10d
0x3538:	mov	ebx, 0x66
0x353d:	jmp	0x32c4


0x3548:	mov	edx, 0xa
0x354d:	xor	r10d, r10d
0x3550:	mov	ebx, 0x6e
0x3555:	jmp	0x32b2


0x3560:	mov	ebx, 0x61
0x3565:	jmp	0x3330


0x3570:	xor	r10d, r10d
0x3573:	cmp	dword ptr [rsp + 8], 2
0x3578:	sete	dl
0x357b:	cmp	byte ptr [rsp + 0xf], 0
0x3580:	jne	0x411a


0x3610:	cmp	dword ptr [rsp + 8], 2
0x3615:	mov	r12d, r10d
0x3618:	sete	dl
0x361b:	xor	r10d, r10d
0x361e:	xor	eax, eax
0x3620:	jmp	0x31b8


0x3628:	cmp	dword ptr [rsp + 8], 2
0x362d:	sete	dl
0x3630:	xor	r10d, r10d
0x3633:	jmp	0x33f8


0x3640:	cmp	dword ptr [rsp + 8], 2
0x3645:	sete	dl
0x3648:	xor	r10d, r10d
0x364b:	xor	r12d, r12d
0x364e:	jmp	0x3401


0x3658:	cmp	dword ptr [rsp + 8], 2
0x365d:	mov	r12d, r10d
0x3660:	mov	ebx, 0x20
0x3665:	sete	dl
0x3668:	xor	r10d, r10d
0x366b:	jmp	0x3401


0x3688:	mov	ebx, 0x76
0x368d:	jmp	0x3330


0x3698:	mov	edx, 9
0x369d:	xor	r10d, r10d
0x36a0:	mov	ebx, 0x74
0x36a5:	jmp	0x32b2


0x36b0:	mov	ebx, 0x62
0x36b5:	jmp	0x3330


0x3c50:	test	ebx, ebx
0x3c52:	jne	0x404d


0x57f0:	mov	r8d, 5
0x57f6:	xor	r9d, r9d
0x57f9:	mov	rax, rbx
0x57fc:	mul	rsi
0x57ff:	mov	rbx, rax
0x5802:	jo	0x58ff


0x18e8:	nop	dword ptr [rax + rax]


0x18fa:	nop	word ptr [rax + rax]


0x190a:	nop	word ptr [rax + rax]


0x1a4c:	nop	dword ptr [rax]


0x1ae8:	nop	dword ptr [rax + rax]


0x1b13:	nop	dword ptr [rax + rax]


0x1b39:	nop	dword ptr [rax]


0x1c2a:	nop	word ptr [rax + rax]


0x1d2f:	nop	


0x2056:	nop	word ptr cs:[rax + rax]


0x20a7:	nop	word ptr [rax + rax]


0x20f1:	nop	dword ptr [rax]


0x266a:	nop	word ptr [rax + rax]


0x267c:	nop	dword ptr [rax]


0x26ac:	nop	dword ptr [rax]


0x285a:	nop	word ptr [rax + rax]


0x2876:	nop	word ptr cs:[rax + rax]


0x2894:	nop	dword ptr [rax]


0x28ab:	nop	dword ptr [rax + rax]


0x290a:	nop	word ptr [rax + rax]


0x2a8c:	nop	dword ptr [rax]


0x2abb:	nop	dword ptr [rax + rax]


0x2aec:	nop	dword ptr [rax]


0x2b1a:	nop	word ptr [rax + rax]


0x2b66:	nop	word ptr cs:[rax + rax]


0x2b9c:	nop	dword ptr [rax]


0x2bb8:	nop	dword ptr [rax + rax]


0x2bd5:	nop	dword ptr [rax]


0x2bee:	nop	


0x2ca3:	nop	dword ptr [rax + rax]


0x2cca:	nop	word ptr [rax + rax]


0x2deb:	nop	dword ptr [rax + rax]


0x2edc:	nop	dword ptr [rax]


0x2f2d:	nop	dword ptr [rax]


0x3158:	nop	dword ptr [rax + rax]


0x3247:	nop	word ptr [rax + rax]


0x327e:	nop	


0x32a1:	nop	dword ptr [rax]


0x32e2:	nop	word ptr [rax + rax]


0x32f4:	nop	dword ptr [rax]


0x3398:	nop	dword ptr [rax + rax]


0x33c1:	nop	dword ptr [rax]


0x33d7:	nop	word ptr [rax + rax]


0x33ef:	nop	


0x341e:	nop	


0x342d:	nop	dword ptr [rax]


0x343f:	nop	


0x344f:	nop	


0x345f:	nop	


0x346f:	nop	


0x347f:	nop	


0x34ec:	nop	dword ptr [rax]


0x350c:	nop	dword ptr [rax]


0x351e:	nop	


0x352f:	nop	


0x3542:	nop	word ptr [rax + rax]


0x355a:	nop	word ptr [rax + rax]


0x356a:	nop	word ptr [rax + rax]


0x360b:	nop	dword ptr [rax + rax]


0x3625:	nop	dword ptr [rax]


0x3638:	nop	dword ptr [rax + rax]


0x3653:	nop	dword ptr [rax + rax]


0x3682:	nop	word ptr [rax + rax]


0x3692:	nop	word ptr [rax + rax]


0x36aa:	nop	word ptr [rax + rax]


0x36ba:	nop	word ptr [rax + rax]


0x36c8:	nop	dword ptr [rax + rax]


0x36ef:	nop	


0x3789:	nop	dword ptr [rax]


0x37d2:	nop	word ptr [rax + rax]


0x37f8:	nop	dword ptr [rax + rax]


0x3811:	nop	dword ptr [rax]


0x3832:	nop	word ptr [rax + rax]


0x3998:	nop	dword ptr [rax + rax]


0x3aab:	nop	dword ptr [rax + rax]


0x3ace:	nop	


0x3b95:	nop	dword ptr [rax]


0x3c4d:	nop	dword ptr [rax]


0x3e56:	nop	word ptr cs:[rax + rax]


0x3ee9:	nop	dword ptr [rax]


0x3f5d:	nop	dword ptr [rax]


0x403d:	nop	dword ptr [rax]


0x434b:	nop	dword ptr [rax + rax]


0x4bd6:	nop	word ptr cs:[rax + rax]


0x4c65:	nop	dword ptr [rax]


0x4c86:	nop	word ptr cs:[rax + rax]


0x4ce5:	nop	dword ptr [rax]


0x4d21:	nop	dword ptr [rax]


0x4d68:	nop	dword ptr [rax + rax]


0x4db7:	nop	word ptr [rax + rax]


0x4e14:	nop	dword ptr [rax]


0x4e42:	nop	word ptr [rax + rax]


0x4ef6:	nop	word ptr cs:[rax + rax]


0x4f59:	nop	dword ptr [rax]


0x51d2:	nop	word ptr [rax + rax]


0x5259:	nop	dword ptr [rax]


0x5284:	nop	dword ptr [rax]


0x52dd:	nop	dword ptr [rax]


0x54a6:	nop	word ptr cs:[rax + rax]


0x54cf:	nop	


0x5576:	nop	word ptr cs:[rax + rax]


0x55d3:	nop	dword ptr [rax + rax]


0x55e2:	nop	word ptr [rax + rax]


0x5612:	nop	word ptr [rax + rax]


0x561c:	nop	dword ptr [rax]


0x56bb:	nop	dword ptr [rax + rax]


0x57ec:	nop	dword ptr [rax]


0x5873:	nop	dword ptr [rax + rax]


0x5975:	nop	dword ptr [rax]


0x59d3:	nop	dword ptr [rax + rax]


0x59ff:	nop	


0x5b14:	nop	dword ptr [rax]


0x5b31:	nop	dword ptr [rax]


0x5b42:	nop	word ptr [rax + rax]


0x5b9a:	nop	word ptr [rax + rax]


0x5be6:	nop	word ptr cs:[rax + rax]


