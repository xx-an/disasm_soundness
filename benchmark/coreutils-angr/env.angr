0x6b30:	sub	rsp, 8
0x6b34:	add	rsp, 8
0x6b38:	ret	


0x6b20:	mov	rdx, qword ptr [rip + 0x2034e1]
0x6b27:	xor	esi, esi
0x6b29:	jmp	0x1ba0


0x6b10:	ret	


0x6aa0:	push	r15
0x6aa2:	push	r14
0x6aa4:	mov	r15, rdx
0x6aa7:	push	r13
0x6aa9:	push	r12
0x6aab:	lea	r12, [rip + 0x202f1e]
0x6ab2:	push	rbp
0x6ab3:	lea	rbp, [rip + 0x202f1e]
0x6aba:	push	rbx
0x6abb:	mov	r13d, edi
0x6abe:	mov	r14, rsi
0x6ac1:	sub	rbp, r12
0x6ac4:	sub	rsp, 8
0x6ac8:	sar	rbp, 3
0x6acc:	call	0x1858


0x6a40:	mov	rax, qword ptr [rdi + 8]
0x6a44:	cmp	qword ptr [rdi + 0x10], rax
0x6a48:	je	0x6a50


0x6a00:	test	rdi, rdi
0x6a03:	push	rbx
0x6a04:	mov	rbx, rdi
0x6a07:	je	0x6a1a


0x6980:	push	r12
0x6982:	push	rbp
0x6983:	push	rbx
0x6984:	mov	rbx, rdi
0x6987:	call	0x1ac0


0x6940:	sub	rsp, 8
0x6944:	mov	edi, 0xe
0x6949:	call	0x1af0


0x68e0:	sub	rsp, 8
0x68e4:	xor	esi, esi
0x68e6:	call	0x1b20


0x6860:	push	r12
0x6862:	push	rbp
0x6863:	mov	rbp, rdi
0x6866:	push	rbx
0x6867:	call	0x1900


0x6780:	push	rbp
0x6781:	lea	rax, [rip + 0x2038f8]
0x6788:	push	rbx
0x6789:	xor	edx, edx
0x678b:	mov	ebx, edi
0x678d:	mov	rdi, rsi
0x6790:	sub	rsp, 0x18
0x6794:	mov	rcx, rax
0x6797:	jmp	0x67ac


0x65f0:	push	r13
0x65f2:	push	r12
0x65f4:	mov	r13, rsi
0x65f7:	push	rbp
0x65f8:	push	rbx
0x65f9:	xor	ebx, ebx
0x65fb:	mov	r12, rdi
0x65fe:	lea	rbp, [rip + 0x203a7f]
0x6605:	sub	rsp, 0x18
0x6609:	mov	rax, qword ptr fs:[0x28]
0x6612:	mov	qword ptr [rsp + 8], rax
0x6617:	xor	eax, eax
0x6619:	movsx	eax, byte ptr [rdi]
0x661c:	sub	eax, 0x30
0x661f:	cmp	eax, 9
0x6622:	ja	0x663c


0x6560:	push	r13
0x6562:	push	r12
0x6564:	mov	r13, rsi
0x6567:	push	rbp
0x6568:	push	rbx
0x6569:	mov	rbx, rdi
0x656c:	mov	r12, rdx
0x656f:	sub	rsp, 0x18
0x6573:	mov	rax, qword ptr fs:[0x28]
0x657c:	mov	qword ptr [rsp + 8], rax
0x6581:	xor	eax, eax
0x6583:	lea	rax, [rsp + 4]
0x6588:	test	rdi, rdi
0x658b:	cmove	rbx, rax
0x658f:	mov	rdi, rbx
0x6592:	call	0x19c0


0x6520:	lea	rsi, [rip + 0x1a88]
0x6527:	sub	rsp, 8
0x652b:	mov	edx, 5
0x6530:	xor	edi, edi
0x6532:	call	0x1960


0x6500:	push	rbx
0x6501:	mov	rbx, rdi
0x6504:	call	0x1980


0x64d0:	push	rbp
0x64d1:	push	rbx
0x64d2:	mov	rbp, rdi
0x64d5:	mov	rdi, rsi
0x64d8:	mov	rbx, rsi
0x64db:	sub	rsp, 8
0x64df:	call	0x62d0


0x64a0:	mov	rax, rdi
0x64a3:	sub	rsp, 8
0x64a7:	mul	rsi
0x64aa:	seto	dl
0x64ad:	test	rax, rax
0x64b0:	js	0x64c9


0x6480:	push	rbx
0x6481:	mov	rbx, rdi
0x6484:	call	0x62d0


0x6430:	test	rdi, rdi
0x6433:	mov	rax, qword ptr [rsi]
0x6436:	je	0x6460


0x63a0:	test	rdi, rdi
0x63a3:	mov	r9, rdx
0x63a6:	mov	rcx, qword ptr [rsi]
0x63a9:	je	0x63e0


0x6370:	mov	rax, rsi
0x6373:	mul	rdx
0x6376:	mov	rsi, rax
0x6379:	seto	al
0x637c:	test	rsi, rsi
0x637f:	js	0x638b


0x6330:	test	rsi, rsi
0x6333:	push	rbx
0x6334:	mov	rbx, rsi
0x6337:	jne	0x633e


0x6320:	jmp	0x62d0


0x62f0:	mov	rax, rdi
0x62f3:	mul	rsi
0x62f6:	mov	rdi, rax
0x62f9:	seto	al
0x62fc:	test	rdi, rdi
0x62ff:	js	0x630b


0x62d0:	push	rbx
0x62d1:	mov	rbx, rdi
0x62d4:	call	0x1ad0


0x6250:	push	rbx
0x6251:	lea	rsi, [rip + 0x1a4a]
0x6258:	mov	edx, 5
0x625d:	xor	edi, edi
0x625f:	call	0x1960


0x6170:	push	rbp
0x6171:	push	rbx
0x6172:	mov	r10d, 0x20
0x6178:	xor	r11d, r11d
0x617b:	sub	rsp, 0xb8
0x6182:	mov	rax, qword ptr fs:[0x28]
0x618b:	mov	qword ptr [rsp + 0x78], rax
0x6190:	xor	eax, eax
0x6192:	lea	rax, [rsp + 0xd0]
0x619a:	mov	qword ptr [rsp + 0xa0], r8
0x61a2:	lea	rbx, [rsp + 0xd0]
0x61aa:	lea	r8, [rsp + 0x20]
0x61af:	mov	qword ptr [rsp + 0xa8], r9
0x61b7:	mov	dword ptr [rsp + 8], 0x20
0x61bf:	mov	qword ptr [rsp + 0x10], rax
0x61c4:	lea	rax, [rsp + 0x80]
0x61cc:	xor	r9d, r9d
0x61cf:	mov	qword ptr [rsp + 0x18], rax
0x61d4:	mov	rbp, rax
0x61d7:	nop	word ptr [rax + rax]
0x61e0:	cmp	r10d, 0x2f
0x61e4:	ja	0x623c


0x60f0:	sub	rsp, 0x68
0x60f4:	mov	r10, r8
0x60f7:	xor	r9d, r9d
0x60fa:	mov	rax, qword ptr fs:[0x28]
0x6103:	mov	qword ptr [rsp + 0x58], rax
0x6108:	xor	eax, eax
0x610a:	mov	r8, rsp
0x610d:	nop	dword ptr [rax]
0x6110:	mov	eax, dword ptr [r10]
0x6113:	cmp	eax, 0x2f
0x6116:	ja	0x615a


0x60d0:	xor	r9d, r9d
0x60d3:	cmp	qword ptr [r8], 0
0x60d7:	je	0x60eb


0x5cb0:	push	r15
0x5cb2:	push	r14
0x5cb4:	push	r13
0x5cb6:	push	r12
0x5cb8:	mov	r12, r9
0x5cbb:	push	rbp
0x5cbc:	push	rbx
0x5cbd:	mov	rbp, rdi
0x5cc0:	mov	rbx, r8
0x5cc3:	sub	rsp, 0x28
0x5cc7:	test	rsi, rsi
0x5cca:	je	0x5de8


0x5c90:	lea	rcx, [rip + 0x204389]
0x5c97:	mov	rsi, rdi
0x5c9a:	mov	rdx, -1
0x5ca1:	xor	edi, edi
0x5ca3:	jmp	0x5350


0x5c70:	lea	rcx, [rip + 0x2043a9]
0x5c77:	mov	rdx, -1
0x5c7e:	jmp	0x5350


0x5c50:	lea	rcx, [rip + 0x2043c9]
0x5c57:	mov	rdx, rsi
0x5c5a:	mov	rsi, rdi
0x5c5d:	xor	edi, edi
0x5c5f:	jmp	0x5350


0x5c40:	lea	rcx, [rip + 0x2043d9]
0x5c47:	jmp	0x5350


0x5c20:	mov	r8, rcx
0x5c23:	mov	rcx, rdx
0x5c26:	mov	rdx, rsi
0x5c29:	mov	rsi, rdi
0x5c2c:	xor	edi, edi
0x5c2e:	jmp	0x5b50


0x5c00:	mov	rcx, rdx
0x5c03:	mov	r8, -1
0x5c0a:	mov	rdx, rsi
0x5c0d:	mov	rsi, rdi
0x5c10:	xor	edi, edi
0x5c12:	jmp	0x5b50


0x5bf0:	mov	r8, -1
0x5bf7:	jmp	0x5b50


0x5b50:	sub	rsp, 0x48
0x5b54:	mov	r9, rcx
0x5b57:	mov	rcx, qword ptr [rip + 0x2049f2]
0x5b5e:	movdqa	xmm0, xmmword ptr [rip + 0x2049ba]
0x5b66:	mov	rax, qword ptr fs:[0x28]
0x5b6f:	mov	qword ptr [rsp + 0x38], rax
0x5b74:	xor	eax, eax
0x5b76:	movaps	xmmword ptr [rsp], xmm0
0x5b7a:	test	rsi, rsi
0x5b7d:	mov	qword ptr [rsp + 0x30], rcx
0x5b82:	mov	dword ptr [rsp], 0xa
0x5b89:	movdqa	xmm0, xmmword ptr [rip + 0x20499f]
0x5b91:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x5b96:	movdqa	xmm0, xmmword ptr [rip + 0x2049a2]
0x5b9e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x5ba3:	je	0x5bd7


0x5ac0:	sub	rsp, 0x48
0x5ac4:	mov	rax, rdx
0x5ac7:	mov	rdx, qword ptr fs:[0x28]
0x5ad0:	mov	qword ptr [rsp + 0x38], rdx
0x5ad5:	xor	edx, edx
0x5ad7:	cmp	esi, 0xa
0x5ada:	je	0x5b44


0x5ab0:	mov	edx, 0x3a
0x5ab5:	jmp	0x59e0


0x5a90:	mov	edx, 0x3a
0x5a95:	mov	rsi, -1
0x5a9c:	jmp	0x59e0


0x5a80:	movsx	edx, sil
0x5a84:	mov	rsi, -1
0x5a8b:	jmp	0x59e0


0x59e0:	sub	rsp, 0x48
0x59e4:	mov	ecx, edx
0x59e6:	mov	rax, qword ptr fs:[0x28]
0x59ef:	mov	qword ptr [rsp + 0x38], rax
0x59f4:	xor	eax, eax
0x59f6:	mov	rax, qword ptr [rip + 0x204b53]
0x59fd:	mov	r8, rsp
0x5a00:	and	ecx, 0x1f
0x5a03:	movdqa	xmm0, xmmword ptr [rip + 0x204b15]
0x5a0b:	mov	qword ptr [rsp + 0x30], rax
0x5a10:	mov	eax, edx
0x5a12:	movaps	xmmword ptr [rsp], xmm0
0x5a16:	shr	al, 5
0x5a19:	movzx	eax, al
0x5a1c:	lea	r9, [r8 + rax*4 + 8]
0x5a21:	movdqa	xmm0, xmmword ptr [rip + 0x204b07]
0x5a29:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x5a2e:	movdqa	xmm0, xmmword ptr [rip + 0x204b0a]
0x5a36:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x5a3b:	mov	edx, dword ptr [r9]
0x5a3e:	mov	eax, edx
0x5a40:	shr	eax, cl
0x5a42:	not	eax
0x5a44:	and	eax, 1
0x5a47:	shl	eax, cl
0x5a49:	mov	rcx, r8
0x5a4c:	xor	eax, edx
0x5a4e:	mov	rdx, rsi
0x5a51:	mov	rsi, rdi
0x5a54:	mov	dword ptr [r9], eax
0x5a57:	xor	edi, edi
0x5a59:	call	0x5350


0x59d0:	mov	rcx, rdx
0x59d3:	mov	rdx, rsi
0x59d6:	mov	esi, edi
0x59d8:	xor	edi, edi
0x59da:	jmp	0x5930


0x59c0:	mov	rdx, rsi
0x59c3:	mov	esi, edi
0x59c5:	xor	edi, edi
0x59c7:	jmp	0x58a0


0x5930:	sub	rsp, 0x48
0x5934:	mov	rax, rdx
0x5937:	mov	rdx, rcx
0x593a:	mov	rcx, qword ptr fs:[0x28]
0x5943:	mov	qword ptr [rsp + 0x38], rcx
0x5948:	xor	ecx, ecx
0x594a:	cmp	esi, 0xa
0x594d:	je	0x59b0


0x58a0:	sub	rsp, 0x48
0x58a4:	mov	rax, rdx
0x58a7:	mov	rdx, qword ptr fs:[0x28]
0x58b0:	mov	qword ptr [rsp + 0x38], rdx
0x58b5:	xor	edx, edx
0x58b7:	cmp	esi, 0xa
0x58ba:	je	0x5924


0x5880:	lea	rcx, [rip + 0x204c99]
0x5887:	mov	rdx, rsi
0x588a:	mov	rsi, rdi
0x588d:	xor	edi, edi
0x588f:	jmp	0x5350


0x5860:	lea	rcx, [rip + 0x204cb9]
0x5867:	mov	rsi, rdi
0x586a:	mov	rdx, -1
0x5871:	xor	edi, edi
0x5873:	jmp	0x5350


0x5850:	lea	rcx, [rip + 0x204cc9]
0x5857:	jmp	0x5350


0x5830:	lea	rcx, [rip + 0x204ce9]
0x5837:	mov	rdx, -1
0x583e:	jmp	0x5350


0x5790:	mov	eax, dword ptr [rip + 0x2048c2]
0x5796:	push	r12
0x5798:	mov	r12, qword ptr [rip + 0x2048c1]
0x579f:	push	rbp
0x57a0:	push	rbx
0x57a1:	cmp	eax, 1
0x57a4:	jle	0x57d1


0x5780:	mov	rcx, rdx
0x5783:	xor	edx, edx
0x5785:	jmp	0x5690


0x5690:	push	r15
0x5692:	push	r14
0x5694:	lea	rax, [rip + 0x204e85]
0x569b:	push	r13
0x569d:	push	r12
0x569f:	mov	r12, rdx
0x56a2:	push	rbp
0x56a3:	push	rbx
0x56a4:	mov	rbx, rcx
0x56a7:	mov	r14, rdi
0x56aa:	mov	r15, rsi
0x56ad:	sub	rsp, 0x38
0x56b1:	test	rcx, rcx
0x56b4:	cmove	rbx, rax
0x56b8:	xor	ebp, ebp
0x56ba:	call	0x18c0


0x5610:	push	r15
0x5612:	push	r14
0x5614:	lea	rax, [rip + 0x204f05]
0x561b:	push	r13
0x561d:	push	r12
0x561f:	mov	r13, rdi
0x5622:	push	rbp
0x5623:	push	rbx
0x5624:	mov	rbx, r8
0x5627:	mov	r14, rsi
0x562a:	mov	r15, rdx
0x562d:	sub	rsp, 0x18
0x5631:	test	r8, r8
0x5634:	cmove	rbx, rax
0x5638:	mov	qword ptr [rsp + 8], rcx
0x563d:	call	0x18c0


0x55e0:	lea	rax, [rip + 0x204f39]
0x55e7:	test	rdi, rdi
0x55ea:	cmove	rdi, rax
0x55ee:	test	rsi, rsi
0x55f1:	mov	dword ptr [rdi], 0xa
0x55f7:	je	0x5607


0x55c0:	lea	rax, [rip + 0x204f59]
0x55c7:	test	rdi, rdi
0x55ca:	cmove	rdi, rax
0x55ce:	mov	eax, dword ptr [rdi + 4]
0x55d1:	mov	dword ptr [rdi + 4], esi
0x55d4:	ret	


0x5580:	lea	rax, [rip + 0x204f99]
0x5587:	test	rdi, rdi
0x558a:	mov	ecx, esi
0x558c:	cmove	rdi, rax
0x5590:	mov	eax, esi
0x5592:	and	ecx, 0x1f
0x5595:	shr	al, 5
0x5598:	movzx	eax, al
0x559b:	lea	rdi, [rdi + rax*4 + 8]
0x55a0:	mov	esi, dword ptr [rdi]
0x55a2:	mov	eax, esi
0x55a4:	shr	eax, cl
0x55a6:	xor	edx, eax
0x55a8:	and	eax, 1
0x55ab:	and	edx, 1
0x55ae:	shl	edx, cl
0x55b0:	xor	edx, esi
0x55b2:	mov	dword ptr [rdi], edx
0x55b4:	ret	


0x5560:	lea	rax, [rip + 0x204fb9]
0x5567:	test	rdi, rdi
0x556a:	cmove	rdi, rax
0x556e:	mov	dword ptr [rdi], esi
0x5570:	ret	


0x5540:	lea	rax, [rip + 0x204fd9]
0x5547:	test	rdi, rdi
0x554a:	cmove	rdi, rax
0x554e:	mov	eax, dword ptr [rdi]
0x5550:	ret	


0x5500:	push	r12
0x5502:	push	rbp
0x5503:	push	rbx
0x5504:	mov	rbx, rdi
0x5507:	call	0x18c0


0x5350:	push	r15
0x5352:	push	r14
0x5354:	movsxd	r15, edi
0x5357:	push	r13
0x5359:	push	r12
0x535b:	mov	r14, rdx
0x535e:	push	rbp
0x535f:	push	rbx
0x5360:	mov	rbp, rcx
0x5363:	sub	rsp, 0x28
0x5367:	mov	qword ptr [rsp + 8], rsi
0x536c:	call	0x18c0


0x4110:	push	r15
0x4112:	push	r14
0x4114:	mov	r15d, r8d
0x4117:	push	r13
0x4119:	push	r12
0x411b:	mov	r14, rdi
0x411e:	push	rbp
0x411f:	push	rbx
0x4120:	mov	ebx, r9d
0x4123:	mov	r13, rsi
0x4126:	mov	rbp, rcx
0x4129:	and	ebx, 2
0x412c:	sub	rsp, 0xb8
0x4133:	mov	rax, qword ptr [rsp + 0xf0]
0x413b:	mov	qword ptr [rsp + 0x10], rdx
0x4140:	mov	dword ptr [rsp + 8], r8d
0x4145:	mov	dword ptr [rsp + 0x78], r9d
0x414a:	mov	qword ptr [rsp + 0x20], rax
0x414f:	mov	rax, qword ptr [rsp + 0xf8]
0x4157:	mov	qword ptr [rsp + 0x68], rax
0x415c:	mov	rax, qword ptr [rsp + 0x100]
0x4164:	mov	qword ptr [rsp + 0x60], rax
0x4169:	mov	rax, qword ptr fs:[0x28]
0x4172:	mov	qword ptr [rsp + 0xa8], rax
0x417a:	xor	eax, eax
0x417c:	call	0x1970


0x4020:	push	rbp
0x4021:	push	rbx
0x4022:	mov	rbp, rdi
0x4025:	mov	ebx, esi
0x4027:	sub	rsp, 8
0x402b:	call	0x6940


0x3f80:	test	rdi, rdi
0x3f83:	push	rbx
0x3f84:	je	0x3ffd


0x3ed0:	push	rbp
0x3ed1:	push	rbx
0x3ed2:	sub	rsp, 8
0x3ed6:	mov	rdi, qword ptr [rip + 0x20636b]
0x3edd:	call	0x6860


0x3ec0:	mov	byte ptr [rip + 0x206531], dil
0x3ec7:	ret	


0x3eb0:	mov	qword ptr [rip + 0x206549], rdi
0x3eb7:	ret	


0x3cc0:	push	r15
0x3cc2:	push	r14
0x3cc4:	mov	r14, rsi
0x3cc7:	push	r13
0x3cc9:	push	r12
0x3ccb:	push	rbp
0x3ccc:	push	rbx
0x3ccd:	mov	rbp, rdi
0x3cd0:	sub	rsp, 0x28
0x3cd4:	mov	rax, qword ptr fs:[0x28]
0x3cdd:	mov	qword ptr [rsp + 0x18], rax
0x3ce2:	xor	eax, eax
0x3ce4:	movsx	eax, byte ptr [rdi]
0x3ce7:	sub	eax, 0x30
0x3cea:	cmp	eax, 9
0x3ced:	ja	0x3d80


0x3ae0:	push	r15
0x3ae2:	push	r14
0x3ae4:	push	r13
0x3ae6:	push	r12
0x3ae8:	push	rbp
0x3ae9:	push	rbx
0x3aea:	mov	ebx, esi
0x3aec:	sub	rsp, 0x38
0x3af0:	mov	rax, qword ptr fs:[0x28]
0x3af9:	mov	qword ptr [rsp + 0x28], rax
0x3afe:	xor	eax, eax
0x3b00:	test	rdi, rdi
0x3b03:	je	0x3c58


0x3970:	push	r14
0x3972:	push	r13
0x3974:	push	r12
0x3976:	push	rbp
0x3977:	push	rbx
0x3978:	mov	ebx, esi
0x397a:	sub	rsp, 0x20
0x397e:	mov	rax, qword ptr fs:[0x28]
0x3987:	mov	qword ptr [rsp + 0x18], rax
0x398c:	xor	eax, eax
0x398e:	test	rdi, rdi
0x3991:	je	0x3a70


0x3490:	push	r13
0x3492:	push	r12
0x3494:	mov	edx, 5
0x3499:	push	rbp
0x349a:	push	rbx
0x349b:	mov	ebp, edi
0x349d:	sub	rsp, 0x88
0x34a4:	mov	rbx, qword ptr [rip + 0x206f5d]
0x34ab:	mov	rax, qword ptr fs:[0x28]
0x34b4:	mov	qword ptr [rsp + 0x78], rax
0x34b9:	xor	eax, eax
0x34bb:	test	edi, edi
0x34bd:	je	0x34ed


0x3320:	push	r15
0x3322:	push	r14
0x3324:	push	r13
0x3326:	push	r12
0x3328:	push	rbp
0x3329:	push	rbx
0x332a:	sub	rsp, 0x158
0x3331:	lea	rbx, [rsp + 0x10]
0x3336:	mov	rax, qword ptr fs:[0x28]
0x333f:	mov	qword ptr [rsp + 0x148], rax
0x3347:	xor	eax, eax
0x3349:	mov	rdi, rbx
0x334c:	mov	qword ptr [rsp + 8], rbx
0x3351:	call	0x1a80


0x31f0:	push	rbp
0x31f1:	push	rbx
0x31f2:	sub	rsp, 0x18
0x31f6:	test	rdi, rdi
0x31f9:	je	0x32f9


0x31e0:	push	rbp
0x31e1:	mov	rbp, rsp
0x31e4:	pop	rbp
0x31e5:	jmp	0x3150


0x31a0:	cmp	byte ptr [rip + 0x2070e1], 0
0x31a7:	jne	0x31d8


0x3150:	lea	rdi, [rip + 0x2070d1]
0x3157:	lea	rsi, [rip + 0x2070ca]
0x315e:	push	rbp
0x315f:	sub	rsi, rdi
0x3162:	mov	rbp, rsp
0x3165:	sar	rsi, 3
0x3169:	mov	rax, rsi
0x316c:	shr	rax, 0x3f
0x3170:	add	rsi, rax
0x3173:	sar	rsi, 1
0x3176:	je	0x3190


0x3110:	lea	rdi, [rip + 0x207111]
0x3117:	push	rbp
0x3118:	lea	rax, [rip + 0x207109]
0x311f:	cmp	rax, rdi
0x3122:	mov	rbp, rsp
0x3125:	je	0x3140


0x30e0:	xor	ebp, ebp
0x30e2:	mov	r9, rdx
0x30e5:	pop	rsi
0x30e6:	mov	rdx, rsp
0x30e9:	and	rsp, 0xfffffffffffffff0
0x30ed:	push	rax
0x30ee:	push	rsp
0x30ef:	lea	r8, [rip + 0x3a1a]
0x30f6:	lea	rcx, [rip + 0x39a3]
0x30fd:	lea	rdi, [rip - 0x1494]
0x3104:	call	qword ptr [rip + 0x206ece]


0x1c70:	push	r15
0x1c72:	push	r14
0x1c74:	mov	r15, rsi
0x1c77:	push	r13
0x1c79:	push	r12
0x1c7b:	push	rbp
0x1c7c:	push	rbx
0x1c7d:	sub	rsp, 0x118
0x1c84:	mov	dword ptr [rsp + 0x48], edi
0x1c88:	mov	rdi, qword ptr [rsi]
0x1c8b:	mov	rax, qword ptr fs:[0x28]
0x1c94:	mov	qword ptr [rsp + 0x108], rax
0x1c9c:	xor	eax, eax
0x1c9e:	call	0x3f80


0x1858:	sub	rsp, 8
0x185c:	mov	rax, qword ptr [rip + 0x20877d]
0x1863:	test	rax, rax
0x1866:	je	0x186a


0x1ba0:	jmp	qword ptr [rip + 0x2083ca]


0x6a50:	mov	rax, qword ptr [rdi + 0x20]
0x6a54:	cmp	qword ptr [rdi + 0x28], rax
0x6a58:	jne	0x6a4a


0x6a4a:	jmp	0x1b50


0x6a1a:	mov	rdi, rbx
0x6a1d:	pop	rbx
0x6a1e:	jmp	0x1ae0


0x6a09:	call	0x1b00


0x1ac0:	jmp	qword ptr [rip + 0x20843a]


0x1af0:	jmp	qword ptr [rip + 0x208422]


0x1b20:	jmp	qword ptr [rip + 0x20840a]


0x1900:	jmp	qword ptr [rip + 0x20851a]


0x67ac:	cmp	dword ptr [rcx], ebx
0x67ae:	jne	0x67a0


0x6624:	jmp	0x6680


0x663c:	mov	rsi, r12
0x663f:	mov	rdi, rbp
0x6642:	call	0x1a70


0x19c0:	jmp	qword ptr [rip + 0x2084ba]


0x1960:	jmp	qword ptr [rip + 0x2084ea]


0x1980:	jmp	qword ptr [rip + 0x2084da]


0x64c9:	call	0x6520


0x64b2:	movzx	edx, dl
0x64b5:	test	rdx, rdx
0x64b8:	jne	0x64c9


0x6460:	test	rax, rax
0x6463:	mov	edx, 0x80
0x6468:	cmove	rax, rdx
0x646c:	test	rax, rax
0x646f:	jns	0x6452


0x6438:	movabs	rdx, 0x5555555555555553
0x6442:	cmp	rax, rdx
0x6445:	ja	0x6471


0x63e0:	test	rcx, rcx
0x63e3:	je	0x6408


0x63ab:	xor	edx, edx
0x63ad:	movabs	rax, 0x5555555555555554
0x63b7:	div	r9
0x63ba:	cmp	rax, rcx
0x63bd:	jbe	0x63fb


0x638b:	sub	rsp, 8
0x638f:	call	0x6520


0x6381:	movzx	eax, al
0x6384:	test	rax, rax
0x6387:	jne	0x638b


0x6339:	test	rdi, rdi
0x633c:	jne	0x6358


0x633e:	mov	rsi, rbx
0x6341:	call	0x1b10


0x630b:	sub	rsp, 8
0x630f:	call	0x6520


0x6301:	movzx	eax, al
0x6304:	test	rax, rax
0x6307:	jne	0x630b


0x1ad0:	jmp	qword ptr [rip + 0x208432]


0x61e6:	mov	eax, r10d
0x61e9:	mov	r11d, 1
0x61ef:	add	r10d, 8
0x61f3:	add	rax, rbp
0x61f6:	mov	rax, qword ptr [rax]
0x61f9:	test	rax, rax
0x61fc:	mov	qword ptr [r8 + r9*8], rax
0x6200:	je	0x620c


0x623c:	mov	rax, rbx
0x623f:	add	rbx, 8
0x6243:	jmp	0x61f6


0x6118:	mov	r11d, eax
0x611b:	add	r11, qword ptr [r10 + 0x10]
0x611f:	add	eax, 8
0x6122:	mov	dword ptr [r10], eax
0x6125:	mov	rax, qword ptr [r11]
0x6128:	test	rax, rax
0x612b:	mov	qword ptr [r8 + r9*8], rax
0x612f:	je	0x613b


0x615a:	mov	r11, qword ptr [r10 + 8]
0x615e:	lea	rax, [r11 + 8]
0x6162:	mov	qword ptr [r10 + 8], rax
0x6166:	jmp	0x6125


0x60eb:	jmp	0x5cb0


0x5de8:	mov	r8, rcx
0x5deb:	mov	rcx, rdx
0x5dee:	lea	rdx, [rip + 0x1e5f]
0x5df5:	mov	esi, 1
0x5dfa:	xor	eax, eax
0x5dfc:	call	0x1bf0


0x5cd0:	mov	r8, rdx
0x5cd3:	lea	rdx, [rip + 0x1f6e]
0x5cda:	mov	r9, rcx
0x5cdd:	xor	eax, eax
0x5cdf:	mov	rcx, rsi
0x5ce2:	mov	esi, 1
0x5ce7:	call	0x1bf0


0x5bd7:	call	0x18b0


0x5ba5:	test	rdx, rdx
0x5ba8:	je	0x5bd7


0x5b44:	call	0x18b0


0x5adc:	mov	dword ptr [rsp], esi
0x5adf:	mov	rcx, rsp
0x5ae2:	mov	rdx, -1
0x5ae9:	mov	rsi, rax
0x5aec:	mov	qword ptr [rsp + 4], 0
0x5af5:	mov	qword ptr [rsp + 0xc], 0x4000000
0x5afe:	mov	qword ptr [rsp + 0x14], 0
0x5b07:	mov	qword ptr [rsp + 0x1c], 0
0x5b10:	mov	qword ptr [rsp + 0x24], 0
0x5b19:	mov	qword ptr [rsp + 0x2c], 0
0x5b22:	mov	dword ptr [rsp + 0x34], 0
0x5b2a:	call	0x5350


0x59b0:	call	0x18b0


0x594f:	mov	dword ptr [rsp], esi
0x5952:	mov	rcx, rsp
0x5955:	mov	rsi, rax
0x5958:	mov	qword ptr [rsp + 4], 0
0x5961:	mov	qword ptr [rsp + 0xc], 0
0x596a:	mov	qword ptr [rsp + 0x14], 0
0x5973:	mov	qword ptr [rsp + 0x1c], 0
0x597c:	mov	qword ptr [rsp + 0x24], 0
0x5985:	mov	qword ptr [rsp + 0x2c], 0
0x598e:	mov	dword ptr [rsp + 0x34], 0
0x5996:	call	0x5350


0x5924:	call	0x18b0


0x58bc:	mov	dword ptr [rsp], esi
0x58bf:	mov	rcx, rsp
0x58c2:	mov	rdx, -1
0x58c9:	mov	rsi, rax
0x58cc:	mov	qword ptr [rsp + 4], 0
0x58d5:	mov	qword ptr [rsp + 0xc], 0
0x58de:	mov	qword ptr [rsp + 0x14], 0
0x58e7:	mov	qword ptr [rsp + 0x1c], 0
0x58f0:	mov	qword ptr [rsp + 0x24], 0
0x58f9:	mov	qword ptr [rsp + 0x2c], 0
0x5902:	mov	dword ptr [rsp + 0x34], 0
0x590a:	call	0x5350


0x57d1:	mov	rdi, qword ptr [r12 + 8]
0x57d6:	lea	rbx, [rip + 0x204c43]
0x57dd:	cmp	rdi, rbx
0x57e0:	je	0x57f9


0x57a6:	sub	eax, 2
0x57a9:	lea	rbx, [r12 + 0x18]
0x57ae:	shl	rax, 4
0x57b2:	lea	rbp, [r12 + rax + 0x28]
0x57b7:	nop	word ptr [rax + rax]
0x57c0:	mov	rdi, qword ptr [rbx]
0x57c3:	add	rbx, 0x10
0x57c7:	call	0x18a0


0x18c0:	jmp	qword ptr [rip + 0x20853a]


0x5607:	sub	rsp, 8
0x560b:	call	0x18b0


0x55f9:	test	rdx, rdx
0x55fc:	je	0x5607


0x1970:	jmp	qword ptr [rip + 0x2084e2]


0x3ffd:	mov	rcx, qword ptr [rip + 0x20627c]
0x4004:	lea	rdi, [rip + 0x372d]
0x400b:	mov	edx, 0x37
0x4010:	mov	esi, 1
0x4015:	call	0x1be0


0x3f86:	mov	esi, 0x2f
0x3f8b:	mov	rbx, rdi
0x3f8e:	call	0x19e0


0x3cf3:	call	0x18c0


0x3d80:	call	0x6500


0x3c58:	test	sil, sil
0x3c5b:	je	0x3ca0


0x3b09:	cmp	byte ptr [rip + 0x206799], 0
0x3b10:	mov	rbp, rdi
0x3b13:	mov	r12d, esi
0x3b16:	je	0x3c38


0x3a70:	cmp	sil, 1
0x3a74:	mov	ebp, 4
0x3a79:	mov	ebx, 1
0x3a7e:	sbb	r13d, r13d
0x3a81:	mov	r12, rsp
0x3a84:	and	r13d, 2
0x3a88:	add	r13d, 2
0x3a8c:	nop	dword ptr [rax]
0x3a90:	mov	rsi, r12
0x3a93:	mov	edi, ebx
0x3a95:	call	0x6780


0x3997:	call	0x6500


0x34ed:	lea	rsi, [rip + 0x39dc]
0x34f4:	xor	edi, edi
0x34f6:	call	0x1960


0x34bf:	lea	rsi, [rip + 0x39e2]
0x34c6:	xor	edi, edi
0x34c8:	call	0x1960


0x1a80:	jmp	qword ptr [rip + 0x20845a]


0x32f9:	lea	rcx, [rip + 0x43c0]
0x3300:	lea	rsi, [rip + 0x383d]
0x3307:	lea	rdi, [rip + 0x3852]
0x330e:	mov	edx, 0xdd
0x3313:	call	0x1a00


0x31ff:	cmp	byte ptr [rdi], 0x24
0x3202:	mov	rbp, rdi
0x3205:	jne	0x32f9


0x31a9:	cmp	qword ptr [rip + 0x206e3f], 0
0x31b1:	push	rbp
0x31b2:	mov	rbp, rsp
0x31b5:	je	0x31c3


0x31d8:	ret	


0x3190:	pop	rbp
0x3191:	ret	


0x3178:	mov	rax, qword ptr [rip + 0x206e69]
0x317f:	test	rax, rax
0x3182:	je	0x3190


0x3140:	pop	rbp
0x3141:	ret	


0x3127:	mov	rax, qword ptr [rip + 0x206ea2]
0x312e:	test	rax, rax
0x3131:	je	0x3140




0x186a:	add	rsp, 8
0x186e:	ret	


0x1868:	call	rax




0x6a5a:	cmp	qword ptr [rdi + 0x48], 0
0x6a5f:	jne	0x6a4a


0x1b50:	jmp	qword ptr [rip + 0x2083f2]


0x1ae0:	jmp	qword ptr [rip + 0x20842a]


0x1b00:	jmp	qword ptr [rip + 0x20841a]










0x67b0:	lea	rdx, [rdx + rdx*2]
0x67b4:	lea	rsi, [rax + rdx*4 + 4]
0x67b9:	call	0x18f0


0x67a0:	add	edx, 1
0x67a3:	add	rcx, 0xc
0x67a7:	cmp	edx, 0x23
0x67aa:	je	0x67d0


0x6680:	mov	edx, 0xa
0x6685:	mov	rsi, rsp
0x6688:	call	0x1a90


0x1a70:	jmp	qword ptr [rip + 0x208462]








0x64ba:	call	0x1a50


0x6471:	sub	rsp, 8
0x6475:	call	0x6520


0x6452:	mov	qword ptr [rsi], rax
0x6455:	mov	rsi, rax
0x6458:	jmp	0x6330


0x6447:	mov	rdx, rax
0x644a:	shr	rdx, 1
0x644d:	lea	rax, [rdx + rax + 1]
0x6452:	mov	qword ptr [rsi], rax
0x6455:	mov	rsi, rax
0x6458:	jmp	0x6330


0x6408:	xor	edx, edx
0x640a:	mov	eax, 0x80
0x640f:	xor	r8d, r8d
0x6412:	div	r9
0x6415:	test	rax, rax
0x6418:	sete	r8b
0x641c:	lea	rcx, [r8 + rax]
0x6420:	jmp	0x63e5


0x63e5:	mov	rax, rcx
0x63e8:	mul	r9
0x63eb:	seto	dl
0x63ee:	test	rax, rax
0x63f1:	movzx	edx, dl
0x63f4:	js	0x63fb


0x63fb:	sub	rsp, 8
0x63ff:	call	0x6520


0x63bf:	mov	rax, rcx
0x63c2:	shr	rax, 1
0x63c5:	lea	rcx, [rax + rcx + 1]
0x63ca:	mov	qword ptr [rsi], rcx
0x63cd:	imul	rcx, r9
0x63d1:	mov	rsi, rcx
0x63d4:	jmp	0x6330


0x6389:	jmp	0x6330


0x6358:	call	0x18a0


0x1b10:	jmp	qword ptr [rip + 0x208412]


0x6309:	jmp	0x62d0




0x620c:	test	r11b, r11b
0x620f:	jne	0x6235


0x6202:	add	r9, 1
0x6206:	cmp	r9, 0xa
0x620a:	jne	0x61e0


0x61f6:	mov	rax, qword ptr [rax]
0x61f9:	test	rax, rax
0x61fc:	mov	qword ptr [r8 + r9*8], rax
0x6200:	je	0x620c


0x613b:	call	0x5cb0


0x6131:	add	r9, 1
0x6135:	cmp	r9, 0xa
0x6139:	jne	0x6110


0x6125:	mov	rax, qword ptr [r11]
0x6128:	test	rax, rax
0x612b:	mov	qword ptr [r8 + r9*8], rax
0x612f:	je	0x613b


0x60e0:	add	r9, 1
0x60e4:	cmp	qword ptr [r8 + r9*8], 0
0x60e9:	jne	0x60e0


0x1bf0:	jmp	qword ptr [rip + 0x2083a2]


0x18b0:	jmp	qword ptr [rip + 0x208542]


0x5baa:	mov	qword ptr [rsp + 0x28], rsi
0x5baf:	mov	qword ptr [rsp + 0x30], rdx
0x5bb4:	mov	rcx, rsp
0x5bb7:	mov	rdx, r8
0x5bba:	mov	rsi, r9
0x5bbd:	call	0x5350


0x57f9:	lea	rbx, [rip + 0x204870]
0x5800:	cmp	r12, rbx
0x5803:	je	0x5814


0x57e2:	call	0x18a0


0x18a0:	jmp	qword ptr [rip + 0x20854a]




0x55fe:	mov	qword ptr [rdi + 0x28], rsi
0x5602:	mov	qword ptr [rdi + 0x30], rdx
0x5606:	ret	




0x1be0:	jmp	qword ptr [rip + 0x2083aa]


0x19e0:	jmp	qword ptr [rip + 0x2084aa]


0x3ca0:	lea	rdi, [rip + 0x206619]
0x3ca7:	call	0x1aa0


0x3c5d:	lea	rdi, [rip + 0x2066dc]
0x3c64:	call	0x1aa0


0x3c38:	lea	rdi, [rip + 0x206701]
0x3c3f:	call	0x1a80


0x3b1c:	mov	rdi, rbp
0x3b1f:	mov	byte ptr [rip + 0x206783], 1
0x3b26:	call	0x6500




0x1a00:	jmp	qword ptr [rip + 0x20849a]


0x320b:	cmp	byte ptr [rdi + 1], 0x7b
0x320f:	jne	0x32bd


0x31c3:	call	0x3110


0x31b7:	mov	rdi, qword ptr [rip + 0x206e4a]
0x31be:	call	0x1c60


0x3184:	pop	rbp
0x3185:	jmp	rax


0x3133:	pop	rbp
0x3134:	jmp	rax


0x6a61:	push	r12
0x6a63:	push	rbp
0x6a64:	mov	r12d, edx
0x6a67:	push	rbx
0x6a68:	mov	rbp, rsi
0x6a6b:	mov	rbx, rdi
0x6a6e:	call	0x1ac0








0x18f0:	jmp	qword ptr [rip + 0x208522]


0x67d0:	mov	qword ptr [rsp + 8], rdi
0x67d5:	call	0x1bb0


0x1a90:	jmp	qword ptr [rip + 0x208452]




0x1a50:	jmp	qword ptr [rip + 0x208472]


0x63f6:	test	rdx, rdx
0x63f9:	je	0x63ca




0x6211:	call	0x5cb0


0x6235:	mov	dword ptr [rsp + 8], r10d
0x623a:	jmp	0x6211


0x61e0:	cmp	r10d, 0x2f
0x61e4:	ja	0x623c


0x6110:	mov	eax, dword ptr [r10]
0x6113:	cmp	eax, 0x2f
0x6116:	ja	0x615a






0x5814:	pop	rbx
0x5815:	mov	dword ptr [rip + 0x204839], 1
0x581f:	pop	rbp
0x5820:	pop	r12
0x5822:	ret	


0x5805:	mov	rdi, r12
0x5808:	call	0x18a0








0x1aa0:	jmp	qword ptr [rip + 0x20844a]




0x3215:	movsx	eax, byte ptr [rdi + 2]
0x3219:	mov	edx, eax
0x321b:	sub	eax, 0x41
0x321e:	cmp	eax, 0x39
0x3221:	jbe	0x32a0


0x32bd:	add	rsp, 0x18
0x32c1:	xor	ecx, ecx
0x32c3:	mov	rax, rcx
0x32c6:	pop	rbx
0x32c7:	pop	rbp
0x32c8:	ret	


0x1c60:	jmp	qword ptr [rip + 0x20838a]




0x1bb0:	jmp	qword ptr [rip + 0x2083c2]






0x63ca:	mov	qword ptr [rsi], rcx
0x63cd:	imul	rcx, r9
0x63d1:	mov	rsi, rcx
0x63d4:	jmp	0x6330




0x32a0:	movabs	rcx, 0x3ffffff03ffffff
0x32aa:	bt	rcx, rax
0x32ae:	jb	0x322c


0x3223:	cmp	dl, 0x5f
0x3226:	jne	0x32bd




0x322c:	lea	rdx, [rbp + 3]
0x3230:	jmp	0x324c


0x32b4:	cmp	dl, 0x5f
0x32b7:	je	0x322c


0x324c:	movzx	eax, byte ptr [rdx]
0x324f:	cmp	al, 0x5a
0x3251:	jle	0x3238


0x3238:	cmp	al, 0x41
0x323a:	jge	0x3248


0x3253:	lea	ecx, [rax - 0x61]
0x3256:	cmp	cl, 0x19
0x3259:	jbe	0x3248


0x323c:	lea	ecx, [rax - 0x30]
0x323f:	cmp	cl, 9
0x3242:	jbe	0x3248


0x3248:	add	rdx, 1
0x324c:	movzx	eax, byte ptr [rdx]
0x324f:	cmp	al, 0x5a
0x3251:	jle	0x3238


0x325b:	cmp	al, 0x5f
0x325d:	je	0x3248


0x3244:	cmp	al, 0x5f
0x3246:	jne	0x325f


0x325f:	cmp	al, 0x7d
0x3261:	jne	0x32bd


0x3263:	mov	rbx, rdx
0x3266:	mov	rcx, qword ptr [rip + 0x207163]
0x326d:	sub	rbx, rbp
0x3270:	lea	rdx, [rbx - 2]
0x3274:	cmp	rdx, qword ptr [rip + 0x20714d]
0x327b:	jae	0x32d0


0x327d:	lea	rsi, [rbp + 2]
0x3281:	mov	rdi, rcx
0x3284:	call	0x1ab0


0x32d0:	lea	rsi, [rbx - 1]
0x32d4:	mov	rdi, rcx
0x32d7:	mov	qword ptr [rsp + 8], rdx
0x32dc:	mov	qword ptr [rip + 0x2070e5], rsi
0x32e3:	call	0x6330


0x1ab0:	jmp	qword ptr [rip + 0x208442]




0x31c8:	mov	byte ptr [rip + 0x2070b9], 1
0x31cf:	pop	rbp
0x31d0:	ret	


0x6ad1:	test	rbp, rbp
0x6ad4:	je	0x6af6


0x6af6:	add	rsp, 8
0x6afa:	pop	rbx
0x6afb:	pop	rbp
0x6afc:	pop	r12
0x6afe:	pop	r13
0x6b00:	pop	r14
0x6b02:	pop	r15
0x6b04:	ret	


0x6ad6:	xor	ebx, ebx
0x6ad8:	nop	dword ptr [rax + rax]
0x6ae0:	mov	rdx, r15
0x6ae3:	mov	rsi, r14
0x6ae6:	mov	edi, r13d
0x6ae9:	call	qword ptr [r12 + rbx*8]


0x3289:	mov	byte ptr [rax + rbx - 2], 0
0x328e:	mov	rcx, rax
0x3291:	add	rsp, 0x18
0x3295:	mov	rax, rcx
0x3298:	pop	rbx
0x3299:	pop	rbp
0x329a:	ret	


0x67da:	mov	ebp, eax
0x67dc:	call	0x1c00


0x1c00:	jmp	qword ptr [rip + 0x20839a]




0x3c69:	lea	rdi, [rip + 0x206650]
0x3c70:	call	0x1a80


0x3cac:	lea	rdi, [rip + 0x20668d]
0x3cb3:	jmp	0x3c70


0x3c70:	call	0x1a80


0x64bf:	test	rax, rax
0x64c2:	je	0x64c9


0x64c4:	add	rsp, 8
0x64c8:	ret	


0x668d:	mov	rdx, qword ptr [rsp]
0x6691:	cmp	byte ptr [rdx], 0
0x6694:	jne	0x669c


0x6696:	cmp	rax, 0x40
0x669a:	jle	0x6659


0x669c:	mov	dword ptr [r13], 0xffffffff
0x66a4:	mov	eax, 0xffffffff
0x66a9:	jmp	0x6660


0x6659:	mov	dword ptr [r13], eax
0x665d:	sar	eax, 0x1f
0x6660:	mov	rcx, qword ptr [rsp + 8]
0x6665:	xor	rcx, qword ptr fs:[0x28]
0x666e:	jne	0x6770


0x6660:	mov	rcx, qword ptr [rsp + 8]
0x6665:	xor	rcx, qword ptr fs:[0x28]
0x666e:	jne	0x6770


0x6674:	add	rsp, 0x18
0x6678:	pop	rbx
0x6679:	pop	rbp
0x667a:	pop	r12
0x667c:	pop	r13
0x667e:	ret	


0x6770:	call	0x19a0


0x19a0:	jmp	qword ptr [rip + 0x2084ca]




0x67be:	xor	eax, eax
0x67c0:	add	rsp, 0x18
0x67c4:	pop	rbx
0x67c5:	pop	rbp
0x67c6:	ret	


0x3a9a:	test	eax, eax
0x3a9c:	jne	0x3aa9


0x3a9e:	mov	rax, qword ptr [rip + 0x20691b]
0x3aa5:	mov	dword ptr [rax + rbp], r13d
0x3aa9:	add	ebx, 1
0x3aac:	add	rbp, 4
0x3ab0:	cmp	ebx, 0x41
0x3ab3:	jne	0x3a90


0x3aa9:	add	ebx, 1
0x3aac:	add	rbp, 4
0x3ab0:	cmp	ebx, 0x41
0x3ab3:	jne	0x3a90


0x3ab5:	mov	rax, qword ptr [rsp + 0x18]
0x3aba:	xor	rax, qword ptr fs:[0x28]
0x3ac3:	jne	0x3ad2


0x3a90:	mov	rsi, r12
0x3a93:	mov	edi, ebx
0x3a95:	call	0x6780


0x3ac5:	add	rsp, 0x20
0x3ac9:	pop	rbx
0x3aca:	pop	rbp
0x3acb:	pop	r12
0x3acd:	pop	r13
0x3acf:	pop	r14
0x3ad1:	ret	


0x3ad2:	call	0x19a0


0x3f93:	test	rax, rax
0x3f96:	je	0x3fed


0x3fed:	mov	qword ptr [rip + 0x206414], rbx
0x3ff4:	mov	qword ptr [rip + 0x20626d], rbx
0x3ffb:	pop	rbx
0x3ffc:	ret	


0x3f98:	lea	r8, [rax + 1]
0x3f9c:	mov	rdx, r8
0x3f9f:	sub	rdx, rbx
0x3fa2:	cmp	rdx, 6
0x3fa6:	jle	0x3fed


0x3fa8:	lea	rsi, [rax - 6]
0x3fac:	lea	rdi, [rip + 0x37bd]
0x3fb3:	mov	ecx, 7
0x3fb8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3fb8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3fba:	seta	dl
0x3fbd:	sbb	dl, 0
0x3fc0:	test	dl, dl
0x3fc2:	jne	0x3fed


0x3fc4:	lea	rdi, [rip + 0x37ad]
0x3fcb:	mov	ecx, 3
0x3fd0:	mov	rsi, r8
0x3fd3:	mov	rbx, r8
0x3fd6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3fd6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3fd8:	seta	dl
0x3fdb:	sbb	dl, 0
0x3fde:	test	dl, dl
0x3fe0:	jne	0x3fed


0x3fe2:	lea	rbx, [rax + 4]
0x3fe6:	mov	qword ptr [rip + 0x206253], rbx
0x3fed:	mov	qword ptr [rip + 0x206414], rbx
0x3ff4:	mov	qword ptr [rip + 0x20626d], rbx
0x3ffb:	pop	rbx
0x3ffc:	ret	


0x401a:	call	0x18b0


0x580d:	mov	qword ptr [rip + 0x20484c], rbx
0x5814:	pop	rbx
0x5815:	mov	dword ptr [rip + 0x204839], 1
0x581f:	pop	rbp
0x5820:	pop	r12
0x5822:	ret	


0x57e7:	mov	qword ptr [rip + 0x20487e], 0x100
0x57f2:	mov	qword ptr [rip + 0x20487f], rbx
0x57f9:	lea	rbx, [rip + 0x204870]
0x5800:	cmp	r12, rbx
0x5803:	je	0x5814


0x635d:	xor	eax, eax
0x635f:	pop	rbx
0x6360:	ret	


0x32e8:	mov	rdx, qword ptr [rsp + 8]
0x32ed:	mov	rcx, rax
0x32f0:	mov	qword ptr [rip + 0x2070d9], rax
0x32f7:	jmp	0x327d


0x57cc:	cmp	rbx, rbp
0x57cf:	jne	0x57c0


0x57c0:	mov	rdi, qword ptr [rbx]
0x57c3:	add	rbx, 0x10
0x57c7:	call	0x18a0


0x5cec:	lea	rsi, [rip + 0x1f68]
0x5cf3:	xor	edi, edi
0x5cf5:	mov	edx, 5
0x5cfa:	call	0x1960


0x5e01:	jmp	0x5cec


0x6346:	test	rax, rax
0x6349:	jne	0x6350


0x634b:	test	rbx, rbx
0x634e:	jne	0x6361


0x6350:	pop	rbx
0x6351:	ret	


0x6361:	call	0x6520


0x6647:	test	eax, eax
0x6649:	jne	0x6630


0x664b:	lea	rdx, [rbx + rbx*2]
0x664f:	lea	rax, [rip + 0x203a2a]
0x6656:	mov	eax, dword ptr [rax + rdx*4]
0x6659:	mov	dword ptr [r13], eax
0x665d:	sar	eax, 0x1f
0x6660:	mov	rcx, qword ptr [rsp + 8]
0x6665:	xor	rcx, qword ptr fs:[0x28]
0x666e:	jne	0x6770


0x6630:	add	ebx, 1
0x6633:	add	rbp, 0xc
0x6637:	cmp	ebx, 0x23
0x663a:	je	0x66b0


0x66b0:	call	0x1bb0


0x66b5:	mov	ebp, eax
0x66b7:	call	0x1c00


0x6a0e:	test	eax, eax
0x6a10:	je	0x6a1a


0x6a12:	test	dword ptr [rbx], 0x100
0x6a18:	jne	0x6a28


0x6a28:	mov	rdi, rbx
0x6a2b:	mov	edx, 1
0x6a30:	xor	esi, esi
0x6a32:	call	0x6a40


0x1ca3:	lea	rsi, [rip + 0x5007]
0x1caa:	mov	edi, 6
0x1caf:	call	0x1b20


0x3c75:	mov	rax, qword ptr [rsp + 0x28]
0x3c7a:	xor	rax, qword ptr fs:[0x28]
0x3c83:	mov	byte ptr [rip + 0x20661f], 1
0x3c8a:	jne	0x3cb5


0x3c8c:	add	rsp, 0x38
0x3c90:	pop	rbx
0x3c91:	pop	rbp
0x3c92:	pop	r12
0x3c94:	pop	r13
0x3c96:	pop	r14
0x3c98:	pop	r15
0x3c9a:	ret	


0x3cb5:	call	0x19a0


0x3c44:	lea	rdi, [rip + 0x206675]
0x3c4b:	call	0x1a80


0x3c50:	jmp	0x3b1c


0x3356:	xor	esi, esi
0x3358:	xor	edi, edi
0x335a:	mov	rdx, rbx
0x335d:	call	0x1890


0x1890:	jmp	qword ptr [rip + 0x208552]




0x4181:	cmp	r15d, 0xa
0x4185:	mov	qword ptr [rsp + 0x58], rax
0x418a:	ja	0x533f


0x4190:	lea	rcx, [rip + 0x3649]
0x4197:	mov	edx, r15d
0x419a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x419e:	add	rax, rcx
0x41a1:	jmp	rax


0x533f:	call	0x18b0


0x3cf8:	lea	rsi, [rsp + 0x10]
0x3cfd:	mov	edx, 0xa
0x3d02:	mov	dword ptr [rax], 0
0x3d08:	mov	rdi, rbp
0x3d0b:	mov	rbx, rax
0x3d0e:	call	0x1a90


0x3d13:	mov	rdx, qword ptr [rsp + 0x10]
0x3d18:	cmp	rdx, rbp
0x3d1b:	je	0x3d38


0x3d38:	mov	dword ptr [rsp + 0xc], 0xffffffff
0x3d40:	mov	rdi, rbp
0x3d43:	call	0x5c90


0x3d1d:	cmp	byte ptr [rdx], 0
0x3d20:	jne	0x3d38


0x3d22:	mov	edx, dword ptr [rbx]
0x3d24:	test	edx, edx
0x3d26:	jne	0x3d38


0x3d28:	movsxd	rdx, eax
0x3d2b:	cmp	rdx, rax
0x3d2e:	je	0x3e70


0x3e70:	cmp	edx, -1
0x3e73:	je	0x3e93


0x3e93:	mov	dword ptr [rsp + 0xc], edx
0x3e97:	jmp	0x3d40


0x3e75:	cmp	edx, 0xff
0x3e7b:	mov	eax, 0x7f
0x3e80:	mov	ebx, 0xff
0x3e85:	cmovl	ebx, eax
0x3e88:	and	ebx, edx
0x3e8a:	mov	dword ptr [rsp + 0xc], ebx
0x3e8e:	jmp	0x3dea


0x3d40:	mov	rdi, rbp
0x3d43:	call	0x5c90


0x3dea:	mov	rsi, r14
0x3ded:	mov	edi, ebx
0x3def:	call	0x6780


0x3df4:	test	eax, eax
0x3df6:	jne	0x3d40


0x3dfc:	mov	eax, dword ptr [rsp + 0xc]
0x3e00:	mov	rcx, qword ptr [rsp + 0x18]
0x3e05:	xor	rcx, qword ptr fs:[0x28]
0x3e0e:	jne	0x3e9c


0x3e14:	add	rsp, 0x28
0x3e18:	pop	rbx
0x3e19:	pop	rbp
0x3e1a:	pop	r12
0x3e1c:	pop	r13
0x3e1e:	pop	r14
0x3e20:	pop	r15
0x3e22:	ret	


0x3e9c:	call	0x19a0


0x5371:	mov	r13, rax
0x5374:	mov	eax, dword ptr [rax]
0x5376:	test	r15d, r15d
0x5379:	mov	rbx, qword ptr [rip + 0x204ce0]
0x5380:	mov	dword ptr [rsp + 0x18], eax
0x5384:	js	0x54f1


0x54f1:	call	0x18b0


0x538a:	cmp	dword ptr [rip + 0x204cc7], r15d
0x5391:	jg	0x53f5


0x5393:	cmp	r15d, 0x7fffffff
0x539a:	je	0x54f6


0x53f5:	mov	eax, dword ptr [rbp + 4]
0x53f8:	shl	r15, 4
0x53fc:	sub	rsp, 8
0x5400:	add	rbx, r15
0x5403:	lea	r15, [rbp + 8]
0x5407:	mov	r8d, dword ptr [rbp]
0x540b:	mov	r11, qword ptr [rbx]
0x540e:	mov	r12, qword ptr [rbx + 8]
0x5412:	mov	rcx, r14
0x5415:	or	eax, 1
0x5418:	mov	dword ptr [rsp + 0x24], eax
0x541c:	push	qword ptr [rbp + 0x30]
0x541f:	mov	r9d, eax
0x5422:	push	qword ptr [rbp + 0x28]
0x5425:	push	r15
0x5427:	mov	rsi, r11
0x542a:	mov	rdx, qword ptr [rsp + 0x28]
0x542f:	mov	rdi, r12
0x5432:	mov	qword ptr [rsp + 0x30], r11
0x5437:	call	0x4110


0x54f6:	call	0x6520


0x53a0:	lea	r12d, [r15 + 1]
0x53a4:	lea	rax, [rip + 0x204cc5]
0x53ab:	movsxd	rsi, r12d
0x53ae:	shl	rsi, 4
0x53b2:	cmp	rbx, rax
0x53b5:	je	0x54d0


0x54d0:	xor	edi, edi
0x54d2:	call	0x6330


0x53bb:	mov	rdi, rbx
0x53be:	call	0x6330


0x53c3:	mov	rbx, rax
0x53c6:	mov	qword ptr [rip + 0x204c93], rax
0x53cd:	movsxd	rdi, dword ptr [rip + 0x204c84]
0x53d4:	mov	edx, r12d
0x53d7:	xor	esi, esi
0x53d9:	sub	edx, edi
0x53db:	shl	rdi, 4
0x53df:	movsxd	rdx, edx
0x53e2:	add	rdi, rbx
0x53e5:	shl	rdx, 4
0x53e9:	call	0x1a10


0x1a10:	jmp	qword ptr [rip + 0x208492]




0x54d7:	movdqa	xmm0, xmmword ptr [rip + 0x204b91]
0x54df:	mov	rbx, rax
0x54e2:	mov	qword ptr [rip + 0x204b77], rax
0x54e9:	movups	xmmword ptr [rax], xmm0
0x54ec:	jmp	0x53cd


0x53cd:	movsxd	rdi, dword ptr [rip + 0x204c84]
0x53d4:	mov	edx, r12d
0x53d7:	xor	esi, esi
0x53d9:	sub	edx, edi
0x53db:	shl	rdi, 4
0x53df:	movsxd	rdx, edx
0x53e2:	add	rdi, rbx
0x53e5:	shl	rdx, 4
0x53e9:	call	0x1a10


0x550c:	mov	r12d, dword ptr [rax]
0x550f:	mov	rbp, rax
0x5512:	lea	rax, [rip + 0x205007]
0x5519:	test	rbx, rbx
0x551c:	mov	esi, 0x38
0x5521:	cmove	rbx, rax
0x5525:	mov	rdi, rbx
0x5528:	call	0x64d0


0x5642:	mov	r12d, dword ptr [rax]
0x5645:	mov	rbp, rax
0x5648:	lea	rax, [rbx + 8]
0x564c:	sub	rsp, 8
0x5650:	mov	r9d, dword ptr [rbx + 4]
0x5654:	push	qword ptr [rbx + 0x30]
0x5657:	mov	r8d, dword ptr [rbx]
0x565a:	push	qword ptr [rbx + 0x28]
0x565d:	mov	rdx, r15
0x5660:	push	rax
0x5661:	mov	rcx, qword ptr [rsp + 0x28]
0x5666:	mov	rsi, r14
0x5669:	mov	rdi, r13
0x566c:	call	0x4110


0x56bf:	test	r12, r12
0x56c2:	mov	r13, rax
0x56c5:	mov	eax, dword ptr [rax]
0x56c7:	sete	bpl
0x56cb:	or	ebp, dword ptr [rbx + 4]
0x56ce:	lea	r10, [rbx + 8]
0x56d2:	sub	rsp, 8
0x56d6:	mov	r8d, dword ptr [rbx]
0x56d9:	mov	rcx, r15
0x56dc:	mov	dword ptr [rsp + 0x14], eax
0x56e0:	push	qword ptr [rbx + 0x30]
0x56e3:	mov	rdx, r14
0x56e6:	push	qword ptr [rbx + 0x28]
0x56e9:	push	r10
0x56eb:	xor	esi, esi
0x56ed:	mov	r9d, ebp
0x56f0:	xor	edi, edi
0x56f2:	mov	qword ptr [rsp + 0x40], r10
0x56f7:	call	0x4110


0x62d9:	test	rax, rax
0x62dc:	jne	0x62e3


0x62de:	test	rbx, rbx
0x62e1:	jne	0x62e5


0x62e3:	pop	rbx
0x62e4:	ret	


0x62e5:	call	0x6520


0x6489:	mov	rdx, rbx
0x648c:	xor	esi, esi
0x648e:	mov	rdi, rax
0x6491:	pop	rbx
0x6492:	jmp	0x1a10


0x64e4:	add	rsp, 8
0x64e8:	mov	rdx, rbx
0x64eb:	mov	rsi, rbp
0x64ee:	pop	rbx
0x64ef:	pop	rbp
0x64f0:	mov	rdi, rax
0x64f3:	jmp	0x1ab0


0x6509:	mov	rdi, rbx
0x650c:	lea	rsi, [rax + 1]
0x6510:	pop	rbx
0x6511:	jmp	0x64d0


0x5cff:	lea	rdx, [rip + 0x227a]
0x5d06:	mov	rcx, rax
0x5d09:	mov	r8d, 0x7e3
0x5d0f:	mov	esi, 1
0x5d14:	mov	rdi, rbp
0x5d17:	xor	eax, eax
0x5d19:	call	0x1bf0


0x5d1e:	lea	rsi, [rip + 0x1fc3]
0x5d25:	xor	edi, edi
0x5d27:	mov	edx, 5
0x5d2c:	call	0x1960


0x5d31:	mov	rsi, rbp
0x5d34:	mov	rdi, rax
0x5d37:	call	0x1a40


0x1a40:	jmp	qword ptr [rip + 0x20847a]




0x34cd:	mov	rdi, qword ptr [rip + 0x206dac]
0x34d4:	mov	rdx, rax
0x34d7:	mov	rcx, rbx
0x34da:	mov	esi, 1
0x34df:	xor	eax, eax
0x34e1:	call	0x1bf0


0x34e6:	mov	edi, ebp
0x34e8:	call	0x1bd0


0x1bd0:	jmp	qword ptr [rip + 0x2083b2]




0x34fb:	mov	rdx, rbx
0x34fe:	mov	rsi, rax
0x3501:	mov	edi, 1
0x3506:	xor	eax, eax
0x3508:	call	0x1b30


0x1b30:	jmp	qword ptr [rip + 0x208402]




0x6264:	lea	rdx, [rip + 0x1a4c]
0x626b:	mov	rsi, rax
0x626e:	mov	edi, 1
0x6273:	xor	eax, eax
0x6275:	call	0x1b30


0x6537:	mov	edi, dword ptr [rip + 0x203adb]
0x653d:	lea	rdx, [rip + 0x11f1]
0x6544:	mov	rcx, rax
0x6547:	xor	esi, esi
0x6549:	xor	eax, eax
0x654b:	call	0x1b40


0x1b40:	jmp	qword ptr [rip + 0x2083fa]




0x6597:	cmp	rax, -3
0x659b:	mov	rbp, rax
0x659e:	jbe	0x65c0


0x65c0:	mov	rdx, qword ptr [rsp + 8]
0x65c5:	xor	rdx, qword ptr fs:[0x28]
0x65ce:	mov	rax, rbp
0x65d1:	jne	0x65de


0x65a0:	test	r12, r12
0x65a3:	je	0x65c0


0x65d3:	add	rsp, 0x18
0x65d7:	pop	rbx
0x65d8:	pop	rbp
0x65d9:	pop	r12
0x65db:	pop	r13
0x65dd:	ret	


0x65de:	call	0x19a0


0x65a5:	xor	edi, edi
0x65a7:	call	0x68e0


0x686c:	mov	ebx, dword ptr [rbp]
0x686f:	mov	rdi, rbp
0x6872:	mov	r12, rax
0x6875:	call	0x6980


0x1cb4:	lea	rsi, [rip + 0x4fb3]
0x1cbb:	lea	rdi, [rip + 0x4f4d]
0x1cc2:	call	0x1940


0x1940:	jmp	qword ptr [rip + 0x2084fa]




0x68eb:	mov	rdx, rax
0x68ee:	mov	eax, 1
0x68f3:	test	rdx, rdx
0x68f6:	je	0x6915


0x6915:	add	rsp, 8
0x6919:	ret	


0x68f8:	lea	rdi, [rip + 0x16d1]
0x68ff:	mov	ecx, 2
0x6904:	mov	rsi, rdx
0x6907:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x6907:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x6909:	seta	cl
0x690c:	sbb	cl, 0
0x690f:	xor	eax, eax
0x6911:	test	cl, cl
0x6913:	jne	0x6920


0x6920:	lea	rdi, [rip + 0x16ab]
0x6927:	mov	ecx, 6
0x692c:	mov	rsi, rdx
0x692f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x692f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x6931:	seta	al
0x6934:	sbb	al, 0
0x6936:	test	al, al
0x6938:	setne	al
0x693b:	add	rsp, 8
0x693f:	ret	


0x65ac:	test	al, al
0x65ae:	jne	0x65c0


0x65b0:	movzx	eax, byte ptr [r13]
0x65b5:	mov	ebp, 1
0x65ba:	mov	dword ptr [rbx], eax
0x65bc:	nop	dword ptr [rax]
0x65c0:	mov	rdx, qword ptr [rsp + 8]
0x65c5:	xor	rdx, qword ptr fs:[0x28]
0x65ce:	mov	rax, rbp
0x65d1:	jne	0x65de


0x694e:	test	rax, rax
0x6951:	je	0x6970


0x6970:	lea	rax, [rip + 0x1661]
0x6977:	add	rsp, 8
0x697b:	ret	


0x6953:	cmp	byte ptr [rax], 0
0x6956:	lea	rdx, [rip + 0x167b]
0x695d:	cmove	rax, rdx
0x6961:	add	rsp, 8
0x6965:	ret	


0x4030:	movzx	edx, byte ptr [rax]
0x4033:	and	edx, 0xffffffdf
0x4036:	cmp	dl, 0x55
0x4039:	je	0x40b0


0x40b0:	movzx	edx, byte ptr [rax + 1]
0x40b4:	and	edx, 0xffffffdf
0x40b7:	cmp	dl, 0x54
0x40ba:	jne	0x4040


0x403b:	cmp	dl, 0x47
0x403e:	je	0x4060


0x40bc:	movzx	edx, byte ptr [rax + 2]
0x40c0:	and	edx, 0xffffffdf
0x40c3:	cmp	dl, 0x46
0x40c6:	jne	0x4040


0x4040:	lea	rax, [rip + 0x3744]
0x4047:	lea	rdx, [rip + 0x2b23]
0x404e:	cmp	ebx, 9
0x4051:	cmovne	rax, rdx
0x4055:	add	rsp, 8
0x4059:	pop	rbx
0x405a:	pop	rbp
0x405b:	ret	


0x4060:	movzx	edx, byte ptr [rax + 1]
0x4064:	and	edx, 0xffffffdf
0x4067:	cmp	dl, 0x42
0x406a:	jne	0x4040


0x40cc:	cmp	byte ptr [rax + 3], 0x2d
0x40d0:	jne	0x4040


0x406c:	cmp	byte ptr [rax + 2], 0x31
0x4070:	jne	0x4040


0x40d6:	cmp	byte ptr [rax + 4], 0x38
0x40da:	jne	0x4040


0x4072:	cmp	byte ptr [rax + 3], 0x38
0x4076:	jne	0x4040


0x40e0:	cmp	byte ptr [rax + 5], 0
0x40e4:	jne	0x4040


0x4078:	cmp	byte ptr [rax + 4], 0x30
0x407c:	jne	0x4040


0x40ea:	cmp	byte ptr [rbp], 0x60
0x40ee:	lea	rax, [rip + 0x3687]
0x40f5:	lea	rdx, [rip + 0x3684]
0x40fc:	cmovne	rax, rdx
0x4100:	add	rsp, 8
0x4104:	pop	rbx
0x4105:	pop	rbp
0x4106:	ret	


0x407e:	cmp	byte ptr [rax + 5], 0x33
0x4082:	jne	0x4040


0x4084:	cmp	byte ptr [rax + 6], 0x30
0x4088:	jne	0x4040


0x408a:	cmp	byte ptr [rax + 7], 0
0x408e:	jne	0x4040


0x4090:	cmp	byte ptr [rbp], 0x60
0x4094:	lea	rax, [rip + 0x36e9]
0x409b:	lea	rdx, [rip + 0x36e6]
0x40a2:	cmovne	rax, rdx
0x40a6:	add	rsp, 8
0x40aa:	pop	rbx
0x40ab:	pop	rbp
0x40ac:	ret	


0x6a73:	mov	edx, r12d
0x6a76:	mov	rsi, rbp
0x6a79:	mov	edi, eax
0x6a7b:	call	0x19f0


0x19f0:	jmp	qword ptr [rip + 0x2084a2]




0x698c:	test	eax, eax
0x698e:	mov	rdi, rbx
0x6991:	js	0x69e7


0x69e7:	pop	rbx
0x69e8:	pop	rbp
0x69e9:	pop	r12
0x69eb:	jmp	0x1930


0x6993:	call	0x1b00


0x1930:	jmp	qword ptr [rip + 0x208502]




0x6998:	test	eax, eax
0x699a:	jne	0x69c8


0x699c:	mov	rdi, rbx
0x699f:	call	0x6a00


0x69c8:	mov	rdi, rbx
0x69cb:	call	0x1ac0


0x69d0:	xor	esi, esi
0x69d2:	mov	edx, 1
0x69d7:	mov	edi, eax
0x69d9:	call	0x19f0


0x69de:	cmp	rax, -1
0x69e2:	jne	0x699c


0x69e4:	mov	rdi, rbx
0x69e7:	pop	rbx
0x69e8:	pop	rbp
0x69e9:	pop	r12
0x69eb:	jmp	0x1930


0x6a80:	cmp	rax, -1
0x6a84:	je	0x6a92


0x6a92:	pop	rbx
0x6a93:	pop	rbp
0x6a94:	pop	r12
0x6a96:	ret	


0x6a86:	and	dword ptr [rbx], 0xffffffef
0x6a89:	mov	qword ptr [rbx + 0x90], rax
0x6a90:	xor	eax, eax
0x6a92:	pop	rbx
0x6a93:	pop	rbp
0x6a94:	pop	r12
0x6a96:	ret	


0x1cc7:	lea	rdi, [rip + 0x4f41]
0x1cce:	call	0x1920


0x1920:	jmp	qword ptr [rip + 0x20850a]




0x6550:	call	0x18b0


0x627a:	lea	rsi, [rip + 0x1a4c]
0x6281:	mov	edx, 5
0x6286:	xor	edi, edi
0x6288:	call	0x1960


0x628d:	lea	rcx, [rip + 0x1174]
0x6294:	lea	rdx, [rip + 0x970]
0x629b:	mov	rsi, rax
0x629e:	mov	edi, 1
0x62a3:	xor	eax, eax
0x62a5:	call	0x1b30


0x62aa:	mov	rbx, qword ptr [rip + 0x203f97]
0x62b1:	lea	rsi, [rip + 0x1c48]
0x62b8:	xor	edi, edi
0x62ba:	mov	edx, 5
0x62bf:	call	0x1960


0x62c4:	mov	rsi, rbx
0x62c7:	mov	rdi, rax
0x62ca:	pop	rbx
0x62cb:	jmp	0x1a40


0x350d:	mov	rbx, qword ptr [rip + 0x206d34]
0x3514:	lea	rsi, [rip + 0x39f5]
0x351b:	mov	edx, 5
0x3520:	xor	edi, edi
0x3522:	call	0x1960


0x3527:	mov	rsi, rbx
0x352a:	mov	rdi, rax
0x352d:	call	0x1a40


0x3532:	mov	rbx, qword ptr [rip + 0x206d0f]
0x3539:	lea	rsi, [rip + 0x3a10]
0x3540:	mov	edx, 5
0x3545:	xor	edi, edi
0x3547:	call	0x1960


0x354c:	mov	rsi, rbx
0x354f:	mov	rdi, rax
0x3552:	call	0x1a40


0x3557:	mov	rbx, qword ptr [rip + 0x206cea]
0x355e:	lea	rsi, [rip + 0x3a3b]
0x3565:	mov	edx, 5
0x356a:	xor	edi, edi
0x356c:	call	0x1960


0x3571:	mov	rsi, rbx
0x3574:	mov	rdi, rax
0x3577:	call	0x1a40


0x357c:	mov	rbx, qword ptr [rip + 0x206cc5]
0x3583:	lea	rsi, [rip + 0x3ad6]
0x358a:	mov	edx, 5
0x358f:	xor	edi, edi
0x3591:	call	0x1960


0x3596:	mov	rsi, rbx
0x3599:	mov	rdi, rax
0x359c:	call	0x1a40


0x35a1:	mov	rbx, qword ptr [rip + 0x206ca0]
0x35a8:	lea	rsi, [rip + 0x3ae9]
0x35af:	mov	edx, 5
0x35b4:	xor	edi, edi
0x35b6:	call	0x1960


0x35bb:	mov	rsi, rbx
0x35be:	mov	rdi, rax
0x35c1:	call	0x1a40


0x35c6:	mov	rbx, qword ptr [rip + 0x206c7b]
0x35cd:	lea	rsi, [rip + 0x3b54]
0x35d4:	mov	edx, 5
0x35d9:	xor	edi, edi
0x35db:	call	0x1960


0x35e0:	mov	rsi, rbx
0x35e3:	mov	rdi, rax
0x35e6:	call	0x1a40


0x35eb:	mov	rbx, qword ptr [rip + 0x206c56]
0x35f2:	lea	rsi, [rip + 0x3b7f]
0x35f9:	mov	edx, 5
0x35fe:	xor	edi, edi
0x3600:	call	0x1960


0x3605:	mov	rsi, rbx
0x3608:	mov	rdi, rax
0x360b:	call	0x1a40


0x3610:	mov	rbx, qword ptr [rip + 0x206c31]
0x3617:	lea	rsi, [rip + 0x3baa]
0x361e:	mov	edx, 5
0x3623:	xor	edi, edi
0x3625:	call	0x1960


0x362a:	mov	rsi, rbx
0x362d:	mov	rdi, rax
0x3630:	call	0x1a40


0x3635:	mov	rbx, qword ptr [rip + 0x206c0c]
0x363c:	lea	rsi, [rip + 0x3bd5]
0x3643:	mov	edx, 5
0x3648:	xor	edi, edi
0x364a:	call	0x1960


0x364f:	mov	rsi, rbx
0x3652:	mov	rdi, rax
0x3655:	call	0x1a40


0x365a:	mov	rbx, qword ptr [rip + 0x206be7]
0x3661:	lea	rsi, [rip + 0x3c00]
0x3668:	mov	edx, 5
0x366d:	xor	edi, edi
0x366f:	call	0x1960


0x3674:	mov	rsi, rbx
0x3677:	mov	rdi, rax
0x367a:	call	0x1a40


0x367f:	mov	rbx, qword ptr [rip + 0x206bc2]
0x3686:	lea	rsi, [rip + 0x3c2b]
0x368d:	mov	edx, 5
0x3692:	xor	edi, edi
0x3694:	call	0x1960


0x3699:	mov	rsi, rbx
0x369c:	mov	rdi, rax
0x369f:	call	0x1a40


0x36a4:	mov	rbx, qword ptr [rip + 0x206b9d]
0x36ab:	lea	rsi, [rip + 0x3c36]
0x36b2:	mov	edx, 5
0x36b7:	xor	edi, edi
0x36b9:	call	0x1960


0x36be:	mov	rsi, rbx
0x36c1:	mov	rdi, rax
0x36c4:	call	0x1a40


0x36c9:	mov	rbx, qword ptr [rip + 0x206b78]
0x36d0:	lea	rsi, [rip + 0x3c49]
0x36d7:	mov	edx, 5
0x36dc:	xor	edi, edi
0x36de:	call	0x1960


0x36e3:	mov	rsi, rbx
0x36e6:	mov	rdi, rax
0x36e9:	call	0x1a40


0x36ee:	mov	rbx, qword ptr [rip + 0x206b53]
0x36f5:	lea	rsi, [rip + 0x3c6c]
0x36fc:	mov	edx, 5
0x3701:	xor	edi, edi
0x3703:	call	0x1960


0x3708:	mov	rsi, rbx
0x370b:	mov	rdi, rax
0x370e:	lea	rbx, [rip + 0x347c]
0x3715:	call	0x1a40


0x371a:	lea	rax, [rip + 0x3474]
0x3721:	lea	rcx, [rip + 0x34ae]
0x3728:	mov	qword ptr [rsp + 0x60], 0
0x3731:	mov	qword ptr [rsp + 0x68], 0
0x373a:	mov	rdx, rsp
0x373d:	mov	qword ptr [rsp], rax
0x3741:	lea	rax, [rip + 0x344f]
0x3748:	mov	qword ptr [rsp + 0x30], rcx
0x374d:	lea	rcx, [rip + 0x348c]
0x3754:	mov	qword ptr [rsp + 8], rax
0x3759:	lea	rax, [rip + 0x34af]
0x3760:	mov	qword ptr [rsp + 0x40], rcx
0x3765:	lea	rcx, [rip + 0x347e]
0x376c:	mov	qword ptr [rsp + 0x10], rax
0x3771:	lea	rax, [rip + 0x342f]
0x3778:	mov	qword ptr [rsp + 0x50], rcx
0x377d:	mov	qword ptr [rsp + 0x18], rax
0x3782:	lea	rax, [rip + 0x3434]
0x3789:	mov	qword ptr [rsp + 0x20], rax
0x378e:	lea	rax, [rip + 0x3432]
0x3795:	mov	qword ptr [rsp + 0x28], rax
0x379a:	mov	qword ptr [rsp + 0x38], rax
0x379f:	mov	qword ptr [rsp + 0x48], rax
0x37a4:	mov	qword ptr [rsp + 0x58], rax
0x37a9:	nop	dword ptr [rax]
0x37b0:	add	rdx, 0x10
0x37b4:	mov	rdi, qword ptr [rdx]
0x37b7:	test	rdi, rdi
0x37ba:	je	0x37cf


0x37cf:	mov	r12, qword ptr [rdx + 8]
0x37d3:	xor	edi, edi
0x37d5:	mov	edx, 5
0x37da:	lea	rsi, [rip + 0x3413]
0x37e1:	test	r12, r12
0x37e4:	je	0x38ab


0x37bc:	mov	ecx, 4
0x37c1:	mov	rsi, rbx
0x37c4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x38ab:	call	0x1960


0x37ea:	call	0x1960


0x37c4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x37c6:	seta	al
0x37c9:	sbb	al, 0
0x37cb:	test	al, al
0x37cd:	jne	0x37b0


0x37b0:	add	rdx, 0x10
0x37b4:	mov	rdi, qword ptr [rdx]
0x37b7:	test	rdi, rdi
0x37ba:	je	0x37cf


0x37ef:	lea	rcx, [rip + 0x3c12]
0x37f6:	lea	rdx, [rip + 0x340e]
0x37fd:	mov	rsi, rax
0x3800:	mov	edi, 1
0x3805:	xor	eax, eax
0x3807:	call	0x1b30


0x380c:	xor	esi, esi
0x380e:	mov	edi, 5
0x3813:	call	0x1b20


0x3818:	test	rax, rax
0x381b:	je	0x3839


0x3839:	lea	rsi, [rip + 0x33dd]
0x3840:	xor	edi, edi
0x3842:	mov	edx, 5
0x3847:	call	0x1960


0x381d:	lea	rsi, [rip + 0x33f5]
0x3824:	mov	edx, 3
0x3829:	mov	rdi, rax
0x382c:	call	0x18d0


0x18d0:	jmp	qword ptr [rip + 0x208532]




0x384c:	lea	rcx, [rip + 0x333e]
0x3853:	lea	rdx, [rip + 0x3bae]
0x385a:	mov	rsi, rax
0x385d:	mov	edi, 1
0x3862:	xor	eax, eax
0x3864:	call	0x1b30


0x3869:	cmp	r12, rbx
0x386c:	lea	rcx, [rip + 0x333e]
0x3873:	lea	rbx, [rip + 0x3437]
0x387a:	cmove	rbx, rcx
0x387e:	lea	rsi, [rip + 0x3bf3]
0x3885:	xor	edi, edi
0x3887:	mov	edx, 5
0x388c:	call	0x1960


0x3891:	mov	rcx, rbx
0x3894:	mov	rsi, rax
0x3897:	mov	rdx, r12
0x389a:	mov	edi, 1
0x389f:	xor	eax, eax
0x38a1:	call	0x1b30


0x38a6:	jmp	0x34e6


0x38b0:	lea	rcx, [rip + 0x3b51]
0x38b7:	lea	rdx, [rip + 0x334d]
0x38be:	mov	rsi, rax
0x38c1:	mov	edi, 1
0x38c6:	xor	eax, eax
0x38c8:	call	0x1b30


0x38cd:	xor	esi, esi
0x38cf:	mov	edi, 5
0x38d4:	call	0x1b20


0x38d9:	test	rax, rax
0x38dc:	je	0x38f6


0x38f6:	lea	rsi, [rip + 0x3320]
0x38fd:	mov	edx, 5
0x3902:	xor	edi, edi
0x3904:	lea	r12, [rip + 0x3286]
0x390b:	lea	rbx, [rip + 0x329f]
0x3912:	call	0x1960


0x38de:	lea	rsi, [rip + 0x3334]
0x38e5:	mov	edx, 3
0x38ea:	mov	rdi, rax
0x38ed:	call	0x18d0


0x3917:	lea	rcx, [rip + 0x3273]
0x391e:	lea	rdx, [rip + 0x3ae3]
0x3925:	mov	rsi, rax
0x3928:	mov	edi, 1
0x392d:	xor	eax, eax
0x392f:	call	0x1b30


0x3934:	jmp	0x387e


0x387e:	lea	rsi, [rip + 0x3bf3]
0x3885:	xor	edi, edi
0x3887:	mov	edx, 5
0x388c:	call	0x1960


0x5d3c:	cmp	r12, 9
0x5d40:	ja	0x6080


0x5d46:	lea	rdx, [rip + 0x21fb]
0x5d4d:	movsxd	rax, dword ptr [rdx + r12*4]
0x5d51:	add	rax, rdx
0x5d54:	jmp	rax


0x6080:	mov	r10, qword ptr [rbx + 0x40]
0x6084:	mov	r9, qword ptr [rbx + 0x38]
0x6088:	mov	edx, 5
0x608d:	mov	rax, qword ptr [rbx + 0x10]
0x6091:	mov	r8, qword ptr [rbx + 8]
0x6095:	lea	rsi, [rip + 0x1e24]
0x609c:	mov	r13, qword ptr [rbx + 0x30]
0x60a0:	mov	r12, qword ptr [rbx + 0x28]
0x60a4:	mov	r15, qword ptr [rbx + 0x20]
0x60a8:	mov	r14, qword ptr [rbx + 0x18]
0x60ac:	mov	qword ptr [rsp + 0x18], r10
0x60b1:	mov	qword ptr [rsp + 0x10], r9
0x60b6:	mov	qword ptr [rsp], rax
0x60ba:	mov	qword ptr [rsp + 8], r8
0x60bf:	mov	rbx, qword ptr [rbx]
0x60c2:	jmp	0x5e52


0x5e52:	xor	edi, edi
0x5e54:	call	0x1960


0x5e59:	mov	r10, qword ptr [rsp + 0x18]
0x5e5e:	push	r10
0x5e60:	jmp	0x5da4


0x5da4:	mov	r9, qword ptr [rsp + 0x18]
0x5da9:	mov	rdx, rax
0x5dac:	mov	rcx, rbx
0x5daf:	mov	esi, 1
0x5db4:	mov	rdi, rbp
0x5db7:	xor	eax, eax
0x5db9:	push	r9
0x5dbb:	push	r13
0x5dbd:	push	r12
0x5dbf:	push	r15
0x5dc1:	push	r14
0x5dc3:	mov	r9, qword ptr [rsp + 0x30]
0x5dc8:	mov	r8, qword ptr [rsp + 0x38]
0x5dcd:	call	0x1bf0


0x5dd2:	add	rsp, 0x30
0x5dd6:	add	rsp, 0x28
0x5dda:	pop	rbx
0x5ddb:	pop	rbp
0x5ddc:	pop	r12
0x5dde:	pop	r13
0x5de0:	pop	r14
0x5de2:	pop	r15
0x5de4:	ret	


0x552d:	mov	dword ptr [rbp], r12d
0x5531:	pop	rbx
0x5532:	pop	rbp
0x5533:	pop	r12
0x5535:	ret	


0x53ee:	mov	dword ptr [rip + 0x204c63], r12d
0x53f5:	mov	eax, dword ptr [rbp + 4]
0x53f8:	shl	r15, 4
0x53fc:	sub	rsp, 8
0x5400:	add	rbx, r15
0x5403:	lea	r15, [rbp + 8]
0x5407:	mov	r8d, dword ptr [rbp]
0x540b:	mov	r11, qword ptr [rbx]
0x540e:	mov	r12, qword ptr [rbx + 8]
0x5412:	mov	rcx, r14
0x5415:	or	eax, 1
0x5418:	mov	dword ptr [rsp + 0x24], eax
0x541c:	push	qword ptr [rbp + 0x30]
0x541f:	mov	r9d, eax
0x5422:	push	qword ptr [rbp + 0x28]
0x5425:	push	r15
0x5427:	mov	rsi, r11
0x542a:	mov	rdx, qword ptr [rsp + 0x28]
0x542f:	mov	rdi, r12
0x5432:	mov	qword ptr [rsp + 0x30], r11
0x5437:	call	0x4110


0x3362:	test	eax, eax
0x3364:	jne	0x3455


0x336a:	mov	ebx, 1
0x336f:	lea	rbp, [rsp + 0x90]
0x3377:	jmp	0x33dd


0x3455:	lea	rsi, [rip + 0x3a24]
0x345c:	mov	edx, 5
0x3461:	xor	edi, edi
0x3463:	call	0x1960


0x33dd:	xor	esi, esi
0x33df:	mov	rdx, rbp
0x33e2:	mov	edi, ebx
0x33e4:	call	0x1910


0x1910:	jmp	qword ptr [rip + 0x208512]




0x3468:	mov	rbx, rax
0x346b:	call	0x18c0


0x3470:	mov	esi, dword ptr [rax]
0x3472:	mov	rdx, rbx
0x3475:	mov	edi, 0x7d
0x347a:	xor	eax, eax
0x347c:	call	0x1b40


0x3481:	call	0x19a0


0x6a37:	mov	rdi, rbx
0x6a3a:	pop	rbx
0x6a3b:	jmp	0x1ae0


0x66bc:	test	ebp, ebp
0x66be:	mov	ebx, eax
0x66c0:	jle	0x66dc


0x66dc:	test	ebx, ebx
0x66de:	jle	0x669c


0x66c2:	lea	rdi, [rip + 0x18f7]
0x66c9:	mov	ecx, 5
0x66ce:	mov	rsi, r12
0x66d1:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x66e0:	lea	rdi, [rip + 0x18df]
0x66e7:	mov	ecx, 5
0x66ec:	mov	rsi, r12
0x66ef:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x66d1:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x66d3:	seta	al
0x66d6:	sbb	al, 0
0x66d8:	test	al, al
0x66da:	je	0x6733


0x66ef:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x66f1:	seta	al
0x66f4:	sbb	al, 0
0x66f6:	test	al, al
0x66f8:	jne	0x669c


0x6733:	lea	rdi, [r12 + 5]
0x6738:	mov	edx, 0xa
0x673d:	mov	rsi, rsp
0x6740:	call	0x1a90


0x66fa:	lea	rdi, [r12 + 5]
0x66ff:	mov	edx, 0xa
0x6704:	mov	rsi, rsp
0x6707:	call	0x1a90


0x670c:	mov	rdx, qword ptr [rsp]
0x6710:	cmp	byte ptr [rdx], 0
0x6713:	jne	0x669c


0x6715:	sub	ebp, ebx
0x6717:	movsxd	rbp, ebp
0x671a:	cmp	rax, rbp
0x671d:	jl	0x669c


0x6723:	test	rax, rax
0x6726:	jg	0x669c


0x672c:	add	eax, ebx
0x672e:	jmp	0x6659


0x6745:	mov	rdx, qword ptr [rsp]
0x6749:	cmp	byte ptr [rdx], 0
0x674c:	jne	0x669c


0x6752:	test	rax, rax
0x6755:	js	0x669c


0x675b:	sub	ebx, ebp
0x675d:	movsxd	rdx, ebx
0x6760:	cmp	rax, rdx
0x6763:	jg	0x669c


0x6769:	add	eax, ebp
0x676b:	jmp	0x6659


0x67e1:	cmp	ebp, ebx
0x67e3:	jg	0x6851


0x67e5:	cmp	eax, ebx
0x67e7:	jl	0x6851


0x6851:	mov	eax, 0xffffffff
0x6856:	jmp	0x67c0


0x67e9:	mov	edx, eax
0x67eb:	mov	rdi, qword ptr [rsp + 8]
0x67f0:	sub	edx, ebp
0x67f2:	sar	edx, 1
0x67f4:	add	edx, ebp
0x67f6:	cmp	edx, ebx
0x67f8:	jge	0x6840


0x67c0:	add	rsp, 0x18
0x67c4:	pop	rbx
0x67c5:	pop	rbp
0x67c6:	ret	


0x67fa:	mov	edx, 0x58
0x67ff:	mov	dword ptr [rdi], 0x414d5452
0x6805:	mov	ebp, eax
0x6807:	mov	word ptr [rdi + 4], dx
0x680b:	mov	eax, ebx
0x680d:	sub	eax, ebp
0x680f:	je	0x67c0


0x6840:	mov	ecx, 0x4e
0x6845:	mov	dword ptr [rdi], 0x494d5452
0x684b:	mov	word ptr [rdi + 4], cx
0x684f:	jmp	0x680b


0x6811:	lea	rcx, [rip + 0x17b4]
0x6818:	mov	r8d, eax
0x681b:	add	rdi, 5
0x681f:	mov	rdx, -1
0x6826:	mov	esi, 1
0x682b:	xor	eax, eax
0x682d:	call	0x1c50


0x680b:	mov	eax, ebx
0x680d:	sub	eax, ebp
0x680f:	je	0x67c0


0x1c50:	jmp	qword ptr [rip + 0x208372]




0x6216:	mov	rax, qword ptr [rsp + 0x78]
0x621b:	xor	rax, qword ptr fs:[0x28]
0x6224:	jne	0x6230


0x6226:	add	rsp, 0xb8
0x622d:	pop	rbx
0x622e:	pop	rbp
0x622f:	ret	


0x6230:	call	0x19a0


0x6140:	mov	rax, qword ptr [rsp + 0x58]
0x6145:	xor	rax, qword ptr fs:[0x28]
0x614e:	jne	0x6155


0x6150:	add	rsp, 0x68
0x6154:	ret	


0x6155:	call	0x19a0


0x3b2b:	lea	rsi, [rip + 0x3048]
0x3b32:	mov	rdi, rax
0x3b35:	mov	qword ptr [rsp + 8], rax
0x3b3a:	call	0x1b70


0x1b70:	jmp	qword ptr [rip + 0x2083e2]




0x399c:	lea	rsi, [rip + 0x31d7]
0x39a3:	mov	rdi, rax
0x39a6:	mov	r13, rax
0x39a9:	call	0x1b70


0x3d85:	movzx	ebx, byte ptr [rax]
0x3d88:	mov	r13, rax
0x3d8b:	test	bl, bl
0x3d8d:	je	0x3dc2


0x3dc2:	lea	rbx, [rsp + 0xc]
0x3dc7:	mov	rdi, r13
0x3dca:	mov	rsi, rbx
0x3dcd:	call	0x65f0


0x3d8f:	lea	r12, [rip + 0x396f]
0x3d96:	mov	r15, rax
0x3d99:	nop	dword ptr [rax]
0x3da0:	movsx	esi, bl
0x3da3:	mov	rdi, r12
0x3da6:	call	0x19d0


0x19d0:	jmp	qword ptr [rip + 0x2084b2]




0x3dd2:	test	eax, eax
0x3dd4:	jne	0x3e28


0x3dd6:	mov	ebx, dword ptr [rsp + 0xc]
0x3dda:	mov	rdi, r13
0x3ddd:	call	0x18a0


0x3e28:	cmp	byte ptr [r13], 0x53
0x3e2d:	je	0x3e48


0x3e48:	cmp	byte ptr [r13 + 1], 0x49
0x3e4d:	jne	0x3e2f


0x3e2f:	mov	rdi, r13
0x3e32:	mov	dword ptr [rsp + 0xc], 0xffffffff
0x3e3a:	call	0x18a0


0x3e4f:	cmp	byte ptr [r13 + 2], 0x47
0x3e54:	jne	0x3e2f


0x3e56:	lea	rdi, [r13 + 3]
0x3e5a:	mov	rsi, rbx
0x3e5d:	call	0x65f0


0x3e62:	test	eax, eax
0x3e64:	jne	0x3e2f


0x3e66:	jmp	0x3dd6


0x3e3f:	jmp	0x3d40


0x3de2:	test	ebx, ebx
0x3de4:	js	0x3d40


0x3dab:	test	rax, rax
0x3dae:	je	0x3db6


0x3db6:	add	r15, 1
0x3dba:	movzx	ebx, byte ptr [r15]
0x3dbe:	test	bl, bl
0x3dc0:	jne	0x3da0


0x3db0:	sub	ebx, 0x20
0x3db3:	mov	byte ptr [r15], bl
0x3db6:	add	r15, 1
0x3dba:	movzx	ebx, byte ptr [r15]
0x3dbe:	test	bl, bl
0x3dc0:	jne	0x3da0


0x3da0:	movsx	esi, bl
0x3da3:	mov	rdi, r12
0x3da6:	call	0x19d0


0x39ae:	test	rax, rax
0x39b1:	mov	r14, rax
0x39b4:	je	0x3a48


0x3a48:	mov	rax, qword ptr [rsp + 0x18]
0x3a4d:	xor	rax, qword ptr fs:[0x28]
0x3a56:	jne	0x3ad2


0x39ba:	cmp	bl, 1
0x39bd:	mov	r12, rsp
0x39c0:	lea	rbp, [rip + 0x31b3]
0x39c7:	sbb	ebx, ebx
0x39c9:	and	ebx, 2
0x39cc:	add	ebx, 1
0x39cf:	jmp	0x39f8


0x3a58:	add	rsp, 0x20
0x3a5c:	mov	rdi, r13
0x3a5f:	pop	rbx
0x3a60:	pop	rbp
0x3a61:	pop	r12
0x3a63:	pop	r13
0x3a65:	pop	r14
0x3a67:	jmp	0x18a0


0x39f8:	mov	rsi, r12
0x39fb:	mov	rdi, r14
0x39fe:	call	0x3cc0


0x3a03:	cmp	eax, 0
0x3a06:	jne	0x39d8


0x3a08:	mov	rdi, r14
0x3a0b:	call	0x5c90


0x39d8:	jle	0x3a37


0x3a37:	mov	edi, dword ptr [rip + 0x2065db]
0x3a3d:	call	0x3490


0x39da:	mov	rdx, qword ptr [rip + 0x2069df]
0x39e1:	cdqe	
0x39e3:	xor	edi, edi
0x39e5:	mov	rsi, rbp
0x39e8:	mov	dword ptr [rdx + rax*4], ebx
0x39eb:	call	0x1b70


0x39f0:	test	rax, rax
0x39f3:	mov	r14, rax
0x39f6:	je	0x3a48


0x3b3f:	test	rax, rax
0x3b42:	mov	r15, rax
0x3b45:	je	0x3c08


0x3c08:	mov	rax, qword ptr [rsp + 0x28]
0x3c0d:	xor	rax, qword ptr fs:[0x28]
0x3c16:	jne	0x3cb5


0x3b4b:	lea	r14, [rip + 0x2067ee]
0x3b52:	lea	rbp, [rip + 0x206767]
0x3b59:	test	bl, bl
0x3b5b:	lea	r13, [rsp + 0x10]
0x3b60:	cmove	rbp, r14
0x3b64:	jmp	0x3b9a


0x3c1c:	mov	rdi, qword ptr [rsp + 8]
0x3c21:	add	rsp, 0x38
0x3c25:	pop	rbx
0x3c26:	pop	rbp
0x3c27:	pop	r12
0x3c29:	pop	r13
0x3c2b:	pop	r14
0x3c2d:	pop	r15
0x3c2f:	jmp	0x18a0


0x3b9a:	mov	rsi, r13
0x3b9d:	mov	rdi, r15
0x3ba0:	call	0x3cc0


0x3ba5:	cmp	eax, 0
0x3ba8:	mov	ebx, eax
0x3baa:	je	0x3bc8


0x3bc8:	mov	rdi, r15
0x3bcb:	call	0x5c90


0x3bac:	jle	0x3bf7


0x3bf7:	mov	edi, dword ptr [rip + 0x20641b]
0x3bfd:	call	0x3490


0x3bae:	test	r12b, r12b
0x3bb1:	jne	0x3b70


0x3bb3:	lea	rdi, [rip + 0x206706]
0x3bba:	mov	esi, eax
0x3bbc:	call	0x1c30


0x3b70:	mov	esi, eax
0x3b72:	mov	rdi, r14
0x3b75:	call	0x1c30


0x1c30:	jmp	qword ptr [rip + 0x208382]




0x6832:	add	rsp, 0x18
0x6836:	xor	eax, eax
0x6838:	pop	rbx
0x6839:	pop	rbp
0x683a:	ret	


0x33e9:	test	eax, eax
0x33eb:	jne	0x33d5


0x33ed:	cmp	qword ptr [rsp + 0x90], 1
0x33f6:	mov	esi, ebx
0x33f8:	mov	rdi, qword ptr [rsp + 8]
0x33fd:	jne	0x3380


0x33d5:	add	ebx, 1
0x33d8:	cmp	ebx, 0x41
0x33db:	je	0x3430


0x33ff:	call	0x1bc0


0x3380:	call	0x1bc0


0x3430:	mov	rax, qword ptr [rsp + 0x148]
0x3438:	xor	rax, qword ptr fs:[0x28]
0x3441:	jne	0x3481


0x1bc0:	jmp	qword ptr [rip + 0x2083ba]


0x3443:	add	rsp, 0x158
0x344a:	pop	rbx
0x344b:	pop	rbp
0x344c:	pop	r12
0x344e:	pop	r13
0x3450:	pop	r14
0x3452:	pop	r15
0x3454:	ret	




0x38f2:	test	eax, eax
0x38f4:	jne	0x3939


0x3939:	lea	r12, [rip + 0x3251]
0x3940:	mov	r13, qword ptr [rip + 0x206901]
0x3947:	lea	rsi, [rip + 0x3ae2]
0x394e:	xor	edi, edi
0x3950:	mov	edx, 5
0x3955:	call	0x1960


0x395a:	mov	rsi, r13
0x395d:	mov	rdi, rax
0x3960:	call	0x1a40


0x3965:	jmp	0x3839


0x3831:	test	eax, eax
0x3833:	jne	0x3940


0x3940:	mov	r13, qword ptr [rip + 0x206901]
0x3947:	lea	rsi, [rip + 0x3ae2]
0x394e:	xor	edi, edi
0x3950:	mov	edx, 5
0x3955:	call	0x1960


0x1cd3:	lea	rdi, [rip + 0x21f6]
0x1cda:	mov	dword ptr [rip + 0x208334], 0x7d
0x1ce4:	call	0x6b20


0x1ce9:	mov	edi, 0x104
0x1cee:	call	0x62d0


0x1cf3:	lea	rdx, [rax + 0x104]
0x1cfa:	mov	qword ptr [rip + 0x2086bf], rax
0x1d01:	nop	dword ptr [rax]
0x1d08:	mov	dword ptr [rax], 0
0x1d0e:	add	rax, 4
0x1d12:	cmp	rdx, rax
0x1d15:	jne	0x1d08


0x1d17:	mov	qword ptr [rsp + 8], 0
0x1d20:	mov	byte ptr [rsp + 0x10], 0
0x1d25:	mov	byte ptr [rsp + 0x18], 0
0x1d2a:	nop	word ptr [rax + rax]
0x1d30:	mov	edi, dword ptr [rsp + 0x48]
0x1d34:	lea	rcx, [rip + 0x207ca5]
0x1d3b:	lea	rdx, [rip + 0x59b6]
0x1d42:	xor	r8d, r8d
0x1d45:	mov	rsi, r15
0x1d48:	call	0x19b0


0x1d08:	mov	dword ptr [rax], 0
0x1d0e:	add	rax, 4
0x1d12:	cmp	rdx, rax
0x1d15:	jne	0x1d08


0x19b0:	jmp	qword ptr [rip + 0x2084c2]




0x69a4:	test	eax, eax
0x69a6:	je	0x69e4


0x69a8:	call	0x18c0


0x69ad:	mov	r12d, dword ptr [rax]
0x69b0:	mov	rdi, rbx
0x69b3:	mov	rbp, rax
0x69b6:	call	0x1930


0x69bb:	test	r12d, r12d
0x69be:	jne	0x69f0


0x69c0:	pop	rbx
0x69c1:	pop	rbp
0x69c2:	pop	r12
0x69c4:	ret	


0x69f0:	mov	dword ptr [rbp], r12d
0x69f4:	mov	eax, 0xffffffff
0x69f9:	jmp	0x69c0


0x687a:	and	ebx, 0x20
0x687d:	test	ebx, ebx
0x687f:	jne	0x6898


0x6881:	test	eax, eax
0x6883:	je	0x688f


0x6898:	test	eax, eax
0x689a:	jne	0x68b8


0x688f:	pop	rbx
0x6890:	pop	rbp
0x6891:	pop	r12
0x6893:	ret	


0x6885:	test	r12, r12
0x6888:	mov	eax, 0xffffffff
0x688d:	je	0x68c8


0x689c:	call	0x18c0


0x68b8:	pop	rbx
0x68b9:	mov	eax, 0xffffffff
0x68be:	pop	rbp
0x68bf:	pop	r12
0x68c1:	ret	


0x68c8:	call	0x18c0


0x68cd:	cmp	dword ptr [rax], 9
0x68d0:	pop	rbx
0x68d1:	pop	rbp
0x68d2:	pop	r12
0x68d4:	setne	al
0x68d7:	movzx	eax, al
0x68da:	neg	eax
0x68dc:	ret	


0x68a1:	mov	dword ptr [rax], 0
0x68a7:	mov	eax, 0xffffffff
0x68ac:	pop	rbx
0x68ad:	pop	rbp
0x68ae:	pop	r12
0x68b0:	ret	


0x3ee2:	test	eax, eax
0x3ee4:	je	0x3efc


0x3efc:	mov	rdi, qword ptr [rip + 0x20637d]
0x3f03:	call	0x6860


0x3ee6:	call	0x18c0


0x3eeb:	cmp	byte ptr [rip + 0x206506], 0
0x3ef2:	mov	rbx, rax
0x3ef5:	je	0x3f13


0x3f13:	lea	rsi, [rip + 0x380b]
0x3f1a:	xor	edi, edi
0x3f1c:	mov	edx, 5
0x3f21:	call	0x1960


0x3ef7:	cmp	dword ptr [rax], 0x20
0x3efa:	jne	0x3f13


0x3f26:	mov	rdi, qword ptr [rip + 0x2064d3]
0x3f2d:	mov	rbp, rax
0x3f30:	test	rdi, rdi
0x3f33:	je	0x3f5d


0x3f5d:	mov	esi, dword ptr [rbx]
0x3f5f:	lea	rdx, [rip + 0x37cf]
0x3f66:	mov	rcx, rax
0x3f69:	xor	edi, edi
0x3f6b:	xor	eax, eax
0x3f6d:	call	0x1b40


0x3f35:	call	0x5a90


0x3f72:	jmp	0x3f52


0x3f52:	mov	edi, dword ptr [rip + 0x2060c0]
0x3f58:	call	0x18e0


0x18e0:	jmp	qword ptr [rip + 0x20852a]




0x3f08:	test	eax, eax
0x3f0a:	jne	0x3f52


0x3f0c:	add	rsp, 8
0x3f10:	pop	rbx
0x3f11:	pop	rbp
0x3f12:	ret	


0x1d4d:	cmp	eax, -1
0x1d50:	je	0x257d


0x257d:	mov	r13d, dword ptr [rip + 0x207ccc]
0x2584:	cmp	r13d, dword ptr [rsp + 0x48]
0x2589:	jl	0x26af


0x1d56:	cmp	eax, 0x53
0x1d59:	je	0x1e00


0x26af:	movsxd	rax, r13d
0x26b2:	lea	rsi, [rip + 0x50c1]
0x26b9:	mov	rdi, qword ptr [r15 + rax*8]
0x26bd:	call	0x1a70


0x258f:	cmp	byte ptr [rsp + 0x18], 0
0x2594:	je	0x29be


0x1e00:	call	0x1c40


0x1d5f:	jle	0x1da0


0x29be:	cmp	qword ptr [rip + 0x207a1a], 0
0x29c6:	je	0x25d5


0x259a:	cmp	byte ptr [rip + 0x207e37], 0
0x25a1:	je	0x25c0


0x1c40:	jmp	qword ptr [rip + 0x20837a]


0x1da0:	cmp	eax, 9
0x1da3:	je	0x2e3a


0x1d61:	cmp	eax, 0x80
0x1d66:	je	0x1f40


0x25d5:	mov	r14d, dword ptr [rsp + 0x48]
0x25da:	cmp	r13d, r14d
0x25dd:	jge	0x272f


0x29cc:	mov	r13, qword ptr [rip + 0x207a1d]
0x29d3:	xor	r12d, r12d
0x29d6:	lea	rbp, [rip + 0x4372]
0x29dd:	jmp	0x2a07


0x25c0:	lea	rax, [rip + 0x207cd9]
0x25c7:	mov	r13d, dword ptr [rip + 0x207c82]
0x25ce:	mov	qword ptr [rip + 0x207c83], rax
0x25d5:	mov	r14d, dword ptr [rsp + 0x48]
0x25da:	cmp	r13d, r14d
0x25dd:	jge	0x272f


0x25a3:	mov	rcx, qword ptr [rip + 0x207cd6]
0x25aa:	lea	rdi, [rip + 0x478c]
0x25b1:	mov	edx, 0x11
0x25b6:	mov	esi, 1
0x25bb:	call	0x1be0




0x2e3a:	mov	ebx, eax
0x2e3c:	lea	rsi, [rip + 0x3eb5]
0x2e43:	mov	edx, 5
0x2e48:	xor	edi, edi
0x2e4a:	call	0x1960


0x1da9:	jle	0x2000


0x1f40:	mov	rdi, qword ptr [rip + 0x208319]
0x1f47:	mov	esi, 1
0x1f4c:	call	0x3970


0x1d6c:	jg	0x1dd8


0x25e3:	lea	rbp, [rip + 0x4783]
0x25ea:	jmp	0x2622


0x272f:	cmp	qword ptr [rsp + 8], 0
0x2735:	je	0x2742


0x2a07:	cmp	byte ptr [rip + 0x2079ca], 0
0x2a0e:	lea	rbx, [r12*8]
0x2a16:	je	0x29e0


0x2000:	cmp	eax, 0xffffff7d
0x2005:	jne	0x2e28


0x1daf:	cmp	eax, 0x30
0x1db2:	je	0x1ff0


0x1d6e:	cmp	eax, 0x75
0x1d71:	je	0x1fb0


0x1dd8:	cmp	eax, 0x82
0x1ddd:	je	0x1f80


0x2622:	movsxd	rax, r13d
0x2625:	mov	esi, 0x3d
0x262a:	mov	r12, qword ptr [r15 + rax*8]
0x262e:	mov	rdi, r12
0x2631:	call	0x19d0


0x2742:	mov	rbx, qword ptr [rip + 0x207b0f]
0x2749:	mov	rdx, qword ptr [rbx]
0x274c:	test	rdx, rdx
0x274f:	je	0x2785


0x2737:	cmp	r13d, dword ptr [rsp + 0x48]
0x273c:	jge	0x2ffa


0x29e0:	mov	r13, qword ptr [rip + 0x207a09]
0x29e7:	add	rbx, r13
0x29ea:	mov	rdi, qword ptr [rbx]
0x29ed:	call	0x1b80


0x2a18:	mov	rcx, qword ptr [r13 + r12*8]
0x2a1d:	mov	rdi, qword ptr [rip + 0x20785c]
0x2a24:	mov	rdx, rbp
0x2a27:	mov	esi, 1
0x2a2c:	xor	eax, eax
0x2a2e:	call	0x1bf0


0x200b:	lea	rax, [rip + 0x4d1e]
0x2012:	mov	rdi, qword ptr [rip + 0x20822f]
0x2019:	mov	rcx, qword ptr [rip + 0x207ff0]
0x2020:	push	0
0x2022:	lea	r9, [rip + 0x4ce6]
0x2029:	lea	r8, [rip + 0x4cef]
0x2030:	push	rax
0x2031:	lea	rdx, [rip + 0x4bd3]
0x2038:	lea	rsi, [rip + 0x4b52]
0x203f:	xor	eax, eax
0x2041:	call	0x6170


0x2e28:	cmp	eax, 0xffffff7e
0x2e2d:	jne	0x1d85


0x1ff0:	mov	byte ptr [rsp + 0x10], 1
0x1ff5:	jmp	0x1d30


0x1db8:	cmp	eax, 0x43
0x1dbb:	jne	0x2e97


0x1fb0:	mov	rcx, qword ptr [rip + 0x208429]
0x1fb7:	cmp	rcx, qword ptr [rip + 0x20842a]
0x1fbe:	mov	rbx, qword ptr [rip + 0x20829b]
0x1fc5:	mov	rax, rcx
0x1fc8:	je	0x26da


0x1d77:	cmp	eax, 0x76
0x1d7a:	je	0x1fa0


0x1f80:	mov	rdi, qword ptr [rip + 0x2082d9]
0x1f87:	mov	esi, 1
0x1f8c:	call	0x3ae0


0x1de3:	jl	0x1f68


0x2785:	xor	eax, eax
0x2787:	mov	rcx, qword ptr [rsp + 0x108]
0x278f:	xor	rcx, qword ptr fs:[0x28]
0x2798:	jne	0x2ff5


0x2751:	cmp	byte ptr [rsp + 0x10], 1
0x2756:	lea	r12, [rip + 0x462c]
0x275d:	sbb	ebp, ebp
0x275f:	and	ebp, 0xa
0x2762:	nop	word ptr [rax + rax]
0x2768:	add	rbx, 8
0x276c:	xor	eax, eax
0x276e:	mov	ecx, ebp
0x2770:	mov	rsi, r12
0x2773:	mov	edi, 1
0x2778:	call	0x1b30


0x2ffa:	mov	edx, 5
0x2fff:	lea	rsi, [rip + 0x45ea]
0x3006:	jmp	0x2ac2


0x1b80:	jmp	qword ptr [rip + 0x2083da]


0x2e33:	xor	edi, edi
0x2e35:	call	0x3490


0x1d85:	mov	edi, 0x7d
0x1d8a:	call	0x3490


0x1d30:	mov	edi, dword ptr [rsp + 0x48]
0x1d34:	lea	rcx, [rip + 0x207ca5]
0x1d3b:	lea	rdx, [rip + 0x59b6]
0x1d42:	xor	r8d, r8d
0x1d45:	mov	rsi, r15
0x1d48:	call	0x19b0


0x1dc1:	mov	rax, qword ptr [rip + 0x208498]
0x1dc8:	mov	qword ptr [rsp + 8], rax
0x1dcd:	jmp	0x1d30


0x2e97:	cmp	eax, 0x20
0x2e9a:	mov	ebx, eax
0x2e9c:	jne	0x1d85


0x26da:	mov	rdi, qword ptr [rip + 0x207d0f]
0x26e1:	test	rdi, rdi
0x26e4:	je	0x2a6c


0x1fce:	lea	rdx, [rax + 1]
0x1fd2:	mov	qword ptr [rip + 0x208407], rdx
0x1fd9:	mov	rdx, qword ptr [rip + 0x208410]
0x1fe0:	mov	qword ptr [rdx + rax*8], rbx
0x1fe4:	jmp	0x1d30


0x1fa0:	mov	byte ptr [rip + 0x208431], 1
0x1fa7:	jmp	0x1d30


0x1d80:	cmp	eax, 0x69
0x1d83:	je	0x1d90


0x1f68:	mov	rdi, qword ptr [rip + 0x2082f1]
0x1f6f:	xor	esi, esi
0x1f71:	call	0x3970


0x1de9:	cmp	eax, 0x83
0x1dee:	jne	0x1d85


0x279e:	add	rsp, 0x118
0x27a5:	pop	rbx
0x27a6:	pop	rbp
0x27a7:	pop	r12
0x27a9:	pop	r13
0x27ab:	pop	r14
0x27ad:	pop	r15
0x27af:	ret	


0x2ff5:	call	0x19a0


0x2ac2:	xor	edi, edi
0x2ac4:	call	0x1960




0x2ea2:	jmp	0x2e3c


0x2a6c:	test	rcx, rcx
0x2a6f:	mov	eax, 0x10
0x2a74:	mov	edx, 8
0x2a79:	cmove	rcx, rax
0x2a7d:	mov	rax, rdx
0x2a80:	xor	esi, esi
0x2a82:	mul	rcx
0x2a85:	jo	0x2ed3


0x26ea:	movabs	rax, 0xaaaaaaaaaaaaaa9
0x26f4:	cmp	rcx, rax
0x26f7:	ja	0x2a99


0x1d90:	mov	byte ptr [rsp + 0x18], 1
0x1d95:	jmp	0x1d30


0x1df0:	mov	byte ptr [rip + 0x2084b1], 1
0x1df7:	jmp	0x1d30


0x2e3c:	lea	rsi, [rip + 0x3eb5]
0x2e43:	mov	edx, 5
0x2e48:	xor	edi, edi
0x2e4a:	call	0x1960


0x2ed3:	mov	esi, 1
0x2ed8:	jmp	0x2a8b


0x2a8b:	test	rax, rax
0x2a8e:	js	0x2a99


0x26fd:	mov	rax, rcx
0x2700:	shr	rax, 1
0x2703:	lea	rcx, [rcx + rax + 1]
0x2708:	lea	rsi, [rcx*8]
0x2710:	mov	qword ptr [rip + 0x207cd1], rcx
0x2717:	call	0x6330


0x2a99:	call	0x6520


0x2a90:	test	rsi, rsi
0x2a93:	je	0x2708


0x2708:	lea	rsi, [rcx*8]
0x2710:	mov	qword ptr [rip + 0x207cd1], rcx
0x2717:	call	0x6330


0x271c:	mov	qword ptr [rip + 0x207ccd], rax
0x2723:	mov	rax, qword ptr [rip + 0x207cb6]
0x272a:	jmp	0x1fce


0x277d:	mov	rdx, qword ptr [rbx]
0x2780:	test	rdx, rdx
0x2783:	jne	0x2768


0x2768:	add	rbx, 8
0x276c:	xor	eax, eax
0x276e:	mov	ecx, ebp
0x2770:	mov	rsi, r12
0x2773:	mov	edi, 1
0x2778:	call	0x1b30


0x1f91:	jmp	0x1d30


0x2046:	xor	edi, edi
0x2048:	call	0x1bd0


0x2a33:	jmp	0x29e0


0x2636:	test	rax, rax
0x2639:	mov	rbx, rax
0x263c:	je	0x27b0


0x27b0:	cmp	r13d, dword ptr [rsp + 0x48]
0x27b5:	jge	0x27c2


0x2642:	cmp	byte ptr [rip + 0x207d8f], 0
0x2649:	je	0x25f0


0x27b7:	cmp	byte ptr [rsp + 0x10], 0
0x27bc:	jne	0x2ab6


0x27c2:	mov	r13d, 4
0x27c8:	mov	r12d, 1
0x27ce:	mov	qword ptr [rsp + 0x10], r15
0x27d3:	jmp	0x27ea


0x25f0:	movsxd	rax, dword ptr [rip + 0x207c59]
0x25f7:	mov	rdi, qword ptr [r15 + rax*8]
0x25fb:	call	0x1a60


0x264b:	mov	rdi, qword ptr [rip + 0x207c2e]
0x2652:	mov	rcx, r12
0x2655:	mov	rdx, rbp
0x2658:	mov	esi, 1
0x265d:	xor	eax, eax
0x265f:	call	0x1bf0


0x2ab6:	lea	rsi, [rip + 0x4b0b]
0x2abd:	mov	edx, 5
0x2ac2:	xor	edi, edi
0x2ac4:	call	0x1960


0x27ea:	mov	rax, qword ptr [rip + 0x207bcf]
0x27f1:	mov	eax, dword ptr [rax + r13]
0x27f5:	test	eax, eax
0x27f7:	je	0x27d8


0x1a60:	jmp	qword ptr [rip + 0x20846a]


0x27d8:	add	r12d, 1
0x27dc:	add	r13, 4
0x27e0:	cmp	r12d, 0x41
0x27e4:	je	0x2908


0x27f9:	lea	r15, [rsp + 0x50]
0x27fe:	lea	ebp, [rax - 2]
0x2801:	xor	esi, esi
0x2803:	mov	edi, r12d
0x2806:	lea	ebx, [rax - 1]
0x2809:	mov	rdx, r15
0x280c:	and	ebp, 0xfffffffd
0x280f:	call	0x1910




0x2908:	call	0x18c0


0x290d:	cmp	byte ptr [rip + 0x207995], 0
0x2914:	mov	r15, qword ptr [rsp + 0x10]
0x2919:	mov	qword ptr [rsp + 0x10], rax
0x291e:	jne	0x2cfe


0x2924:	cmp	byte ptr [rip + 0x20797d], 0
0x292b:	je	0x2932


0x2cfe:	lea	r12, [rsp + 0x50]
0x2d03:	mov	ebx, 1
0x2d08:	mov	rdi, r12
0x2d0b:	call	0x1a80


0x2932:	cmp	qword ptr [rsp + 8], 0
0x2938:	je	0x2959


0x292d:	call	0x3320


0x2959:	cmp	byte ptr [rip + 0x207a78], 0
0x2960:	jne	0x2c85


0x293a:	cmp	byte ptr [rip + 0x207a97], 0
0x2941:	jne	0x2ae6


0x2966:	movsxd	rax, dword ptr [rip + 0x2078e3]
0x296d:	lea	rax, [r15 + rax*8]
0x2971:	mov	rdi, qword ptr [rax]
0x2974:	mov	rsi, rax
0x2977:	call	0x1b90


0x2c85:	movsxd	rax, dword ptr [rip + 0x2075c4]
0x2c8c:	mov	rdi, qword ptr [rip + 0x2075ed]
0x2c93:	lea	rdx, [rip + 0x413e]
0x2c9a:	mov	esi, 1
0x2c9f:	lea	r12, [rip + 0x4141]
0x2ca6:	mov	rcx, qword ptr [r15 + rax*8]
0x2caa:	xor	eax, eax
0x2cac:	call	0x1bf0


0x2947:	mov	rdi, qword ptr [rsp + 8]
0x294c:	call	0x1990


0x2ae6:	mov	rsi, qword ptr [rsp + 8]
0x2aeb:	mov	edi, 4
0x2af0:	call	0x59c0


0x1b90:	jmp	qword ptr [rip + 0x2083d2]


0x1990:	jmp	qword ptr [rip + 0x2084d2]






0x2d10:	xor	esi, esi
0x2d12:	xor	edi, edi
0x2d14:	mov	rdx, r12
0x2d17:	call	0x1890


0x2d1c:	test	eax, eax
0x2d1e:	jne	0x2f9d


0x2d24:	lea	rbp, [rip + 0x207615]
0x2d2b:	lea	r14, [rsp + 0xf0]
0x2d33:	lea	r13, [rip + 0x3f2e]
0x2d3a:	mov	qword ptr [rsp + 0x18], r15
0x2d3f:	jmp	0x2d64


0x2f9d:	lea	rsi, [rip + 0x3edc]
0x2fa4:	mov	edx, 5
0x2fa9:	xor	edi, edi
0x2fab:	call	0x1960


0x2d64:	mov	esi, ebx
0x2d66:	mov	rdi, rbp
0x2d69:	call	0x1bc0


0x2814:	test	eax, eax
0x2816:	mov	r14d, eax
0x2819:	je	0x2823


0x2823:	test	r14d, r14d
0x2826:	jne	0x2851


0x281b:	test	ebp, ebp
0x281d:	jne	0x2fc6


0x2828:	xor	eax, eax
0x282a:	cmp	ebx, 1
0x282d:	mov	rsi, r15
0x2830:	seta	al
0x2833:	mov	edi, r12d
0x2836:	xor	edx, edx
0x2838:	mov	qword ptr [rsp + 0x50], rax
0x283d:	call	0x1910


0x2851:	cmp	byte ptr [rip + 0x207b80], 0
0x2858:	je	0x27d8


0x2fc6:	lea	rsi, [rip + 0x464b]
0x2fcd:	mov	edx, 5
0x2fd2:	xor	edi, edi
0x2fd4:	call	0x1960


0x285e:	lea	rbp, [rsp + 0xf0]
0x2866:	mov	edi, r12d
0x2869:	mov	rsi, rbp
0x286c:	call	0x6780


0x2871:	cmp	byte ptr [rip + 0x207b60], 0
0x2878:	je	0x27d8


0x287e:	lea	rcx, [rip + 0x442c]
0x2885:	lea	rax, [rip + 0x43bf]
0x288c:	test	r14d, r14d
0x288f:	lea	r9, [rip + 0x43c8]
0x2896:	mov	rdi, qword ptr [rip + 0x2079e3]
0x289d:	lea	rdx, [rip + 0x44ea]
0x28a4:	cmove	rax, rcx
0x28a8:	cmp	ebx, 1
0x28ab:	lea	rbx, [rip + 0x42c1]
0x28b2:	mov	r8d, r12d
0x28b5:	mov	rcx, rbp
0x28b8:	mov	esi, 1
0x28bd:	cmova	r9, rbx
0x28c1:	sub	rsp, 8
0x28c5:	push	rax
0x28c6:	xor	eax, eax
0x28c8:	call	0x1bf0


0x2842:	test	eax, eax
0x2844:	mov	r14d, eax
0x2847:	je	0x2851


0x2849:	test	ebp, ebp
0x284b:	jne	0x2ea4


0x2ea4:	lea	rsi, [rip + 0x479d]
0x2eab:	mov	edx, 5
0x2eb0:	xor	edi, edi
0x2eb2:	call	0x1960


0x28cd:	pop	rax
0x28ce:	pop	rdx
0x28cf:	jmp	0x27d8


0x2cb1:	movsxd	rbx, dword ptr [rip + 0x207598]
0x2cb8:	jmp	0x2cf1


0x2cf1:	cmp	ebx, dword ptr [rsp + 0x48]
0x2cf5:	mov	ebp, ebx
0x2cf7:	jl	0x2cba


0x2cba:	cmp	byte ptr [rip + 0x207717], 0
0x2cc1:	je	0x2ced


0x2cf9:	jmp	0x2966


0x2ced:	add	rbx, 1
0x2cf1:	cmp	ebx, dword ptr [rsp + 0x48]
0x2cf5:	mov	ebp, ebx
0x2cf7:	jl	0x2cba


0x2cc3:	mov	rdi, qword ptr [r15 + rbx*8]
0x2cc7:	call	0x5c90


0x2664:	jmp	0x25f0


0x1f76:	jmp	0x1d30


0x1f51:	mov	rdi, qword ptr [rip + 0x208308]
0x1f58:	xor	esi, esi
0x1f5a:	call	0x3ae0


0x1f5f:	jmp	0x1d30


0x2eb7:	mov	rbx, rax
0x2eba:	call	0x18c0


0x2ebf:	mov	esi, dword ptr [rax]
0x2ec1:	mov	ecx, r12d
0x2ec4:	mov	rdx, rbx
0x2ec7:	mov	edi, 0x7d
0x2ecc:	xor	eax, eax
0x2ece:	call	0x1b40


0x2fd9:	mov	rbx, rax
0x2fdc:	call	0x18c0


0x2fe1:	mov	esi, dword ptr [rax]
0x2fe3:	mov	ecx, r12d
0x2fe6:	mov	rdx, rbx
0x2fe9:	mov	edi, 0x7d
0x2fee:	xor	eax, eax
0x2ff0:	call	0x1b40


0x2fb0:	mov	rdx, rax
0x2fb3:	mov	rax, qword ptr [rsp + 0x10]
0x2fb8:	mov	edi, 0x7d
0x2fbd:	mov	esi, dword ptr [rax]
0x2fbf:	xor	eax, eax
0x2fc1:	call	0x1b40


0x2ac9:	xor	esi, esi
0x2acb:	mov	rdx, rax
0x2ace:	xor	edi, edi
0x2ad0:	xor	eax, eax
0x2ad2:	call	0x1b40


0x2ad7:	jmp	0x1d85


0x2e4f:	xor	esi, esi
0x2e51:	mov	rdx, rax
0x2e54:	mov	ecx, ebx
0x2e56:	xor	edi, edi
0x2e58:	xor	eax, eax
0x2e5a:	call	0x1b40


0x2e5f:	mov	edx, 5
0x2e64:	lea	rsi, [rip + 0x472d]
0x2e6b:	jmp	0x2ac2


0x26c2:	test	eax, eax
0x26c4:	jne	0x258f


0x26ca:	add	r13d, 1
0x26ce:	mov	dword ptr [rip + 0x207b7b], r13d
0x26d5:	jmp	0x259a


0x2d6e:	test	eax, eax
0x2d70:	mov	esi, ebx
0x2d72:	jne	0x2d48


0x2d74:	lea	rdi, [rip + 0x207545]
0x2d7b:	call	0x1bc0


0x2d48:	mov	rdi, r12
0x2d4b:	mov	r15, r13
0x2d4e:	call	0x1c30


0x2d80:	test	eax, eax
0x2d82:	je	0x2d5c


0x2d5c:	add	ebx, 1
0x2d5f:	cmp	ebx, 0x41
0x2d62:	je	0x2dcf


0x2d84:	mov	esi, ebx
0x2d86:	mov	rdi, r12
0x2d89:	lea	r15, [rip + 0x3ed6]
0x2d90:	call	0x1b60


0x2dcf:	xor	edx, edx
0x2dd1:	mov	rsi, r12
0x2dd4:	mov	edi, 2
0x2dd9:	mov	r15, qword ptr [rsp + 0x18]
0x2dde:	call	0x1890


0x1b60:	jmp	qword ptr [rip + 0x2083ea]




0x2de3:	test	eax, eax
0x2de5:	je	0x2924


0x2deb:	lea	rsi, [rip + 0x48a6]
0x2df2:	mov	edx, 5
0x2df7:	xor	edi, edi
0x2df9:	call	0x1960


0x2dfe:	mov	rdx, rax
0x2e01:	mov	rax, qword ptr [rsp + 0x10]
0x2e06:	mov	edi, 0x7d
0x2e0b:	mov	esi, dword ptr [rax]
0x2e0d:	xor	eax, eax
0x2e0f:	call	0x1b40


0x2e14:	mov	eax, 0xd
0x2e19:	jmp	0x2151


0x2151:	test	r8b, r8b
0x2154:	lea	rdx, [rbp + 1]
0x2158:	je	0x23c0


0x23c0:	mov	rsi, rdx
0x23c3:	mov	rdx, rbp
0x23c6:	mov	rbp, rsi
0x23c9:	jmp	0x216e


0x215e:	mov	byte ptr [rbp], 0
0x2162:	mov	qword ptr [r13], rdx
0x2166:	add	rbp, 2
0x216a:	add	r13, 8
0x216e:	lea	rbx, [rcx + 1]
0x2172:	mov	byte ptr [rdx], al
0x2174:	xor	r8d, r8d
0x2177:	movzx	eax, byte ptr [rbx]
0x217a:	test	al, al
0x217c:	jne	0x2128


0x216e:	lea	rbx, [rcx + 1]
0x2172:	mov	byte ptr [rdx], al
0x2174:	xor	r8d, r8d
0x2177:	movzx	eax, byte ptr [rbx]
0x217a:	test	al, al
0x217c:	jne	0x2128


0x217e:	cmp	byte ptr [rip + 0x208253], 0
0x2185:	mov	qword ptr [r13], 0
0x218d:	mov	rax, qword ptr [r15]
0x2190:	mov	byte ptr [rbp], 0
0x2194:	mov	qword ptr [r10], rax
0x2197:	je	0x268f


0x2128:	cmp	al, 0x23
0x212a:	je	0x2528


0x268f:	cmp	qword ptr [r10 + 8], 0
0x2694:	je	0x2200


0x219d:	cmp	qword ptr [r10 + 8], 0
0x21a2:	je	0x2200


0x2528:	test	r8b, r8b
0x252b:	jne	0x217e


0x2130:	jle	0x2370


0x2200:	movsxd	rax, dword ptr [rip + 0x208049]
0x2207:	mov	ecx, dword ptr [rsp + 0x48]
0x220b:	cmp	eax, ecx
0x220d:	jge	0x2244


0x21a4:	mov	rdi, r12
0x21a7:	mov	qword ptr [rsp + 0x20], r10
0x21ac:	call	0x5c90


0x2531:	mov	rdx, rbp
0x2534:	mov	rcx, rbx
0x2537:	add	rbp, 1
0x253b:	jmp	0x216e


0x2370:	cmp	al, 0x20
0x2372:	je	0x2384


0x2136:	cmp	al, 0x27
0x2138:	je	0x24f4


0x220f:	mov	edi, eax
0x2211:	not	edi
0x2213:	lea	edx, [rdi + rcx]
0x2216:	lea	rcx, [r15 + rax*8]
0x221a:	xor	eax, eax
0x221c:	lea	rsi, [rdx*8 + 8]
0x2224:	nop	dword ptr [rax]
0x2228:	mov	rdx, qword ptr [rcx + rax]
0x222c:	mov	qword ptr [r14 + rax], rdx
0x2230:	add	rax, 8
0x2234:	cmp	rsi, rax
0x2237:	jne	0x2228


0x2244:	mov	qword ptr [r14], 0
0x224b:	cmp	qword ptr [r10], 0
0x224f:	je	0x2b21


0x26aa:	jmp	0x2200


0x26a0:	add	r14, 8
0x26a4:	cmp	qword ptr [r14], 0
0x26a8:	jne	0x26a0


0x2384:	mov	edi, r11d
0x2387:	mov	rcx, rbx
0x238a:	or	dil, r9b
0x238d:	jne	0x2151


0x2374:	cmp	al, 0x22
0x2376:	je	0x2540


0x24f4:	test	r11b, r11b
0x24f7:	mov	rcx, rbx
0x24fa:	jne	0x2151


0x213e:	cmp	al, 0x5c
0x2140:	je	0x24c6


0x2239:	mov	eax, dword ptr [rsp + 0x48]
0x223d:	add	eax, edi
0x223f:	lea	r14, [r14 + rax*8 + 8]
0x2244:	mov	qword ptr [r14], 0
0x224b:	cmp	qword ptr [r10], 0
0x224f:	je	0x2b21


0x2228:	mov	rdx, qword ptr [rcx + rax]
0x222c:	mov	qword ptr [r14 + rax], rdx
0x2230:	add	rax, 8
0x2234:	cmp	rsi, rax
0x2237:	jne	0x2228


0x2b21:	mov	dword ptr [rsp + 0x48], 0
0x2b29:	jmp	0x2271


0x2255:	mov	rax, r10
0x2258:	xor	edx, edx
0x225a:	nop	word ptr [rax + rax]
0x2260:	add	rax, 8
0x2264:	add	edx, 1
0x2267:	cmp	qword ptr [rax], 0
0x226b:	jne	0x2260


0x2393:	lea	rsi, [rip + 0x4915]
0x239a:	mov	rdi, rbx
0x239d:	mov	qword ptr [rsp + 0x20], r10
0x23a2:	call	0x1a20


0x2540:	test	r9b, r9b
0x2543:	mov	rcx, rbx
0x2546:	jne	0x2151


0x237c:	cmp	al, 9
0x237e:	jne	0x214e


0x2500:	xor	r9d, 1
0x2504:	test	r8b, r8b
0x2507:	je	0x251c


0x24c6:	test	r9b, r9b
0x24c9:	lea	rcx, [rbx + 1]
0x24cd:	movzx	edx, byte ptr [rbx + 1]
0x24d1:	je	0x2557


0x2146:	cmp	al, 0x24
0x2148:	je	0x23ce


0x2271:	mov	dword ptr [rip + 0x207fd5], 0
0x227b:	mov	r15, r10
0x227e:	jmp	0x1d30


0x226d:	mov	dword ptr [rsp + 0x48], edx
0x2271:	mov	dword ptr [rip + 0x207fd5], 0
0x227b:	mov	r15, r10
0x227e:	jmp	0x1d30


0x2260:	add	rax, 8
0x2264:	add	edx, 1
0x2267:	cmp	qword ptr [rax], 0
0x226b:	jne	0x2260


0x1a20:	jmp	qword ptr [rip + 0x20848a]


0x254c:	xor	r11d, 1
0x2550:	test	r8b, r8b
0x2553:	je	0x251c


0x214e:	mov	rcx, rbx
0x2151:	test	r8b, r8b
0x2154:	lea	rdx, [rbp + 1]
0x2158:	je	0x23c0


0x251c:	add	rbx, 1
0x2520:	xor	r8d, r8d
0x2523:	jmp	0x2121


0x2509:	lea	rax, [rbp + 1]
0x250d:	mov	byte ptr [rbp], 0
0x2511:	add	r13, 8
0x2515:	mov	qword ptr [r13 - 8], rax
0x2519:	mov	rbp, rax
0x251c:	add	rbx, 1
0x2520:	xor	r8d, r8d
0x2523:	jmp	0x2121


0x2557:	lea	eax, [rdx - 0x22]
0x255a:	cmp	al, 0x3a
0x255c:	ja	0x2666


0x24d7:	cmp	dl, 0x5c
0x24da:	je	0x2151


0x23ce:	test	r9b, r9b
0x23d1:	mov	rcx, rbx
0x23d4:	jne	0x2151




0x2555:	jmp	0x2509


0x2121:	movzx	eax, byte ptr [rbx]
0x2124:	test	al, al
0x2126:	je	0x217e


0x2562:	movabs	rbx, 0x400000000000027
0x256c:	bt	rbx, rax
0x2570:	jae	0x28d4


0x2666:	cmp	dl, 0x5f
0x2669:	jne	0x28d4


0x24e0:	cmp	dl, 0x27
0x24e3:	mov	esi, 0x27
0x24e8:	cmove	eax, esi
0x24eb:	cmovne	rcx, rbx
0x24ef:	jmp	0x2151


0x23da:	mov	rdi, rbx
0x23dd:	mov	byte ptr [rsp + 0x4f], r11b
0x23e2:	mov	qword ptr [rsp + 0x40], r10
0x23e7:	mov	byte ptr [rsp + 0x38], r9b
0x23ec:	mov	byte ptr [rsp + 0x30], r8b
0x23f1:	call	0x31f0


0x2576:	mov	eax, edx
0x2578:	jmp	0x2151


0x28d4:	cmp	dl, 0x63
0x28d7:	je	0x217e


0x266f:	test	r11b, r11b
0x2672:	mov	eax, 0x20
0x2677:	jne	0x2151


0x28dd:	cmp	dl, 0x72
0x28e0:	je	0x2e14


0x267d:	add	rbx, 2
0x2681:	mov	r9d, r11d
0x2684:	mov	r8d, 1
0x268a:	jmp	0x2121


0x28e6:	jg	0x2a9e


0x28ec:	cmp	dl, 0x66
0x28ef:	je	0x2adc


0x2a9e:	cmp	dl, 0x74
0x2aa1:	je	0x2b17


0x2adc:	mov	eax, 0xc
0x2ae1:	jmp	0x2151


0x28f5:	cmp	dl, 0x6e
0x28f8:	jne	0x300b


0x2b17:	mov	eax, 9
0x2b1c:	jmp	0x2151


0x2aa3:	cmp	dl, 0x76
0x2aa6:	jne	0x300b


0x28fe:	mov	eax, 0xa
0x2903:	jmp	0x2151


0x300b:	lea	rcx, [rip + 0x46be]
0x3012:	lea	rsi, [rip + 0x3b2b]
0x3019:	lea	rdi, [rip + 0x3c92]
0x3020:	mov	edx, 0xd2
0x3025:	call	0x1a00


0x2aac:	mov	eax, 0xb
0x2ab1:	jmp	0x2151


0x23f6:	mov	rdi, rax
0x23f9:	mov	qword ptr [rsp + 0x28], rax
0x23fe:	call	0x1880


0x1880:	jmp	qword ptr [rip + 0x20855a]




0x3385:	test	eax, eax
0x3387:	je	0x33d5


0x3389:	lea	r13, [rip + 0x3921]
0x3390:	lea	r15, [rip + 0x38d1]
0x3397:	mov	r12, r13
0x339a:	lea	r14, [rsp + 0x130]
0x33a2:	mov	edi, ebx
0x33a4:	mov	rsi, r14
0x33a7:	call	0x6780


0x33ac:	mov	rdi, qword ptr [rip + 0x206ecd]
0x33b3:	push	r13
0x33b5:	lea	rdx, [rip + 0x37c0]
0x33bc:	push	r12
0x33be:	mov	r9, r15
0x33c1:	mov	r8d, ebx
0x33c4:	mov	rcx, r14
0x33c7:	mov	esi, 1
0x33cc:	xor	eax, eax
0x33ce:	call	0x1bf0


0x33d3:	pop	rax
0x33d4:	pop	rdx
0x33d5:	add	ebx, 1
0x33d8:	cmp	ebx, 0x41
0x33db:	je	0x3430


0x3404:	test	eax, eax
0x3406:	lea	r13, [rip + 0x3766]
0x340d:	lea	r12, [rip + 0x3766]
0x3414:	lea	r15, [rip + 0x384d]
0x341b:	jne	0x339a


0x3421:	lea	r12, [rip + 0x3889]
0x3428:	mov	r15, r12
0x342b:	jmp	0x339a


0x339a:	lea	r14, [rsp + 0x130]
0x33a2:	mov	edi, ebx
0x33a4:	mov	rsi, r14
0x33a7:	call	0x6780


0x2d53:	cmp	byte ptr [rip + 0x20767e], 0
0x2d5a:	jne	0x2d97


0x2d97:	mov	rsi, r14
0x2d9a:	mov	edi, ebx
0x2d9c:	call	0x6780


0x2da1:	cmp	byte ptr [rip + 0x207630], 0
0x2da8:	je	0x2d5c


0x2daa:	mov	rdi, qword ptr [rip + 0x2074cf]
0x2db1:	lea	rdx, [rip + 0x48c0]
0x2db8:	mov	r9, r15
0x2dbb:	mov	r8d, ebx
0x2dbe:	mov	rcx, r14
0x2dc1:	mov	esi, 1
0x2dc6:	xor	eax, eax
0x2dc8:	call	0x1bf0


0x2dcd:	jmp	0x2d5c


0x3b7a:	mov	esi, ebx
0x3b7c:	mov	rdi, rbp
0x3b7f:	call	0x1b60


0x3bc1:	jmp	0x3b7a


0x2403:	test	rax, rax
0x2406:	mov	qword ptr [rsp + 0x20], rax
0x240b:	mov	rcx, qword ptr [rsp + 0x28]
0x2410:	movzx	r8d, byte ptr [rsp + 0x30]
0x2416:	movzx	r9d, byte ptr [rsp + 0x38]
0x241c:	mov	r10, qword ptr [rsp + 0x40]
0x2421:	movzx	r11d, byte ptr [rsp + 0x4f]
0x2427:	je	0x2b2e


0x2b2e:	cmp	byte ptr [rip + 0x2078a3], 0
0x2b35:	je	0x2485


0x242d:	test	r8b, r8b
0x2430:	je	0x2445


0x2485:	mov	rdi, rbx
0x2488:	mov	esi, 0x7d
0x248d:	mov	byte ptr [rsp + 0x38], r11b
0x2492:	mov	qword ptr [rsp + 0x30], r10
0x2497:	mov	byte ptr [rsp + 0x28], r9b
0x249c:	mov	byte ptr [rsp + 0x20], r8b
0x24a1:	call	0x19d0


0x2b3b:	mov	rdi, qword ptr [rip + 0x20773e]
0x2b42:	lea	rdx, [rip + 0x4a27]
0x2b49:	mov	esi, 1
0x2b4e:	xor	eax, eax
0x2b50:	mov	byte ptr [rsp + 0x38], r11b
0x2b55:	mov	qword ptr [rsp + 0x30], r10
0x2b5a:	mov	byte ptr [rsp + 0x28], r9b
0x2b5f:	mov	byte ptr [rsp + 0x20], r8b
0x2b64:	call	0x1bf0


0x2445:	cmp	byte ptr [rip + 0x207f8c], 0
0x244c:	jne	0x2bf8


0x2432:	lea	rax, [rbp + 1]
0x2436:	mov	byte ptr [rbp], 0
0x243a:	add	r13, 8
0x243e:	mov	qword ptr [r13 - 8], rax
0x2442:	mov	rbp, rax
0x2445:	cmp	byte ptr [rip + 0x207f8c], 0
0x244c:	jne	0x2bf8


0x2452:	mov	rsi, qword ptr [rsp + 0x20]
0x2457:	mov	rdi, rbp
0x245a:	mov	byte ptr [rsp + 0x38], r11b
0x245f:	mov	qword ptr [rsp + 0x30], r10
0x2464:	mov	byte ptr [rsp + 0x28], r9b
0x2469:	call	0x1950


0x2bf8:	mov	rdi, qword ptr [rsp + 0x20]
0x2bfd:	mov	byte ptr [rsp + 0x40], r11b
0x2c02:	mov	qword ptr [rsp + 0x38], r10
0x2c07:	mov	byte ptr [rsp + 0x30], r9b
0x2c0c:	mov	qword ptr [rsp + 0x28], rcx
0x2c11:	call	0x5c90


0x1950:	jmp	qword ptr [rip + 0x2084f2]




0x2b69:	movzx	r11d, byte ptr [rsp + 0x38]
0x2b6f:	mov	r10, qword ptr [rsp + 0x30]
0x2b74:	movzx	r9d, byte ptr [rsp + 0x28]
0x2b7a:	movzx	r8d, byte ptr [rsp + 0x20]
0x2b80:	jmp	0x2485


0x24a6:	movzx	r8d, byte ptr [rsp + 0x20]
0x24ac:	lea	rbx, [rax + 1]
0x24b0:	movzx	r9d, byte ptr [rsp + 0x28]
0x24b6:	mov	r10, qword ptr [rsp + 0x30]
0x24bb:	movzx	r11d, byte ptr [rsp + 0x38]
0x24c1:	jmp	0x2121


0x23a7:	xor	r9d, r9d
0x23aa:	add	rbx, rax
0x23ad:	xor	r11d, r11d
0x23b0:	mov	r8d, 1
0x23b6:	mov	r10, qword ptr [rsp + 0x20]
0x23bb:	jmp	0x2121


0x3b84:	lea	rsi, [rip + 0x2fef]
0x3b8b:	xor	edi, edi
0x3b8d:	call	0x1b70


0x3b92:	test	rax, rax
0x3b95:	mov	r15, rax
0x3b98:	je	0x3c08


0x2d95:	jmp	0x2d53


0x2951:	test	eax, eax
0x2953:	jne	0x3093


0x3093:	mov	rsi, qword ptr [rsp + 8]
0x3098:	mov	edi, 4
0x309d:	call	0x59c0


0x297c:	mov	rax, qword ptr [rsp + 0x10]
0x2981:	cmp	dword ptr [rax], 2
0x2984:	je	0x2b85


0x2b85:	movsxd	rax, dword ptr [rip + 0x2076c4]
0x2b8c:	mov	rdi, qword ptr [r15 + rax*8]
0x2b90:	call	0x5c90


0x298a:	movsxd	rax, dword ptr [rip + 0x2078bf]
0x2991:	mov	rdi, qword ptr [r15 + rax*8]
0x2995:	call	0x5c90


0x2600:	test	eax, eax
0x2602:	jne	0x302a


0x2608:	mov	eax, dword ptr [rip + 0x207c42]
0x260e:	lea	r13d, [rax + 1]
0x2612:	cmp	r13d, r14d
0x2615:	mov	dword ptr [rip + 0x207c34], r13d
0x261c:	jge	0x272f


0x302a:	mov	byte ptr [rbx], 0
0x302d:	movsxd	rax, dword ptr [rip + 0x20721c]
0x3034:	mov	rdi, qword ptr [r15 + rax*8]
0x3038:	call	0x5c90


0x29f2:	test	eax, eax
0x29f4:	jne	0x2edd


0x29fa:	add	r12, 1
0x29fe:	cmp	r12, qword ptr [rip + 0x2079db]
0x2a05:	jae	0x2a60


0x2edd:	mov	rdi, qword ptr [rbx]
0x2ee0:	call	0x5c90


0x2a60:	mov	r13d, dword ptr [rip + 0x2077e9]
0x2a67:	jmp	0x25d5


0x1e05:	mov	r12, qword ptr [rip + 0x208454]
0x1e0c:	mov	r11, rax
0x1e0f:	mov	r8, qword ptr [rax]
0x1e12:	jmp	0x1e1c


0x1e1c:	movsx	rsi, byte ptr [r12]
0x1e21:	test	byte ptr [r8 + rsi*2 + 1], 0x20
0x1e27:	mov	rdx, rsi
0x1e2a:	jne	0x1e18


0x1e2c:	test	sil, sil
0x1e2f:	je	0x1d30


0x1e18:	add	r12, 1
0x1e1c:	movsx	rsi, byte ptr [r12]
0x1e21:	test	byte ptr [r8 + rsi*2 + 1], 0x20
0x1e27:	mov	rdx, rsi
0x1e2a:	jne	0x1e18


0x1e35:	mov	eax, dword ptr [rsp + 0x48]
0x1e39:	sub	eax, dword ptr [rip + 0x208411]
0x1e3f:	or	r9, 0xffffffffffffffff
0x1e43:	mov	rdi, r12
0x1e46:	mov	rcx, r9
0x1e49:	mov	ebx, 1
0x1e4e:	xor	r10d, r10d
0x1e51:	mov	r13, r12
0x1e54:	xor	r14d, r14d
0x1e57:	xor	ebp, ebp
0x1e59:	mov	dword ptr [rsp + 0x30], eax
0x1e5d:	xor	eax, eax
0x1e5f:	repne scasb	al, byte ptr [rdi]


0x1e5f:	repne scasb	al, byte ptr [rdi]


0x1e61:	mov	qword ptr [rsp + 0x38], r12
0x1e66:	mov	qword ptr [rsp + 0x40], r15
0x1e6b:	mov	r12d, r10d
0x1e6e:	not	rcx
0x1e71:	mov	r15d, ebx
0x1e74:	mov	qword ptr [rsp + 0x28], r9
0x1e79:	mov	qword ptr [rsp + 0x20], rcx
0x1e7e:	mov	rbx, r11
0x1e81:	nop	dword ptr [rax]
0x1e88:	test	byte ptr [r8 + rsi*2 + 1], 0x20
0x1e8e:	movzx	eax, byte ptr [r13 + 1]
0x1e93:	je	0x2050


0x2050:	cmp	r12b, 1
0x2054:	sbb	r15d, -1
0x2058:	cmp	dl, 0x24
0x205b:	je	0x22a8


0x1e99:	mov	ecx, r14d
0x1e9c:	or	cl, bpl
0x1e9f:	jne	0x2050


0x22a8:	xor	r12d, r12d
0x22ab:	test	r14b, r14b
0x22ae:	je	0x2320


0x2061:	jle	0x2098


0x1ea5:	cmp	dl, 0x24
0x1ea8:	mov	r12d, 1
0x1eae:	je	0x22ab


0x2320:	mov	rdi, r13
0x2323:	call	0x31f0


0x22b0:	add	r13, 1
0x22b4:	test	al, al
0x22b6:	je	0x2f79


0x2098:	cmp	dl, 0x22
0x209b:	jne	0x2078


0x2063:	xor	r12d, r12d
0x2066:	cmp	dl, 0x27
0x2069:	je	0x2288


0x22ab:	test	r14b, r14b
0x22ae:	je	0x2320


0x1eb4:	jle	0x2300


0x2f79:	lea	rsi, [rip + 0x45c8]
0x2f80:	mov	edx, 5
0x2f85:	xor	edi, edi
0x2f87:	call	0x1960


0x22bc:	mov	edx, eax
0x22be:	jmp	0x2088


0x209d:	mov	r12d, r14d
0x20a0:	and	r12b, bpl
0x20a3:	jne	0x2f3b


0x2078:	mov	edx, eax
0x207a:	xor	r12d, r12d
0x207d:	add	r13, 1
0x2081:	test	dl, dl
0x2083:	je	0x20b9


0x2288:	test	r14b, r14b
0x228b:	je	0x2296


0x206f:	cmp	dl, 0x5c
0x2072:	je	0x1ecc


0x2300:	cmp	dl, 0x22
0x2303:	je	0x20a9


0x1eba:	cmp	dl, 0x27
0x1ebd:	je	0x2288


0x2088:	movsx	rsi, dl
0x208c:	jmp	0x1e88


0x20a9:	or	ebp, r14d
0x20ac:	mov	edx, eax
0x20ae:	add	r13, 1
0x20b2:	xor	ebp, 1
0x20b5:	test	dl, dl
0x20b7:	jne	0x2085


0x2f3b:	lea	rcx, [rip + 0x479e]
0x2f42:	lea	rsi, [rip + 0x3bfb]
0x2f49:	lea	rdi, [rip + 0x3d36]
0x2f50:	mov	edx, 0x134
0x2f55:	call	0x1a00


0x20b9:	or	bpl, r14b
0x20bc:	mov	ebx, r15d
0x20bf:	mov	r12, qword ptr [rsp + 0x38]
0x20c4:	mov	r15, qword ptr [rsp + 0x40]
0x20c9:	jne	0x2f79


0x2085:	mov	r8, qword ptr [rbx]
0x2088:	movsx	rsi, dl
0x208c:	jmp	0x1e88


0x2296:	or	r14d, ebp
0x2299:	mov	edx, eax
0x229b:	xor	r14d, 1
0x229f:	jmp	0x207d


0x228d:	test	bpl, bpl
0x2290:	jne	0x2f5a


0x1ecc:	cmp	al, 0x63
0x1ece:	sete	sil
0x1ed2:	test	sil, sil
0x1ed5:	mov	edx, esi
0x1ed7:	je	0x1ee2


0x2309:	mov	edx, eax
0x230b:	xor	r14d, r14d
0x230e:	xor	ebp, ebp
0x2310:	mov	r12d, 1
0x2316:	jmp	0x207d


0x1ec3:	cmp	dl, 0x5c
0x1ec6:	jne	0x2309


0x1e88:	test	byte ptr [r8 + rsi*2 + 1], 0x20
0x1e8e:	movzx	eax, byte ptr [r13 + 1]
0x1e93:	je	0x2050


0x20cf:	mov	rdi, qword ptr [rsp + 0x20]
0x20d4:	add	rdi, 7
0x20d8:	call	0x62d0


0x207d:	add	r13, 1
0x2081:	test	dl, dl
0x2083:	je	0x20b9


0x2f5a:	lea	rcx, [rip + 0x477f]
0x2f61:	lea	rsi, [rip + 0x3bdc]
0x2f68:	lea	rdi, [rip + 0x3d17]
0x2f6f:	mov	edx, 0x12f
0x2f74:	call	0x1a00


0x1ee2:	test	al, al
0x1ee4:	je	0x2f17


0x1ed9:	test	bpl, bpl
0x1edc:	jne	0x306f


0x2f17:	lea	rsi, [rip + 0x45c2]
0x2f1e:	mov	edx, 5
0x2f23:	xor	edi, edi
0x2f25:	call	0x1960


0x1eea:	lea	ecx, [rax - 0x66]
0x1eed:	cmp	cl, 0x10
0x1ef0:	ja	0x1eff


0x306f:	lea	rsi, [rip + 0x443a]
0x3076:	mov	edx, 5
0x307b:	xor	edi, edi
0x307d:	call	0x1960


0x1ef2:	mov	edx, 0x15101
0x1ef7:	shr	rdx, cl
0x1efa:	and	edx, 1
0x1efd:	or	edx, esi
0x1eff:	test	dl, dl
0x1f01:	jne	0x22e0


0x1eff:	test	dl, dl
0x1f01:	jne	0x22e0


0x1f07:	lea	edx, [rax - 0x22]
0x1f0a:	cmp	dl, 0x3d
0x1f0d:	jbe	0x22c3


0x22e0:	cmp	al, 0x5f
0x22e2:	movzx	edx, byte ptr [r13 + 2]
0x22e7:	sete	al
0x22ea:	add	r13, 1
0x22ee:	movzx	eax, al
0x22f1:	add	r15d, eax
0x22f4:	jmp	0x207d


0x22c3:	movabs	rcx, 0x2400000000000027
0x22cd:	bt	rcx, rdx
0x22d1:	jae	0x1f13


0x1f13:	lea	rsi, [rip + 0x4d78]
0x1f1a:	mov	ebp, eax
0x1f1c:	mov	edx, 5
0x1f21:	xor	edi, edi
0x1f23:	call	0x1960


0x20dd:	mov	rbp, rax
0x20e0:	mov	eax, dword ptr [rsp + 0x30]
0x20e4:	lea	edi, [rax + rbx + 2]
0x20e8:	mov	rbx, r12
0x20eb:	movsxd	rdi, edi
0x20ee:	shl	rdi, 3
0x20f2:	call	0x62d0


0x20f7:	lea	r14, [rax + 8]
0x20fb:	mov	dword ptr [rbp], 0x4d4d5544
0x2102:	mov	word ptr [rbp + 4], 0x59
0x2108:	mov	qword ptr [rax], rbp
0x210b:	mov	r10, rax
0x210e:	add	rbp, 6
0x2112:	mov	r13, r14
0x2115:	xor	r9d, r9d
0x2118:	xor	r11d, r11d
0x211b:	mov	r8d, 1
0x2121:	movzx	eax, byte ptr [rbx]
0x2124:	test	al, al
0x2126:	je	0x217e


0x1f28:	movsx	ecx, bpl
0x1f2c:	mov	rdx, rax
0x1f2f:	xor	esi, esi
0x1f31:	mov	edi, 0x7d
0x1f36:	xor	eax, eax
0x1f38:	call	0x1b40


0x3082:	xor	esi, esi
0x3084:	mov	rdx, rax
0x3087:	mov	edi, 0x7d
0x308c:	xor	eax, eax
0x308e:	call	0x1b40


0x2f2a:	xor	esi, esi
0x2f2c:	mov	rdx, rax
0x2f2f:	mov	edi, 0x7d
0x2f34:	xor	eax, eax
0x2f36:	call	0x1b40


0x2f8c:	xor	esi, esi
0x2f8e:	mov	rdx, rax
0x2f91:	mov	edi, 0x7d
0x2f96:	xor	eax, eax
0x2f98:	call	0x1b40


0x2328:	test	rax, rax
0x232b:	je	0x2e70


0x2e70:	lea	rsi, [rip + 0x4699]
0x2e77:	mov	edx, 5
0x2e7c:	xor	edi, edi
0x2e7e:	call	0x1960


0x2331:	mov	rdi, rax
0x2334:	call	0x1880


0x2339:	test	rax, rax
0x233c:	mov	rdi, rax
0x233f:	je	0x235d


0x235d:	movzx	edx, byte ptr [r13 + 1]
0x2362:	jmp	0x207d


0x2341:	mov	rcx, qword ptr [rsp + 0x28]
0x2346:	mov	eax, r14d
0x2349:	repne scasb	al, byte ptr [rdi]


0x234b:	mov	rax, qword ptr [rsp + 0x20]
0x2350:	not	rcx
0x2353:	lea	rax, [rax + rcx - 1]
0x2358:	mov	qword ptr [rsp + 0x20], rax
0x235d:	movzx	edx, byte ptr [r13 + 1]
0x2362:	jmp	0x207d


0x2349:	repne scasb	al, byte ptr [rdi]


0x2e83:	mov	rcx, r13
0x2e86:	mov	rdx, rax
0x2e89:	xor	esi, esi
0x2e8b:	mov	edi, 0x7d
0x2e90:	xor	eax, eax
0x2e92:	call	0x1b40


0x246e:	movzx	r9d, byte ptr [rsp + 0x28]
0x2474:	movzx	r11d, byte ptr [rsp + 0x38]
0x247a:	mov	rbp, rax
0x247d:	mov	r10, qword ptr [rsp + 0x30]
0x2482:	xor	r8d, r8d
0x2485:	mov	rdi, rbx
0x2488:	mov	esi, 0x7d
0x248d:	mov	byte ptr [rsp + 0x38], r11b
0x2492:	mov	qword ptr [rsp + 0x30], r10
0x2497:	mov	byte ptr [rsp + 0x28], r9b
0x249c:	mov	byte ptr [rsp + 0x20], r8b
0x24a1:	call	0x19d0


0x30a2:	lea	rsi, [rip + 0x3d11]
0x30a9:	mov	edx, 5
0x30ae:	xor	edi, edi
0x30b0:	mov	rbx, rax
0x30b3:	call	0x1960


0x30b8:	mov	rdx, rax
0x30bb:	mov	rax, qword ptr [rsp + 0x10]
0x30c0:	mov	rcx, rbx
0x30c3:	mov	edi, 0x7d
0x30c8:	mov	esi, dword ptr [rax]
0x30ca:	xor	eax, eax
0x30cc:	call	0x1b40


0x30d1:	nop	word ptr cs:[rax + rax]
0x30db:	nop	dword ptr [rax + rax]


0x2af5:	mov	rdi, qword ptr [rip + 0x207784]
0x2afc:	lea	rdx, [rip + 0x42a9]
0x2b03:	mov	rcx, rax
0x2b06:	mov	esi, 1
0x2b0b:	xor	eax, eax
0x2b0d:	call	0x1bf0


0x2b12:	jmp	0x2947


0x3f3a:	mov	esi, dword ptr [rbx]
0x3f3c:	lea	rdx, [rip + 0x37ee]
0x3f43:	mov	rcx, rax
0x3f46:	mov	r8, rbp
0x3f49:	xor	edi, edi
0x3f4b:	xor	eax, eax
0x3f4d:	call	0x1b40


0x543c:	add	rsp, 0x20
0x5440:	mov	r11, qword ptr [rsp + 0x10]
0x5445:	cmp	r11, rax
0x5448:	ja	0x54b1


0x544a:	lea	rsi, [rax + 1]
0x544e:	lea	rax, [rip + 0x204fcb]
0x5455:	cmp	r12, rax
0x5458:	mov	qword ptr [rbx], rsi
0x545b:	je	0x546f


0x54b1:	mov	eax, dword ptr [rsp + 0x18]
0x54b5:	mov	dword ptr [r13], eax
0x54b9:	add	rsp, 0x28
0x54bd:	mov	rax, r12
0x54c0:	pop	rbx
0x54c1:	pop	rbp
0x54c2:	pop	r12
0x54c4:	pop	r13
0x54c6:	pop	r14
0x54c8:	pop	r15
0x54ca:	ret	


0x546f:	mov	rdi, rsi
0x5472:	mov	qword ptr [rsp + 0x10], rsi
0x5477:	call	0x62d0


0x545d:	mov	rdi, r12
0x5460:	mov	qword ptr [rsp + 0x10], rsi
0x5465:	call	0x18a0


0x546a:	mov	rsi, qword ptr [rsp + 0x10]
0x546f:	mov	rdi, rsi
0x5472:	mov	qword ptr [rsp + 0x10], rsi
0x5477:	call	0x62d0


0x547c:	sub	rsp, 8
0x5480:	mov	qword ptr [rbx + 8], rax
0x5484:	mov	r8d, dword ptr [rbp]
0x5488:	push	qword ptr [rbp + 0x30]
0x548b:	push	qword ptr [rbp + 0x28]
0x548e:	mov	rcx, r14
0x5491:	push	r15
0x5493:	mov	r9d, dword ptr [rsp + 0x3c]
0x5498:	mov	rdi, rax
0x549b:	mov	rdx, qword ptr [rsp + 0x28]
0x54a0:	mov	rsi, qword ptr [rsp + 0x30]
0x54a5:	mov	r12, rax
0x54a8:	call	0x4110


0x5bc2:	mov	rdi, qword ptr [rsp + 0x38]
0x5bc7:	xor	rdi, qword ptr fs:[0x28]
0x5bd0:	jne	0x5bdc


0x5bd2:	add	rsp, 0x48
0x5bd6:	ret	


0x5bdc:	call	0x19a0


0x590f:	mov	rcx, qword ptr [rsp + 0x38]
0x5914:	xor	rcx, qword ptr fs:[0x28]
0x591d:	jne	0x5929


0x591f:	add	rsp, 0x48
0x5923:	ret	


0x5929:	call	0x19a0


0x599b:	mov	rdx, qword ptr [rsp + 0x38]
0x59a0:	xor	rdx, qword ptr fs:[0x28]
0x59a9:	jne	0x59b5


0x59ab:	add	rsp, 0x48
0x59af:	ret	


0x59b5:	call	0x19a0


0x5b2f:	mov	rcx, qword ptr [rsp + 0x38]
0x5b34:	xor	rcx, qword ptr fs:[0x28]
0x5b3d:	jne	0x5b49


0x5b3f:	add	rsp, 0x48
0x5b43:	ret	


0x5b49:	call	0x19a0


0x5a5e:	mov	rsi, qword ptr [rsp + 0x38]
0x5a63:	xor	rsi, qword ptr fs:[0x28]
0x5a6c:	jne	0x5a73


0x5a6e:	add	rsp, 0x48
0x5a72:	ret	


0x5a73:	call	0x19a0


0x54ad:	add	rsp, 0x20
0x54b1:	mov	eax, dword ptr [rsp + 0x18]
0x54b5:	mov	dword ptr [r13], eax
0x54b9:	add	rsp, 0x28
0x54bd:	mov	rax, r12
0x54c0:	pop	rbx
0x54c1:	pop	rbp
0x54c2:	pop	r12
0x54c4:	pop	r13
0x54c6:	pop	r14
0x54c8:	pop	r15
0x54ca:	ret	


0x56fc:	lea	rsi, [rax + 1]
0x5700:	mov	qword ptr [rsp + 0x48], rax
0x5705:	add	rsp, 0x20
0x5709:	mov	rdi, rsi
0x570c:	mov	qword ptr [rsp + 0x18], rsi
0x5711:	call	0x62d0


0x5716:	mov	qword ptr [rsp + 0x10], rax
0x571b:	sub	rsp, 8
0x571f:	push	qword ptr [rbx + 0x30]
0x5722:	push	qword ptr [rbx + 0x28]
0x5725:	mov	r10, qword ptr [rsp + 0x38]
0x572a:	mov	r9d, ebp
0x572d:	mov	r8d, dword ptr [rbx]
0x5730:	mov	rcx, r15
0x5733:	mov	rdx, r14
0x5736:	mov	rdi, rax
0x5739:	push	r10
0x573b:	mov	rsi, qword ptr [rsp + 0x38]
0x5740:	call	0x4110


0x5745:	mov	eax, dword ptr [rsp + 0x2c]
0x5749:	add	rsp, 0x20
0x574d:	test	r12, r12
0x5750:	mov	dword ptr [r13], eax
0x5754:	je	0x575f


0x575f:	mov	rax, qword ptr [rsp + 0x10]
0x5764:	add	rsp, 0x38
0x5768:	pop	rbx
0x5769:	pop	rbp
0x576a:	pop	r12
0x576c:	pop	r13
0x576e:	pop	r14
0x5770:	pop	r15
0x5772:	ret	


0x5756:	mov	r11, qword ptr [rsp + 0x28]
0x575b:	mov	qword ptr [r12], r11
0x575f:	mov	rax, qword ptr [rsp + 0x10]
0x5764:	add	rsp, 0x38
0x5768:	pop	rbx
0x5769:	pop	rbp
0x576a:	pop	r12
0x576c:	pop	r13
0x576e:	pop	r14
0x5770:	pop	r15
0x5772:	ret	


0x5671:	mov	dword ptr [rbp], r12d
0x5675:	add	rsp, 0x38
0x5679:	pop	rbx
0x567a:	pop	rbp
0x567b:	pop	r12
0x567d:	pop	r13
0x567f:	pop	r14
0x5681:	pop	r15
0x5683:	ret	


0x2ee5:	lea	rsi, [rip + 0x3e71]
0x2eec:	mov	edx, 5
0x2ef1:	xor	edi, edi
0x2ef3:	mov	rbp, rax
0x2ef6:	call	0x1960


0x2efb:	mov	rbx, rax
0x2efe:	call	0x18c0


0x2f03:	mov	esi, dword ptr [rax]
0x2f05:	mov	rcx, rbp
0x2f08:	mov	rdx, rbx
0x2f0b:	mov	edi, 0x7d
0x2f10:	xor	eax, eax
0x2f12:	call	0x1b40


0x303d:	lea	rsi, [rip + 0x3d37]
0x3044:	mov	edx, 5
0x3049:	xor	edi, edi
0x304b:	mov	rbp, rax
0x304e:	call	0x1960


0x3053:	mov	rbx, rax
0x3056:	call	0x18c0


0x305b:	mov	esi, dword ptr [rax]
0x305d:	mov	rcx, rbp
0x3060:	mov	rdx, rbx
0x3063:	mov	edi, 0x7d
0x3068:	xor	eax, eax
0x306a:	call	0x1b40


0x299a:	mov	rcx, rax
0x299d:	mov	rax, qword ptr [rsp + 0x10]
0x29a2:	lea	rdx, [rip + 0x4d8c]
0x29a9:	xor	edi, edi
0x29ab:	mov	esi, dword ptr [rax]
0x29ad:	xor	eax, eax
0x29af:	call	0x1b40


0x29b4:	mov	eax, 0x7e
0x29b9:	jmp	0x2787


0x2787:	mov	rcx, qword ptr [rsp + 0x108]
0x278f:	xor	rcx, qword ptr fs:[0x28]
0x2798:	jne	0x2ff5


0x2b95:	mov	rcx, rax
0x2b98:	mov	rax, qword ptr [rsp + 0x10]
0x2b9d:	lea	rdx, [rip + 0x4b91]
0x2ba4:	xor	edi, edi
0x2ba6:	mov	esi, dword ptr [rax]
0x2ba8:	xor	eax, eax
0x2baa:	call	0x1b40


0x2baf:	movsxd	rax, dword ptr [rip + 0x20769a]
0x2bb6:	mov	esi, 0x20
0x2bbb:	mov	rdi, qword ptr [r15 + rax*8]
0x2bbf:	call	0x19d0


0x2bc4:	test	rax, rax
0x2bc7:	je	0x2e1e


0x2e1e:	mov	eax, 0x7f
0x2e23:	jmp	0x2787


0x2bcd:	lea	rsi, [rip + 0x49c4]
0x2bd4:	mov	edx, 5
0x2bd9:	xor	edi, edi
0x2bdb:	call	0x1960


0x2be0:	xor	esi, esi
0x2be2:	mov	rdx, rax
0x2be5:	xor	edi, edi
0x2be7:	xor	eax, eax
0x2be9:	call	0x1b40


0x2bee:	mov	eax, 0x7f
0x2bf3:	jmp	0x2787


0x2c16:	mov	rcx, qword ptr [rsp + 0x28]
0x2c1b:	mov	rdi, qword ptr [rip + 0x20765e]
0x2c22:	lea	rdx, [rip + 0x408b]
0x2c29:	mov	r8, rax
0x2c2c:	mov	esi, 1
0x2c31:	xor	eax, eax
0x2c33:	call	0x1bf0


0x2c38:	movzx	r11d, byte ptr [rsp + 0x40]
0x2c3e:	mov	r10, qword ptr [rsp + 0x38]
0x2c43:	movzx	r9d, byte ptr [rsp + 0x30]
0x2c49:	jmp	0x2452


0x21b1:	mov	rdi, qword ptr [rip + 0x2080c8]
0x21b8:	lea	rdx, [rip + 0x4b0e]
0x21bf:	mov	rcx, rax
0x21c2:	mov	esi, 1
0x21c7:	xor	eax, eax
0x21c9:	call	0x1bf0


0x21ce:	cmp	byte ptr [rip + 0x208203], 0
0x21d5:	mov	r10, qword ptr [rsp + 0x20]
0x21da:	jne	0x2c4e


0x21e0:	mov	rbx, r10
0x21e3:	mov	rdi, qword ptr [r14]
0x21e6:	movzx	eax, byte ptr [rip + 0x2081eb]
0x21ed:	jmp	0x21f8


0x2c4e:	mov	rdi, qword ptr [r10 + 8]
0x2c52:	lea	r14, [r10 + 0x10]
0x2c56:	call	0x5c90


0x21f8:	test	rdi, rdi
0x21fb:	jne	0x21f0


0x21fd:	mov	r10, rbx
0x2200:	movsxd	rax, dword ptr [rip + 0x208049]
0x2207:	mov	ecx, dword ptr [rsp + 0x48]
0x220b:	cmp	eax, ecx
0x220d:	jge	0x2244


0x21f0:	test	al, al
0x21f2:	jne	0x2a35


0x2a35:	call	0x5c90


0x2a3a:	mov	rdi, qword ptr [rip + 0x20783f]
0x2a41:	lea	rdx, [rip + 0x42a2]
0x2a48:	mov	rcx, rax
0x2a4b:	mov	esi, 1
0x2a50:	xor	eax, eax
0x2a52:	add	r14, 8
0x2a56:	call	0x1bf0


0x2a5b:	jmp	0x21e3


0x21e3:	mov	rdi, qword ptr [r14]
0x21e6:	movzx	eax, byte ptr [rip + 0x2081eb]
0x21ed:	jmp	0x21f8


0x2c5b:	mov	rdi, qword ptr [rip + 0x20761e]
0x2c62:	lea	rdx, [rip + 0x4073]
0x2c69:	mov	rcx, rax
0x2c6c:	mov	esi, 1
0x2c71:	xor	eax, eax
0x2c73:	call	0x1bf0


0x2c78:	mov	r10, qword ptr [rsp + 0x20]
0x2c7d:	mov	rbx, r10
0x2c80:	jmp	0x21e3


0x2ccc:	mov	ecx, ebp
0x2cce:	sub	ecx, dword ptr [rip + 0x20757c]
0x2cd4:	mov	rdi, qword ptr [rip + 0x2075a5]
0x2cdb:	mov	r8, rax
0x2cde:	mov	rdx, r12
0x2ce1:	mov	esi, 1
0x2ce6:	xor	eax, eax
0x2ce8:	call	0x1bf0


0x3bd0:	lea	rsi, [rip + 0x3061]
0x3bd7:	mov	rbx, rax
0x3bda:	mov	edx, 5
0x3bdf:	xor	edi, edi
0x3be1:	call	0x1960


0x3be6:	mov	rcx, rbx
0x3be9:	mov	rdx, rax
0x3bec:	xor	esi, esi
0x3bee:	xor	edi, edi
0x3bf0:	xor	eax, eax
0x3bf2:	call	0x1b40


0x3a10:	lea	rsi, [rip + 0x3221]
0x3a17:	mov	rbx, rax
0x3a1a:	mov	edx, 5
0x3a1f:	xor	edi, edi
0x3a21:	call	0x1960


0x3a26:	mov	rcx, rbx
0x3a29:	mov	rdx, rax
0x3a2c:	xor	esi, esi
0x3a2e:	xor	edi, edi
0x3a30:	xor	eax, eax
0x3a32:	call	0x1b40


0x3d48:	lea	rsi, [rip + 0x2ee9]
0x3d4f:	mov	rbx, rax
0x3d52:	mov	edx, 5
0x3d57:	xor	edi, edi
0x3d59:	call	0x1960


0x3d5e:	mov	rcx, rbx
0x3d61:	mov	rdx, rax
0x3d64:	xor	esi, esi
0x3d66:	xor	eax, eax
0x3d68:	xor	edi, edi
0x3d6a:	call	0x1b40


0x3d6f:	mov	eax, 0xffffffff
0x3d74:	jmp	0x3e00


0x3e00:	mov	rcx, qword ptr [rsp + 0x18]
0x3e05:	xor	rcx, qword ptr fs:[0x28]
0x3e0e:	jne	0x3e9c


0x6aed:	add	rbx, 1
0x6af1:	cmp	rbp, rbx
0x6af4:	jne	0x6ae0


0x6ae0:	mov	rdx, r15
0x6ae3:	mov	rsi, r14
0x6ae6:	mov	edi, r13d
0x6ae9:	call	qword ptr [r12 + rbx*8]






0x5f40:	lea	rsi, [rip + 0x1e71]
0x5f47:	mov	edx, 5
0x5f4c:	xor	edi, edi
0x5f4e:	mov	r14, qword ptr [rbx + 0x18]
0x5f52:	mov	r13, qword ptr [rbx + 0x10]
0x5f56:	mov	r12, qword ptr [rbx + 8]
0x5f5a:	mov	rbx, qword ptr [rbx]
0x5f5d:	call	0x1960


0x5d60:	mov	r9, qword ptr [rbx + 0x38]
0x5d64:	mov	rax, qword ptr [rbx + 0x10]
0x5d68:	lea	rsi, [rip + 0x20e9]
0x5d6f:	mov	r8, qword ptr [rbx + 8]
0x5d73:	mov	edx, 5
0x5d78:	xor	edi, edi
0x5d7a:	mov	r13, qword ptr [rbx + 0x30]
0x5d7e:	mov	r12, qword ptr [rbx + 0x28]
0x5d82:	mov	qword ptr [rsp + 0x10], r9
0x5d87:	mov	r15, qword ptr [rbx + 0x20]
0x5d8b:	mov	r14, qword ptr [rbx + 0x18]
0x5d8f:	mov	qword ptr [rsp], rax
0x5d93:	mov	qword ptr [rsp + 8], r8
0x5d98:	mov	rbx, qword ptr [rbx]
0x5d9b:	call	0x1960


0x5e68:	mov	rbx, qword ptr [rbx]
0x5e6b:	lea	rsi, [rip + 0x1ded]
0x5e72:	mov	edx, 5
0x5e77:	xor	edi, edi
0x5e79:	call	0x1960


0x5ea8:	mov	r12, qword ptr [rbx + 8]
0x5eac:	lea	rsi, [rip + 0x1dbc]
0x5eb3:	mov	rbx, qword ptr [rbx]
0x5eb6:	mov	edx, 5
0x5ebb:	xor	edi, edi
0x5ebd:	call	0x1960


0x5fc8:	mov	r8, qword ptr [rbx + 8]
0x5fcc:	mov	r12, qword ptr [rbx + 0x28]
0x5fd0:	lea	rsi, [rip + 0x1e29]
0x5fd7:	mov	r15, qword ptr [rbx + 0x20]
0x5fdb:	mov	r14, qword ptr [rbx + 0x18]
0x5fdf:	mov	edx, 5
0x5fe4:	mov	r13, qword ptr [rbx + 0x10]
0x5fe8:	xor	edi, edi
0x5fea:	mov	rbx, qword ptr [rbx]
0x5fed:	mov	qword ptr [rsp], r8
0x5ff1:	call	0x1960


0x5ef0:	mov	r13, qword ptr [rbx + 0x10]
0x5ef4:	mov	r12, qword ptr [rbx + 8]
0x5ef8:	lea	rsi, [rip + 0x1d87]
0x5eff:	mov	rbx, qword ptr [rbx]
0x5f02:	mov	edx, 5
0x5f07:	xor	edi, edi
0x5f09:	call	0x1960


0x6030:	mov	r9, qword ptr [rbx + 0x10]
0x6034:	mov	r13, qword ptr [rbx + 0x30]
0x6038:	lea	rsi, [rip + 0x1de9]
0x603f:	mov	r12, qword ptr [rbx + 0x28]
0x6043:	mov	r15, qword ptr [rbx + 0x20]
0x6047:	mov	edx, 5
0x604c:	mov	r14, qword ptr [rbx + 0x18]
0x6050:	mov	r8, qword ptr [rbx + 8]
0x6054:	xor	edi, edi
0x6056:	mov	qword ptr [rsp + 8], r9
0x605b:	mov	rbx, qword ptr [rbx]
0x605e:	mov	qword ptr [rsp], r8
0x6062:	call	0x1960


0x5e10:	mov	r10, qword ptr [rbx + 0x40]
0x5e14:	mov	r9, qword ptr [rbx + 0x38]
0x5e18:	lea	rsi, [rip + 0x2069]
0x5e1f:	mov	rax, qword ptr [rbx + 0x10]
0x5e23:	mov	r8, qword ptr [rbx + 8]
0x5e27:	mov	edx, 5
0x5e2c:	mov	r13, qword ptr [rbx + 0x30]
0x5e30:	mov	r12, qword ptr [rbx + 0x28]
0x5e34:	mov	r15, qword ptr [rbx + 0x20]
0x5e38:	mov	r14, qword ptr [rbx + 0x18]
0x5e3c:	mov	rbx, qword ptr [rbx]
0x5e3f:	mov	qword ptr [rsp + 0x18], r10
0x5e44:	mov	qword ptr [rsp + 0x10], r9
0x5e49:	mov	qword ptr [rsp], rax
0x5e4d:	mov	qword ptr [rsp + 8], r8
0x5e52:	xor	edi, edi
0x5e54:	call	0x1960


0x5dd6:	add	rsp, 0x28
0x5dda:	pop	rbx
0x5ddb:	pop	rbp
0x5ddc:	pop	r12
0x5dde:	pop	r13
0x5de0:	pop	r14
0x5de2:	pop	r15
0x5de4:	ret	


0x5f98:	mov	r15, qword ptr [rbx + 0x20]
0x5f9c:	lea	rsi, [rip + 0x1e35]
0x5fa3:	mov	edx, 5
0x5fa8:	xor	edi, edi
0x5faa:	mov	r14, qword ptr [rbx + 0x18]
0x5fae:	mov	r13, qword ptr [rbx + 0x10]
0x5fb2:	mov	r12, qword ptr [rbx + 8]
0x5fb6:	mov	rbx, qword ptr [rbx]
0x5fb9:	call	0x1960


0x5fbe:	push	r15
0x5fc0:	jmp	0x5f66


0x5f66:	push	r14
0x5f68:	mov	rdx, rax
0x5f6b:	mov	r9, r13
0x5f6e:	mov	r8, r12
0x5f71:	mov	rcx, rbx
0x5f74:	mov	rdi, rbp
0x5f77:	mov	esi, 1
0x5f7c:	xor	eax, eax
0x5f7e:	call	0x1bf0


0x5f83:	pop	rax
0x5f84:	pop	rdx
0x5f85:	add	rsp, 0x28
0x5f89:	pop	rbx
0x5f8a:	pop	rbp
0x5f8b:	pop	r12
0x5f8d:	pop	r13
0x5f8f:	pop	r14
0x5f91:	pop	r15
0x5f93:	ret	


0x6067:	push	r13
0x6069:	push	r12
0x606b:	push	r15
0x606d:	push	r14
0x606f:	mov	r9, qword ptr [rsp + 0x28]
0x6074:	jmp	0x6003


0x6003:	mov	r8, qword ptr [rsp + 0x20]
0x6008:	mov	rcx, rbx
0x600b:	mov	rdx, rax
0x600e:	mov	rdi, rbp
0x6011:	mov	esi, 1
0x6016:	xor	eax, eax
0x6018:	call	0x1bf0


0x601d:	add	rsp, 0x20
0x6021:	add	rsp, 0x28
0x6025:	pop	rbx
0x6026:	pop	rbp
0x6027:	pop	r12
0x6029:	pop	r13
0x602b:	pop	r14
0x602d:	pop	r15
0x602f:	ret	


0x5f0e:	add	rsp, 0x28
0x5f12:	mov	r9, r13
0x5f15:	mov	r8, r12
0x5f18:	mov	rcx, rbx
0x5f1b:	mov	rdi, rbp
0x5f1e:	mov	rdx, rax
0x5f21:	pop	rbx
0x5f22:	pop	rbp
0x5f23:	pop	r12
0x5f25:	pop	r13
0x5f27:	pop	r14
0x5f29:	pop	r15
0x5f2b:	mov	esi, 1
0x5f30:	xor	eax, eax
0x5f32:	jmp	0x1bf0


0x5ff6:	sub	rsp, 8
0x5ffa:	mov	r9, r13
0x5ffd:	push	r12
0x5fff:	push	r15
0x6001:	push	r14
0x6003:	mov	r8, qword ptr [rsp + 0x20]
0x6008:	mov	rcx, rbx
0x600b:	mov	rdx, rax
0x600e:	mov	rdi, rbp
0x6011:	mov	esi, 1
0x6016:	xor	eax, eax
0x6018:	call	0x1bf0


0x5ec2:	add	rsp, 0x28
0x5ec6:	mov	r8, r12
0x5ec9:	mov	rcx, rbx
0x5ecc:	mov	rdi, rbp
0x5ecf:	mov	rdx, rax
0x5ed2:	mov	esi, 1
0x5ed7:	pop	rbx
0x5ed8:	pop	rbp
0x5ed9:	pop	r12
0x5edb:	pop	r13
0x5edd:	pop	r14
0x5edf:	pop	r15
0x5ee1:	xor	eax, eax
0x5ee3:	jmp	0x1bf0


0x5e7e:	add	rsp, 0x28
0x5e82:	mov	rcx, rbx
0x5e85:	mov	rdi, rbp
0x5e88:	pop	rbx
0x5e89:	pop	rbp
0x5e8a:	pop	r12
0x5e8c:	pop	r13
0x5e8e:	pop	r14
0x5e90:	pop	r15
0x5e92:	mov	rdx, rax
0x5e95:	mov	esi, 1
0x5e9a:	xor	eax, eax
0x5e9c:	jmp	0x1bf0


0x5da0:	sub	rsp, 8
0x5da4:	mov	r9, qword ptr [rsp + 0x18]
0x5da9:	mov	rdx, rax
0x5dac:	mov	rcx, rbx
0x5daf:	mov	esi, 1
0x5db4:	mov	rdi, rbp
0x5db7:	xor	eax, eax
0x5db9:	push	r9
0x5dbb:	push	r13
0x5dbd:	push	r12
0x5dbf:	push	r15
0x5dc1:	push	r14
0x5dc3:	mov	r9, qword ptr [rsp + 0x30]
0x5dc8:	mov	r8, qword ptr [rsp + 0x38]
0x5dcd:	call	0x1bf0


0x5f62:	sub	rsp, 8
0x5f66:	push	r14
0x5f68:	mov	rdx, rax
0x5f6b:	mov	r9, r13
0x5f6e:	mov	r8, r12
0x5f71:	mov	rcx, rbx
0x5f74:	mov	rdi, rbp
0x5f77:	mov	esi, 1
0x5f7c:	xor	eax, eax
0x5f7e:	call	0x1bf0


0x4cb0:	sub	rsp, 8
0x4cb4:	mov	rcx, rbp
0x4cb7:	mov	rsi, r13
0x4cba:	push	qword ptr [rsp + 0x68]
0x4cbe:	push	qword ptr [rsp + 0x78]
0x4cc2:	mov	rdi, r14
0x4cc5:	push	0
0x4cc7:	mov	r9d, dword ptr [rsp + 0x98]
0x4ccf:	mov	r8d, dword ptr [rsp + 0x28]
0x4cd4:	mov	rdx, qword ptr [rsp + 0x30]
0x4cd9:	and	r9d, 0xfffffffd
0x4cdd:	call	0x4110


0x4ce2:	add	rsp, 0x20
0x4ce6:	mov	r15, rax
0x4ce9:	mov	rbx, qword ptr [rsp + 0xa8]
0x4cf1:	xor	rbx, qword ptr fs:[0x28]
0x4cfa:	mov	rax, r15
0x4cfd:	jne	0x5303


0x4d03:	add	rsp, 0xb8
0x4d0a:	pop	rbx
0x4d0b:	pop	rbp
0x4d0c:	pop	r12
0x4d0e:	pop	r13
0x4d10:	pop	r14
0x4d12:	pop	r15
0x4d14:	ret	


0x5303:	call	0x19a0


0x52ad:	sub	rsp, 8
0x52b1:	mov	r8d, 5
0x52b7:	mov	rcx, r11
0x52ba:	push	qword ptr [rsp + 0x68]
0x52be:	push	qword ptr [rsp + 0x78]
0x52c2:	mov	rdi, r14
0x52c5:	push	qword ptr [rsp + 0x38]
0x52c9:	mov	r9d, dword ptr [rsp + 0x98]
0x52d1:	mov	rdx, qword ptr [rsp + 0x30]
0x52d6:	mov	rsi, qword ptr [rsp + 0x70]
0x52db:	call	0x4110


0x52e0:	add	rsp, 0x20
0x52e4:	mov	r15, rax
0x52e7:	jmp	0x4ce9


0x4ce9:	mov	rbx, qword ptr [rsp + 0xa8]
0x4cf1:	xor	rbx, qword ptr fs:[0x28]
0x4cfa:	mov	rax, r15
0x4cfd:	jne	0x5303


0x1870:	push	qword ptr [rip + 0x20855a]
0x1876:	jmp	qword ptr [rip + 0x20855c]


0x187c:	nop	dword ptr [rax]


0x1886:	push	0
0x188b:	jmp	0x1870


0x1896:	push	1
0x189b:	jmp	0x1870


0x18a6:	push	2
0x18ab:	jmp	0x1870


0x18b6:	push	3
0x18bb:	jmp	0x1870


0x18c6:	push	4
0x18cb:	jmp	0x1870


0x18d6:	push	5
0x18db:	jmp	0x1870


0x18e6:	push	6
0x18eb:	jmp	0x1870


0x18f6:	push	7
0x18fb:	jmp	0x1870


0x1906:	push	8
0x190b:	jmp	0x1870


0x1916:	push	9
0x191b:	jmp	0x1870


0x1926:	push	0xa
0x192b:	jmp	0x1870


0x1936:	push	0xb
0x193b:	jmp	0x1870


0x1946:	push	0xc
0x194b:	jmp	0x1870


0x1956:	push	0xd
0x195b:	jmp	0x1870


0x1966:	push	0xe
0x196b:	jmp	0x1870


0x1976:	push	0xf
0x197b:	jmp	0x1870


0x1986:	push	0x10
0x198b:	jmp	0x1870


0x1996:	push	0x11
0x199b:	jmp	0x1870


0x19a6:	push	0x12
0x19ab:	jmp	0x1870


0x19b6:	push	0x13
0x19bb:	jmp	0x1870


0x19c6:	push	0x14
0x19cb:	jmp	0x1870


0x19d6:	push	0x15
0x19db:	jmp	0x1870


0x19e6:	push	0x16
0x19eb:	jmp	0x1870


0x19f6:	push	0x17
0x19fb:	jmp	0x1870


0x1a06:	push	0x18
0x1a0b:	jmp	0x1870


0x1a16:	push	0x19
0x1a1b:	jmp	0x1870


0x1a26:	push	0x1a
0x1a2b:	jmp	0x1870


0x1a30:	jmp	qword ptr [rip + 0x208482]




0x1a36:	push	0x1b
0x1a3b:	jmp	0x1870


0x1a46:	push	0x1c
0x1a4b:	jmp	0x1870


0x1a56:	push	0x1d
0x1a5b:	jmp	0x1870


0x1a66:	push	0x1e
0x1a6b:	jmp	0x1870


0x1a76:	push	0x1f
0x1a7b:	jmp	0x1870


0x1a86:	push	0x20
0x1a8b:	jmp	0x1870


0x1a96:	push	0x21
0x1a9b:	jmp	0x1870


0x1aa6:	push	0x22
0x1aab:	jmp	0x1870


0x1ab6:	push	0x23
0x1abb:	jmp	0x1870


0x1ac6:	push	0x24
0x1acb:	jmp	0x1870


0x1ad6:	push	0x25
0x1adb:	jmp	0x1870


0x1ae6:	push	0x26
0x1aeb:	jmp	0x1870


0x1af6:	push	0x27
0x1afb:	jmp	0x1870


0x1b06:	push	0x28
0x1b0b:	jmp	0x1870


0x1b16:	push	0x29
0x1b1b:	jmp	0x1870


0x1b26:	push	0x2a
0x1b2b:	jmp	0x1870


0x1b36:	push	0x2b
0x1b3b:	jmp	0x1870


0x1b46:	push	0x2c
0x1b4b:	jmp	0x1870


0x1b56:	push	0x2d
0x1b5b:	jmp	0x1870


0x1b66:	push	0x2e
0x1b6b:	jmp	0x1870


0x1b76:	push	0x2f
0x1b7b:	jmp	0x1870


0x1b86:	push	0x30
0x1b8b:	jmp	0x1870


0x1b96:	push	0x31
0x1b9b:	jmp	0x1870


0x1ba6:	push	0x32
0x1bab:	jmp	0x1870


0x1bb6:	push	0x33
0x1bbb:	jmp	0x1870


0x1bc6:	push	0x34
0x1bcb:	jmp	0x1870


0x1bd6:	push	0x35
0x1bdb:	jmp	0x1870


0x1be6:	push	0x36
0x1beb:	jmp	0x1870


0x1bf6:	push	0x37
0x1bfb:	jmp	0x1870


0x1c06:	push	0x38
0x1c0b:	jmp	0x1870


0x1c10:	jmp	qword ptr [rip + 0x208392]




0x1c16:	push	0x39
0x1c1b:	jmp	0x1870


0x1c20:	jmp	qword ptr [rip + 0x20838a]




0x1c26:	push	0x3a
0x1c2b:	jmp	0x1870


0x1c36:	push	0x3b
0x1c3b:	jmp	0x1870


0x1c46:	push	0x3c
0x1c4b:	jmp	0x1870


0x1c56:	push	0x3d
0x1c5b:	jmp	0x1870


0x310a:	hlt	


0x310b:	nop	dword ptr [rax + rax]


0x3142:	nop	dword ptr [rax]
0x3146:	nop	word ptr cs:[rax + rax]


0x3192:	nop	dword ptr [rax]
0x3196:	nop	word ptr cs:[rax + rax]


0x31da:	nop	word ptr [rax + rax]


0x31ea:	nop	word ptr [rax + rax]


0x3318:	nop	dword ptr [rax + rax]


0x3486:	nop	word ptr cs:[rax + rax]


0x396a:	nop	word ptr [rax + rax]


0x3ad7:	nop	word ptr [rax + rax]


0x3cba:	nop	word ptr [rax + rax]


0x3ea1:	nop	word ptr cs:[rax + rax]
0x3eab:	nop	dword ptr [rax + rax]


0x3eb8:	nop	dword ptr [rax + rax]


0x3ec8:	nop	dword ptr [rax + rax]


0x3f74:	nop	word ptr cs:[rax + rax]
0x3f7e:	nop	


0x401f:	nop	


0x4107:	nop	word ptr [rax + rax]


0x41a3:	mov	byte ptr [rsp + 0xe], 1
0x41a8:	mov	byte ptr [rsp + 0x7c], 0
0x41ad:	xor	r12d, r12d
0x41b0:	mov	qword ptr [rsp + 0x50], 0
0x41b9:	mov	byte ptr [rsp + 0xf], 1
0x41be:	mov	byte ptr [rsp + 0xd], 0
0x41c3:	lea	rax, [rip + 0x29a7]
0x41ca:	mov	qword ptr [rsp + 0x18], 1
0x41d3:	xor	r15d, r15d
0x41d6:	mov	dword ptr [rsp + 8], 2
0x41de:	mov	qword ptr [rsp + 0x48], rax
0x41e3:	xor	r11d, r11d
0x41e6:	mov	rax, rbp
0x41e9:	mov	r8d, r12d
0x41ec:	mov	rbp, r11
0x41ef:	mov	r11, rax
0x41f2:	nop	word ptr [rax + rax]
0x41f8:	cmp	r11, rbp
0x41fb:	setne	r12b
0x41ff:	cmp	r11, -1
0x4203:	jne	0x4212


0x4205:	mov	rax, qword ptr [rsp + 0x10]
0x420a:	cmp	byte ptr [rax + rbp], 0
0x420e:	setne	r12b
0x4212:	test	r12b, r12b
0x4215:	je	0x4870


0x4212:	test	r12b, r12b
0x4215:	je	0x4870


0x4870:	cmp	dword ptr [rsp + 8], 2
0x4875:	movzx	ebx, byte ptr [rsp + 0xf]
0x487a:	mov	r12d, r8d
0x487d:	mov	rbp, r11
0x4880:	sete	dl
0x4883:	mov	eax, ebx
0x4885:	test	r15, r15
0x4888:	sete	cl
0x488b:	and	eax, edx
0x488d:	and	al, cl
0x488f:	jne	0x52f6


0x421b:	cmp	dword ptr [rsp + 8], 2
0x4220:	mov	rdi, qword ptr [rsp + 0x10]
0x4225:	lea	r9, [rdi + rbp]
0x4229:	setne	al
0x422c:	and	al, byte ptr [rsp + 0xd]
0x4230:	mov	r10d, eax
0x4233:	je	0x42e0


0x4895:	mov	eax, ebx
0x4897:	xor	eax, 1
0x489a:	and	dl, al
0x489c:	je	0x520c


0x52f6:	mov	dword ptr [rsp + 8], 2
0x52fe:	jmp	0x4c99


0x42e0:	movzx	ebx, byte ptr [r9]
0x42e4:	cmp	bl, 0x7e
0x42e7:	ja	0x4608


0x4239:	mov	rax, qword ptr [rsp + 0x18]
0x423e:	test	rax, rax
0x4241:	je	0x4670


0x520c:	mov	rbx, qword ptr [rsp + 0x48]
0x5211:	test	rbx, rbx
0x5214:	je	0x5242


0x48a2:	cmp	byte ptr [rsp + 0x7c], 0
0x48a7:	je	0x520a


0x4c99:	cmp	byte ptr [rsp + 0xd], 0
0x4c9e:	je	0x4cb0


0x42ed:	lea	rcx, [rip + 0x3518]
0x42f4:	movzx	edx, bl
0x42f7:	movsxd	rax, dword ptr [rcx + rdx*4]
0x42fb:	add	rax, rcx
0x42fe:	jmp	rax


0x4608:	cmp	qword ptr [rsp + 0x58], 1
0x460e:	jne	0x49b8


0x4670:	movzx	ebx, byte ptr [r9]
0x4674:	cmp	bl, 0x7e
0x4677:	ja	0x4600


0x4247:	cmp	r11, -1
0x424b:	lea	rbx, [rbp + rax]
0x4250:	jne	0x4280


0x5242:	cmp	r13, r15
0x5245:	jbe	0x4ce9


0x5216:	test	al, al
0x5218:	je	0x5242


0x520a:	mov	eax, edx
0x520c:	mov	rbx, qword ptr [rsp + 0x48]
0x5211:	test	rbx, rbx
0x5214:	je	0x5242


0x48ad:	cmp	byte ptr [rsp + 0xe], 0
0x48b2:	jne	0x52ad


0x4ca0:	test	al, al
0x4ca2:	mov	eax, 4
0x4ca7:	cmove	eax, dword ptr [rsp + 8]
0x4cac:	mov	dword ptr [rsp + 8], eax


0x4614:	mov	qword ptr [rsp + 0x38], r11
0x4619:	mov	byte ptr [rsp + 0x30], r8b
0x461e:	mov	byte ptr [rsp + 0x28], r10b
0x4623:	call	0x1c40


0x49b8:	lea	rax, [rsp + 0xa0]
0x49c0:	cmp	r11, -1
0x49c4:	mov	qword ptr [rsp + 0xa0], 0
0x49d0:	mov	qword ptr [rsp + 0x28], rax
0x49d5:	jne	0x4a04


0x4679:	lea	rcx, [rip + 0x3388]
0x4680:	movzx	edx, bl
0x4683:	movsxd	rax, dword ptr [rcx + rdx*4]
0x4687:	add	rax, rcx
0x468a:	jmp	rax


0x4600:	xor	r10d, r10d
0x4603:	nop	dword ptr [rax + rax]
0x4608:	cmp	qword ptr [rsp + 0x58], 1
0x460e:	jne	0x49b8


0x4252:	cmp	rax, 1
0x4256:	jbe	0x4280


0x4280:	cmp	rbx, r11
0x4283:	mov	byte ptr [rsp + 0x28], r10b
0x4288:	ja	0x4840


0x524b:	mov	byte ptr [r14 + r15], 0
0x5250:	jmp	0x4ce9


0x521a:	movzx	ecx, byte ptr [rbx]
0x521d:	mov	rax, rbx
0x5220:	test	cl, cl
0x5222:	je	0x5242


0x48b8:	test	r13, r13
0x48bb:	sete	al
0x48be:	cmp	qword ptr [rsp + 0x50], 0
0x48c4:	setne	dl
0x48c7:	and	al, dl
0x48c9:	je	0x52ec


0x49d7:	mov	rdi, qword ptr [rsp + 0x10]
0x49dc:	mov	byte ptr [rsp + 0x40], r8b
0x49e1:	mov	byte ptr [rsp + 0x38], r10b
0x49e6:	mov	qword ptr [rsp + 0x30], r9
0x49eb:	call	0x1980


0x4a04:	lea	rax, [rsp + 0x9c]
0x4a0c:	xor	ecx, ecx
0x4a0e:	mov	byte ptr [rsp + 0x7e], bl
0x4a12:	mov	byte ptr [rsp + 0x7d], r8b
0x4a17:	mov	rbx, rcx
0x4a1a:	mov	qword ptr [rsp + 0x88], r9
0x4a22:	mov	qword ptr [rsp + 0x38], rax
0x4a27:	mov	byte ptr [rsp + 0x7f], r10b
0x4a2c:	mov	qword ptr [rsp + 0x80], r15
0x4a34:	mov	qword ptr [rsp + 0x40], r14
0x4a39:	mov	qword ptr [rsp + 0x70], r13
0x4a3e:	mov	qword ptr [rsp + 0x30], r11
0x4a43:	mov	rax, qword ptr [rsp + 0x10]
0x4a48:	lea	r14, [rbp + rbx]
0x4a4d:	mov	rdx, qword ptr [rsp + 0x30]
0x4a52:	mov	rcx, qword ptr [rsp + 0x28]
0x4a57:	mov	rdi, qword ptr [rsp + 0x38]
0x4a5c:	lea	r13, [rax + r14]
0x4a60:	sub	rdx, r14
0x4a63:	mov	rsi, r13
0x4a66:	call	0x6560


0x4258:	mov	byte ptr [rsp + 0x38], r8b
0x425d:	mov	byte ptr [rsp + 0x30], r10b
0x4262:	mov	qword ptr [rsp + 0x28], r9
0x4267:	call	0x1980


0x428e:	mov	rdx, qword ptr [rsp + 0x18]
0x4293:	mov	rsi, qword ptr [rsp + 0x48]
0x4298:	mov	rdi, r9
0x429b:	mov	qword ptr [rsp + 0x40], r11
0x42a0:	mov	byte ptr [rsp + 0x38], r8b
0x42a5:	mov	qword ptr [rsp + 0x30], r9
0x42aa:	call	0x1a30


0x4840:	xor	r10d, r10d
0x4843:	jmp	0x42e0


0x5224:	mov	rdx, r15
0x5227:	sub	rax, r15
0x522a:	cmp	r13, rdx
0x522d:	jbe	0x5233


0x52ec:	movzx	eax, byte ptr [rsp + 0x7c]
0x52f1:	jmp	0x520c


0x48cf:	mov	r13, qword ptr [rsp + 0x50]
0x48d4:	lea	rbx, [rip + 0x2296]
0x48db:	mov	byte ptr [r14], 0x27
0x48df:	mov	dword ptr [rsp + 8], 2
0x48e7:	mov	r15d, 1
0x48ed:	mov	qword ptr [rsp + 0x18], 1
0x48f6:	mov	byte ptr [rsp + 0xf], 0
0x48fb:	mov	qword ptr [rsp + 0x48], rbx
0x4900:	mov	byte ptr [rsp + 0x7c], al
0x4904:	jmp	0x41e3


0x5233:	add	rdx, 1
0x5237:	movzx	ecx, byte ptr [rax + rdx]
0x523b:	test	cl, cl
0x523d:	jne	0x522a


0x522f:	mov	byte ptr [r14 + rdx], cl
0x5233:	add	rdx, 1
0x5237:	movzx	ecx, byte ptr [rax + rdx]
0x523b:	test	cl, cl
0x523d:	jne	0x522a


0x41e3:	xor	r11d, r11d
0x41e6:	mov	rax, rbp
0x41e9:	mov	r8d, r12d
0x41ec:	mov	rbp, r11
0x41ef:	mov	r11, rax
0x41f2:	nop	word ptr [rax + rax]
0x41f8:	cmp	r11, rbp
0x41fb:	setne	r12b
0x41ff:	cmp	r11, -1
0x4203:	jne	0x4212


0x523f:	mov	r15, rdx
0x5242:	cmp	r13, r15
0x5245:	jbe	0x4ce9


0x522a:	cmp	r13, rdx
0x522d:	jbe	0x5233


0x42af:	test	eax, eax
0x42b1:	mov	r9, qword ptr [rsp + 0x30]
0x42b6:	movzx	r8d, byte ptr [rsp + 0x38]
0x42bc:	mov	r11, qword ptr [rsp + 0x40]
0x42c1:	jne	0x4840


0x42c7:	cmp	byte ptr [rsp + 0xf], 0
0x42cc:	movzx	r10d, byte ptr [rsp + 0x28]
0x42d2:	jne	0x5255


0x5255:	cmp	dword ptr [rsp + 8], 2
0x525a:	movzx	ebx, byte ptr [rsp + 0xf]
0x525f:	mov	rbp, r11
0x5262:	sete	al
0x5265:	mov	byte ptr [rsp + 0xd], bl
0x5269:	jmp	0x4c99


0x4a6b:	test	rax, rax
0x4a6e:	mov	r15, rax
0x4a71:	je	0x4ac1


0x4ac1:	mov	edx, r12d
0x4ac4:	mov	rdi, rbx
0x4ac7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x4acd:	xor	edx, 1
0x4ad0:	movzx	ebx, byte ptr [rsp + 0x7e]
0x4ad5:	movzx	r10d, byte ptr [rsp + 0x7f]
0x4adb:	and	dl, byte ptr [rsp + 0xd]
0x4adf:	mov	r15, qword ptr [rsp + 0x80]
0x4ae7:	mov	r14, qword ptr [rsp + 0x40]
0x4aec:	mov	r13, qword ptr [rsp + 0x70]
0x4af1:	mov	r11, qword ptr [rsp + 0x30]
0x4af6:	cmp	rdi, 1
0x4afa:	jbe	0x50fb


0x4a73:	cmp	rax, -1
0x4a77:	je	0x5095


0x50fb:	mov	eax, edx
0x50fd:	jmp	0x4657


0x4b00:	mov	rcx, rdi
0x4b03:	xor	esi, esi
0x4b05:	movzx	r9d, byte ptr [rsp + 0xf]
0x4b0b:	add	rcx, rbp
0x4b0e:	mov	rdi, qword ptr [rsp + 0x10]
0x4b13:	jmp	0x4bce


0x5095:	mov	rdi, rbx
0x5098:	movzx	r8d, byte ptr [rsp + 0x7d]
0x509e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x50a3:	movzx	r10d, byte ptr [rsp + 0x7f]
0x50a9:	mov	r15, qword ptr [rsp + 0x80]
0x50b1:	xor	r12d, r12d
0x50b4:	mov	r14, qword ptr [rsp + 0x40]
0x50b9:	mov	r13, qword ptr [rsp + 0x70]
0x50be:	mov	r11, qword ptr [rsp + 0x30]
0x50c3:	movzx	edx, byte ptr [rsp + 0xd]
0x50c8:	jmp	0x4af6


0x4a7d:	cmp	rax, -2
0x4a81:	je	0x5021


0x4657:	test	al, al
0x4659:	jne	0x4ff1


0x4bce:	test	dl, dl
0x4bd0:	jne	0x4b20


0x4af6:	cmp	rdi, 1
0x4afa:	jbe	0x50fb


0x5021:	mov	r11, qword ptr [rsp + 0x30]
0x5026:	mov	rsi, r14
0x5029:	mov	rcx, r13
0x502c:	mov	rax, rbx
0x502f:	mov	rdi, rbx
0x5032:	movzx	r8d, byte ptr [rsp + 0x7d]
0x5038:	movzx	ebx, byte ptr [rsp + 0x7e]
0x503d:	mov	r9, qword ptr [rsp + 0x88]
0x5045:	cmp	rsi, r11
0x5048:	movzx	r10d, byte ptr [rsp + 0x7f]
0x504e:	mov	r15, qword ptr [rsp + 0x80]
0x5056:	mov	r14, qword ptr [rsp + 0x40]
0x505b:	mov	r13, qword ptr [rsp + 0x70]
0x5060:	jae	0x5088


0x4a87:	cmp	dword ptr [rsp + 8], 2
0x4a8c:	sete	al
0x4a8f:	and	al, byte ptr [rsp + 0xf]
0x4a93:	jne	0x4c30


0x465f:	cmp	dword ptr [rsp + 8], 2
0x4664:	sete	dl
0x4667:	jmp	0x4338


0x4ff1:	movzx	edx, byte ptr [rsp + 0xd]
0x4ff6:	xor	r12d, r12d
0x4ff9:	jmp	0x4b00


0x4bd6:	mov	eax, esi
0x4bd8:	xor	eax, 1
0x4bdb:	and	eax, r8d
0x4bde:	test	r10b, r10b
0x4be1:	je	0x4bf1


0x4b20:	cmp	dword ptr [rsp + 8], 2
0x4b25:	sete	al
0x4b28:	test	r9b, r9b
0x4b2b:	jne	0x4fe0


0x5062:	cmp	byte ptr [rcx], 0
0x5065:	jne	0x5077


0x5088:	movzx	edx, byte ptr [rsp + 0xd]
0x508d:	xor	r12d, r12d
0x5090:	jmp	0x4af6


0x4a99:	mov	edi, dword ptr [rsp + 0x9c]
0x4aa0:	call	0x1c20


0x4c30:	cmp	r15, 1
0x4c34:	je	0x4a99


0x4338:	cmp	byte ptr [rsp + 0xd], 1
0x433d:	jne	0x4452


0x4bf1:	add	rbp, 1
0x4bf5:	cmp	rbp, rcx
0x4bf8:	jae	0x437c


0x4be3:	cmp	r13, r15
0x4be6:	jbe	0x4bed


0x4b31:	mov	esi, r8d
0x4b34:	xor	esi, 1
0x4b37:	and	al, sil
0x4b3a:	je	0x4b6b


0x4fe0:	movzx	ebx, byte ptr [rsp + 0xf]
0x4fe5:	mov	rbp, r11
0x4fe8:	mov	byte ptr [rsp + 0xd], bl
0x4fec:	jmp	0x4c99


0x5067:	jmp	0x5088


0x5077:	add	rax, 1
0x507b:	lea	rdx, [rbp + rax]
0x5080:	cmp	r11, rdx
0x5083:	ja	0x5070


0x4c3a:	mov	rdi, qword ptr [rsp + 0x10]
0x4c3f:	lea	rcx, [rdi + r15]
0x4c43:	lea	rdx, [rdi + r14 + 1]
0x4c48:	lea	r8, [rcx + r14]
0x4c4c:	jmp	0x4c5d


0x4343:	test	dl, dl
0x4345:	jne	0x4452


0x4452:	cmp	byte ptr [rsp + 0xf], 0
0x4457:	jne	0x434b


0x4bfe:	test	al, al
0x4c00:	je	0x4ffe


0x437c:	test	al, al
0x437e:	je	0x43a0


0x4bed:	add	r15, 1
0x4bf1:	add	rbp, 1
0x4bf5:	cmp	rbp, rcx
0x4bf8:	jae	0x437c


0x4be8:	mov	byte ptr [r14 + r15], 0x5c
0x4bed:	add	r15, 1
0x4bf1:	add	rbp, 1
0x4bf5:	cmp	rbp, rcx
0x4bf8:	jae	0x437c


0x4b6b:	cmp	r13, r15
0x4b6e:	jbe	0x4b75


0x4b3c:	cmp	r13, r15
0x4b3f:	jbe	0x4b46


0x5085:	mov	rdi, rax
0x5088:	movzx	edx, byte ptr [rsp + 0xd]
0x508d:	xor	r12d, r12d
0x5090:	jmp	0x4af6


0x5070:	cmp	byte ptr [r9 + rax], 0
0x5075:	je	0x5085


0x4c5d:	movzx	ecx, byte ptr [rdx]
0x4c60:	sub	ecx, 0x5b
0x4c63:	cmp	cl, 0x21
0x4c66:	ja	0x4c50


0x434b:	mov	rsi, qword ptr [rsp + 0x20]
0x4350:	test	rsi, rsi
0x4353:	je	0x4369


0x445d:	jmp	0x4369


0x4ffe:	xor	r10d, r10d
0x5001:	jmp	0x4bbd


0x4c06:	cmp	r13, r15
0x4c09:	jbe	0x4c10


0x43a0:	cmp	r15, r13
0x43a3:	jae	0x43a9


0x4380:	cmp	r13, r15
0x4383:	jbe	0x438a


0x4b75:	lea	rax, [r15 + 1]
0x4b79:	cmp	r13, rax
0x4b7c:	jbe	0x4b8b


0x4b70:	mov	byte ptr [r14 + r15], 0x5c
0x4b75:	lea	rax, [r15 + 1]
0x4b79:	cmp	r13, rax
0x4b7c:	jbe	0x4b8b


0x4b46:	lea	rsi, [r15 + 1]
0x4b4a:	cmp	r13, rsi
0x4b4d:	jbe	0x4b55


0x4b41:	mov	byte ptr [r14 + r15], 0x27
0x4b46:	lea	rsi, [r15 + 1]
0x4b4a:	cmp	r13, rsi
0x4b4d:	jbe	0x4b55


0x4c68:	mov	esi, 1
0x4c6d:	shl	rsi, cl
0x4c70:	mov	rcx, rsi
0x4c73:	movabs	rsi, 0x20000002b
0x4c7d:	test	rcx, rsi
0x4c80:	je	0x4c50


0x4c50:	add	rdx, 1
0x4c54:	cmp	r8, rdx
0x4c57:	je	0x4a99


0x4369:	test	r10b, r10b
0x436c:	jne	0x44b3


0x4355:	mov	edx, ebx
0x4357:	shr	dl, 5
0x435a:	movzx	edx, dl
0x435d:	mov	edx, dword ptr [rsi + rdx*4]
0x4360:	bt	edx, ebx
0x4363:	jb	0x44b3


0x4bbd:	cmp	r13, r15
0x4bc0:	jbe	0x4bc6


0x4c10:	lea	rax, [r15 + 1]
0x4c14:	cmp	r13, rax
0x4c17:	jbe	0x4c1f


0x4c0b:	mov	byte ptr [r14 + r15], 0x27
0x4c10:	lea	rax, [r15 + 1]
0x4c14:	cmp	r13, rax
0x4c17:	jbe	0x4c1f


0x43a5:	mov	byte ptr [r14 + r15], bl
0x43a9:	movzx	edi, byte ptr [rsp + 0xe]
0x43ae:	add	r15, 1
0x43b2:	mov	eax, 0
0x43b7:	test	r12b, r12b
0x43ba:	cmove	edi, eax
0x43bd:	mov	byte ptr [rsp + 0xe], dil
0x43c2:	jmp	0x41f8


0x43a9:	movzx	edi, byte ptr [rsp + 0xe]
0x43ae:	add	r15, 1
0x43b2:	mov	eax, 0
0x43b7:	test	r12b, r12b
0x43ba:	cmove	edi, eax
0x43bd:	mov	byte ptr [rsp + 0xe], dil
0x43c2:	jmp	0x41f8


0x438a:	lea	rax, [r15 + 1]
0x438e:	cmp	r13, rax
0x4391:	jbe	0x4399


0x4385:	mov	byte ptr [r14 + r15], 0x27
0x438a:	lea	rax, [r15 + 1]
0x438e:	cmp	r13, rax
0x4391:	jbe	0x4399


0x4b8b:	lea	rax, [r15 + 2]
0x4b8f:	cmp	r13, rax
0x4b92:	jbe	0x4ba4


0x4b7e:	mov	eax, ebx
0x4b80:	shr	al, 6
0x4b83:	add	eax, 0x30
0x4b86:	mov	byte ptr [r14 + r15 + 1], al
0x4b8b:	lea	rax, [r15 + 2]
0x4b8f:	cmp	r13, rax
0x4b92:	jbe	0x4ba4


0x4b55:	lea	rsi, [r15 + 2]
0x4b59:	cmp	r13, rsi
0x4b5c:	jbe	0x4b64


0x4b4f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x4b55:	lea	rsi, [r15 + 2]
0x4b59:	cmp	r13, rsi
0x4b5c:	jbe	0x4b64


0x4c82:	mov	r14, qword ptr [rsp + 0x40]
0x4c87:	mov	r13, qword ptr [rsp + 0x70]
0x4c8c:	mov	rbp, qword ptr [rsp + 0x30]
0x4c91:	mov	dword ptr [rsp + 8], 2
0x4c99:	cmp	byte ptr [rsp + 0xd], 0
0x4c9e:	je	0x4cb0


0x4372:	xor	eax, 1
0x4375:	add	rbp, 1
0x4379:	and	eax, r8d
0x437c:	test	al, al
0x437e:	je	0x43a0


0x44b3:	cmp	dword ptr [rsp + 8], 2
0x44b8:	sete	dl
0x44bb:	cmp	byte ptr [rsp + 0xf], 0
0x44c0:	mov	eax, edx
0x44c2:	jne	0x4d18


0x4bc6:	movzx	ebx, byte ptr [rdi + rbp]
0x4bca:	add	r15, 1
0x4bce:	test	dl, dl
0x4bd0:	jne	0x4b20


0x4bc2:	mov	byte ptr [r14 + r15], bl
0x4bc6:	movzx	ebx, byte ptr [rdi + rbp]
0x4bca:	add	r15, 1
0x4bce:	test	dl, dl
0x4bd0:	jne	0x4b20


0x4c1f:	add	r15, 2
0x4c23:	xor	r10d, r10d
0x4c26:	xor	r8d, r8d
0x4c29:	jmp	0x4bbd


0x4c19:	mov	byte ptr [r14 + r15 + 1], 0x27
0x4c1f:	add	r15, 2
0x4c23:	xor	r10d, r10d
0x4c26:	xor	r8d, r8d
0x4c29:	jmp	0x4bbd


0x41f8:	cmp	r11, rbp
0x41fb:	setne	r12b
0x41ff:	cmp	r11, -1
0x4203:	jne	0x4212


0x4399:	add	r15, 2
0x439d:	xor	r8d, r8d
0x43a0:	cmp	r15, r13
0x43a3:	jae	0x43a9


0x4393:	mov	byte ptr [r14 + r15 + 1], 0x27
0x4399:	add	r15, 2
0x439d:	xor	r8d, r8d
0x43a0:	cmp	r15, r13
0x43a3:	jae	0x43a9


0x4ba4:	and	ebx, 7
0x4ba7:	add	rbp, 1
0x4bab:	add	r15, 3
0x4baf:	add	ebx, 0x30
0x4bb2:	cmp	rbp, rcx
0x4bb5:	jae	0x43a0


0x4b94:	mov	eax, ebx
0x4b96:	shr	al, 3
0x4b99:	and	eax, 7
0x4b9c:	add	eax, 0x30
0x4b9f:	mov	byte ptr [r14 + r15 + 2], al
0x4ba4:	and	ebx, 7
0x4ba7:	add	rbp, 1
0x4bab:	add	r15, 3
0x4baf:	add	ebx, 0x30
0x4bb2:	cmp	rbp, rcx
0x4bb5:	jae	0x43a0


0x4b64:	add	r15, 3
0x4b68:	mov	r8d, eax
0x4b6b:	cmp	r13, r15
0x4b6e:	jbe	0x4b75


0x4b5e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x4b64:	add	r15, 3
0x4b68:	mov	r8d, eax
0x4b6b:	cmp	r13, r15
0x4b6e:	jbe	0x4b75


0x44c8:	mov	eax, r8d
0x44cb:	xor	eax, 1
0x44ce:	and	al, dl
0x44d0:	je	0x4501


0x4d18:	mov	rbp, r11
0x4d1b:	jmp	0x4c99


0x4bbb:	mov	esi, edx
0x4bbd:	cmp	r13, r15
0x4bc0:	jbe	0x4bc6


0x4501:	cmp	r13, r15
0x4504:	jbe	0x450b


0x44d2:	cmp	r13, r15
0x44d5:	jbe	0x44dc


0x450b:	add	r15, 1
0x450f:	add	rbp, 1
0x4513:	jmp	0x43a0


0x4506:	mov	byte ptr [r14 + r15], 0x5c
0x450b:	add	r15, 1
0x450f:	add	rbp, 1
0x4513:	jmp	0x43a0


0x44dc:	lea	rdx, [r15 + 1]
0x44e0:	cmp	r13, rdx
0x44e3:	jbe	0x44eb


0x44d7:	mov	byte ptr [r14 + r15], 0x27
0x44dc:	lea	rdx, [r15 + 1]
0x44e0:	cmp	r13, rdx
0x44e3:	jbe	0x44eb


0x44eb:	lea	rdx, [r15 + 2]
0x44ef:	cmp	r13, rdx
0x44f2:	jbe	0x44fa


0x44e5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x44eb:	lea	rdx, [r15 + 2]
0x44ef:	cmp	r13, rdx
0x44f2:	jbe	0x44fa


0x44fa:	add	r15, 3
0x44fe:	mov	r8d, eax
0x4501:	cmp	r13, r15
0x4504:	jbe	0x450b


0x44f4:	mov	byte ptr [r14 + r15 + 2], 0x27
0x44fa:	add	r15, 3
0x44fe:	mov	r8d, eax
0x4501:	cmp	r13, r15
0x4504:	jbe	0x450b


0x4aa5:	mov	rdi, qword ptr [rsp + 0x28]
0x4aaa:	test	eax, eax
0x4aac:	mov	eax, 0
0x4ab1:	cmove	r12d, eax
0x4ab5:	add	rbx, r15
0x4ab8:	call	0x1c10


0x4abd:	test	eax, eax
0x4abf:	je	0x4a43


0x4a43:	mov	rax, qword ptr [rsp + 0x10]
0x4a48:	lea	r14, [rbp + rbx]
0x4a4d:	mov	rdx, qword ptr [rsp + 0x30]
0x4a52:	mov	rcx, qword ptr [rsp + 0x28]
0x4a57:	mov	rdi, qword ptr [rsp + 0x38]
0x4a5c:	lea	r13, [rax + r14]
0x4a60:	sub	rdx, r14
0x4a63:	mov	rsi, r13
0x4a66:	call	0x6560


0x426c:	movzx	r8d, byte ptr [rsp + 0x38]
0x4272:	movzx	r10d, byte ptr [rsp + 0x30]
0x4278:	mov	r11, rax
0x427b:	mov	r9, qword ptr [rsp + 0x28]
0x4280:	cmp	rbx, r11
0x4283:	mov	byte ptr [rsp + 0x28], r10b
0x4288:	ja	0x4840


0x49f0:	movzx	r8d, byte ptr [rsp + 0x40]
0x49f6:	movzx	r10d, byte ptr [rsp + 0x38]
0x49fc:	mov	r11, rax
0x49ff:	mov	r9, qword ptr [rsp + 0x30]
0x4a04:	lea	rax, [rsp + 0x9c]
0x4a0c:	xor	ecx, ecx
0x4a0e:	mov	byte ptr [rsp + 0x7e], bl
0x4a12:	mov	byte ptr [rsp + 0x7d], r8b
0x4a17:	mov	rbx, rcx
0x4a1a:	mov	qword ptr [rsp + 0x88], r9
0x4a22:	mov	qword ptr [rsp + 0x38], rax
0x4a27:	mov	byte ptr [rsp + 0x7f], r10b
0x4a2c:	mov	qword ptr [rsp + 0x80], r15
0x4a34:	mov	qword ptr [rsp + 0x40], r14
0x4a39:	mov	qword ptr [rsp + 0x70], r13
0x4a3e:	mov	qword ptr [rsp + 0x30], r11
0x4a43:	mov	rax, qword ptr [rsp + 0x10]
0x4a48:	lea	r14, [rbp + rbx]
0x4a4d:	mov	rdx, qword ptr [rsp + 0x30]
0x4a52:	mov	rcx, qword ptr [rsp + 0x28]
0x4a57:	mov	rdi, qword ptr [rsp + 0x38]
0x4a5c:	lea	r13, [rax + r14]
0x4a60:	sub	rdx, r14
0x4a63:	mov	rsi, r13
0x4a66:	call	0x6560


0x4628:	mov	rcx, qword ptr [rax]
0x462b:	movzx	edx, bl
0x462e:	movzx	r10d, byte ptr [rsp + 0x28]
0x4634:	movzx	r8d, byte ptr [rsp + 0x30]
0x463a:	mov	r11, qword ptr [rsp + 0x38]
0x463f:	mov	edi, 1
0x4644:	movzx	eax, word ptr [rcx + rdx*2]
0x4648:	and	ax, 0x4000
0x464c:	setne	r12b
0x4650:	sete	al
0x4653:	and	al, byte ptr [rsp + 0xd]
0x4657:	test	al, al
0x4659:	jne	0x4ff1


0x4300:	xor	r10d, r10d
0x4303:	cmp	r11, 1
0x4307:	setne	al
0x430a:	cmp	r11, -1
0x430e:	jne	0x431c


0x4310:	mov	rax, qword ptr [rsp + 0x10]
0x4315:	cmp	byte ptr [rax + 1], 0
0x4319:	setne	al
0x431c:	cmp	dword ptr [rsp + 8], 2
0x4321:	sete	dl
0x4324:	test	al, al
0x4326:	je	0x4578


0x431c:	cmp	dword ptr [rsp + 8], 2
0x4321:	sete	dl
0x4324:	test	al, al
0x4326:	je	0x4578


0x4578:	test	rbp, rbp
0x457b:	jne	0x432c


0x432c:	xor	r12d, r12d
0x432f:	xor	eax, eax
0x4331:	nop	dword ptr [rax]
0x4338:	cmp	byte ptr [rsp + 0xd], 1
0x433d:	jne	0x4452


0x4581:	movzx	eax, byte ptr [rsp + 0xf]
0x4586:	and	al, dl
0x4588:	je	0x4338


0x458e:	mov	rbp, r11
0x4591:	mov	dword ptr [rsp + 8], 2
0x4599:	jmp	0x4c99


0x4998:	cmp	byte ptr [rsp + 0xf], 0
0x499d:	jne	0x51c0


0x43e0:	cmp	eax, 5
0x43e3:	je	0x4958


0x49a3:	xor	r12d, r12d
0x49a6:	xor	eax, eax
0x49a8:	mov	ebx, 0x3f
0x49ad:	jmp	0x4369


0x51c0:	mov	rbp, r11
0x51c3:	movzx	eax, byte ptr [rsp + 0xf]
0x51c8:	jmp	0x4c99


0x4958:	test	byte ptr [rsp + 0x78], 4
0x495d:	je	0x4980


0x43e9:	cmp	eax, 2
0x43ec:	mov	ebx, 0x3f
0x43f1:	sete	dl
0x43f4:	xor	r12d, r12d
0x43f7:	xor	eax, eax
0x43f9:	jmp	0x4338


0x4980:	xor	edx, edx
0x4982:	xor	r12d, r12d
0x4985:	xor	eax, eax
0x4987:	mov	ebx, 0x3f
0x498c:	jmp	0x4338


0x495f:	lea	rcx, [rbp + 2]
0x4963:	cmp	rcx, r11
0x4966:	jae	0x4980


0x4968:	mov	rax, qword ptr [rsp + 0x10]
0x496d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x4972:	je	0x5102


0x5102:	movzx	ebx, byte ptr [rax + rcx]
0x5106:	cmp	bl, 0x3e
0x5109:	ja	0x4980


0x510f:	movabs	rax, 0x7000a38200000000
0x5119:	bt	rax, rbx
0x511d:	jae	0x4980


0x5123:	cmp	byte ptr [rsp + 0xf], 0
0x5128:	jne	0x5312


0x512e:	cmp	r13, r15
0x5131:	jbe	0x5138


0x5312:	mov	rbp, r11
0x5315:	jmp	0x4cb0


0x5138:	lea	rax, [r15 + 1]
0x513c:	cmp	r13, rax
0x513f:	jbe	0x5147


0x5133:	mov	byte ptr [r14 + r15], 0x3f
0x5138:	lea	rax, [r15 + 1]
0x513c:	cmp	r13, rax
0x513f:	jbe	0x5147


0x5147:	lea	rax, [r15 + 2]
0x514b:	cmp	r13, rax
0x514e:	jbe	0x5156


0x5141:	mov	byte ptr [r14 + r15 + 1], 0x22
0x5147:	lea	rax, [r15 + 2]
0x514b:	cmp	r13, rax
0x514e:	jbe	0x5156


0x5156:	lea	rax, [r15 + 3]
0x515a:	cmp	r13, rax
0x515d:	jbe	0x5165


0x5150:	mov	byte ptr [r14 + r15 + 2], 0x22
0x5156:	lea	rax, [r15 + 3]
0x515a:	cmp	r13, rax
0x515d:	jbe	0x5165


0x5165:	add	r15, 4
0x5169:	xor	edx, edx
0x516b:	xor	r12d, r12d
0x516e:	xor	eax, eax
0x5170:	mov	rbp, rcx
0x5173:	jmp	0x4338


0x515f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x5165:	add	r15, 4
0x5169:	xor	edx, edx
0x516b:	xor	r12d, r12d
0x516e:	xor	eax, eax
0x5170:	mov	rbp, rcx
0x5173:	jmp	0x4338


0x4910:	cmp	byte ptr [rsp + 0xf], 0
0x4915:	jne	0x51c0


0x440e:	mov	byte ptr [rsp + 0x7c], r12b
0x4413:	xor	edx, edx
0x4415:	xor	eax, eax
0x4417:	mov	ebx, 0x27
0x441c:	jmp	0x4338


0x491b:	test	r13, r13
0x491e:	je	0x4d20


0x4d20:	cmp	r13, r15
0x4d23:	jbe	0x4d2a


0x4924:	xor	edx, edx
0x4926:	cmp	qword ptr [rsp + 0x50], 0
0x492c:	jne	0x4d20


0x4d2a:	lea	rax, [r15 + 1]
0x4d2e:	cmp	r13, rax
0x4d31:	jbe	0x4d39


0x4d25:	mov	byte ptr [r14 + r15], 0x27
0x4d2a:	lea	rax, [r15 + 1]
0x4d2e:	cmp	r13, rax
0x4d31:	jbe	0x4d39


0x4932:	mov	qword ptr [rsp + 0x50], r13
0x4937:	add	r15, 3
0x493b:	xor	eax, eax
0x493d:	mov	byte ptr [rsp + 0x7c], r12b
0x4942:	xor	r8d, r8d
0x4945:	mov	r13, rdx
0x4948:	mov	ebx, 0x27
0x494d:	jmp	0x4369


0x4d39:	lea	rax, [r15 + 2]
0x4d3d:	cmp	r13, rax
0x4d40:	jbe	0x5332


0x4d33:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x4d39:	lea	rax, [r15 + 2]
0x4d3d:	cmp	r13, rax
0x4d40:	jbe	0x5332


0x5332:	mov	rdx, r13
0x5335:	mov	r13, qword ptr [rsp + 0x50]
0x533a:	jmp	0x4932


0x4d46:	mov	rdx, r13
0x4d49:	mov	byte ptr [r14 + r15 + 2], 0x27
0x4d4f:	mov	r13, qword ptr [rsp + 0x50]
0x4d54:	jmp	0x4932


0x4444:	cmp	byte ptr [rsp + 0xd], 0
0x4449:	jne	0x44b0


0x444b:	mov	ebx, edx
0x444d:	xor	r12d, r12d
0x4450:	xor	eax, eax
0x4452:	cmp	byte ptr [rsp + 0xf], 0
0x4457:	jne	0x434b


0x44b0:	xor	r12d, r12d
0x44b3:	cmp	dword ptr [rsp + 8], 2
0x44b8:	sete	dl
0x44bb:	cmp	byte ptr [rsp + 0xf], 0
0x44c0:	mov	eax, edx
0x44c2:	jne	0x4d18


0x4850:	cmp	byte ptr [rsp + 0xf], 0
0x4855:	jne	0x51c0


0x4483:	cmp	byte ptr [rsp + 0xd], 0
0x4488:	je	0x46a0


0x485b:	add	rbp, 1
0x485f:	mov	eax, r8d
0x4862:	xor	r12d, r12d
0x4865:	mov	ebx, 0x5c
0x486a:	jmp	0x437c


0x46a0:	mov	edx, 0x5c
0x46a5:	mov	ebx, 0x5c
0x46aa:	jmp	0x4444


0x448e:	cmp	byte ptr [rsp + 0xf], 0
0x4493:	je	0x46a0


0x4499:	cmp	qword ptr [rsp + 0x18], 0
0x449f:	jne	0x485b


0x44a5:	mov	ebx, 0x5c
0x44aa:	nop	word ptr [rax + rax]
0x44b0:	xor	r12d, r12d
0x44b3:	cmp	dword ptr [rsp + 8], 2
0x44b8:	sete	dl
0x44bb:	cmp	byte ptr [rsp + 0xf], 0
0x44c0:	mov	eax, edx
0x44c2:	jne	0x4d18


0x452b:	xor	edx, edx
0x452d:	test	byte ptr [rsp + 0x78], 1
0x4532:	je	0x444b


0x46f3:	cmp	dword ptr [rsp + 8], 2
0x46f8:	sete	dl
0x46fb:	cmp	byte ptr [rsp + 0xf], 0
0x4700:	jne	0x529a


0x4538:	add	rbp, 1
0x453c:	jmp	0x41f8


0x4706:	mov	eax, r8d
0x4709:	mov	rcx, r15
0x470c:	xor	eax, 1
0x470f:	and	al, dl
0x4711:	je	0x4740


0x529a:	movzx	ebx, byte ptr [rsp + 0xf]
0x529f:	mov	rbp, r11
0x52a2:	mov	eax, edx
0x52a4:	mov	byte ptr [rsp + 0xd], bl
0x52a8:	jmp	0x4c99


0x4740:	cmp	r13, rcx
0x4743:	jbe	0x474a


0x4713:	cmp	r13, r15
0x4716:	jbe	0x471d


0x474a:	cmp	dword ptr [rsp + 8], 2
0x474f:	lea	r15, [rcx + 1]
0x4753:	je	0x4d59


0x4745:	mov	byte ptr [r14 + rcx], 0x5c
0x474a:	cmp	dword ptr [rsp + 8], 2
0x474f:	lea	r15, [rcx + 1]
0x4753:	je	0x4d59


0x471d:	lea	rcx, [r15 + 1]
0x4721:	cmp	r13, rcx
0x4724:	jbe	0x472c


0x4718:	mov	byte ptr [r14 + r15], 0x27
0x471d:	lea	rcx, [r15 + 1]
0x4721:	cmp	r13, rcx
0x4724:	jbe	0x472c


0x4d59:	mov	eax, r12d
0x4d5c:	mov	ebx, 0x30
0x4d61:	xor	r12d, r12d
0x4d64:	jmp	0x4369


0x4759:	lea	rax, [rbp + 1]
0x475d:	cmp	rax, r11
0x4760:	jae	0x477b


0x472c:	lea	rcx, [r15 + 2]
0x4730:	cmp	r13, rcx
0x4733:	ja	0x4d69


0x4726:	mov	byte ptr [r14 + r15 + 1], 0x24
0x472c:	lea	rcx, [r15 + 2]
0x4730:	cmp	r13, rcx
0x4733:	ja	0x4d69


0x4762:	mov	rax, qword ptr [rsp + 0x10]
0x4767:	movzx	eax, byte ptr [rax + rbp + 1]
0x476c:	mov	byte ptr [rsp + 0x28], al
0x4770:	sub	eax, 0x30
0x4773:	cmp	al, 9
0x4775:	jbe	0x4fa9


0x477b:	mov	eax, r12d
0x477e:	mov	ebx, 0x30
0x4783:	xor	r12d, r12d
0x4786:	jmp	0x4338


0x4739:	lea	rcx, [r15 + 3]
0x473d:	mov	r8d, eax
0x4740:	cmp	r13, rcx
0x4743:	jbe	0x474a


0x4d69:	mov	byte ptr [r14 + r15 + 2], 0x27
0x4d6f:	jmp	0x4739


0x4fa9:	cmp	r13, r15
0x4fac:	jbe	0x4fb3


0x4fb3:	lea	rax, [rcx + 2]
0x4fb7:	cmp	r13, rax
0x4fba:	jbe	0x4fc2


0x4fae:	mov	byte ptr [r14 + r15], 0x30
0x4fb3:	lea	rax, [rcx + 2]
0x4fb7:	cmp	r13, rax
0x4fba:	jbe	0x4fc2


0x4fc2:	mov	eax, r12d
0x4fc5:	lea	r15, [rcx + 3]
0x4fc9:	xor	r12d, r12d
0x4fcc:	mov	ebx, 0x30
0x4fd1:	jmp	0x4338


0x4fbc:	mov	byte ptr [r14 + rcx + 2], 0x30
0x4fc2:	mov	eax, r12d
0x4fc5:	lea	r15, [rcx + 3]
0x4fc9:	xor	r12d, r12d
0x4fcc:	mov	ebx, 0x30
0x4fd1:	jmp	0x4338


0x4432:	cmp	dword ptr [rsp + 8], 2
0x4437:	sete	al
0x443a:	and	al, byte ptr [rsp + 0xf]
0x443e:	jne	0x458e


0x47f0:	mov	edx, 0xd
0x47f5:	xor	r10d, r10d
0x47f8:	mov	ebx, 0x72
0x47fd:	jmp	0x4432


0x4d74:	test	ebx, ebx
0x4d76:	jne	0x41a3


0x4d7c:	mov	byte ptr [rsp + 0xd], 1
0x4d81:	test	r13, r13
0x4d84:	jne	0x531a


0x4d8a:	lea	rax, [rip + 0x1de0]
0x4d91:	mov	qword ptr [rsp + 0x50], 0
0x4d9a:	mov	byte ptr [rsp + 0xe], 1
0x4d9f:	mov	byte ptr [rsp + 0x7c], 0
0x4da4:	xor	r12d, r12d
0x4da7:	mov	byte ptr [rsp + 0xf], 0
0x4dac:	mov	qword ptr [rsp + 0x18], 1
0x4db5:	mov	qword ptr [rsp + 0x48], rax
0x4dba:	mov	r15d, 1
0x4dc0:	mov	dword ptr [rsp + 8], 2
0x4dc8:	jmp	0x41e3


0x531a:	mov	byte ptr [rsp + 0xe], 1
0x531f:	xor	eax, eax
0x5321:	xor	r12d, r12d
0x5324:	mov	qword ptr [rsp + 0x50], 0
0x532d:	jmp	0x48d4


0x48d4:	lea	rbx, [rip + 0x2296]
0x48db:	mov	byte ptr [r14], 0x27
0x48df:	mov	dword ptr [rsp + 8], 2
0x48e7:	mov	r15d, 1
0x48ed:	mov	qword ptr [rsp + 0x18], 1
0x48f6:	mov	byte ptr [rsp + 0xf], 0
0x48fb:	mov	qword ptr [rsp + 0x48], rbx
0x4900:	mov	byte ptr [rsp + 0x7c], al
0x4904:	jmp	0x41e3


0x4dd8:	test	r13, r13
0x4ddb:	je	0x5006


0x51cd:	lea	rax, [rip + 0x25b7]
0x51d4:	mov	byte ptr [rsp + 0xe], 1
0x51d9:	mov	byte ptr [rsp + 0x7c], 0
0x51de:	xor	r12d, r12d
0x51e1:	mov	qword ptr [rsp + 0x50], 0
0x51ea:	mov	byte ptr [rsp + 0xf], 1
0x51ef:	mov	byte ptr [rsp + 0xd], 1
0x51f4:	mov	qword ptr [rsp + 0x18], 1
0x51fd:	xor	r15d, r15d
0x5200:	mov	qword ptr [rsp + 0x48], rax
0x5205:	jmp	0x41e3


0x5006:	mov	qword ptr [rsp + 0x50], 0
0x500f:	mov	byte ptr [rsp + 0xe], 1
0x5014:	xor	r12d, r12d
0x5017:	mov	byte ptr [rsp + 0x7c], 0
0x501c:	jmp	0x4dfb


0x4de1:	mov	byte ptr [r14], 0x22
0x4de5:	mov	byte ptr [rsp + 0xe], 1
0x4dea:	xor	r12d, r12d
0x4ded:	mov	byte ptr [rsp + 0x7c], 0
0x4df2:	mov	qword ptr [rsp + 0x50], 0
0x4dfb:	lea	rax, [rip + 0x2989]
0x4e02:	mov	byte ptr [rsp + 0xf], 0
0x4e07:	mov	byte ptr [rsp + 0xd], 1
0x4e0c:	mov	qword ptr [rsp + 0x18], 1
0x4e15:	mov	r15d, 1
0x4e1b:	mov	qword ptr [rsp + 0x48], rax
0x4e20:	jmp	0x41e3


0x4dfb:	lea	rax, [rip + 0x2989]
0x4e02:	mov	byte ptr [rsp + 0xf], 0
0x4e07:	mov	byte ptr [rsp + 0xd], 1
0x4e0c:	mov	qword ptr [rsp + 0x18], 1
0x4e15:	mov	r15d, 1
0x4e1b:	mov	qword ptr [rsp + 0x48], rax
0x4e20:	jmp	0x41e3


0x4e25:	lea	rax, [rip + 0x295f]
0x4e2c:	mov	byte ptr [rsp + 0xe], 1
0x4e31:	mov	byte ptr [rsp + 0x7c], 0
0x4e36:	xor	r12d, r12d
0x4e39:	mov	qword ptr [rsp + 0x50], 0
0x4e42:	mov	byte ptr [rsp + 0xf], 1
0x4e47:	mov	byte ptr [rsp + 0xd], 1
0x4e4c:	mov	qword ptr [rsp + 0x18], 1
0x4e55:	xor	r15d, r15d
0x4e58:	mov	qword ptr [rsp + 0x48], rax
0x4e5d:	mov	dword ptr [rsp + 8], 5
0x4e65:	jmp	0x41e3


0x4e6a:	mov	byte ptr [rsp + 0xe], 1
0x4e6f:	mov	byte ptr [rsp + 0x7c], 0
0x4e74:	xor	r12d, r12d
0x4e77:	mov	qword ptr [rsp + 0x50], 0
0x4e80:	mov	byte ptr [rsp + 0xf], 0
0x4e85:	xor	r15d, r15d
0x4e88:	mov	byte ptr [rsp + 0xd], 1
0x4e8d:	mov	qword ptr [rsp + 0x18], 0
0x4e96:	mov	qword ptr [rsp + 0x48], 0
0x4e9f:	jmp	0x41e3


0x4ea4:	cmp	dword ptr [rsp + 8], 0xa
0x4ea9:	je	0x4f01


0x4f01:	xor	r15d, r15d
0x4f04:	test	ebx, ebx
0x4f06:	je	0x50cd


0x4eab:	lea	rsi, [rip + 0x28db]
0x4eb2:	xor	edi, edi
0x4eb4:	mov	edx, 5
0x4eb9:	call	0x1960


0x50cd:	mov	rdx, qword ptr [rsp + 0x68]
0x50d2:	movzx	eax, byte ptr [rdx]
0x50d5:	test	al, al
0x50d7:	je	0x4f0c


0x4f0c:	test	ebx, ebx
0x4f0e:	mov	rbx, qword ptr [rsp + 0x60]
0x4f13:	setne	byte ptr [rsp + 0xf]
0x4f18:	xor	r12d, r12d
0x4f1b:	mov	rdi, rbx
0x4f1e:	call	0x1980


0x50e9:	add	r15, 1
0x50ed:	movzx	eax, byte ptr [rdx + r15]
0x50f2:	test	al, al
0x50f4:	jne	0x50e0


0x50e5:	mov	byte ptr [r14 + r15], al
0x50e9:	add	r15, 1
0x50ed:	movzx	eax, byte ptr [rdx + r15]
0x50f2:	test	al, al
0x50f4:	jne	0x50e0


0x50f6:	jmp	0x4f0c


0x50e0:	cmp	r13, r15
0x50e3:	jbe	0x50e9


0x4f23:	mov	qword ptr [rsp + 0x48], rbx
0x4f28:	mov	qword ptr [rsp + 0x18], rax
0x4f2d:	mov	byte ptr [rsp + 0xe], 1
0x4f32:	mov	byte ptr [rsp + 0x7c], 0
0x4f37:	mov	qword ptr [rsp + 0x50], 0
0x4f40:	mov	byte ptr [rsp + 0xd], 1
0x4f45:	jmp	0x41e3


0x4ebe:	mov	rcx, rax
0x4ec1:	mov	qword ptr [rsp + 0x68], rax
0x4ec6:	lea	rax, [rip + 0x28c0]
0x4ecd:	cmp	rcx, rax
0x4ed0:	je	0x526e


0x526e:	mov	esi, dword ptr [rsp + 8]
0x5272:	mov	rdi, rcx
0x5275:	call	0x4020


0x4ed6:	lea	rsi, [rip + 0x1c94]
0x4edd:	xor	edi, edi
0x4edf:	mov	edx, 5
0x4ee4:	call	0x1960


0x4ee9:	mov	rcx, rax
0x4eec:	mov	qword ptr [rsp + 0x60], rax
0x4ef1:	lea	rax, [rip + 0x1c79]
0x4ef8:	cmp	rcx, rax
0x4efb:	je	0x5284


0x5284:	mov	esi, dword ptr [rsp + 8]
0x5288:	mov	rdi, rcx
0x528b:	call	0x4020


0x5290:	mov	qword ptr [rsp + 0x60], rax
0x5295:	jmp	0x4f01


0x527a:	mov	qword ptr [rsp + 0x68], rax
0x527f:	jmp	0x4ed6


0x4f4a:	mov	byte ptr [rsp + 0xe], 1
0x4f4f:	mov	byte ptr [rsp + 0x7c], 0
0x4f54:	xor	r12d, r12d
0x4f57:	mov	qword ptr [rsp + 0x50], 0
0x4f60:	mov	byte ptr [rsp + 0xf], 0
0x4f65:	xor	r15d, r15d
0x4f68:	mov	byte ptr [rsp + 0xd], 0
0x4f6d:	mov	qword ptr [rsp + 0x18], 0
0x4f76:	mov	qword ptr [rsp + 0x48], 0
0x4f7f:	jmp	0x41e3


0x4f84:	mov	byte ptr [rsp + 0xe], 1
0x4f89:	mov	byte ptr [rsp + 0x7c], 0
0x4f8e:	xor	r12d, r12d
0x4f91:	mov	qword ptr [rsp + 0x50], 0
0x4f9a:	mov	byte ptr [rsp + 0xf], 1
0x4f9f:	mov	byte ptr [rsp + 0xd], 1
0x4fa4:	jmp	0x41c3


0x41c3:	lea	rax, [rip + 0x29a7]
0x41ca:	mov	qword ptr [rsp + 0x18], 1
0x41d3:	xor	r15d, r15d
0x41d6:	mov	dword ptr [rsp + 8], 2
0x41de:	mov	qword ptr [rsp + 0x48], rax
0x41e3:	xor	r11d, r11d
0x41e6:	mov	rax, rbp
0x41e9:	mov	r8d, r12d
0x41ec:	mov	rbp, r11
0x41ef:	mov	r11, rax
0x41f2:	nop	word ptr [rax + rax]
0x41f8:	cmp	r11, rbp
0x41fb:	setne	r12b
0x41ff:	cmp	r11, -1
0x4203:	jne	0x4212


0x5178:	test	ebx, ebx
0x517a:	je	0x5308


0x5308:	mov	byte ptr [rsp + 0xd], 0
0x530d:	jmp	0x4d81


0x5180:	lea	rax, [rip + 0x19ea]
0x5187:	mov	byte ptr [rsp + 0xe], 1
0x518c:	mov	byte ptr [rsp + 0x7c], 0
0x5191:	xor	r12d, r12d
0x5194:	mov	qword ptr [rsp + 0x50], 0
0x519d:	mov	byte ptr [rsp + 0xf], 1
0x51a2:	mov	byte ptr [rsp + 0xd], 0
0x51a7:	mov	qword ptr [rsp + 0x18], 1
0x51b0:	xor	r15d, r15d
0x51b3:	mov	qword ptr [rsp + 0x48], rax
0x51b8:	jmp	0x41e3


0x4d81:	test	r13, r13
0x4d84:	jne	0x531a


0x5344:	nop	
0x5346:	nop	word ptr cs:[rax + rax]


0x54fb:	nop	dword ptr [rax + rax]


0x5536:	nop	word ptr cs:[rax + rax]


0x5551:	nop	dword ptr [rax + rax]
0x5556:	nop	word ptr cs:[rax + rax]


0x5571:	nop	dword ptr [rax + rax]
0x5576:	nop	word ptr cs:[rax + rax]


0x55b5:	nop	
0x55b6:	nop	word ptr cs:[rax + rax]


0x55d5:	nop	
0x55d6:	nop	word ptr cs:[rax + rax]


0x5684:	nop	
0x5686:	nop	word ptr cs:[rax + rax]


0x5773:	nop	dword ptr [rax]
0x5776:	nop	word ptr cs:[rax + rax]


0x578a:	nop	word ptr [rax + rax]


0x5823:	nop	dword ptr [rax]
0x5826:	nop	word ptr cs:[rax + rax]


0x5843:	nop	dword ptr [rax]
0x5846:	nop	word ptr cs:[rax + rax]


0x585c:	nop	dword ptr [rax]


0x5878:	nop	dword ptr [rax + rax]


0x5894:	nop	
0x5896:	nop	word ptr cs:[rax + rax]


0x592e:	nop	


0x59ba:	nop	word ptr [rax + rax]


0x59cc:	nop	dword ptr [rax]


0x59df:	nop	


0x5a78:	nop	dword ptr [rax + rax]


0x5aa1:	nop	dword ptr [rax + rax]
0x5aa6:	nop	word ptr cs:[rax + rax]


0x5aba:	nop	word ptr [rax + rax]


0x5b4e:	nop	


0x5be1:	nop	dword ptr [rax + rax]
0x5be6:	nop	word ptr cs:[rax + rax]


0x5bfc:	nop	dword ptr [rax]


0x5c17:	nop	word ptr [rax + rax]


0x5c33:	nop	dword ptr [rax]
0x5c36:	nop	word ptr cs:[rax + rax]


0x5c4c:	nop	dword ptr [rax]


0x5c64:	nop	
0x5c66:	nop	word ptr cs:[rax + rax]


0x5c83:	nop	dword ptr [rax]
0x5c86:	nop	word ptr cs:[rax + rax]


0x5ca8:	nop	dword ptr [rax + rax]


0x60c7:	nop	word ptr [rax + rax]


0x6168:	nop	dword ptr [rax + rax]


0x6245:	nop	
0x6246:	nop	word ptr cs:[rax + rax]


0x62ea:	nop	word ptr [rax + rax]


0x6314:	nop	
0x6316:	nop	word ptr cs:[rax + rax]


0x6322:	nop	dword ptr [rax]
0x6326:	nop	word ptr cs:[rax + rax]


0x6366:	nop	word ptr cs:[rax + rax]


0x6394:	nop	
0x6396:	nop	word ptr cs:[rax + rax]


0x6422:	nop	dword ptr [rax]
0x6426:	nop	word ptr cs:[rax + rax]


0x647a:	nop	word ptr [rax + rax]


0x6497:	nop	word ptr [rax + rax]


0x64ce:	nop	


0x64f8:	nop	dword ptr [rax + rax]


0x6513:	nop	word ptr cs:[rax + rax]
0x651d:	nop	dword ptr [rax]


0x6555:	nop	word ptr cs:[rax + rax]
0x655f:	nop	


0x65e3:	nop	word ptr cs:[rax + rax]
0x65ed:	nop	dword ptr [rax]


0x6775:	nop	
0x6776:	nop	word ptr cs:[rax + rax]


0x685b:	nop	dword ptr [rax + rax]


0x68dd:	nop	dword ptr [rax]


0x697c:	nop	dword ptr [rax]


0x69fb:	nop	dword ptr [rax + rax]


0x6a97:	nop	word ptr [rax + rax]


0x6b05:	nop	
0x6b06:	nop	word ptr cs:[rax + rax]


0x6b12:	nop	word ptr cs:[rax + rax]
0x6b1c:	nop	dword ptr [rax]


0x43d0:	xor	r10d, r10d
0x43d3:	mov	eax, dword ptr [rsp + 8]
0x43d7:	cmp	eax, 2
0x43da:	je	0x4998


0x4400:	xor	r10d, r10d
0x4403:	cmp	dword ptr [rsp + 8], 2
0x4408:	je	0x4910


0x4428:	mov	edx, 9
0x442d:	mov	ebx, 0x74
0x4432:	cmp	dword ptr [rsp + 8], 2
0x4437:	sete	al
0x443a:	and	al, byte ptr [rsp + 0xf]
0x443e:	jne	0x458e


0x4468:	mov	edx, 8
0x446d:	mov	ebx, 0x62
0x4472:	jmp	0x4444


0x4478:	cmp	dword ptr [rsp + 8], 2
0x447d:	je	0x4850


0x4520:	cmp	byte ptr [rsp + 0xd], 0
0x4525:	jne	0x46f3


0x4548:	cmp	dword ptr [rsp + 8], 2
0x454d:	sete	dl
0x4550:	xor	eax, eax
0x4552:	jmp	0x4338


0x4560:	mov	edx, 7
0x4565:	mov	ebx, 0x61
0x456a:	jmp	0x4444


0x4570:	cmp	dword ptr [rsp + 8], 2
0x4575:	sete	dl
0x4578:	test	rbp, rbp
0x457b:	jne	0x432c


0x45a0:	cmp	dword ptr [rsp + 8], 2
0x45a5:	sete	dl
0x45a8:	xor	r12d, r12d
0x45ab:	jmp	0x4581


0x45b0:	cmp	dword ptr [rsp + 8], 2
0x45b5:	mov	ebx, 0x20
0x45ba:	sete	dl
0x45bd:	jmp	0x4581


0x45c0:	mov	edx, 0xd
0x45c5:	mov	ebx, 0x72
0x45ca:	jmp	0x4432


0x45d0:	mov	edx, 0xc
0x45d5:	mov	ebx, 0x66
0x45da:	jmp	0x4444


0x45e0:	mov	edx, 0xb
0x45e5:	mov	ebx, 0x76
0x45ea:	jmp	0x4444


0x45f0:	mov	edx, 0xa
0x45f5:	mov	ebx, 0x6e
0x45fa:	jmp	0x4432


0x4690:	xor	r10d, r10d
0x4693:	cmp	byte ptr [rsp + 0xd], 0
0x4698:	jne	0x448e


0x46b0:	mov	edx, 0xc
0x46b5:	xor	r10d, r10d
0x46b8:	mov	ebx, 0x66
0x46bd:	jmp	0x4444


0x46c8:	mov	edx, 0xa
0x46cd:	xor	r10d, r10d
0x46d0:	mov	ebx, 0x6e
0x46d5:	jmp	0x4432


0x46e0:	mov	ebx, 0x61
0x46e5:	jmp	0x44b0


0x46f0:	xor	r10d, r10d
0x46f3:	cmp	dword ptr [rsp + 8], 2
0x46f8:	sete	dl
0x46fb:	cmp	byte ptr [rsp + 0xf], 0
0x4700:	jne	0x529a


0x4790:	cmp	dword ptr [rsp + 8], 2
0x4795:	mov	r12d, r10d
0x4798:	sete	dl
0x479b:	xor	r10d, r10d
0x479e:	xor	eax, eax
0x47a0:	jmp	0x4338


0x47a8:	cmp	dword ptr [rsp + 8], 2
0x47ad:	sete	dl
0x47b0:	xor	r10d, r10d
0x47b3:	jmp	0x4578


0x47c0:	cmp	dword ptr [rsp + 8], 2
0x47c5:	sete	dl
0x47c8:	xor	r10d, r10d
0x47cb:	xor	r12d, r12d
0x47ce:	jmp	0x4581


0x47d8:	cmp	dword ptr [rsp + 8], 2
0x47dd:	mov	r12d, r10d
0x47e0:	mov	ebx, 0x20
0x47e5:	sete	dl
0x47e8:	xor	r10d, r10d
0x47eb:	jmp	0x4581


0x4808:	mov	ebx, 0x76
0x480d:	jmp	0x44b0


0x4818:	mov	edx, 9
0x481d:	xor	r10d, r10d
0x4820:	mov	ebx, 0x74
0x4825:	jmp	0x4432


0x4830:	mov	ebx, 0x62
0x4835:	jmp	0x44b0


0x4dd0:	test	ebx, ebx
0x4dd2:	jne	0x51cd


0x1d8f:	nop	


0x1d97:	nop	word ptr [rax + rax]


0x1dd2:	nop	word ptr [rax + rax]


0x1dfc:	nop	dword ptr [rax]


0x1e14:	nop	dword ptr [rax]


0x1f3d:	nop	dword ptr [rax]


0x1f64:	nop	dword ptr [rax]


0x1f7b:	nop	dword ptr [rax + rax]


0x1f96:	nop	word ptr cs:[rax + rax]


0x1fac:	nop	dword ptr [rax]


0x1fe9:	nop	dword ptr [rax]


0x1ffa:	nop	word ptr [rax + rax]


0x204d:	nop	dword ptr [rax]


0x2091:	nop	dword ptr [rax]


0x21ef:	nop	


0x2283:	nop	dword ptr [rax + rax]


0x22a4:	nop	dword ptr [rax]


0x22d7:	nop	word ptr [rax + rax]


0x22f9:	nop	dword ptr [rax]


0x231b:	nop	dword ptr [rax + rax]


0x2367:	nop	word ptr [rax + rax]


0x25ec:	nop	dword ptr [rax]


0x269a:	nop	word ptr [rax + rax]


0x27d5:	nop	dword ptr [rax]


0x29df:	nop	


0x2d41:	nop	dword ptr [rax]


0x3136:	nop	word ptr cs:[rax + rax]


0x3187:	nop	word ptr [rax + rax]


0x31d1:	nop	dword ptr [rax]


0x3232:	nop	word ptr [rax + rax]


0x329b:	nop	dword ptr [rax + rax]


0x32c9:	nop	dword ptr [rax]


0x3379:	nop	dword ptr [rax]


0x39d1:	nop	dword ptr [rax]


0x3a42:	nop	word ptr [rax + rax]


0x3a6c:	nop	dword ptr [rax]


0x3b66:	nop	word ptr cs:[rax + rax]


0x3bc3:	nop	dword ptr [rax + rax]


0x3c02:	nop	word ptr [rax + rax]


0x3c34:	nop	dword ptr [rax]


0x3c55:	nop	dword ptr [rax]


0x3c9b:	nop	dword ptr [rax + rax]


0x3d34:	nop	dword ptr [rax]


0x3d79:	nop	dword ptr [rax]


0x3e23:	nop	dword ptr [rax + rax]


0x3e44:	nop	dword ptr [rax]


0x3e6b:	nop	dword ptr [rax + rax]


0x405c:	nop	dword ptr [rax]


0x40ad:	nop	dword ptr [rax]


0x42d8:	nop	dword ptr [rax + rax]


0x43c7:	nop	word ptr [rax + rax]


0x43fe:	nop	


0x4421:	nop	dword ptr [rax]


0x4462:	nop	word ptr [rax + rax]


0x4474:	nop	dword ptr [rax]


0x4518:	nop	dword ptr [rax + rax]


0x4541:	nop	dword ptr [rax]


0x4557:	nop	word ptr [rax + rax]


0x456f:	nop	


0x459e:	nop	


0x45ad:	nop	dword ptr [rax]


0x45bf:	nop	


0x45cf:	nop	


0x45df:	nop	


0x45ef:	nop	


0x45ff:	nop	


0x466c:	nop	dword ptr [rax]


0x468c:	nop	dword ptr [rax]


0x469e:	nop	


0x46af:	nop	


0x46c2:	nop	word ptr [rax + rax]


0x46da:	nop	word ptr [rax + rax]


0x46ea:	nop	word ptr [rax + rax]


0x478b:	nop	dword ptr [rax + rax]


0x47a5:	nop	dword ptr [rax]


0x47b8:	nop	dword ptr [rax + rax]


0x47d3:	nop	dword ptr [rax + rax]


0x4802:	nop	word ptr [rax + rax]


0x4812:	nop	word ptr [rax + rax]


0x482a:	nop	word ptr [rax + rax]


0x483a:	nop	word ptr [rax + rax]


0x4848:	nop	dword ptr [rax + rax]


0x486f:	nop	


0x4909:	nop	dword ptr [rax]


0x4952:	nop	word ptr [rax + rax]


0x4978:	nop	dword ptr [rax + rax]


0x4991:	nop	dword ptr [rax]


0x49b2:	nop	word ptr [rax + rax]


0x4b18:	nop	dword ptr [rax + rax]


0x4c2b:	nop	dword ptr [rax + rax]


0x4c4e:	nop	


0x4d15:	nop	dword ptr [rax]


0x4dcd:	nop	dword ptr [rax]


0x4fd6:	nop	word ptr cs:[rax + rax]


0x5069:	nop	dword ptr [rax]


0x50dd:	nop	dword ptr [rax]


0x51bd:	nop	dword ptr [rax]


0x54cb:	nop	dword ptr [rax + rax]


0x5d56:	nop	word ptr cs:[rax + rax]


0x5de5:	nop	dword ptr [rax]


0x5e06:	nop	word ptr cs:[rax + rax]


0x5e65:	nop	dword ptr [rax]


0x5ea1:	nop	dword ptr [rax]


0x5ee8:	nop	dword ptr [rax + rax]


0x5f37:	nop	word ptr [rax + rax]


0x5f94:	nop	dword ptr [rax]


0x5fc2:	nop	word ptr [rax + rax]


0x6076:	nop	word ptr cs:[rax + rax]


0x60d9:	nop	dword ptr [rax]


0x6352:	nop	word ptr [rax + rax]


0x63d9:	nop	dword ptr [rax]


0x6404:	nop	dword ptr [rax]


0x645d:	nop	dword ptr [rax]


0x6626:	nop	word ptr cs:[rax + rax]


0x667f:	nop	


0x66ab:	nop	dword ptr [rax + rax]


0x6799:	nop	dword ptr [rax]


0x67c7:	nop	word ptr [rax + rax]


0x683b:	nop	dword ptr [rax + rax]


0x6894:	nop	dword ptr [rax]


0x68b1:	nop	dword ptr [rax]


0x68c2:	nop	word ptr [rax + rax]


0x691a:	nop	word ptr [rax + rax]


0x6966:	nop	word ptr cs:[rax + rax]


0x69c5:	nop	dword ptr [rax]


0x6a23:	nop	dword ptr [rax + rax]


0x6a4f:	nop	


