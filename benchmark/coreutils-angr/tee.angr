0x5440:	sub	rsp, 8
0x5444:	add	rsp, 8
0x5448:	ret	


0x5430:	mov	rdx, qword ptr [rip + 0x202bd1]
0x5437:	xor	esi, esi
0x5439:	jmp	0x17e0


0x5420:	ret	


0x53b0:	push	r15
0x53b2:	push	r14
0x53b4:	mov	r15, rdx
0x53b7:	push	r13
0x53b9:	push	r12
0x53bb:	lea	r12, [rip + 0x20270e]
0x53c2:	push	rbp
0x53c3:	lea	rbp, [rip + 0x20270e]
0x53ca:	push	rbx
0x53cb:	mov	r13d, edi
0x53ce:	mov	r14, rsi
0x53d1:	sub	rbp, r12
0x53d4:	sub	rsp, 8
0x53d8:	sar	rbp, 3
0x53dc:	call	0x1508


0x5370:	sub	rsp, 8
0x5374:	mov	edi, 0xe
0x5379:	call	0x1730


0x5310:	sub	rsp, 8
0x5314:	xor	esi, esi
0x5316:	call	0x1780


0x5290:	push	r12
0x5292:	push	rbp
0x5293:	mov	rbp, rdi
0x5296:	push	rbx
0x5297:	call	0x1580


0x5200:	push	r13
0x5202:	push	r12
0x5204:	mov	r13, rsi
0x5207:	push	rbp
0x5208:	push	rbx
0x5209:	mov	rbx, rdi
0x520c:	mov	r12, rdx
0x520f:	sub	rsp, 0x18
0x5213:	mov	rax, qword ptr fs:[0x28]
0x521c:	mov	qword ptr [rsp + 8], rax
0x5221:	xor	eax, eax
0x5223:	lea	rax, [rsp + 4]
0x5228:	test	rdi, rdi
0x522b:	cmove	rbx, rax
0x522f:	mov	rdi, rbx
0x5232:	call	0x1630


0x51a0:	mov	rax, qword ptr [rdi + 8]
0x51a4:	cmp	qword ptr [rdi + 0x10], rax
0x51a8:	je	0x51b0


0x5160:	test	rdi, rdi
0x5163:	push	rbx
0x5164:	mov	rbx, rdi
0x5167:	je	0x517a


0x4ee0:	push	r12
0x4ee2:	push	rbp
0x4ee3:	mov	ebp, edi
0x4ee5:	push	rbx
0x4ee6:	sub	rsp, 0x50
0x4eea:	mov	rax, qword ptr fs:[0x28]
0x4ef3:	mov	qword ptr [rsp + 0x18], rax
0x4ef8:	xor	eax, eax
0x4efa:	lea	rax, [rsp + 0x70]
0x4eff:	test	esi, esi
0x4f01:	mov	qword ptr [rsp + 0x30], rdx
0x4f06:	mov	qword ptr [rsp + 0x38], rcx
0x4f0b:	mov	qword ptr [rsp + 0x40], r8
0x4f10:	mov	qword ptr [rsp + 8], rax
0x4f15:	lea	rax, [rsp + 0x20]
0x4f1a:	mov	qword ptr [rsp + 0x48], r9
0x4f1f:	mov	dword ptr [rsp], 0x10
0x4f26:	mov	qword ptr [rsp + 0x10], rax
0x4f2b:	je	0x5132


0x4e60:	push	r12
0x4e62:	push	rbp
0x4e63:	push	rbx
0x4e64:	mov	rbx, rdi
0x4e67:	call	0x1700


0x4e20:	lea	rsi, [rip + 0x1568]
0x4e27:	sub	rsp, 8
0x4e2b:	mov	edx, 5
0x4e30:	xor	edi, edi
0x4e32:	call	0x15e0


0x4e00:	push	rbx
0x4e01:	mov	rbx, rdi
0x4e04:	call	0x1600


0x4dd0:	push	rbp
0x4dd1:	push	rbx
0x4dd2:	mov	rbp, rdi
0x4dd5:	mov	rdi, rsi
0x4dd8:	mov	rbx, rsi
0x4ddb:	sub	rsp, 8
0x4ddf:	call	0x4bd0


0x4da0:	mov	rax, rdi
0x4da3:	sub	rsp, 8
0x4da7:	mul	rsi
0x4daa:	seto	dl
0x4dad:	test	rax, rax
0x4db0:	js	0x4dc9


0x4d80:	push	rbx
0x4d81:	mov	rbx, rdi
0x4d84:	call	0x4bd0


0x4d30:	test	rdi, rdi
0x4d33:	mov	rax, qword ptr [rsi]
0x4d36:	je	0x4d60


0x4ca0:	test	rdi, rdi
0x4ca3:	mov	r9, rdx
0x4ca6:	mov	rcx, qword ptr [rsi]
0x4ca9:	je	0x4ce0


0x4c70:	mov	rax, rsi
0x4c73:	mul	rdx
0x4c76:	mov	rsi, rax
0x4c79:	seto	al
0x4c7c:	test	rsi, rsi
0x4c7f:	js	0x4c8b


0x4c30:	test	rsi, rsi
0x4c33:	push	rbx
0x4c34:	mov	rbx, rsi
0x4c37:	jne	0x4c3e


0x4c20:	jmp	0x4bd0


0x4bf0:	mov	rax, rdi
0x4bf3:	mul	rsi
0x4bf6:	mov	rdi, rax
0x4bf9:	seto	al
0x4bfc:	test	rdi, rdi
0x4bff:	js	0x4c0b


0x4bd0:	push	rbx
0x4bd1:	mov	rbx, rdi
0x4bd4:	call	0x1710


0x4b50:	push	rbx
0x4b51:	lea	rsi, [rip + 0x152a]
0x4b58:	mov	edx, 5
0x4b5d:	xor	edi, edi
0x4b5f:	call	0x15e0


0x4a70:	push	rbp
0x4a71:	push	rbx
0x4a72:	mov	r10d, 0x20
0x4a78:	xor	r11d, r11d
0x4a7b:	sub	rsp, 0xb8
0x4a82:	mov	rax, qword ptr fs:[0x28]
0x4a8b:	mov	qword ptr [rsp + 0x78], rax
0x4a90:	xor	eax, eax
0x4a92:	lea	rax, [rsp + 0xd0]
0x4a9a:	mov	qword ptr [rsp + 0xa0], r8
0x4aa2:	lea	rbx, [rsp + 0xd0]
0x4aaa:	lea	r8, [rsp + 0x20]
0x4aaf:	mov	qword ptr [rsp + 0xa8], r9
0x4ab7:	mov	dword ptr [rsp + 8], 0x20
0x4abf:	mov	qword ptr [rsp + 0x10], rax
0x4ac4:	lea	rax, [rsp + 0x80]
0x4acc:	xor	r9d, r9d
0x4acf:	mov	qword ptr [rsp + 0x18], rax
0x4ad4:	mov	rbp, rax
0x4ad7:	nop	word ptr [rax + rax]
0x4ae0:	cmp	r10d, 0x2f
0x4ae4:	ja	0x4b3c


0x49f0:	sub	rsp, 0x68
0x49f4:	mov	r10, r8
0x49f7:	xor	r9d, r9d
0x49fa:	mov	rax, qword ptr fs:[0x28]
0x4a03:	mov	qword ptr [rsp + 0x58], rax
0x4a08:	xor	eax, eax
0x4a0a:	mov	r8, rsp
0x4a0d:	nop	dword ptr [rax]
0x4a10:	mov	eax, dword ptr [r10]
0x4a13:	cmp	eax, 0x2f
0x4a16:	ja	0x4a5a


0x49d0:	xor	r9d, r9d
0x49d3:	cmp	qword ptr [r8], 0
0x49d7:	je	0x49eb


0x45b0:	push	r15
0x45b2:	push	r14
0x45b4:	push	r13
0x45b6:	push	r12
0x45b8:	mov	r12, r9
0x45bb:	push	rbp
0x45bc:	push	rbx
0x45bd:	mov	rbp, rdi
0x45c0:	mov	rbx, r8
0x45c3:	sub	rsp, 0x28
0x45c7:	test	rsi, rsi
0x45ca:	je	0x46e8


0x45a0:	mov	edx, 3
0x45a5:	xor	esi, esi
0x45a7:	xor	eax, eax
0x45a9:	jmp	0x4ee0


0x4580:	lea	rcx, [rip + 0x203ab9]
0x4587:	mov	rsi, rdi
0x458a:	mov	rdx, -1
0x4591:	xor	edi, edi
0x4593:	jmp	0x3c40


0x4560:	lea	rcx, [rip + 0x203ad9]
0x4567:	mov	rdx, -1
0x456e:	jmp	0x3c40


0x4540:	lea	rcx, [rip + 0x203af9]
0x4547:	mov	rdx, rsi
0x454a:	mov	rsi, rdi
0x454d:	xor	edi, edi
0x454f:	jmp	0x3c40


0x4530:	lea	rcx, [rip + 0x203b09]
0x4537:	jmp	0x3c40


0x4510:	mov	r8, rcx
0x4513:	mov	rcx, rdx
0x4516:	mov	rdx, rsi
0x4519:	mov	rsi, rdi
0x451c:	xor	edi, edi
0x451e:	jmp	0x4440


0x44f0:	mov	rcx, rdx
0x44f3:	mov	r8, -1
0x44fa:	mov	rdx, rsi
0x44fd:	mov	rsi, rdi
0x4500:	xor	edi, edi
0x4502:	jmp	0x4440


0x44e0:	mov	r8, -1
0x44e7:	jmp	0x4440


0x4440:	sub	rsp, 0x48
0x4444:	mov	r9, rcx
0x4447:	mov	rcx, qword ptr [rip + 0x203e02]
0x444e:	movdqa	xmm0, xmmword ptr [rip + 0x203dca]
0x4456:	mov	rax, qword ptr fs:[0x28]
0x445f:	mov	qword ptr [rsp + 0x38], rax
0x4464:	xor	eax, eax
0x4466:	movaps	xmmword ptr [rsp], xmm0
0x446a:	test	rsi, rsi
0x446d:	mov	qword ptr [rsp + 0x30], rcx
0x4472:	mov	dword ptr [rsp], 0xa
0x4479:	movdqa	xmm0, xmmword ptr [rip + 0x203daf]
0x4481:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x4486:	movdqa	xmm0, xmmword ptr [rip + 0x203db2]
0x448e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x4493:	je	0x44c7


0x43b0:	sub	rsp, 0x48
0x43b4:	mov	rax, rdx
0x43b7:	mov	rdx, qword ptr fs:[0x28]
0x43c0:	mov	qword ptr [rsp + 0x38], rdx
0x43c5:	xor	edx, edx
0x43c7:	cmp	esi, 0xa
0x43ca:	je	0x4434


0x43a0:	mov	edx, 0x3a
0x43a5:	jmp	0x42d0


0x4380:	mov	edx, 0x3a
0x4385:	mov	rsi, -1
0x438c:	jmp	0x42d0


0x4370:	movsx	edx, sil
0x4374:	mov	rsi, -1
0x437b:	jmp	0x42d0


0x42d0:	sub	rsp, 0x48
0x42d4:	mov	ecx, edx
0x42d6:	mov	rax, qword ptr fs:[0x28]
0x42df:	mov	qword ptr [rsp + 0x38], rax
0x42e4:	xor	eax, eax
0x42e6:	mov	rax, qword ptr [rip + 0x203f63]
0x42ed:	mov	r8, rsp
0x42f0:	and	ecx, 0x1f
0x42f3:	movdqa	xmm0, xmmword ptr [rip + 0x203f25]
0x42fb:	mov	qword ptr [rsp + 0x30], rax
0x4300:	mov	eax, edx
0x4302:	movaps	xmmword ptr [rsp], xmm0
0x4306:	shr	al, 5
0x4309:	movzx	eax, al
0x430c:	lea	r9, [r8 + rax*4 + 8]
0x4311:	movdqa	xmm0, xmmword ptr [rip + 0x203f17]
0x4319:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x431e:	movdqa	xmm0, xmmword ptr [rip + 0x203f1a]
0x4326:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x432b:	mov	edx, dword ptr [r9]
0x432e:	mov	eax, edx
0x4330:	shr	eax, cl
0x4332:	not	eax
0x4334:	and	eax, 1
0x4337:	shl	eax, cl
0x4339:	mov	rcx, r8
0x433c:	xor	eax, edx
0x433e:	mov	rdx, rsi
0x4341:	mov	rsi, rdi
0x4344:	mov	dword ptr [r9], eax
0x4347:	xor	edi, edi
0x4349:	call	0x3c40


0x42c0:	mov	rcx, rdx
0x42c3:	mov	rdx, rsi
0x42c6:	mov	esi, edi
0x42c8:	xor	edi, edi
0x42ca:	jmp	0x4220


0x42b0:	mov	rdx, rsi
0x42b3:	mov	esi, edi
0x42b5:	xor	edi, edi
0x42b7:	jmp	0x4190


0x4220:	sub	rsp, 0x48
0x4224:	mov	rax, rdx
0x4227:	mov	rdx, rcx
0x422a:	mov	rcx, qword ptr fs:[0x28]
0x4233:	mov	qword ptr [rsp + 0x38], rcx
0x4238:	xor	ecx, ecx
0x423a:	cmp	esi, 0xa
0x423d:	je	0x42a0


0x4190:	sub	rsp, 0x48
0x4194:	mov	rax, rdx
0x4197:	mov	rdx, qword ptr fs:[0x28]
0x41a0:	mov	qword ptr [rsp + 0x38], rdx
0x41a5:	xor	edx, edx
0x41a7:	cmp	esi, 0xa
0x41aa:	je	0x4214


0x4170:	lea	rcx, [rip + 0x2040a9]
0x4177:	mov	rdx, rsi
0x417a:	mov	rsi, rdi
0x417d:	xor	edi, edi
0x417f:	jmp	0x3c40


0x4150:	lea	rcx, [rip + 0x2040c9]
0x4157:	mov	rsi, rdi
0x415a:	mov	rdx, -1
0x4161:	xor	edi, edi
0x4163:	jmp	0x3c40


0x4140:	lea	rcx, [rip + 0x2040d9]
0x4147:	jmp	0x3c40


0x4120:	lea	rcx, [rip + 0x2040f9]
0x4127:	mov	rdx, -1
0x412e:	jmp	0x3c40


0x4080:	mov	eax, dword ptr [rip + 0x203ff2]
0x4086:	push	r12
0x4088:	mov	r12, qword ptr [rip + 0x203ff1]
0x408f:	push	rbp
0x4090:	push	rbx
0x4091:	cmp	eax, 1
0x4094:	jle	0x40c1


0x4070:	mov	rcx, rdx
0x4073:	xor	edx, edx
0x4075:	jmp	0x3f80


0x3f80:	push	r15
0x3f82:	push	r14
0x3f84:	lea	rax, [rip + 0x204295]
0x3f8b:	push	r13
0x3f8d:	push	r12
0x3f8f:	mov	r12, rdx
0x3f92:	push	rbp
0x3f93:	push	rbx
0x3f94:	mov	rbx, rcx
0x3f97:	mov	r14, rdi
0x3f9a:	mov	r15, rsi
0x3f9d:	sub	rsp, 0x38
0x3fa1:	test	rcx, rcx
0x3fa4:	cmove	rbx, rax
0x3fa8:	xor	ebp, ebp
0x3faa:	call	0x1550


0x3f00:	push	r15
0x3f02:	push	r14
0x3f04:	lea	rax, [rip + 0x204315]
0x3f0b:	push	r13
0x3f0d:	push	r12
0x3f0f:	mov	r13, rdi
0x3f12:	push	rbp
0x3f13:	push	rbx
0x3f14:	mov	rbx, r8
0x3f17:	mov	r14, rsi
0x3f1a:	mov	r15, rdx
0x3f1d:	sub	rsp, 0x18
0x3f21:	test	r8, r8
0x3f24:	cmove	rbx, rax
0x3f28:	mov	qword ptr [rsp + 8], rcx
0x3f2d:	call	0x1550


0x3ed0:	lea	rax, [rip + 0x204349]
0x3ed7:	test	rdi, rdi
0x3eda:	cmove	rdi, rax
0x3ede:	test	rsi, rsi
0x3ee1:	mov	dword ptr [rdi], 0xa
0x3ee7:	je	0x3ef7


0x3eb0:	lea	rax, [rip + 0x204369]
0x3eb7:	test	rdi, rdi
0x3eba:	cmove	rdi, rax
0x3ebe:	mov	eax, dword ptr [rdi + 4]
0x3ec1:	mov	dword ptr [rdi + 4], esi
0x3ec4:	ret	


0x3e70:	lea	rax, [rip + 0x2043a9]
0x3e77:	test	rdi, rdi
0x3e7a:	mov	ecx, esi
0x3e7c:	cmove	rdi, rax
0x3e80:	mov	eax, esi
0x3e82:	and	ecx, 0x1f
0x3e85:	shr	al, 5
0x3e88:	movzx	eax, al
0x3e8b:	lea	rdi, [rdi + rax*4 + 8]
0x3e90:	mov	esi, dword ptr [rdi]
0x3e92:	mov	eax, esi
0x3e94:	shr	eax, cl
0x3e96:	xor	edx, eax
0x3e98:	and	eax, 1
0x3e9b:	and	edx, 1
0x3e9e:	shl	edx, cl
0x3ea0:	xor	edx, esi
0x3ea2:	mov	dword ptr [rdi], edx
0x3ea4:	ret	


0x3e50:	lea	rax, [rip + 0x2043c9]
0x3e57:	test	rdi, rdi
0x3e5a:	cmove	rdi, rax
0x3e5e:	mov	dword ptr [rdi], esi
0x3e60:	ret	


0x3e30:	lea	rax, [rip + 0x2043e9]
0x3e37:	test	rdi, rdi
0x3e3a:	cmove	rdi, rax
0x3e3e:	mov	eax, dword ptr [rdi]
0x3e40:	ret	


0x3df0:	push	r12
0x3df2:	push	rbp
0x3df3:	push	rbx
0x3df4:	mov	rbx, rdi
0x3df7:	call	0x1550


0x3c40:	push	r15
0x3c42:	push	r14
0x3c44:	movsxd	r15, edi
0x3c47:	push	r13
0x3c49:	push	r12
0x3c4b:	mov	r14, rdx
0x3c4e:	push	rbp
0x3c4f:	push	rbx
0x3c50:	mov	rbp, rcx
0x3c53:	sub	rsp, 0x28
0x3c57:	mov	qword ptr [rsp + 8], rsi
0x3c5c:	call	0x1550


0x2a00:	push	r15
0x2a02:	push	r14
0x2a04:	mov	r15d, r8d
0x2a07:	push	r13
0x2a09:	push	r12
0x2a0b:	mov	r14, rdi
0x2a0e:	push	rbp
0x2a0f:	push	rbx
0x2a10:	mov	ebx, r9d
0x2a13:	mov	r13, rsi
0x2a16:	mov	rbp, rcx
0x2a19:	and	ebx, 2
0x2a1c:	sub	rsp, 0xb8
0x2a23:	mov	rax, qword ptr [rsp + 0xf0]
0x2a2b:	mov	qword ptr [rsp + 0x10], rdx
0x2a30:	mov	dword ptr [rsp + 8], r8d
0x2a35:	mov	dword ptr [rsp + 0x78], r9d
0x2a3a:	mov	qword ptr [rsp + 0x20], rax
0x2a3f:	mov	rax, qword ptr [rsp + 0xf8]
0x2a47:	mov	qword ptr [rsp + 0x68], rax
0x2a4c:	mov	rax, qword ptr [rsp + 0x100]
0x2a54:	mov	qword ptr [rsp + 0x60], rax
0x2a59:	mov	rax, qword ptr fs:[0x28]
0x2a62:	mov	qword ptr [rsp + 0xa8], rax
0x2a6a:	xor	eax, eax
0x2a6c:	call	0x15f0


0x2910:	push	rbp
0x2911:	push	rbx
0x2912:	mov	rbp, rdi
0x2915:	mov	ebx, esi
0x2917:	sub	rsp, 8
0x291b:	call	0x5370


0x2870:	test	rdi, rdi
0x2873:	push	rbx
0x2874:	je	0x28ed


0x27d0:	push	r12
0x27d2:	push	rbp
0x27d3:	mov	rbp, rsi
0x27d6:	push	rbx
0x27d7:	call	0x17d0


0x27a0:	test	rdi, rdi
0x27a3:	je	0x27c0


0x2790:	jmp	0x1690


0x26e0:	push	rbp
0x26e1:	push	rbx
0x26e2:	sub	rsp, 8
0x26e6:	mov	rdi, qword ptr [rip + 0x2059bb]
0x26ed:	call	0x5290


0x26d0:	mov	byte ptr [rip + 0x205a21], dil
0x26d7:	ret	


0x26c0:	mov	qword ptr [rip + 0x205a39], rdi
0x26c7:	ret	


0x2670:	push	r14
0x2672:	push	r13
0x2674:	push	r12
0x2676:	push	rbp
0x2677:	push	rbx
0x2678:	mov	r14, qword ptr [rsi]
0x267b:	test	r14, r14
0x267e:	je	0x26b1


0x2600:	push	r15
0x2602:	push	r14
0x2604:	mov	r14, rdi
0x2607:	push	r13
0x2609:	push	r12
0x260b:	mov	r12, rsi
0x260e:	push	rbp
0x260f:	push	rbx
0x2610:	mov	rbp, rcx
0x2613:	mov	rbx, rdx
0x2616:	mov	rcx, r8
0x2619:	mov	rdx, rbp
0x261c:	sub	rsp, 8
0x2620:	mov	rsi, rbx
0x2623:	mov	rdi, r12
0x2626:	mov	r15, r8
0x2629:	mov	r13, r9
0x262c:	call	0x2340


0x24e0:	push	r15
0x24e2:	push	r14
0x24e4:	mov	r14, rdi
0x24e7:	push	r13
0x24e9:	push	r12
0x24eb:	xor	edi, edi
0x24ed:	push	rbp
0x24ee:	push	rbx
0x24ef:	mov	rbp, rsi
0x24f2:	lea	rsi, [rip + 0x35e4]
0x24f9:	mov	r12, rdx
0x24fc:	mov	edx, 5
0x2501:	sub	rsp, 8
0x2505:	mov	rbx, qword ptr [rip + 0x205bd4]
0x250c:	call	0x15e0


0x2460:	cmp	rdx, -1
0x2464:	push	r12
0x2466:	mov	edx, 5
0x246b:	push	rbp
0x246c:	mov	r12, rsi
0x246f:	push	rbx
0x2470:	mov	rbp, rdi
0x2473:	je	0x24c0


0x2340:	push	r15
0x2342:	push	r14
0x2344:	mov	r15, rsi
0x2347:	push	r13
0x2349:	push	r12
0x234b:	mov	r13, rcx
0x234e:	push	rbp
0x234f:	push	rbx
0x2350:	mov	rbp, rdx
0x2353:	sub	rsp, 0x28
0x2357:	mov	qword ptr [rsp + 8], rdi
0x235c:	mov	qword ptr [rsp + 0x18], rdx
0x2361:	call	0x1600


0x2330:	mov	edi, 1
0x2335:	jmp	0x1fa0


0x1fa0:	push	r13
0x1fa2:	push	r12
0x1fa4:	mov	edx, 5
0x1fa9:	push	rbp
0x1faa:	push	rbx
0x1fab:	mov	ebp, edi
0x1fad:	sub	rsp, 0x88
0x1fb4:	mov	rbx, qword ptr [rip + 0x20614d]
0x1fbb:	mov	rax, qword ptr fs:[0x28]
0x1fc4:	mov	qword ptr [rsp + 0x78], rax
0x1fc9:	xor	eax, eax
0x1fcb:	test	edi, edi
0x1fcd:	je	0x1ffd


0x1b90:	push	r15
0x1b92:	push	r14
0x1b94:	mov	r15, rsi
0x1b97:	push	r13
0x1b99:	push	r12
0x1b9b:	lea	r12, [rip + 0x38c4]
0x1ba2:	push	rbp
0x1ba3:	push	rbx
0x1ba4:	mov	ebx, edi
0x1ba6:	mov	esi, 2
0x1bab:	sub	rsp, 0x2038
0x1bb2:	mov	rax, qword ptr fs:[0x28]
0x1bbb:	mov	qword ptr [rsp + 0x2028], rax
0x1bc3:	xor	eax, eax
0x1bc5:	cmp	byte ptr [rip + 0x206525], 0
0x1bcc:	mov	dword ptr [rsp + 0x1c], edi
0x1bd0:	lea	rax, [rip + 0x388d]
0x1bd7:	mov	rdi, qword ptr [rip + 0x2064d2]
0x1bde:	cmovne	r12, rax
0x1be2:	call	0x27a0


0x1b80:	push	rbp
0x1b81:	mov	rbp, rsp
0x1b84:	pop	rbp
0x1b85:	jmp	0x1af0


0x1b40:	cmp	byte ptr [rip + 0x2065a1], 0
0x1b47:	jne	0x1b78


0x1af0:	lea	rdi, [rip + 0x2065a9]
0x1af7:	lea	rsi, [rip + 0x2065a2]
0x1afe:	push	rbp
0x1aff:	sub	rsi, rdi
0x1b02:	mov	rbp, rsp
0x1b05:	sar	rsi, 3
0x1b09:	mov	rax, rsi
0x1b0c:	shr	rax, 0x3f
0x1b10:	add	rsi, rax
0x1b13:	sar	rsi, 1
0x1b16:	je	0x1b30


0x1ab0:	lea	rdi, [rip + 0x2065e9]
0x1ab7:	push	rbp
0x1ab8:	lea	rax, [rip + 0x2065e1]
0x1abf:	cmp	rax, rdi
0x1ac2:	mov	rbp, rsp
0x1ac5:	je	0x1ae0


0x1a80:	xor	ebp, ebp
0x1a82:	mov	r9, rdx
0x1a85:	pop	rsi
0x1a86:	mov	rdx, rsp
0x1a89:	and	rsp, 0xfffffffffffffff0
0x1a8d:	push	rax
0x1a8e:	push	rsp
0x1a8f:	lea	r8, [rip + 0x398a]
0x1a96:	lea	rcx, [rip + 0x3913]
0x1a9d:	lea	rdi, [rip - 0x244]
0x1aa4:	call	qword ptr [rip + 0x20652e]


0x1860:	push	r12
0x1862:	push	rbp
0x1863:	mov	ebp, edi
0x1865:	push	rbx
0x1866:	mov	rdi, qword ptr [rsi]
0x1869:	mov	rbx, rsi
0x186c:	lea	r12, [rip + 0x2062ad]
0x1873:	call	0x2870


0x1508:	sub	rsp, 8
0x150c:	mov	rax, qword ptr [rip + 0x206acd]
0x1513:	test	rax, rax
0x1516:	je	0x151a


0x17e0:	jmp	qword ptr [rip + 0x2067b2]


0x1730:	jmp	qword ptr [rip + 0x20680a]


0x1780:	jmp	qword ptr [rip + 0x2067e2]


0x1580:	jmp	qword ptr [rip + 0x2068e2]


0x1630:	jmp	qword ptr [rip + 0x20688a]


0x51b0:	mov	rax, qword ptr [rdi + 0x20]
0x51b4:	cmp	qword ptr [rdi + 0x28], rax
0x51b8:	jne	0x51aa


0x51aa:	jmp	0x17c0


0x517a:	mov	rdi, rbx
0x517d:	pop	rbx
0x517e:	jmp	0x1720


0x5169:	call	0x1740


0x5132:	mov	rax, qword ptr [rsp + 0x10]
0x5137:	xor	esi, esi
0x5139:	mov	edx, dword ptr [rax + 0x10]
0x513c:	xor	eax, eax
0x513e:	call	0x1590


0x4f31:	cmp	esi, 0x406
0x4f37:	jne	0x4f80


0x1700:	jmp	qword ptr [rip + 0x206822]


0x15e0:	jmp	qword ptr [rip + 0x2068b2]


0x1600:	jmp	qword ptr [rip + 0x2068a2]


0x4dc9:	call	0x4e20


0x4db2:	movzx	edx, dl
0x4db5:	test	rdx, rdx
0x4db8:	jne	0x4dc9


0x4d60:	test	rax, rax
0x4d63:	mov	edx, 0x80
0x4d68:	cmove	rax, rdx
0x4d6c:	test	rax, rax
0x4d6f:	jns	0x4d52


0x4d38:	movabs	rdx, 0x5555555555555553
0x4d42:	cmp	rax, rdx
0x4d45:	ja	0x4d71


0x4ce0:	test	rcx, rcx
0x4ce3:	je	0x4d08


0x4cab:	xor	edx, edx
0x4cad:	movabs	rax, 0x5555555555555554
0x4cb7:	div	r9
0x4cba:	cmp	rax, rcx
0x4cbd:	jbe	0x4cfb


0x4c8b:	sub	rsp, 8
0x4c8f:	call	0x4e20


0x4c81:	movzx	eax, al
0x4c84:	test	rax, rax
0x4c87:	jne	0x4c8b


0x4c39:	test	rdi, rdi
0x4c3c:	jne	0x4c58


0x4c3e:	mov	rsi, rbx
0x4c41:	call	0x1760


0x4c0b:	sub	rsp, 8
0x4c0f:	call	0x4e20


0x4c01:	movzx	eax, al
0x4c04:	test	rax, rax
0x4c07:	jne	0x4c0b


0x1710:	jmp	qword ptr [rip + 0x20681a]


0x4ae6:	mov	eax, r10d
0x4ae9:	mov	r11d, 1
0x4aef:	add	r10d, 8
0x4af3:	add	rax, rbp
0x4af6:	mov	rax, qword ptr [rax]
0x4af9:	test	rax, rax
0x4afc:	mov	qword ptr [r8 + r9*8], rax
0x4b00:	je	0x4b0c


0x4b3c:	mov	rax, rbx
0x4b3f:	add	rbx, 8
0x4b43:	jmp	0x4af6


0x4a18:	mov	r11d, eax
0x4a1b:	add	r11, qword ptr [r10 + 0x10]
0x4a1f:	add	eax, 8
0x4a22:	mov	dword ptr [r10], eax
0x4a25:	mov	rax, qword ptr [r11]
0x4a28:	test	rax, rax
0x4a2b:	mov	qword ptr [r8 + r9*8], rax
0x4a2f:	je	0x4a3b


0x4a5a:	mov	r11, qword ptr [r10 + 8]
0x4a5e:	lea	rax, [r11 + 8]
0x4a62:	mov	qword ptr [r10 + 8], rax
0x4a66:	jmp	0x4a25


0x49eb:	jmp	0x45b0


0x46e8:	mov	r8, rcx
0x46eb:	mov	rcx, rdx
0x46ee:	lea	rdx, [rip + 0x193f]
0x46f5:	mov	esi, 1
0x46fa:	xor	eax, eax
0x46fc:	call	0x1810


0x45d0:	mov	r8, rdx
0x45d3:	lea	rdx, [rip + 0x1a4e]
0x45da:	mov	r9, rcx
0x45dd:	xor	eax, eax
0x45df:	mov	rcx, rsi
0x45e2:	mov	esi, 1
0x45e7:	call	0x1810


0x44c7:	call	0x1540


0x4495:	test	rdx, rdx
0x4498:	je	0x44c7


0x4434:	call	0x1540


0x43cc:	mov	dword ptr [rsp], esi
0x43cf:	mov	rcx, rsp
0x43d2:	mov	rdx, -1
0x43d9:	mov	rsi, rax
0x43dc:	mov	qword ptr [rsp + 4], 0
0x43e5:	mov	qword ptr [rsp + 0xc], 0x4000000
0x43ee:	mov	qword ptr [rsp + 0x14], 0
0x43f7:	mov	qword ptr [rsp + 0x1c], 0
0x4400:	mov	qword ptr [rsp + 0x24], 0
0x4409:	mov	qword ptr [rsp + 0x2c], 0
0x4412:	mov	dword ptr [rsp + 0x34], 0
0x441a:	call	0x3c40


0x42a0:	call	0x1540


0x423f:	mov	dword ptr [rsp], esi
0x4242:	mov	rcx, rsp
0x4245:	mov	rsi, rax
0x4248:	mov	qword ptr [rsp + 4], 0
0x4251:	mov	qword ptr [rsp + 0xc], 0
0x425a:	mov	qword ptr [rsp + 0x14], 0
0x4263:	mov	qword ptr [rsp + 0x1c], 0
0x426c:	mov	qword ptr [rsp + 0x24], 0
0x4275:	mov	qword ptr [rsp + 0x2c], 0
0x427e:	mov	dword ptr [rsp + 0x34], 0
0x4286:	call	0x3c40


0x4214:	call	0x1540


0x41ac:	mov	dword ptr [rsp], esi
0x41af:	mov	rcx, rsp
0x41b2:	mov	rdx, -1
0x41b9:	mov	rsi, rax
0x41bc:	mov	qword ptr [rsp + 4], 0
0x41c5:	mov	qword ptr [rsp + 0xc], 0
0x41ce:	mov	qword ptr [rsp + 0x14], 0
0x41d7:	mov	qword ptr [rsp + 0x1c], 0
0x41e0:	mov	qword ptr [rsp + 0x24], 0
0x41e9:	mov	qword ptr [rsp + 0x2c], 0
0x41f2:	mov	dword ptr [rsp + 0x34], 0
0x41fa:	call	0x3c40


0x40c1:	mov	rdi, qword ptr [r12 + 8]
0x40c6:	lea	rbx, [rip + 0x204053]
0x40cd:	cmp	rdi, rbx
0x40d0:	je	0x40e9


0x4096:	sub	eax, 2
0x4099:	lea	rbx, [r12 + 0x18]
0x409e:	shl	rax, 4
0x40a2:	lea	rbp, [r12 + rax + 0x28]
0x40a7:	nop	word ptr [rax + rax]
0x40b0:	mov	rdi, qword ptr [rbx]
0x40b3:	add	rbx, 0x10
0x40b7:	call	0x1530


0x1550:	jmp	qword ptr [rip + 0x2068fa]


0x3ef7:	sub	rsp, 8
0x3efb:	call	0x1540


0x3ee9:	test	rdx, rdx
0x3eec:	je	0x3ef7


0x15f0:	jmp	qword ptr [rip + 0x2068aa]


0x28ed:	mov	rcx, qword ptr [rip + 0x2057ec]
0x28f4:	lea	rdi, [rip + 0x321d]
0x28fb:	mov	edx, 0x37
0x2900:	mov	esi, 1
0x2905:	call	0x1800


0x2876:	mov	esi, 0x2f
0x287b:	mov	rbx, rdi
0x287e:	call	0x1650


0x17d0:	jmp	qword ptr [rip + 0x2067ba]


0x27c0:	ret	


0x27a5:	push	rbx
0x27a6:	mov	ebx, esi
0x27a8:	call	0x1700


0x1690:	jmp	qword ptr [rip + 0x20685a]


0x26b1:	pop	rbx
0x26b2:	mov	rax, r14
0x26b5:	pop	rbp
0x26b6:	pop	r12
0x26b8:	pop	r13
0x26ba:	pop	r14
0x26bc:	ret	


0x2680:	mov	r12, rcx
0x2683:	mov	r13, rdi
0x2686:	mov	rbp, rdx
0x2689:	lea	rbx, [rsi + 8]
0x268d:	jmp	0x269f


0x24c0:	lea	rsi, [rip + 0x35de]
0x24c7:	xor	edi, edi
0x24c9:	call	0x15e0


0x2475:	lea	rsi, [rip + 0x3644]
0x247c:	xor	edi, edi
0x247e:	call	0x15e0


0x1ffd:	lea	rsi, [rip + 0x3604]
0x2004:	xor	edi, edi
0x2006:	call	0x15e0


0x1fcf:	lea	rsi, [rip + 0x360a]
0x1fd6:	xor	edi, edi
0x1fd8:	call	0x15e0


0x1b49:	cmp	qword ptr [rip + 0x20649f], 0
0x1b51:	push	rbp
0x1b52:	mov	rbp, rsp
0x1b55:	je	0x1b63


0x1b78:	ret	


0x1b30:	pop	rbp
0x1b31:	ret	


0x1b18:	mov	rax, qword ptr [rip + 0x2064c9]
0x1b1f:	test	rax, rax
0x1b22:	je	0x1b30


0x1ae0:	pop	rbp
0x1ae1:	ret	


0x1ac7:	mov	rax, qword ptr [rip + 0x206502]
0x1ace:	test	rax, rax
0x1ad1:	je	0x1ae0




0x151a:	add	rsp, 8
0x151e:	ret	


0x1518:	call	rax












0x51ba:	cmp	qword ptr [rdi + 0x48], 0
0x51bf:	jne	0x51aa


0x17c0:	jmp	qword ptr [rip + 0x2067c2]


0x1720:	jmp	qword ptr [rip + 0x206812]


0x1740:	jmp	qword ptr [rip + 0x206802]


0x1590:	jmp	qword ptr [rip + 0x2068da]


0x4f39:	mov	rax, qword ptr [rsp + 0x10]
0x4f3e:	cmp	dword ptr [rip + 0x203313], 0
0x4f45:	mov	dword ptr [rsp], 0x18
0x4f4c:	mov	r12d, dword ptr [rax + 0x10]
0x4f50:	mov	edx, r12d
0x4f53:	js	0x5083


0x4f80:	cmp	esi, 0xb
0x4f83:	je	0x4fb0








0x4dba:	call	0x16d0


0x4d71:	sub	rsp, 8
0x4d75:	call	0x4e20


0x4d52:	mov	qword ptr [rsi], rax
0x4d55:	mov	rsi, rax
0x4d58:	jmp	0x4c30


0x4d47:	mov	rdx, rax
0x4d4a:	shr	rdx, 1
0x4d4d:	lea	rax, [rdx + rax + 1]
0x4d52:	mov	qword ptr [rsi], rax
0x4d55:	mov	rsi, rax
0x4d58:	jmp	0x4c30


0x4d08:	xor	edx, edx
0x4d0a:	mov	eax, 0x80
0x4d0f:	xor	r8d, r8d
0x4d12:	div	r9
0x4d15:	test	rax, rax
0x4d18:	sete	r8b
0x4d1c:	lea	rcx, [r8 + rax]
0x4d20:	jmp	0x4ce5


0x4ce5:	mov	rax, rcx
0x4ce8:	mul	r9
0x4ceb:	seto	dl
0x4cee:	test	rax, rax
0x4cf1:	movzx	edx, dl
0x4cf4:	js	0x4cfb


0x4cfb:	sub	rsp, 8
0x4cff:	call	0x4e20


0x4cbf:	mov	rax, rcx
0x4cc2:	shr	rax, 1
0x4cc5:	lea	rcx, [rax + rcx + 1]
0x4cca:	mov	qword ptr [rsi], rcx
0x4ccd:	imul	rcx, r9
0x4cd1:	mov	rsi, rcx
0x4cd4:	jmp	0x4c30


0x4c89:	jmp	0x4c30


0x4c58:	call	0x1530


0x1760:	jmp	qword ptr [rip + 0x2067f2]


0x4c09:	jmp	0x4bd0




0x4b0c:	test	r11b, r11b
0x4b0f:	jne	0x4b35


0x4b02:	add	r9, 1
0x4b06:	cmp	r9, 0xa
0x4b0a:	jne	0x4ae0


0x4af6:	mov	rax, qword ptr [rax]
0x4af9:	test	rax, rax
0x4afc:	mov	qword ptr [r8 + r9*8], rax
0x4b00:	je	0x4b0c


0x4a3b:	call	0x45b0


0x4a31:	add	r9, 1
0x4a35:	cmp	r9, 0xa
0x4a39:	jne	0x4a10


0x4a25:	mov	rax, qword ptr [r11]
0x4a28:	test	rax, rax
0x4a2b:	mov	qword ptr [r8 + r9*8], rax
0x4a2f:	je	0x4a3b


0x49e0:	add	r9, 1
0x49e4:	cmp	qword ptr [r8 + r9*8], 0
0x49e9:	jne	0x49e0


0x1810:	jmp	qword ptr [rip + 0x20679a]


0x1540:	jmp	qword ptr [rip + 0x206902]


0x449a:	mov	qword ptr [rsp + 0x28], rsi
0x449f:	mov	qword ptr [rsp + 0x30], rdx
0x44a4:	mov	rcx, rsp
0x44a7:	mov	rdx, r8
0x44aa:	mov	rsi, r9
0x44ad:	call	0x3c40


0x40e9:	lea	rbx, [rip + 0x203fa0]
0x40f0:	cmp	r12, rbx
0x40f3:	je	0x4104


0x40d2:	call	0x1530


0x1530:	jmp	qword ptr [rip + 0x20690a]




0x3eee:	mov	qword ptr [rdi + 0x28], rsi
0x3ef2:	mov	qword ptr [rdi + 0x30], rdx
0x3ef6:	ret	




0x1800:	jmp	qword ptr [rip + 0x2067a2]


0x1650:	jmp	qword ptr [rip + 0x20687a]






0x269f:	mov	rdx, r12
0x26a2:	mov	rsi, rbp
0x26a5:	mov	rdi, r13
0x26a8:	call	0x16b0


0x1b63:	call	0x1ab0


0x1b57:	mov	rdi, qword ptr [rip + 0x2064aa]
0x1b5e:	call	0x1850


0x1b24:	pop	rbp
0x1b25:	jmp	rax


0x1ad3:	pop	rbp
0x1ad4:	jmp	rax


0x51c1:	push	r12
0x51c3:	push	rbp
0x51c4:	mov	r12d, edx
0x51c7:	push	rbx
0x51c8:	mov	rbp, rsi
0x51cb:	mov	rbx, rdi
0x51ce:	call	0x1700










0x5083:	xor	esi, esi
0x5085:	xor	eax, eax
0x5087:	call	0x1590


0x4f59:	xor	eax, eax
0x4f5b:	mov	esi, 0x406
0x4f60:	call	0x1590


0x4fb0:	mov	edi, ebp
0x4fb2:	xor	eax, eax
0x4fb4:	call	0x1590


0x4f85:	jg	0x4fe0


0x16d0:	jmp	qword ptr [rip + 0x20683a]


0x4cf6:	test	rdx, rdx
0x4cf9:	je	0x4cca




0x4b11:	call	0x45b0


0x4b35:	mov	dword ptr [rsp + 8], r10d
0x4b3a:	jmp	0x4b11


0x4ae0:	cmp	r10d, 0x2f
0x4ae4:	ja	0x4b3c


0x4a10:	mov	eax, dword ptr [r10]
0x4a13:	cmp	eax, 0x2f
0x4a16:	ja	0x4a5a






0x4104:	pop	rbx
0x4105:	mov	dword ptr [rip + 0x203f69], 1
0x410f:	pop	rbp
0x4110:	pop	r12
0x4112:	ret	


0x40f5:	mov	rdi, r12
0x40f8:	call	0x1530








0x16b0:	jmp	qword ptr [rip + 0x20684a]


0x1850:	jmp	qword ptr [rip + 0x20679a]


0x4f87:	cmp	esi, 4
0x4f8a:	je	0x5060


0x4fe0:	cmp	esi, 0x407
0x4fe6:	jg	0x5030




0x4cca:	mov	qword ptr [rsi], rcx
0x4ccd:	imul	rcx, r9
0x4cd1:	mov	rsi, rcx
0x4cd4:	jmp	0x4c30




0x5060:	mov	eax, dword ptr [rsp]
0x5063:	cmp	eax, 0x2f
0x5066:	ja	0x5154


0x4f90:	jg	0x5050


0x4fe8:	cmp	esi, 0x406
0x4fee:	jge	0x5060


0x5030:	cmp	esi, 0x409
0x5036:	je	0x5060


0x506c:	add	rax, qword ptr [rsp + 0x10]
0x5071:	mov	edx, dword ptr [rax]
0x5073:	mov	edi, ebp
0x5075:	xor	eax, eax
0x5077:	call	0x1590


0x5154:	mov	rax, qword ptr [rsp + 8]
0x5159:	jmp	0x5071


0x4f96:	cmp	esi, 2
0x4f99:	je	0x5060


0x5050:	cmp	esi, 9
0x5053:	je	0x4fb0


0x4ff0:	cmp	esi, 0x401
0x4ff6:	je	0x4fb0


0x5038:	jl	0x4fb0


0x5071:	mov	edx, dword ptr [rax]
0x5073:	mov	edi, ebp
0x5075:	xor	eax, eax
0x5077:	call	0x1590


0x4f9f:	jg	0x4fb0


0x5059:	jg	0x5060


0x4ff8:	cmp	esi, 0x402
0x4ffe:	je	0x5060


0x503e:	cmp	esi, 0x40a
0x5044:	jne	0x5008


0x4fa1:	cmp	esi, 1
0x4fa4:	jne	0x5008


0x505b:	cmp	esi, 8
0x505e:	jne	0x5008


0x5000:	cmp	esi, 0x400
0x5006:	je	0x5060


0x5046:	jmp	0x4fb0


0x5008:	mov	eax, dword ptr [rsp]
0x500b:	cmp	eax, 0x2f
0x500e:	ja	0x514a


0x5014:	add	rax, qword ptr [rsp + 0x10]
0x5019:	mov	rdx, qword ptr [rax]
0x501c:	mov	edi, ebp
0x501e:	xor	eax, eax
0x5020:	call	0x1590


0x514a:	mov	rax, qword ptr [rsp + 8]
0x514f:	jmp	0x5019


0x5019:	mov	rdx, qword ptr [rax]
0x501c:	mov	edi, ebp
0x501e:	xor	eax, eax
0x5020:	call	0x1590


0x1b68:	mov	byte ptr [rip + 0x206579], 1
0x1b6f:	pop	rbp
0x1b70:	ret	


0x1be7:	lea	edi, [rbx + 1]
0x1bea:	mov	edx, 8
0x1bef:	mov	rax, rdx
0x1bf2:	movsxd	rdi, edi
0x1bf5:	mul	rdi
0x1bf8:	jo	0x1f87


0x1f87:	mov	ecx, 1
0x1f8c:	jmp	0x1c00


0x1bfe:	xor	ecx, ecx
0x1c00:	test	rax, rax
0x1c03:	js	0x1f82


0x1c00:	test	rax, rax
0x1c03:	js	0x1f82


0x1f82:	call	0x4e20


0x1c09:	test	rcx, rcx
0x1c0c:	jne	0x1f82


0x1c12:	shl	rdi, 3
0x1c16:	call	0x4bd0


0x53e1:	test	rbp, rbp
0x53e4:	je	0x5406


0x5406:	add	rsp, 8
0x540a:	pop	rbx
0x540b:	pop	rbp
0x540c:	pop	r12
0x540e:	pop	r13
0x5410:	pop	r14
0x5412:	pop	r15
0x5414:	ret	


0x53e6:	xor	ebx, ebx
0x53e8:	nop	dword ptr [rax + rax]
0x53f0:	mov	rdx, r15
0x53f3:	mov	rsi, r14
0x53f6:	mov	edi, r13d
0x53f9:	call	qword ptr [r12 + rbx*8]


0x26ad:	test	eax, eax
0x26af:	jne	0x2690


0x2690:	mov	r14, qword ptr [rbx]
0x2693:	add	rbp, r12
0x2696:	add	rbx, 8
0x269a:	test	r14, r14
0x269d:	je	0x26b1


0x4dbf:	test	rax, rax
0x4dc2:	je	0x4dc9


0x4dc4:	add	rsp, 8
0x4dc8:	ret	


0x2883:	test	rax, rax
0x2886:	je	0x28dd


0x28dd:	mov	qword ptr [rip + 0x205824], rbx
0x28e4:	mov	qword ptr [rip + 0x2057dd], rbx
0x28eb:	pop	rbx
0x28ec:	ret	


0x2888:	lea	r8, [rax + 1]
0x288c:	mov	rdx, r8
0x288f:	sub	rdx, rbx
0x2892:	cmp	rdx, 6
0x2896:	jle	0x28dd


0x2898:	lea	rsi, [rax - 6]
0x289c:	lea	rdi, [rip + 0x32ad]
0x28a3:	mov	ecx, 7
0x28a8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x28a8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x28aa:	seta	dl
0x28ad:	sbb	dl, 0
0x28b0:	test	dl, dl
0x28b2:	jne	0x28dd


0x28b4:	lea	rdi, [rip + 0x329d]
0x28bb:	mov	ecx, 3
0x28c0:	mov	rsi, r8
0x28c3:	mov	rbx, r8
0x28c6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x28c6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x28c8:	seta	dl
0x28cb:	sbb	dl, 0
0x28ce:	test	dl, dl
0x28d0:	jne	0x28dd


0x28d2:	lea	rbx, [rax + 4]
0x28d6:	mov	qword ptr [rip + 0x2057c3], rbx
0x28dd:	mov	qword ptr [rip + 0x205824], rbx
0x28e4:	mov	qword ptr [rip + 0x2057dd], rbx
0x28eb:	pop	rbx
0x28ec:	ret	


0x290a:	call	0x1540


0x40fd:	mov	qword ptr [rip + 0x203f7c], rbx
0x4104:	pop	rbx
0x4105:	mov	dword ptr [rip + 0x203f69], 1
0x410f:	pop	rbp
0x4110:	pop	r12
0x4112:	ret	


0x40d7:	mov	qword ptr [rip + 0x203fae], 0x100
0x40e2:	mov	qword ptr [rip + 0x203faf], rbx
0x40e9:	lea	rbx, [rip + 0x203fa0]
0x40f0:	cmp	r12, rbx
0x40f3:	je	0x4104


0x4c5d:	xor	eax, eax
0x4c5f:	pop	rbx
0x4c60:	ret	


0x40bc:	cmp	rbx, rbp
0x40bf:	jne	0x40b0


0x40b0:	mov	rdi, qword ptr [rbx]
0x40b3:	add	rbx, 0x10
0x40b7:	call	0x1530


0x45ec:	lea	rsi, [rip + 0x1a48]
0x45f3:	xor	edi, edi
0x45f5:	mov	edx, 5
0x45fa:	call	0x15e0


0x4701:	jmp	0x45ec


0x4c46:	test	rax, rax
0x4c49:	jne	0x4c50


0x4c4b:	test	rbx, rbx
0x4c4e:	jne	0x4c61


0x4c50:	pop	rbx
0x4c51:	ret	


0x4c61:	call	0x4e20


0x5025:	mov	ebx, eax
0x5027:	jmp	0x4fc0


0x4fc0:	mov	rcx, qword ptr [rsp + 0x18]
0x4fc5:	xor	rcx, qword ptr fs:[0x28]
0x4fce:	mov	eax, ebx
0x4fd0:	jne	0x512d


0x4fd6:	add	rsp, 0x50
0x4fda:	pop	rbx
0x4fdb:	pop	rbp
0x4fdc:	pop	r12
0x4fde:	ret	


0x512d:	call	0x1610


0x1610:	jmp	qword ptr [rip + 0x20689a]




0x4fb9:	mov	ebx, eax
0x4fbb:	nop	dword ptr [rax + rax]
0x4fc0:	mov	rcx, qword ptr [rsp + 0x18]
0x4fc5:	xor	rcx, qword ptr fs:[0x28]
0x4fce:	mov	eax, ebx
0x4fd0:	jne	0x512d


0x507c:	mov	ebx, eax
0x507e:	jmp	0x4fc0


0x4f65:	test	eax, eax
0x4f67:	mov	ebx, eax
0x4f69:	js	0x50f8


0x50f8:	call	0x1550


0x4f6f:	mov	dword ptr [rip + 0x2032df], 1
0x4f79:	jmp	0x4fc0


0x508c:	test	eax, eax
0x508e:	mov	ebx, eax
0x5090:	js	0x4fc0


0x5096:	cmp	dword ptr [rip + 0x2031bb], -1
0x509d:	jne	0x4fc0


0x50a3:	xor	eax, eax
0x50a5:	mov	esi, 1
0x50aa:	mov	edi, ebx
0x50ac:	call	0x1590


0x50b1:	test	eax, eax
0x50b3:	js	0x50d1


0x50d1:	call	0x1550


0x50b5:	or	eax, 1
0x50b8:	mov	esi, 2
0x50bd:	mov	edi, ebx
0x50bf:	mov	edx, eax
0x50c1:	xor	eax, eax
0x50c3:	call	0x1590


0x50c8:	cmp	eax, -1
0x50cb:	jne	0x4fc0


0x5143:	mov	ebx, eax
0x5145:	jmp	0x4fc0


0x516e:	test	eax, eax
0x5170:	je	0x517a


0x5172:	test	dword ptr [rbx], 0x100
0x5178:	jne	0x5188


0x5188:	mov	rdi, rbx
0x518b:	mov	edx, 1
0x5190:	xor	esi, esi
0x5192:	call	0x51a0


0x1878:	lea	rsi, [rip + 0x4802]
0x187f:	mov	edi, 6
0x1884:	call	0x1780


0x27dc:	test	rax, rax
0x27df:	mov	rbx, rax
0x27e2:	je	0x27f1


0x27f1:	mov	rax, rbx
0x27f4:	pop	rbx
0x27f5:	pop	rbp
0x27f6:	pop	r12
0x27f8:	ret	


0x27e4:	mov	rdi, rax
0x27e7:	call	0x1700


0x2a71:	cmp	r15d, 0xa
0x2a75:	mov	qword ptr [rsp + 0x58], rax
0x2a7a:	ja	0x3c2f


0x2a80:	lea	rcx, [rip + 0x3139]
0x2a87:	mov	edx, r15d
0x2a8a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2a8e:	add	rax, rcx
0x2a91:	jmp	rax


0x3c2f:	call	0x1540


0x50d6:	mov	r12d, dword ptr [rax]
0x50d9:	mov	rbp, rax
0x50dc:	mov	edi, ebx
0x50de:	call	0x1680


0x1680:	jmp	qword ptr [rip + 0x206862]




0x50fd:	cmp	dword ptr [rax], 0x16
0x5100:	jne	0x4f6f


0x5106:	xor	esi, esi
0x5108:	xor	eax, eax
0x510a:	mov	edx, r12d
0x510d:	mov	edi, ebp
0x510f:	call	0x1590


0x5114:	test	eax, eax
0x5116:	mov	ebx, eax
0x5118:	js	0x4fc0


0x511e:	mov	dword ptr [rip + 0x203130], 0xffffffff
0x5128:	jmp	0x50a3


0x3c61:	mov	r13, rax
0x3c64:	mov	eax, dword ptr [rax]
0x3c66:	test	r15d, r15d
0x3c69:	mov	rbx, qword ptr [rip + 0x204410]
0x3c70:	mov	dword ptr [rsp + 0x18], eax
0x3c74:	js	0x3de1


0x3de1:	call	0x1540


0x3c7a:	cmp	dword ptr [rip + 0x2043f7], r15d
0x3c81:	jg	0x3ce5


0x3c83:	cmp	r15d, 0x7fffffff
0x3c8a:	je	0x3de6


0x3ce5:	mov	eax, dword ptr [rbp + 4]
0x3ce8:	shl	r15, 4
0x3cec:	sub	rsp, 8
0x3cf0:	add	rbx, r15
0x3cf3:	lea	r15, [rbp + 8]
0x3cf7:	mov	r8d, dword ptr [rbp]
0x3cfb:	mov	r11, qword ptr [rbx]
0x3cfe:	mov	r12, qword ptr [rbx + 8]
0x3d02:	mov	rcx, r14
0x3d05:	or	eax, 1
0x3d08:	mov	dword ptr [rsp + 0x24], eax
0x3d0c:	push	qword ptr [rbp + 0x30]
0x3d0f:	mov	r9d, eax
0x3d12:	push	qword ptr [rbp + 0x28]
0x3d15:	push	r15
0x3d17:	mov	rsi, r11
0x3d1a:	mov	rdx, qword ptr [rsp + 0x28]
0x3d1f:	mov	rdi, r12
0x3d22:	mov	qword ptr [rsp + 0x30], r11
0x3d27:	call	0x2a00


0x3de6:	call	0x4e20


0x3c90:	lea	r12d, [r15 + 1]
0x3c94:	lea	rax, [rip + 0x2043f5]
0x3c9b:	movsxd	rsi, r12d
0x3c9e:	shl	rsi, 4
0x3ca2:	cmp	rbx, rax
0x3ca5:	je	0x3dc0


0x3dc0:	xor	edi, edi
0x3dc2:	call	0x4c30


0x3cab:	mov	rdi, rbx
0x3cae:	call	0x4c30


0x3cb3:	mov	rbx, rax
0x3cb6:	mov	qword ptr [rip + 0x2043c3], rax
0x3cbd:	movsxd	rdi, dword ptr [rip + 0x2043b4]
0x3cc4:	mov	edx, r12d
0x3cc7:	xor	esi, esi
0x3cc9:	sub	edx, edi
0x3ccb:	shl	rdi, 4
0x3ccf:	movsxd	rdx, edx
0x3cd2:	add	rdi, rbx
0x3cd5:	shl	rdx, 4
0x3cd9:	call	0x1670


0x1670:	jmp	qword ptr [rip + 0x20686a]




0x3dc7:	movdqa	xmm0, xmmword ptr [rip + 0x2042c1]
0x3dcf:	mov	rbx, rax
0x3dd2:	mov	qword ptr [rip + 0x2042a7], rax
0x3dd9:	movups	xmmword ptr [rax], xmm0
0x3ddc:	jmp	0x3cbd


0x3cbd:	movsxd	rdi, dword ptr [rip + 0x2043b4]
0x3cc4:	mov	edx, r12d
0x3cc7:	xor	esi, esi
0x3cc9:	sub	edx, edi
0x3ccb:	shl	rdi, 4
0x3ccf:	movsxd	rdx, edx
0x3cd2:	add	rdi, rbx
0x3cd5:	shl	rdx, 4
0x3cd9:	call	0x1670


0x3dfc:	mov	r12d, dword ptr [rax]
0x3dff:	mov	rbp, rax
0x3e02:	lea	rax, [rip + 0x204417]
0x3e09:	test	rbx, rbx
0x3e0c:	mov	esi, 0x38
0x3e11:	cmove	rbx, rax
0x3e15:	mov	rdi, rbx
0x3e18:	call	0x4dd0


0x3f32:	mov	r12d, dword ptr [rax]
0x3f35:	mov	rbp, rax
0x3f38:	lea	rax, [rbx + 8]
0x3f3c:	sub	rsp, 8
0x3f40:	mov	r9d, dword ptr [rbx + 4]
0x3f44:	push	qword ptr [rbx + 0x30]
0x3f47:	mov	r8d, dword ptr [rbx]
0x3f4a:	push	qword ptr [rbx + 0x28]
0x3f4d:	mov	rdx, r15
0x3f50:	push	rax
0x3f51:	mov	rcx, qword ptr [rsp + 0x28]
0x3f56:	mov	rsi, r14
0x3f59:	mov	rdi, r13
0x3f5c:	call	0x2a00


0x3faf:	test	r12, r12
0x3fb2:	mov	r13, rax
0x3fb5:	mov	eax, dword ptr [rax]
0x3fb7:	sete	bpl
0x3fbb:	or	ebp, dword ptr [rbx + 4]
0x3fbe:	lea	r10, [rbx + 8]
0x3fc2:	sub	rsp, 8
0x3fc6:	mov	r8d, dword ptr [rbx]
0x3fc9:	mov	rcx, r15
0x3fcc:	mov	dword ptr [rsp + 0x14], eax
0x3fd0:	push	qword ptr [rbx + 0x30]
0x3fd3:	mov	rdx, r14
0x3fd6:	push	qword ptr [rbx + 0x28]
0x3fd9:	push	r10
0x3fdb:	xor	esi, esi
0x3fdd:	mov	r9d, ebp
0x3fe0:	xor	edi, edi
0x3fe2:	mov	qword ptr [rsp + 0x40], r10
0x3fe7:	call	0x2a00


0x4bd9:	test	rax, rax
0x4bdc:	jne	0x4be3


0x4bde:	test	rbx, rbx
0x4be1:	jne	0x4be5


0x4be3:	pop	rbx
0x4be4:	ret	


0x4be5:	call	0x4e20


0x1c1b:	mov	rbx, rax
0x1c1e:	mov	rax, qword ptr [rip + 0x206483]
0x1c25:	lea	rsi, [rip + 0x383c]
0x1c2c:	xor	edi, edi
0x1c2e:	mov	edx, 5
0x1c33:	mov	qword ptr [rbx], rax
0x1c36:	call	0x15e0


0x4d89:	mov	rdx, rbx
0x4d8c:	xor	esi, esi
0x4d8e:	mov	rdi, rax
0x4d91:	pop	rbx
0x4d92:	jmp	0x1670


0x4de4:	add	rsp, 8
0x4de8:	mov	rdx, rbx
0x4deb:	mov	rsi, rbp
0x4dee:	pop	rbx
0x4def:	pop	rbp
0x4df0:	mov	rdi, rax
0x4df3:	jmp	0x16f0


0x16f0:	jmp	qword ptr [rip + 0x20682a]




0x2366:	mov	r14, qword ptr [r15]
0x2369:	mov	qword ptr [rsp], -1
0x2371:	test	r14, r14
0x2374:	je	0x242d


0x242d:	mov	rax, qword ptr [rsp]
0x2431:	add	rsp, 0x28
0x2435:	pop	rbx
0x2436:	pop	rbp
0x2437:	pop	r12
0x2439:	pop	r13
0x243b:	pop	r14
0x243d:	pop	r15
0x243f:	ret	


0x237a:	mov	r12, rax
0x237d:	mov	byte ptr [rsp + 0x17], 0
0x2382:	xor	ebx, ebx
0x2384:	jmp	0x23d7


0x23d7:	mov	rsi, qword ptr [rsp + 8]
0x23dc:	mov	rdx, r12
0x23df:	mov	rdi, r14
0x23e2:	call	0x1560


0x1560:	jmp	qword ptr [rip + 0x2068f2]




0x2631:	test	rax, rax
0x2634:	js	0x2645


0x2645:	mov	rdx, rax
0x2648:	mov	rsi, r12
0x264b:	mov	rdi, r14
0x264e:	call	0x2460


0x2636:	add	rsp, 8
0x263a:	pop	rbx
0x263b:	pop	rbp
0x263c:	pop	r12
0x263e:	pop	r13
0x2640:	pop	r14
0x2642:	pop	r15
0x2644:	ret	


0x4e09:	mov	rdi, rbx
0x4e0c:	lea	rsi, [rax + 1]
0x4e10:	pop	rbx
0x4e11:	jmp	0x4dd0


0x1c3b:	mov	rdi, qword ptr [rip + 0x206466]
0x1c42:	xor	ecx, ecx
0x1c44:	xor	esi, esi
0x1c46:	mov	qword ptr [r15 - 8], rax
0x1c4a:	mov	edx, 2
0x1c4f:	call	0x17a0


0x17a0:	jmp	qword ptr [rip + 0x2067d2]




0x45ff:	lea	rdx, [rip + 0x1d5a]
0x4606:	mov	rcx, rax
0x4609:	mov	r8d, 0x7e3
0x460f:	mov	esi, 1
0x4614:	mov	rdi, rbp
0x4617:	xor	eax, eax
0x4619:	call	0x1810


0x461e:	lea	rsi, [rip + 0x1aa3]
0x4625:	xor	edi, edi
0x4627:	mov	edx, 5
0x462c:	call	0x15e0


0x4631:	mov	rsi, rbp
0x4634:	mov	rdi, rax
0x4637:	call	0x16c0


0x16c0:	jmp	qword ptr [rip + 0x206842]




0x1fdd:	mov	rdi, qword ptr [rip + 0x2060fc]
0x1fe4:	mov	rdx, rax
0x1fe7:	mov	rcx, rbx
0x1fea:	mov	esi, 1
0x1fef:	xor	eax, eax
0x1ff1:	call	0x1810


0x1ff6:	mov	edi, ebp
0x1ff8:	call	0x17f0


0x17f0:	jmp	qword ptr [rip + 0x2067aa]




0x200b:	mov	rdx, rbx
0x200e:	mov	rsi, rax
0x2011:	mov	edi, 1
0x2016:	xor	eax, eax
0x2018:	call	0x1790


0x1790:	jmp	qword ptr [rip + 0x2067da]




0x2483:	mov	rbx, rax
0x2486:	mov	rsi, rbp
0x2489:	mov	edi, 1
0x248e:	call	0x4560


0x24ce:	mov	rbx, rax
0x24d1:	jmp	0x2486


0x2486:	mov	rsi, rbp
0x2489:	mov	edi, 1
0x248e:	call	0x4560


0x2511:	mov	rdi, rax
0x2514:	mov	rsi, rbx
0x2517:	call	0x16c0


0x4b64:	lea	rdx, [rip + 0x152c]
0x4b6b:	mov	rsi, rax
0x4b6e:	mov	edi, 1
0x4b73:	xor	eax, eax
0x4b75:	call	0x1790


0x4e37:	mov	edi, dword ptr [rip + 0x2031e3]
0x4e3d:	lea	rdx, [rip + 0xcb8]
0x4e44:	mov	rcx, rax
0x4e47:	xor	esi, esi
0x4e49:	xor	eax, eax
0x4e4b:	call	0x17b0


0x17b0:	jmp	qword ptr [rip + 0x2067ca]




0x27ec:	cmp	eax, 2
0x27ef:	jbe	0x2800


0x2800:	mov	edi, eax
0x2802:	call	0x45a0


0x51d3:	mov	edx, r12d
0x51d6:	mov	rsi, rbp
0x51d9:	mov	edi, eax
0x51db:	call	0x1660


0x1660:	jmp	qword ptr [rip + 0x206872]




0x27ad:	mov	ecx, ebx
0x27af:	xor	edx, edx
0x27b1:	xor	esi, esi
0x27b3:	pop	rbx
0x27b4:	mov	edi, eax
0x27b6:	jmp	0x1690


0x4e6c:	test	eax, eax
0x4e6e:	mov	rdi, rbx
0x4e71:	js	0x4ec7


0x4ec7:	pop	rbx
0x4ec8:	pop	rbp
0x4ec9:	pop	r12
0x4ecb:	jmp	0x15c0


0x4e73:	call	0x1740


0x15c0:	jmp	qword ptr [rip + 0x2068c2]




0x4e78:	test	eax, eax
0x4e7a:	jne	0x4ea8


0x4e7c:	mov	rdi, rbx
0x4e7f:	call	0x5160


0x4ea8:	mov	rdi, rbx
0x4eab:	call	0x1700


0x4eb0:	xor	esi, esi
0x4eb2:	mov	edx, 1
0x4eb7:	mov	edi, eax
0x4eb9:	call	0x1660


0x5237:	cmp	rax, -3
0x523b:	mov	rbp, rax
0x523e:	jbe	0x5260


0x5260:	mov	rdx, qword ptr [rsp + 8]
0x5265:	xor	rdx, qword ptr fs:[0x28]
0x526e:	mov	rax, rbp
0x5271:	jne	0x527e


0x5240:	test	r12, r12
0x5243:	je	0x5260


0x5273:	add	rsp, 0x18
0x5277:	pop	rbx
0x5278:	pop	rbp
0x5279:	pop	r12
0x527b:	pop	r13
0x527d:	ret	


0x527e:	call	0x1610


0x5245:	xor	edi, edi
0x5247:	call	0x5310


0x529c:	mov	ebx, dword ptr [rbp]
0x529f:	mov	rdi, rbp
0x52a2:	mov	r12, rax
0x52a5:	call	0x4e60


0x1889:	lea	rsi, [rip + 0x3c9a]
0x1890:	lea	rdi, [rip + 0x3c6a]
0x1897:	call	0x15d0


0x15d0:	jmp	qword ptr [rip + 0x2068ba]




0x531b:	mov	rdx, rax
0x531e:	mov	eax, 1
0x5323:	test	rdx, rdx
0x5326:	je	0x5345


0x5345:	add	rsp, 8
0x5349:	ret	


0x5328:	lea	rdi, [rip + 0x1071]
0x532f:	mov	ecx, 2
0x5334:	mov	rsi, rdx
0x5337:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5337:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5339:	seta	cl
0x533c:	sbb	cl, 0
0x533f:	xor	eax, eax
0x5341:	test	cl, cl
0x5343:	jne	0x5350


0x5350:	lea	rdi, [rip + 0x104b]
0x5357:	mov	ecx, 6
0x535c:	mov	rsi, rdx
0x535f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x535f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5361:	seta	al
0x5364:	sbb	al, 0
0x5366:	test	al, al
0x5368:	setne	al
0x536b:	add	rsp, 8
0x536f:	ret	


0x524c:	test	al, al
0x524e:	jne	0x5260


0x5250:	movzx	eax, byte ptr [r13]
0x5255:	mov	ebp, 1
0x525a:	mov	dword ptr [rbx], eax
0x525c:	nop	dword ptr [rax]
0x5260:	mov	rdx, qword ptr [rsp + 8]
0x5265:	xor	rdx, qword ptr fs:[0x28]
0x526e:	mov	rax, rbp
0x5271:	jne	0x527e


0x537e:	test	rax, rax
0x5381:	je	0x53a0


0x53a0:	lea	rax, [rip + 0x1001]
0x53a7:	add	rsp, 8
0x53ab:	ret	


0x5383:	cmp	byte ptr [rax], 0
0x5386:	lea	rdx, [rip + 0x101b]
0x538d:	cmove	rax, rdx
0x5391:	add	rsp, 8
0x5395:	ret	


0x2920:	movzx	edx, byte ptr [rax]
0x2923:	and	edx, 0xffffffdf
0x2926:	cmp	dl, 0x55
0x2929:	je	0x29a0


0x29a0:	movzx	edx, byte ptr [rax + 1]
0x29a4:	and	edx, 0xffffffdf
0x29a7:	cmp	dl, 0x54
0x29aa:	jne	0x2930


0x292b:	cmp	dl, 0x47
0x292e:	je	0x2950


0x29ac:	movzx	edx, byte ptr [rax + 2]
0x29b0:	and	edx, 0xffffffdf
0x29b3:	cmp	dl, 0x46
0x29b6:	jne	0x2930


0x2930:	lea	rax, [rip + 0x3234]
0x2937:	lea	rdx, [rip + 0x322f]
0x293e:	cmp	ebx, 9
0x2941:	cmovne	rax, rdx
0x2945:	add	rsp, 8
0x2949:	pop	rbx
0x294a:	pop	rbp
0x294b:	ret	


0x2950:	movzx	edx, byte ptr [rax + 1]
0x2954:	and	edx, 0xffffffdf
0x2957:	cmp	dl, 0x42
0x295a:	jne	0x2930


0x29bc:	cmp	byte ptr [rax + 3], 0x2d
0x29c0:	jne	0x2930


0x295c:	cmp	byte ptr [rax + 2], 0x31
0x2960:	jne	0x2930


0x29c6:	cmp	byte ptr [rax + 4], 0x38
0x29ca:	jne	0x2930


0x2962:	cmp	byte ptr [rax + 3], 0x38
0x2966:	jne	0x2930


0x29d0:	cmp	byte ptr [rax + 5], 0
0x29d4:	jne	0x2930


0x2968:	cmp	byte ptr [rax + 4], 0x30
0x296c:	jne	0x2930


0x29da:	cmp	byte ptr [rbp], 0x60
0x29de:	lea	rax, [rip + 0x3177]
0x29e5:	lea	rdx, [rip + 0x3174]
0x29ec:	cmovne	rax, rdx
0x29f0:	add	rsp, 8
0x29f4:	pop	rbx
0x29f5:	pop	rbp
0x29f6:	ret	


0x296e:	cmp	byte ptr [rax + 5], 0x33
0x2972:	jne	0x2930


0x2974:	cmp	byte ptr [rax + 6], 0x30
0x2978:	jne	0x2930


0x297a:	cmp	byte ptr [rax + 7], 0
0x297e:	jne	0x2930


0x2980:	cmp	byte ptr [rbp], 0x60
0x2984:	lea	rax, [rip + 0x31d9]
0x298b:	lea	rdx, [rip + 0x31d6]
0x2992:	cmovne	rax, rdx
0x2996:	add	rsp, 8
0x299a:	pop	rbx
0x299b:	pop	rbp
0x299c:	ret	


0x189c:	lea	rdi, [rip + 0x3c5e]
0x18a3:	call	0x15b0


0x15b0:	jmp	qword ptr [rip + 0x2068ca]




0x4ebe:	cmp	rax, -1
0x4ec2:	jne	0x4e7c


0x4ec4:	mov	rdi, rbx
0x4ec7:	pop	rbx
0x4ec8:	pop	rbp
0x4ec9:	pop	r12
0x4ecb:	jmp	0x15c0


0x51e0:	cmp	rax, -1
0x51e4:	je	0x51f2


0x51f2:	pop	rbx
0x51f3:	pop	rbp
0x51f4:	pop	r12
0x51f6:	ret	


0x51e6:	and	dword ptr [rbx], 0xffffffef
0x51e9:	mov	qword ptr [rbx + 0x90], rax
0x51f0:	xor	eax, eax
0x51f2:	pop	rbx
0x51f3:	pop	rbp
0x51f4:	pop	r12
0x51f6:	ret	


0x2807:	test	eax, eax
0x2809:	mov	r12d, eax
0x280c:	js	0x2848


0x2848:	call	0x1550


0x280e:	mov	rdi, rbx
0x2811:	call	0x4e60


0x284d:	mov	r12d, dword ptr [rax]
0x2850:	mov	rbp, rax
0x2853:	mov	rdi, rbx
0x2856:	call	0x4e60


0x4e50:	call	0x1540


0x4b7a:	lea	rsi, [rip + 0x152c]
0x4b81:	mov	edx, 5
0x4b86:	xor	edi, edi
0x4b88:	call	0x15e0


0x4b8d:	lea	rcx, [rip + 0xe54]
0x4b94:	lea	rdx, [rip + 0x962]
0x4b9b:	mov	rsi, rax
0x4b9e:	mov	edi, 1
0x4ba3:	xor	eax, eax
0x4ba5:	call	0x1790


0x4baa:	mov	rbx, qword ptr [rip + 0x2034f7]
0x4bb1:	lea	rsi, [rip + 0x1728]
0x4bb8:	xor	edi, edi
0x4bba:	mov	edx, 5
0x4bbf:	call	0x15e0


0x4bc4:	mov	rsi, rbx
0x4bc7:	mov	rdi, rax
0x4bca:	pop	rbx
0x4bcb:	jmp	0x16c0


0x201d:	mov	rbx, qword ptr [rip + 0x206084]
0x2024:	lea	rsi, [rip + 0x3605]
0x202b:	mov	edx, 5
0x2030:	xor	edi, edi
0x2032:	call	0x15e0


0x2037:	mov	rsi, rbx
0x203a:	mov	rdi, rax
0x203d:	call	0x16c0


0x2042:	mov	rbx, qword ptr [rip + 0x20605f]
0x2049:	lea	rsi, [rip + 0x36a0]
0x2050:	mov	edx, 5
0x2055:	xor	edi, edi
0x2057:	call	0x15e0


0x205c:	mov	rsi, rbx
0x205f:	mov	rdi, rax
0x2062:	call	0x16c0


0x2067:	mov	rbx, qword ptr [rip + 0x20603a]
0x206e:	lea	rsi, [rip + 0x370b]
0x2075:	mov	edx, 5
0x207a:	xor	edi, edi
0x207c:	call	0x15e0


0x2081:	mov	rsi, rbx
0x2084:	mov	rdi, rax
0x2087:	call	0x16c0


0x208c:	mov	rbx, qword ptr [rip + 0x206015]
0x2093:	lea	rsi, [rip + 0x3716]
0x209a:	mov	edx, 5
0x209f:	xor	edi, edi
0x20a1:	call	0x15e0


0x20a6:	mov	rsi, rbx
0x20a9:	mov	rdi, rax
0x20ac:	call	0x16c0


0x20b1:	mov	rbx, qword ptr [rip + 0x205ff0]
0x20b8:	lea	rsi, [rip + 0x3729]
0x20bf:	mov	edx, 5
0x20c4:	xor	edi, edi
0x20c6:	call	0x15e0


0x20cb:	mov	rsi, rbx
0x20ce:	mov	rdi, rax
0x20d1:	lea	rbx, [rip + 0x33ab]
0x20d8:	call	0x16c0


0x20dd:	lea	rax, [rip + 0x33a3]
0x20e4:	lea	rcx, [rip + 0x33dd]
0x20eb:	mov	qword ptr [rsp + 0x60], 0
0x20f4:	mov	qword ptr [rsp + 0x68], 0
0x20fd:	mov	rdx, rsp
0x2100:	mov	qword ptr [rsp], rax
0x2104:	lea	rax, [rip + 0x337e]
0x210b:	mov	qword ptr [rsp + 0x30], rcx
0x2110:	lea	rcx, [rip + 0x33bb]
0x2117:	mov	qword ptr [rsp + 8], rax
0x211c:	lea	rax, [rip + 0x33de]
0x2123:	mov	qword ptr [rsp + 0x40], rcx
0x2128:	lea	rcx, [rip + 0x33ad]
0x212f:	mov	qword ptr [rsp + 0x10], rax
0x2134:	lea	rax, [rip + 0x335e]
0x213b:	mov	qword ptr [rsp + 0x50], rcx
0x2140:	mov	qword ptr [rsp + 0x18], rax
0x2145:	lea	rax, [rip + 0x3363]
0x214c:	mov	qword ptr [rsp + 0x20], rax
0x2151:	lea	rax, [rip + 0x3361]
0x2158:	mov	qword ptr [rsp + 0x28], rax
0x215d:	mov	qword ptr [rsp + 0x38], rax
0x2162:	mov	qword ptr [rsp + 0x48], rax
0x2167:	mov	qword ptr [rsp + 0x58], rax
0x216c:	nop	dword ptr [rax]
0x2170:	add	rdx, 0x10
0x2174:	mov	rdi, qword ptr [rdx]
0x2177:	test	rdi, rdi
0x217a:	je	0x218f


0x218f:	mov	r12, qword ptr [rdx + 8]
0x2193:	xor	edi, edi
0x2195:	mov	edx, 5
0x219a:	lea	rsi, [rip + 0x3345]
0x21a1:	test	r12, r12
0x21a4:	je	0x226b


0x217c:	mov	ecx, 4
0x2181:	mov	rsi, rbx
0x2184:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x226b:	call	0x15e0


0x21aa:	call	0x15e0


0x2184:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2186:	seta	al
0x2189:	sbb	al, 0
0x218b:	test	al, al
0x218d:	jne	0x2170


0x2170:	add	rdx, 0x10
0x2174:	mov	rdi, qword ptr [rdx]
0x2177:	test	rdi, rdi
0x217a:	je	0x218f


0x21af:	lea	rcx, [rip + 0x3832]
0x21b6:	lea	rdx, [rip + 0x3340]
0x21bd:	mov	rsi, rax
0x21c0:	mov	edi, 1
0x21c5:	xor	eax, eax
0x21c7:	call	0x1790


0x21cc:	xor	esi, esi
0x21ce:	mov	edi, 5
0x21d3:	call	0x1780


0x21d8:	test	rax, rax
0x21db:	je	0x21f9


0x21f9:	lea	rsi, [rip + 0x330f]
0x2200:	xor	edi, edi
0x2202:	mov	edx, 5
0x2207:	call	0x15e0


0x21dd:	lea	rsi, [rip + 0x3327]
0x21e4:	mov	edx, 3
0x21e9:	mov	rdi, rax
0x21ec:	call	0x1560


0x220c:	lea	rcx, [rip + 0x3270]
0x2213:	lea	rdx, [rip + 0x37ce]
0x221a:	mov	rsi, rax
0x221d:	mov	edi, 1
0x2222:	xor	eax, eax
0x2224:	call	0x1790


0x2229:	cmp	r12, rbx
0x222c:	lea	rcx, [rip + 0x3270]
0x2233:	lea	rbx, [rip + 0x3e47]
0x223a:	cmove	rbx, rcx
0x223e:	lea	rsi, [rip + 0x3813]
0x2245:	xor	edi, edi
0x2247:	mov	edx, 5
0x224c:	call	0x15e0


0x2251:	mov	rcx, rbx
0x2254:	mov	rsi, rax
0x2257:	mov	rdx, r12
0x225a:	mov	edi, 1
0x225f:	xor	eax, eax
0x2261:	call	0x1790


0x2266:	jmp	0x1ff6


0x2270:	lea	rcx, [rip + 0x3771]
0x2277:	lea	rdx, [rip + 0x327f]
0x227e:	mov	rsi, rax
0x2281:	mov	edi, 1
0x2286:	xor	eax, eax
0x2288:	call	0x1790


0x228d:	xor	esi, esi
0x228f:	mov	edi, 5
0x2294:	call	0x1780


0x2299:	test	rax, rax
0x229c:	je	0x22b6


0x22b6:	lea	rsi, [rip + 0x3252]
0x22bd:	mov	edx, 5
0x22c2:	xor	edi, edi
0x22c4:	lea	r12, [rip + 0x31b8]
0x22cb:	lea	rbx, [rip + 0x31d1]
0x22d2:	call	0x15e0


0x229e:	lea	rsi, [rip + 0x3266]
0x22a5:	mov	edx, 3
0x22aa:	mov	rdi, rax
0x22ad:	call	0x1560


0x22d7:	lea	rcx, [rip + 0x31a5]
0x22de:	lea	rdx, [rip + 0x3703]
0x22e5:	mov	rsi, rax
0x22e8:	mov	edi, 1
0x22ed:	xor	eax, eax
0x22ef:	call	0x1790


0x22f4:	jmp	0x223e


0x223e:	lea	rsi, [rip + 0x3813]
0x2245:	xor	edi, edi
0x2247:	mov	edx, 5
0x224c:	call	0x15e0


0x251c:	mov	r15, qword ptr [r14]
0x251f:	test	r15, r15
0x2522:	je	0x25b8


0x25b8:	mov	rdi, qword ptr [rip + 0x205b21]
0x25bf:	mov	rax, qword ptr [rdi + 0x28]
0x25c3:	cmp	rax, qword ptr [rdi + 0x30]
0x25c7:	jae	0x25e8


0x2528:	xor	r13d, r13d
0x252b:	xor	ebx, ebx
0x252d:	jmp	0x2568


0x25c9:	lea	rdx, [rax + 1]
0x25cd:	mov	qword ptr [rdi + 0x28], rdx
0x25d1:	mov	byte ptr [rax], 0xa
0x25d4:	add	rsp, 8
0x25d8:	pop	rbx
0x25d9:	pop	rbp
0x25da:	pop	r12
0x25dc:	pop	r13
0x25de:	pop	r14
0x25e0:	pop	r15
0x25e2:	ret	


0x25e8:	add	rsp, 8
0x25ec:	mov	esi, 0xa
0x25f1:	pop	rbx
0x25f2:	pop	rbp
0x25f3:	pop	r12
0x25f5:	pop	r13
0x25f7:	pop	r14
0x25f9:	pop	r15
0x25fb:	jmp	0x1640


0x2568:	test	rbx, rbx
0x256b:	je	0x2530


0x1640:	jmp	qword ptr [rip + 0x206882]


0x2530:	mov	rdi, r15
0x2533:	add	rbx, 1
0x2537:	mov	r13, rbp
0x253a:	call	0x4580


0x256d:	mov	rdx, r12
0x2570:	mov	rsi, rbp
0x2573:	mov	rdi, r13
0x2576:	call	0x16b0




0x257b:	test	eax, eax
0x257d:	jne	0x2530


0x257f:	mov	rdi, r15
0x2582:	add	rbx, 1
0x2586:	add	rbp, r12
0x2589:	call	0x4580


0x463c:	cmp	r12, 9
0x4640:	ja	0x4980


0x4646:	lea	rdx, [rip + 0x1cdb]
0x464d:	movsxd	rax, dword ptr [rdx + r12*4]
0x4651:	add	rax, rdx
0x4654:	jmp	rax


0x4980:	mov	r10, qword ptr [rbx + 0x40]
0x4984:	mov	r9, qword ptr [rbx + 0x38]
0x4988:	mov	edx, 5
0x498d:	mov	rax, qword ptr [rbx + 0x10]
0x4991:	mov	r8, qword ptr [rbx + 8]
0x4995:	lea	rsi, [rip + 0x1904]
0x499c:	mov	r13, qword ptr [rbx + 0x30]
0x49a0:	mov	r12, qword ptr [rbx + 0x28]
0x49a4:	mov	r15, qword ptr [rbx + 0x20]
0x49a8:	mov	r14, qword ptr [rbx + 0x18]
0x49ac:	mov	qword ptr [rsp + 0x18], r10
0x49b1:	mov	qword ptr [rsp + 0x10], r9
0x49b6:	mov	qword ptr [rsp], rax
0x49ba:	mov	qword ptr [rsp + 8], r8
0x49bf:	mov	rbx, qword ptr [rbx]
0x49c2:	jmp	0x4752


0x4752:	xor	edi, edi
0x4754:	call	0x15e0


0x4759:	mov	r10, qword ptr [rsp + 0x18]
0x475e:	push	r10
0x4760:	jmp	0x46a4


0x46a4:	mov	r9, qword ptr [rsp + 0x18]
0x46a9:	mov	rdx, rax
0x46ac:	mov	rcx, rbx
0x46af:	mov	esi, 1
0x46b4:	mov	rdi, rbp
0x46b7:	xor	eax, eax
0x46b9:	push	r9
0x46bb:	push	r13
0x46bd:	push	r12
0x46bf:	push	r15
0x46c1:	push	r14
0x46c3:	mov	r9, qword ptr [rsp + 0x30]
0x46c8:	mov	r8, qword ptr [rsp + 0x38]
0x46cd:	call	0x1810


0x46d2:	add	rsp, 0x30
0x46d6:	add	rsp, 0x28
0x46da:	pop	rbx
0x46db:	pop	rbp
0x46dc:	pop	r12
0x46de:	pop	r13
0x46e0:	pop	r14
0x46e2:	pop	r15
0x46e4:	ret	


0x1c54:	mov	eax, dword ptr [rsp + 0x1c]
0x1c58:	test	eax, eax
0x1c5a:	jle	0x1f6e


0x1f6e:	mov	byte ptr [rsp + 0x18], 1
0x1f73:	mov	ebp, 1
0x1f78:	jmp	0x1d08


0x1c60:	sub	eax, 1
0x1c63:	xor	r14d, r14d
0x1c66:	mov	byte ptr [rsp + 0x18], 1
0x1c6b:	mov	dword ptr [rsp + 0x10], eax
0x1c6f:	lea	r13, [rax*8 + 8]
0x1c77:	mov	ebp, 1
0x1c7c:	jmp	0x1c9e


0x1d08:	mov	eax, dword ptr [rsp + 0x1c]
0x1d0c:	lea	rax, [rax*8 + 8]
0x1d14:	mov	qword ptr [rsp + 8], rax
0x1d19:	lea	rax, [rsp + 0x20]
0x1d1e:	mov	qword ptr [rsp + 0x10], rax
0x1d23:	nop	dword ptr [rax + rax]
0x1d28:	mov	rsi, qword ptr [rsp + 0x10]
0x1d2d:	xor	edi, edi
0x1d2f:	mov	edx, 0x2000
0x1d34:	call	0x16a0


0x1c9e:	mov	rdi, qword ptr [r15 + r14]
0x1ca2:	mov	rsi, r12
0x1ca5:	call	0x27d0


0x16a0:	jmp	qword ptr [rip + 0x206852]




0x1caa:	test	rax, rax
0x1cad:	mov	qword ptr [rbx + r14 + 8], rax
0x1cb2:	jne	0x1c80


0x1cb4:	mov	rdx, qword ptr [r15 + r14]
0x1cb8:	xor	edi, edi
0x1cba:	mov	esi, 3
0x1cbf:	call	0x43b0


0x1c80:	xor	ecx, ecx
0x1c82:	xor	esi, esi
0x1c84:	mov	edx, 2
0x1c89:	mov	rdi, rax
0x1c8c:	add	r14, 8
0x1c90:	add	rbp, 1
0x1c94:	call	0x17a0


0x1c99:	cmp	r14, r13
0x1c9c:	je	0x1d03


0x1d03:	test	rbp, rbp
0x1d06:	je	0x1d6c


0x1d6c:	mov	r14d, dword ptr [rsp + 0x10]
0x1d71:	xor	ebp, ebp
0x1d73:	lea	r13, [rip + 0x3d82]
0x1d7a:	lea	r12, [r14*8 + 8]
0x1d82:	jmp	0x1d91


0x1d91:	mov	rdi, qword ptr [rbx + rbp + 8]
0x1d96:	test	rdi, rdi
0x1d99:	je	0x1d88


0x1d88:	add	rbp, 8
0x1d8c:	cmp	rbp, r12
0x1d8f:	je	0x1de0


0x1d9b:	call	0x4e60


0x1de0:	mov	rdi, rbx
0x1de3:	call	0x1530


0x1de8:	mov	rcx, qword ptr [rsp + 0x2028]
0x1df0:	xor	rcx, qword ptr fs:[0x28]
0x1df9:	movzx	eax, byte ptr [rsp + 0x18]
0x1dfe:	jne	0x1f7d


0x1e04:	add	rsp, 0x2038
0x1e0b:	pop	rbx
0x1e0c:	pop	rbp
0x1e0d:	pop	r12
0x1e0f:	pop	r13
0x1e11:	pop	r14
0x1e13:	pop	r15
0x1e15:	ret	


0x1f7d:	call	0x1610


0x22b2:	test	eax, eax
0x22b4:	jne	0x22f9


0x22f9:	lea	r12, [rip + 0x3183]
0x2300:	mov	r13, qword ptr [rip + 0x205da1]
0x2307:	lea	rsi, [rip + 0x3702]
0x230e:	xor	edi, edi
0x2310:	mov	edx, 5
0x2315:	call	0x15e0


0x231a:	mov	rsi, r13
0x231d:	mov	rdi, rax
0x2320:	call	0x16c0


0x2325:	jmp	0x21f9


0x21f1:	test	eax, eax
0x21f3:	jne	0x2300


0x2300:	mov	r13, qword ptr [rip + 0x205da1]
0x2307:	lea	rsi, [rip + 0x3702]
0x230e:	xor	edi, edi
0x2310:	mov	edx, 5
0x2315:	call	0x15e0


0x23e7:	test	eax, eax
0x23e9:	jne	0x23c7


0x23eb:	mov	rdi, r14
0x23ee:	call	0x1600


0x23c7:	add	rbx, 1
0x23cb:	add	rbp, r13
0x23ce:	mov	r14, qword ptr [r15 + rbx*8]
0x23d2:	test	r14, r14
0x23d5:	je	0x2418


0x2418:	cmp	byte ptr [rsp + 0x17], 0
0x241d:	mov	rax, -2
0x2424:	cmove	rax, qword ptr [rsp]
0x2429:	mov	qword ptr [rsp], rax
0x242d:	mov	rax, qword ptr [rsp]
0x2431:	add	rsp, 0x28
0x2435:	pop	rbx
0x2436:	pop	rbp
0x2437:	pop	r12
0x2439:	pop	r13
0x243b:	pop	r14
0x243d:	pop	r15
0x243f:	ret	


0x23f3:	cmp	rax, r12
0x23f6:	je	0x2450


0x2450:	mov	qword ptr [rsp], rbx
0x2454:	jmp	0x242d


0x23f8:	cmp	qword ptr [rsp], -1
0x23fd:	jne	0x2390


0x23ff:	mov	qword ptr [rsp], rbx
0x2403:	add	rbx, 1
0x2407:	add	rbp, r13
0x240a:	mov	r14, qword ptr [r15 + rbx*8]
0x240e:	test	r14, r14
0x2411:	jne	0x23d7


0x2390:	mov	rax, qword ptr [rsp + 0x18]
0x2395:	test	rax, rax
0x2398:	je	0x2440


0x2440:	mov	byte ptr [rsp + 0x17], 1
0x2445:	jmp	0x23c7


0x239e:	mov	rdi, qword ptr [rsp]
0x23a2:	mov	rdx, r13
0x23a5:	mov	rsi, rbp
0x23a8:	imul	rdi, r13
0x23ac:	add	rdi, rax
0x23af:	call	0x16b0


0x23b4:	test	eax, eax
0x23b6:	movzx	eax, byte ptr [rsp + 0x17]
0x23bb:	mov	ecx, 1
0x23c0:	cmovne	eax, ecx
0x23c3:	mov	byte ptr [rsp + 0x17], al
0x23c7:	add	rbx, 1
0x23cb:	add	rbp, r13
0x23ce:	mov	r14, qword ptr [r15 + rbx*8]
0x23d2:	test	r14, r14
0x23d5:	je	0x2418


0x3e1d:	mov	dword ptr [rbp], r12d
0x3e21:	pop	rbx
0x3e22:	pop	rbp
0x3e23:	pop	r12
0x3e25:	ret	


0x3cde:	mov	dword ptr [rip + 0x204393], r12d
0x3ce5:	mov	eax, dword ptr [rbp + 4]
0x3ce8:	shl	r15, 4
0x3cec:	sub	rsp, 8
0x3cf0:	add	rbx, r15
0x3cf3:	lea	r15, [rbp + 8]
0x3cf7:	mov	r8d, dword ptr [rbp]
0x3cfb:	mov	r11, qword ptr [rbx]
0x3cfe:	mov	r12, qword ptr [rbx + 8]
0x3d02:	mov	rcx, r14
0x3d05:	or	eax, 1
0x3d08:	mov	dword ptr [rsp + 0x24], eax
0x3d0c:	push	qword ptr [rbp + 0x30]
0x3d0f:	mov	r9d, eax
0x3d12:	push	qword ptr [rbp + 0x28]
0x3d15:	push	r15
0x3d17:	mov	rsi, r11
0x3d1a:	mov	rdx, qword ptr [rsp + 0x28]
0x3d1f:	mov	rdi, r12
0x3d22:	mov	qword ptr [rsp + 0x30], r11
0x3d27:	call	0x2a00


0x50e3:	mov	ebx, 0xffffffff
0x50e8:	mov	dword ptr [rbp], r12d
0x50ec:	jmp	0x4fc0


0x5197:	mov	rdi, rbx
0x519a:	pop	rbx
0x519b:	jmp	0x1720


0x4b16:	mov	rax, qword ptr [rsp + 0x78]
0x4b1b:	xor	rax, qword ptr fs:[0x28]
0x4b24:	jne	0x4b30


0x4b26:	add	rsp, 0xb8
0x4b2d:	pop	rbx
0x4b2e:	pop	rbp
0x4b2f:	ret	


0x4b30:	call	0x1610


0x4a40:	mov	rax, qword ptr [rsp + 0x58]
0x4a45:	xor	rax, qword ptr fs:[0x28]
0x4a4e:	jne	0x4a55


0x4a50:	add	rsp, 0x68
0x4a54:	ret	


0x4a55:	call	0x1610


0x1d39:	test	rax, rax
0x1d3c:	mov	r12, rax
0x1d3f:	jns	0x1e20


0x1d45:	call	0x1550


0x1e20:	je	0x1d5d


0x1d5d:	mov	eax, dword ptr [rsp + 0x1c]
0x1d61:	test	eax, eax
0x1d63:	jle	0x1de0


0x1e26:	mov	eax, dword ptr [rsp + 0x1c]
0x1e2a:	test	eax, eax
0x1e2c:	js	0x1ef5


0x1d65:	sub	eax, 1
0x1d68:	mov	dword ptr [rsp + 0x10], eax
0x1d6c:	mov	r14d, dword ptr [rsp + 0x10]
0x1d71:	xor	ebp, ebp
0x1d73:	lea	r13, [rip + 0x3d82]
0x1d7a:	lea	r12, [r14*8 + 8]
0x1d82:	jmp	0x1d91


0x1ef5:	test	rbp, rbp
0x1ef8:	jne	0x1d28


0x1e32:	xor	r14d, r14d
0x1e35:	nop	dword ptr [rax]
0x1e38:	mov	r13, qword ptr [rbx + r14]
0x1e3c:	test	r13, r13
0x1e3f:	je	0x1ee6


0x1efe:	jmp	0x1d53


0x1d28:	mov	rsi, qword ptr [rsp + 0x10]
0x1d2d:	xor	edi, edi
0x1d2f:	mov	edx, 0x2000
0x1d34:	call	0x16a0


0x1ee6:	add	r14, 8
0x1eea:	cmp	qword ptr [rsp + 8], r14
0x1eef:	jne	0x1e38


0x1e45:	mov	rdi, qword ptr [rsp + 0x10]
0x1e4a:	mov	rcx, r13
0x1e4d:	mov	edx, 1
0x1e52:	mov	rsi, r12
0x1e55:	call	0x1750


0x1d53:	cmp	r12, -1
0x1d57:	je	0x1f3b


0x1e38:	mov	r13, qword ptr [rbx + r14]
0x1e3c:	test	r13, r13
0x1e3f:	je	0x1ee6


0x1750:	jmp	qword ptr [rip + 0x2067fa]


0x1f3b:	lea	rsi, [rip + 0x3536]
0x1f42:	mov	edx, 5
0x1f47:	xor	edi, edi
0x1f49:	call	0x15e0




0x1f4e:	mov	rbp, rax
0x1f51:	call	0x1550


0x1f56:	mov	esi, dword ptr [rax]
0x1f58:	mov	rdx, rbp
0x1f5b:	xor	edi, edi
0x1f5d:	xor	eax, eax
0x1f5f:	call	0x17b0


0x1f64:	mov	byte ptr [rsp + 0x18], 0
0x1f69:	jmp	0x1d5d


0x1d4a:	cmp	dword ptr [rax], 4
0x1d4d:	je	0x1ef5


0x18a8:	lea	rdi, [rip + 0xe31]
0x18af:	call	0x5430


0x18b4:	mov	byte ptr [rip + 0x206836], 0
0x18bb:	mov	byte ptr [rip + 0x20682e], 0
0x18c2:	lea	rdx, [rip + 0x3cb8]
0x18c9:	xor	r8d, r8d
0x18cc:	mov	rcx, r12
0x18cf:	mov	rsi, rbx
0x18d2:	mov	edi, ebp
0x18d4:	call	0x1620


0x1620:	jmp	qword ptr [rip + 0x206892]




0x4e84:	test	eax, eax
0x4e86:	je	0x4ec4


0x4e88:	call	0x1550


0x4e8d:	mov	r12d, dword ptr [rax]
0x4e90:	mov	rdi, rbx
0x4e93:	mov	rbp, rax
0x4e96:	call	0x15c0


0x4e9b:	test	r12d, r12d
0x4e9e:	jne	0x4ed0


0x4ea0:	pop	rbx
0x4ea1:	pop	rbp
0x4ea2:	pop	r12
0x4ea4:	ret	


0x4ed0:	mov	dword ptr [rbp], r12d
0x4ed4:	mov	eax, 0xffffffff
0x4ed9:	jmp	0x4ea0


0x1da0:	test	eax, eax
0x1da2:	je	0x1d88


0x1da4:	mov	rdx, qword ptr [r15 + rbp]
0x1da8:	xor	edi, edi
0x1daa:	mov	esi, 3
0x1daf:	add	rbp, 8
0x1db3:	call	0x43b0


0x285b:	xor	ebx, ebx
0x285d:	mov	dword ptr [rbp], r12d
0x2861:	jmp	0x27f1


0x2816:	test	eax, eax
0x2818:	jne	0x282d


0x281a:	mov	rsi, rbp
0x281d:	mov	edi, r12d
0x2820:	call	0x1770


0x282d:	call	0x1550


0x1770:	jmp	qword ptr [rip + 0x2067ea]




0x2832:	mov	ebp, dword ptr [rax]
0x2834:	mov	rbx, rax
0x2837:	mov	edi, r12d
0x283a:	call	0x1680


0x283f:	mov	dword ptr [rbx], ebp
0x2841:	xor	ebx, ebx
0x2843:	jmp	0x27f1


0x52aa:	and	ebx, 0x20
0x52ad:	test	ebx, ebx
0x52af:	jne	0x52c8


0x52b1:	test	eax, eax
0x52b3:	je	0x52bf


0x52c8:	test	eax, eax
0x52ca:	jne	0x52e8


0x52bf:	pop	rbx
0x52c0:	pop	rbp
0x52c1:	pop	r12
0x52c3:	ret	


0x52b5:	test	r12, r12
0x52b8:	mov	eax, 0xffffffff
0x52bd:	je	0x52f8


0x52cc:	call	0x1550


0x52e8:	pop	rbx
0x52e9:	mov	eax, 0xffffffff
0x52ee:	pop	rbp
0x52ef:	pop	r12
0x52f1:	ret	


0x52f8:	call	0x1550


0x52fd:	cmp	dword ptr [rax], 9
0x5300:	pop	rbx
0x5301:	pop	rbp
0x5302:	pop	r12
0x5304:	setne	al
0x5307:	movzx	eax, al
0x530a:	neg	eax
0x530c:	ret	


0x52d1:	mov	dword ptr [rax], 0
0x52d7:	mov	eax, 0xffffffff
0x52dc:	pop	rbx
0x52dd:	pop	rbp
0x52de:	pop	r12
0x52e0:	ret	


0x26f2:	test	eax, eax
0x26f4:	je	0x270c


0x270c:	mov	rdi, qword ptr [rip + 0x2059cd]
0x2713:	call	0x5290


0x26f6:	call	0x1550


0x26fb:	cmp	byte ptr [rip + 0x2059f6], 0
0x2702:	mov	rbx, rax
0x2705:	je	0x2723


0x2723:	lea	rsi, [rip + 0x33d5]
0x272a:	xor	edi, edi
0x272c:	mov	edx, 5
0x2731:	call	0x15e0


0x2707:	cmp	dword ptr [rax], 0x20
0x270a:	jne	0x2723


0x2736:	mov	rdi, qword ptr [rip + 0x2059c3]
0x273d:	mov	rbp, rax
0x2740:	test	rdi, rdi
0x2743:	je	0x276d


0x276d:	mov	esi, dword ptr [rbx]
0x276f:	lea	rdx, [rip + 0x3386]
0x2776:	mov	rcx, rax
0x2779:	xor	edi, edi
0x277b:	xor	eax, eax
0x277d:	call	0x17b0


0x2745:	call	0x4380


0x2782:	jmp	0x2762


0x2762:	mov	edi, dword ptr [rip + 0x2058b8]
0x2768:	call	0x1570


0x1570:	jmp	qword ptr [rip + 0x2068ea]




0x2718:	test	eax, eax
0x271a:	jne	0x2762


0x271c:	add	rsp, 8
0x2720:	pop	rbx
0x2721:	pop	rbp
0x2722:	ret	


0x2825:	test	rax, rax
0x2828:	mov	rbx, rax
0x282b:	jne	0x27f1


0x18d9:	cmp	eax, -1
0x18dc:	je	0x19cb


0x19cb:	cmp	byte ptr [rip + 0x20671e], 0
0x19d2:	jne	0x1a09


0x18e2:	cmp	eax, 0x61
0x18e5:	je	0x19a0


0x19d4:	cmp	dword ptr [rip + 0x206711], 0
0x19db:	jne	0x1a1a


0x1a09:	mov	esi, 1
0x1a0e:	mov	edi, 2
0x1a13:	call	0x16e0


0x19a0:	mov	byte ptr [rip + 0x20674a], 1
0x19a7:	jmp	0x18c2


0x18eb:	jle	0x1950


0x19dd:	movsxd	rdx, dword ptr [rip + 0x2066d4]
0x19e4:	mov	edi, ebp
0x19e6:	lea	rsi, [rbx + rdx*8]
0x19ea:	sub	edi, edx
0x19ec:	call	0x1b90


0x1a1a:	mov	esi, 1
0x1a1f:	mov	edi, 0xd
0x1a24:	call	0x16e0


0x16e0:	jmp	qword ptr [rip + 0x206832]


0x18c2:	lea	rdx, [rip + 0x3cb8]
0x18c9:	xor	r8d, r8d
0x18cc:	mov	rcx, r12
0x18cf:	mov	rsi, rbx
0x18d2:	mov	edi, ebp
0x18d4:	call	0x1620


0x1950:	cmp	eax, 0xffffff7d
0x1955:	jne	0x1a2b


0x18ed:	cmp	eax, 0x69
0x18f0:	je	0x19b0




0x195b:	lea	rax, [rip + 0x3c0f]
0x1962:	mov	rdi, qword ptr [rip + 0x20673f]
0x1969:	mov	rcx, qword ptr [rip + 0x2066a0]
0x1970:	push	0
0x1972:	lea	r9, [rip + 0x3bd8]
0x1979:	lea	r8, [rip + 0x3be5]
0x1980:	push	rax
0x1981:	lea	rdx, [rip + 0x3b75]
0x1988:	lea	rsi, [rip + 0x3af4]
0x198f:	xor	eax, eax
0x1991:	call	0x4a70


0x1a2b:	cmp	eax, 0xffffff7e
0x1a30:	jne	0x1a39


0x19b0:	mov	byte ptr [rip + 0x206739], 1
0x19b7:	jmp	0x18c2


0x18f6:	cmp	eax, 0x70
0x18f9:	jne	0x1a39


0x1a32:	xor	edi, edi
0x1a34:	call	0x1fa0


0x1a39:	mov	edi, 1
0x1a3e:	call	0x1fa0


0x18ff:	mov	rsi, qword ptr [rip + 0x2067ba]
0x1906:	test	rsi, rsi
0x1909:	je	0x19bc


0x19bc:	mov	dword ptr [rip + 0x206726], 2
0x19c6:	jmp	0x18c2


0x190f:	mov	r9, qword ptr [rip + 0x206702]
0x1916:	lea	rdx, [rip + 0x2061c3]
0x191d:	lea	rcx, [rip + 0x416c]
0x1924:	lea	rdi, [rip + 0x3c17]
0x192b:	mov	r8d, 4
0x1931:	call	0x2600


0x1936:	lea	rdx, [rip + 0x4153]
0x193d:	mov	eax, dword ptr [rdx + rax*4]
0x1940:	mov	dword ptr [rip + 0x2067a6], eax
0x1946:	jmp	0x18c2


0x1996:	xor	edi, edi
0x1998:	call	0x17f0


0x19f1:	xor	edi, edi
0x19f3:	mov	ebx, eax
0x19f5:	call	0x1680


0x19fa:	test	eax, eax
0x19fc:	jne	0x1a43


0x19fe:	xor	ebx, 1
0x1a01:	movzx	eax, bl
0x1a04:	pop	rbx
0x1a05:	pop	rbp
0x1a06:	pop	r12
0x1a08:	ret	


0x1a43:	lea	rsi, [rip + 0x3b3b]
0x1a4a:	mov	edx, 5
0x1a4f:	xor	edi, edi
0x1a51:	call	0x15e0


0x1a56:	mov	rbx, rax
0x1a59:	call	0x1550


0x1a5e:	mov	esi, dword ptr [rax]
0x1a60:	lea	rdx, [rip + 0x4095]
0x1a67:	mov	rcx, rbx
0x1a6a:	mov	edi, 1
0x1a6f:	xor	eax, eax
0x1a71:	call	0x17b0


0x1a76:	nop	word ptr cs:[rax + rax]


0x1e5a:	cmp	rax, 1
0x1e5e:	je	0x1ee6


0x1e64:	call	0x1550


0x1e69:	mov	r10d, dword ptr [rax]
0x1e6c:	mov	rax, qword ptr [rip + 0x206235]
0x1e73:	cmp	r10d, 0x20
0x1e77:	je	0x1f08


0x1f08:	mov	edx, dword ptr [rip + 0x2061de]
0x1f0e:	and	edx, 0xfffffffd
0x1f11:	cmp	edx, 1
0x1f14:	je	0x1e7d


0x1e7d:	cmp	r13, rax
0x1e80:	jne	0x1e94


0x1f1a:	cmp	r13, rax
0x1f1d:	je	0x1f29


0x1e82:	mov	rdi, r13
0x1e85:	mov	dword ptr [rsp + 0x18], r10d
0x1e8a:	call	0x15a0


0x1e94:	mov	rdx, qword ptr [r15 + r14 - 8]
0x1e99:	xor	edi, edi
0x1e9b:	mov	esi, 3
0x1ea0:	mov	dword ptr [rsp + 0x18], r10d
0x1ea5:	call	0x43b0


0x1f29:	mov	rdi, r13
0x1f2c:	call	0x15a0


0x1f1f:	mov	qword ptr [rbx + r14], 0
0x1f27:	jmp	0x1ee2


0x15a0:	jmp	qword ptr [rip + 0x2068d2]


0x1ee2:	sub	rbp, 1
0x1ee6:	add	r14, 8
0x1eea:	cmp	qword ptr [rsp + 8], r14
0x1eef:	jne	0x1e38




0x1f31:	mov	qword ptr [rbx + r14], 0
0x1f39:	jmp	0x1ee2


0x1e8f:	mov	r10d, dword ptr [rsp + 0x18]
0x1e94:	mov	rdx, qword ptr [r15 + r14 - 8]
0x1e99:	xor	edi, edi
0x1e9b:	mov	esi, 3
0x1ea0:	mov	dword ptr [rsp + 0x18], r10d
0x1ea5:	call	0x43b0


0x1a29:	jmp	0x19dd


0x1a18:	jmp	0x19d4


0x274a:	mov	esi, dword ptr [rbx]
0x274c:	lea	rdx, [rip + 0x33b8]
0x2753:	mov	rcx, rax
0x2756:	mov	r8, rbp
0x2759:	xor	edi, edi
0x275b:	xor	eax, eax
0x275d:	call	0x17b0


0x1eaa:	mov	ecx, dword ptr [rip + 0x20623c]
0x1eb0:	mov	r10d, dword ptr [rsp + 0x18]
0x1eb5:	xor	edi, edi
0x1eb7:	lea	edx, [rcx - 3]
0x1eba:	mov	esi, r10d
0x1ebd:	mov	rcx, rax
0x1ec0:	cmp	edx, 1
0x1ec3:	lea	rdx, [rip + 0x3c32]
0x1eca:	setbe	dil
0x1ece:	xor	eax, eax
0x1ed0:	call	0x17b0


0x1ed5:	mov	qword ptr [rbx + r14], 0
0x1edd:	mov	byte ptr [rsp + 0x18], 0
0x1ee2:	sub	rbp, 1
0x1ee6:	add	r14, 8
0x1eea:	cmp	qword ptr [rsp + 8], r14
0x1eef:	jne	0x1e38


0x1db8:	mov	r14, rax
0x1dbb:	call	0x1550


0x1dc0:	mov	esi, dword ptr [rax]
0x1dc2:	xor	edi, edi
0x1dc4:	xor	eax, eax
0x1dc6:	mov	rcx, r14
0x1dc9:	mov	rdx, r13
0x1dcc:	call	0x17b0


0x1dd1:	cmp	rbp, r12
0x1dd4:	mov	byte ptr [rsp + 0x18], 0
0x1dd9:	jne	0x1d91


0x1cc4:	mov	qword ptr [rsp + 8], rax
0x1cc9:	call	0x1550


0x1cce:	mov	ecx, dword ptr [rip + 0x206418]
0x1cd4:	mov	esi, dword ptr [rax]
0x1cd6:	xor	edi, edi
0x1cd8:	lea	edx, [rcx - 3]
0x1cdb:	mov	rcx, qword ptr [rsp + 8]
0x1ce0:	cmp	edx, 1
0x1ce3:	lea	rdx, [rip + 0x3e12]
0x1cea:	setbe	dil
0x1cee:	xor	eax, eax
0x1cf0:	add	r14, 8
0x1cf4:	call	0x17b0


0x1cf9:	cmp	r14, r13
0x1cfc:	mov	byte ptr [rsp + 0x18], 0
0x1d01:	jne	0x1c9e


0x258e:	mov	rdi, qword ptr [rip + 0x205b4b]
0x2595:	lea	rdx, [rip + 0x355e]
0x259c:	mov	rcx, rax
0x259f:	mov	esi, 1
0x25a4:	xor	eax, eax
0x25a6:	call	0x1810


0x25ab:	mov	r15, qword ptr [r14 + rbx*8]
0x25af:	test	r15, r15
0x25b2:	jne	0x2568


0x253f:	mov	rdi, qword ptr [rip + 0x205b9a]
0x2546:	lea	rdx, [rip + 0x35a5]
0x254d:	mov	rcx, rax
0x2550:	mov	esi, 1
0x2555:	xor	eax, eax
0x2557:	add	rbp, r12
0x255a:	call	0x1810


0x255f:	mov	r15, qword ptr [r14 + rbx*8]
0x2563:	test	r15, r15
0x2566:	je	0x25b8


0x2493:	mov	rdx, r12
0x2496:	mov	rbp, rax
0x2499:	mov	esi, 8
0x249e:	xor	edi, edi
0x24a0:	call	0x4190


0x24a5:	mov	r8, rbp
0x24a8:	mov	rdx, rbx
0x24ab:	mov	rcx, rax
0x24ae:	pop	rbx
0x24af:	pop	rbp
0x24b0:	pop	r12
0x24b2:	xor	esi, esi
0x24b4:	xor	edi, edi
0x24b6:	xor	eax, eax
0x24b8:	jmp	0x17b0


0x2653:	mov	rdx, r15
0x2656:	mov	rsi, rbp
0x2659:	mov	rdi, rbx
0x265c:	call	0x24e0


0x2661:	call	r13


0x3d2c:	add	rsp, 0x20
0x3d30:	mov	r11, qword ptr [rsp + 0x10]
0x3d35:	cmp	r11, rax
0x3d38:	ja	0x3da1


0x3d3a:	lea	rsi, [rax + 1]
0x3d3e:	lea	rax, [rip + 0x2043db]
0x3d45:	cmp	r12, rax
0x3d48:	mov	qword ptr [rbx], rsi
0x3d4b:	je	0x3d5f


0x3da1:	mov	eax, dword ptr [rsp + 0x18]
0x3da5:	mov	dword ptr [r13], eax
0x3da9:	add	rsp, 0x28
0x3dad:	mov	rax, r12
0x3db0:	pop	rbx
0x3db1:	pop	rbp
0x3db2:	pop	r12
0x3db4:	pop	r13
0x3db6:	pop	r14
0x3db8:	pop	r15
0x3dba:	ret	


0x3d5f:	mov	rdi, rsi
0x3d62:	mov	qword ptr [rsp + 0x10], rsi
0x3d67:	call	0x4bd0


0x3d4d:	mov	rdi, r12
0x3d50:	mov	qword ptr [rsp + 0x10], rsi
0x3d55:	call	0x1530


0x3d5a:	mov	rsi, qword ptr [rsp + 0x10]
0x3d5f:	mov	rdi, rsi
0x3d62:	mov	qword ptr [rsp + 0x10], rsi
0x3d67:	call	0x4bd0


0x3d6c:	sub	rsp, 8
0x3d70:	mov	qword ptr [rbx + 8], rax
0x3d74:	mov	r8d, dword ptr [rbp]
0x3d78:	push	qword ptr [rbp + 0x30]
0x3d7b:	push	qword ptr [rbp + 0x28]
0x3d7e:	mov	rcx, r14
0x3d81:	push	r15
0x3d83:	mov	r9d, dword ptr [rsp + 0x3c]
0x3d88:	mov	rdi, rax
0x3d8b:	mov	rdx, qword ptr [rsp + 0x28]
0x3d90:	mov	rsi, qword ptr [rsp + 0x30]
0x3d95:	mov	r12, rax
0x3d98:	call	0x2a00


0x44b2:	mov	rdi, qword ptr [rsp + 0x38]
0x44b7:	xor	rdi, qword ptr fs:[0x28]
0x44c0:	jne	0x44cc


0x44c2:	add	rsp, 0x48
0x44c6:	ret	


0x44cc:	call	0x1610


0x41ff:	mov	rcx, qword ptr [rsp + 0x38]
0x4204:	xor	rcx, qword ptr fs:[0x28]
0x420d:	jne	0x4219


0x420f:	add	rsp, 0x48
0x4213:	ret	


0x4219:	call	0x1610


0x428b:	mov	rdx, qword ptr [rsp + 0x38]
0x4290:	xor	rdx, qword ptr fs:[0x28]
0x4299:	jne	0x42a5


0x429b:	add	rsp, 0x48
0x429f:	ret	


0x42a5:	call	0x1610


0x441f:	mov	rcx, qword ptr [rsp + 0x38]
0x4424:	xor	rcx, qword ptr fs:[0x28]
0x442d:	jne	0x4439


0x442f:	add	rsp, 0x48
0x4433:	ret	


0x4439:	call	0x1610


0x434e:	mov	rsi, qword ptr [rsp + 0x38]
0x4353:	xor	rsi, qword ptr fs:[0x28]
0x435c:	jne	0x4363


0x435e:	add	rsp, 0x48
0x4362:	ret	


0x4363:	call	0x1610


0x3d9d:	add	rsp, 0x20
0x3da1:	mov	eax, dword ptr [rsp + 0x18]
0x3da5:	mov	dword ptr [r13], eax
0x3da9:	add	rsp, 0x28
0x3dad:	mov	rax, r12
0x3db0:	pop	rbx
0x3db1:	pop	rbp
0x3db2:	pop	r12
0x3db4:	pop	r13
0x3db6:	pop	r14
0x3db8:	pop	r15
0x3dba:	ret	


0x3fec:	lea	rsi, [rax + 1]
0x3ff0:	mov	qword ptr [rsp + 0x48], rax
0x3ff5:	add	rsp, 0x20
0x3ff9:	mov	rdi, rsi
0x3ffc:	mov	qword ptr [rsp + 0x18], rsi
0x4001:	call	0x4bd0


0x4006:	mov	qword ptr [rsp + 0x10], rax
0x400b:	sub	rsp, 8
0x400f:	push	qword ptr [rbx + 0x30]
0x4012:	push	qword ptr [rbx + 0x28]
0x4015:	mov	r10, qword ptr [rsp + 0x38]
0x401a:	mov	r9d, ebp
0x401d:	mov	r8d, dword ptr [rbx]
0x4020:	mov	rcx, r15
0x4023:	mov	rdx, r14
0x4026:	mov	rdi, rax
0x4029:	push	r10
0x402b:	mov	rsi, qword ptr [rsp + 0x38]
0x4030:	call	0x2a00


0x4035:	mov	eax, dword ptr [rsp + 0x2c]
0x4039:	add	rsp, 0x20
0x403d:	test	r12, r12
0x4040:	mov	dword ptr [r13], eax
0x4044:	je	0x404f


0x404f:	mov	rax, qword ptr [rsp + 0x10]
0x4054:	add	rsp, 0x38
0x4058:	pop	rbx
0x4059:	pop	rbp
0x405a:	pop	r12
0x405c:	pop	r13
0x405e:	pop	r14
0x4060:	pop	r15
0x4062:	ret	


0x4046:	mov	r11, qword ptr [rsp + 0x28]
0x404b:	mov	qword ptr [r12], r11
0x404f:	mov	rax, qword ptr [rsp + 0x10]
0x4054:	add	rsp, 0x38
0x4058:	pop	rbx
0x4059:	pop	rbp
0x405a:	pop	r12
0x405c:	pop	r13
0x405e:	pop	r14
0x4060:	pop	r15
0x4062:	ret	


0x3f61:	mov	dword ptr [rbp], r12d
0x3f65:	add	rsp, 0x38
0x3f69:	pop	rbx
0x3f6a:	pop	rbp
0x3f6b:	pop	r12
0x3f6d:	pop	r13
0x3f6f:	pop	r14
0x3f71:	pop	r15
0x3f73:	ret	


0x2664:	mov	rax, -1
0x266b:	jmp	0x2636


0x53fd:	add	rbx, 1
0x5401:	cmp	rbp, rbx
0x5404:	jne	0x53f0


0x53f0:	mov	rdx, r15
0x53f3:	mov	rsi, r14
0x53f6:	mov	edi, r13d
0x53f9:	call	qword ptr [r12 + rbx*8]






0x4840:	lea	rsi, [rip + 0x1951]
0x4847:	mov	edx, 5
0x484c:	xor	edi, edi
0x484e:	mov	r14, qword ptr [rbx + 0x18]
0x4852:	mov	r13, qword ptr [rbx + 0x10]
0x4856:	mov	r12, qword ptr [rbx + 8]
0x485a:	mov	rbx, qword ptr [rbx]
0x485d:	call	0x15e0


0x4660:	mov	r9, qword ptr [rbx + 0x38]
0x4664:	mov	rax, qword ptr [rbx + 0x10]
0x4668:	lea	rsi, [rip + 0x1bc9]
0x466f:	mov	r8, qword ptr [rbx + 8]
0x4673:	mov	edx, 5
0x4678:	xor	edi, edi
0x467a:	mov	r13, qword ptr [rbx + 0x30]
0x467e:	mov	r12, qword ptr [rbx + 0x28]
0x4682:	mov	qword ptr [rsp + 0x10], r9
0x4687:	mov	r15, qword ptr [rbx + 0x20]
0x468b:	mov	r14, qword ptr [rbx + 0x18]
0x468f:	mov	qword ptr [rsp], rax
0x4693:	mov	qword ptr [rsp + 8], r8
0x4698:	mov	rbx, qword ptr [rbx]
0x469b:	call	0x15e0


0x4768:	mov	rbx, qword ptr [rbx]
0x476b:	lea	rsi, [rip + 0x18cd]
0x4772:	mov	edx, 5
0x4777:	xor	edi, edi
0x4779:	call	0x15e0


0x47a8:	mov	r12, qword ptr [rbx + 8]
0x47ac:	lea	rsi, [rip + 0x189c]
0x47b3:	mov	rbx, qword ptr [rbx]
0x47b6:	mov	edx, 5
0x47bb:	xor	edi, edi
0x47bd:	call	0x15e0


0x48c8:	mov	r8, qword ptr [rbx + 8]
0x48cc:	mov	r12, qword ptr [rbx + 0x28]
0x48d0:	lea	rsi, [rip + 0x1909]
0x48d7:	mov	r15, qword ptr [rbx + 0x20]
0x48db:	mov	r14, qword ptr [rbx + 0x18]
0x48df:	mov	edx, 5
0x48e4:	mov	r13, qword ptr [rbx + 0x10]
0x48e8:	xor	edi, edi
0x48ea:	mov	rbx, qword ptr [rbx]
0x48ed:	mov	qword ptr [rsp], r8
0x48f1:	call	0x15e0


0x47f0:	mov	r13, qword ptr [rbx + 0x10]
0x47f4:	mov	r12, qword ptr [rbx + 8]
0x47f8:	lea	rsi, [rip + 0x1867]
0x47ff:	mov	rbx, qword ptr [rbx]
0x4802:	mov	edx, 5
0x4807:	xor	edi, edi
0x4809:	call	0x15e0


0x4930:	mov	r9, qword ptr [rbx + 0x10]
0x4934:	mov	r13, qword ptr [rbx + 0x30]
0x4938:	lea	rsi, [rip + 0x18c9]
0x493f:	mov	r12, qword ptr [rbx + 0x28]
0x4943:	mov	r15, qword ptr [rbx + 0x20]
0x4947:	mov	edx, 5
0x494c:	mov	r14, qword ptr [rbx + 0x18]
0x4950:	mov	r8, qword ptr [rbx + 8]
0x4954:	xor	edi, edi
0x4956:	mov	qword ptr [rsp + 8], r9
0x495b:	mov	rbx, qword ptr [rbx]
0x495e:	mov	qword ptr [rsp], r8
0x4962:	call	0x15e0


0x4710:	mov	r10, qword ptr [rbx + 0x40]
0x4714:	mov	r9, qword ptr [rbx + 0x38]
0x4718:	lea	rsi, [rip + 0x1b49]
0x471f:	mov	rax, qword ptr [rbx + 0x10]
0x4723:	mov	r8, qword ptr [rbx + 8]
0x4727:	mov	edx, 5
0x472c:	mov	r13, qword ptr [rbx + 0x30]
0x4730:	mov	r12, qword ptr [rbx + 0x28]
0x4734:	mov	r15, qword ptr [rbx + 0x20]
0x4738:	mov	r14, qword ptr [rbx + 0x18]
0x473c:	mov	rbx, qword ptr [rbx]
0x473f:	mov	qword ptr [rsp + 0x18], r10
0x4744:	mov	qword ptr [rsp + 0x10], r9
0x4749:	mov	qword ptr [rsp], rax
0x474d:	mov	qword ptr [rsp + 8], r8
0x4752:	xor	edi, edi
0x4754:	call	0x15e0


0x46d6:	add	rsp, 0x28
0x46da:	pop	rbx
0x46db:	pop	rbp
0x46dc:	pop	r12
0x46de:	pop	r13
0x46e0:	pop	r14
0x46e2:	pop	r15
0x46e4:	ret	


0x4898:	mov	r15, qword ptr [rbx + 0x20]
0x489c:	lea	rsi, [rip + 0x1915]
0x48a3:	mov	edx, 5
0x48a8:	xor	edi, edi
0x48aa:	mov	r14, qword ptr [rbx + 0x18]
0x48ae:	mov	r13, qword ptr [rbx + 0x10]
0x48b2:	mov	r12, qword ptr [rbx + 8]
0x48b6:	mov	rbx, qword ptr [rbx]
0x48b9:	call	0x15e0


0x48be:	push	r15
0x48c0:	jmp	0x4866


0x4866:	push	r14
0x4868:	mov	rdx, rax
0x486b:	mov	r9, r13
0x486e:	mov	r8, r12
0x4871:	mov	rcx, rbx
0x4874:	mov	rdi, rbp
0x4877:	mov	esi, 1
0x487c:	xor	eax, eax
0x487e:	call	0x1810


0x4883:	pop	rax
0x4884:	pop	rdx
0x4885:	add	rsp, 0x28
0x4889:	pop	rbx
0x488a:	pop	rbp
0x488b:	pop	r12
0x488d:	pop	r13
0x488f:	pop	r14
0x4891:	pop	r15
0x4893:	ret	


0x4967:	push	r13
0x4969:	push	r12
0x496b:	push	r15
0x496d:	push	r14
0x496f:	mov	r9, qword ptr [rsp + 0x28]
0x4974:	jmp	0x4903


0x4903:	mov	r8, qword ptr [rsp + 0x20]
0x4908:	mov	rcx, rbx
0x490b:	mov	rdx, rax
0x490e:	mov	rdi, rbp
0x4911:	mov	esi, 1
0x4916:	xor	eax, eax
0x4918:	call	0x1810


0x491d:	add	rsp, 0x20
0x4921:	add	rsp, 0x28
0x4925:	pop	rbx
0x4926:	pop	rbp
0x4927:	pop	r12
0x4929:	pop	r13
0x492b:	pop	r14
0x492d:	pop	r15
0x492f:	ret	


0x480e:	add	rsp, 0x28
0x4812:	mov	r9, r13
0x4815:	mov	r8, r12
0x4818:	mov	rcx, rbx
0x481b:	mov	rdi, rbp
0x481e:	mov	rdx, rax
0x4821:	pop	rbx
0x4822:	pop	rbp
0x4823:	pop	r12
0x4825:	pop	r13
0x4827:	pop	r14
0x4829:	pop	r15
0x482b:	mov	esi, 1
0x4830:	xor	eax, eax
0x4832:	jmp	0x1810


0x48f6:	sub	rsp, 8
0x48fa:	mov	r9, r13
0x48fd:	push	r12
0x48ff:	push	r15
0x4901:	push	r14
0x4903:	mov	r8, qword ptr [rsp + 0x20]
0x4908:	mov	rcx, rbx
0x490b:	mov	rdx, rax
0x490e:	mov	rdi, rbp
0x4911:	mov	esi, 1
0x4916:	xor	eax, eax
0x4918:	call	0x1810


0x47c2:	add	rsp, 0x28
0x47c6:	mov	r8, r12
0x47c9:	mov	rcx, rbx
0x47cc:	mov	rdi, rbp
0x47cf:	mov	rdx, rax
0x47d2:	mov	esi, 1
0x47d7:	pop	rbx
0x47d8:	pop	rbp
0x47d9:	pop	r12
0x47db:	pop	r13
0x47dd:	pop	r14
0x47df:	pop	r15
0x47e1:	xor	eax, eax
0x47e3:	jmp	0x1810


0x477e:	add	rsp, 0x28
0x4782:	mov	rcx, rbx
0x4785:	mov	rdi, rbp
0x4788:	pop	rbx
0x4789:	pop	rbp
0x478a:	pop	r12
0x478c:	pop	r13
0x478e:	pop	r14
0x4790:	pop	r15
0x4792:	mov	rdx, rax
0x4795:	mov	esi, 1
0x479a:	xor	eax, eax
0x479c:	jmp	0x1810


0x46a0:	sub	rsp, 8
0x46a4:	mov	r9, qword ptr [rsp + 0x18]
0x46a9:	mov	rdx, rax
0x46ac:	mov	rcx, rbx
0x46af:	mov	esi, 1
0x46b4:	mov	rdi, rbp
0x46b7:	xor	eax, eax
0x46b9:	push	r9
0x46bb:	push	r13
0x46bd:	push	r12
0x46bf:	push	r15
0x46c1:	push	r14
0x46c3:	mov	r9, qword ptr [rsp + 0x30]
0x46c8:	mov	r8, qword ptr [rsp + 0x38]
0x46cd:	call	0x1810


0x4862:	sub	rsp, 8
0x4866:	push	r14
0x4868:	mov	rdx, rax
0x486b:	mov	r9, r13
0x486e:	mov	r8, r12
0x4871:	mov	rcx, rbx
0x4874:	mov	rdi, rbp
0x4877:	mov	esi, 1
0x487c:	xor	eax, eax
0x487e:	call	0x1810


0x35a0:	sub	rsp, 8
0x35a4:	mov	rcx, rbp
0x35a7:	mov	rsi, r13
0x35aa:	push	qword ptr [rsp + 0x68]
0x35ae:	push	qword ptr [rsp + 0x78]
0x35b2:	mov	rdi, r14
0x35b5:	push	0
0x35b7:	mov	r9d, dword ptr [rsp + 0x98]
0x35bf:	mov	r8d, dword ptr [rsp + 0x28]
0x35c4:	mov	rdx, qword ptr [rsp + 0x30]
0x35c9:	and	r9d, 0xfffffffd
0x35cd:	call	0x2a00


0x35d2:	add	rsp, 0x20
0x35d6:	mov	r15, rax
0x35d9:	mov	rbx, qword ptr [rsp + 0xa8]
0x35e1:	xor	rbx, qword ptr fs:[0x28]
0x35ea:	mov	rax, r15
0x35ed:	jne	0x3bf3


0x35f3:	add	rsp, 0xb8
0x35fa:	pop	rbx
0x35fb:	pop	rbp
0x35fc:	pop	r12
0x35fe:	pop	r13
0x3600:	pop	r14
0x3602:	pop	r15
0x3604:	ret	


0x3bf3:	call	0x1610


0x3b9d:	sub	rsp, 8
0x3ba1:	mov	r8d, 5
0x3ba7:	mov	rcx, r11
0x3baa:	push	qword ptr [rsp + 0x68]
0x3bae:	push	qword ptr [rsp + 0x78]
0x3bb2:	mov	rdi, r14
0x3bb5:	push	qword ptr [rsp + 0x38]
0x3bb9:	mov	r9d, dword ptr [rsp + 0x98]
0x3bc1:	mov	rdx, qword ptr [rsp + 0x30]
0x3bc6:	mov	rsi, qword ptr [rsp + 0x70]
0x3bcb:	call	0x2a00


0x3bd0:	add	rsp, 0x20
0x3bd4:	mov	r15, rax
0x3bd7:	jmp	0x35d9


0x35d9:	mov	rbx, qword ptr [rsp + 0xa8]
0x35e1:	xor	rbx, qword ptr fs:[0x28]
0x35ea:	mov	rax, r15
0x35ed:	jne	0x3bf3


0x1520:	push	qword ptr [rip + 0x20690a]
0x1526:	jmp	qword ptr [rip + 0x20690c]


0x152c:	nop	dword ptr [rax]


0x1536:	push	0
0x153b:	jmp	0x1520


0x1546:	push	1
0x154b:	jmp	0x1520


0x1556:	push	2
0x155b:	jmp	0x1520


0x1566:	push	3
0x156b:	jmp	0x1520


0x1576:	push	4
0x157b:	jmp	0x1520


0x1586:	push	5
0x158b:	jmp	0x1520


0x1596:	push	6
0x159b:	jmp	0x1520


0x15a6:	push	7
0x15ab:	jmp	0x1520


0x15b6:	push	8
0x15bb:	jmp	0x1520


0x15c6:	push	9
0x15cb:	jmp	0x1520


0x15d6:	push	0xa
0x15db:	jmp	0x1520


0x15e6:	push	0xb
0x15eb:	jmp	0x1520


0x15f6:	push	0xc
0x15fb:	jmp	0x1520


0x1606:	push	0xd
0x160b:	jmp	0x1520


0x1616:	push	0xe
0x161b:	jmp	0x1520


0x1626:	push	0xf
0x162b:	jmp	0x1520


0x1636:	push	0x10
0x163b:	jmp	0x1520


0x1646:	push	0x11
0x164b:	jmp	0x1520


0x1656:	push	0x12
0x165b:	jmp	0x1520


0x1666:	push	0x13
0x166b:	jmp	0x1520


0x1676:	push	0x14
0x167b:	jmp	0x1520


0x1686:	push	0x15
0x168b:	jmp	0x1520


0x1696:	push	0x16
0x169b:	jmp	0x1520


0x16a6:	push	0x17
0x16ab:	jmp	0x1520


0x16b6:	push	0x18
0x16bb:	jmp	0x1520


0x16c6:	push	0x19
0x16cb:	jmp	0x1520


0x16d6:	push	0x1a
0x16db:	jmp	0x1520


0x16e6:	push	0x1b
0x16eb:	jmp	0x1520


0x16f6:	push	0x1c
0x16fb:	jmp	0x1520


0x1706:	push	0x1d
0x170b:	jmp	0x1520


0x1716:	push	0x1e
0x171b:	jmp	0x1520


0x1726:	push	0x1f
0x172b:	jmp	0x1520


0x1736:	push	0x20
0x173b:	jmp	0x1520


0x1746:	push	0x21
0x174b:	jmp	0x1520


0x1756:	push	0x22
0x175b:	jmp	0x1520


0x1766:	push	0x23
0x176b:	jmp	0x1520


0x1776:	push	0x24
0x177b:	jmp	0x1520


0x1786:	push	0x25
0x178b:	jmp	0x1520


0x1796:	push	0x26
0x179b:	jmp	0x1520


0x17a6:	push	0x27
0x17ab:	jmp	0x1520


0x17b6:	push	0x28
0x17bb:	jmp	0x1520


0x17c6:	push	0x29
0x17cb:	jmp	0x1520


0x17d6:	push	0x2a
0x17db:	jmp	0x1520


0x17e6:	push	0x2b
0x17eb:	jmp	0x1520


0x17f6:	push	0x2c
0x17fb:	jmp	0x1520


0x1806:	push	0x2d
0x180b:	jmp	0x1520


0x1816:	push	0x2e
0x181b:	jmp	0x1520


0x1820:	jmp	qword ptr [rip + 0x206792]




0x1826:	push	0x2f
0x182b:	jmp	0x1520


0x1830:	jmp	qword ptr [rip + 0x20678a]




0x1836:	push	0x30
0x183b:	jmp	0x1520


0x1840:	jmp	qword ptr [rip + 0x206782]




0x1846:	push	0x31
0x184b:	jmp	0x1520


0x1aaa:	hlt	


0x1aab:	nop	dword ptr [rax + rax]


0x1ae2:	nop	dword ptr [rax]
0x1ae6:	nop	word ptr cs:[rax + rax]


0x1b32:	nop	dword ptr [rax]
0x1b36:	nop	word ptr cs:[rax + rax]


0x1b7a:	nop	word ptr [rax + rax]


0x1b8a:	nop	word ptr [rax + rax]


0x1f91:	nop	dword ptr [rax + rax]
0x1f96:	nop	word ptr cs:[rax + rax]


0x232a:	nop	word ptr [rax + rax]


0x233a:	nop	word ptr [rax + rax]


0x2456:	nop	word ptr cs:[rax + rax]


0x24d3:	nop	dword ptr [rax]
0x24d6:	nop	word ptr cs:[rax + rax]


0x266d:	nop	dword ptr [rax]


0x26bd:	nop	dword ptr [rax]


0x26c8:	nop	dword ptr [rax + rax]


0x26d8:	nop	dword ptr [rax + rax]


0x2784:	nop	word ptr cs:[rax + rax]
0x278e:	nop	


0x2795:	nop	
0x2796:	nop	word ptr cs:[rax + rax]


0x27c2:	nop	word ptr cs:[rax + rax]
0x27cc:	nop	dword ptr [rax]


0x2863:	nop	word ptr cs:[rax + rax]
0x286d:	nop	dword ptr [rax]


0x290f:	nop	


0x29f7:	nop	word ptr [rax + rax]


0x2a93:	mov	byte ptr [rsp + 0xe], 1
0x2a98:	mov	byte ptr [rsp + 0x7c], 0
0x2a9d:	xor	r12d, r12d
0x2aa0:	mov	qword ptr [rsp + 0x50], 0
0x2aa9:	mov	byte ptr [rsp + 0xf], 1
0x2aae:	mov	byte ptr [rsp + 0xd], 0
0x2ab3:	lea	rax, [rip + 0x30b3]
0x2aba:	mov	qword ptr [rsp + 0x18], 1
0x2ac3:	xor	r15d, r15d
0x2ac6:	mov	dword ptr [rsp + 8], 2
0x2ace:	mov	qword ptr [rsp + 0x48], rax
0x2ad3:	xor	r11d, r11d
0x2ad6:	mov	rax, rbp
0x2ad9:	mov	r8d, r12d
0x2adc:	mov	rbp, r11
0x2adf:	mov	r11, rax
0x2ae2:	nop	word ptr [rax + rax]
0x2ae8:	cmp	r11, rbp
0x2aeb:	setne	r12b
0x2aef:	cmp	r11, -1
0x2af3:	jne	0x2b02


0x2af5:	mov	rax, qword ptr [rsp + 0x10]
0x2afa:	cmp	byte ptr [rax + rbp], 0
0x2afe:	setne	r12b
0x2b02:	test	r12b, r12b
0x2b05:	je	0x3160


0x2b02:	test	r12b, r12b
0x2b05:	je	0x3160


0x3160:	cmp	dword ptr [rsp + 8], 2
0x3165:	movzx	ebx, byte ptr [rsp + 0xf]
0x316a:	mov	r12d, r8d
0x316d:	mov	rbp, r11
0x3170:	sete	dl
0x3173:	mov	eax, ebx
0x3175:	test	r15, r15
0x3178:	sete	cl
0x317b:	and	eax, edx
0x317d:	and	al, cl
0x317f:	jne	0x3be6


0x2b0b:	cmp	dword ptr [rsp + 8], 2
0x2b10:	mov	rdi, qword ptr [rsp + 0x10]
0x2b15:	lea	r9, [rdi + rbp]
0x2b19:	setne	al
0x2b1c:	and	al, byte ptr [rsp + 0xd]
0x2b20:	mov	r10d, eax
0x2b23:	je	0x2bd0


0x3185:	mov	eax, ebx
0x3187:	xor	eax, 1
0x318a:	and	dl, al
0x318c:	je	0x3afc


0x3be6:	mov	dword ptr [rsp + 8], 2
0x3bee:	jmp	0x3589


0x2bd0:	movzx	ebx, byte ptr [r9]
0x2bd4:	cmp	bl, 0x7e
0x2bd7:	ja	0x2ef8


0x2b29:	mov	rax, qword ptr [rsp + 0x18]
0x2b2e:	test	rax, rax
0x2b31:	je	0x2f60


0x3afc:	mov	rbx, qword ptr [rsp + 0x48]
0x3b01:	test	rbx, rbx
0x3b04:	je	0x3b32


0x3192:	cmp	byte ptr [rsp + 0x7c], 0
0x3197:	je	0x3afa


0x3589:	cmp	byte ptr [rsp + 0xd], 0
0x358e:	je	0x35a0


0x2bdd:	lea	rcx, [rip + 0x3008]
0x2be4:	movzx	edx, bl
0x2be7:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2beb:	add	rax, rcx
0x2bee:	jmp	rax


0x2ef8:	cmp	qword ptr [rsp + 0x58], 1
0x2efe:	jne	0x32a8


0x2f60:	movzx	ebx, byte ptr [r9]
0x2f64:	cmp	bl, 0x7e
0x2f67:	ja	0x2ef0


0x2b37:	cmp	r11, -1
0x2b3b:	lea	rbx, [rbp + rax]
0x2b40:	jne	0x2b70


0x3b32:	cmp	r13, r15
0x3b35:	jbe	0x35d9


0x3b06:	test	al, al
0x3b08:	je	0x3b32


0x3afa:	mov	eax, edx
0x3afc:	mov	rbx, qword ptr [rsp + 0x48]
0x3b01:	test	rbx, rbx
0x3b04:	je	0x3b32


0x319d:	cmp	byte ptr [rsp + 0xe], 0
0x31a2:	jne	0x3b9d


0x3590:	test	al, al
0x3592:	mov	eax, 4
0x3597:	cmove	eax, dword ptr [rsp + 8]
0x359c:	mov	dword ptr [rsp + 8], eax


0x2f04:	mov	qword ptr [rsp + 0x38], r11
0x2f09:	mov	byte ptr [rsp + 0x30], r8b
0x2f0e:	mov	byte ptr [rsp + 0x28], r10b
0x2f13:	call	0x1840


0x32a8:	lea	rax, [rsp + 0xa0]
0x32b0:	cmp	r11, -1
0x32b4:	mov	qword ptr [rsp + 0xa0], 0
0x32c0:	mov	qword ptr [rsp + 0x28], rax
0x32c5:	jne	0x32f4


0x2f69:	lea	rcx, [rip + 0x2e78]
0x2f70:	movzx	edx, bl
0x2f73:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2f77:	add	rax, rcx
0x2f7a:	jmp	rax


0x2ef0:	xor	r10d, r10d
0x2ef3:	nop	dword ptr [rax + rax]
0x2ef8:	cmp	qword ptr [rsp + 0x58], 1
0x2efe:	jne	0x32a8


0x2b42:	cmp	rax, 1
0x2b46:	jbe	0x2b70


0x2b70:	cmp	rbx, r11
0x2b73:	mov	byte ptr [rsp + 0x28], r10b
0x2b78:	ja	0x3130


0x3b3b:	mov	byte ptr [r14 + r15], 0
0x3b40:	jmp	0x35d9


0x3b0a:	movzx	ecx, byte ptr [rbx]
0x3b0d:	mov	rax, rbx
0x3b10:	test	cl, cl
0x3b12:	je	0x3b32


0x31a8:	test	r13, r13
0x31ab:	sete	al
0x31ae:	cmp	qword ptr [rsp + 0x50], 0
0x31b4:	setne	dl
0x31b7:	and	al, dl
0x31b9:	je	0x3bdc


0x32c7:	mov	rdi, qword ptr [rsp + 0x10]
0x32cc:	mov	byte ptr [rsp + 0x40], r8b
0x32d1:	mov	byte ptr [rsp + 0x38], r10b
0x32d6:	mov	qword ptr [rsp + 0x30], r9
0x32db:	call	0x1600


0x32f4:	lea	rax, [rsp + 0x9c]
0x32fc:	xor	ecx, ecx
0x32fe:	mov	byte ptr [rsp + 0x7e], bl
0x3302:	mov	byte ptr [rsp + 0x7d], r8b
0x3307:	mov	rbx, rcx
0x330a:	mov	qword ptr [rsp + 0x88], r9
0x3312:	mov	qword ptr [rsp + 0x38], rax
0x3317:	mov	byte ptr [rsp + 0x7f], r10b
0x331c:	mov	qword ptr [rsp + 0x80], r15
0x3324:	mov	qword ptr [rsp + 0x40], r14
0x3329:	mov	qword ptr [rsp + 0x70], r13
0x332e:	mov	qword ptr [rsp + 0x30], r11
0x3333:	mov	rax, qword ptr [rsp + 0x10]
0x3338:	lea	r14, [rbp + rbx]
0x333d:	mov	rdx, qword ptr [rsp + 0x30]
0x3342:	mov	rcx, qword ptr [rsp + 0x28]
0x3347:	mov	rdi, qword ptr [rsp + 0x38]
0x334c:	lea	r13, [rax + r14]
0x3350:	sub	rdx, r14
0x3353:	mov	rsi, r13
0x3356:	call	0x5200


0x2b48:	mov	byte ptr [rsp + 0x38], r8b
0x2b4d:	mov	byte ptr [rsp + 0x30], r10b
0x2b52:	mov	qword ptr [rsp + 0x28], r9
0x2b57:	call	0x1600


0x2b7e:	mov	rdx, qword ptr [rsp + 0x18]
0x2b83:	mov	rsi, qword ptr [rsp + 0x48]
0x2b88:	mov	rdi, r9
0x2b8b:	mov	qword ptr [rsp + 0x40], r11
0x2b90:	mov	byte ptr [rsp + 0x38], r8b
0x2b95:	mov	qword ptr [rsp + 0x30], r9
0x2b9a:	call	0x16b0


0x3130:	xor	r10d, r10d
0x3133:	jmp	0x2bd0


0x3b14:	mov	rdx, r15
0x3b17:	sub	rax, r15
0x3b1a:	cmp	r13, rdx
0x3b1d:	jbe	0x3b23


0x3bdc:	movzx	eax, byte ptr [rsp + 0x7c]
0x3be1:	jmp	0x3afc


0x31bf:	mov	r13, qword ptr [rsp + 0x50]
0x31c4:	lea	rbx, [rip + 0x29a2]
0x31cb:	mov	byte ptr [r14], 0x27
0x31cf:	mov	dword ptr [rsp + 8], 2
0x31d7:	mov	r15d, 1
0x31dd:	mov	qword ptr [rsp + 0x18], 1
0x31e6:	mov	byte ptr [rsp + 0xf], 0
0x31eb:	mov	qword ptr [rsp + 0x48], rbx
0x31f0:	mov	byte ptr [rsp + 0x7c], al
0x31f4:	jmp	0x2ad3


0x3b23:	add	rdx, 1
0x3b27:	movzx	ecx, byte ptr [rax + rdx]
0x3b2b:	test	cl, cl
0x3b2d:	jne	0x3b1a


0x3b1f:	mov	byte ptr [r14 + rdx], cl
0x3b23:	add	rdx, 1
0x3b27:	movzx	ecx, byte ptr [rax + rdx]
0x3b2b:	test	cl, cl
0x3b2d:	jne	0x3b1a


0x2ad3:	xor	r11d, r11d
0x2ad6:	mov	rax, rbp
0x2ad9:	mov	r8d, r12d
0x2adc:	mov	rbp, r11
0x2adf:	mov	r11, rax
0x2ae2:	nop	word ptr [rax + rax]
0x2ae8:	cmp	r11, rbp
0x2aeb:	setne	r12b
0x2aef:	cmp	r11, -1
0x2af3:	jne	0x2b02


0x3b2f:	mov	r15, rdx
0x3b32:	cmp	r13, r15
0x3b35:	jbe	0x35d9


0x3b1a:	cmp	r13, rdx
0x3b1d:	jbe	0x3b23


0x2b9f:	test	eax, eax
0x2ba1:	mov	r9, qword ptr [rsp + 0x30]
0x2ba6:	movzx	r8d, byte ptr [rsp + 0x38]
0x2bac:	mov	r11, qword ptr [rsp + 0x40]
0x2bb1:	jne	0x3130


0x2bb7:	cmp	byte ptr [rsp + 0xf], 0
0x2bbc:	movzx	r10d, byte ptr [rsp + 0x28]
0x2bc2:	jne	0x3b45


0x3b45:	cmp	dword ptr [rsp + 8], 2
0x3b4a:	movzx	ebx, byte ptr [rsp + 0xf]
0x3b4f:	mov	rbp, r11
0x3b52:	sete	al
0x3b55:	mov	byte ptr [rsp + 0xd], bl
0x3b59:	jmp	0x3589


0x335b:	test	rax, rax
0x335e:	mov	r15, rax
0x3361:	je	0x33b1


0x33b1:	mov	edx, r12d
0x33b4:	mov	rdi, rbx
0x33b7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x33bd:	xor	edx, 1
0x33c0:	movzx	ebx, byte ptr [rsp + 0x7e]
0x33c5:	movzx	r10d, byte ptr [rsp + 0x7f]
0x33cb:	and	dl, byte ptr [rsp + 0xd]
0x33cf:	mov	r15, qword ptr [rsp + 0x80]
0x33d7:	mov	r14, qword ptr [rsp + 0x40]
0x33dc:	mov	r13, qword ptr [rsp + 0x70]
0x33e1:	mov	r11, qword ptr [rsp + 0x30]
0x33e6:	cmp	rdi, 1
0x33ea:	jbe	0x39eb


0x3363:	cmp	rax, -1
0x3367:	je	0x3985


0x39eb:	mov	eax, edx
0x39ed:	jmp	0x2f47


0x33f0:	mov	rcx, rdi
0x33f3:	xor	esi, esi
0x33f5:	movzx	r9d, byte ptr [rsp + 0xf]
0x33fb:	add	rcx, rbp
0x33fe:	mov	rdi, qword ptr [rsp + 0x10]
0x3403:	jmp	0x34be


0x3985:	mov	rdi, rbx
0x3988:	movzx	r8d, byte ptr [rsp + 0x7d]
0x398e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3993:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3999:	mov	r15, qword ptr [rsp + 0x80]
0x39a1:	xor	r12d, r12d
0x39a4:	mov	r14, qword ptr [rsp + 0x40]
0x39a9:	mov	r13, qword ptr [rsp + 0x70]
0x39ae:	mov	r11, qword ptr [rsp + 0x30]
0x39b3:	movzx	edx, byte ptr [rsp + 0xd]
0x39b8:	jmp	0x33e6


0x336d:	cmp	rax, -2
0x3371:	je	0x3911


0x2f47:	test	al, al
0x2f49:	jne	0x38e1


0x34be:	test	dl, dl
0x34c0:	jne	0x3410


0x33e6:	cmp	rdi, 1
0x33ea:	jbe	0x39eb


0x3911:	mov	r11, qword ptr [rsp + 0x30]
0x3916:	mov	rsi, r14
0x3919:	mov	rcx, r13
0x391c:	mov	rax, rbx
0x391f:	mov	rdi, rbx
0x3922:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3928:	movzx	ebx, byte ptr [rsp + 0x7e]
0x392d:	mov	r9, qword ptr [rsp + 0x88]
0x3935:	cmp	rsi, r11
0x3938:	movzx	r10d, byte ptr [rsp + 0x7f]
0x393e:	mov	r15, qword ptr [rsp + 0x80]
0x3946:	mov	r14, qword ptr [rsp + 0x40]
0x394b:	mov	r13, qword ptr [rsp + 0x70]
0x3950:	jae	0x3978


0x3377:	cmp	dword ptr [rsp + 8], 2
0x337c:	sete	al
0x337f:	and	al, byte ptr [rsp + 0xf]
0x3383:	jne	0x3520


0x2f4f:	cmp	dword ptr [rsp + 8], 2
0x2f54:	sete	dl
0x2f57:	jmp	0x2c28


0x38e1:	movzx	edx, byte ptr [rsp + 0xd]
0x38e6:	xor	r12d, r12d
0x38e9:	jmp	0x33f0


0x34c6:	mov	eax, esi
0x34c8:	xor	eax, 1
0x34cb:	and	eax, r8d
0x34ce:	test	r10b, r10b
0x34d1:	je	0x34e1


0x3410:	cmp	dword ptr [rsp + 8], 2
0x3415:	sete	al
0x3418:	test	r9b, r9b
0x341b:	jne	0x38d0


0x3952:	cmp	byte ptr [rcx], 0
0x3955:	jne	0x3967


0x3978:	movzx	edx, byte ptr [rsp + 0xd]
0x397d:	xor	r12d, r12d
0x3980:	jmp	0x33e6


0x3389:	mov	edi, dword ptr [rsp + 0x9c]
0x3390:	call	0x1830


0x3520:	cmp	r15, 1
0x3524:	je	0x3389


0x2c28:	cmp	byte ptr [rsp + 0xd], 1
0x2c2d:	jne	0x2d42


0x34e1:	add	rbp, 1
0x34e5:	cmp	rbp, rcx
0x34e8:	jae	0x2c6c


0x34d3:	cmp	r13, r15
0x34d6:	jbe	0x34dd


0x3421:	mov	esi, r8d
0x3424:	xor	esi, 1
0x3427:	and	al, sil
0x342a:	je	0x345b


0x38d0:	movzx	ebx, byte ptr [rsp + 0xf]
0x38d5:	mov	rbp, r11
0x38d8:	mov	byte ptr [rsp + 0xd], bl
0x38dc:	jmp	0x3589


0x3957:	jmp	0x3978


0x3967:	add	rax, 1
0x396b:	lea	rdx, [rbp + rax]
0x3970:	cmp	r11, rdx
0x3973:	ja	0x3960


0x352a:	mov	rdi, qword ptr [rsp + 0x10]
0x352f:	lea	rcx, [rdi + r15]
0x3533:	lea	rdx, [rdi + r14 + 1]
0x3538:	lea	r8, [rcx + r14]
0x353c:	jmp	0x354d


0x2c33:	test	dl, dl
0x2c35:	jne	0x2d42


0x2d42:	cmp	byte ptr [rsp + 0xf], 0
0x2d47:	jne	0x2c3b


0x34ee:	test	al, al
0x34f0:	je	0x38ee


0x2c6c:	test	al, al
0x2c6e:	je	0x2c90


0x34dd:	add	r15, 1
0x34e1:	add	rbp, 1
0x34e5:	cmp	rbp, rcx
0x34e8:	jae	0x2c6c


0x34d8:	mov	byte ptr [r14 + r15], 0x5c
0x34dd:	add	r15, 1
0x34e1:	add	rbp, 1
0x34e5:	cmp	rbp, rcx
0x34e8:	jae	0x2c6c


0x345b:	cmp	r13, r15
0x345e:	jbe	0x3465


0x342c:	cmp	r13, r15
0x342f:	jbe	0x3436


0x3975:	mov	rdi, rax
0x3978:	movzx	edx, byte ptr [rsp + 0xd]
0x397d:	xor	r12d, r12d
0x3980:	jmp	0x33e6


0x3960:	cmp	byte ptr [r9 + rax], 0
0x3965:	je	0x3975


0x354d:	movzx	ecx, byte ptr [rdx]
0x3550:	sub	ecx, 0x5b
0x3553:	cmp	cl, 0x21
0x3556:	ja	0x3540


0x2c3b:	mov	rsi, qword ptr [rsp + 0x20]
0x2c40:	test	rsi, rsi
0x2c43:	je	0x2c59


0x2d4d:	jmp	0x2c59


0x38ee:	xor	r10d, r10d
0x38f1:	jmp	0x34ad


0x34f6:	cmp	r13, r15
0x34f9:	jbe	0x3500


0x2c90:	cmp	r15, r13
0x2c93:	jae	0x2c99


0x2c70:	cmp	r13, r15
0x2c73:	jbe	0x2c7a


0x3465:	lea	rax, [r15 + 1]
0x3469:	cmp	r13, rax
0x346c:	jbe	0x347b


0x3460:	mov	byte ptr [r14 + r15], 0x5c
0x3465:	lea	rax, [r15 + 1]
0x3469:	cmp	r13, rax
0x346c:	jbe	0x347b


0x3436:	lea	rsi, [r15 + 1]
0x343a:	cmp	r13, rsi
0x343d:	jbe	0x3445


0x3431:	mov	byte ptr [r14 + r15], 0x27
0x3436:	lea	rsi, [r15 + 1]
0x343a:	cmp	r13, rsi
0x343d:	jbe	0x3445


0x3558:	mov	esi, 1
0x355d:	shl	rsi, cl
0x3560:	mov	rcx, rsi
0x3563:	movabs	rsi, 0x20000002b
0x356d:	test	rcx, rsi
0x3570:	je	0x3540


0x3540:	add	rdx, 1
0x3544:	cmp	r8, rdx
0x3547:	je	0x3389


0x2c59:	test	r10b, r10b
0x2c5c:	jne	0x2da3


0x2c45:	mov	edx, ebx
0x2c47:	shr	dl, 5
0x2c4a:	movzx	edx, dl
0x2c4d:	mov	edx, dword ptr [rsi + rdx*4]
0x2c50:	bt	edx, ebx
0x2c53:	jb	0x2da3


0x34ad:	cmp	r13, r15
0x34b0:	jbe	0x34b6


0x3500:	lea	rax, [r15 + 1]
0x3504:	cmp	r13, rax
0x3507:	jbe	0x350f


0x34fb:	mov	byte ptr [r14 + r15], 0x27
0x3500:	lea	rax, [r15 + 1]
0x3504:	cmp	r13, rax
0x3507:	jbe	0x350f


0x2c95:	mov	byte ptr [r14 + r15], bl
0x2c99:	movzx	edi, byte ptr [rsp + 0xe]
0x2c9e:	add	r15, 1
0x2ca2:	mov	eax, 0
0x2ca7:	test	r12b, r12b
0x2caa:	cmove	edi, eax
0x2cad:	mov	byte ptr [rsp + 0xe], dil
0x2cb2:	jmp	0x2ae8


0x2c99:	movzx	edi, byte ptr [rsp + 0xe]
0x2c9e:	add	r15, 1
0x2ca2:	mov	eax, 0
0x2ca7:	test	r12b, r12b
0x2caa:	cmove	edi, eax
0x2cad:	mov	byte ptr [rsp + 0xe], dil
0x2cb2:	jmp	0x2ae8


0x2c7a:	lea	rax, [r15 + 1]
0x2c7e:	cmp	r13, rax
0x2c81:	jbe	0x2c89


0x2c75:	mov	byte ptr [r14 + r15], 0x27
0x2c7a:	lea	rax, [r15 + 1]
0x2c7e:	cmp	r13, rax
0x2c81:	jbe	0x2c89


0x347b:	lea	rax, [r15 + 2]
0x347f:	cmp	r13, rax
0x3482:	jbe	0x3494


0x346e:	mov	eax, ebx
0x3470:	shr	al, 6
0x3473:	add	eax, 0x30
0x3476:	mov	byte ptr [r14 + r15 + 1], al
0x347b:	lea	rax, [r15 + 2]
0x347f:	cmp	r13, rax
0x3482:	jbe	0x3494


0x3445:	lea	rsi, [r15 + 2]
0x3449:	cmp	r13, rsi
0x344c:	jbe	0x3454


0x343f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x3445:	lea	rsi, [r15 + 2]
0x3449:	cmp	r13, rsi
0x344c:	jbe	0x3454


0x3572:	mov	r14, qword ptr [rsp + 0x40]
0x3577:	mov	r13, qword ptr [rsp + 0x70]
0x357c:	mov	rbp, qword ptr [rsp + 0x30]
0x3581:	mov	dword ptr [rsp + 8], 2
0x3589:	cmp	byte ptr [rsp + 0xd], 0
0x358e:	je	0x35a0


0x2c62:	xor	eax, 1
0x2c65:	add	rbp, 1
0x2c69:	and	eax, r8d
0x2c6c:	test	al, al
0x2c6e:	je	0x2c90


0x2da3:	cmp	dword ptr [rsp + 8], 2
0x2da8:	sete	dl
0x2dab:	cmp	byte ptr [rsp + 0xf], 0
0x2db0:	mov	eax, edx
0x2db2:	jne	0x3608


0x34b6:	movzx	ebx, byte ptr [rdi + rbp]
0x34ba:	add	r15, 1
0x34be:	test	dl, dl
0x34c0:	jne	0x3410


0x34b2:	mov	byte ptr [r14 + r15], bl
0x34b6:	movzx	ebx, byte ptr [rdi + rbp]
0x34ba:	add	r15, 1
0x34be:	test	dl, dl
0x34c0:	jne	0x3410


0x350f:	add	r15, 2
0x3513:	xor	r10d, r10d
0x3516:	xor	r8d, r8d
0x3519:	jmp	0x34ad


0x3509:	mov	byte ptr [r14 + r15 + 1], 0x27
0x350f:	add	r15, 2
0x3513:	xor	r10d, r10d
0x3516:	xor	r8d, r8d
0x3519:	jmp	0x34ad


0x2ae8:	cmp	r11, rbp
0x2aeb:	setne	r12b
0x2aef:	cmp	r11, -1
0x2af3:	jne	0x2b02


0x2c89:	add	r15, 2
0x2c8d:	xor	r8d, r8d
0x2c90:	cmp	r15, r13
0x2c93:	jae	0x2c99


0x2c83:	mov	byte ptr [r14 + r15 + 1], 0x27
0x2c89:	add	r15, 2
0x2c8d:	xor	r8d, r8d
0x2c90:	cmp	r15, r13
0x2c93:	jae	0x2c99


0x3494:	and	ebx, 7
0x3497:	add	rbp, 1
0x349b:	add	r15, 3
0x349f:	add	ebx, 0x30
0x34a2:	cmp	rbp, rcx
0x34a5:	jae	0x2c90


0x3484:	mov	eax, ebx
0x3486:	shr	al, 3
0x3489:	and	eax, 7
0x348c:	add	eax, 0x30
0x348f:	mov	byte ptr [r14 + r15 + 2], al
0x3494:	and	ebx, 7
0x3497:	add	rbp, 1
0x349b:	add	r15, 3
0x349f:	add	ebx, 0x30
0x34a2:	cmp	rbp, rcx
0x34a5:	jae	0x2c90


0x3454:	add	r15, 3
0x3458:	mov	r8d, eax
0x345b:	cmp	r13, r15
0x345e:	jbe	0x3465


0x344e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3454:	add	r15, 3
0x3458:	mov	r8d, eax
0x345b:	cmp	r13, r15
0x345e:	jbe	0x3465


0x2db8:	mov	eax, r8d
0x2dbb:	xor	eax, 1
0x2dbe:	and	al, dl
0x2dc0:	je	0x2df1


0x3608:	mov	rbp, r11
0x360b:	jmp	0x3589


0x34ab:	mov	esi, edx
0x34ad:	cmp	r13, r15
0x34b0:	jbe	0x34b6


0x2df1:	cmp	r13, r15
0x2df4:	jbe	0x2dfb


0x2dc2:	cmp	r13, r15
0x2dc5:	jbe	0x2dcc


0x2dfb:	add	r15, 1
0x2dff:	add	rbp, 1
0x2e03:	jmp	0x2c90


0x2df6:	mov	byte ptr [r14 + r15], 0x5c
0x2dfb:	add	r15, 1
0x2dff:	add	rbp, 1
0x2e03:	jmp	0x2c90


0x2dcc:	lea	rdx, [r15 + 1]
0x2dd0:	cmp	r13, rdx
0x2dd3:	jbe	0x2ddb


0x2dc7:	mov	byte ptr [r14 + r15], 0x27
0x2dcc:	lea	rdx, [r15 + 1]
0x2dd0:	cmp	r13, rdx
0x2dd3:	jbe	0x2ddb


0x2ddb:	lea	rdx, [r15 + 2]
0x2ddf:	cmp	r13, rdx
0x2de2:	jbe	0x2dea


0x2dd5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x2ddb:	lea	rdx, [r15 + 2]
0x2ddf:	cmp	r13, rdx
0x2de2:	jbe	0x2dea


0x2dea:	add	r15, 3
0x2dee:	mov	r8d, eax
0x2df1:	cmp	r13, r15
0x2df4:	jbe	0x2dfb


0x2de4:	mov	byte ptr [r14 + r15 + 2], 0x27
0x2dea:	add	r15, 3
0x2dee:	mov	r8d, eax
0x2df1:	cmp	r13, r15
0x2df4:	jbe	0x2dfb


0x3395:	mov	rdi, qword ptr [rsp + 0x28]
0x339a:	test	eax, eax
0x339c:	mov	eax, 0
0x33a1:	cmove	r12d, eax
0x33a5:	add	rbx, r15
0x33a8:	call	0x1820


0x33ad:	test	eax, eax
0x33af:	je	0x3333


0x3333:	mov	rax, qword ptr [rsp + 0x10]
0x3338:	lea	r14, [rbp + rbx]
0x333d:	mov	rdx, qword ptr [rsp + 0x30]
0x3342:	mov	rcx, qword ptr [rsp + 0x28]
0x3347:	mov	rdi, qword ptr [rsp + 0x38]
0x334c:	lea	r13, [rax + r14]
0x3350:	sub	rdx, r14
0x3353:	mov	rsi, r13
0x3356:	call	0x5200


0x2b5c:	movzx	r8d, byte ptr [rsp + 0x38]
0x2b62:	movzx	r10d, byte ptr [rsp + 0x30]
0x2b68:	mov	r11, rax
0x2b6b:	mov	r9, qword ptr [rsp + 0x28]
0x2b70:	cmp	rbx, r11
0x2b73:	mov	byte ptr [rsp + 0x28], r10b
0x2b78:	ja	0x3130


0x32e0:	movzx	r8d, byte ptr [rsp + 0x40]
0x32e6:	movzx	r10d, byte ptr [rsp + 0x38]
0x32ec:	mov	r11, rax
0x32ef:	mov	r9, qword ptr [rsp + 0x30]
0x32f4:	lea	rax, [rsp + 0x9c]
0x32fc:	xor	ecx, ecx
0x32fe:	mov	byte ptr [rsp + 0x7e], bl
0x3302:	mov	byte ptr [rsp + 0x7d], r8b
0x3307:	mov	rbx, rcx
0x330a:	mov	qword ptr [rsp + 0x88], r9
0x3312:	mov	qword ptr [rsp + 0x38], rax
0x3317:	mov	byte ptr [rsp + 0x7f], r10b
0x331c:	mov	qword ptr [rsp + 0x80], r15
0x3324:	mov	qword ptr [rsp + 0x40], r14
0x3329:	mov	qword ptr [rsp + 0x70], r13
0x332e:	mov	qword ptr [rsp + 0x30], r11
0x3333:	mov	rax, qword ptr [rsp + 0x10]
0x3338:	lea	r14, [rbp + rbx]
0x333d:	mov	rdx, qword ptr [rsp + 0x30]
0x3342:	mov	rcx, qword ptr [rsp + 0x28]
0x3347:	mov	rdi, qword ptr [rsp + 0x38]
0x334c:	lea	r13, [rax + r14]
0x3350:	sub	rdx, r14
0x3353:	mov	rsi, r13
0x3356:	call	0x5200


0x2f18:	mov	rcx, qword ptr [rax]
0x2f1b:	movzx	edx, bl
0x2f1e:	movzx	r10d, byte ptr [rsp + 0x28]
0x2f24:	movzx	r8d, byte ptr [rsp + 0x30]
0x2f2a:	mov	r11, qword ptr [rsp + 0x38]
0x2f2f:	mov	edi, 1
0x2f34:	movzx	eax, word ptr [rcx + rdx*2]
0x2f38:	and	ax, 0x4000
0x2f3c:	setne	r12b
0x2f40:	sete	al
0x2f43:	and	al, byte ptr [rsp + 0xd]
0x2f47:	test	al, al
0x2f49:	jne	0x38e1


0x2bf0:	xor	r10d, r10d
0x2bf3:	cmp	r11, 1
0x2bf7:	setne	al
0x2bfa:	cmp	r11, -1
0x2bfe:	jne	0x2c0c


0x2c00:	mov	rax, qword ptr [rsp + 0x10]
0x2c05:	cmp	byte ptr [rax + 1], 0
0x2c09:	setne	al
0x2c0c:	cmp	dword ptr [rsp + 8], 2
0x2c11:	sete	dl
0x2c14:	test	al, al
0x2c16:	je	0x2e68


0x2c0c:	cmp	dword ptr [rsp + 8], 2
0x2c11:	sete	dl
0x2c14:	test	al, al
0x2c16:	je	0x2e68


0x2e68:	test	rbp, rbp
0x2e6b:	jne	0x2c1c


0x2c1c:	xor	r12d, r12d
0x2c1f:	xor	eax, eax
0x2c21:	nop	dword ptr [rax]
0x2c28:	cmp	byte ptr [rsp + 0xd], 1
0x2c2d:	jne	0x2d42


0x2e71:	movzx	eax, byte ptr [rsp + 0xf]
0x2e76:	and	al, dl
0x2e78:	je	0x2c28


0x2e7e:	mov	rbp, r11
0x2e81:	mov	dword ptr [rsp + 8], 2
0x2e89:	jmp	0x3589


0x3288:	cmp	byte ptr [rsp + 0xf], 0
0x328d:	jne	0x3ab0


0x2cd0:	cmp	eax, 5
0x2cd3:	je	0x3248


0x3293:	xor	r12d, r12d
0x3296:	xor	eax, eax
0x3298:	mov	ebx, 0x3f
0x329d:	jmp	0x2c59


0x3ab0:	mov	rbp, r11
0x3ab3:	movzx	eax, byte ptr [rsp + 0xf]
0x3ab8:	jmp	0x3589


0x3248:	test	byte ptr [rsp + 0x78], 4
0x324d:	je	0x3270


0x2cd9:	cmp	eax, 2
0x2cdc:	mov	ebx, 0x3f
0x2ce1:	sete	dl
0x2ce4:	xor	r12d, r12d
0x2ce7:	xor	eax, eax
0x2ce9:	jmp	0x2c28


0x3270:	xor	edx, edx
0x3272:	xor	r12d, r12d
0x3275:	xor	eax, eax
0x3277:	mov	ebx, 0x3f
0x327c:	jmp	0x2c28


0x324f:	lea	rcx, [rbp + 2]
0x3253:	cmp	rcx, r11
0x3256:	jae	0x3270


0x3258:	mov	rax, qword ptr [rsp + 0x10]
0x325d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x3262:	je	0x39f2


0x39f2:	movzx	ebx, byte ptr [rax + rcx]
0x39f6:	cmp	bl, 0x3e
0x39f9:	ja	0x3270


0x39ff:	movabs	rax, 0x7000a38200000000
0x3a09:	bt	rax, rbx
0x3a0d:	jae	0x3270


0x3a13:	cmp	byte ptr [rsp + 0xf], 0
0x3a18:	jne	0x3c02


0x3a1e:	cmp	r13, r15
0x3a21:	jbe	0x3a28


0x3c02:	mov	rbp, r11
0x3c05:	jmp	0x35a0


0x3a28:	lea	rax, [r15 + 1]
0x3a2c:	cmp	r13, rax
0x3a2f:	jbe	0x3a37


0x3a23:	mov	byte ptr [r14 + r15], 0x3f
0x3a28:	lea	rax, [r15 + 1]
0x3a2c:	cmp	r13, rax
0x3a2f:	jbe	0x3a37


0x3a37:	lea	rax, [r15 + 2]
0x3a3b:	cmp	r13, rax
0x3a3e:	jbe	0x3a46


0x3a31:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3a37:	lea	rax, [r15 + 2]
0x3a3b:	cmp	r13, rax
0x3a3e:	jbe	0x3a46


0x3a46:	lea	rax, [r15 + 3]
0x3a4a:	cmp	r13, rax
0x3a4d:	jbe	0x3a55


0x3a40:	mov	byte ptr [r14 + r15 + 2], 0x22
0x3a46:	lea	rax, [r15 + 3]
0x3a4a:	cmp	r13, rax
0x3a4d:	jbe	0x3a55


0x3a55:	add	r15, 4
0x3a59:	xor	edx, edx
0x3a5b:	xor	r12d, r12d
0x3a5e:	xor	eax, eax
0x3a60:	mov	rbp, rcx
0x3a63:	jmp	0x2c28


0x3a4f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x3a55:	add	r15, 4
0x3a59:	xor	edx, edx
0x3a5b:	xor	r12d, r12d
0x3a5e:	xor	eax, eax
0x3a60:	mov	rbp, rcx
0x3a63:	jmp	0x2c28


0x3200:	cmp	byte ptr [rsp + 0xf], 0
0x3205:	jne	0x3ab0


0x2cfe:	mov	byte ptr [rsp + 0x7c], r12b
0x2d03:	xor	edx, edx
0x2d05:	xor	eax, eax
0x2d07:	mov	ebx, 0x27
0x2d0c:	jmp	0x2c28


0x320b:	test	r13, r13
0x320e:	je	0x3610


0x3610:	cmp	r13, r15
0x3613:	jbe	0x361a


0x3214:	xor	edx, edx
0x3216:	cmp	qword ptr [rsp + 0x50], 0
0x321c:	jne	0x3610


0x361a:	lea	rax, [r15 + 1]
0x361e:	cmp	r13, rax
0x3621:	jbe	0x3629


0x3615:	mov	byte ptr [r14 + r15], 0x27
0x361a:	lea	rax, [r15 + 1]
0x361e:	cmp	r13, rax
0x3621:	jbe	0x3629


0x3222:	mov	qword ptr [rsp + 0x50], r13
0x3227:	add	r15, 3
0x322b:	xor	eax, eax
0x322d:	mov	byte ptr [rsp + 0x7c], r12b
0x3232:	xor	r8d, r8d
0x3235:	mov	r13, rdx
0x3238:	mov	ebx, 0x27
0x323d:	jmp	0x2c59


0x3629:	lea	rax, [r15 + 2]
0x362d:	cmp	r13, rax
0x3630:	jbe	0x3c22


0x3623:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x3629:	lea	rax, [r15 + 2]
0x362d:	cmp	r13, rax
0x3630:	jbe	0x3c22


0x3c22:	mov	rdx, r13
0x3c25:	mov	r13, qword ptr [rsp + 0x50]
0x3c2a:	jmp	0x3222


0x3636:	mov	rdx, r13
0x3639:	mov	byte ptr [r14 + r15 + 2], 0x27
0x363f:	mov	r13, qword ptr [rsp + 0x50]
0x3644:	jmp	0x3222


0x2d34:	cmp	byte ptr [rsp + 0xd], 0
0x2d39:	jne	0x2da0


0x2d3b:	mov	ebx, edx
0x2d3d:	xor	r12d, r12d
0x2d40:	xor	eax, eax
0x2d42:	cmp	byte ptr [rsp + 0xf], 0
0x2d47:	jne	0x2c3b


0x2da0:	xor	r12d, r12d
0x2da3:	cmp	dword ptr [rsp + 8], 2
0x2da8:	sete	dl
0x2dab:	cmp	byte ptr [rsp + 0xf], 0
0x2db0:	mov	eax, edx
0x2db2:	jne	0x3608


0x3140:	cmp	byte ptr [rsp + 0xf], 0
0x3145:	jne	0x3ab0


0x2d73:	cmp	byte ptr [rsp + 0xd], 0
0x2d78:	je	0x2f90


0x314b:	add	rbp, 1
0x314f:	mov	eax, r8d
0x3152:	xor	r12d, r12d
0x3155:	mov	ebx, 0x5c
0x315a:	jmp	0x2c6c


0x2f90:	mov	edx, 0x5c
0x2f95:	mov	ebx, 0x5c
0x2f9a:	jmp	0x2d34


0x2d7e:	cmp	byte ptr [rsp + 0xf], 0
0x2d83:	je	0x2f90


0x2d89:	cmp	qword ptr [rsp + 0x18], 0
0x2d8f:	jne	0x314b


0x2d95:	mov	ebx, 0x5c
0x2d9a:	nop	word ptr [rax + rax]
0x2da0:	xor	r12d, r12d
0x2da3:	cmp	dword ptr [rsp + 8], 2
0x2da8:	sete	dl
0x2dab:	cmp	byte ptr [rsp + 0xf], 0
0x2db0:	mov	eax, edx
0x2db2:	jne	0x3608


0x2e1b:	xor	edx, edx
0x2e1d:	test	byte ptr [rsp + 0x78], 1
0x2e22:	je	0x2d3b


0x2fe3:	cmp	dword ptr [rsp + 8], 2
0x2fe8:	sete	dl
0x2feb:	cmp	byte ptr [rsp + 0xf], 0
0x2ff0:	jne	0x3b8a


0x2e28:	add	rbp, 1
0x2e2c:	jmp	0x2ae8


0x2ff6:	mov	eax, r8d
0x2ff9:	mov	rcx, r15
0x2ffc:	xor	eax, 1
0x2fff:	and	al, dl
0x3001:	je	0x3030


0x3b8a:	movzx	ebx, byte ptr [rsp + 0xf]
0x3b8f:	mov	rbp, r11
0x3b92:	mov	eax, edx
0x3b94:	mov	byte ptr [rsp + 0xd], bl
0x3b98:	jmp	0x3589


0x3030:	cmp	r13, rcx
0x3033:	jbe	0x303a


0x3003:	cmp	r13, r15
0x3006:	jbe	0x300d


0x303a:	cmp	dword ptr [rsp + 8], 2
0x303f:	lea	r15, [rcx + 1]
0x3043:	je	0x3649


0x3035:	mov	byte ptr [r14 + rcx], 0x5c
0x303a:	cmp	dword ptr [rsp + 8], 2
0x303f:	lea	r15, [rcx + 1]
0x3043:	je	0x3649


0x300d:	lea	rcx, [r15 + 1]
0x3011:	cmp	r13, rcx
0x3014:	jbe	0x301c


0x3008:	mov	byte ptr [r14 + r15], 0x27
0x300d:	lea	rcx, [r15 + 1]
0x3011:	cmp	r13, rcx
0x3014:	jbe	0x301c


0x3649:	mov	eax, r12d
0x364c:	mov	ebx, 0x30
0x3651:	xor	r12d, r12d
0x3654:	jmp	0x2c59


0x3049:	lea	rax, [rbp + 1]
0x304d:	cmp	rax, r11
0x3050:	jae	0x306b


0x301c:	lea	rcx, [r15 + 2]
0x3020:	cmp	r13, rcx
0x3023:	ja	0x3659


0x3016:	mov	byte ptr [r14 + r15 + 1], 0x24
0x301c:	lea	rcx, [r15 + 2]
0x3020:	cmp	r13, rcx
0x3023:	ja	0x3659


0x3052:	mov	rax, qword ptr [rsp + 0x10]
0x3057:	movzx	eax, byte ptr [rax + rbp + 1]
0x305c:	mov	byte ptr [rsp + 0x28], al
0x3060:	sub	eax, 0x30
0x3063:	cmp	al, 9
0x3065:	jbe	0x3899


0x306b:	mov	eax, r12d
0x306e:	mov	ebx, 0x30
0x3073:	xor	r12d, r12d
0x3076:	jmp	0x2c28


0x3029:	lea	rcx, [r15 + 3]
0x302d:	mov	r8d, eax
0x3030:	cmp	r13, rcx
0x3033:	jbe	0x303a


0x3659:	mov	byte ptr [r14 + r15 + 2], 0x27
0x365f:	jmp	0x3029


0x3899:	cmp	r13, r15
0x389c:	jbe	0x38a3


0x38a3:	lea	rax, [rcx + 2]
0x38a7:	cmp	r13, rax
0x38aa:	jbe	0x38b2


0x389e:	mov	byte ptr [r14 + r15], 0x30
0x38a3:	lea	rax, [rcx + 2]
0x38a7:	cmp	r13, rax
0x38aa:	jbe	0x38b2


0x38b2:	mov	eax, r12d
0x38b5:	lea	r15, [rcx + 3]
0x38b9:	xor	r12d, r12d
0x38bc:	mov	ebx, 0x30
0x38c1:	jmp	0x2c28


0x38ac:	mov	byte ptr [r14 + rcx + 2], 0x30
0x38b2:	mov	eax, r12d
0x38b5:	lea	r15, [rcx + 3]
0x38b9:	xor	r12d, r12d
0x38bc:	mov	ebx, 0x30
0x38c1:	jmp	0x2c28


0x2d22:	cmp	dword ptr [rsp + 8], 2
0x2d27:	sete	al
0x2d2a:	and	al, byte ptr [rsp + 0xf]
0x2d2e:	jne	0x2e7e


0x30e0:	mov	edx, 0xd
0x30e5:	xor	r10d, r10d
0x30e8:	mov	ebx, 0x72
0x30ed:	jmp	0x2d22


0x3664:	test	ebx, ebx
0x3666:	jne	0x2a93


0x366c:	mov	byte ptr [rsp + 0xd], 1
0x3671:	test	r13, r13
0x3674:	jne	0x3c0a


0x367a:	lea	rax, [rip + 0x24ec]
0x3681:	mov	qword ptr [rsp + 0x50], 0
0x368a:	mov	byte ptr [rsp + 0xe], 1
0x368f:	mov	byte ptr [rsp + 0x7c], 0
0x3694:	xor	r12d, r12d
0x3697:	mov	byte ptr [rsp + 0xf], 0
0x369c:	mov	qword ptr [rsp + 0x18], 1
0x36a5:	mov	qword ptr [rsp + 0x48], rax
0x36aa:	mov	r15d, 1
0x36b0:	mov	dword ptr [rsp + 8], 2
0x36b8:	jmp	0x2ad3


0x3c0a:	mov	byte ptr [rsp + 0xe], 1
0x3c0f:	xor	eax, eax
0x3c11:	xor	r12d, r12d
0x3c14:	mov	qword ptr [rsp + 0x50], 0
0x3c1d:	jmp	0x31c4


0x31c4:	lea	rbx, [rip + 0x29a2]
0x31cb:	mov	byte ptr [r14], 0x27
0x31cf:	mov	dword ptr [rsp + 8], 2
0x31d7:	mov	r15d, 1
0x31dd:	mov	qword ptr [rsp + 0x18], 1
0x31e6:	mov	byte ptr [rsp + 0xf], 0
0x31eb:	mov	qword ptr [rsp + 0x48], rbx
0x31f0:	mov	byte ptr [rsp + 0x7c], al
0x31f4:	jmp	0x2ad3


0x36c8:	test	r13, r13
0x36cb:	je	0x38f6


0x3abd:	lea	rax, [rip + 0x20a7]
0x3ac4:	mov	byte ptr [rsp + 0xe], 1
0x3ac9:	mov	byte ptr [rsp + 0x7c], 0
0x3ace:	xor	r12d, r12d
0x3ad1:	mov	qword ptr [rsp + 0x50], 0
0x3ada:	mov	byte ptr [rsp + 0xf], 1
0x3adf:	mov	byte ptr [rsp + 0xd], 1
0x3ae4:	mov	qword ptr [rsp + 0x18], 1
0x3aed:	xor	r15d, r15d
0x3af0:	mov	qword ptr [rsp + 0x48], rax
0x3af5:	jmp	0x2ad3


0x38f6:	mov	qword ptr [rsp + 0x50], 0
0x38ff:	mov	byte ptr [rsp + 0xe], 1
0x3904:	xor	r12d, r12d
0x3907:	mov	byte ptr [rsp + 0x7c], 0
0x390c:	jmp	0x36eb


0x36d1:	mov	byte ptr [r14], 0x22
0x36d5:	mov	byte ptr [rsp + 0xe], 1
0x36da:	xor	r12d, r12d
0x36dd:	mov	byte ptr [rsp + 0x7c], 0
0x36e2:	mov	qword ptr [rsp + 0x50], 0
0x36eb:	lea	rax, [rip + 0x2479]
0x36f2:	mov	byte ptr [rsp + 0xf], 0
0x36f7:	mov	byte ptr [rsp + 0xd], 1
0x36fc:	mov	qword ptr [rsp + 0x18], 1
0x3705:	mov	r15d, 1
0x370b:	mov	qword ptr [rsp + 0x48], rax
0x3710:	jmp	0x2ad3


0x36eb:	lea	rax, [rip + 0x2479]
0x36f2:	mov	byte ptr [rsp + 0xf], 0
0x36f7:	mov	byte ptr [rsp + 0xd], 1
0x36fc:	mov	qword ptr [rsp + 0x18], 1
0x3705:	mov	r15d, 1
0x370b:	mov	qword ptr [rsp + 0x48], rax
0x3710:	jmp	0x2ad3


0x3715:	lea	rax, [rip + 0x244f]
0x371c:	mov	byte ptr [rsp + 0xe], 1
0x3721:	mov	byte ptr [rsp + 0x7c], 0
0x3726:	xor	r12d, r12d
0x3729:	mov	qword ptr [rsp + 0x50], 0
0x3732:	mov	byte ptr [rsp + 0xf], 1
0x3737:	mov	byte ptr [rsp + 0xd], 1
0x373c:	mov	qword ptr [rsp + 0x18], 1
0x3745:	xor	r15d, r15d
0x3748:	mov	qword ptr [rsp + 0x48], rax
0x374d:	mov	dword ptr [rsp + 8], 5
0x3755:	jmp	0x2ad3


0x375a:	mov	byte ptr [rsp + 0xe], 1
0x375f:	mov	byte ptr [rsp + 0x7c], 0
0x3764:	xor	r12d, r12d
0x3767:	mov	qword ptr [rsp + 0x50], 0
0x3770:	mov	byte ptr [rsp + 0xf], 0
0x3775:	xor	r15d, r15d
0x3778:	mov	byte ptr [rsp + 0xd], 1
0x377d:	mov	qword ptr [rsp + 0x18], 0
0x3786:	mov	qword ptr [rsp + 0x48], 0
0x378f:	jmp	0x2ad3


0x3794:	cmp	dword ptr [rsp + 8], 0xa
0x3799:	je	0x37f1


0x37f1:	xor	r15d, r15d
0x37f4:	test	ebx, ebx
0x37f6:	je	0x39bd


0x379b:	lea	rsi, [rip + 0x23cd]
0x37a2:	xor	edi, edi
0x37a4:	mov	edx, 5
0x37a9:	call	0x15e0


0x39bd:	mov	rdx, qword ptr [rsp + 0x68]
0x39c2:	movzx	eax, byte ptr [rdx]
0x39c5:	test	al, al
0x39c7:	je	0x37fc


0x37fc:	test	ebx, ebx
0x37fe:	mov	rbx, qword ptr [rsp + 0x60]
0x3803:	setne	byte ptr [rsp + 0xf]
0x3808:	xor	r12d, r12d
0x380b:	mov	rdi, rbx
0x380e:	call	0x1600


0x39d9:	add	r15, 1
0x39dd:	movzx	eax, byte ptr [rdx + r15]
0x39e2:	test	al, al
0x39e4:	jne	0x39d0


0x39d5:	mov	byte ptr [r14 + r15], al
0x39d9:	add	r15, 1
0x39dd:	movzx	eax, byte ptr [rdx + r15]
0x39e2:	test	al, al
0x39e4:	jne	0x39d0


0x39e6:	jmp	0x37fc


0x39d0:	cmp	r13, r15
0x39d3:	jbe	0x39d9


0x3813:	mov	qword ptr [rsp + 0x48], rbx
0x3818:	mov	qword ptr [rsp + 0x18], rax
0x381d:	mov	byte ptr [rsp + 0xe], 1
0x3822:	mov	byte ptr [rsp + 0x7c], 0
0x3827:	mov	qword ptr [rsp + 0x50], 0
0x3830:	mov	byte ptr [rsp + 0xd], 1
0x3835:	jmp	0x2ad3


0x37ae:	mov	rcx, rax
0x37b1:	mov	qword ptr [rsp + 0x68], rax
0x37b6:	lea	rax, [rip + 0x23b2]
0x37bd:	cmp	rcx, rax
0x37c0:	je	0x3b5e


0x3b5e:	mov	esi, dword ptr [rsp + 8]
0x3b62:	mov	rdi, rcx
0x3b65:	call	0x2910


0x37c6:	lea	rsi, [rip + 0x23a0]
0x37cd:	xor	edi, edi
0x37cf:	mov	edx, 5
0x37d4:	call	0x15e0


0x37d9:	mov	rcx, rax
0x37dc:	mov	qword ptr [rsp + 0x60], rax
0x37e1:	lea	rax, [rip + 0x2385]
0x37e8:	cmp	rcx, rax
0x37eb:	je	0x3b74


0x3b74:	mov	esi, dword ptr [rsp + 8]
0x3b78:	mov	rdi, rcx
0x3b7b:	call	0x2910


0x3b80:	mov	qword ptr [rsp + 0x60], rax
0x3b85:	jmp	0x37f1


0x3b6a:	mov	qword ptr [rsp + 0x68], rax
0x3b6f:	jmp	0x37c6


0x383a:	mov	byte ptr [rsp + 0xe], 1
0x383f:	mov	byte ptr [rsp + 0x7c], 0
0x3844:	xor	r12d, r12d
0x3847:	mov	qword ptr [rsp + 0x50], 0
0x3850:	mov	byte ptr [rsp + 0xf], 0
0x3855:	xor	r15d, r15d
0x3858:	mov	byte ptr [rsp + 0xd], 0
0x385d:	mov	qword ptr [rsp + 0x18], 0
0x3866:	mov	qword ptr [rsp + 0x48], 0
0x386f:	jmp	0x2ad3


0x3874:	mov	byte ptr [rsp + 0xe], 1
0x3879:	mov	byte ptr [rsp + 0x7c], 0
0x387e:	xor	r12d, r12d
0x3881:	mov	qword ptr [rsp + 0x50], 0
0x388a:	mov	byte ptr [rsp + 0xf], 1
0x388f:	mov	byte ptr [rsp + 0xd], 1
0x3894:	jmp	0x2ab3


0x2ab3:	lea	rax, [rip + 0x30b3]
0x2aba:	mov	qword ptr [rsp + 0x18], 1
0x2ac3:	xor	r15d, r15d
0x2ac6:	mov	dword ptr [rsp + 8], 2
0x2ace:	mov	qword ptr [rsp + 0x48], rax
0x2ad3:	xor	r11d, r11d
0x2ad6:	mov	rax, rbp
0x2ad9:	mov	r8d, r12d
0x2adc:	mov	rbp, r11
0x2adf:	mov	r11, rax
0x2ae2:	nop	word ptr [rax + rax]
0x2ae8:	cmp	r11, rbp
0x2aeb:	setne	r12b
0x2aef:	cmp	r11, -1
0x2af3:	jne	0x2b02


0x3a68:	test	ebx, ebx
0x3a6a:	je	0x3bf8


0x3bf8:	mov	byte ptr [rsp + 0xd], 0
0x3bfd:	jmp	0x3671


0x3a70:	lea	rax, [rip + 0x20f6]
0x3a77:	mov	byte ptr [rsp + 0xe], 1
0x3a7c:	mov	byte ptr [rsp + 0x7c], 0
0x3a81:	xor	r12d, r12d
0x3a84:	mov	qword ptr [rsp + 0x50], 0
0x3a8d:	mov	byte ptr [rsp + 0xf], 1
0x3a92:	mov	byte ptr [rsp + 0xd], 0
0x3a97:	mov	qword ptr [rsp + 0x18], 1
0x3aa0:	xor	r15d, r15d
0x3aa3:	mov	qword ptr [rsp + 0x48], rax
0x3aa8:	jmp	0x2ad3


0x3671:	test	r13, r13
0x3674:	jne	0x3c0a


0x3c34:	nop	
0x3c36:	nop	word ptr cs:[rax + rax]


0x3deb:	nop	dword ptr [rax + rax]


0x3e26:	nop	word ptr cs:[rax + rax]


0x3e41:	nop	dword ptr [rax + rax]
0x3e46:	nop	word ptr cs:[rax + rax]


0x3e61:	nop	dword ptr [rax + rax]
0x3e66:	nop	word ptr cs:[rax + rax]


0x3ea5:	nop	
0x3ea6:	nop	word ptr cs:[rax + rax]


0x3ec5:	nop	
0x3ec6:	nop	word ptr cs:[rax + rax]


0x3f74:	nop	
0x3f76:	nop	word ptr cs:[rax + rax]


0x4063:	nop	dword ptr [rax]
0x4066:	nop	word ptr cs:[rax + rax]


0x407a:	nop	word ptr [rax + rax]


0x4113:	nop	dword ptr [rax]
0x4116:	nop	word ptr cs:[rax + rax]


0x4133:	nop	dword ptr [rax]
0x4136:	nop	word ptr cs:[rax + rax]


0x414c:	nop	dword ptr [rax]


0x4168:	nop	dword ptr [rax + rax]


0x4184:	nop	
0x4186:	nop	word ptr cs:[rax + rax]


0x421e:	nop	


0x42aa:	nop	word ptr [rax + rax]


0x42bc:	nop	dword ptr [rax]


0x42cf:	nop	


0x4368:	nop	dword ptr [rax + rax]


0x4391:	nop	dword ptr [rax + rax]
0x4396:	nop	word ptr cs:[rax + rax]


0x43aa:	nop	word ptr [rax + rax]


0x443e:	nop	


0x44d1:	nop	dword ptr [rax + rax]
0x44d6:	nop	word ptr cs:[rax + rax]


0x44ec:	nop	dword ptr [rax]


0x4507:	nop	word ptr [rax + rax]


0x4523:	nop	dword ptr [rax]
0x4526:	nop	word ptr cs:[rax + rax]


0x453c:	nop	dword ptr [rax]


0x4554:	nop	
0x4556:	nop	word ptr cs:[rax + rax]


0x4573:	nop	dword ptr [rax]
0x4576:	nop	word ptr cs:[rax + rax]


0x4598:	nop	dword ptr [rax + rax]


0x45ae:	nop	


0x49c7:	nop	word ptr [rax + rax]


0x4a68:	nop	dword ptr [rax + rax]


0x4b45:	nop	
0x4b46:	nop	word ptr cs:[rax + rax]


0x4bea:	nop	word ptr [rax + rax]


0x4c14:	nop	
0x4c16:	nop	word ptr cs:[rax + rax]


0x4c22:	nop	dword ptr [rax]
0x4c26:	nop	word ptr cs:[rax + rax]


0x4c66:	nop	word ptr cs:[rax + rax]


0x4c94:	nop	
0x4c96:	nop	word ptr cs:[rax + rax]


0x4d22:	nop	dword ptr [rax]
0x4d26:	nop	word ptr cs:[rax + rax]


0x4d7a:	nop	word ptr [rax + rax]


0x4d97:	nop	word ptr [rax + rax]


0x4dce:	nop	


0x4df8:	nop	dword ptr [rax + rax]


0x4e13:	nop	word ptr cs:[rax + rax]
0x4e1d:	nop	dword ptr [rax]


0x4e55:	nop	word ptr cs:[rax + rax]
0x4e5f:	nop	


0x4edb:	nop	dword ptr [rax + rax]


0x515e:	nop	


0x51f7:	nop	word ptr [rax + rax]


0x5283:	nop	word ptr cs:[rax + rax]
0x528d:	nop	dword ptr [rax]


0x530d:	nop	dword ptr [rax]


0x53ac:	nop	dword ptr [rax]


0x5415:	nop	
0x5416:	nop	word ptr cs:[rax + rax]


0x5422:	nop	word ptr cs:[rax + rax]
0x542c:	nop	dword ptr [rax]


0x2cc0:	xor	r10d, r10d
0x2cc3:	mov	eax, dword ptr [rsp + 8]
0x2cc7:	cmp	eax, 2
0x2cca:	je	0x3288


0x2cf0:	xor	r10d, r10d
0x2cf3:	cmp	dword ptr [rsp + 8], 2
0x2cf8:	je	0x3200


0x2d18:	mov	edx, 9
0x2d1d:	mov	ebx, 0x74
0x2d22:	cmp	dword ptr [rsp + 8], 2
0x2d27:	sete	al
0x2d2a:	and	al, byte ptr [rsp + 0xf]
0x2d2e:	jne	0x2e7e


0x2d58:	mov	edx, 8
0x2d5d:	mov	ebx, 0x62
0x2d62:	jmp	0x2d34


0x2d68:	cmp	dword ptr [rsp + 8], 2
0x2d6d:	je	0x3140


0x2e10:	cmp	byte ptr [rsp + 0xd], 0
0x2e15:	jne	0x2fe3


0x2e38:	cmp	dword ptr [rsp + 8], 2
0x2e3d:	sete	dl
0x2e40:	xor	eax, eax
0x2e42:	jmp	0x2c28


0x2e50:	mov	edx, 7
0x2e55:	mov	ebx, 0x61
0x2e5a:	jmp	0x2d34


0x2e60:	cmp	dword ptr [rsp + 8], 2
0x2e65:	sete	dl
0x2e68:	test	rbp, rbp
0x2e6b:	jne	0x2c1c


0x2e90:	cmp	dword ptr [rsp + 8], 2
0x2e95:	sete	dl
0x2e98:	xor	r12d, r12d
0x2e9b:	jmp	0x2e71


0x2ea0:	cmp	dword ptr [rsp + 8], 2
0x2ea5:	mov	ebx, 0x20
0x2eaa:	sete	dl
0x2ead:	jmp	0x2e71


0x2eb0:	mov	edx, 0xd
0x2eb5:	mov	ebx, 0x72
0x2eba:	jmp	0x2d22


0x2ec0:	mov	edx, 0xc
0x2ec5:	mov	ebx, 0x66
0x2eca:	jmp	0x2d34


0x2ed0:	mov	edx, 0xb
0x2ed5:	mov	ebx, 0x76
0x2eda:	jmp	0x2d34


0x2ee0:	mov	edx, 0xa
0x2ee5:	mov	ebx, 0x6e
0x2eea:	jmp	0x2d22


0x2f80:	xor	r10d, r10d
0x2f83:	cmp	byte ptr [rsp + 0xd], 0
0x2f88:	jne	0x2d7e


0x2fa0:	mov	edx, 0xc
0x2fa5:	xor	r10d, r10d
0x2fa8:	mov	ebx, 0x66
0x2fad:	jmp	0x2d34


0x2fb8:	mov	edx, 0xa
0x2fbd:	xor	r10d, r10d
0x2fc0:	mov	ebx, 0x6e
0x2fc5:	jmp	0x2d22


0x2fd0:	mov	ebx, 0x61
0x2fd5:	jmp	0x2da0


0x2fe0:	xor	r10d, r10d
0x2fe3:	cmp	dword ptr [rsp + 8], 2
0x2fe8:	sete	dl
0x2feb:	cmp	byte ptr [rsp + 0xf], 0
0x2ff0:	jne	0x3b8a


0x3080:	cmp	dword ptr [rsp + 8], 2
0x3085:	mov	r12d, r10d
0x3088:	sete	dl
0x308b:	xor	r10d, r10d
0x308e:	xor	eax, eax
0x3090:	jmp	0x2c28


0x3098:	cmp	dword ptr [rsp + 8], 2
0x309d:	sete	dl
0x30a0:	xor	r10d, r10d
0x30a3:	jmp	0x2e68


0x30b0:	cmp	dword ptr [rsp + 8], 2
0x30b5:	sete	dl
0x30b8:	xor	r10d, r10d
0x30bb:	xor	r12d, r12d
0x30be:	jmp	0x2e71


0x30c8:	cmp	dword ptr [rsp + 8], 2
0x30cd:	mov	r12d, r10d
0x30d0:	mov	ebx, 0x20
0x30d5:	sete	dl
0x30d8:	xor	r10d, r10d
0x30db:	jmp	0x2e71


0x30f8:	mov	ebx, 0x76
0x30fd:	jmp	0x2da0


0x3108:	mov	edx, 9
0x310d:	xor	r10d, r10d
0x3110:	mov	ebx, 0x74
0x3115:	jmp	0x2d22


0x3120:	mov	ebx, 0x62
0x3125:	jmp	0x2da0


0x36c0:	test	ebx, ebx
0x36c2:	jne	0x3abd


0x194b:	nop	dword ptr [rax + rax]


0x199d:	nop	dword ptr [rax]


0x19ac:	nop	dword ptr [rax]


0x1ad6:	nop	word ptr cs:[rax + rax]


0x1b27:	nop	word ptr [rax + rax]


0x1b71:	nop	dword ptr [rax]


0x1c7e:	nop	


0x1d84:	nop	dword ptr [rax]


0x1ddb:	nop	dword ptr [rax + rax]


0x1e16:	nop	word ptr cs:[rax + rax]


0x1f03:	nop	dword ptr [rax + rax]


0x2386:	nop	word ptr cs:[rax + rax]


0x2413:	nop	dword ptr [rax + rax]


0x2447:	nop	word ptr [rax + rax]


0x24bd:	nop	dword ptr [rax]


0x252f:	nop	


0x25b4:	nop	dword ptr [rax]


0x25e3:	nop	dword ptr [rax + rax]


0x268f:	nop	


0x27bb:	nop	dword ptr [rax + rax]


0x27f9:	nop	dword ptr [rax]


0x2845:	nop	dword ptr [rax]


0x294c:	nop	dword ptr [rax]


0x299d:	nop	dword ptr [rax]


0x2bc8:	nop	dword ptr [rax + rax]


0x2cb7:	nop	word ptr [rax + rax]


0x2cee:	nop	


0x2d11:	nop	dword ptr [rax]


0x2d52:	nop	word ptr [rax + rax]


0x2d64:	nop	dword ptr [rax]


0x2e08:	nop	dword ptr [rax + rax]


0x2e31:	nop	dword ptr [rax]


0x2e47:	nop	word ptr [rax + rax]


0x2e5f:	nop	


0x2e8e:	nop	


0x2e9d:	nop	dword ptr [rax]


0x2eaf:	nop	


0x2ebf:	nop	


0x2ecf:	nop	


0x2edf:	nop	


0x2eef:	nop	


0x2f5c:	nop	dword ptr [rax]


0x2f7c:	nop	dword ptr [rax]


0x2f8e:	nop	


0x2f9f:	nop	


0x2fb2:	nop	word ptr [rax + rax]


0x2fca:	nop	word ptr [rax + rax]


0x2fda:	nop	word ptr [rax + rax]


0x307b:	nop	dword ptr [rax + rax]


0x3095:	nop	dword ptr [rax]


0x30a8:	nop	dword ptr [rax + rax]


0x30c3:	nop	dword ptr [rax + rax]


0x30f2:	nop	word ptr [rax + rax]


0x3102:	nop	word ptr [rax + rax]


0x311a:	nop	word ptr [rax + rax]


0x312a:	nop	word ptr [rax + rax]


0x3138:	nop	dword ptr [rax + rax]


0x315f:	nop	


0x31f9:	nop	dword ptr [rax]


0x3242:	nop	word ptr [rax + rax]


0x3268:	nop	dword ptr [rax + rax]


0x3281:	nop	dword ptr [rax]


0x32a2:	nop	word ptr [rax + rax]


0x3408:	nop	dword ptr [rax + rax]


0x351b:	nop	dword ptr [rax + rax]


0x353e:	nop	


0x3605:	nop	dword ptr [rax]


0x36bd:	nop	dword ptr [rax]


0x38c6:	nop	word ptr cs:[rax + rax]


0x3959:	nop	dword ptr [rax]


0x39cd:	nop	dword ptr [rax]


0x3aad:	nop	dword ptr [rax]


0x3dbb:	nop	dword ptr [rax + rax]


0x4656:	nop	word ptr cs:[rax + rax]


0x46e5:	nop	dword ptr [rax]


0x4706:	nop	word ptr cs:[rax + rax]


0x4765:	nop	dword ptr [rax]


0x47a1:	nop	dword ptr [rax]


0x47e8:	nop	dword ptr [rax + rax]


0x4837:	nop	word ptr [rax + rax]


0x4894:	nop	dword ptr [rax]


0x48c2:	nop	word ptr [rax + rax]


0x4976:	nop	word ptr cs:[rax + rax]


0x49d9:	nop	dword ptr [rax]


0x4c52:	nop	word ptr [rax + rax]


0x4cd9:	nop	dword ptr [rax]


0x4d04:	nop	dword ptr [rax]


0x4d5d:	nop	dword ptr [rax]


0x4ea5:	nop	dword ptr [rax]


0x4f7b:	nop	dword ptr [rax + rax]


0x4fa6:	nop	word ptr cs:[rax + rax]


0x4fdf:	nop	


0x5029:	nop	dword ptr [rax]


0x504b:	nop	dword ptr [rax + rax]


0x50f1:	nop	dword ptr [rax]


0x5183:	nop	dword ptr [rax + rax]


0x51af:	nop	


0x52c4:	nop	dword ptr [rax]


0x52e1:	nop	dword ptr [rax]


0x52f2:	nop	word ptr [rax + rax]


0x534a:	nop	word ptr [rax + rax]


0x5396:	nop	word ptr cs:[rax + rax]


