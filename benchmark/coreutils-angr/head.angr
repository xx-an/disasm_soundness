0x67e0:	sub	rsp, 8
0x67e4:	add	rsp, 8
0x67e8:	ret	


0x67d0:	mov	rdx, qword ptr [rip + 0x203831]
0x67d7:	xor	esi, esi
0x67d9:	jmp	0x17b0


0x67c0:	ret	


0x6750:	push	r15
0x6752:	push	r14
0x6754:	mov	r15, rdx
0x6757:	push	r13
0x6759:	push	r12
0x675b:	lea	r12, [rip + 0x20330e]
0x6762:	push	rbp
0x6763:	lea	rbp, [rip + 0x20330e]
0x676a:	push	rbx
0x676b:	mov	r13d, edi
0x676e:	mov	r14, rsi
0x6771:	sub	rbp, r12
0x6774:	sub	rsp, 8
0x6778:	sar	rbp, 3
0x677c:	call	0x14d8


0x66f0:	mov	rax, qword ptr [rdi + 8]
0x66f4:	cmp	qword ptr [rdi + 0x10], rax
0x66f8:	je	0x6700


0x66b0:	test	rdi, rdi
0x66b3:	push	rbx
0x66b4:	mov	rbx, rdi
0x66b7:	je	0x66ca


0x6630:	push	r12
0x6632:	push	rbp
0x6633:	push	rbx
0x6634:	mov	rbx, rdi
0x6637:	call	0x16d0


0x65f0:	sub	rsp, 8
0x65f4:	mov	edi, 0xe
0x65f9:	call	0x1700


0x6590:	sub	rsp, 8
0x6594:	xor	esi, esi
0x6596:	call	0x1750


0x6510:	push	r12
0x6512:	push	rbp
0x6513:	mov	rbp, rdi
0x6516:	push	rbx
0x6517:	call	0x1550


0x6480:	push	r13
0x6482:	push	r12
0x6484:	mov	r13, rsi
0x6487:	push	rbp
0x6488:	push	rbx
0x6489:	mov	rbx, rdi
0x648c:	mov	r12, rdx
0x648f:	sub	rsp, 0x18
0x6493:	mov	rax, qword ptr fs:[0x28]
0x649c:	mov	qword ptr [rsp + 8], rax
0x64a1:	xor	eax, eax
0x64a3:	lea	rax, [rsp + 4]
0x64a8:	test	rdi, rdi
0x64ab:	cmove	rbx, rax
0x64af:	mov	rdi, rbx
0x64b2:	call	0x15f0


0x6060:	push	r15
0x6062:	push	r14
0x6064:	push	r13
0x6066:	push	r12
0x6068:	push	rbp
0x6069:	push	rbx
0x606a:	sub	rsp, 0x28
0x606e:	mov	rax, qword ptr fs:[0x28]
0x6077:	mov	qword ptr [rsp + 0x18], rax
0x607c:	xor	eax, eax
0x607e:	cmp	edx, 0x24
0x6081:	ja	0x63e5


0x6030:	sub	rsp, 0x10
0x6034:	push	r9
0x6036:	mov	r9, r8
0x6039:	mov	r8, rcx
0x603c:	mov	rcx, rdx
0x603f:	mov	rdx, rsi
0x6042:	mov	esi, 0xa
0x6047:	call	0x5f30


0x5f30:	push	r15
0x5f32:	push	r14
0x5f34:	mov	r15, rcx
0x5f37:	push	r13
0x5f39:	push	r12
0x5f3b:	mov	r14, rdx
0x5f3e:	push	rbp
0x5f3f:	push	rbx
0x5f40:	mov	edx, esi
0x5f42:	xor	esi, esi
0x5f44:	mov	r12, rdi
0x5f47:	mov	r13, r9
0x5f4a:	sub	rsp, 0x18
0x5f4e:	mov	rcx, rsp
0x5f51:	mov	ebx, dword ptr [rsp + 0x50]
0x5f55:	mov	rax, qword ptr fs:[0x28]
0x5f5e:	mov	qword ptr [rsp + 8], rax
0x5f63:	xor	eax, eax
0x5f65:	call	0x6060


0x5ef0:	lea	rsi, [rip + 0x1a38]
0x5ef7:	sub	rsp, 8
0x5efb:	mov	edx, 5
0x5f00:	xor	edi, edi
0x5f02:	call	0x15a0


0x5ed0:	push	rbx
0x5ed1:	mov	rbx, rdi
0x5ed4:	call	0x15c0


0x5ea0:	push	rbp
0x5ea1:	push	rbx
0x5ea2:	mov	rbp, rdi
0x5ea5:	mov	rdi, rsi
0x5ea8:	mov	rbx, rsi
0x5eab:	sub	rsp, 8
0x5eaf:	call	0x5ca0


0x5e70:	mov	rax, rdi
0x5e73:	sub	rsp, 8
0x5e77:	mul	rsi
0x5e7a:	seto	dl
0x5e7d:	test	rax, rax
0x5e80:	js	0x5e99


0x5e50:	push	rbx
0x5e51:	mov	rbx, rdi
0x5e54:	call	0x5ca0


0x5e00:	test	rdi, rdi
0x5e03:	mov	rax, qword ptr [rsi]
0x5e06:	je	0x5e30


0x5d70:	test	rdi, rdi
0x5d73:	mov	r9, rdx
0x5d76:	mov	rcx, qword ptr [rsi]
0x5d79:	je	0x5db0


0x5d40:	mov	rax, rsi
0x5d43:	mul	rdx
0x5d46:	mov	rsi, rax
0x5d49:	seto	al
0x5d4c:	test	rsi, rsi
0x5d4f:	js	0x5d5b


0x5d00:	test	rsi, rsi
0x5d03:	push	rbx
0x5d04:	mov	rbx, rsi
0x5d07:	jne	0x5d0e


0x5cf0:	jmp	0x5ca0


0x5cc0:	mov	rax, rdi
0x5cc3:	mul	rsi
0x5cc6:	mov	rdi, rax
0x5cc9:	seto	al
0x5ccc:	test	rdi, rdi
0x5ccf:	js	0x5cdb


0x5ca0:	push	rbx
0x5ca1:	mov	rbx, rdi
0x5ca4:	call	0x16e0


0x5c20:	push	rbx
0x5c21:	lea	rsi, [rip + 0x19fa]
0x5c28:	mov	edx, 5
0x5c2d:	xor	edi, edi
0x5c2f:	call	0x15a0


0x5b40:	push	rbp
0x5b41:	push	rbx
0x5b42:	mov	r10d, 0x20
0x5b48:	xor	r11d, r11d
0x5b4b:	sub	rsp, 0xb8
0x5b52:	mov	rax, qword ptr fs:[0x28]
0x5b5b:	mov	qword ptr [rsp + 0x78], rax
0x5b60:	xor	eax, eax
0x5b62:	lea	rax, [rsp + 0xd0]
0x5b6a:	mov	qword ptr [rsp + 0xa0], r8
0x5b72:	lea	rbx, [rsp + 0xd0]
0x5b7a:	lea	r8, [rsp + 0x20]
0x5b7f:	mov	qword ptr [rsp + 0xa8], r9
0x5b87:	mov	dword ptr [rsp + 8], 0x20
0x5b8f:	mov	qword ptr [rsp + 0x10], rax
0x5b94:	lea	rax, [rsp + 0x80]
0x5b9c:	xor	r9d, r9d
0x5b9f:	mov	qword ptr [rsp + 0x18], rax
0x5ba4:	mov	rbp, rax
0x5ba7:	nop	word ptr [rax + rax]
0x5bb0:	cmp	r10d, 0x2f
0x5bb4:	ja	0x5c0c


0x5ac0:	sub	rsp, 0x68
0x5ac4:	mov	r10, r8
0x5ac7:	xor	r9d, r9d
0x5aca:	mov	rax, qword ptr fs:[0x28]
0x5ad3:	mov	qword ptr [rsp + 0x58], rax
0x5ad8:	xor	eax, eax
0x5ada:	mov	r8, rsp
0x5add:	nop	dword ptr [rax]
0x5ae0:	mov	eax, dword ptr [r10]
0x5ae3:	cmp	eax, 0x2f
0x5ae6:	ja	0x5b2a


0x5aa0:	xor	r9d, r9d
0x5aa3:	cmp	qword ptr [r8], 0
0x5aa7:	je	0x5abb


0x5680:	push	r15
0x5682:	push	r14
0x5684:	push	r13
0x5686:	push	r12
0x5688:	mov	r12, r9
0x568b:	push	rbp
0x568c:	push	rbx
0x568d:	mov	rbp, rdi
0x5690:	mov	rbx, r8
0x5693:	sub	rsp, 0x28
0x5697:	test	rsi, rsi
0x569a:	je	0x57b8


0x5620:	push	r13
0x5622:	push	r12
0x5624:	mov	r13d, edi
0x5627:	push	rbp
0x5628:	push	rbx
0x5629:	mov	r12, rsi
0x562c:	mov	rbx, rdx
0x562f:	sub	rsp, 8
0x5633:	nop	dword ptr [rax + rax]
0x5638:	mov	rdx, rbx
0x563b:	mov	rsi, r12
0x563e:	mov	edi, r13d
0x5641:	call	0x1680


0x5600:	lea	rcx, [rip + 0x204a39]
0x5607:	mov	rsi, rdi
0x560a:	mov	rdx, -1
0x5611:	xor	edi, edi
0x5613:	jmp	0x4cc0


0x55e0:	lea	rcx, [rip + 0x204a59]
0x55e7:	mov	rdx, -1
0x55ee:	jmp	0x4cc0


0x55c0:	lea	rcx, [rip + 0x204a79]
0x55c7:	mov	rdx, rsi
0x55ca:	mov	rsi, rdi
0x55cd:	xor	edi, edi
0x55cf:	jmp	0x4cc0


0x55b0:	lea	rcx, [rip + 0x204a89]
0x55b7:	jmp	0x4cc0


0x5590:	mov	r8, rcx
0x5593:	mov	rcx, rdx
0x5596:	mov	rdx, rsi
0x5599:	mov	rsi, rdi
0x559c:	xor	edi, edi
0x559e:	jmp	0x54c0


0x5570:	mov	rcx, rdx
0x5573:	mov	r8, -1
0x557a:	mov	rdx, rsi
0x557d:	mov	rsi, rdi
0x5580:	xor	edi, edi
0x5582:	jmp	0x54c0


0x5560:	mov	r8, -1
0x5567:	jmp	0x54c0


0x54c0:	sub	rsp, 0x48
0x54c4:	mov	r9, rcx
0x54c7:	mov	rcx, qword ptr [rip + 0x204d82]
0x54ce:	movdqa	xmm0, xmmword ptr [rip + 0x204d4a]
0x54d6:	mov	rax, qword ptr fs:[0x28]
0x54df:	mov	qword ptr [rsp + 0x38], rax
0x54e4:	xor	eax, eax
0x54e6:	movaps	xmmword ptr [rsp], xmm0
0x54ea:	test	rsi, rsi
0x54ed:	mov	qword ptr [rsp + 0x30], rcx
0x54f2:	mov	dword ptr [rsp], 0xa
0x54f9:	movdqa	xmm0, xmmword ptr [rip + 0x204d2f]
0x5501:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x5506:	movdqa	xmm0, xmmword ptr [rip + 0x204d32]
0x550e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x5513:	je	0x5547


0x5430:	sub	rsp, 0x48
0x5434:	mov	rax, rdx
0x5437:	mov	rdx, qword ptr fs:[0x28]
0x5440:	mov	qword ptr [rsp + 0x38], rdx
0x5445:	xor	edx, edx
0x5447:	cmp	esi, 0xa
0x544a:	je	0x54b4


0x5420:	mov	edx, 0x3a
0x5425:	jmp	0x5350


0x5400:	mov	edx, 0x3a
0x5405:	mov	rsi, -1
0x540c:	jmp	0x5350


0x53f0:	movsx	edx, sil
0x53f4:	mov	rsi, -1
0x53fb:	jmp	0x5350


0x5350:	sub	rsp, 0x48
0x5354:	mov	ecx, edx
0x5356:	mov	rax, qword ptr fs:[0x28]
0x535f:	mov	qword ptr [rsp + 0x38], rax
0x5364:	xor	eax, eax
0x5366:	mov	rax, qword ptr [rip + 0x204ee3]
0x536d:	mov	r8, rsp
0x5370:	and	ecx, 0x1f
0x5373:	movdqa	xmm0, xmmword ptr [rip + 0x204ea5]
0x537b:	mov	qword ptr [rsp + 0x30], rax
0x5380:	mov	eax, edx
0x5382:	movaps	xmmword ptr [rsp], xmm0
0x5386:	shr	al, 5
0x5389:	movzx	eax, al
0x538c:	lea	r9, [r8 + rax*4 + 8]
0x5391:	movdqa	xmm0, xmmword ptr [rip + 0x204e97]
0x5399:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x539e:	movdqa	xmm0, xmmword ptr [rip + 0x204e9a]
0x53a6:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x53ab:	mov	edx, dword ptr [r9]
0x53ae:	mov	eax, edx
0x53b0:	shr	eax, cl
0x53b2:	not	eax
0x53b4:	and	eax, 1
0x53b7:	shl	eax, cl
0x53b9:	mov	rcx, r8
0x53bc:	xor	eax, edx
0x53be:	mov	rdx, rsi
0x53c1:	mov	rsi, rdi
0x53c4:	mov	dword ptr [r9], eax
0x53c7:	xor	edi, edi
0x53c9:	call	0x4cc0


0x5340:	mov	rcx, rdx
0x5343:	mov	rdx, rsi
0x5346:	mov	esi, edi
0x5348:	xor	edi, edi
0x534a:	jmp	0x52a0


0x5330:	mov	rdx, rsi
0x5333:	mov	esi, edi
0x5335:	xor	edi, edi
0x5337:	jmp	0x5210


0x52a0:	sub	rsp, 0x48
0x52a4:	mov	rax, rdx
0x52a7:	mov	rdx, rcx
0x52aa:	mov	rcx, qword ptr fs:[0x28]
0x52b3:	mov	qword ptr [rsp + 0x38], rcx
0x52b8:	xor	ecx, ecx
0x52ba:	cmp	esi, 0xa
0x52bd:	je	0x5320


0x5210:	sub	rsp, 0x48
0x5214:	mov	rax, rdx
0x5217:	mov	rdx, qword ptr fs:[0x28]
0x5220:	mov	qword ptr [rsp + 0x38], rdx
0x5225:	xor	edx, edx
0x5227:	cmp	esi, 0xa
0x522a:	je	0x5294


0x51f0:	lea	rcx, [rip + 0x205029]
0x51f7:	mov	rdx, rsi
0x51fa:	mov	rsi, rdi
0x51fd:	xor	edi, edi
0x51ff:	jmp	0x4cc0


0x51d0:	lea	rcx, [rip + 0x205049]
0x51d7:	mov	rsi, rdi
0x51da:	mov	rdx, -1
0x51e1:	xor	edi, edi
0x51e3:	jmp	0x4cc0


0x51c0:	lea	rcx, [rip + 0x205059]
0x51c7:	jmp	0x4cc0


0x51a0:	lea	rcx, [rip + 0x205079]
0x51a7:	mov	rdx, -1
0x51ae:	jmp	0x4cc0


0x5100:	mov	eax, dword ptr [rip + 0x204f72]
0x5106:	push	r12
0x5108:	mov	r12, qword ptr [rip + 0x204f71]
0x510f:	push	rbp
0x5110:	push	rbx
0x5111:	cmp	eax, 1
0x5114:	jle	0x5141


0x50f0:	mov	rcx, rdx
0x50f3:	xor	edx, edx
0x50f5:	jmp	0x5000


0x5000:	push	r15
0x5002:	push	r14
0x5004:	lea	rax, [rip + 0x205215]
0x500b:	push	r13
0x500d:	push	r12
0x500f:	mov	r12, rdx
0x5012:	push	rbp
0x5013:	push	rbx
0x5014:	mov	rbx, rcx
0x5017:	mov	r14, rdi
0x501a:	mov	r15, rsi
0x501d:	sub	rsp, 0x38
0x5021:	test	rcx, rcx
0x5024:	cmove	rbx, rax
0x5028:	xor	ebp, ebp
0x502a:	call	0x1520


0x4f80:	push	r15
0x4f82:	push	r14
0x4f84:	lea	rax, [rip + 0x205295]
0x4f8b:	push	r13
0x4f8d:	push	r12
0x4f8f:	mov	r13, rdi
0x4f92:	push	rbp
0x4f93:	push	rbx
0x4f94:	mov	rbx, r8
0x4f97:	mov	r14, rsi
0x4f9a:	mov	r15, rdx
0x4f9d:	sub	rsp, 0x18
0x4fa1:	test	r8, r8
0x4fa4:	cmove	rbx, rax
0x4fa8:	mov	qword ptr [rsp + 8], rcx
0x4fad:	call	0x1520


0x4f50:	lea	rax, [rip + 0x2052c9]
0x4f57:	test	rdi, rdi
0x4f5a:	cmove	rdi, rax
0x4f5e:	test	rsi, rsi
0x4f61:	mov	dword ptr [rdi], 0xa
0x4f67:	je	0x4f77


0x4f30:	lea	rax, [rip + 0x2052e9]
0x4f37:	test	rdi, rdi
0x4f3a:	cmove	rdi, rax
0x4f3e:	mov	eax, dword ptr [rdi + 4]
0x4f41:	mov	dword ptr [rdi + 4], esi
0x4f44:	ret	


0x4ef0:	lea	rax, [rip + 0x205329]
0x4ef7:	test	rdi, rdi
0x4efa:	mov	ecx, esi
0x4efc:	cmove	rdi, rax
0x4f00:	mov	eax, esi
0x4f02:	and	ecx, 0x1f
0x4f05:	shr	al, 5
0x4f08:	movzx	eax, al
0x4f0b:	lea	rdi, [rdi + rax*4 + 8]
0x4f10:	mov	esi, dword ptr [rdi]
0x4f12:	mov	eax, esi
0x4f14:	shr	eax, cl
0x4f16:	xor	edx, eax
0x4f18:	and	eax, 1
0x4f1b:	and	edx, 1
0x4f1e:	shl	edx, cl
0x4f20:	xor	edx, esi
0x4f22:	mov	dword ptr [rdi], edx
0x4f24:	ret	


0x4ed0:	lea	rax, [rip + 0x205349]
0x4ed7:	test	rdi, rdi
0x4eda:	cmove	rdi, rax
0x4ede:	mov	dword ptr [rdi], esi
0x4ee0:	ret	


0x4eb0:	lea	rax, [rip + 0x205369]
0x4eb7:	test	rdi, rdi
0x4eba:	cmove	rdi, rax
0x4ebe:	mov	eax, dword ptr [rdi]
0x4ec0:	ret	


0x4e70:	push	r12
0x4e72:	push	rbp
0x4e73:	push	rbx
0x4e74:	mov	rbx, rdi
0x4e77:	call	0x1520


0x4cc0:	push	r15
0x4cc2:	push	r14
0x4cc4:	movsxd	r15, edi
0x4cc7:	push	r13
0x4cc9:	push	r12
0x4ccb:	mov	r14, rdx
0x4cce:	push	rbp
0x4ccf:	push	rbx
0x4cd0:	mov	rbp, rcx
0x4cd3:	sub	rsp, 0x28
0x4cd7:	mov	qword ptr [rsp + 8], rsi
0x4cdc:	call	0x1520


0x3a80:	push	r15
0x3a82:	push	r14
0x3a84:	mov	r15d, r8d
0x3a87:	push	r13
0x3a89:	push	r12
0x3a8b:	mov	r14, rdi
0x3a8e:	push	rbp
0x3a8f:	push	rbx
0x3a90:	mov	ebx, r9d
0x3a93:	mov	r13, rsi
0x3a96:	mov	rbp, rcx
0x3a99:	and	ebx, 2
0x3a9c:	sub	rsp, 0xb8
0x3aa3:	mov	rax, qword ptr [rsp + 0xf0]
0x3aab:	mov	qword ptr [rsp + 0x10], rdx
0x3ab0:	mov	dword ptr [rsp + 8], r8d
0x3ab5:	mov	dword ptr [rsp + 0x78], r9d
0x3aba:	mov	qword ptr [rsp + 0x20], rax
0x3abf:	mov	rax, qword ptr [rsp + 0xf8]
0x3ac7:	mov	qword ptr [rsp + 0x68], rax
0x3acc:	mov	rax, qword ptr [rsp + 0x100]
0x3ad4:	mov	qword ptr [rsp + 0x60], rax
0x3ad9:	mov	rax, qword ptr fs:[0x28]
0x3ae2:	mov	qword ptr [rsp + 0xa8], rax
0x3aea:	xor	eax, eax
0x3aec:	call	0x15b0


0x3990:	push	rbp
0x3991:	push	rbx
0x3992:	mov	rbp, rdi
0x3995:	mov	ebx, esi
0x3997:	sub	rsp, 8
0x399b:	call	0x65f0


0x38f0:	test	rdi, rdi
0x38f3:	push	rbx
0x38f4:	je	0x396d


0x38a0:	lea	rcx, [rsi + 0x14]
0x38a4:	mov	byte ptr [rsi + 0x14], 0
0x38a8:	movabs	rsi, 0xcccccccccccccccd
0x38b2:	nop	word ptr [rax + rax]
0x38b8:	mov	rax, rdi
0x38bb:	sub	rcx, 1
0x38bf:	mul	rsi
0x38c2:	shr	rdx, 3
0x38c6:	lea	rax, [rdx + rdx*4]
0x38ca:	add	rax, rax
0x38cd:	sub	rdi, rax
0x38d0:	add	edi, 0x30
0x38d3:	test	rdx, rdx
0x38d6:	mov	byte ptr [rcx], dil
0x38d9:	mov	rdi, rdx
0x38dc:	jne	0x38b8


0x3800:	test	rdi, rdi
0x3803:	lea	rcx, [rsi + 0x14]
0x3807:	mov	byte ptr [rsi + 0x14], 0
0x380b:	movabs	r9, 0x6666666666666667
0x3815:	movabs	rsi, 0xcccccccccccccccd
0x381f:	mov	r8d, 0x30
0x3825:	js	0x3863


0x3780:	push	r13
0x3782:	push	r12
0x3784:	push	rbp
0x3785:	push	rbx
0x3786:	sub	rsp, 8
0x378a:	test	rdx, rdx
0x378d:	je	0x37f1


0x36d0:	push	rbp
0x36d1:	push	rbx
0x36d2:	sub	rsp, 8
0x36d6:	mov	rdi, qword ptr [rip + 0x2069cb]
0x36dd:	call	0x6510


0x36c0:	mov	byte ptr [rip + 0x206a29], dil
0x36c7:	ret	


0x36b0:	mov	qword ptr [rip + 0x206a41], rdi
0x36b7:	ret	


0x3280:	push	r13
0x3282:	push	r12
0x3284:	mov	edx, 5
0x3289:	push	rbp
0x328a:	push	rbx
0x328b:	mov	ebp, edi
0x328d:	sub	rsp, 0x88
0x3294:	mov	rbx, qword ptr [rip + 0x206e65]
0x329b:	mov	rax, qword ptr fs:[0x28]
0x32a4:	mov	qword ptr [rsp + 0x78], rax
0x32a9:	xor	eax, eax
0x32ab:	test	edi, edi
0x32ad:	je	0x32dd


0x2fe0:	push	r15
0x2fe2:	mov	rax, rcx
0x2fe5:	push	r14
0x2fe7:	push	r13
0x2fe9:	push	r12
0x2feb:	mov	r13d, 0x2000
0x2ff1:	push	rbp
0x2ff2:	push	rbx
0x2ff3:	mov	rbx, rdx
0x2ff6:	mov	rdx, r8
0x2ff9:	mov	r14d, esi
0x2ffc:	sub	rdx, rax
0x2fff:	sub	rsp, 0x2038
0x3006:	mov	rax, rdx
0x3009:	mov	qword ptr [rsp + 0x10], rcx
0x300e:	mov	qword ptr [rsp + 8], rdi
0x3013:	sar	rax, 0x3f
0x3017:	shr	rax, 0x33
0x301b:	add	rdx, rax
0x301e:	and	edx, 0x1fff
0x3024:	mov	rcx, qword ptr fs:[0x28]
0x302d:	mov	qword ptr [rsp + 0x2028], rcx
0x3035:	xor	ecx, ecx
0x3037:	sub	rdx, rax
0x303a:	mov	rcx, rdi
0x303d:	mov	edi, r14d
0x3040:	cmovne	r13, rdx
0x3044:	xor	edx, edx
0x3046:	sub	r8, r13
0x3049:	mov	rsi, r8
0x304c:	mov	r12, r8
0x304f:	call	0x2ad0


0x2f60:	push	rbp
0x2f61:	push	rbx
0x2f62:	sub	rsp, 8
0x2f66:	cmp	edi, 1
0x2f69:	je	0x2fb8


0x2e70:	push	r15
0x2e72:	push	r14
0x2e74:	push	r13
0x2e76:	push	r12
0x2e78:	push	rbp
0x2e79:	push	rbx
0x2e7a:	sub	rsp, 0x2018
0x2e81:	mov	rax, qword ptr fs:[0x28]
0x2e8a:	mov	qword ptr [rsp + 0x2008], rax
0x2e92:	xor	eax, eax
0x2e94:	test	rdx, rdx
0x2e97:	je	0x2f30


0x2ce0:	push	r15
0x2ce2:	push	r14
0x2ce4:	push	r13
0x2ce6:	push	r12
0x2ce8:	push	rbp
0x2ce9:	push	rbx
0x2cea:	sub	rsp, 0x20a8
0x2cf1:	mov	rax, qword ptr fs:[0x28]
0x2cfa:	mov	qword ptr [rsp + 0x2098], rax
0x2d02:	xor	eax, eax
0x2d04:	test	rdx, rdx
0x2d07:	je	0x2e18


0x2c10:	push	r13
0x2c12:	push	r12
0x2c14:	push	rbp
0x2c15:	push	rbx
0x2c16:	sub	rsp, 0x2018
0x2c1d:	mov	rax, qword ptr fs:[0x28]
0x2c26:	mov	qword ptr [rsp + 0x2008], rax
0x2c2e:	xor	eax, eax
0x2c30:	test	rsi, rsi
0x2c33:	je	0x2c96


0x2b90:	push	rbp
0x2b91:	push	rbx
0x2b92:	mov	rdx, rsi
0x2b95:	mov	rbx, rsi
0x2b98:	mov	esi, 1
0x2b9d:	sub	rsp, 8
0x2ba1:	mov	rcx, qword ptr [rip + 0x207500]
0x2ba8:	call	0x1730


0x2ad0:	push	r13
0x2ad2:	push	r12
0x2ad4:	mov	r13, rcx
0x2ad7:	push	rbp
0x2ad8:	push	rbx
0x2ad9:	mov	r12, rsi
0x2adc:	mov	ebp, edx
0x2ade:	sub	rsp, 0x28
0x2ae2:	mov	rax, qword ptr fs:[0x28]
0x2aeb:	mov	qword ptr [rsp + 0x18], rax
0x2af0:	xor	eax, eax
0x2af2:	call	0x1620


0x2a70:	test	dil, dil
0x2a73:	push	rbx
0x2a74:	mov	edx, 5
0x2a79:	mov	rbx, rsi
0x2a7c:	jne	0x2ab0


0x2a60:	push	rbp
0x2a61:	mov	rbp, rsp
0x2a64:	pop	rbp
0x2a65:	jmp	0x29d0


0x2a20:	cmp	byte ptr [rip + 0x2076c1], 0
0x2a27:	jne	0x2a58


0x29d0:	lea	rdi, [rip + 0x2076c9]
0x29d7:	lea	rsi, [rip + 0x2076c2]
0x29de:	push	rbp
0x29df:	sub	rsi, rdi
0x29e2:	mov	rbp, rsp
0x29e5:	sar	rsi, 3
0x29e9:	mov	rax, rsi
0x29ec:	shr	rax, 0x3f
0x29f0:	add	rsi, rax
0x29f3:	sar	rsi, 1
0x29f6:	je	0x2a10


0x2990:	lea	rdi, [rip + 0x207709]
0x2997:	push	rbp
0x2998:	lea	rax, [rip + 0x207701]
0x299f:	cmp	rax, rdi
0x29a2:	mov	rbp, rsp
0x29a5:	je	0x29c0


0x2960:	xor	ebp, ebp
0x2962:	mov	r9, rdx
0x2965:	pop	rsi
0x2966:	mov	rdx, rsp
0x2969:	and	rsp, 0xfffffffffffffff0
0x296d:	push	rax
0x296e:	push	rsp
0x296f:	lea	r8, [rip + 0x3e4a]
0x2976:	lea	rcx, [rip + 0x3dd3]
0x297d:	lea	rdi, [rip - 0x1154]
0x2984:	call	qword ptr [rip + 0x20764e]


0x1830:	push	r15
0x1832:	push	r14
0x1834:	push	r13
0x1836:	push	r12
0x1838:	push	rbp
0x1839:	push	rbx
0x183a:	mov	ebp, edi
0x183c:	mov	rbx, rsi
0x183f:	sub	rsp, 0x158
0x1846:	mov	rdi, qword ptr [rsi]
0x1849:	mov	rax, qword ptr fs:[0x28]
0x1852:	mov	qword ptr [rsp + 0x148], rax
0x185a:	xor	eax, eax
0x185c:	call	0x38f0


0x14d8:	sub	rsp, 8
0x14dc:	mov	rax, qword ptr [rip + 0x208afd]
0x14e3:	test	rax, rax
0x14e6:	je	0x14ea


0x17b0:	jmp	qword ptr [rip + 0x2087e2]


0x6700:	mov	rax, qword ptr [rdi + 0x20]
0x6704:	cmp	qword ptr [rdi + 0x28], rax
0x6708:	jne	0x66fa


0x66fa:	jmp	0x17a0


0x66ca:	mov	rdi, rbx
0x66cd:	pop	rbx
0x66ce:	jmp	0x16f0


0x66b9:	call	0x1720


0x16d0:	jmp	qword ptr [rip + 0x208852]


0x1700:	jmp	qword ptr [rip + 0x20883a]


0x1750:	jmp	qword ptr [rip + 0x208812]


0x1550:	jmp	qword ptr [rip + 0x208912]


0x15f0:	jmp	qword ptr [rip + 0x2088c2]


0x6087:	lea	rax, [rsp + 0x10]
0x608c:	mov	r15, rsi
0x608f:	test	rsi, rsi
0x6092:	mov	rbp, rdi
0x6095:	mov	dword ptr [rsp + 8], edx
0x6099:	mov	r14, rcx
0x609c:	mov	r13, r8
0x609f:	cmove	r15, rax
0x60a3:	call	0x1520


0x63e5:	lea	rcx, [rip + 0x1674]
0x63ec:	lea	rsi, [rip + 0x154d]
0x63f3:	lea	rdi, [rip + 0x1566]
0x63fa:	mov	edx, 0x54
0x63ff:	call	0x1630


0x15a0:	jmp	qword ptr [rip + 0x2088ea]


0x15c0:	jmp	qword ptr [rip + 0x2088da]


0x5e99:	call	0x5ef0


0x5e82:	movzx	edx, dl
0x5e85:	test	rdx, rdx
0x5e88:	jne	0x5e99


0x5e30:	test	rax, rax
0x5e33:	mov	edx, 0x80
0x5e38:	cmove	rax, rdx
0x5e3c:	test	rax, rax
0x5e3f:	jns	0x5e22


0x5e08:	movabs	rdx, 0x5555555555555553
0x5e12:	cmp	rax, rdx
0x5e15:	ja	0x5e41


0x5db0:	test	rcx, rcx
0x5db3:	je	0x5dd8


0x5d7b:	xor	edx, edx
0x5d7d:	movabs	rax, 0x5555555555555554
0x5d87:	div	r9
0x5d8a:	cmp	rax, rcx
0x5d8d:	jbe	0x5dcb


0x5d5b:	sub	rsp, 8
0x5d5f:	call	0x5ef0


0x5d51:	movzx	eax, al
0x5d54:	test	rax, rax
0x5d57:	jne	0x5d5b


0x5d09:	test	rdi, rdi
0x5d0c:	jne	0x5d28


0x5d0e:	mov	rsi, rbx
0x5d11:	call	0x1740


0x5cdb:	sub	rsp, 8
0x5cdf:	call	0x5ef0


0x5cd1:	movzx	eax, al
0x5cd4:	test	rax, rax
0x5cd7:	jne	0x5cdb


0x16e0:	jmp	qword ptr [rip + 0x20884a]


0x5bb6:	mov	eax, r10d
0x5bb9:	mov	r11d, 1
0x5bbf:	add	r10d, 8
0x5bc3:	add	rax, rbp
0x5bc6:	mov	rax, qword ptr [rax]
0x5bc9:	test	rax, rax
0x5bcc:	mov	qword ptr [r8 + r9*8], rax
0x5bd0:	je	0x5bdc


0x5c0c:	mov	rax, rbx
0x5c0f:	add	rbx, 8
0x5c13:	jmp	0x5bc6


0x5ae8:	mov	r11d, eax
0x5aeb:	add	r11, qword ptr [r10 + 0x10]
0x5aef:	add	eax, 8
0x5af2:	mov	dword ptr [r10], eax
0x5af5:	mov	rax, qword ptr [r11]
0x5af8:	test	rax, rax
0x5afb:	mov	qword ptr [r8 + r9*8], rax
0x5aff:	je	0x5b0b


0x5b2a:	mov	r11, qword ptr [r10 + 8]
0x5b2e:	lea	rax, [r11 + 8]
0x5b32:	mov	qword ptr [r10 + 8], rax
0x5b36:	jmp	0x5af5


0x5abb:	jmp	0x5680


0x57b8:	mov	r8, rcx
0x57bb:	mov	rcx, rdx
0x57be:	lea	rdx, [rip + 0x1e0f]
0x57c5:	mov	esi, 1
0x57ca:	xor	eax, eax
0x57cc:	call	0x17e0


0x56a0:	mov	r8, rdx
0x56a3:	lea	rdx, [rip + 0x1f1e]
0x56aa:	mov	r9, rcx
0x56ad:	xor	eax, eax
0x56af:	mov	rcx, rsi
0x56b2:	mov	esi, 1
0x56b7:	call	0x17e0


0x1680:	jmp	qword ptr [rip + 0x20887a]


0x5547:	call	0x1510


0x5515:	test	rdx, rdx
0x5518:	je	0x5547


0x54b4:	call	0x1510


0x544c:	mov	dword ptr [rsp], esi
0x544f:	mov	rcx, rsp
0x5452:	mov	rdx, -1
0x5459:	mov	rsi, rax
0x545c:	mov	qword ptr [rsp + 4], 0
0x5465:	mov	qword ptr [rsp + 0xc], 0x4000000
0x546e:	mov	qword ptr [rsp + 0x14], 0
0x5477:	mov	qword ptr [rsp + 0x1c], 0
0x5480:	mov	qword ptr [rsp + 0x24], 0
0x5489:	mov	qword ptr [rsp + 0x2c], 0
0x5492:	mov	dword ptr [rsp + 0x34], 0
0x549a:	call	0x4cc0


0x5320:	call	0x1510


0x52bf:	mov	dword ptr [rsp], esi
0x52c2:	mov	rcx, rsp
0x52c5:	mov	rsi, rax
0x52c8:	mov	qword ptr [rsp + 4], 0
0x52d1:	mov	qword ptr [rsp + 0xc], 0
0x52da:	mov	qword ptr [rsp + 0x14], 0
0x52e3:	mov	qword ptr [rsp + 0x1c], 0
0x52ec:	mov	qword ptr [rsp + 0x24], 0
0x52f5:	mov	qword ptr [rsp + 0x2c], 0
0x52fe:	mov	dword ptr [rsp + 0x34], 0
0x5306:	call	0x4cc0


0x5294:	call	0x1510


0x522c:	mov	dword ptr [rsp], esi
0x522f:	mov	rcx, rsp
0x5232:	mov	rdx, -1
0x5239:	mov	rsi, rax
0x523c:	mov	qword ptr [rsp + 4], 0
0x5245:	mov	qword ptr [rsp + 0xc], 0
0x524e:	mov	qword ptr [rsp + 0x14], 0
0x5257:	mov	qword ptr [rsp + 0x1c], 0
0x5260:	mov	qword ptr [rsp + 0x24], 0
0x5269:	mov	qword ptr [rsp + 0x2c], 0
0x5272:	mov	dword ptr [rsp + 0x34], 0
0x527a:	call	0x4cc0


0x5141:	mov	rdi, qword ptr [r12 + 8]
0x5146:	lea	rbx, [rip + 0x204fd3]
0x514d:	cmp	rdi, rbx
0x5150:	je	0x5169


0x5116:	sub	eax, 2
0x5119:	lea	rbx, [r12 + 0x18]
0x511e:	shl	rax, 4
0x5122:	lea	rbp, [r12 + rax + 0x28]
0x5127:	nop	word ptr [rax + rax]
0x5130:	mov	rdi, qword ptr [rbx]
0x5133:	add	rbx, 0x10
0x5137:	call	0x1500


0x1520:	jmp	qword ptr [rip + 0x20892a]


0x4f77:	sub	rsp, 8
0x4f7b:	call	0x1510


0x4f69:	test	rdx, rdx
0x4f6c:	je	0x4f77


0x15b0:	jmp	qword ptr [rip + 0x2088e2]


0x396d:	mov	rcx, qword ptr [rip + 0x20676c]
0x3974:	lea	rdi, [rip + 0x372d]
0x397b:	mov	edx, 0x37
0x3980:	mov	esi, 1
0x3985:	call	0x17d0


0x38f6:	mov	esi, 0x2f
0x38fb:	mov	rbx, rdi
0x38fe:	call	0x1610


0x38de:	mov	rax, rcx
0x38e1:	ret	


0x38b8:	mov	rax, rdi
0x38bb:	sub	rcx, 1
0x38bf:	mul	rsi
0x38c2:	shr	rdx, 3
0x38c6:	lea	rax, [rdx + rdx*4]
0x38ca:	add	rax, rax
0x38cd:	sub	rdi, rax
0x38d0:	add	edi, 0x30
0x38d3:	test	rdx, rdx
0x38d6:	mov	byte ptr [rcx], dil
0x38d9:	mov	rdi, rdx
0x38dc:	jne	0x38b8


0x3863:	mov	rax, rdi
0x3866:	lea	rsi, [rcx - 1]
0x386a:	imul	r9
0x386d:	mov	rax, rdi
0x3870:	sar	rax, 0x3f
0x3874:	sar	rdx, 2
0x3878:	sub	rdx, rax
0x387b:	lea	rax, [rdx + rdx*4]
0x387f:	lea	eax, [r8 + rax*2]
0x3883:	sub	eax, edi
0x3885:	test	rdx, rdx
0x3888:	mov	rdi, rdx
0x388b:	mov	byte ptr [rcx - 1], al
0x388e:	jne	0x3860


0x37f1:	xor	r12d, r12d
0x37f4:	jmp	0x37c4


0x378f:	mov	r13d, edi
0x3792:	mov	rbp, rsi
0x3795:	mov	rbx, rdx
0x3798:	xor	r12d, r12d
0x379b:	jmp	0x37b0


0x32dd:	lea	rsi, [rip + 0x37d4]
0x32e4:	xor	edi, edi
0x32e6:	call	0x15a0


0x32af:	lea	rsi, [rip + 0x37da]
0x32b6:	xor	edi, edi
0x32b8:	call	0x15a0


0x2fb8:	mov	edi, 4
0x2fbd:	call	0x5330


0x2f6b:	cmp	edi, 2
0x2f6e:	jne	0x2fd3


0x2f30:	mov	eax, 1
0x2f35:	mov	rcx, qword ptr [rsp + 0x2008]
0x2f3d:	xor	rcx, qword ptr fs:[0x28]
0x2f46:	jne	0x2f5a


0x2e9d:	mov	r15, rdi
0x2ea0:	mov	r14d, esi
0x2ea3:	mov	rbp, rdx
0x2ea6:	mov	r12d, 0x2000
0x2eac:	mov	r13, rsp
0x2eaf:	jmp	0x2ecd


0x2e18:	mov	eax, 1
0x2e1d:	jmp	0x2d9c


0x2d0d:	lea	rbp, [rsp + 0x90]
0x2d15:	lea	r15, [rsp + 0x8f]
0x2d1d:	mov	r13, rdi
0x2d20:	mov	r12d, esi
0x2d23:	mov	r14, rdx
0x2d26:	mov	edx, 0x2000
0x2d2b:	mov	rsi, rbp
0x2d2e:	mov	edi, r12d
0x2d31:	call	0x5620


0x2c96:	xor	eax, eax
0x2c98:	mov	rcx, qword ptr [rsp + 0x2008]
0x2ca0:	xor	rcx, qword ptr fs:[0x28]
0x2ca9:	jne	0x2cd7


0x2c35:	mov	r12d, edi
0x2c38:	mov	rbx, rsi
0x2c3b:	mov	rbp, rsp
0x2c3e:	mov	r13d, 0x2000
0x2c44:	jmp	0x2c55


0x1730:	jmp	qword ptr [rip + 0x208822]


0x1620:	jmp	qword ptr [rip + 0x2088aa]


0x2a7e:	lea	rsi, [rip + 0x3d97]
0x2a85:	xor	edi, edi
0x2a87:	call	0x15a0


0x2ab0:	lea	rsi, [rip + 0x3d4d]
0x2ab7:	xor	edi, edi
0x2ab9:	call	0x15a0


0x2a29:	cmp	qword ptr [rip + 0x2075bf], 0
0x2a31:	push	rbp
0x2a32:	mov	rbp, rsp
0x2a35:	je	0x2a43


0x2a58:	ret	


0x2a10:	pop	rbp
0x2a11:	ret	


0x29f8:	mov	rax, qword ptr [rip + 0x2075e9]
0x29ff:	test	rax, rax
0x2a02:	je	0x2a10


0x29c0:	pop	rbp
0x29c1:	ret	


0x29a7:	mov	rax, qword ptr [rip + 0x207622]
0x29ae:	test	rax, rax
0x29b1:	je	0x29c0




0x14ea:	add	rsp, 8
0x14ee:	ret	


0x14e8:	call	rax




0x670a:	cmp	qword ptr [rdi + 0x48], 0
0x670f:	jne	0x66fa


0x17a0:	jmp	qword ptr [rip + 0x2087ea]


0x16f0:	jmp	qword ptr [rip + 0x208842]


0x1720:	jmp	qword ptr [rip + 0x20882a]












0x1630:	jmp	qword ptr [rip + 0x2088a2]






0x5e8a:	call	0x16b0


0x5e41:	sub	rsp, 8
0x5e45:	call	0x5ef0


0x5e22:	mov	qword ptr [rsi], rax
0x5e25:	mov	rsi, rax
0x5e28:	jmp	0x5d00


0x5e17:	mov	rdx, rax
0x5e1a:	shr	rdx, 1
0x5e1d:	lea	rax, [rdx + rax + 1]
0x5e22:	mov	qword ptr [rsi], rax
0x5e25:	mov	rsi, rax
0x5e28:	jmp	0x5d00


0x5dd8:	xor	edx, edx
0x5dda:	mov	eax, 0x80
0x5ddf:	xor	r8d, r8d
0x5de2:	div	r9
0x5de5:	test	rax, rax
0x5de8:	sete	r8b
0x5dec:	lea	rcx, [r8 + rax]
0x5df0:	jmp	0x5db5


0x5db5:	mov	rax, rcx
0x5db8:	mul	r9
0x5dbb:	seto	dl
0x5dbe:	test	rax, rax
0x5dc1:	movzx	edx, dl
0x5dc4:	js	0x5dcb


0x5dcb:	sub	rsp, 8
0x5dcf:	call	0x5ef0


0x5d8f:	mov	rax, rcx
0x5d92:	shr	rax, 1
0x5d95:	lea	rcx, [rax + rcx + 1]
0x5d9a:	mov	qword ptr [rsi], rcx
0x5d9d:	imul	rcx, r9
0x5da1:	mov	rsi, rcx
0x5da4:	jmp	0x5d00


0x5d59:	jmp	0x5d00


0x5d28:	call	0x1500


0x1740:	jmp	qword ptr [rip + 0x20881a]


0x5cd9:	jmp	0x5ca0




0x5bdc:	test	r11b, r11b
0x5bdf:	jne	0x5c05


0x5bd2:	add	r9, 1
0x5bd6:	cmp	r9, 0xa
0x5bda:	jne	0x5bb0


0x5bc6:	mov	rax, qword ptr [rax]
0x5bc9:	test	rax, rax
0x5bcc:	mov	qword ptr [r8 + r9*8], rax
0x5bd0:	je	0x5bdc


0x5b0b:	call	0x5680


0x5b01:	add	r9, 1
0x5b05:	cmp	r9, 0xa
0x5b09:	jne	0x5ae0


0x5af5:	mov	rax, qword ptr [r11]
0x5af8:	test	rax, rax
0x5afb:	mov	qword ptr [r8 + r9*8], rax
0x5aff:	je	0x5b0b


0x5ab0:	add	r9, 1
0x5ab4:	cmp	qword ptr [r8 + r9*8], 0
0x5ab9:	jne	0x5ab0


0x17e0:	jmp	qword ptr [rip + 0x2087ca]




0x1510:	jmp	qword ptr [rip + 0x208932]


0x551a:	mov	qword ptr [rsp + 0x28], rsi
0x551f:	mov	qword ptr [rsp + 0x30], rdx
0x5524:	mov	rcx, rsp
0x5527:	mov	rdx, r8
0x552a:	mov	rsi, r9
0x552d:	call	0x4cc0


0x5169:	lea	rbx, [rip + 0x204f20]
0x5170:	cmp	r12, rbx
0x5173:	je	0x5184


0x5152:	call	0x1500


0x1500:	jmp	qword ptr [rip + 0x20893a]




0x4f6e:	mov	qword ptr [rdi + 0x28], rsi
0x4f72:	mov	qword ptr [rdi + 0x30], rdx
0x4f76:	ret	




0x17d0:	jmp	qword ptr [rip + 0x2087d2]


0x1610:	jmp	qword ptr [rip + 0x2088b2]


0x3890:	sub	rcx, 2
0x3894:	mov	byte ptr [rsi - 1], 0x2d
0x3898:	mov	rax, rcx
0x389b:	ret	


0x3860:	mov	rcx, rsi
0x3863:	mov	rax, rdi
0x3866:	lea	rsi, [rcx - 1]
0x386a:	imul	r9
0x386d:	mov	rax, rdi
0x3870:	sar	rax, 0x3f
0x3874:	sar	rdx, 2
0x3878:	sub	rdx, rax
0x387b:	lea	rax, [rdx + rdx*4]
0x387f:	lea	eax, [r8 + rax*2]
0x3883:	sub	eax, edi
0x3885:	test	rdx, rdx
0x3888:	mov	rdi, rdx
0x388b:	mov	byte ptr [rcx - 1], al
0x388e:	jne	0x3860


0x3856:	mov	rax, rcx
0x3859:	ret	


0x3830:	mov	rax, rdi
0x3833:	sub	rcx, 1
0x3837:	mul	rsi
0x383a:	shr	rdx, 3
0x383e:	lea	rax, [rdx + rdx*4]
0x3842:	add	rax, rax
0x3845:	sub	rdi, rax
0x3848:	add	edi, 0x30
0x384b:	test	rdx, rdx
0x384e:	mov	byte ptr [rcx], dil
0x3851:	mov	rdi, rdx
0x3854:	jne	0x3830


0x37c4:	add	rsp, 8
0x37c8:	mov	rax, r12
0x37cb:	pop	rbx
0x37cc:	pop	rbp
0x37cd:	pop	r12
0x37cf:	pop	r13
0x37d1:	ret	


0x37b0:	mov	rdx, rbx
0x37b3:	mov	rsi, rbp
0x37b6:	mov	edi, r13d
0x37b9:	call	0x5620


0x2f70:	mov	rdx, rsi
0x2f73:	xor	edi, edi
0x2f75:	mov	esi, 3
0x2f7a:	call	0x5430


0x2fd3:	call	0x1510


0x2f48:	add	rsp, 0x2018
0x2f4f:	pop	rbx
0x2f50:	pop	rbp
0x2f51:	pop	r12
0x2f53:	pop	r13
0x2f55:	pop	r14
0x2f57:	pop	r15
0x2f59:	ret	


0x2f5a:	call	0x15d0


0x2ecd:	cmp	r12, rbp
0x2ed0:	mov	rsi, r13
0x2ed3:	mov	edi, r14d
0x2ed6:	cmova	r12, rbp
0x2eda:	mov	rdx, r12
0x2edd:	call	0x5620


0x2d9c:	mov	rcx, qword ptr [rsp + 0x2098]
0x2da4:	xor	rcx, qword ptr fs:[0x28]
0x2dad:	jne	0x2e62


0x2cab:	add	rsp, 0x2018
0x2cb2:	pop	rbx
0x2cb3:	pop	rbp
0x2cb4:	pop	r12
0x2cb6:	pop	r13
0x2cb8:	ret	


0x2cd7:	call	0x15d0


0x2c55:	cmp	rbx, 0x2000
0x2c5c:	mov	rdx, r13
0x2c5f:	mov	rsi, rbp
0x2c62:	cmovbe	rdx, rbx
0x2c66:	mov	edi, r12d
0x2c69:	call	0x5620






0x2a43:	call	0x2990


0x2a37:	mov	rdi, qword ptr [rip + 0x2075ca]
0x2a3e:	call	0x1820


0x2a04:	pop	rbp
0x2a05:	jmp	rax


0x29b3:	pop	rbp
0x29b4:	jmp	rax


0x6711:	push	r12
0x6713:	push	rbp
0x6714:	mov	r12d, edx
0x6717:	push	rbx
0x6718:	mov	rbp, rsi
0x671b:	mov	rbx, rdi
0x671e:	call	0x16d0










0x16b0:	jmp	qword ptr [rip + 0x208862]


0x5dc6:	test	rdx, rdx
0x5dc9:	je	0x5d9a




0x5be1:	call	0x5680


0x5c05:	mov	dword ptr [rsp + 8], r10d
0x5c0a:	jmp	0x5be1


0x5bb0:	cmp	r10d, 0x2f
0x5bb4:	ja	0x5c0c


0x5ae0:	mov	eax, dword ptr [r10]
0x5ae3:	cmp	eax, 0x2f
0x5ae6:	ja	0x5b2a






0x5184:	pop	rbx
0x5185:	mov	dword ptr [rip + 0x204ee9], 1
0x518f:	pop	rbp
0x5190:	pop	r12
0x5192:	ret	


0x5175:	mov	rdi, r12
0x5178:	call	0x1500








0x15d0:	jmp	qword ptr [rip + 0x2088d2]


0x2db3:	add	rsp, 0x20a8
0x2dba:	pop	rbx
0x2dbb:	pop	rbp
0x2dbc:	pop	r12
0x2dbe:	pop	r13
0x2dc0:	pop	r14
0x2dc2:	pop	r15
0x2dc4:	ret	


0x2e62:	call	0x15d0


0x1820:	jmp	qword ptr [rip + 0x2087ca]




0x5d9a:	mov	qword ptr [rsi], rcx
0x5d9d:	imul	rcx, r9
0x5da1:	mov	rsi, rcx
0x5da4:	jmp	0x5d00




0x2a48:	mov	byte ptr [rip + 0x207699], 1
0x2a4f:	pop	rbp
0x2a50:	ret	


0x6781:	test	rbp, rbp
0x6784:	je	0x67a6


0x67a6:	add	rsp, 8
0x67aa:	pop	rbx
0x67ab:	pop	rbp
0x67ac:	pop	r12
0x67ae:	pop	r13
0x67b0:	pop	r14
0x67b2:	pop	r15
0x67b4:	ret	


0x6786:	xor	ebx, ebx
0x6788:	nop	dword ptr [rax + rax]
0x6790:	mov	rdx, r15
0x6793:	mov	rsi, r14
0x6796:	mov	edi, r13d
0x6799:	call	qword ptr [r12 + rbx*8]


0x5e8f:	test	rax, rax
0x5e92:	je	0x5e99


0x5e94:	add	rsp, 8
0x5e98:	ret	


0x3903:	test	rax, rax
0x3906:	je	0x395d


0x395d:	mov	qword ptr [rip + 0x20679c], rbx
0x3964:	mov	qword ptr [rip + 0x206755], rbx
0x396b:	pop	rbx
0x396c:	ret	


0x3908:	lea	r8, [rax + 1]
0x390c:	mov	rdx, r8
0x390f:	sub	rdx, rbx
0x3912:	cmp	rdx, 6
0x3916:	jle	0x395d


0x3918:	lea	rsi, [rax - 6]
0x391c:	lea	rdi, [rip + 0x37bd]
0x3923:	mov	ecx, 7
0x3928:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3928:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x392a:	seta	dl
0x392d:	sbb	dl, 0
0x3930:	test	dl, dl
0x3932:	jne	0x395d


0x3934:	lea	rdi, [rip + 0x37ad]
0x393b:	mov	ecx, 3
0x3940:	mov	rsi, r8
0x3943:	mov	rbx, r8
0x3946:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3946:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3948:	seta	dl
0x394b:	sbb	dl, 0
0x394e:	test	dl, dl
0x3950:	jne	0x395d


0x3952:	lea	rbx, [rax + 4]
0x3956:	mov	qword ptr [rip + 0x206743], rbx
0x395d:	mov	qword ptr [rip + 0x20679c], rbx
0x3964:	mov	qword ptr [rip + 0x206755], rbx
0x396b:	pop	rbx
0x396c:	ret	


0x398a:	call	0x1510


0x517d:	mov	qword ptr [rip + 0x204efc], rbx
0x5184:	pop	rbx
0x5185:	mov	dword ptr [rip + 0x204ee9], 1
0x518f:	pop	rbp
0x5190:	pop	r12
0x5192:	ret	


0x5157:	mov	qword ptr [rip + 0x204f2e], 0x100
0x5162:	mov	qword ptr [rip + 0x204f2f], rbx
0x5169:	lea	rbx, [rip + 0x204f20]
0x5170:	cmp	r12, rbx
0x5173:	je	0x5184


0x5d2d:	xor	eax, eax
0x5d2f:	pop	rbx
0x5d30:	ret	


0x513c:	cmp	rbx, rbp
0x513f:	jne	0x5130


0x5130:	mov	rdi, qword ptr [rbx]
0x5133:	add	rbx, 0x10
0x5137:	call	0x1500


0x56bc:	lea	rsi, [rip + 0x1f18]
0x56c3:	xor	edi, edi
0x56c5:	mov	edx, 5
0x56ca:	call	0x15a0


0x57d1:	jmp	0x56bc


0x5d16:	test	rax, rax
0x5d19:	jne	0x5d20


0x5d1b:	test	rbx, rbx
0x5d1e:	jne	0x5d31


0x5d20:	pop	rbx
0x5d21:	ret	


0x5d31:	call	0x5ef0


0x66be:	test	eax, eax
0x66c0:	je	0x66ca


0x66c2:	test	dword ptr [rbx], 0x100
0x66c8:	jne	0x66d8


0x66d8:	mov	rdi, rbx
0x66db:	mov	edx, 1
0x66e0:	xor	esi, esi
0x66e2:	call	0x66f0


0x1861:	lea	rsi, [rip + 0x5db9]
0x1868:	mov	edi, 6
0x186d:	call	0x1750


0x2af7:	test	rax, rax
0x2afa:	mov	rbx, rax
0x2afd:	js	0x2b20


0x2b20:	mov	rsi, rsp
0x2b23:	mov	rdi, r12
0x2b26:	call	0x3800


0x2aff:	mov	rcx, qword ptr [rsp + 0x18]
0x2b04:	xor	rcx, qword ptr fs:[0x28]
0x2b0d:	mov	rax, rbx
0x2b10:	jne	0x2b7e


0x2b12:	add	rsp, 0x28
0x2b16:	pop	rbx
0x2b17:	pop	rbp
0x2b18:	pop	r12
0x2b1a:	pop	r13
0x2b1c:	ret	


0x2b7e:	call	0x15d0


0x2b2b:	mov	rdx, r13
0x2b2e:	xor	edi, edi
0x2b30:	mov	esi, 3
0x2b35:	mov	r12, rax
0x2b38:	call	0x5430


0x2bad:	cmp	rbx, rax
0x2bb0:	ja	0x2bb9


0x2bb2:	add	rsp, 8
0x2bb6:	pop	rbx
0x2bb7:	pop	rbp
0x2bb8:	ret	


0x2bb9:	mov	rdi, qword ptr [rip + 0x2074e8]
0x2bc0:	call	0x1560


0x1560:	jmp	qword ptr [rip + 0x20890a]




0x3054:	test	rax, rax
0x3057:	js	0x3138


0x3138:	xor	eax, eax
0x313a:	mov	rcx, qword ptr [rsp + 0x2028]
0x3142:	xor	rcx, qword ptr fs:[0x28]
0x314b:	jne	0x327b


0x305d:	lea	rbp, [rsp + 0x20]
0x3062:	mov	rdx, r13
0x3065:	mov	edi, r14d
0x3068:	mov	rsi, rbp
0x306b:	call	0x5620


0x3151:	add	rsp, 0x2038
0x3158:	pop	rbx
0x3159:	pop	rbp
0x315a:	pop	r12
0x315c:	pop	r13
0x315e:	pop	r14
0x3160:	pop	r15
0x3162:	ret	


0x327b:	call	0x15d0


0x3af1:	cmp	r15d, 0xa
0x3af5:	mov	qword ptr [rsp + 0x58], rax
0x3afa:	ja	0x4caf


0x3b00:	lea	rcx, [rip + 0x3659]
0x3b07:	mov	edx, r15d
0x3b0a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x3b0e:	add	rax, rcx
0x3b11:	jmp	rax


0x4caf:	call	0x1510


0x60a8:	mov	dword ptr [rax], 0
0x60ae:	mov	r12, rax
0x60b1:	movzx	ebx, byte ptr [rbp]
0x60b5:	call	0x1810


0x1810:	jmp	qword ptr [rip + 0x2087b2]




0x4ce1:	mov	r13, rax
0x4ce4:	mov	eax, dword ptr [rax]
0x4ce6:	test	r15d, r15d
0x4ce9:	mov	rbx, qword ptr [rip + 0x205390]
0x4cf0:	mov	dword ptr [rsp + 0x18], eax
0x4cf4:	js	0x4e61


0x4e61:	call	0x1510


0x4cfa:	cmp	dword ptr [rip + 0x205377], r15d
0x4d01:	jg	0x4d65


0x4d03:	cmp	r15d, 0x7fffffff
0x4d0a:	je	0x4e66


0x4d65:	mov	eax, dword ptr [rbp + 4]
0x4d68:	shl	r15, 4
0x4d6c:	sub	rsp, 8
0x4d70:	add	rbx, r15
0x4d73:	lea	r15, [rbp + 8]
0x4d77:	mov	r8d, dword ptr [rbp]
0x4d7b:	mov	r11, qword ptr [rbx]
0x4d7e:	mov	r12, qword ptr [rbx + 8]
0x4d82:	mov	rcx, r14
0x4d85:	or	eax, 1
0x4d88:	mov	dword ptr [rsp + 0x24], eax
0x4d8c:	push	qword ptr [rbp + 0x30]
0x4d8f:	mov	r9d, eax
0x4d92:	push	qword ptr [rbp + 0x28]
0x4d95:	push	r15
0x4d97:	mov	rsi, r11
0x4d9a:	mov	rdx, qword ptr [rsp + 0x28]
0x4d9f:	mov	rdi, r12
0x4da2:	mov	qword ptr [rsp + 0x30], r11
0x4da7:	call	0x3a80


0x4e66:	call	0x5ef0


0x4d10:	lea	r12d, [r15 + 1]
0x4d14:	lea	rax, [rip + 0x205375]
0x4d1b:	movsxd	rsi, r12d
0x4d1e:	shl	rsi, 4
0x4d22:	cmp	rbx, rax
0x4d25:	je	0x4e40


0x4e40:	xor	edi, edi
0x4e42:	call	0x5d00


0x4d2b:	mov	rdi, rbx
0x4d2e:	call	0x5d00


0x4d33:	mov	rbx, rax
0x4d36:	mov	qword ptr [rip + 0x205343], rax
0x4d3d:	movsxd	rdi, dword ptr [rip + 0x205334]
0x4d44:	mov	edx, r12d
0x4d47:	xor	esi, esi
0x4d49:	sub	edx, edi
0x4d4b:	shl	rdi, 4
0x4d4f:	movsxd	rdx, edx
0x4d52:	add	rdi, rbx
0x4d55:	shl	rdx, 4
0x4d59:	call	0x1650


0x1650:	jmp	qword ptr [rip + 0x208892]




0x4e47:	movdqa	xmm0, xmmword ptr [rip + 0x205241]
0x4e4f:	mov	rbx, rax
0x4e52:	mov	qword ptr [rip + 0x205227], rax
0x4e59:	movups	xmmword ptr [rax], xmm0
0x4e5c:	jmp	0x4d3d


0x4d3d:	movsxd	rdi, dword ptr [rip + 0x205334]
0x4d44:	mov	edx, r12d
0x4d47:	xor	esi, esi
0x4d49:	sub	edx, edi
0x4d4b:	shl	rdi, 4
0x4d4f:	movsxd	rdx, edx
0x4d52:	add	rdi, rbx
0x4d55:	shl	rdx, 4
0x4d59:	call	0x1650


0x4e7c:	mov	r12d, dword ptr [rax]
0x4e7f:	mov	rbp, rax
0x4e82:	lea	rax, [rip + 0x205397]
0x4e89:	test	rbx, rbx
0x4e8c:	mov	esi, 0x38
0x4e91:	cmove	rbx, rax
0x4e95:	mov	rdi, rbx
0x4e98:	call	0x5ea0


0x4fb2:	mov	r12d, dword ptr [rax]
0x4fb5:	mov	rbp, rax
0x4fb8:	lea	rax, [rbx + 8]
0x4fbc:	sub	rsp, 8
0x4fc0:	mov	r9d, dword ptr [rbx + 4]
0x4fc4:	push	qword ptr [rbx + 0x30]
0x4fc7:	mov	r8d, dword ptr [rbx]
0x4fca:	push	qword ptr [rbx + 0x28]
0x4fcd:	mov	rdx, r15
0x4fd0:	push	rax
0x4fd1:	mov	rcx, qword ptr [rsp + 0x28]
0x4fd6:	mov	rsi, r14
0x4fd9:	mov	rdi, r13
0x4fdc:	call	0x3a80


0x502f:	test	r12, r12
0x5032:	mov	r13, rax
0x5035:	mov	eax, dword ptr [rax]
0x5037:	sete	bpl
0x503b:	or	ebp, dword ptr [rbx + 4]
0x503e:	lea	r10, [rbx + 8]
0x5042:	sub	rsp, 8
0x5046:	mov	r8d, dword ptr [rbx]
0x5049:	mov	rcx, r15
0x504c:	mov	dword ptr [rsp + 0x14], eax
0x5050:	push	qword ptr [rbx + 0x30]
0x5053:	mov	rdx, r14
0x5056:	push	qword ptr [rbx + 0x28]
0x5059:	push	r10
0x505b:	xor	esi, esi
0x505d:	mov	r9d, ebp
0x5060:	xor	edi, edi
0x5062:	mov	qword ptr [rsp + 0x40], r10
0x5067:	call	0x3a80


0x5646:	test	rax, rax
0x5649:	mov	rbp, rax
0x564c:	jns	0x5670


0x564e:	call	0x1520


0x5670:	add	rsp, 8
0x5674:	mov	rax, rbp
0x5677:	pop	rbx
0x5678:	pop	rbp
0x5679:	pop	r12
0x567b:	pop	r13
0x567d:	ret	


0x5653:	mov	eax, dword ptr [rax]
0x5655:	cmp	eax, 4
0x5658:	je	0x5638


0x5638:	mov	rdx, rbx
0x563b:	mov	rsi, r12
0x563e:	mov	edi, r13d
0x5641:	call	0x1680


0x565a:	cmp	rbx, 0x7ff00000
0x5661:	jbe	0x5670


0x5663:	cmp	eax, 0x16
0x5666:	jne	0x5670


0x5668:	mov	ebx, 0x7ff00000
0x566d:	jmp	0x5638


0x3070:	cmp	rax, -1
0x3074:	mov	r8, rax
0x3077:	je	0x31e0


0x31e0:	mov	rsi, qword ptr [rsp + 8]
0x31e5:	mov	edi, 4
0x31ea:	call	0x5330


0x307d:	test	rbx, rbx
0x3080:	je	0x31c0


0x31c0:	mov	r15, rbx
0x31c3:	jmp	0x30a7


0x3086:	test	rax, rax
0x3089:	je	0x31c0


0x30a7:	test	r8, r8
0x30aa:	je	0x3168


0x308f:	movzx	eax, byte ptr [rip + 0x207054]
0x3096:	mov	r15, rbx
0x3099:	cmp	byte ptr [rsp + r8 + 0x1f], al
0x309e:	setne	al
0x30a1:	movzx	eax, al
0x30a4:	sub	r15, rax
0x30a7:	test	r8, r8
0x30aa:	je	0x3168


0x3168:	cmp	r12, qword ptr [rsp + 0x10]
0x316d:	je	0x31af


0x30b0:	movsx	r13d, byte ptr [rip + 0x207032]
0x30b8:	jmp	0x30d9


0x31af:	mov	eax, 1
0x31b4:	jmp	0x313a


0x316f:	mov	rcx, qword ptr [rsp + 8]
0x3174:	sub	r12, 0x2000
0x317b:	xor	edx, edx
0x317d:	mov	rsi, r12
0x3180:	mov	edi, r14d
0x3183:	call	0x2ad0


0x30d9:	test	rbx, rbx
0x30dc:	je	0x30c0


0x313a:	mov	rcx, qword ptr [rsp + 0x2028]
0x3142:	xor	rcx, qword ptr fs:[0x28]
0x314b:	jne	0x327b


0x30c0:	sub	r8, 1
0x30c4:	test	r15, r15
0x30c7:	lea	rax, [r15 - 1]
0x30cb:	je	0x3100


0x30de:	mov	rdx, r8
0x30e1:	mov	esi, r13d
0x30e4:	mov	rdi, rbp
0x30e7:	call	0x1780


0x3100:	cmp	r12, qword ptr [rsp + 0x10]
0x3105:	jg	0x3228


0x30cd:	test	r8, r8
0x30d0:	mov	r15, rax
0x30d3:	je	0x3168


0x1780:	jmp	qword ptr [rip + 0x2087fa]


0x310b:	mov	rbx, r8
0x310e:	add	rbx, 1
0x3112:	jne	0x31d0


0x3228:	mov	rbx, qword ptr [rsp + 0x10]
0x322d:	mov	rcx, qword ptr [rsp + 8]
0x3232:	xor	edx, edx
0x3234:	mov	edi, r14d
0x3237:	mov	qword ptr [rsp + 0x18], r8
0x323c:	mov	rsi, rbx
0x323f:	call	0x2ad0




0x3118:	mov	rcx, qword ptr [rsp + 8]
0x311d:	lea	rsi, [r12 + rbx]
0x3121:	xor	edx, edx
0x3123:	mov	edi, r14d
0x3126:	call	0x2ad0


0x31d0:	mov	rsi, rbx
0x31d3:	mov	rdi, rbp
0x31d6:	call	0x2b90


0x31db:	jmp	0x3118


0x312b:	not	rax
0x312e:	shr	rax, 0x3f
0x3132:	jmp	0x313a


0x3244:	test	rax, rax
0x3247:	js	0x3138


0x324d:	mov	rsi, r12
0x3250:	mov	edi, r14d
0x3253:	sub	rsi, rbx
0x3256:	call	0x2c10


0x325b:	test	eax, eax
0x325d:	mov	r8, qword ptr [rsp + 0x18]
0x3262:	je	0x310b


0x3268:	mov	rsi, qword ptr [rsp + 8]
0x326d:	mov	edi, eax
0x326f:	call	0x2f60


0x3188:	test	rax, rax
0x318b:	js	0x3138


0x318d:	mov	edx, 0x2000
0x3192:	mov	rsi, rbp
0x3195:	mov	edi, r14d
0x3198:	call	0x5620


0x319d:	cmp	rax, -1
0x31a1:	mov	r8, rax
0x31a4:	je	0x31e0


0x31a6:	test	rax, rax
0x31a9:	jne	0x30a7


0x2c6e:	cmp	rax, -1
0x2c72:	je	0x2cc0


0x2cc0:	mov	eax, 1
0x2cc5:	jmp	0x2c98


0x2c74:	sub	rbx, rax
0x2c77:	test	rax, rax
0x2c7a:	jne	0x2c81


0x2c98:	mov	rcx, qword ptr [rsp + 0x2008]
0x2ca0:	xor	rcx, qword ptr fs:[0x28]
0x2ca9:	jne	0x2cd7


0x2c7c:	test	rbx, rbx
0x2c7f:	jne	0x2cd0


0x2c81:	test	rax, rax
0x2c84:	je	0x2c50


0x2cd0:	mov	eax, 2
0x2cd5:	jmp	0x2c98


0x2c50:	test	rbx, rbx
0x2c53:	je	0x2c96


0x2c86:	mov	rsi, rax
0x2c89:	mov	rdi, rbp
0x2c8c:	call	0x2b90


0x2c91:	test	rbx, rbx
0x2c94:	jne	0x2c55


0x2ee2:	cmp	rax, -1
0x2ee6:	mov	rbx, rax
0x2ee9:	jne	0x2eb8


0x2eeb:	mov	rsi, r15
0x2eee:	mov	edi, 4
0x2ef3:	call	0x5330


0x2eb8:	test	rax, rax
0x2ebb:	je	0x2f30


0x2ebd:	mov	rsi, rax
0x2ec0:	mov	rdi, r13
0x2ec3:	call	0x2b90


0x2ec8:	sub	rbp, rbx
0x2ecb:	je	0x2f30


0x37be:	cmp	rax, -1
0x37c2:	jne	0x37a0


0x37a0:	test	rax, rax
0x37a3:	je	0x37d8


0x37d8:	call	0x1520


0x37a5:	add	r12, rax
0x37a8:	add	rbp, rax
0x37ab:	sub	rbx, rax
0x37ae:	je	0x37c4


0x37dd:	mov	dword ptr [rax], 0
0x37e3:	add	rsp, 8
0x37e7:	mov	rax, r12
0x37ea:	pop	rbx
0x37eb:	pop	rbp
0x37ec:	pop	r12
0x37ee:	pop	r13
0x37f0:	ret	


0x2d36:	cmp	rax, -1
0x2d3a:	je	0x2dd8


0x2dd8:	mov	rsi, r13
0x2ddb:	mov	edi, 4
0x2de0:	call	0x5330


0x2d40:	test	rax, rax
0x2d43:	je	0x2e18


0x2d49:	movzx	edx, byte ptr [rip + 0x20739a]
0x2d50:	xor	ebx, ebx
0x2d52:	jmp	0x2d5d


0x2d5d:	add	rbx, 1
0x2d61:	cmp	byte ptr [r15 + rbx], dl
0x2d65:	jne	0x2d58


0x2d67:	sub	r14, 1
0x2d6b:	jne	0x2d58


0x2d58:	cmp	rax, rbx
0x2d5b:	je	0x2dc8


0x2d6d:	mov	r14, rbx
0x2d70:	mov	edx, 1
0x2d75:	mov	edi, r12d
0x2d78:	sub	r14, rax
0x2d7b:	mov	rsi, r14
0x2d7e:	call	0x1620


0x2dc8:	mov	rsi, rax
0x2dcb:	mov	rdi, rbp
0x2dce:	call	0x2b90


0x2dd3:	jmp	0x2d26


0x2d26:	mov	edx, 0x2000
0x2d2b:	mov	rsi, rbp
0x2d2e:	mov	edi, r12d
0x2d31:	call	0x5620


0x2d83:	test	rax, rax
0x2d86:	js	0x2e22


0x2e22:	mov	rdx, rsp
0x2e25:	mov	esi, r12d
0x2e28:	mov	edi, 1
0x2e2d:	call	0x1710


0x2d8c:	mov	rsi, rbx
0x2d8f:	mov	rdi, rbp
0x2d92:	call	0x2b90


0x1710:	jmp	qword ptr [rip + 0x208832]




0x2d97:	mov	eax, 1
0x2d9c:	mov	rcx, qword ptr [rsp + 0x2098]
0x2da4:	xor	rcx, qword ptr fs:[0x28]
0x2dad:	jne	0x2e62


0x5ca9:	test	rax, rax
0x5cac:	jne	0x5cb3


0x5cae:	test	rbx, rbx
0x5cb1:	jne	0x5cb5


0x5cb3:	pop	rbx
0x5cb4:	ret	


0x5cb5:	call	0x5ef0


0x5e59:	mov	rdx, rbx
0x5e5c:	xor	esi, esi
0x5e5e:	mov	rdi, rax
0x5e61:	pop	rbx
0x5e62:	jmp	0x1650


0x5eb4:	add	rsp, 8
0x5eb8:	mov	rdx, rbx
0x5ebb:	mov	rsi, rbp
0x5ebe:	pop	rbx
0x5ebf:	pop	rbp
0x5ec0:	mov	rdi, rax
0x5ec3:	jmp	0x16c0


0x16c0:	jmp	qword ptr [rip + 0x20885a]




0x5ed9:	mov	rdi, rbx
0x5edc:	lea	rsi, [rax + 1]
0x5ee0:	pop	rbx
0x5ee1:	jmp	0x5ea0


0x56cf:	lea	rdx, [rip + 0x222a]
0x56d6:	mov	rcx, rax
0x56d9:	mov	r8d, 0x7e3
0x56df:	mov	esi, 1
0x56e4:	mov	rdi, rbp
0x56e7:	xor	eax, eax
0x56e9:	call	0x17e0


0x56ee:	lea	rsi, [rip + 0x1f73]
0x56f5:	xor	edi, edi
0x56f7:	mov	edx, 5
0x56fc:	call	0x15a0


0x5701:	mov	rsi, rbp
0x5704:	mov	rdi, rax
0x5707:	call	0x16a0


0x16a0:	jmp	qword ptr [rip + 0x20886a]




0x2abe:	mov	r8, rax
0x2ac1:	jmp	0x2a8f


0x2a8f:	mov	rdi, rbx
0x2a92:	lea	rcx, [rip + 0x3d9b]
0x2a99:	xor	r9d, r9d
0x2a9c:	pop	rbx
0x2a9d:	mov	rdx, -1
0x2aa4:	xor	esi, esi
0x2aa6:	jmp	0x6030


0x2a8c:	mov	r8, rax
0x2a8f:	mov	rdi, rbx
0x2a92:	lea	rcx, [rip + 0x3d9b]
0x2a99:	xor	r9d, r9d
0x2a9c:	pop	rbx
0x2a9d:	mov	rdx, -1
0x2aa4:	xor	esi, esi
0x2aa6:	jmp	0x6030


0x32bd:	mov	rdi, qword ptr [rip + 0x206e1c]
0x32c4:	mov	rdx, rax
0x32c7:	mov	rcx, rbx
0x32ca:	mov	esi, 1
0x32cf:	xor	eax, eax
0x32d1:	call	0x17e0


0x32d6:	mov	edi, ebp
0x32d8:	call	0x17c0


0x17c0:	jmp	qword ptr [rip + 0x2087da]




0x32eb:	mov	rdx, rbx
0x32ee:	mov	rsi, rax
0x32f1:	mov	edi, 1
0x32f6:	xor	eax, eax
0x32f8:	call	0x1760


0x1760:	jmp	qword ptr [rip + 0x20880a]




0x5c34:	lea	rdx, [rip + 0x19fc]
0x5c3b:	mov	rsi, rax
0x5c3e:	mov	edi, 1
0x5c43:	xor	eax, eax
0x5c45:	call	0x1760


0x5f07:	mov	edi, dword ptr [rip + 0x204113]
0x5f0d:	lea	rdx, [rip + 0xaaa]
0x5f14:	mov	rcx, rax
0x5f17:	xor	esi, esi
0x5f19:	xor	eax, eax
0x5f1b:	call	0x1770


0x1770:	jmp	qword ptr [rip + 0x208802]




0x64b7:	cmp	rax, -3
0x64bb:	mov	rbp, rax
0x64be:	jbe	0x64e0


0x64e0:	mov	rdx, qword ptr [rsp + 8]
0x64e5:	xor	rdx, qword ptr fs:[0x28]
0x64ee:	mov	rax, rbp
0x64f1:	jne	0x64fe


0x64c0:	test	r12, r12
0x64c3:	je	0x64e0


0x64f3:	add	rsp, 0x18
0x64f7:	pop	rbx
0x64f8:	pop	rbp
0x64f9:	pop	r12
0x64fb:	pop	r13
0x64fd:	ret	


0x64fe:	call	0x15d0


0x64c5:	xor	edi, edi
0x64c7:	call	0x6590


0x651c:	mov	ebx, dword ptr [rbp]
0x651f:	mov	rdi, rbp
0x6522:	mov	r12, rax
0x6525:	call	0x6630


0x1872:	lea	rsi, [rip + 0x50dc]
0x1879:	lea	rdi, [rip + 0x50ac]
0x1880:	call	0x1590


0x1590:	jmp	qword ptr [rip + 0x2088f2]




0x659b:	mov	rdx, rax
0x659e:	mov	eax, 1
0x65a3:	test	rdx, rdx
0x65a6:	je	0x65c5


0x65c5:	add	rsp, 8
0x65c9:	ret	


0x65a8:	lea	rdi, [rip + 0x14bc]
0x65af:	mov	ecx, 2
0x65b4:	mov	rsi, rdx
0x65b7:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x65b7:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x65b9:	seta	cl
0x65bc:	sbb	cl, 0
0x65bf:	xor	eax, eax
0x65c1:	test	cl, cl
0x65c3:	jne	0x65d0


0x65d0:	lea	rdi, [rip + 0x1496]
0x65d7:	mov	ecx, 6
0x65dc:	mov	rsi, rdx
0x65df:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x65df:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x65e1:	seta	al
0x65e4:	sbb	al, 0
0x65e6:	test	al, al
0x65e8:	setne	al
0x65eb:	add	rsp, 8
0x65ef:	ret	


0x64cc:	test	al, al
0x64ce:	jne	0x64e0


0x64d0:	movzx	eax, byte ptr [r13]
0x64d5:	mov	ebp, 1
0x64da:	mov	dword ptr [rbx], eax
0x64dc:	nop	dword ptr [rax]
0x64e0:	mov	rdx, qword ptr [rsp + 8]
0x64e5:	xor	rdx, qword ptr fs:[0x28]
0x64ee:	mov	rax, rbp
0x64f1:	jne	0x64fe


0x65fe:	test	rax, rax
0x6601:	je	0x6620


0x6620:	lea	rax, [rip + 0x144c]
0x6627:	add	rsp, 8
0x662b:	ret	


0x6603:	cmp	byte ptr [rax], 0
0x6606:	lea	rdx, [rip + 0x1466]
0x660d:	cmove	rax, rdx
0x6611:	add	rsp, 8
0x6615:	ret	


0x39a0:	movzx	edx, byte ptr [rax]
0x39a3:	and	edx, 0xffffffdf
0x39a6:	cmp	dl, 0x55
0x39a9:	je	0x3a20


0x3a20:	movzx	edx, byte ptr [rax + 1]
0x3a24:	and	edx, 0xffffffdf
0x3a27:	cmp	dl, 0x54
0x3a2a:	jne	0x39b0


0x39ab:	cmp	dl, 0x47
0x39ae:	je	0x39d0


0x3a2c:	movzx	edx, byte ptr [rax + 2]
0x3a30:	and	edx, 0xffffffdf
0x3a33:	cmp	dl, 0x46
0x3a36:	jne	0x39b0


0x39b0:	lea	rax, [rip + 0x3744]
0x39b7:	lea	rdx, [rip + 0x373f]
0x39be:	cmp	ebx, 9
0x39c1:	cmovne	rax, rdx
0x39c5:	add	rsp, 8
0x39c9:	pop	rbx
0x39ca:	pop	rbp
0x39cb:	ret	


0x39d0:	movzx	edx, byte ptr [rax + 1]
0x39d4:	and	edx, 0xffffffdf
0x39d7:	cmp	dl, 0x42
0x39da:	jne	0x39b0


0x3a3c:	cmp	byte ptr [rax + 3], 0x2d
0x3a40:	jne	0x39b0


0x39dc:	cmp	byte ptr [rax + 2], 0x31
0x39e0:	jne	0x39b0


0x3a46:	cmp	byte ptr [rax + 4], 0x38
0x3a4a:	jne	0x39b0


0x39e2:	cmp	byte ptr [rax + 3], 0x38
0x39e6:	jne	0x39b0


0x3a50:	cmp	byte ptr [rax + 5], 0
0x3a54:	jne	0x39b0


0x39e8:	cmp	byte ptr [rax + 4], 0x30
0x39ec:	jne	0x39b0


0x3a5a:	cmp	byte ptr [rbp], 0x60
0x3a5e:	lea	rax, [rip + 0x3687]
0x3a65:	lea	rdx, [rip + 0x3684]
0x3a6c:	cmovne	rax, rdx
0x3a70:	add	rsp, 8
0x3a74:	pop	rbx
0x3a75:	pop	rbp
0x3a76:	ret	


0x39ee:	cmp	byte ptr [rax + 5], 0x33
0x39f2:	jne	0x39b0


0x39f4:	cmp	byte ptr [rax + 6], 0x30
0x39f8:	jne	0x39b0


0x39fa:	cmp	byte ptr [rax + 7], 0
0x39fe:	jne	0x39b0


0x3a00:	cmp	byte ptr [rbp], 0x60
0x3a04:	lea	rax, [rip + 0x36e9]
0x3a0b:	lea	rdx, [rip + 0x36e6]
0x3a12:	cmovne	rax, rdx
0x3a16:	add	rsp, 8
0x3a1a:	pop	rbx
0x3a1b:	pop	rbp
0x3a1c:	ret	


0x6723:	mov	edx, r12d
0x6726:	mov	rsi, rbp
0x6729:	mov	edi, eax
0x672b:	call	0x1620


0x6730:	cmp	rax, -1
0x6734:	je	0x6742


0x6742:	pop	rbx
0x6743:	pop	rbp
0x6744:	pop	r12
0x6746:	ret	


0x6736:	and	dword ptr [rbx], 0xffffffef
0x6739:	mov	qword ptr [rbx + 0x90], rax
0x6740:	xor	eax, eax
0x6742:	pop	rbx
0x6743:	pop	rbp
0x6744:	pop	r12
0x6746:	ret	


0x66e7:	mov	rdi, rbx
0x66ea:	pop	rbx
0x66eb:	jmp	0x16f0


0x663c:	test	eax, eax
0x663e:	mov	rdi, rbx
0x6641:	js	0x6697


0x6697:	pop	rbx
0x6698:	pop	rbp
0x6699:	pop	r12
0x669b:	jmp	0x1580


0x6643:	call	0x1720


0x1580:	jmp	qword ptr [rip + 0x2088fa]




0x6648:	test	eax, eax
0x664a:	jne	0x6678


0x664c:	mov	rdi, rbx
0x664f:	call	0x66b0


0x6678:	mov	rdi, rbx
0x667b:	call	0x16d0


0x6680:	xor	esi, esi
0x6682:	mov	edx, 1
0x6687:	mov	edi, eax
0x6689:	call	0x1620


0x668e:	cmp	rax, -1
0x6692:	jne	0x664c


0x6694:	mov	rdi, rbx
0x6697:	pop	rbx
0x6698:	pop	rbp
0x6699:	pop	r12
0x669b:	jmp	0x1580


0x6654:	test	eax, eax
0x6656:	je	0x6694


0x6658:	call	0x1520


0x665d:	mov	r12d, dword ptr [rax]
0x6660:	mov	rdi, rbx
0x6663:	mov	rbp, rax
0x6666:	call	0x1580


0x666b:	test	r12d, r12d
0x666e:	jne	0x66a0


0x6670:	pop	rbx
0x6671:	pop	rbp
0x6672:	pop	r12
0x6674:	ret	


0x66a0:	mov	dword ptr [rbp], r12d
0x66a4:	mov	eax, 0xffffffff
0x66a9:	jmp	0x6670


0x1885:	lea	rdi, [rip + 0x50a0]
0x188c:	call	0x1570


0x1570:	jmp	qword ptr [rip + 0x208902]




0x652a:	and	ebx, 0x20
0x652d:	test	ebx, ebx
0x652f:	jne	0x6548


0x6531:	test	eax, eax
0x6533:	je	0x653f


0x6548:	test	eax, eax
0x654a:	jne	0x6568


0x653f:	pop	rbx
0x6540:	pop	rbp
0x6541:	pop	r12
0x6543:	ret	


0x6535:	test	r12, r12
0x6538:	mov	eax, 0xffffffff
0x653d:	je	0x6578


0x654c:	call	0x1520


0x6568:	pop	rbx
0x6569:	mov	eax, 0xffffffff
0x656e:	pop	rbp
0x656f:	pop	r12
0x6571:	ret	


0x6578:	call	0x1520


0x657d:	cmp	dword ptr [rax], 9
0x6580:	pop	rbx
0x6581:	pop	rbp
0x6582:	pop	r12
0x6584:	setne	al
0x6587:	movzx	eax, al
0x658a:	neg	eax
0x658c:	ret	


0x6551:	mov	dword ptr [rax], 0
0x6557:	mov	eax, 0xffffffff
0x655c:	pop	rbx
0x655d:	pop	rbp
0x655e:	pop	r12
0x6560:	ret	


0x5f20:	call	0x1510


0x5c4a:	lea	rsi, [rip + 0x19fc]
0x5c51:	mov	edx, 5
0x5c56:	xor	edi, edi
0x5c58:	call	0x15a0


0x5c5d:	lea	rcx, [rip + 0x1324]
0x5c64:	lea	rdx, [rip + 0xcbd]
0x5c6b:	mov	rsi, rax
0x5c6e:	mov	edi, 1
0x5c73:	xor	eax, eax
0x5c75:	call	0x1760


0x5c7a:	mov	rbx, qword ptr [rip + 0x204427]
0x5c81:	lea	rsi, [rip + 0x1bf8]
0x5c88:	xor	edi, edi
0x5c8a:	mov	edx, 5
0x5c8f:	call	0x15a0


0x5c94:	mov	rsi, rbx
0x5c97:	mov	rdi, rax
0x5c9a:	pop	rbx
0x5c9b:	jmp	0x16a0


0x32fd:	lea	rsi, [rip + 0x37dc]
0x3304:	xor	edi, edi
0x3306:	mov	edx, 5
0x330b:	call	0x15a0


0x3310:	mov	edx, 0xa
0x3315:	mov	rsi, rax
0x3318:	mov	edi, 1
0x331d:	xor	eax, eax
0x331f:	call	0x1760


0x3324:	mov	rbx, qword ptr [rip + 0x206d7d]
0x332b:	lea	rsi, [rip + 0x3836]
0x3332:	mov	edx, 5
0x3337:	xor	edi, edi
0x3339:	call	0x15a0


0x333e:	mov	rsi, rbx
0x3341:	mov	rdi, rax
0x3344:	call	0x16a0


0x3349:	mov	rbx, qword ptr [rip + 0x206d58]
0x3350:	lea	rsi, [rip + 0x3849]
0x3357:	mov	edx, 5
0x335c:	xor	edi, edi
0x335e:	call	0x15a0


0x3363:	mov	rsi, rbx
0x3366:	mov	rdi, rax
0x3369:	call	0x16a0


0x336e:	lea	rsi, [rip + 0x387b]
0x3375:	xor	edi, edi
0x3377:	mov	edx, 5
0x337c:	call	0x15a0


0x3381:	mov	edx, 0xa
0x3386:	mov	rsi, rax
0x3389:	mov	edi, 1
0x338e:	xor	eax, eax
0x3390:	call	0x1760


0x3395:	mov	rbx, qword ptr [rip + 0x206d0c]
0x339c:	lea	rsi, [rip + 0x39dd]
0x33a3:	mov	edx, 5
0x33a8:	xor	edi, edi
0x33aa:	call	0x15a0


0x33af:	mov	rsi, rbx
0x33b2:	mov	rdi, rax
0x33b5:	call	0x16a0


0x33ba:	mov	rbx, qword ptr [rip + 0x206ce7]
0x33c1:	lea	rsi, [rip + 0x3a40]
0x33c8:	mov	edx, 5
0x33cd:	xor	edi, edi
0x33cf:	call	0x15a0


0x33d4:	mov	rsi, rbx
0x33d7:	mov	rdi, rax
0x33da:	call	0x16a0


0x33df:	mov	rbx, qword ptr [rip + 0x206cc2]
0x33e6:	lea	rsi, [rip + 0x3a5b]
0x33ed:	mov	edx, 5
0x33f2:	xor	edi, edi
0x33f4:	call	0x15a0


0x33f9:	mov	rsi, rbx
0x33fc:	mov	rdi, rax
0x33ff:	call	0x16a0


0x3404:	mov	rbx, qword ptr [rip + 0x206c9d]
0x340b:	lea	rsi, [rip + 0x3a66]
0x3412:	mov	edx, 5
0x3417:	xor	edi, edi
0x3419:	call	0x15a0


0x341e:	mov	rsi, rbx
0x3421:	mov	rdi, rax
0x3424:	call	0x16a0


0x3429:	mov	rbx, qword ptr [rip + 0x206c78]
0x3430:	lea	rsi, [rip + 0x3a79]
0x3437:	mov	edx, 5
0x343c:	xor	edi, edi
0x343e:	call	0x15a0


0x3443:	mov	rsi, rbx
0x3446:	mov	rdi, rax
0x3449:	lea	rbx, [rip + 0x345d]
0x3450:	call	0x16a0


0x3455:	lea	rax, [rip + 0x3456]
0x345c:	lea	rcx, [rip + 0x3490]
0x3463:	mov	qword ptr [rsp + 0x60], 0
0x346c:	mov	qword ptr [rsp + 0x68], 0
0x3475:	mov	rdx, rsp
0x3478:	mov	qword ptr [rsp], rax
0x347c:	lea	rax, [rip + 0x3431]
0x3483:	mov	qword ptr [rsp + 0x30], rcx
0x3488:	lea	rcx, [rip + 0x346e]
0x348f:	mov	qword ptr [rsp + 8], rax
0x3494:	lea	rax, [rip + 0x3491]
0x349b:	mov	qword ptr [rsp + 0x40], rcx
0x34a0:	lea	rcx, [rip + 0x3460]
0x34a7:	mov	qword ptr [rsp + 0x10], rax
0x34ac:	lea	rax, [rip + 0x3411]
0x34b3:	mov	qword ptr [rsp + 0x50], rcx
0x34b8:	mov	qword ptr [rsp + 0x18], rax
0x34bd:	lea	rax, [rip + 0x3416]
0x34c4:	mov	qword ptr [rsp + 0x20], rax
0x34c9:	lea	rax, [rip + 0x3414]
0x34d0:	mov	qword ptr [rsp + 0x28], rax
0x34d5:	mov	qword ptr [rsp + 0x38], rax
0x34da:	mov	qword ptr [rsp + 0x48], rax
0x34df:	mov	qword ptr [rsp + 0x58], rax
0x34e4:	nop	dword ptr [rax]
0x34e8:	add	rdx, 0x10
0x34ec:	mov	rdi, qword ptr [rdx]
0x34ef:	test	rdi, rdi
0x34f2:	je	0x3507


0x3507:	mov	r12, qword ptr [rdx + 8]
0x350b:	xor	edi, edi
0x350d:	mov	edx, 5
0x3512:	lea	rsi, [rip + 0x33f8]
0x3519:	test	r12, r12
0x351c:	je	0x35e3


0x34f4:	mov	ecx, 5
0x34f9:	mov	rsi, rbx
0x34fc:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x35e3:	call	0x15a0


0x3522:	call	0x15a0


0x34fc:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x34fe:	seta	al
0x3501:	sbb	al, 0
0x3503:	test	al, al
0x3505:	jne	0x34e8


0x34e8:	add	rdx, 0x10
0x34ec:	mov	rdi, qword ptr [rdx]
0x34ef:	test	rdi, rdi
0x34f2:	je	0x3507


0x3527:	lea	rcx, [rip + 0x3a5a]
0x352e:	lea	rdx, [rip + 0x33f3]
0x3535:	mov	rsi, rax
0x3538:	mov	edi, 1
0x353d:	xor	eax, eax
0x353f:	call	0x1760


0x3544:	xor	esi, esi
0x3546:	mov	edi, 5
0x354b:	call	0x1750


0x3550:	test	rax, rax
0x3553:	je	0x3571


0x3571:	lea	rsi, [rip + 0x33c2]
0x3578:	xor	edi, edi
0x357a:	mov	edx, 5
0x357f:	call	0x15a0


0x3555:	lea	rsi, [rip + 0x33da]
0x355c:	mov	edx, 3
0x3561:	mov	rdi, rax
0x3564:	call	0x1530


0x1530:	jmp	qword ptr [rip + 0x208922]




0x3584:	lea	rcx, [rip + 0x3322]
0x358b:	lea	rdx, [rip + 0x39f6]
0x3592:	mov	rsi, rax
0x3595:	mov	edi, 1
0x359a:	xor	eax, eax
0x359c:	call	0x1760


0x35a1:	cmp	r12, rbx
0x35a4:	lea	rcx, [rip + 0x3323]
0x35ab:	lea	rbx, [rip + 0x406f]
0x35b2:	cmove	rbx, rcx
0x35b6:	lea	rsi, [rip + 0x3a3b]
0x35bd:	xor	edi, edi
0x35bf:	mov	edx, 5
0x35c4:	call	0x15a0


0x35c9:	mov	rcx, rbx
0x35cc:	mov	rsi, rax
0x35cf:	mov	rdx, r12
0x35d2:	mov	edi, 1
0x35d7:	xor	eax, eax
0x35d9:	call	0x1760


0x35de:	jmp	0x32d6


0x35e8:	lea	rcx, [rip + 0x3999]
0x35ef:	lea	rdx, [rip + 0x3332]
0x35f6:	mov	rsi, rax
0x35f9:	mov	edi, 1
0x35fe:	xor	eax, eax
0x3600:	call	0x1760


0x3605:	xor	esi, esi
0x3607:	mov	edi, 5
0x360c:	call	0x1750


0x3611:	test	rax, rax
0x3614:	je	0x362e


0x362e:	lea	rsi, [rip + 0x3305]
0x3635:	mov	edx, 5
0x363a:	xor	edi, edi
0x363c:	lea	r12, [rip + 0x326a]
0x3643:	lea	rbx, [rip + 0x3284]
0x364a:	call	0x15a0


0x3616:	lea	rsi, [rip + 0x3319]
0x361d:	mov	edx, 3
0x3622:	mov	rdi, rax
0x3625:	call	0x1530


0x364f:	lea	rcx, [rip + 0x3257]
0x3656:	lea	rdx, [rip + 0x392b]
0x365d:	mov	rsi, rax
0x3660:	mov	edi, 1
0x3665:	xor	eax, eax
0x3667:	call	0x1760


0x366c:	jmp	0x35b6


0x35b6:	lea	rsi, [rip + 0x3a3b]
0x35bd:	xor	edi, edi
0x35bf:	mov	edx, 5
0x35c4:	call	0x15a0


0x570c:	cmp	r12, 9
0x5710:	ja	0x5a50


0x5716:	lea	rdx, [rip + 0x21a7]
0x571d:	movsxd	rax, dword ptr [rdx + r12*4]
0x5721:	add	rax, rdx
0x5724:	jmp	rax


0x5a50:	mov	r10, qword ptr [rbx + 0x40]
0x5a54:	mov	r9, qword ptr [rbx + 0x38]
0x5a58:	mov	edx, 5
0x5a5d:	mov	rax, qword ptr [rbx + 0x10]
0x5a61:	mov	r8, qword ptr [rbx + 8]
0x5a65:	lea	rsi, [rip + 0x1dd4]
0x5a6c:	mov	r13, qword ptr [rbx + 0x30]
0x5a70:	mov	r12, qword ptr [rbx + 0x28]
0x5a74:	mov	r15, qword ptr [rbx + 0x20]
0x5a78:	mov	r14, qword ptr [rbx + 0x18]
0x5a7c:	mov	qword ptr [rsp + 0x18], r10
0x5a81:	mov	qword ptr [rsp + 0x10], r9
0x5a86:	mov	qword ptr [rsp], rax
0x5a8a:	mov	qword ptr [rsp + 8], r8
0x5a8f:	mov	rbx, qword ptr [rbx]
0x5a92:	jmp	0x5822


0x5822:	xor	edi, edi
0x5824:	call	0x15a0


0x5829:	mov	r10, qword ptr [rsp + 0x18]
0x582e:	push	r10
0x5830:	jmp	0x5774


0x5774:	mov	r9, qword ptr [rsp + 0x18]
0x5779:	mov	rdx, rax
0x577c:	mov	rcx, rbx
0x577f:	mov	esi, 1
0x5784:	mov	rdi, rbp
0x5787:	xor	eax, eax
0x5789:	push	r9
0x578b:	push	r13
0x578d:	push	r12
0x578f:	push	r15
0x5791:	push	r14
0x5793:	mov	r9, qword ptr [rsp + 0x30]
0x5798:	mov	r8, qword ptr [rsp + 0x38]
0x579d:	call	0x17e0


0x57a2:	add	rsp, 0x30
0x57a6:	add	rsp, 0x28
0x57aa:	pop	rbx
0x57ab:	pop	rbp
0x57ac:	pop	r12
0x57ae:	pop	r13
0x57b0:	pop	r14
0x57b2:	pop	r15
0x57b4:	ret	


0x2e32:	test	eax, eax
0x2e34:	jne	0x2e4a


0x2e36:	mov	eax, dword ptr [rsp + 0x18]
0x2e3a:	and	eax, 0xf000
0x2e3f:	cmp	eax, 0x8000
0x2e44:	jne	0x2d8c


0x2e4a:	mov	rcx, r13
0x2e4d:	mov	edx, 1
0x2e52:	mov	rsi, r14
0x2e55:	mov	edi, r12d
0x2e58:	call	0x2ad0


0x2e5d:	jmp	0x2d8c


0x30ec:	test	rax, rax
0x30ef:	je	0x3168


0x30f1:	sub	rax, rbp
0x30f4:	test	r15, r15
0x30f7:	mov	r8, rax
0x30fa:	lea	rax, [r15 - 1]
0x30fe:	jne	0x30cd


0x4e9d:	mov	dword ptr [rbp], r12d
0x4ea1:	pop	rbx
0x4ea2:	pop	rbp
0x4ea3:	pop	r12
0x4ea5:	ret	


0x4d5e:	mov	dword ptr [rip + 0x205313], r12d
0x4d65:	mov	eax, dword ptr [rbp + 4]
0x4d68:	shl	r15, 4
0x4d6c:	sub	rsp, 8
0x4d70:	add	rbx, r15
0x4d73:	lea	r15, [rbp + 8]
0x4d77:	mov	r8d, dword ptr [rbp]
0x4d7b:	mov	r11, qword ptr [rbx]
0x4d7e:	mov	r12, qword ptr [rbx + 8]
0x4d82:	mov	rcx, r14
0x4d85:	or	eax, 1
0x4d88:	mov	dword ptr [rsp + 0x24], eax
0x4d8c:	push	qword ptr [rbp + 0x30]
0x4d8f:	mov	r9d, eax
0x4d92:	push	qword ptr [rbp + 0x28]
0x4d95:	push	r15
0x4d97:	mov	rsi, r11
0x4d9a:	mov	rdx, qword ptr [rsp + 0x28]
0x4d9f:	mov	rdi, r12
0x4da2:	mov	qword ptr [rsp + 0x30], r11
0x4da7:	call	0x3a80


0x60ba:	mov	edx, dword ptr [rsp + 8]
0x60be:	mov	rsi, qword ptr [rax]
0x60c1:	mov	rax, rbp
0x60c4:	jmp	0x60d7


0x60d7:	movzx	ecx, bl
0x60da:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x60df:	jne	0x60d0


0x60e1:	cmp	bl, 0x2d
0x60e4:	je	0x6138


0x60d0:	add	rax, 1
0x60d4:	movzx	ebx, byte ptr [rax]
0x60d7:	movzx	ecx, bl
0x60da:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x60df:	jne	0x60d0


0x6138:	mov	ebp, 4
0x613d:	mov	rdi, qword ptr [rsp + 0x18]
0x6142:	xor	rdi, qword ptr fs:[0x28]
0x614b:	mov	eax, ebp
0x614d:	jne	0x63e0


0x60e6:	xor	ecx, ecx
0x60e8:	mov	rsi, r15
0x60eb:	mov	rdi, rbp
0x60ee:	call	0x1640


0x6153:	add	rsp, 0x28
0x6157:	pop	rbx
0x6158:	pop	rbp
0x6159:	pop	r12
0x615b:	pop	r13
0x615d:	pop	r14
0x615f:	pop	r15
0x6161:	ret	


0x63e0:	call	0x15d0


0x1640:	jmp	qword ptr [rip + 0x20889a]




0x2bc5:	lea	rsi, [rip + 0x3c92]
0x2bcc:	mov	edi, 4
0x2bd1:	call	0x5330


0x5be6:	mov	rax, qword ptr [rsp + 0x78]
0x5beb:	xor	rax, qword ptr fs:[0x28]
0x5bf4:	jne	0x5c00


0x5bf6:	add	rsp, 0xb8
0x5bfd:	pop	rbx
0x5bfe:	pop	rbp
0x5bff:	ret	


0x5c00:	call	0x15d0


0x5b10:	mov	rax, qword ptr [rsp + 0x58]
0x5b15:	xor	rax, qword ptr fs:[0x28]
0x5b1e:	jne	0x5b25


0x5b20:	add	rsp, 0x68
0x5b24:	ret	


0x5b25:	call	0x15d0


0x36e2:	test	eax, eax
0x36e4:	je	0x36fc


0x36fc:	mov	rdi, qword ptr [rip + 0x2069dd]
0x3703:	call	0x6510


0x36e6:	call	0x1520


0x36eb:	cmp	byte ptr [rip + 0x2069fe], 0
0x36f2:	mov	rbx, rax
0x36f5:	je	0x3713


0x3713:	lea	rsi, [rip + 0x397b]
0x371a:	xor	edi, edi
0x371c:	mov	edx, 5
0x3721:	call	0x15a0


0x36f7:	cmp	dword ptr [rax], 0x20
0x36fa:	jne	0x3713


0x3726:	mov	rdi, qword ptr [rip + 0x2069cb]
0x372d:	mov	rbp, rax
0x3730:	test	rdi, rdi
0x3733:	je	0x375d


0x375d:	mov	esi, dword ptr [rbx]
0x375f:	lea	rdx, [rip + 0x3258]
0x3766:	mov	rcx, rax
0x3769:	xor	edi, edi
0x376b:	xor	eax, eax
0x376d:	call	0x1770


0x3735:	call	0x5400


0x3772:	jmp	0x3752


0x3752:	mov	edi, dword ptr [rip + 0x2068c8]
0x3758:	call	0x1540


0x1540:	jmp	qword ptr [rip + 0x20891a]




0x3708:	test	eax, eax
0x370a:	jne	0x3752


0x370c:	add	rsp, 8
0x3710:	pop	rbx
0x3711:	pop	rbp
0x3712:	ret	


0x5f6a:	test	eax, eax
0x5f6c:	jne	0x6000


0x5f72:	mov	rbp, qword ptr [rsp]
0x5f76:	cmp	rbp, r14
0x5f79:	jb	0x5f80


0x6000:	mov	ebp, eax
0x6002:	call	0x1520


0x5f80:	call	0x1520


0x5f7b:	cmp	rbp, r15
0x5f7e:	jbe	0x5fd4


0x5fd4:	mov	rdx, qword ptr [rsp + 8]
0x5fd9:	xor	rdx, qword ptr fs:[0x28]
0x5fe2:	mov	rax, rbp
0x5fe5:	jne	0x602b


0x5fe7:	add	rsp, 0x18
0x5feb:	pop	rbx
0x5fec:	pop	rbp
0x5fed:	pop	r12
0x5fef:	pop	r13
0x5ff1:	pop	r14
0x5ff3:	pop	r15
0x5ff5:	ret	


0x602b:	call	0x15d0


0x5f85:	cmp	rbp, 0x40000000
0x5f8c:	mov	r14, rax
0x5f8f:	sbb	eax, eax
0x5f91:	and	eax, 0xffffffd7
0x5f94:	add	eax, 0x4b
0x5f97:	mov	dword ptr [r14], eax
0x5f9a:	mov	rdi, r12
0x5f9d:	call	0x5600


0x6007:	cmp	ebp, 1
0x600a:	mov	r14, rax
0x600d:	je	0x6020


0x6020:	mov	dword ptr [rax], 0x4b
0x6026:	jmp	0x5f9a


0x600f:	cmp	ebp, 3
0x6012:	jne	0x5f9a


0x5f9a:	mov	rdi, r12
0x5f9d:	call	0x5600


0x6014:	mov	dword ptr [rax], 0
0x601a:	jmp	0x5f9a


0x604c:	add	rsp, 0x18
0x6050:	ret	


0x60f3:	mov	rcx, qword ptr [r15]
0x60f6:	mov	rbx, rax
0x60f9:	cmp	rcx, rbp
0x60fc:	je	0x6128


0x6128:	test	r13, r13
0x612b:	mov	qword ptr [rsp + 8], rcx
0x6130:	jne	0x6170


0x60fe:	mov	eax, dword ptr [r12]
0x6102:	test	eax, eax
0x6104:	je	0x6168


0x6170:	movzx	r12d, byte ptr [rbp]
0x6175:	test	r12b, r12b
0x6178:	je	0x6138


0x6168:	xor	ebp, ebp
0x616a:	jmp	0x6110


0x6106:	cmp	eax, 0x22
0x6109:	mov	ebp, 1
0x610e:	jne	0x6138


0x617a:	movsx	esi, r12b
0x617e:	mov	rdi, r13
0x6181:	xor	ebp, ebp
0x6183:	call	0x1600


0x6110:	test	r13, r13
0x6113:	je	0x611e


0x1600:	jmp	qword ptr [rip + 0x2088ba]


0x611e:	mov	qword ptr [r14], rbx
0x6121:	jmp	0x613d


0x6115:	movzx	r12d, byte ptr [rcx]
0x6119:	test	r12b, r12b
0x611c:	jne	0x6197




0x613d:	mov	rdi, qword ptr [rsp + 0x18]
0x6142:	xor	rdi, qword ptr fs:[0x28]
0x614b:	mov	eax, ebp
0x614d:	jne	0x63e0


0x6197:	movsx	esi, r12b
0x619b:	mov	rdi, r13
0x619e:	mov	qword ptr [rsp + 8], rcx
0x61a3:	call	0x1600


0x362a:	test	eax, eax
0x362c:	jne	0x3671


0x3671:	lea	r12, [rip + 0x3235]
0x3678:	mov	r13, qword ptr [rip + 0x206a29]
0x367f:	lea	rsi, [rip + 0x392a]
0x3686:	xor	edi, edi
0x3688:	mov	edx, 5
0x368d:	call	0x15a0


0x3692:	mov	rsi, r13
0x3695:	mov	rdi, rax
0x3698:	call	0x16a0


0x369d:	jmp	0x3571


0x3569:	test	eax, eax
0x356b:	jne	0x3678


0x3678:	mov	r13, qword ptr [rip + 0x206a29]
0x367f:	lea	rsi, [rip + 0x392a]
0x3686:	xor	edi, edi
0x3688:	mov	edx, 5
0x368d:	call	0x15a0


0x1891:	lea	rdi, [rip + 0x1e38]
0x1898:	call	0x67d0


0x189d:	cmp	ebp, 1
0x18a0:	mov	byte ptr [rip + 0x208842], 0
0x18a7:	mov	byte ptr [rip + 0x20883d], 0
0x18ae:	mov	byte ptr [rip + 0x208835], 0xa
0x18b5:	jle	0x18c4


0x18c4:	mov	byte ptr [rsp + 0x8a], 1
0x18cc:	mov	r15d, 0xa
0x18d2:	xor	r12d, r12d
0x18d5:	mov	byte ptr [rsp + 0x89], 0
0x18dd:	mov	r13d, 1
0x18e3:	nop	dword ptr [rax + rax]
0x18e8:	lea	rcx, [rip + 0x2081b1]
0x18ef:	lea	rdx, [rip + 0x50b2]
0x18f6:	xor	r8d, r8d
0x18f9:	mov	rsi, rbx
0x18fc:	mov	edi, ebp
0x18fe:	call	0x15e0


0x18b7:	mov	rsi, qword ptr [rbx + 8]
0x18bb:	cmp	byte ptr [rsi], 0x2d
0x18be:	je	0x1a73


0x15e0:	jmp	qword ptr [rip + 0x2088ca]


0x1a73:	movsx	eax, byte ptr [rsi + 1]
0x1a77:	sub	eax, 0x30
0x1a7a:	cmp	eax, 9
0x1a7d:	ja	0x18c4




0x1a83:	add	rsi, 1
0x1a87:	mov	rdi, rsi
0x1a8a:	nop	word ptr [rax + rax]
0x1a90:	add	rdi, 1
0x1a94:	movsx	eax, byte ptr [rdi]
0x1a97:	mov	r13d, eax
0x1a9a:	sub	eax, 0x30
0x1a9d:	cmp	eax, 9
0x1aa0:	jbe	0x1a90


0x1a90:	add	rdi, 1
0x1a94:	movsx	eax, byte ptr [rdi]
0x1a97:	mov	r13d, eax
0x1a9a:	sub	eax, 0x30
0x1a9d:	cmp	eax, 9
0x1aa0:	jbe	0x1a90


0x1aa2:	test	r13b, r13b
0x1aa5:	je	0x27f4


0x27f4:	xor	r12d, r12d
0x27f7:	mov	byte ptr [rsp + 0x8a], 1
0x27ff:	jmp	0x1d36


0x1aab:	lea	rcx, [rip + 0x557a]
0x1ab2:	mov	rdx, rdi
0x1ab5:	xor	r9d, r9d
0x1ab8:	mov	r10d, 0xa
0x1abe:	xor	r8d, r8d
0x1ac1:	mov	r11d, 1
0x1ac7:	xor	r12d, r12d
0x1aca:	nop	word ptr [rax + rax]
0x1ad0:	lea	eax, [r13 - 0x62]
0x1ad4:	cmp	al, 0x18
0x1ad6:	ja	0x2854


0x1d36:	movzx	edi, byte ptr [rsp + 0x8a]
0x1d3e:	add	rbx, 8
0x1d42:	sub	ebp, 1
0x1d45:	call	0x2a70


0x1adc:	movzx	eax, al
0x1adf:	movsxd	rax, dword ptr [rcx + rax*4]
0x1ae3:	add	rax, rcx
0x1ae6:	jmp	rax


0x2854:	test	r9b, r9b
0x2857:	jne	0x294c


0x285d:	lea	rsi, [rip + 0x4109]
0x2864:	mov	edx, 5
0x2869:	xor	edi, edi
0x286b:	call	0x15a0


0x294c:	mov	byte ptr [rip + 0x207797], r10b
0x2953:	jmp	0x285d


0x2870:	movsx	ecx, r13b
0x2874:	jmp	0x2841


0x2841:	mov	rdx, rax
0x2844:	xor	esi, esi
0x2846:	xor	edi, edi
0x2848:	xor	eax, eax
0x284a:	call	0x1770


0x284f:	jmp	0x196f


0x196f:	mov	edi, 1
0x1974:	call	0x3280


0x1d4a:	mov	r15, rax
0x1d4d:	mov	rax, qword ptr [rbx - 8]
0x1d51:	mov	qword ptr [rbx], rax
0x1d54:	jmp	0x18d5


0x18d5:	mov	byte ptr [rsp + 0x89], 0
0x18dd:	mov	r13d, 1
0x18e3:	nop	dword ptr [rax + rax]
0x18e8:	lea	rcx, [rip + 0x2081b1]
0x18ef:	lea	rdx, [rip + 0x50b2]
0x18f6:	xor	r8d, r8d
0x18f9:	mov	rsi, rbx
0x18fc:	mov	edi, ebp
0x18fe:	call	0x15e0


0x1903:	cmp	eax, -1
0x1906:	je	0x1ae8


0x1ae8:	cmp	r12d, 1
0x1aec:	je	0x1afe


0x190c:	cmp	eax, 0x6e
0x190f:	je	0x1a00


0x1afe:	mov	byte ptr [rip + 0x2085e6], 1
0x1b05:	cmp	byte ptr [rsp + 0x8a], 0
0x1b0d:	jne	0x1b22


0x1aee:	test	r12d, r12d
0x1af1:	jne	0x1b05


0x1a00:	mov	rsi, qword ptr [rip + 0x2086b1]
0x1a07:	movzx	eax, byte ptr [rsi]
0x1a0a:	cmp	al, 0x2d
0x1a0c:	sete	byte ptr [rsp + 0x89]
0x1a14:	jne	0x1a21


0x1915:	jle	0x1948


0x1b0f:	cmp	byte ptr [rsp + 0x89], 0
0x1b17:	je	0x1b22


0x1b22:	movsxd	rax, dword ptr [rip + 0x208587]
0x1b29:	cmp	eax, ebp
0x1b2b:	jge	0x201c


0x1af3:	lea	eax, [rbp - 1]
0x1af6:	cmp	eax, dword ptr [rip + 0x2085b4]
0x1afc:	jle	0x1b05


0x1b05:	cmp	byte ptr [rsp + 0x8a], 0
0x1b0d:	jne	0x1b22


0x1a16:	add	rsi, 1
0x1a1a:	mov	qword ptr [rip + 0x208697], rsi
0x1a21:	mov	edi, 1
0x1a26:	call	0x2a70


0x1a21:	mov	edi, 1
0x1a26:	call	0x2a70


0x1948:	cmp	eax, 0xffffff7e
0x194d:	je	0x2817


0x1917:	cmp	eax, 0x76
0x191a:	je	0x1a68


0x1b19:	test	r15, r15
0x1b1c:	js	0x2876


0x1b31:	lea	rdx, [rbx + rax*8]
0x1b35:	mov	rbp, qword ptr [rdx]
0x1b38:	test	rbp, rbp
0x1b3b:	je	0x1f43


0x201c:	lea	rax, [rip + 0x50c7]
0x2023:	lea	rdx, [rip + 0x207a56]
0x202a:	mov	qword ptr [rsp + 0x20], rax
0x202f:	mov	rbp, rax
0x2032:	jmp	0x1b4d


0x2817:	xor	edi, edi
0x2819:	call	0x3280


0x1953:	cmp	eax, 0x63
0x1956:	je	0x19c0


0x1a68:	mov	r12d, 1
0x1a6e:	jmp	0x18e8


0x1920:	jle	0x1a50


0x2876:	lea	rsi, [rsp + 0x130]
0x287e:	mov	rdi, r15
0x2881:	call	0x38a0


0x1f43:	mov	byte ptr [rsp + 0x8b], 1
0x1f4b:	cmp	byte ptr [rip + 0x208197], 0
0x1f52:	jne	0x228d


0x1b41:	lea	rax, [rip + 0x55a2]
0x1b48:	mov	qword ptr [rsp + 0x20], rax
0x1b4d:	mov	rcx, r15
0x1b50:	mov	eax, 0x2000
0x1b55:	mov	qword ptr [rsp + 0x18], r15
0x1b5a:	and	ecx, 0x1fff
0x1b60:	mov	byte ptr [rsp + 0x8b], 1
0x1b68:	sub	rax, rcx
0x1b6b:	mov	qword ptr [rsp + 0x78], rcx
0x1b70:	mov	qword ptr [rsp + 0x60], rax
0x1b75:	add	rax, r15
0x1b78:	shr	rax, 0xd
0x1b7c:	add	rax, 1
0x1b80:	mov	qword ptr [rsp + 0x28], rax
0x1b85:	shr	rax, 1
0x1b88:	mov	qword ptr [rsp + 0x58], rax
0x1b8d:	lea	rax, [r15 + 0x2000]
0x1b94:	mov	r15, rbp
0x1b97:	mov	qword ptr [rsp + 0x68], rax
0x1b9c:	add	rax, rax
0x1b9f:	mov	qword ptr [rsp + 0x70], rax
0x1ba4:	lea	rax, [rdx + 8]
0x1ba8:	mov	qword ptr [rsp + 0x10], rax
0x1bad:	lea	rax, [rsp + 0xa0]
0x1bb5:	mov	qword ptr [rsp + 0x50], rax
0x1bba:	jmp	0x1c7c


0x1b4d:	mov	rcx, r15
0x1b50:	mov	eax, 0x2000
0x1b55:	mov	qword ptr [rsp + 0x18], r15
0x1b5a:	and	ecx, 0x1fff
0x1b60:	mov	byte ptr [rsp + 0x8b], 1
0x1b68:	sub	rax, rcx
0x1b6b:	mov	qword ptr [rsp + 0x78], rcx
0x1b70:	mov	qword ptr [rsp + 0x60], rax
0x1b75:	add	rax, r15
0x1b78:	shr	rax, 0xd
0x1b7c:	add	rax, 1
0x1b80:	mov	qword ptr [rsp + 0x28], rax
0x1b85:	shr	rax, 1
0x1b88:	mov	qword ptr [rsp + 0x58], rax
0x1b8d:	lea	rax, [r15 + 0x2000]
0x1b94:	mov	r15, rbp
0x1b97:	mov	qword ptr [rsp + 0x68], rax
0x1b9c:	add	rax, rax
0x1b9f:	mov	qword ptr [rsp + 0x70], rax
0x1ba4:	lea	rax, [rdx + 8]
0x1ba8:	mov	qword ptr [rsp + 0x10], rax
0x1bad:	lea	rax, [rsp + 0xa0]
0x1bb5:	mov	qword ptr [rsp + 0x50], rax
0x1bba:	jmp	0x1c7c


0x19c0:	mov	rsi, qword ptr [rip + 0x2086f1]
0x19c7:	movzx	eax, byte ptr [rsi]
0x19ca:	cmp	al, 0x2d
0x19cc:	sete	byte ptr [rsp + 0x89]
0x19d4:	jne	0x19e1


0x1958:	cmp	eax, 0xffffff7d
0x195d:	mov	r14d, eax
0x1960:	je	0x1980


0x18e8:	lea	rcx, [rip + 0x2081b1]
0x18ef:	lea	rdx, [rip + 0x50b2]
0x18f6:	xor	r8d, r8d
0x18f9:	mov	rsi, rbx
0x18fc:	mov	edi, ebp
0x18fe:	call	0x15e0


0x1a50:	cmp	eax, 0x71
0x1a53:	jne	0x281e


0x1926:	cmp	eax, 0x7a
0x1929:	je	0x1a40


0x1f58:	movzx	eax, byte ptr [rsp + 0x8b]
0x1f60:	xor	eax, 1
0x1f63:	mov	rcx, qword ptr [rsp + 0x148]
0x1f6b:	xor	rcx, qword ptr fs:[0x28]
0x1f74:	movzx	eax, al
0x1f77:	jne	0x2826


0x228d:	xor	edi, edi
0x228f:	call	0x1660


0x1c7c:	mov	rdi, qword ptr [rsp + 0x20]
0x1c81:	mov	ecx, 2
0x1c86:	mov	rsi, r15
0x1c89:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x19d6:	add	rsi, 1
0x19da:	mov	qword ptr [rip + 0x2086d7], rsi
0x19e1:	xor	edi, edi
0x19e3:	call	0x2a70


0x19e1:	xor	edi, edi
0x19e3:	call	0x2a70


0x1980:	sub	rsp, 8
0x1984:	mov	rdi, qword ptr [rip + 0x20871d]
0x198b:	mov	rcx, qword ptr [rip + 0x208686]
0x1992:	push	0
0x1994:	lea	r9, [rip + 0x4ff0]
0x199b:	lea	r8, [rip + 0x4ff6]
0x19a2:	lea	rdx, [rip + 0x4f7f]
0x19a9:	lea	rsi, [rip + 0x4efd]
0x19b0:	xor	eax, eax
0x19b2:	call	0x5b40


0x1962:	lea	eax, [r14 - 0x30]
0x1966:	cmp	eax, 9
0x1969:	jbe	0x282b


0x1a59:	mov	r12d, 2
0x1a5f:	jmp	0x18e8


0x281e:	mov	r14d, eax
0x2821:	jmp	0x1962


0x1a40:	mov	byte ptr [rip + 0x2086a3], 0
0x1a47:	jmp	0x18e8


0x192f:	cmp	eax, 0x80
0x1934:	jne	0x281e


0x1f7d:	add	rsp, 0x158
0x1f84:	pop	rbx
0x1f85:	pop	rbp
0x1f86:	pop	r12
0x1f88:	pop	r13
0x1f8a:	pop	r14
0x1f8c:	pop	r15
0x1f8e:	ret	


0x2826:	call	0x15d0


0x1660:	jmp	qword ptr [rip + 0x20888a]


0x1c89:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1c8b:	seta	al
0x1c8e:	sbb	al, 0
0x1c90:	movsx	r13d, al
0x1c94:	test	r13d, r13d
0x1c97:	je	0x1bbf


0x282b:	lea	rsi, [rip + 0x413b]
0x2832:	mov	edx, 5
0x2837:	xor	edi, edi
0x2839:	call	0x15a0


0x193a:	mov	byte ptr [rip + 0x2087ab], r13b
0x1941:	jmp	0x18e8




0x1bbf:	lea	rsi, [rip + 0x4dfb]
0x1bc6:	mov	edx, 5
0x1bcb:	xor	edi, edi
0x1bcd:	mov	byte ptr [rip + 0x208515], 1
0x1bd4:	call	0x15a0


0x1c9d:	xor	esi, esi
0x1c9f:	xor	eax, eax
0x1ca1:	mov	rdi, r15
0x1ca4:	call	0x1790


0x1790:	jmp	qword ptr [rip + 0x2087f2]




0x1bd9:	mov	dword ptr [rsp + 0xc], 0
0x1be1:	mov	r15, rax
0x1be4:	cmp	byte ptr [rip + 0x208500], 0
0x1beb:	je	0x1c23


0x1c23:	cmp	byte ptr [rsp + 0x89], 0
0x1c2b:	jne	0x1db3


0x1bed:	cmp	byte ptr [rip + 0x20841c], 0
0x1bf4:	lea	rax, [rip + 0x5a25]
0x1bfb:	lea	rdx, [rip + 0x5a1f]
0x1c02:	lea	rsi, [rip + 0x4de2]
0x1c09:	mov	rcx, r15
0x1c0c:	mov	edi, 1
0x1c11:	cmove	rdx, rax
0x1c15:	xor	eax, eax
0x1c17:	call	0x1760


0x1c31:	cmp	byte ptr [rsp + 0x8a], 0
0x1c39:	mov	rdx, qword ptr [rsp + 0x18]
0x1c3e:	mov	rdi, r15
0x1c41:	mov	esi, dword ptr [rsp + 0xc]
0x1c45:	jne	0x1eff


0x1db3:	mov	rdx, qword ptr [rsp + 0x50]
0x1db8:	mov	esi, dword ptr [rsp + 0xc]
0x1dbc:	mov	edi, 1
0x1dc1:	call	0x1710


0x1c4b:	call	0x2e70


0x1eff:	call	0x2ce0


0x1f04:	mov	r12d, eax
0x1f07:	jmp	0x1c53


0x1c53:	test	r13d, r13d
0x1c56:	jne	0x1d81


0x1c5c:	add	qword ptr [rsp + 0x10], 8
0x1c62:	and	byte ptr [rsp + 0x8b], r12b
0x1c6a:	mov	rax, qword ptr [rsp + 0x10]
0x1c6f:	mov	r15, qword ptr [rax - 8]
0x1c73:	test	r15, r15
0x1c76:	je	0x1f4b


0x1d81:	mov	edi, dword ptr [rsp + 0xc]
0x1d85:	call	0x1660


0x1f4b:	cmp	byte ptr [rip + 0x208197], 0
0x1f52:	jne	0x228d


0x1c50:	mov	r12d, eax
0x1c53:	test	r13d, r13d
0x1c56:	jne	0x1d81


0x1dc6:	test	eax, eax
0x1dc8:	jne	0x1fd8


0x1dce:	cmp	byte ptr [rip + 0x208317], 0
0x1dd5:	jne	0x1dee


0x1fd8:	mov	rsi, r15
0x1fdb:	mov	edi, 4
0x1fe0:	xor	r12d, r12d
0x1fe3:	call	0x5330


0x1dd7:	mov	eax, dword ptr [rsp + 0xb8]
0x1dde:	and	eax, 0xd000
0x1de3:	cmp	eax, 0x8000
0x1de8:	je	0x23e3


0x1dee:	cmp	byte ptr [rsp + 0x8a], 0
0x1df6:	mov	qword ptr [rsp + 0x40], -1
0x1dff:	jne	0x2045


0x23e3:	mov	edi, dword ptr [rsp + 0xc]
0x23e7:	xor	esi, esi
0x23e9:	mov	rcx, r15
0x23ec:	mov	edx, 1
0x23f1:	call	0x2ad0


0x1e05:	cmp	qword ptr [rsp + 0x18], 0x100000
0x1e0e:	mov	rax, qword ptr [rsp + 0x40]
0x1e13:	mov	qword ptr [rsp + 0x30], rax
0x1e18:	jbe	0x2546


0x2045:	mov	rax, qword ptr [rsp + 0x40]
0x204a:	mov	edi, 0x2018
0x204f:	mov	qword ptr [rsp + 0x48], rax
0x2054:	call	0x5ca0


0x2546:	mov	rdi, qword ptr [rsp + 0x70]
0x254b:	xor	ebx, ebx
0x254d:	call	0x5ca0


0x1e1e:	mov	r10d, 1
0x1e24:	mov	dword ptr [rsp + 0x8c], r13d
0x1e2c:	mov	qword ptr [rsp + 0x48], 0
0x1e35:	xor	ebp, ebp
0x1e37:	xor	r14d, r14d
0x1e3a:	xor	r12d, r12d
0x1e3d:	xor	ebx, ebx
0x1e3f:	mov	qword ptr [rsp + 0x80], r15
0x1e47:	mov	r13, r10
0x1e4a:	test	r12, r12
0x1e4d:	jne	0x2276


0x1e53:	mov	rax, qword ptr [rsp + 0x28]
0x1e58:	mov	r12d, 0x10
0x1e5e:	cmp	rax, 0x10
0x1e62:	cmovbe	r12, rax
0x1e66:	lea	rsi, [r12*8]
0x1e6e:	mov	rdi, r14
0x1e71:	mov	r15, rbx
0x1e74:	mov	rbx, r12
0x1e77:	mov	r12, r13
0x1e7a:	call	0x5d00


0x2276:	cmp	qword ptr [rsp + 0x58], r12
0x227b:	lea	rax, [r12 + r12]
0x227f:	cmovb	rax, qword ptr [rsp + 0x28]
0x2285:	mov	r12, rax
0x2288:	jmp	0x1e66


0x1e66:	lea	rsi, [r12*8]
0x1e6e:	mov	rdi, r14
0x1e71:	mov	r15, rbx
0x1e74:	mov	rbx, r12
0x1e77:	mov	r12, r13
0x1e7a:	call	0x5d00


0x1e7f:	mov	r14, rax
0x1e82:	test	bpl, bpl
0x1e85:	lea	r13, [r14 + r15*8]
0x1e89:	je	0x1f8f


0x1f8f:	mov	edi, 0x2000
0x1f94:	call	0x5ca0


0x1e8f:	mov	rsi, qword ptr [r13]
0x1e93:	mov	edi, dword ptr [rsp + 0xc]
0x1e97:	mov	edx, 0x2000
0x1e9c:	call	0x3780


0x1ea1:	cmp	rax, 0x1fff
0x1ea7:	mov	r13, rax
0x1eaa:	jbe	0x1f0c


0x1f0c:	call	0x1520


0x1eac:	add	qword ptr [rsp + 0x30], rax
0x1eb1:	xor	r9d, r9d
0x1eb4:	mov	rdi, qword ptr [r14 + r12*8]
0x1eb8:	mov	rsi, r13
0x1ebb:	mov	byte ptr [rsp + 0x38], r9b
0x1ec0:	call	0x2b90


0x1ec5:	movzx	ebp, byte ptr [rsp + 0x89]
0x1ecd:	movzx	r9d, byte ptr [rsp + 0x38]
0x1ed3:	lea	rsi, [r12 + 1]
0x1ed8:	xor	edx, edx
0x1eda:	mov	rax, rsi
0x1edd:	div	qword ptr [rsp + 0x28]
0x1ee2:	test	r9b, r9b
0x1ee5:	mov	r10, rdx
0x1ee8:	jne	0x246f


0x1eee:	cmp	rbx, r12
0x1ef1:	mov	r15, r12
0x1ef4:	je	0x2037


0x246f:	test	bpl, bpl
0x2472:	mov	r8, r13
0x2475:	mov	rbx, r12
0x2478:	mov	r15, qword ptr [rsp + 0x80]
0x2480:	mov	byte ptr [rsp + 0x38], bpl
0x2485:	mov	r12d, r9d
0x2488:	mov	r13d, dword ptr [rsp + 0x8c]
0x2490:	je	0x26a5


0x2037:	mov	r12, rbx
0x203a:	mov	r13, r10
0x203d:	mov	rbx, r15
0x2040:	jmp	0x1e4a


0x1efa:	mov	r12, rdx
0x1efd:	jmp	0x1e82


0x26a5:	cmp	qword ptr [rsp + 0x28], rsi
0x26aa:	jne	0x24e9


0x2496:	mov	rcx, qword ptr [rsp + 0x60]
0x249b:	mov	rdi, qword ptr [r14 + rbx*8]
0x249f:	mov	ebp, 0x2000
0x24a4:	sub	rbp, r8
0x24a7:	add	qword ptr [rsp + 0x30], rcx
0x24ac:	add	rdi, r8
0x24af:	cmp	rcx, rbp
0x24b2:	jb	0x2804


0x1e4a:	test	r12, r12
0x1e4d:	jne	0x2276


0x1e82:	test	bpl, bpl
0x1e85:	lea	r13, [r14 + r15*8]
0x1e89:	je	0x1f8f


0x26b0:	mov	rsi, r8
0x26b3:	sub	rsi, qword ptr [rsp + 0x78]
0x26b8:	add	qword ptr [rsp + 0x30], rsi
0x26bd:	test	rsi, rsi
0x26c0:	je	0x24e9


0x24e9:	xor	ebx, ebx
0x24eb:	mov	rbp, qword ptr [rsp + 0x48]
0x24f0:	jmp	0x24ff


0x2804:	mov	rsi, rcx
0x2807:	call	0x2b90


0x24b8:	test	rbp, rbp
0x24bb:	je	0x24d5


0x26c6:	mov	rdi, qword ptr [r14 + rdx*8]
0x26ca:	call	0x2b90


0x24ff:	cmp	rbx, rbp
0x2502:	jne	0x24f2


0x24d5:	mov	rsi, qword ptr [rsp + 0x60]
0x24da:	movzx	r12d, byte ptr [rsp + 0x38]
0x24e0:	sub	rsi, rbp
0x24e3:	jne	0x26c6


0x24bd:	mov	rsi, rbp
0x24c0:	mov	qword ptr [rsp + 0x80], rdx
0x24c8:	call	0x2b90


0x2504:	mov	rdi, r14
0x2507:	call	0x1500


0x24f2:	mov	rdi, qword ptr [r14 + rbx*8]
0x24f6:	add	rbx, 1
0x24fa:	call	0x1500


0x250c:	cmp	qword ptr [rsp + 0x40], -1
0x2512:	je	0x1c53


0x2518:	mov	rsi, qword ptr [rsp + 0x30]
0x251d:	mov	edi, dword ptr [rsp + 0xc]
0x2521:	xor	edx, edx
0x2523:	mov	rcx, r15
0x2526:	call	0x2ad0


0x24cd:	mov	rdx, qword ptr [rsp + 0x80]
0x24d5:	mov	rsi, qword ptr [rsp + 0x60]
0x24da:	movzx	r12d, byte ptr [rsp + 0x38]
0x24e0:	sub	rsi, rbp
0x24e3:	jne	0x26c6


0x26cf:	jmp	0x24e9


0x280c:	movzx	r12d, byte ptr [rsp + 0x38]
0x2812:	jmp	0x24e9


0x1f11:	cmp	dword ptr [rax], 0
0x1f14:	jne	0x26d4


0x1f1a:	movzx	r9d, byte ptr [rsp + 0x89]
0x1f23:	lea	r10, [r15 + 1]
0x1f27:	cmp	r10, qword ptr [rsp + 0x28]
0x1f2c:	sete	al
0x1f2f:	or	bpl, al
0x1f32:	je	0x1ed3


0x26d4:	mov	r15, qword ptr [rsp + 0x80]
0x26dc:	mov	edi, 4
0x26e1:	mov	r12, rax
0x26e4:	mov	r13d, dword ptr [rsp + 0x8c]
0x26ec:	mov	rsi, r15
0x26ef:	call	0x5330


0x1ed3:	lea	rsi, [r12 + 1]
0x1ed8:	xor	edx, edx
0x1eda:	mov	rax, rsi
0x1edd:	div	qword ptr [rsp + 0x28]
0x1ee2:	test	r9b, r9b
0x1ee5:	mov	r10, rdx
0x1ee8:	jne	0x246f


0x1f34:	add	qword ptr [rsp + 0x30], r13
0x1f39:	test	r13, r13
0x1f3c:	je	0x1ed3


0x1f3e:	jmp	0x1eb4


0x1eb4:	mov	rdi, qword ptr [r14 + r12*8]
0x1eb8:	mov	rsi, r13
0x1ebb:	mov	byte ptr [rsp + 0x38], r9b
0x1ec0:	call	0x2b90


0x1f99:	mov	edi, dword ptr [rsp + 0xc]
0x1f9d:	lea	r10, [r15 + 1]
0x1fa1:	mov	qword ptr [r13], rax
0x1fa5:	mov	edx, 0x2000
0x1faa:	mov	rsi, rax
0x1fad:	mov	qword ptr [rsp + 0x48], r10
0x1fb2:	mov	qword ptr [rsp + 0x38], r10
0x1fb7:	call	0x3780


0x1fbc:	cmp	rax, 0x1fff
0x1fc2:	mov	r13, rax
0x1fc5:	mov	r10, qword ptr [rsp + 0x38]
0x1fca:	jbe	0x1f0c


0x1fd0:	xor	r9d, r9d
0x1fd3:	jmp	0x1f27


0x1f27:	cmp	r10, qword ptr [rsp + 0x28]
0x1f2c:	sete	al
0x1f2f:	or	bpl, al
0x1f32:	je	0x1ed3


0x2552:	mov	rcx, qword ptr [rsp + 0x68]
0x2557:	movzx	r12d, byte ptr [rsp + 0x89]
0x2560:	mov	rbp, qword ptr [rsp + 0x18]
0x2565:	mov	qword ptr [rsp + 0x80], rax
0x256d:	mov	qword ptr [rsp + 0x90], rax
0x2575:	mov	dword ptr [rsp + 0x48], r13d
0x257a:	add	rax, rcx
0x257d:	mov	qword ptr [rsp + 0x38], r15
0x2582:	mov	r13, rcx
0x2585:	mov	qword ptr [rsp + 0x98], rax
0x258d:	movzx	eax, bl
0x2590:	mov	edi, dword ptr [rsp + 0xc]
0x2594:	mov	rdx, r13
0x2597:	mov	r14, qword ptr [rsp + rax*8 + 0x90]
0x259f:	mov	rsi, r14
0x25a2:	call	0x3780


0x25a7:	cmp	r13, rax
0x25aa:	mov	r15, rax
0x25ad:	jbe	0x260a


0x260a:	test	r12b, r12b
0x260d:	je	0x264f


0x25af:	call	0x1520


0x264f:	mov	eax, ebx
0x2651:	add	qword ptr [rsp + 0x30], rbp
0x2656:	xor	eax, 1
0x2659:	test	rbp, rbp
0x265c:	movzx	eax, al
0x265f:	mov	rax, qword ptr [rsp + rax*8 + 0x90]
0x2667:	jne	0x2670


0x260f:	xor	r12d, r12d
0x2612:	cmp	rbp, rax
0x2615:	jae	0x26a0


0x2669:	cmp	rbp, r15
0x266c:	jb	0x261b


0x2670:	lea	rdi, [rax + 0x2000]
0x2677:	mov	rsi, rbp
0x267a:	call	0x2b90


0x261b:	mov	rdx, r15
0x261e:	sub	rdx, rbp
0x2621:	add	qword ptr [rsp + 0x30], rdx
0x2626:	mov	rsi, rdx
0x2629:	mov	rdi, r14
0x262c:	call	0x2b90


0x26a0:	xor	ebx, 1
0x26a3:	jmp	0x2639


0x266e:	jmp	0x2631


0x2639:	xor	r12d, r12d
0x263c:	jmp	0x258d


0x2631:	xor	ebx, 1
0x2634:	test	r12b, r12b
0x2637:	jne	0x2691


0x258d:	movzx	eax, bl
0x2590:	mov	edi, dword ptr [rsp + 0xc]
0x2594:	mov	rdx, r13
0x2597:	mov	r14, qword ptr [rsp + rax*8 + 0x90]
0x259f:	mov	rsi, r14
0x25a2:	call	0x3780


0x2691:	mov	r15, qword ptr [rsp + 0x38]
0x2696:	mov	r13d, dword ptr [rsp + 0x48]
0x269b:	jmp	0x25f8


0x25f8:	mov	rdi, qword ptr [rsp + 0x80]
0x2600:	call	0x1500


0x2605:	jmp	0x250c


0x267f:	jmp	0x2669


0x25b4:	cmp	dword ptr [rax], 0
0x25b7:	jne	0x27a3


0x25bd:	cmp	rbp, r15
0x25c0:	jb	0x2641


0x27a3:	mov	r15, qword ptr [rsp + 0x38]
0x27a8:	mov	edi, 4
0x27ad:	mov	r13d, dword ptr [rsp + 0x48]
0x27b2:	mov	qword ptr [rsp + 0x38], rax
0x27b7:	xor	r12d, r12d
0x27ba:	mov	rsi, r15
0x27bd:	call	0x5330


0x2641:	test	r12b, r12b
0x2644:	jne	0x2681


0x25c2:	test	r12b, r12b
0x25c5:	jne	0x25e5


0x2646:	movzx	r12d, byte ptr [rsp + 0x89]
0x264f:	mov	eax, ebx
0x2651:	add	qword ptr [rsp + 0x30], rbp
0x2656:	xor	eax, 1
0x2659:	test	rbp, rbp
0x265c:	movzx	eax, al
0x265f:	mov	rax, qword ptr [rsp + rax*8 + 0x90]
0x2667:	jne	0x2670


0x2681:	mov	rdx, r15
0x2684:	sub	rdx, rbp
0x2687:	add	qword ptr [rsp + 0x30], rdx
0x268c:	test	rdx, rdx
0x268f:	jne	0x2626


0x25c7:	mov	eax, ebx
0x25c9:	add	qword ptr [rsp + 0x30], r15
0x25ce:	xor	eax, 1
0x25d1:	test	r15, r15
0x25d4:	movzx	eax, al
0x25d7:	mov	rax, qword ptr [rsp + rax*8 + 0x90]
0x25df:	jne	0x278b


0x25e5:	movzx	r12d, byte ptr [rsp + 0x89]
0x25ee:	mov	r15, qword ptr [rsp + 0x38]
0x25f3:	mov	r13d, dword ptr [rsp + 0x48]
0x25f8:	mov	rdi, qword ptr [rsp + 0x80]
0x2600:	call	0x1500


0x2626:	mov	rsi, rdx
0x2629:	mov	rdi, r14
0x262c:	call	0x2b90


0x278b:	lea	rdi, [rax + 0x2000]
0x2792:	movzx	r12d, byte ptr [rsp + 0x89]
0x279b:	mov	rsi, r15
0x279e:	jmp	0x267a


0x267a:	call	0x2b90


0x2059:	mov	edi, 0x2018
0x205e:	mov	qword ptr [rax + 0x2008], 0
0x2069:	mov	qword ptr [rax + 0x2000], 0
0x2074:	mov	qword ptr [rax + 0x2010], 0
0x207f:	mov	rbp, rax
0x2082:	mov	qword ptr [rsp + 0x30], rax
0x2087:	call	0x5ca0


0x208c:	mov	qword ptr [rsp + 0x38], 0
0x2095:	mov	rbx, rax
0x2098:	mov	qword ptr [rsp + 0x80], r15
0x20a0:	mov	dword ptr [rsp + 0x8c], r13d
0x20a8:	mov	edi, dword ptr [rsp + 0xc]
0x20ac:	mov	edx, 0x2000
0x20b1:	mov	rsi, rbx
0x20b4:	call	0x5620


0x20b9:	mov	r12, rax
0x20bc:	lea	rax, [rax - 1]
0x20c0:	cmp	rax, -3
0x20c4:	ja	0x21b7


0x20ca:	cmp	qword ptr [rsp + 0x18], 0
0x20d0:	jne	0x20e4


0x21b7:	mov	rdi, rbx
0x21ba:	mov	r15, qword ptr [rsp + 0x80]
0x21c2:	mov	r13d, dword ptr [rsp + 0x8c]
0x21ca:	call	0x1500


0x20d2:	mov	rsi, r12
0x20d5:	mov	rdi, rbx
0x20d8:	add	qword ptr [rsp + 0x48], r12
0x20dd:	call	0x2b90


0x20e4:	mov	qword ptr [rbx + 0x2000], r12
0x20eb:	mov	qword ptr [rbx + 0x2008], 0
0x20f6:	lea	r14, [rbx + r12]
0x20fa:	mov	qword ptr [rbx + 0x2010], 0
0x2105:	movsx	r15d, byte ptr [rip + 0x207fdd]
0x210d:	mov	rdi, rbx
0x2110:	xor	r13d, r13d
0x2113:	jmp	0x2126


0x2126:	mov	rdx, r14
0x2129:	mov	esi, r15d
0x212c:	sub	rdx, rdi
0x212f:	call	0x1670


0x1670:	jmp	qword ptr [rip + 0x208882]




0x20e2:	jmp	0x20a8


0x20a8:	mov	edi, dword ptr [rsp + 0xc]
0x20ac:	mov	edx, 0x2000
0x20b1:	mov	rsi, rbx
0x20b4:	call	0x5620


0x21cf:	add	r12, 1
0x21d3:	je	0x2725


0x2725:	mov	rsi, r15
0x2728:	mov	edi, 4
0x272d:	call	0x5330


0x21d9:	mov	rcx, qword ptr [rsp + 0x30]
0x21de:	mov	rax, qword ptr [rcx + 0x2000]
0x21e5:	test	rax, rax
0x21e8:	jne	0x23bf


0x21ee:	mov	r14, rbp
0x21f1:	mov	qword ptr [rsp + 0x30], rbp
0x21f6:	mov	rbx, qword ptr [rsp + 0x18]
0x21fb:	mov	r12, qword ptr [rsp + 0x38]
0x2200:	mov	rbp, qword ptr [rsp + 0x48]
0x2205:	jmp	0x2215


0x23bf:	movzx	ebx, byte ptr [rip + 0x207d24]
0x23c6:	cmp	byte ptr [rcx + rax - 1], bl
0x23ca:	je	0x21ee


0x2215:	mov	rax, r12
0x2218:	sub	rax, qword ptr [r14 + 0x2008]
0x221f:	cmp	rbx, rax
0x2222:	jae	0x22b6


0x23d0:	add	qword ptr [rcx + 0x2008], 1
0x23d8:	add	qword ptr [rsp + 0x38], 1
0x23de:	jmp	0x21ee


0x2228:	mov	rsi, qword ptr [r14 + 0x2000]
0x222f:	add	rbp, rsi
0x2232:	test	rsi, rsi
0x2235:	je	0x2207


0x22b6:	mov	rcx, qword ptr [rsp + 0x18]
0x22bb:	mov	rax, r12
0x22be:	mov	qword ptr [rsp + 0x48], rbp
0x22c3:	movzx	r12d, byte ptr [rsp + 0x89]
0x22cc:	mov	rbp, qword ptr [rsp + 0x30]
0x22d1:	cmp	rcx, rax
0x22d4:	jae	0x235f


0x2207:	sub	r12, qword ptr [r14 + 0x2008]
0x220e:	mov	r14, qword ptr [r14 + 0x2010]
0x2215:	mov	rax, r12
0x2218:	sub	rax, qword ptr [r14 + 0x2008]
0x221f:	cmp	rbx, rax
0x2222:	jae	0x22b6


0x2237:	mov	rdi, r14
0x223a:	call	0x2b90


0x22da:	mov	rbx, rax
0x22dd:	mov	r12, qword ptr [r14 + 0x2000]
0x22e4:	mov	rax, r14
0x22e7:	sub	rbx, rcx
0x22ea:	movsx	ecx, byte ptr [rip + 0x207df9]
0x22f1:	mov	rbp, r14
0x22f4:	add	r12, r14
0x22f7:	mov	r14, rbx
0x22fa:	mov	ebx, ecx
0x22fc:	jmp	0x2323


0x235f:	mov	rdi, rbp
0x2362:	jmp	0x2373


0x2323:	test	r14, r14
0x2326:	jne	0x22fe


0x2373:	test	rdi, rdi
0x2376:	jne	0x2364


0x2328:	mov	r14, rbp
0x232b:	movzx	r12d, byte ptr [rsp + 0x89]
0x2334:	mov	rbp, qword ptr [rsp + 0x30]
0x2339:	sub	rax, r14
0x233c:	add	qword ptr [rsp + 0x48], rax
0x2341:	test	rax, rax
0x2344:	je	0x235f


0x22fe:	mov	rdx, r12
0x2301:	mov	esi, ebx
0x2303:	mov	rdi, rax
0x2306:	sub	rdx, rax
0x2309:	call	0x1670


0x2378:	cmp	qword ptr [rsp + 0x40], -1
0x237e:	je	0x1c53


0x2364:	mov	rbx, qword ptr [rdi + 0x2010]
0x236b:	call	0x1500


0x2346:	mov	rdi, r14
0x2349:	mov	rsi, rax
0x234c:	call	0x2b90


0x2384:	mov	rsi, qword ptr [rsp + 0x48]
0x2389:	mov	edi, dword ptr [rsp + 0xc]
0x238d:	xor	edx, edx
0x238f:	mov	rcx, r15
0x2392:	call	0x2ad0


0x2370:	mov	rdi, rbx
0x2373:	test	rdi, rdi
0x2376:	jne	0x2364


0x2351:	movzx	r12d, byte ptr [rsp + 0x89]
0x235a:	mov	rdi, rbp
0x235d:	jmp	0x2373


0x223f:	jmp	0x2207


0x2397:	test	rax, rax
0x239a:	jns	0x1c53


0x23a0:	xor	r12d, r12d
0x23a3:	jmp	0x1c53


0x252b:	test	rax, rax
0x252e:	jns	0x1c53


0x2534:	jmp	0x23a0


0x23f6:	test	rax, rax
0x23f9:	mov	qword ptr [rsp + 0x40], rax
0x23fe:	js	0x23a0


0x2400:	cmp	byte ptr [rsp + 0x8a], 0
0x2408:	mov	r8, qword ptr [rsp + 0xd0]
0x2410:	movzx	r9d, byte ptr [rip + 0x207cd4]
0x2418:	je	0x28ce


0x28ce:	test	r9b, r9b
0x28d1:	mov	r12d, r9d
0x28d4:	jne	0x1e05


0x241e:	test	r9b, r9b
0x2421:	jne	0x2045


0x28da:	mov	rax, qword ptr [rsp + 0xd8]
0x28e2:	movabs	rcx, 0x1fffffffffffffff
0x28ec:	lea	rdx, [rax - 1]
0x28f0:	cmp	rdx, rcx
0x28f3:	mov	edx, 0x200
0x28f8:	cmova	rax, rdx
0x28fc:	cmp	r8, rax
0x28ff:	jle	0x1e05


0x2427:	mov	rax, qword ptr [rsp + 0xd8]
0x242f:	movabs	rcx, 0x1fffffffffffffff
0x2439:	lea	rdx, [rax - 1]
0x243d:	cmp	rdx, rcx
0x2440:	mov	edx, 0x200
0x2445:	cmova	rax, rdx
0x2449:	cmp	rax, r8
0x244c:	jge	0x2045


0x2905:	sub	r8, qword ptr [rsp + 0x40]
0x290a:	mov	eax, 0
0x290f:	cmovs	r8, rax
0x2913:	cmp	qword ptr [rsp + 0x18], r8
0x2918:	jb	0x2928


0x2452:	cmp	qword ptr [rsp + 0x40], r8
0x2457:	mov	r9d, 1
0x245d:	jl	0x276c


0x2928:	mov	rsi, r8
0x292b:	sub	rsi, qword ptr [rsp + 0x18]
0x2930:	mov	edi, dword ptr [rsp + 0xc]
0x2934:	call	0x2c10


0x291a:	movzx	r12d, byte ptr [rsp + 0x89]
0x2923:	jmp	0x1c53


0x276c:	mov	rcx, qword ptr [rsp + 0x40]
0x2771:	mov	rdx, qword ptr [rsp + 0x18]
0x2776:	mov	rdi, r15
0x2779:	mov	esi, dword ptr [rsp + 0xc]
0x277d:	call	0x2fe0


0x2463:	mov	r12d, r9d
0x2466:	and	r12d, 1
0x246a:	jmp	0x1c53


0x2782:	movzx	r9d, al
0x2786:	jmp	0x2463


0x2939:	test	eax, eax
0x293b:	je	0x291a


0x293d:	mov	rsi, r15
0x2940:	mov	edi, eax
0x2942:	call	0x2f60


0x1c1c:	mov	byte ptr [rip + 0x2083ed], 0
0x1c23:	cmp	byte ptr [rsp + 0x89], 0
0x1c2b:	jne	0x1db3


0x283e:	mov	ecx, r14d
0x2841:	mov	rdx, rax
0x2844:	xor	esi, esi
0x2846:	xor	edi, edi
0x2848:	xor	eax, eax
0x284a:	call	0x1770


0x19b7:	xor	edi, edi
0x19b9:	call	0x17c0


0x2886:	mov	rdi, rax
0x2889:	call	0x5600


0x19e8:	mov	byte ptr [rsp + 0x8a], 0
0x19f0:	mov	r15, rax
0x19f3:	jmp	0x18e8


0x1a2b:	mov	byte ptr [rsp + 0x8a], 1
0x1a33:	mov	r15, rax
0x1a36:	jmp	0x18e8


0x61a8:	test	rax, rax
0x61ab:	mov	rcx, qword ptr [rsp + 8]
0x61b0:	je	0x627c


0x627c:	mov	qword ptr [r14], rbx
0x627f:	or	ebp, 2
0x6282:	jmp	0x613d


0x61b6:	lea	eax, [r12 - 0x45]
0x61bb:	cmp	al, 0x2f
0x61bd:	ja	0x6210


0x61bf:	movabs	rdx, 0x814400308945
0x61c9:	bt	rdx, rax
0x61cd:	jae	0x6210


0x6210:	mov	edi, 1
0x6215:	mov	esi, 0x400
0x621a:	sub	r12d, 0x42
0x621e:	cmp	r12b, 0x35
0x6222:	ja	0x627c


0x61cf:	mov	esi, 0x30
0x61d4:	mov	rdi, r13
0x61d7:	mov	qword ptr [rsp + 8], rcx
0x61dc:	call	0x1600


0x6224:	lea	rdx, [rip + 0x175d]
0x622b:	movzx	r12d, r12b
0x622f:	movsxd	rax, dword ptr [rdx + r12*4]
0x6233:	add	rax, rdx
0x6236:	jmp	rax


0x61e1:	test	rax, rax
0x61e4:	mov	rcx, qword ptr [rsp + 8]
0x61e9:	je	0x6210


0x61eb:	movzx	eax, byte ptr [rcx + 1]
0x61ef:	cmp	al, 0x44
0x61f1:	je	0x61ff


0x61ff:	mov	edi, 2
0x6204:	mov	esi, 0x3e8
0x6209:	jmp	0x621a


0x61f3:	cmp	al, 0x69
0x61f5:	je	0x63c8


0x621a:	sub	r12d, 0x42
0x621e:	cmp	r12b, 0x35
0x6222:	ja	0x627c


0x63c8:	xor	edi, edi
0x63ca:	cmp	byte ptr [rcx + 2], 0x42
0x63ce:	mov	esi, 0x400
0x63d3:	sete	dil
0x63d7:	lea	edi, [rdi + rdi + 1]
0x63db:	jmp	0x621a


0x61fb:	cmp	al, 0x42
0x61fd:	jne	0x6210


0x6188:	test	rax, rax
0x618b:	mov	ebx, 1
0x6190:	mov	rcx, qword ptr [rsp + 8]
0x6195:	je	0x6138


0x230e:	test	rax, rax
0x2311:	je	0x2328


0x2313:	add	qword ptr [rbp + 0x2008], 1
0x231b:	add	rax, 1
0x231f:	sub	r14, 1
0x2323:	test	r14, r14
0x2326:	jne	0x22fe


0x2134:	test	rax, rax
0x2137:	lea	rdx, [r13 + 1]
0x213b:	jne	0x2118


0x213d:	mov	rax, qword ptr [rsp + 0x30]
0x2142:	add	qword ptr [rsp + 0x38], r13
0x2147:	mov	rax, qword ptr [rax + 0x2000]
0x214e:	lea	rdx, [r12 + rax]
0x2152:	cmp	rdx, 0x1fff
0x2159:	jbe	0x2241


0x2118:	lea	rdi, [rax + 1]
0x211c:	mov	qword ptr [rbx + 0x2008], rdx
0x2123:	mov	r13, rdx
0x2126:	mov	rdx, r14
0x2129:	mov	esi, r15d
0x212c:	sub	rdx, rdi
0x212f:	call	0x1670


0x2241:	mov	r14, qword ptr [rsp + 0x30]
0x2246:	mov	rdx, r12
0x2249:	mov	rsi, rbx
0x224c:	lea	rdi, [r14 + rax]
0x2250:	call	0x16c0


0x215f:	mov	rax, qword ptr [rsp + 0x30]
0x2164:	mov	qword ptr [rax + 0x2010], rbx
0x216b:	mov	rax, qword ptr [rsp + 0x38]
0x2170:	sub	rax, qword ptr [rbp + 0x2008]
0x2177:	cmp	qword ptr [rsp + 0x18], rax
0x217c:	jae	0x23a8


0x2182:	mov	rsi, qword ptr [rbp + 0x2000]
0x2189:	add	qword ptr [rsp + 0x48], rsi
0x218e:	test	rsi, rsi
0x2191:	jne	0x2539


0x23a8:	mov	edi, 0x2018
0x23ad:	call	0x5ca0


0x2197:	mov	rcx, qword ptr [rbp + 0x2008]
0x219e:	mov	qword ptr [rsp + 0x30], rbx
0x21a3:	mov	rbx, rbp
0x21a6:	sub	qword ptr [rsp + 0x38], rcx
0x21ab:	mov	rbp, qword ptr [rbp + 0x2010]
0x21b2:	jmp	0x20a8


0x2539:	mov	rdi, rbp
0x253c:	call	0x2b90


0x2541:	jmp	0x2197


0x23b2:	mov	qword ptr [rsp + 0x30], rbx
0x23b7:	mov	rbx, rax
0x23ba:	jmp	0x20a8


0x2255:	mov	rax, qword ptr [rbx + 0x2000]
0x225c:	add	qword ptr [r14 + 0x2000], rax
0x2263:	mov	rax, qword ptr [rbx + 0x2008]
0x226a:	add	qword ptr [r14 + 0x2008], rax
0x2271:	jmp	0x20a8


0x1ca9:	test	eax, eax
0x1cab:	mov	dword ptr [rsp + 0xc], eax
0x1caf:	jns	0x1be4


0x1cb5:	mov	rsi, r15
0x1cb8:	mov	edi, 4
0x1cbd:	call	0x5330


0x1be4:	cmp	byte ptr [rip + 0x208500], 0
0x1beb:	je	0x1c23


0x1d8a:	test	eax, eax
0x1d8c:	je	0x1c5c


0x1d92:	mov	rsi, r15
0x1d95:	mov	edi, 4
0x1d9a:	call	0x5330


0x2294:	test	eax, eax
0x2296:	jns	0x1f58


0x229c:	call	0x1520


0x22a1:	mov	esi, dword ptr [rax]
0x22a3:	lea	rdx, [rip + 0x4e40]
0x22aa:	mov	edi, 1
0x22af:	xor	eax, eax
0x22b1:	call	0x1770


0x288e:	lea	rsi, [rip + 0x3f87]
0x2895:	mov	edx, 5
0x289a:	xor	edi, edi
0x289c:	mov	rbx, rax
0x289f:	call	0x15a0


0x28a4:	lea	rdx, [rip + 0x410f]
0x28ab:	mov	rcx, rax
0x28ae:	mov	r8, rbx
0x28b1:	mov	esi, 0x4b
0x28b6:	mov	edi, 1
0x28bb:	xor	eax, eax
0x28bd:	call	0x1770


0x28c2:	mov	byte ptr [rip + 0x207821], r10b
0x28c9:	jmp	0x1d2a


0x1d2a:	test	r8b, r8b
0x1d2d:	mov	byte ptr [rdi], r8b
0x1d30:	je	0x1d36


0x1d32:	mov	byte ptr [rdi + 1], 0
0x1d36:	movzx	edi, byte ptr [rsp + 0x8a]
0x1d3e:	add	rbx, 8
0x1d42:	sub	ebp, 1
0x1d45:	call	0x2a70


0x5fa2:	mov	esi, dword ptr [r14]
0x5fa5:	mov	r8, rax
0x5fa8:	mov	eax, 0
0x5fad:	lea	rdx, [rip + 0xa06]
0x5fb4:	mov	rcx, r13
0x5fb7:	cmp	esi, 0x16
0x5fba:	cmove	esi, eax
0x5fbd:	test	ebx, ebx
0x5fbf:	mov	eax, 1
0x5fc4:	cmove	ebx, eax
0x5fc7:	xor	eax, eax
0x5fc9:	mov	edi, ebx
0x5fcb:	call	0x1770


0x5fd0:	mov	rbp, qword ptr [rsp]
0x5fd4:	mov	rdx, qword ptr [rsp + 8]
0x5fd9:	xor	rdx, qword ptr fs:[0x28]
0x5fe2:	mov	rax, rbp
0x5fe5:	jne	0x602b


0x373a:	mov	esi, dword ptr [rbx]
0x373c:	lea	rdx, [rip + 0x3277]
0x3743:	mov	rcx, rax
0x3746:	mov	r8, rbp
0x3749:	xor	edi, edi
0x374b:	xor	eax, eax
0x374d:	call	0x1770


0x2947:	jmp	0x1c53


0x3274:	xor	eax, eax
0x3276:	jmp	0x313a


0x4dac:	add	rsp, 0x20
0x4db0:	mov	r11, qword ptr [rsp + 0x10]
0x4db5:	cmp	r11, rax
0x4db8:	ja	0x4e21


0x4dba:	lea	rsi, [rax + 1]
0x4dbe:	lea	rax, [rip + 0x20535b]
0x4dc5:	cmp	r12, rax
0x4dc8:	mov	qword ptr [rbx], rsi
0x4dcb:	je	0x4ddf


0x4e21:	mov	eax, dword ptr [rsp + 0x18]
0x4e25:	mov	dword ptr [r13], eax
0x4e29:	add	rsp, 0x28
0x4e2d:	mov	rax, r12
0x4e30:	pop	rbx
0x4e31:	pop	rbp
0x4e32:	pop	r12
0x4e34:	pop	r13
0x4e36:	pop	r14
0x4e38:	pop	r15
0x4e3a:	ret	


0x4ddf:	mov	rdi, rsi
0x4de2:	mov	qword ptr [rsp + 0x10], rsi
0x4de7:	call	0x5ca0


0x4dcd:	mov	rdi, r12
0x4dd0:	mov	qword ptr [rsp + 0x10], rsi
0x4dd5:	call	0x1500


0x4dda:	mov	rsi, qword ptr [rsp + 0x10]
0x4ddf:	mov	rdi, rsi
0x4de2:	mov	qword ptr [rsp + 0x10], rsi
0x4de7:	call	0x5ca0


0x4dec:	sub	rsp, 8
0x4df0:	mov	qword ptr [rbx + 8], rax
0x4df4:	mov	r8d, dword ptr [rbp]
0x4df8:	push	qword ptr [rbp + 0x30]
0x4dfb:	push	qword ptr [rbp + 0x28]
0x4dfe:	mov	rcx, r14
0x4e01:	push	r15
0x4e03:	mov	r9d, dword ptr [rsp + 0x3c]
0x4e08:	mov	rdi, rax
0x4e0b:	mov	rdx, qword ptr [rsp + 0x28]
0x4e10:	mov	rsi, qword ptr [rsp + 0x30]
0x4e15:	mov	r12, rax
0x4e18:	call	0x3a80


0x5532:	mov	rdi, qword ptr [rsp + 0x38]
0x5537:	xor	rdi, qword ptr fs:[0x28]
0x5540:	jne	0x554c


0x5542:	add	rsp, 0x48
0x5546:	ret	


0x554c:	call	0x15d0


0x527f:	mov	rcx, qword ptr [rsp + 0x38]
0x5284:	xor	rcx, qword ptr fs:[0x28]
0x528d:	jne	0x5299


0x528f:	add	rsp, 0x48
0x5293:	ret	


0x5299:	call	0x15d0


0x530b:	mov	rdx, qword ptr [rsp + 0x38]
0x5310:	xor	rdx, qword ptr fs:[0x28]
0x5319:	jne	0x5325


0x531b:	add	rsp, 0x48
0x531f:	ret	


0x5325:	call	0x15d0


0x549f:	mov	rcx, qword ptr [rsp + 0x38]
0x54a4:	xor	rcx, qword ptr fs:[0x28]
0x54ad:	jne	0x54b9


0x54af:	add	rsp, 0x48
0x54b3:	ret	


0x54b9:	call	0x15d0


0x2b3d:	lea	rsi, [rip + 0x3cfd]
0x2b44:	mov	r13, rax
0x2b47:	lea	rax, [rip + 0x3f1a]
0x2b4e:	test	ebp, ebp
0x2b50:	mov	edx, 5
0x2b55:	cmovne	rsi, rax
0x2b59:	xor	edi, edi
0x2b5b:	call	0x15a0


0x2b60:	mov	rbp, rax
0x2b63:	call	0x1520


0x2b68:	mov	esi, dword ptr [rax]
0x2b6a:	mov	r8, r12
0x2b6d:	mov	rcx, r13
0x2b70:	mov	rdx, rbp
0x2b73:	xor	edi, edi
0x2b75:	xor	eax, eax
0x2b77:	call	0x1770


0x2b7c:	jmp	0x2aff


0x2f7f:	lea	rsi, [rip + 0x390a]
0x2f86:	mov	rbp, rax
0x2f89:	mov	edx, 5
0x2f8e:	xor	edi, edi
0x2f90:	call	0x15a0


0x2f95:	mov	rbx, rax
0x2f98:	call	0x1520


0x2f9d:	mov	esi, dword ptr [rax]
0x2f9f:	add	rsp, 8
0x2fa3:	mov	rcx, rbp
0x2fa6:	mov	rdx, rbx
0x2fa9:	xor	edi, edi
0x2fab:	xor	eax, eax
0x2fad:	pop	rbx
0x2fae:	pop	rbp
0x2faf:	jmp	0x1770


0x53ce:	mov	rsi, qword ptr [rsp + 0x38]
0x53d3:	xor	rsi, qword ptr fs:[0x28]
0x53dc:	jne	0x53e3


0x53de:	add	rsp, 0x48
0x53e2:	ret	


0x53e3:	call	0x15d0


0x4e1d:	add	rsp, 0x20
0x4e21:	mov	eax, dword ptr [rsp + 0x18]
0x4e25:	mov	dword ptr [r13], eax
0x4e29:	add	rsp, 0x28
0x4e2d:	mov	rax, r12
0x4e30:	pop	rbx
0x4e31:	pop	rbp
0x4e32:	pop	r12
0x4e34:	pop	r13
0x4e36:	pop	r14
0x4e38:	pop	r15
0x4e3a:	ret	


0x506c:	lea	rsi, [rax + 1]
0x5070:	mov	qword ptr [rsp + 0x48], rax
0x5075:	add	rsp, 0x20
0x5079:	mov	rdi, rsi
0x507c:	mov	qword ptr [rsp + 0x18], rsi
0x5081:	call	0x5ca0


0x5086:	mov	qword ptr [rsp + 0x10], rax
0x508b:	sub	rsp, 8
0x508f:	push	qword ptr [rbx + 0x30]
0x5092:	push	qword ptr [rbx + 0x28]
0x5095:	mov	r10, qword ptr [rsp + 0x38]
0x509a:	mov	r9d, ebp
0x509d:	mov	r8d, dword ptr [rbx]
0x50a0:	mov	rcx, r15
0x50a3:	mov	rdx, r14
0x50a6:	mov	rdi, rax
0x50a9:	push	r10
0x50ab:	mov	rsi, qword ptr [rsp + 0x38]
0x50b0:	call	0x3a80


0x50b5:	mov	eax, dword ptr [rsp + 0x2c]
0x50b9:	add	rsp, 0x20
0x50bd:	test	r12, r12
0x50c0:	mov	dword ptr [r13], eax
0x50c4:	je	0x50cf


0x50cf:	mov	rax, qword ptr [rsp + 0x10]
0x50d4:	add	rsp, 0x38
0x50d8:	pop	rbx
0x50d9:	pop	rbp
0x50da:	pop	r12
0x50dc:	pop	r13
0x50de:	pop	r14
0x50e0:	pop	r15
0x50e2:	ret	


0x50c6:	mov	r11, qword ptr [rsp + 0x28]
0x50cb:	mov	qword ptr [r12], r11
0x50cf:	mov	rax, qword ptr [rsp + 0x10]
0x50d4:	add	rsp, 0x38
0x50d8:	pop	rbx
0x50d9:	pop	rbp
0x50da:	pop	r12
0x50dc:	pop	r13
0x50de:	pop	r14
0x50e0:	pop	r15
0x50e2:	ret	


0x4fe1:	mov	dword ptr [rbp], r12d
0x4fe5:	add	rsp, 0x38
0x4fe9:	pop	rbx
0x4fea:	pop	rbp
0x4feb:	pop	r12
0x4fed:	pop	r13
0x4fef:	pop	r14
0x4ff1:	pop	r15
0x4ff3:	ret	


0x679d:	add	rbx, 1
0x67a1:	cmp	rbp, rbx
0x67a4:	jne	0x6790


0x6790:	mov	rdx, r15
0x6793:	mov	rsi, r14
0x6796:	mov	edi, r13d
0x6799:	call	qword ptr [r12 + rbx*8]


0x1d9f:	mov	edx, 5
0x1da4:	mov	rbx, rax
0x1da7:	lea	rsi, [rip + 0x4c5b]
0x1dae:	jmp	0x1cd1


0x1cd1:	xor	edi, edi
0x1cd3:	xor	r12d, r12d
0x1cd6:	call	0x15a0


0x1cdb:	mov	rbp, rax
0x1cde:	call	0x1520


0x1ce3:	mov	esi, dword ptr [rax]
0x1ce5:	mov	rcx, rbx
0x1ce8:	mov	rdx, rbp
0x1ceb:	xor	edi, edi
0x1ced:	xor	eax, eax
0x1cef:	call	0x1770


0x1cf4:	jmp	0x1c5c


0x1cc2:	lea	rsi, [rip + 0x4d07]
0x1cc9:	mov	rbx, rax
0x1ccc:	mov	edx, 5
0x1cd1:	xor	edi, edi
0x1cd3:	xor	r12d, r12d
0x1cd6:	call	0x15a0


0x2732:	lea	rsi, [rip + 0x4146]
0x2739:	mov	edx, 5
0x273e:	xor	edi, edi
0x2740:	mov	rbx, rax
0x2743:	call	0x15a0


0x2748:	mov	r12, rax
0x274b:	call	0x1520


0x2750:	mov	esi, dword ptr [rax]
0x2752:	mov	rdx, r12
0x2755:	xor	edi, edi
0x2757:	mov	rcx, rbx
0x275a:	xor	eax, eax
0x275c:	xor	r12d, r12d
0x275f:	call	0x1770


0x2764:	mov	rdi, rbp
0x2767:	jmp	0x2373


0x27c2:	lea	rsi, [rip + 0x40b6]
0x27c9:	mov	edx, 5
0x27ce:	xor	edi, edi
0x27d0:	mov	rbx, rax
0x27d3:	call	0x15a0


0x27d8:	mov	r8, qword ptr [rsp + 0x38]
0x27dd:	mov	rdx, rax
0x27e0:	mov	rcx, rbx
0x27e3:	xor	edi, edi
0x27e5:	xor	eax, eax
0x27e7:	mov	esi, dword ptr [r8]
0x27ea:	call	0x1770


0x27ef:	jmp	0x25f8


0x26f4:	lea	rsi, [rip + 0x4184]
0x26fb:	mov	edx, 5
0x2700:	xor	edi, edi
0x2702:	mov	rbx, rax
0x2705:	call	0x15a0


0x270a:	mov	esi, dword ptr [r12]
0x270e:	mov	rdx, rax
0x2711:	mov	rcx, rbx
0x2714:	xor	edi, edi
0x2716:	xor	eax, eax
0x2718:	xor	r12d, r12d
0x271b:	call	0x1770


0x2720:	jmp	0x24e9


0x1fe8:	lea	rsi, [rip + 0x4a0a]
0x1fef:	mov	edx, 5
0x1ff4:	xor	edi, edi
0x1ff6:	mov	rbx, rax
0x1ff9:	call	0x15a0


0x1ffe:	mov	rbp, rax
0x2001:	call	0x1520


0x2006:	mov	esi, dword ptr [rax]
0x2008:	mov	rcx, rbx
0x200b:	mov	rdx, rbp
0x200e:	xor	edi, edi
0x2010:	xor	eax, eax
0x2012:	call	0x1770


0x2017:	jmp	0x1c53


0x2bd6:	lea	rsi, [rip + 0x3c91]
0x2bdd:	mov	edx, 5
0x2be2:	xor	edi, edi
0x2be4:	mov	rbp, rax
0x2be7:	call	0x15a0


0x2bec:	mov	rbx, rax
0x2bef:	call	0x1520


0x2bf4:	mov	esi, dword ptr [rax]
0x2bf6:	mov	rcx, rbp
0x2bf9:	mov	rdx, rbx
0x2bfc:	mov	edi, 1
0x2c01:	xor	eax, eax
0x2c03:	call	0x1770


0x2c08:	nop	dword ptr [rax + rax]


0x2de5:	lea	rsi, [rip + 0x3a93]
0x2dec:	mov	edx, 5
0x2df1:	xor	edi, edi
0x2df3:	mov	rbp, rax
0x2df6:	call	0x15a0


0x2dfb:	mov	rbx, rax
0x2dfe:	call	0x1520


0x2e03:	mov	esi, dword ptr [rax]
0x2e05:	mov	rcx, rbp
0x2e08:	xor	eax, eax
0x2e0a:	mov	rdx, rbx
0x2e0d:	xor	edi, edi
0x2e0f:	call	0x1770


0x2e14:	xor	eax, eax
0x2e16:	jmp	0x2d9c


0x2ef8:	lea	rsi, [rip + 0x3980]
0x2eff:	mov	edx, 5
0x2f04:	xor	edi, edi
0x2f06:	mov	rbp, rax
0x2f09:	call	0x15a0


0x2f0e:	mov	rbx, rax
0x2f11:	call	0x1520


0x2f16:	mov	esi, dword ptr [rax]
0x2f18:	mov	rcx, rbp
0x2f1b:	xor	eax, eax
0x2f1d:	mov	rdx, rbx
0x2f20:	xor	edi, edi
0x2f22:	call	0x1770


0x2f27:	xor	eax, eax
0x2f29:	jmp	0x2f35


0x2f35:	mov	rcx, qword ptr [rsp + 0x2008]
0x2f3d:	xor	rcx, qword ptr fs:[0x28]
0x2f46:	jne	0x2f5a


0x31ef:	lea	rsi, [rip + 0x3689]
0x31f6:	mov	edx, 5
0x31fb:	xor	edi, edi
0x31fd:	mov	rbp, rax
0x3200:	call	0x15a0


0x3205:	mov	rbx, rax
0x3208:	call	0x1520


0x320d:	mov	esi, dword ptr [rax]
0x320f:	mov	rcx, rbp
0x3212:	xor	eax, eax
0x3214:	mov	rdx, rbx
0x3217:	xor	edi, edi
0x3219:	call	0x1770


0x321e:	xor	eax, eax
0x3220:	jmp	0x313a


0x2fc2:	mov	edx, 5
0x2fc7:	mov	rbp, rax
0x2fca:	lea	rsi, [rip + 0x38ae]
0x2fd1:	jmp	0x2f8e


0x2f8e:	xor	edi, edi
0x2f90:	call	0x15a0






0x58c0:	mov	r13, qword ptr [rbx + 0x10]
0x58c4:	mov	r12, qword ptr [rbx + 8]
0x58c8:	lea	rsi, [rip + 0x1d37]
0x58cf:	mov	rbx, qword ptr [rbx]
0x58d2:	mov	edx, 5
0x58d7:	xor	edi, edi
0x58d9:	call	0x15a0


0x5a00:	mov	r9, qword ptr [rbx + 0x10]
0x5a04:	mov	r13, qword ptr [rbx + 0x30]
0x5a08:	lea	rsi, [rip + 0x1d99]
0x5a0f:	mov	r12, qword ptr [rbx + 0x28]
0x5a13:	mov	r15, qword ptr [rbx + 0x20]
0x5a17:	mov	edx, 5
0x5a1c:	mov	r14, qword ptr [rbx + 0x18]
0x5a20:	mov	r8, qword ptr [rbx + 8]
0x5a24:	xor	edi, edi
0x5a26:	mov	qword ptr [rsp + 8], r9
0x5a2b:	mov	rbx, qword ptr [rbx]
0x5a2e:	mov	qword ptr [rsp], r8
0x5a32:	call	0x15a0


0x57e0:	mov	r10, qword ptr [rbx + 0x40]
0x57e4:	mov	r9, qword ptr [rbx + 0x38]
0x57e8:	lea	rsi, [rip + 0x2019]
0x57ef:	mov	rax, qword ptr [rbx + 0x10]
0x57f3:	mov	r8, qword ptr [rbx + 8]
0x57f7:	mov	edx, 5
0x57fc:	mov	r13, qword ptr [rbx + 0x30]
0x5800:	mov	r12, qword ptr [rbx + 0x28]
0x5804:	mov	r15, qword ptr [rbx + 0x20]
0x5808:	mov	r14, qword ptr [rbx + 0x18]
0x580c:	mov	rbx, qword ptr [rbx]
0x580f:	mov	qword ptr [rsp + 0x18], r10
0x5814:	mov	qword ptr [rsp + 0x10], r9
0x5819:	mov	qword ptr [rsp], rax
0x581d:	mov	qword ptr [rsp + 8], r8
0x5822:	xor	edi, edi
0x5824:	call	0x15a0


0x5998:	mov	r8, qword ptr [rbx + 8]
0x599c:	mov	r12, qword ptr [rbx + 0x28]
0x59a0:	lea	rsi, [rip + 0x1dd9]
0x59a7:	mov	r15, qword ptr [rbx + 0x20]
0x59ab:	mov	r14, qword ptr [rbx + 0x18]
0x59af:	mov	edx, 5
0x59b4:	mov	r13, qword ptr [rbx + 0x10]
0x59b8:	xor	edi, edi
0x59ba:	mov	rbx, qword ptr [rbx]
0x59bd:	mov	qword ptr [rsp], r8
0x59c1:	call	0x15a0


0x57a6:	add	rsp, 0x28
0x57aa:	pop	rbx
0x57ab:	pop	rbp
0x57ac:	pop	r12
0x57ae:	pop	r13
0x57b0:	pop	r14
0x57b2:	pop	r15
0x57b4:	ret	


0x5968:	mov	r15, qword ptr [rbx + 0x20]
0x596c:	lea	rsi, [rip + 0x1de5]
0x5973:	mov	edx, 5
0x5978:	xor	edi, edi
0x597a:	mov	r14, qword ptr [rbx + 0x18]
0x597e:	mov	r13, qword ptr [rbx + 0x10]
0x5982:	mov	r12, qword ptr [rbx + 8]
0x5986:	mov	rbx, qword ptr [rbx]
0x5989:	call	0x15a0


0x5910:	lea	rsi, [rip + 0x1e21]
0x5917:	mov	edx, 5
0x591c:	xor	edi, edi
0x591e:	mov	r14, qword ptr [rbx + 0x18]
0x5922:	mov	r13, qword ptr [rbx + 0x10]
0x5926:	mov	r12, qword ptr [rbx + 8]
0x592a:	mov	rbx, qword ptr [rbx]
0x592d:	call	0x15a0


0x5730:	mov	r9, qword ptr [rbx + 0x38]
0x5734:	mov	rax, qword ptr [rbx + 0x10]
0x5738:	lea	rsi, [rip + 0x2099]
0x573f:	mov	r8, qword ptr [rbx + 8]
0x5743:	mov	edx, 5
0x5748:	xor	edi, edi
0x574a:	mov	r13, qword ptr [rbx + 0x30]
0x574e:	mov	r12, qword ptr [rbx + 0x28]
0x5752:	mov	qword ptr [rsp + 0x10], r9
0x5757:	mov	r15, qword ptr [rbx + 0x20]
0x575b:	mov	r14, qword ptr [rbx + 0x18]
0x575f:	mov	qword ptr [rsp], rax
0x5763:	mov	qword ptr [rsp + 8], r8
0x5768:	mov	rbx, qword ptr [rbx]
0x576b:	call	0x15a0


0x5838:	mov	rbx, qword ptr [rbx]
0x583b:	lea	rsi, [rip + 0x1d9d]
0x5842:	mov	edx, 5
0x5847:	xor	edi, edi
0x5849:	call	0x15a0


0x5878:	mov	r12, qword ptr [rbx + 8]
0x587c:	lea	rsi, [rip + 0x1d6c]
0x5883:	mov	rbx, qword ptr [rbx]
0x5886:	mov	edx, 5
0x588b:	xor	edi, edi
0x588d:	call	0x15a0


0x5892:	add	rsp, 0x28
0x5896:	mov	r8, r12
0x5899:	mov	rcx, rbx
0x589c:	mov	rdi, rbp
0x589f:	mov	rdx, rax
0x58a2:	mov	esi, 1
0x58a7:	pop	rbx
0x58a8:	pop	rbp
0x58a9:	pop	r12
0x58ab:	pop	r13
0x58ad:	pop	r14
0x58af:	pop	r15
0x58b1:	xor	eax, eax
0x58b3:	jmp	0x17e0


0x584e:	add	rsp, 0x28
0x5852:	mov	rcx, rbx
0x5855:	mov	rdi, rbp
0x5858:	pop	rbx
0x5859:	pop	rbp
0x585a:	pop	r12
0x585c:	pop	r13
0x585e:	pop	r14
0x5860:	pop	r15
0x5862:	mov	rdx, rax
0x5865:	mov	esi, 1
0x586a:	xor	eax, eax
0x586c:	jmp	0x17e0


0x5770:	sub	rsp, 8
0x5774:	mov	r9, qword ptr [rsp + 0x18]
0x5779:	mov	rdx, rax
0x577c:	mov	rcx, rbx
0x577f:	mov	esi, 1
0x5784:	mov	rdi, rbp
0x5787:	xor	eax, eax
0x5789:	push	r9
0x578b:	push	r13
0x578d:	push	r12
0x578f:	push	r15
0x5791:	push	r14
0x5793:	mov	r9, qword ptr [rsp + 0x30]
0x5798:	mov	r8, qword ptr [rsp + 0x38]
0x579d:	call	0x17e0


0x5932:	sub	rsp, 8
0x5936:	push	r14
0x5938:	mov	rdx, rax
0x593b:	mov	r9, r13
0x593e:	mov	r8, r12
0x5941:	mov	rcx, rbx
0x5944:	mov	rdi, rbp
0x5947:	mov	esi, 1
0x594c:	xor	eax, eax
0x594e:	call	0x17e0


0x5953:	pop	rax
0x5954:	pop	rdx
0x5955:	add	rsp, 0x28
0x5959:	pop	rbx
0x595a:	pop	rbp
0x595b:	pop	r12
0x595d:	pop	r13
0x595f:	pop	r14
0x5961:	pop	r15
0x5963:	ret	


0x598e:	push	r15
0x5990:	jmp	0x5936


0x5936:	push	r14
0x5938:	mov	rdx, rax
0x593b:	mov	r9, r13
0x593e:	mov	r8, r12
0x5941:	mov	rcx, rbx
0x5944:	mov	rdi, rbp
0x5947:	mov	esi, 1
0x594c:	xor	eax, eax
0x594e:	call	0x17e0


0x59c6:	sub	rsp, 8
0x59ca:	mov	r9, r13
0x59cd:	push	r12
0x59cf:	push	r15
0x59d1:	push	r14
0x59d3:	mov	r8, qword ptr [rsp + 0x20]
0x59d8:	mov	rcx, rbx
0x59db:	mov	rdx, rax
0x59de:	mov	rdi, rbp
0x59e1:	mov	esi, 1
0x59e6:	xor	eax, eax
0x59e8:	call	0x17e0


0x59ed:	add	rsp, 0x20
0x59f1:	add	rsp, 0x28
0x59f5:	pop	rbx
0x59f6:	pop	rbp
0x59f7:	pop	r12
0x59f9:	pop	r13
0x59fb:	pop	r14
0x59fd:	pop	r15
0x59ff:	ret	


0x5a37:	push	r13
0x5a39:	push	r12
0x5a3b:	push	r15
0x5a3d:	push	r14
0x5a3f:	mov	r9, qword ptr [rsp + 0x28]
0x5a44:	jmp	0x59d3


0x59d3:	mov	r8, qword ptr [rsp + 0x20]
0x59d8:	mov	rcx, rbx
0x59db:	mov	rdx, rax
0x59de:	mov	rdi, rbp
0x59e1:	mov	esi, 1
0x59e6:	xor	eax, eax
0x59e8:	call	0x17e0


0x58de:	add	rsp, 0x28
0x58e2:	mov	r9, r13
0x58e5:	mov	r8, r12
0x58e8:	mov	rcx, rbx
0x58eb:	mov	rdi, rbp
0x58ee:	mov	rdx, rax
0x58f1:	pop	rbx
0x58f2:	pop	rbp
0x58f3:	pop	r12
0x58f5:	pop	r13
0x58f7:	pop	r14
0x58f9:	pop	r15
0x58fb:	mov	esi, 1
0x5900:	xor	eax, eax
0x5902:	jmp	0x17e0


0x4620:	sub	rsp, 8
0x4624:	mov	rcx, rbp
0x4627:	mov	rsi, r13
0x462a:	push	qword ptr [rsp + 0x68]
0x462e:	push	qword ptr [rsp + 0x78]
0x4632:	mov	rdi, r14
0x4635:	push	0
0x4637:	mov	r9d, dword ptr [rsp + 0x98]
0x463f:	mov	r8d, dword ptr [rsp + 0x28]
0x4644:	mov	rdx, qword ptr [rsp + 0x30]
0x4649:	and	r9d, 0xfffffffd
0x464d:	call	0x3a80


0x4652:	add	rsp, 0x20
0x4656:	mov	r15, rax
0x4659:	mov	rbx, qword ptr [rsp + 0xa8]
0x4661:	xor	rbx, qword ptr fs:[0x28]
0x466a:	mov	rax, r15
0x466d:	jne	0x4c73


0x4673:	add	rsp, 0xb8
0x467a:	pop	rbx
0x467b:	pop	rbp
0x467c:	pop	r12
0x467e:	pop	r13
0x4680:	pop	r14
0x4682:	pop	r15
0x4684:	ret	


0x4c73:	call	0x15d0


0x4c1d:	sub	rsp, 8
0x4c21:	mov	r8d, 5
0x4c27:	mov	rcx, r11
0x4c2a:	push	qword ptr [rsp + 0x68]
0x4c2e:	push	qword ptr [rsp + 0x78]
0x4c32:	mov	rdi, r14
0x4c35:	push	qword ptr [rsp + 0x38]
0x4c39:	mov	r9d, dword ptr [rsp + 0x98]
0x4c41:	mov	rdx, qword ptr [rsp + 0x30]
0x4c46:	mov	rsi, qword ptr [rsp + 0x70]
0x4c4b:	call	0x3a80


0x4c50:	add	rsp, 0x20
0x4c54:	mov	r15, rax
0x4c57:	jmp	0x4659


0x4659:	mov	rbx, qword ptr [rsp + 0xa8]
0x4661:	xor	rbx, qword ptr fs:[0x28]
0x466a:	mov	rax, r15
0x466d:	jne	0x4c73


0x14f0:	push	qword ptr [rip + 0x20893a]
0x14f6:	jmp	qword ptr [rip + 0x20893c]


0x14fc:	nop	dword ptr [rax]


0x1506:	push	0
0x150b:	jmp	0x14f0


0x1516:	push	1
0x151b:	jmp	0x14f0


0x1526:	push	2
0x152b:	jmp	0x14f0


0x1536:	push	3
0x153b:	jmp	0x14f0


0x1546:	push	4
0x154b:	jmp	0x14f0


0x1556:	push	5
0x155b:	jmp	0x14f0


0x1566:	push	6
0x156b:	jmp	0x14f0


0x1576:	push	7
0x157b:	jmp	0x14f0


0x1586:	push	8
0x158b:	jmp	0x14f0


0x1596:	push	9
0x159b:	jmp	0x14f0


0x15a6:	push	0xa
0x15ab:	jmp	0x14f0


0x15b6:	push	0xb
0x15bb:	jmp	0x14f0


0x15c6:	push	0xc
0x15cb:	jmp	0x14f0


0x15d6:	push	0xd
0x15db:	jmp	0x14f0


0x15e6:	push	0xe
0x15eb:	jmp	0x14f0


0x15f6:	push	0xf
0x15fb:	jmp	0x14f0


0x1606:	push	0x10
0x160b:	jmp	0x14f0


0x1616:	push	0x11
0x161b:	jmp	0x14f0


0x1626:	push	0x12
0x162b:	jmp	0x14f0


0x1636:	push	0x13
0x163b:	jmp	0x14f0


0x1646:	push	0x14
0x164b:	jmp	0x14f0


0x1656:	push	0x15
0x165b:	jmp	0x14f0


0x1666:	push	0x16
0x166b:	jmp	0x14f0


0x1676:	push	0x17
0x167b:	jmp	0x14f0


0x1686:	push	0x18
0x168b:	jmp	0x14f0


0x1690:	jmp	qword ptr [rip + 0x208872]




0x1696:	push	0x19
0x169b:	jmp	0x14f0


0x16a6:	push	0x1a
0x16ab:	jmp	0x14f0


0x16b6:	push	0x1b
0x16bb:	jmp	0x14f0


0x16c6:	push	0x1c
0x16cb:	jmp	0x14f0


0x16d6:	push	0x1d
0x16db:	jmp	0x14f0


0x16e6:	push	0x1e
0x16eb:	jmp	0x14f0


0x16f6:	push	0x1f
0x16fb:	jmp	0x14f0


0x1706:	push	0x20
0x170b:	jmp	0x14f0


0x1716:	push	0x21
0x171b:	jmp	0x14f0


0x1726:	push	0x22
0x172b:	jmp	0x14f0


0x1736:	push	0x23
0x173b:	jmp	0x14f0


0x1746:	push	0x24
0x174b:	jmp	0x14f0


0x1756:	push	0x25
0x175b:	jmp	0x14f0


0x1766:	push	0x26
0x176b:	jmp	0x14f0


0x1776:	push	0x27
0x177b:	jmp	0x14f0


0x1786:	push	0x28
0x178b:	jmp	0x14f0


0x1796:	push	0x29
0x179b:	jmp	0x14f0


0x17a6:	push	0x2a
0x17ab:	jmp	0x14f0


0x17b6:	push	0x2b
0x17bb:	jmp	0x14f0


0x17c6:	push	0x2c
0x17cb:	jmp	0x14f0


0x17d6:	push	0x2d
0x17db:	jmp	0x14f0


0x17e6:	push	0x2e
0x17eb:	jmp	0x14f0


0x17f0:	jmp	qword ptr [rip + 0x2087c2]




0x17f6:	push	0x2f
0x17fb:	jmp	0x14f0


0x1800:	jmp	qword ptr [rip + 0x2087ba]




0x1806:	push	0x30
0x180b:	jmp	0x14f0


0x1816:	push	0x31
0x181b:	jmp	0x14f0


0x1cf9:	mov	r9d, 1
0x1cff:	xor	r10d, r10d
0x1d02:	nop	word ptr [rax + rax]
0x1d08:	add	rdx, 1
0x1d0c:	movzx	r13d, byte ptr [rdx]
0x1d10:	test	r13b, r13b
0x1d13:	jne	0x1ad0


0x1d19:	test	r9b, r9b
0x1d1c:	mov	byte ptr [rsp + 0x8a], r11b
0x1d24:	jne	0x28c2


0x1ad0:	lea	eax, [r13 - 0x62]
0x1ad4:	cmp	al, 0x18
0x1ad6:	ja	0x2854


0x1d59:	mov	r12d, 1
0x1d5f:	jmp	0x1d08


0x1d08:	add	rdx, 1
0x1d0c:	movzx	r13d, byte ptr [rdx]
0x1d10:	test	r13b, r13b
0x1d13:	jne	0x1ad0


0x1d61:	mov	r12d, 2
0x1d67:	jmp	0x1d08


0x1d69:	mov	r11d, 1
0x1d6f:	jmp	0x1d08


0x1d71:	xor	r8d, r8d
0x1d74:	xor	r11d, r11d
0x1d77:	jmp	0x1d08


0x1d79:	mov	r8d, r13d
0x1d7c:	xor	r11d, r11d
0x1d7f:	jmp	0x1d08


0x2958:	nop	dword ptr [rax + rax]


0x298a:	hlt	


0x298b:	nop	dword ptr [rax + rax]


0x29c2:	nop	dword ptr [rax]
0x29c6:	nop	word ptr cs:[rax + rax]


0x2a12:	nop	dword ptr [rax]
0x2a16:	nop	word ptr cs:[rax + rax]


0x2a5a:	nop	word ptr [rax + rax]


0x2a6a:	nop	word ptr [rax + rax]


0x2ac3:	nop	dword ptr [rax]
0x2ac6:	nop	word ptr cs:[rax + rax]


0x2b83:	nop	dword ptr [rax]
0x2b86:	nop	word ptr cs:[rax + rax]


0x2cdc:	nop	dword ptr [rax]


0x2e67:	nop	word ptr [rax + rax]


0x2f5f:	nop	


0x2fd8:	nop	dword ptr [rax + rax]


0x36a2:	nop	word ptr cs:[rax + rax]
0x36ac:	nop	dword ptr [rax]


0x36b8:	nop	dword ptr [rax + rax]


0x36c8:	nop	dword ptr [rax + rax]


0x3774:	nop	word ptr cs:[rax + rax]
0x377e:	nop	


0x37f6:	nop	word ptr cs:[rax + rax]


0x389c:	nop	dword ptr [rax]


0x38e2:	nop	word ptr cs:[rax + rax]
0x38ec:	nop	dword ptr [rax]


0x398f:	nop	


0x3a77:	nop	word ptr [rax + rax]


0x3b13:	mov	byte ptr [rsp + 0xe], 1
0x3b18:	mov	byte ptr [rsp + 0x7c], 0
0x3b1d:	xor	r12d, r12d
0x3b20:	mov	qword ptr [rsp + 0x50], 0
0x3b29:	mov	byte ptr [rsp + 0xf], 1
0x3b2e:	mov	byte ptr [rsp + 0xd], 0
0x3b33:	lea	rax, [rip + 0x35c3]
0x3b3a:	mov	qword ptr [rsp + 0x18], 1
0x3b43:	xor	r15d, r15d
0x3b46:	mov	dword ptr [rsp + 8], 2
0x3b4e:	mov	qword ptr [rsp + 0x48], rax
0x3b53:	xor	r11d, r11d
0x3b56:	mov	rax, rbp
0x3b59:	mov	r8d, r12d
0x3b5c:	mov	rbp, r11
0x3b5f:	mov	r11, rax
0x3b62:	nop	word ptr [rax + rax]
0x3b68:	cmp	r11, rbp
0x3b6b:	setne	r12b
0x3b6f:	cmp	r11, -1
0x3b73:	jne	0x3b82


0x3b75:	mov	rax, qword ptr [rsp + 0x10]
0x3b7a:	cmp	byte ptr [rax + rbp], 0
0x3b7e:	setne	r12b
0x3b82:	test	r12b, r12b
0x3b85:	je	0x41e0


0x3b82:	test	r12b, r12b
0x3b85:	je	0x41e0


0x41e0:	cmp	dword ptr [rsp + 8], 2
0x41e5:	movzx	ebx, byte ptr [rsp + 0xf]
0x41ea:	mov	r12d, r8d
0x41ed:	mov	rbp, r11
0x41f0:	sete	dl
0x41f3:	mov	eax, ebx
0x41f5:	test	r15, r15
0x41f8:	sete	cl
0x41fb:	and	eax, edx
0x41fd:	and	al, cl
0x41ff:	jne	0x4c66


0x3b8b:	cmp	dword ptr [rsp + 8], 2
0x3b90:	mov	rdi, qword ptr [rsp + 0x10]
0x3b95:	lea	r9, [rdi + rbp]
0x3b99:	setne	al
0x3b9c:	and	al, byte ptr [rsp + 0xd]
0x3ba0:	mov	r10d, eax
0x3ba3:	je	0x3c50


0x4205:	mov	eax, ebx
0x4207:	xor	eax, 1
0x420a:	and	dl, al
0x420c:	je	0x4b7c


0x4c66:	mov	dword ptr [rsp + 8], 2
0x4c6e:	jmp	0x4609


0x3c50:	movzx	ebx, byte ptr [r9]
0x3c54:	cmp	bl, 0x7e
0x3c57:	ja	0x3f78


0x3ba9:	mov	rax, qword ptr [rsp + 0x18]
0x3bae:	test	rax, rax
0x3bb1:	je	0x3fe0


0x4b7c:	mov	rbx, qword ptr [rsp + 0x48]
0x4b81:	test	rbx, rbx
0x4b84:	je	0x4bb2


0x4212:	cmp	byte ptr [rsp + 0x7c], 0
0x4217:	je	0x4b7a


0x4609:	cmp	byte ptr [rsp + 0xd], 0
0x460e:	je	0x4620


0x3c5d:	lea	rcx, [rip + 0x3528]
0x3c64:	movzx	edx, bl
0x3c67:	movsxd	rax, dword ptr [rcx + rdx*4]
0x3c6b:	add	rax, rcx
0x3c6e:	jmp	rax


0x3f78:	cmp	qword ptr [rsp + 0x58], 1
0x3f7e:	jne	0x4328


0x3fe0:	movzx	ebx, byte ptr [r9]
0x3fe4:	cmp	bl, 0x7e
0x3fe7:	ja	0x3f70


0x3bb7:	cmp	r11, -1
0x3bbb:	lea	rbx, [rbp + rax]
0x3bc0:	jne	0x3bf0


0x4bb2:	cmp	r13, r15
0x4bb5:	jbe	0x4659


0x4b86:	test	al, al
0x4b88:	je	0x4bb2


0x4b7a:	mov	eax, edx
0x4b7c:	mov	rbx, qword ptr [rsp + 0x48]
0x4b81:	test	rbx, rbx
0x4b84:	je	0x4bb2


0x421d:	cmp	byte ptr [rsp + 0xe], 0
0x4222:	jne	0x4c1d


0x4610:	test	al, al
0x4612:	mov	eax, 4
0x4617:	cmove	eax, dword ptr [rsp + 8]
0x461c:	mov	dword ptr [rsp + 8], eax


0x3f84:	mov	qword ptr [rsp + 0x38], r11
0x3f89:	mov	byte ptr [rsp + 0x30], r8b
0x3f8e:	mov	byte ptr [rsp + 0x28], r10b
0x3f93:	call	0x1810


0x4328:	lea	rax, [rsp + 0xa0]
0x4330:	cmp	r11, -1
0x4334:	mov	qword ptr [rsp + 0xa0], 0
0x4340:	mov	qword ptr [rsp + 0x28], rax
0x4345:	jne	0x4374


0x3fe9:	lea	rcx, [rip + 0x3398]
0x3ff0:	movzx	edx, bl
0x3ff3:	movsxd	rax, dword ptr [rcx + rdx*4]
0x3ff7:	add	rax, rcx
0x3ffa:	jmp	rax


0x3f70:	xor	r10d, r10d
0x3f73:	nop	dword ptr [rax + rax]
0x3f78:	cmp	qword ptr [rsp + 0x58], 1
0x3f7e:	jne	0x4328


0x3bc2:	cmp	rax, 1
0x3bc6:	jbe	0x3bf0


0x3bf0:	cmp	rbx, r11
0x3bf3:	mov	byte ptr [rsp + 0x28], r10b
0x3bf8:	ja	0x41b0


0x4bbb:	mov	byte ptr [r14 + r15], 0
0x4bc0:	jmp	0x4659


0x4b8a:	movzx	ecx, byte ptr [rbx]
0x4b8d:	mov	rax, rbx
0x4b90:	test	cl, cl
0x4b92:	je	0x4bb2


0x4228:	test	r13, r13
0x422b:	sete	al
0x422e:	cmp	qword ptr [rsp + 0x50], 0
0x4234:	setne	dl
0x4237:	and	al, dl
0x4239:	je	0x4c5c


0x4347:	mov	rdi, qword ptr [rsp + 0x10]
0x434c:	mov	byte ptr [rsp + 0x40], r8b
0x4351:	mov	byte ptr [rsp + 0x38], r10b
0x4356:	mov	qword ptr [rsp + 0x30], r9
0x435b:	call	0x15c0


0x4374:	lea	rax, [rsp + 0x9c]
0x437c:	xor	ecx, ecx
0x437e:	mov	byte ptr [rsp + 0x7e], bl
0x4382:	mov	byte ptr [rsp + 0x7d], r8b
0x4387:	mov	rbx, rcx
0x438a:	mov	qword ptr [rsp + 0x88], r9
0x4392:	mov	qword ptr [rsp + 0x38], rax
0x4397:	mov	byte ptr [rsp + 0x7f], r10b
0x439c:	mov	qword ptr [rsp + 0x80], r15
0x43a4:	mov	qword ptr [rsp + 0x40], r14
0x43a9:	mov	qword ptr [rsp + 0x70], r13
0x43ae:	mov	qword ptr [rsp + 0x30], r11
0x43b3:	mov	rax, qword ptr [rsp + 0x10]
0x43b8:	lea	r14, [rbp + rbx]
0x43bd:	mov	rdx, qword ptr [rsp + 0x30]
0x43c2:	mov	rcx, qword ptr [rsp + 0x28]
0x43c7:	mov	rdi, qword ptr [rsp + 0x38]
0x43cc:	lea	r13, [rax + r14]
0x43d0:	sub	rdx, r14
0x43d3:	mov	rsi, r13
0x43d6:	call	0x6480


0x3bc8:	mov	byte ptr [rsp + 0x38], r8b
0x3bcd:	mov	byte ptr [rsp + 0x30], r10b
0x3bd2:	mov	qword ptr [rsp + 0x28], r9
0x3bd7:	call	0x15c0


0x3bfe:	mov	rdx, qword ptr [rsp + 0x18]
0x3c03:	mov	rsi, qword ptr [rsp + 0x48]
0x3c08:	mov	rdi, r9
0x3c0b:	mov	qword ptr [rsp + 0x40], r11
0x3c10:	mov	byte ptr [rsp + 0x38], r8b
0x3c15:	mov	qword ptr [rsp + 0x30], r9
0x3c1a:	call	0x1690


0x41b0:	xor	r10d, r10d
0x41b3:	jmp	0x3c50


0x4b94:	mov	rdx, r15
0x4b97:	sub	rax, r15
0x4b9a:	cmp	r13, rdx
0x4b9d:	jbe	0x4ba3


0x4c5c:	movzx	eax, byte ptr [rsp + 0x7c]
0x4c61:	jmp	0x4b7c


0x423f:	mov	r13, qword ptr [rsp + 0x50]
0x4244:	lea	rbx, [rip + 0x2eb2]
0x424b:	mov	byte ptr [r14], 0x27
0x424f:	mov	dword ptr [rsp + 8], 2
0x4257:	mov	r15d, 1
0x425d:	mov	qword ptr [rsp + 0x18], 1
0x4266:	mov	byte ptr [rsp + 0xf], 0
0x426b:	mov	qword ptr [rsp + 0x48], rbx
0x4270:	mov	byte ptr [rsp + 0x7c], al
0x4274:	jmp	0x3b53


0x4ba3:	add	rdx, 1
0x4ba7:	movzx	ecx, byte ptr [rax + rdx]
0x4bab:	test	cl, cl
0x4bad:	jne	0x4b9a


0x4b9f:	mov	byte ptr [r14 + rdx], cl
0x4ba3:	add	rdx, 1
0x4ba7:	movzx	ecx, byte ptr [rax + rdx]
0x4bab:	test	cl, cl
0x4bad:	jne	0x4b9a


0x3b53:	xor	r11d, r11d
0x3b56:	mov	rax, rbp
0x3b59:	mov	r8d, r12d
0x3b5c:	mov	rbp, r11
0x3b5f:	mov	r11, rax
0x3b62:	nop	word ptr [rax + rax]
0x3b68:	cmp	r11, rbp
0x3b6b:	setne	r12b
0x3b6f:	cmp	r11, -1
0x3b73:	jne	0x3b82


0x4baf:	mov	r15, rdx
0x4bb2:	cmp	r13, r15
0x4bb5:	jbe	0x4659


0x4b9a:	cmp	r13, rdx
0x4b9d:	jbe	0x4ba3


0x3c1f:	test	eax, eax
0x3c21:	mov	r9, qword ptr [rsp + 0x30]
0x3c26:	movzx	r8d, byte ptr [rsp + 0x38]
0x3c2c:	mov	r11, qword ptr [rsp + 0x40]
0x3c31:	jne	0x41b0


0x3c37:	cmp	byte ptr [rsp + 0xf], 0
0x3c3c:	movzx	r10d, byte ptr [rsp + 0x28]
0x3c42:	jne	0x4bc5


0x4bc5:	cmp	dword ptr [rsp + 8], 2
0x4bca:	movzx	ebx, byte ptr [rsp + 0xf]
0x4bcf:	mov	rbp, r11
0x4bd2:	sete	al
0x4bd5:	mov	byte ptr [rsp + 0xd], bl
0x4bd9:	jmp	0x4609


0x43db:	test	rax, rax
0x43de:	mov	r15, rax
0x43e1:	je	0x4431


0x4431:	mov	edx, r12d
0x4434:	mov	rdi, rbx
0x4437:	movzx	r8d, byte ptr [rsp + 0x7d]
0x443d:	xor	edx, 1
0x4440:	movzx	ebx, byte ptr [rsp + 0x7e]
0x4445:	movzx	r10d, byte ptr [rsp + 0x7f]
0x444b:	and	dl, byte ptr [rsp + 0xd]
0x444f:	mov	r15, qword ptr [rsp + 0x80]
0x4457:	mov	r14, qword ptr [rsp + 0x40]
0x445c:	mov	r13, qword ptr [rsp + 0x70]
0x4461:	mov	r11, qword ptr [rsp + 0x30]
0x4466:	cmp	rdi, 1
0x446a:	jbe	0x4a6b


0x43e3:	cmp	rax, -1
0x43e7:	je	0x4a05


0x4a6b:	mov	eax, edx
0x4a6d:	jmp	0x3fc7


0x4470:	mov	rcx, rdi
0x4473:	xor	esi, esi
0x4475:	movzx	r9d, byte ptr [rsp + 0xf]
0x447b:	add	rcx, rbp
0x447e:	mov	rdi, qword ptr [rsp + 0x10]
0x4483:	jmp	0x453e


0x4a05:	mov	rdi, rbx
0x4a08:	movzx	r8d, byte ptr [rsp + 0x7d]
0x4a0e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x4a13:	movzx	r10d, byte ptr [rsp + 0x7f]
0x4a19:	mov	r15, qword ptr [rsp + 0x80]
0x4a21:	xor	r12d, r12d
0x4a24:	mov	r14, qword ptr [rsp + 0x40]
0x4a29:	mov	r13, qword ptr [rsp + 0x70]
0x4a2e:	mov	r11, qword ptr [rsp + 0x30]
0x4a33:	movzx	edx, byte ptr [rsp + 0xd]
0x4a38:	jmp	0x4466


0x43ed:	cmp	rax, -2
0x43f1:	je	0x4991


0x3fc7:	test	al, al
0x3fc9:	jne	0x4961


0x453e:	test	dl, dl
0x4540:	jne	0x4490


0x4466:	cmp	rdi, 1
0x446a:	jbe	0x4a6b


0x4991:	mov	r11, qword ptr [rsp + 0x30]
0x4996:	mov	rsi, r14
0x4999:	mov	rcx, r13
0x499c:	mov	rax, rbx
0x499f:	mov	rdi, rbx
0x49a2:	movzx	r8d, byte ptr [rsp + 0x7d]
0x49a8:	movzx	ebx, byte ptr [rsp + 0x7e]
0x49ad:	mov	r9, qword ptr [rsp + 0x88]
0x49b5:	cmp	rsi, r11
0x49b8:	movzx	r10d, byte ptr [rsp + 0x7f]
0x49be:	mov	r15, qword ptr [rsp + 0x80]
0x49c6:	mov	r14, qword ptr [rsp + 0x40]
0x49cb:	mov	r13, qword ptr [rsp + 0x70]
0x49d0:	jae	0x49f8


0x43f7:	cmp	dword ptr [rsp + 8], 2
0x43fc:	sete	al
0x43ff:	and	al, byte ptr [rsp + 0xf]
0x4403:	jne	0x45a0


0x3fcf:	cmp	dword ptr [rsp + 8], 2
0x3fd4:	sete	dl
0x3fd7:	jmp	0x3ca8


0x4961:	movzx	edx, byte ptr [rsp + 0xd]
0x4966:	xor	r12d, r12d
0x4969:	jmp	0x4470


0x4546:	mov	eax, esi
0x4548:	xor	eax, 1
0x454b:	and	eax, r8d
0x454e:	test	r10b, r10b
0x4551:	je	0x4561


0x4490:	cmp	dword ptr [rsp + 8], 2
0x4495:	sete	al
0x4498:	test	r9b, r9b
0x449b:	jne	0x4950


0x49d2:	cmp	byte ptr [rcx], 0
0x49d5:	jne	0x49e7


0x49f8:	movzx	edx, byte ptr [rsp + 0xd]
0x49fd:	xor	r12d, r12d
0x4a00:	jmp	0x4466


0x4409:	mov	edi, dword ptr [rsp + 0x9c]
0x4410:	call	0x1800


0x45a0:	cmp	r15, 1
0x45a4:	je	0x4409


0x3ca8:	cmp	byte ptr [rsp + 0xd], 1
0x3cad:	jne	0x3dc2


0x4561:	add	rbp, 1
0x4565:	cmp	rbp, rcx
0x4568:	jae	0x3cec


0x4553:	cmp	r13, r15
0x4556:	jbe	0x455d


0x44a1:	mov	esi, r8d
0x44a4:	xor	esi, 1
0x44a7:	and	al, sil
0x44aa:	je	0x44db


0x4950:	movzx	ebx, byte ptr [rsp + 0xf]
0x4955:	mov	rbp, r11
0x4958:	mov	byte ptr [rsp + 0xd], bl
0x495c:	jmp	0x4609


0x49d7:	jmp	0x49f8


0x49e7:	add	rax, 1
0x49eb:	lea	rdx, [rbp + rax]
0x49f0:	cmp	r11, rdx
0x49f3:	ja	0x49e0


0x45aa:	mov	rdi, qword ptr [rsp + 0x10]
0x45af:	lea	rcx, [rdi + r15]
0x45b3:	lea	rdx, [rdi + r14 + 1]
0x45b8:	lea	r8, [rcx + r14]
0x45bc:	jmp	0x45cd


0x3cb3:	test	dl, dl
0x3cb5:	jne	0x3dc2


0x3dc2:	cmp	byte ptr [rsp + 0xf], 0
0x3dc7:	jne	0x3cbb


0x456e:	test	al, al
0x4570:	je	0x496e


0x3cec:	test	al, al
0x3cee:	je	0x3d10


0x455d:	add	r15, 1
0x4561:	add	rbp, 1
0x4565:	cmp	rbp, rcx
0x4568:	jae	0x3cec


0x4558:	mov	byte ptr [r14 + r15], 0x5c
0x455d:	add	r15, 1
0x4561:	add	rbp, 1
0x4565:	cmp	rbp, rcx
0x4568:	jae	0x3cec


0x44db:	cmp	r13, r15
0x44de:	jbe	0x44e5


0x44ac:	cmp	r13, r15
0x44af:	jbe	0x44b6


0x49f5:	mov	rdi, rax
0x49f8:	movzx	edx, byte ptr [rsp + 0xd]
0x49fd:	xor	r12d, r12d
0x4a00:	jmp	0x4466


0x49e0:	cmp	byte ptr [r9 + rax], 0
0x49e5:	je	0x49f5


0x45cd:	movzx	ecx, byte ptr [rdx]
0x45d0:	sub	ecx, 0x5b
0x45d3:	cmp	cl, 0x21
0x45d6:	ja	0x45c0


0x3cbb:	mov	rsi, qword ptr [rsp + 0x20]
0x3cc0:	test	rsi, rsi
0x3cc3:	je	0x3cd9


0x3dcd:	jmp	0x3cd9


0x496e:	xor	r10d, r10d
0x4971:	jmp	0x452d


0x4576:	cmp	r13, r15
0x4579:	jbe	0x4580


0x3d10:	cmp	r15, r13
0x3d13:	jae	0x3d19


0x3cf0:	cmp	r13, r15
0x3cf3:	jbe	0x3cfa


0x44e5:	lea	rax, [r15 + 1]
0x44e9:	cmp	r13, rax
0x44ec:	jbe	0x44fb


0x44e0:	mov	byte ptr [r14 + r15], 0x5c
0x44e5:	lea	rax, [r15 + 1]
0x44e9:	cmp	r13, rax
0x44ec:	jbe	0x44fb


0x44b6:	lea	rsi, [r15 + 1]
0x44ba:	cmp	r13, rsi
0x44bd:	jbe	0x44c5


0x44b1:	mov	byte ptr [r14 + r15], 0x27
0x44b6:	lea	rsi, [r15 + 1]
0x44ba:	cmp	r13, rsi
0x44bd:	jbe	0x44c5


0x45d8:	mov	esi, 1
0x45dd:	shl	rsi, cl
0x45e0:	mov	rcx, rsi
0x45e3:	movabs	rsi, 0x20000002b
0x45ed:	test	rcx, rsi
0x45f0:	je	0x45c0


0x45c0:	add	rdx, 1
0x45c4:	cmp	r8, rdx
0x45c7:	je	0x4409


0x3cd9:	test	r10b, r10b
0x3cdc:	jne	0x3e23


0x3cc5:	mov	edx, ebx
0x3cc7:	shr	dl, 5
0x3cca:	movzx	edx, dl
0x3ccd:	mov	edx, dword ptr [rsi + rdx*4]
0x3cd0:	bt	edx, ebx
0x3cd3:	jb	0x3e23


0x452d:	cmp	r13, r15
0x4530:	jbe	0x4536


0x4580:	lea	rax, [r15 + 1]
0x4584:	cmp	r13, rax
0x4587:	jbe	0x458f


0x457b:	mov	byte ptr [r14 + r15], 0x27
0x4580:	lea	rax, [r15 + 1]
0x4584:	cmp	r13, rax
0x4587:	jbe	0x458f


0x3d15:	mov	byte ptr [r14 + r15], bl
0x3d19:	movzx	edi, byte ptr [rsp + 0xe]
0x3d1e:	add	r15, 1
0x3d22:	mov	eax, 0
0x3d27:	test	r12b, r12b
0x3d2a:	cmove	edi, eax
0x3d2d:	mov	byte ptr [rsp + 0xe], dil
0x3d32:	jmp	0x3b68


0x3d19:	movzx	edi, byte ptr [rsp + 0xe]
0x3d1e:	add	r15, 1
0x3d22:	mov	eax, 0
0x3d27:	test	r12b, r12b
0x3d2a:	cmove	edi, eax
0x3d2d:	mov	byte ptr [rsp + 0xe], dil
0x3d32:	jmp	0x3b68


0x3cfa:	lea	rax, [r15 + 1]
0x3cfe:	cmp	r13, rax
0x3d01:	jbe	0x3d09


0x3cf5:	mov	byte ptr [r14 + r15], 0x27
0x3cfa:	lea	rax, [r15 + 1]
0x3cfe:	cmp	r13, rax
0x3d01:	jbe	0x3d09


0x44fb:	lea	rax, [r15 + 2]
0x44ff:	cmp	r13, rax
0x4502:	jbe	0x4514


0x44ee:	mov	eax, ebx
0x44f0:	shr	al, 6
0x44f3:	add	eax, 0x30
0x44f6:	mov	byte ptr [r14 + r15 + 1], al
0x44fb:	lea	rax, [r15 + 2]
0x44ff:	cmp	r13, rax
0x4502:	jbe	0x4514


0x44c5:	lea	rsi, [r15 + 2]
0x44c9:	cmp	r13, rsi
0x44cc:	jbe	0x44d4


0x44bf:	mov	byte ptr [r14 + r15 + 1], 0x24
0x44c5:	lea	rsi, [r15 + 2]
0x44c9:	cmp	r13, rsi
0x44cc:	jbe	0x44d4


0x45f2:	mov	r14, qword ptr [rsp + 0x40]
0x45f7:	mov	r13, qword ptr [rsp + 0x70]
0x45fc:	mov	rbp, qword ptr [rsp + 0x30]
0x4601:	mov	dword ptr [rsp + 8], 2
0x4609:	cmp	byte ptr [rsp + 0xd], 0
0x460e:	je	0x4620


0x3ce2:	xor	eax, 1
0x3ce5:	add	rbp, 1
0x3ce9:	and	eax, r8d
0x3cec:	test	al, al
0x3cee:	je	0x3d10


0x3e23:	cmp	dword ptr [rsp + 8], 2
0x3e28:	sete	dl
0x3e2b:	cmp	byte ptr [rsp + 0xf], 0
0x3e30:	mov	eax, edx
0x3e32:	jne	0x4688


0x4536:	movzx	ebx, byte ptr [rdi + rbp]
0x453a:	add	r15, 1
0x453e:	test	dl, dl
0x4540:	jne	0x4490


0x4532:	mov	byte ptr [r14 + r15], bl
0x4536:	movzx	ebx, byte ptr [rdi + rbp]
0x453a:	add	r15, 1
0x453e:	test	dl, dl
0x4540:	jne	0x4490


0x458f:	add	r15, 2
0x4593:	xor	r10d, r10d
0x4596:	xor	r8d, r8d
0x4599:	jmp	0x452d


0x4589:	mov	byte ptr [r14 + r15 + 1], 0x27
0x458f:	add	r15, 2
0x4593:	xor	r10d, r10d
0x4596:	xor	r8d, r8d
0x4599:	jmp	0x452d


0x3b68:	cmp	r11, rbp
0x3b6b:	setne	r12b
0x3b6f:	cmp	r11, -1
0x3b73:	jne	0x3b82


0x3d09:	add	r15, 2
0x3d0d:	xor	r8d, r8d
0x3d10:	cmp	r15, r13
0x3d13:	jae	0x3d19


0x3d03:	mov	byte ptr [r14 + r15 + 1], 0x27
0x3d09:	add	r15, 2
0x3d0d:	xor	r8d, r8d
0x3d10:	cmp	r15, r13
0x3d13:	jae	0x3d19


0x4514:	and	ebx, 7
0x4517:	add	rbp, 1
0x451b:	add	r15, 3
0x451f:	add	ebx, 0x30
0x4522:	cmp	rbp, rcx
0x4525:	jae	0x3d10


0x4504:	mov	eax, ebx
0x4506:	shr	al, 3
0x4509:	and	eax, 7
0x450c:	add	eax, 0x30
0x450f:	mov	byte ptr [r14 + r15 + 2], al
0x4514:	and	ebx, 7
0x4517:	add	rbp, 1
0x451b:	add	r15, 3
0x451f:	add	ebx, 0x30
0x4522:	cmp	rbp, rcx
0x4525:	jae	0x3d10


0x44d4:	add	r15, 3
0x44d8:	mov	r8d, eax
0x44db:	cmp	r13, r15
0x44de:	jbe	0x44e5


0x44ce:	mov	byte ptr [r14 + r15 + 2], 0x27
0x44d4:	add	r15, 3
0x44d8:	mov	r8d, eax
0x44db:	cmp	r13, r15
0x44de:	jbe	0x44e5


0x3e38:	mov	eax, r8d
0x3e3b:	xor	eax, 1
0x3e3e:	and	al, dl
0x3e40:	je	0x3e71


0x4688:	mov	rbp, r11
0x468b:	jmp	0x4609


0x452b:	mov	esi, edx
0x452d:	cmp	r13, r15
0x4530:	jbe	0x4536


0x3e71:	cmp	r13, r15
0x3e74:	jbe	0x3e7b


0x3e42:	cmp	r13, r15
0x3e45:	jbe	0x3e4c


0x3e7b:	add	r15, 1
0x3e7f:	add	rbp, 1
0x3e83:	jmp	0x3d10


0x3e76:	mov	byte ptr [r14 + r15], 0x5c
0x3e7b:	add	r15, 1
0x3e7f:	add	rbp, 1
0x3e83:	jmp	0x3d10


0x3e4c:	lea	rdx, [r15 + 1]
0x3e50:	cmp	r13, rdx
0x3e53:	jbe	0x3e5b


0x3e47:	mov	byte ptr [r14 + r15], 0x27
0x3e4c:	lea	rdx, [r15 + 1]
0x3e50:	cmp	r13, rdx
0x3e53:	jbe	0x3e5b


0x3e5b:	lea	rdx, [r15 + 2]
0x3e5f:	cmp	r13, rdx
0x3e62:	jbe	0x3e6a


0x3e55:	mov	byte ptr [r14 + r15 + 1], 0x24
0x3e5b:	lea	rdx, [r15 + 2]
0x3e5f:	cmp	r13, rdx
0x3e62:	jbe	0x3e6a


0x3e6a:	add	r15, 3
0x3e6e:	mov	r8d, eax
0x3e71:	cmp	r13, r15
0x3e74:	jbe	0x3e7b


0x3e64:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3e6a:	add	r15, 3
0x3e6e:	mov	r8d, eax
0x3e71:	cmp	r13, r15
0x3e74:	jbe	0x3e7b


0x4415:	mov	rdi, qword ptr [rsp + 0x28]
0x441a:	test	eax, eax
0x441c:	mov	eax, 0
0x4421:	cmove	r12d, eax
0x4425:	add	rbx, r15
0x4428:	call	0x17f0


0x442d:	test	eax, eax
0x442f:	je	0x43b3


0x43b3:	mov	rax, qword ptr [rsp + 0x10]
0x43b8:	lea	r14, [rbp + rbx]
0x43bd:	mov	rdx, qword ptr [rsp + 0x30]
0x43c2:	mov	rcx, qword ptr [rsp + 0x28]
0x43c7:	mov	rdi, qword ptr [rsp + 0x38]
0x43cc:	lea	r13, [rax + r14]
0x43d0:	sub	rdx, r14
0x43d3:	mov	rsi, r13
0x43d6:	call	0x6480


0x3bdc:	movzx	r8d, byte ptr [rsp + 0x38]
0x3be2:	movzx	r10d, byte ptr [rsp + 0x30]
0x3be8:	mov	r11, rax
0x3beb:	mov	r9, qword ptr [rsp + 0x28]
0x3bf0:	cmp	rbx, r11
0x3bf3:	mov	byte ptr [rsp + 0x28], r10b
0x3bf8:	ja	0x41b0


0x4360:	movzx	r8d, byte ptr [rsp + 0x40]
0x4366:	movzx	r10d, byte ptr [rsp + 0x38]
0x436c:	mov	r11, rax
0x436f:	mov	r9, qword ptr [rsp + 0x30]
0x4374:	lea	rax, [rsp + 0x9c]
0x437c:	xor	ecx, ecx
0x437e:	mov	byte ptr [rsp + 0x7e], bl
0x4382:	mov	byte ptr [rsp + 0x7d], r8b
0x4387:	mov	rbx, rcx
0x438a:	mov	qword ptr [rsp + 0x88], r9
0x4392:	mov	qword ptr [rsp + 0x38], rax
0x4397:	mov	byte ptr [rsp + 0x7f], r10b
0x439c:	mov	qword ptr [rsp + 0x80], r15
0x43a4:	mov	qword ptr [rsp + 0x40], r14
0x43a9:	mov	qword ptr [rsp + 0x70], r13
0x43ae:	mov	qword ptr [rsp + 0x30], r11
0x43b3:	mov	rax, qword ptr [rsp + 0x10]
0x43b8:	lea	r14, [rbp + rbx]
0x43bd:	mov	rdx, qword ptr [rsp + 0x30]
0x43c2:	mov	rcx, qword ptr [rsp + 0x28]
0x43c7:	mov	rdi, qword ptr [rsp + 0x38]
0x43cc:	lea	r13, [rax + r14]
0x43d0:	sub	rdx, r14
0x43d3:	mov	rsi, r13
0x43d6:	call	0x6480


0x3f98:	mov	rcx, qword ptr [rax]
0x3f9b:	movzx	edx, bl
0x3f9e:	movzx	r10d, byte ptr [rsp + 0x28]
0x3fa4:	movzx	r8d, byte ptr [rsp + 0x30]
0x3faa:	mov	r11, qword ptr [rsp + 0x38]
0x3faf:	mov	edi, 1
0x3fb4:	movzx	eax, word ptr [rcx + rdx*2]
0x3fb8:	and	ax, 0x4000
0x3fbc:	setne	r12b
0x3fc0:	sete	al
0x3fc3:	and	al, byte ptr [rsp + 0xd]
0x3fc7:	test	al, al
0x3fc9:	jne	0x4961


0x3c70:	xor	r10d, r10d
0x3c73:	cmp	r11, 1
0x3c77:	setne	al
0x3c7a:	cmp	r11, -1
0x3c7e:	jne	0x3c8c


0x3c80:	mov	rax, qword ptr [rsp + 0x10]
0x3c85:	cmp	byte ptr [rax + 1], 0
0x3c89:	setne	al
0x3c8c:	cmp	dword ptr [rsp + 8], 2
0x3c91:	sete	dl
0x3c94:	test	al, al
0x3c96:	je	0x3ee8


0x3c8c:	cmp	dword ptr [rsp + 8], 2
0x3c91:	sete	dl
0x3c94:	test	al, al
0x3c96:	je	0x3ee8


0x3ee8:	test	rbp, rbp
0x3eeb:	jne	0x3c9c


0x3c9c:	xor	r12d, r12d
0x3c9f:	xor	eax, eax
0x3ca1:	nop	dword ptr [rax]
0x3ca8:	cmp	byte ptr [rsp + 0xd], 1
0x3cad:	jne	0x3dc2


0x3ef1:	movzx	eax, byte ptr [rsp + 0xf]
0x3ef6:	and	al, dl
0x3ef8:	je	0x3ca8


0x3efe:	mov	rbp, r11
0x3f01:	mov	dword ptr [rsp + 8], 2
0x3f09:	jmp	0x4609


0x4308:	cmp	byte ptr [rsp + 0xf], 0
0x430d:	jne	0x4b30


0x3d50:	cmp	eax, 5
0x3d53:	je	0x42c8


0x4313:	xor	r12d, r12d
0x4316:	xor	eax, eax
0x4318:	mov	ebx, 0x3f
0x431d:	jmp	0x3cd9


0x4b30:	mov	rbp, r11
0x4b33:	movzx	eax, byte ptr [rsp + 0xf]
0x4b38:	jmp	0x4609


0x42c8:	test	byte ptr [rsp + 0x78], 4
0x42cd:	je	0x42f0


0x3d59:	cmp	eax, 2
0x3d5c:	mov	ebx, 0x3f
0x3d61:	sete	dl
0x3d64:	xor	r12d, r12d
0x3d67:	xor	eax, eax
0x3d69:	jmp	0x3ca8


0x42f0:	xor	edx, edx
0x42f2:	xor	r12d, r12d
0x42f5:	xor	eax, eax
0x42f7:	mov	ebx, 0x3f
0x42fc:	jmp	0x3ca8


0x42cf:	lea	rcx, [rbp + 2]
0x42d3:	cmp	rcx, r11
0x42d6:	jae	0x42f0


0x42d8:	mov	rax, qword ptr [rsp + 0x10]
0x42dd:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x42e2:	je	0x4a72


0x4a72:	movzx	ebx, byte ptr [rax + rcx]
0x4a76:	cmp	bl, 0x3e
0x4a79:	ja	0x42f0


0x4a7f:	movabs	rax, 0x7000a38200000000
0x4a89:	bt	rax, rbx
0x4a8d:	jae	0x42f0


0x4a93:	cmp	byte ptr [rsp + 0xf], 0
0x4a98:	jne	0x4c82


0x4a9e:	cmp	r13, r15
0x4aa1:	jbe	0x4aa8


0x4c82:	mov	rbp, r11
0x4c85:	jmp	0x4620


0x4aa8:	lea	rax, [r15 + 1]
0x4aac:	cmp	r13, rax
0x4aaf:	jbe	0x4ab7


0x4aa3:	mov	byte ptr [r14 + r15], 0x3f
0x4aa8:	lea	rax, [r15 + 1]
0x4aac:	cmp	r13, rax
0x4aaf:	jbe	0x4ab7


0x4ab7:	lea	rax, [r15 + 2]
0x4abb:	cmp	r13, rax
0x4abe:	jbe	0x4ac6


0x4ab1:	mov	byte ptr [r14 + r15 + 1], 0x22
0x4ab7:	lea	rax, [r15 + 2]
0x4abb:	cmp	r13, rax
0x4abe:	jbe	0x4ac6


0x4ac6:	lea	rax, [r15 + 3]
0x4aca:	cmp	r13, rax
0x4acd:	jbe	0x4ad5


0x4ac0:	mov	byte ptr [r14 + r15 + 2], 0x22
0x4ac6:	lea	rax, [r15 + 3]
0x4aca:	cmp	r13, rax
0x4acd:	jbe	0x4ad5


0x4ad5:	add	r15, 4
0x4ad9:	xor	edx, edx
0x4adb:	xor	r12d, r12d
0x4ade:	xor	eax, eax
0x4ae0:	mov	rbp, rcx
0x4ae3:	jmp	0x3ca8


0x4acf:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x4ad5:	add	r15, 4
0x4ad9:	xor	edx, edx
0x4adb:	xor	r12d, r12d
0x4ade:	xor	eax, eax
0x4ae0:	mov	rbp, rcx
0x4ae3:	jmp	0x3ca8


0x4280:	cmp	byte ptr [rsp + 0xf], 0
0x4285:	jne	0x4b30


0x3d7e:	mov	byte ptr [rsp + 0x7c], r12b
0x3d83:	xor	edx, edx
0x3d85:	xor	eax, eax
0x3d87:	mov	ebx, 0x27
0x3d8c:	jmp	0x3ca8


0x428b:	test	r13, r13
0x428e:	je	0x4690


0x4690:	cmp	r13, r15
0x4693:	jbe	0x469a


0x4294:	xor	edx, edx
0x4296:	cmp	qword ptr [rsp + 0x50], 0
0x429c:	jne	0x4690


0x469a:	lea	rax, [r15 + 1]
0x469e:	cmp	r13, rax
0x46a1:	jbe	0x46a9


0x4695:	mov	byte ptr [r14 + r15], 0x27
0x469a:	lea	rax, [r15 + 1]
0x469e:	cmp	r13, rax
0x46a1:	jbe	0x46a9


0x42a2:	mov	qword ptr [rsp + 0x50], r13
0x42a7:	add	r15, 3
0x42ab:	xor	eax, eax
0x42ad:	mov	byte ptr [rsp + 0x7c], r12b
0x42b2:	xor	r8d, r8d
0x42b5:	mov	r13, rdx
0x42b8:	mov	ebx, 0x27
0x42bd:	jmp	0x3cd9


0x46a9:	lea	rax, [r15 + 2]
0x46ad:	cmp	r13, rax
0x46b0:	jbe	0x4ca2


0x46a3:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x46a9:	lea	rax, [r15 + 2]
0x46ad:	cmp	r13, rax
0x46b0:	jbe	0x4ca2


0x4ca2:	mov	rdx, r13
0x4ca5:	mov	r13, qword ptr [rsp + 0x50]
0x4caa:	jmp	0x42a2


0x46b6:	mov	rdx, r13
0x46b9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x46bf:	mov	r13, qword ptr [rsp + 0x50]
0x46c4:	jmp	0x42a2


0x3db4:	cmp	byte ptr [rsp + 0xd], 0
0x3db9:	jne	0x3e20


0x3dbb:	mov	ebx, edx
0x3dbd:	xor	r12d, r12d
0x3dc0:	xor	eax, eax
0x3dc2:	cmp	byte ptr [rsp + 0xf], 0
0x3dc7:	jne	0x3cbb


0x3e20:	xor	r12d, r12d
0x3e23:	cmp	dword ptr [rsp + 8], 2
0x3e28:	sete	dl
0x3e2b:	cmp	byte ptr [rsp + 0xf], 0
0x3e30:	mov	eax, edx
0x3e32:	jne	0x4688


0x41c0:	cmp	byte ptr [rsp + 0xf], 0
0x41c5:	jne	0x4b30


0x3df3:	cmp	byte ptr [rsp + 0xd], 0
0x3df8:	je	0x4010


0x41cb:	add	rbp, 1
0x41cf:	mov	eax, r8d
0x41d2:	xor	r12d, r12d
0x41d5:	mov	ebx, 0x5c
0x41da:	jmp	0x3cec


0x4010:	mov	edx, 0x5c
0x4015:	mov	ebx, 0x5c
0x401a:	jmp	0x3db4


0x3dfe:	cmp	byte ptr [rsp + 0xf], 0
0x3e03:	je	0x4010


0x3e09:	cmp	qword ptr [rsp + 0x18], 0
0x3e0f:	jne	0x41cb


0x3e15:	mov	ebx, 0x5c
0x3e1a:	nop	word ptr [rax + rax]
0x3e20:	xor	r12d, r12d
0x3e23:	cmp	dword ptr [rsp + 8], 2
0x3e28:	sete	dl
0x3e2b:	cmp	byte ptr [rsp + 0xf], 0
0x3e30:	mov	eax, edx
0x3e32:	jne	0x4688


0x3e9b:	xor	edx, edx
0x3e9d:	test	byte ptr [rsp + 0x78], 1
0x3ea2:	je	0x3dbb


0x4063:	cmp	dword ptr [rsp + 8], 2
0x4068:	sete	dl
0x406b:	cmp	byte ptr [rsp + 0xf], 0
0x4070:	jne	0x4c0a


0x3ea8:	add	rbp, 1
0x3eac:	jmp	0x3b68


0x4076:	mov	eax, r8d
0x4079:	mov	rcx, r15
0x407c:	xor	eax, 1
0x407f:	and	al, dl
0x4081:	je	0x40b0


0x4c0a:	movzx	ebx, byte ptr [rsp + 0xf]
0x4c0f:	mov	rbp, r11
0x4c12:	mov	eax, edx
0x4c14:	mov	byte ptr [rsp + 0xd], bl
0x4c18:	jmp	0x4609


0x40b0:	cmp	r13, rcx
0x40b3:	jbe	0x40ba


0x4083:	cmp	r13, r15
0x4086:	jbe	0x408d


0x40ba:	cmp	dword ptr [rsp + 8], 2
0x40bf:	lea	r15, [rcx + 1]
0x40c3:	je	0x46c9


0x40b5:	mov	byte ptr [r14 + rcx], 0x5c
0x40ba:	cmp	dword ptr [rsp + 8], 2
0x40bf:	lea	r15, [rcx + 1]
0x40c3:	je	0x46c9


0x408d:	lea	rcx, [r15 + 1]
0x4091:	cmp	r13, rcx
0x4094:	jbe	0x409c


0x4088:	mov	byte ptr [r14 + r15], 0x27
0x408d:	lea	rcx, [r15 + 1]
0x4091:	cmp	r13, rcx
0x4094:	jbe	0x409c


0x46c9:	mov	eax, r12d
0x46cc:	mov	ebx, 0x30
0x46d1:	xor	r12d, r12d
0x46d4:	jmp	0x3cd9


0x40c9:	lea	rax, [rbp + 1]
0x40cd:	cmp	rax, r11
0x40d0:	jae	0x40eb


0x409c:	lea	rcx, [r15 + 2]
0x40a0:	cmp	r13, rcx
0x40a3:	ja	0x46d9


0x4096:	mov	byte ptr [r14 + r15 + 1], 0x24
0x409c:	lea	rcx, [r15 + 2]
0x40a0:	cmp	r13, rcx
0x40a3:	ja	0x46d9


0x40d2:	mov	rax, qword ptr [rsp + 0x10]
0x40d7:	movzx	eax, byte ptr [rax + rbp + 1]
0x40dc:	mov	byte ptr [rsp + 0x28], al
0x40e0:	sub	eax, 0x30
0x40e3:	cmp	al, 9
0x40e5:	jbe	0x4919


0x40eb:	mov	eax, r12d
0x40ee:	mov	ebx, 0x30
0x40f3:	xor	r12d, r12d
0x40f6:	jmp	0x3ca8


0x40a9:	lea	rcx, [r15 + 3]
0x40ad:	mov	r8d, eax
0x40b0:	cmp	r13, rcx
0x40b3:	jbe	0x40ba


0x46d9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x46df:	jmp	0x40a9


0x4919:	cmp	r13, r15
0x491c:	jbe	0x4923


0x4923:	lea	rax, [rcx + 2]
0x4927:	cmp	r13, rax
0x492a:	jbe	0x4932


0x491e:	mov	byte ptr [r14 + r15], 0x30
0x4923:	lea	rax, [rcx + 2]
0x4927:	cmp	r13, rax
0x492a:	jbe	0x4932


0x4932:	mov	eax, r12d
0x4935:	lea	r15, [rcx + 3]
0x4939:	xor	r12d, r12d
0x493c:	mov	ebx, 0x30
0x4941:	jmp	0x3ca8


0x492c:	mov	byte ptr [r14 + rcx + 2], 0x30
0x4932:	mov	eax, r12d
0x4935:	lea	r15, [rcx + 3]
0x4939:	xor	r12d, r12d
0x493c:	mov	ebx, 0x30
0x4941:	jmp	0x3ca8


0x3da2:	cmp	dword ptr [rsp + 8], 2
0x3da7:	sete	al
0x3daa:	and	al, byte ptr [rsp + 0xf]
0x3dae:	jne	0x3efe


0x4160:	mov	edx, 0xd
0x4165:	xor	r10d, r10d
0x4168:	mov	ebx, 0x72
0x416d:	jmp	0x3da2


0x46e4:	test	ebx, ebx
0x46e6:	jne	0x3b13


0x46ec:	mov	byte ptr [rsp + 0xd], 1
0x46f1:	test	r13, r13
0x46f4:	jne	0x4c8a


0x46fa:	lea	rax, [rip + 0x29fc]
0x4701:	mov	qword ptr [rsp + 0x50], 0
0x470a:	mov	byte ptr [rsp + 0xe], 1
0x470f:	mov	byte ptr [rsp + 0x7c], 0
0x4714:	xor	r12d, r12d
0x4717:	mov	byte ptr [rsp + 0xf], 0
0x471c:	mov	qword ptr [rsp + 0x18], 1
0x4725:	mov	qword ptr [rsp + 0x48], rax
0x472a:	mov	r15d, 1
0x4730:	mov	dword ptr [rsp + 8], 2
0x4738:	jmp	0x3b53


0x4c8a:	mov	byte ptr [rsp + 0xe], 1
0x4c8f:	xor	eax, eax
0x4c91:	xor	r12d, r12d
0x4c94:	mov	qword ptr [rsp + 0x50], 0
0x4c9d:	jmp	0x4244


0x4244:	lea	rbx, [rip + 0x2eb2]
0x424b:	mov	byte ptr [r14], 0x27
0x424f:	mov	dword ptr [rsp + 8], 2
0x4257:	mov	r15d, 1
0x425d:	mov	qword ptr [rsp + 0x18], 1
0x4266:	mov	byte ptr [rsp + 0xf], 0
0x426b:	mov	qword ptr [rsp + 0x48], rbx
0x4270:	mov	byte ptr [rsp + 0x7c], al
0x4274:	jmp	0x3b53


0x4748:	test	r13, r13
0x474b:	je	0x4976


0x4b3d:	lea	rax, [rip + 0x25b7]
0x4b44:	mov	byte ptr [rsp + 0xe], 1
0x4b49:	mov	byte ptr [rsp + 0x7c], 0
0x4b4e:	xor	r12d, r12d
0x4b51:	mov	qword ptr [rsp + 0x50], 0
0x4b5a:	mov	byte ptr [rsp + 0xf], 1
0x4b5f:	mov	byte ptr [rsp + 0xd], 1
0x4b64:	mov	qword ptr [rsp + 0x18], 1
0x4b6d:	xor	r15d, r15d
0x4b70:	mov	qword ptr [rsp + 0x48], rax
0x4b75:	jmp	0x3b53


0x4976:	mov	qword ptr [rsp + 0x50], 0
0x497f:	mov	byte ptr [rsp + 0xe], 1
0x4984:	xor	r12d, r12d
0x4987:	mov	byte ptr [rsp + 0x7c], 0
0x498c:	jmp	0x476b


0x4751:	mov	byte ptr [r14], 0x22
0x4755:	mov	byte ptr [rsp + 0xe], 1
0x475a:	xor	r12d, r12d
0x475d:	mov	byte ptr [rsp + 0x7c], 0
0x4762:	mov	qword ptr [rsp + 0x50], 0
0x476b:	lea	rax, [rip + 0x2989]
0x4772:	mov	byte ptr [rsp + 0xf], 0
0x4777:	mov	byte ptr [rsp + 0xd], 1
0x477c:	mov	qword ptr [rsp + 0x18], 1
0x4785:	mov	r15d, 1
0x478b:	mov	qword ptr [rsp + 0x48], rax
0x4790:	jmp	0x3b53


0x476b:	lea	rax, [rip + 0x2989]
0x4772:	mov	byte ptr [rsp + 0xf], 0
0x4777:	mov	byte ptr [rsp + 0xd], 1
0x477c:	mov	qword ptr [rsp + 0x18], 1
0x4785:	mov	r15d, 1
0x478b:	mov	qword ptr [rsp + 0x48], rax
0x4790:	jmp	0x3b53


0x4795:	lea	rax, [rip + 0x295f]
0x479c:	mov	byte ptr [rsp + 0xe], 1
0x47a1:	mov	byte ptr [rsp + 0x7c], 0
0x47a6:	xor	r12d, r12d
0x47a9:	mov	qword ptr [rsp + 0x50], 0
0x47b2:	mov	byte ptr [rsp + 0xf], 1
0x47b7:	mov	byte ptr [rsp + 0xd], 1
0x47bc:	mov	qword ptr [rsp + 0x18], 1
0x47c5:	xor	r15d, r15d
0x47c8:	mov	qword ptr [rsp + 0x48], rax
0x47cd:	mov	dword ptr [rsp + 8], 5
0x47d5:	jmp	0x3b53


0x47da:	mov	byte ptr [rsp + 0xe], 1
0x47df:	mov	byte ptr [rsp + 0x7c], 0
0x47e4:	xor	r12d, r12d
0x47e7:	mov	qword ptr [rsp + 0x50], 0
0x47f0:	mov	byte ptr [rsp + 0xf], 0
0x47f5:	xor	r15d, r15d
0x47f8:	mov	byte ptr [rsp + 0xd], 1
0x47fd:	mov	qword ptr [rsp + 0x18], 0
0x4806:	mov	qword ptr [rsp + 0x48], 0
0x480f:	jmp	0x3b53


0x4814:	cmp	dword ptr [rsp + 8], 0xa
0x4819:	je	0x4871


0x4871:	xor	r15d, r15d
0x4874:	test	ebx, ebx
0x4876:	je	0x4a3d


0x481b:	lea	rsi, [rip + 0x28dd]
0x4822:	xor	edi, edi
0x4824:	mov	edx, 5
0x4829:	call	0x15a0


0x4a3d:	mov	rdx, qword ptr [rsp + 0x68]
0x4a42:	movzx	eax, byte ptr [rdx]
0x4a45:	test	al, al
0x4a47:	je	0x487c


0x487c:	test	ebx, ebx
0x487e:	mov	rbx, qword ptr [rsp + 0x60]
0x4883:	setne	byte ptr [rsp + 0xf]
0x4888:	xor	r12d, r12d
0x488b:	mov	rdi, rbx
0x488e:	call	0x15c0


0x4a59:	add	r15, 1
0x4a5d:	movzx	eax, byte ptr [rdx + r15]
0x4a62:	test	al, al
0x4a64:	jne	0x4a50


0x4a55:	mov	byte ptr [r14 + r15], al
0x4a59:	add	r15, 1
0x4a5d:	movzx	eax, byte ptr [rdx + r15]
0x4a62:	test	al, al
0x4a64:	jne	0x4a50


0x4a66:	jmp	0x487c


0x4a50:	cmp	r13, r15
0x4a53:	jbe	0x4a59


0x4893:	mov	qword ptr [rsp + 0x48], rbx
0x4898:	mov	qword ptr [rsp + 0x18], rax
0x489d:	mov	byte ptr [rsp + 0xe], 1
0x48a2:	mov	byte ptr [rsp + 0x7c], 0
0x48a7:	mov	qword ptr [rsp + 0x50], 0
0x48b0:	mov	byte ptr [rsp + 0xd], 1
0x48b5:	jmp	0x3b53


0x482e:	mov	rcx, rax
0x4831:	mov	qword ptr [rsp + 0x68], rax
0x4836:	lea	rax, [rip + 0x28c2]
0x483d:	cmp	rcx, rax
0x4840:	je	0x4bde


0x4bde:	mov	esi, dword ptr [rsp + 8]
0x4be2:	mov	rdi, rcx
0x4be5:	call	0x3990


0x4846:	lea	rsi, [rip + 0x28b0]
0x484d:	xor	edi, edi
0x484f:	mov	edx, 5
0x4854:	call	0x15a0


0x4859:	mov	rcx, rax
0x485c:	mov	qword ptr [rsp + 0x60], rax
0x4861:	lea	rax, [rip + 0x2895]
0x4868:	cmp	rcx, rax
0x486b:	je	0x4bf4


0x4bf4:	mov	esi, dword ptr [rsp + 8]
0x4bf8:	mov	rdi, rcx
0x4bfb:	call	0x3990


0x4c00:	mov	qword ptr [rsp + 0x60], rax
0x4c05:	jmp	0x4871


0x4bea:	mov	qword ptr [rsp + 0x68], rax
0x4bef:	jmp	0x4846


0x48ba:	mov	byte ptr [rsp + 0xe], 1
0x48bf:	mov	byte ptr [rsp + 0x7c], 0
0x48c4:	xor	r12d, r12d
0x48c7:	mov	qword ptr [rsp + 0x50], 0
0x48d0:	mov	byte ptr [rsp + 0xf], 0
0x48d5:	xor	r15d, r15d
0x48d8:	mov	byte ptr [rsp + 0xd], 0
0x48dd:	mov	qword ptr [rsp + 0x18], 0
0x48e6:	mov	qword ptr [rsp + 0x48], 0
0x48ef:	jmp	0x3b53


0x48f4:	mov	byte ptr [rsp + 0xe], 1
0x48f9:	mov	byte ptr [rsp + 0x7c], 0
0x48fe:	xor	r12d, r12d
0x4901:	mov	qword ptr [rsp + 0x50], 0
0x490a:	mov	byte ptr [rsp + 0xf], 1
0x490f:	mov	byte ptr [rsp + 0xd], 1
0x4914:	jmp	0x3b33


0x3b33:	lea	rax, [rip + 0x35c3]
0x3b3a:	mov	qword ptr [rsp + 0x18], 1
0x3b43:	xor	r15d, r15d
0x3b46:	mov	dword ptr [rsp + 8], 2
0x3b4e:	mov	qword ptr [rsp + 0x48], rax
0x3b53:	xor	r11d, r11d
0x3b56:	mov	rax, rbp
0x3b59:	mov	r8d, r12d
0x3b5c:	mov	rbp, r11
0x3b5f:	mov	r11, rax
0x3b62:	nop	word ptr [rax + rax]
0x3b68:	cmp	r11, rbp
0x3b6b:	setne	r12b
0x3b6f:	cmp	r11, -1
0x3b73:	jne	0x3b82


0x4ae8:	test	ebx, ebx
0x4aea:	je	0x4c78


0x4c78:	mov	byte ptr [rsp + 0xd], 0
0x4c7d:	jmp	0x46f1


0x4af0:	lea	rax, [rip + 0x2606]
0x4af7:	mov	byte ptr [rsp + 0xe], 1
0x4afc:	mov	byte ptr [rsp + 0x7c], 0
0x4b01:	xor	r12d, r12d
0x4b04:	mov	qword ptr [rsp + 0x50], 0
0x4b0d:	mov	byte ptr [rsp + 0xf], 1
0x4b12:	mov	byte ptr [rsp + 0xd], 0
0x4b17:	mov	qword ptr [rsp + 0x18], 1
0x4b20:	xor	r15d, r15d
0x4b23:	mov	qword ptr [rsp + 0x48], rax
0x4b28:	jmp	0x3b53


0x46f1:	test	r13, r13
0x46f4:	jne	0x4c8a


0x4cb4:	nop	
0x4cb6:	nop	word ptr cs:[rax + rax]


0x4e6b:	nop	dword ptr [rax + rax]


0x4ea6:	nop	word ptr cs:[rax + rax]


0x4ec1:	nop	dword ptr [rax + rax]
0x4ec6:	nop	word ptr cs:[rax + rax]


0x4ee1:	nop	dword ptr [rax + rax]
0x4ee6:	nop	word ptr cs:[rax + rax]


0x4f25:	nop	
0x4f26:	nop	word ptr cs:[rax + rax]


0x4f45:	nop	
0x4f46:	nop	word ptr cs:[rax + rax]


0x4ff4:	nop	
0x4ff6:	nop	word ptr cs:[rax + rax]


0x50e3:	nop	dword ptr [rax]
0x50e6:	nop	word ptr cs:[rax + rax]


0x50fa:	nop	word ptr [rax + rax]


0x5193:	nop	dword ptr [rax]
0x5196:	nop	word ptr cs:[rax + rax]


0x51b3:	nop	dword ptr [rax]
0x51b6:	nop	word ptr cs:[rax + rax]


0x51cc:	nop	dword ptr [rax]


0x51e8:	nop	dword ptr [rax + rax]


0x5204:	nop	
0x5206:	nop	word ptr cs:[rax + rax]


0x529e:	nop	


0x532a:	nop	word ptr [rax + rax]


0x533c:	nop	dword ptr [rax]


0x534f:	nop	


0x53e8:	nop	dword ptr [rax + rax]


0x5411:	nop	dword ptr [rax + rax]
0x5416:	nop	word ptr cs:[rax + rax]


0x542a:	nop	word ptr [rax + rax]


0x54be:	nop	


0x5551:	nop	dword ptr [rax + rax]
0x5556:	nop	word ptr cs:[rax + rax]


0x556c:	nop	dword ptr [rax]


0x5587:	nop	word ptr [rax + rax]


0x55a3:	nop	dword ptr [rax]
0x55a6:	nop	word ptr cs:[rax + rax]


0x55bc:	nop	dword ptr [rax]


0x55d4:	nop	
0x55d6:	nop	word ptr cs:[rax + rax]


0x55f3:	nop	dword ptr [rax]
0x55f6:	nop	word ptr cs:[rax + rax]


0x5618:	nop	dword ptr [rax + rax]


0x567e:	nop	


0x5a97:	nop	word ptr [rax + rax]


0x5b38:	nop	dword ptr [rax + rax]


0x5c15:	nop	
0x5c16:	nop	word ptr cs:[rax + rax]


0x5cba:	nop	word ptr [rax + rax]


0x5ce4:	nop	
0x5ce6:	nop	word ptr cs:[rax + rax]


0x5cf2:	nop	dword ptr [rax]
0x5cf6:	nop	word ptr cs:[rax + rax]


0x5d36:	nop	word ptr cs:[rax + rax]


0x5d64:	nop	
0x5d66:	nop	word ptr cs:[rax + rax]


0x5df2:	nop	dword ptr [rax]
0x5df6:	nop	word ptr cs:[rax + rax]


0x5e4a:	nop	word ptr [rax + rax]


0x5e67:	nop	word ptr [rax + rax]


0x5e9e:	nop	


0x5ec8:	nop	dword ptr [rax + rax]


0x5ee3:	nop	word ptr cs:[rax + rax]
0x5eed:	nop	dword ptr [rax]


0x5f25:	nop	word ptr cs:[rax + rax]
0x5f2f:	nop	


0x6051:	nop	word ptr cs:[rax + rax]
0x605b:	nop	dword ptr [rax + rax]


0x6238:	mov	rax, rbx
0x623b:	mul	rsi
0x623e:	jo	0x6431


0x6431:	or	rax, 0xffffffffffffffff
0x6435:	mov	r8d, 1
0x643b:	jmp	0x6247


0x6244:	xor	r8d, r8d
0x6247:	mul	rsi
0x624a:	jo	0x6422


0x6247:	mul	rsi
0x624a:	jo	0x6422


0x6422:	mov	r8d, 1
0x6428:	or	rbx, 0xffffffffffffffff
0x642c:	jmp	0x6253


0x6250:	mov	rbx, rax
0x6253:	or	ebp, r8d
0x6256:	nop	word ptr cs:[rax + rax]
0x6260:	movsxd	rdi, edi
0x6263:	mov	eax, ebp
0x6265:	add	rcx, rdi
0x6268:	or	eax, 2
0x626b:	mov	qword ptr [r15], rcx
0x626e:	cmp	byte ptr [rcx], 0
0x6271:	mov	qword ptr [r14], rbx
0x6274:	cmovne	ebp, eax
0x6277:	jmp	0x613d


0x6253:	or	ebp, r8d
0x6256:	nop	word ptr cs:[rax + rax]
0x6260:	movsxd	rdi, edi
0x6263:	mov	eax, ebp
0x6265:	add	rcx, rdi
0x6268:	or	eax, 2
0x626b:	mov	qword ptr [r15], rcx
0x626e:	cmp	byte ptr [rcx], 0
0x6271:	mov	qword ptr [r14], rbx
0x6274:	cmovne	ebp, eax
0x6277:	jmp	0x613d


0x6287:	mov	edx, 2
0x628c:	mov	rax, rdx
0x628f:	mul	rbx
0x6292:	jo	0x632e


0x632e:	mov	ebp, 1
0x6333:	or	rbx, 0xffffffffffffffff
0x6337:	jmp	0x6260


0x6298:	add	rbx, rbx
0x629b:	jmp	0x6260


0x6260:	movsxd	rdi, edi
0x6263:	mov	eax, ebp
0x6265:	add	rcx, rdi
0x6268:	or	eax, 2
0x626b:	mov	qword ptr [r15], rcx
0x626e:	cmp	byte ptr [rcx], 0
0x6271:	mov	qword ptr [r14], rbx
0x6274:	cmovne	ebp, eax
0x6277:	jmp	0x613d


0x629d:	mov	edx, 0x200
0x62a2:	mov	rax, rdx
0x62a5:	mul	rbx
0x62a8:	jo	0x632e


0x62ae:	shl	rbx, 9
0x62b2:	jmp	0x6260


0x62b4:	mov	r8d, 7
0x62ba:	xor	r9d, r9d
0x62bd:	nop	dword ptr [rax]
0x62c0:	mov	rax, rbx
0x62c3:	mul	rsi
0x62c6:	mov	rbx, rax
0x62c9:	jo	0x645e


0x645e:	mov	r9d, 1
0x6464:	or	rbx, 0xffffffffffffffff
0x6468:	jmp	0x62cf


0x62cf:	sub	r8d, 1
0x62d3:	jne	0x62c0


0x62d5:	or	ebp, r9d
0x62d8:	jmp	0x6260


0x62c0:	mov	rax, rbx
0x62c3:	mul	rsi
0x62c6:	mov	rbx, rax
0x62c9:	jo	0x645e


0x62da:	mov	r8d, 8
0x62e0:	xor	r9d, r9d
0x62e3:	nop	dword ptr [rax + rax]
0x62e8:	mov	rax, rbx
0x62eb:	mul	rsi
0x62ee:	mov	rbx, rax
0x62f1:	jo	0x6440


0x6440:	mov	r9d, 1
0x6446:	or	rbx, 0xffffffffffffffff
0x644a:	jmp	0x62f7


0x62f7:	sub	r8d, 1
0x62fb:	jne	0x62e8


0x62fd:	jmp	0x62d5


0x62e8:	mov	rax, rbx
0x62eb:	mul	rsi
0x62ee:	mov	rbx, rax
0x62f1:	jo	0x6440


0x62ff:	mov	r8d, 4
0x6305:	xor	r9d, r9d
0x6308:	mov	rax, rbx
0x630b:	mul	rsi
0x630e:	mov	rbx, rax
0x6311:	jo	0x6413


0x6413:	mov	r9d, 1
0x6419:	or	rbx, 0xffffffffffffffff
0x641d:	jmp	0x6317


0x6317:	sub	r8d, 1
0x631b:	jne	0x6308


0x631d:	jmp	0x62d5


0x6308:	mov	rax, rbx
0x630b:	mul	rsi
0x630e:	mov	rbx, rax
0x6311:	jo	0x6413


0x631f:	mov	rax, rbx
0x6322:	mul	rsi
0x6325:	mov	rbx, rax
0x6328:	jno	0x6260


0x644f:	mov	r9d, 1
0x6455:	or	rbx, 0xffffffffffffffff
0x6459:	jmp	0x6358


0x6358:	sub	r8d, 1
0x635c:	jne	0x6349


0x635e:	jmp	0x62d5


0x6349:	mov	rax, rbx
0x634c:	mul	rsi
0x634f:	mov	rbx, rax
0x6352:	jo	0x644f


0x6363:	mov	r8d, 6
0x6369:	xor	r9d, r9d
0x636c:	mov	rax, rbx
0x636f:	mul	rsi
0x6372:	mov	rbx, rax
0x6375:	jo	0x6404


0x6404:	mov	r9d, 1
0x640a:	or	rbx, 0xffffffffffffffff
0x640e:	jmp	0x637b


0x637b:	sub	r8d, 1
0x637f:	jne	0x636c


0x6381:	jmp	0x62d5


0x636c:	mov	rax, rbx
0x636f:	mul	rsi
0x6372:	mov	rbx, rax
0x6375:	jo	0x6404


0x6386:	mov	edx, 0x400
0x638b:	mov	rax, rdx
0x638e:	mul	rbx
0x6391:	jo	0x632e


0x6393:	shl	rbx, 0xa
0x6397:	jmp	0x6260


0x639c:	mov	rax, rbx
0x639f:	mul	rsi
0x63a2:	jo	0x646d


0x646d:	mov	r8d, 1
0x6473:	or	rax, 0xffffffffffffffff
0x6477:	jmp	0x63ab


0x63a8:	xor	r8d, r8d
0x63ab:	mul	rsi
0x63ae:	jno	0x6247


0x63ab:	mul	rsi
0x63ae:	jno	0x6247


0x63b4:	mov	r8d, 1
0x63ba:	or	rax, 0xffffffffffffffff
0x63be:	jmp	0x6247


0x647c:	nop	dword ptr [rax]


0x6503:	nop	word ptr cs:[rax + rax]
0x650d:	nop	dword ptr [rax]


0x658d:	nop	dword ptr [rax]


0x662c:	nop	dword ptr [rax]


0x66ab:	nop	dword ptr [rax + rax]


0x6747:	nop	word ptr [rax + rax]


0x67b5:	nop	
0x67b6:	nop	word ptr cs:[rax + rax]


0x67c2:	nop	word ptr cs:[rax + rax]
0x67cc:	nop	dword ptr [rax]


0x3d40:	xor	r10d, r10d
0x3d43:	mov	eax, dword ptr [rsp + 8]
0x3d47:	cmp	eax, 2
0x3d4a:	je	0x4308


0x3d70:	xor	r10d, r10d
0x3d73:	cmp	dword ptr [rsp + 8], 2
0x3d78:	je	0x4280


0x3d98:	mov	edx, 9
0x3d9d:	mov	ebx, 0x74
0x3da2:	cmp	dword ptr [rsp + 8], 2
0x3da7:	sete	al
0x3daa:	and	al, byte ptr [rsp + 0xf]
0x3dae:	jne	0x3efe


0x3dd8:	mov	edx, 8
0x3ddd:	mov	ebx, 0x62
0x3de2:	jmp	0x3db4


0x3de8:	cmp	dword ptr [rsp + 8], 2
0x3ded:	je	0x41c0


0x3e90:	cmp	byte ptr [rsp + 0xd], 0
0x3e95:	jne	0x4063


0x3eb8:	cmp	dword ptr [rsp + 8], 2
0x3ebd:	sete	dl
0x3ec0:	xor	eax, eax
0x3ec2:	jmp	0x3ca8


0x3ed0:	mov	edx, 7
0x3ed5:	mov	ebx, 0x61
0x3eda:	jmp	0x3db4


0x3ee0:	cmp	dword ptr [rsp + 8], 2
0x3ee5:	sete	dl
0x3ee8:	test	rbp, rbp
0x3eeb:	jne	0x3c9c


0x3f10:	cmp	dword ptr [rsp + 8], 2
0x3f15:	sete	dl
0x3f18:	xor	r12d, r12d
0x3f1b:	jmp	0x3ef1


0x3f20:	cmp	dword ptr [rsp + 8], 2
0x3f25:	mov	ebx, 0x20
0x3f2a:	sete	dl
0x3f2d:	jmp	0x3ef1


0x3f30:	mov	edx, 0xd
0x3f35:	mov	ebx, 0x72
0x3f3a:	jmp	0x3da2


0x3f40:	mov	edx, 0xc
0x3f45:	mov	ebx, 0x66
0x3f4a:	jmp	0x3db4


0x3f50:	mov	edx, 0xb
0x3f55:	mov	ebx, 0x76
0x3f5a:	jmp	0x3db4


0x3f60:	mov	edx, 0xa
0x3f65:	mov	ebx, 0x6e
0x3f6a:	jmp	0x3da2


0x4000:	xor	r10d, r10d
0x4003:	cmp	byte ptr [rsp + 0xd], 0
0x4008:	jne	0x3dfe


0x4020:	mov	edx, 0xc
0x4025:	xor	r10d, r10d
0x4028:	mov	ebx, 0x66
0x402d:	jmp	0x3db4


0x4038:	mov	edx, 0xa
0x403d:	xor	r10d, r10d
0x4040:	mov	ebx, 0x6e
0x4045:	jmp	0x3da2


0x4050:	mov	ebx, 0x61
0x4055:	jmp	0x3e20


0x4060:	xor	r10d, r10d
0x4063:	cmp	dword ptr [rsp + 8], 2
0x4068:	sete	dl
0x406b:	cmp	byte ptr [rsp + 0xf], 0
0x4070:	jne	0x4c0a


0x4100:	cmp	dword ptr [rsp + 8], 2
0x4105:	mov	r12d, r10d
0x4108:	sete	dl
0x410b:	xor	r10d, r10d
0x410e:	xor	eax, eax
0x4110:	jmp	0x3ca8


0x4118:	cmp	dword ptr [rsp + 8], 2
0x411d:	sete	dl
0x4120:	xor	r10d, r10d
0x4123:	jmp	0x3ee8


0x4130:	cmp	dword ptr [rsp + 8], 2
0x4135:	sete	dl
0x4138:	xor	r10d, r10d
0x413b:	xor	r12d, r12d
0x413e:	jmp	0x3ef1


0x4148:	cmp	dword ptr [rsp + 8], 2
0x414d:	mov	r12d, r10d
0x4150:	mov	ebx, 0x20
0x4155:	sete	dl
0x4158:	xor	r10d, r10d
0x415b:	jmp	0x3ef1


0x4178:	mov	ebx, 0x76
0x417d:	jmp	0x3e20


0x4188:	mov	edx, 9
0x418d:	xor	r10d, r10d
0x4190:	mov	ebx, 0x74
0x4195:	jmp	0x3da2


0x41a0:	mov	ebx, 0x62
0x41a5:	jmp	0x3e20


0x4740:	test	ebx, ebx
0x4742:	jne	0x4b3d


0x6340:	mov	r8d, 5
0x6346:	xor	r9d, r9d
0x6349:	mov	rax, rbx
0x634c:	mul	rsi
0x634f:	mov	rbx, rax
0x6352:	jo	0x644f


0x1943:	nop	dword ptr [rax + rax]


0x1979:	nop	dword ptr [rax]


0x19be:	nop	


0x19f8:	nop	dword ptr [rax + rax]


0x1a3b:	nop	dword ptr [rax + rax]


0x1a4c:	nop	dword ptr [rax]


0x1a64:	nop	dword ptr [rax]


0x2115:	nop	dword ptr [rax]


0x29b6:	nop	word ptr cs:[rax + rax]


0x2a07:	nop	word ptr [rax + rax]


0x2a51:	nop	dword ptr [rax]


0x2aab:	nop	dword ptr [rax + rax]


0x2b1d:	nop	dword ptr [rax]


0x2c46:	nop	word ptr cs:[rax + rax]


0x2cb9:	nop	dword ptr [rax]


0x2cc7:	nop	word ptr [rax + rax]


0x2d54:	nop	dword ptr [rax]


0x2dc5:	nop	dword ptr [rax]


0x2eb1:	nop	dword ptr [rax]


0x2f2b:	nop	dword ptr [rax + rax]


0x2fb4:	nop	dword ptr [rax]


0x30ba:	nop	word ptr [rax + rax]


0x3134:	nop	dword ptr [rax]


0x3163:	nop	dword ptr [rax + rax]


0x31b6:	nop	word ptr cs:[rax + rax]


0x31c8:	nop	dword ptr [rax + rax]


0x3225:	nop	dword ptr [rax]


0x379d:	nop	dword ptr [rax]


0x37d2:	nop	word ptr [rax + rax]


0x3827:	nop	word ptr [rax + rax]


0x385a:	nop	word ptr [rax + rax]


0x39cc:	nop	dword ptr [rax]


0x3a1d:	nop	dword ptr [rax]


0x3c48:	nop	dword ptr [rax + rax]


0x3d37:	nop	word ptr [rax + rax]


0x3d6e:	nop	


0x3d91:	nop	dword ptr [rax]


0x3dd2:	nop	word ptr [rax + rax]


0x3de4:	nop	dword ptr [rax]


0x3e88:	nop	dword ptr [rax + rax]


0x3eb1:	nop	dword ptr [rax]


0x3ec7:	nop	word ptr [rax + rax]


0x3edf:	nop	


0x3f0e:	nop	


0x3f1d:	nop	dword ptr [rax]


0x3f2f:	nop	


0x3f3f:	nop	


0x3f4f:	nop	


0x3f5f:	nop	


0x3f6f:	nop	


0x3fdc:	nop	dword ptr [rax]


0x3ffc:	nop	dword ptr [rax]


0x400e:	nop	


0x401f:	nop	


0x4032:	nop	word ptr [rax + rax]


0x404a:	nop	word ptr [rax + rax]


0x405a:	nop	word ptr [rax + rax]


0x40fb:	nop	dword ptr [rax + rax]


0x4115:	nop	dword ptr [rax]


0x4128:	nop	dword ptr [rax + rax]


0x4143:	nop	dword ptr [rax + rax]


0x4172:	nop	word ptr [rax + rax]


0x4182:	nop	word ptr [rax + rax]


0x419a:	nop	word ptr [rax + rax]


0x41aa:	nop	word ptr [rax + rax]


0x41b8:	nop	dword ptr [rax + rax]


0x41df:	nop	


0x4279:	nop	dword ptr [rax]


0x42c2:	nop	word ptr [rax + rax]


0x42e8:	nop	dword ptr [rax + rax]


0x4301:	nop	dword ptr [rax]


0x4322:	nop	word ptr [rax + rax]


0x4488:	nop	dword ptr [rax + rax]


0x459b:	nop	dword ptr [rax + rax]


0x45be:	nop	


0x4685:	nop	dword ptr [rax]


0x473d:	nop	dword ptr [rax]


0x4946:	nop	word ptr cs:[rax + rax]


0x49d9:	nop	dword ptr [rax]


0x4a4d:	nop	dword ptr [rax]


0x4b2d:	nop	dword ptr [rax]


0x4e3b:	nop	dword ptr [rax + rax]


0x566f:	nop	


0x5726:	nop	word ptr cs:[rax + rax]


0x57b5:	nop	dword ptr [rax]


0x57d6:	nop	word ptr cs:[rax + rax]


0x5835:	nop	dword ptr [rax]


0x5871:	nop	dword ptr [rax]


0x58b8:	nop	dword ptr [rax + rax]


0x5907:	nop	word ptr [rax + rax]


0x5964:	nop	dword ptr [rax]


0x5992:	nop	word ptr [rax + rax]


0x5a46:	nop	word ptr cs:[rax + rax]


0x5aa9:	nop	dword ptr [rax]


0x5d22:	nop	word ptr [rax + rax]


0x5da9:	nop	dword ptr [rax]


0x5dd4:	nop	dword ptr [rax]


0x5e2d:	nop	dword ptr [rax]


0x5ff6:	nop	word ptr cs:[rax + rax]


0x601f:	nop	


0x60c6:	nop	word ptr cs:[rax + rax]


0x6123:	nop	dword ptr [rax + rax]


0x6132:	nop	word ptr [rax + rax]


0x6162:	nop	word ptr [rax + rax]


0x616c:	nop	dword ptr [rax]


0x620b:	nop	dword ptr [rax + rax]


0x633c:	nop	dword ptr [rax]


0x63c3:	nop	dword ptr [rax + rax]


0x6544:	nop	dword ptr [rax]


0x6561:	nop	dword ptr [rax]


0x6572:	nop	word ptr [rax + rax]


0x65ca:	nop	word ptr [rax + rax]


0x6616:	nop	word ptr cs:[rax + rax]


0x6675:	nop	dword ptr [rax]


0x66d3:	nop	dword ptr [rax + rax]


0x66ff:	nop	


