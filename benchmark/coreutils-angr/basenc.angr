0x7300:	sub	rsp, 8
0x7304:	add	rsp, 8
0x7308:	ret	


0x72f0:	mov	rdx, qword ptr [rip + 0x203d11]
0x72f7:	xor	esi, esi
0x72f9:	jmp	0x1840


0x72e0:	ret	


0x7270:	push	r15
0x7272:	push	r14
0x7274:	mov	r15, rdx
0x7277:	push	r13
0x7279:	push	r12
0x727b:	lea	r12, [rip + 0x20378e]
0x7282:	push	rbp
0x7283:	lea	rbp, [rip + 0x20378e]
0x728a:	push	rbx
0x728b:	mov	r13d, edi
0x728e:	mov	r14, rsi
0x7291:	sub	rbp, r12
0x7294:	sub	rsp, 8
0x7298:	sar	rbp, 3
0x729c:	call	0x1568


0x7230:	sub	rsp, 8
0x7234:	mov	edi, 0xe
0x7239:	call	0x17a0


0x71d0:	sub	rsp, 8
0x71d4:	xor	esi, esi
0x71d6:	call	0x17e0


0x7150:	push	r12
0x7152:	push	rbp
0x7153:	mov	rbp, rdi
0x7156:	push	rbx
0x7157:	call	0x15e0


0x70c0:	push	r13
0x70c2:	push	r12
0x70c4:	mov	r13, rsi
0x70c7:	push	rbp
0x70c8:	push	rbx
0x70c9:	mov	rbx, rdi
0x70cc:	mov	r12, rdx
0x70cf:	sub	rsp, 0x18
0x70d3:	mov	rax, qword ptr fs:[0x28]
0x70dc:	mov	qword ptr [rsp + 8], rax
0x70e1:	xor	eax, eax
0x70e3:	lea	rax, [rsp + 4]
0x70e8:	test	rdi, rdi
0x70eb:	cmove	rbx, rax
0x70ef:	mov	rdi, rbx
0x70f2:	call	0x1680


0x7060:	mov	rax, qword ptr [rdi + 8]
0x7064:	cmp	qword ptr [rdi + 0x10], rax
0x7068:	je	0x7070


0x7020:	test	rdi, rdi
0x7023:	push	rbx
0x7024:	mov	rbx, rdi
0x7027:	je	0x703a


0x6fa0:	push	r12
0x6fa2:	push	rbp
0x6fa3:	push	rbx
0x6fa4:	mov	rbx, rdi
0x6fa7:	call	0x1770


0x6b80:	push	r15
0x6b82:	push	r14
0x6b84:	push	r13
0x6b86:	push	r12
0x6b88:	push	rbp
0x6b89:	push	rbx
0x6b8a:	sub	rsp, 0x28
0x6b8e:	mov	rax, qword ptr fs:[0x28]
0x6b97:	mov	qword ptr [rsp + 0x18], rax
0x6b9c:	xor	eax, eax
0x6b9e:	cmp	edx, 0x24
0x6ba1:	ja	0x6f05


0x6b50:	sub	rsp, 0x10
0x6b54:	push	r9
0x6b56:	mov	r9, r8
0x6b59:	mov	r8, rcx
0x6b5c:	mov	rcx, rdx
0x6b5f:	mov	rdx, rsi
0x6b62:	mov	esi, 0xa
0x6b67:	call	0x6a50


0x6a50:	push	r15
0x6a52:	push	r14
0x6a54:	mov	r15, rcx
0x6a57:	push	r13
0x6a59:	push	r12
0x6a5b:	mov	r14, rdx
0x6a5e:	push	rbp
0x6a5f:	push	rbx
0x6a60:	mov	edx, esi
0x6a62:	xor	esi, esi
0x6a64:	mov	r12, rdi
0x6a67:	mov	r13, r9
0x6a6a:	sub	rsp, 0x18
0x6a6e:	mov	rcx, rsp
0x6a71:	mov	ebx, dword ptr [rsp + 0x50]
0x6a75:	mov	rax, qword ptr fs:[0x28]
0x6a7e:	mov	qword ptr [rsp + 8], rax
0x6a83:	xor	eax, eax
0x6a85:	call	0x6b80


0x6a10:	lea	rsi, [rip + 0x1eb8]
0x6a17:	sub	rsp, 8
0x6a1b:	mov	edx, 5
0x6a20:	xor	edi, edi
0x6a22:	call	0x1630


0x69f0:	push	rbx
0x69f1:	mov	rbx, rdi
0x69f4:	call	0x1650


0x69c0:	push	rbp
0x69c1:	push	rbx
0x69c2:	mov	rbp, rdi
0x69c5:	mov	rdi, rsi
0x69c8:	mov	rbx, rsi
0x69cb:	sub	rsp, 8
0x69cf:	call	0x67c0


0x6990:	mov	rax, rdi
0x6993:	sub	rsp, 8
0x6997:	mul	rsi
0x699a:	seto	dl
0x699d:	test	rax, rax
0x69a0:	js	0x69b9


0x6970:	push	rbx
0x6971:	mov	rbx, rdi
0x6974:	call	0x67c0


0x6920:	test	rdi, rdi
0x6923:	mov	rax, qword ptr [rsi]
0x6926:	je	0x6950


0x6890:	test	rdi, rdi
0x6893:	mov	r9, rdx
0x6896:	mov	rcx, qword ptr [rsi]
0x6899:	je	0x68d0


0x6860:	mov	rax, rsi
0x6863:	mul	rdx
0x6866:	mov	rsi, rax
0x6869:	seto	al
0x686c:	test	rsi, rsi
0x686f:	js	0x687b


0x6820:	test	rsi, rsi
0x6823:	push	rbx
0x6824:	mov	rbx, rsi
0x6827:	jne	0x682e


0x6810:	jmp	0x67c0


0x67e0:	mov	rax, rdi
0x67e3:	mul	rsi
0x67e6:	mov	rdi, rax
0x67e9:	seto	al
0x67ec:	test	rdi, rdi
0x67ef:	js	0x67fb


0x67c0:	push	rbx
0x67c1:	mov	rbx, rdi
0x67c4:	call	0x1780


0x6740:	push	rbx
0x6741:	lea	rsi, [rip + 0x1e7a]
0x6748:	mov	edx, 5
0x674d:	xor	edi, edi
0x674f:	call	0x1630


0x6660:	push	rbp
0x6661:	push	rbx
0x6662:	mov	r10d, 0x20
0x6668:	xor	r11d, r11d
0x666b:	sub	rsp, 0xb8
0x6672:	mov	rax, qword ptr fs:[0x28]
0x667b:	mov	qword ptr [rsp + 0x78], rax
0x6680:	xor	eax, eax
0x6682:	lea	rax, [rsp + 0xd0]
0x668a:	mov	qword ptr [rsp + 0xa0], r8
0x6692:	lea	rbx, [rsp + 0xd0]
0x669a:	lea	r8, [rsp + 0x20]
0x669f:	mov	qword ptr [rsp + 0xa8], r9
0x66a7:	mov	dword ptr [rsp + 8], 0x20
0x66af:	mov	qword ptr [rsp + 0x10], rax
0x66b4:	lea	rax, [rsp + 0x80]
0x66bc:	xor	r9d, r9d
0x66bf:	mov	qword ptr [rsp + 0x18], rax
0x66c4:	mov	rbp, rax
0x66c7:	nop	word ptr [rax + rax]
0x66d0:	cmp	r10d, 0x2f
0x66d4:	ja	0x672c


0x65e0:	sub	rsp, 0x68
0x65e4:	mov	r10, r8
0x65e7:	xor	r9d, r9d
0x65ea:	mov	rax, qword ptr fs:[0x28]
0x65f3:	mov	qword ptr [rsp + 0x58], rax
0x65f8:	xor	eax, eax
0x65fa:	mov	r8, rsp
0x65fd:	nop	dword ptr [rax]
0x6600:	mov	eax, dword ptr [r10]
0x6603:	cmp	eax, 0x2f
0x6606:	ja	0x664a


0x65c0:	xor	r9d, r9d
0x65c3:	cmp	qword ptr [r8], 0
0x65c7:	je	0x65db


0x61a0:	push	r15
0x61a2:	push	r14
0x61a4:	push	r13
0x61a6:	push	r12
0x61a8:	mov	r12, r9
0x61ab:	push	rbp
0x61ac:	push	rbx
0x61ad:	mov	rbp, rdi
0x61b0:	mov	rbx, r8
0x61b3:	sub	rsp, 0x28
0x61b7:	test	rsi, rsi
0x61ba:	je	0x62d8


0x6180:	lea	rcx, [rip + 0x204e99]
0x6187:	mov	rsi, rdi
0x618a:	mov	rdx, -1
0x6191:	xor	edi, edi
0x6193:	jmp	0x5840


0x6160:	lea	rcx, [rip + 0x204eb9]
0x6167:	mov	rdx, -1
0x616e:	jmp	0x5840


0x6140:	lea	rcx, [rip + 0x204ed9]
0x6147:	mov	rdx, rsi
0x614a:	mov	rsi, rdi
0x614d:	xor	edi, edi
0x614f:	jmp	0x5840


0x6130:	lea	rcx, [rip + 0x204ee9]
0x6137:	jmp	0x5840


0x6110:	mov	r8, rcx
0x6113:	mov	rcx, rdx
0x6116:	mov	rdx, rsi
0x6119:	mov	rsi, rdi
0x611c:	xor	edi, edi
0x611e:	jmp	0x6040


0x60f0:	mov	rcx, rdx
0x60f3:	mov	r8, -1
0x60fa:	mov	rdx, rsi
0x60fd:	mov	rsi, rdi
0x6100:	xor	edi, edi
0x6102:	jmp	0x6040


0x60e0:	mov	r8, -1
0x60e7:	jmp	0x6040


0x6040:	sub	rsp, 0x48
0x6044:	mov	r9, rcx
0x6047:	mov	rcx, qword ptr [rip + 0x205202]
0x604e:	movdqa	xmm0, xmmword ptr [rip + 0x2051ca]
0x6056:	mov	rax, qword ptr fs:[0x28]
0x605f:	mov	qword ptr [rsp + 0x38], rax
0x6064:	xor	eax, eax
0x6066:	movaps	xmmword ptr [rsp], xmm0
0x606a:	test	rsi, rsi
0x606d:	mov	qword ptr [rsp + 0x30], rcx
0x6072:	mov	dword ptr [rsp], 0xa
0x6079:	movdqa	xmm0, xmmword ptr [rip + 0x2051af]
0x6081:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x6086:	movdqa	xmm0, xmmword ptr [rip + 0x2051b2]
0x608e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x6093:	je	0x60c7


0x5fb0:	sub	rsp, 0x48
0x5fb4:	mov	rax, rdx
0x5fb7:	mov	rdx, qword ptr fs:[0x28]
0x5fc0:	mov	qword ptr [rsp + 0x38], rdx
0x5fc5:	xor	edx, edx
0x5fc7:	cmp	esi, 0xa
0x5fca:	je	0x6034


0x5fa0:	mov	edx, 0x3a
0x5fa5:	jmp	0x5ed0


0x5f80:	mov	edx, 0x3a
0x5f85:	mov	rsi, -1
0x5f8c:	jmp	0x5ed0


0x5f70:	movsx	edx, sil
0x5f74:	mov	rsi, -1
0x5f7b:	jmp	0x5ed0


0x5ed0:	sub	rsp, 0x48
0x5ed4:	mov	ecx, edx
0x5ed6:	mov	rax, qword ptr fs:[0x28]
0x5edf:	mov	qword ptr [rsp + 0x38], rax
0x5ee4:	xor	eax, eax
0x5ee6:	mov	rax, qword ptr [rip + 0x205363]
0x5eed:	mov	r8, rsp
0x5ef0:	and	ecx, 0x1f
0x5ef3:	movdqa	xmm0, xmmword ptr [rip + 0x205325]
0x5efb:	mov	qword ptr [rsp + 0x30], rax
0x5f00:	mov	eax, edx
0x5f02:	movaps	xmmword ptr [rsp], xmm0
0x5f06:	shr	al, 5
0x5f09:	movzx	eax, al
0x5f0c:	lea	r9, [r8 + rax*4 + 8]
0x5f11:	movdqa	xmm0, xmmword ptr [rip + 0x205317]
0x5f19:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x5f1e:	movdqa	xmm0, xmmword ptr [rip + 0x20531a]
0x5f26:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x5f2b:	mov	edx, dword ptr [r9]
0x5f2e:	mov	eax, edx
0x5f30:	shr	eax, cl
0x5f32:	not	eax
0x5f34:	and	eax, 1
0x5f37:	shl	eax, cl
0x5f39:	mov	rcx, r8
0x5f3c:	xor	eax, edx
0x5f3e:	mov	rdx, rsi
0x5f41:	mov	rsi, rdi
0x5f44:	mov	dword ptr [r9], eax
0x5f47:	xor	edi, edi
0x5f49:	call	0x5840


0x5ec0:	mov	rcx, rdx
0x5ec3:	mov	rdx, rsi
0x5ec6:	mov	esi, edi
0x5ec8:	xor	edi, edi
0x5eca:	jmp	0x5e20


0x5eb0:	mov	rdx, rsi
0x5eb3:	mov	esi, edi
0x5eb5:	xor	edi, edi
0x5eb7:	jmp	0x5d90


0x5e20:	sub	rsp, 0x48
0x5e24:	mov	rax, rdx
0x5e27:	mov	rdx, rcx
0x5e2a:	mov	rcx, qword ptr fs:[0x28]
0x5e33:	mov	qword ptr [rsp + 0x38], rcx
0x5e38:	xor	ecx, ecx
0x5e3a:	cmp	esi, 0xa
0x5e3d:	je	0x5ea0


0x5d90:	sub	rsp, 0x48
0x5d94:	mov	rax, rdx
0x5d97:	mov	rdx, qword ptr fs:[0x28]
0x5da0:	mov	qword ptr [rsp + 0x38], rdx
0x5da5:	xor	edx, edx
0x5da7:	cmp	esi, 0xa
0x5daa:	je	0x5e14


0x5d70:	lea	rcx, [rip + 0x2054a9]
0x5d77:	mov	rdx, rsi
0x5d7a:	mov	rsi, rdi
0x5d7d:	xor	edi, edi
0x5d7f:	jmp	0x5840


0x5d50:	lea	rcx, [rip + 0x2054c9]
0x5d57:	mov	rsi, rdi
0x5d5a:	mov	rdx, -1
0x5d61:	xor	edi, edi
0x5d63:	jmp	0x5840


0x5d40:	lea	rcx, [rip + 0x2054d9]
0x5d47:	jmp	0x5840


0x5d20:	lea	rcx, [rip + 0x2054f9]
0x5d27:	mov	rdx, -1
0x5d2e:	jmp	0x5840


0x5c80:	mov	eax, dword ptr [rip + 0x2053d2]
0x5c86:	push	r12
0x5c88:	mov	r12, qword ptr [rip + 0x2053d1]
0x5c8f:	push	rbp
0x5c90:	push	rbx
0x5c91:	cmp	eax, 1
0x5c94:	jle	0x5cc1


0x5c70:	mov	rcx, rdx
0x5c73:	xor	edx, edx
0x5c75:	jmp	0x5b80


0x5b80:	push	r15
0x5b82:	push	r14
0x5b84:	lea	rax, [rip + 0x205695]
0x5b8b:	push	r13
0x5b8d:	push	r12
0x5b8f:	mov	r12, rdx
0x5b92:	push	rbp
0x5b93:	push	rbx
0x5b94:	mov	rbx, rcx
0x5b97:	mov	r14, rdi
0x5b9a:	mov	r15, rsi
0x5b9d:	sub	rsp, 0x38
0x5ba1:	test	rcx, rcx
0x5ba4:	cmove	rbx, rax
0x5ba8:	xor	ebp, ebp
0x5baa:	call	0x15b0


0x5b00:	push	r15
0x5b02:	push	r14
0x5b04:	lea	rax, [rip + 0x205715]
0x5b0b:	push	r13
0x5b0d:	push	r12
0x5b0f:	mov	r13, rdi
0x5b12:	push	rbp
0x5b13:	push	rbx
0x5b14:	mov	rbx, r8
0x5b17:	mov	r14, rsi
0x5b1a:	mov	r15, rdx
0x5b1d:	sub	rsp, 0x18
0x5b21:	test	r8, r8
0x5b24:	cmove	rbx, rax
0x5b28:	mov	qword ptr [rsp + 8], rcx
0x5b2d:	call	0x15b0


0x5ad0:	lea	rax, [rip + 0x205749]
0x5ad7:	test	rdi, rdi
0x5ada:	cmove	rdi, rax
0x5ade:	test	rsi, rsi
0x5ae1:	mov	dword ptr [rdi], 0xa
0x5ae7:	je	0x5af7


0x5ab0:	lea	rax, [rip + 0x205769]
0x5ab7:	test	rdi, rdi
0x5aba:	cmove	rdi, rax
0x5abe:	mov	eax, dword ptr [rdi + 4]
0x5ac1:	mov	dword ptr [rdi + 4], esi
0x5ac4:	ret	


0x5a70:	lea	rax, [rip + 0x2057a9]
0x5a77:	test	rdi, rdi
0x5a7a:	mov	ecx, esi
0x5a7c:	cmove	rdi, rax
0x5a80:	mov	eax, esi
0x5a82:	and	ecx, 0x1f
0x5a85:	shr	al, 5
0x5a88:	movzx	eax, al
0x5a8b:	lea	rdi, [rdi + rax*4 + 8]
0x5a90:	mov	esi, dword ptr [rdi]
0x5a92:	mov	eax, esi
0x5a94:	shr	eax, cl
0x5a96:	xor	edx, eax
0x5a98:	and	eax, 1
0x5a9b:	and	edx, 1
0x5a9e:	shl	edx, cl
0x5aa0:	xor	edx, esi
0x5aa2:	mov	dword ptr [rdi], edx
0x5aa4:	ret	


0x5a50:	lea	rax, [rip + 0x2057c9]
0x5a57:	test	rdi, rdi
0x5a5a:	cmove	rdi, rax
0x5a5e:	mov	dword ptr [rdi], esi
0x5a60:	ret	


0x5a30:	lea	rax, [rip + 0x2057e9]
0x5a37:	test	rdi, rdi
0x5a3a:	cmove	rdi, rax
0x5a3e:	mov	eax, dword ptr [rdi]
0x5a40:	ret	


0x59f0:	push	r12
0x59f2:	push	rbp
0x59f3:	push	rbx
0x59f4:	mov	rbx, rdi
0x59f7:	call	0x15b0


0x5840:	push	r15
0x5842:	push	r14
0x5844:	movsxd	r15, edi
0x5847:	push	r13
0x5849:	push	r12
0x584b:	mov	r14, rdx
0x584e:	push	rbp
0x584f:	push	rbx
0x5850:	mov	rbp, rcx
0x5853:	sub	rsp, 0x28
0x5857:	mov	qword ptr [rsp + 8], rsi
0x585c:	call	0x15b0


0x4600:	push	r15
0x4602:	push	r14
0x4604:	mov	r15d, r8d
0x4607:	push	r13
0x4609:	push	r12
0x460b:	mov	r14, rdi
0x460e:	push	rbp
0x460f:	push	rbx
0x4610:	mov	ebx, r9d
0x4613:	mov	r13, rsi
0x4616:	mov	rbp, rcx
0x4619:	and	ebx, 2
0x461c:	sub	rsp, 0xb8
0x4623:	mov	rax, qword ptr [rsp + 0xf0]
0x462b:	mov	qword ptr [rsp + 0x10], rdx
0x4630:	mov	dword ptr [rsp + 8], r8d
0x4635:	mov	dword ptr [rsp + 0x78], r9d
0x463a:	mov	qword ptr [rsp + 0x20], rax
0x463f:	mov	rax, qword ptr [rsp + 0xf8]
0x4647:	mov	qword ptr [rsp + 0x68], rax
0x464c:	mov	rax, qword ptr [rsp + 0x100]
0x4654:	mov	qword ptr [rsp + 0x60], rax
0x4659:	mov	rax, qword ptr fs:[0x28]
0x4662:	mov	qword ptr [rsp + 0xa8], rax
0x466a:	xor	eax, eax
0x466c:	call	0x1640


0x4510:	push	rbp
0x4511:	push	rbx
0x4512:	mov	rbp, rdi
0x4515:	mov	ebx, esi
0x4517:	sub	rsp, 8
0x451b:	call	0x7230


0x4470:	test	rdi, rdi
0x4473:	push	rbx
0x4474:	je	0x44ed


0x4440:	test	rdi, rdi
0x4443:	je	0x4460


0x4430:	jmp	0x1700


0x4380:	push	rbp
0x4381:	push	rbx
0x4382:	sub	rsp, 8
0x4386:	mov	rdi, qword ptr [rip + 0x206cfb]
0x438d:	call	0x7150


0x4370:	mov	byte ptr [rip + 0x206d81], dil
0x4377:	ret	


0x4360:	mov	qword ptr [rip + 0x206d99], rdi
0x4367:	ret	


0x42a0:	push	r14
0x42a2:	push	r13
0x42a4:	mov	r14, rdx
0x42a7:	push	r12
0x42a9:	push	rbp
0x42aa:	mov	r12, rdi
0x42ad:	push	rbx
0x42ae:	mov	r13, rsi
0x42b1:	mov	rbx, rcx
0x42b4:	mov	rbp, r8
0x42b7:	sub	rsp, 0x20
0x42bb:	mov	rax, qword ptr fs:[0x28]
0x42c4:	mov	qword ptr [rsp + 0x18], rax
0x42c9:	xor	eax, eax
0x42cb:	mov	rax, rdx
0x42ce:	shr	rax, 2
0x42d2:	lea	rdi, [rax + rax*2 + 3]
0x42d7:	mov	qword ptr [rsp + 0x10], rdi
0x42dc:	call	0x1780


0x3ff0:	push	r15
0x3ff2:	push	r14
0x3ff4:	mov	r14, rdi
0x3ff7:	push	r13
0x3ff9:	push	r12
0x3ffb:	mov	r13, rdx
0x3ffe:	push	rbp
0x3fff:	push	rbx
0x4000:	mov	r12, rsi
0x4003:	sub	rsp, 0x38
0x4007:	mov	r15, qword ptr [r8]
0x400a:	mov	rbx, qword ptr fs:[0x28]
0x4013:	mov	qword ptr [rsp + 0x28], rbx
0x4018:	xor	ebx, ebx
0x401a:	test	rdi, rdi
0x401d:	mov	qword ptr [rsp + 0x18], rcx
0x4022:	mov	qword ptr [rsp + 0x10], r8
0x4027:	mov	qword ptr [rsp + 0x20], r15
0x402c:	setne	byte ptr [rsp + 7]
0x4031:	je	0x4260


0x3fe0:	mov	dword ptr [rdi], 0
0x3fe6:	ret	


0x3fc0:	lea	rax, [rip + 0x3f39]
0x3fc7:	movzx	edi, dil
0x3fcb:	movzx	eax, byte ptr [rax + rdi]
0x3fcf:	not	eax
0x3fd1:	shr	al, 7
0x3fd4:	ret	


0x3f30:	push	r14
0x3f32:	push	r13
0x3f34:	mov	r13, rdx
0x3f37:	lea	rdx, [rsi + 2]
0x3f3b:	push	r12
0x3f3d:	push	rbp
0x3f3e:	push	rbx
0x3f3f:	movabs	rbx, 0xaaaaaaaaaaaaaaab
0x3f49:	mov	rax, rdx
0x3f4c:	mul	rbx
0x3f4f:	shr	rdx, 1
0x3f52:	lea	rbx, [rdx*4]
0x3f5a:	lea	rbp, [rbx + 1]
0x3f5e:	cmp	rsi, rbp
0x3f61:	jbe	0x3f80


0x3d70:	test	cl, 3
0x3d73:	jne	0x3d89


0x3c60:	xor	eax, eax
0x3c62:	cmp	rsi, 1
0x3c66:	jbe	0x3cf9


0x3ba0:	push	r14
0x3ba2:	push	r13
0x3ba4:	mov	r14, rdx
0x3ba7:	push	r12
0x3ba9:	push	rbp
0x3baa:	mov	r12, rdi
0x3bad:	push	rbx
0x3bae:	mov	r13, rsi
0x3bb1:	mov	rbx, rcx
0x3bb4:	mov	rbp, r8
0x3bb7:	sub	rsp, 0x20
0x3bbb:	mov	rax, qword ptr fs:[0x28]
0x3bc4:	mov	qword ptr [rsp + 0x18], rax
0x3bc9:	xor	eax, eax
0x3bcb:	mov	rax, rdx
0x3bce:	shr	rax, 3
0x3bd2:	lea	rdi, [rax + rax*4 + 5]
0x3bd7:	mov	qword ptr [rsp + 0x10], rdi
0x3bdc:	call	0x1780


0x38f0:	push	r15
0x38f2:	push	r14
0x38f4:	mov	r11, rdx
0x38f7:	push	r13
0x38f9:	push	r12
0x38fb:	mov	r14, rdi
0x38fe:	push	rbp
0x38ff:	push	rbx
0x3900:	mov	r12, rsi
0x3903:	sub	rsp, 0x38
0x3907:	mov	r15, qword ptr [r8]
0x390a:	mov	rbx, qword ptr fs:[0x28]
0x3913:	mov	qword ptr [rsp + 0x28], rbx
0x3918:	xor	ebx, ebx
0x391a:	test	rdi, rdi
0x391d:	mov	qword ptr [rsp + 0x18], rcx
0x3922:	mov	qword ptr [rsp + 0x10], r8
0x3927:	mov	qword ptr [rsp + 0x20], r15
0x392c:	setne	byte ptr [rsp + 7]
0x3931:	je	0x3b60


0x38e0:	mov	dword ptr [rdi], 0
0x38e6:	ret	


0x38c0:	lea	rax, [rip + 0x4539]
0x38c7:	movzx	edi, dil
0x38cb:	movzx	eax, byte ptr [rax + rdi]
0x38cf:	not	eax
0x38d1:	shr	al, 7
0x38d4:	ret	


0x3830:	push	r14
0x3832:	push	r13
0x3834:	mov	r13, rdx
0x3837:	lea	rdx, [rsi + 4]
0x383b:	push	r12
0x383d:	push	rbp
0x383e:	push	rbx
0x383f:	movabs	rbx, 0xcccccccccccccccd
0x3849:	mov	rax, rdx
0x384c:	mul	rbx
0x384f:	shr	rdx, 2
0x3853:	lea	rbx, [rdx*8]
0x385b:	lea	rbp, [rbx + 1]
0x385f:	cmp	rsi, rbp
0x3862:	jbe	0x3880


0x3610:	lea	r8, [rip + 0x47c9]
0x3617:	jmp	0x373b


0x3460:	xor	eax, eax
0x3462:	cmp	rsi, 7
0x3466:	jbe	0x35d8


0x2f60:	push	r13
0x2f62:	push	r12
0x2f64:	mov	edx, 5
0x2f69:	push	rbp
0x2f6a:	push	rbx
0x2f6b:	mov	ebp, edi
0x2f6d:	sub	rsp, 0x88
0x2f74:	mov	rbx, qword ptr [rip + 0x20818d]
0x2f7b:	mov	rax, qword ptr fs:[0x28]
0x2f84:	mov	qword ptr [rsp + 0x78], rax
0x2f89:	xor	eax, eax
0x2f8b:	test	edi, edi
0x2f8d:	je	0x2fbd


0x2e80:	push	rbp
0x2e81:	push	rbx
0x2e82:	mov	rbp, rsi
0x2e85:	mov	rbx, rdi
0x2e88:	sub	rsp, 0x28
0x2e8c:	cmp	rdx, qword ptr [rdi + 0x18]
0x2e90:	mov	rax, qword ptr [rdi + 0x10]
0x2e94:	ja	0x2f10


0x2d90:	push	r14
0x2d92:	push	r13
0x2d94:	mov	r14, rsi
0x2d97:	push	r12
0x2d99:	push	rbp
0x2d9a:	mov	r13, rdx
0x2d9d:	push	rbx
0x2d9e:	mov	rbx, rdi
0x2da1:	mov	rbp, rcx
0x2da4:	cmp	rdx, qword ptr [rbx + 0x18]
0x2da8:	mov	r12, r8
0x2dab:	mov	rdi, qword ptr [rdi + 0x10]
0x2daf:	ja	0x2e50


0x2d10:	push	rbp
0x2d11:	push	rbx
0x2d12:	mov	rbp, rcx
0x2d15:	mov	rbx, rdx
0x2d18:	sub	rsp, 8
0x2d1c:	call	0x3610


0x2bd0:	push	r13
0x2bd2:	push	r12
0x2bd4:	push	rbp
0x2bd5:	push	rbx
0x2bd6:	sub	rsp, 0x18
0x2bda:	mov	rax, qword ptr fs:[0x28]
0x2be3:	mov	qword ptr [rsp + 8], rax
0x2be8:	xor	eax, eax
0x2bea:	test	rsi, rsi
0x2bed:	je	0x2cc4


0x2b20:	test	rdx, rdx
0x2b23:	mov	r10, rcx
0x2b26:	mov	qword ptr [r8], 0
0x2b2d:	je	0x2bb8


0x2a90:	test	rdx, rdx
0x2a93:	mov	r10, rcx
0x2a96:	mov	qword ptr [r8], 0
0x2a9d:	je	0x2b08


0x2970:	test	rdx, rdx
0x2973:	mov	qword ptr [r8], 0
0x297a:	jne	0x2988


0x28c0:	test	rdx, rdx
0x28c3:	mov	qword ptr [r8], 0
0x28ca:	je	0x2940


0x28b0:	add	rdi, 4
0x28b4:	jmp	0x3fe0


0x2880:	push	rbx
0x2881:	mov	rbx, rdi
0x2884:	lea	rdi, [rdi + 4]
0x2888:	call	0x3fe0


0x2860:	push	rbx
0x2861:	mov	rbx, rdi
0x2864:	lea	rdi, [rdi + 4]
0x2868:	call	0x3ff0


0x2850:	add	rdi, 4
0x2854:	jmp	0x38e0


0x2820:	push	rbx
0x2821:	mov	rbx, rdi
0x2824:	lea	rdi, [rdi + 4]
0x2828:	call	0x38e0


0x2800:	push	rbx
0x2801:	mov	rbx, rdi
0x2804:	lea	rdi, [rdi + 4]
0x2808:	call	0x38f0


0x27b0:	cmp	dil, 0x5a
0x27b4:	jg	0x27e8


0x2780:	push	rbx
0x2781:	mov	rbx, rdi
0x2784:	mov	qword ptr [rdi + 0x18], 0x1400
0x278c:	mov	edi, 0x1400
0x2791:	call	0x67c0


0x2750:	push	rbx
0x2751:	mov	rbx, rdi
0x2754:	mov	qword ptr [rdi + 0x18], 0x1400
0x275c:	mov	edi, 0x1400
0x2761:	call	0x67c0


0x2720:	push	rbx
0x2721:	mov	rbx, rdi
0x2724:	mov	qword ptr [rdi + 0x18], 0x1400
0x272c:	mov	edi, 0x1400
0x2731:	call	0x67c0


0x26d0:	push	rbp
0x26d1:	push	rbx
0x26d2:	mov	rbp, rcx
0x26d5:	mov	rbx, rdx
0x26d8:	sub	rsp, 8
0x26dc:	call	0x3d70


0x26a0:	cmp	dil, 0x2d
0x26a4:	sete	al
0x26a7:	cmp	dil, 0x5f
0x26ab:	sete	dl
0x26ae:	or	al, dl
0x26b0:	jne	0x26c8


0x2650:	test	rsi, rsi
0x2653:	je	0x2692


0x2600:	test	rsi, rsi
0x2603:	je	0x2642


0x25f0:	lea	eax, [rdi*8]
0x25f7:	ret	


0x25e0:	sub	edi, 0x30
0x25e3:	cmp	dil, 1
0x25e7:	setbe	al
0x25ea:	ret	


0x25d0:	lea	edx, [rdi + rdi*4]
0x25d3:	lea	eax, [rdx + 3]
0x25d6:	test	edx, edx
0x25d8:	cmovns	eax, edx
0x25db:	sar	eax, 2
0x25de:	ret	


0x2590:	test	rsi, rsi
0x2593:	je	0x25cb


0x2580:	lea	eax, [rdi + rdi]
0x2583:	ret	


0x2560:	lea	eax, [rdi - 0x30]
0x2563:	cmp	al, 9
0x2565:	setbe	al
0x2568:	sub	edi, 0x41
0x256b:	cmp	dil, 5
0x256f:	setbe	dl
0x2572:	or	eax, edx
0x2574:	ret	


0x2540:	lea	eax, [rdi - 0x30]
0x2543:	cmp	al, 9
0x2545:	setbe	al
0x2548:	sub	edi, 0x41
0x254b:	cmp	dil, 0x15
0x254f:	setbe	dl
0x2552:	or	eax, edx
0x2554:	ret	


0x2520:	add	edi, 4
0x2523:	mov	edx, 0x66666667
0x2528:	mov	eax, edi
0x252a:	sar	edi, 0x1f
0x252d:	imul	edx
0x252f:	sar	edx, 1
0x2531:	sub	edx, edi
0x2533:	lea	eax, [rdx*8]
0x253a:	ret	


0x2500:	add	edi, 2
0x2503:	mov	edx, 0x55555556
0x2508:	mov	eax, edi
0x250a:	sar	edi, 0x1f
0x250d:	imul	edx
0x250f:	sub	edx, edi
0x2511:	lea	eax, [rdx*4]
0x2518:	ret	


0x24f0:	push	rbp
0x24f1:	mov	rbp, rsp
0x24f4:	pop	rbp
0x24f5:	jmp	0x2460


0x24b0:	cmp	byte ptr [rip + 0x208c11], 0
0x24b7:	jne	0x24e8


0x2460:	lea	rdi, [rip + 0x208c19]
0x2467:	lea	rsi, [rip + 0x208c12]
0x246e:	push	rbp
0x246f:	sub	rsi, rdi
0x2472:	mov	rbp, rsp
0x2475:	sar	rsi, 3
0x2479:	mov	rax, rsi
0x247c:	shr	rax, 0x3f
0x2480:	add	rsi, rax
0x2483:	sar	rsi, 1
0x2486:	je	0x24a0


0x2420:	lea	rdi, [rip + 0x208c59]
0x2427:	push	rbp
0x2428:	lea	rax, [rip + 0x208c51]
0x242f:	cmp	rax, rdi
0x2432:	mov	rbp, rsp
0x2435:	je	0x2450


0x23f0:	xor	ebp, ebp
0x23f2:	mov	r9, rdx
0x23f5:	pop	rsi
0x23f6:	mov	rdx, rsp
0x23f9:	and	rsp, 0xfffffffffffffff0
0x23fd:	push	rax
0x23fe:	push	rsp
0x23ff:	lea	r8, [rip + 0x4eda]
0x2406:	lea	rcx, [rip + 0x4e63]
0x240d:	lea	rdi, [rip - 0xb54]
0x2414:	call	qword ptr [rip + 0x208bbe]


0x18c0:	push	r15
0x18c2:	push	r14
0x18c4:	xor	r14d, r14d
0x18c7:	push	r13
0x18c9:	push	r12
0x18cb:	mov	r13d, 0x4c
0x18d1:	push	rbp
0x18d2:	push	rbx
0x18d3:	mov	ebp, edi
0x18d5:	mov	rbx, rsi
0x18d8:	xor	r12d, r12d
0x18db:	sub	rsp, 0x88
0x18e2:	mov	rdi, qword ptr [rsi]
0x18e5:	mov	rax, qword ptr fs:[0x28]
0x18ee:	mov	qword ptr [rsp + 0x78], rax
0x18f3:	xor	eax, eax
0x18f5:	call	0x4470


0x1568:	sub	rsp, 8
0x156c:	mov	rax, qword ptr [rip + 0x209a6d]
0x1573:	test	rax, rax
0x1576:	je	0x157a


0x1840:	jmp	qword ptr [rip + 0x209752]


0x17a0:	jmp	qword ptr [rip + 0x2097a2]


0x17e0:	jmp	qword ptr [rip + 0x209782]


0x15e0:	jmp	qword ptr [rip + 0x209882]


0x1680:	jmp	qword ptr [rip + 0x209832]


0x7070:	mov	rax, qword ptr [rdi + 0x20]
0x7074:	cmp	qword ptr [rdi + 0x28], rax
0x7078:	jne	0x706a


0x706a:	jmp	0x1820


0x703a:	mov	rdi, rbx
0x703d:	pop	rbx
0x703e:	jmp	0x1790


0x7029:	call	0x17b0


0x1770:	jmp	qword ptr [rip + 0x2097ba]


0x6ba7:	lea	rax, [rsp + 0x10]
0x6bac:	mov	r15, rsi
0x6baf:	test	rsi, rsi
0x6bb2:	mov	rbp, rdi
0x6bb5:	mov	dword ptr [rsp + 8], edx
0x6bb9:	mov	r14, rcx
0x6bbc:	mov	r13, r8
0x6bbf:	cmove	r15, rax
0x6bc3:	call	0x15b0


0x6f05:	lea	rcx, [rip + 0x1af4]
0x6f0c:	lea	rsi, [rip + 0x19cd]
0x6f13:	lea	rdi, [rip + 0x19e6]
0x6f1a:	mov	edx, 0x54
0x6f1f:	call	0x16d0


0x1630:	jmp	qword ptr [rip + 0x20985a]


0x1650:	jmp	qword ptr [rip + 0x20984a]


0x69b9:	call	0x6a10


0x69a2:	movzx	edx, dl
0x69a5:	test	rdx, rdx
0x69a8:	jne	0x69b9


0x6950:	test	rax, rax
0x6953:	mov	edx, 0x80
0x6958:	cmove	rax, rdx
0x695c:	test	rax, rax
0x695f:	jns	0x6942


0x6928:	movabs	rdx, 0x5555555555555553
0x6932:	cmp	rax, rdx
0x6935:	ja	0x6961


0x68d0:	test	rcx, rcx
0x68d3:	je	0x68f8


0x689b:	xor	edx, edx
0x689d:	movabs	rax, 0x5555555555555554
0x68a7:	div	r9
0x68aa:	cmp	rax, rcx
0x68ad:	jbe	0x68eb


0x687b:	sub	rsp, 8
0x687f:	call	0x6a10


0x6871:	movzx	eax, al
0x6874:	test	rax, rax
0x6877:	jne	0x687b


0x6829:	test	rdi, rdi
0x682c:	jne	0x6848


0x682e:	mov	rsi, rbx
0x6831:	call	0x17d0


0x67fb:	sub	rsp, 8
0x67ff:	call	0x6a10


0x67f1:	movzx	eax, al
0x67f4:	test	rax, rax
0x67f7:	jne	0x67fb


0x1780:	jmp	qword ptr [rip + 0x2097b2]


0x66d6:	mov	eax, r10d
0x66d9:	mov	r11d, 1
0x66df:	add	r10d, 8
0x66e3:	add	rax, rbp
0x66e6:	mov	rax, qword ptr [rax]
0x66e9:	test	rax, rax
0x66ec:	mov	qword ptr [r8 + r9*8], rax
0x66f0:	je	0x66fc


0x672c:	mov	rax, rbx
0x672f:	add	rbx, 8
0x6733:	jmp	0x66e6


0x6608:	mov	r11d, eax
0x660b:	add	r11, qword ptr [r10 + 0x10]
0x660f:	add	eax, 8
0x6612:	mov	dword ptr [r10], eax
0x6615:	mov	rax, qword ptr [r11]
0x6618:	test	rax, rax
0x661b:	mov	qword ptr [r8 + r9*8], rax
0x661f:	je	0x662b


0x664a:	mov	r11, qword ptr [r10 + 8]
0x664e:	lea	rax, [r11 + 8]
0x6652:	mov	qword ptr [r10 + 8], rax
0x6656:	jmp	0x6615


0x65db:	jmp	0x61a0


0x62d8:	mov	r8, rcx
0x62db:	mov	rcx, rdx
0x62de:	lea	rdx, [rip + 0x228f]
0x62e5:	mov	esi, 1
0x62ea:	xor	eax, eax
0x62ec:	call	0x1870


0x61c0:	mov	r8, rdx
0x61c3:	lea	rdx, [rip + 0x239e]
0x61ca:	mov	r9, rcx
0x61cd:	xor	eax, eax
0x61cf:	mov	rcx, rsi
0x61d2:	mov	esi, 1
0x61d7:	call	0x1870


0x60c7:	call	0x15a0


0x6095:	test	rdx, rdx
0x6098:	je	0x60c7


0x6034:	call	0x15a0


0x5fcc:	mov	dword ptr [rsp], esi
0x5fcf:	mov	rcx, rsp
0x5fd2:	mov	rdx, -1
0x5fd9:	mov	rsi, rax
0x5fdc:	mov	qword ptr [rsp + 4], 0
0x5fe5:	mov	qword ptr [rsp + 0xc], 0x4000000
0x5fee:	mov	qword ptr [rsp + 0x14], 0
0x5ff7:	mov	qword ptr [rsp + 0x1c], 0
0x6000:	mov	qword ptr [rsp + 0x24], 0
0x6009:	mov	qword ptr [rsp + 0x2c], 0
0x6012:	mov	dword ptr [rsp + 0x34], 0
0x601a:	call	0x5840


0x5ea0:	call	0x15a0


0x5e3f:	mov	dword ptr [rsp], esi
0x5e42:	mov	rcx, rsp
0x5e45:	mov	rsi, rax
0x5e48:	mov	qword ptr [rsp + 4], 0
0x5e51:	mov	qword ptr [rsp + 0xc], 0
0x5e5a:	mov	qword ptr [rsp + 0x14], 0
0x5e63:	mov	qword ptr [rsp + 0x1c], 0
0x5e6c:	mov	qword ptr [rsp + 0x24], 0
0x5e75:	mov	qword ptr [rsp + 0x2c], 0
0x5e7e:	mov	dword ptr [rsp + 0x34], 0
0x5e86:	call	0x5840


0x5e14:	call	0x15a0


0x5dac:	mov	dword ptr [rsp], esi
0x5daf:	mov	rcx, rsp
0x5db2:	mov	rdx, -1
0x5db9:	mov	rsi, rax
0x5dbc:	mov	qword ptr [rsp + 4], 0
0x5dc5:	mov	qword ptr [rsp + 0xc], 0
0x5dce:	mov	qword ptr [rsp + 0x14], 0
0x5dd7:	mov	qword ptr [rsp + 0x1c], 0
0x5de0:	mov	qword ptr [rsp + 0x24], 0
0x5de9:	mov	qword ptr [rsp + 0x2c], 0
0x5df2:	mov	dword ptr [rsp + 0x34], 0
0x5dfa:	call	0x5840


0x5cc1:	mov	rdi, qword ptr [r12 + 8]
0x5cc6:	lea	rbx, [rip + 0x205453]
0x5ccd:	cmp	rdi, rbx
0x5cd0:	je	0x5ce9


0x5c96:	sub	eax, 2
0x5c99:	lea	rbx, [r12 + 0x18]
0x5c9e:	shl	rax, 4
0x5ca2:	lea	rbp, [r12 + rax + 0x28]
0x5ca7:	nop	word ptr [rax + rax]
0x5cb0:	mov	rdi, qword ptr [rbx]
0x5cb3:	add	rbx, 0x10
0x5cb7:	call	0x1590


0x15b0:	jmp	qword ptr [rip + 0x20989a]


0x5af7:	sub	rsp, 8
0x5afb:	call	0x15a0


0x5ae9:	test	rdx, rdx
0x5aec:	je	0x5af7


0x1640:	jmp	qword ptr [rip + 0x209852]


0x44ed:	mov	rcx, qword ptr [rip + 0x206bcc]
0x44f4:	lea	rdi, [rip + 0x3b4d]
0x44fb:	mov	edx, 0x37
0x4500:	mov	esi, 1
0x4505:	call	0x1860


0x4476:	mov	esi, 0x2f
0x447b:	mov	rbx, rdi
0x447e:	call	0x16b0


0x4460:	ret	


0x4445:	push	rbx
0x4446:	mov	ebx, esi
0x4448:	call	0x1770


0x1700:	jmp	qword ptr [rip + 0x2097f2]


0x4260:	mov	byte ptr [rsp + 6], 1
0x4265:	mov	byte ptr [rsp + 5], 1
0x426a:	jmp	0x4051


0x4037:	test	rdx, rdx
0x403a:	mov	eax, dword ptr [rdi]
0x403c:	setne	byte ptr [rsp + 5]
0x4041:	movzx	ebx, byte ptr [rsp + 5]
0x4046:	test	eax, eax
0x4048:	sete	al
0x404b:	and	eax, ebx
0x404d:	mov	byte ptr [rsp + 6], al
0x4051:	lea	rax, [r14 + 4]
0x4055:	lea	rbp, [rsp + 0x20]
0x405a:	lea	rbx, [rsp + 0x18]
0x405f:	mov	qword ptr [rsp + 8], rax
0x4064:	cmp	byte ptr [rsp + 6], 0
0x4069:	mov	rdx, r15
0x406c:	jne	0x4145


0x3f80:	mov	r14, rdi
0x3f83:	mov	rdi, rbp
0x3f86:	mov	r12, rsi
0x3f89:	call	0x1780


0x3f63:	mov	qword ptr [r13], 0
0x3f6b:	xor	ebp, ebp
0x3f6d:	pop	rbx
0x3f6e:	mov	rax, rbp
0x3f71:	pop	rbp
0x3f72:	pop	r12
0x3f74:	pop	r13
0x3f76:	pop	r14
0x3f78:	ret	


0x3d75:	mov	rax, rcx
0x3d78:	shr	rax, 2
0x3d7c:	lea	rax, [rax + rax*2]
0x3d80:	cmp	rax, rsi
0x3d83:	je	0x3e98


0x3d89:	lea	r9, [rip + 0x4270]
0x3d90:	jmp	0x3e16


0x3cf9:	ret	


0x3c6c:	movzx	r8d, byte ptr [rdi]
0x3c70:	lea	r9, [rip + 0x4289]
0x3c77:	movzx	r8d, byte ptr [r9 + r8]
0x3c7c:	test	r8b, r8b
0x3c7f:	js	0x3cf9


0x3b60:	mov	r13d, 1
0x3b66:	mov	byte ptr [rsp + 6], 1
0x3b6b:	jmp	0x394f


0x3937:	test	rdx, rdx
0x393a:	mov	edx, dword ptr [rdi]
0x393c:	setne	byte ptr [rsp + 6]
0x3941:	movzx	eax, byte ptr [rsp + 6]
0x3946:	test	edx, edx
0x3948:	sete	r13b
0x394c:	and	r13d, eax
0x394f:	lea	rax, [r14 + 4]
0x3953:	lea	rbp, [rsp + 0x20]
0x3958:	lea	rbx, [rsp + 0x18]
0x395d:	mov	qword ptr [rsp + 8], rax
0x3962:	test	r13b, r13b
0x3965:	mov	rdx, r15
0x3968:	jne	0x3a3d


0x3880:	mov	r14, rdi
0x3883:	mov	rdi, rbp
0x3886:	mov	r12, rsi
0x3889:	call	0x1780


0x3864:	mov	qword ptr [r13], 0
0x386c:	xor	ebp, ebp
0x386e:	pop	rbx
0x386f:	mov	rax, rbp
0x3872:	pop	rbp
0x3873:	pop	r12
0x3875:	pop	r13
0x3877:	pop	r14
0x3879:	ret	


0x373b:	test	rsi, rsi
0x373e:	je	0x3820


0x35d8:	ret	


0x346c:	movzx	r8d, byte ptr [rdi]
0x3470:	lea	rsi, [rip + 0x4989]
0x3477:	movzx	r8d, byte ptr [rsi + r8]
0x347c:	test	r8b, r8b
0x347f:	js	0x35d8


0x2fbd:	lea	rsi, [rip + 0x4398]
0x2fc4:	xor	edi, edi
0x2fc6:	call	0x1630


0x2f8f:	lea	rsi, [rip + 0x45fa]
0x2f96:	xor	edi, edi
0x2f98:	call	0x1630


0x2e96:	test	rdx, rdx
0x2e99:	je	0x2ef2


0x2f10:	lea	rsi, [rdx + rdx]
0x2f14:	mov	qword ptr [rsp + 0x18], r8
0x2f19:	mov	qword ptr [rsp + 0x10], rcx
0x2f1e:	mov	qword ptr [rsp + 8], rdx
0x2f23:	test	rsi, rsi
0x2f26:	mov	qword ptr [rdi + 0x18], rsi
0x2f2a:	js	0x2f4c


0x2db5:	mov	rsi, r14
0x2db8:	mov	rdx, r13
0x2dbb:	call	0x1760


0x2e50:	lea	rsi, [rdx + rdx]
0x2e54:	test	rsi, rsi
0x2e57:	mov	qword ptr [rbx + 0x18], rsi
0x2e5b:	js	0x2e6e


0x2cc4:	mov	rax, qword ptr [rsp + 8]
0x2cc9:	xor	rax, qword ptr fs:[0x28]
0x2cd2:	jne	0x2d03


0x2bf3:	movzx	eax, byte ptr [rdi]
0x2bf6:	lea	r9, [rdi + 1]
0x2bfa:	add	rsi, rdi
0x2bfd:	mov	r11, rdx
0x2c00:	xor	r10d, r10d
0x2c03:	mov	edi, 0xc0c0c0c1
0x2c08:	lea	rbx, [rip + 0x50d1]
0x2c0f:	mov	byte ptr [rsp + 4], al
0x2c13:	mov	eax, 1
0x2c18:	jmp	0x2c23


0x2bb8:	mov	eax, dword ptr [rdi]
0x2bba:	test	eax, eax
0x2bbc:	sete	al
0x2bbf:	ret	


0x2b33:	lea	r9, [rsi + 1]
0x2b37:	lea	rsi, [rsi + rdx + 1]
0x2b3c:	jmp	0x2b58


0x2b08:	mov	eax, dword ptr [rdi]
0x2b0a:	test	eax, eax
0x2b0c:	sete	al
0x2b0f:	ret	


0x2a9f:	lea	r9, [rsi + 1]
0x2aa3:	lea	rsi, [rsi + rdx + 1]
0x2aa8:	nop	dword ptr [rax + rax]
0x2ab0:	movzx	eax, byte ptr [r9 - 1]
0x2ab5:	cmp	al, 0xa
0x2ab7:	je	0x2af5


0x297c:	mov	eax, dword ptr [rdi + 4]
0x297f:	test	eax, eax
0x2981:	setle	al
0x2984:	ret	


0x2988:	lea	r9, [rsi + 1]
0x298c:	lea	r10, [rip + 0x52ed]
0x2993:	lea	rsi, [rsi + rdx + 1]
0x2998:	jmp	0x29ad


0x2940:	movzx	eax, byte ptr [rdi + 5]
0x2944:	xor	eax, 1
0x2947:	ret	


0x28cc:	lea	r9, [rsi + 1]
0x28d0:	lea	r10, [rsi + rdx + 1]
0x28d5:	jmp	0x290e


0x27b6:	cmp	dil, 0x41
0x27ba:	jge	0x27ef


0x27e8:	lea	eax, [rdi - 0x61]
0x27eb:	cmp	al, 0x19
0x27ed:	ja	0x27c3


0x26b2:	mov	edx, edi
0x26b4:	and	edx, 0xfffffffb
0x26b7:	cmp	dl, 0x2b
0x26ba:	je	0x26c8


0x26c8:	ret	


0x2692:	ret	


0x2655:	lea	r8, [rdi + rsi]
0x2659:	nop	dword ptr [rax]
0x2660:	movzx	ecx, byte ptr [rdi]
0x2663:	lea	rsi, [rdx + 8]
0x2667:	nop	word ptr [rax + rax]
0x2670:	mov	eax, ecx
0x2672:	add	rdx, 1
0x2676:	shr	cl, 1
0x2678:	and	eax, 1
0x267b:	add	eax, 0x30
0x267e:	cmp	rsi, rdx
0x2681:	mov	byte ptr [rdx - 1], al
0x2684:	jne	0x2670


0x2642:	ret	


0x2605:	lea	r8, [rdi + rsi]
0x2609:	nop	dword ptr [rax]
0x2610:	movzx	ecx, byte ptr [rdi]
0x2613:	lea	rsi, [rdx + 8]
0x2617:	nop	word ptr [rax + rax]
0x2620:	mov	eax, ecx
0x2622:	add	rdx, 1
0x2626:	add	ecx, ecx
0x2628:	shr	al, 7
0x262b:	add	eax, 0x30
0x262e:	cmp	rsi, rdx
0x2631:	mov	byte ptr [rdx - 1], al
0x2634:	jne	0x2620


0x25cb:	ret	


0x2595:	lea	r8, [rip + 0x57a4]
0x259c:	add	rsi, rdi
0x259f:	nop	
0x25a0:	movzx	eax, byte ptr [rdi]
0x25a3:	add	rdi, 1
0x25a7:	add	rdx, 2
0x25ab:	mov	ecx, eax
0x25ad:	and	eax, 0xf
0x25b0:	shr	cl, 4
0x25b3:	movzx	eax, byte ptr [r8 + rax]
0x25b8:	and	ecx, 0xf
0x25bb:	movzx	ecx, byte ptr [r8 + rcx]
0x25c0:	mov	byte ptr [rdx - 2], cl
0x25c3:	cmp	rdi, rsi
0x25c6:	mov	byte ptr [rdx - 1], al
0x25c9:	jne	0x25a0


0x24b9:	cmp	qword ptr [rip + 0x208b2f], 0
0x24c1:	push	rbp
0x24c2:	mov	rbp, rsp
0x24c5:	je	0x24d3


0x24e8:	ret	


0x24a0:	pop	rbp
0x24a1:	ret	


0x2488:	mov	rax, qword ptr [rip + 0x208b59]
0x248f:	test	rax, rax
0x2492:	je	0x24a0


0x2450:	pop	rbp
0x2451:	ret	


0x2437:	mov	rax, qword ptr [rip + 0x208b92]
0x243e:	test	rax, rax
0x2441:	je	0x2450




0x157a:	add	rsp, 8
0x157e:	ret	


0x1578:	call	rax












0x707a:	cmp	qword ptr [rdi + 0x48], 0
0x707f:	jne	0x706a


0x1820:	jmp	qword ptr [rip + 0x209762]


0x1790:	jmp	qword ptr [rip + 0x2097aa]


0x17b0:	jmp	qword ptr [rip + 0x20979a]




0x16d0:	jmp	qword ptr [rip + 0x20980a]






0x69aa:	call	0x1740


0x6961:	sub	rsp, 8
0x6965:	call	0x6a10


0x6942:	mov	qword ptr [rsi], rax
0x6945:	mov	rsi, rax
0x6948:	jmp	0x6820


0x6937:	mov	rdx, rax
0x693a:	shr	rdx, 1
0x693d:	lea	rax, [rdx + rax + 1]
0x6942:	mov	qword ptr [rsi], rax
0x6945:	mov	rsi, rax
0x6948:	jmp	0x6820


0x68f8:	xor	edx, edx
0x68fa:	mov	eax, 0x80
0x68ff:	xor	r8d, r8d
0x6902:	div	r9
0x6905:	test	rax, rax
0x6908:	sete	r8b
0x690c:	lea	rcx, [r8 + rax]
0x6910:	jmp	0x68d5


0x68d5:	mov	rax, rcx
0x68d8:	mul	r9
0x68db:	seto	dl
0x68de:	test	rax, rax
0x68e1:	movzx	edx, dl
0x68e4:	js	0x68eb


0x68eb:	sub	rsp, 8
0x68ef:	call	0x6a10


0x68af:	mov	rax, rcx
0x68b2:	shr	rax, 1
0x68b5:	lea	rcx, [rax + rcx + 1]
0x68ba:	mov	qword ptr [rsi], rcx
0x68bd:	imul	rcx, r9
0x68c1:	mov	rsi, rcx
0x68c4:	jmp	0x6820


0x6879:	jmp	0x6820


0x6848:	call	0x1590


0x17d0:	jmp	qword ptr [rip + 0x20978a]


0x67f9:	jmp	0x67c0




0x66fc:	test	r11b, r11b
0x66ff:	jne	0x6725


0x66f2:	add	r9, 1
0x66f6:	cmp	r9, 0xa
0x66fa:	jne	0x66d0


0x66e6:	mov	rax, qword ptr [rax]
0x66e9:	test	rax, rax
0x66ec:	mov	qword ptr [r8 + r9*8], rax
0x66f0:	je	0x66fc


0x662b:	call	0x61a0


0x6621:	add	r9, 1
0x6625:	cmp	r9, 0xa
0x6629:	jne	0x6600


0x6615:	mov	rax, qword ptr [r11]
0x6618:	test	rax, rax
0x661b:	mov	qword ptr [r8 + r9*8], rax
0x661f:	je	0x662b


0x65d0:	add	r9, 1
0x65d4:	cmp	qword ptr [r8 + r9*8], 0
0x65d9:	jne	0x65d0


0x1870:	jmp	qword ptr [rip + 0x20973a]


0x15a0:	jmp	qword ptr [rip + 0x2098a2]


0x609a:	mov	qword ptr [rsp + 0x28], rsi
0x609f:	mov	qword ptr [rsp + 0x30], rdx
0x60a4:	mov	rcx, rsp
0x60a7:	mov	rdx, r8
0x60aa:	mov	rsi, r9
0x60ad:	call	0x5840


0x5ce9:	lea	rbx, [rip + 0x205380]
0x5cf0:	cmp	r12, rbx
0x5cf3:	je	0x5d04


0x5cd2:	call	0x1590


0x1590:	jmp	qword ptr [rip + 0x2098aa]




0x5aee:	mov	qword ptr [rdi + 0x28], rsi
0x5af2:	mov	qword ptr [rdi + 0x30], rdx
0x5af6:	ret	




0x1860:	jmp	qword ptr [rip + 0x209742]


0x16b0:	jmp	qword ptr [rip + 0x20981a]




0x4051:	lea	rax, [r14 + 4]
0x4055:	lea	rbp, [rsp + 0x20]
0x405a:	lea	rbx, [rsp + 0x18]
0x405f:	mov	qword ptr [rsp + 8], rax
0x4064:	cmp	byte ptr [rsp + 6], 0
0x4069:	mov	rdx, r15
0x406c:	jne	0x4145


0x4072:	test	r13, r13
0x4075:	sete	al
0x4078:	and	al, byte ptr [rsp + 5]
0x407c:	jne	0x4108


0x4145:	mov	rcx, rbp
0x4148:	mov	rdx, rbx
0x414b:	mov	rsi, r13
0x414e:	mov	rdi, r12
0x4151:	call	0x3c60


0x3e98:	test	rax, rax
0x3e9b:	lea	r8, [rdi + rax]
0x3e9f:	lea	rcx, [rip + 0x415a]
0x3ea6:	je	0x3e92


0x3e16:	test	rsi, rsi
0x3e19:	je	0x3f18


0x3c81:	movzx	r10d, byte ptr [rdi + 1]
0x3c86:	movzx	r10d, byte ptr [r9 + r10]
0x3c8b:	test	r10b, r10b
0x3c8e:	js	0x3cf9


0x394f:	lea	rax, [r14 + 4]
0x3953:	lea	rbp, [rsp + 0x20]
0x3958:	lea	rbx, [rsp + 0x18]
0x395d:	mov	qword ptr [rsp + 8], rax
0x3962:	test	r13b, r13b
0x3965:	mov	rdx, r15
0x3968:	jne	0x3a3d


0x396e:	test	r11, r11
0x3971:	sete	al
0x3974:	and	al, byte ptr [rsp + 6]
0x3978:	jne	0x3a00


0x3a3d:	mov	rcx, rbp
0x3a40:	mov	rdx, rbx
0x3a43:	mov	rsi, r11
0x3a46:	mov	rdi, r12
0x3a49:	call	0x3460


0x3820:	test	rcx, rcx
0x3823:	je	0x37e5


0x3744:	test	rcx, rcx
0x3747:	je	0x3820


0x3485:	movzx	r9d, byte ptr [rdi + 1]
0x348a:	movzx	r9d, byte ptr [rsi + r9]
0x348f:	test	r9b, r9b
0x3492:	js	0x35d8


0x2ef2:	lea	rdi, [rbx + 4]
0x2ef6:	mov	rsi, rax
0x2ef9:	call	0x38f0


0x2e9b:	xor	r9d, r9d
0x2e9e:	lea	r11, [rip + 0x4ebb]
0x2ea5:	jmp	0x2ec6


0x2f4c:	call	0x6a10


0x2f2c:	mov	rdi, rax
0x2f2f:	call	0x6820


0x1760:	jmp	qword ptr [rip + 0x2097c2]


0x2e6e:	call	0x6a10


0x2e5d:	call	0x6820


0x2cd4:	add	rsp, 0x18
0x2cd8:	pop	rbx
0x2cd9:	pop	rbp
0x2cda:	pop	r12
0x2cdc:	pop	r13
0x2cde:	ret	


0x2d03:	call	0x1660


0x2c23:	cmp	rsi, r9
0x2c26:	je	0x2cc0


0x2b58:	movzx	edx, byte ptr [r9 - 1]
0x2b5d:	cmp	dl, 0xa
0x2b60:	je	0x2b4f


0x2af5:	add	r9, 1
0x2af9:	cmp	rsi, r9
0x2afc:	jne	0x2ab0


0x2ab9:	lea	edx, [rax - 0x30]
0x2abc:	cmp	dl, 1
0x2abf:	ja	0x2b10


0x29ad:	movzx	eax, byte ptr [r9 - 1]
0x29b2:	cmp	al, 0xa
0x29b4:	je	0x29a0


0x290e:	movsx	eax, byte ptr [r9 - 1]
0x2913:	cmp	al, 0xa
0x2915:	je	0x2905


0x27bc:	lea	eax, [rdi - 0x30]
0x27bf:	cmp	al, 9
0x27c1:	jbe	0x27ef


0x27ef:	mov	eax, 1
0x27f4:	ret	


0x27c3:	movsx	esi, dil
0x27c7:	lea	rdi, [rip + 0x4b56]
0x27ce:	sub	rsp, 8
0x27d2:	call	0x1690


0x26bc:	movsx	edi, dil
0x26c0:	jmp	0x3fc0


0x2686:	add	rdi, 1
0x268a:	mov	rdx, rsi
0x268d:	cmp	r8, rdi
0x2690:	jne	0x2660


0x2670:	mov	eax, ecx
0x2672:	add	rdx, 1
0x2676:	shr	cl, 1
0x2678:	and	eax, 1
0x267b:	add	eax, 0x30
0x267e:	cmp	rsi, rdx
0x2681:	mov	byte ptr [rdx - 1], al
0x2684:	jne	0x2670


0x2636:	add	rdi, 1
0x263a:	mov	rdx, rsi
0x263d:	cmp	r8, rdi
0x2640:	jne	0x2610


0x2620:	mov	eax, ecx
0x2622:	add	rdx, 1
0x2626:	add	ecx, ecx
0x2628:	shr	al, 7
0x262b:	add	eax, 0x30
0x262e:	cmp	rsi, rdx
0x2631:	mov	byte ptr [rdx - 1], al
0x2634:	jne	0x2620


0x25a0:	movzx	eax, byte ptr [rdi]
0x25a3:	add	rdi, 1
0x25a7:	add	rdx, 2
0x25ab:	mov	ecx, eax
0x25ad:	and	eax, 0xf
0x25b0:	shr	cl, 4
0x25b3:	movzx	eax, byte ptr [r8 + rax]
0x25b8:	and	ecx, 0xf
0x25bb:	movzx	ecx, byte ptr [r8 + rcx]
0x25c0:	mov	byte ptr [rdx - 2], cl
0x25c3:	cmp	rdi, rsi
0x25c6:	mov	byte ptr [rdx - 1], al
0x25c9:	jne	0x25a0


0x24d3:	call	0x2420


0x24c7:	mov	rdi, qword ptr [rip + 0x208b3a]
0x24ce:	call	0x18b0


0x2494:	pop	rbp
0x2495:	jmp	rax


0x2443:	pop	rbp
0x2444:	jmp	rax


0x7081:	push	r12
0x7083:	push	rbp
0x7084:	mov	r12d, edx
0x7087:	push	rbx
0x7088:	mov	rbp, rsi
0x708b:	mov	rbx, rdi
0x708e:	call	0x1770










0x1740:	jmp	qword ptr [rip + 0x2097d2]


0x68e6:	test	rdx, rdx
0x68e9:	je	0x68ba




0x6701:	call	0x61a0


0x6725:	mov	dword ptr [rsp + 8], r10d
0x672a:	jmp	0x6701


0x66d0:	cmp	r10d, 0x2f
0x66d4:	ja	0x672c


0x6600:	mov	eax, dword ptr [r10]
0x6603:	cmp	eax, 0x2f
0x6606:	ja	0x664a






0x5d04:	pop	rbx
0x5d05:	mov	dword ptr [rip + 0x205349], 1
0x5d0f:	pop	rbp
0x5d10:	pop	r12
0x5d12:	ret	


0x5cf5:	mov	rdi, r12
0x5cf8:	call	0x1590








0x4082:	test	r13, r13
0x4085:	je	0x4168


0x4108:	mov	rbx, qword ptr [rsp + 0x10]
0x410d:	sub	qword ptr [rbx], rdx
0x4110:	mov	rbx, qword ptr [rsp + 0x28]
0x4115:	xor	rbx, qword ptr fs:[0x28]
0x411e:	jne	0x4298


0x3e92:	ret	


0x3f18:	test	rcx, rcx
0x3f1b:	je	0x3e92


0x3e1f:	test	rcx, rcx
0x3e22:	je	0x3f18


0x3c90:	cmp	qword ptr [rcx], 0
0x3c94:	mov	rax, qword ptr [rdx]
0x3c97:	jne	0x3d10


0x397e:	test	r11, r11
0x3981:	je	0x3a60


0x3a00:	mov	rbx, qword ptr [rsp + 0x10]
0x3a05:	sub	qword ptr [rbx], rdx
0x3a08:	mov	rbx, qword ptr [rsp + 0x28]
0x3a0d:	xor	rbx, qword ptr fs:[0x28]
0x3a16:	jne	0x3b99


0x37e5:	ret	


0x3825:	mov	byte ptr [rdx], 0
0x3828:	ret	


0x374d:	movzx	eax, byte ptr [rdi]
0x3750:	mov	r9d, eax
0x3753:	shr	r9b, 3
0x3757:	and	r9d, 0x1f
0x375b:	cmp	rcx, 1
0x375f:	movzx	r9d, byte ptr [r8 + r9]
0x3764:	mov	byte ptr [rdx], r9b
0x3767:	je	0x37e5


0x3498:	cmp	qword ptr [rcx], 0
0x349c:	mov	rax, qword ptr [rdx]
0x349f:	je	0x34bb


0x2ec6:	movsx	esi, byte ptr [rbp + r9]
0x2ecc:	lea	r10d, [rsi - 0x30]
0x2ed0:	cmp	r10b, 9
0x2ed4:	ja	0x2eb0




0x1660:	jmp	qword ptr [rip + 0x209842]


0x2cc0:	test	eax, eax
0x2cc2:	jne	0x2cdf


0x2c2c:	add	r9, 1
0x2c30:	movzx	r8d, byte ptr [r9 - 1]
0x2c35:	lea	edx, [rax + 1]
0x2c38:	cmp	edx, 4
0x2c3b:	mov	byte ptr [rsp + rax + 4], r8b
0x2c40:	jne	0x2c20


0x2b4f:	add	r9, 1
0x2b53:	cmp	r9, rsi
0x2b56:	je	0x2bad


0x2b62:	lea	eax, [rdx - 0x30]
0x2b65:	cmp	al, 1
0x2b67:	ja	0x2bc0


0x2afe:	mov	eax, 1
0x2b03:	ret	


0x2ab0:	movzx	eax, byte ptr [r9 - 1]
0x2ab5:	cmp	al, 0xa
0x2ab7:	je	0x2af5


0x2ac1:	cmp	al, 0x31
0x2ac3:	mov	ecx, dword ptr [rdi]
0x2ac5:	sete	al
0x2ac8:	movzx	eax, al
0x2acb:	shl	eax, cl
0x2acd:	or	eax, dword ptr [rdi + 4]
0x2ad0:	add	ecx, 1
0x2ad3:	cmp	ecx, 8
0x2ad6:	mov	dword ptr [rdi], ecx
0x2ad8:	mov	dword ptr [rdi + 4], eax
0x2adb:	jne	0x2af5


0x2b10:	xor	eax, eax
0x2b12:	ret	


0x29a0:	add	r9, 1
0x29a4:	cmp	r9, rsi
0x29a7:	je	0x2a6f


0x29b6:	lea	edx, [rax - 0x21]
0x29b9:	cmp	dl, 0x5c
0x29bc:	ja	0x2a80


0x2905:	add	r9, 1
0x2909:	cmp	r10, r9
0x290c:	je	0x2950


0x2917:	lea	edx, [rax - 0x41]
0x291a:	cmp	dl, 5
0x291d:	jbe	0x28e0


0x1690:	jmp	qword ptr [rip + 0x20982a]


0x2660:	movzx	ecx, byte ptr [rdi]
0x2663:	lea	rsi, [rdx + 8]
0x2667:	nop	word ptr [rax + rax]
0x2670:	mov	eax, ecx
0x2672:	add	rdx, 1
0x2676:	shr	cl, 1
0x2678:	and	eax, 1
0x267b:	add	eax, 0x30
0x267e:	cmp	rsi, rdx
0x2681:	mov	byte ptr [rdx - 1], al
0x2684:	jne	0x2670


0x2610:	movzx	ecx, byte ptr [rdi]
0x2613:	lea	rsi, [rdx + 8]
0x2617:	nop	word ptr [rax + rax]
0x2620:	mov	eax, ecx
0x2622:	add	rdx, 1
0x2626:	add	ecx, ecx
0x2628:	shr	al, 7
0x262b:	add	eax, 0x30
0x262e:	cmp	rsi, rdx
0x2631:	mov	byte ptr [rdx - 1], al
0x2634:	jne	0x2620


0x18b0:	jmp	qword ptr [rip + 0x20973a]




0x68ba:	mov	qword ptr [rsi], rcx
0x68bd:	imul	rcx, r9
0x68c1:	mov	rsi, rcx
0x68c4:	jmp	0x6820


0x4168:	sub	rdx, r15
0x416b:	add	qword ptr [rsp + 0x18], rdx
0x4170:	test	r14, r14
0x4173:	mov	qword ptr [rsp + 0x20], r15
0x4178:	je	0x426f


0x408b:	cmp	byte ptr [r12], 0xa
0x4090:	je	0x4230


0x4124:	add	rsp, 0x38
0x4128:	pop	rbx
0x4129:	pop	rbp
0x412a:	pop	r12
0x412c:	pop	r13
0x412e:	pop	r14
0x4130:	pop	r15
0x4132:	ret	


0x4298:	call	0x1660


0x3f10:	ret	


0x3eb0:	movzx	eax, byte ptr [rdi]
0x3eb3:	add	rdi, 3
0x3eb7:	add	rdx, 4
0x3ebb:	mov	esi, eax
0x3ebd:	shl	eax, 4
0x3ec0:	shr	sil, 2
0x3ec4:	and	esi, 0x3f
0x3ec7:	movzx	esi, byte ptr [rcx + rsi]
0x3ecb:	mov	byte ptr [rdx - 4], sil
0x3ecf:	movzx	esi, byte ptr [rdi - 2]
0x3ed3:	mov	r9d, esi
0x3ed6:	shr	r9b, 4
0x3eda:	add	eax, r9d
0x3edd:	and	eax, 0x3f
0x3ee0:	movzx	eax, byte ptr [rcx + rax]
0x3ee4:	mov	byte ptr [rdx - 3], al
0x3ee7:	movzx	eax, byte ptr [rdi - 1]
0x3eeb:	mov	r9d, eax
0x3eee:	and	eax, 0x3f
0x3ef1:	shr	r9b, 6
0x3ef5:	movzx	eax, byte ptr [rcx + rax]
0x3ef9:	lea	esi, [r9 + rsi*4]
0x3efd:	and	esi, 0x3f
0x3f00:	movzx	esi, byte ptr [rcx + rsi]
0x3f04:	mov	byte ptr [rdx - 2], sil
0x3f08:	cmp	r8, rdi
0x3f0b:	mov	byte ptr [rdx - 1], al
0x3f0e:	jne	0x3eb0


0x3f21:	mov	byte ptr [rdx], 0
0x3f24:	ret	


0x3e28:	movzx	eax, byte ptr [rdi]
0x3e2b:	mov	r8d, eax
0x3e2e:	shr	r8b, 2
0x3e32:	and	r8d, 0x3f
0x3e36:	cmp	rcx, 1
0x3e3a:	movzx	r8d, byte ptr [r9 + r8]
0x3e3f:	mov	byte ptr [rdx], r8b
0x3e42:	je	0x3e92


0x3c99:	cmp	rsi, 2
0x3c9d:	je	0x3d06


0x3d10:	mov	r11d, r10d
0x3d13:	shl	r8d, 2
0x3d17:	add	rax, 1
0x3d1b:	sar	r11b, 4
0x3d1f:	or	r8d, r11d
0x3d22:	mov	byte ptr [rax - 1], r8b
0x3d26:	sub	qword ptr [rcx], 1
0x3d2a:	jmp	0x3c99


0x3a60:	sub	rdx, r15
0x3a63:	add	qword ptr [rsp + 0x18], rdx
0x3a68:	test	r14, r14
0x3a6b:	mov	qword ptr [rsp + 0x20], r15
0x3a70:	je	0x3b70


0x3987:	cmp	byte ptr [r12], 0xa
0x398c:	je	0x3b30


0x3a1c:	add	rsp, 0x38
0x3a20:	pop	rbx
0x3a21:	pop	rbp
0x3a22:	pop	r12
0x3a24:	pop	r13
0x3a26:	pop	r14
0x3a28:	pop	r15
0x3a2a:	ret	


0x3b99:	call	0x1660


0x3769:	shl	eax, 2
0x376c:	cmp	rsi, 1
0x3770:	jne	0x3620


0x34bb:	movzx	r8d, byte ptr [rdi + 2]
0x34c0:	cmp	r8b, 0x3d
0x34c4:	je	0x35e0


0x34a1:	mov	r10d, r9d
0x34a4:	shl	r8d, 3
0x34a8:	add	rax, 1
0x34ac:	sar	r10b, 2
0x34b0:	or	r8d, r10d
0x34b3:	mov	byte ptr [rax - 1], r8b
0x34b7:	sub	qword ptr [rcx], 1
0x34bb:	movzx	r8d, byte ptr [rdi + 2]
0x34c0:	cmp	r8b, 0x3d
0x34c4:	je	0x35e0


0x2ed6:	sub	esi, 0x30
0x2ed9:	movsxd	rsi, esi
0x2edc:	movzx	esi, byte ptr [r11 + rsi]
0x2ee1:	mov	byte ptr [rax + r9], sil
0x2ee5:	add	r9, 1
0x2ee9:	cmp	rdx, r9
0x2eec:	jne	0x2ec6


0x2eb0:	lea	edi, [rsi - 0x41]
0x2eb3:	cmp	dil, 0x15
0x2eb7:	jbe	0x2ed6




0x2cdf:	lea	rsi, [rip + 0x4852]
0x2ce6:	mov	edx, 5
0x2ceb:	xor	edi, edi
0x2ced:	call	0x1630


0x2c42:	movzx	eax, byte ptr [rsp + 4]
0x2c47:	movzx	r8d, byte ptr [rsp + 5]
0x2c4d:	mov	r13, r11
0x2c50:	lea	rbp, [r10 + 4]
0x2c54:	lea	r12, [r10 - 1]
0x2c58:	sub	r13, r10
0x2c5b:	shl	r8d, 0x10
0x2c5f:	shl	eax, 0x18
0x2c62:	lea	eax, [rax + r8]
0x2c66:	movzx	r8d, byte ptr [rsp + 6]
0x2c6c:	shl	r8d, 8
0x2c70:	add	r8d, eax
0x2c73:	movzx	eax, byte ptr [rsp + 7]
0x2c78:	add	r8d, eax
0x2c7b:	mov	eax, r8d
0x2c7e:	mul	edi
0x2c80:	shr	edx, 6
0x2c83:	cmp	rbp, rcx
0x2c86:	jae	0x2c9b


0x2c20:	movsxd	rax, edx
0x2c23:	cmp	rsi, r9
0x2c26:	je	0x2cc0


0x2bad:	mov	eax, 1
0x2bb2:	ret	


0x2b69:	mov	ecx, dword ptr [rdi]
0x2b6b:	xor	eax, eax
0x2b6d:	cmp	dl, 0x31
0x2b70:	sete	al
0x2b73:	mov	r11d, dword ptr [rdi + 4]
0x2b77:	test	ecx, ecx
0x2b79:	je	0x2b40


0x2bc0:	xor	eax, eax
0x2bc2:	ret	


0x2add:	mov	byte ptr [r10], al
0x2ae0:	mov	dword ptr [rdi + 4], 0
0x2ae7:	add	r10, 1
0x2aeb:	add	qword ptr [r8], 1
0x2aef:	mov	dword ptr [rdi], 0
0x2af5:	add	r9, 1
0x2af9:	cmp	rsi, r9
0x2afc:	jne	0x2ab0


0x2a6f:	mov	eax, dword ptr [rdi + 4]
0x2a72:	mov	dword ptr [rdi], eax
0x2a74:	mov	eax, 1
0x2a79:	ret	


0x29c2:	sub	eax, 0x21
0x29c5:	cdqe	
0x29c7:	movzx	edx, byte ptr [r10 + rax]
0x29cc:	cmp	dl, 0xff
0x29cf:	je	0x2a80


0x2a80:	xor	eax, eax
0x2a82:	ret	


0x2950:	mov	eax, 1
0x2955:	ret	


0x28e0:	movzx	edx, byte ptr [rdi + 5]
0x28e4:	sub	eax, 0x37
0x28e7:	test	dl, dl
0x28e9:	je	0x2932


0x291f:	lea	edx, [rax - 0x30]
0x2922:	cmp	dl, 9
0x2925:	ja	0x2960




0x426f:	mov	rdx, r15
0x4272:	mov	eax, 1
0x4277:	jmp	0x4108


0x417e:	mov	r15, r12
0x4181:	mov	eax, dword ptr [r14]
0x4184:	cmp	eax, 4
0x4187:	je	0x41e0


0x4230:	test	r14, r14
0x4233:	je	0x4248


0x4096:	sub	rdx, r15
0x4099:	add	qword ptr [rsp + 0x18], rdx
0x409e:	test	r14, r14
0x40a1:	mov	qword ptr [rsp + 0x20], r15
0x40a6:	lea	r15, [r12 + r13]
0x40aa:	jne	0x4181


0x3e44:	shl	eax, 4
0x3e47:	cmp	rsi, 1
0x3e4b:	jne	0x3d98


0x3d06:	mov	qword ptr [rdx], rax
0x3d09:	xor	eax, eax
0x3d0b:	ret	


0x3c9f:	movzx	r8d, byte ptr [rdi + 2]
0x3ca4:	cmp	r8b, 0x3d
0x3ca8:	je	0x3d00


0x3b70:	mov	rdx, r15
0x3b73:	mov	eax, 1
0x3b78:	jmp	0x3a00


0x3a76:	mov	r15, r12
0x3a79:	mov	eax, dword ptr [r14]
0x3a7c:	cmp	eax, 8
0x3a7f:	je	0x3ae0


0x3b30:	test	r14, r14
0x3b33:	je	0x3b48


0x3992:	sub	rdx, r15
0x3995:	add	qword ptr [rsp + 0x18], rdx
0x399a:	test	r14, r14
0x399d:	mov	qword ptr [rsp + 0x20], r15
0x39a2:	lea	r15, [r12 + r11]
0x39a6:	jne	0x3a79


0x3776:	and	eax, 0x1c
0x3779:	cmp	rcx, 2
0x377d:	movzx	eax, byte ptr [r8 + rax]
0x3782:	mov	byte ptr [rdx + 1], al
0x3785:	je	0x37e5


0x3620:	movzx	r9d, byte ptr [rdi + 1]
0x3625:	mov	r10d, r9d
0x3628:	shr	r10b, 6
0x362c:	add	eax, r10d
0x362f:	and	eax, 0x1f
0x3632:	cmp	rcx, 2
0x3636:	movzx	eax, byte ptr [r8 + rax]
0x363b:	mov	byte ptr [rdx + 1], al
0x363e:	je	0x37e5


0x35e0:	cmp	byte ptr [rdi + 3], 0x3d
0x35e4:	je	0x35f0


0x34ca:	movzx	r8d, byte ptr [rsi + r8]
0x34cf:	test	r8b, r8b
0x34d2:	js	0x35e6


0x2eee:	mov	rax, qword ptr [rbx + 0x10]
0x2ef2:	lea	rdi, [rbx + 4]
0x2ef6:	mov	rsi, rax
0x2ef9:	call	0x38f0


0x2eb9:	mov	byte ptr [rax + r9], sil
0x2ebd:	add	r9, 1
0x2ec1:	cmp	rdx, r9
0x2ec4:	je	0x2eee


0x2c88:	imul	eax, edx, 0x55
0x2c8b:	sub	r8d, eax
0x2c8e:	movsxd	r8, r8d
0x2c91:	movzx	eax, byte ptr [rbx + r8]
0x2c96:	mov	byte ptr [r13 + rbp], al
0x2c9b:	sub	rbp, 1
0x2c9f:	mov	r8d, edx
0x2ca2:	cmp	rbp, r12
0x2ca5:	jne	0x2c7b


0x2c9b:	sub	rbp, 1
0x2c9f:	mov	r8d, edx
0x2ca2:	cmp	rbp, r12
0x2ca5:	jne	0x2c7b


0x2b40:	shl	eax, 7
0x2b43:	mov	dword ptr [rdi], 7
0x2b49:	or	eax, r11d
0x2b4c:	mov	dword ptr [rdi + 4], eax
0x2b4f:	add	r9, 1
0x2b53:	cmp	r9, rsi
0x2b56:	je	0x2bad


0x2b7b:	sub	ecx, 1
0x2b7e:	shl	eax, cl
0x2b80:	mov	dword ptr [rdi], ecx
0x2b82:	or	eax, r11d
0x2b85:	test	ecx, ecx
0x2b87:	mov	dword ptr [rdi + 4], eax
0x2b8a:	jne	0x2b4f


0x29d5:	movsxd	rax, dword ptr [rdi + 4]
0x29d9:	lea	r11d, [rax + 1]
0x29dd:	cmp	r11d, 5
0x29e1:	mov	dword ptr [rdi + 4], r11d
0x29e5:	mov	byte ptr [rdi + rax + 8], dl
0x29e9:	jne	0x29a0


0x2932:	mov	byte ptr [rdi + 4], al
0x2935:	jmp	0x28ff


0x28eb:	movzx	esi, byte ptr [rdi + 4]
0x28ef:	add	qword ptr [r8], 1
0x28f3:	add	rcx, 1
0x28f7:	shl	esi, 4
0x28fa:	add	eax, esi
0x28fc:	mov	byte ptr [rcx - 1], al
0x28ff:	xor	edx, 1
0x2902:	mov	byte ptr [rdi + 5], dl
0x2905:	add	r9, 1
0x2909:	cmp	r10, r9
0x290c:	je	0x2950


0x2927:	movzx	edx, byte ptr [rdi + 5]
0x292b:	sub	eax, 0x30
0x292e:	test	dl, dl
0x2930:	jne	0x28eb


0x2960:	xor	eax, eax
0x2962:	ret	


0x41e0:	mov	dword ptr [r14], 0
0x41e7:	cmp	r13, 3
0x41eb:	jle	0x4204


0x4189:	test	eax, eax
0x418b:	je	0x41e7


0x4248:	sub	rdx, r15
0x424b:	mov	qword ptr [rsp + 0x20], r15
0x4250:	add	qword ptr [rsp + 0x18], rdx
0x4255:	lea	r15, [r12 + r13]
0x4259:	jmp	0x40b0


0x4235:	add	r12, 1
0x4239:	sub	r13, 1
0x423d:	mov	r15, rdx
0x4240:	jmp	0x4064


0x40b0:	mov	rdi, r12
0x40b3:	cmp	r13, 3
0x40b7:	ja	0x40cb


0x4181:	mov	eax, dword ptr [r14]
0x4184:	cmp	eax, 4
0x4187:	je	0x41e0


0x3e51:	and	eax, 0x30
0x3e54:	cmp	rcx, 2
0x3e58:	movzx	eax, byte ptr [r9 + rax]
0x3e5d:	mov	byte ptr [rdx + 1], al
0x3e60:	je	0x3e92


0x3d98:	movzx	r8d, byte ptr [rdi + 1]
0x3d9d:	mov	r10d, r8d
0x3da0:	shr	r10b, 4
0x3da4:	add	eax, r10d
0x3da7:	and	eax, 0x3f
0x3daa:	cmp	rcx, 2
0x3dae:	movzx	eax, byte ptr [r9 + rax]
0x3db3:	mov	byte ptr [rdx + 1], al
0x3db6:	je	0x3e92


0x3d00:	cmp	rsi, 4
0x3d04:	je	0x3d50


0x3caa:	movzx	r8d, byte ptr [r9 + r8]
0x3caf:	test	r8b, r8b
0x3cb2:	js	0x3d06


0x3ae0:	mov	dword ptr [r14], 0
0x3ae7:	cmp	r11, 7
0x3aeb:	jle	0x3b04


0x3a81:	test	eax, eax
0x3a83:	je	0x3ae7


0x3b48:	sub	rdx, r15
0x3b4b:	mov	qword ptr [rsp + 0x20], r15
0x3b50:	add	qword ptr [rsp + 0x18], rdx
0x3b55:	lea	r15, [r12 + r11]
0x3b59:	jmp	0x39ac


0x3b35:	add	r12, 1
0x3b39:	sub	r11, 1
0x3b3d:	mov	r15, rdx
0x3b40:	jmp	0x3962


0x39ac:	mov	rdi, r12
0x39af:	cmp	r11, 7
0x39b3:	ja	0x39c7


0x3a79:	mov	eax, dword ptr [r14]
0x3a7c:	cmp	eax, 8
0x3a7f:	je	0x3ae0


0x3787:	cmp	rcx, 3
0x378b:	mov	byte ptr [rdx + 2], 0x3d
0x378f:	je	0x37e5


0x3644:	mov	eax, r9d
0x3647:	shr	al, 1
0x3649:	and	eax, 0x1f
0x364c:	cmp	rcx, 3
0x3650:	movzx	eax, byte ptr [r8 + rax]
0x3655:	mov	byte ptr [rdx + 2], al
0x3658:	je	0x37e5


0x35f0:	cmp	byte ptr [rdi + 4], 0x3d
0x35f4:	jne	0x35e6


0x35e6:	mov	qword ptr [rdx], rax
0x35e9:	xor	eax, eax
0x35eb:	ret	


0x34d8:	movzx	r10d, byte ptr [rdi + 3]
0x34dd:	movzx	r10d, byte ptr [rsi + r10]
0x34e2:	test	r10b, r10b
0x34e5:	js	0x35e6


0x2ca7:	add	r11, 5
0x2cab:	add	r10, 5
0x2caf:	xor	edx, edx
0x2cb1:	jmp	0x2c20


0x2c7b:	mov	eax, r8d
0x2c7e:	mul	edi
0x2c80:	shr	edx, 6
0x2c83:	cmp	rbp, rcx
0x2c86:	jae	0x2c9b


0x2b8c:	add	r9, 1
0x2b90:	mov	byte ptr [r10], al
0x2b93:	mov	dword ptr [rdi + 4], 0
0x2b9a:	add	r10, 1
0x2b9e:	add	qword ptr [r8], 1
0x2ba2:	cmp	r9, rsi
0x2ba5:	mov	dword ptr [rdi], 0
0x2bab:	jne	0x2b58


0x29eb:	movzx	eax, byte ptr [rdi + 9]
0x29ef:	movzx	r11d, byte ptr [rdi + 0xa]
0x29f4:	movzx	edx, byte ptr [rdi + 8]
0x29f8:	imul	r11d, r11d, 0x1c39
0x29ff:	imul	eax, eax, 0x95eed
0x2a05:	add	eax, r11d
0x2a08:	movzx	r11d, byte ptr [rdi + 0xb]
0x2a0d:	imul	r11d, r11d, 0x55
0x2a11:	add	eax, r11d
0x2a14:	movzx	r11d, byte ptr [rdi + 0xc]
0x2a19:	add	r11d, eax
0x2a1c:	lea	eax, [rdx - 0x53]
0x2a1f:	cmp	al, 1
0x2a21:	jbe	0x2a80


0x28ff:	xor	edx, 1
0x2902:	mov	byte ptr [rdi + 5], dl
0x2905:	add	r9, 1
0x2909:	cmp	r10, r9
0x290c:	je	0x2950


0x4204:	mov	eax, dword ptr [r14]
0x4207:	jmp	0x418d


0x41ed:	mov	edx, 4
0x41f2:	mov	esi, 0xa
0x41f7:	mov	rdi, r12
0x41fa:	call	0x1710


0x41e7:	cmp	r13, 3
0x41eb:	jle	0x4204


0x418d:	cmp	r12, r15
0x4190:	jae	0x41be


0x4064:	cmp	byte ptr [rsp + 6], 0
0x4069:	mov	rdx, r15
0x406c:	jne	0x4145


0x40b9:	cmp	byte ptr [rsp + 7], 0
0x40be:	je	0x40cb


0x40cb:	mov	rcx, rbp
0x40ce:	mov	rdx, rbx
0x40d1:	mov	rsi, r13
0x40d4:	call	0x3c60


0x3e62:	cmp	rcx, 3
0x3e66:	mov	byte ptr [rdx + 2], 0x3d
0x3e6a:	je	0x3e92


0x3dbc:	shl	r8d, 2
0x3dc0:	cmp	rsi, 2
0x3dc4:	je	0x3e80


0x3d50:	cmp	byte ptr [rdi + 3], 0x3d
0x3d54:	jne	0x3d06


0x3cb4:	cmp	qword ptr [rcx], 0
0x3cb8:	jne	0x3d30


0x3b04:	mov	eax, dword ptr [r14]
0x3b07:	jmp	0x3a85


0x3aed:	mov	edx, 8
0x3af2:	mov	esi, 0xa
0x3af7:	mov	rdi, r12
0x3afa:	call	0x1710


0x3ae7:	cmp	r11, 7
0x3aeb:	jle	0x3b04


0x3a85:	cmp	r12, r15
0x3a88:	jae	0x3ab6


0x3962:	test	r13b, r13b
0x3965:	mov	rdx, r15
0x3968:	jne	0x3a3d


0x39b5:	cmp	byte ptr [rsp + 7], 0
0x39ba:	je	0x39c7


0x39c7:	mov	rcx, rbp
0x39ca:	mov	rdx, rbx
0x39cd:	mov	rsi, r11
0x39d0:	call	0x3460


0x3791:	cmp	rcx, 4
0x3795:	mov	byte ptr [rdx + 3], 0x3d
0x3799:	je	0x37e5


0x365e:	shl	r9d, 4
0x3662:	cmp	rsi, 2
0x3666:	je	0x37d0


0x35f6:	cmp	byte ptr [rdi + 5], 0x3d
0x35fa:	jne	0x35e6


0x34eb:	cmp	qword ptr [rcx], 0
0x34ef:	je	0x3511


0x2a23:	cmp	dl, 0x52
0x2a26:	jne	0x2a31


0x1710:	jmp	qword ptr [rip + 0x2097ea]


0x41be:	mov	r13d, eax
0x41c1:	mov	rdi, qword ptr [rsp + 8]
0x41c6:	test	r13, r13
0x41c9:	jne	0x40b3


0x40c0:	cmp	byte ptr [rsp + 5], 0
0x40c5:	jne	0x41cf


0x3e6c:	cmp	rcx, 4
0x3e70:	mov	byte ptr [rdx + 3], 0x3d
0x3e74:	je	0x3e92


0x3e80:	and	r8d, 0x3c
0x3e84:	cmp	rcx, 3
0x3e88:	movzx	eax, byte ptr [r9 + r8]
0x3e8d:	mov	byte ptr [rdx + 2], al
0x3e90:	jne	0x3e6c


0x3dca:	movzx	eax, byte ptr [rdi + 2]
0x3dce:	mov	r10d, eax
0x3dd1:	shr	r10b, 6
0x3dd5:	add	r8d, r10d
0x3dd8:	and	r8d, 0x3f
0x3ddc:	cmp	rcx, 3
0x3de0:	movzx	r8d, byte ptr [r9 + r8]
0x3de5:	mov	byte ptr [rdx + 2], r8b
0x3de9:	je	0x3e92


0x3d56:	jmp	0x3cf1


0x3cba:	cmp	rsi, 3
0x3cbe:	je	0x3d06


0x3d30:	mov	r11d, r8d
0x3d33:	shl	r10d, 4
0x3d37:	add	rax, 1
0x3d3b:	sar	r11b, 2
0x3d3f:	or	r10d, r11d
0x3d42:	mov	byte ptr [rax - 1], r10b
0x3d46:	sub	qword ptr [rcx], 1
0x3d4a:	jmp	0x3cba


0x3ab6:	mov	r11d, eax
0x3ab9:	mov	rdi, qword ptr [rsp + 8]
0x3abe:	test	r11, r11
0x3ac1:	jne	0x39af


0x39bc:	cmp	byte ptr [rsp + 6], 0
0x39c1:	jne	0x3ac7


0x379b:	cmp	rcx, 5
0x379f:	mov	byte ptr [rdx + 4], 0x3d
0x37a3:	je	0x37e5


0x37d0:	and	r9d, 0x1f
0x37d4:	cmp	rcx, 4
0x37d8:	movsxd	r9, r9d
0x37db:	movzx	eax, byte ptr [r8 + r9]
0x37e0:	mov	byte ptr [rdx + 3], al
0x37e3:	jne	0x379b


0x366c:	movzx	eax, byte ptr [rdi + 2]
0x3670:	mov	r10d, eax
0x3673:	shr	r10b, 4
0x3677:	add	r9d, r10d
0x367a:	and	r9d, 0x1f
0x367e:	cmp	rcx, 4
0x3682:	movzx	r9d, byte ptr [r8 + r9]
0x3687:	mov	byte ptr [rdx + 3], r9b
0x368b:	je	0x37e5


0x35fc:	cmp	byte ptr [rdi + 6], 0x3d
0x3600:	jne	0x35e6


0x3511:	movzx	r8d, byte ptr [rdi + 4]
0x3516:	cmp	r8b, 0x3d
0x351a:	je	0x35f6


0x34f1:	add	r8d, r8d
0x34f4:	shl	r9d, 6
0x34f8:	add	rax, 1
0x34fc:	or	r9d, r8d
0x34ff:	mov	r8d, r10d
0x3502:	sar	r8b, 4
0x3506:	or	r9d, r8d
0x3509:	mov	byte ptr [rax - 1], r9b
0x350d:	sub	qword ptr [rcx], 1
0x3511:	movzx	r8d, byte ptr [rdi + 4]
0x3516:	cmp	r8b, 0x3d
0x351a:	je	0x35f6


0x2a28:	cmp	r11d, 0xdd7f4d
0x2a2f:	jg	0x2a80


0x2a31:	movzx	eax, dl
0x2a34:	add	r9, 1
0x2a38:	add	qword ptr [r8], 4
0x2a3c:	imul	eax, eax, 0x31c84b1
0x2a42:	add	rcx, 4
0x2a46:	mov	dword ptr [rdi + 4], 0
0x2a4d:	add	eax, r11d
0x2a50:	mov	edx, eax
0x2a52:	mov	byte ptr [rcx - 2], ah
0x2a55:	mov	byte ptr [rcx - 1], al
0x2a58:	shr	edx, 0x18
0x2a5b:	mov	byte ptr [rcx - 4], dl
0x2a5e:	mov	edx, eax
0x2a60:	shr	edx, 0x10
0x2a63:	mov	byte ptr [rcx - 3], dl
0x2a66:	cmp	r9, rsi
0x2a69:	jne	0x29ad




0x41b9:	cmp	r12, r15
0x41bc:	jne	0x4198


0x41a7:	lea	ecx, [rax + 1]
0x41aa:	cmp	ecx, 4
0x41ad:	mov	dword ptr [r14], ecx
0x41b0:	mov	byte ptr [r14 + rax + 4], dl
0x41b5:	je	0x4210


0x41cf:	mov	rdx, qword ptr [rsp + 0x20]
0x41d4:	mov	eax, 1
0x41d9:	jmp	0x4108


0x40b3:	cmp	r13, 3
0x40b7:	ja	0x40cb


0x3e76:	xor	esi, esi
0x3e78:	jmp	0x3e0e


0x3def:	and	eax, 0x3f
0x3df2:	cmp	rcx, 4
0x3df6:	movzx	eax, byte ptr [r9 + rax]
0x3dfb:	mov	byte ptr [rdx + 3], al
0x3dfe:	je	0x3e92


0x3cf1:	mov	qword ptr [rdx], rax
0x3cf4:	mov	eax, 1
0x3cf9:	ret	


0x3cc0:	movzx	edi, byte ptr [rdi + 3]
0x3cc4:	cmp	dil, 0x3d
0x3cc8:	je	0x3d60


0x3ab1:	cmp	r12, r15
0x3ab4:	jne	0x3a90


0x3a9f:	lea	ecx, [rax + 1]
0x3aa2:	cmp	ecx, 8
0x3aa5:	mov	dword ptr [r14], ecx
0x3aa8:	mov	byte ptr [r14 + rax + 4], dl
0x3aad:	je	0x3b10


0x3ac7:	mov	rdx, qword ptr [rsp + 0x20]
0x3acc:	mov	eax, 1
0x3ad1:	jmp	0x3a00


0x39af:	cmp	r11, 7
0x39b3:	ja	0x39c7


0x37a5:	cmp	rcx, 6
0x37a9:	mov	byte ptr [rdx + 5], 0x3d
0x37ad:	je	0x37e5


0x3691:	cmp	rsi, 3
0x3695:	lea	r9d, [rax + rax]
0x3699:	je	0x37f0


0x3602:	cmp	byte ptr [rdi + 7], 0x3d
0x3606:	jne	0x35e6


0x3520:	movzx	r8d, byte ptr [rsi + r8]
0x3525:	test	r8b, r8b
0x3528:	js	0x35e6


0x4198:	add	r12, 1
0x419c:	movzx	edx, byte ptr [r12 - 1]
0x41a2:	cmp	dl, 0xa
0x41a5:	je	0x41b9


0x4210:	mov	eax, 4
0x4215:	mov	rdi, qword ptr [rsp + 8]
0x421a:	mov	r13d, eax
0x421d:	test	r13, r13
0x4220:	jne	0x40b3


0x41b7:	mov	eax, ecx
0x41b9:	cmp	r12, r15
0x41bc:	jne	0x4198


0x3e0e:	add	rdx, 4
0x3e12:	sub	rcx, 4
0x3e16:	test	rsi, rsi
0x3e19:	je	0x3f18


0x3e04:	sub	rsi, 3
0x3e08:	je	0x3e0e


0x3d60:	cmp	rsi, 4
0x3d64:	jne	0x3d06


0x3cce:	movzx	esi, byte ptr [r9 + rdi]
0x3cd3:	test	sil, sil
0x3cd6:	js	0x3d06


0x3a90:	add	r12, 1
0x3a94:	movzx	edx, byte ptr [r12 - 1]
0x3a9a:	cmp	dl, 0xa
0x3a9d:	je	0x3ab1


0x3b10:	mov	eax, 8
0x3b15:	mov	rdi, qword ptr [rsp + 8]
0x3b1a:	mov	r11d, eax
0x3b1d:	test	r11, r11
0x3b20:	jne	0x39af


0x3aaf:	mov	eax, ecx
0x3ab1:	cmp	r12, r15
0x3ab4:	jne	0x3a90


0x37af:	cmp	rcx, 7
0x37b3:	mov	byte ptr [rdx + 6], 0x3d
0x37b7:	je	0x37e5


0x37f0:	and	r9d, 0x1e
0x37f4:	cmp	rcx, 5
0x37f8:	movzx	eax, byte ptr [r8 + r9]
0x37fd:	mov	byte ptr [rdx + 4], al
0x3800:	jne	0x37a5


0x369f:	movzx	eax, byte ptr [rdi + 3]
0x36a3:	mov	r10d, eax
0x36a6:	shr	r10b, 7
0x36aa:	add	r9d, r10d
0x36ad:	and	r9d, 0x1f
0x36b1:	cmp	rcx, 5
0x36b5:	movzx	r9d, byte ptr [r8 + r9]
0x36ba:	mov	byte ptr [rdx + 4], r9b
0x36be:	je	0x37e5


0x3608:	jmp	0x35d0


0x352e:	cmp	qword ptr [rcx], 0
0x3532:	je	0x354d


0x4226:	jmp	0x41cf


0x3e0a:	add	rdi, 3
0x3e0e:	add	rdx, 4
0x3e12:	sub	rcx, 4
0x3e16:	test	rsi, rsi
0x3e19:	je	0x3f18


0x3d66:	jmp	0x3cf1


0x3cd8:	cmp	qword ptr [rcx], 0
0x3cdc:	je	0x3cf1


0x3b26:	jmp	0x3ac7


0x37b9:	cmp	rcx, 8
0x37bd:	mov	byte ptr [rdx + 7], 0x3d
0x37c1:	je	0x37e5


0x3802:	ret	


0x36c4:	mov	r9d, eax
0x36c7:	shr	r9b, 2
0x36cb:	and	r9d, 0x1f
0x36cf:	cmp	rcx, 6
0x36d3:	movzx	r9d, byte ptr [r8 + r9]
0x36d8:	mov	byte ptr [rdx + 5], r9b
0x36dc:	je	0x37e5


0x35d0:	mov	qword ptr [rdx], rax
0x35d3:	mov	eax, 1
0x35d8:	ret	


0x354d:	movzx	r9d, byte ptr [rdi + 5]
0x3552:	cmp	r9b, 0x3d
0x3556:	je	0x35fc


0x3534:	mov	r9d, r8d
0x3537:	shl	r10d, 4
0x353b:	add	rax, 1
0x353f:	sar	r9b, 1
0x3542:	or	r10d, r9d
0x3545:	mov	byte ptr [rax - 1], r10b
0x3549:	sub	qword ptr [rcx], 1
0x354d:	movzx	r9d, byte ptr [rdi + 5]
0x3552:	cmp	r9b, 0x3d
0x3556:	je	0x35fc


0x3cde:	shl	r8d, 6
0x3ce2:	add	rax, 1
0x3ce6:	or	r8d, esi
0x3ce9:	mov	byte ptr [rax - 1], r8b
0x3ced:	sub	qword ptr [rcx], 1
0x3cf1:	mov	qword ptr [rdx], rax
0x3cf4:	mov	eax, 1
0x3cf9:	ret	


0x37c3:	xor	esi, esi
0x37c5:	jmp	0x3733


0x36e2:	shl	eax, 3
0x36e5:	cmp	rsi, 4
0x36e9:	je	0x3808


0x355c:	movzx	r9d, byte ptr [rsi + r9]
0x3561:	test	r9b, r9b
0x3564:	js	0x35e6


0x3733:	add	rdx, 8
0x3737:	sub	rcx, 8
0x373b:	test	rsi, rsi
0x373e:	je	0x3820


0x3808:	and	eax, 0x18
0x380b:	cmp	rcx, 7
0x380f:	movzx	eax, byte ptr [r8 + rax]
0x3814:	mov	byte ptr [rdx + 6], al
0x3817:	je	0x37e5


0x36ef:	movzx	r9d, byte ptr [rdi + 4]
0x36f4:	mov	r10d, r9d
0x36f7:	shr	r10b, 5
0x36fb:	add	eax, r10d
0x36fe:	and	eax, 0x1f
0x3701:	cmp	rcx, 7
0x3705:	movzx	eax, byte ptr [r8 + rax]
0x370a:	mov	byte ptr [rdx + 6], al
0x370d:	je	0x37e5


0x356a:	movzx	r10d, byte ptr [rdi + 6]
0x356f:	movzx	r10d, byte ptr [rsi + r10]
0x3574:	test	r10b, r10b
0x3577:	js	0x35e6


0x3819:	jmp	0x37b9


0x3713:	and	r9d, 0x1f
0x3717:	cmp	rcx, 8
0x371b:	movzx	eax, byte ptr [r8 + r9]
0x3720:	mov	byte ptr [rdx + 7], al
0x3723:	je	0x37e5


0x3579:	cmp	qword ptr [rcx], 0
0x357d:	je	0x35a0


0x3729:	sub	rsi, 5
0x372d:	je	0x3733


0x35a0:	movzx	edi, byte ptr [rdi + 7]
0x35a4:	cmp	dil, 0x3d
0x35a8:	je	0x35d0


0x357f:	shl	r9d, 2
0x3583:	shl	r8d, 7
0x3587:	add	rax, 1
0x358b:	or	r8d, r9d
0x358e:	mov	r9d, r10d
0x3591:	sar	r9b, 3
0x3595:	or	r8d, r9d
0x3598:	mov	byte ptr [rax - 1], r8b
0x359c:	sub	qword ptr [rcx], 1
0x35a0:	movzx	edi, byte ptr [rdi + 7]
0x35a4:	cmp	dil, 0x3d
0x35a8:	je	0x35d0


0x372f:	add	rdi, 5
0x3733:	add	rdx, 8
0x3737:	sub	rcx, 8
0x373b:	test	rsi, rsi
0x373e:	je	0x3820


0x35aa:	movzx	esi, byte ptr [rsi + rdi]
0x35ae:	test	sil, sil
0x35b1:	js	0x35e6


0x35b3:	cmp	qword ptr [rcx], 0
0x35b7:	je	0x35d0


0x35b9:	shl	r10d, 5
0x35bd:	add	rax, 1
0x35c1:	or	r10d, esi
0x35c4:	mov	byte ptr [rax - 1], r10b
0x35c8:	sub	qword ptr [rcx], 1
0x35cc:	nop	dword ptr [rax]
0x35d0:	mov	qword ptr [rdx], rax
0x35d3:	mov	eax, 1
0x35d8:	ret	


0x24d8:	mov	byte ptr [rip + 0x208be9], 1
0x24df:	pop	rbp
0x24e0:	ret	


0x39d5:	test	al, al
0x39d7:	je	0x3b8f


0x3b8f:	mov	rdx, qword ptr [rsp + 0x20]
0x3b94:	jmp	0x3a00


0x39dd:	mov	r11, r15
0x39e0:	mov	r15, qword ptr [rsp + 0x20]
0x39e5:	sub	r11, r12
0x39e8:	test	r13b, r13b
0x39eb:	mov	rdx, r15
0x39ee:	jne	0x3a3d


0x39f0:	test	r11, r11
0x39f3:	sete	al
0x39f6:	and	al, byte ptr [rsp + 6]
0x39fa:	je	0x397e


0x3a4e:	test	al, al
0x3a50:	jne	0x3a30


0x3a52:	mov	rdx, qword ptr [rsp + 0x20]
0x3a57:	jmp	0x396e


0x3a30:	mov	r15, qword ptr [rsp + 0x20]
0x3a35:	add	r12, 8
0x3a39:	sub	r11, 8
0x3a3d:	mov	rcx, rbp
0x3a40:	mov	rdx, rbx
0x3a43:	mov	rsi, r11
0x3a46:	mov	rdi, r12
0x3a49:	call	0x3460


0x40d9:	test	al, al
0x40db:	je	0x428e


0x428e:	mov	rdx, qword ptr [rsp + 0x20]
0x4293:	jmp	0x4108


0x40e1:	sub	r15, r12
0x40e4:	cmp	byte ptr [rsp + 6], 0
0x40e9:	mov	r13, r15
0x40ec:	mov	r15, qword ptr [rsp + 0x20]
0x40f1:	mov	rdx, r15
0x40f4:	jne	0x4145


0x40f6:	test	r13, r13
0x40f9:	sete	al
0x40fc:	and	al, byte ptr [rsp + 5]
0x4100:	je	0x4082


0x4156:	test	al, al
0x4158:	jne	0x4138


0x415a:	mov	rdx, qword ptr [rsp + 0x20]
0x415f:	jmp	0x4072


0x4138:	mov	r15, qword ptr [rsp + 0x20]
0x413d:	add	r12, 4
0x4141:	sub	r13, 4
0x4145:	mov	rcx, rbp
0x4148:	mov	rdx, rbx
0x414b:	mov	rsi, r13
0x414e:	mov	rdi, r12
0x4151:	call	0x3c60


0x26e1:	test	rbp, rbp
0x26e4:	je	0x2713


0x2713:	add	rsp, 8
0x2717:	pop	rbx
0x2718:	pop	rbp
0x2719:	ret	


0x26e6:	lea	rcx, [rbx + rbp]
0x26ea:	jmp	0x2700


0x2700:	movzx	eax, byte ptr [rbx]
0x2703:	cmp	al, 0x2b
0x2705:	jne	0x26f0


0x2707:	mov	byte ptr [rbx], 0x2d
0x270a:	add	rbx, 1
0x270e:	cmp	rbx, rcx
0x2711:	jne	0x2700


0x26f0:	cmp	al, 0x2f
0x26f2:	jne	0x26f7


0x26f4:	mov	byte ptr [rbx], 0x5f
0x26f7:	add	rbx, 1
0x26fb:	cmp	rbx, rcx
0x26fe:	je	0x2713


0x26f7:	add	rbx, 1
0x26fb:	cmp	rbx, rcx
0x26fe:	je	0x2713


0x2efe:	mov	edx, dword ptr [rbx + 4]
0x2f01:	mov	dword ptr [rbx], edx
0x2f03:	add	rsp, 0x28
0x2f07:	pop	rbx
0x2f08:	pop	rbp
0x2f09:	ret	


0x280d:	mov	edx, dword ptr [rbx + 4]
0x2810:	mov	dword ptr [rbx], edx
0x2812:	pop	rbx
0x2813:	ret	


0x282d:	mov	qword ptr [rbx + 0x18], 0x1400
0x2835:	mov	edi, 0x1400
0x283a:	call	0x67c0


0x286d:	mov	edx, dword ptr [rbx + 4]
0x2870:	mov	dword ptr [rbx], edx
0x2872:	pop	rbx
0x2873:	ret	


0x288d:	mov	qword ptr [rbx + 0x18], 0x1400
0x2895:	mov	edi, 0x1400
0x289a:	call	0x67c0


0x2d21:	test	rbp, rbp
0x2d24:	je	0x2d60


0x2d60:	add	rsp, 8
0x2d64:	pop	rbx
0x2d65:	pop	rbp
0x2d66:	ret	


0x2d26:	movsx	eax, byte ptr [rbx]
0x2d29:	lea	edx, [rax - 0x32]
0x2d2c:	cmp	dl, 0x28
0x2d2f:	ja	0x2d67


0x2d31:	lea	rcx, [rbx + rbp]
0x2d35:	lea	rsi, [rip + 0x5064]
0x2d3c:	jmp	0x2d4b


0x2d67:	lea	rcx, [rip + 0x4ef2]
0x2d6e:	lea	rsi, [rip + 0x47fb]
0x2d75:	lea	rdi, [rip + 0x45c0]
0x2d7c:	mov	edx, 0x1c2
0x2d81:	call	0x16d0


0x2d4b:	sub	eax, 0x32
0x2d4e:	add	rbx, 1
0x2d52:	cdqe	
0x2d54:	movzx	eax, byte ptr [rsi + rax]
0x2d58:	mov	byte ptr [rbx - 1], al
0x2d5b:	cmp	rbx, rcx
0x2d5e:	jne	0x2d40


0x2d40:	movsx	eax, byte ptr [rbx]
0x2d43:	lea	edx, [rax - 0x32]
0x2d46:	cmp	dl, 0x28
0x2d49:	ja	0x2d67


0x72a1:	test	rbp, rbp
0x72a4:	je	0x72c6


0x72c6:	add	rsp, 8
0x72ca:	pop	rbx
0x72cb:	pop	rbp
0x72cc:	pop	r12
0x72ce:	pop	r13
0x72d0:	pop	r14
0x72d2:	pop	r15
0x72d4:	ret	


0x72a6:	xor	ebx, ebx
0x72a8:	nop	dword ptr [rax + rax]
0x72b0:	mov	rdx, r15
0x72b3:	mov	rsi, r14
0x72b6:	mov	edi, r13d
0x72b9:	call	qword ptr [r12 + rbx*8]


0x3aff:	test	rax, rax
0x3b02:	je	0x3b7d


0x3b7d:	mov	rdi, r12
0x3b80:	mov	r11d, 8
0x3b86:	add	r12, 8
0x3b8a:	jmp	0x39c7


0x41ff:	test	rax, rax
0x4202:	je	0x427c


0x427c:	mov	rdi, r12
0x427f:	mov	r13d, 4
0x4285:	add	r12, 4
0x4289:	jmp	0x40cb


0x27d7:	test	rax, rax
0x27da:	setne	al
0x27dd:	add	rsp, 8
0x27e1:	ret	


0x69af:	test	rax, rax
0x69b2:	je	0x69b9


0x69b4:	add	rsp, 8
0x69b8:	ret	


0x2dc0:	test	r13, r13
0x2dc3:	mov	rsi, qword ptr [rbx + 0x10]
0x2dc7:	je	0x2e11


0x2e11:	lea	rdi, [rbx + 4]
0x2e15:	mov	rdx, r13
0x2e18:	mov	r8, r12
0x2e1b:	mov	rcx, rbp
0x2e1e:	call	0x3ff0


0x2dc9:	movzx	eax, byte ptr [rsi]
0x2dcc:	lea	rcx, [rsi + r13]
0x2dd0:	mov	edx, eax
0x2dd2:	and	edx, 0xfffffffb
0x2dd5:	cmp	dl, 0x2b
0x2dd8:	jne	0x2dfd


0x2dda:	jmp	0x2e38


0x2dfd:	cmp	al, 0x2d
0x2dff:	jne	0x2de0


0x2e38:	pop	rbx
0x2e39:	mov	qword ptr [r12], 0
0x2e41:	xor	eax, eax
0x2e43:	pop	rbp
0x2e44:	pop	r12
0x2e46:	pop	r13
0x2e48:	pop	r14
0x2e4a:	ret	


0x2e01:	mov	byte ptr [rsi], 0x2b
0x2e04:	add	rsi, 1
0x2e08:	cmp	rsi, rcx
0x2e0b:	jne	0x2df0


0x2de0:	cmp	al, 0x5f
0x2de2:	jne	0x2de7


0x2e0d:	mov	rsi, qword ptr [rbx + 0x10]
0x2e11:	lea	rdi, [rbx + 4]
0x2e15:	mov	rdx, r13
0x2e18:	mov	r8, r12
0x2e1b:	mov	rcx, rbp
0x2e1e:	call	0x3ff0


0x2df0:	movzx	eax, byte ptr [rsi]
0x2df3:	mov	edx, eax
0x2df5:	and	edx, 0xfffffffb
0x2df8:	cmp	dl, 0x2b
0x2dfb:	je	0x2e38


0x2de4:	mov	byte ptr [rsi], 0x2f
0x2de7:	add	rsi, 1
0x2deb:	cmp	rsi, rcx
0x2dee:	je	0x2e0d


0x2de7:	add	rsi, 1
0x2deb:	cmp	rsi, rcx
0x2dee:	je	0x2e0d


0x2e23:	mov	edx, dword ptr [rbx + 4]
0x2e26:	mov	dword ptr [rbx], edx
0x2e28:	pop	rbx
0x2e29:	pop	rbp
0x2e2a:	pop	r12
0x2e2c:	pop	r13
0x2e2e:	pop	r14
0x2e30:	ret	


0x4483:	test	rax, rax
0x4486:	je	0x44dd


0x44dd:	mov	qword ptr [rip + 0x206c24], rbx
0x44e4:	mov	qword ptr [rip + 0x206bbd], rbx
0x44eb:	pop	rbx
0x44ec:	ret	


0x4488:	lea	r8, [rax + 1]
0x448c:	mov	rdx, r8
0x448f:	sub	rdx, rbx
0x4492:	cmp	rdx, 6
0x4496:	jle	0x44dd


0x4498:	lea	rsi, [rax - 6]
0x449c:	lea	rdi, [rip + 0x3bdd]
0x44a3:	mov	ecx, 7
0x44a8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x44a8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x44aa:	seta	dl
0x44ad:	sbb	dl, 0
0x44b0:	test	dl, dl
0x44b2:	jne	0x44dd


0x44b4:	lea	rdi, [rip + 0x3bcd]
0x44bb:	mov	ecx, 3
0x44c0:	mov	rsi, r8
0x44c3:	mov	rbx, r8
0x44c6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x44c6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x44c8:	seta	dl
0x44cb:	sbb	dl, 0
0x44ce:	test	dl, dl
0x44d0:	jne	0x44dd


0x44d2:	lea	rbx, [rax + 4]
0x44d6:	mov	qword ptr [rip + 0x206ba3], rbx
0x44dd:	mov	qword ptr [rip + 0x206c24], rbx
0x44e4:	mov	qword ptr [rip + 0x206bbd], rbx
0x44eb:	pop	rbx
0x44ec:	ret	


0x450a:	call	0x15a0


0x5cfd:	mov	qword ptr [rip + 0x20535c], rbx
0x5d04:	pop	rbx
0x5d05:	mov	dword ptr [rip + 0x205349], 1
0x5d0f:	pop	rbp
0x5d10:	pop	r12
0x5d12:	ret	


0x5cd7:	mov	qword ptr [rip + 0x20538e], 0x100
0x5ce2:	mov	qword ptr [rip + 0x20538f], rbx
0x5ce9:	lea	rbx, [rip + 0x205380]
0x5cf0:	cmp	r12, rbx
0x5cf3:	je	0x5d04


0x684d:	xor	eax, eax
0x684f:	pop	rbx
0x6850:	ret	


0x2e62:	mov	rdi, rax
0x2e65:	mov	qword ptr [rbx + 0x10], rax
0x2e69:	jmp	0x2db5


0x2f34:	mov	rdx, qword ptr [rsp + 8]
0x2f39:	mov	qword ptr [rbx + 0x10], rax
0x2f3d:	mov	rcx, qword ptr [rsp + 0x10]
0x2f42:	mov	r8, qword ptr [rsp + 0x18]
0x2f47:	jmp	0x2e96


0x5cbc:	cmp	rbx, rbp
0x5cbf:	jne	0x5cb0


0x5cb0:	mov	rdi, qword ptr [rbx]
0x5cb3:	add	rbx, 0x10
0x5cb7:	call	0x1590


0x61dc:	lea	rsi, [rip + 0x2398]
0x61e3:	xor	edi, edi
0x61e5:	mov	edx, 5
0x61ea:	call	0x1630


0x62f1:	jmp	0x61dc


0x6836:	test	rax, rax
0x6839:	jne	0x6840


0x683b:	test	rbx, rbx
0x683e:	jne	0x6851


0x6840:	pop	rbx
0x6841:	ret	


0x6851:	call	0x6a10


0x702e:	test	eax, eax
0x7030:	je	0x703a


0x7032:	test	dword ptr [rbx], 0x100
0x7038:	jne	0x7048


0x7048:	mov	rdi, rbx
0x704b:	mov	edx, 1
0x7050:	xor	esi, esi
0x7052:	call	0x7060


0x18fa:	lea	rsi, [rip + 0x6cc0]
0x1901:	mov	edi, 6
0x1906:	call	0x17e0


0x4671:	cmp	r15d, 0xa
0x4675:	mov	qword ptr [rsp + 0x58], rax
0x467a:	ja	0x582f


0x4680:	lea	rcx, [rip + 0x3a79]
0x4687:	mov	edx, r15d
0x468a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x468e:	add	rax, rcx
0x4691:	jmp	rax


0x582f:	call	0x15a0


0x6bc8:	mov	dword ptr [rax], 0
0x6bce:	mov	r12, rax
0x6bd1:	movzx	ebx, byte ptr [rbp]
0x6bd5:	call	0x18a0


0x18a0:	jmp	qword ptr [rip + 0x209722]




0x5861:	mov	r13, rax
0x5864:	mov	eax, dword ptr [rax]
0x5866:	test	r15d, r15d
0x5869:	mov	rbx, qword ptr [rip + 0x2057f0]
0x5870:	mov	dword ptr [rsp + 0x18], eax
0x5874:	js	0x59e1


0x59e1:	call	0x15a0


0x587a:	cmp	dword ptr [rip + 0x2057d7], r15d
0x5881:	jg	0x58e5


0x5883:	cmp	r15d, 0x7fffffff
0x588a:	je	0x59e6


0x58e5:	mov	eax, dword ptr [rbp + 4]
0x58e8:	shl	r15, 4
0x58ec:	sub	rsp, 8
0x58f0:	add	rbx, r15
0x58f3:	lea	r15, [rbp + 8]
0x58f7:	mov	r8d, dword ptr [rbp]
0x58fb:	mov	r11, qword ptr [rbx]
0x58fe:	mov	r12, qword ptr [rbx + 8]
0x5902:	mov	rcx, r14
0x5905:	or	eax, 1
0x5908:	mov	dword ptr [rsp + 0x24], eax
0x590c:	push	qword ptr [rbp + 0x30]
0x590f:	mov	r9d, eax
0x5912:	push	qword ptr [rbp + 0x28]
0x5915:	push	r15
0x5917:	mov	rsi, r11
0x591a:	mov	rdx, qword ptr [rsp + 0x28]
0x591f:	mov	rdi, r12
0x5922:	mov	qword ptr [rsp + 0x30], r11
0x5927:	call	0x4600


0x59e6:	call	0x6a10


0x5890:	lea	r12d, [r15 + 1]
0x5894:	lea	rax, [rip + 0x2057d5]
0x589b:	movsxd	rsi, r12d
0x589e:	shl	rsi, 4
0x58a2:	cmp	rbx, rax
0x58a5:	je	0x59c0


0x59c0:	xor	edi, edi
0x59c2:	call	0x6820


0x58ab:	mov	rdi, rbx
0x58ae:	call	0x6820


0x58b3:	mov	rbx, rax
0x58b6:	mov	qword ptr [rip + 0x2057a3], rax
0x58bd:	movsxd	rdi, dword ptr [rip + 0x205794]
0x58c4:	mov	edx, r12d
0x58c7:	xor	esi, esi
0x58c9:	sub	edx, edi
0x58cb:	shl	rdi, 4
0x58cf:	movsxd	rdx, edx
0x58d2:	add	rdi, rbx
0x58d5:	shl	rdx, 4
0x58d9:	call	0x16f0


0x16f0:	jmp	qword ptr [rip + 0x2097fa]




0x59c7:	movdqa	xmm0, xmmword ptr [rip + 0x2056a1]
0x59cf:	mov	rbx, rax
0x59d2:	mov	qword ptr [rip + 0x205687], rax
0x59d9:	movups	xmmword ptr [rax], xmm0
0x59dc:	jmp	0x58bd


0x58bd:	movsxd	rdi, dword ptr [rip + 0x205794]
0x58c4:	mov	edx, r12d
0x58c7:	xor	esi, esi
0x58c9:	sub	edx, edi
0x58cb:	shl	rdi, 4
0x58cf:	movsxd	rdx, edx
0x58d2:	add	rdi, rbx
0x58d5:	shl	rdx, 4
0x58d9:	call	0x16f0


0x59fc:	mov	r12d, dword ptr [rax]
0x59ff:	mov	rbp, rax
0x5a02:	lea	rax, [rip + 0x205817]
0x5a09:	test	rbx, rbx
0x5a0c:	mov	esi, 0x38
0x5a11:	cmove	rbx, rax
0x5a15:	mov	rdi, rbx
0x5a18:	call	0x69c0


0x5b32:	mov	r12d, dword ptr [rax]
0x5b35:	mov	rbp, rax
0x5b38:	lea	rax, [rbx + 8]
0x5b3c:	sub	rsp, 8
0x5b40:	mov	r9d, dword ptr [rbx + 4]
0x5b44:	push	qword ptr [rbx + 0x30]
0x5b47:	mov	r8d, dword ptr [rbx]
0x5b4a:	push	qword ptr [rbx + 0x28]
0x5b4d:	mov	rdx, r15
0x5b50:	push	rax
0x5b51:	mov	rcx, qword ptr [rsp + 0x28]
0x5b56:	mov	rsi, r14
0x5b59:	mov	rdi, r13
0x5b5c:	call	0x4600


0x5baf:	test	r12, r12
0x5bb2:	mov	r13, rax
0x5bb5:	mov	eax, dword ptr [rax]
0x5bb7:	sete	bpl
0x5bbb:	or	ebp, dword ptr [rbx + 4]
0x5bbe:	lea	r10, [rbx + 8]
0x5bc2:	sub	rsp, 8
0x5bc6:	mov	r8d, dword ptr [rbx]
0x5bc9:	mov	rcx, r15
0x5bcc:	mov	dword ptr [rsp + 0x14], eax
0x5bd0:	push	qword ptr [rbx + 0x30]
0x5bd3:	mov	rdx, r14
0x5bd6:	push	qword ptr [rbx + 0x28]
0x5bd9:	push	r10
0x5bdb:	xor	esi, esi
0x5bdd:	mov	r9d, ebp
0x5be0:	xor	edi, edi
0x5be2:	mov	qword ptr [rsp + 0x40], r10
0x5be7:	call	0x4600


0x388e:	test	rax, rax
0x3891:	mov	qword ptr [r13], rax
0x3895:	je	0x386e


0x386e:	pop	rbx
0x386f:	mov	rax, rbp
0x3872:	pop	rbp
0x3873:	pop	r12
0x3875:	pop	r13
0x3877:	pop	r14
0x3879:	ret	


0x3897:	mov	rcx, rbp
0x389a:	mov	rdx, rax
0x389d:	mov	rbp, rbx
0x38a0:	mov	rsi, r12
0x38a3:	mov	rdi, r14
0x38a6:	call	0x3610


0x38ab:	pop	rbx
0x38ac:	mov	rax, rbp
0x38af:	pop	rbp
0x38b0:	pop	r12
0x38b2:	pop	r13
0x38b4:	pop	r14
0x38b6:	ret	


0x3f8e:	test	rax, rax
0x3f91:	mov	qword ptr [r13], rax
0x3f95:	je	0x3f6d


0x3f6d:	pop	rbx
0x3f6e:	mov	rax, rbp
0x3f71:	pop	rbp
0x3f72:	pop	r12
0x3f74:	pop	r13
0x3f76:	pop	r14
0x3f78:	ret	


0x3f97:	mov	rcx, rbp
0x3f9a:	mov	rdx, rax
0x3f9d:	mov	rbp, rbx
0x3fa0:	mov	rsi, r12
0x3fa3:	mov	rdi, r14
0x3fa6:	call	0x3d70


0x3fab:	pop	rbx
0x3fac:	mov	rax, rbp
0x3faf:	pop	rbp
0x3fb0:	pop	r12
0x3fb2:	pop	r13
0x3fb4:	pop	r14
0x3fb6:	ret	


0x3be1:	test	rax, rax
0x3be4:	mov	qword ptr [rbx], rax
0x3be7:	je	0x3c18


0x3c18:	mov	eax, 1
0x3c1d:	mov	rcx, qword ptr [rsp + 0x18]
0x3c22:	xor	rcx, qword ptr fs:[0x28]
0x3c2b:	jne	0x3c5a


0x3be9:	lea	r8, [rsp + 0x10]
0x3bee:	mov	rcx, rax
0x3bf1:	mov	rdx, r14
0x3bf4:	mov	rsi, r13
0x3bf7:	mov	rdi, r12
0x3bfa:	call	0x38f0


0x3c2d:	add	rsp, 0x20
0x3c31:	pop	rbx
0x3c32:	pop	rbp
0x3c33:	pop	r12
0x3c35:	pop	r13
0x3c37:	pop	r14
0x3c39:	ret	


0x3c5a:	call	0x1660


0x3bff:	test	al, al
0x3c01:	je	0x3c40


0x3c40:	mov	rdi, qword ptr [rbx]
0x3c43:	mov	byte ptr [rsp + 0xf], al
0x3c47:	call	0x1590


0x3c03:	test	rbp, rbp
0x3c06:	je	0x3c18


0x3c08:	mov	rdx, qword ptr [rsp + 0x10]
0x3c0d:	mov	qword ptr [rbp], rdx
0x3c11:	jmp	0x3c1d


0x3c1d:	mov	rcx, qword ptr [rsp + 0x18]
0x3c22:	xor	rcx, qword ptr fs:[0x28]
0x3c2b:	jne	0x3c5a


0x3c4c:	mov	qword ptr [rbx], 0
0x3c53:	movzx	eax, byte ptr [rsp + 0xf]
0x3c58:	jmp	0x3c1d


0x42e1:	test	rax, rax
0x42e4:	mov	qword ptr [rbx], rax
0x42e7:	je	0x4318


0x4318:	mov	eax, 1
0x431d:	mov	rcx, qword ptr [rsp + 0x18]
0x4322:	xor	rcx, qword ptr fs:[0x28]
0x432b:	jne	0x435a


0x42e9:	lea	r8, [rsp + 0x10]
0x42ee:	mov	rcx, rax
0x42f1:	mov	rdx, r14
0x42f4:	mov	rsi, r13
0x42f7:	mov	rdi, r12
0x42fa:	call	0x3ff0


0x432d:	add	rsp, 0x20
0x4331:	pop	rbx
0x4332:	pop	rbp
0x4333:	pop	r12
0x4335:	pop	r13
0x4337:	pop	r14
0x4339:	ret	


0x435a:	call	0x1660


0x42ff:	test	al, al
0x4301:	je	0x4340


0x4340:	mov	rdi, qword ptr [rbx]
0x4343:	mov	byte ptr [rsp + 0xf], al
0x4347:	call	0x1590


0x4303:	test	rbp, rbp
0x4306:	je	0x4318


0x4308:	mov	rdx, qword ptr [rsp + 0x10]
0x430d:	mov	qword ptr [rbp], rdx
0x4311:	jmp	0x431d


0x431d:	mov	rcx, qword ptr [rsp + 0x18]
0x4322:	xor	rcx, qword ptr fs:[0x28]
0x432b:	jne	0x435a


0x434c:	mov	qword ptr [rbx], 0
0x4353:	movzx	eax, byte ptr [rsp + 0xf]
0x4358:	jmp	0x431d


0x67c9:	test	rax, rax
0x67cc:	jne	0x67d3


0x67ce:	test	rbx, rbx
0x67d1:	jne	0x67d5


0x67d3:	pop	rbx
0x67d4:	ret	


0x67d5:	call	0x6a10


0x289f:	mov	qword ptr [rbx + 0x10], rax
0x28a3:	pop	rbx
0x28a4:	ret	


0x283f:	mov	qword ptr [rbx + 0x10], rax
0x2843:	pop	rbx
0x2844:	ret	


0x2736:	mov	qword ptr [rbx], 1
0x273d:	mov	qword ptr [rbx + 0x10], rax
0x2741:	pop	rbx
0x2742:	ret	


0x2766:	mov	qword ptr [rbx], 0
0x276d:	mov	qword ptr [rbx + 0x10], rax
0x2771:	pop	rbx
0x2772:	ret	


0x2796:	mov	byte ptr [rbx + 5], 0
0x279a:	mov	qword ptr [rbx + 0x10], rax
0x279e:	mov	dword ptr [rbx], 1
0x27a4:	pop	rbx
0x27a5:	ret	


0x6979:	mov	rdx, rbx
0x697c:	xor	esi, esi
0x697e:	mov	rdi, rax
0x6981:	pop	rbx
0x6982:	jmp	0x16f0


0x69d4:	add	rsp, 8
0x69d8:	mov	rdx, rbx
0x69db:	mov	rsi, rbp
0x69de:	pop	rbx
0x69df:	pop	rbp
0x69e0:	mov	rdi, rax
0x69e3:	jmp	0x1760


0x69f9:	mov	rdi, rbx
0x69fc:	lea	rsi, [rax + 1]
0x6a00:	pop	rbx
0x6a01:	jmp	0x69c0


0x61ef:	lea	rdx, [rip + 0x26aa]
0x61f6:	mov	rcx, rax
0x61f9:	mov	r8d, 0x7e3
0x61ff:	mov	esi, 1
0x6204:	mov	rdi, rbp
0x6207:	xor	eax, eax
0x6209:	call	0x1870


0x620e:	lea	rsi, [rip + 0x23f3]
0x6215:	xor	edi, edi
0x6217:	mov	edx, 5
0x621c:	call	0x1630


0x6221:	mov	rsi, rbp
0x6224:	mov	rdi, rax
0x6227:	call	0x1730


0x1730:	jmp	qword ptr [rip + 0x2097da]




0x2cf2:	xor	esi, esi
0x2cf4:	mov	rdx, rax
0x2cf7:	mov	edi, 1
0x2cfc:	xor	eax, eax
0x2cfe:	call	0x1810


0x1810:	jmp	qword ptr [rip + 0x20976a]




0x2f9d:	mov	rdi, qword ptr [rip + 0x20811c]
0x2fa4:	mov	rdx, rax
0x2fa7:	mov	rcx, rbx
0x2faa:	mov	esi, 1
0x2faf:	xor	eax, eax
0x2fb1:	call	0x1870


0x2fb6:	mov	edi, ebp
0x2fb8:	call	0x1850


0x1850:	jmp	qword ptr [rip + 0x20974a]




0x2fcb:	mov	rdx, rbx
0x2fce:	mov	rsi, rax
0x2fd1:	mov	edi, 1
0x2fd6:	xor	eax, eax
0x2fd8:	call	0x17f0


0x17f0:	jmp	qword ptr [rip + 0x20977a]




0x6754:	lea	rdx, [rip + 0x1e7c]
0x675b:	mov	rsi, rax
0x675e:	mov	edi, 1
0x6763:	xor	eax, eax
0x6765:	call	0x17f0


0x6a27:	mov	edi, dword ptr [rip + 0x2045eb]
0x6a2d:	lea	rdx, [rip + 0x1610]
0x6a34:	mov	rcx, rax
0x6a37:	xor	esi, esi
0x6a39:	xor	eax, eax
0x6a3b:	call	0x1810


0x7093:	mov	edx, r12d
0x7096:	mov	rsi, rbp
0x7099:	mov	edi, eax
0x709b:	call	0x16c0


0x16c0:	jmp	qword ptr [rip + 0x209812]




0x444d:	mov	ecx, ebx
0x444f:	xor	edx, edx
0x4451:	xor	esi, esi
0x4453:	pop	rbx
0x4454:	mov	edi, eax
0x4456:	jmp	0x1700


0x6fac:	test	eax, eax
0x6fae:	mov	rdi, rbx
0x6fb1:	js	0x7007


0x7007:	pop	rbx
0x7008:	pop	rbp
0x7009:	pop	r12
0x700b:	jmp	0x1610


0x6fb3:	call	0x17b0


0x1610:	jmp	qword ptr [rip + 0x20986a]




0x6fb8:	test	eax, eax
0x6fba:	jne	0x6fe8


0x6fbc:	mov	rdi, rbx
0x6fbf:	call	0x7020


0x6fe8:	mov	rdi, rbx
0x6feb:	call	0x1770


0x6ff0:	xor	esi, esi
0x6ff2:	mov	edx, 1
0x6ff7:	mov	edi, eax
0x6ff9:	call	0x16c0


0x70f7:	cmp	rax, -3
0x70fb:	mov	rbp, rax
0x70fe:	jbe	0x7120


0x7120:	mov	rdx, qword ptr [rsp + 8]
0x7125:	xor	rdx, qword ptr fs:[0x28]
0x712e:	mov	rax, rbp
0x7131:	jne	0x713e


0x7100:	test	r12, r12
0x7103:	je	0x7120


0x7133:	add	rsp, 0x18
0x7137:	pop	rbx
0x7138:	pop	rbp
0x7139:	pop	r12
0x713b:	pop	r13
0x713d:	ret	


0x713e:	call	0x1660


0x7105:	xor	edi, edi
0x7107:	call	0x71d0


0x715c:	mov	ebx, dword ptr [rbp]
0x715f:	mov	rdi, rbp
0x7162:	mov	r12, rax
0x7165:	call	0x6fa0


0x190b:	lea	rsi, [rip + 0x5b0b]
0x1912:	lea	rdi, [rip + 0x5adb]
0x1919:	call	0x1620


0x1620:	jmp	qword ptr [rip + 0x209862]




0x71db:	mov	rdx, rax
0x71de:	mov	eax, 1
0x71e3:	test	rdx, rdx
0x71e6:	je	0x7205


0x7205:	add	rsp, 8
0x7209:	ret	


0x71e8:	lea	rdi, [rip + 0x181c]
0x71ef:	mov	ecx, 2
0x71f4:	mov	rsi, rdx
0x71f7:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x71f7:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x71f9:	seta	cl
0x71fc:	sbb	cl, 0
0x71ff:	xor	eax, eax
0x7201:	test	cl, cl
0x7203:	jne	0x7210


0x7210:	lea	rdi, [rip + 0x17f6]
0x7217:	mov	ecx, 6
0x721c:	mov	rsi, rdx
0x721f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x721f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7221:	seta	al
0x7224:	sbb	al, 0
0x7226:	test	al, al
0x7228:	setne	al
0x722b:	add	rsp, 8
0x722f:	ret	


0x710c:	test	al, al
0x710e:	jne	0x7120


0x7110:	movzx	eax, byte ptr [r13]
0x7115:	mov	ebp, 1
0x711a:	mov	dword ptr [rbx], eax
0x711c:	nop	dword ptr [rax]
0x7120:	mov	rdx, qword ptr [rsp + 8]
0x7125:	xor	rdx, qword ptr fs:[0x28]
0x712e:	mov	rax, rbp
0x7131:	jne	0x713e


0x723e:	test	rax, rax
0x7241:	je	0x7260


0x7260:	lea	rax, [rip + 0x17ac]
0x7267:	add	rsp, 8
0x726b:	ret	


0x7243:	cmp	byte ptr [rax], 0
0x7246:	lea	rdx, [rip + 0x17c6]
0x724d:	cmove	rax, rdx
0x7251:	add	rsp, 8
0x7255:	ret	


0x4520:	movzx	edx, byte ptr [rax]
0x4523:	and	edx, 0xffffffdf
0x4526:	cmp	dl, 0x55
0x4529:	je	0x45a0


0x45a0:	movzx	edx, byte ptr [rax + 1]
0x45a4:	and	edx, 0xffffffdf
0x45a7:	cmp	dl, 0x54
0x45aa:	jne	0x4530


0x452b:	cmp	dl, 0x47
0x452e:	je	0x4550


0x45ac:	movzx	edx, byte ptr [rax + 2]
0x45b0:	and	edx, 0xffffffdf
0x45b3:	cmp	dl, 0x46
0x45b6:	jne	0x4530


0x4530:	lea	rax, [rip + 0x3b64]
0x4537:	lea	rdx, [rip + 0x3b5f]
0x453e:	cmp	ebx, 9
0x4541:	cmovne	rax, rdx
0x4545:	add	rsp, 8
0x4549:	pop	rbx
0x454a:	pop	rbp
0x454b:	ret	


0x4550:	movzx	edx, byte ptr [rax + 1]
0x4554:	and	edx, 0xffffffdf
0x4557:	cmp	dl, 0x42
0x455a:	jne	0x4530


0x45bc:	cmp	byte ptr [rax + 3], 0x2d
0x45c0:	jne	0x4530


0x455c:	cmp	byte ptr [rax + 2], 0x31
0x4560:	jne	0x4530


0x45c6:	cmp	byte ptr [rax + 4], 0x38
0x45ca:	jne	0x4530


0x4562:	cmp	byte ptr [rax + 3], 0x38
0x4566:	jne	0x4530


0x45d0:	cmp	byte ptr [rax + 5], 0
0x45d4:	jne	0x4530


0x4568:	cmp	byte ptr [rax + 4], 0x30
0x456c:	jne	0x4530


0x45da:	cmp	byte ptr [rbp], 0x60
0x45de:	lea	rax, [rip + 0x3aa7]
0x45e5:	lea	rdx, [rip + 0x3aa4]
0x45ec:	cmovne	rax, rdx
0x45f0:	add	rsp, 8
0x45f4:	pop	rbx
0x45f5:	pop	rbp
0x45f6:	ret	


0x456e:	cmp	byte ptr [rax + 5], 0x33
0x4572:	jne	0x4530


0x4574:	cmp	byte ptr [rax + 6], 0x30
0x4578:	jne	0x4530


0x457a:	cmp	byte ptr [rax + 7], 0
0x457e:	jne	0x4530


0x4580:	cmp	byte ptr [rbp], 0x60
0x4584:	lea	rax, [rip + 0x3b09]
0x458b:	lea	rdx, [rip + 0x3b06]
0x4592:	cmovne	rax, rdx
0x4596:	add	rsp, 8
0x459a:	pop	rbx
0x459b:	pop	rbp
0x459c:	ret	


0x191e:	lea	rdi, [rip + 0x5acf]
0x1925:	call	0x1600


0x1600:	jmp	qword ptr [rip + 0x209872]




0x6ffe:	cmp	rax, -1
0x7002:	jne	0x6fbc


0x7004:	mov	rdi, rbx
0x7007:	pop	rbx
0x7008:	pop	rbp
0x7009:	pop	r12
0x700b:	jmp	0x1610


0x70a0:	cmp	rax, -1
0x70a4:	je	0x70b2


0x70b2:	pop	rbx
0x70b3:	pop	rbp
0x70b4:	pop	r12
0x70b6:	ret	


0x70a6:	and	dword ptr [rbx], 0xffffffef
0x70a9:	mov	qword ptr [rbx + 0x90], rax
0x70b0:	xor	eax, eax
0x70b2:	pop	rbx
0x70b3:	pop	rbp
0x70b4:	pop	r12
0x70b6:	ret	


0x676a:	lea	rsi, [rip + 0x1e7c]
0x6771:	mov	edx, 5
0x6776:	xor	edi, edi
0x6778:	call	0x1630


0x677d:	lea	rcx, [rip + 0x1414]
0x6784:	lea	rdx, [rip + 0xc65]
0x678b:	mov	rsi, rax
0x678e:	mov	edi, 1
0x6793:	xor	eax, eax
0x6795:	call	0x17f0


0x679a:	mov	rbx, qword ptr [rip + 0x2048e7]
0x67a1:	lea	rsi, [rip + 0x2078]
0x67a8:	xor	edi, edi
0x67aa:	mov	edx, 5
0x67af:	call	0x1630


0x67b4:	mov	rsi, rbx
0x67b7:	mov	rdi, rax
0x67ba:	pop	rbx
0x67bb:	jmp	0x1730


0x2fdd:	mov	rbx, qword ptr [rip + 0x2080a4]
0x2fe4:	lea	rsi, [rip + 0x45cd]
0x2feb:	mov	edx, 5
0x2ff0:	xor	edi, edi
0x2ff2:	call	0x1630


0x2ff7:	mov	rsi, rbx
0x2ffa:	mov	rdi, rax
0x2ffd:	call	0x1730


0x6a40:	call	0x15a0


0x3002:	mov	rbx, qword ptr [rip + 0x20807f]
0x3009:	lea	rsi, [rip + 0x45f0]
0x3010:	mov	edx, 5
0x3015:	xor	edi, edi
0x3017:	call	0x1630


0x301c:	mov	rsi, rbx
0x301f:	mov	rdi, rax
0x3022:	call	0x1730


0x3027:	mov	rbx, qword ptr [rip + 0x20805a]
0x302e:	lea	rsi, [rip + 0x4603]
0x3035:	mov	edx, 5
0x303a:	xor	edi, edi
0x303c:	call	0x1630


0x3041:	mov	rsi, rbx
0x3044:	mov	rdi, rax
0x3047:	call	0x1730


0x304c:	mov	rbx, qword ptr [rip + 0x208035]
0x3053:	lea	rsi, [rip + 0x462e]
0x305a:	mov	edx, 5
0x305f:	xor	edi, edi
0x3061:	call	0x1630


0x3066:	mov	rsi, rbx
0x3069:	mov	rdi, rax
0x306c:	call	0x1730


0x3071:	mov	rbx, qword ptr [rip + 0x208010]
0x3078:	lea	rsi, [rip + 0x4651]
0x307f:	mov	edx, 5
0x3084:	xor	edi, edi
0x3086:	call	0x1630


0x308b:	mov	rsi, rbx
0x308e:	mov	rdi, rax
0x3091:	call	0x1730


0x3096:	mov	rbx, qword ptr [rip + 0x207feb]
0x309d:	lea	rsi, [rip + 0x4674]
0x30a4:	mov	edx, 5
0x30a9:	xor	edi, edi
0x30ab:	call	0x1630


0x30b0:	mov	rsi, rbx
0x30b3:	mov	rdi, rax
0x30b6:	call	0x1730


0x30bb:	mov	rbx, qword ptr [rip + 0x207fc6]
0x30c2:	lea	rsi, [rip + 0x4697]
0x30c9:	mov	edx, 5
0x30ce:	xor	edi, edi
0x30d0:	call	0x1630


0x30d5:	mov	rsi, rbx
0x30d8:	mov	rdi, rax
0x30db:	call	0x1730


0x30e0:	mov	rbx, qword ptr [rip + 0x207fa1]
0x30e7:	lea	rsi, [rip + 0x46c2]
0x30ee:	mov	edx, 5
0x30f3:	xor	edi, edi
0x30f5:	call	0x1630


0x30fa:	mov	rsi, rbx
0x30fd:	mov	rdi, rax
0x3100:	call	0x1730


0x3105:	mov	rbx, qword ptr [rip + 0x207f7c]
0x310c:	lea	rsi, [rip + 0x46dd]
0x3113:	mov	edx, 5
0x3118:	xor	edi, edi
0x311a:	call	0x1630


0x311f:	mov	rsi, rbx
0x3122:	mov	rdi, rax
0x3125:	call	0x1730


0x312a:	mov	rbx, qword ptr [rip + 0x207f57]
0x3131:	lea	rsi, [rip + 0x4708]
0x3138:	mov	edx, 5
0x313d:	xor	edi, edi
0x313f:	call	0x1630


0x3144:	mov	rsi, rbx
0x3147:	mov	rdi, rax
0x314a:	call	0x1730


0x314f:	mov	rbx, qword ptr [rip + 0x207f32]
0x3156:	lea	rsi, [rip + 0x4733]
0x315d:	mov	edx, 5
0x3162:	xor	edi, edi
0x3164:	call	0x1630


0x3169:	mov	rsi, rbx
0x316c:	mov	rdi, rax
0x316f:	call	0x1730


0x3174:	mov	rbx, qword ptr [rip + 0x207f0d]
0x317b:	lea	rsi, [rip + 0x4806]
0x3182:	mov	edx, 5
0x3187:	xor	edi, edi
0x3189:	call	0x1630


0x318e:	mov	rsi, rbx
0x3191:	mov	rdi, rax
0x3194:	call	0x1730


0x3199:	mov	rbx, qword ptr [rip + 0x207ee8]
0x31a0:	lea	rsi, [rip + 0x48c1]
0x31a7:	mov	edx, 5
0x31ac:	xor	edi, edi
0x31ae:	call	0x1630


0x31b3:	mov	rsi, rbx
0x31b6:	mov	rdi, rax
0x31b9:	call	0x1730


0x31be:	mov	rbx, qword ptr [rip + 0x207ec3]
0x31c5:	lea	rsi, [rip + 0x48cc]
0x31cc:	mov	edx, 5
0x31d1:	xor	edi, edi
0x31d3:	call	0x1630


0x31d8:	mov	rsi, rbx
0x31db:	mov	rdi, rax
0x31de:	call	0x1730


0x31e3:	mov	rbx, qword ptr [rip + 0x207e9e]
0x31ea:	lea	rsi, [rip + 0x48df]
0x31f1:	mov	edx, 5
0x31f6:	xor	edi, edi
0x31f8:	call	0x1630


0x31fd:	mov	rsi, rbx
0x3200:	mov	rdi, rax
0x3203:	lea	rbx, [rip + 0x414b]
0x320a:	call	0x1730


0x320f:	lea	rax, [rip + 0x4164]
0x3216:	lea	rcx, [rip + 0x419e]
0x321d:	mov	qword ptr [rsp + 0x60], 0
0x3226:	mov	qword ptr [rsp + 0x68], 0
0x322f:	mov	rdx, rsp
0x3232:	mov	qword ptr [rsp], rax
0x3236:	lea	rax, [rip + 0x413f]
0x323d:	mov	qword ptr [rsp + 0x30], rcx
0x3242:	lea	rcx, [rip + 0x417c]
0x3249:	mov	qword ptr [rsp + 8], rax
0x324e:	lea	rax, [rip + 0x419f]
0x3255:	mov	qword ptr [rsp + 0x40], rcx
0x325a:	lea	rcx, [rip + 0x416e]
0x3261:	mov	qword ptr [rsp + 0x10], rax
0x3266:	lea	rax, [rip + 0x411f]
0x326d:	mov	qword ptr [rsp + 0x50], rcx
0x3272:	mov	qword ptr [rsp + 0x18], rax
0x3277:	lea	rax, [rip + 0x4124]
0x327e:	mov	qword ptr [rsp + 0x20], rax
0x3283:	lea	rax, [rip + 0x4122]
0x328a:	mov	qword ptr [rsp + 0x28], rax
0x328f:	mov	qword ptr [rsp + 0x38], rax
0x3294:	mov	qword ptr [rsp + 0x48], rax
0x3299:	mov	qword ptr [rsp + 0x58], rax
0x329e:	nop	
0x32a0:	add	rdx, 0x10
0x32a4:	mov	rdi, qword ptr [rdx]
0x32a7:	test	rdi, rdi
0x32aa:	je	0x32bf


0x32bf:	mov	r12, qword ptr [rdx + 8]
0x32c3:	xor	edi, edi
0x32c5:	mov	edx, 5
0x32ca:	lea	rsi, [rip + 0x4108]
0x32d1:	test	r12, r12
0x32d4:	je	0x339b


0x32ac:	mov	ecx, 7
0x32b1:	mov	rsi, rbx
0x32b4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x339b:	call	0x1630


0x32da:	call	0x1630


0x32b4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x32b6:	seta	al
0x32b9:	sbb	al, 0
0x32bb:	test	al, al
0x32bd:	jne	0x32a0


0x32a0:	add	rdx, 0x10
0x32a4:	mov	rdi, qword ptr [rdx]
0x32a7:	test	rdi, rdi
0x32aa:	je	0x32bf


0x32df:	lea	rcx, [rip + 0x48b2]
0x32e6:	lea	rdx, [rip + 0x4103]
0x32ed:	mov	rsi, rax
0x32f0:	mov	edi, 1
0x32f5:	xor	eax, eax
0x32f7:	call	0x17f0


0x32fc:	xor	esi, esi
0x32fe:	mov	edi, 5
0x3303:	call	0x17e0


0x3308:	test	rax, rax
0x330b:	je	0x3329


0x3329:	lea	rsi, [rip + 0x40d2]
0x3330:	xor	edi, edi
0x3332:	mov	edx, 5
0x3337:	call	0x1630


0x330d:	lea	rsi, [rip + 0x40ea]
0x3314:	mov	edx, 3
0x3319:	mov	rdi, rax
0x331c:	call	0x15c0


0x15c0:	jmp	qword ptr [rip + 0x209892]




0x333c:	lea	rcx, [rip + 0x4012]
0x3343:	lea	rdx, [rip + 0x484e]
0x334a:	mov	rsi, rax
0x334d:	mov	edi, 1
0x3352:	xor	eax, eax
0x3354:	call	0x17f0


0x3359:	cmp	r12, rbx
0x335c:	lea	rcx, [rip + 0x4033]
0x3363:	lea	rbx, [rip + 0x5257]
0x336a:	cmove	rbx, rcx
0x336e:	lea	rsi, [rip + 0x4893]
0x3375:	xor	edi, edi
0x3377:	mov	edx, 5
0x337c:	call	0x1630


0x3381:	mov	rcx, rbx
0x3384:	mov	rsi, rax
0x3387:	mov	rdx, r12
0x338a:	mov	edi, 1
0x338f:	xor	eax, eax
0x3391:	call	0x17f0


0x3396:	jmp	0x2fb6


0x33a0:	lea	rcx, [rip + 0x47f1]
0x33a7:	lea	rdx, [rip + 0x4042]
0x33ae:	mov	rsi, rax
0x33b1:	mov	edi, 1
0x33b6:	xor	eax, eax
0x33b8:	call	0x17f0


0x33bd:	xor	esi, esi
0x33bf:	mov	edi, 5
0x33c4:	call	0x17e0


0x33c9:	test	rax, rax
0x33cc:	je	0x33e6


0x33e6:	lea	rsi, [rip + 0x4015]
0x33ed:	mov	edx, 5
0x33f2:	xor	edi, edi
0x33f4:	lea	r12, [rip + 0x3f5a]
0x33fb:	lea	rbx, [rip + 0x3f94]
0x3402:	call	0x1630


0x33ce:	lea	rsi, [rip + 0x4029]
0x33d5:	mov	edx, 3
0x33da:	mov	rdi, rax
0x33dd:	call	0x15c0


0x3407:	lea	rcx, [rip + 0x3f47]
0x340e:	lea	rdx, [rip + 0x4783]
0x3415:	mov	rsi, rax
0x3418:	mov	edi, 1
0x341d:	xor	eax, eax
0x341f:	call	0x17f0


0x3424:	jmp	0x336e


0x336e:	lea	rsi, [rip + 0x4893]
0x3375:	xor	edi, edi
0x3377:	mov	edx, 5
0x337c:	call	0x1630


0x622c:	cmp	r12, 9
0x6230:	ja	0x6570


0x6236:	lea	rdx, [rip + 0x2627]
0x623d:	movsxd	rax, dword ptr [rdx + r12*4]
0x6241:	add	rax, rdx
0x6244:	jmp	rax


0x6570:	mov	r10, qword ptr [rbx + 0x40]
0x6574:	mov	r9, qword ptr [rbx + 0x38]
0x6578:	mov	edx, 5
0x657d:	mov	rax, qword ptr [rbx + 0x10]
0x6581:	mov	r8, qword ptr [rbx + 8]
0x6585:	lea	rsi, [rip + 0x2254]
0x658c:	mov	r13, qword ptr [rbx + 0x30]
0x6590:	mov	r12, qword ptr [rbx + 0x28]
0x6594:	mov	r15, qword ptr [rbx + 0x20]
0x6598:	mov	r14, qword ptr [rbx + 0x18]
0x659c:	mov	qword ptr [rsp + 0x18], r10
0x65a1:	mov	qword ptr [rsp + 0x10], r9
0x65a6:	mov	qword ptr [rsp], rax
0x65aa:	mov	qword ptr [rsp + 8], r8
0x65af:	mov	rbx, qword ptr [rbx]
0x65b2:	jmp	0x6342


0x6342:	xor	edi, edi
0x6344:	call	0x1630


0x6349:	mov	r10, qword ptr [rsp + 0x18]
0x634e:	push	r10
0x6350:	jmp	0x6294


0x6294:	mov	r9, qword ptr [rsp + 0x18]
0x6299:	mov	rdx, rax
0x629c:	mov	rcx, rbx
0x629f:	mov	esi, 1
0x62a4:	mov	rdi, rbp
0x62a7:	xor	eax, eax
0x62a9:	push	r9
0x62ab:	push	r13
0x62ad:	push	r12
0x62af:	push	r15
0x62b1:	push	r14
0x62b3:	mov	r9, qword ptr [rsp + 0x30]
0x62b8:	mov	r8, qword ptr [rsp + 0x38]
0x62bd:	call	0x1870


0x62c2:	add	rsp, 0x30
0x62c6:	add	rsp, 0x28
0x62ca:	pop	rbx
0x62cb:	pop	rbp
0x62cc:	pop	r12
0x62ce:	pop	r13
0x62d0:	pop	r14
0x62d2:	pop	r15
0x62d4:	ret	


0x5a1d:	mov	dword ptr [rbp], r12d
0x5a21:	pop	rbx
0x5a22:	pop	rbp
0x5a23:	pop	r12
0x5a25:	ret	


0x58de:	mov	dword ptr [rip + 0x205773], r12d
0x58e5:	mov	eax, dword ptr [rbp + 4]
0x58e8:	shl	r15, 4
0x58ec:	sub	rsp, 8
0x58f0:	add	rbx, r15
0x58f3:	lea	r15, [rbp + 8]
0x58f7:	mov	r8d, dword ptr [rbp]
0x58fb:	mov	r11, qword ptr [rbx]
0x58fe:	mov	r12, qword ptr [rbx + 8]
0x5902:	mov	rcx, r14
0x5905:	or	eax, 1
0x5908:	mov	dword ptr [rsp + 0x24], eax
0x590c:	push	qword ptr [rbp + 0x30]
0x590f:	mov	r9d, eax
0x5912:	push	qword ptr [rbp + 0x28]
0x5915:	push	r15
0x5917:	mov	rsi, r11
0x591a:	mov	rdx, qword ptr [rsp + 0x28]
0x591f:	mov	rdi, r12
0x5922:	mov	qword ptr [rsp + 0x30], r11
0x5927:	call	0x4600


0x6bda:	mov	edx, dword ptr [rsp + 8]
0x6bde:	mov	rsi, qword ptr [rax]
0x6be1:	mov	rax, rbp
0x6be4:	jmp	0x6bf7


0x6bf7:	movzx	ecx, bl
0x6bfa:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x6bff:	jne	0x6bf0


0x6c01:	cmp	bl, 0x2d
0x6c04:	je	0x6c58


0x6bf0:	add	rax, 1
0x6bf4:	movzx	ebx, byte ptr [rax]
0x6bf7:	movzx	ecx, bl
0x6bfa:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x6bff:	jne	0x6bf0


0x6c58:	mov	ebp, 4
0x6c5d:	mov	rdi, qword ptr [rsp + 0x18]
0x6c62:	xor	rdi, qword ptr fs:[0x28]
0x6c6b:	mov	eax, ebp
0x6c6d:	jne	0x6f00


0x6c06:	xor	ecx, ecx
0x6c08:	mov	rsi, r15
0x6c0b:	mov	rdi, rbp
0x6c0e:	call	0x16e0


0x6c73:	add	rsp, 0x28
0x6c77:	pop	rbx
0x6c78:	pop	rbp
0x6c79:	pop	r12
0x6c7b:	pop	r13
0x6c7d:	pop	r14
0x6c7f:	pop	r15
0x6c81:	ret	


0x6f00:	call	0x1660


0x16e0:	jmp	qword ptr [rip + 0x209802]




0x7057:	mov	rdi, rbx
0x705a:	pop	rbx
0x705b:	jmp	0x1790


0x6706:	mov	rax, qword ptr [rsp + 0x78]
0x670b:	xor	rax, qword ptr fs:[0x28]
0x6714:	jne	0x6720


0x6716:	add	rsp, 0xb8
0x671d:	pop	rbx
0x671e:	pop	rbp
0x671f:	ret	


0x6720:	call	0x1660


0x6630:	mov	rax, qword ptr [rsp + 0x58]
0x6635:	xor	rax, qword ptr fs:[0x28]
0x663e:	jne	0x6645


0x6640:	add	rsp, 0x68
0x6644:	ret	


0x6645:	call	0x1660


0x6a8a:	test	eax, eax
0x6a8c:	jne	0x6b20


0x6a92:	mov	rbp, qword ptr [rsp]
0x6a96:	cmp	rbp, r14
0x6a99:	jb	0x6aa0


0x6b20:	mov	ebp, eax
0x6b22:	call	0x15b0


0x6aa0:	call	0x15b0


0x6a9b:	cmp	rbp, r15
0x6a9e:	jbe	0x6af4


0x6af4:	mov	rdx, qword ptr [rsp + 8]
0x6af9:	xor	rdx, qword ptr fs:[0x28]
0x6b02:	mov	rax, rbp
0x6b05:	jne	0x6b4b


0x6b07:	add	rsp, 0x18
0x6b0b:	pop	rbx
0x6b0c:	pop	rbp
0x6b0d:	pop	r12
0x6b0f:	pop	r13
0x6b11:	pop	r14
0x6b13:	pop	r15
0x6b15:	ret	


0x6b4b:	call	0x1660


0x6aa5:	cmp	rbp, 0x40000000
0x6aac:	mov	r14, rax
0x6aaf:	sbb	eax, eax
0x6ab1:	and	eax, 0xffffffd7
0x6ab4:	add	eax, 0x4b
0x6ab7:	mov	dword ptr [r14], eax
0x6aba:	mov	rdi, r12
0x6abd:	call	0x6180


0x6b27:	cmp	ebp, 1
0x6b2a:	mov	r14, rax
0x6b2d:	je	0x6b40


0x6b40:	mov	dword ptr [rax], 0x4b
0x6b46:	jmp	0x6aba


0x6b2f:	cmp	ebp, 3
0x6b32:	jne	0x6aba


0x6aba:	mov	rdi, r12
0x6abd:	call	0x6180


0x6b34:	mov	dword ptr [rax], 0
0x6b3a:	jmp	0x6aba


0x6b6c:	add	rsp, 0x18
0x6b70:	ret	


0x6c13:	mov	rcx, qword ptr [r15]
0x6c16:	mov	rbx, rax
0x6c19:	cmp	rcx, rbp
0x6c1c:	je	0x6c48


0x6c48:	test	r13, r13
0x6c4b:	mov	qword ptr [rsp + 8], rcx
0x6c50:	jne	0x6c90


0x6c1e:	mov	eax, dword ptr [r12]
0x6c22:	test	eax, eax
0x6c24:	je	0x6c88


0x6c90:	movzx	r12d, byte ptr [rbp]
0x6c95:	test	r12b, r12b
0x6c98:	je	0x6c58


0x6c88:	xor	ebp, ebp
0x6c8a:	jmp	0x6c30


0x6c26:	cmp	eax, 0x22
0x6c29:	mov	ebp, 1
0x6c2e:	jne	0x6c58


0x6c9a:	movsx	esi, r12b
0x6c9e:	mov	rdi, r13
0x6ca1:	xor	ebp, ebp
0x6ca3:	call	0x1690


0x6c30:	test	r13, r13
0x6c33:	je	0x6c3e


0x6c3e:	mov	qword ptr [r14], rbx
0x6c41:	jmp	0x6c5d


0x6c35:	movzx	r12d, byte ptr [rcx]
0x6c39:	test	r12b, r12b
0x6c3c:	jne	0x6cb7


0x6c5d:	mov	rdi, qword ptr [rsp + 0x18]
0x6c62:	xor	rdi, qword ptr fs:[0x28]
0x6c6b:	mov	eax, ebp
0x6c6d:	jne	0x6f00


0x6cb7:	movsx	esi, r12b
0x6cbb:	mov	rdi, r13
0x6cbe:	mov	qword ptr [rsp + 8], rcx
0x6cc3:	call	0x1690


0x6cc8:	test	rax, rax
0x6ccb:	mov	rcx, qword ptr [rsp + 8]
0x6cd0:	je	0x6d9c


0x6d9c:	mov	qword ptr [r14], rbx
0x6d9f:	or	ebp, 2
0x6da2:	jmp	0x6c5d


0x6cd6:	lea	eax, [r12 - 0x45]
0x6cdb:	cmp	al, 0x2f
0x6cdd:	ja	0x6d30


0x6cdf:	movabs	rdx, 0x814400308945
0x6ce9:	bt	rdx, rax
0x6ced:	jae	0x6d30


0x6d30:	mov	edi, 1
0x6d35:	mov	esi, 0x400
0x6d3a:	sub	r12d, 0x42
0x6d3e:	cmp	r12b, 0x35
0x6d42:	ja	0x6d9c


0x6cef:	mov	esi, 0x30
0x6cf4:	mov	rdi, r13
0x6cf7:	mov	qword ptr [rsp + 8], rcx
0x6cfc:	call	0x1690


0x6d44:	lea	rdx, [rip + 0x1bdd]
0x6d4b:	movzx	r12d, r12b
0x6d4f:	movsxd	rax, dword ptr [rdx + r12*4]
0x6d53:	add	rax, rdx
0x6d56:	jmp	rax


0x6d01:	test	rax, rax
0x6d04:	mov	rcx, qword ptr [rsp + 8]
0x6d09:	je	0x6d30


0x6d0b:	movzx	eax, byte ptr [rcx + 1]
0x6d0f:	cmp	al, 0x44
0x6d11:	je	0x6d1f


0x6d1f:	mov	edi, 2
0x6d24:	mov	esi, 0x3e8
0x6d29:	jmp	0x6d3a


0x6d13:	cmp	al, 0x69
0x6d15:	je	0x6ee8


0x6d3a:	sub	r12d, 0x42
0x6d3e:	cmp	r12b, 0x35
0x6d42:	ja	0x6d9c


0x6ee8:	xor	edi, edi
0x6eea:	cmp	byte ptr [rcx + 2], 0x42
0x6eee:	mov	esi, 0x400
0x6ef3:	sete	dil
0x6ef7:	lea	edi, [rdi + rdi + 1]
0x6efb:	jmp	0x6d3a


0x6d1b:	cmp	al, 0x42
0x6d1d:	jne	0x6d30


0x6ca8:	test	rax, rax
0x6cab:	mov	ebx, 1
0x6cb0:	mov	rcx, qword ptr [rsp + 8]
0x6cb5:	je	0x6c58


0x33e2:	test	eax, eax
0x33e4:	jne	0x3429


0x3429:	lea	r12, [rip + 0x3f25]
0x3430:	mov	r13, qword ptr [rip + 0x207c51]
0x3437:	lea	rsi, [rip + 0x4782]
0x343e:	xor	edi, edi
0x3440:	mov	edx, 5
0x3445:	call	0x1630


0x344a:	mov	rsi, r13
0x344d:	mov	rdi, rax
0x3450:	call	0x1730


0x3455:	jmp	0x3329


0x3321:	test	eax, eax
0x3323:	jne	0x3430


0x3430:	mov	r13, qword ptr [rip + 0x207c51]
0x3437:	lea	rsi, [rip + 0x4782]
0x343e:	xor	edi, edi
0x3440:	mov	edx, 5
0x3445:	call	0x1630


0x192a:	lea	rdi, [rip + 0x2a4f]
0x1931:	call	0x72f0


0x1936:	mov	byte ptr [rsp + 0x20], 0
0x193b:	lea	rcx, [rip + 0x2090de]
0x1942:	lea	rdx, [rip + 0x5b1b]
0x1949:	xor	r8d, r8d
0x194c:	mov	rsi, rbx
0x194f:	mov	edi, ebp
0x1951:	call	0x1670


0x1670:	jmp	qword ptr [rip + 0x20983a]




0x6fc4:	test	eax, eax
0x6fc6:	je	0x7004


0x6fc8:	call	0x15b0


0x6fcd:	mov	r12d, dword ptr [rax]
0x6fd0:	mov	rdi, rbx
0x6fd3:	mov	rbp, rax
0x6fd6:	call	0x1610


0x6fdb:	test	r12d, r12d
0x6fde:	jne	0x7010


0x6fe0:	pop	rbx
0x6fe1:	pop	rbp
0x6fe2:	pop	r12
0x6fe4:	ret	


0x7010:	mov	dword ptr [rbp], r12d
0x7014:	mov	eax, 0xffffffff
0x7019:	jmp	0x6fe0


0x716a:	and	ebx, 0x20
0x716d:	test	ebx, ebx
0x716f:	jne	0x7188


0x7171:	test	eax, eax
0x7173:	je	0x717f


0x7188:	test	eax, eax
0x718a:	jne	0x71a8


0x717f:	pop	rbx
0x7180:	pop	rbp
0x7181:	pop	r12
0x7183:	ret	


0x7175:	test	r12, r12
0x7178:	mov	eax, 0xffffffff
0x717d:	je	0x71b8


0x718c:	call	0x15b0


0x71a8:	pop	rbx
0x71a9:	mov	eax, 0xffffffff
0x71ae:	pop	rbp
0x71af:	pop	r12
0x71b1:	ret	


0x71b8:	call	0x15b0


0x71bd:	cmp	dword ptr [rax], 9
0x71c0:	pop	rbx
0x71c1:	pop	rbp
0x71c2:	pop	r12
0x71c4:	setne	al
0x71c7:	movzx	eax, al
0x71ca:	neg	eax
0x71cc:	ret	


0x7191:	mov	dword ptr [rax], 0
0x7197:	mov	eax, 0xffffffff
0x719c:	pop	rbx
0x719d:	pop	rbp
0x719e:	pop	r12
0x71a0:	ret	


0x4392:	test	eax, eax
0x4394:	je	0x43ac


0x43ac:	mov	rdi, qword ptr [rip + 0x206d0d]
0x43b3:	call	0x7150


0x4396:	call	0x15b0


0x439b:	cmp	byte ptr [rip + 0x206d56], 0
0x43a2:	mov	rbx, rax
0x43a5:	je	0x43c3


0x43c3:	lea	rsi, [rip + 0x30d4]
0x43ca:	xor	edi, edi
0x43cc:	mov	edx, 5
0x43d1:	call	0x1630


0x43a7:	cmp	dword ptr [rax], 0x20
0x43aa:	jne	0x43c3


0x43d6:	mov	rdi, qword ptr [rip + 0x206d23]
0x43dd:	mov	rbp, rax
0x43e0:	test	rdi, rdi
0x43e3:	je	0x440d


0x440d:	mov	esi, dword ptr [rbx]
0x440f:	lea	rdx, [rip + 0x3c2e]
0x4416:	mov	rcx, rax
0x4419:	xor	edi, edi
0x441b:	xor	eax, eax
0x441d:	call	0x1810


0x43e5:	call	0x5f80


0x4422:	jmp	0x4402


0x4402:	mov	edi, dword ptr [rip + 0x206c10]
0x4408:	call	0x15d0


0x15d0:	jmp	qword ptr [rip + 0x20988a]




0x43b8:	test	eax, eax
0x43ba:	jne	0x4402


0x43bc:	add	rsp, 8
0x43c0:	pop	rbx
0x43c1:	pop	rbp
0x43c2:	ret	


0x1956:	cmp	eax, -1
0x1959:	je	0x1a4d


0x1a4d:	add	r14d, -0x80
0x1a51:	cmp	r14d, 7
0x1a55:	ja	0x22e4


0x195f:	cmp	eax, 0x69
0x1962:	je	0x1a00


0x1a5b:	lea	rdx, [rip + 0x61de]
0x1a62:	movsxd	rax, dword ptr [rdx + r14*4]
0x1a66:	add	rax, rdx
0x1a69:	jmp	rax


0x22e4:	lea	rsi, [rip + 0x517e]
0x22eb:	xor	edi, edi
0x22ed:	mov	edx, 5
0x22f2:	call	0x1630


0x1a00:	mov	byte ptr [rsp + 0x20], 1
0x1a05:	jmp	0x193b


0x1968:	jg	0x19d0


0x193b:	lea	rcx, [rip + 0x2090de]
0x1942:	lea	rdx, [rip + 0x5b1b]
0x1949:	xor	r8d, r8d
0x194c:	mov	rsi, rbx
0x194f:	mov	edi, ebp
0x1951:	call	0x1670


0x196a:	cmp	eax, 0xffffff7e
0x196f:	je	0x22dd


0x19d0:	cmp	eax, 0x77
0x19d3:	je	0x1a10


0x22dd:	xor	edi, edi
0x22df:	call	0x2f60


0x1975:	cmp	eax, 0x64
0x1978:	je	0x19f0


0x1a10:	lea	rsi, [rip + 0x5a1e]
0x1a17:	mov	edx, 5
0x1a1c:	xor	edi, edi
0x1a1e:	call	0x1630


0x19d5:	jl	0x1981


0x19f0:	mov	r12d, 1
0x19f6:	jmp	0x193b


0x197a:	cmp	eax, 0xffffff7d
0x197f:	je	0x1990


0x1981:	mov	edi, 1
0x1986:	call	0x2f60


0x19d7:	lea	edx, [rax - 0x80]
0x19da:	cmp	edx, 7
0x19dd:	ja	0x1981


0x1990:	sub	rsp, 8
0x1994:	mov	rdi, qword ptr [rip + 0x2096ed]
0x199b:	mov	rcx, qword ptr [rip + 0x20966e]
0x19a2:	push	0
0x19a4:	lea	r9, [rip + 0x5a9c]
0x19ab:	lea	r8, [rip + 0x5aa2]
0x19b2:	lea	rdx, [rip + 0x5a37]
0x19b9:	lea	rsi, [rip + 0x5995]
0x19c0:	xor	eax, eax
0x19c2:	call	0x6660


0x19df:	mov	r14d, eax
0x19e2:	jmp	0x193b


0x19c7:	xor	edi, edi
0x19c9:	call	0x1850


0x1a23:	mov	rdi, qword ptr [rip + 0x209676]
0x1a2a:	lea	rcx, [rip + 0x6b90]
0x1a31:	mov	r8, rax
0x1a34:	xor	r9d, r9d
0x1a37:	mov	rdx, -1
0x1a3e:	xor	esi, esi
0x1a40:	call	0x6b50


0x1a45:	mov	r13, rax
0x1a48:	jmp	0x193b


0x22f7:	xor	esi, esi
0x22f9:	mov	rdx, rax
0x22fc:	xor	edi, edi
0x22fe:	xor	eax, eax
0x2300:	call	0x1810


0x2305:	jmp	0x1981


0x43ea:	mov	esi, dword ptr [rbx]
0x43ec:	lea	rdx, [rip + 0x3c4d]
0x43f3:	mov	rcx, rax
0x43f6:	mov	r8, rbp
0x43f9:	xor	edi, edi
0x43fb:	xor	eax, eax
0x43fd:	call	0x1810


0x6ac2:	mov	esi, dword ptr [r14]
0x6ac5:	mov	r8, rax
0x6ac8:	mov	eax, 0
0x6acd:	lea	rdx, [rip + 0x156c]
0x6ad4:	mov	rcx, r13
0x6ad7:	cmp	esi, 0x16
0x6ada:	cmove	esi, eax
0x6add:	test	ebx, ebx
0x6adf:	mov	eax, 1
0x6ae4:	cmove	ebx, eax
0x6ae7:	xor	eax, eax
0x6ae9:	mov	edi, ebx
0x6aeb:	call	0x1810


0x6af0:	mov	rbp, qword ptr [rsp]
0x6af4:	mov	rdx, qword ptr [rsp + 8]
0x6af9:	xor	rdx, qword ptr fs:[0x28]
0x6b02:	mov	rax, rbp
0x6b05:	jne	0x6b4b


0x592c:	add	rsp, 0x20
0x5930:	mov	r11, qword ptr [rsp + 0x10]
0x5935:	cmp	r11, rax
0x5938:	ja	0x59a1


0x593a:	lea	rsi, [rax + 1]
0x593e:	lea	rax, [rip + 0x2057db]
0x5945:	cmp	r12, rax
0x5948:	mov	qword ptr [rbx], rsi
0x594b:	je	0x595f


0x59a1:	mov	eax, dword ptr [rsp + 0x18]
0x59a5:	mov	dword ptr [r13], eax
0x59a9:	add	rsp, 0x28
0x59ad:	mov	rax, r12
0x59b0:	pop	rbx
0x59b1:	pop	rbp
0x59b2:	pop	r12
0x59b4:	pop	r13
0x59b6:	pop	r14
0x59b8:	pop	r15
0x59ba:	ret	


0x595f:	mov	rdi, rsi
0x5962:	mov	qword ptr [rsp + 0x10], rsi
0x5967:	call	0x67c0


0x594d:	mov	rdi, r12
0x5950:	mov	qword ptr [rsp + 0x10], rsi
0x5955:	call	0x1590


0x595a:	mov	rsi, qword ptr [rsp + 0x10]
0x595f:	mov	rdi, rsi
0x5962:	mov	qword ptr [rsp + 0x10], rsi
0x5967:	call	0x67c0


0x596c:	sub	rsp, 8
0x5970:	mov	qword ptr [rbx + 8], rax
0x5974:	mov	r8d, dword ptr [rbp]
0x5978:	push	qword ptr [rbp + 0x30]
0x597b:	push	qword ptr [rbp + 0x28]
0x597e:	mov	rcx, r14
0x5981:	push	r15
0x5983:	mov	r9d, dword ptr [rsp + 0x3c]
0x5988:	mov	rdi, rax
0x598b:	mov	rdx, qword ptr [rsp + 0x28]
0x5990:	mov	rsi, qword ptr [rsp + 0x30]
0x5995:	mov	r12, rax
0x5998:	call	0x4600


0x60b2:	mov	rdi, qword ptr [rsp + 0x38]
0x60b7:	xor	rdi, qword ptr fs:[0x28]
0x60c0:	jne	0x60cc


0x60c2:	add	rsp, 0x48
0x60c6:	ret	


0x60cc:	call	0x1660


0x5dff:	mov	rcx, qword ptr [rsp + 0x38]
0x5e04:	xor	rcx, qword ptr fs:[0x28]
0x5e0d:	jne	0x5e19


0x5e0f:	add	rsp, 0x48
0x5e13:	ret	


0x5e19:	call	0x1660


0x5e8b:	mov	rdx, qword ptr [rsp + 0x38]
0x5e90:	xor	rdx, qword ptr fs:[0x28]
0x5e99:	jne	0x5ea5


0x5e9b:	add	rsp, 0x48
0x5e9f:	ret	


0x5ea5:	call	0x1660


0x601f:	mov	rcx, qword ptr [rsp + 0x38]
0x6024:	xor	rcx, qword ptr fs:[0x28]
0x602d:	jne	0x6039


0x602f:	add	rsp, 0x48
0x6033:	ret	


0x6039:	call	0x1660


0x5f4e:	mov	rsi, qword ptr [rsp + 0x38]
0x5f53:	xor	rsi, qword ptr fs:[0x28]
0x5f5c:	jne	0x5f63


0x5f5e:	add	rsp, 0x48
0x5f62:	ret	


0x5f63:	call	0x1660


0x599d:	add	rsp, 0x20
0x59a1:	mov	eax, dword ptr [rsp + 0x18]
0x59a5:	mov	dword ptr [r13], eax
0x59a9:	add	rsp, 0x28
0x59ad:	mov	rax, r12
0x59b0:	pop	rbx
0x59b1:	pop	rbp
0x59b2:	pop	r12
0x59b4:	pop	r13
0x59b6:	pop	r14
0x59b8:	pop	r15
0x59ba:	ret	


0x5bec:	lea	rsi, [rax + 1]
0x5bf0:	mov	qword ptr [rsp + 0x48], rax
0x5bf5:	add	rsp, 0x20
0x5bf9:	mov	rdi, rsi
0x5bfc:	mov	qword ptr [rsp + 0x18], rsi
0x5c01:	call	0x67c0


0x5c06:	mov	qword ptr [rsp + 0x10], rax
0x5c0b:	sub	rsp, 8
0x5c0f:	push	qword ptr [rbx + 0x30]
0x5c12:	push	qword ptr [rbx + 0x28]
0x5c15:	mov	r10, qword ptr [rsp + 0x38]
0x5c1a:	mov	r9d, ebp
0x5c1d:	mov	r8d, dword ptr [rbx]
0x5c20:	mov	rcx, r15
0x5c23:	mov	rdx, r14
0x5c26:	mov	rdi, rax
0x5c29:	push	r10
0x5c2b:	mov	rsi, qword ptr [rsp + 0x38]
0x5c30:	call	0x4600


0x5c35:	mov	eax, dword ptr [rsp + 0x2c]
0x5c39:	add	rsp, 0x20
0x5c3d:	test	r12, r12
0x5c40:	mov	dword ptr [r13], eax
0x5c44:	je	0x5c4f


0x5c4f:	mov	rax, qword ptr [rsp + 0x10]
0x5c54:	add	rsp, 0x38
0x5c58:	pop	rbx
0x5c59:	pop	rbp
0x5c5a:	pop	r12
0x5c5c:	pop	r13
0x5c5e:	pop	r14
0x5c60:	pop	r15
0x5c62:	ret	


0x5c46:	mov	r11, qword ptr [rsp + 0x28]
0x5c4b:	mov	qword ptr [r12], r11
0x5c4f:	mov	rax, qword ptr [rsp + 0x10]
0x5c54:	add	rsp, 0x38
0x5c58:	pop	rbx
0x5c59:	pop	rbp
0x5c5a:	pop	r12
0x5c5c:	pop	r13
0x5c5e:	pop	r14
0x5c60:	pop	r15
0x5c62:	ret	


0x5b61:	mov	dword ptr [rbp], r12d
0x5b65:	add	rsp, 0x38
0x5b69:	pop	rbx
0x5b6a:	pop	rbp
0x5b6b:	pop	r12
0x5b6d:	pop	r13
0x5b6f:	pop	r14
0x5b71:	pop	r15
0x5b73:	ret	


0x72bd:	add	rbx, 1
0x72c1:	cmp	rbp, rbx
0x72c4:	jne	0x72b0


0x72b0:	mov	rdx, r15
0x72b3:	mov	rsi, r14
0x72b6:	mov	edi, r13d
0x72b9:	call	qword ptr [r12 + rbx*8]






0x63e0:	mov	r13, qword ptr [rbx + 0x10]
0x63e4:	mov	r12, qword ptr [rbx + 8]
0x63e8:	lea	rsi, [rip + 0x21b7]
0x63ef:	mov	rbx, qword ptr [rbx]
0x63f2:	mov	edx, 5
0x63f7:	xor	edi, edi
0x63f9:	call	0x1630


0x6520:	mov	r9, qword ptr [rbx + 0x10]
0x6524:	mov	r13, qword ptr [rbx + 0x30]
0x6528:	lea	rsi, [rip + 0x2219]
0x652f:	mov	r12, qword ptr [rbx + 0x28]
0x6533:	mov	r15, qword ptr [rbx + 0x20]
0x6537:	mov	edx, 5
0x653c:	mov	r14, qword ptr [rbx + 0x18]
0x6540:	mov	r8, qword ptr [rbx + 8]
0x6544:	xor	edi, edi
0x6546:	mov	qword ptr [rsp + 8], r9
0x654b:	mov	rbx, qword ptr [rbx]
0x654e:	mov	qword ptr [rsp], r8
0x6552:	call	0x1630


0x6300:	mov	r10, qword ptr [rbx + 0x40]
0x6304:	mov	r9, qword ptr [rbx + 0x38]
0x6308:	lea	rsi, [rip + 0x2499]
0x630f:	mov	rax, qword ptr [rbx + 0x10]
0x6313:	mov	r8, qword ptr [rbx + 8]
0x6317:	mov	edx, 5
0x631c:	mov	r13, qword ptr [rbx + 0x30]
0x6320:	mov	r12, qword ptr [rbx + 0x28]
0x6324:	mov	r15, qword ptr [rbx + 0x20]
0x6328:	mov	r14, qword ptr [rbx + 0x18]
0x632c:	mov	rbx, qword ptr [rbx]
0x632f:	mov	qword ptr [rsp + 0x18], r10
0x6334:	mov	qword ptr [rsp + 0x10], r9
0x6339:	mov	qword ptr [rsp], rax
0x633d:	mov	qword ptr [rsp + 8], r8
0x6342:	xor	edi, edi
0x6344:	call	0x1630


0x62c6:	add	rsp, 0x28
0x62ca:	pop	rbx
0x62cb:	pop	rbp
0x62cc:	pop	r12
0x62ce:	pop	r13
0x62d0:	pop	r14
0x62d2:	pop	r15
0x62d4:	ret	


0x6488:	mov	r15, qword ptr [rbx + 0x20]
0x648c:	lea	rsi, [rip + 0x2265]
0x6493:	mov	edx, 5
0x6498:	xor	edi, edi
0x649a:	mov	r14, qword ptr [rbx + 0x18]
0x649e:	mov	r13, qword ptr [rbx + 0x10]
0x64a2:	mov	r12, qword ptr [rbx + 8]
0x64a6:	mov	rbx, qword ptr [rbx]
0x64a9:	call	0x1630


0x6430:	lea	rsi, [rip + 0x22a1]
0x6437:	mov	edx, 5
0x643c:	xor	edi, edi
0x643e:	mov	r14, qword ptr [rbx + 0x18]
0x6442:	mov	r13, qword ptr [rbx + 0x10]
0x6446:	mov	r12, qword ptr [rbx + 8]
0x644a:	mov	rbx, qword ptr [rbx]
0x644d:	call	0x1630


0x6250:	mov	r9, qword ptr [rbx + 0x38]
0x6254:	mov	rax, qword ptr [rbx + 0x10]
0x6258:	lea	rsi, [rip + 0x2519]
0x625f:	mov	r8, qword ptr [rbx + 8]
0x6263:	mov	edx, 5
0x6268:	xor	edi, edi
0x626a:	mov	r13, qword ptr [rbx + 0x30]
0x626e:	mov	r12, qword ptr [rbx + 0x28]
0x6272:	mov	qword ptr [rsp + 0x10], r9
0x6277:	mov	r15, qword ptr [rbx + 0x20]
0x627b:	mov	r14, qword ptr [rbx + 0x18]
0x627f:	mov	qword ptr [rsp], rax
0x6283:	mov	qword ptr [rsp + 8], r8
0x6288:	mov	rbx, qword ptr [rbx]
0x628b:	call	0x1630


0x6398:	mov	r12, qword ptr [rbx + 8]
0x639c:	lea	rsi, [rip + 0x21ec]
0x63a3:	mov	rbx, qword ptr [rbx]
0x63a6:	mov	edx, 5
0x63ab:	xor	edi, edi
0x63ad:	call	0x1630


0x6358:	mov	rbx, qword ptr [rbx]
0x635b:	lea	rsi, [rip + 0x221d]
0x6362:	mov	edx, 5
0x6367:	xor	edi, edi
0x6369:	call	0x1630


0x64b8:	mov	r8, qword ptr [rbx + 8]
0x64bc:	mov	r12, qword ptr [rbx + 0x28]
0x64c0:	lea	rsi, [rip + 0x2259]
0x64c7:	mov	r15, qword ptr [rbx + 0x20]
0x64cb:	mov	r14, qword ptr [rbx + 0x18]
0x64cf:	mov	edx, 5
0x64d4:	mov	r13, qword ptr [rbx + 0x10]
0x64d8:	xor	edi, edi
0x64da:	mov	rbx, qword ptr [rbx]
0x64dd:	mov	qword ptr [rsp], r8
0x64e1:	call	0x1630


0x1ca4:	lea	rax, [rip + 0x855]
0x1cab:	mov	qword ptr [rip + 0x20943e], rax
0x1cb2:	lea	rax, [rip + 0x9e7]
0x1cb9:	mov	qword ptr [rip + 0x209428], rax
0x1cc0:	lea	rax, [rip + 0xa09]
0x1cc7:	mov	qword ptr [rip + 0x209412], rax
0x1cce:	lea	rax, [rip + 0xbab]
0x1cd5:	mov	qword ptr [rip + 0x2093fc], rax
0x1cdc:	lea	rax, [rip + 0x10ad]
0x1ce3:	mov	qword ptr [rip + 0x2093e6], rax
0x1cea:	jmp	0x1ab1


0x1d85:	lea	rax, [rip + 0x794]
0x1d8c:	mov	qword ptr [rip + 0x20935d], rax
0x1d93:	lea	rax, [rip + 0x7a6]
0x1d9a:	mov	qword ptr [rip + 0x209347], rax
0x1da1:	lea	rax, [rip + 0xf68]
0x1da8:	mov	qword ptr [rip + 0x209331], rax
0x1daf:	lea	rax, [rip + 0xa6a]
0x1db6:	mov	qword ptr [rip + 0x20931b], rax
0x1dbd:	lea	rax, [rip + 0x10bc]
0x1dc4:	mov	qword ptr [rip + 0x209305], rax
0x1dcb:	jmp	0x1ab1


0x1a6b:	lea	rax, [rip + 0xb7e]
0x1a72:	mov	qword ptr [rip + 0x209677], rax
0x1a79:	lea	rax, [rip + 0xb60]
0x1a80:	mov	qword ptr [rip + 0x209661], rax
0x1a87:	lea	rax, [rip + 0xbc2]
0x1a8e:	mov	qword ptr [rip + 0x20964b], rax
0x1a95:	lea	rax, [rip + 0xcb4]
0x1a9c:	mov	qword ptr [rip + 0x209635], rax
0x1aa3:	lea	rax, [rip + 0xfe6]
0x1aaa:	mov	qword ptr [rip + 0x20961f], rax
0x1ab1:	movsxd	rax, dword ptr [rip + 0x2095e0]
0x1ab8:	mov	edx, ebp
0x1aba:	sub	edx, eax
0x1abc:	sub	edx, 1
0x1abf:	jg	0x2367


0x1cef:	lea	rax, [rip + 0x80a]
0x1cf6:	mov	qword ptr [rip + 0x2093f3], rax
0x1cfd:	lea	rax, [rip + 0x22bc]
0x1d04:	mov	qword ptr [rip + 0x2093dd], rax
0x1d0b:	lea	rax, [rip + 0x205e]
0x1d12:	mov	qword ptr [rip + 0x2093c7], rax
0x1d19:	lea	rax, [rip + 0xb90]
0x1d20:	mov	qword ptr [rip + 0x2093b1], rax
0x1d27:	lea	rax, [rip + 0xb32]
0x1d2e:	mov	qword ptr [rip + 0x20939b], rax
0x1d35:	jmp	0x1ab1


0x1dd0:	lea	rax, [rip + 0x749]
0x1dd7:	mov	qword ptr [rip + 0x209312], rax
0x1dde:	lea	rax, [rip + 0x1adb]
0x1de5:	mov	qword ptr [rip + 0x2092fc], rax
0x1dec:	lea	rax, [rip + 0x181d]
0x1df3:	mov	qword ptr [rip + 0x2092e6], rax
0x1dfa:	lea	rax, [rip + 0xa4f]
0x1e01:	mov	qword ptr [rip + 0x2092d0], rax
0x1e08:	lea	rax, [rip + 0x9f1]
0x1e0f:	mov	qword ptr [rip + 0x2092ba], rax
0x1e16:	jmp	0x1ab1


0x1c59:	lea	rax, [rip + 0x990]
0x1c60:	mov	qword ptr [rip + 0x209489], rax
0x1c67:	lea	rax, [rip + 0x972]
0x1c6e:	mov	qword ptr [rip + 0x209473], rax
0x1c75:	lea	rax, [rip + 0x984]
0x1c7c:	mov	qword ptr [rip + 0x20945d], rax
0x1c83:	lea	rax, [rip + 0xac6]
0x1c8a:	mov	qword ptr [rip + 0x209447], rax
0x1c91:	lea	rax, [rip + 0xe88]
0x1c98:	mov	qword ptr [rip + 0x209431], rax
0x1c9f:	jmp	0x1ab1


0x1d3a:	lea	rax, [rip + 0x88f]
0x1d41:	mov	qword ptr [rip + 0x2093a8], rax
0x1d48:	lea	rax, [rip + 0xa61]
0x1d4f:	mov	qword ptr [rip + 0x209392], rax
0x1d56:	lea	rax, [rip + 0xe73]
0x1d5d:	mov	qword ptr [rip + 0x20937c], rax
0x1d64:	lea	rax, [rip + 0x9b5]
0x1d6b:	mov	qword ptr [rip + 0x209366], rax
0x1d72:	lea	rax, [rip + 0xbf7]
0x1d79:	mov	qword ptr [rip + 0x209350], rax
0x1d80:	jmp	0x1ab1


0x1e1b:	lea	rax, [rip + 0x75e]
0x1e22:	mov	qword ptr [rip + 0x2092c7], rax
0x1e29:	lea	rax, [rip + 0x730]
0x1e30:	mov	qword ptr [rip + 0x2092b1], rax
0x1e37:	lea	rax, [rip + 0x752]
0x1e3e:	mov	qword ptr [rip + 0x20929b], rax
0x1e45:	lea	rax, [rip + 0x934]
0x1e4c:	mov	qword ptr [rip + 0x209285], rax
0x1e53:	lea	rax, [rip + 0xa66]
0x1e5a:	mov	qword ptr [rip + 0x20926f], rax
0x1e61:	jmp	0x1ab1


0x1ab1:	movsxd	rax, dword ptr [rip + 0x2095e0]
0x1ab8:	mov	edx, ebp
0x1aba:	sub	edx, eax
0x1abc:	sub	edx, 1
0x1abf:	jg	0x2367


0x1ac5:	cmp	eax, ebp
0x1ac7:	jge	0x1f73


0x2367:	mov	rdi, qword ptr [rbx + rax*8 + 8]
0x236c:	call	0x6180


0x1acd:	mov	rax, qword ptr [rbx + rax*8]
0x1ad1:	lea	rsi, [rip + 0x65b2]
0x1ad8:	mov	rdi, rax
0x1adb:	mov	qword ptr [rsp + 0x38], rax
0x1ae0:	call	0x1750


0x1f73:	lea	rax, [rip + 0x6110]
0x1f7a:	mov	qword ptr [rsp + 0x38], rax
0x1f7f:	mov	rbp, qword ptr [rip + 0x20910a]
0x1f86:	jmp	0x1b0a


0x1750:	jmp	qword ptr [rip + 0x2097ca]


0x1b0a:	mov	esi, 2
0x1b0f:	mov	rdi, rbp
0x1b12:	call	0x4440




0x1b17:	test	r12b, r12b
0x1b1a:	je	0x1f8b


0x1f8b:	mov	edi, 0x7800
0x1f90:	mov	r12, qword ptr [rip + 0x2090f1]
0x1f97:	xor	ebx, ebx
0x1f99:	call	0x67c0


0x1b20:	mov	rax, qword ptr [rip + 0x209561]
0x1b27:	mov	edi, 0x1400
0x1b2c:	mov	qword ptr [rsp + 0x28], rax
0x1b31:	call	qword ptr [rip + 0x2095b9]


0x1f9e:	mov	edi, 0x7800
0x1fa3:	mov	qword ptr [rsp + 0x10], rax
0x1fa8:	call	qword ptr [rip + 0x209142]


0x64e6:	sub	rsp, 8
0x64ea:	mov	r9, r13
0x64ed:	push	r12
0x64ef:	push	r15
0x64f1:	push	r14
0x64f3:	mov	r8, qword ptr [rsp + 0x20]
0x64f8:	mov	rcx, rbx
0x64fb:	mov	rdx, rax
0x64fe:	mov	rdi, rbp
0x6501:	mov	esi, 1
0x6506:	xor	eax, eax
0x6508:	call	0x1870


0x650d:	add	rsp, 0x20
0x6511:	add	rsp, 0x28
0x6515:	pop	rbx
0x6516:	pop	rbp
0x6517:	pop	r12
0x6519:	pop	r13
0x651b:	pop	r14
0x651d:	pop	r15
0x651f:	ret	


0x636e:	add	rsp, 0x28
0x6372:	mov	rcx, rbx
0x6375:	mov	rdi, rbp
0x6378:	pop	rbx
0x6379:	pop	rbp
0x637a:	pop	r12
0x637c:	pop	r13
0x637e:	pop	r14
0x6380:	pop	r15
0x6382:	mov	rdx, rax
0x6385:	mov	esi, 1
0x638a:	xor	eax, eax
0x638c:	jmp	0x1870


0x63b2:	add	rsp, 0x28
0x63b6:	mov	r8, r12
0x63b9:	mov	rcx, rbx
0x63bc:	mov	rdi, rbp
0x63bf:	mov	rdx, rax
0x63c2:	mov	esi, 1
0x63c7:	pop	rbx
0x63c8:	pop	rbp
0x63c9:	pop	r12
0x63cb:	pop	r13
0x63cd:	pop	r14
0x63cf:	pop	r15
0x63d1:	xor	eax, eax
0x63d3:	jmp	0x1870


0x6290:	sub	rsp, 8
0x6294:	mov	r9, qword ptr [rsp + 0x18]
0x6299:	mov	rdx, rax
0x629c:	mov	rcx, rbx
0x629f:	mov	esi, 1
0x62a4:	mov	rdi, rbp
0x62a7:	xor	eax, eax
0x62a9:	push	r9
0x62ab:	push	r13
0x62ad:	push	r12
0x62af:	push	r15
0x62b1:	push	r14
0x62b3:	mov	r9, qword ptr [rsp + 0x30]
0x62b8:	mov	r8, qword ptr [rsp + 0x38]
0x62bd:	call	0x1870


0x6452:	sub	rsp, 8
0x6456:	push	r14
0x6458:	mov	rdx, rax
0x645b:	mov	r9, r13
0x645e:	mov	r8, r12
0x6461:	mov	rcx, rbx
0x6464:	mov	rdi, rbp
0x6467:	mov	esi, 1
0x646c:	xor	eax, eax
0x646e:	call	0x1870


0x6473:	pop	rax
0x6474:	pop	rdx
0x6475:	add	rsp, 0x28
0x6479:	pop	rbx
0x647a:	pop	rbp
0x647b:	pop	r12
0x647d:	pop	r13
0x647f:	pop	r14
0x6481:	pop	r15
0x6483:	ret	


0x64ae:	push	r15
0x64b0:	jmp	0x6456


0x6456:	push	r14
0x6458:	mov	rdx, rax
0x645b:	mov	r9, r13
0x645e:	mov	r8, r12
0x6461:	mov	rcx, rbx
0x6464:	mov	rdi, rbp
0x6467:	mov	esi, 1
0x646c:	xor	eax, eax
0x646e:	call	0x1870


0x6557:	push	r13
0x6559:	push	r12
0x655b:	push	r15
0x655d:	push	r14
0x655f:	mov	r9, qword ptr [rsp + 0x28]
0x6564:	jmp	0x64f3


0x64f3:	mov	r8, qword ptr [rsp + 0x20]
0x64f8:	mov	rcx, rbx
0x64fb:	mov	rdx, rax
0x64fe:	mov	rdi, rbp
0x6501:	mov	esi, 1
0x6506:	xor	eax, eax
0x6508:	call	0x1870


0x63fe:	add	rsp, 0x28
0x6402:	mov	r9, r13
0x6405:	mov	r8, r12
0x6408:	mov	rcx, rbx
0x640b:	mov	rdi, rbp
0x640e:	mov	rdx, rax
0x6411:	pop	rbx
0x6412:	pop	rbp
0x6413:	pop	r12
0x6415:	pop	r13
0x6417:	pop	r14
0x6419:	pop	r15
0x641b:	mov	esi, 1
0x6420:	xor	eax, eax
0x6422:	jmp	0x1870


0x1ae5:	test	eax, eax
0x1ae7:	je	0x1f7f


0x1f7f:	mov	rbp, qword ptr [rip + 0x20910a]
0x1f86:	jmp	0x1b0a


0x1aed:	mov	rdi, qword ptr [rsp + 0x38]
0x1af2:	lea	rsi, [rip + 0x5997]
0x1af9:	call	0x1830


0x1830:	jmp	qword ptr [rip + 0x20975a]




0x2371:	lea	rsi, [rip + 0x5107]
0x2378:	mov	rbx, rax
0x237b:	mov	edx, 5
0x2380:	xor	edi, edi
0x2382:	call	0x1630


0x2387:	xor	edi, edi
0x2389:	mov	rdx, rax
0x238c:	mov	rcx, rbx
0x238f:	xor	esi, esi
0x2391:	xor	eax, eax
0x2393:	call	0x1810


0x2398:	mov	edi, 1
0x239d:	call	0x2f60


0x1afe:	test	rax, rax
0x1b01:	mov	rbp, rax
0x1b04:	je	0x2336


0x2336:	mov	rdx, qword ptr [rsp + 0x38]
0x233b:	mov	esi, 3
0x2340:	xor	edi, edi
0x2342:	call	0x5fb0


0x2347:	mov	rbx, rax
0x234a:	call	0x15b0


0x234f:	mov	esi, dword ptr [rax]
0x2351:	lea	rdx, [rip + 0x5cec]
0x2358:	mov	rcx, rbx
0x235b:	mov	edi, 1
0x2360:	xor	eax, eax
0x2362:	call	0x1810


0x1fae:	movsxd	rdi, eax
0x1fb1:	call	0x67c0


0x1fb6:	mov	qword ptr [rsp + 0x18], r13
0x1fbb:	mov	qword ptr [rsp + 8], rax
0x1fc0:	xor	r15d, r15d
0x1fc3:	mov	r13, qword ptr [rsp + 0x10]
0x1fc8:	jmp	0x1fd9


0x1fd9:	lea	rdi, [r13 + r15]
0x1fde:	mov	edx, 0x7800
0x1fe3:	mov	rcx, rbp
0x1fe6:	sub	rdx, r15
0x1fe9:	mov	esi, 1
0x1fee:	call	0x15f0


0x15f0:	jmp	qword ptr [rip + 0x20987a]




0x1ff3:	add	r15, rax
0x1ff6:	mov	eax, dword ptr [rbp]
0x1ff9:	test	al, 0x30
0x1ffb:	je	0x1fd0


0x1fd0:	cmp	r15, 0x77ff
0x1fd7:	ja	0x2006


0x1ffd:	test	r15, r15
0x2000:	je	0x20c0


0x2006:	mov	r13, qword ptr [rip + 0x2090d3]
0x200d:	mov	edi, r15d
0x2010:	call	qword ptr [rip + 0x2090da]


0x20c0:	mov	r13, qword ptr [rsp + 0x18]
0x20c5:	test	r13, r13
0x20c8:	je	0x20d3


0x20d3:	test	al, 0x20
0x20d5:	je	0x1f3a


0x20ca:	test	rbx, rbx
0x20cd:	jne	0x2214


0x1f3a:	mov	rdi, rbp
0x1f3d:	call	0x6fa0


0x20db:	lea	rsi, [rip + 0x53b1]
0x20e2:	mov	edx, 5
0x20e7:	xor	edi, edi
0x20e9:	call	0x1630


0x2214:	mov	rax, qword ptr [r12 + 0x28]
0x2219:	cmp	rax, qword ptr [r12 + 0x30]
0x221e:	jae	0x23a7


0x2224:	lea	rdx, [rax + 1]
0x2228:	mov	qword ptr [r12 + 0x28], rdx
0x222d:	mov	byte ptr [rax], 0xa
0x2230:	mov	eax, dword ptr [rbp]
0x2233:	jmp	0x20d3


0x23a7:	mov	esi, 0xa
0x23ac:	mov	rdi, r12
0x23af:	call	0x16a0


0x16a0:	jmp	qword ptr [rip + 0x209822]




0x20ee:	mov	rbx, rax
0x20f1:	call	0x15b0


0x20f6:	mov	esi, dword ptr [rax]
0x20f8:	mov	rdx, rbx
0x20fb:	mov	edi, 1
0x2100:	xor	eax, eax
0x2102:	call	0x1810


0x17c0:	jmp	qword ptr [rip + 0x209792]




0x1f42:	add	eax, 1
0x1f45:	je	0x21d1


0x21d1:	mov	rdi, qword ptr [rsp + 0x38]
0x21d6:	lea	rsi, [rip + 0x5ead]
0x21dd:	call	0x1750


0x1f4b:	xor	eax, eax
0x1f4d:	mov	rcx, qword ptr [rsp + 0x78]
0x1f52:	xor	rcx, qword ptr fs:[0x28]
0x1f5b:	jne	0x23a2


0x1f61:	add	rsp, 0x88
0x1f68:	pop	rbx
0x1f69:	pop	rbp
0x1f6a:	pop	r12
0x1f6c:	pop	r13
0x1f6e:	pop	r14
0x1f70:	pop	r15
0x1f72:	ret	


0x23a2:	call	0x1660


0x21e2:	mov	ebp, eax
0x21e4:	call	0x15b0


0x21e9:	test	ebp, ebp
0x21eb:	mov	rbx, rax
0x21ee:	jne	0x2238


0x21f0:	lea	rsi, [rip + 0x52c1]
0x21f7:	mov	edx, 5
0x21fc:	xor	edi, edi
0x21fe:	call	0x1630


0x2238:	mov	rdx, qword ptr [rsp + 0x38]
0x223d:	mov	esi, 3
0x2242:	xor	edi, edi
0x2244:	call	0x5fb0


0x2249:	mov	esi, dword ptr [rbx]
0x224b:	lea	rdx, [rip + 0x5df2]
0x2252:	mov	rcx, rax
0x2255:	mov	edi, 1
0x225a:	xor	eax, eax
0x225c:	call	0x1810


0x2261:	lea	rsi, [rip + 0x5242]
0x2268:	mov	edx, 5
0x226d:	xor	edi, edi
0x226f:	call	0x1630


0x2274:	xor	esi, esi
0x2276:	mov	rdx, rax
0x2279:	mov	edi, 1
0x227e:	xor	eax, eax
0x2280:	call	0x1810


0x2285:	lea	rsi, [rip + 0x5212]
0x228c:	mov	edx, 5
0x2291:	xor	edi, edi
0x2293:	call	0x1630


0x2298:	mov	rbx, rax
0x229b:	call	0x15b0


0x22a0:	mov	esi, dword ptr [rax]
0x22a2:	mov	rdx, rbx
0x22a5:	mov	edi, 1
0x22aa:	xor	eax, eax
0x22ac:	call	0x1810


0x22b1:	lea	rsi, [rip + 0x51db]
0x22b8:	mov	edx, 5
0x22bd:	xor	edi, edi
0x22bf:	call	0x1630


0x22c4:	mov	rbx, rax
0x22c7:	call	0x15b0


0x22cc:	mov	esi, dword ptr [rax]
0x22ce:	mov	rdx, rbx
0x22d1:	mov	edi, 1
0x22d6:	xor	eax, eax
0x22d8:	call	0x1810


0x2203:	mov	esi, dword ptr [rbx]
0x2205:	mov	rdx, rax
0x2208:	mov	edi, 1
0x220d:	xor	eax, eax
0x220f:	call	0x1810


0x212d:	cmp	r13, rax
0x2130:	ja	0x230a


0x2136:	add	rbp, r13
0x2139:	add	r14, r13
0x213c:	jmp	0x209a


0x230a:	lea	rsi, [rip + 0x518d]
0x2311:	mov	edx, 5
0x2316:	xor	edi, edi
0x2318:	call	0x1630


0x209a:	cmp	r15, r14
0x209d:	ja	0x2060


0x209f:	mov	rbx, rbp
0x20a2:	mov	r15, qword ptr [rsp + 0x28]
0x20a7:	mov	rbp, qword ptr [rsp + 0x20]
0x20ac:	mov	eax, dword ptr [rbp]
0x20af:	test	al, 0x30
0x20b1:	jne	0x20c0


0x2060:	mov	r13, rbx
0x2063:	mov	rax, r15
0x2066:	sub	r13, rbp
0x2069:	sub	rax, r14
0x206c:	cmp	r13, rax
0x206f:	cmova	r13, rax
0x2073:	test	r13, r13
0x2076:	jne	0x2110


0x20b3:	cmp	r15, 0x7800
0x20ba:	je	0x1fc0


0x207c:	mov	rax, qword ptr [r12 + 0x28]
0x2081:	cmp	rax, qword ptr [r12 + 0x30]
0x2086:	jae	0x218f


0x2110:	mov	rax, qword ptr [rsp + 8]
0x2115:	mov	rcx, qword ptr [rip + 0x208f6c]
0x211c:	mov	rdx, r13
0x211f:	mov	esi, 1
0x2124:	lea	rdi, [rax + r14]
0x2128:	call	0x17c0


0x1fc0:	xor	r15d, r15d
0x1fc3:	mov	r13, qword ptr [rsp + 0x10]
0x1fc8:	jmp	0x1fd9


0x208c:	lea	rdx, [rax + 1]
0x2090:	mov	qword ptr [r12 + 0x28], rdx
0x2095:	mov	byte ptr [rax], 0xa
0x2098:	xor	ebp, ebp
0x209a:	cmp	r15, r14
0x209d:	ja	0x2060


0x218f:	mov	esi, 0xa
0x2194:	mov	rdi, r12
0x2197:	call	0x16a0


0x231d:	mov	rbx, rax
0x2320:	call	0x15b0


0x2325:	mov	esi, dword ptr [rax]
0x2327:	mov	rdx, rbx
0x232a:	mov	edi, 1
0x232f:	xor	eax, eax
0x2331:	call	0x1810


0x219c:	add	eax, 1
0x219f:	jne	0x2098


0x21a5:	lea	rsi, [rip + 0x52f2]
0x21ac:	mov	edx, 5
0x21b1:	xor	edi, edi
0x21b3:	call	0x1630


0x2098:	xor	ebp, ebp
0x209a:	cmp	r15, r14
0x209d:	ja	0x2060


0x21b8:	mov	rbx, rax
0x21bb:	call	0x15b0


0x21c0:	mov	esi, dword ptr [rax]
0x21c2:	mov	rdx, rbx
0x21c5:	mov	edi, 1
0x21ca:	xor	eax, eax
0x21cc:	call	0x1810


0x23b4:	add	eax, 1
0x23b7:	jne	0x2230


0x23bd:	lea	rsi, [rip + 0x50da]
0x23c4:	mov	edx, 5
0x23c9:	xor	edi, edi
0x23cb:	call	0x1630


0x2230:	mov	eax, dword ptr [rbp]
0x2233:	jmp	0x20d3


0x23d0:	mov	rbx, rax
0x23d3:	call	0x15b0


0x23d8:	mov	esi, dword ptr [rax]
0x23da:	mov	rdx, rbx
0x23dd:	mov	edi, 1
0x23e2:	xor	eax, eax
0x23e4:	call	0x1810


0x23e9:	nop	dword ptr [rax]


0x2016:	mov	rdx, qword ptr [rsp + 8]
0x201b:	movsxd	rcx, eax
0x201e:	mov	rsi, r15
0x2021:	mov	rdi, qword ptr [rsp + 0x10]
0x2026:	call	r13


0x2029:	mov	edi, r15d
0x202c:	call	qword ptr [rip + 0x2090be]


0x2032:	cmp	qword ptr [rsp + 0x18], 0
0x2038:	movsxd	r13, eax
0x203b:	je	0x2141


0x2141:	mov	rcx, qword ptr [rip + 0x208f40]
0x2148:	mov	rdi, qword ptr [rsp + 8]
0x214d:	mov	rdx, r13
0x2150:	mov	esi, 1
0x2155:	call	0x17c0


0x2041:	xor	r14d, r14d
0x2044:	test	r13, r13
0x2047:	je	0x20ac


0x20ac:	mov	eax, dword ptr [rbp]
0x20af:	test	al, 0x30
0x20b1:	jne	0x20c0


0x2049:	mov	qword ptr [rsp + 0x20], rbp
0x204e:	mov	rbp, rbx
0x2051:	mov	rbx, qword ptr [rsp + 0x18]
0x2056:	mov	qword ptr [rsp + 0x28], r15
0x205b:	mov	r15, r13
0x205e:	nop	
0x2060:	mov	r13, rbx
0x2063:	mov	rax, r15
0x2066:	sub	r13, rbp
0x2069:	sub	rax, r14
0x206c:	cmp	r13, rax
0x206f:	cmova	r13, rax
0x2073:	test	r13, r13
0x2076:	jne	0x2110


0x215a:	cmp	r13, rax
0x215d:	jbe	0x20ac


0x2163:	lea	rsi, [rip + 0x5334]
0x216a:	mov	edx, 5
0x216f:	xor	edi, edi
0x2171:	call	0x1630


0x2176:	mov	rbx, rax
0x2179:	call	0x15b0


0x217e:	mov	esi, dword ptr [rax]
0x2180:	mov	rdx, rbx
0x2183:	mov	edi, 1
0x2188:	xor	eax, eax
0x218a:	call	0x1810


0x1b37:	movsxd	rdi, eax
0x1b3a:	call	0x67c0


0x1b3f:	mov	edi, 0x1400
0x1b44:	mov	r12, rax
0x1b47:	call	0x67c0


0x1b4c:	mov	qword ptr [rsp + 0x30], rax
0x1b51:	lea	rax, [rsp + 0x50]
0x1b56:	mov	qword ptr [rsp + 0x60], 0
0x1b5f:	mov	qword ptr [rsp + 0x10], rax
0x1b64:	mov	rdi, rax
0x1b67:	call	qword ptr [rip + 0x20956b]


0x1b6d:	lea	rax, [rsp + 0x48]
0x1b72:	mov	qword ptr [rsp + 0x18], rax
0x1b77:	nop	word ptr [rax + rax]
0x1b80:	xor	ebx, ebx
0x1b82:	mov	qword ptr [rsp + 8], rbp
0x1b87:	jmp	0x1bc6


0x1bc6:	mov	edi, 0x1400
0x1bcb:	call	qword ptr [rip + 0x20951f]


0x1bd1:	mov	rcx, qword ptr [rsp + 8]
0x1bd6:	movsxd	rdx, eax
0x1bd9:	lea	rdi, [r12 + rbx]
0x1bdd:	sub	rdx, rbx
0x1be0:	mov	esi, 1
0x1be5:	call	0x15f0


0x1bea:	cmp	byte ptr [rsp + 0x20], 0
0x1bef:	mov	r13, rax
0x1bf2:	mov	qword ptr [rsp + 0x48], rax
0x1bf7:	je	0x1b90


0x1b90:	mov	rax, qword ptr [rsp + 8]
0x1b95:	add	rbx, r13
0x1b98:	test	byte ptr [rax], 0x20
0x1b9b:	jne	0x22b1


0x1bf9:	xor	r14d, r14d
0x1bfc:	nop	dword ptr [rax]
0x1c00:	test	r13, r13
0x1c03:	je	0x1b90


0x1ba1:	mov	edi, 0x1400
0x1ba6:	call	qword ptr [rip + 0x209544]


0x1c05:	cmp	r14, r13
0x1c08:	jae	0x1b90


0x1c0a:	lea	rbp, [rbx + r14]
0x1c0e:	lea	r15, [r12 + rbp]
0x1c12:	movsx	edi, byte ptr [r15]
0x1c16:	call	qword ptr [rip + 0x2094cc]


0x1c1c:	test	al, al
0x1c1e:	mov	r13, qword ptr [rsp + 0x48]
0x1c23:	jne	0x1e70


0x1c29:	cmp	byte ptr [r15], 0x3d
0x1c2d:	je	0x1e70


0x1e70:	add	r14, 1
0x1e74:	jmp	0x1c00


0x1c33:	sub	r13, 1
0x1c37:	lea	rsi, [r12 + rbp + 1]
0x1c3c:	mov	rdi, r15
0x1c3f:	mov	rdx, r13
0x1c42:	mov	qword ptr [rsp + 0x48], r13
0x1c47:	sub	rdx, r14
0x1c4a:	call	0x1800


0x1c00:	test	r13, r13
0x1c03:	je	0x1b90


0x1800:	jmp	qword ptr [rip + 0x209772]




0x1c4f:	test	r13, r13
0x1c52:	jne	0x1c05


0x1c54:	jmp	0x1b90


0x1bac:	cdqe	
0x1bae:	cmp	rbx, rax
0x1bb1:	jae	0x1e80


0x1bb7:	mov	rax, qword ptr [rsp + 8]
0x1bbc:	mov	eax, dword ptr [rax]
0x1bbe:	test	al, 0x10
0x1bc0:	jne	0x1f30


0x1e80:	mov	rbp, qword ptr [rsp + 8]
0x1e85:	mov	eax, dword ptr [rbp]
0x1e88:	xor	r15d, r15d
0x1e8b:	mov	qword ptr [rsp + 8], rbx
0x1e90:	mov	r13, qword ptr [rsp + 0x30]
0x1e95:	mov	ebx, r15d
0x1e98:	mov	r15, qword ptr [rsp + 0x28]
0x1e9d:	jmp	0x1f01


0x1f30:	mov	rbp, qword ptr [rsp + 8]
0x1f35:	jmp	0x1e88


0x1f01:	test	al, 0x10
0x1f03:	je	0x1ea0


0x1e88:	xor	r15d, r15d
0x1e8b:	mov	qword ptr [rsp + 8], rbx
0x1e90:	mov	r13, qword ptr [rsp + 0x30]
0x1e95:	mov	ebx, r15d
0x1e98:	mov	r15, qword ptr [rsp + 0x28]
0x1e9d:	jmp	0x1f01


0x1ea0:	test	ebx, ebx
0x1ea2:	jne	0x1b80


0x1f05:	cmp	ebx, 1
0x1f08:	ja	0x1f3a


0x1ea8:	mov	rax, qword ptr [rip + 0x209221]
0x1eaf:	mov	rdx, qword ptr [rsp + 8]
0x1eb4:	mov	qword ptr [rsp + 0x48], 0x1400
0x1ebd:	mov	r8, qword ptr [rsp + 0x18]
0x1ec2:	mov	rcx, r13
0x1ec5:	mov	rsi, r12
0x1ec8:	mov	rdi, qword ptr [rsp + 0x10]
0x1ecd:	call	rax


0x1b80:	xor	ebx, ebx
0x1b82:	mov	qword ptr [rsp + 8], rbp
0x1b87:	jmp	0x1bc6


0x1f0a:	jne	0x1ea8


0x1f0c:	mov	eax, dword ptr [rsp + 0x50]
0x1f10:	test	eax, eax
0x1f12:	je	0x1f3a


0x1f14:	mov	qword ptr [rsp + 0x48], 0x1400
0x1f1d:	mov	rax, qword ptr [rip + 0x2091ac]
0x1f24:	xor	edx, edx
0x1f26:	jmp	0x1ebd


0x1ebd:	mov	r8, qword ptr [rsp + 0x18]
0x1ec2:	mov	rcx, r13
0x1ec5:	mov	rsi, r12
0x1ec8:	mov	rdi, qword ptr [rsp + 0x10]
0x1ecd:	call	rax


0x1ecf:	mov	rdx, qword ptr [rsp + 0x48]
0x1ed4:	mov	rcx, r15
0x1ed7:	mov	esi, 1
0x1edc:	mov	rdi, r13
0x1edf:	mov	r14d, eax
0x1ee2:	call	0x17c0


0x1ee7:	cmp	rax, qword ptr [rsp + 0x48]
0x1eec:	jb	0x2285


0x1ef2:	test	r14b, r14b
0x1ef5:	je	0x2261


0x1efb:	mov	eax, dword ptr [rbp]
0x1efe:	add	ebx, 1
0x1f01:	test	al, 0x10
0x1f03:	je	0x1ea0


0x51a0:	sub	rsp, 8
0x51a4:	mov	rcx, rbp
0x51a7:	mov	rsi, r13
0x51aa:	push	qword ptr [rsp + 0x68]
0x51ae:	push	qword ptr [rsp + 0x78]
0x51b2:	mov	rdi, r14
0x51b5:	push	0
0x51b7:	mov	r9d, dword ptr [rsp + 0x98]
0x51bf:	mov	r8d, dword ptr [rsp + 0x28]
0x51c4:	mov	rdx, qword ptr [rsp + 0x30]
0x51c9:	and	r9d, 0xfffffffd
0x51cd:	call	0x4600


0x51d2:	add	rsp, 0x20
0x51d6:	mov	r15, rax
0x51d9:	mov	rbx, qword ptr [rsp + 0xa8]
0x51e1:	xor	rbx, qword ptr fs:[0x28]
0x51ea:	mov	rax, r15
0x51ed:	jne	0x57f3


0x51f3:	add	rsp, 0xb8
0x51fa:	pop	rbx
0x51fb:	pop	rbp
0x51fc:	pop	r12
0x51fe:	pop	r13
0x5200:	pop	r14
0x5202:	pop	r15
0x5204:	ret	


0x57f3:	call	0x1660


0x579d:	sub	rsp, 8
0x57a1:	mov	r8d, 5
0x57a7:	mov	rcx, r11
0x57aa:	push	qword ptr [rsp + 0x68]
0x57ae:	push	qword ptr [rsp + 0x78]
0x57b2:	mov	rdi, r14
0x57b5:	push	qword ptr [rsp + 0x38]
0x57b9:	mov	r9d, dword ptr [rsp + 0x98]
0x57c1:	mov	rdx, qword ptr [rsp + 0x30]
0x57c6:	mov	rsi, qword ptr [rsp + 0x70]
0x57cb:	call	0x4600


0x57d0:	add	rsp, 0x20
0x57d4:	mov	r15, rax
0x57d7:	jmp	0x51d9


0x51d9:	mov	rbx, qword ptr [rsp + 0xa8]
0x51e1:	xor	rbx, qword ptr fs:[0x28]
0x51ea:	mov	rax, r15
0x51ed:	jne	0x57f3


0x1580:	push	qword ptr [rip + 0x2098aa]
0x1586:	jmp	qword ptr [rip + 0x2098ac]


0x158c:	nop	dword ptr [rax]


0x1596:	push	0
0x159b:	jmp	0x1580


0x15a6:	push	1
0x15ab:	jmp	0x1580


0x15b6:	push	2
0x15bb:	jmp	0x1580


0x15c6:	push	3
0x15cb:	jmp	0x1580


0x15d6:	push	4
0x15db:	jmp	0x1580


0x15e6:	push	5
0x15eb:	jmp	0x1580


0x15f6:	push	6
0x15fb:	jmp	0x1580


0x1606:	push	7
0x160b:	jmp	0x1580


0x1616:	push	8
0x161b:	jmp	0x1580


0x1626:	push	9
0x162b:	jmp	0x1580


0x1636:	push	0xa
0x163b:	jmp	0x1580


0x1646:	push	0xb
0x164b:	jmp	0x1580


0x1656:	push	0xc
0x165b:	jmp	0x1580


0x1666:	push	0xd
0x166b:	jmp	0x1580


0x1676:	push	0xe
0x167b:	jmp	0x1580


0x1686:	push	0xf
0x168b:	jmp	0x1580


0x1696:	push	0x10
0x169b:	jmp	0x1580


0x16a6:	push	0x11
0x16ab:	jmp	0x1580


0x16b6:	push	0x12
0x16bb:	jmp	0x1580


0x16c6:	push	0x13
0x16cb:	jmp	0x1580


0x16d6:	push	0x14
0x16db:	jmp	0x1580


0x16e6:	push	0x15
0x16eb:	jmp	0x1580


0x16f6:	push	0x16
0x16fb:	jmp	0x1580


0x1706:	push	0x17
0x170b:	jmp	0x1580


0x1716:	push	0x18
0x171b:	jmp	0x1580


0x1720:	jmp	qword ptr [rip + 0x2097e2]




0x1726:	push	0x19
0x172b:	jmp	0x1580


0x1736:	push	0x1a
0x173b:	jmp	0x1580


0x1746:	push	0x1b
0x174b:	jmp	0x1580


0x1756:	push	0x1c
0x175b:	jmp	0x1580


0x1766:	push	0x1d
0x176b:	jmp	0x1580


0x1776:	push	0x1e
0x177b:	jmp	0x1580


0x1786:	push	0x1f
0x178b:	jmp	0x1580


0x1796:	push	0x20
0x179b:	jmp	0x1580


0x17a6:	push	0x21
0x17ab:	jmp	0x1580


0x17b6:	push	0x22
0x17bb:	jmp	0x1580


0x17c6:	push	0x23
0x17cb:	jmp	0x1580


0x17d6:	push	0x24
0x17db:	jmp	0x1580


0x17e6:	push	0x25
0x17eb:	jmp	0x1580


0x17f6:	push	0x26
0x17fb:	jmp	0x1580


0x1806:	push	0x27
0x180b:	jmp	0x1580


0x1816:	push	0x28
0x181b:	jmp	0x1580


0x1826:	push	0x29
0x182b:	jmp	0x1580


0x1836:	push	0x2a
0x183b:	jmp	0x1580


0x1846:	push	0x2b
0x184b:	jmp	0x1580


0x1856:	push	0x2c
0x185b:	jmp	0x1580


0x1866:	push	0x2d
0x186b:	jmp	0x1580


0x1876:	push	0x2e
0x187b:	jmp	0x1580


0x1880:	jmp	qword ptr [rip + 0x209732]




0x1886:	push	0x2f
0x188b:	jmp	0x1580


0x1890:	jmp	qword ptr [rip + 0x20972a]




0x1896:	push	0x30
0x189b:	jmp	0x1580


0x18a6:	push	0x31
0x18ab:	jmp	0x1580


0x241a:	hlt	


0x241b:	nop	dword ptr [rax + rax]


0x2452:	nop	dword ptr [rax]
0x2456:	nop	word ptr cs:[rax + rax]


0x24a2:	nop	dword ptr [rax]
0x24a6:	nop	word ptr cs:[rax + rax]


0x24ea:	nop	word ptr [rax + rax]


0x24fa:	nop	word ptr [rax + rax]


0x2519:	nop	dword ptr [rax]


0x253b:	nop	dword ptr [rax + rax]


0x2555:	nop	
0x2556:	nop	word ptr cs:[rax + rax]


0x2575:	nop	
0x2576:	nop	word ptr cs:[rax + rax]


0x2584:	nop	
0x2586:	nop	word ptr cs:[rax + rax]


0x25cd:	nop	dword ptr [rax]


0x25df:	nop	


0x25eb:	nop	dword ptr [rax + rax]


0x25f8:	nop	dword ptr [rax + rax]


0x2644:	nop	
0x2646:	nop	word ptr cs:[rax + rax]


0x2694:	nop	
0x2696:	nop	word ptr cs:[rax + rax]


0x26ca:	nop	word ptr [rax + rax]


0x271a:	nop	word ptr [rax + rax]


0x2743:	nop	dword ptr [rax]
0x2746:	nop	word ptr cs:[rax + rax]


0x2773:	nop	dword ptr [rax]
0x2776:	nop	word ptr cs:[rax + rax]


0x27a6:	nop	word ptr cs:[rax + rax]


0x27f5:	nop	
0x27f6:	nop	word ptr cs:[rax + rax]


0x2814:	nop	
0x2816:	nop	word ptr cs:[rax + rax]


0x2845:	nop	
0x2846:	nop	word ptr cs:[rax + rax]


0x2859:	nop	dword ptr [rax]


0x2874:	nop	
0x2876:	nop	word ptr cs:[rax + rax]


0x28a5:	nop	
0x28a6:	nop	word ptr cs:[rax + rax]


0x28b9:	nop	dword ptr [rax]


0x2963:	nop	dword ptr [rax]
0x2966:	nop	word ptr cs:[rax + rax]


0x2a83:	nop	dword ptr [rax]
0x2a86:	nop	word ptr cs:[rax + rax]


0x2b13:	nop	dword ptr [rax]
0x2b16:	nop	word ptr cs:[rax + rax]


0x2bc3:	nop	dword ptr [rax]
0x2bc6:	nop	word ptr cs:[rax + rax]


0x2d08:	nop	dword ptr [rax + rax]


0x2d86:	nop	word ptr cs:[rax + rax]


0x2e73:	nop	dword ptr [rax]
0x2e76:	nop	word ptr cs:[rax + rax]


0x2f51:	nop	dword ptr [rax + rax]
0x2f56:	nop	word ptr cs:[rax + rax]


0x345a:	nop	word ptr [rax + rax]


0x360a:	nop	word ptr [rax + rax]


0x3829:	nop	dword ptr [rax]


0x38b7:	nop	word ptr [rax + rax]


0x38d5:	nop	
0x38d6:	nop	word ptr cs:[rax + rax]


0x38e7:	nop	word ptr [rax + rax]


0x3b9e:	nop	


0x3c5f:	nop	


0x3d68:	nop	dword ptr [rax + rax]


0x3f25:	nop	
0x3f26:	nop	word ptr cs:[rax + rax]


0x3fb7:	nop	word ptr [rax + rax]


0x3fd5:	nop	
0x3fd6:	nop	word ptr cs:[rax + rax]


0x3fe7:	nop	word ptr [rax + rax]


0x429d:	nop	dword ptr [rax]


0x435f:	nop	


0x4368:	nop	dword ptr [rax + rax]


0x4378:	nop	dword ptr [rax + rax]


0x4424:	nop	word ptr cs:[rax + rax]
0x442e:	nop	


0x4435:	nop	
0x4436:	nop	word ptr cs:[rax + rax]


0x4462:	nop	word ptr cs:[rax + rax]
0x446c:	nop	dword ptr [rax]


0x450f:	nop	


0x45f7:	nop	word ptr [rax + rax]


0x4693:	mov	byte ptr [rsp + 0xe], 1
0x4698:	mov	byte ptr [rsp + 0x7c], 0
0x469d:	xor	r12d, r12d
0x46a0:	mov	qword ptr [rsp + 0x50], 0
0x46a9:	mov	byte ptr [rsp + 0xf], 1
0x46ae:	mov	byte ptr [rsp + 0xd], 0
0x46b3:	lea	rax, [rip + 0x39e3]
0x46ba:	mov	qword ptr [rsp + 0x18], 1
0x46c3:	xor	r15d, r15d
0x46c6:	mov	dword ptr [rsp + 8], 2
0x46ce:	mov	qword ptr [rsp + 0x48], rax
0x46d3:	xor	r11d, r11d
0x46d6:	mov	rax, rbp
0x46d9:	mov	r8d, r12d
0x46dc:	mov	rbp, r11
0x46df:	mov	r11, rax
0x46e2:	nop	word ptr [rax + rax]
0x46e8:	cmp	r11, rbp
0x46eb:	setne	r12b
0x46ef:	cmp	r11, -1
0x46f3:	jne	0x4702


0x46f5:	mov	rax, qword ptr [rsp + 0x10]
0x46fa:	cmp	byte ptr [rax + rbp], 0
0x46fe:	setne	r12b
0x4702:	test	r12b, r12b
0x4705:	je	0x4d60


0x4702:	test	r12b, r12b
0x4705:	je	0x4d60


0x4d60:	cmp	dword ptr [rsp + 8], 2
0x4d65:	movzx	ebx, byte ptr [rsp + 0xf]
0x4d6a:	mov	r12d, r8d
0x4d6d:	mov	rbp, r11
0x4d70:	sete	dl
0x4d73:	mov	eax, ebx
0x4d75:	test	r15, r15
0x4d78:	sete	cl
0x4d7b:	and	eax, edx
0x4d7d:	and	al, cl
0x4d7f:	jne	0x57e6


0x470b:	cmp	dword ptr [rsp + 8], 2
0x4710:	mov	rdi, qword ptr [rsp + 0x10]
0x4715:	lea	r9, [rdi + rbp]
0x4719:	setne	al
0x471c:	and	al, byte ptr [rsp + 0xd]
0x4720:	mov	r10d, eax
0x4723:	je	0x47d0


0x4d85:	mov	eax, ebx
0x4d87:	xor	eax, 1
0x4d8a:	and	dl, al
0x4d8c:	je	0x56fc


0x57e6:	mov	dword ptr [rsp + 8], 2
0x57ee:	jmp	0x5189


0x47d0:	movzx	ebx, byte ptr [r9]
0x47d4:	cmp	bl, 0x7e
0x47d7:	ja	0x4af8


0x4729:	mov	rax, qword ptr [rsp + 0x18]
0x472e:	test	rax, rax
0x4731:	je	0x4b60


0x56fc:	mov	rbx, qword ptr [rsp + 0x48]
0x5701:	test	rbx, rbx
0x5704:	je	0x5732


0x4d92:	cmp	byte ptr [rsp + 0x7c], 0
0x4d97:	je	0x56fa


0x5189:	cmp	byte ptr [rsp + 0xd], 0
0x518e:	je	0x51a0


0x47dd:	lea	rcx, [rip + 0x3948]
0x47e4:	movzx	edx, bl
0x47e7:	movsxd	rax, dword ptr [rcx + rdx*4]
0x47eb:	add	rax, rcx
0x47ee:	jmp	rax


0x4af8:	cmp	qword ptr [rsp + 0x58], 1
0x4afe:	jne	0x4ea8


0x4b60:	movzx	ebx, byte ptr [r9]
0x4b64:	cmp	bl, 0x7e
0x4b67:	ja	0x4af0


0x4737:	cmp	r11, -1
0x473b:	lea	rbx, [rbp + rax]
0x4740:	jne	0x4770


0x5732:	cmp	r13, r15
0x5735:	jbe	0x51d9


0x5706:	test	al, al
0x5708:	je	0x5732


0x56fa:	mov	eax, edx
0x56fc:	mov	rbx, qword ptr [rsp + 0x48]
0x5701:	test	rbx, rbx
0x5704:	je	0x5732


0x4d9d:	cmp	byte ptr [rsp + 0xe], 0
0x4da2:	jne	0x579d


0x5190:	test	al, al
0x5192:	mov	eax, 4
0x5197:	cmove	eax, dword ptr [rsp + 8]
0x519c:	mov	dword ptr [rsp + 8], eax


0x4b04:	mov	qword ptr [rsp + 0x38], r11
0x4b09:	mov	byte ptr [rsp + 0x30], r8b
0x4b0e:	mov	byte ptr [rsp + 0x28], r10b
0x4b13:	call	0x18a0


0x4ea8:	lea	rax, [rsp + 0xa0]
0x4eb0:	cmp	r11, -1
0x4eb4:	mov	qword ptr [rsp + 0xa0], 0
0x4ec0:	mov	qword ptr [rsp + 0x28], rax
0x4ec5:	jne	0x4ef4


0x4b69:	lea	rcx, [rip + 0x37b8]
0x4b70:	movzx	edx, bl
0x4b73:	movsxd	rax, dword ptr [rcx + rdx*4]
0x4b77:	add	rax, rcx
0x4b7a:	jmp	rax


0x4af0:	xor	r10d, r10d
0x4af3:	nop	dword ptr [rax + rax]
0x4af8:	cmp	qword ptr [rsp + 0x58], 1
0x4afe:	jne	0x4ea8


0x4742:	cmp	rax, 1
0x4746:	jbe	0x4770


0x4770:	cmp	rbx, r11
0x4773:	mov	byte ptr [rsp + 0x28], r10b
0x4778:	ja	0x4d30


0x573b:	mov	byte ptr [r14 + r15], 0
0x5740:	jmp	0x51d9


0x570a:	movzx	ecx, byte ptr [rbx]
0x570d:	mov	rax, rbx
0x5710:	test	cl, cl
0x5712:	je	0x5732


0x4da8:	test	r13, r13
0x4dab:	sete	al
0x4dae:	cmp	qword ptr [rsp + 0x50], 0
0x4db4:	setne	dl
0x4db7:	and	al, dl
0x4db9:	je	0x57dc


0x4ec7:	mov	rdi, qword ptr [rsp + 0x10]
0x4ecc:	mov	byte ptr [rsp + 0x40], r8b
0x4ed1:	mov	byte ptr [rsp + 0x38], r10b
0x4ed6:	mov	qword ptr [rsp + 0x30], r9
0x4edb:	call	0x1650


0x4ef4:	lea	rax, [rsp + 0x9c]
0x4efc:	xor	ecx, ecx
0x4efe:	mov	byte ptr [rsp + 0x7e], bl
0x4f02:	mov	byte ptr [rsp + 0x7d], r8b
0x4f07:	mov	rbx, rcx
0x4f0a:	mov	qword ptr [rsp + 0x88], r9
0x4f12:	mov	qword ptr [rsp + 0x38], rax
0x4f17:	mov	byte ptr [rsp + 0x7f], r10b
0x4f1c:	mov	qword ptr [rsp + 0x80], r15
0x4f24:	mov	qword ptr [rsp + 0x40], r14
0x4f29:	mov	qword ptr [rsp + 0x70], r13
0x4f2e:	mov	qword ptr [rsp + 0x30], r11
0x4f33:	mov	rax, qword ptr [rsp + 0x10]
0x4f38:	lea	r14, [rbp + rbx]
0x4f3d:	mov	rdx, qword ptr [rsp + 0x30]
0x4f42:	mov	rcx, qword ptr [rsp + 0x28]
0x4f47:	mov	rdi, qword ptr [rsp + 0x38]
0x4f4c:	lea	r13, [rax + r14]
0x4f50:	sub	rdx, r14
0x4f53:	mov	rsi, r13
0x4f56:	call	0x70c0


0x4748:	mov	byte ptr [rsp + 0x38], r8b
0x474d:	mov	byte ptr [rsp + 0x30], r10b
0x4752:	mov	qword ptr [rsp + 0x28], r9
0x4757:	call	0x1650


0x477e:	mov	rdx, qword ptr [rsp + 0x18]
0x4783:	mov	rsi, qword ptr [rsp + 0x48]
0x4788:	mov	rdi, r9
0x478b:	mov	qword ptr [rsp + 0x40], r11
0x4790:	mov	byte ptr [rsp + 0x38], r8b
0x4795:	mov	qword ptr [rsp + 0x30], r9
0x479a:	call	0x1720


0x4d30:	xor	r10d, r10d
0x4d33:	jmp	0x47d0


0x5714:	mov	rdx, r15
0x5717:	sub	rax, r15
0x571a:	cmp	r13, rdx
0x571d:	jbe	0x5723


0x57dc:	movzx	eax, byte ptr [rsp + 0x7c]
0x57e1:	jmp	0x56fc


0x4dbf:	mov	r13, qword ptr [rsp + 0x50]
0x4dc4:	lea	rbx, [rip + 0x32d2]
0x4dcb:	mov	byte ptr [r14], 0x27
0x4dcf:	mov	dword ptr [rsp + 8], 2
0x4dd7:	mov	r15d, 1
0x4ddd:	mov	qword ptr [rsp + 0x18], 1
0x4de6:	mov	byte ptr [rsp + 0xf], 0
0x4deb:	mov	qword ptr [rsp + 0x48], rbx
0x4df0:	mov	byte ptr [rsp + 0x7c], al
0x4df4:	jmp	0x46d3


0x5723:	add	rdx, 1
0x5727:	movzx	ecx, byte ptr [rax + rdx]
0x572b:	test	cl, cl
0x572d:	jne	0x571a


0x571f:	mov	byte ptr [r14 + rdx], cl
0x5723:	add	rdx, 1
0x5727:	movzx	ecx, byte ptr [rax + rdx]
0x572b:	test	cl, cl
0x572d:	jne	0x571a


0x46d3:	xor	r11d, r11d
0x46d6:	mov	rax, rbp
0x46d9:	mov	r8d, r12d
0x46dc:	mov	rbp, r11
0x46df:	mov	r11, rax
0x46e2:	nop	word ptr [rax + rax]
0x46e8:	cmp	r11, rbp
0x46eb:	setne	r12b
0x46ef:	cmp	r11, -1
0x46f3:	jne	0x4702


0x572f:	mov	r15, rdx
0x5732:	cmp	r13, r15
0x5735:	jbe	0x51d9


0x571a:	cmp	r13, rdx
0x571d:	jbe	0x5723


0x479f:	test	eax, eax
0x47a1:	mov	r9, qword ptr [rsp + 0x30]
0x47a6:	movzx	r8d, byte ptr [rsp + 0x38]
0x47ac:	mov	r11, qword ptr [rsp + 0x40]
0x47b1:	jne	0x4d30


0x47b7:	cmp	byte ptr [rsp + 0xf], 0
0x47bc:	movzx	r10d, byte ptr [rsp + 0x28]
0x47c2:	jne	0x5745


0x5745:	cmp	dword ptr [rsp + 8], 2
0x574a:	movzx	ebx, byte ptr [rsp + 0xf]
0x574f:	mov	rbp, r11
0x5752:	sete	al
0x5755:	mov	byte ptr [rsp + 0xd], bl
0x5759:	jmp	0x5189


0x4f5b:	test	rax, rax
0x4f5e:	mov	r15, rax
0x4f61:	je	0x4fb1


0x4fb1:	mov	edx, r12d
0x4fb4:	mov	rdi, rbx
0x4fb7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x4fbd:	xor	edx, 1
0x4fc0:	movzx	ebx, byte ptr [rsp + 0x7e]
0x4fc5:	movzx	r10d, byte ptr [rsp + 0x7f]
0x4fcb:	and	dl, byte ptr [rsp + 0xd]
0x4fcf:	mov	r15, qword ptr [rsp + 0x80]
0x4fd7:	mov	r14, qword ptr [rsp + 0x40]
0x4fdc:	mov	r13, qword ptr [rsp + 0x70]
0x4fe1:	mov	r11, qword ptr [rsp + 0x30]
0x4fe6:	cmp	rdi, 1
0x4fea:	jbe	0x55eb


0x4f63:	cmp	rax, -1
0x4f67:	je	0x5585


0x55eb:	mov	eax, edx
0x55ed:	jmp	0x4b47


0x4ff0:	mov	rcx, rdi
0x4ff3:	xor	esi, esi
0x4ff5:	movzx	r9d, byte ptr [rsp + 0xf]
0x4ffb:	add	rcx, rbp
0x4ffe:	mov	rdi, qword ptr [rsp + 0x10]
0x5003:	jmp	0x50be


0x5585:	mov	rdi, rbx
0x5588:	movzx	r8d, byte ptr [rsp + 0x7d]
0x558e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x5593:	movzx	r10d, byte ptr [rsp + 0x7f]
0x5599:	mov	r15, qword ptr [rsp + 0x80]
0x55a1:	xor	r12d, r12d
0x55a4:	mov	r14, qword ptr [rsp + 0x40]
0x55a9:	mov	r13, qword ptr [rsp + 0x70]
0x55ae:	mov	r11, qword ptr [rsp + 0x30]
0x55b3:	movzx	edx, byte ptr [rsp + 0xd]
0x55b8:	jmp	0x4fe6


0x4f6d:	cmp	rax, -2
0x4f71:	je	0x5511


0x4b47:	test	al, al
0x4b49:	jne	0x54e1


0x50be:	test	dl, dl
0x50c0:	jne	0x5010


0x4fe6:	cmp	rdi, 1
0x4fea:	jbe	0x55eb


0x5511:	mov	r11, qword ptr [rsp + 0x30]
0x5516:	mov	rsi, r14
0x5519:	mov	rcx, r13
0x551c:	mov	rax, rbx
0x551f:	mov	rdi, rbx
0x5522:	movzx	r8d, byte ptr [rsp + 0x7d]
0x5528:	movzx	ebx, byte ptr [rsp + 0x7e]
0x552d:	mov	r9, qword ptr [rsp + 0x88]
0x5535:	cmp	rsi, r11
0x5538:	movzx	r10d, byte ptr [rsp + 0x7f]
0x553e:	mov	r15, qword ptr [rsp + 0x80]
0x5546:	mov	r14, qword ptr [rsp + 0x40]
0x554b:	mov	r13, qword ptr [rsp + 0x70]
0x5550:	jae	0x5578


0x4f77:	cmp	dword ptr [rsp + 8], 2
0x4f7c:	sete	al
0x4f7f:	and	al, byte ptr [rsp + 0xf]
0x4f83:	jne	0x5120


0x4b4f:	cmp	dword ptr [rsp + 8], 2
0x4b54:	sete	dl
0x4b57:	jmp	0x4828


0x54e1:	movzx	edx, byte ptr [rsp + 0xd]
0x54e6:	xor	r12d, r12d
0x54e9:	jmp	0x4ff0


0x50c6:	mov	eax, esi
0x50c8:	xor	eax, 1
0x50cb:	and	eax, r8d
0x50ce:	test	r10b, r10b
0x50d1:	je	0x50e1


0x5010:	cmp	dword ptr [rsp + 8], 2
0x5015:	sete	al
0x5018:	test	r9b, r9b
0x501b:	jne	0x54d0


0x5552:	cmp	byte ptr [rcx], 0
0x5555:	jne	0x5567


0x5578:	movzx	edx, byte ptr [rsp + 0xd]
0x557d:	xor	r12d, r12d
0x5580:	jmp	0x4fe6


0x4f89:	mov	edi, dword ptr [rsp + 0x9c]
0x4f90:	call	0x1890


0x5120:	cmp	r15, 1
0x5124:	je	0x4f89


0x4828:	cmp	byte ptr [rsp + 0xd], 1
0x482d:	jne	0x4942


0x50e1:	add	rbp, 1
0x50e5:	cmp	rbp, rcx
0x50e8:	jae	0x486c


0x50d3:	cmp	r13, r15
0x50d6:	jbe	0x50dd


0x5021:	mov	esi, r8d
0x5024:	xor	esi, 1
0x5027:	and	al, sil
0x502a:	je	0x505b


0x54d0:	movzx	ebx, byte ptr [rsp + 0xf]
0x54d5:	mov	rbp, r11
0x54d8:	mov	byte ptr [rsp + 0xd], bl
0x54dc:	jmp	0x5189


0x5557:	jmp	0x5578


0x5567:	add	rax, 1
0x556b:	lea	rdx, [rbp + rax]
0x5570:	cmp	r11, rdx
0x5573:	ja	0x5560


0x512a:	mov	rdi, qword ptr [rsp + 0x10]
0x512f:	lea	rcx, [rdi + r15]
0x5133:	lea	rdx, [rdi + r14 + 1]
0x5138:	lea	r8, [rcx + r14]
0x513c:	jmp	0x514d


0x4833:	test	dl, dl
0x4835:	jne	0x4942


0x4942:	cmp	byte ptr [rsp + 0xf], 0
0x4947:	jne	0x483b


0x50ee:	test	al, al
0x50f0:	je	0x54ee


0x486c:	test	al, al
0x486e:	je	0x4890


0x50dd:	add	r15, 1
0x50e1:	add	rbp, 1
0x50e5:	cmp	rbp, rcx
0x50e8:	jae	0x486c


0x50d8:	mov	byte ptr [r14 + r15], 0x5c
0x50dd:	add	r15, 1
0x50e1:	add	rbp, 1
0x50e5:	cmp	rbp, rcx
0x50e8:	jae	0x486c


0x505b:	cmp	r13, r15
0x505e:	jbe	0x5065


0x502c:	cmp	r13, r15
0x502f:	jbe	0x5036


0x5575:	mov	rdi, rax
0x5578:	movzx	edx, byte ptr [rsp + 0xd]
0x557d:	xor	r12d, r12d
0x5580:	jmp	0x4fe6


0x5560:	cmp	byte ptr [r9 + rax], 0
0x5565:	je	0x5575


0x514d:	movzx	ecx, byte ptr [rdx]
0x5150:	sub	ecx, 0x5b
0x5153:	cmp	cl, 0x21
0x5156:	ja	0x5140


0x483b:	mov	rsi, qword ptr [rsp + 0x20]
0x4840:	test	rsi, rsi
0x4843:	je	0x4859


0x494d:	jmp	0x4859


0x54ee:	xor	r10d, r10d
0x54f1:	jmp	0x50ad


0x50f6:	cmp	r13, r15
0x50f9:	jbe	0x5100


0x4890:	cmp	r15, r13
0x4893:	jae	0x4899


0x4870:	cmp	r13, r15
0x4873:	jbe	0x487a


0x5065:	lea	rax, [r15 + 1]
0x5069:	cmp	r13, rax
0x506c:	jbe	0x507b


0x5060:	mov	byte ptr [r14 + r15], 0x5c
0x5065:	lea	rax, [r15 + 1]
0x5069:	cmp	r13, rax
0x506c:	jbe	0x507b


0x5036:	lea	rsi, [r15 + 1]
0x503a:	cmp	r13, rsi
0x503d:	jbe	0x5045


0x5031:	mov	byte ptr [r14 + r15], 0x27
0x5036:	lea	rsi, [r15 + 1]
0x503a:	cmp	r13, rsi
0x503d:	jbe	0x5045


0x5158:	mov	esi, 1
0x515d:	shl	rsi, cl
0x5160:	mov	rcx, rsi
0x5163:	movabs	rsi, 0x20000002b
0x516d:	test	rcx, rsi
0x5170:	je	0x5140


0x5140:	add	rdx, 1
0x5144:	cmp	r8, rdx
0x5147:	je	0x4f89


0x4859:	test	r10b, r10b
0x485c:	jne	0x49a3


0x4845:	mov	edx, ebx
0x4847:	shr	dl, 5
0x484a:	movzx	edx, dl
0x484d:	mov	edx, dword ptr [rsi + rdx*4]
0x4850:	bt	edx, ebx
0x4853:	jb	0x49a3


0x50ad:	cmp	r13, r15
0x50b0:	jbe	0x50b6


0x5100:	lea	rax, [r15 + 1]
0x5104:	cmp	r13, rax
0x5107:	jbe	0x510f


0x50fb:	mov	byte ptr [r14 + r15], 0x27
0x5100:	lea	rax, [r15 + 1]
0x5104:	cmp	r13, rax
0x5107:	jbe	0x510f


0x4895:	mov	byte ptr [r14 + r15], bl
0x4899:	movzx	edi, byte ptr [rsp + 0xe]
0x489e:	add	r15, 1
0x48a2:	mov	eax, 0
0x48a7:	test	r12b, r12b
0x48aa:	cmove	edi, eax
0x48ad:	mov	byte ptr [rsp + 0xe], dil
0x48b2:	jmp	0x46e8


0x4899:	movzx	edi, byte ptr [rsp + 0xe]
0x489e:	add	r15, 1
0x48a2:	mov	eax, 0
0x48a7:	test	r12b, r12b
0x48aa:	cmove	edi, eax
0x48ad:	mov	byte ptr [rsp + 0xe], dil
0x48b2:	jmp	0x46e8


0x487a:	lea	rax, [r15 + 1]
0x487e:	cmp	r13, rax
0x4881:	jbe	0x4889


0x4875:	mov	byte ptr [r14 + r15], 0x27
0x487a:	lea	rax, [r15 + 1]
0x487e:	cmp	r13, rax
0x4881:	jbe	0x4889


0x507b:	lea	rax, [r15 + 2]
0x507f:	cmp	r13, rax
0x5082:	jbe	0x5094


0x506e:	mov	eax, ebx
0x5070:	shr	al, 6
0x5073:	add	eax, 0x30
0x5076:	mov	byte ptr [r14 + r15 + 1], al
0x507b:	lea	rax, [r15 + 2]
0x507f:	cmp	r13, rax
0x5082:	jbe	0x5094


0x5045:	lea	rsi, [r15 + 2]
0x5049:	cmp	r13, rsi
0x504c:	jbe	0x5054


0x503f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x5045:	lea	rsi, [r15 + 2]
0x5049:	cmp	r13, rsi
0x504c:	jbe	0x5054


0x5172:	mov	r14, qword ptr [rsp + 0x40]
0x5177:	mov	r13, qword ptr [rsp + 0x70]
0x517c:	mov	rbp, qword ptr [rsp + 0x30]
0x5181:	mov	dword ptr [rsp + 8], 2
0x5189:	cmp	byte ptr [rsp + 0xd], 0
0x518e:	je	0x51a0


0x4862:	xor	eax, 1
0x4865:	add	rbp, 1
0x4869:	and	eax, r8d
0x486c:	test	al, al
0x486e:	je	0x4890


0x49a3:	cmp	dword ptr [rsp + 8], 2
0x49a8:	sete	dl
0x49ab:	cmp	byte ptr [rsp + 0xf], 0
0x49b0:	mov	eax, edx
0x49b2:	jne	0x5208


0x50b6:	movzx	ebx, byte ptr [rdi + rbp]
0x50ba:	add	r15, 1
0x50be:	test	dl, dl
0x50c0:	jne	0x5010


0x50b2:	mov	byte ptr [r14 + r15], bl
0x50b6:	movzx	ebx, byte ptr [rdi + rbp]
0x50ba:	add	r15, 1
0x50be:	test	dl, dl
0x50c0:	jne	0x5010


0x510f:	add	r15, 2
0x5113:	xor	r10d, r10d
0x5116:	xor	r8d, r8d
0x5119:	jmp	0x50ad


0x5109:	mov	byte ptr [r14 + r15 + 1], 0x27
0x510f:	add	r15, 2
0x5113:	xor	r10d, r10d
0x5116:	xor	r8d, r8d
0x5119:	jmp	0x50ad


0x46e8:	cmp	r11, rbp
0x46eb:	setne	r12b
0x46ef:	cmp	r11, -1
0x46f3:	jne	0x4702


0x4889:	add	r15, 2
0x488d:	xor	r8d, r8d
0x4890:	cmp	r15, r13
0x4893:	jae	0x4899


0x4883:	mov	byte ptr [r14 + r15 + 1], 0x27
0x4889:	add	r15, 2
0x488d:	xor	r8d, r8d
0x4890:	cmp	r15, r13
0x4893:	jae	0x4899


0x5094:	and	ebx, 7
0x5097:	add	rbp, 1
0x509b:	add	r15, 3
0x509f:	add	ebx, 0x30
0x50a2:	cmp	rbp, rcx
0x50a5:	jae	0x4890


0x5084:	mov	eax, ebx
0x5086:	shr	al, 3
0x5089:	and	eax, 7
0x508c:	add	eax, 0x30
0x508f:	mov	byte ptr [r14 + r15 + 2], al
0x5094:	and	ebx, 7
0x5097:	add	rbp, 1
0x509b:	add	r15, 3
0x509f:	add	ebx, 0x30
0x50a2:	cmp	rbp, rcx
0x50a5:	jae	0x4890


0x5054:	add	r15, 3
0x5058:	mov	r8d, eax
0x505b:	cmp	r13, r15
0x505e:	jbe	0x5065


0x504e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x5054:	add	r15, 3
0x5058:	mov	r8d, eax
0x505b:	cmp	r13, r15
0x505e:	jbe	0x5065


0x49b8:	mov	eax, r8d
0x49bb:	xor	eax, 1
0x49be:	and	al, dl
0x49c0:	je	0x49f1


0x5208:	mov	rbp, r11
0x520b:	jmp	0x5189


0x50ab:	mov	esi, edx
0x50ad:	cmp	r13, r15
0x50b0:	jbe	0x50b6


0x49f1:	cmp	r13, r15
0x49f4:	jbe	0x49fb


0x49c2:	cmp	r13, r15
0x49c5:	jbe	0x49cc


0x49fb:	add	r15, 1
0x49ff:	add	rbp, 1
0x4a03:	jmp	0x4890


0x49f6:	mov	byte ptr [r14 + r15], 0x5c
0x49fb:	add	r15, 1
0x49ff:	add	rbp, 1
0x4a03:	jmp	0x4890


0x49cc:	lea	rdx, [r15 + 1]
0x49d0:	cmp	r13, rdx
0x49d3:	jbe	0x49db


0x49c7:	mov	byte ptr [r14 + r15], 0x27
0x49cc:	lea	rdx, [r15 + 1]
0x49d0:	cmp	r13, rdx
0x49d3:	jbe	0x49db


0x49db:	lea	rdx, [r15 + 2]
0x49df:	cmp	r13, rdx
0x49e2:	jbe	0x49ea


0x49d5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x49db:	lea	rdx, [r15 + 2]
0x49df:	cmp	r13, rdx
0x49e2:	jbe	0x49ea


0x49ea:	add	r15, 3
0x49ee:	mov	r8d, eax
0x49f1:	cmp	r13, r15
0x49f4:	jbe	0x49fb


0x49e4:	mov	byte ptr [r14 + r15 + 2], 0x27
0x49ea:	add	r15, 3
0x49ee:	mov	r8d, eax
0x49f1:	cmp	r13, r15
0x49f4:	jbe	0x49fb


0x4f95:	mov	rdi, qword ptr [rsp + 0x28]
0x4f9a:	test	eax, eax
0x4f9c:	mov	eax, 0
0x4fa1:	cmove	r12d, eax
0x4fa5:	add	rbx, r15
0x4fa8:	call	0x1880


0x4fad:	test	eax, eax
0x4faf:	je	0x4f33


0x4f33:	mov	rax, qword ptr [rsp + 0x10]
0x4f38:	lea	r14, [rbp + rbx]
0x4f3d:	mov	rdx, qword ptr [rsp + 0x30]
0x4f42:	mov	rcx, qword ptr [rsp + 0x28]
0x4f47:	mov	rdi, qword ptr [rsp + 0x38]
0x4f4c:	lea	r13, [rax + r14]
0x4f50:	sub	rdx, r14
0x4f53:	mov	rsi, r13
0x4f56:	call	0x70c0


0x475c:	movzx	r8d, byte ptr [rsp + 0x38]
0x4762:	movzx	r10d, byte ptr [rsp + 0x30]
0x4768:	mov	r11, rax
0x476b:	mov	r9, qword ptr [rsp + 0x28]
0x4770:	cmp	rbx, r11
0x4773:	mov	byte ptr [rsp + 0x28], r10b
0x4778:	ja	0x4d30


0x4ee0:	movzx	r8d, byte ptr [rsp + 0x40]
0x4ee6:	movzx	r10d, byte ptr [rsp + 0x38]
0x4eec:	mov	r11, rax
0x4eef:	mov	r9, qword ptr [rsp + 0x30]
0x4ef4:	lea	rax, [rsp + 0x9c]
0x4efc:	xor	ecx, ecx
0x4efe:	mov	byte ptr [rsp + 0x7e], bl
0x4f02:	mov	byte ptr [rsp + 0x7d], r8b
0x4f07:	mov	rbx, rcx
0x4f0a:	mov	qword ptr [rsp + 0x88], r9
0x4f12:	mov	qword ptr [rsp + 0x38], rax
0x4f17:	mov	byte ptr [rsp + 0x7f], r10b
0x4f1c:	mov	qword ptr [rsp + 0x80], r15
0x4f24:	mov	qword ptr [rsp + 0x40], r14
0x4f29:	mov	qword ptr [rsp + 0x70], r13
0x4f2e:	mov	qword ptr [rsp + 0x30], r11
0x4f33:	mov	rax, qword ptr [rsp + 0x10]
0x4f38:	lea	r14, [rbp + rbx]
0x4f3d:	mov	rdx, qword ptr [rsp + 0x30]
0x4f42:	mov	rcx, qword ptr [rsp + 0x28]
0x4f47:	mov	rdi, qword ptr [rsp + 0x38]
0x4f4c:	lea	r13, [rax + r14]
0x4f50:	sub	rdx, r14
0x4f53:	mov	rsi, r13
0x4f56:	call	0x70c0


0x4b18:	mov	rcx, qword ptr [rax]
0x4b1b:	movzx	edx, bl
0x4b1e:	movzx	r10d, byte ptr [rsp + 0x28]
0x4b24:	movzx	r8d, byte ptr [rsp + 0x30]
0x4b2a:	mov	r11, qword ptr [rsp + 0x38]
0x4b2f:	mov	edi, 1
0x4b34:	movzx	eax, word ptr [rcx + rdx*2]
0x4b38:	and	ax, 0x4000
0x4b3c:	setne	r12b
0x4b40:	sete	al
0x4b43:	and	al, byte ptr [rsp + 0xd]
0x4b47:	test	al, al
0x4b49:	jne	0x54e1


0x47f0:	xor	r10d, r10d
0x47f3:	cmp	r11, 1
0x47f7:	setne	al
0x47fa:	cmp	r11, -1
0x47fe:	jne	0x480c


0x4800:	mov	rax, qword ptr [rsp + 0x10]
0x4805:	cmp	byte ptr [rax + 1], 0
0x4809:	setne	al
0x480c:	cmp	dword ptr [rsp + 8], 2
0x4811:	sete	dl
0x4814:	test	al, al
0x4816:	je	0x4a68


0x480c:	cmp	dword ptr [rsp + 8], 2
0x4811:	sete	dl
0x4814:	test	al, al
0x4816:	je	0x4a68


0x4a68:	test	rbp, rbp
0x4a6b:	jne	0x481c


0x481c:	xor	r12d, r12d
0x481f:	xor	eax, eax
0x4821:	nop	dword ptr [rax]
0x4828:	cmp	byte ptr [rsp + 0xd], 1
0x482d:	jne	0x4942


0x4a71:	movzx	eax, byte ptr [rsp + 0xf]
0x4a76:	and	al, dl
0x4a78:	je	0x4828


0x4a7e:	mov	rbp, r11
0x4a81:	mov	dword ptr [rsp + 8], 2
0x4a89:	jmp	0x5189


0x4e88:	cmp	byte ptr [rsp + 0xf], 0
0x4e8d:	jne	0x56b0


0x48d0:	cmp	eax, 5
0x48d3:	je	0x4e48


0x4e93:	xor	r12d, r12d
0x4e96:	xor	eax, eax
0x4e98:	mov	ebx, 0x3f
0x4e9d:	jmp	0x4859


0x56b0:	mov	rbp, r11
0x56b3:	movzx	eax, byte ptr [rsp + 0xf]
0x56b8:	jmp	0x5189


0x4e48:	test	byte ptr [rsp + 0x78], 4
0x4e4d:	je	0x4e70


0x48d9:	cmp	eax, 2
0x48dc:	mov	ebx, 0x3f
0x48e1:	sete	dl
0x48e4:	xor	r12d, r12d
0x48e7:	xor	eax, eax
0x48e9:	jmp	0x4828


0x4e70:	xor	edx, edx
0x4e72:	xor	r12d, r12d
0x4e75:	xor	eax, eax
0x4e77:	mov	ebx, 0x3f
0x4e7c:	jmp	0x4828


0x4e4f:	lea	rcx, [rbp + 2]
0x4e53:	cmp	rcx, r11
0x4e56:	jae	0x4e70


0x4e58:	mov	rax, qword ptr [rsp + 0x10]
0x4e5d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x4e62:	je	0x55f2


0x55f2:	movzx	ebx, byte ptr [rax + rcx]
0x55f6:	cmp	bl, 0x3e
0x55f9:	ja	0x4e70


0x55ff:	movabs	rax, 0x7000a38200000000
0x5609:	bt	rax, rbx
0x560d:	jae	0x4e70


0x5613:	cmp	byte ptr [rsp + 0xf], 0
0x5618:	jne	0x5802


0x561e:	cmp	r13, r15
0x5621:	jbe	0x5628


0x5802:	mov	rbp, r11
0x5805:	jmp	0x51a0


0x5628:	lea	rax, [r15 + 1]
0x562c:	cmp	r13, rax
0x562f:	jbe	0x5637


0x5623:	mov	byte ptr [r14 + r15], 0x3f
0x5628:	lea	rax, [r15 + 1]
0x562c:	cmp	r13, rax
0x562f:	jbe	0x5637


0x5637:	lea	rax, [r15 + 2]
0x563b:	cmp	r13, rax
0x563e:	jbe	0x5646


0x5631:	mov	byte ptr [r14 + r15 + 1], 0x22
0x5637:	lea	rax, [r15 + 2]
0x563b:	cmp	r13, rax
0x563e:	jbe	0x5646


0x5646:	lea	rax, [r15 + 3]
0x564a:	cmp	r13, rax
0x564d:	jbe	0x5655


0x5640:	mov	byte ptr [r14 + r15 + 2], 0x22
0x5646:	lea	rax, [r15 + 3]
0x564a:	cmp	r13, rax
0x564d:	jbe	0x5655


0x5655:	add	r15, 4
0x5659:	xor	edx, edx
0x565b:	xor	r12d, r12d
0x565e:	xor	eax, eax
0x5660:	mov	rbp, rcx
0x5663:	jmp	0x4828


0x564f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x5655:	add	r15, 4
0x5659:	xor	edx, edx
0x565b:	xor	r12d, r12d
0x565e:	xor	eax, eax
0x5660:	mov	rbp, rcx
0x5663:	jmp	0x4828


0x4e00:	cmp	byte ptr [rsp + 0xf], 0
0x4e05:	jne	0x56b0


0x48fe:	mov	byte ptr [rsp + 0x7c], r12b
0x4903:	xor	edx, edx
0x4905:	xor	eax, eax
0x4907:	mov	ebx, 0x27
0x490c:	jmp	0x4828


0x4e0b:	test	r13, r13
0x4e0e:	je	0x5210


0x5210:	cmp	r13, r15
0x5213:	jbe	0x521a


0x4e14:	xor	edx, edx
0x4e16:	cmp	qword ptr [rsp + 0x50], 0
0x4e1c:	jne	0x5210


0x521a:	lea	rax, [r15 + 1]
0x521e:	cmp	r13, rax
0x5221:	jbe	0x5229


0x5215:	mov	byte ptr [r14 + r15], 0x27
0x521a:	lea	rax, [r15 + 1]
0x521e:	cmp	r13, rax
0x5221:	jbe	0x5229


0x4e22:	mov	qword ptr [rsp + 0x50], r13
0x4e27:	add	r15, 3
0x4e2b:	xor	eax, eax
0x4e2d:	mov	byte ptr [rsp + 0x7c], r12b
0x4e32:	xor	r8d, r8d
0x4e35:	mov	r13, rdx
0x4e38:	mov	ebx, 0x27
0x4e3d:	jmp	0x4859


0x5229:	lea	rax, [r15 + 2]
0x522d:	cmp	r13, rax
0x5230:	jbe	0x5822


0x5223:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x5229:	lea	rax, [r15 + 2]
0x522d:	cmp	r13, rax
0x5230:	jbe	0x5822


0x5822:	mov	rdx, r13
0x5825:	mov	r13, qword ptr [rsp + 0x50]
0x582a:	jmp	0x4e22


0x5236:	mov	rdx, r13
0x5239:	mov	byte ptr [r14 + r15 + 2], 0x27
0x523f:	mov	r13, qword ptr [rsp + 0x50]
0x5244:	jmp	0x4e22


0x4934:	cmp	byte ptr [rsp + 0xd], 0
0x4939:	jne	0x49a0


0x493b:	mov	ebx, edx
0x493d:	xor	r12d, r12d
0x4940:	xor	eax, eax
0x4942:	cmp	byte ptr [rsp + 0xf], 0
0x4947:	jne	0x483b


0x49a0:	xor	r12d, r12d
0x49a3:	cmp	dword ptr [rsp + 8], 2
0x49a8:	sete	dl
0x49ab:	cmp	byte ptr [rsp + 0xf], 0
0x49b0:	mov	eax, edx
0x49b2:	jne	0x5208


0x4d40:	cmp	byte ptr [rsp + 0xf], 0
0x4d45:	jne	0x56b0


0x4973:	cmp	byte ptr [rsp + 0xd], 0
0x4978:	je	0x4b90


0x4d4b:	add	rbp, 1
0x4d4f:	mov	eax, r8d
0x4d52:	xor	r12d, r12d
0x4d55:	mov	ebx, 0x5c
0x4d5a:	jmp	0x486c


0x4b90:	mov	edx, 0x5c
0x4b95:	mov	ebx, 0x5c
0x4b9a:	jmp	0x4934


0x497e:	cmp	byte ptr [rsp + 0xf], 0
0x4983:	je	0x4b90


0x4989:	cmp	qword ptr [rsp + 0x18], 0
0x498f:	jne	0x4d4b


0x4995:	mov	ebx, 0x5c
0x499a:	nop	word ptr [rax + rax]
0x49a0:	xor	r12d, r12d
0x49a3:	cmp	dword ptr [rsp + 8], 2
0x49a8:	sete	dl
0x49ab:	cmp	byte ptr [rsp + 0xf], 0
0x49b0:	mov	eax, edx
0x49b2:	jne	0x5208


0x4a1b:	xor	edx, edx
0x4a1d:	test	byte ptr [rsp + 0x78], 1
0x4a22:	je	0x493b


0x4be3:	cmp	dword ptr [rsp + 8], 2
0x4be8:	sete	dl
0x4beb:	cmp	byte ptr [rsp + 0xf], 0
0x4bf0:	jne	0x578a


0x4a28:	add	rbp, 1
0x4a2c:	jmp	0x46e8


0x4bf6:	mov	eax, r8d
0x4bf9:	mov	rcx, r15
0x4bfc:	xor	eax, 1
0x4bff:	and	al, dl
0x4c01:	je	0x4c30


0x578a:	movzx	ebx, byte ptr [rsp + 0xf]
0x578f:	mov	rbp, r11
0x5792:	mov	eax, edx
0x5794:	mov	byte ptr [rsp + 0xd], bl
0x5798:	jmp	0x5189


0x4c30:	cmp	r13, rcx
0x4c33:	jbe	0x4c3a


0x4c03:	cmp	r13, r15
0x4c06:	jbe	0x4c0d


0x4c3a:	cmp	dword ptr [rsp + 8], 2
0x4c3f:	lea	r15, [rcx + 1]
0x4c43:	je	0x5249


0x4c35:	mov	byte ptr [r14 + rcx], 0x5c
0x4c3a:	cmp	dword ptr [rsp + 8], 2
0x4c3f:	lea	r15, [rcx + 1]
0x4c43:	je	0x5249


0x4c0d:	lea	rcx, [r15 + 1]
0x4c11:	cmp	r13, rcx
0x4c14:	jbe	0x4c1c


0x4c08:	mov	byte ptr [r14 + r15], 0x27
0x4c0d:	lea	rcx, [r15 + 1]
0x4c11:	cmp	r13, rcx
0x4c14:	jbe	0x4c1c


0x5249:	mov	eax, r12d
0x524c:	mov	ebx, 0x30
0x5251:	xor	r12d, r12d
0x5254:	jmp	0x4859


0x4c49:	lea	rax, [rbp + 1]
0x4c4d:	cmp	rax, r11
0x4c50:	jae	0x4c6b


0x4c1c:	lea	rcx, [r15 + 2]
0x4c20:	cmp	r13, rcx
0x4c23:	ja	0x5259


0x4c16:	mov	byte ptr [r14 + r15 + 1], 0x24
0x4c1c:	lea	rcx, [r15 + 2]
0x4c20:	cmp	r13, rcx
0x4c23:	ja	0x5259


0x4c52:	mov	rax, qword ptr [rsp + 0x10]
0x4c57:	movzx	eax, byte ptr [rax + rbp + 1]
0x4c5c:	mov	byte ptr [rsp + 0x28], al
0x4c60:	sub	eax, 0x30
0x4c63:	cmp	al, 9
0x4c65:	jbe	0x5499


0x4c6b:	mov	eax, r12d
0x4c6e:	mov	ebx, 0x30
0x4c73:	xor	r12d, r12d
0x4c76:	jmp	0x4828


0x4c29:	lea	rcx, [r15 + 3]
0x4c2d:	mov	r8d, eax
0x4c30:	cmp	r13, rcx
0x4c33:	jbe	0x4c3a


0x5259:	mov	byte ptr [r14 + r15 + 2], 0x27
0x525f:	jmp	0x4c29


0x5499:	cmp	r13, r15
0x549c:	jbe	0x54a3


0x54a3:	lea	rax, [rcx + 2]
0x54a7:	cmp	r13, rax
0x54aa:	jbe	0x54b2


0x549e:	mov	byte ptr [r14 + r15], 0x30
0x54a3:	lea	rax, [rcx + 2]
0x54a7:	cmp	r13, rax
0x54aa:	jbe	0x54b2


0x54b2:	mov	eax, r12d
0x54b5:	lea	r15, [rcx + 3]
0x54b9:	xor	r12d, r12d
0x54bc:	mov	ebx, 0x30
0x54c1:	jmp	0x4828


0x54ac:	mov	byte ptr [r14 + rcx + 2], 0x30
0x54b2:	mov	eax, r12d
0x54b5:	lea	r15, [rcx + 3]
0x54b9:	xor	r12d, r12d
0x54bc:	mov	ebx, 0x30
0x54c1:	jmp	0x4828


0x4922:	cmp	dword ptr [rsp + 8], 2
0x4927:	sete	al
0x492a:	and	al, byte ptr [rsp + 0xf]
0x492e:	jne	0x4a7e


0x4ce0:	mov	edx, 0xd
0x4ce5:	xor	r10d, r10d
0x4ce8:	mov	ebx, 0x72
0x4ced:	jmp	0x4922


0x5264:	test	ebx, ebx
0x5266:	jne	0x4693


0x526c:	mov	byte ptr [rsp + 0xd], 1
0x5271:	test	r13, r13
0x5274:	jne	0x580a


0x527a:	lea	rax, [rip + 0x2e1c]
0x5281:	mov	qword ptr [rsp + 0x50], 0
0x528a:	mov	byte ptr [rsp + 0xe], 1
0x528f:	mov	byte ptr [rsp + 0x7c], 0
0x5294:	xor	r12d, r12d
0x5297:	mov	byte ptr [rsp + 0xf], 0
0x529c:	mov	qword ptr [rsp + 0x18], 1
0x52a5:	mov	qword ptr [rsp + 0x48], rax
0x52aa:	mov	r15d, 1
0x52b0:	mov	dword ptr [rsp + 8], 2
0x52b8:	jmp	0x46d3


0x580a:	mov	byte ptr [rsp + 0xe], 1
0x580f:	xor	eax, eax
0x5811:	xor	r12d, r12d
0x5814:	mov	qword ptr [rsp + 0x50], 0
0x581d:	jmp	0x4dc4


0x4dc4:	lea	rbx, [rip + 0x32d2]
0x4dcb:	mov	byte ptr [r14], 0x27
0x4dcf:	mov	dword ptr [rsp + 8], 2
0x4dd7:	mov	r15d, 1
0x4ddd:	mov	qword ptr [rsp + 0x18], 1
0x4de6:	mov	byte ptr [rsp + 0xf], 0
0x4deb:	mov	qword ptr [rsp + 0x48], rbx
0x4df0:	mov	byte ptr [rsp + 0x7c], al
0x4df4:	jmp	0x46d3


0x52c8:	test	r13, r13
0x52cb:	je	0x54f6


0x56bd:	lea	rax, [rip + 0x29d7]
0x56c4:	mov	byte ptr [rsp + 0xe], 1
0x56c9:	mov	byte ptr [rsp + 0x7c], 0
0x56ce:	xor	r12d, r12d
0x56d1:	mov	qword ptr [rsp + 0x50], 0
0x56da:	mov	byte ptr [rsp + 0xf], 1
0x56df:	mov	byte ptr [rsp + 0xd], 1
0x56e4:	mov	qword ptr [rsp + 0x18], 1
0x56ed:	xor	r15d, r15d
0x56f0:	mov	qword ptr [rsp + 0x48], rax
0x56f5:	jmp	0x46d3


0x54f6:	mov	qword ptr [rsp + 0x50], 0
0x54ff:	mov	byte ptr [rsp + 0xe], 1
0x5504:	xor	r12d, r12d
0x5507:	mov	byte ptr [rsp + 0x7c], 0
0x550c:	jmp	0x52eb


0x52d1:	mov	byte ptr [r14], 0x22
0x52d5:	mov	byte ptr [rsp + 0xe], 1
0x52da:	xor	r12d, r12d
0x52dd:	mov	byte ptr [rsp + 0x7c], 0
0x52e2:	mov	qword ptr [rsp + 0x50], 0
0x52eb:	lea	rax, [rip + 0x2da9]
0x52f2:	mov	byte ptr [rsp + 0xf], 0
0x52f7:	mov	byte ptr [rsp + 0xd], 1
0x52fc:	mov	qword ptr [rsp + 0x18], 1
0x5305:	mov	r15d, 1
0x530b:	mov	qword ptr [rsp + 0x48], rax
0x5310:	jmp	0x46d3


0x52eb:	lea	rax, [rip + 0x2da9]
0x52f2:	mov	byte ptr [rsp + 0xf], 0
0x52f7:	mov	byte ptr [rsp + 0xd], 1
0x52fc:	mov	qword ptr [rsp + 0x18], 1
0x5305:	mov	r15d, 1
0x530b:	mov	qword ptr [rsp + 0x48], rax
0x5310:	jmp	0x46d3


0x5315:	lea	rax, [rip + 0x2d7f]
0x531c:	mov	byte ptr [rsp + 0xe], 1
0x5321:	mov	byte ptr [rsp + 0x7c], 0
0x5326:	xor	r12d, r12d
0x5329:	mov	qword ptr [rsp + 0x50], 0
0x5332:	mov	byte ptr [rsp + 0xf], 1
0x5337:	mov	byte ptr [rsp + 0xd], 1
0x533c:	mov	qword ptr [rsp + 0x18], 1
0x5345:	xor	r15d, r15d
0x5348:	mov	qword ptr [rsp + 0x48], rax
0x534d:	mov	dword ptr [rsp + 8], 5
0x5355:	jmp	0x46d3


0x535a:	mov	byte ptr [rsp + 0xe], 1
0x535f:	mov	byte ptr [rsp + 0x7c], 0
0x5364:	xor	r12d, r12d
0x5367:	mov	qword ptr [rsp + 0x50], 0
0x5370:	mov	byte ptr [rsp + 0xf], 0
0x5375:	xor	r15d, r15d
0x5378:	mov	byte ptr [rsp + 0xd], 1
0x537d:	mov	qword ptr [rsp + 0x18], 0
0x5386:	mov	qword ptr [rsp + 0x48], 0
0x538f:	jmp	0x46d3


0x5394:	cmp	dword ptr [rsp + 8], 0xa
0x5399:	je	0x53f1


0x53f1:	xor	r15d, r15d
0x53f4:	test	ebx, ebx
0x53f6:	je	0x55bd


0x539b:	lea	rsi, [rip + 0x2cfd]
0x53a2:	xor	edi, edi
0x53a4:	mov	edx, 5
0x53a9:	call	0x1630


0x55bd:	mov	rdx, qword ptr [rsp + 0x68]
0x55c2:	movzx	eax, byte ptr [rdx]
0x55c5:	test	al, al
0x55c7:	je	0x53fc


0x53fc:	test	ebx, ebx
0x53fe:	mov	rbx, qword ptr [rsp + 0x60]
0x5403:	setne	byte ptr [rsp + 0xf]
0x5408:	xor	r12d, r12d
0x540b:	mov	rdi, rbx
0x540e:	call	0x1650


0x55d9:	add	r15, 1
0x55dd:	movzx	eax, byte ptr [rdx + r15]
0x55e2:	test	al, al
0x55e4:	jne	0x55d0


0x55d5:	mov	byte ptr [r14 + r15], al
0x55d9:	add	r15, 1
0x55dd:	movzx	eax, byte ptr [rdx + r15]
0x55e2:	test	al, al
0x55e4:	jne	0x55d0


0x55e6:	jmp	0x53fc


0x55d0:	cmp	r13, r15
0x55d3:	jbe	0x55d9


0x5413:	mov	qword ptr [rsp + 0x48], rbx
0x5418:	mov	qword ptr [rsp + 0x18], rax
0x541d:	mov	byte ptr [rsp + 0xe], 1
0x5422:	mov	byte ptr [rsp + 0x7c], 0
0x5427:	mov	qword ptr [rsp + 0x50], 0
0x5430:	mov	byte ptr [rsp + 0xd], 1
0x5435:	jmp	0x46d3


0x53ae:	mov	rcx, rax
0x53b1:	mov	qword ptr [rsp + 0x68], rax
0x53b6:	lea	rax, [rip + 0x2ce2]
0x53bd:	cmp	rcx, rax
0x53c0:	je	0x575e


0x575e:	mov	esi, dword ptr [rsp + 8]
0x5762:	mov	rdi, rcx
0x5765:	call	0x4510


0x53c6:	lea	rsi, [rip + 0x2cd0]
0x53cd:	xor	edi, edi
0x53cf:	mov	edx, 5
0x53d4:	call	0x1630


0x53d9:	mov	rcx, rax
0x53dc:	mov	qword ptr [rsp + 0x60], rax
0x53e1:	lea	rax, [rip + 0x2cb5]
0x53e8:	cmp	rcx, rax
0x53eb:	je	0x5774


0x5774:	mov	esi, dword ptr [rsp + 8]
0x5778:	mov	rdi, rcx
0x577b:	call	0x4510


0x5780:	mov	qword ptr [rsp + 0x60], rax
0x5785:	jmp	0x53f1


0x576a:	mov	qword ptr [rsp + 0x68], rax
0x576f:	jmp	0x53c6


0x543a:	mov	byte ptr [rsp + 0xe], 1
0x543f:	mov	byte ptr [rsp + 0x7c], 0
0x5444:	xor	r12d, r12d
0x5447:	mov	qword ptr [rsp + 0x50], 0
0x5450:	mov	byte ptr [rsp + 0xf], 0
0x5455:	xor	r15d, r15d
0x5458:	mov	byte ptr [rsp + 0xd], 0
0x545d:	mov	qword ptr [rsp + 0x18], 0
0x5466:	mov	qword ptr [rsp + 0x48], 0
0x546f:	jmp	0x46d3


0x5474:	mov	byte ptr [rsp + 0xe], 1
0x5479:	mov	byte ptr [rsp + 0x7c], 0
0x547e:	xor	r12d, r12d
0x5481:	mov	qword ptr [rsp + 0x50], 0
0x548a:	mov	byte ptr [rsp + 0xf], 1
0x548f:	mov	byte ptr [rsp + 0xd], 1
0x5494:	jmp	0x46b3


0x46b3:	lea	rax, [rip + 0x39e3]
0x46ba:	mov	qword ptr [rsp + 0x18], 1
0x46c3:	xor	r15d, r15d
0x46c6:	mov	dword ptr [rsp + 8], 2
0x46ce:	mov	qword ptr [rsp + 0x48], rax
0x46d3:	xor	r11d, r11d
0x46d6:	mov	rax, rbp
0x46d9:	mov	r8d, r12d
0x46dc:	mov	rbp, r11
0x46df:	mov	r11, rax
0x46e2:	nop	word ptr [rax + rax]
0x46e8:	cmp	r11, rbp
0x46eb:	setne	r12b
0x46ef:	cmp	r11, -1
0x46f3:	jne	0x4702


0x5668:	test	ebx, ebx
0x566a:	je	0x57f8


0x57f8:	mov	byte ptr [rsp + 0xd], 0
0x57fd:	jmp	0x5271


0x5670:	lea	rax, [rip + 0x2a26]
0x5677:	mov	byte ptr [rsp + 0xe], 1
0x567c:	mov	byte ptr [rsp + 0x7c], 0
0x5681:	xor	r12d, r12d
0x5684:	mov	qword ptr [rsp + 0x50], 0
0x568d:	mov	byte ptr [rsp + 0xf], 1
0x5692:	mov	byte ptr [rsp + 0xd], 0
0x5697:	mov	qword ptr [rsp + 0x18], 1
0x56a0:	xor	r15d, r15d
0x56a3:	mov	qword ptr [rsp + 0x48], rax
0x56a8:	jmp	0x46d3


0x5271:	test	r13, r13
0x5274:	jne	0x580a


0x5834:	nop	
0x5836:	nop	word ptr cs:[rax + rax]


0x59eb:	nop	dword ptr [rax + rax]


0x5a26:	nop	word ptr cs:[rax + rax]


0x5a41:	nop	dword ptr [rax + rax]
0x5a46:	nop	word ptr cs:[rax + rax]


0x5a61:	nop	dword ptr [rax + rax]
0x5a66:	nop	word ptr cs:[rax + rax]


0x5aa5:	nop	
0x5aa6:	nop	word ptr cs:[rax + rax]


0x5ac5:	nop	
0x5ac6:	nop	word ptr cs:[rax + rax]


0x5b74:	nop	
0x5b76:	nop	word ptr cs:[rax + rax]


0x5c63:	nop	dword ptr [rax]
0x5c66:	nop	word ptr cs:[rax + rax]


0x5c7a:	nop	word ptr [rax + rax]


0x5d13:	nop	dword ptr [rax]
0x5d16:	nop	word ptr cs:[rax + rax]


0x5d33:	nop	dword ptr [rax]
0x5d36:	nop	word ptr cs:[rax + rax]


0x5d4c:	nop	dword ptr [rax]


0x5d68:	nop	dword ptr [rax + rax]


0x5d84:	nop	
0x5d86:	nop	word ptr cs:[rax + rax]


0x5e1e:	nop	


0x5eaa:	nop	word ptr [rax + rax]


0x5ebc:	nop	dword ptr [rax]


0x5ecf:	nop	


0x5f68:	nop	dword ptr [rax + rax]


0x5f91:	nop	dword ptr [rax + rax]
0x5f96:	nop	word ptr cs:[rax + rax]


0x5faa:	nop	word ptr [rax + rax]


0x603e:	nop	


0x60d1:	nop	dword ptr [rax + rax]
0x60d6:	nop	word ptr cs:[rax + rax]


0x60ec:	nop	dword ptr [rax]


0x6107:	nop	word ptr [rax + rax]


0x6123:	nop	dword ptr [rax]
0x6126:	nop	word ptr cs:[rax + rax]


0x613c:	nop	dword ptr [rax]


0x6154:	nop	
0x6156:	nop	word ptr cs:[rax + rax]


0x6173:	nop	dword ptr [rax]
0x6176:	nop	word ptr cs:[rax + rax]


0x6198:	nop	dword ptr [rax + rax]


0x65b7:	nop	word ptr [rax + rax]


0x6658:	nop	dword ptr [rax + rax]


0x6735:	nop	
0x6736:	nop	word ptr cs:[rax + rax]


0x67da:	nop	word ptr [rax + rax]


0x6804:	nop	
0x6806:	nop	word ptr cs:[rax + rax]


0x6812:	nop	dword ptr [rax]
0x6816:	nop	word ptr cs:[rax + rax]


0x6856:	nop	word ptr cs:[rax + rax]


0x6884:	nop	
0x6886:	nop	word ptr cs:[rax + rax]


0x6912:	nop	dword ptr [rax]
0x6916:	nop	word ptr cs:[rax + rax]


0x696a:	nop	word ptr [rax + rax]


0x6987:	nop	word ptr [rax + rax]


0x69be:	nop	


0x69e8:	nop	dword ptr [rax + rax]


0x6a03:	nop	word ptr cs:[rax + rax]
0x6a0d:	nop	dword ptr [rax]


0x6a45:	nop	word ptr cs:[rax + rax]
0x6a4f:	nop	


0x6b71:	nop	word ptr cs:[rax + rax]
0x6b7b:	nop	dword ptr [rax + rax]


0x6d58:	mov	rax, rbx
0x6d5b:	mul	rsi
0x6d5e:	jo	0x6f51


0x6f51:	or	rax, 0xffffffffffffffff
0x6f55:	mov	r8d, 1
0x6f5b:	jmp	0x6d67


0x6d64:	xor	r8d, r8d
0x6d67:	mul	rsi
0x6d6a:	jo	0x6f42


0x6d67:	mul	rsi
0x6d6a:	jo	0x6f42


0x6f42:	mov	r8d, 1
0x6f48:	or	rbx, 0xffffffffffffffff
0x6f4c:	jmp	0x6d73


0x6d70:	mov	rbx, rax
0x6d73:	or	ebp, r8d
0x6d76:	nop	word ptr cs:[rax + rax]
0x6d80:	movsxd	rdi, edi
0x6d83:	mov	eax, ebp
0x6d85:	add	rcx, rdi
0x6d88:	or	eax, 2
0x6d8b:	mov	qword ptr [r15], rcx
0x6d8e:	cmp	byte ptr [rcx], 0
0x6d91:	mov	qword ptr [r14], rbx
0x6d94:	cmovne	ebp, eax
0x6d97:	jmp	0x6c5d


0x6d73:	or	ebp, r8d
0x6d76:	nop	word ptr cs:[rax + rax]
0x6d80:	movsxd	rdi, edi
0x6d83:	mov	eax, ebp
0x6d85:	add	rcx, rdi
0x6d88:	or	eax, 2
0x6d8b:	mov	qword ptr [r15], rcx
0x6d8e:	cmp	byte ptr [rcx], 0
0x6d91:	mov	qword ptr [r14], rbx
0x6d94:	cmovne	ebp, eax
0x6d97:	jmp	0x6c5d


0x6da7:	mov	edx, 2
0x6dac:	mov	rax, rdx
0x6daf:	mul	rbx
0x6db2:	jo	0x6e4e


0x6e4e:	mov	ebp, 1
0x6e53:	or	rbx, 0xffffffffffffffff
0x6e57:	jmp	0x6d80


0x6db8:	add	rbx, rbx
0x6dbb:	jmp	0x6d80


0x6d80:	movsxd	rdi, edi
0x6d83:	mov	eax, ebp
0x6d85:	add	rcx, rdi
0x6d88:	or	eax, 2
0x6d8b:	mov	qword ptr [r15], rcx
0x6d8e:	cmp	byte ptr [rcx], 0
0x6d91:	mov	qword ptr [r14], rbx
0x6d94:	cmovne	ebp, eax
0x6d97:	jmp	0x6c5d


0x6dbd:	mov	edx, 0x200
0x6dc2:	mov	rax, rdx
0x6dc5:	mul	rbx
0x6dc8:	jo	0x6e4e


0x6dce:	shl	rbx, 9
0x6dd2:	jmp	0x6d80


0x6dd4:	mov	r8d, 7
0x6dda:	xor	r9d, r9d
0x6ddd:	nop	dword ptr [rax]
0x6de0:	mov	rax, rbx
0x6de3:	mul	rsi
0x6de6:	mov	rbx, rax
0x6de9:	jo	0x6f7e


0x6f7e:	mov	r9d, 1
0x6f84:	or	rbx, 0xffffffffffffffff
0x6f88:	jmp	0x6def


0x6def:	sub	r8d, 1
0x6df3:	jne	0x6de0


0x6df5:	or	ebp, r9d
0x6df8:	jmp	0x6d80


0x6de0:	mov	rax, rbx
0x6de3:	mul	rsi
0x6de6:	mov	rbx, rax
0x6de9:	jo	0x6f7e


0x6dfa:	mov	r8d, 8
0x6e00:	xor	r9d, r9d
0x6e03:	nop	dword ptr [rax + rax]
0x6e08:	mov	rax, rbx
0x6e0b:	mul	rsi
0x6e0e:	mov	rbx, rax
0x6e11:	jo	0x6f60


0x6f60:	mov	r9d, 1
0x6f66:	or	rbx, 0xffffffffffffffff
0x6f6a:	jmp	0x6e17


0x6e17:	sub	r8d, 1
0x6e1b:	jne	0x6e08


0x6e1d:	jmp	0x6df5


0x6e08:	mov	rax, rbx
0x6e0b:	mul	rsi
0x6e0e:	mov	rbx, rax
0x6e11:	jo	0x6f60


0x6e1f:	mov	r8d, 4
0x6e25:	xor	r9d, r9d
0x6e28:	mov	rax, rbx
0x6e2b:	mul	rsi
0x6e2e:	mov	rbx, rax
0x6e31:	jo	0x6f33


0x6f33:	mov	r9d, 1
0x6f39:	or	rbx, 0xffffffffffffffff
0x6f3d:	jmp	0x6e37


0x6e37:	sub	r8d, 1
0x6e3b:	jne	0x6e28


0x6e3d:	jmp	0x6df5


0x6e28:	mov	rax, rbx
0x6e2b:	mul	rsi
0x6e2e:	mov	rbx, rax
0x6e31:	jo	0x6f33


0x6e3f:	mov	rax, rbx
0x6e42:	mul	rsi
0x6e45:	mov	rbx, rax
0x6e48:	jno	0x6d80


0x6f6f:	mov	r9d, 1
0x6f75:	or	rbx, 0xffffffffffffffff
0x6f79:	jmp	0x6e78


0x6e78:	sub	r8d, 1
0x6e7c:	jne	0x6e69


0x6e7e:	jmp	0x6df5


0x6e69:	mov	rax, rbx
0x6e6c:	mul	rsi
0x6e6f:	mov	rbx, rax
0x6e72:	jo	0x6f6f


0x6e83:	mov	r8d, 6
0x6e89:	xor	r9d, r9d
0x6e8c:	mov	rax, rbx
0x6e8f:	mul	rsi
0x6e92:	mov	rbx, rax
0x6e95:	jo	0x6f24


0x6f24:	mov	r9d, 1
0x6f2a:	or	rbx, 0xffffffffffffffff
0x6f2e:	jmp	0x6e9b


0x6e9b:	sub	r8d, 1
0x6e9f:	jne	0x6e8c


0x6ea1:	jmp	0x6df5


0x6e8c:	mov	rax, rbx
0x6e8f:	mul	rsi
0x6e92:	mov	rbx, rax
0x6e95:	jo	0x6f24


0x6ea6:	mov	edx, 0x400
0x6eab:	mov	rax, rdx
0x6eae:	mul	rbx
0x6eb1:	jo	0x6e4e


0x6eb3:	shl	rbx, 0xa
0x6eb7:	jmp	0x6d80


0x6ebc:	mov	rax, rbx
0x6ebf:	mul	rsi
0x6ec2:	jo	0x6f8d


0x6f8d:	mov	r8d, 1
0x6f93:	or	rax, 0xffffffffffffffff
0x6f97:	jmp	0x6ecb


0x6ec8:	xor	r8d, r8d
0x6ecb:	mul	rsi
0x6ece:	jno	0x6d67


0x6ecb:	mul	rsi
0x6ece:	jno	0x6d67


0x6ed4:	mov	r8d, 1
0x6eda:	or	rax, 0xffffffffffffffff
0x6ede:	jmp	0x6d67


0x6f9c:	nop	dword ptr [rax]


0x701b:	nop	dword ptr [rax + rax]


0x70b7:	nop	word ptr [rax + rax]


0x7143:	nop	word ptr cs:[rax + rax]
0x714d:	nop	dword ptr [rax]


0x71cd:	nop	dword ptr [rax]


0x726c:	nop	dword ptr [rax]


0x72d5:	nop	
0x72d6:	nop	word ptr cs:[rax + rax]


0x72e2:	nop	word ptr cs:[rax + rax]
0x72ec:	nop	dword ptr [rax]


0x48c0:	xor	r10d, r10d
0x48c3:	mov	eax, dword ptr [rsp + 8]
0x48c7:	cmp	eax, 2
0x48ca:	je	0x4e88


0x48f0:	xor	r10d, r10d
0x48f3:	cmp	dword ptr [rsp + 8], 2
0x48f8:	je	0x4e00


0x4918:	mov	edx, 9
0x491d:	mov	ebx, 0x74
0x4922:	cmp	dword ptr [rsp + 8], 2
0x4927:	sete	al
0x492a:	and	al, byte ptr [rsp + 0xf]
0x492e:	jne	0x4a7e


0x4958:	mov	edx, 8
0x495d:	mov	ebx, 0x62
0x4962:	jmp	0x4934


0x4968:	cmp	dword ptr [rsp + 8], 2
0x496d:	je	0x4d40


0x4a10:	cmp	byte ptr [rsp + 0xd], 0
0x4a15:	jne	0x4be3


0x4a38:	cmp	dword ptr [rsp + 8], 2
0x4a3d:	sete	dl
0x4a40:	xor	eax, eax
0x4a42:	jmp	0x4828


0x4a50:	mov	edx, 7
0x4a55:	mov	ebx, 0x61
0x4a5a:	jmp	0x4934


0x4a60:	cmp	dword ptr [rsp + 8], 2
0x4a65:	sete	dl
0x4a68:	test	rbp, rbp
0x4a6b:	jne	0x481c


0x4a90:	cmp	dword ptr [rsp + 8], 2
0x4a95:	sete	dl
0x4a98:	xor	r12d, r12d
0x4a9b:	jmp	0x4a71


0x4aa0:	cmp	dword ptr [rsp + 8], 2
0x4aa5:	mov	ebx, 0x20
0x4aaa:	sete	dl
0x4aad:	jmp	0x4a71


0x4ab0:	mov	edx, 0xd
0x4ab5:	mov	ebx, 0x72
0x4aba:	jmp	0x4922


0x4ac0:	mov	edx, 0xc
0x4ac5:	mov	ebx, 0x66
0x4aca:	jmp	0x4934


0x4ad0:	mov	edx, 0xb
0x4ad5:	mov	ebx, 0x76
0x4ada:	jmp	0x4934


0x4ae0:	mov	edx, 0xa
0x4ae5:	mov	ebx, 0x6e
0x4aea:	jmp	0x4922


0x4b80:	xor	r10d, r10d
0x4b83:	cmp	byte ptr [rsp + 0xd], 0
0x4b88:	jne	0x497e


0x4ba0:	mov	edx, 0xc
0x4ba5:	xor	r10d, r10d
0x4ba8:	mov	ebx, 0x66
0x4bad:	jmp	0x4934


0x4bb8:	mov	edx, 0xa
0x4bbd:	xor	r10d, r10d
0x4bc0:	mov	ebx, 0x6e
0x4bc5:	jmp	0x4922


0x4bd0:	mov	ebx, 0x61
0x4bd5:	jmp	0x49a0


0x4be0:	xor	r10d, r10d
0x4be3:	cmp	dword ptr [rsp + 8], 2
0x4be8:	sete	dl
0x4beb:	cmp	byte ptr [rsp + 0xf], 0
0x4bf0:	jne	0x578a


0x4c80:	cmp	dword ptr [rsp + 8], 2
0x4c85:	mov	r12d, r10d
0x4c88:	sete	dl
0x4c8b:	xor	r10d, r10d
0x4c8e:	xor	eax, eax
0x4c90:	jmp	0x4828


0x4c98:	cmp	dword ptr [rsp + 8], 2
0x4c9d:	sete	dl
0x4ca0:	xor	r10d, r10d
0x4ca3:	jmp	0x4a68


0x4cb0:	cmp	dword ptr [rsp + 8], 2
0x4cb5:	sete	dl
0x4cb8:	xor	r10d, r10d
0x4cbb:	xor	r12d, r12d
0x4cbe:	jmp	0x4a71


0x4cc8:	cmp	dword ptr [rsp + 8], 2
0x4ccd:	mov	r12d, r10d
0x4cd0:	mov	ebx, 0x20
0x4cd5:	sete	dl
0x4cd8:	xor	r10d, r10d
0x4cdb:	jmp	0x4a71


0x4cf8:	mov	ebx, 0x76
0x4cfd:	jmp	0x49a0


0x4d08:	mov	edx, 9
0x4d0d:	xor	r10d, r10d
0x4d10:	mov	ebx, 0x74
0x4d15:	jmp	0x4922


0x4d20:	mov	ebx, 0x62
0x4d25:	jmp	0x49a0


0x52c0:	test	ebx, ebx
0x52c2:	jne	0x56bd


0x6e60:	mov	r8d, 5
0x6e66:	xor	r9d, r9d
0x6e69:	mov	rax, rbx
0x6e6c:	mul	rsi
0x6e6f:	mov	rbx, rax
0x6e72:	jo	0x6f6f


0x198b:	nop	dword ptr [rax + rax]


0x19ce:	nop	


0x19e7:	nop	word ptr [rax + rax]


0x19fb:	nop	dword ptr [rax + rax]


0x1a0a:	nop	word ptr [rax + rax]


0x1b89:	nop	dword ptr [rax]


0x1e66:	nop	word ptr cs:[rax + rax]


0x1e79:	nop	dword ptr [rax]


0x1e9f:	nop	


0x1f28:	nop	dword ptr [rax + rax]


0x1fca:	nop	word ptr [rax + rax]


0x2107:	nop	word ptr [rax + rax]


0x2446:	nop	word ptr cs:[rax + rax]


0x2497:	nop	word ptr [rax + rax]


0x24e1:	nop	dword ptr [rax]


0x26c5:	nop	dword ptr [rax]


0x26ec:	nop	dword ptr [rax]


0x27e2:	nop	word ptr [rax + rax]


0x28d7:	nop	word ptr [rax + rax]


0x2937:	nop	word ptr [rax + rax]


0x2948:	nop	dword ptr [rax + rax]


0x2956:	nop	word ptr cs:[rax + rax]


0x2985:	nop	dword ptr [rax]


0x299a:	nop	word ptr [rax + rax]


0x2a7a:	nop	word ptr [rax + rax]


0x2b04:	nop	dword ptr [rax]


0x2b3e:	nop	


0x2bb3:	nop	dword ptr [rax + rax]


0x2c1a:	nop	word ptr [rax + rax]


0x2cb6:	nop	word ptr cs:[rax + rax]


0x2d3e:	nop	


0x2ddc:	nop	dword ptr [rax]


0x2e31:	nop	dword ptr [rax]


0x2e4b:	nop	dword ptr [rax + rax]


0x2ea7:	nop	word ptr [rax + rax]


0x2f0a:	nop	word ptr [rax + rax]


0x35da:	nop	word ptr [rax + rax]


0x35ec:	nop	dword ptr [rax]


0x361c:	nop	dword ptr [rax]


0x37ca:	nop	word ptr [rax + rax]


0x37e6:	nop	word ptr cs:[rax + rax]


0x3804:	nop	dword ptr [rax]


0x381b:	nop	dword ptr [rax + rax]


0x387a:	nop	word ptr [rax + rax]


0x39fc:	nop	dword ptr [rax]


0x3a2b:	nop	dword ptr [rax + rax]


0x3a5c:	nop	dword ptr [rax]


0x3a8a:	nop	word ptr [rax + rax]


0x3ad6:	nop	word ptr cs:[rax + rax]


0x3b0c:	nop	dword ptr [rax]


0x3b28:	nop	dword ptr [rax + rax]


0x3b45:	nop	dword ptr [rax]


0x3b5e:	nop	


0x3c13:	nop	dword ptr [rax + rax]


0x3c3a:	nop	word ptr [rax + rax]


0x3cfb:	nop	dword ptr [rax + rax]


0x3d0c:	nop	dword ptr [rax]


0x3d2f:	nop	


0x3d4f:	nop	


0x3d58:	nop	dword ptr [rax + rax]


0x3d95:	nop	dword ptr [rax]


0x3e7a:	nop	word ptr [rax + rax]


0x3e94:	nop	dword ptr [rax]


0x3ea8:	nop	dword ptr [rax + rax]


0x3f12:	nop	word ptr [rax + rax]


0x3f79:	nop	dword ptr [rax]


0x4102:	nop	word ptr [rax + rax]


0x4133:	nop	dword ptr [rax + rax]


0x4164:	nop	dword ptr [rax]


0x4192:	nop	word ptr [rax + rax]


0x41de:	nop	


0x420c:	nop	dword ptr [rax]


0x4228:	nop	dword ptr [rax + rax]


0x4245:	nop	dword ptr [rax]


0x425e:	nop	


0x4313:	nop	dword ptr [rax + rax]


0x433a:	nop	word ptr [rax + rax]


0x445b:	nop	dword ptr [rax + rax]


0x454c:	nop	dword ptr [rax]


0x459d:	nop	dword ptr [rax]


0x47c8:	nop	dword ptr [rax + rax]


0x48b7:	nop	word ptr [rax + rax]


0x48ee:	nop	


0x4911:	nop	dword ptr [rax]


0x4952:	nop	word ptr [rax + rax]


0x4964:	nop	dword ptr [rax]


0x4a08:	nop	dword ptr [rax + rax]


0x4a31:	nop	dword ptr [rax]


0x4a47:	nop	word ptr [rax + rax]


0x4a5f:	nop	


0x4a8e:	nop	


0x4a9d:	nop	dword ptr [rax]


0x4aaf:	nop	


0x4abf:	nop	


0x4acf:	nop	


0x4adf:	nop	


0x4aef:	nop	


0x4b5c:	nop	dword ptr [rax]


0x4b7c:	nop	dword ptr [rax]


0x4b8e:	nop	


0x4b9f:	nop	


0x4bb2:	nop	word ptr [rax + rax]


0x4bca:	nop	word ptr [rax + rax]


0x4bda:	nop	word ptr [rax + rax]


0x4c7b:	nop	dword ptr [rax + rax]


0x4c95:	nop	dword ptr [rax]


0x4ca8:	nop	dword ptr [rax + rax]


0x4cc3:	nop	dword ptr [rax + rax]


0x4cf2:	nop	word ptr [rax + rax]


0x4d02:	nop	word ptr [rax + rax]


0x4d1a:	nop	word ptr [rax + rax]


0x4d2a:	nop	word ptr [rax + rax]


0x4d38:	nop	dword ptr [rax + rax]


0x4d5f:	nop	


0x4df9:	nop	dword ptr [rax]


0x4e42:	nop	word ptr [rax + rax]


0x4e68:	nop	dword ptr [rax + rax]


0x4e81:	nop	dword ptr [rax]


0x4ea2:	nop	word ptr [rax + rax]


0x5008:	nop	dword ptr [rax + rax]


0x511b:	nop	dword ptr [rax + rax]


0x513e:	nop	


0x5205:	nop	dword ptr [rax]


0x52bd:	nop	dword ptr [rax]


0x54c6:	nop	word ptr cs:[rax + rax]


0x5559:	nop	dword ptr [rax]


0x55cd:	nop	dword ptr [rax]


0x56ad:	nop	dword ptr [rax]


0x59bb:	nop	dword ptr [rax + rax]


0x6246:	nop	word ptr cs:[rax + rax]


0x62d5:	nop	dword ptr [rax]


0x62f6:	nop	word ptr cs:[rax + rax]


0x6355:	nop	dword ptr [rax]


0x6391:	nop	dword ptr [rax]


0x63d8:	nop	dword ptr [rax + rax]


0x6427:	nop	word ptr [rax + rax]


0x6484:	nop	dword ptr [rax]


0x64b2:	nop	word ptr [rax + rax]


0x6566:	nop	word ptr cs:[rax + rax]


0x65c9:	nop	dword ptr [rax]


0x6842:	nop	word ptr [rax + rax]


0x68c9:	nop	dword ptr [rax]


0x68f4:	nop	dword ptr [rax]


0x694d:	nop	dword ptr [rax]


0x6b16:	nop	word ptr cs:[rax + rax]


0x6b3f:	nop	


0x6be6:	nop	word ptr cs:[rax + rax]


0x6c43:	nop	dword ptr [rax + rax]


0x6c52:	nop	word ptr [rax + rax]


0x6c82:	nop	word ptr [rax + rax]


0x6c8c:	nop	dword ptr [rax]


0x6d2b:	nop	dword ptr [rax + rax]


0x6e5c:	nop	dword ptr [rax]


0x6ee3:	nop	dword ptr [rax + rax]


0x6fe5:	nop	dword ptr [rax]


0x7043:	nop	dword ptr [rax + rax]


0x706f:	nop	


0x7184:	nop	dword ptr [rax]


0x71a1:	nop	dword ptr [rax]


0x71b2:	nop	word ptr [rax + rax]


0x720a:	nop	word ptr [rax + rax]


0x7256:	nop	word ptr cs:[rax + rax]


