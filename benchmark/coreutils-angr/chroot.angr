0x5f70:	sub	rsp, 8
0x5f74:	add	rsp, 8
0x5f78:	ret	


0x5f60:	mov	rdx, qword ptr [rip + 0x2030a1]
0x5f67:	xor	esi, esi
0x5f69:	jmp	0x1a10


0x5f50:	ret	


0x5ee0:	push	r15
0x5ee2:	push	r14
0x5ee4:	mov	r15, rdx
0x5ee7:	push	r13
0x5ee9:	push	r12
0x5eeb:	lea	r12, [rip + 0x202bbe]
0x5ef2:	push	rbp
0x5ef3:	lea	rbp, [rip + 0x202bbe]
0x5efa:	push	rbx
0x5efb:	mov	r13d, edi
0x5efe:	mov	r14, rsi
0x5f01:	sub	rbp, r12
0x5f04:	sub	rsp, 8
0x5f08:	sar	rbp, 3
0x5f0c:	call	0x16a8


0x5e80:	mov	rax, qword ptr [rdi + 8]
0x5e84:	cmp	qword ptr [rdi + 0x10], rax
0x5e88:	je	0x5e90


0x5e40:	test	rdi, rdi
0x5e43:	push	rbx
0x5e44:	mov	rbx, rdi
0x5e47:	je	0x5e5a


0x5dc0:	push	r12
0x5dc2:	push	rbp
0x5dc3:	push	rbx
0x5dc4:	mov	rbx, rdi
0x5dc7:	call	0x1900


0x5b80:	push	r15
0x5b82:	push	r14
0x5b84:	mov	r15, rdx
0x5b87:	push	r13
0x5b89:	push	r12
0x5b8b:	mov	r13d, esi
0x5b8e:	push	rbp
0x5b8f:	push	rbx
0x5b90:	sub	rsp, 0x18
0x5b94:	mov	rax, qword ptr fs:[0x28]
0x5b9d:	mov	qword ptr [rsp + 8], rax
0x5ba2:	xor	eax, eax
0x5ba4:	test	rdi, rdi
0x5ba7:	je	0x5c78


0x5b30:	mov	edx, 4
0x5b35:	mov	rax, rdx
0x5b38:	mul	rsi
0x5b3b:	jo	0x5b6e


0x5af0:	sub	rsp, 8
0x5af4:	mov	edi, 0xe
0x5af9:	call	0x1940


0x5aa0:	lea	rcx, [rsi + 0x14]
0x5aa4:	mov	byte ptr [rsi + 0x14], 0
0x5aa8:	movabs	rsi, 0xcccccccccccccccd
0x5ab2:	nop	word ptr [rax + rax]
0x5ab8:	mov	rax, rdi
0x5abb:	sub	rcx, 1
0x5abf:	mul	rsi
0x5ac2:	shr	rdx, 3
0x5ac6:	lea	rax, [rdx + rdx*4]
0x5aca:	add	rax, rax
0x5acd:	sub	rdi, rax
0x5ad0:	add	edi, 0x30
0x5ad3:	test	rdx, rdx
0x5ad6:	mov	byte ptr [rcx], dil
0x5ad9:	mov	rdi, rdx
0x5adc:	jne	0x5ab8


0x5a40:	sub	rsp, 8
0x5a44:	xor	esi, esi
0x5a46:	call	0x1980


0x59c0:	push	r12
0x59c2:	push	rbp
0x59c3:	mov	rbp, rdi
0x59c6:	push	rbx
0x59c7:	call	0x1750


0x5930:	push	r13
0x5932:	push	r12
0x5934:	mov	r13, rsi
0x5937:	push	rbp
0x5938:	push	rbx
0x5939:	mov	rbx, rdi
0x593c:	mov	r12, rdx
0x593f:	sub	rsp, 0x18
0x5943:	mov	rax, qword ptr fs:[0x28]
0x594c:	mov	qword ptr [rsp + 8], rax
0x5951:	xor	eax, eax
0x5953:	lea	rax, [rsp + 4]
0x5958:	test	rdi, rdi
0x595b:	cmove	rbx, rax
0x595f:	mov	rdi, rbx
0x5962:	call	0x1800


0x5510:	push	r15
0x5512:	push	r14
0x5514:	push	r13
0x5516:	push	r12
0x5518:	push	rbp
0x5519:	push	rbx
0x551a:	sub	rsp, 0x28
0x551e:	mov	rax, qword ptr fs:[0x28]
0x5527:	mov	qword ptr [rsp + 0x18], rax
0x552c:	xor	eax, eax
0x552e:	cmp	edx, 0x24
0x5531:	ja	0x5895


0x54e0:	push	rbx
0x54e1:	call	0x5b80


0x54a0:	lea	rsi, [rip + 0x18e8]
0x54a7:	sub	rsp, 8
0x54ab:	mov	edx, 5
0x54b0:	xor	edi, edi
0x54b2:	call	0x17a0


0x5480:	push	rbx
0x5481:	mov	rbx, rdi
0x5484:	call	0x17c0


0x5450:	push	rbp
0x5451:	push	rbx
0x5452:	mov	rbp, rdi
0x5455:	mov	rdi, rsi
0x5458:	mov	rbx, rsi
0x545b:	sub	rsp, 8
0x545f:	call	0x5250


0x5420:	mov	rax, rdi
0x5423:	sub	rsp, 8
0x5427:	mul	rsi
0x542a:	seto	dl
0x542d:	test	rax, rax
0x5430:	js	0x5449


0x5400:	push	rbx
0x5401:	mov	rbx, rdi
0x5404:	call	0x5250


0x53b0:	test	rdi, rdi
0x53b3:	mov	rax, qword ptr [rsi]
0x53b6:	je	0x53e0


0x5320:	test	rdi, rdi
0x5323:	mov	r9, rdx
0x5326:	mov	rcx, qword ptr [rsi]
0x5329:	je	0x5360


0x52f0:	mov	rax, rsi
0x52f3:	mul	rdx
0x52f6:	mov	rsi, rax
0x52f9:	seto	al
0x52fc:	test	rsi, rsi
0x52ff:	js	0x530b


0x52b0:	test	rsi, rsi
0x52b3:	push	rbx
0x52b4:	mov	rbx, rsi
0x52b7:	jne	0x52be


0x52a0:	jmp	0x5250


0x5270:	mov	rax, rdi
0x5273:	mul	rsi
0x5276:	mov	rdi, rax
0x5279:	seto	al
0x527c:	test	rdi, rdi
0x527f:	js	0x528b


0x5250:	push	rbx
0x5251:	mov	rbx, rdi
0x5254:	call	0x1920


0x51d0:	push	rbx
0x51d1:	lea	rsi, [rip + 0x18b2]
0x51d8:	mov	edx, 5
0x51dd:	xor	edi, edi
0x51df:	call	0x17a0


0x50f0:	push	rbp
0x50f1:	push	rbx
0x50f2:	mov	r10d, 0x20
0x50f8:	xor	r11d, r11d
0x50fb:	sub	rsp, 0xb8
0x5102:	mov	rax, qword ptr fs:[0x28]
0x510b:	mov	qword ptr [rsp + 0x78], rax
0x5110:	xor	eax, eax
0x5112:	lea	rax, [rsp + 0xd0]
0x511a:	mov	qword ptr [rsp + 0xa0], r8
0x5122:	lea	rbx, [rsp + 0xd0]
0x512a:	lea	r8, [rsp + 0x20]
0x512f:	mov	qword ptr [rsp + 0xa8], r9
0x5137:	mov	dword ptr [rsp + 8], 0x20
0x513f:	mov	qword ptr [rsp + 0x10], rax
0x5144:	lea	rax, [rsp + 0x80]
0x514c:	xor	r9d, r9d
0x514f:	mov	qword ptr [rsp + 0x18], rax
0x5154:	mov	rbp, rax
0x5157:	nop	word ptr [rax + rax]
0x5160:	cmp	r10d, 0x2f
0x5164:	ja	0x51bc


0x5070:	sub	rsp, 0x68
0x5074:	mov	r10, r8
0x5077:	xor	r9d, r9d
0x507a:	mov	rax, qword ptr fs:[0x28]
0x5083:	mov	qword ptr [rsp + 0x58], rax
0x5088:	xor	eax, eax
0x508a:	mov	r8, rsp
0x508d:	nop	dword ptr [rax]
0x5090:	mov	eax, dword ptr [r10]
0x5093:	cmp	eax, 0x2f
0x5096:	ja	0x50da


0x5050:	xor	r9d, r9d
0x5053:	cmp	qword ptr [r8], 0
0x5057:	je	0x506b


0x4c30:	push	r15
0x4c32:	push	r14
0x4c34:	push	r13
0x4c36:	push	r12
0x4c38:	mov	r12, r9
0x4c3b:	push	rbp
0x4c3c:	push	rbx
0x4c3d:	mov	rbp, rdi
0x4c40:	mov	rbx, r8
0x4c43:	sub	rsp, 0x28
0x4c47:	test	rsi, rsi
0x4c4a:	je	0x4d68


0x4b60:	test	rdx, rdx
0x4b63:	je	0x4c10


0x4790:	push	r15
0x4792:	push	r14
0x4794:	mov	r10, rsi
0x4797:	push	r13
0x4799:	push	r12
0x479b:	mov	r12, rcx
0x479e:	push	rbp
0x479f:	push	rbx
0x47a0:	mov	r13, r8
0x47a3:	mov	r14, r9
0x47a6:	mov	r15d, 0xffffffff
0x47ac:	sub	rsp, 0x58
0x47b0:	mov	eax, dword ptr [rdx]
0x47b2:	mov	rcx, qword ptr fs:[0x28]
0x47bb:	mov	qword ptr [rsp + 0x48], rcx
0x47c0:	xor	ecx, ecx
0x47c2:	test	r12, r12
0x47c5:	mov	qword ptr [rsp + 0x10], rdx
0x47ca:	mov	dword ptr [rsp + 0x18], eax
0x47ce:	je	0x47d4


0x4770:	lea	rcx, [rip + 0x2048a9]
0x4777:	mov	rsi, rdi
0x477a:	mov	rdx, -1
0x4781:	xor	edi, edi
0x4783:	jmp	0x3e30


0x4750:	lea	rcx, [rip + 0x2048c9]
0x4757:	mov	rdx, -1
0x475e:	jmp	0x3e30


0x4730:	lea	rcx, [rip + 0x2048e9]
0x4737:	mov	rdx, rsi
0x473a:	mov	rsi, rdi
0x473d:	xor	edi, edi
0x473f:	jmp	0x3e30


0x4720:	lea	rcx, [rip + 0x2048f9]
0x4727:	jmp	0x3e30


0x4700:	mov	r8, rcx
0x4703:	mov	rcx, rdx
0x4706:	mov	rdx, rsi
0x4709:	mov	rsi, rdi
0x470c:	xor	edi, edi
0x470e:	jmp	0x4630


0x46e0:	mov	rcx, rdx
0x46e3:	mov	r8, -1
0x46ea:	mov	rdx, rsi
0x46ed:	mov	rsi, rdi
0x46f0:	xor	edi, edi
0x46f2:	jmp	0x4630


0x46d0:	mov	r8, -1
0x46d7:	jmp	0x4630


0x4630:	sub	rsp, 0x48
0x4634:	mov	r9, rcx
0x4637:	mov	rcx, qword ptr [rip + 0x204bf2]
0x463e:	movdqa	xmm0, xmmword ptr [rip + 0x204bba]
0x4646:	mov	rax, qword ptr fs:[0x28]
0x464f:	mov	qword ptr [rsp + 0x38], rax
0x4654:	xor	eax, eax
0x4656:	movaps	xmmword ptr [rsp], xmm0
0x465a:	test	rsi, rsi
0x465d:	mov	qword ptr [rsp + 0x30], rcx
0x4662:	mov	dword ptr [rsp], 0xa
0x4669:	movdqa	xmm0, xmmword ptr [rip + 0x204b9f]
0x4671:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x4676:	movdqa	xmm0, xmmword ptr [rip + 0x204ba2]
0x467e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x4683:	je	0x46b7


0x45a0:	sub	rsp, 0x48
0x45a4:	mov	rax, rdx
0x45a7:	mov	rdx, qword ptr fs:[0x28]
0x45b0:	mov	qword ptr [rsp + 0x38], rdx
0x45b5:	xor	edx, edx
0x45b7:	cmp	esi, 0xa
0x45ba:	je	0x4624


0x4590:	mov	edx, 0x3a
0x4595:	jmp	0x44c0


0x4570:	mov	edx, 0x3a
0x4575:	mov	rsi, -1
0x457c:	jmp	0x44c0


0x4560:	movsx	edx, sil
0x4564:	mov	rsi, -1
0x456b:	jmp	0x44c0


0x44c0:	sub	rsp, 0x48
0x44c4:	mov	ecx, edx
0x44c6:	mov	rax, qword ptr fs:[0x28]
0x44cf:	mov	qword ptr [rsp + 0x38], rax
0x44d4:	xor	eax, eax
0x44d6:	mov	rax, qword ptr [rip + 0x204d53]
0x44dd:	mov	r8, rsp
0x44e0:	and	ecx, 0x1f
0x44e3:	movdqa	xmm0, xmmword ptr [rip + 0x204d15]
0x44eb:	mov	qword ptr [rsp + 0x30], rax
0x44f0:	mov	eax, edx
0x44f2:	movaps	xmmword ptr [rsp], xmm0
0x44f6:	shr	al, 5
0x44f9:	movzx	eax, al
0x44fc:	lea	r9, [r8 + rax*4 + 8]
0x4501:	movdqa	xmm0, xmmword ptr [rip + 0x204d07]
0x4509:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x450e:	movdqa	xmm0, xmmword ptr [rip + 0x204d0a]
0x4516:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x451b:	mov	edx, dword ptr [r9]
0x451e:	mov	eax, edx
0x4520:	shr	eax, cl
0x4522:	not	eax
0x4524:	and	eax, 1
0x4527:	shl	eax, cl
0x4529:	mov	rcx, r8
0x452c:	xor	eax, edx
0x452e:	mov	rdx, rsi
0x4531:	mov	rsi, rdi
0x4534:	mov	dword ptr [r9], eax
0x4537:	xor	edi, edi
0x4539:	call	0x3e30


0x44b0:	mov	rcx, rdx
0x44b3:	mov	rdx, rsi
0x44b6:	mov	esi, edi
0x44b8:	xor	edi, edi
0x44ba:	jmp	0x4410


0x44a0:	mov	rdx, rsi
0x44a3:	mov	esi, edi
0x44a5:	xor	edi, edi
0x44a7:	jmp	0x4380


0x4410:	sub	rsp, 0x48
0x4414:	mov	rax, rdx
0x4417:	mov	rdx, rcx
0x441a:	mov	rcx, qword ptr fs:[0x28]
0x4423:	mov	qword ptr [rsp + 0x38], rcx
0x4428:	xor	ecx, ecx
0x442a:	cmp	esi, 0xa
0x442d:	je	0x4490


0x4380:	sub	rsp, 0x48
0x4384:	mov	rax, rdx
0x4387:	mov	rdx, qword ptr fs:[0x28]
0x4390:	mov	qword ptr [rsp + 0x38], rdx
0x4395:	xor	edx, edx
0x4397:	cmp	esi, 0xa
0x439a:	je	0x4404


0x4360:	lea	rcx, [rip + 0x204e99]
0x4367:	mov	rdx, rsi
0x436a:	mov	rsi, rdi
0x436d:	xor	edi, edi
0x436f:	jmp	0x3e30


0x4340:	lea	rcx, [rip + 0x204eb9]
0x4347:	mov	rsi, rdi
0x434a:	mov	rdx, -1
0x4351:	xor	edi, edi
0x4353:	jmp	0x3e30


0x4330:	lea	rcx, [rip + 0x204ec9]
0x4337:	jmp	0x3e30


0x4310:	lea	rcx, [rip + 0x204ee9]
0x4317:	mov	rdx, -1
0x431e:	jmp	0x3e30


0x4270:	mov	eax, dword ptr [rip + 0x204de2]
0x4276:	push	r12
0x4278:	mov	r12, qword ptr [rip + 0x204de1]
0x427f:	push	rbp
0x4280:	push	rbx
0x4281:	cmp	eax, 1
0x4284:	jle	0x42b1


0x4260:	mov	rcx, rdx
0x4263:	xor	edx, edx
0x4265:	jmp	0x4170


0x4170:	push	r15
0x4172:	push	r14
0x4174:	lea	rax, [rip + 0x205085]
0x417b:	push	r13
0x417d:	push	r12
0x417f:	mov	r12, rdx
0x4182:	push	rbp
0x4183:	push	rbx
0x4184:	mov	rbx, rcx
0x4187:	mov	r14, rdi
0x418a:	mov	r15, rsi
0x418d:	sub	rsp, 0x38
0x4191:	test	rcx, rcx
0x4194:	cmove	rbx, rax
0x4198:	xor	ebp, ebp
0x419a:	call	0x1710


0x40f0:	push	r15
0x40f2:	push	r14
0x40f4:	lea	rax, [rip + 0x205105]
0x40fb:	push	r13
0x40fd:	push	r12
0x40ff:	mov	r13, rdi
0x4102:	push	rbp
0x4103:	push	rbx
0x4104:	mov	rbx, r8
0x4107:	mov	r14, rsi
0x410a:	mov	r15, rdx
0x410d:	sub	rsp, 0x18
0x4111:	test	r8, r8
0x4114:	cmove	rbx, rax
0x4118:	mov	qword ptr [rsp + 8], rcx
0x411d:	call	0x1710


0x40c0:	lea	rax, [rip + 0x205139]
0x40c7:	test	rdi, rdi
0x40ca:	cmove	rdi, rax
0x40ce:	test	rsi, rsi
0x40d1:	mov	dword ptr [rdi], 0xa
0x40d7:	je	0x40e7


0x40a0:	lea	rax, [rip + 0x205159]
0x40a7:	test	rdi, rdi
0x40aa:	cmove	rdi, rax
0x40ae:	mov	eax, dword ptr [rdi + 4]
0x40b1:	mov	dword ptr [rdi + 4], esi
0x40b4:	ret	


0x4060:	lea	rax, [rip + 0x205199]
0x4067:	test	rdi, rdi
0x406a:	mov	ecx, esi
0x406c:	cmove	rdi, rax
0x4070:	mov	eax, esi
0x4072:	and	ecx, 0x1f
0x4075:	shr	al, 5
0x4078:	movzx	eax, al
0x407b:	lea	rdi, [rdi + rax*4 + 8]
0x4080:	mov	esi, dword ptr [rdi]
0x4082:	mov	eax, esi
0x4084:	shr	eax, cl
0x4086:	xor	edx, eax
0x4088:	and	eax, 1
0x408b:	and	edx, 1
0x408e:	shl	edx, cl
0x4090:	xor	edx, esi
0x4092:	mov	dword ptr [rdi], edx
0x4094:	ret	


0x4040:	lea	rax, [rip + 0x2051b9]
0x4047:	test	rdi, rdi
0x404a:	cmove	rdi, rax
0x404e:	mov	dword ptr [rdi], esi
0x4050:	ret	


0x4020:	lea	rax, [rip + 0x2051d9]
0x4027:	test	rdi, rdi
0x402a:	cmove	rdi, rax
0x402e:	mov	eax, dword ptr [rdi]
0x4030:	ret	


0x3fe0:	push	r12
0x3fe2:	push	rbp
0x3fe3:	push	rbx
0x3fe4:	mov	rbx, rdi
0x3fe7:	call	0x1710


0x3e30:	push	r15
0x3e32:	push	r14
0x3e34:	movsxd	r15, edi
0x3e37:	push	r13
0x3e39:	push	r12
0x3e3b:	mov	r14, rdx
0x3e3e:	push	rbp
0x3e3f:	push	rbx
0x3e40:	mov	rbp, rcx
0x3e43:	sub	rsp, 0x28
0x3e47:	mov	qword ptr [rsp + 8], rsi
0x3e4c:	call	0x1710


0x2bf0:	push	r15
0x2bf2:	push	r14
0x2bf4:	mov	r15d, r8d
0x2bf7:	push	r13
0x2bf9:	push	r12
0x2bfb:	mov	r14, rdi
0x2bfe:	push	rbp
0x2bff:	push	rbx
0x2c00:	mov	ebx, r9d
0x2c03:	mov	r13, rsi
0x2c06:	mov	rbp, rcx
0x2c09:	and	ebx, 2
0x2c0c:	sub	rsp, 0xb8
0x2c13:	mov	rax, qword ptr [rsp + 0xf0]
0x2c1b:	mov	qword ptr [rsp + 0x10], rdx
0x2c20:	mov	dword ptr [rsp + 8], r8d
0x2c25:	mov	dword ptr [rsp + 0x78], r9d
0x2c2a:	mov	qword ptr [rsp + 0x20], rax
0x2c2f:	mov	rax, qword ptr [rsp + 0xf8]
0x2c37:	mov	qword ptr [rsp + 0x68], rax
0x2c3c:	mov	rax, qword ptr [rsp + 0x100]
0x2c44:	mov	qword ptr [rsp + 0x60], rax
0x2c49:	mov	rax, qword ptr fs:[0x28]
0x2c52:	mov	qword ptr [rsp + 0xa8], rax
0x2c5a:	xor	eax, eax
0x2c5c:	call	0x17b0


0x2b00:	push	rbp
0x2b01:	push	rbx
0x2b02:	mov	rbp, rdi
0x2b05:	mov	ebx, esi
0x2b07:	sub	rsp, 8
0x2b0b:	call	0x5af0


0x2a60:	test	rdi, rdi
0x2a63:	push	rbx
0x2a64:	je	0x2add


0x29b0:	push	rbp
0x29b1:	push	rbx
0x29b2:	sub	rsp, 8
0x29b6:	mov	rdi, qword ptr [rip + 0x2066cb]
0x29bd:	call	0x59c0


0x29a0:	mov	byte ptr [rip + 0x206729], dil
0x29a7:	ret	


0x2990:	mov	qword ptr [rip + 0x206741], rdi
0x2997:	ret	


0x25a0:	push	r13
0x25a2:	push	r12
0x25a4:	mov	edx, 5
0x25a9:	push	rbp
0x25aa:	push	rbx
0x25ab:	mov	ebp, edi
0x25ad:	sub	rsp, 0x88
0x25b4:	mov	rbx, qword ptr [rip + 0x206b25]
0x25bb:	mov	rax, qword ptr fs:[0x28]
0x25c4:	mov	qword ptr [rsp + 0x78], rax
0x25c9:	xor	eax, eax
0x25cb:	test	edi, edi
0x25cd:	je	0x25fd


0x2330:	push	r15
0x2332:	push	r14
0x2334:	push	r13
0x2336:	push	r12
0x2338:	push	rbp
0x2339:	push	rbx
0x233a:	sub	rsp, 0x68
0x233e:	mov	qword ptr [rsp + 0x30], rdi
0x2343:	mov	qword ptr [rsp + 0x10], rsi
0x2348:	mov	qword ptr [rsp + 0x20], rdx
0x234d:	mov	dword ptr [rsp + 0x3c], ecx
0x2351:	mov	byte ptr [rsp + 0x3b], cl
0x2355:	mov	qword ptr [rsp + 0x48], 0
0x235e:	mov	rax, qword ptr fs:[0x28]
0x2367:	mov	qword ptr [rsp + 0x58], rax
0x236c:	xor	eax, eax
0x236e:	call	0x5480


0x2320:	push	rbp
0x2321:	mov	rbp, rsp
0x2324:	pop	rbp
0x2325:	jmp	0x2290


0x22e0:	cmp	byte ptr [rip + 0x206de1], 0
0x22e7:	jne	0x2318


0x2290:	lea	rdi, [rip + 0x206de9]
0x2297:	lea	rsi, [rip + 0x206de2]
0x229e:	push	rbp
0x229f:	sub	rsi, rdi
0x22a2:	mov	rbp, rsp
0x22a5:	sar	rsi, 3
0x22a9:	mov	rax, rsi
0x22ac:	shr	rax, 0x3f
0x22b0:	add	rsi, rax
0x22b3:	sar	rsi, 1
0x22b6:	je	0x22d0


0x2250:	lea	rdi, [rip + 0x206e29]
0x2257:	push	rbp
0x2258:	lea	rax, [rip + 0x206e21]
0x225f:	cmp	rax, rdi
0x2262:	mov	rbp, rsp
0x2265:	je	0x2280


0x2220:	xor	ebp, ebp
0x2222:	mov	r9, rdx
0x2225:	pop	rsi
0x2226:	mov	rdx, rsp
0x2229:	and	rsp, 0xfffffffffffffff0
0x222d:	push	rax
0x222e:	push	rsp
0x222f:	lea	r8, [rip + 0x3d1a]
0x2236:	lea	rcx, [rip + 0x3ca3]
0x223d:	lea	rdi, [rip - 0x7a4]
0x2244:	call	qword ptr [rip + 0x206d7e]


0x1aa0:	push	r15
0x1aa2:	push	r14
0x1aa4:	xor	r14d, r14d
0x1aa7:	push	r13
0x1aa9:	push	r12
0x1aab:	xor	r13d, r13d
0x1aae:	push	rbp
0x1aaf:	push	rbx
0x1ab0:	mov	ebp, edi
0x1ab2:	mov	rbx, rsi
0x1ab5:	xor	r12d, r12d
0x1ab8:	sub	rsp, 0x48
0x1abc:	mov	rdi, qword ptr [rsi]
0x1abf:	mov	rax, qword ptr fs:[0x28]
0x1ac8:	mov	qword ptr [rsp + 0x38], rax
0x1acd:	xor	eax, eax
0x1acf:	mov	dword ptr [rsp + 0x18], 0xffffffff
0x1ad7:	mov	dword ptr [rsp + 0x1c], 0xffffffff
0x1adf:	mov	qword ptr [rsp + 0x20], 0
0x1ae8:	mov	qword ptr [rsp + 0x28], 0
0x1af1:	call	0x2a60


0x16a8:	sub	rsp, 8
0x16ac:	mov	rax, qword ptr [rip + 0x20791d]
0x16b3:	test	rax, rax
0x16b6:	je	0x16ba


0x1a10:	jmp	qword ptr [rip + 0x20756a]


0x5e90:	mov	rax, qword ptr [rdi + 0x20]
0x5e94:	cmp	qword ptr [rdi + 0x28], rax
0x5e98:	jne	0x5e8a


0x5e8a:	jmp	0x19d0


0x5e5a:	mov	rdi, rbx
0x5e5d:	pop	rbx
0x5e5e:	jmp	0x1930


0x5e49:	call	0x1960


0x1900:	jmp	qword ptr [rip + 0x2075f2]


0x5c78:	xor	esi, esi
0x5c7a:	xor	edi, edi
0x5c7c:	call	0x1910


0x5bad:	mov	rbp, rdi
0x5bb0:	mov	esi, 0xa
0x5bb5:	xor	edi, edi
0x5bb7:	mov	dword ptr [rsp + 4], 0xa
0x5bbf:	call	0x5b30


0x5b6e:	mov	ecx, 1
0x5b73:	jmp	0x5b3f


0x5b3d:	xor	ecx, ecx
0x5b3f:	test	rax, rax
0x5b42:	js	0x5b58


0x1940:	jmp	qword ptr [rip + 0x2075d2]


0x5ade:	mov	rax, rcx
0x5ae1:	ret	


0x5ab8:	mov	rax, rdi
0x5abb:	sub	rcx, 1
0x5abf:	mul	rsi
0x5ac2:	shr	rdx, 3
0x5ac6:	lea	rax, [rdx + rdx*4]
0x5aca:	add	rax, rax
0x5acd:	sub	rdi, rax
0x5ad0:	add	edi, 0x30
0x5ad3:	test	rdx, rdx
0x5ad6:	mov	byte ptr [rcx], dil
0x5ad9:	mov	rdi, rdx
0x5adc:	jne	0x5ab8


0x1980:	jmp	qword ptr [rip + 0x2075b2]


0x1750:	jmp	qword ptr [rip + 0x2076ca]


0x1800:	jmp	qword ptr [rip + 0x207672]


0x5537:	lea	rax, [rsp + 0x10]
0x553c:	mov	r15, rsi
0x553f:	test	rsi, rsi
0x5542:	mov	rbp, rdi
0x5545:	mov	dword ptr [rsp + 8], edx
0x5549:	mov	r14, rcx
0x554c:	mov	r13, r8
0x554f:	cmove	r15, rax
0x5553:	call	0x1710


0x5895:	lea	rcx, [rip + 0x1624]
0x589c:	lea	rsi, [rip + 0x14fd]
0x58a3:	lea	rdi, [rip + 0x1516]
0x58aa:	mov	edx, 0x54
0x58af:	call	0x1850


0x17a0:	jmp	qword ptr [rip + 0x2076a2]


0x17c0:	jmp	qword ptr [rip + 0x207692]


0x5449:	call	0x54a0


0x5432:	movzx	edx, dl
0x5435:	test	rdx, rdx
0x5438:	jne	0x5449


0x53e0:	test	rax, rax
0x53e3:	mov	edx, 0x80
0x53e8:	cmove	rax, rdx
0x53ec:	test	rax, rax
0x53ef:	jns	0x53d2


0x53b8:	movabs	rdx, 0x5555555555555553
0x53c2:	cmp	rax, rdx
0x53c5:	ja	0x53f1


0x5360:	test	rcx, rcx
0x5363:	je	0x5388


0x532b:	xor	edx, edx
0x532d:	movabs	rax, 0x5555555555555554
0x5337:	div	r9
0x533a:	cmp	rax, rcx
0x533d:	jbe	0x537b


0x530b:	sub	rsp, 8
0x530f:	call	0x54a0


0x5301:	movzx	eax, al
0x5304:	test	rax, rax
0x5307:	jne	0x530b


0x52b9:	test	rdi, rdi
0x52bc:	jne	0x52d8


0x52be:	mov	rsi, rbx
0x52c1:	call	0x1970


0x528b:	sub	rsp, 8
0x528f:	call	0x54a0


0x5281:	movzx	eax, al
0x5284:	test	rax, rax
0x5287:	jne	0x528b


0x1920:	jmp	qword ptr [rip + 0x2075e2]


0x5166:	mov	eax, r10d
0x5169:	mov	r11d, 1
0x516f:	add	r10d, 8
0x5173:	add	rax, rbp
0x5176:	mov	rax, qword ptr [rax]
0x5179:	test	rax, rax
0x517c:	mov	qword ptr [r8 + r9*8], rax
0x5180:	je	0x518c


0x51bc:	mov	rax, rbx
0x51bf:	add	rbx, 8
0x51c3:	jmp	0x5176


0x5098:	mov	r11d, eax
0x509b:	add	r11, qword ptr [r10 + 0x10]
0x509f:	add	eax, 8
0x50a2:	mov	dword ptr [r10], eax
0x50a5:	mov	rax, qword ptr [r11]
0x50a8:	test	rax, rax
0x50ab:	mov	qword ptr [r8 + r9*8], rax
0x50af:	je	0x50bb


0x50da:	mov	r11, qword ptr [r10 + 8]
0x50de:	lea	rax, [r11 + 8]
0x50e2:	mov	qword ptr [r10 + 8], rax
0x50e6:	jmp	0x50a5


0x506b:	jmp	0x4c30


0x4d68:	mov	r8, rcx
0x4d6b:	mov	rcx, rdx
0x4d6e:	lea	rdx, [rip + 0x1cc7]
0x4d75:	mov	esi, 1
0x4d7a:	xor	eax, eax
0x4d7c:	call	0x1a40


0x4c50:	mov	r8, rdx
0x4c53:	lea	rdx, [rip + 0x1dd6]
0x4c5a:	mov	r9, rcx
0x4c5d:	xor	eax, eax
0x4c5f:	mov	rcx, rsi
0x4c62:	mov	esi, 1
0x4c67:	call	0x1a40


0x4c10:	mov	r9, r8
0x4c13:	mov	rdx, rsi
0x4c16:	mov	r8, rcx
0x4c19:	xor	esi, esi
0x4c1b:	xor	ecx, ecx
0x4c1d:	jmp	0x4790


0x4b69:	push	r15
0x4b6b:	push	r14
0x4b6d:	mov	r14, rsi
0x4b70:	push	r13
0x4b72:	push	r12
0x4b74:	mov	r13, r8
0x4b77:	push	rbp
0x4b78:	push	rbx
0x4b79:	mov	r12, rcx
0x4b7c:	mov	rbp, rdx
0x4b7f:	mov	rbx, rdi
0x4b82:	mov	esi, 0x3a
0x4b87:	sub	rsp, 0x18
0x4b8b:	call	0x1810


0x47d4:	test	r13, r13
0x47d7:	je	0x47e1


0x47d0:	mov	r15d, dword ptr [r12]
0x47d4:	test	r13, r13
0x47d7:	je	0x47e1


0x46b7:	call	0x1700


0x4685:	test	rdx, rdx
0x4688:	je	0x46b7


0x4624:	call	0x1700


0x45bc:	mov	dword ptr [rsp], esi
0x45bf:	mov	rcx, rsp
0x45c2:	mov	rdx, -1
0x45c9:	mov	rsi, rax
0x45cc:	mov	qword ptr [rsp + 4], 0
0x45d5:	mov	qword ptr [rsp + 0xc], 0x4000000
0x45de:	mov	qword ptr [rsp + 0x14], 0
0x45e7:	mov	qword ptr [rsp + 0x1c], 0
0x45f0:	mov	qword ptr [rsp + 0x24], 0
0x45f9:	mov	qword ptr [rsp + 0x2c], 0
0x4602:	mov	dword ptr [rsp + 0x34], 0
0x460a:	call	0x3e30


0x4490:	call	0x1700


0x442f:	mov	dword ptr [rsp], esi
0x4432:	mov	rcx, rsp
0x4435:	mov	rsi, rax
0x4438:	mov	qword ptr [rsp + 4], 0
0x4441:	mov	qword ptr [rsp + 0xc], 0
0x444a:	mov	qword ptr [rsp + 0x14], 0
0x4453:	mov	qword ptr [rsp + 0x1c], 0
0x445c:	mov	qword ptr [rsp + 0x24], 0
0x4465:	mov	qword ptr [rsp + 0x2c], 0
0x446e:	mov	dword ptr [rsp + 0x34], 0
0x4476:	call	0x3e30


0x4404:	call	0x1700


0x439c:	mov	dword ptr [rsp], esi
0x439f:	mov	rcx, rsp
0x43a2:	mov	rdx, -1
0x43a9:	mov	rsi, rax
0x43ac:	mov	qword ptr [rsp + 4], 0
0x43b5:	mov	qword ptr [rsp + 0xc], 0
0x43be:	mov	qword ptr [rsp + 0x14], 0
0x43c7:	mov	qword ptr [rsp + 0x1c], 0
0x43d0:	mov	qword ptr [rsp + 0x24], 0
0x43d9:	mov	qword ptr [rsp + 0x2c], 0
0x43e2:	mov	dword ptr [rsp + 0x34], 0
0x43ea:	call	0x3e30


0x42b1:	mov	rdi, qword ptr [r12 + 8]
0x42b6:	lea	rbx, [rip + 0x204e43]
0x42bd:	cmp	rdi, rbx
0x42c0:	je	0x42d9


0x4286:	sub	eax, 2
0x4289:	lea	rbx, [r12 + 0x18]
0x428e:	shl	rax, 4
0x4292:	lea	rbp, [r12 + rax + 0x28]
0x4297:	nop	word ptr [rax + rax]
0x42a0:	mov	rdi, qword ptr [rbx]
0x42a3:	add	rbx, 0x10
0x42a7:	call	0x16f0


0x1710:	jmp	qword ptr [rip + 0x2076ea]


0x40e7:	sub	rsp, 8
0x40eb:	call	0x1700


0x40d9:	test	rdx, rdx
0x40dc:	je	0x40e7


0x17b0:	jmp	qword ptr [rip + 0x20769a]


0x2add:	mov	rcx, qword ptr [rip + 0x2065dc]
0x2ae4:	lea	rdi, [rip + 0x39fd]
0x2aeb:	mov	edx, 0x37
0x2af0:	mov	esi, 1
0x2af5:	call	0x1a30


0x2a66:	mov	esi, 0x2f
0x2a6b:	mov	rbx, rdi
0x2a6e:	call	0x1830


0x25fd:	lea	rsi, [rip + 0x3b34]
0x2604:	xor	edi, edi
0x2606:	call	0x17a0


0x25cf:	lea	rsi, [rip + 0x3b3a]
0x25d6:	xor	edi, edi
0x25d8:	call	0x17a0


0x22e9:	cmp	qword ptr [rip + 0x206cef], 0
0x22f1:	push	rbp
0x22f2:	mov	rbp, rsp
0x22f5:	je	0x2303


0x2318:	ret	


0x22d0:	pop	rbp
0x22d1:	ret	


0x22b8:	mov	rax, qword ptr [rip + 0x206d19]
0x22bf:	test	rax, rax
0x22c2:	je	0x22d0


0x2280:	pop	rbp
0x2281:	ret	


0x2267:	mov	rax, qword ptr [rip + 0x206d52]
0x226e:	test	rax, rax
0x2271:	je	0x2280




0x16ba:	add	rsp, 8
0x16be:	ret	


0x16b8:	call	rax




0x5e9a:	cmp	qword ptr [rdi + 0x48], 0
0x5e9f:	jne	0x5e8a


0x19d0:	jmp	qword ptr [rip + 0x20758a]


0x1930:	jmp	qword ptr [rip + 0x2075da]


0x1960:	jmp	qword ptr [rip + 0x2075c2]




0x1910:	jmp	qword ptr [rip + 0x2075ea]


0x5b3f:	test	rax, rax
0x5b42:	js	0x5b58


0x5b58:	sub	rsp, 8
0x5b5c:	call	0x1710


0x5b44:	test	rcx, rcx
0x5b47:	jne	0x5b58










0x1850:	jmp	qword ptr [rip + 0x20764a]






0x543a:	call	0x18b0


0x53f1:	sub	rsp, 8
0x53f5:	call	0x54a0


0x53d2:	mov	qword ptr [rsi], rax
0x53d5:	mov	rsi, rax
0x53d8:	jmp	0x52b0


0x53c7:	mov	rdx, rax
0x53ca:	shr	rdx, 1
0x53cd:	lea	rax, [rdx + rax + 1]
0x53d2:	mov	qword ptr [rsi], rax
0x53d5:	mov	rsi, rax
0x53d8:	jmp	0x52b0


0x5388:	xor	edx, edx
0x538a:	mov	eax, 0x80
0x538f:	xor	r8d, r8d
0x5392:	div	r9
0x5395:	test	rax, rax
0x5398:	sete	r8b
0x539c:	lea	rcx, [r8 + rax]
0x53a0:	jmp	0x5365


0x5365:	mov	rax, rcx
0x5368:	mul	r9
0x536b:	seto	dl
0x536e:	test	rax, rax
0x5371:	movzx	edx, dl
0x5374:	js	0x537b


0x537b:	sub	rsp, 8
0x537f:	call	0x54a0


0x533f:	mov	rax, rcx
0x5342:	shr	rax, 1
0x5345:	lea	rcx, [rax + rcx + 1]
0x534a:	mov	qword ptr [rsi], rcx
0x534d:	imul	rcx, r9
0x5351:	mov	rsi, rcx
0x5354:	jmp	0x52b0


0x5309:	jmp	0x52b0


0x52d8:	call	0x16f0


0x1970:	jmp	qword ptr [rip + 0x2075ba]


0x5289:	jmp	0x5250




0x518c:	test	r11b, r11b
0x518f:	jne	0x51b5


0x5182:	add	r9, 1
0x5186:	cmp	r9, 0xa
0x518a:	jne	0x5160


0x5176:	mov	rax, qword ptr [rax]
0x5179:	test	rax, rax
0x517c:	mov	qword ptr [r8 + r9*8], rax
0x5180:	je	0x518c


0x50bb:	call	0x4c30


0x50b1:	add	r9, 1
0x50b5:	cmp	r9, 0xa
0x50b9:	jne	0x5090


0x50a5:	mov	rax, qword ptr [r11]
0x50a8:	test	rax, rax
0x50ab:	mov	qword ptr [r8 + r9*8], rax
0x50af:	je	0x50bb


0x5060:	add	r9, 1
0x5064:	cmp	qword ptr [r8 + r9*8], 0
0x5069:	jne	0x5060


0x1a40:	jmp	qword ptr [rip + 0x207552]


0x1810:	jmp	qword ptr [rip + 0x20766a]


0x47e1:	test	r14, r14
0x47e4:	je	0x47ed


0x47d9:	mov	qword ptr [r13], 0
0x47e1:	test	r14, r14
0x47e4:	je	0x47ed


0x1700:	jmp	qword ptr [rip + 0x2076f2]


0x468a:	mov	qword ptr [rsp + 0x28], rsi
0x468f:	mov	qword ptr [rsp + 0x30], rdx
0x4694:	mov	rcx, rsp
0x4697:	mov	rdx, r8
0x469a:	mov	rsi, r9
0x469d:	call	0x3e30


0x42d9:	lea	rbx, [rip + 0x204d90]
0x42e0:	cmp	r12, rbx
0x42e3:	je	0x42f4


0x42c2:	call	0x16f0


0x16f0:	jmp	qword ptr [rip + 0x2076fa]




0x40de:	mov	qword ptr [rdi + 0x28], rsi
0x40e2:	mov	qword ptr [rdi + 0x30], rdx
0x40e6:	ret	




0x1a30:	jmp	qword ptr [rip + 0x20755a]


0x1830:	jmp	qword ptr [rip + 0x20765a]


0x2303:	call	0x2250


0x22f7:	mov	rdi, qword ptr [rip + 0x206d0a]
0x22fe:	call	0x1a90


0x22c4:	pop	rbp
0x22c5:	jmp	rax


0x2273:	pop	rbp
0x2274:	jmp	rax


0x5ea1:	push	r12
0x5ea3:	push	rbp
0x5ea4:	mov	r12d, edx
0x5ea7:	push	rbx
0x5ea8:	mov	rbp, rsi
0x5eab:	mov	rbx, rdi
0x5eae:	call	0x1900










0x5b49:	shl	rsi, 2
0x5b4d:	jmp	0x1970




0x18b0:	jmp	qword ptr [rip + 0x20761a]


0x5376:	test	rdx, rdx
0x5379:	je	0x534a




0x5191:	call	0x4c30


0x51b5:	mov	dword ptr [rsp + 8], r10d
0x51ba:	jmp	0x5191


0x5160:	cmp	r10d, 0x2f
0x5164:	ja	0x51bc


0x5090:	mov	eax, dword ptr [r10]
0x5093:	cmp	eax, 0x2f
0x5096:	ja	0x50da






0x47ed:	test	r10, r10
0x47f0:	je	0x4988


0x47e6:	mov	qword ptr [r14], 0
0x47ed:	test	r10, r10
0x47f0:	je	0x4988




0x42f4:	pop	rbx
0x42f5:	mov	dword ptr [rip + 0x204d59], 1
0x42ff:	pop	rbp
0x4300:	pop	r12
0x4302:	ret	


0x42e5:	mov	rdi, r12
0x42e8:	call	0x16f0








0x1a90:	jmp	qword ptr [rip + 0x20754a]




0x534a:	mov	qword ptr [rsi], rcx
0x534d:	imul	rcx, r9
0x5351:	mov	rsi, rcx
0x5354:	jmp	0x52b0


0x4988:	xor	ebx, ebx
0x498a:	cmp	byte ptr [rdi], 0
0x498d:	je	0x486c


0x47f6:	mov	rbx, r10
0x47f9:	sub	rbx, rdi
0x47fc:	jne	0x48d0


0x486c:	mov	rax, qword ptr [rsp + 0x10]
0x4871:	mov	esi, dword ptr [rsp + 0x18]
0x4875:	test	r12, r12
0x4878:	mov	dword ptr [rax], esi
0x487a:	je	0x4880


0x4993:	mov	qword ptr [rsp], r10
0x4997:	call	0x5480


0x4802:	cmp	byte ptr [r10 + 1], 0
0x4807:	je	0x4a18


0x48d0:	lea	rsi, [rbx + 1]
0x48d4:	mov	qword ptr [rsp], r10
0x48d8:	call	0x5450


0x4880:	test	r13, r13
0x4883:	je	0x488c


0x487c:	mov	dword ptr [r12], r15d
0x4880:	test	r13, r13
0x4883:	je	0x488c


0x4a18:	xor	r10d, r10d
0x4a1b:	xor	ebx, ebx
0x4a1d:	jmp	0x486c


0x480d:	add	r10, 1
0x4811:	mov	qword ptr [rsp], 0
0x4819:	setne	byte ptr [rsp + 0x1e]
0x481e:	mov	qword ptr [rsp + 8], r10
0x4823:	xor	ebp, ebp
0x4825:	xor	ebx, ebx
0x4827:	cmp	byte ptr [rsp + 0x1e], 0
0x482c:	je	0x4b20


0x488c:	test	r14, r14
0x488f:	je	0x4896


0x4885:	mov	qword ptr [r13], r10
0x4889:	xor	r10d, r10d
0x488c:	test	r14, r14
0x488f:	je	0x4896


0x4b20:	cmp	qword ptr [rsp], 0
0x4b25:	jne	0x49ee


0x4832:	mov	rax, qword ptr [rsp + 8]
0x4837:	cmp	byte ptr [rax], 0x2b
0x483a:	je	0x49b0


0x4896:	mov	rdi, r10
0x4899:	call	0x16f0


0x4891:	mov	qword ptr [r14], rbx
0x4894:	xor	ebx, ebx
0x4896:	mov	rdi, r10
0x4899:	call	0x16f0


0x4b2b:	jmp	0x4869


0x49ee:	mov	rdi, rbp
0x49f1:	call	0x16f0


0x49b0:	mov	rdi, qword ptr [rsp + 8]
0x49b5:	lea	rcx, [rsp + 0x28]
0x49ba:	lea	r8, [rip + 0x20c8]
0x49c1:	xor	esi, esi
0x49c3:	mov	edx, 0xa
0x49c8:	call	0x5510


0x4840:	mov	rdi, qword ptr [rsp + 8]
0x4845:	call	0x18f0


0x4869:	mov	r10, rbp
0x486c:	mov	rax, qword ptr [rsp + 0x10]
0x4871:	mov	esi, dword ptr [rsp + 0x18]
0x4875:	test	r12, r12
0x4878:	mov	dword ptr [rax], esi
0x487a:	je	0x4880


0x18f0:	jmp	qword ptr [rip + 0x2075fa]




0x2308:	mov	byte ptr [rip + 0x206db9], 1
0x230f:	pop	rbp
0x2310:	ret	


0x5f11:	test	rbp, rbp
0x5f14:	je	0x5f36


0x5f36:	add	rsp, 8
0x5f3a:	pop	rbx
0x5f3b:	pop	rbp
0x5f3c:	pop	r12
0x5f3e:	pop	r13
0x5f40:	pop	r14
0x5f42:	pop	r15
0x5f44:	ret	


0x5f16:	xor	ebx, ebx
0x5f18:	nop	dword ptr [rax + rax]
0x5f20:	mov	rdx, r15
0x5f23:	mov	rsi, r14
0x5f26:	mov	edi, r13d
0x5f29:	call	qword ptr [r12 + rbx*8]


0x484a:	test	rax, rax
0x484d:	je	0x49b0


0x4853:	mov	r15d, dword ptr [rax + 0x10]
0x4857:	call	0x16d0


0x16d0:	jmp	qword ptr [rip + 0x20770a]




0x543f:	test	rax, rax
0x5442:	je	0x5449


0x5444:	add	rsp, 8
0x5448:	ret	


0x2a73:	test	rax, rax
0x2a76:	je	0x2acd


0x2acd:	mov	qword ptr [rip + 0x20660c], rbx
0x2ad4:	mov	qword ptr [rip + 0x2065c5], rbx
0x2adb:	pop	rbx
0x2adc:	ret	


0x2a78:	lea	r8, [rax + 1]
0x2a7c:	mov	rdx, r8
0x2a7f:	sub	rdx, rbx
0x2a82:	cmp	rdx, 6
0x2a86:	jle	0x2acd


0x2a88:	lea	rsi, [rax - 6]
0x2a8c:	lea	rdi, [rip + 0x3a8d]
0x2a93:	mov	ecx, 7
0x2a98:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2a98:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2a9a:	seta	dl
0x2a9d:	sbb	dl, 0
0x2aa0:	test	dl, dl
0x2aa2:	jne	0x2acd


0x2aa4:	lea	rdi, [rip + 0x3a7d]
0x2aab:	mov	ecx, 3
0x2ab0:	mov	rsi, r8
0x2ab3:	mov	rbx, r8
0x2ab6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2ab6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2ab8:	seta	dl
0x2abb:	sbb	dl, 0
0x2abe:	test	dl, dl
0x2ac0:	jne	0x2acd


0x2ac2:	lea	rbx, [rax + 4]
0x2ac6:	mov	qword ptr [rip + 0x2065b3], rbx
0x2acd:	mov	qword ptr [rip + 0x20660c], rbx
0x2ad4:	mov	qword ptr [rip + 0x2065c5], rbx
0x2adb:	pop	rbx
0x2adc:	ret	


0x2afa:	call	0x1700


0x49f6:	mov	rdi, rbx
0x49f9:	call	0x16f0


0x49fe:	mov	rsi, qword ptr [rsp]
0x4a02:	mov	edx, 5
0x4a07:	xor	edi, edi
0x4a09:	call	0x17a0


0x489e:	mov	rdi, rbx
0x48a1:	call	0x16f0


0x48a6:	xor	eax, eax
0x48a8:	mov	rdx, qword ptr [rsp + 0x48]
0x48ad:	xor	rdx, qword ptr fs:[0x28]
0x48b6:	jne	0x4b45


0x48bc:	add	rsp, 0x58
0x48c0:	pop	rbx
0x48c1:	pop	rbp
0x48c2:	pop	r12
0x48c4:	pop	r13
0x48c6:	pop	r14
0x48c8:	pop	r15
0x48ca:	ret	


0x4b45:	call	0x17e0


0x17e0:	jmp	qword ptr [rip + 0x207682]




0x42ed:	mov	qword ptr [rip + 0x204d6c], rbx
0x42f4:	pop	rbx
0x42f5:	mov	dword ptr [rip + 0x204d59], 1
0x42ff:	pop	rbp
0x4300:	pop	r12
0x4302:	ret	


0x42c7:	mov	qword ptr [rip + 0x204d9e], 0x100
0x42d2:	mov	qword ptr [rip + 0x204d9f], rbx
0x42d9:	lea	rbx, [rip + 0x204d90]
0x42e0:	cmp	r12, rbx
0x42e3:	je	0x42f4


0x52dd:	xor	eax, eax
0x52df:	pop	rbx
0x52e0:	ret	


0x42ac:	cmp	rbx, rbp
0x42af:	jne	0x42a0


0x42a0:	mov	rdi, qword ptr [rbx]
0x42a3:	add	rbx, 0x10
0x42a7:	call	0x16f0


0x4b90:	mov	r9, r13
0x4b93:	mov	r15, rax
0x4b96:	mov	r8, r12
0x4b99:	mov	rcx, rbp
0x4b9c:	mov	rdx, r14
0x4b9f:	mov	rsi, rax
0x4ba2:	mov	rdi, rbx
0x4ba5:	call	0x4790


0x4baa:	test	r15, r15
0x4bad:	mov	r10, rax
0x4bb0:	jne	0x4bf4


0x4bb2:	test	rax, rax
0x4bb5:	mov	qword ptr [rsp + 8], rax
0x4bba:	je	0x4c28


0x4bf4:	add	rsp, 0x18
0x4bf8:	mov	rax, r10
0x4bfb:	pop	rbx
0x4bfc:	pop	rbp
0x4bfd:	pop	r12
0x4bff:	pop	r13
0x4c01:	pop	r14
0x4c03:	pop	r15
0x4c05:	ret	


0x4c28:	xor	r10d, r10d
0x4c2b:	jmp	0x4bf4


0x4bbc:	mov	esi, 0x2e
0x4bc1:	mov	rdi, rbx
0x4bc4:	call	0x1810


0x4bc9:	test	rax, rax
0x4bcc:	mov	r10, qword ptr [rsp + 8]
0x4bd1:	je	0x4bf4


0x4bd3:	mov	r9, r13
0x4bd6:	mov	r8, r12
0x4bd9:	mov	rcx, rbp
0x4bdc:	mov	rdx, r14
0x4bdf:	mov	rsi, rax
0x4be2:	mov	rdi, rbx
0x4be5:	call	0x4790


0x4bea:	test	rax, rax
0x4bed:	mov	r10, qword ptr [rsp + 8]
0x4bf2:	je	0x4c28


0x4c6c:	lea	rsi, [rip + 0x1dd0]
0x4c73:	xor	edi, edi
0x4c75:	mov	edx, 5
0x4c7a:	call	0x17a0


0x4d81:	jmp	0x4c6c


0x52c6:	test	rax, rax
0x52c9:	jne	0x52d0


0x52cb:	test	rbx, rbx
0x52ce:	jne	0x52e1


0x52d0:	pop	rbx
0x52d1:	ret	


0x52e1:	call	0x54a0


0x5c81:	test	eax, eax
0x5c83:	mov	dword ptr [rsp + 4], eax
0x5c87:	js	0x5d38


0x5d38:	call	0x1710


0x5c8d:	cmp	r13d, -1
0x5c91:	setne	bpl
0x5c95:	test	eax, eax
0x5c97:	je	0x5ca2


0x5ca2:	add	eax, 1
0x5ca5:	xor	edi, edi
0x5ca7:	movsxd	rsi, eax
0x5caa:	mov	dword ptr [rsp + 4], eax
0x5cae:	call	0x5b30


0x5c99:	test	bpl, bpl
0x5c9c:	je	0x5d67


0x5d67:	xor	edi, edi
0x5d69:	movsxd	rsi, eax
0x5d6c:	call	0x5b30


0x5e4e:	test	eax, eax
0x5e50:	je	0x5e5a


0x5e52:	test	dword ptr [rbx], 0x100
0x5e58:	jne	0x5e68


0x5e68:	mov	rdi, rbx
0x5e6b:	mov	edx, 1
0x5e70:	xor	esi, esi
0x5e72:	call	0x5e80


0x1af6:	lea	rsi, [rip + 0x4f8c]
0x1afd:	mov	edi, 6
0x1b02:	call	0x1980


0x2c61:	cmp	r15d, 0xa
0x2c65:	mov	qword ptr [rsp + 0x58], rax
0x2c6a:	ja	0x3e1f


0x2c70:	lea	rcx, [rip + 0x3929]
0x2c77:	mov	edx, r15d
0x2c7a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2c7e:	add	rax, rcx
0x2c81:	jmp	rax


0x3e1f:	call	0x1700


0x5d3d:	cmp	dword ptr [rax], 0x26
0x5d40:	jne	0x5d98


0x5d42:	xor	edi, edi
0x5d44:	mov	esi, 4
0x5d49:	call	0x1970


0x5d98:	mov	eax, 0xffffffff
0x5d9d:	jmp	0x5c1d


0x5c1d:	mov	rcx, qword ptr [rsp + 8]
0x5c22:	xor	rcx, qword ptr fs:[0x28]
0x5c2b:	jne	0x5db7


0x5c31:	add	rsp, 0x18
0x5c35:	pop	rbx
0x5c36:	pop	rbp
0x5c37:	pop	r12
0x5c39:	pop	r13
0x5c3b:	pop	r14
0x5c3d:	pop	r15
0x5c3f:	ret	


0x5db7:	call	0x17e0


0x5d4e:	test	rax, rax
0x5d51:	je	0x5d98


0x5d53:	mov	qword ptr [r15], rax
0x5d56:	mov	dword ptr [rax], r13d
0x5d59:	xor	eax, eax
0x5d5b:	cmp	r13d, -1
0x5d5f:	setne	al
0x5d62:	jmp	0x5c1d


0x5b61:	mov	dword ptr [rax], 0xc
0x5b67:	xor	eax, eax
0x5b69:	add	rsp, 8
0x5b6d:	ret	


0x5d71:	test	rax, rax
0x5d74:	mov	rbx, rax
0x5d77:	je	0x5d98


0x5d79:	mov	edi, dword ptr [rsp + 4]
0x5d7d:	mov	rsi, rbx
0x5d80:	call	0x1910


0x5d85:	test	eax, eax
0x5d87:	jns	0x5cea


0x5d8d:	jmp	0x5c01


0x5cea:	cmp	eax, 1
0x5ced:	mov	qword ptr [r15], rbx
0x5cf0:	jle	0x5c1d


0x5c01:	call	0x1710


0x5cf6:	movsxd	rdx, eax
0x5cf9:	mov	edi, dword ptr [rbx]
0x5cfb:	lea	rsi, [rbx + rdx*4]
0x5cff:	lea	rdx, [rbx + 4]
0x5d03:	cmp	rsi, rdx
0x5d06:	ja	0x5d28


0x5d08:	jmp	0x5c1d


0x5d28:	mov	ecx, dword ptr [rdx]
0x5d2a:	cmp	ecx, edi
0x5d2c:	jne	0x5d10


0x5d2e:	sub	eax, 1
0x5d31:	jmp	0x5d1b


0x5d10:	cmp	ecx, dword ptr [rbx]
0x5d12:	je	0x5d2e


0x5d1b:	add	rdx, 4
0x5d1f:	cmp	rsi, rdx
0x5d22:	jbe	0x5c1d


0x5d14:	mov	dword ptr [rbx + 4], ecx
0x5d17:	add	rbx, 4
0x5d1b:	add	rdx, 4
0x5d1f:	cmp	rsi, rdx
0x5d22:	jbe	0x5c1d


0x5cb3:	test	rax, rax
0x5cb6:	mov	rbx, rax
0x5cb9:	je	0x5d98


0x5cbf:	mov	edi, dword ptr [rsp + 4]
0x5cc3:	movzx	ebp, bpl
0x5cc7:	sub	edi, ebp
0x5cc9:	cmp	r13d, -1
0x5ccd:	je	0x5da2


0x5da2:	mov	rsi, rax
0x5da5:	call	0x1910


0x5cd3:	lea	rsi, [rax + 4]
0x5cd7:	call	0x1910


0x5cdc:	test	eax, eax
0x5cde:	js	0x5c01


0x5ce4:	mov	dword ptr [rbx], r13d
0x5ce7:	add	eax, 1
0x5cea:	cmp	eax, 1
0x5ced:	mov	qword ptr [r15], rbx
0x5cf0:	jle	0x5c1d


0x5daa:	test	eax, eax
0x5dac:	jns	0x5cea


0x5db2:	jmp	0x5c01


0x5bc4:	test	rax, rax
0x5bc7:	mov	rbx, rax
0x5bca:	je	0x5d98


0x5bd0:	lea	r14, [rsp + 4]
0x5bd5:	mov	esi, r13d
0x5bd8:	mov	rcx, r14
0x5bdb:	mov	rdx, rbx
0x5bde:	mov	rdi, rbp
0x5be1:	mov	r12d, dword ptr [rsp + 4]
0x5be6:	call	0x19c0


0x19c0:	jmp	qword ptr [rip + 0x207592]




0x5c06:	mov	r12d, dword ptr [rax]
0x5c09:	mov	rbp, rax
0x5c0c:	mov	rdi, rbx
0x5c0f:	call	0x16f0


0x5c14:	mov	eax, 0xffffffff
0x5c19:	mov	dword ptr [rbp], r12d
0x5c1d:	mov	rcx, qword ptr [rsp + 8]
0x5c22:	xor	rcx, qword ptr fs:[0x28]
0x5c2b:	jne	0x5db7


0x5558:	mov	dword ptr [rax], 0
0x555e:	mov	r12, rax
0x5561:	movzx	ebx, byte ptr [rbp]
0x5565:	call	0x1a80


0x1a80:	jmp	qword ptr [rip + 0x207532]




0x3e51:	mov	r13, rax
0x3e54:	mov	eax, dword ptr [rax]
0x3e56:	test	r15d, r15d
0x3e59:	mov	rbx, qword ptr [rip + 0x205200]
0x3e60:	mov	dword ptr [rsp + 0x18], eax
0x3e64:	js	0x3fd1


0x3fd1:	call	0x1700


0x3e6a:	cmp	dword ptr [rip + 0x2051e7], r15d
0x3e71:	jg	0x3ed5


0x3e73:	cmp	r15d, 0x7fffffff
0x3e7a:	je	0x3fd6


0x3ed5:	mov	eax, dword ptr [rbp + 4]
0x3ed8:	shl	r15, 4
0x3edc:	sub	rsp, 8
0x3ee0:	add	rbx, r15
0x3ee3:	lea	r15, [rbp + 8]
0x3ee7:	mov	r8d, dword ptr [rbp]
0x3eeb:	mov	r11, qword ptr [rbx]
0x3eee:	mov	r12, qword ptr [rbx + 8]
0x3ef2:	mov	rcx, r14
0x3ef5:	or	eax, 1
0x3ef8:	mov	dword ptr [rsp + 0x24], eax
0x3efc:	push	qword ptr [rbp + 0x30]
0x3eff:	mov	r9d, eax
0x3f02:	push	qword ptr [rbp + 0x28]
0x3f05:	push	r15
0x3f07:	mov	rsi, r11
0x3f0a:	mov	rdx, qword ptr [rsp + 0x28]
0x3f0f:	mov	rdi, r12
0x3f12:	mov	qword ptr [rsp + 0x30], r11
0x3f17:	call	0x2bf0


0x3fd6:	call	0x54a0


0x3e80:	lea	r12d, [r15 + 1]
0x3e84:	lea	rax, [rip + 0x2051e5]
0x3e8b:	movsxd	rsi, r12d
0x3e8e:	shl	rsi, 4
0x3e92:	cmp	rbx, rax
0x3e95:	je	0x3fb0


0x3fb0:	xor	edi, edi
0x3fb2:	call	0x52b0


0x3e9b:	mov	rdi, rbx
0x3e9e:	call	0x52b0


0x3ea3:	mov	rbx, rax
0x3ea6:	mov	qword ptr [rip + 0x2051b3], rax
0x3ead:	movsxd	rdi, dword ptr [rip + 0x2051a4]
0x3eb4:	mov	edx, r12d
0x3eb7:	xor	esi, esi
0x3eb9:	sub	edx, edi
0x3ebb:	shl	rdi, 4
0x3ebf:	movsxd	rdx, edx
0x3ec2:	add	rdi, rbx
0x3ec5:	shl	rdx, 4
0x3ec9:	call	0x1860


0x1860:	jmp	qword ptr [rip + 0x207642]




0x3fb7:	movdqa	xmm0, xmmword ptr [rip + 0x2050b1]
0x3fbf:	mov	rbx, rax
0x3fc2:	mov	qword ptr [rip + 0x205097], rax
0x3fc9:	movups	xmmword ptr [rax], xmm0
0x3fcc:	jmp	0x3ead


0x3ead:	movsxd	rdi, dword ptr [rip + 0x2051a4]
0x3eb4:	mov	edx, r12d
0x3eb7:	xor	esi, esi
0x3eb9:	sub	edx, edi
0x3ebb:	shl	rdi, 4
0x3ebf:	movsxd	rdx, edx
0x3ec2:	add	rdi, rbx
0x3ec5:	shl	rdx, 4
0x3ec9:	call	0x1860


0x3fec:	mov	r12d, dword ptr [rax]
0x3fef:	mov	rbp, rax
0x3ff2:	lea	rax, [rip + 0x205207]
0x3ff9:	test	rbx, rbx
0x3ffc:	mov	esi, 0x38
0x4001:	cmove	rbx, rax
0x4005:	mov	rdi, rbx
0x4008:	call	0x5450


0x4122:	mov	r12d, dword ptr [rax]
0x4125:	mov	rbp, rax
0x4128:	lea	rax, [rbx + 8]
0x412c:	sub	rsp, 8
0x4130:	mov	r9d, dword ptr [rbx + 4]
0x4134:	push	qword ptr [rbx + 0x30]
0x4137:	mov	r8d, dword ptr [rbx]
0x413a:	push	qword ptr [rbx + 0x28]
0x413d:	mov	rdx, r15
0x4140:	push	rax
0x4141:	mov	rcx, qword ptr [rsp + 0x28]
0x4146:	mov	rsi, r14
0x4149:	mov	rdi, r13
0x414c:	call	0x2bf0


0x419f:	test	r12, r12
0x41a2:	mov	r13, rax
0x41a5:	mov	eax, dword ptr [rax]
0x41a7:	sete	bpl
0x41ab:	or	ebp, dword ptr [rbx + 4]
0x41ae:	lea	r10, [rbx + 8]
0x41b2:	sub	rsp, 8
0x41b6:	mov	r8d, dword ptr [rbx]
0x41b9:	mov	rcx, r15
0x41bc:	mov	dword ptr [rsp + 0x14], eax
0x41c0:	push	qword ptr [rbx + 0x30]
0x41c3:	mov	rdx, r14
0x41c6:	push	qword ptr [rbx + 0x28]
0x41c9:	push	r10
0x41cb:	xor	esi, esi
0x41cd:	mov	r9d, ebp
0x41d0:	xor	edi, edi
0x41d2:	mov	qword ptr [rsp + 0x40], r10
0x41d7:	call	0x2bf0


0x5259:	test	rax, rax
0x525c:	jne	0x5263


0x525e:	test	rbx, rbx
0x5261:	jne	0x5265


0x5263:	pop	rbx
0x5264:	ret	


0x5265:	call	0x54a0


0x5409:	mov	rdx, rbx
0x540c:	xor	esi, esi
0x540e:	mov	rdi, rax
0x5411:	pop	rbx
0x5412:	jmp	0x1860


0x5464:	add	rsp, 8
0x5468:	mov	rdx, rbx
0x546b:	mov	rsi, rbp
0x546e:	pop	rbx
0x546f:	pop	rbp
0x5470:	mov	rdi, rax
0x5473:	jmp	0x18e0


0x18e0:	jmp	qword ptr [rip + 0x207602]




0x5489:	mov	rdi, rbx
0x548c:	lea	rsi, [rax + 1]
0x5490:	pop	rbx
0x5491:	jmp	0x5450


0x4c7f:	lea	rdx, [rip + 0x20da]
0x4c86:	mov	rcx, rax
0x4c89:	mov	r8d, 0x7e3
0x4c8f:	mov	esi, 1
0x4c94:	mov	rdi, rbp
0x4c97:	xor	eax, eax
0x4c99:	call	0x1a40


0x4c9e:	lea	rsi, [rip + 0x1e2b]
0x4ca5:	xor	edi, edi
0x4ca7:	mov	edx, 5
0x4cac:	call	0x17a0


0x4cb1:	mov	rsi, rbp
0x4cb4:	mov	rdi, rax
0x4cb7:	call	0x18a0


0x18a0:	jmp	qword ptr [rip + 0x207622]




0x4a0e:	jmp	0x48a8


0x48a8:	mov	rdx, qword ptr [rsp + 0x48]
0x48ad:	xor	rdx, qword ptr fs:[0x28]
0x48b6:	jne	0x4b45


0x25dd:	mov	rdi, qword ptr [rip + 0x206adc]
0x25e4:	mov	rdx, rax
0x25e7:	mov	rcx, rbx
0x25ea:	mov	esi, 1
0x25ef:	xor	eax, eax
0x25f1:	call	0x1a40


0x25f6:	mov	edi, ebp
0x25f8:	call	0x1a20


0x1a20:	jmp	qword ptr [rip + 0x207562]




0x260b:	mov	rcx, rbx
0x260e:	mov	rdx, rbx
0x2611:	mov	rsi, rax
0x2614:	mov	edi, 1
0x2619:	xor	eax, eax
0x261b:	call	0x1990


0x1990:	jmp	qword ptr [rip + 0x2075aa]




0x51e4:	lea	rdx, [rip + 0x18b4]
0x51eb:	mov	rsi, rax
0x51ee:	mov	edi, 1
0x51f3:	xor	eax, eax
0x51f5:	call	0x1990


0x54b7:	mov	edi, dword ptr [rip + 0x203b5b]
0x54bd:	lea	rdx, [rip + 0x101b]
0x54c4:	mov	rcx, rax
0x54c7:	xor	esi, esi
0x54c9:	xor	eax, eax
0x54cb:	call	0x19a0


0x19a0:	jmp	qword ptr [rip + 0x2075a2]




0x54e6:	cmp	eax, -1
0x54e9:	mov	ebx, eax
0x54eb:	je	0x54f8


0x54f8:	call	0x1710


0x54ed:	mov	eax, ebx
0x54ef:	pop	rbx
0x54f0:	ret	


0x54fd:	cmp	dword ptr [rax], 0xc
0x5500:	jne	0x54ed


0x5502:	call	0x54a0


0x5967:	cmp	rax, -3
0x596b:	mov	rbp, rax
0x596e:	jbe	0x5990


0x5990:	mov	rdx, qword ptr [rsp + 8]
0x5995:	xor	rdx, qword ptr fs:[0x28]
0x599e:	mov	rax, rbp
0x59a1:	jne	0x59ae


0x5970:	test	r12, r12
0x5973:	je	0x5990


0x59a3:	add	rsp, 0x18
0x59a7:	pop	rbx
0x59a8:	pop	rbp
0x59a9:	pop	r12
0x59ab:	pop	r13
0x59ad:	ret	


0x59ae:	call	0x17e0


0x5975:	xor	edi, edi
0x5977:	call	0x5a40


0x59cc:	mov	ebx, dword ptr [rbp]
0x59cf:	mov	rdi, rbp
0x59d2:	mov	r12, rax
0x59d5:	call	0x5dc0


0x1b07:	lea	rsi, [rip + 0x4551]
0x1b0e:	lea	rdi, [rip + 0x4519]
0x1b15:	call	0x1790


0x1790:	jmp	qword ptr [rip + 0x2076aa]




0x5a4b:	mov	rdx, rax
0x5a4e:	mov	eax, 1
0x5a53:	test	rdx, rdx
0x5a56:	je	0x5a75


0x5a75:	add	rsp, 8
0x5a79:	ret	


0x5a58:	lea	rdi, [rip + 0x146a]
0x5a5f:	mov	ecx, 2
0x5a64:	mov	rsi, rdx
0x5a67:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5a67:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5a69:	seta	cl
0x5a6c:	sbb	cl, 0
0x5a6f:	xor	eax, eax
0x5a71:	test	cl, cl
0x5a73:	jne	0x5a80


0x5a80:	lea	rdi, [rip + 0x1444]
0x5a87:	mov	ecx, 6
0x5a8c:	mov	rsi, rdx
0x5a8f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5a8f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5a91:	seta	al
0x5a94:	sbb	al, 0
0x5a96:	test	al, al
0x5a98:	setne	al
0x5a9b:	add	rsp, 8
0x5a9f:	ret	


0x597c:	test	al, al
0x597e:	jne	0x5990


0x5980:	movzx	eax, byte ptr [r13]
0x5985:	mov	ebp, 1
0x598a:	mov	dword ptr [rbx], eax
0x598c:	nop	dword ptr [rax]
0x5990:	mov	rdx, qword ptr [rsp + 8]
0x5995:	xor	rdx, qword ptr fs:[0x28]
0x599e:	mov	rax, rbp
0x59a1:	jne	0x59ae


0x5afe:	test	rax, rax
0x5b01:	je	0x5b20


0x5b20:	lea	rax, [rip + 0x13aa]
0x5b27:	add	rsp, 8
0x5b2b:	ret	


0x5b03:	cmp	byte ptr [rax], 0
0x5b06:	lea	rdx, [rip + 0x13c4]
0x5b0d:	cmove	rax, rdx
0x5b11:	add	rsp, 8
0x5b15:	ret	


0x2b10:	movzx	edx, byte ptr [rax]
0x2b13:	and	edx, 0xffffffdf
0x2b16:	cmp	dl, 0x55
0x2b19:	je	0x2b90


0x2b90:	movzx	edx, byte ptr [rax + 1]
0x2b94:	and	edx, 0xffffffdf
0x2b97:	cmp	dl, 0x54
0x2b9a:	jne	0x2b20


0x2b1b:	cmp	dl, 0x47
0x2b1e:	je	0x2b40


0x2b9c:	movzx	edx, byte ptr [rax + 2]
0x2ba0:	and	edx, 0xffffffdf
0x2ba3:	cmp	dl, 0x46
0x2ba6:	jne	0x2b20


0x2b20:	lea	rax, [rip + 0x3a14]
0x2b27:	lea	rdx, [rip + 0x3a0f]
0x2b2e:	cmp	ebx, 9
0x2b31:	cmovne	rax, rdx
0x2b35:	add	rsp, 8
0x2b39:	pop	rbx
0x2b3a:	pop	rbp
0x2b3b:	ret	


0x2b40:	movzx	edx, byte ptr [rax + 1]
0x2b44:	and	edx, 0xffffffdf
0x2b47:	cmp	dl, 0x42
0x2b4a:	jne	0x2b20


0x2bac:	cmp	byte ptr [rax + 3], 0x2d
0x2bb0:	jne	0x2b20


0x2b4c:	cmp	byte ptr [rax + 2], 0x31
0x2b50:	jne	0x2b20


0x2bb6:	cmp	byte ptr [rax + 4], 0x38
0x2bba:	jne	0x2b20


0x2b52:	cmp	byte ptr [rax + 3], 0x38
0x2b56:	jne	0x2b20


0x2bc0:	cmp	byte ptr [rax + 5], 0
0x2bc4:	jne	0x2b20


0x2b58:	cmp	byte ptr [rax + 4], 0x30
0x2b5c:	jne	0x2b20


0x2bca:	cmp	byte ptr [rbp], 0x60
0x2bce:	lea	rax, [rip + 0x3957]
0x2bd5:	lea	rdx, [rip + 0x3954]
0x2bdc:	cmovne	rax, rdx
0x2be0:	add	rsp, 8
0x2be4:	pop	rbx
0x2be5:	pop	rbp
0x2be6:	ret	


0x2b5e:	cmp	byte ptr [rax + 5], 0x33
0x2b62:	jne	0x2b20


0x2b64:	cmp	byte ptr [rax + 6], 0x30
0x2b68:	jne	0x2b20


0x2b6a:	cmp	byte ptr [rax + 7], 0
0x2b6e:	jne	0x2b20


0x2b70:	cmp	byte ptr [rbp], 0x60
0x2b74:	lea	rax, [rip + 0x39b9]
0x2b7b:	lea	rdx, [rip + 0x39b6]
0x2b82:	cmovne	rax, rdx
0x2b86:	add	rsp, 8
0x2b8a:	pop	rbx
0x2b8b:	pop	rbp
0x2b8c:	ret	


0x5eb3:	mov	edx, r12d
0x5eb6:	mov	rsi, rbp
0x5eb9:	mov	edi, eax
0x5ebb:	call	0x1840


0x1840:	jmp	qword ptr [rip + 0x207652]




0x5dcc:	test	eax, eax
0x5dce:	mov	rdi, rbx
0x5dd1:	js	0x5e27


0x5e27:	pop	rbx
0x5e28:	pop	rbp
0x5e29:	pop	r12
0x5e2b:	jmp	0x1770


0x5dd3:	call	0x1960


0x1770:	jmp	qword ptr [rip + 0x2076ba]




0x5dd8:	test	eax, eax
0x5dda:	jne	0x5e08


0x5ddc:	mov	rdi, rbx
0x5ddf:	call	0x5e40


0x5e08:	mov	rdi, rbx
0x5e0b:	call	0x1900


0x5e10:	xor	esi, esi
0x5e12:	mov	edx, 1
0x5e17:	mov	edi, eax
0x5e19:	call	0x1840


0x5e1e:	cmp	rax, -1
0x5e22:	jne	0x5ddc


0x5e24:	mov	rdi, rbx
0x5e27:	pop	rbx
0x5e28:	pop	rbp
0x5e29:	pop	r12
0x5e2b:	jmp	0x1770


0x5ec0:	cmp	rax, -1
0x5ec4:	je	0x5ed2


0x5ed2:	pop	rbx
0x5ed3:	pop	rbp
0x5ed4:	pop	r12
0x5ed6:	ret	


0x5ec6:	and	dword ptr [rbx], 0xffffffef
0x5ec9:	mov	qword ptr [rbx + 0x90], rax
0x5ed0:	xor	eax, eax
0x5ed2:	pop	rbx
0x5ed3:	pop	rbp
0x5ed4:	pop	r12
0x5ed6:	ret	


0x1b1a:	lea	rdi, [rip + 0x450d]
0x1b21:	call	0x1760


0x1760:	jmp	qword ptr [rip + 0x2076c2]




0x54d0:	call	0x1700


0x51fa:	lea	rsi, [rip + 0x18b4]
0x5201:	mov	edx, 5
0x5206:	xor	edi, edi
0x5208:	call	0x17a0


0x520d:	lea	rcx, [rip + 0x111c]
0x5214:	lea	rdx, [rip + 0xe0f]
0x521b:	mov	rsi, rax
0x521e:	mov	edi, 1
0x5223:	xor	eax, eax
0x5225:	call	0x1990


0x522a:	mov	rbx, qword ptr [rip + 0x203e57]
0x5231:	lea	rsi, [rip + 0x1ab0]
0x5238:	xor	edi, edi
0x523a:	mov	edx, 5
0x523f:	call	0x17a0


0x5244:	mov	rsi, rbx
0x5247:	mov	rdi, rax
0x524a:	pop	rbx
0x524b:	jmp	0x18a0


0x2620:	mov	rbx, qword ptr [rip + 0x206a61]
0x2627:	lea	rsi, [rip + 0x3b4a]
0x262e:	mov	edx, 5
0x2633:	xor	edi, edi
0x2635:	call	0x17a0


0x263a:	mov	rsi, rbx
0x263d:	mov	rdi, rax
0x2640:	call	0x18a0


0x2645:	mov	rbx, qword ptr [rip + 0x206a3c]
0x264c:	lea	rsi, [rip + 0x3b5d]
0x2653:	mov	edx, 5
0x2658:	xor	edi, edi
0x265a:	call	0x17a0


0x265f:	mov	rsi, rbx
0x2662:	mov	rdi, rax
0x2665:	call	0x18a0


0x266a:	mov	rbx, qword ptr [rip + 0x206a17]
0x2671:	lea	rsi, [rip + 0x3b80]
0x2678:	mov	edx, 5
0x267d:	xor	edi, edi
0x267f:	call	0x17a0


0x2684:	mov	rsi, rbx
0x2687:	mov	rdi, rax
0x268a:	call	0x18a0


0x268f:	lea	rsi, [rip + 0x3e90]
0x2696:	mov	edi, 4
0x269b:	call	0x44a0


0x4cbc:	cmp	r12, 9
0x4cc0:	ja	0x5000


0x4cc6:	lea	rdx, [rip + 0x205f]
0x4ccd:	movsxd	rax, dword ptr [rdx + r12*4]
0x4cd1:	add	rax, rdx
0x4cd4:	jmp	rax


0x5000:	mov	r10, qword ptr [rbx + 0x40]
0x5004:	mov	r9, qword ptr [rbx + 0x38]
0x5008:	mov	edx, 5
0x500d:	mov	rax, qword ptr [rbx + 0x10]
0x5011:	mov	r8, qword ptr [rbx + 8]
0x5015:	lea	rsi, [rip + 0x1c8c]
0x501c:	mov	r13, qword ptr [rbx + 0x30]
0x5020:	mov	r12, qword ptr [rbx + 0x28]
0x5024:	mov	r15, qword ptr [rbx + 0x20]
0x5028:	mov	r14, qword ptr [rbx + 0x18]
0x502c:	mov	qword ptr [rsp + 0x18], r10
0x5031:	mov	qword ptr [rsp + 0x10], r9
0x5036:	mov	qword ptr [rsp], rax
0x503a:	mov	qword ptr [rsp + 8], r8
0x503f:	mov	rbx, qword ptr [rbx]
0x5042:	jmp	0x4dd2


0x4dd2:	xor	edi, edi
0x4dd4:	call	0x17a0


0x4dd9:	mov	r10, qword ptr [rsp + 0x18]
0x4dde:	push	r10
0x4de0:	jmp	0x4d24


0x4d24:	mov	r9, qword ptr [rsp + 0x18]
0x4d29:	mov	rdx, rax
0x4d2c:	mov	rcx, rbx
0x4d2f:	mov	esi, 1
0x4d34:	mov	rdi, rbp
0x4d37:	xor	eax, eax
0x4d39:	push	r9
0x4d3b:	push	r13
0x4d3d:	push	r12
0x4d3f:	push	r15
0x4d41:	push	r14
0x4d43:	mov	r9, qword ptr [rsp + 0x30]
0x4d48:	mov	r8, qword ptr [rsp + 0x38]
0x4d4d:	call	0x1a40


0x4d52:	add	rsp, 0x30
0x4d56:	add	rsp, 0x28
0x4d5a:	pop	rbx
0x4d5b:	pop	rbp
0x4d5c:	pop	r12
0x4d5e:	pop	r13
0x4d60:	pop	r14
0x4d62:	pop	r15
0x4d64:	ret	


0x3ece:	mov	dword ptr [rip + 0x205183], r12d
0x3ed5:	mov	eax, dword ptr [rbp + 4]
0x3ed8:	shl	r15, 4
0x3edc:	sub	rsp, 8
0x3ee0:	add	rbx, r15
0x3ee3:	lea	r15, [rbp + 8]
0x3ee7:	mov	r8d, dword ptr [rbp]
0x3eeb:	mov	r11, qword ptr [rbx]
0x3eee:	mov	r12, qword ptr [rbx + 8]
0x3ef2:	mov	rcx, r14
0x3ef5:	or	eax, 1
0x3ef8:	mov	dword ptr [rsp + 0x24], eax
0x3efc:	push	qword ptr [rbp + 0x30]
0x3eff:	mov	r9d, eax
0x3f02:	push	qword ptr [rbp + 0x28]
0x3f05:	push	r15
0x3f07:	mov	rsi, r11
0x3f0a:	mov	rdx, qword ptr [rsp + 0x28]
0x3f0f:	mov	rdi, r12
0x3f12:	mov	qword ptr [rsp + 0x30], r11
0x3f17:	call	0x2bf0


0x556a:	mov	edx, dword ptr [rsp + 8]
0x556e:	mov	rsi, qword ptr [rax]
0x5571:	mov	rax, rbp
0x5574:	jmp	0x5587


0x5587:	movzx	ecx, bl
0x558a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x558f:	jne	0x5580


0x5591:	cmp	bl, 0x2d
0x5594:	je	0x55e8


0x5580:	add	rax, 1
0x5584:	movzx	ebx, byte ptr [rax]
0x5587:	movzx	ecx, bl
0x558a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x558f:	jne	0x5580


0x55e8:	mov	ebp, 4
0x55ed:	mov	rdi, qword ptr [rsp + 0x18]
0x55f2:	xor	rdi, qword ptr fs:[0x28]
0x55fb:	mov	eax, ebp
0x55fd:	jne	0x5890


0x5596:	mov	rsi, r15
0x5599:	mov	rdi, rbp
0x559c:	call	0x19f0


0x5603:	add	rsp, 0x28
0x5607:	pop	rbx
0x5608:	pop	rbp
0x5609:	pop	r12
0x560b:	pop	r13
0x560d:	pop	r14
0x560f:	pop	r15
0x5611:	ret	


0x5890:	call	0x17e0


0x19f0:	jmp	qword ptr [rip + 0x20757a]




0x5beb:	test	eax, eax
0x5bed:	movsxd	rsi, dword ptr [rsp + 4]
0x5bf2:	js	0x5c40


0x5c40:	cmp	esi, r12d
0x5c43:	jne	0x5c4e


0x5bf4:	mov	rdi, rbx
0x5bf7:	call	0x5b30


0x5c45:	add	esi, esi
0x5c47:	mov	dword ptr [rsp + 4], esi
0x5c4b:	movsxd	rsi, esi
0x5c4e:	mov	rdi, rbx
0x5c51:	call	0x5b30


0x5c4e:	mov	rdi, rbx
0x5c51:	call	0x5b30


0x5c56:	test	rax, rax
0x5c59:	je	0x5c01


0x5c5b:	mov	rbx, rax
0x5c5e:	jmp	0x5bd5


0x5bd5:	mov	esi, r13d
0x5bd8:	mov	rcx, r14
0x5bdb:	mov	rdx, rbx
0x5bde:	mov	rdi, rbp
0x5be1:	mov	r12d, dword ptr [rsp + 4]
0x5be6:	call	0x19c0


0x5bfc:	test	rax, rax
0x5bff:	jne	0x5c68


0x5c68:	mov	qword ptr [r15], rax
0x5c6b:	mov	eax, dword ptr [rsp + 4]
0x5c6f:	jmp	0x5c1d


0x5e77:	mov	rdi, rbx
0x5e7a:	pop	rbx
0x5e7b:	jmp	0x1930


0x485c:	mov	rdi, qword ptr [rsp + 8]
0x4861:	call	0x5480


0x49cd:	test	eax, eax
0x49cf:	je	0x4a28


0x4a28:	mov	rax, qword ptr [rsp + 0x28]
0x4a2d:	mov	edx, 0xfffffffe
0x4a32:	cmp	rax, rdx
0x4a35:	mov	r15d, eax
0x4a38:	jbe	0x4857


0x49d1:	call	0x16d0


0x4857:	call	0x16d0


0x4a3e:	jmp	0x49d1


0x49d6:	mov	rdi, qword ptr [rsp + 8]
0x49db:	call	0x5480


0x400d:	mov	dword ptr [rbp], r12d
0x4011:	pop	rbx
0x4012:	pop	rbp
0x4013:	pop	r12
0x4015:	ret	


0x48dd:	mov	r10, qword ptr [rsp]
0x48e1:	mov	byte ptr [rax + rbx], 0
0x48e5:	mov	rbp, rax
0x48e8:	cmp	byte ptr [r10 + 1], 0
0x48ed:	jne	0x4a40


0x48f3:	test	rbp, rbp
0x48f6:	je	0x4a18


0x4a40:	mov	rax, r10
0x4a43:	add	rax, 1
0x4a47:	setne	byte ptr [rsp + 0x1e]
0x4a4c:	test	rbp, rbp
0x4a4f:	mov	qword ptr [rsp + 8], rax
0x4a54:	je	0x4b4a


0x48fc:	mov	byte ptr [rsp + 0x1e], 0
0x4901:	mov	eax, 1
0x4906:	mov	qword ptr [rsp + 8], 0
0x490f:	test	r10, r10
0x4912:	setne	r9b
0x4916:	and	r9d, eax
0x4919:	cmp	byte ptr [rbp], 0x2b
0x491d:	je	0x4960


0x4b4a:	xor	ebx, ebx
0x4b4c:	mov	qword ptr [rsp], 0
0x4b54:	jmp	0x4827


0x4a5a:	test	rax, rax
0x4a5d:	sete	al
0x4a60:	jmp	0x490f


0x4960:	test	r9b, r9b
0x4963:	je	0x4aa0


0x491f:	mov	rdi, rbp
0x4922:	mov	byte ptr [rsp], r9b
0x4926:	call	0x18d0


0x4827:	cmp	byte ptr [rsp + 0x1e], 0
0x482c:	je	0x4b20


0x490f:	test	r10, r10
0x4912:	setne	r9b
0x4916:	and	r9d, eax
0x4919:	cmp	byte ptr [rbp], 0x2b
0x491d:	je	0x4960


0x4aa0:	lea	rcx, [rsp + 0x28]
0x4aa5:	lea	r8, [rip + 0x1fdd]
0x4aac:	xor	esi, esi
0x4aae:	mov	edx, 0xa
0x4ab3:	mov	rdi, rbp
0x4ab6:	mov	byte ptr [rsp + 0x1f], r9b
0x4abb:	call	0x5510


0x4969:	lea	rax, [rip + 0x20a5]
0x4970:	mov	byte ptr [rsp + 0x1e], 0
0x4975:	xor	ebx, ebx
0x4977:	mov	qword ptr [rsp], rax
0x497b:	call	0x1950


0x18d0:	jmp	qword ptr [rip + 0x20760a]


0x1950:	jmp	qword ptr [rip + 0x2075ca]






0x4ac0:	lea	rsi, [rip + 0x1f41]
0x4ac7:	test	eax, eax
0x4ac9:	movzx	r9d, byte ptr [rsp + 0x1f]
0x4acf:	mov	qword ptr [rsp], rsi
0x4ad3:	jne	0x4b06


0x4ad5:	mov	rax, qword ptr [rsp + 0x28]
0x4ada:	movzx	ecx, byte ptr [rsp + 0x1e]
0x4adf:	mov	edx, 0xfffffffe
0x4ae4:	cmp	rax, rdx
0x4ae7:	cmova	ecx, r9d
0x4aeb:	mov	r9d, ecx
0x4aee:	mov	ecx, dword ptr [rsp + 0x18]
0x4af2:	cmovbe	ecx, eax
0x4af5:	mov	eax, 0
0x4afa:	cmova	rax, rsi
0x4afe:	mov	dword ptr [rsp + 0x18], ecx
0x4b02:	mov	qword ptr [rsp], rax
0x4b06:	mov	byte ptr [rsp + 0x1e], r9b
0x4b0b:	xor	ebx, ebx
0x4b0d:	call	0x1950


0x4b06:	mov	byte ptr [rsp + 0x1e], r9b
0x4b0b:	xor	ebx, ebx
0x4b0d:	call	0x1950


0x5196:	mov	rax, qword ptr [rsp + 0x78]
0x519b:	xor	rax, qword ptr fs:[0x28]
0x51a4:	jne	0x51b0


0x51a6:	add	rsp, 0xb8
0x51ad:	pop	rbx
0x51ae:	pop	rbp
0x51af:	ret	


0x51b0:	call	0x17e0


0x50c0:	mov	rax, qword ptr [rsp + 0x58]
0x50c5:	xor	rax, qword ptr fs:[0x28]
0x50ce:	jne	0x50d5


0x50d0:	add	rsp, 0x68
0x50d4:	ret	


0x50d5:	call	0x17e0


0x49e0:	mov	rbx, rax
0x49e3:	lea	rax, [rip + 0x2038]
0x49ea:	mov	qword ptr [rsp], rax
0x49ee:	mov	rdi, rbp
0x49f1:	call	0x16f0


0x4866:	mov	rbx, rax
0x4869:	mov	r10, rbp
0x486c:	mov	rax, qword ptr [rsp + 0x10]
0x4871:	mov	esi, dword ptr [rsp + 0x18]
0x4875:	test	r12, r12
0x4878:	mov	dword ptr [rax], esi
0x487a:	je	0x4880


0x499c:	mov	r10, qword ptr [rsp]
0x49a0:	mov	rbp, rax
0x49a3:	jmp	0x48f3


0x2373:	lea	rsi, [rip + 0x3c0a]
0x237a:	mov	rdi, rax
0x237d:	mov	qword ptr [rsp + 0x18], rax
0x2382:	call	0x19e0


0x19e0:	jmp	qword ptr [rip + 0x207582]




0x2387:	test	rax, rax
0x238a:	je	0x254b


0x254b:	xor	ebp, ebp
0x254d:	cmp	byte ptr [rsp + 0x3c], 0
0x2552:	je	0x245b


0x2390:	mov	r15, rax
0x2393:	lea	rax, [rsp + 0x48]
0x2398:	lea	r13, [rsp + 0x50]
0x239d:	lea	r12, [rip + 0x46e5]
0x23a4:	mov	dword ptr [rsp + 8], 0
0x23ac:	xor	ebx, ebx
0x23ae:	xor	ebp, ebp
0x23b0:	mov	qword ptr [rsp + 0x28], rax
0x23b5:	mov	r14d, 0xffffffff
0x23bb:	xor	esi, esi
0x23bd:	mov	r8, r12
0x23c0:	mov	rcx, r13
0x23c3:	mov	edx, 0xa
0x23c8:	mov	rdi, r15
0x23cb:	call	0x5510


0x245b:	mov	rax, qword ptr [rsp + 0x10]
0x2460:	mov	dword ptr [rsp + 8], 0xffffffff
0x2468:	mov	qword ptr [rax], rbp
0x246b:	mov	rdi, qword ptr [rsp + 0x18]
0x2470:	call	0x16f0


0x2558:	mov	rdi, qword ptr [rsp + 0x30]
0x255d:	call	0x4770


0x2475:	mov	rsi, qword ptr [rsp + 0x58]
0x247a:	xor	rsi, qword ptr fs:[0x28]
0x2483:	mov	eax, dword ptr [rsp + 8]
0x2487:	jne	0x259b


0x248d:	add	rsp, 0x68
0x2491:	pop	rbx
0x2492:	pop	rbp
0x2493:	pop	r12
0x2495:	pop	r13
0x2497:	pop	r14
0x2499:	pop	r15
0x249b:	ret	


0x259b:	call	0x17e0


0x23d0:	test	eax, eax
0x23d2:	jne	0x23df


0x23d4:	cmp	qword ptr [rsp + 0x50], r14
0x23d9:	jbe	0x24a0


0x23df:	mov	rdi, r15
0x23e2:	call	0x18f0


0x24a0:	call	0x1a80


0x24a5:	mov	rcx, qword ptr [rax]
0x24a8:	jmp	0x24b4


0x24b4:	movzx	edx, byte ptr [r15]
0x24b8:	test	byte ptr [rcx + rdx*2 + 1], 0x20
0x24bd:	jne	0x24b0


0x24bf:	cmp	dl, 0x2b
0x24c2:	je	0x23f4


0x24b0:	add	r15, 1
0x24b4:	movzx	edx, byte ptr [r15]
0x24b8:	test	byte ptr [rcx + rdx*2 + 1], 0x20
0x24bd:	jne	0x24b0


0x23f4:	cmp	qword ptr [rsp + 0x48], rbx
0x23f9:	je	0x24de


0x24c8:	mov	rdi, r15
0x24cb:	call	0x18f0


0x24de:	mov	rsi, qword ptr [rsp + 0x28]
0x24e3:	mov	rdi, rbp
0x24e6:	mov	edx, 4
0x24eb:	call	0x5320


0x23ff:	mov	rax, qword ptr [rsp + 0x50]
0x2404:	mov	dword ptr [rbp + rbx*4], eax
0x2408:	add	rbx, 1
0x240c:	lea	rsi, [rip + 0x3b71]
0x2413:	xor	edi, edi
0x2415:	call	0x19e0


0x241a:	test	rax, rax
0x241d:	mov	r15, rax
0x2420:	jne	0x23bb


0x2422:	cmp	dword ptr [rsp + 8], 0
0x2427:	je	0x24f8


0x23bb:	xor	esi, esi
0x23bd:	mov	r8, r12
0x23c0:	mov	rcx, r13
0x23c3:	mov	edx, 0xa
0x23c8:	mov	rdi, r15
0x23cb:	call	0x5510


0x24f8:	test	rbx, rbx
0x24fb:	jne	0x242d


0x242d:	cmp	dword ptr [rsp + 8], 0
0x2432:	mov	rax, qword ptr [rsp + 0x10]
0x2437:	mov	qword ptr [rax], rbp
0x243a:	jne	0x258e


0x2501:	jmp	0x254d


0x2440:	mov	rax, qword ptr [rsp + 0x20]
0x2445:	mov	qword ptr [rax], rbx
0x2448:	jmp	0x246b


0x258e:	mov	dword ptr [rsp + 8], 0xffffffff
0x2596:	jmp	0x246b


0x254d:	cmp	byte ptr [rsp + 0x3c], 0
0x2552:	je	0x245b


0x246b:	mov	rdi, qword ptr [rsp + 0x18]
0x2470:	call	0x16f0


0x24d0:	test	rax, rax
0x24d3:	jne	0x23ec


0x24d9:	jmp	0x23f4


0x23ec:	mov	eax, dword ptr [rax + 0x10]
0x23ef:	mov	qword ptr [rsp + 0x50], rax
0x23f4:	cmp	qword ptr [rsp + 0x48], rbx
0x23f9:	je	0x24de


0x23e7:	test	rax, rax
0x23ea:	je	0x2450


0x2450:	cmp	byte ptr [rsp + 0x3b], 0
0x2455:	jne	0x2503


0x2503:	mov	rdi, r15
0x2506:	call	0x4770


0x4b12:	jmp	0x4827


0x4980:	jmp	0x4827


0x492b:	test	rax, rax
0x492e:	movzx	r9d, byte ptr [rsp]
0x4933:	je	0x4960


0x4935:	mov	ecx, dword ptr [rax + 0x10]
0x4938:	xor	ebx, ebx
0x493a:	test	r9b, r9b
0x493d:	mov	qword ptr [rsp], 0
0x4945:	mov	dword ptr [rsp + 0x18], ecx
0x4949:	jne	0x4a68


0x494f:	call	0x1950


0x4a68:	mov	r15d, dword ptr [rax + 0x14]
0x4a6c:	mov	edi, r15d
0x4a6f:	call	0x1820


0x1820:	jmp	qword ptr [rip + 0x207662]




0x4954:	jmp	0x4827


0x55a1:	mov	rcx, qword ptr [r15]
0x55a4:	mov	rbx, rax
0x55a7:	cmp	rcx, rbp
0x55aa:	je	0x55d8


0x55d8:	test	r13, r13
0x55db:	mov	qword ptr [rsp + 8], rcx
0x55e0:	jne	0x5620


0x55ac:	mov	eax, dword ptr [r12]
0x55b0:	test	eax, eax
0x55b2:	je	0x5618


0x5620:	movzx	r12d, byte ptr [rbp]
0x5625:	test	r12b, r12b
0x5628:	je	0x55e8


0x5618:	xor	ebp, ebp
0x561a:	jmp	0x55be


0x55b4:	cmp	eax, 0x22
0x55b7:	mov	ebp, 1
0x55bc:	jne	0x55e8


0x562a:	movsx	esi, r12b
0x562e:	mov	rdi, r13
0x5631:	xor	ebp, ebp
0x5633:	call	0x1810


0x55be:	test	r13, r13
0x55c1:	je	0x55cc


0x55cc:	mov	qword ptr [r14], rbx
0x55cf:	jmp	0x55ed


0x55c3:	movzx	r12d, byte ptr [rcx]
0x55c7:	test	r12b, r12b
0x55ca:	jne	0x5647


0x55ed:	mov	rdi, qword ptr [rsp + 0x18]
0x55f2:	xor	rdi, qword ptr fs:[0x28]
0x55fb:	mov	eax, ebp
0x55fd:	jne	0x5890


0x5647:	movsx	esi, r12b
0x564b:	mov	rdi, r13
0x564e:	mov	qword ptr [rsp + 8], rcx
0x5653:	call	0x1810


0x5658:	test	rax, rax
0x565b:	mov	rcx, qword ptr [rsp + 8]
0x5660:	je	0x572c


0x572c:	mov	qword ptr [r14], rbx
0x572f:	or	ebp, 2
0x5732:	jmp	0x55ed


0x5666:	lea	eax, [r12 - 0x45]
0x566b:	cmp	al, 0x2f
0x566d:	ja	0x56c0


0x566f:	movabs	rdx, 0x814400308945
0x5679:	bt	rdx, rax
0x567d:	jae	0x56c0


0x56c0:	mov	edi, 1
0x56c5:	mov	esi, 0x400
0x56ca:	sub	r12d, 0x42
0x56ce:	cmp	r12b, 0x35
0x56d2:	ja	0x572c


0x567f:	mov	esi, 0x30
0x5684:	mov	rdi, r13
0x5687:	mov	qword ptr [rsp + 8], rcx
0x568c:	call	0x1810


0x56d4:	lea	rdx, [rip + 0x170d]
0x56db:	movzx	r12d, r12b
0x56df:	movsxd	rax, dword ptr [rdx + r12*4]
0x56e3:	add	rax, rdx
0x56e6:	jmp	rax


0x5691:	test	rax, rax
0x5694:	mov	rcx, qword ptr [rsp + 8]
0x5699:	je	0x56c0


0x569b:	movzx	eax, byte ptr [rcx + 1]
0x569f:	cmp	al, 0x44
0x56a1:	je	0x56af


0x56af:	mov	edi, 2
0x56b4:	mov	esi, 0x3e8
0x56b9:	jmp	0x56ca


0x56a3:	cmp	al, 0x69
0x56a5:	je	0x5878


0x56ca:	sub	r12d, 0x42
0x56ce:	cmp	r12b, 0x35
0x56d2:	ja	0x572c


0x5878:	xor	edi, edi
0x587a:	cmp	byte ptr [rcx + 2], 0x42
0x587e:	mov	esi, 0x400
0x5883:	sete	dil
0x5887:	lea	edi, [rdi + rdi + 1]
0x588b:	jmp	0x56ca


0x56ab:	cmp	al, 0x42
0x56ad:	jne	0x56c0


0x5638:	test	rax, rax
0x563b:	mov	ebx, 1
0x5640:	mov	rcx, qword ptr [rsp + 8]
0x5645:	je	0x55e8


0x1b26:	lea	rdi, [rip + 0xe83]
0x1b2d:	mov	dword ptr [rip + 0x2074e1], 0x7d
0x1b37:	call	0x5f60


0x1b3c:	lea	rcx, [rip + 0x206f7d]
0x1b43:	lea	rdx, [rip + 0x453c]
0x1b4a:	xor	r8d, r8d
0x1b4d:	mov	rsi, rbx
0x1b50:	mov	edi, ebp
0x1b52:	call	0x17f0


0x17f0:	jmp	qword ptr [rip + 0x20767a]




0x5de4:	test	eax, eax
0x5de6:	je	0x5e24


0x5de8:	call	0x1710


0x5ded:	mov	r12d, dword ptr [rax]
0x5df0:	mov	rdi, rbx
0x5df3:	mov	rbp, rax
0x5df6:	call	0x1770


0x5dfb:	test	r12d, r12d
0x5dfe:	jne	0x5e30


0x5e00:	pop	rbx
0x5e01:	pop	rbp
0x5e02:	pop	r12
0x5e04:	ret	


0x5e30:	mov	dword ptr [rbp], r12d
0x5e34:	mov	eax, 0xffffffff
0x5e39:	jmp	0x5e00


0x59da:	and	ebx, 0x20
0x59dd:	test	ebx, ebx
0x59df:	jne	0x59f8


0x59e1:	test	eax, eax
0x59e3:	je	0x59ef


0x59f8:	test	eax, eax
0x59fa:	jne	0x5a18


0x59ef:	pop	rbx
0x59f0:	pop	rbp
0x59f1:	pop	r12
0x59f3:	ret	


0x59e5:	test	r12, r12
0x59e8:	mov	eax, 0xffffffff
0x59ed:	je	0x5a28


0x59fc:	call	0x1710


0x5a18:	pop	rbx
0x5a19:	mov	eax, 0xffffffff
0x5a1e:	pop	rbp
0x5a1f:	pop	r12
0x5a21:	ret	


0x5a28:	call	0x1710


0x5a2d:	cmp	dword ptr [rax], 9
0x5a30:	pop	rbx
0x5a31:	pop	rbp
0x5a32:	pop	r12
0x5a34:	setne	al
0x5a37:	movzx	eax, al
0x5a3a:	neg	eax
0x5a3c:	ret	


0x5a01:	mov	dword ptr [rax], 0
0x5a07:	mov	eax, 0xffffffff
0x5a0c:	pop	rbx
0x5a0d:	pop	rbp
0x5a0e:	pop	r12
0x5a10:	ret	


0x29c2:	test	eax, eax
0x29c4:	je	0x29dc


0x29dc:	mov	rdi, qword ptr [rip + 0x2066dd]
0x29e3:	call	0x59c0


0x29c6:	call	0x1710


0x29cb:	cmp	byte ptr [rip + 0x2066fe], 0
0x29d2:	mov	rbx, rax
0x29d5:	je	0x29f3


0x29f3:	lea	rsi, [rip + 0x3ad5]
0x29fa:	xor	edi, edi
0x29fc:	mov	edx, 5
0x2a01:	call	0x17a0


0x29d7:	cmp	dword ptr [rax], 0x20
0x29da:	jne	0x29f3


0x2a06:	mov	rdi, qword ptr [rip + 0x2066cb]
0x2a0d:	mov	rbp, rax
0x2a10:	test	rdi, rdi
0x2a13:	je	0x2a3d


0x2a3d:	mov	esi, dword ptr [rbx]
0x2a3f:	lea	rdx, [rip + 0x3a99]
0x2a46:	mov	rcx, rax
0x2a49:	xor	edi, edi
0x2a4b:	xor	eax, eax
0x2a4d:	call	0x19a0


0x2a15:	call	0x4570


0x2a52:	jmp	0x2a32


0x2a32:	mov	edi, dword ptr [rip + 0x2065e0]
0x2a38:	call	0x1730


0x1730:	jmp	qword ptr [rip + 0x2076da]




0x29e8:	test	eax, eax
0x29ea:	jne	0x2a32


0x29ec:	add	rsp, 8
0x29f0:	pop	rbx
0x29f1:	pop	rbp
0x29f2:	ret	


0x1b57:	cmp	eax, -1
0x1b5a:	je	0x1c0e


0x1c0e:	movsxd	rax, dword ptr [rip + 0x20747b]
0x1c15:	cmp	eax, ebp
0x1c17:	jge	0x2130


0x1b60:	cmp	eax, 0x100
0x1b65:	je	0x1bd0


0x1c1d:	mov	r15, qword ptr [rbx + rax*8]
0x1c21:	mov	rdi, r15
0x1c24:	call	0x1870


0x2130:	lea	rsi, [rip + 0x3f51]
0x2137:	mov	edx, 5
0x213c:	xor	edi, edi
0x213e:	call	0x17a0


0x1bd0:	mov	r13, qword ptr [rip + 0x2074c1]
0x1bd7:	jmp	0x1b3c


0x1b67:	jle	0x1b88


0x1870:	jmp	qword ptr [rip + 0x20763a]


0x1b88:	cmp	eax, 0xffffff7d
0x1b8d:	jne	0x2122


0x1b69:	cmp	eax, 0x101
0x1b6e:	je	0x1be0




0x1b93:	mov	rdi, qword ptr [rip + 0x2074ee]
0x1b9a:	mov	rcx, qword ptr [rip + 0x20746f]
0x1ba1:	lea	r8, [rip + 0x44cf]
0x1ba8:	lea	rdx, [rip + 0x447b]
0x1baf:	lea	rsi, [rip + 0x43f7]
0x1bb6:	xor	r9d, r9d
0x1bb9:	xor	eax, eax
0x1bbb:	call	0x50f0


0x2122:	cmp	eax, 0xffffff7e
0x2127:	jne	0x2151


0x1be0:	mov	r12, qword ptr [rip + 0x2074b1]
0x1be7:	mov	rdi, r12
0x1bea:	call	0x17c0


0x1b70:	cmp	eax, 0x102
0x1b75:	jne	0x2151


0x2129:	xor	edi, edi
0x212b:	call	0x25a0


0x2151:	mov	edi, 0x7d
0x2156:	call	0x25a0


0x1b7b:	mov	r14d, 1
0x1b81:	jmp	0x1b3c


0x1bef:	test	rax, rax
0x1bf2:	je	0x1b3c


0x1bf8:	lea	rax, [r12 + rax - 1]
0x1bfd:	cmp	byte ptr [rax], 0x3a
0x1c00:	jne	0x1b3c


0x1c06:	mov	byte ptr [rax], 0
0x1c09:	jmp	0x1b3c


0x1bc0:	xor	edi, edi
0x1bc2:	call	0x1a20


0x2143:	xor	esi, esi
0x2145:	mov	rdx, rax
0x2148:	xor	edi, edi
0x214a:	xor	eax, eax
0x214c:	call	0x19a0


0x4a74:	test	rax, rax
0x4a77:	je	0x4b30


0x4b30:	lea	rsi, [rsp + 0x30]
0x4b35:	mov	edi, r15d
0x4b38:	call	0x5aa0


0x4a7d:	mov	rdi, qword ptr [rax]
0x4a80:	call	0x5480


0x4a85:	mov	rbx, rax
0x4a88:	call	0x16d0


0x4a8d:	mov	qword ptr [rsp], 0
0x4a95:	jmp	0x494f


0x4b3d:	mov	rdi, rax
0x4b40:	jmp	0x4a80


0x4a80:	call	0x5480


0x24f0:	mov	rbp, rax
0x24f3:	jmp	0x23ff


0x1c29:	test	rax, rax
0x1c2c:	mov	rdx, rax
0x1c2f:	je	0x1c52


0x1c52:	mov	rdi, rdx
0x1c55:	call	0x16f0


0x1c31:	lea	rdi, [rip + 0x48ee]
0x1c38:	mov	rsi, rax
0x1c3b:	mov	qword ptr [rsp + 8], rax
0x1c40:	call	0x18c0


0x18c0:	jmp	qword ptr [rip + 0x207612]




0x1c5a:	test	r14b, r14b
0x1c5d:	jne	0x21d2


0x1c63:	test	r12, r12
0x1c66:	je	0x1c7f


0x21d2:	lea	rsi, [rip + 0x434d]
0x21d9:	mov	edi, 4
0x21de:	call	0x44a0


0x1c7f:	mov	edi, dword ptr [rsp + 0x18]
0x1c83:	cmp	edi, -1
0x1c86:	je	0x1eff


0x1c68:	lea	rdx, [rsp + 0x1c]
0x1c6d:	lea	rsi, [rsp + 0x18]
0x1c72:	xor	r8d, r8d
0x1c75:	xor	ecx, ecx
0x1c77:	mov	rdi, r12
0x1c7a:	call	0x4b60


0x1eff:	mov	qword ptr [rsp + 8], 0
0x1f08:	test	r13, r13
0x1f0b:	jne	0x1ca9


0x1c8c:	test	r13, r13
0x1c8f:	je	0x20d9


0x1f11:	mov	esi, dword ptr [rsp + 0x1c]
0x1f15:	cmp	esi, -1
0x1f18:	je	0x1cb4


0x1ca9:	cmp	byte ptr [r13], 0
0x1cae:	jne	0x204e


0x20d9:	call	0x1780


0x1c95:	cmp	dword ptr [rsp + 0x1c], -1
0x1c9a:	je	0x2067


0x1cb4:	mov	rdi, r15
0x1cb7:	call	0x1740


0x1f1e:	mov	rdi, qword ptr [rsp + 8]
0x1f23:	test	rdi, rdi
0x1f26:	je	0x1cb4


0x204e:	lea	rdx, [rsp + 0x28]
0x2053:	lea	rsi, [rsp + 0x20]
0x2058:	xor	ecx, ecx
0x205a:	mov	rdi, r13
0x205d:	call	0x2330


0x1780:	jmp	qword ptr [rip + 0x2076b2]


0x2067:	call	0x1780


0x1ca0:	mov	qword ptr [rsp + 8], 0
0x1ca9:	cmp	byte ptr [r13], 0
0x1cae:	jne	0x204e


0x1740:	jmp	qword ptr [rip + 0x2076d2]


0x1f2c:	lea	rdx, [rsp + 0x20]
0x1f31:	call	0x54e0






0x1f36:	test	eax, eax
0x1f38:	jle	0x1cb4


0x1f3e:	cdqe	
0x1f40:	mov	qword ptr [rsp + 0x28], rax
0x1f45:	jmp	0x1cb4


0x2062:	jmp	0x1cb4


0x1cbc:	test	eax, eax
0x1cbe:	jne	0x200f


0x1cc4:	lea	rdi, [rip + 0x485b]
0x1ccb:	call	0x17d0


0x200f:	mov	rsi, r15
0x2012:	mov	edi, 4
0x2017:	call	0x44a0


0x17d0:	jmp	qword ptr [rip + 0x20768a]




0x206c:	test	rax, rax
0x206f:	je	0x1ca0


0x2075:	cmp	dword ptr [rsp + 0x1c], -1
0x207a:	jne	0x2083


0x207c:	mov	edx, dword ptr [rax + 0x14]
0x207f:	mov	dword ptr [rsp + 0x1c], edx
0x2083:	mov	rax, qword ptr [rax]
0x2086:	mov	qword ptr [rsp + 8], rax
0x208b:	jmp	0x1f08


0x2083:	mov	rax, qword ptr [rax]
0x2086:	mov	qword ptr [rsp + 8], rax
0x208b:	jmp	0x1f08


0x1f08:	test	r13, r13
0x1f0b:	jne	0x1ca9


0x20de:	test	rax, rax
0x20e1:	jne	0x2075


0x20e3:	mov	qword ptr [rsp + 8], 0
0x20ec:	jmp	0x1cb4


0x1c45:	test	eax, eax
0x1c47:	mov	rdx, qword ptr [rsp + 8]
0x1c4c:	je	0x1d00


0x1d00:	mov	rdi, rdx
0x1d03:	call	0x16f0


0x1d08:	mov	rdi, r15
0x1d0b:	call	0x1740


0x1d10:	test	eax, eax
0x1d12:	jne	0x200f


0x1d18:	test	r14b, r14b
0x1d1b:	mov	qword ptr [rsp + 8], 0
0x1d24:	je	0x1cc4


0x1d26:	movsxd	rax, dword ptr [rip + 0x207363]
0x1d2d:	lea	edx, [rax + 1]
0x1d30:	cmp	edx, ebp
0x1d32:	je	0x1fa9


0x1fa9:	lea	rdi, [rip + 0x40e8]
0x1fb0:	call	0x16e0


0x1d38:	lea	rbx, [rbx + rax*8 + 8]
0x1d3d:	test	r12, r12
0x1d40:	je	0x1e7b


0x16e0:	jmp	qword ptr [rip + 0x207702]


0x1e7b:	mov	edi, dword ptr [rsp + 0x18]
0x1e7f:	cmp	edi, -1
0x1e82:	jne	0x1d76


0x1d46:	lea	rdx, [rsp + 0x1c]
0x1d4b:	lea	rsi, [rsp + 0x18]
0x1d50:	xor	r8d, r8d
0x1d53:	xor	ecx, ecx
0x1d55:	mov	rdi, r12
0x1d58:	call	0x4b60




0x1e88:	test	r13, r13
0x1e8b:	mov	rbp, qword ptr [rsp + 0x20]
0x1e90:	mov	qword ptr [rsp + 0x30], 0
0x1e99:	jne	0x1d98


0x1d76:	test	r13, r13
0x1d79:	je	0x1ed9


0x1e9f:	cmp	qword ptr [rsp + 8], 0
0x1ea5:	mov	r13d, dword ptr [rsp + 0x1c]
0x1eaa:	setne	r12b
0x1eae:	cmp	r13d, -1
0x1eb2:	setne	al
0x1eb5:	and	r12d, eax
0x1eb8:	call	0x1710


0x1d98:	cmp	byte ptr [r13], 0
0x1d9d:	jne	0x1f72


0x1ed9:	call	0x1780


0x1d7f:	cmp	dword ptr [rsp + 0x1c], -1
0x1d84:	je	0x1ed9


0x1da3:	mov	rdi, qword ptr [rsp + 0x28]
0x1da8:	mov	rsi, rbp
0x1dab:	call	0x1880


0x1f72:	xor	ecx, ecx
0x1f74:	cmp	qword ptr [rsp + 0x28], 0
0x1f7a:	lea	rdx, [rsp + 0x28]
0x1f7f:	lea	rsi, [rsp + 0x30]
0x1f84:	mov	rdi, r13
0x1f87:	sete	cl
0x1f8a:	call	0x2330


0x1d8a:	mov	rbp, qword ptr [rsp + 0x20]
0x1d8f:	mov	qword ptr [rsp + 0x30], 0
0x1d98:	cmp	byte ptr [r13], 0
0x1d9d:	jne	0x1f72


0x1880:	jmp	qword ptr [rip + 0x207632]




0x1f8f:	test	eax, eax
0x1f91:	je	0x2005


0x2005:	mov	rbp, qword ptr [rsp + 0x30]
0x200a:	jmp	0x1da3


0x1f93:	cmp	qword ptr [rsp + 0x28], 0
0x1f99:	jne	0x1da3


0x1f9f:	mov	ebp, 0x7d
0x1fa4:	jmp	0x1e56


0x1e56:	mov	rcx, qword ptr [rsp + 0x38]
0x1e5b:	xor	rcx, qword ptr fs:[0x28]
0x1e64:	mov	eax, ebp
0x1e66:	jne	0x215b


0x1e6c:	add	rsp, 0x48
0x1e70:	pop	rbx
0x1e71:	pop	rbp
0x1e72:	pop	r12
0x1e74:	pop	r13
0x1e76:	pop	r14
0x1e78:	pop	r15
0x1e7a:	ret	


0x215b:	call	0x17e0


0x1ede:	test	rax, rax
0x1ee1:	je	0x2090


0x2090:	cmp	dword ptr [rsp + 0x1c], -1
0x2095:	jne	0x1e88


0x1ee7:	cmp	dword ptr [rsp + 0x1c], -1
0x1eec:	jne	0x1ef5


0x209b:	lea	rsi, [rip + 0x43b6]
0x20a2:	mov	edx, 5
0x20a7:	xor	edi, edi
0x20a9:	mov	ebp, dword ptr [rsp + 0x18]
0x20ad:	call	0x17a0


0x1eee:	mov	edx, dword ptr [rax + 0x14]
0x1ef1:	mov	dword ptr [rsp + 0x1c], edx
0x1ef5:	mov	rax, qword ptr [rax]
0x1ef8:	mov	qword ptr [rsp + 8], rax
0x1efd:	jmp	0x1e88


0x1ef5:	mov	rax, qword ptr [rax]
0x1ef8:	mov	qword ptr [rsp + 8], rax
0x1efd:	jmp	0x1e88


0x20b2:	mov	rbx, rax
0x20b5:	call	0x1710


0x20ba:	mov	esi, dword ptr [rax]
0x20bc:	mov	ecx, ebp
0x20be:	mov	rdx, rbx
0x20c1:	mov	edi, 0x7d
0x20c6:	xor	eax, eax
0x20c8:	call	0x19a0


0x20cd:	lea	rax, [rip + 0x3f83]
0x20d4:	jmp	0x1fbe


0x1fbe:	mov	qword ptr [rbx], rax
0x1fc1:	lea	rax, [rip + 0x40d6]
0x1fc8:	mov	qword ptr [rbx + 0x10], 0
0x1fd0:	mov	qword ptr [rbx + 8], rax
0x1fd4:	jmp	0x1d3d


0x1d3d:	test	r12, r12
0x1d40:	je	0x1e7b


0x1ebd:	test	r12b, r12b
0x1ec0:	mov	r14, rax
0x1ec3:	jne	0x1fd9


0x1ec9:	cmp	dword ptr [rsp + 0x18], -1
0x1ece:	je	0x1dc2


0x1fd9:	mov	rdi, qword ptr [rsp + 8]
0x1fde:	lea	rdx, [rsp + 0x30]
0x1fe3:	mov	esi, r13d
0x1fe6:	call	0x54e0


0x1dc2:	mov	rdi, qword ptr [rsp + 0x30]
0x1dc7:	call	0x16f0


0x1ed4:	jmp	0x1da3


0x1dcc:	mov	rdi, qword ptr [rsp + 0x20]
0x1dd1:	call	0x16f0


0x1dd6:	mov	ebp, dword ptr [rsp + 0x1c]
0x1dda:	call	0x1710


0x1ddf:	mov	r12, rax
0x1de2:	cmp	ebp, -1
0x1de5:	je	0x1df6


0x1df6:	mov	edi, dword ptr [rsp + 0x18]
0x1dfa:	cmp	edi, -1
0x1dfd:	je	0x1e0c


0x1de7:	mov	edi, ebp
0x1de9:	call	0x19b0


0x1e0c:	mov	rdi, qword ptr [rbx]
0x1e0f:	mov	rsi, rbx
0x1e12:	xor	ebp, ebp
0x1e14:	call	0x1a00


0x1dff:	call	0x1a50


0x19b0:	jmp	qword ptr [rip + 0x20759a]


0x1a00:	jmp	qword ptr [rip + 0x207572]


0x1a50:	jmp	qword ptr [rip + 0x20754a]








0x1feb:	test	eax, eax
0x1fed:	jle	0x20f1


0x20f1:	cmp	qword ptr [rsp + 0x28], 0
0x20f7:	jne	0x1ec9


0x1ff3:	cmp	dword ptr [rsp + 0x18], -1
0x1ff8:	cdqe	
0x1ffa:	mov	qword ptr [rsp + 0x28], rax
0x1fff:	je	0x1dc2


0x20fd:	lea	rsi, [rip + 0x437c]
0x2104:	mov	edx, 5
0x2109:	xor	edi, edi
0x210b:	call	0x17a0


0x2110:	mov	esi, dword ptr [r14]
0x2113:	mov	rdx, rax
0x2116:	mov	edi, 0x7d
0x211b:	xor	eax, eax
0x211d:	call	0x19a0


0x1d5d:	test	rax, rax
0x1d60:	mov	rbp, rax
0x1d63:	je	0x1e7b


0x1d69:	mov	edi, dword ptr [rsp + 0x18]
0x1d6d:	cmp	edi, -1
0x1d70:	je	0x1f4a


0x1f4a:	cmp	dword ptr [rsp + 0x1c], -1
0x1f4f:	jne	0x1e88


0x1f55:	call	0x1710


0x1f5a:	mov	esi, dword ptr [rax]
0x1f5c:	lea	rdx, [rip + 0x457c]
0x1f63:	mov	rcx, rbp
0x1f66:	mov	edi, 0x7d
0x1f6b:	xor	eax, eax
0x1f6d:	call	0x19a0


0x1e04:	test	eax, eax
0x1e06:	jne	0x2160


0x2160:	lea	rsi, [rip + 0x3f51]
0x2167:	mov	edx, 5
0x216c:	xor	edi, edi
0x216e:	call	0x17a0


0x2173:	mov	esi, dword ptr [r12]
0x2177:	mov	rdx, rax
0x217a:	mov	edi, 0x7d
0x217f:	xor	eax, eax
0x2181:	call	0x19a0


0x2186:	lea	rsi, [rip + 0x3f14]
0x218d:	mov	edx, 5
0x2192:	xor	edi, edi
0x2194:	call	0x17a0


0x2199:	mov	esi, dword ptr [r12]
0x219d:	mov	rdx, rax
0x21a0:	mov	edi, 0x7d
0x21a5:	xor	eax, eax
0x21a7:	call	0x19a0


0x21ac:	lea	rsi, [rip + 0x42f5]
0x21b3:	mov	edx, 5
0x21b8:	xor	edi, edi
0x21ba:	call	0x17a0


0x21bf:	mov	esi, dword ptr [r12]
0x21c3:	mov	rdx, rax
0x21c6:	mov	edi, 0x7d
0x21cb:	xor	eax, eax
0x21cd:	call	0x19a0


0x1e19:	cmp	dword ptr [r12], 2
0x1e1e:	mov	rdi, qword ptr [rbx]
0x1e21:	sete	bpl
0x1e25:	call	0x4770


0x1dee:	test	eax, eax
0x1df0:	jne	0x2186


0x1db0:	mov	ebp, eax
0x1db2:	call	0x1710


0x1db7:	test	ebp, ebp
0x1db9:	mov	r12, rax
0x1dbc:	jne	0x21ac


0x1fb5:	test	rax, rax
0x1fb8:	je	0x20cd


0x1cd0:	test	eax, eax
0x1cd2:	je	0x1d26


0x1cd4:	lea	rsi, [rip + 0x475d]
0x1cdb:	mov	edx, 5
0x1ce0:	xor	edi, edi
0x1ce2:	call	0x17a0


0x1ce7:	mov	rbx, rax
0x1cea:	call	0x1710


0x1cef:	mov	esi, dword ptr [rax]
0x1cf1:	mov	rdx, rbx
0x1cf4:	mov	edi, 0x7d
0x1cf9:	xor	eax, eax
0x1cfb:	call	0x19a0


0x2a1a:	mov	esi, dword ptr [rbx]
0x2a1c:	lea	rdx, [rip + 0x3ab8]
0x2a23:	mov	rcx, rax
0x2a26:	mov	r8, rbp
0x2a29:	xor	edi, edi
0x2a2b:	xor	eax, eax
0x2a2d:	call	0x19a0


0x1e2a:	lea	rsi, [rip + 0x429d]
0x1e31:	mov	edx, 5
0x1e36:	xor	edi, edi
0x1e38:	mov	rbx, rax
0x1e3b:	add	ebp, 0x7e
0x1e3e:	call	0x17a0


0x1e43:	mov	esi, dword ptr [r12]
0x1e47:	mov	rdx, rax
0x1e4a:	mov	rcx, rbx
0x1e4d:	xor	edi, edi
0x1e4f:	xor	eax, eax
0x1e51:	call	0x19a0


0x250b:	lea	rsi, [rip + 0x3a74]
0x2512:	mov	edx, 5
0x2517:	xor	edi, edi
0x2519:	mov	qword ptr [rsp + 8], rax
0x251e:	call	0x17a0


0x2523:	mov	r15, rax
0x2526:	call	0x1710


0x252b:	mov	rcx, qword ptr [rsp + 8]
0x2530:	mov	esi, dword ptr [rax]
0x2532:	mov	rdx, r15
0x2535:	xor	edi, edi
0x2537:	xor	eax, eax
0x2539:	call	0x19a0


0x253e:	mov	dword ptr [rsp + 8], 0xffffffff
0x2546:	jmp	0x240c


0x240c:	lea	rsi, [rip + 0x3b71]
0x2413:	xor	edi, edi
0x2415:	call	0x19e0


0x2562:	lea	rsi, [rip + 0x3a2e]
0x2569:	mov	rbx, rax
0x256c:	xor	edi, edi
0x256e:	mov	edx, 5
0x2573:	call	0x17a0


0x2578:	mov	rcx, rbx
0x257b:	mov	rdx, rax
0x257e:	xor	esi, esi
0x2580:	xor	edi, edi
0x2582:	xor	eax, eax
0x2584:	call	0x19a0


0x2589:	jmp	0x245b


0x201c:	lea	rsi, [rip + 0x43ed]
0x2023:	mov	edx, 5
0x2028:	xor	edi, edi
0x202a:	mov	rbp, rax
0x202d:	call	0x17a0


0x2032:	mov	rbx, rax
0x2035:	call	0x1710


0x203a:	mov	esi, dword ptr [rax]
0x203c:	mov	rcx, rbp
0x203f:	mov	rdx, rbx
0x2042:	mov	edi, 0x7d
0x2047:	xor	eax, eax
0x2049:	call	0x19a0


0x21e3:	lea	rsi, [rip + 0x41ee]
0x21ea:	mov	rbx, rax
0x21ed:	mov	edx, 5
0x21f2:	xor	edi, edi
0x21f4:	call	0x17a0


0x21f9:	xor	edi, edi
0x21fb:	mov	rdx, rax
0x21fe:	mov	rcx, rbx
0x2201:	xor	esi, esi
0x2203:	xor	eax, eax
0x2205:	call	0x19a0


0x220a:	mov	edi, 0x7d
0x220f:	call	0x25a0


0x2214:	nop	word ptr cs:[rax + rax]
0x221e:	nop	


0x26a0:	lea	rsi, [rip + 0x3b99]
0x26a7:	mov	rbx, rax
0x26aa:	mov	edx, 5
0x26af:	xor	edi, edi
0x26b1:	call	0x17a0


0x26b6:	mov	rdx, rbx
0x26b9:	mov	rsi, rax
0x26bc:	mov	edi, 1
0x26c1:	xor	eax, eax
0x26c3:	call	0x1990


0x26c8:	mov	rbx, qword ptr [rip + 0x2069b9]
0x26cf:	lea	rsi, [rip + 0x3baa]
0x26d6:	mov	edx, 5
0x26db:	xor	edi, edi
0x26dd:	call	0x17a0


0x26e2:	mov	rsi, rbx
0x26e5:	mov	rdi, rax
0x26e8:	call	0x18a0


0x26ed:	mov	rbx, qword ptr [rip + 0x206994]
0x26f4:	lea	rsi, [rip + 0x3bb5]
0x26fb:	mov	edx, 5
0x2700:	xor	edi, edi
0x2702:	call	0x17a0


0x2707:	mov	rsi, rbx
0x270a:	mov	rdi, rax
0x270d:	call	0x18a0


0x2712:	mov	rbx, qword ptr [rip + 0x20696f]
0x2719:	lea	rsi, [rip + 0x3bc8]
0x2720:	mov	edx, 5
0x2725:	xor	edi, edi
0x2727:	call	0x17a0


0x272c:	mov	rsi, rbx
0x272f:	mov	rdi, rax
0x2732:	lea	rbx, [rip + 0x3874]
0x2739:	call	0x18a0


0x273e:	lea	rax, [rip + 0x386f]
0x2745:	lea	rcx, [rip + 0x38a9]
0x274c:	mov	qword ptr [rsp + 0x60], 0
0x2755:	mov	qword ptr [rsp + 0x68], 0
0x275e:	mov	rdx, rsp
0x2761:	mov	qword ptr [rsp], rax
0x2765:	lea	rax, [rip + 0x384a]
0x276c:	mov	qword ptr [rsp + 0x30], rcx
0x2771:	lea	rcx, [rip + 0x3887]
0x2778:	mov	qword ptr [rsp + 8], rax
0x277d:	lea	rax, [rip + 0x38aa]
0x2784:	mov	qword ptr [rsp + 0x40], rcx
0x2789:	lea	rcx, [rip + 0x3879]
0x2790:	mov	qword ptr [rsp + 0x10], rax
0x2795:	lea	rax, [rip + 0x382a]
0x279c:	mov	qword ptr [rsp + 0x50], rcx
0x27a1:	mov	qword ptr [rsp + 0x18], rax
0x27a6:	lea	rax, [rip + 0x382f]
0x27ad:	mov	qword ptr [rsp + 0x20], rax
0x27b2:	lea	rax, [rip + 0x382d]
0x27b9:	mov	qword ptr [rsp + 0x28], rax
0x27be:	mov	qword ptr [rsp + 0x38], rax
0x27c3:	mov	qword ptr [rsp + 0x48], rax
0x27c8:	mov	qword ptr [rsp + 0x58], rax
0x27cd:	nop	dword ptr [rax]
0x27d0:	add	rdx, 0x10
0x27d4:	mov	rdi, qword ptr [rdx]
0x27d7:	test	rdi, rdi
0x27da:	je	0x27ef


0x27ef:	mov	r12, qword ptr [rdx + 8]
0x27f3:	xor	edi, edi
0x27f5:	mov	edx, 5
0x27fa:	lea	rsi, [rip + 0x3812]
0x2801:	test	r12, r12
0x2804:	je	0x28cb


0x27dc:	mov	ecx, 7
0x27e1:	mov	rsi, rbx
0x27e4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x28cb:	call	0x17a0


0x280a:	call	0x17a0


0x27e4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x27e6:	seta	al
0x27e9:	sbb	al, 0
0x27eb:	test	al, al
0x27ed:	jne	0x27d0


0x27d0:	add	rdx, 0x10
0x27d4:	mov	rdi, qword ptr [rdx]
0x27d7:	test	rdi, rdi
0x27da:	je	0x27ef


0x280f:	lea	rcx, [rip + 0x3b1a]
0x2816:	lea	rdx, [rip + 0x380d]
0x281d:	mov	rsi, rax
0x2820:	mov	edi, 1
0x2825:	xor	eax, eax
0x2827:	call	0x1990


0x282c:	xor	esi, esi
0x282e:	mov	edi, 5
0x2833:	call	0x1980


0x2838:	test	rax, rax
0x283b:	je	0x2859


0x2859:	lea	rsi, [rip + 0x37dc]
0x2860:	xor	edi, edi
0x2862:	mov	edx, 5
0x2867:	call	0x17a0


0x283d:	lea	rsi, [rip + 0x37f4]
0x2844:	mov	edx, 3
0x2849:	mov	rdi, rax
0x284c:	call	0x1720


0x1720:	jmp	qword ptr [rip + 0x2076e2]




0x286c:	lea	rcx, [rip + 0x373a]
0x2873:	lea	rdx, [rip + 0x3ab6]
0x287a:	mov	rsi, rax
0x287d:	mov	edi, 1
0x2882:	xor	eax, eax
0x2884:	call	0x1990


0x2889:	cmp	r12, rbx
0x288c:	lea	rcx, [rip + 0x373d]
0x2893:	lea	rbx, [rip + 0x41ef]
0x289a:	cmove	rbx, rcx
0x289e:	lea	rsi, [rip + 0x3afb]
0x28a5:	xor	edi, edi
0x28a7:	mov	edx, 5
0x28ac:	call	0x17a0


0x28b1:	mov	rcx, rbx
0x28b4:	mov	rsi, rax
0x28b7:	mov	rdx, r12
0x28ba:	mov	edi, 1
0x28bf:	xor	eax, eax
0x28c1:	call	0x1990


0x28c6:	jmp	0x25f6


0x28d0:	lea	rcx, [rip + 0x3a59]
0x28d7:	lea	rdx, [rip + 0x374c]
0x28de:	mov	rsi, rax
0x28e1:	mov	edi, 1
0x28e6:	xor	eax, eax
0x28e8:	call	0x1990


0x28ed:	xor	esi, esi
0x28ef:	mov	edi, 5
0x28f4:	call	0x1980


0x28f9:	test	rax, rax
0x28fc:	je	0x2916


0x2916:	lea	rsi, [rip + 0x371f]
0x291d:	mov	edx, 5
0x2922:	xor	edi, edi
0x2924:	lea	r12, [rip + 0x3682]
0x292b:	lea	rbx, [rip + 0x369e]
0x2932:	call	0x17a0


0x28fe:	lea	rsi, [rip + 0x3733]
0x2905:	mov	edx, 3
0x290a:	mov	rdi, rax
0x290d:	call	0x1720


0x2937:	lea	rcx, [rip + 0x366f]
0x293e:	lea	rdx, [rip + 0x39eb]
0x2945:	mov	rsi, rax
0x2948:	mov	edi, 1
0x294d:	xor	eax, eax
0x294f:	call	0x1990


0x2954:	jmp	0x289e


0x289e:	lea	rsi, [rip + 0x3afb]
0x28a5:	xor	edi, edi
0x28a7:	mov	edx, 5
0x28ac:	call	0x17a0


0x2912:	test	eax, eax
0x2914:	jne	0x2959


0x2959:	lea	r12, [rip + 0x364d]
0x2960:	mov	r13, qword ptr [rip + 0x206721]
0x2967:	lea	rsi, [rip + 0x39ea]
0x296e:	xor	edi, edi
0x2970:	mov	edx, 5
0x2975:	call	0x17a0


0x297a:	mov	rsi, r13
0x297d:	mov	rdi, rax
0x2980:	call	0x18a0


0x2985:	jmp	0x2859


0x2851:	test	eax, eax
0x2853:	jne	0x2960


0x2960:	mov	r13, qword ptr [rip + 0x206721]
0x2967:	lea	rsi, [rip + 0x39ea]
0x296e:	xor	edi, edi
0x2970:	mov	edx, 5
0x2975:	call	0x17a0


0x3f1c:	add	rsp, 0x20
0x3f20:	mov	r11, qword ptr [rsp + 0x10]
0x3f25:	cmp	r11, rax
0x3f28:	ja	0x3f91


0x3f2a:	lea	rsi, [rax + 1]
0x3f2e:	lea	rax, [rip + 0x2051cb]
0x3f35:	cmp	r12, rax
0x3f38:	mov	qword ptr [rbx], rsi
0x3f3b:	je	0x3f4f


0x3f91:	mov	eax, dword ptr [rsp + 0x18]
0x3f95:	mov	dword ptr [r13], eax
0x3f99:	add	rsp, 0x28
0x3f9d:	mov	rax, r12
0x3fa0:	pop	rbx
0x3fa1:	pop	rbp
0x3fa2:	pop	r12
0x3fa4:	pop	r13
0x3fa6:	pop	r14
0x3fa8:	pop	r15
0x3faa:	ret	


0x3f4f:	mov	rdi, rsi
0x3f52:	mov	qword ptr [rsp + 0x10], rsi
0x3f57:	call	0x5250


0x3f3d:	mov	rdi, r12
0x3f40:	mov	qword ptr [rsp + 0x10], rsi
0x3f45:	call	0x16f0


0x3f4a:	mov	rsi, qword ptr [rsp + 0x10]
0x3f4f:	mov	rdi, rsi
0x3f52:	mov	qword ptr [rsp + 0x10], rsi
0x3f57:	call	0x5250


0x3f5c:	sub	rsp, 8
0x3f60:	mov	qword ptr [rbx + 8], rax
0x3f64:	mov	r8d, dword ptr [rbp]
0x3f68:	push	qword ptr [rbp + 0x30]
0x3f6b:	push	qword ptr [rbp + 0x28]
0x3f6e:	mov	rcx, r14
0x3f71:	push	r15
0x3f73:	mov	r9d, dword ptr [rsp + 0x3c]
0x3f78:	mov	rdi, rax
0x3f7b:	mov	rdx, qword ptr [rsp + 0x28]
0x3f80:	mov	rsi, qword ptr [rsp + 0x30]
0x3f85:	mov	r12, rax
0x3f88:	call	0x2bf0


0x46a2:	mov	rdi, qword ptr [rsp + 0x38]
0x46a7:	xor	rdi, qword ptr fs:[0x28]
0x46b0:	jne	0x46bc


0x46b2:	add	rsp, 0x48
0x46b6:	ret	


0x46bc:	call	0x17e0


0x43ef:	mov	rcx, qword ptr [rsp + 0x38]
0x43f4:	xor	rcx, qword ptr fs:[0x28]
0x43fd:	jne	0x4409


0x43ff:	add	rsp, 0x48
0x4403:	ret	


0x4409:	call	0x17e0


0x447b:	mov	rdx, qword ptr [rsp + 0x38]
0x4480:	xor	rdx, qword ptr fs:[0x28]
0x4489:	jne	0x4495


0x448b:	add	rsp, 0x48
0x448f:	ret	


0x4495:	call	0x17e0


0x460f:	mov	rcx, qword ptr [rsp + 0x38]
0x4614:	xor	rcx, qword ptr fs:[0x28]
0x461d:	jne	0x4629


0x461f:	add	rsp, 0x48
0x4623:	ret	


0x4629:	call	0x17e0


0x453e:	mov	rsi, qword ptr [rsp + 0x38]
0x4543:	xor	rsi, qword ptr fs:[0x28]
0x454c:	jne	0x4553


0x454e:	add	rsp, 0x48
0x4552:	ret	


0x4553:	call	0x17e0


0x3f8d:	add	rsp, 0x20
0x3f91:	mov	eax, dword ptr [rsp + 0x18]
0x3f95:	mov	dword ptr [r13], eax
0x3f99:	add	rsp, 0x28
0x3f9d:	mov	rax, r12
0x3fa0:	pop	rbx
0x3fa1:	pop	rbp
0x3fa2:	pop	r12
0x3fa4:	pop	r13
0x3fa6:	pop	r14
0x3fa8:	pop	r15
0x3faa:	ret	


0x41dc:	lea	rsi, [rax + 1]
0x41e0:	mov	qword ptr [rsp + 0x48], rax
0x41e5:	add	rsp, 0x20
0x41e9:	mov	rdi, rsi
0x41ec:	mov	qword ptr [rsp + 0x18], rsi
0x41f1:	call	0x5250


0x41f6:	mov	qword ptr [rsp + 0x10], rax
0x41fb:	sub	rsp, 8
0x41ff:	push	qword ptr [rbx + 0x30]
0x4202:	push	qword ptr [rbx + 0x28]
0x4205:	mov	r10, qword ptr [rsp + 0x38]
0x420a:	mov	r9d, ebp
0x420d:	mov	r8d, dword ptr [rbx]
0x4210:	mov	rcx, r15
0x4213:	mov	rdx, r14
0x4216:	mov	rdi, rax
0x4219:	push	r10
0x421b:	mov	rsi, qword ptr [rsp + 0x38]
0x4220:	call	0x2bf0


0x4225:	mov	eax, dword ptr [rsp + 0x2c]
0x4229:	add	rsp, 0x20
0x422d:	test	r12, r12
0x4230:	mov	dword ptr [r13], eax
0x4234:	je	0x423f


0x423f:	mov	rax, qword ptr [rsp + 0x10]
0x4244:	add	rsp, 0x38
0x4248:	pop	rbx
0x4249:	pop	rbp
0x424a:	pop	r12
0x424c:	pop	r13
0x424e:	pop	r14
0x4250:	pop	r15
0x4252:	ret	


0x4236:	mov	r11, qword ptr [rsp + 0x28]
0x423b:	mov	qword ptr [r12], r11
0x423f:	mov	rax, qword ptr [rsp + 0x10]
0x4244:	add	rsp, 0x38
0x4248:	pop	rbx
0x4249:	pop	rbp
0x424a:	pop	r12
0x424c:	pop	r13
0x424e:	pop	r14
0x4250:	pop	r15
0x4252:	ret	


0x4151:	mov	dword ptr [rbp], r12d
0x4155:	add	rsp, 0x38
0x4159:	pop	rbx
0x415a:	pop	rbp
0x415b:	pop	r12
0x415d:	pop	r13
0x415f:	pop	r14
0x4161:	pop	r15
0x4163:	ret	


0x5f2d:	add	rbx, 1
0x5f31:	cmp	rbp, rbx
0x5f34:	jne	0x5f20


0x5f20:	mov	rdx, r15
0x5f23:	mov	rsi, r14
0x5f26:	mov	edi, r13d
0x5f29:	call	qword ptr [r12 + rbx*8]






0x4ec0:	lea	rsi, [rip + 0x1cd9]
0x4ec7:	mov	edx, 5
0x4ecc:	xor	edi, edi
0x4ece:	mov	r14, qword ptr [rbx + 0x18]
0x4ed2:	mov	r13, qword ptr [rbx + 0x10]
0x4ed6:	mov	r12, qword ptr [rbx + 8]
0x4eda:	mov	rbx, qword ptr [rbx]
0x4edd:	call	0x17a0


0x4ce0:	mov	r9, qword ptr [rbx + 0x38]
0x4ce4:	mov	rax, qword ptr [rbx + 0x10]
0x4ce8:	lea	rsi, [rip + 0x1f51]
0x4cef:	mov	r8, qword ptr [rbx + 8]
0x4cf3:	mov	edx, 5
0x4cf8:	xor	edi, edi
0x4cfa:	mov	r13, qword ptr [rbx + 0x30]
0x4cfe:	mov	r12, qword ptr [rbx + 0x28]
0x4d02:	mov	qword ptr [rsp + 0x10], r9
0x4d07:	mov	r15, qword ptr [rbx + 0x20]
0x4d0b:	mov	r14, qword ptr [rbx + 0x18]
0x4d0f:	mov	qword ptr [rsp], rax
0x4d13:	mov	qword ptr [rsp + 8], r8
0x4d18:	mov	rbx, qword ptr [rbx]
0x4d1b:	call	0x17a0


0x4de8:	mov	rbx, qword ptr [rbx]
0x4deb:	lea	rsi, [rip + 0x1c55]
0x4df2:	mov	edx, 5
0x4df7:	xor	edi, edi
0x4df9:	call	0x17a0


0x4e28:	mov	r12, qword ptr [rbx + 8]
0x4e2c:	lea	rsi, [rip + 0x1c24]
0x4e33:	mov	rbx, qword ptr [rbx]
0x4e36:	mov	edx, 5
0x4e3b:	xor	edi, edi
0x4e3d:	call	0x17a0


0x4f48:	mov	r8, qword ptr [rbx + 8]
0x4f4c:	mov	r12, qword ptr [rbx + 0x28]
0x4f50:	lea	rsi, [rip + 0x1c91]
0x4f57:	mov	r15, qword ptr [rbx + 0x20]
0x4f5b:	mov	r14, qword ptr [rbx + 0x18]
0x4f5f:	mov	edx, 5
0x4f64:	mov	r13, qword ptr [rbx + 0x10]
0x4f68:	xor	edi, edi
0x4f6a:	mov	rbx, qword ptr [rbx]
0x4f6d:	mov	qword ptr [rsp], r8
0x4f71:	call	0x17a0


0x4e70:	mov	r13, qword ptr [rbx + 0x10]
0x4e74:	mov	r12, qword ptr [rbx + 8]
0x4e78:	lea	rsi, [rip + 0x1bef]
0x4e7f:	mov	rbx, qword ptr [rbx]
0x4e82:	mov	edx, 5
0x4e87:	xor	edi, edi
0x4e89:	call	0x17a0


0x4fb0:	mov	r9, qword ptr [rbx + 0x10]
0x4fb4:	mov	r13, qword ptr [rbx + 0x30]
0x4fb8:	lea	rsi, [rip + 0x1c51]
0x4fbf:	mov	r12, qword ptr [rbx + 0x28]
0x4fc3:	mov	r15, qword ptr [rbx + 0x20]
0x4fc7:	mov	edx, 5
0x4fcc:	mov	r14, qword ptr [rbx + 0x18]
0x4fd0:	mov	r8, qword ptr [rbx + 8]
0x4fd4:	xor	edi, edi
0x4fd6:	mov	qword ptr [rsp + 8], r9
0x4fdb:	mov	rbx, qword ptr [rbx]
0x4fde:	mov	qword ptr [rsp], r8
0x4fe2:	call	0x17a0


0x4d90:	mov	r10, qword ptr [rbx + 0x40]
0x4d94:	mov	r9, qword ptr [rbx + 0x38]
0x4d98:	lea	rsi, [rip + 0x1ed1]
0x4d9f:	mov	rax, qword ptr [rbx + 0x10]
0x4da3:	mov	r8, qword ptr [rbx + 8]
0x4da7:	mov	edx, 5
0x4dac:	mov	r13, qword ptr [rbx + 0x30]
0x4db0:	mov	r12, qword ptr [rbx + 0x28]
0x4db4:	mov	r15, qword ptr [rbx + 0x20]
0x4db8:	mov	r14, qword ptr [rbx + 0x18]
0x4dbc:	mov	rbx, qword ptr [rbx]
0x4dbf:	mov	qword ptr [rsp + 0x18], r10
0x4dc4:	mov	qword ptr [rsp + 0x10], r9
0x4dc9:	mov	qword ptr [rsp], rax
0x4dcd:	mov	qword ptr [rsp + 8], r8
0x4dd2:	xor	edi, edi
0x4dd4:	call	0x17a0


0x4d56:	add	rsp, 0x28
0x4d5a:	pop	rbx
0x4d5b:	pop	rbp
0x4d5c:	pop	r12
0x4d5e:	pop	r13
0x4d60:	pop	r14
0x4d62:	pop	r15
0x4d64:	ret	


0x4f18:	mov	r15, qword ptr [rbx + 0x20]
0x4f1c:	lea	rsi, [rip + 0x1c9d]
0x4f23:	mov	edx, 5
0x4f28:	xor	edi, edi
0x4f2a:	mov	r14, qword ptr [rbx + 0x18]
0x4f2e:	mov	r13, qword ptr [rbx + 0x10]
0x4f32:	mov	r12, qword ptr [rbx + 8]
0x4f36:	mov	rbx, qword ptr [rbx]
0x4f39:	call	0x17a0


0x4f3e:	push	r15
0x4f40:	jmp	0x4ee6


0x4ee6:	push	r14
0x4ee8:	mov	rdx, rax
0x4eeb:	mov	r9, r13
0x4eee:	mov	r8, r12
0x4ef1:	mov	rcx, rbx
0x4ef4:	mov	rdi, rbp
0x4ef7:	mov	esi, 1
0x4efc:	xor	eax, eax
0x4efe:	call	0x1a40


0x4f03:	pop	rax
0x4f04:	pop	rdx
0x4f05:	add	rsp, 0x28
0x4f09:	pop	rbx
0x4f0a:	pop	rbp
0x4f0b:	pop	r12
0x4f0d:	pop	r13
0x4f0f:	pop	r14
0x4f11:	pop	r15
0x4f13:	ret	


0x4fe7:	push	r13
0x4fe9:	push	r12
0x4feb:	push	r15
0x4fed:	push	r14
0x4fef:	mov	r9, qword ptr [rsp + 0x28]
0x4ff4:	jmp	0x4f83


0x4f83:	mov	r8, qword ptr [rsp + 0x20]
0x4f88:	mov	rcx, rbx
0x4f8b:	mov	rdx, rax
0x4f8e:	mov	rdi, rbp
0x4f91:	mov	esi, 1
0x4f96:	xor	eax, eax
0x4f98:	call	0x1a40


0x4f9d:	add	rsp, 0x20
0x4fa1:	add	rsp, 0x28
0x4fa5:	pop	rbx
0x4fa6:	pop	rbp
0x4fa7:	pop	r12
0x4fa9:	pop	r13
0x4fab:	pop	r14
0x4fad:	pop	r15
0x4faf:	ret	


0x4e8e:	add	rsp, 0x28
0x4e92:	mov	r9, r13
0x4e95:	mov	r8, r12
0x4e98:	mov	rcx, rbx
0x4e9b:	mov	rdi, rbp
0x4e9e:	mov	rdx, rax
0x4ea1:	pop	rbx
0x4ea2:	pop	rbp
0x4ea3:	pop	r12
0x4ea5:	pop	r13
0x4ea7:	pop	r14
0x4ea9:	pop	r15
0x4eab:	mov	esi, 1
0x4eb0:	xor	eax, eax
0x4eb2:	jmp	0x1a40


0x4f76:	sub	rsp, 8
0x4f7a:	mov	r9, r13
0x4f7d:	push	r12
0x4f7f:	push	r15
0x4f81:	push	r14
0x4f83:	mov	r8, qword ptr [rsp + 0x20]
0x4f88:	mov	rcx, rbx
0x4f8b:	mov	rdx, rax
0x4f8e:	mov	rdi, rbp
0x4f91:	mov	esi, 1
0x4f96:	xor	eax, eax
0x4f98:	call	0x1a40


0x4e42:	add	rsp, 0x28
0x4e46:	mov	r8, r12
0x4e49:	mov	rcx, rbx
0x4e4c:	mov	rdi, rbp
0x4e4f:	mov	rdx, rax
0x4e52:	mov	esi, 1
0x4e57:	pop	rbx
0x4e58:	pop	rbp
0x4e59:	pop	r12
0x4e5b:	pop	r13
0x4e5d:	pop	r14
0x4e5f:	pop	r15
0x4e61:	xor	eax, eax
0x4e63:	jmp	0x1a40


0x4dfe:	add	rsp, 0x28
0x4e02:	mov	rcx, rbx
0x4e05:	mov	rdi, rbp
0x4e08:	pop	rbx
0x4e09:	pop	rbp
0x4e0a:	pop	r12
0x4e0c:	pop	r13
0x4e0e:	pop	r14
0x4e10:	pop	r15
0x4e12:	mov	rdx, rax
0x4e15:	mov	esi, 1
0x4e1a:	xor	eax, eax
0x4e1c:	jmp	0x1a40


0x4d20:	sub	rsp, 8
0x4d24:	mov	r9, qword ptr [rsp + 0x18]
0x4d29:	mov	rdx, rax
0x4d2c:	mov	rcx, rbx
0x4d2f:	mov	esi, 1
0x4d34:	mov	rdi, rbp
0x4d37:	xor	eax, eax
0x4d39:	push	r9
0x4d3b:	push	r13
0x4d3d:	push	r12
0x4d3f:	push	r15
0x4d41:	push	r14
0x4d43:	mov	r9, qword ptr [rsp + 0x30]
0x4d48:	mov	r8, qword ptr [rsp + 0x38]
0x4d4d:	call	0x1a40


0x4ee2:	sub	rsp, 8
0x4ee6:	push	r14
0x4ee8:	mov	rdx, rax
0x4eeb:	mov	r9, r13
0x4eee:	mov	r8, r12
0x4ef1:	mov	rcx, rbx
0x4ef4:	mov	rdi, rbp
0x4ef7:	mov	esi, 1
0x4efc:	xor	eax, eax
0x4efe:	call	0x1a40


0x3790:	sub	rsp, 8
0x3794:	mov	rcx, rbp
0x3797:	mov	rsi, r13
0x379a:	push	qword ptr [rsp + 0x68]
0x379e:	push	qword ptr [rsp + 0x78]
0x37a2:	mov	rdi, r14
0x37a5:	push	0
0x37a7:	mov	r9d, dword ptr [rsp + 0x98]
0x37af:	mov	r8d, dword ptr [rsp + 0x28]
0x37b4:	mov	rdx, qword ptr [rsp + 0x30]
0x37b9:	and	r9d, 0xfffffffd
0x37bd:	call	0x2bf0


0x37c2:	add	rsp, 0x20
0x37c6:	mov	r15, rax
0x37c9:	mov	rbx, qword ptr [rsp + 0xa8]
0x37d1:	xor	rbx, qword ptr fs:[0x28]
0x37da:	mov	rax, r15
0x37dd:	jne	0x3de3


0x37e3:	add	rsp, 0xb8
0x37ea:	pop	rbx
0x37eb:	pop	rbp
0x37ec:	pop	r12
0x37ee:	pop	r13
0x37f0:	pop	r14
0x37f2:	pop	r15
0x37f4:	ret	


0x3de3:	call	0x17e0


0x3d8d:	sub	rsp, 8
0x3d91:	mov	r8d, 5
0x3d97:	mov	rcx, r11
0x3d9a:	push	qword ptr [rsp + 0x68]
0x3d9e:	push	qword ptr [rsp + 0x78]
0x3da2:	mov	rdi, r14
0x3da5:	push	qword ptr [rsp + 0x38]
0x3da9:	mov	r9d, dword ptr [rsp + 0x98]
0x3db1:	mov	rdx, qword ptr [rsp + 0x30]
0x3db6:	mov	rsi, qword ptr [rsp + 0x70]
0x3dbb:	call	0x2bf0


0x3dc0:	add	rsp, 0x20
0x3dc4:	mov	r15, rax
0x3dc7:	jmp	0x37c9


0x37c9:	mov	rbx, qword ptr [rsp + 0xa8]
0x37d1:	xor	rbx, qword ptr fs:[0x28]
0x37da:	mov	rax, r15
0x37dd:	jne	0x3de3


0x16c0:	push	qword ptr [rip + 0x20770a]
0x16c6:	jmp	qword ptr [rip + 0x20770c]


0x16cc:	nop	dword ptr [rax]


0x16d6:	push	0
0x16db:	jmp	0x16c0


0x16e6:	push	1
0x16eb:	jmp	0x16c0


0x16f6:	push	2
0x16fb:	jmp	0x16c0


0x1706:	push	3
0x170b:	jmp	0x16c0


0x1716:	push	4
0x171b:	jmp	0x16c0


0x1726:	push	5
0x172b:	jmp	0x16c0


0x1736:	push	6
0x173b:	jmp	0x16c0


0x1746:	push	7
0x174b:	jmp	0x16c0


0x1756:	push	8
0x175b:	jmp	0x16c0


0x1766:	push	9
0x176b:	jmp	0x16c0


0x1776:	push	0xa
0x177b:	jmp	0x16c0


0x1786:	push	0xb
0x178b:	jmp	0x16c0


0x1796:	push	0xc
0x179b:	jmp	0x16c0


0x17a6:	push	0xd
0x17ab:	jmp	0x16c0


0x17b6:	push	0xe
0x17bb:	jmp	0x16c0


0x17c6:	push	0xf
0x17cb:	jmp	0x16c0


0x17d6:	push	0x10
0x17db:	jmp	0x16c0


0x17e6:	push	0x11
0x17eb:	jmp	0x16c0


0x17f6:	push	0x12
0x17fb:	jmp	0x16c0


0x1806:	push	0x13
0x180b:	jmp	0x16c0


0x1816:	push	0x14
0x181b:	jmp	0x16c0


0x1826:	push	0x15
0x182b:	jmp	0x16c0


0x1836:	push	0x16
0x183b:	jmp	0x16c0


0x1846:	push	0x17
0x184b:	jmp	0x16c0


0x1856:	push	0x18
0x185b:	jmp	0x16c0


0x1866:	push	0x19
0x186b:	jmp	0x16c0


0x1876:	push	0x1a
0x187b:	jmp	0x16c0


0x1886:	push	0x1b
0x188b:	jmp	0x16c0


0x1890:	jmp	qword ptr [rip + 0x20762a]




0x1896:	push	0x1c
0x189b:	jmp	0x16c0


0x18a6:	push	0x1d
0x18ab:	jmp	0x16c0


0x18b6:	push	0x1e
0x18bb:	jmp	0x16c0


0x18c6:	push	0x1f
0x18cb:	jmp	0x16c0


0x18d6:	push	0x20
0x18db:	jmp	0x16c0


0x18e6:	push	0x21
0x18eb:	jmp	0x16c0


0x18f6:	push	0x22
0x18fb:	jmp	0x16c0


0x1906:	push	0x23
0x190b:	jmp	0x16c0


0x1916:	push	0x24
0x191b:	jmp	0x16c0


0x1926:	push	0x25
0x192b:	jmp	0x16c0


0x1936:	push	0x26
0x193b:	jmp	0x16c0


0x1946:	push	0x27
0x194b:	jmp	0x16c0


0x1956:	push	0x28
0x195b:	jmp	0x16c0


0x1966:	push	0x29
0x196b:	jmp	0x16c0


0x1976:	push	0x2a
0x197b:	jmp	0x16c0


0x1986:	push	0x2b
0x198b:	jmp	0x16c0


0x1996:	push	0x2c
0x199b:	jmp	0x16c0


0x19a6:	push	0x2d
0x19ab:	jmp	0x16c0


0x19b6:	push	0x2e
0x19bb:	jmp	0x16c0


0x19c6:	push	0x2f
0x19cb:	jmp	0x16c0


0x19d6:	push	0x30
0x19db:	jmp	0x16c0


0x19e6:	push	0x31
0x19eb:	jmp	0x16c0


0x19f6:	push	0x32
0x19fb:	jmp	0x16c0


0x1a06:	push	0x33
0x1a0b:	jmp	0x16c0


0x1a16:	push	0x34
0x1a1b:	jmp	0x16c0


0x1a26:	push	0x35
0x1a2b:	jmp	0x16c0


0x1a36:	push	0x36
0x1a3b:	jmp	0x16c0


0x1a46:	push	0x37
0x1a4b:	jmp	0x16c0


0x1a56:	push	0x38
0x1a5b:	jmp	0x16c0


0x1a60:	jmp	qword ptr [rip + 0x207542]




0x1a66:	push	0x39
0x1a6b:	jmp	0x16c0


0x1a70:	jmp	qword ptr [rip + 0x20753a]




0x1a76:	push	0x3a
0x1a7b:	jmp	0x16c0


0x1a86:	push	0x3b
0x1a8b:	jmp	0x16c0


0x224a:	hlt	


0x224b:	nop	dword ptr [rax + rax]


0x2282:	nop	dword ptr [rax]
0x2286:	nop	word ptr cs:[rax + rax]


0x22d2:	nop	dword ptr [rax]
0x22d6:	nop	word ptr cs:[rax + rax]


0x231a:	nop	word ptr [rax + rax]


0x232a:	nop	word ptr [rax + rax]


0x298a:	nop	word ptr [rax + rax]


0x2998:	nop	dword ptr [rax + rax]


0x29a8:	nop	dword ptr [rax + rax]


0x2a54:	nop	word ptr cs:[rax + rax]
0x2a5e:	nop	


0x2aff:	nop	


0x2be7:	nop	word ptr [rax + rax]


0x2c83:	mov	byte ptr [rsp + 0xe], 1
0x2c88:	mov	byte ptr [rsp + 0x7c], 0
0x2c8d:	xor	r12d, r12d
0x2c90:	mov	qword ptr [rsp + 0x50], 0
0x2c99:	mov	byte ptr [rsp + 0xf], 1
0x2c9e:	mov	byte ptr [rsp + 0xd], 0
0x2ca3:	lea	rax, [rip + 0x3893]
0x2caa:	mov	qword ptr [rsp + 0x18], 1
0x2cb3:	xor	r15d, r15d
0x2cb6:	mov	dword ptr [rsp + 8], 2
0x2cbe:	mov	qword ptr [rsp + 0x48], rax
0x2cc3:	xor	r11d, r11d
0x2cc6:	mov	rax, rbp
0x2cc9:	mov	r8d, r12d
0x2ccc:	mov	rbp, r11
0x2ccf:	mov	r11, rax
0x2cd2:	nop	word ptr [rax + rax]
0x2cd8:	cmp	r11, rbp
0x2cdb:	setne	r12b
0x2cdf:	cmp	r11, -1
0x2ce3:	jne	0x2cf2


0x2ce5:	mov	rax, qword ptr [rsp + 0x10]
0x2cea:	cmp	byte ptr [rax + rbp], 0
0x2cee:	setne	r12b
0x2cf2:	test	r12b, r12b
0x2cf5:	je	0x3350


0x2cf2:	test	r12b, r12b
0x2cf5:	je	0x3350


0x3350:	cmp	dword ptr [rsp + 8], 2
0x3355:	movzx	ebx, byte ptr [rsp + 0xf]
0x335a:	mov	r12d, r8d
0x335d:	mov	rbp, r11
0x3360:	sete	dl
0x3363:	mov	eax, ebx
0x3365:	test	r15, r15
0x3368:	sete	cl
0x336b:	and	eax, edx
0x336d:	and	al, cl
0x336f:	jne	0x3dd6


0x2cfb:	cmp	dword ptr [rsp + 8], 2
0x2d00:	mov	rdi, qword ptr [rsp + 0x10]
0x2d05:	lea	r9, [rdi + rbp]
0x2d09:	setne	al
0x2d0c:	and	al, byte ptr [rsp + 0xd]
0x2d10:	mov	r10d, eax
0x2d13:	je	0x2dc0


0x3375:	mov	eax, ebx
0x3377:	xor	eax, 1
0x337a:	and	dl, al
0x337c:	je	0x3cec


0x3dd6:	mov	dword ptr [rsp + 8], 2
0x3dde:	jmp	0x3779


0x2dc0:	movzx	ebx, byte ptr [r9]
0x2dc4:	cmp	bl, 0x7e
0x2dc7:	ja	0x30e8


0x2d19:	mov	rax, qword ptr [rsp + 0x18]
0x2d1e:	test	rax, rax
0x2d21:	je	0x3150


0x3cec:	mov	rbx, qword ptr [rsp + 0x48]
0x3cf1:	test	rbx, rbx
0x3cf4:	je	0x3d22


0x3382:	cmp	byte ptr [rsp + 0x7c], 0
0x3387:	je	0x3cea


0x3779:	cmp	byte ptr [rsp + 0xd], 0
0x377e:	je	0x3790


0x2dcd:	lea	rcx, [rip + 0x37f8]
0x2dd4:	movzx	edx, bl
0x2dd7:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2ddb:	add	rax, rcx
0x2dde:	jmp	rax


0x30e8:	cmp	qword ptr [rsp + 0x58], 1
0x30ee:	jne	0x3498


0x3150:	movzx	ebx, byte ptr [r9]
0x3154:	cmp	bl, 0x7e
0x3157:	ja	0x30e0


0x2d27:	cmp	r11, -1
0x2d2b:	lea	rbx, [rbp + rax]
0x2d30:	jne	0x2d60


0x3d22:	cmp	r13, r15
0x3d25:	jbe	0x37c9


0x3cf6:	test	al, al
0x3cf8:	je	0x3d22


0x3cea:	mov	eax, edx
0x3cec:	mov	rbx, qword ptr [rsp + 0x48]
0x3cf1:	test	rbx, rbx
0x3cf4:	je	0x3d22


0x338d:	cmp	byte ptr [rsp + 0xe], 0
0x3392:	jne	0x3d8d


0x3780:	test	al, al
0x3782:	mov	eax, 4
0x3787:	cmove	eax, dword ptr [rsp + 8]
0x378c:	mov	dword ptr [rsp + 8], eax


0x30f4:	mov	qword ptr [rsp + 0x38], r11
0x30f9:	mov	byte ptr [rsp + 0x30], r8b
0x30fe:	mov	byte ptr [rsp + 0x28], r10b
0x3103:	call	0x1a80


0x3498:	lea	rax, [rsp + 0xa0]
0x34a0:	cmp	r11, -1
0x34a4:	mov	qword ptr [rsp + 0xa0], 0
0x34b0:	mov	qword ptr [rsp + 0x28], rax
0x34b5:	jne	0x34e4


0x3159:	lea	rcx, [rip + 0x3668]
0x3160:	movzx	edx, bl
0x3163:	movsxd	rax, dword ptr [rcx + rdx*4]
0x3167:	add	rax, rcx
0x316a:	jmp	rax


0x30e0:	xor	r10d, r10d
0x30e3:	nop	dword ptr [rax + rax]
0x30e8:	cmp	qword ptr [rsp + 0x58], 1
0x30ee:	jne	0x3498


0x2d32:	cmp	rax, 1
0x2d36:	jbe	0x2d60


0x2d60:	cmp	rbx, r11
0x2d63:	mov	byte ptr [rsp + 0x28], r10b
0x2d68:	ja	0x3320


0x3d2b:	mov	byte ptr [r14 + r15], 0
0x3d30:	jmp	0x37c9


0x3cfa:	movzx	ecx, byte ptr [rbx]
0x3cfd:	mov	rax, rbx
0x3d00:	test	cl, cl
0x3d02:	je	0x3d22


0x3398:	test	r13, r13
0x339b:	sete	al
0x339e:	cmp	qword ptr [rsp + 0x50], 0
0x33a4:	setne	dl
0x33a7:	and	al, dl
0x33a9:	je	0x3dcc


0x34b7:	mov	rdi, qword ptr [rsp + 0x10]
0x34bc:	mov	byte ptr [rsp + 0x40], r8b
0x34c1:	mov	byte ptr [rsp + 0x38], r10b
0x34c6:	mov	qword ptr [rsp + 0x30], r9
0x34cb:	call	0x17c0


0x34e4:	lea	rax, [rsp + 0x9c]
0x34ec:	xor	ecx, ecx
0x34ee:	mov	byte ptr [rsp + 0x7e], bl
0x34f2:	mov	byte ptr [rsp + 0x7d], r8b
0x34f7:	mov	rbx, rcx
0x34fa:	mov	qword ptr [rsp + 0x88], r9
0x3502:	mov	qword ptr [rsp + 0x38], rax
0x3507:	mov	byte ptr [rsp + 0x7f], r10b
0x350c:	mov	qword ptr [rsp + 0x80], r15
0x3514:	mov	qword ptr [rsp + 0x40], r14
0x3519:	mov	qword ptr [rsp + 0x70], r13
0x351e:	mov	qword ptr [rsp + 0x30], r11
0x3523:	mov	rax, qword ptr [rsp + 0x10]
0x3528:	lea	r14, [rbp + rbx]
0x352d:	mov	rdx, qword ptr [rsp + 0x30]
0x3532:	mov	rcx, qword ptr [rsp + 0x28]
0x3537:	mov	rdi, qword ptr [rsp + 0x38]
0x353c:	lea	r13, [rax + r14]
0x3540:	sub	rdx, r14
0x3543:	mov	rsi, r13
0x3546:	call	0x5930


0x2d38:	mov	byte ptr [rsp + 0x38], r8b
0x2d3d:	mov	byte ptr [rsp + 0x30], r10b
0x2d42:	mov	qword ptr [rsp + 0x28], r9
0x2d47:	call	0x17c0


0x2d6e:	mov	rdx, qword ptr [rsp + 0x18]
0x2d73:	mov	rsi, qword ptr [rsp + 0x48]
0x2d78:	mov	rdi, r9
0x2d7b:	mov	qword ptr [rsp + 0x40], r11
0x2d80:	mov	byte ptr [rsp + 0x38], r8b
0x2d85:	mov	qword ptr [rsp + 0x30], r9
0x2d8a:	call	0x1890


0x3320:	xor	r10d, r10d
0x3323:	jmp	0x2dc0


0x3d04:	mov	rdx, r15
0x3d07:	sub	rax, r15
0x3d0a:	cmp	r13, rdx
0x3d0d:	jbe	0x3d13


0x3dcc:	movzx	eax, byte ptr [rsp + 0x7c]
0x3dd1:	jmp	0x3cec


0x33af:	mov	r13, qword ptr [rsp + 0x50]
0x33b4:	lea	rbx, [rip + 0x3182]
0x33bb:	mov	byte ptr [r14], 0x27
0x33bf:	mov	dword ptr [rsp + 8], 2
0x33c7:	mov	r15d, 1
0x33cd:	mov	qword ptr [rsp + 0x18], 1
0x33d6:	mov	byte ptr [rsp + 0xf], 0
0x33db:	mov	qword ptr [rsp + 0x48], rbx
0x33e0:	mov	byte ptr [rsp + 0x7c], al
0x33e4:	jmp	0x2cc3


0x3d13:	add	rdx, 1
0x3d17:	movzx	ecx, byte ptr [rax + rdx]
0x3d1b:	test	cl, cl
0x3d1d:	jne	0x3d0a


0x3d0f:	mov	byte ptr [r14 + rdx], cl
0x3d13:	add	rdx, 1
0x3d17:	movzx	ecx, byte ptr [rax + rdx]
0x3d1b:	test	cl, cl
0x3d1d:	jne	0x3d0a


0x2cc3:	xor	r11d, r11d
0x2cc6:	mov	rax, rbp
0x2cc9:	mov	r8d, r12d
0x2ccc:	mov	rbp, r11
0x2ccf:	mov	r11, rax
0x2cd2:	nop	word ptr [rax + rax]
0x2cd8:	cmp	r11, rbp
0x2cdb:	setne	r12b
0x2cdf:	cmp	r11, -1
0x2ce3:	jne	0x2cf2


0x3d1f:	mov	r15, rdx
0x3d22:	cmp	r13, r15
0x3d25:	jbe	0x37c9


0x3d0a:	cmp	r13, rdx
0x3d0d:	jbe	0x3d13


0x2d8f:	test	eax, eax
0x2d91:	mov	r9, qword ptr [rsp + 0x30]
0x2d96:	movzx	r8d, byte ptr [rsp + 0x38]
0x2d9c:	mov	r11, qword ptr [rsp + 0x40]
0x2da1:	jne	0x3320


0x2da7:	cmp	byte ptr [rsp + 0xf], 0
0x2dac:	movzx	r10d, byte ptr [rsp + 0x28]
0x2db2:	jne	0x3d35


0x3d35:	cmp	dword ptr [rsp + 8], 2
0x3d3a:	movzx	ebx, byte ptr [rsp + 0xf]
0x3d3f:	mov	rbp, r11
0x3d42:	sete	al
0x3d45:	mov	byte ptr [rsp + 0xd], bl
0x3d49:	jmp	0x3779


0x354b:	test	rax, rax
0x354e:	mov	r15, rax
0x3551:	je	0x35a1


0x35a1:	mov	edx, r12d
0x35a4:	mov	rdi, rbx
0x35a7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x35ad:	xor	edx, 1
0x35b0:	movzx	ebx, byte ptr [rsp + 0x7e]
0x35b5:	movzx	r10d, byte ptr [rsp + 0x7f]
0x35bb:	and	dl, byte ptr [rsp + 0xd]
0x35bf:	mov	r15, qword ptr [rsp + 0x80]
0x35c7:	mov	r14, qword ptr [rsp + 0x40]
0x35cc:	mov	r13, qword ptr [rsp + 0x70]
0x35d1:	mov	r11, qword ptr [rsp + 0x30]
0x35d6:	cmp	rdi, 1
0x35da:	jbe	0x3bdb


0x3553:	cmp	rax, -1
0x3557:	je	0x3b75


0x3bdb:	mov	eax, edx
0x3bdd:	jmp	0x3137


0x35e0:	mov	rcx, rdi
0x35e3:	xor	esi, esi
0x35e5:	movzx	r9d, byte ptr [rsp + 0xf]
0x35eb:	add	rcx, rbp
0x35ee:	mov	rdi, qword ptr [rsp + 0x10]
0x35f3:	jmp	0x36ae


0x3b75:	mov	rdi, rbx
0x3b78:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3b7e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3b83:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3b89:	mov	r15, qword ptr [rsp + 0x80]
0x3b91:	xor	r12d, r12d
0x3b94:	mov	r14, qword ptr [rsp + 0x40]
0x3b99:	mov	r13, qword ptr [rsp + 0x70]
0x3b9e:	mov	r11, qword ptr [rsp + 0x30]
0x3ba3:	movzx	edx, byte ptr [rsp + 0xd]
0x3ba8:	jmp	0x35d6


0x355d:	cmp	rax, -2
0x3561:	je	0x3b01


0x3137:	test	al, al
0x3139:	jne	0x3ad1


0x36ae:	test	dl, dl
0x36b0:	jne	0x3600


0x35d6:	cmp	rdi, 1
0x35da:	jbe	0x3bdb


0x3b01:	mov	r11, qword ptr [rsp + 0x30]
0x3b06:	mov	rsi, r14
0x3b09:	mov	rcx, r13
0x3b0c:	mov	rax, rbx
0x3b0f:	mov	rdi, rbx
0x3b12:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3b18:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3b1d:	mov	r9, qword ptr [rsp + 0x88]
0x3b25:	cmp	rsi, r11
0x3b28:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3b2e:	mov	r15, qword ptr [rsp + 0x80]
0x3b36:	mov	r14, qword ptr [rsp + 0x40]
0x3b3b:	mov	r13, qword ptr [rsp + 0x70]
0x3b40:	jae	0x3b68


0x3567:	cmp	dword ptr [rsp + 8], 2
0x356c:	sete	al
0x356f:	and	al, byte ptr [rsp + 0xf]
0x3573:	jne	0x3710


0x313f:	cmp	dword ptr [rsp + 8], 2
0x3144:	sete	dl
0x3147:	jmp	0x2e18


0x3ad1:	movzx	edx, byte ptr [rsp + 0xd]
0x3ad6:	xor	r12d, r12d
0x3ad9:	jmp	0x35e0


0x36b6:	mov	eax, esi
0x36b8:	xor	eax, 1
0x36bb:	and	eax, r8d
0x36be:	test	r10b, r10b
0x36c1:	je	0x36d1


0x3600:	cmp	dword ptr [rsp + 8], 2
0x3605:	sete	al
0x3608:	test	r9b, r9b
0x360b:	jne	0x3ac0


0x3b42:	cmp	byte ptr [rcx], 0
0x3b45:	jne	0x3b57


0x3b68:	movzx	edx, byte ptr [rsp + 0xd]
0x3b6d:	xor	r12d, r12d
0x3b70:	jmp	0x35d6


0x3579:	mov	edi, dword ptr [rsp + 0x9c]
0x3580:	call	0x1a70


0x3710:	cmp	r15, 1
0x3714:	je	0x3579


0x2e18:	cmp	byte ptr [rsp + 0xd], 1
0x2e1d:	jne	0x2f32


0x36d1:	add	rbp, 1
0x36d5:	cmp	rbp, rcx
0x36d8:	jae	0x2e5c


0x36c3:	cmp	r13, r15
0x36c6:	jbe	0x36cd


0x3611:	mov	esi, r8d
0x3614:	xor	esi, 1
0x3617:	and	al, sil
0x361a:	je	0x364b


0x3ac0:	movzx	ebx, byte ptr [rsp + 0xf]
0x3ac5:	mov	rbp, r11
0x3ac8:	mov	byte ptr [rsp + 0xd], bl
0x3acc:	jmp	0x3779


0x3b47:	jmp	0x3b68


0x3b57:	add	rax, 1
0x3b5b:	lea	rdx, [rbp + rax]
0x3b60:	cmp	r11, rdx
0x3b63:	ja	0x3b50


0x371a:	mov	rdi, qword ptr [rsp + 0x10]
0x371f:	lea	rcx, [rdi + r15]
0x3723:	lea	rdx, [rdi + r14 + 1]
0x3728:	lea	r8, [rcx + r14]
0x372c:	jmp	0x373d


0x2e23:	test	dl, dl
0x2e25:	jne	0x2f32


0x2f32:	cmp	byte ptr [rsp + 0xf], 0
0x2f37:	jne	0x2e2b


0x36de:	test	al, al
0x36e0:	je	0x3ade


0x2e5c:	test	al, al
0x2e5e:	je	0x2e80


0x36cd:	add	r15, 1
0x36d1:	add	rbp, 1
0x36d5:	cmp	rbp, rcx
0x36d8:	jae	0x2e5c


0x36c8:	mov	byte ptr [r14 + r15], 0x5c
0x36cd:	add	r15, 1
0x36d1:	add	rbp, 1
0x36d5:	cmp	rbp, rcx
0x36d8:	jae	0x2e5c


0x364b:	cmp	r13, r15
0x364e:	jbe	0x3655


0x361c:	cmp	r13, r15
0x361f:	jbe	0x3626


0x3b65:	mov	rdi, rax
0x3b68:	movzx	edx, byte ptr [rsp + 0xd]
0x3b6d:	xor	r12d, r12d
0x3b70:	jmp	0x35d6


0x3b50:	cmp	byte ptr [r9 + rax], 0
0x3b55:	je	0x3b65


0x373d:	movzx	ecx, byte ptr [rdx]
0x3740:	sub	ecx, 0x5b
0x3743:	cmp	cl, 0x21
0x3746:	ja	0x3730


0x2e2b:	mov	rsi, qword ptr [rsp + 0x20]
0x2e30:	test	rsi, rsi
0x2e33:	je	0x2e49


0x2f3d:	jmp	0x2e49


0x3ade:	xor	r10d, r10d
0x3ae1:	jmp	0x369d


0x36e6:	cmp	r13, r15
0x36e9:	jbe	0x36f0


0x2e80:	cmp	r15, r13
0x2e83:	jae	0x2e89


0x2e60:	cmp	r13, r15
0x2e63:	jbe	0x2e6a


0x3655:	lea	rax, [r15 + 1]
0x3659:	cmp	r13, rax
0x365c:	jbe	0x366b


0x3650:	mov	byte ptr [r14 + r15], 0x5c
0x3655:	lea	rax, [r15 + 1]
0x3659:	cmp	r13, rax
0x365c:	jbe	0x366b


0x3626:	lea	rsi, [r15 + 1]
0x362a:	cmp	r13, rsi
0x362d:	jbe	0x3635


0x3621:	mov	byte ptr [r14 + r15], 0x27
0x3626:	lea	rsi, [r15 + 1]
0x362a:	cmp	r13, rsi
0x362d:	jbe	0x3635


0x3748:	mov	esi, 1
0x374d:	shl	rsi, cl
0x3750:	mov	rcx, rsi
0x3753:	movabs	rsi, 0x20000002b
0x375d:	test	rcx, rsi
0x3760:	je	0x3730


0x3730:	add	rdx, 1
0x3734:	cmp	r8, rdx
0x3737:	je	0x3579


0x2e49:	test	r10b, r10b
0x2e4c:	jne	0x2f93


0x2e35:	mov	edx, ebx
0x2e37:	shr	dl, 5
0x2e3a:	movzx	edx, dl
0x2e3d:	mov	edx, dword ptr [rsi + rdx*4]
0x2e40:	bt	edx, ebx
0x2e43:	jb	0x2f93


0x369d:	cmp	r13, r15
0x36a0:	jbe	0x36a6


0x36f0:	lea	rax, [r15 + 1]
0x36f4:	cmp	r13, rax
0x36f7:	jbe	0x36ff


0x36eb:	mov	byte ptr [r14 + r15], 0x27
0x36f0:	lea	rax, [r15 + 1]
0x36f4:	cmp	r13, rax
0x36f7:	jbe	0x36ff


0x2e85:	mov	byte ptr [r14 + r15], bl
0x2e89:	movzx	edi, byte ptr [rsp + 0xe]
0x2e8e:	add	r15, 1
0x2e92:	mov	eax, 0
0x2e97:	test	r12b, r12b
0x2e9a:	cmove	edi, eax
0x2e9d:	mov	byte ptr [rsp + 0xe], dil
0x2ea2:	jmp	0x2cd8


0x2e89:	movzx	edi, byte ptr [rsp + 0xe]
0x2e8e:	add	r15, 1
0x2e92:	mov	eax, 0
0x2e97:	test	r12b, r12b
0x2e9a:	cmove	edi, eax
0x2e9d:	mov	byte ptr [rsp + 0xe], dil
0x2ea2:	jmp	0x2cd8


0x2e6a:	lea	rax, [r15 + 1]
0x2e6e:	cmp	r13, rax
0x2e71:	jbe	0x2e79


0x2e65:	mov	byte ptr [r14 + r15], 0x27
0x2e6a:	lea	rax, [r15 + 1]
0x2e6e:	cmp	r13, rax
0x2e71:	jbe	0x2e79


0x366b:	lea	rax, [r15 + 2]
0x366f:	cmp	r13, rax
0x3672:	jbe	0x3684


0x365e:	mov	eax, ebx
0x3660:	shr	al, 6
0x3663:	add	eax, 0x30
0x3666:	mov	byte ptr [r14 + r15 + 1], al
0x366b:	lea	rax, [r15 + 2]
0x366f:	cmp	r13, rax
0x3672:	jbe	0x3684


0x3635:	lea	rsi, [r15 + 2]
0x3639:	cmp	r13, rsi
0x363c:	jbe	0x3644


0x362f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x3635:	lea	rsi, [r15 + 2]
0x3639:	cmp	r13, rsi
0x363c:	jbe	0x3644


0x3762:	mov	r14, qword ptr [rsp + 0x40]
0x3767:	mov	r13, qword ptr [rsp + 0x70]
0x376c:	mov	rbp, qword ptr [rsp + 0x30]
0x3771:	mov	dword ptr [rsp + 8], 2
0x3779:	cmp	byte ptr [rsp + 0xd], 0
0x377e:	je	0x3790


0x2e52:	xor	eax, 1
0x2e55:	add	rbp, 1
0x2e59:	and	eax, r8d
0x2e5c:	test	al, al
0x2e5e:	je	0x2e80


0x2f93:	cmp	dword ptr [rsp + 8], 2
0x2f98:	sete	dl
0x2f9b:	cmp	byte ptr [rsp + 0xf], 0
0x2fa0:	mov	eax, edx
0x2fa2:	jne	0x37f8


0x36a6:	movzx	ebx, byte ptr [rdi + rbp]
0x36aa:	add	r15, 1
0x36ae:	test	dl, dl
0x36b0:	jne	0x3600


0x36a2:	mov	byte ptr [r14 + r15], bl
0x36a6:	movzx	ebx, byte ptr [rdi + rbp]
0x36aa:	add	r15, 1
0x36ae:	test	dl, dl
0x36b0:	jne	0x3600


0x36ff:	add	r15, 2
0x3703:	xor	r10d, r10d
0x3706:	xor	r8d, r8d
0x3709:	jmp	0x369d


0x36f9:	mov	byte ptr [r14 + r15 + 1], 0x27
0x36ff:	add	r15, 2
0x3703:	xor	r10d, r10d
0x3706:	xor	r8d, r8d
0x3709:	jmp	0x369d


0x2cd8:	cmp	r11, rbp
0x2cdb:	setne	r12b
0x2cdf:	cmp	r11, -1
0x2ce3:	jne	0x2cf2


0x2e79:	add	r15, 2
0x2e7d:	xor	r8d, r8d
0x2e80:	cmp	r15, r13
0x2e83:	jae	0x2e89


0x2e73:	mov	byte ptr [r14 + r15 + 1], 0x27
0x2e79:	add	r15, 2
0x2e7d:	xor	r8d, r8d
0x2e80:	cmp	r15, r13
0x2e83:	jae	0x2e89


0x3684:	and	ebx, 7
0x3687:	add	rbp, 1
0x368b:	add	r15, 3
0x368f:	add	ebx, 0x30
0x3692:	cmp	rbp, rcx
0x3695:	jae	0x2e80


0x3674:	mov	eax, ebx
0x3676:	shr	al, 3
0x3679:	and	eax, 7
0x367c:	add	eax, 0x30
0x367f:	mov	byte ptr [r14 + r15 + 2], al
0x3684:	and	ebx, 7
0x3687:	add	rbp, 1
0x368b:	add	r15, 3
0x368f:	add	ebx, 0x30
0x3692:	cmp	rbp, rcx
0x3695:	jae	0x2e80


0x3644:	add	r15, 3
0x3648:	mov	r8d, eax
0x364b:	cmp	r13, r15
0x364e:	jbe	0x3655


0x363e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3644:	add	r15, 3
0x3648:	mov	r8d, eax
0x364b:	cmp	r13, r15
0x364e:	jbe	0x3655


0x2fa8:	mov	eax, r8d
0x2fab:	xor	eax, 1
0x2fae:	and	al, dl
0x2fb0:	je	0x2fe1


0x37f8:	mov	rbp, r11
0x37fb:	jmp	0x3779


0x369b:	mov	esi, edx
0x369d:	cmp	r13, r15
0x36a0:	jbe	0x36a6


0x2fe1:	cmp	r13, r15
0x2fe4:	jbe	0x2feb


0x2fb2:	cmp	r13, r15
0x2fb5:	jbe	0x2fbc


0x2feb:	add	r15, 1
0x2fef:	add	rbp, 1
0x2ff3:	jmp	0x2e80


0x2fe6:	mov	byte ptr [r14 + r15], 0x5c
0x2feb:	add	r15, 1
0x2fef:	add	rbp, 1
0x2ff3:	jmp	0x2e80


0x2fbc:	lea	rdx, [r15 + 1]
0x2fc0:	cmp	r13, rdx
0x2fc3:	jbe	0x2fcb


0x2fb7:	mov	byte ptr [r14 + r15], 0x27
0x2fbc:	lea	rdx, [r15 + 1]
0x2fc0:	cmp	r13, rdx
0x2fc3:	jbe	0x2fcb


0x2fcb:	lea	rdx, [r15 + 2]
0x2fcf:	cmp	r13, rdx
0x2fd2:	jbe	0x2fda


0x2fc5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x2fcb:	lea	rdx, [r15 + 2]
0x2fcf:	cmp	r13, rdx
0x2fd2:	jbe	0x2fda


0x2fda:	add	r15, 3
0x2fde:	mov	r8d, eax
0x2fe1:	cmp	r13, r15
0x2fe4:	jbe	0x2feb


0x2fd4:	mov	byte ptr [r14 + r15 + 2], 0x27
0x2fda:	add	r15, 3
0x2fde:	mov	r8d, eax
0x2fe1:	cmp	r13, r15
0x2fe4:	jbe	0x2feb


0x3585:	mov	rdi, qword ptr [rsp + 0x28]
0x358a:	test	eax, eax
0x358c:	mov	eax, 0
0x3591:	cmove	r12d, eax
0x3595:	add	rbx, r15
0x3598:	call	0x1a60


0x359d:	test	eax, eax
0x359f:	je	0x3523


0x3523:	mov	rax, qword ptr [rsp + 0x10]
0x3528:	lea	r14, [rbp + rbx]
0x352d:	mov	rdx, qword ptr [rsp + 0x30]
0x3532:	mov	rcx, qword ptr [rsp + 0x28]
0x3537:	mov	rdi, qword ptr [rsp + 0x38]
0x353c:	lea	r13, [rax + r14]
0x3540:	sub	rdx, r14
0x3543:	mov	rsi, r13
0x3546:	call	0x5930


0x2d4c:	movzx	r8d, byte ptr [rsp + 0x38]
0x2d52:	movzx	r10d, byte ptr [rsp + 0x30]
0x2d58:	mov	r11, rax
0x2d5b:	mov	r9, qword ptr [rsp + 0x28]
0x2d60:	cmp	rbx, r11
0x2d63:	mov	byte ptr [rsp + 0x28], r10b
0x2d68:	ja	0x3320


0x34d0:	movzx	r8d, byte ptr [rsp + 0x40]
0x34d6:	movzx	r10d, byte ptr [rsp + 0x38]
0x34dc:	mov	r11, rax
0x34df:	mov	r9, qword ptr [rsp + 0x30]
0x34e4:	lea	rax, [rsp + 0x9c]
0x34ec:	xor	ecx, ecx
0x34ee:	mov	byte ptr [rsp + 0x7e], bl
0x34f2:	mov	byte ptr [rsp + 0x7d], r8b
0x34f7:	mov	rbx, rcx
0x34fa:	mov	qword ptr [rsp + 0x88], r9
0x3502:	mov	qword ptr [rsp + 0x38], rax
0x3507:	mov	byte ptr [rsp + 0x7f], r10b
0x350c:	mov	qword ptr [rsp + 0x80], r15
0x3514:	mov	qword ptr [rsp + 0x40], r14
0x3519:	mov	qword ptr [rsp + 0x70], r13
0x351e:	mov	qword ptr [rsp + 0x30], r11
0x3523:	mov	rax, qword ptr [rsp + 0x10]
0x3528:	lea	r14, [rbp + rbx]
0x352d:	mov	rdx, qword ptr [rsp + 0x30]
0x3532:	mov	rcx, qword ptr [rsp + 0x28]
0x3537:	mov	rdi, qword ptr [rsp + 0x38]
0x353c:	lea	r13, [rax + r14]
0x3540:	sub	rdx, r14
0x3543:	mov	rsi, r13
0x3546:	call	0x5930


0x3108:	mov	rcx, qword ptr [rax]
0x310b:	movzx	edx, bl
0x310e:	movzx	r10d, byte ptr [rsp + 0x28]
0x3114:	movzx	r8d, byte ptr [rsp + 0x30]
0x311a:	mov	r11, qword ptr [rsp + 0x38]
0x311f:	mov	edi, 1
0x3124:	movzx	eax, word ptr [rcx + rdx*2]
0x3128:	and	ax, 0x4000
0x312c:	setne	r12b
0x3130:	sete	al
0x3133:	and	al, byte ptr [rsp + 0xd]
0x3137:	test	al, al
0x3139:	jne	0x3ad1


0x2de0:	xor	r10d, r10d
0x2de3:	cmp	r11, 1
0x2de7:	setne	al
0x2dea:	cmp	r11, -1
0x2dee:	jne	0x2dfc


0x2df0:	mov	rax, qword ptr [rsp + 0x10]
0x2df5:	cmp	byte ptr [rax + 1], 0
0x2df9:	setne	al
0x2dfc:	cmp	dword ptr [rsp + 8], 2
0x2e01:	sete	dl
0x2e04:	test	al, al
0x2e06:	je	0x3058


0x2dfc:	cmp	dword ptr [rsp + 8], 2
0x2e01:	sete	dl
0x2e04:	test	al, al
0x2e06:	je	0x3058


0x3058:	test	rbp, rbp
0x305b:	jne	0x2e0c


0x2e0c:	xor	r12d, r12d
0x2e0f:	xor	eax, eax
0x2e11:	nop	dword ptr [rax]
0x2e18:	cmp	byte ptr [rsp + 0xd], 1
0x2e1d:	jne	0x2f32


0x3061:	movzx	eax, byte ptr [rsp + 0xf]
0x3066:	and	al, dl
0x3068:	je	0x2e18


0x306e:	mov	rbp, r11
0x3071:	mov	dword ptr [rsp + 8], 2
0x3079:	jmp	0x3779


0x3478:	cmp	byte ptr [rsp + 0xf], 0
0x347d:	jne	0x3ca0


0x2ec0:	cmp	eax, 5
0x2ec3:	je	0x3438


0x3483:	xor	r12d, r12d
0x3486:	xor	eax, eax
0x3488:	mov	ebx, 0x3f
0x348d:	jmp	0x2e49


0x3ca0:	mov	rbp, r11
0x3ca3:	movzx	eax, byte ptr [rsp + 0xf]
0x3ca8:	jmp	0x3779


0x3438:	test	byte ptr [rsp + 0x78], 4
0x343d:	je	0x3460


0x2ec9:	cmp	eax, 2
0x2ecc:	mov	ebx, 0x3f
0x2ed1:	sete	dl
0x2ed4:	xor	r12d, r12d
0x2ed7:	xor	eax, eax
0x2ed9:	jmp	0x2e18


0x3460:	xor	edx, edx
0x3462:	xor	r12d, r12d
0x3465:	xor	eax, eax
0x3467:	mov	ebx, 0x3f
0x346c:	jmp	0x2e18


0x343f:	lea	rcx, [rbp + 2]
0x3443:	cmp	rcx, r11
0x3446:	jae	0x3460


0x3448:	mov	rax, qword ptr [rsp + 0x10]
0x344d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x3452:	je	0x3be2


0x3be2:	movzx	ebx, byte ptr [rax + rcx]
0x3be6:	cmp	bl, 0x3e
0x3be9:	ja	0x3460


0x3bef:	movabs	rax, 0x7000a38200000000
0x3bf9:	bt	rax, rbx
0x3bfd:	jae	0x3460


0x3c03:	cmp	byte ptr [rsp + 0xf], 0
0x3c08:	jne	0x3df2


0x3c0e:	cmp	r13, r15
0x3c11:	jbe	0x3c18


0x3df2:	mov	rbp, r11
0x3df5:	jmp	0x3790


0x3c18:	lea	rax, [r15 + 1]
0x3c1c:	cmp	r13, rax
0x3c1f:	jbe	0x3c27


0x3c13:	mov	byte ptr [r14 + r15], 0x3f
0x3c18:	lea	rax, [r15 + 1]
0x3c1c:	cmp	r13, rax
0x3c1f:	jbe	0x3c27


0x3c27:	lea	rax, [r15 + 2]
0x3c2b:	cmp	r13, rax
0x3c2e:	jbe	0x3c36


0x3c21:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3c27:	lea	rax, [r15 + 2]
0x3c2b:	cmp	r13, rax
0x3c2e:	jbe	0x3c36


0x3c36:	lea	rax, [r15 + 3]
0x3c3a:	cmp	r13, rax
0x3c3d:	jbe	0x3c45


0x3c30:	mov	byte ptr [r14 + r15 + 2], 0x22
0x3c36:	lea	rax, [r15 + 3]
0x3c3a:	cmp	r13, rax
0x3c3d:	jbe	0x3c45


0x3c45:	add	r15, 4
0x3c49:	xor	edx, edx
0x3c4b:	xor	r12d, r12d
0x3c4e:	xor	eax, eax
0x3c50:	mov	rbp, rcx
0x3c53:	jmp	0x2e18


0x3c3f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x3c45:	add	r15, 4
0x3c49:	xor	edx, edx
0x3c4b:	xor	r12d, r12d
0x3c4e:	xor	eax, eax
0x3c50:	mov	rbp, rcx
0x3c53:	jmp	0x2e18


0x33f0:	cmp	byte ptr [rsp + 0xf], 0
0x33f5:	jne	0x3ca0


0x2eee:	mov	byte ptr [rsp + 0x7c], r12b
0x2ef3:	xor	edx, edx
0x2ef5:	xor	eax, eax
0x2ef7:	mov	ebx, 0x27
0x2efc:	jmp	0x2e18


0x33fb:	test	r13, r13
0x33fe:	je	0x3800


0x3800:	cmp	r13, r15
0x3803:	jbe	0x380a


0x3404:	xor	edx, edx
0x3406:	cmp	qword ptr [rsp + 0x50], 0
0x340c:	jne	0x3800


0x380a:	lea	rax, [r15 + 1]
0x380e:	cmp	r13, rax
0x3811:	jbe	0x3819


0x3805:	mov	byte ptr [r14 + r15], 0x27
0x380a:	lea	rax, [r15 + 1]
0x380e:	cmp	r13, rax
0x3811:	jbe	0x3819


0x3412:	mov	qword ptr [rsp + 0x50], r13
0x3417:	add	r15, 3
0x341b:	xor	eax, eax
0x341d:	mov	byte ptr [rsp + 0x7c], r12b
0x3422:	xor	r8d, r8d
0x3425:	mov	r13, rdx
0x3428:	mov	ebx, 0x27
0x342d:	jmp	0x2e49


0x3819:	lea	rax, [r15 + 2]
0x381d:	cmp	r13, rax
0x3820:	jbe	0x3e12


0x3813:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x3819:	lea	rax, [r15 + 2]
0x381d:	cmp	r13, rax
0x3820:	jbe	0x3e12


0x3e12:	mov	rdx, r13
0x3e15:	mov	r13, qword ptr [rsp + 0x50]
0x3e1a:	jmp	0x3412


0x3826:	mov	rdx, r13
0x3829:	mov	byte ptr [r14 + r15 + 2], 0x27
0x382f:	mov	r13, qword ptr [rsp + 0x50]
0x3834:	jmp	0x3412


0x2f24:	cmp	byte ptr [rsp + 0xd], 0
0x2f29:	jne	0x2f90


0x2f2b:	mov	ebx, edx
0x2f2d:	xor	r12d, r12d
0x2f30:	xor	eax, eax
0x2f32:	cmp	byte ptr [rsp + 0xf], 0
0x2f37:	jne	0x2e2b


0x2f90:	xor	r12d, r12d
0x2f93:	cmp	dword ptr [rsp + 8], 2
0x2f98:	sete	dl
0x2f9b:	cmp	byte ptr [rsp + 0xf], 0
0x2fa0:	mov	eax, edx
0x2fa2:	jne	0x37f8


0x3330:	cmp	byte ptr [rsp + 0xf], 0
0x3335:	jne	0x3ca0


0x2f63:	cmp	byte ptr [rsp + 0xd], 0
0x2f68:	je	0x3180


0x333b:	add	rbp, 1
0x333f:	mov	eax, r8d
0x3342:	xor	r12d, r12d
0x3345:	mov	ebx, 0x5c
0x334a:	jmp	0x2e5c


0x3180:	mov	edx, 0x5c
0x3185:	mov	ebx, 0x5c
0x318a:	jmp	0x2f24


0x2f6e:	cmp	byte ptr [rsp + 0xf], 0
0x2f73:	je	0x3180


0x2f79:	cmp	qword ptr [rsp + 0x18], 0
0x2f7f:	jne	0x333b


0x2f85:	mov	ebx, 0x5c
0x2f8a:	nop	word ptr [rax + rax]
0x2f90:	xor	r12d, r12d
0x2f93:	cmp	dword ptr [rsp + 8], 2
0x2f98:	sete	dl
0x2f9b:	cmp	byte ptr [rsp + 0xf], 0
0x2fa0:	mov	eax, edx
0x2fa2:	jne	0x37f8


0x300b:	xor	edx, edx
0x300d:	test	byte ptr [rsp + 0x78], 1
0x3012:	je	0x2f2b


0x31d3:	cmp	dword ptr [rsp + 8], 2
0x31d8:	sete	dl
0x31db:	cmp	byte ptr [rsp + 0xf], 0
0x31e0:	jne	0x3d7a


0x3018:	add	rbp, 1
0x301c:	jmp	0x2cd8


0x31e6:	mov	eax, r8d
0x31e9:	mov	rcx, r15
0x31ec:	xor	eax, 1
0x31ef:	and	al, dl
0x31f1:	je	0x3220


0x3d7a:	movzx	ebx, byte ptr [rsp + 0xf]
0x3d7f:	mov	rbp, r11
0x3d82:	mov	eax, edx
0x3d84:	mov	byte ptr [rsp + 0xd], bl
0x3d88:	jmp	0x3779


0x3220:	cmp	r13, rcx
0x3223:	jbe	0x322a


0x31f3:	cmp	r13, r15
0x31f6:	jbe	0x31fd


0x322a:	cmp	dword ptr [rsp + 8], 2
0x322f:	lea	r15, [rcx + 1]
0x3233:	je	0x3839


0x3225:	mov	byte ptr [r14 + rcx], 0x5c
0x322a:	cmp	dword ptr [rsp + 8], 2
0x322f:	lea	r15, [rcx + 1]
0x3233:	je	0x3839


0x31fd:	lea	rcx, [r15 + 1]
0x3201:	cmp	r13, rcx
0x3204:	jbe	0x320c


0x31f8:	mov	byte ptr [r14 + r15], 0x27
0x31fd:	lea	rcx, [r15 + 1]
0x3201:	cmp	r13, rcx
0x3204:	jbe	0x320c


0x3839:	mov	eax, r12d
0x383c:	mov	ebx, 0x30
0x3841:	xor	r12d, r12d
0x3844:	jmp	0x2e49


0x3239:	lea	rax, [rbp + 1]
0x323d:	cmp	rax, r11
0x3240:	jae	0x325b


0x320c:	lea	rcx, [r15 + 2]
0x3210:	cmp	r13, rcx
0x3213:	ja	0x3849


0x3206:	mov	byte ptr [r14 + r15 + 1], 0x24
0x320c:	lea	rcx, [r15 + 2]
0x3210:	cmp	r13, rcx
0x3213:	ja	0x3849


0x3242:	mov	rax, qword ptr [rsp + 0x10]
0x3247:	movzx	eax, byte ptr [rax + rbp + 1]
0x324c:	mov	byte ptr [rsp + 0x28], al
0x3250:	sub	eax, 0x30
0x3253:	cmp	al, 9
0x3255:	jbe	0x3a89


0x325b:	mov	eax, r12d
0x325e:	mov	ebx, 0x30
0x3263:	xor	r12d, r12d
0x3266:	jmp	0x2e18


0x3219:	lea	rcx, [r15 + 3]
0x321d:	mov	r8d, eax
0x3220:	cmp	r13, rcx
0x3223:	jbe	0x322a


0x3849:	mov	byte ptr [r14 + r15 + 2], 0x27
0x384f:	jmp	0x3219


0x3a89:	cmp	r13, r15
0x3a8c:	jbe	0x3a93


0x3a93:	lea	rax, [rcx + 2]
0x3a97:	cmp	r13, rax
0x3a9a:	jbe	0x3aa2


0x3a8e:	mov	byte ptr [r14 + r15], 0x30
0x3a93:	lea	rax, [rcx + 2]
0x3a97:	cmp	r13, rax
0x3a9a:	jbe	0x3aa2


0x3aa2:	mov	eax, r12d
0x3aa5:	lea	r15, [rcx + 3]
0x3aa9:	xor	r12d, r12d
0x3aac:	mov	ebx, 0x30
0x3ab1:	jmp	0x2e18


0x3a9c:	mov	byte ptr [r14 + rcx + 2], 0x30
0x3aa2:	mov	eax, r12d
0x3aa5:	lea	r15, [rcx + 3]
0x3aa9:	xor	r12d, r12d
0x3aac:	mov	ebx, 0x30
0x3ab1:	jmp	0x2e18


0x2f12:	cmp	dword ptr [rsp + 8], 2
0x2f17:	sete	al
0x2f1a:	and	al, byte ptr [rsp + 0xf]
0x2f1e:	jne	0x306e


0x32d0:	mov	edx, 0xd
0x32d5:	xor	r10d, r10d
0x32d8:	mov	ebx, 0x72
0x32dd:	jmp	0x2f12


0x3854:	test	ebx, ebx
0x3856:	jne	0x2c83


0x385c:	mov	byte ptr [rsp + 0xd], 1
0x3861:	test	r13, r13
0x3864:	jne	0x3dfa


0x386a:	lea	rax, [rip + 0x2ccc]
0x3871:	mov	qword ptr [rsp + 0x50], 0
0x387a:	mov	byte ptr [rsp + 0xe], 1
0x387f:	mov	byte ptr [rsp + 0x7c], 0
0x3884:	xor	r12d, r12d
0x3887:	mov	byte ptr [rsp + 0xf], 0
0x388c:	mov	qword ptr [rsp + 0x18], 1
0x3895:	mov	qword ptr [rsp + 0x48], rax
0x389a:	mov	r15d, 1
0x38a0:	mov	dword ptr [rsp + 8], 2
0x38a8:	jmp	0x2cc3


0x3dfa:	mov	byte ptr [rsp + 0xe], 1
0x3dff:	xor	eax, eax
0x3e01:	xor	r12d, r12d
0x3e04:	mov	qword ptr [rsp + 0x50], 0
0x3e0d:	jmp	0x33b4


0x33b4:	lea	rbx, [rip + 0x3182]
0x33bb:	mov	byte ptr [r14], 0x27
0x33bf:	mov	dword ptr [rsp + 8], 2
0x33c7:	mov	r15d, 1
0x33cd:	mov	qword ptr [rsp + 0x18], 1
0x33d6:	mov	byte ptr [rsp + 0xf], 0
0x33db:	mov	qword ptr [rsp + 0x48], rbx
0x33e0:	mov	byte ptr [rsp + 0x7c], al
0x33e4:	jmp	0x2cc3


0x38b8:	test	r13, r13
0x38bb:	je	0x3ae6


0x3cad:	lea	rax, [rip + 0x2887]
0x3cb4:	mov	byte ptr [rsp + 0xe], 1
0x3cb9:	mov	byte ptr [rsp + 0x7c], 0
0x3cbe:	xor	r12d, r12d
0x3cc1:	mov	qword ptr [rsp + 0x50], 0
0x3cca:	mov	byte ptr [rsp + 0xf], 1
0x3ccf:	mov	byte ptr [rsp + 0xd], 1
0x3cd4:	mov	qword ptr [rsp + 0x18], 1
0x3cdd:	xor	r15d, r15d
0x3ce0:	mov	qword ptr [rsp + 0x48], rax
0x3ce5:	jmp	0x2cc3


0x3ae6:	mov	qword ptr [rsp + 0x50], 0
0x3aef:	mov	byte ptr [rsp + 0xe], 1
0x3af4:	xor	r12d, r12d
0x3af7:	mov	byte ptr [rsp + 0x7c], 0
0x3afc:	jmp	0x38db


0x38c1:	mov	byte ptr [r14], 0x22
0x38c5:	mov	byte ptr [rsp + 0xe], 1
0x38ca:	xor	r12d, r12d
0x38cd:	mov	byte ptr [rsp + 0x7c], 0
0x38d2:	mov	qword ptr [rsp + 0x50], 0
0x38db:	lea	rax, [rip + 0x2c59]
0x38e2:	mov	byte ptr [rsp + 0xf], 0
0x38e7:	mov	byte ptr [rsp + 0xd], 1
0x38ec:	mov	qword ptr [rsp + 0x18], 1
0x38f5:	mov	r15d, 1
0x38fb:	mov	qword ptr [rsp + 0x48], rax
0x3900:	jmp	0x2cc3


0x38db:	lea	rax, [rip + 0x2c59]
0x38e2:	mov	byte ptr [rsp + 0xf], 0
0x38e7:	mov	byte ptr [rsp + 0xd], 1
0x38ec:	mov	qword ptr [rsp + 0x18], 1
0x38f5:	mov	r15d, 1
0x38fb:	mov	qword ptr [rsp + 0x48], rax
0x3900:	jmp	0x2cc3


0x3905:	lea	rax, [rip + 0x2c2f]
0x390c:	mov	byte ptr [rsp + 0xe], 1
0x3911:	mov	byte ptr [rsp + 0x7c], 0
0x3916:	xor	r12d, r12d
0x3919:	mov	qword ptr [rsp + 0x50], 0
0x3922:	mov	byte ptr [rsp + 0xf], 1
0x3927:	mov	byte ptr [rsp + 0xd], 1
0x392c:	mov	qword ptr [rsp + 0x18], 1
0x3935:	xor	r15d, r15d
0x3938:	mov	qword ptr [rsp + 0x48], rax
0x393d:	mov	dword ptr [rsp + 8], 5
0x3945:	jmp	0x2cc3


0x394a:	mov	byte ptr [rsp + 0xe], 1
0x394f:	mov	byte ptr [rsp + 0x7c], 0
0x3954:	xor	r12d, r12d
0x3957:	mov	qword ptr [rsp + 0x50], 0
0x3960:	mov	byte ptr [rsp + 0xf], 0
0x3965:	xor	r15d, r15d
0x3968:	mov	byte ptr [rsp + 0xd], 1
0x396d:	mov	qword ptr [rsp + 0x18], 0
0x3976:	mov	qword ptr [rsp + 0x48], 0
0x397f:	jmp	0x2cc3


0x3984:	cmp	dword ptr [rsp + 8], 0xa
0x3989:	je	0x39e1


0x39e1:	xor	r15d, r15d
0x39e4:	test	ebx, ebx
0x39e6:	je	0x3bad


0x398b:	lea	rsi, [rip + 0x2bad]
0x3992:	xor	edi, edi
0x3994:	mov	edx, 5
0x3999:	call	0x17a0


0x3bad:	mov	rdx, qword ptr [rsp + 0x68]
0x3bb2:	movzx	eax, byte ptr [rdx]
0x3bb5:	test	al, al
0x3bb7:	je	0x39ec


0x39ec:	test	ebx, ebx
0x39ee:	mov	rbx, qword ptr [rsp + 0x60]
0x39f3:	setne	byte ptr [rsp + 0xf]
0x39f8:	xor	r12d, r12d
0x39fb:	mov	rdi, rbx
0x39fe:	call	0x17c0


0x3bc9:	add	r15, 1
0x3bcd:	movzx	eax, byte ptr [rdx + r15]
0x3bd2:	test	al, al
0x3bd4:	jne	0x3bc0


0x3bc5:	mov	byte ptr [r14 + r15], al
0x3bc9:	add	r15, 1
0x3bcd:	movzx	eax, byte ptr [rdx + r15]
0x3bd2:	test	al, al
0x3bd4:	jne	0x3bc0


0x3bd6:	jmp	0x39ec


0x3bc0:	cmp	r13, r15
0x3bc3:	jbe	0x3bc9


0x3a03:	mov	qword ptr [rsp + 0x48], rbx
0x3a08:	mov	qword ptr [rsp + 0x18], rax
0x3a0d:	mov	byte ptr [rsp + 0xe], 1
0x3a12:	mov	byte ptr [rsp + 0x7c], 0
0x3a17:	mov	qword ptr [rsp + 0x50], 0
0x3a20:	mov	byte ptr [rsp + 0xd], 1
0x3a25:	jmp	0x2cc3


0x399e:	mov	rcx, rax
0x39a1:	mov	qword ptr [rsp + 0x68], rax
0x39a6:	lea	rax, [rip + 0x2b92]
0x39ad:	cmp	rcx, rax
0x39b0:	je	0x3d4e


0x3d4e:	mov	esi, dword ptr [rsp + 8]
0x3d52:	mov	rdi, rcx
0x3d55:	call	0x2b00


0x39b6:	lea	rsi, [rip + 0x2b80]
0x39bd:	xor	edi, edi
0x39bf:	mov	edx, 5
0x39c4:	call	0x17a0


0x39c9:	mov	rcx, rax
0x39cc:	mov	qword ptr [rsp + 0x60], rax
0x39d1:	lea	rax, [rip + 0x2b65]
0x39d8:	cmp	rcx, rax
0x39db:	je	0x3d64


0x3d64:	mov	esi, dword ptr [rsp + 8]
0x3d68:	mov	rdi, rcx
0x3d6b:	call	0x2b00


0x3d70:	mov	qword ptr [rsp + 0x60], rax
0x3d75:	jmp	0x39e1


0x3d5a:	mov	qword ptr [rsp + 0x68], rax
0x3d5f:	jmp	0x39b6


0x3a2a:	mov	byte ptr [rsp + 0xe], 1
0x3a2f:	mov	byte ptr [rsp + 0x7c], 0
0x3a34:	xor	r12d, r12d
0x3a37:	mov	qword ptr [rsp + 0x50], 0
0x3a40:	mov	byte ptr [rsp + 0xf], 0
0x3a45:	xor	r15d, r15d
0x3a48:	mov	byte ptr [rsp + 0xd], 0
0x3a4d:	mov	qword ptr [rsp + 0x18], 0
0x3a56:	mov	qword ptr [rsp + 0x48], 0
0x3a5f:	jmp	0x2cc3


0x3a64:	mov	byte ptr [rsp + 0xe], 1
0x3a69:	mov	byte ptr [rsp + 0x7c], 0
0x3a6e:	xor	r12d, r12d
0x3a71:	mov	qword ptr [rsp + 0x50], 0
0x3a7a:	mov	byte ptr [rsp + 0xf], 1
0x3a7f:	mov	byte ptr [rsp + 0xd], 1
0x3a84:	jmp	0x2ca3


0x2ca3:	lea	rax, [rip + 0x3893]
0x2caa:	mov	qword ptr [rsp + 0x18], 1
0x2cb3:	xor	r15d, r15d
0x2cb6:	mov	dword ptr [rsp + 8], 2
0x2cbe:	mov	qword ptr [rsp + 0x48], rax
0x2cc3:	xor	r11d, r11d
0x2cc6:	mov	rax, rbp
0x2cc9:	mov	r8d, r12d
0x2ccc:	mov	rbp, r11
0x2ccf:	mov	r11, rax
0x2cd2:	nop	word ptr [rax + rax]
0x2cd8:	cmp	r11, rbp
0x2cdb:	setne	r12b
0x2cdf:	cmp	r11, -1
0x2ce3:	jne	0x2cf2


0x3c58:	test	ebx, ebx
0x3c5a:	je	0x3de8


0x3de8:	mov	byte ptr [rsp + 0xd], 0
0x3ded:	jmp	0x3861


0x3c60:	lea	rax, [rip + 0x28d6]
0x3c67:	mov	byte ptr [rsp + 0xe], 1
0x3c6c:	mov	byte ptr [rsp + 0x7c], 0
0x3c71:	xor	r12d, r12d
0x3c74:	mov	qword ptr [rsp + 0x50], 0
0x3c7d:	mov	byte ptr [rsp + 0xf], 1
0x3c82:	mov	byte ptr [rsp + 0xd], 0
0x3c87:	mov	qword ptr [rsp + 0x18], 1
0x3c90:	xor	r15d, r15d
0x3c93:	mov	qword ptr [rsp + 0x48], rax
0x3c98:	jmp	0x2cc3


0x3861:	test	r13, r13
0x3864:	jne	0x3dfa


0x3e24:	nop	
0x3e26:	nop	word ptr cs:[rax + rax]


0x3fdb:	nop	dword ptr [rax + rax]


0x4016:	nop	word ptr cs:[rax + rax]


0x4031:	nop	dword ptr [rax + rax]
0x4036:	nop	word ptr cs:[rax + rax]


0x4051:	nop	dword ptr [rax + rax]
0x4056:	nop	word ptr cs:[rax + rax]


0x4095:	nop	
0x4096:	nop	word ptr cs:[rax + rax]


0x40b5:	nop	
0x40b6:	nop	word ptr cs:[rax + rax]


0x4164:	nop	
0x4166:	nop	word ptr cs:[rax + rax]


0x4253:	nop	dword ptr [rax]
0x4256:	nop	word ptr cs:[rax + rax]


0x426a:	nop	word ptr [rax + rax]


0x4303:	nop	dword ptr [rax]
0x4306:	nop	word ptr cs:[rax + rax]


0x4323:	nop	dword ptr [rax]
0x4326:	nop	word ptr cs:[rax + rax]


0x433c:	nop	dword ptr [rax]


0x4358:	nop	dword ptr [rax + rax]


0x4374:	nop	
0x4376:	nop	word ptr cs:[rax + rax]


0x440e:	nop	


0x449a:	nop	word ptr [rax + rax]


0x44ac:	nop	dword ptr [rax]


0x44bf:	nop	


0x4558:	nop	dword ptr [rax + rax]


0x4581:	nop	dword ptr [rax + rax]
0x4586:	nop	word ptr cs:[rax + rax]


0x459a:	nop	word ptr [rax + rax]


0x462e:	nop	


0x46c1:	nop	dword ptr [rax + rax]
0x46c6:	nop	word ptr cs:[rax + rax]


0x46dc:	nop	dword ptr [rax]


0x46f7:	nop	word ptr [rax + rax]


0x4713:	nop	dword ptr [rax]
0x4716:	nop	word ptr cs:[rax + rax]


0x472c:	nop	dword ptr [rax]


0x4744:	nop	
0x4746:	nop	word ptr cs:[rax + rax]


0x4763:	nop	dword ptr [rax]
0x4766:	nop	word ptr cs:[rax + rax]


0x4788:	nop	dword ptr [rax + rax]


0x4b59:	nop	dword ptr [rax]


0x4c2d:	nop	dword ptr [rax]


0x5047:	nop	word ptr [rax + rax]


0x50e8:	nop	dword ptr [rax + rax]


0x51c5:	nop	
0x51c6:	nop	word ptr cs:[rax + rax]


0x526a:	nop	word ptr [rax + rax]


0x5294:	nop	
0x5296:	nop	word ptr cs:[rax + rax]


0x52a2:	nop	dword ptr [rax]
0x52a6:	nop	word ptr cs:[rax + rax]


0x52e6:	nop	word ptr cs:[rax + rax]


0x5314:	nop	
0x5316:	nop	word ptr cs:[rax + rax]


0x53a2:	nop	dword ptr [rax]
0x53a6:	nop	word ptr cs:[rax + rax]


0x53fa:	nop	word ptr [rax + rax]


0x5417:	nop	word ptr [rax + rax]


0x544e:	nop	


0x5478:	nop	dword ptr [rax + rax]


0x5493:	nop	word ptr cs:[rax + rax]
0x549d:	nop	dword ptr [rax]


0x54d5:	nop	word ptr cs:[rax + rax]
0x54df:	nop	


0x5507:	nop	word ptr [rax + rax]


0x56e8:	mov	rax, rbx
0x56eb:	mul	rsi
0x56ee:	jo	0x58e1


0x58e1:	or	rax, 0xffffffffffffffff
0x58e5:	mov	r8d, 1
0x58eb:	jmp	0x56f7


0x56f4:	xor	r8d, r8d
0x56f7:	mul	rsi
0x56fa:	jo	0x58d2


0x56f7:	mul	rsi
0x56fa:	jo	0x58d2


0x58d2:	mov	r8d, 1
0x58d8:	or	rbx, 0xffffffffffffffff
0x58dc:	jmp	0x5703


0x5700:	mov	rbx, rax
0x5703:	or	ebp, r8d
0x5706:	nop	word ptr cs:[rax + rax]
0x5710:	movsxd	rdi, edi
0x5713:	mov	eax, ebp
0x5715:	add	rcx, rdi
0x5718:	or	eax, 2
0x571b:	mov	qword ptr [r15], rcx
0x571e:	cmp	byte ptr [rcx], 0
0x5721:	mov	qword ptr [r14], rbx
0x5724:	cmovne	ebp, eax
0x5727:	jmp	0x55ed


0x5703:	or	ebp, r8d
0x5706:	nop	word ptr cs:[rax + rax]
0x5710:	movsxd	rdi, edi
0x5713:	mov	eax, ebp
0x5715:	add	rcx, rdi
0x5718:	or	eax, 2
0x571b:	mov	qword ptr [r15], rcx
0x571e:	cmp	byte ptr [rcx], 0
0x5721:	mov	qword ptr [r14], rbx
0x5724:	cmovne	ebp, eax
0x5727:	jmp	0x55ed


0x5737:	mov	edx, 2
0x573c:	mov	rax, rdx
0x573f:	mul	rbx
0x5742:	jo	0x57de


0x57de:	mov	ebp, 1
0x57e3:	or	rbx, 0xffffffffffffffff
0x57e7:	jmp	0x5710


0x5748:	add	rbx, rbx
0x574b:	jmp	0x5710


0x5710:	movsxd	rdi, edi
0x5713:	mov	eax, ebp
0x5715:	add	rcx, rdi
0x5718:	or	eax, 2
0x571b:	mov	qword ptr [r15], rcx
0x571e:	cmp	byte ptr [rcx], 0
0x5721:	mov	qword ptr [r14], rbx
0x5724:	cmovne	ebp, eax
0x5727:	jmp	0x55ed


0x574d:	mov	edx, 0x200
0x5752:	mov	rax, rdx
0x5755:	mul	rbx
0x5758:	jo	0x57de


0x575e:	shl	rbx, 9
0x5762:	jmp	0x5710


0x5764:	mov	r8d, 7
0x576a:	xor	r9d, r9d
0x576d:	nop	dword ptr [rax]
0x5770:	mov	rax, rbx
0x5773:	mul	rsi
0x5776:	mov	rbx, rax
0x5779:	jo	0x590e


0x590e:	mov	r9d, 1
0x5914:	or	rbx, 0xffffffffffffffff
0x5918:	jmp	0x577f


0x577f:	sub	r8d, 1
0x5783:	jne	0x5770


0x5785:	or	ebp, r9d
0x5788:	jmp	0x5710


0x5770:	mov	rax, rbx
0x5773:	mul	rsi
0x5776:	mov	rbx, rax
0x5779:	jo	0x590e


0x578a:	mov	r8d, 8
0x5790:	xor	r9d, r9d
0x5793:	nop	dword ptr [rax + rax]
0x5798:	mov	rax, rbx
0x579b:	mul	rsi
0x579e:	mov	rbx, rax
0x57a1:	jo	0x58f0


0x58f0:	mov	r9d, 1
0x58f6:	or	rbx, 0xffffffffffffffff
0x58fa:	jmp	0x57a7


0x57a7:	sub	r8d, 1
0x57ab:	jne	0x5798


0x57ad:	jmp	0x5785


0x5798:	mov	rax, rbx
0x579b:	mul	rsi
0x579e:	mov	rbx, rax
0x57a1:	jo	0x58f0


0x57af:	mov	r8d, 4
0x57b5:	xor	r9d, r9d
0x57b8:	mov	rax, rbx
0x57bb:	mul	rsi
0x57be:	mov	rbx, rax
0x57c1:	jo	0x58c3


0x58c3:	mov	r9d, 1
0x58c9:	or	rbx, 0xffffffffffffffff
0x58cd:	jmp	0x57c7


0x57c7:	sub	r8d, 1
0x57cb:	jne	0x57b8


0x57cd:	jmp	0x5785


0x57b8:	mov	rax, rbx
0x57bb:	mul	rsi
0x57be:	mov	rbx, rax
0x57c1:	jo	0x58c3


0x57cf:	mov	rax, rbx
0x57d2:	mul	rsi
0x57d5:	mov	rbx, rax
0x57d8:	jno	0x5710


0x58ff:	mov	r9d, 1
0x5905:	or	rbx, 0xffffffffffffffff
0x5909:	jmp	0x5808


0x5808:	sub	r8d, 1
0x580c:	jne	0x57f9


0x580e:	jmp	0x5785


0x57f9:	mov	rax, rbx
0x57fc:	mul	rsi
0x57ff:	mov	rbx, rax
0x5802:	jo	0x58ff


0x5813:	mov	r8d, 6
0x5819:	xor	r9d, r9d
0x581c:	mov	rax, rbx
0x581f:	mul	rsi
0x5822:	mov	rbx, rax
0x5825:	jo	0x58b4


0x58b4:	mov	r9d, 1
0x58ba:	or	rbx, 0xffffffffffffffff
0x58be:	jmp	0x582b


0x582b:	sub	r8d, 1
0x582f:	jne	0x581c


0x5831:	jmp	0x5785


0x581c:	mov	rax, rbx
0x581f:	mul	rsi
0x5822:	mov	rbx, rax
0x5825:	jo	0x58b4


0x5836:	mov	edx, 0x400
0x583b:	mov	rax, rdx
0x583e:	mul	rbx
0x5841:	jo	0x57de


0x5843:	shl	rbx, 0xa
0x5847:	jmp	0x5710


0x584c:	mov	rax, rbx
0x584f:	mul	rsi
0x5852:	jo	0x591d


0x591d:	mov	r8d, 1
0x5923:	or	rax, 0xffffffffffffffff
0x5927:	jmp	0x585b


0x5858:	xor	r8d, r8d
0x585b:	mul	rsi
0x585e:	jno	0x56f7


0x585b:	mul	rsi
0x585e:	jno	0x56f7


0x5864:	mov	r8d, 1
0x586a:	or	rax, 0xffffffffffffffff
0x586e:	jmp	0x56f7


0x592c:	nop	dword ptr [rax]


0x59b3:	nop	word ptr cs:[rax + rax]
0x59bd:	nop	dword ptr [rax]


0x5a3d:	nop	dword ptr [rax]


0x5ae2:	nop	word ptr cs:[rax + rax]
0x5aec:	nop	dword ptr [rax]


0x5b2c:	nop	dword ptr [rax]


0x5b75:	nop	
0x5b76:	nop	word ptr cs:[rax + rax]


0x5dbc:	nop	dword ptr [rax]


0x5e3b:	nop	dword ptr [rax + rax]


0x5ed7:	nop	word ptr [rax + rax]


0x5f45:	nop	
0x5f46:	nop	word ptr cs:[rax + rax]


0x5f52:	nop	word ptr cs:[rax + rax]
0x5f5c:	nop	dword ptr [rax]


0x2eb0:	xor	r10d, r10d
0x2eb3:	mov	eax, dword ptr [rsp + 8]
0x2eb7:	cmp	eax, 2
0x2eba:	je	0x3478


0x2ee0:	xor	r10d, r10d
0x2ee3:	cmp	dword ptr [rsp + 8], 2
0x2ee8:	je	0x33f0


0x2f08:	mov	edx, 9
0x2f0d:	mov	ebx, 0x74
0x2f12:	cmp	dword ptr [rsp + 8], 2
0x2f17:	sete	al
0x2f1a:	and	al, byte ptr [rsp + 0xf]
0x2f1e:	jne	0x306e


0x2f48:	mov	edx, 8
0x2f4d:	mov	ebx, 0x62
0x2f52:	jmp	0x2f24


0x2f58:	cmp	dword ptr [rsp + 8], 2
0x2f5d:	je	0x3330


0x3000:	cmp	byte ptr [rsp + 0xd], 0
0x3005:	jne	0x31d3


0x3028:	cmp	dword ptr [rsp + 8], 2
0x302d:	sete	dl
0x3030:	xor	eax, eax
0x3032:	jmp	0x2e18


0x3040:	mov	edx, 7
0x3045:	mov	ebx, 0x61
0x304a:	jmp	0x2f24


0x3050:	cmp	dword ptr [rsp + 8], 2
0x3055:	sete	dl
0x3058:	test	rbp, rbp
0x305b:	jne	0x2e0c


0x3080:	cmp	dword ptr [rsp + 8], 2
0x3085:	sete	dl
0x3088:	xor	r12d, r12d
0x308b:	jmp	0x3061


0x3090:	cmp	dword ptr [rsp + 8], 2
0x3095:	mov	ebx, 0x20
0x309a:	sete	dl
0x309d:	jmp	0x3061


0x30a0:	mov	edx, 0xd
0x30a5:	mov	ebx, 0x72
0x30aa:	jmp	0x2f12


0x30b0:	mov	edx, 0xc
0x30b5:	mov	ebx, 0x66
0x30ba:	jmp	0x2f24


0x30c0:	mov	edx, 0xb
0x30c5:	mov	ebx, 0x76
0x30ca:	jmp	0x2f24


0x30d0:	mov	edx, 0xa
0x30d5:	mov	ebx, 0x6e
0x30da:	jmp	0x2f12


0x3170:	xor	r10d, r10d
0x3173:	cmp	byte ptr [rsp + 0xd], 0
0x3178:	jne	0x2f6e


0x3190:	mov	edx, 0xc
0x3195:	xor	r10d, r10d
0x3198:	mov	ebx, 0x66
0x319d:	jmp	0x2f24


0x31a8:	mov	edx, 0xa
0x31ad:	xor	r10d, r10d
0x31b0:	mov	ebx, 0x6e
0x31b5:	jmp	0x2f12


0x31c0:	mov	ebx, 0x61
0x31c5:	jmp	0x2f90


0x31d0:	xor	r10d, r10d
0x31d3:	cmp	dword ptr [rsp + 8], 2
0x31d8:	sete	dl
0x31db:	cmp	byte ptr [rsp + 0xf], 0
0x31e0:	jne	0x3d7a


0x3270:	cmp	dword ptr [rsp + 8], 2
0x3275:	mov	r12d, r10d
0x3278:	sete	dl
0x327b:	xor	r10d, r10d
0x327e:	xor	eax, eax
0x3280:	jmp	0x2e18


0x3288:	cmp	dword ptr [rsp + 8], 2
0x328d:	sete	dl
0x3290:	xor	r10d, r10d
0x3293:	jmp	0x3058


0x32a0:	cmp	dword ptr [rsp + 8], 2
0x32a5:	sete	dl
0x32a8:	xor	r10d, r10d
0x32ab:	xor	r12d, r12d
0x32ae:	jmp	0x3061


0x32b8:	cmp	dword ptr [rsp + 8], 2
0x32bd:	mov	r12d, r10d
0x32c0:	mov	ebx, 0x20
0x32c5:	sete	dl
0x32c8:	xor	r10d, r10d
0x32cb:	jmp	0x3061


0x32e8:	mov	ebx, 0x76
0x32ed:	jmp	0x2f90


0x32f8:	mov	edx, 9
0x32fd:	xor	r10d, r10d
0x3300:	mov	ebx, 0x74
0x3305:	jmp	0x2f12


0x3310:	mov	ebx, 0x62
0x3315:	jmp	0x2f90


0x38b0:	test	ebx, ebx
0x38b2:	jne	0x3cad


0x57f0:	mov	r8d, 5
0x57f6:	xor	r9d, r9d
0x57f9:	mov	rax, rbx
0x57fc:	mul	rsi
0x57ff:	mov	rbx, rax
0x5802:	jo	0x58ff


0x1b83:	nop	dword ptr [rax + rax]


0x1bc7:	nop	word ptr [rax + rax]


0x1bdc:	nop	dword ptr [rax]


0x2276:	nop	word ptr cs:[rax + rax]


0x22c7:	nop	word ptr [rax + rax]


0x2311:	nop	dword ptr [rax]


0x244a:	nop	word ptr [rax + rax]


0x249c:	nop	dword ptr [rax]


0x24aa:	nop	word ptr [rax + rax]


0x2b3c:	nop	dword ptr [rax]


0x2b8d:	nop	dword ptr [rax]


0x2db8:	nop	dword ptr [rax + rax]


0x2ea7:	nop	word ptr [rax + rax]


0x2ede:	nop	


0x2f01:	nop	dword ptr [rax]


0x2f42:	nop	word ptr [rax + rax]


0x2f54:	nop	dword ptr [rax]


0x2ff8:	nop	dword ptr [rax + rax]


0x3021:	nop	dword ptr [rax]


0x3037:	nop	word ptr [rax + rax]


0x304f:	nop	


0x307e:	nop	


0x308d:	nop	dword ptr [rax]


0x309f:	nop	


0x30af:	nop	


0x30bf:	nop	


0x30cf:	nop	


0x30df:	nop	


0x314c:	nop	dword ptr [rax]


0x316c:	nop	dword ptr [rax]


0x317e:	nop	


0x318f:	nop	


0x31a2:	nop	word ptr [rax + rax]


0x31ba:	nop	word ptr [rax + rax]


0x31ca:	nop	word ptr [rax + rax]


0x326b:	nop	dword ptr [rax + rax]


0x3285:	nop	dword ptr [rax]


0x3298:	nop	dword ptr [rax + rax]


0x32b3:	nop	dword ptr [rax + rax]


0x32e2:	nop	word ptr [rax + rax]


0x32f2:	nop	word ptr [rax + rax]


0x330a:	nop	word ptr [rax + rax]


0x331a:	nop	word ptr [rax + rax]


0x3328:	nop	dword ptr [rax + rax]


0x334f:	nop	


0x33e9:	nop	dword ptr [rax]


0x3432:	nop	word ptr [rax + rax]


0x3458:	nop	dword ptr [rax + rax]


0x3471:	nop	dword ptr [rax]


0x3492:	nop	word ptr [rax + rax]


0x35f8:	nop	dword ptr [rax + rax]


0x370b:	nop	dword ptr [rax + rax]


0x372e:	nop	


0x37f5:	nop	dword ptr [rax]


0x38ad:	nop	dword ptr [rax]


0x3ab6:	nop	word ptr cs:[rax + rax]


0x3b49:	nop	dword ptr [rax]


0x3bbd:	nop	dword ptr [rax]


0x3c9d:	nop	dword ptr [rax]


0x3fab:	nop	dword ptr [rax + rax]


0x48cb:	nop	dword ptr [rax + rax]


0x4959:	nop	dword ptr [rax]


0x4985:	nop	dword ptr [rax]


0x49a8:	nop	dword ptr [rax + rax]


0x4a13:	nop	dword ptr [rax + rax]


0x4a22:	nop	word ptr [rax + rax]


0x4a65:	nop	dword ptr [rax]


0x4a9a:	nop	word ptr [rax + rax]


0x4b17:	nop	word ptr [rax + rax]


0x4c06:	nop	word ptr cs:[rax + rax]


0x4c22:	nop	word ptr [rax + rax]


0x4cd6:	nop	word ptr cs:[rax + rax]


0x4d65:	nop	dword ptr [rax]


0x4d86:	nop	word ptr cs:[rax + rax]


0x4de5:	nop	dword ptr [rax]


0x4e21:	nop	dword ptr [rax]


0x4e68:	nop	dword ptr [rax + rax]


0x4eb7:	nop	word ptr [rax + rax]


0x4f14:	nop	dword ptr [rax]


0x4f42:	nop	word ptr [rax + rax]


0x4ff6:	nop	word ptr cs:[rax + rax]


0x5059:	nop	dword ptr [rax]


0x52d2:	nop	word ptr [rax + rax]


0x5359:	nop	dword ptr [rax]


0x5384:	nop	dword ptr [rax]


0x53dd:	nop	dword ptr [rax]


0x54f1:	nop	dword ptr [rax]


0x5576:	nop	word ptr cs:[rax + rax]


0x55d1:	nop	dword ptr [rax]


0x55e2:	nop	word ptr [rax + rax]


0x5612:	nop	word ptr [rax + rax]


0x561c:	nop	dword ptr [rax]


0x56bb:	nop	dword ptr [rax + rax]


0x57ec:	nop	dword ptr [rax]


0x5873:	nop	dword ptr [rax + rax]


0x59f4:	nop	dword ptr [rax]


0x5a11:	nop	dword ptr [rax]


0x5a22:	nop	word ptr [rax + rax]


0x5a7a:	nop	word ptr [rax + rax]


0x5b16:	nop	word ptr cs:[rax + rax]


0x5b52:	nop	word ptr [rax + rax]


0x5c63:	nop	dword ptr [rax + rax]


0x5c71:	nop	dword ptr [rax]


0x5d0d:	nop	dword ptr [rax]


0x5d33:	nop	dword ptr [rax + rax]


0x5d92:	nop	word ptr [rax + rax]


0x5e05:	nop	dword ptr [rax]


0x5e63:	nop	dword ptr [rax + rax]


0x5e8f:	nop	


