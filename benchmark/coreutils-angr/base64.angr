0x5b90:	sub	rsp, 8
0x5b94:	add	rsp, 8
0x5b98:	ret	


0x5b80:	mov	rdx, qword ptr [rip + 0x203481]
0x5b87:	xor	esi, esi
0x5b89:	jmp	0x1780


0x5b70:	ret	


0x5b00:	push	r15
0x5b02:	push	r14
0x5b04:	mov	r15, rdx
0x5b07:	push	r13
0x5b09:	push	r12
0x5b0b:	lea	r12, [rip + 0x202ffe]
0x5b12:	push	rbp
0x5b13:	lea	rbp, [rip + 0x202ffe]
0x5b1a:	push	rbx
0x5b1b:	mov	r13d, edi
0x5b1e:	mov	r14, rsi
0x5b21:	sub	rbp, r12
0x5b24:	sub	rsp, 8
0x5b28:	sar	rbp, 3
0x5b2c:	call	0x14a8


0x5ac0:	sub	rsp, 8
0x5ac4:	mov	edi, 0xe
0x5ac9:	call	0x16e0


0x5a60:	sub	rsp, 8
0x5a64:	xor	esi, esi
0x5a66:	call	0x1720


0x59e0:	push	r12
0x59e2:	push	rbp
0x59e3:	mov	rbp, rdi
0x59e6:	push	rbx
0x59e7:	call	0x1520


0x5950:	push	r13
0x5952:	push	r12
0x5954:	mov	r13, rsi
0x5957:	push	rbp
0x5958:	push	rbx
0x5959:	mov	rbx, rdi
0x595c:	mov	r12, rdx
0x595f:	sub	rsp, 0x18
0x5963:	mov	rax, qword ptr fs:[0x28]
0x596c:	mov	qword ptr [rsp + 8], rax
0x5971:	xor	eax, eax
0x5973:	lea	rax, [rsp + 4]
0x5978:	test	rdi, rdi
0x597b:	cmove	rbx, rax
0x597f:	mov	rdi, rbx
0x5982:	call	0x15c0


0x58f0:	mov	rax, qword ptr [rdi + 8]
0x58f4:	cmp	qword ptr [rdi + 0x10], rax
0x58f8:	je	0x5900


0x58b0:	test	rdi, rdi
0x58b3:	push	rbx
0x58b4:	mov	rbx, rdi
0x58b7:	je	0x58ca


0x5830:	push	r12
0x5832:	push	rbp
0x5833:	push	rbx
0x5834:	mov	rbx, rdi
0x5837:	call	0x16b0


0x5410:	push	r15
0x5412:	push	r14
0x5414:	push	r13
0x5416:	push	r12
0x5418:	push	rbp
0x5419:	push	rbx
0x541a:	sub	rsp, 0x28
0x541e:	mov	rax, qword ptr fs:[0x28]
0x5427:	mov	qword ptr [rsp + 0x18], rax
0x542c:	xor	eax, eax
0x542e:	cmp	edx, 0x24
0x5431:	ja	0x5795


0x53e0:	sub	rsp, 0x10
0x53e4:	push	r9
0x53e6:	mov	r9, r8
0x53e9:	mov	r8, rcx
0x53ec:	mov	rcx, rdx
0x53ef:	mov	rdx, rsi
0x53f2:	mov	esi, 0xa
0x53f7:	call	0x52e0


0x52e0:	push	r15
0x52e2:	push	r14
0x52e4:	mov	r15, rcx
0x52e7:	push	r13
0x52e9:	push	r12
0x52eb:	mov	r14, rdx
0x52ee:	push	rbp
0x52ef:	push	rbx
0x52f0:	mov	edx, esi
0x52f2:	xor	esi, esi
0x52f4:	mov	r12, rdi
0x52f7:	mov	r13, r9
0x52fa:	sub	rsp, 0x18
0x52fe:	mov	rcx, rsp
0x5301:	mov	ebx, dword ptr [rsp + 0x50]
0x5305:	mov	rax, qword ptr fs:[0x28]
0x530e:	mov	qword ptr [rsp + 8], rax
0x5313:	xor	eax, eax
0x5315:	call	0x5410


0x52a0:	lea	rsi, [rip + 0x1868]
0x52a7:	sub	rsp, 8
0x52ab:	mov	edx, 5
0x52b0:	xor	edi, edi
0x52b2:	call	0x1570


0x5280:	push	rbx
0x5281:	mov	rbx, rdi
0x5284:	call	0x1590


0x5250:	push	rbp
0x5251:	push	rbx
0x5252:	mov	rbp, rdi
0x5255:	mov	rdi, rsi
0x5258:	mov	rbx, rsi
0x525b:	sub	rsp, 8
0x525f:	call	0x5050


0x5220:	mov	rax, rdi
0x5223:	sub	rsp, 8
0x5227:	mul	rsi
0x522a:	seto	dl
0x522d:	test	rax, rax
0x5230:	js	0x5249


0x5200:	push	rbx
0x5201:	mov	rbx, rdi
0x5204:	call	0x5050


0x51b0:	test	rdi, rdi
0x51b3:	mov	rax, qword ptr [rsi]
0x51b6:	je	0x51e0


0x5120:	test	rdi, rdi
0x5123:	mov	r9, rdx
0x5126:	mov	rcx, qword ptr [rsi]
0x5129:	je	0x5160


0x50f0:	mov	rax, rsi
0x50f3:	mul	rdx
0x50f6:	mov	rsi, rax
0x50f9:	seto	al
0x50fc:	test	rsi, rsi
0x50ff:	js	0x510b


0x50b0:	test	rsi, rsi
0x50b3:	push	rbx
0x50b4:	mov	rbx, rsi
0x50b7:	jne	0x50be


0x50a0:	jmp	0x5050


0x5070:	mov	rax, rdi
0x5073:	mul	rsi
0x5076:	mov	rdi, rax
0x5079:	seto	al
0x507c:	test	rdi, rdi
0x507f:	js	0x508b


0x5050:	push	rbx
0x5051:	mov	rbx, rdi
0x5054:	call	0x16c0


0x4fd0:	push	rbx
0x4fd1:	lea	rsi, [rip + 0x182a]
0x4fd8:	mov	edx, 5
0x4fdd:	xor	edi, edi
0x4fdf:	call	0x1570


0x4ef0:	push	rbp
0x4ef1:	push	rbx
0x4ef2:	mov	r10d, 0x20
0x4ef8:	xor	r11d, r11d
0x4efb:	sub	rsp, 0xb8
0x4f02:	mov	rax, qword ptr fs:[0x28]
0x4f0b:	mov	qword ptr [rsp + 0x78], rax
0x4f10:	xor	eax, eax
0x4f12:	lea	rax, [rsp + 0xd0]
0x4f1a:	mov	qword ptr [rsp + 0xa0], r8
0x4f22:	lea	rbx, [rsp + 0xd0]
0x4f2a:	lea	r8, [rsp + 0x20]
0x4f2f:	mov	qword ptr [rsp + 0xa8], r9
0x4f37:	mov	dword ptr [rsp + 8], 0x20
0x4f3f:	mov	qword ptr [rsp + 0x10], rax
0x4f44:	lea	rax, [rsp + 0x80]
0x4f4c:	xor	r9d, r9d
0x4f4f:	mov	qword ptr [rsp + 0x18], rax
0x4f54:	mov	rbp, rax
0x4f57:	nop	word ptr [rax + rax]
0x4f60:	cmp	r10d, 0x2f
0x4f64:	ja	0x4fbc


0x4e70:	sub	rsp, 0x68
0x4e74:	mov	r10, r8
0x4e77:	xor	r9d, r9d
0x4e7a:	mov	rax, qword ptr fs:[0x28]
0x4e83:	mov	qword ptr [rsp + 0x58], rax
0x4e88:	xor	eax, eax
0x4e8a:	mov	r8, rsp
0x4e8d:	nop	dword ptr [rax]
0x4e90:	mov	eax, dword ptr [r10]
0x4e93:	cmp	eax, 0x2f
0x4e96:	ja	0x4eda


0x4e50:	xor	r9d, r9d
0x4e53:	cmp	qword ptr [r8], 0
0x4e57:	je	0x4e6b


0x4a30:	push	r15
0x4a32:	push	r14
0x4a34:	push	r13
0x4a36:	push	r12
0x4a38:	mov	r12, r9
0x4a3b:	push	rbp
0x4a3c:	push	rbx
0x4a3d:	mov	rbp, rdi
0x4a40:	mov	rbx, r8
0x4a43:	sub	rsp, 0x28
0x4a47:	test	rsi, rsi
0x4a4a:	je	0x4b68


0x4a10:	lea	rcx, [rip + 0x204609]
0x4a17:	mov	rsi, rdi
0x4a1a:	mov	rdx, -1
0x4a21:	xor	edi, edi
0x4a23:	jmp	0x40d0


0x49f0:	lea	rcx, [rip + 0x204629]
0x49f7:	mov	rdx, -1
0x49fe:	jmp	0x40d0


0x49d0:	lea	rcx, [rip + 0x204649]
0x49d7:	mov	rdx, rsi
0x49da:	mov	rsi, rdi
0x49dd:	xor	edi, edi
0x49df:	jmp	0x40d0


0x49c0:	lea	rcx, [rip + 0x204659]
0x49c7:	jmp	0x40d0


0x49a0:	mov	r8, rcx
0x49a3:	mov	rcx, rdx
0x49a6:	mov	rdx, rsi
0x49a9:	mov	rsi, rdi
0x49ac:	xor	edi, edi
0x49ae:	jmp	0x48d0


0x4980:	mov	rcx, rdx
0x4983:	mov	r8, -1
0x498a:	mov	rdx, rsi
0x498d:	mov	rsi, rdi
0x4990:	xor	edi, edi
0x4992:	jmp	0x48d0


0x4970:	mov	r8, -1
0x4977:	jmp	0x48d0


0x48d0:	sub	rsp, 0x48
0x48d4:	mov	r9, rcx
0x48d7:	mov	rcx, qword ptr [rip + 0x204952]
0x48de:	movdqa	xmm0, xmmword ptr [rip + 0x20491a]
0x48e6:	mov	rax, qword ptr fs:[0x28]
0x48ef:	mov	qword ptr [rsp + 0x38], rax
0x48f4:	xor	eax, eax
0x48f6:	movaps	xmmword ptr [rsp], xmm0
0x48fa:	test	rsi, rsi
0x48fd:	mov	qword ptr [rsp + 0x30], rcx
0x4902:	mov	dword ptr [rsp], 0xa
0x4909:	movdqa	xmm0, xmmword ptr [rip + 0x2048ff]
0x4911:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x4916:	movdqa	xmm0, xmmword ptr [rip + 0x204902]
0x491e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x4923:	je	0x4957


0x4840:	sub	rsp, 0x48
0x4844:	mov	rax, rdx
0x4847:	mov	rdx, qword ptr fs:[0x28]
0x4850:	mov	qword ptr [rsp + 0x38], rdx
0x4855:	xor	edx, edx
0x4857:	cmp	esi, 0xa
0x485a:	je	0x48c4


0x4830:	mov	edx, 0x3a
0x4835:	jmp	0x4760


0x4810:	mov	edx, 0x3a
0x4815:	mov	rsi, -1
0x481c:	jmp	0x4760


0x4800:	movsx	edx, sil
0x4804:	mov	rsi, -1
0x480b:	jmp	0x4760


0x4760:	sub	rsp, 0x48
0x4764:	mov	ecx, edx
0x4766:	mov	rax, qword ptr fs:[0x28]
0x476f:	mov	qword ptr [rsp + 0x38], rax
0x4774:	xor	eax, eax
0x4776:	mov	rax, qword ptr [rip + 0x204ab3]
0x477d:	mov	r8, rsp
0x4780:	and	ecx, 0x1f
0x4783:	movdqa	xmm0, xmmword ptr [rip + 0x204a75]
0x478b:	mov	qword ptr [rsp + 0x30], rax
0x4790:	mov	eax, edx
0x4792:	movaps	xmmword ptr [rsp], xmm0
0x4796:	shr	al, 5
0x4799:	movzx	eax, al
0x479c:	lea	r9, [r8 + rax*4 + 8]
0x47a1:	movdqa	xmm0, xmmword ptr [rip + 0x204a67]
0x47a9:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x47ae:	movdqa	xmm0, xmmword ptr [rip + 0x204a6a]
0x47b6:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x47bb:	mov	edx, dword ptr [r9]
0x47be:	mov	eax, edx
0x47c0:	shr	eax, cl
0x47c2:	not	eax
0x47c4:	and	eax, 1
0x47c7:	shl	eax, cl
0x47c9:	mov	rcx, r8
0x47cc:	xor	eax, edx
0x47ce:	mov	rdx, rsi
0x47d1:	mov	rsi, rdi
0x47d4:	mov	dword ptr [r9], eax
0x47d7:	xor	edi, edi
0x47d9:	call	0x40d0


0x4750:	mov	rcx, rdx
0x4753:	mov	rdx, rsi
0x4756:	mov	esi, edi
0x4758:	xor	edi, edi
0x475a:	jmp	0x46b0


0x4740:	mov	rdx, rsi
0x4743:	mov	esi, edi
0x4745:	xor	edi, edi
0x4747:	jmp	0x4620


0x46b0:	sub	rsp, 0x48
0x46b4:	mov	rax, rdx
0x46b7:	mov	rdx, rcx
0x46ba:	mov	rcx, qword ptr fs:[0x28]
0x46c3:	mov	qword ptr [rsp + 0x38], rcx
0x46c8:	xor	ecx, ecx
0x46ca:	cmp	esi, 0xa
0x46cd:	je	0x4730


0x4620:	sub	rsp, 0x48
0x4624:	mov	rax, rdx
0x4627:	mov	rdx, qword ptr fs:[0x28]
0x4630:	mov	qword ptr [rsp + 0x38], rdx
0x4635:	xor	edx, edx
0x4637:	cmp	esi, 0xa
0x463a:	je	0x46a4


0x4600:	lea	rcx, [rip + 0x204bf9]
0x4607:	mov	rdx, rsi
0x460a:	mov	rsi, rdi
0x460d:	xor	edi, edi
0x460f:	jmp	0x40d0


0x45e0:	lea	rcx, [rip + 0x204c19]
0x45e7:	mov	rsi, rdi
0x45ea:	mov	rdx, -1
0x45f1:	xor	edi, edi
0x45f3:	jmp	0x40d0


0x45d0:	lea	rcx, [rip + 0x204c29]
0x45d7:	jmp	0x40d0


0x45b0:	lea	rcx, [rip + 0x204c49]
0x45b7:	mov	rdx, -1
0x45be:	jmp	0x40d0


0x4510:	mov	eax, dword ptr [rip + 0x204b42]
0x4516:	push	r12
0x4518:	mov	r12, qword ptr [rip + 0x204b41]
0x451f:	push	rbp
0x4520:	push	rbx
0x4521:	cmp	eax, 1
0x4524:	jle	0x4551


0x4500:	mov	rcx, rdx
0x4503:	xor	edx, edx
0x4505:	jmp	0x4410


0x4410:	push	r15
0x4412:	push	r14
0x4414:	lea	rax, [rip + 0x204de5]
0x441b:	push	r13
0x441d:	push	r12
0x441f:	mov	r12, rdx
0x4422:	push	rbp
0x4423:	push	rbx
0x4424:	mov	rbx, rcx
0x4427:	mov	r14, rdi
0x442a:	mov	r15, rsi
0x442d:	sub	rsp, 0x38
0x4431:	test	rcx, rcx
0x4434:	cmove	rbx, rax
0x4438:	xor	ebp, ebp
0x443a:	call	0x14f0


0x4390:	push	r15
0x4392:	push	r14
0x4394:	lea	rax, [rip + 0x204e65]
0x439b:	push	r13
0x439d:	push	r12
0x439f:	mov	r13, rdi
0x43a2:	push	rbp
0x43a3:	push	rbx
0x43a4:	mov	rbx, r8
0x43a7:	mov	r14, rsi
0x43aa:	mov	r15, rdx
0x43ad:	sub	rsp, 0x18
0x43b1:	test	r8, r8
0x43b4:	cmove	rbx, rax
0x43b8:	mov	qword ptr [rsp + 8], rcx
0x43bd:	call	0x14f0


0x4360:	lea	rax, [rip + 0x204e99]
0x4367:	test	rdi, rdi
0x436a:	cmove	rdi, rax
0x436e:	test	rsi, rsi
0x4371:	mov	dword ptr [rdi], 0xa
0x4377:	je	0x4387


0x4340:	lea	rax, [rip + 0x204eb9]
0x4347:	test	rdi, rdi
0x434a:	cmove	rdi, rax
0x434e:	mov	eax, dword ptr [rdi + 4]
0x4351:	mov	dword ptr [rdi + 4], esi
0x4354:	ret	


0x4300:	lea	rax, [rip + 0x204ef9]
0x4307:	test	rdi, rdi
0x430a:	mov	ecx, esi
0x430c:	cmove	rdi, rax
0x4310:	mov	eax, esi
0x4312:	and	ecx, 0x1f
0x4315:	shr	al, 5
0x4318:	movzx	eax, al
0x431b:	lea	rdi, [rdi + rax*4 + 8]
0x4320:	mov	esi, dword ptr [rdi]
0x4322:	mov	eax, esi
0x4324:	shr	eax, cl
0x4326:	xor	edx, eax
0x4328:	and	eax, 1
0x432b:	and	edx, 1
0x432e:	shl	edx, cl
0x4330:	xor	edx, esi
0x4332:	mov	dword ptr [rdi], edx
0x4334:	ret	


0x42e0:	lea	rax, [rip + 0x204f19]
0x42e7:	test	rdi, rdi
0x42ea:	cmove	rdi, rax
0x42ee:	mov	dword ptr [rdi], esi
0x42f0:	ret	


0x42c0:	lea	rax, [rip + 0x204f39]
0x42c7:	test	rdi, rdi
0x42ca:	cmove	rdi, rax
0x42ce:	mov	eax, dword ptr [rdi]
0x42d0:	ret	


0x4280:	push	r12
0x4282:	push	rbp
0x4283:	push	rbx
0x4284:	mov	rbx, rdi
0x4287:	call	0x14f0


0x40d0:	push	r15
0x40d2:	push	r14
0x40d4:	movsxd	r15, edi
0x40d7:	push	r13
0x40d9:	push	r12
0x40db:	mov	r14, rdx
0x40de:	push	rbp
0x40df:	push	rbx
0x40e0:	mov	rbp, rcx
0x40e3:	sub	rsp, 0x28
0x40e7:	mov	qword ptr [rsp + 8], rsi
0x40ec:	call	0x14f0


0x2e90:	push	r15
0x2e92:	push	r14
0x2e94:	mov	r15d, r8d
0x2e97:	push	r13
0x2e99:	push	r12
0x2e9b:	mov	r14, rdi
0x2e9e:	push	rbp
0x2e9f:	push	rbx
0x2ea0:	mov	ebx, r9d
0x2ea3:	mov	r13, rsi
0x2ea6:	mov	rbp, rcx
0x2ea9:	and	ebx, 2
0x2eac:	sub	rsp, 0xb8
0x2eb3:	mov	rax, qword ptr [rsp + 0xf0]
0x2ebb:	mov	qword ptr [rsp + 0x10], rdx
0x2ec0:	mov	dword ptr [rsp + 8], r8d
0x2ec5:	mov	dword ptr [rsp + 0x78], r9d
0x2eca:	mov	qword ptr [rsp + 0x20], rax
0x2ecf:	mov	rax, qword ptr [rsp + 0xf8]
0x2ed7:	mov	qword ptr [rsp + 0x68], rax
0x2edc:	mov	rax, qword ptr [rsp + 0x100]
0x2ee4:	mov	qword ptr [rsp + 0x60], rax
0x2ee9:	mov	rax, qword ptr fs:[0x28]
0x2ef2:	mov	qword ptr [rsp + 0xa8], rax
0x2efa:	xor	eax, eax
0x2efc:	call	0x1580


0x2da0:	push	rbp
0x2da1:	push	rbx
0x2da2:	mov	rbp, rdi
0x2da5:	mov	ebx, esi
0x2da7:	sub	rsp, 8
0x2dab:	call	0x5ac0


0x2d00:	test	rdi, rdi
0x2d03:	push	rbx
0x2d04:	je	0x2d7d


0x2cd0:	test	rdi, rdi
0x2cd3:	je	0x2cf0


0x2cc0:	jmp	0x1640


0x2c10:	push	rbp
0x2c11:	push	rbx
0x2c12:	sub	rsp, 8
0x2c16:	mov	rdi, qword ptr [rip + 0x20646b]
0x2c1d:	call	0x59e0


0x2c00:	mov	byte ptr [rip + 0x2064c9], dil
0x2c07:	ret	


0x2bf0:	mov	qword ptr [rip + 0x2064e1], rdi
0x2bf7:	ret	


0x2b30:	push	r14
0x2b32:	push	r13
0x2b34:	mov	r14, rdx
0x2b37:	push	r12
0x2b39:	push	rbp
0x2b3a:	mov	r12, rdi
0x2b3d:	push	rbx
0x2b3e:	mov	r13, rsi
0x2b41:	mov	rbx, rcx
0x2b44:	mov	rbp, r8
0x2b47:	sub	rsp, 0x20
0x2b4b:	mov	rax, qword ptr fs:[0x28]
0x2b54:	mov	qword ptr [rsp + 0x18], rax
0x2b59:	xor	eax, eax
0x2b5b:	mov	rax, rdx
0x2b5e:	shr	rax, 2
0x2b62:	lea	rdi, [rax + rax*2 + 3]
0x2b67:	mov	qword ptr [rsp + 0x10], rdi
0x2b6c:	call	0x16c0


0x2880:	push	r15
0x2882:	push	r14
0x2884:	mov	r14, rdi
0x2887:	push	r13
0x2889:	push	r12
0x288b:	mov	r13, rdx
0x288e:	push	rbp
0x288f:	push	rbx
0x2890:	mov	r12, rsi
0x2893:	sub	rsp, 0x38
0x2897:	mov	r15, qword ptr [r8]
0x289a:	mov	rbx, qword ptr fs:[0x28]
0x28a3:	mov	qword ptr [rsp + 0x28], rbx
0x28a8:	xor	ebx, ebx
0x28aa:	test	rdi, rdi
0x28ad:	mov	qword ptr [rsp + 0x18], rcx
0x28b2:	mov	qword ptr [rsp + 0x10], r8
0x28b7:	mov	qword ptr [rsp + 0x20], r15
0x28bc:	setne	byte ptr [rsp + 7]
0x28c1:	je	0x2af0


0x2870:	mov	dword ptr [rdi], 0
0x2876:	ret	


0x2850:	lea	rax, [rip + 0x38e9]
0x2857:	movzx	edi, dil
0x285b:	movzx	eax, byte ptr [rax + rdi]
0x285f:	not	eax
0x2861:	shr	al, 7
0x2864:	ret	


0x27c0:	push	r14
0x27c2:	push	r13
0x27c4:	mov	r13, rdx
0x27c7:	lea	rdx, [rsi + 2]
0x27cb:	push	r12
0x27cd:	push	rbp
0x27ce:	push	rbx
0x27cf:	movabs	rbx, 0xaaaaaaaaaaaaaaab
0x27d9:	mov	rax, rdx
0x27dc:	mul	rbx
0x27df:	shr	rdx, 1
0x27e2:	lea	rbx, [rdx*4]
0x27ea:	lea	rbp, [rbx + 1]
0x27ee:	cmp	rsi, rbp
0x27f1:	jbe	0x2810


0x2600:	test	cl, 3
0x2603:	jne	0x2619


0x24f0:	xor	eax, eax
0x24f2:	cmp	rsi, 1
0x24f6:	jbe	0x2589


0x2110:	push	r13
0x2112:	push	r12
0x2114:	mov	edx, 5
0x2119:	push	rbp
0x211a:	push	rbx
0x211b:	mov	ebp, edi
0x211d:	sub	rsp, 0x88
0x2124:	mov	rbx, qword ptr [rip + 0x206fb5]
0x212b:	mov	rax, qword ptr fs:[0x28]
0x2134:	mov	qword ptr [rsp + 0x78], rax
0x2139:	xor	eax, eax
0x213b:	test	edi, edi
0x213d:	je	0x216d


0x2100:	push	rbp
0x2101:	mov	rbp, rsp
0x2104:	pop	rbp
0x2105:	jmp	0x2070


0x20c0:	cmp	byte ptr [rip + 0x207001], 0
0x20c7:	jne	0x20f8


0x2070:	lea	rdi, [rip + 0x207009]
0x2077:	lea	rsi, [rip + 0x207002]
0x207e:	push	rbp
0x207f:	sub	rsi, rdi
0x2082:	mov	rbp, rsp
0x2085:	sar	rsi, 3
0x2089:	mov	rax, rsi
0x208c:	shr	rax, 0x3f
0x2090:	add	rsi, rax
0x2093:	sar	rsi, 1
0x2096:	je	0x20b0


0x2030:	lea	rdi, [rip + 0x207049]
0x2037:	push	rbp
0x2038:	lea	rax, [rip + 0x207041]
0x203f:	cmp	rax, rdi
0x2042:	mov	rbp, rsp
0x2045:	je	0x2060


0x2000:	xor	ebp, ebp
0x2002:	mov	r9, rdx
0x2005:	pop	rsi
0x2006:	mov	rdx, rsp
0x2009:	and	rsp, 0xfffffffffffffff0
0x200d:	push	rax
0x200e:	push	rsp
0x200f:	lea	r8, [rip + 0x3b5a]
0x2016:	lea	rcx, [rip + 0x3ae3]
0x201d:	lea	rdi, [rip - 0x824]
0x2024:	call	qword ptr [rip + 0x206fae]


0x1800:	push	r15
0x1802:	push	r14
0x1804:	push	r13
0x1806:	push	r12
0x1808:	mov	r13d, edi
0x180b:	push	rbp
0x180c:	push	rbx
0x180d:	mov	r12, rsi
0x1810:	mov	ebp, 0x4c
0x1815:	xor	ebx, ebx
0x1817:	sub	rsp, 0x78
0x181b:	mov	rdi, qword ptr [rsi]
0x181e:	mov	rax, qword ptr fs:[0x28]
0x1827:	mov	qword ptr [rsp + 0x68], rax
0x182c:	xor	eax, eax
0x182e:	call	0x2d00


0x14a8:	sub	rsp, 8
0x14ac:	mov	rax, qword ptr [rip + 0x207b2d]
0x14b3:	test	rax, rax
0x14b6:	je	0x14ba


0x1780:	jmp	qword ptr [rip + 0x207812]


0x16e0:	jmp	qword ptr [rip + 0x207862]


0x1720:	jmp	qword ptr [rip + 0x207842]


0x1520:	jmp	qword ptr [rip + 0x207942]


0x15c0:	jmp	qword ptr [rip + 0x2078f2]


0x5900:	mov	rax, qword ptr [rdi + 0x20]
0x5904:	cmp	qword ptr [rdi + 0x28], rax
0x5908:	jne	0x58fa


0x58fa:	jmp	0x1760


0x58ca:	mov	rdi, rbx
0x58cd:	pop	rbx
0x58ce:	jmp	0x16d0


0x58b9:	call	0x16f0


0x16b0:	jmp	qword ptr [rip + 0x20787a]


0x5437:	lea	rax, [rsp + 0x10]
0x543c:	mov	r15, rsi
0x543f:	test	rsi, rsi
0x5442:	mov	rbp, rdi
0x5445:	mov	dword ptr [rsp + 8], edx
0x5449:	mov	r14, rcx
0x544c:	mov	r13, r8
0x544f:	cmove	r15, rax
0x5453:	call	0x14f0


0x5795:	lea	rcx, [rip + 0x14a4]
0x579c:	lea	rsi, [rip + 0x137d]
0x57a3:	lea	rdi, [rip + 0x1396]
0x57aa:	mov	edx, 0x54
0x57af:	call	0x1610


0x1570:	jmp	qword ptr [rip + 0x20791a]


0x1590:	jmp	qword ptr [rip + 0x20790a]


0x5249:	call	0x52a0


0x5232:	movzx	edx, dl
0x5235:	test	rdx, rdx
0x5238:	jne	0x5249


0x51e0:	test	rax, rax
0x51e3:	mov	edx, 0x80
0x51e8:	cmove	rax, rdx
0x51ec:	test	rax, rax
0x51ef:	jns	0x51d2


0x51b8:	movabs	rdx, 0x5555555555555553
0x51c2:	cmp	rax, rdx
0x51c5:	ja	0x51f1


0x5160:	test	rcx, rcx
0x5163:	je	0x5188


0x512b:	xor	edx, edx
0x512d:	movabs	rax, 0x5555555555555554
0x5137:	div	r9
0x513a:	cmp	rax, rcx
0x513d:	jbe	0x517b


0x510b:	sub	rsp, 8
0x510f:	call	0x52a0


0x5101:	movzx	eax, al
0x5104:	test	rax, rax
0x5107:	jne	0x510b


0x50b9:	test	rdi, rdi
0x50bc:	jne	0x50d8


0x50be:	mov	rsi, rbx
0x50c1:	call	0x1710


0x508b:	sub	rsp, 8
0x508f:	call	0x52a0


0x5081:	movzx	eax, al
0x5084:	test	rax, rax
0x5087:	jne	0x508b


0x16c0:	jmp	qword ptr [rip + 0x207872]


0x4f66:	mov	eax, r10d
0x4f69:	mov	r11d, 1
0x4f6f:	add	r10d, 8
0x4f73:	add	rax, rbp
0x4f76:	mov	rax, qword ptr [rax]
0x4f79:	test	rax, rax
0x4f7c:	mov	qword ptr [r8 + r9*8], rax
0x4f80:	je	0x4f8c


0x4fbc:	mov	rax, rbx
0x4fbf:	add	rbx, 8
0x4fc3:	jmp	0x4f76


0x4e98:	mov	r11d, eax
0x4e9b:	add	r11, qword ptr [r10 + 0x10]
0x4e9f:	add	eax, 8
0x4ea2:	mov	dword ptr [r10], eax
0x4ea5:	mov	rax, qword ptr [r11]
0x4ea8:	test	rax, rax
0x4eab:	mov	qword ptr [r8 + r9*8], rax
0x4eaf:	je	0x4ebb


0x4eda:	mov	r11, qword ptr [r10 + 8]
0x4ede:	lea	rax, [r11 + 8]
0x4ee2:	mov	qword ptr [r10 + 8], rax
0x4ee6:	jmp	0x4ea5


0x4e6b:	jmp	0x4a30


0x4b68:	mov	r8, rcx
0x4b6b:	mov	rcx, rdx
0x4b6e:	lea	rdx, [rip + 0x1c3f]
0x4b75:	mov	esi, 1
0x4b7a:	xor	eax, eax
0x4b7c:	call	0x17b0


0x4a50:	mov	r8, rdx
0x4a53:	lea	rdx, [rip + 0x1d4e]
0x4a5a:	mov	r9, rcx
0x4a5d:	xor	eax, eax
0x4a5f:	mov	rcx, rsi
0x4a62:	mov	esi, 1
0x4a67:	call	0x17b0


0x4957:	call	0x14e0


0x4925:	test	rdx, rdx
0x4928:	je	0x4957


0x48c4:	call	0x14e0


0x485c:	mov	dword ptr [rsp], esi
0x485f:	mov	rcx, rsp
0x4862:	mov	rdx, -1
0x4869:	mov	rsi, rax
0x486c:	mov	qword ptr [rsp + 4], 0
0x4875:	mov	qword ptr [rsp + 0xc], 0x4000000
0x487e:	mov	qword ptr [rsp + 0x14], 0
0x4887:	mov	qword ptr [rsp + 0x1c], 0
0x4890:	mov	qword ptr [rsp + 0x24], 0
0x4899:	mov	qword ptr [rsp + 0x2c], 0
0x48a2:	mov	dword ptr [rsp + 0x34], 0
0x48aa:	call	0x40d0


0x4730:	call	0x14e0


0x46cf:	mov	dword ptr [rsp], esi
0x46d2:	mov	rcx, rsp
0x46d5:	mov	rsi, rax
0x46d8:	mov	qword ptr [rsp + 4], 0
0x46e1:	mov	qword ptr [rsp + 0xc], 0
0x46ea:	mov	qword ptr [rsp + 0x14], 0
0x46f3:	mov	qword ptr [rsp + 0x1c], 0
0x46fc:	mov	qword ptr [rsp + 0x24], 0
0x4705:	mov	qword ptr [rsp + 0x2c], 0
0x470e:	mov	dword ptr [rsp + 0x34], 0
0x4716:	call	0x40d0


0x46a4:	call	0x14e0


0x463c:	mov	dword ptr [rsp], esi
0x463f:	mov	rcx, rsp
0x4642:	mov	rdx, -1
0x4649:	mov	rsi, rax
0x464c:	mov	qword ptr [rsp + 4], 0
0x4655:	mov	qword ptr [rsp + 0xc], 0
0x465e:	mov	qword ptr [rsp + 0x14], 0
0x4667:	mov	qword ptr [rsp + 0x1c], 0
0x4670:	mov	qword ptr [rsp + 0x24], 0
0x4679:	mov	qword ptr [rsp + 0x2c], 0
0x4682:	mov	dword ptr [rsp + 0x34], 0
0x468a:	call	0x40d0


0x4551:	mov	rdi, qword ptr [r12 + 8]
0x4556:	lea	rbx, [rip + 0x204ba3]
0x455d:	cmp	rdi, rbx
0x4560:	je	0x4579


0x4526:	sub	eax, 2
0x4529:	lea	rbx, [r12 + 0x18]
0x452e:	shl	rax, 4
0x4532:	lea	rbp, [r12 + rax + 0x28]
0x4537:	nop	word ptr [rax + rax]
0x4540:	mov	rdi, qword ptr [rbx]
0x4543:	add	rbx, 0x10
0x4547:	call	0x14d0


0x14f0:	jmp	qword ptr [rip + 0x20795a]


0x4387:	sub	rsp, 8
0x438b:	call	0x14e0


0x4379:	test	rdx, rdx
0x437c:	je	0x4387


0x1580:	jmp	qword ptr [rip + 0x207912]


0x2d7d:	mov	rcx, qword ptr [rip + 0x20633c]
0x2d84:	lea	rdi, [rip + 0x34fd]
0x2d8b:	mov	edx, 0x37
0x2d90:	mov	esi, 1
0x2d95:	call	0x17a0


0x2d06:	mov	esi, 0x2f
0x2d0b:	mov	rbx, rdi
0x2d0e:	call	0x15f0


0x2cf0:	ret	


0x2cd5:	push	rbx
0x2cd6:	mov	ebx, esi
0x2cd8:	call	0x16b0


0x1640:	jmp	qword ptr [rip + 0x2078b2]


0x2af0:	mov	byte ptr [rsp + 6], 1
0x2af5:	mov	byte ptr [rsp + 5], 1
0x2afa:	jmp	0x28e1


0x28c7:	test	rdx, rdx
0x28ca:	mov	eax, dword ptr [rdi]
0x28cc:	setne	byte ptr [rsp + 5]
0x28d1:	movzx	ebx, byte ptr [rsp + 5]
0x28d6:	test	eax, eax
0x28d8:	sete	al
0x28db:	and	eax, ebx
0x28dd:	mov	byte ptr [rsp + 6], al
0x28e1:	lea	rax, [r14 + 4]
0x28e5:	lea	rbp, [rsp + 0x20]
0x28ea:	lea	rbx, [rsp + 0x18]
0x28ef:	mov	qword ptr [rsp + 8], rax
0x28f4:	cmp	byte ptr [rsp + 6], 0
0x28f9:	mov	rdx, r15
0x28fc:	jne	0x29d5


0x2810:	mov	r14, rdi
0x2813:	mov	rdi, rbp
0x2816:	mov	r12, rsi
0x2819:	call	0x16c0


0x27f3:	mov	qword ptr [r13], 0
0x27fb:	xor	ebp, ebp
0x27fd:	pop	rbx
0x27fe:	mov	rax, rbp
0x2801:	pop	rbp
0x2802:	pop	r12
0x2804:	pop	r13
0x2806:	pop	r14
0x2808:	ret	


0x2605:	mov	rax, rcx
0x2608:	shr	rax, 2
0x260c:	lea	rax, [rax + rax*2]
0x2610:	cmp	rax, rsi
0x2613:	je	0x2728


0x2619:	lea	r9, [rip + 0x3c20]
0x2620:	jmp	0x26a6


0x2589:	ret	


0x24fc:	movzx	r8d, byte ptr [rdi]
0x2500:	lea	r9, [rip + 0x3c39]
0x2507:	movzx	r8d, byte ptr [r9 + r8]
0x250c:	test	r8b, r8b
0x250f:	js	0x2589


0x216d:	lea	rsi, [rip + 0x3a37]
0x2174:	xor	edi, edi
0x2176:	call	0x1570


0x213f:	lea	rsi, [rip + 0x3be2]
0x2146:	xor	edi, edi
0x2148:	call	0x1570


0x20c9:	cmp	qword ptr [rip + 0x206f1f], 0
0x20d1:	push	rbp
0x20d2:	mov	rbp, rsp
0x20d5:	je	0x20e3


0x20f8:	ret	


0x20b0:	pop	rbp
0x20b1:	ret	


0x2098:	mov	rax, qword ptr [rip + 0x206f49]
0x209f:	test	rax, rax
0x20a2:	je	0x20b0


0x2060:	pop	rbp
0x2061:	ret	


0x2047:	mov	rax, qword ptr [rip + 0x206f82]
0x204e:	test	rax, rax
0x2051:	je	0x2060




0x14ba:	add	rsp, 8
0x14be:	ret	


0x14b8:	call	rax












0x590a:	cmp	qword ptr [rdi + 0x48], 0
0x590f:	jne	0x58fa


0x1760:	jmp	qword ptr [rip + 0x207822]


0x16d0:	jmp	qword ptr [rip + 0x20786a]


0x16f0:	jmp	qword ptr [rip + 0x20785a]




0x1610:	jmp	qword ptr [rip + 0x2078ca]






0x523a:	call	0x1680


0x51f1:	sub	rsp, 8
0x51f5:	call	0x52a0


0x51d2:	mov	qword ptr [rsi], rax
0x51d5:	mov	rsi, rax
0x51d8:	jmp	0x50b0


0x51c7:	mov	rdx, rax
0x51ca:	shr	rdx, 1
0x51cd:	lea	rax, [rdx + rax + 1]
0x51d2:	mov	qword ptr [rsi], rax
0x51d5:	mov	rsi, rax
0x51d8:	jmp	0x50b0


0x5188:	xor	edx, edx
0x518a:	mov	eax, 0x80
0x518f:	xor	r8d, r8d
0x5192:	div	r9
0x5195:	test	rax, rax
0x5198:	sete	r8b
0x519c:	lea	rcx, [r8 + rax]
0x51a0:	jmp	0x5165


0x5165:	mov	rax, rcx
0x5168:	mul	r9
0x516b:	seto	dl
0x516e:	test	rax, rax
0x5171:	movzx	edx, dl
0x5174:	js	0x517b


0x517b:	sub	rsp, 8
0x517f:	call	0x52a0


0x513f:	mov	rax, rcx
0x5142:	shr	rax, 1
0x5145:	lea	rcx, [rax + rcx + 1]
0x514a:	mov	qword ptr [rsi], rcx
0x514d:	imul	rcx, r9
0x5151:	mov	rsi, rcx
0x5154:	jmp	0x50b0


0x5109:	jmp	0x50b0


0x50d8:	call	0x14d0


0x1710:	jmp	qword ptr [rip + 0x20784a]


0x5089:	jmp	0x5050




0x4f8c:	test	r11b, r11b
0x4f8f:	jne	0x4fb5


0x4f82:	add	r9, 1
0x4f86:	cmp	r9, 0xa
0x4f8a:	jne	0x4f60


0x4f76:	mov	rax, qword ptr [rax]
0x4f79:	test	rax, rax
0x4f7c:	mov	qword ptr [r8 + r9*8], rax
0x4f80:	je	0x4f8c


0x4ebb:	call	0x4a30


0x4eb1:	add	r9, 1
0x4eb5:	cmp	r9, 0xa
0x4eb9:	jne	0x4e90


0x4ea5:	mov	rax, qword ptr [r11]
0x4ea8:	test	rax, rax
0x4eab:	mov	qword ptr [r8 + r9*8], rax
0x4eaf:	je	0x4ebb


0x4e60:	add	r9, 1
0x4e64:	cmp	qword ptr [r8 + r9*8], 0
0x4e69:	jne	0x4e60


0x17b0:	jmp	qword ptr [rip + 0x2077fa]


0x14e0:	jmp	qword ptr [rip + 0x207962]


0x492a:	mov	qword ptr [rsp + 0x28], rsi
0x492f:	mov	qword ptr [rsp + 0x30], rdx
0x4934:	mov	rcx, rsp
0x4937:	mov	rdx, r8
0x493a:	mov	rsi, r9
0x493d:	call	0x40d0


0x4579:	lea	rbx, [rip + 0x204af0]
0x4580:	cmp	r12, rbx
0x4583:	je	0x4594


0x4562:	call	0x14d0


0x14d0:	jmp	qword ptr [rip + 0x20796a]




0x437e:	mov	qword ptr [rdi + 0x28], rsi
0x4382:	mov	qword ptr [rdi + 0x30], rdx
0x4386:	ret	




0x17a0:	jmp	qword ptr [rip + 0x207802]


0x15f0:	jmp	qword ptr [rip + 0x2078da]




0x28e1:	lea	rax, [r14 + 4]
0x28e5:	lea	rbp, [rsp + 0x20]
0x28ea:	lea	rbx, [rsp + 0x18]
0x28ef:	mov	qword ptr [rsp + 8], rax
0x28f4:	cmp	byte ptr [rsp + 6], 0
0x28f9:	mov	rdx, r15
0x28fc:	jne	0x29d5


0x2902:	test	r13, r13
0x2905:	sete	al
0x2908:	and	al, byte ptr [rsp + 5]
0x290c:	jne	0x2998


0x29d5:	mov	rcx, rbp
0x29d8:	mov	rdx, rbx
0x29db:	mov	rsi, r13
0x29de:	mov	rdi, r12
0x29e1:	call	0x24f0


0x2728:	test	rax, rax
0x272b:	lea	r8, [rdi + rax]
0x272f:	lea	rcx, [rip + 0x3b0a]
0x2736:	je	0x2722


0x26a6:	test	rsi, rsi
0x26a9:	je	0x27a8


0x2511:	movzx	r10d, byte ptr [rdi + 1]
0x2516:	movzx	r10d, byte ptr [r9 + r10]
0x251b:	test	r10b, r10b
0x251e:	js	0x2589


0x20e3:	call	0x2030


0x20d7:	mov	rdi, qword ptr [rip + 0x206f2a]
0x20de:	call	0x17f0


0x20a4:	pop	rbp
0x20a5:	jmp	rax


0x2053:	pop	rbp
0x2054:	jmp	rax


0x5911:	push	r12
0x5913:	push	rbp
0x5914:	mov	r12d, edx
0x5917:	push	rbx
0x5918:	mov	rbp, rsi
0x591b:	mov	rbx, rdi
0x591e:	call	0x16b0










0x1680:	jmp	qword ptr [rip + 0x207892]


0x5176:	test	rdx, rdx
0x5179:	je	0x514a




0x4f91:	call	0x4a30


0x4fb5:	mov	dword ptr [rsp + 8], r10d
0x4fba:	jmp	0x4f91


0x4f60:	cmp	r10d, 0x2f
0x4f64:	ja	0x4fbc


0x4e90:	mov	eax, dword ptr [r10]
0x4e93:	cmp	eax, 0x2f
0x4e96:	ja	0x4eda






0x4594:	pop	rbx
0x4595:	mov	dword ptr [rip + 0x204ab9], 1
0x459f:	pop	rbp
0x45a0:	pop	r12
0x45a2:	ret	


0x4585:	mov	rdi, r12
0x4588:	call	0x14d0








0x2912:	test	r13, r13
0x2915:	je	0x29f8


0x2998:	mov	rbx, qword ptr [rsp + 0x10]
0x299d:	sub	qword ptr [rbx], rdx
0x29a0:	mov	rbx, qword ptr [rsp + 0x28]
0x29a5:	xor	rbx, qword ptr fs:[0x28]
0x29ae:	jne	0x2b28


0x2722:	ret	


0x27a8:	test	rcx, rcx
0x27ab:	je	0x2722


0x26af:	test	rcx, rcx
0x26b2:	je	0x27a8


0x2520:	cmp	qword ptr [rcx], 0
0x2524:	mov	rax, qword ptr [rdx]
0x2527:	jne	0x25a0


0x17f0:	jmp	qword ptr [rip + 0x2077fa]




0x514a:	mov	qword ptr [rsi], rcx
0x514d:	imul	rcx, r9
0x5151:	mov	rsi, rcx
0x5154:	jmp	0x50b0


0x29f8:	sub	rdx, r15
0x29fb:	add	qword ptr [rsp + 0x18], rdx
0x2a00:	test	r14, r14
0x2a03:	mov	qword ptr [rsp + 0x20], r15
0x2a08:	je	0x2aff


0x291b:	cmp	byte ptr [r12], 0xa
0x2920:	je	0x2ac0


0x29b4:	add	rsp, 0x38
0x29b8:	pop	rbx
0x29b9:	pop	rbp
0x29ba:	pop	r12
0x29bc:	pop	r13
0x29be:	pop	r14
0x29c0:	pop	r15
0x29c2:	ret	


0x2b28:	call	0x15a0


0x27a0:	ret	


0x2740:	movzx	eax, byte ptr [rdi]
0x2743:	add	rdi, 3
0x2747:	add	rdx, 4
0x274b:	mov	esi, eax
0x274d:	shl	eax, 4
0x2750:	shr	sil, 2
0x2754:	and	esi, 0x3f
0x2757:	movzx	esi, byte ptr [rcx + rsi]
0x275b:	mov	byte ptr [rdx - 4], sil
0x275f:	movzx	esi, byte ptr [rdi - 2]
0x2763:	mov	r9d, esi
0x2766:	shr	r9b, 4
0x276a:	add	eax, r9d
0x276d:	and	eax, 0x3f
0x2770:	movzx	eax, byte ptr [rcx + rax]
0x2774:	mov	byte ptr [rdx - 3], al
0x2777:	movzx	eax, byte ptr [rdi - 1]
0x277b:	mov	r9d, eax
0x277e:	and	eax, 0x3f
0x2781:	shr	r9b, 6
0x2785:	movzx	eax, byte ptr [rcx + rax]
0x2789:	lea	esi, [r9 + rsi*4]
0x278d:	and	esi, 0x3f
0x2790:	movzx	esi, byte ptr [rcx + rsi]
0x2794:	mov	byte ptr [rdx - 2], sil
0x2798:	cmp	r8, rdi
0x279b:	mov	byte ptr [rdx - 1], al
0x279e:	jne	0x2740


0x27b1:	mov	byte ptr [rdx], 0
0x27b4:	ret	


0x26b8:	movzx	eax, byte ptr [rdi]
0x26bb:	mov	r8d, eax
0x26be:	shr	r8b, 2
0x26c2:	and	r8d, 0x3f
0x26c6:	cmp	rcx, 1
0x26ca:	movzx	r8d, byte ptr [r9 + r8]
0x26cf:	mov	byte ptr [rdx], r8b
0x26d2:	je	0x2722


0x2529:	cmp	rsi, 2
0x252d:	je	0x2596


0x25a0:	mov	r11d, r10d
0x25a3:	shl	r8d, 2
0x25a7:	add	rax, 1
0x25ab:	sar	r11b, 4
0x25af:	or	r8d, r11d
0x25b2:	mov	byte ptr [rax - 1], r8b
0x25b6:	sub	qword ptr [rcx], 1
0x25ba:	jmp	0x2529


0x2aff:	mov	rdx, r15
0x2b02:	mov	eax, 1
0x2b07:	jmp	0x2998


0x2a0e:	mov	r15, r12
0x2a11:	mov	eax, dword ptr [r14]
0x2a14:	cmp	eax, 4
0x2a17:	je	0x2a70


0x2ac0:	test	r14, r14
0x2ac3:	je	0x2ad8


0x2926:	sub	rdx, r15
0x2929:	add	qword ptr [rsp + 0x18], rdx
0x292e:	test	r14, r14
0x2931:	mov	qword ptr [rsp + 0x20], r15
0x2936:	lea	r15, [r12 + r13]
0x293a:	jne	0x2a11


0x15a0:	jmp	qword ptr [rip + 0x207902]


0x26d4:	shl	eax, 4
0x26d7:	cmp	rsi, 1
0x26db:	jne	0x2628


0x2596:	mov	qword ptr [rdx], rax
0x2599:	xor	eax, eax
0x259b:	ret	


0x252f:	movzx	r8d, byte ptr [rdi + 2]
0x2534:	cmp	r8b, 0x3d
0x2538:	je	0x2590


0x2a70:	mov	dword ptr [r14], 0
0x2a77:	cmp	r13, 3
0x2a7b:	jle	0x2a94


0x2a19:	test	eax, eax
0x2a1b:	je	0x2a77


0x2ad8:	sub	rdx, r15
0x2adb:	mov	qword ptr [rsp + 0x20], r15
0x2ae0:	add	qword ptr [rsp + 0x18], rdx
0x2ae5:	lea	r15, [r12 + r13]
0x2ae9:	jmp	0x2940


0x2ac5:	add	r12, 1
0x2ac9:	sub	r13, 1
0x2acd:	mov	r15, rdx
0x2ad0:	jmp	0x28f4


0x2940:	mov	rdi, r12
0x2943:	cmp	r13, 3
0x2947:	ja	0x295b


0x2a11:	mov	eax, dword ptr [r14]
0x2a14:	cmp	eax, 4
0x2a17:	je	0x2a70




0x26e1:	and	eax, 0x30
0x26e4:	cmp	rcx, 2
0x26e8:	movzx	eax, byte ptr [r9 + rax]
0x26ed:	mov	byte ptr [rdx + 1], al
0x26f0:	je	0x2722


0x2628:	movzx	r8d, byte ptr [rdi + 1]
0x262d:	mov	r10d, r8d
0x2630:	shr	r10b, 4
0x2634:	add	eax, r10d
0x2637:	and	eax, 0x3f
0x263a:	cmp	rcx, 2
0x263e:	movzx	eax, byte ptr [r9 + rax]
0x2643:	mov	byte ptr [rdx + 1], al
0x2646:	je	0x2722


0x2590:	cmp	rsi, 4
0x2594:	je	0x25e0


0x253a:	movzx	r8d, byte ptr [r9 + r8]
0x253f:	test	r8b, r8b
0x2542:	js	0x2596


0x2a94:	mov	eax, dword ptr [r14]
0x2a97:	jmp	0x2a1d


0x2a7d:	mov	edx, 4
0x2a82:	mov	esi, 0xa
0x2a87:	mov	rdi, r12
0x2a8a:	call	0x1650


0x2a77:	cmp	r13, 3
0x2a7b:	jle	0x2a94


0x2a1d:	cmp	r12, r15
0x2a20:	jae	0x2a4e


0x28f4:	cmp	byte ptr [rsp + 6], 0
0x28f9:	mov	rdx, r15
0x28fc:	jne	0x29d5


0x2949:	cmp	byte ptr [rsp + 7], 0
0x294e:	je	0x295b


0x295b:	mov	rcx, rbp
0x295e:	mov	rdx, rbx
0x2961:	mov	rsi, r13
0x2964:	call	0x24f0


0x26f2:	cmp	rcx, 3
0x26f6:	mov	byte ptr [rdx + 2], 0x3d
0x26fa:	je	0x2722


0x264c:	shl	r8d, 2
0x2650:	cmp	rsi, 2
0x2654:	je	0x2710


0x25e0:	cmp	byte ptr [rdi + 3], 0x3d
0x25e4:	jne	0x2596


0x2544:	cmp	qword ptr [rcx], 0
0x2548:	jne	0x25c0


0x1650:	jmp	qword ptr [rip + 0x2078aa]


0x2a4e:	mov	r13d, eax
0x2a51:	mov	rdi, qword ptr [rsp + 8]
0x2a56:	test	r13, r13
0x2a59:	jne	0x2943


0x2950:	cmp	byte ptr [rsp + 5], 0
0x2955:	jne	0x2a5f


0x26fc:	cmp	rcx, 4
0x2700:	mov	byte ptr [rdx + 3], 0x3d
0x2704:	je	0x2722


0x2710:	and	r8d, 0x3c
0x2714:	cmp	rcx, 3
0x2718:	movzx	eax, byte ptr [r9 + r8]
0x271d:	mov	byte ptr [rdx + 2], al
0x2720:	jne	0x26fc


0x265a:	movzx	eax, byte ptr [rdi + 2]
0x265e:	mov	r10d, eax
0x2661:	shr	r10b, 6
0x2665:	add	r8d, r10d
0x2668:	and	r8d, 0x3f
0x266c:	cmp	rcx, 3
0x2670:	movzx	r8d, byte ptr [r9 + r8]
0x2675:	mov	byte ptr [rdx + 2], r8b
0x2679:	je	0x2722


0x25e6:	jmp	0x2581


0x254a:	cmp	rsi, 3
0x254e:	je	0x2596


0x25c0:	mov	r11d, r8d
0x25c3:	shl	r10d, 4
0x25c7:	add	rax, 1
0x25cb:	sar	r11b, 2
0x25cf:	or	r10d, r11d
0x25d2:	mov	byte ptr [rax - 1], r10b
0x25d6:	sub	qword ptr [rcx], 1
0x25da:	jmp	0x254a




0x2a49:	cmp	r12, r15
0x2a4c:	jne	0x2a28


0x2a37:	lea	ecx, [rax + 1]
0x2a3a:	cmp	ecx, 4
0x2a3d:	mov	dword ptr [r14], ecx
0x2a40:	mov	byte ptr [r14 + rax + 4], dl
0x2a45:	je	0x2aa0


0x2a5f:	mov	rdx, qword ptr [rsp + 0x20]
0x2a64:	mov	eax, 1
0x2a69:	jmp	0x2998


0x2943:	cmp	r13, 3
0x2947:	ja	0x295b


0x2706:	xor	esi, esi
0x2708:	jmp	0x269e


0x267f:	and	eax, 0x3f
0x2682:	cmp	rcx, 4
0x2686:	movzx	eax, byte ptr [r9 + rax]
0x268b:	mov	byte ptr [rdx + 3], al
0x268e:	je	0x2722


0x2581:	mov	qword ptr [rdx], rax
0x2584:	mov	eax, 1
0x2589:	ret	


0x2550:	movzx	edi, byte ptr [rdi + 3]
0x2554:	cmp	dil, 0x3d
0x2558:	je	0x25f0


0x2a28:	add	r12, 1
0x2a2c:	movzx	edx, byte ptr [r12 - 1]
0x2a32:	cmp	dl, 0xa
0x2a35:	je	0x2a49


0x2aa0:	mov	eax, 4
0x2aa5:	mov	rdi, qword ptr [rsp + 8]
0x2aaa:	mov	r13d, eax
0x2aad:	test	r13, r13
0x2ab0:	jne	0x2943


0x2a47:	mov	eax, ecx
0x2a49:	cmp	r12, r15
0x2a4c:	jne	0x2a28


0x269e:	add	rdx, 4
0x26a2:	sub	rcx, 4
0x26a6:	test	rsi, rsi
0x26a9:	je	0x27a8


0x2694:	sub	rsi, 3
0x2698:	je	0x269e


0x25f0:	cmp	rsi, 4
0x25f4:	jne	0x2596


0x255e:	movzx	esi, byte ptr [r9 + rdi]
0x2563:	test	sil, sil
0x2566:	js	0x2596


0x2ab6:	jmp	0x2a5f


0x269a:	add	rdi, 3
0x269e:	add	rdx, 4
0x26a2:	sub	rcx, 4
0x26a6:	test	rsi, rsi
0x26a9:	je	0x27a8


0x25f6:	jmp	0x2581


0x2568:	cmp	qword ptr [rcx], 0
0x256c:	je	0x2581


0x256e:	shl	r8d, 6
0x2572:	add	rax, 1
0x2576:	or	r8d, esi
0x2579:	mov	byte ptr [rax - 1], r8b
0x257d:	sub	qword ptr [rcx], 1
0x2581:	mov	qword ptr [rdx], rax
0x2584:	mov	eax, 1
0x2589:	ret	


0x20e8:	mov	byte ptr [rip + 0x206fd9], 1
0x20ef:	pop	rbp
0x20f0:	ret	


0x2969:	test	al, al
0x296b:	je	0x2b1e


0x2b1e:	mov	rdx, qword ptr [rsp + 0x20]
0x2b23:	jmp	0x2998


0x2971:	sub	r15, r12
0x2974:	cmp	byte ptr [rsp + 6], 0
0x2979:	mov	r13, r15
0x297c:	mov	r15, qword ptr [rsp + 0x20]
0x2981:	mov	rdx, r15
0x2984:	jne	0x29d5


0x2986:	test	r13, r13
0x2989:	sete	al
0x298c:	and	al, byte ptr [rsp + 5]
0x2990:	je	0x2912


0x29e6:	test	al, al
0x29e8:	jne	0x29c8


0x29ea:	mov	rdx, qword ptr [rsp + 0x20]
0x29ef:	jmp	0x2902


0x29c8:	mov	r15, qword ptr [rsp + 0x20]
0x29cd:	add	r12, 4
0x29d1:	sub	r13, 4
0x29d5:	mov	rcx, rbp
0x29d8:	mov	rdx, rbx
0x29db:	mov	rsi, r13
0x29de:	mov	rdi, r12
0x29e1:	call	0x24f0


0x5b31:	test	rbp, rbp
0x5b34:	je	0x5b56


0x5b56:	add	rsp, 8
0x5b5a:	pop	rbx
0x5b5b:	pop	rbp
0x5b5c:	pop	r12
0x5b5e:	pop	r13
0x5b60:	pop	r14
0x5b62:	pop	r15
0x5b64:	ret	


0x5b36:	xor	ebx, ebx
0x5b38:	nop	dword ptr [rax + rax]
0x5b40:	mov	rdx, r15
0x5b43:	mov	rsi, r14
0x5b46:	mov	edi, r13d
0x5b49:	call	qword ptr [r12 + rbx*8]


0x2a8f:	test	rax, rax
0x2a92:	je	0x2b0c


0x2b0c:	mov	rdi, r12
0x2b0f:	mov	r13d, 4
0x2b15:	add	r12, 4
0x2b19:	jmp	0x295b


0x523f:	test	rax, rax
0x5242:	je	0x5249


0x5244:	add	rsp, 8
0x5248:	ret	


0x2d13:	test	rax, rax
0x2d16:	je	0x2d6d


0x2d6d:	mov	qword ptr [rip + 0x20636c], rbx
0x2d74:	mov	qword ptr [rip + 0x20632d], rbx
0x2d7b:	pop	rbx
0x2d7c:	ret	


0x2d18:	lea	r8, [rax + 1]
0x2d1c:	mov	rdx, r8
0x2d1f:	sub	rdx, rbx
0x2d22:	cmp	rdx, 6
0x2d26:	jle	0x2d6d


0x2d28:	lea	rsi, [rax - 6]
0x2d2c:	lea	rdi, [rip + 0x358d]
0x2d33:	mov	ecx, 7
0x2d38:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2d38:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2d3a:	seta	dl
0x2d3d:	sbb	dl, 0
0x2d40:	test	dl, dl
0x2d42:	jne	0x2d6d


0x2d44:	lea	rdi, [rip + 0x357d]
0x2d4b:	mov	ecx, 3
0x2d50:	mov	rsi, r8
0x2d53:	mov	rbx, r8
0x2d56:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2d56:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2d58:	seta	dl
0x2d5b:	sbb	dl, 0
0x2d5e:	test	dl, dl
0x2d60:	jne	0x2d6d


0x2d62:	lea	rbx, [rax + 4]
0x2d66:	mov	qword ptr [rip + 0x206313], rbx
0x2d6d:	mov	qword ptr [rip + 0x20636c], rbx
0x2d74:	mov	qword ptr [rip + 0x20632d], rbx
0x2d7b:	pop	rbx
0x2d7c:	ret	


0x2d9a:	call	0x14e0


0x458d:	mov	qword ptr [rip + 0x204acc], rbx
0x4594:	pop	rbx
0x4595:	mov	dword ptr [rip + 0x204ab9], 1
0x459f:	pop	rbp
0x45a0:	pop	r12
0x45a2:	ret	


0x4567:	mov	qword ptr [rip + 0x204afe], 0x100
0x4572:	mov	qword ptr [rip + 0x204aff], rbx
0x4579:	lea	rbx, [rip + 0x204af0]
0x4580:	cmp	r12, rbx
0x4583:	je	0x4594


0x50dd:	xor	eax, eax
0x50df:	pop	rbx
0x50e0:	ret	


0x454c:	cmp	rbx, rbp
0x454f:	jne	0x4540


0x4540:	mov	rdi, qword ptr [rbx]
0x4543:	add	rbx, 0x10
0x4547:	call	0x14d0


0x4a6c:	lea	rsi, [rip + 0x1d48]
0x4a73:	xor	edi, edi
0x4a75:	mov	edx, 5
0x4a7a:	call	0x1570


0x4b81:	jmp	0x4a6c


0x50c6:	test	rax, rax
0x50c9:	jne	0x50d0


0x50cb:	test	rbx, rbx
0x50ce:	jne	0x50e1


0x50d0:	pop	rbx
0x50d1:	ret	


0x50e1:	call	0x52a0


0x58be:	test	eax, eax
0x58c0:	je	0x58ca


0x58c2:	test	dword ptr [rbx], 0x100
0x58c8:	jne	0x58d8


0x58d8:	mov	rdi, rbx
0x58db:	mov	edx, 1
0x58e0:	xor	esi, esi
0x58e2:	call	0x58f0


0x1833:	lea	rsi, [rip + 0x4fc7]
0x183a:	mov	edi, 6
0x183f:	call	0x1720


0x2f01:	cmp	r15d, 0xa
0x2f05:	mov	qword ptr [rsp + 0x58], rax
0x2f0a:	ja	0x40bf


0x2f10:	lea	rcx, [rip + 0x3429]
0x2f17:	mov	edx, r15d
0x2f1a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2f1e:	add	rax, rcx
0x2f21:	jmp	rax


0x40bf:	call	0x14e0


0x5458:	mov	dword ptr [rax], 0
0x545e:	mov	r12, rax
0x5461:	movzx	ebx, byte ptr [rbp]
0x5465:	call	0x17e0


0x17e0:	jmp	qword ptr [rip + 0x2077e2]




0x40f1:	mov	r13, rax
0x40f4:	mov	eax, dword ptr [rax]
0x40f6:	test	r15d, r15d
0x40f9:	mov	rbx, qword ptr [rip + 0x204f60]
0x4100:	mov	dword ptr [rsp + 0x18], eax
0x4104:	js	0x4271


0x4271:	call	0x14e0


0x410a:	cmp	dword ptr [rip + 0x204f47], r15d
0x4111:	jg	0x4175


0x4113:	cmp	r15d, 0x7fffffff
0x411a:	je	0x4276


0x4175:	mov	eax, dword ptr [rbp + 4]
0x4178:	shl	r15, 4
0x417c:	sub	rsp, 8
0x4180:	add	rbx, r15
0x4183:	lea	r15, [rbp + 8]
0x4187:	mov	r8d, dword ptr [rbp]
0x418b:	mov	r11, qword ptr [rbx]
0x418e:	mov	r12, qword ptr [rbx + 8]
0x4192:	mov	rcx, r14
0x4195:	or	eax, 1
0x4198:	mov	dword ptr [rsp + 0x24], eax
0x419c:	push	qword ptr [rbp + 0x30]
0x419f:	mov	r9d, eax
0x41a2:	push	qword ptr [rbp + 0x28]
0x41a5:	push	r15
0x41a7:	mov	rsi, r11
0x41aa:	mov	rdx, qword ptr [rsp + 0x28]
0x41af:	mov	rdi, r12
0x41b2:	mov	qword ptr [rsp + 0x30], r11
0x41b7:	call	0x2e90


0x4276:	call	0x52a0


0x4120:	lea	r12d, [r15 + 1]
0x4124:	lea	rax, [rip + 0x204f45]
0x412b:	movsxd	rsi, r12d
0x412e:	shl	rsi, 4
0x4132:	cmp	rbx, rax
0x4135:	je	0x4250


0x4250:	xor	edi, edi
0x4252:	call	0x50b0


0x413b:	mov	rdi, rbx
0x413e:	call	0x50b0


0x4143:	mov	rbx, rax
0x4146:	mov	qword ptr [rip + 0x204f13], rax
0x414d:	movsxd	rdi, dword ptr [rip + 0x204f04]
0x4154:	mov	edx, r12d
0x4157:	xor	esi, esi
0x4159:	sub	edx, edi
0x415b:	shl	rdi, 4
0x415f:	movsxd	rdx, edx
0x4162:	add	rdi, rbx
0x4165:	shl	rdx, 4
0x4169:	call	0x1630


0x1630:	jmp	qword ptr [rip + 0x2078ba]




0x4257:	movdqa	xmm0, xmmword ptr [rip + 0x204e11]
0x425f:	mov	rbx, rax
0x4262:	mov	qword ptr [rip + 0x204df7], rax
0x4269:	movups	xmmword ptr [rax], xmm0
0x426c:	jmp	0x414d


0x414d:	movsxd	rdi, dword ptr [rip + 0x204f04]
0x4154:	mov	edx, r12d
0x4157:	xor	esi, esi
0x4159:	sub	edx, edi
0x415b:	shl	rdi, 4
0x415f:	movsxd	rdx, edx
0x4162:	add	rdi, rbx
0x4165:	shl	rdx, 4
0x4169:	call	0x1630


0x428c:	mov	r12d, dword ptr [rax]
0x428f:	mov	rbp, rax
0x4292:	lea	rax, [rip + 0x204f67]
0x4299:	test	rbx, rbx
0x429c:	mov	esi, 0x38
0x42a1:	cmove	rbx, rax
0x42a5:	mov	rdi, rbx
0x42a8:	call	0x5250


0x43c2:	mov	r12d, dword ptr [rax]
0x43c5:	mov	rbp, rax
0x43c8:	lea	rax, [rbx + 8]
0x43cc:	sub	rsp, 8
0x43d0:	mov	r9d, dword ptr [rbx + 4]
0x43d4:	push	qword ptr [rbx + 0x30]
0x43d7:	mov	r8d, dword ptr [rbx]
0x43da:	push	qword ptr [rbx + 0x28]
0x43dd:	mov	rdx, r15
0x43e0:	push	rax
0x43e1:	mov	rcx, qword ptr [rsp + 0x28]
0x43e6:	mov	rsi, r14
0x43e9:	mov	rdi, r13
0x43ec:	call	0x2e90


0x443f:	test	r12, r12
0x4442:	mov	r13, rax
0x4445:	mov	eax, dword ptr [rax]
0x4447:	sete	bpl
0x444b:	or	ebp, dword ptr [rbx + 4]
0x444e:	lea	r10, [rbx + 8]
0x4452:	sub	rsp, 8
0x4456:	mov	r8d, dword ptr [rbx]
0x4459:	mov	rcx, r15
0x445c:	mov	dword ptr [rsp + 0x14], eax
0x4460:	push	qword ptr [rbx + 0x30]
0x4463:	mov	rdx, r14
0x4466:	push	qword ptr [rbx + 0x28]
0x4469:	push	r10
0x446b:	xor	esi, esi
0x446d:	mov	r9d, ebp
0x4470:	xor	edi, edi
0x4472:	mov	qword ptr [rsp + 0x40], r10
0x4477:	call	0x2e90


0x281e:	test	rax, rax
0x2821:	mov	qword ptr [r13], rax
0x2825:	je	0x27fd


0x27fd:	pop	rbx
0x27fe:	mov	rax, rbp
0x2801:	pop	rbp
0x2802:	pop	r12
0x2804:	pop	r13
0x2806:	pop	r14
0x2808:	ret	


0x2827:	mov	rcx, rbp
0x282a:	mov	rdx, rax
0x282d:	mov	rbp, rbx
0x2830:	mov	rsi, r12
0x2833:	mov	rdi, r14
0x2836:	call	0x2600


0x283b:	pop	rbx
0x283c:	mov	rax, rbp
0x283f:	pop	rbp
0x2840:	pop	r12
0x2842:	pop	r13
0x2844:	pop	r14
0x2846:	ret	


0x2b71:	test	rax, rax
0x2b74:	mov	qword ptr [rbx], rax
0x2b77:	je	0x2ba8


0x2ba8:	mov	eax, 1
0x2bad:	mov	rcx, qword ptr [rsp + 0x18]
0x2bb2:	xor	rcx, qword ptr fs:[0x28]
0x2bbb:	jne	0x2bea


0x2b79:	lea	r8, [rsp + 0x10]
0x2b7e:	mov	rcx, rax
0x2b81:	mov	rdx, r14
0x2b84:	mov	rsi, r13
0x2b87:	mov	rdi, r12
0x2b8a:	call	0x2880


0x2bbd:	add	rsp, 0x20
0x2bc1:	pop	rbx
0x2bc2:	pop	rbp
0x2bc3:	pop	r12
0x2bc5:	pop	r13
0x2bc7:	pop	r14
0x2bc9:	ret	


0x2bea:	call	0x15a0


0x2b8f:	test	al, al
0x2b91:	je	0x2bd0


0x2bd0:	mov	rdi, qword ptr [rbx]
0x2bd3:	mov	byte ptr [rsp + 0xf], al
0x2bd7:	call	0x14d0


0x2b93:	test	rbp, rbp
0x2b96:	je	0x2ba8


0x2b98:	mov	rdx, qword ptr [rsp + 0x10]
0x2b9d:	mov	qword ptr [rbp], rdx
0x2ba1:	jmp	0x2bad


0x2bad:	mov	rcx, qword ptr [rsp + 0x18]
0x2bb2:	xor	rcx, qword ptr fs:[0x28]
0x2bbb:	jne	0x2bea


0x2bdc:	mov	qword ptr [rbx], 0
0x2be3:	movzx	eax, byte ptr [rsp + 0xf]
0x2be8:	jmp	0x2bad


0x5059:	test	rax, rax
0x505c:	jne	0x5063


0x505e:	test	rbx, rbx
0x5061:	jne	0x5065


0x5063:	pop	rbx
0x5064:	ret	


0x5065:	call	0x52a0


0x5209:	mov	rdx, rbx
0x520c:	xor	esi, esi
0x520e:	mov	rdi, rax
0x5211:	pop	rbx
0x5212:	jmp	0x1630


0x5264:	add	rsp, 8
0x5268:	mov	rdx, rbx
0x526b:	mov	rsi, rbp
0x526e:	pop	rbx
0x526f:	pop	rbp
0x5270:	mov	rdi, rax
0x5273:	jmp	0x16a0


0x16a0:	jmp	qword ptr [rip + 0x207882]




0x5289:	mov	rdi, rbx
0x528c:	lea	rsi, [rax + 1]
0x5290:	pop	rbx
0x5291:	jmp	0x5250


0x4a7f:	lea	rdx, [rip + 0x205a]
0x4a86:	mov	rcx, rax
0x4a89:	mov	r8d, 0x7e3
0x4a8f:	mov	esi, 1
0x4a94:	mov	rdi, rbp
0x4a97:	xor	eax, eax
0x4a99:	call	0x17b0


0x4a9e:	lea	rsi, [rip + 0x1da3]
0x4aa5:	xor	edi, edi
0x4aa7:	mov	edx, 5
0x4aac:	call	0x1570


0x4ab1:	mov	rsi, rbp
0x4ab4:	mov	rdi, rax
0x4ab7:	call	0x1670


0x1670:	jmp	qword ptr [rip + 0x20789a]




0x214d:	mov	rdi, qword ptr [rip + 0x206f6c]
0x2154:	mov	rdx, rax
0x2157:	mov	rcx, rbx
0x215a:	mov	esi, 1
0x215f:	xor	eax, eax
0x2161:	call	0x17b0


0x2166:	mov	edi, ebp
0x2168:	call	0x1790


0x1790:	jmp	qword ptr [rip + 0x20780a]




0x217b:	mov	rdx, rbx
0x217e:	mov	rsi, rax
0x2181:	mov	edi, 1
0x2186:	xor	eax, eax
0x2188:	call	0x1730


0x1730:	jmp	qword ptr [rip + 0x20783a]




0x4fe4:	lea	rdx, [rip + 0x182c]
0x4feb:	mov	rsi, rax
0x4fee:	mov	edi, 1
0x4ff3:	xor	eax, eax
0x4ff5:	call	0x1730


0x52b7:	mov	edi, dword ptr [rip + 0x203d5b]
0x52bd:	lea	rdx, [rip + 0xfc0]
0x52c4:	mov	rcx, rax
0x52c7:	xor	esi, esi
0x52c9:	xor	eax, eax
0x52cb:	call	0x1750


0x1750:	jmp	qword ptr [rip + 0x20782a]




0x5923:	mov	edx, r12d
0x5926:	mov	rsi, rbp
0x5929:	mov	edi, eax
0x592b:	call	0x1600


0x1600:	jmp	qword ptr [rip + 0x2078d2]




0x2cdd:	mov	ecx, ebx
0x2cdf:	xor	edx, edx
0x2ce1:	xor	esi, esi
0x2ce3:	pop	rbx
0x2ce4:	mov	edi, eax
0x2ce6:	jmp	0x1640


0x583c:	test	eax, eax
0x583e:	mov	rdi, rbx
0x5841:	js	0x5897


0x5897:	pop	rbx
0x5898:	pop	rbp
0x5899:	pop	r12
0x589b:	jmp	0x1550


0x5843:	call	0x16f0


0x1550:	jmp	qword ptr [rip + 0x20792a]




0x5848:	test	eax, eax
0x584a:	jne	0x5878


0x584c:	mov	rdi, rbx
0x584f:	call	0x58b0


0x5878:	mov	rdi, rbx
0x587b:	call	0x16b0


0x5880:	xor	esi, esi
0x5882:	mov	edx, 1
0x5887:	mov	edi, eax
0x5889:	call	0x1600


0x5987:	cmp	rax, -3
0x598b:	mov	rbp, rax
0x598e:	jbe	0x59b0


0x59b0:	mov	rdx, qword ptr [rsp + 8]
0x59b5:	xor	rdx, qword ptr fs:[0x28]
0x59be:	mov	rax, rbp
0x59c1:	jne	0x59ce


0x5990:	test	r12, r12
0x5993:	je	0x59b0


0x59c3:	add	rsp, 0x18
0x59c7:	pop	rbx
0x59c8:	pop	rbp
0x59c9:	pop	r12
0x59cb:	pop	r13
0x59cd:	ret	


0x59ce:	call	0x15a0


0x5995:	xor	edi, edi
0x5997:	call	0x5a60


0x59ec:	mov	ebx, dword ptr [rbp]
0x59ef:	mov	rdi, rbp
0x59f2:	mov	r12, rax
0x59f5:	call	0x5830


0x1844:	lea	rsi, [rip + 0x4421]
0x184b:	lea	rdi, [rip + 0x43f1]
0x1852:	call	0x1560


0x1560:	jmp	qword ptr [rip + 0x207922]




0x5a6b:	mov	rdx, rax
0x5a6e:	mov	eax, 1
0x5a73:	test	rdx, rdx
0x5a76:	je	0x5a95


0x5a95:	add	rsp, 8
0x5a99:	ret	


0x5a78:	lea	rdi, [rip + 0x11cc]
0x5a7f:	mov	ecx, 2
0x5a84:	mov	rsi, rdx
0x5a87:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5a87:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5a89:	seta	cl
0x5a8c:	sbb	cl, 0
0x5a8f:	xor	eax, eax
0x5a91:	test	cl, cl
0x5a93:	jne	0x5aa0


0x5aa0:	lea	rdi, [rip + 0x11a6]
0x5aa7:	mov	ecx, 6
0x5aac:	mov	rsi, rdx
0x5aaf:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5aaf:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5ab1:	seta	al
0x5ab4:	sbb	al, 0
0x5ab6:	test	al, al
0x5ab8:	setne	al
0x5abb:	add	rsp, 8
0x5abf:	ret	


0x599c:	test	al, al
0x599e:	jne	0x59b0


0x59a0:	movzx	eax, byte ptr [r13]
0x59a5:	mov	ebp, 1
0x59aa:	mov	dword ptr [rbx], eax
0x59ac:	nop	dword ptr [rax]
0x59b0:	mov	rdx, qword ptr [rsp + 8]
0x59b5:	xor	rdx, qword ptr fs:[0x28]
0x59be:	mov	rax, rbp
0x59c1:	jne	0x59ce


0x5ace:	test	rax, rax
0x5ad1:	je	0x5af0


0x5af0:	lea	rax, [rip + 0x115c]
0x5af7:	add	rsp, 8
0x5afb:	ret	


0x5ad3:	cmp	byte ptr [rax], 0
0x5ad6:	lea	rdx, [rip + 0x1176]
0x5add:	cmove	rax, rdx
0x5ae1:	add	rsp, 8
0x5ae5:	ret	


0x2db0:	movzx	edx, byte ptr [rax]
0x2db3:	and	edx, 0xffffffdf
0x2db6:	cmp	dl, 0x55
0x2db9:	je	0x2e30


0x2e30:	movzx	edx, byte ptr [rax + 1]
0x2e34:	and	edx, 0xffffffdf
0x2e37:	cmp	dl, 0x54
0x2e3a:	jne	0x2dc0


0x2dbb:	cmp	dl, 0x47
0x2dbe:	je	0x2de0


0x2e3c:	movzx	edx, byte ptr [rax + 2]
0x2e40:	and	edx, 0xffffffdf
0x2e43:	cmp	dl, 0x46
0x2e46:	jne	0x2dc0


0x2dc0:	lea	rax, [rip + 0x3514]
0x2dc7:	lea	rdx, [rip + 0x350f]
0x2dce:	cmp	ebx, 9
0x2dd1:	cmovne	rax, rdx
0x2dd5:	add	rsp, 8
0x2dd9:	pop	rbx
0x2dda:	pop	rbp
0x2ddb:	ret	


0x2de0:	movzx	edx, byte ptr [rax + 1]
0x2de4:	and	edx, 0xffffffdf
0x2de7:	cmp	dl, 0x42
0x2dea:	jne	0x2dc0


0x2e4c:	cmp	byte ptr [rax + 3], 0x2d
0x2e50:	jne	0x2dc0


0x2dec:	cmp	byte ptr [rax + 2], 0x31
0x2df0:	jne	0x2dc0


0x2e56:	cmp	byte ptr [rax + 4], 0x38
0x2e5a:	jne	0x2dc0


0x2df2:	cmp	byte ptr [rax + 3], 0x38
0x2df6:	jne	0x2dc0


0x2e60:	cmp	byte ptr [rax + 5], 0
0x2e64:	jne	0x2dc0


0x2df8:	cmp	byte ptr [rax + 4], 0x30
0x2dfc:	jne	0x2dc0


0x2e6a:	cmp	byte ptr [rbp], 0x60
0x2e6e:	lea	rax, [rip + 0x3457]
0x2e75:	lea	rdx, [rip + 0x3454]
0x2e7c:	cmovne	rax, rdx
0x2e80:	add	rsp, 8
0x2e84:	pop	rbx
0x2e85:	pop	rbp
0x2e86:	ret	


0x2dfe:	cmp	byte ptr [rax + 5], 0x33
0x2e02:	jne	0x2dc0


0x2e04:	cmp	byte ptr [rax + 6], 0x30
0x2e08:	jne	0x2dc0


0x2e0a:	cmp	byte ptr [rax + 7], 0
0x2e0e:	jne	0x2dc0


0x2e10:	cmp	byte ptr [rbp], 0x60
0x2e14:	lea	rax, [rip + 0x34b9]
0x2e1b:	lea	rdx, [rip + 0x34b6]
0x2e22:	cmovne	rax, rdx
0x2e26:	add	rsp, 8
0x2e2a:	pop	rbx
0x2e2b:	pop	rbp
0x2e2c:	ret	


0x1857:	lea	rdi, [rip + 0x43e5]
0x185e:	call	0x1540


0x1540:	jmp	qword ptr [rip + 0x207932]




0x588e:	cmp	rax, -1
0x5892:	jne	0x584c


0x5894:	mov	rdi, rbx
0x5897:	pop	rbx
0x5898:	pop	rbp
0x5899:	pop	r12
0x589b:	jmp	0x1550


0x5930:	cmp	rax, -1
0x5934:	je	0x5942


0x5942:	pop	rbx
0x5943:	pop	rbp
0x5944:	pop	r12
0x5946:	ret	


0x5936:	and	dword ptr [rbx], 0xffffffef
0x5939:	mov	qword ptr [rbx + 0x90], rax
0x5940:	xor	eax, eax
0x5942:	pop	rbx
0x5943:	pop	rbp
0x5944:	pop	r12
0x5946:	ret	


0x52d0:	call	0x14e0


0x4ffa:	lea	rsi, [rip + 0x182c]
0x5001:	mov	edx, 5
0x5006:	xor	edi, edi
0x5008:	call	0x1570


0x500d:	lea	rcx, [rip + 0x107c]
0x5014:	lea	rdx, [rip + 0xc24]
0x501b:	mov	rsi, rax
0x501e:	mov	edi, 1
0x5023:	xor	eax, eax
0x5025:	call	0x1730


0x502a:	mov	rbx, qword ptr [rip + 0x204057]
0x5031:	lea	rsi, [rip + 0x1a28]
0x5038:	xor	edi, edi
0x503a:	mov	edx, 5
0x503f:	call	0x1570


0x5044:	mov	rsi, rbx
0x5047:	mov	rdi, rax
0x504a:	pop	rbx
0x504b:	jmp	0x1670


0x218d:	lea	rsi, [rip + 0x3bbc]
0x2194:	mov	edx, 5
0x2199:	xor	edi, edi
0x219b:	call	0x1570


0x21a0:	mov	edx, 0x40
0x21a5:	mov	rsi, rax
0x21a8:	mov	edi, 1
0x21ad:	xor	eax, eax
0x21af:	call	0x1730


0x21b4:	mov	rbx, qword ptr [rip + 0x206ecd]
0x21bb:	lea	rsi, [rip + 0x3bd6]
0x21c2:	mov	edx, 5
0x21c7:	xor	edi, edi
0x21c9:	call	0x1570


0x21ce:	mov	rsi, rbx
0x21d1:	mov	rdi, rax
0x21d4:	call	0x1670


0x21d9:	mov	rbx, qword ptr [rip + 0x206ea8]
0x21e0:	lea	rsi, [rip + 0x3be9]
0x21e7:	mov	edx, 5
0x21ec:	xor	edi, edi
0x21ee:	call	0x1570


0x21f3:	mov	rsi, rbx
0x21f6:	mov	rdi, rax
0x21f9:	call	0x1670


0x21fe:	mov	rbx, qword ptr [rip + 0x206e83]
0x2205:	lea	rsi, [rip + 0x3c14]
0x220c:	mov	edx, 5
0x2211:	xor	edi, edi
0x2213:	call	0x1570


0x2218:	mov	rsi, rbx
0x221b:	mov	rdi, rax
0x221e:	call	0x1670


0x2223:	mov	rbx, qword ptr [rip + 0x206e5e]
0x222a:	lea	rsi, [rip + 0x3ce7]
0x2231:	mov	edx, 5
0x2236:	xor	edi, edi
0x2238:	call	0x1570


0x223d:	mov	rsi, rbx
0x2240:	mov	rdi, rax
0x2243:	call	0x1670


0x2248:	mov	rbx, qword ptr [rip + 0x206e39]
0x224f:	lea	rsi, [rip + 0x3cf2]
0x2256:	mov	edx, 5
0x225b:	xor	edi, edi
0x225d:	call	0x1570


0x2262:	mov	rsi, rbx
0x2265:	mov	rdi, rax
0x2268:	lea	rbx, [rip + 0x3935]
0x226f:	call	0x1670


0x2274:	lea	rsi, [rip + 0x3d05]
0x227b:	mov	edx, 5
0x2280:	xor	edi, edi
0x2282:	call	0x1570


0x2287:	lea	rcx, [rip + 0x3916]
0x228e:	mov	rsi, rax
0x2291:	mov	edi, 1
0x2296:	xor	eax, eax
0x2298:	mov	rdx, rcx
0x229b:	call	0x1730


0x22a0:	lea	rax, [rip + 0x3922]
0x22a7:	lea	rcx, [rip + 0x395c]
0x22ae:	mov	qword ptr [rsp + 0x60], 0
0x22b7:	mov	qword ptr [rsp + 0x68], 0
0x22c0:	mov	rdx, rsp
0x22c3:	mov	qword ptr [rsp], rax
0x22c7:	lea	rax, [rip + 0x38fd]
0x22ce:	mov	qword ptr [rsp + 0x30], rcx
0x22d3:	lea	rcx, [rip + 0x393a]
0x22da:	mov	qword ptr [rsp + 8], rax
0x22df:	lea	rax, [rip + 0x395d]
0x22e6:	mov	qword ptr [rsp + 0x40], rcx
0x22eb:	lea	rcx, [rip + 0x392c]
0x22f2:	mov	qword ptr [rsp + 0x10], rax
0x22f7:	lea	rax, [rip + 0x38dd]
0x22fe:	mov	qword ptr [rsp + 0x50], rcx
0x2303:	mov	qword ptr [rsp + 0x18], rax
0x2308:	lea	rax, [rip + 0x38e2]
0x230f:	mov	qword ptr [rsp + 0x20], rax
0x2314:	lea	rax, [rip + 0x38e0]
0x231b:	mov	qword ptr [rsp + 0x28], rax
0x2320:	mov	qword ptr [rsp + 0x38], rax
0x2325:	mov	qword ptr [rsp + 0x48], rax
0x232a:	mov	qword ptr [rsp + 0x58], rax
0x232f:	nop	
0x2330:	add	rdx, 0x10
0x2334:	mov	rdi, qword ptr [rdx]
0x2337:	test	rdi, rdi
0x233a:	je	0x234f


0x234f:	mov	r12, qword ptr [rdx + 8]
0x2353:	xor	edi, edi
0x2355:	mov	edx, 5
0x235a:	lea	rsi, [rip + 0x38c7]
0x2361:	test	r12, r12
0x2364:	je	0x242b


0x233c:	mov	ecx, 7
0x2341:	mov	rsi, rbx
0x2344:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x242b:	call	0x1570


0x236a:	call	0x1570


0x2344:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2346:	seta	al
0x2349:	sbb	al, 0
0x234b:	test	al, al
0x234d:	jne	0x2330


0x2330:	add	rdx, 0x10
0x2334:	mov	rdi, qword ptr [rdx]
0x2337:	test	rdi, rdi
0x233a:	je	0x234f


0x236f:	lea	rcx, [rip + 0x3d1a]
0x2376:	lea	rdx, [rip + 0x38c2]
0x237d:	mov	rsi, rax
0x2380:	mov	edi, 1
0x2385:	xor	eax, eax
0x2387:	call	0x1730


0x238c:	xor	esi, esi
0x238e:	mov	edi, 5
0x2393:	call	0x1720


0x2398:	test	rax, rax
0x239b:	je	0x23b9


0x23b9:	lea	rsi, [rip + 0x3891]
0x23c0:	xor	edi, edi
0x23c2:	mov	edx, 5
0x23c7:	call	0x1570


0x239d:	lea	rsi, [rip + 0x38a9]
0x23a4:	mov	edx, 3
0x23a9:	mov	rdi, rax
0x23ac:	call	0x1500


0x1500:	jmp	qword ptr [rip + 0x207952]




0x23cc:	lea	rcx, [rip + 0x37d1]
0x23d3:	lea	rdx, [rip + 0x3cb6]
0x23da:	mov	rsi, rax
0x23dd:	mov	edi, 1
0x23e2:	xor	eax, eax
0x23e4:	call	0x1730


0x23e9:	cmp	r12, rbx
0x23ec:	lea	rcx, [rip + 0x37f2]
0x23f3:	lea	rbx, [rip + 0x4407]
0x23fa:	cmove	rbx, rcx
0x23fe:	lea	rsi, [rip + 0x3cfb]
0x2405:	xor	edi, edi
0x2407:	mov	edx, 5
0x240c:	call	0x1570


0x2411:	mov	rcx, rbx
0x2414:	mov	rsi, rax
0x2417:	mov	rdx, r12
0x241a:	mov	edi, 1
0x241f:	xor	eax, eax
0x2421:	call	0x1730


0x2426:	jmp	0x2166


0x2430:	lea	rcx, [rip + 0x3c59]
0x2437:	lea	rdx, [rip + 0x3801]
0x243e:	mov	rsi, rax
0x2441:	mov	edi, 1
0x2446:	xor	eax, eax
0x2448:	call	0x1730


0x244d:	xor	esi, esi
0x244f:	mov	edi, 5
0x2454:	call	0x1720


0x2459:	test	rax, rax
0x245c:	je	0x2476


0x2476:	lea	rsi, [rip + 0x37d4]
0x247d:	mov	edx, 5
0x2482:	xor	edi, edi
0x2484:	lea	r12, [rip + 0x3719]
0x248b:	lea	rbx, [rip + 0x3753]
0x2492:	call	0x1570


0x245e:	lea	rsi, [rip + 0x37e8]
0x2465:	mov	edx, 3
0x246a:	mov	rdi, rax
0x246d:	call	0x1500


0x2497:	lea	rcx, [rip + 0x3706]
0x249e:	lea	rdx, [rip + 0x3beb]
0x24a5:	mov	rsi, rax
0x24a8:	mov	edi, 1
0x24ad:	xor	eax, eax
0x24af:	call	0x1730


0x24b4:	jmp	0x23fe


0x23fe:	lea	rsi, [rip + 0x3cfb]
0x2405:	xor	edi, edi
0x2407:	mov	edx, 5
0x240c:	call	0x1570


0x4abc:	cmp	r12, 9
0x4ac0:	ja	0x4e00


0x4ac6:	lea	rdx, [rip + 0x1fd7]
0x4acd:	movsxd	rax, dword ptr [rdx + r12*4]
0x4ad1:	add	rax, rdx
0x4ad4:	jmp	rax


0x4e00:	mov	r10, qword ptr [rbx + 0x40]
0x4e04:	mov	r9, qword ptr [rbx + 0x38]
0x4e08:	mov	edx, 5
0x4e0d:	mov	rax, qword ptr [rbx + 0x10]
0x4e11:	mov	r8, qword ptr [rbx + 8]
0x4e15:	lea	rsi, [rip + 0x1c04]
0x4e1c:	mov	r13, qword ptr [rbx + 0x30]
0x4e20:	mov	r12, qword ptr [rbx + 0x28]
0x4e24:	mov	r15, qword ptr [rbx + 0x20]
0x4e28:	mov	r14, qword ptr [rbx + 0x18]
0x4e2c:	mov	qword ptr [rsp + 0x18], r10
0x4e31:	mov	qword ptr [rsp + 0x10], r9
0x4e36:	mov	qword ptr [rsp], rax
0x4e3a:	mov	qword ptr [rsp + 8], r8
0x4e3f:	mov	rbx, qword ptr [rbx]
0x4e42:	jmp	0x4bd2


0x4bd2:	xor	edi, edi
0x4bd4:	call	0x1570


0x4bd9:	mov	r10, qword ptr [rsp + 0x18]
0x4bde:	push	r10
0x4be0:	jmp	0x4b24


0x4b24:	mov	r9, qword ptr [rsp + 0x18]
0x4b29:	mov	rdx, rax
0x4b2c:	mov	rcx, rbx
0x4b2f:	mov	esi, 1
0x4b34:	mov	rdi, rbp
0x4b37:	xor	eax, eax
0x4b39:	push	r9
0x4b3b:	push	r13
0x4b3d:	push	r12
0x4b3f:	push	r15
0x4b41:	push	r14
0x4b43:	mov	r9, qword ptr [rsp + 0x30]
0x4b48:	mov	r8, qword ptr [rsp + 0x38]
0x4b4d:	call	0x17b0


0x4b52:	add	rsp, 0x30
0x4b56:	add	rsp, 0x28
0x4b5a:	pop	rbx
0x4b5b:	pop	rbp
0x4b5c:	pop	r12
0x4b5e:	pop	r13
0x4b60:	pop	r14
0x4b62:	pop	r15
0x4b64:	ret	


0x42ad:	mov	dword ptr [rbp], r12d
0x42b1:	pop	rbx
0x42b2:	pop	rbp
0x42b3:	pop	r12
0x42b5:	ret	


0x416e:	mov	dword ptr [rip + 0x204ee3], r12d
0x4175:	mov	eax, dword ptr [rbp + 4]
0x4178:	shl	r15, 4
0x417c:	sub	rsp, 8
0x4180:	add	rbx, r15
0x4183:	lea	r15, [rbp + 8]
0x4187:	mov	r8d, dword ptr [rbp]
0x418b:	mov	r11, qword ptr [rbx]
0x418e:	mov	r12, qword ptr [rbx + 8]
0x4192:	mov	rcx, r14
0x4195:	or	eax, 1
0x4198:	mov	dword ptr [rsp + 0x24], eax
0x419c:	push	qword ptr [rbp + 0x30]
0x419f:	mov	r9d, eax
0x41a2:	push	qword ptr [rbp + 0x28]
0x41a5:	push	r15
0x41a7:	mov	rsi, r11
0x41aa:	mov	rdx, qword ptr [rsp + 0x28]
0x41af:	mov	rdi, r12
0x41b2:	mov	qword ptr [rsp + 0x30], r11
0x41b7:	call	0x2e90


0x546a:	mov	edx, dword ptr [rsp + 8]
0x546e:	mov	rsi, qword ptr [rax]
0x5471:	mov	rax, rbp
0x5474:	jmp	0x5487


0x5487:	movzx	ecx, bl
0x548a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x548f:	jne	0x5480


0x5491:	cmp	bl, 0x2d
0x5494:	je	0x54e8


0x5480:	add	rax, 1
0x5484:	movzx	ebx, byte ptr [rax]
0x5487:	movzx	ecx, bl
0x548a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x548f:	jne	0x5480


0x54e8:	mov	ebp, 4
0x54ed:	mov	rdi, qword ptr [rsp + 0x18]
0x54f2:	xor	rdi, qword ptr fs:[0x28]
0x54fb:	mov	eax, ebp
0x54fd:	jne	0x5790


0x5496:	xor	ecx, ecx
0x5498:	mov	rsi, r15
0x549b:	mov	rdi, rbp
0x549e:	call	0x1620


0x5503:	add	rsp, 0x28
0x5507:	pop	rbx
0x5508:	pop	rbp
0x5509:	pop	r12
0x550b:	pop	r13
0x550d:	pop	r14
0x550f:	pop	r15
0x5511:	ret	


0x5790:	call	0x15a0


0x1620:	jmp	qword ptr [rip + 0x2078c2]




0x58e7:	mov	rdi, rbx
0x58ea:	pop	rbx
0x58eb:	jmp	0x16d0


0x4f96:	mov	rax, qword ptr [rsp + 0x78]
0x4f9b:	xor	rax, qword ptr fs:[0x28]
0x4fa4:	jne	0x4fb0


0x4fa6:	add	rsp, 0xb8
0x4fad:	pop	rbx
0x4fae:	pop	rbp
0x4faf:	ret	


0x4fb0:	call	0x15a0


0x4ec0:	mov	rax, qword ptr [rsp + 0x58]
0x4ec5:	xor	rax, qword ptr fs:[0x28]
0x4ece:	jne	0x4ed5


0x4ed0:	add	rsp, 0x68
0x4ed4:	ret	


0x4ed5:	call	0x15a0


0x531a:	test	eax, eax
0x531c:	jne	0x53b0


0x5322:	mov	rbp, qword ptr [rsp]
0x5326:	cmp	rbp, r14
0x5329:	jb	0x5330


0x53b0:	mov	ebp, eax
0x53b2:	call	0x14f0


0x5330:	call	0x14f0


0x532b:	cmp	rbp, r15
0x532e:	jbe	0x5384


0x5384:	mov	rdx, qword ptr [rsp + 8]
0x5389:	xor	rdx, qword ptr fs:[0x28]
0x5392:	mov	rax, rbp
0x5395:	jne	0x53db


0x5397:	add	rsp, 0x18
0x539b:	pop	rbx
0x539c:	pop	rbp
0x539d:	pop	r12
0x539f:	pop	r13
0x53a1:	pop	r14
0x53a3:	pop	r15
0x53a5:	ret	


0x53db:	call	0x15a0


0x5335:	cmp	rbp, 0x40000000
0x533c:	mov	r14, rax
0x533f:	sbb	eax, eax
0x5341:	and	eax, 0xffffffd7
0x5344:	add	eax, 0x4b
0x5347:	mov	dword ptr [r14], eax
0x534a:	mov	rdi, r12
0x534d:	call	0x4a10


0x53b7:	cmp	ebp, 1
0x53ba:	mov	r14, rax
0x53bd:	je	0x53d0


0x53d0:	mov	dword ptr [rax], 0x4b
0x53d6:	jmp	0x534a


0x53bf:	cmp	ebp, 3
0x53c2:	jne	0x534a


0x534a:	mov	rdi, r12
0x534d:	call	0x4a10


0x53c4:	mov	dword ptr [rax], 0
0x53ca:	jmp	0x534a


0x53fc:	add	rsp, 0x18
0x5400:	ret	


0x54a3:	mov	rcx, qword ptr [r15]
0x54a6:	mov	rbx, rax
0x54a9:	cmp	rcx, rbp
0x54ac:	je	0x54d8


0x54d8:	test	r13, r13
0x54db:	mov	qword ptr [rsp + 8], rcx
0x54e0:	jne	0x5520


0x54ae:	mov	eax, dword ptr [r12]
0x54b2:	test	eax, eax
0x54b4:	je	0x5518


0x5520:	movzx	r12d, byte ptr [rbp]
0x5525:	test	r12b, r12b
0x5528:	je	0x54e8


0x5518:	xor	ebp, ebp
0x551a:	jmp	0x54c0


0x54b6:	cmp	eax, 0x22
0x54b9:	mov	ebp, 1
0x54be:	jne	0x54e8


0x552a:	movsx	esi, r12b
0x552e:	mov	rdi, r13
0x5531:	xor	ebp, ebp
0x5533:	call	0x15d0


0x54c0:	test	r13, r13
0x54c3:	je	0x54ce


0x15d0:	jmp	qword ptr [rip + 0x2078ea]


0x54ce:	mov	qword ptr [r14], rbx
0x54d1:	jmp	0x54ed


0x54c5:	movzx	r12d, byte ptr [rcx]
0x54c9:	test	r12b, r12b
0x54cc:	jne	0x5547




0x54ed:	mov	rdi, qword ptr [rsp + 0x18]
0x54f2:	xor	rdi, qword ptr fs:[0x28]
0x54fb:	mov	eax, ebp
0x54fd:	jne	0x5790


0x5547:	movsx	esi, r12b
0x554b:	mov	rdi, r13
0x554e:	mov	qword ptr [rsp + 8], rcx
0x5553:	call	0x15d0


0x2472:	test	eax, eax
0x2474:	jne	0x24b9


0x24b9:	lea	r12, [rip + 0x36e4]
0x24c0:	mov	r13, qword ptr [rip + 0x206bc1]
0x24c7:	lea	rsi, [rip + 0x3bea]
0x24ce:	xor	edi, edi
0x24d0:	mov	edx, 5
0x24d5:	call	0x1570


0x24da:	mov	rsi, r13
0x24dd:	mov	rdi, rax
0x24e0:	call	0x1670


0x24e5:	jmp	0x23b9


0x23b1:	test	eax, eax
0x23b3:	jne	0x24c0


0x24c0:	mov	r13, qword ptr [rip + 0x206bc1]
0x24c7:	lea	rsi, [rip + 0x3bea]
0x24ce:	xor	edi, edi
0x24d0:	mov	edx, 5
0x24d5:	call	0x1570


0x1863:	lea	rdi, [rip + 0x13a6]
0x186a:	call	0x5b80


0x186f:	mov	byte ptr [rsp + 0x30], 0
0x1874:	lea	rcx, [rip + 0x2072a5]
0x187b:	lea	rdx, [rip + 0x4424]
0x1882:	xor	r8d, r8d
0x1885:	mov	rsi, r12
0x1888:	mov	edi, r13d
0x188b:	call	0x15b0


0x15b0:	jmp	qword ptr [rip + 0x2078fa]




0x5854:	test	eax, eax
0x5856:	je	0x5894


0x5858:	call	0x14f0


0x585d:	mov	r12d, dword ptr [rax]
0x5860:	mov	rdi, rbx
0x5863:	mov	rbp, rax
0x5866:	call	0x1550


0x586b:	test	r12d, r12d
0x586e:	jne	0x58a0


0x5870:	pop	rbx
0x5871:	pop	rbp
0x5872:	pop	r12
0x5874:	ret	


0x58a0:	mov	dword ptr [rbp], r12d
0x58a4:	mov	eax, 0xffffffff
0x58a9:	jmp	0x5870


0x59fa:	and	ebx, 0x20
0x59fd:	test	ebx, ebx
0x59ff:	jne	0x5a18


0x5a01:	test	eax, eax
0x5a03:	je	0x5a0f


0x5a18:	test	eax, eax
0x5a1a:	jne	0x5a38


0x5a0f:	pop	rbx
0x5a10:	pop	rbp
0x5a11:	pop	r12
0x5a13:	ret	


0x5a05:	test	r12, r12
0x5a08:	mov	eax, 0xffffffff
0x5a0d:	je	0x5a48


0x5a1c:	call	0x14f0


0x5a38:	pop	rbx
0x5a39:	mov	eax, 0xffffffff
0x5a3e:	pop	rbp
0x5a3f:	pop	r12
0x5a41:	ret	


0x5a48:	call	0x14f0


0x5a4d:	cmp	dword ptr [rax], 9
0x5a50:	pop	rbx
0x5a51:	pop	rbp
0x5a52:	pop	r12
0x5a54:	setne	al
0x5a57:	movzx	eax, al
0x5a5a:	neg	eax
0x5a5c:	ret	


0x5a21:	mov	dword ptr [rax], 0
0x5a27:	mov	eax, 0xffffffff
0x5a2c:	pop	rbx
0x5a2d:	pop	rbp
0x5a2e:	pop	r12
0x5a30:	ret	


0x2c22:	test	eax, eax
0x2c24:	je	0x2c3c


0x2c3c:	mov	rdi, qword ptr [rip + 0x20647d]
0x2c43:	call	0x59e0


0x2c26:	call	0x14f0


0x2c2b:	cmp	byte ptr [rip + 0x20649e], 0
0x2c32:	mov	rbx, rax
0x2c35:	je	0x2c53


0x2c53:	lea	rsi, [rip + 0x3070]
0x2c5a:	xor	edi, edi
0x2c5c:	mov	edx, 5
0x2c61:	call	0x1570


0x2c37:	cmp	dword ptr [rax], 0x20
0x2c3a:	jne	0x2c53


0x2c66:	mov	rdi, qword ptr [rip + 0x20646b]
0x2c6d:	mov	rbp, rax
0x2c70:	test	rdi, rdi
0x2c73:	je	0x2c9d


0x2c9d:	mov	esi, dword ptr [rbx]
0x2c9f:	lea	rdx, [rip + 0x35de]
0x2ca6:	mov	rcx, rax
0x2ca9:	xor	edi, edi
0x2cab:	xor	eax, eax
0x2cad:	call	0x1750


0x2c75:	call	0x4810


0x2cb2:	jmp	0x2c92


0x2c92:	mov	edi, dword ptr [rip + 0x206380]
0x2c98:	call	0x1510


0x1510:	jmp	qword ptr [rip + 0x20794a]




0x2c48:	test	eax, eax
0x2c4a:	jne	0x2c92


0x2c4c:	add	rsp, 8
0x2c50:	pop	rbx
0x2c51:	pop	rbp
0x2c52:	ret	


0x1890:	cmp	eax, -1
0x1893:	je	0x194f


0x194f:	movsxd	rax, dword ptr [rip + 0x207742]
0x1956:	mov	edx, r13d
0x1959:	sub	edx, eax
0x195b:	sub	edx, 1
0x195e:	jg	0x1f7c


0x1899:	cmp	eax, 0x64
0x189c:	je	0x18f0


0x1964:	cmp	eax, r13d
0x1967:	jge	0x19cf


0x1f7c:	mov	rdi, qword ptr [r12 + rax*8 + 8]
0x1f81:	call	0x4a10


0x18f0:	mov	ebx, 1
0x18f5:	jmp	0x1874


0x189e:	jle	0x1910


0x1969:	mov	rax, qword ptr [r12 + rax*8]
0x196d:	lea	rsi, [rip + 0x4956]
0x1974:	mov	rdi, rax
0x1977:	mov	qword ptr [rsp + 0x48], rax
0x197c:	call	0x1690


0x19cf:	lea	rax, [rip + 0x48f4]
0x19d6:	mov	qword ptr [rsp + 0x48], rax
0x19db:	mov	r12, qword ptr [rip + 0x2076ae]
0x19e2:	mov	esi, 2
0x19e7:	mov	rdi, r12
0x19ea:	call	0x2cd0


0x1874:	lea	rcx, [rip + 0x2072a5]
0x187b:	lea	rdx, [rip + 0x4424]
0x1882:	xor	r8d, r8d
0x1885:	mov	rsi, r12
0x1888:	mov	edi, r13d
0x188b:	call	0x15b0


0x1910:	cmp	eax, 0xffffff7d
0x1915:	jne	0x1f6e


0x18a0:	cmp	eax, 0x69
0x18a3:	je	0x1900


0x1690:	jmp	qword ptr [rip + 0x20788a]


0x191b:	mov	rdi, qword ptr [rip + 0x207766]
0x1922:	mov	rcx, qword ptr [rip + 0x2076e7]
0x1929:	lea	r8, [rip + 0x4366]
0x1930:	lea	rdx, [rip + 0x4308]
0x1937:	lea	rsi, [rip + 0x4266]
0x193e:	xor	r9d, r9d
0x1941:	xor	eax, eax
0x1943:	call	0x4ef0


0x1f6e:	cmp	eax, 0xffffff7e
0x1f73:	jne	0x1fad


0x1900:	mov	byte ptr [rsp + 0x30], 1
0x1905:	jmp	0x1874


0x18a5:	cmp	eax, 0x77
0x18a8:	jne	0x1fad




0x1f75:	xor	edi, edi
0x1f77:	call	0x2110


0x1fad:	mov	edi, 1
0x1fb2:	call	0x2110


0x18ae:	lea	rsi, [rip + 0x43cf]
0x18b5:	mov	edx, 5
0x18ba:	xor	edi, edi
0x18bc:	call	0x1570


0x18c1:	mov	rdi, qword ptr [rip + 0x2077d8]
0x18c8:	lea	rcx, [rip + 0x4f32]
0x18cf:	mov	r8, rax
0x18d2:	xor	r9d, r9d
0x18d5:	mov	rdx, -1
0x18dc:	xor	esi, esi
0x18de:	call	0x53e0


0x18e3:	mov	rbp, rax
0x18e6:	jmp	0x1874


0x1948:	xor	edi, edi
0x194a:	call	0x1790


0x19ef:	test	bl, bl
0x19f1:	mov	rax, qword ptr [rip + 0x207690]
0x19f8:	je	0x1bf8


0x1bf8:	mov	edi, 0x7800
0x1bfd:	mov	qword ptr [rsp + 0x18], rax
0x1c02:	xor	ebx, ebx
0x1c04:	call	0x5050


0x19fe:	mov	edi, 0x1000
0x1a03:	mov	qword ptr [rsp + 0x38], rax
0x1a08:	call	0x5050


0x1a0d:	mov	edi, 0xc00
0x1a12:	mov	rbp, rax
0x1a15:	call	0x5050


0x1a1a:	mov	qword ptr [rsp + 0x40], rax
0x1a1f:	lea	rax, [rsp + 0x60]
0x1a24:	mov	rdi, rax
0x1a27:	mov	qword ptr [rsp + 0x18], rax
0x1a2c:	call	0x2870


0x1a31:	lea	rax, [rsp + 0x58]
0x1a36:	mov	qword ptr [rsp + 0x10], r12
0x1a3b:	mov	qword ptr [rsp + 8], rbp
0x1a40:	mov	qword ptr [rsp + 0x20], rax
0x1a45:	nop	dword ptr [rax]
0x1a48:	xor	ebx, ebx
0x1a4a:	jmp	0x1a7c


0x1a7c:	mov	rax, qword ptr [rsp + 8]
0x1a81:	mov	rcx, qword ptr [rsp + 0x10]
0x1a86:	mov	edx, 0x1000
0x1a8b:	sub	rdx, rbx
0x1a8e:	mov	esi, 1
0x1a93:	lea	rdi, [rax + rbx]
0x1a97:	call	0x1530


0x1530:	jmp	qword ptr [rip + 0x20793a]




0x1c09:	mov	edi, 0xa000
0x1c0e:	mov	r13, rax
0x1c11:	mov	r14d, 0x7800
0x1c17:	call	0x5050


0x1c1c:	mov	qword ptr [rsp + 8], rbp
0x1c21:	mov	qword ptr [rsp + 0x10], rax
0x1c26:	xor	ebp, ebp
0x1c28:	jmp	0x1c3d


0x1c3d:	lea	rdi, [r13 + rbp]
0x1c42:	mov	rdx, r14
0x1c45:	mov	rcx, r12
0x1c48:	sub	rdx, rbp
0x1c4b:	mov	esi, 1
0x1c50:	call	0x1530


0x5558:	test	rax, rax
0x555b:	mov	rcx, qword ptr [rsp + 8]
0x5560:	je	0x562c


0x562c:	mov	qword ptr [r14], rbx
0x562f:	or	ebp, 2
0x5632:	jmp	0x54ed


0x5566:	lea	eax, [r12 - 0x45]
0x556b:	cmp	al, 0x2f
0x556d:	ja	0x55c0


0x556f:	movabs	rdx, 0x814400308945
0x5579:	bt	rdx, rax
0x557d:	jae	0x55c0


0x55c0:	mov	edi, 1
0x55c5:	mov	esi, 0x400
0x55ca:	sub	r12d, 0x42
0x55ce:	cmp	r12b, 0x35
0x55d2:	ja	0x562c


0x557f:	mov	esi, 0x30
0x5584:	mov	rdi, r13
0x5587:	mov	qword ptr [rsp + 8], rcx
0x558c:	call	0x15d0


0x55d4:	lea	rdx, [rip + 0x158d]
0x55db:	movzx	r12d, r12b
0x55df:	movsxd	rax, dword ptr [rdx + r12*4]
0x55e3:	add	rax, rdx
0x55e6:	jmp	rax


0x5591:	test	rax, rax
0x5594:	mov	rcx, qword ptr [rsp + 8]
0x5599:	je	0x55c0


0x559b:	movzx	eax, byte ptr [rcx + 1]
0x559f:	cmp	al, 0x44
0x55a1:	je	0x55af


0x55af:	mov	edi, 2
0x55b4:	mov	esi, 0x3e8
0x55b9:	jmp	0x55ca


0x55a3:	cmp	al, 0x69
0x55a5:	je	0x5778


0x55ca:	sub	r12d, 0x42
0x55ce:	cmp	r12b, 0x35
0x55d2:	ja	0x562c


0x5778:	xor	edi, edi
0x577a:	cmp	byte ptr [rcx + 2], 0x42
0x577e:	mov	esi, 0x400
0x5783:	sete	dil
0x5787:	lea	edi, [rdi + rdi + 1]
0x578b:	jmp	0x55ca


0x55ab:	cmp	al, 0x42
0x55ad:	jne	0x55c0


0x5538:	test	rax, rax
0x553b:	mov	ebx, 1
0x5540:	mov	rcx, qword ptr [rsp + 8]
0x5545:	je	0x54e8


0x1c55:	add	rbp, rax
0x1c58:	mov	eax, dword ptr [r12]
0x1c5c:	test	al, 0x30
0x1c5e:	je	0x1c30


0x1c30:	cmp	rbp, 0x77ff
0x1c37:	ja	0x1ccf


0x1c60:	test	rbp, rbp
0x1c63:	jne	0x1ccf


0x1ccf:	lea	rax, [rbp + 2]
0x1cd3:	mov	ecx, 3
0x1cd8:	xor	edx, edx
0x1cda:	mov	rsi, rbp
0x1cdd:	mov	rdi, r13
0x1ce0:	div	rcx
0x1ce3:	mov	rdx, qword ptr [rsp + 0x10]
0x1ce8:	lea	r15, [rax*4]
0x1cf0:	mov	rcx, r15
0x1cf3:	call	0x2600


0x1c65:	test	rbx, rbx
0x1c68:	mov	rbp, qword ptr [rsp + 8]
0x1c6d:	je	0x1c9b


0x1c9b:	test	al, 0x20
0x1c9d:	je	0x1bc2


0x1c6f:	test	rbp, rbp
0x1c72:	je	0x1c9b


0x1bc2:	mov	rdi, r12
0x1bc5:	call	0x5830


0x1ca3:	lea	rsi, [rip + 0x4015]
0x1caa:	mov	edx, 5
0x1caf:	xor	edi, edi
0x1cb1:	call	0x1570


0x1c74:	mov	rcx, qword ptr [rsp + 0x18]
0x1c79:	mov	rax, qword ptr [rcx + 0x28]
0x1c7d:	cmp	rax, qword ptr [rcx + 0x30]
0x1c81:	jae	0x1fb7


0x1c87:	mov	rcx, qword ptr [rsp + 0x18]
0x1c8c:	lea	rdx, [rax + 1]
0x1c90:	mov	qword ptr [rcx + 0x28], rdx
0x1c94:	mov	byte ptr [rax], 0xa
0x1c97:	mov	eax, dword ptr [r12]
0x1c9b:	test	al, 0x20
0x1c9d:	je	0x1bc2


0x1fb7:	mov	esi, 0xa
0x1fbc:	mov	rdi, rcx
0x1fbf:	call	0x15e0


0x15e0:	jmp	qword ptr [rip + 0x2078e2]




0x1cb6:	mov	rbx, rax
0x1cb9:	call	0x14f0


0x1cbe:	mov	esi, dword ptr [rax]
0x1cc0:	mov	rdx, rbx
0x1cc3:	mov	edi, 1
0x1cc8:	xor	eax, eax
0x1cca:	call	0x1750


0x1bca:	add	eax, 1
0x1bcd:	je	0x1e55


0x1e55:	mov	rdi, qword ptr [rsp + 0x48]
0x1e5a:	lea	rsi, [rip + 0x4469]
0x1e61:	call	0x1690


0x1bd3:	xor	eax, eax
0x1bd5:	mov	rcx, qword ptr [rsp + 0x68]
0x1bda:	xor	rcx, qword ptr fs:[0x28]
0x1be3:	jne	0x1f3d


0x1be9:	add	rsp, 0x78
0x1bed:	pop	rbx
0x1bee:	pop	rbp
0x1bef:	pop	r12
0x1bf1:	pop	r13
0x1bf3:	pop	r14
0x1bf5:	pop	r15
0x1bf7:	ret	


0x1f3d:	call	0x15a0


0x1cf8:	cmp	qword ptr [rsp + 8], 0
0x1cfe:	je	0x1dc9


0x1dc9:	mov	rcx, qword ptr [rip + 0x2072b8]
0x1dd0:	mov	rdi, qword ptr [rsp + 0x10]
0x1dd5:	mov	rdx, r15
0x1dd8:	mov	esi, 1
0x1ddd:	call	0x1700


0x1d04:	xor	r10d, r10d
0x1d07:	test	r15, r15
0x1d0a:	je	0x1dab


0x1700:	jmp	qword ptr [rip + 0x207852]


0x1dab:	mov	eax, dword ptr [r12]
0x1daf:	test	al, 0x30
0x1db1:	jne	0x1c65


0x1d10:	mov	qword ptr [rsp + 0x28], r13
0x1d15:	mov	qword ptr [rsp + 0x30], rbp
0x1d1a:	mov	r13, rbx
0x1d1d:	mov	rbp, r15
0x1d20:	mov	qword ptr [rsp + 0x20], r12
0x1d25:	mov	r15, qword ptr [rsp + 0x18]
0x1d2a:	mov	rbx, r10
0x1d2d:	jmp	0x1d51




0x1db7:	cmp	rbp, 0x7800
0x1dbe:	je	0x1c26


0x1d51:	mov	r12, qword ptr [rsp + 8]
0x1d56:	mov	rax, rbp
0x1d59:	sub	rax, rbx
0x1d5c:	sub	r12, r13
0x1d5f:	cmp	r12, rax
0x1d62:	cmova	r12, rax
0x1d66:	test	r12, r12
0x1d69:	je	0x1d30


0x1c26:	xor	ebp, ebp
0x1c28:	jmp	0x1c3d


0x1dc4:	jmp	0x1c65


0x1d30:	mov	rax, qword ptr [r15 + 0x28]
0x1d34:	cmp	rax, qword ptr [r15 + 0x30]
0x1d38:	jae	0x1e13


0x1d6b:	mov	rax, qword ptr [rsp + 0x10]
0x1d70:	mov	rcx, qword ptr [rip + 0x207311]
0x1d77:	mov	rdx, r12
0x1d7a:	mov	esi, 1
0x1d7f:	lea	rdi, [rax + rbx]
0x1d83:	call	0x1700


0x1d3e:	lea	rdx, [rax + 1]
0x1d42:	mov	qword ptr [r15 + 0x28], rdx
0x1d46:	mov	byte ptr [rax], 0xa
0x1d49:	xor	r13d, r13d
0x1d4c:	cmp	rbp, rbx
0x1d4f:	jbe	0x1d99


0x1e13:	mov	esi, 0xa
0x1e18:	mov	rdi, r15
0x1e1b:	call	0x15e0


0x1d99:	mov	rbx, r13
0x1d9c:	mov	r12, qword ptr [rsp + 0x20]
0x1da1:	mov	r13, qword ptr [rsp + 0x28]
0x1da6:	mov	rbp, qword ptr [rsp + 0x30]
0x1dab:	mov	eax, dword ptr [r12]
0x1daf:	test	al, 0x30
0x1db1:	jne	0x1c65


0x1a9c:	cmp	byte ptr [rsp + 0x30], 0
0x1aa1:	mov	r12, rax
0x1aa4:	mov	qword ptr [rsp + 0x58], rax
0x1aa9:	je	0x1a50


0x1a50:	mov	rax, qword ptr [rsp + 0x10]
0x1a55:	add	rbx, r12
0x1a58:	mov	eax, dword ptr [rax]
0x1a5a:	test	al, 0x20
0x1a5c:	jne	0x1f11


0x1aab:	xor	r13d, r13d
0x1aae:	test	r12, r12
0x1ab1:	je	0x1a50


0x1a62:	mov	edx, eax
0x1a64:	and	edx, 0x10
0x1a67:	cmp	rbx, 0xfff
0x1a6e:	ja	0x1b18


0x1f11:	lea	rsi, [rip + 0x3da7]
0x1f18:	mov	edx, 5
0x1f1d:	xor	edi, edi
0x1f1f:	call	0x1570


0x1ab3:	cmp	r13, r12
0x1ab6:	jae	0x1a50


0x1a74:	test	edx, edx
0x1a76:	jne	0x1b18


0x1b18:	xor	r15d, r15d
0x1b1b:	mov	qword ptr [rsp + 0x28], rbx
0x1b20:	mov	rbp, qword ptr [rsp + 8]
0x1b25:	mov	r14d, r15d
0x1b28:	mov	r12, qword ptr [rsp + 0x40]
0x1b2d:	mov	rbx, qword ptr [rsp + 0x10]
0x1b32:	mov	r15, qword ptr [rsp + 0x38]
0x1b37:	jmp	0x1b9e


0x1ab8:	mov	rax, qword ptr [rsp + 8]
0x1abd:	lea	r15, [rbx + r13]
0x1ac1:	lea	r14, [rax + r15]
0x1ac5:	movsx	edi, byte ptr [r14]
0x1ac9:	mov	ebp, edi
0x1acb:	call	0x2850


0x1b9e:	test	al, 0x10
0x1ba0:	je	0x1b40


0x1b40:	test	r14d, r14d
0x1b43:	jne	0x1a48


0x1ba2:	cmp	r14d, 1
0x1ba6:	ja	0x1bbf


0x1b49:	mov	rdx, qword ptr [rsp + 0x28]
0x1b4e:	mov	qword ptr [rsp + 0x58], 0xc00
0x1b57:	mov	r8, qword ptr [rsp + 0x20]
0x1b5c:	mov	rdi, qword ptr [rsp + 0x18]
0x1b61:	mov	rcx, r12
0x1b64:	mov	rsi, rbp
0x1b67:	call	0x2880


0x1a48:	xor	ebx, ebx
0x1a4a:	jmp	0x1a7c


0x1ba8:	jne	0x1b49


0x1bbf:	mov	r12, rbx
0x1bc2:	mov	rdi, r12
0x1bc5:	call	0x5830


0x1baa:	mov	eax, dword ptr [rsp + 0x60]
0x1bae:	test	eax, eax
0x1bb0:	je	0x1bbf


0x1bb2:	mov	qword ptr [rsp + 0x58], 0xc00
0x1bbb:	xor	edx, edx
0x1bbd:	jmp	0x1b57


0x1b57:	mov	r8, qword ptr [rsp + 0x20]
0x1b5c:	mov	rdi, qword ptr [rsp + 0x18]
0x1b61:	mov	rcx, r12
0x1b64:	mov	rsi, rbp
0x1b67:	call	0x2880


0x1b6c:	mov	rdx, qword ptr [rsp + 0x58]
0x1b71:	mov	rcx, r15
0x1b74:	mov	esi, 1
0x1b79:	mov	rdi, r12
0x1b7c:	mov	r13d, eax
0x1b7f:	call	0x1700


0x1ad0:	cmp	bpl, 0x3d
0x1ad4:	je	0x1ada


0x1ada:	add	r13, 1
0x1ade:	test	r12, r12
0x1ae1:	jne	0x1ab3


0x1ad6:	test	al, al
0x1ad8:	je	0x1af0


0x1ae3:	jmp	0x1a50


0x1af0:	mov	rax, qword ptr [rsp + 8]
0x1af5:	sub	r12, 1
0x1af9:	mov	rdi, r14
0x1afc:	mov	rdx, r12
0x1aff:	mov	qword ptr [rsp + 0x58], r12
0x1b04:	sub	rdx, r13
0x1b07:	lea	rsi, [rax + r15 + 1]
0x1b0c:	call	0x1740


0x1740:	jmp	qword ptr [rip + 0x207832]




0x1f24:	mov	rbx, rax
0x1f27:	call	0x14f0


0x1f2c:	mov	esi, dword ptr [rax]
0x1f2e:	mov	rdx, rbx
0x1f31:	mov	edi, 1
0x1f36:	xor	eax, eax
0x1f38:	call	0x1750


0x1e66:	mov	ebp, eax
0x1e68:	call	0x14f0


0x1e6d:	test	ebp, ebp
0x1e6f:	mov	rbx, rax
0x1e72:	jne	0x1e98


0x1e74:	lea	rsi, [rip + 0x3e69]
0x1e7b:	mov	edx, 5
0x1e80:	xor	edi, edi
0x1e82:	call	0x1570


0x1e98:	mov	rdx, qword ptr [rsp + 0x48]
0x1e9d:	mov	esi, 3
0x1ea2:	xor	edi, edi
0x1ea4:	call	0x4840


0x1e87:	mov	esi, dword ptr [rbx]
0x1e89:	mov	rdx, rax
0x1e8c:	mov	edi, 1
0x1e91:	xor	eax, eax
0x1e93:	call	0x1750


0x1981:	test	eax, eax
0x1983:	je	0x19db


0x19db:	mov	r12, qword ptr [rip + 0x2076ae]
0x19e2:	mov	esi, 2
0x19e7:	mov	rdi, r12
0x19ea:	call	0x2cd0


0x1985:	mov	rdi, qword ptr [rsp + 0x48]
0x198a:	lea	rsi, [rip + 0x432b]
0x1991:	call	0x1770


0x1770:	jmp	qword ptr [rip + 0x20781a]




0x1996:	test	rax, rax
0x1999:	mov	r12, rax
0x199c:	jne	0x19e2


0x199e:	mov	rdx, qword ptr [rsp + 0x48]
0x19a3:	mov	esi, 3
0x19a8:	xor	edi, edi
0x19aa:	call	0x4840


0x19e2:	mov	esi, 2
0x19e7:	mov	rdi, r12
0x19ea:	call	0x2cd0


0x1b11:	jmp	0x1aae


0x1aae:	test	r12, r12
0x1ab1:	je	0x1a50


0x1b84:	cmp	rax, qword ptr [rsp + 0x58]
0x1b89:	jb	0x1ee5


0x1ee5:	lea	rsi, [rip + 0x3dde]
0x1eec:	mov	edx, 5
0x1ef1:	xor	edi, edi
0x1ef3:	call	0x1570


0x1b8f:	test	r13b, r13b
0x1b92:	je	0x1ec1


0x1ec1:	lea	rsi, [rip + 0x3e0e]
0x1ec8:	mov	edx, 5
0x1ecd:	xor	edi, edi
0x1ecf:	call	0x1570


0x1b98:	mov	eax, dword ptr [rbx]
0x1b9a:	add	r14d, 1
0x1b9e:	test	al, 0x10
0x1ba0:	je	0x1b40


0x1ed4:	xor	esi, esi
0x1ed6:	mov	rdx, rax
0x1ed9:	mov	edi, 1
0x1ede:	xor	eax, eax
0x1ee0:	call	0x1750


0x1ef8:	mov	rbx, rax
0x1efb:	call	0x14f0


0x1f00:	mov	esi, dword ptr [rax]
0x1f02:	mov	rdx, rbx
0x1f05:	mov	edi, 1
0x1f0a:	xor	eax, eax
0x1f0c:	call	0x1750


0x1d88:	cmp	r12, rax
0x1d8b:	ja	0x1f42


0x1d91:	add	r13, r12
0x1d94:	add	rbx, r12
0x1d97:	jmp	0x1d4c


0x1f42:	lea	rsi, [rip + 0x3d81]
0x1f49:	mov	edx, 5
0x1f4e:	xor	edi, edi
0x1f50:	call	0x1570


0x1d4c:	cmp	rbp, rbx
0x1d4f:	jbe	0x1d99


0x1f55:	mov	rbx, rax
0x1f58:	call	0x14f0


0x1f5d:	mov	esi, dword ptr [rax]
0x1f5f:	mov	rdx, rbx
0x1f62:	mov	edi, 1
0x1f67:	xor	eax, eax
0x1f69:	call	0x1750


0x1de2:	cmp	r15, rax
0x1de5:	jbe	0x1dab


0x1de7:	lea	rsi, [rip + 0x3edc]
0x1dee:	mov	edx, 5
0x1df3:	xor	edi, edi
0x1df5:	call	0x1570


0x1dfa:	mov	rbx, rax
0x1dfd:	call	0x14f0


0x1e02:	mov	esi, dword ptr [rax]
0x1e04:	mov	rdx, rbx
0x1e07:	mov	edi, 1
0x1e0c:	xor	eax, eax
0x1e0e:	call	0x1750


0x1e20:	add	eax, 1
0x1e23:	jne	0x1d49


0x1e29:	lea	rsi, [rip + 0x3e9a]
0x1e30:	mov	edx, 5
0x1e35:	xor	edi, edi
0x1e37:	call	0x1570


0x1d49:	xor	r13d, r13d
0x1d4c:	cmp	rbp, rbx
0x1d4f:	jbe	0x1d99


0x1e3c:	mov	rbx, rax
0x1e3f:	call	0x14f0


0x1e44:	mov	esi, dword ptr [rax]
0x1e46:	mov	rdx, rbx
0x1e49:	mov	edi, 1
0x1e4e:	xor	eax, eax
0x1e50:	call	0x1750


0x1fc4:	add	eax, 1
0x1fc7:	jne	0x1c97


0x1fcd:	lea	rsi, [rip + 0x3cf6]
0x1fd4:	mov	edx, 5
0x1fd9:	xor	edi, edi
0x1fdb:	call	0x1570


0x1c97:	mov	eax, dword ptr [r12]
0x1c9b:	test	al, 0x20
0x1c9d:	je	0x1bc2


0x1fe0:	mov	rbx, rax
0x1fe3:	call	0x14f0


0x1fe8:	mov	esi, dword ptr [rax]
0x1fea:	mov	rdx, rbx
0x1fed:	mov	edi, 1
0x1ff2:	xor	eax, eax
0x1ff4:	call	0x1750


0x1ff9:	nop	dword ptr [rax]


0x19af:	mov	rbx, rax
0x19b2:	call	0x14f0


0x19b7:	mov	esi, dword ptr [rax]
0x19b9:	lea	rdx, [rip + 0x48c4]
0x19c0:	mov	rcx, rbx
0x19c3:	mov	edi, 1
0x19c8:	xor	eax, eax
0x19ca:	call	0x1750


0x1ea9:	mov	esi, dword ptr [rbx]
0x1eab:	lea	rdx, [rip + 0x43d2]
0x1eb2:	mov	rcx, rax
0x1eb5:	mov	edi, 1
0x1eba:	xor	eax, eax
0x1ebc:	call	0x1750


0x2c7a:	mov	esi, dword ptr [rbx]
0x2c7c:	lea	rdx, [rip + 0x35fd]
0x2c83:	mov	rcx, rax
0x2c86:	mov	r8, rbp
0x2c89:	xor	edi, edi
0x2c8b:	xor	eax, eax
0x2c8d:	call	0x1750


0x1f86:	lea	rsi, [rip + 0x3d1e]
0x1f8d:	mov	rbx, rax
0x1f90:	mov	edx, 5
0x1f95:	xor	edi, edi
0x1f97:	call	0x1570


0x1f9c:	mov	rcx, rbx
0x1f9f:	mov	rdx, rax
0x1fa2:	xor	esi, esi
0x1fa4:	xor	edi, edi
0x1fa6:	xor	eax, eax
0x1fa8:	call	0x1750


0x5352:	mov	esi, dword ptr [r14]
0x5355:	mov	r8, rax
0x5358:	mov	eax, 0
0x535d:	lea	rdx, [rip + 0xf1c]
0x5364:	mov	rcx, r13
0x5367:	cmp	esi, 0x16
0x536a:	cmove	esi, eax
0x536d:	test	ebx, ebx
0x536f:	mov	eax, 1
0x5374:	cmove	ebx, eax
0x5377:	xor	eax, eax
0x5379:	mov	edi, ebx
0x537b:	call	0x1750


0x5380:	mov	rbp, qword ptr [rsp]
0x5384:	mov	rdx, qword ptr [rsp + 8]
0x5389:	xor	rdx, qword ptr fs:[0x28]
0x5392:	mov	rax, rbp
0x5395:	jne	0x53db


0x41bc:	add	rsp, 0x20
0x41c0:	mov	r11, qword ptr [rsp + 0x10]
0x41c5:	cmp	r11, rax
0x41c8:	ja	0x4231


0x41ca:	lea	rsi, [rax + 1]
0x41ce:	lea	rax, [rip + 0x204f2b]
0x41d5:	cmp	r12, rax
0x41d8:	mov	qword ptr [rbx], rsi
0x41db:	je	0x41ef


0x4231:	mov	eax, dword ptr [rsp + 0x18]
0x4235:	mov	dword ptr [r13], eax
0x4239:	add	rsp, 0x28
0x423d:	mov	rax, r12
0x4240:	pop	rbx
0x4241:	pop	rbp
0x4242:	pop	r12
0x4244:	pop	r13
0x4246:	pop	r14
0x4248:	pop	r15
0x424a:	ret	


0x41ef:	mov	rdi, rsi
0x41f2:	mov	qword ptr [rsp + 0x10], rsi
0x41f7:	call	0x5050


0x41dd:	mov	rdi, r12
0x41e0:	mov	qword ptr [rsp + 0x10], rsi
0x41e5:	call	0x14d0


0x41ea:	mov	rsi, qword ptr [rsp + 0x10]
0x41ef:	mov	rdi, rsi
0x41f2:	mov	qword ptr [rsp + 0x10], rsi
0x41f7:	call	0x5050


0x41fc:	sub	rsp, 8
0x4200:	mov	qword ptr [rbx + 8], rax
0x4204:	mov	r8d, dword ptr [rbp]
0x4208:	push	qword ptr [rbp + 0x30]
0x420b:	push	qword ptr [rbp + 0x28]
0x420e:	mov	rcx, r14
0x4211:	push	r15
0x4213:	mov	r9d, dword ptr [rsp + 0x3c]
0x4218:	mov	rdi, rax
0x421b:	mov	rdx, qword ptr [rsp + 0x28]
0x4220:	mov	rsi, qword ptr [rsp + 0x30]
0x4225:	mov	r12, rax
0x4228:	call	0x2e90


0x4942:	mov	rdi, qword ptr [rsp + 0x38]
0x4947:	xor	rdi, qword ptr fs:[0x28]
0x4950:	jne	0x495c


0x4952:	add	rsp, 0x48
0x4956:	ret	


0x495c:	call	0x15a0


0x468f:	mov	rcx, qword ptr [rsp + 0x38]
0x4694:	xor	rcx, qword ptr fs:[0x28]
0x469d:	jne	0x46a9


0x469f:	add	rsp, 0x48
0x46a3:	ret	


0x46a9:	call	0x15a0


0x471b:	mov	rdx, qword ptr [rsp + 0x38]
0x4720:	xor	rdx, qword ptr fs:[0x28]
0x4729:	jne	0x4735


0x472b:	add	rsp, 0x48
0x472f:	ret	


0x4735:	call	0x15a0


0x48af:	mov	rcx, qword ptr [rsp + 0x38]
0x48b4:	xor	rcx, qword ptr fs:[0x28]
0x48bd:	jne	0x48c9


0x48bf:	add	rsp, 0x48
0x48c3:	ret	


0x48c9:	call	0x15a0


0x47de:	mov	rsi, qword ptr [rsp + 0x38]
0x47e3:	xor	rsi, qword ptr fs:[0x28]
0x47ec:	jne	0x47f3


0x47ee:	add	rsp, 0x48
0x47f2:	ret	


0x47f3:	call	0x15a0


0x422d:	add	rsp, 0x20
0x4231:	mov	eax, dword ptr [rsp + 0x18]
0x4235:	mov	dword ptr [r13], eax
0x4239:	add	rsp, 0x28
0x423d:	mov	rax, r12
0x4240:	pop	rbx
0x4241:	pop	rbp
0x4242:	pop	r12
0x4244:	pop	r13
0x4246:	pop	r14
0x4248:	pop	r15
0x424a:	ret	


0x447c:	lea	rsi, [rax + 1]
0x4480:	mov	qword ptr [rsp + 0x48], rax
0x4485:	add	rsp, 0x20
0x4489:	mov	rdi, rsi
0x448c:	mov	qword ptr [rsp + 0x18], rsi
0x4491:	call	0x5050


0x4496:	mov	qword ptr [rsp + 0x10], rax
0x449b:	sub	rsp, 8
0x449f:	push	qword ptr [rbx + 0x30]
0x44a2:	push	qword ptr [rbx + 0x28]
0x44a5:	mov	r10, qword ptr [rsp + 0x38]
0x44aa:	mov	r9d, ebp
0x44ad:	mov	r8d, dword ptr [rbx]
0x44b0:	mov	rcx, r15
0x44b3:	mov	rdx, r14
0x44b6:	mov	rdi, rax
0x44b9:	push	r10
0x44bb:	mov	rsi, qword ptr [rsp + 0x38]
0x44c0:	call	0x2e90


0x44c5:	mov	eax, dword ptr [rsp + 0x2c]
0x44c9:	add	rsp, 0x20
0x44cd:	test	r12, r12
0x44d0:	mov	dword ptr [r13], eax
0x44d4:	je	0x44df


0x44df:	mov	rax, qword ptr [rsp + 0x10]
0x44e4:	add	rsp, 0x38
0x44e8:	pop	rbx
0x44e9:	pop	rbp
0x44ea:	pop	r12
0x44ec:	pop	r13
0x44ee:	pop	r14
0x44f0:	pop	r15
0x44f2:	ret	


0x44d6:	mov	r11, qword ptr [rsp + 0x28]
0x44db:	mov	qword ptr [r12], r11
0x44df:	mov	rax, qword ptr [rsp + 0x10]
0x44e4:	add	rsp, 0x38
0x44e8:	pop	rbx
0x44e9:	pop	rbp
0x44ea:	pop	r12
0x44ec:	pop	r13
0x44ee:	pop	r14
0x44f0:	pop	r15
0x44f2:	ret	


0x43f1:	mov	dword ptr [rbp], r12d
0x43f5:	add	rsp, 0x38
0x43f9:	pop	rbx
0x43fa:	pop	rbp
0x43fb:	pop	r12
0x43fd:	pop	r13
0x43ff:	pop	r14
0x4401:	pop	r15
0x4403:	ret	


0x5b4d:	add	rbx, 1
0x5b51:	cmp	rbp, rbx
0x5b54:	jne	0x5b40


0x5b40:	mov	rdx, r15
0x5b43:	mov	rsi, r14
0x5b46:	mov	edi, r13d
0x5b49:	call	qword ptr [r12 + rbx*8]






0x4cc0:	lea	rsi, [rip + 0x1c51]
0x4cc7:	mov	edx, 5
0x4ccc:	xor	edi, edi
0x4cce:	mov	r14, qword ptr [rbx + 0x18]
0x4cd2:	mov	r13, qword ptr [rbx + 0x10]
0x4cd6:	mov	r12, qword ptr [rbx + 8]
0x4cda:	mov	rbx, qword ptr [rbx]
0x4cdd:	call	0x1570


0x4ae0:	mov	r9, qword ptr [rbx + 0x38]
0x4ae4:	mov	rax, qword ptr [rbx + 0x10]
0x4ae8:	lea	rsi, [rip + 0x1ec9]
0x4aef:	mov	r8, qword ptr [rbx + 8]
0x4af3:	mov	edx, 5
0x4af8:	xor	edi, edi
0x4afa:	mov	r13, qword ptr [rbx + 0x30]
0x4afe:	mov	r12, qword ptr [rbx + 0x28]
0x4b02:	mov	qword ptr [rsp + 0x10], r9
0x4b07:	mov	r15, qword ptr [rbx + 0x20]
0x4b0b:	mov	r14, qword ptr [rbx + 0x18]
0x4b0f:	mov	qword ptr [rsp], rax
0x4b13:	mov	qword ptr [rsp + 8], r8
0x4b18:	mov	rbx, qword ptr [rbx]
0x4b1b:	call	0x1570


0x4be8:	mov	rbx, qword ptr [rbx]
0x4beb:	lea	rsi, [rip + 0x1bcd]
0x4bf2:	mov	edx, 5
0x4bf7:	xor	edi, edi
0x4bf9:	call	0x1570


0x4c28:	mov	r12, qword ptr [rbx + 8]
0x4c2c:	lea	rsi, [rip + 0x1b9c]
0x4c33:	mov	rbx, qword ptr [rbx]
0x4c36:	mov	edx, 5
0x4c3b:	xor	edi, edi
0x4c3d:	call	0x1570


0x4d48:	mov	r8, qword ptr [rbx + 8]
0x4d4c:	mov	r12, qword ptr [rbx + 0x28]
0x4d50:	lea	rsi, [rip + 0x1c09]
0x4d57:	mov	r15, qword ptr [rbx + 0x20]
0x4d5b:	mov	r14, qword ptr [rbx + 0x18]
0x4d5f:	mov	edx, 5
0x4d64:	mov	r13, qword ptr [rbx + 0x10]
0x4d68:	xor	edi, edi
0x4d6a:	mov	rbx, qword ptr [rbx]
0x4d6d:	mov	qword ptr [rsp], r8
0x4d71:	call	0x1570


0x4c70:	mov	r13, qword ptr [rbx + 0x10]
0x4c74:	mov	r12, qword ptr [rbx + 8]
0x4c78:	lea	rsi, [rip + 0x1b67]
0x4c7f:	mov	rbx, qword ptr [rbx]
0x4c82:	mov	edx, 5
0x4c87:	xor	edi, edi
0x4c89:	call	0x1570


0x4db0:	mov	r9, qword ptr [rbx + 0x10]
0x4db4:	mov	r13, qword ptr [rbx + 0x30]
0x4db8:	lea	rsi, [rip + 0x1bc9]
0x4dbf:	mov	r12, qword ptr [rbx + 0x28]
0x4dc3:	mov	r15, qword ptr [rbx + 0x20]
0x4dc7:	mov	edx, 5
0x4dcc:	mov	r14, qword ptr [rbx + 0x18]
0x4dd0:	mov	r8, qword ptr [rbx + 8]
0x4dd4:	xor	edi, edi
0x4dd6:	mov	qword ptr [rsp + 8], r9
0x4ddb:	mov	rbx, qword ptr [rbx]
0x4dde:	mov	qword ptr [rsp], r8
0x4de2:	call	0x1570


0x4b90:	mov	r10, qword ptr [rbx + 0x40]
0x4b94:	mov	r9, qword ptr [rbx + 0x38]
0x4b98:	lea	rsi, [rip + 0x1e49]
0x4b9f:	mov	rax, qword ptr [rbx + 0x10]
0x4ba3:	mov	r8, qword ptr [rbx + 8]
0x4ba7:	mov	edx, 5
0x4bac:	mov	r13, qword ptr [rbx + 0x30]
0x4bb0:	mov	r12, qword ptr [rbx + 0x28]
0x4bb4:	mov	r15, qword ptr [rbx + 0x20]
0x4bb8:	mov	r14, qword ptr [rbx + 0x18]
0x4bbc:	mov	rbx, qword ptr [rbx]
0x4bbf:	mov	qword ptr [rsp + 0x18], r10
0x4bc4:	mov	qword ptr [rsp + 0x10], r9
0x4bc9:	mov	qword ptr [rsp], rax
0x4bcd:	mov	qword ptr [rsp + 8], r8
0x4bd2:	xor	edi, edi
0x4bd4:	call	0x1570


0x4b56:	add	rsp, 0x28
0x4b5a:	pop	rbx
0x4b5b:	pop	rbp
0x4b5c:	pop	r12
0x4b5e:	pop	r13
0x4b60:	pop	r14
0x4b62:	pop	r15
0x4b64:	ret	


0x4d18:	mov	r15, qword ptr [rbx + 0x20]
0x4d1c:	lea	rsi, [rip + 0x1c15]
0x4d23:	mov	edx, 5
0x4d28:	xor	edi, edi
0x4d2a:	mov	r14, qword ptr [rbx + 0x18]
0x4d2e:	mov	r13, qword ptr [rbx + 0x10]
0x4d32:	mov	r12, qword ptr [rbx + 8]
0x4d36:	mov	rbx, qword ptr [rbx]
0x4d39:	call	0x1570


0x4d3e:	push	r15
0x4d40:	jmp	0x4ce6


0x4ce6:	push	r14
0x4ce8:	mov	rdx, rax
0x4ceb:	mov	r9, r13
0x4cee:	mov	r8, r12
0x4cf1:	mov	rcx, rbx
0x4cf4:	mov	rdi, rbp
0x4cf7:	mov	esi, 1
0x4cfc:	xor	eax, eax
0x4cfe:	call	0x17b0


0x4d03:	pop	rax
0x4d04:	pop	rdx
0x4d05:	add	rsp, 0x28
0x4d09:	pop	rbx
0x4d0a:	pop	rbp
0x4d0b:	pop	r12
0x4d0d:	pop	r13
0x4d0f:	pop	r14
0x4d11:	pop	r15
0x4d13:	ret	


0x4de7:	push	r13
0x4de9:	push	r12
0x4deb:	push	r15
0x4ded:	push	r14
0x4def:	mov	r9, qword ptr [rsp + 0x28]
0x4df4:	jmp	0x4d83


0x4d83:	mov	r8, qword ptr [rsp + 0x20]
0x4d88:	mov	rcx, rbx
0x4d8b:	mov	rdx, rax
0x4d8e:	mov	rdi, rbp
0x4d91:	mov	esi, 1
0x4d96:	xor	eax, eax
0x4d98:	call	0x17b0


0x4d9d:	add	rsp, 0x20
0x4da1:	add	rsp, 0x28
0x4da5:	pop	rbx
0x4da6:	pop	rbp
0x4da7:	pop	r12
0x4da9:	pop	r13
0x4dab:	pop	r14
0x4dad:	pop	r15
0x4daf:	ret	


0x4c8e:	add	rsp, 0x28
0x4c92:	mov	r9, r13
0x4c95:	mov	r8, r12
0x4c98:	mov	rcx, rbx
0x4c9b:	mov	rdi, rbp
0x4c9e:	mov	rdx, rax
0x4ca1:	pop	rbx
0x4ca2:	pop	rbp
0x4ca3:	pop	r12
0x4ca5:	pop	r13
0x4ca7:	pop	r14
0x4ca9:	pop	r15
0x4cab:	mov	esi, 1
0x4cb0:	xor	eax, eax
0x4cb2:	jmp	0x17b0


0x4d76:	sub	rsp, 8
0x4d7a:	mov	r9, r13
0x4d7d:	push	r12
0x4d7f:	push	r15
0x4d81:	push	r14
0x4d83:	mov	r8, qword ptr [rsp + 0x20]
0x4d88:	mov	rcx, rbx
0x4d8b:	mov	rdx, rax
0x4d8e:	mov	rdi, rbp
0x4d91:	mov	esi, 1
0x4d96:	xor	eax, eax
0x4d98:	call	0x17b0


0x4c42:	add	rsp, 0x28
0x4c46:	mov	r8, r12
0x4c49:	mov	rcx, rbx
0x4c4c:	mov	rdi, rbp
0x4c4f:	mov	rdx, rax
0x4c52:	mov	esi, 1
0x4c57:	pop	rbx
0x4c58:	pop	rbp
0x4c59:	pop	r12
0x4c5b:	pop	r13
0x4c5d:	pop	r14
0x4c5f:	pop	r15
0x4c61:	xor	eax, eax
0x4c63:	jmp	0x17b0


0x4bfe:	add	rsp, 0x28
0x4c02:	mov	rcx, rbx
0x4c05:	mov	rdi, rbp
0x4c08:	pop	rbx
0x4c09:	pop	rbp
0x4c0a:	pop	r12
0x4c0c:	pop	r13
0x4c0e:	pop	r14
0x4c10:	pop	r15
0x4c12:	mov	rdx, rax
0x4c15:	mov	esi, 1
0x4c1a:	xor	eax, eax
0x4c1c:	jmp	0x17b0


0x4b20:	sub	rsp, 8
0x4b24:	mov	r9, qword ptr [rsp + 0x18]
0x4b29:	mov	rdx, rax
0x4b2c:	mov	rcx, rbx
0x4b2f:	mov	esi, 1
0x4b34:	mov	rdi, rbp
0x4b37:	xor	eax, eax
0x4b39:	push	r9
0x4b3b:	push	r13
0x4b3d:	push	r12
0x4b3f:	push	r15
0x4b41:	push	r14
0x4b43:	mov	r9, qword ptr [rsp + 0x30]
0x4b48:	mov	r8, qword ptr [rsp + 0x38]
0x4b4d:	call	0x17b0


0x4ce2:	sub	rsp, 8
0x4ce6:	push	r14
0x4ce8:	mov	rdx, rax
0x4ceb:	mov	r9, r13
0x4cee:	mov	r8, r12
0x4cf1:	mov	rcx, rbx
0x4cf4:	mov	rdi, rbp
0x4cf7:	mov	esi, 1
0x4cfc:	xor	eax, eax
0x4cfe:	call	0x17b0


0x3a30:	sub	rsp, 8
0x3a34:	mov	rcx, rbp
0x3a37:	mov	rsi, r13
0x3a3a:	push	qword ptr [rsp + 0x68]
0x3a3e:	push	qword ptr [rsp + 0x78]
0x3a42:	mov	rdi, r14
0x3a45:	push	0
0x3a47:	mov	r9d, dword ptr [rsp + 0x98]
0x3a4f:	mov	r8d, dword ptr [rsp + 0x28]
0x3a54:	mov	rdx, qword ptr [rsp + 0x30]
0x3a59:	and	r9d, 0xfffffffd
0x3a5d:	call	0x2e90


0x3a62:	add	rsp, 0x20
0x3a66:	mov	r15, rax
0x3a69:	mov	rbx, qword ptr [rsp + 0xa8]
0x3a71:	xor	rbx, qword ptr fs:[0x28]
0x3a7a:	mov	rax, r15
0x3a7d:	jne	0x4083


0x3a83:	add	rsp, 0xb8
0x3a8a:	pop	rbx
0x3a8b:	pop	rbp
0x3a8c:	pop	r12
0x3a8e:	pop	r13
0x3a90:	pop	r14
0x3a92:	pop	r15
0x3a94:	ret	


0x4083:	call	0x15a0


0x402d:	sub	rsp, 8
0x4031:	mov	r8d, 5
0x4037:	mov	rcx, r11
0x403a:	push	qword ptr [rsp + 0x68]
0x403e:	push	qword ptr [rsp + 0x78]
0x4042:	mov	rdi, r14
0x4045:	push	qword ptr [rsp + 0x38]
0x4049:	mov	r9d, dword ptr [rsp + 0x98]
0x4051:	mov	rdx, qword ptr [rsp + 0x30]
0x4056:	mov	rsi, qword ptr [rsp + 0x70]
0x405b:	call	0x2e90


0x4060:	add	rsp, 0x20
0x4064:	mov	r15, rax
0x4067:	jmp	0x3a69


0x3a69:	mov	rbx, qword ptr [rsp + 0xa8]
0x3a71:	xor	rbx, qword ptr fs:[0x28]
0x3a7a:	mov	rax, r15
0x3a7d:	jne	0x4083


0x14c0:	push	qword ptr [rip + 0x20796a]
0x14c6:	jmp	qword ptr [rip + 0x20796c]


0x14cc:	nop	dword ptr [rax]


0x14d6:	push	0
0x14db:	jmp	0x14c0


0x14e6:	push	1
0x14eb:	jmp	0x14c0


0x14f6:	push	2
0x14fb:	jmp	0x14c0


0x1506:	push	3
0x150b:	jmp	0x14c0


0x1516:	push	4
0x151b:	jmp	0x14c0


0x1526:	push	5
0x152b:	jmp	0x14c0


0x1536:	push	6
0x153b:	jmp	0x14c0


0x1546:	push	7
0x154b:	jmp	0x14c0


0x1556:	push	8
0x155b:	jmp	0x14c0


0x1566:	push	9
0x156b:	jmp	0x14c0


0x1576:	push	0xa
0x157b:	jmp	0x14c0


0x1586:	push	0xb
0x158b:	jmp	0x14c0


0x1596:	push	0xc
0x159b:	jmp	0x14c0


0x15a6:	push	0xd
0x15ab:	jmp	0x14c0


0x15b6:	push	0xe
0x15bb:	jmp	0x14c0


0x15c6:	push	0xf
0x15cb:	jmp	0x14c0


0x15d6:	push	0x10
0x15db:	jmp	0x14c0


0x15e6:	push	0x11
0x15eb:	jmp	0x14c0


0x15f6:	push	0x12
0x15fb:	jmp	0x14c0


0x1606:	push	0x13
0x160b:	jmp	0x14c0


0x1616:	push	0x14
0x161b:	jmp	0x14c0


0x1626:	push	0x15
0x162b:	jmp	0x14c0


0x1636:	push	0x16
0x163b:	jmp	0x14c0


0x1646:	push	0x17
0x164b:	jmp	0x14c0


0x1656:	push	0x18
0x165b:	jmp	0x14c0


0x1660:	jmp	qword ptr [rip + 0x2078a2]




0x1666:	push	0x19
0x166b:	jmp	0x14c0


0x1676:	push	0x1a
0x167b:	jmp	0x14c0


0x1686:	push	0x1b
0x168b:	jmp	0x14c0


0x1696:	push	0x1c
0x169b:	jmp	0x14c0


0x16a6:	push	0x1d
0x16ab:	jmp	0x14c0


0x16b6:	push	0x1e
0x16bb:	jmp	0x14c0


0x16c6:	push	0x1f
0x16cb:	jmp	0x14c0


0x16d6:	push	0x20
0x16db:	jmp	0x14c0


0x16e6:	push	0x21
0x16eb:	jmp	0x14c0


0x16f6:	push	0x22
0x16fb:	jmp	0x14c0


0x1706:	push	0x23
0x170b:	jmp	0x14c0


0x1716:	push	0x24
0x171b:	jmp	0x14c0


0x1726:	push	0x25
0x172b:	jmp	0x14c0


0x1736:	push	0x26
0x173b:	jmp	0x14c0


0x1746:	push	0x27
0x174b:	jmp	0x14c0


0x1756:	push	0x28
0x175b:	jmp	0x14c0


0x1766:	push	0x29
0x176b:	jmp	0x14c0


0x1776:	push	0x2a
0x177b:	jmp	0x14c0


0x1786:	push	0x2b
0x178b:	jmp	0x14c0


0x1796:	push	0x2c
0x179b:	jmp	0x14c0


0x17a6:	push	0x2d
0x17ab:	jmp	0x14c0


0x17b6:	push	0x2e
0x17bb:	jmp	0x14c0


0x17c0:	jmp	qword ptr [rip + 0x2077f2]




0x17c6:	push	0x2f
0x17cb:	jmp	0x14c0


0x17d0:	jmp	qword ptr [rip + 0x2077ea]




0x17d6:	push	0x30
0x17db:	jmp	0x14c0


0x17e6:	push	0x31
0x17eb:	jmp	0x14c0


0x202a:	hlt	


0x202b:	nop	dword ptr [rax + rax]


0x2062:	nop	dword ptr [rax]
0x2066:	nop	word ptr cs:[rax + rax]


0x20b2:	nop	dword ptr [rax]
0x20b6:	nop	word ptr cs:[rax + rax]


0x20fa:	nop	word ptr [rax + rax]


0x210a:	nop	word ptr [rax + rax]


0x24ea:	nop	word ptr [rax + rax]


0x25f8:	nop	dword ptr [rax + rax]


0x27b5:	nop	
0x27b6:	nop	word ptr cs:[rax + rax]


0x2847:	nop	word ptr [rax + rax]


0x2865:	nop	
0x2866:	nop	word ptr cs:[rax + rax]


0x2877:	nop	word ptr [rax + rax]


0x2b2d:	nop	dword ptr [rax]


0x2bef:	nop	


0x2bf8:	nop	dword ptr [rax + rax]


0x2c08:	nop	dword ptr [rax + rax]


0x2cb4:	nop	word ptr cs:[rax + rax]
0x2cbe:	nop	


0x2cc5:	nop	
0x2cc6:	nop	word ptr cs:[rax + rax]


0x2cf2:	nop	word ptr cs:[rax + rax]
0x2cfc:	nop	dword ptr [rax]


0x2d9f:	nop	


0x2e87:	nop	word ptr [rax + rax]


0x2f23:	mov	byte ptr [rsp + 0xe], 1
0x2f28:	mov	byte ptr [rsp + 0x7c], 0
0x2f2d:	xor	r12d, r12d
0x2f30:	mov	qword ptr [rsp + 0x50], 0
0x2f39:	mov	byte ptr [rsp + 0xf], 1
0x2f3e:	mov	byte ptr [rsp + 0xd], 0
0x2f43:	lea	rax, [rip + 0x3393]
0x2f4a:	mov	qword ptr [rsp + 0x18], 1
0x2f53:	xor	r15d, r15d
0x2f56:	mov	dword ptr [rsp + 8], 2
0x2f5e:	mov	qword ptr [rsp + 0x48], rax
0x2f63:	xor	r11d, r11d
0x2f66:	mov	rax, rbp
0x2f69:	mov	r8d, r12d
0x2f6c:	mov	rbp, r11
0x2f6f:	mov	r11, rax
0x2f72:	nop	word ptr [rax + rax]
0x2f78:	cmp	r11, rbp
0x2f7b:	setne	r12b
0x2f7f:	cmp	r11, -1
0x2f83:	jne	0x2f92


0x2f85:	mov	rax, qword ptr [rsp + 0x10]
0x2f8a:	cmp	byte ptr [rax + rbp], 0
0x2f8e:	setne	r12b
0x2f92:	test	r12b, r12b
0x2f95:	je	0x35f0


0x2f92:	test	r12b, r12b
0x2f95:	je	0x35f0


0x35f0:	cmp	dword ptr [rsp + 8], 2
0x35f5:	movzx	ebx, byte ptr [rsp + 0xf]
0x35fa:	mov	r12d, r8d
0x35fd:	mov	rbp, r11
0x3600:	sete	dl
0x3603:	mov	eax, ebx
0x3605:	test	r15, r15
0x3608:	sete	cl
0x360b:	and	eax, edx
0x360d:	and	al, cl
0x360f:	jne	0x4076


0x2f9b:	cmp	dword ptr [rsp + 8], 2
0x2fa0:	mov	rdi, qword ptr [rsp + 0x10]
0x2fa5:	lea	r9, [rdi + rbp]
0x2fa9:	setne	al
0x2fac:	and	al, byte ptr [rsp + 0xd]
0x2fb0:	mov	r10d, eax
0x2fb3:	je	0x3060


0x3615:	mov	eax, ebx
0x3617:	xor	eax, 1
0x361a:	and	dl, al
0x361c:	je	0x3f8c


0x4076:	mov	dword ptr [rsp + 8], 2
0x407e:	jmp	0x3a19


0x3060:	movzx	ebx, byte ptr [r9]
0x3064:	cmp	bl, 0x7e
0x3067:	ja	0x3388


0x2fb9:	mov	rax, qword ptr [rsp + 0x18]
0x2fbe:	test	rax, rax
0x2fc1:	je	0x33f0


0x3f8c:	mov	rbx, qword ptr [rsp + 0x48]
0x3f91:	test	rbx, rbx
0x3f94:	je	0x3fc2


0x3622:	cmp	byte ptr [rsp + 0x7c], 0
0x3627:	je	0x3f8a


0x3a19:	cmp	byte ptr [rsp + 0xd], 0
0x3a1e:	je	0x3a30


0x306d:	lea	rcx, [rip + 0x32f8]
0x3074:	movzx	edx, bl
0x3077:	movsxd	rax, dword ptr [rcx + rdx*4]
0x307b:	add	rax, rcx
0x307e:	jmp	rax


0x3388:	cmp	qword ptr [rsp + 0x58], 1
0x338e:	jne	0x3738


0x33f0:	movzx	ebx, byte ptr [r9]
0x33f4:	cmp	bl, 0x7e
0x33f7:	ja	0x3380


0x2fc7:	cmp	r11, -1
0x2fcb:	lea	rbx, [rbp + rax]
0x2fd0:	jne	0x3000


0x3fc2:	cmp	r13, r15
0x3fc5:	jbe	0x3a69


0x3f96:	test	al, al
0x3f98:	je	0x3fc2


0x3f8a:	mov	eax, edx
0x3f8c:	mov	rbx, qword ptr [rsp + 0x48]
0x3f91:	test	rbx, rbx
0x3f94:	je	0x3fc2


0x362d:	cmp	byte ptr [rsp + 0xe], 0
0x3632:	jne	0x402d


0x3a20:	test	al, al
0x3a22:	mov	eax, 4
0x3a27:	cmove	eax, dword ptr [rsp + 8]
0x3a2c:	mov	dword ptr [rsp + 8], eax


0x3394:	mov	qword ptr [rsp + 0x38], r11
0x3399:	mov	byte ptr [rsp + 0x30], r8b
0x339e:	mov	byte ptr [rsp + 0x28], r10b
0x33a3:	call	0x17e0


0x3738:	lea	rax, [rsp + 0xa0]
0x3740:	cmp	r11, -1
0x3744:	mov	qword ptr [rsp + 0xa0], 0
0x3750:	mov	qword ptr [rsp + 0x28], rax
0x3755:	jne	0x3784


0x33f9:	lea	rcx, [rip + 0x3168]
0x3400:	movzx	edx, bl
0x3403:	movsxd	rax, dword ptr [rcx + rdx*4]
0x3407:	add	rax, rcx
0x340a:	jmp	rax


0x3380:	xor	r10d, r10d
0x3383:	nop	dword ptr [rax + rax]
0x3388:	cmp	qword ptr [rsp + 0x58], 1
0x338e:	jne	0x3738


0x2fd2:	cmp	rax, 1
0x2fd6:	jbe	0x3000


0x3000:	cmp	rbx, r11
0x3003:	mov	byte ptr [rsp + 0x28], r10b
0x3008:	ja	0x35c0


0x3fcb:	mov	byte ptr [r14 + r15], 0
0x3fd0:	jmp	0x3a69


0x3f9a:	movzx	ecx, byte ptr [rbx]
0x3f9d:	mov	rax, rbx
0x3fa0:	test	cl, cl
0x3fa2:	je	0x3fc2


0x3638:	test	r13, r13
0x363b:	sete	al
0x363e:	cmp	qword ptr [rsp + 0x50], 0
0x3644:	setne	dl
0x3647:	and	al, dl
0x3649:	je	0x406c


0x3757:	mov	rdi, qword ptr [rsp + 0x10]
0x375c:	mov	byte ptr [rsp + 0x40], r8b
0x3761:	mov	byte ptr [rsp + 0x38], r10b
0x3766:	mov	qword ptr [rsp + 0x30], r9
0x376b:	call	0x1590


0x3784:	lea	rax, [rsp + 0x9c]
0x378c:	xor	ecx, ecx
0x378e:	mov	byte ptr [rsp + 0x7e], bl
0x3792:	mov	byte ptr [rsp + 0x7d], r8b
0x3797:	mov	rbx, rcx
0x379a:	mov	qword ptr [rsp + 0x88], r9
0x37a2:	mov	qword ptr [rsp + 0x38], rax
0x37a7:	mov	byte ptr [rsp + 0x7f], r10b
0x37ac:	mov	qword ptr [rsp + 0x80], r15
0x37b4:	mov	qword ptr [rsp + 0x40], r14
0x37b9:	mov	qword ptr [rsp + 0x70], r13
0x37be:	mov	qword ptr [rsp + 0x30], r11
0x37c3:	mov	rax, qword ptr [rsp + 0x10]
0x37c8:	lea	r14, [rbp + rbx]
0x37cd:	mov	rdx, qword ptr [rsp + 0x30]
0x37d2:	mov	rcx, qword ptr [rsp + 0x28]
0x37d7:	mov	rdi, qword ptr [rsp + 0x38]
0x37dc:	lea	r13, [rax + r14]
0x37e0:	sub	rdx, r14
0x37e3:	mov	rsi, r13
0x37e6:	call	0x5950


0x2fd8:	mov	byte ptr [rsp + 0x38], r8b
0x2fdd:	mov	byte ptr [rsp + 0x30], r10b
0x2fe2:	mov	qword ptr [rsp + 0x28], r9
0x2fe7:	call	0x1590


0x300e:	mov	rdx, qword ptr [rsp + 0x18]
0x3013:	mov	rsi, qword ptr [rsp + 0x48]
0x3018:	mov	rdi, r9
0x301b:	mov	qword ptr [rsp + 0x40], r11
0x3020:	mov	byte ptr [rsp + 0x38], r8b
0x3025:	mov	qword ptr [rsp + 0x30], r9
0x302a:	call	0x1660


0x35c0:	xor	r10d, r10d
0x35c3:	jmp	0x3060


0x3fa4:	mov	rdx, r15
0x3fa7:	sub	rax, r15
0x3faa:	cmp	r13, rdx
0x3fad:	jbe	0x3fb3


0x406c:	movzx	eax, byte ptr [rsp + 0x7c]
0x4071:	jmp	0x3f8c


0x364f:	mov	r13, qword ptr [rsp + 0x50]
0x3654:	lea	rbx, [rip + 0x2c82]
0x365b:	mov	byte ptr [r14], 0x27
0x365f:	mov	dword ptr [rsp + 8], 2
0x3667:	mov	r15d, 1
0x366d:	mov	qword ptr [rsp + 0x18], 1
0x3676:	mov	byte ptr [rsp + 0xf], 0
0x367b:	mov	qword ptr [rsp + 0x48], rbx
0x3680:	mov	byte ptr [rsp + 0x7c], al
0x3684:	jmp	0x2f63


0x3fb3:	add	rdx, 1
0x3fb7:	movzx	ecx, byte ptr [rax + rdx]
0x3fbb:	test	cl, cl
0x3fbd:	jne	0x3faa


0x3faf:	mov	byte ptr [r14 + rdx], cl
0x3fb3:	add	rdx, 1
0x3fb7:	movzx	ecx, byte ptr [rax + rdx]
0x3fbb:	test	cl, cl
0x3fbd:	jne	0x3faa


0x2f63:	xor	r11d, r11d
0x2f66:	mov	rax, rbp
0x2f69:	mov	r8d, r12d
0x2f6c:	mov	rbp, r11
0x2f6f:	mov	r11, rax
0x2f72:	nop	word ptr [rax + rax]
0x2f78:	cmp	r11, rbp
0x2f7b:	setne	r12b
0x2f7f:	cmp	r11, -1
0x2f83:	jne	0x2f92


0x3fbf:	mov	r15, rdx
0x3fc2:	cmp	r13, r15
0x3fc5:	jbe	0x3a69


0x3faa:	cmp	r13, rdx
0x3fad:	jbe	0x3fb3


0x302f:	test	eax, eax
0x3031:	mov	r9, qword ptr [rsp + 0x30]
0x3036:	movzx	r8d, byte ptr [rsp + 0x38]
0x303c:	mov	r11, qword ptr [rsp + 0x40]
0x3041:	jne	0x35c0


0x3047:	cmp	byte ptr [rsp + 0xf], 0
0x304c:	movzx	r10d, byte ptr [rsp + 0x28]
0x3052:	jne	0x3fd5


0x3fd5:	cmp	dword ptr [rsp + 8], 2
0x3fda:	movzx	ebx, byte ptr [rsp + 0xf]
0x3fdf:	mov	rbp, r11
0x3fe2:	sete	al
0x3fe5:	mov	byte ptr [rsp + 0xd], bl
0x3fe9:	jmp	0x3a19


0x37eb:	test	rax, rax
0x37ee:	mov	r15, rax
0x37f1:	je	0x3841


0x3841:	mov	edx, r12d
0x3844:	mov	rdi, rbx
0x3847:	movzx	r8d, byte ptr [rsp + 0x7d]
0x384d:	xor	edx, 1
0x3850:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3855:	movzx	r10d, byte ptr [rsp + 0x7f]
0x385b:	and	dl, byte ptr [rsp + 0xd]
0x385f:	mov	r15, qword ptr [rsp + 0x80]
0x3867:	mov	r14, qword ptr [rsp + 0x40]
0x386c:	mov	r13, qword ptr [rsp + 0x70]
0x3871:	mov	r11, qword ptr [rsp + 0x30]
0x3876:	cmp	rdi, 1
0x387a:	jbe	0x3e7b


0x37f3:	cmp	rax, -1
0x37f7:	je	0x3e15


0x3e7b:	mov	eax, edx
0x3e7d:	jmp	0x33d7


0x3880:	mov	rcx, rdi
0x3883:	xor	esi, esi
0x3885:	movzx	r9d, byte ptr [rsp + 0xf]
0x388b:	add	rcx, rbp
0x388e:	mov	rdi, qword ptr [rsp + 0x10]
0x3893:	jmp	0x394e


0x3e15:	mov	rdi, rbx
0x3e18:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3e1e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3e23:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3e29:	mov	r15, qword ptr [rsp + 0x80]
0x3e31:	xor	r12d, r12d
0x3e34:	mov	r14, qword ptr [rsp + 0x40]
0x3e39:	mov	r13, qword ptr [rsp + 0x70]
0x3e3e:	mov	r11, qword ptr [rsp + 0x30]
0x3e43:	movzx	edx, byte ptr [rsp + 0xd]
0x3e48:	jmp	0x3876


0x37fd:	cmp	rax, -2
0x3801:	je	0x3da1


0x33d7:	test	al, al
0x33d9:	jne	0x3d71


0x394e:	test	dl, dl
0x3950:	jne	0x38a0


0x3876:	cmp	rdi, 1
0x387a:	jbe	0x3e7b


0x3da1:	mov	r11, qword ptr [rsp + 0x30]
0x3da6:	mov	rsi, r14
0x3da9:	mov	rcx, r13
0x3dac:	mov	rax, rbx
0x3daf:	mov	rdi, rbx
0x3db2:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3db8:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3dbd:	mov	r9, qword ptr [rsp + 0x88]
0x3dc5:	cmp	rsi, r11
0x3dc8:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3dce:	mov	r15, qword ptr [rsp + 0x80]
0x3dd6:	mov	r14, qword ptr [rsp + 0x40]
0x3ddb:	mov	r13, qword ptr [rsp + 0x70]
0x3de0:	jae	0x3e08


0x3807:	cmp	dword ptr [rsp + 8], 2
0x380c:	sete	al
0x380f:	and	al, byte ptr [rsp + 0xf]
0x3813:	jne	0x39b0


0x33df:	cmp	dword ptr [rsp + 8], 2
0x33e4:	sete	dl
0x33e7:	jmp	0x30b8


0x3d71:	movzx	edx, byte ptr [rsp + 0xd]
0x3d76:	xor	r12d, r12d
0x3d79:	jmp	0x3880


0x3956:	mov	eax, esi
0x3958:	xor	eax, 1
0x395b:	and	eax, r8d
0x395e:	test	r10b, r10b
0x3961:	je	0x3971


0x38a0:	cmp	dword ptr [rsp + 8], 2
0x38a5:	sete	al
0x38a8:	test	r9b, r9b
0x38ab:	jne	0x3d60


0x3de2:	cmp	byte ptr [rcx], 0
0x3de5:	jne	0x3df7


0x3e08:	movzx	edx, byte ptr [rsp + 0xd]
0x3e0d:	xor	r12d, r12d
0x3e10:	jmp	0x3876


0x3819:	mov	edi, dword ptr [rsp + 0x9c]
0x3820:	call	0x17d0


0x39b0:	cmp	r15, 1
0x39b4:	je	0x3819


0x30b8:	cmp	byte ptr [rsp + 0xd], 1
0x30bd:	jne	0x31d2


0x3971:	add	rbp, 1
0x3975:	cmp	rbp, rcx
0x3978:	jae	0x30fc


0x3963:	cmp	r13, r15
0x3966:	jbe	0x396d


0x38b1:	mov	esi, r8d
0x38b4:	xor	esi, 1
0x38b7:	and	al, sil
0x38ba:	je	0x38eb


0x3d60:	movzx	ebx, byte ptr [rsp + 0xf]
0x3d65:	mov	rbp, r11
0x3d68:	mov	byte ptr [rsp + 0xd], bl
0x3d6c:	jmp	0x3a19


0x3de7:	jmp	0x3e08


0x3df7:	add	rax, 1
0x3dfb:	lea	rdx, [rbp + rax]
0x3e00:	cmp	r11, rdx
0x3e03:	ja	0x3df0


0x39ba:	mov	rdi, qword ptr [rsp + 0x10]
0x39bf:	lea	rcx, [rdi + r15]
0x39c3:	lea	rdx, [rdi + r14 + 1]
0x39c8:	lea	r8, [rcx + r14]
0x39cc:	jmp	0x39dd


0x30c3:	test	dl, dl
0x30c5:	jne	0x31d2


0x31d2:	cmp	byte ptr [rsp + 0xf], 0
0x31d7:	jne	0x30cb


0x397e:	test	al, al
0x3980:	je	0x3d7e


0x30fc:	test	al, al
0x30fe:	je	0x3120


0x396d:	add	r15, 1
0x3971:	add	rbp, 1
0x3975:	cmp	rbp, rcx
0x3978:	jae	0x30fc


0x3968:	mov	byte ptr [r14 + r15], 0x5c
0x396d:	add	r15, 1
0x3971:	add	rbp, 1
0x3975:	cmp	rbp, rcx
0x3978:	jae	0x30fc


0x38eb:	cmp	r13, r15
0x38ee:	jbe	0x38f5


0x38bc:	cmp	r13, r15
0x38bf:	jbe	0x38c6


0x3e05:	mov	rdi, rax
0x3e08:	movzx	edx, byte ptr [rsp + 0xd]
0x3e0d:	xor	r12d, r12d
0x3e10:	jmp	0x3876


0x3df0:	cmp	byte ptr [r9 + rax], 0
0x3df5:	je	0x3e05


0x39dd:	movzx	ecx, byte ptr [rdx]
0x39e0:	sub	ecx, 0x5b
0x39e3:	cmp	cl, 0x21
0x39e6:	ja	0x39d0


0x30cb:	mov	rsi, qword ptr [rsp + 0x20]
0x30d0:	test	rsi, rsi
0x30d3:	je	0x30e9


0x31dd:	jmp	0x30e9


0x3d7e:	xor	r10d, r10d
0x3d81:	jmp	0x393d


0x3986:	cmp	r13, r15
0x3989:	jbe	0x3990


0x3120:	cmp	r15, r13
0x3123:	jae	0x3129


0x3100:	cmp	r13, r15
0x3103:	jbe	0x310a


0x38f5:	lea	rax, [r15 + 1]
0x38f9:	cmp	r13, rax
0x38fc:	jbe	0x390b


0x38f0:	mov	byte ptr [r14 + r15], 0x5c
0x38f5:	lea	rax, [r15 + 1]
0x38f9:	cmp	r13, rax
0x38fc:	jbe	0x390b


0x38c6:	lea	rsi, [r15 + 1]
0x38ca:	cmp	r13, rsi
0x38cd:	jbe	0x38d5


0x38c1:	mov	byte ptr [r14 + r15], 0x27
0x38c6:	lea	rsi, [r15 + 1]
0x38ca:	cmp	r13, rsi
0x38cd:	jbe	0x38d5


0x39e8:	mov	esi, 1
0x39ed:	shl	rsi, cl
0x39f0:	mov	rcx, rsi
0x39f3:	movabs	rsi, 0x20000002b
0x39fd:	test	rcx, rsi
0x3a00:	je	0x39d0


0x39d0:	add	rdx, 1
0x39d4:	cmp	r8, rdx
0x39d7:	je	0x3819


0x30e9:	test	r10b, r10b
0x30ec:	jne	0x3233


0x30d5:	mov	edx, ebx
0x30d7:	shr	dl, 5
0x30da:	movzx	edx, dl
0x30dd:	mov	edx, dword ptr [rsi + rdx*4]
0x30e0:	bt	edx, ebx
0x30e3:	jb	0x3233


0x393d:	cmp	r13, r15
0x3940:	jbe	0x3946


0x3990:	lea	rax, [r15 + 1]
0x3994:	cmp	r13, rax
0x3997:	jbe	0x399f


0x398b:	mov	byte ptr [r14 + r15], 0x27
0x3990:	lea	rax, [r15 + 1]
0x3994:	cmp	r13, rax
0x3997:	jbe	0x399f


0x3125:	mov	byte ptr [r14 + r15], bl
0x3129:	movzx	edi, byte ptr [rsp + 0xe]
0x312e:	add	r15, 1
0x3132:	mov	eax, 0
0x3137:	test	r12b, r12b
0x313a:	cmove	edi, eax
0x313d:	mov	byte ptr [rsp + 0xe], dil
0x3142:	jmp	0x2f78


0x3129:	movzx	edi, byte ptr [rsp + 0xe]
0x312e:	add	r15, 1
0x3132:	mov	eax, 0
0x3137:	test	r12b, r12b
0x313a:	cmove	edi, eax
0x313d:	mov	byte ptr [rsp + 0xe], dil
0x3142:	jmp	0x2f78


0x310a:	lea	rax, [r15 + 1]
0x310e:	cmp	r13, rax
0x3111:	jbe	0x3119


0x3105:	mov	byte ptr [r14 + r15], 0x27
0x310a:	lea	rax, [r15 + 1]
0x310e:	cmp	r13, rax
0x3111:	jbe	0x3119


0x390b:	lea	rax, [r15 + 2]
0x390f:	cmp	r13, rax
0x3912:	jbe	0x3924


0x38fe:	mov	eax, ebx
0x3900:	shr	al, 6
0x3903:	add	eax, 0x30
0x3906:	mov	byte ptr [r14 + r15 + 1], al
0x390b:	lea	rax, [r15 + 2]
0x390f:	cmp	r13, rax
0x3912:	jbe	0x3924


0x38d5:	lea	rsi, [r15 + 2]
0x38d9:	cmp	r13, rsi
0x38dc:	jbe	0x38e4


0x38cf:	mov	byte ptr [r14 + r15 + 1], 0x24
0x38d5:	lea	rsi, [r15 + 2]
0x38d9:	cmp	r13, rsi
0x38dc:	jbe	0x38e4


0x3a02:	mov	r14, qword ptr [rsp + 0x40]
0x3a07:	mov	r13, qword ptr [rsp + 0x70]
0x3a0c:	mov	rbp, qword ptr [rsp + 0x30]
0x3a11:	mov	dword ptr [rsp + 8], 2
0x3a19:	cmp	byte ptr [rsp + 0xd], 0
0x3a1e:	je	0x3a30


0x30f2:	xor	eax, 1
0x30f5:	add	rbp, 1
0x30f9:	and	eax, r8d
0x30fc:	test	al, al
0x30fe:	je	0x3120


0x3233:	cmp	dword ptr [rsp + 8], 2
0x3238:	sete	dl
0x323b:	cmp	byte ptr [rsp + 0xf], 0
0x3240:	mov	eax, edx
0x3242:	jne	0x3a98


0x3946:	movzx	ebx, byte ptr [rdi + rbp]
0x394a:	add	r15, 1
0x394e:	test	dl, dl
0x3950:	jne	0x38a0


0x3942:	mov	byte ptr [r14 + r15], bl
0x3946:	movzx	ebx, byte ptr [rdi + rbp]
0x394a:	add	r15, 1
0x394e:	test	dl, dl
0x3950:	jne	0x38a0


0x399f:	add	r15, 2
0x39a3:	xor	r10d, r10d
0x39a6:	xor	r8d, r8d
0x39a9:	jmp	0x393d


0x3999:	mov	byte ptr [r14 + r15 + 1], 0x27
0x399f:	add	r15, 2
0x39a3:	xor	r10d, r10d
0x39a6:	xor	r8d, r8d
0x39a9:	jmp	0x393d


0x2f78:	cmp	r11, rbp
0x2f7b:	setne	r12b
0x2f7f:	cmp	r11, -1
0x2f83:	jne	0x2f92


0x3119:	add	r15, 2
0x311d:	xor	r8d, r8d
0x3120:	cmp	r15, r13
0x3123:	jae	0x3129


0x3113:	mov	byte ptr [r14 + r15 + 1], 0x27
0x3119:	add	r15, 2
0x311d:	xor	r8d, r8d
0x3120:	cmp	r15, r13
0x3123:	jae	0x3129


0x3924:	and	ebx, 7
0x3927:	add	rbp, 1
0x392b:	add	r15, 3
0x392f:	add	ebx, 0x30
0x3932:	cmp	rbp, rcx
0x3935:	jae	0x3120


0x3914:	mov	eax, ebx
0x3916:	shr	al, 3
0x3919:	and	eax, 7
0x391c:	add	eax, 0x30
0x391f:	mov	byte ptr [r14 + r15 + 2], al
0x3924:	and	ebx, 7
0x3927:	add	rbp, 1
0x392b:	add	r15, 3
0x392f:	add	ebx, 0x30
0x3932:	cmp	rbp, rcx
0x3935:	jae	0x3120


0x38e4:	add	r15, 3
0x38e8:	mov	r8d, eax
0x38eb:	cmp	r13, r15
0x38ee:	jbe	0x38f5


0x38de:	mov	byte ptr [r14 + r15 + 2], 0x27
0x38e4:	add	r15, 3
0x38e8:	mov	r8d, eax
0x38eb:	cmp	r13, r15
0x38ee:	jbe	0x38f5


0x3248:	mov	eax, r8d
0x324b:	xor	eax, 1
0x324e:	and	al, dl
0x3250:	je	0x3281


0x3a98:	mov	rbp, r11
0x3a9b:	jmp	0x3a19


0x393b:	mov	esi, edx
0x393d:	cmp	r13, r15
0x3940:	jbe	0x3946


0x3281:	cmp	r13, r15
0x3284:	jbe	0x328b


0x3252:	cmp	r13, r15
0x3255:	jbe	0x325c


0x328b:	add	r15, 1
0x328f:	add	rbp, 1
0x3293:	jmp	0x3120


0x3286:	mov	byte ptr [r14 + r15], 0x5c
0x328b:	add	r15, 1
0x328f:	add	rbp, 1
0x3293:	jmp	0x3120


0x325c:	lea	rdx, [r15 + 1]
0x3260:	cmp	r13, rdx
0x3263:	jbe	0x326b


0x3257:	mov	byte ptr [r14 + r15], 0x27
0x325c:	lea	rdx, [r15 + 1]
0x3260:	cmp	r13, rdx
0x3263:	jbe	0x326b


0x326b:	lea	rdx, [r15 + 2]
0x326f:	cmp	r13, rdx
0x3272:	jbe	0x327a


0x3265:	mov	byte ptr [r14 + r15 + 1], 0x24
0x326b:	lea	rdx, [r15 + 2]
0x326f:	cmp	r13, rdx
0x3272:	jbe	0x327a


0x327a:	add	r15, 3
0x327e:	mov	r8d, eax
0x3281:	cmp	r13, r15
0x3284:	jbe	0x328b


0x3274:	mov	byte ptr [r14 + r15 + 2], 0x27
0x327a:	add	r15, 3
0x327e:	mov	r8d, eax
0x3281:	cmp	r13, r15
0x3284:	jbe	0x328b


0x3825:	mov	rdi, qword ptr [rsp + 0x28]
0x382a:	test	eax, eax
0x382c:	mov	eax, 0
0x3831:	cmove	r12d, eax
0x3835:	add	rbx, r15
0x3838:	call	0x17c0


0x383d:	test	eax, eax
0x383f:	je	0x37c3


0x37c3:	mov	rax, qword ptr [rsp + 0x10]
0x37c8:	lea	r14, [rbp + rbx]
0x37cd:	mov	rdx, qword ptr [rsp + 0x30]
0x37d2:	mov	rcx, qword ptr [rsp + 0x28]
0x37d7:	mov	rdi, qword ptr [rsp + 0x38]
0x37dc:	lea	r13, [rax + r14]
0x37e0:	sub	rdx, r14
0x37e3:	mov	rsi, r13
0x37e6:	call	0x5950


0x2fec:	movzx	r8d, byte ptr [rsp + 0x38]
0x2ff2:	movzx	r10d, byte ptr [rsp + 0x30]
0x2ff8:	mov	r11, rax
0x2ffb:	mov	r9, qword ptr [rsp + 0x28]
0x3000:	cmp	rbx, r11
0x3003:	mov	byte ptr [rsp + 0x28], r10b
0x3008:	ja	0x35c0


0x3770:	movzx	r8d, byte ptr [rsp + 0x40]
0x3776:	movzx	r10d, byte ptr [rsp + 0x38]
0x377c:	mov	r11, rax
0x377f:	mov	r9, qword ptr [rsp + 0x30]
0x3784:	lea	rax, [rsp + 0x9c]
0x378c:	xor	ecx, ecx
0x378e:	mov	byte ptr [rsp + 0x7e], bl
0x3792:	mov	byte ptr [rsp + 0x7d], r8b
0x3797:	mov	rbx, rcx
0x379a:	mov	qword ptr [rsp + 0x88], r9
0x37a2:	mov	qword ptr [rsp + 0x38], rax
0x37a7:	mov	byte ptr [rsp + 0x7f], r10b
0x37ac:	mov	qword ptr [rsp + 0x80], r15
0x37b4:	mov	qword ptr [rsp + 0x40], r14
0x37b9:	mov	qword ptr [rsp + 0x70], r13
0x37be:	mov	qword ptr [rsp + 0x30], r11
0x37c3:	mov	rax, qword ptr [rsp + 0x10]
0x37c8:	lea	r14, [rbp + rbx]
0x37cd:	mov	rdx, qword ptr [rsp + 0x30]
0x37d2:	mov	rcx, qword ptr [rsp + 0x28]
0x37d7:	mov	rdi, qword ptr [rsp + 0x38]
0x37dc:	lea	r13, [rax + r14]
0x37e0:	sub	rdx, r14
0x37e3:	mov	rsi, r13
0x37e6:	call	0x5950


0x33a8:	mov	rcx, qword ptr [rax]
0x33ab:	movzx	edx, bl
0x33ae:	movzx	r10d, byte ptr [rsp + 0x28]
0x33b4:	movzx	r8d, byte ptr [rsp + 0x30]
0x33ba:	mov	r11, qword ptr [rsp + 0x38]
0x33bf:	mov	edi, 1
0x33c4:	movzx	eax, word ptr [rcx + rdx*2]
0x33c8:	and	ax, 0x4000
0x33cc:	setne	r12b
0x33d0:	sete	al
0x33d3:	and	al, byte ptr [rsp + 0xd]
0x33d7:	test	al, al
0x33d9:	jne	0x3d71


0x3080:	xor	r10d, r10d
0x3083:	cmp	r11, 1
0x3087:	setne	al
0x308a:	cmp	r11, -1
0x308e:	jne	0x309c


0x3090:	mov	rax, qword ptr [rsp + 0x10]
0x3095:	cmp	byte ptr [rax + 1], 0
0x3099:	setne	al
0x309c:	cmp	dword ptr [rsp + 8], 2
0x30a1:	sete	dl
0x30a4:	test	al, al
0x30a6:	je	0x32f8


0x309c:	cmp	dword ptr [rsp + 8], 2
0x30a1:	sete	dl
0x30a4:	test	al, al
0x30a6:	je	0x32f8


0x32f8:	test	rbp, rbp
0x32fb:	jne	0x30ac


0x30ac:	xor	r12d, r12d
0x30af:	xor	eax, eax
0x30b1:	nop	dword ptr [rax]
0x30b8:	cmp	byte ptr [rsp + 0xd], 1
0x30bd:	jne	0x31d2


0x3301:	movzx	eax, byte ptr [rsp + 0xf]
0x3306:	and	al, dl
0x3308:	je	0x30b8


0x330e:	mov	rbp, r11
0x3311:	mov	dword ptr [rsp + 8], 2
0x3319:	jmp	0x3a19


0x3718:	cmp	byte ptr [rsp + 0xf], 0
0x371d:	jne	0x3f40


0x3160:	cmp	eax, 5
0x3163:	je	0x36d8


0x3723:	xor	r12d, r12d
0x3726:	xor	eax, eax
0x3728:	mov	ebx, 0x3f
0x372d:	jmp	0x30e9


0x3f40:	mov	rbp, r11
0x3f43:	movzx	eax, byte ptr [rsp + 0xf]
0x3f48:	jmp	0x3a19


0x36d8:	test	byte ptr [rsp + 0x78], 4
0x36dd:	je	0x3700


0x3169:	cmp	eax, 2
0x316c:	mov	ebx, 0x3f
0x3171:	sete	dl
0x3174:	xor	r12d, r12d
0x3177:	xor	eax, eax
0x3179:	jmp	0x30b8


0x3700:	xor	edx, edx
0x3702:	xor	r12d, r12d
0x3705:	xor	eax, eax
0x3707:	mov	ebx, 0x3f
0x370c:	jmp	0x30b8


0x36df:	lea	rcx, [rbp + 2]
0x36e3:	cmp	rcx, r11
0x36e6:	jae	0x3700


0x36e8:	mov	rax, qword ptr [rsp + 0x10]
0x36ed:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x36f2:	je	0x3e82


0x3e82:	movzx	ebx, byte ptr [rax + rcx]
0x3e86:	cmp	bl, 0x3e
0x3e89:	ja	0x3700


0x3e8f:	movabs	rax, 0x7000a38200000000
0x3e99:	bt	rax, rbx
0x3e9d:	jae	0x3700


0x3ea3:	cmp	byte ptr [rsp + 0xf], 0
0x3ea8:	jne	0x4092


0x3eae:	cmp	r13, r15
0x3eb1:	jbe	0x3eb8


0x4092:	mov	rbp, r11
0x4095:	jmp	0x3a30


0x3eb8:	lea	rax, [r15 + 1]
0x3ebc:	cmp	r13, rax
0x3ebf:	jbe	0x3ec7


0x3eb3:	mov	byte ptr [r14 + r15], 0x3f
0x3eb8:	lea	rax, [r15 + 1]
0x3ebc:	cmp	r13, rax
0x3ebf:	jbe	0x3ec7


0x3ec7:	lea	rax, [r15 + 2]
0x3ecb:	cmp	r13, rax
0x3ece:	jbe	0x3ed6


0x3ec1:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3ec7:	lea	rax, [r15 + 2]
0x3ecb:	cmp	r13, rax
0x3ece:	jbe	0x3ed6


0x3ed6:	lea	rax, [r15 + 3]
0x3eda:	cmp	r13, rax
0x3edd:	jbe	0x3ee5


0x3ed0:	mov	byte ptr [r14 + r15 + 2], 0x22
0x3ed6:	lea	rax, [r15 + 3]
0x3eda:	cmp	r13, rax
0x3edd:	jbe	0x3ee5


0x3ee5:	add	r15, 4
0x3ee9:	xor	edx, edx
0x3eeb:	xor	r12d, r12d
0x3eee:	xor	eax, eax
0x3ef0:	mov	rbp, rcx
0x3ef3:	jmp	0x30b8


0x3edf:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x3ee5:	add	r15, 4
0x3ee9:	xor	edx, edx
0x3eeb:	xor	r12d, r12d
0x3eee:	xor	eax, eax
0x3ef0:	mov	rbp, rcx
0x3ef3:	jmp	0x30b8


0x3690:	cmp	byte ptr [rsp + 0xf], 0
0x3695:	jne	0x3f40


0x318e:	mov	byte ptr [rsp + 0x7c], r12b
0x3193:	xor	edx, edx
0x3195:	xor	eax, eax
0x3197:	mov	ebx, 0x27
0x319c:	jmp	0x30b8


0x369b:	test	r13, r13
0x369e:	je	0x3aa0


0x3aa0:	cmp	r13, r15
0x3aa3:	jbe	0x3aaa


0x36a4:	xor	edx, edx
0x36a6:	cmp	qword ptr [rsp + 0x50], 0
0x36ac:	jne	0x3aa0


0x3aaa:	lea	rax, [r15 + 1]
0x3aae:	cmp	r13, rax
0x3ab1:	jbe	0x3ab9


0x3aa5:	mov	byte ptr [r14 + r15], 0x27
0x3aaa:	lea	rax, [r15 + 1]
0x3aae:	cmp	r13, rax
0x3ab1:	jbe	0x3ab9


0x36b2:	mov	qword ptr [rsp + 0x50], r13
0x36b7:	add	r15, 3
0x36bb:	xor	eax, eax
0x36bd:	mov	byte ptr [rsp + 0x7c], r12b
0x36c2:	xor	r8d, r8d
0x36c5:	mov	r13, rdx
0x36c8:	mov	ebx, 0x27
0x36cd:	jmp	0x30e9


0x3ab9:	lea	rax, [r15 + 2]
0x3abd:	cmp	r13, rax
0x3ac0:	jbe	0x40b2


0x3ab3:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x3ab9:	lea	rax, [r15 + 2]
0x3abd:	cmp	r13, rax
0x3ac0:	jbe	0x40b2


0x40b2:	mov	rdx, r13
0x40b5:	mov	r13, qword ptr [rsp + 0x50]
0x40ba:	jmp	0x36b2


0x3ac6:	mov	rdx, r13
0x3ac9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3acf:	mov	r13, qword ptr [rsp + 0x50]
0x3ad4:	jmp	0x36b2


0x31c4:	cmp	byte ptr [rsp + 0xd], 0
0x31c9:	jne	0x3230


0x31cb:	mov	ebx, edx
0x31cd:	xor	r12d, r12d
0x31d0:	xor	eax, eax
0x31d2:	cmp	byte ptr [rsp + 0xf], 0
0x31d7:	jne	0x30cb


0x3230:	xor	r12d, r12d
0x3233:	cmp	dword ptr [rsp + 8], 2
0x3238:	sete	dl
0x323b:	cmp	byte ptr [rsp + 0xf], 0
0x3240:	mov	eax, edx
0x3242:	jne	0x3a98


0x35d0:	cmp	byte ptr [rsp + 0xf], 0
0x35d5:	jne	0x3f40


0x3203:	cmp	byte ptr [rsp + 0xd], 0
0x3208:	je	0x3420


0x35db:	add	rbp, 1
0x35df:	mov	eax, r8d
0x35e2:	xor	r12d, r12d
0x35e5:	mov	ebx, 0x5c
0x35ea:	jmp	0x30fc


0x3420:	mov	edx, 0x5c
0x3425:	mov	ebx, 0x5c
0x342a:	jmp	0x31c4


0x320e:	cmp	byte ptr [rsp + 0xf], 0
0x3213:	je	0x3420


0x3219:	cmp	qword ptr [rsp + 0x18], 0
0x321f:	jne	0x35db


0x3225:	mov	ebx, 0x5c
0x322a:	nop	word ptr [rax + rax]
0x3230:	xor	r12d, r12d
0x3233:	cmp	dword ptr [rsp + 8], 2
0x3238:	sete	dl
0x323b:	cmp	byte ptr [rsp + 0xf], 0
0x3240:	mov	eax, edx
0x3242:	jne	0x3a98


0x32ab:	xor	edx, edx
0x32ad:	test	byte ptr [rsp + 0x78], 1
0x32b2:	je	0x31cb


0x3473:	cmp	dword ptr [rsp + 8], 2
0x3478:	sete	dl
0x347b:	cmp	byte ptr [rsp + 0xf], 0
0x3480:	jne	0x401a


0x32b8:	add	rbp, 1
0x32bc:	jmp	0x2f78


0x3486:	mov	eax, r8d
0x3489:	mov	rcx, r15
0x348c:	xor	eax, 1
0x348f:	and	al, dl
0x3491:	je	0x34c0


0x401a:	movzx	ebx, byte ptr [rsp + 0xf]
0x401f:	mov	rbp, r11
0x4022:	mov	eax, edx
0x4024:	mov	byte ptr [rsp + 0xd], bl
0x4028:	jmp	0x3a19


0x34c0:	cmp	r13, rcx
0x34c3:	jbe	0x34ca


0x3493:	cmp	r13, r15
0x3496:	jbe	0x349d


0x34ca:	cmp	dword ptr [rsp + 8], 2
0x34cf:	lea	r15, [rcx + 1]
0x34d3:	je	0x3ad9


0x34c5:	mov	byte ptr [r14 + rcx], 0x5c
0x34ca:	cmp	dword ptr [rsp + 8], 2
0x34cf:	lea	r15, [rcx + 1]
0x34d3:	je	0x3ad9


0x349d:	lea	rcx, [r15 + 1]
0x34a1:	cmp	r13, rcx
0x34a4:	jbe	0x34ac


0x3498:	mov	byte ptr [r14 + r15], 0x27
0x349d:	lea	rcx, [r15 + 1]
0x34a1:	cmp	r13, rcx
0x34a4:	jbe	0x34ac


0x3ad9:	mov	eax, r12d
0x3adc:	mov	ebx, 0x30
0x3ae1:	xor	r12d, r12d
0x3ae4:	jmp	0x30e9


0x34d9:	lea	rax, [rbp + 1]
0x34dd:	cmp	rax, r11
0x34e0:	jae	0x34fb


0x34ac:	lea	rcx, [r15 + 2]
0x34b0:	cmp	r13, rcx
0x34b3:	ja	0x3ae9


0x34a6:	mov	byte ptr [r14 + r15 + 1], 0x24
0x34ac:	lea	rcx, [r15 + 2]
0x34b0:	cmp	r13, rcx
0x34b3:	ja	0x3ae9


0x34e2:	mov	rax, qword ptr [rsp + 0x10]
0x34e7:	movzx	eax, byte ptr [rax + rbp + 1]
0x34ec:	mov	byte ptr [rsp + 0x28], al
0x34f0:	sub	eax, 0x30
0x34f3:	cmp	al, 9
0x34f5:	jbe	0x3d29


0x34fb:	mov	eax, r12d
0x34fe:	mov	ebx, 0x30
0x3503:	xor	r12d, r12d
0x3506:	jmp	0x30b8


0x34b9:	lea	rcx, [r15 + 3]
0x34bd:	mov	r8d, eax
0x34c0:	cmp	r13, rcx
0x34c3:	jbe	0x34ca


0x3ae9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x3aef:	jmp	0x34b9


0x3d29:	cmp	r13, r15
0x3d2c:	jbe	0x3d33


0x3d33:	lea	rax, [rcx + 2]
0x3d37:	cmp	r13, rax
0x3d3a:	jbe	0x3d42


0x3d2e:	mov	byte ptr [r14 + r15], 0x30
0x3d33:	lea	rax, [rcx + 2]
0x3d37:	cmp	r13, rax
0x3d3a:	jbe	0x3d42


0x3d42:	mov	eax, r12d
0x3d45:	lea	r15, [rcx + 3]
0x3d49:	xor	r12d, r12d
0x3d4c:	mov	ebx, 0x30
0x3d51:	jmp	0x30b8


0x3d3c:	mov	byte ptr [r14 + rcx + 2], 0x30
0x3d42:	mov	eax, r12d
0x3d45:	lea	r15, [rcx + 3]
0x3d49:	xor	r12d, r12d
0x3d4c:	mov	ebx, 0x30
0x3d51:	jmp	0x30b8


0x31b2:	cmp	dword ptr [rsp + 8], 2
0x31b7:	sete	al
0x31ba:	and	al, byte ptr [rsp + 0xf]
0x31be:	jne	0x330e


0x3570:	mov	edx, 0xd
0x3575:	xor	r10d, r10d
0x3578:	mov	ebx, 0x72
0x357d:	jmp	0x31b2


0x3af4:	test	ebx, ebx
0x3af6:	jne	0x2f23


0x3afc:	mov	byte ptr [rsp + 0xd], 1
0x3b01:	test	r13, r13
0x3b04:	jne	0x409a


0x3b0a:	lea	rax, [rip + 0x27cc]
0x3b11:	mov	qword ptr [rsp + 0x50], 0
0x3b1a:	mov	byte ptr [rsp + 0xe], 1
0x3b1f:	mov	byte ptr [rsp + 0x7c], 0
0x3b24:	xor	r12d, r12d
0x3b27:	mov	byte ptr [rsp + 0xf], 0
0x3b2c:	mov	qword ptr [rsp + 0x18], 1
0x3b35:	mov	qword ptr [rsp + 0x48], rax
0x3b3a:	mov	r15d, 1
0x3b40:	mov	dword ptr [rsp + 8], 2
0x3b48:	jmp	0x2f63


0x409a:	mov	byte ptr [rsp + 0xe], 1
0x409f:	xor	eax, eax
0x40a1:	xor	r12d, r12d
0x40a4:	mov	qword ptr [rsp + 0x50], 0
0x40ad:	jmp	0x3654


0x3654:	lea	rbx, [rip + 0x2c82]
0x365b:	mov	byte ptr [r14], 0x27
0x365f:	mov	dword ptr [rsp + 8], 2
0x3667:	mov	r15d, 1
0x366d:	mov	qword ptr [rsp + 0x18], 1
0x3676:	mov	byte ptr [rsp + 0xf], 0
0x367b:	mov	qword ptr [rsp + 0x48], rbx
0x3680:	mov	byte ptr [rsp + 0x7c], al
0x3684:	jmp	0x2f63


0x3b58:	test	r13, r13
0x3b5b:	je	0x3d86


0x3f4d:	lea	rax, [rip + 0x2387]
0x3f54:	mov	byte ptr [rsp + 0xe], 1
0x3f59:	mov	byte ptr [rsp + 0x7c], 0
0x3f5e:	xor	r12d, r12d
0x3f61:	mov	qword ptr [rsp + 0x50], 0
0x3f6a:	mov	byte ptr [rsp + 0xf], 1
0x3f6f:	mov	byte ptr [rsp + 0xd], 1
0x3f74:	mov	qword ptr [rsp + 0x18], 1
0x3f7d:	xor	r15d, r15d
0x3f80:	mov	qword ptr [rsp + 0x48], rax
0x3f85:	jmp	0x2f63


0x3d86:	mov	qword ptr [rsp + 0x50], 0
0x3d8f:	mov	byte ptr [rsp + 0xe], 1
0x3d94:	xor	r12d, r12d
0x3d97:	mov	byte ptr [rsp + 0x7c], 0
0x3d9c:	jmp	0x3b7b


0x3b61:	mov	byte ptr [r14], 0x22
0x3b65:	mov	byte ptr [rsp + 0xe], 1
0x3b6a:	xor	r12d, r12d
0x3b6d:	mov	byte ptr [rsp + 0x7c], 0
0x3b72:	mov	qword ptr [rsp + 0x50], 0
0x3b7b:	lea	rax, [rip + 0x2759]
0x3b82:	mov	byte ptr [rsp + 0xf], 0
0x3b87:	mov	byte ptr [rsp + 0xd], 1
0x3b8c:	mov	qword ptr [rsp + 0x18], 1
0x3b95:	mov	r15d, 1
0x3b9b:	mov	qword ptr [rsp + 0x48], rax
0x3ba0:	jmp	0x2f63


0x3b7b:	lea	rax, [rip + 0x2759]
0x3b82:	mov	byte ptr [rsp + 0xf], 0
0x3b87:	mov	byte ptr [rsp + 0xd], 1
0x3b8c:	mov	qword ptr [rsp + 0x18], 1
0x3b95:	mov	r15d, 1
0x3b9b:	mov	qword ptr [rsp + 0x48], rax
0x3ba0:	jmp	0x2f63


0x3ba5:	lea	rax, [rip + 0x272f]
0x3bac:	mov	byte ptr [rsp + 0xe], 1
0x3bb1:	mov	byte ptr [rsp + 0x7c], 0
0x3bb6:	xor	r12d, r12d
0x3bb9:	mov	qword ptr [rsp + 0x50], 0
0x3bc2:	mov	byte ptr [rsp + 0xf], 1
0x3bc7:	mov	byte ptr [rsp + 0xd], 1
0x3bcc:	mov	qword ptr [rsp + 0x18], 1
0x3bd5:	xor	r15d, r15d
0x3bd8:	mov	qword ptr [rsp + 0x48], rax
0x3bdd:	mov	dword ptr [rsp + 8], 5
0x3be5:	jmp	0x2f63


0x3bea:	mov	byte ptr [rsp + 0xe], 1
0x3bef:	mov	byte ptr [rsp + 0x7c], 0
0x3bf4:	xor	r12d, r12d
0x3bf7:	mov	qword ptr [rsp + 0x50], 0
0x3c00:	mov	byte ptr [rsp + 0xf], 0
0x3c05:	xor	r15d, r15d
0x3c08:	mov	byte ptr [rsp + 0xd], 1
0x3c0d:	mov	qword ptr [rsp + 0x18], 0
0x3c16:	mov	qword ptr [rsp + 0x48], 0
0x3c1f:	jmp	0x2f63


0x3c24:	cmp	dword ptr [rsp + 8], 0xa
0x3c29:	je	0x3c81


0x3c81:	xor	r15d, r15d
0x3c84:	test	ebx, ebx
0x3c86:	je	0x3e4d


0x3c2b:	lea	rsi, [rip + 0x26ad]
0x3c32:	xor	edi, edi
0x3c34:	mov	edx, 5
0x3c39:	call	0x1570


0x3e4d:	mov	rdx, qword ptr [rsp + 0x68]
0x3e52:	movzx	eax, byte ptr [rdx]
0x3e55:	test	al, al
0x3e57:	je	0x3c8c


0x3c8c:	test	ebx, ebx
0x3c8e:	mov	rbx, qword ptr [rsp + 0x60]
0x3c93:	setne	byte ptr [rsp + 0xf]
0x3c98:	xor	r12d, r12d
0x3c9b:	mov	rdi, rbx
0x3c9e:	call	0x1590


0x3e69:	add	r15, 1
0x3e6d:	movzx	eax, byte ptr [rdx + r15]
0x3e72:	test	al, al
0x3e74:	jne	0x3e60


0x3e65:	mov	byte ptr [r14 + r15], al
0x3e69:	add	r15, 1
0x3e6d:	movzx	eax, byte ptr [rdx + r15]
0x3e72:	test	al, al
0x3e74:	jne	0x3e60


0x3e76:	jmp	0x3c8c


0x3e60:	cmp	r13, r15
0x3e63:	jbe	0x3e69


0x3ca3:	mov	qword ptr [rsp + 0x48], rbx
0x3ca8:	mov	qword ptr [rsp + 0x18], rax
0x3cad:	mov	byte ptr [rsp + 0xe], 1
0x3cb2:	mov	byte ptr [rsp + 0x7c], 0
0x3cb7:	mov	qword ptr [rsp + 0x50], 0
0x3cc0:	mov	byte ptr [rsp + 0xd], 1
0x3cc5:	jmp	0x2f63


0x3c3e:	mov	rcx, rax
0x3c41:	mov	qword ptr [rsp + 0x68], rax
0x3c46:	lea	rax, [rip + 0x2692]
0x3c4d:	cmp	rcx, rax
0x3c50:	je	0x3fee


0x3fee:	mov	esi, dword ptr [rsp + 8]
0x3ff2:	mov	rdi, rcx
0x3ff5:	call	0x2da0


0x3c56:	lea	rsi, [rip + 0x2680]
0x3c5d:	xor	edi, edi
0x3c5f:	mov	edx, 5
0x3c64:	call	0x1570


0x3c69:	mov	rcx, rax
0x3c6c:	mov	qword ptr [rsp + 0x60], rax
0x3c71:	lea	rax, [rip + 0x2665]
0x3c78:	cmp	rcx, rax
0x3c7b:	je	0x4004


0x4004:	mov	esi, dword ptr [rsp + 8]
0x4008:	mov	rdi, rcx
0x400b:	call	0x2da0


0x4010:	mov	qword ptr [rsp + 0x60], rax
0x4015:	jmp	0x3c81


0x3ffa:	mov	qword ptr [rsp + 0x68], rax
0x3fff:	jmp	0x3c56


0x3cca:	mov	byte ptr [rsp + 0xe], 1
0x3ccf:	mov	byte ptr [rsp + 0x7c], 0
0x3cd4:	xor	r12d, r12d
0x3cd7:	mov	qword ptr [rsp + 0x50], 0
0x3ce0:	mov	byte ptr [rsp + 0xf], 0
0x3ce5:	xor	r15d, r15d
0x3ce8:	mov	byte ptr [rsp + 0xd], 0
0x3ced:	mov	qword ptr [rsp + 0x18], 0
0x3cf6:	mov	qword ptr [rsp + 0x48], 0
0x3cff:	jmp	0x2f63


0x3d04:	mov	byte ptr [rsp + 0xe], 1
0x3d09:	mov	byte ptr [rsp + 0x7c], 0
0x3d0e:	xor	r12d, r12d
0x3d11:	mov	qword ptr [rsp + 0x50], 0
0x3d1a:	mov	byte ptr [rsp + 0xf], 1
0x3d1f:	mov	byte ptr [rsp + 0xd], 1
0x3d24:	jmp	0x2f43


0x2f43:	lea	rax, [rip + 0x3393]
0x2f4a:	mov	qword ptr [rsp + 0x18], 1
0x2f53:	xor	r15d, r15d
0x2f56:	mov	dword ptr [rsp + 8], 2
0x2f5e:	mov	qword ptr [rsp + 0x48], rax
0x2f63:	xor	r11d, r11d
0x2f66:	mov	rax, rbp
0x2f69:	mov	r8d, r12d
0x2f6c:	mov	rbp, r11
0x2f6f:	mov	r11, rax
0x2f72:	nop	word ptr [rax + rax]
0x2f78:	cmp	r11, rbp
0x2f7b:	setne	r12b
0x2f7f:	cmp	r11, -1
0x2f83:	jne	0x2f92


0x3ef8:	test	ebx, ebx
0x3efa:	je	0x4088


0x4088:	mov	byte ptr [rsp + 0xd], 0
0x408d:	jmp	0x3b01


0x3f00:	lea	rax, [rip + 0x23d6]
0x3f07:	mov	byte ptr [rsp + 0xe], 1
0x3f0c:	mov	byte ptr [rsp + 0x7c], 0
0x3f11:	xor	r12d, r12d
0x3f14:	mov	qword ptr [rsp + 0x50], 0
0x3f1d:	mov	byte ptr [rsp + 0xf], 1
0x3f22:	mov	byte ptr [rsp + 0xd], 0
0x3f27:	mov	qword ptr [rsp + 0x18], 1
0x3f30:	xor	r15d, r15d
0x3f33:	mov	qword ptr [rsp + 0x48], rax
0x3f38:	jmp	0x2f63


0x3b01:	test	r13, r13
0x3b04:	jne	0x409a


0x40c4:	nop	
0x40c6:	nop	word ptr cs:[rax + rax]


0x427b:	nop	dword ptr [rax + rax]


0x42b6:	nop	word ptr cs:[rax + rax]


0x42d1:	nop	dword ptr [rax + rax]
0x42d6:	nop	word ptr cs:[rax + rax]


0x42f1:	nop	dword ptr [rax + rax]
0x42f6:	nop	word ptr cs:[rax + rax]


0x4335:	nop	
0x4336:	nop	word ptr cs:[rax + rax]


0x4355:	nop	
0x4356:	nop	word ptr cs:[rax + rax]


0x4404:	nop	
0x4406:	nop	word ptr cs:[rax + rax]


0x44f3:	nop	dword ptr [rax]
0x44f6:	nop	word ptr cs:[rax + rax]


0x450a:	nop	word ptr [rax + rax]


0x45a3:	nop	dword ptr [rax]
0x45a6:	nop	word ptr cs:[rax + rax]


0x45c3:	nop	dword ptr [rax]
0x45c6:	nop	word ptr cs:[rax + rax]


0x45dc:	nop	dword ptr [rax]


0x45f8:	nop	dword ptr [rax + rax]


0x4614:	nop	
0x4616:	nop	word ptr cs:[rax + rax]


0x46ae:	nop	


0x473a:	nop	word ptr [rax + rax]


0x474c:	nop	dword ptr [rax]


0x475f:	nop	


0x47f8:	nop	dword ptr [rax + rax]


0x4821:	nop	dword ptr [rax + rax]
0x4826:	nop	word ptr cs:[rax + rax]


0x483a:	nop	word ptr [rax + rax]


0x48ce:	nop	


0x4961:	nop	dword ptr [rax + rax]
0x4966:	nop	word ptr cs:[rax + rax]


0x497c:	nop	dword ptr [rax]


0x4997:	nop	word ptr [rax + rax]


0x49b3:	nop	dword ptr [rax]
0x49b6:	nop	word ptr cs:[rax + rax]


0x49cc:	nop	dword ptr [rax]


0x49e4:	nop	
0x49e6:	nop	word ptr cs:[rax + rax]


0x4a03:	nop	dword ptr [rax]
0x4a06:	nop	word ptr cs:[rax + rax]


0x4a28:	nop	dword ptr [rax + rax]


0x4e47:	nop	word ptr [rax + rax]


0x4ee8:	nop	dword ptr [rax + rax]


0x4fc5:	nop	
0x4fc6:	nop	word ptr cs:[rax + rax]


0x506a:	nop	word ptr [rax + rax]


0x5094:	nop	
0x5096:	nop	word ptr cs:[rax + rax]


0x50a2:	nop	dword ptr [rax]
0x50a6:	nop	word ptr cs:[rax + rax]


0x50e6:	nop	word ptr cs:[rax + rax]


0x5114:	nop	
0x5116:	nop	word ptr cs:[rax + rax]


0x51a2:	nop	dword ptr [rax]
0x51a6:	nop	word ptr cs:[rax + rax]


0x51fa:	nop	word ptr [rax + rax]


0x5217:	nop	word ptr [rax + rax]


0x524e:	nop	


0x5278:	nop	dword ptr [rax + rax]


0x5293:	nop	word ptr cs:[rax + rax]
0x529d:	nop	dword ptr [rax]


0x52d5:	nop	word ptr cs:[rax + rax]
0x52df:	nop	


0x5401:	nop	word ptr cs:[rax + rax]
0x540b:	nop	dword ptr [rax + rax]


0x55e8:	mov	rax, rbx
0x55eb:	mul	rsi
0x55ee:	jo	0x57e1


0x57e1:	or	rax, 0xffffffffffffffff
0x57e5:	mov	r8d, 1
0x57eb:	jmp	0x55f7


0x55f4:	xor	r8d, r8d
0x55f7:	mul	rsi
0x55fa:	jo	0x57d2


0x55f7:	mul	rsi
0x55fa:	jo	0x57d2


0x57d2:	mov	r8d, 1
0x57d8:	or	rbx, 0xffffffffffffffff
0x57dc:	jmp	0x5603


0x5600:	mov	rbx, rax
0x5603:	or	ebp, r8d
0x5606:	nop	word ptr cs:[rax + rax]
0x5610:	movsxd	rdi, edi
0x5613:	mov	eax, ebp
0x5615:	add	rcx, rdi
0x5618:	or	eax, 2
0x561b:	mov	qword ptr [r15], rcx
0x561e:	cmp	byte ptr [rcx], 0
0x5621:	mov	qword ptr [r14], rbx
0x5624:	cmovne	ebp, eax
0x5627:	jmp	0x54ed


0x5603:	or	ebp, r8d
0x5606:	nop	word ptr cs:[rax + rax]
0x5610:	movsxd	rdi, edi
0x5613:	mov	eax, ebp
0x5615:	add	rcx, rdi
0x5618:	or	eax, 2
0x561b:	mov	qword ptr [r15], rcx
0x561e:	cmp	byte ptr [rcx], 0
0x5621:	mov	qword ptr [r14], rbx
0x5624:	cmovne	ebp, eax
0x5627:	jmp	0x54ed


0x5637:	mov	edx, 2
0x563c:	mov	rax, rdx
0x563f:	mul	rbx
0x5642:	jo	0x56de


0x56de:	mov	ebp, 1
0x56e3:	or	rbx, 0xffffffffffffffff
0x56e7:	jmp	0x5610


0x5648:	add	rbx, rbx
0x564b:	jmp	0x5610


0x5610:	movsxd	rdi, edi
0x5613:	mov	eax, ebp
0x5615:	add	rcx, rdi
0x5618:	or	eax, 2
0x561b:	mov	qword ptr [r15], rcx
0x561e:	cmp	byte ptr [rcx], 0
0x5621:	mov	qword ptr [r14], rbx
0x5624:	cmovne	ebp, eax
0x5627:	jmp	0x54ed


0x564d:	mov	edx, 0x200
0x5652:	mov	rax, rdx
0x5655:	mul	rbx
0x5658:	jo	0x56de


0x565e:	shl	rbx, 9
0x5662:	jmp	0x5610


0x5664:	mov	r8d, 7
0x566a:	xor	r9d, r9d
0x566d:	nop	dword ptr [rax]
0x5670:	mov	rax, rbx
0x5673:	mul	rsi
0x5676:	mov	rbx, rax
0x5679:	jo	0x580e


0x580e:	mov	r9d, 1
0x5814:	or	rbx, 0xffffffffffffffff
0x5818:	jmp	0x567f


0x567f:	sub	r8d, 1
0x5683:	jne	0x5670


0x5685:	or	ebp, r9d
0x5688:	jmp	0x5610


0x5670:	mov	rax, rbx
0x5673:	mul	rsi
0x5676:	mov	rbx, rax
0x5679:	jo	0x580e


0x568a:	mov	r8d, 8
0x5690:	xor	r9d, r9d
0x5693:	nop	dword ptr [rax + rax]
0x5698:	mov	rax, rbx
0x569b:	mul	rsi
0x569e:	mov	rbx, rax
0x56a1:	jo	0x57f0


0x57f0:	mov	r9d, 1
0x57f6:	or	rbx, 0xffffffffffffffff
0x57fa:	jmp	0x56a7


0x56a7:	sub	r8d, 1
0x56ab:	jne	0x5698


0x56ad:	jmp	0x5685


0x5698:	mov	rax, rbx
0x569b:	mul	rsi
0x569e:	mov	rbx, rax
0x56a1:	jo	0x57f0


0x56af:	mov	r8d, 4
0x56b5:	xor	r9d, r9d
0x56b8:	mov	rax, rbx
0x56bb:	mul	rsi
0x56be:	mov	rbx, rax
0x56c1:	jo	0x57c3


0x57c3:	mov	r9d, 1
0x57c9:	or	rbx, 0xffffffffffffffff
0x57cd:	jmp	0x56c7


0x56c7:	sub	r8d, 1
0x56cb:	jne	0x56b8


0x56cd:	jmp	0x5685


0x56b8:	mov	rax, rbx
0x56bb:	mul	rsi
0x56be:	mov	rbx, rax
0x56c1:	jo	0x57c3


0x56cf:	mov	rax, rbx
0x56d2:	mul	rsi
0x56d5:	mov	rbx, rax
0x56d8:	jno	0x5610


0x57ff:	mov	r9d, 1
0x5805:	or	rbx, 0xffffffffffffffff
0x5809:	jmp	0x5708


0x5708:	sub	r8d, 1
0x570c:	jne	0x56f9


0x570e:	jmp	0x5685


0x56f9:	mov	rax, rbx
0x56fc:	mul	rsi
0x56ff:	mov	rbx, rax
0x5702:	jo	0x57ff


0x5713:	mov	r8d, 6
0x5719:	xor	r9d, r9d
0x571c:	mov	rax, rbx
0x571f:	mul	rsi
0x5722:	mov	rbx, rax
0x5725:	jo	0x57b4


0x57b4:	mov	r9d, 1
0x57ba:	or	rbx, 0xffffffffffffffff
0x57be:	jmp	0x572b


0x572b:	sub	r8d, 1
0x572f:	jne	0x571c


0x5731:	jmp	0x5685


0x571c:	mov	rax, rbx
0x571f:	mul	rsi
0x5722:	mov	rbx, rax
0x5725:	jo	0x57b4


0x5736:	mov	edx, 0x400
0x573b:	mov	rax, rdx
0x573e:	mul	rbx
0x5741:	jo	0x56de


0x5743:	shl	rbx, 0xa
0x5747:	jmp	0x5610


0x574c:	mov	rax, rbx
0x574f:	mul	rsi
0x5752:	jo	0x581d


0x581d:	mov	r8d, 1
0x5823:	or	rax, 0xffffffffffffffff
0x5827:	jmp	0x575b


0x5758:	xor	r8d, r8d
0x575b:	mul	rsi
0x575e:	jno	0x55f7


0x575b:	mul	rsi
0x575e:	jno	0x55f7


0x5764:	mov	r8d, 1
0x576a:	or	rax, 0xffffffffffffffff
0x576e:	jmp	0x55f7


0x582c:	nop	dword ptr [rax]


0x58ab:	nop	dword ptr [rax + rax]


0x5947:	nop	word ptr [rax + rax]


0x59d3:	nop	word ptr cs:[rax + rax]
0x59dd:	nop	dword ptr [rax]


0x5a5d:	nop	dword ptr [rax]


0x5afc:	nop	dword ptr [rax]


0x5b65:	nop	
0x5b66:	nop	word ptr cs:[rax + rax]


0x5b72:	nop	word ptr cs:[rax + rax]
0x5b7c:	nop	dword ptr [rax]


0x3150:	xor	r10d, r10d
0x3153:	mov	eax, dword ptr [rsp + 8]
0x3157:	cmp	eax, 2
0x315a:	je	0x3718


0x3180:	xor	r10d, r10d
0x3183:	cmp	dword ptr [rsp + 8], 2
0x3188:	je	0x3690


0x31a8:	mov	edx, 9
0x31ad:	mov	ebx, 0x74
0x31b2:	cmp	dword ptr [rsp + 8], 2
0x31b7:	sete	al
0x31ba:	and	al, byte ptr [rsp + 0xf]
0x31be:	jne	0x330e


0x31e8:	mov	edx, 8
0x31ed:	mov	ebx, 0x62
0x31f2:	jmp	0x31c4


0x31f8:	cmp	dword ptr [rsp + 8], 2
0x31fd:	je	0x35d0


0x32a0:	cmp	byte ptr [rsp + 0xd], 0
0x32a5:	jne	0x3473


0x32c8:	cmp	dword ptr [rsp + 8], 2
0x32cd:	sete	dl
0x32d0:	xor	eax, eax
0x32d2:	jmp	0x30b8


0x32e0:	mov	edx, 7
0x32e5:	mov	ebx, 0x61
0x32ea:	jmp	0x31c4


0x32f0:	cmp	dword ptr [rsp + 8], 2
0x32f5:	sete	dl
0x32f8:	test	rbp, rbp
0x32fb:	jne	0x30ac


0x3320:	cmp	dword ptr [rsp + 8], 2
0x3325:	sete	dl
0x3328:	xor	r12d, r12d
0x332b:	jmp	0x3301


0x3330:	cmp	dword ptr [rsp + 8], 2
0x3335:	mov	ebx, 0x20
0x333a:	sete	dl
0x333d:	jmp	0x3301


0x3340:	mov	edx, 0xd
0x3345:	mov	ebx, 0x72
0x334a:	jmp	0x31b2


0x3350:	mov	edx, 0xc
0x3355:	mov	ebx, 0x66
0x335a:	jmp	0x31c4


0x3360:	mov	edx, 0xb
0x3365:	mov	ebx, 0x76
0x336a:	jmp	0x31c4


0x3370:	mov	edx, 0xa
0x3375:	mov	ebx, 0x6e
0x337a:	jmp	0x31b2


0x3410:	xor	r10d, r10d
0x3413:	cmp	byte ptr [rsp + 0xd], 0
0x3418:	jne	0x320e


0x3430:	mov	edx, 0xc
0x3435:	xor	r10d, r10d
0x3438:	mov	ebx, 0x66
0x343d:	jmp	0x31c4


0x3448:	mov	edx, 0xa
0x344d:	xor	r10d, r10d
0x3450:	mov	ebx, 0x6e
0x3455:	jmp	0x31b2


0x3460:	mov	ebx, 0x61
0x3465:	jmp	0x3230


0x3470:	xor	r10d, r10d
0x3473:	cmp	dword ptr [rsp + 8], 2
0x3478:	sete	dl
0x347b:	cmp	byte ptr [rsp + 0xf], 0
0x3480:	jne	0x401a


0x3510:	cmp	dword ptr [rsp + 8], 2
0x3515:	mov	r12d, r10d
0x3518:	sete	dl
0x351b:	xor	r10d, r10d
0x351e:	xor	eax, eax
0x3520:	jmp	0x30b8


0x3528:	cmp	dword ptr [rsp + 8], 2
0x352d:	sete	dl
0x3530:	xor	r10d, r10d
0x3533:	jmp	0x32f8


0x3540:	cmp	dword ptr [rsp + 8], 2
0x3545:	sete	dl
0x3548:	xor	r10d, r10d
0x354b:	xor	r12d, r12d
0x354e:	jmp	0x3301


0x3558:	cmp	dword ptr [rsp + 8], 2
0x355d:	mov	r12d, r10d
0x3560:	mov	ebx, 0x20
0x3565:	sete	dl
0x3568:	xor	r10d, r10d
0x356b:	jmp	0x3301


0x3588:	mov	ebx, 0x76
0x358d:	jmp	0x3230


0x3598:	mov	edx, 9
0x359d:	xor	r10d, r10d
0x35a0:	mov	ebx, 0x74
0x35a5:	jmp	0x31b2


0x35b0:	mov	ebx, 0x62
0x35b5:	jmp	0x3230


0x3b50:	test	ebx, ebx
0x3b52:	jne	0x3f4d


0x56f0:	mov	r8d, 5
0x56f6:	xor	r9d, r9d
0x56f9:	mov	rax, rbx
0x56fc:	mul	rsi
0x56ff:	mov	rbx, rax
0x5702:	jo	0x57ff


0x18e8:	nop	dword ptr [rax + rax]


0x18fa:	nop	word ptr [rax + rax]


0x190a:	nop	word ptr [rax + rax]


0x1a4c:	nop	dword ptr [rax]


0x1ae8:	nop	dword ptr [rax + rax]


0x1b13:	nop	dword ptr [rax + rax]


0x1b39:	nop	dword ptr [rax]


0x1c2a:	nop	word ptr [rax + rax]


0x1d2f:	nop	


0x2056:	nop	word ptr cs:[rax + rax]


0x20a7:	nop	word ptr [rax + rax]


0x20f1:	nop	dword ptr [rax]


0x258b:	nop	dword ptr [rax + rax]


0x259c:	nop	dword ptr [rax]


0x25bf:	nop	


0x25df:	nop	


0x25e8:	nop	dword ptr [rax + rax]


0x2625:	nop	dword ptr [rax]


0x270a:	nop	word ptr [rax + rax]


0x2724:	nop	dword ptr [rax]


0x2738:	nop	dword ptr [rax + rax]


0x27a2:	nop	word ptr [rax + rax]


0x2809:	nop	dword ptr [rax]


0x2992:	nop	word ptr [rax + rax]


0x29c3:	nop	dword ptr [rax + rax]


0x29f4:	nop	dword ptr [rax]


0x2a22:	nop	word ptr [rax + rax]


0x2a6e:	nop	


0x2a9c:	nop	dword ptr [rax]


0x2ab8:	nop	dword ptr [rax + rax]


0x2ad5:	nop	dword ptr [rax]


0x2aee:	nop	


0x2ba3:	nop	dword ptr [rax + rax]


0x2bca:	nop	word ptr [rax + rax]


0x2ceb:	nop	dword ptr [rax + rax]


0x2ddc:	nop	dword ptr [rax]


0x2e2d:	nop	dword ptr [rax]


0x3058:	nop	dword ptr [rax + rax]


0x3147:	nop	word ptr [rax + rax]


0x317e:	nop	


0x31a1:	nop	dword ptr [rax]


0x31e2:	nop	word ptr [rax + rax]


0x31f4:	nop	dword ptr [rax]


0x3298:	nop	dword ptr [rax + rax]


0x32c1:	nop	dword ptr [rax]


0x32d7:	nop	word ptr [rax + rax]


0x32ef:	nop	


0x331e:	nop	


0x332d:	nop	dword ptr [rax]


0x333f:	nop	


0x334f:	nop	


0x335f:	nop	


0x336f:	nop	


0x337f:	nop	


0x33ec:	nop	dword ptr [rax]


0x340c:	nop	dword ptr [rax]


0x341e:	nop	


0x342f:	nop	


0x3442:	nop	word ptr [rax + rax]


0x345a:	nop	word ptr [rax + rax]


0x346a:	nop	word ptr [rax + rax]


0x350b:	nop	dword ptr [rax + rax]


0x3525:	nop	dword ptr [rax]


0x3538:	nop	dword ptr [rax + rax]


0x3553:	nop	dword ptr [rax + rax]


0x3582:	nop	word ptr [rax + rax]


0x3592:	nop	word ptr [rax + rax]


0x35aa:	nop	word ptr [rax + rax]


0x35ba:	nop	word ptr [rax + rax]


0x35c8:	nop	dword ptr [rax + rax]


0x35ef:	nop	


0x3689:	nop	dword ptr [rax]


0x36d2:	nop	word ptr [rax + rax]


0x36f8:	nop	dword ptr [rax + rax]


0x3711:	nop	dword ptr [rax]


0x3732:	nop	word ptr [rax + rax]


0x3898:	nop	dword ptr [rax + rax]


0x39ab:	nop	dword ptr [rax + rax]


0x39ce:	nop	


0x3a95:	nop	dword ptr [rax]


0x3b4d:	nop	dword ptr [rax]


0x3d56:	nop	word ptr cs:[rax + rax]


0x3de9:	nop	dword ptr [rax]


0x3e5d:	nop	dword ptr [rax]


0x3f3d:	nop	dword ptr [rax]


0x424b:	nop	dword ptr [rax + rax]


0x4ad6:	nop	word ptr cs:[rax + rax]


0x4b65:	nop	dword ptr [rax]


0x4b86:	nop	word ptr cs:[rax + rax]


0x4be5:	nop	dword ptr [rax]


0x4c21:	nop	dword ptr [rax]


0x4c68:	nop	dword ptr [rax + rax]


0x4cb7:	nop	word ptr [rax + rax]


0x4d14:	nop	dword ptr [rax]


0x4d42:	nop	word ptr [rax + rax]


0x4df6:	nop	word ptr cs:[rax + rax]


0x4e59:	nop	dword ptr [rax]


0x50d2:	nop	word ptr [rax + rax]


0x5159:	nop	dword ptr [rax]


0x5184:	nop	dword ptr [rax]


0x51dd:	nop	dword ptr [rax]


0x53a6:	nop	word ptr cs:[rax + rax]


0x53cf:	nop	


0x5476:	nop	word ptr cs:[rax + rax]


0x54d3:	nop	dword ptr [rax + rax]


0x54e2:	nop	word ptr [rax + rax]


0x5512:	nop	word ptr [rax + rax]


0x551c:	nop	dword ptr [rax]


0x55bb:	nop	dword ptr [rax + rax]


0x56ec:	nop	dword ptr [rax]


0x5773:	nop	dword ptr [rax + rax]


0x5875:	nop	dword ptr [rax]


0x58d3:	nop	dword ptr [rax + rax]


0x58ff:	nop	


0x5a14:	nop	dword ptr [rax]


0x5a31:	nop	dword ptr [rax]


0x5a42:	nop	word ptr [rax + rax]


0x5a9a:	nop	word ptr [rax + rax]


0x5ae6:	nop	word ptr cs:[rax + rax]


