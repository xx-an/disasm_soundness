0x7300:	sub	rsp, 8
0x7304:	add	rsp, 8
0x7308:	ret	


0x72f0:	mov	rdx, qword ptr [rip + 0x203d11]
0x72f7:	xor	esi, esi
0x72f9:	jmp	0x1930


0x72e0:	ret	


0x7270:	push	r15
0x7272:	push	r14
0x7274:	mov	r15, rdx
0x7277:	push	r13
0x7279:	push	r12
0x727b:	lea	r12, [rip + 0x20382e]
0x7282:	push	rbp
0x7283:	lea	rbp, [rip + 0x20382e]
0x728a:	push	rbx
0x728b:	mov	r13d, edi
0x728e:	mov	r14, rsi
0x7291:	sub	rbp, r12
0x7294:	sub	rsp, 8
0x7298:	sar	rbp, 3
0x729c:	call	0x1600


0x7210:	push	r12
0x7212:	push	rbp
0x7213:	mov	r12, rdx
0x7216:	push	rbx
0x7217:	mov	rbp, rdi
0x721a:	mov	rbx, rsi
0x721d:	sub	rsp, 0x10
0x7221:	cmp	rsi, rcx
0x7224:	jne	0x723f


0x7160:	push	r15
0x7162:	push	r14
0x7164:	mov	r15, rdx
0x7167:	push	r13
0x7169:	push	r12
0x716b:	mov	r14, rdi
0x716e:	push	rbp
0x716f:	push	rbx
0x7170:	mov	rbp, rcx
0x7173:	mov	rbx, rsi
0x7176:	sub	rsp, 0x18
0x717a:	cmp	rsi, rcx
0x717d:	jne	0x7192


0x70a0:	push	r15
0x70a2:	push	r14
0x70a4:	mov	r14, rcx
0x70a7:	push	r13
0x70a9:	push	r12
0x70ab:	mov	r13, rsi
0x70ae:	push	rbp
0x70af:	push	rbx
0x70b0:	mov	r12, rdi
0x70b3:	mov	rbp, rdx
0x70b6:	sub	rsp, 8
0x70ba:	call	0x1670


0x7060:	sub	rsp, 8
0x7064:	mov	edi, 0xe
0x7069:	call	0x1860


0x6fe0:	push	r12
0x6fe2:	push	rbp
0x6fe3:	mov	rbp, rdi
0x6fe6:	push	rbx
0x6fe7:	call	0x16a0


0x6f50:	push	r13
0x6f52:	push	r12
0x6f54:	mov	r13, rsi
0x6f57:	push	rbp
0x6f58:	push	rbx
0x6f59:	mov	rbx, rdi
0x6f5c:	mov	r12, rdx
0x6f5f:	sub	rsp, 0x18
0x6f63:	mov	rax, qword ptr fs:[0x28]
0x6f6c:	mov	qword ptr [rsp + 8], rax
0x6f71:	xor	eax, eax
0x6f73:	lea	rax, [rsp + 4]
0x6f78:	test	rdi, rdi
0x6f7b:	cmove	rbx, rax
0x6f7f:	mov	rdi, rbx
0x6f82:	call	0x1740


0x6ef0:	mov	rax, qword ptr [rdi + 8]
0x6ef4:	cmp	qword ptr [rdi + 0x10], rax
0x6ef8:	je	0x6f00


0x6eb0:	test	rdi, rdi
0x6eb3:	push	rbx
0x6eb4:	mov	rbx, rdi
0x6eb7:	je	0x6eca


0x6c30:	push	r12
0x6c32:	push	rbp
0x6c33:	mov	ebp, edi
0x6c35:	push	rbx
0x6c36:	sub	rsp, 0x50
0x6c3a:	mov	rax, qword ptr fs:[0x28]
0x6c43:	mov	qword ptr [rsp + 0x18], rax
0x6c48:	xor	eax, eax
0x6c4a:	lea	rax, [rsp + 0x70]
0x6c4f:	test	esi, esi
0x6c51:	mov	qword ptr [rsp + 0x30], rdx
0x6c56:	mov	qword ptr [rsp + 0x38], rcx
0x6c5b:	mov	qword ptr [rsp + 0x40], r8
0x6c60:	mov	qword ptr [rsp + 8], rax
0x6c65:	lea	rax, [rsp + 0x20]
0x6c6a:	mov	qword ptr [rsp + 0x48], r9
0x6c6f:	mov	dword ptr [rsp], 0x10
0x6c76:	mov	qword ptr [rsp + 0x10], rax
0x6c7b:	je	0x6e82


0x6bb0:	push	r12
0x6bb2:	push	rbp
0x6bb3:	push	rbx
0x6bb4:	mov	rbx, rdi
0x6bb7:	call	0x1830


0x6790:	push	r15
0x6792:	push	r14
0x6794:	push	r13
0x6796:	push	r12
0x6798:	push	rbp
0x6799:	push	rbx
0x679a:	sub	rsp, 0x28
0x679e:	mov	rax, qword ptr fs:[0x28]
0x67a7:	mov	qword ptr [rsp + 0x18], rax
0x67ac:	xor	eax, eax
0x67ae:	cmp	edx, 0x24
0x67b1:	ja	0x6b15


0x6740:	push	r14
0x6742:	push	r13
0x6744:	mov	r14, rcx
0x6747:	push	r12
0x6749:	push	rbp
0x674a:	mov	r12, rdx
0x674d:	push	rbx
0x674e:	mov	rbp, rdi
0x6751:	mov	rbx, rsi
0x6754:	call	0x7210


0x66f0:	push	r14
0x66f2:	push	r13
0x66f4:	mov	r13, rcx
0x66f7:	push	r12
0x66f9:	push	rbp
0x66fa:	mov	r12, rdx
0x66fd:	push	rbx
0x66fe:	mov	rbp, rsi
0x6701:	mov	rbx, rdi
0x6704:	call	0x7160


0x6630:	push	r14
0x6632:	push	r13
0x6634:	mov	r14d, edi
0x6637:	push	r12
0x6639:	push	rbp
0x663a:	mov	r12, rdx
0x663d:	push	rbx
0x663e:	mov	rbx, rsi
0x6641:	lea	rsi, [rip + 0x21b8]
0x6648:	mov	edx, 5
0x664d:	xor	edi, edi
0x664f:	mov	r13, r8
0x6652:	mov	rbp, rcx
0x6655:	call	0x16f0


0x65f0:	lea	rsi, [rip + 0x21f8]
0x65f7:	sub	rsp, 8
0x65fb:	mov	edx, 5
0x6600:	xor	edi, edi
0x6602:	call	0x16f0


0x65d0:	push	rbx
0x65d1:	mov	rbx, rdi
0x65d4:	call	0x1710


0x65a0:	push	rbp
0x65a1:	push	rbx
0x65a2:	mov	rbp, rdi
0x65a5:	mov	rdi, rsi
0x65a8:	mov	rbx, rsi
0x65ab:	sub	rsp, 8
0x65af:	call	0x63a0


0x6570:	mov	rax, rdi
0x6573:	sub	rsp, 8
0x6577:	mul	rsi
0x657a:	seto	dl
0x657d:	test	rax, rax
0x6580:	js	0x6599


0x6550:	push	rbx
0x6551:	mov	rbx, rdi
0x6554:	call	0x63a0


0x6500:	test	rdi, rdi
0x6503:	mov	rax, qword ptr [rsi]
0x6506:	je	0x6530


0x6470:	test	rdi, rdi
0x6473:	mov	r9, rdx
0x6476:	mov	rcx, qword ptr [rsi]
0x6479:	je	0x64b0


0x6440:	mov	rax, rsi
0x6443:	mul	rdx
0x6446:	mov	rsi, rax
0x6449:	seto	al
0x644c:	test	rsi, rsi
0x644f:	js	0x645b


0x6400:	test	rsi, rsi
0x6403:	push	rbx
0x6404:	mov	rbx, rsi
0x6407:	jne	0x640e


0x63f0:	jmp	0x63a0


0x63c0:	mov	rax, rdi
0x63c3:	mul	rsi
0x63c6:	mov	rdi, rax
0x63c9:	seto	al
0x63cc:	test	rdi, rdi
0x63cf:	js	0x63db


0x63a0:	push	rbx
0x63a1:	mov	rbx, rdi
0x63a4:	call	0x1840


0x6320:	push	rbx
0x6321:	lea	rsi, [rip + 0x21ba]
0x6328:	mov	edx, 5
0x632d:	xor	edi, edi
0x632f:	call	0x16f0


0x6240:	push	rbp
0x6241:	push	rbx
0x6242:	mov	r10d, 0x20
0x6248:	xor	r11d, r11d
0x624b:	sub	rsp, 0xb8
0x6252:	mov	rax, qword ptr fs:[0x28]
0x625b:	mov	qword ptr [rsp + 0x78], rax
0x6260:	xor	eax, eax
0x6262:	lea	rax, [rsp + 0xd0]
0x626a:	mov	qword ptr [rsp + 0xa0], r8
0x6272:	lea	rbx, [rsp + 0xd0]
0x627a:	lea	r8, [rsp + 0x20]
0x627f:	mov	qword ptr [rsp + 0xa8], r9
0x6287:	mov	dword ptr [rsp + 8], 0x20
0x628f:	mov	qword ptr [rsp + 0x10], rax
0x6294:	lea	rax, [rsp + 0x80]
0x629c:	xor	r9d, r9d
0x629f:	mov	qword ptr [rsp + 0x18], rax
0x62a4:	mov	rbp, rax
0x62a7:	nop	word ptr [rax + rax]
0x62b0:	cmp	r10d, 0x2f
0x62b4:	ja	0x630c


0x61c0:	sub	rsp, 0x68
0x61c4:	mov	r10, r8
0x61c7:	xor	r9d, r9d
0x61ca:	mov	rax, qword ptr fs:[0x28]
0x61d3:	mov	qword ptr [rsp + 0x58], rax
0x61d8:	xor	eax, eax
0x61da:	mov	r8, rsp
0x61dd:	nop	dword ptr [rax]
0x61e0:	mov	eax, dword ptr [r10]
0x61e3:	cmp	eax, 0x2f
0x61e6:	ja	0x622a


0x61a0:	xor	r9d, r9d
0x61a3:	cmp	qword ptr [r8], 0
0x61a7:	je	0x61bb


0x5d80:	push	r15
0x5d82:	push	r14
0x5d84:	push	r13
0x5d86:	push	r12
0x5d88:	mov	r12, r9
0x5d8b:	push	rbp
0x5d8c:	push	rbx
0x5d8d:	mov	rbp, rdi
0x5d90:	mov	rbx, r8
0x5d93:	sub	rsp, 0x28
0x5d97:	test	rsi, rsi
0x5d9a:	je	0x5eb8


0x5d70:	mov	edx, 3
0x5d75:	xor	esi, esi
0x5d77:	xor	eax, eax
0x5d79:	jmp	0x6c30


0x5d50:	lea	rcx, [rip + 0x2052e9]
0x5d57:	mov	rsi, rdi
0x5d5a:	mov	rdx, -1
0x5d61:	xor	edi, edi
0x5d63:	jmp	0x5410


0x5d30:	lea	rcx, [rip + 0x205309]
0x5d37:	mov	rdx, -1
0x5d3e:	jmp	0x5410


0x5d10:	lea	rcx, [rip + 0x205329]
0x5d17:	mov	rdx, rsi
0x5d1a:	mov	rsi, rdi
0x5d1d:	xor	edi, edi
0x5d1f:	jmp	0x5410


0x5d00:	lea	rcx, [rip + 0x205339]
0x5d07:	jmp	0x5410


0x5ce0:	mov	r8, rcx
0x5ce3:	mov	rcx, rdx
0x5ce6:	mov	rdx, rsi
0x5ce9:	mov	rsi, rdi
0x5cec:	xor	edi, edi
0x5cee:	jmp	0x5c10


0x5cc0:	mov	rcx, rdx
0x5cc3:	mov	r8, -1
0x5cca:	mov	rdx, rsi
0x5ccd:	mov	rsi, rdi
0x5cd0:	xor	edi, edi
0x5cd2:	jmp	0x5c10


0x5cb0:	mov	r8, -1
0x5cb7:	jmp	0x5c10


0x5c10:	sub	rsp, 0x48
0x5c14:	mov	r9, rcx
0x5c17:	mov	rcx, qword ptr [rip + 0x205712]
0x5c1e:	movdqa	xmm0, xmmword ptr [rip + 0x2056da]
0x5c26:	mov	rax, qword ptr fs:[0x28]
0x5c2f:	mov	qword ptr [rsp + 0x38], rax
0x5c34:	xor	eax, eax
0x5c36:	movaps	xmmword ptr [rsp], xmm0
0x5c3a:	test	rsi, rsi
0x5c3d:	mov	qword ptr [rsp + 0x30], rcx
0x5c42:	mov	dword ptr [rsp], 0xa
0x5c49:	movdqa	xmm0, xmmword ptr [rip + 0x2056bf]
0x5c51:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x5c56:	movdqa	xmm0, xmmword ptr [rip + 0x2056c2]
0x5c5e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x5c63:	je	0x5c97


0x5b80:	sub	rsp, 0x48
0x5b84:	mov	rax, rdx
0x5b87:	mov	rdx, qword ptr fs:[0x28]
0x5b90:	mov	qword ptr [rsp + 0x38], rdx
0x5b95:	xor	edx, edx
0x5b97:	cmp	esi, 0xa
0x5b9a:	je	0x5c04


0x5b70:	mov	edx, 0x3a
0x5b75:	jmp	0x5aa0


0x5b50:	mov	edx, 0x3a
0x5b55:	mov	rsi, -1
0x5b5c:	jmp	0x5aa0


0x5b40:	movsx	edx, sil
0x5b44:	mov	rsi, -1
0x5b4b:	jmp	0x5aa0


0x5aa0:	sub	rsp, 0x48
0x5aa4:	mov	ecx, edx
0x5aa6:	mov	rax, qword ptr fs:[0x28]
0x5aaf:	mov	qword ptr [rsp + 0x38], rax
0x5ab4:	xor	eax, eax
0x5ab6:	mov	rax, qword ptr [rip + 0x205873]
0x5abd:	mov	r8, rsp
0x5ac0:	and	ecx, 0x1f
0x5ac3:	movdqa	xmm0, xmmword ptr [rip + 0x205835]
0x5acb:	mov	qword ptr [rsp + 0x30], rax
0x5ad0:	mov	eax, edx
0x5ad2:	movaps	xmmword ptr [rsp], xmm0
0x5ad6:	shr	al, 5
0x5ad9:	movzx	eax, al
0x5adc:	lea	r9, [r8 + rax*4 + 8]
0x5ae1:	movdqa	xmm0, xmmword ptr [rip + 0x205827]
0x5ae9:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x5aee:	movdqa	xmm0, xmmword ptr [rip + 0x20582a]
0x5af6:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x5afb:	mov	edx, dword ptr [r9]
0x5afe:	mov	eax, edx
0x5b00:	shr	eax, cl
0x5b02:	not	eax
0x5b04:	and	eax, 1
0x5b07:	shl	eax, cl
0x5b09:	mov	rcx, r8
0x5b0c:	xor	eax, edx
0x5b0e:	mov	rdx, rsi
0x5b11:	mov	rsi, rdi
0x5b14:	mov	dword ptr [r9], eax
0x5b17:	xor	edi, edi
0x5b19:	call	0x5410


0x5a90:	mov	rcx, rdx
0x5a93:	mov	rdx, rsi
0x5a96:	mov	esi, edi
0x5a98:	xor	edi, edi
0x5a9a:	jmp	0x59f0


0x5a80:	mov	rdx, rsi
0x5a83:	mov	esi, edi
0x5a85:	xor	edi, edi
0x5a87:	jmp	0x5960


0x59f0:	sub	rsp, 0x48
0x59f4:	mov	rax, rdx
0x59f7:	mov	rdx, rcx
0x59fa:	mov	rcx, qword ptr fs:[0x28]
0x5a03:	mov	qword ptr [rsp + 0x38], rcx
0x5a08:	xor	ecx, ecx
0x5a0a:	cmp	esi, 0xa
0x5a0d:	je	0x5a70


0x5960:	sub	rsp, 0x48
0x5964:	mov	rax, rdx
0x5967:	mov	rdx, qword ptr fs:[0x28]
0x5970:	mov	qword ptr [rsp + 0x38], rdx
0x5975:	xor	edx, edx
0x5977:	cmp	esi, 0xa
0x597a:	je	0x59e4


0x5940:	lea	rcx, [rip + 0x2059b9]
0x5947:	mov	rdx, rsi
0x594a:	mov	rsi, rdi
0x594d:	xor	edi, edi
0x594f:	jmp	0x5410


0x5920:	lea	rcx, [rip + 0x2059d9]
0x5927:	mov	rsi, rdi
0x592a:	mov	rdx, -1
0x5931:	xor	edi, edi
0x5933:	jmp	0x5410


0x5910:	lea	rcx, [rip + 0x2059e9]
0x5917:	jmp	0x5410


0x58f0:	lea	rcx, [rip + 0x205a09]
0x58f7:	mov	rdx, -1
0x58fe:	jmp	0x5410


0x5850:	mov	eax, dword ptr [rip + 0x205822]
0x5856:	push	r12
0x5858:	mov	r12, qword ptr [rip + 0x205821]
0x585f:	push	rbp
0x5860:	push	rbx
0x5861:	cmp	eax, 1
0x5864:	jle	0x5891


0x5840:	mov	rcx, rdx
0x5843:	xor	edx, edx
0x5845:	jmp	0x5750


0x5750:	push	r15
0x5752:	push	r14
0x5754:	lea	rax, [rip + 0x205ba5]
0x575b:	push	r13
0x575d:	push	r12
0x575f:	mov	r12, rdx
0x5762:	push	rbp
0x5763:	push	rbx
0x5764:	mov	rbx, rcx
0x5767:	mov	r14, rdi
0x576a:	mov	r15, rsi
0x576d:	sub	rsp, 0x38
0x5771:	test	rcx, rcx
0x5774:	cmove	rbx, rax
0x5778:	xor	ebp, ebp
0x577a:	call	0x1670


0x56d0:	push	r15
0x56d2:	push	r14
0x56d4:	lea	rax, [rip + 0x205c25]
0x56db:	push	r13
0x56dd:	push	r12
0x56df:	mov	r13, rdi
0x56e2:	push	rbp
0x56e3:	push	rbx
0x56e4:	mov	rbx, r8
0x56e7:	mov	r14, rsi
0x56ea:	mov	r15, rdx
0x56ed:	sub	rsp, 0x18
0x56f1:	test	r8, r8
0x56f4:	cmove	rbx, rax
0x56f8:	mov	qword ptr [rsp + 8], rcx
0x56fd:	call	0x1670


0x56a0:	lea	rax, [rip + 0x205c59]
0x56a7:	test	rdi, rdi
0x56aa:	cmove	rdi, rax
0x56ae:	test	rsi, rsi
0x56b1:	mov	dword ptr [rdi], 0xa
0x56b7:	je	0x56c7


0x5680:	lea	rax, [rip + 0x205c79]
0x5687:	test	rdi, rdi
0x568a:	cmove	rdi, rax
0x568e:	mov	eax, dword ptr [rdi + 4]
0x5691:	mov	dword ptr [rdi + 4], esi
0x5694:	ret	


0x5640:	lea	rax, [rip + 0x205cb9]
0x5647:	test	rdi, rdi
0x564a:	mov	ecx, esi
0x564c:	cmove	rdi, rax
0x5650:	mov	eax, esi
0x5652:	and	ecx, 0x1f
0x5655:	shr	al, 5
0x5658:	movzx	eax, al
0x565b:	lea	rdi, [rdi + rax*4 + 8]
0x5660:	mov	esi, dword ptr [rdi]
0x5662:	mov	eax, esi
0x5664:	shr	eax, cl
0x5666:	xor	edx, eax
0x5668:	and	eax, 1
0x566b:	and	edx, 1
0x566e:	shl	edx, cl
0x5670:	xor	edx, esi
0x5672:	mov	dword ptr [rdi], edx
0x5674:	ret	


0x5620:	lea	rax, [rip + 0x205cd9]
0x5627:	test	rdi, rdi
0x562a:	cmove	rdi, rax
0x562e:	mov	dword ptr [rdi], esi
0x5630:	ret	


0x5600:	lea	rax, [rip + 0x205cf9]
0x5607:	test	rdi, rdi
0x560a:	cmove	rdi, rax
0x560e:	mov	eax, dword ptr [rdi]
0x5610:	ret	


0x55c0:	push	r12
0x55c2:	push	rbp
0x55c3:	push	rbx
0x55c4:	mov	rbx, rdi
0x55c7:	call	0x1670


0x5410:	push	r15
0x5412:	push	r14
0x5414:	movsxd	r15, edi
0x5417:	push	r13
0x5419:	push	r12
0x541b:	mov	r14, rdx
0x541e:	push	rbp
0x541f:	push	rbx
0x5420:	mov	rbp, rcx
0x5423:	sub	rsp, 0x28
0x5427:	mov	qword ptr [rsp + 8], rsi
0x542c:	call	0x1670


0x41d0:	push	r15
0x41d2:	push	r14
0x41d4:	mov	r15d, r8d
0x41d7:	push	r13
0x41d9:	push	r12
0x41db:	mov	r14, rdi
0x41de:	push	rbp
0x41df:	push	rbx
0x41e0:	mov	ebx, r9d
0x41e3:	mov	r13, rsi
0x41e6:	mov	rbp, rcx
0x41e9:	and	ebx, 2
0x41ec:	sub	rsp, 0xb8
0x41f3:	mov	rax, qword ptr [rsp + 0xf0]
0x41fb:	mov	qword ptr [rsp + 0x10], rdx
0x4200:	mov	dword ptr [rsp + 8], r8d
0x4205:	mov	dword ptr [rsp + 0x78], r9d
0x420a:	mov	qword ptr [rsp + 0x20], rax
0x420f:	mov	rax, qword ptr [rsp + 0xf8]
0x4217:	mov	qword ptr [rsp + 0x68], rax
0x421c:	mov	rax, qword ptr [rsp + 0x100]
0x4224:	mov	qword ptr [rsp + 0x60], rax
0x4229:	mov	rax, qword ptr fs:[0x28]
0x4232:	mov	qword ptr [rsp + 0xa8], rax
0x423a:	xor	eax, eax
0x423c:	call	0x1700


0x40e0:	push	rbp
0x40e1:	push	rbx
0x40e2:	mov	rbp, rdi
0x40e5:	mov	ebx, esi
0x40e7:	sub	rsp, 8
0x40eb:	call	0x7060


0x4040:	test	rdi, rdi
0x4043:	push	rbx
0x4044:	je	0x40bd


0x3ff0:	test	rdx, rdx
0x3ff3:	je	0x4038


0x3fe0:	mov	rdi, qword ptr [rdi + 0x10]
0x3fe4:	jmp	0x1650


0x3fd0:	mov	edx, 0xa
0x3fd5:	jmp	0x3ec0


0x3ec0:	push	r15
0x3ec2:	push	r14
0x3ec4:	push	r13
0x3ec6:	push	r12
0x3ec8:	push	rbp
0x3ec9:	push	rbx
0x3eca:	sub	rsp, 0x18
0x3ece:	mov	r13, qword ptr [rdi + 0x10]
0x3ed2:	mov	r8, qword ptr [rdi]
0x3ed5:	add	r8, r13
0x3ed8:	test	byte ptr [rsi], 0x10
0x3edb:	jne	0x3fb0


0x3eb0:	pxor	xmm0, xmm0
0x3eb4:	mov	qword ptr [rdi + 0x10], 0
0x3ebc:	movups	xmmword ptr [rdi], xmm0
0x3ebf:	ret	


0x3e50:	sub	rsp, 8
0x3e54:	xor	esi, esi
0x3e56:	call	0x18d0


0x3db0:	push	r12
0x3db2:	push	rbp
0x3db3:	mov	rbp, rsi
0x3db6:	push	rbx
0x3db7:	call	0x1910


0x3d80:	test	rdi, rdi
0x3d83:	je	0x3da0


0x3d70:	jmp	0x17c0


0x3cc0:	push	rbp
0x3cc1:	push	rbx
0x3cc2:	sub	rsp, 8
0x3cc6:	mov	rdi, qword ptr [rip + 0x2073db]
0x3ccd:	call	0x6fe0


0x3cb0:	mov	byte ptr [rip + 0x207529], dil
0x3cb7:	ret	


0x3ca0:	mov	qword ptr [rip + 0x207541], rdi
0x3ca7:	ret	


0x3ae0:	push	r14
0x3ae2:	push	r13
0x3ae4:	mov	r13, rdi
0x3ae7:	push	r12
0x3ae9:	push	rbp
0x3aea:	mov	rbp, rsi
0x3aed:	push	rbx
0x3aee:	sub	rsp, 0x20
0x3af2:	mov	ebx, dword ptr [rcx]
0x3af4:	cmp	ebx, 2
0x3af7:	je	0x3b40


0x36c0:	push	r13
0x36c2:	push	r12
0x36c4:	mov	edx, 5
0x36c9:	push	rbp
0x36ca:	push	rbx
0x36cb:	mov	ebp, edi
0x36cd:	sub	rsp, 0x88
0x36d4:	mov	rbx, qword ptr [rip + 0x207b15]
0x36db:	mov	rax, qword ptr fs:[0x28]
0x36e4:	mov	qword ptr [rsp + 0x78], rax
0x36e9:	xor	eax, eax
0x36eb:	test	edi, edi
0x36ed:	je	0x371d


0x35e0:	push	r12
0x35e2:	push	rbp
0x35e3:	mov	r12d, edx
0x35e6:	push	rbx
0x35e7:	mov	rbx, rsi
0x35ea:	mov	rsi, qword ptr [rsi]
0x35ed:	cmp	rsi, qword ptr [rbx + 8]
0x35f1:	mov	rbp, rdi
0x35f4:	mov	rdi, qword ptr [rbx + 0x10]
0x35f8:	je	0x3620


0x31f0:	push	r15
0x31f2:	push	r14
0x31f4:	mov	r14, rdi
0x31f7:	push	r13
0x31f9:	push	r12
0x31fb:	lea	r12, [rip + 0x207fce]
0x3202:	push	rbp
0x3203:	push	rbx
0x3204:	lea	ebx, [rdx - 1]
0x3207:	mov	rbp, rsi
0x320a:	movsxd	rbx, ebx
0x320d:	sub	rsp, 0x18
0x3211:	mov	r13, qword ptr [rsi]
0x3214:	cmp	qword ptr [r12 + rbx*8], r13
0x3218:	mov	dword ptr [rsp + 0xc], edx
0x321c:	je	0x3500


0x3130:	push	r12
0x3132:	mov	r12, rsi
0x3135:	push	rbp
0x3136:	push	rbx
0x3137:	mov	rax, qword ptr [rdi + 0x18]
0x313b:	mov	rbx, rdi
0x313e:	mov	rsi, qword ptr [rdi + 0x20]
0x3142:	mov	rbp, rdx
0x3145:	mov	rdi, qword ptr [rdi + 0x28]
0x3149:	cmp	rax, rsi
0x314c:	jae	0x3170


0x2fd0:	push	r14
0x2fd2:	push	r13
0x2fd4:	mov	eax, 0x20
0x2fd9:	push	r12
0x2fdb:	mov	r12d, dword ptr [rip + 0x208032]
0x2fe2:	mov	r13, rsi
0x2fe5:	push	rbp
0x2fe6:	push	rbx
0x2fe7:	mov	rbp, rdi
0x2fea:	mov	rbx, qword ptr [rip + 0x20817f]
0x2ff1:	lea	r14, [rip + 0x208128]
0x2ff8:	test	r12d, r12d
0x2ffb:	cmovs	r12d, eax
0x2fff:	test	rbx, rbx
0x3002:	je	0x3070


0x2eb0:	push	r15
0x2eb2:	push	r14
0x2eb4:	mov	r15, rdi
0x2eb7:	push	r13
0x2eb9:	push	r12
0x2ebb:	mov	r12, rdx
0x2ebe:	push	rbp
0x2ebf:	push	rbx
0x2ec0:	sub	rsp, 0x18
0x2ec4:	cmp	byte ptr [rip + 0x2082bd], 0
0x2ecb:	mov	qword ptr [rsp + 8], rsi
0x2ed0:	jne	0x2ed6


0x2e50:	cmp	rdi, rsi
0x2e53:	jae	0x2e80


0x2d40:	push	rbp
0x2d41:	push	rbx
0x2d42:	sub	rsp, 8
0x2d46:	cmp	r8, rdi
0x2d49:	jae	0x2dc8


0x2cf0:	push	r12
0x2cf2:	push	rbp
0x2cf3:	mov	rbp, rsi
0x2cf6:	push	rbx
0x2cf7:	cmp	qword ptr [rdi], 0
0x2cfb:	je	0x2d31


0x2ca0:	push	rbx
0x2ca1:	mov	rbx, qword ptr [rip + 0x2084f8]
0x2ca8:	test	rbx, rbx
0x2cab:	je	0x2cbd


0x2c70:	push	rbx
0x2c71:	mov	rbx, rdi
0x2c74:	mov	rdi, qword ptr [rdi + 0x28]
0x2c78:	call	0x1650


0x2b30:	push	r12
0x2b32:	push	rbp
0x2b33:	mov	rbp, rdi
0x2b36:	push	rbx
0x2b37:	jmp	0x2b99


0x2a90:	push	rbx
0x2a91:	lea	r8, [rip + 0x52c0]
0x2a98:	xor	esi, esi
0x2a9a:	mov	edx, 0xa
0x2a9f:	mov	rbx, rdi
0x2aa2:	sub	rsp, 0x10
0x2aa6:	mov	rcx, rsp
0x2aa9:	mov	rax, qword ptr fs:[0x28]
0x2ab2:	mov	qword ptr [rsp + 8], rax
0x2ab7:	xor	eax, eax
0x2ab9:	call	0x6790


0x2a40:	push	rbp
0x2a41:	push	rbx
0x2a42:	sub	rsp, 8
0x2a46:	mov	rbx, qword ptr [rdi]
0x2a49:	cmp	rbx, -1
0x2a4d:	je	0x2a54


0x2a30:	push	rbp
0x2a31:	mov	rbp, rsp
0x2a34:	pop	rbp
0x2a35:	jmp	0x29a0


0x29f0:	cmp	byte ptr [rip + 0x2086f1], 0
0x29f7:	jne	0x2a28


0x29a0:	lea	rdi, [rip + 0x2086f9]
0x29a7:	lea	rsi, [rip + 0x2086f2]
0x29ae:	push	rbp
0x29af:	sub	rsi, rdi
0x29b2:	mov	rbp, rsp
0x29b5:	sar	rsi, 3
0x29b9:	mov	rax, rsi
0x29bc:	shr	rax, 0x3f
0x29c0:	add	rsi, rax
0x29c3:	sar	rsi, 1
0x29c6:	je	0x29e0


0x2960:	lea	rdi, [rip + 0x208739]
0x2967:	push	rbp
0x2968:	lea	rax, [rip + 0x208731]
0x296f:	cmp	rax, rdi
0x2972:	mov	rbp, rsp
0x2975:	je	0x2990


0x2930:	xor	ebp, ebp
0x2932:	mov	r9, rdx
0x2935:	pop	rsi
0x2936:	mov	rdx, rsp
0x2939:	and	rsp, 0xfffffffffffffff0
0x293d:	push	rax
0x293e:	push	rsp
0x293f:	lea	r8, [rip + 0x499a]
0x2946:	lea	rcx, [rip + 0x4923]
0x294d:	lea	rdi, [rip - 0xfa4]
0x2954:	call	qword ptr [rip + 0x208686]


0x19b0:	push	r15
0x19b2:	push	r14
0x19b4:	push	r13
0x19b6:	push	r12
0x19b8:	push	rbp
0x19b9:	push	rbx
0x19ba:	movsxd	rbp, edi
0x19bd:	mov	rbx, rsi
0x19c0:	sub	rsp, 0x98
0x19c7:	mov	rdi, qword ptr [rsi]
0x19ca:	mov	rax, qword ptr fs:[0x28]
0x19d3:	mov	qword ptr [rsp + 0x88], rax
0x19db:	xor	eax, eax
0x19dd:	mov	dword ptr [rsp + 0x30], 0
0x19e5:	mov	qword ptr [rsp + 0x80], 0
0x19f1:	lea	r15, [rsp + 0x60]
0x19f6:	mov	dword ptr [rsp + 0x34], 0
0x19fe:	call	0x4040


0x1600:	sub	rsp, 8
0x1604:	mov	rax, qword ptr [rip + 0x2099dd]
0x160b:	test	rax, rax
0x160e:	je	0x1612


0x1930:	jmp	qword ptr [rip + 0x20966a]


0x7226:	mov	rdx, rsi
0x7229:	mov	rsi, r12
0x722c:	mov	qword ptr [rsp + 8], rcx
0x7231:	call	0x17e0


0x723f:	add	rsp, 0x10
0x7243:	mov	rdx, r12
0x7246:	mov	rsi, rbx
0x7249:	mov	rdi, rbp
0x724c:	pop	rbx
0x724d:	pop	rbp
0x724e:	pop	r12
0x7250:	jmp	0x70a0


0x717f:	mov	rdx, rsi
0x7182:	mov	rsi, r15
0x7185:	call	0x17e0


0x7192:	lea	r13, [r14 + rbx]
0x7196:	lea	r12, [r15 + rbp]
0x719a:	lea	rcx, [rbp + 1]
0x719e:	lea	rsi, [rbx + 1]
0x71a2:	mov	rdx, r15
0x71a5:	mov	rdi, r14
0x71a8:	movzx	r9d, byte ptr [r13]
0x71ad:	movzx	r8d, byte ptr [r12]
0x71b2:	mov	byte ptr [r13], 0
0x71b7:	mov	byte ptr [r12], 0
0x71bc:	mov	byte ptr [rsp + 0xf], r9b
0x71c1:	mov	byte ptr [rsp + 8], r8b
0x71c6:	call	0x70a0


0x1670:	jmp	qword ptr [rip + 0x2097ca]


0x1860:	jmp	qword ptr [rip + 0x2096d2]


0x16a0:	jmp	qword ptr [rip + 0x2097b2]


0x1740:	jmp	qword ptr [rip + 0x209762]


0x6f00:	mov	rax, qword ptr [rdi + 0x20]
0x6f04:	cmp	qword ptr [rdi + 0x28], rax
0x6f08:	jne	0x6efa


0x6efa:	jmp	0x1900


0x6eca:	mov	rdi, rbx
0x6ecd:	pop	rbx
0x6ece:	jmp	0x1850


0x6eb9:	call	0x1890


0x6e82:	mov	rax, qword ptr [rsp + 0x10]
0x6e87:	xor	esi, esi
0x6e89:	mov	edx, dword ptr [rax + 0x10]
0x6e8c:	xor	eax, eax
0x6e8e:	call	0x16b0


0x6c81:	cmp	esi, 0x406
0x6c87:	jne	0x6cd0


0x1830:	jmp	qword ptr [rip + 0x2096ea]


0x67b7:	lea	rax, [rsp + 0x10]
0x67bc:	mov	r15, rsi
0x67bf:	test	rsi, rsi
0x67c2:	mov	rbp, rdi
0x67c5:	mov	dword ptr [rsp + 8], edx
0x67c9:	mov	r14, rcx
0x67cc:	mov	r13, r8
0x67cf:	cmove	r15, rax
0x67d3:	call	0x1670


0x6b15:	lea	rcx, [rip + 0x1e7c]
0x6b1c:	lea	rsi, [rip + 0x1d55]
0x6b23:	lea	rdi, [rip + 0x1d6e]
0x6b2a:	mov	edx, 0x54
0x6b2f:	call	0x1790


0x16f0:	jmp	qword ptr [rip + 0x20978a]


0x1710:	jmp	qword ptr [rip + 0x20977a]


0x6599:	call	0x65f0


0x6582:	movzx	edx, dl
0x6585:	test	rdx, rdx
0x6588:	jne	0x6599


0x6530:	test	rax, rax
0x6533:	mov	edx, 0x80
0x6538:	cmove	rax, rdx
0x653c:	test	rax, rax
0x653f:	jns	0x6522


0x6508:	movabs	rdx, 0x5555555555555553
0x6512:	cmp	rax, rdx
0x6515:	ja	0x6541


0x64b0:	test	rcx, rcx
0x64b3:	je	0x64d8


0x647b:	xor	edx, edx
0x647d:	movabs	rax, 0x5555555555555554
0x6487:	div	r9
0x648a:	cmp	rax, rcx
0x648d:	jbe	0x64cb


0x645b:	sub	rsp, 8
0x645f:	call	0x65f0


0x6451:	movzx	eax, al
0x6454:	test	rax, rax
0x6457:	jne	0x645b


0x6409:	test	rdi, rdi
0x640c:	jne	0x6428


0x640e:	mov	rsi, rbx
0x6411:	call	0x18b0


0x63db:	sub	rsp, 8
0x63df:	call	0x65f0


0x63d1:	movzx	eax, al
0x63d4:	test	rax, rax
0x63d7:	jne	0x63db


0x1840:	jmp	qword ptr [rip + 0x2096e2]


0x62b6:	mov	eax, r10d
0x62b9:	mov	r11d, 1
0x62bf:	add	r10d, 8
0x62c3:	add	rax, rbp
0x62c6:	mov	rax, qword ptr [rax]
0x62c9:	test	rax, rax
0x62cc:	mov	qword ptr [r8 + r9*8], rax
0x62d0:	je	0x62dc


0x630c:	mov	rax, rbx
0x630f:	add	rbx, 8
0x6313:	jmp	0x62c6


0x61e8:	mov	r11d, eax
0x61eb:	add	r11, qword ptr [r10 + 0x10]
0x61ef:	add	eax, 8
0x61f2:	mov	dword ptr [r10], eax
0x61f5:	mov	rax, qword ptr [r11]
0x61f8:	test	rax, rax
0x61fb:	mov	qword ptr [r8 + r9*8], rax
0x61ff:	je	0x620b


0x622a:	mov	r11, qword ptr [r10 + 8]
0x622e:	lea	rax, [r11 + 8]
0x6232:	mov	qword ptr [r10 + 8], rax
0x6236:	jmp	0x61f5


0x61bb:	jmp	0x5d80


0x5eb8:	mov	r8, rcx
0x5ebb:	mov	rcx, rdx
0x5ebe:	lea	rdx, [rip + 0x25cf]
0x5ec5:	mov	esi, 1
0x5eca:	xor	eax, eax
0x5ecc:	call	0x1960


0x5da0:	mov	r8, rdx
0x5da3:	lea	rdx, [rip + 0x26de]
0x5daa:	mov	r9, rcx
0x5dad:	xor	eax, eax
0x5daf:	mov	rcx, rsi
0x5db2:	mov	esi, 1
0x5db7:	call	0x1960


0x5c97:	call	0x1660


0x5c65:	test	rdx, rdx
0x5c68:	je	0x5c97


0x5c04:	call	0x1660


0x5b9c:	mov	dword ptr [rsp], esi
0x5b9f:	mov	rcx, rsp
0x5ba2:	mov	rdx, -1
0x5ba9:	mov	rsi, rax
0x5bac:	mov	qword ptr [rsp + 4], 0
0x5bb5:	mov	qword ptr [rsp + 0xc], 0x4000000
0x5bbe:	mov	qword ptr [rsp + 0x14], 0
0x5bc7:	mov	qword ptr [rsp + 0x1c], 0
0x5bd0:	mov	qword ptr [rsp + 0x24], 0
0x5bd9:	mov	qword ptr [rsp + 0x2c], 0
0x5be2:	mov	dword ptr [rsp + 0x34], 0
0x5bea:	call	0x5410


0x5a70:	call	0x1660


0x5a0f:	mov	dword ptr [rsp], esi
0x5a12:	mov	rcx, rsp
0x5a15:	mov	rsi, rax
0x5a18:	mov	qword ptr [rsp + 4], 0
0x5a21:	mov	qword ptr [rsp + 0xc], 0
0x5a2a:	mov	qword ptr [rsp + 0x14], 0
0x5a33:	mov	qword ptr [rsp + 0x1c], 0
0x5a3c:	mov	qword ptr [rsp + 0x24], 0
0x5a45:	mov	qword ptr [rsp + 0x2c], 0
0x5a4e:	mov	dword ptr [rsp + 0x34], 0
0x5a56:	call	0x5410


0x59e4:	call	0x1660


0x597c:	mov	dword ptr [rsp], esi
0x597f:	mov	rcx, rsp
0x5982:	mov	rdx, -1
0x5989:	mov	rsi, rax
0x598c:	mov	qword ptr [rsp + 4], 0
0x5995:	mov	qword ptr [rsp + 0xc], 0
0x599e:	mov	qword ptr [rsp + 0x14], 0
0x59a7:	mov	qword ptr [rsp + 0x1c], 0
0x59b0:	mov	qword ptr [rsp + 0x24], 0
0x59b9:	mov	qword ptr [rsp + 0x2c], 0
0x59c2:	mov	dword ptr [rsp + 0x34], 0
0x59ca:	call	0x5410


0x5891:	mov	rdi, qword ptr [r12 + 8]
0x5896:	lea	rbx, [rip + 0x205963]
0x589d:	cmp	rdi, rbx
0x58a0:	je	0x58b9


0x5866:	sub	eax, 2
0x5869:	lea	rbx, [r12 + 0x18]
0x586e:	shl	rax, 4
0x5872:	lea	rbp, [r12 + rax + 0x28]
0x5877:	nop	word ptr [rax + rax]
0x5880:	mov	rdi, qword ptr [rbx]
0x5883:	add	rbx, 0x10
0x5887:	call	0x1650


0x56c7:	sub	rsp, 8
0x56cb:	call	0x1660


0x56b9:	test	rdx, rdx
0x56bc:	je	0x56c7


0x1700:	jmp	qword ptr [rip + 0x209782]


0x40bd:	mov	rcx, qword ptr [rip + 0x20701c]
0x40c4:	lea	rdi, [rip + 0x3e9d]
0x40cb:	mov	edx, 0x37
0x40d0:	mov	esi, 1
0x40d5:	call	0x1950


0x4046:	mov	esi, 0x2f
0x404b:	mov	rbx, rdi
0x404e:	call	0x1770


0x4038:	xor	eax, eax
0x403a:	ret	


0x3ff5:	push	r12
0x3ff7:	push	rbp
0x3ff8:	mov	r12, rsi
0x3ffb:	push	rbx
0x3ffc:	mov	rbp, rdi
0x3fff:	mov	rbx, rdx
0x4002:	call	0x1630


0x1650:	jmp	qword ptr [rip + 0x2097da]


0x3ee1:	mov	r14, rdi
0x3ee4:	mov	rbp, rsi
0x3ee7:	mov	rbx, r13
0x3eea:	movsx	r15d, dl
0x3eee:	jmp	0x3efb


0x3fb0:	add	rsp, 0x18
0x3fb4:	xor	eax, eax
0x3fb6:	pop	rbx
0x3fb7:	pop	rbp
0x3fb8:	pop	r12
0x3fba:	pop	r13
0x3fbc:	pop	r14
0x3fbe:	pop	r15
0x3fc0:	ret	


0x18d0:	jmp	qword ptr [rip + 0x20969a]


0x1910:	jmp	qword ptr [rip + 0x20967a]


0x3da0:	ret	


0x3d85:	push	rbx
0x3d86:	mov	ebx, esi
0x3d88:	call	0x1830


0x17c0:	jmp	qword ptr [rip + 0x209722]


0x3b40:	mov	r14d, dword ptr [rsi]
0x3b43:	xor	eax, eax
0x3b45:	lea	r12, [rip + 0x207664]
0x3b4c:	test	r14d, r14d
0x3b4f:	sete	al
0x3b52:	mov	rdi, qword ptr [r12 + rax*8]
0x3b56:	mov	eax, dword ptr [rsi + rax*4]
0x3b59:	cmp	eax, 1
0x3b5c:	je	0x3c10


0x3af9:	movsxd	rax, ebx
0x3afc:	lea	r12, [rip + 0x2076ad]
0x3b03:	add	ebx, 1
0x3b06:	lea	rdx, [rax*4]
0x3b0e:	shl	rax, 3
0x3b12:	mov	esi, dword ptr [r8]
0x3b15:	mov	dword ptr [rbp + rdx], esi
0x3b19:	mov	qword ptr [r12 + rax], r13
0x3b1d:	mov	dword ptr [rcx], ebx
0x3b1f:	cmp	dword ptr [r8], 3
0x3b23:	jne	0x3b2c


0x371d:	lea	rsi, [rip + 0x3c7c]
0x3724:	xor	edi, edi
0x3726:	call	0x16f0


0x36ef:	lea	rsi, [rip + 0x3c82]
0x36f6:	xor	edi, edi
0x36f8:	call	0x16f0


0x3620:	test	rdi, rdi
0x3623:	je	0x3688


0x35fa:	lea	rsi, [rdi + rsi*8]
0x35fe:	mov	edx, r12d
0x3601:	mov	rdi, rbp
0x3604:	call	0x31f0


0x3500:	lea	rdx, [rip + 0x207c99]
0x3507:	mov	rax, qword ptr [rdx + rbx*8]
0x350b:	mov	qword ptr [rdx + rbx*8], r13
0x350f:	mov	r13, rax
0x3512:	mov	qword ptr [rsi], rax
0x3515:	test	r13, r13
0x3518:	jne	0x322b


0x3222:	test	r13, r13
0x3225:	je	0x351e


0x314e:	mov	rdx, rax
0x3151:	add	rax, 1
0x3155:	shl	rdx, 4
0x3159:	add	rdi, rdx
0x315c:	mov	qword ptr [rdi], r12
0x315f:	mov	qword ptr [rdi + 8], rbp
0x3163:	mov	qword ptr [rbx + 0x18], rax
0x3167:	pop	rbx
0x3168:	pop	rbp
0x3169:	pop	r12
0x316b:	ret	


0x3170:	test	rdi, rdi
0x3173:	je	0x31b0


0x3070:	lea	rax, [rip + 0x2080a9]
0x3077:	cmp	rdi, rax
0x307a:	je	0x3120


0x3004:	mov	eax, dword ptr [rbx]
0x3006:	test	eax, eax
0x3008:	jne	0x305d


0x2ed2:	mov	r12, qword ptr [rdi + 0x18]
0x2ed6:	mov	r14d, dword ptr [rip + 0x208137]
0x2edd:	mov	eax, 0x20
0x2ee2:	test	r14d, r14d
0x2ee5:	cmovs	r14d, eax
0x2ee9:	mov	rax, qword ptr [rsp + 8]
0x2eee:	mov	ebp, r14d
0x2ef1:	cmp	r12, rax
0x2ef4:	mov	r13, rax
0x2ef7:	cmovbe	r13, r12
0x2efb:	test	r13, r13
0x2efe:	je	0x2f49


0x2ed6:	mov	r14d, dword ptr [rip + 0x208137]
0x2edd:	mov	eax, 0x20
0x2ee2:	test	r14d, r14d
0x2ee5:	cmovs	r14d, eax
0x2ee9:	mov	rax, qword ptr [rsp + 8]
0x2eee:	mov	ebp, r14d
0x2ef1:	cmp	r12, rax
0x2ef4:	mov	r13, rax
0x2ef7:	cmovbe	r13, r12
0x2efb:	test	r13, r13
0x2efe:	je	0x2f49


0x2e55:	shl	rdi, 4
0x2e59:	add	rdi, qword ptr [rdx]
0x2e5c:	mov	rdx, qword ptr [rdi + 8]
0x2e60:	test	rdx, rdx
0x2e63:	je	0x2e80


0x2e80:	mov	rdi, qword ptr [rip + 0x208309]
0x2e87:	test	rdi, rdi
0x2e8a:	je	0x2ea0


0x2d4b:	shl	r8, 4
0x2d4f:	add	r8, qword ptr [rsi]
0x2d52:	cmp	r9, rdx
0x2d55:	mov	rbp, qword ptr [r8 + 8]
0x2d59:	jae	0x2e00


0x2dc8:	cmp	r9, rdx
0x2dcb:	jae	0x2df0


0x2d31:	pop	rbx
0x2d32:	mov	rdi, qword ptr [rbp]
0x2d36:	pop	rbp
0x2d37:	pop	r12
0x2d39:	jmp	0x1650


0x2cfd:	mov	r12, rdi
0x2d00:	xor	ebx, ebx
0x2d02:	nop	word ptr [rax + rax]
0x2d08:	mov	rax, qword ptr [rbp]
0x2d0c:	mov	rdi, qword ptr [rax + rbx*8]
0x2d10:	test	rdi, rdi
0x2d13:	je	0x2d22


0x2cbd:	mov	rbx, qword ptr [rip + 0x2084e4]
0x2cc4:	test	rbx, rbx
0x2cc7:	je	0x2ce0


0x2cad:	mov	rdi, rbx
0x2cb0:	call	0x2c70


0x2b99:	lea	rsi, [rip + 0x51b5]
0x2ba0:	mov	rdi, rbp
0x2ba3:	xor	r12d, r12d
0x2ba6:	call	0x1880


0x2a54:	mov	qword ptr [rdi], rsi
0x2a57:	add	rsp, 8
0x2a5b:	pop	rbx
0x2a5c:	pop	rbp
0x2a5d:	ret	


0x2a4f:	cmp	rbx, rsi
0x2a52:	jne	0x2a5e


0x29f9:	cmp	qword ptr [rip + 0x2085f7], 0
0x2a01:	push	rbp
0x2a02:	mov	rbp, rsp
0x2a05:	je	0x2a13


0x2a28:	ret	


0x29e0:	pop	rbp
0x29e1:	ret	


0x29c8:	mov	rax, qword ptr [rip + 0x208621]
0x29cf:	test	rax, rax
0x29d2:	je	0x29e0


0x2990:	pop	rbp
0x2991:	ret	


0x2977:	mov	rax, qword ptr [rip + 0x20865a]
0x297e:	test	rax, rax
0x2981:	je	0x2990




0x1612:	add	rsp, 8
0x1616:	ret	


0x1610:	call	rax




0x17e0:	jmp	qword ptr [rip + 0x209712]










0x6f0a:	cmp	qword ptr [rdi + 0x48], 0
0x6f0f:	jne	0x6efa


0x1900:	jmp	qword ptr [rip + 0x209682]


0x1850:	jmp	qword ptr [rip + 0x2096da]


0x1890:	jmp	qword ptr [rip + 0x2096ba]


0x16b0:	jmp	qword ptr [rip + 0x2097aa]


0x6c89:	mov	rax, qword ptr [rsp + 0x10]
0x6c8e:	cmp	dword ptr [rip + 0x2046a3], 0
0x6c95:	mov	dword ptr [rsp], 0x18
0x6c9c:	mov	r12d, dword ptr [rax + 0x10]
0x6ca0:	mov	edx, r12d
0x6ca3:	js	0x6dd3


0x6cd0:	cmp	esi, 0xb
0x6cd3:	je	0x6d00




0x1790:	jmp	qword ptr [rip + 0x20973a]






0x658a:	call	0x1800


0x6541:	sub	rsp, 8
0x6545:	call	0x65f0


0x6522:	mov	qword ptr [rsi], rax
0x6525:	mov	rsi, rax
0x6528:	jmp	0x6400


0x6517:	mov	rdx, rax
0x651a:	shr	rdx, 1
0x651d:	lea	rax, [rdx + rax + 1]
0x6522:	mov	qword ptr [rsi], rax
0x6525:	mov	rsi, rax
0x6528:	jmp	0x6400


0x64d8:	xor	edx, edx
0x64da:	mov	eax, 0x80
0x64df:	xor	r8d, r8d
0x64e2:	div	r9
0x64e5:	test	rax, rax
0x64e8:	sete	r8b
0x64ec:	lea	rcx, [r8 + rax]
0x64f0:	jmp	0x64b5


0x64b5:	mov	rax, rcx
0x64b8:	mul	r9
0x64bb:	seto	dl
0x64be:	test	rax, rax
0x64c1:	movzx	edx, dl
0x64c4:	js	0x64cb


0x64cb:	sub	rsp, 8
0x64cf:	call	0x65f0


0x648f:	mov	rax, rcx
0x6492:	shr	rax, 1
0x6495:	lea	rcx, [rax + rcx + 1]
0x649a:	mov	qword ptr [rsi], rcx
0x649d:	imul	rcx, r9
0x64a1:	mov	rsi, rcx
0x64a4:	jmp	0x6400


0x6459:	jmp	0x6400


0x6428:	call	0x1650


0x18b0:	jmp	qword ptr [rip + 0x2096aa]


0x63d9:	jmp	0x63a0




0x62dc:	test	r11b, r11b
0x62df:	jne	0x6305


0x62d2:	add	r9, 1
0x62d6:	cmp	r9, 0xa
0x62da:	jne	0x62b0


0x62c6:	mov	rax, qword ptr [rax]
0x62c9:	test	rax, rax
0x62cc:	mov	qword ptr [r8 + r9*8], rax
0x62d0:	je	0x62dc


0x620b:	call	0x5d80


0x6201:	add	r9, 1
0x6205:	cmp	r9, 0xa
0x6209:	jne	0x61e0


0x61f5:	mov	rax, qword ptr [r11]
0x61f8:	test	rax, rax
0x61fb:	mov	qword ptr [r8 + r9*8], rax
0x61ff:	je	0x620b


0x61b0:	add	r9, 1
0x61b4:	cmp	qword ptr [r8 + r9*8], 0
0x61b9:	jne	0x61b0


0x1960:	jmp	qword ptr [rip + 0x209652]


0x1660:	jmp	qword ptr [rip + 0x2097d2]


0x5c6a:	mov	qword ptr [rsp + 0x28], rsi
0x5c6f:	mov	qword ptr [rsp + 0x30], rdx
0x5c74:	mov	rcx, rsp
0x5c77:	mov	rdx, r8
0x5c7a:	mov	rsi, r9
0x5c7d:	call	0x5410


0x58b9:	lea	rbx, [rip + 0x2057d0]
0x58c0:	cmp	r12, rbx
0x58c3:	je	0x58d4


0x58a2:	call	0x1650


0x56be:	mov	qword ptr [rdi + 0x28], rsi
0x56c2:	mov	qword ptr [rdi + 0x30], rdx
0x56c6:	ret	




0x1950:	jmp	qword ptr [rip + 0x20965a]


0x1770:	jmp	qword ptr [rip + 0x20974a]


0x1630:	jmp	qword ptr [rip + 0x2097ea]




0x3efb:	mov	rcx, qword ptr [rbp + 8]
0x3eff:	cmp	rcx, qword ptr [rbp + 0x10]
0x3f03:	jae	0x3f70








0x3c10:	sub	dword ptr [rdx], 1
0x3c13:	mov	qword ptr [rsp + 0x18], r9
0x3c18:	mov	qword ptr [rsp + 0x10], r8
0x3c1d:	mov	qword ptr [rsp + 8], rcx
0x3c22:	call	0x2a90


0x3b62:	jle	0x3c50


0x3b25:	mov	dword ptr [r9], 3
0x3b2c:	add	rsp, 0x20
0x3b30:	pop	rbx
0x3b31:	pop	rbp
0x3b32:	pop	r12
0x3b34:	pop	r13
0x3b36:	pop	r14
0x3b38:	ret	


0x3b2c:	add	rsp, 0x20
0x3b30:	pop	rbx
0x3b31:	pop	rbp
0x3b32:	pop	r12
0x3b34:	pop	r13
0x3b36:	pop	r14
0x3b38:	ret	


0x3688:	test	rsi, rsi
0x368b:	mov	eax, 0x10
0x3690:	mov	edx, 8
0x3695:	cmove	rsi, rax
0x3699:	mov	rax, rdx
0x369c:	xor	ecx, ecx
0x369e:	mul	rsi
0x36a1:	jo	0x36b2


0x3625:	movabs	rax, 0xaaaaaaaaaaaaaa9
0x362f:	cmp	rsi, rax
0x3632:	ja	0x36ad


0x351e:	mov	esi, 0x30
0x3523:	mov	edi, 1
0x3528:	call	0x6570


0x322b:	mov	qword ptr [r13 + 0x18], 0
0x3233:	movsx	edx, byte ptr [rip + 0x207dd6]
0x323a:	mov	rsi, r14
0x323d:	mov	rdi, r13
0x3240:	call	0x3ec0


0x31b0:	test	rsi, rsi
0x31b3:	mov	eax, 8
0x31b8:	mov	edx, 0x10
0x31bd:	cmove	rsi, rax
0x31c1:	mov	rax, rdx
0x31c4:	xor	ecx, ecx
0x31c6:	mul	rsi
0x31c9:	jo	0x31da


0x3175:	movabs	rax, 0x555555555555554
0x317f:	cmp	rsi, rax
0x3182:	ja	0x31d5


0x3120:	mov	rdi, qword ptr [rip + 0x207ef1]
0x3127:	mov	rax, rsi
0x312a:	jmp	0x308a


0x3080:	mov	rdi, qword ptr [rip + 0x207f99]
0x3087:	mov	rax, rbp
0x308a:	mov	rsi, qword ptr [rax + 0x18]
0x308e:	lea	rdx, [rax + 0x28]
0x3092:	call	0x2e50


0x300a:	cmp	rbp, r14
0x300d:	je	0x30f0


0x305d:	cmp	eax, 1
0x3060:	mov	rax, rbp
0x3063:	mov	rdi, qword ptr [rbx + 8]
0x3067:	cmovne	rax, r13
0x306b:	jmp	0x301d


0x2f49:	mov	rbx, qword ptr [rsp + 8]
0x2f4e:	add	rbx, 1
0x2f52:	cmp	r12, rbx
0x2f55:	jbe	0x2f94


0x2f00:	lea	rax, [r15 + 0x28]
0x2f04:	xor	ebx, ebx
0x2f06:	movzx	r14d, r14b
0x2f0a:	mov	qword ptr [rsp], rax
0x2f0e:	nop	
0x2f10:	mov	rdi, qword ptr [rip + 0x208191]
0x2f17:	mov	rax, qword ptr [rdi + 0x28]
0x2f1b:	cmp	rax, qword ptr [rdi + 0x30]
0x2f1f:	jae	0x2fa8


0x2e65:	mov	rcx, qword ptr [rip + 0x20823c]
0x2e6c:	mov	rdi, qword ptr [rdi]
0x2e6f:	mov	esi, 1
0x2e74:	jmp	0x18a0


0x2ea0:	ret	


0x2e8c:	mov	rsi, qword ptr [rip + 0x208215]
0x2e93:	jmp	0x17f0


0x2d5f:	shl	r9, 4
0x2d63:	add	r9, qword ptr [rcx]
0x2d66:	test	rbp, rbp
0x2d69:	mov	rsi, qword ptr [r9]
0x2d6c:	mov	rbx, qword ptr [r9 + 8]
0x2d70:	je	0x2dd8


0x2e00:	xor	eax, eax
0x2e02:	test	rbp, rbp
0x2e05:	setne	al
0x2e08:	add	rsp, 8
0x2e0c:	pop	rbx
0x2e0d:	pop	rbp
0x2e0e:	ret	


0x2dcd:	shl	r9, 4
0x2dd1:	add	r9, qword ptr [rcx]
0x2dd4:	mov	rbx, qword ptr [r9 + 8]
0x2dd8:	xor	eax, eax
0x2dda:	test	rbx, rbx
0x2ddd:	setne	al
0x2de0:	add	rsp, 8
0x2de4:	neg	eax
0x2de6:	pop	rbx
0x2de7:	pop	rbp
0x2de8:	ret	


0x2df0:	xor	eax, eax
0x2df2:	add	rsp, 8
0x2df6:	pop	rbx
0x2df7:	pop	rbp
0x2df8:	ret	


0x2d22:	call	0x1650


0x2d15:	call	0x2c70


0x2ce0:	pop	rbx
0x2ce1:	ret	


0x2cc9:	mov	rdi, rbx
0x2ccc:	call	0x2c70


0x1880:	jmp	qword ptr [rip + 0x2096c2]


0x2a5e:	mov	rbp, rsi
0x2a61:	lea	rsi, [rip + 0x48c0]
0x2a68:	mov	edx, 5
0x2a6d:	xor	edi, edi
0x2a6f:	call	0x16f0


0x2a13:	call	0x2960


0x2a07:	mov	rdi, qword ptr [rip + 0x2085fa]
0x2a0e:	call	0x19a0


0x29d4:	pop	rbp
0x29d5:	jmp	rax


0x2983:	pop	rbp
0x2984:	jmp	rax




0x6f11:	push	r12
0x6f13:	push	rbp
0x6f14:	mov	r12d, edx
0x6f17:	push	rbx
0x6f18:	mov	rbp, rsi
0x6f1b:	mov	rbx, rdi
0x6f1e:	call	0x1830










0x6dd3:	xor	esi, esi
0x6dd5:	xor	eax, eax
0x6dd7:	call	0x16b0


0x6ca9:	xor	eax, eax
0x6cab:	mov	esi, 0x406
0x6cb0:	call	0x16b0


0x6d00:	mov	edi, ebp
0x6d02:	xor	eax, eax
0x6d04:	call	0x16b0


0x6cd5:	jg	0x6d30




0x1800:	jmp	qword ptr [rip + 0x209702]


0x64c6:	test	rdx, rdx
0x64c9:	je	0x649a




0x62e1:	call	0x5d80


0x6305:	mov	dword ptr [rsp + 8], r10d
0x630a:	jmp	0x62e1


0x62b0:	cmp	r10d, 0x2f
0x62b4:	ja	0x630c


0x61e0:	mov	eax, dword ptr [r10]
0x61e3:	cmp	eax, 0x2f
0x61e6:	ja	0x622a






0x58d4:	pop	rbx
0x58d5:	mov	dword ptr [rip + 0x205799], 1
0x58df:	pop	rbp
0x58e0:	pop	r12
0x58e2:	ret	


0x58c5:	mov	rdi, r12
0x58c8:	call	0x1650








0x3f05:	lea	rax, [rcx + 1]
0x3f09:	mov	qword ptr [rbp + 8], rax
0x3f0d:	movzx	r12d, byte ptr [rcx]
0x3f11:	mov	ecx, r12d
0x3f14:	cmp	rbx, r8
0x3f17:	mov	rsi, rbx
0x3f1a:	jne	0x3ef0


0x3f70:	mov	rdi, rbp
0x3f73:	mov	byte ptr [rsp + 0xf], dl
0x3f77:	mov	qword ptr [rsp], r8
0x3f7b:	call	0x1640


0x3c50:	test	eax, eax
0x3c52:	jne	0x3b95


0x3b68:	cmp	eax, 2
0x3b6b:	je	0x3bc0


0x36b2:	mov	ecx, 1
0x36b7:	jmp	0x36a3


0x36a3:	test	rax, rax
0x36a6:	js	0x36ad


0x3634:	mov	rax, rsi
0x3637:	shr	rax, 1
0x363a:	lea	rsi, [rsi + rax + 1]
0x363f:	mov	qword ptr [rbx + 8], rsi
0x3643:	shl	rsi, 3
0x3647:	call	0x6400


0x36ad:	call	0x65f0


0x31da:	mov	ecx, 1
0x31df:	jmp	0x31cb


0x31cb:	test	rax, rax
0x31ce:	js	0x31d5


0x3184:	mov	rax, rsi
0x3187:	shr	rax, 1
0x318a:	lea	rsi, [rsi + rax + 1]
0x318f:	mov	qword ptr [rbx + 0x20], rsi
0x3193:	shl	rsi, 4
0x3197:	call	0x6400


0x31d5:	call	0x65f0


0x308a:	mov	rsi, qword ptr [rax + 0x18]
0x308e:	lea	rdx, [rax + 0x28]
0x3092:	call	0x2e50


0x30f0:	mov	rdi, qword ptr [rip + 0x207f21]
0x30f7:	mov	rax, r13
0x30fa:	jmp	0x301d


0x3013:	mov	rdi, qword ptr [rip + 0x208006]
0x301a:	mov	rax, rbp
0x301d:	mov	rsi, qword ptr [rax + 0x18]
0x3021:	lea	rdx, [rax + 0x28]
0x3025:	call	0x2e50


0x301d:	mov	rsi, qword ptr [rax + 0x18]
0x3021:	lea	rdx, [rax + 0x28]
0x3025:	call	0x2e50


0x2f94:	add	rsp, 0x18
0x2f98:	pop	rbx
0x2f99:	pop	rbp
0x2f9a:	pop	r12
0x2f9c:	pop	r13
0x2f9e:	pop	r14
0x2fa0:	pop	r15
0x2fa2:	ret	


0x2f57:	lea	r13, [r15 + 0x28]
0x2f5b:	movzx	r14d, bpl
0x2f5f:	nop	
0x2f60:	mov	rdi, qword ptr [rip + 0x208141]
0x2f67:	mov	rax, qword ptr [rdi + 0x28]
0x2f6b:	cmp	rax, qword ptr [rdi + 0x30]
0x2f6f:	jae	0x2fb8


0x2f25:	lea	rdx, [rax + 1]
0x2f29:	mov	qword ptr [rdi + 0x28], rdx
0x2f2d:	mov	byte ptr [rax], bpl
0x2f30:	mov	rsi, qword ptr [r15 + 0x18]
0x2f34:	mov	rdx, qword ptr [rsp]
0x2f38:	mov	rdi, rbx
0x2f3b:	add	rbx, 1
0x2f3f:	call	0x2e50


0x2fa8:	mov	esi, r14d
0x2fab:	call	0x1760


0x18a0:	jmp	qword ptr [rip + 0x2096b2]


0x17f0:	jmp	qword ptr [rip + 0x20970a]


0x2dd8:	xor	eax, eax
0x2dda:	test	rbx, rbx
0x2ddd:	setne	al
0x2de0:	add	rsp, 8
0x2de4:	neg	eax
0x2de6:	pop	rbx
0x2de7:	pop	rbp
0x2de8:	ret	


0x2d72:	test	rbx, rbx
0x2d75:	je	0x2e43




0x19a0:	jmp	qword ptr [rip + 0x209652]


0x6cd7:	cmp	esi, 4
0x6cda:	je	0x6db0


0x6d30:	cmp	esi, 0x407
0x6d36:	jg	0x6d80




0x649a:	mov	qword ptr [rsi], rcx
0x649d:	imul	rcx, r9
0x64a1:	mov	rsi, rcx
0x64a4:	jmp	0x6400


0x3f1c:	mov	rbx, qword ptr [r14]
0x3f1f:	mov	rsi, r14
0x3f22:	mov	rdi, r13
0x3f25:	mov	byte ptr [rsp + 0xf], dl
0x3f29:	mov	byte ptr [rsp], cl
0x3f2c:	call	0x6500


0x3ef0:	cmp	r12d, r15d
0x3ef3:	lea	rbx, [rsi + 1]
0x3ef7:	mov	byte ptr [rsi], cl
0x3ef9:	je	0x3f56


0x1640:	jmp	qword ptr [rip + 0x2097e2]


0x3c58:	mov	rsi, r13
0x3c5b:	mov	edi, 4
0x3c60:	call	0x5a80


0x3b95:	test	r14d, r14d
0x3b98:	je	0x3c00


0x3bc0:	sub	dword ptr [rdx + 4], 1
0x3bc4:	mov	qword ptr [rsp + 0x18], r9
0x3bc9:	mov	qword ptr [rsp + 0x10], r8
0x3bce:	mov	qword ptr [rsp + 8], rcx
0x3bd3:	call	0x2a90


0x3b6d:	cmp	eax, 3
0x3b70:	jne	0x3b95


0x36a8:	test	rcx, rcx
0x36ab:	je	0x363f


0x31d0:	test	rcx, rcx
0x31d3:	je	0x318f


0x2f71:	lea	rdx, [rax + 1]
0x2f75:	mov	qword ptr [rdi + 0x28], rdx
0x2f79:	mov	byte ptr [rax], bpl
0x2f7c:	mov	rsi, qword ptr [r15 + 0x18]
0x2f80:	mov	rdi, rbx
0x2f83:	mov	rdx, r13
0x2f86:	add	rbx, 1
0x2f8a:	call	0x2e50


0x2fb8:	mov	esi, r14d
0x2fbb:	call	0x1760


0x1760:	jmp	qword ptr [rip + 0x209752]






0x2e43:	mov	eax, 1
0x2e48:	jmp	0x2df2


0x2d7b:	cmp	byte ptr [rip + 0x20837f], 0
0x2d82:	mov	rdi, qword ptr [r8]
0x2d85:	jne	0x2e10


0x6db0:	mov	eax, dword ptr [rsp]
0x6db3:	cmp	eax, 0x2f
0x6db6:	ja	0x6ea4


0x6ce0:	jg	0x6da0


0x6d38:	cmp	esi, 0x406
0x6d3e:	jge	0x6db0


0x6d80:	cmp	esi, 0x409
0x6d86:	je	0x6db0


0x3f56:	sub	rbx, r13
0x3f59:	mov	rax, r14
0x3f5c:	mov	qword ptr [r14 + 8], rbx
0x3f60:	add	rsp, 0x18
0x3f64:	pop	rbx
0x3f65:	pop	rbp
0x3f66:	pop	r12
0x3f68:	pop	r13
0x3f6a:	pop	r14
0x3f6c:	pop	r15
0x3f6e:	ret	




0x3c00:	mov	eax, 8
0x3c05:	mov	edx, 4
0x3c0a:	jmp	0x3b12


0x3b9a:	mov	eax, dword ptr [rbp + 4]
0x3b9d:	mov	edx, 4
0x3ba2:	mov	dword ptr [rbp], eax
0x3ba5:	mov	rax, qword ptr [rip + 0x20760c]
0x3bac:	mov	qword ptr [rip + 0x2075fd], rax
0x3bb3:	mov	eax, 8
0x3bb8:	jmp	0x3b12


0x3b72:	mov	qword ptr [rsp + 0x18], r9
0x3b77:	mov	qword ptr [rsp + 0x10], r8
0x3b7c:	mov	qword ptr [rsp + 8], rcx
0x3b81:	call	0x2b30


0x363f:	mov	qword ptr [rbx + 8], rsi
0x3643:	shl	rsi, 3
0x3647:	call	0x6400


0x318f:	mov	qword ptr [rbx + 0x20], rsi
0x3193:	shl	rsi, 4
0x3197:	call	0x6400




0x2df2:	add	rsp, 8
0x2df6:	pop	rbx
0x2df7:	pop	rbp
0x2df8:	ret	


0x2d8b:	cmp	byte ptr [rip + 0x20840c], 0
0x2d92:	jne	0x2e28


0x2e10:	cmp	rbp, rbx
0x2e13:	mov	rdx, rbx
0x2e16:	cmovbe	rdx, rbp
0x2e1a:	call	0x3ff0


0x6dbc:	add	rax, qword ptr [rsp + 0x10]
0x6dc1:	mov	edx, dword ptr [rax]
0x6dc3:	mov	edi, ebp
0x6dc5:	xor	eax, eax
0x6dc7:	call	0x16b0


0x6ea4:	mov	rax, qword ptr [rsp + 8]
0x6ea9:	jmp	0x6dc1


0x6ce6:	cmp	esi, 2
0x6ce9:	je	0x6db0


0x6da0:	cmp	esi, 9
0x6da3:	je	0x6d00


0x6d40:	cmp	esi, 0x401
0x6d46:	je	0x6d00


0x6d88:	jl	0x6d00


0x3b12:	mov	esi, dword ptr [r8]
0x3b15:	mov	dword ptr [rbp + rdx], esi
0x3b19:	mov	qword ptr [r12 + rax], r13
0x3b1d:	mov	dword ptr [rcx], ebx
0x3b1f:	cmp	dword ptr [r8], 3
0x3b23:	jne	0x3b2c


0x2d98:	cmp	rbp, rbx
0x2d9b:	mov	rdx, rbx
0x2d9e:	cmovbe	rdx, rbp
0x2da2:	call	0x17e0


0x2e28:	add	rsp, 8
0x2e2c:	mov	rcx, rbx
0x2e2f:	mov	rdx, rsi
0x2e32:	pop	rbx
0x2e33:	mov	rsi, rbp
0x2e36:	pop	rbp
0x2e37:	jmp	0x66f0


0x6dc1:	mov	edx, dword ptr [rax]
0x6dc3:	mov	edi, ebp
0x6dc5:	xor	eax, eax
0x6dc7:	call	0x16b0


0x6cef:	jg	0x6d00


0x6da9:	jg	0x6db0


0x6d48:	cmp	esi, 0x402
0x6d4e:	je	0x6db0


0x6d8e:	cmp	esi, 0x40a
0x6d94:	jne	0x6d58


0x6cf1:	cmp	esi, 1
0x6cf4:	jne	0x6d58


0x6dab:	cmp	esi, 8
0x6dae:	jne	0x6d58


0x6d50:	cmp	esi, 0x400
0x6d56:	je	0x6db0


0x6d96:	jmp	0x6d00


0x6d58:	mov	eax, dword ptr [rsp]
0x6d5b:	cmp	eax, 0x2f
0x6d5e:	ja	0x6e9a


0x6d64:	add	rax, qword ptr [rsp + 0x10]
0x6d69:	mov	rdx, qword ptr [rax]
0x6d6c:	mov	edi, ebp
0x6d6e:	xor	eax, eax
0x6d70:	call	0x16b0


0x6e9a:	mov	rax, qword ptr [rsp + 8]
0x6e9f:	jmp	0x6d69


0x6d69:	mov	rdx, qword ptr [rax]
0x6d6c:	mov	edi, ebp
0x6d6e:	xor	eax, eax
0x6d70:	call	0x16b0


0x2e1f:	jmp	0x2da7


0x2da7:	test	eax, eax
0x2da9:	jne	0x2df2


0x2dab:	cmp	rbp, rbx
0x2dae:	jb	0x2e3c


0x2e3c:	mov	eax, 0xffffffff
0x2e41:	jmp	0x2df2


0x2db4:	setne	al
0x2db7:	add	rsp, 8
0x2dbb:	movzx	eax, al
0x2dbe:	pop	rbx
0x2dbf:	pop	rbp
0x2dc0:	ret	


0x2a18:	mov	byte ptr [rip + 0x2086c9], 1
0x2a1f:	pop	rbp
0x2a20:	ret	


0x2f8f:	cmp	r12, rbx
0x2f92:	jne	0x2f60


0x2f60:	mov	rdi, qword ptr [rip + 0x208141]
0x2f67:	mov	rax, qword ptr [rdi + 0x28]
0x2f6b:	cmp	rax, qword ptr [rdi + 0x30]
0x2f6f:	jae	0x2fb8


0x2f44:	cmp	rbx, r13
0x2f47:	jne	0x2f10


0x2f10:	mov	rdi, qword ptr [rip + 0x208191]
0x2f17:	mov	rax, qword ptr [rdi + 0x28]
0x2f1b:	cmp	rax, qword ptr [rdi + 0x30]
0x2f1f:	jae	0x2fa8


0x302a:	mov	rbx, qword ptr [rbx + 0x10]
0x302e:	test	rbx, rbx
0x3031:	je	0x30c3


0x30c3:	mov	rdi, qword ptr [rip + 0x207fde]
0x30ca:	movzx	edx, byte ptr [rip + 0x207f3f]
0x30d1:	mov	rax, qword ptr [rdi + 0x28]
0x30d5:	cmp	rax, qword ptr [rdi + 0x30]
0x30d9:	jae	0x3110


0x3037:	mov	rdi, qword ptr [rip + 0x20806a]
0x303e:	mov	rax, qword ptr [rdi + 0x28]
0x3042:	cmp	rax, qword ptr [rdi + 0x30]
0x3046:	jae	0x3100


0x30db:	lea	rcx, [rax + 1]
0x30df:	mov	qword ptr [rdi + 0x28], rcx
0x30e3:	mov	byte ptr [rax], dl
0x30e5:	pop	rbx
0x30e6:	pop	rbp
0x30e7:	pop	r12
0x30e9:	pop	r13
0x30eb:	pop	r14
0x30ed:	ret	


0x3110:	pop	rbx
0x3111:	pop	rbp
0x3112:	pop	r12
0x3114:	pop	r13
0x3116:	pop	r14
0x3118:	movzx	esi, dl
0x311b:	jmp	0x1760


0x304c:	lea	rdx, [rax + 1]
0x3050:	mov	qword ptr [rdi + 0x28], rdx
0x3054:	mov	byte ptr [rax], r12b
0x3057:	mov	eax, dword ptr [rbx]
0x3059:	test	eax, eax
0x305b:	je	0x300a


0x3100:	movzx	esi, r12b
0x3104:	call	0x1760


0x3097:	mov	rdx, qword ptr [rip + 0x2080e2]
0x309e:	mov	rsi, qword ptr [rip + 0x207f7b]
0x30a5:	mov	rdi, rbp
0x30a8:	call	0x2eb0


0x30ad:	mov	rdx, qword ptr [rip + 0x2080c4]
0x30b4:	mov	rsi, qword ptr [rip + 0x207f5d]
0x30bb:	mov	rdi, r13
0x30be:	call	0x2eb0


0x3245:	test	rax, rax
0x3248:	je	0x34d0


0x34d0:	test	byte ptr [r14], 0x20
0x34d4:	jne	0x35a6


0x324e:	lea	rax, [rip + 0x207f6b]
0x3255:	mov	r14, qword ptr [r13 + 0x10]
0x3259:	add	qword ptr [rax + rbx*8], 1
0x325e:	mov	rax, qword ptr [r13 + 8]
0x3262:	lea	r15, [rax - 1]
0x3266:	lea	rbp, [r14 + r15]
0x326a:	cmp	r14, rbp
0x326d:	je	0x3351


0x34da:	xor	eax, eax
0x34dc:	test	r13, r13
0x34df:	je	0x3469


0x35a6:	lea	rsi, [rip + 0x47c8]
0x35ad:	mov	edx, 5
0x35b2:	xor	edi, edi
0x35b4:	call	0x16f0


0x3351:	mov	rax, qword ptr [r12 + rbx*8]
0x3355:	test	rax, rax
0x3358:	je	0x3460


0x3273:	mov	esi, dword ptr [rip + 0x207d9b]
0x3279:	test	esi, esi
0x327b:	js	0x3286


0x3469:	add	rsp, 0x18
0x346d:	pop	rbx
0x346e:	pop	rbp
0x346f:	pop	r12
0x3471:	pop	r13
0x3473:	pop	r14
0x3475:	pop	r15
0x3477:	ret	


0x34e1:	mov	rdi, r13
0x34e4:	mov	byte ptr [rsp], al
0x34e7:	call	0x2c70


0x3460:	mov	qword ptr [r12 + rbx*8], r13
0x3464:	mov	eax, 1
0x3469:	add	rsp, 0x18
0x346d:	pop	rbx
0x346e:	pop	rbp
0x346f:	pop	r12
0x3471:	pop	r13
0x3473:	pop	r14
0x3475:	pop	r15
0x3477:	ret	


0x335e:	mov	edx, dword ptr [rip + 0x207dec]
0x3364:	cmp	edx, 2
0x3367:	je	0x3460


0x3286:	test	esi, esi
0x3288:	jns	0x3343


0x327d:	cmp	esi, 0xa
0x3280:	jne	0x34a3


0x336d:	cmp	edx, 1
0x3370:	je	0x337f


0x328e:	call	0x1990


0x3343:	mov	rdx, r15
0x3346:	mov	rsi, r14
0x3349:	mov	rdi, r13
0x334c:	call	0x3130


0x34a3:	mov	r15, rbp
0x34a6:	mov	rdi, r14
0x34a9:	sub	r15, r14
0x34ac:	mov	rdx, r15
0x34af:	call	0x17d0


0x337f:	lea	rbp, [rip + 0x207e12]
0x3386:	cmp	byte ptr [rbp + rbx], 0
0x338b:	jne	0x3460


0x3372:	cmp	byte ptr [rip + 0x207e21], 0
0x3379:	je	0x3460


0x1990:	jmp	qword ptr [rip + 0x20963a]


0x17d0:	jmp	qword ptr [rip + 0x20971a]


0x3391:	cmp	dword ptr [rsp + 0xc], 1
0x3396:	mov	r8, qword ptr [rip + 0x207c83]
0x339d:	lea	rcx, [r13 + 0x28]
0x33a1:	cmovne	r8, qword ptr [rip + 0x207c6f]
0x33a9:	mov	rdx, qword ptr [r13 + 0x18]
0x33ad:	lea	rsi, [rax + 0x28]
0x33b1:	mov	rdi, qword ptr [rax + 0x18]
0x33b5:	mov	r9, r8
0x33b8:	call	0x2d40






0x33bd:	test	eax, eax
0x33bf:	jle	0x3460


0x33c5:	mov	rax, qword ptr [r13 + 8]
0x33c9:	xor	r9d, r9d
0x33cc:	mov	r14, qword ptr [r13 + 0x10]
0x33d0:	test	rax, rax
0x33d3:	je	0x33f7


0x33f7:	lea	rax, [rip + 0x207dc2]
0x33fe:	lea	rsi, [rip + 0x497b]
0x3405:	xor	edi, edi
0x3407:	mov	edx, 5
0x340c:	mov	dword ptr [rsp + 0xc], r9d
0x3411:	mov	r15, qword ptr [rax + rbx*8]
0x3415:	lea	rax, [rip + 0x207d94]
0x341c:	mov	rcx, qword ptr [rax + rbx*8]
0x3420:	mov	qword ptr [rsp], rcx
0x3424:	call	0x16f0


0x33d5:	cmp	byte ptr [r14 + rax - 1], 0xa
0x33db:	lea	rdx, [rax - 1]
0x33df:	je	0x358e


0x358e:	cmp	rdx, 0x7fffffff
0x3595:	mov	eax, 0x7fffffff
0x359a:	cmovbe	rax, rdx
0x359e:	mov	r9, rax
0x35a1:	jmp	0x33f7


0x33e5:	cmp	rax, 0x7fffffff
0x33eb:	mov	edx, 0x7fffffff
0x33f0:	cmovbe	rdx, rax
0x33f4:	mov	r9, rdx
0x33f7:	lea	rax, [rip + 0x207dc2]
0x33fe:	lea	rsi, [rip + 0x497b]
0x3405:	xor	edi, edi
0x3407:	mov	edx, 5
0x340c:	mov	dword ptr [rsp + 0xc], r9d
0x3411:	mov	r15, qword ptr [rax + rbx*8]
0x3415:	lea	rax, [rip + 0x207d94]
0x341c:	mov	rcx, qword ptr [rax + rbx*8]
0x3420:	mov	qword ptr [rsp], rcx
0x3424:	call	0x16f0


0x3609:	test	al, al
0x360b:	je	0x3611


0x3611:	pop	rbx
0x3612:	pop	rbp
0x3613:	pop	r12
0x3615:	ret	


0x360d:	add	qword ptr [rbx], 1
0x3611:	pop	rbx
0x3612:	pop	rbp
0x3613:	pop	r12
0x3615:	ret	


0x72a1:	test	rbp, rbp
0x72a4:	je	0x72c6


0x72c6:	add	rsp, 8
0x72ca:	pop	rbx
0x72cb:	pop	rbp
0x72cc:	pop	r12
0x72ce:	pop	r13
0x72d0:	pop	r14
0x72d2:	pop	r15
0x72d4:	ret	


0x72a6:	xor	ebx, ebx
0x72a8:	nop	dword ptr [rax + rax]
0x72b0:	mov	rdx, r15
0x72b3:	mov	rsi, r14
0x72b6:	mov	edi, r13d
0x72b9:	call	qword ptr [r12 + rbx*8]


0x34b4:	test	rax, rax
0x34b7:	jne	0x3480


0x34b9:	mov	rdx, r15
0x34bc:	mov	rsi, r14
0x34bf:	mov	rdi, r13
0x34c2:	call	0x3130


0x3480:	mov	rdx, rax
0x3483:	mov	rsi, r14
0x3486:	mov	rdi, r13
0x3489:	sub	rdx, r14
0x348c:	mov	qword ptr [rsp], rax
0x3490:	call	0x3130


0x3495:	mov	rax, qword ptr [rsp]
0x3499:	mov	esi, dword ptr [rip + 0x207b75]
0x349f:	lea	r14, [rax + 1]
0x34a3:	mov	r15, rbp
0x34a6:	mov	rdi, r14
0x34a9:	sub	r15, r14
0x34ac:	mov	rdx, r15
0x34af:	call	0x17d0


0x34c7:	jmp	0x3351


0x3293:	mov	rdx, qword ptr [rax]
0x3296:	mov	r15, rax
0x3299:	nop	dword ptr [rax]
0x32a0:	movzx	edi, byte ptr [r14]
0x32a4:	lea	rax, [r14 + 1]
0x32a8:	test	byte ptr [rdx + rdi*2], 1
0x32ac:	jne	0x3560


0x32b2:	cmp	dil, 0xa
0x32b6:	je	0x3560


0x3560:	cmp	rbp, rax
0x3563:	mov	r14, rax
0x3566:	jne	0x32a0


0x32bc:	cmp	rbp, rax
0x32bf:	je	0x3578


0x356c:	jmp	0x3351


0x32a0:	movzx	edi, byte ptr [r14]
0x32a4:	lea	rax, [r14 + 1]
0x32a8:	test	byte ptr [rdx + rdi*2], 1
0x32ac:	jne	0x3560


0x3578:	sub	rax, r14
0x357b:	mov	rsi, r14
0x357e:	mov	rdi, r13
0x3581:	mov	rdx, rax
0x3584:	call	0x3130


0x32c5:	movzx	edi, byte ptr [r14 + 1]
0x32ca:	test	byte ptr [rdx + rdi*2], 1
0x32ce:	mov	rsi, rdi
0x32d1:	jne	0x32f8


0x32d3:	cmp	sil, 0xa
0x32d7:	je	0x32f8


0x32f8:	mov	rdx, rax
0x32fb:	mov	rsi, r14
0x32fe:	mov	rdi, r13
0x3301:	sub	rdx, r14
0x3304:	mov	qword ptr [rsp], rax
0x3308:	call	0x3130


0x32d9:	add	rax, 1
0x32dd:	cmp	rbp, rax
0x32e0:	je	0x3578


0x32e6:	movzx	edi, byte ptr [rax]
0x32e9:	test	byte ptr [rdx + rdi*2], 1
0x32ed:	mov	rsi, rdi
0x32f0:	je	0x32d3


0x330d:	mov	rax, qword ptr [rsp]
0x3311:	lea	r14, [rax + 1]
0x3315:	cmp	rbp, r14
0x3318:	je	0x3340


0x3340:	xor	r15d, r15d
0x3343:	mov	rdx, r15
0x3346:	mov	rsi, r14
0x3349:	mov	rdi, r13
0x334c:	call	0x3130


0x331a:	movzx	esi, byte ptr [rax + 1]
0x331e:	mov	rdx, qword ptr [r15]
0x3321:	test	byte ptr [rdx + rsi*2], 1
0x3325:	mov	rax, rsi
0x3328:	jne	0x3540


0x332e:	cmp	al, 0xa
0x3330:	je	0x3540


0x3540:	add	r14, 1
0x3544:	cmp	rbp, r14
0x3547:	je	0x3340


0x3336:	lea	rax, [r14 + 1]
0x333a:	jmp	0x32bc


0x354d:	movzx	esi, byte ptr [r14]
0x3551:	test	byte ptr [rdx + rsi*2], 1
0x3555:	mov	rax, rsi
0x3558:	je	0x332e


0x355e:	jmp	0x3540


0x3589:	jmp	0x3351


0x3109:	jmp	0x3004


0x2fc0:	jmp	0x2f7c


0x2f7c:	mov	rsi, qword ptr [r15 + 0x18]
0x2f80:	mov	rdi, rbx
0x2f83:	mov	rdx, r13
0x2f86:	add	rbx, 1
0x2f8a:	call	0x2e50


0x2fb0:	jmp	0x2f30


0x2f30:	mov	rsi, qword ptr [r15 + 0x18]
0x2f34:	mov	rdx, qword ptr [rsp]
0x2f38:	mov	rdi, rbx
0x2f3b:	add	rbx, 1
0x2f3f:	call	0x2e50


0x3f80:	cmp	eax, -1
0x3f83:	mov	r12d, eax
0x3f86:	mov	r8, qword ptr [rsp]
0x3f8a:	movzx	edx, byte ptr [rsp + 0xf]
0x3f8f:	jne	0x3fc1


0x3f91:	cmp	r13, rbx
0x3f94:	je	0x3fb0


0x3fc1:	mov	ecx, eax
0x3fc3:	jmp	0x3f14


0x3f96:	test	byte ptr [rbp], 0x20
0x3f9a:	jne	0x3fb0


0x3f14:	cmp	rbx, r8
0x3f17:	mov	rsi, rbx
0x3f1a:	jne	0x3ef0


0x3f9c:	cmp	byte ptr [rbx - 1], dl
0x3f9f:	je	0x3f56


0x3fa1:	mov	r12d, r15d
0x3fa4:	mov	ecx, edx
0x3fa6:	jmp	0x3f14


0x658f:	test	rax, rax
0x6592:	je	0x6599


0x6594:	add	rsp, 8
0x6598:	ret	


0x352d:	mov	r13, rax
0x3530:	mov	qword ptr [rbp], rax
0x3534:	jmp	0x3233


0x3233:	movsx	edx, byte ptr [rip + 0x207dd6]
0x323a:	mov	rsi, r14
0x323d:	mov	rdi, r13
0x3240:	call	0x3ec0


0x2bab:	test	rax, rax
0x2bae:	je	0x2bb7


0x2bb7:	movsx	eax, byte ptr [rbp]
0x2bbb:	cmp	al, 0x30
0x2bbd:	jne	0x2b40


0x2bb0:	lea	r12, [rax + 1]
0x2bb4:	mov	byte ptr [rax], 0
0x2bb7:	movsx	eax, byte ptr [rbp]
0x2bbb:	cmp	al, 0x30
0x2bbd:	jne	0x2b40


0x2bbf:	cmp	byte ptr [rbp + 1], 0
0x2bc3:	jne	0x2c07


0x2b40:	jl	0x2bd5


0x2bc5:	xor	ebp, ebp
0x2bc7:	xor	ebx, ebx
0x2bc9:	jmp	0x2b67


0x2c07:	mov	rdi, rbp
0x2c0a:	call	0x5d50


0x2bd5:	mov	rdi, rbp
0x2bd8:	call	0x5d50


0x2b46:	cmp	al, 0x32
0x2b48:	jg	0x2bd5


0x2b67:	mov	edi, 0x18
0x2b6c:	call	0x63a0


0x2b4e:	cmp	byte ptr [rbp + 1], 0x2e
0x2b52:	jne	0x2c39


0x2b58:	lea	rdi, [rbp + 2]
0x2b5c:	lea	ebx, [rax - 0x30]
0x2b5f:	call	0x2a90


0x2c39:	mov	rdi, rbp
0x2c3c:	call	0x5d50


0x4007:	xor	ecx, ecx
0x4009:	mov	r8, qword ptr [rax]
0x400c:	jmp	0x4019


0x4019:	movzx	eax, byte ptr [rbp + rcx]
0x401e:	movzx	r9d, byte ptr [r12 + rcx]
0x4023:	mov	eax, dword ptr [r8 + rax*4]
0x4027:	sub	eax, dword ptr [r8 + r9*4]
0x402b:	je	0x4010


0x4010:	add	rcx, 1
0x4014:	cmp	rcx, rbx
0x4017:	je	0x402d


0x402d:	pop	rbx
0x402e:	pop	rbp
0x402f:	pop	r12
0x4031:	ret	


0x4053:	test	rax, rax
0x4056:	je	0x40ad


0x40ad:	mov	qword ptr [rip + 0x20713c], rbx
0x40b4:	mov	qword ptr [rip + 0x20700d], rbx
0x40bb:	pop	rbx
0x40bc:	ret	


0x4058:	lea	r8, [rax + 1]
0x405c:	mov	rdx, r8
0x405f:	sub	rdx, rbx
0x4062:	cmp	rdx, 6
0x4066:	jle	0x40ad


0x4068:	lea	rsi, [rax - 6]
0x406c:	lea	rdi, [rip + 0x3f2d]
0x4073:	mov	ecx, 7
0x4078:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x4078:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x407a:	seta	dl
0x407d:	sbb	dl, 0
0x4080:	test	dl, dl
0x4082:	jne	0x40ad


0x4084:	lea	rdi, [rip + 0x3f1d]
0x408b:	mov	ecx, 3
0x4090:	mov	rsi, r8
0x4093:	mov	rbx, r8
0x4096:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x4096:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x4098:	seta	dl
0x409b:	sbb	dl, 0
0x409e:	test	dl, dl
0x40a0:	jne	0x40ad


0x40a2:	lea	rbx, [rax + 4]
0x40a6:	mov	qword ptr [rip + 0x206ff3], rbx
0x40ad:	mov	qword ptr [rip + 0x20713c], rbx
0x40b4:	mov	qword ptr [rip + 0x20700d], rbx
0x40bb:	pop	rbx
0x40bc:	ret	


0x40da:	call	0x1660


0x5dbc:	lea	rsi, [rip + 0x26d8]
0x5dc3:	xor	edi, edi
0x5dc5:	mov	edx, 5
0x5dca:	call	0x16f0


0x5ed1:	jmp	0x5dbc


0x6416:	test	rax, rax
0x6419:	jne	0x6420


0x641b:	test	rbx, rbx
0x641e:	jne	0x6431


0x6420:	pop	rbx
0x6421:	ret	


0x6431:	call	0x65f0


0x319c:	mov	rdi, rax
0x319f:	mov	qword ptr [rbx + 0x28], rax
0x31a3:	mov	rax, qword ptr [rbx + 0x18]
0x31a7:	jmp	0x314e


0x364c:	mov	rsi, qword ptr [rbx]
0x364f:	mov	rdx, qword ptr [rbx + 8]
0x3653:	mov	rdi, rax
0x3656:	mov	qword ptr [rbx + 0x10], rax
0x365a:	cmp	rsi, rdx
0x365d:	jae	0x35fa


0x365f:	lea	rax, [rax + rsi*8]
0x3663:	lea	rdx, [rdi + rdx*8]
0x3667:	nop	word ptr [rax + rax]
0x3670:	mov	qword ptr [rax], 0
0x3677:	add	rax, 8
0x367b:	cmp	rax, rdx
0x367e:	jne	0x3670


0x3680:	jmp	0x35fa


0x3670:	mov	qword ptr [rax], 0
0x3677:	add	rax, 8
0x367b:	cmp	rax, rdx
0x367e:	jne	0x3670


0x6d75:	mov	ebx, eax
0x6d77:	jmp	0x6d10


0x6d10:	mov	rcx, qword ptr [rsp + 0x18]
0x6d15:	xor	rcx, qword ptr fs:[0x28]
0x6d1e:	mov	eax, ebx
0x6d20:	jne	0x6e7d


0x6d26:	add	rsp, 0x50
0x6d2a:	pop	rbx
0x6d2b:	pop	rbp
0x6d2c:	pop	r12
0x6d2e:	ret	


0x6e7d:	call	0x1720


0x1720:	jmp	qword ptr [rip + 0x209772]




0x6d09:	mov	ebx, eax
0x6d0b:	nop	dword ptr [rax + rax]
0x6d10:	mov	rcx, qword ptr [rsp + 0x18]
0x6d15:	xor	rcx, qword ptr fs:[0x28]
0x6d1e:	mov	eax, ebx
0x6d20:	jne	0x6e7d


0x6dcc:	mov	ebx, eax
0x6dce:	jmp	0x6d10


0x6cb5:	test	eax, eax
0x6cb7:	mov	ebx, eax
0x6cb9:	js	0x6e48


0x6e48:	call	0x1670


0x6cbf:	mov	dword ptr [rip + 0x20466f], 1
0x6cc9:	jmp	0x6d10


0x6ddc:	test	eax, eax
0x6dde:	mov	ebx, eax
0x6de0:	js	0x6d10


0x6de6:	cmp	dword ptr [rip + 0x20454b], -1
0x6ded:	jne	0x6d10


0x6df3:	xor	eax, eax
0x6df5:	mov	esi, 1
0x6dfa:	mov	edi, ebx
0x6dfc:	call	0x16b0


0x6e01:	test	eax, eax
0x6e03:	js	0x6e21


0x6e21:	call	0x1670


0x6e05:	or	eax, 1
0x6e08:	mov	esi, 2
0x6e0d:	mov	edi, ebx
0x6e0f:	mov	edx, eax
0x6e11:	xor	eax, eax
0x6e13:	call	0x16b0


0x6e18:	cmp	eax, -1
0x6e1b:	jne	0x6d10


0x6e93:	mov	ebx, eax
0x6e95:	jmp	0x6d10


0x6ebe:	test	eax, eax
0x6ec0:	je	0x6eca


0x6ec2:	test	dword ptr [rbx], 0x100
0x6ec8:	jne	0x6ed8


0x6ed8:	mov	rdi, rbx
0x6edb:	mov	edx, 1
0x6ee0:	xor	esi, esi
0x6ee2:	call	0x6ef0


0x718a:	test	eax, eax
0x718c:	mov	dword ptr [rsp + 8], eax
0x7190:	je	0x71f8


0x71f8:	call	0x1670


0x7236:	test	eax, eax
0x7238:	mov	rcx, qword ptr [rsp + 8]
0x723d:	je	0x7258


0x7258:	call	0x1670


0x1a03:	lea	rsi, [rip + 0x634e]
0x1a0a:	mov	edi, 6
0x1a0f:	call	0x18d0


0x58cd:	mov	qword ptr [rip + 0x2057ac], rbx
0x58d4:	pop	rbx
0x58d5:	mov	dword ptr [rip + 0x205799], 1
0x58df:	pop	rbp
0x58e0:	pop	r12
0x58e2:	ret	


0x2d27:	add	rbx, 1
0x2d2b:	cmp	rbx, qword ptr [r12]
0x2d2f:	jb	0x2d08


0x2d08:	mov	rax, qword ptr [rbp]
0x2d0c:	mov	rdi, qword ptr [rax + rbx*8]
0x2d10:	test	rdi, rdi
0x2d13:	je	0x2d22


0x58a7:	mov	qword ptr [rip + 0x2057de], 0x100
0x58b2:	mov	qword ptr [rip + 0x2057df], rbx
0x58b9:	lea	rbx, [rip + 0x2057d0]
0x58c0:	cmp	r12, rbx
0x58c3:	je	0x58d4


0x642d:	xor	eax, eax
0x642f:	pop	rbx
0x6430:	ret	


0x588c:	cmp	rbx, rbp
0x588f:	jne	0x5880


0x5880:	mov	rdi, qword ptr [rbx]
0x5883:	add	rbx, 0x10
0x5887:	call	0x1650


0x2c7d:	mov	rdi, qword ptr [rbx + 0x10]
0x2c81:	mov	qword ptr [rbx + 0x28], 0
0x2c89:	call	0x1650


0x2c8e:	mov	qword ptr [rbx + 0x10], 0
0x2c96:	pop	rbx
0x2c97:	ret	


0x34ec:	movzx	eax, byte ptr [rsp]
0x34f0:	add	rsp, 0x18
0x34f4:	pop	rbx
0x34f5:	pop	rbp
0x34f6:	pop	r12
0x34f8:	pop	r13
0x34fa:	pop	r14
0x34fc:	pop	r15
0x34fe:	ret	


0x2cd1:	mov	rdi, rbx
0x2cd4:	pop	rbx
0x2cd5:	jmp	0x1650


0x2d1a:	mov	rax, qword ptr [rbp]
0x2d1e:	mov	rdi, qword ptr [rax + rbx*8]
0x2d22:	call	0x1650


0x2cb5:	mov	rdi, rbx
0x2cb8:	call	0x1650


0x3dbc:	test	rax, rax
0x3dbf:	mov	rbx, rax
0x3dc2:	je	0x3dd1


0x3dd1:	mov	rax, rbx
0x3dd4:	pop	rbx
0x3dd5:	pop	rbp
0x3dd6:	pop	r12
0x3dd8:	ret	


0x3dc4:	mov	rdi, rax
0x3dc7:	call	0x1830


0x1a14:	lea	rsi, [rip + 0x643a]
0x1a1b:	lea	rdi, [rip + 0x63f9]
0x1a22:	call	0x16e0


0x16e0:	jmp	qword ptr [rip + 0x209792]




0x3e5b:	mov	rdx, rax
0x3e5e:	mov	eax, 1
0x3e63:	test	rdx, rdx
0x3e66:	je	0x3e85


0x3e85:	add	rsp, 8
0x3e89:	ret	


0x3e68:	lea	rdi, [rip + 0x40ec]
0x3e6f:	mov	ecx, 2
0x3e74:	mov	rsi, rdx
0x3e77:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3e77:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3e79:	seta	cl
0x3e7c:	sbb	cl, 0
0x3e7f:	xor	eax, eax
0x3e81:	test	cl, cl
0x3e83:	jne	0x3e90


0x3e90:	lea	rdi, [rip + 0x40c6]
0x3e97:	mov	ecx, 6
0x3e9c:	mov	rsi, rdx
0x3e9f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3e9f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3ea1:	seta	al
0x3ea4:	sbb	al, 0
0x3ea6:	test	al, al
0x3ea8:	setne	al
0x3eab:	add	rsp, 8
0x3eaf:	ret	


0x4241:	cmp	r15d, 0xa
0x4245:	mov	qword ptr [rsp + 0x58], rax
0x424a:	ja	0x53ff


0x4250:	lea	rcx, [rip + 0x3dc9]
0x4257:	mov	edx, r15d
0x425a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x425e:	add	rax, rcx
0x4261:	jmp	rax


0x53ff:	call	0x1660


0x63a9:	test	rax, rax
0x63ac:	jne	0x63b3


0x63ae:	test	rbx, rbx
0x63b1:	jne	0x63b5


0x63b3:	pop	rbx
0x63b4:	ret	


0x63b5:	call	0x65f0


0x2b71:	mov	rdx, qword ptr [rip + 0x2084b0]
0x2b78:	test	r12, r12
0x2b7b:	mov	dword ptr [rax], ebx
0x2b7d:	mov	qword ptr [rax + 8], rbp
0x2b81:	mov	qword ptr [rax + 0x10], 0
0x2b89:	mov	qword ptr [rip + 0x208498], rax
0x2b90:	mov	qword ptr [rdx + 0x10], rax
0x2b94:	je	0x2bd0


0x2bd0:	pop	rbx
0x2bd1:	pop	rbp
0x2bd2:	pop	r12
0x2bd4:	ret	


0x2b96:	mov	rbp, r12
0x2b99:	lea	rsi, [rip + 0x51b5]
0x2ba0:	mov	rdi, rbp
0x2ba3:	xor	r12d, r12d
0x2ba6:	call	0x1880


0x3b86:	mov	r9, qword ptr [rsp + 0x18]
0x3b8b:	mov	r8, qword ptr [rsp + 0x10]
0x3b90:	mov	rcx, qword ptr [rsp + 8]
0x3b95:	test	r14d, r14d
0x3b98:	je	0x3c00


0x6559:	mov	rdx, rbx
0x655c:	xor	esi, esi
0x655e:	mov	rdi, rax
0x6561:	pop	rbx
0x6562:	jmp	0x17a0


0x17a0:	jmp	qword ptr [rip + 0x209732]




0x65b4:	add	rsp, 8
0x65b8:	mov	rdx, rbx
0x65bb:	mov	rsi, rbp
0x65be:	pop	rbx
0x65bf:	pop	rbp
0x65c0:	mov	rdi, rax
0x65c3:	jmp	0x1820


0x1820:	jmp	qword ptr [rip + 0x2096f2]




0x65d9:	mov	rdi, rbx
0x65dc:	lea	rsi, [rax + 1]
0x65e0:	pop	rbx
0x65e1:	jmp	0x65a0


0x5dcf:	lea	rdx, [rip + 0x29ea]
0x5dd6:	mov	rcx, rax
0x5dd9:	mov	r8d, 0x7e3
0x5ddf:	mov	esi, 1
0x5de4:	mov	rdi, rbp
0x5de7:	xor	eax, eax
0x5de9:	call	0x1960


0x5dee:	lea	rsi, [rip + 0x2733]
0x5df5:	xor	edi, edi
0x5df7:	mov	edx, 5
0x5dfc:	call	0x16f0


0x5e01:	mov	rsi, rbp
0x5e04:	mov	rdi, rax
0x5e07:	call	0x17f0


0x5e0c:	cmp	r12, 9
0x5e10:	ja	0x6150


0x5e16:	lea	rdx, [rip + 0x2967]
0x5e1d:	movsxd	rax, dword ptr [rdx + r12*4]
0x5e21:	add	rax, rdx
0x5e24:	jmp	rax


0x6150:	mov	r10, qword ptr [rbx + 0x40]
0x6154:	mov	r9, qword ptr [rbx + 0x38]
0x6158:	mov	edx, 5
0x615d:	mov	rax, qword ptr [rbx + 0x10]
0x6161:	mov	r8, qword ptr [rbx + 8]
0x6165:	lea	rsi, [rip + 0x2594]
0x616c:	mov	r13, qword ptr [rbx + 0x30]
0x6170:	mov	r12, qword ptr [rbx + 0x28]
0x6174:	mov	r15, qword ptr [rbx + 0x20]
0x6178:	mov	r14, qword ptr [rbx + 0x18]
0x617c:	mov	qword ptr [rsp + 0x18], r10
0x6181:	mov	qword ptr [rsp + 0x10], r9
0x6186:	mov	qword ptr [rsp], rax
0x618a:	mov	qword ptr [rsp + 8], r8
0x618f:	mov	rbx, qword ptr [rbx]
0x6192:	jmp	0x5f22


0x5f22:	xor	edi, edi
0x5f24:	call	0x16f0


0x5f29:	mov	r10, qword ptr [rsp + 0x18]
0x5f2e:	push	r10
0x5f30:	jmp	0x5e74


0x5e74:	mov	r9, qword ptr [rsp + 0x18]
0x5e79:	mov	rdx, rax
0x5e7c:	mov	rcx, rbx
0x5e7f:	mov	esi, 1
0x5e84:	mov	rdi, rbp
0x5e87:	xor	eax, eax
0x5e89:	push	r9
0x5e8b:	push	r13
0x5e8d:	push	r12
0x5e8f:	push	r15
0x5e91:	push	r14
0x5e93:	mov	r9, qword ptr [rsp + 0x30]
0x5e98:	mov	r8, qword ptr [rsp + 0x38]
0x5e9d:	call	0x1960


0x5ea2:	add	rsp, 0x30
0x5ea6:	add	rsp, 0x28
0x5eaa:	pop	rbx
0x5eab:	pop	rbp
0x5eac:	pop	r12
0x5eae:	pop	r13
0x5eb0:	pop	r14
0x5eb2:	pop	r15
0x5eb4:	ret	


0x62e6:	mov	rax, qword ptr [rsp + 0x78]
0x62eb:	xor	rax, qword ptr fs:[0x28]
0x62f4:	jne	0x6300


0x62f6:	add	rsp, 0xb8
0x62fd:	pop	rbx
0x62fe:	pop	rbp
0x62ff:	ret	


0x6300:	call	0x1720


0x6210:	mov	rax, qword ptr [rsp + 0x58]
0x6215:	xor	rax, qword ptr fs:[0x28]
0x621e:	jne	0x6225


0x6220:	add	rsp, 0x68
0x6224:	ret	


0x6225:	call	0x1720


0x3429:	xor	edi, edi
0x342b:	cmp	dword ptr [rip + 0x207d1e], 1
0x3432:	mov	rdx, rax
0x3435:	mov	r8, r15
0x3438:	sete	dil
0x343c:	sub	rsp, 8
0x3440:	xor	eax, eax
0x3442:	push	r14
0x3444:	mov	r9d, dword ptr [rsp + 0x1c]
0x3449:	xor	esi, esi
0x344b:	mov	rcx, qword ptr [rsp + 0x10]
0x3450:	call	0x18f0


0x18f0:	jmp	qword ptr [rip + 0x20968a]




0x35b9:	mov	rbx, rax
0x35bc:	call	0x1670


0x2a74:	lea	rcx, [rbx + 1]
0x2a78:	lea	r8, [rbp + 1]
0x2a7c:	mov	rdx, rax
0x2a7f:	xor	esi, esi
0x2a81:	mov	edi, 1
0x2a86:	xor	eax, eax
0x2a88:	call	0x18f0


0x36fd:	mov	rdi, qword ptr [rip + 0x2079dc]
0x3704:	mov	rdx, rax
0x3707:	mov	rcx, rbx
0x370a:	mov	esi, 1
0x370f:	xor	eax, eax
0x3711:	call	0x1960


0x3716:	mov	edi, ebp
0x3718:	call	0x1940


0x1940:	jmp	qword ptr [rip + 0x209662]




0x372b:	mov	rdx, rbx
0x372e:	mov	rsi, rax
0x3731:	mov	edi, 1
0x3736:	xor	eax, eax
0x3738:	call	0x18e0


0x18e0:	jmp	qword ptr [rip + 0x209692]




0x6334:	lea	rdx, [rip + 0x21bc]
0x633b:	mov	rsi, rax
0x633e:	mov	edi, 1
0x6343:	xor	eax, eax
0x6345:	call	0x18e0


0x6607:	mov	edi, dword ptr [rip + 0x204a2b]
0x660d:	lea	rdx, [rip + 0x173e]
0x6614:	mov	rcx, rax
0x6617:	xor	esi, esi
0x6619:	xor	eax, eax
0x661b:	call	0x18f0


0x665a:	mov	esi, r14d
0x665d:	mov	rdx, rax
0x6660:	xor	edi, edi
0x6662:	xor	eax, eax
0x6664:	call	0x18f0


0x3dcc:	cmp	eax, 2
0x3dcf:	jbe	0x3de0


0x3de0:	mov	edi, eax
0x3de2:	call	0x5d70


0x6f23:	mov	edx, r12d
0x6f26:	mov	rsi, rbp
0x6f29:	mov	edi, eax
0x6f2b:	call	0x1780


0x1780:	jmp	qword ptr [rip + 0x209742]




0x3d8d:	mov	ecx, ebx
0x3d8f:	xor	edx, edx
0x3d91:	xor	esi, esi
0x3d93:	pop	rbx
0x3d94:	mov	edi, eax
0x3d96:	jmp	0x17c0


0x6bbc:	test	eax, eax
0x6bbe:	mov	rdi, rbx
0x6bc1:	js	0x6c17


0x6c17:	pop	rbx
0x6c18:	pop	rbp
0x6c19:	pop	r12
0x6c1b:	jmp	0x16d0


0x6bc3:	call	0x1890


0x16d0:	jmp	qword ptr [rip + 0x20979a]




0x6bc8:	test	eax, eax
0x6bca:	jne	0x6bf8


0x6bcc:	mov	rdi, rbx
0x6bcf:	call	0x6eb0


0x6bf8:	mov	rdi, rbx
0x6bfb:	call	0x1830


0x6c00:	xor	esi, esi
0x6c02:	mov	edx, 1
0x6c07:	mov	edi, eax
0x6c09:	call	0x1780


0x6f87:	cmp	rax, -3
0x6f8b:	mov	rbp, rax
0x6f8e:	jbe	0x6fb0


0x6fb0:	mov	rdx, qword ptr [rsp + 8]
0x6fb5:	xor	rdx, qword ptr fs:[0x28]
0x6fbe:	mov	rax, rbp
0x6fc1:	jne	0x6fce


0x6f90:	test	r12, r12
0x6f93:	je	0x6fb0


0x6fc3:	add	rsp, 0x18
0x6fc7:	pop	rbx
0x6fc8:	pop	rbp
0x6fc9:	pop	r12
0x6fcb:	pop	r13
0x6fcd:	ret	


0x6fce:	call	0x1720


0x6f95:	xor	edi, edi
0x6f97:	call	0x3e50


0x6f9c:	test	al, al
0x6f9e:	jne	0x6fb0


0x6fa0:	movzx	eax, byte ptr [r13]
0x6fa5:	mov	ebp, 1
0x6faa:	mov	dword ptr [rbx], eax
0x6fac:	nop	dword ptr [rax]
0x6fb0:	mov	rdx, qword ptr [rsp + 8]
0x6fb5:	xor	rdx, qword ptr fs:[0x28]
0x6fbe:	mov	rax, rbp
0x6fc1:	jne	0x6fce


0x6fec:	mov	ebx, dword ptr [rbp]
0x6fef:	mov	rdi, rbp
0x6ff2:	mov	r12, rax
0x6ff5:	call	0x6bb0


0x706e:	test	rax, rax
0x7071:	je	0x7090


0x7090:	lea	rax, [rip + 0x190a]
0x7097:	add	rsp, 8
0x709b:	ret	


0x7073:	cmp	byte ptr [rax], 0
0x7076:	lea	rdx, [rip + 0x1924]
0x707d:	cmove	rax, rdx
0x7081:	add	rsp, 8
0x7085:	ret	


0x40f0:	movzx	edx, byte ptr [rax]
0x40f3:	and	edx, 0xffffffdf
0x40f6:	cmp	dl, 0x55
0x40f9:	je	0x4170


0x4170:	movzx	edx, byte ptr [rax + 1]
0x4174:	and	edx, 0xffffffdf
0x4177:	cmp	dl, 0x54
0x417a:	jne	0x4100


0x40fb:	cmp	dl, 0x47
0x40fe:	je	0x4120


0x417c:	movzx	edx, byte ptr [rax + 2]
0x4180:	and	edx, 0xffffffdf
0x4183:	cmp	dl, 0x46
0x4186:	jne	0x4100


0x4100:	lea	rax, [rip + 0x3eb4]
0x4107:	lea	rdx, [rip + 0x3eaf]
0x410e:	cmp	ebx, 9
0x4111:	cmovne	rax, rdx
0x4115:	add	rsp, 8
0x4119:	pop	rbx
0x411a:	pop	rbp
0x411b:	ret	


0x4120:	movzx	edx, byte ptr [rax + 1]
0x4124:	and	edx, 0xffffffdf
0x4127:	cmp	dl, 0x42
0x412a:	jne	0x4100


0x418c:	cmp	byte ptr [rax + 3], 0x2d
0x4190:	jne	0x4100


0x412c:	cmp	byte ptr [rax + 2], 0x31
0x4130:	jne	0x4100


0x4196:	cmp	byte ptr [rax + 4], 0x38
0x419a:	jne	0x4100


0x4132:	cmp	byte ptr [rax + 3], 0x38
0x4136:	jne	0x4100


0x41a0:	cmp	byte ptr [rax + 5], 0
0x41a4:	jne	0x4100


0x4138:	cmp	byte ptr [rax + 4], 0x30
0x413c:	jne	0x4100


0x41aa:	cmp	byte ptr [rbp], 0x60
0x41ae:	lea	rax, [rip + 0x3df7]
0x41b5:	lea	rdx, [rip + 0x3df4]
0x41bc:	cmovne	rax, rdx
0x41c0:	add	rsp, 8
0x41c4:	pop	rbx
0x41c5:	pop	rbp
0x41c6:	ret	


0x413e:	cmp	byte ptr [rax + 5], 0x33
0x4142:	jne	0x4100


0x4144:	cmp	byte ptr [rax + 6], 0x30
0x4148:	jne	0x4100


0x414a:	cmp	byte ptr [rax + 7], 0
0x414e:	jne	0x4100


0x4150:	cmp	byte ptr [rbp], 0x60
0x4154:	lea	rax, [rip + 0x3e59]
0x415b:	lea	rdx, [rip + 0x3e56]
0x4162:	cmovne	rax, rdx
0x4166:	add	rsp, 8
0x416a:	pop	rbx
0x416b:	pop	rbp
0x416c:	ret	


0x35c1:	mov	esi, dword ptr [rax]
0x35c3:	mov	rdx, rbx
0x35c6:	mov	edi, 1
0x35cb:	xor	eax, eax
0x35cd:	call	0x18f0


0x725d:	mov	dword ptr [rax], 0
0x7263:	add	rsp, 0x10
0x7267:	xor	eax, eax
0x7269:	pop	rbx
0x726a:	pop	rbp
0x726b:	pop	r12
0x726d:	ret	


0x6759:	mov	r13d, eax
0x675c:	call	0x1670


0x6761:	mov	edi, dword ptr [rax]
0x6763:	test	edi, edi
0x6765:	je	0x677a


0x677a:	pop	rbx
0x677b:	mov	eax, r13d
0x677e:	pop	rbp
0x677f:	pop	r12
0x6781:	pop	r13
0x6783:	pop	r14
0x6785:	ret	


0x6767:	lea	rdx, [rbx - 1]
0x676b:	lea	r8, [r14 - 1]
0x676f:	mov	rcx, r12
0x6772:	mov	rsi, rbp
0x6775:	call	0x6630


0x71fd:	mov	edx, dword ptr [rsp + 8]
0x7201:	mov	dword ptr [rax], 0
0x7207:	jmp	0x71e1


0x71e1:	add	rsp, 0x18
0x71e5:	mov	eax, edx
0x71e7:	pop	rbx
0x71e8:	pop	rbp
0x71e9:	pop	r12
0x71eb:	pop	r13
0x71ed:	pop	r14
0x71ef:	pop	r15
0x71f1:	ret	


0x6709:	mov	r14d, eax
0x670c:	call	0x1670


0x6711:	mov	edi, dword ptr [rax]
0x6713:	test	edi, edi
0x6715:	je	0x6728


0x6728:	pop	rbx
0x6729:	mov	eax, r14d
0x672c:	pop	rbp
0x672d:	pop	r12
0x672f:	pop	r13
0x6731:	pop	r14
0x6733:	ret	


0x6717:	mov	r8, r13
0x671a:	mov	rcx, r12
0x671d:	mov	rdx, rbp
0x6720:	mov	rsi, rbx
0x6723:	call	0x6630


0x6e26:	mov	r12d, dword ptr [rax]
0x6e29:	mov	rbp, rax
0x6e2c:	mov	edi, ebx
0x6e2e:	call	0x17b0


0x17b0:	jmp	qword ptr [rip + 0x20972a]




0x6e4d:	cmp	dword ptr [rax], 0x16
0x6e50:	jne	0x6cbf


0x6e56:	xor	esi, esi
0x6e58:	xor	eax, eax
0x6e5a:	mov	edx, r12d
0x6e5d:	mov	edi, ebp
0x6e5f:	call	0x16b0


0x6e64:	test	eax, eax
0x6e66:	mov	ebx, eax
0x6e68:	js	0x6d10


0x6e6e:	mov	dword ptr [rip + 0x2044c0], 0xffffffff
0x6e78:	jmp	0x6df3


0x67d8:	mov	dword ptr [rax], 0
0x67de:	mov	r12, rax
0x67e1:	movzx	ebx, byte ptr [rbp]
0x67e5:	call	0x1990


0x67ea:	mov	edx, dword ptr [rsp + 8]
0x67ee:	mov	rsi, qword ptr [rax]
0x67f1:	mov	rax, rbp
0x67f4:	jmp	0x6807


0x6807:	movzx	ecx, bl
0x680a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x680f:	jne	0x6800


0x6811:	cmp	bl, 0x2d
0x6814:	je	0x6868


0x6800:	add	rax, 1
0x6804:	movzx	ebx, byte ptr [rax]
0x6807:	movzx	ecx, bl
0x680a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x680f:	jne	0x6800


0x6868:	mov	ebp, 4
0x686d:	mov	rdi, qword ptr [rsp + 0x18]
0x6872:	xor	rdi, qword ptr fs:[0x28]
0x687b:	mov	eax, ebp
0x687d:	jne	0x6b10


0x6816:	mov	rsi, r15
0x6819:	mov	rdi, rbp
0x681c:	call	0x1920


0x6883:	add	rsp, 0x28
0x6887:	pop	rbx
0x6888:	pop	rbp
0x6889:	pop	r12
0x688b:	pop	r13
0x688d:	pop	r14
0x688f:	pop	r15
0x6891:	ret	


0x6b10:	call	0x1720


0x1920:	jmp	qword ptr [rip + 0x209672]




0x2abe:	cmp	eax, 1
0x2ac1:	je	0x2af0


0x2af0:	mov	rax, -2
0x2af7:	jmp	0x2ad4


0x2ac3:	test	eax, eax
0x2ac5:	jne	0x2af9


0x2ad4:	mov	rdx, qword ptr [rsp + 8]
0x2ad9:	xor	rdx, qword ptr fs:[0x28]
0x2ae2:	jne	0x2b2b


0x2ac7:	mov	rax, qword ptr [rsp]
0x2acb:	test	rax, rax
0x2ace:	je	0x2af9


0x2af9:	mov	rdi, rbx
0x2afc:	call	0x5d50


0x2ae4:	add	rsp, 0x10
0x2ae8:	pop	rbx
0x2ae9:	ret	


0x2b2b:	call	0x1720


0x2ad0:	sub	rax, 1
0x2ad4:	mov	rdx, qword ptr [rsp + 8]
0x2ad9:	xor	rdx, qword ptr fs:[0x28]
0x2ae2:	jne	0x2b2b


0x2b64:	mov	rbp, rax
0x2b67:	mov	edi, 0x18
0x2b6c:	call	0x63a0


0x3bd8:	lea	rdi, [rip + 0x207439]
0x3bdf:	mov	rsi, rax
0x3be2:	call	0x2a40


0x3be7:	mov	rcx, qword ptr [rsp + 8]
0x3bec:	mov	r8, qword ptr [rsp + 0x10]
0x3bf1:	mov	r9, qword ptr [rsp + 0x18]
0x3bf6:	jmp	0x3b95


0x3c27:	lea	rdi, [rip + 0x2073f2]
0x3c2e:	mov	rsi, rax
0x3c31:	call	0x2a40


0x3c36:	mov	rcx, qword ptr [rsp + 8]
0x3c3b:	mov	r8, qword ptr [rsp + 0x10]
0x3c40:	mov	r9, qword ptr [rsp + 0x18]
0x3c45:	jmp	0x3b95


0x5431:	mov	r13, rax
0x5434:	mov	eax, dword ptr [rax]
0x5436:	test	r15d, r15d
0x5439:	mov	rbx, qword ptr [rip + 0x205c40]
0x5440:	mov	dword ptr [rsp + 0x18], eax
0x5444:	js	0x55b1


0x55b1:	call	0x1660


0x544a:	cmp	dword ptr [rip + 0x205c27], r15d
0x5451:	jg	0x54b5


0x5453:	cmp	r15d, 0x7fffffff
0x545a:	je	0x55b6


0x54b5:	mov	eax, dword ptr [rbp + 4]
0x54b8:	shl	r15, 4
0x54bc:	sub	rsp, 8
0x54c0:	add	rbx, r15
0x54c3:	lea	r15, [rbp + 8]
0x54c7:	mov	r8d, dword ptr [rbp]
0x54cb:	mov	r11, qword ptr [rbx]
0x54ce:	mov	r12, qword ptr [rbx + 8]
0x54d2:	mov	rcx, r14
0x54d5:	or	eax, 1
0x54d8:	mov	dword ptr [rsp + 0x24], eax
0x54dc:	push	qword ptr [rbp + 0x30]
0x54df:	mov	r9d, eax
0x54e2:	push	qword ptr [rbp + 0x28]
0x54e5:	push	r15
0x54e7:	mov	rsi, r11
0x54ea:	mov	rdx, qword ptr [rsp + 0x28]
0x54ef:	mov	rdi, r12
0x54f2:	mov	qword ptr [rsp + 0x30], r11
0x54f7:	call	0x41d0


0x55b6:	call	0x65f0


0x5460:	lea	r12d, [r15 + 1]
0x5464:	lea	rax, [rip + 0x205c25]
0x546b:	movsxd	rsi, r12d
0x546e:	shl	rsi, 4
0x5472:	cmp	rbx, rax
0x5475:	je	0x5590


0x5590:	xor	edi, edi
0x5592:	call	0x6400


0x547b:	mov	rdi, rbx
0x547e:	call	0x6400


0x5483:	mov	rbx, rax
0x5486:	mov	qword ptr [rip + 0x205bf3], rax
0x548d:	movsxd	rdi, dword ptr [rip + 0x205be4]
0x5494:	mov	edx, r12d
0x5497:	xor	esi, esi
0x5499:	sub	edx, edi
0x549b:	shl	rdi, 4
0x549f:	movsxd	rdx, edx
0x54a2:	add	rdi, rbx
0x54a5:	shl	rdx, 4
0x54a9:	call	0x17a0


0x5597:	movdqa	xmm0, xmmword ptr [rip + 0x205af1]
0x559f:	mov	rbx, rax
0x55a2:	mov	qword ptr [rip + 0x205ad7], rax
0x55a9:	movups	xmmword ptr [rax], xmm0
0x55ac:	jmp	0x548d


0x548d:	movsxd	rdi, dword ptr [rip + 0x205be4]
0x5494:	mov	edx, r12d
0x5497:	xor	esi, esi
0x5499:	sub	edx, edi
0x549b:	shl	rdi, 4
0x549f:	movsxd	rdx, edx
0x54a2:	add	rdi, rbx
0x54a5:	shl	rdx, 4
0x54a9:	call	0x17a0


0x55cc:	mov	r12d, dword ptr [rax]
0x55cf:	mov	rbp, rax
0x55d2:	lea	rax, [rip + 0x205d27]
0x55d9:	test	rbx, rbx
0x55dc:	mov	esi, 0x38
0x55e1:	cmove	rbx, rax
0x55e5:	mov	rdi, rbx
0x55e8:	call	0x65a0


0x5702:	mov	r12d, dword ptr [rax]
0x5705:	mov	rbp, rax
0x5708:	lea	rax, [rbx + 8]
0x570c:	sub	rsp, 8
0x5710:	mov	r9d, dword ptr [rbx + 4]
0x5714:	push	qword ptr [rbx + 0x30]
0x5717:	mov	r8d, dword ptr [rbx]
0x571a:	push	qword ptr [rbx + 0x28]
0x571d:	mov	rdx, r15
0x5720:	push	rax
0x5721:	mov	rcx, qword ptr [rsp + 0x28]
0x5726:	mov	rsi, r14
0x5729:	mov	rdi, r13
0x572c:	call	0x41d0


0x577f:	test	r12, r12
0x5782:	mov	r13, rax
0x5785:	mov	eax, dword ptr [rax]
0x5787:	sete	bpl
0x578b:	or	ebp, dword ptr [rbx + 4]
0x578e:	lea	r10, [rbx + 8]
0x5792:	sub	rsp, 8
0x5796:	mov	r8d, dword ptr [rbx]
0x5799:	mov	rcx, r15
0x579c:	mov	dword ptr [rsp + 0x14], eax
0x57a0:	push	qword ptr [rbx + 0x30]
0x57a3:	mov	rdx, r14
0x57a6:	push	qword ptr [rbx + 0x28]
0x57a9:	push	r10
0x57ab:	xor	esi, esi
0x57ad:	mov	r9d, ebp
0x57b0:	xor	edi, edi
0x57b2:	mov	qword ptr [rsp + 0x40], r10
0x57b7:	call	0x41d0


0x70bf:	mov	r15, rax
0x70c2:	jmp	0x70f3


0x70f3:	mov	dword ptr [r15], 0
0x70fa:	mov	rsi, rbp
0x70fd:	mov	rdi, r12
0x7100:	call	0x1870


0x1870:	jmp	qword ptr [rip + 0x2096ca]




0x7105:	test	eax, eax
0x7107:	je	0x70c8


0x70c8:	mov	rdi, r12
0x70cb:	call	0x1710


0x7109:	add	rsp, 8
0x710d:	pop	rbx
0x710e:	pop	rbp
0x710f:	pop	r12
0x7111:	pop	r13
0x7113:	pop	r14
0x7115:	pop	r15
0x7117:	ret	


0x70d0:	mov	rdi, rbp
0x70d3:	lea	rbx, [rax + 1]
0x70d7:	call	0x1710


0x70dc:	add	rax, 1
0x70e0:	add	r12, rbx
0x70e3:	add	rbp, rax
0x70e6:	sub	r14, rax
0x70e9:	sub	r13, rbx
0x70ec:	je	0x7120


0x7120:	xor	eax, eax
0x7122:	test	r14, r14
0x7125:	setne	al
0x7128:	add	rsp, 8
0x712c:	pop	rbx
0x712d:	neg	eax
0x712f:	pop	rbp
0x7130:	pop	r12
0x7132:	pop	r13
0x7134:	pop	r14
0x7136:	pop	r15
0x7138:	ret	


0x70ee:	test	r14, r14
0x70f1:	je	0x7140


0x7140:	add	rsp, 8
0x7144:	mov	eax, 1
0x7149:	pop	rbx
0x714a:	pop	rbp
0x714b:	pop	r12
0x714d:	pop	r13
0x714f:	pop	r14
0x7151:	pop	r15
0x7153:	ret	


0x55ed:	mov	dword ptr [rbp], r12d
0x55f1:	pop	rbx
0x55f2:	pop	rbp
0x55f3:	pop	r12
0x55f5:	ret	


0x54ae:	mov	dword ptr [rip + 0x205bc3], r12d
0x54b5:	mov	eax, dword ptr [rbp + 4]
0x54b8:	shl	r15, 4
0x54bc:	sub	rsp, 8
0x54c0:	add	rbx, r15
0x54c3:	lea	r15, [rbp + 8]
0x54c7:	mov	r8d, dword ptr [rbp]
0x54cb:	mov	r11, qword ptr [rbx]
0x54ce:	mov	r12, qword ptr [rbx + 8]
0x54d2:	mov	rcx, r14
0x54d5:	or	eax, 1
0x54d8:	mov	dword ptr [rsp + 0x24], eax
0x54dc:	push	qword ptr [rbp + 0x30]
0x54df:	mov	r9d, eax
0x54e2:	push	qword ptr [rbp + 0x28]
0x54e5:	push	r15
0x54e7:	mov	rsi, r11
0x54ea:	mov	rdx, qword ptr [rsp + 0x28]
0x54ef:	mov	rdi, r12
0x54f2:	mov	qword ptr [rsp + 0x30], r11
0x54f7:	call	0x41d0


0x6821:	mov	rcx, qword ptr [r15]
0x6824:	mov	rbx, rax
0x6827:	cmp	rcx, rbp
0x682a:	je	0x6858


0x6858:	test	r13, r13
0x685b:	mov	qword ptr [rsp + 8], rcx
0x6860:	jne	0x68a0


0x682c:	mov	eax, dword ptr [r12]
0x6830:	test	eax, eax
0x6832:	je	0x6898


0x68a0:	movzx	r12d, byte ptr [rbp]
0x68a5:	test	r12b, r12b
0x68a8:	je	0x6868


0x6898:	xor	ebp, ebp
0x689a:	jmp	0x683e


0x6834:	cmp	eax, 0x22
0x6837:	mov	ebp, 1
0x683c:	jne	0x6868


0x68aa:	movsx	esi, r12b
0x68ae:	mov	rdi, r13
0x68b1:	xor	ebp, ebp
0x68b3:	call	0x1750


0x683e:	test	r13, r13
0x6841:	je	0x684c


0x1750:	jmp	qword ptr [rip + 0x20975a]


0x684c:	mov	qword ptr [r14], rbx
0x684f:	jmp	0x686d


0x6843:	movzx	r12d, byte ptr [rcx]
0x6847:	test	r12b, r12b
0x684a:	jne	0x68c7




0x686d:	mov	rdi, qword ptr [rsp + 0x18]
0x6872:	xor	rdi, qword ptr fs:[0x28]
0x687b:	mov	eax, ebp
0x687d:	jne	0x6b10


0x68c7:	movsx	esi, r12b
0x68cb:	mov	rdi, r13
0x68ce:	mov	qword ptr [rsp + 8], rcx
0x68d3:	call	0x1750


0x6e33:	mov	ebx, 0xffffffff
0x6e38:	mov	dword ptr [rbp], r12d
0x6e3c:	jmp	0x6d10


0x6c0e:	cmp	rax, -1
0x6c12:	jne	0x6bcc


0x6c14:	mov	rdi, rbx
0x6c17:	pop	rbx
0x6c18:	pop	rbp
0x6c19:	pop	r12
0x6c1b:	jmp	0x16d0


0x6f30:	cmp	rax, -1
0x6f34:	je	0x6f42


0x6f42:	pop	rbx
0x6f43:	pop	rbp
0x6f44:	pop	r12
0x6f46:	ret	


0x6f36:	and	dword ptr [rbx], 0xffffffef
0x6f39:	mov	qword ptr [rbx + 0x90], rax
0x6f40:	xor	eax, eax
0x6f42:	pop	rbx
0x6f43:	pop	rbp
0x6f44:	pop	r12
0x6f46:	ret	


0x3de7:	test	eax, eax
0x3de9:	mov	r12d, eax
0x3dec:	js	0x3e28


0x3e28:	call	0x1670


0x3dee:	mov	rdi, rbx
0x3df1:	call	0x6bb0


0x3e2d:	mov	r12d, dword ptr [rax]
0x3e30:	mov	rbp, rax
0x3e33:	mov	rdi, rbx
0x3e36:	call	0x6bb0


0x634a:	lea	rsi, [rip + 0x21bc]
0x6351:	mov	edx, 5
0x6356:	xor	edi, edi
0x6358:	call	0x16f0


0x635d:	lea	rcx, [rip + 0x18dc]
0x6364:	lea	rdx, [rip + 0x1aac]
0x636b:	mov	rsi, rax
0x636e:	mov	edi, 1
0x6373:	xor	eax, eax
0x6375:	call	0x18e0


0x637a:	mov	rbx, qword ptr [rip + 0x204d27]
0x6381:	lea	rsi, [rip + 0x23b8]
0x6388:	xor	edi, edi
0x638a:	mov	edx, 5
0x638f:	call	0x16f0


0x6394:	mov	rsi, rbx
0x6397:	mov	rdi, rax
0x639a:	pop	rbx
0x639b:	jmp	0x17f0


0x373d:	mov	rbx, qword ptr [rip + 0x207964]
0x3744:	lea	rsi, [rip + 0x3c7d]
0x374b:	mov	edx, 5
0x3750:	xor	edi, edi
0x3752:	call	0x16f0


0x3757:	mov	rsi, rbx
0x375a:	mov	rdi, rax
0x375d:	call	0x17f0


0x3762:	mov	rbx, qword ptr [rip + 0x20793f]
0x3769:	lea	rsi, [rip + 0x3cf0]
0x3770:	mov	edx, 5
0x3775:	xor	edi, edi
0x3777:	call	0x16f0


0x377c:	mov	rsi, rbx
0x377f:	mov	rdi, rax
0x3782:	call	0x17f0


0x3787:	mov	rbx, qword ptr [rip + 0x20791a]
0x378e:	lea	rsi, [rip + 0x3d0b]
0x3795:	mov	edx, 5
0x379a:	xor	edi, edi
0x379c:	call	0x16f0


0x37a1:	mov	rsi, rbx
0x37a4:	mov	rdi, rax
0x37a7:	call	0x17f0


0x37ac:	mov	rbx, qword ptr [rip + 0x2078f5]
0x37b3:	lea	rsi, [rip + 0x3db6]
0x37ba:	mov	edx, 5
0x37bf:	xor	edi, edi
0x37c1:	call	0x16f0


0x37c6:	mov	rsi, rbx
0x37c9:	mov	rdi, rax
0x37cc:	call	0x17f0


0x37d1:	mov	rbx, qword ptr [rip + 0x2078d0]
0x37d8:	lea	rsi, [rip + 0x3e91]
0x37df:	mov	edx, 5
0x37e4:	xor	edi, edi
0x37e6:	call	0x16f0


0x37eb:	mov	rsi, rbx
0x37ee:	mov	rdi, rax
0x37f1:	call	0x17f0


0x37f6:	mov	rbx, qword ptr [rip + 0x2078ab]
0x37fd:	lea	rsi, [rip + 0x405c]
0x3804:	mov	edx, 5
0x3809:	xor	edi, edi
0x380b:	call	0x16f0


0x3810:	mov	rsi, rbx
0x3813:	mov	rdi, rax
0x3816:	call	0x17f0


0x381b:	mov	rbx, qword ptr [rip + 0x207886]
0x3822:	lea	rsi, [rip + 0x4077]
0x3829:	mov	edx, 5
0x382e:	xor	edi, edi
0x3830:	call	0x16f0


0x3835:	mov	rsi, rbx
0x3838:	mov	rdi, rax
0x383b:	call	0x17f0


0x3840:	mov	rbx, qword ptr [rip + 0x207861]
0x3847:	lea	rsi, [rip + 0x4082]
0x384e:	mov	edx, 5
0x3853:	xor	edi, edi
0x3855:	call	0x16f0


0x385a:	mov	rsi, rbx
0x385d:	mov	rdi, rax
0x3860:	call	0x17f0


0x3865:	mov	rbx, qword ptr [rip + 0x20783c]
0x386c:	lea	rsi, [rip + 0x4095]
0x3873:	mov	edx, 5
0x3878:	xor	edi, edi
0x387a:	call	0x16f0


0x387f:	mov	rsi, rbx
0x3882:	mov	rdi, rax
0x3885:	lea	rbx, [rip + 0x4510]
0x388c:	call	0x17f0


0x3891:	lea	rax, [rip + 0x4509]
0x3898:	lea	rcx, [rip + 0x4543]
0x389f:	mov	qword ptr [rsp + 0x60], 0
0x38a8:	mov	qword ptr [rsp + 0x68], 0
0x38b1:	mov	rdx, rsp
0x38b4:	mov	qword ptr [rsp], rax
0x38b8:	lea	rax, [rip + 0x44e4]
0x38bf:	mov	qword ptr [rsp + 0x30], rcx
0x38c4:	lea	rcx, [rip + 0x4521]
0x38cb:	mov	qword ptr [rsp + 8], rax
0x38d0:	lea	rax, [rip + 0x4544]
0x38d7:	mov	qword ptr [rsp + 0x40], rcx
0x38dc:	lea	rcx, [rip + 0x4513]
0x38e3:	mov	qword ptr [rsp + 0x10], rax
0x38e8:	lea	rax, [rip + 0x44c4]
0x38ef:	mov	qword ptr [rsp + 0x50], rcx
0x38f4:	mov	qword ptr [rsp + 0x18], rax
0x38f9:	lea	rax, [rip + 0x44c9]
0x3900:	mov	qword ptr [rsp + 0x20], rax
0x3905:	lea	rax, [rip + 0x44c7]
0x390c:	mov	qword ptr [rsp + 0x28], rax
0x3911:	mov	qword ptr [rsp + 0x38], rax
0x3916:	mov	qword ptr [rsp + 0x48], rax
0x391b:	mov	qword ptr [rsp + 0x58], rax
0x3920:	add	rdx, 0x10
0x3924:	mov	rdi, qword ptr [rdx]
0x3927:	test	rdi, rdi
0x392a:	je	0x393f


0x393f:	mov	r12, qword ptr [rdx + 8]
0x3943:	xor	edi, edi
0x3945:	mov	edx, 5
0x394a:	lea	rsi, [rip + 0x44af]
0x3951:	test	r12, r12
0x3954:	je	0x3a1b


0x392c:	mov	ecx, 5
0x3931:	mov	rsi, rbx
0x3934:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3a1b:	call	0x16f0


0x395a:	call	0x16f0


0x3934:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3936:	seta	al
0x3939:	sbb	al, 0
0x393b:	test	al, al
0x393d:	jne	0x3920


0x3920:	add	rdx, 0x10
0x3924:	mov	rdi, qword ptr [rdx]
0x3927:	test	rdi, rdi
0x392a:	je	0x393f


0x395f:	lea	rcx, [rip + 0x42da]
0x3966:	lea	rdx, [rip + 0x44aa]
0x396d:	mov	rsi, rax
0x3970:	mov	edi, 1
0x3975:	xor	eax, eax
0x3977:	call	0x18e0


0x397c:	xor	esi, esi
0x397e:	mov	edi, 5
0x3983:	call	0x18d0


0x3988:	test	rax, rax
0x398b:	je	0x39a9


0x39a9:	lea	rsi, [rip + 0x4479]
0x39b0:	xor	edi, edi
0x39b2:	mov	edx, 5
0x39b7:	call	0x16f0


0x398d:	lea	rsi, [rip + 0x4491]
0x3994:	mov	edx, 3
0x3999:	mov	rdi, rax
0x399c:	call	0x1680


0x1680:	jmp	qword ptr [rip + 0x2097c2]




0x39bc:	lea	rcx, [rip + 0x43d9]
0x39c3:	lea	rdx, [rip + 0x4276]
0x39ca:	mov	rsi, rax
0x39cd:	mov	edi, 1
0x39d2:	xor	eax, eax
0x39d4:	call	0x18e0


0x39d9:	cmp	r12, rbx
0x39dc:	lea	rcx, [rip + 0x43da]
0x39e3:	lea	rbx, [rip + 0x436e]
0x39ea:	cmove	rbx, rcx
0x39ee:	lea	rsi, [rip + 0x42bb]
0x39f5:	xor	edi, edi
0x39f7:	mov	edx, 5
0x39fc:	call	0x16f0


0x3a01:	mov	rcx, rbx
0x3a04:	mov	rsi, rax
0x3a07:	mov	rdx, r12
0x3a0a:	mov	edi, 1
0x3a0f:	xor	eax, eax
0x3a11:	call	0x18e0


0x3a16:	jmp	0x3716


0x3a20:	lea	rcx, [rip + 0x4219]
0x3a27:	lea	rdx, [rip + 0x43e9]
0x3a2e:	mov	rsi, rax
0x3a31:	mov	edi, 1
0x3a36:	xor	eax, eax
0x3a38:	call	0x18e0


0x3a3d:	xor	esi, esi
0x3a3f:	mov	edi, 5
0x3a44:	call	0x18d0


0x3a49:	test	rax, rax
0x3a4c:	je	0x3a66


0x3a66:	lea	rsi, [rip + 0x43bc]
0x3a6d:	mov	edx, 5
0x3a72:	xor	edi, edi
0x3a74:	lea	r12, [rip + 0x4321]
0x3a7b:	lea	rbx, [rip + 0x433b]
0x3a82:	call	0x16f0


0x3a4e:	lea	rsi, [rip + 0x43d0]
0x3a55:	mov	edx, 3
0x3a5a:	mov	rdi, rax
0x3a5d:	call	0x1680


0x3a87:	lea	rcx, [rip + 0x430e]
0x3a8e:	lea	rdx, [rip + 0x41ab]
0x3a95:	mov	rsi, rax
0x3a98:	mov	edi, 1
0x3a9d:	xor	eax, eax
0x3a9f:	call	0x18e0


0x3aa4:	jmp	0x39ee


0x39ee:	lea	rsi, [rip + 0x42bb]
0x39f5:	xor	edi, edi
0x39f7:	mov	edx, 5
0x39fc:	call	0x16f0


0x35d2:	nop	dword ptr [rax]
0x35d6:	nop	word ptr cs:[rax + rax]


0x6669:	lea	rsi, [rip + 0x21b0]
0x6670:	mov	edx, 5
0x6675:	xor	edi, edi
0x6677:	call	0x16f0


0x667c:	xor	esi, esi
0x667e:	mov	rdx, rax
0x6681:	xor	edi, edi
0x6683:	xor	eax, eax
0x6685:	call	0x18f0


0x668a:	mov	rcx, r13
0x668d:	mov	rdx, rbp
0x6690:	mov	esi, 8
0x6695:	mov	edi, 1
0x669a:	call	0x59f0


0x6620:	call	0x1660


0x2a8d:	nop	dword ptr [rax]


0x3455:	mov	byte ptr [rbp + rbx], 1
0x345a:	pop	rax
0x345b:	pop	rdx
0x345c:	nop	dword ptr [rax]
0x3460:	mov	qword ptr [r12 + rbx*8], r13
0x3464:	mov	eax, 1
0x3469:	add	rsp, 0x18
0x346d:	pop	rbx
0x346e:	pop	rbp
0x346f:	pop	r12
0x3471:	pop	r13
0x3473:	pop	r14
0x3475:	pop	r15
0x3477:	ret	


0x1a27:	lea	rdi, [rip + 0x63ed]
0x1a2e:	call	0x16c0


0x16c0:	jmp	qword ptr [rip + 0x2097a2]




0x6ee7:	mov	rdi, rbx
0x6eea:	pop	rbx
0x6eeb:	jmp	0x1850


0x71cb:	movzx	r9d, byte ptr [rsp + 0xf]
0x71d1:	movzx	r8d, byte ptr [rsp + 8]
0x71d7:	mov	edx, eax
0x71d9:	mov	byte ptr [r13], r9b
0x71dd:	mov	byte ptr [r12], r8b
0x71e1:	add	rsp, 0x18
0x71e5:	mov	eax, edx
0x71e7:	pop	rbx
0x71e8:	pop	rbp
0x71e9:	pop	r12
0x71eb:	pop	r13
0x71ed:	pop	r14
0x71ef:	pop	r15
0x71f1:	ret	


0x1a33:	mov	edi, 3
0x1a38:	call	0x3e50


0x1a3d:	lea	rdi, [rip + 0x227c]
0x1a44:	mov	byte ptr [rip + 0x209754], al
0x1a4a:	call	0x72f0


0x1a4f:	lea	rdi, [rip + 0x124a]
0x1a56:	call	0x72f0


0x1a5b:	lea	rax, [rsp + 0x2c]
0x1a60:	mov	byte ptr [rip + 0x209734], 1
0x1a67:	mov	byte ptr [rip + 0x20972c], 0
0x1a6e:	mov	byte ptr [rip + 0x209724], 0
0x1a75:	mov	byte ptr [rip + 0x20971c], 0
0x1a7c:	mov	qword ptr [rsp + 8], rax
0x1a81:	lea	rax, [rsp + 0x30]
0x1a86:	mov	dword ptr [rip + 0x2096c0], 0
0x1a90:	mov	qword ptr [rsp + 0x10], rax
0x1a95:	jmp	0x1ae4


0x1ae4:	lea	rcx, [rip + 0x208fd5]
0x1aeb:	lea	rdx, [rip + 0x63b9]
0x1af2:	xor	r8d, r8d
0x1af5:	mov	rsi, rbx
0x1af8:	mov	edi, ebp
0x1afa:	call	0x1730


0x1730:	jmp	qword ptr [rip + 0x20976a]




0x3a62:	test	eax, eax
0x3a64:	jne	0x3aa9


0x3aa9:	lea	r12, [rip + 0x42ec]
0x3ab0:	mov	r13, qword ptr [rip + 0x2075f1]
0x3ab7:	lea	rsi, [rip + 0x41aa]
0x3abe:	xor	edi, edi
0x3ac0:	mov	edx, 5
0x3ac5:	call	0x16f0


0x3aca:	mov	rsi, r13
0x3acd:	mov	rdi, rax
0x3ad0:	call	0x17f0


0x3ad5:	jmp	0x39a9


0x39a1:	test	eax, eax
0x39a3:	jne	0x3ab0


0x3ab0:	mov	r13, qword ptr [rip + 0x2075f1]
0x3ab7:	lea	rsi, [rip + 0x41aa]
0x3abe:	xor	edi, edi
0x3ac0:	mov	edx, 5
0x3ac5:	call	0x16f0


0x68d8:	test	rax, rax
0x68db:	mov	rcx, qword ptr [rsp + 8]
0x68e0:	je	0x69ac


0x69ac:	mov	qword ptr [r14], rbx
0x69af:	or	ebp, 2
0x69b2:	jmp	0x686d


0x68e6:	lea	eax, [r12 - 0x45]
0x68eb:	cmp	al, 0x2f
0x68ed:	ja	0x6940


0x68ef:	movabs	rdx, 0x814400308945
0x68f9:	bt	rdx, rax
0x68fd:	jae	0x6940


0x6940:	mov	edi, 1
0x6945:	mov	esi, 0x400
0x694a:	sub	r12d, 0x42
0x694e:	cmp	r12b, 0x35
0x6952:	ja	0x69ac


0x68ff:	mov	esi, 0x30
0x6904:	mov	rdi, r13
0x6907:	mov	qword ptr [rsp + 8], rcx
0x690c:	call	0x1750


0x6954:	lea	rdx, [rip + 0x1f65]
0x695b:	movzx	r12d, r12b
0x695f:	movsxd	rax, dword ptr [rdx + r12*4]
0x6963:	add	rax, rdx
0x6966:	jmp	rax


0x6911:	test	rax, rax
0x6914:	mov	rcx, qword ptr [rsp + 8]
0x6919:	je	0x6940


0x691b:	movzx	eax, byte ptr [rcx + 1]
0x691f:	cmp	al, 0x44
0x6921:	je	0x692f


0x692f:	mov	edi, 2
0x6934:	mov	esi, 0x3e8
0x6939:	jmp	0x694a


0x6923:	cmp	al, 0x69
0x6925:	je	0x6af8


0x694a:	sub	r12d, 0x42
0x694e:	cmp	r12b, 0x35
0x6952:	ja	0x69ac


0x6af8:	xor	edi, edi
0x6afa:	cmp	byte ptr [rcx + 2], 0x42
0x6afe:	mov	esi, 0x400
0x6b03:	sete	dil
0x6b07:	lea	edi, [rdi + rdi + 1]
0x6b0b:	jmp	0x694a


0x692b:	cmp	al, 0x42
0x692d:	jne	0x6940


0x68b8:	test	rax, rax
0x68bb:	mov	ebx, 1
0x68c0:	mov	rcx, qword ptr [rsp + 8]
0x68c5:	je	0x6868


0x6bd4:	test	eax, eax
0x6bd6:	je	0x6c14


0x6bd8:	call	0x1670


0x6bdd:	mov	r12d, dword ptr [rax]
0x6be0:	mov	rdi, rbx
0x6be3:	mov	rbp, rax
0x6be6:	call	0x16d0


0x6beb:	test	r12d, r12d
0x6bee:	jne	0x6c20


0x6bf0:	pop	rbx
0x6bf1:	pop	rbp
0x6bf2:	pop	r12
0x6bf4:	ret	


0x6c20:	mov	dword ptr [rbp], r12d
0x6c24:	mov	eax, 0xffffffff
0x6c29:	jmp	0x6bf0


0x3e3b:	xor	ebx, ebx
0x3e3d:	mov	dword ptr [rbp], r12d
0x3e41:	jmp	0x3dd1


0x3df6:	test	eax, eax
0x3df8:	jne	0x3e0d


0x3dfa:	mov	rsi, rbp
0x3dfd:	mov	edi, r12d
0x3e00:	call	0x18c0


0x3e0d:	call	0x1670


0x18c0:	jmp	qword ptr [rip + 0x2096a2]




0x3e12:	mov	ebp, dword ptr [rax]
0x3e14:	mov	rbx, rax
0x3e17:	mov	edi, r12d
0x3e1a:	call	0x17b0


0x3e1f:	mov	dword ptr [rbx], ebp
0x3e21:	xor	ebx, ebx
0x3e23:	jmp	0x3dd1


0x6ffa:	and	ebx, 0x20
0x6ffd:	test	ebx, ebx
0x6fff:	jne	0x7018


0x7001:	test	eax, eax
0x7003:	je	0x700f


0x7018:	test	eax, eax
0x701a:	jne	0x7038


0x700f:	pop	rbx
0x7010:	pop	rbp
0x7011:	pop	r12
0x7013:	ret	


0x7005:	test	r12, r12
0x7008:	mov	eax, 0xffffffff
0x700d:	je	0x7048


0x701c:	call	0x1670


0x7038:	pop	rbx
0x7039:	mov	eax, 0xffffffff
0x703e:	pop	rbp
0x703f:	pop	r12
0x7041:	ret	


0x7048:	call	0x1670


0x704d:	cmp	dword ptr [rax], 9
0x7050:	pop	rbx
0x7051:	pop	rbp
0x7052:	pop	r12
0x7054:	setne	al
0x7057:	movzx	eax, al
0x705a:	neg	eax
0x705c:	ret	


0x7021:	mov	dword ptr [rax], 0
0x7027:	mov	eax, 0xffffffff
0x702c:	pop	rbx
0x702d:	pop	rbp
0x702e:	pop	r12
0x7030:	ret	


0x3cd2:	test	eax, eax
0x3cd4:	je	0x3cec


0x3cec:	mov	rdi, qword ptr [rip + 0x2073ed]
0x3cf3:	call	0x6fe0


0x3cd6:	call	0x1670


0x3cdb:	cmp	byte ptr [rip + 0x2074fe], 0
0x3ce2:	mov	rbx, rax
0x3ce5:	je	0x3d03


0x3d03:	lea	rsi, [rip + 0x423e]
0x3d0a:	xor	edi, edi
0x3d0c:	mov	edx, 5
0x3d11:	call	0x16f0


0x3ce7:	cmp	dword ptr [rax], 0x20
0x3cea:	jne	0x3d03


0x3d16:	mov	rdi, qword ptr [rip + 0x2074cb]
0x3d1d:	mov	rbp, rax
0x3d20:	test	rdi, rdi
0x3d23:	je	0x3d4d


0x3d4d:	mov	esi, dword ptr [rbx]
0x3d4f:	lea	rdx, [rip + 0x3ffc]
0x3d56:	mov	rcx, rax
0x3d59:	xor	edi, edi
0x3d5b:	xor	eax, eax
0x3d5d:	call	0x18f0


0x3d25:	call	0x5b50


0x3d62:	jmp	0x3d42


0x3d42:	mov	edi, dword ptr [rip + 0x2072f0]
0x3d48:	call	0x1690


0x1690:	jmp	qword ptr [rip + 0x2097ba]




0x3cf8:	test	eax, eax
0x3cfa:	jne	0x3d42


0x3cfc:	add	rsp, 8
0x3d00:	pop	rbx
0x3d01:	pop	rbp
0x3d02:	ret	


0x3e05:	test	rax, rax
0x3e08:	mov	rbx, rax
0x3e0b:	jne	0x3dd1


0x1aff:	cmp	eax, -1
0x1b02:	je	0x1e61


0x1e61:	movsxd	rax, dword ptr [rip + 0x209250]
0x1e68:	mov	dword ptr [rsp + 0x30], 0
0x1e70:	cmp	ebp, eax
0x1e72:	jle	0x1ec6


0x1b08:	cmp	eax, 0x69
0x1b0b:	mov	dword ptr [rsp + 0x2c], 0
0x1b13:	je	0x1de8


0x1ec6:	mov	eax, dword ptr [rsp + 0x34]
0x1eca:	cmp	eax, 2
0x1ecd:	jne	0x28a6


0x1e74:	lea	rcx, [rsp + 0x30]
0x1e79:	lea	r15, [rsp + 0x2c]
0x1e7e:	lea	r14, [rsp + 0x34]
0x1e83:	lea	r13, [rsp + 0x80]
0x1e8b:	lea	r12, [rsp + 0x78]
0x1e90:	mov	qword ptr [rsp + 8], rcx
0x1e95:	nop	dword ptr [rax]
0x1e98:	lea	edx, [rax + 1]
0x1e9b:	mov	rdi, qword ptr [rbx + rax*8]
0x1e9f:	mov	r8, qword ptr [rsp + 8]
0x1ea4:	mov	r9, r15
0x1ea7:	mov	rcx, r14
0x1eaa:	mov	rsi, r12
0x1ead:	mov	dword ptr [rip + 0x209205], edx
0x1eb3:	mov	rdx, r13
0x1eb6:	call	0x3ae0


0x1de8:	mov	byte ptr [rip + 0x209312], 1
0x1def:	xor	eax, eax
0x1df1:	jmp	0x1ae0


0x1b19:	jg	0x1aa0


0x1ed3:	cmp	dword ptr [rsp + 0x80], 0
0x1edb:	jne	0x2346


0x28a6:	test	eax, eax
0x28a8:	jne	0x28f4


0x1ae0:	mov	dword ptr [rsp + 0x30], eax
0x1ae4:	lea	rcx, [rip + 0x208fd5]
0x1aeb:	lea	rdx, [rip + 0x63b9]
0x1af2:	xor	r8d, r8d
0x1af5:	mov	rsi, rbx
0x1af8:	mov	edi, ebp
0x1afa:	call	0x1730


0x1b1b:	cmp	eax, 0x31
0x1b1e:	je	0x1dc0


0x1aa0:	cmp	eax, 0x76
0x1aa3:	je	0x1c48


0x1ee1:	cmp	dword ptr [rsp + 0x84], 0
0x1ee9:	jne	0x231f


0x2346:	lea	rdi, [rip + 0x208cd3]
0x234d:	xor	esi, esi
0x234f:	call	0x2a40


0x28aa:	lea	rsi, [rip + 0x560e]
0x28b1:	xor	edi, edi
0x28b3:	mov	edx, 5
0x28b8:	call	0x16f0


0x28f4:	mov	rdi, qword ptr [rbx + rbp*8 - 8]
0x28f9:	call	0x5d50


0x1dc0:	mov	rdi, qword ptr [rip + 0x2092f9]
0x1dc7:	call	0x2a90


0x1b24:	jle	0x1bf0


0x1c48:	mov	byte ptr [rip + 0x20954c], 0
0x1c4f:	mov	rdi, qword ptr [rip + 0x20946a]
0x1c56:	lea	r8, [rip + 0x60fb]
0x1c5d:	xor	esi, esi
0x1c5f:	mov	rcx, r15
0x1c62:	mov	edx, 0xa
0x1c67:	call	0x6790


0x1aa9:	jle	0x1b78


0x1eef:	cmp	qword ptr [rip + 0x209129], -1
0x1ef7:	je	0x230f


0x231f:	lea	rdi, [rip + 0x208cfa]
0x2326:	mov	esi, 1
0x232b:	call	0x2a40


0x1bf0:	cmp	eax, 0xffffff7e
0x1bf5:	je	0x26d6


0x1b2a:	cmp	eax, 0x61
0x1b2d:	je	0x1c4f


0x1b78:	cmp	eax, 0x6f
0x1b7b:	je	0x1ca0


0x1aaf:	cmp	eax, 0x80
0x1ab4:	je	0x1d70


0x230f:	mov	qword ptr [rip + 0x208d06], 0
0x231a:	jmp	0x1efd


0x1efd:	cmp	qword ptr [rip + 0x209113], -1
0x1f05:	je	0x22ff


0x26d6:	xor	edi, edi
0x26d8:	call	0x36c0


0x1bfb:	cmp	eax, 1
0x1bfe:	je	0x1cd8


0x1c4f:	mov	rdi, qword ptr [rip + 0x20946a]
0x1c56:	lea	r8, [rip + 0x60fb]
0x1c5d:	xor	esi, esi
0x1c5f:	mov	rcx, r15
0x1c62:	mov	edx, 0xa
0x1c67:	call	0x6790


0x1b33:	cmp	eax, 0x65
0x1b36:	je	0x1d18


0x1ca0:	mov	rdx, qword ptr [rip + 0x209419]
0x1ca7:	lea	rdi, [rip + 0x61bf]
0x1cae:	mov	ecx, 5
0x1cb3:	mov	rsi, rdx
0x1cb6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1b81:	cmp	eax, 0x74
0x1b84:	je	0x1d88


0x1d70:	mov	dword ptr [rip + 0x2093d6], 1
0x1d7a:	xor	eax, eax
0x1d7c:	jmp	0x1ae0


0x1aba:	jle	0x1d50


0x22ff:	mov	qword ptr [rip + 0x208d0e], 0
0x230a:	jmp	0x1f0b


0x1f0b:	mov	rbx, qword ptr [rip + 0x20929e]
0x1f12:	lea	rsi, [rip + 0x6091]
0x1f19:	mov	rdi, rbx
0x1f1c:	call	0x1810


0x1cd8:	lea	r14, [rsp + 0x34]
0x1cdd:	lea	r13, [rsp + 0x80]
0x1ce5:	lea	r12, [rsp + 0x78]
0x1cea:	mov	r9, qword ptr [rsp + 8]
0x1cef:	mov	r8, qword ptr [rsp + 0x10]
0x1cf4:	mov	rdi, qword ptr [rip + 0x2093c5]
0x1cfb:	mov	rcx, r14
0x1cfe:	mov	rdx, r13
0x1d01:	mov	rsi, r12
0x1d04:	call	0x3ae0


0x1c04:	cmp	eax, 0xffffff7d
0x1c09:	jne	0x1b41


0x1d18:	mov	rdi, qword ptr [rip + 0x209471]
0x1d1f:	mov	r12, qword ptr [rip + 0x20939a]
0x1d26:	test	rdi, rdi
0x1d29:	je	0x1d3b


0x1b3c:	cmp	eax, 0x32
0x1b3f:	je	0x1b50


0x1cb6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1cb8:	seta	al
0x1cbb:	sbb	al, 0
0x1cbd:	movsx	eax, al
0x1cc0:	test	eax, eax
0x1cc2:	jne	0x1e47


0x1d88:	mov	r12, qword ptr [rip + 0x209331]
0x1d8f:	movzx	eax, byte ptr [r12]
0x1d94:	test	al, al
0x1d96:	jne	0x1e1d


0x1b8a:	cmp	eax, 0x6a
0x1b8d:	jne	0x1b41


0x1d50:	cmp	eax, 0x7a
0x1d53:	jne	0x1b41


0x1ac0:	cmp	eax, 0x81
0x1ac5:	je	0x1e00


0x1810:	jmp	qword ptr [rip + 0x2096fa]


0x1c0f:	mov	rdi, qword ptr [rip + 0x209492]
0x1c16:	mov	rcx, qword ptr [rip + 0x209413]
0x1c1d:	lea	r8, [rip + 0x627a]
0x1c24:	lea	rdx, [rip + 0x61ec]
0x1c2b:	lea	rsi, [rip + 0x616a]
0x1c32:	xor	r9d, r9d
0x1c35:	xor	eax, eax
0x1c37:	call	0x6240


0x1b41:	mov	edi, 1
0x1b46:	call	0x36c0


0x1d3b:	mov	qword ptr [rip + 0x20944e], r12
0x1d42:	xor	eax, eax
0x1d44:	jmp	0x1ae0


0x1d2b:	mov	rsi, r12
0x1d2e:	call	0x1810


0x1b50:	mov	rdi, qword ptr [rip + 0x209569]
0x1b57:	call	0x2a90


0x1cc8:	mov	byte ptr [rip + 0x2094b9], 1
0x1ccf:	jmp	0x1ae0


0x1e47:	mov	rdi, rdx
0x1e4a:	call	0x2b30


0x1d9c:	mov	eax, 0xa
0x1da1:	mov	edx, dword ptr [rip + 0x20926d]
0x1da7:	test	edx, edx
0x1da9:	js	0x1db3


0x1e1d:	cmp	byte ptr [r12 + 1], 0
0x1e23:	je	0x1da1


0x1b8f:	mov	rdi, qword ptr [rip + 0x20952a]
0x1b96:	movzx	eax, byte ptr [rdi]
0x1b99:	lea	edx, [rax - 0x31]
0x1b9c:	cmp	dl, 1
0x1b9f:	ja	0x1bc0


0x1d59:	mov	byte ptr [rip + 0x2092b0], 0
0x1d60:	xor	eax, eax
0x1d62:	jmp	0x1ae0


0x1e00:	mov	dword ptr [rip + 0x209346], 2
0x1e0a:	xor	eax, eax
0x1e0c:	jmp	0x1ae0


0x1acb:	cmp	eax, 0x82
0x1ad0:	jne	0x1b41




0x1db3:	mov	dword ptr [rip + 0x20925b], eax
0x1db9:	xor	eax, eax
0x1dbb:	jmp	0x1ae0


0x1dab:	cmp	edx, eax
0x1dad:	jne	0x28d0


0x1da1:	mov	edx, dword ptr [rip + 0x20926d]
0x1da7:	test	edx, edx
0x1da9:	js	0x1db3


0x1e29:	lea	rsi, [rip + 0x6042]
0x1e30:	mov	rdi, r12
0x1e33:	call	0x1810


0x1ba1:	cmp	byte ptr [rdi + 1], 0
0x1ba5:	jne	0x1bc0


0x1bc0:	call	0x2a90


0x1ad2:	mov	byte ptr [rip + 0x209627], 1
0x1ad9:	xor	eax, eax
0x1adb:	nop	dword ptr [rax + rax]
0x1ae0:	mov	dword ptr [rsp + 0x30], eax
0x1ae4:	lea	rcx, [rip + 0x208fd5]
0x1aeb:	lea	rdx, [rip + 0x63b9]
0x1af2:	xor	r8d, r8d
0x1af5:	mov	rsi, rbx
0x1af8:	mov	edi, ebp
0x1afa:	call	0x1730


0x28d0:	lea	rsi, [rip + 0x55b5]
0x28d7:	mov	edx, 5
0x28dc:	xor	edi, edi
0x28de:	call	0x16f0


0x1ba7:	movsxd	rdx, dword ptr [rip + 0x20950a]
0x1bae:	mov	rdx, qword ptr [rbx + rdx*8 - 8]
0x1bb3:	add	rdx, 2
0x1bb7:	cmp	rdi, rdx
0x1bba:	je	0x237e


0x237e:	xor	edx, edx
0x2380:	cmp	al, 0x32
0x2382:	sete	dl
0x2385:	mov	rax, rdx
0x2388:	add	dword ptr [rsp + rdx*4 + 0x80], 1
0x2390:	add	eax, 1
0x2393:	mov	dword ptr [rsp + 0x2c], eax
0x2397:	jmp	0x1ae0


0x1e4f:	mov	dword ptr [rsp + 0x2c], 3
0x1e57:	mov	eax, 3
0x1e5c:	jmp	0x1ae0


0x1c3c:	xor	edi, edi
0x1c3e:	call	0x1940


0x1c6c:	test	eax, eax
0x1c6e:	jne	0x26f9


0x1c74:	mov	rax, qword ptr [rsp + 0x60]
0x1c79:	lea	rdx, [rax - 1]
0x1c7d:	cmp	rdx, 1
0x1c81:	ja	0x26f9


0x26f9:	mov	rdi, qword ptr [rip + 0x2089c0]
0x2700:	call	0x5d50


0x1c87:	cmp	rax, 1
0x1c8b:	je	0x1e11


0x1e11:	mov	byte ptr [rip + 0x209385], 1
0x1e18:	jmp	0x1be7


0x1c91:	mov	byte ptr [rip + 0x209504], 1
0x1c98:	jmp	0x1be7


0x1be7:	mov	eax, dword ptr [rsp + 0x2c]
0x1beb:	jmp	0x1ae0


0x1bc5:	lea	rdi, [rip + 0x209454]
0x1bcc:	mov	rsi, rax
0x1bcf:	call	0x2a40


0x1b5c:	lea	rdi, [rip + 0x2094b5]
0x1b63:	mov	rsi, rax
0x1b66:	call	0x2a40


0x1dcc:	lea	rdi, [rip + 0x20924d]
0x1dd3:	mov	rsi, rax
0x1dd6:	call	0x2a40


0x28e3:	xor	esi, esi
0x28e5:	mov	rdx, rax
0x28e8:	mov	edi, 1
0x28ed:	xor	eax, eax
0x28ef:	call	0x18f0


0x28bd:	xor	esi, esi
0x28bf:	mov	rdx, rax
0x28c2:	xor	edi, edi
0x28c4:	xor	eax, eax
0x28c6:	call	0x18f0


0x28cb:	jmp	0x1b41


0x1ddb:	mov	eax, dword ptr [rsp + 0x2c]
0x1ddf:	jmp	0x1ae0


0x1b6b:	mov	eax, dword ptr [rsp + 0x2c]
0x1b6f:	jmp	0x1ae0


0x1bd4:	mov	rsi, qword ptr [rip + 0x209445]
0x1bdb:	lea	rdi, [rip + 0x209436]
0x1be2:	call	0x2a40


0x2330:	lea	rdi, [rip + 0x208ce1]
0x2337:	mov	esi, 1
0x233c:	call	0x2a40


0x2341:	jmp	0x1eef


0x2354:	lea	rdi, [rip + 0x208cbd]
0x235b:	xor	esi, esi
0x235d:	call	0x2a40


0x2362:	jmp	0x1ee1


0x1d09:	mov	eax, dword ptr [rsp + 0x2c]
0x1d0d:	jmp	0x1ae0


0x1ebb:	movsxd	rax, dword ptr [rip + 0x2091f6]
0x1ec2:	cmp	eax, ebp
0x1ec4:	jl	0x1e98


0x1e98:	lea	edx, [rax + 1]
0x1e9b:	mov	rdi, qword ptr [rbx + rax*8]
0x1e9f:	mov	r8, qword ptr [rsp + 8]
0x1ea4:	mov	r9, r15
0x1ea7:	mov	rcx, r14
0x1eaa:	mov	rsi, r12
0x1ead:	mov	dword ptr [rip + 0x209205], edx
0x1eb3:	mov	rdx, r13
0x1eb6:	call	0x3ae0


0x1e38:	test	eax, eax
0x1e3a:	jne	0x280e


0x1e40:	xor	eax, eax
0x1e42:	jmp	0x1da1


0x280e:	mov	rdi, r12
0x2811:	call	0x5d50


0x1d33:	test	eax, eax
0x1d35:	jne	0x272f


0x272f:	lea	rsi, [rip + 0x55b2]
0x2736:	mov	edx, 5
0x273b:	xor	edi, edi
0x273d:	call	0x16f0


0x2742:	xor	esi, esi
0x2744:	mov	rdx, rax
0x2747:	mov	edi, 1
0x274c:	xor	eax, eax
0x274e:	call	0x18f0


0x2753:	lea	rsi, [rip + 0x578e]
0x275a:	mov	edx, 5
0x275f:	xor	edi, edi
0x2761:	call	0x16f0


0x2766:	xor	esi, esi
0x2768:	mov	rdx, rax
0x276b:	mov	edi, 1
0x2770:	xor	eax, eax
0x2772:	call	0x18f0


0x2777:	mov	rdx, qword ptr [rip + 0x208a3a]
0x277e:	mov	esi, 3
0x2783:	xor	edi, edi
0x2785:	call	0x5b80


0x1f21:	test	eax, eax
0x1f23:	jne	0x2367


0x1f29:	mov	r12, qword ptr [rip + 0x209180]
0x1f30:	test	r12, r12
0x1f33:	je	0x2873


0x2367:	lea	rsi, [rip + 0x5bc6]
0x236e:	mov	rdi, rbx
0x2371:	call	0x3db0


0x2873:	mov	rdx, qword ptr [rip + 0x208936]
0x287a:	mov	esi, 3
0x287f:	xor	edi, edi
0x2881:	call	0x5b80


0x1f39:	mov	rbx, qword ptr [rip + 0x209278]
0x1f40:	lea	rsi, [rip + 0x6063]
0x1f47:	mov	rdi, rbx
0x1f4a:	call	0x1810


0x1f4f:	test	eax, eax
0x1f51:	jne	0x25c6


0x1f57:	mov	rbx, qword ptr [rip + 0x209152]
0x1f5e:	test	rbx, rbx
0x1f61:	je	0x2840


0x25c6:	lea	rsi, [rip + 0x5967]
0x25cd:	mov	rdi, rbx
0x25d0:	call	0x3db0


0x2840:	mov	rdx, qword ptr [rip + 0x208971]
0x2847:	mov	esi, 3
0x284c:	xor	edi, edi
0x284e:	call	0x5b80


0x1f67:	cmp	r12, rbx
0x1f6a:	je	0x27aa


0x27aa:	lea	rsi, [rip + 0x5567]
0x27b1:	mov	edx, 5
0x27b6:	xor	edi, edi
0x27b8:	call	0x16f0


0x1f70:	mov	esi, 2
0x1f75:	mov	rdi, r12
0x1f78:	lea	r14, [rsp + 0x40]
0x1f7d:	call	0x3d80


0x1f82:	lea	r13, [rsp + 0x60]
0x1f87:	mov	esi, 2
0x1f8c:	mov	rdi, rbx
0x1f8f:	call	0x3d80


0x1f94:	mov	edx, 1
0x1f99:	mov	rsi, r14
0x1f9c:	mov	rdi, r12
0x1f9f:	mov	qword ptr [rsp + 0x40], 0
0x1fa8:	mov	qword ptr [rsp + 0x48], 0
0x1fb1:	mov	qword ptr [rsp + 0x50], 0
0x1fba:	call	0x35e0


0x1fbf:	mov	edx, 2
0x1fc4:	mov	rsi, r13
0x1fc7:	mov	rdi, rbx
0x1fca:	mov	qword ptr [rsp + 0x60], 0
0x1fd3:	mov	qword ptr [rsp + 0x68], 0
0x1fdc:	mov	qword ptr [rsp + 0x70], 0
0x1fe5:	call	0x35e0


0x1fea:	cmp	byte ptr [rip + 0x209197], 0
0x1ff1:	je	0x202d


0x202d:	cmp	byte ptr [rip + 0x2090cc], 0
0x2034:	je	0x2264


0x1ff3:	mov	rax, qword ptr [rsp + 0x40]
0x1ff8:	test	rax, rax
0x1ffb:	je	0x2009


0x2264:	mov	rax, qword ptr [rsp + 0x40]
0x2269:	test	rax, rax
0x226c:	je	0x2054


0x203a:	cmp	qword ptr [rsp + 0x40], 0
0x2040:	mov	rax, qword ptr [rsp + 0x60]
0x2045:	jne	0x25dd


0x2009:	mov	qword ptr [rip + 0x209170], rax
0x2010:	mov	rax, qword ptr [rsp + 0x60]
0x2015:	test	rax, rax
0x2018:	je	0x2026


0x1ffd:	mov	rax, qword ptr [rsp + 0x50]
0x2002:	mov	rax, qword ptr [rax]
0x2005:	mov	rax, qword ptr [rax + 0x18]
0x2009:	mov	qword ptr [rip + 0x209170], rax
0x2010:	mov	rax, qword ptr [rsp + 0x60]
0x2015:	test	rax, rax
0x2018:	je	0x2026


0x2054:	xor	eax, eax
0x2056:	cmp	dword ptr [rip + 0x2090f3], 2
0x205d:	mov	qword ptr [rsp + 0x38], 0
0x2066:	je	0x2082


0x2272:	cmp	qword ptr [rsp + 0x60], 0
0x2278:	je	0x2056


0x204b:	test	rax, rax
0x204e:	jne	0x2657


0x25dd:	mov	rdx, qword ptr [rsp + 0x50]
0x25e2:	test	rax, rax
0x25e5:	lea	rsi, [rip + 0x208b34]
0x25ec:	mov	rdi, qword ptr [rdx]
0x25ef:	jne	0x265e


0x2026:	mov	qword ptr [rip + 0x20914b], rax
0x202d:	cmp	byte ptr [rip + 0x2090cc], 0
0x2034:	je	0x2264


0x201a:	mov	rax, qword ptr [rsp + 0x70]
0x201f:	mov	rax, qword ptr [rax]
0x2022:	mov	rax, qword ptr [rax + 0x18]
0x2026:	mov	qword ptr [rip + 0x20914b], rax
0x202d:	cmp	byte ptr [rip + 0x2090cc], 0
0x2034:	je	0x2264


0x2082:	cmp	byte ptr [rip + 0x209114], 0
0x2089:	jne	0x26dd


0x2068:	cmp	byte ptr [rip + 0x209129], 0
0x206f:	je	0x239c


0x2056:	cmp	dword ptr [rip + 0x2090f3], 2
0x205d:	mov	qword ptr [rsp + 0x38], 0
0x2066:	je	0x2082


0x227e:	mov	rax, qword ptr [rsp + 0x70]
0x2283:	mov	r9, qword ptr [rip + 0x208d8e]
0x228a:	mov	r8, qword ptr [rip + 0x208d8f]
0x2291:	mov	rdx, qword ptr [rax]
0x2294:	mov	rax, qword ptr [rsp + 0x50]
0x2299:	mov	rax, qword ptr [rax]
0x229c:	lea	rcx, [rdx + 0x28]
0x22a0:	mov	rdx, qword ptr [rdx + 0x18]
0x22a4:	mov	rdi, qword ptr [rax + 0x18]
0x22a8:	lea	rsi, [rax + 0x28]
0x22ac:	call	0x2d40


0x2657:	lea	rdi, [rip + 0x208ac2]
0x265e:	mov	rax, qword ptr [rsp + 0x70]
0x2663:	mov	rsi, qword ptr [rax]
0x2666:	jmp	0x25f1


0x25f1:	call	0x2fd0


0x265e:	mov	rax, qword ptr [rsp + 0x70]
0x2663:	mov	rsi, qword ptr [rax]
0x2666:	jmp	0x25f1


0x208f:	movzx	eax, byte ptr [rip + 0x209106]
0x2096:	test	al, al
0x2098:	jne	0x2547


0x26dd:	xor	r15d, r15d
0x26e0:	test	rax, rax
0x26e3:	jne	0x268d


0x239c:	test	rax, rax
0x239f:	je	0x2540


0x2075:	cmp	byte ptr [rip + 0x20911d], 0
0x207c:	je	0x239c


0x209e:	mov	rdi, qword ptr [rsp + 0x38]
0x20a3:	call	0x1650


0x2547:	cmp	qword ptr [rsp + 0x60], 0
0x254d:	je	0x209e


0x26e5:	movzx	eax, byte ptr [rip + 0x208ab0]
0x26ec:	test	al, al
0x26ee:	je	0x209e


0x268d:	mov	rax, qword ptr [rsp + 0x50]
0x2692:	lea	rsi, [rip + 0x208a87]
0x2699:	mov	rdi, qword ptr [rax]
0x269c:	call	0x2fd0


0x2540:	movzx	eax, byte ptr [rip + 0x208c55]
0x2547:	cmp	qword ptr [rsp + 0x60], 0
0x254d:	je	0x209e


0x23a5:	movzx	r15d, byte ptr [rip + 0x208df0]
0x23ad:	test	r15b, r15b
0x23b0:	jne	0x268d


0x2553:	test	al, al
0x2555:	jne	0x2674


0x26f4:	jmp	0x240a


0x23b6:	mov	r15d, 1
0x23bc:	cmp	qword ptr [rsp + 0x60], 0
0x23c2:	je	0x23cb


0x255b:	cmp	qword ptr [rsp + 0x40], 0
0x2561:	jne	0x2668


0x2674:	mov	rax, qword ptr [rsp + 0x70]
0x2679:	lea	rdi, [rip + 0x208aa0]
0x2680:	mov	rsi, qword ptr [rax]
0x2683:	call	0x2fd0


0x240a:	cmp	qword ptr [rsp + 0x60], 0
0x2410:	jne	0x2553


0x23cb:	lea	rbp, [rsp + 0x38]
0x23d0:	mov	edx, 1
0x23d5:	mov	rsi, rbp
0x23d8:	mov	rdi, r12
0x23db:	call	0x31f0


0x23c4:	mov	byte ptr [rip + 0x208dcf], 1
0x23cb:	lea	rbp, [rsp + 0x38]
0x23d0:	mov	edx, 1
0x23d5:	mov	rsi, rbp
0x23d8:	mov	rdi, r12
0x23db:	call	0x31f0


0x2567:	lea	rbp, [rsp + 0x38]
0x256c:	lea	r15, [rip + 0x208bad]
0x2573:	mov	edx, 2
0x2578:	mov	rsi, rbp
0x257b:	mov	rdi, rbx
0x257e:	call	0x31f0


0x2668:	mov	byte ptr [rip + 0x208b2b], 1
0x266f:	jmp	0x2567


0x2416:	mov	rdi, qword ptr [rsp + 0x38]
0x241b:	test	rdi, rdi
0x241e:	je	0x20a3


0x20a3:	call	0x1650


0x2424:	call	0x2c70


0x2429:	jmp	0x209e


0x2583:	test	al, al
0x2585:	je	0x2416


0x258b:	cmp	byte ptr [rip + 0x208c0a], 0
0x2592:	jne	0x25a2


0x2594:	cmp	byte ptr [rip + 0x208bfe], 0
0x259b:	je	0x2573


0x25a2:	mov	rsi, qword ptr [rsp + 0x38]
0x25a7:	mov	rdi, r15
0x25aa:	call	0x2fd0


0x2573:	mov	edx, 2
0x2578:	mov	rsi, rbp
0x257b:	mov	rdi, rbx
0x257e:	call	0x31f0


0x259d:	jmp	0x2416


0x23e0:	test	al, al
0x23e2:	je	0x23fa


0x23fa:	movzx	eax, byte ptr [rip + 0x208d9b]
0x2401:	test	al, al
0x2403:	jne	0x240a


0x23e4:	cmp	byte ptr [rip + 0x208db2], 0
0x23eb:	jne	0x26a6


0x2405:	test	r15b, r15b
0x2408:	je	0x2416


0x23f1:	cmp	byte ptr [rip + 0x208da0], 0
0x23f8:	je	0x23d0


0x26a6:	mov	rdi, qword ptr [rsp + 0x38]
0x26ab:	lea	rsi, [rip + 0x208a6e]
0x26b2:	call	0x2fd0


0x23d0:	mov	edx, 1
0x23d5:	mov	rsi, rbp
0x23d8:	mov	rdi, r12
0x23db:	call	0x31f0


0x20a8:	lea	rsi, [r14 + 0x10]
0x20ac:	lea	rdi, [r14 + 8]
0x20b0:	call	0x2cf0


0x20b5:	lea	rsi, [r13 + 0x10]
0x20b9:	lea	rdi, [r13 + 8]
0x20bd:	call	0x2cf0


0x20c2:	mov	rdi, r12
0x20c5:	call	0x6bb0


0x20ca:	test	eax, eax
0x20cc:	jne	0x27d6


0x20d2:	mov	rdi, rbx
0x20d5:	call	0x6bb0


0x27d6:	mov	rdx, qword ptr [rip + 0x2089d3]
0x27dd:	mov	esi, 3
0x27e2:	xor	edi, edi
0x27e4:	call	0x5b80


0x20da:	test	eax, eax
0x20dc:	jne	0x2777


0x20e2:	cmp	byte ptr [rip + 0x2090af], 0
0x20e9:	jne	0x2753


0x20ef:	cmp	byte ptr [rip + 0x2090a3], 0
0x20f6:	jne	0x2753


0x20fc:	xor	eax, eax
0x20fe:	mov	rbx, qword ptr [rsp + 0x88]
0x2106:	xor	rbx, qword ptr fs:[0x28]
0x210f:	jne	0x2809


0x2115:	add	rsp, 0x98
0x211c:	pop	rbx
0x211d:	pop	rbp
0x211e:	pop	r12
0x2120:	pop	r13
0x2122:	pop	r14
0x2124:	pop	r15
0x2126:	ret	


0x2809:	call	0x1720


0x26b7:	cmp	byte ptr [rip + 0x208ada], 0
0x26be:	je	0x23d0


0x26c4:	cmp	byte ptr [rip + 0x208ad2], 0
0x26cb:	jne	0x23d0


0x26d1:	jmp	0x23fa


0x25af:	cmp	byte ptr [rip + 0x208be3], 0
0x25b6:	je	0x2573


0x25b8:	cmp	byte ptr [rip + 0x208bdd], 0
0x25bf:	jne	0x2573


0x25c1:	jmp	0x2416


0x2688:	jmp	0x255b


0x26a1:	jmp	0x23bc


0x23bc:	cmp	qword ptr [rsp + 0x60], 0
0x23c2:	je	0x23cb


0x25f6:	cmp	qword ptr [rsp + 0x40], 0
0x25fc:	mov	qword ptr [rip + 0x208bc9], 0
0x2607:	mov	qword ptr [rip + 0x208bc6], 0
0x2612:	je	0x262d


0x262d:	cmp	qword ptr [rsp + 0x60], 0
0x2633:	je	0x2264


0x2614:	mov	edx, 1
0x2619:	mov	rsi, r14
0x261c:	mov	rdi, r12
0x261f:	mov	qword ptr [rsp + 0x40], 0
0x2628:	call	0x35e0


0x2639:	mov	edx, 2
0x263e:	mov	rsi, r13
0x2641:	mov	rdi, rbx
0x2644:	mov	qword ptr [rsp + 0x60], 0
0x264d:	call	0x35e0


0x2652:	jmp	0x2264


0x22b1:	test	eax, eax
0x22b3:	js	0x242e


0x242e:	cmp	byte ptr [rip + 0x208d68], 0
0x2435:	jne	0x2527


0x22b9:	je	0x2172


0x243b:	mov	edx, 1
0x2440:	mov	rsi, r14
0x2443:	mov	rdi, r12
0x2446:	mov	qword ptr [rsp + 0x40], 0
0x244f:	call	0x35e0


0x2527:	mov	rax, qword ptr [rsp + 0x50]
0x252c:	lea	rsi, [rip + 0x208bed]
0x2533:	mov	rdi, qword ptr [rax]
0x2536:	call	0x2fd0


0x2172:	mov	edx, 1
0x2177:	mov	rsi, r14
0x217a:	mov	rdi, r12
0x217d:	call	0x35e0


0x22bf:	cmp	byte ptr [rip + 0x208ed6], 0
0x22c6:	jne	0x2460


0x22cc:	mov	edx, 2
0x22d1:	mov	rsi, r13
0x22d4:	mov	rdi, rbx
0x22d7:	mov	qword ptr [rsp + 0x60], 0
0x22e0:	call	0x35e0


0x2460:	mov	rax, qword ptr [rsp + 0x70]
0x2465:	lea	rdi, [rip + 0x208cb4]
0x246c:	mov	rsi, qword ptr [rax]
0x246f:	call	0x2fd0


0x2474:	jmp	0x22cc


0x253b:	jmp	0x243b


0x22e5:	mov	rax, qword ptr [rsp + 0x40]
0x22ea:	mov	byte ptr [rip + 0x208ea9], 1
0x22f1:	test	rax, rax
0x22f4:	jne	0x2272


0x22fa:	jmp	0x2054


0x2182:	test	al, al
0x2184:	jne	0x2130


0x2186:	add	qword ptr [rsp + 0x40], 1
0x218c:	mov	byte ptr [rsp + 0x10], 1
0x2191:	jmp	0x21da


0x2130:	mov	rax, qword ptr [rsp + 0x70]
0x2135:	mov	rcx, qword ptr [rsp + 0x40]
0x213a:	mov	r9, qword ptr [rip + 0x208ed7]
0x2141:	mov	r8, qword ptr [rip + 0x208ed8]
0x2148:	mov	rdx, qword ptr [rax]
0x214b:	mov	rax, qword ptr [rsp + 0x50]
0x2150:	mov	rax, qword ptr [rax + rcx*8 - 8]
0x2155:	lea	rcx, [rdx + 0x28]
0x2159:	mov	rdx, qword ptr [rdx + 0x18]
0x215d:	mov	rdi, qword ptr [rax + 0x18]
0x2161:	lea	rsi, [rax + 0x28]
0x2165:	call	0x2d40


0x21da:	mov	edx, 2
0x21df:	mov	rsi, r13
0x21e2:	mov	rdi, rbx
0x21e5:	call	0x35e0


0x216a:	test	eax, eax
0x216c:	jne	0x249f


0x249f:	mov	byte ptr [rsp + 0x10], 0
0x24a4:	jmp	0x21da


0x21ea:	test	al, al
0x21ec:	jne	0x2198


0x21ee:	add	qword ptr [rsp + 0x60], 1
0x21f4:	mov	byte ptr [rsp + 0x1f], 1
0x21f9:	cmp	byte ptr [rip + 0x208f9b], 0
0x2200:	jne	0x24a9


0x2198:	mov	rax, qword ptr [rsp + 0x70]
0x219d:	mov	rdx, qword ptr [rsp + 0x60]
0x21a2:	mov	r9, qword ptr [rip + 0x208e6f]
0x21a9:	mov	r8, qword ptr [rip + 0x208e70]
0x21b0:	mov	rdx, qword ptr [rax + rdx*8 - 8]
0x21b5:	mov	rax, qword ptr [rsp + 0x50]
0x21ba:	mov	rax, qword ptr [rax]
0x21bd:	lea	rcx, [rdx + 0x28]
0x21c1:	mov	rdx, qword ptr [rdx + 0x18]
0x21c5:	mov	rdi, qword ptr [rax + 0x18]
0x21c9:	lea	rsi, [rax + 0x28]
0x21cd:	call	0x2d40


0x2206:	cmp	byte ptr [rsp + 0x10], 0
0x220b:	jne	0x2479


0x24a9:	cmp	qword ptr [rsp + 0x40], 1
0x24af:	mov	qword ptr [rsp + 8], 0
0x24b8:	je	0x2206


0x2211:	mov	rax, qword ptr [rsp + 0x50]
0x2216:	mov	rdx, qword ptr [rsp + 0x40]
0x221b:	lea	rdx, [rax + rdx*8 - 8]
0x2220:	mov	rcx, qword ptr [rax]
0x2223:	mov	rsi, qword ptr [rdx]
0x2226:	mov	qword ptr [rax], rsi
0x2229:	mov	qword ptr [rdx], rcx
0x222c:	mov	qword ptr [rsp + 0x40], 1
0x2235:	cmp	byte ptr [rsp + 0x1f], 0
0x223a:	jne	0x2487


0x2479:	mov	qword ptr [rsp + 0x40], 0
0x2482:	jmp	0x2235


0x2240:	mov	rax, qword ptr [rsp + 0x70]
0x2245:	mov	rdx, qword ptr [rsp + 0x60]
0x224a:	lea	rdx, [rax + rdx*8 - 8]
0x224f:	mov	rcx, qword ptr [rax]
0x2252:	mov	rsi, qword ptr [rdx]
0x2255:	mov	qword ptr [rax], rsi
0x2258:	mov	qword ptr [rdx], rcx
0x225b:	mov	qword ptr [rsp + 0x60], 1
0x2264:	mov	rax, qword ptr [rsp + 0x40]
0x2269:	test	rax, rax
0x226c:	je	0x2054


0x2487:	mov	qword ptr [rsp + 0x60], 0
0x2490:	jmp	0x2264


0x2235:	cmp	byte ptr [rsp + 0x1f], 0
0x223a:	jne	0x2487


0x2509:	add	qword ptr [rsp + 8], 1
0x250f:	mov	rax, qword ptr [rsp + 0x40]
0x2514:	mov	rcx, qword ptr [rsp + 8]
0x2519:	sub	rax, 1
0x251d:	cmp	rcx, rax
0x2520:	jb	0x24c0


0x24c0:	xor	r15d, r15d
0x24c3:	cmp	qword ptr [rsp + 0x60], 1
0x24c9:	mov	rax, qword ptr [rsp + 8]
0x24ce:	lea	rbp, [rax*8]
0x24d6:	je	0x2509


0x2522:	jmp	0x2206


0x24fb:	mov	rax, qword ptr [rsp + 0x60]
0x2500:	lea	rdx, [rax - 1]
0x2504:	cmp	r15, rdx
0x2507:	jb	0x24e0


0x24e0:	mov	rdx, qword ptr [rsp + 0x70]
0x24e5:	mov	rsi, qword ptr [rdx + r15*8]
0x24e9:	mov	rdx, qword ptr [rsp + 0x50]
0x24ee:	add	r15, 1
0x24f2:	mov	rdi, qword ptr [rdx + rbp]
0x24f6:	call	0x2fd0


0x21d2:	test	eax, eax
0x21d4:	jne	0x2495


0x2495:	mov	byte ptr [rsp + 0x1f], 0
0x249a:	jmp	0x21f9


0x21f9:	cmp	byte ptr [rip + 0x208f9b], 0
0x2200:	jne	0x24a9


0x2454:	mov	byte ptr [rip + 0x208d3f], 1
0x245b:	jmp	0x2264


0x27bd:	mov	rbx, rax
0x27c0:	call	0x1670


0x27c5:	mov	esi, dword ptr [rax]
0x27c7:	mov	rdx, rbx
0x27ca:	mov	edi, 1
0x27cf:	xor	eax, eax
0x27d1:	call	0x18f0


0x25d5:	mov	rbx, rax
0x25d8:	jmp	0x1f5e


0x1f5e:	test	rbx, rbx
0x1f61:	je	0x2840


0x2376:	mov	r12, rax
0x2379:	jmp	0x1f30


0x1f30:	test	r12, r12
0x1f33:	je	0x2873


0x27e9:	mov	rbx, rax
0x27ec:	call	0x1670


0x27f1:	mov	esi, dword ptr [rax]
0x27f3:	lea	rdx, [rip + 0x5558]
0x27fa:	mov	rcx, rbx
0x27fd:	mov	edi, 1
0x2802:	xor	eax, eax
0x2804:	call	0x18f0


0x2853:	mov	rbx, rax
0x2856:	call	0x1670


0x285b:	mov	esi, dword ptr [rax]
0x285d:	lea	rdx, [rip + 0x54ee]
0x2864:	mov	rcx, rbx
0x2867:	mov	edi, 1
0x286c:	xor	eax, eax
0x286e:	call	0x18f0


0x2886:	mov	rbx, rax
0x2889:	call	0x1670


0x288e:	mov	esi, dword ptr [rax]
0x2890:	lea	rdx, [rip + 0x54bb]
0x2897:	mov	rcx, rbx
0x289a:	mov	edi, 1
0x289f:	xor	eax, eax
0x28a1:	call	0x18f0


0x278a:	mov	rbx, rax
0x278d:	call	0x1670


0x2792:	mov	esi, dword ptr [rax]
0x2794:	lea	rdx, [rip + 0x55b7]
0x279b:	mov	rcx, rbx
0x279e:	mov	edi, 1
0x27a3:	xor	eax, eax
0x27a5:	call	0x18f0


0x3d2a:	mov	esi, dword ptr [rbx]
0x3d2c:	lea	rdx, [rip + 0x4221]
0x3d33:	mov	rcx, rax
0x3d36:	mov	r8, rbp
0x3d39:	xor	edi, edi
0x3d3b:	xor	eax, eax
0x3d3d:	call	0x18f0


0x669f:	mov	rcx, r12
0x66a2:	mov	rdx, rbx
0x66a5:	mov	esi, 8
0x66aa:	xor	edi, edi
0x66ac:	mov	rbp, rax
0x66af:	call	0x59f0


0x66b4:	lea	rsi, [rip + 0x2195]
0x66bb:	mov	rbx, rax
0x66be:	mov	edx, 5
0x66c3:	xor	edi, edi
0x66c5:	call	0x16f0


0x66ca:	mov	r8, rbp
0x66cd:	mov	rcx, rbx
0x66d0:	mov	edi, dword ptr [rip + 0x204962]
0x66d6:	pop	rbx
0x66d7:	pop	rbp
0x66d8:	pop	r12
0x66da:	pop	r13
0x66dc:	pop	r14
0x66de:	mov	rdx, rax
0x66e1:	xor	esi, esi
0x66e3:	xor	eax, eax
0x66e5:	jmp	0x18f0


0x54fc:	add	rsp, 0x20
0x5500:	mov	r11, qword ptr [rsp + 0x10]
0x5505:	cmp	r11, rax
0x5508:	ja	0x5571


0x550a:	lea	rsi, [rax + 1]
0x550e:	lea	rax, [rip + 0x205ceb]
0x5515:	cmp	r12, rax
0x5518:	mov	qword ptr [rbx], rsi
0x551b:	je	0x552f


0x5571:	mov	eax, dword ptr [rsp + 0x18]
0x5575:	mov	dword ptr [r13], eax
0x5579:	add	rsp, 0x28
0x557d:	mov	rax, r12
0x5580:	pop	rbx
0x5581:	pop	rbp
0x5582:	pop	r12
0x5584:	pop	r13
0x5586:	pop	r14
0x5588:	pop	r15
0x558a:	ret	


0x552f:	mov	rdi, rsi
0x5532:	mov	qword ptr [rsp + 0x10], rsi
0x5537:	call	0x63a0


0x551d:	mov	rdi, r12
0x5520:	mov	qword ptr [rsp + 0x10], rsi
0x5525:	call	0x1650


0x552a:	mov	rsi, qword ptr [rsp + 0x10]
0x552f:	mov	rdi, rsi
0x5532:	mov	qword ptr [rsp + 0x10], rsi
0x5537:	call	0x63a0


0x553c:	sub	rsp, 8
0x5540:	mov	qword ptr [rbx + 8], rax
0x5544:	mov	r8d, dword ptr [rbp]
0x5548:	push	qword ptr [rbp + 0x30]
0x554b:	push	qword ptr [rbp + 0x28]
0x554e:	mov	rcx, r14
0x5551:	push	r15
0x5553:	mov	r9d, dword ptr [rsp + 0x3c]
0x5558:	mov	rdi, rax
0x555b:	mov	rdx, qword ptr [rsp + 0x28]
0x5560:	mov	rsi, qword ptr [rsp + 0x30]
0x5565:	mov	r12, rax
0x5568:	call	0x41d0


0x5c82:	mov	rdi, qword ptr [rsp + 0x38]
0x5c87:	xor	rdi, qword ptr fs:[0x28]
0x5c90:	jne	0x5c9c


0x5c92:	add	rsp, 0x48
0x5c96:	ret	


0x5c9c:	call	0x1720


0x59cf:	mov	rcx, qword ptr [rsp + 0x38]
0x59d4:	xor	rcx, qword ptr fs:[0x28]
0x59dd:	jne	0x59e9


0x59df:	add	rsp, 0x48
0x59e3:	ret	


0x59e9:	call	0x1720


0x5a5b:	mov	rdx, qword ptr [rsp + 0x38]
0x5a60:	xor	rdx, qword ptr fs:[0x28]
0x5a69:	jne	0x5a75


0x5a6b:	add	rsp, 0x48
0x5a6f:	ret	


0x5a75:	call	0x1720


0x5bef:	mov	rcx, qword ptr [rsp + 0x38]
0x5bf4:	xor	rcx, qword ptr fs:[0x28]
0x5bfd:	jne	0x5c09


0x5bff:	add	rsp, 0x48
0x5c03:	ret	


0x5c09:	call	0x1720


0x5b1e:	mov	rsi, qword ptr [rsp + 0x38]
0x5b23:	xor	rsi, qword ptr fs:[0x28]
0x5b2c:	jne	0x5b33


0x5b2e:	add	rsp, 0x48
0x5b32:	ret	


0x5b33:	call	0x1720


0x556d:	add	rsp, 0x20
0x5571:	mov	eax, dword ptr [rsp + 0x18]
0x5575:	mov	dword ptr [r13], eax
0x5579:	add	rsp, 0x28
0x557d:	mov	rax, r12
0x5580:	pop	rbx
0x5581:	pop	rbp
0x5582:	pop	r12
0x5584:	pop	r13
0x5586:	pop	r14
0x5588:	pop	r15
0x558a:	ret	


0x57bc:	lea	rsi, [rax + 1]
0x57c0:	mov	qword ptr [rsp + 0x48], rax
0x57c5:	add	rsp, 0x20
0x57c9:	mov	rdi, rsi
0x57cc:	mov	qword ptr [rsp + 0x18], rsi
0x57d1:	call	0x63a0


0x57d6:	mov	qword ptr [rsp + 0x10], rax
0x57db:	sub	rsp, 8
0x57df:	push	qword ptr [rbx + 0x30]
0x57e2:	push	qword ptr [rbx + 0x28]
0x57e5:	mov	r10, qword ptr [rsp + 0x38]
0x57ea:	mov	r9d, ebp
0x57ed:	mov	r8d, dword ptr [rbx]
0x57f0:	mov	rcx, r15
0x57f3:	mov	rdx, r14
0x57f6:	mov	rdi, rax
0x57f9:	push	r10
0x57fb:	mov	rsi, qword ptr [rsp + 0x38]
0x5800:	call	0x41d0


0x5805:	mov	eax, dword ptr [rsp + 0x2c]
0x5809:	add	rsp, 0x20
0x580d:	test	r12, r12
0x5810:	mov	dword ptr [r13], eax
0x5814:	je	0x581f


0x581f:	mov	rax, qword ptr [rsp + 0x10]
0x5824:	add	rsp, 0x38
0x5828:	pop	rbx
0x5829:	pop	rbp
0x582a:	pop	r12
0x582c:	pop	r13
0x582e:	pop	r14
0x5830:	pop	r15
0x5832:	ret	


0x5816:	mov	r11, qword ptr [rsp + 0x28]
0x581b:	mov	qword ptr [r12], r11
0x581f:	mov	rax, qword ptr [rsp + 0x10]
0x5824:	add	rsp, 0x38
0x5828:	pop	rbx
0x5829:	pop	rbp
0x582a:	pop	r12
0x582c:	pop	r13
0x582e:	pop	r14
0x5830:	pop	r15
0x5832:	ret	


0x5731:	mov	dword ptr [rbp], r12d
0x5735:	add	rsp, 0x38
0x5739:	pop	rbx
0x573a:	pop	rbp
0x573b:	pop	r12
0x573d:	pop	r13
0x573f:	pop	r14
0x5741:	pop	r15
0x5743:	ret	


0x2816:	lea	rsi, [rip + 0x5658]
0x281d:	mov	rbx, rax
0x2820:	mov	edx, 5
0x2825:	xor	edi, edi
0x2827:	call	0x16f0


0x282c:	mov	rcx, rbx
0x282f:	mov	rdx, rax
0x2832:	xor	esi, esi
0x2834:	mov	edi, 1
0x2839:	xor	eax, eax
0x283b:	call	0x18f0


0x2705:	lea	rsi, [rip + 0x5630]
0x270c:	mov	rbx, rax
0x270f:	mov	edx, 5
0x2714:	xor	edi, edi
0x2716:	call	0x16f0


0x271b:	mov	rcx, rbx
0x271e:	mov	rdx, rax
0x2721:	xor	esi, esi
0x2723:	mov	edi, 1
0x2728:	xor	eax, eax
0x272a:	call	0x18f0


0x28fe:	lea	rsi, [rip + 0x55ca]
0x2905:	mov	rbx, rax
0x2908:	xor	edi, edi
0x290a:	mov	edx, 5
0x290f:	call	0x16f0


0x2914:	mov	rcx, rbx
0x2917:	mov	rdx, rax
0x291a:	xor	esi, esi
0x291c:	xor	edi, edi
0x291e:	xor	eax, eax
0x2920:	call	0x18f0


0x2925:	jmp	0x1b41


0x2b01:	lea	rsi, [rip + 0x5234]
0x2b08:	mov	rbx, rax
0x2b0b:	mov	edx, 5
0x2b10:	xor	edi, edi
0x2b12:	call	0x16f0


0x2b17:	mov	rcx, rbx
0x2b1a:	mov	rdx, rax
0x2b1d:	xor	esi, esi
0x2b1f:	mov	edi, 1
0x2b24:	xor	eax, eax
0x2b26:	call	0x18f0


0x2c41:	lea	rsi, [rip + 0x5111]
0x2c48:	mov	rbx, rax
0x2c4b:	mov	edx, 5
0x2c50:	xor	edi, edi
0x2c52:	call	0x16f0


0x2c57:	mov	rcx, rbx
0x2c5a:	mov	rdx, rax
0x2c5d:	xor	esi, esi
0x2c5f:	mov	edi, 1
0x2c64:	xor	eax, eax
0x2c66:	call	0x18f0


0x2c6b:	nop	dword ptr [rax + rax]


0x2bdd:	lea	rsi, [rip + 0x476c]
0x2be4:	mov	rbx, rax
0x2be7:	mov	edx, 5
0x2bec:	xor	edi, edi
0x2bee:	call	0x16f0


0x2bf3:	mov	rcx, rbx
0x2bf6:	mov	rdx, rax
0x2bf9:	xor	esi, esi
0x2bfb:	mov	edi, 1
0x2c00:	xor	eax, eax
0x2c02:	call	0x18f0


0x2c0f:	lea	rsi, [rip + 0x5143]
0x2c16:	mov	rbx, rax
0x2c19:	mov	edx, 5
0x2c1e:	xor	edi, edi
0x2c20:	call	0x16f0


0x2c25:	mov	rcx, rbx
0x2c28:	mov	rdx, rax
0x2c2b:	xor	esi, esi
0x2c2d:	mov	edi, 1
0x2c32:	xor	eax, eax
0x2c34:	call	0x18f0


0x3c65:	lea	rsi, [rip + 0x41d8]
0x3c6c:	mov	rbx, rax
0x3c6f:	mov	edx, 5
0x3c74:	xor	edi, edi
0x3c76:	call	0x16f0


0x3c7b:	xor	edi, edi
0x3c7d:	mov	rdx, rax
0x3c80:	mov	rcx, rbx
0x3c83:	xor	esi, esi
0x3c85:	xor	eax, eax
0x3c87:	call	0x18f0


0x3c8c:	mov	edi, 1
0x3c91:	call	0x36c0


0x3f31:	mov	r8, qword ptr [r14]
0x3f34:	movzx	ecx, byte ptr [rsp]
0x3f38:	lea	rsi, [rax + rbx]
0x3f3c:	mov	qword ptr [r14 + 0x10], rax
0x3f40:	mov	r13, rax
0x3f43:	movzx	edx, byte ptr [rsp + 0xf]
0x3f48:	lea	rbx, [rsi + 1]
0x3f4c:	add	r8, rax
0x3f4f:	cmp	r12d, r15d
0x3f52:	mov	byte ptr [rsi], cl
0x3f54:	jne	0x3efb


0x72bd:	add	rbx, 1
0x72c1:	cmp	rbp, rbx
0x72c4:	jne	0x72b0


0x72b0:	mov	rdx, r15
0x72b3:	mov	rsi, r14
0x72b6:	mov	edi, r13d
0x72b9:	call	qword ptr [r12 + rbx*8]






0x5fc0:	mov	r13, qword ptr [rbx + 0x10]
0x5fc4:	mov	r12, qword ptr [rbx + 8]
0x5fc8:	lea	rsi, [rip + 0x24f7]
0x5fcf:	mov	rbx, qword ptr [rbx]
0x5fd2:	mov	edx, 5
0x5fd7:	xor	edi, edi
0x5fd9:	call	0x16f0


0x6100:	mov	r9, qword ptr [rbx + 0x10]
0x6104:	mov	r13, qword ptr [rbx + 0x30]
0x6108:	lea	rsi, [rip + 0x2559]
0x610f:	mov	r12, qword ptr [rbx + 0x28]
0x6113:	mov	r15, qword ptr [rbx + 0x20]
0x6117:	mov	edx, 5
0x611c:	mov	r14, qword ptr [rbx + 0x18]
0x6120:	mov	r8, qword ptr [rbx + 8]
0x6124:	xor	edi, edi
0x6126:	mov	qword ptr [rsp + 8], r9
0x612b:	mov	rbx, qword ptr [rbx]
0x612e:	mov	qword ptr [rsp], r8
0x6132:	call	0x16f0


0x5ee0:	mov	r10, qword ptr [rbx + 0x40]
0x5ee4:	mov	r9, qword ptr [rbx + 0x38]
0x5ee8:	lea	rsi, [rip + 0x27d9]
0x5eef:	mov	rax, qword ptr [rbx + 0x10]
0x5ef3:	mov	r8, qword ptr [rbx + 8]
0x5ef7:	mov	edx, 5
0x5efc:	mov	r13, qword ptr [rbx + 0x30]
0x5f00:	mov	r12, qword ptr [rbx + 0x28]
0x5f04:	mov	r15, qword ptr [rbx + 0x20]
0x5f08:	mov	r14, qword ptr [rbx + 0x18]
0x5f0c:	mov	rbx, qword ptr [rbx]
0x5f0f:	mov	qword ptr [rsp + 0x18], r10
0x5f14:	mov	qword ptr [rsp + 0x10], r9
0x5f19:	mov	qword ptr [rsp], rax
0x5f1d:	mov	qword ptr [rsp + 8], r8
0x5f22:	xor	edi, edi
0x5f24:	call	0x16f0


0x5ea6:	add	rsp, 0x28
0x5eaa:	pop	rbx
0x5eab:	pop	rbp
0x5eac:	pop	r12
0x5eae:	pop	r13
0x5eb0:	pop	r14
0x5eb2:	pop	r15
0x5eb4:	ret	


0x6068:	mov	r15, qword ptr [rbx + 0x20]
0x606c:	lea	rsi, [rip + 0x25a5]
0x6073:	mov	edx, 5
0x6078:	xor	edi, edi
0x607a:	mov	r14, qword ptr [rbx + 0x18]
0x607e:	mov	r13, qword ptr [rbx + 0x10]
0x6082:	mov	r12, qword ptr [rbx + 8]
0x6086:	mov	rbx, qword ptr [rbx]
0x6089:	call	0x16f0


0x6010:	lea	rsi, [rip + 0x25e1]
0x6017:	mov	edx, 5
0x601c:	xor	edi, edi
0x601e:	mov	r14, qword ptr [rbx + 0x18]
0x6022:	mov	r13, qword ptr [rbx + 0x10]
0x6026:	mov	r12, qword ptr [rbx + 8]
0x602a:	mov	rbx, qword ptr [rbx]
0x602d:	call	0x16f0


0x5e30:	mov	r9, qword ptr [rbx + 0x38]
0x5e34:	mov	rax, qword ptr [rbx + 0x10]
0x5e38:	lea	rsi, [rip + 0x2859]
0x5e3f:	mov	r8, qword ptr [rbx + 8]
0x5e43:	mov	edx, 5
0x5e48:	xor	edi, edi
0x5e4a:	mov	r13, qword ptr [rbx + 0x30]
0x5e4e:	mov	r12, qword ptr [rbx + 0x28]
0x5e52:	mov	qword ptr [rsp + 0x10], r9
0x5e57:	mov	r15, qword ptr [rbx + 0x20]
0x5e5b:	mov	r14, qword ptr [rbx + 0x18]
0x5e5f:	mov	qword ptr [rsp], rax
0x5e63:	mov	qword ptr [rsp + 8], r8
0x5e68:	mov	rbx, qword ptr [rbx]
0x5e6b:	call	0x16f0


0x5f78:	mov	r12, qword ptr [rbx + 8]
0x5f7c:	lea	rsi, [rip + 0x252c]
0x5f83:	mov	rbx, qword ptr [rbx]
0x5f86:	mov	edx, 5
0x5f8b:	xor	edi, edi
0x5f8d:	call	0x16f0


0x5f38:	mov	rbx, qword ptr [rbx]
0x5f3b:	lea	rsi, [rip + 0x255d]
0x5f42:	mov	edx, 5
0x5f47:	xor	edi, edi
0x5f49:	call	0x16f0


0x6098:	mov	r8, qword ptr [rbx + 8]
0x609c:	mov	r12, qword ptr [rbx + 0x28]
0x60a0:	lea	rsi, [rip + 0x2599]
0x60a7:	mov	r15, qword ptr [rbx + 0x20]
0x60ab:	mov	r14, qword ptr [rbx + 0x18]
0x60af:	mov	edx, 5
0x60b4:	mov	r13, qword ptr [rbx + 0x10]
0x60b8:	xor	edi, edi
0x60ba:	mov	rbx, qword ptr [rbx]
0x60bd:	mov	qword ptr [rsp], r8
0x60c1:	call	0x16f0


0x60c6:	sub	rsp, 8
0x60ca:	mov	r9, r13
0x60cd:	push	r12
0x60cf:	push	r15
0x60d1:	push	r14
0x60d3:	mov	r8, qword ptr [rsp + 0x20]
0x60d8:	mov	rcx, rbx
0x60db:	mov	rdx, rax
0x60de:	mov	rdi, rbp
0x60e1:	mov	esi, 1
0x60e6:	xor	eax, eax
0x60e8:	call	0x1960


0x60ed:	add	rsp, 0x20
0x60f1:	add	rsp, 0x28
0x60f5:	pop	rbx
0x60f6:	pop	rbp
0x60f7:	pop	r12
0x60f9:	pop	r13
0x60fb:	pop	r14
0x60fd:	pop	r15
0x60ff:	ret	


0x5f4e:	add	rsp, 0x28
0x5f52:	mov	rcx, rbx
0x5f55:	mov	rdi, rbp
0x5f58:	pop	rbx
0x5f59:	pop	rbp
0x5f5a:	pop	r12
0x5f5c:	pop	r13
0x5f5e:	pop	r14
0x5f60:	pop	r15
0x5f62:	mov	rdx, rax
0x5f65:	mov	esi, 1
0x5f6a:	xor	eax, eax
0x5f6c:	jmp	0x1960


0x5f92:	add	rsp, 0x28
0x5f96:	mov	r8, r12
0x5f99:	mov	rcx, rbx
0x5f9c:	mov	rdi, rbp
0x5f9f:	mov	rdx, rax
0x5fa2:	mov	esi, 1
0x5fa7:	pop	rbx
0x5fa8:	pop	rbp
0x5fa9:	pop	r12
0x5fab:	pop	r13
0x5fad:	pop	r14
0x5faf:	pop	r15
0x5fb1:	xor	eax, eax
0x5fb3:	jmp	0x1960


0x5e70:	sub	rsp, 8
0x5e74:	mov	r9, qword ptr [rsp + 0x18]
0x5e79:	mov	rdx, rax
0x5e7c:	mov	rcx, rbx
0x5e7f:	mov	esi, 1
0x5e84:	mov	rdi, rbp
0x5e87:	xor	eax, eax
0x5e89:	push	r9
0x5e8b:	push	r13
0x5e8d:	push	r12
0x5e8f:	push	r15
0x5e91:	push	r14
0x5e93:	mov	r9, qword ptr [rsp + 0x30]
0x5e98:	mov	r8, qword ptr [rsp + 0x38]
0x5e9d:	call	0x1960


0x6032:	sub	rsp, 8
0x6036:	push	r14
0x6038:	mov	rdx, rax
0x603b:	mov	r9, r13
0x603e:	mov	r8, r12
0x6041:	mov	rcx, rbx
0x6044:	mov	rdi, rbp
0x6047:	mov	esi, 1
0x604c:	xor	eax, eax
0x604e:	call	0x1960


0x6053:	pop	rax
0x6054:	pop	rdx
0x6055:	add	rsp, 0x28
0x6059:	pop	rbx
0x605a:	pop	rbp
0x605b:	pop	r12
0x605d:	pop	r13
0x605f:	pop	r14
0x6061:	pop	r15
0x6063:	ret	


0x608e:	push	r15
0x6090:	jmp	0x6036


0x6036:	push	r14
0x6038:	mov	rdx, rax
0x603b:	mov	r9, r13
0x603e:	mov	r8, r12
0x6041:	mov	rcx, rbx
0x6044:	mov	rdi, rbp
0x6047:	mov	esi, 1
0x604c:	xor	eax, eax
0x604e:	call	0x1960


0x6137:	push	r13
0x6139:	push	r12
0x613b:	push	r15
0x613d:	push	r14
0x613f:	mov	r9, qword ptr [rsp + 0x28]
0x6144:	jmp	0x60d3


0x60d3:	mov	r8, qword ptr [rsp + 0x20]
0x60d8:	mov	rcx, rbx
0x60db:	mov	rdx, rax
0x60de:	mov	rdi, rbp
0x60e1:	mov	esi, 1
0x60e6:	xor	eax, eax
0x60e8:	call	0x1960


0x5fde:	add	rsp, 0x28
0x5fe2:	mov	r9, r13
0x5fe5:	mov	r8, r12
0x5fe8:	mov	rcx, rbx
0x5feb:	mov	rdi, rbp
0x5fee:	mov	rdx, rax
0x5ff1:	pop	rbx
0x5ff2:	pop	rbp
0x5ff3:	pop	r12
0x5ff5:	pop	r13
0x5ff7:	pop	r14
0x5ff9:	pop	r15
0x5ffb:	mov	esi, 1
0x6000:	xor	eax, eax
0x6002:	jmp	0x1960


0x4d70:	sub	rsp, 8
0x4d74:	mov	rcx, rbp
0x4d77:	mov	rsi, r13
0x4d7a:	push	qword ptr [rsp + 0x68]
0x4d7e:	push	qword ptr [rsp + 0x78]
0x4d82:	mov	rdi, r14
0x4d85:	push	0
0x4d87:	mov	r9d, dword ptr [rsp + 0x98]
0x4d8f:	mov	r8d, dword ptr [rsp + 0x28]
0x4d94:	mov	rdx, qword ptr [rsp + 0x30]
0x4d99:	and	r9d, 0xfffffffd
0x4d9d:	call	0x41d0


0x4da2:	add	rsp, 0x20
0x4da6:	mov	r15, rax
0x4da9:	mov	rbx, qword ptr [rsp + 0xa8]
0x4db1:	xor	rbx, qword ptr fs:[0x28]
0x4dba:	mov	rax, r15
0x4dbd:	jne	0x53c3


0x4dc3:	add	rsp, 0xb8
0x4dca:	pop	rbx
0x4dcb:	pop	rbp
0x4dcc:	pop	r12
0x4dce:	pop	r13
0x4dd0:	pop	r14
0x4dd2:	pop	r15
0x4dd4:	ret	


0x53c3:	call	0x1720


0x536d:	sub	rsp, 8
0x5371:	mov	r8d, 5
0x5377:	mov	rcx, r11
0x537a:	push	qword ptr [rsp + 0x68]
0x537e:	push	qword ptr [rsp + 0x78]
0x5382:	mov	rdi, r14
0x5385:	push	qword ptr [rsp + 0x38]
0x5389:	mov	r9d, dword ptr [rsp + 0x98]
0x5391:	mov	rdx, qword ptr [rsp + 0x30]
0x5396:	mov	rsi, qword ptr [rsp + 0x70]
0x539b:	call	0x41d0


0x53a0:	add	rsp, 0x20
0x53a4:	mov	r15, rax
0x53a7:	jmp	0x4da9


0x4da9:	mov	rbx, qword ptr [rsp + 0xa8]
0x4db1:	xor	rbx, qword ptr fs:[0x28]
0x4dba:	mov	rax, r15
0x4dbd:	jne	0x53c3


0x1620:	push	qword ptr [rip + 0x2097ea]
0x1626:	jmp	qword ptr [rip + 0x2097ec]


0x162c:	nop	dword ptr [rax]


0x1636:	push	0
0x163b:	jmp	0x1620


0x1646:	push	1
0x164b:	jmp	0x1620


0x1656:	push	2
0x165b:	jmp	0x1620


0x1666:	push	3
0x166b:	jmp	0x1620


0x1676:	push	4
0x167b:	jmp	0x1620


0x1686:	push	5
0x168b:	jmp	0x1620


0x1696:	push	6
0x169b:	jmp	0x1620


0x16a6:	push	7
0x16ab:	jmp	0x1620


0x16b6:	push	8
0x16bb:	jmp	0x1620


0x16c6:	push	9
0x16cb:	jmp	0x1620


0x16d6:	push	0xa
0x16db:	jmp	0x1620


0x16e6:	push	0xb
0x16eb:	jmp	0x1620


0x16f6:	push	0xc
0x16fb:	jmp	0x1620


0x1706:	push	0xd
0x170b:	jmp	0x1620


0x1716:	push	0xe
0x171b:	jmp	0x1620


0x1726:	push	0xf
0x172b:	jmp	0x1620


0x1736:	push	0x10
0x173b:	jmp	0x1620


0x1746:	push	0x11
0x174b:	jmp	0x1620


0x1756:	push	0x12
0x175b:	jmp	0x1620


0x1766:	push	0x13
0x176b:	jmp	0x1620


0x1776:	push	0x14
0x177b:	jmp	0x1620


0x1786:	push	0x15
0x178b:	jmp	0x1620


0x1796:	push	0x16
0x179b:	jmp	0x1620


0x17a6:	push	0x17
0x17ab:	jmp	0x1620


0x17b6:	push	0x18
0x17bb:	jmp	0x1620


0x17c6:	push	0x19
0x17cb:	jmp	0x1620


0x17d6:	push	0x1a
0x17db:	jmp	0x1620


0x17e6:	push	0x1b
0x17eb:	jmp	0x1620


0x17f6:	push	0x1c
0x17fb:	jmp	0x1620


0x1806:	push	0x1d
0x180b:	jmp	0x1620


0x1816:	push	0x1e
0x181b:	jmp	0x1620


0x1826:	push	0x1f
0x182b:	jmp	0x1620


0x1836:	push	0x20
0x183b:	jmp	0x1620


0x1846:	push	0x21
0x184b:	jmp	0x1620


0x1856:	push	0x22
0x185b:	jmp	0x1620


0x1866:	push	0x23
0x186b:	jmp	0x1620


0x1876:	push	0x24
0x187b:	jmp	0x1620


0x1886:	push	0x25
0x188b:	jmp	0x1620


0x1896:	push	0x26
0x189b:	jmp	0x1620


0x18a6:	push	0x27
0x18ab:	jmp	0x1620


0x18b6:	push	0x28
0x18bb:	jmp	0x1620


0x18c6:	push	0x29
0x18cb:	jmp	0x1620


0x18d6:	push	0x2a
0x18db:	jmp	0x1620


0x18e6:	push	0x2b
0x18eb:	jmp	0x1620


0x18f6:	push	0x2c
0x18fb:	jmp	0x1620


0x1906:	push	0x2d
0x190b:	jmp	0x1620


0x1916:	push	0x2e
0x191b:	jmp	0x1620


0x1926:	push	0x2f
0x192b:	jmp	0x1620


0x1936:	push	0x30
0x193b:	jmp	0x1620


0x1946:	push	0x31
0x194b:	jmp	0x1620


0x1956:	push	0x32
0x195b:	jmp	0x1620


0x1966:	push	0x33
0x196b:	jmp	0x1620


0x1970:	jmp	qword ptr [rip + 0x20964a]




0x1976:	push	0x34
0x197b:	jmp	0x1620


0x1980:	jmp	qword ptr [rip + 0x209642]




0x1986:	push	0x35
0x198b:	jmp	0x1620


0x1996:	push	0x36
0x199b:	jmp	0x1620


0x292a:	nop	word ptr [rax + rax]


0x295a:	hlt	


0x295b:	nop	dword ptr [rax + rax]


0x2992:	nop	dword ptr [rax]
0x2996:	nop	word ptr cs:[rax + rax]


0x29e2:	nop	dword ptr [rax]
0x29e6:	nop	word ptr cs:[rax + rax]


0x2a2a:	nop	word ptr [rax + rax]


0x2a3a:	nop	word ptr [rax + rax]


0x2c98:	nop	dword ptr [rax + rax]


0x2ce2:	nop	dword ptr [rax]
0x2ce6:	nop	word ptr cs:[rax + rax]


0x2d3e:	nop	


0x2e4a:	nop	word ptr [rax + rax]


0x2ea2:	nop	dword ptr [rax]
0x2ea6:	nop	word ptr cs:[rax + rax]


0x2fc2:	nop	dword ptr [rax]
0x2fc6:	nop	word ptr cs:[rax + rax]


0x312f:	nop	


0x31e1:	nop	dword ptr [rax + rax]
0x31e6:	nop	word ptr cs:[rax + rax]


0x36b9:	nop	dword ptr [rax]


0x3ada:	nop	word ptr [rax + rax]


0x3c96:	nop	word ptr cs:[rax + rax]


0x3ca8:	nop	dword ptr [rax + rax]


0x3cb8:	nop	dword ptr [rax + rax]


0x3d64:	nop	word ptr cs:[rax + rax]
0x3d6e:	nop	


0x3d75:	nop	
0x3d76:	nop	word ptr cs:[rax + rax]


0x3da2:	nop	word ptr cs:[rax + rax]
0x3dac:	nop	dword ptr [rax]


0x3e43:	nop	word ptr cs:[rax + rax]
0x3e4d:	nop	dword ptr [rax]


0x3fc8:	nop	dword ptr [rax + rax]


0x3fda:	nop	word ptr [rax + rax]


0x3fe9:	nop	dword ptr [rax]


0x403b:	nop	dword ptr [rax + rax]


0x40df:	nop	


0x41c7:	nop	word ptr [rax + rax]


0x4263:	mov	byte ptr [rsp + 0xe], 1
0x4268:	mov	byte ptr [rsp + 0x7c], 0
0x426d:	xor	r12d, r12d
0x4270:	mov	qword ptr [rsp + 0x50], 0
0x4279:	mov	byte ptr [rsp + 0xf], 1
0x427e:	mov	byte ptr [rsp + 0xd], 0
0x4283:	lea	rax, [rip + 0x3d33]
0x428a:	mov	qword ptr [rsp + 0x18], 1
0x4293:	xor	r15d, r15d
0x4296:	mov	dword ptr [rsp + 8], 2
0x429e:	mov	qword ptr [rsp + 0x48], rax
0x42a3:	xor	r11d, r11d
0x42a6:	mov	rax, rbp
0x42a9:	mov	r8d, r12d
0x42ac:	mov	rbp, r11
0x42af:	mov	r11, rax
0x42b2:	nop	word ptr [rax + rax]
0x42b8:	cmp	r11, rbp
0x42bb:	setne	r12b
0x42bf:	cmp	r11, -1
0x42c3:	jne	0x42d2


0x42c5:	mov	rax, qword ptr [rsp + 0x10]
0x42ca:	cmp	byte ptr [rax + rbp], 0
0x42ce:	setne	r12b
0x42d2:	test	r12b, r12b
0x42d5:	je	0x4930


0x42d2:	test	r12b, r12b
0x42d5:	je	0x4930


0x4930:	cmp	dword ptr [rsp + 8], 2
0x4935:	movzx	ebx, byte ptr [rsp + 0xf]
0x493a:	mov	r12d, r8d
0x493d:	mov	rbp, r11
0x4940:	sete	dl
0x4943:	mov	eax, ebx
0x4945:	test	r15, r15
0x4948:	sete	cl
0x494b:	and	eax, edx
0x494d:	and	al, cl
0x494f:	jne	0x53b6


0x42db:	cmp	dword ptr [rsp + 8], 2
0x42e0:	mov	rdi, qword ptr [rsp + 0x10]
0x42e5:	lea	r9, [rdi + rbp]
0x42e9:	setne	al
0x42ec:	and	al, byte ptr [rsp + 0xd]
0x42f0:	mov	r10d, eax
0x42f3:	je	0x43a0


0x4955:	mov	eax, ebx
0x4957:	xor	eax, 1
0x495a:	and	dl, al
0x495c:	je	0x52cc


0x53b6:	mov	dword ptr [rsp + 8], 2
0x53be:	jmp	0x4d59


0x43a0:	movzx	ebx, byte ptr [r9]
0x43a4:	cmp	bl, 0x7e
0x43a7:	ja	0x46c8


0x42f9:	mov	rax, qword ptr [rsp + 0x18]
0x42fe:	test	rax, rax
0x4301:	je	0x4730


0x52cc:	mov	rbx, qword ptr [rsp + 0x48]
0x52d1:	test	rbx, rbx
0x52d4:	je	0x5302


0x4962:	cmp	byte ptr [rsp + 0x7c], 0
0x4967:	je	0x52ca


0x4d59:	cmp	byte ptr [rsp + 0xd], 0
0x4d5e:	je	0x4d70


0x43ad:	lea	rcx, [rip + 0x3c98]
0x43b4:	movzx	edx, bl
0x43b7:	movsxd	rax, dword ptr [rcx + rdx*4]
0x43bb:	add	rax, rcx
0x43be:	jmp	rax


0x46c8:	cmp	qword ptr [rsp + 0x58], 1
0x46ce:	jne	0x4a78


0x4730:	movzx	ebx, byte ptr [r9]
0x4734:	cmp	bl, 0x7e
0x4737:	ja	0x46c0


0x4307:	cmp	r11, -1
0x430b:	lea	rbx, [rbp + rax]
0x4310:	jne	0x4340


0x5302:	cmp	r13, r15
0x5305:	jbe	0x4da9


0x52d6:	test	al, al
0x52d8:	je	0x5302


0x52ca:	mov	eax, edx
0x52cc:	mov	rbx, qword ptr [rsp + 0x48]
0x52d1:	test	rbx, rbx
0x52d4:	je	0x5302


0x496d:	cmp	byte ptr [rsp + 0xe], 0
0x4972:	jne	0x536d


0x4d60:	test	al, al
0x4d62:	mov	eax, 4
0x4d67:	cmove	eax, dword ptr [rsp + 8]
0x4d6c:	mov	dword ptr [rsp + 8], eax


0x46d4:	mov	qword ptr [rsp + 0x38], r11
0x46d9:	mov	byte ptr [rsp + 0x30], r8b
0x46de:	mov	byte ptr [rsp + 0x28], r10b
0x46e3:	call	0x1990


0x4a78:	lea	rax, [rsp + 0xa0]
0x4a80:	cmp	r11, -1
0x4a84:	mov	qword ptr [rsp + 0xa0], 0
0x4a90:	mov	qword ptr [rsp + 0x28], rax
0x4a95:	jne	0x4ac4


0x4739:	lea	rcx, [rip + 0x3b08]
0x4740:	movzx	edx, bl
0x4743:	movsxd	rax, dword ptr [rcx + rdx*4]
0x4747:	add	rax, rcx
0x474a:	jmp	rax


0x46c0:	xor	r10d, r10d
0x46c3:	nop	dword ptr [rax + rax]
0x46c8:	cmp	qword ptr [rsp + 0x58], 1
0x46ce:	jne	0x4a78


0x4312:	cmp	rax, 1
0x4316:	jbe	0x4340


0x4340:	cmp	rbx, r11
0x4343:	mov	byte ptr [rsp + 0x28], r10b
0x4348:	ja	0x4900


0x530b:	mov	byte ptr [r14 + r15], 0
0x5310:	jmp	0x4da9


0x52da:	movzx	ecx, byte ptr [rbx]
0x52dd:	mov	rax, rbx
0x52e0:	test	cl, cl
0x52e2:	je	0x5302


0x4978:	test	r13, r13
0x497b:	sete	al
0x497e:	cmp	qword ptr [rsp + 0x50], 0
0x4984:	setne	dl
0x4987:	and	al, dl
0x4989:	je	0x53ac


0x4a97:	mov	rdi, qword ptr [rsp + 0x10]
0x4a9c:	mov	byte ptr [rsp + 0x40], r8b
0x4aa1:	mov	byte ptr [rsp + 0x38], r10b
0x4aa6:	mov	qword ptr [rsp + 0x30], r9
0x4aab:	call	0x1710


0x4ac4:	lea	rax, [rsp + 0x9c]
0x4acc:	xor	ecx, ecx
0x4ace:	mov	byte ptr [rsp + 0x7e], bl
0x4ad2:	mov	byte ptr [rsp + 0x7d], r8b
0x4ad7:	mov	rbx, rcx
0x4ada:	mov	qword ptr [rsp + 0x88], r9
0x4ae2:	mov	qword ptr [rsp + 0x38], rax
0x4ae7:	mov	byte ptr [rsp + 0x7f], r10b
0x4aec:	mov	qword ptr [rsp + 0x80], r15
0x4af4:	mov	qword ptr [rsp + 0x40], r14
0x4af9:	mov	qword ptr [rsp + 0x70], r13
0x4afe:	mov	qword ptr [rsp + 0x30], r11
0x4b03:	mov	rax, qword ptr [rsp + 0x10]
0x4b08:	lea	r14, [rbp + rbx]
0x4b0d:	mov	rdx, qword ptr [rsp + 0x30]
0x4b12:	mov	rcx, qword ptr [rsp + 0x28]
0x4b17:	mov	rdi, qword ptr [rsp + 0x38]
0x4b1c:	lea	r13, [rax + r14]
0x4b20:	sub	rdx, r14
0x4b23:	mov	rsi, r13
0x4b26:	call	0x6f50


0x4318:	mov	byte ptr [rsp + 0x38], r8b
0x431d:	mov	byte ptr [rsp + 0x30], r10b
0x4322:	mov	qword ptr [rsp + 0x28], r9
0x4327:	call	0x1710


0x434e:	mov	rdx, qword ptr [rsp + 0x18]
0x4353:	mov	rsi, qword ptr [rsp + 0x48]
0x4358:	mov	rdi, r9
0x435b:	mov	qword ptr [rsp + 0x40], r11
0x4360:	mov	byte ptr [rsp + 0x38], r8b
0x4365:	mov	qword ptr [rsp + 0x30], r9
0x436a:	call	0x17e0


0x4900:	xor	r10d, r10d
0x4903:	jmp	0x43a0


0x52e4:	mov	rdx, r15
0x52e7:	sub	rax, r15
0x52ea:	cmp	r13, rdx
0x52ed:	jbe	0x52f3


0x53ac:	movzx	eax, byte ptr [rsp + 0x7c]
0x53b1:	jmp	0x52cc


0x498f:	mov	r13, qword ptr [rsp + 0x50]
0x4994:	lea	rbx, [rip + 0x3622]
0x499b:	mov	byte ptr [r14], 0x27
0x499f:	mov	dword ptr [rsp + 8], 2
0x49a7:	mov	r15d, 1
0x49ad:	mov	qword ptr [rsp + 0x18], 1
0x49b6:	mov	byte ptr [rsp + 0xf], 0
0x49bb:	mov	qword ptr [rsp + 0x48], rbx
0x49c0:	mov	byte ptr [rsp + 0x7c], al
0x49c4:	jmp	0x42a3


0x52f3:	add	rdx, 1
0x52f7:	movzx	ecx, byte ptr [rax + rdx]
0x52fb:	test	cl, cl
0x52fd:	jne	0x52ea


0x52ef:	mov	byte ptr [r14 + rdx], cl
0x52f3:	add	rdx, 1
0x52f7:	movzx	ecx, byte ptr [rax + rdx]
0x52fb:	test	cl, cl
0x52fd:	jne	0x52ea


0x42a3:	xor	r11d, r11d
0x42a6:	mov	rax, rbp
0x42a9:	mov	r8d, r12d
0x42ac:	mov	rbp, r11
0x42af:	mov	r11, rax
0x42b2:	nop	word ptr [rax + rax]
0x42b8:	cmp	r11, rbp
0x42bb:	setne	r12b
0x42bf:	cmp	r11, -1
0x42c3:	jne	0x42d2


0x52ff:	mov	r15, rdx
0x5302:	cmp	r13, r15
0x5305:	jbe	0x4da9


0x52ea:	cmp	r13, rdx
0x52ed:	jbe	0x52f3


0x436f:	test	eax, eax
0x4371:	mov	r9, qword ptr [rsp + 0x30]
0x4376:	movzx	r8d, byte ptr [rsp + 0x38]
0x437c:	mov	r11, qword ptr [rsp + 0x40]
0x4381:	jne	0x4900


0x4387:	cmp	byte ptr [rsp + 0xf], 0
0x438c:	movzx	r10d, byte ptr [rsp + 0x28]
0x4392:	jne	0x5315


0x5315:	cmp	dword ptr [rsp + 8], 2
0x531a:	movzx	ebx, byte ptr [rsp + 0xf]
0x531f:	mov	rbp, r11
0x5322:	sete	al
0x5325:	mov	byte ptr [rsp + 0xd], bl
0x5329:	jmp	0x4d59


0x4b2b:	test	rax, rax
0x4b2e:	mov	r15, rax
0x4b31:	je	0x4b81


0x4b81:	mov	edx, r12d
0x4b84:	mov	rdi, rbx
0x4b87:	movzx	r8d, byte ptr [rsp + 0x7d]
0x4b8d:	xor	edx, 1
0x4b90:	movzx	ebx, byte ptr [rsp + 0x7e]
0x4b95:	movzx	r10d, byte ptr [rsp + 0x7f]
0x4b9b:	and	dl, byte ptr [rsp + 0xd]
0x4b9f:	mov	r15, qword ptr [rsp + 0x80]
0x4ba7:	mov	r14, qword ptr [rsp + 0x40]
0x4bac:	mov	r13, qword ptr [rsp + 0x70]
0x4bb1:	mov	r11, qword ptr [rsp + 0x30]
0x4bb6:	cmp	rdi, 1
0x4bba:	jbe	0x51bb


0x4b33:	cmp	rax, -1
0x4b37:	je	0x5155


0x51bb:	mov	eax, edx
0x51bd:	jmp	0x4717


0x4bc0:	mov	rcx, rdi
0x4bc3:	xor	esi, esi
0x4bc5:	movzx	r9d, byte ptr [rsp + 0xf]
0x4bcb:	add	rcx, rbp
0x4bce:	mov	rdi, qword ptr [rsp + 0x10]
0x4bd3:	jmp	0x4c8e


0x5155:	mov	rdi, rbx
0x5158:	movzx	r8d, byte ptr [rsp + 0x7d]
0x515e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x5163:	movzx	r10d, byte ptr [rsp + 0x7f]
0x5169:	mov	r15, qword ptr [rsp + 0x80]
0x5171:	xor	r12d, r12d
0x5174:	mov	r14, qword ptr [rsp + 0x40]
0x5179:	mov	r13, qword ptr [rsp + 0x70]
0x517e:	mov	r11, qword ptr [rsp + 0x30]
0x5183:	movzx	edx, byte ptr [rsp + 0xd]
0x5188:	jmp	0x4bb6


0x4b3d:	cmp	rax, -2
0x4b41:	je	0x50e1


0x4717:	test	al, al
0x4719:	jne	0x50b1


0x4c8e:	test	dl, dl
0x4c90:	jne	0x4be0


0x4bb6:	cmp	rdi, 1
0x4bba:	jbe	0x51bb


0x50e1:	mov	r11, qword ptr [rsp + 0x30]
0x50e6:	mov	rsi, r14
0x50e9:	mov	rcx, r13
0x50ec:	mov	rax, rbx
0x50ef:	mov	rdi, rbx
0x50f2:	movzx	r8d, byte ptr [rsp + 0x7d]
0x50f8:	movzx	ebx, byte ptr [rsp + 0x7e]
0x50fd:	mov	r9, qword ptr [rsp + 0x88]
0x5105:	cmp	rsi, r11
0x5108:	movzx	r10d, byte ptr [rsp + 0x7f]
0x510e:	mov	r15, qword ptr [rsp + 0x80]
0x5116:	mov	r14, qword ptr [rsp + 0x40]
0x511b:	mov	r13, qword ptr [rsp + 0x70]
0x5120:	jae	0x5148


0x4b47:	cmp	dword ptr [rsp + 8], 2
0x4b4c:	sete	al
0x4b4f:	and	al, byte ptr [rsp + 0xf]
0x4b53:	jne	0x4cf0


0x471f:	cmp	dword ptr [rsp + 8], 2
0x4724:	sete	dl
0x4727:	jmp	0x43f8


0x50b1:	movzx	edx, byte ptr [rsp + 0xd]
0x50b6:	xor	r12d, r12d
0x50b9:	jmp	0x4bc0


0x4c96:	mov	eax, esi
0x4c98:	xor	eax, 1
0x4c9b:	and	eax, r8d
0x4c9e:	test	r10b, r10b
0x4ca1:	je	0x4cb1


0x4be0:	cmp	dword ptr [rsp + 8], 2
0x4be5:	sete	al
0x4be8:	test	r9b, r9b
0x4beb:	jne	0x50a0


0x5122:	cmp	byte ptr [rcx], 0
0x5125:	jne	0x5137


0x5148:	movzx	edx, byte ptr [rsp + 0xd]
0x514d:	xor	r12d, r12d
0x5150:	jmp	0x4bb6


0x4b59:	mov	edi, dword ptr [rsp + 0x9c]
0x4b60:	call	0x1980


0x4cf0:	cmp	r15, 1
0x4cf4:	je	0x4b59


0x43f8:	cmp	byte ptr [rsp + 0xd], 1
0x43fd:	jne	0x4512


0x4cb1:	add	rbp, 1
0x4cb5:	cmp	rbp, rcx
0x4cb8:	jae	0x443c


0x4ca3:	cmp	r13, r15
0x4ca6:	jbe	0x4cad


0x4bf1:	mov	esi, r8d
0x4bf4:	xor	esi, 1
0x4bf7:	and	al, sil
0x4bfa:	je	0x4c2b


0x50a0:	movzx	ebx, byte ptr [rsp + 0xf]
0x50a5:	mov	rbp, r11
0x50a8:	mov	byte ptr [rsp + 0xd], bl
0x50ac:	jmp	0x4d59


0x5127:	jmp	0x5148


0x5137:	add	rax, 1
0x513b:	lea	rdx, [rbp + rax]
0x5140:	cmp	r11, rdx
0x5143:	ja	0x5130


0x4cfa:	mov	rdi, qword ptr [rsp + 0x10]
0x4cff:	lea	rcx, [rdi + r15]
0x4d03:	lea	rdx, [rdi + r14 + 1]
0x4d08:	lea	r8, [rcx + r14]
0x4d0c:	jmp	0x4d1d


0x4403:	test	dl, dl
0x4405:	jne	0x4512


0x4512:	cmp	byte ptr [rsp + 0xf], 0
0x4517:	jne	0x440b


0x4cbe:	test	al, al
0x4cc0:	je	0x50be


0x443c:	test	al, al
0x443e:	je	0x4460


0x4cad:	add	r15, 1
0x4cb1:	add	rbp, 1
0x4cb5:	cmp	rbp, rcx
0x4cb8:	jae	0x443c


0x4ca8:	mov	byte ptr [r14 + r15], 0x5c
0x4cad:	add	r15, 1
0x4cb1:	add	rbp, 1
0x4cb5:	cmp	rbp, rcx
0x4cb8:	jae	0x443c


0x4c2b:	cmp	r13, r15
0x4c2e:	jbe	0x4c35


0x4bfc:	cmp	r13, r15
0x4bff:	jbe	0x4c06


0x5145:	mov	rdi, rax
0x5148:	movzx	edx, byte ptr [rsp + 0xd]
0x514d:	xor	r12d, r12d
0x5150:	jmp	0x4bb6


0x5130:	cmp	byte ptr [r9 + rax], 0
0x5135:	je	0x5145


0x4d1d:	movzx	ecx, byte ptr [rdx]
0x4d20:	sub	ecx, 0x5b
0x4d23:	cmp	cl, 0x21
0x4d26:	ja	0x4d10


0x440b:	mov	rsi, qword ptr [rsp + 0x20]
0x4410:	test	rsi, rsi
0x4413:	je	0x4429


0x451d:	jmp	0x4429


0x50be:	xor	r10d, r10d
0x50c1:	jmp	0x4c7d


0x4cc6:	cmp	r13, r15
0x4cc9:	jbe	0x4cd0


0x4460:	cmp	r15, r13
0x4463:	jae	0x4469


0x4440:	cmp	r13, r15
0x4443:	jbe	0x444a


0x4c35:	lea	rax, [r15 + 1]
0x4c39:	cmp	r13, rax
0x4c3c:	jbe	0x4c4b


0x4c30:	mov	byte ptr [r14 + r15], 0x5c
0x4c35:	lea	rax, [r15 + 1]
0x4c39:	cmp	r13, rax
0x4c3c:	jbe	0x4c4b


0x4c06:	lea	rsi, [r15 + 1]
0x4c0a:	cmp	r13, rsi
0x4c0d:	jbe	0x4c15


0x4c01:	mov	byte ptr [r14 + r15], 0x27
0x4c06:	lea	rsi, [r15 + 1]
0x4c0a:	cmp	r13, rsi
0x4c0d:	jbe	0x4c15


0x4d28:	mov	esi, 1
0x4d2d:	shl	rsi, cl
0x4d30:	mov	rcx, rsi
0x4d33:	movabs	rsi, 0x20000002b
0x4d3d:	test	rcx, rsi
0x4d40:	je	0x4d10


0x4d10:	add	rdx, 1
0x4d14:	cmp	r8, rdx
0x4d17:	je	0x4b59


0x4429:	test	r10b, r10b
0x442c:	jne	0x4573


0x4415:	mov	edx, ebx
0x4417:	shr	dl, 5
0x441a:	movzx	edx, dl
0x441d:	mov	edx, dword ptr [rsi + rdx*4]
0x4420:	bt	edx, ebx
0x4423:	jb	0x4573


0x4c7d:	cmp	r13, r15
0x4c80:	jbe	0x4c86


0x4cd0:	lea	rax, [r15 + 1]
0x4cd4:	cmp	r13, rax
0x4cd7:	jbe	0x4cdf


0x4ccb:	mov	byte ptr [r14 + r15], 0x27
0x4cd0:	lea	rax, [r15 + 1]
0x4cd4:	cmp	r13, rax
0x4cd7:	jbe	0x4cdf


0x4465:	mov	byte ptr [r14 + r15], bl
0x4469:	movzx	edi, byte ptr [rsp + 0xe]
0x446e:	add	r15, 1
0x4472:	mov	eax, 0
0x4477:	test	r12b, r12b
0x447a:	cmove	edi, eax
0x447d:	mov	byte ptr [rsp + 0xe], dil
0x4482:	jmp	0x42b8


0x4469:	movzx	edi, byte ptr [rsp + 0xe]
0x446e:	add	r15, 1
0x4472:	mov	eax, 0
0x4477:	test	r12b, r12b
0x447a:	cmove	edi, eax
0x447d:	mov	byte ptr [rsp + 0xe], dil
0x4482:	jmp	0x42b8


0x444a:	lea	rax, [r15 + 1]
0x444e:	cmp	r13, rax
0x4451:	jbe	0x4459


0x4445:	mov	byte ptr [r14 + r15], 0x27
0x444a:	lea	rax, [r15 + 1]
0x444e:	cmp	r13, rax
0x4451:	jbe	0x4459


0x4c4b:	lea	rax, [r15 + 2]
0x4c4f:	cmp	r13, rax
0x4c52:	jbe	0x4c64


0x4c3e:	mov	eax, ebx
0x4c40:	shr	al, 6
0x4c43:	add	eax, 0x30
0x4c46:	mov	byte ptr [r14 + r15 + 1], al
0x4c4b:	lea	rax, [r15 + 2]
0x4c4f:	cmp	r13, rax
0x4c52:	jbe	0x4c64


0x4c15:	lea	rsi, [r15 + 2]
0x4c19:	cmp	r13, rsi
0x4c1c:	jbe	0x4c24


0x4c0f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x4c15:	lea	rsi, [r15 + 2]
0x4c19:	cmp	r13, rsi
0x4c1c:	jbe	0x4c24


0x4d42:	mov	r14, qword ptr [rsp + 0x40]
0x4d47:	mov	r13, qword ptr [rsp + 0x70]
0x4d4c:	mov	rbp, qword ptr [rsp + 0x30]
0x4d51:	mov	dword ptr [rsp + 8], 2
0x4d59:	cmp	byte ptr [rsp + 0xd], 0
0x4d5e:	je	0x4d70


0x4432:	xor	eax, 1
0x4435:	add	rbp, 1
0x4439:	and	eax, r8d
0x443c:	test	al, al
0x443e:	je	0x4460


0x4573:	cmp	dword ptr [rsp + 8], 2
0x4578:	sete	dl
0x457b:	cmp	byte ptr [rsp + 0xf], 0
0x4580:	mov	eax, edx
0x4582:	jne	0x4dd8


0x4c86:	movzx	ebx, byte ptr [rdi + rbp]
0x4c8a:	add	r15, 1
0x4c8e:	test	dl, dl
0x4c90:	jne	0x4be0


0x4c82:	mov	byte ptr [r14 + r15], bl
0x4c86:	movzx	ebx, byte ptr [rdi + rbp]
0x4c8a:	add	r15, 1
0x4c8e:	test	dl, dl
0x4c90:	jne	0x4be0


0x4cdf:	add	r15, 2
0x4ce3:	xor	r10d, r10d
0x4ce6:	xor	r8d, r8d
0x4ce9:	jmp	0x4c7d


0x4cd9:	mov	byte ptr [r14 + r15 + 1], 0x27
0x4cdf:	add	r15, 2
0x4ce3:	xor	r10d, r10d
0x4ce6:	xor	r8d, r8d
0x4ce9:	jmp	0x4c7d


0x42b8:	cmp	r11, rbp
0x42bb:	setne	r12b
0x42bf:	cmp	r11, -1
0x42c3:	jne	0x42d2


0x4459:	add	r15, 2
0x445d:	xor	r8d, r8d
0x4460:	cmp	r15, r13
0x4463:	jae	0x4469


0x4453:	mov	byte ptr [r14 + r15 + 1], 0x27
0x4459:	add	r15, 2
0x445d:	xor	r8d, r8d
0x4460:	cmp	r15, r13
0x4463:	jae	0x4469


0x4c64:	and	ebx, 7
0x4c67:	add	rbp, 1
0x4c6b:	add	r15, 3
0x4c6f:	add	ebx, 0x30
0x4c72:	cmp	rbp, rcx
0x4c75:	jae	0x4460


0x4c54:	mov	eax, ebx
0x4c56:	shr	al, 3
0x4c59:	and	eax, 7
0x4c5c:	add	eax, 0x30
0x4c5f:	mov	byte ptr [r14 + r15 + 2], al
0x4c64:	and	ebx, 7
0x4c67:	add	rbp, 1
0x4c6b:	add	r15, 3
0x4c6f:	add	ebx, 0x30
0x4c72:	cmp	rbp, rcx
0x4c75:	jae	0x4460


0x4c24:	add	r15, 3
0x4c28:	mov	r8d, eax
0x4c2b:	cmp	r13, r15
0x4c2e:	jbe	0x4c35


0x4c1e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x4c24:	add	r15, 3
0x4c28:	mov	r8d, eax
0x4c2b:	cmp	r13, r15
0x4c2e:	jbe	0x4c35


0x4588:	mov	eax, r8d
0x458b:	xor	eax, 1
0x458e:	and	al, dl
0x4590:	je	0x45c1


0x4dd8:	mov	rbp, r11
0x4ddb:	jmp	0x4d59


0x4c7b:	mov	esi, edx
0x4c7d:	cmp	r13, r15
0x4c80:	jbe	0x4c86


0x45c1:	cmp	r13, r15
0x45c4:	jbe	0x45cb


0x4592:	cmp	r13, r15
0x4595:	jbe	0x459c


0x45cb:	add	r15, 1
0x45cf:	add	rbp, 1
0x45d3:	jmp	0x4460


0x45c6:	mov	byte ptr [r14 + r15], 0x5c
0x45cb:	add	r15, 1
0x45cf:	add	rbp, 1
0x45d3:	jmp	0x4460


0x459c:	lea	rdx, [r15 + 1]
0x45a0:	cmp	r13, rdx
0x45a3:	jbe	0x45ab


0x4597:	mov	byte ptr [r14 + r15], 0x27
0x459c:	lea	rdx, [r15 + 1]
0x45a0:	cmp	r13, rdx
0x45a3:	jbe	0x45ab


0x45ab:	lea	rdx, [r15 + 2]
0x45af:	cmp	r13, rdx
0x45b2:	jbe	0x45ba


0x45a5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x45ab:	lea	rdx, [r15 + 2]
0x45af:	cmp	r13, rdx
0x45b2:	jbe	0x45ba


0x45ba:	add	r15, 3
0x45be:	mov	r8d, eax
0x45c1:	cmp	r13, r15
0x45c4:	jbe	0x45cb


0x45b4:	mov	byte ptr [r14 + r15 + 2], 0x27
0x45ba:	add	r15, 3
0x45be:	mov	r8d, eax
0x45c1:	cmp	r13, r15
0x45c4:	jbe	0x45cb


0x4b65:	mov	rdi, qword ptr [rsp + 0x28]
0x4b6a:	test	eax, eax
0x4b6c:	mov	eax, 0
0x4b71:	cmove	r12d, eax
0x4b75:	add	rbx, r15
0x4b78:	call	0x1970


0x4b7d:	test	eax, eax
0x4b7f:	je	0x4b03


0x4b03:	mov	rax, qword ptr [rsp + 0x10]
0x4b08:	lea	r14, [rbp + rbx]
0x4b0d:	mov	rdx, qword ptr [rsp + 0x30]
0x4b12:	mov	rcx, qword ptr [rsp + 0x28]
0x4b17:	mov	rdi, qword ptr [rsp + 0x38]
0x4b1c:	lea	r13, [rax + r14]
0x4b20:	sub	rdx, r14
0x4b23:	mov	rsi, r13
0x4b26:	call	0x6f50


0x432c:	movzx	r8d, byte ptr [rsp + 0x38]
0x4332:	movzx	r10d, byte ptr [rsp + 0x30]
0x4338:	mov	r11, rax
0x433b:	mov	r9, qword ptr [rsp + 0x28]
0x4340:	cmp	rbx, r11
0x4343:	mov	byte ptr [rsp + 0x28], r10b
0x4348:	ja	0x4900


0x4ab0:	movzx	r8d, byte ptr [rsp + 0x40]
0x4ab6:	movzx	r10d, byte ptr [rsp + 0x38]
0x4abc:	mov	r11, rax
0x4abf:	mov	r9, qword ptr [rsp + 0x30]
0x4ac4:	lea	rax, [rsp + 0x9c]
0x4acc:	xor	ecx, ecx
0x4ace:	mov	byte ptr [rsp + 0x7e], bl
0x4ad2:	mov	byte ptr [rsp + 0x7d], r8b
0x4ad7:	mov	rbx, rcx
0x4ada:	mov	qword ptr [rsp + 0x88], r9
0x4ae2:	mov	qword ptr [rsp + 0x38], rax
0x4ae7:	mov	byte ptr [rsp + 0x7f], r10b
0x4aec:	mov	qword ptr [rsp + 0x80], r15
0x4af4:	mov	qword ptr [rsp + 0x40], r14
0x4af9:	mov	qword ptr [rsp + 0x70], r13
0x4afe:	mov	qword ptr [rsp + 0x30], r11
0x4b03:	mov	rax, qword ptr [rsp + 0x10]
0x4b08:	lea	r14, [rbp + rbx]
0x4b0d:	mov	rdx, qword ptr [rsp + 0x30]
0x4b12:	mov	rcx, qword ptr [rsp + 0x28]
0x4b17:	mov	rdi, qword ptr [rsp + 0x38]
0x4b1c:	lea	r13, [rax + r14]
0x4b20:	sub	rdx, r14
0x4b23:	mov	rsi, r13
0x4b26:	call	0x6f50


0x46e8:	mov	rcx, qword ptr [rax]
0x46eb:	movzx	edx, bl
0x46ee:	movzx	r10d, byte ptr [rsp + 0x28]
0x46f4:	movzx	r8d, byte ptr [rsp + 0x30]
0x46fa:	mov	r11, qword ptr [rsp + 0x38]
0x46ff:	mov	edi, 1
0x4704:	movzx	eax, word ptr [rcx + rdx*2]
0x4708:	and	ax, 0x4000
0x470c:	setne	r12b
0x4710:	sete	al
0x4713:	and	al, byte ptr [rsp + 0xd]
0x4717:	test	al, al
0x4719:	jne	0x50b1


0x43c0:	xor	r10d, r10d
0x43c3:	cmp	r11, 1
0x43c7:	setne	al
0x43ca:	cmp	r11, -1
0x43ce:	jne	0x43dc


0x43d0:	mov	rax, qword ptr [rsp + 0x10]
0x43d5:	cmp	byte ptr [rax + 1], 0
0x43d9:	setne	al
0x43dc:	cmp	dword ptr [rsp + 8], 2
0x43e1:	sete	dl
0x43e4:	test	al, al
0x43e6:	je	0x4638


0x43dc:	cmp	dword ptr [rsp + 8], 2
0x43e1:	sete	dl
0x43e4:	test	al, al
0x43e6:	je	0x4638


0x4638:	test	rbp, rbp
0x463b:	jne	0x43ec


0x43ec:	xor	r12d, r12d
0x43ef:	xor	eax, eax
0x43f1:	nop	dword ptr [rax]
0x43f8:	cmp	byte ptr [rsp + 0xd], 1
0x43fd:	jne	0x4512


0x4641:	movzx	eax, byte ptr [rsp + 0xf]
0x4646:	and	al, dl
0x4648:	je	0x43f8


0x464e:	mov	rbp, r11
0x4651:	mov	dword ptr [rsp + 8], 2
0x4659:	jmp	0x4d59


0x4a58:	cmp	byte ptr [rsp + 0xf], 0
0x4a5d:	jne	0x5280


0x44a0:	cmp	eax, 5
0x44a3:	je	0x4a18


0x4a63:	xor	r12d, r12d
0x4a66:	xor	eax, eax
0x4a68:	mov	ebx, 0x3f
0x4a6d:	jmp	0x4429


0x5280:	mov	rbp, r11
0x5283:	movzx	eax, byte ptr [rsp + 0xf]
0x5288:	jmp	0x4d59


0x4a18:	test	byte ptr [rsp + 0x78], 4
0x4a1d:	je	0x4a40


0x44a9:	cmp	eax, 2
0x44ac:	mov	ebx, 0x3f
0x44b1:	sete	dl
0x44b4:	xor	r12d, r12d
0x44b7:	xor	eax, eax
0x44b9:	jmp	0x43f8


0x4a40:	xor	edx, edx
0x4a42:	xor	r12d, r12d
0x4a45:	xor	eax, eax
0x4a47:	mov	ebx, 0x3f
0x4a4c:	jmp	0x43f8


0x4a1f:	lea	rcx, [rbp + 2]
0x4a23:	cmp	rcx, r11
0x4a26:	jae	0x4a40


0x4a28:	mov	rax, qword ptr [rsp + 0x10]
0x4a2d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x4a32:	je	0x51c2


0x51c2:	movzx	ebx, byte ptr [rax + rcx]
0x51c6:	cmp	bl, 0x3e
0x51c9:	ja	0x4a40


0x51cf:	movabs	rax, 0x7000a38200000000
0x51d9:	bt	rax, rbx
0x51dd:	jae	0x4a40


0x51e3:	cmp	byte ptr [rsp + 0xf], 0
0x51e8:	jne	0x53d2


0x51ee:	cmp	r13, r15
0x51f1:	jbe	0x51f8


0x53d2:	mov	rbp, r11
0x53d5:	jmp	0x4d70


0x51f8:	lea	rax, [r15 + 1]
0x51fc:	cmp	r13, rax
0x51ff:	jbe	0x5207


0x51f3:	mov	byte ptr [r14 + r15], 0x3f
0x51f8:	lea	rax, [r15 + 1]
0x51fc:	cmp	r13, rax
0x51ff:	jbe	0x5207


0x5207:	lea	rax, [r15 + 2]
0x520b:	cmp	r13, rax
0x520e:	jbe	0x5216


0x5201:	mov	byte ptr [r14 + r15 + 1], 0x22
0x5207:	lea	rax, [r15 + 2]
0x520b:	cmp	r13, rax
0x520e:	jbe	0x5216


0x5216:	lea	rax, [r15 + 3]
0x521a:	cmp	r13, rax
0x521d:	jbe	0x5225


0x5210:	mov	byte ptr [r14 + r15 + 2], 0x22
0x5216:	lea	rax, [r15 + 3]
0x521a:	cmp	r13, rax
0x521d:	jbe	0x5225


0x5225:	add	r15, 4
0x5229:	xor	edx, edx
0x522b:	xor	r12d, r12d
0x522e:	xor	eax, eax
0x5230:	mov	rbp, rcx
0x5233:	jmp	0x43f8


0x521f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x5225:	add	r15, 4
0x5229:	xor	edx, edx
0x522b:	xor	r12d, r12d
0x522e:	xor	eax, eax
0x5230:	mov	rbp, rcx
0x5233:	jmp	0x43f8


0x49d0:	cmp	byte ptr [rsp + 0xf], 0
0x49d5:	jne	0x5280


0x44ce:	mov	byte ptr [rsp + 0x7c], r12b
0x44d3:	xor	edx, edx
0x44d5:	xor	eax, eax
0x44d7:	mov	ebx, 0x27
0x44dc:	jmp	0x43f8


0x49db:	test	r13, r13
0x49de:	je	0x4de0


0x4de0:	cmp	r13, r15
0x4de3:	jbe	0x4dea


0x49e4:	xor	edx, edx
0x49e6:	cmp	qword ptr [rsp + 0x50], 0
0x49ec:	jne	0x4de0


0x4dea:	lea	rax, [r15 + 1]
0x4dee:	cmp	r13, rax
0x4df1:	jbe	0x4df9


0x4de5:	mov	byte ptr [r14 + r15], 0x27
0x4dea:	lea	rax, [r15 + 1]
0x4dee:	cmp	r13, rax
0x4df1:	jbe	0x4df9


0x49f2:	mov	qword ptr [rsp + 0x50], r13
0x49f7:	add	r15, 3
0x49fb:	xor	eax, eax
0x49fd:	mov	byte ptr [rsp + 0x7c], r12b
0x4a02:	xor	r8d, r8d
0x4a05:	mov	r13, rdx
0x4a08:	mov	ebx, 0x27
0x4a0d:	jmp	0x4429


0x4df9:	lea	rax, [r15 + 2]
0x4dfd:	cmp	r13, rax
0x4e00:	jbe	0x53f2


0x4df3:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x4df9:	lea	rax, [r15 + 2]
0x4dfd:	cmp	r13, rax
0x4e00:	jbe	0x53f2


0x53f2:	mov	rdx, r13
0x53f5:	mov	r13, qword ptr [rsp + 0x50]
0x53fa:	jmp	0x49f2


0x4e06:	mov	rdx, r13
0x4e09:	mov	byte ptr [r14 + r15 + 2], 0x27
0x4e0f:	mov	r13, qword ptr [rsp + 0x50]
0x4e14:	jmp	0x49f2


0x4504:	cmp	byte ptr [rsp + 0xd], 0
0x4509:	jne	0x4570


0x450b:	mov	ebx, edx
0x450d:	xor	r12d, r12d
0x4510:	xor	eax, eax
0x4512:	cmp	byte ptr [rsp + 0xf], 0
0x4517:	jne	0x440b


0x4570:	xor	r12d, r12d
0x4573:	cmp	dword ptr [rsp + 8], 2
0x4578:	sete	dl
0x457b:	cmp	byte ptr [rsp + 0xf], 0
0x4580:	mov	eax, edx
0x4582:	jne	0x4dd8


0x4910:	cmp	byte ptr [rsp + 0xf], 0
0x4915:	jne	0x5280


0x4543:	cmp	byte ptr [rsp + 0xd], 0
0x4548:	je	0x4760


0x491b:	add	rbp, 1
0x491f:	mov	eax, r8d
0x4922:	xor	r12d, r12d
0x4925:	mov	ebx, 0x5c
0x492a:	jmp	0x443c


0x4760:	mov	edx, 0x5c
0x4765:	mov	ebx, 0x5c
0x476a:	jmp	0x4504


0x454e:	cmp	byte ptr [rsp + 0xf], 0
0x4553:	je	0x4760


0x4559:	cmp	qword ptr [rsp + 0x18], 0
0x455f:	jne	0x491b


0x4565:	mov	ebx, 0x5c
0x456a:	nop	word ptr [rax + rax]
0x4570:	xor	r12d, r12d
0x4573:	cmp	dword ptr [rsp + 8], 2
0x4578:	sete	dl
0x457b:	cmp	byte ptr [rsp + 0xf], 0
0x4580:	mov	eax, edx
0x4582:	jne	0x4dd8


0x45eb:	xor	edx, edx
0x45ed:	test	byte ptr [rsp + 0x78], 1
0x45f2:	je	0x450b


0x47b3:	cmp	dword ptr [rsp + 8], 2
0x47b8:	sete	dl
0x47bb:	cmp	byte ptr [rsp + 0xf], 0
0x47c0:	jne	0x535a


0x45f8:	add	rbp, 1
0x45fc:	jmp	0x42b8


0x47c6:	mov	eax, r8d
0x47c9:	mov	rcx, r15
0x47cc:	xor	eax, 1
0x47cf:	and	al, dl
0x47d1:	je	0x4800


0x535a:	movzx	ebx, byte ptr [rsp + 0xf]
0x535f:	mov	rbp, r11
0x5362:	mov	eax, edx
0x5364:	mov	byte ptr [rsp + 0xd], bl
0x5368:	jmp	0x4d59


0x4800:	cmp	r13, rcx
0x4803:	jbe	0x480a


0x47d3:	cmp	r13, r15
0x47d6:	jbe	0x47dd


0x480a:	cmp	dword ptr [rsp + 8], 2
0x480f:	lea	r15, [rcx + 1]
0x4813:	je	0x4e19


0x4805:	mov	byte ptr [r14 + rcx], 0x5c
0x480a:	cmp	dword ptr [rsp + 8], 2
0x480f:	lea	r15, [rcx + 1]
0x4813:	je	0x4e19


0x47dd:	lea	rcx, [r15 + 1]
0x47e1:	cmp	r13, rcx
0x47e4:	jbe	0x47ec


0x47d8:	mov	byte ptr [r14 + r15], 0x27
0x47dd:	lea	rcx, [r15 + 1]
0x47e1:	cmp	r13, rcx
0x47e4:	jbe	0x47ec


0x4e19:	mov	eax, r12d
0x4e1c:	mov	ebx, 0x30
0x4e21:	xor	r12d, r12d
0x4e24:	jmp	0x4429


0x4819:	lea	rax, [rbp + 1]
0x481d:	cmp	rax, r11
0x4820:	jae	0x483b


0x47ec:	lea	rcx, [r15 + 2]
0x47f0:	cmp	r13, rcx
0x47f3:	ja	0x4e29


0x47e6:	mov	byte ptr [r14 + r15 + 1], 0x24
0x47ec:	lea	rcx, [r15 + 2]
0x47f0:	cmp	r13, rcx
0x47f3:	ja	0x4e29


0x4822:	mov	rax, qword ptr [rsp + 0x10]
0x4827:	movzx	eax, byte ptr [rax + rbp + 1]
0x482c:	mov	byte ptr [rsp + 0x28], al
0x4830:	sub	eax, 0x30
0x4833:	cmp	al, 9
0x4835:	jbe	0x5069


0x483b:	mov	eax, r12d
0x483e:	mov	ebx, 0x30
0x4843:	xor	r12d, r12d
0x4846:	jmp	0x43f8


0x47f9:	lea	rcx, [r15 + 3]
0x47fd:	mov	r8d, eax
0x4800:	cmp	r13, rcx
0x4803:	jbe	0x480a


0x4e29:	mov	byte ptr [r14 + r15 + 2], 0x27
0x4e2f:	jmp	0x47f9


0x5069:	cmp	r13, r15
0x506c:	jbe	0x5073


0x5073:	lea	rax, [rcx + 2]
0x5077:	cmp	r13, rax
0x507a:	jbe	0x5082


0x506e:	mov	byte ptr [r14 + r15], 0x30
0x5073:	lea	rax, [rcx + 2]
0x5077:	cmp	r13, rax
0x507a:	jbe	0x5082


0x5082:	mov	eax, r12d
0x5085:	lea	r15, [rcx + 3]
0x5089:	xor	r12d, r12d
0x508c:	mov	ebx, 0x30
0x5091:	jmp	0x43f8


0x507c:	mov	byte ptr [r14 + rcx + 2], 0x30
0x5082:	mov	eax, r12d
0x5085:	lea	r15, [rcx + 3]
0x5089:	xor	r12d, r12d
0x508c:	mov	ebx, 0x30
0x5091:	jmp	0x43f8


0x44f2:	cmp	dword ptr [rsp + 8], 2
0x44f7:	sete	al
0x44fa:	and	al, byte ptr [rsp + 0xf]
0x44fe:	jne	0x464e


0x48b0:	mov	edx, 0xd
0x48b5:	xor	r10d, r10d
0x48b8:	mov	ebx, 0x72
0x48bd:	jmp	0x44f2


0x4e34:	test	ebx, ebx
0x4e36:	jne	0x4263


0x4e3c:	mov	byte ptr [rsp + 0xd], 1
0x4e41:	test	r13, r13
0x4e44:	jne	0x53da


0x4e4a:	lea	rax, [rip + 0x316c]
0x4e51:	mov	qword ptr [rsp + 0x50], 0
0x4e5a:	mov	byte ptr [rsp + 0xe], 1
0x4e5f:	mov	byte ptr [rsp + 0x7c], 0
0x4e64:	xor	r12d, r12d
0x4e67:	mov	byte ptr [rsp + 0xf], 0
0x4e6c:	mov	qword ptr [rsp + 0x18], 1
0x4e75:	mov	qword ptr [rsp + 0x48], rax
0x4e7a:	mov	r15d, 1
0x4e80:	mov	dword ptr [rsp + 8], 2
0x4e88:	jmp	0x42a3


0x53da:	mov	byte ptr [rsp + 0xe], 1
0x53df:	xor	eax, eax
0x53e1:	xor	r12d, r12d
0x53e4:	mov	qword ptr [rsp + 0x50], 0
0x53ed:	jmp	0x4994


0x4994:	lea	rbx, [rip + 0x3622]
0x499b:	mov	byte ptr [r14], 0x27
0x499f:	mov	dword ptr [rsp + 8], 2
0x49a7:	mov	r15d, 1
0x49ad:	mov	qword ptr [rsp + 0x18], 1
0x49b6:	mov	byte ptr [rsp + 0xf], 0
0x49bb:	mov	qword ptr [rsp + 0x48], rbx
0x49c0:	mov	byte ptr [rsp + 0x7c], al
0x49c4:	jmp	0x42a3


0x4e98:	test	r13, r13
0x4e9b:	je	0x50c6


0x528d:	lea	rax, [rip + 0x2d27]
0x5294:	mov	byte ptr [rsp + 0xe], 1
0x5299:	mov	byte ptr [rsp + 0x7c], 0
0x529e:	xor	r12d, r12d
0x52a1:	mov	qword ptr [rsp + 0x50], 0
0x52aa:	mov	byte ptr [rsp + 0xf], 1
0x52af:	mov	byte ptr [rsp + 0xd], 1
0x52b4:	mov	qword ptr [rsp + 0x18], 1
0x52bd:	xor	r15d, r15d
0x52c0:	mov	qword ptr [rsp + 0x48], rax
0x52c5:	jmp	0x42a3


0x50c6:	mov	qword ptr [rsp + 0x50], 0
0x50cf:	mov	byte ptr [rsp + 0xe], 1
0x50d4:	xor	r12d, r12d
0x50d7:	mov	byte ptr [rsp + 0x7c], 0
0x50dc:	jmp	0x4ebb


0x4ea1:	mov	byte ptr [r14], 0x22
0x4ea5:	mov	byte ptr [rsp + 0xe], 1
0x4eaa:	xor	r12d, r12d
0x4ead:	mov	byte ptr [rsp + 0x7c], 0
0x4eb2:	mov	qword ptr [rsp + 0x50], 0
0x4ebb:	lea	rax, [rip + 0x30f9]
0x4ec2:	mov	byte ptr [rsp + 0xf], 0
0x4ec7:	mov	byte ptr [rsp + 0xd], 1
0x4ecc:	mov	qword ptr [rsp + 0x18], 1
0x4ed5:	mov	r15d, 1
0x4edb:	mov	qword ptr [rsp + 0x48], rax
0x4ee0:	jmp	0x42a3


0x4ebb:	lea	rax, [rip + 0x30f9]
0x4ec2:	mov	byte ptr [rsp + 0xf], 0
0x4ec7:	mov	byte ptr [rsp + 0xd], 1
0x4ecc:	mov	qword ptr [rsp + 0x18], 1
0x4ed5:	mov	r15d, 1
0x4edb:	mov	qword ptr [rsp + 0x48], rax
0x4ee0:	jmp	0x42a3


0x4ee5:	lea	rax, [rip + 0x30cf]
0x4eec:	mov	byte ptr [rsp + 0xe], 1
0x4ef1:	mov	byte ptr [rsp + 0x7c], 0
0x4ef6:	xor	r12d, r12d
0x4ef9:	mov	qword ptr [rsp + 0x50], 0
0x4f02:	mov	byte ptr [rsp + 0xf], 1
0x4f07:	mov	byte ptr [rsp + 0xd], 1
0x4f0c:	mov	qword ptr [rsp + 0x18], 1
0x4f15:	xor	r15d, r15d
0x4f18:	mov	qword ptr [rsp + 0x48], rax
0x4f1d:	mov	dword ptr [rsp + 8], 5
0x4f25:	jmp	0x42a3


0x4f2a:	mov	byte ptr [rsp + 0xe], 1
0x4f2f:	mov	byte ptr [rsp + 0x7c], 0
0x4f34:	xor	r12d, r12d
0x4f37:	mov	qword ptr [rsp + 0x50], 0
0x4f40:	mov	byte ptr [rsp + 0xf], 0
0x4f45:	xor	r15d, r15d
0x4f48:	mov	byte ptr [rsp + 0xd], 1
0x4f4d:	mov	qword ptr [rsp + 0x18], 0
0x4f56:	mov	qword ptr [rsp + 0x48], 0
0x4f5f:	jmp	0x42a3


0x4f64:	cmp	dword ptr [rsp + 8], 0xa
0x4f69:	je	0x4fc1


0x4fc1:	xor	r15d, r15d
0x4fc4:	test	ebx, ebx
0x4fc6:	je	0x518d


0x4f6b:	lea	rsi, [rip + 0x304d]
0x4f72:	xor	edi, edi
0x4f74:	mov	edx, 5
0x4f79:	call	0x16f0


0x518d:	mov	rdx, qword ptr [rsp + 0x68]
0x5192:	movzx	eax, byte ptr [rdx]
0x5195:	test	al, al
0x5197:	je	0x4fcc


0x4fcc:	test	ebx, ebx
0x4fce:	mov	rbx, qword ptr [rsp + 0x60]
0x4fd3:	setne	byte ptr [rsp + 0xf]
0x4fd8:	xor	r12d, r12d
0x4fdb:	mov	rdi, rbx
0x4fde:	call	0x1710


0x51a9:	add	r15, 1
0x51ad:	movzx	eax, byte ptr [rdx + r15]
0x51b2:	test	al, al
0x51b4:	jne	0x51a0


0x51a5:	mov	byte ptr [r14 + r15], al
0x51a9:	add	r15, 1
0x51ad:	movzx	eax, byte ptr [rdx + r15]
0x51b2:	test	al, al
0x51b4:	jne	0x51a0


0x51b6:	jmp	0x4fcc


0x51a0:	cmp	r13, r15
0x51a3:	jbe	0x51a9


0x4fe3:	mov	qword ptr [rsp + 0x48], rbx
0x4fe8:	mov	qword ptr [rsp + 0x18], rax
0x4fed:	mov	byte ptr [rsp + 0xe], 1
0x4ff2:	mov	byte ptr [rsp + 0x7c], 0
0x4ff7:	mov	qword ptr [rsp + 0x50], 0
0x5000:	mov	byte ptr [rsp + 0xd], 1
0x5005:	jmp	0x42a3


0x4f7e:	mov	rcx, rax
0x4f81:	mov	qword ptr [rsp + 0x68], rax
0x4f86:	lea	rax, [rip + 0x3032]
0x4f8d:	cmp	rcx, rax
0x4f90:	je	0x532e


0x532e:	mov	esi, dword ptr [rsp + 8]
0x5332:	mov	rdi, rcx
0x5335:	call	0x40e0


0x4f96:	lea	rsi, [rip + 0x3020]
0x4f9d:	xor	edi, edi
0x4f9f:	mov	edx, 5
0x4fa4:	call	0x16f0


0x4fa9:	mov	rcx, rax
0x4fac:	mov	qword ptr [rsp + 0x60], rax
0x4fb1:	lea	rax, [rip + 0x3005]
0x4fb8:	cmp	rcx, rax
0x4fbb:	je	0x5344


0x5344:	mov	esi, dword ptr [rsp + 8]
0x5348:	mov	rdi, rcx
0x534b:	call	0x40e0


0x5350:	mov	qword ptr [rsp + 0x60], rax
0x5355:	jmp	0x4fc1


0x533a:	mov	qword ptr [rsp + 0x68], rax
0x533f:	jmp	0x4f96


0x500a:	mov	byte ptr [rsp + 0xe], 1
0x500f:	mov	byte ptr [rsp + 0x7c], 0
0x5014:	xor	r12d, r12d
0x5017:	mov	qword ptr [rsp + 0x50], 0
0x5020:	mov	byte ptr [rsp + 0xf], 0
0x5025:	xor	r15d, r15d
0x5028:	mov	byte ptr [rsp + 0xd], 0
0x502d:	mov	qword ptr [rsp + 0x18], 0
0x5036:	mov	qword ptr [rsp + 0x48], 0
0x503f:	jmp	0x42a3


0x5044:	mov	byte ptr [rsp + 0xe], 1
0x5049:	mov	byte ptr [rsp + 0x7c], 0
0x504e:	xor	r12d, r12d
0x5051:	mov	qword ptr [rsp + 0x50], 0
0x505a:	mov	byte ptr [rsp + 0xf], 1
0x505f:	mov	byte ptr [rsp + 0xd], 1
0x5064:	jmp	0x4283


0x4283:	lea	rax, [rip + 0x3d33]
0x428a:	mov	qword ptr [rsp + 0x18], 1
0x4293:	xor	r15d, r15d
0x4296:	mov	dword ptr [rsp + 8], 2
0x429e:	mov	qword ptr [rsp + 0x48], rax
0x42a3:	xor	r11d, r11d
0x42a6:	mov	rax, rbp
0x42a9:	mov	r8d, r12d
0x42ac:	mov	rbp, r11
0x42af:	mov	r11, rax
0x42b2:	nop	word ptr [rax + rax]
0x42b8:	cmp	r11, rbp
0x42bb:	setne	r12b
0x42bf:	cmp	r11, -1
0x42c3:	jne	0x42d2


0x5238:	test	ebx, ebx
0x523a:	je	0x53c8


0x53c8:	mov	byte ptr [rsp + 0xd], 0
0x53cd:	jmp	0x4e41


0x5240:	lea	rax, [rip + 0x2d76]
0x5247:	mov	byte ptr [rsp + 0xe], 1
0x524c:	mov	byte ptr [rsp + 0x7c], 0
0x5251:	xor	r12d, r12d
0x5254:	mov	qword ptr [rsp + 0x50], 0
0x525d:	mov	byte ptr [rsp + 0xf], 1
0x5262:	mov	byte ptr [rsp + 0xd], 0
0x5267:	mov	qword ptr [rsp + 0x18], 1
0x5270:	xor	r15d, r15d
0x5273:	mov	qword ptr [rsp + 0x48], rax
0x5278:	jmp	0x42a3


0x4e41:	test	r13, r13
0x4e44:	jne	0x53da


0x5404:	nop	
0x5406:	nop	word ptr cs:[rax + rax]


0x55bb:	nop	dword ptr [rax + rax]


0x55f6:	nop	word ptr cs:[rax + rax]


0x5611:	nop	dword ptr [rax + rax]
0x5616:	nop	word ptr cs:[rax + rax]


0x5631:	nop	dword ptr [rax + rax]
0x5636:	nop	word ptr cs:[rax + rax]


0x5675:	nop	
0x5676:	nop	word ptr cs:[rax + rax]


0x5695:	nop	
0x5696:	nop	word ptr cs:[rax + rax]


0x5744:	nop	
0x5746:	nop	word ptr cs:[rax + rax]


0x5833:	nop	dword ptr [rax]
0x5836:	nop	word ptr cs:[rax + rax]


0x584a:	nop	word ptr [rax + rax]


0x58e3:	nop	dword ptr [rax]
0x58e6:	nop	word ptr cs:[rax + rax]


0x5903:	nop	dword ptr [rax]
0x5906:	nop	word ptr cs:[rax + rax]


0x591c:	nop	dword ptr [rax]


0x5938:	nop	dword ptr [rax + rax]


0x5954:	nop	
0x5956:	nop	word ptr cs:[rax + rax]


0x59ee:	nop	


0x5a7a:	nop	word ptr [rax + rax]


0x5a8c:	nop	dword ptr [rax]


0x5a9f:	nop	


0x5b38:	nop	dword ptr [rax + rax]


0x5b61:	nop	dword ptr [rax + rax]
0x5b66:	nop	word ptr cs:[rax + rax]


0x5b7a:	nop	word ptr [rax + rax]


0x5c0e:	nop	


0x5ca1:	nop	dword ptr [rax + rax]
0x5ca6:	nop	word ptr cs:[rax + rax]


0x5cbc:	nop	dword ptr [rax]


0x5cd7:	nop	word ptr [rax + rax]


0x5cf3:	nop	dword ptr [rax]
0x5cf6:	nop	word ptr cs:[rax + rax]


0x5d0c:	nop	dword ptr [rax]


0x5d24:	nop	
0x5d26:	nop	word ptr cs:[rax + rax]


0x5d43:	nop	dword ptr [rax]
0x5d46:	nop	word ptr cs:[rax + rax]


0x5d68:	nop	dword ptr [rax + rax]


0x5d7e:	nop	


0x6197:	nop	word ptr [rax + rax]


0x6238:	nop	dword ptr [rax + rax]


0x6315:	nop	
0x6316:	nop	word ptr cs:[rax + rax]


0x63ba:	nop	word ptr [rax + rax]


0x63e4:	nop	
0x63e6:	nop	word ptr cs:[rax + rax]


0x63f2:	nop	dword ptr [rax]
0x63f6:	nop	word ptr cs:[rax + rax]


0x6436:	nop	word ptr cs:[rax + rax]


0x6464:	nop	
0x6466:	nop	word ptr cs:[rax + rax]


0x64f2:	nop	dword ptr [rax]
0x64f6:	nop	word ptr cs:[rax + rax]


0x654a:	nop	word ptr [rax + rax]


0x6567:	nop	word ptr [rax + rax]


0x659e:	nop	


0x65c8:	nop	dword ptr [rax + rax]


0x65e3:	nop	word ptr cs:[rax + rax]
0x65ed:	nop	dword ptr [rax]


0x6625:	nop	word ptr cs:[rax + rax]
0x662f:	nop	


0x66ea:	nop	word ptr [rax + rax]


0x6734:	nop	
0x6736:	nop	word ptr cs:[rax + rax]


0x6786:	nop	word ptr cs:[rax + rax]


0x6968:	mov	rax, rbx
0x696b:	mul	rsi
0x696e:	jo	0x6b61


0x6b61:	or	rax, 0xffffffffffffffff
0x6b65:	mov	r8d, 1
0x6b6b:	jmp	0x6977


0x6974:	xor	r8d, r8d
0x6977:	mul	rsi
0x697a:	jo	0x6b52


0x6977:	mul	rsi
0x697a:	jo	0x6b52


0x6b52:	mov	r8d, 1
0x6b58:	or	rbx, 0xffffffffffffffff
0x6b5c:	jmp	0x6983


0x6980:	mov	rbx, rax
0x6983:	or	ebp, r8d
0x6986:	nop	word ptr cs:[rax + rax]
0x6990:	movsxd	rdi, edi
0x6993:	mov	eax, ebp
0x6995:	add	rcx, rdi
0x6998:	or	eax, 2
0x699b:	mov	qword ptr [r15], rcx
0x699e:	cmp	byte ptr [rcx], 0
0x69a1:	mov	qword ptr [r14], rbx
0x69a4:	cmovne	ebp, eax
0x69a7:	jmp	0x686d


0x6983:	or	ebp, r8d
0x6986:	nop	word ptr cs:[rax + rax]
0x6990:	movsxd	rdi, edi
0x6993:	mov	eax, ebp
0x6995:	add	rcx, rdi
0x6998:	or	eax, 2
0x699b:	mov	qword ptr [r15], rcx
0x699e:	cmp	byte ptr [rcx], 0
0x69a1:	mov	qword ptr [r14], rbx
0x69a4:	cmovne	ebp, eax
0x69a7:	jmp	0x686d


0x69b7:	mov	edx, 2
0x69bc:	mov	rax, rdx
0x69bf:	mul	rbx
0x69c2:	jo	0x6a5e


0x6a5e:	mov	ebp, 1
0x6a63:	or	rbx, 0xffffffffffffffff
0x6a67:	jmp	0x6990


0x69c8:	add	rbx, rbx
0x69cb:	jmp	0x6990


0x6990:	movsxd	rdi, edi
0x6993:	mov	eax, ebp
0x6995:	add	rcx, rdi
0x6998:	or	eax, 2
0x699b:	mov	qword ptr [r15], rcx
0x699e:	cmp	byte ptr [rcx], 0
0x69a1:	mov	qword ptr [r14], rbx
0x69a4:	cmovne	ebp, eax
0x69a7:	jmp	0x686d


0x69cd:	mov	edx, 0x200
0x69d2:	mov	rax, rdx
0x69d5:	mul	rbx
0x69d8:	jo	0x6a5e


0x69de:	shl	rbx, 9
0x69e2:	jmp	0x6990


0x69e4:	mov	r8d, 7
0x69ea:	xor	r9d, r9d
0x69ed:	nop	dword ptr [rax]
0x69f0:	mov	rax, rbx
0x69f3:	mul	rsi
0x69f6:	mov	rbx, rax
0x69f9:	jo	0x6b8e


0x6b8e:	mov	r9d, 1
0x6b94:	or	rbx, 0xffffffffffffffff
0x6b98:	jmp	0x69ff


0x69ff:	sub	r8d, 1
0x6a03:	jne	0x69f0


0x6a05:	or	ebp, r9d
0x6a08:	jmp	0x6990


0x69f0:	mov	rax, rbx
0x69f3:	mul	rsi
0x69f6:	mov	rbx, rax
0x69f9:	jo	0x6b8e


0x6a0a:	mov	r8d, 8
0x6a10:	xor	r9d, r9d
0x6a13:	nop	dword ptr [rax + rax]
0x6a18:	mov	rax, rbx
0x6a1b:	mul	rsi
0x6a1e:	mov	rbx, rax
0x6a21:	jo	0x6b70


0x6b70:	mov	r9d, 1
0x6b76:	or	rbx, 0xffffffffffffffff
0x6b7a:	jmp	0x6a27


0x6a27:	sub	r8d, 1
0x6a2b:	jne	0x6a18


0x6a2d:	jmp	0x6a05


0x6a18:	mov	rax, rbx
0x6a1b:	mul	rsi
0x6a1e:	mov	rbx, rax
0x6a21:	jo	0x6b70


0x6a2f:	mov	r8d, 4
0x6a35:	xor	r9d, r9d
0x6a38:	mov	rax, rbx
0x6a3b:	mul	rsi
0x6a3e:	mov	rbx, rax
0x6a41:	jo	0x6b43


0x6b43:	mov	r9d, 1
0x6b49:	or	rbx, 0xffffffffffffffff
0x6b4d:	jmp	0x6a47


0x6a47:	sub	r8d, 1
0x6a4b:	jne	0x6a38


0x6a4d:	jmp	0x6a05


0x6a38:	mov	rax, rbx
0x6a3b:	mul	rsi
0x6a3e:	mov	rbx, rax
0x6a41:	jo	0x6b43


0x6a4f:	mov	rax, rbx
0x6a52:	mul	rsi
0x6a55:	mov	rbx, rax
0x6a58:	jno	0x6990


0x6b7f:	mov	r9d, 1
0x6b85:	or	rbx, 0xffffffffffffffff
0x6b89:	jmp	0x6a88


0x6a88:	sub	r8d, 1
0x6a8c:	jne	0x6a79


0x6a8e:	jmp	0x6a05


0x6a79:	mov	rax, rbx
0x6a7c:	mul	rsi
0x6a7f:	mov	rbx, rax
0x6a82:	jo	0x6b7f


0x6a93:	mov	r8d, 6
0x6a99:	xor	r9d, r9d
0x6a9c:	mov	rax, rbx
0x6a9f:	mul	rsi
0x6aa2:	mov	rbx, rax
0x6aa5:	jo	0x6b34


0x6b34:	mov	r9d, 1
0x6b3a:	or	rbx, 0xffffffffffffffff
0x6b3e:	jmp	0x6aab


0x6aab:	sub	r8d, 1
0x6aaf:	jne	0x6a9c


0x6ab1:	jmp	0x6a05


0x6a9c:	mov	rax, rbx
0x6a9f:	mul	rsi
0x6aa2:	mov	rbx, rax
0x6aa5:	jo	0x6b34


0x6ab6:	mov	edx, 0x400
0x6abb:	mov	rax, rdx
0x6abe:	mul	rbx
0x6ac1:	jo	0x6a5e


0x6ac3:	shl	rbx, 0xa
0x6ac7:	jmp	0x6990


0x6acc:	mov	rax, rbx
0x6acf:	mul	rsi
0x6ad2:	jo	0x6b9d


0x6b9d:	mov	r8d, 1
0x6ba3:	or	rax, 0xffffffffffffffff
0x6ba7:	jmp	0x6adb


0x6ad8:	xor	r8d, r8d
0x6adb:	mul	rsi
0x6ade:	jno	0x6977


0x6adb:	mul	rsi
0x6ade:	jno	0x6977


0x6ae4:	mov	r8d, 1
0x6aea:	or	rax, 0xffffffffffffffff
0x6aee:	jmp	0x6977


0x6bac:	nop	dword ptr [rax]


0x6c2b:	nop	dword ptr [rax + rax]


0x6eae:	nop	


0x6f47:	nop	word ptr [rax + rax]


0x6fd3:	nop	word ptr cs:[rax + rax]
0x6fdd:	nop	dword ptr [rax]


0x705d:	nop	dword ptr [rax]


0x709c:	nop	dword ptr [rax]


0x7154:	nop	
0x7156:	nop	word ptr cs:[rax + rax]


0x7209:	nop	dword ptr [rax]


0x726e:	nop	


0x72d5:	nop	
0x72d6:	nop	word ptr cs:[rax + rax]


0x72e2:	nop	word ptr cs:[rax + rax]
0x72ec:	nop	dword ptr [rax]


0x4490:	xor	r10d, r10d
0x4493:	mov	eax, dword ptr [rsp + 8]
0x4497:	cmp	eax, 2
0x449a:	je	0x4a58


0x44c0:	xor	r10d, r10d
0x44c3:	cmp	dword ptr [rsp + 8], 2
0x44c8:	je	0x49d0


0x44e8:	mov	edx, 9
0x44ed:	mov	ebx, 0x74
0x44f2:	cmp	dword ptr [rsp + 8], 2
0x44f7:	sete	al
0x44fa:	and	al, byte ptr [rsp + 0xf]
0x44fe:	jne	0x464e


0x4528:	mov	edx, 8
0x452d:	mov	ebx, 0x62
0x4532:	jmp	0x4504


0x4538:	cmp	dword ptr [rsp + 8], 2
0x453d:	je	0x4910


0x45e0:	cmp	byte ptr [rsp + 0xd], 0
0x45e5:	jne	0x47b3


0x4608:	cmp	dword ptr [rsp + 8], 2
0x460d:	sete	dl
0x4610:	xor	eax, eax
0x4612:	jmp	0x43f8


0x4620:	mov	edx, 7
0x4625:	mov	ebx, 0x61
0x462a:	jmp	0x4504


0x4630:	cmp	dword ptr [rsp + 8], 2
0x4635:	sete	dl
0x4638:	test	rbp, rbp
0x463b:	jne	0x43ec


0x4660:	cmp	dword ptr [rsp + 8], 2
0x4665:	sete	dl
0x4668:	xor	r12d, r12d
0x466b:	jmp	0x4641


0x4670:	cmp	dword ptr [rsp + 8], 2
0x4675:	mov	ebx, 0x20
0x467a:	sete	dl
0x467d:	jmp	0x4641


0x4680:	mov	edx, 0xd
0x4685:	mov	ebx, 0x72
0x468a:	jmp	0x44f2


0x4690:	mov	edx, 0xc
0x4695:	mov	ebx, 0x66
0x469a:	jmp	0x4504


0x46a0:	mov	edx, 0xb
0x46a5:	mov	ebx, 0x76
0x46aa:	jmp	0x4504


0x46b0:	mov	edx, 0xa
0x46b5:	mov	ebx, 0x6e
0x46ba:	jmp	0x44f2


0x4750:	xor	r10d, r10d
0x4753:	cmp	byte ptr [rsp + 0xd], 0
0x4758:	jne	0x454e


0x4770:	mov	edx, 0xc
0x4775:	xor	r10d, r10d
0x4778:	mov	ebx, 0x66
0x477d:	jmp	0x4504


0x4788:	mov	edx, 0xa
0x478d:	xor	r10d, r10d
0x4790:	mov	ebx, 0x6e
0x4795:	jmp	0x44f2


0x47a0:	mov	ebx, 0x61
0x47a5:	jmp	0x4570


0x47b0:	xor	r10d, r10d
0x47b3:	cmp	dword ptr [rsp + 8], 2
0x47b8:	sete	dl
0x47bb:	cmp	byte ptr [rsp + 0xf], 0
0x47c0:	jne	0x535a


0x4850:	cmp	dword ptr [rsp + 8], 2
0x4855:	mov	r12d, r10d
0x4858:	sete	dl
0x485b:	xor	r10d, r10d
0x485e:	xor	eax, eax
0x4860:	jmp	0x43f8


0x4868:	cmp	dword ptr [rsp + 8], 2
0x486d:	sete	dl
0x4870:	xor	r10d, r10d
0x4873:	jmp	0x4638


0x4880:	cmp	dword ptr [rsp + 8], 2
0x4885:	sete	dl
0x4888:	xor	r10d, r10d
0x488b:	xor	r12d, r12d
0x488e:	jmp	0x4641


0x4898:	cmp	dword ptr [rsp + 8], 2
0x489d:	mov	r12d, r10d
0x48a0:	mov	ebx, 0x20
0x48a5:	sete	dl
0x48a8:	xor	r10d, r10d
0x48ab:	jmp	0x4641


0x48c8:	mov	ebx, 0x76
0x48cd:	jmp	0x4570


0x48d8:	mov	edx, 9
0x48dd:	xor	r10d, r10d
0x48e0:	mov	ebx, 0x74
0x48e5:	jmp	0x44f2


0x48f0:	mov	ebx, 0x62
0x48f5:	jmp	0x4570


0x4e90:	test	ebx, ebx
0x4e92:	jne	0x528d


0x6a70:	mov	r8d, 5
0x6a76:	xor	r9d, r9d
0x6a79:	mov	rax, rbx
0x6a7c:	mul	rsi
0x6a7f:	mov	rbx, rax
0x6a82:	jo	0x6b7f


0x1a97:	nop	word ptr [rax + rax]


0x1b4b:	nop	dword ptr [rax + rax]


0x1b74:	nop	dword ptr [rax]


0x1c43:	nop	dword ptr [rax + rax]


0x1c9d:	nop	dword ptr [rax]


0x1cd4:	nop	dword ptr [rax]


0x1d12:	nop	word ptr [rax + rax]


0x1d49:	nop	dword ptr [rax]


0x1d67:	nop	word ptr [rax + rax]


0x1d81:	nop	dword ptr [rax]


0x1de4:	nop	dword ptr [rax]


0x1df6:	nop	word ptr cs:[rax + rax]


0x2127:	nop	word ptr [rax + rax]


0x2193:	nop	dword ptr [rax + rax]


0x24be:	nop	


0x24d8:	nop	dword ptr [rax + rax]


0x2986:	nop	word ptr cs:[rax + rax]


0x29d7:	nop	word ptr [rax + rax]


0x2a21:	nop	dword ptr [rax]


0x2aea:	nop	word ptr [rax + rax]


0x2b39:	nop	dword ptr [rax]


0x2bcb:	nop	dword ptr [rax + rax]


0x2cda:	nop	word ptr [rax + rax]


0x2dc1:	nop	dword ptr [rax]


0x2de9:	nop	dword ptr [rax]


0x2df9:	nop	dword ptr [rax]


0x2e0f:	nop	


0x2e21:	nop	dword ptr [rax]


0x2e79:	nop	dword ptr [rax]


0x2e98:	nop	dword ptr [rax + rax]


0x2fa3:	nop	dword ptr [rax + rax]


0x2fb5:	nop	dword ptr [rax]


0x306d:	nop	dword ptr [rax]


0x30ee:	nop	


0x30ff:	nop	


0x310e:	nop	


0x316c:	nop	dword ptr [rax]


0x31a9:	nop	dword ptr [rax]


0x32f2:	nop	word ptr [rax + rax]


0x333c:	nop	dword ptr [rax]


0x3478:	nop	dword ptr [rax + rax]


0x34cc:	nop	dword ptr [rax]


0x34ff:	nop	


0x3539:	nop	dword ptr [rax]


0x3571:	nop	dword ptr [rax]


0x3616:	nop	word ptr cs:[rax + rax]


0x3685:	nop	dword ptr [rax]


0x3b39:	nop	dword ptr [rax]


0x3bbd:	nop	dword ptr [rax]


0x3bf8:	nop	dword ptr [rax + rax]


0x3c0f:	nop	


0x3c4a:	nop	word ptr [rax + rax]


0x3d9b:	nop	dword ptr [rax + rax]


0x3dd9:	nop	dword ptr [rax]


0x3e25:	nop	dword ptr [rax]


0x3e8a:	nop	word ptr [rax + rax]


0x3f6f:	nop	


0x3fab:	nop	dword ptr [rax + rax]


0x400e:	nop	


0x4032:	nop	word ptr [rax + rax]


0x411c:	nop	dword ptr [rax]


0x416d:	nop	dword ptr [rax]


0x4398:	nop	dword ptr [rax + rax]


0x4487:	nop	word ptr [rax + rax]


0x44be:	nop	


0x44e1:	nop	dword ptr [rax]


0x4522:	nop	word ptr [rax + rax]


0x4534:	nop	dword ptr [rax]


0x45d8:	nop	dword ptr [rax + rax]


0x4601:	nop	dword ptr [rax]


0x4617:	nop	word ptr [rax + rax]


0x462f:	nop	


0x465e:	nop	


0x466d:	nop	dword ptr [rax]


0x467f:	nop	


0x468f:	nop	


0x469f:	nop	


0x46af:	nop	


0x46bf:	nop	


0x472c:	nop	dword ptr [rax]


0x474c:	nop	dword ptr [rax]


0x475e:	nop	


0x476f:	nop	


0x4782:	nop	word ptr [rax + rax]


0x479a:	nop	word ptr [rax + rax]


0x47aa:	nop	word ptr [rax + rax]


0x484b:	nop	dword ptr [rax + rax]


0x4865:	nop	dword ptr [rax]


0x4878:	nop	dword ptr [rax + rax]


0x4893:	nop	dword ptr [rax + rax]


0x48c2:	nop	word ptr [rax + rax]


0x48d2:	nop	word ptr [rax + rax]


0x48ea:	nop	word ptr [rax + rax]


0x48fa:	nop	word ptr [rax + rax]


0x4908:	nop	dword ptr [rax + rax]


0x492f:	nop	


0x49c9:	nop	dword ptr [rax]


0x4a12:	nop	word ptr [rax + rax]


0x4a38:	nop	dword ptr [rax + rax]


0x4a51:	nop	dword ptr [rax]


0x4a72:	nop	word ptr [rax + rax]


0x4bd8:	nop	dword ptr [rax + rax]


0x4ceb:	nop	dword ptr [rax + rax]


0x4d0e:	nop	


0x4dd5:	nop	dword ptr [rax]


0x4e8d:	nop	dword ptr [rax]


0x5096:	nop	word ptr cs:[rax + rax]


0x5129:	nop	dword ptr [rax]


0x519d:	nop	dword ptr [rax]


0x527d:	nop	dword ptr [rax]


0x558b:	nop	dword ptr [rax + rax]


0x5e26:	nop	word ptr cs:[rax + rax]


0x5eb5:	nop	dword ptr [rax]


0x5ed6:	nop	word ptr cs:[rax + rax]


0x5f35:	nop	dword ptr [rax]


0x5f71:	nop	dword ptr [rax]


0x5fb8:	nop	dword ptr [rax + rax]


0x6007:	nop	word ptr [rax + rax]


0x6064:	nop	dword ptr [rax]


0x6092:	nop	word ptr [rax + rax]


0x6146:	nop	word ptr cs:[rax + rax]


0x61a9:	nop	dword ptr [rax]


0x6422:	nop	word ptr [rax + rax]


0x64a9:	nop	dword ptr [rax]


0x64d4:	nop	dword ptr [rax]


0x652d:	nop	dword ptr [rax]


0x67f6:	nop	word ptr cs:[rax + rax]


0x6851:	nop	dword ptr [rax]


0x6862:	nop	word ptr [rax + rax]


0x6892:	nop	word ptr [rax + rax]


0x689c:	nop	dword ptr [rax]


0x693b:	nop	dword ptr [rax + rax]


0x6a6c:	nop	dword ptr [rax]


0x6af3:	nop	dword ptr [rax + rax]


0x6bf5:	nop	dword ptr [rax]


0x6ccb:	nop	dword ptr [rax + rax]


0x6cf6:	nop	word ptr cs:[rax + rax]


0x6d2f:	nop	


0x6d79:	nop	dword ptr [rax]


0x6d9b:	nop	dword ptr [rax + rax]


0x6e41:	nop	dword ptr [rax]


0x6ed3:	nop	dword ptr [rax + rax]


0x6eff:	nop	


0x7014:	nop	dword ptr [rax]


0x7031:	nop	dword ptr [rax]


0x7042:	nop	word ptr [rax + rax]


0x7086:	nop	word ptr cs:[rax + rax]


0x70c4:	nop	dword ptr [rax]


0x7118:	nop	dword ptr [rax + rax]


0x7139:	nop	dword ptr [rax]


0x71f2:	nop	word ptr [rax + rax]


0x7255:	nop	dword ptr [rax]


