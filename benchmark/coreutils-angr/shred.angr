0x9560:	sub	rsp, 8
0x9564:	add	rsp, 8
0x9568:	ret	


0x9550:	mov	rdx, qword ptr [rip + 0x204ab1]
0x9557:	xor	esi, esi
0x9559:	jmp	0x2080


0x9540:	ret	


0x94d0:	push	r15
0x94d2:	push	r14
0x94d4:	mov	r15, rdx
0x94d7:	push	r13
0x94d9:	push	r12
0x94db:	lea	r12, [rip + 0x20446e]
0x94e2:	push	rbp
0x94e3:	lea	rbp, [rip + 0x20446e]
0x94ea:	push	rbx
0x94eb:	mov	r13d, edi
0x94ee:	mov	r14, rsi
0x94f1:	sub	rbp, r12
0x94f4:	sub	rsp, 8
0x94f8:	sar	rbp, 3
0x94fc:	call	0x1c18


0x94c0:	mov	edx, 3
0x94c5:	xor	esi, esi
0x94c7:	xor	eax, eax
0x94c9:	jmp	0x8f50


0x9480:	sub	rsp, 8
0x9484:	mov	edi, 0xe
0x9489:	call	0x1f70


0x9420:	sub	rsp, 8
0x9424:	xor	esi, esi
0x9426:	call	0x1fd0


0x9380:	push	r12
0x9382:	push	rbp
0x9383:	mov	rbp, rsi
0x9386:	push	rbx
0x9387:	call	0x2070


0x9300:	push	r12
0x9302:	push	rbp
0x9303:	mov	rbp, rdi
0x9306:	push	rbx
0x9307:	call	0x1cc0


0x9270:	push	r13
0x9272:	push	r12
0x9274:	mov	r13, rsi
0x9277:	push	rbp
0x9278:	push	rbx
0x9279:	mov	rbx, rdi
0x927c:	mov	r12, rdx
0x927f:	sub	rsp, 0x18
0x9283:	mov	rax, qword ptr fs:[0x28]
0x928c:	mov	qword ptr [rsp + 8], rax
0x9291:	xor	eax, eax
0x9293:	lea	rax, [rsp + 4]
0x9298:	test	rdi, rdi
0x929b:	cmove	rbx, rax
0x929f:	mov	rdi, rbx
0x92a2:	call	0x1dd0


0x9210:	mov	rax, qword ptr [rdi + 8]
0x9214:	cmp	qword ptr [rdi + 0x10], rax
0x9218:	je	0x9220


0x91d0:	test	rdi, rdi
0x91d3:	push	rbx
0x91d4:	mov	rbx, rdi
0x91d7:	je	0x91ea


0x8f50:	push	r12
0x8f52:	push	rbp
0x8f53:	mov	ebp, edi
0x8f55:	push	rbx
0x8f56:	sub	rsp, 0x50
0x8f5a:	mov	rax, qword ptr fs:[0x28]
0x8f63:	mov	qword ptr [rsp + 0x18], rax
0x8f68:	xor	eax, eax
0x8f6a:	lea	rax, [rsp + 0x70]
0x8f6f:	test	esi, esi
0x8f71:	mov	qword ptr [rsp + 0x30], rdx
0x8f76:	mov	qword ptr [rsp + 0x38], rcx
0x8f7b:	mov	qword ptr [rsp + 0x40], r8
0x8f80:	mov	qword ptr [rsp + 8], rax
0x8f85:	lea	rax, [rsp + 0x20]
0x8f8a:	mov	qword ptr [rsp + 0x48], r9
0x8f8f:	mov	dword ptr [rsp], 0x10
0x8f96:	mov	qword ptr [rsp + 0x10], rax
0x8f9b:	je	0x91a2


0x8ed0:	push	r12
0x8ed2:	push	rbp
0x8ed3:	push	rbx
0x8ed4:	mov	rbx, rdi
0x8ed7:	call	0x1f20


0x8ab0:	push	r15
0x8ab2:	push	r14
0x8ab4:	push	r13
0x8ab6:	push	r12
0x8ab8:	push	rbp
0x8ab9:	push	rbx
0x8aba:	sub	rsp, 0x28
0x8abe:	mov	rax, qword ptr fs:[0x28]
0x8ac7:	mov	qword ptr [rsp + 0x18], rax
0x8acc:	xor	eax, eax
0x8ace:	cmp	edx, 0x24
0x8ad1:	ja	0x8e35


0x8a80:	sub	rsp, 0x10
0x8a84:	push	r9
0x8a86:	mov	r9, r8
0x8a89:	mov	r8, rcx
0x8a8c:	mov	rcx, rdx
0x8a8f:	mov	rdx, rsi
0x8a92:	mov	esi, 0xa
0x8a97:	call	0x8980


0x8980:	push	r15
0x8982:	push	r14
0x8984:	mov	r15, rcx
0x8987:	push	r13
0x8989:	push	r12
0x898b:	mov	r14, rdx
0x898e:	push	rbp
0x898f:	push	rbx
0x8990:	mov	edx, esi
0x8992:	xor	esi, esi
0x8994:	mov	r12, rdi
0x8997:	mov	r13, r9
0x899a:	sub	rsp, 0x18
0x899e:	mov	rcx, rsp
0x89a1:	mov	ebx, dword ptr [rsp + 0x50]
0x89a5:	mov	rax, qword ptr fs:[0x28]
0x89ae:	mov	qword ptr [rsp + 8], rax
0x89b3:	xor	eax, eax
0x89b5:	call	0x8ab0


0x8940:	lea	rsi, [rip + 0x2768]
0x8947:	sub	rsp, 8
0x894b:	mov	edx, 5
0x8950:	xor	edi, edi
0x8952:	call	0x1d70


0x8920:	push	rbx
0x8921:	mov	rbx, rdi
0x8924:	call	0x1d90


0x88f0:	push	rbp
0x88f1:	push	rbx
0x88f2:	mov	rbp, rdi
0x88f5:	mov	rdi, rsi
0x88f8:	mov	rbx, rsi
0x88fb:	sub	rsp, 8
0x88ff:	call	0x86f0


0x88c0:	mov	rax, rdi
0x88c3:	sub	rsp, 8
0x88c7:	mul	rsi
0x88ca:	seto	dl
0x88cd:	test	rax, rax
0x88d0:	js	0x88e9


0x88a0:	push	rbx
0x88a1:	mov	rbx, rdi
0x88a4:	call	0x86f0


0x8850:	test	rdi, rdi
0x8853:	mov	rax, qword ptr [rsi]
0x8856:	je	0x8880


0x87c0:	test	rdi, rdi
0x87c3:	mov	r9, rdx
0x87c6:	mov	rcx, qword ptr [rsi]
0x87c9:	je	0x8800


0x8790:	mov	rax, rsi
0x8793:	mul	rdx
0x8796:	mov	rsi, rax
0x8799:	seto	al
0x879c:	test	rsi, rsi
0x879f:	js	0x87ab


0x8750:	test	rsi, rsi
0x8753:	push	rbx
0x8754:	mov	rbx, rsi
0x8757:	jne	0x875e


0x8740:	jmp	0x86f0


0x8710:	mov	rax, rdi
0x8713:	mul	rsi
0x8716:	mov	rdi, rax
0x8719:	seto	al
0x871c:	test	rdi, rdi
0x871f:	js	0x872b


0x86f0:	push	rbx
0x86f1:	mov	rbx, rdi
0x86f4:	call	0x1f50


0x8670:	push	rbx
0x8671:	lea	rsi, [rip + 0x2739]
0x8678:	mov	edx, 5
0x867d:	xor	edi, edi
0x867f:	call	0x1d70


0x8590:	push	rbp
0x8591:	push	rbx
0x8592:	mov	r10d, 0x20
0x8598:	xor	r11d, r11d
0x859b:	sub	rsp, 0xb8
0x85a2:	mov	rax, qword ptr fs:[0x28]
0x85ab:	mov	qword ptr [rsp + 0x78], rax
0x85b0:	xor	eax, eax
0x85b2:	lea	rax, [rsp + 0xd0]
0x85ba:	mov	qword ptr [rsp + 0xa0], r8
0x85c2:	lea	rbx, [rsp + 0xd0]
0x85ca:	lea	r8, [rsp + 0x20]
0x85cf:	mov	qword ptr [rsp + 0xa8], r9
0x85d7:	mov	dword ptr [rsp + 8], 0x20
0x85df:	mov	qword ptr [rsp + 0x10], rax
0x85e4:	lea	rax, [rsp + 0x80]
0x85ec:	xor	r9d, r9d
0x85ef:	mov	qword ptr [rsp + 0x18], rax
0x85f4:	mov	rbp, rax
0x85f7:	nop	word ptr [rax + rax]
0x8600:	cmp	r10d, 0x2f
0x8604:	ja	0x865c


0x8510:	sub	rsp, 0x68
0x8514:	mov	r10, r8
0x8517:	xor	r9d, r9d
0x851a:	mov	rax, qword ptr fs:[0x28]
0x8523:	mov	qword ptr [rsp + 0x58], rax
0x8528:	xor	eax, eax
0x852a:	mov	r8, rsp
0x852d:	nop	dword ptr [rax]
0x8530:	mov	eax, dword ptr [r10]
0x8533:	cmp	eax, 0x2f
0x8536:	ja	0x857a


0x84f0:	xor	r9d, r9d
0x84f3:	cmp	qword ptr [r8], 0
0x84f7:	je	0x850b


0x80d0:	push	r15
0x80d2:	push	r14
0x80d4:	push	r13
0x80d6:	push	r12
0x80d8:	mov	r12, r9
0x80db:	push	rbp
0x80dc:	push	rbx
0x80dd:	mov	rbp, rdi
0x80e0:	mov	rbx, r8
0x80e3:	sub	rsp, 0x28
0x80e7:	test	rsi, rsi
0x80ea:	je	0x8208


0x8090:	push	r13
0x8092:	push	r12
0x8094:	push	rbp
0x8095:	push	rbx
0x8096:	mov	ebx, edi
0x8098:	sub	rsp, 8
0x809c:	cmp	edi, 2
0x809f:	ja	0x80c2


0x7e20:	push	r15
0x7e22:	push	r14
0x7e24:	mov	r9d, r8d
0x7e27:	push	r13
0x7e29:	push	r12
0x7e2b:	mov	r14d, edx
0x7e2e:	push	rbp
0x7e2f:	push	rbx
0x7e30:	mov	r12, rsi
0x7e33:	mov	r13, rcx
0x7e36:	mov	ebp, r8d
0x7e39:	mov	r8, rcx
0x7e3c:	sub	rsp, 0x148
0x7e43:	mov	ecx, edx
0x7e45:	mov	rdx, rsi
0x7e48:	mov	rax, qword ptr fs:[0x28]
0x7e51:	mov	qword ptr [rsp + 0x138], rax
0x7e59:	xor	eax, eax
0x7e5b:	mov	esi, edi
0x7e5d:	mov	dword ptr [rsp + 4], edi
0x7e61:	mov	edi, 0x13c
0x7e66:	call	0x1ef0


0x7be0:	push	r13
0x7be2:	push	r12
0x7be4:	lea	r12, [rdi + 0x800]
0x7beb:	push	rbp
0x7bec:	mov	rdx, rdi
0x7bef:	push	rbx
0x7bf0:	mov	rax, rdi
0x7bf3:	movabs	rcx, 0x98f5704f6c44c0ab
0x7bfd:	movabs	r10, 0xae985bf2cbfc89ed
0x7c07:	movabs	rbp, 0x48fe4a0fa5a09315
0x7c11:	movabs	rsi, 0x82f053db8355e0ce
0x7c1b:	movabs	r8, 0xb29b2e824a595524
0x7c25:	movabs	rbx, 0x8c0ea5053d4712a0
0x7c2f:	movabs	r11, 0xb9f8b322c73ac862
0x7c39:	movabs	r9, 0x647c4677a2884b7c
0x7c43:	nop	dword ptr [rax + rax]
0x7c48:	add	rsi, qword ptr [rax + 0x20]
0x7c4c:	add	rcx, qword ptr [rax + 0x38]
0x7c50:	mov	r13, qword ptr [rax]
0x7c53:	add	rbp, qword ptr [rax + 0x28]
0x7c57:	add	r10, qword ptr [rax + 0x30]
0x7c5b:	sub	r13, rsi
0x7c5e:	add	r9, r13
0x7c61:	mov	r13, rcx
0x7c64:	shr	r13, 9
0x7c68:	add	rcx, r9
0x7c6b:	xor	rbp, r13
0x7c6e:	mov	r13, qword ptr [rax + 8]
0x7c72:	sub	r13, rbp
0x7c75:	add	r11, r13
0x7c78:	mov	r13, r9
0x7c7b:	shl	r13, 9
0x7c7f:	add	r9, r11
0x7c82:	xor	r10, r13
0x7c85:	mov	r13, qword ptr [rax + 0x10]
0x7c89:	sub	r13, r10
0x7c8c:	add	rbx, r13
0x7c8f:	mov	r13, r11
0x7c92:	shr	r13, 0x17
0x7c96:	add	r11, rbx
0x7c99:	xor	rcx, r13
0x7c9c:	mov	r13, qword ptr [rax + 0x18]
0x7ca0:	sub	r13, rcx
0x7ca3:	add	r8, r13
0x7ca6:	mov	r13, rbx
0x7ca9:	shl	r13, 0xf
0x7cad:	add	rbx, r8
0x7cb0:	xor	r9, r13
0x7cb3:	mov	r13, r8
0x7cb6:	sub	rsi, r9
0x7cb9:	shr	r13, 0xe
0x7cbd:	mov	qword ptr [rax], r9
0x7cc0:	xor	r11, r13
0x7cc3:	mov	r13, rsi
0x7cc6:	add	r8, rsi
0x7cc9:	sub	rbp, r11
0x7ccc:	shl	r13, 0x14
0x7cd0:	mov	qword ptr [rax + 8], r11
0x7cd4:	xor	rbx, r13
0x7cd7:	lea	r13, [rsi + rbp]
0x7cdb:	mov	rsi, rbp
0x7cde:	sub	r10, rbx
0x7ce1:	shr	rsi, 0x11
0x7ce5:	mov	qword ptr [rax + 0x10], rbx
0x7ce9:	xor	r8, rsi
0x7cec:	mov	rsi, r10
0x7cef:	add	rbp, r10
0x7cf2:	sub	rcx, r8
0x7cf5:	shl	rsi, 0xe
0x7cf9:	mov	qword ptr [rax + 0x18], r8
0x7cfd:	xor	rsi, r13
0x7d00:	add	r10, rcx
0x7d03:	mov	qword ptr [rax + 0x28], rbp
0x7d07:	mov	qword ptr [rax + 0x20], rsi
0x7d0b:	mov	qword ptr [rax + 0x30], r10
0x7d0f:	add	rax, 0x40
0x7d13:	mov	qword ptr [rax - 8], rcx
0x7d17:	cmp	r12, rax
0x7d1a:	jne	0x7c48


0x7950:	mov	rax, qword ptr [rdi + 0x810]
0x7957:	mov	rdx, qword ptr [rdi + 0x800]
0x795e:	lea	r9, [rdi + 0x400]
0x7965:	lea	rcx, [rax + 1]
0x7969:	mov	rax, rdi
0x796c:	mov	qword ptr [rdi + 0x810], rcx
0x7973:	add	rcx, qword ptr [rdi + 0x808]
0x797a:	nop	word ptr [rax + rax]
0x7980:	mov	r8, rdx
0x7983:	shl	r8, 0x15
0x7987:	xor	rdx, r8
0x798a:	mov	r8, qword ptr [rax]
0x798d:	not	rdx
0x7990:	add	rdx, qword ptr [rax + 0x400]
0x7997:	mov	r10, r8
0x799a:	and	r10d, 0x7f8
0x79a1:	mov	r11, qword ptr [rdi + r10]
0x79a5:	mov	r10, rdx
0x79a8:	shr	r10, 5
0x79ac:	add	r11, rdx
0x79af:	xor	rdx, r10
0x79b2:	add	rcx, r11
0x79b5:	mov	qword ptr [rax], rcx
0x79b8:	shr	rcx, 8
0x79bc:	and	ecx, 0x7f8
0x79c2:	mov	r11, qword ptr [rdi + rcx]
0x79c6:	add	r11, r8
0x79c9:	mov	qword ptr [rsi], r11
0x79cc:	add	rdx, qword ptr [rax + 0x408]
0x79d3:	mov	rcx, qword ptr [rax + 8]
0x79d7:	mov	r10, rdx
0x79da:	mov	rdx, rcx
0x79dd:	and	edx, 0x7f8
0x79e3:	mov	r8, qword ptr [rdi + rdx]
0x79e7:	mov	rdx, r10
0x79ea:	shl	rdx, 0xc
0x79ee:	xor	rdx, r10
0x79f1:	add	r8, r10
0x79f4:	add	r8, r11
0x79f7:	mov	qword ptr [rax + 8], r8
0x79fb:	shr	r8, 8
0x79ff:	and	r8d, 0x7f8
0x7a06:	add	rcx, qword ptr [rdi + r8]
0x7a0a:	mov	qword ptr [rsi + 8], rcx
0x7a0e:	mov	r8, qword ptr [rax + 0x10]
0x7a12:	mov	r11, rcx
0x7a15:	add	rdx, qword ptr [rax + 0x410]
0x7a1c:	mov	rcx, r8
0x7a1f:	and	ecx, 0x7f8
0x7a25:	mov	r10, qword ptr [rdi + rcx]
0x7a29:	add	r10, rdx
0x7a2c:	mov	rcx, r10
0x7a2f:	add	rcx, r11
0x7a32:	mov	qword ptr [rax + 0x10], rcx
0x7a36:	shr	rcx, 8
0x7a3a:	and	ecx, 0x7f8
0x7a40:	mov	r10, qword ptr [rdi + rcx]
0x7a44:	mov	rcx, rdx
0x7a47:	shr	rcx, 0x21
0x7a4b:	xor	rdx, rcx
0x7a4e:	add	r10, r8
0x7a51:	mov	qword ptr [rsi + 0x10], r10
0x7a55:	mov	rcx, qword ptr [rax + 0x18]
0x7a59:	add	rdx, qword ptr [rax + 0x418]
0x7a60:	mov	r8, rcx
0x7a63:	and	r8d, 0x7f8
0x7a6a:	mov	r11, qword ptr [rdi + r8]
0x7a6e:	add	r11, rdx
0x7a71:	mov	r8, r11
0x7a74:	add	r8, r10
0x7a77:	add	rax, 0x20
0x7a7b:	add	rsi, 0x20
0x7a7f:	mov	qword ptr [rax - 8], r8
0x7a83:	shr	r8, 8
0x7a87:	and	r8d, 0x7f8
0x7a8e:	add	rcx, qword ptr [rdi + r8]
0x7a92:	mov	qword ptr [rsi - 8], rcx
0x7a96:	cmp	rax, r9
0x7a99:	jb	0x7980


0x7900:	push	rbp
0x7901:	push	rbx
0x7902:	mov	rdx, -1
0x7909:	mov	rbx, rdi
0x790c:	mov	esi, 0x1038
0x7911:	sub	rsp, 8
0x7915:	mov	rbp, qword ptr [rdi]
0x7918:	call	0x2040


0x7760:	push	r15
0x7762:	push	r14
0x7764:	push	r13
0x7766:	push	r12
0x7768:	mov	r12, rdi
0x776b:	push	rbp
0x776c:	push	rbx
0x776d:	mov	rbp, rdx
0x7770:	mov	rbx, rsi
0x7773:	sub	rsp, 0x18
0x7777:	mov	rcx, qword ptr [rdi]
0x777a:	test	rcx, rcx
0x777d:	mov	qword ptr [rsp + 8], rcx
0x7782:	je	0x77e8


0x7750:	mov	qword ptr [rdi + 0x10], rsi
0x7754:	ret	


0x7740:	mov	qword ptr [rdi + 8], rsi
0x7744:	ret	


0x7410:	push	r15
0x7412:	push	r14
0x7414:	push	r13
0x7416:	push	r12
0x7418:	push	rbp
0x7419:	push	rbx
0x741a:	sub	rsp, 0x38
0x741e:	mov	rax, qword ptr fs:[0x28]
0x7427:	mov	qword ptr [rsp + 0x28], rax
0x742c:	xor	eax, eax
0x742e:	test	rsi, rsi
0x7431:	je	0x7558


0x73b0:	push	rbp
0x73b1:	push	rbx
0x73b2:	sub	rsp, 8
0x73b6:	test	rdi, rdi
0x73b9:	je	0x73f8


0x7350:	push	r13
0x7352:	push	r12
0x7354:	push	rbp
0x7355:	push	rbx
0x7356:	mov	rbx, rdi
0x7359:	sub	rsp, 8
0x735d:	mov	rdi, qword ptr [rdi]
0x7360:	call	0x7900


0x7330:	push	rbx
0x7331:	mov	rdx, -1
0x7338:	mov	rbx, rdi
0x733b:	mov	esi, 0x18
0x7340:	call	0x2040


0x7210:	push	r15
0x7212:	push	r14
0x7214:	lea	r15, [rsi + 1]
0x7218:	push	r13
0x721a:	push	r12
0x721c:	mov	r13, rdi
0x721f:	push	rbp
0x7220:	push	rbx
0x7221:	mov	r14, rsi
0x7224:	sub	rsp, 0x28
0x7228:	mov	rbp, qword ptr [rdi + 8]
0x722c:	mov	rbx, qword ptr [rdi + 0x10]
0x7230:	mov	rax, qword ptr fs:[0x28]
0x7239:	mov	qword ptr [rsp + 0x18], rax
0x723e:	xor	eax, eax
0x7240:	mov	rax, qword ptr [rdi]
0x7243:	lea	r12, [rsp + 0x10]
0x7248:	mov	qword ptr [rsp + 8], rax
0x724d:	jmp	0x7285


0x7200:	mov	rax, qword ptr [rdi]
0x7203:	ret	


0x71c0:	push	rbx
0x71c1:	call	0x7410


0x7190:	push	rbx
0x7191:	mov	rbx, rdi
0x7194:	mov	edi, 0x18
0x7199:	call	0x86f0


0x7170:	lea	rcx, [rip + 0x206ec9]
0x7177:	mov	rsi, rdi
0x717a:	mov	rdx, -1
0x7181:	xor	edi, edi
0x7183:	jmp	0x6830


0x7150:	lea	rcx, [rip + 0x206ee9]
0x7157:	mov	rdx, -1
0x715e:	jmp	0x6830


0x7130:	lea	rcx, [rip + 0x206f09]
0x7137:	mov	rdx, rsi
0x713a:	mov	rsi, rdi
0x713d:	xor	edi, edi
0x713f:	jmp	0x6830


0x7120:	lea	rcx, [rip + 0x206f19]
0x7127:	jmp	0x6830


0x7100:	mov	r8, rcx
0x7103:	mov	rcx, rdx
0x7106:	mov	rdx, rsi
0x7109:	mov	rsi, rdi
0x710c:	xor	edi, edi
0x710e:	jmp	0x7030


0x70e0:	mov	rcx, rdx
0x70e3:	mov	r8, -1
0x70ea:	mov	rdx, rsi
0x70ed:	mov	rsi, rdi
0x70f0:	xor	edi, edi
0x70f2:	jmp	0x7030


0x70d0:	mov	r8, -1
0x70d7:	jmp	0x7030


0x7030:	sub	rsp, 0x48
0x7034:	mov	r9, rcx
0x7037:	mov	rcx, qword ptr [rip + 0x207212]
0x703e:	movdqa	xmm0, xmmword ptr [rip + 0x2071da]
0x7046:	mov	rax, qword ptr fs:[0x28]
0x704f:	mov	qword ptr [rsp + 0x38], rax
0x7054:	xor	eax, eax
0x7056:	movaps	xmmword ptr [rsp], xmm0
0x705a:	test	rsi, rsi
0x705d:	mov	qword ptr [rsp + 0x30], rcx
0x7062:	mov	dword ptr [rsp], 0xa
0x7069:	movdqa	xmm0, xmmword ptr [rip + 0x2071bf]
0x7071:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x7076:	movdqa	xmm0, xmmword ptr [rip + 0x2071c2]
0x707e:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x7083:	je	0x70b7


0x6fa0:	sub	rsp, 0x48
0x6fa4:	mov	rax, rdx
0x6fa7:	mov	rdx, qword ptr fs:[0x28]
0x6fb0:	mov	qword ptr [rsp + 0x38], rdx
0x6fb5:	xor	edx, edx
0x6fb7:	cmp	esi, 0xa
0x6fba:	je	0x7024


0x6f90:	mov	edx, 0x3a
0x6f95:	jmp	0x6ec0


0x6f70:	mov	edx, 0x3a
0x6f75:	mov	rsi, -1
0x6f7c:	jmp	0x6ec0


0x6f60:	movsx	edx, sil
0x6f64:	mov	rsi, -1
0x6f6b:	jmp	0x6ec0


0x6ec0:	sub	rsp, 0x48
0x6ec4:	mov	ecx, edx
0x6ec6:	mov	rax, qword ptr fs:[0x28]
0x6ecf:	mov	qword ptr [rsp + 0x38], rax
0x6ed4:	xor	eax, eax
0x6ed6:	mov	rax, qword ptr [rip + 0x207373]
0x6edd:	mov	r8, rsp
0x6ee0:	and	ecx, 0x1f
0x6ee3:	movdqa	xmm0, xmmword ptr [rip + 0x207335]
0x6eeb:	mov	qword ptr [rsp + 0x30], rax
0x6ef0:	mov	eax, edx
0x6ef2:	movaps	xmmword ptr [rsp], xmm0
0x6ef6:	shr	al, 5
0x6ef9:	movzx	eax, al
0x6efc:	lea	r9, [r8 + rax*4 + 8]
0x6f01:	movdqa	xmm0, xmmword ptr [rip + 0x207327]
0x6f09:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x6f0e:	movdqa	xmm0, xmmword ptr [rip + 0x20732a]
0x6f16:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x6f1b:	mov	edx, dword ptr [r9]
0x6f1e:	mov	eax, edx
0x6f20:	shr	eax, cl
0x6f22:	not	eax
0x6f24:	and	eax, 1
0x6f27:	shl	eax, cl
0x6f29:	mov	rcx, r8
0x6f2c:	xor	eax, edx
0x6f2e:	mov	rdx, rsi
0x6f31:	mov	rsi, rdi
0x6f34:	mov	dword ptr [r9], eax
0x6f37:	xor	edi, edi
0x6f39:	call	0x6830


0x6eb0:	mov	rcx, rdx
0x6eb3:	mov	rdx, rsi
0x6eb6:	mov	esi, edi
0x6eb8:	xor	edi, edi
0x6eba:	jmp	0x6e10


0x6ea0:	mov	rdx, rsi
0x6ea3:	mov	esi, edi
0x6ea5:	xor	edi, edi
0x6ea7:	jmp	0x6d80


0x6e10:	sub	rsp, 0x48
0x6e14:	mov	rax, rdx
0x6e17:	mov	rdx, rcx
0x6e1a:	mov	rcx, qword ptr fs:[0x28]
0x6e23:	mov	qword ptr [rsp + 0x38], rcx
0x6e28:	xor	ecx, ecx
0x6e2a:	cmp	esi, 0xa
0x6e2d:	je	0x6e90


0x6d80:	sub	rsp, 0x48
0x6d84:	mov	rax, rdx
0x6d87:	mov	rdx, qword ptr fs:[0x28]
0x6d90:	mov	qword ptr [rsp + 0x38], rdx
0x6d95:	xor	edx, edx
0x6d97:	cmp	esi, 0xa
0x6d9a:	je	0x6e04


0x6d60:	lea	rcx, [rip + 0x2074b9]
0x6d67:	mov	rdx, rsi
0x6d6a:	mov	rsi, rdi
0x6d6d:	xor	edi, edi
0x6d6f:	jmp	0x6830


0x6d40:	lea	rcx, [rip + 0x2074d9]
0x6d47:	mov	rsi, rdi
0x6d4a:	mov	rdx, -1
0x6d51:	xor	edi, edi
0x6d53:	jmp	0x6830


0x6d30:	lea	rcx, [rip + 0x2074e9]
0x6d37:	jmp	0x6830


0x6d10:	lea	rcx, [rip + 0x207509]
0x6d17:	mov	rdx, -1
0x6d1e:	jmp	0x6830


0x6c70:	mov	eax, dword ptr [rip + 0x207402]
0x6c76:	push	r12
0x6c78:	mov	r12, qword ptr [rip + 0x207401]
0x6c7f:	push	rbp
0x6c80:	push	rbx
0x6c81:	cmp	eax, 1
0x6c84:	jle	0x6cb1


0x6c60:	mov	rcx, rdx
0x6c63:	xor	edx, edx
0x6c65:	jmp	0x6b70


0x6b70:	push	r15
0x6b72:	push	r14
0x6b74:	lea	rax, [rip + 0x2076a5]
0x6b7b:	push	r13
0x6b7d:	push	r12
0x6b7f:	mov	r12, rdx
0x6b82:	push	rbp
0x6b83:	push	rbx
0x6b84:	mov	rbx, rcx
0x6b87:	mov	r14, rdi
0x6b8a:	mov	r15, rsi
0x6b8d:	sub	rsp, 0x38
0x6b91:	test	rcx, rcx
0x6b94:	cmove	rbx, rax
0x6b98:	xor	ebp, ebp
0x6b9a:	call	0x1c70


0x6af0:	push	r15
0x6af2:	push	r14
0x6af4:	lea	rax, [rip + 0x207725]
0x6afb:	push	r13
0x6afd:	push	r12
0x6aff:	mov	r13, rdi
0x6b02:	push	rbp
0x6b03:	push	rbx
0x6b04:	mov	rbx, r8
0x6b07:	mov	r14, rsi
0x6b0a:	mov	r15, rdx
0x6b0d:	sub	rsp, 0x18
0x6b11:	test	r8, r8
0x6b14:	cmove	rbx, rax
0x6b18:	mov	qword ptr [rsp + 8], rcx
0x6b1d:	call	0x1c70


0x6ac0:	lea	rax, [rip + 0x207759]
0x6ac7:	test	rdi, rdi
0x6aca:	cmove	rdi, rax
0x6ace:	test	rsi, rsi
0x6ad1:	mov	dword ptr [rdi], 0xa
0x6ad7:	je	0x6ae7


0x6aa0:	lea	rax, [rip + 0x207779]
0x6aa7:	test	rdi, rdi
0x6aaa:	cmove	rdi, rax
0x6aae:	mov	eax, dword ptr [rdi + 4]
0x6ab1:	mov	dword ptr [rdi + 4], esi
0x6ab4:	ret	


0x6a60:	lea	rax, [rip + 0x2077b9]
0x6a67:	test	rdi, rdi
0x6a6a:	mov	ecx, esi
0x6a6c:	cmove	rdi, rax
0x6a70:	mov	eax, esi
0x6a72:	and	ecx, 0x1f
0x6a75:	shr	al, 5
0x6a78:	movzx	eax, al
0x6a7b:	lea	rdi, [rdi + rax*4 + 8]
0x6a80:	mov	esi, dword ptr [rdi]
0x6a82:	mov	eax, esi
0x6a84:	shr	eax, cl
0x6a86:	xor	edx, eax
0x6a88:	and	eax, 1
0x6a8b:	and	edx, 1
0x6a8e:	shl	edx, cl
0x6a90:	xor	edx, esi
0x6a92:	mov	dword ptr [rdi], edx
0x6a94:	ret	


0x6a40:	lea	rax, [rip + 0x2077d9]
0x6a47:	test	rdi, rdi
0x6a4a:	cmove	rdi, rax
0x6a4e:	mov	dword ptr [rdi], esi
0x6a50:	ret	


0x6a20:	lea	rax, [rip + 0x2077f9]
0x6a27:	test	rdi, rdi
0x6a2a:	cmove	rdi, rax
0x6a2e:	mov	eax, dword ptr [rdi]
0x6a30:	ret	


0x69e0:	push	r12
0x69e2:	push	rbp
0x69e3:	push	rbx
0x69e4:	mov	rbx, rdi
0x69e7:	call	0x1c70


0x6830:	push	r15
0x6832:	push	r14
0x6834:	movsxd	r15, edi
0x6837:	push	r13
0x6839:	push	r12
0x683b:	mov	r14, rdx
0x683e:	push	rbp
0x683f:	push	rbx
0x6840:	mov	rbp, rcx
0x6843:	sub	rsp, 0x28
0x6847:	mov	qword ptr [rsp + 8], rsi
0x684c:	call	0x1c70


0x55f0:	push	r15
0x55f2:	push	r14
0x55f4:	mov	r15d, r8d
0x55f7:	push	r13
0x55f9:	push	r12
0x55fb:	mov	r14, rdi
0x55fe:	push	rbp
0x55ff:	push	rbx
0x5600:	mov	ebx, r9d
0x5603:	mov	r13, rsi
0x5606:	mov	rbp, rcx
0x5609:	and	ebx, 2
0x560c:	sub	rsp, 0xb8
0x5613:	mov	rax, qword ptr [rsp + 0xf0]
0x561b:	mov	qword ptr [rsp + 0x10], rdx
0x5620:	mov	dword ptr [rsp + 8], r8d
0x5625:	mov	dword ptr [rsp + 0x78], r9d
0x562a:	mov	qword ptr [rsp + 0x20], rax
0x562f:	mov	rax, qword ptr [rsp + 0xf8]
0x5637:	mov	qword ptr [rsp + 0x68], rax
0x563c:	mov	rax, qword ptr [rsp + 0x100]
0x5644:	mov	qword ptr [rsp + 0x60], rax
0x5649:	mov	rax, qword ptr fs:[0x28]
0x5652:	mov	qword ptr [rsp + 0xa8], rax
0x565a:	xor	eax, eax
0x565c:	call	0x1d80


0x5500:	push	rbp
0x5501:	push	rbx
0x5502:	mov	rbp, rdi
0x5505:	mov	ebx, esi
0x5507:	sub	rsp, 8
0x550b:	call	0x9480


0x5460:	test	rdi, rdi
0x5463:	push	rbx
0x5464:	je	0x54dd


0x5410:	lea	rcx, [rsi + 0x14]
0x5414:	mov	byte ptr [rsi + 0x14], 0
0x5418:	movabs	rsi, 0xcccccccccccccccd
0x5422:	nop	word ptr [rax + rax]
0x5428:	mov	rax, rdi
0x542b:	sub	rcx, 1
0x542f:	mul	rsi
0x5432:	shr	rdx, 3
0x5436:	lea	rax, [rdx + rdx*4]
0x543a:	add	rax, rax
0x543d:	sub	rdi, rax
0x5440:	add	edi, 0x30
0x5443:	test	rdx, rdx
0x5446:	mov	byte ptr [rcx], dil
0x5449:	mov	rdi, rdx
0x544c:	jne	0x5428


0x5220:	push	r13
0x5222:	push	r12
0x5224:	mov	r13, rsi
0x5227:	push	rbp
0x5228:	push	rbx
0x5229:	mov	r12, rdx
0x522c:	mov	rbx, rdi
0x522f:	sub	rsp, 0x18
0x5233:	mov	rax, qword ptr fs:[0x28]
0x523c:	mov	qword ptr [rsp + 8], rax
0x5241:	xor	eax, eax
0x5243:	test	rdi, rdi
0x5246:	je	0x5360


0x4810:	push	r15
0x4812:	push	r14
0x4814:	mov	eax, edx
0x4816:	push	r13
0x4818:	push	r12
0x481a:	mov	r15d, edx
0x481d:	push	rbp
0x481e:	push	rbx
0x481f:	and	eax, 0x20
0x4822:	and	r15d, 3
0x4826:	mov	r12d, edx
0x4829:	mov	rbx, rdi
0x482c:	sub	rsp, 0x98
0x4833:	mov	qword ptr [rsp + 0x18], rcx
0x4838:	mov	dword ptr [rsp + 0x30], eax
0x483c:	mov	rcx, qword ptr fs:[0x28]
0x4845:	mov	qword ptr [rsp + 0x88], rcx
0x484d:	xor	ecx, ecx
0x484f:	cmp	eax, 1
0x4852:	mov	qword ptr [rsp], rsi
0x4856:	mov	qword ptr [rsp + 0x10], r8
0x485b:	sbb	eax, eax
0x485d:	and	eax, 0xffffffe8
0x4860:	add	eax, 0x400
0x4865:	mov	dword ptr [rsp + 0x34], eax
0x4869:	call	0x1cf0


0x4740:	fld	dword ptr [rip + 0x60a6]
0x4746:	fld	xword ptr [rsp + 8]
0x474a:	fucomi	st(1)
0x474c:	jae	0x47c0


0x46d0:	sub	rsp, 0x58
0x46d4:	mov	qword ptr [rsp + 0x30], rdx
0x46d9:	xor	edx, edx
0x46db:	mov	rax, qword ptr fs:[0x28]
0x46e4:	mov	qword ptr [rsp + 0x18], rax
0x46e9:	xor	eax, eax
0x46eb:	test	sil, 0x40
0x46ef:	jne	0x4718


0x4680:	push	rbx
0x4681:	mov	rbx, rdi
0x4684:	call	0x1d90


0x4620:	movzx	edx, byte ptr [rdi]
0x4623:	mov	rax, rdi
0x4626:	cmp	dl, 0x2f
0x4629:	jne	0x463c


0x45c0:	push	rbp
0x45c1:	push	rbx
0x45c2:	mov	rbp, rdi
0x45c5:	sub	rsp, 8
0x45c9:	call	0x4560


0x4560:	push	rbp
0x4561:	push	rbx
0x4562:	xor	ebp, ebp
0x4564:	mov	rbx, rdi
0x4567:	sub	rsp, 8
0x456b:	cmp	byte ptr [rdi], 0x2f
0x456e:	sete	bpl
0x4572:	call	0x4620


0x4540:	sub	rsp, 8
0x4544:	call	0x45c0


0x4490:	push	rbp
0x4491:	push	rbx
0x4492:	sub	rsp, 8
0x4496:	mov	rdi, qword ptr [rip + 0x209c0b]
0x449d:	call	0x9300


0x4480:	mov	byte ptr [rip + 0x209c71], dil
0x4487:	ret	


0x4470:	mov	qword ptr [rip + 0x209c89], rdi
0x4477:	ret	


0x4420:	push	r14
0x4422:	push	r13
0x4424:	push	r12
0x4426:	push	rbp
0x4427:	push	rbx
0x4428:	mov	r14, qword ptr [rsi]
0x442b:	test	r14, r14
0x442e:	je	0x4461


0x43b0:	push	r15
0x43b2:	push	r14
0x43b4:	mov	r14, rdi
0x43b7:	push	r13
0x43b9:	push	r12
0x43bb:	mov	r12, rsi
0x43be:	push	rbp
0x43bf:	push	rbx
0x43c0:	mov	rbp, rcx
0x43c3:	mov	rbx, rdx
0x43c6:	mov	rcx, r8
0x43c9:	mov	rdx, rbp
0x43cc:	sub	rsp, 8
0x43d0:	mov	rsi, rbx
0x43d3:	mov	rdi, r12
0x43d6:	mov	r15, r8
0x43d9:	mov	r13, r9
0x43dc:	call	0x40f0


0x4290:	push	r15
0x4292:	push	r14
0x4294:	mov	r14, rdi
0x4297:	push	r13
0x4299:	push	r12
0x429b:	xor	edi, edi
0x429d:	push	rbp
0x429e:	push	rbx
0x429f:	mov	rbp, rsi
0x42a2:	lea	rsi, [rip + 0x64a0]
0x42a9:	mov	r12, rdx
0x42ac:	mov	edx, 5
0x42b1:	sub	rsp, 8
0x42b5:	mov	rbx, qword ptr [rip + 0x209e24]
0x42bc:	call	0x1d70


0x4210:	cmp	rdx, -1
0x4214:	push	r12
0x4216:	mov	edx, 5
0x421b:	push	rbp
0x421c:	mov	r12, rsi
0x421f:	push	rbx
0x4220:	mov	rbp, rdi
0x4223:	je	0x4270


0x40f0:	push	r15
0x40f2:	push	r14
0x40f4:	mov	r15, rsi
0x40f7:	push	r13
0x40f9:	push	r12
0x40fb:	mov	r13, rcx
0x40fe:	push	rbp
0x40ff:	push	rbx
0x4100:	mov	rbp, rdx
0x4103:	sub	rsp, 0x28
0x4107:	mov	qword ptr [rsp + 8], rdi
0x410c:	mov	qword ptr [rsp + 0x18], rdx
0x4111:	call	0x1d90


0x40e0:	mov	edi, 1
0x40e5:	jmp	0x3c20


0x3c20:	push	r13
0x3c22:	push	r12
0x3c24:	mov	edx, 5
0x3c29:	push	rbp
0x3c2a:	push	rbx
0x3c2b:	mov	ebp, edi
0x3c2d:	sub	rsp, 0x88
0x3c34:	mov	rbx, qword ptr [rip + 0x20a4cd]
0x3c3b:	mov	rax, qword ptr fs:[0x28]
0x3c44:	mov	qword ptr [rsp + 0x78], rax
0x3c49:	xor	eax, eax
0x3c4b:	test	edi, edi
0x3c4d:	je	0x3c7d


0x3510:	push	r15
0x3512:	push	r14
0x3514:	push	r13
0x3516:	push	r12
0x3518:	push	rbp
0x3519:	push	rbx
0x351a:	mov	ebp, edi
0x351c:	mov	rbx, rcx
0x351f:	sub	rsp, 0x118
0x3526:	mov	rax, qword ptr fs:[0x28]
0x352f:	mov	qword ptr [rsp + 0x108], rax
0x3537:	xor	eax, eax
0x3539:	cmp	byte ptr [rcx + 0x1c], 0
0x353d:	mov	qword ptr [rsp], rsi
0x3541:	mov	qword ptr [rsp + 0x30], rdx
0x3546:	mov	qword ptr [rsp + 0x28], 0
0x354f:	je	0x355e


0x2c80:	push	r15
0x2c82:	push	r14
0x2c84:	mov	rax, rcx
0x2c87:	push	r13
0x2c89:	push	r12
0x2c8b:	mov	r14d, edi
0x2c8e:	push	rbp
0x2c8f:	push	rbx
0x2c90:	mov	ebx, r8d
0x2c93:	sub	rsp, 0x848
0x2c9a:	mov	r15, qword ptr [rax]
0x2c9d:	mov	qword ptr [rsp + 0x50], rcx
0x2ca2:	mov	qword ptr [rsp], rsi
0x2ca6:	mov	rcx, qword ptr fs:[0x28]
0x2caf:	mov	qword ptr [rsp + 0x838], rcx
0x2cb7:	xor	ecx, ecx
0x2cb9:	mov	qword ptr [rsp + 8], rdx
0x2cbe:	mov	dword ptr [rsp + 0x20], r8d
0x2cc3:	mov	qword ptr [rsp + 0x48], r9
0x2cc8:	call	0x20a0


0x2bb0:	push	r13
0x2bb2:	push	r12
0x2bb4:	mov	r13, rsi
0x2bb7:	push	rbp
0x2bb8:	push	rbx
0x2bb9:	mov	ebx, edi
0x2bbb:	sub	rsp, 8
0x2bbf:	call	0x1c80


0x2b60:	push	rbp
0x2b61:	push	rbx
0x2b62:	xor	eax, eax
0x2b64:	mov	ebp, esi
0x2b66:	mov	esi, 3
0x2b6b:	mov	ebx, edi
0x2b6d:	sub	rsp, 8
0x2b71:	call	0x8f50


0x2b50:	mov	rdi, qword ptr [rip + 0x20b599]
0x2b57:	jmp	0x7350


0x2b40:	push	rbp
0x2b41:	mov	rbp, rsp
0x2b44:	pop	rbp
0x2b45:	jmp	0x2ab0


0x2b00:	cmp	byte ptr [rip + 0x20b5e1], 0
0x2b07:	jne	0x2b38


0x2ab0:	lea	rdi, [rip + 0x20b5e9]
0x2ab7:	lea	rsi, [rip + 0x20b5e2]
0x2abe:	push	rbp
0x2abf:	sub	rsi, rdi
0x2ac2:	mov	rbp, rsp
0x2ac5:	sar	rsi, 3
0x2ac9:	mov	rax, rsi
0x2acc:	shr	rax, 0x3f
0x2ad0:	add	rsi, rax
0x2ad3:	sar	rsi, 1
0x2ad6:	je	0x2af0


0x2a70:	lea	rdi, [rip + 0x20b629]
0x2a77:	push	rbp
0x2a78:	lea	rax, [rip + 0x20b621]
0x2a7f:	cmp	rax, rdi
0x2a82:	mov	rbp, rsp
0x2a85:	je	0x2aa0


0x2a40:	xor	ebp, ebp
0x2a42:	mov	r9, rdx
0x2a45:	pop	rsi
0x2a46:	mov	rdx, rsp
0x2a49:	and	rsp, 0xfffffffffffffff0
0x2a4d:	push	rax
0x2a4e:	push	rsp
0x2a4f:	lea	r8, [rip + 0x6aea]
0x2a56:	lea	rcx, [rip + 0x6a73]
0x2a5d:	lea	rdi, [rip - 0x924]
0x2a64:	call	qword ptr [rip + 0x20b576]


0x2140:	push	r15
0x2142:	push	r14
0x2144:	push	r13
0x2146:	push	r12
0x2148:	lea	r12, [rip + 0x20b811]
0x214f:	push	rbp
0x2150:	push	rbx
0x2151:	mov	ebp, edi
0x2153:	pxor	xmm0, xmm0
0x2157:	mov	rbx, rsi
0x215a:	sub	rsp, 0x88
0x2161:	mov	rdi, qword ptr [rsi]
0x2164:	xor	r13d, r13d
0x2167:	mov	rax, qword ptr fs:[0x28]
0x2170:	mov	qword ptr [rsp + 0x78], rax
0x2175:	xor	eax, eax
0x2177:	movaps	xmmword ptr [rsp + 0x50], xmm0
0x217c:	movaps	xmmword ptr [rsp + 0x60], xmm0
0x2181:	call	0x5460


0x1c18:	sub	rsp, 8
0x1c1c:	mov	rax, qword ptr [rip + 0x20c3c5]
0x1c23:	test	rax, rax
0x1c26:	je	0x1c2a


0x2080:	jmp	qword ptr [rip + 0x20befa]


0x1f70:	jmp	qword ptr [rip + 0x20bf82]


0x1fd0:	jmp	qword ptr [rip + 0x20bf52]


0x2070:	jmp	qword ptr [rip + 0x20bf02]


0x1cc0:	jmp	qword ptr [rip + 0x20c0da]


0x1dd0:	jmp	qword ptr [rip + 0x20c052]


0x9220:	mov	rax, qword ptr [rdi + 0x20]
0x9224:	cmp	qword ptr [rdi + 0x28], rax
0x9228:	jne	0x921a


0x921a:	jmp	0x2060


0x91ea:	mov	rdi, rbx
0x91ed:	pop	rbx
0x91ee:	jmp	0x1f60


0x91d9:	call	0x1f90


0x91a2:	mov	rax, qword ptr [rsp + 0x10]
0x91a7:	xor	esi, esi
0x91a9:	mov	edx, dword ptr [rax + 0x10]
0x91ac:	xor	eax, eax
0x91ae:	call	0x1d00


0x8fa1:	cmp	esi, 0x406
0x8fa7:	jne	0x8ff0


0x1f20:	jmp	qword ptr [rip + 0x20bfaa]


0x8ad7:	lea	rax, [rsp + 0x10]
0x8adc:	mov	r15, rsi
0x8adf:	test	rsi, rsi
0x8ae2:	mov	rbp, rdi
0x8ae5:	mov	dword ptr [rsp + 8], edx
0x8ae9:	mov	r14, rcx
0x8aec:	mov	r13, r8
0x8aef:	cmove	r15, rax
0x8af3:	call	0x1c70


0x8e35:	lea	rcx, [rip + 0x23a4]
0x8e3c:	lea	rsi, [rip + 0x227d]
0x8e43:	lea	rdi, [rip + 0x2296]
0x8e4a:	mov	edx, 0x54
0x8e4f:	call	0x1e50


0x1d70:	jmp	qword ptr [rip + 0x20c082]


0x1d90:	jmp	qword ptr [rip + 0x20c072]


0x88e9:	call	0x8940


0x88d2:	movzx	edx, dl
0x88d5:	test	rdx, rdx
0x88d8:	jne	0x88e9


0x8880:	test	rax, rax
0x8883:	mov	edx, 0x80
0x8888:	cmove	rax, rdx
0x888c:	test	rax, rax
0x888f:	jns	0x8872


0x8858:	movabs	rdx, 0x5555555555555553
0x8862:	cmp	rax, rdx
0x8865:	ja	0x8891


0x8800:	test	rcx, rcx
0x8803:	je	0x8828


0x87cb:	xor	edx, edx
0x87cd:	movabs	rax, 0x5555555555555554
0x87d7:	div	r9
0x87da:	cmp	rax, rcx
0x87dd:	jbe	0x881b


0x87ab:	sub	rsp, 8
0x87af:	call	0x8940


0x87a1:	movzx	eax, al
0x87a4:	test	rax, rax
0x87a7:	jne	0x87ab


0x8759:	test	rdi, rdi
0x875c:	jne	0x8778


0x875e:	mov	rsi, rbx
0x8761:	call	0x1fa0


0x872b:	sub	rsp, 8
0x872f:	call	0x8940


0x8721:	movzx	eax, al
0x8724:	test	rax, rax
0x8727:	jne	0x872b


0x1f50:	jmp	qword ptr [rip + 0x20bf92]


0x8606:	mov	eax, r10d
0x8609:	mov	r11d, 1
0x860f:	add	r10d, 8
0x8613:	add	rax, rbp
0x8616:	mov	rax, qword ptr [rax]
0x8619:	test	rax, rax
0x861c:	mov	qword ptr [r8 + r9*8], rax
0x8620:	je	0x862c


0x865c:	mov	rax, rbx
0x865f:	add	rbx, 8
0x8663:	jmp	0x8616


0x8538:	mov	r11d, eax
0x853b:	add	r11, qword ptr [r10 + 0x10]
0x853f:	add	eax, 8
0x8542:	mov	dword ptr [r10], eax
0x8545:	mov	rax, qword ptr [r11]
0x8548:	test	rax, rax
0x854b:	mov	qword ptr [r8 + r9*8], rax
0x854f:	je	0x855b


0x857a:	mov	r11, qword ptr [r10 + 8]
0x857e:	lea	rax, [r11 + 8]
0x8582:	mov	qword ptr [r10 + 8], rax
0x8586:	jmp	0x8545


0x850b:	jmp	0x80d0


0x8208:	mov	r8, rcx
0x820b:	mov	rcx, rdx
0x820e:	lea	rdx, [rip + 0x2b4e]
0x8215:	mov	esi, 1
0x821a:	xor	eax, eax
0x821c:	call	0x20e0


0x80f0:	mov	r8, rdx
0x80f3:	lea	rdx, [rip + 0x2c5d]
0x80fa:	mov	r9, rcx
0x80fd:	xor	eax, eax
0x80ff:	mov	rcx, rsi
0x8102:	mov	esi, 1
0x8107:	call	0x20e0


0x80a1:	call	0x94c0


0x80c2:	add	rsp, 8
0x80c6:	mov	eax, ebx
0x80c8:	pop	rbx
0x80c9:	pop	rbp
0x80ca:	pop	r12
0x80cc:	pop	r13
0x80ce:	ret	


0x1ef0:	jmp	qword ptr [rip + 0x20bfc2]


0x7d20:	add	rsi, qword ptr [rdx + 0x20]
0x7d24:	add	rcx, qword ptr [rdx + 0x38]
0x7d28:	mov	r12, qword ptr [rdx]
0x7d2b:	add	rbp, qword ptr [rdx + 0x28]
0x7d2f:	add	r10, qword ptr [rdx + 0x30]
0x7d33:	sub	r12, rsi
0x7d36:	add	r9, r12
0x7d39:	mov	r12, rcx
0x7d3c:	shr	r12, 9
0x7d40:	add	rcx, r9
0x7d43:	xor	rbp, r12
0x7d46:	mov	r12, qword ptr [rdx + 8]
0x7d4a:	sub	r12, rbp
0x7d4d:	add	r11, r12
0x7d50:	mov	r12, r9
0x7d53:	shl	r12, 9
0x7d57:	add	r9, r11
0x7d5a:	xor	r10, r12
0x7d5d:	mov	r12, qword ptr [rdx + 0x10]
0x7d61:	sub	r12, r10
0x7d64:	add	rbx, r12
0x7d67:	mov	r12, r11
0x7d6a:	shr	r12, 0x17
0x7d6e:	add	r11, rbx
0x7d71:	xor	rcx, r12
0x7d74:	mov	r12, qword ptr [rdx + 0x18]
0x7d78:	sub	r12, rcx
0x7d7b:	add	r8, r12
0x7d7e:	mov	r12, rbx
0x7d81:	shl	r12, 0xf
0x7d85:	add	rbx, r8
0x7d88:	xor	r9, r12
0x7d8b:	mov	r12, r8
0x7d8e:	sub	rsi, r9
0x7d91:	shr	r12, 0xe
0x7d95:	mov	qword ptr [rdx], r9
0x7d98:	xor	r11, r12
0x7d9b:	mov	r12, rsi
0x7d9e:	add	r8, rsi
0x7da1:	sub	rbp, r11
0x7da4:	shl	r12, 0x14
0x7da8:	mov	qword ptr [rdx + 8], r11
0x7dac:	xor	rbx, r12
0x7daf:	lea	r12, [rsi + rbp]
0x7db3:	mov	rsi, rbp
0x7db6:	sub	r10, rbx
0x7db9:	shr	rsi, 0x11
0x7dbd:	mov	qword ptr [rdx + 0x10], rbx
0x7dc1:	xor	r8, rsi
0x7dc4:	mov	rsi, r10
0x7dc7:	add	rbp, r10
0x7dca:	sub	rcx, r8
0x7dcd:	shl	rsi, 0xe
0x7dd1:	mov	qword ptr [rdx + 0x18], r8
0x7dd5:	xor	rsi, r12
0x7dd8:	add	r10, rcx
0x7ddb:	mov	qword ptr [rdx + 0x28], rbp
0x7ddf:	mov	qword ptr [rdx + 0x20], rsi
0x7de3:	mov	qword ptr [rdx + 0x30], r10
0x7de7:	add	rdx, 0x40
0x7deb:	mov	qword ptr [rdx - 8], rcx
0x7def:	cmp	rax, rdx
0x7df2:	jne	0x7d20


0x7c48:	add	rsi, qword ptr [rax + 0x20]
0x7c4c:	add	rcx, qword ptr [rax + 0x38]
0x7c50:	mov	r13, qword ptr [rax]
0x7c53:	add	rbp, qword ptr [rax + 0x28]
0x7c57:	add	r10, qword ptr [rax + 0x30]
0x7c5b:	sub	r13, rsi
0x7c5e:	add	r9, r13
0x7c61:	mov	r13, rcx
0x7c64:	shr	r13, 9
0x7c68:	add	rcx, r9
0x7c6b:	xor	rbp, r13
0x7c6e:	mov	r13, qword ptr [rax + 8]
0x7c72:	sub	r13, rbp
0x7c75:	add	r11, r13
0x7c78:	mov	r13, r9
0x7c7b:	shl	r13, 9
0x7c7f:	add	r9, r11
0x7c82:	xor	r10, r13
0x7c85:	mov	r13, qword ptr [rax + 0x10]
0x7c89:	sub	r13, r10
0x7c8c:	add	rbx, r13
0x7c8f:	mov	r13, r11
0x7c92:	shr	r13, 0x17
0x7c96:	add	r11, rbx
0x7c99:	xor	rcx, r13
0x7c9c:	mov	r13, qword ptr [rax + 0x18]
0x7ca0:	sub	r13, rcx
0x7ca3:	add	r8, r13
0x7ca6:	mov	r13, rbx
0x7ca9:	shl	r13, 0xf
0x7cad:	add	rbx, r8
0x7cb0:	xor	r9, r13
0x7cb3:	mov	r13, r8
0x7cb6:	sub	rsi, r9
0x7cb9:	shr	r13, 0xe
0x7cbd:	mov	qword ptr [rax], r9
0x7cc0:	xor	r11, r13
0x7cc3:	mov	r13, rsi
0x7cc6:	add	r8, rsi
0x7cc9:	sub	rbp, r11
0x7ccc:	shl	r13, 0x14
0x7cd0:	mov	qword ptr [rax + 8], r11
0x7cd4:	xor	rbx, r13
0x7cd7:	lea	r13, [rsi + rbp]
0x7cdb:	mov	rsi, rbp
0x7cde:	sub	r10, rbx
0x7ce1:	shr	rsi, 0x11
0x7ce5:	mov	qword ptr [rax + 0x10], rbx
0x7ce9:	xor	r8, rsi
0x7cec:	mov	rsi, r10
0x7cef:	add	rbp, r10
0x7cf2:	sub	rcx, r8
0x7cf5:	shl	rsi, 0xe
0x7cf9:	mov	qword ptr [rax + 0x18], r8
0x7cfd:	xor	rsi, r13
0x7d00:	add	r10, rcx
0x7d03:	mov	qword ptr [rax + 0x28], rbp
0x7d07:	mov	qword ptr [rax + 0x20], rsi
0x7d0b:	mov	qword ptr [rax + 0x30], r10
0x7d0f:	add	rax, 0x40
0x7d13:	mov	qword ptr [rax - 8], rcx
0x7d17:	cmp	r12, rax
0x7d1a:	jne	0x7c48


0x7980:	mov	r8, rdx
0x7983:	shl	r8, 0x15
0x7987:	xor	rdx, r8
0x798a:	mov	r8, qword ptr [rax]
0x798d:	not	rdx
0x7990:	add	rdx, qword ptr [rax + 0x400]
0x7997:	mov	r10, r8
0x799a:	and	r10d, 0x7f8
0x79a1:	mov	r11, qword ptr [rdi + r10]
0x79a5:	mov	r10, rdx
0x79a8:	shr	r10, 5
0x79ac:	add	r11, rdx
0x79af:	xor	rdx, r10
0x79b2:	add	rcx, r11
0x79b5:	mov	qword ptr [rax], rcx
0x79b8:	shr	rcx, 8
0x79bc:	and	ecx, 0x7f8
0x79c2:	mov	r11, qword ptr [rdi + rcx]
0x79c6:	add	r11, r8
0x79c9:	mov	qword ptr [rsi], r11
0x79cc:	add	rdx, qword ptr [rax + 0x408]
0x79d3:	mov	rcx, qword ptr [rax + 8]
0x79d7:	mov	r10, rdx
0x79da:	mov	rdx, rcx
0x79dd:	and	edx, 0x7f8
0x79e3:	mov	r8, qword ptr [rdi + rdx]
0x79e7:	mov	rdx, r10
0x79ea:	shl	rdx, 0xc
0x79ee:	xor	rdx, r10
0x79f1:	add	r8, r10
0x79f4:	add	r8, r11
0x79f7:	mov	qword ptr [rax + 8], r8
0x79fb:	shr	r8, 8
0x79ff:	and	r8d, 0x7f8
0x7a06:	add	rcx, qword ptr [rdi + r8]
0x7a0a:	mov	qword ptr [rsi + 8], rcx
0x7a0e:	mov	r8, qword ptr [rax + 0x10]
0x7a12:	mov	r11, rcx
0x7a15:	add	rdx, qword ptr [rax + 0x410]
0x7a1c:	mov	rcx, r8
0x7a1f:	and	ecx, 0x7f8
0x7a25:	mov	r10, qword ptr [rdi + rcx]
0x7a29:	add	r10, rdx
0x7a2c:	mov	rcx, r10
0x7a2f:	add	rcx, r11
0x7a32:	mov	qword ptr [rax + 0x10], rcx
0x7a36:	shr	rcx, 8
0x7a3a:	and	ecx, 0x7f8
0x7a40:	mov	r10, qword ptr [rdi + rcx]
0x7a44:	mov	rcx, rdx
0x7a47:	shr	rcx, 0x21
0x7a4b:	xor	rdx, rcx
0x7a4e:	add	r10, r8
0x7a51:	mov	qword ptr [rsi + 0x10], r10
0x7a55:	mov	rcx, qword ptr [rax + 0x18]
0x7a59:	add	rdx, qword ptr [rax + 0x418]
0x7a60:	mov	r8, rcx
0x7a63:	and	r8d, 0x7f8
0x7a6a:	mov	r11, qword ptr [rdi + r8]
0x7a6e:	add	r11, rdx
0x7a71:	mov	r8, r11
0x7a74:	add	r8, r10
0x7a77:	add	rax, 0x20
0x7a7b:	add	rsi, 0x20
0x7a7f:	mov	qword ptr [rax - 8], r8
0x7a83:	shr	r8, 8
0x7a87:	and	r8d, 0x7f8
0x7a8e:	add	rcx, qword ptr [rdi + r8]
0x7a92:	mov	qword ptr [rsi - 8], rcx
0x7a96:	cmp	rax, r9
0x7a99:	jb	0x7980


0x7a9f:	lea	r9, [rdi + 0x800]
0x7aa6:	nop	word ptr cs:[rax + rax]
0x7ab0:	mov	r8, rdx
0x7ab3:	shl	r8, 0x15
0x7ab7:	xor	rdx, r8
0x7aba:	mov	r8, qword ptr [rax]
0x7abd:	not	rdx
0x7ac0:	add	rdx, qword ptr [rax - 0x400]
0x7ac7:	mov	r10, r8
0x7aca:	and	r10d, 0x7f8
0x7ad1:	mov	r11, qword ptr [rdi + r10]
0x7ad5:	mov	r10, rdx
0x7ad8:	shr	r10, 5
0x7adc:	add	r11, rdx
0x7adf:	xor	rdx, r10
0x7ae2:	add	rcx, r11
0x7ae5:	mov	qword ptr [rax], rcx
0x7ae8:	shr	rcx, 8
0x7aec:	and	ecx, 0x7f8
0x7af2:	mov	r11, qword ptr [rdi + rcx]
0x7af6:	add	r11, r8
0x7af9:	mov	qword ptr [rsi], r11
0x7afc:	add	rdx, qword ptr [rax - 0x3f8]
0x7b03:	mov	rcx, qword ptr [rax + 8]
0x7b07:	mov	r10, rdx
0x7b0a:	mov	rdx, rcx
0x7b0d:	and	edx, 0x7f8
0x7b13:	mov	r8, qword ptr [rdi + rdx]
0x7b17:	mov	rdx, r10
0x7b1a:	shl	rdx, 0xc
0x7b1e:	xor	rdx, r10
0x7b21:	add	r8, r10
0x7b24:	add	r8, r11
0x7b27:	mov	qword ptr [rax + 8], r8
0x7b2b:	shr	r8, 8
0x7b2f:	and	r8d, 0x7f8
0x7b36:	add	rcx, qword ptr [rdi + r8]
0x7b3a:	mov	qword ptr [rsi + 8], rcx
0x7b3e:	mov	r8, qword ptr [rax + 0x10]
0x7b42:	mov	r11, rcx
0x7b45:	add	rdx, qword ptr [rax - 0x3f0]
0x7b4c:	mov	rcx, r8
0x7b4f:	and	ecx, 0x7f8
0x7b55:	mov	r10, qword ptr [rdi + rcx]
0x7b59:	add	r10, rdx
0x7b5c:	mov	rcx, r10
0x7b5f:	add	rcx, r11
0x7b62:	mov	qword ptr [rax + 0x10], rcx
0x7b66:	shr	rcx, 8
0x7b6a:	and	ecx, 0x7f8
0x7b70:	mov	r10, qword ptr [rdi + rcx]
0x7b74:	mov	rcx, rdx
0x7b77:	shr	rcx, 0x21
0x7b7b:	xor	rdx, rcx
0x7b7e:	add	r10, r8
0x7b81:	mov	qword ptr [rsi + 0x10], r10
0x7b85:	mov	rcx, qword ptr [rax + 0x18]
0x7b89:	add	rdx, qword ptr [rax - 0x3e8]
0x7b90:	mov	r8, rcx
0x7b93:	and	r8d, 0x7f8
0x7b9a:	mov	r11, qword ptr [rdi + r8]
0x7b9e:	add	r11, rdx
0x7ba1:	mov	r8, r11
0x7ba4:	add	r8, r10
0x7ba7:	add	rax, 0x20
0x7bab:	add	rsi, 0x20
0x7baf:	mov	qword ptr [rax - 8], r8
0x7bb3:	shr	r8, 8
0x7bb7:	and	r8d, 0x7f8
0x7bbe:	add	rcx, qword ptr [rdi + r8]
0x7bc2:	mov	qword ptr [rsi - 8], rcx
0x7bc6:	cmp	rax, r9
0x7bc9:	jb	0x7ab0


0x2040:	jmp	qword ptr [rip + 0x20bf1a]


0x77e8:	mov	r14, qword ptr [rdi + 0x18]
0x77ec:	lea	rax, [rdi + 0x838]
0x77f3:	lea	r13, [rdi + 0x20]
0x77f7:	mov	qword ptr [rsp + 8], rax
0x77fc:	cmp	rdx, r14
0x77ff:	jbe	0x78e2


0x7784:	call	0x1c70


0x7558:	mov	edi, 0x1038
0x755d:	call	0x86f0


0x7437:	test	rdi, rdi
0x743a:	mov	r12, rdi
0x743d:	mov	rbp, rsi
0x7440:	je	0x74c0


0x73f8:	call	0x1c60


0x73bb:	call	0x7170


0x7285:	cmp	rbx, r14
0x7288:	jae	0x7250


0x70b7:	call	0x1c60


0x7085:	test	rdx, rdx
0x7088:	je	0x70b7


0x7024:	call	0x1c60


0x6fbc:	mov	dword ptr [rsp], esi
0x6fbf:	mov	rcx, rsp
0x6fc2:	mov	rdx, -1
0x6fc9:	mov	rsi, rax
0x6fcc:	mov	qword ptr [rsp + 4], 0
0x6fd5:	mov	qword ptr [rsp + 0xc], 0x4000000
0x6fde:	mov	qword ptr [rsp + 0x14], 0
0x6fe7:	mov	qword ptr [rsp + 0x1c], 0
0x6ff0:	mov	qword ptr [rsp + 0x24], 0
0x6ff9:	mov	qword ptr [rsp + 0x2c], 0
0x7002:	mov	dword ptr [rsp + 0x34], 0
0x700a:	call	0x6830


0x6e90:	call	0x1c60


0x6e2f:	mov	dword ptr [rsp], esi
0x6e32:	mov	rcx, rsp
0x6e35:	mov	rsi, rax
0x6e38:	mov	qword ptr [rsp + 4], 0
0x6e41:	mov	qword ptr [rsp + 0xc], 0
0x6e4a:	mov	qword ptr [rsp + 0x14], 0
0x6e53:	mov	qword ptr [rsp + 0x1c], 0
0x6e5c:	mov	qword ptr [rsp + 0x24], 0
0x6e65:	mov	qword ptr [rsp + 0x2c], 0
0x6e6e:	mov	dword ptr [rsp + 0x34], 0
0x6e76:	call	0x6830


0x6e04:	call	0x1c60


0x6d9c:	mov	dword ptr [rsp], esi
0x6d9f:	mov	rcx, rsp
0x6da2:	mov	rdx, -1
0x6da9:	mov	rsi, rax
0x6dac:	mov	qword ptr [rsp + 4], 0
0x6db5:	mov	qword ptr [rsp + 0xc], 0
0x6dbe:	mov	qword ptr [rsp + 0x14], 0
0x6dc7:	mov	qword ptr [rsp + 0x1c], 0
0x6dd0:	mov	qword ptr [rsp + 0x24], 0
0x6dd9:	mov	qword ptr [rsp + 0x2c], 0
0x6de2:	mov	dword ptr [rsp + 0x34], 0
0x6dea:	call	0x6830


0x6cb1:	mov	rdi, qword ptr [r12 + 8]
0x6cb6:	lea	rbx, [rip + 0x207463]
0x6cbd:	cmp	rdi, rbx
0x6cc0:	je	0x6cd9


0x6c86:	sub	eax, 2
0x6c89:	lea	rbx, [r12 + 0x18]
0x6c8e:	shl	rax, 4
0x6c92:	lea	rbp, [r12 + rax + 0x28]
0x6c97:	nop	word ptr [rax + rax]
0x6ca0:	mov	rdi, qword ptr [rbx]
0x6ca3:	add	rbx, 0x10
0x6ca7:	call	0x1c50


0x1c70:	jmp	qword ptr [rip + 0x20c102]


0x6ae7:	sub	rsp, 8
0x6aeb:	call	0x1c60


0x6ad9:	test	rdx, rdx
0x6adc:	je	0x6ae7


0x1d80:	jmp	qword ptr [rip + 0x20c07a]


0x54dd:	mov	rcx, qword ptr [rip + 0x208bfc]
0x54e4:	lea	rdi, [rip + 0x5325]
0x54eb:	mov	edx, 0x37
0x54f0:	mov	esi, 1
0x54f5:	call	0x20d0


0x5466:	mov	esi, 0x2f
0x546b:	mov	rbx, rdi
0x546e:	call	0x1e10


0x544e:	mov	rax, rcx
0x5451:	ret	


0x5428:	mov	rax, rdi
0x542b:	sub	rcx, 1
0x542f:	mul	rsi
0x5432:	shr	rdx, 3
0x5436:	lea	rax, [rdx + rdx*4]
0x543a:	add	rax, rax
0x543d:	sub	rdi, rax
0x5440:	add	edi, 0x30
0x5443:	test	rdx, rdx
0x5446:	mov	byte ptr [rcx], dil
0x5449:	mov	rdi, rdx
0x544c:	jne	0x5428


0x5360:	lea	rdi, [rip + 0x5423]
0x5367:	call	0x1c40


0x524c:	xor	ebp, ebp
0x524e:	cmp	byte ptr [rbx], 0x27
0x5251:	jne	0x525c


0x1cf0:	jmp	qword ptr [rip + 0x20c0c2]


0x474e:	fstp	st(1)
0x4750:	fnstcw	word ptr [rsp - 0xa]
0x4754:	movzx	eax, word ptr [rsp - 0xa]
0x4759:	or	ah, 0xc
0x475c:	mov	word ptr [rsp - 0xc], ax
0x4761:	fld	st(0)
0x4763:	fldcw	word ptr [rsp - 0xc]
0x4767:	fistp	qword ptr [rsp - 0x18]
0x476b:	fldcw	word ptr [rsp - 0xa]
0x476f:	mov	rax, qword ptr [rsp - 0x18]
0x4774:	mov	qword ptr [rsp - 0x20], rax
0x4779:	test	rax, rax
0x477c:	fild	qword ptr [rsp - 0x20]
0x4780:	jns	0x4788


0x47c0:	fnstcw	word ptr [rsp - 0xa]
0x47c4:	movzx	eax, word ptr [rsp - 0xa]
0x47c9:	fsubr	st(1), st(0)
0x47cb:	fxch	st(1)
0x47cd:	movabs	rdx, 0x8000000000000000
0x47d7:	or	ah, 0xc
0x47da:	mov	word ptr [rsp - 0xc], ax
0x47df:	fldcw	word ptr [rsp - 0xc]
0x47e3:	fistp	qword ptr [rsp - 0x18]
0x47e7:	fldcw	word ptr [rsp - 0xa]
0x47eb:	mov	rax, qword ptr [rsp - 0x18]
0x47f0:	xor	rax, rdx
0x47f3:	jmp	0x4774


0x46f1:	xor	eax, eax
0x46f3:	call	0x2050


0x4718:	lea	rax, [rsp + 0x60]
0x471d:	mov	dword ptr [rsp], 0x10
0x4724:	mov	edx, dword ptr [rsp + 0x30]
0x4728:	mov	qword ptr [rsp + 8], rax
0x472d:	lea	rax, [rsp + 0x20]
0x4732:	mov	qword ptr [rsp + 0x10], rax
0x4737:	jmp	0x46f1


0x463c:	test	dl, dl
0x463e:	je	0x467a


0x4461:	pop	rbx
0x4462:	mov	rax, r14
0x4465:	pop	rbp
0x4466:	pop	r12
0x4468:	pop	r13
0x446a:	pop	r14
0x446c:	ret	


0x4430:	mov	r12, rcx
0x4433:	mov	r13, rdi
0x4436:	mov	rbp, rdx
0x4439:	lea	rbx, [rsi + 8]
0x443d:	jmp	0x444f


0x4270:	lea	rsi, [rip + 0x649a]
0x4277:	xor	edi, edi
0x4279:	call	0x1d70


0x4225:	lea	rsi, [rip + 0x6500]
0x422c:	xor	edi, edi
0x422e:	call	0x1d70


0x3c7d:	lea	rsi, [rip + 0x5c6c]
0x3c84:	xor	edi, edi
0x3c86:	call	0x1d70


0x3c4f:	lea	rsi, [rip + 0x5c72]
0x3c56:	xor	edi, edi
0x3c58:	call	0x1d70


0x355e:	lea	rax, [rsp + 0x70]
0x3563:	mov	esi, ebp
0x3565:	mov	edi, 1
0x356a:	mov	rdx, rax
0x356d:	mov	qword ptr [rsp + 8], rax
0x3572:	call	0x1f80


0x3551:	movzx	eax, byte ptr [rcx + 0x1e]
0x3555:	add	rax, qword ptr [rcx + 8]
0x3559:	mov	qword ptr [rsp + 0x28], rax
0x355e:	lea	rax, [rsp + 0x70]
0x3563:	mov	esi, ebp
0x3565:	mov	edi, 1
0x356a:	mov	rdx, rax
0x356d:	mov	qword ptr [rsp + 8], rax
0x3572:	call	0x1f80


0x20a0:	jmp	qword ptr [rip + 0x20beea]


0x1c80:	jmp	qword ptr [rip + 0x20c0fa]


0x2b09:	cmp	qword ptr [rip + 0x20b4e7], 0
0x2b11:	push	rbp
0x2b12:	mov	rbp, rsp
0x2b15:	je	0x2b23


0x2b38:	ret	


0x2af0:	pop	rbp
0x2af1:	ret	


0x2ad8:	mov	rax, qword ptr [rip + 0x20b511]
0x2adf:	test	rax, rax
0x2ae2:	je	0x2af0


0x2aa0:	pop	rbp
0x2aa1:	ret	


0x2a87:	mov	rax, qword ptr [rip + 0x20b54a]
0x2a8e:	test	rax, rax
0x2a91:	je	0x2aa0




0x1c2a:	add	rsp, 8
0x1c2e:	ret	


0x1c28:	call	rax














0x922a:	cmp	qword ptr [rdi + 0x48], 0
0x922f:	jne	0x921a


0x2060:	jmp	qword ptr [rip + 0x20bf0a]


0x1f60:	jmp	qword ptr [rip + 0x20bf8a]


0x1f90:	jmp	qword ptr [rip + 0x20bf72]


0x1d00:	jmp	qword ptr [rip + 0x20c0ba]


0x8fa9:	mov	rax, qword ptr [rsp + 0x10]
0x8fae:	cmp	dword ptr [rip + 0x2052a3], 0
0x8fb5:	mov	dword ptr [rsp], 0x18
0x8fbc:	mov	r12d, dword ptr [rax + 0x10]
0x8fc0:	mov	edx, r12d
0x8fc3:	js	0x90f3


0x8ff0:	cmp	esi, 0xb
0x8ff3:	je	0x9020




0x1e50:	jmp	qword ptr [rip + 0x20c012]






0x88da:	call	0x1ec0


0x8891:	sub	rsp, 8
0x8895:	call	0x8940


0x8872:	mov	qword ptr [rsi], rax
0x8875:	mov	rsi, rax
0x8878:	jmp	0x8750


0x8867:	mov	rdx, rax
0x886a:	shr	rdx, 1
0x886d:	lea	rax, [rdx + rax + 1]
0x8872:	mov	qword ptr [rsi], rax
0x8875:	mov	rsi, rax
0x8878:	jmp	0x8750


0x8828:	xor	edx, edx
0x882a:	mov	eax, 0x80
0x882f:	xor	r8d, r8d
0x8832:	div	r9
0x8835:	test	rax, rax
0x8838:	sete	r8b
0x883c:	lea	rcx, [r8 + rax]
0x8840:	jmp	0x8805


0x8805:	mov	rax, rcx
0x8808:	mul	r9
0x880b:	seto	dl
0x880e:	test	rax, rax
0x8811:	movzx	edx, dl
0x8814:	js	0x881b


0x881b:	sub	rsp, 8
0x881f:	call	0x8940


0x87df:	mov	rax, rcx
0x87e2:	shr	rax, 1
0x87e5:	lea	rcx, [rax + rcx + 1]
0x87ea:	mov	qword ptr [rsi], rcx
0x87ed:	imul	rcx, r9
0x87f1:	mov	rsi, rcx
0x87f4:	jmp	0x8750


0x87a9:	jmp	0x8750


0x8778:	call	0x1c50


0x1fa0:	jmp	qword ptr [rip + 0x20bf6a]


0x8729:	jmp	0x86f0




0x862c:	test	r11b, r11b
0x862f:	jne	0x8655


0x8622:	add	r9, 1
0x8626:	cmp	r9, 0xa
0x862a:	jne	0x8600


0x8616:	mov	rax, qword ptr [rax]
0x8619:	test	rax, rax
0x861c:	mov	qword ptr [r8 + r9*8], rax
0x8620:	je	0x862c


0x855b:	call	0x80d0


0x8551:	add	r9, 1
0x8555:	cmp	r9, 0xa
0x8559:	jne	0x8530


0x8545:	mov	rax, qword ptr [r11]
0x8548:	test	rax, rax
0x854b:	mov	qword ptr [r8 + r9*8], rax
0x854f:	je	0x855b


0x8500:	add	r9, 1
0x8504:	cmp	qword ptr [r8 + r9*8], 0
0x8509:	jne	0x8500


0x20e0:	jmp	qword ptr [rip + 0x20beca]




0x7df8:	pop	rbx
0x7df9:	mov	qword ptr [rdi + 0x810], 0
0x7e04:	mov	qword ptr [rdi + 0x808], 0
0x7e0f:	pop	rbp
0x7e10:	mov	qword ptr [rdi + 0x800], 0
0x7e1b:	pop	r12
0x7e1d:	pop	r13
0x7e1f:	ret	


0x7ab0:	mov	r8, rdx
0x7ab3:	shl	r8, 0x15
0x7ab7:	xor	rdx, r8
0x7aba:	mov	r8, qword ptr [rax]
0x7abd:	not	rdx
0x7ac0:	add	rdx, qword ptr [rax - 0x400]
0x7ac7:	mov	r10, r8
0x7aca:	and	r10d, 0x7f8
0x7ad1:	mov	r11, qword ptr [rdi + r10]
0x7ad5:	mov	r10, rdx
0x7ad8:	shr	r10, 5
0x7adc:	add	r11, rdx
0x7adf:	xor	rdx, r10
0x7ae2:	add	rcx, r11
0x7ae5:	mov	qword ptr [rax], rcx
0x7ae8:	shr	rcx, 8
0x7aec:	and	ecx, 0x7f8
0x7af2:	mov	r11, qword ptr [rdi + rcx]
0x7af6:	add	r11, r8
0x7af9:	mov	qword ptr [rsi], r11
0x7afc:	add	rdx, qword ptr [rax - 0x3f8]
0x7b03:	mov	rcx, qword ptr [rax + 8]
0x7b07:	mov	r10, rdx
0x7b0a:	mov	rdx, rcx
0x7b0d:	and	edx, 0x7f8
0x7b13:	mov	r8, qword ptr [rdi + rdx]
0x7b17:	mov	rdx, r10
0x7b1a:	shl	rdx, 0xc
0x7b1e:	xor	rdx, r10
0x7b21:	add	r8, r10
0x7b24:	add	r8, r11
0x7b27:	mov	qword ptr [rax + 8], r8
0x7b2b:	shr	r8, 8
0x7b2f:	and	r8d, 0x7f8
0x7b36:	add	rcx, qword ptr [rdi + r8]
0x7b3a:	mov	qword ptr [rsi + 8], rcx
0x7b3e:	mov	r8, qword ptr [rax + 0x10]
0x7b42:	mov	r11, rcx
0x7b45:	add	rdx, qword ptr [rax - 0x3f0]
0x7b4c:	mov	rcx, r8
0x7b4f:	and	ecx, 0x7f8
0x7b55:	mov	r10, qword ptr [rdi + rcx]
0x7b59:	add	r10, rdx
0x7b5c:	mov	rcx, r10
0x7b5f:	add	rcx, r11
0x7b62:	mov	qword ptr [rax + 0x10], rcx
0x7b66:	shr	rcx, 8
0x7b6a:	and	ecx, 0x7f8
0x7b70:	mov	r10, qword ptr [rdi + rcx]
0x7b74:	mov	rcx, rdx
0x7b77:	shr	rcx, 0x21
0x7b7b:	xor	rdx, rcx
0x7b7e:	add	r10, r8
0x7b81:	mov	qword ptr [rsi + 0x10], r10
0x7b85:	mov	rcx, qword ptr [rax + 0x18]
0x7b89:	add	rdx, qword ptr [rax - 0x3e8]
0x7b90:	mov	r8, rcx
0x7b93:	and	r8d, 0x7f8
0x7b9a:	mov	r11, qword ptr [rdi + r8]
0x7b9e:	add	r11, rdx
0x7ba1:	mov	r8, r11
0x7ba4:	add	r8, r10
0x7ba7:	add	rax, 0x20
0x7bab:	add	rsi, 0x20
0x7baf:	mov	qword ptr [rax - 8], r8
0x7bb3:	shr	r8, 8
0x7bb7:	and	r8d, 0x7f8
0x7bbe:	add	rcx, qword ptr [rdi + r8]
0x7bc2:	mov	qword ptr [rsi - 8], rcx
0x7bc6:	cmp	rax, r9
0x7bc9:	jb	0x7ab0


0x7bcf:	mov	qword ptr [rdi + 0x800], rdx
0x7bd6:	mov	qword ptr [rdi + 0x808], rcx
0x7bdd:	ret	




0x78e2:	mov	r15, rax
0x78e5:	sub	r15, r14
0x78e8:	lea	rax, [r15 + 0x800]
0x78ef:	mov	qword ptr [rsp + 8], rax
0x78f4:	jmp	0x78b6


0x7805:	mov	esi, 0x800
0x780a:	mov	rdi, rbx
0x780d:	mov	rdx, r14
0x7810:	sub	rsi, r14
0x7813:	add	rsi, qword ptr [rsp + 8]
0x7818:	add	rbx, r14
0x781b:	sub	rbp, r14
0x781e:	call	0x1f00


0x74c0:	mov	edi, 0x1038
0x74c5:	call	0x86f0


0x7442:	lea	rsi, [rip + 0x390b]
0x7449:	call	0x9380


0x1c60:	jmp	qword ptr [rip + 0x20c10a]


0x728a:	mov	rax, rbx
0x728d:	xor	edx, edx
0x728f:	nop	
0x7290:	shl	rax, 8
0x7294:	add	rdx, 1
0x7298:	add	rax, 0xff
0x729e:	cmp	r14, rax
0x72a1:	ja	0x7290


0x7250:	cmp	rbx, r14
0x7253:	je	0x72df


0x708a:	mov	qword ptr [rsp + 0x28], rsi
0x708f:	mov	qword ptr [rsp + 0x30], rdx
0x7094:	mov	rcx, rsp
0x7097:	mov	rdx, r8
0x709a:	mov	rsi, r9
0x709d:	call	0x6830


0x6cd9:	lea	rbx, [rip + 0x2073b0]
0x6ce0:	cmp	r12, rbx
0x6ce3:	je	0x6cf4


0x6cc2:	call	0x1c50


0x1c50:	jmp	qword ptr [rip + 0x20c112]




0x6ade:	mov	qword ptr [rdi + 0x28], rsi
0x6ae2:	mov	qword ptr [rdi + 0x30], rdx
0x6ae6:	ret	




0x20d0:	jmp	qword ptr [rip + 0x20bed2]


0x1e10:	jmp	qword ptr [rip + 0x20c032]


0x1c40:	jmp	qword ptr [rip + 0x20c11a]


0x5253:	add	rbx, 1
0x5257:	mov	ebp, 4
0x525c:	lea	rdx, [rip + 0x5575]
0x5263:	lea	rsi, [rip + 0x208876]
0x526a:	mov	ecx, 4
0x526f:	mov	rdi, rbx
0x5272:	call	0x40f0


0x525c:	lea	rdx, [rip + 0x5575]
0x5263:	lea	rsi, [rip + 0x208876]
0x526a:	mov	ecx, 4
0x526f:	mov	rdi, rbx
0x5272:	call	0x40f0




0x4782:	fadd	dword ptr [rip + 0x6068]
0x4788:	test	edi, edi
0x478a:	jne	0x47b8


0x4788:	test	edi, edi
0x478a:	jne	0x47b8


0x4774:	mov	qword ptr [rsp - 0x20], rax
0x4779:	test	rax, rax
0x477c:	fild	qword ptr [rsp - 0x20]
0x4780:	jns	0x4788


0x2050:	jmp	qword ptr [rip + 0x20bf12]


0x4630:	add	rax, 1
0x4634:	movzx	edx, byte ptr [rax]
0x4637:	cmp	dl, 0x2f
0x463a:	je	0x4630


0x467a:	ret	


0x4640:	mov	rcx, rax
0x4643:	xor	esi, esi
0x4645:	jmp	0x4665


0x444f:	mov	rdx, r12
0x4452:	mov	rsi, rbp
0x4455:	mov	rdi, r13
0x4458:	call	0x1ea0


0x1f80:	jmp	qword ptr [rip + 0x20bf7a]






0x2b23:	call	0x2a70


0x2b17:	mov	rdi, qword ptr [rip + 0x20b4ea]
0x2b1e:	call	0x2130


0x2ae4:	pop	rbp
0x2ae5:	jmp	rax


0x2a93:	pop	rbp
0x2a94:	jmp	rax


0x9231:	push	r12
0x9233:	push	rbp
0x9234:	mov	r12d, edx
0x9237:	push	rbx
0x9238:	mov	rbp, rsi
0x923b:	mov	rbx, rdi
0x923e:	call	0x1f20










0x90f3:	xor	esi, esi
0x90f5:	xor	eax, eax
0x90f7:	call	0x1d00


0x8fc9:	xor	eax, eax
0x8fcb:	mov	esi, 0x406
0x8fd0:	call	0x1d00


0x9020:	mov	edi, ebp
0x9022:	xor	eax, eax
0x9024:	call	0x1d00


0x8ff5:	jg	0x9050




0x1ec0:	jmp	qword ptr [rip + 0x20bfda]


0x8816:	test	rdx, rdx
0x8819:	je	0x87ea




0x8631:	call	0x80d0


0x8655:	mov	dword ptr [rsp + 8], r10d
0x865a:	jmp	0x8631


0x8600:	cmp	r10d, 0x2f
0x8604:	ja	0x865c


0x8530:	mov	eax, dword ptr [r10]
0x8533:	cmp	eax, 0x2f
0x8536:	ja	0x857a




0x78b6:	mov	rsi, qword ptr [rsp + 8]
0x78bb:	mov	rdx, rbp
0x78be:	mov	rdi, rbx
0x78c1:	sub	r14, rbp
0x78c4:	call	0x1f00


0x1f00:	jmp	qword ptr [rip + 0x20bfba]




0x72a3:	mov	rdi, qword ptr [rsp + 8]
0x72a8:	mov	rsi, r12
0x72ab:	call	0x7760


0x7290:	shl	rax, 8
0x7294:	add	rdx, 1
0x7298:	add	rax, 0xff
0x729e:	cmp	r14, rax
0x72a1:	ja	0x7290


0x72df:	mov	qword ptr [r13 + 0x10], 0
0x72e7:	mov	qword ptr [r13 + 8], 0
0x72ef:	mov	rcx, qword ptr [rsp + 0x18]
0x72f4:	xor	rcx, qword ptr fs:[0x28]
0x72fd:	mov	rax, rbp
0x7300:	jne	0x7325


0x7259:	mov	rax, rbx
0x725c:	xor	edx, edx
0x725e:	sub	rax, r14
0x7261:	div	r15
0x7264:	sub	rbx, rdx
0x7267:	mov	rdi, rdx
0x726a:	mov	rsi, rax
0x726d:	xor	edx, edx
0x726f:	mov	rax, rbp
0x7272:	div	r15
0x7275:	cmp	rbp, rbx
0x7278:	jbe	0x7318


0x6cf4:	pop	rbx
0x6cf5:	mov	dword ptr [rip + 0x207379], 1
0x6cff:	pop	rbp
0x6d00:	pop	r12
0x6d02:	ret	


0x6ce5:	mov	rdi, r12
0x6ce8:	call	0x1c50










0x478c:	fxch	st(1)
0x478e:	fucomip	st(1)
0x4790:	jp	0x4798


0x47b8:	fstp	st(1)
0x47ba:	ret	




0x4665:	cmp	dl, 0x2f
0x4668:	jne	0x4650


0x1ea0:	jmp	qword ptr [rip + 0x20bfea]




0x2130:	jmp	qword ptr [rip + 0x20bec2]


0x8ff7:	cmp	esi, 4
0x8ffa:	je	0x90d0


0x9050:	cmp	esi, 0x407
0x9056:	jg	0x90a0




0x87ea:	mov	qword ptr [rsi], rcx
0x87ed:	imul	rcx, r9
0x87f1:	mov	rsi, rcx
0x87f4:	jmp	0x8750




0x7302:	add	rsp, 0x28
0x7306:	pop	rbx
0x7307:	pop	rbp
0x7308:	pop	r12
0x730a:	pop	r13
0x730c:	pop	r14
0x730e:	pop	r15
0x7310:	ret	


0x7325:	call	0x1da0


0x7318:	mov	qword ptr [r13 + 8], rax
0x731c:	mov	qword ptr [r13 + 0x10], rsi
0x7320:	mov	rbp, rdx
0x7323:	jmp	0x72ef


0x727e:	lea	rbx, [rdi - 1]
0x7282:	mov	rbp, rdx
0x7285:	cmp	rbx, r14
0x7288:	jae	0x7250


0x4798:	fstp	st(0)
0x479a:	nop	word ptr [rax + rax]
0x47a0:	add	rax, 1
0x47a4:	mov	qword ptr [rsp - 0x20], rax
0x47a9:	test	rax, rax
0x47ac:	fild	qword ptr [rsp - 0x20]
0x47b0:	js	0x4800


0x4792:	je	0x47ba


0x466a:	add	rcx, 1
0x466e:	movzx	edx, byte ptr [rcx]
0x4671:	mov	esi, 1
0x4676:	test	dl, dl
0x4678:	jne	0x4665


0x4650:	test	sil, sil
0x4653:	je	0x465a




0x90d0:	mov	eax, dword ptr [rsp]
0x90d3:	cmp	eax, 0x2f
0x90d6:	ja	0x91c4


0x9000:	jg	0x90c0


0x9058:	cmp	esi, 0x406
0x905e:	jge	0x90d0


0x90a0:	cmp	esi, 0x409
0x90a6:	je	0x90d0


0x1da0:	jmp	qword ptr [rip + 0x20c06a]


0x72ef:	mov	rcx, qword ptr [rsp + 0x18]
0x72f4:	xor	rcx, qword ptr fs:[0x28]
0x72fd:	mov	rax, rbp
0x7300:	jne	0x7325


0x4800:	fadd	dword ptr [rip + 0x5fea]
0x4806:	ret	


0x47b2:	jmp	0x47ba


0x47ba:	ret	


0x4794:	fstp	st(0)
0x4796:	jmp	0x47a0


0x465a:	add	rcx, 1
0x465e:	movzx	edx, byte ptr [rcx]
0x4661:	test	dl, dl
0x4663:	je	0x467a


0x4655:	mov	rax, rcx
0x4658:	xor	esi, esi
0x465a:	add	rcx, 1
0x465e:	movzx	edx, byte ptr [rcx]
0x4661:	test	dl, dl
0x4663:	je	0x467a


0x90dc:	add	rax, qword ptr [rsp + 0x10]
0x90e1:	mov	edx, dword ptr [rax]
0x90e3:	mov	edi, ebp
0x90e5:	xor	eax, eax
0x90e7:	call	0x1d00


0x91c4:	mov	rax, qword ptr [rsp + 8]
0x91c9:	jmp	0x90e1


0x9006:	cmp	esi, 2
0x9009:	je	0x90d0


0x90c0:	cmp	esi, 9
0x90c3:	je	0x9020


0x9060:	cmp	esi, 0x401
0x9066:	je	0x9020


0x90a8:	jl	0x9020




0x47a0:	add	rax, 1
0x47a4:	mov	qword ptr [rsp - 0x20], rax
0x47a9:	test	rax, rax
0x47ac:	fild	qword ptr [rsp - 0x20]
0x47b0:	js	0x4800


0x90e1:	mov	edx, dword ptr [rax]
0x90e3:	mov	edi, ebp
0x90e5:	xor	eax, eax
0x90e7:	call	0x1d00


0x900f:	jg	0x9020


0x90c9:	jg	0x90d0


0x9068:	cmp	esi, 0x402
0x906e:	je	0x90d0


0x90ae:	cmp	esi, 0x40a
0x90b4:	jne	0x9078


0x9011:	cmp	esi, 1
0x9014:	jne	0x9078


0x90cb:	cmp	esi, 8
0x90ce:	jne	0x9078


0x9070:	cmp	esi, 0x400
0x9076:	je	0x90d0


0x90b6:	jmp	0x9020


0x9078:	mov	eax, dword ptr [rsp]
0x907b:	cmp	eax, 0x2f
0x907e:	ja	0x91ba


0x9084:	add	rax, qword ptr [rsp + 0x10]
0x9089:	mov	rdx, qword ptr [rax]
0x908c:	mov	edi, ebp
0x908e:	xor	eax, eax
0x9090:	call	0x1d00


0x91ba:	mov	rax, qword ptr [rsp + 8]
0x91bf:	jmp	0x9089


0x9089:	mov	rdx, qword ptr [rax]
0x908c:	mov	edi, ebp
0x908e:	xor	eax, eax
0x9090:	call	0x1d00


0x2b28:	mov	byte ptr [rip + 0x20b5b9], 1
0x2b2f:	pop	rbp
0x2b30:	ret	


0x4577:	mov	rcx, rax
0x457a:	sub	rcx, rbx
0x457d:	cmp	rcx, rbp
0x4580:	jbe	0x45b0


0x45b0:	add	rsp, 8
0x45b4:	mov	rdx, rcx
0x45b7:	mov	rax, rdx
0x45ba:	pop	rbx
0x45bb:	pop	rbp
0x45bc:	ret	


0x4582:	cmp	byte ptr [rax - 1], 0x2f
0x4586:	lea	rdx, [rcx - 1]
0x458a:	je	0x459e


0x459e:	cmp	rbp, rdx
0x45a1:	jne	0x4590


0x458c:	jmp	0x45b0


0x45a3:	add	rsp, 8
0x45a7:	mov	rax, rdx
0x45aa:	pop	rbx
0x45ab:	pop	rbp
0x45ac:	ret	


0x4590:	cmp	byte ptr [rbx + rdx - 1], 0x2f
0x4595:	lea	rax, [rdx - 1]
0x4599:	jne	0x45a3


0x459b:	mov	rdx, rax
0x459e:	cmp	rbp, rdx
0x45a1:	jne	0x4590


0x45ce:	test	rax, rax
0x45d1:	mov	rbx, rax
0x45d4:	sete	al
0x45d7:	movzx	eax, al
0x45da:	lea	rdi, [rbx + rax + 1]
0x45df:	call	0x1f50


0x9501:	test	rbp, rbp
0x9504:	je	0x9526


0x9526:	add	rsp, 8
0x952a:	pop	rbx
0x952b:	pop	rbp
0x952c:	pop	r12
0x952e:	pop	r13
0x9530:	pop	r14
0x9532:	pop	r15
0x9534:	ret	


0x9506:	xor	ebx, ebx
0x9508:	nop	dword ptr [rax + rax]
0x9510:	mov	rdx, r15
0x9513:	mov	rsi, r14
0x9516:	mov	edi, r13d
0x9519:	call	qword ptr [r12 + rbx*8]


0x445d:	test	eax, eax
0x445f:	jne	0x4440


0x4440:	mov	r14, qword ptr [rbx]
0x4443:	add	rbp, r12
0x4446:	add	rbx, 8
0x444a:	test	r14, r14
0x444d:	je	0x4461


0x78c9:	mov	qword ptr [r12 + 0x18], r14
0x78ce:	jmp	0x77d2


0x77d2:	add	rsp, 0x18
0x77d6:	pop	rbx
0x77d7:	pop	rbp
0x77d8:	pop	r12
0x77da:	pop	r13
0x77dc:	pop	r14
0x77de:	pop	r15
0x77e0:	ret	


0x72b0:	mov	rax, r12
0x72b3:	nop	dword ptr [rax + rax]
0x72b8:	movzx	edx, byte ptr [rax]
0x72bb:	shl	rbx, 8
0x72bf:	shl	rbp, 8
0x72c3:	add	rbx, 0xff
0x72ca:	add	rax, 1
0x72ce:	add	rbp, rdx
0x72d1:	cmp	r14, rbx
0x72d4:	ja	0x72b8


0x72d6:	cmp	rbx, r14
0x72d9:	jne	0x7259


0x72b8:	movzx	edx, byte ptr [rax]
0x72bb:	shl	rbx, 8
0x72bf:	shl	rbp, 8
0x72c3:	add	rbx, 0xff
0x72ca:	add	rax, 1
0x72ce:	add	rbp, rdx
0x72d1:	cmp	r14, rbx
0x72d4:	ja	0x72b8


0x7823:	test	bl, 7
0x7826:	jne	0x7890


0x7828:	cmp	rbp, 0x7ff
0x782f:	jbe	0x78d3


0x7890:	mov	rsi, qword ptr [rsp + 8]
0x7895:	mov	rdi, r13
0x7898:	mov	r14d, 0x800
0x789e:	call	0x7950


0x78d3:	mov	rsi, qword ptr [rsp + 8]
0x78d8:	mov	rdi, r13
0x78db:	call	0x7950


0x7835:	lea	r15, [rbp - 0x800]
0x783c:	mov	r14, r15
0x783f:	and	r14d, 0x7ff
0x7846:	jmp	0x785c


0x785c:	mov	rsi, rbx
0x785f:	mov	rdi, r13
0x7862:	add	rbx, 0x800
0x7869:	call	0x7950


0x786e:	test	r15, r15
0x7871:	mov	rbp, r15
0x7874:	jne	0x7850


0x7876:	mov	qword ptr [r12 + 0x18], 0
0x787f:	add	rsp, 0x18
0x7883:	pop	rbx
0x7884:	pop	rbp
0x7885:	pop	r12
0x7887:	pop	r13
0x7889:	pop	r14
0x788b:	pop	r15
0x788d:	ret	


0x7850:	cmp	r15, r14
0x7853:	je	0x7890


0x7855:	sub	r15, 0x800
0x785c:	mov	rsi, rbx
0x785f:	mov	rdi, r13
0x7862:	add	rbx, 0x800
0x7869:	call	0x7950


0x78e0:	jmp	0x78b0


0x78b0:	mov	r14d, 0x800
0x78b6:	mov	rsi, qword ptr [rsp + 8]
0x78bb:	mov	rdx, rbp
0x78be:	mov	rdi, rbx
0x78c1:	sub	r14, rbp
0x78c4:	call	0x1f00


0x78a3:	cmp	rbp, 0x800
0x78aa:	ja	0x7805


0x88df:	test	rax, rax
0x88e2:	je	0x88e9


0x88e4:	add	rsp, 8
0x88e8:	ret	


0x3577:	test	eax, eax
0x3579:	jne	0x3720


0x357f:	mov	eax, dword ptr [rsp + 0x88]
0x3586:	and	eax, 0xf000
0x358b:	cmp	eax, 0x2000
0x3590:	je	0x3858


0x3720:	lea	rsi, [rip + 0x5efa]
0x3727:	mov	edx, 5
0x372c:	xor	edi, edi
0x372e:	call	0x1d70


0x3858:	mov	edi, ebp
0x385a:	call	0x1ce0


0x3596:	cmp	eax, 0xc000
0x359b:	sete	cl
0x359e:	cmp	eax, 0x1000
0x35a3:	sete	dl
0x35a6:	or	cl, dl
0x35a8:	mov	byte ptr [rsp + 0x27], cl
0x35ac:	je	0x3610


0x1ce0:	jmp	qword ptr [rip + 0x20c0ca]


0x3610:	cmp	eax, 0x8000
0x3615:	je	0x3880


0x35ae:	lea	rsi, [rip + 0x607d]
0x35b5:	mov	edx, 5
0x35ba:	xor	edi, edi
0x35bc:	call	0x1d70




0x3880:	cmp	qword ptr [rsp + 0xa0], 0
0x3889:	jns	0x361b


0x361b:	mov	rdi, qword ptr [rbx + 8]
0x361f:	mov	edx, 4
0x3624:	xor	ecx, ecx
0x3626:	mov	rax, rdx
0x3629:	mul	rdi
0x362c:	jo	0x3c07


0x388f:	lea	rsi, [rip + 0x5db2]
0x3896:	xor	edi, edi
0x3898:	mov	edx, 5
0x389d:	call	0x1d70


0x3c07:	mov	ecx, 1
0x3c0c:	jmp	0x3632


0x3632:	test	rax, rax
0x3635:	js	0x3c16


0x3c16:	call	0x8940


0x363b:	test	rcx, rcx
0x363e:	jne	0x3c16


0x3644:	shl	rdi, 2
0x3648:	call	0x86f0


0x46f8:	mov	edi, eax
0x46fa:	call	0x8090


0x46ff:	mov	rcx, qword ptr [rsp + 0x18]
0x4704:	xor	rcx, qword ptr fs:[0x28]
0x470d:	jne	0x4739


0x470f:	add	rsp, 0x58
0x4713:	ret	


0x4739:	call	0x1da0


0x536c:	test	rax, rax
0x536f:	mov	rbx, rax
0x5372:	jne	0x524c


0x5378:	lea	rdi, [rip + 0x5416]
0x537f:	call	0x1c40


0x5384:	test	rax, rax
0x5387:	mov	rbx, rax
0x538a:	jne	0x524c


0x5390:	lea	rdi, [rip + 0x5408]
0x5397:	call	0x1c40


0x539c:	test	rax, rax
0x539f:	je	0x53ea


0x53ea:	mov	qword ptr [r12], 0x400
0x53f2:	xor	eax, eax
0x53f4:	mov	dword ptr [r13], 0
0x53fc:	jmp	0x5295


0x53a1:	mov	qword ptr [r12], 0x200
0x53a9:	xor	eax, eax
0x53ab:	mov	dword ptr [r13], 0
0x53b3:	jmp	0x5295


0x5295:	mov	rcx, qword ptr [rsp + 8]
0x529a:	xor	rcx, qword ptr fs:[0x28]
0x52a3:	jne	0x5401


0x52a9:	add	rsp, 0x18
0x52ad:	pop	rbx
0x52ae:	pop	rbp
0x52af:	pop	r12
0x52b1:	pop	r13
0x52b3:	ret	


0x5401:	call	0x1da0


0x5473:	test	rax, rax
0x5476:	je	0x54cd


0x54cd:	mov	qword ptr [rip + 0x208c34], rbx
0x54d4:	mov	qword ptr [rip + 0x208be5], rbx
0x54db:	pop	rbx
0x54dc:	ret	


0x5478:	lea	r8, [rax + 1]
0x547c:	mov	rdx, r8
0x547f:	sub	rdx, rbx
0x5482:	cmp	rdx, 6
0x5486:	jle	0x54cd


0x5488:	lea	rsi, [rax - 6]
0x548c:	lea	rdi, [rip + 0x53b5]
0x5493:	mov	ecx, 7
0x5498:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x5498:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x549a:	seta	dl
0x549d:	sbb	dl, 0
0x54a0:	test	dl, dl
0x54a2:	jne	0x54cd


0x54a4:	lea	rdi, [rip + 0x53a5]
0x54ab:	mov	ecx, 3
0x54b0:	mov	rsi, r8
0x54b3:	mov	rbx, r8
0x54b6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x54b6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x54b8:	seta	dl
0x54bb:	sbb	dl, 0
0x54be:	test	dl, dl
0x54c0:	jne	0x54cd


0x54c2:	lea	rbx, [rax + 4]
0x54c6:	mov	qword ptr [rip + 0x208bd3], rbx
0x54cd:	mov	qword ptr [rip + 0x208c34], rbx
0x54d4:	mov	qword ptr [rip + 0x208be5], rbx
0x54db:	pop	rbx
0x54dc:	ret	


0x54fa:	call	0x1c60


0x6ced:	mov	qword ptr [rip + 0x20738c], rbx
0x6cf4:	pop	rbx
0x6cf5:	mov	dword ptr [rip + 0x207379], 1
0x6cff:	pop	rbp
0x6d00:	pop	r12
0x6d02:	ret	


0x6cc7:	mov	qword ptr [rip + 0x2073be], 0x100
0x6cd2:	mov	qword ptr [rip + 0x2073bf], rbx
0x6cd9:	lea	rbx, [rip + 0x2073b0]
0x6ce0:	cmp	r12, rbx
0x6ce3:	je	0x6cf4


0x877d:	xor	eax, eax
0x877f:	pop	rbx
0x8780:	ret	


0x6cac:	cmp	rbx, rbp
0x6caf:	jne	0x6ca0


0x6ca0:	mov	rdi, qword ptr [rbx]
0x6ca3:	add	rbx, 0x10
0x6ca7:	call	0x1c50


0x810c:	lea	rsi, [rip + 0x2c57]
0x8113:	xor	edi, edi
0x8115:	mov	edx, 5
0x811a:	call	0x1d70


0x8221:	jmp	0x810c


0x8766:	test	rax, rax
0x8769:	jne	0x8770


0x876b:	test	rbx, rbx
0x876e:	jne	0x8781


0x8770:	pop	rbx
0x8771:	ret	


0x8781:	call	0x8940


0x9095:	mov	ebx, eax
0x9097:	jmp	0x9030


0x9030:	mov	rcx, qword ptr [rsp + 0x18]
0x9035:	xor	rcx, qword ptr fs:[0x28]
0x903e:	mov	eax, ebx
0x9040:	jne	0x919d


0x9046:	add	rsp, 0x50
0x904a:	pop	rbx
0x904b:	pop	rbp
0x904c:	pop	r12
0x904e:	ret	


0x919d:	call	0x1da0


0x9029:	mov	ebx, eax
0x902b:	nop	dword ptr [rax + rax]
0x9030:	mov	rcx, qword ptr [rsp + 0x18]
0x9035:	xor	rcx, qword ptr fs:[0x28]
0x903e:	mov	eax, ebx
0x9040:	jne	0x919d


0x90ec:	mov	ebx, eax
0x90ee:	jmp	0x9030


0x8fd5:	test	eax, eax
0x8fd7:	mov	ebx, eax
0x8fd9:	js	0x9168


0x9168:	call	0x1c70


0x8fdf:	mov	dword ptr [rip + 0x20526f], 1
0x8fe9:	jmp	0x9030


0x90fc:	test	eax, eax
0x90fe:	mov	ebx, eax
0x9100:	js	0x9030


0x9106:	cmp	dword ptr [rip + 0x20514b], -1
0x910d:	jne	0x9030


0x9113:	xor	eax, eax
0x9115:	mov	esi, 1
0x911a:	mov	edi, ebx
0x911c:	call	0x1d00


0x9121:	test	eax, eax
0x9123:	js	0x9141


0x9141:	call	0x1c70


0x9125:	or	eax, 1
0x9128:	mov	esi, 2
0x912d:	mov	edi, ebx
0x912f:	mov	edx, eax
0x9131:	xor	eax, eax
0x9133:	call	0x1d00


0x9138:	cmp	eax, -1
0x913b:	jne	0x9030


0x91b3:	mov	ebx, eax
0x91b5:	jmp	0x9030


0x91de:	test	eax, eax
0x91e0:	je	0x91ea


0x91e2:	test	dword ptr [rbx], 0x100
0x91e8:	jne	0x91f8


0x91f8:	mov	rdi, rbx
0x91fb:	mov	edx, 1
0x9200:	xor	esi, esi
0x9202:	call	0x9210


0x2186:	lea	rsi, [rip + 0x8c23]
0x218d:	mov	edi, 6
0x2192:	call	0x1fd0


0x2b76:	test	eax, eax
0x2b78:	jle	0x2ba8


0x2ba8:	add	rsp, 8
0x2bac:	pop	rbx
0x2bad:	pop	rbp
0x2bae:	ret	


0x2b7a:	mov	ecx, eax
0x2b7c:	mov	edx, eax
0x2b7e:	or	ch, 0x40
0x2b81:	and	dh, 0xbf
0x2b84:	test	bpl, bpl
0x2b87:	cmovne	edx, ecx
0x2b8a:	cmp	edx, eax
0x2b8c:	je	0x2ba8


0x2b8e:	add	rsp, 8
0x2b92:	mov	edi, ebx
0x2b94:	mov	esi, 4
0x2b99:	pop	rbx
0x2b9a:	pop	rbp
0x2b9b:	xor	eax, eax
0x2b9d:	jmp	0x8f50


0x2bc4:	test	eax, eax
0x2bc6:	je	0x2c35


0x2c35:	xor	eax, eax
0x2c37:	add	rsp, 8
0x2c3b:	pop	rbx
0x2c3c:	pop	rbp
0x2c3d:	pop	r12
0x2c3f:	pop	r13
0x2c41:	ret	


0x2bc8:	call	0x1c70


0x2ccd:	test	ebx, ebx
0x2ccf:	movsxd	rbp, eax
0x2cd2:	jle	0x2dd0


0x2dd0:	mov	r13d, 0x10002
0x2dd6:	mov	qword ptr [rsp + 0x18], 0x10000
0x2ddf:	jmp	0x2d07


0x2cd8:	mov	edx, ebx
0x2cda:	and	edx, 0xfff
0x2ce0:	mov	eax, edx
0x2ce2:	shl	eax, 0xc
0x2ce5:	or	eax, edx
0x2ce7:	mov	edx, eax
0x2ce9:	shr	edx, 4
0x2cec:	cmp	ah, dl
0x2cee:	jne	0x2cf8


0x2d07:	lea	rbx, [rbp - 1]
0x2d0b:	mov	r12, r15
0x2d0e:	lea	rdi, [r13 + rbx]
0x2d13:	call	0x86f0


0x2cf0:	cmp	dl, al
0x2cf2:	je	0x2dd0


0x2cf8:	mov	r13d, 0xf000
0x2cfe:	mov	qword ptr [rsp + 0x18], 0xf000
0x2d07:	lea	rbx, [rbp - 1]
0x2d0b:	mov	r12, r15
0x2d0e:	lea	rdi, [r13 + rbx]
0x2d13:	call	0x86f0


0x486e:	mov	r14, qword ptr [rax]
0x4871:	mov	r13, rax
0x4874:	mov	rdi, r14
0x4877:	call	0x1d90


0x5661:	cmp	r15d, 0xa
0x5665:	mov	qword ptr [rsp + 0x58], rax
0x566a:	ja	0x681f


0x5670:	lea	rcx, [rip + 0x5249]
0x5677:	mov	edx, r15d
0x567a:	movsxd	rax, dword ptr [rcx + rdx*4]
0x567e:	add	rax, rcx
0x5681:	jmp	rax


0x681f:	call	0x1c60


0x2bcd:	mov	ebp, dword ptr [rax]
0x2bcf:	mov	r12, rax
0x2bd2:	lea	eax, [rbp - 0x15]
0x2bd5:	cmp	eax, 1
0x2bd8:	jbe	0x2bdf


0x2bdf:	mov	edi, ebx
0x2be1:	call	0x2030


0x2bda:	cmp	ebp, 9
0x2bdd:	jne	0x2c48


0x2030:	jmp	qword ptr [rip + 0x20bf22]


0x2c48:	lea	rsi, [rip + 0x6935]
0x2c4f:	mov	edx, 5
0x2c54:	xor	edi, edi
0x2c56:	call	0x1d70




0x9146:	mov	r12d, dword ptr [rax]
0x9149:	mov	rbp, rax
0x914c:	mov	edi, ebx
0x914e:	call	0x1e90


0x1e90:	jmp	qword ptr [rip + 0x20bff2]




0x916d:	cmp	dword ptr [rax], 0x16
0x9170:	jne	0x8fdf


0x9176:	xor	esi, esi
0x9178:	xor	eax, eax
0x917a:	mov	edx, r12d
0x917d:	mov	edi, ebp
0x917f:	call	0x1d00


0x9184:	test	eax, eax
0x9186:	mov	ebx, eax
0x9188:	js	0x9030


0x918e:	mov	dword ptr [rip + 0x2050c0], 0xffffffff
0x9198:	jmp	0x9113


0x7789:	mov	rcx, qword ptr [rsp + 8]
0x778e:	mov	r13, rax
0x7791:	jmp	0x77b6


0x77b6:	mov	rdx, rbp
0x77b9:	mov	rdi, rbx
0x77bc:	mov	esi, 1
0x77c1:	call	0x1d30


0x1d30:	jmp	qword ptr [rip + 0x20c0a2]




0x8af8:	mov	dword ptr [rax], 0
0x8afe:	mov	r12, rax
0x8b01:	movzx	ebx, byte ptr [rbp]
0x8b05:	call	0x2110


0x2110:	jmp	qword ptr [rip + 0x20beb2]




0x6851:	mov	r13, rax
0x6854:	mov	eax, dword ptr [rax]
0x6856:	test	r15d, r15d
0x6859:	mov	rbx, qword ptr [rip + 0x207820]
0x6860:	mov	dword ptr [rsp + 0x18], eax
0x6864:	js	0x69d1


0x69d1:	call	0x1c60


0x686a:	cmp	dword ptr [rip + 0x207807], r15d
0x6871:	jg	0x68d5


0x6873:	cmp	r15d, 0x7fffffff
0x687a:	je	0x69d6


0x68d5:	mov	eax, dword ptr [rbp + 4]
0x68d8:	shl	r15, 4
0x68dc:	sub	rsp, 8
0x68e0:	add	rbx, r15
0x68e3:	lea	r15, [rbp + 8]
0x68e7:	mov	r8d, dword ptr [rbp]
0x68eb:	mov	r11, qword ptr [rbx]
0x68ee:	mov	r12, qword ptr [rbx + 8]
0x68f2:	mov	rcx, r14
0x68f5:	or	eax, 1
0x68f8:	mov	dword ptr [rsp + 0x24], eax
0x68fc:	push	qword ptr [rbp + 0x30]
0x68ff:	mov	r9d, eax
0x6902:	push	qword ptr [rbp + 0x28]
0x6905:	push	r15
0x6907:	mov	rsi, r11
0x690a:	mov	rdx, qword ptr [rsp + 0x28]
0x690f:	mov	rdi, r12
0x6912:	mov	qword ptr [rsp + 0x30], r11
0x6917:	call	0x55f0


0x69d6:	call	0x8940


0x6880:	lea	r12d, [r15 + 1]
0x6884:	lea	rax, [rip + 0x207805]
0x688b:	movsxd	rsi, r12d
0x688e:	shl	rsi, 4
0x6892:	cmp	rbx, rax
0x6895:	je	0x69b0


0x69b0:	xor	edi, edi
0x69b2:	call	0x8750


0x689b:	mov	rdi, rbx
0x689e:	call	0x8750


0x68a3:	mov	rbx, rax
0x68a6:	mov	qword ptr [rip + 0x2077d3], rax
0x68ad:	movsxd	rdi, dword ptr [rip + 0x2077c4]
0x68b4:	mov	edx, r12d
0x68b7:	xor	esi, esi
0x68b9:	sub	edx, edi
0x68bb:	shl	rdi, 4
0x68bf:	movsxd	rdx, edx
0x68c2:	add	rdi, rbx
0x68c5:	shl	rdx, 4
0x68c9:	call	0x1e70


0x1e70:	jmp	qword ptr [rip + 0x20c002]




0x69b7:	movdqa	xmm0, xmmword ptr [rip + 0x2076d1]
0x69bf:	mov	rbx, rax
0x69c2:	mov	qword ptr [rip + 0x2076b7], rax
0x69c9:	movups	xmmword ptr [rax], xmm0
0x69cc:	jmp	0x68ad


0x68ad:	movsxd	rdi, dword ptr [rip + 0x2077c4]
0x68b4:	mov	edx, r12d
0x68b7:	xor	esi, esi
0x68b9:	sub	edx, edi
0x68bb:	shl	rdi, 4
0x68bf:	movsxd	rdx, edx
0x68c2:	add	rdi, rbx
0x68c5:	shl	rdx, 4
0x68c9:	call	0x1e70


0x69ec:	mov	r12d, dword ptr [rax]
0x69ef:	mov	rbp, rax
0x69f2:	lea	rax, [rip + 0x207827]
0x69f9:	test	rbx, rbx
0x69fc:	mov	esi, 0x38
0x6a01:	cmove	rbx, rax
0x6a05:	mov	rdi, rbx
0x6a08:	call	0x88f0


0x6b22:	mov	r12d, dword ptr [rax]
0x6b25:	mov	rbp, rax
0x6b28:	lea	rax, [rbx + 8]
0x6b2c:	sub	rsp, 8
0x6b30:	mov	r9d, dword ptr [rbx + 4]
0x6b34:	push	qword ptr [rbx + 0x30]
0x6b37:	mov	r8d, dword ptr [rbx]
0x6b3a:	push	qword ptr [rbx + 0x28]
0x6b3d:	mov	rdx, r15
0x6b40:	push	rax
0x6b41:	mov	rcx, qword ptr [rsp + 0x28]
0x6b46:	mov	rsi, r14
0x6b49:	mov	rdi, r13
0x6b4c:	call	0x55f0


0x6b9f:	test	r12, r12
0x6ba2:	mov	r13, rax
0x6ba5:	mov	eax, dword ptr [rax]
0x6ba7:	sete	bpl
0x6bab:	or	ebp, dword ptr [rbx + 4]
0x6bae:	lea	r10, [rbx + 8]
0x6bb2:	sub	rsp, 8
0x6bb6:	mov	r8d, dword ptr [rbx]
0x6bb9:	mov	rcx, r15
0x6bbc:	mov	dword ptr [rsp + 0x14], eax
0x6bc0:	push	qword ptr [rbx + 0x30]
0x6bc3:	mov	rdx, r14
0x6bc6:	push	qword ptr [rbx + 0x28]
0x6bc9:	push	r10
0x6bcb:	xor	esi, esi
0x6bcd:	mov	r9d, ebp
0x6bd0:	xor	edi, edi
0x6bd2:	mov	qword ptr [rsp + 0x40], r10
0x6bd7:	call	0x55f0


0x7345:	mov	rdi, rbx
0x7348:	pop	rbx
0x7349:	jmp	0x1c50


0x791d:	mov	rdi, rbx
0x7920:	call	0x1c50


0x7925:	test	rbp, rbp
0x7928:	je	0x7940


0x7940:	add	rsp, 8
0x7944:	xor	eax, eax
0x7946:	pop	rbx
0x7947:	pop	rbp
0x7948:	ret	


0x792a:	add	rsp, 8
0x792e:	mov	rdi, rbp
0x7931:	pop	rbx
0x7932:	pop	rbp
0x7933:	jmp	0x8ed0


0x7365:	mov	r12d, eax
0x7368:	call	0x1c70


0x736d:	mov	r13d, dword ptr [rax]
0x7370:	mov	rdi, rbx
0x7373:	mov	rdx, -1
0x737a:	mov	esi, 0x18
0x737f:	mov	rbp, rax
0x7382:	call	0x2040


0x7387:	mov	rdi, rbx
0x738a:	call	0x1c50


0x738f:	mov	dword ptr [rbp], r13d
0x7393:	add	rsp, 8
0x7397:	mov	eax, r12d
0x739a:	pop	rbx
0x739b:	pop	rbp
0x739c:	pop	r12
0x739e:	pop	r13
0x73a0:	ret	


0x7e6b:	mov	rbx, rax
0x7e6e:	mov	r15d, eax
0x7e71:	call	0x1c70


0x7e76:	test	ebx, ebx
0x7e78:	js	0x7eb0


0x7eb0:	mov	r9, rax
0x7eb3:	mov	eax, dword ptr [rax]
0x7eb5:	lea	ecx, [rax - 0x16]
0x7eb8:	and	ecx, 0xffffffef
0x7ebb:	setne	bl
0x7ebe:	cmp	eax, 0x5f
0x7ec1:	setne	al
0x7ec4:	and	bl, al
0x7ec6:	jne	0x7e7a


0x7e7a:	mov	rdx, qword ptr [rsp + 0x138]
0x7e82:	xor	rdx, qword ptr fs:[0x28]
0x7e8b:	mov	eax, r15d
0x7e8e:	jne	0x8085


0x7ec8:	test	ebp, ebp
0x7eca:	jne	0x7f20


0x7e94:	add	rsp, 0x148
0x7e9b:	pop	rbx
0x7e9c:	pop	rbp
0x7e9d:	pop	r12
0x7e9f:	pop	r13
0x7ea1:	pop	r14
0x7ea3:	pop	r15
0x7ea5:	ret	


0x8085:	call	0x1da0


0x7ecc:	mov	rdi, r12
0x7ecf:	mov	qword ptr [rsp + 8], r9
0x7ed4:	call	0x1d90


0x7f20:	and	ebp, 0xfffffffe
0x7f23:	je	0x7f90


0x7f90:	lea	rcx, [rsp + 0xa0]
0x7f98:	mov	r8d, 0x100
0x7f9e:	mov	rdx, r13
0x7fa1:	mov	esi, r14d
0x7fa4:	mov	edi, 1
0x7fa9:	mov	qword ptr [rsp + 8], r9
0x7fae:	call	0x1df0


0x7f25:	mov	dword ptr [r9], 0x5f
0x7f2c:	mov	r15d, 0xffffffff
0x7f32:	jmp	0x7e7a


0x1df0:	jmp	qword ptr [rip + 0x20c042]




0x45e4:	test	rax, rax
0x45e7:	mov	rcx, rax
0x45ea:	je	0x4606


0x4606:	add	rsp, 8
0x460a:	mov	rax, rcx
0x460d:	pop	rbx
0x460e:	pop	rbp
0x460f:	ret	


0x45ec:	mov	rdx, rbx
0x45ef:	mov	rsi, rbp
0x45f2:	mov	rdi, rax
0x45f5:	call	0x1f00


0x45fa:	test	rbx, rbx
0x45fd:	mov	rcx, rax
0x4600:	je	0x4610


0x4610:	mov	byte ptr [rax], 0x2e
0x4613:	mov	ebx, 1
0x4618:	jmp	0x4602


0x4602:	mov	byte ptr [rcx + rbx], 0
0x4606:	add	rsp, 8
0x460a:	mov	rax, rcx
0x460d:	pop	rbx
0x460e:	pop	rbp
0x460f:	ret	


0x4549:	test	rax, rax
0x454c:	je	0x4553


0x4553:	call	0x8940


0x454e:	add	rsp, 8
0x4552:	ret	


0x86f9:	test	rax, rax
0x86fc:	jne	0x8703


0x86fe:	test	rbx, rbx
0x8701:	jne	0x8705


0x8703:	pop	rbx
0x8704:	ret	


0x8705:	call	0x8940


0x2d18:	test	r15, r15
0x2d1b:	mov	qword ptr [rsp + 0x30], rax
0x2d20:	setg	dl
0x2d23:	cmp	r15, qword ptr [rsp + 0x18]
0x2d28:	setb	al
0x2d2b:	and	dl, al
0x2d2d:	mov	byte ptr [rsp + 0x27], dl
0x2d31:	je	0x3120


0x3120:	mov	esi, 1
0x3125:	mov	edi, r14d
0x3128:	call	0x2b60


0x2d37:	mov	rax, qword ptr [rsp]
0x2d3b:	mov	eax, dword ptr [rax + 0x18]
0x2d3e:	and	eax, 0xf000
0x2d43:	cmp	eax, 0x2000
0x2d48:	je	0x2de8


0x2de8:	mov	eax, 6
0x2ded:	lea	rdx, [rsp + 0x70]
0x2df2:	mov	esi, 0x40086d01
0x2df7:	mov	word ptr [rsp + 0x70], ax
0x2dfc:	mov	edi, r14d
0x2dff:	xor	eax, eax
0x2e01:	mov	dword ptr [rsp + 0x74], 1
0x2e09:	call	0x1e80


0x2d4e:	xor	edx, edx
0x2d50:	xor	esi, esi
0x2d52:	mov	edi, r14d
0x2d55:	call	0x1e30


0x1e80:	jmp	qword ptr [rip + 0x20bffa]


0x1e30:	jmp	qword ptr [rip + 0x20c022]






0x312d:	jmp	0x2d37


0x364d:	mov	qword ptr [rsp + 0x10], rax
0x3652:	mov	rax, qword ptr [rbx + 0x10]
0x3656:	cmp	rax, -1
0x365a:	mov	qword ptr [rsp + 0x40], rax
0x365f:	je	0x3760


0x3760:	mov	eax, dword ptr [rsp + 0x88]
0x3767:	and	eax, 0xf000
0x376c:	cmp	eax, 0x8000
0x3771:	jne	0x3b6d


0x3665:	mov	rax, qword ptr [rbx + 8]
0x3669:	mov	qword ptr [rsp + 0x38], rax
0x366e:	mov	eax, dword ptr [rsp + 0x88]
0x3675:	and	eax, 0xf000
0x367a:	cmp	eax, 0x8000
0x367f:	je	0x39cf


0x3777:	mov	rax, qword ptr [rsp + 0xa0]
0x377f:	mov	rcx, qword ptr [rbx + 8]
0x3783:	mov	qword ptr [rsp + 0x40], rax
0x3788:	movzx	eax, byte ptr [rbx + 0x1d]
0x378c:	mov	qword ptr [rsp + 0x38], rcx
0x3791:	test	al, al
0x3793:	mov	byte ptr [rsp + 0x18], al
0x3797:	jne	0x3ad1


0x3b6d:	xor	esi, esi
0x3b6f:	mov	edx, 2
0x3b74:	mov	edi, ebp
0x3b76:	call	0x1e30


0x39cf:	mov	rax, qword ptr [rsp + 0xa8]
0x39d7:	movabs	rdx, 0x1fffffffffffffff
0x39e1:	mov	rdi, qword ptr [rsp + 0xa0]
0x39e9:	lea	rcx, [rax - 1]
0x39ed:	mov	qword ptr [rsp + 0x48], rdi
0x39f2:	cmp	rcx, rdx
0x39f5:	mov	rcx, qword ptr [rsp + 0x40]
0x39fa:	mov	edx, 0x200
0x39ff:	cmova	rax, rdx
0x3a03:	cmp	rax, rcx
0x3a06:	cmovg	rax, rcx
0x3a0a:	cmp	rdi, rax
0x3a0d:	jl	0x380e


0x3685:	cmp	qword ptr [rsp + 0x38], 0
0x368b:	mov	qword ptr [rsp + 0x48], 0
0x3694:	je	0x38b9


0x379d:	mov	rcx, qword ptr [rsp + 0xa8]
0x37a5:	movabs	rax, 0x1fffffffffffffff
0x37af:	lea	rdx, [rcx - 1]
0x37b3:	cmp	rdx, rax
0x37b6:	mov	eax, 0x200
0x37bb:	cmova	rcx, rax
0x37bf:	mov	rax, qword ptr [rsp + 0x40]
0x37c4:	cqo	
0x37c6:	idiv	rcx
0x37c9:	mov	rax, qword ptr [rsp + 0x40]
0x37ce:	cmp	rcx, rax
0x37d1:	jle	0x3bef


0x3ad1:	test	rcx, rcx
0x3ad4:	mov	qword ptr [rsp + 0x48], 0
0x3add:	jne	0x369a


0x380e:	cmp	qword ptr [rsp + 0x38], 0
0x3814:	jne	0x369a


0x3a13:	jmp	0x3685


0x38b9:	mov	rdi, qword ptr [rsp + 0x30]
0x38be:	call	0x7200


0x369a:	mov	r12, qword ptr [rsp + 0x10]
0x369f:	xor	ecx, ecx
0x36a1:	mov	r14, qword ptr [rsp + 0x38]
0x36a6:	mov	eax, 0xfffffffe
0x36ab:	lea	r13, [rip + 0x6f6e]
0x36b2:	mov	qword ptr [rsp + 0x50], rbx
0x36b7:	mov	r8, r12
0x36ba:	mov	r12, rcx
0x36bd:	jmp	0x36e3


0x3bef:	mov	qword ptr [rsp + 0x48], 0
0x3bf8:	jmp	0x37e5


0x37d7:	test	rax, rax
0x37da:	mov	qword ptr [rsp + 0x48], rax
0x37df:	je	0x3bef


0x3ae3:	mov	rdi, qword ptr [rsp + 0x30]
0x3ae8:	call	0x7200


0x36e3:	test	eax, eax
0x36e5:	je	0x36c0


0x37e5:	test	rdx, rdx
0x37e8:	je	0x380e


0x36c0:	lea	r13, [rip + 0x6f5d]
0x36c7:	mov	eax, 0xfffffffe
0x36cc:	neg	eax
0x36ce:	cdqe	
0x36d0:	cmp	rax, r14
0x36d3:	jae	0x3a18


0x36e7:	add	r13, 4
0x36eb:	test	eax, eax
0x36ed:	js	0x36cc


0x37ea:	mov	rdi, qword ptr [rsp + 0x40]
0x37ef:	movabs	rax, 0x7fffffffffffffff
0x37f9:	sub	rcx, rdx
0x37fc:	sub	rax, rdi
0x37ff:	cmp	rax, rcx
0x3802:	cmovle	rcx, rax
0x3806:	add	rdi, rcx
0x3809:	mov	qword ptr [rsp + 0x40], rdi
0x380e:	cmp	qword ptr [rsp + 0x38], 0
0x3814:	jne	0x369a


0x36d9:	add	r12, rax
0x36dc:	sub	r14, rax
0x36df:	mov	eax, dword ptr [r13]
0x36e3:	test	eax, eax
0x36e5:	je	0x36c0


0x3a18:	mov	rbx, qword ptr [rsp + 0x50]
0x3a1d:	add	r12, r14
0x3a20:	mov	qword ptr [rsp + 0x18], r12
0x3a25:	mov	rax, qword ptr [rsp + 0x38]
0x3a2a:	mov	rsi, qword ptr [rsp + 0x18]
0x3a2f:	xor	r12d, r12d
0x3a32:	mov	dword ptr [rsp + 0x50], ebp
0x3a36:	mov	qword ptr [rsp + 0x58], rbx
0x3a3b:	mov	r14, qword ptr [rsp + 0x10]
0x3a40:	lea	rdx, [rsi - 1]
0x3a44:	mov	r15, rax
0x3a47:	lea	r8, [rax - 1]
0x3a4b:	sub	r15, rsi
0x3a4e:	mov	rbx, r15
0x3a51:	mov	r13, rdx
0x3a54:	mov	rbp, rdx
0x3a57:	mov	r15, r8
0x3a5a:	jmp	0x3a81


0x36cc:	neg	eax
0x36ce:	cdqe	
0x36d0:	cmp	rax, r14
0x36d3:	jae	0x3a18


0x36ef:	movsxd	r15, eax
0x36f2:	cmp	r15, r14
0x36f5:	ja	0x3af8


0x3a81:	cmp	r13, rbp
0x3a84:	mov	r9d, dword ptr [r14 + r12*4]
0x3a88:	jbe	0x3a60


0x36fb:	lea	rbx, [r15*4]
0x3703:	mov	rsi, r13
0x3706:	mov	rdi, r8
0x3709:	sub	r14, r15
0x370c:	mov	rdx, rbx
0x370f:	add	r13, rbx
0x3712:	call	0x1f00


0x3af8:	cmp	r14, 1
0x3afc:	mov	qword ptr [rsp + 0x18], r12
0x3b01:	mov	rbx, qword ptr [rsp + 0x50]
0x3b06:	jbe	0x3b63


0x3a60:	add	r13, r15
0x3a63:	mov	dword ptr [r14 + rbx*4], r9d
0x3a67:	mov	dword ptr [r14 + r12*4], 0xffffffff
0x3a6f:	add	rbx, 1
0x3a73:	sub	r13, rbp
0x3a76:	add	r12, 1
0x3a7a:	cmp	r12, qword ptr [rsp + 0x38]
0x3a7f:	je	0x3ac3


0x3a8a:	lea	rsi, [rbx - 1]
0x3a8e:	mov	rdi, qword ptr [rsp + 0x30]
0x3a93:	mov	dword ptr [rsp + 0x18], r9d
0x3a98:	sub	r13, rbp
0x3a9b:	sub	rsi, r12
0x3a9e:	call	0x7210


0x3b63:	add	qword ptr [rsp + 0x18], r14
0x3b68:	jmp	0x3a25


0x3b08:	lea	rax, [r14 + r14*2]
0x3b0c:	cmp	r15, rax
0x3b0f:	ja	0x3b63


0x3ac3:	mov	ebp, dword ptr [rsp + 0x50]
0x3ac7:	mov	rbx, qword ptr [rsp + 0x58]
0x3acc:	jmp	0x3820


0x3a25:	mov	rax, qword ptr [rsp + 0x38]
0x3a2a:	mov	rsi, qword ptr [rsp + 0x18]
0x3a2f:	xor	r12d, r12d
0x3a32:	mov	dword ptr [rsp + 0x50], ebp
0x3a36:	mov	qword ptr [rsp + 0x58], rbx
0x3a3b:	mov	r14, qword ptr [rsp + 0x10]
0x3a40:	lea	rdx, [rsi - 1]
0x3a44:	mov	r15, rax
0x3a47:	lea	r8, [rax - 1]
0x3a4b:	sub	r15, rsi
0x3a4e:	mov	rbx, r15
0x3a51:	mov	r13, rdx
0x3a54:	mov	rbp, rdx
0x3a57:	mov	r15, r8
0x3a5a:	jmp	0x3a81


0x3b11:	mov	qword ptr [rsp + 0x50], rbx
0x3b16:	mov	rbx, r8
0x3b19:	jmp	0x3b2a


0x3820:	mov	rdi, qword ptr [rsp + 0x30]
0x3825:	call	0x7200


0x3b2a:	add	r13, 4
0x3b2e:	cmp	r14, r15
0x3b31:	je	0x3b49


0x3b49:	mov	eax, dword ptr [r13 - 4]
0x3b4d:	sub	r14, 1
0x3b51:	lea	rcx, [rbx + 4]
0x3b55:	mov	dword ptr [rbx], eax
0x3b57:	jne	0x3b20


0x3b33:	lea	r12, [r15 - 1]
0x3b37:	mov	rdi, qword ptr [rsp + 0x30]
0x3b3c:	mov	rsi, r12
0x3b3f:	call	0x7210


0x3b59:	mov	rbx, qword ptr [rsp + 0x50]
0x3b5e:	jmp	0x3a25


0x3b20:	lea	r12, [r15 - 1]
0x3b24:	mov	rbx, rcx
0x3b27:	mov	r15, r12
0x3b2a:	add	r13, 4
0x3b2e:	cmp	r14, r15
0x3b31:	je	0x3b49


0x3b44:	cmp	r14, rax
0x3b47:	jbe	0x3b27


0x3b27:	mov	r15, r12
0x3b2a:	add	r13, 4
0x3b2e:	cmp	r14, r15
0x3b31:	je	0x3b49


0x3aa3:	add	rax, r12
0x3aa6:	mov	r9d, dword ptr [rsp + 0x18]
0x3aab:	lea	rax, [r14 + rax*4]
0x3aaf:	mov	esi, dword ptr [rax]
0x3ab1:	mov	dword ptr [r14 + r12*4], esi
0x3ab5:	add	r12, 1
0x3ab9:	cmp	r12, qword ptr [rsp + 0x38]
0x3abe:	mov	dword ptr [rax], r9d
0x3ac1:	jne	0x3a81


0x3717:	mov	r8, rax
0x371a:	add	r8, rbx
0x371d:	jmp	0x36df


0x36df:	mov	eax, dword ptr [r13]
0x36e3:	test	eax, eax
0x36e5:	je	0x36c0


0x382a:	mov	r14, rax
0x382d:	mov	rax, qword ptr [rsp + 0x48]
0x3832:	test	rax, rax
0x3835:	je	0x3bfd


0x3bfd:	mov	byte ptr [rsp + 0x18], 1
0x3c02:	jmp	0x38d0


0x383b:	mov	qword ptr [rsp + 0x68], rax
0x3840:	mov	rdx, qword ptr [rbx + 8]
0x3844:	xor	r13d, r13d
0x3847:	mov	byte ptr [rsp + 0x18], 1
0x384c:	jmp	0x38f8


0x38d0:	cmp	qword ptr [rsp + 0x40], 0
0x38d6:	je	0x3ba4


0x38f8:	lea	r12, [rsp + 0x68]
0x38fd:	xor	r15d, r15d
0x3900:	mov	rax, r12
0x3903:	mov	r12, r15
0x3906:	mov	r15, rbx
0x3909:	mov	rbx, rax
0x390c:	jmp	0x3951


0x3ba4:	mov	eax, dword ptr [rbx + 0x18]
0x3ba7:	test	eax, eax
0x3ba9:	jne	0x3966


0x38dc:	mov	rdx, qword ptr [rbx + 8]
0x38e0:	mov	rax, qword ptr [rsp + 0x40]
0x38e5:	mov	r13, qword ptr [rsp + 0x28]
0x38ea:	mov	qword ptr [rsp + 0x40], 0
0x38f3:	mov	qword ptr [rsp + 0x68], rax
0x38f8:	lea	r12, [rsp + 0x68]
0x38fd:	xor	r15d, r15d
0x3900:	mov	rax, r12
0x3903:	mov	r12, r15
0x3906:	mov	r15, rbx
0x3909:	mov	rbx, rax
0x390c:	jmp	0x3951


0x3951:	movzx	eax, byte ptr [r15 + 0x1e]
0x3956:	add	rax, rdx
0x3959:	cmp	rax, r12
0x395c:	ja	0x3910


0x3baf:	movzx	eax, byte ptr [rsp + 0x18]
0x3bb4:	mov	byte ptr [rsp + 0x27], al
0x3bb8:	jmp	0x39c0


0x3966:	xor	esi, esi
0x3968:	mov	edi, ebp
0x396a:	call	0x1e20


0x395e:	mov	rbx, r15
0x3961:	jmp	0x38d0


0x3910:	xor	r8d, r8d
0x3913:	cmp	r12, rdx
0x3916:	jae	0x3921


0x39c0:	mov	rdi, qword ptr [rsp + 0x10]
0x39c5:	call	0x1c50


0x1e20:	jmp	qword ptr [rip + 0x20c02a]


0x3918:	mov	rax, qword ptr [rsp + 0x10]
0x391d:	mov	r8d, dword ptr [rax + r12*4]
0x3921:	add	r12, 1
0x3925:	push	r13
0x3927:	mov	rcx, rbx
0x392a:	push	r12
0x392c:	mov	rdx, qword ptr [rsp + 0x10]
0x3931:	mov	r9, r14
0x3934:	mov	rsi, qword ptr [rsp + 0x18]
0x3939:	mov	edi, ebp
0x393b:	call	0x2c80


0x3921:	add	r12, 1
0x3925:	push	r13
0x3927:	mov	rcx, rbx
0x392a:	push	r12
0x392c:	mov	rdx, qword ptr [rsp + 0x10]
0x3931:	mov	r9, r14
0x3934:	mov	rsi, qword ptr [rsp + 0x18]
0x3939:	mov	edi, ebp
0x393b:	call	0x2c80




0x39ca:	jmp	0x35d8


0x35d8:	mov	rcx, qword ptr [rsp + 0x108]
0x35e0:	xor	rcx, qword ptr fs:[0x28]
0x35e9:	movzx	eax, byte ptr [rsp + 0x27]
0x35ee:	jne	0x3c11


0x35f4:	add	rsp, 0x118
0x35fb:	pop	rbx
0x35fc:	pop	rbp
0x35fd:	pop	r12
0x35ff:	pop	r13
0x3601:	pop	r14
0x3603:	pop	r15
0x3605:	ret	


0x3c11:	call	0x1da0


0x3aed:	mov	r14, rax
0x3af0:	jmp	0x38d0


0x38c3:	mov	byte ptr [rsp + 0x18], 1
0x38c8:	mov	r14, rax
0x38cb:	nop	dword ptr [rax + rax]
0x38d0:	cmp	qword ptr [rsp + 0x40], 0
0x38d6:	je	0x3ba4


0x74ca:	mov	rbx, rax
0x74cd:	mov	qword ptr [rax], 0
0x74d4:	lea	rax, [rip - 0x12b]
0x74db:	lea	rdi, [rip + 0x3865]
0x74e2:	xor	esi, esi
0x74e4:	mov	qword ptr [rbx + 0x10], 0
0x74ec:	mov	qword ptr [rbx + 8], rax
0x74f0:	mov	qword ptr [rbx + 0x18], 0
0x74f8:	xor	eax, eax
0x74fa:	call	0x2050


0x74ff:	test	eax, eax
0x7501:	lea	r13, [rbx + 0x20]
0x7505:	mov	r15d, eax
0x7508:	js	0x7588


0x7588:	lea	r12, [rsp + 0x10]
0x758d:	xor	esi, esi
0x758f:	mov	r14d, 0x18
0x7595:	mov	rdi, r12
0x7598:	call	0x1e40


0x750a:	cmp	rbp, 0x800
0x7511:	mov	rdx, rbp
0x7514:	mov	r14d, 0x800
0x751a:	cmova	rdx, r14
0x751e:	mov	ecx, 0x1018
0x7523:	mov	rsi, r13
0x7526:	mov	edi, eax
0x7528:	call	0x1cd0


0x1e40:	jmp	qword ptr [rip + 0x20c01a]


0x1cd0:	jmp	qword ptr [rip + 0x20c0d2]






0x7562:	mov	rbx, rax
0x7565:	mov	qword ptr [rax], 0
0x756c:	lea	rax, [rip - 0x1c3]
0x7573:	mov	qword ptr [rbx + 0x10], 0
0x757b:	mov	qword ptr [rbx + 8], rax
0x757f:	jmp	0x7497


0x7497:	mov	rdx, qword ptr [rsp + 0x28]
0x749c:	xor	rdx, qword ptr fs:[0x28]
0x74a5:	mov	rax, rbx
0x74a8:	jne	0x765f


0x74ae:	add	rsp, 0x38
0x74b2:	pop	rbx
0x74b3:	pop	rbp
0x74b4:	pop	r12
0x74b6:	pop	r13
0x74b8:	pop	r14
0x74ba:	pop	r15
0x74bc:	ret	


0x765f:	call	0x1da0


0x71c6:	test	rax, rax
0x71c9:	je	0x71f0


0x71f0:	xor	eax, eax
0x71f2:	pop	rbx
0x71f3:	ret	


0x71cb:	mov	rbx, rax
0x71ce:	mov	edi, 0x18
0x71d3:	call	0x86f0


0x71d8:	mov	qword ptr [rax], rbx
0x71db:	mov	qword ptr [rax + 0x10], 0
0x71e3:	mov	qword ptr [rax + 8], 0
0x71eb:	pop	rbx
0x71ec:	ret	


0x719e:	mov	qword ptr [rax], rbx
0x71a1:	mov	qword ptr [rax + 0x10], 0
0x71a9:	mov	qword ptr [rax + 8], 0
0x71b1:	pop	rbx
0x71b2:	ret	


0x88a9:	mov	rdx, rbx
0x88ac:	xor	esi, esi
0x88ae:	mov	rdi, rax
0x88b1:	pop	rbx
0x88b2:	jmp	0x1e70


0x8904:	add	rsp, 8
0x8908:	mov	rdx, rbx
0x890b:	mov	rsi, rbp
0x890e:	pop	rbx
0x890f:	pop	rbp
0x8910:	mov	rdi, rax
0x8913:	jmp	0x1f00


0x7ed9:	mov	rdi, r13
0x7edc:	mov	rbp, rax
0x7edf:	call	0x1d90


0x7ee4:	test	rbp, rbp
0x7ee7:	je	0x7f03


0x7f03:	mov	edi, dword ptr [rsp + 4]
0x7f07:	mov	rcx, r13
0x7f0a:	mov	edx, r14d
0x7f0d:	mov	rsi, r12
0x7f10:	call	0x2090


0x7ee9:	test	rax, rax
0x7eec:	mov	r9, qword ptr [rsp + 8]
0x7ef1:	je	0x7f03


0x2090:	jmp	qword ptr [rip + 0x20bef2]


0x7ef3:	cmp	byte ptr [r12 + rbp - 1], 0x2f
0x7ef9:	je	0x7f40




0x7f40:	mov	esi, dword ptr [rsp + 4]
0x7f44:	lea	rcx, [rsp + 0x10]
0x7f49:	mov	r8d, 0x100
0x7f4f:	mov	rdx, r12
0x7f52:	mov	edi, 1
0x7f57:	mov	qword ptr [rsp + 8], r9
0x7f5c:	call	0x1df0


0x7efb:	cmp	byte ptr [r13 + rax - 1], 0x2f
0x7f01:	je	0x7f40


0x487c:	mov	rcx, qword ptr [r13 + 0x10]
0x4880:	mov	r13, qword ptr [r13 + 8]
0x4884:	mov	rbp, rax
0x4887:	sub	rax, 1
0x488b:	mov	edx, 1
0x4890:	cmp	rax, 0x10
0x4894:	lea	rax, [rip + 0x4d38]
0x489b:	mov	rdi, r13
0x489e:	cmovae	rbp, rdx
0x48a2:	mov	qword ptr [rsp + 0x38], rcx
0x48a7:	cmovae	r14, rax
0x48ab:	call	0x1d90


0x48b0:	cmp	rax, 0x11
0x48b4:	lea	rax, [rip + 0x64f5]
0x48bb:	mov	rdi, qword ptr [rsp + 0x10]
0x48c0:	mov	rcx, qword ptr [rsp + 0x18]
0x48c5:	cmovae	r13, rax
0x48c9:	mov	rax, qword ptr [rsp]
0x48cd:	add	rax, 0x287
0x48d3:	cmp	rdi, rcx
0x48d6:	mov	qword ptr [rsp + 8], rax
0x48db:	ja	0x4a28


0x48e1:	xor	edx, edx
0x48e3:	mov	rax, rcx
0x48e6:	div	rdi
0x48e9:	test	rdx, rdx
0x48ec:	mov	rdi, rax
0x48ef:	je	0x4c50


0x4a28:	test	rcx, rcx
0x4a2b:	je	0x48f5


0x4c50:	mov	rsi, rbx
0x4c53:	xor	edx, edx
0x4c55:	imul	rsi, rax
0x4c59:	mov	rax, rsi
0x4c5c:	div	rdi
0x4c5f:	cmp	rax, rbx
0x4c62:	jne	0x48f5


0x48f5:	mov	qword ptr [rsp + 0x18], rcx
0x48fa:	test	rcx, rcx
0x48fd:	fild	qword ptr [rsp + 0x18]
0x4901:	jns	0x4909


0x4a31:	mov	rax, qword ptr [rsp + 0x10]
0x4a36:	xor	edx, edx
0x4a38:	div	rcx
0x4a3b:	test	rdx, rdx
0x4a3e:	mov	r8, rax
0x4a41:	jne	0x48f5


0x4c68:	xor	edi, edi
0x4c6a:	xor	r9d, r9d
0x4c6d:	jmp	0x4a79


0x4903:	fadd	dword ptr [rip + 0x5ee7]
0x4909:	mov	rax, qword ptr [rsp + 0x10]
0x490e:	mov	qword ptr [rsp + 0x18], rax
0x4913:	test	rax, rax
0x4916:	fild	qword ptr [rsp + 0x18]
0x491a:	jns	0x4922


0x4909:	mov	rax, qword ptr [rsp + 0x10]
0x490e:	mov	qword ptr [rsp + 0x18], rax
0x4913:	test	rax, rax
0x4916:	fild	qword ptr [rsp + 0x18]
0x491a:	jns	0x4922


0x4a47:	mov	rax, rbx
0x4a4a:	xor	edx, edx
0x4a4c:	div	r8
0x4a4f:	mov	rbx, rax
0x4a52:	lea	rax, [rdx + rdx*4]
0x4a56:	xor	edx, edx
0x4a58:	mov	rsi, rbx
0x4a5b:	add	rax, rax
0x4a5e:	div	r8
0x4a61:	add	rdx, rdx
0x4a64:	mov	r9d, eax
0x4a67:	cmp	r8, rdx
0x4a6a:	jbe	0x4ff8


0x4a79:	mov	ecx, r12d
0x4a7c:	mov	r8, qword ptr [rsp + 8]
0x4a81:	mov	ebx, 0xffffffff
0x4a86:	and	ecx, 0x10
0x4a89:	je	0x4e50


0x491c:	fadd	dword ptr [rip + 0x5ece]
0x4922:	fdivp	st(1)
0x4924:	mov	qword ptr [rsp + 0x18], rbx
0x4929:	test	rbx, rbx
0x492c:	fild	qword ptr [rsp + 0x18]
0x4930:	jns	0x4938


0x4922:	fdivp	st(1)
0x4924:	mov	qword ptr [rsp + 0x18], rbx
0x4929:	test	rbx, rbx
0x492c:	fild	qword ptr [rsp + 0x18]
0x4930:	jns	0x4938


0x4ff8:	setb	dil
0x4ffc:	movzx	edi, dil
0x5000:	add	edi, 2
0x5003:	jmp	0x4a79


0x4a70:	xor	edi, edi
0x4a72:	test	rdx, rdx
0x4a75:	setne	dil
0x4a79:	mov	ecx, r12d
0x4a7c:	mov	r8, qword ptr [rsp + 8]
0x4a81:	mov	ebx, 0xffffffff
0x4a86:	and	ecx, 0x10
0x4a89:	je	0x4e50


0x4e50:	cmp	r15d, 1
0x4e54:	je	0x4fd0


0x4a8f:	mov	r8d, dword ptr [rsp + 0x34]
0x4a94:	cmp	r8, rsi
0x4a97:	mov	r11, r8
0x4a9a:	ja	0x5010


0x4932:	fadd	dword ptr [rip + 0x5eb8]
0x4938:	test	r12b, 0x10
0x493c:	fmulp	st(1)
0x493e:	je	0x4b08


0x4938:	test	r12b, 0x10
0x493c:	fmulp	st(1)
0x493e:	je	0x4b08


0x4fd0:	mov	rax, rsi
0x4fd3:	movsxd	rdi, edi
0x4fd6:	and	eax, 1
0x4fd9:	add	rax, rdi
0x4fdc:	setne	al
0x4fdf:	movzx	eax, al
0x4fe2:	add	r9d, eax
0x4fe5:	cmp	r9d, 5
0x4fe9:	jg	0x4e66


0x4e5a:	test	r15d, r15d
0x4e5d:	jne	0x4e80


0x4aa0:	xor	ebx, ebx
0x4aa2:	jmp	0x4ac7


0x5010:	mov	r8, qword ptr [rsp + 8]
0x5015:	xor	ebx, ebx
0x5017:	jmp	0x4e50


0x4b08:	cmp	r15d, 1
0x4b0c:	je	0x4b1c


0x4944:	fild	dword ptr [rsp + 0x34]
0x4948:	xor	ebx, ebx
0x494a:	fld	st(0)
0x494c:	jmp	0x4954


0x4fef:	jmp	0x4e80


0x4e66:	add	rsi, 1
0x4e6a:	test	ecx, ecx
0x4e6c:	je	0x4e80


0x4e5f:	add	edi, r9d
0x4e62:	test	edi, edi
0x4e64:	jle	0x4e80


0x4e80:	mov	r15, r8
0x4e83:	movabs	rcx, 0xcccccccccccccccd
0x4e8d:	nop	dword ptr [rax]
0x4e90:	mov	rax, rsi
0x4e93:	sub	r15, 1
0x4e97:	mul	rcx
0x4e9a:	shr	rdx, 3
0x4e9e:	lea	rax, [rdx + rdx*4]
0x4ea2:	add	rax, rax
0x4ea5:	sub	rsi, rax
0x4ea8:	add	esi, 0x30
0x4eab:	test	rdx, rdx
0x4eae:	mov	byte ptr [r15], sil
0x4eb1:	mov	rsi, rdx
0x4eb4:	jne	0x4e90


0x4ac7:	mov	rax, rsi
0x4aca:	xor	edx, edx
0x4acc:	mov	esi, edi
0x4ace:	div	r8
0x4ad1:	sar	esi, 1
0x4ad3:	mov	r10, rax
0x4ad6:	lea	eax, [rdx + rdx*4]
0x4ad9:	xor	edx, edx
0x4adb:	lea	eax, [r9 + rax*2]
0x4adf:	div	r11d
0x4ae2:	lea	edx, [rsi + rdx*2]
0x4ae5:	mov	r9d, eax
0x4ae8:	mov	rsi, r10
0x4aeb:	add	edi, edx
0x4aed:	cmp	r11d, edx
0x4af0:	ja	0x4aa8


0x4b1c:	sub	rsp, 0x10
0x4b20:	lea	rcx, [rip + 0x5c57]
0x4b27:	mov	esi, 1
0x4b2c:	mov	rbx, qword ptr [rsp + 0x10]
0x4b31:	mov	rdx, -1
0x4b38:	xor	eax, eax
0x4b3a:	fstp	xword ptr [rsp]
0x4b3d:	xor	ebp, ebp
0x4b3f:	mov	rdi, rbx
0x4b42:	call	0x2120


0x4b0e:	fld	xword ptr [rip + 0x5cec]
0x4b14:	fucomip	st(1)
0x4b16:	ja	0x4da0


0x4954:	fld	st(0)
0x4956:	add	ebx, 1
0x4959:	fmul	st(2)
0x495b:	fxch	st(3)
0x495d:	fucomi	st(3)
0x495f:	jb	0x4970


0x4e6e:	mov	eax, dword ptr [rsp + 0x34]
0x4e72:	cmp	rax, rsi
0x4e75:	je	0x5040


0x4eb6:	jmp	0x4b90


0x4e90:	mov	rax, rsi
0x4e93:	sub	r15, 1
0x4e97:	mul	rcx
0x4e9a:	shr	rdx, 3
0x4e9e:	lea	rax, [rdx + rdx*4]
0x4ea2:	add	rax, rax
0x4ea5:	sub	rsi, rax
0x4ea8:	add	esi, 0x30
0x4eab:	test	rdx, rdx
0x4eae:	mov	byte ptr [r15], sil
0x4eb1:	mov	rsi, rdx
0x4eb4:	jne	0x4e90


0x4af2:	cmp	r11d, edi
0x4af5:	setb	dil
0x4af9:	movzx	edi, dil
0x4afd:	add	edi, 2
0x4b00:	jmp	0x4ab2


0x4aa8:	test	edi, edi
0x4aaa:	setne	dil
0x4aae:	movzx	edi, dil
0x4ab2:	add	ebx, 1
0x4ab5:	cmp	r8, r10
0x4ab8:	ja	0x4dcd


0x2120:	jmp	qword ptr [rip + 0x20beaa]


0x4da0:	sub	rsp, 0x10
0x4da4:	mov	edi, r15d
0x4da7:	fstp	xword ptr [rsp]
0x4daa:	call	0x4740


0x4970:	fstp	st(2)
0x4972:	fstp	st(2)
0x4974:	mov	ecx, dword ptr [rsp + 0x30]
0x4978:	add	rbp, 1
0x497c:	xor	eax, eax
0x497e:	fdivrp	st(1)
0x4980:	test	ecx, ecx
0x4982:	sete	al
0x4985:	cmp	r15d, 1
0x4989:	lea	rax, [rbp + rax + 1]
0x498e:	mov	qword ptr [rsp + 0x18], rax
0x4993:	je	0x4f00


0x4961:	cmp	ebx, 8
0x4964:	jne	0x4950


0x5040:	cmp	ebx, 8
0x5043:	je	0x4e80


0x4b90:	test	r12b, 4
0x4b94:	jne	0x4c78


0x4ab2:	add	ebx, 1
0x4ab5:	cmp	r8, r10
0x4ab8:	ja	0x4dcd


0x4abe:	cmp	ebx, 8
0x4ac1:	je	0x5068


0x4dcd:	cmp	r10, 9
0x4dd1:	ja	0x5068




0x4f00:	sub	rsp, 0x10
0x4f04:	lea	rcx, [rip + 0x5879]
0x4f0b:	mov	rdx, -1
0x4f12:	fld	st(0)
0x4f14:	fstp	xword ptr [rsp]
0x4f17:	mov	r14, qword ptr [rsp + 0x10]
0x4f1c:	mov	esi, 1
0x4f21:	xor	eax, eax
0x4f23:	mov	rdi, r14
0x4f26:	fstp	xword ptr [rsp + 0x30]
0x4f2a:	call	0x2120


0x4999:	fld	xword ptr [rip + 0x5e61]
0x499f:	fucomip	st(1)
0x49a1:	ja	0x4d78


0x4966:	fstp	st(2)
0x4968:	fstp	st(2)
0x496a:	jmp	0x4974


0x4950:	fstp	st(1)
0x4952:	fxch	st(2)
0x4954:	fld	st(0)
0x4956:	add	ebx, 1
0x4959:	fmul	st(2)
0x495b:	fxch	st(3)
0x495d:	fucomi	st(3)
0x495f:	jb	0x4970


0x5049:	add	ebx, 1
0x504c:	test	r12b, 8
0x5050:	je	0x5112


0x4b9a:	test	r12b, 0x80
0x4b9e:	je	0x4c17


0x4c78:	mov	r14, r8
0x4c7b:	mov	rdi, r13
0x4c7e:	mov	qword ptr [rsp + 0x48], r8
0x4c83:	sub	r14, r15
0x4c86:	mov	rbp, -1
0x4c8d:	call	0x1d90


0x5068:	mov	r8, qword ptr [rsp + 8]
0x506d:	jmp	0x4e50


0x4dd7:	cmp	r15d, 1
0x4ddb:	je	0x5092


0x49a7:	fld	st(0)
0x49a9:	fstp	xword ptr [rsp + 0x20]
0x49ad:	sub	rsp, 0x10
0x49b1:	lea	rcx, [rip + 0x5dcc]
0x49b8:	mov	esi, 1
0x49bd:	mov	rdx, -1
0x49c4:	xor	eax, eax
0x49c6:	mov	r14, qword ptr [rsp + 0x10]
0x49cb:	mov	rdi, r14
0x49ce:	fstp	xword ptr [rsp]
0x49d1:	call	0x2120


0x4d78:	sub	rsp, 0x10
0x4d7c:	mov	edi, r15d
0x4d7f:	fld	st(0)
0x4d81:	fstp	xword ptr [rsp]
0x4d84:	fstp	xword ptr [rsp + 0x30]
0x4d88:	call	0x4740


0x4974:	mov	ecx, dword ptr [rsp + 0x30]
0x4978:	add	rbp, 1
0x497c:	xor	eax, eax
0x497e:	fdivrp	st(1)
0x4980:	test	ecx, ecx
0x4982:	sete	al
0x4985:	cmp	r15d, 1
0x4989:	lea	rax, [rbp + rax + 1]
0x498e:	mov	qword ptr [rsp + 0x18], rax
0x4993:	je	0x4f00


0x5112:	mov	rax, rbp
0x5115:	mov	byte ptr [r8 - 1], 0x30
0x511a:	not	rax
0x511d:	add	r8, rax
0x5120:	cmp	ebp, 8
0x5123:	mov	eax, ebp
0x5125:	jae	0x516a


0x5056:	lea	r15, [r8 - 1]
0x505a:	mov	byte ptr [r8 - 1], 0x31
0x505f:	jmp	0x4b90


0x4c17:	mov	rax, qword ptr [rsp + 8]
0x4c1c:	mov	rcx, qword ptr [rsp + 0x88]
0x4c24:	xor	rcx, qword ptr fs:[0x28]
0x4c2d:	mov	byte ptr [rax], 0
0x4c30:	mov	rax, r15
0x4c33:	jne	0x51cb


0x4ba0:	cmp	ebx, -1
0x4ba3:	je	0x4ec0


0x5092:	mov	edx, eax
0x5094:	and	edx, 1
0x5097:	add	edx, edi
0x5099:	cmp	edx, 2
0x509c:	setg	dl
0x509f:	jmp	0x4df0


0x4de1:	test	r15d, r15d
0x4de4:	sete	dl
0x4de7:	test	edi, edi
0x4de9:	setg	r8b
0x4ded:	and	edx, r8d
0x4df0:	test	dl, dl
0x4df2:	je	0x5079


0x5127:	and	ebp, 4
0x512a:	jne	0x51e1


0x516a:	mov	rax, qword ptr [r14]
0x516d:	lea	rcx, [r8 + 8]
0x5171:	and	rcx, 0xfffffffffffffff8
0x5175:	mov	qword ptr [r8], rax
0x5178:	mov	eax, ebp
0x517a:	mov	rdx, qword ptr [r14 + rax - 8]
0x517f:	mov	qword ptr [r8 + rax - 8], rdx
0x5184:	mov	rax, r8
0x5187:	sub	rax, rcx
0x518a:	sub	r14, rax
0x518d:	add	eax, ebp
0x518f:	and	eax, 0xfffffff8
0x5192:	cmp	eax, 8
0x5195:	jb	0x5056


0x4c39:	add	rsp, 0x98
0x4c40:	pop	rbx
0x4c41:	pop	rbp
0x4c42:	pop	r12
0x4c44:	pop	r13
0x4c46:	pop	r14
0x4c48:	pop	r15
0x4c4a:	ret	


0x51cb:	call	0x1da0


0x4ec0:	mov	rcx, qword ptr [rsp + 0x10]
0x4ec5:	cmp	rcx, 1
0x4ec9:	jbe	0x5072


0x4ba9:	mov	eax, r12d
0x4bac:	and	eax, 0x100
0x4bb1:	mov	ecx, eax
0x4bb3:	or	ecx, ebx
0x4bb5:	je	0x4c17


0x4df0:	test	dl, dl
0x4df2:	je	0x5079


0x5079:	test	eax, eax
0x507b:	jne	0x4e06


0x4df8:	lea	r9d, [rax + 1]
0x4dfc:	cmp	r9d, 0xa
0x4e00:	je	0x5101


0x5130:	test	eax, eax
0x5132:	je	0x5056


0x51e1:	mov	edx, dword ptr [r14]
0x51e4:	mov	dword ptr [r8], edx
0x51e7:	mov	edx, dword ptr [r14 + rax - 4]
0x51ec:	mov	dword ptr [r8 + rax - 4], edx
0x51f1:	jmp	0x5056


0x519b:	and	eax, 0xfffffff8
0x519e:	xor	edx, edx
0x51a0:	mov	esi, edx
0x51a2:	add	edx, 8
0x51a5:	mov	rdi, qword ptr [r14 + rsi]
0x51a9:	cmp	edx, eax
0x51ab:	mov	qword ptr [rcx + rsi], rdi
0x51af:	jb	0x51a0


0x5072:	xor	ebx, ebx
0x5074:	jmp	0x4ba9


0x4ecf:	mov	edx, dword ptr [rsp + 0x34]
0x4ed3:	mov	ebx, 1
0x4ed8:	mov	eax, 1
0x4edd:	imul	rax, rdx
0x4ee1:	cmp	rcx, rax
0x4ee4:	jbe	0x4ba9


0x4bb7:	and	r12d, 0x40
0x4bbb:	jne	0x4d58


0x5081:	test	r12b, 8
0x5085:	jne	0x50a4


0x4e06:	add	r9d, 0x30
0x4e0a:	mov	rax, qword ptr [rsp]
0x4e0e:	lea	r8, [rax + 0x286]
0x4e15:	mov	byte ptr [rax + 0x286], r9b
0x4e1c:	mov	eax, ebp
0x4e1e:	sub	r8, rbp
0x4e21:	cmp	ebp, 8
0x4e24:	jae	0x50b1


0x5101:	lea	rsi, [r10 + 1]
0x5105:	cmp	rsi, 0xa
0x5109:	je	0x5160


0x5138:	movzx	edx, byte ptr [r14]
0x513c:	test	al, 2
0x513e:	mov	byte ptr [r8], dl
0x5141:	je	0x5056


0x51a0:	mov	esi, edx
0x51a2:	add	edx, 8
0x51a5:	mov	rdi, qword ptr [r14 + rsi]
0x51a9:	cmp	edx, eax
0x51ab:	mov	qword ptr [rcx + rsi], rdi
0x51af:	jb	0x51a0


0x51b1:	jmp	0x5056


0x4eea:	add	ebx, 1
0x4eed:	cmp	ebx, 8
0x4ef0:	jne	0x4edd


0x4bc1:	test	ebx, ebx
0x4bc3:	je	0x51f6


0x4d58:	mov	rcx, qword ptr [rsp]
0x4d5c:	lea	rdi, [rcx + 0x288]
0x4d63:	mov	byte ptr [rcx + 0x287], 0x20
0x4d6a:	mov	qword ptr [rsp + 8], rdi
0x4d6f:	jmp	0x4bc1


0x5087:	mov	r9d, 0x30
0x508d:	jmp	0x4e0a


0x50a4:	mov	r8, qword ptr [rsp + 8]
0x50a9:	xor	r9d, r9d
0x50ac:	jmp	0x4e50


0x4e2a:	test	bpl, 4
0x4e2e:	jne	0x51b6


0x50b1:	mov	rax, qword ptr [r14]
0x50b4:	mov	r9, r14
0x50b7:	mov	qword ptr [r8], rax
0x50ba:	mov	eax, ebp
0x50bc:	mov	rdx, qword ptr [r14 + rax - 8]
0x50c1:	mov	qword ptr [r8 + rax - 8], rdx
0x50c6:	lea	rdx, [r8 + 8]
0x50ca:	mov	rax, r8
0x50cd:	and	rdx, 0xfffffffffffffff8
0x50d1:	sub	rax, rdx
0x50d4:	sub	r9, rax
0x50d7:	add	eax, ebp
0x50d9:	and	eax, 0xfffffff8
0x50dc:	cmp	eax, 8
0x50df:	jb	0x4e47


0x5160:	mov	r8, qword ptr [rsp + 8]
0x5165:	jmp	0x4e47


0x510b:	xor	edi, edi
0x510d:	jmp	0x5081


0x5147:	movzx	edx, word ptr [r14 + rax - 2]
0x514d:	mov	word ptr [r8 + rax - 2], dx
0x5153:	jmp	0x5056


0x4ef2:	jmp	0x4ba9


0x4edd:	imul	rax, rdx
0x4ee1:	cmp	rcx, rax
0x4ee4:	jbe	0x4ba9


0x51f6:	test	eax, eax
0x51f8:	mov	rdx, qword ptr [rsp + 8]
0x51fd:	jne	0x4c0b


0x4bc9:	cmp	ebx, 1
0x4bcc:	jne	0x4bdc


0x4e0a:	mov	rax, qword ptr [rsp]
0x4e0e:	lea	r8, [rax + 0x286]
0x4e15:	mov	byte ptr [rax + 0x286], r9b
0x4e1c:	mov	eax, ebp
0x4e1e:	sub	r8, rbp
0x4e21:	cmp	ebp, 8
0x4e24:	jae	0x50b1


0x4e34:	test	eax, eax
0x4e36:	je	0x4e47


0x51b6:	mov	edx, dword ptr [r14]
0x51b9:	mov	dword ptr [r8], edx
0x51bc:	mov	edx, dword ptr [r14 + rax - 4]
0x51c1:	mov	dword ptr [r8 + rax - 4], edx
0x51c6:	jmp	0x4e47


0x4e47:	xor	edi, edi
0x4e49:	xor	r9d, r9d
0x4e4c:	nop	dword ptr [rax]
0x4e50:	cmp	r15d, 1
0x4e54:	je	0x4fd0


0x50e5:	and	eax, 0xfffffff8
0x50e8:	xor	edi, edi
0x50ea:	mov	r10d, edi
0x50ed:	add	edi, 8
0x50f0:	mov	r11, qword ptr [r9 + r10]
0x50f4:	cmp	edi, eax
0x50f6:	mov	qword ptr [rdx + r10], r11
0x50fa:	jb	0x50ea


0x5203:	jmp	0x4c17


0x4c0b:	lea	rax, [rdx + 1]
0x4c0f:	mov	byte ptr [rdx], 0x42
0x4c12:	mov	qword ptr [rsp + 8], rax
0x4c17:	mov	rax, qword ptr [rsp + 8]
0x4c1c:	mov	rcx, qword ptr [rsp + 0x88]
0x4c24:	xor	rcx, qword ptr fs:[0x28]
0x4c2d:	mov	byte ptr [rax], 0
0x4c30:	mov	rax, r15
0x4c33:	jne	0x51cb


0x4bce:	mov	r9d, dword ptr [rsp + 0x30]
0x4bd3:	test	r9d, r9d
0x4bd6:	je	0x5020


0x4bdc:	lea	rcx, [rip + 0x5bfd]
0x4be3:	movsxd	rbx, ebx
0x4be6:	mov	rdi, qword ptr [rsp + 8]
0x4beb:	test	eax, eax
0x4bed:	movzx	ecx, byte ptr [rcx + rbx]
0x4bf1:	lea	rdx, [rdi + 1]
0x4bf5:	mov	byte ptr [rdi], cl
0x4bf7:	je	0x5034


0x4e38:	movzx	edx, byte ptr [r14]
0x4e3c:	test	al, 2
0x4e3e:	mov	byte ptr [r8], dl
0x4e41:	jne	0x51d0


0x50ea:	mov	r10d, edi
0x50ed:	add	edi, 8
0x50f0:	mov	r11, qword ptr [r9 + r10]
0x50f4:	cmp	edi, eax
0x50f6:	mov	qword ptr [rdx + r10], r11
0x50fa:	jb	0x50ea


0x50fc:	jmp	0x4e47


0x5020:	mov	rbx, qword ptr [rsp + 8]
0x5025:	test	eax, eax
0x5027:	lea	rdx, [rbx + 1]
0x502b:	mov	byte ptr [rbx], 0x6b
0x502e:	jne	0x4c0b


0x5034:	mov	qword ptr [rsp + 8], rdx
0x5039:	jmp	0x4c17


0x4bfd:	mov	r8d, dword ptr [rsp + 0x30]
0x4c02:	test	r8d, r8d
0x4c05:	jne	0x4dc0


0x51d0:	movzx	edx, word ptr [r14 + rax - 2]
0x51d6:	mov	word ptr [r8 + rax - 2], dx
0x51dc:	jmp	0x4e47


0x4dc0:	lea	rdx, [rdi + 2]
0x4dc4:	mov	byte ptr [rdi + 1], 0x69
0x4dc8:	jmp	0x4c0b


0x4d8d:	pop	rax
0x4d8e:	pop	rdx
0x4d8f:	fld	xword ptr [rsp + 0x20]
0x4d93:	jmp	0x49a9


0x49a9:	fstp	xword ptr [rsp + 0x20]
0x49ad:	sub	rsp, 0x10
0x49b1:	lea	rcx, [rip + 0x5dcc]
0x49b8:	mov	esi, 1
0x49bd:	mov	rdx, -1
0x49c4:	xor	eax, eax
0x49c6:	mov	r14, qword ptr [rsp + 0x10]
0x49cb:	mov	rdi, r14
0x49ce:	fstp	xword ptr [rsp]
0x49d1:	call	0x2120


0x4daf:	pop	r8
0x4db1:	pop	r9
0x4db3:	jmp	0x4b1c


0x4c92:	lea	rdi, [rsp + 0x50]
0x4c97:	mov	ecx, 0x29
0x4c9c:	mov	rdx, r14
0x4c9f:	mov	rsi, r15
0x4ca2:	mov	qword ptr [rsp + 0x40], rax
0x4ca7:	mov	qword ptr [rsp + 0x18], rdi
0x4cac:	call	0x1ee0


0x1ee0:	jmp	qword ptr [rip + 0x20bfca]




0x4116:	mov	r14, qword ptr [r15]
0x4119:	mov	qword ptr [rsp], -1
0x4121:	test	r14, r14
0x4124:	je	0x41dd


0x41dd:	mov	rax, qword ptr [rsp]
0x41e1:	add	rsp, 0x28
0x41e5:	pop	rbx
0x41e6:	pop	rbp
0x41e7:	pop	r12
0x41e9:	pop	r13
0x41eb:	pop	r14
0x41ed:	pop	r15
0x41ef:	ret	


0x412a:	mov	r12, rax
0x412d:	mov	byte ptr [rsp + 0x17], 0
0x4132:	xor	ebx, ebx
0x4134:	jmp	0x4187


0x4187:	mov	rsi, qword ptr [rsp + 8]
0x418c:	mov	rdx, r12
0x418f:	mov	rdi, r14
0x4192:	call	0x1ca0


0x1ca0:	jmp	qword ptr [rip + 0x20c0ea]




0x5277:	test	eax, eax
0x5279:	js	0x52b8


0x52b8:	lea	r8, [rip + 0x54f0]
0x52bf:	xor	edx, edx
0x52c1:	mov	rsi, rsp
0x52c4:	mov	rcx, r12
0x52c7:	mov	rdi, rbx
0x52ca:	call	0x8ab0


0x527b:	lea	rdx, [rip + 0x5556]
0x5282:	cdqe	
0x5284:	mov	qword ptr [r12], 1
0x528c:	or	ebp, dword ptr [rdx + rax*4]
0x528f:	xor	eax, eax
0x5291:	mov	dword ptr [r13], ebp
0x5295:	mov	rcx, qword ptr [rsp + 8]
0x529a:	xor	rcx, qword ptr fs:[0x28]
0x52a3:	jne	0x5401


0x43e1:	test	rax, rax
0x43e4:	js	0x43f5


0x43f5:	mov	rdx, rax
0x43f8:	mov	rsi, r12
0x43fb:	mov	rdi, r14
0x43fe:	call	0x4210


0x43e6:	add	rsp, 8
0x43ea:	pop	rbx
0x43eb:	pop	rbp
0x43ec:	pop	r12
0x43ee:	pop	r13
0x43f0:	pop	r14
0x43f2:	pop	r15
0x43f4:	ret	


0x4689:	cmp	rax, 1
0x468d:	jbe	0x469a


0x469a:	pop	rbx
0x469b:	ret	


0x468f:	cmp	byte ptr [rbx + rax - 1], 0x2f
0x4694:	lea	rdx, [rax - 1]
0x4698:	je	0x46a8


0x46a8:	cmp	rdx, 1
0x46ac:	je	0x46c0


0x46c0:	mov	eax, 1
0x46c5:	pop	rbx
0x46c6:	ret	


0x46ae:	cmp	byte ptr [rbx + rdx - 1], 0x2f
0x46b3:	lea	rax, [rdx - 1]
0x46b7:	je	0x46a0


0x46a0:	mov	rdx, rax
0x46a3:	nop	dword ptr [rax + rax]
0x46a8:	cmp	rdx, 1
0x46ac:	je	0x46c0


0x46b9:	mov	rax, rdx
0x46bc:	pop	rbx
0x46bd:	ret	


0x8929:	mov	rdi, rbx
0x892c:	lea	rsi, [rax + 1]
0x8930:	pop	rbx
0x8931:	jmp	0x88f0


0x2c5b:	mov	rcx, r13
0x2c5e:	mov	rdx, rax
0x2c61:	mov	esi, ebp
0x2c63:	xor	eax, eax
0x2c65:	xor	edi, edi
0x2c67:	call	0x2020


0x2020:	jmp	qword ptr [rip + 0x20bf2a]




0x811f:	lea	rdx, [rip + 0x2f5a]
0x8126:	mov	rcx, rax
0x8129:	mov	r8d, 0x7e3
0x812f:	mov	esi, 1
0x8134:	mov	rdi, rbp
0x8137:	xor	eax, eax
0x8139:	call	0x20e0


0x813e:	lea	rsi, [rip + 0x2cab]
0x8145:	xor	edi, edi
0x8147:	mov	edx, 5
0x814c:	call	0x1d70


0x8151:	mov	rsi, rbp
0x8154:	mov	rdi, rax
0x8157:	call	0x1eb0


0x1eb0:	jmp	qword ptr [rip + 0x20bfe2]




0x38a2:	mov	rcx, qword ptr [rsp]
0x38a6:	mov	rdx, rax
0x38a9:	xor	esi, esi
0x38ab:	xor	edi, edi
0x38ad:	xor	eax, eax
0x38af:	call	0x2020


0x35c1:	mov	rcx, qword ptr [rsp]
0x35c5:	mov	rdx, rax
0x35c8:	xor	esi, esi
0x35ca:	xor	edi, edi
0x35cc:	xor	eax, eax
0x35ce:	call	0x2020


0x3733:	mov	rbx, rax
0x3736:	call	0x1c70


0x373b:	mov	rcx, qword ptr [rsp]
0x373f:	mov	esi, dword ptr [rax]
0x3741:	mov	rdx, rbx
0x3744:	xor	edi, edi
0x3746:	xor	eax, eax
0x3748:	call	0x2020


0x3c5d:	mov	rdi, qword ptr [rip + 0x20a47c]
0x3c64:	mov	rdx, rax
0x3c67:	mov	rcx, rbx
0x3c6a:	mov	esi, 1
0x3c6f:	xor	eax, eax
0x3c71:	call	0x20e0


0x3c76:	mov	edi, ebp
0x3c78:	call	0x20c0


0x20c0:	jmp	qword ptr [rip + 0x20beda]




0x3c8b:	mov	rdx, rbx
0x3c8e:	mov	rsi, rax
0x3c91:	mov	edi, 1
0x3c96:	xor	eax, eax
0x3c98:	call	0x1fe0


0x1fe0:	jmp	qword ptr [rip + 0x20bf4a]




0x4233:	mov	rbx, rax
0x4236:	mov	rsi, rbp
0x4239:	mov	edi, 1
0x423e:	call	0x7150


0x427e:	mov	rbx, rax
0x4281:	jmp	0x4236


0x4236:	mov	rsi, rbp
0x4239:	mov	edi, 1
0x423e:	call	0x7150


0x42c1:	mov	rdi, rax
0x42c4:	mov	rsi, rbx
0x42c7:	call	0x1eb0


0x8684:	lea	rdx, [rip + 0x273b]
0x868b:	mov	rsi, rax
0x868e:	mov	edi, 1
0x8693:	xor	eax, eax
0x8695:	call	0x1fe0


0x8957:	mov	edi, dword ptr [rip + 0x2056c3]
0x895d:	lea	rdx, [rip + 0x1e04]
0x8964:	mov	rcx, rax
0x8967:	xor	esi, esi
0x8969:	xor	eax, eax
0x896b:	call	0x2020


0x9243:	mov	edx, r12d
0x9246:	mov	rsi, rbp
0x9249:	mov	edi, eax
0x924b:	call	0x1e30


0x8edc:	test	eax, eax
0x8ede:	mov	rdi, rbx
0x8ee1:	js	0x8f37


0x8f37:	pop	rbx
0x8f38:	pop	rbp
0x8f39:	pop	r12
0x8f3b:	jmp	0x1d50


0x8ee3:	call	0x1f90


0x1d50:	jmp	qword ptr [rip + 0x20c092]




0x8ee8:	test	eax, eax
0x8eea:	jne	0x8f18


0x8eec:	mov	rdi, rbx
0x8eef:	call	0x91d0


0x8f18:	mov	rdi, rbx
0x8f1b:	call	0x1f20


0x8f20:	xor	esi, esi
0x8f22:	mov	edx, 1
0x8f27:	mov	edi, eax
0x8f29:	call	0x1e30


0x92a7:	cmp	rax, -3
0x92ab:	mov	rbp, rax
0x92ae:	jbe	0x92d0


0x92d0:	mov	rdx, qword ptr [rsp + 8]
0x92d5:	xor	rdx, qword ptr fs:[0x28]
0x92de:	mov	rax, rbp
0x92e1:	jne	0x92ee


0x92b0:	test	r12, r12
0x92b3:	je	0x92d0


0x92e3:	add	rsp, 0x18
0x92e7:	pop	rbx
0x92e8:	pop	rbp
0x92e9:	pop	r12
0x92eb:	pop	r13
0x92ed:	ret	


0x92ee:	call	0x1da0


0x92b5:	xor	edi, edi
0x92b7:	call	0x9420


0x930c:	mov	ebx, dword ptr [rbp]
0x930f:	mov	rdi, rbp
0x9312:	mov	r12, rax
0x9315:	call	0x8ed0


0x938c:	test	rax, rax
0x938f:	mov	rbx, rax
0x9392:	je	0x93a1


0x93a1:	mov	rax, rbx
0x93a4:	pop	rbx
0x93a5:	pop	rbp
0x93a6:	pop	r12
0x93a8:	ret	


0x9394:	mov	rdi, rax
0x9397:	call	0x1f20


0x939c:	cmp	eax, 2
0x939f:	jbe	0x93b0


0x93b0:	mov	edi, eax
0x93b2:	call	0x94c0


0x744e:	test	rax, rax
0x7451:	mov	r13, rax
0x7454:	je	0x7658


0x7658:	xor	ebx, ebx
0x765a:	jmp	0x7497


0x745a:	mov	edi, 0x1038
0x745f:	call	0x86f0


0x7464:	mov	rbx, rax
0x7467:	mov	qword ptr [rax], r13
0x746a:	lea	rax, [rip - 0xc1]
0x7471:	cmp	rbp, 0x1000
0x7478:	mov	ecx, 0x1000
0x747d:	lea	rsi, [rbx + 0x18]
0x7481:	cmovbe	rcx, rbp
0x7485:	mov	qword ptr [rbx + 8], rax
0x7489:	mov	qword ptr [rbx + 0x10], r12
0x748d:	xor	edx, edx
0x748f:	mov	rdi, r13
0x7492:	call	0x1ff0


0x1ff0:	jmp	qword ptr [rip + 0x20bf42]




0x2197:	lea	rsi, [rip + 0x7583]
0x219e:	lea	rdi, [rip + 0x7553]
0x21a5:	call	0x1d60


0x1d60:	jmp	qword ptr [rip + 0x20c08a]




0x942b:	mov	rdx, rax
0x942e:	mov	eax, 1
0x9433:	test	rdx, rdx
0x9436:	je	0x9455


0x9455:	add	rsp, 8
0x9459:	ret	


0x9438:	lea	rdi, [rip + 0x1dac]
0x943f:	mov	ecx, 2
0x9444:	mov	rsi, rdx
0x9447:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x9447:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x9449:	seta	cl
0x944c:	sbb	cl, 0
0x944f:	xor	eax, eax
0x9451:	test	cl, cl
0x9453:	jne	0x9460


0x9460:	lea	rdi, [rip + 0x1d86]
0x9467:	mov	ecx, 6
0x946c:	mov	rsi, rdx
0x946f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x946f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x9471:	seta	al
0x9474:	sbb	al, 0
0x9476:	test	al, al
0x9478:	setne	al
0x947b:	add	rsp, 8
0x947f:	ret	


0x92bc:	test	al, al
0x92be:	jne	0x92d0


0x92c0:	movzx	eax, byte ptr [r13]
0x92c5:	mov	ebp, 1
0x92ca:	mov	dword ptr [rbx], eax
0x92cc:	nop	dword ptr [rax]
0x92d0:	mov	rdx, qword ptr [rsp + 8]
0x92d5:	xor	rdx, qword ptr fs:[0x28]
0x92de:	mov	rax, rbp
0x92e1:	jne	0x92ee


0x948e:	test	rax, rax
0x9491:	je	0x94b0


0x94b0:	lea	rax, [rip + 0x1d3c]
0x94b7:	add	rsp, 8
0x94bb:	ret	


0x9493:	cmp	byte ptr [rax], 0
0x9496:	lea	rdx, [rip + 0x1d56]
0x949d:	cmove	rax, rdx
0x94a1:	add	rsp, 8
0x94a5:	ret	


0x5510:	movzx	edx, byte ptr [rax]
0x5513:	and	edx, 0xffffffdf
0x5516:	cmp	dl, 0x55
0x5519:	je	0x5590


0x5590:	movzx	edx, byte ptr [rax + 1]
0x5594:	and	edx, 0xffffffdf
0x5597:	cmp	dl, 0x54
0x559a:	jne	0x5520


0x551b:	cmp	dl, 0x47
0x551e:	je	0x5540


0x559c:	movzx	edx, byte ptr [rax + 2]
0x55a0:	and	edx, 0xffffffdf
0x55a3:	cmp	dl, 0x46
0x55a6:	jne	0x5520


0x5520:	lea	rax, [rip + 0x533c]
0x5527:	lea	rdx, [rip + 0x5337]
0x552e:	cmp	ebx, 9
0x5531:	cmovne	rax, rdx
0x5535:	add	rsp, 8
0x5539:	pop	rbx
0x553a:	pop	rbp
0x553b:	ret	


0x5540:	movzx	edx, byte ptr [rax + 1]
0x5544:	and	edx, 0xffffffdf
0x5547:	cmp	dl, 0x42
0x554a:	jne	0x5520


0x55ac:	cmp	byte ptr [rax + 3], 0x2d
0x55b0:	jne	0x5520


0x554c:	cmp	byte ptr [rax + 2], 0x31
0x5550:	jne	0x5520


0x55b6:	cmp	byte ptr [rax + 4], 0x38
0x55ba:	jne	0x5520


0x5552:	cmp	byte ptr [rax + 3], 0x38
0x5556:	jne	0x5520


0x55c0:	cmp	byte ptr [rax + 5], 0
0x55c4:	jne	0x5520


0x5558:	cmp	byte ptr [rax + 4], 0x30
0x555c:	jne	0x5520


0x55ca:	cmp	byte ptr [rbp], 0x60
0x55ce:	lea	rax, [rip + 0x527f]
0x55d5:	lea	rdx, [rip + 0x527c]
0x55dc:	cmovne	rax, rdx
0x55e0:	add	rsp, 8
0x55e4:	pop	rbx
0x55e5:	pop	rbp
0x55e6:	ret	


0x555e:	cmp	byte ptr [rax + 5], 0x33
0x5562:	jne	0x5520


0x5564:	cmp	byte ptr [rax + 6], 0x30
0x5568:	jne	0x5520


0x556a:	cmp	byte ptr [rax + 7], 0
0x556e:	jne	0x5520


0x5570:	cmp	byte ptr [rbp], 0x60
0x5574:	lea	rax, [rip + 0x52e1]
0x557b:	lea	rdx, [rip + 0x52de]
0x5582:	cmovne	rax, rdx
0x5586:	add	rsp, 8
0x558a:	pop	rbx
0x558b:	pop	rbp
0x558c:	ret	


0x21aa:	lea	rdi, [rip + 0x7547]
0x21b1:	call	0x1d40


0x1d40:	jmp	qword ptr [rip + 0x20c09a]




0x869a:	lea	rsi, [rip + 0x273b]
0x86a1:	mov	edx, 5
0x86a6:	xor	edi, edi
0x86a8:	call	0x1d70


0x86ad:	lea	rcx, [rip + 0x1dbc]
0x86b4:	lea	rdx, [rip + 0x1039]
0x86bb:	mov	rsi, rax
0x86be:	mov	edi, 1
0x86c3:	xor	eax, eax
0x86c5:	call	0x1fe0


0x86ca:	mov	rbx, qword ptr [rip + 0x2059d7]
0x86d1:	lea	rsi, [rip + 0x2930]
0x86d8:	xor	edi, edi
0x86da:	mov	edx, 5
0x86df:	call	0x1d70


0x86e4:	mov	rsi, rbx
0x86e7:	mov	rdi, rax
0x86ea:	pop	rbx
0x86eb:	jmp	0x1eb0


0x3c9d:	mov	rbx, qword ptr [rip + 0x20a404]
0x3ca4:	lea	rsi, [rip + 0x5c65]
0x3cab:	mov	edx, 5
0x3cb0:	xor	edi, edi
0x3cb2:	call	0x1d70


0x3cb7:	mov	rsi, rbx
0x3cba:	mov	rdi, rax
0x3cbd:	call	0x1eb0


0x3cc2:	mov	rbx, qword ptr [rip + 0x20a3df]
0x3cc9:	lea	rsi, [rip + 0x5cc8]
0x3cd0:	mov	edx, 5
0x3cd5:	xor	edi, edi
0x3cd7:	call	0x1d70


0x3cdc:	mov	rsi, rbx
0x3cdf:	mov	rdi, rax
0x3ce2:	call	0x1eb0


0x3ce7:	mov	rbx, qword ptr [rip + 0x20a3ba]
0x3cee:	lea	rsi, [rip + 0x5ccb]
0x3cf5:	mov	edx, 5
0x3cfa:	xor	edi, edi
0x3cfc:	call	0x1d70


0x3d01:	mov	rsi, rbx
0x3d04:	mov	rdi, rax
0x3d07:	call	0x1eb0


0x3d0c:	lea	rsi, [rip + 0x5cfd]
0x3d13:	xor	edi, edi
0x3d15:	mov	edx, 5
0x3d1a:	call	0x1d70


0x3d1f:	mov	edx, 3
0x3d24:	mov	rsi, rax
0x3d27:	mov	edi, 1
0x3d2c:	xor	eax, eax
0x3d2e:	call	0x1fe0


0x3d33:	mov	rbx, qword ptr [rip + 0x20a36e]
0x3d3a:	lea	rsi, [rip + 0x5dd7]
0x3d41:	mov	edx, 5
0x3d46:	xor	edi, edi
0x3d48:	call	0x1d70


0x3d4d:	mov	rsi, rbx
0x3d50:	mov	rdi, rax
0x3d53:	call	0x1eb0


0x3d58:	mov	rbx, qword ptr [rip + 0x20a349]
0x3d5f:	lea	rsi, [rip + 0x5f22]
0x3d66:	mov	edx, 5
0x3d6b:	xor	edi, edi
0x3d6d:	call	0x1d70


0x3d72:	mov	rsi, rbx
0x3d75:	mov	rdi, rax
0x3d78:	call	0x1eb0


0x3d7d:	mov	rbx, qword ptr [rip + 0x20a324]
0x3d84:	lea	rsi, [rip + 0x5f2d]
0x3d8b:	mov	edx, 5
0x3d90:	xor	edi, edi
0x3d92:	call	0x1d70


0x3d97:	mov	rsi, rbx
0x3d9a:	mov	rdi, rax
0x3d9d:	call	0x1eb0


0x3da2:	mov	rbx, qword ptr [rip + 0x20a2ff]
0x3da9:	lea	rsi, [rip + 0x5f40]
0x3db0:	mov	edx, 5
0x3db5:	xor	edi, edi
0x3db7:	call	0x1d70


0x3dbc:	mov	rsi, rbx
0x3dbf:	mov	rdi, rax
0x3dc2:	call	0x1eb0


0x3dc7:	mov	rbx, qword ptr [rip + 0x20a2da]
0x3dce:	lea	rsi, [rip + 0x60fb]
0x3dd5:	mov	edx, 5
0x3dda:	xor	edi, edi
0x3ddc:	call	0x1d70


0x3de1:	mov	rsi, rbx
0x3de4:	mov	rdi, rax
0x3de7:	call	0x1eb0


0x3dec:	mov	rbx, qword ptr [rip + 0x20a2b5]
0x3df3:	lea	rsi, [rip + 0x6246]
0x3dfa:	xor	edi, edi
0x3dfc:	mov	edx, 5
0x3e01:	call	0x1d70


0x3e06:	mov	rsi, rbx
0x3e09:	mov	rdi, rax
0x3e0c:	call	0x1eb0


0x3e11:	mov	rbx, qword ptr [rip + 0x20a290]
0x3e18:	lea	rsi, [rip + 0x6361]
0x3e1f:	mov	edx, 5
0x3e24:	xor	edi, edi
0x3e26:	call	0x1d70


0x3e2b:	mov	rsi, rbx
0x3e2e:	mov	rdi, rax
0x3e31:	call	0x1eb0


0x3e36:	mov	rbx, qword ptr [rip + 0x20a26b]
0x3e3d:	lea	rsi, [rip + 0x63ac]
0x3e44:	mov	edx, 5
0x3e49:	xor	edi, edi
0x3e4b:	call	0x1d70


0x3e50:	mov	rsi, rbx
0x3e53:	mov	rdi, rax
0x3e56:	call	0x1eb0


0x3e5b:	mov	rbx, qword ptr [rip + 0x20a246]
0x3e62:	lea	rsi, [rip + 0x655f]
0x3e69:	mov	edx, 5
0x3e6e:	xor	edi, edi
0x3e70:	call	0x1d70


0x3e75:	mov	rsi, rbx
0x3e78:	mov	rdi, rax
0x3e7b:	lea	rbx, [rip + 0x57f6]
0x3e82:	call	0x1eb0


0x3e87:	lea	rax, [rip + 0x57f0]
0x3e8e:	lea	rcx, [rip + 0x582a]
0x3e95:	mov	qword ptr [rsp + 0x60], 0
0x3e9e:	mov	qword ptr [rsp + 0x68], 0
0x3ea7:	mov	rdx, rsp
0x3eaa:	mov	qword ptr [rsp], rax
0x3eae:	lea	rax, [rip + 0x57cb]
0x3eb5:	mov	qword ptr [rsp + 0x30], rcx
0x3eba:	lea	rcx, [rip + 0x5808]
0x3ec1:	mov	qword ptr [rsp + 8], rax
0x3ec6:	lea	rax, [rip + 0x582b]
0x3ecd:	mov	qword ptr [rsp + 0x40], rcx
0x3ed2:	lea	rcx, [rip + 0x57fa]
0x3ed9:	mov	qword ptr [rsp + 0x10], rax
0x3ede:	lea	rax, [rip + 0x57ab]
0x3ee5:	mov	qword ptr [rsp + 0x50], rcx
0x3eea:	mov	qword ptr [rsp + 0x18], rax
0x3eef:	lea	rax, [rip + 0x57b0]
0x3ef6:	mov	qword ptr [rsp + 0x20], rax
0x3efb:	lea	rax, [rip + 0x57ae]
0x3f02:	mov	qword ptr [rsp + 0x28], rax
0x3f07:	mov	qword ptr [rsp + 0x38], rax
0x3f0c:	mov	qword ptr [rsp + 0x48], rax
0x3f11:	mov	qword ptr [rsp + 0x58], rax
0x3f16:	nop	word ptr cs:[rax + rax]
0x3f20:	add	rdx, 0x10
0x3f24:	mov	rdi, qword ptr [rdx]
0x3f27:	test	rdi, rdi
0x3f2a:	je	0x3f3f


0x3f3f:	mov	r12, qword ptr [rdx + 8]
0x3f43:	xor	edi, edi
0x3f45:	mov	edx, 5
0x3f4a:	lea	rsi, [rip + 0x578c]
0x3f51:	test	r12, r12
0x3f54:	je	0x401b


0x3f2c:	mov	ecx, 6
0x3f31:	mov	rsi, rbx
0x3f34:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x401b:	call	0x1d70


0x3f5a:	call	0x1d70


0x3f34:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3f36:	seta	al
0x3f39:	sbb	al, 0
0x3f3b:	test	al, al
0x3f3d:	jne	0x3f20


0x3f20:	add	rdx, 0x10
0x3f24:	mov	rdi, qword ptr [rdx]
0x3f27:	test	rdi, rdi
0x3f2a:	je	0x3f3f


0x3f5f:	lea	rcx, [rip + 0x650a]
0x3f66:	lea	rdx, [rip + 0x5787]
0x3f6d:	mov	rsi, rax
0x3f70:	mov	edi, 1
0x3f75:	xor	eax, eax
0x3f77:	call	0x1fe0


0x3f7c:	xor	esi, esi
0x3f7e:	mov	edi, 5
0x3f83:	call	0x1fd0


0x3f88:	test	rax, rax
0x3f8b:	je	0x3fa9


0x3fa9:	lea	rsi, [rip + 0x5756]
0x3fb0:	xor	edi, edi
0x3fb2:	mov	edx, 5
0x3fb7:	call	0x1d70


0x3f8d:	lea	rsi, [rip + 0x576e]
0x3f94:	mov	edx, 3
0x3f99:	mov	rdi, rax
0x3f9c:	call	0x1ca0


0x3fbc:	lea	rcx, [rip + 0x56b5]
0x3fc3:	lea	rdx, [rip + 0x64a6]
0x3fca:	mov	rsi, rax
0x3fcd:	mov	edi, 1
0x3fd2:	xor	eax, eax
0x3fd4:	call	0x1fe0


0x3fd9:	cmp	r12, rbx
0x3fdc:	lea	rcx, [rip + 0x56b7]
0x3fe3:	lea	rbx, [rip + 0x6dc6]
0x3fea:	cmove	rbx, rcx
0x3fee:	lea	rsi, [rip + 0x64eb]
0x3ff5:	xor	edi, edi
0x3ff7:	mov	edx, 5
0x3ffc:	call	0x1d70


0x4001:	mov	rcx, rbx
0x4004:	mov	rsi, rax
0x4007:	mov	rdx, r12
0x400a:	mov	edi, 1
0x400f:	xor	eax, eax
0x4011:	call	0x1fe0


0x4016:	jmp	0x3c76


0x4020:	lea	rcx, [rip + 0x6449]
0x4027:	lea	rdx, [rip + 0x56c6]
0x402e:	mov	rsi, rax
0x4031:	mov	edi, 1
0x4036:	xor	eax, eax
0x4038:	call	0x1fe0


0x403d:	xor	esi, esi
0x403f:	mov	edi, 5
0x4044:	call	0x1fd0


0x4049:	test	rax, rax
0x404c:	je	0x4066


0x4066:	lea	rsi, [rip + 0x5699]
0x406d:	mov	edx, 5
0x4072:	xor	edi, edi
0x4074:	lea	r12, [rip + 0x55fd]
0x407b:	lea	rbx, [rip + 0x5618]
0x4082:	call	0x1d70


0x404e:	lea	rsi, [rip + 0x56ad]
0x4055:	mov	edx, 3
0x405a:	mov	rdi, rax
0x405d:	call	0x1ca0


0x4087:	lea	rcx, [rip + 0x55ea]
0x408e:	lea	rdx, [rip + 0x63db]
0x4095:	mov	rsi, rax
0x4098:	mov	edi, 1
0x409d:	xor	eax, eax
0x409f:	call	0x1fe0


0x40a4:	jmp	0x3fee


0x3fee:	lea	rsi, [rip + 0x64eb]
0x3ff5:	xor	edi, edi
0x3ff7:	mov	edx, 5
0x3ffc:	call	0x1d70


0x42cc:	mov	r15, qword ptr [r14]
0x42cf:	test	r15, r15
0x42d2:	je	0x4368


0x4368:	mov	rdi, qword ptr [rip + 0x209d71]
0x436f:	mov	rax, qword ptr [rdi + 0x28]
0x4373:	cmp	rax, qword ptr [rdi + 0x30]
0x4377:	jae	0x4398


0x42d8:	xor	r13d, r13d
0x42db:	xor	ebx, ebx
0x42dd:	jmp	0x4318


0x4379:	lea	rdx, [rax + 1]
0x437d:	mov	qword ptr [rdi + 0x28], rdx
0x4381:	mov	byte ptr [rax], 0xa
0x4384:	add	rsp, 8
0x4388:	pop	rbx
0x4389:	pop	rbp
0x438a:	pop	r12
0x438c:	pop	r13
0x438e:	pop	r14
0x4390:	pop	r15
0x4392:	ret	


0x4398:	add	rsp, 8
0x439c:	mov	esi, 0xa
0x43a1:	pop	rbx
0x43a2:	pop	rbp
0x43a3:	pop	r12
0x43a5:	pop	r13
0x43a7:	pop	r14
0x43a9:	pop	r15
0x43ab:	jmp	0x1e00


0x4318:	test	rbx, rbx
0x431b:	je	0x42e0


0x1e00:	jmp	qword ptr [rip + 0x20c03a]


0x42e0:	mov	rdi, r15
0x42e3:	add	rbx, 1
0x42e7:	mov	r13, rbp
0x42ea:	call	0x7170


0x431d:	mov	rdx, r12
0x4320:	mov	rsi, rbp
0x4323:	mov	rdi, r13
0x4326:	call	0x1ea0




0x432b:	test	eax, eax
0x432d:	jne	0x42e0


0x432f:	mov	rdi, r15
0x4332:	add	rbx, 1
0x4336:	add	rbp, r12
0x4339:	call	0x7170


0x815c:	cmp	r12, 9
0x8160:	ja	0x84a0


0x8166:	lea	rdx, [rip + 0x2edf]
0x816d:	movsxd	rax, dword ptr [rdx + r12*4]
0x8171:	add	rax, rdx
0x8174:	jmp	rax


0x84a0:	mov	r10, qword ptr [rbx + 0x40]
0x84a4:	mov	r9, qword ptr [rbx + 0x38]
0x84a8:	mov	edx, 5
0x84ad:	mov	rax, qword ptr [rbx + 0x10]
0x84b1:	mov	r8, qword ptr [rbx + 8]
0x84b5:	lea	rsi, [rip + 0x2b0c]
0x84bc:	mov	r13, qword ptr [rbx + 0x30]
0x84c0:	mov	r12, qword ptr [rbx + 0x28]
0x84c4:	mov	r15, qword ptr [rbx + 0x20]
0x84c8:	mov	r14, qword ptr [rbx + 0x18]
0x84cc:	mov	qword ptr [rsp + 0x18], r10
0x84d1:	mov	qword ptr [rsp + 0x10], r9
0x84d6:	mov	qword ptr [rsp], rax
0x84da:	mov	qword ptr [rsp + 8], r8
0x84df:	mov	rbx, qword ptr [rbx]
0x84e2:	jmp	0x8272


0x8272:	xor	edi, edi
0x8274:	call	0x1d70


0x8279:	mov	r10, qword ptr [rsp + 0x18]
0x827e:	push	r10
0x8280:	jmp	0x81c4


0x81c4:	mov	r9, qword ptr [rsp + 0x18]
0x81c9:	mov	rdx, rax
0x81cc:	mov	rcx, rbx
0x81cf:	mov	esi, 1
0x81d4:	mov	rdi, rbp
0x81d7:	xor	eax, eax
0x81d9:	push	r9
0x81db:	push	r13
0x81dd:	push	r12
0x81df:	push	r15
0x81e1:	push	r14
0x81e3:	mov	r9, qword ptr [rsp + 0x30]
0x81e8:	mov	r8, qword ptr [rsp + 0x38]
0x81ed:	call	0x20e0


0x81f2:	add	rsp, 0x30
0x81f6:	add	rsp, 0x28
0x81fa:	pop	rbx
0x81fb:	pop	rbp
0x81fc:	pop	r12
0x81fe:	pop	r13
0x8200:	pop	r14
0x8202:	pop	r15
0x8204:	ret	


0x8970:	call	0x1c60


0x374d:	mov	byte ptr [rsp + 0x27], 0
0x3752:	jmp	0x35d8


0x35d3:	mov	byte ptr [rsp + 0x27], 0
0x35d8:	mov	rcx, qword ptr [rsp + 0x108]
0x35e0:	xor	rcx, qword ptr fs:[0x28]
0x35e9:	movzx	eax, byte ptr [rsp + 0x27]
0x35ee:	jne	0x3c11


0x38b4:	jmp	0x35d8


0x2c6c:	mov	dword ptr [r12], ebp
0x2c70:	add	rsp, 8
0x2c74:	mov	eax, 0xffffffff
0x2c79:	pop	rbx
0x2c7a:	pop	rbp
0x2c7b:	pop	r12
0x2c7d:	pop	r13
0x2c7f:	ret	


0x4062:	test	eax, eax
0x4064:	jne	0x40a9


0x40a9:	lea	r12, [rip + 0x55c8]
0x40b0:	mov	r13, qword ptr [rip + 0x209ff1]
0x40b7:	lea	rsi, [rip + 0x63da]
0x40be:	xor	edi, edi
0x40c0:	mov	edx, 5
0x40c5:	call	0x1d70


0x40ca:	mov	rsi, r13
0x40cd:	mov	rdi, rax
0x40d0:	call	0x1eb0


0x40d5:	jmp	0x3fa9


0x3fa1:	test	eax, eax
0x3fa3:	jne	0x40b0


0x40b0:	mov	r13, qword ptr [rip + 0x209ff1]
0x40b7:	lea	rsi, [rip + 0x63da]
0x40be:	xor	edi, edi
0x40c0:	mov	edx, 5
0x40c5:	call	0x1d70


0x4197:	test	eax, eax
0x4199:	jne	0x4177


0x419b:	mov	rdi, r14
0x419e:	call	0x1d90


0x4177:	add	rbx, 1
0x417b:	add	rbp, r13
0x417e:	mov	r14, qword ptr [r15 + rbx*8]
0x4182:	test	r14, r14
0x4185:	je	0x41c8


0x41c8:	cmp	byte ptr [rsp + 0x17], 0
0x41cd:	mov	rax, -2
0x41d4:	cmove	rax, qword ptr [rsp]
0x41d9:	mov	qword ptr [rsp], rax
0x41dd:	mov	rax, qword ptr [rsp]
0x41e1:	add	rsp, 0x28
0x41e5:	pop	rbx
0x41e6:	pop	rbp
0x41e7:	pop	r12
0x41e9:	pop	r13
0x41eb:	pop	r14
0x41ed:	pop	r15
0x41ef:	ret	


0x41a3:	cmp	rax, r12
0x41a6:	je	0x4200


0x4200:	mov	qword ptr [rsp], rbx
0x4204:	jmp	0x41dd


0x41a8:	cmp	qword ptr [rsp], -1
0x41ad:	jne	0x4140


0x41af:	mov	qword ptr [rsp], rbx
0x41b3:	add	rbx, 1
0x41b7:	add	rbp, r13
0x41ba:	mov	r14, qword ptr [r15 + rbx*8]
0x41be:	test	r14, r14
0x41c1:	jne	0x4187


0x4140:	mov	rax, qword ptr [rsp + 0x18]
0x4145:	test	rax, rax
0x4148:	je	0x41f0


0x41f0:	mov	byte ptr [rsp + 0x17], 1
0x41f5:	jmp	0x4177


0x414e:	mov	rdi, qword ptr [rsp]
0x4152:	mov	rdx, r13
0x4155:	mov	rsi, rbp
0x4158:	imul	rdi, r13
0x415c:	add	rdi, rax
0x415f:	call	0x1ea0


0x4164:	test	eax, eax
0x4166:	movzx	eax, byte ptr [rsp + 0x17]
0x416b:	mov	ecx, 1
0x4170:	cmovne	eax, ecx
0x4173:	mov	byte ptr [rsp + 0x17], al
0x4177:	add	rbx, 1
0x417b:	add	rbp, r13
0x417e:	mov	r14, qword ptr [r15 + rbx*8]
0x4182:	test	r14, r14
0x4185:	je	0x41c8


0x4cb1:	mov	ecx, r12d
0x4cb4:	mov	dword ptr [rsp + 0x20], ebx
0x4cb8:	mov	r12, r14
0x4cbb:	mov	rbx, r13
0x4cbe:	mov	r8, qword ptr [rsp + 0x48]
0x4cc3:	mov	r15, qword ptr [rsp + 0x38]
0x4cc8:	mov	r13, qword ptr [rsp + 0x40]
0x4ccd:	mov	r14d, ecx
0x4cd0:	jmp	0x4d12


0x4d12:	movzx	eax, byte ptr [r15]
0x4d16:	test	al, al
0x4d18:	je	0x4d27


0x4d27:	cmp	rbp, r12
0x4d2a:	jbe	0x4cd8


0x4d1a:	cmp	al, 0x7f
0x4d1c:	movzx	ebp, al
0x4d1f:	cmovae	rbp, r12
0x4d23:	add	r15, 1
0x4d27:	cmp	rbp, r12
0x4d2a:	jbe	0x4cd8


0x4cd8:	mov	rax, qword ptr [rsp + 0x18]
0x4cdd:	sub	r12, rbp
0x4ce0:	sub	r8, rbp
0x4ce3:	mov	rdi, r8
0x4ce6:	mov	rdx, rbp
0x4ce9:	lea	rsi, [rax + r12]
0x4ced:	call	0x1f00


0x4d2c:	mov	eax, r14d
0x4d2f:	mov	r15, r8
0x4d32:	mov	r14, r12
0x4d35:	mov	rsi, qword ptr [rsp + 0x18]
0x4d3a:	sub	r15, r14
0x4d3d:	mov	rdx, r14
0x4d40:	mov	rdi, r15
0x4d43:	mov	ebx, dword ptr [rsp + 0x20]
0x4d47:	mov	r12d, eax
0x4d4a:	call	0x1f00


0x4d4f:	jmp	0x4b9a


0x4cf2:	test	r12, r12
0x4cf5:	mov	r8, rax
0x4cf8:	je	0x5208


0x5208:	mov	ebx, dword ptr [rsp + 0x20]
0x520c:	mov	r15, rax
0x520f:	mov	r12d, r14d
0x5212:	jmp	0x4b9a


0x4cfe:	sub	r8, r13
0x4d01:	mov	rdx, r13
0x4d04:	mov	rsi, rbx
0x4d07:	mov	rdi, r8
0x4d0a:	call	0x1f00


0x4d0f:	mov	r8, rax
0x4d12:	movzx	eax, byte ptr [r15]
0x4d16:	test	al, al
0x4d18:	je	0x4d27


0x49d6:	mov	rdi, r14
0x49d9:	call	0x1d90


0x49de:	pop	rcx
0x49df:	pop	rsi
0x49e0:	cmp	rax, qword ptr [rsp + 0x18]
0x49e5:	mov	r14, rax
0x49e8:	fld	xword ptr [rsp + 0x20]
0x49ec:	ja	0x4f98


0x49f2:	test	r12b, 8
0x49f6:	je	0x4b60


0x4f98:	fld	dword ptr [rip + 0x5856]
0x4f9e:	fmul	st(1), st(0)
0x4fa0:	fld	xword ptr [rip + 0x585a]
0x4fa6:	fucomip	st(2)
0x4fa8:	jbe	0x4f53


0x4b60:	fstp	st(0)
0x4b62:	jmp	0x4b70


0x49fc:	mov	rax, qword ptr [rsp]
0x4a00:	cmp	byte ptr [rax + r14 - 1], 0x30
0x4a06:	jne	0x4b68


0x4f53:	fdivp	st(1)
0x4f55:	sub	rsp, 0x10
0x4f59:	lea	rcx, [rip + 0x581e]
0x4f60:	mov	r14, qword ptr [rsp + 0x10]
0x4f65:	mov	rdx, -1
0x4f6c:	mov	esi, 1
0x4f71:	xor	eax, eax
0x4f73:	xor	ebp, ebp
0x4f75:	mov	rdi, r14
0x4f78:	fstp	xword ptr [rsp]
0x4f7b:	call	0x2120


0x4faa:	fstp	dword ptr [rsp + 0x18]
0x4fae:	sub	rsp, 0x10
0x4fb2:	mov	edi, r15d
0x4fb5:	fstp	xword ptr [rsp]
0x4fb8:	call	0x4740


0x4b70:	mov	r15, qword ptr [rsp + 8]
0x4b75:	mov	rsi, qword ptr [rsp]
0x4b79:	mov	rdx, r14
0x4b7c:	sub	r15, r14
0x4b7f:	sub	r14, rbp
0x4b82:	mov	rdi, r15
0x4b85:	call	0x2010


0x4a0c:	fld	dword ptr [rip + 0x5de2]
0x4a12:	cmp	r15d, 1
0x4a16:	fmul	st(1), st(0)
0x4a18:	jne	0x4fa0


0x4b68:	fstp	st(0)
0x4b6a:	nop	word ptr [rax + rax]
0x4b70:	mov	r15, qword ptr [rsp + 8]
0x4b75:	mov	rsi, qword ptr [rsp]
0x4b79:	mov	rdx, r14
0x4b7c:	sub	r15, r14
0x4b7f:	sub	r14, rbp
0x4b82:	mov	rdi, r15
0x4b85:	call	0x2010


0x2010:	jmp	qword ptr [rip + 0x20bf32]


0x4a1e:	jmp	0x4f53


0x4fa0:	fld	xword ptr [rip + 0x585a]
0x4fa6:	fucomip	st(2)
0x4fa8:	jbe	0x4f53




0x4fbd:	pop	rbp
0x4fbe:	pop	r14
0x4fc0:	fld	dword ptr [rsp + 0x18]
0x4fc4:	jmp	0x4f53


0x4f80:	mov	rdi, r14
0x4f83:	call	0x1d90


0x4f88:	pop	r10
0x4f8a:	mov	r14, rax
0x4f8d:	pop	r11
0x4f8f:	jmp	0x4b70


0x4f2f:	mov	rdi, r14
0x4f32:	call	0x1d90


0x4f37:	mov	r14, rax
0x4f3a:	pop	rax
0x4f3b:	pop	rdx
0x4f3c:	cmp	r14, qword ptr [rsp + 0x18]
0x4f41:	fld	xword ptr [rsp + 0x20]
0x4f45:	jbe	0x49f2


0x4f4b:	fld	dword ptr [rip + 0x58a3]
0x4f51:	fmul	st(1), st(0)
0x4f53:	fdivp	st(1)
0x4f55:	sub	rsp, 0x10
0x4f59:	lea	rcx, [rip + 0x581e]
0x4f60:	mov	r14, qword ptr [rsp + 0x10]
0x4f65:	mov	rdx, -1
0x4f6c:	mov	esi, 1
0x4f71:	xor	eax, eax
0x4f73:	xor	ebp, ebp
0x4f75:	mov	rdi, r14
0x4f78:	fstp	xword ptr [rsp]
0x4f7b:	call	0x2120


0x4b47:	mov	rdi, rbx
0x4b4a:	mov	ebx, 0xffffffff
0x4b4f:	call	0x1d90


0x4b54:	pop	rsi
0x4b55:	pop	rdi
0x4b56:	mov	r14, rax
0x4b59:	jmp	0x4b70


0x7f15:	mov	r15d, eax
0x7f18:	jmp	0x7e7a


0x752d:	mov	edi, r15d
0x7530:	mov	rbp, rax
0x7533:	call	0x1e90


0x759d:	movdqa	xmm0, xmmword ptr [rsp + 0x10]
0x75a3:	movups	xmmword ptr [rbx + 0x20], xmm0
0x75a7:	call	0x1d20


0x1d20:	jmp	qword ptr [rip + 0x20c0aa]




0x396f:	test	eax, eax
0x3971:	je	0x3baf


0x3977:	mov	eax, dword ptr [rsp + 0x88]
0x397e:	and	eax, 0xf000
0x3983:	cmp	eax, 0x8000
0x3988:	jne	0x3baf


0x398e:	lea	rsi, [rip + 0x5cce]
0x3995:	mov	edx, 5
0x399a:	xor	edi, edi
0x399c:	call	0x1d70


0x39a1:	mov	rbx, rax
0x39a4:	call	0x1c70


0x39a9:	mov	rcx, qword ptr [rsp]
0x39ad:	mov	esi, dword ptr [rax]
0x39af:	mov	rdx, rbx
0x39b2:	xor	edi, edi
0x39b4:	xor	eax, eax
0x39b6:	call	0x2020


0x8f2e:	cmp	rax, -1
0x8f32:	jne	0x8eec


0x8f34:	mov	rdi, rbx
0x8f37:	pop	rbx
0x8f38:	pop	rbp
0x8f39:	pop	r12
0x8f3b:	jmp	0x1d50


0x9250:	cmp	rax, -1
0x9254:	je	0x9262


0x9262:	pop	rbx
0x9263:	pop	rbp
0x9264:	pop	r12
0x9266:	ret	


0x9256:	and	dword ptr [rbx], 0xffffffef
0x9259:	mov	qword ptr [rbx + 0x90], rax
0x9260:	xor	eax, eax
0x9262:	pop	rbx
0x9263:	pop	rbp
0x9264:	pop	r12
0x9266:	ret	


0x3b7b:	mov	r12, rax
0x3b7e:	mov	rax, qword ptr [rbx + 8]
0x3b82:	test	r12, r12
0x3b85:	mov	qword ptr [rsp + 0x38], rax
0x3b8a:	jle	0x3bbd


0x3bbd:	test	rax, rax
0x3bc0:	jne	0x3b96


0x3b8c:	test	rax, rax
0x3b8f:	je	0x3bdb


0x3bc2:	mov	rdi, qword ptr [rsp + 0x30]
0x3bc7:	call	0x7200


0x3b96:	mov	qword ptr [rsp + 0x48], 0
0x3b9f:	jmp	0x369a


0x3bdb:	mov	rdi, qword ptr [rsp + 0x30]
0x3be0:	call	0x7200


0x3b91:	mov	qword ptr [rsp + 0x40], r12
0x3b96:	mov	qword ptr [rsp + 0x48], 0
0x3b9f:	jmp	0x369a


0x3be5:	mov	qword ptr [rsp + 0x40], r12
0x3bea:	mov	r14, rax
0x3bed:	jmp	0x3bcf


0x3bcf:	xor	edx, edx
0x3bd1:	mov	byte ptr [rsp + 0x18], 1
0x3bd6:	jmp	0x38e0


0x38e0:	mov	rax, qword ptr [rsp + 0x40]
0x38e5:	mov	r13, qword ptr [rsp + 0x28]
0x38ea:	mov	qword ptr [rsp + 0x40], 0
0x38f3:	mov	qword ptr [rsp + 0x68], rax
0x38f8:	lea	r12, [rsp + 0x68]
0x38fd:	xor	r15d, r15d
0x3900:	mov	rax, r12
0x3903:	mov	r12, r15
0x3906:	mov	r15, rbx
0x3909:	mov	rbx, rax
0x390c:	jmp	0x3951


0x3bcc:	mov	r14, rax
0x3bcf:	xor	edx, edx
0x3bd1:	mov	byte ptr [rsp + 0x18], 1
0x3bd6:	jmp	0x38e0


0x2d5a:	cmp	rax, 0
0x2d5e:	jle	0x3138


0x3138:	je	0x2e16


0x2d64:	call	0x1c70


0x2e16:	add	rbx, qword ptr [rsp + 0x30]
0x2e1b:	xor	edx, edx
0x2e1d:	mov	r11d, dword ptr [rsp + 0x20]
0x2e22:	mov	rax, rbx
0x2e25:	div	rbp
0x2e28:	sub	rbx, rdx
0x2e2b:	test	r11d, r11d
0x2e2e:	js	0x31e0


0x313e:	call	0x1c70


0x31e0:	mov	r10d, 0x6d6f
0x31e6:	mov	dword ptr [rsp + 0x79], 0x646e6172
0x31ee:	mov	byte ptr [rsp + 0x7f], 0
0x31f3:	mov	word ptr [rsp + 0x7d], r10w
0x31f9:	jmp	0x2ef0


0x2e34:	cmp	r15, r13
0x2e37:	jae	0x31d0


0x2ef0:	cmp	qword ptr [rsp + 0x888], 0
0x2ef9:	jne	0x3150


0x2e3d:	test	r15, r15
0x2e40:	js	0x31d0


0x31d0:	mov	r12, r13
0x31d3:	jmp	0x2e46


0x2eff:	lea	rax, [rip + 0x7eaa]
0x2f06:	mov	byte ptr [rsp + 0x10], 0
0x2f0b:	mov	qword ptr [rsp + 0x60], 0
0x2f14:	mov	qword ptr [rsp], 0
0x2f1c:	mov	r13, r15
0x2f1f:	mov	qword ptr [rsp + 0x58], rax
0x2f24:	test	r13, r13
0x2f27:	js	0x30f8


0x3150:	lea	rsi, [rip + 0x6465]
0x3157:	mov	edx, 5
0x315c:	xor	edi, edi
0x315e:	call	0x1d70


0x2e46:	mov	eax, dword ptr [rsp + 0x20]
0x2e4a:	mov	rbp, r12
0x2e4d:	mov	r13d, 3
0x2e53:	shr	rbp, 1
0x2e56:	and	eax, 0xfff
0x2e5b:	mov	edx, eax
0x2e5d:	shl	edx, 0xc
0x2e60:	or	eax, edx
0x2e62:	mov	edx, eax
0x2e64:	mov	byte ptr [rbx + 1], ah
0x2e67:	mov	byte ptr [rbx + 2], al
0x2e6a:	shr	edx, 4
0x2e6d:	cmp	rbp, 2
0x2e71:	mov	byte ptr [rbx], dl
0x2e73:	jbe	0x2e8f


0x30f8:	mov	edi, dword ptr [rsp + 0x20]
0x30fc:	mov	rbp, qword ptr [rsp + 0x18]
0x3101:	test	edi, edi
0x3103:	jns	0x2f60


0x2f2d:	mov	rax, qword ptr [rsp]
0x2f31:	mov	rbp, r13
0x2f34:	sub	rbp, rax
0x2f37:	cmp	rbp, qword ptr [rsp + 0x18]
0x2f3c:	jae	0x30f8


0x2e8f:	cmp	r12, r13
0x2e92:	ja	0x31b0


0x3109:	mov	rdi, qword ptr [rsp + 0x48]
0x310e:	mov	rdx, rbp
0x3111:	mov	rsi, rbx
0x3114:	call	0x7760


0x2f60:	lea	rax, [rsp + 0x5a0]
0x2f68:	xor	r15d, r15d
0x2f6b:	mov	qword ptr [rsp + 0x28], r13
0x2f70:	mov	qword ptr [rsp + 0x38], rax
0x2f75:	mov	rax, r13
0x2f78:	not	rax
0x2f7b:	shr	rax, 0x3f
0x2f7f:	mov	qword ptr [rsp + 0x40], rax
0x2f84:	jmp	0x2f9c


0x2f42:	test	rbp, rbp
0x2f45:	je	0x343a


0x2e98:	test	dword ptr [rsp + 0x20], 0x1000
0x2ea0:	je	0x2ebf


0x31b0:	mov	rdx, r12
0x31b3:	lea	rdi, [rbx + r13]
0x31b7:	mov	rsi, rbx
0x31ba:	sub	rdx, r13
0x31bd:	call	0x1f00


0x2f9c:	mov	rdx, rbp
0x2f9f:	lea	rsi, [rbx + r15]
0x2fa3:	mov	edi, r14d
0x2fa6:	sub	rdx, r15
0x2fa9:	call	0x1d10


0x343a:	mov	rsi, qword ptr [rsp + 8]
0x343f:	mov	edi, r14d
0x3442:	call	0x2bb0


0x2f4b:	cmp	r13, rax
0x2f4e:	jl	0x343a


0x2ebf:	movzx	eax, byte ptr [rbx + 2]
0x2ec3:	lea	rdi, [rsp + 0x79]
0x2ec8:	sub	rsp, 8
0x2ecc:	lea	rcx, [rip + 0x6741]
0x2ed3:	mov	edx, 7
0x2ed8:	mov	esi, 1
0x2edd:	push	rax
0x2ede:	movzx	r9d, byte ptr [rbx + 1]
0x2ee3:	xor	eax, eax
0x2ee5:	movzx	r8d, byte ptr [rbx]
0x2ee9:	call	0x2120


0x2ea2:	test	r12, r12
0x2ea5:	je	0x2ebf


0x1d10:	jmp	qword ptr [rip + 0x20c0b2]


0x2f54:	mov	edi, dword ptr [rsp + 0x20]
0x2f58:	test	edi, edi
0x2f5a:	js	0x3109


0x2ea7:	xor	eax, eax
0x2ea9:	nop	dword ptr [rax]
0x2eb0:	add	byte ptr [rbx + rax], 0x80
0x2eb4:	add	rax, 0x200
0x2eba:	cmp	r12, rax
0x2ebd:	ja	0x2eb0




0x2eb0:	add	byte ptr [rbx + rax], 0x80
0x2eb4:	add	rax, 0x200
0x2eba:	cmp	r12, rax
0x2ebd:	ja	0x2eb0


0x2eee:	pop	rax
0x2eef:	pop	rdx
0x2ef0:	cmp	qword ptr [rsp + 0x888], 0
0x2ef9:	jne	0x3150


0x3447:	test	eax, eax
0x3449:	je	0x34e8


0x34e8:	mov	rdi, qword ptr [rsp + 0x30]
0x34ed:	call	0x1c50


0x344f:	call	0x1c70


0x34f2:	movzx	eax, byte ptr [rsp + 0x10]
0x34f7:	jmp	0x2da7


0x2da7:	mov	rcx, qword ptr [rsp + 0x838]
0x2daf:	xor	rcx, qword ptr fs:[0x28]
0x2db8:	jne	0x34fc


0x2dbe:	add	rsp, 0x848
0x2dc5:	pop	rbx
0x2dc6:	pop	rbp
0x2dc7:	pop	r12
0x2dc9:	pop	r13
0x2dcb:	pop	r14
0x2dcd:	pop	r15
0x2dcf:	ret	


0x34fc:	call	0x1da0


0x3119:	jmp	0x2f60


0x31c2:	jmp	0x2e98


0x2e8a:	cmp	rbp, r13
0x2e8d:	jae	0x2e78


0x2e78:	lea	rdi, [rbx + r13]
0x2e7c:	mov	rdx, r13
0x2e7f:	mov	rsi, rbx
0x2e82:	add	r13, r13
0x2e85:	call	0x1f00


0x3163:	sub	rsp, 8
0x3167:	xor	esi, esi
0x3169:	xor	edi, edi
0x316b:	lea	rdx, [rsp + 0x81]
0x3173:	push	rdx
0x3174:	mov	r9, qword ptr [rsp + 0x898]
0x317c:	mov	rdx, rax
0x317f:	mov	r8, qword ptr [rsp + 0x890]
0x3187:	mov	rcx, qword ptr [rsp + 0x18]
0x318c:	xor	eax, eax
0x318e:	call	0x2020


0x3193:	xor	edi, edi
0x3195:	call	0x1f10


0x1f10:	jmp	qword ptr [rip + 0x20bfb2]




0x3454:	cmp	dword ptr [rax], 5
0x3457:	mov	rdi, qword ptr [rsp + 0x30]
0x345c:	jne	0x2d9d


0x3462:	call	0x1c50


0x2d9d:	call	0x1c50


0x2da2:	mov	eax, 0xffffffff
0x2da7:	mov	rcx, qword ptr [rsp + 0x838]
0x2daf:	xor	rcx, qword ptr fs:[0x28]
0x2db8:	jne	0x34fc


0x3467:	mov	eax, 1
0x346c:	jmp	0x2da7


0x3143:	mov	rbx, rax
0x3146:	jmp	0x2d72


0x2d72:	lea	rsi, [rip + 0x6831]
0x2d79:	mov	edx, 5
0x2d7e:	xor	edi, edi
0x2d80:	call	0x1d70


0x2d85:	mov	rcx, qword ptr [rsp + 8]
0x2d8a:	mov	esi, dword ptr [rbx]
0x2d8c:	mov	rdx, rax
0x2d8f:	xor	edi, edi
0x2d91:	xor	eax, eax
0x2d93:	call	0x2020


0x2d98:	mov	rdi, qword ptr [rsp + 0x30]
0x2d9d:	call	0x1c50


0x2d69:	mov	rbx, rax
0x2d6c:	mov	dword ptr [rax], 0x16
0x2d72:	lea	rsi, [rip + 0x6831]
0x2d79:	mov	edx, 5
0x2d7e:	xor	edi, edi
0x2d80:	call	0x1d70


0x3940:	test	eax, eax
0x3942:	pop	rdx
0x3943:	pop	rcx
0x3944:	je	0x394d


0x394d:	mov	rdx, qword ptr [r15 + 8]
0x3951:	movzx	eax, byte ptr [r15 + 0x1e]
0x3956:	add	rax, rdx
0x3959:	cmp	rax, r12
0x395c:	ja	0x3910


0x3946:	js	0x39c0


0x3948:	mov	byte ptr [rsp + 0x18], 0
0x394d:	mov	rdx, qword ptr [r15 + 8]
0x3951:	movzx	eax, byte ptr [r15 + 0x1e]
0x3956:	add	rax, rdx
0x3959:	cmp	rax, r12
0x395c:	ja	0x3910


0x2e0e:	test	eax, eax
0x2e10:	jne	0x2d4e


0x7f61:	test	eax, eax
0x7f63:	jne	0x7fc9


0x7f65:	test	bl, bl
0x7f67:	mov	r9, qword ptr [rsp + 8]
0x7f6c:	je	0x7fea


0x7fc9:	mov	r15d, 0xffffffff
0x7fcf:	jmp	0x7e7a


0x7fea:	lea	rcx, [rsp + 0xa0]
0x7ff2:	mov	r8d, 0x100
0x7ff8:	mov	rdx, r13
0x7ffb:	mov	esi, r14d
0x7ffe:	mov	edi, 1
0x8003:	mov	qword ptr [rsp + 8], r9
0x8008:	call	0x1df0


0x7f6e:	mov	eax, dword ptr [rsp + 0x28]
0x7f72:	and	eax, 0xf000
0x7f77:	cmp	eax, 0x4000
0x7f7c:	je	0x7f03


0x7f7e:	mov	dword ptr [r9], 2
0x7f85:	mov	r15d, 0xffffffff
0x7f8b:	jmp	0x7e7a


0x800d:	test	eax, eax
0x800f:	mov	r9, qword ptr [rsp + 8]
0x8014:	je	0x8042


0x8042:	mov	eax, dword ptr [rsp + 0xb8]
0x8049:	and	eax, 0xf000
0x804e:	cmp	eax, 0x4000
0x8053:	je	0x8061


0x8016:	cmp	dword ptr [r9], 2
0x801a:	jne	0x7fc9


0x8061:	mov	eax, dword ptr [rsp + 0x28]
0x8065:	and	eax, 0xf000
0x806a:	cmp	eax, 0x4000
0x806f:	je	0x7f03


0x8055:	mov	dword ptr [r9], 0x14
0x805c:	jmp	0x7fc9


0x801c:	mov	eax, dword ptr [rsp + 0x28]
0x8020:	and	eax, 0xf000
0x8025:	cmp	eax, 0x4000
0x802a:	jne	0x7fc9


0x8075:	mov	dword ptr [r9], 0x15
0x807c:	or	r15d, 0xffffffff
0x8080:	jmp	0x7e7a


0x802c:	jmp	0x7f03


0x7fb3:	test	eax, eax
0x7fb5:	mov	r9, qword ptr [rsp + 8]
0x7fba:	je	0x7fd8


0x7fd8:	mov	dword ptr [r9], 0x11
0x7fdf:	mov	r15d, 0xffffffff
0x7fe5:	jmp	0x7e7a


0x7fbc:	mov	eax, dword ptr [r9]
0x7fbf:	cmp	eax, 0x4b
0x7fc2:	je	0x7fd8


0x7fc4:	cmp	eax, 2
0x7fc7:	je	0x8038


0x8038:	mov	ebx, 1
0x803d:	jmp	0x7ecc


0x6a0d:	mov	dword ptr [rbp], r12d
0x6a11:	pop	rbx
0x6a12:	pop	rbp
0x6a13:	pop	r12
0x6a15:	ret	


0x68ce:	mov	dword ptr [rip + 0x2077a3], r12d
0x68d5:	mov	eax, dword ptr [rbp + 4]
0x68d8:	shl	r15, 4
0x68dc:	sub	rsp, 8
0x68e0:	add	rbx, r15
0x68e3:	lea	r15, [rbp + 8]
0x68e7:	mov	r8d, dword ptr [rbp]
0x68eb:	mov	r11, qword ptr [rbx]
0x68ee:	mov	r12, qword ptr [rbx + 8]
0x68f2:	mov	rcx, r14
0x68f5:	or	eax, 1
0x68f8:	mov	dword ptr [rsp + 0x24], eax
0x68fc:	push	qword ptr [rbp + 0x30]
0x68ff:	mov	r9d, eax
0x6902:	push	qword ptr [rbp + 0x28]
0x6905:	push	r15
0x6907:	mov	rsi, r11
0x690a:	mov	rdx, qword ptr [rsp + 0x28]
0x690f:	mov	rdi, r12
0x6912:	mov	qword ptr [rsp + 0x30], r11
0x6917:	call	0x55f0


0x8b0a:	mov	edx, dword ptr [rsp + 8]
0x8b0e:	mov	rsi, qword ptr [rax]
0x8b11:	mov	rax, rbp
0x8b14:	jmp	0x8b27


0x8b27:	movzx	ecx, bl
0x8b2a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x8b2f:	jne	0x8b20


0x8b31:	cmp	bl, 0x2d
0x8b34:	je	0x8b88


0x8b20:	add	rax, 1
0x8b24:	movzx	ebx, byte ptr [rax]
0x8b27:	movzx	ecx, bl
0x8b2a:	test	byte ptr [rsi + rcx*2 + 1], 0x20
0x8b2f:	jne	0x8b20


0x8b88:	mov	ebp, 4
0x8b8d:	mov	rdi, qword ptr [rsp + 0x18]
0x8b92:	xor	rdi, qword ptr fs:[0x28]
0x8b9b:	mov	eax, ebp
0x8b9d:	jne	0x8e30


0x8b36:	xor	ecx, ecx
0x8b38:	mov	rsi, r15
0x8b3b:	mov	rdi, rbp
0x8b3e:	call	0x1e60


0x8ba3:	add	rsp, 0x28
0x8ba7:	pop	rbx
0x8ba8:	pop	rbp
0x8ba9:	pop	r12
0x8bab:	pop	r13
0x8bad:	pop	r14
0x8baf:	pop	r15
0x8bb1:	ret	


0x8e30:	call	0x1da0


0x1e60:	jmp	qword ptr [rip + 0x20c00a]




0x77c6:	add	rbx, rax
0x77c9:	sub	rbp, rax
0x77cc:	mov	edx, dword ptr [r13]
0x77d0:	jne	0x7798


0x7798:	mov	rax, qword ptr [r12]
0x779c:	mov	rdi, qword ptr [r12 + 0x10]
0x77a1:	mov	eax, dword ptr [rax]
0x77a3:	and	eax, 0x20
0x77a6:	cmovne	eax, edx
0x77a9:	mov	dword ptr [r13], eax
0x77ad:	call	qword ptr [r12 + 8]


0x7538:	cmp	rbp, 0x7ff
0x753f:	jle	0x7664


0x7664:	test	rbp, rbp
0x7667:	mov	r15, r14
0x766a:	mov	eax, 0x10
0x766f:	cmovs	rbp, r12
0x7673:	lea	r12, [rsp + 0x10]
0x7678:	sub	r15, rbp
0x767b:	cmp	r15, 0x10
0x767f:	mov	rdi, r12
0x7682:	cmova	r15, rax
0x7686:	xor	esi, esi
0x7688:	call	0x1e40


0x7545:	mov	rdi, r13
0x7548:	call	0x7be0


0x754d:	jmp	0x7497


0x768d:	lea	rax, [r13 + rbp]
0x7692:	add	rbp, r15
0x7695:	mov	ecx, r15d
0x7698:	cmp	rbp, 0x7ff
0x769f:	mov	rsi, r12
0x76a2:	mov	rdi, rax
0x76a5:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x76a7:	ja	0x7545


0x76a5:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x76ad:	mov	r15, r14
0x76b0:	mov	r8d, 4
0x76b6:	sub	r15, rbp
0x76b9:	mov	qword ptr [rsp + 8], r8
0x76be:	cmp	r15, 4
0x76c2:	cmova	r15, r8
0x76c6:	lea	rdx, [rbp + r15]
0x76cb:	add	rbp, r13
0x76ce:	mov	qword ptr [rsp], rdx
0x76d2:	call	0x1d20


0x9153:	mov	ebx, 0xffffffff
0x9158:	mov	dword ptr [rbp], r12d
0x915c:	jmp	0x9030


0x2be6:	test	eax, eax
0x2be8:	je	0x2c35


0x2bea:	mov	ebx, dword ptr [r12]
0x2bee:	lea	eax, [rbx - 0x15]
0x2bf1:	cmp	eax, 1
0x2bf4:	jbe	0x2c30


0x2c30:	call	0x1f40


0x2bf6:	cmp	ebx, 9
0x2bf9:	je	0x2c30


0x1f40:	jmp	qword ptr [rip + 0x20bf9a]


0x2bfb:	lea	rsi, [rip + 0x6997]
0x2c02:	mov	edx, 5
0x2c07:	xor	edi, edi
0x2c09:	call	0x1d70




0x2c0e:	mov	rcx, r13
0x2c11:	mov	rdx, rax
0x2c14:	mov	esi, ebx
0x2c16:	xor	eax, eax
0x2c18:	xor	edi, edi
0x2c1a:	call	0x2020


0x2c1f:	mov	dword ptr [r12], ebx
0x2c23:	mov	eax, 0xffffffff
0x2c28:	jmp	0x2c37


0x2c37:	add	rsp, 8
0x2c3b:	pop	rbx
0x2c3c:	pop	rbp
0x2c3d:	pop	r12
0x2c3f:	pop	r13
0x2c41:	ret	


0x9207:	mov	rdi, rbx
0x920a:	pop	rbx
0x920b:	jmp	0x1f60


0x385f:	test	eax, eax
0x3861:	jne	0x35ae


0x3867:	mov	eax, dword ptr [rsp + 0x88]
0x386e:	and	eax, 0xf000
0x3873:	jmp	0x3596


0x8636:	mov	rax, qword ptr [rsp + 0x78]
0x863b:	xor	rax, qword ptr fs:[0x28]
0x8644:	jne	0x8650


0x8646:	add	rsp, 0xb8
0x864d:	pop	rbx
0x864e:	pop	rbp
0x864f:	ret	


0x8650:	call	0x1da0


0x8560:	mov	rax, qword ptr [rsp + 0x58]
0x8565:	xor	rax, qword ptr fs:[0x28]
0x856e:	jne	0x8575


0x8570:	add	rsp, 0x68
0x8574:	ret	


0x8575:	call	0x1da0


0x93b7:	test	eax, eax
0x93b9:	mov	r12d, eax
0x93bc:	js	0x93f8


0x93f8:	call	0x1c70


0x93be:	mov	rdi, rbx
0x93c1:	call	0x8ed0


0x93fd:	mov	r12d, dword ptr [rax]
0x9400:	mov	rbp, rax
0x9403:	mov	rdi, rbx
0x9406:	call	0x8ed0


0x80a6:	mov	r12d, eax
0x80a9:	call	0x1c70


0x80ae:	mov	r13d, dword ptr [rax]
0x80b1:	mov	rbp, rax
0x80b4:	mov	edi, ebx
0x80b6:	call	0x1e90


0x80bb:	mov	ebx, r12d
0x80be:	mov	dword ptr [rbp], r13d
0x80c2:	add	rsp, 8
0x80c6:	mov	eax, ebx
0x80c8:	pop	rbx
0x80c9:	pop	rbp
0x80ca:	pop	r12
0x80cc:	pop	r13
0x80ce:	ret	


0x52cf:	test	eax, eax
0x52d1:	jne	0x5318


0x52d3:	movzx	esi, byte ptr [rbx]
0x52d6:	lea	edx, [rsi - 0x30]
0x52d9:	cmp	dl, 9
0x52dc:	jbe	0x5308


0x5318:	mov	rdx, qword ptr [r12]
0x531c:	mov	dword ptr [r13], 0
0x5324:	test	rdx, rdx
0x5327:	jne	0x5295


0x5308:	mov	rdx, qword ptr [r12]
0x530c:	mov	dword ptr [r13], ebp
0x5310:	jmp	0x5324


0x52de:	mov	rcx, qword ptr [rsp]
0x52e2:	cmp	rbx, rcx
0x52e5:	jne	0x52f9


0x532d:	lea	rdi, [rip + 0x546b]
0x5334:	call	0x1c40


0x5324:	test	rdx, rdx
0x5327:	jne	0x5295


0x52e7:	jmp	0x53c0


0x52f9:	add	rbx, 1
0x52fd:	movzx	edi, byte ptr [rbx]
0x5300:	lea	edx, [rdi - 0x30]
0x5303:	cmp	dl, 9
0x5306:	ja	0x52f0


0x53c0:	cmp	byte ptr [rcx - 1], 0x42
0x53c4:	je	0x53d8


0x52f0:	cmp	rbx, rcx
0x52f3:	je	0x53c0


0x53d8:	or	ebp, 0x180
0x53de:	cmp	byte ptr [rcx - 2], 0x69
0x53e2:	jne	0x5308


0x53c6:	or	bpl, 0x80
0x53ca:	or	ebp, 0x20
0x53cd:	jmp	0x5308


0x53e8:	jmp	0x53ca


0x53ca:	or	ebp, 0x20
0x53cd:	jmp	0x5308


0x5339:	cmp	rax, 1
0x533d:	sbb	rax, rax
0x5340:	and	eax, 0x200
0x5345:	add	rax, 0x200
0x534b:	mov	qword ptr [r12], rax
0x534f:	mov	eax, 4
0x5354:	jmp	0x5295


0x89ba:	test	eax, eax
0x89bc:	jne	0x8a50


0x89c2:	mov	rbp, qword ptr [rsp]
0x89c6:	cmp	rbp, r14
0x89c9:	jb	0x89d0


0x8a50:	mov	ebp, eax
0x8a52:	call	0x1c70


0x89d0:	call	0x1c70


0x89cb:	cmp	rbp, r15
0x89ce:	jbe	0x8a24


0x8a24:	mov	rdx, qword ptr [rsp + 8]
0x8a29:	xor	rdx, qword ptr fs:[0x28]
0x8a32:	mov	rax, rbp
0x8a35:	jne	0x8a7b


0x8a37:	add	rsp, 0x18
0x8a3b:	pop	rbx
0x8a3c:	pop	rbp
0x8a3d:	pop	r12
0x8a3f:	pop	r13
0x8a41:	pop	r14
0x8a43:	pop	r15
0x8a45:	ret	


0x8a7b:	call	0x1da0


0x89d5:	cmp	rbp, 0x40000000
0x89dc:	mov	r14, rax
0x89df:	sbb	eax, eax
0x89e1:	and	eax, 0xffffffd7
0x89e4:	add	eax, 0x4b
0x89e7:	mov	dword ptr [r14], eax
0x89ea:	mov	rdi, r12
0x89ed:	call	0x7170


0x8a57:	cmp	ebp, 1
0x8a5a:	mov	r14, rax
0x8a5d:	je	0x8a70


0x8a70:	mov	dword ptr [rax], 0x4b
0x8a76:	jmp	0x89ea


0x8a5f:	cmp	ebp, 3
0x8a62:	jne	0x89ea


0x89ea:	mov	rdi, r12
0x89ed:	call	0x7170


0x8a64:	mov	dword ptr [rax], 0
0x8a6a:	jmp	0x89ea


0x8a9c:	add	rsp, 0x18
0x8aa0:	ret	


0x8b43:	mov	rcx, qword ptr [r15]
0x8b46:	mov	rbx, rax
0x8b49:	cmp	rcx, rbp
0x8b4c:	je	0x8b78


0x8b78:	test	r13, r13
0x8b7b:	mov	qword ptr [rsp + 8], rcx
0x8b80:	jne	0x8bc0


0x8b4e:	mov	eax, dword ptr [r12]
0x8b52:	test	eax, eax
0x8b54:	je	0x8bb8


0x8bc0:	movzx	r12d, byte ptr [rbp]
0x8bc5:	test	r12b, r12b
0x8bc8:	je	0x8b88


0x8bb8:	xor	ebp, ebp
0x8bba:	jmp	0x8b60


0x8b56:	cmp	eax, 0x22
0x8b59:	mov	ebp, 1
0x8b5e:	jne	0x8b88


0x8bca:	movsx	esi, r12b
0x8bce:	mov	rdi, r13
0x8bd1:	xor	ebp, ebp
0x8bd3:	call	0x1de0


0x8b60:	test	r13, r13
0x8b63:	je	0x8b6e


0x1de0:	jmp	qword ptr [rip + 0x20c04a]


0x8b6e:	mov	qword ptr [r14], rbx
0x8b71:	jmp	0x8b8d


0x8b65:	movzx	r12d, byte ptr [rcx]
0x8b69:	test	r12b, r12b
0x8b6c:	jne	0x8be7




0x8b8d:	mov	rdi, qword ptr [rsp + 0x18]
0x8b92:	xor	rdi, qword ptr fs:[0x28]
0x8b9b:	mov	eax, ebp
0x8b9d:	jne	0x8e30


0x8be7:	movsx	esi, r12b
0x8beb:	mov	rdi, r13
0x8bee:	mov	qword ptr [rsp + 8], rcx
0x8bf3:	call	0x1de0


0x319a:	add	rax, 5
0x319e:	mov	qword ptr [rsp + 0x78], rax
0x31a3:	pop	r8
0x31a5:	pop	r9
0x31a7:	jmp	0x2eff


0x2fae:	test	rax, rax
0x2fb1:	jg	0x2f90


0x2fb3:	cmp	qword ptr [rsp + 0x28], 0
0x2fb9:	js	0x30a0


0x2f90:	add	r15, rax
0x2f93:	cmp	rbp, r15
0x2f96:	jbe	0x3220


0x30a0:	test	rax, rax
0x30a3:	je	0x30ba


0x2fbf:	call	0x1c70


0x3220:	mov	rcx, qword ptr [rsp]
0x3224:	movabs	rax, 0x7fffffffffffffff
0x322e:	mov	r13, qword ptr [rsp + 0x28]
0x3233:	sub	rax, rcx
0x3236:	cmp	rax, r15
0x3239:	jb	0x30d1


0x30ba:	movabs	rax, 0x7fffffffffffffff
0x30c4:	sub	rax, qword ptr [rsp]
0x30c8:	cmp	rax, r15
0x30cb:	jae	0x33bb


0x30a5:	call	0x1c70


0x30d1:	lea	rsi, [rip + 0x64fd]
0x30d8:	mov	edx, 5
0x30dd:	xor	edi, edi
0x30df:	call	0x1d70


0x323f:	add	rcx, r15
0x3242:	cmp	qword ptr [rsp + 0x888], 0
0x324b:	mov	rbp, rcx
0x324e:	mov	qword ptr [rsp], rcx
0x3252:	je	0x2f24


0x33bb:	mov	rbp, qword ptr [rsp]
0x33bf:	mov	rax, qword ptr [rsp + 0x50]
0x33c4:	add	rbp, r15
0x33c7:	cmp	qword ptr [rsp + 0x888], 0
0x33d0:	mov	r13, rbp
0x33d3:	mov	qword ptr [rsp], rbp
0x33d7:	mov	qword ptr [rax], rbp
0x33da:	je	0x2f24


0x2f24:	test	r13, r13
0x2f27:	js	0x30f8


0x3258:	cmp	r13, rcx
0x325b:	je	0x33e0


0x33e0:	mov	rax, qword ptr [rsp + 0x58]
0x33e5:	cmp	byte ptr [rax], 0
0x33e8:	je	0x3412


0x3261:	xor	edi, edi
0x3263:	call	0x1f10


0x3412:	xor	edi, edi
0x3414:	call	0x1f10


0x33ea:	lea	rsi, [rsp + 0x310]
0x33f2:	mov	r8d, 1
0x33f8:	mov	ecx, 1
0x33fd:	mov	edx, 0x1b2
0x3402:	mov	rdi, rbp
0x3405:	call	0x4810


0x340a:	mov	r12, rax
0x340d:	jmp	0x32b1


0x32b1:	test	r13, r13
0x32b4:	js	0x3471


0x3471:	lea	rsi, [rip + 0x6181]
0x3478:	mov	edx, 5
0x347d:	xor	edi, edi
0x347f:	call	0x1d70


0x32ba:	mov	r15d, 0x64
0x32c0:	je	0x32ea


0x32ea:	lea	rsi, [rsp + 0x5a0]
0x32f2:	mov	r8d, 1
0x32f8:	mov	ecx, 1
0x32fd:	mov	edx, 0x1b0
0x3302:	mov	rdi, r13
0x3305:	call	0x4810


0x32c2:	movabs	rax, 0x28f5c28f5c28f5c
0x32cc:	cmp	rbp, rax
0x32cf:	ja	0x34b9


0x32d5:	lea	rax, [rbp + rbp*4]
0x32da:	xor	edx, edx
0x32dc:	lea	rax, [rax + rax*4]
0x32e0:	shl	rax, 2
0x32e4:	div	r13
0x32e7:	mov	r15d, eax
0x32ea:	lea	rsi, [rsp + 0x5a0]
0x32f2:	mov	r8d, 1
0x32f8:	mov	ecx, 1
0x32fd:	mov	edx, 0x1b0
0x3302:	mov	rdi, r13
0x3305:	call	0x4810


0x34b9:	movabs	rax, 0xa3d70a3d70a3d70b
0x34c3:	imul	r13
0x34c6:	mov	rax, r13
0x34c9:	sar	rax, 0x3f
0x34cd:	lea	rcx, [rdx + r13]
0x34d1:	xor	edx, edx
0x34d3:	sar	rcx, 6
0x34d7:	sub	rcx, rax
0x34da:	mov	rax, rbp
0x34dd:	div	rcx
0x34e0:	mov	r15d, eax
0x34e3:	jmp	0x32ea


0x330a:	cmp	rbp, r13
0x330d:	lea	rsi, [rip + 0x658c]
0x3314:	mov	edx, 5
0x3319:	cmove	r12, rax
0x331d:	xor	edi, edi
0x331f:	mov	qword ptr [rsp + 0x28], rax
0x3324:	call	0x1d70


0x3419:	cmp	qword ptr [rsp + 0x68], rax
0x341e:	mov	qword ptr [rsp + 0x60], rax
0x3423:	jg	0x2f24


0x3429:	jmp	0x33ea


0x3268:	cmp	qword ptr [rsp + 0x68], rax
0x326d:	mov	qword ptr [rsp + 0x60], rax
0x3272:	jg	0x2f24


0x3278:	mov	rdi, qword ptr [rsp]
0x327c:	lea	rsi, [rsp + 0x310]
0x3284:	mov	r8d, 1
0x328a:	mov	ecx, 1
0x328f:	mov	edx, 0x1b2
0x3294:	call	0x4810


0x3299:	mov	rdi, qword ptr [rsp + 0x58]
0x329e:	mov	rsi, rax
0x32a1:	mov	r12, rax
0x32a4:	call	0x1ed0


0x1ed0:	jmp	qword ptr [rip + 0x20bfd2]




0x3329:	push	r15
0x332b:	mov	rcx, qword ptr [rsp + 0x30]
0x3330:	xor	esi, esi
0x3332:	xor	edi, edi
0x3334:	push	rcx
0x3335:	push	r12
0x3337:	lea	rdx, [rsp + 0x91]
0x333f:	push	rdx
0x3340:	mov	r9, qword ptr [rsp + 0x8a8]
0x3348:	mov	rdx, rax
0x334b:	mov	r8, qword ptr [rsp + 0x8a0]
0x3353:	mov	rcx, qword ptr [rsp + 0x28]
0x3358:	xor	eax, eax
0x335a:	call	0x2020


0x335f:	add	rsp, 0x20
0x3363:	lea	rbp, [rsp + 0x80]
0x336b:	mov	edx, 0x28c
0x3370:	mov	rsi, r12
0x3373:	mov	rdi, rbp
0x3376:	call	0x1fb0


0x1fb0:	jmp	qword ptr [rip + 0x20bf62]




0x3484:	push	r12
0x3486:	xor	esi, esi
0x3488:	xor	edi, edi
0x348a:	lea	rdx, [rsp + 0x81]
0x3492:	push	rdx
0x3493:	mov	r9, qword ptr [rsp + 0x898]
0x349b:	mov	rdx, rax
0x349e:	mov	r8, qword ptr [rsp + 0x890]
0x34a6:	mov	rcx, qword ptr [rsp + 0x18]
0x34ab:	xor	eax, eax
0x34ad:	call	0x2020


0x34b2:	pop	rcx
0x34b3:	pop	rsi
0x34b4:	jmp	0x3363


0x3363:	lea	rbp, [rsp + 0x80]
0x336b:	mov	edx, 0x28c
0x3370:	mov	rsi, r12
0x3373:	mov	rdi, rbp
0x3376:	call	0x1fb0


0x30e4:	mov	rcx, qword ptr [rsp + 8]
0x30e9:	mov	rdx, rax
0x30ec:	xor	esi, esi
0x30ee:	jmp	0x2d8f


0x2d8f:	xor	edi, edi
0x2d91:	xor	eax, eax
0x2d93:	call	0x2020


0x30aa:	mov	r12d, dword ptr [rax]
0x30ad:	mov	r13, rax
0x30b0:	cmp	r12d, 0x1c
0x30b4:	jne	0x2fca


0x2fca:	movzx	eax, byte ptr [rsp + 0x27]
0x2fcf:	xor	eax, 1
0x2fd2:	cmp	r12d, 0x16
0x2fd6:	sete	dl
0x2fd9:	and	al, dl
0x2fdb:	jne	0x3200


0x2fe1:	mov	rax, qword ptr [rsp]
0x2fe5:	mov	rsi, qword ptr [rsp + 0x38]
0x2fea:	lea	rdi, [rax + r15]
0x2fee:	call	0x5410


0x3200:	xor	esi, esi
0x3202:	mov	edi, r14d
0x3205:	mov	byte ptr [rsp + 0x27], al
0x3209:	call	0x2b60


0x320e:	cmp	rbp, r15
0x3211:	ja	0x2f9c


0x2ff3:	lea	rsi, [rip + 0x6886]
0x2ffa:	xor	edi, edi
0x2ffc:	mov	edx, 5
0x3001:	mov	qword ptr [rsp + 0x10], rax
0x3006:	call	0x1d70


0x300b:	mov	r8, qword ptr [rsp + 0x10]
0x3010:	mov	rcx, qword ptr [rsp + 8]
0x3015:	mov	rdx, rax
0x3018:	xor	edi, edi
0x301a:	xor	eax, eax
0x301c:	mov	esi, r12d
0x301f:	call	0x2020


0x3024:	cmp	r12d, 5
0x3028:	sete	al
0x302b:	and	al, byte ptr [rsp + 0x40]
0x302f:	mov	byte ptr [rsp + 0x10], al
0x3033:	je	0x2d98


0x3039:	mov	r9, r15
0x303c:	or	r9, 0x1ff
0x3043:	cmp	r9, rbp
0x3046:	jae	0x2d98


0x304c:	mov	rax, qword ptr [rsp]
0x3050:	lea	r15, [r9 + 1]
0x3054:	xor	edx, edx
0x3056:	mov	edi, r14d
0x3059:	lea	rsi, [rax + r15]
0x305d:	call	0x1e30


0x3062:	cmp	rax, -1
0x3066:	jne	0x2f93


0x306c:	lea	rsi, [rip + 0x6575]
0x3073:	xor	edi, edi
0x3075:	mov	edx, 5
0x307a:	call	0x1d70


0x2f93:	cmp	rbp, r15
0x2f96:	jbe	0x3220


0x307f:	mov	rcx, qword ptr [rsp + 8]
0x3084:	mov	esi, dword ptr [r13]
0x3088:	mov	rdx, rax
0x308b:	xor	edi, edi
0x308d:	xor	eax, eax
0x308f:	call	0x2020


0x3094:	jmp	0x2d98


0x2fc4:	mov	r12d, dword ptr [rax]
0x2fc7:	mov	r13, rax
0x2fca:	movzx	eax, byte ptr [rsp + 0x27]
0x2fcf:	xor	eax, 1
0x2fd2:	cmp	r12d, 0x16
0x2fd6:	sete	dl
0x2fd9:	and	al, dl
0x2fdb:	jne	0x3200


0x76d7:	mov	rdx, qword ptr [rsp]
0x76db:	mov	dword ptr [rsp + 0x10], eax
0x76df:	mov	ecx, r15d
0x76e2:	mov	rdi, rbp
0x76e5:	mov	rsi, r12
0x76e8:	mov	r8, qword ptr [rsp + 8]
0x76ed:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x76ef:	cmp	rdx, 0x7ff
0x76f6:	jg	0x7545


0x76ed:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x76fc:	sub	r14, rdx
0x76ff:	cmp	r14, 4
0x7703:	cmova	r14, r8
0x7707:	call	0x20b0


0x20b0:	jmp	qword ptr [rip + 0x20bee2]




0x75ac:	mov	dword ptr [rbx + 0x30], eax
0x75af:	mov	dword ptr [rsp + 0x10], eax
0x75b3:	call	0x20b0


0x4b8a:	mov	r8, r14
0x4b8d:	add	r8, r15
0x4b90:	test	r12b, 4
0x4b94:	jne	0x4c78


0x21b6:	lea	rdi, [rip + 0x22d3]
0x21bd:	call	0x9550


0x21c2:	mov	qword ptr [rsp + 0x58], 3
0x21cb:	mov	qword ptr [rsp + 0x60], -1
0x21d4:	nop	dword ptr [rax]
0x21d8:	lea	rdx, [rip + 0x75a8]
0x21df:	xor	r8d, r8d
0x21e2:	mov	rcx, r12
0x21e5:	mov	rsi, rbx
0x21e8:	mov	edi, ebp
0x21ea:	call	0x1dc0


0x1dc0:	jmp	qword ptr [rip + 0x20c05a]




0x8ef4:	test	eax, eax
0x8ef6:	je	0x8f34


0x8ef8:	call	0x1c70


0x8efd:	mov	r12d, dword ptr [rax]
0x8f00:	mov	rdi, rbx
0x8f03:	mov	rbp, rax
0x8f06:	call	0x1d50


0x8f0b:	test	r12d, r12d
0x8f0e:	jne	0x8f40


0x8f10:	pop	rbx
0x8f11:	pop	rbp
0x8f12:	pop	r12
0x8f14:	ret	


0x8f40:	mov	dword ptr [rbp], r12d
0x8f44:	mov	eax, 0xffffffff
0x8f49:	jmp	0x8f10


0x940b:	xor	ebx, ebx
0x940d:	mov	dword ptr [rbp], r12d
0x9411:	jmp	0x93a1


0x93c6:	test	eax, eax
0x93c8:	jne	0x93dd


0x93ca:	mov	rsi, rbp
0x93cd:	mov	edi, r12d
0x93d0:	call	0x1fc0


0x93dd:	call	0x1c70


0x1fc0:	jmp	qword ptr [rip + 0x20bf5a]




0x93e2:	mov	ebp, dword ptr [rax]
0x93e4:	mov	rbx, rax
0x93e7:	mov	edi, r12d
0x93ea:	call	0x1e90


0x93ef:	mov	dword ptr [rbx], ebp
0x93f1:	xor	ebx, ebx
0x93f3:	jmp	0x93a1


0x931a:	and	ebx, 0x20
0x931d:	test	ebx, ebx
0x931f:	jne	0x9338


0x9321:	test	eax, eax
0x9323:	je	0x932f


0x9338:	test	eax, eax
0x933a:	jne	0x9358


0x932f:	pop	rbx
0x9330:	pop	rbp
0x9331:	pop	r12
0x9333:	ret	


0x9325:	test	r12, r12
0x9328:	mov	eax, 0xffffffff
0x932d:	je	0x9368


0x933c:	call	0x1c70


0x9358:	pop	rbx
0x9359:	mov	eax, 0xffffffff
0x935e:	pop	rbp
0x935f:	pop	r12
0x9361:	ret	


0x9368:	call	0x1c70


0x936d:	cmp	dword ptr [rax], 9
0x9370:	pop	rbx
0x9371:	pop	rbp
0x9372:	pop	r12
0x9374:	setne	al
0x9377:	movzx	eax, al
0x937a:	neg	eax
0x937c:	ret	


0x9341:	mov	dword ptr [rax], 0
0x9347:	mov	eax, 0xffffffff
0x934c:	pop	rbx
0x934d:	pop	rbp
0x934e:	pop	r12
0x9350:	ret	


0x44a2:	test	eax, eax
0x44a4:	je	0x44bc


0x44bc:	mov	rdi, qword ptr [rip + 0x209c1d]
0x44c3:	call	0x9300


0x44a6:	call	0x1c70


0x44ab:	cmp	byte ptr [rip + 0x209c46], 0
0x44b2:	mov	rbx, rax
0x44b5:	je	0x44d3


0x44d3:	lea	rsi, [rip + 0x6291]
0x44da:	xor	edi, edi
0x44dc:	mov	edx, 5
0x44e1:	call	0x1d70


0x44b7:	cmp	dword ptr [rax], 0x20
0x44ba:	jne	0x44d3


0x44e6:	mov	rdi, qword ptr [rip + 0x209c13]
0x44ed:	mov	rbp, rax
0x44f0:	test	rdi, rdi
0x44f3:	je	0x451d


0x451d:	mov	esi, dword ptr [rbx]
0x451f:	lea	rdx, [rip + 0x6242]
0x4526:	mov	rcx, rax
0x4529:	xor	edi, edi
0x452b:	xor	eax, eax
0x452d:	call	0x2020


0x44f5:	call	0x6f70


0x4532:	jmp	0x4512


0x4512:	mov	edi, dword ptr [rip + 0x209b08]
0x4518:	call	0x1cb0


0x1cb0:	jmp	qword ptr [rip + 0x20c0e2]




0x44c8:	test	eax, eax
0x44ca:	jne	0x4512


0x44cc:	add	rsp, 8
0x44d0:	pop	rbx
0x44d1:	pop	rbp
0x44d2:	ret	


0x93d5:	test	rax, rax
0x93d8:	mov	rbx, rax
0x93db:	jne	0x93a1


0x21ef:	cmp	eax, -1
0x21f2:	je	0x23ec


0x23ec:	movsxd	r12, dword ptr [rip + 0x20bcbd]
0x23f3:	mov	r14d, eax
0x23f6:	mov	rax, r12
0x23f9:	shl	r12, 3
0x23fd:	sub	ebp, eax
0x23ff:	je	0x299c


0x21f8:	cmp	eax, 0x73
0x21fb:	je	0x22f0


0x299c:	lea	rsi, [rip + 0x6dee]
0x29a3:	mov	edx, 5
0x29a8:	xor	edi, edi
0x29aa:	call	0x1d70


0x2405:	or	rsi, 0xffffffffffffffff
0x2409:	mov	rdi, r13
0x240c:	call	0x71c0


0x22f0:	lea	rsi, [rip + 0x7464]
0x22f7:	mov	edx, 5
0x22fc:	xor	edi, edi
0x22fe:	call	0x1d70


0x2201:	jle	0x2230


0x2230:	cmp	eax, 0xffffff7e
0x2235:	je	0x2995


0x2203:	cmp	eax, 0x78
0x2206:	je	0x22e0


0x2995:	xor	edi, edi
0x2997:	call	0x3c20


0x223b:	jle	0x23a0


0x22e0:	mov	byte ptr [rsp + 0x6d], 1
0x22e5:	jmp	0x21d8


0x220c:	jg	0x2298


0x23a0:	cmp	eax, 0xffffff7d
0x23a5:	jne	0x29bd


0x2241:	cmp	eax, 0x66
0x2244:	je	0x2390


0x21d8:	lea	rdx, [rip + 0x75a8]
0x21df:	xor	r8d, r8d
0x21e2:	mov	rcx, r12
0x21e5:	mov	rsi, rbx
0x21e8:	mov	edi, ebp
0x21ea:	call	0x1dc0


0x2212:	cmp	eax, 0x75
0x2215:	je	0x2340


0x2298:	cmp	eax, 0x7a
0x229b:	je	0x22d0


0x23ab:	mov	rdi, qword ptr [rip + 0x20bcf6]
0x23b2:	mov	rcx, qword ptr [rip + 0x20bc57]
0x23b9:	lea	r8, [rip + 0x73bb]
0x23c0:	lea	rdx, [rip + 0x732d]
0x23c7:	lea	rsi, [rip + 0x72aa]
0x23ce:	xor	r9d, r9d
0x23d1:	xor	eax, eax
0x23d3:	call	0x8590


0x29bd:	mov	edi, 1
0x29c2:	call	0x3c20


0x2390:	mov	byte ptr [rsp + 0x50], 1
0x2395:	jmp	0x21d8


0x224a:	cmp	eax, 0x6e
0x224d:	jne	0x29bd


0x2340:	mov	rsi, qword ptr [rip + 0x20bd71]
0x2347:	test	rsi, rsi
0x234a:	je	0x23df


0x221b:	cmp	eax, 0x76
0x221e:	jne	0x29bd


0x22d0:	mov	byte ptr [rsp + 0x6e], 1
0x22d5:	jmp	0x21d8


0x229d:	add	eax, -0x80
0x22a0:	jne	0x29bd


0x2253:	lea	rsi, [rip + 0x74df]
0x225a:	mov	edx, 5
0x225f:	xor	edi, edi
0x2261:	call	0x1d70


0x23df:	mov	dword ptr [rsp + 0x68], 3
0x23e7:	jmp	0x21d8


0x2350:	mov	r9, qword ptr [rip + 0x20bcc1]
0x2357:	lea	rdx, [rip + 0x20b762]
0x235e:	lea	rcx, [rip + 0x839b]
0x2365:	lea	rdi, [rip + 0x73e6]
0x236c:	mov	r8d, 4
0x2372:	call	0x43b0


0x2224:	mov	byte ptr [rsp + 0x6c], 1
0x2229:	jmp	0x21d8


0x22a6:	test	r13, r13
0x22a9:	mov	r14, qword ptr [rip + 0x20be08]
0x22b0:	je	0x22c5


0x22c5:	mov	r13, r14
0x22c8:	jmp	0x21d8


0x22b2:	mov	rsi, r14
0x22b5:	mov	rdi, r13
0x22b8:	call	0x1ed0


0x2377:	lea	rdx, [rip + 0x8382]
0x237e:	mov	eax, dword ptr [rdx + rax*4]
0x2381:	mov	dword ptr [rsp + 0x68], eax
0x2385:	jmp	0x21d8


0x23d8:	xor	edi, edi
0x23da:	call	0x20c0


0x2411:	test	rax, rax
0x2414:	mov	qword ptr [rip + 0x20bcd5], rax
0x241b:	je	0x29eb


0x29eb:	mov	rdx, r13
0x29ee:	mov	esi, 3
0x29f3:	xor	edi, edi
0x29f5:	call	0x6fa0


0x2421:	lea	rdi, [rip + 0x728]
0x2428:	call	0x9550


0x242d:	test	ebp, ebp
0x242f:	jle	0x25b4


0x25b4:	mov	byte ptr [rsp + 0x13], 1
0x25b9:	movzx	eax, byte ptr [rsp + 0x13]
0x25be:	xor	eax, 1
0x25c1:	mov	rcx, qword ptr [rsp + 0x78]
0x25c6:	xor	rcx, qword ptr fs:[0x28]
0x25cf:	movzx	eax, al
0x25d2:	jne	0x29e6


0x2435:	lea	rax, [rbx + r12 + 8]
0x243a:	lea	edx, [rbp - 1]
0x243d:	lea	r15, [rbx + r12]
0x2441:	mov	byte ptr [rsp + 0x13], 1
0x2446:	mov	dword ptr [rsp + 0x20], r14d
0x244b:	lea	rax, [rax + rdx*8]
0x244f:	mov	qword ptr [rsp], rax
0x2453:	lea	rax, [rsp + 0x50]
0x2458:	mov	qword ptr [rsp + 8], rax
0x245d:	jmp	0x24b5


0x25d8:	add	rsp, 0x88
0x25df:	pop	rbx
0x25e0:	pop	rbp
0x25e1:	pop	r12
0x25e3:	pop	r13
0x25e5:	pop	r14
0x25e7:	pop	r15
0x25e9:	ret	


0x29e6:	call	0x1da0


0x24b5:	mov	rdx, qword ptr [r15]
0x24b8:	mov	esi, 3
0x24bd:	xor	edi, edi
0x24bf:	call	0x6fa0


0x2266:	mov	rdi, qword ptr [rip + 0x20be4b]
0x226d:	lea	rcx, [rip + 0x8b3c]
0x2274:	mov	r8, rax
0x2277:	xor	r9d, r9d
0x227a:	movabs	rdx, 0x3fffffffffffffff
0x2284:	xor	esi, esi
0x2286:	call	0x8a80


0x228b:	mov	qword ptr [rsp + 0x58], rax
0x2290:	jmp	0x21d8


0x2303:	sub	rsp, 8
0x2307:	mov	rdi, qword ptr [rip + 0x20bdaa]
0x230e:	lea	r8, [rip + 0x7458]
0x2315:	push	0
0x2317:	xor	edx, edx
0x2319:	mov	r9, rax
0x231c:	movabs	rcx, 0x7fffffffffffffff
0x2326:	xor	esi, esi
0x2328:	call	0x8980


0x232d:	mov	qword ptr [rsp + 0x70], rax
0x2332:	pop	rax
0x2333:	pop	rdx
0x2334:	jmp	0x21d8


0x29af:	xor	esi, esi
0x29b1:	mov	rdx, rax
0x29b4:	xor	edi, edi
0x29b6:	xor	eax, eax
0x29b8:	call	0x2020


0x75b8:	mov	dword ptr [rsp + 0x10], eax
0x75bc:	mov	dword ptr [rbx + 0x34], eax
0x75bf:	mov	ebp, 0x800
0x75c4:	mov	eax, 4
0x75c9:	sub	rbp, r14
0x75cc:	cmp	rbp, 4
0x75d0:	cmova	rbp, rax
0x75d4:	call	0x1db0


0x1db0:	jmp	qword ptr [rip + 0x20c062]




0x770c:	mov	rdx, qword ptr [rsp]
0x7710:	mov	dword ptr [rsp + 0x10], eax
0x7714:	mov	ecx, r14d
0x7717:	mov	rsi, r12
0x771a:	lea	rax, [r13 + rdx]
0x771f:	add	r14, rdx
0x7722:	cmp	r14, 0x7ff
0x7729:	mov	rdi, rax
0x772c:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x772e:	ja	0x7545


0x772c:	rep movsb	byte ptr [rdi], byte ptr [rsi]


0x7734:	jmp	0x75bf


0x75bf:	mov	ebp, 0x800
0x75c4:	mov	eax, 4
0x75c9:	sub	rbp, r14
0x75cc:	cmp	rbp, 4
0x75d0:	cmova	rbp, rax
0x75d4:	call	0x1db0


0x337b:	mov	rax, qword ptr [rsp + 0x60]
0x3380:	mov	rsi, qword ptr [rsp + 8]
0x3385:	mov	edi, r14d
0x3388:	add	rax, 5
0x338c:	mov	qword ptr [rsp + 0x68], rax
0x3391:	call	0x2bb0


0x3396:	test	eax, eax
0x3398:	je	0x3430


0x3430:	mov	qword ptr [rsp + 0x58], rbp
0x3435:	jmp	0x2f24


0x339e:	call	0x1c70


0x33a3:	cmp	dword ptr [rax], 5
0x33a6:	jne	0x2d98


0x33ac:	mov	qword ptr [rsp + 0x58], rbp
0x33b1:	mov	byte ptr [rsp + 0x10], 1
0x33b6:	jmp	0x2f24


0x22bd:	test	eax, eax
0x22bf:	jne	0x2a1a


0x2a1a:	lea	rsi, [rip + 0x7af7]
0x2a21:	mov	edx, 5
0x2a26:	xor	edi, edi
0x2a28:	call	0x1d70


0x2a2d:	xor	esi, esi
0x2a2f:	mov	rdx, rax
0x2a32:	mov	edi, 1
0x2a37:	xor	eax, eax
0x2a39:	call	0x2020


0x2a3e:	nop	


0x32a9:	test	eax, eax
0x32ab:	je	0x2f24


0x8bf8:	test	rax, rax
0x8bfb:	mov	rcx, qword ptr [rsp + 8]
0x8c00:	je	0x8ccc


0x8ccc:	mov	qword ptr [r14], rbx
0x8ccf:	or	ebp, 2
0x8cd2:	jmp	0x8b8d


0x8c06:	lea	eax, [r12 - 0x45]
0x8c0b:	cmp	al, 0x2f
0x8c0d:	ja	0x8c60


0x8c0f:	movabs	rdx, 0x814400308945
0x8c19:	bt	rdx, rax
0x8c1d:	jae	0x8c60


0x8c60:	mov	edi, 1
0x8c65:	mov	esi, 0x400
0x8c6a:	sub	r12d, 0x42
0x8c6e:	cmp	r12b, 0x35
0x8c72:	ja	0x8ccc


0x8c1f:	mov	esi, 0x30
0x8c24:	mov	rdi, r13
0x8c27:	mov	qword ptr [rsp + 8], rcx
0x8c2c:	call	0x1de0


0x8c74:	lea	rdx, [rip + 0x248d]
0x8c7b:	movzx	r12d, r12b
0x8c7f:	movsxd	rax, dword ptr [rdx + r12*4]
0x8c83:	add	rax, rdx
0x8c86:	jmp	rax


0x8c31:	test	rax, rax
0x8c34:	mov	rcx, qword ptr [rsp + 8]
0x8c39:	je	0x8c60


0x8c3b:	movzx	eax, byte ptr [rcx + 1]
0x8c3f:	cmp	al, 0x44
0x8c41:	je	0x8c4f


0x8c4f:	mov	edi, 2
0x8c54:	mov	esi, 0x3e8
0x8c59:	jmp	0x8c6a


0x8c43:	cmp	al, 0x69
0x8c45:	je	0x8e18


0x8c6a:	sub	r12d, 0x42
0x8c6e:	cmp	r12b, 0x35
0x8c72:	ja	0x8ccc


0x8e18:	xor	edi, edi
0x8e1a:	cmp	byte ptr [rcx + 2], 0x42
0x8e1e:	mov	esi, 0x400
0x8e23:	sete	dil
0x8e27:	lea	edi, [rdi + rdi + 1]
0x8e2b:	jmp	0x8c6a


0x8c4b:	cmp	al, 0x42
0x8c4d:	jne	0x8c60


0x8bd8:	test	rax, rax
0x8bdb:	mov	ebx, 1
0x8be0:	mov	rcx, qword ptr [rsp + 8]
0x8be5:	je	0x8b88


0x75d9:	test	ebp, ebp
0x75db:	mov	dword ptr [rsp + 0x10], eax
0x75df:	lea	rcx, [r13 + r14]
0x75e4:	mov	esi, ebp
0x75e6:	je	0x75fc


0x75fc:	add	rbp, r14
0x75ff:	cmp	rbp, 0x7ff
0x7606:	ja	0x7545


0x75e8:	xor	eax, eax
0x75ea:	mov	edx, eax
0x75ec:	add	eax, 1
0x75ef:	movzx	edi, byte ptr [r12 + rdx]
0x75f4:	cmp	eax, esi
0x75f6:	mov	byte ptr [rcx + rdx], dil
0x75fa:	jb	0x75ea


0x760c:	call	0x1f30


0x75ea:	mov	edx, eax
0x75ec:	add	eax, 1
0x75ef:	movzx	edi, byte ptr [r12 + rdx]
0x75f4:	cmp	eax, esi
0x75f6:	mov	byte ptr [rcx + rdx], dil
0x75fa:	jb	0x75ea


0x1f30:	jmp	qword ptr [rip + 0x20bfa2]




0x7611:	mov	dword ptr [rsp + 0x10], eax
0x7615:	mov	eax, 0x800
0x761a:	mov	edx, 4
0x761f:	sub	rax, rbp
0x7622:	lea	rcx, [r13 + rbp]
0x7627:	cmp	rax, 4
0x762b:	cmova	rax, rdx
0x762f:	test	eax, eax
0x7631:	mov	esi, eax
0x7633:	je	0x7545


0x7639:	xor	eax, eax
0x763b:	mov	edx, eax
0x763d:	add	eax, 1
0x7640:	movzx	edi, byte ptr [r12 + rdx]
0x7645:	cmp	eax, esi
0x7647:	mov	byte ptr [rcx + rdx], dil
0x764b:	jb	0x763b


0x763b:	mov	edx, eax
0x763d:	add	eax, 1
0x7640:	movzx	edi, byte ptr [r12 + rdx]
0x7645:	cmp	eax, esi
0x7647:	mov	byte ptr [rcx + rdx], dil
0x764b:	jb	0x763b


0x764d:	jmp	0x7545


0x24c4:	mov	rdi, rax
0x24c7:	call	0x8920


0x24cc:	mov	rbp, qword ptr [r15]
0x24cf:	lea	rdi, [rip + 0x837c]
0x24d6:	mov	ecx, 2
0x24db:	mov	rbx, rax
0x24de:	mov	rsi, rbp
0x24e1:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x24e1:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x24e3:	seta	al
0x24e6:	sbb	al, 0
0x24e8:	test	al, al
0x24ea:	je	0x245f


0x245f:	mov	esi, 3
0x2464:	mov	edi, 1
0x2469:	mov	rbp, qword ptr [rip + 0x20bc80]
0x2470:	call	0x8f50


0x24f0:	xor	eax, eax
0x24f2:	mov	esi, 0x101
0x24f7:	mov	rdi, rbp
0x24fa:	mov	r12, qword ptr [rip + 0x20bbef]
0x2501:	call	0x46d0


0x2506:	test	eax, eax
0x2508:	mov	r14d, eax
0x250b:	js	0x2578


0x2578:	call	0x1c70


0x250d:	mov	rcx, qword ptr [rsp + 8]
0x2512:	mov	rdx, r12
0x2515:	mov	rsi, rbx
0x2518:	mov	edi, r14d
0x251b:	call	0x3510


0x2520:	mov	edi, r14d
0x2523:	mov	r13d, eax
0x2526:	call	0x1e90


0x252b:	test	eax, eax
0x252d:	jne	0x25ea


0x2533:	test	r13b, r13b
0x2536:	je	0x2543


0x25ea:	lea	rsi, [rip + 0x71c6]
0x25f1:	mov	edx, 5
0x25f6:	xor	edi, edi
0x25f8:	xor	r13d, r13d
0x25fb:	call	0x1d70


0x2543:	and	byte ptr [rsp + 0x13], r13b
0x2548:	jmp	0x249f


0x2538:	cmp	dword ptr [rsp + 0x68], 0
0x253d:	jne	0x268e


0x249f:	mov	rdi, rbx
0x24a2:	add	r15, 8
0x24a6:	call	0x1c50


0x268e:	mov	rdi, rbp
0x2691:	call	0x8920


0x2696:	mov	r14, rax
0x2699:	mov	rdi, rax
0x269c:	mov	qword ptr [rsp + 0x28], rax
0x26a1:	call	0x4620


0x26a6:	mov	rdi, r14
0x26a9:	mov	r12, rax
0x26ac:	call	0x4540


0x26b1:	xor	edi, edi
0x26b3:	mov	rdx, rax
0x26b6:	mov	esi, 3
0x26bb:	mov	qword ptr [rsp + 0x40], rax
0x26c0:	call	0x6fa0


0x24ab:	cmp	r15, qword ptr [rsp]
0x24af:	je	0x25b9


0x25b9:	movzx	eax, byte ptr [rsp + 0x13]
0x25be:	xor	eax, 1
0x25c1:	mov	rcx, qword ptr [rsp + 0x78]
0x25c6:	xor	rcx, qword ptr fs:[0x28]
0x25cf:	movzx	eax, al
0x25d2:	jne	0x29e6


0x2600:	mov	rbp, rax
0x2603:	call	0x1c70


0x2608:	mov	esi, dword ptr [rax]
0x260a:	mov	rcx, rbx
0x260d:	mov	rdx, rbp
0x2610:	xor	edi, edi
0x2612:	xor	eax, eax
0x2614:	call	0x2020


0x2619:	jmp	0x2543


0x257d:	cmp	dword ptr [rax], 0xd
0x2580:	mov	r13, rax
0x2583:	je	0x2651


0x2651:	cmp	byte ptr [rsp + 0x50], 0
0x2656:	je	0x2589


0x2589:	lea	rsi, [rip + 0x7fe0]
0x2590:	mov	edx, 5
0x2595:	xor	edi, edi
0x2597:	call	0x1d70


0x265c:	mov	esi, 0x80
0x2661:	mov	rdi, rbp
0x2664:	call	0x2000


0x2000:	jmp	qword ptr [rip + 0x20bf3a]




0x259c:	mov	esi, dword ptr [r13]
0x25a0:	mov	rdx, rax
0x25a3:	mov	rcx, rbx
0x25a6:	xor	edi, edi
0x25a8:	xor	eax, eax
0x25aa:	xor	r13d, r13d
0x25ad:	call	0x2020


0x25b2:	jmp	0x2543


0x2475:	test	eax, eax
0x2477:	js	0x261e


0x261e:	lea	rsi, [rip + 0x7181]
0x2625:	mov	edx, 5
0x262a:	xor	edi, edi
0x262c:	call	0x1d70


0x247d:	test	ah, 4
0x2480:	jne	0x254d


0x2486:	mov	rcx, qword ptr [rsp + 8]
0x248b:	mov	rdx, rbp
0x248e:	mov	rsi, rbx
0x2491:	mov	edi, 1
0x2496:	call	0x3510


0x254d:	lea	rsi, [rip + 0x7fec]
0x2554:	mov	edx, 5
0x2559:	xor	edi, edi
0x255b:	call	0x1d70


0x249b:	and	byte ptr [rsp + 0x13], al
0x249f:	mov	rdi, rbx
0x24a2:	add	r15, 8
0x24a6:	call	0x1c50


0x2560:	mov	rcx, rbx
0x2563:	mov	rdx, rax
0x2566:	xor	esi, esi
0x2568:	xor	eax, eax
0x256a:	xor	edi, edi
0x256c:	call	0x2020


0x2571:	xor	eax, eax
0x2573:	jmp	0x249b


0x2631:	mov	rbp, rax
0x2634:	call	0x1c70


0x2639:	mov	esi, dword ptr [rax]
0x263b:	mov	rcx, rbx
0x263e:	xor	eax, eax
0x2640:	mov	rdx, rbp
0x2643:	xor	edi, edi
0x2645:	call	0x2020


0x264a:	xor	eax, eax
0x264c:	jmp	0x249b


0x2669:	test	eax, eax
0x266b:	jne	0x2589


0x2671:	mov	esi, 0x101
0x2676:	mov	rdi, rbp
0x2679:	call	0x46d0


0x267e:	test	eax, eax
0x2680:	mov	r14d, eax
0x2683:	jns	0x250d


0x2689:	jmp	0x2589


0x26c5:	mov	rdi, rax
0x26c8:	call	0x8920


0x26cd:	cmp	dword ptr [rsp + 0x68], 3
0x26d2:	mov	qword ptr [rsp + 0x18], rax
0x26d7:	mov	eax, dword ptr [rsp + 0x20]
0x26db:	mov	dword ptr [rsp + 0x14], eax
0x26df:	je	0x28c4


0x28c4:	mov	rdi, qword ptr [rsp + 0x40]
0x28c9:	mov	esi, 0x10900
0x28ce:	xor	eax, eax
0x28d0:	call	0x46d0


0x26e5:	cmp	byte ptr [rsp + 0x6c], 0
0x26ea:	jne	0x289b


0x26f0:	cmp	dword ptr [rsp + 0x68], 1
0x26f5:	je	0x27ca


0x289b:	lea	rsi, [rip + 0x6f29]
0x28a2:	xor	edi, edi
0x28a4:	mov	edx, 5
0x28a9:	call	0x1d70


0x27ca:	mov	rdi, rbp
0x27cd:	call	0x1c90


0x26fb:	mov	rdi, r12
0x26fe:	mov	r14, r12
0x2701:	lea	r12, [r12 - 1]
0x2706:	call	0x4680


0x1c90:	jmp	qword ptr [rip + 0x20c0f2]




0x270b:	mov	qword ptr [rsp + 0x48], r15
0x2710:	mov	r15, qword ptr [rsp + 0x28]
0x2715:	sub	rax, 1
0x2719:	mov	qword ptr [rsp + 0x38], rbx
0x271e:	mov	byte ptr [rsp + 0x30], r13b
0x2723:	mov	rbx, rax
0x2726:	mov	byte ptr [rsp + 0x27], r13b
0x272b:	cmp	rbx, -1
0x272f:	lea	rdx, [rbx + 1]
0x2733:	je	0x27ba


0x27ba:	movzx	r13d, byte ptr [rsp + 0x27]
0x27c0:	mov	rbx, qword ptr [rsp + 0x38]
0x27c5:	mov	r15, qword ptr [rsp + 0x48]
0x27ca:	mov	rdi, rbp
0x27cd:	call	0x1c90


0x2739:	mov	esi, 0x30
0x273e:	mov	rdi, r14
0x2741:	call	0x1e70


0x2746:	mov	byte ptr [r14 + rbx + 1], 0
0x274c:	mov	edx, 0xffffff9c
0x2751:	mov	r8d, 1
0x2757:	mov	rcx, r15
0x275a:	mov	rsi, rbp
0x275d:	mov	edi, edx
0x275f:	call	0x7e20


0x2764:	test	eax, eax
0x2766:	je	0x28de


0x28de:	cmp	dword ptr [rsp + 0x14], 0
0x28e3:	js	0x2906


0x276c:	call	0x1c70


0x2906:	cmp	byte ptr [rsp + 0x6c], 0
0x290b:	je	0x294e


0x28e5:	mov	rsi, qword ptr [rsp + 0x18]
0x28ea:	mov	edi, dword ptr [rsp + 0x14]
0x28ee:	call	0x2bb0


0x294e:	mov	rdi, r14
0x2951:	lea	rdx, [rbx + 2]
0x2955:	mov	rsi, r14
0x2958:	sub	rdi, r15
0x295b:	add	rdi, rbp
0x295e:	call	0x1f00


0x290d:	cmp	byte ptr [rsp + 0x30], 0
0x2912:	mov	rcx, qword ptr [rsp + 0x38]
0x2917:	lea	rsi, [rip + 0x6ed8]
0x291e:	mov	edx, 5
0x2923:	cmove	rcx, rbp
0x2927:	xor	edi, edi
0x2929:	mov	qword ptr [rsp + 0x30], rcx
0x292e:	call	0x1d70


0x2963:	sub	rbx, 1
0x2967:	jmp	0x272b


0x272b:	cmp	rbx, -1
0x272f:	lea	rdx, [rbx + 1]
0x2733:	je	0x27ba


0x28f3:	movzx	ecx, byte ptr [rsp + 0x27]
0x28f8:	test	eax, eax
0x28fa:	mov	eax, 0
0x28ff:	cmovne	ecx, eax
0x2902:	mov	byte ptr [rsp + 0x27], cl
0x2906:	cmp	byte ptr [rsp + 0x6c], 0
0x290b:	je	0x294e


0x2771:	cmp	dword ptr [rax], 0x11
0x2774:	jne	0x2963


0x277a:	lea	r13, [r14 + rbx]
0x277e:	jmp	0x2792


0x2792:	movsx	esi, byte ptr [r13]
0x2797:	lea	rdi, [rip + 0x7e22]
0x279e:	call	0x1de0


0x27a3:	test	rax, rax
0x27a6:	je	0x29c7


0x29c7:	lea	rcx, [rip + 0x7bd2]
0x29ce:	lea	rsi, [rip + 0x6e03]
0x29d5:	lea	rdi, [rip + 0x6e82]
0x29dc:	mov	edx, 0x40c
0x29e1:	call	0x1e50


0x27ac:	movzx	eax, byte ptr [rax + 1]
0x27b0:	test	al, al
0x27b2:	je	0x2780


0x2780:	mov	byte ptr [r13], 0x30
0x2785:	sub	r13, 1
0x2789:	cmp	r12, r13
0x278c:	je	0x2963


0x27b4:	mov	byte ptr [r13], al
0x27b8:	jmp	0x274c


0x274c:	mov	edx, 0xffffff9c
0x2751:	mov	r8d, 1
0x2757:	mov	rcx, r15
0x275a:	mov	rsi, rbp
0x275d:	mov	edi, edx
0x275f:	call	0x7e20


0x2933:	mov	rcx, qword ptr [rsp + 0x30]
0x2938:	mov	rdx, rax
0x293b:	mov	r8, r15
0x293e:	xor	esi, esi
0x2940:	xor	edi, edi
0x2942:	xor	eax, eax
0x2944:	call	0x2020


0x2949:	mov	byte ptr [rsp + 0x30], 0
0x294e:	mov	rdi, r14
0x2951:	lea	rdx, [rbx + 2]
0x2955:	mov	rsi, r14
0x2958:	sub	rdi, r15
0x295b:	add	rdi, rbp
0x295e:	call	0x1f00


0x28ae:	mov	rcx, rbx
0x28b1:	mov	rdx, rax
0x28b4:	xor	esi, esi
0x28b6:	xor	edi, edi
0x28b8:	xor	eax, eax
0x28ba:	call	0x2020


0x28bf:	jmp	0x26f0


0x28d5:	mov	dword ptr [rsp + 0x14], eax
0x28d9:	jmp	0x26e5


0x27d2:	test	eax, eax
0x27d4:	jne	0x2867


0x27da:	cmp	byte ptr [rsp + 0x6c], 0
0x27df:	jne	0x296c


0x2867:	lea	rsi, [rip + 0x6f9a]
0x286e:	mov	edx, 5
0x2873:	xor	edi, edi
0x2875:	xor	r13d, r13d
0x2878:	call	0x1d70


0x27e5:	mov	r14d, dword ptr [rsp + 0x14]
0x27ea:	test	r14d, r14d
0x27ed:	js	0x2844


0x296c:	lea	rsi, [rip + 0x6eaa]
0x2973:	xor	edi, edi
0x2975:	mov	edx, 5
0x297a:	call	0x1d70


0x2844:	mov	rdi, qword ptr [rsp + 0x28]
0x2849:	call	0x1c50


0x27ef:	mov	rsi, qword ptr [rsp + 0x18]
0x27f4:	mov	edi, r14d
0x27f7:	call	0x2bb0


0x27fc:	mov	edi, r14d
0x27ff:	test	eax, eax
0x2801:	mov	eax, 0
0x2806:	cmovne	r13d, eax
0x280a:	call	0x1e90


0x280f:	test	eax, eax
0x2811:	je	0x2844


0x2813:	lea	rsi, [rip + 0x6f9d]
0x281a:	mov	edx, 5
0x281f:	xor	edi, edi
0x2821:	xor	r13d, r13d
0x2824:	call	0x1d70


0x284e:	mov	rdi, qword ptr [rsp + 0x40]
0x2853:	call	0x1c50


0x2858:	mov	rdi, qword ptr [rsp + 0x18]
0x285d:	call	0x1c50


0x2862:	jmp	0x2543


0x2829:	mov	rbp, rax
0x282c:	call	0x1c70


0x2831:	mov	rcx, qword ptr [rsp + 0x18]
0x2836:	mov	esi, dword ptr [rax]
0x2838:	mov	rdx, rbp
0x283b:	xor	edi, edi
0x283d:	xor	eax, eax
0x283f:	call	0x2020


0x297f:	mov	rcx, rbx
0x2982:	mov	rdx, rax
0x2985:	xor	esi, esi
0x2987:	xor	edi, edi
0x2989:	xor	eax, eax
0x298b:	call	0x2020


0x2990:	jmp	0x27e5


0x287d:	mov	rbp, rax
0x2880:	call	0x1c70


0x2885:	mov	esi, dword ptr [rax]
0x2887:	mov	rcx, rbx
0x288a:	mov	rdx, rbp
0x288d:	xor	edi, edi
0x288f:	xor	eax, eax
0x2891:	call	0x2020


0x2896:	jmp	0x27e5


0x29fa:	mov	rbx, rax
0x29fd:	call	0x1c70


0x2a02:	mov	esi, dword ptr [rax]
0x2a04:	lea	rdx, [rip + 0x7d5d]
0x2a0b:	mov	rcx, rbx
0x2a0e:	mov	edi, 1
0x2a13:	xor	eax, eax
0x2a15:	call	0x2020


0x44fa:	mov	esi, dword ptr [rbx]
0x44fc:	lea	rdx, [rip + 0x6274]
0x4503:	mov	rcx, rax
0x4506:	mov	r8, rbp
0x4509:	xor	edi, edi
0x450b:	xor	eax, eax
0x450d:	call	0x2020


0x4243:	mov	rdx, r12
0x4246:	mov	rbp, rax
0x4249:	mov	esi, 8
0x424e:	xor	edi, edi
0x4250:	call	0x6d80


0x4255:	mov	r8, rbp
0x4258:	mov	rdx, rbx
0x425b:	mov	rcx, rax
0x425e:	pop	rbx
0x425f:	pop	rbp
0x4260:	pop	r12
0x4262:	xor	esi, esi
0x4264:	xor	edi, edi
0x4266:	xor	eax, eax
0x4268:	jmp	0x2020


0x4403:	mov	rdx, r15
0x4406:	mov	rsi, rbp
0x4409:	mov	rdi, rbx
0x440c:	call	0x4290


0x4411:	call	r13


0x691c:	add	rsp, 0x20
0x6920:	mov	r11, qword ptr [rsp + 0x10]
0x6925:	cmp	r11, rax
0x6928:	ja	0x6991


0x692a:	lea	rsi, [rax + 1]
0x692e:	lea	rax, [rip + 0x2077eb]
0x6935:	cmp	r12, rax
0x6938:	mov	qword ptr [rbx], rsi
0x693b:	je	0x694f


0x6991:	mov	eax, dword ptr [rsp + 0x18]
0x6995:	mov	dword ptr [r13], eax
0x6999:	add	rsp, 0x28
0x699d:	mov	rax, r12
0x69a0:	pop	rbx
0x69a1:	pop	rbp
0x69a2:	pop	r12
0x69a4:	pop	r13
0x69a6:	pop	r14
0x69a8:	pop	r15
0x69aa:	ret	


0x694f:	mov	rdi, rsi
0x6952:	mov	qword ptr [rsp + 0x10], rsi
0x6957:	call	0x86f0


0x693d:	mov	rdi, r12
0x6940:	mov	qword ptr [rsp + 0x10], rsi
0x6945:	call	0x1c50


0x694a:	mov	rsi, qword ptr [rsp + 0x10]
0x694f:	mov	rdi, rsi
0x6952:	mov	qword ptr [rsp + 0x10], rsi
0x6957:	call	0x86f0


0x695c:	sub	rsp, 8
0x6960:	mov	qword ptr [rbx + 8], rax
0x6964:	mov	r8d, dword ptr [rbp]
0x6968:	push	qword ptr [rbp + 0x30]
0x696b:	push	qword ptr [rbp + 0x28]
0x696e:	mov	rcx, r14
0x6971:	push	r15
0x6973:	mov	r9d, dword ptr [rsp + 0x3c]
0x6978:	mov	rdi, rax
0x697b:	mov	rdx, qword ptr [rsp + 0x28]
0x6980:	mov	rsi, qword ptr [rsp + 0x30]
0x6985:	mov	r12, rax
0x6988:	call	0x55f0


0x70a2:	mov	rdi, qword ptr [rsp + 0x38]
0x70a7:	xor	rdi, qword ptr fs:[0x28]
0x70b0:	jne	0x70bc


0x70b2:	add	rsp, 0x48
0x70b6:	ret	


0x70bc:	call	0x1da0


0x6def:	mov	rcx, qword ptr [rsp + 0x38]
0x6df4:	xor	rcx, qword ptr fs:[0x28]
0x6dfd:	jne	0x6e09


0x6dff:	add	rsp, 0x48
0x6e03:	ret	


0x6e09:	call	0x1da0


0x6e7b:	mov	rdx, qword ptr [rsp + 0x38]
0x6e80:	xor	rdx, qword ptr fs:[0x28]
0x6e89:	jne	0x6e95


0x6e8b:	add	rsp, 0x48
0x6e8f:	ret	


0x6e95:	call	0x1da0


0x700f:	mov	rcx, qword ptr [rsp + 0x38]
0x7014:	xor	rcx, qword ptr fs:[0x28]
0x701d:	jne	0x7029


0x701f:	add	rsp, 0x48
0x7023:	ret	


0x7029:	call	0x1da0


0x6f3e:	mov	rsi, qword ptr [rsp + 0x38]
0x6f43:	xor	rsi, qword ptr fs:[0x28]
0x6f4c:	jne	0x6f53


0x6f4e:	add	rsp, 0x48
0x6f52:	ret	


0x6f53:	call	0x1da0


0x698d:	add	rsp, 0x20
0x6991:	mov	eax, dword ptr [rsp + 0x18]
0x6995:	mov	dword ptr [r13], eax
0x6999:	add	rsp, 0x28
0x699d:	mov	rax, r12
0x69a0:	pop	rbx
0x69a1:	pop	rbp
0x69a2:	pop	r12
0x69a4:	pop	r13
0x69a6:	pop	r14
0x69a8:	pop	r15
0x69aa:	ret	


0x6bdc:	lea	rsi, [rax + 1]
0x6be0:	mov	qword ptr [rsp + 0x48], rax
0x6be5:	add	rsp, 0x20
0x6be9:	mov	rdi, rsi
0x6bec:	mov	qword ptr [rsp + 0x18], rsi
0x6bf1:	call	0x86f0


0x6bf6:	mov	qword ptr [rsp + 0x10], rax
0x6bfb:	sub	rsp, 8
0x6bff:	push	qword ptr [rbx + 0x30]
0x6c02:	push	qword ptr [rbx + 0x28]
0x6c05:	mov	r10, qword ptr [rsp + 0x38]
0x6c0a:	mov	r9d, ebp
0x6c0d:	mov	r8d, dword ptr [rbx]
0x6c10:	mov	rcx, r15
0x6c13:	mov	rdx, r14
0x6c16:	mov	rdi, rax
0x6c19:	push	r10
0x6c1b:	mov	rsi, qword ptr [rsp + 0x38]
0x6c20:	call	0x55f0


0x6c25:	mov	eax, dword ptr [rsp + 0x2c]
0x6c29:	add	rsp, 0x20
0x6c2d:	test	r12, r12
0x6c30:	mov	dword ptr [r13], eax
0x6c34:	je	0x6c3f


0x6c3f:	mov	rax, qword ptr [rsp + 0x10]
0x6c44:	add	rsp, 0x38
0x6c48:	pop	rbx
0x6c49:	pop	rbp
0x6c4a:	pop	r12
0x6c4c:	pop	r13
0x6c4e:	pop	r14
0x6c50:	pop	r15
0x6c52:	ret	


0x6c36:	mov	r11, qword ptr [rsp + 0x28]
0x6c3b:	mov	qword ptr [r12], r11
0x6c3f:	mov	rax, qword ptr [rsp + 0x10]
0x6c44:	add	rsp, 0x38
0x6c48:	pop	rbx
0x6c49:	pop	rbp
0x6c4a:	pop	r12
0x6c4c:	pop	r13
0x6c4e:	pop	r14
0x6c50:	pop	r15
0x6c52:	ret	


0x6b51:	mov	dword ptr [rbp], r12d
0x6b55:	add	rsp, 0x38
0x6b59:	pop	rbx
0x6b5a:	pop	rbp
0x6b5b:	pop	r12
0x6b5d:	pop	r13
0x6b5f:	pop	r14
0x6b61:	pop	r15
0x6b63:	ret	


0x4414:	mov	rax, -1
0x441b:	jmp	0x43e6


0x77b2:	mov	rcx, qword ptr [r12]
0x77b6:	mov	rdx, rbp
0x77b9:	mov	rdi, rbx
0x77bc:	mov	esi, 1
0x77c1:	call	0x1d30


0x951d:	add	rbx, 1
0x9521:	cmp	rbp, rbx
0x9524:	jne	0x9510


0x9510:	mov	rdx, r15
0x9513:	mov	rsi, r14
0x9516:	mov	edi, r13d
0x9519:	call	qword ptr [r12 + rbx*8]


0x89f2:	mov	esi, dword ptr [r14]
0x89f5:	mov	r8, rax
0x89f8:	mov	eax, 0
0x89fd:	lea	rdx, [rip + 0x1d73]
0x8a04:	mov	rcx, r13
0x8a07:	cmp	esi, 0x16
0x8a0a:	cmove	esi, eax
0x8a0d:	test	ebx, ebx
0x8a0f:	mov	eax, 1
0x8a14:	cmove	ebx, eax
0x8a17:	xor	eax, eax
0x8a19:	mov	edi, ebx
0x8a1b:	call	0x2020


0x8a20:	mov	rbp, qword ptr [rsp]
0x8a24:	mov	rdx, qword ptr [rsp + 8]
0x8a29:	xor	rdx, qword ptr fs:[0x28]
0x8a32:	mov	rax, rbp
0x8a35:	jne	0x8a7b


0x433e:	mov	rdi, qword ptr [rip + 0x209d9b]
0x4345:	lea	rdx, [rip + 0x641a]
0x434c:	mov	rcx, rax
0x434f:	mov	esi, 1
0x4354:	xor	eax, eax
0x4356:	call	0x20e0


0x435b:	mov	r15, qword ptr [r14 + rbx*8]
0x435f:	test	r15, r15
0x4362:	jne	0x4318


0x42ef:	mov	rdi, qword ptr [rip + 0x209dea]
0x42f6:	lea	rdx, [rip + 0x6461]
0x42fd:	mov	rcx, rax
0x4300:	mov	esi, 1
0x4305:	xor	eax, eax
0x4307:	add	rbp, r12
0x430a:	call	0x20e0


0x430f:	mov	r15, qword ptr [r14 + rbx*8]
0x4313:	test	r15, r15
0x4316:	je	0x4368


0x73c0:	mov	rbp, rax
0x73c3:	call	0x1c70


0x73c8:	cmp	dword ptr [rax], 0
0x73cb:	mov	rbx, rax
0x73ce:	mov	edx, 5
0x73d3:	je	0x73fd


0x73fd:	lea	rsi, [rip + 0x3924]
0x7404:	xor	edi, edi
0x7406:	call	0x1d70


0x73d5:	lea	rsi, [rip + 0x395c]
0x73dc:	xor	edi, edi
0x73de:	call	0x1d70


0x73e3:	mov	edi, dword ptr [rip + 0x206c37]
0x73e9:	mov	esi, dword ptr [rbx]
0x73eb:	mov	rdx, rax
0x73ee:	mov	rcx, rbp
0x73f1:	xor	eax, eax
0x73f3:	call	0x2020


0x740b:	jmp	0x73e3






0x8360:	lea	rsi, [rip + 0x2b59]
0x8367:	mov	edx, 5
0x836c:	xor	edi, edi
0x836e:	mov	r14, qword ptr [rbx + 0x18]
0x8372:	mov	r13, qword ptr [rbx + 0x10]
0x8376:	mov	r12, qword ptr [rbx + 8]
0x837a:	mov	rbx, qword ptr [rbx]
0x837d:	call	0x1d70


0x8180:	mov	r9, qword ptr [rbx + 0x38]
0x8184:	mov	rax, qword ptr [rbx + 0x10]
0x8188:	lea	rsi, [rip + 0x2dd1]
0x818f:	mov	r8, qword ptr [rbx + 8]
0x8193:	mov	edx, 5
0x8198:	xor	edi, edi
0x819a:	mov	r13, qword ptr [rbx + 0x30]
0x819e:	mov	r12, qword ptr [rbx + 0x28]
0x81a2:	mov	qword ptr [rsp + 0x10], r9
0x81a7:	mov	r15, qword ptr [rbx + 0x20]
0x81ab:	mov	r14, qword ptr [rbx + 0x18]
0x81af:	mov	qword ptr [rsp], rax
0x81b3:	mov	qword ptr [rsp + 8], r8
0x81b8:	mov	rbx, qword ptr [rbx]
0x81bb:	call	0x1d70


0x8288:	mov	rbx, qword ptr [rbx]
0x828b:	lea	rsi, [rip + 0x2adc]
0x8292:	mov	edx, 5
0x8297:	xor	edi, edi
0x8299:	call	0x1d70


0x82c8:	mov	r12, qword ptr [rbx + 8]
0x82cc:	lea	rsi, [rip + 0x2aab]
0x82d3:	mov	rbx, qword ptr [rbx]
0x82d6:	mov	edx, 5
0x82db:	xor	edi, edi
0x82dd:	call	0x1d70


0x83e8:	mov	r8, qword ptr [rbx + 8]
0x83ec:	mov	r12, qword ptr [rbx + 0x28]
0x83f0:	lea	rsi, [rip + 0x2b11]
0x83f7:	mov	r15, qword ptr [rbx + 0x20]
0x83fb:	mov	r14, qword ptr [rbx + 0x18]
0x83ff:	mov	edx, 5
0x8404:	mov	r13, qword ptr [rbx + 0x10]
0x8408:	xor	edi, edi
0x840a:	mov	rbx, qword ptr [rbx]
0x840d:	mov	qword ptr [rsp], r8
0x8411:	call	0x1d70


0x8310:	mov	r13, qword ptr [rbx + 0x10]
0x8314:	mov	r12, qword ptr [rbx + 8]
0x8318:	lea	rsi, [rip + 0x2a76]
0x831f:	mov	rbx, qword ptr [rbx]
0x8322:	mov	edx, 5
0x8327:	xor	edi, edi
0x8329:	call	0x1d70


0x8450:	mov	r9, qword ptr [rbx + 0x10]
0x8454:	mov	r13, qword ptr [rbx + 0x30]
0x8458:	lea	rsi, [rip + 0x2ad1]
0x845f:	mov	r12, qword ptr [rbx + 0x28]
0x8463:	mov	r15, qword ptr [rbx + 0x20]
0x8467:	mov	edx, 5
0x846c:	mov	r14, qword ptr [rbx + 0x18]
0x8470:	mov	r8, qword ptr [rbx + 8]
0x8474:	xor	edi, edi
0x8476:	mov	qword ptr [rsp + 8], r9
0x847b:	mov	rbx, qword ptr [rbx]
0x847e:	mov	qword ptr [rsp], r8
0x8482:	call	0x1d70


0x8230:	mov	r10, qword ptr [rbx + 0x40]
0x8234:	mov	r9, qword ptr [rbx + 0x38]
0x8238:	lea	rsi, [rip + 0x2d51]
0x823f:	mov	rax, qword ptr [rbx + 0x10]
0x8243:	mov	r8, qword ptr [rbx + 8]
0x8247:	mov	edx, 5
0x824c:	mov	r13, qword ptr [rbx + 0x30]
0x8250:	mov	r12, qword ptr [rbx + 0x28]
0x8254:	mov	r15, qword ptr [rbx + 0x20]
0x8258:	mov	r14, qword ptr [rbx + 0x18]
0x825c:	mov	rbx, qword ptr [rbx]
0x825f:	mov	qword ptr [rsp + 0x18], r10
0x8264:	mov	qword ptr [rsp + 0x10], r9
0x8269:	mov	qword ptr [rsp], rax
0x826d:	mov	qword ptr [rsp + 8], r8
0x8272:	xor	edi, edi
0x8274:	call	0x1d70


0x81f6:	add	rsp, 0x28
0x81fa:	pop	rbx
0x81fb:	pop	rbp
0x81fc:	pop	r12
0x81fe:	pop	r13
0x8200:	pop	r14
0x8202:	pop	r15
0x8204:	ret	


0x83b8:	mov	r15, qword ptr [rbx + 0x20]
0x83bc:	lea	rsi, [rip + 0x2b1d]
0x83c3:	mov	edx, 5
0x83c8:	xor	edi, edi
0x83ca:	mov	r14, qword ptr [rbx + 0x18]
0x83ce:	mov	r13, qword ptr [rbx + 0x10]
0x83d2:	mov	r12, qword ptr [rbx + 8]
0x83d6:	mov	rbx, qword ptr [rbx]
0x83d9:	call	0x1d70


0x83de:	push	r15
0x83e0:	jmp	0x8386


0x8386:	push	r14
0x8388:	mov	rdx, rax
0x838b:	mov	r9, r13
0x838e:	mov	r8, r12
0x8391:	mov	rcx, rbx
0x8394:	mov	rdi, rbp
0x8397:	mov	esi, 1
0x839c:	xor	eax, eax
0x839e:	call	0x20e0


0x83a3:	pop	rax
0x83a4:	pop	rdx
0x83a5:	add	rsp, 0x28
0x83a9:	pop	rbx
0x83aa:	pop	rbp
0x83ab:	pop	r12
0x83ad:	pop	r13
0x83af:	pop	r14
0x83b1:	pop	r15
0x83b3:	ret	


0x8487:	push	r13
0x8489:	push	r12
0x848b:	push	r15
0x848d:	push	r14
0x848f:	mov	r9, qword ptr [rsp + 0x28]
0x8494:	jmp	0x8423


0x8423:	mov	r8, qword ptr [rsp + 0x20]
0x8428:	mov	rcx, rbx
0x842b:	mov	rdx, rax
0x842e:	mov	rdi, rbp
0x8431:	mov	esi, 1
0x8436:	xor	eax, eax
0x8438:	call	0x20e0


0x843d:	add	rsp, 0x20
0x8441:	add	rsp, 0x28
0x8445:	pop	rbx
0x8446:	pop	rbp
0x8447:	pop	r12
0x8449:	pop	r13
0x844b:	pop	r14
0x844d:	pop	r15
0x844f:	ret	


0x832e:	add	rsp, 0x28
0x8332:	mov	r9, r13
0x8335:	mov	r8, r12
0x8338:	mov	rcx, rbx
0x833b:	mov	rdi, rbp
0x833e:	mov	rdx, rax
0x8341:	pop	rbx
0x8342:	pop	rbp
0x8343:	pop	r12
0x8345:	pop	r13
0x8347:	pop	r14
0x8349:	pop	r15
0x834b:	mov	esi, 1
0x8350:	xor	eax, eax
0x8352:	jmp	0x20e0


0x8416:	sub	rsp, 8
0x841a:	mov	r9, r13
0x841d:	push	r12
0x841f:	push	r15
0x8421:	push	r14
0x8423:	mov	r8, qword ptr [rsp + 0x20]
0x8428:	mov	rcx, rbx
0x842b:	mov	rdx, rax
0x842e:	mov	rdi, rbp
0x8431:	mov	esi, 1
0x8436:	xor	eax, eax
0x8438:	call	0x20e0


0x82e2:	add	rsp, 0x28
0x82e6:	mov	r8, r12
0x82e9:	mov	rcx, rbx
0x82ec:	mov	rdi, rbp
0x82ef:	mov	rdx, rax
0x82f2:	mov	esi, 1
0x82f7:	pop	rbx
0x82f8:	pop	rbp
0x82f9:	pop	r12
0x82fb:	pop	r13
0x82fd:	pop	r14
0x82ff:	pop	r15
0x8301:	xor	eax, eax
0x8303:	jmp	0x20e0


0x829e:	add	rsp, 0x28
0x82a2:	mov	rcx, rbx
0x82a5:	mov	rdi, rbp
0x82a8:	pop	rbx
0x82a9:	pop	rbp
0x82aa:	pop	r12
0x82ac:	pop	r13
0x82ae:	pop	r14
0x82b0:	pop	r15
0x82b2:	mov	rdx, rax
0x82b5:	mov	esi, 1
0x82ba:	xor	eax, eax
0x82bc:	jmp	0x20e0


0x81c0:	sub	rsp, 8
0x81c4:	mov	r9, qword ptr [rsp + 0x18]
0x81c9:	mov	rdx, rax
0x81cc:	mov	rcx, rbx
0x81cf:	mov	esi, 1
0x81d4:	mov	rdi, rbp
0x81d7:	xor	eax, eax
0x81d9:	push	r9
0x81db:	push	r13
0x81dd:	push	r12
0x81df:	push	r15
0x81e1:	push	r14
0x81e3:	mov	r9, qword ptr [rsp + 0x30]
0x81e8:	mov	r8, qword ptr [rsp + 0x38]
0x81ed:	call	0x20e0


0x8382:	sub	rsp, 8
0x8386:	push	r14
0x8388:	mov	rdx, rax
0x838b:	mov	r9, r13
0x838e:	mov	r8, r12
0x8391:	mov	rcx, rbx
0x8394:	mov	rdi, rbp
0x8397:	mov	esi, 1
0x839c:	xor	eax, eax
0x839e:	call	0x20e0


0x6190:	sub	rsp, 8
0x6194:	mov	rcx, rbp
0x6197:	mov	rsi, r13
0x619a:	push	qword ptr [rsp + 0x68]
0x619e:	push	qword ptr [rsp + 0x78]
0x61a2:	mov	rdi, r14
0x61a5:	push	0
0x61a7:	mov	r9d, dword ptr [rsp + 0x98]
0x61af:	mov	r8d, dword ptr [rsp + 0x28]
0x61b4:	mov	rdx, qword ptr [rsp + 0x30]
0x61b9:	and	r9d, 0xfffffffd
0x61bd:	call	0x55f0


0x61c2:	add	rsp, 0x20
0x61c6:	mov	r15, rax
0x61c9:	mov	rbx, qword ptr [rsp + 0xa8]
0x61d1:	xor	rbx, qword ptr fs:[0x28]
0x61da:	mov	rax, r15
0x61dd:	jne	0x67e3


0x61e3:	add	rsp, 0xb8
0x61ea:	pop	rbx
0x61eb:	pop	rbp
0x61ec:	pop	r12
0x61ee:	pop	r13
0x61f0:	pop	r14
0x61f2:	pop	r15
0x61f4:	ret	


0x67e3:	call	0x1da0


0x678d:	sub	rsp, 8
0x6791:	mov	r8d, 5
0x6797:	mov	rcx, r11
0x679a:	push	qword ptr [rsp + 0x68]
0x679e:	push	qword ptr [rsp + 0x78]
0x67a2:	mov	rdi, r14
0x67a5:	push	qword ptr [rsp + 0x38]
0x67a9:	mov	r9d, dword ptr [rsp + 0x98]
0x67b1:	mov	rdx, qword ptr [rsp + 0x30]
0x67b6:	mov	rsi, qword ptr [rsp + 0x70]
0x67bb:	call	0x55f0


0x67c0:	add	rsp, 0x20
0x67c4:	mov	r15, rax
0x67c7:	jmp	0x61c9


0x61c9:	mov	rbx, qword ptr [rsp + 0xa8]
0x61d1:	xor	rbx, qword ptr fs:[0x28]
0x61da:	mov	rax, r15
0x61dd:	jne	0x67e3


0x1c30:	push	qword ptr [rip + 0x20c11a]
0x1c36:	jmp	qword ptr [rip + 0x20c11c]


0x1c3c:	nop	dword ptr [rax]


0x1c46:	push	0
0x1c4b:	jmp	0x1c30


0x1c56:	push	1
0x1c5b:	jmp	0x1c30


0x1c66:	push	2
0x1c6b:	jmp	0x1c30


0x1c76:	push	3
0x1c7b:	jmp	0x1c30


0x1c86:	push	4
0x1c8b:	jmp	0x1c30


0x1c96:	push	5
0x1c9b:	jmp	0x1c30


0x1ca6:	push	6
0x1cab:	jmp	0x1c30


0x1cb6:	push	7
0x1cbb:	jmp	0x1c30


0x1cc6:	push	8
0x1ccb:	jmp	0x1c30


0x1cd6:	push	9
0x1cdb:	jmp	0x1c30


0x1ce6:	push	0xa
0x1ceb:	jmp	0x1c30


0x1cf6:	push	0xb
0x1cfb:	jmp	0x1c30


0x1d06:	push	0xc
0x1d0b:	jmp	0x1c30


0x1d16:	push	0xd
0x1d1b:	jmp	0x1c30


0x1d26:	push	0xe
0x1d2b:	jmp	0x1c30


0x1d36:	push	0xf
0x1d3b:	jmp	0x1c30


0x1d46:	push	0x10
0x1d4b:	jmp	0x1c30


0x1d56:	push	0x11
0x1d5b:	jmp	0x1c30


0x1d66:	push	0x12
0x1d6b:	jmp	0x1c30


0x1d76:	push	0x13
0x1d7b:	jmp	0x1c30


0x1d86:	push	0x14
0x1d8b:	jmp	0x1c30


0x1d96:	push	0x15
0x1d9b:	jmp	0x1c30


0x1da6:	push	0x16
0x1dab:	jmp	0x1c30


0x1db6:	push	0x17
0x1dbb:	jmp	0x1c30


0x1dc6:	push	0x18
0x1dcb:	jmp	0x1c30


0x1dd6:	push	0x19
0x1ddb:	jmp	0x1c30


0x1de6:	push	0x1a
0x1deb:	jmp	0x1c30


0x1df6:	push	0x1b
0x1dfb:	jmp	0x1c30


0x1e06:	push	0x1c
0x1e0b:	jmp	0x1c30


0x1e16:	push	0x1d
0x1e1b:	jmp	0x1c30


0x1e26:	push	0x1e
0x1e2b:	jmp	0x1c30


0x1e36:	push	0x1f
0x1e3b:	jmp	0x1c30


0x1e46:	push	0x20
0x1e4b:	jmp	0x1c30


0x1e56:	push	0x21
0x1e5b:	jmp	0x1c30


0x1e66:	push	0x22
0x1e6b:	jmp	0x1c30


0x1e76:	push	0x23
0x1e7b:	jmp	0x1c30


0x1e86:	push	0x24
0x1e8b:	jmp	0x1c30


0x1e96:	push	0x25
0x1e9b:	jmp	0x1c30


0x1ea6:	push	0x26
0x1eab:	jmp	0x1c30


0x1eb6:	push	0x27
0x1ebb:	jmp	0x1c30


0x1ec6:	push	0x28
0x1ecb:	jmp	0x1c30


0x1ed6:	push	0x29
0x1edb:	jmp	0x1c30


0x1ee6:	push	0x2a
0x1eeb:	jmp	0x1c30


0x1ef6:	push	0x2b
0x1efb:	jmp	0x1c30


0x1f06:	push	0x2c
0x1f0b:	jmp	0x1c30


0x1f16:	push	0x2d
0x1f1b:	jmp	0x1c30


0x1f26:	push	0x2e
0x1f2b:	jmp	0x1c30


0x1f36:	push	0x2f
0x1f3b:	jmp	0x1c30


0x1f46:	push	0x30
0x1f4b:	jmp	0x1c30


0x1f56:	push	0x31
0x1f5b:	jmp	0x1c30


0x1f66:	push	0x32
0x1f6b:	jmp	0x1c30


0x1f76:	push	0x33
0x1f7b:	jmp	0x1c30


0x1f86:	push	0x34
0x1f8b:	jmp	0x1c30


0x1f96:	push	0x35
0x1f9b:	jmp	0x1c30


0x1fa6:	push	0x36
0x1fab:	jmp	0x1c30


0x1fb6:	push	0x37
0x1fbb:	jmp	0x1c30


0x1fc6:	push	0x38
0x1fcb:	jmp	0x1c30


0x1fd6:	push	0x39
0x1fdb:	jmp	0x1c30


0x1fe6:	push	0x3a
0x1feb:	jmp	0x1c30


0x1ff6:	push	0x3b
0x1ffb:	jmp	0x1c30


0x2006:	push	0x3c
0x200b:	jmp	0x1c30


0x2016:	push	0x3d
0x201b:	jmp	0x1c30


0x2026:	push	0x3e
0x202b:	jmp	0x1c30


0x2036:	push	0x3f
0x203b:	jmp	0x1c30


0x2046:	push	0x40
0x204b:	jmp	0x1c30


0x2056:	push	0x41
0x205b:	jmp	0x1c30


0x2066:	push	0x42
0x206b:	jmp	0x1c30


0x2076:	push	0x43
0x207b:	jmp	0x1c30


0x2086:	push	0x44
0x208b:	jmp	0x1c30


0x2096:	push	0x45
0x209b:	jmp	0x1c30


0x20a6:	push	0x46
0x20ab:	jmp	0x1c30


0x20b6:	push	0x47
0x20bb:	jmp	0x1c30


0x20c6:	push	0x48
0x20cb:	jmp	0x1c30


0x20d6:	push	0x49
0x20db:	jmp	0x1c30


0x20e6:	push	0x4a
0x20eb:	jmp	0x1c30


0x20f0:	jmp	qword ptr [rip + 0x20bec2]




0x20f6:	push	0x4b
0x20fb:	jmp	0x1c30


0x2100:	jmp	qword ptr [rip + 0x20beba]




0x2106:	push	0x4c
0x210b:	jmp	0x1c30


0x2116:	push	0x4d
0x211b:	jmp	0x1c30


0x2126:	push	0x4e
0x212b:	jmp	0x1c30


0x2a6a:	hlt	


0x2a6b:	nop	dword ptr [rax + rax]


0x2aa2:	nop	dword ptr [rax]
0x2aa6:	nop	word ptr cs:[rax + rax]


0x2af2:	nop	dword ptr [rax]
0x2af6:	nop	word ptr cs:[rax + rax]


0x2b3a:	nop	word ptr [rax + rax]


0x2b4a:	nop	word ptr [rax + rax]


0x2b5c:	nop	dword ptr [rax]


0x2baf:	nop	


0x3501:	nop	dword ptr [rax + rax]
0x3506:	nop	word ptr cs:[rax + rax]


0x3c1b:	nop	dword ptr [rax + rax]


0x40da:	nop	word ptr [rax + rax]


0x40ea:	nop	word ptr [rax + rax]


0x4206:	nop	word ptr cs:[rax + rax]


0x4283:	nop	dword ptr [rax]
0x4286:	nop	word ptr cs:[rax + rax]


0x441d:	nop	dword ptr [rax]


0x446d:	nop	dword ptr [rax]


0x4478:	nop	dword ptr [rax + rax]


0x4488:	nop	dword ptr [rax + rax]


0x4534:	nop	word ptr cs:[rax + rax]
0x453e:	nop	


0x4558:	nop	dword ptr [rax + rax]


0x45bd:	nop	dword ptr [rax]


0x461a:	nop	word ptr [rax + rax]


0x467c:	nop	dword ptr [rax]


0x46c7:	nop	word ptr [rax + rax]


0x473e:	nop	


0x4807:	nop	word ptr [rax + rax]


0x5217:	nop	word ptr [rax + rax]


0x5406:	nop	word ptr cs:[rax + rax]


0x5452:	nop	word ptr cs:[rax + rax]
0x545c:	nop	dword ptr [rax]


0x54ff:	nop	


0x55e7:	nop	word ptr [rax + rax]


0x5683:	mov	byte ptr [rsp + 0xe], 1
0x5688:	mov	byte ptr [rsp + 0x7c], 0
0x568d:	xor	r12d, r12d
0x5690:	mov	qword ptr [rsp + 0x50], 0
0x5699:	mov	byte ptr [rsp + 0xf], 1
0x569e:	mov	byte ptr [rsp + 0xd], 0
0x56a3:	lea	rax, [rip + 0x51bb]
0x56aa:	mov	qword ptr [rsp + 0x18], 1
0x56b3:	xor	r15d, r15d
0x56b6:	mov	dword ptr [rsp + 8], 2
0x56be:	mov	qword ptr [rsp + 0x48], rax
0x56c3:	xor	r11d, r11d
0x56c6:	mov	rax, rbp
0x56c9:	mov	r8d, r12d
0x56cc:	mov	rbp, r11
0x56cf:	mov	r11, rax
0x56d2:	nop	word ptr [rax + rax]
0x56d8:	cmp	r11, rbp
0x56db:	setne	r12b
0x56df:	cmp	r11, -1
0x56e3:	jne	0x56f2


0x56e5:	mov	rax, qword ptr [rsp + 0x10]
0x56ea:	cmp	byte ptr [rax + rbp], 0
0x56ee:	setne	r12b
0x56f2:	test	r12b, r12b
0x56f5:	je	0x5d50


0x56f2:	test	r12b, r12b
0x56f5:	je	0x5d50


0x5d50:	cmp	dword ptr [rsp + 8], 2
0x5d55:	movzx	ebx, byte ptr [rsp + 0xf]
0x5d5a:	mov	r12d, r8d
0x5d5d:	mov	rbp, r11
0x5d60:	sete	dl
0x5d63:	mov	eax, ebx
0x5d65:	test	r15, r15
0x5d68:	sete	cl
0x5d6b:	and	eax, edx
0x5d6d:	and	al, cl
0x5d6f:	jne	0x67d6


0x56fb:	cmp	dword ptr [rsp + 8], 2
0x5700:	mov	rdi, qword ptr [rsp + 0x10]
0x5705:	lea	r9, [rdi + rbp]
0x5709:	setne	al
0x570c:	and	al, byte ptr [rsp + 0xd]
0x5710:	mov	r10d, eax
0x5713:	je	0x57c0


0x5d75:	mov	eax, ebx
0x5d77:	xor	eax, 1
0x5d7a:	and	dl, al
0x5d7c:	je	0x66ec


0x67d6:	mov	dword ptr [rsp + 8], 2
0x67de:	jmp	0x6179


0x57c0:	movzx	ebx, byte ptr [r9]
0x57c4:	cmp	bl, 0x7e
0x57c7:	ja	0x5ae8


0x5719:	mov	rax, qword ptr [rsp + 0x18]
0x571e:	test	rax, rax
0x5721:	je	0x5b50


0x66ec:	mov	rbx, qword ptr [rsp + 0x48]
0x66f1:	test	rbx, rbx
0x66f4:	je	0x6722


0x5d82:	cmp	byte ptr [rsp + 0x7c], 0
0x5d87:	je	0x66ea


0x6179:	cmp	byte ptr [rsp + 0xd], 0
0x617e:	je	0x6190


0x57cd:	lea	rcx, [rip + 0x5118]
0x57d4:	movzx	edx, bl
0x57d7:	movsxd	rax, dword ptr [rcx + rdx*4]
0x57db:	add	rax, rcx
0x57de:	jmp	rax


0x5ae8:	cmp	qword ptr [rsp + 0x58], 1
0x5aee:	jne	0x5e98


0x5b50:	movzx	ebx, byte ptr [r9]
0x5b54:	cmp	bl, 0x7e
0x5b57:	ja	0x5ae0


0x5727:	cmp	r11, -1
0x572b:	lea	rbx, [rbp + rax]
0x5730:	jne	0x5760


0x6722:	cmp	r13, r15
0x6725:	jbe	0x61c9


0x66f6:	test	al, al
0x66f8:	je	0x6722


0x66ea:	mov	eax, edx
0x66ec:	mov	rbx, qword ptr [rsp + 0x48]
0x66f1:	test	rbx, rbx
0x66f4:	je	0x6722


0x5d8d:	cmp	byte ptr [rsp + 0xe], 0
0x5d92:	jne	0x678d


0x6180:	test	al, al
0x6182:	mov	eax, 4
0x6187:	cmove	eax, dword ptr [rsp + 8]
0x618c:	mov	dword ptr [rsp + 8], eax


0x5af4:	mov	qword ptr [rsp + 0x38], r11
0x5af9:	mov	byte ptr [rsp + 0x30], r8b
0x5afe:	mov	byte ptr [rsp + 0x28], r10b
0x5b03:	call	0x2110


0x5e98:	lea	rax, [rsp + 0xa0]
0x5ea0:	cmp	r11, -1
0x5ea4:	mov	qword ptr [rsp + 0xa0], 0
0x5eb0:	mov	qword ptr [rsp + 0x28], rax
0x5eb5:	jne	0x5ee4


0x5b59:	lea	rcx, [rip + 0x4f88]
0x5b60:	movzx	edx, bl
0x5b63:	movsxd	rax, dword ptr [rcx + rdx*4]
0x5b67:	add	rax, rcx
0x5b6a:	jmp	rax


0x5ae0:	xor	r10d, r10d
0x5ae3:	nop	dword ptr [rax + rax]
0x5ae8:	cmp	qword ptr [rsp + 0x58], 1
0x5aee:	jne	0x5e98


0x5732:	cmp	rax, 1
0x5736:	jbe	0x5760


0x5760:	cmp	rbx, r11
0x5763:	mov	byte ptr [rsp + 0x28], r10b
0x5768:	ja	0x5d20


0x672b:	mov	byte ptr [r14 + r15], 0
0x6730:	jmp	0x61c9


0x66fa:	movzx	ecx, byte ptr [rbx]
0x66fd:	mov	rax, rbx
0x6700:	test	cl, cl
0x6702:	je	0x6722


0x5d98:	test	r13, r13
0x5d9b:	sete	al
0x5d9e:	cmp	qword ptr [rsp + 0x50], 0
0x5da4:	setne	dl
0x5da7:	and	al, dl
0x5da9:	je	0x67cc


0x5eb7:	mov	rdi, qword ptr [rsp + 0x10]
0x5ebc:	mov	byte ptr [rsp + 0x40], r8b
0x5ec1:	mov	byte ptr [rsp + 0x38], r10b
0x5ec6:	mov	qword ptr [rsp + 0x30], r9
0x5ecb:	call	0x1d90


0x5ee4:	lea	rax, [rsp + 0x9c]
0x5eec:	xor	ecx, ecx
0x5eee:	mov	byte ptr [rsp + 0x7e], bl
0x5ef2:	mov	byte ptr [rsp + 0x7d], r8b
0x5ef7:	mov	rbx, rcx
0x5efa:	mov	qword ptr [rsp + 0x88], r9
0x5f02:	mov	qword ptr [rsp + 0x38], rax
0x5f07:	mov	byte ptr [rsp + 0x7f], r10b
0x5f0c:	mov	qword ptr [rsp + 0x80], r15
0x5f14:	mov	qword ptr [rsp + 0x40], r14
0x5f19:	mov	qword ptr [rsp + 0x70], r13
0x5f1e:	mov	qword ptr [rsp + 0x30], r11
0x5f23:	mov	rax, qword ptr [rsp + 0x10]
0x5f28:	lea	r14, [rbp + rbx]
0x5f2d:	mov	rdx, qword ptr [rsp + 0x30]
0x5f32:	mov	rcx, qword ptr [rsp + 0x28]
0x5f37:	mov	rdi, qword ptr [rsp + 0x38]
0x5f3c:	lea	r13, [rax + r14]
0x5f40:	sub	rdx, r14
0x5f43:	mov	rsi, r13
0x5f46:	call	0x9270


0x5738:	mov	byte ptr [rsp + 0x38], r8b
0x573d:	mov	byte ptr [rsp + 0x30], r10b
0x5742:	mov	qword ptr [rsp + 0x28], r9
0x5747:	call	0x1d90


0x576e:	mov	rdx, qword ptr [rsp + 0x18]
0x5773:	mov	rsi, qword ptr [rsp + 0x48]
0x5778:	mov	rdi, r9
0x577b:	mov	qword ptr [rsp + 0x40], r11
0x5780:	mov	byte ptr [rsp + 0x38], r8b
0x5785:	mov	qword ptr [rsp + 0x30], r9
0x578a:	call	0x1ea0


0x5d20:	xor	r10d, r10d
0x5d23:	jmp	0x57c0


0x6704:	mov	rdx, r15
0x6707:	sub	rax, r15
0x670a:	cmp	r13, rdx
0x670d:	jbe	0x6713


0x67cc:	movzx	eax, byte ptr [rsp + 0x7c]
0x67d1:	jmp	0x66ec


0x5daf:	mov	r13, qword ptr [rsp + 0x50]
0x5db4:	lea	rbx, [rip + 0x4aaa]
0x5dbb:	mov	byte ptr [r14], 0x27
0x5dbf:	mov	dword ptr [rsp + 8], 2
0x5dc7:	mov	r15d, 1
0x5dcd:	mov	qword ptr [rsp + 0x18], 1
0x5dd6:	mov	byte ptr [rsp + 0xf], 0
0x5ddb:	mov	qword ptr [rsp + 0x48], rbx
0x5de0:	mov	byte ptr [rsp + 0x7c], al
0x5de4:	jmp	0x56c3


0x6713:	add	rdx, 1
0x6717:	movzx	ecx, byte ptr [rax + rdx]
0x671b:	test	cl, cl
0x671d:	jne	0x670a


0x670f:	mov	byte ptr [r14 + rdx], cl
0x6713:	add	rdx, 1
0x6717:	movzx	ecx, byte ptr [rax + rdx]
0x671b:	test	cl, cl
0x671d:	jne	0x670a


0x56c3:	xor	r11d, r11d
0x56c6:	mov	rax, rbp
0x56c9:	mov	r8d, r12d
0x56cc:	mov	rbp, r11
0x56cf:	mov	r11, rax
0x56d2:	nop	word ptr [rax + rax]
0x56d8:	cmp	r11, rbp
0x56db:	setne	r12b
0x56df:	cmp	r11, -1
0x56e3:	jne	0x56f2


0x671f:	mov	r15, rdx
0x6722:	cmp	r13, r15
0x6725:	jbe	0x61c9


0x670a:	cmp	r13, rdx
0x670d:	jbe	0x6713


0x578f:	test	eax, eax
0x5791:	mov	r9, qword ptr [rsp + 0x30]
0x5796:	movzx	r8d, byte ptr [rsp + 0x38]
0x579c:	mov	r11, qword ptr [rsp + 0x40]
0x57a1:	jne	0x5d20


0x57a7:	cmp	byte ptr [rsp + 0xf], 0
0x57ac:	movzx	r10d, byte ptr [rsp + 0x28]
0x57b2:	jne	0x6735


0x6735:	cmp	dword ptr [rsp + 8], 2
0x673a:	movzx	ebx, byte ptr [rsp + 0xf]
0x673f:	mov	rbp, r11
0x6742:	sete	al
0x6745:	mov	byte ptr [rsp + 0xd], bl
0x6749:	jmp	0x6179


0x5f4b:	test	rax, rax
0x5f4e:	mov	r15, rax
0x5f51:	je	0x5fa1


0x5fa1:	mov	edx, r12d
0x5fa4:	mov	rdi, rbx
0x5fa7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x5fad:	xor	edx, 1
0x5fb0:	movzx	ebx, byte ptr [rsp + 0x7e]
0x5fb5:	movzx	r10d, byte ptr [rsp + 0x7f]
0x5fbb:	and	dl, byte ptr [rsp + 0xd]
0x5fbf:	mov	r15, qword ptr [rsp + 0x80]
0x5fc7:	mov	r14, qword ptr [rsp + 0x40]
0x5fcc:	mov	r13, qword ptr [rsp + 0x70]
0x5fd1:	mov	r11, qword ptr [rsp + 0x30]
0x5fd6:	cmp	rdi, 1
0x5fda:	jbe	0x65db


0x5f53:	cmp	rax, -1
0x5f57:	je	0x6575


0x65db:	mov	eax, edx
0x65dd:	jmp	0x5b37


0x5fe0:	mov	rcx, rdi
0x5fe3:	xor	esi, esi
0x5fe5:	movzx	r9d, byte ptr [rsp + 0xf]
0x5feb:	add	rcx, rbp
0x5fee:	mov	rdi, qword ptr [rsp + 0x10]
0x5ff3:	jmp	0x60ae


0x6575:	mov	rdi, rbx
0x6578:	movzx	r8d, byte ptr [rsp + 0x7d]
0x657e:	movzx	ebx, byte ptr [rsp + 0x7e]
0x6583:	movzx	r10d, byte ptr [rsp + 0x7f]
0x6589:	mov	r15, qword ptr [rsp + 0x80]
0x6591:	xor	r12d, r12d
0x6594:	mov	r14, qword ptr [rsp + 0x40]
0x6599:	mov	r13, qword ptr [rsp + 0x70]
0x659e:	mov	r11, qword ptr [rsp + 0x30]
0x65a3:	movzx	edx, byte ptr [rsp + 0xd]
0x65a8:	jmp	0x5fd6


0x5f5d:	cmp	rax, -2
0x5f61:	je	0x6501


0x5b37:	test	al, al
0x5b39:	jne	0x64d1


0x60ae:	test	dl, dl
0x60b0:	jne	0x6000


0x5fd6:	cmp	rdi, 1
0x5fda:	jbe	0x65db


0x6501:	mov	r11, qword ptr [rsp + 0x30]
0x6506:	mov	rsi, r14
0x6509:	mov	rcx, r13
0x650c:	mov	rax, rbx
0x650f:	mov	rdi, rbx
0x6512:	movzx	r8d, byte ptr [rsp + 0x7d]
0x6518:	movzx	ebx, byte ptr [rsp + 0x7e]
0x651d:	mov	r9, qword ptr [rsp + 0x88]
0x6525:	cmp	rsi, r11
0x6528:	movzx	r10d, byte ptr [rsp + 0x7f]
0x652e:	mov	r15, qword ptr [rsp + 0x80]
0x6536:	mov	r14, qword ptr [rsp + 0x40]
0x653b:	mov	r13, qword ptr [rsp + 0x70]
0x6540:	jae	0x6568


0x5f67:	cmp	dword ptr [rsp + 8], 2
0x5f6c:	sete	al
0x5f6f:	and	al, byte ptr [rsp + 0xf]
0x5f73:	jne	0x6110


0x5b3f:	cmp	dword ptr [rsp + 8], 2
0x5b44:	sete	dl
0x5b47:	jmp	0x5818


0x64d1:	movzx	edx, byte ptr [rsp + 0xd]
0x64d6:	xor	r12d, r12d
0x64d9:	jmp	0x5fe0


0x60b6:	mov	eax, esi
0x60b8:	xor	eax, 1
0x60bb:	and	eax, r8d
0x60be:	test	r10b, r10b
0x60c1:	je	0x60d1


0x6000:	cmp	dword ptr [rsp + 8], 2
0x6005:	sete	al
0x6008:	test	r9b, r9b
0x600b:	jne	0x64c0


0x6542:	cmp	byte ptr [rcx], 0
0x6545:	jne	0x6557


0x6568:	movzx	edx, byte ptr [rsp + 0xd]
0x656d:	xor	r12d, r12d
0x6570:	jmp	0x5fd6


0x5f79:	mov	edi, dword ptr [rsp + 0x9c]
0x5f80:	call	0x2100


0x6110:	cmp	r15, 1
0x6114:	je	0x5f79


0x5818:	cmp	byte ptr [rsp + 0xd], 1
0x581d:	jne	0x5932


0x60d1:	add	rbp, 1
0x60d5:	cmp	rbp, rcx
0x60d8:	jae	0x585c


0x60c3:	cmp	r13, r15
0x60c6:	jbe	0x60cd


0x6011:	mov	esi, r8d
0x6014:	xor	esi, 1
0x6017:	and	al, sil
0x601a:	je	0x604b


0x64c0:	movzx	ebx, byte ptr [rsp + 0xf]
0x64c5:	mov	rbp, r11
0x64c8:	mov	byte ptr [rsp + 0xd], bl
0x64cc:	jmp	0x6179


0x6547:	jmp	0x6568


0x6557:	add	rax, 1
0x655b:	lea	rdx, [rbp + rax]
0x6560:	cmp	r11, rdx
0x6563:	ja	0x6550


0x611a:	mov	rdi, qword ptr [rsp + 0x10]
0x611f:	lea	rcx, [rdi + r15]
0x6123:	lea	rdx, [rdi + r14 + 1]
0x6128:	lea	r8, [rcx + r14]
0x612c:	jmp	0x613d


0x5823:	test	dl, dl
0x5825:	jne	0x5932


0x5932:	cmp	byte ptr [rsp + 0xf], 0
0x5937:	jne	0x582b


0x60de:	test	al, al
0x60e0:	je	0x64de


0x585c:	test	al, al
0x585e:	je	0x5880


0x60cd:	add	r15, 1
0x60d1:	add	rbp, 1
0x60d5:	cmp	rbp, rcx
0x60d8:	jae	0x585c


0x60c8:	mov	byte ptr [r14 + r15], 0x5c
0x60cd:	add	r15, 1
0x60d1:	add	rbp, 1
0x60d5:	cmp	rbp, rcx
0x60d8:	jae	0x585c


0x604b:	cmp	r13, r15
0x604e:	jbe	0x6055


0x601c:	cmp	r13, r15
0x601f:	jbe	0x6026


0x6565:	mov	rdi, rax
0x6568:	movzx	edx, byte ptr [rsp + 0xd]
0x656d:	xor	r12d, r12d
0x6570:	jmp	0x5fd6


0x6550:	cmp	byte ptr [r9 + rax], 0
0x6555:	je	0x6565


0x613d:	movzx	ecx, byte ptr [rdx]
0x6140:	sub	ecx, 0x5b
0x6143:	cmp	cl, 0x21
0x6146:	ja	0x6130


0x582b:	mov	rsi, qword ptr [rsp + 0x20]
0x5830:	test	rsi, rsi
0x5833:	je	0x5849


0x593d:	jmp	0x5849


0x64de:	xor	r10d, r10d
0x64e1:	jmp	0x609d


0x60e6:	cmp	r13, r15
0x60e9:	jbe	0x60f0


0x5880:	cmp	r15, r13
0x5883:	jae	0x5889


0x5860:	cmp	r13, r15
0x5863:	jbe	0x586a


0x6055:	lea	rax, [r15 + 1]
0x6059:	cmp	r13, rax
0x605c:	jbe	0x606b


0x6050:	mov	byte ptr [r14 + r15], 0x5c
0x6055:	lea	rax, [r15 + 1]
0x6059:	cmp	r13, rax
0x605c:	jbe	0x606b


0x6026:	lea	rsi, [r15 + 1]
0x602a:	cmp	r13, rsi
0x602d:	jbe	0x6035


0x6021:	mov	byte ptr [r14 + r15], 0x27
0x6026:	lea	rsi, [r15 + 1]
0x602a:	cmp	r13, rsi
0x602d:	jbe	0x6035


0x6148:	mov	esi, 1
0x614d:	shl	rsi, cl
0x6150:	mov	rcx, rsi
0x6153:	movabs	rsi, 0x20000002b
0x615d:	test	rcx, rsi
0x6160:	je	0x6130


0x6130:	add	rdx, 1
0x6134:	cmp	r8, rdx
0x6137:	je	0x5f79


0x5849:	test	r10b, r10b
0x584c:	jne	0x5993


0x5835:	mov	edx, ebx
0x5837:	shr	dl, 5
0x583a:	movzx	edx, dl
0x583d:	mov	edx, dword ptr [rsi + rdx*4]
0x5840:	bt	edx, ebx
0x5843:	jb	0x5993


0x609d:	cmp	r13, r15
0x60a0:	jbe	0x60a6


0x60f0:	lea	rax, [r15 + 1]
0x60f4:	cmp	r13, rax
0x60f7:	jbe	0x60ff


0x60eb:	mov	byte ptr [r14 + r15], 0x27
0x60f0:	lea	rax, [r15 + 1]
0x60f4:	cmp	r13, rax
0x60f7:	jbe	0x60ff


0x5885:	mov	byte ptr [r14 + r15], bl
0x5889:	movzx	edi, byte ptr [rsp + 0xe]
0x588e:	add	r15, 1
0x5892:	mov	eax, 0
0x5897:	test	r12b, r12b
0x589a:	cmove	edi, eax
0x589d:	mov	byte ptr [rsp + 0xe], dil
0x58a2:	jmp	0x56d8


0x5889:	movzx	edi, byte ptr [rsp + 0xe]
0x588e:	add	r15, 1
0x5892:	mov	eax, 0
0x5897:	test	r12b, r12b
0x589a:	cmove	edi, eax
0x589d:	mov	byte ptr [rsp + 0xe], dil
0x58a2:	jmp	0x56d8


0x586a:	lea	rax, [r15 + 1]
0x586e:	cmp	r13, rax
0x5871:	jbe	0x5879


0x5865:	mov	byte ptr [r14 + r15], 0x27
0x586a:	lea	rax, [r15 + 1]
0x586e:	cmp	r13, rax
0x5871:	jbe	0x5879


0x606b:	lea	rax, [r15 + 2]
0x606f:	cmp	r13, rax
0x6072:	jbe	0x6084


0x605e:	mov	eax, ebx
0x6060:	shr	al, 6
0x6063:	add	eax, 0x30
0x6066:	mov	byte ptr [r14 + r15 + 1], al
0x606b:	lea	rax, [r15 + 2]
0x606f:	cmp	r13, rax
0x6072:	jbe	0x6084


0x6035:	lea	rsi, [r15 + 2]
0x6039:	cmp	r13, rsi
0x603c:	jbe	0x6044


0x602f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x6035:	lea	rsi, [r15 + 2]
0x6039:	cmp	r13, rsi
0x603c:	jbe	0x6044


0x6162:	mov	r14, qword ptr [rsp + 0x40]
0x6167:	mov	r13, qword ptr [rsp + 0x70]
0x616c:	mov	rbp, qword ptr [rsp + 0x30]
0x6171:	mov	dword ptr [rsp + 8], 2
0x6179:	cmp	byte ptr [rsp + 0xd], 0
0x617e:	je	0x6190


0x5852:	xor	eax, 1
0x5855:	add	rbp, 1
0x5859:	and	eax, r8d
0x585c:	test	al, al
0x585e:	je	0x5880


0x5993:	cmp	dword ptr [rsp + 8], 2
0x5998:	sete	dl
0x599b:	cmp	byte ptr [rsp + 0xf], 0
0x59a0:	mov	eax, edx
0x59a2:	jne	0x61f8


0x60a6:	movzx	ebx, byte ptr [rdi + rbp]
0x60aa:	add	r15, 1
0x60ae:	test	dl, dl
0x60b0:	jne	0x6000


0x60a2:	mov	byte ptr [r14 + r15], bl
0x60a6:	movzx	ebx, byte ptr [rdi + rbp]
0x60aa:	add	r15, 1
0x60ae:	test	dl, dl
0x60b0:	jne	0x6000


0x60ff:	add	r15, 2
0x6103:	xor	r10d, r10d
0x6106:	xor	r8d, r8d
0x6109:	jmp	0x609d


0x60f9:	mov	byte ptr [r14 + r15 + 1], 0x27
0x60ff:	add	r15, 2
0x6103:	xor	r10d, r10d
0x6106:	xor	r8d, r8d
0x6109:	jmp	0x609d


0x56d8:	cmp	r11, rbp
0x56db:	setne	r12b
0x56df:	cmp	r11, -1
0x56e3:	jne	0x56f2


0x5879:	add	r15, 2
0x587d:	xor	r8d, r8d
0x5880:	cmp	r15, r13
0x5883:	jae	0x5889


0x5873:	mov	byte ptr [r14 + r15 + 1], 0x27
0x5879:	add	r15, 2
0x587d:	xor	r8d, r8d
0x5880:	cmp	r15, r13
0x5883:	jae	0x5889


0x6084:	and	ebx, 7
0x6087:	add	rbp, 1
0x608b:	add	r15, 3
0x608f:	add	ebx, 0x30
0x6092:	cmp	rbp, rcx
0x6095:	jae	0x5880


0x6074:	mov	eax, ebx
0x6076:	shr	al, 3
0x6079:	and	eax, 7
0x607c:	add	eax, 0x30
0x607f:	mov	byte ptr [r14 + r15 + 2], al
0x6084:	and	ebx, 7
0x6087:	add	rbp, 1
0x608b:	add	r15, 3
0x608f:	add	ebx, 0x30
0x6092:	cmp	rbp, rcx
0x6095:	jae	0x5880


0x6044:	add	r15, 3
0x6048:	mov	r8d, eax
0x604b:	cmp	r13, r15
0x604e:	jbe	0x6055


0x603e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x6044:	add	r15, 3
0x6048:	mov	r8d, eax
0x604b:	cmp	r13, r15
0x604e:	jbe	0x6055


0x59a8:	mov	eax, r8d
0x59ab:	xor	eax, 1
0x59ae:	and	al, dl
0x59b0:	je	0x59e1


0x61f8:	mov	rbp, r11
0x61fb:	jmp	0x6179


0x609b:	mov	esi, edx
0x609d:	cmp	r13, r15
0x60a0:	jbe	0x60a6


0x59e1:	cmp	r13, r15
0x59e4:	jbe	0x59eb


0x59b2:	cmp	r13, r15
0x59b5:	jbe	0x59bc


0x59eb:	add	r15, 1
0x59ef:	add	rbp, 1
0x59f3:	jmp	0x5880


0x59e6:	mov	byte ptr [r14 + r15], 0x5c
0x59eb:	add	r15, 1
0x59ef:	add	rbp, 1
0x59f3:	jmp	0x5880


0x59bc:	lea	rdx, [r15 + 1]
0x59c0:	cmp	r13, rdx
0x59c3:	jbe	0x59cb


0x59b7:	mov	byte ptr [r14 + r15], 0x27
0x59bc:	lea	rdx, [r15 + 1]
0x59c0:	cmp	r13, rdx
0x59c3:	jbe	0x59cb


0x59cb:	lea	rdx, [r15 + 2]
0x59cf:	cmp	r13, rdx
0x59d2:	jbe	0x59da


0x59c5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x59cb:	lea	rdx, [r15 + 2]
0x59cf:	cmp	r13, rdx
0x59d2:	jbe	0x59da


0x59da:	add	r15, 3
0x59de:	mov	r8d, eax
0x59e1:	cmp	r13, r15
0x59e4:	jbe	0x59eb


0x59d4:	mov	byte ptr [r14 + r15 + 2], 0x27
0x59da:	add	r15, 3
0x59de:	mov	r8d, eax
0x59e1:	cmp	r13, r15
0x59e4:	jbe	0x59eb


0x5f85:	mov	rdi, qword ptr [rsp + 0x28]
0x5f8a:	test	eax, eax
0x5f8c:	mov	eax, 0
0x5f91:	cmove	r12d, eax
0x5f95:	add	rbx, r15
0x5f98:	call	0x20f0


0x5f9d:	test	eax, eax
0x5f9f:	je	0x5f23


0x5f23:	mov	rax, qword ptr [rsp + 0x10]
0x5f28:	lea	r14, [rbp + rbx]
0x5f2d:	mov	rdx, qword ptr [rsp + 0x30]
0x5f32:	mov	rcx, qword ptr [rsp + 0x28]
0x5f37:	mov	rdi, qword ptr [rsp + 0x38]
0x5f3c:	lea	r13, [rax + r14]
0x5f40:	sub	rdx, r14
0x5f43:	mov	rsi, r13
0x5f46:	call	0x9270


0x574c:	movzx	r8d, byte ptr [rsp + 0x38]
0x5752:	movzx	r10d, byte ptr [rsp + 0x30]
0x5758:	mov	r11, rax
0x575b:	mov	r9, qword ptr [rsp + 0x28]
0x5760:	cmp	rbx, r11
0x5763:	mov	byte ptr [rsp + 0x28], r10b
0x5768:	ja	0x5d20


0x5ed0:	movzx	r8d, byte ptr [rsp + 0x40]
0x5ed6:	movzx	r10d, byte ptr [rsp + 0x38]
0x5edc:	mov	r11, rax
0x5edf:	mov	r9, qword ptr [rsp + 0x30]
0x5ee4:	lea	rax, [rsp + 0x9c]
0x5eec:	xor	ecx, ecx
0x5eee:	mov	byte ptr [rsp + 0x7e], bl
0x5ef2:	mov	byte ptr [rsp + 0x7d], r8b
0x5ef7:	mov	rbx, rcx
0x5efa:	mov	qword ptr [rsp + 0x88], r9
0x5f02:	mov	qword ptr [rsp + 0x38], rax
0x5f07:	mov	byte ptr [rsp + 0x7f], r10b
0x5f0c:	mov	qword ptr [rsp + 0x80], r15
0x5f14:	mov	qword ptr [rsp + 0x40], r14
0x5f19:	mov	qword ptr [rsp + 0x70], r13
0x5f1e:	mov	qword ptr [rsp + 0x30], r11
0x5f23:	mov	rax, qword ptr [rsp + 0x10]
0x5f28:	lea	r14, [rbp + rbx]
0x5f2d:	mov	rdx, qword ptr [rsp + 0x30]
0x5f32:	mov	rcx, qword ptr [rsp + 0x28]
0x5f37:	mov	rdi, qword ptr [rsp + 0x38]
0x5f3c:	lea	r13, [rax + r14]
0x5f40:	sub	rdx, r14
0x5f43:	mov	rsi, r13
0x5f46:	call	0x9270


0x5b08:	mov	rcx, qword ptr [rax]
0x5b0b:	movzx	edx, bl
0x5b0e:	movzx	r10d, byte ptr [rsp + 0x28]
0x5b14:	movzx	r8d, byte ptr [rsp + 0x30]
0x5b1a:	mov	r11, qword ptr [rsp + 0x38]
0x5b1f:	mov	edi, 1
0x5b24:	movzx	eax, word ptr [rcx + rdx*2]
0x5b28:	and	ax, 0x4000
0x5b2c:	setne	r12b
0x5b30:	sete	al
0x5b33:	and	al, byte ptr [rsp + 0xd]
0x5b37:	test	al, al
0x5b39:	jne	0x64d1


0x57e0:	xor	r10d, r10d
0x57e3:	cmp	r11, 1
0x57e7:	setne	al
0x57ea:	cmp	r11, -1
0x57ee:	jne	0x57fc


0x57f0:	mov	rax, qword ptr [rsp + 0x10]
0x57f5:	cmp	byte ptr [rax + 1], 0
0x57f9:	setne	al
0x57fc:	cmp	dword ptr [rsp + 8], 2
0x5801:	sete	dl
0x5804:	test	al, al
0x5806:	je	0x5a58


0x57fc:	cmp	dword ptr [rsp + 8], 2
0x5801:	sete	dl
0x5804:	test	al, al
0x5806:	je	0x5a58


0x5a58:	test	rbp, rbp
0x5a5b:	jne	0x580c


0x580c:	xor	r12d, r12d
0x580f:	xor	eax, eax
0x5811:	nop	dword ptr [rax]
0x5818:	cmp	byte ptr [rsp + 0xd], 1
0x581d:	jne	0x5932


0x5a61:	movzx	eax, byte ptr [rsp + 0xf]
0x5a66:	and	al, dl
0x5a68:	je	0x5818


0x5a6e:	mov	rbp, r11
0x5a71:	mov	dword ptr [rsp + 8], 2
0x5a79:	jmp	0x6179


0x5e78:	cmp	byte ptr [rsp + 0xf], 0
0x5e7d:	jne	0x66a0


0x58c0:	cmp	eax, 5
0x58c3:	je	0x5e38


0x5e83:	xor	r12d, r12d
0x5e86:	xor	eax, eax
0x5e88:	mov	ebx, 0x3f
0x5e8d:	jmp	0x5849


0x66a0:	mov	rbp, r11
0x66a3:	movzx	eax, byte ptr [rsp + 0xf]
0x66a8:	jmp	0x6179


0x5e38:	test	byte ptr [rsp + 0x78], 4
0x5e3d:	je	0x5e60


0x58c9:	cmp	eax, 2
0x58cc:	mov	ebx, 0x3f
0x58d1:	sete	dl
0x58d4:	xor	r12d, r12d
0x58d7:	xor	eax, eax
0x58d9:	jmp	0x5818


0x5e60:	xor	edx, edx
0x5e62:	xor	r12d, r12d
0x5e65:	xor	eax, eax
0x5e67:	mov	ebx, 0x3f
0x5e6c:	jmp	0x5818


0x5e3f:	lea	rcx, [rbp + 2]
0x5e43:	cmp	rcx, r11
0x5e46:	jae	0x5e60


0x5e48:	mov	rax, qword ptr [rsp + 0x10]
0x5e4d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x5e52:	je	0x65e2


0x65e2:	movzx	ebx, byte ptr [rax + rcx]
0x65e6:	cmp	bl, 0x3e
0x65e9:	ja	0x5e60


0x65ef:	movabs	rax, 0x7000a38200000000
0x65f9:	bt	rax, rbx
0x65fd:	jae	0x5e60


0x6603:	cmp	byte ptr [rsp + 0xf], 0
0x6608:	jne	0x67f2


0x660e:	cmp	r13, r15
0x6611:	jbe	0x6618


0x67f2:	mov	rbp, r11
0x67f5:	jmp	0x6190


0x6618:	lea	rax, [r15 + 1]
0x661c:	cmp	r13, rax
0x661f:	jbe	0x6627


0x6613:	mov	byte ptr [r14 + r15], 0x3f
0x6618:	lea	rax, [r15 + 1]
0x661c:	cmp	r13, rax
0x661f:	jbe	0x6627


0x6627:	lea	rax, [r15 + 2]
0x662b:	cmp	r13, rax
0x662e:	jbe	0x6636


0x6621:	mov	byte ptr [r14 + r15 + 1], 0x22
0x6627:	lea	rax, [r15 + 2]
0x662b:	cmp	r13, rax
0x662e:	jbe	0x6636


0x6636:	lea	rax, [r15 + 3]
0x663a:	cmp	r13, rax
0x663d:	jbe	0x6645


0x6630:	mov	byte ptr [r14 + r15 + 2], 0x22
0x6636:	lea	rax, [r15 + 3]
0x663a:	cmp	r13, rax
0x663d:	jbe	0x6645


0x6645:	add	r15, 4
0x6649:	xor	edx, edx
0x664b:	xor	r12d, r12d
0x664e:	xor	eax, eax
0x6650:	mov	rbp, rcx
0x6653:	jmp	0x5818


0x663f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x6645:	add	r15, 4
0x6649:	xor	edx, edx
0x664b:	xor	r12d, r12d
0x664e:	xor	eax, eax
0x6650:	mov	rbp, rcx
0x6653:	jmp	0x5818


0x5df0:	cmp	byte ptr [rsp + 0xf], 0
0x5df5:	jne	0x66a0


0x58ee:	mov	byte ptr [rsp + 0x7c], r12b
0x58f3:	xor	edx, edx
0x58f5:	xor	eax, eax
0x58f7:	mov	ebx, 0x27
0x58fc:	jmp	0x5818


0x5dfb:	test	r13, r13
0x5dfe:	je	0x6200


0x6200:	cmp	r13, r15
0x6203:	jbe	0x620a


0x5e04:	xor	edx, edx
0x5e06:	cmp	qword ptr [rsp + 0x50], 0
0x5e0c:	jne	0x6200


0x620a:	lea	rax, [r15 + 1]
0x620e:	cmp	r13, rax
0x6211:	jbe	0x6219


0x6205:	mov	byte ptr [r14 + r15], 0x27
0x620a:	lea	rax, [r15 + 1]
0x620e:	cmp	r13, rax
0x6211:	jbe	0x6219


0x5e12:	mov	qword ptr [rsp + 0x50], r13
0x5e17:	add	r15, 3
0x5e1b:	xor	eax, eax
0x5e1d:	mov	byte ptr [rsp + 0x7c], r12b
0x5e22:	xor	r8d, r8d
0x5e25:	mov	r13, rdx
0x5e28:	mov	ebx, 0x27
0x5e2d:	jmp	0x5849


0x6219:	lea	rax, [r15 + 2]
0x621d:	cmp	r13, rax
0x6220:	jbe	0x6812


0x6213:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x6219:	lea	rax, [r15 + 2]
0x621d:	cmp	r13, rax
0x6220:	jbe	0x6812


0x6812:	mov	rdx, r13
0x6815:	mov	r13, qword ptr [rsp + 0x50]
0x681a:	jmp	0x5e12


0x6226:	mov	rdx, r13
0x6229:	mov	byte ptr [r14 + r15 + 2], 0x27
0x622f:	mov	r13, qword ptr [rsp + 0x50]
0x6234:	jmp	0x5e12


0x5924:	cmp	byte ptr [rsp + 0xd], 0
0x5929:	jne	0x5990


0x592b:	mov	ebx, edx
0x592d:	xor	r12d, r12d
0x5930:	xor	eax, eax
0x5932:	cmp	byte ptr [rsp + 0xf], 0
0x5937:	jne	0x582b


0x5990:	xor	r12d, r12d
0x5993:	cmp	dword ptr [rsp + 8], 2
0x5998:	sete	dl
0x599b:	cmp	byte ptr [rsp + 0xf], 0
0x59a0:	mov	eax, edx
0x59a2:	jne	0x61f8


0x5d30:	cmp	byte ptr [rsp + 0xf], 0
0x5d35:	jne	0x66a0


0x5963:	cmp	byte ptr [rsp + 0xd], 0
0x5968:	je	0x5b80


0x5d3b:	add	rbp, 1
0x5d3f:	mov	eax, r8d
0x5d42:	xor	r12d, r12d
0x5d45:	mov	ebx, 0x5c
0x5d4a:	jmp	0x585c


0x5b80:	mov	edx, 0x5c
0x5b85:	mov	ebx, 0x5c
0x5b8a:	jmp	0x5924


0x596e:	cmp	byte ptr [rsp + 0xf], 0
0x5973:	je	0x5b80


0x5979:	cmp	qword ptr [rsp + 0x18], 0
0x597f:	jne	0x5d3b


0x5985:	mov	ebx, 0x5c
0x598a:	nop	word ptr [rax + rax]
0x5990:	xor	r12d, r12d
0x5993:	cmp	dword ptr [rsp + 8], 2
0x5998:	sete	dl
0x599b:	cmp	byte ptr [rsp + 0xf], 0
0x59a0:	mov	eax, edx
0x59a2:	jne	0x61f8


0x5a0b:	xor	edx, edx
0x5a0d:	test	byte ptr [rsp + 0x78], 1
0x5a12:	je	0x592b


0x5bd3:	cmp	dword ptr [rsp + 8], 2
0x5bd8:	sete	dl
0x5bdb:	cmp	byte ptr [rsp + 0xf], 0
0x5be0:	jne	0x677a


0x5a18:	add	rbp, 1
0x5a1c:	jmp	0x56d8


0x5be6:	mov	eax, r8d
0x5be9:	mov	rcx, r15
0x5bec:	xor	eax, 1
0x5bef:	and	al, dl
0x5bf1:	je	0x5c20


0x677a:	movzx	ebx, byte ptr [rsp + 0xf]
0x677f:	mov	rbp, r11
0x6782:	mov	eax, edx
0x6784:	mov	byte ptr [rsp + 0xd], bl
0x6788:	jmp	0x6179


0x5c20:	cmp	r13, rcx
0x5c23:	jbe	0x5c2a


0x5bf3:	cmp	r13, r15
0x5bf6:	jbe	0x5bfd


0x5c2a:	cmp	dword ptr [rsp + 8], 2
0x5c2f:	lea	r15, [rcx + 1]
0x5c33:	je	0x6239


0x5c25:	mov	byte ptr [r14 + rcx], 0x5c
0x5c2a:	cmp	dword ptr [rsp + 8], 2
0x5c2f:	lea	r15, [rcx + 1]
0x5c33:	je	0x6239


0x5bfd:	lea	rcx, [r15 + 1]
0x5c01:	cmp	r13, rcx
0x5c04:	jbe	0x5c0c


0x5bf8:	mov	byte ptr [r14 + r15], 0x27
0x5bfd:	lea	rcx, [r15 + 1]
0x5c01:	cmp	r13, rcx
0x5c04:	jbe	0x5c0c


0x6239:	mov	eax, r12d
0x623c:	mov	ebx, 0x30
0x6241:	xor	r12d, r12d
0x6244:	jmp	0x5849


0x5c39:	lea	rax, [rbp + 1]
0x5c3d:	cmp	rax, r11
0x5c40:	jae	0x5c5b


0x5c0c:	lea	rcx, [r15 + 2]
0x5c10:	cmp	r13, rcx
0x5c13:	ja	0x6249


0x5c06:	mov	byte ptr [r14 + r15 + 1], 0x24
0x5c0c:	lea	rcx, [r15 + 2]
0x5c10:	cmp	r13, rcx
0x5c13:	ja	0x6249


0x5c42:	mov	rax, qword ptr [rsp + 0x10]
0x5c47:	movzx	eax, byte ptr [rax + rbp + 1]
0x5c4c:	mov	byte ptr [rsp + 0x28], al
0x5c50:	sub	eax, 0x30
0x5c53:	cmp	al, 9
0x5c55:	jbe	0x6489


0x5c5b:	mov	eax, r12d
0x5c5e:	mov	ebx, 0x30
0x5c63:	xor	r12d, r12d
0x5c66:	jmp	0x5818


0x5c19:	lea	rcx, [r15 + 3]
0x5c1d:	mov	r8d, eax
0x5c20:	cmp	r13, rcx
0x5c23:	jbe	0x5c2a


0x6249:	mov	byte ptr [r14 + r15 + 2], 0x27
0x624f:	jmp	0x5c19


0x6489:	cmp	r13, r15
0x648c:	jbe	0x6493


0x6493:	lea	rax, [rcx + 2]
0x6497:	cmp	r13, rax
0x649a:	jbe	0x64a2


0x648e:	mov	byte ptr [r14 + r15], 0x30
0x6493:	lea	rax, [rcx + 2]
0x6497:	cmp	r13, rax
0x649a:	jbe	0x64a2


0x64a2:	mov	eax, r12d
0x64a5:	lea	r15, [rcx + 3]
0x64a9:	xor	r12d, r12d
0x64ac:	mov	ebx, 0x30
0x64b1:	jmp	0x5818


0x649c:	mov	byte ptr [r14 + rcx + 2], 0x30
0x64a2:	mov	eax, r12d
0x64a5:	lea	r15, [rcx + 3]
0x64a9:	xor	r12d, r12d
0x64ac:	mov	ebx, 0x30
0x64b1:	jmp	0x5818


0x5912:	cmp	dword ptr [rsp + 8], 2
0x5917:	sete	al
0x591a:	and	al, byte ptr [rsp + 0xf]
0x591e:	jne	0x5a6e


0x5cd0:	mov	edx, 0xd
0x5cd5:	xor	r10d, r10d
0x5cd8:	mov	ebx, 0x72
0x5cdd:	jmp	0x5912


0x6254:	test	ebx, ebx
0x6256:	jne	0x5683


0x625c:	mov	byte ptr [rsp + 0xd], 1
0x6261:	test	r13, r13
0x6264:	jne	0x67fa


0x626a:	lea	rax, [rip + 0x45f4]
0x6271:	mov	qword ptr [rsp + 0x50], 0
0x627a:	mov	byte ptr [rsp + 0xe], 1
0x627f:	mov	byte ptr [rsp + 0x7c], 0
0x6284:	xor	r12d, r12d
0x6287:	mov	byte ptr [rsp + 0xf], 0
0x628c:	mov	qword ptr [rsp + 0x18], 1
0x6295:	mov	qword ptr [rsp + 0x48], rax
0x629a:	mov	r15d, 1
0x62a0:	mov	dword ptr [rsp + 8], 2
0x62a8:	jmp	0x56c3


0x67fa:	mov	byte ptr [rsp + 0xe], 1
0x67ff:	xor	eax, eax
0x6801:	xor	r12d, r12d
0x6804:	mov	qword ptr [rsp + 0x50], 0
0x680d:	jmp	0x5db4


0x5db4:	lea	rbx, [rip + 0x4aaa]
0x5dbb:	mov	byte ptr [r14], 0x27
0x5dbf:	mov	dword ptr [rsp + 8], 2
0x5dc7:	mov	r15d, 1
0x5dcd:	mov	qword ptr [rsp + 0x18], 1
0x5dd6:	mov	byte ptr [rsp + 0xf], 0
0x5ddb:	mov	qword ptr [rsp + 0x48], rbx
0x5de0:	mov	byte ptr [rsp + 0x7c], al
0x5de4:	jmp	0x56c3


0x62b8:	test	r13, r13
0x62bb:	je	0x64e6


0x66ad:	lea	rax, [rip + 0x41af]
0x66b4:	mov	byte ptr [rsp + 0xe], 1
0x66b9:	mov	byte ptr [rsp + 0x7c], 0
0x66be:	xor	r12d, r12d
0x66c1:	mov	qword ptr [rsp + 0x50], 0
0x66ca:	mov	byte ptr [rsp + 0xf], 1
0x66cf:	mov	byte ptr [rsp + 0xd], 1
0x66d4:	mov	qword ptr [rsp + 0x18], 1
0x66dd:	xor	r15d, r15d
0x66e0:	mov	qword ptr [rsp + 0x48], rax
0x66e5:	jmp	0x56c3


0x64e6:	mov	qword ptr [rsp + 0x50], 0
0x64ef:	mov	byte ptr [rsp + 0xe], 1
0x64f4:	xor	r12d, r12d
0x64f7:	mov	byte ptr [rsp + 0x7c], 0
0x64fc:	jmp	0x62db


0x62c1:	mov	byte ptr [r14], 0x22
0x62c5:	mov	byte ptr [rsp + 0xe], 1
0x62ca:	xor	r12d, r12d
0x62cd:	mov	byte ptr [rsp + 0x7c], 0
0x62d2:	mov	qword ptr [rsp + 0x50], 0
0x62db:	lea	rax, [rip + 0x4581]
0x62e2:	mov	byte ptr [rsp + 0xf], 0
0x62e7:	mov	byte ptr [rsp + 0xd], 1
0x62ec:	mov	qword ptr [rsp + 0x18], 1
0x62f5:	mov	r15d, 1
0x62fb:	mov	qword ptr [rsp + 0x48], rax
0x6300:	jmp	0x56c3


0x62db:	lea	rax, [rip + 0x4581]
0x62e2:	mov	byte ptr [rsp + 0xf], 0
0x62e7:	mov	byte ptr [rsp + 0xd], 1
0x62ec:	mov	qword ptr [rsp + 0x18], 1
0x62f5:	mov	r15d, 1
0x62fb:	mov	qword ptr [rsp + 0x48], rax
0x6300:	jmp	0x56c3


0x6305:	lea	rax, [rip + 0x4557]
0x630c:	mov	byte ptr [rsp + 0xe], 1
0x6311:	mov	byte ptr [rsp + 0x7c], 0
0x6316:	xor	r12d, r12d
0x6319:	mov	qword ptr [rsp + 0x50], 0
0x6322:	mov	byte ptr [rsp + 0xf], 1
0x6327:	mov	byte ptr [rsp + 0xd], 1
0x632c:	mov	qword ptr [rsp + 0x18], 1
0x6335:	xor	r15d, r15d
0x6338:	mov	qword ptr [rsp + 0x48], rax
0x633d:	mov	dword ptr [rsp + 8], 5
0x6345:	jmp	0x56c3


0x634a:	mov	byte ptr [rsp + 0xe], 1
0x634f:	mov	byte ptr [rsp + 0x7c], 0
0x6354:	xor	r12d, r12d
0x6357:	mov	qword ptr [rsp + 0x50], 0
0x6360:	mov	byte ptr [rsp + 0xf], 0
0x6365:	xor	r15d, r15d
0x6368:	mov	byte ptr [rsp + 0xd], 1
0x636d:	mov	qword ptr [rsp + 0x18], 0
0x6376:	mov	qword ptr [rsp + 0x48], 0
0x637f:	jmp	0x56c3


0x6384:	cmp	dword ptr [rsp + 8], 0xa
0x6389:	je	0x63e1


0x63e1:	xor	r15d, r15d
0x63e4:	test	ebx, ebx
0x63e6:	je	0x65ad


0x638b:	lea	rsi, [rip + 0x44d5]
0x6392:	xor	edi, edi
0x6394:	mov	edx, 5
0x6399:	call	0x1d70


0x65ad:	mov	rdx, qword ptr [rsp + 0x68]
0x65b2:	movzx	eax, byte ptr [rdx]
0x65b5:	test	al, al
0x65b7:	je	0x63ec


0x63ec:	test	ebx, ebx
0x63ee:	mov	rbx, qword ptr [rsp + 0x60]
0x63f3:	setne	byte ptr [rsp + 0xf]
0x63f8:	xor	r12d, r12d
0x63fb:	mov	rdi, rbx
0x63fe:	call	0x1d90


0x65c9:	add	r15, 1
0x65cd:	movzx	eax, byte ptr [rdx + r15]
0x65d2:	test	al, al
0x65d4:	jne	0x65c0


0x65c5:	mov	byte ptr [r14 + r15], al
0x65c9:	add	r15, 1
0x65cd:	movzx	eax, byte ptr [rdx + r15]
0x65d2:	test	al, al
0x65d4:	jne	0x65c0


0x65d6:	jmp	0x63ec


0x65c0:	cmp	r13, r15
0x65c3:	jbe	0x65c9


0x6403:	mov	qword ptr [rsp + 0x48], rbx
0x6408:	mov	qword ptr [rsp + 0x18], rax
0x640d:	mov	byte ptr [rsp + 0xe], 1
0x6412:	mov	byte ptr [rsp + 0x7c], 0
0x6417:	mov	qword ptr [rsp + 0x50], 0
0x6420:	mov	byte ptr [rsp + 0xd], 1
0x6425:	jmp	0x56c3


0x639e:	mov	rcx, rax
0x63a1:	mov	qword ptr [rsp + 0x68], rax
0x63a6:	lea	rax, [rip + 0x44ba]
0x63ad:	cmp	rcx, rax
0x63b0:	je	0x674e


0x674e:	mov	esi, dword ptr [rsp + 8]
0x6752:	mov	rdi, rcx
0x6755:	call	0x5500


0x63b6:	lea	rsi, [rip + 0x44a8]
0x63bd:	xor	edi, edi
0x63bf:	mov	edx, 5
0x63c4:	call	0x1d70


0x63c9:	mov	rcx, rax
0x63cc:	mov	qword ptr [rsp + 0x60], rax
0x63d1:	lea	rax, [rip + 0x448d]
0x63d8:	cmp	rcx, rax
0x63db:	je	0x6764


0x6764:	mov	esi, dword ptr [rsp + 8]
0x6768:	mov	rdi, rcx
0x676b:	call	0x5500


0x6770:	mov	qword ptr [rsp + 0x60], rax
0x6775:	jmp	0x63e1


0x675a:	mov	qword ptr [rsp + 0x68], rax
0x675f:	jmp	0x63b6


0x642a:	mov	byte ptr [rsp + 0xe], 1
0x642f:	mov	byte ptr [rsp + 0x7c], 0
0x6434:	xor	r12d, r12d
0x6437:	mov	qword ptr [rsp + 0x50], 0
0x6440:	mov	byte ptr [rsp + 0xf], 0
0x6445:	xor	r15d, r15d
0x6448:	mov	byte ptr [rsp + 0xd], 0
0x644d:	mov	qword ptr [rsp + 0x18], 0
0x6456:	mov	qword ptr [rsp + 0x48], 0
0x645f:	jmp	0x56c3


0x6464:	mov	byte ptr [rsp + 0xe], 1
0x6469:	mov	byte ptr [rsp + 0x7c], 0
0x646e:	xor	r12d, r12d
0x6471:	mov	qword ptr [rsp + 0x50], 0
0x647a:	mov	byte ptr [rsp + 0xf], 1
0x647f:	mov	byte ptr [rsp + 0xd], 1
0x6484:	jmp	0x56a3


0x56a3:	lea	rax, [rip + 0x51bb]
0x56aa:	mov	qword ptr [rsp + 0x18], 1
0x56b3:	xor	r15d, r15d
0x56b6:	mov	dword ptr [rsp + 8], 2
0x56be:	mov	qword ptr [rsp + 0x48], rax
0x56c3:	xor	r11d, r11d
0x56c6:	mov	rax, rbp
0x56c9:	mov	r8d, r12d
0x56cc:	mov	rbp, r11
0x56cf:	mov	r11, rax
0x56d2:	nop	word ptr [rax + rax]
0x56d8:	cmp	r11, rbp
0x56db:	setne	r12b
0x56df:	cmp	r11, -1
0x56e3:	jne	0x56f2


0x6658:	test	ebx, ebx
0x665a:	je	0x67e8


0x67e8:	mov	byte ptr [rsp + 0xd], 0
0x67ed:	jmp	0x6261


0x6660:	lea	rax, [rip + 0x41fe]
0x6667:	mov	byte ptr [rsp + 0xe], 1
0x666c:	mov	byte ptr [rsp + 0x7c], 0
0x6671:	xor	r12d, r12d
0x6674:	mov	qword ptr [rsp + 0x50], 0
0x667d:	mov	byte ptr [rsp + 0xf], 1
0x6682:	mov	byte ptr [rsp + 0xd], 0
0x6687:	mov	qword ptr [rsp + 0x18], 1
0x6690:	xor	r15d, r15d
0x6693:	mov	qword ptr [rsp + 0x48], rax
0x6698:	jmp	0x56c3


0x6261:	test	r13, r13
0x6264:	jne	0x67fa


0x6824:	nop	
0x6826:	nop	word ptr cs:[rax + rax]


0x69db:	nop	dword ptr [rax + rax]


0x6a16:	nop	word ptr cs:[rax + rax]


0x6a31:	nop	dword ptr [rax + rax]
0x6a36:	nop	word ptr cs:[rax + rax]


0x6a51:	nop	dword ptr [rax + rax]
0x6a56:	nop	word ptr cs:[rax + rax]


0x6a95:	nop	
0x6a96:	nop	word ptr cs:[rax + rax]


0x6ab5:	nop	
0x6ab6:	nop	word ptr cs:[rax + rax]


0x6b64:	nop	
0x6b66:	nop	word ptr cs:[rax + rax]


0x6c53:	nop	dword ptr [rax]
0x6c56:	nop	word ptr cs:[rax + rax]


0x6c6a:	nop	word ptr [rax + rax]


0x6d03:	nop	dword ptr [rax]
0x6d06:	nop	word ptr cs:[rax + rax]


0x6d23:	nop	dword ptr [rax]
0x6d26:	nop	word ptr cs:[rax + rax]


0x6d3c:	nop	dword ptr [rax]


0x6d58:	nop	dword ptr [rax + rax]


0x6d74:	nop	
0x6d76:	nop	word ptr cs:[rax + rax]


0x6e0e:	nop	


0x6e9a:	nop	word ptr [rax + rax]


0x6eac:	nop	dword ptr [rax]


0x6ebf:	nop	


0x6f58:	nop	dword ptr [rax + rax]


0x6f81:	nop	dword ptr [rax + rax]
0x6f86:	nop	word ptr cs:[rax + rax]


0x6f9a:	nop	word ptr [rax + rax]


0x702e:	nop	


0x70c1:	nop	dword ptr [rax + rax]
0x70c6:	nop	word ptr cs:[rax + rax]


0x70dc:	nop	dword ptr [rax]


0x70f7:	nop	word ptr [rax + rax]


0x7113:	nop	dword ptr [rax]
0x7116:	nop	word ptr cs:[rax + rax]


0x712c:	nop	dword ptr [rax]


0x7144:	nop	
0x7146:	nop	word ptr cs:[rax + rax]


0x7163:	nop	dword ptr [rax]
0x7166:	nop	word ptr cs:[rax + rax]


0x7188:	nop	dword ptr [rax + rax]


0x71b3:	nop	dword ptr [rax]
0x71b6:	nop	word ptr cs:[rax + rax]


0x71f4:	nop	
0x71f6:	nop	word ptr cs:[rax + rax]


0x7204:	nop	
0x7206:	nop	word ptr cs:[rax + rax]


0x732a:	nop	word ptr [rax + rax]


0x734e:	nop	


0x73a1:	nop	word ptr cs:[rax + rax]
0x73ab:	nop	dword ptr [rax + rax]


0x740d:	nop	dword ptr [rax]


0x7739:	nop	dword ptr [rax]


0x7745:	nop	
0x7746:	nop	word ptr cs:[rax + rax]


0x7755:	nop	
0x7756:	nop	word ptr cs:[rax + rax]


0x78f6:	nop	word ptr cs:[rax + rax]


0x7949:	nop	dword ptr [rax]


0x7bde:	nop	


0x808a:	nop	word ptr [rax + rax]


0x80cf:	nop	


0x84e7:	nop	word ptr [rax + rax]


0x8588:	nop	dword ptr [rax + rax]


0x8665:	nop	
0x8666:	nop	word ptr cs:[rax + rax]


0x870a:	nop	word ptr [rax + rax]


0x8734:	nop	
0x8736:	nop	word ptr cs:[rax + rax]


0x8742:	nop	dword ptr [rax]
0x8746:	nop	word ptr cs:[rax + rax]


0x8786:	nop	word ptr cs:[rax + rax]


0x87b4:	nop	
0x87b6:	nop	word ptr cs:[rax + rax]


0x8842:	nop	dword ptr [rax]
0x8846:	nop	word ptr cs:[rax + rax]


0x889a:	nop	word ptr [rax + rax]


0x88b7:	nop	word ptr [rax + rax]


0x88ee:	nop	


0x8918:	nop	dword ptr [rax + rax]


0x8933:	nop	word ptr cs:[rax + rax]
0x893d:	nop	dword ptr [rax]


0x8975:	nop	word ptr cs:[rax + rax]
0x897f:	nop	


0x8aa1:	nop	word ptr cs:[rax + rax]
0x8aab:	nop	dword ptr [rax + rax]


0x8c88:	mov	rax, rbx
0x8c8b:	mul	rsi
0x8c8e:	jo	0x8e81


0x8e81:	or	rax, 0xffffffffffffffff
0x8e85:	mov	r8d, 1
0x8e8b:	jmp	0x8c97


0x8c94:	xor	r8d, r8d
0x8c97:	mul	rsi
0x8c9a:	jo	0x8e72


0x8c97:	mul	rsi
0x8c9a:	jo	0x8e72


0x8e72:	mov	r8d, 1
0x8e78:	or	rbx, 0xffffffffffffffff
0x8e7c:	jmp	0x8ca3


0x8ca0:	mov	rbx, rax
0x8ca3:	or	ebp, r8d
0x8ca6:	nop	word ptr cs:[rax + rax]
0x8cb0:	movsxd	rdi, edi
0x8cb3:	mov	eax, ebp
0x8cb5:	add	rcx, rdi
0x8cb8:	or	eax, 2
0x8cbb:	mov	qword ptr [r15], rcx
0x8cbe:	cmp	byte ptr [rcx], 0
0x8cc1:	mov	qword ptr [r14], rbx
0x8cc4:	cmovne	ebp, eax
0x8cc7:	jmp	0x8b8d


0x8ca3:	or	ebp, r8d
0x8ca6:	nop	word ptr cs:[rax + rax]
0x8cb0:	movsxd	rdi, edi
0x8cb3:	mov	eax, ebp
0x8cb5:	add	rcx, rdi
0x8cb8:	or	eax, 2
0x8cbb:	mov	qword ptr [r15], rcx
0x8cbe:	cmp	byte ptr [rcx], 0
0x8cc1:	mov	qword ptr [r14], rbx
0x8cc4:	cmovne	ebp, eax
0x8cc7:	jmp	0x8b8d


0x8cd7:	mov	edx, 2
0x8cdc:	mov	rax, rdx
0x8cdf:	mul	rbx
0x8ce2:	jo	0x8d7e


0x8d7e:	mov	ebp, 1
0x8d83:	or	rbx, 0xffffffffffffffff
0x8d87:	jmp	0x8cb0


0x8ce8:	add	rbx, rbx
0x8ceb:	jmp	0x8cb0


0x8cb0:	movsxd	rdi, edi
0x8cb3:	mov	eax, ebp
0x8cb5:	add	rcx, rdi
0x8cb8:	or	eax, 2
0x8cbb:	mov	qword ptr [r15], rcx
0x8cbe:	cmp	byte ptr [rcx], 0
0x8cc1:	mov	qword ptr [r14], rbx
0x8cc4:	cmovne	ebp, eax
0x8cc7:	jmp	0x8b8d


0x8ced:	mov	edx, 0x200
0x8cf2:	mov	rax, rdx
0x8cf5:	mul	rbx
0x8cf8:	jo	0x8d7e


0x8cfe:	shl	rbx, 9
0x8d02:	jmp	0x8cb0


0x8d04:	mov	r8d, 7
0x8d0a:	xor	r9d, r9d
0x8d0d:	nop	dword ptr [rax]
0x8d10:	mov	rax, rbx
0x8d13:	mul	rsi
0x8d16:	mov	rbx, rax
0x8d19:	jo	0x8eae


0x8eae:	mov	r9d, 1
0x8eb4:	or	rbx, 0xffffffffffffffff
0x8eb8:	jmp	0x8d1f


0x8d1f:	sub	r8d, 1
0x8d23:	jne	0x8d10


0x8d25:	or	ebp, r9d
0x8d28:	jmp	0x8cb0


0x8d10:	mov	rax, rbx
0x8d13:	mul	rsi
0x8d16:	mov	rbx, rax
0x8d19:	jo	0x8eae


0x8d2a:	mov	r8d, 8
0x8d30:	xor	r9d, r9d
0x8d33:	nop	dword ptr [rax + rax]
0x8d38:	mov	rax, rbx
0x8d3b:	mul	rsi
0x8d3e:	mov	rbx, rax
0x8d41:	jo	0x8e90


0x8e90:	mov	r9d, 1
0x8e96:	or	rbx, 0xffffffffffffffff
0x8e9a:	jmp	0x8d47


0x8d47:	sub	r8d, 1
0x8d4b:	jne	0x8d38


0x8d4d:	jmp	0x8d25


0x8d38:	mov	rax, rbx
0x8d3b:	mul	rsi
0x8d3e:	mov	rbx, rax
0x8d41:	jo	0x8e90


0x8d4f:	mov	r8d, 4
0x8d55:	xor	r9d, r9d
0x8d58:	mov	rax, rbx
0x8d5b:	mul	rsi
0x8d5e:	mov	rbx, rax
0x8d61:	jo	0x8e63


0x8e63:	mov	r9d, 1
0x8e69:	or	rbx, 0xffffffffffffffff
0x8e6d:	jmp	0x8d67


0x8d67:	sub	r8d, 1
0x8d6b:	jne	0x8d58


0x8d6d:	jmp	0x8d25


0x8d58:	mov	rax, rbx
0x8d5b:	mul	rsi
0x8d5e:	mov	rbx, rax
0x8d61:	jo	0x8e63


0x8d6f:	mov	rax, rbx
0x8d72:	mul	rsi
0x8d75:	mov	rbx, rax
0x8d78:	jno	0x8cb0


0x8e9f:	mov	r9d, 1
0x8ea5:	or	rbx, 0xffffffffffffffff
0x8ea9:	jmp	0x8da8


0x8da8:	sub	r8d, 1
0x8dac:	jne	0x8d99


0x8dae:	jmp	0x8d25


0x8d99:	mov	rax, rbx
0x8d9c:	mul	rsi
0x8d9f:	mov	rbx, rax
0x8da2:	jo	0x8e9f


0x8db3:	mov	r8d, 6
0x8db9:	xor	r9d, r9d
0x8dbc:	mov	rax, rbx
0x8dbf:	mul	rsi
0x8dc2:	mov	rbx, rax
0x8dc5:	jo	0x8e54


0x8e54:	mov	r9d, 1
0x8e5a:	or	rbx, 0xffffffffffffffff
0x8e5e:	jmp	0x8dcb


0x8dcb:	sub	r8d, 1
0x8dcf:	jne	0x8dbc


0x8dd1:	jmp	0x8d25


0x8dbc:	mov	rax, rbx
0x8dbf:	mul	rsi
0x8dc2:	mov	rbx, rax
0x8dc5:	jo	0x8e54


0x8dd6:	mov	edx, 0x400
0x8ddb:	mov	rax, rdx
0x8dde:	mul	rbx
0x8de1:	jo	0x8d7e


0x8de3:	shl	rbx, 0xa
0x8de7:	jmp	0x8cb0


0x8dec:	mov	rax, rbx
0x8def:	mul	rsi
0x8df2:	jo	0x8ebd


0x8ebd:	mov	r8d, 1
0x8ec3:	or	rax, 0xffffffffffffffff
0x8ec7:	jmp	0x8dfb


0x8df8:	xor	r8d, r8d
0x8dfb:	mul	rsi
0x8dfe:	jno	0x8c97


0x8dfb:	mul	rsi
0x8dfe:	jno	0x8c97


0x8e04:	mov	r8d, 1
0x8e0a:	or	rax, 0xffffffffffffffff
0x8e0e:	jmp	0x8c97


0x8ecc:	nop	dword ptr [rax]


0x8f4b:	nop	dword ptr [rax + rax]


0x91ce:	nop	


0x9267:	nop	word ptr [rax + rax]


0x92f3:	nop	word ptr cs:[rax + rax]
0x92fd:	nop	dword ptr [rax]


0x937d:	nop	dword ptr [rax]


0x9413:	nop	word ptr cs:[rax + rax]
0x941d:	nop	dword ptr [rax]


0x94bc:	nop	dword ptr [rax]


0x94ce:	nop	


0x9535:	nop	
0x9536:	nop	word ptr cs:[rax + rax]


0x9542:	nop	word ptr cs:[rax + rax]
0x954c:	nop	dword ptr [rax]


0x58b0:	xor	r10d, r10d
0x58b3:	mov	eax, dword ptr [rsp + 8]
0x58b7:	cmp	eax, 2
0x58ba:	je	0x5e78


0x58e0:	xor	r10d, r10d
0x58e3:	cmp	dword ptr [rsp + 8], 2
0x58e8:	je	0x5df0


0x5908:	mov	edx, 9
0x590d:	mov	ebx, 0x74
0x5912:	cmp	dword ptr [rsp + 8], 2
0x5917:	sete	al
0x591a:	and	al, byte ptr [rsp + 0xf]
0x591e:	jne	0x5a6e


0x5948:	mov	edx, 8
0x594d:	mov	ebx, 0x62
0x5952:	jmp	0x5924


0x5958:	cmp	dword ptr [rsp + 8], 2
0x595d:	je	0x5d30


0x5a00:	cmp	byte ptr [rsp + 0xd], 0
0x5a05:	jne	0x5bd3


0x5a28:	cmp	dword ptr [rsp + 8], 2
0x5a2d:	sete	dl
0x5a30:	xor	eax, eax
0x5a32:	jmp	0x5818


0x5a40:	mov	edx, 7
0x5a45:	mov	ebx, 0x61
0x5a4a:	jmp	0x5924


0x5a50:	cmp	dword ptr [rsp + 8], 2
0x5a55:	sete	dl
0x5a58:	test	rbp, rbp
0x5a5b:	jne	0x580c


0x5a80:	cmp	dword ptr [rsp + 8], 2
0x5a85:	sete	dl
0x5a88:	xor	r12d, r12d
0x5a8b:	jmp	0x5a61


0x5a90:	cmp	dword ptr [rsp + 8], 2
0x5a95:	mov	ebx, 0x20
0x5a9a:	sete	dl
0x5a9d:	jmp	0x5a61


0x5aa0:	mov	edx, 0xd
0x5aa5:	mov	ebx, 0x72
0x5aaa:	jmp	0x5912


0x5ab0:	mov	edx, 0xc
0x5ab5:	mov	ebx, 0x66
0x5aba:	jmp	0x5924


0x5ac0:	mov	edx, 0xb
0x5ac5:	mov	ebx, 0x76
0x5aca:	jmp	0x5924


0x5ad0:	mov	edx, 0xa
0x5ad5:	mov	ebx, 0x6e
0x5ada:	jmp	0x5912


0x5b70:	xor	r10d, r10d
0x5b73:	cmp	byte ptr [rsp + 0xd], 0
0x5b78:	jne	0x596e


0x5b90:	mov	edx, 0xc
0x5b95:	xor	r10d, r10d
0x5b98:	mov	ebx, 0x66
0x5b9d:	jmp	0x5924


0x5ba8:	mov	edx, 0xa
0x5bad:	xor	r10d, r10d
0x5bb0:	mov	ebx, 0x6e
0x5bb5:	jmp	0x5912


0x5bc0:	mov	ebx, 0x61
0x5bc5:	jmp	0x5990


0x5bd0:	xor	r10d, r10d
0x5bd3:	cmp	dword ptr [rsp + 8], 2
0x5bd8:	sete	dl
0x5bdb:	cmp	byte ptr [rsp + 0xf], 0
0x5be0:	jne	0x677a


0x5c70:	cmp	dword ptr [rsp + 8], 2
0x5c75:	mov	r12d, r10d
0x5c78:	sete	dl
0x5c7b:	xor	r10d, r10d
0x5c7e:	xor	eax, eax
0x5c80:	jmp	0x5818


0x5c88:	cmp	dword ptr [rsp + 8], 2
0x5c8d:	sete	dl
0x5c90:	xor	r10d, r10d
0x5c93:	jmp	0x5a58


0x5ca0:	cmp	dword ptr [rsp + 8], 2
0x5ca5:	sete	dl
0x5ca8:	xor	r10d, r10d
0x5cab:	xor	r12d, r12d
0x5cae:	jmp	0x5a61


0x5cb8:	cmp	dword ptr [rsp + 8], 2
0x5cbd:	mov	r12d, r10d
0x5cc0:	mov	ebx, 0x20
0x5cc5:	sete	dl
0x5cc8:	xor	r10d, r10d
0x5ccb:	jmp	0x5a61


0x5ce8:	mov	ebx, 0x76
0x5ced:	jmp	0x5990


0x5cf8:	mov	edx, 9
0x5cfd:	xor	r10d, r10d
0x5d00:	mov	ebx, 0x74
0x5d05:	jmp	0x5912


0x5d10:	mov	ebx, 0x62
0x5d15:	jmp	0x5990


0x62b0:	test	ebx, ebx
0x62b2:	jne	0x66ad


0x8d90:	mov	r8d, 5
0x8d96:	xor	r9d, r9d
0x8d99:	mov	rax, rbx
0x8d9c:	mul	rsi
0x8d9f:	mov	rbx, rax
0x8da2:	jo	0x8e9f


0x222b:	nop	dword ptr [rax + rax]


0x2295:	nop	dword ptr [rax]


0x22cd:	nop	dword ptr [rax]


0x22da:	nop	word ptr [rax + rax]


0x22ea:	nop	word ptr [rax + rax]


0x2339:	nop	dword ptr [rax]


0x238a:	nop	word ptr [rax + rax]


0x239a:	nop	word ptr [rax + rax]


0x2a96:	nop	word ptr cs:[rax + rax]


0x2ae7:	nop	word ptr [rax + rax]


0x2b31:	nop	dword ptr [rax]


0x2ba2:	nop	word ptr [rax + rax]


0x2c2a:	nop	word ptr [rax + rax]


0x2c42:	nop	word ptr [rax + rax]


0x2de4:	nop	dword ptr [rax]


0x2e75:	nop	dword ptr [rax]


0x2f86:	nop	word ptr cs:[rax + rax]


0x3099:	nop	dword ptr [rax]


0x30f3:	nop	dword ptr [rax + rax]


0x311e:	nop	


0x3132:	nop	word ptr [rax + rax]


0x314b:	nop	dword ptr [rax + rax]


0x31ac:	nop	dword ptr [rax]


0x31c7:	nop	word ptr [rax + rax]


0x31d8:	nop	dword ptr [rax + rax]


0x31fe:	nop	


0x3217:	nop	word ptr [rax + rax]


0x342b:	nop	dword ptr [rax + rax]


0x3606:	nop	word ptr cs:[rax + rax]


0x36bf:	nop	


0x371f:	nop	


0x3757:	nop	word ptr [rax + rax]


0x381a:	nop	word ptr [rax + rax]


0x3851:	nop	dword ptr [rax]


0x3878:	nop	dword ptr [rax + rax]


0x390e:	nop	


0x39bb:	nop	dword ptr [rax + rax]


0x3a5c:	nop	dword ptr [rax]


0x3af5:	nop	dword ptr [rax]


0x3b1b:	nop	dword ptr [rax + rax]


0x4136:	nop	word ptr cs:[rax + rax]


0x41c3:	nop	dword ptr [rax + rax]


0x41f7:	nop	word ptr [rax + rax]


0x426d:	nop	dword ptr [rax]


0x42df:	nop	


0x4364:	nop	dword ptr [rax]


0x4393:	nop	dword ptr [rax + rax]


0x443f:	nop	


0x458e:	nop	


0x45ad:	nop	dword ptr [rax]


0x462b:	nop	dword ptr [rax + rax]


0x4647:	nop	word ptr [rax + rax]


0x469c:	nop	dword ptr [rax]


0x46be:	nop	


0x4714:	nop	dword ptr [rax]


0x47b4:	nop	dword ptr [rax]


0x47bc:	nop	dword ptr [rax]


0x47f8:	nop	dword ptr [rax + rax]


0x494e:	nop	


0x496c:	nop	dword ptr [rax]


0x4a23:	nop	dword ptr [rax + rax]


0x4aa4:	nop	dword ptr [rax]


0x4b02:	nop	word ptr [rax + rax]


0x4b5b:	nop	dword ptr [rax + rax]


0x4b64:	nop	dword ptr [rax]


0x4c4b:	nop	dword ptr [rax + rax]


0x4c72:	nop	word ptr [rax + rax]


0x4cd2:	nop	word ptr [rax + rax]


0x4d54:	nop	dword ptr [rax]


0x4d74:	nop	dword ptr [rax]


0x4d98:	nop	dword ptr [rax + rax]


0x4db8:	nop	dword ptr [rax + rax]


0x4e7b:	nop	dword ptr [rax + rax]


0x4ebb:	nop	dword ptr [rax + rax]


0x4ef7:	nop	word ptr [rax + rax]


0x4f94:	nop	dword ptr [rax]


0x4fc6:	nop	word ptr cs:[rax + rax]


0x4ff4:	nop	dword ptr [rax]


0x5008:	nop	dword ptr [rax + rax]


0x501c:	nop	dword ptr [rax]


0x503e:	nop	


0x5064:	nop	dword ptr [rax]


0x5158:	nop	dword ptr [rax + rax]


0x52b4:	nop	dword ptr [rax]


0x52ec:	nop	dword ptr [rax]


0x5312:	nop	word ptr [rax + rax]


0x5359:	nop	dword ptr [rax]


0x53b8:	nop	dword ptr [rax + rax]


0x53d2:	nop	word ptr [rax + rax]


0x553c:	nop	dword ptr [rax]


0x558d:	nop	dword ptr [rax]


0x57b8:	nop	dword ptr [rax + rax]


0x58a7:	nop	word ptr [rax + rax]


0x58de:	nop	


0x5901:	nop	dword ptr [rax]


0x5942:	nop	word ptr [rax + rax]


0x5954:	nop	dword ptr [rax]


0x59f8:	nop	dword ptr [rax + rax]


0x5a21:	nop	dword ptr [rax]


0x5a37:	nop	word ptr [rax + rax]


0x5a4f:	nop	


0x5a7e:	nop	


0x5a8d:	nop	dword ptr [rax]


0x5a9f:	nop	


0x5aaf:	nop	


0x5abf:	nop	


0x5acf:	nop	


0x5adf:	nop	


0x5b4c:	nop	dword ptr [rax]


0x5b6c:	nop	dword ptr [rax]


0x5b7e:	nop	


0x5b8f:	nop	


0x5ba2:	nop	word ptr [rax + rax]


0x5bba:	nop	word ptr [rax + rax]


0x5bca:	nop	word ptr [rax + rax]


0x5c6b:	nop	dword ptr [rax + rax]


0x5c85:	nop	dword ptr [rax]


0x5c98:	nop	dword ptr [rax + rax]


0x5cb3:	nop	dword ptr [rax + rax]


0x5ce2:	nop	word ptr [rax + rax]


0x5cf2:	nop	word ptr [rax + rax]


0x5d0a:	nop	word ptr [rax + rax]


0x5d1a:	nop	word ptr [rax + rax]


0x5d28:	nop	dword ptr [rax + rax]


0x5d4f:	nop	


0x5de9:	nop	dword ptr [rax]


0x5e32:	nop	word ptr [rax + rax]


0x5e58:	nop	dword ptr [rax + rax]


0x5e71:	nop	dword ptr [rax]


0x5e92:	nop	word ptr [rax + rax]


0x5ff8:	nop	dword ptr [rax + rax]


0x610b:	nop	dword ptr [rax + rax]


0x612e:	nop	


0x61f5:	nop	dword ptr [rax]


0x62ad:	nop	dword ptr [rax]


0x64b6:	nop	word ptr cs:[rax + rax]


0x6549:	nop	dword ptr [rax]


0x65bd:	nop	dword ptr [rax]


0x669d:	nop	dword ptr [rax]


0x69ab:	nop	dword ptr [rax + rax]


0x71ed:	nop	dword ptr [rax]


0x724f:	nop	


0x7311:	nop	dword ptr [rax]


0x74bd:	nop	dword ptr [rax]


0x7552:	nop	word ptr [rax + rax]


0x7584:	nop	dword ptr [rax]


0x7652:	nop	word ptr [rax + rax]


0x7793:	nop	dword ptr [rax + rax]


0x77e1:	nop	dword ptr [rax]


0x7848:	nop	dword ptr [rax + rax]


0x788e:	nop	


0x7938:	nop	dword ptr [rax + rax]


0x7ea6:	nop	word ptr cs:[rax + rax]


0x7f1d:	nop	dword ptr [rax]


0x7f37:	nop	word ptr [rax + rax]


0x7fd4:	nop	dword ptr [rax]


0x8031:	nop	dword ptr [rax]


0x8176:	nop	word ptr cs:[rax + rax]


0x8205:	nop	dword ptr [rax]


0x8226:	nop	word ptr cs:[rax + rax]


0x8285:	nop	dword ptr [rax]


0x82c1:	nop	dword ptr [rax]


0x8308:	nop	dword ptr [rax + rax]


0x8357:	nop	word ptr [rax + rax]


0x83b4:	nop	dword ptr [rax]


0x83e2:	nop	word ptr [rax + rax]


0x8496:	nop	word ptr cs:[rax + rax]


0x84f9:	nop	dword ptr [rax]


0x8772:	nop	word ptr [rax + rax]


0x87f9:	nop	dword ptr [rax]


0x8824:	nop	dword ptr [rax]


0x887d:	nop	dword ptr [rax]


0x8a46:	nop	word ptr cs:[rax + rax]


0x8a6f:	nop	


0x8b16:	nop	word ptr cs:[rax + rax]


0x8b73:	nop	dword ptr [rax + rax]


0x8b82:	nop	word ptr [rax + rax]


0x8bb2:	nop	word ptr [rax + rax]


0x8bbc:	nop	dword ptr [rax]


0x8c5b:	nop	dword ptr [rax + rax]


0x8d8c:	nop	dword ptr [rax]


0x8e13:	nop	dword ptr [rax + rax]


0x8f15:	nop	dword ptr [rax]


0x8feb:	nop	dword ptr [rax + rax]


0x9016:	nop	word ptr cs:[rax + rax]


0x904f:	nop	


0x9099:	nop	dword ptr [rax]


0x90bb:	nop	dword ptr [rax + rax]


0x9161:	nop	dword ptr [rax]


0x91f3:	nop	dword ptr [rax + rax]


0x921f:	nop	


0x9334:	nop	dword ptr [rax]


0x9351:	nop	dword ptr [rax]


0x9362:	nop	word ptr [rax + rax]


0x93a9:	nop	dword ptr [rax]


0x93f5:	nop	dword ptr [rax]


0x945a:	nop	word ptr [rax + rax]


0x94a6:	nop	word ptr cs:[rax + rax]


