0x5a60:	sub	rsp, 8
0x5a64:	add	rsp, 8
0x5a68:	ret	


0x5a50:	mov	rdx, qword ptr [rip + 0x2035b1]
0x5a57:	xor	esi, esi
0x5a59:	jmp	0x1710


0x5a40:	ret	


0x59d0:	push	r15
0x59d2:	push	r14
0x59d4:	mov	r15, rdx
0x59d7:	push	r13
0x59d9:	push	r12
0x59db:	lea	r12, [rip + 0x2030ee]
0x59e2:	push	rbp
0x59e3:	lea	rbp, [rip + 0x2030ee]
0x59ea:	push	rbx
0x59eb:	mov	r13d, edi
0x59ee:	mov	r14, rsi
0x59f1:	sub	rbp, r12
0x59f4:	sub	rsp, 8
0x59f8:	sar	rbp, 3
0x59fc:	call	0x1458


0x5970:	push	r12
0x5972:	push	rbp
0x5973:	mov	r12, rdx
0x5976:	push	rbx
0x5977:	mov	rbp, rdi
0x597a:	mov	rbx, rsi
0x597d:	sub	rsp, 0x10
0x5981:	cmp	rsi, rcx
0x5984:	jne	0x599f


0x58c0:	push	r15
0x58c2:	push	r14
0x58c4:	mov	r15, rdx
0x58c7:	push	r13
0x58c9:	push	r12
0x58cb:	mov	r14, rdi
0x58ce:	push	rbp
0x58cf:	push	rbx
0x58d0:	mov	rbp, rcx
0x58d3:	mov	rbx, rsi
0x58d6:	sub	rsp, 0x18
0x58da:	cmp	rsi, rcx
0x58dd:	jne	0x58f2


0x5800:	push	r15
0x5802:	push	r14
0x5804:	mov	r14, rcx
0x5807:	push	r13
0x5809:	push	r12
0x580b:	mov	r13, rsi
0x580e:	push	rbp
0x580f:	push	rbx
0x5810:	mov	r12, rdi
0x5813:	mov	rbp, rdx
0x5816:	sub	rsp, 8
0x581a:	call	0x14b0


0x57c0:	sub	rsp, 8
0x57c4:	mov	edi, 0xe
0x57c9:	call	0x1660


0x5740:	push	r12
0x5742:	push	rbp
0x5743:	mov	rbp, rdi
0x5746:	push	rbx
0x5747:	call	0x14e0


0x56b0:	push	r13
0x56b2:	push	r12
0x56b4:	mov	r13, rsi
0x56b7:	push	rbp
0x56b8:	push	rbx
0x56b9:	mov	rbx, rdi
0x56bc:	mov	r12, rdx
0x56bf:	sub	rsp, 0x18
0x56c3:	mov	rax, qword ptr fs:[0x28]
0x56cc:	mov	qword ptr [rsp + 8], rax
0x56d1:	xor	eax, eax
0x56d3:	lea	rax, [rsp + 4]
0x56d8:	test	rdi, rdi
0x56db:	cmove	rbx, rax
0x56df:	mov	rdi, rbx
0x56e2:	call	0x1580


0x5650:	mov	rax, qword ptr [rdi + 8]
0x5654:	cmp	qword ptr [rdi + 0x10], rax
0x5658:	je	0x5660


0x5610:	test	rdi, rdi
0x5613:	push	rbx
0x5614:	mov	rbx, rdi
0x5617:	je	0x562a


0x5390:	push	r12
0x5392:	push	rbp
0x5393:	mov	ebp, edi
0x5395:	push	rbx
0x5396:	sub	rsp, 0x50
0x539a:	mov	rax, qword ptr fs:[0x28]
0x53a3:	mov	qword ptr [rsp + 0x18], rax
0x53a8:	xor	eax, eax
0x53aa:	lea	rax, [rsp + 0x70]
0x53af:	test	esi, esi
0x53b1:	mov	qword ptr [rsp + 0x30], rdx
0x53b6:	mov	qword ptr [rsp + 0x38], rcx
0x53bb:	mov	qword ptr [rsp + 0x40], r8
0x53c0:	mov	qword ptr [rsp + 8], rax
0x53c5:	lea	rax, [rsp + 0x20]
0x53ca:	mov	qword ptr [rsp + 0x48], r9
0x53cf:	mov	dword ptr [rsp], 0x10
0x53d6:	mov	qword ptr [rsp + 0x10], rax
0x53db:	je	0x55e2


0x5310:	push	r12
0x5312:	push	rbp
0x5313:	push	rbx
0x5314:	mov	rbx, rdi
0x5317:	call	0x1630


0x52c0:	push	r14
0x52c2:	push	r13
0x52c4:	mov	r14, rcx
0x52c7:	push	r12
0x52c9:	push	rbp
0x52ca:	mov	r12, rdx
0x52cd:	push	rbx
0x52ce:	mov	rbp, rdi
0x52d1:	mov	rbx, rsi
0x52d4:	call	0x5970


0x5270:	push	r14
0x5272:	push	r13
0x5274:	mov	r13, rcx
0x5277:	push	r12
0x5279:	push	rbp
0x527a:	mov	r12, rdx
0x527d:	push	rbx
0x527e:	mov	rbp, rsi
0x5281:	mov	rbx, rdi
0x5284:	call	0x58c0


0x51b0:	push	r14
0x51b2:	push	r13
0x51b4:	mov	r14d, edi
0x51b7:	push	r12
0x51b9:	push	rbp
0x51ba:	mov	r12, rdx
0x51bd:	push	rbx
0x51be:	mov	rbx, rsi
0x51c1:	lea	rsi, [rip + 0x18f8]
0x51c8:	mov	edx, 5
0x51cd:	xor	edi, edi
0x51cf:	mov	r13, r8
0x51d2:	mov	rbp, rcx
0x51d5:	call	0x1530


0x5170:	lea	rsi, [rip + 0x1938]
0x5177:	sub	rsp, 8
0x517b:	mov	edx, 5
0x5180:	xor	edi, edi
0x5182:	call	0x1530


0x5150:	push	rbx
0x5151:	mov	rbx, rdi
0x5154:	call	0x1550


0x5120:	push	rbp
0x5121:	push	rbx
0x5122:	mov	rbp, rdi
0x5125:	mov	rdi, rsi
0x5128:	mov	rbx, rsi
0x512b:	sub	rsp, 8
0x512f:	call	0x4f20


0x50f0:	mov	rax, rdi
0x50f3:	sub	rsp, 8
0x50f7:	mul	rsi
0x50fa:	seto	dl
0x50fd:	test	rax, rax
0x5100:	js	0x5119


0x50d0:	push	rbx
0x50d1:	mov	rbx, rdi
0x50d4:	call	0x4f20


0x5080:	test	rdi, rdi
0x5083:	mov	rax, qword ptr [rsi]
0x5086:	je	0x50b0


0x4ff0:	test	rdi, rdi
0x4ff3:	mov	r9, rdx
0x4ff6:	mov	rcx, qword ptr [rsi]
0x4ff9:	je	0x5030


0x4fc0:	mov	rax, rsi
0x4fc3:	mul	rdx
0x4fc6:	mov	rsi, rax
0x4fc9:	seto	al
0x4fcc:	test	rsi, rsi
0x4fcf:	js	0x4fdb


0x4f80:	test	rsi, rsi
0x4f83:	push	rbx
0x4f84:	mov	rbx, rsi
0x4f87:	jne	0x4f8e


0x4f70:	jmp	0x4f20


0x4f40:	mov	rax, rdi
0x4f43:	mul	rsi
0x4f46:	mov	rdi, rax
0x4f49:	seto	al
0x4f4c:	test	rdi, rdi
0x4f4f:	js	0x4f5b


0x4f20:	push	rbx
0x4f21:	mov	rbx, rdi
0x4f24:	call	0x1640


0x4ea0:	push	rbx
0x4ea1:	lea	rsi, [rip + 0x18fa]
0x4ea8:	mov	edx, 5
0x4ead:	xor	edi, edi
0x4eaf:	call	0x1530


0x4dc0:	push	rbp
0x4dc1:	push	rbx
0x4dc2:	mov	r10d, 0x20
0x4dc8:	xor	r11d, r11d
0x4dcb:	sub	rsp, 0xb8
0x4dd2:	mov	rax, qword ptr fs:[0x28]
0x4ddb:	mov	qword ptr [rsp + 0x78], rax
0x4de0:	xor	eax, eax
0x4de2:	lea	rax, [rsp + 0xd0]
0x4dea:	mov	qword ptr [rsp + 0xa0], r8
0x4df2:	lea	rbx, [rsp + 0xd0]
0x4dfa:	lea	r8, [rsp + 0x20]
0x4dff:	mov	qword ptr [rsp + 0xa8], r9
0x4e07:	mov	dword ptr [rsp + 8], 0x20
0x4e0f:	mov	qword ptr [rsp + 0x10], rax
0x4e14:	lea	rax, [rsp + 0x80]
0x4e1c:	xor	r9d, r9d
0x4e1f:	mov	qword ptr [rsp + 0x18], rax
0x4e24:	mov	rbp, rax
0x4e27:	nop	word ptr [rax + rax]
0x4e30:	cmp	r10d, 0x2f
0x4e34:	ja	0x4e8c


0x4d40:	sub	rsp, 0x68
0x4d44:	mov	r10, r8
0x4d47:	xor	r9d, r9d
0x4d4a:	mov	rax, qword ptr fs:[0x28]
0x4d53:	mov	qword ptr [rsp + 0x58], rax
0x4d58:	xor	eax, eax
0x4d5a:	mov	r8, rsp
0x4d5d:	nop	dword ptr [rax]
0x4d60:	mov	eax, dword ptr [r10]
0x4d63:	cmp	eax, 0x2f
0x4d66:	ja	0x4daa


0x4d20:	xor	r9d, r9d
0x4d23:	cmp	qword ptr [r8], 0
0x4d27:	je	0x4d3b


0x4900:	push	r15
0x4902:	push	r14
0x4904:	push	r13
0x4906:	push	r12
0x4908:	mov	r12, r9
0x490b:	push	rbp
0x490c:	push	rbx
0x490d:	mov	rbp, rdi
0x4910:	mov	rbx, r8
0x4913:	sub	rsp, 0x28
0x4917:	test	rsi, rsi
0x491a:	je	0x4a38


0x48f0:	mov	edx, 3
0x48f5:	xor	esi, esi
0x48f7:	xor	eax, eax
0x48f9:	jmp	0x5390


0x48d0:	lea	rcx, [rip + 0x204769]
0x48d7:	mov	rsi, rdi
0x48da:	mov	rdx, -1
0x48e1:	xor	edi, edi
0x48e3:	jmp	0x3f90


0x48b0:	lea	rcx, [rip + 0x204789]
0x48b7:	mov	rdx, -1
0x48be:	jmp	0x3f90


0x4890:	lea	rcx, [rip + 0x2047a9]
0x4897:	mov	rdx, rsi
0x489a:	mov	rsi, rdi
0x489d:	xor	edi, edi
0x489f:	jmp	0x3f90


0x4880:	lea	rcx, [rip + 0x2047b9]
0x4887:	jmp	0x3f90


0x4860:	mov	r8, rcx
0x4863:	mov	rcx, rdx
0x4866:	mov	rdx, rsi
0x4869:	mov	rsi, rdi
0x486c:	xor	edi, edi
0x486e:	jmp	0x4790


0x4840:	mov	rcx, rdx
0x4843:	mov	r8, -1
0x484a:	mov	rdx, rsi
0x484d:	mov	rsi, rdi
0x4850:	xor	edi, edi
0x4852:	jmp	0x4790


0x4830:	mov	r8, -1
0x4837:	jmp	0x4790


0x4790:	sub	rsp, 0x48
0x4794:	mov	r9, rcx
0x4797:	mov	rcx, qword ptr [rip + 0x204ab2]
0x479e:	movdqa	xmm0, xmmword ptr [rip + 0x204a7a]
0x47a6:	mov	rax, qword ptr fs:[0x28]
0x47af:	mov	qword ptr [rsp + 0x38], rax
0x47b4:	xor	eax, eax
0x47b6:	movaps	xmmword ptr [rsp], xmm0
0x47ba:	test	rsi, rsi
0x47bd:	mov	qword ptr [rsp + 0x30], rcx
0x47c2:	mov	dword ptr [rsp], 0xa
0x47c9:	movdqa	xmm0, xmmword ptr [rip + 0x204a5f]
0x47d1:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x47d6:	movdqa	xmm0, xmmword ptr [rip + 0x204a62]
0x47de:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x47e3:	je	0x4817


0x4700:	sub	rsp, 0x48
0x4704:	mov	rax, rdx
0x4707:	mov	rdx, qword ptr fs:[0x28]
0x4710:	mov	qword ptr [rsp + 0x38], rdx
0x4715:	xor	edx, edx
0x4717:	cmp	esi, 0xa
0x471a:	je	0x4784


0x46f0:	mov	edx, 0x3a
0x46f5:	jmp	0x4620


0x46d0:	mov	edx, 0x3a
0x46d5:	mov	rsi, -1
0x46dc:	jmp	0x4620


0x46c0:	movsx	edx, sil
0x46c4:	mov	rsi, -1
0x46cb:	jmp	0x4620


0x4620:	sub	rsp, 0x48
0x4624:	mov	ecx, edx
0x4626:	mov	rax, qword ptr fs:[0x28]
0x462f:	mov	qword ptr [rsp + 0x38], rax
0x4634:	xor	eax, eax
0x4636:	mov	rax, qword ptr [rip + 0x204c13]
0x463d:	mov	r8, rsp
0x4640:	and	ecx, 0x1f
0x4643:	movdqa	xmm0, xmmword ptr [rip + 0x204bd5]
0x464b:	mov	qword ptr [rsp + 0x30], rax
0x4650:	mov	eax, edx
0x4652:	movaps	xmmword ptr [rsp], xmm0
0x4656:	shr	al, 5
0x4659:	movzx	eax, al
0x465c:	lea	r9, [r8 + rax*4 + 8]
0x4661:	movdqa	xmm0, xmmword ptr [rip + 0x204bc7]
0x4669:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x466e:	movdqa	xmm0, xmmword ptr [rip + 0x204bca]
0x4676:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x467b:	mov	edx, dword ptr [r9]
0x467e:	mov	eax, edx
0x4680:	shr	eax, cl
0x4682:	not	eax
0x4684:	and	eax, 1
0x4687:	shl	eax, cl
0x4689:	mov	rcx, r8
0x468c:	xor	eax, edx
0x468e:	mov	rdx, rsi
0x4691:	mov	rsi, rdi
0x4694:	mov	dword ptr [r9], eax
0x4697:	xor	edi, edi
0x4699:	call	0x3f90


0x4610:	mov	rcx, rdx
0x4613:	mov	rdx, rsi
0x4616:	mov	esi, edi
0x4618:	xor	edi, edi
0x461a:	jmp	0x4570


0x4600:	mov	rdx, rsi
0x4603:	mov	esi, edi
0x4605:	xor	edi, edi
0x4607:	jmp	0x44e0


0x4570:	sub	rsp, 0x48
0x4574:	mov	rax, rdx
0x4577:	mov	rdx, rcx
0x457a:	mov	rcx, qword ptr fs:[0x28]
0x4583:	mov	qword ptr [rsp + 0x38], rcx
0x4588:	xor	ecx, ecx
0x458a:	cmp	esi, 0xa
0x458d:	je	0x45f0


0x44e0:	sub	rsp, 0x48
0x44e4:	mov	rax, rdx
0x44e7:	mov	rdx, qword ptr fs:[0x28]
0x44f0:	mov	qword ptr [rsp + 0x38], rdx
0x44f5:	xor	edx, edx
0x44f7:	cmp	esi, 0xa
0x44fa:	je	0x4564


0x44c0:	lea	rcx, [rip + 0x204d59]
0x44c7:	mov	rdx, rsi
0x44ca:	mov	rsi, rdi
0x44cd:	xor	edi, edi
0x44cf:	jmp	0x3f90


0x44a0:	lea	rcx, [rip + 0x204d79]
0x44a7:	mov	rsi, rdi
0x44aa:	mov	rdx, -1
0x44b1:	xor	edi, edi
0x44b3:	jmp	0x3f90


0x4490:	lea	rcx, [rip + 0x204d89]
0x4497:	jmp	0x3f90


0x4470:	lea	rcx, [rip + 0x204da9]
0x4477:	mov	rdx, -1
0x447e:	jmp	0x3f90


0x43d0:	mov	eax, dword ptr [rip + 0x204ca2]
0x43d6:	push	r12
0x43d8:	mov	r12, qword ptr [rip + 0x204ca1]
0x43df:	push	rbp
0x43e0:	push	rbx
0x43e1:	cmp	eax, 1
0x43e4:	jle	0x4411


0x43c0:	mov	rcx, rdx
0x43c3:	xor	edx, edx
0x43c5:	jmp	0x42d0


0x42d0:	push	r15
0x42d2:	push	r14
0x42d4:	lea	rax, [rip + 0x204f45]
0x42db:	push	r13
0x42dd:	push	r12
0x42df:	mov	r12, rdx
0x42e2:	push	rbp
0x42e3:	push	rbx
0x42e4:	mov	rbx, rcx
0x42e7:	mov	r14, rdi
0x42ea:	mov	r15, rsi
0x42ed:	sub	rsp, 0x38
0x42f1:	test	rcx, rcx
0x42f4:	cmove	rbx, rax
0x42f8:	xor	ebp, ebp
0x42fa:	call	0x14b0


0x4250:	push	r15
0x4252:	push	r14
0x4254:	lea	rax, [rip + 0x204fc5]
0x425b:	push	r13
0x425d:	push	r12
0x425f:	mov	r13, rdi
0x4262:	push	rbp
0x4263:	push	rbx
0x4264:	mov	rbx, r8
0x4267:	mov	r14, rsi
0x426a:	mov	r15, rdx
0x426d:	sub	rsp, 0x18
0x4271:	test	r8, r8
0x4274:	cmove	rbx, rax
0x4278:	mov	qword ptr [rsp + 8], rcx
0x427d:	call	0x14b0


0x4220:	lea	rax, [rip + 0x204ff9]
0x4227:	test	rdi, rdi
0x422a:	cmove	rdi, rax
0x422e:	test	rsi, rsi
0x4231:	mov	dword ptr [rdi], 0xa
0x4237:	je	0x4247


0x4200:	lea	rax, [rip + 0x205019]
0x4207:	test	rdi, rdi
0x420a:	cmove	rdi, rax
0x420e:	mov	eax, dword ptr [rdi + 4]
0x4211:	mov	dword ptr [rdi + 4], esi
0x4214:	ret	


0x41c0:	lea	rax, [rip + 0x205059]
0x41c7:	test	rdi, rdi
0x41ca:	mov	ecx, esi
0x41cc:	cmove	rdi, rax
0x41d0:	mov	eax, esi
0x41d2:	and	ecx, 0x1f
0x41d5:	shr	al, 5
0x41d8:	movzx	eax, al
0x41db:	lea	rdi, [rdi + rax*4 + 8]
0x41e0:	mov	esi, dword ptr [rdi]
0x41e2:	mov	eax, esi
0x41e4:	shr	eax, cl
0x41e6:	xor	edx, eax
0x41e8:	and	eax, 1
0x41eb:	and	edx, 1
0x41ee:	shl	edx, cl
0x41f0:	xor	edx, esi
0x41f2:	mov	dword ptr [rdi], edx
0x41f4:	ret	


0x41a0:	lea	rax, [rip + 0x205079]
0x41a7:	test	rdi, rdi
0x41aa:	cmove	rdi, rax
0x41ae:	mov	dword ptr [rdi], esi
0x41b0:	ret	


0x4180:	lea	rax, [rip + 0x205099]
0x4187:	test	rdi, rdi
0x418a:	cmove	rdi, rax
0x418e:	mov	eax, dword ptr [rdi]
0x4190:	ret	


0x4140:	push	r12
0x4142:	push	rbp
0x4143:	push	rbx
0x4144:	mov	rbx, rdi
0x4147:	call	0x14b0


0x3f90:	push	r15
0x3f92:	push	r14
0x3f94:	movsxd	r15, edi
0x3f97:	push	r13
0x3f99:	push	r12
0x3f9b:	mov	r14, rdx
0x3f9e:	push	rbp
0x3f9f:	push	rbx
0x3fa0:	mov	rbp, rcx
0x3fa3:	sub	rsp, 0x28
0x3fa7:	mov	qword ptr [rsp + 8], rsi
0x3fac:	call	0x14b0


0x2d50:	push	r15
0x2d52:	push	r14
0x2d54:	mov	r15d, r8d
0x2d57:	push	r13
0x2d59:	push	r12
0x2d5b:	mov	r14, rdi
0x2d5e:	push	rbp
0x2d5f:	push	rbx
0x2d60:	mov	ebx, r9d
0x2d63:	mov	r13, rsi
0x2d66:	mov	rbp, rcx
0x2d69:	and	ebx, 2
0x2d6c:	sub	rsp, 0xb8
0x2d73:	mov	rax, qword ptr [rsp + 0xf0]
0x2d7b:	mov	qword ptr [rsp + 0x10], rdx
0x2d80:	mov	dword ptr [rsp + 8], r8d
0x2d85:	mov	dword ptr [rsp + 0x78], r9d
0x2d8a:	mov	qword ptr [rsp + 0x20], rax
0x2d8f:	mov	rax, qword ptr [rsp + 0xf8]
0x2d97:	mov	qword ptr [rsp + 0x68], rax
0x2d9c:	mov	rax, qword ptr [rsp + 0x100]
0x2da4:	mov	qword ptr [rsp + 0x60], rax
0x2da9:	mov	rax, qword ptr fs:[0x28]
0x2db2:	mov	qword ptr [rsp + 0xa8], rax
0x2dba:	xor	eax, eax
0x2dbc:	call	0x1540


0x2c60:	push	rbp
0x2c61:	push	rbx
0x2c62:	mov	rbp, rdi
0x2c65:	mov	ebx, esi
0x2c67:	sub	rsp, 8
0x2c6b:	call	0x57c0


0x2bc0:	test	rdi, rdi
0x2bc3:	push	rbx
0x2bc4:	je	0x2c3d


0x2b80:	push	rbp
0x2b81:	push	rbx
0x2b82:	mov	rbp, rsi
0x2b85:	mov	rsi, rdx
0x2b88:	mov	rdx, rcx
0x2b8b:	mov	rbx, rcx
0x2b8e:	sub	rsp, 8
0x2b92:	cmp	rbp, rcx
0x2b95:	cmovbe	rdx, rbp
0x2b99:	call	0x15e0


0x2b70:	mov	rdi, qword ptr [rdi + 0x10]
0x2b74:	jmp	0x1490


0x2b60:	mov	edx, 0xa
0x2b65:	jmp	0x2a50


0x2a50:	push	r15
0x2a52:	push	r14
0x2a54:	push	r13
0x2a56:	push	r12
0x2a58:	push	rbp
0x2a59:	push	rbx
0x2a5a:	sub	rsp, 0x18
0x2a5e:	mov	r13, qword ptr [rdi + 0x10]
0x2a62:	mov	r8, qword ptr [rdi]
0x2a65:	add	r8, r13
0x2a68:	test	byte ptr [rsi], 0x10
0x2a6b:	jne	0x2b40


0x2a40:	pxor	xmm0, xmm0
0x2a44:	mov	qword ptr [rdi + 0x10], 0
0x2a4c:	movups	xmmword ptr [rdi], xmm0
0x2a4f:	ret	


0x29f0:	lea	rcx, [rsi + 0x14]
0x29f4:	mov	byte ptr [rsi + 0x14], 0
0x29f8:	movabs	rsi, 0xcccccccccccccccd
0x2a02:	nop	word ptr [rax + rax]
0x2a08:	mov	rax, rdi
0x2a0b:	sub	rcx, 1
0x2a0f:	mul	rsi
0x2a12:	shr	rdx, 3
0x2a16:	lea	rax, [rdx + rdx*4]
0x2a1a:	add	rax, rax
0x2a1d:	sub	rdi, rax
0x2a20:	add	edi, 0x30
0x2a23:	test	rdx, rdx
0x2a26:	mov	byte ptr [rcx], dil
0x2a29:	mov	rdi, rdx
0x2a2c:	jne	0x2a08


0x2990:	sub	rsp, 8
0x2994:	xor	esi, esi
0x2996:	call	0x16c0


0x28f0:	push	r12
0x28f2:	push	rbp
0x28f3:	mov	rbp, rsi
0x28f6:	push	rbx
0x28f7:	call	0x1700


0x28c0:	test	rdi, rdi
0x28c3:	je	0x28e0


0x28b0:	jmp	0x15d0


0x2800:	push	rbp
0x2801:	push	rbx
0x2802:	sub	rsp, 8
0x2806:	mov	rdi, qword ptr [rip + 0x20689b]
0x280d:	call	0x5740


0x27f0:	mov	byte ptr [rip + 0x206911], dil
0x27f7:	ret	


0x27e0:	mov	qword ptr [rip + 0x206929], rdi
0x27e7:	ret	


0x2340:	push	r13
0x2342:	push	r12
0x2344:	mov	edx, 5
0x2349:	push	rbp
0x234a:	push	rbx
0x234b:	mov	ebp, edi
0x234d:	sub	rsp, 0x88
0x2354:	mov	rbx, qword ptr [rip + 0x206dbd]
0x235b:	mov	rax, qword ptr fs:[0x28]
0x2364:	mov	qword ptr [rsp + 0x78], rax
0x2369:	xor	eax, eax
0x236b:	test	edi, edi
0x236d:	je	0x239d


0x1d60:	push	r15
0x1d62:	push	r14
0x1d64:	mov	r14, rdi
0x1d67:	push	r13
0x1d69:	push	r12
0x1d6b:	push	rbp
0x1d6c:	push	rbx
0x1d6d:	xor	ebp, ebp
0x1d6f:	sub	rsp, 0x208
0x1d76:	mov	rax, qword ptr fs:[0x28]
0x1d7f:	mov	qword ptr [rsp + 0x1f8], rax
0x1d87:	xor	eax, eax
0x1d89:	lea	rax, [rsp + 0x80]
0x1d91:	lea	r15, [rsp + 0xe0]
0x1d99:	mov	qword ptr [rsp + 0x48], rdi
0x1d9e:	mov	qword ptr [rsp + 0x10], rax
0x1da3:	mov	r12, rax
0x1da6:	lea	rax, [rsp + 0x70]
0x1dab:	mov	qword ptr [rsp + 0x18], rax
0x1db0:	lea	rax, [rsp + 0xa0]
0x1db8:	mov	qword ptr [rsp + 0x20], rax
0x1dbd:	mov	rcx, qword ptr [rsp + 0x20]
0x1dc2:	mov	rax, rbp
0x1dc5:	lea	r13, [r15 + 0x60]
0x1dc9:	shl	rax, 5
0x1dcd:	mov	dword ptr [rsp + 8], ebp
0x1dd1:	lea	rbx, [rcx + rax]
0x1dd5:	mov	rdi, r15
0x1dd8:	add	rbx, 8
0x1ddc:	call	0x2a40


0x1cd0:	push	r12
0x1cd2:	push	rbp
0x1cd3:	lea	r12, [rip + 0x207423]
0x1cda:	push	rbx
0x1cdb:	lea	ebx, [r8 - 1]
0x1cdf:	movsxd	rbx, ebx
0x1ce2:	cmp	byte ptr [r12 + rbx], 0
0x1ce7:	jne	0x1d4b


0x1c20:	cmp	ecx, 2
0x1c23:	push	r12
0x1c25:	mov	r12, rdi
0x1c28:	push	rbp
0x1c29:	mov	rbp, rsi
0x1c2c:	push	rbx
0x1c2d:	mov	rbx, rdx
0x1c30:	je	0x1ca0


0x1c10:	push	rbp
0x1c11:	mov	rbp, rsp
0x1c14:	pop	rbp
0x1c15:	jmp	0x1b80


0x1bd0:	cmp	byte ptr [rip + 0x207511], 0
0x1bd7:	jne	0x1c08


0x1b80:	lea	rdi, [rip + 0x207519]
0x1b87:	lea	rsi, [rip + 0x207512]
0x1b8e:	push	rbp
0x1b8f:	sub	rsi, rdi
0x1b92:	mov	rbp, rsp
0x1b95:	sar	rsi, 3
0x1b99:	mov	rax, rsi
0x1b9c:	shr	rax, 0x3f
0x1ba0:	add	rsi, rax
0x1ba3:	sar	rsi, 1
0x1ba6:	je	0x1bc0


0x1b40:	lea	rdi, [rip + 0x207559]
0x1b47:	push	rbp
0x1b48:	lea	rax, [rip + 0x207551]
0x1b4f:	cmp	rax, rdi
0x1b52:	mov	rbp, rsp
0x1b55:	je	0x1b70


0x1b10:	xor	ebp, ebp
0x1b12:	mov	r9, rdx
0x1b15:	pop	rsi
0x1b16:	mov	rdx, rsp
0x1b19:	and	rsp, 0xfffffffffffffff0
0x1b1d:	push	rax
0x1b1e:	push	rsp
0x1b1f:	lea	r8, [rip + 0x3f1a]
0x1b26:	lea	rcx, [rip + 0x3ea3]
0x1b2d:	lea	rdi, [rip - 0x3a4]
0x1b34:	call	qword ptr [rip + 0x20748e]


0x1790:	push	r13
0x1792:	push	r12
0x1794:	mov	r12, -1
0x179b:	push	rbp
0x179c:	push	rbx
0x179d:	movsxd	rbp, edi
0x17a0:	mov	rbx, rsi
0x17a3:	sub	rsp, 8
0x17a7:	mov	rdi, qword ptr [rsi]
0x17aa:	call	0x2bc0


0x1458:	sub	rsp, 8
0x145c:	mov	rax, qword ptr [rip + 0x207b6d]
0x1463:	test	rax, rax
0x1466:	je	0x146a


0x1710:	jmp	qword ptr [rip + 0x207872]


0x5986:	mov	rdx, rsi
0x5989:	mov	rsi, r12
0x598c:	mov	qword ptr [rsp + 8], rcx
0x5991:	call	0x15e0


0x599f:	add	rsp, 0x10
0x59a3:	mov	rdx, r12
0x59a6:	mov	rsi, rbx
0x59a9:	mov	rdi, rbp
0x59ac:	pop	rbx
0x59ad:	pop	rbp
0x59ae:	pop	r12
0x59b0:	jmp	0x5800


0x58df:	mov	rdx, rsi
0x58e2:	mov	rsi, r15
0x58e5:	call	0x15e0


0x58f2:	lea	r13, [r14 + rbx]
0x58f6:	lea	r12, [r15 + rbp]
0x58fa:	lea	rcx, [rbp + 1]
0x58fe:	lea	rsi, [rbx + 1]
0x5902:	mov	rdx, r15
0x5905:	mov	rdi, r14
0x5908:	movzx	r9d, byte ptr [r13]
0x590d:	movzx	r8d, byte ptr [r12]
0x5912:	mov	byte ptr [r13], 0
0x5917:	mov	byte ptr [r12], 0
0x591c:	mov	byte ptr [rsp + 0xf], r9b
0x5921:	mov	byte ptr [rsp + 8], r8b
0x5926:	call	0x5800


0x14b0:	jmp	qword ptr [rip + 0x2079a2]


0x1660:	jmp	qword ptr [rip + 0x2078ca]


0x14e0:	jmp	qword ptr [rip + 0x20798a]


0x1580:	jmp	qword ptr [rip + 0x20793a]


0x5660:	mov	rax, qword ptr [rdi + 0x20]
0x5664:	cmp	qword ptr [rdi + 0x28], rax
0x5668:	jne	0x565a


0x565a:	jmp	0x16f0


0x562a:	mov	rdi, rbx
0x562d:	pop	rbx
0x562e:	jmp	0x1650


0x5619:	call	0x1680


0x55e2:	mov	rax, qword ptr [rsp + 0x10]
0x55e7:	xor	esi, esi
0x55e9:	mov	edx, dword ptr [rax + 0x10]
0x55ec:	xor	eax, eax
0x55ee:	call	0x14f0


0x53e1:	cmp	esi, 0x406
0x53e7:	jne	0x5430


0x1630:	jmp	qword ptr [rip + 0x2078e2]


0x1530:	jmp	qword ptr [rip + 0x207962]


0x1550:	jmp	qword ptr [rip + 0x207952]


0x5119:	call	0x5170


0x5102:	movzx	edx, dl
0x5105:	test	rdx, rdx
0x5108:	jne	0x5119


0x50b0:	test	rax, rax
0x50b3:	mov	edx, 0x80
0x50b8:	cmove	rax, rdx
0x50bc:	test	rax, rax
0x50bf:	jns	0x50a2


0x5088:	movabs	rdx, 0x5555555555555553
0x5092:	cmp	rax, rdx
0x5095:	ja	0x50c1


0x5030:	test	rcx, rcx
0x5033:	je	0x5058


0x4ffb:	xor	edx, edx
0x4ffd:	movabs	rax, 0x5555555555555554
0x5007:	div	r9
0x500a:	cmp	rax, rcx
0x500d:	jbe	0x504b


0x4fdb:	sub	rsp, 8
0x4fdf:	call	0x5170


0x4fd1:	movzx	eax, al
0x4fd4:	test	rax, rax
0x4fd7:	jne	0x4fdb


0x4f89:	test	rdi, rdi
0x4f8c:	jne	0x4fa8


0x4f8e:	mov	rsi, rbx
0x4f91:	call	0x16a0


0x4f5b:	sub	rsp, 8
0x4f5f:	call	0x5170


0x4f51:	movzx	eax, al
0x4f54:	test	rax, rax
0x4f57:	jne	0x4f5b


0x1640:	jmp	qword ptr [rip + 0x2078da]


0x4e36:	mov	eax, r10d
0x4e39:	mov	r11d, 1
0x4e3f:	add	r10d, 8
0x4e43:	add	rax, rbp
0x4e46:	mov	rax, qword ptr [rax]
0x4e49:	test	rax, rax
0x4e4c:	mov	qword ptr [r8 + r9*8], rax
0x4e50:	je	0x4e5c


0x4e8c:	mov	rax, rbx
0x4e8f:	add	rbx, 8
0x4e93:	jmp	0x4e46


0x4d68:	mov	r11d, eax
0x4d6b:	add	r11, qword ptr [r10 + 0x10]
0x4d6f:	add	eax, 8
0x4d72:	mov	dword ptr [r10], eax
0x4d75:	mov	rax, qword ptr [r11]
0x4d78:	test	rax, rax
0x4d7b:	mov	qword ptr [r8 + r9*8], rax
0x4d7f:	je	0x4d8b


0x4daa:	mov	r11, qword ptr [r10 + 8]
0x4dae:	lea	rax, [r11 + 8]
0x4db2:	mov	qword ptr [r10 + 8], rax
0x4db6:	jmp	0x4d75


0x4d3b:	jmp	0x4900


0x4a38:	mov	r8, rcx
0x4a3b:	mov	rcx, rdx
0x4a3e:	lea	rdx, [rip + 0x1d0f]
0x4a45:	mov	esi, 1
0x4a4a:	xor	eax, eax
0x4a4c:	call	0x1740


0x4920:	mov	r8, rdx
0x4923:	lea	rdx, [rip + 0x1e1e]
0x492a:	mov	r9, rcx
0x492d:	xor	eax, eax
0x492f:	mov	rcx, rsi
0x4932:	mov	esi, 1
0x4937:	call	0x1740


0x4817:	call	0x14a0


0x47e5:	test	rdx, rdx
0x47e8:	je	0x4817


0x4784:	call	0x14a0


0x471c:	mov	dword ptr [rsp], esi
0x471f:	mov	rcx, rsp
0x4722:	mov	rdx, -1
0x4729:	mov	rsi, rax
0x472c:	mov	qword ptr [rsp + 4], 0
0x4735:	mov	qword ptr [rsp + 0xc], 0x4000000
0x473e:	mov	qword ptr [rsp + 0x14], 0
0x4747:	mov	qword ptr [rsp + 0x1c], 0
0x4750:	mov	qword ptr [rsp + 0x24], 0
0x4759:	mov	qword ptr [rsp + 0x2c], 0
0x4762:	mov	dword ptr [rsp + 0x34], 0
0x476a:	call	0x3f90


0x45f0:	call	0x14a0


0x458f:	mov	dword ptr [rsp], esi
0x4592:	mov	rcx, rsp
0x4595:	mov	rsi, rax
0x4598:	mov	qword ptr [rsp + 4], 0
0x45a1:	mov	qword ptr [rsp + 0xc], 0
0x45aa:	mov	qword ptr [rsp + 0x14], 0
0x45b3:	mov	qword ptr [rsp + 0x1c], 0
0x45bc:	mov	qword ptr [rsp + 0x24], 0
0x45c5:	mov	qword ptr [rsp + 0x2c], 0
0x45ce:	mov	dword ptr [rsp + 0x34], 0
0x45d6:	call	0x3f90


0x4564:	call	0x14a0


0x44fc:	mov	dword ptr [rsp], esi
0x44ff:	mov	rcx, rsp
0x4502:	mov	rdx, -1
0x4509:	mov	rsi, rax
0x450c:	mov	qword ptr [rsp + 4], 0
0x4515:	mov	qword ptr [rsp + 0xc], 0
0x451e:	mov	qword ptr [rsp + 0x14], 0
0x4527:	mov	qword ptr [rsp + 0x1c], 0
0x4530:	mov	qword ptr [rsp + 0x24], 0
0x4539:	mov	qword ptr [rsp + 0x2c], 0
0x4542:	mov	dword ptr [rsp + 0x34], 0
0x454a:	call	0x3f90


0x4411:	mov	rdi, qword ptr [r12 + 8]
0x4416:	lea	rbx, [rip + 0x204d03]
0x441d:	cmp	rdi, rbx
0x4420:	je	0x4439


0x43e6:	sub	eax, 2
0x43e9:	lea	rbx, [r12 + 0x18]
0x43ee:	shl	rax, 4
0x43f2:	lea	rbp, [r12 + rax + 0x28]
0x43f7:	nop	word ptr [rax + rax]
0x4400:	mov	rdi, qword ptr [rbx]
0x4403:	add	rbx, 0x10
0x4407:	call	0x1490


0x4247:	sub	rsp, 8
0x424b:	call	0x14a0


0x4239:	test	rdx, rdx
0x423c:	je	0x4247


0x1540:	jmp	qword ptr [rip + 0x20795a]


0x2c3d:	mov	rcx, qword ptr [rip + 0x20649c]
0x2c44:	lea	rdi, [rip + 0x35d5]
0x2c4b:	mov	edx, 0x37
0x2c50:	mov	esi, 1
0x2c55:	call	0x1730


0x2bc6:	mov	esi, 0x2f
0x2bcb:	mov	rbx, rdi
0x2bce:	call	0x1590


0x15e0:	jmp	qword ptr [rip + 0x20790a]


0x1490:	jmp	qword ptr [rip + 0x2079b2]


0x2a71:	mov	r14, rdi
0x2a74:	mov	rbp, rsi
0x2a77:	mov	rbx, r13
0x2a7a:	movsx	r15d, dl
0x2a7e:	jmp	0x2a8b


0x2b40:	add	rsp, 0x18
0x2b44:	xor	eax, eax
0x2b46:	pop	rbx
0x2b47:	pop	rbp
0x2b48:	pop	r12
0x2b4a:	pop	r13
0x2b4c:	pop	r14
0x2b4e:	pop	r15
0x2b50:	ret	


0x2a2e:	mov	rax, rcx
0x2a31:	ret	


0x2a08:	mov	rax, rdi
0x2a0b:	sub	rcx, 1
0x2a0f:	mul	rsi
0x2a12:	shr	rdx, 3
0x2a16:	lea	rax, [rdx + rdx*4]
0x2a1a:	add	rax, rax
0x2a1d:	sub	rdi, rax
0x2a20:	add	edi, 0x30
0x2a23:	test	rdx, rdx
0x2a26:	mov	byte ptr [rcx], dil
0x2a29:	mov	rdi, rdx
0x2a2c:	jne	0x2a08


0x16c0:	jmp	qword ptr [rip + 0x20789a]


0x1700:	jmp	qword ptr [rip + 0x20787a]


0x28e0:	ret	


0x28c5:	push	rbx
0x28c6:	mov	ebx, esi
0x28c8:	call	0x1630


0x15d0:	jmp	qword ptr [rip + 0x207912]


0x239d:	lea	rsi, [rip + 0x372c]
0x23a4:	xor	edi, edi
0x23a6:	call	0x1530


0x236f:	lea	rsi, [rip + 0x3732]
0x2376:	xor	edi, edi
0x2378:	call	0x1530


0x1ce9:	mov	rax, rsi
0x1cec:	mov	ebp, r8d
0x1cef:	mov	rsi, qword ptr [rdi]
0x1cf2:	mov	r8, rcx
0x1cf5:	mov	rcx, qword ptr [rdx]
0x1cf8:	mov	rdi, qword ptr [rax]
0x1cfb:	mov	rdx, qword ptr [r8]
0x1cfe:	sub	rsi, 1
0x1d02:	sub	rcx, 1
0x1d06:	cmp	byte ptr [rip + 0x2073f6], 0
0x1d0d:	jne	0x1d50


0x1d4b:	pop	rbx
0x1d4c:	pop	rbp
0x1d4d:	pop	r12
0x1d4f:	ret	


0x1ca0:	cmp	byte ptr [rip + 0x20745a], 0
0x1ca7:	je	0x1c99


0x1c32:	cmp	ecx, 3
0x1c35:	jne	0x1c90


0x1bd9:	cmp	qword ptr [rip + 0x2073ff], 0
0x1be1:	push	rbp
0x1be2:	mov	rbp, rsp
0x1be5:	je	0x1bf3


0x1c08:	ret	


0x1bc0:	pop	rbp
0x1bc1:	ret	


0x1ba8:	mov	rax, qword ptr [rip + 0x207429]
0x1baf:	test	rax, rax
0x1bb2:	je	0x1bc0


0x1b70:	pop	rbp
0x1b71:	ret	


0x1b57:	mov	rax, qword ptr [rip + 0x207462]
0x1b5e:	test	rax, rax
0x1b61:	je	0x1b70




0x146a:	add	rsp, 8
0x146e:	ret	


0x1468:	call	rax












0x566a:	cmp	qword ptr [rdi + 0x48], 0
0x566f:	jne	0x565a


0x16f0:	jmp	qword ptr [rip + 0x207882]


0x1650:	jmp	qword ptr [rip + 0x2078d2]


0x1680:	jmp	qword ptr [rip + 0x2078ba]


0x14f0:	jmp	qword ptr [rip + 0x207982]


0x53e9:	mov	rax, qword ptr [rsp + 0x10]
0x53ee:	cmp	dword ptr [rip + 0x203e63], 0
0x53f5:	mov	dword ptr [rsp], 0x18
0x53fc:	mov	r12d, dword ptr [rax + 0x10]
0x5400:	mov	edx, r12d
0x5403:	js	0x5533


0x5430:	cmp	esi, 0xb
0x5433:	je	0x5460








0x510a:	call	0x1600


0x50c1:	sub	rsp, 8
0x50c5:	call	0x5170


0x50a2:	mov	qword ptr [rsi], rax
0x50a5:	mov	rsi, rax
0x50a8:	jmp	0x4f80


0x5097:	mov	rdx, rax
0x509a:	shr	rdx, 1
0x509d:	lea	rax, [rdx + rax + 1]
0x50a2:	mov	qword ptr [rsi], rax
0x50a5:	mov	rsi, rax
0x50a8:	jmp	0x4f80


0x5058:	xor	edx, edx
0x505a:	mov	eax, 0x80
0x505f:	xor	r8d, r8d
0x5062:	div	r9
0x5065:	test	rax, rax
0x5068:	sete	r8b
0x506c:	lea	rcx, [r8 + rax]
0x5070:	jmp	0x5035


0x5035:	mov	rax, rcx
0x5038:	mul	r9
0x503b:	seto	dl
0x503e:	test	rax, rax
0x5041:	movzx	edx, dl
0x5044:	js	0x504b


0x504b:	sub	rsp, 8
0x504f:	call	0x5170


0x500f:	mov	rax, rcx
0x5012:	shr	rax, 1
0x5015:	lea	rcx, [rax + rcx + 1]
0x501a:	mov	qword ptr [rsi], rcx
0x501d:	imul	rcx, r9
0x5021:	mov	rsi, rcx
0x5024:	jmp	0x4f80


0x4fd9:	jmp	0x4f80


0x4fa8:	call	0x1490


0x16a0:	jmp	qword ptr [rip + 0x2078aa]


0x4f59:	jmp	0x4f20




0x4e5c:	test	r11b, r11b
0x4e5f:	jne	0x4e85


0x4e52:	add	r9, 1
0x4e56:	cmp	r9, 0xa
0x4e5a:	jne	0x4e30


0x4e46:	mov	rax, qword ptr [rax]
0x4e49:	test	rax, rax
0x4e4c:	mov	qword ptr [r8 + r9*8], rax
0x4e50:	je	0x4e5c


0x4d8b:	call	0x4900


0x4d81:	add	r9, 1
0x4d85:	cmp	r9, 0xa
0x4d89:	jne	0x4d60


0x4d75:	mov	rax, qword ptr [r11]
0x4d78:	test	rax, rax
0x4d7b:	mov	qword ptr [r8 + r9*8], rax
0x4d7f:	je	0x4d8b


0x4d30:	add	r9, 1
0x4d34:	cmp	qword ptr [r8 + r9*8], 0
0x4d39:	jne	0x4d30


0x1740:	jmp	qword ptr [rip + 0x20785a]


0x14a0:	jmp	qword ptr [rip + 0x2079aa]


0x47ea:	mov	qword ptr [rsp + 0x28], rsi
0x47ef:	mov	qword ptr [rsp + 0x30], rdx
0x47f4:	mov	rcx, rsp
0x47f7:	mov	rdx, r8
0x47fa:	mov	rsi, r9
0x47fd:	call	0x3f90


0x4439:	lea	rbx, [rip + 0x204c50]
0x4440:	cmp	r12, rbx
0x4443:	je	0x4454


0x4422:	call	0x1490


0x423e:	mov	qword ptr [rdi + 0x28], rsi
0x4242:	mov	qword ptr [rdi + 0x30], rdx
0x4246:	ret	




0x1730:	jmp	qword ptr [rip + 0x207862]


0x1590:	jmp	qword ptr [rip + 0x207932]






0x2a8b:	mov	rcx, qword ptr [rbp + 8]
0x2a8f:	cmp	rcx, qword ptr [rbp + 0x10]
0x2a93:	jae	0x2b00








0x1d0f:	call	0x2b80


0x1d50:	call	0x5270


0x1c99:	pop	rbx
0x1c9a:	pop	rbp
0x1c9b:	pop	r12
0x1c9d:	ret	


0x1ca9:	cmp	byte ptr [rip + 0x207452], 0
0x1cb0:	je	0x1c6d


0x1c37:	cmp	byte ptr [rip + 0x2074c2], 0
0x1c3e:	je	0x1c99


0x1c90:	cmp	byte ptr [rip + 0x20746b], 0
0x1c97:	jne	0x1c6d


0x1bf3:	call	0x1b40


0x1be7:	mov	rdi, qword ptr [rip + 0x20741a]
0x1bee:	call	0x1780


0x1bb4:	pop	rbp
0x1bb5:	jmp	rax


0x1b63:	pop	rbp
0x1b64:	jmp	rax


0x5671:	push	r12
0x5673:	push	rbp
0x5674:	mov	r12d, edx
0x5677:	push	rbx
0x5678:	mov	rbp, rsi
0x567b:	mov	rbx, rdi
0x567e:	call	0x1630










0x5533:	xor	esi, esi
0x5535:	xor	eax, eax
0x5537:	call	0x14f0


0x5409:	xor	eax, eax
0x540b:	mov	esi, 0x406
0x5410:	call	0x14f0


0x5460:	mov	edi, ebp
0x5462:	xor	eax, eax
0x5464:	call	0x14f0


0x5435:	jg	0x5490


0x1600:	jmp	qword ptr [rip + 0x2078fa]


0x5046:	test	rdx, rdx
0x5049:	je	0x501a




0x4e61:	call	0x4900


0x4e85:	mov	dword ptr [rsp + 8], r10d
0x4e8a:	jmp	0x4e61


0x4e30:	cmp	r10d, 0x2f
0x4e34:	ja	0x4e8c


0x4d60:	mov	eax, dword ptr [r10]
0x4d63:	cmp	eax, 0x2f
0x4d66:	ja	0x4daa






0x4454:	pop	rbx
0x4455:	mov	dword ptr [rip + 0x204c19], 1
0x445f:	pop	rbp
0x4460:	pop	r12
0x4462:	ret	


0x4445:	mov	rdi, r12
0x4448:	call	0x1490






0x2a95:	lea	rax, [rcx + 1]
0x2a99:	mov	qword ptr [rbp + 8], rax
0x2a9d:	movzx	r12d, byte ptr [rcx]
0x2aa1:	mov	ecx, r12d
0x2aa4:	cmp	rbx, r8
0x2aa7:	mov	rsi, rbx
0x2aaa:	jne	0x2a80


0x2b00:	mov	rdi, rbp
0x2b03:	mov	byte ptr [rsp + 0xf], dl
0x2b07:	mov	qword ptr [rsp], r8
0x2b0b:	call	0x1480


0x1c6d:	mov	rcx, rbx
0x1c70:	mov	rdx, qword ptr [r12]
0x1c74:	mov	rdi, qword ptr [rbp]
0x1c78:	pop	rbx
0x1c79:	pop	rbp
0x1c7a:	pop	r12
0x1c7c:	mov	esi, 1
0x1c81:	jmp	0x1690


0x1cb2:	mov	rdx, qword ptr [rip + 0x207437]
0x1cb9:	mov	rdi, qword ptr [rip + 0x207358]
0x1cc0:	mov	rcx, rbx
0x1cc3:	mov	esi, 1
0x1cc8:	call	0x1690


0x1c40:	cmp	byte ptr [rip + 0x2074bb], 0
0x1c47:	je	0x1c64


0x1780:	jmp	qword ptr [rip + 0x20785a]


0x5437:	cmp	esi, 4
0x543a:	je	0x5510


0x5490:	cmp	esi, 0x407
0x5496:	jg	0x54e0




0x501a:	mov	qword ptr [rsi], rcx
0x501d:	imul	rcx, r9
0x5021:	mov	rsi, rcx
0x5024:	jmp	0x4f80


0x2aac:	mov	rbx, qword ptr [r14]
0x2aaf:	mov	rsi, r14
0x2ab2:	mov	rdi, r13
0x2ab5:	mov	byte ptr [rsp + 0xf], dl
0x2ab9:	mov	byte ptr [rsp], cl
0x2abc:	call	0x5080


0x2a80:	cmp	r12d, r15d
0x2a83:	lea	rbx, [rsi + 1]
0x2a87:	mov	byte ptr [rsi], cl
0x2a89:	je	0x2ae6


0x1480:	jmp	qword ptr [rip + 0x2079ba]


0x1690:	jmp	qword ptr [rip + 0x2078b2]


0x1c64:	cmp	byte ptr [rip + 0x207496], 0
0x1c6b:	jne	0x1cb2


0x1c49:	mov	rcx, rdx
0x1c4c:	mov	rdi, qword ptr [rip + 0x2073c5]
0x1c53:	mov	rdx, qword ptr [rip + 0x207496]
0x1c5a:	mov	esi, 1
0x1c5f:	call	0x1690


0x5510:	mov	eax, dword ptr [rsp]
0x5513:	cmp	eax, 0x2f
0x5516:	ja	0x5604


0x5440:	jg	0x5500


0x5498:	cmp	esi, 0x406
0x549e:	jge	0x5510


0x54e0:	cmp	esi, 0x409
0x54e6:	je	0x5510


0x2ae6:	sub	rbx, r13
0x2ae9:	mov	rax, r14
0x2aec:	mov	qword ptr [r14 + 8], rbx
0x2af0:	add	rsp, 0x18
0x2af4:	pop	rbx
0x2af5:	pop	rbp
0x2af6:	pop	r12
0x2af8:	pop	r13
0x2afa:	pop	r14
0x2afc:	pop	r15
0x2afe:	ret	






0x551c:	add	rax, qword ptr [rsp + 0x10]
0x5521:	mov	edx, dword ptr [rax]
0x5523:	mov	edi, ebp
0x5525:	xor	eax, eax
0x5527:	call	0x14f0


0x5604:	mov	rax, qword ptr [rsp + 8]
0x5609:	jmp	0x5521


0x5446:	cmp	esi, 2
0x5449:	je	0x5510


0x5500:	cmp	esi, 9
0x5503:	je	0x5460


0x54a0:	cmp	esi, 0x401
0x54a6:	je	0x5460


0x54e8:	jl	0x5460


0x5521:	mov	edx, dword ptr [rax]
0x5523:	mov	edi, ebp
0x5525:	xor	eax, eax
0x5527:	call	0x14f0


0x544f:	jg	0x5460


0x5509:	jg	0x5510


0x54a8:	cmp	esi, 0x402
0x54ae:	je	0x5510


0x54ee:	cmp	esi, 0x40a
0x54f4:	jne	0x54b8


0x5451:	cmp	esi, 1
0x5454:	jne	0x54b8


0x550b:	cmp	esi, 8
0x550e:	jne	0x54b8


0x54b0:	cmp	esi, 0x400
0x54b6:	je	0x5510


0x54f6:	jmp	0x5460


0x54b8:	mov	eax, dword ptr [rsp]
0x54bb:	cmp	eax, 0x2f
0x54be:	ja	0x55fa


0x54c4:	add	rax, qword ptr [rsp + 0x10]
0x54c9:	mov	rdx, qword ptr [rax]
0x54cc:	mov	edi, ebp
0x54ce:	xor	eax, eax
0x54d0:	call	0x14f0


0x55fa:	mov	rax, qword ptr [rsp + 8]
0x55ff:	jmp	0x54c9


0x54c9:	mov	rdx, qword ptr [rax]
0x54cc:	mov	edi, ebp
0x54ce:	xor	eax, eax
0x54d0:	call	0x14f0


0x1bf8:	mov	byte ptr [rip + 0x2074e9], 1
0x1bff:	pop	rbp
0x1c00:	ret	


0x1de1:	mov	qword ptr [rbx - 8], r15
0x1de5:	add	r15, 0x18
0x1de9:	cmp	r15, r13
0x1dec:	jne	0x1dd5


0x1dee:	mov	rdx, qword ptr [r14]
0x1df1:	lea	rdi, [rip + 0x446a]
0x1df8:	mov	ecx, 2
0x1dfd:	mov	dword ptr [r12], 0
0x1e05:	mov	dword ptr [r12 + 4], 0
0x1e0e:	mov	dword ptr [r12 + 8], 0
0x1e17:	mov	r13, qword ptr [rip + 0x207292]
0x1e1e:	mov	rsi, rdx
0x1e21:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1dd5:	mov	rdi, r15
0x1dd8:	add	rbx, 8
0x1ddc:	call	0x2a40


0x1e21:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1e23:	seta	al
0x1e26:	sbb	al, 0
0x1e28:	test	al, al
0x1e2a:	jne	0x2245


0x1e30:	mov	rax, qword ptr [rsp + 0x18]
0x1e35:	test	r13, r13
0x1e38:	mov	qword ptr [rax + rbp*8], r13
0x1e3c:	je	0x230a


0x2245:	lea	rsi, [rip + 0x3f6e]
0x224c:	mov	rdi, rdx
0x224f:	call	0x28f0


0x230a:	mov	rdx, qword ptr [r14]
0x230d:	mov	esi, 3
0x2312:	xor	edi, edi
0x2314:	call	0x4700


0x1e42:	mov	esi, 2
0x1e47:	mov	rdi, r13
0x1e4a:	call	0x28c0


0x1e4f:	movsxd	rbx, dword ptr [rsp + 8]
0x1e54:	movsx	edx, byte ptr [rip + 0x2071b5]
0x1e5b:	mov	rsi, r13
0x1e5e:	shl	rbx, 5
0x1e62:	mov	rdi, qword ptr [rsp + rbx + 0xa0]
0x1e6a:	call	0x2a50


0x1e6f:	lea	rdx, [rsp + 0x60]
0x1e74:	mov	qword ptr [rdx + rbp*8], rax
0x1e78:	mov	eax, dword ptr [r13]
0x1e7c:	and	eax, 0x20
0x1e7f:	jne	0x22db


0x1e85:	add	r14, 8
0x1e89:	add	r12, 0xc
0x1e8d:	cmp	rbp, 1
0x1e91:	je	0x1ea0


0x22db:	mov	rdx, qword ptr [r14]
0x22de:	mov	esi, 3
0x22e3:	xor	edi, edi
0x22e5:	call	0x4700


0x1ea0:	mov	dword ptr [rsp + 0x44], eax
0x1ea4:	mov	qword ptr [rsp + 0x20], rdx
0x1ea9:	mov	qword ptr [rsp + 0x38], 0
0x1eb2:	mov	qword ptr [rsp + 0x28], 0
0x1ebb:	mov	qword ptr [rsp + 0x30], 0
0x1ec4:	nop	dword ptr [rax]
0x1ec8:	mov	rbp, qword ptr [rsp + 0x60]
0x1ecd:	mov	rbx, qword ptr [rsp + 0x68]
0x1ed2:	test	rbp, rbp
0x1ed5:	je	0x20a8


0x1e93:	mov	ebp, 1
0x1e98:	jmp	0x1dbd


0x20a8:	test	rbx, rbx
0x20ab:	je	0x2150


0x1edb:	test	rbx, rbx
0x1ede:	mov	byte ptr [rsp + 0x5e], 0
0x1ee3:	mov	byte ptr [rsp + 0x5f], 0
0x1ee8:	je	0x20f0


0x1dbd:	mov	rcx, qword ptr [rsp + 0x20]
0x1dc2:	mov	rax, rbp
0x1dc5:	lea	r13, [r15 + 0x60]
0x1dc9:	shl	rax, 5
0x1dcd:	mov	dword ptr [rsp + 8], ebp
0x1dd1:	lea	rbx, [rcx + rax]
0x1dd5:	mov	rdi, r15
0x1dd8:	add	rbx, 8
0x1ddc:	call	0x2a40


0x2150:	mov	rdi, qword ptr [rsp + 0x70]
0x2155:	call	0x5310


0x20b1:	mov	rdx, qword ptr [rip + 0x206ff0]
0x20b8:	mov	byte ptr [rsp + 0x5e], 0
0x20bd:	mov	byte ptr [rip + 0x20703b], 1
0x20c4:	lea	rsi, [rbx + 0x10]
0x20c8:	lea	rdi, [rbx + 8]
0x20cc:	mov	ecx, 2
0x20d1:	add	qword ptr [rsp + 0x28], 1
0x20d7:	call	0x1c20


0x20f0:	mov	rdx, qword ptr [rip + 0x206fb1]
0x20f7:	mov	byte ptr [rip + 0x207001], 1
0x20fe:	lea	rsi, [rbp + 0x10]
0x2102:	lea	rdi, [rbp + 8]
0x2106:	mov	ecx, 1
0x210b:	add	qword ptr [rsp + 0x30], 1
0x2111:	call	0x1c20


0x1eee:	cmp	byte ptr [rip + 0x20720e], 0
0x1ef5:	mov	r14, qword ptr [rbx + 8]
0x1ef9:	mov	rsi, qword ptr [rbx + 0x10]
0x1efd:	mov	r15, qword ptr [rbp + 8]
0x1f01:	mov	rdi, qword ptr [rbp + 0x10]
0x1f05:	jne	0x2138


0x1f0b:	cmp	r15, r14
0x1f0e:	mov	rdx, r14
0x1f11:	cmovbe	rdx, r15
0x1f15:	sub	rdx, 1
0x1f19:	call	0x15e0


0x2138:	sub	r15, 1
0x213c:	lea	rcx, [r14 - 1]
0x2140:	mov	rdx, rsi
0x2143:	mov	rsi, r15
0x2146:	call	0x5270


0x2116:	jmp	0x1f61


0x1f61:	mov	byte ptr [rsp + 0x5e], 1
0x1f66:	mov	eax, 1
0x1f6b:	xor	ebx, ebx
0x1f6d:	test	al, al
0x1f6f:	mov	rbp, qword ptr [rsp + 0x10]
0x1f74:	mov	r14d, ebx
0x1f77:	jne	0x1f98


0x1f79:	add	rbp, 0xc
0x1f7d:	cmp	rbx, 1
0x1f81:	je	0x1ec8


0x1f98:	movsxd	r12, dword ptr [rbp]
0x1f9c:	mov	rcx, qword ptr [rsp + 0x18]
0x1fa1:	movsxd	r15, dword ptr [rbp + 4]
0x1fa5:	movsx	edx, byte ptr [rip + 0x207064]
0x1fac:	mov	r13, qword ptr [rcx + rbx*8]
0x1fb0:	lea	rcx, [rbx*4]
0x1fb8:	lea	eax, [r12 + 1]
0x1fbd:	mov	dword ptr [rbp + 4], r12d
0x1fc1:	mov	dword ptr [rbp + 8], r15d
0x1fc5:	mov	qword ptr [rsp + 8], rcx
0x1fca:	and	eax, 3
0x1fcd:	mov	rsi, r13
0x1fd0:	mov	dword ptr [rbp], eax
0x1fd3:	cdqe	
0x1fd5:	add	rax, rcx
0x1fd8:	mov	rdi, qword ptr [rsp + rax*8 + 0xa0]
0x1fe0:	call	0x2a50


0x1ec8:	mov	rbp, qword ptr [rsp + 0x60]
0x1ecd:	mov	rbx, qword ptr [rsp + 0x68]
0x1ed2:	test	rbp, rbp
0x1ed5:	je	0x20a8


0x1f87:	movzx	eax, byte ptr [rsp + 0x5f]
0x1f8c:	mov	ebx, 1
0x1f91:	mov	r14d, ebx
0x1f94:	test	al, al
0x1f96:	je	0x1f79


0x1fe5:	mov	rsi, qword ptr [rsp + 0x20]
0x1fea:	test	rax, rax
0x1fed:	mov	rcx, qword ptr [rsp + 8]
0x1ff2:	mov	qword ptr [rsi + rbx*8], rax
0x1ff6:	je	0x2050


0x2050:	add	rcx, r15
0x2053:	mov	rdi, qword ptr [rsp + rcx*8 + 0xa0]
0x205b:	cmp	qword ptr [rdi + 0x10], 0
0x2060:	je	0x2039


0x1ff8:	mov	edx, dword ptr [rip + 0x2070fa]
0x1ffe:	cmp	edx, 2
0x2001:	je	0x2039


0x2039:	test	byte ptr [r13], 0x20
0x203e:	jne	0x225c


0x2062:	mov	eax, dword ptr [rip + 0x207090]
0x2068:	cmp	eax, 2
0x206b:	je	0x2039


0x2003:	cmp	edx, 1
0x2006:	je	0x2011


0x2044:	mov	byte ptr [rsp + rbx + 0x5e], 0
0x2049:	jmp	0x1f79


0x225c:	mov	rax, qword ptr [rsp + 0x48]
0x2261:	movsxd	r15, r14d
0x2264:	mov	esi, 3
0x2269:	xor	edi, edi
0x226b:	mov	rdx, qword ptr [rax + r15*8]
0x226f:	call	0x4700


0x206d:	cmp	eax, 1
0x2070:	je	0x207b


0x2011:	movsxd	rdx, r14d
0x2014:	lea	rcx, [rax + 0x10]
0x2018:	lea	r8d, [rbx + 1]
0x201c:	lea	rdx, [r12 + rdx*4]
0x2020:	mov	rdi, qword ptr [rsp + rdx*8 + 0xa0]
0x2028:	lea	rdx, [rax + 8]
0x202c:	lea	rsi, [rdi + 0x10]
0x2030:	add	rdi, 8
0x2034:	call	0x1cd0


0x2008:	cmp	byte ptr [rip + 0x2070f0], 0
0x200f:	je	0x2039


0x207b:	movsxd	rax, r14d
0x207e:	lea	rsi, [rdi + 0x10]
0x2082:	lea	r8d, [rbx + 1]
0x2086:	lea	rax, [r12 + rax*4]
0x208a:	add	rdi, 8
0x208e:	mov	rdx, qword ptr [rsp + rax*8 + 0xa0]
0x2096:	lea	rcx, [rdx + 0x10]
0x209a:	add	rdx, 8
0x209e:	call	0x1cd0


0x2072:	cmp	byte ptr [rip + 0x207086], 0
0x2079:	je	0x2039


0x20a3:	jmp	0x2039


0x20dc:	mov	byte ptr [rsp + 0x5f], 1
0x20e1:	movzx	eax, byte ptr [rsp + 0x5e]
0x20e6:	jmp	0x1f6b


0x1f6b:	xor	ebx, ebx
0x1f6d:	test	al, al
0x1f6f:	mov	rbp, qword ptr [rsp + 0x10]
0x1f74:	mov	r14d, ebx
0x1f77:	jne	0x1f98


0x5a01:	test	rbp, rbp
0x5a04:	je	0x5a26


0x5a26:	add	rsp, 8
0x5a2a:	pop	rbx
0x5a2b:	pop	rbp
0x5a2c:	pop	r12
0x5a2e:	pop	r13
0x5a30:	pop	r14
0x5a32:	pop	r15
0x5a34:	ret	


0x5a06:	xor	ebx, ebx
0x5a08:	nop	dword ptr [rax + rax]
0x5a10:	mov	rdx, r15
0x5a13:	mov	rsi, r14
0x5a16:	mov	edi, r13d
0x5a19:	call	qword ptr [r12 + rbx*8]


0x1ccd:	jmp	0x1c6d


0x2b10:	cmp	eax, -1
0x2b13:	mov	r12d, eax
0x2b16:	mov	r8, qword ptr [rsp]
0x2b1a:	movzx	edx, byte ptr [rsp + 0xf]
0x2b1f:	jne	0x2b51


0x2b21:	cmp	r13, rbx
0x2b24:	je	0x2b40


0x2b51:	mov	ecx, eax
0x2b53:	jmp	0x2aa4


0x2b26:	test	byte ptr [rbp], 0x20
0x2b2a:	jne	0x2b40


0x2aa4:	cmp	rbx, r8
0x2aa7:	mov	rsi, rbx
0x2aaa:	jne	0x2a80


0x2b2c:	cmp	byte ptr [rbx - 1], dl
0x2b2f:	je	0x2ae6


0x2b31:	mov	r12d, r15d
0x2b34:	mov	ecx, edx
0x2b36:	jmp	0x2aa4


0x510f:	test	rax, rax
0x5112:	je	0x5119


0x5114:	add	rsp, 8
0x5118:	ret	


0x2bd3:	test	rax, rax
0x2bd6:	je	0x2c2d


0x2c2d:	mov	qword ptr [rip + 0x2064e4], rbx
0x2c34:	mov	qword ptr [rip + 0x20648d], rbx
0x2c3b:	pop	rbx
0x2c3c:	ret	


0x2bd8:	lea	r8, [rax + 1]
0x2bdc:	mov	rdx, r8
0x2bdf:	sub	rdx, rbx
0x2be2:	cmp	rdx, 6
0x2be6:	jle	0x2c2d


0x2be8:	lea	rsi, [rax - 6]
0x2bec:	lea	rdi, [rip + 0x3665]
0x2bf3:	mov	ecx, 7
0x2bf8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2bf8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2bfa:	seta	dl
0x2bfd:	sbb	dl, 0
0x2c00:	test	dl, dl
0x2c02:	jne	0x2c2d


0x2c04:	lea	rdi, [rip + 0x3655]
0x2c0b:	mov	ecx, 3
0x2c10:	mov	rsi, r8
0x2c13:	mov	rbx, r8
0x2c16:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2c16:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2c18:	seta	dl
0x2c1b:	sbb	dl, 0
0x2c1e:	test	dl, dl
0x2c20:	jne	0x2c2d


0x2c22:	lea	rbx, [rax + 4]
0x2c26:	mov	qword ptr [rip + 0x206473], rbx
0x2c2d:	mov	qword ptr [rip + 0x2064e4], rbx
0x2c34:	mov	qword ptr [rip + 0x20648d], rbx
0x2c3b:	pop	rbx
0x2c3c:	ret	


0x2c5a:	call	0x14a0


0x444d:	mov	qword ptr [rip + 0x204c2c], rbx
0x4454:	pop	rbx
0x4455:	mov	dword ptr [rip + 0x204c19], 1
0x445f:	pop	rbp
0x4460:	pop	r12
0x4462:	ret	


0x4427:	mov	qword ptr [rip + 0x204c5e], 0x100
0x4432:	mov	qword ptr [rip + 0x204c5f], rbx
0x4439:	lea	rbx, [rip + 0x204c50]
0x4440:	cmp	r12, rbx
0x4443:	je	0x4454


0x4fad:	xor	eax, eax
0x4faf:	pop	rbx
0x4fb0:	ret	


0x440c:	cmp	rbx, rbp
0x440f:	jne	0x4400


0x4400:	mov	rdi, qword ptr [rbx]
0x4403:	add	rbx, 0x10
0x4407:	call	0x1490


0x493c:	lea	rsi, [rip + 0x1e18]
0x4943:	xor	edi, edi
0x4945:	mov	edx, 5
0x494a:	call	0x1530


0x4a51:	jmp	0x493c


0x4f96:	test	rax, rax
0x4f99:	jne	0x4fa0


0x4f9b:	test	rbx, rbx
0x4f9e:	jne	0x4fb1


0x4fa0:	pop	rbx
0x4fa1:	ret	


0x4fb1:	call	0x5170


0x54d5:	mov	ebx, eax
0x54d7:	jmp	0x5470


0x5470:	mov	rcx, qword ptr [rsp + 0x18]
0x5475:	xor	rcx, qword ptr fs:[0x28]
0x547e:	mov	eax, ebx
0x5480:	jne	0x55dd


0x5486:	add	rsp, 0x50
0x548a:	pop	rbx
0x548b:	pop	rbp
0x548c:	pop	r12
0x548e:	ret	


0x55dd:	call	0x1560


0x1560:	jmp	qword ptr [rip + 0x20794a]




0x5469:	mov	ebx, eax
0x546b:	nop	dword ptr [rax + rax]
0x5470:	mov	rcx, qword ptr [rsp + 0x18]
0x5475:	xor	rcx, qword ptr fs:[0x28]
0x547e:	mov	eax, ebx
0x5480:	jne	0x55dd


0x552c:	mov	ebx, eax
0x552e:	jmp	0x5470


0x5415:	test	eax, eax
0x5417:	mov	ebx, eax
0x5419:	js	0x55a8


0x55a8:	call	0x14b0


0x541f:	mov	dword ptr [rip + 0x203e2f], 1
0x5429:	jmp	0x5470


0x553c:	test	eax, eax
0x553e:	mov	ebx, eax
0x5540:	js	0x5470


0x5546:	cmp	dword ptr [rip + 0x203d0b], -1
0x554d:	jne	0x5470


0x5553:	xor	eax, eax
0x5555:	mov	esi, 1
0x555a:	mov	edi, ebx
0x555c:	call	0x14f0


0x5561:	test	eax, eax
0x5563:	js	0x5581


0x5581:	call	0x14b0


0x5565:	or	eax, 1
0x5568:	mov	esi, 2
0x556d:	mov	edi, ebx
0x556f:	mov	edx, eax
0x5571:	xor	eax, eax
0x5573:	call	0x14f0


0x5578:	cmp	eax, -1
0x557b:	jne	0x5470


0x55f3:	mov	ebx, eax
0x55f5:	jmp	0x5470


0x561e:	test	eax, eax
0x5620:	je	0x562a


0x5622:	test	dword ptr [rbx], 0x100
0x5628:	jne	0x5638


0x5638:	mov	rdi, rbx
0x563b:	mov	edx, 1
0x5640:	xor	esi, esi
0x5642:	call	0x5650


0x17af:	lea	rsi, [rip + 0x4a43]
0x17b6:	mov	edi, 6
0x17bb:	call	0x16c0


0x28fc:	test	rax, rax
0x28ff:	mov	rbx, rax
0x2902:	je	0x2911


0x2911:	mov	rax, rbx
0x2914:	pop	rbx
0x2915:	pop	rbp
0x2916:	pop	r12
0x2918:	ret	


0x2904:	mov	rdi, rax
0x2907:	call	0x1630


0x2254:	mov	r13, rax
0x2257:	jmp	0x1e30


0x17c0:	lea	rsi, [rip + 0x495d]
0x17c7:	lea	rdi, [rip + 0x492d]
0x17ce:	call	0x1520


0x1520:	jmp	qword ptr [rip + 0x20796a]




0x299b:	mov	rdx, rax
0x299e:	mov	eax, 1
0x29a3:	test	rdx, rdx
0x29a6:	je	0x29c5


0x29c5:	add	rsp, 8
0x29c9:	ret	


0x29a8:	lea	rdi, [rip + 0x3863]
0x29af:	mov	ecx, 2
0x29b4:	mov	rsi, rdx
0x29b7:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x29b7:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x29b9:	seta	cl
0x29bc:	sbb	cl, 0
0x29bf:	xor	eax, eax
0x29c1:	test	cl, cl
0x29c3:	jne	0x29d0


0x29d0:	lea	rdi, [rip + 0x383d]
0x29d7:	mov	ecx, 6
0x29dc:	mov	rsi, rdx
0x29df:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x29df:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x29e1:	seta	al
0x29e4:	sbb	al, 0
0x29e6:	test	al, al
0x29e8:	setne	al
0x29eb:	add	rsp, 8
0x29ef:	ret	


0x1f1e:	test	eax, eax
0x1f20:	jne	0x2120


0x1f26:	cmp	r15, r14
0x1f29:	jb	0x20f0


0x2120:	mov	rdx, qword ptr [rip + 0x206f81]
0x2127:	test	eax, eax
0x2129:	mov	byte ptr [rip + 0x206fcf], 1
0x2130:	jg	0x20c4


0x1f2f:	setne	al
0x1f32:	movzx	eax, al
0x1f35:	test	eax, eax
0x1f37:	mov	rdx, qword ptr [rip + 0x20716a]
0x1f3e:	jne	0x2127


0x2132:	jmp	0x20fe


0x20c4:	lea	rsi, [rbx + 0x10]
0x20c8:	lea	rdi, [rbx + 8]
0x20cc:	mov	ecx, 2
0x20d1:	add	qword ptr [rsp + 0x28], 1
0x20d7:	call	0x1c20


0x1f44:	lea	rsi, [rbx + 0x10]
0x1f48:	lea	rdi, [rbx + 8]
0x1f4c:	mov	ecx, 3
0x1f51:	add	qword ptr [rsp + 0x38], 1
0x1f57:	call	0x1c20


0x2127:	test	eax, eax
0x2129:	mov	byte ptr [rip + 0x206fcf], 1
0x2130:	jg	0x20c4


0x20fe:	lea	rsi, [rbp + 0x10]
0x2102:	lea	rdi, [rbp + 8]
0x2106:	mov	ecx, 1
0x210b:	add	qword ptr [rsp + 0x30], 1
0x2111:	call	0x1c20


0x1f5c:	mov	byte ptr [rsp + 0x5f], 1
0x1f61:	mov	byte ptr [rsp + 0x5e], 1
0x1f66:	mov	eax, 1
0x1f6b:	xor	ebx, ebx
0x1f6d:	test	al, al
0x1f6f:	mov	rbp, qword ptr [rsp + 0x10]
0x1f74:	mov	r14d, ebx
0x1f77:	jne	0x1f98


0x58ea:	test	eax, eax
0x58ec:	mov	dword ptr [rsp + 8], eax
0x58f0:	je	0x5958


0x5958:	call	0x14b0


0x5996:	test	eax, eax
0x5998:	mov	rcx, qword ptr [rsp + 8]
0x599d:	je	0x59b8


0x59b8:	call	0x14b0


0x2b9e:	test	eax, eax
0x2ba0:	jne	0x2bad


0x2ba2:	cmp	rbp, rbx
0x2ba5:	jb	0x2bb8


0x2bad:	add	rsp, 8
0x2bb1:	pop	rbx
0x2bb2:	pop	rbp
0x2bb3:	ret	


0x2bb8:	mov	eax, 0xffffffff
0x2bbd:	jmp	0x2bad


0x2ba7:	seta	al
0x2baa:	movzx	eax, al
0x2bad:	add	rsp, 8
0x2bb1:	pop	rbx
0x2bb2:	pop	rbp
0x2bb3:	ret	


0x1d14:	test	eax, eax
0x1d16:	jle	0x1d4b


0x1d18:	lea	rsi, [rip + 0x3d69]
0x1d1f:	xor	edi, edi
0x1d21:	mov	edx, 5
0x1d26:	call	0x1530


0x2dc1:	cmp	r15d, 0xa
0x2dc5:	mov	qword ptr [rsp + 0x58], rax
0x2dca:	ja	0x3f7f


0x2dd0:	lea	rcx, [rip + 0x3509]
0x2dd7:	mov	edx, r15d
0x2dda:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2dde:	add	rax, rcx
0x2de1:	jmp	rax


0x3f7f:	call	0x14a0


0x4f29:	test	rax, rax
0x4f2c:	jne	0x4f33


0x4f2e:	test	rbx, rbx
0x4f31:	jne	0x4f35


0x4f33:	pop	rbx
0x4f34:	ret	


0x4f35:	call	0x5170


0x50d9:	mov	rdx, rbx
0x50dc:	xor	esi, esi
0x50de:	mov	rdi, rax
0x50e1:	pop	rbx
0x50e2:	jmp	0x15b0


0x15b0:	jmp	qword ptr [rip + 0x207922]




0x5134:	add	rsp, 8
0x5138:	mov	rdx, rbx
0x513b:	mov	rsi, rbp
0x513e:	pop	rbx
0x513f:	pop	rbp
0x5140:	mov	rdi, rax
0x5143:	jmp	0x1620


0x1620:	jmp	qword ptr [rip + 0x2078ea]




0x5159:	mov	rdi, rbx
0x515c:	lea	rsi, [rax + 1]
0x5160:	pop	rbx
0x5161:	jmp	0x5120


0x1d2b:	xor	edi, edi
0x1d2d:	cmp	dword ptr [rip + 0x2073c4], 1
0x1d34:	mov	rdx, rax
0x1d37:	mov	ecx, ebp
0x1d39:	sete	dil
0x1d3d:	xor	esi, esi
0x1d3f:	xor	eax, eax
0x1d41:	call	0x16e0


0x16e0:	jmp	qword ptr [rip + 0x20788a]




0x494f:	lea	rdx, [rip + 0x212a]
0x4956:	mov	rcx, rax
0x4959:	mov	r8d, 0x7e3
0x495f:	mov	esi, 1
0x4964:	mov	rdi, rbp
0x4967:	xor	eax, eax
0x4969:	call	0x1740


0x496e:	lea	rsi, [rip + 0x1e73]
0x4975:	xor	edi, edi
0x4977:	mov	edx, 5
0x497c:	call	0x1530


0x4981:	mov	rsi, rbp
0x4984:	mov	rdi, rax
0x4987:	call	0x15f0


0x15f0:	jmp	qword ptr [rip + 0x207902]




0x237d:	mov	rdi, qword ptr [rip + 0x206d5c]
0x2384:	mov	rdx, rax
0x2387:	mov	rcx, rbx
0x238a:	mov	esi, 1
0x238f:	xor	eax, eax
0x2391:	call	0x1740


0x2396:	mov	edi, ebp
0x2398:	call	0x1720


0x1720:	jmp	qword ptr [rip + 0x20786a]




0x23ab:	mov	rdx, rbx
0x23ae:	mov	rsi, rax
0x23b1:	mov	edi, 1
0x23b6:	xor	eax, eax
0x23b8:	call	0x16d0


0x16d0:	jmp	qword ptr [rip + 0x207892]




0x4eb4:	lea	rdx, [rip + 0x18fc]
0x4ebb:	mov	rsi, rax
0x4ebe:	mov	edi, 1
0x4ec3:	xor	eax, eax
0x4ec5:	call	0x16d0


0x5187:	mov	edi, dword ptr [rip + 0x203e9b]
0x518d:	lea	rdx, [rip + 0x107b]
0x5194:	mov	rcx, rax
0x5197:	xor	esi, esi
0x5199:	xor	eax, eax
0x519b:	call	0x16e0


0x51da:	mov	esi, r14d
0x51dd:	mov	rdx, rax
0x51e0:	xor	edi, edi
0x51e2:	xor	eax, eax
0x51e4:	call	0x16e0


0x290c:	cmp	eax, 2
0x290f:	jbe	0x2920


0x2920:	mov	edi, eax
0x2922:	call	0x48f0


0x5683:	mov	edx, r12d
0x5686:	mov	rsi, rbp
0x5689:	mov	edi, eax
0x568b:	call	0x15a0


0x15a0:	jmp	qword ptr [rip + 0x20792a]




0x28cd:	mov	ecx, ebx
0x28cf:	xor	edx, edx
0x28d1:	xor	esi, esi
0x28d3:	pop	rbx
0x28d4:	mov	edi, eax
0x28d6:	jmp	0x15d0


0x531c:	test	eax, eax
0x531e:	mov	rdi, rbx
0x5321:	js	0x5377


0x5377:	pop	rbx
0x5378:	pop	rbp
0x5379:	pop	r12
0x537b:	jmp	0x1510


0x5323:	call	0x1680


0x1510:	jmp	qword ptr [rip + 0x207972]




0x5328:	test	eax, eax
0x532a:	jne	0x5358


0x532c:	mov	rdi, rbx
0x532f:	call	0x5610


0x5358:	mov	rdi, rbx
0x535b:	call	0x1630


0x5360:	xor	esi, esi
0x5362:	mov	edx, 1
0x5367:	mov	edi, eax
0x5369:	call	0x15a0


0x56e7:	cmp	rax, -3
0x56eb:	mov	rbp, rax
0x56ee:	jbe	0x5710


0x5710:	mov	rdx, qword ptr [rsp + 8]
0x5715:	xor	rdx, qword ptr fs:[0x28]
0x571e:	mov	rax, rbp
0x5721:	jne	0x572e


0x56f0:	test	r12, r12
0x56f3:	je	0x5710


0x5723:	add	rsp, 0x18
0x5727:	pop	rbx
0x5728:	pop	rbp
0x5729:	pop	r12
0x572b:	pop	r13
0x572d:	ret	


0x572e:	call	0x1560


0x56f5:	xor	edi, edi
0x56f7:	call	0x2990


0x56fc:	test	al, al
0x56fe:	jne	0x5710


0x5700:	movzx	eax, byte ptr [r13]
0x5705:	mov	ebp, 1
0x570a:	mov	dword ptr [rbx], eax
0x570c:	nop	dword ptr [rax]
0x5710:	mov	rdx, qword ptr [rsp + 8]
0x5715:	xor	rdx, qword ptr fs:[0x28]
0x571e:	mov	rax, rbp
0x5721:	jne	0x572e


0x574c:	mov	ebx, dword ptr [rbp]
0x574f:	mov	rdi, rbp
0x5752:	mov	r12, rax
0x5755:	call	0x5310


0x57ce:	test	rax, rax
0x57d1:	je	0x57f0


0x57f0:	lea	rax, [rip + 0x1341]
0x57f7:	add	rsp, 8
0x57fb:	ret	


0x57d3:	cmp	byte ptr [rax], 0
0x57d6:	lea	rdx, [rip + 0x135b]
0x57dd:	cmove	rax, rdx
0x57e1:	add	rsp, 8
0x57e5:	ret	


0x2c70:	movzx	edx, byte ptr [rax]
0x2c73:	and	edx, 0xffffffdf
0x2c76:	cmp	dl, 0x55
0x2c79:	je	0x2cf0


0x2cf0:	movzx	edx, byte ptr [rax + 1]
0x2cf4:	and	edx, 0xffffffdf
0x2cf7:	cmp	dl, 0x54
0x2cfa:	jne	0x2c80


0x2c7b:	cmp	dl, 0x47
0x2c7e:	je	0x2ca0


0x2cfc:	movzx	edx, byte ptr [rax + 2]
0x2d00:	and	edx, 0xffffffdf
0x2d03:	cmp	dl, 0x46
0x2d06:	jne	0x2c80


0x2c80:	lea	rax, [rip + 0x35ec]
0x2c87:	lea	rdx, [rip + 0x35e7]
0x2c8e:	cmp	ebx, 9
0x2c91:	cmovne	rax, rdx
0x2c95:	add	rsp, 8
0x2c99:	pop	rbx
0x2c9a:	pop	rbp
0x2c9b:	ret	


0x2ca0:	movzx	edx, byte ptr [rax + 1]
0x2ca4:	and	edx, 0xffffffdf
0x2ca7:	cmp	dl, 0x42
0x2caa:	jne	0x2c80


0x2d0c:	cmp	byte ptr [rax + 3], 0x2d
0x2d10:	jne	0x2c80


0x2cac:	cmp	byte ptr [rax + 2], 0x31
0x2cb0:	jne	0x2c80


0x2d16:	cmp	byte ptr [rax + 4], 0x38
0x2d1a:	jne	0x2c80


0x2cb2:	cmp	byte ptr [rax + 3], 0x38
0x2cb6:	jne	0x2c80


0x2d20:	cmp	byte ptr [rax + 5], 0
0x2d24:	jne	0x2c80


0x2cb8:	cmp	byte ptr [rax + 4], 0x30
0x2cbc:	jne	0x2c80


0x2d2a:	cmp	byte ptr [rbp], 0x60
0x2d2e:	lea	rax, [rip + 0x352f]
0x2d35:	lea	rdx, [rip + 0x352c]
0x2d3c:	cmovne	rax, rdx
0x2d40:	add	rsp, 8
0x2d44:	pop	rbx
0x2d45:	pop	rbp
0x2d46:	ret	


0x2cbe:	cmp	byte ptr [rax + 5], 0x33
0x2cc2:	jne	0x2c80


0x2cc4:	cmp	byte ptr [rax + 6], 0x30
0x2cc8:	jne	0x2c80


0x2cca:	cmp	byte ptr [rax + 7], 0
0x2cce:	jne	0x2c80


0x2cd0:	cmp	byte ptr [rbp], 0x60
0x2cd4:	lea	rax, [rip + 0x3591]
0x2cdb:	lea	rdx, [rip + 0x358e]
0x2ce2:	cmovne	rax, rdx
0x2ce6:	add	rsp, 8
0x2cea:	pop	rbx
0x2ceb:	pop	rbp
0x2cec:	ret	


0x59bd:	mov	dword ptr [rax], 0
0x59c3:	add	rsp, 0x10
0x59c7:	xor	eax, eax
0x59c9:	pop	rbx
0x59ca:	pop	rbp
0x59cb:	pop	r12
0x59cd:	ret	


0x52d9:	mov	r13d, eax
0x52dc:	call	0x14b0


0x52e1:	mov	edi, dword ptr [rax]
0x52e3:	test	edi, edi
0x52e5:	je	0x52fa


0x52fa:	pop	rbx
0x52fb:	mov	eax, r13d
0x52fe:	pop	rbp
0x52ff:	pop	r12
0x5301:	pop	r13
0x5303:	pop	r14
0x5305:	ret	


0x52e7:	lea	rdx, [rbx - 1]
0x52eb:	lea	r8, [r14 - 1]
0x52ef:	mov	rcx, r12
0x52f2:	mov	rsi, rbp
0x52f5:	call	0x51b0


0x595d:	mov	edx, dword ptr [rsp + 8]
0x5961:	mov	dword ptr [rax], 0
0x5967:	jmp	0x5941


0x5941:	add	rsp, 0x18
0x5945:	mov	eax, edx
0x5947:	pop	rbx
0x5948:	pop	rbp
0x5949:	pop	r12
0x594b:	pop	r13
0x594d:	pop	r14
0x594f:	pop	r15
0x5951:	ret	


0x5289:	mov	r14d, eax
0x528c:	call	0x14b0


0x5291:	mov	edi, dword ptr [rax]
0x5293:	test	edi, edi
0x5295:	je	0x52a8


0x52a8:	pop	rbx
0x52a9:	mov	eax, r14d
0x52ac:	pop	rbp
0x52ad:	pop	r12
0x52af:	pop	r13
0x52b1:	pop	r14
0x52b3:	ret	


0x5297:	mov	r8, r13
0x529a:	mov	rcx, r12
0x529d:	mov	rdx, rbp
0x52a0:	mov	rsi, rbx
0x52a3:	call	0x51b0


0x214b:	jmp	0x1f35


0x1f35:	test	eax, eax
0x1f37:	mov	rdx, qword ptr [rip + 0x20716a]
0x1f3e:	jne	0x2127


0x1d55:	jmp	0x1d14


0x5586:	mov	r12d, dword ptr [rax]
0x5589:	mov	rbp, rax
0x558c:	mov	edi, ebx
0x558e:	call	0x15c0


0x15c0:	jmp	qword ptr [rip + 0x20791a]




0x55ad:	cmp	dword ptr [rax], 0x16
0x55b0:	jne	0x541f


0x55b6:	xor	esi, esi
0x55b8:	xor	eax, eax
0x55ba:	mov	edx, r12d
0x55bd:	mov	edi, ebp
0x55bf:	call	0x14f0


0x55c4:	test	eax, eax
0x55c6:	mov	ebx, eax
0x55c8:	js	0x5470


0x55ce:	mov	dword ptr [rip + 0x203c80], 0xffffffff
0x55d8:	jmp	0x5553


0x3fb1:	mov	r13, rax
0x3fb4:	mov	eax, dword ptr [rax]
0x3fb6:	test	r15d, r15d
0x3fb9:	mov	rbx, qword ptr [rip + 0x2050c0]
0x3fc0:	mov	dword ptr [rsp + 0x18], eax
0x3fc4:	js	0x4131


0x4131:	call	0x14a0


0x3fca:	cmp	dword ptr [rip + 0x2050a7], r15d
0x3fd1:	jg	0x4035


0x3fd3:	cmp	r15d, 0x7fffffff
0x3fda:	je	0x4136


0x4035:	mov	eax, dword ptr [rbp + 4]
0x4038:	shl	r15, 4
0x403c:	sub	rsp, 8
0x4040:	add	rbx, r15
0x4043:	lea	r15, [rbp + 8]
0x4047:	mov	r8d, dword ptr [rbp]
0x404b:	mov	r11, qword ptr [rbx]
0x404e:	mov	r12, qword ptr [rbx + 8]
0x4052:	mov	rcx, r14
0x4055:	or	eax, 1
0x4058:	mov	dword ptr [rsp + 0x24], eax
0x405c:	push	qword ptr [rbp + 0x30]
0x405f:	mov	r9d, eax
0x4062:	push	qword ptr [rbp + 0x28]
0x4065:	push	r15
0x4067:	mov	rsi, r11
0x406a:	mov	rdx, qword ptr [rsp + 0x28]
0x406f:	mov	rdi, r12
0x4072:	mov	qword ptr [rsp + 0x30], r11
0x4077:	call	0x2d50


0x4136:	call	0x5170


0x3fe0:	lea	r12d, [r15 + 1]
0x3fe4:	lea	rax, [rip + 0x2050a5]
0x3feb:	movsxd	rsi, r12d
0x3fee:	shl	rsi, 4
0x3ff2:	cmp	rbx, rax
0x3ff5:	je	0x4110


0x4110:	xor	edi, edi
0x4112:	call	0x4f80


0x3ffb:	mov	rdi, rbx
0x3ffe:	call	0x4f80


0x4003:	mov	rbx, rax
0x4006:	mov	qword ptr [rip + 0x205073], rax
0x400d:	movsxd	rdi, dword ptr [rip + 0x205064]
0x4014:	mov	edx, r12d
0x4017:	xor	esi, esi
0x4019:	sub	edx, edi
0x401b:	shl	rdi, 4
0x401f:	movsxd	rdx, edx
0x4022:	add	rdi, rbx
0x4025:	shl	rdx, 4
0x4029:	call	0x15b0


0x4117:	movdqa	xmm0, xmmword ptr [rip + 0x204f71]
0x411f:	mov	rbx, rax
0x4122:	mov	qword ptr [rip + 0x204f57], rax
0x4129:	movups	xmmword ptr [rax], xmm0
0x412c:	jmp	0x400d


0x400d:	movsxd	rdi, dword ptr [rip + 0x205064]
0x4014:	mov	edx, r12d
0x4017:	xor	esi, esi
0x4019:	sub	edx, edi
0x401b:	shl	rdi, 4
0x401f:	movsxd	rdx, edx
0x4022:	add	rdi, rbx
0x4025:	shl	rdx, 4
0x4029:	call	0x15b0


0x414c:	mov	r12d, dword ptr [rax]
0x414f:	mov	rbp, rax
0x4152:	lea	rax, [rip + 0x2050c7]
0x4159:	test	rbx, rbx
0x415c:	mov	esi, 0x38
0x4161:	cmove	rbx, rax
0x4165:	mov	rdi, rbx
0x4168:	call	0x5120


0x4282:	mov	r12d, dword ptr [rax]
0x4285:	mov	rbp, rax
0x4288:	lea	rax, [rbx + 8]
0x428c:	sub	rsp, 8
0x4290:	mov	r9d, dword ptr [rbx + 4]
0x4294:	push	qword ptr [rbx + 0x30]
0x4297:	mov	r8d, dword ptr [rbx]
0x429a:	push	qword ptr [rbx + 0x28]
0x429d:	mov	rdx, r15
0x42a0:	push	rax
0x42a1:	mov	rcx, qword ptr [rsp + 0x28]
0x42a6:	mov	rsi, r14
0x42a9:	mov	rdi, r13
0x42ac:	call	0x2d50


0x42ff:	test	r12, r12
0x4302:	mov	r13, rax
0x4305:	mov	eax, dword ptr [rax]
0x4307:	sete	bpl
0x430b:	or	ebp, dword ptr [rbx + 4]
0x430e:	lea	r10, [rbx + 8]
0x4312:	sub	rsp, 8
0x4316:	mov	r8d, dword ptr [rbx]
0x4319:	mov	rcx, r15
0x431c:	mov	dword ptr [rsp + 0x14], eax
0x4320:	push	qword ptr [rbx + 0x30]
0x4323:	mov	rdx, r14
0x4326:	push	qword ptr [rbx + 0x28]
0x4329:	push	r10
0x432b:	xor	esi, esi
0x432d:	mov	r9d, ebp
0x4330:	xor	edi, edi
0x4332:	mov	qword ptr [rsp + 0x40], r10
0x4337:	call	0x2d50


0x581f:	mov	r15, rax
0x5822:	jmp	0x5853


0x5853:	mov	dword ptr [r15], 0
0x585a:	mov	rsi, rbp
0x585d:	mov	rdi, r12
0x5860:	call	0x1670


0x1670:	jmp	qword ptr [rip + 0x2078c2]




0x5865:	test	eax, eax
0x5867:	je	0x5828


0x5828:	mov	rdi, r12
0x582b:	call	0x1550


0x5869:	add	rsp, 8
0x586d:	pop	rbx
0x586e:	pop	rbp
0x586f:	pop	r12
0x5871:	pop	r13
0x5873:	pop	r14
0x5875:	pop	r15
0x5877:	ret	


0x5830:	mov	rdi, rbp
0x5833:	lea	rbx, [rax + 1]
0x5837:	call	0x1550


0x583c:	add	rax, 1
0x5840:	add	r12, rbx
0x5843:	add	rbp, rax
0x5846:	sub	r14, rax
0x5849:	sub	r13, rbx
0x584c:	je	0x5880


0x5880:	xor	eax, eax
0x5882:	test	r14, r14
0x5885:	setne	al
0x5888:	add	rsp, 8
0x588c:	pop	rbx
0x588d:	neg	eax
0x588f:	pop	rbp
0x5890:	pop	r12
0x5892:	pop	r13
0x5894:	pop	r14
0x5896:	pop	r15
0x5898:	ret	


0x584e:	test	r14, r14
0x5851:	je	0x58a0


0x58a0:	add	rsp, 8
0x58a4:	mov	eax, 1
0x58a9:	pop	rbx
0x58aa:	pop	rbp
0x58ab:	pop	r12
0x58ad:	pop	r13
0x58af:	pop	r14
0x58b1:	pop	r15
0x58b3:	ret	


0x416d:	mov	dword ptr [rbp], r12d
0x4171:	pop	rbx
0x4172:	pop	rbp
0x4173:	pop	r12
0x4175:	ret	


0x402e:	mov	dword ptr [rip + 0x205043], r12d
0x4035:	mov	eax, dword ptr [rbp + 4]
0x4038:	shl	r15, 4
0x403c:	sub	rsp, 8
0x4040:	add	rbx, r15
0x4043:	lea	r15, [rbp + 8]
0x4047:	mov	r8d, dword ptr [rbp]
0x404b:	mov	r11, qword ptr [rbx]
0x404e:	mov	r12, qword ptr [rbx + 8]
0x4052:	mov	rcx, r14
0x4055:	or	eax, 1
0x4058:	mov	dword ptr [rsp + 0x24], eax
0x405c:	push	qword ptr [rbp + 0x30]
0x405f:	mov	r9d, eax
0x4062:	push	qword ptr [rbp + 0x28]
0x4065:	push	r15
0x4067:	mov	rsi, r11
0x406a:	mov	rdx, qword ptr [rsp + 0x28]
0x406f:	mov	rdi, r12
0x4072:	mov	qword ptr [rsp + 0x30], r11
0x4077:	call	0x2d50


0x5593:	mov	ebx, 0xffffffff
0x5598:	mov	dword ptr [rbp], r12d
0x559c:	jmp	0x5470


0x536e:	cmp	rax, -1
0x5372:	jne	0x532c


0x5374:	mov	rdi, rbx
0x5377:	pop	rbx
0x5378:	pop	rbp
0x5379:	pop	r12
0x537b:	jmp	0x1510


0x5690:	cmp	rax, -1
0x5694:	je	0x56a2


0x56a2:	pop	rbx
0x56a3:	pop	rbp
0x56a4:	pop	r12
0x56a6:	ret	


0x5696:	and	dword ptr [rbx], 0xffffffef
0x5699:	mov	qword ptr [rbx + 0x90], rax
0x56a0:	xor	eax, eax
0x56a2:	pop	rbx
0x56a3:	pop	rbp
0x56a4:	pop	r12
0x56a6:	ret	


0x2927:	test	eax, eax
0x2929:	mov	r12d, eax
0x292c:	js	0x2968


0x2968:	call	0x14b0


0x292e:	mov	rdi, rbx
0x2931:	call	0x5310


0x296d:	mov	r12d, dword ptr [rax]
0x2970:	mov	rbp, rax
0x2973:	mov	rdi, rbx
0x2976:	call	0x5310


0x4eca:	lea	rsi, [rip + 0x18fc]
0x4ed1:	mov	edx, 5
0x4ed6:	xor	edi, edi
0x4ed8:	call	0x1530


0x4edd:	lea	rcx, [rip + 0x10b4]
0x4ee4:	lea	rdx, [rip + 0x120c]
0x4eeb:	mov	rsi, rax
0x4eee:	mov	edi, 1
0x4ef3:	xor	eax, eax
0x4ef5:	call	0x16d0


0x4efa:	mov	rbx, qword ptr [rip + 0x2041a7]
0x4f01:	lea	rsi, [rip + 0x1af8]
0x4f08:	xor	edi, edi
0x4f0a:	mov	edx, 5
0x4f0f:	call	0x1530


0x4f14:	mov	rsi, rbx
0x4f17:	mov	rdi, rax
0x4f1a:	pop	rbx
0x4f1b:	jmp	0x15f0


0x23bd:	mov	rbx, qword ptr [rip + 0x206ce4]
0x23c4:	lea	rsi, [rip + 0x372d]
0x23cb:	mov	edx, 5
0x23d0:	xor	edi, edi
0x23d2:	call	0x1530


0x23d7:	mov	rsi, rbx
0x23da:	mov	rdi, rax
0x23dd:	call	0x15f0


0x23e2:	mov	rbx, qword ptr [rip + 0x206cbf]
0x23e9:	lea	rsi, [rip + 0x3740]
0x23f0:	mov	edx, 5
0x23f5:	xor	edi, edi
0x23f7:	call	0x1530


0x23fc:	mov	rsi, rbx
0x23ff:	mov	rdi, rax
0x2402:	call	0x15f0


0x2407:	mov	rbx, qword ptr [rip + 0x206c9a]
0x240e:	lea	rsi, [rip + 0x375b]
0x2415:	mov	edx, 5
0x241a:	xor	edi, edi
0x241c:	call	0x1530


0x2421:	mov	rsi, rbx
0x2424:	mov	rdi, rax
0x2427:	call	0x15f0


0x242c:	mov	rbx, qword ptr [rip + 0x206c75]
0x2433:	lea	rsi, [rip + 0x37f6]
0x243a:	mov	edx, 5
0x243f:	xor	edi, edi
0x2441:	call	0x1530


0x2446:	mov	rsi, rbx
0x2449:	mov	rdi, rax
0x244c:	call	0x15f0


0x2451:	mov	rbx, qword ptr [rip + 0x206c50]
0x2458:	lea	rsi, [rip + 0x3891]
0x245f:	mov	edx, 5
0x2464:	xor	edi, edi
0x2466:	call	0x1530


0x246b:	mov	rsi, rbx
0x246e:	mov	rdi, rax
0x2471:	call	0x15f0


0x2476:	mov	rbx, qword ptr [rip + 0x206c2b]
0x247d:	lea	rsi, [rip + 0x392c]
0x2484:	mov	edx, 5
0x2489:	xor	edi, edi
0x248b:	call	0x1530


0x2490:	mov	rsi, rbx
0x2493:	mov	rdi, rax
0x2496:	call	0x15f0


0x249b:	mov	rbx, qword ptr [rip + 0x206c06]
0x24a2:	lea	rsi, [rip + 0x393f]
0x24a9:	mov	edx, 5
0x24ae:	xor	edi, edi
0x24b0:	call	0x1530


0x24b5:	mov	rsi, rbx
0x24b8:	mov	rdi, rax
0x24bb:	call	0x15f0


0x24c0:	mov	rbx, qword ptr [rip + 0x206be1]
0x24c7:	lea	rsi, [rip + 0x3942]
0x24ce:	mov	edx, 5
0x24d3:	xor	edi, edi
0x24d5:	call	0x1530


0x24da:	mov	rsi, rbx
0x24dd:	mov	rdi, rax
0x24e0:	call	0x15f0


0x24e5:	mov	rbx, qword ptr [rip + 0x206bbc]
0x24ec:	lea	rsi, [rip + 0x395d]
0x24f3:	mov	edx, 5
0x24f8:	xor	edi, edi
0x24fa:	call	0x1530


0x24ff:	mov	rsi, rbx
0x2502:	mov	rdi, rax
0x2505:	call	0x15f0


0x250a:	mov	rbx, qword ptr [rip + 0x206b97]
0x2511:	lea	rsi, [rip + 0x3968]
0x2518:	mov	edx, 5
0x251d:	xor	edi, edi
0x251f:	call	0x1530


0x2524:	mov	rsi, rbx
0x2527:	mov	rdi, rax
0x252a:	call	0x15f0


0x252f:	mov	rbx, qword ptr [rip + 0x206b72]
0x2536:	lea	rsi, [rip + 0x397b]
0x253d:	mov	edx, 5
0x2542:	xor	edi, edi
0x2544:	call	0x1530


0x2549:	mov	rsi, rbx
0x254c:	mov	rdi, rax
0x254f:	call	0x15f0


0x2554:	mov	rbx, qword ptr [rip + 0x206bbd]
0x255b:	lea	rsi, [rip + 0x3996]
0x2562:	mov	edx, 5
0x2567:	xor	edi, edi
0x2569:	call	0x1530


0x256e:	mov	rcx, rbx
0x2571:	mov	rdx, rbx
0x2574:	mov	rsi, rax
0x2577:	mov	edi, 1
0x257c:	xor	eax, eax
0x257e:	lea	rbx, [rip + 0x3af7]
0x2585:	call	0x16d0


0x258a:	lea	rax, [rip + 0x3af0]
0x2591:	lea	rcx, [rip + 0x3b2a]
0x2598:	mov	qword ptr [rsp + 0x60], 0
0x25a1:	mov	qword ptr [rsp + 0x68], 0
0x25aa:	mov	rdx, rsp
0x25ad:	mov	qword ptr [rsp], rax
0x25b1:	lea	rax, [rip + 0x3acb]
0x25b8:	mov	qword ptr [rsp + 0x30], rcx
0x25bd:	lea	rcx, [rip + 0x3b08]
0x25c4:	mov	qword ptr [rsp + 8], rax
0x25c9:	lea	rax, [rip + 0x3b2b]
0x25d0:	mov	qword ptr [rsp + 0x40], rcx
0x25d5:	lea	rcx, [rip + 0x3afa]
0x25dc:	mov	qword ptr [rsp + 0x10], rax
0x25e1:	lea	rax, [rip + 0x3aab]
0x25e8:	mov	qword ptr [rsp + 0x50], rcx
0x25ed:	mov	qword ptr [rsp + 0x18], rax
0x25f2:	lea	rax, [rip + 0x3ab0]
0x25f9:	mov	qword ptr [rsp + 0x20], rax
0x25fe:	lea	rax, [rip + 0x3aae]
0x2605:	mov	qword ptr [rsp + 0x28], rax
0x260a:	mov	qword ptr [rsp + 0x38], rax
0x260f:	mov	qword ptr [rsp + 0x48], rax
0x2614:	mov	qword ptr [rsp + 0x58], rax
0x2619:	nop	dword ptr [rax]
0x2620:	add	rdx, 0x10
0x2624:	mov	rdi, qword ptr [rdx]
0x2627:	test	rdi, rdi
0x262a:	je	0x263f


0x263f:	mov	r12, qword ptr [rdx + 8]
0x2643:	xor	edi, edi
0x2645:	mov	edx, 5
0x264a:	lea	rsi, [rip + 0x3a8f]
0x2651:	test	r12, r12
0x2654:	je	0x271b


0x262c:	mov	ecx, 5
0x2631:	mov	rsi, rbx
0x2634:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x271b:	call	0x1530


0x265a:	call	0x1530


0x2634:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2636:	seta	al
0x2639:	sbb	al, 0
0x263b:	test	al, al
0x263d:	jne	0x2620


0x2620:	add	rdx, 0x10
0x2624:	mov	rdi, qword ptr [rdx]
0x2627:	test	rdi, rdi
0x262a:	je	0x263f


0x265f:	lea	rcx, [rip + 0x3932]
0x2666:	lea	rdx, [rip + 0x3a8a]
0x266d:	mov	rsi, rax
0x2670:	mov	edi, 1
0x2675:	xor	eax, eax
0x2677:	call	0x16d0


0x267c:	xor	esi, esi
0x267e:	mov	edi, 5
0x2683:	call	0x16c0


0x2688:	test	rax, rax
0x268b:	je	0x26a9


0x26a9:	lea	rsi, [rip + 0x3a59]
0x26b0:	xor	edi, edi
0x26b2:	mov	edx, 5
0x26b7:	call	0x1530


0x268d:	lea	rsi, [rip + 0x3a71]
0x2694:	mov	edx, 3
0x2699:	mov	rdi, rax
0x269c:	call	0x14c0


0x14c0:	jmp	qword ptr [rip + 0x20799a]




0x26bc:	lea	rcx, [rip + 0x39b9]
0x26c3:	lea	rdx, [rip + 0x38ce]
0x26ca:	mov	rsi, rax
0x26cd:	mov	edi, 1
0x26d2:	xor	eax, eax
0x26d4:	call	0x16d0


0x26d9:	cmp	r12, rbx
0x26dc:	lea	rcx, [rip + 0x39ba]
0x26e3:	lea	rbx, [rip + 0x3b0f]
0x26ea:	cmove	rbx, rcx
0x26ee:	lea	rsi, [rip + 0x3913]
0x26f5:	xor	edi, edi
0x26f7:	mov	edx, 5
0x26fc:	call	0x1530


0x2701:	mov	rcx, rbx
0x2704:	mov	rsi, rax
0x2707:	mov	rdx, r12
0x270a:	mov	edi, 1
0x270f:	xor	eax, eax
0x2711:	call	0x16d0


0x2716:	jmp	0x2396


0x2720:	lea	rcx, [rip + 0x3871]
0x2727:	lea	rdx, [rip + 0x39c9]
0x272e:	mov	rsi, rax
0x2731:	mov	edi, 1
0x2736:	xor	eax, eax
0x2738:	call	0x16d0


0x273d:	xor	esi, esi
0x273f:	mov	edi, 5
0x2744:	call	0x16c0


0x2749:	test	rax, rax
0x274c:	je	0x2766


0x2766:	lea	rsi, [rip + 0x399c]
0x276d:	mov	edx, 5
0x2772:	xor	edi, edi
0x2774:	lea	r12, [rip + 0x3901]
0x277b:	lea	rbx, [rip + 0x391b]
0x2782:	call	0x1530


0x274e:	lea	rsi, [rip + 0x39b0]
0x2755:	mov	edx, 3
0x275a:	mov	rdi, rax
0x275d:	call	0x14c0


0x2787:	lea	rcx, [rip + 0x38ee]
0x278e:	lea	rdx, [rip + 0x3803]
0x2795:	mov	rsi, rax
0x2798:	mov	edi, 1
0x279d:	xor	eax, eax
0x279f:	call	0x16d0


0x27a4:	jmp	0x26ee


0x26ee:	lea	rsi, [rip + 0x3913]
0x26f5:	xor	edi, edi
0x26f7:	mov	edx, 5
0x26fc:	call	0x1530


0x498c:	cmp	r12, 9
0x4990:	ja	0x4cd0


0x4996:	lea	rdx, [rip + 0x20a7]
0x499d:	movsxd	rax, dword ptr [rdx + r12*4]
0x49a1:	add	rax, rdx
0x49a4:	jmp	rax


0x4cd0:	mov	r10, qword ptr [rbx + 0x40]
0x4cd4:	mov	r9, qword ptr [rbx + 0x38]
0x4cd8:	mov	edx, 5
0x4cdd:	mov	rax, qword ptr [rbx + 0x10]
0x4ce1:	mov	r8, qword ptr [rbx + 8]
0x4ce5:	lea	rsi, [rip + 0x1cd4]
0x4cec:	mov	r13, qword ptr [rbx + 0x30]
0x4cf0:	mov	r12, qword ptr [rbx + 0x28]
0x4cf4:	mov	r15, qword ptr [rbx + 0x20]
0x4cf8:	mov	r14, qword ptr [rbx + 0x18]
0x4cfc:	mov	qword ptr [rsp + 0x18], r10
0x4d01:	mov	qword ptr [rsp + 0x10], r9
0x4d06:	mov	qword ptr [rsp], rax
0x4d0a:	mov	qword ptr [rsp + 8], r8
0x4d0f:	mov	rbx, qword ptr [rbx]
0x4d12:	jmp	0x4aa2


0x4aa2:	xor	edi, edi
0x4aa4:	call	0x1530


0x4aa9:	mov	r10, qword ptr [rsp + 0x18]
0x4aae:	push	r10
0x4ab0:	jmp	0x49f4


0x49f4:	mov	r9, qword ptr [rsp + 0x18]
0x49f9:	mov	rdx, rax
0x49fc:	mov	rcx, rbx
0x49ff:	mov	esi, 1
0x4a04:	mov	rdi, rbp
0x4a07:	xor	eax, eax
0x4a09:	push	r9
0x4a0b:	push	r13
0x4a0d:	push	r12
0x4a0f:	push	r15
0x4a11:	push	r14
0x4a13:	mov	r9, qword ptr [rsp + 0x30]
0x4a18:	mov	r8, qword ptr [rsp + 0x38]
0x4a1d:	call	0x1740


0x4a22:	add	rsp, 0x30
0x4a26:	add	rsp, 0x28
0x4a2a:	pop	rbx
0x4a2b:	pop	rbp
0x4a2c:	pop	r12
0x4a2e:	pop	r13
0x4a30:	pop	r14
0x4a32:	pop	r15
0x4a34:	ret	


0x51e9:	lea	rsi, [rip + 0x18f0]
0x51f0:	mov	edx, 5
0x51f5:	xor	edi, edi
0x51f7:	call	0x1530


0x51fc:	xor	esi, esi
0x51fe:	mov	rdx, rax
0x5201:	xor	edi, edi
0x5203:	xor	eax, eax
0x5205:	call	0x16e0


0x520a:	mov	rcx, r13
0x520d:	mov	rdx, rbp
0x5210:	mov	esi, 8
0x5215:	mov	edi, 1
0x521a:	call	0x4570


0x51a0:	call	0x14a0


0x1d46:	mov	byte ptr [r12 + rbx], 1
0x1d4b:	pop	rbx
0x1d4c:	pop	rbp
0x1d4d:	pop	r12
0x1d4f:	ret	


0x17d3:	lea	rdi, [rip + 0x4921]
0x17da:	call	0x1500


0x1500:	jmp	qword ptr [rip + 0x20797a]




0x5647:	mov	rdi, rbx
0x564a:	pop	rbx
0x564b:	jmp	0x1650


0x4e66:	mov	rax, qword ptr [rsp + 0x78]
0x4e6b:	xor	rax, qword ptr fs:[0x28]
0x4e74:	jne	0x4e80


0x4e76:	add	rsp, 0xb8
0x4e7d:	pop	rbx
0x4e7e:	pop	rbp
0x4e7f:	ret	


0x4e80:	call	0x1560


0x4d90:	mov	rax, qword ptr [rsp + 0x58]
0x4d95:	xor	rax, qword ptr fs:[0x28]
0x4d9e:	jne	0x4da5


0x4da0:	add	rsp, 0x68
0x4da4:	ret	


0x4da5:	call	0x1560


0x592b:	movzx	r9d, byte ptr [rsp + 0xf]
0x5931:	movzx	r8d, byte ptr [rsp + 8]
0x5937:	mov	edx, eax
0x5939:	mov	byte ptr [r13], r9b
0x593d:	mov	byte ptr [r12], r8b
0x5941:	add	rsp, 0x18
0x5945:	mov	eax, edx
0x5947:	pop	rbx
0x5948:	pop	rbp
0x5949:	pop	r12
0x594b:	pop	r13
0x594d:	pop	r14
0x594f:	pop	r15
0x5951:	ret	


0x17df:	mov	edi, 3
0x17e4:	call	0x2990


0x17e9:	lea	rdi, [rip + 0x1010]
0x17f0:	mov	byte ptr [rip + 0x20790d], al
0x17f6:	call	0x5a50


0x17fb:	mov	byte ptr [rip + 0x207900], 1
0x1802:	mov	byte ptr [rip + 0x2078f8], 1
0x1809:	mov	byte ptr [rip + 0x2078f0], 1
0x1810:	mov	byte ptr [rip + 0x2078e8], 0
0x1817:	mov	byte ptr [rip + 0x2078e0], 0
0x181e:	mov	byte ptr [rip + 0x2078d8], 0
0x1825:	mov	dword ptr [rip + 0x2078c9], 0
0x182f:	mov	byte ptr [rip + 0x2078c6], 0
0x1836:	nop	word ptr cs:[rax + rax]
0x1840:	lea	rcx, [rip + 0x207299]
0x1847:	lea	rdx, [rip + 0x4912]
0x184e:	xor	r8d, r8d
0x1851:	mov	rsi, rbx
0x1854:	mov	edi, ebp
0x1856:	call	0x1570


0x1570:	jmp	qword ptr [rip + 0x207942]




0x2762:	test	eax, eax
0x2764:	jne	0x27a9


0x27a9:	lea	r12, [rip + 0x38cc]
0x27b0:	mov	r13, qword ptr [rip + 0x2068f1]
0x27b7:	lea	rsi, [rip + 0x3802]
0x27be:	xor	edi, edi
0x27c0:	mov	edx, 5
0x27c5:	call	0x1530


0x27ca:	mov	rsi, r13
0x27cd:	mov	rdi, rax
0x27d0:	call	0x15f0


0x27d5:	jmp	0x26a9


0x26a1:	test	eax, eax
0x26a3:	jne	0x27b0


0x27b0:	mov	r13, qword ptr [rip + 0x2068f1]
0x27b7:	lea	rsi, [rip + 0x3802]
0x27be:	xor	edi, edi
0x27c0:	mov	edx, 5
0x27c5:	call	0x1530


0x5334:	test	eax, eax
0x5336:	je	0x5374


0x5338:	call	0x14b0


0x533d:	mov	r12d, dword ptr [rax]
0x5340:	mov	rdi, rbx
0x5343:	mov	rbp, rax
0x5346:	call	0x1510


0x534b:	test	r12d, r12d
0x534e:	jne	0x5380


0x5350:	pop	rbx
0x5351:	pop	rbp
0x5352:	pop	r12
0x5354:	ret	


0x5380:	mov	dword ptr [rbp], r12d
0x5384:	mov	eax, 0xffffffff
0x5389:	jmp	0x5350


0x297b:	xor	ebx, ebx
0x297d:	mov	dword ptr [rbp], r12d
0x2981:	jmp	0x2911


0x2936:	test	eax, eax
0x2938:	jne	0x294d


0x293a:	mov	rsi, rbp
0x293d:	mov	edi, r12d
0x2940:	call	0x16b0


0x294d:	call	0x14b0


0x16b0:	jmp	qword ptr [rip + 0x2078a2]




0x2952:	mov	ebp, dword ptr [rax]
0x2954:	mov	rbx, rax
0x2957:	mov	edi, r12d
0x295a:	call	0x15c0


0x295f:	mov	dword ptr [rbx], ebp
0x2961:	xor	ebx, ebx
0x2963:	jmp	0x2911


0x575a:	and	ebx, 0x20
0x575d:	test	ebx, ebx
0x575f:	jne	0x5778


0x5761:	test	eax, eax
0x5763:	je	0x576f


0x5778:	test	eax, eax
0x577a:	jne	0x5798


0x576f:	pop	rbx
0x5770:	pop	rbp
0x5771:	pop	r12
0x5773:	ret	


0x5765:	test	r12, r12
0x5768:	mov	eax, 0xffffffff
0x576d:	je	0x57a8


0x577c:	call	0x14b0


0x5798:	pop	rbx
0x5799:	mov	eax, 0xffffffff
0x579e:	pop	rbp
0x579f:	pop	r12
0x57a1:	ret	


0x57a8:	call	0x14b0


0x57ad:	cmp	dword ptr [rax], 9
0x57b0:	pop	rbx
0x57b1:	pop	rbp
0x57b2:	pop	r12
0x57b4:	setne	al
0x57b7:	movzx	eax, al
0x57ba:	neg	eax
0x57bc:	ret	


0x5781:	mov	dword ptr [rax], 0
0x5787:	mov	eax, 0xffffffff
0x578c:	pop	rbx
0x578d:	pop	rbp
0x578e:	pop	r12
0x5790:	ret	


0x215a:	test	eax, eax
0x215c:	jne	0x229c


0x2162:	mov	rdi, qword ptr [rsp + 0x78]
0x2167:	call	0x5310


0x229c:	movsxd	rax, dword ptr [rsp + 0x44]
0x22a1:	mov	rcx, qword ptr [rsp + 0x48]
0x22a6:	mov	esi, 3
0x22ab:	xor	edi, edi
0x22ad:	mov	rdx, qword ptr [rcx + rax*8]
0x22b1:	call	0x4700


0x216c:	test	eax, eax
0x216e:	jne	0x2294


0x2174:	cmp	byte ptr [rip + 0x206f81], 0
0x217b:	je	0x221c


0x2294:	mov	dword ptr [rsp + 0x44], 1
0x229c:	movsxd	rax, dword ptr [rsp + 0x44]
0x22a1:	mov	rcx, qword ptr [rsp + 0x48]
0x22a6:	mov	esi, 3
0x22ab:	xor	edi, edi
0x22ad:	mov	rdx, qword ptr [rcx + rax*8]
0x22b1:	call	0x4700


0x221c:	mov	rax, qword ptr [rsp + 0x1f8]
0x2224:	xor	rax, qword ptr fs:[0x28]
0x222d:	jne	0x22d6


0x2181:	lea	rsi, [rip + 0x3edd]
0x2188:	mov	edx, 5
0x218d:	xor	edi, edi
0x218f:	movzx	ebp, byte ptr [rip + 0x206e7a]
0x2196:	call	0x1530


0x2233:	add	rsp, 0x208
0x223a:	pop	rbx
0x223b:	pop	rbp
0x223c:	pop	r12
0x223e:	pop	r13
0x2240:	pop	r14
0x2242:	pop	r15
0x2244:	ret	


0x22d6:	call	0x1560


0x219b:	mov	rdi, qword ptr [rsp + 0x38]
0x21a0:	lea	rsi, [rsp + 0x1e0]
0x21a8:	mov	rbx, rax
0x21ab:	mov	r15, qword ptr [rip + 0x206e66]
0x21b2:	call	0x29f0


0x21b7:	mov	rdi, qword ptr [rsp + 0x28]
0x21bc:	lea	rsi, [rsp + 0x1c0]
0x21c4:	mov	r14, rax
0x21c7:	mov	r12, qword ptr [rip + 0x206e4a]
0x21ce:	call	0x29f0


0x21d3:	mov	rdi, qword ptr [rsp + 0x30]
0x21d8:	lea	rsi, [rsp + 0x1a0]
0x21e0:	mov	r13, qword ptr [rip + 0x206e31]
0x21e7:	mov	qword ptr [rsp + 8], rax
0x21ec:	call	0x29f0


0x21f1:	push	rbp
0x21f2:	push	rbx
0x21f3:	lea	rsi, [rip + 0x3e71]
0x21fa:	push	r15
0x21fc:	push	r14
0x21fe:	mov	rdx, rax
0x2201:	mov	r8, qword ptr [rsp + 0x28]
0x2206:	mov	r9, r12
0x2209:	mov	rcx, r13
0x220c:	mov	edi, 1
0x2211:	xor	eax, eax
0x2213:	call	0x16d0


0x2218:	add	rsp, 0x20
0x221c:	mov	rax, qword ptr [rsp + 0x1f8]
0x2224:	xor	rax, qword ptr fs:[0x28]
0x222d:	jne	0x22d6


0x2812:	test	eax, eax
0x2814:	je	0x282c


0x282c:	mov	rdi, qword ptr [rip + 0x2068ad]
0x2833:	call	0x5740


0x2816:	call	0x14b0


0x281b:	cmp	byte ptr [rip + 0x2068e6], 0
0x2822:	mov	rbx, rax
0x2825:	je	0x2843


0x2843:	lea	rsi, [rip + 0x39b5]
0x284a:	xor	edi, edi
0x284c:	mov	edx, 5
0x2851:	call	0x1530


0x2827:	cmp	dword ptr [rax], 0x20
0x282a:	jne	0x2843


0x2856:	mov	rdi, qword ptr [rip + 0x2068b3]
0x285d:	mov	rbp, rax
0x2860:	test	rdi, rdi
0x2863:	je	0x288d


0x288d:	mov	esi, dword ptr [rbx]
0x288f:	lea	rdx, [rip + 0x3979]
0x2896:	mov	rcx, rax
0x2899:	xor	edi, edi
0x289b:	xor	eax, eax
0x289d:	call	0x16e0


0x2865:	call	0x46d0


0x28a2:	jmp	0x2882


0x2882:	mov	edi, dword ptr [rip + 0x2067a0]
0x2888:	call	0x14d0


0x14d0:	jmp	qword ptr [rip + 0x207992]




0x2838:	test	eax, eax
0x283a:	jne	0x2882


0x283c:	add	rsp, 8
0x2840:	pop	rbx
0x2841:	pop	rbp
0x2842:	ret	


0x2945:	test	rax, rax
0x2948:	mov	rbx, rax
0x294b:	jne	0x2911


0x185b:	cmp	eax, -1
0x185e:	je	0x19d9


0x19d9:	cmp	qword ptr [rip + 0x20770f], 0
0x19e1:	je	0x1a2d


0x1864:	cmp	eax, 0x33
0x1867:	je	0x1960


0x1a2d:	mov	qword ptr [rip + 0x2076b8], 1
0x1a38:	jmp	0x19e3


0x19e3:	movsxd	rax, dword ptr [rip + 0x2076ce]
0x19ea:	mov	edx, ebp
0x19ec:	sub	edx, eax
0x19ee:	cmp	edx, 1
0x19f1:	jle	0x1a7c


0x1960:	mov	byte ptr [rip + 0x207799], 0
0x1967:	jmp	0x1840


0x186d:	jle	0x18a0


0x1a7c:	cmp	eax, ebp
0x1a7e:	jl	0x1a3a


0x19f7:	cmp	edx, 2
0x19fa:	jne	0x1ac7


0x1840:	lea	rcx, [rip + 0x207299]
0x1847:	lea	rdx, [rip + 0x4912]
0x184e:	xor	r8d, r8d
0x1851:	mov	rsi, rbx
0x1854:	mov	edi, ebp
0x1856:	call	0x1570


0x18a0:	cmp	eax, 0xffffff7e
0x18a5:	je	0x1a75


0x186f:	cmp	eax, 0x81
0x1874:	je	0x18f0


0x1a3a:	mov	rdi, qword ptr [rbx + rbp*8 - 8]
0x1a3f:	call	0x48d0


0x1a80:	lea	rsi, [rip + 0x46de]
0x1a87:	xor	edi, edi
0x1a89:	mov	edx, 5
0x1a8e:	call	0x1530


0x1a00:	lea	rdi, [rbx + rax*8]
0x1a04:	call	0x1d60


0x1ac7:	mov	rdi, qword ptr [rbx + rax*8 + 0x10]
0x1acc:	call	0x48d0


0x1a75:	xor	edi, edi
0x1a77:	call	0x2340


0x18ab:	jle	0x1990


0x18f0:	mov	dword ptr [rip + 0x2077fe], 2
0x18fa:	jmp	0x1840


0x1876:	jg	0x18d0


0x1990:	cmp	eax, 0xffffff7d
0x1995:	jne	0x1a6b


0x18b1:	cmp	eax, 0x31
0x18b4:	je	0x1980


0x1878:	cmp	eax, 0x7a
0x187b:	je	0x1970


0x18d0:	cmp	eax, 0x82
0x18d5:	je	0x1900


0x199b:	sub	rsp, 8
0x199f:	mov	rdi, qword ptr [rip + 0x207702]
0x19a6:	mov	rcx, qword ptr [rip + 0x207673]
0x19ad:	push	0
0x19af:	lea	r9, [rip + 0x4786]
0x19b6:	lea	r8, [rip + 0x478f]
0x19bd:	lea	rdx, [rip + 0x4733]
0x19c4:	lea	rsi, [rip + 0x46b1]
0x19cb:	xor	eax, eax
0x19cd:	call	0x4dc0


0x1a6b:	mov	edi, 1
0x1a70:	call	0x2340


0x1980:	mov	byte ptr [rip + 0x20777b], 0
0x1987:	jmp	0x1840


0x18ba:	cmp	eax, 0x32
0x18bd:	jne	0x1a6b


0x1970:	mov	byte ptr [rip + 0x207699], 0
0x1977:	jmp	0x1840


0x1881:	add	eax, -0x80
0x1884:	jne	0x1a6b


0x1900:	cmp	qword ptr [rip + 0x2077e8], 0
0x1908:	mov	r13, qword ptr [rip + 0x2077b1]
0x190f:	je	0x1928


0x18d7:	cmp	eax, 0x83
0x18dc:	jne	0x1a6b


0x18c3:	mov	byte ptr [rip + 0x207837], 0
0x18ca:	jmp	0x1840


0x188a:	mov	dword ptr [rip + 0x207864], 1
0x1894:	jmp	0x1840


0x1928:	cmp	byte ptr [r13], 0
0x192d:	mov	qword ptr [rip + 0x2076e4], r13
0x1934:	mov	eax, 1
0x1939:	je	0x194f


0x1911:	mov	rdi, qword ptr [rip + 0x207700]
0x1918:	mov	rsi, r13
0x191b:	call	0x1610


0x18e2:	mov	byte ptr [rip + 0x207813], 1
0x18e9:	jmp	0x1840


0x194f:	mov	qword ptr [rip + 0x20779a], rax
0x1956:	jmp	0x1840


0x193b:	xor	eax, eax
0x193d:	mov	rcx, r12
0x1940:	mov	rdi, r13
0x1943:	repne scasb	al, byte ptr [rdi]


0x1610:	jmp	qword ptr [rip + 0x2078f2]


0x1945:	mov	rax, rcx
0x1948:	not	rax
0x194b:	sub	rax, 1
0x194f:	mov	qword ptr [rip + 0x20779a], rax
0x1956:	jmp	0x1840


0x1943:	repne scasb	al, byte ptr [rdi]




0x19d2:	xor	edi, edi
0x19d4:	call	0x1720


0x1a09:	cmp	byte ptr [rip + 0x2076ed], 0
0x1a10:	jne	0x1ae5


0x1a16:	cmp	byte ptr [rip + 0x2076e1], 0
0x1a1d:	jne	0x1ae5


0x1ae5:	lea	rsi, [rip + 0x46b3]
0x1aec:	mov	edx, 5
0x1af1:	xor	edi, edi
0x1af3:	call	0x1530


0x1a23:	pop	rdx
0x1a24:	xor	eax, eax
0x1a26:	pop	rbx
0x1a27:	pop	rbp
0x1a28:	pop	r12
0x1a2a:	pop	r13
0x1a2c:	ret	


0x1af8:	xor	esi, esi
0x1afa:	mov	rdx, rax
0x1afd:	mov	edi, 1
0x1b02:	xor	eax, eax
0x1b04:	call	0x16e0


0x1b09:	nop	dword ptr [rax]


0x1a93:	xor	esi, esi
0x1a95:	mov	rdx, rax
0x1a98:	xor	edi, edi
0x1a9a:	xor	eax, eax
0x1a9c:	call	0x16e0


0x1aa1:	jmp	0x1a6b


0x1920:	test	eax, eax
0x1922:	jne	0x1aa3


0x1aa3:	lea	rsi, [rip + 0x4596]
0x1aaa:	mov	edx, 5
0x1aaf:	xor	edi, edi
0x1ab1:	call	0x1530


0x1ab6:	xor	esi, esi
0x1ab8:	mov	rdx, rax
0x1abb:	mov	edi, 1
0x1ac0:	xor	eax, eax
0x1ac2:	call	0x16e0


0x1ad1:	mov	edx, 5
0x1ad6:	mov	rbx, rax
0x1ad9:	lea	rsi, [rip + 0x46ae]
0x1ae0:	jmp	0x1a53


0x1a53:	xor	edi, edi
0x1a55:	call	0x1530


0x1a5a:	mov	rcx, rbx
0x1a5d:	mov	rdx, rax
0x1a60:	xor	esi, esi
0x1a62:	xor	edi, edi
0x1a64:	xor	eax, eax
0x1a66:	call	0x16e0


0x1a44:	lea	rsi, [rip + 0x472a]
0x1a4b:	mov	rbx, rax
0x1a4e:	mov	edx, 5
0x1a53:	xor	edi, edi
0x1a55:	call	0x1530


0x286a:	mov	esi, dword ptr [rbx]
0x286c:	lea	rdx, [rip + 0x3998]
0x2873:	mov	rcx, rax
0x2876:	mov	r8, rbp
0x2879:	xor	edi, edi
0x287b:	xor	eax, eax
0x287d:	call	0x16e0


0x521f:	mov	rcx, r12
0x5222:	mov	rdx, rbx
0x5225:	mov	esi, 8
0x522a:	xor	edi, edi
0x522c:	mov	rbp, rax
0x522f:	call	0x4570


0x5234:	lea	rsi, [rip + 0x18d5]
0x523b:	mov	rbx, rax
0x523e:	mov	edx, 5
0x5243:	xor	edi, edi
0x5245:	call	0x1530


0x524a:	mov	r8, rbp
0x524d:	mov	rcx, rbx
0x5250:	mov	edi, dword ptr [rip + 0x203dd2]
0x5256:	pop	rbx
0x5257:	pop	rbp
0x5258:	pop	r12
0x525a:	pop	r13
0x525c:	pop	r14
0x525e:	mov	rdx, rax
0x5261:	xor	esi, esi
0x5263:	xor	eax, eax
0x5265:	jmp	0x16e0


0x407c:	add	rsp, 0x20
0x4080:	mov	r11, qword ptr [rsp + 0x10]
0x4085:	cmp	r11, rax
0x4088:	ja	0x40f1


0x408a:	lea	rsi, [rax + 1]
0x408e:	lea	rax, [rip + 0x20508b]
0x4095:	cmp	r12, rax
0x4098:	mov	qword ptr [rbx], rsi
0x409b:	je	0x40af


0x40f1:	mov	eax, dword ptr [rsp + 0x18]
0x40f5:	mov	dword ptr [r13], eax
0x40f9:	add	rsp, 0x28
0x40fd:	mov	rax, r12
0x4100:	pop	rbx
0x4101:	pop	rbp
0x4102:	pop	r12
0x4104:	pop	r13
0x4106:	pop	r14
0x4108:	pop	r15
0x410a:	ret	


0x40af:	mov	rdi, rsi
0x40b2:	mov	qword ptr [rsp + 0x10], rsi
0x40b7:	call	0x4f20


0x409d:	mov	rdi, r12
0x40a0:	mov	qword ptr [rsp + 0x10], rsi
0x40a5:	call	0x1490


0x40aa:	mov	rsi, qword ptr [rsp + 0x10]
0x40af:	mov	rdi, rsi
0x40b2:	mov	qword ptr [rsp + 0x10], rsi
0x40b7:	call	0x4f20


0x40bc:	sub	rsp, 8
0x40c0:	mov	qword ptr [rbx + 8], rax
0x40c4:	mov	r8d, dword ptr [rbp]
0x40c8:	push	qword ptr [rbp + 0x30]
0x40cb:	push	qword ptr [rbp + 0x28]
0x40ce:	mov	rcx, r14
0x40d1:	push	r15
0x40d3:	mov	r9d, dword ptr [rsp + 0x3c]
0x40d8:	mov	rdi, rax
0x40db:	mov	rdx, qword ptr [rsp + 0x28]
0x40e0:	mov	rsi, qword ptr [rsp + 0x30]
0x40e5:	mov	r12, rax
0x40e8:	call	0x2d50


0x4802:	mov	rdi, qword ptr [rsp + 0x38]
0x4807:	xor	rdi, qword ptr fs:[0x28]
0x4810:	jne	0x481c


0x4812:	add	rsp, 0x48
0x4816:	ret	


0x481c:	call	0x1560


0x454f:	mov	rcx, qword ptr [rsp + 0x38]
0x4554:	xor	rcx, qword ptr fs:[0x28]
0x455d:	jne	0x4569


0x455f:	add	rsp, 0x48
0x4563:	ret	


0x4569:	call	0x1560


0x45db:	mov	rdx, qword ptr [rsp + 0x38]
0x45e0:	xor	rdx, qword ptr fs:[0x28]
0x45e9:	jne	0x45f5


0x45eb:	add	rsp, 0x48
0x45ef:	ret	


0x45f5:	call	0x1560


0x476f:	mov	rcx, qword ptr [rsp + 0x38]
0x4774:	xor	rcx, qword ptr fs:[0x28]
0x477d:	jne	0x4789


0x477f:	add	rsp, 0x48
0x4783:	ret	


0x4789:	call	0x1560


0x22b6:	mov	rbx, rax
0x22b9:	call	0x14b0


0x22be:	mov	esi, dword ptr [rax]
0x22c0:	lea	rdx, [rip + 0x3f48]
0x22c7:	mov	rcx, rbx
0x22ca:	mov	edi, 1
0x22cf:	xor	eax, eax
0x22d1:	call	0x16e0


0x2274:	mov	rbx, rax
0x2277:	call	0x14b0


0x227c:	mov	esi, dword ptr [rax]
0x227e:	lea	rdx, [rip + 0x3f8a]
0x2285:	mov	rcx, rbx
0x2288:	mov	edi, 1
0x228d:	xor	eax, eax
0x228f:	call	0x16e0


0x22ea:	mov	rbx, rax
0x22ed:	call	0x14b0


0x22f2:	mov	esi, dword ptr [rax]
0x22f4:	lea	rdx, [rip + 0x3f14]
0x22fb:	mov	rcx, rbx
0x22fe:	mov	edi, 1
0x2303:	xor	eax, eax
0x2305:	call	0x16e0


0x2319:	mov	rbx, rax
0x231c:	call	0x14b0


0x2321:	mov	esi, dword ptr [rax]
0x2323:	lea	rdx, [rip + 0x3ee5]
0x232a:	mov	rcx, rbx
0x232d:	mov	edi, 1
0x2332:	xor	eax, eax
0x2334:	call	0x16e0


0x2339:	nop	dword ptr [rax]


0x469e:	mov	rsi, qword ptr [rsp + 0x38]
0x46a3:	xor	rsi, qword ptr fs:[0x28]
0x46ac:	jne	0x46b3


0x46ae:	add	rsp, 0x48
0x46b2:	ret	


0x46b3:	call	0x1560


0x40ed:	add	rsp, 0x20
0x40f1:	mov	eax, dword ptr [rsp + 0x18]
0x40f5:	mov	dword ptr [r13], eax
0x40f9:	add	rsp, 0x28
0x40fd:	mov	rax, r12
0x4100:	pop	rbx
0x4101:	pop	rbp
0x4102:	pop	r12
0x4104:	pop	r13
0x4106:	pop	r14
0x4108:	pop	r15
0x410a:	ret	


0x433c:	lea	rsi, [rax + 1]
0x4340:	mov	qword ptr [rsp + 0x48], rax
0x4345:	add	rsp, 0x20
0x4349:	mov	rdi, rsi
0x434c:	mov	qword ptr [rsp + 0x18], rsi
0x4351:	call	0x4f20


0x4356:	mov	qword ptr [rsp + 0x10], rax
0x435b:	sub	rsp, 8
0x435f:	push	qword ptr [rbx + 0x30]
0x4362:	push	qword ptr [rbx + 0x28]
0x4365:	mov	r10, qword ptr [rsp + 0x38]
0x436a:	mov	r9d, ebp
0x436d:	mov	r8d, dword ptr [rbx]
0x4370:	mov	rcx, r15
0x4373:	mov	rdx, r14
0x4376:	mov	rdi, rax
0x4379:	push	r10
0x437b:	mov	rsi, qword ptr [rsp + 0x38]
0x4380:	call	0x2d50


0x4385:	mov	eax, dword ptr [rsp + 0x2c]
0x4389:	add	rsp, 0x20
0x438d:	test	r12, r12
0x4390:	mov	dword ptr [r13], eax
0x4394:	je	0x439f


0x439f:	mov	rax, qword ptr [rsp + 0x10]
0x43a4:	add	rsp, 0x38
0x43a8:	pop	rbx
0x43a9:	pop	rbp
0x43aa:	pop	r12
0x43ac:	pop	r13
0x43ae:	pop	r14
0x43b0:	pop	r15
0x43b2:	ret	


0x4396:	mov	r11, qword ptr [rsp + 0x28]
0x439b:	mov	qword ptr [r12], r11
0x439f:	mov	rax, qword ptr [rsp + 0x10]
0x43a4:	add	rsp, 0x38
0x43a8:	pop	rbx
0x43a9:	pop	rbp
0x43aa:	pop	r12
0x43ac:	pop	r13
0x43ae:	pop	r14
0x43b0:	pop	r15
0x43b2:	ret	


0x42b1:	mov	dword ptr [rbp], r12d
0x42b5:	add	rsp, 0x38
0x42b9:	pop	rbx
0x42ba:	pop	rbp
0x42bb:	pop	r12
0x42bd:	pop	r13
0x42bf:	pop	r14
0x42c1:	pop	r15
0x42c3:	ret	


0x2ac1:	mov	r8, qword ptr [r14]
0x2ac4:	movzx	ecx, byte ptr [rsp]
0x2ac8:	lea	rsi, [rax + rbx]
0x2acc:	mov	qword ptr [r14 + 0x10], rax
0x2ad0:	mov	r13, rax
0x2ad3:	movzx	edx, byte ptr [rsp + 0xf]
0x2ad8:	lea	rbx, [rsi + 1]
0x2adc:	add	r8, rax
0x2adf:	cmp	r12d, r15d
0x2ae2:	mov	byte ptr [rsi], cl
0x2ae4:	jne	0x2a8b


0x5a1d:	add	rbx, 1
0x5a21:	cmp	rbp, rbx
0x5a24:	jne	0x5a10


0x5a10:	mov	rdx, r15
0x5a13:	mov	rsi, r14
0x5a16:	mov	edi, r13d
0x5a19:	call	qword ptr [r12 + rbx*8]






0x4b40:	mov	r13, qword ptr [rbx + 0x10]
0x4b44:	mov	r12, qword ptr [rbx + 8]
0x4b48:	lea	rsi, [rip + 0x1c37]
0x4b4f:	mov	rbx, qword ptr [rbx]
0x4b52:	mov	edx, 5
0x4b57:	xor	edi, edi
0x4b59:	call	0x1530


0x4c80:	mov	r9, qword ptr [rbx + 0x10]
0x4c84:	mov	r13, qword ptr [rbx + 0x30]
0x4c88:	lea	rsi, [rip + 0x1c99]
0x4c8f:	mov	r12, qword ptr [rbx + 0x28]
0x4c93:	mov	r15, qword ptr [rbx + 0x20]
0x4c97:	mov	edx, 5
0x4c9c:	mov	r14, qword ptr [rbx + 0x18]
0x4ca0:	mov	r8, qword ptr [rbx + 8]
0x4ca4:	xor	edi, edi
0x4ca6:	mov	qword ptr [rsp + 8], r9
0x4cab:	mov	rbx, qword ptr [rbx]
0x4cae:	mov	qword ptr [rsp], r8
0x4cb2:	call	0x1530


0x4a60:	mov	r10, qword ptr [rbx + 0x40]
0x4a64:	mov	r9, qword ptr [rbx + 0x38]
0x4a68:	lea	rsi, [rip + 0x1f19]
0x4a6f:	mov	rax, qword ptr [rbx + 0x10]
0x4a73:	mov	r8, qword ptr [rbx + 8]
0x4a77:	mov	edx, 5
0x4a7c:	mov	r13, qword ptr [rbx + 0x30]
0x4a80:	mov	r12, qword ptr [rbx + 0x28]
0x4a84:	mov	r15, qword ptr [rbx + 0x20]
0x4a88:	mov	r14, qword ptr [rbx + 0x18]
0x4a8c:	mov	rbx, qword ptr [rbx]
0x4a8f:	mov	qword ptr [rsp + 0x18], r10
0x4a94:	mov	qword ptr [rsp + 0x10], r9
0x4a99:	mov	qword ptr [rsp], rax
0x4a9d:	mov	qword ptr [rsp + 8], r8
0x4aa2:	xor	edi, edi
0x4aa4:	call	0x1530


0x4a26:	add	rsp, 0x28
0x4a2a:	pop	rbx
0x4a2b:	pop	rbp
0x4a2c:	pop	r12
0x4a2e:	pop	r13
0x4a30:	pop	r14
0x4a32:	pop	r15
0x4a34:	ret	


0x4be8:	mov	r15, qword ptr [rbx + 0x20]
0x4bec:	lea	rsi, [rip + 0x1ce5]
0x4bf3:	mov	edx, 5
0x4bf8:	xor	edi, edi
0x4bfa:	mov	r14, qword ptr [rbx + 0x18]
0x4bfe:	mov	r13, qword ptr [rbx + 0x10]
0x4c02:	mov	r12, qword ptr [rbx + 8]
0x4c06:	mov	rbx, qword ptr [rbx]
0x4c09:	call	0x1530


0x4af8:	mov	r12, qword ptr [rbx + 8]
0x4afc:	lea	rsi, [rip + 0x1c6c]
0x4b03:	mov	rbx, qword ptr [rbx]
0x4b06:	mov	edx, 5
0x4b0b:	xor	edi, edi
0x4b0d:	call	0x1530


0x4b90:	lea	rsi, [rip + 0x1d21]
0x4b97:	mov	edx, 5
0x4b9c:	xor	edi, edi
0x4b9e:	mov	r14, qword ptr [rbx + 0x18]
0x4ba2:	mov	r13, qword ptr [rbx + 0x10]
0x4ba6:	mov	r12, qword ptr [rbx + 8]
0x4baa:	mov	rbx, qword ptr [rbx]
0x4bad:	call	0x1530


0x49b0:	mov	r9, qword ptr [rbx + 0x38]
0x49b4:	mov	rax, qword ptr [rbx + 0x10]
0x49b8:	lea	rsi, [rip + 0x1f99]
0x49bf:	mov	r8, qword ptr [rbx + 8]
0x49c3:	mov	edx, 5
0x49c8:	xor	edi, edi
0x49ca:	mov	r13, qword ptr [rbx + 0x30]
0x49ce:	mov	r12, qword ptr [rbx + 0x28]
0x49d2:	mov	qword ptr [rsp + 0x10], r9
0x49d7:	mov	r15, qword ptr [rbx + 0x20]
0x49db:	mov	r14, qword ptr [rbx + 0x18]
0x49df:	mov	qword ptr [rsp], rax
0x49e3:	mov	qword ptr [rsp + 8], r8
0x49e8:	mov	rbx, qword ptr [rbx]
0x49eb:	call	0x1530


0x4ab8:	mov	rbx, qword ptr [rbx]
0x4abb:	lea	rsi, [rip + 0x1c9d]
0x4ac2:	mov	edx, 5
0x4ac7:	xor	edi, edi
0x4ac9:	call	0x1530


0x4c18:	mov	r8, qword ptr [rbx + 8]
0x4c1c:	mov	r12, qword ptr [rbx + 0x28]
0x4c20:	lea	rsi, [rip + 0x1cd9]
0x4c27:	mov	r15, qword ptr [rbx + 0x20]
0x4c2b:	mov	r14, qword ptr [rbx + 0x18]
0x4c2f:	mov	edx, 5
0x4c34:	mov	r13, qword ptr [rbx + 0x10]
0x4c38:	xor	edi, edi
0x4c3a:	mov	rbx, qword ptr [rbx]
0x4c3d:	mov	qword ptr [rsp], r8
0x4c41:	call	0x1530


0x4c46:	sub	rsp, 8
0x4c4a:	mov	r9, r13
0x4c4d:	push	r12
0x4c4f:	push	r15
0x4c51:	push	r14
0x4c53:	mov	r8, qword ptr [rsp + 0x20]
0x4c58:	mov	rcx, rbx
0x4c5b:	mov	rdx, rax
0x4c5e:	mov	rdi, rbp
0x4c61:	mov	esi, 1
0x4c66:	xor	eax, eax
0x4c68:	call	0x1740


0x4c6d:	add	rsp, 0x20
0x4c71:	add	rsp, 0x28
0x4c75:	pop	rbx
0x4c76:	pop	rbp
0x4c77:	pop	r12
0x4c79:	pop	r13
0x4c7b:	pop	r14
0x4c7d:	pop	r15
0x4c7f:	ret	


0x4ace:	add	rsp, 0x28
0x4ad2:	mov	rcx, rbx
0x4ad5:	mov	rdi, rbp
0x4ad8:	pop	rbx
0x4ad9:	pop	rbp
0x4ada:	pop	r12
0x4adc:	pop	r13
0x4ade:	pop	r14
0x4ae0:	pop	r15
0x4ae2:	mov	rdx, rax
0x4ae5:	mov	esi, 1
0x4aea:	xor	eax, eax
0x4aec:	jmp	0x1740


0x49f0:	sub	rsp, 8
0x49f4:	mov	r9, qword ptr [rsp + 0x18]
0x49f9:	mov	rdx, rax
0x49fc:	mov	rcx, rbx
0x49ff:	mov	esi, 1
0x4a04:	mov	rdi, rbp
0x4a07:	xor	eax, eax
0x4a09:	push	r9
0x4a0b:	push	r13
0x4a0d:	push	r12
0x4a0f:	push	r15
0x4a11:	push	r14
0x4a13:	mov	r9, qword ptr [rsp + 0x30]
0x4a18:	mov	r8, qword ptr [rsp + 0x38]
0x4a1d:	call	0x1740


0x4bb2:	sub	rsp, 8
0x4bb6:	push	r14
0x4bb8:	mov	rdx, rax
0x4bbb:	mov	r9, r13
0x4bbe:	mov	r8, r12
0x4bc1:	mov	rcx, rbx
0x4bc4:	mov	rdi, rbp
0x4bc7:	mov	esi, 1
0x4bcc:	xor	eax, eax
0x4bce:	call	0x1740


0x4bd3:	pop	rax
0x4bd4:	pop	rdx
0x4bd5:	add	rsp, 0x28
0x4bd9:	pop	rbx
0x4bda:	pop	rbp
0x4bdb:	pop	r12
0x4bdd:	pop	r13
0x4bdf:	pop	r14
0x4be1:	pop	r15
0x4be3:	ret	


0x4b12:	add	rsp, 0x28
0x4b16:	mov	r8, r12
0x4b19:	mov	rcx, rbx
0x4b1c:	mov	rdi, rbp
0x4b1f:	mov	rdx, rax
0x4b22:	mov	esi, 1
0x4b27:	pop	rbx
0x4b28:	pop	rbp
0x4b29:	pop	r12
0x4b2b:	pop	r13
0x4b2d:	pop	r14
0x4b2f:	pop	r15
0x4b31:	xor	eax, eax
0x4b33:	jmp	0x1740


0x4c0e:	push	r15
0x4c10:	jmp	0x4bb6


0x4bb6:	push	r14
0x4bb8:	mov	rdx, rax
0x4bbb:	mov	r9, r13
0x4bbe:	mov	r8, r12
0x4bc1:	mov	rcx, rbx
0x4bc4:	mov	rdi, rbp
0x4bc7:	mov	esi, 1
0x4bcc:	xor	eax, eax
0x4bce:	call	0x1740


0x4cb7:	push	r13
0x4cb9:	push	r12
0x4cbb:	push	r15
0x4cbd:	push	r14
0x4cbf:	mov	r9, qword ptr [rsp + 0x28]
0x4cc4:	jmp	0x4c53


0x4c53:	mov	r8, qword ptr [rsp + 0x20]
0x4c58:	mov	rcx, rbx
0x4c5b:	mov	rdx, rax
0x4c5e:	mov	rdi, rbp
0x4c61:	mov	esi, 1
0x4c66:	xor	eax, eax
0x4c68:	call	0x1740


0x4b5e:	add	rsp, 0x28
0x4b62:	mov	r9, r13
0x4b65:	mov	r8, r12
0x4b68:	mov	rcx, rbx
0x4b6b:	mov	rdi, rbp
0x4b6e:	mov	rdx, rax
0x4b71:	pop	rbx
0x4b72:	pop	rbp
0x4b73:	pop	r12
0x4b75:	pop	r13
0x4b77:	pop	r14
0x4b79:	pop	r15
0x4b7b:	mov	esi, 1
0x4b80:	xor	eax, eax
0x4b82:	jmp	0x1740


0x38f0:	sub	rsp, 8
0x38f4:	mov	rcx, rbp
0x38f7:	mov	rsi, r13
0x38fa:	push	qword ptr [rsp + 0x68]
0x38fe:	push	qword ptr [rsp + 0x78]
0x3902:	mov	rdi, r14
0x3905:	push	0
0x3907:	mov	r9d, dword ptr [rsp + 0x98]
0x390f:	mov	r8d, dword ptr [rsp + 0x28]
0x3914:	mov	rdx, qword ptr [rsp + 0x30]
0x3919:	and	r9d, 0xfffffffd
0x391d:	call	0x2d50


0x3922:	add	rsp, 0x20
0x3926:	mov	r15, rax
0x3929:	mov	rbx, qword ptr [rsp + 0xa8]
0x3931:	xor	rbx, qword ptr fs:[0x28]
0x393a:	mov	rax, r15
0x393d:	jne	0x3f43


0x3943:	add	rsp, 0xb8
0x394a:	pop	rbx
0x394b:	pop	rbp
0x394c:	pop	r12
0x394e:	pop	r13
0x3950:	pop	r14
0x3952:	pop	r15
0x3954:	ret	


0x3f43:	call	0x1560


0x3eed:	sub	rsp, 8
0x3ef1:	mov	r8d, 5
0x3ef7:	mov	rcx, r11
0x3efa:	push	qword ptr [rsp + 0x68]
0x3efe:	push	qword ptr [rsp + 0x78]
0x3f02:	mov	rdi, r14
0x3f05:	push	qword ptr [rsp + 0x38]
0x3f09:	mov	r9d, dword ptr [rsp + 0x98]
0x3f11:	mov	rdx, qword ptr [rsp + 0x30]
0x3f16:	mov	rsi, qword ptr [rsp + 0x70]
0x3f1b:	call	0x2d50


0x3f20:	add	rsp, 0x20
0x3f24:	mov	r15, rax
0x3f27:	jmp	0x3929


0x3929:	mov	rbx, qword ptr [rsp + 0xa8]
0x3931:	xor	rbx, qword ptr fs:[0x28]
0x393a:	mov	rax, r15
0x393d:	jne	0x3f43


0x1470:	push	qword ptr [rip + 0x2079ba]
0x1476:	jmp	qword ptr [rip + 0x2079bc]


0x147c:	nop	dword ptr [rax]


0x1486:	push	0
0x148b:	jmp	0x1470


0x1496:	push	1
0x149b:	jmp	0x1470


0x14a6:	push	2
0x14ab:	jmp	0x1470


0x14b6:	push	3
0x14bb:	jmp	0x1470


0x14c6:	push	4
0x14cb:	jmp	0x1470


0x14d6:	push	5
0x14db:	jmp	0x1470


0x14e6:	push	6
0x14eb:	jmp	0x1470


0x14f6:	push	7
0x14fb:	jmp	0x1470


0x1506:	push	8
0x150b:	jmp	0x1470


0x1516:	push	9
0x151b:	jmp	0x1470


0x1526:	push	0xa
0x152b:	jmp	0x1470


0x1536:	push	0xb
0x153b:	jmp	0x1470


0x1546:	push	0xc
0x154b:	jmp	0x1470


0x1556:	push	0xd
0x155b:	jmp	0x1470


0x1566:	push	0xe
0x156b:	jmp	0x1470


0x1576:	push	0xf
0x157b:	jmp	0x1470


0x1586:	push	0x10
0x158b:	jmp	0x1470


0x1596:	push	0x11
0x159b:	jmp	0x1470


0x15a6:	push	0x12
0x15ab:	jmp	0x1470


0x15b6:	push	0x13
0x15bb:	jmp	0x1470


0x15c6:	push	0x14
0x15cb:	jmp	0x1470


0x15d6:	push	0x15
0x15db:	jmp	0x1470


0x15e6:	push	0x16
0x15eb:	jmp	0x1470


0x15f6:	push	0x17
0x15fb:	jmp	0x1470


0x1606:	push	0x18
0x160b:	jmp	0x1470


0x1616:	push	0x19
0x161b:	jmp	0x1470


0x1626:	push	0x1a
0x162b:	jmp	0x1470


0x1636:	push	0x1b
0x163b:	jmp	0x1470


0x1646:	push	0x1c
0x164b:	jmp	0x1470


0x1656:	push	0x1d
0x165b:	jmp	0x1470


0x1666:	push	0x1e
0x166b:	jmp	0x1470


0x1676:	push	0x1f
0x167b:	jmp	0x1470


0x1686:	push	0x20
0x168b:	jmp	0x1470


0x1696:	push	0x21
0x169b:	jmp	0x1470


0x16a6:	push	0x22
0x16ab:	jmp	0x1470


0x16b6:	push	0x23
0x16bb:	jmp	0x1470


0x16c6:	push	0x24
0x16cb:	jmp	0x1470


0x16d6:	push	0x25
0x16db:	jmp	0x1470


0x16e6:	push	0x26
0x16eb:	jmp	0x1470


0x16f6:	push	0x27
0x16fb:	jmp	0x1470


0x1706:	push	0x28
0x170b:	jmp	0x1470


0x1716:	push	0x29
0x171b:	jmp	0x1470


0x1726:	push	0x2a
0x172b:	jmp	0x1470


0x1736:	push	0x2b
0x173b:	jmp	0x1470


0x1746:	push	0x2c
0x174b:	jmp	0x1470


0x1750:	jmp	qword ptr [rip + 0x207852]




0x1756:	push	0x2d
0x175b:	jmp	0x1470


0x1760:	jmp	qword ptr [rip + 0x20784a]




0x1766:	push	0x2e
0x176b:	jmp	0x1470


0x1770:	jmp	qword ptr [rip + 0x207842]




0x1776:	push	0x2f
0x177b:	jmp	0x1470


0x1b3a:	hlt	


0x1b3b:	nop	dword ptr [rax + rax]


0x1b72:	nop	dword ptr [rax]
0x1b76:	nop	word ptr cs:[rax + rax]


0x1bc2:	nop	dword ptr [rax]
0x1bc6:	nop	word ptr cs:[rax + rax]


0x1c0a:	nop	word ptr [rax + rax]


0x1c1a:	nop	word ptr [rax + rax]


0x1ccf:	nop	


0x1d57:	nop	word ptr [rax + rax]


0x27da:	nop	word ptr [rax + rax]


0x27e8:	nop	dword ptr [rax + rax]


0x27f8:	nop	dword ptr [rax + rax]


0x28a4:	nop	word ptr cs:[rax + rax]
0x28ae:	nop	


0x28b5:	nop	
0x28b6:	nop	word ptr cs:[rax + rax]


0x28e2:	nop	word ptr cs:[rax + rax]
0x28ec:	nop	dword ptr [rax]


0x2983:	nop	word ptr cs:[rax + rax]
0x298d:	nop	dword ptr [rax]


0x2a32:	nop	word ptr cs:[rax + rax]
0x2a3c:	nop	dword ptr [rax]


0x2b58:	nop	dword ptr [rax + rax]


0x2b6a:	nop	word ptr [rax + rax]


0x2b79:	nop	dword ptr [rax]


0x2bbf:	nop	


0x2c5f:	nop	


0x2d47:	nop	word ptr [rax + rax]


0x2de3:	mov	byte ptr [rsp + 0xe], 1
0x2de8:	mov	byte ptr [rsp + 0x7c], 0
0x2ded:	xor	r12d, r12d
0x2df0:	mov	qword ptr [rsp + 0x50], 0
0x2df9:	mov	byte ptr [rsp + 0xf], 1
0x2dfe:	mov	byte ptr [rsp + 0xd], 0
0x2e03:	lea	rax, [rip + 0x346b]
0x2e0a:	mov	qword ptr [rsp + 0x18], 1
0x2e13:	xor	r15d, r15d
0x2e16:	mov	dword ptr [rsp + 8], 2
0x2e1e:	mov	qword ptr [rsp + 0x48], rax
0x2e23:	xor	r11d, r11d
0x2e26:	mov	rax, rbp
0x2e29:	mov	r8d, r12d
0x2e2c:	mov	rbp, r11
0x2e2f:	mov	r11, rax
0x2e32:	nop	word ptr [rax + rax]
0x2e38:	cmp	r11, rbp
0x2e3b:	setne	r12b
0x2e3f:	cmp	r11, -1
0x2e43:	jne	0x2e52


0x2e45:	mov	rax, qword ptr [rsp + 0x10]
0x2e4a:	cmp	byte ptr [rax + rbp], 0
0x2e4e:	setne	r12b
0x2e52:	test	r12b, r12b
0x2e55:	je	0x34b0


0x2e52:	test	r12b, r12b
0x2e55:	je	0x34b0


0x34b0:	cmp	dword ptr [rsp + 8], 2
0x34b5:	movzx	ebx, byte ptr [rsp + 0xf]
0x34ba:	mov	r12d, r8d
0x34bd:	mov	rbp, r11
0x34c0:	sete	dl
0x34c3:	mov	eax, ebx
0x34c5:	test	r15, r15
0x34c8:	sete	cl
0x34cb:	and	eax, edx
0x34cd:	and	al, cl
0x34cf:	jne	0x3f36


0x2e5b:	cmp	dword ptr [rsp + 8], 2
0x2e60:	mov	rdi, qword ptr [rsp + 0x10]
0x2e65:	lea	r9, [rdi + rbp]
0x2e69:	setne	al
0x2e6c:	and	al, byte ptr [rsp + 0xd]
0x2e70:	mov	r10d, eax
0x2e73:	je	0x2f20


0x34d5:	mov	eax, ebx
0x34d7:	xor	eax, 1
0x34da:	and	dl, al
0x34dc:	je	0x3e4c


0x3f36:	mov	dword ptr [rsp + 8], 2
0x3f3e:	jmp	0x38d9


0x2f20:	movzx	ebx, byte ptr [r9]
0x2f24:	cmp	bl, 0x7e
0x2f27:	ja	0x3248


0x2e79:	mov	rax, qword ptr [rsp + 0x18]
0x2e7e:	test	rax, rax
0x2e81:	je	0x32b0


0x3e4c:	mov	rbx, qword ptr [rsp + 0x48]
0x3e51:	test	rbx, rbx
0x3e54:	je	0x3e82


0x34e2:	cmp	byte ptr [rsp + 0x7c], 0
0x34e7:	je	0x3e4a


0x38d9:	cmp	byte ptr [rsp + 0xd], 0
0x38de:	je	0x38f0


0x2f2d:	lea	rcx, [rip + 0x33d8]
0x2f34:	movzx	edx, bl
0x2f37:	movsxd	rax, dword ptr [rcx + rdx*4]
0x2f3b:	add	rax, rcx
0x2f3e:	jmp	rax


0x3248:	cmp	qword ptr [rsp + 0x58], 1
0x324e:	jne	0x35f8


0x32b0:	movzx	ebx, byte ptr [r9]
0x32b4:	cmp	bl, 0x7e
0x32b7:	ja	0x3240


0x2e87:	cmp	r11, -1
0x2e8b:	lea	rbx, [rbp + rax]
0x2e90:	jne	0x2ec0


0x3e82:	cmp	r13, r15
0x3e85:	jbe	0x3929


0x3e56:	test	al, al
0x3e58:	je	0x3e82


0x3e4a:	mov	eax, edx
0x3e4c:	mov	rbx, qword ptr [rsp + 0x48]
0x3e51:	test	rbx, rbx
0x3e54:	je	0x3e82


0x34ed:	cmp	byte ptr [rsp + 0xe], 0
0x34f2:	jne	0x3eed


0x38e0:	test	al, al
0x38e2:	mov	eax, 4
0x38e7:	cmove	eax, dword ptr [rsp + 8]
0x38ec:	mov	dword ptr [rsp + 8], eax


0x3254:	mov	qword ptr [rsp + 0x38], r11
0x3259:	mov	byte ptr [rsp + 0x30], r8b
0x325e:	mov	byte ptr [rsp + 0x28], r10b
0x3263:	call	0x1770


0x35f8:	lea	rax, [rsp + 0xa0]
0x3600:	cmp	r11, -1
0x3604:	mov	qword ptr [rsp + 0xa0], 0
0x3610:	mov	qword ptr [rsp + 0x28], rax
0x3615:	jne	0x3644


0x32b9:	lea	rcx, [rip + 0x3248]
0x32c0:	movzx	edx, bl
0x32c3:	movsxd	rax, dword ptr [rcx + rdx*4]
0x32c7:	add	rax, rcx
0x32ca:	jmp	rax


0x3240:	xor	r10d, r10d
0x3243:	nop	dword ptr [rax + rax]
0x3248:	cmp	qword ptr [rsp + 0x58], 1
0x324e:	jne	0x35f8


0x2e92:	cmp	rax, 1
0x2e96:	jbe	0x2ec0


0x2ec0:	cmp	rbx, r11
0x2ec3:	mov	byte ptr [rsp + 0x28], r10b
0x2ec8:	ja	0x3480


0x3e8b:	mov	byte ptr [r14 + r15], 0
0x3e90:	jmp	0x3929


0x3e5a:	movzx	ecx, byte ptr [rbx]
0x3e5d:	mov	rax, rbx
0x3e60:	test	cl, cl
0x3e62:	je	0x3e82


0x34f8:	test	r13, r13
0x34fb:	sete	al
0x34fe:	cmp	qword ptr [rsp + 0x50], 0
0x3504:	setne	dl
0x3507:	and	al, dl
0x3509:	je	0x3f2c


0x3617:	mov	rdi, qword ptr [rsp + 0x10]
0x361c:	mov	byte ptr [rsp + 0x40], r8b
0x3621:	mov	byte ptr [rsp + 0x38], r10b
0x3626:	mov	qword ptr [rsp + 0x30], r9
0x362b:	call	0x1550


0x3644:	lea	rax, [rsp + 0x9c]
0x364c:	xor	ecx, ecx
0x364e:	mov	byte ptr [rsp + 0x7e], bl
0x3652:	mov	byte ptr [rsp + 0x7d], r8b
0x3657:	mov	rbx, rcx
0x365a:	mov	qword ptr [rsp + 0x88], r9
0x3662:	mov	qword ptr [rsp + 0x38], rax
0x3667:	mov	byte ptr [rsp + 0x7f], r10b
0x366c:	mov	qword ptr [rsp + 0x80], r15
0x3674:	mov	qword ptr [rsp + 0x40], r14
0x3679:	mov	qword ptr [rsp + 0x70], r13
0x367e:	mov	qword ptr [rsp + 0x30], r11
0x3683:	mov	rax, qword ptr [rsp + 0x10]
0x3688:	lea	r14, [rbp + rbx]
0x368d:	mov	rdx, qword ptr [rsp + 0x30]
0x3692:	mov	rcx, qword ptr [rsp + 0x28]
0x3697:	mov	rdi, qword ptr [rsp + 0x38]
0x369c:	lea	r13, [rax + r14]
0x36a0:	sub	rdx, r14
0x36a3:	mov	rsi, r13
0x36a6:	call	0x56b0


0x2e98:	mov	byte ptr [rsp + 0x38], r8b
0x2e9d:	mov	byte ptr [rsp + 0x30], r10b
0x2ea2:	mov	qword ptr [rsp + 0x28], r9
0x2ea7:	call	0x1550


0x2ece:	mov	rdx, qword ptr [rsp + 0x18]
0x2ed3:	mov	rsi, qword ptr [rsp + 0x48]
0x2ed8:	mov	rdi, r9
0x2edb:	mov	qword ptr [rsp + 0x40], r11
0x2ee0:	mov	byte ptr [rsp + 0x38], r8b
0x2ee5:	mov	qword ptr [rsp + 0x30], r9
0x2eea:	call	0x15e0


0x3480:	xor	r10d, r10d
0x3483:	jmp	0x2f20


0x3e64:	mov	rdx, r15
0x3e67:	sub	rax, r15
0x3e6a:	cmp	r13, rdx
0x3e6d:	jbe	0x3e73


0x3f2c:	movzx	eax, byte ptr [rsp + 0x7c]
0x3f31:	jmp	0x3e4c


0x350f:	mov	r13, qword ptr [rsp + 0x50]
0x3514:	lea	rbx, [rip + 0x2d5a]
0x351b:	mov	byte ptr [r14], 0x27
0x351f:	mov	dword ptr [rsp + 8], 2
0x3527:	mov	r15d, 1
0x352d:	mov	qword ptr [rsp + 0x18], 1
0x3536:	mov	byte ptr [rsp + 0xf], 0
0x353b:	mov	qword ptr [rsp + 0x48], rbx
0x3540:	mov	byte ptr [rsp + 0x7c], al
0x3544:	jmp	0x2e23


0x3e73:	add	rdx, 1
0x3e77:	movzx	ecx, byte ptr [rax + rdx]
0x3e7b:	test	cl, cl
0x3e7d:	jne	0x3e6a


0x3e6f:	mov	byte ptr [r14 + rdx], cl
0x3e73:	add	rdx, 1
0x3e77:	movzx	ecx, byte ptr [rax + rdx]
0x3e7b:	test	cl, cl
0x3e7d:	jne	0x3e6a


0x2e23:	xor	r11d, r11d
0x2e26:	mov	rax, rbp
0x2e29:	mov	r8d, r12d
0x2e2c:	mov	rbp, r11
0x2e2f:	mov	r11, rax
0x2e32:	nop	word ptr [rax + rax]
0x2e38:	cmp	r11, rbp
0x2e3b:	setne	r12b
0x2e3f:	cmp	r11, -1
0x2e43:	jne	0x2e52


0x3e7f:	mov	r15, rdx
0x3e82:	cmp	r13, r15
0x3e85:	jbe	0x3929


0x3e6a:	cmp	r13, rdx
0x3e6d:	jbe	0x3e73


0x2eef:	test	eax, eax
0x2ef1:	mov	r9, qword ptr [rsp + 0x30]
0x2ef6:	movzx	r8d, byte ptr [rsp + 0x38]
0x2efc:	mov	r11, qword ptr [rsp + 0x40]
0x2f01:	jne	0x3480


0x2f07:	cmp	byte ptr [rsp + 0xf], 0
0x2f0c:	movzx	r10d, byte ptr [rsp + 0x28]
0x2f12:	jne	0x3e95


0x3e95:	cmp	dword ptr [rsp + 8], 2
0x3e9a:	movzx	ebx, byte ptr [rsp + 0xf]
0x3e9f:	mov	rbp, r11
0x3ea2:	sete	al
0x3ea5:	mov	byte ptr [rsp + 0xd], bl
0x3ea9:	jmp	0x38d9


0x36ab:	test	rax, rax
0x36ae:	mov	r15, rax
0x36b1:	je	0x3701


0x3701:	mov	edx, r12d
0x3704:	mov	rdi, rbx
0x3707:	movzx	r8d, byte ptr [rsp + 0x7d]
0x370d:	xor	edx, 1
0x3710:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3715:	movzx	r10d, byte ptr [rsp + 0x7f]
0x371b:	and	dl, byte ptr [rsp + 0xd]
0x371f:	mov	r15, qword ptr [rsp + 0x80]
0x3727:	mov	r14, qword ptr [rsp + 0x40]
0x372c:	mov	r13, qword ptr [rsp + 0x70]
0x3731:	mov	r11, qword ptr [rsp + 0x30]
0x3736:	cmp	rdi, 1
0x373a:	jbe	0x3d3b


0x36b3:	cmp	rax, -1
0x36b7:	je	0x3cd5


0x3d3b:	mov	eax, edx
0x3d3d:	jmp	0x3297


0x3740:	mov	rcx, rdi
0x3743:	xor	esi, esi
0x3745:	movzx	r9d, byte ptr [rsp + 0xf]
0x374b:	add	rcx, rbp
0x374e:	mov	rdi, qword ptr [rsp + 0x10]
0x3753:	jmp	0x380e


0x3cd5:	mov	rdi, rbx
0x3cd8:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3cde:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3ce3:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3ce9:	mov	r15, qword ptr [rsp + 0x80]
0x3cf1:	xor	r12d, r12d
0x3cf4:	mov	r14, qword ptr [rsp + 0x40]
0x3cf9:	mov	r13, qword ptr [rsp + 0x70]
0x3cfe:	mov	r11, qword ptr [rsp + 0x30]
0x3d03:	movzx	edx, byte ptr [rsp + 0xd]
0x3d08:	jmp	0x3736


0x36bd:	cmp	rax, -2
0x36c1:	je	0x3c61


0x3297:	test	al, al
0x3299:	jne	0x3c31


0x380e:	test	dl, dl
0x3810:	jne	0x3760


0x3736:	cmp	rdi, 1
0x373a:	jbe	0x3d3b


0x3c61:	mov	r11, qword ptr [rsp + 0x30]
0x3c66:	mov	rsi, r14
0x3c69:	mov	rcx, r13
0x3c6c:	mov	rax, rbx
0x3c6f:	mov	rdi, rbx
0x3c72:	movzx	r8d, byte ptr [rsp + 0x7d]
0x3c78:	movzx	ebx, byte ptr [rsp + 0x7e]
0x3c7d:	mov	r9, qword ptr [rsp + 0x88]
0x3c85:	cmp	rsi, r11
0x3c88:	movzx	r10d, byte ptr [rsp + 0x7f]
0x3c8e:	mov	r15, qword ptr [rsp + 0x80]
0x3c96:	mov	r14, qword ptr [rsp + 0x40]
0x3c9b:	mov	r13, qword ptr [rsp + 0x70]
0x3ca0:	jae	0x3cc8


0x36c7:	cmp	dword ptr [rsp + 8], 2
0x36cc:	sete	al
0x36cf:	and	al, byte ptr [rsp + 0xf]
0x36d3:	jne	0x3870


0x329f:	cmp	dword ptr [rsp + 8], 2
0x32a4:	sete	dl
0x32a7:	jmp	0x2f78


0x3c31:	movzx	edx, byte ptr [rsp + 0xd]
0x3c36:	xor	r12d, r12d
0x3c39:	jmp	0x3740


0x3816:	mov	eax, esi
0x3818:	xor	eax, 1
0x381b:	and	eax, r8d
0x381e:	test	r10b, r10b
0x3821:	je	0x3831


0x3760:	cmp	dword ptr [rsp + 8], 2
0x3765:	sete	al
0x3768:	test	r9b, r9b
0x376b:	jne	0x3c20


0x3ca2:	cmp	byte ptr [rcx], 0
0x3ca5:	jne	0x3cb7


0x3cc8:	movzx	edx, byte ptr [rsp + 0xd]
0x3ccd:	xor	r12d, r12d
0x3cd0:	jmp	0x3736


0x36d9:	mov	edi, dword ptr [rsp + 0x9c]
0x36e0:	call	0x1760


0x3870:	cmp	r15, 1
0x3874:	je	0x36d9


0x2f78:	cmp	byte ptr [rsp + 0xd], 1
0x2f7d:	jne	0x3092


0x3831:	add	rbp, 1
0x3835:	cmp	rbp, rcx
0x3838:	jae	0x2fbc


0x3823:	cmp	r13, r15
0x3826:	jbe	0x382d


0x3771:	mov	esi, r8d
0x3774:	xor	esi, 1
0x3777:	and	al, sil
0x377a:	je	0x37ab


0x3c20:	movzx	ebx, byte ptr [rsp + 0xf]
0x3c25:	mov	rbp, r11
0x3c28:	mov	byte ptr [rsp + 0xd], bl
0x3c2c:	jmp	0x38d9


0x3ca7:	jmp	0x3cc8


0x3cb7:	add	rax, 1
0x3cbb:	lea	rdx, [rbp + rax]
0x3cc0:	cmp	r11, rdx
0x3cc3:	ja	0x3cb0


0x387a:	mov	rdi, qword ptr [rsp + 0x10]
0x387f:	lea	rcx, [rdi + r15]
0x3883:	lea	rdx, [rdi + r14 + 1]
0x3888:	lea	r8, [rcx + r14]
0x388c:	jmp	0x389d


0x2f83:	test	dl, dl
0x2f85:	jne	0x3092


0x3092:	cmp	byte ptr [rsp + 0xf], 0
0x3097:	jne	0x2f8b


0x383e:	test	al, al
0x3840:	je	0x3c3e


0x2fbc:	test	al, al
0x2fbe:	je	0x2fe0


0x382d:	add	r15, 1
0x3831:	add	rbp, 1
0x3835:	cmp	rbp, rcx
0x3838:	jae	0x2fbc


0x3828:	mov	byte ptr [r14 + r15], 0x5c
0x382d:	add	r15, 1
0x3831:	add	rbp, 1
0x3835:	cmp	rbp, rcx
0x3838:	jae	0x2fbc


0x37ab:	cmp	r13, r15
0x37ae:	jbe	0x37b5


0x377c:	cmp	r13, r15
0x377f:	jbe	0x3786


0x3cc5:	mov	rdi, rax
0x3cc8:	movzx	edx, byte ptr [rsp + 0xd]
0x3ccd:	xor	r12d, r12d
0x3cd0:	jmp	0x3736


0x3cb0:	cmp	byte ptr [r9 + rax], 0
0x3cb5:	je	0x3cc5


0x389d:	movzx	ecx, byte ptr [rdx]
0x38a0:	sub	ecx, 0x5b
0x38a3:	cmp	cl, 0x21
0x38a6:	ja	0x3890


0x2f8b:	mov	rsi, qword ptr [rsp + 0x20]
0x2f90:	test	rsi, rsi
0x2f93:	je	0x2fa9


0x309d:	jmp	0x2fa9


0x3c3e:	xor	r10d, r10d
0x3c41:	jmp	0x37fd


0x3846:	cmp	r13, r15
0x3849:	jbe	0x3850


0x2fe0:	cmp	r15, r13
0x2fe3:	jae	0x2fe9


0x2fc0:	cmp	r13, r15
0x2fc3:	jbe	0x2fca


0x37b5:	lea	rax, [r15 + 1]
0x37b9:	cmp	r13, rax
0x37bc:	jbe	0x37cb


0x37b0:	mov	byte ptr [r14 + r15], 0x5c
0x37b5:	lea	rax, [r15 + 1]
0x37b9:	cmp	r13, rax
0x37bc:	jbe	0x37cb


0x3786:	lea	rsi, [r15 + 1]
0x378a:	cmp	r13, rsi
0x378d:	jbe	0x3795


0x3781:	mov	byte ptr [r14 + r15], 0x27
0x3786:	lea	rsi, [r15 + 1]
0x378a:	cmp	r13, rsi
0x378d:	jbe	0x3795


0x38a8:	mov	esi, 1
0x38ad:	shl	rsi, cl
0x38b0:	mov	rcx, rsi
0x38b3:	movabs	rsi, 0x20000002b
0x38bd:	test	rcx, rsi
0x38c0:	je	0x3890


0x3890:	add	rdx, 1
0x3894:	cmp	r8, rdx
0x3897:	je	0x36d9


0x2fa9:	test	r10b, r10b
0x2fac:	jne	0x30f3


0x2f95:	mov	edx, ebx
0x2f97:	shr	dl, 5
0x2f9a:	movzx	edx, dl
0x2f9d:	mov	edx, dword ptr [rsi + rdx*4]
0x2fa0:	bt	edx, ebx
0x2fa3:	jb	0x30f3


0x37fd:	cmp	r13, r15
0x3800:	jbe	0x3806


0x3850:	lea	rax, [r15 + 1]
0x3854:	cmp	r13, rax
0x3857:	jbe	0x385f


0x384b:	mov	byte ptr [r14 + r15], 0x27
0x3850:	lea	rax, [r15 + 1]
0x3854:	cmp	r13, rax
0x3857:	jbe	0x385f


0x2fe5:	mov	byte ptr [r14 + r15], bl
0x2fe9:	movzx	edi, byte ptr [rsp + 0xe]
0x2fee:	add	r15, 1
0x2ff2:	mov	eax, 0
0x2ff7:	test	r12b, r12b
0x2ffa:	cmove	edi, eax
0x2ffd:	mov	byte ptr [rsp + 0xe], dil
0x3002:	jmp	0x2e38


0x2fe9:	movzx	edi, byte ptr [rsp + 0xe]
0x2fee:	add	r15, 1
0x2ff2:	mov	eax, 0
0x2ff7:	test	r12b, r12b
0x2ffa:	cmove	edi, eax
0x2ffd:	mov	byte ptr [rsp + 0xe], dil
0x3002:	jmp	0x2e38


0x2fca:	lea	rax, [r15 + 1]
0x2fce:	cmp	r13, rax
0x2fd1:	jbe	0x2fd9


0x2fc5:	mov	byte ptr [r14 + r15], 0x27
0x2fca:	lea	rax, [r15 + 1]
0x2fce:	cmp	r13, rax
0x2fd1:	jbe	0x2fd9


0x37cb:	lea	rax, [r15 + 2]
0x37cf:	cmp	r13, rax
0x37d2:	jbe	0x37e4


0x37be:	mov	eax, ebx
0x37c0:	shr	al, 6
0x37c3:	add	eax, 0x30
0x37c6:	mov	byte ptr [r14 + r15 + 1], al
0x37cb:	lea	rax, [r15 + 2]
0x37cf:	cmp	r13, rax
0x37d2:	jbe	0x37e4


0x3795:	lea	rsi, [r15 + 2]
0x3799:	cmp	r13, rsi
0x379c:	jbe	0x37a4


0x378f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x3795:	lea	rsi, [r15 + 2]
0x3799:	cmp	r13, rsi
0x379c:	jbe	0x37a4


0x38c2:	mov	r14, qword ptr [rsp + 0x40]
0x38c7:	mov	r13, qword ptr [rsp + 0x70]
0x38cc:	mov	rbp, qword ptr [rsp + 0x30]
0x38d1:	mov	dword ptr [rsp + 8], 2
0x38d9:	cmp	byte ptr [rsp + 0xd], 0
0x38de:	je	0x38f0


0x2fb2:	xor	eax, 1
0x2fb5:	add	rbp, 1
0x2fb9:	and	eax, r8d
0x2fbc:	test	al, al
0x2fbe:	je	0x2fe0


0x30f3:	cmp	dword ptr [rsp + 8], 2
0x30f8:	sete	dl
0x30fb:	cmp	byte ptr [rsp + 0xf], 0
0x3100:	mov	eax, edx
0x3102:	jne	0x3958


0x3806:	movzx	ebx, byte ptr [rdi + rbp]
0x380a:	add	r15, 1
0x380e:	test	dl, dl
0x3810:	jne	0x3760


0x3802:	mov	byte ptr [r14 + r15], bl
0x3806:	movzx	ebx, byte ptr [rdi + rbp]
0x380a:	add	r15, 1
0x380e:	test	dl, dl
0x3810:	jne	0x3760


0x385f:	add	r15, 2
0x3863:	xor	r10d, r10d
0x3866:	xor	r8d, r8d
0x3869:	jmp	0x37fd


0x3859:	mov	byte ptr [r14 + r15 + 1], 0x27
0x385f:	add	r15, 2
0x3863:	xor	r10d, r10d
0x3866:	xor	r8d, r8d
0x3869:	jmp	0x37fd


0x2e38:	cmp	r11, rbp
0x2e3b:	setne	r12b
0x2e3f:	cmp	r11, -1
0x2e43:	jne	0x2e52


0x2fd9:	add	r15, 2
0x2fdd:	xor	r8d, r8d
0x2fe0:	cmp	r15, r13
0x2fe3:	jae	0x2fe9


0x2fd3:	mov	byte ptr [r14 + r15 + 1], 0x27
0x2fd9:	add	r15, 2
0x2fdd:	xor	r8d, r8d
0x2fe0:	cmp	r15, r13
0x2fe3:	jae	0x2fe9


0x37e4:	and	ebx, 7
0x37e7:	add	rbp, 1
0x37eb:	add	r15, 3
0x37ef:	add	ebx, 0x30
0x37f2:	cmp	rbp, rcx
0x37f5:	jae	0x2fe0


0x37d4:	mov	eax, ebx
0x37d6:	shr	al, 3
0x37d9:	and	eax, 7
0x37dc:	add	eax, 0x30
0x37df:	mov	byte ptr [r14 + r15 + 2], al
0x37e4:	and	ebx, 7
0x37e7:	add	rbp, 1
0x37eb:	add	r15, 3
0x37ef:	add	ebx, 0x30
0x37f2:	cmp	rbp, rcx
0x37f5:	jae	0x2fe0


0x37a4:	add	r15, 3
0x37a8:	mov	r8d, eax
0x37ab:	cmp	r13, r15
0x37ae:	jbe	0x37b5


0x379e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x37a4:	add	r15, 3
0x37a8:	mov	r8d, eax
0x37ab:	cmp	r13, r15
0x37ae:	jbe	0x37b5


0x3108:	mov	eax, r8d
0x310b:	xor	eax, 1
0x310e:	and	al, dl
0x3110:	je	0x3141


0x3958:	mov	rbp, r11
0x395b:	jmp	0x38d9


0x37fb:	mov	esi, edx
0x37fd:	cmp	r13, r15
0x3800:	jbe	0x3806


0x3141:	cmp	r13, r15
0x3144:	jbe	0x314b


0x3112:	cmp	r13, r15
0x3115:	jbe	0x311c


0x314b:	add	r15, 1
0x314f:	add	rbp, 1
0x3153:	jmp	0x2fe0


0x3146:	mov	byte ptr [r14 + r15], 0x5c
0x314b:	add	r15, 1
0x314f:	add	rbp, 1
0x3153:	jmp	0x2fe0


0x311c:	lea	rdx, [r15 + 1]
0x3120:	cmp	r13, rdx
0x3123:	jbe	0x312b


0x3117:	mov	byte ptr [r14 + r15], 0x27
0x311c:	lea	rdx, [r15 + 1]
0x3120:	cmp	r13, rdx
0x3123:	jbe	0x312b


0x312b:	lea	rdx, [r15 + 2]
0x312f:	cmp	r13, rdx
0x3132:	jbe	0x313a


0x3125:	mov	byte ptr [r14 + r15 + 1], 0x24
0x312b:	lea	rdx, [r15 + 2]
0x312f:	cmp	r13, rdx
0x3132:	jbe	0x313a


0x313a:	add	r15, 3
0x313e:	mov	r8d, eax
0x3141:	cmp	r13, r15
0x3144:	jbe	0x314b


0x3134:	mov	byte ptr [r14 + r15 + 2], 0x27
0x313a:	add	r15, 3
0x313e:	mov	r8d, eax
0x3141:	cmp	r13, r15
0x3144:	jbe	0x314b


0x36e5:	mov	rdi, qword ptr [rsp + 0x28]
0x36ea:	test	eax, eax
0x36ec:	mov	eax, 0
0x36f1:	cmove	r12d, eax
0x36f5:	add	rbx, r15
0x36f8:	call	0x1750


0x36fd:	test	eax, eax
0x36ff:	je	0x3683


0x3683:	mov	rax, qword ptr [rsp + 0x10]
0x3688:	lea	r14, [rbp + rbx]
0x368d:	mov	rdx, qword ptr [rsp + 0x30]
0x3692:	mov	rcx, qword ptr [rsp + 0x28]
0x3697:	mov	rdi, qword ptr [rsp + 0x38]
0x369c:	lea	r13, [rax + r14]
0x36a0:	sub	rdx, r14
0x36a3:	mov	rsi, r13
0x36a6:	call	0x56b0


0x2eac:	movzx	r8d, byte ptr [rsp + 0x38]
0x2eb2:	movzx	r10d, byte ptr [rsp + 0x30]
0x2eb8:	mov	r11, rax
0x2ebb:	mov	r9, qword ptr [rsp + 0x28]
0x2ec0:	cmp	rbx, r11
0x2ec3:	mov	byte ptr [rsp + 0x28], r10b
0x2ec8:	ja	0x3480


0x3630:	movzx	r8d, byte ptr [rsp + 0x40]
0x3636:	movzx	r10d, byte ptr [rsp + 0x38]
0x363c:	mov	r11, rax
0x363f:	mov	r9, qword ptr [rsp + 0x30]
0x3644:	lea	rax, [rsp + 0x9c]
0x364c:	xor	ecx, ecx
0x364e:	mov	byte ptr [rsp + 0x7e], bl
0x3652:	mov	byte ptr [rsp + 0x7d], r8b
0x3657:	mov	rbx, rcx
0x365a:	mov	qword ptr [rsp + 0x88], r9
0x3662:	mov	qword ptr [rsp + 0x38], rax
0x3667:	mov	byte ptr [rsp + 0x7f], r10b
0x366c:	mov	qword ptr [rsp + 0x80], r15
0x3674:	mov	qword ptr [rsp + 0x40], r14
0x3679:	mov	qword ptr [rsp + 0x70], r13
0x367e:	mov	qword ptr [rsp + 0x30], r11
0x3683:	mov	rax, qword ptr [rsp + 0x10]
0x3688:	lea	r14, [rbp + rbx]
0x368d:	mov	rdx, qword ptr [rsp + 0x30]
0x3692:	mov	rcx, qword ptr [rsp + 0x28]
0x3697:	mov	rdi, qword ptr [rsp + 0x38]
0x369c:	lea	r13, [rax + r14]
0x36a0:	sub	rdx, r14
0x36a3:	mov	rsi, r13
0x36a6:	call	0x56b0


0x3268:	mov	rcx, qword ptr [rax]
0x326b:	movzx	edx, bl
0x326e:	movzx	r10d, byte ptr [rsp + 0x28]
0x3274:	movzx	r8d, byte ptr [rsp + 0x30]
0x327a:	mov	r11, qword ptr [rsp + 0x38]
0x327f:	mov	edi, 1
0x3284:	movzx	eax, word ptr [rcx + rdx*2]
0x3288:	and	ax, 0x4000
0x328c:	setne	r12b
0x3290:	sete	al
0x3293:	and	al, byte ptr [rsp + 0xd]
0x3297:	test	al, al
0x3299:	jne	0x3c31


0x2f40:	xor	r10d, r10d
0x2f43:	cmp	r11, 1
0x2f47:	setne	al
0x2f4a:	cmp	r11, -1
0x2f4e:	jne	0x2f5c


0x2f50:	mov	rax, qword ptr [rsp + 0x10]
0x2f55:	cmp	byte ptr [rax + 1], 0
0x2f59:	setne	al
0x2f5c:	cmp	dword ptr [rsp + 8], 2
0x2f61:	sete	dl
0x2f64:	test	al, al
0x2f66:	je	0x31b8


0x2f5c:	cmp	dword ptr [rsp + 8], 2
0x2f61:	sete	dl
0x2f64:	test	al, al
0x2f66:	je	0x31b8


0x31b8:	test	rbp, rbp
0x31bb:	jne	0x2f6c


0x2f6c:	xor	r12d, r12d
0x2f6f:	xor	eax, eax
0x2f71:	nop	dword ptr [rax]
0x2f78:	cmp	byte ptr [rsp + 0xd], 1
0x2f7d:	jne	0x3092


0x31c1:	movzx	eax, byte ptr [rsp + 0xf]
0x31c6:	and	al, dl
0x31c8:	je	0x2f78


0x31ce:	mov	rbp, r11
0x31d1:	mov	dword ptr [rsp + 8], 2
0x31d9:	jmp	0x38d9


0x35d8:	cmp	byte ptr [rsp + 0xf], 0
0x35dd:	jne	0x3e00


0x3020:	cmp	eax, 5
0x3023:	je	0x3598


0x35e3:	xor	r12d, r12d
0x35e6:	xor	eax, eax
0x35e8:	mov	ebx, 0x3f
0x35ed:	jmp	0x2fa9


0x3e00:	mov	rbp, r11
0x3e03:	movzx	eax, byte ptr [rsp + 0xf]
0x3e08:	jmp	0x38d9


0x3598:	test	byte ptr [rsp + 0x78], 4
0x359d:	je	0x35c0


0x3029:	cmp	eax, 2
0x302c:	mov	ebx, 0x3f
0x3031:	sete	dl
0x3034:	xor	r12d, r12d
0x3037:	xor	eax, eax
0x3039:	jmp	0x2f78


0x35c0:	xor	edx, edx
0x35c2:	xor	r12d, r12d
0x35c5:	xor	eax, eax
0x35c7:	mov	ebx, 0x3f
0x35cc:	jmp	0x2f78


0x359f:	lea	rcx, [rbp + 2]
0x35a3:	cmp	rcx, r11
0x35a6:	jae	0x35c0


0x35a8:	mov	rax, qword ptr [rsp + 0x10]
0x35ad:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x35b2:	je	0x3d42


0x3d42:	movzx	ebx, byte ptr [rax + rcx]
0x3d46:	cmp	bl, 0x3e
0x3d49:	ja	0x35c0


0x3d4f:	movabs	rax, 0x7000a38200000000
0x3d59:	bt	rax, rbx
0x3d5d:	jae	0x35c0


0x3d63:	cmp	byte ptr [rsp + 0xf], 0
0x3d68:	jne	0x3f52


0x3d6e:	cmp	r13, r15
0x3d71:	jbe	0x3d78


0x3f52:	mov	rbp, r11
0x3f55:	jmp	0x38f0


0x3d78:	lea	rax, [r15 + 1]
0x3d7c:	cmp	r13, rax
0x3d7f:	jbe	0x3d87


0x3d73:	mov	byte ptr [r14 + r15], 0x3f
0x3d78:	lea	rax, [r15 + 1]
0x3d7c:	cmp	r13, rax
0x3d7f:	jbe	0x3d87


0x3d87:	lea	rax, [r15 + 2]
0x3d8b:	cmp	r13, rax
0x3d8e:	jbe	0x3d96


0x3d81:	mov	byte ptr [r14 + r15 + 1], 0x22
0x3d87:	lea	rax, [r15 + 2]
0x3d8b:	cmp	r13, rax
0x3d8e:	jbe	0x3d96


0x3d96:	lea	rax, [r15 + 3]
0x3d9a:	cmp	r13, rax
0x3d9d:	jbe	0x3da5


0x3d90:	mov	byte ptr [r14 + r15 + 2], 0x22
0x3d96:	lea	rax, [r15 + 3]
0x3d9a:	cmp	r13, rax
0x3d9d:	jbe	0x3da5


0x3da5:	add	r15, 4
0x3da9:	xor	edx, edx
0x3dab:	xor	r12d, r12d
0x3dae:	xor	eax, eax
0x3db0:	mov	rbp, rcx
0x3db3:	jmp	0x2f78


0x3d9f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x3da5:	add	r15, 4
0x3da9:	xor	edx, edx
0x3dab:	xor	r12d, r12d
0x3dae:	xor	eax, eax
0x3db0:	mov	rbp, rcx
0x3db3:	jmp	0x2f78


0x3550:	cmp	byte ptr [rsp + 0xf], 0
0x3555:	jne	0x3e00


0x304e:	mov	byte ptr [rsp + 0x7c], r12b
0x3053:	xor	edx, edx
0x3055:	xor	eax, eax
0x3057:	mov	ebx, 0x27
0x305c:	jmp	0x2f78


0x355b:	test	r13, r13
0x355e:	je	0x3960


0x3960:	cmp	r13, r15
0x3963:	jbe	0x396a


0x3564:	xor	edx, edx
0x3566:	cmp	qword ptr [rsp + 0x50], 0
0x356c:	jne	0x3960


0x396a:	lea	rax, [r15 + 1]
0x396e:	cmp	r13, rax
0x3971:	jbe	0x3979


0x3965:	mov	byte ptr [r14 + r15], 0x27
0x396a:	lea	rax, [r15 + 1]
0x396e:	cmp	r13, rax
0x3971:	jbe	0x3979


0x3572:	mov	qword ptr [rsp + 0x50], r13
0x3577:	add	r15, 3
0x357b:	xor	eax, eax
0x357d:	mov	byte ptr [rsp + 0x7c], r12b
0x3582:	xor	r8d, r8d
0x3585:	mov	r13, rdx
0x3588:	mov	ebx, 0x27
0x358d:	jmp	0x2fa9


0x3979:	lea	rax, [r15 + 2]
0x397d:	cmp	r13, rax
0x3980:	jbe	0x3f72


0x3973:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x3979:	lea	rax, [r15 + 2]
0x397d:	cmp	r13, rax
0x3980:	jbe	0x3f72


0x3f72:	mov	rdx, r13
0x3f75:	mov	r13, qword ptr [rsp + 0x50]
0x3f7a:	jmp	0x3572


0x3986:	mov	rdx, r13
0x3989:	mov	byte ptr [r14 + r15 + 2], 0x27
0x398f:	mov	r13, qword ptr [rsp + 0x50]
0x3994:	jmp	0x3572


0x3084:	cmp	byte ptr [rsp + 0xd], 0
0x3089:	jne	0x30f0


0x308b:	mov	ebx, edx
0x308d:	xor	r12d, r12d
0x3090:	xor	eax, eax
0x3092:	cmp	byte ptr [rsp + 0xf], 0
0x3097:	jne	0x2f8b


0x30f0:	xor	r12d, r12d
0x30f3:	cmp	dword ptr [rsp + 8], 2
0x30f8:	sete	dl
0x30fb:	cmp	byte ptr [rsp + 0xf], 0
0x3100:	mov	eax, edx
0x3102:	jne	0x3958


0x3490:	cmp	byte ptr [rsp + 0xf], 0
0x3495:	jne	0x3e00


0x30c3:	cmp	byte ptr [rsp + 0xd], 0
0x30c8:	je	0x32e0


0x349b:	add	rbp, 1
0x349f:	mov	eax, r8d
0x34a2:	xor	r12d, r12d
0x34a5:	mov	ebx, 0x5c
0x34aa:	jmp	0x2fbc


0x32e0:	mov	edx, 0x5c
0x32e5:	mov	ebx, 0x5c
0x32ea:	jmp	0x3084


0x30ce:	cmp	byte ptr [rsp + 0xf], 0
0x30d3:	je	0x32e0


0x30d9:	cmp	qword ptr [rsp + 0x18], 0
0x30df:	jne	0x349b


0x30e5:	mov	ebx, 0x5c
0x30ea:	nop	word ptr [rax + rax]
0x30f0:	xor	r12d, r12d
0x30f3:	cmp	dword ptr [rsp + 8], 2
0x30f8:	sete	dl
0x30fb:	cmp	byte ptr [rsp + 0xf], 0
0x3100:	mov	eax, edx
0x3102:	jne	0x3958


0x316b:	xor	edx, edx
0x316d:	test	byte ptr [rsp + 0x78], 1
0x3172:	je	0x308b


0x3333:	cmp	dword ptr [rsp + 8], 2
0x3338:	sete	dl
0x333b:	cmp	byte ptr [rsp + 0xf], 0
0x3340:	jne	0x3eda


0x3178:	add	rbp, 1
0x317c:	jmp	0x2e38


0x3346:	mov	eax, r8d
0x3349:	mov	rcx, r15
0x334c:	xor	eax, 1
0x334f:	and	al, dl
0x3351:	je	0x3380


0x3eda:	movzx	ebx, byte ptr [rsp + 0xf]
0x3edf:	mov	rbp, r11
0x3ee2:	mov	eax, edx
0x3ee4:	mov	byte ptr [rsp + 0xd], bl
0x3ee8:	jmp	0x38d9


0x3380:	cmp	r13, rcx
0x3383:	jbe	0x338a


0x3353:	cmp	r13, r15
0x3356:	jbe	0x335d


0x338a:	cmp	dword ptr [rsp + 8], 2
0x338f:	lea	r15, [rcx + 1]
0x3393:	je	0x3999


0x3385:	mov	byte ptr [r14 + rcx], 0x5c
0x338a:	cmp	dword ptr [rsp + 8], 2
0x338f:	lea	r15, [rcx + 1]
0x3393:	je	0x3999


0x335d:	lea	rcx, [r15 + 1]
0x3361:	cmp	r13, rcx
0x3364:	jbe	0x336c


0x3358:	mov	byte ptr [r14 + r15], 0x27
0x335d:	lea	rcx, [r15 + 1]
0x3361:	cmp	r13, rcx
0x3364:	jbe	0x336c


0x3999:	mov	eax, r12d
0x399c:	mov	ebx, 0x30
0x39a1:	xor	r12d, r12d
0x39a4:	jmp	0x2fa9


0x3399:	lea	rax, [rbp + 1]
0x339d:	cmp	rax, r11
0x33a0:	jae	0x33bb


0x336c:	lea	rcx, [r15 + 2]
0x3370:	cmp	r13, rcx
0x3373:	ja	0x39a9


0x3366:	mov	byte ptr [r14 + r15 + 1], 0x24
0x336c:	lea	rcx, [r15 + 2]
0x3370:	cmp	r13, rcx
0x3373:	ja	0x39a9


0x33a2:	mov	rax, qword ptr [rsp + 0x10]
0x33a7:	movzx	eax, byte ptr [rax + rbp + 1]
0x33ac:	mov	byte ptr [rsp + 0x28], al
0x33b0:	sub	eax, 0x30
0x33b3:	cmp	al, 9
0x33b5:	jbe	0x3be9


0x33bb:	mov	eax, r12d
0x33be:	mov	ebx, 0x30
0x33c3:	xor	r12d, r12d
0x33c6:	jmp	0x2f78


0x3379:	lea	rcx, [r15 + 3]
0x337d:	mov	r8d, eax
0x3380:	cmp	r13, rcx
0x3383:	jbe	0x338a


0x39a9:	mov	byte ptr [r14 + r15 + 2], 0x27
0x39af:	jmp	0x3379


0x3be9:	cmp	r13, r15
0x3bec:	jbe	0x3bf3


0x3bf3:	lea	rax, [rcx + 2]
0x3bf7:	cmp	r13, rax
0x3bfa:	jbe	0x3c02


0x3bee:	mov	byte ptr [r14 + r15], 0x30
0x3bf3:	lea	rax, [rcx + 2]
0x3bf7:	cmp	r13, rax
0x3bfa:	jbe	0x3c02


0x3c02:	mov	eax, r12d
0x3c05:	lea	r15, [rcx + 3]
0x3c09:	xor	r12d, r12d
0x3c0c:	mov	ebx, 0x30
0x3c11:	jmp	0x2f78


0x3bfc:	mov	byte ptr [r14 + rcx + 2], 0x30
0x3c02:	mov	eax, r12d
0x3c05:	lea	r15, [rcx + 3]
0x3c09:	xor	r12d, r12d
0x3c0c:	mov	ebx, 0x30
0x3c11:	jmp	0x2f78


0x3072:	cmp	dword ptr [rsp + 8], 2
0x3077:	sete	al
0x307a:	and	al, byte ptr [rsp + 0xf]
0x307e:	jne	0x31ce


0x3430:	mov	edx, 0xd
0x3435:	xor	r10d, r10d
0x3438:	mov	ebx, 0x72
0x343d:	jmp	0x3072


0x39b4:	test	ebx, ebx
0x39b6:	jne	0x2de3


0x39bc:	mov	byte ptr [rsp + 0xd], 1
0x39c1:	test	r13, r13
0x39c4:	jne	0x3f5a


0x39ca:	lea	rax, [rip + 0x28a4]
0x39d1:	mov	qword ptr [rsp + 0x50], 0
0x39da:	mov	byte ptr [rsp + 0xe], 1
0x39df:	mov	byte ptr [rsp + 0x7c], 0
0x39e4:	xor	r12d, r12d
0x39e7:	mov	byte ptr [rsp + 0xf], 0
0x39ec:	mov	qword ptr [rsp + 0x18], 1
0x39f5:	mov	qword ptr [rsp + 0x48], rax
0x39fa:	mov	r15d, 1
0x3a00:	mov	dword ptr [rsp + 8], 2
0x3a08:	jmp	0x2e23


0x3f5a:	mov	byte ptr [rsp + 0xe], 1
0x3f5f:	xor	eax, eax
0x3f61:	xor	r12d, r12d
0x3f64:	mov	qword ptr [rsp + 0x50], 0
0x3f6d:	jmp	0x3514


0x3514:	lea	rbx, [rip + 0x2d5a]
0x351b:	mov	byte ptr [r14], 0x27
0x351f:	mov	dword ptr [rsp + 8], 2
0x3527:	mov	r15d, 1
0x352d:	mov	qword ptr [rsp + 0x18], 1
0x3536:	mov	byte ptr [rsp + 0xf], 0
0x353b:	mov	qword ptr [rsp + 0x48], rbx
0x3540:	mov	byte ptr [rsp + 0x7c], al
0x3544:	jmp	0x2e23


0x3a18:	test	r13, r13
0x3a1b:	je	0x3c46


0x3e0d:	lea	rax, [rip + 0x245f]
0x3e14:	mov	byte ptr [rsp + 0xe], 1
0x3e19:	mov	byte ptr [rsp + 0x7c], 0
0x3e1e:	xor	r12d, r12d
0x3e21:	mov	qword ptr [rsp + 0x50], 0
0x3e2a:	mov	byte ptr [rsp + 0xf], 1
0x3e2f:	mov	byte ptr [rsp + 0xd], 1
0x3e34:	mov	qword ptr [rsp + 0x18], 1
0x3e3d:	xor	r15d, r15d
0x3e40:	mov	qword ptr [rsp + 0x48], rax
0x3e45:	jmp	0x2e23


0x3c46:	mov	qword ptr [rsp + 0x50], 0
0x3c4f:	mov	byte ptr [rsp + 0xe], 1
0x3c54:	xor	r12d, r12d
0x3c57:	mov	byte ptr [rsp + 0x7c], 0
0x3c5c:	jmp	0x3a3b


0x3a21:	mov	byte ptr [r14], 0x22
0x3a25:	mov	byte ptr [rsp + 0xe], 1
0x3a2a:	xor	r12d, r12d
0x3a2d:	mov	byte ptr [rsp + 0x7c], 0
0x3a32:	mov	qword ptr [rsp + 0x50], 0
0x3a3b:	lea	rax, [rip + 0x2831]
0x3a42:	mov	byte ptr [rsp + 0xf], 0
0x3a47:	mov	byte ptr [rsp + 0xd], 1
0x3a4c:	mov	qword ptr [rsp + 0x18], 1
0x3a55:	mov	r15d, 1
0x3a5b:	mov	qword ptr [rsp + 0x48], rax
0x3a60:	jmp	0x2e23


0x3a3b:	lea	rax, [rip + 0x2831]
0x3a42:	mov	byte ptr [rsp + 0xf], 0
0x3a47:	mov	byte ptr [rsp + 0xd], 1
0x3a4c:	mov	qword ptr [rsp + 0x18], 1
0x3a55:	mov	r15d, 1
0x3a5b:	mov	qword ptr [rsp + 0x48], rax
0x3a60:	jmp	0x2e23


0x3a65:	lea	rax, [rip + 0x2807]
0x3a6c:	mov	byte ptr [rsp + 0xe], 1
0x3a71:	mov	byte ptr [rsp + 0x7c], 0
0x3a76:	xor	r12d, r12d
0x3a79:	mov	qword ptr [rsp + 0x50], 0
0x3a82:	mov	byte ptr [rsp + 0xf], 1
0x3a87:	mov	byte ptr [rsp + 0xd], 1
0x3a8c:	mov	qword ptr [rsp + 0x18], 1
0x3a95:	xor	r15d, r15d
0x3a98:	mov	qword ptr [rsp + 0x48], rax
0x3a9d:	mov	dword ptr [rsp + 8], 5
0x3aa5:	jmp	0x2e23


0x3aaa:	mov	byte ptr [rsp + 0xe], 1
0x3aaf:	mov	byte ptr [rsp + 0x7c], 0
0x3ab4:	xor	r12d, r12d
0x3ab7:	mov	qword ptr [rsp + 0x50], 0
0x3ac0:	mov	byte ptr [rsp + 0xf], 0
0x3ac5:	xor	r15d, r15d
0x3ac8:	mov	byte ptr [rsp + 0xd], 1
0x3acd:	mov	qword ptr [rsp + 0x18], 0
0x3ad6:	mov	qword ptr [rsp + 0x48], 0
0x3adf:	jmp	0x2e23


0x3ae4:	cmp	dword ptr [rsp + 8], 0xa
0x3ae9:	je	0x3b41


0x3b41:	xor	r15d, r15d
0x3b44:	test	ebx, ebx
0x3b46:	je	0x3d0d


0x3aeb:	lea	rsi, [rip + 0x2785]
0x3af2:	xor	edi, edi
0x3af4:	mov	edx, 5
0x3af9:	call	0x1530


0x3d0d:	mov	rdx, qword ptr [rsp + 0x68]
0x3d12:	movzx	eax, byte ptr [rdx]
0x3d15:	test	al, al
0x3d17:	je	0x3b4c


0x3b4c:	test	ebx, ebx
0x3b4e:	mov	rbx, qword ptr [rsp + 0x60]
0x3b53:	setne	byte ptr [rsp + 0xf]
0x3b58:	xor	r12d, r12d
0x3b5b:	mov	rdi, rbx
0x3b5e:	call	0x1550


0x3d29:	add	r15, 1
0x3d2d:	movzx	eax, byte ptr [rdx + r15]
0x3d32:	test	al, al
0x3d34:	jne	0x3d20


0x3d25:	mov	byte ptr [r14 + r15], al
0x3d29:	add	r15, 1
0x3d2d:	movzx	eax, byte ptr [rdx + r15]
0x3d32:	test	al, al
0x3d34:	jne	0x3d20


0x3d36:	jmp	0x3b4c


0x3d20:	cmp	r13, r15
0x3d23:	jbe	0x3d29


0x3b63:	mov	qword ptr [rsp + 0x48], rbx
0x3b68:	mov	qword ptr [rsp + 0x18], rax
0x3b6d:	mov	byte ptr [rsp + 0xe], 1
0x3b72:	mov	byte ptr [rsp + 0x7c], 0
0x3b77:	mov	qword ptr [rsp + 0x50], 0
0x3b80:	mov	byte ptr [rsp + 0xd], 1
0x3b85:	jmp	0x2e23


0x3afe:	mov	rcx, rax
0x3b01:	mov	qword ptr [rsp + 0x68], rax
0x3b06:	lea	rax, [rip + 0x276a]
0x3b0d:	cmp	rcx, rax
0x3b10:	je	0x3eae


0x3eae:	mov	esi, dword ptr [rsp + 8]
0x3eb2:	mov	rdi, rcx
0x3eb5:	call	0x2c60


0x3b16:	lea	rsi, [rip + 0x2758]
0x3b1d:	xor	edi, edi
0x3b1f:	mov	edx, 5
0x3b24:	call	0x1530


0x3b29:	mov	rcx, rax
0x3b2c:	mov	qword ptr [rsp + 0x60], rax
0x3b31:	lea	rax, [rip + 0x273d]
0x3b38:	cmp	rcx, rax
0x3b3b:	je	0x3ec4


0x3ec4:	mov	esi, dword ptr [rsp + 8]
0x3ec8:	mov	rdi, rcx
0x3ecb:	call	0x2c60


0x3ed0:	mov	qword ptr [rsp + 0x60], rax
0x3ed5:	jmp	0x3b41


0x3eba:	mov	qword ptr [rsp + 0x68], rax
0x3ebf:	jmp	0x3b16


0x3b8a:	mov	byte ptr [rsp + 0xe], 1
0x3b8f:	mov	byte ptr [rsp + 0x7c], 0
0x3b94:	xor	r12d, r12d
0x3b97:	mov	qword ptr [rsp + 0x50], 0
0x3ba0:	mov	byte ptr [rsp + 0xf], 0
0x3ba5:	xor	r15d, r15d
0x3ba8:	mov	byte ptr [rsp + 0xd], 0
0x3bad:	mov	qword ptr [rsp + 0x18], 0
0x3bb6:	mov	qword ptr [rsp + 0x48], 0
0x3bbf:	jmp	0x2e23


0x3bc4:	mov	byte ptr [rsp + 0xe], 1
0x3bc9:	mov	byte ptr [rsp + 0x7c], 0
0x3bce:	xor	r12d, r12d
0x3bd1:	mov	qword ptr [rsp + 0x50], 0
0x3bda:	mov	byte ptr [rsp + 0xf], 1
0x3bdf:	mov	byte ptr [rsp + 0xd], 1
0x3be4:	jmp	0x2e03


0x2e03:	lea	rax, [rip + 0x346b]
0x2e0a:	mov	qword ptr [rsp + 0x18], 1
0x2e13:	xor	r15d, r15d
0x2e16:	mov	dword ptr [rsp + 8], 2
0x2e1e:	mov	qword ptr [rsp + 0x48], rax
0x2e23:	xor	r11d, r11d
0x2e26:	mov	rax, rbp
0x2e29:	mov	r8d, r12d
0x2e2c:	mov	rbp, r11
0x2e2f:	mov	r11, rax
0x2e32:	nop	word ptr [rax + rax]
0x2e38:	cmp	r11, rbp
0x2e3b:	setne	r12b
0x2e3f:	cmp	r11, -1
0x2e43:	jne	0x2e52


0x3db8:	test	ebx, ebx
0x3dba:	je	0x3f48


0x3f48:	mov	byte ptr [rsp + 0xd], 0
0x3f4d:	jmp	0x39c1


0x3dc0:	lea	rax, [rip + 0x24ae]
0x3dc7:	mov	byte ptr [rsp + 0xe], 1
0x3dcc:	mov	byte ptr [rsp + 0x7c], 0
0x3dd1:	xor	r12d, r12d
0x3dd4:	mov	qword ptr [rsp + 0x50], 0
0x3ddd:	mov	byte ptr [rsp + 0xf], 1
0x3de2:	mov	byte ptr [rsp + 0xd], 0
0x3de7:	mov	qword ptr [rsp + 0x18], 1
0x3df0:	xor	r15d, r15d
0x3df3:	mov	qword ptr [rsp + 0x48], rax
0x3df8:	jmp	0x2e23


0x39c1:	test	r13, r13
0x39c4:	jne	0x3f5a


0x3f84:	nop	
0x3f86:	nop	word ptr cs:[rax + rax]


0x413b:	nop	dword ptr [rax + rax]


0x4176:	nop	word ptr cs:[rax + rax]


0x4191:	nop	dword ptr [rax + rax]
0x4196:	nop	word ptr cs:[rax + rax]


0x41b1:	nop	dword ptr [rax + rax]
0x41b6:	nop	word ptr cs:[rax + rax]


0x41f5:	nop	
0x41f6:	nop	word ptr cs:[rax + rax]


0x4215:	nop	
0x4216:	nop	word ptr cs:[rax + rax]


0x42c4:	nop	
0x42c6:	nop	word ptr cs:[rax + rax]


0x43b3:	nop	dword ptr [rax]
0x43b6:	nop	word ptr cs:[rax + rax]


0x43ca:	nop	word ptr [rax + rax]


0x4463:	nop	dword ptr [rax]
0x4466:	nop	word ptr cs:[rax + rax]


0x4483:	nop	dword ptr [rax]
0x4486:	nop	word ptr cs:[rax + rax]


0x449c:	nop	dword ptr [rax]


0x44b8:	nop	dword ptr [rax + rax]


0x44d4:	nop	
0x44d6:	nop	word ptr cs:[rax + rax]


0x456e:	nop	


0x45fa:	nop	word ptr [rax + rax]


0x460c:	nop	dword ptr [rax]


0x461f:	nop	


0x46b8:	nop	dword ptr [rax + rax]


0x46e1:	nop	dword ptr [rax + rax]
0x46e6:	nop	word ptr cs:[rax + rax]


0x46fa:	nop	word ptr [rax + rax]


0x478e:	nop	


0x4821:	nop	dword ptr [rax + rax]
0x4826:	nop	word ptr cs:[rax + rax]


0x483c:	nop	dword ptr [rax]


0x4857:	nop	word ptr [rax + rax]


0x4873:	nop	dword ptr [rax]
0x4876:	nop	word ptr cs:[rax + rax]


0x488c:	nop	dword ptr [rax]


0x48a4:	nop	
0x48a6:	nop	word ptr cs:[rax + rax]


0x48c3:	nop	dword ptr [rax]
0x48c6:	nop	word ptr cs:[rax + rax]


0x48e8:	nop	dword ptr [rax + rax]


0x48fe:	nop	


0x4d17:	nop	word ptr [rax + rax]


0x4db8:	nop	dword ptr [rax + rax]


0x4e95:	nop	
0x4e96:	nop	word ptr cs:[rax + rax]


0x4f3a:	nop	word ptr [rax + rax]


0x4f64:	nop	
0x4f66:	nop	word ptr cs:[rax + rax]


0x4f72:	nop	dword ptr [rax]
0x4f76:	nop	word ptr cs:[rax + rax]


0x4fb6:	nop	word ptr cs:[rax + rax]


0x4fe4:	nop	
0x4fe6:	nop	word ptr cs:[rax + rax]


0x5072:	nop	dword ptr [rax]
0x5076:	nop	word ptr cs:[rax + rax]


0x50ca:	nop	word ptr [rax + rax]


0x50e7:	nop	word ptr [rax + rax]


0x511e:	nop	


0x5148:	nop	dword ptr [rax + rax]


0x5163:	nop	word ptr cs:[rax + rax]
0x516d:	nop	dword ptr [rax]


0x51a5:	nop	word ptr cs:[rax + rax]
0x51af:	nop	


0x526a:	nop	word ptr [rax + rax]


0x52b4:	nop	
0x52b6:	nop	word ptr cs:[rax + rax]


0x5306:	nop	word ptr cs:[rax + rax]


0x538b:	nop	dword ptr [rax + rax]


0x560e:	nop	


0x56a7:	nop	word ptr [rax + rax]


0x5733:	nop	word ptr cs:[rax + rax]
0x573d:	nop	dword ptr [rax]


0x57bd:	nop	dword ptr [rax]


0x57fc:	nop	dword ptr [rax]


0x58b4:	nop	
0x58b6:	nop	word ptr cs:[rax + rax]


0x5969:	nop	dword ptr [rax]


0x59ce:	nop	


0x5a35:	nop	
0x5a36:	nop	word ptr cs:[rax + rax]


0x5a42:	nop	word ptr cs:[rax + rax]
0x5a4c:	nop	dword ptr [rax]


0x3010:	xor	r10d, r10d
0x3013:	mov	eax, dword ptr [rsp + 8]
0x3017:	cmp	eax, 2
0x301a:	je	0x35d8


0x3040:	xor	r10d, r10d
0x3043:	cmp	dword ptr [rsp + 8], 2
0x3048:	je	0x3550


0x3068:	mov	edx, 9
0x306d:	mov	ebx, 0x74
0x3072:	cmp	dword ptr [rsp + 8], 2
0x3077:	sete	al
0x307a:	and	al, byte ptr [rsp + 0xf]
0x307e:	jne	0x31ce


0x30a8:	mov	edx, 8
0x30ad:	mov	ebx, 0x62
0x30b2:	jmp	0x3084


0x30b8:	cmp	dword ptr [rsp + 8], 2
0x30bd:	je	0x3490


0x3160:	cmp	byte ptr [rsp + 0xd], 0
0x3165:	jne	0x3333


0x3188:	cmp	dword ptr [rsp + 8], 2
0x318d:	sete	dl
0x3190:	xor	eax, eax
0x3192:	jmp	0x2f78


0x31a0:	mov	edx, 7
0x31a5:	mov	ebx, 0x61
0x31aa:	jmp	0x3084


0x31b0:	cmp	dword ptr [rsp + 8], 2
0x31b5:	sete	dl
0x31b8:	test	rbp, rbp
0x31bb:	jne	0x2f6c


0x31e0:	cmp	dword ptr [rsp + 8], 2
0x31e5:	sete	dl
0x31e8:	xor	r12d, r12d
0x31eb:	jmp	0x31c1


0x31f0:	cmp	dword ptr [rsp + 8], 2
0x31f5:	mov	ebx, 0x20
0x31fa:	sete	dl
0x31fd:	jmp	0x31c1


0x3200:	mov	edx, 0xd
0x3205:	mov	ebx, 0x72
0x320a:	jmp	0x3072


0x3210:	mov	edx, 0xc
0x3215:	mov	ebx, 0x66
0x321a:	jmp	0x3084


0x3220:	mov	edx, 0xb
0x3225:	mov	ebx, 0x76
0x322a:	jmp	0x3084


0x3230:	mov	edx, 0xa
0x3235:	mov	ebx, 0x6e
0x323a:	jmp	0x3072


0x32d0:	xor	r10d, r10d
0x32d3:	cmp	byte ptr [rsp + 0xd], 0
0x32d8:	jne	0x30ce


0x32f0:	mov	edx, 0xc
0x32f5:	xor	r10d, r10d
0x32f8:	mov	ebx, 0x66
0x32fd:	jmp	0x3084


0x3308:	mov	edx, 0xa
0x330d:	xor	r10d, r10d
0x3310:	mov	ebx, 0x6e
0x3315:	jmp	0x3072


0x3320:	mov	ebx, 0x61
0x3325:	jmp	0x30f0


0x3330:	xor	r10d, r10d
0x3333:	cmp	dword ptr [rsp + 8], 2
0x3338:	sete	dl
0x333b:	cmp	byte ptr [rsp + 0xf], 0
0x3340:	jne	0x3eda


0x33d0:	cmp	dword ptr [rsp + 8], 2
0x33d5:	mov	r12d, r10d
0x33d8:	sete	dl
0x33db:	xor	r10d, r10d
0x33de:	xor	eax, eax
0x33e0:	jmp	0x2f78


0x33e8:	cmp	dword ptr [rsp + 8], 2
0x33ed:	sete	dl
0x33f0:	xor	r10d, r10d
0x33f3:	jmp	0x31b8


0x3400:	cmp	dword ptr [rsp + 8], 2
0x3405:	sete	dl
0x3408:	xor	r10d, r10d
0x340b:	xor	r12d, r12d
0x340e:	jmp	0x31c1


0x3418:	cmp	dword ptr [rsp + 8], 2
0x341d:	mov	r12d, r10d
0x3420:	mov	ebx, 0x20
0x3425:	sete	dl
0x3428:	xor	r10d, r10d
0x342b:	jmp	0x31c1


0x3448:	mov	ebx, 0x76
0x344d:	jmp	0x30f0


0x3458:	mov	edx, 9
0x345d:	xor	r10d, r10d
0x3460:	mov	ebx, 0x74
0x3465:	jmp	0x3072


0x3470:	mov	ebx, 0x62
0x3475:	jmp	0x30f0


0x3a10:	test	ebx, ebx
0x3a12:	jne	0x3e0d


0x1896:	nop	word ptr cs:[rax + rax]


0x18cf:	nop	


0x18ee:	nop	


0x18ff:	nop	


0x195b:	nop	dword ptr [rax + rax]


0x196c:	nop	dword ptr [rax]


0x197c:	nop	dword ptr [rax]


0x198c:	nop	dword ptr [rax]


0x1b66:	nop	word ptr cs:[rax + rax]


0x1bb7:	nop	word ptr [rax + rax]


0x1c01:	nop	dword ptr [rax]


0x1c86:	nop	word ptr cs:[rax + rax]


0x1c9e:	nop	


0x1e9d:	nop	dword ptr [rax]


0x204e:	nop	


0x20a5:	nop	dword ptr [rax]


0x20eb:	nop	dword ptr [rax + rax]


0x211b:	nop	dword ptr [rax + rax]


0x2134:	nop	dword ptr [rax]


0x28db:	nop	dword ptr [rax + rax]


0x2919:	nop	dword ptr [rax]


0x2965:	nop	dword ptr [rax]


0x29ca:	nop	word ptr [rax + rax]


0x2aff:	nop	


0x2b3b:	nop	dword ptr [rax + rax]


0x2bb4:	nop	dword ptr [rax]


0x2c9c:	nop	dword ptr [rax]


0x2ced:	nop	dword ptr [rax]


0x2f18:	nop	dword ptr [rax + rax]


0x3007:	nop	word ptr [rax + rax]


0x303e:	nop	


0x3061:	nop	dword ptr [rax]


0x30a2:	nop	word ptr [rax + rax]


0x30b4:	nop	dword ptr [rax]


0x3158:	nop	dword ptr [rax + rax]


0x3181:	nop	dword ptr [rax]


0x3197:	nop	word ptr [rax + rax]


0x31af:	nop	


0x31de:	nop	


0x31ed:	nop	dword ptr [rax]


0x31ff:	nop	


0x320f:	nop	


0x321f:	nop	


0x322f:	nop	


0x323f:	nop	


0x32ac:	nop	dword ptr [rax]


0x32cc:	nop	dword ptr [rax]


0x32de:	nop	


0x32ef:	nop	


0x3302:	nop	word ptr [rax + rax]


0x331a:	nop	word ptr [rax + rax]


0x332a:	nop	word ptr [rax + rax]


0x33cb:	nop	dword ptr [rax + rax]


0x33e5:	nop	dword ptr [rax]


0x33f8:	nop	dword ptr [rax + rax]


0x3413:	nop	dword ptr [rax + rax]


0x3442:	nop	word ptr [rax + rax]


0x3452:	nop	word ptr [rax + rax]


0x346a:	nop	word ptr [rax + rax]


0x347a:	nop	word ptr [rax + rax]


0x3488:	nop	dword ptr [rax + rax]


0x34af:	nop	


0x3549:	nop	dword ptr [rax]


0x3592:	nop	word ptr [rax + rax]


0x35b8:	nop	dword ptr [rax + rax]


0x35d1:	nop	dword ptr [rax]


0x35f2:	nop	word ptr [rax + rax]


0x3758:	nop	dword ptr [rax + rax]


0x386b:	nop	dword ptr [rax + rax]


0x388e:	nop	


0x3955:	nop	dword ptr [rax]


0x3a0d:	nop	dword ptr [rax]


0x3c16:	nop	word ptr cs:[rax + rax]


0x3ca9:	nop	dword ptr [rax]


0x3d1d:	nop	dword ptr [rax]


0x3dfd:	nop	dword ptr [rax]


0x410b:	nop	dword ptr [rax + rax]


0x49a6:	nop	word ptr cs:[rax + rax]


0x4a35:	nop	dword ptr [rax]


0x4a56:	nop	word ptr cs:[rax + rax]


0x4ab5:	nop	dword ptr [rax]


0x4af1:	nop	dword ptr [rax]


0x4b38:	nop	dword ptr [rax + rax]


0x4b87:	nop	word ptr [rax + rax]


0x4be4:	nop	dword ptr [rax]


0x4c12:	nop	word ptr [rax + rax]


0x4cc6:	nop	word ptr cs:[rax + rax]


0x4d29:	nop	dword ptr [rax]


0x4fa2:	nop	word ptr [rax + rax]


0x5029:	nop	dword ptr [rax]


0x5054:	nop	dword ptr [rax]


0x50ad:	nop	dword ptr [rax]


0x5355:	nop	dword ptr [rax]


0x542b:	nop	dword ptr [rax + rax]


0x5456:	nop	word ptr cs:[rax + rax]


0x548f:	nop	


0x54d9:	nop	dword ptr [rax]


0x54fb:	nop	dword ptr [rax + rax]


0x55a1:	nop	dword ptr [rax]


0x5633:	nop	dword ptr [rax + rax]


0x565f:	nop	


0x5774:	nop	dword ptr [rax]


0x5791:	nop	dword ptr [rax]


0x57a2:	nop	word ptr [rax + rax]


0x57e6:	nop	word ptr cs:[rax + rax]


0x5824:	nop	dword ptr [rax]


0x5878:	nop	dword ptr [rax + rax]


0x5899:	nop	dword ptr [rax]


0x5952:	nop	word ptr [rax + rax]


0x59b5:	nop	dword ptr [rax]


