0x1440: xor ebp,ebp
0x1442: mov r9,rdx
0x1445: pop rsi
0x1446: mov rdx,rsp
0x1449: and rsp,0xfffffffffffffff0
0x144d: push rax
0x144e: push rsp
0x144f: lea r8,[rip+0x2e3a]
0x1456: lea rcx,[rip+0x2dc3]
0x145d: lea rdi,[rip+0xffffffffffffff1c]
0x1464: call qword ptr [rip+0x204b76]
Execute the function: __libc_start_main

0x1464: jump address is 0x1380
0x1380: cmp edi,0x2
0x1383: je 0x138b
0x1383: jump address is 0x138b
0x1385: mov eax,0x1
0x138a: ret
The symbolic execution has been successfully terminated

0x138b: push rbx
0x138c: mov rdi,qword ptr [rsi]
0x138f: mov rbx,rsi
0x1392: call 0x1970
0x1392: jump address is 0x1970
0x1970: test rdi,rdi
0x1973: push rbx
0x1974: je 0x19ed
0x1974: jump address is 0x19ed
0x1976: mov esi,0x2f
0x197b: mov rbx,rdi
0x197e: call 0x11e0
0x197e: jump address is 0x11e0
0x11e0: jmp qword ptr [rip+0x204d2a]
Execute the function: strrchr

0x11e0: the return address is 0x1983
0x1983: test rax,rax
0x1986: je 0x19dd
0x1986: jump address is 0x19dd
0x1988: lea r8,[rax+0x1]
0x198c: mov rdx,r8
0x198f: sub rdx,rbx
0x1992: cmp rdx,0x6
0x1996: jle 0x19dd
0x1996: jump address is 0x19dd
Block exists: mov qword ptr [rip+0x2046dc],rbx at address 0x19dd is visited for 1 times

0x1998: lea rsi,[rax-0x6]
0x199c: lea rdi,[rip+0x2c95]
0x19a3: mov ecx,0x7
0x19a8: repz cmps byte ptr ds:[rsi],byte ptr es:[rdi]
0x19aa: seta dl
0x19ad: sbb dl,0x0
0x19b0: test dl,dl
0x19b2: jne 0x19dd
0x19b2: jump address is 0x19dd
Block exists: mov qword ptr [rip+0x2046dc],rbx at address 0x19dd is visited for 1 times

0x19b4: lea rdi,[rip+0x2c85]
0x19bb: mov ecx,0x3
0x19c0: mov rsi,r8
0x19c3: mov rbx,r8
0x19c6: repz cmps byte ptr ds:[rsi],byte ptr es:[rdi]
0x19c8: seta dl
0x19cb: sbb dl,0x0
0x19ce: test dl,dl
0x19d0: jne 0x19dd
0x19d0: jump address is 0x19dd
Block exists: mov qword ptr [rip+0x2046dc],rbx at address 0x19dd is visited for 1 times

0x19d2: lea rbx,[rax+0x4]
0x19d6: mov qword ptr [rip+0x2046a3],rbx
0x19dd: mov qword ptr [rip+0x2046dc],rbx
0x19e4: mov qword ptr [rip+0x2046a5],rbx
0x19eb: pop rbx
0x19ec: ret
0x19ec: the return address is 0x1397
0x1397: lea rsi,[rip+0x2f30]
0x139e: mov edi,0x6
0x13a3: call 0x12c0
0x13a3: jump address is 0x12c0
0x12c0: jmp qword ptr [rip+0x204cba]
Execute the function: setlocale

0x12c0: the return address is 0x13a8
0x13a8: lea rsi,[rip+0x2fc3]
0x13af: lea rdi,[rip+0x2f93]
0x13b6: call 0x1180
0x13b6: jump address is 0x1180
0x1180: jmp qword ptr [rip+0x204d5a]
Execute the function: bindtextdomain

0x1180: the return address is 0x13bb
0x13bb: lea rdi,[rip+0x2f87]
0x13c2: call 0x1160
0x13c2: jump address is 0x1160
0x1160: jmp qword ptr [rip+0x204d6a]
Execute the function: textdomain

0x1160: the return address is 0x13c7
0x13c7: lea rdi,[rip+0x4f2]
0x13ce: call 0x42a0
0x13ce: jump address is 0x42a0
0x42a0: mov rdx,qword ptr [rip+0x201d61]
0x42a7: xor esi,esi
0x42a9: jmp 0x1300
0x42a9: jump address is 0x1300
0x1300: jmp qword ptr [rip+0x204c9a]
Execute the function: __cxa_atexit

0x1300: the return address is 0x13d3
0x13d3: mov rbx,qword ptr [rbx+0x8]
0x13d7: lea rsi,[rip+0x2fac]
0x13de: mov rdi,rbx
0x13e1: call 0x1240
0x13e1: jump address is 0x1240
0x1240: jmp qword ptr [rip+0x204cfa]
Execute the function: strcmp

0x1240: the return address is 0x13e6
0x13e6: test eax,eax
0x13e8: je 0x1431
0x13e8: jump address is 0x1431
0x13ea: lea rsi,[rip+0x2fa0]
0x13f1: mov rdi,rbx
0x13f4: call 0x1240
0x13f4: jump address is 0x1240
0x1240: jmp qword ptr [rip+0x204cfa]
Execute the function: strcmp

0x1240: the return address is 0x13f9
0x13f9: test eax,eax
0x13fb: je 0x1404
0x13fb: jump address is 0x1404
0x13fd: mov eax,0x1
0x1402: pop rbx
0x1403: ret
The symbolic execution has been successfully terminated

0x1404: mov rcx,qword ptr [rip+0x204c05]
0x140b: mov rdi,qword ptr [rip+0x204c76]
0x1412: lea r8,[rip+0x2f82]
0x1419: lea rdx,[rip+0x2f25]
0x1420: lea rsi,[rip+0x2e9d]
0x1427: xor r9d,r9d
0x142a: call 0x3b60
0x142a: jump address is 0x3b60
0x3b60: push rbp
0x3b61: push rbx
0x3b62: mov r10d,0x20
0x3b68: xor r11d,r11d
0x3b6b: sub rsp,0xb8
0x3b72: mov rax,qword ptr fs:0x28
0x3b7b: mov qword ptr [rsp+0x78],rax
0x3b80: xor eax,eax
0x3b82: lea rax,[rsp+0xd0]
0x3b8a: mov qword ptr [rsp+0xa0],r8
0x3b92: lea rbx,[rsp+0xd0]
0x3b9a: lea r8,[rsp+0x20]
0x3b9f: mov qword ptr [rsp+0xa8],r9
0x3ba7: mov dword ptr [rsp+0x8],0x20
0x3baf: mov qword ptr [rsp+0x10],rax
0x3bb4: lea rax,[rsp+0x80]
0x3bbc: xor r9d,r9d
0x3bbf: mov qword ptr [rsp+0x18],rax
0x3bc4: mov rbp,rax
0x3bc7: nop word ptr [rax+rax*1+0x0]
0x3bd0: cmp r10d,0x2f
0x3bd4: ja 0x3c2c
0x3bd4: jump address is 0x3c2c
0x3bd6: mov eax,r10d
0x3bd9: mov r11d,0x1
0x3bdf: add r10d,0x8
0x3be3: add rax,rbp
0x3be6: mov rax,qword ptr [rax]
0x3be9: test rax,rax
0x3bec: mov qword ptr [r8+r9*8],rax
0x3bf0: je 0x3bfc
0x3bf0: jump address is 0x3bfc
0x3bf2: add r9,0x1
0x3bf6: cmp r9,0xa
0x3bfa: jne 0x3bd0
0x3bfa: jump address is 0x3bd0
0x3bd0: cmp r10d,0x2f
0x3bd4: ja 0x3c2c
0x3bd4: jump address is 0x3c2c
0x3bd6: mov eax,r10d
0x3bd9: mov r11d,0x1
0x3bdf: add r10d,0x8
0x3be3: add rax,rbp
0x3be6: mov rax,qword ptr [rax]
0x3be9: test rax,rax
0x3bec: mov qword ptr [r8+r9*8],rax
0x3bf0: je 0x3bfc
0x3bf0: jump address is 0x3bfc
0x3bf2: add r9,0x1
0x3bf6: cmp r9,0xa
0x3bfa: jne 0x3bd0
0x3bfa: jump address is 0x3bd0
Block exists: test r11b,r11b at address 0x3bfc is visited for 1 times

0x3bd0: cmp r10d,0x2f
0x3bd4: ja 0x3c2c
0x3bd4: jump address is 0x3c2c
Block exists: mov eax,r10d at address 0x3bd6 is visited for 2 times

0x3c2c: mov rax,rbx
0x3c2f: add rbx,0x8
0x3c33: jmp 0x3be6
0x3c33: jump address is 0x3be6
0x3be6: mov rax,qword ptr [rax]
0x3be9: test rax,rax
0x3bec: mov qword ptr [r8+r9*8],rax
0x3bf0: je 0x3bfc
0x3bf0: jump address is 0x3bfc
0x3bf2: add r9,0x1
0x3bf6: cmp r9,0xa
0x3bfa: jne 0x3bd0
0x3bfa: jump address is 0x3bd0
Block exists: test r11b,r11b at address 0x3bfc is visited for 2 times

0x3bd0: cmp r10d,0x2f
0x3bd4: ja 0x3c2c
0x3bd4: jump address is 0x3c2c
0x3bd6: mov eax,r10d
0x3bd9: mov r11d,0x1
0x3bdf: add r10d,0x8
0x3be3: add rax,rbp
0x3be6: mov rax,qword ptr [rax]
0x3be9: test rax,rax
0x3bec: mov qword ptr [r8+r9*8],rax
0x3bf0: je 0x3bfc
0x3bf0: jump address is 0x3bfc
Block exists: test r11b,r11b at address 0x3bfc is visited for 2 times

Block exists: add r9,0x1 at address 0x3bf2 is visited for 3 times

0x3c2c: mov rax,rbx
0x3c2f: add rbx,0x8
0x3c33: jmp 0x3be6
0x3c33: jump address is 0x3be6
0x3be6: mov rax,qword ptr [rax]
0x3be9: test rax,rax
0x3bec: mov qword ptr [r8+r9*8],rax
0x3bf0: je 0x3bfc
0x3bf0: jump address is 0x3bfc
Block exists: test r11b,r11b at address 0x3bfc is visited for 2 times

Block exists: add r9,0x1 at address 0x3bf2 is visited for 3 times

0x3bfc: test r11b,r11b
0x3bff: jne 0x3c25
0x3bff: jump address is 0x3c25
0x3c01: call 0x36a0
0x3c01: jump address is 0x36a0
0x36a0: push r15
0x36a2: push r14
0x36a4: push r13
0x36a6: push r12
0x36a8: mov r12,r9
0x36ab: push rbp
0x36ac: push rbx
0x36ad: mov rbp,rdi
0x36b0: mov rbx,r8
0x36b3: sub rsp,0x28
0x36b7: test rsi,rsi
0x36ba: je 0x37d8
0x36ba: jump address is 0x37d8
0x36c0: mov r8,rdx
0x36c3: lea rdx,[rip+0x145e]
0x36ca: mov r9,rcx
0x36cd: xor eax,eax
0x36cf: mov rcx,rsi
0x36d2: mov esi,0x1
0x36d7: call 0x1330
0x36d7: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x36dc
0x36dc: lea rsi,[rip+0x1458]
0x36e3: xor edi,edi
0x36e5: mov edx,0x5
0x36ea: call 0x1190
0x36ea: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x36ef
0x36ef: lea rdx,[rip+0x176a]
0x36f6: mov rcx,rax
0x36f9: mov r8d,0x7e3
0x36ff: mov esi,0x1
0x3704: mov rdi,rbp
0x3707: xor eax,eax
0x3709: call 0x1330
0x3709: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x370e
0x370e: lea rsi,[rip+0x14b3]
0x3715: xor edi,edi
0x3717: mov edx,0x5
0x371c: call 0x1190
0x371c: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x3721
0x3721: mov rsi,rbp
0x3724: mov rdi,rax
0x3727: call 0x1220
0x3727: jump address is 0x1220
0x1220: jmp qword ptr [rip+0x204d0a]
Execute the function: fputs_unlocked

0x1220: the return address is 0x372c
0x372c: cmp r12,0x9
0x3730: ja 0x3a70
0x3730: jump address is 0x3a70
0x3736: lea rdx,[rip+0x16eb]
0x373d: movsxd rax,dword ptr [rdx+r12*4]
0x3741: add rax,rdx
0x3744: jmp rax
trace back
0x3744: jmp rax
0x3741: add rax,rdx
0x373d: movsxd rax,dword ptr [rdx+r12*4]
0x3736: lea rdx,[rip+0x16eb]
0x3730: ja 0x3a70
0x372c: cmp r12,0x9
0x3744: jump addresses resolved using jump table [0x37c6, 0x3858, 0x3898, 0x38e0, 0x3930, 0x3988, 0x39b8, 0x3a20, 0x3750, 0x3800]
0x3744: jmp rax
0x3744: jump address is 0x3800
0x3800: mov r10,qword ptr [rbx+0x40]
0x3804: mov r9,qword ptr [rbx+0x38]
0x3808: lea rsi,[rip+0x1559]
0x380f: mov rax,qword ptr [rbx+0x10]
0x3813: mov r8,qword ptr [rbx+0x8]
0x3817: mov edx,0x5
0x381c: mov r13,qword ptr [rbx+0x30]
0x3820: mov r12,qword ptr [rbx+0x28]
0x3824: mov r15,qword ptr [rbx+0x20]
0x3828: mov r14,qword ptr [rbx+0x18]
0x382c: mov rbx,qword ptr [rbx]
0x382f: mov qword ptr [rsp+0x18],r10
0x3834: mov qword ptr [rsp+0x10],r9
0x3839: mov qword ptr [rsp],rax
0x383d: mov qword ptr [rsp+0x8],r8
0x3842: xor edi,edi
0x3844: call 0x1190
0x3844: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x3849
0x3849: mov r10,qword ptr [rsp+0x18]
0x384e: push r10
0x3850: jmp 0x3794
0x3850: jump address is 0x3794
0x3794: mov r9,qword ptr [rsp+0x18]
0x3799: mov rdx,rax
0x379c: mov rcx,rbx
0x379f: mov esi,0x1
0x37a4: mov rdi,rbp
0x37a7: xor eax,eax
0x37a9: push r9
0x37ab: push r13
0x37ad: push r12
0x37af: push r15
0x37b1: push r14
0x37b3: mov r9,qword ptr [rsp+0x30]
0x37b8: mov r8,qword ptr [rsp+0x38]
0x37bd: call 0x1330
0x37bd: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x37c2
0x37c2: add rsp,0x30
0x37c6: add rsp,0x28
0x37ca: pop rbx
0x37cb: pop rbp
0x37cc: pop r12
0x37ce: pop r13
0x37d0: pop r14
0x37d2: pop r15
0x37d4: ret
0x37d4: the return address is 0x3c06
0x3c06: mov rax,qword ptr [rsp+0x78]
0x3c0b: xor rax,qword ptr fs:0x28
0x3c14: jne 0x3c20
0x3c14: jump address is 0x3c20
0x3c16: add rsp,0xb8
0x3c1d: pop rbx
0x3c1e: pop rbp
0x3c1f: ret
0x3c1f: the return address is 0x142f
0x142f: jmp 0x13fd
0x142f: jump address is 0x13fd
Block exists: mov eax,0x1 at address 0x13fd is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x3750
0x3750: mov r9,qword ptr [rbx+0x38]
0x3754: mov rax,qword ptr [rbx+0x10]
0x3758: lea rsi,[rip+0x15d9]
0x375f: mov r8,qword ptr [rbx+0x8]
0x3763: mov edx,0x5
0x3768: xor edi,edi
0x376a: mov r13,qword ptr [rbx+0x30]
0x376e: mov r12,qword ptr [rbx+0x28]
0x3772: mov qword ptr [rsp+0x10],r9
0x3777: mov r15,qword ptr [rbx+0x20]
0x377b: mov r14,qword ptr [rbx+0x18]
0x377f: mov qword ptr [rsp],rax
0x3783: mov qword ptr [rsp+0x8],r8
0x3788: mov rbx,qword ptr [rbx]
0x378b: call 0x1190
0x378b: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x3790
0x3790: sub rsp,0x8
0x3794: mov r9,qword ptr [rsp+0x18]
0x3799: mov rdx,rax
0x379c: mov rcx,rbx
0x379f: mov esi,0x1
0x37a4: mov rdi,rbp
0x37a7: xor eax,eax
0x37a9: push r9
0x37ab: push r13
0x37ad: push r12
0x37af: push r15
0x37b1: push r14
0x37b3: mov r9,qword ptr [rsp+0x30]
0x37b8: mov r8,qword ptr [rsp+0x38]
0x37bd: call 0x1330
0x37bd: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x37c2
Block exists: add rsp,0x30 at address 0x37c2 is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x3a20
0x3a20: mov r9,qword ptr [rbx+0x10]
0x3a24: mov r13,qword ptr [rbx+0x30]
0x3a28: lea rsi,[rip+0x12d9]
0x3a2f: mov r12,qword ptr [rbx+0x28]
0x3a33: mov r15,qword ptr [rbx+0x20]
0x3a37: mov edx,0x5
0x3a3c: mov r14,qword ptr [rbx+0x18]
0x3a40: mov r8,qword ptr [rbx+0x8]
0x3a44: xor edi,edi
0x3a46: mov qword ptr [rsp+0x8],r9
0x3a4b: mov rbx,qword ptr [rbx]
0x3a4e: mov qword ptr [rsp],r8
0x3a52: call 0x1190
0x3a52: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x3a57
0x3a57: push r13
0x3a59: push r12
0x3a5b: push r15
0x3a5d: push r14
0x3a5f: mov r9,qword ptr [rsp+0x28]
0x3a64: jmp 0x39f3
0x3a64: jump address is 0x39f3
0x39f3: mov r8,qword ptr [rsp+0x20]
0x39f8: mov rcx,rbx
0x39fb: mov rdx,rax
0x39fe: mov rdi,rbp
0x3a01: mov esi,0x1
0x3a06: xor eax,eax
0x3a08: call 0x1330
0x3a08: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x3a0d
0x3a0d: add rsp,0x20
0x3a11: add rsp,0x28
0x3a15: pop rbx
0x3a16: pop rbp
0x3a17: pop r12
0x3a19: pop r13
0x3a1b: pop r14
0x3a1d: pop r15
0x3a1f: ret
0x3a1f: the return address is 0x3c06
Block exists: mov rax,qword ptr [rsp+0x78] at address 0x3c06 is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x39b8
0x39b8: mov r8,qword ptr [rbx+0x8]
0x39bc: mov r12,qword ptr [rbx+0x28]
0x39c0: lea rsi,[rip+0x1319]
0x39c7: mov r15,qword ptr [rbx+0x20]
0x39cb: mov r14,qword ptr [rbx+0x18]
0x39cf: mov edx,0x5
0x39d4: mov r13,qword ptr [rbx+0x10]
0x39d8: xor edi,edi
0x39da: mov rbx,qword ptr [rbx]
0x39dd: mov qword ptr [rsp],r8
0x39e1: call 0x1190
0x39e1: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x39e6
0x39e6: sub rsp,0x8
0x39ea: mov r9,r13
0x39ed: push r12
0x39ef: push r15
0x39f1: push r14
0x39f3: mov r8,qword ptr [rsp+0x20]
0x39f8: mov rcx,rbx
0x39fb: mov rdx,rax
0x39fe: mov rdi,rbp
0x3a01: mov esi,0x1
0x3a06: xor eax,eax
0x3a08: call 0x1330
0x3a08: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x3a0d
Block exists: add rsp,0x20 at address 0x3a0d is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x3988
0x3988: mov r15,qword ptr [rbx+0x20]
0x398c: lea rsi,[rip+0x1325]
0x3993: mov edx,0x5
0x3998: xor edi,edi
0x399a: mov r14,qword ptr [rbx+0x18]
0x399e: mov r13,qword ptr [rbx+0x10]
0x39a2: mov r12,qword ptr [rbx+0x8]
0x39a6: mov rbx,qword ptr [rbx]
0x39a9: call 0x1190
0x39a9: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x39ae
0x39ae: push r15
0x39b0: jmp 0x3956
0x39b0: jump address is 0x3956
0x3956: push r14
0x3958: mov rdx,rax
0x395b: mov r9,r13
0x395e: mov r8,r12
0x3961: mov rcx,rbx
0x3964: mov rdi,rbp
0x3967: mov esi,0x1
0x396c: xor eax,eax
0x396e: call 0x1330
0x396e: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x3973
0x3973: pop rax
0x3974: pop rdx
0x3975: add rsp,0x28
0x3979: pop rbx
0x397a: pop rbp
0x397b: pop r12
0x397d: pop r13
0x397f: pop r14
0x3981: pop r15
0x3983: ret
0x3983: the return address is 0x3c06
Block exists: mov rax,qword ptr [rsp+0x78] at address 0x3c06 is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x3930
0x3930: lea rsi,[rip+0x1361]
0x3937: mov edx,0x5
0x393c: xor edi,edi
0x393e: mov r14,qword ptr [rbx+0x18]
0x3942: mov r13,qword ptr [rbx+0x10]
0x3946: mov r12,qword ptr [rbx+0x8]
0x394a: mov rbx,qword ptr [rbx]
0x394d: call 0x1190
0x394d: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x3952
0x3952: sub rsp,0x8
0x3956: push r14
0x3958: mov rdx,rax
0x395b: mov r9,r13
0x395e: mov r8,r12
0x3961: mov rcx,rbx
0x3964: mov rdi,rbp
0x3967: mov esi,0x1
0x396c: xor eax,eax
0x396e: call 0x1330
0x396e: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x3973
Block exists: pop rax at address 0x3973 is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x38e0
0x38e0: mov r13,qword ptr [rbx+0x10]
0x38e4: mov r12,qword ptr [rbx+0x8]
0x38e8: lea rsi,[rip+0x1277]
0x38ef: mov rbx,qword ptr [rbx]
0x38f2: mov edx,0x5
0x38f7: xor edi,edi
0x38f9: call 0x1190
0x38f9: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x38fe
0x38fe: add rsp,0x28
0x3902: mov r9,r13
0x3905: mov r8,r12
0x3908: mov rcx,rbx
0x390b: mov rdi,rbp
0x390e: mov rdx,rax
0x3911: pop rbx
0x3912: pop rbp
0x3913: pop r12
0x3915: pop r13
0x3917: pop r14
0x3919: pop r15
0x391b: mov esi,0x1
0x3920: xor eax,eax
0x3922: jmp 0x1330
0x3922: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x3c06
Block exists: mov rax,qword ptr [rsp+0x78] at address 0x3c06 is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x3898
0x3898: mov r12,qword ptr [rbx+0x8]
0x389c: lea rsi,[rip+0x12ac]
0x38a3: mov rbx,qword ptr [rbx]
0x38a6: mov edx,0x5
0x38ab: xor edi,edi
0x38ad: call 0x1190
0x38ad: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x38b2
0x38b2: add rsp,0x28
0x38b6: mov r8,r12
0x38b9: mov rcx,rbx
0x38bc: mov rdi,rbp
0x38bf: mov rdx,rax
0x38c2: mov esi,0x1
0x38c7: pop rbx
0x38c8: pop rbp
0x38c9: pop r12
0x38cb: pop r13
0x38cd: pop r14
0x38cf: pop r15
0x38d1: xor eax,eax
0x38d3: jmp 0x1330
0x38d3: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x3c06
Block exists: mov rax,qword ptr [rsp+0x78] at address 0x3c06 is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x3858
0x3858: mov rbx,qword ptr [rbx]
0x385b: lea rsi,[rip+0x12dd]
0x3862: mov edx,0x5
0x3867: xor edi,edi
0x3869: call 0x1190
0x3869: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x386e
0x386e: add rsp,0x28
0x3872: mov rcx,rbx
0x3875: mov rdi,rbp
0x3878: pop rbx
0x3879: pop rbp
0x387a: pop r12
0x387c: pop r13
0x387e: pop r14
0x3880: pop r15
0x3882: mov rdx,rax
0x3885: mov esi,0x1
0x388a: xor eax,eax
0x388c: jmp 0x1330
0x388c: jump address is 0x1330
0x1330: jmp qword ptr [rip+0x204c82]
Execute the function: __fprintf_chk

0x1330: the return address is 0x3c06
Block exists: mov rax,qword ptr [rsp+0x78] at address 0x3c06 is visited for 1 times

0x3744: jmp rax
0x3744: jump address is 0x37c6
0x37c6: add rsp,0x28
0x37ca: pop rbx
0x37cb: pop rbp
0x37cc: pop r12
0x37ce: pop r13
0x37d0: pop r14
0x37d2: pop r15
0x37d4: ret
0x37d4: the return address is 0x3c06
Block exists: mov rax,qword ptr [rsp+0x78] at address 0x3c06 is visited for 1 times

0x3a70: mov r10,qword ptr [rbx+0x40]
0x3a74: mov r9,qword ptr [rbx+0x38]
0x3a78: mov edx,0x5
0x3a7d: mov rax,qword ptr [rbx+0x10]
0x3a81: mov r8,qword ptr [rbx+0x8]
0x3a85: lea rsi,[rip+0x1314]
0x3a8c: mov r13,qword ptr [rbx+0x30]
0x3a90: mov r12,qword ptr [rbx+0x28]
0x3a94: mov r15,qword ptr [rbx+0x20]
0x3a98: mov r14,qword ptr [rbx+0x18]
0x3a9c: mov qword ptr [rsp+0x18],r10
0x3aa1: mov qword ptr [rsp+0x10],r9
0x3aa6: mov qword ptr [rsp],rax
0x3aaa: mov qword ptr [rsp+0x8],r8
0x3aaf: mov rbx,qword ptr [rbx]
0x3ab2: jmp 0x3842
0x3ab2: jump address is 0x3842
0x3842: xor edi,edi
0x3844: call 0x1190
0x3844: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x3849
Block exists: mov r10,qword ptr [rsp+0x18] at address 0x3849 is visited for 1 times

0x3c25: mov dword ptr [rsp+0x8],r10d
0x3c2a: jmp 0x3c01
0x3c2a: jump address is 0x3c01
0x3c01: call 0x36a0
0x3c01: jump address is 0x36a0
Execute the function: version_etc_arn

0x3c01: the return address is 0x3c06
0x3c06: mov rax,qword ptr [rsp+0x78]
0x3c0b: xor rax,qword ptr fs:0x28
0x3c14: jne 0x3c20
0x3c14: jump address is 0x3c20
0x3c16: add rsp,0xb8
0x3c1d: pop rbx
0x3c1e: pop rbp
0x3c1f: ret
0x3c1f: the return address is 0x142f
0x142f: jmp 0x13fd
0x142f: jump address is 0x13fd
Block exists: mov eax,0x1 at address 0x13fd is visited for 1 times

0x3bfc: test r11b,r11b
0x3bff: jne 0x3c25
0x3bff: jump address is 0x3c25
Block exists: mov dword ptr [rsp+0x8],r10d at address 0x3c25 is visited for 1 times

0x1431: mov edi,0x1
0x1436: call 0x1550
0x1436: jump address is 0x1550
0x1550: push r13
0x1552: push r12
0x1554: lea rsi,[rip+0x2e4d]
0x155b: push rbp
0x155c: push rbx
0x155d: mov edx,0x5
0x1562: mov ebx,edi
0x1564: xor edi,edi
0x1566: sub rsp,0x88
0x156d: mov rbp,qword ptr [rip+0x204b4c]
0x1574: mov rax,qword ptr fs:0x28
0x157d: mov qword ptr [rsp+0x78],rax
0x1582: xor eax,eax
0x1584: call 0x1190
0x1584: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1589
0x1589: mov rcx,rbp
0x158c: mov rdx,rbp
0x158f: mov rsi,rax
0x1592: mov edi,0x1
0x1597: xor eax,eax
0x1599: call 0x12d0
0x1599: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x159e
0x159e: lea rsi,[rip+0x2e43]
0x15a5: mov edx,0x5
0x15aa: xor edi,edi
0x15ac: call 0x1190
0x15ac: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x15b1
0x15b1: lea rsi,[rip+0x2d12]
0x15b8: mov rdx,rax
0x15bb: mov edi,0x1
0x15c0: xor eax,eax
0x15c2: call 0x12d0
0x15c2: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x15c7
0x15c7: mov rbp,qword ptr [rip+0x204aba]
0x15ce: lea rsi,[rip+0x2e43]
0x15d5: mov edx,0x5
0x15da: xor edi,edi
0x15dc: call 0x1190
0x15dc: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x15e1
0x15e1: mov rsi,rbp
0x15e4: mov rdi,rax
0x15e7: call 0x1220
0x15e7: jump address is 0x1220
0x1220: jmp qword ptr [rip+0x204d0a]
Execute the function: fputs_unlocked

0x1220: the return address is 0x15ec
0x15ec: mov rbp,qword ptr [rip+0x204a95]
0x15f3: lea rsi,[rip+0x2e4e]
0x15fa: mov edx,0x5
0x15ff: xor edi,edi
0x1601: call 0x1190
0x1601: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1606
0x1606: mov rsi,rbp
0x1609: mov rdi,rax
0x160c: lea rbp,[rip+0x2cb1]
0x1613: call 0x1220
0x1613: jump address is 0x1220
0x1220: jmp qword ptr [rip+0x204d0a]
Execute the function: fputs_unlocked

0x1220: the return address is 0x1618
0x1618: lea rsi,[rip+0x2e61]
0x161f: mov edx,0x5
0x1624: xor edi,edi
0x1626: call 0x1190
0x1626: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x162b
0x162b: lea rdx,[rip+0x2c92]
0x1632: mov rsi,rax
0x1635: mov edi,0x1
0x163a: xor eax,eax
0x163c: call 0x12d0
0x163c: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x1641
0x1641: lea rax,[rip+0x2c87]
0x1648: lea rcx,[rip+0x2cc1]
0x164f: lea rdi,[rip+0x2cf3]
0x1656: mov qword ptr [rsp+0x60],0x0
0x165f: mov qword ptr [rsp+0x68],0x0
0x1668: mov rdx,rsp
0x166b: mov qword ptr [rsp],rax
0x166f: lea rax,[rip+0x2c5b]
0x1676: mov qword ptr [rsp+0x30],rcx
0x167b: lea rcx,[rip+0x2c98]
0x1682: mov qword ptr [rsp+0x10],rdi
0x1687: mov qword ptr [rsp+0x8],rax
0x168c: lea rax,[rip+0x2c4e]
0x1693: mov qword ptr [rsp+0x40],rcx
0x1698: lea rcx,[rip+0x2c85]
0x169f: mov qword ptr [rsp+0x18],rax
0x16a4: lea rax,[rip+0x2c4c]
0x16ab: mov qword ptr [rsp+0x50],rcx
0x16b0: mov qword ptr [rsp+0x20],rax
0x16b5: lea rax,[rip+0x2c45]
0x16bc: mov qword ptr [rsp+0x28],rax
0x16c1: mov qword ptr [rsp+0x38],rax
0x16c6: mov qword ptr [rsp+0x48],rax
0x16cb: mov qword ptr [rsp+0x58],rax
0x16d0: jmp 0x16dc
0x16d0: jump address is 0x16dc
0x16dc: add rdx,0x10
0x16e0: test rdi,rdi
0x16e3: je 0x16f8
0x16e3: jump address is 0x16f8
0x16e5: mov ecx,0x6
0x16ea: mov rsi,rbp
0x16ed: repz cmps byte ptr ds:[rsi],byte ptr es:[rdi]
0x16ef: seta al
0x16f2: sbb al,0x0
0x16f4: test al,al
0x16f6: jne 0x16d8
0x16f6: jump address is 0x16d8
0x16f8: mov r12,qword ptr [rdx+0x8]
0x16fc: xor edi,edi
0x16fe: mov edx,0x5
0x1703: lea rsi,[rip+0x2c24]
0x170a: test r12,r12
0x170d: je 0x17d6
0x170d: jump address is 0x17d6
0x1713: call 0x1190
0x1713: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1718
0x1718: lea rcx,[rip+0x2e21]
0x171f: lea rdx,[rip+0x2c1f]
0x1726: mov rsi,rax
0x1729: mov edi,0x1
0x172e: xor eax,eax
0x1730: call 0x12d0
0x1730: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x1735
0x1735: xor esi,esi
0x1737: mov edi,0x5
0x173c: call 0x12c0
0x173c: jump address is 0x12c0
0x12c0: jmp qword ptr [rip+0x204cba]
Execute the function: setlocale

0x12c0: the return address is 0x1741
0x1741: test rax,rax
0x1744: je 0x1762
0x1744: jump address is 0x1762
0x1746: lea rsi,[rip+0x2c06]
0x174d: mov edx,0x3
0x1752: mov rdi,rax
0x1755: call 0x1130
0x1755: jump address is 0x1130
0x1130: jmp qword ptr [rip+0x204d82]
Execute the function: strncmp

0x1130: the return address is 0x175a
0x175a: test eax,eax
0x175c: jne 0x1828
0x175c: jump address is 0x1828
Block exists: lea rsi,[rip+0x2bee] at address 0x1762 is visited for 1 times

0x1828: mov r13,qword ptr [rip+0x204859]
0x182f: lea rsi,[rip+0x2d32]
0x1836: xor edi,edi
0x1838: mov edx,0x5
0x183d: call 0x1190
0x183d: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1842
0x1842: mov rsi,r13
0x1845: mov rdi,rax
0x1848: call 0x1220
0x1848: jump address is 0x1220
0x1220: jmp qword ptr [rip+0x204d0a]
Execute the function: fputs_unlocked

0x1220: the return address is 0x184d
0x184d: jmp 0x1762
0x184d: jump address is 0x1762
Block exists: lea rsi,[rip+0x2bee] at address 0x1762 is visited for 1 times

0x1762: lea rsi,[rip+0x2bee]
0x1769: xor edi,edi
0x176b: mov edx,0x5
0x1770: call 0x1190
0x1770: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1775
0x1775: lea rcx,[rip+0x2b48]
0x177c: lea rdx,[rip+0x2dbd]
0x1783: mov rsi,rax
0x1786: mov edi,0x1
0x178b: xor eax,eax
0x178d: call 0x12d0
0x178d: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x1792
0x1792: cmp r12,rbp
0x1795: lea rcx,[rip+0x2b4f]
0x179c: lea rbp,[rip+0x2b2b]
0x17a3: cmove rbp,rcx
0x17a7: lea rsi,[rip+0x2e02]
0x17ae: mov edx,0x5
0x17b3: xor edi,edi
0x17b5: call 0x1190
0x17b5: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x17ba
0x17ba: mov edi,0x1
0x17bf: mov rsi,rax
0x17c2: mov rcx,rbp
0x17c5: mov rdx,r12
0x17c8: xor eax,eax
0x17ca: call 0x12d0
0x17ca: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x17cf
0x17cf: mov edi,ebx
0x17d1: call 0x1310
0x17d1: jump address is 0x1310
0x1310: jmp qword ptr [rip+0x204c92]
Execute the function: exit

0x16d8: mov rdi,qword ptr [rdx+0x10]
0x16dc: add rdx,0x10
0x16e0: test rdi,rdi
0x16e3: je 0x16f8
0x16e3: jump address is 0x16f8
0x16e5: mov ecx,0x6
0x16ea: mov rsi,rbp
0x16ed: repz cmps byte ptr ds:[rsi],byte ptr es:[rdi]
0x16ef: seta al
0x16f2: sbb al,0x0
0x16f4: test al,al
0x16f6: jne 0x16d8
0x16f6: jump address is 0x16d8
0x16f8: mov r12,qword ptr [rdx+0x8]
0x16fc: xor edi,edi
0x16fe: mov edx,0x5
0x1703: lea rsi,[rip+0x2c24]
0x170a: test r12,r12
0x170d: je 0x17d6
0x170d: jump address is 0x17d6
0x1713: call 0x1190
0x1713: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1718
0x1718: lea rcx,[rip+0x2e21]
0x171f: lea rdx,[rip+0x2c1f]
0x1726: mov rsi,rax
0x1729: mov edi,0x1
0x172e: xor eax,eax
0x1730: call 0x12d0
0x1730: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x1735
0x1735: xor esi,esi
0x1737: mov edi,0x5
0x173c: call 0x12c0
0x173c: jump address is 0x12c0
0x12c0: jmp qword ptr [rip+0x204cba]
Execute the function: setlocale

0x12c0: the return address is 0x1741
0x1741: test rax,rax
0x1744: je 0x1762
0x1744: jump address is 0x1762
0x1746: lea rsi,[rip+0x2c06]
0x174d: mov edx,0x3
0x1752: mov rdi,rax
0x1755: call 0x1130
0x1755: jump address is 0x1130
0x1130: jmp qword ptr [rip+0x204d82]
Execute the function: strncmp

0x1130: the return address is 0x175a
0x175a: test eax,eax
0x175c: jne 0x1828
0x175c: jump address is 0x1828
Block exists: lea rsi,[rip+0x2bee] at address 0x1762 is visited for 2 times

0x1828: mov r13,qword ptr [rip+0x204859]
0x182f: lea rsi,[rip+0x2d32]
0x1836: xor edi,edi
0x1838: mov edx,0x5
0x183d: call 0x1190
0x183d: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1842
0x1842: mov rsi,r13
0x1845: mov rdi,rax
0x1848: call 0x1220
0x1848: jump address is 0x1220
0x1220: jmp qword ptr [rip+0x204d0a]
Execute the function: fputs_unlocked

0x1220: the return address is 0x184d
0x184d: jmp 0x1762
0x184d: jump address is 0x1762
Block exists: lea rsi,[rip+0x2bee] at address 0x1762 is visited for 2 times

0x1762: lea rsi,[rip+0x2bee]
0x1769: xor edi,edi
0x176b: mov edx,0x5
0x1770: call 0x1190
0x1770: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1775
0x1775: lea rcx,[rip+0x2b48]
0x177c: lea rdx,[rip+0x2dbd]
0x1783: mov rsi,rax
0x1786: mov edi,0x1
0x178b: xor eax,eax
0x178d: call 0x12d0
0x178d: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x1792
0x1792: cmp r12,rbp
0x1795: lea rcx,[rip+0x2b4f]
0x179c: lea rbp,[rip+0x2b2b]
0x17a3: cmove rbp,rcx
0x17a7: lea rsi,[rip+0x2e02]
0x17ae: mov edx,0x5
0x17b3: xor edi,edi
0x17b5: call 0x1190
0x17b5: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x17ba
0x17ba: mov edi,0x1
0x17bf: mov rsi,rax
0x17c2: mov rcx,rbp
0x17c5: mov rdx,r12
0x17c8: xor eax,eax
0x17ca: call 0x12d0
0x17ca: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x17cf
0x17cf: mov edi,ebx
0x17d1: call 0x1310
0x17d1: jump address is 0x1310
0x1310: jmp qword ptr [rip+0x204c92]
Execute the function: exit

0x17a3: cmove rbp,rcx
0x17a7: lea rsi,[rip+0x2e02]
0x17ae: mov edx,0x5
0x17b3: xor edi,edi
0x17b5: call 0x1190
0x17b5: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x17ba
Block exists: mov edi,0x1 at address 0x17ba is visited for 2 times

0x17d6: call 0x1190
0x17d6: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x17db
0x17db: lea rcx,[rip+0x2d5e]
0x17e2: lea rdx,[rip+0x2b5c]
0x17e9: mov rsi,rax
0x17ec: mov edi,0x1
0x17f1: xor eax,eax
0x17f3: call 0x12d0
0x17f3: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x17f8
0x17f8: xor esi,esi
0x17fa: mov edi,0x5
0x17ff: call 0x12c0
0x17ff: jump address is 0x12c0
0x12c0: jmp qword ptr [rip+0x204cba]
Execute the function: setlocale

0x12c0: the return address is 0x1804
0x1804: test rax,rax
0x1807: je 0x1852
0x1807: jump address is 0x1852
0x1809: lea rsi,[rip+0x2b43]
0x1810: mov edx,0x3
0x1815: mov rdi,rax
0x1818: call 0x1130
0x1818: jump address is 0x1130
0x1130: jmp qword ptr [rip+0x204d82]
Execute the function: strncmp

0x1130: the return address is 0x181d
0x181d: test eax,eax
0x181f: je 0x1852
0x181f: jump address is 0x1852
Block exists: lea rsi,[rip+0x2afe] at address 0x1852 is visited for 1 times

0x1821: lea r12,[rip+0x2a9c]
0x1828: mov r13,qword ptr [rip+0x204859]
0x182f: lea rsi,[rip+0x2d32]
0x1836: xor edi,edi
0x1838: mov edx,0x5
0x183d: call 0x1190
0x183d: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1842
Block exists: mov rsi,r13 at address 0x1842 is visited for 2 times

0x1852: lea rsi,[rip+0x2afe]
0x1859: mov edx,0x5
0x185e: xor edi,edi
0x1860: lea r12,[rip+0x2a5d]
0x1867: lea rbp,[rip+0x2a7d]
0x186e: call 0x1190
0x186e: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x1873
0x1873: lea rcx,[rip+0x2a4a]
0x187a: lea rdx,[rip+0x2cbf]
0x1881: mov rsi,rax
0x1884: mov edi,0x1
0x1889: xor eax,eax
0x188b: call 0x12d0
0x188b: jump address is 0x12d0
0x12d0: jmp qword ptr [rip+0x204cb2]
Execute the function: __printf_chk

0x12d0: the return address is 0x1890
0x1890: jmp 0x17a7
0x1890: jump address is 0x17a7
0x17a7: lea rsi,[rip+0x2e02]
0x17ae: mov edx,0x5
0x17b3: xor edi,edi
0x17b5: call 0x1190
0x17b5: jump address is 0x1190
0x1190: jmp qword ptr [rip+0x204d52]
Execute the function: dcgettext

0x1190: the return address is 0x17ba
Block exists: mov edi,0x1 at address 0x17ba is visited for 2 times

0x16d8: mov rdi,qword ptr [rdx+0x10]
0x16dc: add rdx,0x10
0x16e0: test rdi,rdi
0x16e3: je 0x16f8
0x16e3: jump address is 0x16f8
Block exists: mov r12,qword ptr [rdx+0x8] at address 0x16f8 is visited for 2 times

Block exists: mov ecx,0x6 at address 0x16e5 is visited for 2 times

0x19dd: mov qword ptr [rip+0x2046dc],rbx
0x19e4: mov qword ptr [rip+0x2046a5],rbx
0x19eb: pop rbx
0x19ec: ret
0x19ec: the return address is 0x1397
0x1397: lea rsi,[rip+0x2f30]
0x139e: mov edi,0x6
0x13a3: call 0x12c0
0x13a3: jump address is 0x12c0
0x12c0: jmp qword ptr [rip+0x204cba]
Execute the function: setlocale

0x12c0: the return address is 0x13a8
Block exists: lea rsi,[rip+0x2fc3] at address 0x13a8 is visited for 1 times

0x19ed: mov rcx,qword ptr [rip+0x2046ac]
0x19f4: lea rdi,[rip+0x2c05]
0x19fb: mov edx,0x37
0x1a00: mov esi,0x1
0x1a05: call 0x1320
0x1a05: jump address is 0x1320
0x1320: jmp qword ptr [rip+0x204c8a]
Execute the function: fwrite

0x1320: the return address is 0x1a0a
0x1a0a: call 0x1110
0x1a0a: jump address is 0x1110
0x1110: jmp qword ptr [rip+0x204d92]
Execute the function: abort

Unreachable instructions:
0x10d8: sub rsp,0x8
0x10dc: mov rax,qword ptr [rip+0x204f05]
0x10e3: test rax,rax
0x10e6: je 0x10ea
0x10e8: call rax
0x10ea: add rsp,0x8
0x10ee: ret 
0x10f0: push qword ptr [rip+0x204d9a]
0x10f6: jmp qword ptr [rip+0x204d9c]
0x10fc: nop dword ptr [rax+0x0]
0x1100: jmp qword ptr [rip+0x204d9a]
0x1106: push 0x0
0x110b: jmp 0x10f0
0x1116: push 0x1
0x111b: jmp 0x10f0
0x1120: jmp qword ptr [rip+0x204d8a]
0x1126: push 0x2
0x112b: jmp 0x10f0
0x1136: push 0x3
0x113b: jmp 0x10f0
0x1140: jmp qword ptr [rip+0x204d7a]
0x1146: push 0x4
0x114b: jmp 0x10f0
0x1150: jmp qword ptr [rip+0x204d72]
0x1156: push 0x5
0x115b: jmp 0x10f0
0x1166: push 0x6
0x116b: jmp 0x10f0
0x1170: jmp qword ptr [rip+0x204d62]
0x1176: push 0x7
0x117b: jmp 0x10f0
0x1186: push 0x8
0x118b: jmp 0x10f0
0x1196: push 0x9
0x119b: jmp 0x10f0
0x11a0: jmp qword ptr [rip+0x204d4a]
0x11a6: push 0xa
0x11ab: jmp 0x10f0
0x11b0: jmp qword ptr [rip+0x204d42]
0x11b6: push 0xb
0x11bb: jmp 0x10f0
0x11c0: jmp qword ptr [rip+0x204d3a]
0x11c6: push 0xc
0x11cb: jmp 0x10f0
0x11d0: jmp qword ptr [rip+0x204d32]
0x11d6: push 0xd
0x11db: jmp 0x10f0
0x11e6: push 0xe
0x11eb: jmp 0x10f0
0x11f0: jmp qword ptr [rip+0x204d22]
0x11f6: push 0xf
0x11fb: jmp 0x10f0
0x1200: jmp qword ptr [rip+0x204d1a]
0x1206: push 0x10
0x120b: jmp 0x10f0
0x1210: jmp qword ptr [rip+0x204d12]
0x1216: push 0x11
0x121b: jmp 0x10f0
0x1226: push 0x12
0x122b: jmp 0x10f0
0x1230: jmp qword ptr [rip+0x204d02]
0x1236: push 0x13
0x123b: jmp 0x10f0
0x1246: push 0x14
0x124b: jmp 0x10f0
0x1250: jmp qword ptr [rip+0x204cf2]
0x1256: push 0x15
0x125b: jmp 0x10f0
0x1260: jmp qword ptr [rip+0x204cea]
0x1266: push 0x16
0x126b: jmp 0x10f0
0x1270: jmp qword ptr [rip+0x204ce2]
0x1276: push 0x17
0x127b: jmp 0x10f0
0x1280: jmp qword ptr [rip+0x204cda]
0x1286: push 0x18
0x128b: jmp 0x10f0
0x1290: jmp qword ptr [rip+0x204cd2]
0x1296: push 0x19
0x129b: jmp 0x10f0
0x12a0: jmp qword ptr [rip+0x204cca]
0x12a6: push 0x1a
0x12ab: jmp 0x10f0
0x12b0: jmp qword ptr [rip+0x204cc2]
0x12b6: push 0x1b
0x12bb: jmp 0x10f0
0x12c6: push 0x1c
0x12cb: jmp 0x10f0
0x12d6: push 0x1d
0x12db: jmp 0x10f0
0x12e0: jmp qword ptr [rip+0x204caa]
0x12e6: push 0x1e
0x12eb: jmp 0x10f0
0x12f0: jmp qword ptr [rip+0x204ca2]
0x12f6: push 0x1f
0x12fb: jmp 0x10f0
0x1306: push 0x20
0x130b: jmp 0x10f0
0x1316: push 0x21
0x131b: jmp 0x10f0
0x1326: push 0x22
0x132b: jmp 0x10f0
0x1336: push 0x23
0x133b: jmp 0x10f0
0x1340: jmp qword ptr [rip+0x204c7a]
0x1346: push 0x24
0x134b: jmp 0x10f0
0x1350: jmp qword ptr [rip+0x204c72]
0x1356: push 0x25
0x135b: jmp 0x10f0
0x1360: jmp qword ptr [rip+0x204c6a]
0x1366: push 0x26
0x136b: jmp 0x10f0
0x1370: jmp qword ptr [rip+0x204c82]
0x1376: xchg ax,ax
0x143b: nop dword ptr [rax+rax*1+0x0]
0x146a: hlt 
0x146b: nop dword ptr [rax+rax*1+0x0]
0x1470: lea rdi,[rip+0x204c09]
0x1477: push rbp
0x1478: lea rax,[rip+0x204c01]
0x147f: cmp rax,rdi
0x1482: mov rbp,rsp
0x1485: je 0x14a0
0x1487: mov rax,qword ptr [rip+0x204b4a]
0x148e: test rax,rax
0x1491: je 0x14a0
0x1493: pop rbp
0x1494: jmp rax
0x1496: nop word ptr cs:[rax+rax*1+0x0]
0x14a0: pop rbp
0x14a1: ret 
0x14a2: nop dword ptr [rax+0x0]
0x14a6: nop word ptr cs:[rax+rax*1+0x0]
0x14b0: lea rdi,[rip+0x204bc9]
0x14b7: lea rsi,[rip+0x204bc2]
0x14be: push rbp
0x14bf: sub rsi,rdi
0x14c2: mov rbp,rsp
0x14c5: sar rsi,0x3
0x14c9: mov rax,rsi
0x14cc: shr rax,0x3f
0x14d0: add rsi,rax
0x14d3: sar rsi,0x1
0x14d6: je 0x14f0
0x14d8: mov rax,qword ptr [rip+0x204b11]
0x14df: test rax,rax
0x14e2: je 0x14f0
0x14e4: pop rbp
0x14e5: jmp rax
0x14e7: nop word ptr [rax+rax*1+0x0]
0x14f0: pop rbp
0x14f1: ret 
0x14f2: nop dword ptr [rax+0x0]
0x14f6: nop word ptr cs:[rax+rax*1+0x0]
0x1500: cmp byte ptr [rip+0x204ba1],0x0
0x1507: jne 0x1538
0x1509: cmp qword ptr [rip+0x204ae7],0x0
0x1511: push rbp
0x1512: mov rbp,rsp
0x1515: je 0x1523
0x1517: mov rdi,qword ptr [rip+0x204aea]
0x151e: call 0x1370
0x1523: call 0x1470
0x1528: mov byte ptr [rip+0x204b79],0x1
0x152f: pop rbp
0x1530: ret 
0x1531: nop dword ptr [rax+0x0]
0x1538: repz ret 
0x153a: nop word ptr [rax+rax*1+0x0]
0x1540: push rbp
0x1541: mov rbp,rsp
0x1544: pop rbp
0x1545: jmp 0x14b0
0x154a: nop word ptr [rax+rax*1+0x0]
0x16d2: nop word ptr [rax+rax*1+0x0]
0x1895: nop word ptr cs:[rax+rax*1+0x0]
0x189f: nop 
0x18a0: mov qword ptr [rip+0x204811],rdi
0x18a7: ret 
0x18a8: nop dword ptr [rax+rax*1+0x0]
0x18b0: mov byte ptr [rip+0x2047f9],dil
0x18b7: ret 
0x18b8: nop dword ptr [rax+rax*1+0x0]
0x18c0: push rbp
0x18c1: push rbx
0x18c2: sub rsp,0x8
0x18c6: mov rdi,qword ptr [rip+0x2047bb]
0x18cd: call 0x3fe0
0x18d2: test eax,eax
0x18d4: je 0x18ec
0x18d6: call 0x1120
0x18db: cmp byte ptr [rip+0x2047ce],0x0
0x18e2: mov rbx,rax
0x18e5: je 0x1903
0x18e7: cmp dword ptr [rax],0x20
0x18ea: jne 0x1903
0x18ec: mov rdi,qword ptr [rip+0x2047ad]
0x18f3: call 0x3fe0
0x18f8: test eax,eax
0x18fa: jne 0x1942
0x18fc: add rsp,0x8
0x1900: pop rbx
0x1901: pop rbp
0x1902: ret 
0x1903: lea rsi,[rip+0x2cde]
0x190a: xor edi,edi
0x190c: mov edx,0x5
0x1911: call 0x1190
0x1916: mov rdi,qword ptr [rip+0x20479b]
0x191d: mov rbp,rax
0x1920: test rdi,rdi
0x1923: je 0x194d
0x1925: call 0x3480
0x192a: mov esi,dword ptr [rbx]
0x192c: lea rdx,[rip+0x2cc1]
0x1933: mov rcx,rax
0x1936: mov r8,rbp
0x1939: xor edi,edi
0x193b: xor eax,eax
0x193d: call 0x12e0
0x1942: mov edi,dword ptr [rip+0x2046d0]
0x1948: call 0x1140
0x194d: mov esi,dword ptr [rbx]
0x194f: lea rdx,[rip+0x2ca2]
0x1956: mov rcx,rax
0x1959: xor edi,edi
0x195b: xor eax,eax
0x195d: call 0x12e0
0x1962: jmp 0x1942
0x1964: nop word ptr cs:[rax+rax*1+0x0]
0x196e: xchg ax,ax
0x1a0f: nop 
0x1a10: push rbp
0x1a11: push rbx
0x1a12: mov rbp,rdi
0x1a15: mov ebx,esi
0x1a17: sub rsp,0x8
0x1a1b: call 0x40c0
0x1a20: movzx edx,byte ptr [rax]
0x1a23: and edx,0xffffffdf
0x1a26: cmp dl,0x55
0x1a29: je 0x1aa0
0x1a2b: cmp dl,0x47
0x1a2e: je 0x1a50
0x1a30: lea rax,[rip+0x2c1c]
0x1a37: lea rdx,[rip+0x2c17]
0x1a3e: cmp ebx,0x9
0x1a41: cmovne rax,rdx
0x1a45: add rsp,0x8
0x1a49: pop rbx
0x1a4a: pop rbp
0x1a4b: ret 
0x1a4c: nop dword ptr [rax+0x0]
0x1a50: movzx edx,byte ptr [rax+0x1]
0x1a54: and edx,0xffffffdf
0x1a57: cmp dl,0x42
0x1a5a: jne 0x1a30
0x1a5c: cmp byte ptr [rax+0x2],0x31
0x1a60: jne 0x1a30
0x1a62: cmp byte ptr [rax+0x3],0x38
0x1a66: jne 0x1a30
0x1a68: cmp byte ptr [rax+0x4],0x30
0x1a6c: jne 0x1a30
0x1a6e: cmp byte ptr [rax+0x5],0x33
0x1a72: jne 0x1a30
0x1a74: cmp byte ptr [rax+0x6],0x30
0x1a78: jne 0x1a30
0x1a7a: cmp byte ptr [rax+0x7],0x0
0x1a7e: jne 0x1a30
0x1a80: cmp byte ptr [rbp+0x0],0x60
0x1a84: lea rax,[rip+0x2bc1]
0x1a8b: lea rdx,[rip+0x2bbe]
0x1a92: cmovne rax,rdx
0x1a96: add rsp,0x8
0x1a9a: pop rbx
0x1a9b: pop rbp
0x1a9c: ret 
0x1a9d: nop dword ptr [rax]
0x1aa0: movzx edx,byte ptr [rax+0x1]
0x1aa4: and edx,0xffffffdf
0x1aa7: cmp dl,0x54
0x1aaa: jne 0x1a30
0x1aac: movzx edx,byte ptr [rax+0x2]
0x1ab0: and edx,0xffffffdf
0x1ab3: cmp dl,0x46
0x1ab6: jne 0x1a30
0x1abc: cmp byte ptr [rax+0x3],0x2d
0x1ac0: jne 0x1a30
0x1ac6: cmp byte ptr [rax+0x4],0x38
0x1aca: jne 0x1a30
0x1ad0: cmp byte ptr [rax+0x5],0x0
0x1ad4: jne 0x1a30
0x1ada: cmp byte ptr [rbp+0x0],0x60
0x1ade: lea rax,[rip+0x2b5f]
0x1ae5: lea rdx,[rip+0x2b5c]
0x1aec: cmovne rax,rdx
0x1af0: add rsp,0x8
0x1af4: pop rbx
0x1af5: pop rbp
0x1af6: ret 
0x1af7: nop word ptr [rax+rax*1+0x0]
0x1b00: push r15
0x1b02: push r14
0x1b04: mov r15d,r8d
0x1b07: push r13
0x1b09: push r12
0x1b0b: mov r14,rdi
0x1b0e: push rbp
0x1b0f: push rbx
0x1b10: mov ebx,r9d
0x1b13: mov r13,rsi
0x1b16: mov rbp,rcx
0x1b19: and ebx,0x2
0x1b1c: sub rsp,0xb8
0x1b23: mov rax,qword ptr [rsp+0xf0]
0x1b2b: mov qword ptr [rsp+0x10],rdx
0x1b30: mov dword ptr [rsp+0x8],r8d
0x1b35: mov dword ptr [rsp+0x78],r9d
0x1b3a: mov qword ptr [rsp+0x20],rax
0x1b3f: mov rax,qword ptr [rsp+0xf8]
0x1b47: mov qword ptr [rsp+0x68],rax
0x1b4c: mov rax,qword ptr [rsp+0x100]
0x1b54: mov qword ptr [rsp+0x60],rax
0x1b59: mov rax,qword ptr fs:0x28
0x1b62: mov qword ptr [rsp+0xa8],rax
0x1b6a: xor eax,eax
0x1b6c: call 0x11a0
0x1b71: cmp r15d,0xa
0x1b75: mov qword ptr [rsp+0x58],rax
0x1b7a: ja 0x2d2f
0x1b80: lea rcx,[rip+0x2b39]
0x1b87: mov edx,r15d
0x1b8a: movsxd rax,dword ptr [rcx+rdx*4]
0x1b8e: add rax,rcx
0x1b91: jmp rax
0x1b93: mov byte ptr [rsp+0xe],0x1
0x1b98: mov byte ptr [rsp+0x7c],0x0
0x1b9d: xor r12d,r12d
0x1ba0: mov qword ptr [rsp+0x50],0x0
0x1ba9: mov byte ptr [rsp+0xf],0x1
0x1bae: mov byte ptr [rsp+0xd],0x0
0x1bb3: lea rax,[rip+0x2a9b]
0x1bba: mov qword ptr [rsp+0x18],0x1
0x1bc3: xor r15d,r15d
0x1bc6: mov dword ptr [rsp+0x8],0x2
0x1bce: mov qword ptr [rsp+0x48],rax
0x1bd3: xor r11d,r11d
0x1bd6: mov rax,rbp
0x1bd9: mov r8d,r12d
0x1bdc: mov rbp,r11
0x1bdf: mov r11,rax
0x1be2: nop word ptr [rax+rax*1+0x0]
0x1be8: cmp r11,rbp
0x1beb: setne r12b
0x1bef: cmp r11,0xffffffffffffffff
0x1bf3: jne 0x1c02
0x1bf5: mov rax,qword ptr [rsp+0x10]
0x1bfa: cmp byte ptr [rax+rbp*1],0x0
0x1bfe: setne r12b
0x1c02: test r12b,r12b
0x1c05: je 0x2260
0x1c0b: cmp dword ptr [rsp+0x8],0x2
0x1c10: mov rdi,qword ptr [rsp+0x10]
0x1c15: lea r9,[rdi+rbp*1]
0x1c19: setne al
0x1c1c: and al,byte ptr [rsp+0xd]
0x1c20: mov r10d,eax
0x1c23: je 0x1cd0
0x1c29: mov rax,qword ptr [rsp+0x18]
0x1c2e: test rax,rax
0x1c31: je 0x2060
0x1c37: cmp r11,0xffffffffffffffff
0x1c3b: lea rbx,[rbp+rax*1+0x0]
0x1c40: jne 0x1c70
0x1c42: cmp rax,0x1
0x1c46: jbe 0x1c70
0x1c48: mov byte ptr [rsp+0x38],r8b
0x1c4d: mov byte ptr [rsp+0x30],r10b
0x1c52: mov qword ptr [rsp+0x28],r9
0x1c57: call 0x11b0
0x1c5c: movzx r8d,byte ptr [rsp+0x38]
0x1c62: movzx r10d,byte ptr [rsp+0x30]
0x1c68: mov r11,rax
0x1c6b: mov r9,qword ptr [rsp+0x28]
0x1c70: cmp rbx,r11
0x1c73: mov byte ptr [rsp+0x28],r10b
0x1c78: ja 0x2230
0x1c7e: mov rdx,qword ptr [rsp+0x18]
0x1c83: mov rsi,qword ptr [rsp+0x48]
0x1c88: mov rdi,r9
0x1c8b: mov qword ptr [rsp+0x40],r11
0x1c90: mov byte ptr [rsp+0x38],r8b
0x1c95: mov qword ptr [rsp+0x30],r9
0x1c9a: call 0x1210
0x1c9f: test eax,eax
0x1ca1: mov r9,qword ptr [rsp+0x30]
0x1ca6: movzx r8d,byte ptr [rsp+0x38]
0x1cac: mov r11,qword ptr [rsp+0x40]
0x1cb1: jne 0x2230
0x1cb7: cmp byte ptr [rsp+0xf],0x0
0x1cbc: movzx r10d,byte ptr [rsp+0x28]
0x1cc2: jne 0x2c45
0x1cc8: nop dword ptr [rax+rax*1+0x0]
0x1cd0: movzx ebx,byte ptr [r9]
0x1cd4: cmp bl,0x7e
0x1cd7: ja 0x1ff8
0x1cdd: lea rcx,[rip+0x2a08]
0x1ce4: movzx edx,bl
0x1ce7: movsxd rax,dword ptr [rcx+rdx*4]
0x1ceb: add rax,rcx
0x1cee: jmp rax
0x1cf0: xor r10d,r10d
0x1cf3: cmp r11,0x1
0x1cf7: setne al
0x1cfa: cmp r11,0xffffffffffffffff
0x1cfe: jne 0x1d0c
0x1d00: mov rax,qword ptr [rsp+0x10]
0x1d05: cmp byte ptr [rax+0x1],0x0
0x1d09: setne al
0x1d0c: cmp dword ptr [rsp+0x8],0x2
0x1d11: sete dl
0x1d14: test al,al
0x1d16: je 0x1f68
0x1d1c: xor r12d,r12d
0x1d1f: xor eax,eax
0x1d21: nop dword ptr [rax+0x0]
0x1d28: cmp byte ptr [rsp+0xd],0x1
0x1d2d: jne 0x1e42
0x1d33: test dl,dl
0x1d35: jne 0x1e42
0x1d3b: mov rsi,qword ptr [rsp+0x20]
0x1d40: test rsi,rsi
0x1d43: je 0x1d59
0x1d45: mov edx,ebx
0x1d47: shr dl,0x5
0x1d4a: movzx edx,dl
0x1d4d: mov edx,dword ptr [rsi+rdx*4]
0x1d50: bt edx,ebx
0x1d53: jb 0x1ea3
0x1d59: test r10b,r10b
0x1d5c: jne 0x1ea3
0x1d62: xor eax,0x1
0x1d65: add rbp,0x1
0x1d69: and eax,r8d
0x1d6c: test al,al
0x1d6e: je 0x1d90
0x1d70: cmp r13,r15
0x1d73: jbe 0x1d7a
0x1d75: mov byte ptr [r14+r15*1],0x27
0x1d7a: lea rax,[r15+0x1]
0x1d7e: cmp r13,rax
0x1d81: jbe 0x1d89
0x1d83: mov byte ptr [r14+r15*1+0x1],0x27
0x1d89: add r15,0x2
0x1d8d: xor r8d,r8d
0x1d90: cmp r15,r13
0x1d93: jae 0x1d99
0x1d95: mov byte ptr [r14+r15*1],bl
0x1d99: movzx edi,byte ptr [rsp+0xe]
0x1d9e: add r15,0x1
0x1da2: mov eax,0x0
0x1da7: test r12b,r12b
0x1daa: cmove edi,eax
0x1dad: mov byte ptr [rsp+0xe],dil
0x1db2: jmp 0x1be8
0x1db7: nop word ptr [rax+rax*1+0x0]
0x1dc0: xor r10d,r10d
0x1dc3: mov eax,dword ptr [rsp+0x8]
0x1dc7: cmp eax,0x2
0x1dca: je 0x2388
0x1dd0: cmp eax,0x5
0x1dd3: je 0x2348
0x1dd9: cmp eax,0x2
0x1ddc: mov ebx,0x3f
0x1de1: sete dl
0x1de4: xor r12d,r12d
0x1de7: xor eax,eax
0x1de9: jmp 0x1d28
0x1dee: xchg ax,ax
0x1df0: xor r10d,r10d
0x1df3: cmp dword ptr [rsp+0x8],0x2
0x1df8: je 0x2300
0x1dfe: mov byte ptr [rsp+0x7c],r12b
0x1e03: xor edx,edx
0x1e05: xor eax,eax
0x1e07: mov ebx,0x27
0x1e0c: jmp 0x1d28
0x1e11: nop dword ptr [rax+0x0]
0x1e18: mov edx,0x9
0x1e1d: mov ebx,0x74
0x1e22: cmp dword ptr [rsp+0x8],0x2
0x1e27: sete al
0x1e2a: and al,byte ptr [rsp+0xf]
0x1e2e: jne 0x1f7e
0x1e34: cmp byte ptr [rsp+0xd],0x0
0x1e39: jne 0x1ea0
0x1e3b: mov ebx,edx
0x1e3d: xor r12d,r12d
0x1e40: xor eax,eax
0x1e42: cmp byte ptr [rsp+0xf],0x0
0x1e47: jne 0x1d3b
0x1e4d: jmp 0x1d59
0x1e52: nop word ptr [rax+rax*1+0x0]
0x1e58: mov edx,0x8
0x1e5d: mov ebx,0x62
0x1e62: jmp 0x1e34
0x1e64: nop dword ptr [rax+0x0]
0x1e68: cmp dword ptr [rsp+0x8],0x2
0x1e6d: je 0x2240
0x1e73: cmp byte ptr [rsp+0xd],0x0
0x1e78: je 0x2090
0x1e7e: cmp byte ptr [rsp+0xf],0x0
0x1e83: je 0x2090
0x1e89: cmp qword ptr [rsp+0x18],0x0
0x1e8f: jne 0x224b
0x1e95: mov ebx,0x5c
0x1e9a: nop word ptr [rax+rax*1+0x0]
0x1ea0: xor r12d,r12d
0x1ea3: cmp dword ptr [rsp+0x8],0x2
0x1ea8: sete dl
0x1eab: cmp byte ptr [rsp+0xf],0x0
0x1eb0: mov eax,edx
0x1eb2: jne 0x2708
0x1eb8: mov eax,r8d
0x1ebb: xor eax,0x1
0x1ebe: and al,dl
0x1ec0: je 0x1ef1
0x1ec2: cmp r13,r15
0x1ec5: jbe 0x1ecc
0x1ec7: mov byte ptr [r14+r15*1],0x27
0x1ecc: lea rdx,[r15+0x1]
0x1ed0: cmp r13,rdx
0x1ed3: jbe 0x1edb
0x1ed5: mov byte ptr [r14+r15*1+0x1],0x24
0x1edb: lea rdx,[r15+0x2]
0x1edf: cmp r13,rdx
0x1ee2: jbe 0x1eea
0x1ee4: mov byte ptr [r14+r15*1+0x2],0x27
0x1eea: add r15,0x3
0x1eee: mov r8d,eax
0x1ef1: cmp r13,r15
0x1ef4: jbe 0x1efb
0x1ef6: mov byte ptr [r14+r15*1],0x5c
0x1efb: add r15,0x1
0x1eff: add rbp,0x1
0x1f03: jmp 0x1d90
0x1f08: nop dword ptr [rax+rax*1+0x0]
0x1f10: cmp byte ptr [rsp+0xd],0x0
0x1f15: jne 0x20e3
0x1f1b: xor edx,edx
0x1f1d: test byte ptr [rsp+0x78],0x1
0x1f22: je 0x1e3b
0x1f28: add rbp,0x1
0x1f2c: jmp 0x1be8
0x1f31: nop dword ptr [rax+0x0]
0x1f38: cmp dword ptr [rsp+0x8],0x2
0x1f3d: sete dl
0x1f40: xor eax,eax
0x1f42: jmp 0x1d28
0x1f47: nop word ptr [rax+rax*1+0x0]
0x1f50: mov edx,0x7
0x1f55: mov ebx,0x61
0x1f5a: jmp 0x1e34
0x1f5f: nop 
0x1f60: cmp dword ptr [rsp+0x8],0x2
0x1f65: sete dl
0x1f68: test rbp,rbp
0x1f6b: jne 0x1d1c
0x1f71: movzx eax,byte ptr [rsp+0xf]
0x1f76: and al,dl
0x1f78: je 0x1d28
0x1f7e: mov rbp,r11
0x1f81: mov dword ptr [rsp+0x8],0x2
0x1f89: jmp 0x2689
0x1f8e: xchg ax,ax
0x1f90: cmp dword ptr [rsp+0x8],0x2
0x1f95: sete dl
0x1f98: xor r12d,r12d
0x1f9b: jmp 0x1f71
0x1f9d: nop dword ptr [rax]
0x1fa0: cmp dword ptr [rsp+0x8],0x2
0x1fa5: mov ebx,0x20
0x1faa: sete dl
0x1fad: jmp 0x1f71
0x1faf: nop 
0x1fb0: mov edx,0xd
0x1fb5: mov ebx,0x72
0x1fba: jmp 0x1e22
0x1fbf: nop 
0x1fc0: mov edx,0xc
0x1fc5: mov ebx,0x66
0x1fca: jmp 0x1e34
0x1fcf: nop 
0x1fd0: mov edx,0xb
0x1fd5: mov ebx,0x76
0x1fda: jmp 0x1e34
0x1fdf: nop 
0x1fe0: mov edx,0xa
0x1fe5: mov ebx,0x6e
0x1fea: jmp 0x1e22
0x1fef: nop 
0x1ff0: xor r10d,r10d
0x1ff3: nop dword ptr [rax+rax*1+0x0]
0x1ff8: cmp qword ptr [rsp+0x58],0x1
0x1ffe: jne 0x23a8
0x2004: mov qword ptr [rsp+0x38],r11
0x2009: mov byte ptr [rsp+0x30],r8b
0x200e: mov byte ptr [rsp+0x28],r10b
0x2013: call 0x1360
0x2018: mov rcx,qword ptr [rax]
0x201b: movzx edx,bl
0x201e: movzx r10d,byte ptr [rsp+0x28]
0x2024: movzx r8d,byte ptr [rsp+0x30]
0x202a: mov r11,qword ptr [rsp+0x38]
0x202f: mov edi,0x1
0x2034: movzx eax,word ptr [rcx+rdx*2]
0x2038: and ax,0x4000
0x203c: setne r12b
0x2040: sete al
0x2043: and al,byte ptr [rsp+0xd]
0x2047: test al,al
0x2049: jne 0x29e1
0x204f: cmp dword ptr [rsp+0x8],0x2
0x2054: sete dl
0x2057: jmp 0x1d28
0x205c: nop dword ptr [rax+0x0]
0x2060: movzx ebx,byte ptr [r9]
0x2064: cmp bl,0x7e
0x2067: ja 0x1ff0
0x2069: lea rcx,[rip+0x2878]
0x2070: movzx edx,bl
0x2073: movsxd rax,dword ptr [rcx+rdx*4]
0x2077: add rax,rcx
0x207a: jmp rax
0x207c: nop dword ptr [rax+0x0]
0x2080: xor r10d,r10d
0x2083: cmp byte ptr [rsp+0xd],0x0
0x2088: jne 0x1e7e
0x208e: xchg ax,ax
0x2090: mov edx,0x5c
0x2095: mov ebx,0x5c
0x209a: jmp 0x1e34
0x209f: nop 
0x20a0: mov edx,0xc
0x20a5: xor r10d,r10d
0x20a8: mov ebx,0x66
0x20ad: jmp 0x1e34
0x20b2: nop word ptr [rax+rax*1+0x0]
0x20b8: mov edx,0xa
0x20bd: xor r10d,r10d
0x20c0: mov ebx,0x6e
0x20c5: jmp 0x1e22
0x20ca: nop word ptr [rax+rax*1+0x0]
0x20d0: mov ebx,0x61
0x20d5: jmp 0x1ea0
0x20da: nop word ptr [rax+rax*1+0x0]
0x20e0: xor r10d,r10d
0x20e3: cmp dword ptr [rsp+0x8],0x2
0x20e8: sete dl
0x20eb: cmp byte ptr [rsp+0xf],0x0
0x20f0: jne 0x2c8a
0x20f6: mov eax,r8d
0x20f9: mov rcx,r15
0x20fc: xor eax,0x1
0x20ff: and al,dl
0x2101: je 0x2130
0x2103: cmp r13,r15
0x2106: jbe 0x210d
0x2108: mov byte ptr [r14+r15*1],0x27
0x210d: lea rcx,[r15+0x1]
0x2111: cmp r13,rcx
0x2114: jbe 0x211c
0x2116: mov byte ptr [r14+r15*1+0x1],0x24
0x211c: lea rcx,[r15+0x2]
0x2120: cmp r13,rcx
0x2123: ja 0x2759
0x2129: lea rcx,[r15+0x3]
0x212d: mov r8d,eax
0x2130: cmp r13,rcx
0x2133: jbe 0x213a
0x2135: mov byte ptr [r14+rcx*1],0x5c
0x213a: cmp dword ptr [rsp+0x8],0x2
0x213f: lea r15,[rcx+0x1]
0x2143: je 0x2749
0x2149: lea rax,[rbp+0x1]
0x214d: cmp rax,r11
0x2150: jae 0x216b
0x2152: mov rax,qword ptr [rsp+0x10]
0x2157: movzx eax,byte ptr [rax+rbp*1+0x1]
0x215c: mov byte ptr [rsp+0x28],al
0x2160: sub eax,0x30
0x2163: cmp al,0x9
0x2165: jbe 0x2999
0x216b: mov eax,r12d
0x216e: mov ebx,0x30
0x2173: xor r12d,r12d
0x2176: jmp 0x1d28
0x217b: nop dword ptr [rax+rax*1+0x0]
0x2180: cmp dword ptr [rsp+0x8],0x2
0x2185: mov r12d,r10d
0x2188: sete dl
0x218b: xor r10d,r10d
0x218e: xor eax,eax
0x2190: jmp 0x1d28
0x2195: nop dword ptr [rax]
0x2198: cmp dword ptr [rsp+0x8],0x2
0x219d: sete dl
0x21a0: xor r10d,r10d
0x21a3: jmp 0x1f68
0x21a8: nop dword ptr [rax+rax*1+0x0]
0x21b0: cmp dword ptr [rsp+0x8],0x2
0x21b5: sete dl
0x21b8: xor r10d,r10d
0x21bb: xor r12d,r12d
0x21be: jmp 0x1f71
0x21c3: nop dword ptr [rax+rax*1+0x0]
0x21c8: cmp dword ptr [rsp+0x8],0x2
0x21cd: mov r12d,r10d
0x21d0: mov ebx,0x20
0x21d5: sete dl
0x21d8: xor r10d,r10d
0x21db: jmp 0x1f71
0x21e0: mov edx,0xd
0x21e5: xor r10d,r10d
0x21e8: mov ebx,0x72
0x21ed: jmp 0x1e22
0x21f2: nop word ptr [rax+rax*1+0x0]
0x21f8: mov ebx,0x76
0x21fd: jmp 0x1ea0
0x2202: nop word ptr [rax+rax*1+0x0]
0x2208: mov edx,0x9
0x220d: xor r10d,r10d
0x2210: mov ebx,0x74
0x2215: jmp 0x1e22
0x221a: nop word ptr [rax+rax*1+0x0]
0x2220: mov ebx,0x62
0x2225: jmp 0x1ea0
0x222a: nop word ptr [rax+rax*1+0x0]
0x2230: xor r10d,r10d
0x2233: jmp 0x1cd0
0x2238: nop dword ptr [rax+rax*1+0x0]
0x2240: cmp byte ptr [rsp+0xf],0x0
0x2245: jne 0x2bb0
0x224b: add rbp,0x1
0x224f: mov eax,r8d
0x2252: xor r12d,r12d
0x2255: mov ebx,0x5c
0x225a: jmp 0x1d6c
0x225f: nop 
0x2260: cmp dword ptr [rsp+0x8],0x2
0x2265: movzx ebx,byte ptr [rsp+0xf]
0x226a: mov r12d,r8d
0x226d: mov rbp,r11
0x2270: sete dl
0x2273: mov eax,ebx
0x2275: test r15,r15
0x2278: sete cl
0x227b: and eax,edx
0x227d: and al,cl
0x227f: jne 0x2ce6
0x2285: mov eax,ebx
0x2287: xor eax,0x1
0x228a: and dl,al
0x228c: je 0x2bfc
0x2292: cmp byte ptr [rsp+0x7c],0x0
0x2297: je 0x2bfa
0x229d: cmp byte ptr [rsp+0xe],0x0
0x22a2: jne 0x2c9d
0x22a8: test r13,r13
0x22ab: sete al
0x22ae: cmp qword ptr [rsp+0x50],0x0
0x22b4: setne dl
0x22b7: and al,dl
0x22b9: je 0x2cdc
0x22bf: mov r13,qword ptr [rsp+0x50]
0x22c4: lea rbx,[rip+0x238a]
0x22cb: mov byte ptr [r14],0x27
0x22cf: mov dword ptr [rsp+0x8],0x2
0x22d7: mov r15d,0x1
0x22dd: mov qword ptr [rsp+0x18],0x1
0x22e6: mov byte ptr [rsp+0xf],0x0
0x22eb: mov qword ptr [rsp+0x48],rbx
0x22f0: mov byte ptr [rsp+0x7c],al
0x22f4: jmp 0x1bd3
0x22f9: nop dword ptr [rax+0x0]
0x2300: cmp byte ptr [rsp+0xf],0x0
0x2305: jne 0x2bb0
0x230b: test r13,r13
0x230e: je 0x2710
0x2314: xor edx,edx
0x2316: cmp qword ptr [rsp+0x50],0x0
0x231c: jne 0x2710
0x2322: mov qword ptr [rsp+0x50],r13
0x2327: add r15,0x3
0x232b: xor eax,eax
0x232d: mov byte ptr [rsp+0x7c],r12b
0x2332: xor r8d,r8d
0x2335: mov r13,rdx
0x2338: mov ebx,0x27
0x233d: jmp 0x1d59
0x2342: nop word ptr [rax+rax*1+0x0]
0x2348: test byte ptr [rsp+0x78],0x4
0x234d: je 0x2370
0x234f: lea rcx,[rbp+0x2]
0x2353: cmp rcx,r11
0x2356: jae 0x2370
0x2358: mov rax,qword ptr [rsp+0x10]
0x235d: cmp byte ptr [rax+rbp*1+0x1],0x3f
0x2362: je 0x2af2
0x2368: nop dword ptr [rax+rax*1+0x0]
0x2370: xor edx,edx
0x2372: xor r12d,r12d
0x2375: xor eax,eax
0x2377: mov ebx,0x3f
0x237c: jmp 0x1d28
0x2381: nop dword ptr [rax+0x0]
0x2388: cmp byte ptr [rsp+0xf],0x0
0x238d: jne 0x2bb0
0x2393: xor r12d,r12d
0x2396: xor eax,eax
0x2398: mov ebx,0x3f
0x239d: jmp 0x1d59
0x23a2: nop word ptr [rax+rax*1+0x0]
0x23a8: lea rax,[rsp+0xa0]
0x23b0: cmp r11,0xffffffffffffffff
0x23b4: mov qword ptr [rsp+0xa0],0x0
0x23c0: mov qword ptr [rsp+0x28],rax
0x23c5: jne 0x23f4
0x23c7: mov rdi,qword ptr [rsp+0x10]
0x23cc: mov byte ptr [rsp+0x40],r8b
0x23d1: mov byte ptr [rsp+0x38],r10b
0x23d6: mov qword ptr [rsp+0x30],r9
0x23db: call 0x11b0
0x23e0: movzx r8d,byte ptr [rsp+0x40]
0x23e6: movzx r10d,byte ptr [rsp+0x38]
0x23ec: mov r11,rax
0x23ef: mov r9,qword ptr [rsp+0x30]
0x23f4: lea rax,[rsp+0x9c]
0x23fc: xor ecx,ecx
0x23fe: mov byte ptr [rsp+0x7e],bl
0x2402: mov byte ptr [rsp+0x7d],r8b
0x2407: mov rbx,rcx
0x240a: mov qword ptr [rsp+0x88],r9
0x2412: mov qword ptr [rsp+0x38],rax
0x2417: mov byte ptr [rsp+0x7f],r10b
0x241c: mov qword ptr [rsp+0x80],r15
0x2424: mov qword ptr [rsp+0x40],r14
0x2429: mov qword ptr [rsp+0x70],r13
0x242e: mov qword ptr [rsp+0x30],r11
0x2433: mov rax,qword ptr [rsp+0x10]
0x2438: lea r14,[rbp+rbx*1+0x0]
0x243d: mov rdx,qword ptr [rsp+0x30]
0x2442: mov rcx,qword ptr [rsp+0x28]
0x2447: mov rdi,qword ptr [rsp+0x38]
0x244c: lea r13,[rax+r14*1]
0x2450: sub rdx,r14
0x2453: mov rsi,r13
0x2456: call 0x3f50
0x245b: test rax,rax
0x245e: mov r15,rax
0x2461: je 0x24b1
0x2463: cmp rax,0xffffffffffffffff
0x2467: je 0x2a85
0x246d: cmp rax,0xfffffffffffffffe
0x2471: je 0x2a11
0x2477: cmp dword ptr [rsp+0x8],0x2
0x247c: sete al
0x247f: and al,byte ptr [rsp+0xf]
0x2483: jne 0x2620
0x2489: mov edi,dword ptr [rsp+0x9c]
0x2490: call 0x1350
0x2495: mov rdi,qword ptr [rsp+0x28]
0x249a: test eax,eax
0x249c: mov eax,0x0
0x24a1: cmove r12d,eax
0x24a5: add rbx,r15
0x24a8: call 0x1340
0x24ad: test eax,eax
0x24af: je 0x2433
0x24b1: mov edx,r12d
0x24b4: mov rdi,rbx
0x24b7: movzx r8d,byte ptr [rsp+0x7d]
0x24bd: xor edx,0x1
0x24c0: movzx ebx,byte ptr [rsp+0x7e]
0x24c5: movzx r10d,byte ptr [rsp+0x7f]
0x24cb: and dl,byte ptr [rsp+0xd]
0x24cf: mov r15,qword ptr [rsp+0x80]
0x24d7: mov r14,qword ptr [rsp+0x40]
0x24dc: mov r13,qword ptr [rsp+0x70]
0x24e1: mov r11,qword ptr [rsp+0x30]
0x24e6: cmp rdi,0x1
0x24ea: jbe 0x2aeb
0x24f0: mov rcx,rdi
0x24f3: xor esi,esi
0x24f5: movzx r9d,byte ptr [rsp+0xf]
0x24fb: add rcx,rbp
0x24fe: mov rdi,qword ptr [rsp+0x10]
0x2503: jmp 0x25be
0x2508: nop dword ptr [rax+rax*1+0x0]
0x2510: cmp dword ptr [rsp+0x8],0x2
0x2515: sete al
0x2518: test r9b,r9b
0x251b: jne 0x29d0
0x2521: mov esi,r8d
0x2524: xor esi,0x1
0x2527: and al,sil
0x252a: je 0x255b
0x252c: cmp r13,r15
0x252f: jbe 0x2536
0x2531: mov byte ptr [r14+r15*1],0x27
0x2536: lea rsi,[r15+0x1]
0x253a: cmp r13,rsi
0x253d: jbe 0x2545
0x253f: mov byte ptr [r14+r15*1+0x1],0x24
0x2545: lea rsi,[r15+0x2]
0x2549: cmp r13,rsi
0x254c: jbe 0x2554
0x254e: mov byte ptr [r14+r15*1+0x2],0x27
0x2554: add r15,0x3
0x2558: mov r8d,eax
0x255b: cmp r13,r15
0x255e: jbe 0x2565
0x2560: mov byte ptr [r14+r15*1],0x5c
0x2565: lea rax,[r15+0x1]
0x2569: cmp r13,rax
0x256c: jbe 0x257b
0x256e: mov eax,ebx
0x2570: shr al,0x6
0x2573: add eax,0x30
0x2576: mov byte ptr [r14+r15*1+0x1],al
0x257b: lea rax,[r15+0x2]
0x257f: cmp r13,rax
0x2582: jbe 0x2594
0x2584: mov eax,ebx
0x2586: shr al,0x3
0x2589: and eax,0x7
0x258c: add eax,0x30
0x258f: mov byte ptr [r14+r15*1+0x2],al
0x2594: and ebx,0x7
0x2597: add rbp,0x1
0x259b: add r15,0x3
0x259f: add ebx,0x30
0x25a2: cmp rbp,rcx
0x25a5: jae 0x1d90
0x25ab: mov esi,edx
0x25ad: cmp r13,r15
0x25b0: jbe 0x25b6
0x25b2: mov byte ptr [r14+r15*1],bl
0x25b6: movzx ebx,byte ptr [rdi+rbp*1]
0x25ba: add r15,0x1
0x25be: test dl,dl
0x25c0: jne 0x2510
0x25c6: mov eax,esi
0x25c8: xor eax,0x1
0x25cb: and eax,r8d
0x25ce: test r10b,r10b
0x25d1: je 0x25e1
0x25d3: cmp r13,r15
0x25d6: jbe 0x25dd
0x25d8: mov byte ptr [r14+r15*1],0x5c
0x25dd: add r15,0x1
0x25e1: add rbp,0x1
0x25e5: cmp rbp,rcx
0x25e8: jae 0x1d6c
0x25ee: test al,al
0x25f0: je 0x29ee
0x25f6: cmp r13,r15
0x25f9: jbe 0x2600
0x25fb: mov byte ptr [r14+r15*1],0x27
0x2600: lea rax,[r15+0x1]
0x2604: cmp r13,rax
0x2607: jbe 0x260f
0x2609: mov byte ptr [r14+r15*1+0x1],0x27
0x260f: add r15,0x2
0x2613: xor r10d,r10d
0x2616: xor r8d,r8d
0x2619: jmp 0x25ad
0x261b: nop dword ptr [rax+rax*1+0x0]
0x2620: cmp r15,0x1
0x2624: je 0x2489
0x262a: mov rdi,qword ptr [rsp+0x10]
0x262f: lea rcx,[rdi+r15*1]
0x2633: lea rdx,[rdi+r14*1+0x1]
0x2638: lea r8,[rcx+r14*1]
0x263c: jmp 0x264d
0x263e: xchg ax,ax
0x2640: add rdx,0x1
0x2644: cmp r8,rdx
0x2647: je 0x2489
0x264d: movzx ecx,byte ptr [rdx]
0x2650: sub ecx,0x5b
0x2653: cmp cl,0x21
0x2656: ja 0x2640
0x2658: mov esi,0x1
0x265d: shl rsi,cl
0x2660: mov rcx,rsi
0x2663: movabs rsi,0x20000002b
0x266d: test rcx,rsi
0x2670: je 0x2640
0x2672: mov r14,qword ptr [rsp+0x40]
0x2677: mov r13,qword ptr [rsp+0x70]
0x267c: mov rbp,qword ptr [rsp+0x30]
0x2681: mov dword ptr [rsp+0x8],0x2
0x2689: cmp byte ptr [rsp+0xd],0x0
0x268e: je 0x26a0
0x2690: test al,al
0x2692: mov eax,0x4
0x2697: cmove eax,dword ptr [rsp+0x8]
0x269c: mov dword ptr [rsp+0x8],eax
0x26a0: sub rsp,0x8
0x26a4: mov rcx,rbp
0x26a7: mov rsi,r13
0x26aa: push qword ptr [rsp+0x68]
0x26ae: push qword ptr [rsp+0x78]
0x26b2: mov rdi,r14
0x26b5: push 0x0
0x26b7: mov r9d,dword ptr [rsp+0x98]
0x26bf: mov r8d,dword ptr [rsp+0x28]
0x26c4: mov rdx,qword ptr [rsp+0x30]
0x26c9: and r9d,0xfffffffd
0x26cd: call 0x1b00
0x26d2: add rsp,0x20
0x26d6: mov r15,rax
0x26d9: mov rbx,qword ptr [rsp+0xa8]
0x26e1: xor rbx,qword ptr fs:0x28
0x26ea: mov rax,r15
0x26ed: jne 0x2cf3
0x26f3: add rsp,0xb8
0x26fa: pop rbx
0x26fb: pop rbp
0x26fc: pop r12
0x26fe: pop r13
0x2700: pop r14
0x2702: pop r15
0x2704: ret 
0x2705: nop dword ptr [rax]
0x2708: mov rbp,r11
0x270b: jmp 0x2689
0x2710: cmp r13,r15
0x2713: jbe 0x271a
0x2715: mov byte ptr [r14+r15*1],0x27
0x271a: lea rax,[r15+0x1]
0x271e: cmp r13,rax
0x2721: jbe 0x2729
0x2723: mov byte ptr [r14+r15*1+0x1],0x5c
0x2729: lea rax,[r15+0x2]
0x272d: cmp r13,rax
0x2730: jbe 0x2d22
0x2736: mov rdx,r13
0x2739: mov byte ptr [r14+r15*1+0x2],0x27
0x273f: mov r13,qword ptr [rsp+0x50]
0x2744: jmp 0x2322
0x2749: mov eax,r12d
0x274c: mov ebx,0x30
0x2751: xor r12d,r12d
0x2754: jmp 0x1d59
0x2759: mov byte ptr [r14+r15*1+0x2],0x27
0x275f: jmp 0x2129
0x2764: test ebx,ebx
0x2766: jne 0x1b93
0x276c: mov byte ptr [rsp+0xd],0x1
0x2771: test r13,r13
0x2774: jne 0x2d0a
0x277a: lea rax,[rip+0x1ed4]
0x2781: mov qword ptr [rsp+0x50],0x0
0x278a: mov byte ptr [rsp+0xe],0x1
0x278f: mov byte ptr [rsp+0x7c],0x0
0x2794: xor r12d,r12d
0x2797: mov byte ptr [rsp+0xf],0x0
0x279c: mov qword ptr [rsp+0x18],0x1
0x27a5: mov qword ptr [rsp+0x48],rax
0x27aa: mov r15d,0x1
0x27b0: mov dword ptr [rsp+0x8],0x2
0x27b8: jmp 0x1bd3
0x27bd: nop dword ptr [rax]
0x27c0: test ebx,ebx
0x27c2: jne 0x2bbd
0x27c8: test r13,r13
0x27cb: je 0x29f6
0x27d1: mov byte ptr [r14],0x22
0x27d5: mov byte ptr [rsp+0xe],0x1
0x27da: xor r12d,r12d
0x27dd: mov byte ptr [rsp+0x7c],0x0
0x27e2: mov qword ptr [rsp+0x50],0x0
0x27eb: lea rax,[rip+0x1e61]
0x27f2: mov byte ptr [rsp+0xf],0x0
0x27f7: mov byte ptr [rsp+0xd],0x1
0x27fc: mov qword ptr [rsp+0x18],0x1
0x2805: mov r15d,0x1
0x280b: mov qword ptr [rsp+0x48],rax
0x2810: jmp 0x1bd3
0x2815: lea rax,[rip+0x1e37]
0x281c: mov byte ptr [rsp+0xe],0x1
0x2821: mov byte ptr [rsp+0x7c],0x0
0x2826: xor r12d,r12d
0x2829: mov qword ptr [rsp+0x50],0x0
0x2832: mov byte ptr [rsp+0xf],0x1
0x2837: mov byte ptr [rsp+0xd],0x1
0x283c: mov qword ptr [rsp+0x18],0x1
0x2845: xor r15d,r15d
0x2848: mov qword ptr [rsp+0x48],rax
0x284d: mov dword ptr [rsp+0x8],0x5
0x2855: jmp 0x1bd3
0x285a: mov byte ptr [rsp+0xe],0x1
0x285f: mov byte ptr [rsp+0x7c],0x0
0x2864: xor r12d,r12d
0x2867: mov qword ptr [rsp+0x50],0x0
0x2870: mov byte ptr [rsp+0xf],0x0
0x2875: xor r15d,r15d
0x2878: mov byte ptr [rsp+0xd],0x1
0x287d: mov qword ptr [rsp+0x18],0x0
0x2886: mov qword ptr [rsp+0x48],0x0
0x288f: jmp 0x1bd3
0x2894: cmp dword ptr [rsp+0x8],0xa
0x2899: je 0x28f1
0x289b: lea rsi,[rip+0x1db5]
0x28a2: xor edi,edi
0x28a4: mov edx,0x5
0x28a9: call 0x1190
0x28ae: mov rcx,rax
0x28b1: mov qword ptr [rsp+0x68],rax
0x28b6: lea rax,[rip+0x1d9a]
0x28bd: cmp rcx,rax
0x28c0: je 0x2c5e
0x28c6: lea rsi,[rip+0x1d88]
0x28cd: xor edi,edi
0x28cf: mov edx,0x5
0x28d4: call 0x1190
0x28d9: mov rcx,rax
0x28dc: mov qword ptr [rsp+0x60],rax
0x28e1: lea rax,[rip+0x1d6d]
0x28e8: cmp rcx,rax
0x28eb: je 0x2c74
0x28f1: xor r15d,r15d
0x28f4: test ebx,ebx
0x28f6: je 0x2abd
0x28fc: test ebx,ebx
0x28fe: mov rbx,qword ptr [rsp+0x60]
0x2903: setne byte ptr [rsp+0xf]
0x2908: xor r12d,r12d
0x290b: mov rdi,rbx
0x290e: call 0x11b0
0x2913: mov qword ptr [rsp+0x48],rbx
0x2918: mov qword ptr [rsp+0x18],rax
0x291d: mov byte ptr [rsp+0xe],0x1
0x2922: mov byte ptr [rsp+0x7c],0x0
0x2927: mov qword ptr [rsp+0x50],0x0
0x2930: mov byte ptr [rsp+0xd],0x1
0x2935: jmp 0x1bd3
0x293a: mov byte ptr [rsp+0xe],0x1
0x293f: mov byte ptr [rsp+0x7c],0x0
0x2944: xor r12d,r12d
0x2947: mov qword ptr [rsp+0x50],0x0
0x2950: mov byte ptr [rsp+0xf],0x0
0x2955: xor r15d,r15d
0x2958: mov byte ptr [rsp+0xd],0x0
0x295d: mov qword ptr [rsp+0x18],0x0
0x2966: mov qword ptr [rsp+0x48],0x0
0x296f: jmp 0x1bd3
0x2974: mov byte ptr [rsp+0xe],0x1
0x2979: mov byte ptr [rsp+0x7c],0x0
0x297e: xor r12d,r12d
0x2981: mov qword ptr [rsp+0x50],0x0
0x298a: mov byte ptr [rsp+0xf],0x1
0x298f: mov byte ptr [rsp+0xd],0x1
0x2994: jmp 0x1bb3
0x2999: cmp r13,r15
0x299c: jbe 0x29a3
0x299e: mov byte ptr [r14+r15*1],0x30
0x29a3: lea rax,[rcx+0x2]
0x29a7: cmp r13,rax
0x29aa: jbe 0x29b2
0x29ac: mov byte ptr [r14+rcx*1+0x2],0x30
0x29b2: mov eax,r12d
0x29b5: lea r15,[rcx+0x3]
0x29b9: xor r12d,r12d
0x29bc: mov ebx,0x30
0x29c1: jmp 0x1d28
0x29c6: nop word ptr cs:[rax+rax*1+0x0]
0x29d0: movzx ebx,byte ptr [rsp+0xf]
0x29d5: mov rbp,r11
0x29d8: mov byte ptr [rsp+0xd],bl
0x29dc: jmp 0x2689
0x29e1: movzx edx,byte ptr [rsp+0xd]
0x29e6: xor r12d,r12d
0x29e9: jmp 0x24f0
0x29ee: xor r10d,r10d
0x29f1: jmp 0x25ad
0x29f6: mov qword ptr [rsp+0x50],0x0
0x29ff: mov byte ptr [rsp+0xe],0x1
0x2a04: xor r12d,r12d
0x2a07: mov byte ptr [rsp+0x7c],0x0
0x2a0c: jmp 0x27eb
0x2a11: mov r11,qword ptr [rsp+0x30]
0x2a16: mov rsi,r14
0x2a19: mov rcx,r13
0x2a1c: mov rax,rbx
0x2a1f: mov rdi,rbx
0x2a22: movzx r8d,byte ptr [rsp+0x7d]
0x2a28: movzx ebx,byte ptr [rsp+0x7e]
0x2a2d: mov r9,qword ptr [rsp+0x88]
0x2a35: cmp rsi,r11
0x2a38: movzx r10d,byte ptr [rsp+0x7f]
0x2a3e: mov r15,qword ptr [rsp+0x80]
0x2a46: mov r14,qword ptr [rsp+0x40]
0x2a4b: mov r13,qword ptr [rsp+0x70]
0x2a50: jae 0x2a78
0x2a52: cmp byte ptr [rcx],0x0
0x2a55: jne 0x2a67
0x2a57: jmp 0x2a78
0x2a59: nop dword ptr [rax+0x0]
0x2a60: cmp byte ptr [r9+rax*1],0x0
0x2a65: je 0x2a75
0x2a67: add rax,0x1
0x2a6b: lea rdx,[rbp+rax*1+0x0]
0x2a70: cmp r11,rdx
0x2a73: ja 0x2a60
0x2a75: mov rdi,rax
0x2a78: movzx edx,byte ptr [rsp+0xd]
0x2a7d: xor r12d,r12d
0x2a80: jmp 0x24e6
0x2a85: mov rdi,rbx
0x2a88: movzx r8d,byte ptr [rsp+0x7d]
0x2a8e: movzx ebx,byte ptr [rsp+0x7e]
0x2a93: movzx r10d,byte ptr [rsp+0x7f]
0x2a99: mov r15,qword ptr [rsp+0x80]
0x2aa1: xor r12d,r12d
0x2aa4: mov r14,qword ptr [rsp+0x40]
0x2aa9: mov r13,qword ptr [rsp+0x70]
0x2aae: mov r11,qword ptr [rsp+0x30]
0x2ab3: movzx edx,byte ptr [rsp+0xd]
0x2ab8: jmp 0x24e6
0x2abd: mov rdx,qword ptr [rsp+0x68]
0x2ac2: movzx eax,byte ptr [rdx]
0x2ac5: test al,al
0x2ac7: je 0x28fc
0x2acd: nop dword ptr [rax]
0x2ad0: cmp r13,r15
0x2ad3: jbe 0x2ad9
0x2ad5: mov byte ptr [r14+r15*1],al
0x2ad9: add r15,0x1
0x2add: movzx eax,byte ptr [rdx+r15*1]
0x2ae2: test al,al
0x2ae4: jne 0x2ad0
0x2ae6: jmp 0x28fc
0x2aeb: mov eax,edx
0x2aed: jmp 0x2047
0x2af2: movzx ebx,byte ptr [rax+rcx*1]
0x2af6: cmp bl,0x3e
0x2af9: ja 0x2370
0x2aff: movabs rax,0x7000a38200000000
0x2b09: bt rax,rbx
0x2b0d: jae 0x2370
0x2b13: cmp byte ptr [rsp+0xf],0x0
0x2b18: jne 0x2d02
0x2b1e: cmp r13,r15
0x2b21: jbe 0x2b28
0x2b23: mov byte ptr [r14+r15*1],0x3f
0x2b28: lea rax,[r15+0x1]
0x2b2c: cmp r13,rax
0x2b2f: jbe 0x2b37
0x2b31: mov byte ptr [r14+r15*1+0x1],0x22
0x2b37: lea rax,[r15+0x2]
0x2b3b: cmp r13,rax
0x2b3e: jbe 0x2b46
0x2b40: mov byte ptr [r14+r15*1+0x2],0x22
0x2b46: lea rax,[r15+0x3]
0x2b4a: cmp r13,rax
0x2b4d: jbe 0x2b55
0x2b4f: mov byte ptr [r14+r15*1+0x3],0x3f
0x2b55: add r15,0x4
0x2b59: xor edx,edx
0x2b5b: xor r12d,r12d
0x2b5e: xor eax,eax
0x2b60: mov rbp,rcx
0x2b63: jmp 0x1d28
0x2b68: test ebx,ebx
0x2b6a: je 0x2cf8
0x2b70: lea rax,[rip+0x1ade]
0x2b77: mov byte ptr [rsp+0xe],0x1
0x2b7c: mov byte ptr [rsp+0x7c],0x0
0x2b81: xor r12d,r12d
0x2b84: mov qword ptr [rsp+0x50],0x0
0x2b8d: mov byte ptr [rsp+0xf],0x1
0x2b92: mov byte ptr [rsp+0xd],0x0
0x2b97: mov qword ptr [rsp+0x18],0x1
0x2ba0: xor r15d,r15d
0x2ba3: mov qword ptr [rsp+0x48],rax
0x2ba8: jmp 0x1bd3
0x2bad: nop dword ptr [rax]
0x2bb0: mov rbp,r11
0x2bb3: movzx eax,byte ptr [rsp+0xf]
0x2bb8: jmp 0x2689
0x2bbd: lea rax,[rip+0x1a8f]
0x2bc4: mov byte ptr [rsp+0xe],0x1
0x2bc9: mov byte ptr [rsp+0x7c],0x0
0x2bce: xor r12d,r12d
0x2bd1: mov qword ptr [rsp+0x50],0x0
0x2bda: mov byte ptr [rsp+0xf],0x1
0x2bdf: mov byte ptr [rsp+0xd],0x1
0x2be4: mov qword ptr [rsp+0x18],0x1
0x2bed: xor r15d,r15d
0x2bf0: mov qword ptr [rsp+0x48],rax
0x2bf5: jmp 0x1bd3
0x2bfa: mov eax,edx
0x2bfc: mov rbx,qword ptr [rsp+0x48]
0x2c01: test rbx,rbx
0x2c04: je 0x2c32
0x2c06: test al,al
0x2c08: je 0x2c32
0x2c0a: movzx ecx,byte ptr [rbx]
0x2c0d: mov rax,rbx
0x2c10: test cl,cl
0x2c12: je 0x2c32
0x2c14: mov rdx,r15
0x2c17: sub rax,r15
0x2c1a: cmp r13,rdx
0x2c1d: jbe 0x2c23
0x2c1f: mov byte ptr [r14+rdx*1],cl
0x2c23: add rdx,0x1
0x2c27: movzx ecx,byte ptr [rax+rdx*1]
0x2c2b: test cl,cl
0x2c2d: jne 0x2c1a
0x2c2f: mov r15,rdx
0x2c32: cmp r13,r15
0x2c35: jbe 0x26d9
0x2c3b: mov byte ptr [r14+r15*1],0x0
0x2c40: jmp 0x26d9
0x2c45: cmp dword ptr [rsp+0x8],0x2
0x2c4a: movzx ebx,byte ptr [rsp+0xf]
0x2c4f: mov rbp,r11
0x2c52: sete al
0x2c55: mov byte ptr [rsp+0xd],bl
0x2c59: jmp 0x2689
0x2c5e: mov esi,dword ptr [rsp+0x8]
0x2c62: mov rdi,rcx
0x2c65: call 0x1a10
0x2c6a: mov qword ptr [rsp+0x68],rax
0x2c6f: jmp 0x28c6
0x2c74: mov esi,dword ptr [rsp+0x8]
0x2c78: mov rdi,rcx
0x2c7b: call 0x1a10
0x2c80: mov qword ptr [rsp+0x60],rax
0x2c85: jmp 0x28f1
0x2c8a: movzx ebx,byte ptr [rsp+0xf]
0x2c8f: mov rbp,r11
0x2c92: mov eax,edx
0x2c94: mov byte ptr [rsp+0xd],bl
0x2c98: jmp 0x2689
0x2c9d: sub rsp,0x8
0x2ca1: mov r8d,0x5
0x2ca7: mov rcx,r11
0x2caa: push qword ptr [rsp+0x68]
0x2cae: push qword ptr [rsp+0x78]
0x2cb2: mov rdi,r14
0x2cb5: push qword ptr [rsp+0x38]
0x2cb9: mov r9d,dword ptr [rsp+0x98]
0x2cc1: mov rdx,qword ptr [rsp+0x30]
0x2cc6: mov rsi,qword ptr [rsp+0x70]
0x2ccb: call 0x1b00
0x2cd0: add rsp,0x20
0x2cd4: mov r15,rax
0x2cd7: jmp 0x26d9
0x2cdc: movzx eax,byte ptr [rsp+0x7c]
0x2ce1: jmp 0x2bfc
0x2ce6: mov dword ptr [rsp+0x8],0x2
0x2cee: jmp 0x2689
0x2cf3: call 0x11c0
0x2cf8: mov byte ptr [rsp+0xd],0x0
0x2cfd: jmp 0x2771
0x2d02: mov rbp,r11
0x2d05: jmp 0x26a0
0x2d0a: mov byte ptr [rsp+0xe],0x1
0x2d0f: xor eax,eax
0x2d11: xor r12d,r12d
0x2d14: mov qword ptr [rsp+0x50],0x0
0x2d1d: jmp 0x22c4
0x2d22: mov rdx,r13
0x2d25: mov r13,qword ptr [rsp+0x50]
0x2d2a: jmp 0x2322
0x2d2f: call 0x1110
0x2d34: xchg ax,ax
0x2d36: nop word ptr cs:[rax+rax*1+0x0]
0x2d40: push r15
0x2d42: push r14
0x2d44: movsxd r15,edi
0x2d47: push r13
0x2d49: push r12
0x2d4b: mov r14,rdx
0x2d4e: push rbp
0x2d4f: push rbx
0x2d50: mov rbp,rcx
0x2d53: sub rsp,0x28
0x2d57: mov qword ptr [rsp+0x8],rsi
0x2d5c: call 0x1120
0x2d61: mov r13,rax
0x2d64: mov eax,dword ptr [rax]
0x2d66: test r15d,r15d
0x2d69: mov rbx,qword ptr [rip+0x2032f0]
0x2d70: mov dword ptr [rsp+0x18],eax
0x2d74: js 0x2ee1
0x2d7a: cmp dword ptr [rip+0x2032d7],r15d
0x2d81: jg 0x2de5
0x2d83: cmp r15d,0x7fffffff
0x2d8a: je 0x2ee6
0x2d90: lea r12d,[r15+0x1]
0x2d94: lea rax,[rip+0x2032d5]
0x2d9b: movsxd rsi,r12d
0x2d9e: shl rsi,0x4
0x2da2: cmp rbx,rax
0x2da5: je 0x2ec0
0x2dab: mov rdi,rbx
0x2dae: call 0x3d20
0x2db3: mov rbx,rax
0x2db6: mov qword ptr [rip+0x2032a3],rax
0x2dbd: movsxd rdi,dword ptr [rip+0x203294]
0x2dc4: mov edx,r12d
0x2dc7: xor esi,esi
0x2dc9: sub edx,edi
0x2dcb: shl rdi,0x4
0x2dcf: movsxd rdx,edx
0x2dd2: add rdi,rbx
0x2dd5: shl rdx,0x4
0x2dd9: call 0x1200
0x2dde: mov dword ptr [rip+0x203273],r12d
0x2de5: mov eax,dword ptr [rbp+0x4]
0x2de8: shl r15,0x4
0x2dec: sub rsp,0x8
0x2df0: add rbx,r15
0x2df3: lea r15,[rbp+0x8]
0x2df7: mov r8d,dword ptr [rbp+0x0]
0x2dfb: mov r11,qword ptr [rbx]
0x2dfe: mov r12,qword ptr [rbx+0x8]
0x2e02: mov rcx,r14
0x2e05: or eax,0x1
0x2e08: mov dword ptr [rsp+0x24],eax
0x2e0c: push qword ptr [rbp+0x30]
0x2e0f: mov r9d,eax
0x2e12: push qword ptr [rbp+0x28]
0x2e15: push r15
0x2e17: mov rsi,r11
0x2e1a: mov rdx,qword ptr [rsp+0x28]
0x2e1f: mov rdi,r12
0x2e22: mov qword ptr [rsp+0x30],r11
0x2e27: call 0x1b00
0x2e2c: add rsp,0x20
0x2e30: mov r11,qword ptr [rsp+0x10]
0x2e35: cmp r11,rax
0x2e38: ja 0x2ea1
0x2e3a: lea rsi,[rax+0x1]
0x2e3e: lea rax,[rip+0x20329b]
0x2e45: cmp r12,rax
0x2e48: mov qword ptr [rbx],rsi
0x2e4b: je 0x2e5f
0x2e4d: mov rdi,r12
0x2e50: mov qword ptr [rsp+0x10],rsi
0x2e55: call 0x1100
0x2e5a: mov rsi,qword ptr [rsp+0x10]
0x2e5f: mov rdi,rsi
0x2e62: mov qword ptr [rsp+0x10],rsi
0x2e67: call 0x3cc0
0x2e6c: sub rsp,0x8
0x2e70: mov qword ptr [rbx+0x8],rax
0x2e74: mov r8d,dword ptr [rbp+0x0]
0x2e78: push qword ptr [rbp+0x30]
0x2e7b: push qword ptr [rbp+0x28]
0x2e7e: mov rcx,r14
0x2e81: push r15
0x2e83: mov r9d,dword ptr [rsp+0x3c]
0x2e88: mov rdi,rax
0x2e8b: mov rdx,qword ptr [rsp+0x28]
0x2e90: mov rsi,qword ptr [rsp+0x30]
0x2e95: mov r12,rax
0x2e98: call 0x1b00
0x2e9d: add rsp,0x20
0x2ea1: mov eax,dword ptr [rsp+0x18]
0x2ea5: mov dword ptr [r13+0x0],eax
0x2ea9: add rsp,0x28
0x2ead: mov rax,r12
0x2eb0: pop rbx
0x2eb1: pop rbp
0x2eb2: pop r12
0x2eb4: pop r13
0x2eb6: pop r14
0x2eb8: pop r15
0x2eba: ret 
0x2ebb: nop dword ptr [rax+rax*1+0x0]
0x2ec0: xor edi,edi
0x2ec2: call 0x3d20
0x2ec7: movdqa xmm0,xmmword ptr [rip+0x2031a1]
0x2ecf: mov rbx,rax
0x2ed2: mov qword ptr [rip+0x203187],rax
0x2ed9: movups xmmword ptr [rax],xmm0
0x2edc: jmp 0x2dbd
0x2ee1: call 0x1110
0x2ee6: call 0x3f10
0x2eeb: nop dword ptr [rax+rax*1+0x0]
0x2ef0: push r12
0x2ef2: push rbp
0x2ef3: push rbx
0x2ef4: mov rbx,rdi
0x2ef7: call 0x1120
0x2efc: mov r12d,dword ptr [rax]
0x2eff: mov rbp,rax
0x2f02: lea rax,[rip+0x2032d7]
0x2f09: test rbx,rbx
0x2f0c: mov esi,0x38
0x2f11: cmove rbx,rax
0x2f15: mov rdi,rbx
0x2f18: call 0x3ec0
0x2f1d: mov dword ptr [rbp+0x0],r12d
0x2f21: pop rbx
0x2f22: pop rbp
0x2f23: pop r12
0x2f25: ret 
0x2f26: nop word ptr cs:[rax+rax*1+0x0]
0x2f30: lea rax,[rip+0x2032a9]
0x2f37: test rdi,rdi
0x2f3a: cmove rdi,rax
0x2f3e: mov eax,dword ptr [rdi]
0x2f40: ret 
0x2f41: nop dword ptr [rax+rax*1+0x0]
0x2f46: nop word ptr cs:[rax+rax*1+0x0]
0x2f50: lea rax,[rip+0x203289]
0x2f57: test rdi,rdi
0x2f5a: cmove rdi,rax
0x2f5e: mov dword ptr [rdi],esi
0x2f60: ret 
0x2f61: nop dword ptr [rax+rax*1+0x0]
0x2f66: nop word ptr cs:[rax+rax*1+0x0]
0x2f70: lea rax,[rip+0x203269]
0x2f77: test rdi,rdi
0x2f7a: mov ecx,esi
0x2f7c: cmove rdi,rax
0x2f80: mov eax,esi
0x2f82: and ecx,0x1f
0x2f85: shr al,0x5
0x2f88: movzx eax,al
0x2f8b: lea rdi,[rdi+rax*4+0x8]
0x2f90: mov esi,dword ptr [rdi]
0x2f92: mov eax,esi
0x2f94: shr eax,cl
0x2f96: xor edx,eax
0x2f98: and eax,0x1
0x2f9b: and edx,0x1
0x2f9e: shl edx,cl
0x2fa0: xor edx,esi
0x2fa2: mov dword ptr [rdi],edx
0x2fa4: ret 
0x2fa5: nop 
0x2fa6: nop word ptr cs:[rax+rax*1+0x0]
0x2fb0: lea rax,[rip+0x203229]
0x2fb7: test rdi,rdi
0x2fba: cmove rdi,rax
0x2fbe: mov eax,dword ptr [rdi+0x4]
0x2fc1: mov dword ptr [rdi+0x4],esi
0x2fc4: ret 
0x2fc5: nop 
0x2fc6: nop word ptr cs:[rax+rax*1+0x0]
0x2fd0: lea rax,[rip+0x203209]
0x2fd7: test rdi,rdi
0x2fda: cmove rdi,rax
0x2fde: test rsi,rsi
0x2fe1: mov dword ptr [rdi],0xa
0x2fe7: je 0x2ff7
0x2fe9: test rdx,rdx
0x2fec: je 0x2ff7
0x2fee: mov qword ptr [rdi+0x28],rsi
0x2ff2: mov qword ptr [rdi+0x30],rdx
0x2ff6: ret 
0x2ff7: sub rsp,0x8
0x2ffb: call 0x1110
0x3000: push r15
0x3002: push r14
0x3004: lea rax,[rip+0x2031d5]
0x300b: push r13
0x300d: push r12
0x300f: mov r13,rdi
0x3012: push rbp
0x3013: push rbx
0x3014: mov rbx,r8
0x3017: mov r14,rsi
0x301a: mov r15,rdx
0x301d: sub rsp,0x18
0x3021: test r8,r8
0x3024: cmove rbx,rax
0x3028: mov qword ptr [rsp+0x8],rcx
0x302d: call 0x1120
0x3032: mov r12d,dword ptr [rax]
0x3035: mov rbp,rax
0x3038: lea rax,[rbx+0x8]
0x303c: sub rsp,0x8
0x3040: mov r9d,dword ptr [rbx+0x4]
0x3044: push qword ptr [rbx+0x30]
0x3047: mov r8d,dword ptr [rbx]
0x304a: push qword ptr [rbx+0x28]
0x304d: mov rdx,r15
0x3050: push rax
0x3051: mov rcx,qword ptr [rsp+0x28]
0x3056: mov rsi,r14
0x3059: mov rdi,r13
0x305c: call 0x1b00
0x3061: mov dword ptr [rbp+0x0],r12d
0x3065: add rsp,0x38
0x3069: pop rbx
0x306a: pop rbp
0x306b: pop r12
0x306d: pop r13
0x306f: pop r14
0x3071: pop r15
0x3073: ret 
0x3074: xchg ax,ax
0x3076: nop word ptr cs:[rax+rax*1+0x0]
0x3080: push r15
0x3082: push r14
0x3084: lea rax,[rip+0x203155]
0x308b: push r13
0x308d: push r12
0x308f: mov r12,rdx
0x3092: push rbp
0x3093: push rbx
0x3094: mov rbx,rcx
0x3097: mov r14,rdi
0x309a: mov r15,rsi
0x309d: sub rsp,0x38
0x30a1: test rcx,rcx
0x30a4: cmove rbx,rax
0x30a8: xor ebp,ebp
0x30aa: call 0x1120
0x30af: test r12,r12
0x30b2: mov r13,rax
0x30b5: mov eax,dword ptr [rax]
0x30b7: sete bpl
0x30bb: or ebp,dword ptr [rbx+0x4]
0x30be: lea r10,[rbx+0x8]
0x30c2: sub rsp,0x8
0x30c6: mov r8d,dword ptr [rbx]
0x30c9: mov rcx,r15
0x30cc: mov dword ptr [rsp+0x14],eax
0x30d0: push qword ptr [rbx+0x30]
0x30d3: mov rdx,r14
0x30d6: push qword ptr [rbx+0x28]
0x30d9: push r10
0x30db: xor esi,esi
0x30dd: mov r9d,ebp
0x30e0: xor edi,edi
0x30e2: mov qword ptr [rsp+0x40],r10
0x30e7: call 0x1b00
0x30ec: lea rsi,[rax+0x1]
0x30f0: mov qword ptr [rsp+0x48],rax
0x30f5: add rsp,0x20
0x30f9: mov rdi,rsi
0x30fc: mov qword ptr [rsp+0x18],rsi
0x3101: call 0x3cc0
0x3106: mov qword ptr [rsp+0x10],rax
0x310b: sub rsp,0x8
0x310f: push qword ptr [rbx+0x30]
0x3112: push qword ptr [rbx+0x28]
0x3115: mov r10,qword ptr [rsp+0x38]
0x311a: mov r9d,ebp
0x311d: mov r8d,dword ptr [rbx]
0x3120: mov rcx,r15
0x3123: mov rdx,r14
0x3126: mov rdi,rax
0x3129: push r10
0x312b: mov rsi,qword ptr [rsp+0x38]
0x3130: call 0x1b00
0x3135: mov eax,dword ptr [rsp+0x2c]
0x3139: add rsp,0x20
0x313d: test r12,r12
0x3140: mov dword ptr [r13+0x0],eax
0x3144: je 0x314f
0x3146: mov r11,qword ptr [rsp+0x28]
0x314b: mov qword ptr [r12],r11
0x314f: mov rax,qword ptr [rsp+0x10]
0x3154: add rsp,0x38
0x3158: pop rbx
0x3159: pop rbp
0x315a: pop r12
0x315c: pop r13
0x315e: pop r14
0x3160: pop r15
0x3162: ret 
0x3163: nop dword ptr [rax]
0x3166: nop word ptr cs:[rax+rax*1+0x0]
0x3170: mov rcx,rdx
0x3173: xor edx,edx
0x3175: jmp 0x3080
0x317a: nop word ptr [rax+rax*1+0x0]
0x3180: mov eax,dword ptr [rip+0x202ed2]
0x3186: push r12
0x3188: mov r12,qword ptr [rip+0x202ed1]
0x318f: push rbp
0x3190: push rbx
0x3191: cmp eax,0x1
0x3194: jle 0x31c1
0x3196: sub eax,0x2
0x3199: lea rbx,[r12+0x18]
0x319e: shl rax,0x4
0x31a2: lea rbp,[r12+rax*1+0x28]
0x31a7: nop word ptr [rax+rax*1+0x0]
0x31b0: mov rdi,qword ptr [rbx]
0x31b3: add rbx,0x10
0x31b7: call 0x1100
0x31bc: cmp rbx,rbp
0x31bf: jne 0x31b0
0x31c1: mov rdi,qword ptr [r12+0x8]
0x31c6: lea rbx,[rip+0x202f13]
0x31cd: cmp rdi,rbx
0x31d0: je 0x31e9
0x31d2: call 0x1100
0x31d7: mov qword ptr [rip+0x202e8e],0x100
0x31e2: mov qword ptr [rip+0x202e8f],rbx
0x31e9: lea rbx,[rip+0x202e80]
0x31f0: cmp r12,rbx
0x31f3: je 0x3204
0x31f5: mov rdi,r12
0x31f8: call 0x1100
0x31fd: mov qword ptr [rip+0x202e5c],rbx
0x3204: pop rbx
0x3205: mov dword ptr [rip+0x202e49],0x1
0x320f: pop rbp
0x3210: pop r12
0x3212: ret 
0x3213: nop dword ptr [rax]
0x3216: nop word ptr cs:[rax+rax*1+0x0]
0x3220: lea rcx,[rip+0x202fb9]
0x3227: mov rdx,0xffffffffffffffff
0x322e: jmp 0x2d40
0x3233: nop dword ptr [rax]
0x3236: nop word ptr cs:[rax+rax*1+0x0]
0x3240: lea rcx,[rip+0x202f99]
0x3247: jmp 0x2d40
0x324c: nop dword ptr [rax+0x0]
0x3250: lea rcx,[rip+0x202f89]
0x3257: mov rsi,rdi
0x325a: mov rdx,0xffffffffffffffff
0x3261: xor edi,edi
0x3263: jmp 0x2d40
0x3268: nop dword ptr [rax+rax*1+0x0]
0x3270: lea rcx,[rip+0x202f69]
0x3277: mov rdx,rsi
0x327a: mov rsi,rdi
0x327d: xor edi,edi
0x327f: jmp 0x2d40
0x3284: xchg ax,ax
0x3286: nop word ptr cs:[rax+rax*1+0x0]
0x3290: sub rsp,0x48
0x3294: mov rax,rdx
0x3297: mov rdx,qword ptr fs:0x28
0x32a0: mov qword ptr [rsp+0x38],rdx
0x32a5: xor edx,edx
0x32a7: cmp esi,0xa
0x32aa: je 0x3314
0x32ac: mov dword ptr [rsp],esi
0x32af: mov rcx,rsp
0x32b2: mov rdx,0xffffffffffffffff
0x32b9: mov rsi,rax
0x32bc: mov qword ptr [rsp+0x4],0x0
0x32c5: mov qword ptr [rsp+0xc],0x0
0x32ce: mov qword ptr [rsp+0x14],0x0
0x32d7: mov qword ptr [rsp+0x1c],0x0
0x32e0: mov qword ptr [rsp+0x24],0x0
0x32e9: mov qword ptr [rsp+0x2c],0x0
0x32f2: mov dword ptr [rsp+0x34],0x0
0x32fa: call 0x2d40
0x32ff: mov rcx,qword ptr [rsp+0x38]
0x3304: xor rcx,qword ptr fs:0x28
0x330d: jne 0x3319
0x330f: add rsp,0x48
0x3313: ret 
0x3314: call 0x1110
0x3319: call 0x11c0
0x331e: xchg ax,ax
0x3320: sub rsp,0x48
0x3324: mov rax,rdx
0x3327: mov rdx,rcx
0x332a: mov rcx,qword ptr fs:0x28
0x3333: mov qword ptr [rsp+0x38],rcx
0x3338: xor ecx,ecx
0x333a: cmp esi,0xa
0x333d: je 0x33a0
0x333f: mov dword ptr [rsp],esi
0x3342: mov rcx,rsp
0x3345: mov rsi,rax
0x3348: mov qword ptr [rsp+0x4],0x0
0x3351: mov qword ptr [rsp+0xc],0x0
0x335a: mov qword ptr [rsp+0x14],0x0
0x3363: mov qword ptr [rsp+0x1c],0x0
0x336c: mov qword ptr [rsp+0x24],0x0
0x3375: mov qword ptr [rsp+0x2c],0x0
0x337e: mov dword ptr [rsp+0x34],0x0
0x3386: call 0x2d40
0x338b: mov rdx,qword ptr [rsp+0x38]
0x3390: xor rdx,qword ptr fs:0x28
0x3399: jne 0x33a5
0x339b: add rsp,0x48
0x339f: ret 
0x33a0: call 0x1110
0x33a5: call 0x11c0
0x33aa: nop word ptr [rax+rax*1+0x0]
0x33b0: mov rdx,rsi
0x33b3: mov esi,edi
0x33b5: xor edi,edi
0x33b7: jmp 0x3290
0x33bc: nop dword ptr [rax+0x0]
0x33c0: mov rcx,rdx
0x33c3: mov rdx,rsi
0x33c6: mov esi,edi
0x33c8: xor edi,edi
0x33ca: jmp 0x3320
0x33cf: nop 
0x33d0: sub rsp,0x48
0x33d4: mov ecx,edx
0x33d6: mov rax,qword ptr fs:0x28
0x33df: mov qword ptr [rsp+0x38],rax
0x33e4: xor eax,eax
0x33e6: mov rax,qword ptr [rip+0x202e23]
0x33ed: mov r8,rsp
0x33f0: and ecx,0x1f
0x33f3: movdqa xmm0,xmmword ptr [rip+0x202de5]
0x33fb: mov qword ptr [rsp+0x30],rax
0x3400: mov eax,edx
0x3402: movaps xmmword ptr [rsp],xmm0
0x3406: shr al,0x5
0x3409: movzx eax,al
0x340c: lea r9,[r8+rax*4+0x8]
0x3411: movdqa xmm0,xmmword ptr [rip+0x202dd7]
0x3419: movaps xmmword ptr [rsp+0x10],xmm0
0x341e: movdqa xmm0,xmmword ptr [rip+0x202dda]
0x3426: movaps xmmword ptr [rsp+0x20],xmm0
0x342b: mov edx,dword ptr [r9]
0x342e: mov eax,edx
0x3430: shr eax,cl
0x3432: not eax
0x3434: and eax,0x1
0x3437: shl eax,cl
0x3439: mov rcx,r8
0x343c: xor eax,edx
0x343e: mov rdx,rsi
0x3441: mov rsi,rdi
0x3444: mov dword ptr [r9],eax
0x3447: xor edi,edi
0x3449: call 0x2d40
0x344e: mov rsi,qword ptr [rsp+0x38]
0x3453: xor rsi,qword ptr fs:0x28
0x345c: jne 0x3463
0x345e: add rsp,0x48
0x3462: ret 
0x3463: call 0x11c0
0x3468: nop dword ptr [rax+rax*1+0x0]
0x3470: movsx edx,sil
0x3474: mov rsi,0xffffffffffffffff
0x347b: jmp 0x33d0
0x3480: mov edx,0x3a
0x3485: mov rsi,0xffffffffffffffff
0x348c: jmp 0x33d0
0x3491: nop dword ptr [rax+rax*1+0x0]
0x3496: nop word ptr cs:[rax+rax*1+0x0]
0x34a0: mov edx,0x3a
0x34a5: jmp 0x33d0
0x34aa: nop word ptr [rax+rax*1+0x0]
0x34b0: sub rsp,0x48
0x34b4: mov rax,rdx
0x34b7: mov rdx,qword ptr fs:0x28
0x34c0: mov qword ptr [rsp+0x38],rdx
0x34c5: xor edx,edx
0x34c7: cmp esi,0xa
0x34ca: je 0x3534
0x34cc: mov dword ptr [rsp],esi
0x34cf: mov rcx,rsp
0x34d2: mov rdx,0xffffffffffffffff
0x34d9: mov rsi,rax
0x34dc: mov qword ptr [rsp+0x4],0x0
0x34e5: mov qword ptr [rsp+0xc],0x4000000
0x34ee: mov qword ptr [rsp+0x14],0x0
0x34f7: mov qword ptr [rsp+0x1c],0x0
0x3500: mov qword ptr [rsp+0x24],0x0
0x3509: mov qword ptr [rsp+0x2c],0x0
0x3512: mov dword ptr [rsp+0x34],0x0
0x351a: call 0x2d40
0x351f: mov rcx,qword ptr [rsp+0x38]
0x3524: xor rcx,qword ptr fs:0x28
0x352d: jne 0x3539
0x352f: add rsp,0x48
0x3533: ret 
0x3534: call 0x1110
0x3539: call 0x11c0
0x353e: xchg ax,ax
0x3540: sub rsp,0x48
0x3544: mov r9,rcx
0x3547: mov rcx,qword ptr [rip+0x202cc2]
0x354e: movdqa xmm0,xmmword ptr [rip+0x202c8a]
0x3556: mov rax,qword ptr fs:0x28
0x355f: mov qword ptr [rsp+0x38],rax
0x3564: xor eax,eax
0x3566: movaps xmmword ptr [rsp],xmm0
0x356a: test rsi,rsi
0x356d: mov qword ptr [rsp+0x30],rcx
0x3572: mov dword ptr [rsp],0xa
0x3579: movdqa xmm0,xmmword ptr [rip+0x202c6f]
0x3581: movaps xmmword ptr [rsp+0x10],xmm0
0x3586: movdqa xmm0,xmmword ptr [rip+0x202c72]
0x358e: movaps xmmword ptr [rsp+0x20],xmm0
0x3593: je 0x35c7
0x3595: test rdx,rdx
0x3598: je 0x35c7
0x359a: mov qword ptr [rsp+0x28],rsi
0x359f: mov qword ptr [rsp+0x30],rdx
0x35a4: mov rcx,rsp
0x35a7: mov rdx,r8
0x35aa: mov rsi,r9
0x35ad: call 0x2d40
0x35b2: mov rdi,qword ptr [rsp+0x38]
0x35b7: xor rdi,qword ptr fs:0x28
0x35c0: jne 0x35cc
0x35c2: add rsp,0x48
0x35c6: ret 
0x35c7: call 0x1110
0x35cc: call 0x11c0
0x35d1: nop dword ptr [rax+rax*1+0x0]
0x35d6: nop word ptr cs:[rax+rax*1+0x0]
0x35e0: mov r8,0xffffffffffffffff
0x35e7: jmp 0x3540
0x35ec: nop dword ptr [rax+0x0]
0x35f0: mov rcx,rdx
0x35f3: mov r8,0xffffffffffffffff
0x35fa: mov rdx,rsi
0x35fd: mov rsi,rdi
0x3600: xor edi,edi
0x3602: jmp 0x3540
0x3607: nop word ptr [rax+rax*1+0x0]
0x3610: mov r8,rcx
0x3613: mov rcx,rdx
0x3616: mov rdx,rsi
0x3619: mov rsi,rdi
0x361c: xor edi,edi
0x361e: jmp 0x3540
0x3623: nop dword ptr [rax]
0x3626: nop word ptr cs:[rax+rax*1+0x0]
0x3630: lea rcx,[rip+0x2029e9]
0x3637: jmp 0x2d40
0x363c: nop dword ptr [rax+0x0]
0x3640: lea rcx,[rip+0x2029d9]
0x3647: mov rdx,rsi
0x364a: mov rsi,rdi
0x364d: xor edi,edi
0x364f: jmp 0x2d40
0x3654: xchg ax,ax
0x3656: nop word ptr cs:[rax+rax*1+0x0]
0x3660: lea rcx,[rip+0x2029b9]
0x3667: mov rdx,0xffffffffffffffff
0x366e: jmp 0x2d40
0x3673: nop dword ptr [rax]
0x3676: nop word ptr cs:[rax+rax*1+0x0]
0x3680: lea rcx,[rip+0x202999]
0x3687: mov rsi,rdi
0x368a: mov rdx,0xffffffffffffffff
0x3691: xor edi,edi
0x3693: jmp 0x2d40
0x3698: nop dword ptr [rax+rax*1+0x0]
0x3746: nop word ptr cs:[rax+rax*1+0x0]
0x37d5: nop dword ptr [rax]
0x37d8: mov r8,rcx
0x37db: mov rcx,rdx
0x37de: lea rdx,[rip+0x134f]
0x37e5: mov esi,0x1
0x37ea: xor eax,eax
0x37ec: call 0x1330
0x37f1: jmp 0x36dc
0x37f6: nop word ptr cs:[rax+rax*1+0x0]
0x3855: nop dword ptr [rax]
0x3891: nop dword ptr [rax+0x0]
0x38d8: nop dword ptr [rax+rax*1+0x0]
0x3927: nop word ptr [rax+rax*1+0x0]
0x3984: nop dword ptr [rax+0x0]
0x39b2: nop word ptr [rax+rax*1+0x0]
0x3a66: nop word ptr cs:[rax+rax*1+0x0]
0x3ab7: nop word ptr [rax+rax*1+0x0]
0x3ac0: xor r9d,r9d
0x3ac3: cmp qword ptr [r8],0x0
0x3ac7: je 0x3adb
0x3ac9: nop dword ptr [rax+0x0]
0x3ad0: add r9,0x1
0x3ad4: cmp qword ptr [r8+r9*8],0x0
0x3ad9: jne 0x3ad0
0x3adb: jmp 0x36a0
0x3ae0: sub rsp,0x68
0x3ae4: mov r10,r8
0x3ae7: xor r9d,r9d
0x3aea: mov rax,qword ptr fs:0x28
0x3af3: mov qword ptr [rsp+0x58],rax
0x3af8: xor eax,eax
0x3afa: mov r8,rsp
0x3afd: nop dword ptr [rax]
0x3b00: mov eax,dword ptr [r10]
0x3b03: cmp eax,0x2f
0x3b06: ja 0x3b4a
0x3b08: mov r11d,eax
0x3b0b: add r11,qword ptr [r10+0x10]
0x3b0f: add eax,0x8
0x3b12: mov dword ptr [r10],eax
0x3b15: mov rax,qword ptr [r11]
0x3b18: test rax,rax
0x3b1b: mov qword ptr [r8+r9*8],rax
0x3b1f: je 0x3b2b
0x3b21: add r9,0x1
0x3b25: cmp r9,0xa
0x3b29: jne 0x3b00
0x3b2b: call 0x36a0
0x3b30: mov rax,qword ptr [rsp+0x58]
0x3b35: xor rax,qword ptr fs:0x28
0x3b3e: jne 0x3b45
0x3b40: add rsp,0x68
0x3b44: ret 
0x3b45: call 0x11c0
0x3b4a: mov r11,qword ptr [r10+0x8]
0x3b4e: lea rax,[r11+0x8]
0x3b52: mov qword ptr [r10+0x8],rax
0x3b56: jmp 0x3b15
0x3b58: nop dword ptr [rax+rax*1+0x0]
0x3c20: call 0x11c0
0x3c35: nop 
0x3c36: nop word ptr cs:[rax+rax*1+0x0]
0x3c40: push rbx
0x3c41: lea rsi,[rip+0xf3a]
0x3c48: mov edx,0x5
0x3c4d: xor edi,edi
0x3c4f: call 0x1190
0x3c54: lea rdx,[rip+0xf3c]
0x3c5b: mov rsi,rax
0x3c5e: mov edi,0x1
0x3c63: xor eax,eax
0x3c65: call 0x12d0
0x3c6a: lea rsi,[rip+0xf3c]
0x3c71: mov edx,0x5
0x3c76: xor edi,edi
0x3c78: call 0x1190
0x3c7d: lea rcx,[rip+0x8bc]
0x3c84: lea rdx,[rip+0x6ba]
0x3c8b: mov rsi,rax
0x3c8e: mov edi,0x1
0x3c93: xor eax,eax
0x3c95: call 0x12d0
0x3c9a: mov rbx,qword ptr [rip+0x2023e7]
0x3ca1: lea rsi,[rip+0x1138]
0x3ca8: xor edi,edi
0x3caa: mov edx,0x5
0x3caf: call 0x1190
0x3cb4: mov rsi,rbx
0x3cb7: mov rdi,rax
0x3cba: pop rbx
0x3cbb: jmp 0x1220
0x3cc0: push rbx
0x3cc1: mov rbx,rdi
0x3cc4: call 0x1270
0x3cc9: test rax,rax
0x3ccc: jne 0x3cd3
0x3cce: test rbx,rbx
0x3cd1: jne 0x3cd5
0x3cd3: pop rbx
0x3cd4: ret 
0x3cd5: call 0x3f10
0x3cda: nop word ptr [rax+rax*1+0x0]
0x3ce0: mov rax,rdi
0x3ce3: mul rsi
0x3ce6: mov rdi,rax
0x3ce9: seto al
0x3cec: test rdi,rdi
0x3cef: js 0x3cfb
0x3cf1: movzx eax,al
0x3cf4: test rax,rax
0x3cf7: jne 0x3cfb
0x3cf9: jmp 0x3cc0
0x3cfb: sub rsp,0x8
0x3cff: call 0x3f10
0x3d04: xchg ax,ax
0x3d06: nop word ptr cs:[rax+rax*1+0x0]
0x3d10: jmp 0x3cc0
0x3d12: nop dword ptr [rax+0x0]
0x3d16: nop word ptr cs:[rax+rax*1+0x0]
0x3d20: test rsi,rsi
0x3d23: push rbx
0x3d24: mov rbx,rsi
0x3d27: jne 0x3d2e
0x3d29: test rdi,rdi
0x3d2c: jne 0x3d48
0x3d2e: mov rsi,rbx
0x3d31: call 0x12b0
0x3d36: test rax,rax
0x3d39: jne 0x3d40
0x3d3b: test rbx,rbx
0x3d3e: jne 0x3d51
0x3d40: pop rbx
0x3d41: ret 
0x3d42: nop word ptr [rax+rax*1+0x0]
0x3d48: call 0x1100
0x3d4d: xor eax,eax
0x3d4f: pop rbx
0x3d50: ret 
0x3d51: call 0x3f10
0x3d56: nop word ptr cs:[rax+rax*1+0x0]
0x3d60: mov rax,rsi
0x3d63: mul rdx
0x3d66: mov rsi,rax
0x3d69: seto al
0x3d6c: test rsi,rsi
0x3d6f: js 0x3d7b
0x3d71: movzx eax,al
0x3d74: test rax,rax
0x3d77: jne 0x3d7b
0x3d79: jmp 0x3d20
0x3d7b: sub rsp,0x8
0x3d7f: call 0x3f10
0x3d84: xchg ax,ax
0x3d86: nop word ptr cs:[rax+rax*1+0x0]
0x3d90: test rdi,rdi
0x3d93: mov r9,rdx
0x3d96: mov rcx,qword ptr [rsi]
0x3d99: je 0x3dd0
0x3d9b: xor edx,edx
0x3d9d: movabs rax,0x5555555555555554
0x3da7: div r9
0x3daa: cmp rax,rcx
0x3dad: jbe 0x3deb
0x3daf: mov rax,rcx
0x3db2: shr rax,0x1
0x3db5: lea rcx,[rax+rcx*1+0x1]
0x3dba: mov qword ptr [rsi],rcx
0x3dbd: imul rcx,r9
0x3dc1: mov rsi,rcx
0x3dc4: jmp 0x3d20
0x3dc9: nop dword ptr [rax+0x0]
0x3dd0: test rcx,rcx
0x3dd3: je 0x3df8
0x3dd5: mov rax,rcx
0x3dd8: mul r9
0x3ddb: seto dl
0x3dde: test rax,rax
0x3de1: movzx edx,dl
0x3de4: js 0x3deb
0x3de6: test rdx,rdx
0x3de9: je 0x3dba
0x3deb: sub rsp,0x8
0x3def: call 0x3f10
0x3df4: nop dword ptr [rax+0x0]
0x3df8: xor edx,edx
0x3dfa: mov eax,0x80
0x3dff: xor r8d,r8d
0x3e02: div r9
0x3e05: test rax,rax
0x3e08: sete r8b
0x3e0c: lea rcx,[r8+rax*1]
0x3e10: jmp 0x3dd5
0x3e12: nop dword ptr [rax+0x0]
0x3e16: nop word ptr cs:[rax+rax*1+0x0]
0x3e20: test rdi,rdi
0x3e23: mov rax,qword ptr [rsi]
0x3e26: je 0x3e50
0x3e28: movabs rdx,0x5555555555555553
0x3e32: cmp rax,rdx
0x3e35: ja 0x3e61
0x3e37: mov rdx,rax
0x3e3a: shr rdx,0x1
0x3e3d: lea rax,[rdx+rax*1+0x1]
0x3e42: mov qword ptr [rsi],rax
0x3e45: mov rsi,rax
0x3e48: jmp 0x3d20
0x3e4d: nop dword ptr [rax]
0x3e50: test rax,rax
0x3e53: mov edx,0x80
0x3e58: cmove rax,rdx
0x3e5c: test rax,rax
0x3e5f: jns 0x3e42
0x3e61: sub rsp,0x8
0x3e65: call 0x3f10
0x3e6a: nop word ptr [rax+rax*1+0x0]
0x3e70: push rbx
0x3e71: mov rbx,rdi
0x3e74: call 0x3cc0
0x3e79: mov rdx,rbx
0x3e7c: xor esi,esi
0x3e7e: mov rdi,rax
0x3e81: pop rbx
0x3e82: jmp 0x1200
0x3e87: nop word ptr [rax+rax*1+0x0]
0x3e90: mov rax,rdi
0x3e93: sub rsp,0x8
0x3e97: mul rsi
0x3e9a: seto dl
0x3e9d: test rax,rax
0x3ea0: js 0x3eb9
0x3ea2: movzx edx,dl
0x3ea5: test rdx,rdx
0x3ea8: jne 0x3eb9
0x3eaa: call 0x1230
0x3eaf: test rax,rax
0x3eb2: je 0x3eb9
0x3eb4: add rsp,0x8
0x3eb8: ret 
0x3eb9: call 0x3f10
0x3ebe: xchg ax,ax
0x3ec0: push rbp
0x3ec1: push rbx
0x3ec2: mov rbp,rdi
0x3ec5: mov rdi,rsi
0x3ec8: mov rbx,rsi
0x3ecb: sub rsp,0x8
0x3ecf: call 0x3cc0
0x3ed4: add rsp,0x8
0x3ed8: mov rdx,rbx
0x3edb: mov rsi,rbp
0x3ede: pop rbx
0x3edf: pop rbp
0x3ee0: mov rdi,rax
0x3ee3: jmp 0x1250
0x3ee8: nop dword ptr [rax+rax*1+0x0]
0x3ef0: push rbx
0x3ef1: mov rbx,rdi
0x3ef4: call 0x11b0
0x3ef9: mov rdi,rbx
0x3efc: lea rsi,[rax+0x1]
0x3f00: pop rbx
0x3f01: jmp 0x3ec0
0x3f03: nop word ptr cs:[rax+rax*1+0x0]
0x3f0d: nop dword ptr [rax]
0x3f10: lea rsi,[rip+0xf78]
0x3f17: sub rsp,0x8
0x3f1b: mov edx,0x5
0x3f20: xor edi,edi
0x3f22: call 0x1190
0x3f27: mov edi,dword ptr [rip+0x2020eb]
0x3f2d: lea rdx,[rip+0x6c4]
0x3f34: mov rcx,rax
0x3f37: xor esi,esi
0x3f39: xor eax,eax
0x3f3b: call 0x12e0
0x3f40: call 0x1110
0x3f45: nop word ptr cs:[rax+rax*1+0x0]
0x3f4f: nop 
0x3f50: push r13
0x3f52: push r12
0x3f54: mov r13,rsi
0x3f57: push rbp
0x3f58: push rbx
0x3f59: mov rbx,rdi
0x3f5c: mov r12,rdx
0x3f5f: sub rsp,0x18
0x3f63: mov rax,qword ptr fs:0x28
0x3f6c: mov qword ptr [rsp+0x8],rax
0x3f71: xor eax,eax
0x3f73: lea rax,[rsp+0x4]
0x3f78: test rdi,rdi
0x3f7b: cmove rbx,rax
0x3f7f: mov rdi,rbx
0x3f82: call 0x11d0
0x3f87: cmp rax,0xfffffffffffffffd
0x3f8b: mov rbp,rax
0x3f8e: jbe 0x3fb0
0x3f90: test r12,r12
0x3f93: je 0x3fb0
0x3f95: xor edi,edi
0x3f97: call 0x4060
0x3f9c: test al,al
0x3f9e: jne 0x3fb0
0x3fa0: movzx eax,byte ptr [r13+0x0]
0x3fa5: mov ebp,0x1
0x3faa: mov dword ptr [rbx],eax
0x3fac: nop dword ptr [rax+0x0]
0x3fb0: mov rdx,qword ptr [rsp+0x8]
0x3fb5: xor rdx,qword ptr fs:0x28
0x3fbe: mov rax,rbp
0x3fc1: jne 0x3fce
0x3fc3: add rsp,0x18
0x3fc7: pop rbx
0x3fc8: pop rbp
0x3fc9: pop r12
0x3fcb: pop r13
0x3fcd: ret 
0x3fce: call 0x11c0
0x3fd3: nop word ptr cs:[rax+rax*1+0x0]
0x3fdd: nop dword ptr [rax]
0x3fe0: push r12
0x3fe2: push rbp
0x3fe3: mov rbp,rdi
0x3fe6: push rbx
0x3fe7: call 0x1150
0x3fec: mov ebx,dword ptr [rbp+0x0]
0x3fef: mov rdi,rbp
0x3ff2: mov r12,rax
0x3ff5: call 0x4100
0x3ffa: and ebx,0x20
0x3ffd: test ebx,ebx
0x3fff: jne 0x4018
0x4001: test eax,eax
0x4003: je 0x400f
0x4005: test r12,r12
0x4008: mov eax,0xffffffff
0x400d: je 0x4048
0x400f: pop rbx
0x4010: pop rbp
0x4011: pop r12
0x4013: ret 
0x4014: nop dword ptr [rax+0x0]
0x4018: test eax,eax
0x401a: jne 0x4038
0x401c: call 0x1120
0x4021: mov dword ptr [rax],0x0
0x4027: mov eax,0xffffffff
0x402c: pop rbx
0x402d: pop rbp
0x402e: pop r12
0x4030: ret 
0x4031: nop dword ptr [rax+0x0]
0x4038: pop rbx
0x4039: mov eax,0xffffffff
0x403e: pop rbp
0x403f: pop r12
0x4041: ret 
0x4042: nop word ptr [rax+rax*1+0x0]
0x4048: call 0x1120
0x404d: cmp dword ptr [rax],0x9
0x4050: pop rbx
0x4051: pop rbp
0x4052: pop r12
0x4054: setne al
0x4057: movzx eax,al
0x405a: neg eax
0x405c: ret 
0x405d: nop dword ptr [rax]
0x4060: sub rsp,0x8
0x4064: xor esi,esi
0x4066: call 0x12c0
0x406b: mov rdx,rax
0x406e: mov eax,0x1
0x4073: test rdx,rdx
0x4076: je 0x4095
0x4078: lea rdi,[rip+0xe21]
0x407f: mov ecx,0x2
0x4084: mov rsi,rdx
0x4087: repz cmps byte ptr ds:[rsi],byte ptr es:[rdi]
0x4089: seta cl
0x408c: sbb cl,0x0
0x408f: xor eax,eax
0x4091: test cl,cl
0x4093: jne 0x40a0
0x4095: add rsp,0x8
0x4099: ret 
0x409a: nop word ptr [rax+rax*1+0x0]
0x40a0: lea rdi,[rip+0xdfb]
0x40a7: mov ecx,0x6
0x40ac: mov rsi,rdx
0x40af: repz cmps byte ptr ds:[rsi],byte ptr es:[rdi]
0x40b1: seta al
0x40b4: sbb al,0x0
0x40b6: test al,al
0x40b8: setne al
0x40bb: add rsp,0x8
0x40bf: ret 
0x40c0: sub rsp,0x8
0x40c4: mov edi,0xe
0x40c9: call 0x1290
0x40ce: test rax,rax
0x40d1: je 0x40f0
0x40d3: cmp byte ptr [rax],0x0
0x40d6: lea rdx,[rip+0xdcb]
0x40dd: cmove rax,rdx
0x40e1: add rsp,0x8
0x40e5: ret 
0x40e6: nop word ptr cs:[rax+rax*1+0x0]
0x40f0: lea rax,[rip+0xdb1]
0x40f7: add rsp,0x8
0x40fb: ret 
0x40fc: nop dword ptr [rax+0x0]
0x4100: push r12
0x4102: push rbp
0x4103: push rbx
0x4104: mov rbx,rdi
0x4107: call 0x1260
0x410c: test eax,eax
0x410e: mov rdi,rbx
0x4111: js 0x4167
0x4113: call 0x12a0
0x4118: test eax,eax
0x411a: jne 0x4148
0x411c: mov rdi,rbx
0x411f: call 0x4180
0x4124: test eax,eax
0x4126: je 0x4164
0x4128: call 0x1120
0x412d: mov r12d,dword ptr [rax]
0x4130: mov rdi,rbx
0x4133: mov rbp,rax
0x4136: call 0x1170
0x413b: test r12d,r12d
0x413e: jne 0x4170
0x4140: pop rbx
0x4141: pop rbp
0x4142: pop r12
0x4144: ret 
0x4145: nop dword ptr [rax]
0x4148: mov rdi,rbx
0x414b: call 0x1260
0x4150: xor esi,esi
0x4152: mov edx,0x1
0x4157: mov edi,eax
0x4159: call 0x11f0
0x415e: cmp rax,0xffffffffffffffff
0x4162: jne 0x411c
0x4164: mov rdi,rbx
0x4167: pop rbx
0x4168: pop rbp
0x4169: pop r12
0x416b: jmp 0x1170
0x4170: mov dword ptr [rbp+0x0],r12d
0x4174: mov eax,0xffffffff
0x4179: jmp 0x4140
0x417b: nop dword ptr [rax+rax*1+0x0]
0x4180: test rdi,rdi
0x4183: push rbx
0x4184: mov rbx,rdi
0x4187: je 0x419a
0x4189: call 0x12a0
0x418e: test eax,eax
0x4190: je 0x419a
0x4192: test dword ptr [rbx],0x100
0x4198: jne 0x41a8
0x419a: mov rdi,rbx
0x419d: pop rbx
0x419e: jmp 0x1280
0x41a3: nop dword ptr [rax+rax*1+0x0]
0x41a8: mov rdi,rbx
0x41ab: mov edx,0x1
0x41b0: xor esi,esi
0x41b2: call 0x41c0
0x41b7: mov rdi,rbx
0x41ba: pop rbx
0x41bb: jmp 0x1280
0x41c0: mov rax,qword ptr [rdi+0x8]
0x41c4: cmp qword ptr [rdi+0x10],rax
0x41c8: je 0x41d0
0x41ca: jmp 0x12f0
0x41cf: nop 
0x41d0: mov rax,qword ptr [rdi+0x20]
0x41d4: cmp qword ptr [rdi+0x28],rax
0x41d8: jne 0x41ca
0x41da: cmp qword ptr [rdi+0x48],0x0
0x41df: jne 0x41ca
0x41e1: push r12
0x41e3: push rbp
0x41e4: mov r12d,edx
0x41e7: push rbx
0x41e8: mov rbp,rsi
0x41eb: mov rbx,rdi
0x41ee: call 0x1260
0x41f3: mov edx,r12d
0x41f6: mov rsi,rbp
0x41f9: mov edi,eax
0x41fb: call 0x11f0
0x4200: cmp rax,0xffffffffffffffff
0x4204: je 0x4212
0x4206: and dword ptr [rbx],0xffffffef
0x4209: mov qword ptr [rbx+0x90],rax
0x4210: xor eax,eax
0x4212: pop rbx
0x4213: pop rbp
0x4214: pop r12
0x4216: ret 
0x4217: nop word ptr [rax+rax*1+0x0]
0x4220: push r15
0x4222: push r14
0x4224: mov r15,rdx
0x4227: push r13
0x4229: push r12
0x422b: lea r12,[rip+0x2019fe]
0x4232: push rbp
0x4233: lea rbp,[rip+0x2019fe]
0x423a: push rbx
0x423b: mov r13d,edi
0x423e: mov r14,rsi
0x4241: sub rbp,r12
0x4244: sub rsp,0x8
0x4248: sar rbp,0x3
0x424c: call 0x10d8
0x4251: test rbp,rbp
0x4254: je 0x4276
0x4256: xor ebx,ebx
0x4258: nop dword ptr [rax+rax*1+0x0]
0x4260: mov rdx,r15
0x4263: mov rsi,r14
0x4266: mov edi,r13d
0x4269: call qword ptr [r12+rbx*8]
0x426d: add rbx,0x1
0x4271: cmp rbp,rbx
0x4274: jne 0x4260
0x4276: add rsp,0x8
0x427a: pop rbx
0x427b: pop rbp
0x427c: pop r12
0x427e: pop r13
0x4280: pop r14
0x4282: pop r15
0x4284: ret 
0x4285: nop 
0x4286: nop word ptr cs:[rax+rax*1+0x0]
0x4290: repz ret 
0x4292: nop word ptr cs:[rax+rax*1+0x0]
0x429c: nop dword ptr [rax+0x0]
0x42b0: sub rsp,0x8
0x42b4: add rsp,0x8
0x42b8: ret 
3016
610
23
