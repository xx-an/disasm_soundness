LOAD:0000000000400000 ;
LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
LOAD:0000000000400000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000400000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000400000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000400000 ; |                              Virginia Tech                              |
LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
LOAD:0000000000400000 ;
LOAD:0000000000400000 ; Input SHA256 : 9B9A690432EF0DE3020352FA6846B0A764A6A62C58AC4243CA7E6F0FC873F432
LOAD:0000000000400000 ; Input MD5    : F422B9E0D77D84467D6D25301FC821AD
LOAD:0000000000400000 ; Input CRC32  : 0AE18A49
LOAD:0000000000400000
LOAD:0000000000400000 ; File Name   : /home/cindy/Documents/Projects/DSV/litmus-test/callback
LOAD:0000000000400000 ; Format      : ELF64 for x86-64 (Executable)
LOAD:0000000000400000 ; Imagebase   : 400000
LOAD:0000000000400000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000400000 ; Needed Library 'libc.so.6'
LOAD:0000000000400000 ;
LOAD:0000000000400000 ; Source File : 'crtstuff.c'
LOAD:0000000000400000 ; Source File : 'callback.s'
LOAD:0000000000400000 ; Source File : 'crtstuff.c'
LOAD:0000000000400000
LOAD:0000000000400000                 .686p
LOAD:0000000000400000                 .mmx
LOAD:0000000000400000                 .model flat
LOAD:0000000000400000 .intel_syntax noprefix
LOAD:0000000000400000
LOAD:0000000000400000 ; ===========================================================================
LOAD:0000000000400000
LOAD:0000000000400000 ; Segment type: Pure code
LOAD:0000000000400000 ; Segment permissions: Read/Execute
LOAD:0000000000400000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000400000                 assume cs:LOAD
LOAD:0000000000400000                 ;org 400000h
LOAD:0000000000400000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400000 dword_400000    dd 464C457Fh            ; DATA XREF: LOAD:00000000004000C0↓o
LOAD:0000000000400000                                         ; File format: \x7FELF
LOAD:0000000000400004                 db 2                    ; File class: 64-bit
LOAD:0000000000400005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000400006                 db 1                    ; File version
LOAD:0000000000400007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000400008                 db 0                    ; ABI Version
LOAD:0000000000400009                 db 7 dup(0)             ; Padding
LOAD:0000000000400010                 dw 2                    ; File type: Executable
LOAD:0000000000400012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000400014                 dd 1                    ; File version
LOAD:0000000000400018                 dq offset start         ; Entry point
LOAD:0000000000400020                 dq 40h                  ; PHT file offset
LOAD:0000000000400028                 dq 19B0h                ; SHT file offset
LOAD:0000000000400030                 dd 0                    ; Processor-specific flags
LOAD:0000000000400034                 dw 40h                  ; ELF header size
LOAD:0000000000400036                 dw 38h                  ; PHT entry size
LOAD:0000000000400038                 dw 9                    ; Number of entries in PHT
LOAD:000000000040003A                 dw 40h                  ; SHT entry size
LOAD:000000000040003C                 dw 1Dh                  ; Number of entries in SHT
LOAD:000000000040003E                 dw 1Ch                  ; SHT entry index for string table
LOAD:0000000000400040 ; ELF64 Program Header
LOAD:0000000000400040 ; PHT Entry 0
LOAD:0000000000400040 dword_400040    dd 6                    ; DATA XREF: LOAD:0000000000400050↓o
LOAD:0000000000400040                                         ; Type: PHDR
LOAD:0000000000400044                 dd 4                    ; Flags
LOAD:0000000000400048                 dq 40h                  ; File offset
LOAD:0000000000400050                 dq offset dword_400040  ; Virtual address
LOAD:0000000000400058                 dq 400040h              ; Physical address
LOAD:0000000000400060                 dq 1F8h                 ; Size in file image
LOAD:0000000000400068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000400070                 dq 8                    ; Alignment
LOAD:0000000000400078 ; PHT Entry 1
LOAD:0000000000400078                 dd 3                    ; Type: INTERP
LOAD:000000000040007C                 dd 4                    ; Flags
LOAD:0000000000400080                 dq 238h                 ; File offset
LOAD:0000000000400088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000400090                 dq 400238h              ; Physical address
LOAD:0000000000400098                 dq 1Ch                  ; Size in file image
LOAD:00000000004000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000004000A8                 dq 1                    ; Alignment
LOAD:00000000004000B0 ; PHT Entry 2
LOAD:00000000004000B0                 dd 1                    ; Type: LOAD
LOAD:00000000004000B4                 dd 5                    ; Flags
LOAD:00000000004000B8                 dq 0                    ; File offset
LOAD:00000000004000C0                 dq offset dword_400000  ; Virtual address
LOAD:00000000004000C8                 dq 400000h              ; Physical address
LOAD:00000000004000D0                 dq 7D8h                 ; Size in file image
LOAD:00000000004000D8                 dq 7D8h                 ; Size in memory image
LOAD:00000000004000E0                 dq 200000h              ; Alignment
LOAD:00000000004000E8 ; PHT Entry 3
LOAD:00000000004000E8                 dd 1                    ; Type: LOAD
LOAD:00000000004000EC                 dd 6                    ; Flags
LOAD:00000000004000F0                 dq 0E10h                ; File offset
LOAD:00000000004000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000400100                 dq 600E10h              ; Physical address
LOAD:0000000000400108                 dq 220h                 ; Size in file image
LOAD:0000000000400110                 dq 228h                 ; Size in memory image
LOAD:0000000000400118                 dq 200000h              ; Alignment
LOAD:0000000000400120 ; PHT Entry 4
LOAD:0000000000400120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000400124                 dd 6                    ; Flags
LOAD:0000000000400128                 dq 0E20h                ; File offset
LOAD:0000000000400130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000400138                 dq 600E20h              ; Physical address
LOAD:0000000000400140                 dq 1D0h                 ; Size in file image
LOAD:0000000000400148                 dq 1D0h                 ; Size in memory image
LOAD:0000000000400150                 dq 8                    ; Alignment
LOAD:0000000000400158 ; PHT Entry 5
LOAD:0000000000400158                 dd 4                    ; Type: NOTE
LOAD:000000000040015C                 dd 4                    ; Flags
LOAD:0000000000400160                 dq 254h                 ; File offset
LOAD:0000000000400168                 dq offset dword_400254  ; Virtual address
LOAD:0000000000400170                 dq 400254h              ; Physical address
LOAD:0000000000400178                 dq 44h                  ; Size in file image
LOAD:0000000000400180                 dq 44h                  ; Size in memory image
LOAD:0000000000400188                 dq 4                    ; Alignment
LOAD:0000000000400190 ; PHT Entry 6
LOAD:0000000000400190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000400194                 dd 4                    ; Flags
LOAD:0000000000400198                 dq 6C4h                 ; File offset
LOAD:00000000004001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000004001A8                 dq 4006C4h              ; Physical address
LOAD:00000000004001B0                 dq 34h                  ; Size in file image
LOAD:00000000004001B8                 dq 34h                  ; Size in memory image
LOAD:00000000004001C0                 dq 4                    ; Alignment
LOAD:00000000004001C8 ; PHT Entry 7
LOAD:00000000004001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000004001CC                 dd 7                    ; Flags
LOAD:00000000004001D0                 dq 0                    ; File offset
LOAD:00000000004001D8                 dq 0                    ; Virtual address
LOAD:00000000004001E0                 dq 0                    ; Physical address
LOAD:00000000004001E8                 dq 0                    ; Size in file image
LOAD:00000000004001F0                 dq 0                    ; Size in memory image
LOAD:00000000004001F8                 dq 10h                  ; Alignment
LOAD:0000000000400200 ; PHT Entry 8
LOAD:0000000000400200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000400204                 dd 4                    ; Flags
LOAD:0000000000400208                 dq 0E10h                ; File offset
LOAD:0000000000400210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000400218                 dq 600E10h              ; Physical address
LOAD:0000000000400220                 dq 1F0h                 ; Size in file image
LOAD:0000000000400228                 dq 1F0h                 ; Size in memory image
LOAD:0000000000400230                 dq 1                    ; Alignment
LOAD:0000000000400238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000400238                                         ; DATA XREF: LOAD:0000000000400088↑o
LOAD:0000000000400254 ; ELF Note Entry
LOAD:0000000000400254 dword_400254    dd 4                    ; DATA XREF: LOAD:0000000000400168↑o
LOAD:0000000000400254                                         ; Name Size
LOAD:0000000000400258                 dd 10h                  ; Desc Size
LOAD:000000000040025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000400260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000400264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000400274 ; ELF Note Entry
LOAD:0000000000400274                 dd 4                    ; Name Size
LOAD:0000000000400278                 dd 14h                  ; Desc Size
LOAD:000000000040027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000400280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000400284                 db 0Fh, 0E7h, 0A0h, 34h, 3Ah, 7Bh, 3Fh, 0F9h, 34h, 24h ; Desc
LOAD:0000000000400284                 db 83h, 4, 4Dh, 0FAh, 89h, 48h, 0A9h, 83h, 63h, 27h
LOAD:0000000000400298 ; ELF GNU Hash Table
LOAD:0000000000400298 elf_gnu_hash_nbuckets dd 1
LOAD:000000000040029C elf_gnu_hash_symbias dd 1
LOAD:00000000004002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000004002A4 elf_gnu_hash_shift dd 0
LOAD:00000000004002A8 elf_gnu_hash_indexes dq 0
LOAD:00000000004002B0 elf_gnu_hash_bucket dd 0
LOAD:00000000004002B4 elf_gnu_hash_chain dd 0
LOAD:00000000004002B8 ; ELF Symbol Table
LOAD:00000000004002B8                 Elf64_Sym <0>
LOAD:00000000004002D0                 Elf64_Sym <offset aPuts - offset byte_400318, 12h, 0, 0, 0, 0> ; "puts"
LOAD:00000000004002E8                 Elf64_Sym <offset aLibcStartMain - offset byte_400318, 12h, 0, 0, 0, \ ; "__libc_start_main"
LOAD:00000000004002E8                            0>
LOAD:0000000000400300                 Elf64_Sym <offset aGmonStart - offset byte_400318, 20h, 0, 0, 0, 0> ; "__gmon_start__"
LOAD:0000000000400318 ; ELF String Table
LOAD:0000000000400318 byte_400318     db 0                    ; DATA XREF: LOAD:00000000004002D0↑o
LOAD:0000000000400318                                         ; LOAD:00000000004002E8↑o ...
LOAD:0000000000400319 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000400360↓o
LOAD:0000000000400323 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000004002D0↑o
LOAD:0000000000400328 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000400328                                         ; DATA XREF: LOAD:00000000004002E8↑o
LOAD:000000000040033A aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000400370↓o
LOAD:0000000000400346 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000400300↑o
LOAD:0000000000400355                 align 2
LOAD:0000000000400356 ; ELF GNU Symbol Version Table
LOAD:0000000000400356                 dw 0
LOAD:0000000000400358                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:000000000040035A                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:000000000040035C                 dw 0                    ; local  symbol: __gmon_start__
LOAD:000000000040035E                 dw 0
LOAD:0000000000400360 ; ELF GNU Symbol Version Requirements
LOAD:0000000000400360                 Elf64_Verneed <1, 1, offset aLibcSo6 - offset byte_400318, 10h, 0> ; "libc.so.6"
LOAD:0000000000400370                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_400318, \ ; "GLIBC_2.2.5"
LOAD:0000000000400370                                0>
LOAD:0000000000400380 ; ELF RELA Relocation Table
LOAD:0000000000400380                 Elf64_Rela <600FF0h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000400398                 Elf64_Rela <600FF8h, 300000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000004003B0 ; ELF JMPREL Relocation Table
LOAD:00000000004003B0                 Elf64_Rela <601018h, 100000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:00000000004003B0 LOAD            ends
LOAD:00000000004003B0
.init:00000000004003C8 ; ===========================================================================
.init:00000000004003C8
.init:00000000004003C8 ; Segment type: Pure code
.init:00000000004003C8 ; Segment permissions: Read/Execute
.init:00000000004003C8 _init           segment dword public 'CODE' use64
.init:00000000004003C8                 assume cs:_init
.init:00000000004003C8                 ;org 4003C8h
.init:00000000004003C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000004003C8
.init:00000000004003C8 ; =============== S U B R O U T I N E =======================================
.init:00000000004003C8
.init:00000000004003C8
.init:00000000004003C8                 public _init_proc
.init:00000000004003C8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000004003C8                 sub     rsp, 8          ; _init
.init:00000000004003CC                 mov     rax, cs:__gmon_start___ptr
.init:00000000004003D3                 test    rax, rax
.init:00000000004003D6                 jz      short loc_4003DA
.init:00000000004003D8                 call    rax ; __gmon_start__
.init:00000000004003DA
.init:00000000004003DA loc_4003DA:                             ; CODE XREF: _init_proc+E↑j
.init:00000000004003DA                 add     rsp, 8
.init:00000000004003DE                 retn
.init:00000000004003DE _init_proc      endp
.init:00000000004003DE
.init:00000000004003DE _init           ends
.init:00000000004003DE
LOAD:00000000004003DF ; ===========================================================================
LOAD:00000000004003DF
LOAD:00000000004003DF ; Segment type: Pure code
LOAD:00000000004003DF ; Segment permissions: Read/Execute
LOAD:00000000004003DF LOAD            segment byte public 'CODE' use64
LOAD:00000000004003DF                 assume cs:LOAD
LOAD:00000000004003DF                 ;org 4003DFh
LOAD:00000000004003DF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000004003DF                 align 20h
LOAD:00000000004003DF LOAD            ends
LOAD:00000000004003DF
.plt:00000000004003E0 ; ===========================================================================
.plt:00000000004003E0
.plt:00000000004003E0 ; Segment type: Pure code
.plt:00000000004003E0 ; Segment permissions: Read/Execute
.plt:00000000004003E0 _plt            segment para public 'CODE' use64
.plt:00000000004003E0                 assume cs:_plt
.plt:00000000004003E0                 ;org 4003E0h
.plt:00000000004003E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000004003E0
.plt:00000000004003E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000004003E0
.plt:00000000004003E0
.plt:00000000004003E0 sub_4003E0      proc near               ; CODE XREF: .plt:00000000004003FB↓j
.plt:00000000004003E0 ; __unwind {
.plt:00000000004003E0                 push    cs:qword_601008
.plt:00000000004003E6                 jmp     cs:qword_601010
.plt:00000000004003E6 sub_4003E0      endp
.plt:00000000004003E6
.plt:00000000004003E6 ; ---------------------------------------------------------------------------
.plt:00000000004003EC                 align 10h
.plt:00000000004003F0
.plt:00000000004003F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000004003F0
.plt:00000000004003F0 ; Attributes: thunk
.plt:00000000004003F0
.plt:00000000004003F0 ; int puts(const char *s)
.plt:00000000004003F0 _puts           proc near               ; CODE XREF: sub_400599+B↓p
.plt:00000000004003F0                                         ; sub_4005AB+B↓p ...
.plt:00000000004003F0                 jmp     cs:off_601018
.plt:00000000004003F0 _puts           endp
.plt:00000000004003F0
.plt:00000000004003F6 ; ---------------------------------------------------------------------------
.plt:00000000004003F6                 push    0
.plt:00000000004003FB                 jmp     sub_4003E0
.plt:00000000004003FB ; } // starts at 4003E0
.plt:00000000004003FB _plt            ends
.plt:00000000004003FB
.text:0000000000400400 ; ===========================================================================
.text:0000000000400400
.text:0000000000400400 ; Segment type: Pure code
.text:0000000000400400 ; Segment permissions: Read/Execute
.text:0000000000400400 _text           segment para public 'CODE' use64
.text:0000000000400400                 assume cs:_text
.text:0000000000400400                 ;org 400400h
.text:0000000000400400                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000400400
.text:0000000000400400 ; =============== S U B R O U T I N E =======================================
.text:0000000000400400
.text:0000000000400400 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000400400
.text:0000000000400400                 public start
.text:0000000000400400 start           proc near               ; DATA XREF: LOAD:0000000000400018↑o
.text:0000000000400400 ; __unwind {
.text:0000000000400400                 xor     ebp, ebp
.text:0000000000400402                 mov     r9, rdx         ; rtld_fini
.text:0000000000400405                 pop     rsi             ; argc
.text:0000000000400406                 mov     rdx, rsp        ; ubp_av
.text:0000000000400409                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000040040D                 push    rax
.text:000000000040040E                 push    rsp             ; stack_end
.text:000000000040040F                 mov     r8, offset __libc_csu_fini ; fini
.text:0000000000400416                 mov     rcx, offset __libc_csu_init ; init
.text:000000000040041D                 mov     rdi, offset main ; main
.text:0000000000400424                 call    cs:__libc_start_main_ptr
.text:000000000040042A                 hlt
.text:000000000040042A ; } // starts at 400400
.text:000000000040042A start           endp
.text:000000000040042A
.text:000000000040042A ; ---------------------------------------------------------------------------
.text:000000000040042B                 align 10h
.text:0000000000400430
.text:0000000000400430 ; =============== S U B R O U T I N E =======================================
.text:0000000000400430
.text:0000000000400430
.text:0000000000400430                 public _dl_relocate_static_pie
.text:0000000000400430 _dl_relocate_static_pie proc near
.text:0000000000400430 ; __unwind {
.text:0000000000400430                 rep retn
.text:0000000000400430 ; } // starts at 400430
.text:0000000000400430 _dl_relocate_static_pie endp
.text:0000000000400430
.text:0000000000400430 ; ---------------------------------------------------------------------------
.text:0000000000400432                 align 20h
.text:0000000000400440
.text:0000000000400440 ; =============== S U B R O U T I N E =======================================
.text:0000000000400440
.text:0000000000400440 ; Attributes: bp-based frame info_from_lumina
.text:0000000000400440
.text:0000000000400440 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux+D↓p
.text:0000000000400440                 push    rbp
.text:0000000000400441                 mov     eax, offset __bss_start
.text:0000000000400446                 cmp     rax, offset __bss_start
.text:000000000040044C                 mov     rbp, rsp
.text:000000000040044F                 jz      short loc_400468
.text:0000000000400451                 mov     eax, 0
.text:0000000000400456                 test    rax, rax
.text:0000000000400459                 jz      short loc_400468
.text:000000000040045B                 pop     rbp
.text:000000000040045C                 mov     edi, offset __bss_start
.text:0000000000400461                 jmp     rax
.text:0000000000400461 ; ---------------------------------------------------------------------------
.text:0000000000400463                 align 8
.text:0000000000400468
.text:0000000000400468 loc_400468:                             ; CODE XREF: deregister_tm_clones+F↑j
.text:0000000000400468                                         ; deregister_tm_clones+19↑j
.text:0000000000400468                 pop     rbp
.text:0000000000400469                 retn
.text:0000000000400469 deregister_tm_clones endp
.text:0000000000400469
.text:0000000000400469 ; ---------------------------------------------------------------------------
.text:000000000040046A                 align 10h
.text:0000000000400470
.text:0000000000400470 ; =============== S U B R O U T I N E =======================================
.text:0000000000400470
.text:0000000000400470 ; Attributes: bp-based frame info_from_lumina
.text:0000000000400470
.text:0000000000400470 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000400470                 mov     esi, offset __bss_start
.text:0000000000400475                 push    rbp
.text:0000000000400476                 sub     rsi, offset __bss_start
.text:000000000040047D                 mov     rbp, rsp
.text:0000000000400480                 sar     rsi, 3
.text:0000000000400484                 mov     rax, rsi
.text:0000000000400487                 shr     rax, 3Fh
.text:000000000040048B                 add     rsi, rax
.text:000000000040048E                 sar     rsi, 1
.text:0000000000400491                 jz      short loc_4004A8
.text:0000000000400493                 mov     eax, 0
.text:0000000000400498                 test    rax, rax
.text:000000000040049B                 jz      short loc_4004A8
.text:000000000040049D                 pop     rbp
.text:000000000040049E                 mov     edi, offset __bss_start
.text:00000000004004A3                 jmp     rax
.text:00000000004004A3 ; ---------------------------------------------------------------------------
.text:00000000004004A5                 align 8
.text:00000000004004A8
.text:00000000004004A8 loc_4004A8:                             ; CODE XREF: register_tm_clones+21↑j
.text:00000000004004A8                                         ; register_tm_clones+2B↑j
.text:00000000004004A8                 pop     rbp
.text:00000000004004A9                 retn
.text:00000000004004A9 register_tm_clones endp
.text:00000000004004A9
.text:00000000004004A9 ; ---------------------------------------------------------------------------
.text:00000000004004AA                 align 10h
.text:00000000004004B0
.text:00000000004004B0 ; =============== S U B R O U T I N E =======================================
.text:00000000004004B0
.text:00000000004004B0 ; Attributes: info_from_lumina
.text:00000000004004B0
.text:00000000004004B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000004004B0                 cmp     cs:__bss_start, 0
.text:00000000004004B7                 jnz     short locret_4004D0
.text:00000000004004B9                 push    rbp
.text:00000000004004BA                 mov     rbp, rsp
.text:00000000004004BD                 call    deregister_tm_clones
.text:00000000004004C2                 mov     cs:__bss_start, 1
.text:00000000004004C9                 pop     rbp
.text:00000000004004CA                 retn
.text:00000000004004CA ; ---------------------------------------------------------------------------
.text:00000000004004CB                 align 10h
.text:00000000004004D0
.text:00000000004004D0 locret_4004D0:                          ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000004004D0                 rep retn
.text:00000000004004D0 __do_global_dtors_aux endp
.text:00000000004004D0
.text:00000000004004D0 ; ---------------------------------------------------------------------------
.text:00000000004004D2                 align 20h
.text:00000000004004E0
.text:00000000004004E0 ; =============== S U B R O U T I N E =======================================
.text:00000000004004E0
.text:00000000004004E0 ; Attributes: bp-based frame
.text:00000000004004E0
.text:00000000004004E0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000004004E0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000004004E0                 push    rbp
.text:00000000004004E1                 mov     rbp, rsp
.text:00000000004004E4                 pop     rbp
.text:00000000004004E5                 jmp     short register_tm_clones
.text:00000000004004E5 frame_dummy     endp
.text:00000000004004E5
.text:00000000004004E5 ; ---------------------------------------------------------------------------
.text:00000000004004E7                 align 10h
.text:00000000004004F0
.text:00000000004004F0 ; =============== S U B R O U T I N E =======================================
.text:00000000004004F0
.text:00000000004004F0 ; Attributes: bp-based frame
.text:00000000004004F0
.text:00000000004004F0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000004004F0                 public main
.text:00000000004004F0 main            proc near               ; DATA XREF: start+1D↑o
.text:00000000004004F0
.text:00000000004004F0 var_34          = dword ptr -34h
.text:00000000004004F0 var_28          = dword ptr -28h
.text:00000000004004F0 var_24          = dword ptr -24h
.text:00000000004004F0 var_20          = qword ptr -20h
.text:00000000004004F0
.text:00000000004004F0                 push    rbp
.text:00000000004004F1                 mov     rbp, rsp
.text:00000000004004F4                 sub     rsp, 40h
.text:00000000004004F8                 mov     [rbp+var_34], edi
.text:00000000004004FB                 xor     eax, eax
.text:00000000004004FD                 mov     [rbp+var_28], 0
.text:0000000000400504                 jmp     short loc_400521
.text:0000000000400506 ; ---------------------------------------------------------------------------
.text:0000000000400506
.text:0000000000400506 loc_400506:                             ; CODE XREF: main+35↓j
.text:0000000000400506                 mov     eax, [rbp+var_28]
.text:0000000000400509                 mov     edi, eax
.text:000000000040050B                 call    _pick
.text:0000000000400510                 mov     rdx, rax
.text:0000000000400513                 mov     eax, [rbp+var_28]
.text:0000000000400516                 cdqe
.text:0000000000400518                 mov     [rbp+rax*8+var_20], rdx
.text:000000000040051D                 add     [rbp+var_28], 1
.text:0000000000400521
.text:0000000000400521 loc_400521:                             ; CODE XREF: main+14↑j
.text:0000000000400521                 cmp     [rbp+var_28], 2
.text:0000000000400525                 jle     short loc_400506
.text:0000000000400527                 mov     [rbp+var_24], 0
.text:000000000040052E                 jmp     short loc_400546
.text:0000000000400530 ; ---------------------------------------------------------------------------
.text:0000000000400530
.text:0000000000400530 loc_400530:                             ; CODE XREF: main+68↓j
.text:0000000000400530                 mov     eax, [rbp+var_24]
.text:0000000000400533                 cdqe
.text:0000000000400535                 mov     rax, [rbp+rax*8+var_20]
.text:000000000040053A                 mov     rdi, rax
.text:000000000040053D                 call    _callback
.text:0000000000400542                 add     [rbp+var_24], 1
.text:0000000000400546
.text:0000000000400546 loc_400546:                             ; CODE XREF: main+3E↑j
.text:0000000000400546                 mov     eax, [rbp+var_34]
.text:0000000000400549                 mov     esi, eax
.text:000000000040054B                 mov     edi, 3
.text:0000000000400550                 call    _min
.text:0000000000400555                 cmp     [rbp+var_24], eax
.text:0000000000400558                 jl      short loc_400530
.text:000000000040055A                 mov     eax, 0
.text:000000000040055F                 leave
.text:0000000000400560                 retn
.text:0000000000400560 main            endp
.text:0000000000400560
.text:0000000000400561
.text:0000000000400561 ; =============== S U B R O U T I N E =======================================
.text:0000000000400561
.text:0000000000400561 ; Attributes: bp-based frame
.text:0000000000400561
.text:0000000000400561 _pick           proc near               ; CODE XREF: main+1B↑p
.text:0000000000400561
.text:0000000000400561 var_4           = dword ptr -4
.text:0000000000400561
.text:0000000000400561                 push    rbp
.text:0000000000400562                 mov     rbp, rsp
.text:0000000000400565                 mov     [rbp+var_4], edi
.text:0000000000400568                 mov     eax, [rbp+var_4]
.text:000000000040056B                 cmp     eax, 1
.text:000000000040056E                 jz      short loc_400583
.text:0000000000400570                 cmp     eax, 2
.text:0000000000400573                 jz      short loc_40058D
.text:0000000000400575                 test    eax, eax
.text:0000000000400577                 jnz     short loc_400597
.text:0000000000400579                 lea     rax, sub_400599
.text:0000000000400581                 jmp     short loc_400597
.text:0000000000400583 ; ---------------------------------------------------------------------------
.text:0000000000400583
.text:0000000000400583 loc_400583:                             ; CODE XREF: _pick+D↑j
.text:0000000000400583                 lea     rax, sub_4005AB
.text:000000000040058B                 jmp     short loc_400597
.text:000000000040058D ; ---------------------------------------------------------------------------
.text:000000000040058D
.text:000000000040058D loc_40058D:                             ; CODE XREF: _pick+12↑j
.text:000000000040058D                 lea     rax, sub_4005BD
.text:0000000000400595                 jmp     short $+2
.text:0000000000400597 ; ---------------------------------------------------------------------------
.text:0000000000400597
.text:0000000000400597 loc_400597:                             ; CODE XREF: _pick+16↑j
.text:0000000000400597                                         ; _pick+20↑j ...
.text:0000000000400597                 pop     rbp
.text:0000000000400598                 retn
.text:0000000000400598 _pick           endp
.text:0000000000400598
.text:0000000000400599
.text:0000000000400599 ; =============== S U B R O U T I N E =======================================
.text:0000000000400599
.text:0000000000400599 ; Attributes: bp-based frame
.text:0000000000400599
.text:0000000000400599 sub_400599      proc near               ; DATA XREF: _pick+18↑o
.text:0000000000400599                 push    rbp
.text:000000000040059A                 mov     rbp, rsp
.text:000000000040059D                 lea     rdi, message_a  ; "This is location A\\n"
.text:00000000004005A4                 call    _puts
.text:00000000004005A9                 pop     rbp
.text:00000000004005AA                 retn
.text:00000000004005AA sub_400599      endp
.text:00000000004005AA
.text:00000000004005AB
.text:00000000004005AB ; =============== S U B R O U T I N E =======================================
.text:00000000004005AB
.text:00000000004005AB ; Attributes: bp-based frame
.text:00000000004005AB
.text:00000000004005AB sub_4005AB      proc near               ; DATA XREF: _pick:loc_400583↑o
.text:00000000004005AB                 push    rbp
.text:00000000004005AC                 mov     rbp, rsp
.text:00000000004005AF                 lea     rdi, message_b  ; "This is location B\\n"
.text:00000000004005B6                 call    _puts
.text:00000000004005BB                 pop     rbp
.text:00000000004005BC                 retn
.text:00000000004005BC sub_4005AB      endp
.text:00000000004005BC
.text:00000000004005BD
.text:00000000004005BD ; =============== S U B R O U T I N E =======================================
.text:00000000004005BD
.text:00000000004005BD ; Attributes: bp-based frame
.text:00000000004005BD
.text:00000000004005BD sub_4005BD      proc near               ; DATA XREF: _pick:loc_40058D↑o
.text:00000000004005BD                 push    rbp
.text:00000000004005BE                 mov     rbp, rsp
.text:00000000004005C1                 lea     rdi, message_c  ; "This is location C\\n"
.text:00000000004005C8                 call    _puts
.text:00000000004005CD                 pop     rbp
.text:00000000004005CE                 retn
.text:00000000004005CE sub_4005BD      endp
.text:00000000004005CE
.text:00000000004005CF
.text:00000000004005CF ; =============== S U B R O U T I N E =======================================
.text:00000000004005CF
.text:00000000004005CF ; Attributes: bp-based frame
.text:00000000004005CF
.text:00000000004005CF _callback       proc near               ; CODE XREF: main+4D↑p
.text:00000000004005CF
.text:00000000004005CF var_8           = qword ptr -8
.text:00000000004005CF
.text:00000000004005CF                 push    rbp
.text:00000000004005D0                 mov     rbp, rsp
.text:00000000004005D3                 sub     rsp, 10h
.text:00000000004005D7                 mov     [rbp+var_8], rdi
.text:00000000004005DB                 mov     rdx, [rbp+var_8]
.text:00000000004005DF                 mov     eax, 0
.text:00000000004005E4                 call    rdx
.text:00000000004005E6                 leave
.text:00000000004005E7                 retn
.text:00000000004005E7 _callback       endp
.text:00000000004005E7
.text:00000000004005E8
.text:00000000004005E8 ; =============== S U B R O U T I N E =======================================
.text:00000000004005E8
.text:00000000004005E8 ; Attributes: bp-based frame
.text:00000000004005E8
.text:00000000004005E8 _min            proc near               ; CODE XREF: main+60↑p
.text:00000000004005E8
.text:00000000004005E8 var_8           = dword ptr -8
.text:00000000004005E8 var_4           = dword ptr -4
.text:00000000004005E8
.text:00000000004005E8                 push    rbp
.text:00000000004005E9                 mov     rbp, rsp
.text:00000000004005EC                 mov     [rbp+var_4], edi
.text:00000000004005EF                 mov     [rbp+var_8], esi
.text:00000000004005F2                 mov     eax, [rbp+var_4]
.text:00000000004005F5                 cmp     [rbp+var_8], eax
.text:00000000004005F8                 cmovle  eax, [rbp+var_8]
.text:00000000004005FC                 pop     rbp
.text:00000000004005FD                 retn
.text:00000000004005FD _min            endp
.text:00000000004005FD
.text:00000000004005FD ; ---------------------------------------------------------------------------
.text:00000000004005FE                 align 20h
.text:0000000000400600
.text:0000000000400600 ; =============== S U B R O U T I N E =======================================
.text:0000000000400600
.text:0000000000400600 ; Attributes: info_from_lumina
.text:0000000000400600
.text:0000000000400600 ; void _libc_csu_init(void)
.text:0000000000400600                 public __libc_csu_init
.text:0000000000400600 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000400600 ; __unwind {
.text:0000000000400600                 push    r15
.text:0000000000400602                 push    r14
.text:0000000000400604                 mov     r15, rdx
.text:0000000000400607                 push    r13
.text:0000000000400609                 push    r12
.text:000000000040060B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000400612                 push    rbp
.text:0000000000400613                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000040061A                 push    rbx
.text:000000000040061B                 mov     r13d, edi
.text:000000000040061E                 mov     r14, rsi
.text:0000000000400621                 sub     rbp, r12
.text:0000000000400624                 sub     rsp, 8
.text:0000000000400628                 sar     rbp, 3
.text:000000000040062C                 call    _init_proc
.text:0000000000400631                 test    rbp, rbp
.text:0000000000400634                 jz      short loc_400656
.text:0000000000400636                 xor     ebx, ebx
.text:0000000000400638                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000400640
.text:0000000000400640 loc_400640:                             ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000400640                 mov     rdx, r15
.text:0000000000400643                 mov     rsi, r14
.text:0000000000400646                 mov     edi, r13d
.text:0000000000400649                 call    ds:(__frame_dummy_init_array_entry - 600E10h)[r12+rbx*8]
.text:000000000040064D                 add     rbx, 1
.text:0000000000400651                 cmp     rbp, rbx
.text:0000000000400654                 jnz     short loc_400640
.text:0000000000400656
.text:0000000000400656 loc_400656:                             ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000400656                 add     rsp, 8
.text:000000000040065A                 pop     rbx
.text:000000000040065B                 pop     rbp
.text:000000000040065C                 pop     r12
.text:000000000040065E                 pop     r13
.text:0000000000400660                 pop     r14
.text:0000000000400662                 pop     r15
.text:0000000000400664                 retn
.text:0000000000400664 ; } // starts at 400600
.text:0000000000400664 __libc_csu_init endp
.text:0000000000400664
.text:0000000000400664 ; ---------------------------------------------------------------------------
.text:0000000000400665                 align 10h
.text:0000000000400670
.text:0000000000400670 ; =============== S U B R O U T I N E =======================================
.text:0000000000400670
.text:0000000000400670
.text:0000000000400670 ; void _libc_csu_fini(void)
.text:0000000000400670                 public __libc_csu_fini
.text:0000000000400670 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000400670 ; __unwind {
.text:0000000000400670                 rep retn
.text:0000000000400670 ; } // starts at 400670
.text:0000000000400670 __libc_csu_fini endp
.text:0000000000400670
.text:0000000000400670 _text           ends
.text:0000000000400670
LOAD:0000000000400672 ; ===========================================================================
LOAD:0000000000400672
LOAD:0000000000400672 ; Segment type: Pure code
LOAD:0000000000400672 ; Segment permissions: Read/Execute
LOAD:0000000000400672 LOAD            segment byte public 'CODE' use64
LOAD:0000000000400672                 assume cs:LOAD
LOAD:0000000000400672                 ;org 400672h
LOAD:0000000000400672                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400672                 align 4
LOAD:0000000000400672 LOAD            ends
LOAD:0000000000400672
.fini:0000000000400674 ; ===========================================================================
.fini:0000000000400674
.fini:0000000000400674 ; Segment type: Pure code
.fini:0000000000400674 ; Segment permissions: Read/Execute
.fini:0000000000400674 _fini           segment dword public 'CODE' use64
.fini:0000000000400674                 assume cs:_fini
.fini:0000000000400674                 ;org 400674h
.fini:0000000000400674                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000400674
.fini:0000000000400674 ; =============== S U B R O U T I N E =======================================
.fini:0000000000400674
.fini:0000000000400674
.fini:0000000000400674                 public _term_proc
.fini:0000000000400674 _term_proc      proc near
.fini:0000000000400674                 sub     rsp, 8          ; _fini
.fini:0000000000400678                 add     rsp, 8
.fini:000000000040067C                 retn
.fini:000000000040067C _term_proc      endp
.fini:000000000040067C
.fini:000000000040067C _fini           ends
.fini:000000000040067C
LOAD:000000000040067D ; ===========================================================================
LOAD:000000000040067D
LOAD:000000000040067D ; Segment type: Pure code
LOAD:000000000040067D ; Segment permissions: Read/Execute
LOAD:000000000040067D LOAD            segment byte public 'CODE' use64
LOAD:000000000040067D                 assume cs:LOAD
LOAD:000000000040067D                 ;org 40067Dh
LOAD:000000000040067D                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000040067D                 align 20h
LOAD:000000000040067D LOAD            ends
LOAD:000000000040067D
.rodata:0000000000400680 ; ===========================================================================
.rodata:0000000000400680
.rodata:0000000000400680 ; Segment type: Pure data
.rodata:0000000000400680 ; Segment permissions: Read
.rodata:0000000000400680 _rodata         segment dword public 'CONST' use64
.rodata:0000000000400680                 assume cs:_rodata
.rodata:0000000000400680                 ;org 400680h
.rodata:0000000000400680                 public _IO_stdin_used
.rodata:0000000000400680 _IO_stdin_used  db    1
.rodata:0000000000400681                 db    0
.rodata:0000000000400682                 db    2
.rodata:0000000000400683                 db    0
.rodata:0000000000400684 ; const char message_a[]
.rodata:0000000000400684 message_a       db 'This is location A\n',0
.rodata:0000000000400684                                         ; DATA XREF: sub_400599+4↑o
.rodata:0000000000400699 ; const char message_b[]
.rodata:0000000000400699 message_b       db 'This is location B\n',0
.rodata:0000000000400699                                         ; DATA XREF: sub_4005AB+4↑o
.rodata:00000000004006AE ; const char message_c[]
.rodata:00000000004006AE message_c       db 'This is location C\n',0
.rodata:00000000004006AE                                         ; DATA XREF: sub_4005BD+4↑o
.rodata:00000000004006AE _rodata         ends
.rodata:00000000004006AE
LOAD:00000000004006C3 ; ===========================================================================
LOAD:00000000004006C3
LOAD:00000000004006C3 ; Segment type: Pure code
LOAD:00000000004006C3 ; Segment permissions: Read/Execute
LOAD:00000000004006C3 LOAD            segment byte public 'CODE' use64
LOAD:00000000004006C3                 assume cs:LOAD
LOAD:00000000004006C3                 ;org 4006C3h
LOAD:00000000004006C3                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000004006C3                 align 4
LOAD:00000000004006C3 LOAD            ends
LOAD:00000000004006C3
.eh_frame_hdr:00000000004006C4 ; ===========================================================================
.eh_frame_hdr:00000000004006C4
.eh_frame_hdr:00000000004006C4 ; Segment type: Pure data
.eh_frame_hdr:00000000004006C4 ; Segment permissions: Read
.eh_frame_hdr:00000000004006C4 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000004006C4                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000004006C4                 ;org 4006C4h
.eh_frame_hdr:00000000004006C4 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000004001A0↑o
.eh_frame_hdr:00000000004006C5                 db  1Bh
.eh_frame_hdr:00000000004006C6                 db    3
.eh_frame_hdr:00000000004006C7                 db  3Bh ; ;
.eh_frame_hdr:00000000004006C8                 db  30h ; 0
.eh_frame_hdr:00000000004006C9                 db    0
.eh_frame_hdr:00000000004006CA                 db    0
.eh_frame_hdr:00000000004006CB                 db    0
.eh_frame_hdr:00000000004006CC                 db    5
.eh_frame_hdr:00000000004006CD                 db    0
.eh_frame_hdr:00000000004006CE                 db    0
.eh_frame_hdr:00000000004006CF                 db    0
.eh_frame_hdr:00000000004006D0                 db  1Ch
.eh_frame_hdr:00000000004006D1                 db 0FDh
.eh_frame_hdr:00000000004006D2                 db 0FFh
.eh_frame_hdr:00000000004006D3                 db 0FFh
.eh_frame_hdr:00000000004006D4                 db  8Ch
.eh_frame_hdr:00000000004006D5                 db    0
.eh_frame_hdr:00000000004006D6                 db    0
.eh_frame_hdr:00000000004006D7                 db    0
.eh_frame_hdr:00000000004006D8                 db  3Ch ; <
.eh_frame_hdr:00000000004006D9                 db 0FDh
.eh_frame_hdr:00000000004006DA                 db 0FFh
.eh_frame_hdr:00000000004006DB                 db 0FFh
.eh_frame_hdr:00000000004006DC                 db  4Ch ; L
.eh_frame_hdr:00000000004006DD                 db    0
.eh_frame_hdr:00000000004006DE                 db    0
.eh_frame_hdr:00000000004006DF                 db    0
.eh_frame_hdr:00000000004006E0                 db  6Ch ; l
.eh_frame_hdr:00000000004006E1                 db 0FDh
.eh_frame_hdr:00000000004006E2                 db 0FFh
.eh_frame_hdr:00000000004006E3                 db 0FFh
.eh_frame_hdr:00000000004006E4                 db  78h ; x
.eh_frame_hdr:00000000004006E5                 db    0
.eh_frame_hdr:00000000004006E6                 db    0
.eh_frame_hdr:00000000004006E7                 db    0
.eh_frame_hdr:00000000004006E8                 db  3Ch ; <
.eh_frame_hdr:00000000004006E9                 db 0FFh
.eh_frame_hdr:00000000004006EA                 db 0FFh
.eh_frame_hdr:00000000004006EB                 db 0FFh
.eh_frame_hdr:00000000004006EC                 db 0B4h
.eh_frame_hdr:00000000004006ED                 db    0
.eh_frame_hdr:00000000004006EE                 db    0
.eh_frame_hdr:00000000004006EF                 db    0
.eh_frame_hdr:00000000004006F0                 db 0ACh
.eh_frame_hdr:00000000004006F1                 db 0FFh
.eh_frame_hdr:00000000004006F2                 db 0FFh
.eh_frame_hdr:00000000004006F3                 db 0FFh
.eh_frame_hdr:00000000004006F4                 db 0FCh
.eh_frame_hdr:00000000004006F5                 db    0
.eh_frame_hdr:00000000004006F6                 db    0
.eh_frame_hdr:00000000004006F7                 db    0
.eh_frame_hdr:00000000004006F7 _eh_frame_hdr   ends
.eh_frame_hdr:00000000004006F7
.eh_frame:00000000004006F8 ; ===========================================================================
.eh_frame:00000000004006F8
.eh_frame:00000000004006F8 ; Segment type: Pure data
.eh_frame:00000000004006F8 ; Segment permissions: Read
.eh_frame:00000000004006F8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000004006F8                 assume cs:_eh_frame
.eh_frame:00000000004006F8                 ;org 4006F8h
.eh_frame:00000000004006F8                 db  14h
.eh_frame:00000000004006F9                 db    0
.eh_frame:00000000004006FA                 db    0
.eh_frame:00000000004006FB                 db    0
.eh_frame:00000000004006FC                 db    0
.eh_frame:00000000004006FD                 db    0
.eh_frame:00000000004006FE                 db    0
.eh_frame:00000000004006FF                 db    0
.eh_frame:0000000000400700                 db    1
.eh_frame:0000000000400701                 db  7Ah ; z
.eh_frame:0000000000400702                 db  52h ; R
.eh_frame:0000000000400703                 db    0
.eh_frame:0000000000400704                 db    1
.eh_frame:0000000000400705                 db  78h ; x
.eh_frame:0000000000400706                 db  10h
.eh_frame:0000000000400707                 db    1
.eh_frame:0000000000400708                 db  1Bh
.eh_frame:0000000000400709                 db  0Ch
.eh_frame:000000000040070A                 db    7
.eh_frame:000000000040070B                 db    8
.eh_frame:000000000040070C                 db  90h
.eh_frame:000000000040070D                 db    1
.eh_frame:000000000040070E                 db    7
.eh_frame:000000000040070F                 db  10h
.eh_frame:0000000000400710                 db  10h
.eh_frame:0000000000400711                 db    0
.eh_frame:0000000000400712                 db    0
.eh_frame:0000000000400713                 db    0
.eh_frame:0000000000400714                 db  1Ch
.eh_frame:0000000000400715                 db    0
.eh_frame:0000000000400716                 db    0
.eh_frame:0000000000400717                 db    0
.eh_frame:0000000000400718                 db 0E8h
.eh_frame:0000000000400719                 db 0FCh
.eh_frame:000000000040071A                 db 0FFh
.eh_frame:000000000040071B                 db 0FFh
.eh_frame:000000000040071C                 db  2Bh ; +
.eh_frame:000000000040071D                 db    0
.eh_frame:000000000040071E                 db    0
.eh_frame:000000000040071F                 db    0
.eh_frame:0000000000400720                 db    0
.eh_frame:0000000000400721                 db    0
.eh_frame:0000000000400722                 db    0
.eh_frame:0000000000400723                 db    0
.eh_frame:0000000000400724                 db  14h
.eh_frame:0000000000400725                 db    0
.eh_frame:0000000000400726                 db    0
.eh_frame:0000000000400727                 db    0
.eh_frame:0000000000400728                 db    0
.eh_frame:0000000000400729                 db    0
.eh_frame:000000000040072A                 db    0
.eh_frame:000000000040072B                 db    0
.eh_frame:000000000040072C                 db    1
.eh_frame:000000000040072D                 db  7Ah ; z
.eh_frame:000000000040072E                 db  52h ; R
.eh_frame:000000000040072F                 db    0
.eh_frame:0000000000400730                 db    1
.eh_frame:0000000000400731                 db  78h ; x
.eh_frame:0000000000400732                 db  10h
.eh_frame:0000000000400733                 db    1
.eh_frame:0000000000400734                 db  1Bh
.eh_frame:0000000000400735                 db  0Ch
.eh_frame:0000000000400736                 db    7
.eh_frame:0000000000400737                 db    8
.eh_frame:0000000000400738                 db  90h
.eh_frame:0000000000400739                 db    1
.eh_frame:000000000040073A                 db    0
.eh_frame:000000000040073B                 db    0
.eh_frame:000000000040073C                 db  10h
.eh_frame:000000000040073D                 db    0
.eh_frame:000000000040073E                 db    0
.eh_frame:000000000040073F                 db    0
.eh_frame:0000000000400740                 db  1Ch
.eh_frame:0000000000400741                 db    0
.eh_frame:0000000000400742                 db    0
.eh_frame:0000000000400743                 db    0
.eh_frame:0000000000400744                 db 0ECh
.eh_frame:0000000000400745                 db 0FCh
.eh_frame:0000000000400746                 db 0FFh
.eh_frame:0000000000400747                 db 0FFh
.eh_frame:0000000000400748                 db    2
.eh_frame:0000000000400749                 db    0
.eh_frame:000000000040074A                 db    0
.eh_frame:000000000040074B                 db    0
.eh_frame:000000000040074C                 db    0
.eh_frame:000000000040074D                 db    0
.eh_frame:000000000040074E                 db    0
.eh_frame:000000000040074F                 db    0
.eh_frame:0000000000400750                 db  24h ; $
.eh_frame:0000000000400751                 db    0
.eh_frame:0000000000400752                 db    0
.eh_frame:0000000000400753                 db    0
.eh_frame:0000000000400754                 db  30h ; 0
.eh_frame:0000000000400755                 db    0
.eh_frame:0000000000400756                 db    0
.eh_frame:0000000000400757                 db    0
.eh_frame:0000000000400758                 db  88h
.eh_frame:0000000000400759                 db 0FCh
.eh_frame:000000000040075A                 db 0FFh
.eh_frame:000000000040075B                 db 0FFh
.eh_frame:000000000040075C                 db  20h
.eh_frame:000000000040075D                 db    0
.eh_frame:000000000040075E                 db    0
.eh_frame:000000000040075F                 db    0
.eh_frame:0000000000400760                 db    0
.eh_frame:0000000000400761                 db  0Eh
.eh_frame:0000000000400762                 db  10h
.eh_frame:0000000000400763                 db  46h ; F
.eh_frame:0000000000400764                 db  0Eh
.eh_frame:0000000000400765                 db  18h
.eh_frame:0000000000400766                 db  4Ah ; J
.eh_frame:0000000000400767                 db  0Fh
.eh_frame:0000000000400768                 db  0Bh
.eh_frame:0000000000400769                 db  77h ; w
.eh_frame:000000000040076A                 db    8
.eh_frame:000000000040076B                 db  80h
.eh_frame:000000000040076C                 db    0
.eh_frame:000000000040076D                 db  3Fh ; ?
.eh_frame:000000000040076E                 db  1Ah
.eh_frame:000000000040076F                 db  3Bh ; ;
.eh_frame:0000000000400770                 db  2Ah ; *
.eh_frame:0000000000400771                 db  33h ; 3
.eh_frame:0000000000400772                 db  24h ; $
.eh_frame:0000000000400773                 db  22h ; "
.eh_frame:0000000000400774                 db    0
.eh_frame:0000000000400775                 db    0
.eh_frame:0000000000400776                 db    0
.eh_frame:0000000000400777                 db    0
.eh_frame:0000000000400778                 db  44h ; D
.eh_frame:0000000000400779                 db    0
.eh_frame:000000000040077A                 db    0
.eh_frame:000000000040077B                 db    0
.eh_frame:000000000040077C                 db  58h ; X
.eh_frame:000000000040077D                 db    0
.eh_frame:000000000040077E                 db    0
.eh_frame:000000000040077F                 db    0
.eh_frame:0000000000400780                 db  80h
.eh_frame:0000000000400781                 db 0FEh
.eh_frame:0000000000400782                 db 0FFh
.eh_frame:0000000000400783                 db 0FFh
.eh_frame:0000000000400784                 db  65h ; e
.eh_frame:0000000000400785                 db    0
.eh_frame:0000000000400786                 db    0
.eh_frame:0000000000400787                 db    0
.eh_frame:0000000000400788                 db    0
.eh_frame:0000000000400789                 db  42h ; B
.eh_frame:000000000040078A                 db  0Eh
.eh_frame:000000000040078B                 db  10h
.eh_frame:000000000040078C                 db  8Fh
.eh_frame:000000000040078D                 db    2
.eh_frame:000000000040078E                 db  42h ; B
.eh_frame:000000000040078F                 db  0Eh
.eh_frame:0000000000400790                 db  18h
.eh_frame:0000000000400791                 db  8Eh
.eh_frame:0000000000400792                 db    3
.eh_frame:0000000000400793                 db  45h ; E
.eh_frame:0000000000400794                 db  0Eh
.eh_frame:0000000000400795                 db  20h
.eh_frame:0000000000400796                 db  8Dh
.eh_frame:0000000000400797                 db    4
.eh_frame:0000000000400798                 db  42h ; B
.eh_frame:0000000000400799                 db  0Eh
.eh_frame:000000000040079A                 db  28h ; (
.eh_frame:000000000040079B                 db  8Ch
.eh_frame:000000000040079C                 db    5
.eh_frame:000000000040079D                 db  48h ; H
.eh_frame:000000000040079E                 db  0Eh
.eh_frame:000000000040079F                 db  30h ; 0
.eh_frame:00000000004007A0                 db  86h
.eh_frame:00000000004007A1                 db    6
.eh_frame:00000000004007A2                 db  48h ; H
.eh_frame:00000000004007A3                 db  0Eh
.eh_frame:00000000004007A4                 db  38h ; 8
.eh_frame:00000000004007A5                 db  83h
.eh_frame:00000000004007A6                 db    7
.eh_frame:00000000004007A7                 db  4Dh ; M
.eh_frame:00000000004007A8                 db  0Eh
.eh_frame:00000000004007A9                 db  40h ; @
.eh_frame:00000000004007AA                 db  72h ; r
.eh_frame:00000000004007AB                 db  0Eh
.eh_frame:00000000004007AC                 db  38h ; 8
.eh_frame:00000000004007AD                 db  41h ; A
.eh_frame:00000000004007AE                 db  0Eh
.eh_frame:00000000004007AF                 db  30h ; 0
.eh_frame:00000000004007B0                 db  41h ; A
.eh_frame:00000000004007B1                 db  0Eh
.eh_frame:00000000004007B2                 db  28h ; (
.eh_frame:00000000004007B3                 db  42h ; B
.eh_frame:00000000004007B4                 db  0Eh
.eh_frame:00000000004007B5                 db  20h
.eh_frame:00000000004007B6                 db  42h ; B
.eh_frame:00000000004007B7                 db  0Eh
.eh_frame:00000000004007B8                 db  18h
.eh_frame:00000000004007B9                 db  42h ; B
.eh_frame:00000000004007BA                 db  0Eh
.eh_frame:00000000004007BB                 db  10h
.eh_frame:00000000004007BC                 db  42h ; B
.eh_frame:00000000004007BD                 db  0Eh
.eh_frame:00000000004007BE                 db    8
.eh_frame:00000000004007BF                 db    0
.eh_frame:00000000004007C0                 db  10h
.eh_frame:00000000004007C1                 db    0
.eh_frame:00000000004007C2                 db    0
.eh_frame:00000000004007C3                 db    0
.eh_frame:00000000004007C4                 db 0A0h
.eh_frame:00000000004007C5                 db    0
.eh_frame:00000000004007C6                 db    0
.eh_frame:00000000004007C7                 db    0
.eh_frame:00000000004007C8                 db 0A8h
.eh_frame:00000000004007C9                 db 0FEh
.eh_frame:00000000004007CA                 db 0FFh
.eh_frame:00000000004007CB                 db 0FFh
.eh_frame:00000000004007CC                 db    2
.eh_frame:00000000004007CD                 db    0
.eh_frame:00000000004007CE                 db    0
.eh_frame:00000000004007CF                 db    0
.eh_frame:00000000004007D0                 db    0
.eh_frame:00000000004007D1                 db    0
.eh_frame:00000000004007D2                 db    0
.eh_frame:00000000004007D3                 db    0
.eh_frame:00000000004007D4 __FRAME_END__   db    0
.eh_frame:00000000004007D5                 db    0
.eh_frame:00000000004007D6                 db    0
.eh_frame:00000000004007D7                 db    0
.eh_frame:00000000004007D7 _eh_frame       ends
.eh_frame:00000000004007D7
.init_array:0000000000600E10 ; ELF Initialization Function Table
.init_array:0000000000600E10 ; ===========================================================================
.init_array:0000000000600E10
.init_array:0000000000600E10 ; Segment type: Pure data
.init_array:0000000000600E10 ; Segment permissions: Read/Write
.init_array:0000000000600E10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000600E10                 assume cs:_init_array
.init_array:0000000000600E10                 ;org 600E10h
.init_array:0000000000600E10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000600E10                                         ; DATA XREF: LOAD:00000000004000F8↑o
.init_array:0000000000600E10                                         ; LOAD:0000000000400210↑o ...
.init_array:0000000000600E10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000600E10
.fini_array:0000000000600E18 ; ELF Termination Function Table
.fini_array:0000000000600E18 ; ===========================================================================
.fini_array:0000000000600E18
.fini_array:0000000000600E18 ; Segment type: Pure data
.fini_array:0000000000600E18 ; Segment permissions: Read/Write
.fini_array:0000000000600E18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000600E18                 assume cs:_fini_array
.fini_array:0000000000600E18                 ;org 600E18h
.fini_array:0000000000600E18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000600E18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000600E18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000600E18
LOAD:0000000000600E20 ; ELF Dynamic Information
LOAD:0000000000600E20 ; ===========================================================================
LOAD:0000000000600E20
LOAD:0000000000600E20 ; Segment type: Pure data
LOAD:0000000000600E20 ; Segment permissions: Read/Write
LOAD:0000000000600E20 LOAD            segment byte public 'DATA' use64
LOAD:0000000000600E20                 assume cs:LOAD
LOAD:0000000000600E20                 ;org 600E20h
LOAD:0000000000600E20 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000400130↑o
LOAD:0000000000600E20                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000600E20                                         ; DT_NEEDED libc.so.6
LOAD:0000000000600E30                 Elf64_Dyn <0Ch, 4003C8h> ; DT_INIT
LOAD:0000000000600E40                 Elf64_Dyn <0Dh, 400674h> ; DT_FINI
LOAD:0000000000600E50                 Elf64_Dyn <19h, 600E10h> ; DT_INIT_ARRAY
LOAD:0000000000600E60                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000600E70                 Elf64_Dyn <1Ah, 600E18h> ; DT_FINI_ARRAY
LOAD:0000000000600E80                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000600E90                 Elf64_Dyn <6FFFFEF5h, 400298h> ; DT_GNU_HASH
LOAD:0000000000600EA0                 Elf64_Dyn <5, 400318h>  ; DT_STRTAB
LOAD:0000000000600EB0                 Elf64_Dyn <6, 4002B8h>  ; DT_SYMTAB
LOAD:0000000000600EC0                 Elf64_Dyn <0Ah, 3Dh>    ; DT_STRSZ
LOAD:0000000000600ED0                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000600EE0                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000600EF0                 Elf64_Dyn <3, 601000h>  ; DT_PLTGOT
LOAD:0000000000600F00                 Elf64_Dyn <2, 18h>      ; DT_PLTRELSZ
LOAD:0000000000600F10                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000600F20                 Elf64_Dyn <17h, 4003B0h> ; DT_JMPREL
LOAD:0000000000600F30                 Elf64_Dyn <7, 400380h>  ; DT_RELA
LOAD:0000000000600F40                 Elf64_Dyn <8, 30h>      ; DT_RELASZ
LOAD:0000000000600F50                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000600F60                 Elf64_Dyn <6FFFFFFEh, 400360h> ; DT_VERNEED
LOAD:0000000000600F70                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000600F80                 Elf64_Dyn <6FFFFFF0h, 400356h> ; DT_VERSYM
LOAD:0000000000600F90                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000600FA0                 db    0
LOAD:0000000000600FA1                 db    0
LOAD:0000000000600FA2                 db    0
LOAD:0000000000600FA3                 db    0
LOAD:0000000000600FA4                 db    0
LOAD:0000000000600FA5                 db    0
LOAD:0000000000600FA6                 db    0
LOAD:0000000000600FA7                 db    0
LOAD:0000000000600FA8                 db    0
LOAD:0000000000600FA9                 db    0
LOAD:0000000000600FAA                 db    0
LOAD:0000000000600FAB                 db    0
LOAD:0000000000600FAC                 db    0
LOAD:0000000000600FAD                 db    0
LOAD:0000000000600FAE                 db    0
LOAD:0000000000600FAF                 db    0
LOAD:0000000000600FB0                 db    0
LOAD:0000000000600FB1                 db    0
LOAD:0000000000600FB2                 db    0
LOAD:0000000000600FB3                 db    0
LOAD:0000000000600FB4                 db    0
LOAD:0000000000600FB5                 db    0
LOAD:0000000000600FB6                 db    0
LOAD:0000000000600FB7                 db    0
LOAD:0000000000600FB8                 db    0
LOAD:0000000000600FB9                 db    0
LOAD:0000000000600FBA                 db    0
LOAD:0000000000600FBB                 db    0
LOAD:0000000000600FBC                 db    0
LOAD:0000000000600FBD                 db    0
LOAD:0000000000600FBE                 db    0
LOAD:0000000000600FBF                 db    0
LOAD:0000000000600FC0                 db    0
LOAD:0000000000600FC1                 db    0
LOAD:0000000000600FC2                 db    0
LOAD:0000000000600FC3                 db    0
LOAD:0000000000600FC4                 db    0
LOAD:0000000000600FC5                 db    0
LOAD:0000000000600FC6                 db    0
LOAD:0000000000600FC7                 db    0
LOAD:0000000000600FC8                 db    0
LOAD:0000000000600FC9                 db    0
LOAD:0000000000600FCA                 db    0
LOAD:0000000000600FCB                 db    0
LOAD:0000000000600FCC                 db    0
LOAD:0000000000600FCD                 db    0
LOAD:0000000000600FCE                 db    0
LOAD:0000000000600FCF                 db    0
LOAD:0000000000600FD0                 db    0
LOAD:0000000000600FD1                 db    0
LOAD:0000000000600FD2                 db    0
LOAD:0000000000600FD3                 db    0
LOAD:0000000000600FD4                 db    0
LOAD:0000000000600FD5                 db    0
LOAD:0000000000600FD6                 db    0
LOAD:0000000000600FD7                 db    0
LOAD:0000000000600FD8                 db    0
LOAD:0000000000600FD9                 db    0
LOAD:0000000000600FDA                 db    0
LOAD:0000000000600FDB                 db    0
LOAD:0000000000600FDC                 db    0
LOAD:0000000000600FDD                 db    0
LOAD:0000000000600FDE                 db    0
LOAD:0000000000600FDF                 db    0
LOAD:0000000000600FE0                 db    0
LOAD:0000000000600FE1                 db    0
LOAD:0000000000600FE2                 db    0
LOAD:0000000000600FE3                 db    0
LOAD:0000000000600FE4                 db    0
LOAD:0000000000600FE5                 db    0
LOAD:0000000000600FE6                 db    0
LOAD:0000000000600FE7                 db    0
LOAD:0000000000600FE8                 db    0
LOAD:0000000000600FE9                 db    0
LOAD:0000000000600FEA                 db    0
LOAD:0000000000600FEB                 db    0
LOAD:0000000000600FEC                 db    0
LOAD:0000000000600FED                 db    0
LOAD:0000000000600FEE                 db    0
LOAD:0000000000600FEF                 db    0
LOAD:0000000000600FEF LOAD            ends
LOAD:0000000000600FEF
.got:0000000000600FF0 ; ===========================================================================
.got:0000000000600FF0
.got:0000000000600FF0 ; Segment type: Pure data
.got:0000000000600FF0 ; Segment permissions: Read/Write
.got:0000000000600FF0 _got            segment qword public 'DATA' use64
.got:0000000000600FF0                 assume cs:_got
.got:0000000000600FF0                 ;org 600FF0h
.got:0000000000600FF0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000600FF0                                         ; DATA XREF: start+24↑r
.got:0000000000600FF8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000600FF8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000600FF8 _got            ends
.got:0000000000600FF8
.got.plt:0000000000601000 ; ===========================================================================
.got.plt:0000000000601000
.got.plt:0000000000601000 ; Segment type: Pure data
.got.plt:0000000000601000 ; Segment permissions: Read/Write
.got.plt:0000000000601000 _got_plt        segment qword public 'DATA' use64
.got.plt:0000000000601000                 assume cs:_got_plt
.got.plt:0000000000601000                 ;org 601000h
.got.plt:0000000000601000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got.plt:0000000000601008 qword_601008    dq 0                    ; DATA XREF: sub_4003E0↑r
.got.plt:0000000000601010 qword_601010    dq 0                    ; DATA XREF: sub_4003E0+6↑r
.got.plt:0000000000601018 off_601018      dq offset puts          ; DATA XREF: _puts↑r
.got.plt:0000000000601018 _got_plt        ends
.got.plt:0000000000601018
.data:0000000000601020 ; ===========================================================================
.data:0000000000601020
.data:0000000000601020 ; Segment type: Pure data
.data:0000000000601020 ; Segment permissions: Read/Write
.data:0000000000601020 _data           segment qword public 'DATA' use64
.data:0000000000601020                 assume cs:_data
.data:0000000000601020                 ;org 601020h
.data:0000000000601020                 public __data_start ; weak
.data:0000000000601020 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000601020                                         ; data_start
.data:0000000000601021                 db    0
.data:0000000000601022                 db    0
.data:0000000000601023                 db    0
.data:0000000000601024                 db    0
.data:0000000000601025                 db    0
.data:0000000000601026                 db    0
.data:0000000000601027                 db    0
.data:0000000000601028                 public __dso_handle
.data:0000000000601028 __dso_handle    db    0
.data:0000000000601029                 db    0
.data:000000000060102A                 db    0
.data:000000000060102B                 db    0
.data:000000000060102C                 db    0
.data:000000000060102D                 db    0
.data:000000000060102E                 db    0
.data:000000000060102F                 db    0
.data:000000000060102F _data           ends
.data:000000000060102F
.bss:0000000000601030 ; ===========================================================================
.bss:0000000000601030
.bss:0000000000601030 ; Segment type: Uninitialized
.bss:0000000000601030 ; Segment permissions: Read/Write
.bss:0000000000601030 _bss            segment byte public 'BSS' use64
.bss:0000000000601030                 assume cs:_bss
.bss:0000000000601030                 ;org 601030h
.bss:0000000000601030                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000601030                 public __bss_start
.bss:0000000000601030 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones+1↑o
.bss:0000000000601030                                         ; deregister_tm_clones+6↑o ...
.bss:0000000000601030                                         ; Alternative name is '__TMC_END__'
.bss:0000000000601030                                         ; completed.7698
.bss:0000000000601030                                         ; _edata
.bss:0000000000601031                 align 8
.bss:0000000000601031 _bss            ends
.bss:0000000000601031
.prgend:0000000000601038 ; ===========================================================================
.prgend:0000000000601038
.prgend:0000000000601038 ; Segment type: Zero-length
.prgend:0000000000601038 _prgend         segment byte public '' use64
.prgend:0000000000601038 _end            label byte
.prgend:0000000000601038 _prgend         ends
.prgend:0000000000601038
extern:0000000000601040 ; ===========================================================================
extern:0000000000601040
extern:0000000000601040 ; Segment type: Externs
extern:0000000000601040 ; extern
extern:0000000000601040 ; int puts(const char *s)
extern:0000000000601040                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000601040                                         ; DATA XREF: .got.plt:off_601018↑o
extern:0000000000601048 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000601048                 extrn __libc_start_main:near
extern:0000000000601048                                         ; CODE XREF: start+24↑p
extern:0000000000601048                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000601050                 extrn __gmon_start__:near ; weak
extern:0000000000601050                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000601050                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000601050
extern:0000000000601050
extern:0000000000601050                 end start
